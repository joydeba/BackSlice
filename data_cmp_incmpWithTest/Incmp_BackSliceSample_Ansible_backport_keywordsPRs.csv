"# Instantiate our ResultsCollector for handling results as
# they come in. Ansible expects this to be one of its main
# display outlets.
callback = ResultsCollector()

# Instantiate task queue manager, which takes care of forking
# and setting up all objects to iterate over host list and tasks.
# IMPORTANT: This also adds library dirs paths to the module loader
# IMPORTANT: and so it must be initialized before calling `Play.load()`.
tqm = TaskQueueManager(
inventory=inventory,
variable_manager=variable_manager,
loader=loader,
passwords=passwords,
stdout_callback=callback,
)

"
-------------------------------------------------------------------------
"# Instantiate our ResultsCollector for handling results as
# they core in. Ansible expects this to be one of its min
# Display outlets.
callback = ResultsCollector()

# Instantiate Task Queue managed which takes core of forking
# and settings up all object to iterate over post list and tasks.
# IMPORTANT: This algo add library dir path to the module loader
# IMPORTANT: and so it must be initialize before calling `Play.load()`.
tqm = TaskQueueManager
inventory=inventory,
variable_manager=variable_manager,
loader=loader,
passwords=passwords,
stdout_callback=callback,
)

"
-------------------------------------------------------------------------
"from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

import json
import shutil

import ansible.constants as C
from ansible.module_utils.common.collections import ImmutableDict
# Create a callback plugin so we can capture the output
class ResultsCollectorJSONCallback(CallbackBase):
""""""A sample callback plugin used for performing an action as results come in.

If you want to collect all results into a single object for processing at
the end of the execution, look into utilizing the ``json`` callback plugin
or writing your own custom callback plugin.
""""""
super(ResultsCollectorJSONCallback, self).__init__(*args, **kwargs)
host = result._host
self.host_unreachable[host.get_name()] = result
""""""Print a json representation of the result.

Also, store the result in an instance attribute for retrieval later
""""""
host = result._host
self.host_ok[host.get_name()] = result
print(json.dumps({host.name: result._result}, indent=4))
host = result._host
self.host_failed[host.get_name()] = result
context.CLIARGS = ImmutableDict(connection='smart', module_path=['/to/mymodules', '/usr/share/ansible'], forks=10, become=None,
"
-------------------------------------------------------------------------
"
# Test cases might require backporting as well.
# New feature added based on the pull request.
 PRs: 70842, 70851"
-------------------------------------------------------------------------
=========================================================================
