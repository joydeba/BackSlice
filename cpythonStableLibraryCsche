{"conf.py": {"libraries": ["sys", "patchlevel", "os", "time"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["time.strftime", "sys.path", "os.getenv", "os.path", "os.listdir", "exclude_patterns.append", "release.replace", "patchlevel.get_version_info", "latex_documents.extend", "fn.endswith"]}, "dbpickle.py": {"libraries": ["pprint", "io", "pickle", "sqlite3", "collections.namedtuple"], "function_names": ["__init__", "persistent_id", "main", "persistent_load"], "function_calls": ["DBPickler", "MemoRecord", "isinstance", "super", "str", "DBUnpickler", "namedtuple", "main", "print"], "class_names": ["DBPickler", "DBUnpickler"], "class_method_calls": ["sqlite3.connect", "cursor.fetchone", "self.connection", "obj.key", "pickle.Unpickler", "cursor.execute", "pickle.UnpicklingError", "io.BytesIO", "pprint.pprint", "pickle.Pickler", "conn.cursor", "file.seek"]}, "email-alternative.py": {"libraries": ["email.utils.make_msgid", "email.headerregistry.Address", "smtplib", "email.message.EmailMessage"], "function_names": [], "function_calls": ["make_msgid", "bytes", "Address", "open", "EmailMessage"], "class_names": [], "class_method_calls": ["msg.add_alternative", "f.write", "msg.set_content", "msg.get_payload", "s.send_message", "smtplib.SMTP", "img.read"]}, "email-dir.py": {"libraries": ["argparse.ArgumentParser", "email.policy.SMTP", "mimetypes", "smtplib", "email.message.EmailMessage", "os"], "function_names": ["main"], "function_calls": ["ArgumentParser", "EmailMessage", "main", "open"], "class_names": [], "class_method_calls": ["args.recipients", "fp.write", "os.path", "msg.add_attachment", "msg.preamble", "args.sender", "args.directory", "os.listdir", "ctype.split", "parser.add_argument", "fp.read", "args.output", "s.send_message", "mimetypes.guess_type", "smtplib.SMTP", "parser.parse_args", "msg.as_bytes"]}, "email-headers.py": {"libraries": ["email.parser.BytesParser", "email.parser.Parser", "email.policy.default"], "function_names": [], "function_calls": ["Parser", "print"], "class_names": [], "class_method_calls": []}, "email-mime.py": {"libraries": ["imghdr", "smtplib", "email.message.EmailMessage"], "function_names": [], "function_calls": ["EmailMessage", "open"], "class_names": [], "class_method_calls": ["msg.add_attachment", "msg.preamble", "fp.read", "s.send_message", "smtplib.SMTP", "imghdr.what"]}, "email-read-alternative.py": {"libraries": ["mimetypes", "sys", "tempfile", "email.parser.BytesParser", "os", "email.policy", "webbrowser", "imaginary.magic_html_parser"], "function_names": [], "function_calls": ["magic_html_parser", "BytesParser", "input", "open", "print"], "class_names": [], "class_method_calls": ["part.get_content", "msg.get_body", "f.name", "tempfile.NamedTemporaryFile", "richest.iter_attachments", "f.write", "sys.exit", "richest.get_content_type", "richest.get_body", "os.remove", "simplest.get_content", "ans.lower", "part.get_content_type", "mimetypes.guess_extension", "partfiles.values", "part.get_filename", "policy.default", "webbrowser.open", "os.path", "body.get_content", "richest.get_content"]}, "email-simple.py": {"libraries": ["smtplib", "email.message.EmailMessage"], "function_names": [], "function_calls": ["EmailMessage", "open"], "class_names": [], "class_method_calls": ["msg.set_content", "s.quit", "fp.read", "s.send_message", "smtplib.SMTP"]}, "email-unpack.py": {"libraries": ["argparse.ArgumentParser", "mimetypes", "os", "email.policy.default", "email"], "function_names": ["main"], "function_calls": ["ArgumentParser", "main", "open"], "class_names": [], "class_method_calls": ["part.get_content_maintype", "os.mkdir", "fp.write", "os.path", "args.msgfile", "part.get_payload", "args.directory", "msg.walk", "part.get_content_type", "parser.add_argument", "email.message_from_binary_file", "mimetypes.guess_extension", "parser.parse_args", "part.get_filename"]}, "minidom-example.py": {"libraries": ["xml.dom.minidom"], "function_names": ["getText", "handleSlideshowTitle", "handleToc", "handleSlide", "handleSlides", "handlePoints", "handleSlideshow", "handlePoint", "handleSlideTitle"], "function_calls": ["getText", "handleSlideshowTitle", "handleSlides", "handleSlide", "handlePoints", "handleToc", "handlePoint", "handleSlideTitle", "handleSlideshow", "print"], "class_names": [], "class_method_calls": ["node.data", "slide.getElementsByTagName", "node.nodeType", "rc.append", "point.childNodes", "slideshow.getElementsByTagName", "xml.dom", "node.TEXT_NODE", "title.childNodes"]}, "mp_newtype.py": {"libraries": ["multiprocessing.managers.BaseManager", "multiprocessing.freeze_support", "operator", "multiprocessing.managers.BaseProxy"], "function_names": ["g", "test", "get_operator_module", "_h", "__iter__", "baz", "__next__", "f"], "function_calls": ["MyManager", "test", "sorted", "hasattr", "freeze_support", "range", "print"], "class_names": ["Foo", "MyManager", "GeneratorProxy"], "class_method_calls": ["self._callmethod", "manager.Foo2", "f1.f", "manager.Foo1", "op._exposed_", "f2.g", "manager.start", "op.pow", "manager.baz", "MyManager.register", "manager.operator", "f2._exposed_", "f1._exposed_", "op.add", "f2._h", "f1.g"]}, "mp_pool.py": {"libraries": ["sys", "random", "multiprocessing", "time"], "function_names": ["test", "calculate", "noop", "mul", "calculatestar", "plus", "pow3", "f"], "function_calls": ["list", "test", "calculate", "next", "func", "AssertionError", "range", "print"], "class_names": [], "class_method_calls": ["multiprocessing.current_process", "time.sleep", "sys.stdout", "pool.apply_async", "pool.imap", "r.get", "pool.map", "multiprocessing.TimeoutError", "res.get", "random.random", "it.next", "pool.apply", "multiprocessing.Pool", "func.__name__", "multiprocessing.freeze_support", "pool.imap_unordered"]}, "mp_workers.py": {"libraries": ["multiprocessing.current_process", "time", "multiprocessing.Queue", "random", "multiprocessing.freeze_support", "multiprocessing.Process"], "function_names": ["test", "worker", "calculate", "mul", "plus"], "function_calls": ["len", "test", "Queue", "freeze_support", "iter", "calculate", "Process", "func", "range", "current_process", "print"], "class_names": [], "class_method_calls": ["output.put", "time.sleep", "task_queue.put", "input.get", "random.random", "func.__name__", "done_queue.get"]}, "setup.py": {"libraries": ["importlib.machinery", "os.path.exists", "distutils.spawn.find_executable", "warnings", "os.path.join", "distutils.core.Extension", "distutils.errors.DistutilsError", "sysconfig", "distutils.core.setup", "distutils.command.install_lib.install_lib", "distutils.log", "importlib.util", "glob.glob", "os", "re", "distutils.command.install.install", "_osx_support", "distutils.errors.CCompilerError", "distutils.command.build_scripts.build_scripts", "importlib._bootstrap", "distutils.command.build_ext.build_ext", "glob.escape", "argparse", "sys"], "function_names": ["detect_uuid", "detect_modules", "set_compiler_flags", "add_cross_compiling_paths", "detect_crypt", "sysroot_paths", "detect_nis", "detect_multiprocessing", "find_module_file", "check_extension_import", "get_platform", "add_ldflags_cppflags", "copy_scripts", "configure_ctypes", "find_library_file", "detect_expat_elementtree", "detect_multibytecodecs", "detect_openssl_hashlib", "detect_dbm_gdbm", "install", "detect_socket", "detect_platform_specific_exts", "allow_db_ver", "detect_decimal", "__init__", "detect_ctypes", "split_var", "add_dir_to_list", "configure_compiler", "init_inc_lib_dirs", "detect_hash_builtins", "detect_simple_extensions", "detect_compress_exts", "is_macosx_sdk_path", "print_three_column", "detect_tkinter_explicitly", "detect_tkinter", "macosx_sdk_root", "add_multiarch_paths", "build_extension", "detect_sqlite", "initialize_options", "gen_db_minor_ver_nums", "detect_test_extensions", "set_file_modes", "set_dir_modes", "find_file", "add", "main", "build_extensions", "detect_tkinter_darwin", "detect_readline_curses", "grep_headers_for"], "function_calls": ["set_compiler_flags", "sysroot_paths", "find_module_file", "get_platform", "reversed", "setup", "escape", "join", "str", "allow_db_ver", "tuple", "dict", "open", "split_var", "add_dir_to_list", "range", "ValueError", "list", "Extension", "is_macosx_sdk_path", "print_three_column", "int", "zip", "enumerate", "macosx_sdk_root", "glob", "find_executable", "DistutilsError", "len", "any", "gen_db_minor_ver_nums", "max", "find_file", "main", "exists", "filter", "grep_headers_for", "print"], "class_names": ["PyBuildExt", "PyBuildScripts", "PyBuildInstall", "db_found", "DummyProcess", "PyBuildInstallLib"], "class_method_calls": ["ext.extra_link_args", "line.strip", "e.name", "item.startswith", "warnings.filterwarnings", "build_scripts.copy_scripts", "readline_libs.append", "build_ext.build_extensions", "ext.depends", "lst.append", "path.startswith", "lst.sort", "parser.add_argument", "arg.strip", "ldflags.split", "mods_disabled.append", "sha3_deps.append", "self.distribution", "HOST_PLATFORM.startswith", "self.detect_ctypes", "os.sep", "parser.parse_known_args", "self.detect_hash_builtins", "self.detect_socket", "self.failed_on_import", "curses_library.startswith", "self.add", "build_ext.__init__", "sqlite_version.split", "fp.readlines", "sys.version", "install.has_scripts", "sysconfig.get_config_h_filename", "sys.path_importer_cache", "sysconfig.get_config_var", "tcltk_includes.split", "self.detect_expat_elementtree", "define_macros.append", "importlib.machinery", "self.detect_multibytecodecs", "arg.startswith", "install_lib.install", "os.makedirs", "self.use_system_libffi", "self.detect_dbm_gdbm", "SUMMARY.strip", "_osx_support._default_sysroot", "db_found_vers.sort", "value.split", "self.detect_decimal", "added_lib_dirs.append", "undef_macros.append", "re.search", "self.inc_dirs", "db_found_vers.pop", "importlib.util", "extra_link_args.append", "self.detect_multiprocessing", "tmp.append", "ext.name", "cflags.split", "ln.split", "self.announce", "self.config_h_vars", "install.initialize_options", "os.uname", "self.srcdir", "os.system", "self.dry_run", "ext.libraries", "self.configure_ctypes", "db_ver_inc_map.keys", "self.warn_dir", "self.get_ext_filename", "options.dirs", "ssl_incs.extend", "os.path", "sys.maxsize", "os.getenv", "std_variants.append", "blake2_deps.append", "self.failed", "self.configure_compiler", "self.detect_compress_exts", "libs.append", "include_dirs.append", "config_vars.get", "install.has_headers", "sys.version_info", "self.get_ext_fullname", "line.startswith", "dirlist.insert", "newupdated_files.append", "ext.include_dirs", "self.lib_dirs", "argparse.ArgumentParser", "sys.platform", "self.init_inc_lib_dirs", "self.detect_crypt", "self.install_dir", "self.set_dir_modes", "ffi_inc_dirs.append", "self.detect_readline_curses", "HOST_PLATFORM.lower", "self.compiler", "self.shlib_suffix", "library_dirs.append", "self.add_ldflags_cppflags", "p.rstrip", "self.detect_tkinter_explicitly", "build_ext.build_extension", "filename.endswith", "mods_built.append", "self.add_cross_compiling_paths", "self.detect_sqlite", "re.sub", "self.detect_modules", "compiler.find_library_file", "self.inplace", "str.lower", "os.environ", "sys.base_prefix", "os.walk", "detected_archs.append", "gdbm_libs.append", "multiprocessing_srcs.append", "extensions.append", "self.detect_openssl_hashlib", "os.chmod", "arg.split", "self.get_ext_fullpath", "sysconfig.parse_config_h", "self.missing", "sqlite_defines.append", "self.parallel", "sysconfig.get_config_vars", "ext.sources", "re.findall", "self.detect_simple_extensions", "self.add_multiarch_paths", "time_libs.append", "extra_compile_args.append", "file.read", "self.check_extension_import", "frameworks.append", "self.build_temp", "os.rename", "db_incdir.replace", "self.set_file_modes", "sys.modules", "self.detect_tkinter_darwin", "self.extensions", "dep_target.split", "env_val.split", "self.detect_uuid", "dirs.append", "db_inc_paths.append", "self.detect_tkinter", "sources.append", "f.read", "os.remove", "self.detect_platform_specific_exts", "log.info", "install.has_data", "sys.exc_info", "v.strip", "self.detect_test_extensions", "curses_defines.append", "importlib._bootstrap", "os.unlink", "extensions.pop", "line.split", "tcltk_libs.split", "defs.append", "install.has_lib", "self.detect_nis", "self.build_lib", "CLASSIFIERS.split", "newoutfiles.append", "curses_includes.append", "fp.readline", "includes_dirs.extend", "sysconfig.get_path", "m.group", "ext.extra_compile_args"]}, "adapter_datetime.py": {"libraries": ["sqlite3", "time", "datetime"], "function_names": ["adapt_datetime"], "function_calls": ["print"], "class_names": [], "class_method_calls": ["sqlite3.connect", "datetime.datetime", "cur.fetchone", "sqlite3.register_adapter", "ts.timetuple", "cur.execute", "con.cursor", "time.mktime", "con.close"]}, "adapter_point_1.py": {"libraries": ["sqlite3"], "function_names": ["__init__", "__conform__"], "function_calls": ["Point", "print"], "class_names": ["Point"], "class_method_calls": ["sqlite3.connect", "cur.fetchone", "self.x", "cur.execute", "con.cursor", "sqlite3.PrepareProtocol", "con.close", "self.y"]}, "adapter_point_2.py": {"libraries": ["sqlite3"], "function_names": ["__init__", "adapt_point"], "function_calls": ["Point", "print"], "class_names": ["Point"], "class_method_calls": ["sqlite3.connect", "point.x", "cur.fetchone", "sqlite3.register_adapter", "self.x", "cur.execute", "point.y", "con.cursor", "con.close", "self.y"]}, "collation_reverse.py": {"libraries": ["sqlite3"], "function_names": ["collate_reverse"], "function_calls": ["print"], "class_names": [], "class_method_calls": ["sqlite3.connect", "cur.execute", "con.create_collation", "con.cursor", "con.close", "cur.executemany"]}, "complete_statement.py": {"libraries": ["sqlite3"], "function_names": [], "function_calls": ["input", "print"], "class_names": [], "class_method_calls": ["sqlite3.connect", "buffer.lstrip", "sqlite3.Error", "sqlite3.complete_statement", "e.args", "cur.execute", "cur.fetchall", "con.cursor", "con.isolation_level", "buffer.strip", "con.close"]}, "converter_point.py": {"libraries": ["sqlite3"], "function_names": ["__init__", "adapt_point", "__repr__", "convert_point"], "function_calls": ["list", "map", "Point", "print"], "class_names": ["Point"], "class_method_calls": ["sqlite3.connect", "cur.close", "point.x", "cur.fetchone", "sqlite3.register_adapter", "sqlite3.register_converter", "self.x", "cur.execute", "s.split", "point.y", "sqlite3.PARSE_DECLTYPES", "con.cursor", "sqlite3.PARSE_COLNAMES", "con.close", "self.y"]}, "countcursors.py": {"libraries": ["sqlite3"], "function_names": ["__init__", "cursor"], "function_calls": ["print"], "class_names": ["CountCursorsConnection"], "class_method_calls": ["sqlite3.Connection", "con.numcursors", "sqlite3.connect", "self.numcursors", "con.cursor", "con.close"]}, "createdb.py": {"libraries": ["os", "sqlite3"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["cur.close", "sqlite3.connect", "os.path", "os.remove", "cur.execute", "con.commit", "con.cursor", "con.close"]}, "ctx_manager.py": {"libraries": ["sqlite3"], "function_names": [], "function_calls": ["print"], "class_names": [], "class_method_calls": ["con.close", "sqlite3.connect", "sqlite3.IntegrityError", "con.execute"]}, "execsql_fetchonerow.py": {"libraries": ["sqlite3"], "function_names": [], "function_calls": ["print"], "class_names": [], "class_method_calls": ["cur.execute", "sqlite3.connect", "con.close", "con.cursor"]}, "execsql_printall_1.py": {"libraries": ["sqlite3"], "function_names": [], "function_calls": ["print"], "class_names": [], "class_method_calls": ["sqlite3.connect", "cur.execute", "cur.fetchall", "con.cursor", "con.close"]}, "execute_1.py": {"libraries": ["sqlite3"], "function_names": [], "function_calls": ["print"], "class_names": [], "class_method_calls": ["sqlite3.connect", "cur.fetchone", "cur.execute", "con.cursor", "con.close"]}, "executemany_1.py": {"libraries": ["sqlite3"], "function_names": ["__init__", "__next__", "__iter__"], "function_calls": ["ord", "chr", "IterChars", "print"], "class_names": ["IterChars"], "class_method_calls": ["sqlite3.connect", "self.count", "cur.execute", "cur.fetchall", "con.cursor", "con.close", "cur.executemany"]}, "executemany_2.py": {"libraries": ["sqlite3", "string"], "function_names": ["char_generator"], "function_calls": ["char_generator", "print"], "class_names": [], "class_method_calls": ["sqlite3.connect", "string.ascii_lowercase", "cur.execute", "cur.fetchall", "con.cursor", "con.close", "cur.executemany"]}, "executescript.py": {"libraries": ["sqlite3"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["con.close", "sqlite3.connect", "cur.executescript", "con.cursor"]}, "insert_more_people.py": {"libraries": ["sqlite3"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["sqlite3.connect", "cur.execute", "con.commit", "con.cursor", "con.close"]}, "load_extension.py": {"libraries": ["sqlite3"], "function_names": [], "function_calls": ["print"], "class_names": [], "class_method_calls": ["sqlite3.connect", "con.executescript", "con.enable_load_extension", "con.close", "con.execute"]}, "md5func.py": {"libraries": ["sqlite3", "hashlib"], "function_names": ["md5sum"], "function_calls": ["print"], "class_names": [], "class_method_calls": ["sqlite3.connect", "hashlib.md5", "cur.fetchone", "con.create_function", "cur.execute", "con.cursor", "con.close"]}, "mysumaggr.py": {"libraries": ["sqlite3"], "function_names": ["__init__", "finalize", "step"], "function_calls": ["print"], "class_names": ["MySum"], "class_method_calls": ["sqlite3.connect", "self.count", "cur.fetchone", "cur.execute", "con.create_aggregate", "con.cursor", "con.close"]}, "parse_colnames.py": {"libraries": ["sqlite3", "datetime"], "function_names": [], "function_calls": ["type", "print"], "class_names": [], "class_method_calls": ["sqlite3.connect", "datetime.datetime", "cur.fetchone", "cur.execute", "sqlite3.PARSE_COLNAMES", "con.cursor", "con.close"]}, "pysqlite_datetime.py": {"libraries": ["sqlite3", "datetime"], "function_names": [], "function_calls": ["type", "print"], "class_names": [], "class_method_calls": ["sqlite3.connect", "datetime.datetime", "cur.fetchone", "cur.execute", "sqlite3.PARSE_DECLTYPES", "con.cursor", "sqlite3.PARSE_COLNAMES", "con.close", "datetime.date"]}, "row_factory.py": {"libraries": ["sqlite3"], "function_names": ["dict_factory"], "function_calls": ["enumerate", "print"], "class_names": [], "class_method_calls": ["sqlite3.connect", "con.row_factory", "cursor.description", "cur.fetchone", "cur.execute", "con.cursor", "con.close"]}, "rowclass.py": {"libraries": ["sqlite3"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["sqlite3.connect", "sqlite3.Row", "con.row_factory", "cur.execute", "con.cursor", "con.close"]}, "shared_cache.py": {"libraries": ["sqlite3"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["sqlite3.enable_shared_cache"]}, "shortcut_methods.py": {"libraries": ["sqlite3"], "function_names": [], "function_calls": ["print"], "class_names": [], "class_method_calls": ["con.executemany", "sqlite3.connect", "con.close", "con.execute"]}, "simple_tableprinter.py": {"libraries": ["sqlite3"], "function_names": [], "function_calls": ["len", "str", "range", "print"], "class_names": [], "class_method_calls": ["sqlite3.connect", "cur.description", "cur.execute", "con.cursor", "con.close", "fieldValue.ljust"]}, "text_factory.py": {"libraries": ["sqlite3"], "function_names": [], "function_calls": ["type"], "class_names": [], "class_method_calls": ["x.decode", "sqlite3.connect", "AUSTRIA.encode", "cur.fetchone", "con.text_factory", "cur.execute", "con.cursor", "con.close"]}, "test.py": {"libraries": ["doctest", "distutils.util.get_platform", "__main__", "sys", "os"], "function_names": [], "function_calls": ["get_platform"], "class_names": [], "class_method_calls": ["sys.version_info", "doctest.testmod", "sys.path", "os.path"]}, "turtle-star.py": {"libraries": ["turtle.*"], "function_names": [], "function_calls": ["done", "left", "forward", "abs", "begin_fill", "pos", "end_fill", "color"], "class_names": [], "class_method_calls": []}, "tzinfo_examples.py": {"libraries": ["datetime.timedelta", "time", "datetime.datetime", "datetime.tzinfo"], "function_names": ["utcoffset", "tzname", "_isdst", "__init__", "fromutc", "__repr__", "first_sunday_on_or_after", "dst", "us_dst_range"], "function_calls": ["datetime", "LocalTimezone", "USTimeZone", "first_sunday_on_or_after", "timedelta", "us_dst_range"], "class_names": ["LocalTimezone", "USTimeZone"], "class_method_calls": ["_time.tzname", "dt.second", "dststart.replace", "self._isdst", "_time.daylight", "_time.localtime", "dt.microsecond", "self.dstname", "std_time.replace", "dt.tzinfo", "_time.timezone", "dt.year", "start.replace", "self.dst", "tt.tm_isdst", "dt.replace", "dt.weekday", "end.replace", "self.reprname", "dt.fold", "dt.month", "dt.hour", "dt.day", "self.stdoffset", "dstend.replace", "dt.minute", "_time.mktime", "_time.altzone", "self.stdname"]}, "c_annotations.py": {"libraries": ["os.path", "docutils.parsers.rst.directives", "docutils.nodes", "sphinx.addnodes", "sphinx.domains.c.CObject"], "function_names": ["new_handle_signature", "init_annotations", "fromfile", "add_annotations", "__init__", "setup"], "function_calls": ["ValueError", "len", "RCEntry", "cls", "int", "old_handle_signature", "open"], "class_names": ["RCEntry", "Annotations"], "class_method_calls": ["line.strip", "addnodes.desc_content", "doctree.traverse", "directives.flag", "fp.close", "self.name", "entry.args", "self.args", "app.add_config_value", "CObject.option_spec", "name.startswith", "app.connect", "node.parent", "self.result_type", "app.srcdir", "entry.result_type", "self.options", "app.config", "path.join", "nodes.emphasis", "Annotations.fromfile", "refcounts.add_annotations", "self.result_refs", "CObject.handle_signature", "line.split", "signode.parent", "node.insert", "entry.result_refs", "self.get"]}, "escape4chm.py": {"libraries": ["re", "html.entities.codepoint2name", "sphinx.util.logging.getLogger"], "function_names": ["escape_for_chm", "escape", "_process", "fixup_keywords", "setup"], "function_calls": ["ord", "getattr", "getLogger", "_process"], "class_names": [], "class_method_calls": ["f.write", "re.sub", "context.get", "app.connect", "index.replace", "app.builder", "f.read", "matchobj.group", "codepoint2name.get"]}, "patchlevel.py": {"libraries": ["__future__.print_function", "sys", "os", "re"], "function_names": ["get_sys_version_info", "get_header_version_info", "get_version_info"], "function_calls": ["str", "int", "get_sys_version_info", "open", "get_header_version_info", "print"], "class_names": [], "class_method_calls": ["os.path", "re.compile", "sys.stderr", "sys.version_info", "rx.match", "m.group"]}, "pyspecific.py": {"libraries": ["sphinx.writers.latex.LaTeXTranslator", "sphinx.domains.python.PyClassmember", "sphinx.locale.translators", "pprint.pformat", "sphinx.util.nodes.split_explicit_title", "time.asctime", "sphinx.util.status_iterator", "sphinx.errors.NoUri", "io", "sphinx.writers.text.TextTranslator", "sphinx.addnodes", "docutils.parsers.rst.states.Body", "sphinx.builders.Builder", "re", "sphinx.domains.python.PyModulelevel", "docutils.utils.new_document", "docutils.io.StringOutput", "sphinx.writers.text.TextWriter", "suspicious", "docutils.utils", "sphinx.domains.python.PyMethod", "os.getenv", "os.path", "docutils.nodes", "docutils.parsers.rst.Directive", "sphinx.domains.python.PyFunction", "sphinx.environment.NoUri", "sphinx.util.logging"], "function_names": ["logger", "write", "get_target_uri", "parse_opcode_signature", "issue_role", "process_audit_events", "run", "source_role", "handle_signature", "gh_issue_role", "setup", "needs_arglist", "parse_pdb_command", "get_outdated_docs", "_do_args_match", "init", "finish"], "function_calls": ["min", "sorted", "getattr", "isinstance", "StringOutput", "super", "TextWriter", "tuple", "split_explicit_title", "open", "audit_event_list", "getenv", "status_iterator", "new_document", "set", "int", "type", "zip", "enumerate", "hasattr", "len", "any", "pformat", "asctime"], "class_names": ["AuditEvent", "DeprecatedRemoved", "audit_event_list", "PyDecoratorMixin", "PyCoroutineMixin", "PyCoroutineMethod", "ImplementationDetail", "PyDecoratorMethod", "PyAbstractMethod", "MiscNews", "PyCoroutineFunction", "PyAwaitableMixin", "AuditEventListDirective", "PyAwaitableMethod", "PydocTopicsBuilder", "Availability", "PyAwaitableFunction", "PyDecoratorFunction"], "class_method_calls": ["doctree.traverse", "addnodes.desc_addname", "nodes.tbody", "nodes.Text", "opcode_sig_re.match", "io.open", "signode.insert", "self.arguments", "env.config", "addnodes.desc_name", "utils.unescape", "env.all_audit_events", "inliner.problematic", "issue_re.sub", "gh_issue_re.sub", "nodes.thead", "PyMethod.run", "writer.output", "PyFunction.run", "self.content_offset", "inliner.reporter", "addnodes.versionmodified", "whatsnew_re.sub", "nodes.strong", "self.lineno", "nodes.tgroup", "Body.enum", "path.abspath", "app.connect", "nodes.paragraph", "self.topics", "self.state_machine", "addnodes.desc_parameter", "cls.__module__", "self._deprecated_label", "path.join", "node.document", "pnode.insert", "node.append", "m.groups", "nodes.table", "fp.read", "doctree.ids", "label.format", "nodes.colspec", "nodes.Element", "nodes.row", "path.dirname", "addnodes.desc_parameterlist", "nodes.entry", "app.add_directive_to_domain", "pnode.children", "self.content", "pnode.append", "app.builder", "addnodes.desc_annotation", "self.state", "app.add_directive", "content.line", "self._removed_label", "self._do_args_match", "self.env", "self.secnumbers", "nodes.literal", "f.write", "self.label_text", "pdbcmd_sig_re.match", "self._SYNONYMS", "env.get_domain", "re.sub", "re.I", "env.docname", "cls.__name__", "nodes.General", "document.append", "node.replace_self", "a.strip", "opname.strip", "name.replace", "re.compile", "app.add_role", "writer.write", "f.close", "ids.append", "pnode.extend", "nodes.compound", "app.add_builder", "content.source", "nodes.reference", "app.add_object_type", "nodes.inline", "suspicious.CheckSuspiciousMarkupBuilder", "self.name", "logging.getLogger", "self.outdir", "self.logger", "content.splitlines", "self._label"]}, "suspicious.py": {"libraries": ["re", "sphinx.util", "docutils.nodes", "csv", "sys", "sphinx.builders.Builder", "os"], "function_names": ["report_issue", "prepare_writing", "visit_document", "visit_comment", "is_ignored", "get_target_uri", "write_log_entry", "default_visit", "write_doc", "check_issue", "load_rules", "get_lineno", "__init__", "__repr__", "get_outdated_docs", "finish", "init", "extract_line"], "function_calls": ["ValueError", "isinstance", "len", "max", "set", "abs", "detect_all", "int", "get_lineno", "open", "Rule", "SuspiciousVisitor", "enumerate", "extract_line", "repr"], "class_names": ["SuspiciousVisitor", "dialect", "CheckSuspiciousMarkupBuilder", "Rule"], "class_method_calls": ["csv.reader", "sphinx.util", "rule.issue", "self.used", "match.start", "text.decode", "sys.getdefaultencoding", "self.env", "doctree.walk", "docname.decode", "nodes.Text", "self.lineno", "self.line", "self.rules", "text.strip", "re.UNICODE", "rules.append", "node.parent", "self.outdir", "self.report_issue", "self.lastlineno", "text.rfind", "rule.lineno", "self.any_issue", "self.logger", "f.close", "self.is_ignored", "nodes.image", "self.docname", "self.load_rules", "csv.excel", "csv.writer", "rule.used", "rule.docname", "nodes.GenericNodeVisitor", "rule.line", "re.VERBOSE", "self.issue", "writer.writerow", "self.builder", "seen.add", "text.find", "os.path", "re.compile", "node.astext", "issue.encode", "self.write_log_entry", "node.line", "self.app", "sys.version_info", "issue.decode", "match.group", "nodes.SkipNode", "self.log_file_name"]}, "rstlint.py": {"libraries": ["re", "os.path.exists", "getopt", "sys", "os.path.join", "os.path.abspath", "collections.defaultdict", "os", "os.path.splitext"], "function_names": ["checker", "check_syntax", "check_suspicious_constructs", "check_leaked_markup", "check_line_length", "main", "check_whitespace", "deco"], "function_calls": ["splitext", "list", "checker", "len", "compile", "sorted", "join", "int", "exists", "main", "abspath", "bool", "enumerate", "defaultdict", "open", "setattr", "print"], "class_names": [], "class_method_calls": ["line.strip", "kwds.get", "line.lstrip", "checkers.setdefault", "default_role_re.search", "checker.severity", "sys.exit", "getopt.getopt", "err.lineno", "getopt.GetoptError", "leaked_markup_re.search", "os.walk", "code.replace", "checkers.get", "ignore.append", "re.compile", "os.name", "sys.argv", "checker.falsepositives", "seems_directive_re.search"]}, "__future__.py": {"libraries": [], "function_names": ["getMandatoryRelease", "__init__", "getOptionalRelease", "__repr__"], "function_calls": ["_Feature", "repr"], "class_names": ["_Feature"], "class_method_calls": ["self.mandatory", "self.optional", "self.compiler_flag"]}, "__phello__.foo.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "_bootlocale.py": {"libraries": ["sys", "locale", "_locale"], "function_names": ["getpreferredencoding"], "function_calls": ["hasattr"], "class_names": [], "class_method_calls": ["locale.getpreferredencoding", "sys.platform", "sys.flags", "_locale.CODESET", "_locale.nl_langinfo", "_locale._getdefaultlocale"]}, "_collections_abc.py": {"libraries": ["sys", "abc.ABCMeta", "abc.abstractmethod"], "function_names": ["extend", "__le__", "__ixor__", "__reversed__", "append", "__sub__", "__eq__", "keys", "__repr__", "_from_iterable", "throw", "__ge__", "values", "clear", "__ior__", "__await__", "update", "get", "reverse", "__call__", "__aiter__", "__lt__", "__iand__", "__isub__", "__init__", "__iadd__", "discard", "_check_methods", "_hash", "popitem", "close", "index", "__len__", "__gt__", "isdisjoint", "__iter__", "insert", "items", "__getitem__", "__and__", "__subclasshook__", "__next__", "__or__", "pop", "__setitem__", "send", "remove", "__xor__", "__hash__", "count", "add", "__delitem__", "setdefault", "__rsub__", "__contains__"], "function_calls": ["object", "cls", "reversed", "RuntimeError", "KeyError", "isinstance", "iter", "_ag", "hash", "dict", "_check_methods", "KeysView", "range", "list", "ValuesView", "typ", "set", "type", "zip", "next", "hasattr", "bytearray", "len", "max", "AsyncIterator", "sum", "_coro", "ItemsView"], "class_names": ["Callable", "AsyncGenerator", "Sized", "Iterable", "Awaitable", "Reversible", "MappingView", "Hashable", "ByteString", "Mapping", "Set", "KeysView", "ValuesView", "Coroutine", "MutableSet", "AsyncIterable", "Container", "Generator", "Collection", "MutableMapping", "MutableSequence", "Sequence", "AsyncIterator", "Iterator", "ItemsView"], "class_method_calls": ["Iterator.register", "MutableSequence.register", "B.__dict__", "ByteString.register", "self.__le__", "ValuesView.register", "self.extend", "self.athrow", "self.append", "self.asend", "self.insert", "Coroutine.register", "other.items", "self.throw", "MutableMapping.register", "_coro.close", "self.items", "type.__dict__", "Generator.register", "Sequence.register", "self.index", "self._from_iterable", "self.clear", "self.__marker", "Mapping.register", "self.popitem", "other.keys", "kwds.items", "self.send", "self.add", "self.discard", "ItemsView.register", "Set.register", "self.__ge__", "sys.maxsize", "val.with_traceback", "KeysView.register", "C.__mro__", "MutableSet.register", "AsyncGenerator.register", "self._mapping", "self.pop"]}, "_compat_pickle.py": {"libraries": [], "function_names": [], "function_calls": ["len", "dict"], "class_names": [], "class_method_calls": ["NAME_MAPPING.items", "REVERSE_IMPORT_MAPPING.update", "IMPORT_MAPPING.items", "IMPORT_MAPPING.update", "NAME_MAPPING.update", "REVERSE_NAME_MAPPING.update"]}, "_compression.py": {"libraries": ["io"], "function_names": ["readinto", "close", "_check_can_write", "readable", "seek", "_check_can_seek", "__init__", "tell", "seekable", "_check_not_closed", "_check_can_read", "read", "_rewind"], "function_calls": ["ValueError", "len", "min", "super", "EOFError", "memoryview"], "class_names": ["BaseStream", "DecompressReader"], "class_method_calls": ["self.closed", "self._fp", "self._pos", "self._decomp_args", "self._decomp_factory", "self._eof", "self._trailing_error", "io.RawIOBase", "io.DEFAULT_BUFFER_SIZE", "io.BufferedIOBase", "self.readable", "self.read", "self.readall", "self._rewind", "view.cast", "self.writable", "self._decompressor", "self._size", "io.UnsupportedOperation", "io.SEEK_CUR", "io.SEEK_SET", "io.SEEK_END", "self.seekable"]}, "_dummy_thread.py": {"libraries": ["time", "traceback"], "function_names": ["interrupt_main", "exit", "get_ident", "stack_size", "__exit__", "allocate_lock", "locked", "_set_sentinel", "start_new_thread", "__init__", "release", "acquire", "__repr__"], "function_calls": ["function", "super", "error", "hex", "tuple", "id", "type", "LockType", "dict", "TypeError"], "class_names": ["RLock", "LockType"], "class_method_calls": ["time.sleep", "self.locked_status", "self._levels", "traceback.print_exc", "self.release", "self.__class__"]}, "_markupbase.py": {"libraries": ["re"], "function_names": ["_parse_doctype_subset", "unknown_decl", "_scan_name", "_parse_doctype_element", "parse_declaration", "error", "_parse_doctype_notation", "__init__", "_parse_doctype_entity", "reset", "_parse_doctype_attlist", "parse_marked_section", "parse_comment", "getpos", "updatepos"], "function_calls": ["_declname_match", "len", "_declstringlit_match", "meth", "getattr", "NotImplementedError", "RuntimeError"], "class_names": ["ParserBase"], "class_method_calls": ["rawdata.count", "match.start", "c.isspace", "self.lineno", "m.end", "self.error", "self._decl_otherchars", "self.parse_comment", "_msmarkedsectionclose.search", "rawdata.rindex", "_commentclose.search", "match.end", "self.updatepos", "name.lower", "rawdata.find", "self.offset", "s.strip", "self._parse_doctype_subset", "self.handle_decl", "re.compile", "self._scan_name", "self.handle_comment", "_markedsectionclose.search", "self.__class__", "self.unknown_decl", "self.rawdata", "m.group", "self.parse_marked_section"]}, "_osx_support.py": {"libraries": ["re", "distutils.log", "contextlib", "sys", "tempfile", "os"], "function_names": ["_remove_universal_flags", "_default_sysroot", "_supports_arm64_builds", "_remove_unsupported_archs", "_supports_universal_builds", "_find_appropriate_compiler", "_remove_original_values", "_get_system_version_tuple", "_find_executable", "get_platform_osx", "compiler_fixup", "customize_config_vars", "_find_build_tool", "_save_modified_value", "_read_output", "customize_compiler", "_override_all_archs", "_get_system_version", "_check_for_unavailable_sdk"], "function_calls": ["_remove_universal_flags", "sorted", "_supports_arm64_builds", "_remove_unsupported_archs", "reversed", "_supports_universal_builds", "_find_appropriate_compiler", "_get_system_version_tuple", "_find_executable", "tuple", "open", "range", "ValueError", "list", "_find_build_tool", "_save_modified_value", "set", "int", "bool", "enumerate", "_read_output", "SystemError", "len", "_override_all_archs", "any", "_get_system_version", "_check_for_unavailable_sdk"], "class_names": [], "class_method_calls": ["re.findall", "compiler_so.index", "macrelease.split", "sys.platform", "arg.startswith", "os.pathsep", "line.strip", "os.getpid", "tempfile.NamedTemporaryFile", "re.search", "path.split", "k.startswith", "contextlib.closing", "_config_vars.get", "f.read", "osx_version.split", "re.sub", "os.system", "re.ASCII", "fp.read", "os.environ", "log.warn", "line.endswith", "cc.replace", "cflags.strip", "os.path", "sys.maxsize", "x.startswith", "line.startswith", "fp.name", "f.close", "contents.splitlines", "m.group"]}, "_py_abc.py": {"libraries": ["_weakrefset.WeakSet"], "function_names": ["get_cache_token", "register", "_abc_caches_clear", "__subclasscheck__", "_abc_registry_clear", "__instancecheck__", "__new__", "_dump_registry"], "function_calls": ["get_cache_token", "isinstance", "issubclass", "any", "frozenset", "super", "RuntimeError", "getattr", "set", "type", "TypeError", "WeakSet", "print"], "class_names": ["ABCMeta"], "class_method_calls": ["cls._abc_negative_cache", "cls._abc_negative_cache_version", "cls.__dict__", "ABCMeta._abc_invalidation_counter", "cls._abc_cache", "cls._abc_registry", "cls.__subclasses__", "cls.__subclasshook__", "name.startswith", "namespace.items", "abstracts.add", "instance.__class__", "cls.__abstractmethods__", "cls.__module__", "cls.__qualname__", "cls.__subclasscheck__"]}, "_pydecimal.py": {"libraries": ["contextvars", "re", "itertools.repeat", "numbers", "itertools.chain", "sys", "math", "locale", "collections.namedtuple"], "function_names": ["_apply", "is_qnan", "_shallow_copy", "_power_modulo", "divide_int", "_round_half_up", "__rfloordiv__", "_dec_from_triple", "_round_05up", "__pow__", "to_eng_string", "copy", "copy_sign", "__complex__", "_decimal_lshift_exact", "compare_signal", "_fix_nan", "logical_invert", "number_class", "__init__", "same_quantum", "_normalize", "__str__", "from_float", "__gt__", "as_integer_ratio", "copy_decimal", "_iexp", "__add__", "minus", "_check_nans", "_divide", "__round__", "_ignore_all_flags", "_power_exact", "_rshift_nearest", "__float__", "_convert_for_comparison", "logical_xor", "__rsub__", "_format_number", "_round_floor", "_round_half_even", "__exit__", "_isnan", "__sub__", "__rtruediv__", "handle", "create_decimal", "ln", "compare", "shift", "__setattr__", "sqrt", "__floordiv__", "__rdivmod__", "_dlog", "as_tuple", "__neg__", "clear_flags", "_regard_flags", "clear_traps", "is_snan", "_round_down", "_ilog", "_round_up", "__delattr__", "remainder_near", "normalize", "_set_integer_check", "__bool__", "remainder", "localcontext", "scaleb", "__copy__", "_islogical", "copy_abs", "setcontext", "_format_sign", "to_sci_string", "__new__", "is_signed", "_group_lengths", "is_subnormal", "is_normal", "exp", "min", "_sqrt_nearest", "__deepcopy__", "__truediv__", "_raise_error", "getdigits", "__repr__", "next_plus", "compare_total_mag", "__reduce__", "is_nan", "subtract", "__int__", "_parse_format_specifier", "log10", "plus", "__floor__", "_insert_thousands_sep", "next_toward", "_isinfinity", "is_canonical", "imag", "_format_align", "_compare_check_nans", "logical_or", "__mul__", "getcontext", "divmod", "max", "Etop", "is_finite", "min_mag", "logb", "logical_and", "_round_ceiling", "_dexp", "__le__", "_ignore_flags", "abs", "__pos__", "__eq__", "divide", "_round", "_convert_other", "canonical", "__rmod__", "copy_negate", "__ge__", "max_mag", "_dlog10", "__enter__", "_set_signal_dict", "rotate", "_fix", "is_infinite", "is_zero", "__lt__", "__format__", "_div_nearest", "_ln_exp_bound", "_cmp", "Etiny", "conjugate", "_dpower", "_log10_exp_bound", "__divmod__", "_rescale", "__ceil__", "next_minus", "__rpow__", "__mod__", "power", "to_integral_value", "compare_total", "create_decimal_from_float", "__abs__", "_round_half_down", "_isinteger", "to_integral_exact", "fma", "_log10_lb", "__hash__", "quantize", "_fill_logical", "_set_rounding", "add", "adjusted", "real", "_iseven", "multiply", "radix"], "function_calls": ["_format_number", "_dexp", "min", "_sqrt_nearest", "cls", "reversed", "abs", "_convert_other", "_all_zeros", "vars", "rounding_method", "repr", "_dec_from_triple", "KeyError", "isinstance", "AttributeError", "_dlog10", "_namedtuple", "str", "_decimal_lshift_exact", "_WorkRep", "complex", "_parse_format_specifier", "tuple", "dict", "_dlog", "_nbits", "_insert_thousands_sep", "range", "_div_nearest", "_normalize", "list", "ValueError", "_ilog", "_dpower", "condition", "_iexp", "_format_align", "_log10_digits", "int", "type", "_parser", "zip", "OverflowError", "float", "_Log10Memoize", "getcontext", "Context", "len", "divmod", "DecimalTuple", "_ContextManager", "_rshift_nearest", "max", "_exact_half", "error", "setcontext", "chain", "_log10_lb", "_convert_for_comparison", "pow", "repeat", "Decimal", "TypeError", "_format_sign", "map", "_group_lengths", "this_function"], "class_names": ["Overflow", "DecimalException", "DivisionUndefined", "InvalidContext", "_WorkRep", "DivisionByZero", "FloatOperation", "Underflow", "ConversionSyntax", "Rounded", "DivisionImpossible", "_Log10Memoize", "Context", "_ContextManager", "Inexact", "InvalidOperation", "Decimal", "Subnormal", "Clamped"], "class_method_calls": ["_current_context_var.get", "dup._exp", "d._int", "self._divide", "other._isnan", "self.is_zero", "a.__truediv__", "_math.isnan", "context.Etop", "a.is_canonical", "self.__add__", "other.__sub__", "a.next_toward", "other.is_nan", "digits.append", "op1.sign", "dc.Emin", "self.logical_xor", "self._pick_rounding_function", "self.exp", "a.__divmod__", "other._int", "self.is_nan", "other._is_special", "other._exp", "self._set_integer_check", "self.is_snan", "value.int", "a.log10", "dc.clamp", "other.imag", "self.copy_sign", "other.is_qnan", "dup._isinfinity", "result.exp", "context.prec", "self.next_minus", "a.is_zero", "self._power_modulo", "self.prec", "a.is_infinite", "context.capitals", "other.__mod__", "s.compare_total", "str_n.rstrip", "self._ln_exp_bound", "self._rescale", "a.__floordiv__", "_condition_map.get", "self.__neg__", "self._raise_error", "newcontext.flags", "a._fix", "exp._isinfinity", "self.clamp", "context._shallow_copy", "dc.traps", "self.Emin", "product.__add__", "a.to_integral_exact", "context.rounding", "a.shift", "result.lstrip", "a.__neg__", "other.is_snan", "m.groupdict", "a.compare_signal", "other.denominator", "context._ignore_all_flags", "dc.Emax", "self._islogical", "self._log10_exp_bound", "sep.join", "remainder._fix", "other.__pow__", "a.exp", "exponent.exp", "self.copy_negate", "self.__pos__", "a.to_integral_value", "other._iseven", "context.Emax", "value._sign", "dup._int", "exp._is_special", "a.remainder_near", "a.__str__", "self.sign", "a.__add__", "modulo._fix_nan", "dict.fromkeys", "base.exp", "modulo.adjusted", "a.__pow__", "a.normalize", "a.to_eng_string", "re.IGNORECASE", "a.is_snan", "self.rounding", "other.__divmod__", "_numbers.Complex", "self._fix", "self.int", "self._isinfinity", "d._isnan", "a.logical_xor", "x.exp", "newcontext._raise_error", "a.quantize", "self.is_qnan", "self._fix_nan", "self._is_special", "_math.isinf", "other.real", "context.clamp", "ans._int", "_math.copysign", "other.exp", "a.is_subnormal", "self.compare_total", "a.logical_invert", "sys.maxsize", "contextvars.ContextVar", "dc.prec", "value._int", "re.DOTALL", "self.flags", "self.quantize", "other.int", "a.__pos__", "_locale.localeconv", "self._isinteger", "a.max_mag", "self.adjusted", "tmp.int", "newcontext.clear_flags", "self._set_signal_dict", "_parse_format_specifier_regex.match", "dc.rounding", "self.new_context", "dc.capitals", "a.logb", "result.sign", "_locale.CHAR_MAX", "self._round", "tmp.exp", "ans._rescale", "value._is_special", "self._ignore_flags", "a.min_mag", "_current_context_var.set", "y.sign", "other._isinfinity", "other.to_integral_value", "a.copy_negate", "self._exp", "self.traps", "x.int", "a.canonical", "value.exp", "other._sign", "context._raise_error", "a.ln", "context.clear_flags", "Decimal.from_float", "_numbers.Rational", "context.copy", "a.__sub__", "self.to_integral_value", "exp._exp", "object.__setattr__", "a.is_finite", "self._int", "other.numerator", "op1.int", "op1.exp", "ans._fix", "a.max", "op.exp", "a.rotate", "_numbers.Number", "a.fma", "self.capitals", "a.copy_abs", "a.is_nan", "self.is_subnormal", "base.int", "s.append", "op.int", "other._rescale", "context.flags", "self._round_down", "digits.rstrip", "dup._sign", "shifted.lstrip", "t.__name__", "re.compile", "ans.adjusted", "rotated.lstrip", "context.Etiny", "int.bit_length", "a.sqrt", "groups.append", "op.sign", "self._power_exact", "a.scaleb", "context.Emin", "newcontext.traps", "self._isnan", "a.__mul__", "exponent.int", "self.__sub__", "a.is_signed", "self._compare_check_nans", "self._round_half_up", "other._isinteger", "d.bit_length", "num.strip", "value._exp", "context._set_rounding", "modulo._isnan", "self._fill_logical", "f.__name__", "other.__truediv__", "result.int", "a.__abs__", "a.logical_and", "self.saved_context", "a.compare_total", "value.sign", "self.copy_abs", "a.is_normal", "a.same_quantum", "other._islogical", "other._fix", "self.is_infinite", "value.strip", "other.adjusted", "self.digits", "op2.int", "self.next_plus", "modulo._isinteger", "a.next_plus", "other.__floordiv__", "a.compare_total_mag", "a.next_minus", "ans._sign", "a.compare", "d._fix", "self.compare", "a.is_qnan", "op2.sign", "op2.exp", "self._cmp", "a.copy_sign", "a.number_class", "re.VERBOSE", "other.copy_negate", "ans._fix_nan", "sys.hash_info", "ans._isinfinity", "y.exp", "a.logical_or", "object.__new__", "self.__str__", "other.is_infinite", "y.int", "a.min", "new_context.copy", "self.Emax", "other.copy_abs", "self.__class__", "other._fix_nan", "self._sign", "self._ignored_flags", "m.group", "ans._exp", "self._check_nans", "a.__mod__"]}, "_pyio.py": {"libraries": ["abc", "io", "io.SEEK_CUR", "_io.FileIO", "io.__all__", "io.SEEK_SET", "codecs", "msvcrt.setmode", "sys", "io.SEEK_END", "warnings", "locale", "_thread.allocate_lock", "os", "stat", "errno"], "function_names": ["_checkReadable", "write_through", "_read_chunk", "writable", "readable", "read1", "__exit__", "_check_newline", "_reset_read_buf", "_open_code_with_warning", "_peek_unlocked", "decode", "__repr__", "readall", "_pack_cookie", "_get_decoder", "setstate", "writelines", "_unpack_cookie", "encoding", "__enter__", "buffer", "__getstate__", "errors", "__get__", "__init__", "_set_decoded_chars", "open", "readlines", "_configure", "name", "_readinto", "readinto", "line_buffering", "_get_encoder", "seek", "flush", "close", "__del__", "_checkClosed", "detach", "getvalue", "_reset_encoder", "__iter__", "readinto1", "raw", "_read_unlocked", "getstate", "tell", "closed", "newlines", "seekable", "__next__", "closefd", "read", "_rewind_decoded_chars", "nreadahead", "_checkSeekable", "write", "_checkWritable", "reconfigure", "truncate", "getbuffer", "mode", "isatty", "peek", "_flush_unlocked", "readline", "__new__", "reset", "_unsupported", "fileno", "_get_decoded_chars"], "function_calls": ["min", "TextIOWrapper", "getattr", "IsADirectoryError", "memoryview", "make_decoder", "Lock", "DocDescriptor", "_setmode", "RuntimeError", "isinstance", "super", "open", "size_index", "AssertionError", "BufferedWriter", "range", "ValueError", "UnsupportedOperation", "make_encoder", "list", "IncrementalNewlineDecoder", "FileIO", "_reset_encoder", "pos_index", "BufferedRandom", "BlockingIOError", "set", "int", "type", "LookupError", "bool", "OSError", "hasattr", "BytesIO", "bytearray", "len", "divmod", "max", "BufferedReader", "opener", "sum", "bytes", "nreadahead", "TypeError"], "class_names": ["TextIOBase", "BytesIO", "UnsupportedOperation", "IncrementalNewlineDecoder", "FileIO", "BufferedReader", "OpenWrapper", "BufferedWriter", "IOBase", "BufferedRandom", "TextIOWrapper", "StringIO", "BufferedRWPair", "DocDescriptor", "_BufferedIOMixin", "BufferedIOBase", "RawIOBase"], "class_method_calls": ["self._read_chunk", "self.pendingcr", "self.__dict__", "self.closed", "self._configure", "self._unsupported", "os.ftruncate", "os.write", "s.replace", "os.O_RDONLY", "self._line_buffering", "self._rewind_decoded_chars", "mode.count", "e.errno", "self._snapshot", "self._checkWritable", "raw.readable", "self._check_newline", "self.close", "io.RawIOBase", "buffer.fileno", "os.strerror", "self._decoded_chars_used", "BufferedReader.peek", "self._read_buf", "self._readinto", "self._write_lock", "self.write", "self._readtranslate", "io.TextIOBase", "self._write_buf", "chunks.append", "self.raw", "self._read_lock", "self._flush_unlocked", "abc.ABCMeta", "os.fstat", "os.close", "self.decoder", "self.flush", "os.open", "e.strerror", "BufferedReader.readinto1", "os.linesep", "os.O_WRONLY", "os.O_RDWR", "open.__doc__", "self._writenl", "_BufferedIOMixin.tell", "self._has_read1", "self._get_encoder", "BufferedWriter.truncate", "self._telling", "text.mode", "res.endswith", "self.__closed", "self.seennl", "self._encoding", "self._readable", "BufferedReader.read", "self._b2cratio", "self.writer", "self.seek", "self._raw", "self._reset_read_buf", "output.count", "warnings.warn", "self._read_pos", "_BufferedIOMixin.seek", "codecs.IncrementalDecoder", "io.open_code", "self.read1", "self._CHUNK_SIZE", "self.mode", "self.readall", "self._readnl", "self._checkClosed", "os.device_encoding", "BufferedReader.tell", "self.tell", "encoder.reset", "self.readline", "self._blksize", "writer.writable", "size.__index__", "valid_seek_flags.add", "self.line_buffering", "os.O_CREAT", "BufferedReader.readinto", "BufferedWriter.tell", "view.nbytes", "self._seekable", "self._CRLF", "os.O_TRUNC", "self.buffer_size", "self._CR", "self._peek_unlocked", "os.O_BINARY", "self._set_decoded_chars", "sys.platform", "readahead.find", "sys.flags", "os.read", "BufferedWriter.__init__", "codecs.getincrementalencoder", "self._writable", "os.isatty", "BufferedReader.read1", "codecs.getincrementaldecoder", "os.fspath", "self._created", "reader.readable", "RawIOBase.register", "decoder.getstate", "os.O_APPEND", "self.readable", "buf.nbytes", "self._LF", "self._closefd", "self.encoding", "self._appending", "self.writable", "io.IOBase", "raw._checkSeekable", "output.replace", "raw.writable", "self._encoder", "self._decoded_chars", "os.lseek", "b.cast", "_BufferedIOMixin.__init__", "self.seekable", "self._errors", "decoder.setstate", "pos.__index__", "raw.isatty", "stat.S_ISDIR", "self._write_through", "encoder.setstate", "self.reader", "BufferedReader.__init__", "self._pos", "self._unpack_cookie", "s.__class__", "errno.EISDIR", "errno.ESPIPE", "self._decoder", "self.readinto", "BufferedWriter.write", "os.SEEK_DATA", "self.name", "self._writetranslate", "object.__repr__", "output.endswith", "os.SEEK_HOLE", "self.write_through", "result.close", "io.BufferedIOBase", "self._get_decoder", "self._read_unlocked", "fdfstat.st_mode", "self._fd", "buf.cast", "errno.EAGAIN", "self.read", "self._pack_cookie", "lines.append", "locale.getpreferredencoding", "self._checkReadable", "self.buffer", "decoder.reset", "os.set_inheritable", "os.O_EXCL", "codecs.lookup", "raw.fileno", "self._get_decoded_chars", "self.translate", "io.UnsupportedOperation", "line.find", "decoder.decode", "self.__class__", "encoder.encode", "self.peek", "self._buffer", "self._readuniversal"]}, "_sitebuiltins.py": {"libraries": ["sys", "pydoc", "os"], "function_names": ["__call__", "__init__", "__setup", "__repr__"], "function_calls": ["len", "SystemExit", "input", "open", "range", "print"], "class_names": ["Quitter", "_Printer", "_Helper"], "class_method_calls": ["self.name", "self.__lines", "os.path", "pydoc.help", "self.__setup", "self.__linecnt", "data.split", "fp.read", "self.__filenames", "self.__data", "self.eof", "self.__name", "self.MAXLINES", "sys.stdin"]}, "_strptime.py": {"libraries": ["re.IGNORECASE", "time", "re.compile", "datetime.timedelta", "re.escape", "locale", "_thread.allocate_lock", "datetime.timezone", "datetime.date", "calendar"], "function_names": ["__calc_am_pm", "_calc_julian_from_V", "_strptime_time", "__calc_date_time", "pattern", "__calc_month", "compile", "_strptime", "_calc_julian_from_U_or_W", "_strptime_datetime", "__seqToRE", "__init__", "__calc_timezone", "_getlang", "__calc_weekday"], "function_calls": ["_calc_julian_from_V", "frozenset", "sorted", "TimeRE", "re_compile", "datetime_timezone", "cls", "_thread_allocate_lock", "datetime_date", "isinstance", "super", "_strptime", "re_escape", "range", "_getlang", "ValueError", "datetime_timedelta", "int", "type", "enumerate", "len", "_calc_julian_from_U_or_W", "TypeError", "LocaleTime"], "class_names": ["TimeRE", "LocaleTime"], "class_method_calls": ["regex_chars.sub", "time._STRUCT_TM_ITEMS", "calendar.month_abbr", "self.LC_date", "time.struct_time", "_TimeRE_cache.locale_time", "locale_time.f_month", "self.__calc_date_time", "locale_time.am_pm", "found.end", "locale_time.timezone", "self.timezone", "locale.LC_TIME", "replacement_pairs.extend", "self.__calc_am_pm", "self.f_weekday", "found_dict.get", "self.lang", "self.am_pm", "base.__init__", "self.LC_date_time", "z.startswith", "_regex_cache.clear", "self.__seqToRE", "self.pattern", "self.a_weekday", "time.tzname", "locale_time.a_weekday", "self.daylight", "self.__calc_weekday", "locale_time.lang", "locale_time.a_month", "calendar.day_name", "time.strftime", "locale_time.daylight", "self.LC_time", "self.locale_time", "self.__calc_month", "time.daylight", "locale.getlocale", "current_format.replace", "self.tzname", "am_pm.append", "calendar.day_abbr", "locale_time.f_weekday", "time.tzset", "calendar.isleap", "locale_time.tzname", "_TimeRE_cache.compile", "self.__calc_timezone", "err.args", "datetime_result.month", "found_dict.keys", "datetime_date.fromordinal", "msg.format", "base.__getitem__", "calendar.month_name", "format.index", "self.a_month", "datetime_result.year", "format_regex.match", "found.groupdict", "self.f_month", "datetime_result.day", "_regex_cache.get", "base.__setitem__", "whitespace_replacement.sub"]}, "_threading_local.py": {"libraries": ["threading.RLock", "weakref.ref", "threading.current_thread", "contextlib.contextmanager"], "function_names": ["__getattribute__", "__setattr__", "thread_deleted", "get_dict", "__delattr__", "_patch", "__init__", "create_dict", "__new__", "local_deleted"], "function_calls": ["TypeError", "AttributeError", "current_thread", "ref", "str", "wrlocal", "_patch", "_localimpl", "wrthread", "id", "RLock"], "class_names": ["local", "_localimpl"], "class_method_calls": ["object.__init__", "self.dicts", "impl.create_dict", "thread.__dict__", "object.__delattr__", "impl.localargs", "object.__new__", "impl.get_dict", "self.__init__", "self.__class__", "object.__setattr__", "local.dicts", "self.key", "object.__getattribute__", "impl.locallock", "cls.__init__"]}, "_weakrefset.py": {"libraries": ["_weakref.ref"], "function_names": ["__ixor__", "intersection", "__exit__", "_commit_removals", "difference_update", "__eq__", "__repr__", "__reduce__", "symmetric_difference", "copy", "clear", "__enter__", "__ior__", "intersection_update", "update", "_remove", "issuperset", "__lt__", "__init__", "__iand__", "__isub__", "union", "discard", "__len__", "__gt__", "difference", "isdisjoint", "__iter__", "symmetric_difference_update", "pop", "remove", "issubset", "add", "__contains__"], "function_calls": ["KeyError", "isinstance", "len", "list", "itemref", "ref", "getattr", "selfref", "_IterationGuard", "set", "discard", "map", "repr"], "class_names": ["WeakSet", "_IterationGuard"], "class_method_calls": ["l.pop", "w._commit_removals", "self.__isub__", "self.data", "self.__iand__", "self.update", "self.intersection", "s.remove", "self._pending_removals", "self._commit_removals", "self.weakcontainer", "self._remove", "self.add", "self.copy", "self._iterating", "self.__ixor__", "newset.difference_update", "w._iterating", "self.__class__", "newset.symmetric_difference_update"]}, "abc.py": {"libraries": ["abc"], "function_names": ["test_module", "test_state_after_failure", "test_package_over_module", "test_lacking_parent", "test_unloadable", "test_package_in_package", "test_package", "test_failure", "test_module_in_package"], "function_calls": [], "class_names": ["FinderTests", "LoaderTests"], "class_method_calls": ["abc.ABCMeta", "abc.abstractmethod"]}, "aifc.py": {"libraries": ["chunk.Chunk", "builtins", "struct", "warnings", "sys", "audioop", "math", "collections.namedtuple"], "function_names": ["_lin2adpcm", "__exit__", "_lin2ulaw", "_ulaw2lin", "_init_compression", "aifc", "setnframes", "_write_form_length", "getfp", "getframerate", "_write_short", "getcompname", "_adpcm2lin", "setcomptype", "initfp", "_read_short", "rewind", "_write_header", "__enter__", "readframes", "__init__", "getsampwidth", "_ensure_header_written", "getmarkers", "open", "getnframes", "aiff", "setframerate", "_writemarkers", "getmark", "setsampwidth", "_write_float", "_read_float", "close", "__del__", "getcomptype", "_read_comm_chunk", "setmark", "_write_ulong", "_read_ulong", "tell", "_readmark", "openfp", "setpos", "_write_ushort", "getparams", "_alaw2lin", "setnchannels", "setparams", "_read_long", "writeframesraw", "getnchannels", "_write_long", "writeframes", "_write_string", "_lin2alaw", "_patchheader", "_read_ushort", "_read_string"], "function_calls": ["Error", "Aifc_read", "memoryview", "_write_short", "_read_short", "isinstance", "open", "range", "Aifc_write", "ValueError", "_write_float", "_aifc_params", "_read_float", "Chunk", "_write_ulong", "_read_ulong", "int", "namedtuple", "hasattr", "_write_ushort", "len", "_read_long", "pow", "_write_string", "ord", "_read_string", "print"], "class_names": ["Aifc_read", "Aifc_write", "Error"], "class_method_calls": ["self._nchannels", "self.getnchannels", "f.getframerate", "self.close", "f.getparams", "math.ldexp", "g.writeframes", "self._alaw2lin", "self.setnframes", "_aifc_params.nframes", "self._soundpos", "self._patchheader", "self._writemarkers", "file.close", "chunk.getname", "_aifc_params.comptype", "f.getnframes", "g.setparams", "chunk.file", "self.getcompname", "self._file", "self._ulaw2lin", "self._nframes_pos", "self._form_length_pos", "sys.argv", "self.getcomptype", "f.getcompname", "self.setcomptype", "_aifc_params.compname", "f.endswith", "self._datalength", "_aifc_params.sampwidth", "f.mode", "warnings.warn", "self._marklength", "self._framesize", "builtins.open", "self._adpcm2lin", "math.frexp", "self._convert", "struct.unpack", "self._read_comm_chunk", "self.getnframes", "struct.error", "self._lin2adpcm", "self.getsampwidth", "self._nframeswritten", "self._init_compression", "self.setsampwidth", "chunk.skip", "self.writeframesraw", "self._comptype", "audioop.ulaw2lin", "math.floor", "self.initfp", "audioop.lin2ulaw", "self.setnchannels", "f.write", "self._ssnd_seek_needed", "chunk.read", "chunk.chunksize", "self._aifc", "f.getnchannels", "self._nframes", "f.getsampwidth", "_aifc_params.nchannels", "self._lin2alaw", "audioop.alaw2lin", "self._adpcmstate", "self._write_header", "self._version", "self._write_form_length", "_aifc_params.framerate", "f.close", "audioop.adpcm2lin", "file.read", "audioop.lin2adpcm", "self._lin2ulaw", "self._ssnd_length_pos", "f.getcomptype", "self._ssnd_chunk", "file_object.close", "self._ensure_header_written", "self.getframerate", "struct.pack", "self._compname", "self._datawritten", "self._comm_chunk_read", "self._readmark", "f.readframes", "self._markers", "self._sampwidth", "audioop.lin2alaw", "self.setframerate", "self._framerate"]}, "antigravity.py": {"libraries": ["hashlib", "webbrowser"], "function_names": ["geohash"], "function_calls": ["print"], "class_names": [], "class_method_calls": ["float.fromhex", "hashlib.md5", "webbrowser.open"]}, "argparse.py": {"libraries": ["re", "copy", "textwrap", "shutil", "sys", "gettext.gettext", "warnings.warn", "gettext.ngettext", "os"], "function_names": ["start_section", "_get_kwargs", "_copy_items", "_format_action_invocation", "_get_help_string", "_remove_action", "parse_intermixed_args", "_get_handler", "__init__", "_iter_indented_subactions", "_check_conflict", "parse_known_args", "add_parser", "_indent", "register", "__str__", "take_action", "_add_item", "format_help", "_split_lines", "_join_parts", "_match_arguments_partial", "_get_values", "_get_subactions", "error", "parse_args", "_format_args", "_format_actions_usage", "exit", "_add_container_actions", "_handle_conflict_resolve", "_print_message", "_get_value", "__call__", "_handle_conflict_error", "_get_args", "consume_positionals", "_pop_action_class", "add_argument", "_get_optional_kwargs", "consume_optional", "_check_value", "convert_arg_line_to_args", "_get_optional_actions", "get_default", "set_defaults", "__contains__", "format", "_get_nargs_pattern", "__repr__", "_get_formatter", "_get_action_name", "_get_default_metavar_for_optional", "_get_default_metavar_for_positional", "add_subparsers", "print_usage", "_get_positional_actions", "add_text", "parse_known_intermixed_args", "identity", "add_usage", "get_lines", "_read_args_from_files", "_metavar_formatter", "_format_action", "_add_action", "__eq__", "_format_text", "_get_positional_kwargs", "_fill_text", "_dedent", "_registry_get", "_match_argument", "format_usage", "end_section", "_expand_help", "print_help", "_parse_known_args", "add_mutually_exclusive_group", "_get_option_tuples", "add_arguments", "add_argument_group", "_parse_optional", "_format_usage"], "function_calls": ["format", "get_lines", "min", "super_init", "sorted", "getattr", "_copy_items", "get_subactions", "vars", "ArgumentTypeError", "ngettext", "repr", "action", "isinstance", "conflict_handler", "super", "join", "iter", "update", "parsers_class", "str", "ArgumentError", "_MutuallyExclusiveGroup", "_ArgumentGroup", "dict", "open", "get_metavar", "setattr", "range", "match_argument", "ValueError", "list", "_get_action_name", "Namespace", "consume_positionals", "_", "take_action", "superinit", "set", "type", "zip", "consume_optional", "enumerate", "get_invocation", "func", "type_func", "delattr", "add_group", "hasattr", "match_partial", "len", "max", "NotImplementedError", "warn", "callable", "TypeError", "map", "action_class"], "class_names": ["RawTextHelpFormatter", "Action", "_ActionsContainer", "_ChoicesPseudoAction", "_AttributeHolder", "_AppendConstAction", "ArgumentTypeError", "ArgumentDefaultsHelpFormatter", "MetavarTypeHelpFormatter", "_HelpAction", "ArgumentError", "_StoreTrueAction", "_MutuallyExclusiveGroup", "_ArgumentGroup", "_StoreConstAction", "ArgumentParser", "_ExtendAction", "Namespace", "_VersionAction", "RawDescriptionHelpFormatter", "_AppendAction", "FileType", "HelpFormatter", "_CountAction", "_StoreFalseAction", "_StoreAction", "_Section", "_SubParsersAction"], "class_method_calls": ["_sys.exit", "match.groups", "invocations.append", "parser.exit", "self.__dict__", "sup.__init__", "self._negative_number_matcher", "group.description", "container.conflict_handler", "self.allow_abbrev", "self._container", "container._defaults", "action.option_strings", "self.choices", "self.add_argument", "self._prog", "self._mode", "self._print_message", "self._registries", "self.help", "formatter.add_arguments", "line.append", "action.metavar", "self._registry_get", "self._get_handler", "_sys.stderr", "_SubParsersAction._ChoicesPseudoAction", "self.add_help", "_sys.stdin", "parser.parse_known_args", "self._get_values", "_re.compile", "parser._get_formatter", "textwrap.wrap", "formatter.format_help", "group_map.get", "self.prog", "action_conflicts.get", "container._has_negative_number_optionals", "container._action_groups", "self._fill_text", "action.save_default", "required_actions.append", "self._current_indent", "action.save_required", "_re.sub", "self._add_container_actions", "self.nargs", "self._actions", "action.dest", "self._read_args_from_files", "self._add_action", "self._iter_indented_subactions", "self.print_usage", "self._mutually_exclusive_groups", "self._indent", "self._check_conflict", "self.version", "self.description", "self.prefix_chars", "group_actions.add", "self._name_parser_map", "action.default", "result.append", "self._encoding", "container._registries", "mutex_group._group_actions", "optionals.append", "_os.path", "self._get_positional_actions", "arg_strings.remove", "self._metavar_formatter", "self.type", "self._check_value", "self.conflict_handler", "items.extend", "self._expand_help", "self._max_help_position", "group.required", "option_string.split", "self.items", "self._action_max_length", "action_group.description", "args_file.read", "self._dedent", "self.error", "container.argument_default", "self._get_default_metavar_for_positional", "self._get_optional_actions", "self.required", "action_header.endswith", "self._get_positional_kwargs", "self._root_section", "self._parser_class", "action.nargs", "parser.version", "self._join_parts", "text.splitlines", "action_group.title", "action.container", "self._get_formatter", "formatter.start_section", "self.heading", "argument.metavar", "self._format_usage", "actions.index", "parts.extend", "self._format_text", "self._parse_known_args", "self.format_help", "action_group._group_actions", "long_option_strings.append", "items.append", "self._get_help_string", "copy.copy", "action.const", "self._indent_increment", "self.register", "self.parse_known_intermixed_args", "_re.findall", "_sys.exc_info", "textwrap.fill", "kwargs.setdefault", "self._parse_optional", "self._choices_actions", "self._get_option_tuples", "action.required", "_re.ASCII", "group.save_required", "lines.extend", "nargs_pattern.replace", "section.format_help", "self._get_optional_kwargs", "self._get_value", "confl_optionals.append", "seen_non_default_actions.add", "self.title", "kwargs.pop", "self.dest", "_sys.stdout", "args.extend", "self.add_mutually_exclusive_group", "formatter.add_usage", "formatter.end_section", "self._group_actions", "container._mutually_exclusive_groups", "container.prefix_chars", "self._format_action_invocation", "self.const", "_shutil.get_terminal_size", "self._action_groups", "result.extend", "self._split_lines", "action.choices", "self._format_actions_usage", "extras.append", "inserts.get", "formatter.add_text", "self.parent", "self._has_negative_number_optionals", "self.argument_default", "self.parse_known_args", "self._prog_prefix", "self._ChoicesPseudoAction", "argument.dest", "self._whitespace_matcher", "self._pop_action_class", "_re.match", "action_tuples.append", "match.group", "new_arg_strings.append", "self._errors", "self.fromfile_prefix_chars", "self.epilog", "self._match_argument", "self._get_args", "nargs_errors.get", "self.formatter", "inserts.pop", "self._level", "self._get_default_metavar_for_optional", "option_string.startswith", "positionals.append", "container._option_string_actions", "self.metavar", "arg_strings.append", "self._defaults", "new_arg_strings.extend", "self._positionals", "arg_string_pattern_parts.append", "self.formatter_class", "self._bufsize", "group.title", "extras.extend", "dest.replace", "self._format_action", "argument.option_strings", "seen_actions.add", "option_strings.append", "dest_option_string.lstrip", "self._add_item", "self.message", "text.strip", "name.isidentifier", "group.conflict_handler", "kwargs.get", "self.add_argument_group", "self._get_nargs_pattern", "_sys.argv", "parser._print_message", "help.strip", "parts.append", "action._get_subactions", "lines.append", "self._format_args", "action.save_nargs", "action_conflicts.setdefault", "self._option_string_actions", "parser.print_help", "self._Section", "conflicts.extend", "params.get", "self.convert_arg_line_to_args", "file.write", "self._get_kwargs", "self._width", "parent._defaults", "self.exit", "self.usage", "group._group_actions", "self._current_section", "container._actions", "action.help", "arg_string.split", "self._long_break_matcher", "self.argument_name", "self._match_arguments_partial", "self.format_usage", "self._optionals", "self.option_strings", "action.type", "self._subparsers", "self.default"]}, "ast.py": {"libraries": ["warnings", "collections.deque", "inspect", "_ast.*"], "function_names": ["iter_fields", "get_docstring", "copy_location", "_splitlines_no_ff", "_getter", "fix_missing_locations", "_raise_malformed_node", "_fix", "get_source_segment", "parse", "walk", "visit", "_pad_whitespace", "literal_eval", "__instancecheck__", "iter_child_nodes", "dump", "_format", "_convert", "_convert_signed_num", "visit_Constant", "_convert_num", "generic_visit", "__new__", "_setter", "increment_lineno", "_new"], "function_calls": ["iter_fields", "getattr", "_splitlines_no_ff", "deque", "repr", "isinstance", "_raise_malformed_node", "visitor", "_fix", "tuple", "parse", "dict", "walk", "setattr", "_pad_whitespace", "ValueError", "list", "iter_child_nodes", "property", "set", "type", "_format", "zip", "delattr", "_convert", "hasattr", "_convert_signed_num", "len", "compile", "_convert_num", "Constant", "TypeError", "map"], "class_names": ["Bytes", "_ABC", "NodeVisitor", "NameConstant", "Ellipsis", "Num", "Str", "NodeTransformer"], "class_method_calls": ["_const_node_type_names.get", "self.generic_visit", "node.elts", "new_node._attributes", "self.visit", "child._attributes", "self.value", "todo.popleft", "new_values.extend", "Constant.n", "node.col_offset", "node.lineno", "node.left", "node.__class__", "Constant.s", "node.value", "node.right", "node._attributes", "node.body", "node.keys", "warnings.warn", "child.lineno", "node._fields", "cls._fields", "old_node._attributes", "_const_types_not.get", "new_values.append", "node.end_lineno", "node_or_string.body", "inspect.cleandoc", "lines.append", "node.operand", "cls.__name__", "todo.extend", "_const_node_type_names.items", "type.__instancecheck__", "node.values", "node.s", "node.op", "node.end_col_offset", "lines.insert", "args.append", "inst.value", "Constant.__new__", "child.end_lineno", "attr.startswith"]}, "asynchat.py": {"libraries": ["collections.deque", "asyncore"], "function_names": ["set_terminator", "collect_incoming_data", "writable", "readable", "push", "discard_buffers", "_get_data", "get_terminator", "push_with_producer", "__init__", "handle_read", "find_prefix_at_end", "initiate_send", "handle_close", "more", "close_when_done", "handle_write", "_collect_incoming_data", "found_terminator"], "function_calls": ["ValueError", "isinstance", "len", "TypeError", "NotImplementedError", "type", "bytes", "deque", "range", "find_prefix_at_end"], "class_names": ["async_chat", "simple_producer"], "class_method_calls": ["self.terminator", "self.connected", "haystack.endswith", "self.close", "self.use_encoding", "self.data", "self.producer_fifo", "first.more", "self.initiate_send", "self.found_terminator", "self.collect_incoming_data", "self.ac_out_buffer_size", "self.encoding", "self.handle_error", "self.send", "asyncore.dispatcher", "self.ac_in_buffer_size", "self.get_terminator", "self.buffer_size", "self.incoming", "self.recv", "self.handle_close", "self.ac_in_buffer"]}, "__init__.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "__main__.py": {"libraries": ["pgen.ParserGenerator", "argparse"], "function_names": ["main"], "function_calls": ["ParserGenerator", "main"], "class_names": [], "class_method_calls": ["argparse.ArgumentParser", "args.verbose", "args.grammar", "p.make_grammar", "parser.add_argument", "argparse.FileType", "grammar.produce_graminit_h", "grammar.produce_graminit_c", "parser.parse_args", "args.graminit_c", "args.graminit_h", "args.tokens"]}, "base_events.py": {"libraries": ["stat", "concurrent.futures", "threading", "time", "log.logger", "heapq", "ssl", "collections", "sys", "warnings", "subprocess", "collections.abc", "weakref", "socket", "os", "functools", "itertools", "traceback"], "function_names": ["_wakeup", "_check_closed", "stop", "is_closed", "pause_writing", "_format_handle", "run_in_executor", "_getaddrinfo_debug", "_check_callback", "call_exception_handler", "_add_callback", "_start_serving", "data_received", "get_debug", "_run_until_complete_cb", "_format_pipe", "__repr__", "set_task_factory", "_attach", "call_at", "sockets", "_add_callback_signalsafe", "set_default_executor", "call_soon_threadsafe", "resume_writing", "is_serving", "_set_reuseport", "_set_coroutine_origin_tracking", "__init__", "eof_received", "_process_events", "is_running", "_check_thread", "_make_socket_transport", "call_soon", "_run_once", "_make_datagram_transport", "_log_subprocess", "create_task", "close", "__del__", "time", "run_until_complete", "connection_lost", "_interleave_addrinfos", "_ipaddr_info", "_make_ssl_transport", "_make_read_pipe_transport", "run_forever", "_set_nodelay", "get_exception_handler", "create_future", "_make_write_pipe_transport", "_asyncgen_firstiter_hook", "_check_sendfile_params", "get_loop", "_timer_handle_cancelled", "connection_made", "_check_running", "call_later", "_call_soon", "_asyncgen_finalizer_hook", "get_task_factory", "default_exception_handler", "set_exception_handler", "_detach", "set_debug", "_write_to_self"], "function_calls": ["object", "min", "_format_handle", "sorted", "getattr", "_warn", "all", "memoryview", "_format_pipe", "RuntimeError", "Server", "protocol_factory", "isinstance", "repr", "str", "_set_reuseport", "tuple", "dict", "range", "ValueError", "list", "set", "int", "type", "zip", "bool", "_interleave_addrinfos", "OSError", "_ipaddr_info", "hasattr", "_SendfileFallbackProtocol", "bytearray", "len", "max", "ConnectionError", "callable", "TypeError"], "class_names": ["_SendfileFallbackProtocol", "BaseEventLoop", "Server"], "class_method_calls": ["self._sendfile_fallback", "logger.warning", "futures.wrap_future", "self._debug", "context.get", "self._active_count", "socket.SO_REUSEPORT", "afs.append", "info.append", "socket.SOCK_STREAM", "sock.proto", "handle._callback", "self._proto", "self._write_ready_fut", "waiter.set_result", "self._run_once", "socket.SO_BROADCAST", "sys.get_coroutine_origin_tracking_depth", "self.close", "self._default_executor", "self._ssl_context", "logger.info", "self.run_forever", "self._make_socket_transport", "self._process_events", "sock.listen", "threading.get_ident", "transp._protocol_paused", "socket.AF_UNIX", "transp.set_protocol", "self._loop", "self._sockets", "self.call_soon_threadsafe", "self._internal_fds", "self.create_future", "transport.close", "traceback.format_list", "self._waiters", "future.cancelled", "socket.inet_pton", "proto.drain", "self._coroutine_origin_tracking_saved_depth", "transp.pause_reading", "sslproto.SSLProtocol", "future.done", "ag.aclose", "handle._cancelled", "socket.IPPROTO_IPV6", "opts.items", "self.call_exception_handler", "self._asyncgen_finalizer_hook", "self._make_read_pipe_transport", "self._getaddrinfo_debug", "self._check_closed", "msg.append", "self._current_handle", "sock.setsockopt", "timer._source_traceback", "handle._source_traceback", "socket.SOL_SOCKET", "self._exception_handler", "constants.SENDFILE_FALLBACK_READBUFFER_SIZE", "self._serving_forever_fut", "ssl.SSLContext", "transport.pause_reading", "future.exception", "self._coroutine_origin_tracking_enabled", "self._scheduled", "self.time", "events.AbstractEventLoop", "weakref.WeakSet", "loop.getaddrinfo", "futures.isfuture", "self.get_debug", "self._closed", "heapq.heappush", "self.default_exception_handler", "concurrent.futures", "protocols.Protocol", "self._wakeup", "collections.deque", "sock.gettimeout", "addrinfos_by_family.values", "socket.IPPROTO_UDP", "task._source_traceback", "warnings.warn", "exc.errno", "subprocess.STDOUT", "transp.get_protocol", "tasks.sleep", "self._ensure_resolved", "tasks.ensure_future", "file.seek", "ssl_protocol._app_transport", "exceptions.append", "transport.resume_reading", "self.is_closed", "self._set_coroutine_origin_tracking", "future.add_done_callback", "self._start_serving", "stat.S_ISSOCK", "sock.setblocking", "resume_cb.cancel", "collections.OrderedDict", "transport.get_extra_info", "self._log_subprocess", "self.sock_sendall", "sock.close", "events.TimerHandle", "itertools.zip_longest", "self._ready", "self._transport", "logger.debug", "self.create_task", "self.set_debug", "self._should_resume_reading", "handle._scheduled", "time.monotonic", "events.AbstractServer", "self.call_at", "executor.shutdown", "sys.set_coroutine_origin_tracking_depth", "self._make_ssl_transport", "self.slow_callback_duration", "constants.DEBUG_STACK_DEPTH", "sys.platform", "sock.bind", "heapq.heappop", "self.sockets", "socket.AF_UNSPEC", "transport.is_closing", "conmade_cb.cancel", "sock.family", "self._serving", "self._create_connection_transport", "trsock.TransportSocket", "err.strerror", "socket.TCP_NODELAY", "self._check_thread", "functools.partial", "self._make_datagram_transport", "self._selector", "addr_infos.items", "itertools.chain", "self._task_factory", "fut.cancelled", "transport.set_protocol", "tasks.gather", "server._start_serving", "socket.AF_INET6", "subprocess.PIPE", "self.is_running", "socket.IPV6_V6ONLY", "sockets.append", "self.wait_closed", "futures._get_loop", "tasks.Task", "tasks._set_task_name", "cb.__self__", "self._sock_sendfile_fallback", "self._check_callback", "self._stopping", "socket.SOCK_DGRAM", "coroutines.iscoroutinefunction", "socket.getaddrinfo", "events._get_running_loop", "my_exceptions.pop", "tb.rstrip", "self._connect_sock", "self._make_write_pipe_transport", "self._asyncgens_shutdown_called", "future._log_destroy_pending", "self._backlog", "self._call_soon", "my_exceptions.append", "sys.set_asyncgen_hooks", "heapq.heapify", "future.result", "self.run_in_executor", "err.errno", "host.decode", "self._asyncgen_firstiter_hook", "self._should_resume_writing", "ssl_protocol.connection_made", "socket.socket", "socket.AF_INET", "exc.strerror", "transp.is_reading", "transports._FlowControlMixin", "log_lines.append", "self._sendfile_native", "sys.get_asyncgen_hooks", "self.call_soon", "file.readinto", "socket.IPPROTO_TCP", "self._protocol_factory", "self._clock_resolution", "socket.SO_REUSEADDR", "fut.exception", "exceptions.CancelledError", "proto.restore", "self._add_callback", "os.remove", "self._write_to_self", "sock.type", "events.Handle", "coroutines.iscoroutine", "agen.aclose", "logger.error", "time.get_clock_info", "pipe.fileno", "self._ssl_handshake_timeout", "events._set_running_loop", "handle._when", "staggered.staggered_race", "self._check_running", "self._asyncgens", "self._timer_cancelled_count", "new_scheduled.append", "executor.submit", "socket.error", "socket.getnameinfo", "futures.Future", "collections.abc", "self._check_sendfile_params", "self._sock_sendfile_native", "transp.write", "socket.AI_PASSIVE", "exception.__traceback__", "self._create_server_getaddrinfo", "future.remove_done_callback", "self._thread_id", "waiter.done", "self.sock_connect", "handle._run", "exceptions.SendfileNotAvailableError", "self.__class__", "os.name", "os.stat", "self._make_subprocess_transport", "coroutines._is_debug_mode", "constants._SendfileMode", "reordered.extend", "timer._scheduled"]}, "base_futures.py": {"libraries": ["_thread.get_ident", "reprlib"], "function_names": ["isfuture", "_format_callbacks", "format_cb", "_future_repr_info"], "function_calls": ["len", "_format_callbacks", "get_ident", "set", "format_cb", "id", "hasattr"], "class_names": [], "class_method_calls": ["obj.__class__", "future._callbacks", "_repr_running.discard", "info.append", "future._result", "obj._asyncio_future_blocking", "_repr_running.add", "format_helpers._format_callback_source", "future._exception", "reprlib.repr", "future._state", "future._source_traceback"]}, "base_subprocess.py": {"libraries": ["collections", "log.logger", "subprocess", "warnings"], "function_names": ["set_protocol", "pause_writing", "get_protocol", "data_received", "terminate", "__repr__", "_call_connection_lost", "resume_writing", "_pipe_connection_lost", "__init__", "_call", "_start", "is_closing", "get_pipe_transport", "close", "__del__", "kill", "connection_lost", "_process_exited", "_try_finish", "send_signal", "_check_proc", "connection_made", "get_returncode", "get_pid", "_pipe_data_received"], "function_calls": ["ReadSubprocessPipeProto", "isinstance", "WriteSubprocessPipeProto", "super", "_warn", "all", "ProcessLookupError"], "class_names": ["ReadSubprocessPipeProto", "WriteSubprocessPipeProto", "BaseSubprocessTransport"], "class_method_calls": ["self._proc", "stderr.pipe", "logger.warning", "info.append", "loop.connect_write_pipe", "self.disconnected", "self.pipe", "self._extra", "proc.stderr", "waiter.set_result", "self._connect_pipes", "waiter.cancelled", "self._closed", "self.close", "protocols.Protocol", "logger.info", "protocols.BaseProtocol", "collections.deque", "self._start", "warnings.warn", "self._loop", "proto.pipe", "p.disconnected", "proc.stdin", "transports.SubprocessTransport", "self._exit_waiters", "self._call", "self._finished", "loop.call_soon", "loop.connect_read_pipe", "subprocess.PIPE", "self._try_finish", "self.fd", "self._pending_calls", "self._pipes", "self._call_connection_lost", "self._protocol", "proc.stdout", "stdout.pipe", "stdin.pipe", "self._pid", "self.proc", "self._check_proc", "self.__class__", "waiter.set_exception", "self._returncode", "logger.debug"]}, "base_tasks.py": {"libraries": ["linecache", "traceback"], "function_names": ["_task_get_stack", "_task_print_stack", "_task_repr_info"], "function_calls": ["print", "set", "hasattr"], "class_names": [], "class_method_calls": ["task.get_stack", "extracted_list.append", "frames.append", "traceback.format_exception_only", "frames.reverse", "tb.tb_frame", "f.f_lineno", "traceback.print_list", "base_futures._future_repr_info", "f.f_back", "f.f_globals", "info.insert", "linecache.checkcache", "f.f_code", "tb.tb_next", "task._exception", "coroutines._format_coroutine", "task._coro", "task._must_cancel", "co.co_name", "co.co_filename", "task.get_name", "linecache.getline", "exc.__class__", "checked.add", "task._fut_waiter"]}, "constants.py": {"libraries": ["struct", "sys", "os", "re"], "function_names": ["_unpack_hexversion", "_get_suffix"], "function_calls": ["int", "_unpack_hexversion", "_get_suffix"], "class_names": [], "class_method_calls": ["os.getenv", "struct.pack", "sys.hexversion"]}, "coroutines.py": {"libraries": ["types", "inspect", "log.logger", "sys", "warnings", "collections.abc", "os", "functools", "traceback"], "function_names": ["__repr__", "wrapper", "_format_coroutine", "throw", "coroutine", "gi_frame", "__await__", "get_name", "__init__", "_is_debug_mode", "is_running", "iscoroutine", "gi_code", "close", "__del__", "gi_yieldfrom", "__iter__", "gi_running", "iscoroutinefunction", "__next__", "send", "coro"], "function_calls": ["iscoroutine", "_format_coroutine", "isinstance", "object", "func", "len", "CoroWrapper", "getattr", "get_name", "set", "await_meth", "coro", "_is_debug_mode", "type", "is_running", "bool", "hasattr"], "class_names": ["CoroWrapper"], "class_method_calls": ["coro.__name__", "inspect.isgeneratorfunction", "format_helpers._format_callback", "sys.flags", "constants.DEBUG_STACK_DEPTH", "coro.cr_frame", "types.GeneratorType", "functools.wraps", "coro_frame.f_lineno", "frame.f_lasti", "coro_code.co_firstlineno", "res.__await__", "w.__qualname__", "coro.__qualname__", "inspect.iscoroutinefunction", "coro.func", "format_helpers._get_function_source", "self.func", "self._source_traceback", "warnings.warn", "w._source_traceback", "coro.gi_code", "coro.cr_code", "w.__name__", "inspect.isgenerator", "_iscoroutine_typecache.add", "coro.gi_frame", "logger.error", "traceback.format_list", "self.__qualname__", "base_futures.isfuture", "format_helpers.extract_stack", "collections.abc", "coro.cr_running", "inspect.iscoroutine", "tb.rstrip", "os.environ", "sys._getframe", "self.__class__", "types.coroutine", "coro.gi_running", "self.gen", "types.CoroutineType", "self.__name__", "coro_code.co_filename", "wrapper._is_coroutine"]}, "events.py": {"libraries": ["contextvars", "threading", "_asyncio._set_running_loop", "sys", "_asyncio._get_running_loop", "subprocess", "socket", "os", "_asyncio.get_running_loop", "_asyncio.get_event_loop"], "function_names": ["stop", "is_closed", "__le__", "run_in_executor", "call_exception_handler", "cancelled", "get_debug", "__repr__", "__eq__", "add_signal_handler", "set_task_factory", "__ge__", "_run", "call_at", "__ne__", "call_soon_threadsafe", "set_default_executor", "set_event_loop", "is_serving", "remove_reader", "__lt__", "__init__", "is_running", "cancel", "get_event_loop", "call_soon", "when", "get_event_loop_policy", "add_writer", "set_event_loop_policy", "_set_running_loop", "close", "time", "create_task", "__gt__", "run_until_complete", "set_child_watcher", "run_forever", "get_exception_handler", "new_event_loop", "remove_signal_handler", "get_child_watcher", "create_future", "remove_writer", "get_loop", "_timer_handle_cancelled", "__hash__", "call_later", "_repr_info", "get_running_loop", "get_task_factory", "set_exception_handler", "_init_event_loop_policy", "default_exception_handler", "set_debug", "_get_running_loop", "add_reader"], "function_calls": ["isinstance", "super", "DefaultEventLoopPolicy", "hash", "_init_event_loop_policy", "repr", "get_event_loop_policy", "_get_running_loop", "_RunningLoop", "RuntimeError"], "class_names": ["AbstractEventLoopPolicy", "TimerHandle", "_Local", "BaseDefaultEventLoopPolicy", "AbstractEventLoop", "Handle", "_RunningLoop", "AbstractServer"], "class_method_calls": ["info.append", "other._cancelled", "threading.Lock", "self.new_event_loop", "contextvars.copy_context", "os.getpid", "self._scheduled", "socket.AF_UNSPEC", "self._repr_info", "self._repr", "self.close", "other._args", "self.call_later", "self.set_event_loop", "self._cancelled", "other._callback", "self._callback", "self._source_traceback", "self._loop", "info.insert", "_running_loop.loop_pid", "threading.current_thread", "self.__eq__", "self._Local", "subprocess.PIPE", "format_helpers.extract_stack", "self.wait_closed", "other._when", "socket.AI_PASSIVE", "self._local", "self._when", "threading._MainThread", "self._args", "self._loop_factory", "self._context", "threading.local", "sys._getframe", "self.__class__", "format_helpers._format_callback_source"]}, "exceptions.py": {"libraries": [], "function_names": ["__init__", "__reduce__"], "function_calls": ["len", "type", "super", "repr"], "class_names": ["TimeoutError", "SendfileNotAvailableError", "IncompleteReadError", "LimitOverrunError", "CancelledError", "InvalidStateError"], "class_method_calls": ["self.args", "self.consumed", "self.expected", "self.partial"]}, "format_helpers.py": {"libraries": ["reprlib", "inspect", "sys", "functools", "traceback"], "function_names": ["extract_stack", "_format_callback_source", "_format_callback", "_get_function_source", "_format_args_and_kwargs"], "function_calls": ["isinstance", "_format_callback", "_get_function_source", "repr", "_format_args_and_kwargs", "hasattr"], "class_names": [], "class_method_calls": ["code.co_firstlineno", "stack.reverse", "constants.DEBUG_STACK_DEPTH", "kwargs.items", "func.func", "traceback.StackSummary", "func.__name__", "func.__code__", "traceback.walk_stack", "items.extend", "func.keywords", "functools.partial", "code.co_filename", "inspect.unwrap", "func.__qualname__", "func.args", "functools.partialmethod", "inspect.isfunction", "sys._getframe", "reprlib.repr"]}, "futures.py": {"libraries": ["contextvars", "concurrent.futures", "sys", "logging", "_asyncio"], "function_names": ["exception", "_get_loop", "add_done_callback", "remove_done_callback", "cancelled", "_call_check_cancel", "__repr__", "_chain_future", "result", "_call_set_state", "set_result", "__await__", "_log_traceback", "_convert_future_exc", "_copy_future_state", "__init__", "cancel", "set_exception", "wrap_future", "__del__", "_set_concurrent_future_state", "_set_result_unless_cancelled", "get_loop", "done", "__schedule_callbacks", "_set_state"], "function_calls": ["isfuture", "ValueError", "isinstance", "TypeError", "len", "exception", "_get_loop", "get_loop", "RuntimeError", "_convert_future_exc", "_copy_future_state", "_set_state", "type", "_set_concurrent_future_state", "bool", "_chain_future"], "class_names": ["Future"], "class_method_calls": ["dest_loop.is_closed", "self.result", "dest.set_result", "source_loop.call_soon_threadsafe", "concurrent.set_exception", "destination.cancelled", "contextvars.copy_context", "dest.cancelled", "fut._loop", "dest.cancel", "source.cancel", "self._repr_info", "fut.set_result", "concurrent.futures", "fut.get_loop", "exceptions.TimeoutError", "self._state", "base_futures._PENDING", "destination.add_done_callback", "self.__log_traceback", "exc.args", "self._result", "base_futures._future_repr_info", "concurrent.cancel", "loop.create_future", "self._source_traceback", "exceptions.CancelledError", "dest.done", "exceptions.InvalidStateError", "self._loop", "source.cancelled", "fut.cancelled", "dest.set_exception", "dest_loop.call_soon_threadsafe", "base_futures._FINISHED", "concurrent.set_running_or_notify_cancel", "source.result", "source.add_done_callback", "base_futures._CANCELLED", "base_futures.isfuture", "self._callbacks", "format_helpers.extract_stack", "source.done", "logging.DEBUG", "_log_traceback.setter", "self._exception", "self._asyncio_future_blocking", "sys._getframe", "self.__class__", "self.__schedule_callbacks", "self.done", "concurrent.set_result", "_asyncio.Future", "events.get_event_loop", "source.exception"]}, "locks.py": {"libraries": ["collections", "types", "warnings"], "function_names": ["notify", "clear", "__enter__", "__exit__", "__await__", "locked", "_wake_up_next", "__iter__", "set", "__init__", "notify_all", "is_set", "__repr__", "release", "_wake_up_first"], "function_calls": ["ValueError", "len", "_ContextManager", "super", "iter", "all", "next", "Lock", "predicate", "RuntimeError"], "class_names": ["_ContextManager", "BoundedSemaphore", "Event", "Semaphore", "_ContextManagerMixin", "Lock", "Condition"], "class_method_calls": ["self._locked", "__iter__._is_coroutine", "self.__acquire_ctx", "self.notify", "self.acquire", "waiter.set_result", "self.locked", "coroutines._is_coroutine", "fut.set_result", "collections.deque", "self.release", "exceptions.CancelledError", "warnings.warn", "self._loop", "self._wake_up_next", "self._wake_up_first", "fut.cancelled", "lock.release", "fut.done", "self._value", "lock.locked", "self._waiters", "lock.acquire", "self._lock", "w.cancelled", "self.wait", "lock._loop", "waiter.done", "fut.cancel", "self._bound_value", "types.coroutine", "events.get_event_loop"]}, "log.py": {"libraries": ["sys"], "function_names": ["info", "debug", "set_verbosity", "error", "warn", "__init__", "set_threshold", "_log", "fatal", "log"], "function_calls": ["ValueError", "set_threshold", "Log", "str"], "class_names": ["Log"], "class_method_calls": ["_global_log.error", "_global_log.threshold", "_global_log.log", "stream.write", "sys.stderr", "stream.flush", "_global_log.fatal", "self._log", "_global_log.debug", "_global_log.info", "self.threshold", "msg.encode", "_global_log.warn", "sys.stdout", "stream.encoding"]}, "proactor_events.py": {"libraries": ["io", "threading", "signal", "log.logger", "warnings", "collections", "socket", "os"], "function_names": ["set_protocol", "_start_serving", "get_protocol", "can_write_eof", "__repr__", "_data_received", "_make_empty_waiter", "_eof_received", "write_eof", "_loop_self_reading", "_call_connection_lost", "pause_reading", "_stop_accept_futures", "_loop_writing", "__init__", "_fatal_error", "_process_events", "_make_socket_transport", "is_closing", "abort", "_make_datagram_transport", "is_reading", "resume_reading", "sendto", "close", "__del__", "_reset_empty_waiter", "_pipe_closed", "_close_self_pipe", "get_write_buffer_size", "_write_to_self", "_make_ssl_transport", "_make_read_pipe_transport", "write", "_make_write_pipe_transport", "_make_self_pipe", "_stop_serving", "_loop_reading", "loop", "_make_duplex_pipe_transport", "_set_socket_extra", "_force_close", "_set_extra"], "function_calls": ["_ProactorDuplexPipeTransport", "min", "_warn", "RuntimeError", "protocol_factory", "isinstance", "super", "ValueError", "_ProactorDatagramTransport", "type", "_ProactorReadPipeTransport", "_ProactorSocketTransport", "hasattr", "bytearray", "len", "BrokenPipeError", "_set_socket_extra", "bytes", "_ProactorWritePipeTransport", "sum", "TypeError"], "class_names": ["_ProactorDatagramTransport", "_ProactorDuplexPipeTransport", "_ProactorBasePipeTransport", "_ProactorBaseWritePipeTransport", "_ProactorReadPipeTransport", "_ProactorWritePipeTransport", "_ProactorSocketTransport", "BaseProactorEventLoop"], "class_method_calls": ["self._loop_writing", "logger.warning", "info.append", "self._debug", "self._self_reading_future", "self._write_fut", "self.close", "self._make_socket_transport", "self.set_protocol", "self._pending_write", "self._loop", "self._csock", "threading.current_thread", "self._internal_fds", "self._address", "self._empty_waiter", "futures._set_result_unless_cancelled", "f.result", "os.fstat", "self._maybe_resume_protocol", "transp.pause_reading", "sslproto.SSLProtocol", "file.fileno", "self._protocol", "self._read_fut", "self.call_exception_handler", "self._ssock", "self._server", "fut.result", "protocols.BufferedProtocol", "sock.getpeername", "self._pending_data", "transports.Transport", "socket.socketpair", "protocols._feed_data_to_buffered_proto", "csock.send", "collections.deque", "self._maybe_pause_protocol", "warnings.warn", "self._conn_lost", "file.seek", "ssl_protocol._app_transport", "self.max_size", "fut.done", "self.is_closed", "self._set_extra", "self.sock_sendfile", "transp._reset_empty_waiter", "self._loop_reading", "transport._extra", "fut.cancel", "sock.close", "server._detach", "logger.debug", "self._fatal_error", "transports.ReadTransport", "self._force_close", "transp.resume_reading", "self._make_ssl_transport", "self._close_self_pipe", "self._extra", "sock.fileno", "trsock.TransportSocket", "threading.main_thread", "constants.LOG_THRESHOLD_FOR_CONNLOST_WRITES", "f.add_done_callback", "self._sock", "self._selector", "self._stop_accept_futures", "transp._sock", "fut.cancelled", "transports.BaseTransport", "proactor.set_loop", "self.is_running", "self._eof_written", "self._call_connection_lost", "sock.getsockname", "base_events.BaseEventLoop", "self._proactor", "self._make_self_pipe", "self._data_received", "transp.is_reading", "transports._FlowControlMixin", "self._accept_futures", "self.call_soon", "socket.SHUT_WR", "base_events._set_nodelay", "self._loop_self_reading", "transports.WriteTransport", "exceptions.CancelledError", "signal.set_wakeup_fd", "self._eof_received", "transp._make_empty_waiter", "self._paused", "self._pipe_closed", "socket.error", "self._closing", "proactor.__class__", "io.UnsupportedOperation", "future.cancel", "transport._loop", "exceptions.SendfileNotAvailableError", "self.__class__", "socket.SHUT_RDWR", "self._buffer", "constants._SendfileMode"]}, "protocols.py": {"libraries": [], "function_names": ["datagram_received", "pause_writing", "_feed_data_to_buffered_proto", "buffer_updated", "resume_writing", "connection_made", "get_buffer", "error_received", "data_received", "eof_received", "pipe_data_received", "connection_lost", "process_exited", "pipe_connection_lost"], "function_calls": ["len", "RuntimeError"], "class_names": ["DatagramProtocol", "SubprocessProtocol", "Protocol", "BaseProtocol", "BufferedProtocol"], "class_method_calls": ["proto.get_buffer", "proto.buffer_updated"]}, "queues.py": {"libraries": ["util.info", "util.register_after_fork", "threading", "time", "queue.Full", "util.Finalize", "util.is_exiting", "synchronize.SEM_VALUE_MAX", "_multiprocessing", "sys", "collections", "weakref", "util.debug", "os", "queue.Empty", "errno", "traceback"], "function_names": ["get_nowait", "_finalize_join", "task_done", "empty", "_after_fork", "_finalize_close", "put_nowait", "qsize", "join", "__getstate__", "join_thread", "get", "__init__", "put", "_feed", "_start_thread", "_on_queue_feeder_error", "close", "full", "__setstate__", "cancel_join_thread"], "function_calls": ["onerror", "ValueError", "register_after_fork", "object", "twr", "debug", "close", "nacquire", "nrelease", "is_exiting", "nwait", "bpopleft", "info", "send_bytes", "getattr", "Finalize", "wrelease", "wacquire"], "class_names": ["JoinableQueue", "SimpleQueue", "Queue"], "class_method_calls": ["Queue.__setstate__", "time.monotonic", "self._writer", "sys.platform", "notempty.acquire", "buffer.popleft", "self._reader", "threading.Condition", "_ForkingPickler.loads", "_ForkingPickler.dumps", "traceback.print_exc", "threading.Lock", "os.getpid", "buffer.append", "notempty.notify", "self._maxsize", "self._rlock", "self._opid", "self._wlock", "self._closed", "self.put", "ctx.Semaphore", "Queue._finalize_join", "ctx.BoundedSemaphore", "collections.deque", "self._unfinished_tasks", "self._after_fork", "self._thread", "self._sem", "errno.EPIPE", "self._ignore_epipe", "self._joincancelled", "Queue._after_fork", "thread.join", "self.get", "ctx.Condition", "self._send_bytes", "self._recv_bytes", "writelock.acquire", "weakref.ref", "context.reduction", "connection.Pipe", "self._notempty", "self._poll", "queue_sem.release", "self._close", "notempty.release", "notempty.wait", "self._cond", "Queue._finalize_close", "Queue.__init__", "Queue._feed", "context.assert_spawning", "self._start_thread", "ctx.Lock", "self._jointhread", "writelock.release", "Queue.__getstate__", "self._buffer", "threading.Thread", "self._on_queue_feeder_error"]}, "runners.py": {"libraries": [], "function_names": ["run", "_cancel_all_tasks"], "function_calls": ["ValueError", "_cancel_all_tasks", "RuntimeError"], "class_names": [], "class_method_calls": ["coroutines.iscoroutine", "events.set_event_loop", "loop.close", "task.exception", "loop.shutdown_asyncgens", "tasks.all_tasks", "events.new_event_loop", "task.cancel", "task.cancelled", "loop.run_until_complete", "loop.call_exception_handler", "loop.set_debug", "events._get_running_loop", "tasks.gather"]}, "selector_events.py": {"libraries": ["functools", "log.logger", "ssl", "collections", "warnings", "weakref", "socket", "selectors", "errno"], "function_names": ["_test_selector_event", "set_protocol", "_check_ssl_socket", "_start_serving", "_sock_recv", "_sock_write_done", "get_protocol", "can_write_eof", "_read_from_self", "__repr__", "_make_empty_waiter", "_read_ready__data_received", "write_eof", "remove_reader", "_call_connection_lost", "pause_reading", "_sock_connect_cb", "__init__", "_process_events", "_fatal_error", "_read_ready__on_eof", "_make_socket_transport", "is_closing", "_add_reader", "abort", "_make_datagram_transport", "add_writer", "is_reading", "_read_ready", "_sendto_ready", "resume_reading", "sendto", "close", "__del__", "_read_ready__get_buffer", "_reset_empty_waiter", "_close_self_pipe", "_sock_accept", "_add_writer", "get_write_buffer_size", "_remove_writer", "_ensure_fd_no_transport", "_make_ssl_transport", "_sock_read_done", "write", "remove_writer", "_sock_sendall", "_remove_reader", "_sock_connect", "_accept_connection", "_make_self_pipe", "_write_ready", "_stop_serving", "_process_self_data", "_force_close", "_write_to_self", "_sock_recv_into", "add_reader"], "function_calls": ["_test_selector_event", "_check_ssl_socket", "_warn", "memoryview", "protocol_factory", "RuntimeError", "isinstance", "_SelectorSocketTransport", "super", "_SelectorDatagramTransport", "range", "ValueError", "int", "type", "bool", "OSError", "hasattr", "len", "ConnectionError", "bytes", "sum", "TypeError"], "class_names": ["_SelectorDatagramTransport", "_SelectorSocketTransport", "BaseSelectorEventLoop", "_SelectorTransport"], "class_method_calls": ["logger.warning", "self.add_writer", "self._debug", "info.append", "errno.ENOBUFS", "self._ensure_fd_no_transport", "sock.proto", "self.close", "self._make_socket_transport", "self.set_protocol", "self.call_later", "reader._cancelled", "self._read_ready", "socket.AF_UNIX", "constants.ACCEPT_RETRY_DELAY", "self._process_self_data", "self._loop", "self._csock", "self._internal_fds", "self.create_future", "self._address", "self._empty_waiter", "futures._set_result_unless_cancelled", "transport.close", "self._maybe_resume_protocol", "self._add_writer", "transp.pause_reading", "sslproto.SSLProtocol", "self._protocol", "self._sock_sendall", "self.call_exception_handler", "self._ssock", "self._server", "protocols.BufferedProtocol", "self._read_ready__get_buffer", "sock.send", "self._check_closed", "self._sock_write_done", "sock.getpeername", "socket.SOL_SOCKET", "errno.ENFILE", "self._sock_connect_cb", "transports.Transport", "socket.socketpair", "csock.send", "self.get_write_buffer_size", "fut.set_result", "self.remove_reader", "sock.recv_into", "collections.deque", "sock.gettimeout", "self._maybe_pause_protocol", "warnings.warn", "exc.errno", "self._conn_lost", "self._ensure_resolved", "ssl_protocol._app_transport", "self.max_size", "fut.done", "self.is_closed", "self.sock_sendfile", "key.events", "sock.getsockopt", "self._start_serving", "transp._reset_empty_waiter", "self._protocol_connected", "selectors.DefaultSelector", "selector.get_key", "selector.__class__", "self._sock_read_done", "self._accept_connection", "self._read_ready_cb", "sock.close", "self._buffer_factory", "server._detach", "logger.debug", "key.data", "self.create_task", "self._fatal_error", "self._force_close", "transp._sock_fd", "self._make_ssl_transport", "transp.resume_reading", "self._close_self_pipe", "self._extra", "self._read_ready__data_received", "sock.fileno", "transport.is_closing", "writer.cancel", "sock.family", "trsock.TransportSocket", "errno.EMFILE", "constants.LOG_THRESHOLD_FOR_CONNLOST_WRITES", "self._sock", "functools.partial", "socket.SO_ERROR", "self._selector", "constants.SSL_HANDSHAKE_TIMEOUT", "transp._sock", "self._transports", "self._read_from_self", "selectors.EVENT_READ", "conn.setblocking", "self.is_running", "self._call_connection_lost", "sock.getsockname", "base_events.BaseEventLoop", "self._sendto_ready", "ssl.SSLSocket", "sock.connect", "self._sock_recv", "self._make_self_pipe", "reader.cancel", "self.remove_writer", "sock.recv", "errno.ENOMEM", "key.fileobj", "self._sock_fd", "transp.is_reading", "self._eof", "transports._FlowControlMixin", "socket.SHUT_WR", "self._sock_accept", "self._remove_reader", "base_events._set_nodelay", "writer._cancelled", "self._sock_connect", "self._add_callback", "transp._make_empty_waiter", "weakref.WeakValueDictionary", "self._paused", "self.add_reader", "events.Handle", "self._remove_writer", "self._add_reader", "socket.error", "self._closing", "loop._transports", "fut.add_done_callback", "sock.accept", "self._read_ready__on_eof", "self._sock_recv_into", "selectors.EVENT_WRITE", "self._accept_connection2", "fileno.fileno", "self.__class__", "fut.set_exception", "self._buffer", "constants._SendfileMode", "self._write_ready"]}, "sslproto.py": {"libraries": ["collections", "ssl", "log.logger", "warnings"], "function_names": ["_check_handshake_timeout", "set_protocol", "_start_shutdown", "_finalize", "pause_writing", "do_handshake", "_get_extra_info", "_start_handshake", "get_protocol", "data_received", "can_write_eof", "_protocol_paused", "feed_ssldata", "feed_appdata", "_create_transport_context", "shutdown", "need_ssldata", "ssl_object", "pause_reading", "resume_writing", "__init__", "_process_write_backlog", "eof_received", "_fatal_error", "is_closing", "abort", "is_reading", "_on_handshake_complete", "set_write_buffer_limits", "resume_reading", "close", "__del__", "context", "feed_eof", "get_write_buffer_size", "_abort", "connection_lost", "write", "get_extra_info", "connection_made", "wrapped", "_set_app_protocol", "_write_appdata", "_wakeup_waiter"], "function_calls": ["_create_transport_context", "ValueError", "isinstance", "_SSLPipe", "len", "_SSLProtocolTransport", "getattr", "_warn", "memoryview", "ConnectionAbortedError", "type", "dict", "TypeError", "range", "RuntimeError"], "class_names": ["_SSLPipe", "_SSLProtocolTransport", "SSLProtocol"], "class_method_calls": ["self._app_transport", "self._on_handshake_complete", "sslobj.cipher", "ssl.SSL_ERROR_SYSCALL", "logger.warning", "self._start_handshake", "self._sslobj", "transports.Transport", "self._need_ssldata", "self._extra", "protocols._feed_data_to_buffered_proto", "self._incoming", "transports._FlowControlMixin", "self._server_hostname", "exc.reason", "self._closed", "self._start_shutdown", "self.close", "self._handshake_cb", "protocols.Protocol", "ssl.CertificateError", "self._state", "self._sslpipe", "collections.deque", "sslobj.compression", "constants.SSL_HANDSHAKE_TIMEOUT", "ssl.SSL_ERROR_WANT_WRITE", "self._wakeup_waiter", "self._ssl_protocol", "warnings.warn", "self._sslcontext", "exc.errno", "self._loop", "self._call_connection_made", "self._shutdown_cb", "self.max_size", "self._write_backlog", "ssl.SSL_ERROR_WANT_READ", "self._server_side", "self._ssl_handshake_timeout", "appdata.append", "self._transport", "self._write_appdata", "ssl.SSLError", "self._set_app_protocol", "self._check_handshake_timeout", "self._abort", "tr.is_reading", "self._app_protocol", "ssl.MemoryBIO", "ssldata.append", "self._in_shutdown", "ssl.create_default_context", "self._write_buffer_size", "self._fatal_error", "self._handshake_timeout_handle", "self._context", "sslcontext.check_hostname", "self._in_handshake", "self._app_protocol_is_buffer", "protocols.BufferedProtocol", "self._handshake_start_time", "self._waiter", "self.feed_ssldata", "sslobj.getpeercert", "self._finalize", "constants._SendfileMode", "self._outgoing", "logger.debug", "self._session_established", "self._process_write_backlog"]}, "staggered.py": {"libraries": ["typing", "contextlib"], "function_names": [], "function_calls": ["len", "run_one_coro", "next", "coro_fn", "enumerate"], "class_names": [], "class_method_calls": ["t.cancel", "typing.Optional", "events.AbstractEventLoop", "locks.Event", "exceptions_mod.TimeoutError", "contextlib.suppress", "d.done", "running_tasks.append", "tasks.wait", "exceptions.append", "loop.create_task", "d.cancelled", "typing.Iterable", "typing.Awaitable", "typing.Tuple", "typing.Any", "events.get_running_loop", "tasks.wait_for", "previous_failed.wait", "this_failed.set", "d.exception", "typing.List", "typing.Callable"]}, "streams.py": {"libraries": ["log.logger", "sys", "warnings", "weakref", "tasks.sleep", "socket"], "function_names": ["exception", "pause_writing", "data_received", "can_write_eof", "__repr__", "_maybe_resume_transport", "writelines", "write_eof", "transport", "set_transport", "resume_writing", "__init__", "__aiter__", "eof_received", "set_exception", "is_closing", "close", "__del__", "at_eof", "_get_close_waiter", "factory", "feed_eof", "feed_data", "connection_lost", "_stream_reader", "write", "get_extra_info", "connection_made", "_wakeup_waiter"], "function_calls": ["ValueError", "bytearray", "len", "isinstance", "super", "StreamWriter", "RuntimeError", "StreamReaderProtocol", "StreamReader", "bytes", "sleep", "ConnectionResetError", "hasattr"], "class_names": ["StreamReader", "StreamReaderProtocol", "FlowControlMixin", "StreamWriter"], "class_method_calls": ["self._connection_lost", "self._maybe_resume_transport", "blocks.append", "self._reader", "info.append", "closed.cancelled", "reader.set_transport", "self._client_connected_cb", "waiter.set_result", "self._eof", "waiter.cancelled", "self._closed", "self._wait_for_data", "e.consumed", "protocols.Protocol", "e.partial", "self._stream_reader", "transport.abort", "self._wakeup_waiter", "loop.create_server", "warnings.warn", "self._source_traceback", "self._loop", "self._over_ssl", "self._complete_fut", "self._stream_reader_wr", "self._paused", "loop.create_connection", "stream_reader._source_traceback", "coroutines.iscoroutine", "reader.feed_eof", "reader.set_exception", "self.read", "loop.create_unix_server", "self._drain_waiter", "loop.create_unix_connection", "self.readline", "weakref.ref", "format_helpers.extract_stack", "closed.done", "reader.feed_data", "exceptions.IncompleteReadError", "closed.exception", "self._limit", "self._protocol", "self._exception", "self._stream_writer", "transport.get_extra_info", "waiter.done", "e.args", "self._reject_connection", "sys._getframe", "self._waiter", "self.__class__", "self._strong_reader", "waiter.set_exception", "exceptions.LimitOverrunError", "self._buffer", "self.readuntil", "events.get_event_loop", "logger.debug", "self._transport"]}, "subprocess.py": {"libraries": ["_winapi.STD_ERROR_HANDLE", "_winapi.NORMAL_PRIORITY_CLASS", "time.monotonic", "_posixsubprocess", "contextlib", "_winapi.BELOW_NORMAL_PRIORITY_CLASS", "_winapi", "warnings", "_winapi.CREATE_NO_WINDOW", "_winapi.CREATE_NEW_CONSOLE", "_winapi.STARTF_USESHOWWINDOW", "_winapi.STARTF_USESTDHANDLES", "io", "_winapi.CREATE_DEFAULT_ERROR_MODE", "threading", "select", "signal", "_winapi.REALTIME_PRIORITY_CLASS", "_winapi.DETACHED_PROCESS", "_winapi.STD_OUTPUT_HANDLE", "os", "_winapi.SW_HIDE", "_winapi.STD_INPUT_HANDLE", "_winapi.ABOVE_NORMAL_PRIORITY_CLASS", "builtins", "time", "msvcrt", "selectors", "errno", "_winapi.CREATE_NEW_PROCESS_GROUP", "_winapi.HIGH_PRIORITY_CLASS", "_winapi.IDLE_PRIORITY_CLASS", "sys", "_winapi.CREATE_BREAKAWAY_FROM_JOB"], "function_names": ["_execute_child", "_check_timeout", "_readerthread", "getoutput", "__exit__", "_get_handles", "terminate", "__repr__", "universal_newlines", "poll", "_get_devnull", "copy", "__enter__", "call", "_close_pipe_fds", "__init__", "check_output", "list2cmdline", "_stdin_write", "stdout", "_remaining_time", "_handle_exitstatus", "_save_input", "_posix_spawn", "__str__", "_cleanup", "__del__", "run", "_filter_handle_list", "communicate", "Detach", "_communicate", "kill", "check_call", "_try_wait", "_args_from_interpreter_flags", "_use_posix_spawn", "check_returncode", "Close", "getstatusoutput", "send_signal", "_translate_newlines", "_optim_args_from_interpreter_flags", "_make_inheritable", "_internal_poll", "wait", "_wait"], "function_calls": ["_WEXITSTATUS", "CloseHandle", "min", "sorted", "getattr", "_PopenSelector", "_warn", "memoryview", "_WIFSIGNALED", "CalledProcessError", "_WTERMSIG", "RuntimeError", "_WSTOPSIG", "isinstance", "SubprocessError", "issubclass", "call", "_WIFEXITED", "tuple", "_time", "check_output", "list2cmdline", "CompletedProcess", "_WIFSTOPPED", "child_exception_type", "ValueError", "list", "_cleanup", "run", "STARTUPINFO", "set", "Popen", "int", "type", "_GetExitCodeProcess", "bool", "_waitpid", "hasattr", "bytearray", "len", "TimeoutExpired", "_use_posix_spawn", "getstatusoutput", "FileNotFoundError", "_optim_args_from_interpreter_flags", "_WaitForSingleObject", "bytes", "filter", "TypeError", "Handle", "map"], "class_names": ["SubprocessError", "TimeoutExpired", "STARTUPINFO", "Popen", "Handle", "CompletedProcess", "CalledProcessError"], "class_method_calls": ["_winapi.STD_ERROR_HANDLE", "_winapi.CreatePipe", "_winapi.STILL_ACTIVE", "os.pipe", "self.closed", "_winapi.DUPLICATE_SAME_ACCESS", "bs_buf.append", "self._communicate", "threading.Lock", "stdin.fileno", "signal.CTRL_BREAK_EVENT", "selectors.PollSelector", "os.write", "e.errno", "_active.append", "os.WIFSIGNALED", "self._filter_handle_list", "io.open", "self.wShowWindow", "self._readerthread", "os.strerror", "self._waitpid_lock", "os.posix_spawn", "p2cread.Close", "_winapi.CreateProcess", "self.pid", "attribute_list.get", "self._sigint_wait_secs", "_posixsubprocess.fork_exec", "self._handle_exitstatus", "selector.unregister", "self.stdout", "_winapi.STD_INPUT_HANDLE", "startupinfo.hStdOutput", "self.hStdOutput", "self.dwFlags", "os.close", "os.open", "self._make_inheritable", "os.WSTOPSIG", "c2pwrite.Close", "self._check_timeout", "env_list.append", "msvcrt.get_osfhandle", "self._translate_newlines", "_winapi.WaitForSingleObject", "self._get_handles", "startupinfo.wShowWindow", "os.O_RDWR", "errpipe_data.split", "warnopts.remove", "os.PathLike", "_winapi.FILE_TYPE_CHAR", "stderr.fileno", "errread.Detach", "signal.SIGKILL", "sys.audit", "_winapi.GetExitCodeProcess", "process.wait", "selector.select", "os.WIFEXITED", "result.append", "file_actions.append", "_winapi.WAIT_TIMEOUT", "buffer.append", "self.returncode", "self.timeout", "self.stdin", "self._handle", "os.WTERMSIG", "_winapi.STARTF_USESHOWWINDOW", "self._posix_spawn", "os.POSIX_SPAWN_DUP2", "self._fileobj2output", "fh.read", "_winapi.GetCurrentProcess", "self._close_pipe_fds", "self.output", "errno.EINVAL", "warnings.warn", "os.WIFSTOPPED", "_winapi.WAIT_OBJECT_0", "exc.errno", "_winapi.TerminateProcess", "self._stderr_buff", "self.stderr", "_active.remove", "self._internal_poll", "self._try_wait", "key.fd", "os.WEXITSTATUS", "self._stdout_buff", "stack.callback", "os.get_exec_path", "_winapi.GetStdHandle", "sys.maxsize", "self.terminate", "os.path", "flag_opt_map.items", "self.stderr_thread", "process.communicate", "self.stdout_thread", "self.send_signal", "selector.get_map", "os.devnull", "stdout.setter", "exc.stderr", "sys.platform", "self.text_mode", "sys.flags", "os.POSIX_SPAWN_CLOSE", "os.read", "process.args", "os.confstr", "universal_newlines.setter", "exception_name.decode", "data.replace", "self.lpAttributeList", "selectors.SelectSelector", "_winapi.STARTF_USESTDHANDLES", "os.fsencode", "self._communication_started", "ver.split", "startupinfo.dwFlags", "self.args", "self._remaining_time", "signal.CTRL_C_EVENT", "startupinfo.hStdInput", "to_close.append", "_winapi.GetFileType", "_winapi.INFINITE", "process.kill", "__all__.extend", "args.extend", "self._get_devnull", "self._save_input", "_winapi.STD_OUTPUT_HANDLE", "self._input", "self.errors", "selectors.EVENT_READ", "low_fds_to_close.append", "startupinfo.lpAttributeList", "result.extend", "stdout.fileno", "self.encoding", "self._devnull", "p.kill", "os.environ", "self._stdin_write", "self.wait", "io.TextIOWrapper", "exc.stdout", "self.hStdInput", "startupinfo.hStdError", "selector.register", "f.close", "signal.SIGTERM", "os.kill", "self._input_offset", "os.dup", "c2pread.Detach", "errno.ECHILD", "sys.__stdout__", "self._execute_child", "os.waitpid", "p.wait", "key.fileobj", "os.fsdecode", "startupinfo.copy", "_winapi.CloseHandle", "kwargs.get", "data.decode", "fh.close", "env.items", "sigset.append", "fds_to_keep.add", "self._wait", "_winapi.SW_HIDE", "process.poll", "self._closed_child_pipe_fds", "err_msg.decode", "errwrite.Close", "self.hStdError", "self._child_created", "os.WNOHANG", "_winapi.DuplicateHandle", "sys.warnoptions", "inst._internal_poll", "p2cwrite.Detach", "time.sleep", "signal.Signals", "contextlib.ExitStack", "selectors.EVENT_WRITE", "self.cmd", "ex.returncode", "msvcrt.open_osfhandle", "self.__class__", "args.append", "ex.output", "threading.Thread", "fd.Close"]}, "tasks.py": {"libraries": ["contextvars", "_asyncio._enter_task", "concurrent.futures", "types", "queues.Queue", "_asyncio._current_tasks", "inspect", "warnings", "_asyncio._register_task", "weakref", "coroutines._is_coroutine", "_asyncio._leave_task", "_asyncio._all_tasks", "_asyncio._unregister_task", "functools", "itertools", "_asyncio"], "function_names": ["_unregister_task", "__sleep0", "_enter_task", "print_stack", "get_coro", "_done_callback", "_set_task_name", "set_result", "_inner_done_callback", "get_name", "get_stack", "__init__", "__wakeup", "callback", "run_coroutine_threadsafe", "set_exception", "cancel", "_all_tasks_compat", "__step", "_outer_done_callback", "ensure_future", "_wrap_awaitable", "as_completed", "_on_completion", "create_task", "__del__", "_on_timeout", "all_tasks", "set_name", "shield", "current_task", "gather", "_register_task", "_repr_info", "_release_waiter", "_leave_task"], "function_calls": ["Queue", "getattr", "__sleep0", "_enter_task", "_wait_for_one", "RuntimeError", "_cancel_and_wait", "_set_task_name", "isinstance", "super", "str", "_all_tasks_compat", "ensure_future", "range", "_wrap_awaitable", "ValueError", "list", "_GatheringFuture", "set", "type", "_task_name_counter", "len", "set_name", "current_task", "_register_task", "TypeError", "_wait", "_leave_task"], "class_names": ["_GatheringFuture", "Task"], "class_method_calls": ["self._log_destroy_pending", "done.get", "waiter.set_result", "exceptions.TimeoutError", "fut.remove_done_callback", "loop.create_future", "exceptions.InvalidStateError", "inner.done", "self._loop", "coro.throw", "done.put_nowait", "futures._set_result_unless_cancelled", "inner.exception", "f.result", "inspect.isawaitable", "todo.clear", "_all_tasks.add", "_current_tasks.get", "fut.result", "self.done", "outer.cancel", "pending.add", "futures._PENDING", "_asyncio.Task", "self._fut_waiter", "f.cancelled", "contextvars.copy_context", "weakref.WeakSet", "self.__wakeup", "futures.isfuture", "self._children", "child.cancel", "concurrent.futures", "self._state", "task._source_traceback", "warnings.warn", "future.set_exception", "inner.add_done_callback", "inspect.isgenerator", "fut.done", "done.add", "fut._log_destroy_pending", "events.get_running_loop", "outer.add_done_callback", "self.__step", "fut.cancel", "self._context", "task.set_name", "result._asyncio_future_blocking", "inner.cancelled", "inner.remove_done_callback", "future.set_running_or_notify_cancel", "outer._cancel_requested", "exc.value", "awaitable.__await__", "f.add_done_callback", "functools.partial", "self._name", "timeout_handle.cancel", "self._source_traceback", "outer.set_exception", "self._log_traceback", "fut.cancelled", "loop.create_task", "base_tasks._task_repr_info", "children.append", "self._coro", "_all_tasks.discard", "futures._get_loop", "base_tasks._task_print_stack", "types.coroutine", "futures._PyFuture", "future.result", "results.append", "futures._chain_future", "f.remove_done_callback", "h.cancel", "t.done", "coro.send", "fut.exception", "exceptions.CancelledError", "itertools.count", "outer.cancelled", "coroutines.iscoroutine", "base_tasks._task_get_stack", "self._must_cancel", "futures.Future", "fut.add_done_callback", "loop.call_later", "outer.done", "waiter.done", "result.add_done_callback", "f.done", "f.exception", "todo.remove", "_wrap_awaitable._is_coroutine", "self._cancel_requested", "inner.result", "outer.set_result", "events.get_event_loop", "loop.call_soon_threadsafe"]}, "transports.py": {"libraries": [], "function_names": ["set_protocol", "get_protocol", "_maybe_resume_protocol", "can_write_eof", "terminate", "_set_write_buffer_limits", "writelines", "write_eof", "pause_reading", "__init__", "is_closing", "abort", "get_write_buffer_limits", "is_reading", "set_write_buffer_limits", "resume_reading", "sendto", "get_pipe_transport", "close", "kill", "get_write_buffer_size", "write", "get_extra_info", "_maybe_pause_protocol", "send_signal", "get_returncode", "get_pid"], "function_calls": ["ValueError", "super"], "class_names": ["WriteTransport", "SubprocessTransport", "_FlowControlMixin", "BaseTransport", "ReadTransport", "DatagramTransport", "Transport"], "class_method_calls": ["self._set_write_buffer_limits", "self._maybe_pause_protocol", "self._extra", "self._high_water", "self._low_water", "self._loop", "self.get_write_buffer_size", "self._protocol_paused", "self.write", "self._protocol"]}, "trsock.py": {"libraries": ["warnings", "socket"], "function_names": ["recv_into", "recvmsg_into", "__exit__", "_na", "ioctl", "listen", "setblocking", "__repr__", "makefile", "recvmsg", "shutdown", "sendfile", "__enter__", "sendall", "__getstate__", "get_inheritable", "__init__", "recvfrom", "connect_ex", "getsockopt", "accept", "proto", "sendmsg", "sendmsg_afalg", "sendto", "close", "detach", "setsockopt", "type", "recvfrom_into", "getsockbyname", "family", "send", "set_inheritable", "gettimeout", "getsockname", "dup", "recv", "share", "connect", "getpeername", "settimeout", "fileno", "bind"], "function_calls": ["TypeError", "ValueError"], "class_names": ["TransportSocket"], "class_method_calls": ["self.family", "self._sock", "self.getsockname", "socket.error", "warnings.warn", "self.fileno", "self.proto", "self.getpeername", "self._na", "self.type", "socket.socket"]}, "unix_events.py": {"libraries": ["io", "stat", "threading", "signal", "log.logger", "sys", "warnings", "subprocess", "socket", "os", "selectors", "errno", "itertools"], "function_names": ["set_protocol", "__exit__", "_do_waitpid", "_sock_sendfile_update_filepos", "get_protocol", "_compute_returncode", "can_write_eof", "cb", "_handle_signal", "__repr__", "add_signal_handler", "remove_child_handler", "write_eof", "__enter__", "_call_connection_lost", "pause_reading", "set_event_loop", "__init__", "_fatal_error", "_start", "is_closing", "abort", "_read_ready", "_init_watcher", "_sig_chld", "resume_reading", "close", "__del__", "is_active", "add_child_handler", "get_write_buffer_size", "_child_watcher_callback", "attach_loop", "_join_threads", "set_child_watcher", "_check_signal", "_make_read_pipe_transport", "_sock_add_cancellation_callback", "remove_signal_handler", "_sock_sendfile_native_impl", "_make_write_pipe_transport", "write", "get_child_watcher", "_sighandler_noop", "_write_ready", "_do_waitpid_all", "_process_self_data", "_close"], "function_calls": ["getattr", "_UnixSubprocessTransport", "_warn", "memoryview", "_compute_returncode", "repr", "RuntimeError", "isinstance", "super", "ThreadedChildWatcher", "str", "ImportError", "_UnixWritePipeTransport", "callback", "open", "ValueError", "list", "type", "next", "OSError", "bytearray", "len", "BrokenPipeError", "NotImplementedError", "_UnixReadPipeTransport", "ConnectionError", "TypeError"], "class_names": ["FastChildWatcher", "MultiLoopChildWatcher", "_UnixDefaultEventLoopPolicy", "SafeChildWatcher", "BaseChildWatcher", "ThreadedChildWatcher", "_UnixSubprocessTransport", "_UnixReadPipeTransport", "_UnixWritePipeTransport", "_UnixSelectorEventLoop", "AbstractChildWatcher"], "class_method_calls": ["thread.daemon", "self._proc", "logger.warning", "self.add_writer", "info.append", "threading.Lock", "watcher.is_active", "os.write", "socket.SOCK_STREAM", "os.WIFSIGNALED", "logger.info", "thread.start", "self._read_ready", "self._fileno", "socket.AF_UNIX", "self._loop", "self._csock", "thread.join", "threading.current_thread", "self.call_soon_threadsafe", "self.create_future", "futures._set_result_unless_cancelled", "os.fstat", "self._callbacks", "self._maybe_resume_protocol", "events.BaseDefaultEventLoopPolicy", "file.fileno", "self._protocol", "handle._cancelled", "self._close", "stdin_w.detach", "self._local", "self.remove_signal_handler", "events.get_child_watcher", "self._check_closed", "selector_events._test_selector_event", "loop.is_closed", "os.sendfile", "os.WIFEXITED", "socket.socketpair", "self._init_watcher", "events.AbstractEventLoop", "self.get_write_buffer_size", "os.WTERMSIG", "fut.set_result", "self._do_waitpid", "self._maybe_pause_protocol", "errno.EINVAL", "selector_events.BaseSelectorEventLoop", "warnings.warn", "exc.errno", "subprocess.Popen", "self._conn_lost", "stat.S_ISCHR", "tasks.sleep", "signal.getsignal", "self._sock_sendfile_update_filepos", "self.max_size", "self.write_eof", "os.WEXITSTATUS", "self._join_threads", "loop.get_debug", "self._saved_sighandler", "signal.SIGINT", "sock.setblocking", "stat.S_ISSOCK", "self.attach_loop", "events.get_running_loop", "self._forks", "base_subprocess.BaseSubprocessTransport", "errno.EADDRINUSE", "transp._wait", "errno.EIO", "events._lock", "sock.close", "self._pid_counter", "logger.debug", "self._fatal_error", "self._sock_sendfile_native_impl", "transports.ReadTransport", "sys.platform", "sock.bind", "os.read", "sys.is_finalizing", "new_exc.__cause__", "self._extra", "self._sig_chld", "thread.is_alive", "errno.ENOTCONN", "sock.fileno", "os.set_blocking", "loop.call_soon_threadsafe", "self._create_connection_transport", "sock.family", "stdin.close", "constants.LOG_THRESHOLD_FOR_CONNLOST_WRITES", "self._handle_signal", "os.fspath", "self._do_waitpid_all", "fut.cancelled", "selectors.EVENT_READ", "server._start_serving", "base_events.Server", "signal.signal", "subprocess.PIPE", "self._lock", "transp.close", "self._call_connection_lost", "transp._process_exited", "loop.add_signal_handler", "os.lseek", "coroutines.iscoroutinefunction", "watcher.add_child_handler", "signal.valid_signals", "self.remove_writer", "transp.get_pid", "stdin_w.close", "self._signal_handlers", "signal.siginterrupt", "os.SEEK_SET", "os.waitpid", "self._check_signal", "transports._FlowControlMixin", "self._zombies", "signal.SIGCHLD", "self._threads", "transports.WriteTransport", "itertools.count", "signal.set_wakeup_fd", "os.remove", "self._add_callback_signalsafe", "sock.type", "self._paused", "events.Handle", "pipe.fileno", "coroutines.iscoroutine", "logger.error", "signal.default_int_handler", "signal.SIG_DFL", "self._closing", "os.WNOHANG", "self._sock_add_cancellation_callback", "fut.add_done_callback", "self._pipe", "io.UnsupportedOperation", "threading._MainThread", "self.sock_connect", "self._child_watcher_callback", "selectors.EVENT_WRITE", "exceptions.SendfileNotAvailableError", "stat.S_ISFIFO", "self._watcher", "self.__class__", "os.stat", "fut.set_exception", "self._buffer", "threading.Thread", "self._write_ready", "socket.socket"]}, "windows_events.py": {"libraries": ["time", "msvcrt", "socket", "log.logger", "_winapi", "struct", "weakref", "math", "_overlapped", "errno"], "function_names": ["_check_closed", "recv_into", "_unregister_wait_cb", "_wait_for_handle", "wait_for_handle", "finish_connect", "__repr__", "finish_accept", "sendfile", "finish_recv", "select", "finish_wait_for_handle", "set_result", "__init__", "finish_sendfile", "callback", "_cancel_overlapped", "set_exception", "cancel", "_wait_cancel", "_register_with_iocp", "_start", "accept", "_unregister_wait", "sendto", "accept_pipe", "close", "__del__", "loop_accept_pipe", "_register", "_get_accept_socket", "_get_unconnected_pipe", "closed", "_server_pipe_handle", "_result", "run_forever", "set_loop", "send", "recv", "_stop_serving", "_repr_info", "_poll", "finish_accept_pipe", "_unregister", "connect", "finish_send", "recvfrom"], "function_calls": ["IocpProactor", "_WindowsSubprocessTransport", "isinstance", "list", "min", "len", "super", "ValueError", "RuntimeError", "accept_coro", "_WaitCancelFuture", "int", "callback", "PipeServer", "ConnectionResetError", "_OverlappedFuture", "_WaitHandleFuture", "protocol_factory"], "class_names": ["IocpProactor", "_WindowsSubprocessTransport", "WindowsProactorEventLoopPolicy", "_BaseWaitHandleFuture", "_WindowsSelectorEventLoop", "ProactorEventLoop", "_WaitCancelFuture", "PipeServer", "WindowsSelectorEventLoopPolicy", "_OverlappedFuture", "_WaitHandleFuture"], "class_method_calls": ["self._server_pipe_handle", "self._proc", "self._unregister_proactor", "f.set_result", "logger.warning", "self.closed", "info.append", "conn.getpeername", "self._debug", "self._register_with_iocp", "conn.family", "self._self_reading_future", "self.close", "exc.args", "self._registered", "self._loop", "f.cancel", "_overlapped.SO_UPDATE_ACCEPT_CONTEXT", "_overlapped.WSAConnect", "conn.fileno", "self._event", "_winapi.PIPE_TYPE_MESSAGE", "f.set_exception", "proactor_events.BaseProactorEventLoop", "self.create_future", "self._address", "ov.AcceptEx", "errno.WSAEINVAL", "f.result", "_winapi.FILE_FLAG_OVERLAPPED", "events.BaseDefaultEventLoopPolicy", "msvcrt.get_osfhandle", "file.fileno", "self._cancel_overlapped", "_winapi.WaitForSingleObject", "self._unregistered", "windows_utils.BUFSIZE", "self._results", "ov.ConnectEx", "self.call_exception_handler", "self._check_closed", "conn.setsockopt", "conn.getsockname", "self._event_fut", "ov.ReadFile", "socket.SOL_SOCKET", "listener.family", "self._stopped_serving", "weakref.WeakSet", "self._handle", "fut.set_result", "_winapi.PIPE_ACCESS_DUPLEX", "_overlapped.Overlapped", "ov.pending", "self._accept_pipe_future", "_winapi.PIPE_WAIT", "selector_events.BaseSelectorEventLoop", "_winapi.WAIT_OBJECT_0", "_overlapped.ERROR_OPERATION_ABORTED", "_overlapped.RegisterWaitWithQueue", "tasks.sleep", "info.insert", "tasks.ensure_future", "windows_utils.Popen", "pipe.close", "fut._source_traceback", "base_subprocess.BaseSubprocessTransport", "ov.WriteFile", "self._cache", "transp._wait", "fut.cancel", "_overlapped.CreateIoCompletionPort", "ov.ReadFileInto", "server._accept_pipe_future", "logger.debug", "_overlapped.ERROR_PIPE_BUSY", "time.monotonic", "server._get_unconnected_pipe", "self._unregister_wait", "self._wait_for_handle", "conn.settimeout", "_winapi.NMPWAIT_WAIT_FOREVER", "_overlapped.ERROR_NETNAME_DELETED", "self._get_accept_socket", "_overlapped.INVALID_HANDLE_VALUE", "sock.fileno", "_overlapped.ERROR_IO_PENDING", "e.winerror", "server._free_instances", "f.add_done_callback", "ov.getresult", "_overlapped.ConnectPipe", "ov.ConnectNamedPipe", "self._source_traceback", "_winapi.INFINITE", "_overlapped.CreateEvent", "_overlapped.SO_UPDATE_CONNECT_CONTEXT", "fut.cancelled", "self._done_callback", "listener.fileno", "_winapi.FILE_FLAG_FIRST_PIPE_INSTANCE", "ov.WSARecv", "transp.close", "self._wait_handle", "_overlapped.BindLocal", "_winapi.CreateNamedPipe", "ov.WSASend", "self._proactor", "self._make_duplex_pipe_transport", "socket.SOCK_DGRAM", "ov.address", "s.settimeout", "self._register", "ov.TransmitFile", "obj.fileno", "ov.WSARecvFrom", "self._iocp", "self._unregister_wait_cb", "_overlapped.UnregisterWaitEx", "self._process_exited", "exc.winerror", "self._ov", "self.call_soon", "conn.type", "_winapi.CloseHandle", "_winapi.PIPE_UNLIMITED_INSTANCES", "self._result", "self._loop_self_reading", "exceptions.CancelledError", "f._source_traceback", "math.ceil", "pipe.fileno", "f._poll", "windows_utils.PipeHandle", "struct.pack", "fut._done_callback", "conn.close", "futures.Future", "self._poll", "ov.WSASendTo", "self._pipe", "_overlapped.GetQueuedCompletionStatus", "f.done", "server.closed", "_overlapped.UnregisterWait", "ov.WSARecvInto", "self.__class__", "self._free_instances", "_winapi.PIPE_READMODE_MESSAGE", "listener.gettimeout", "_winapi.NULL", "socket.socket"]}, "windows_utils.py": {"libraries": ["msvcrt", "_winapi", "sys", "tempfile", "warnings", "subprocess", "os", "itertools"], "function_names": ["close", "__del__", "__enter__", "__exit__", "pipe", "__init__", "handle", "__repr__", "fileno"], "function_calls": ["ValueError", "CloseHandle", "super", "ImportError", "_warn", "pipe", "next", "PipeHandle"], "class_names": ["Popen", "PipeHandle"], "class_method_calls": ["sys.platform", "tempfile.mktemp", "_winapi.OPEN_EXISTING", "kwds.get", "_winapi.NMPWAIT_WAIT_FOREVER", "os.O_RDONLY", "os.getpid", "ov.GetOverlappedResult", "self.stdin", "self._handle", "_winapi.ConnectNamedPipe", "self.close", "_winapi.PIPE_ACCESS_DUPLEX", "_winapi.CloseHandle", "_winapi.PIPE_WAIT", "subprocess.Popen", "warnings.warn", "itertools.count", "_winapi.GENERIC_WRITE", "subprocess.STDOUT", "self.stdout", "_winapi.CreateFile", "self.stderr", "_winapi.GENERIC_READ", "_winapi.FILE_FLAG_FIRST_PIPE_INSTANCE", "os.close", "subprocess.PIPE", "_winapi.FILE_FLAG_OVERLAPPED", "_winapi.PIPE_ACCESS_INBOUND", "_winapi.CreateNamedPipe", "msvcrt.open_osfhandle", "self.__class__", "_winapi.NULL"]}, "asyncore.py": {"libraries": ["errno.ENOTCONN", "warnings", "errno.ESHUTDOWN", "select", "errno.EINVAL", "errno.errorcode", "errno.EPIPE", "socket", "os", "errno.EISCONN", "errno.EAGAIN", "errno.EALREADY", "errno.ECONNABORTED", "time", "errno.EBADF", "errno.EINPROGRESS", "errno.ECONNRESET", "sys", "errno.EWOULDBLOCK"], "function_names": ["handle_connect_event", "writable", "readable", "poll2", "set_file", "listen", "compact_traceback", "__repr__", "create_socket", "readwrite", "poll", "__init__", "log_info", "set_reuse_addr", "handle_read_event", "_strerror", "fileno", "_exception", "handle_read", "accept", "getsockopt", "handle_error", "close", "__del__", "initiate_send", "handle_expt", "handle_accept", "handle_close", "handle_accepted", "read", "set_socket", "handle_expt_event", "write", "send", "add_channel", "recv", "handle_write", "loop", "handle_connect", "del_channel", "close_all", "connect", "log", "handle_write_event", "bind"], "function_calls": ["frozenset", "file_wrapper", "compact_traceback", "readwrite", "id", "repr", "str", "_strerror", "_exception", "AssertionError", "list", "int", "OSError", "read", "hasattr", "write", "len", "poll_fun", "NotImplementedError", "print"], "class_names": ["ExitNow", "file_wrapper", "file_dispatcher", "dispatcher_with_send", "dispatcher"], "class_method_calls": ["self.handle_connect_event", "why.args", "os.write", "socket.SOCK_STREAM", "select.poll", "self.debug", "self.handle_accepted", "self.close", "os.strerror", "r.append", "self._fileno", "self.handle_connect", "dispatcher.__init__", "self.initiate_send", "os.close", "select.POLLERR", "map.items", "self.addr", "tb.tb_lineno", "sys.stderr", "x.close", "self.family_and_type", "err.args", "sock.getpeername", "socket.SOL_SOCKET", "select.POLLPRI", "fd.fileno", "status.append", "self.handle_expt", "obj.handle_read_event", "warnings.warn", "self.set_socket", "self.handle_write", "self.connecting", "select.select", "self.fd", "sock.setblocking", "w.append", "select.POLLNVAL", "sock.close", "e.append", "obj.handle_write_event", "obj.readable", "self.out_buffer", "os.read", "obj.handle_close", "sock.fileno", "os.set_blocking", "self.set_file", "select.POLLHUP", "tb.tb_frame", "self.ignore_log_types", "obj.writable", "socket.SO_ERROR", "self.handle_accept", "x.args", "obj.handle_expt_event", "self.socket", "pollster.poll", "self.add_channel", "e.args", "self.accept", "os.dup", "self.del_channel", "self.connected", "socket.AF_INET", "obj.accepting", "map.clear", "socket.SO_REUSEADDR", "pollster.register", "self.handle_read", "map.values", "tb.tb_next", "sys.exc_info", "tbinfo.append", "self.log_info", "self.accepting", "dispatcher.send", "select.POLLOUT", "time.sleep", "map.get", "os.name", "self.__class__", "self.handle_close", "obj.handle_error", "select.POLLIN", "self._map", "socket.socket"]}, "base64.py": {"libraries": ["re", "getopt", "binascii", "struct", "warnings", "sys"], "function_names": ["a85encode", "encodebytes", "test", "encodestring", "b32decode", "decode", "decodebytes", "decodestring", "_input_type_check", "standard_b64encode", "b85decode", "_85encode", "b85encode", "standard_b64decode", "b64decode", "b64encode", "urlsafe_b64encode", "b16encode", "_bytes_from_decode_data", "a85decode", "urlsafe_b64decode", "encode", "b32encode", "b16decode", "main"], "function_calls": ["encodebytes", "test", "memoryview", "packI", "repr", "decodebytes", "isinstance", "curr_clear", "_input_type_check", "_85encode", "open", "range", "ValueError", "b64decode", "b64encode", "_bytes_from_decode_data", "curr_append", "enumerate", "func", "decoded_append", "from_bytes", "bytearray", "len", "max", "bytes", "main", "TypeError", "print"], "class_names": [], "class_method_calls": ["binascii.Error", "int.from_bytes", "s.__class__", "curr.append", "re.search", "sys.stdout", "re.fullmatch", "sys.exit", "m.format", "s.encode", "getopt.getopt", "warnings.warn", "output.write", "out.append", "s.rstrip", "binascii.a2b_base64", "binascii.hexlify", "chunks.append", "b.startswith", "s.upper", "m.ndim", "pieces.append", "decoded.append", "bytes.maketrans", "acc.to_bytes", "b.endswith", "sys.stdin", "getopt.error", "binascii.b2a_base64", "input.read", "encoded.translate", "binascii.unhexlify", "input.readline", "curr.clear", "struct.error", "sys.stderr", "struct.Struct", "sys.argv", "s.translate"]}, "bdb.py": {"libraries": ["inspect.CO_GENERATOR", "inspect.CO_ASYNC_GENERATOR", "reprlib", "inspect.CO_COROUTINE", "__main__", "sys", "fnmatch", "warnings", "os", "linecache"], "function_names": ["break_here", "set_until", "enable", "test", "user_return", "user_exception", "do_clear", "set_trace", "get_all_breaks", "get_bpbynumber", "effective", "user_line", "dispatch_return", "clear_all_breaks", "set_continue", "_set_stopinfo", "trace_dispatch", "runctx", "stop_here", "get_stack", "bpprint", "__init__", "bpformat", "runcall", "__str__", "runeval", "set_break", "user_call", "run", "set_next", "set_return", "is_skipped_module", "format_stack_entry", "checkfuncname", "clear_all_file_breaks", "dispatch_exception", "set_quit", "disable", "bar", "get_file_breaks", "clear_break", "clear_bpbynumber", "canonic", "get_break", "deleteMe", "break_anywhere", "reset", "dispatch_line", "foo", "dispatch_call", "set_step", "_prune_breaks", "get_breaks"], "function_calls": ["effective", "repr", "isinstance", "str", "Tdb", "ValueError", "set", "int", "func", "checkfuncname", "eval", "len", "compile", "max", "bar", "NotImplementedError", "print", "TypeError", "Bdb", "exec", "Breakpoint"], "class_names": ["BdbQuit", "Bdb", "Tdb", "Breakpoint"], "class_method_calls": ["b.func_first_executable_line", "line.strip", "frame.f_back", "sys.stdout", "bp.file", "self.line", "frame.f_locals", "t.tb_frame", "f.f_back", "Breakpoint.bplist", "bp.deleteMe", "self.set_step", "bp.line", "self.stopframe", "frame.f_code", "self.dispatch_return", "self.botframe", "self.stop_here", "self.currentbp", "self.run", "self.breaks", "self.skip", "t.run", "self.dispatch_exception", "self._prune_breaks", "self.returnframe", "self.number", "stack.reverse", "self.stoplineno", "self.bpformat", "self.enabled", "f.f_lineno", "runcall.__text_signature__", "warnings.warn", "self.reset", "b.hits", "self.get_bpbynumber", "frame.f_globals", "self.user_line", "Breakpoint.bpbynumber", "kwds.pop", "list.append", "os.path", "sys.settrace", "sys._getframe", "self._set_stopinfo", "self.trace_dispatch", "__main__.__dict__", "self.user_exception", "self.bpbynumber", "b.cond", "self.set_continue", "self.dispatch_line", "self.user_return", "self.hits", "stack.append", "self.temporary", "self.func_first_executable_line", "self.do_clear", "self.frame_returning", "frame.f_trace", "self.ignore", "caller_frame.f_trace", "self.break_anywhere", "reprlib.repr", "self.fncache", "self.bplist", "self.quitting", "Breakpoint.next", "bp.temporary", "t.tb_next", "b.ignore", "b.funcname", "self.user_call", "self.is_skipped_module", "bp.number", "self.canonic", "linecache.checkcache", "b.line", "self.break_here", "self.file", "frame.f_lineno", "t.tb_lineno", "self.cond", "self.funcname", "self.dispatch_call", "linecache.getline", "fnmatch.fnmatch", "b.enabled"]}, "binhex.py": {"libraries": ["os", "binascii", "io", "struct"], "function_names": ["write", "_writeinfo", "_write", "getfileinfo", "hexbin", "close", "_fill", "_flush", "_read", "read_rsrc", "binhex", "_writecrc", "_checkcrc", "__init__", "write_rsrc", "_readheader", "read", "close_data"], "function_calls": ["ord", "isinstance", "getfileinfo", "BinHex", "len", "min", "FInfo", "Error", "_Rlecoderengine", "openrsrc", "bytes", "_Rledecoderengine", "HexBin", "_Hqxdecoderengine", "_Hqxcoderengine"], "class_names": ["BinHex", "FInfo", "Error", "_Rlecoderengine", "openrsrc", "_Rledecoderengine", "HexBin", "_Hqxdecoderengine", "_Hqxcoderengine"], "class_method_calls": ["ifp.close", "self.state", "binascii.b2a_hqx", "self._read", "self.FName", "self.rlen", "self.linelen", "self.hqxdata", "ifp.read_rsrc", "self._writecrc", "self._fill", "binascii.rledecode_hqx", "io.open", "self.Type", "ofp.close", "finfo.Flags", "self.data", "finfo.Creator", "ofp.write", "self.eof", "self.FInfo", "self._flush", "binascii.crc_hqx", "tp.encode", "self.Flags", "self._checkcrc", "ifp.FInfo", "self.ifp", "self.pre_buffer", "struct.pack", "struct.unpack", "binascii.rlecode_hqx", "binascii.Incomplete", "self.close_data", "name.encode", "self._write", "fp.read", "self._writeinfo", "ofp.close_data", "ifp.read", "self._readheader", "self.dlen", "ifp.FName", "ofp.write_rsrc", "self.ofp", "os.path", "file.replace", "cr.encode", "fp.seek", "self.crc", "fp.tell", "binascii.a2b_hqx", "finfo.Type", "self.read_rsrc", "self.post_buffer", "ifp.close_data", "self.Creator"]}, "bisect.py": {"libraries": ["_bisect.*"], "function_names": ["bisect_right", "insort_left", "insort_right", "bisect_left"], "function_calls": ["bisect_right", "ValueError", "len", "bisect_left"], "class_names": [], "class_method_calls": ["a.insert"]}, "bz2.py": {"libraries": ["io", "_bz2.BZ2Decompressor", "warnings", "_compression", "_bz2.BZ2Compressor", "threading.RLock", "os", "builtins.open"], "function_names": ["writable", "readable", "read1", "compress", "writelines", "__init__", "open", "readlines", "readinto", "close", "seek", "decompress", "tell", "closed", "seekable", "read", "write", "peek", "readline", "fileno"], "function_calls": ["ValueError", "isinstance", "object", "len", "BZ2Compressor", "_builtin_open", "BZ2Decompressor", "hasattr", "TypeError", "RLock", "BZ2File"], "class_names": ["BZ2File"], "class_method_calls": ["results.append", "comp.flush", "self._check_not_closed", "self._fp", "self._check_can_write", "self._pos", "self._check_can_seek", "decomp.eof", "self._check_can_read", "io.DEFAULT_BUFFER_SIZE", "_compression.BaseStream", "self._mode", "mode.replace", "warnings.warn", "decomp.decompress", "decomp.unused_data", "self.readable", "comp.compress", "self._lock", "size.__index__", "io.TextIOWrapper", "io.BufferedReader", "self._closefp", "os.PathLike", "io.SEEK_SET", "self._buffer", "_compression.DecompressReader", "self._compressor"]}, "cProfile.py": {"libraries": ["io", "runpy", "pstats", "_lsprof", "__main__", "sys", "warnings", "profile", "os", "marshal", "optparse.OptionParser"], "function_names": ["create_stats", "print_stats", "__enter__", "label", "__exit__", "run", "runctx", "main", "snapshot_stats", "dump_stats", "runcall"], "function_calls": ["OptionParser", "isinstance", "len", "TypeError", "compile", "sorted", "label", "runctx", "id", "main", "open", "func", "exec"], "class_names": ["Profile"], "class_method_calls": ["subentry.reccallcount", "code.co_firstlineno", "marshal.dump", "entry.calls", "_pyprofile._Utils", "parser.allow_interspersed_args", "entry.totaltime", "self.snapshot_stats", "sys.stdout", "self.getstats", "_lsprof.Profiler", "runpy.run_module", "sys.exit", "self.stats", "subentry.code", "runcall.__text_signature__", "parser.print_usage", "entry.code", "_pyprofile.run", "entry.reccallcount", "exc.errno", "io.open_code", "warnings.warn", "options.outfile", "self.runctx", "code.co_filename", "subentry.totaltime", "parser.add_option", "kw.pop", "options.sort", "entry.callcount", "self.disable", "pstats.Stats", "fp.read", "runctx.__doc__", "entry.inlinetime", "self.enable", "options.module", "subentry.inlinetime", "sys.path", "os.path", "subentry.callcount", "run.__doc__", "code.co_name", "sys.argv", "__main__.__dict__", "parser.parse_args", "self.create_stats", "_pyprofile.runctx"]}, "calendar.py": {"libraries": ["datetime", "argparse", "sys", "locale", "itertools.repeat"], "function_names": ["_monthlen", "format", "prweek", "monthrange", "__exit__", "_prevmonth", "yeardays2calendar", "yeardatescalendar", "weekday", "timegm", "getfirstweekday", "yeardayscalendar", "itermonthdays2", "formatyearpage", "__enter__", "formatday", "itermonthdays4", "__init__", "pryear", "__str__", "__len__", "prmonth", "itermonthdays3", "itermonthdays", "formatweekday", "iterweekdays", "formatmonthname", "isleap", "formatyear", "_nextmonth", "formatweekheader", "setfirstweekday", "formatstring", "monthdayscalendar", "formatweek", "formatmonth", "monthdatescalendar", "main", "itermonthdates", "leapdays", "__getitem__", "monthdays2calendar"], "function_calls": ["_monthlen", "min", "monthrange", "_prevmonth", "weekday", "LocaleHTMLCalendar", "repr", "isinstance", "IllegalWeekdayError", "different_locale", "HTMLCalendar", "IllegalMonthError", "a", "TextCalendar", "dict", "range", "list", "LocaleTextCalendar", "_localized_day", "property", "isleap", "enumerate", "_nextmonth", "funcs", "f", "write", "len", "max", "formatstring", "repeat", "main", "_localized_month", "print"], "class_names": ["different_locale", "IllegalWeekdayError", "LocaleTextCalendar", "_localized_day", "HTMLCalendar", "IllegalMonthError", "TextCalendar", "Calendar", "_localized_month", "LocaleHTMLCalendar"], "class_method_calls": ["options.spacing", "self.formatday", "self.monthdays2calendar", "sys.getdefaultencoding", "sys.stdout", "self.cssclasses_weekday_head", "datetime.MAXYEAR", "self.itermonthdays", "parser.add_argument", "s.center", "self.oldlocale", "self.format", "_months.insert", "v.append", "options.year", "options.width", "c.getfirstweekday", "self.yeardays2calendar", "self.weekday", "c.monthdayscalendar", "sys.argv", "self.cssclass_month_head", "self.itermonthdays3", "_locale.getlocale", "result.encode", "self.formatweek", "self.cssclass_noday", "self.cssclass_year", "self._firstweekday", "TextCalendar.__init__", "spacing.join", "_locale.getdefaultlocale", "options.month", "self.month", "s.rstrip", "c.prweek", "c.prmonth", "self.monthdayscalendar", "_locale.setlocale", "_locale.LC_TIME", "self.formatyear", "cal.formatyearpage", "options.months", "c.formatmonth", "datetime.MINYEAR", "c.pryear", "c.firstweekday", "self._months", "self.locale", "options.encoding", "options.lines", "parser.parse_args", "datetime.date", "argparse.ArgumentParser", "self.cssclass_year_head", "parser.add_argument_group", "self.formatmonth", "textgroup.add_argument", "self.formatweekheader", "self.cssclasses", "c.formatweek", "options.type", "c.formatweekheader", "weeks.append", "self.cssclass_month", "HTMLCalendar.__init__", "self.monthdatescalendar", "self.iterweekdays", "options.css", "self.formatweekday", "self.formatmonthname", "cal.formatyear", "self.itermonthdays2", "parser.error", "c.center", "htmlgroup.add_argument", "c.formatyear", "sys.exit", "options.locale", "cal.formatmonth", "self.itermonthdates", "self._days", "self.firstweekday"]}, "cgi.py": {"libraries": ["urllib.parse", "re", "email.message.Message", "email.parser.FeedParser", "sys", "tempfile", "io.StringIO", "traceback", "io.BytesIO", "html", "locale", "os", "collections.abc.Mapping", "io.TextIOWrapper"], "function_names": ["__getattr__", "read_multi", "print_directory", "test", "__write", "__exit__", "print_exception", "print_environ_usage", "dolog", "read_single", "read_binary", "make_file", "__repr__", "keys", "print_form", "__enter__", "skip_lines", "read_lines_to_outerboundary", "__init__", "parse", "valid_boundary", "initlog", "__del__", "getvalue", "__len__", "parse_multipart", "__iter__", "read_urlencoded", "__bool__", "read_lines", "read_lines_to_eof", "getfirst", "nolog", "print_arguments", "f", "closelog", "_parseparam", "print_environ", "getlist", "g", "parse_header", "__getitem__", "__contains__"], "function_calls": ["print_directory", "test", "min", "sorted", "print_exception", "print_environ_usage", "repr", "KeyError", "isinstance", "AttributeError", "print_form", "iter", "str", "StringIO", "valid_boundary", "open", "ValueError", "list", "FieldStorage", "parse_multipart", "set", "klass", "FeedParser", "int", "type", "bool", "f", "print_arguments", "hasattr", "_parseparam", "print_environ", "len", "any", "g", "BytesIO", "MiniFieldStorage", "Message", "parse_header", "TypeError", "log", "exec", "print"], "class_names": ["FieldStorage", "MiniFieldStorage"], "class_method_calls": ["line.strip", "part.done", "sys.stdout", "qs.encode", "self.fp", "self._binary_file", "self.separator", "self.headers", "self.read_urlencoded", "line.decode", "self.skip_lines", "headers.set_type", "logfp.close", "part.bytes_read", "self.length", "data.strip", "sys.stderr", "qs.decode", "sys.argv", "self.done", "self.__write", "self.type_options", "environ.keys", "self.keys", "self.type", "os.getcwd", "urllib.parse", "traceback.format_exception_only", "item.name", "logfp.write", "parser.feed", "self.list", "fp.read", "parts.__next__", "hdr_text.decode", "self.read_single", "value.replace", "self.filename", "html.escape", "line.startswith", "re.match", "p.find", "self.strict_parsing", "parser.close", "s.find", "self.value", "fs.getlist", "self.max_num_fields", "self.read_lines_to_eof", "tempfile.TemporaryFile", "self.errors", "self.make_file", "self.disposition", "self.bufsize", "self.encoding", "sys.stdin", "os.environ", "self.bytes_read", "x.value", "value.value", "line.endswith", "line.rstrip", "form.keys", "part.list", "self.FieldStorageClass", "self.limit", "self.read_lines_to_outerboundary", "self.qs_on_post", "self.name", "self.outerboundary", "self.read_lines", "fp.buffer", "fp.encoding", "self.read_multi", "first_line.strip", "sys.exc_info", "locale.getpreferredencoding", "s.count", "self.disposition_options", "self.file", "f.strip", "found.append", "self.__file", "self.__class__", "self.keep_blank_values", "self.innerboundary", "traceback.format_tb", "self.read_binary"]}, "cgitb.py": {"libraries": ["keyword", "time", "inspect", "tokenize", "sys", "tempfile", "pydoc", "os", "linecache", "traceback"], "function_names": ["strong", "enable", "text", "scanvars", "small", "lookup", "__call__", "__init__", "handle", "grey", "reset", "html", "reader"], "function_calls": ["Hook", "isinstance", "strong", "len", "scanvars", "getattr", "str", "small", "dir", "lookup", "type", "grey", "formatter", "reset", "hasattr"], "class_names": ["Hook"], "class_method_calls": ["exception.append", "keyword.kwlist", "pydoc.html", "sys.executable", "frames.append", "pydoc.text", "sys.stdout", "self.logdir", "vars.append", "time.ctime", "tempfile.mkstemp", "self.display", "self.handle", "inspect.getinnerframes", "inspect.getargvalues", "sys.exc_info", "frame.f_globals", "sys.excepthook", "rows.append", "tokenize.generate_tokens", "etype.__name__", "self.format", "inspect.formatargvalues", "dump.append", "self.file", "traceback.format_exception", "tokenize.NAME", "tokenize.NEWLINE", "line.rstrip", "time.time", "name.split", "os.path", "os.fdopen", "linecache.getline", "sys.version", "self.context", "file.write"]}, "chunk.py": {"libraries": ["struct"], "function_names": ["getsize", "getname", "close", "seek", "__init__", "tell", "skip", "read", "isatty"], "function_calls": ["ValueError", "OSError", "len", "min"], "class_names": ["Chunk"], "class_method_calls": ["self.size_read", "self.chunkname", "self.read", "self.chunksize", "file.read", "self.closed", "struct.error", "self.align", "self.file", "self.seekable", "self.skip", "struct.unpack_from", "self.offset"]}, "cmd.py": {"libraries": ["distutils.debug.DEBUG", "distutils.util", "re", "distutils.archive_util", "distutils.dep_util", "distutils.log", "distutils.dir_util", "sys", "distutils.spawn.spawn", "distutils.fancy_getopt.longopt_xlate", "distutils.file_util", "os", "distutils.errors.DistutilsOptionError", "distutils.dist.Distribution"], "function_names": ["__getattr__", "make_archive", "make_file", "copy_file", "execute", "mkpath", "move_file", "reinitialize_command", "dump_options", "_ensure_stringlike", "__init__", "ensure_string", "ensure_string_list", "ensure_dirname", "get_finalized_command", "debug_print", "get_sub_commands", "set_undefined_options", "run", "announce", "get_command_name", "ensure_filename", "spawn", "_ensure_tested_string", "initialize_options", "warn", "run_command", "finalize_options", "ensure_finalized", "copy_tree"], "function_calls": ["isinstance", "AttributeError", "DistutilsOptionError", "method", "RuntimeError", "getattr", "all", "tester", "print", "TypeError", "setattr", "spawn", "hasattr"], "class_names": ["Command"], "class_method_calls": ["self._ensure_stringlike", "self._dry_run", "self.force", "cmd_obj.ensure_finalized", "self.user_options", "dep_util.newer_group", "sys.stdout", "archive_util.make_archive", "log.log", "src_cmd_obj.ensure_finalized", "log.debug", "self.help", "dist.verbose", "self.sub_commands", "self.distribution", "self.execute", "util.execute", "self.announce", "self.command_name", "commands.append", "self.finalized", "self._ensure_tested_string", "self.finalize_options", "log.INFO", "self.dry_run", "option.translate", "log.warn", "self.initialize_options", "dir_util.mkpath", "os.path", "dir_util.copy_tree", "self.verbose", "self.get_command_name", "file_util.copy_file", "self.__class__", "file_util.move_file", "re.split"]}, "code.py": {"libraries": ["codeop.CommandCompiler", "argparse", "sys", "readline", "codeop.compile_command", "traceback"], "function_names": ["write", "runcode", "raw_input", "showsyntaxerror", "push", "runsource", "resetbuffer", "interact", "__init__", "showtraceback"], "function_calls": ["InteractiveConsole", "str", "interact", "input", "SyntaxError", "CommandCompiler", "exec"], "class_names": ["InteractiveConsole", "InteractiveInterpreter"], "class_method_calls": ["argparse.ArgumentParser", "sys.platform", "sys.last_value", "sys.flags", "self.runcode", "value.args", "sys.last_traceback", "sys.ps2", "traceback.format_exception_only", "self.raw_input", "sys.ps1", "args.q", "parser.add_argument", "self.write", "self.compile", "sys.exc_info", "last_tb.tb_next", "sys.excepthook", "self.runsource", "self.showsyntaxerror", "self.buffer", "traceback.format_exception", "self.resetbuffer", "self.showtraceback", "InteractiveInterpreter.__init__", "console.raw_input", "self.filename", "self.locals", "sys.last_type", "sys.stderr", "sys.version", "console.interact", "self.__class__", "self.push", "sys.__excepthook__", "parser.parse_args"]}, "codecs.py": {"libraries": ["sys", "_codecs.*", "encodings", "builtins"], "function_names": ["__getattr__", "getdecoder", "__exit__", "iterdecode", "_buffer_encode", "_buffer_decode", "EncodedFile", "__repr__", "decode", "setstate", "writelines", "__enter__", "__init__", "getincrementalencoder", "open", "getincrementaldecoder", "readlines", "make_encoding_map", "seek", "iterencode", "__iter__", "getstate", "getwriter", "__next__", "read", "encode", "write", "make_identity_dict", "getreader", "readline", "__new__", "reset", "getencoder"], "function_calls": ["lookup_error", "len", "isinstance", "getattr", "lookup", "StreamRecoder", "id", "next", "Writer", "EncodedFile", "StreamReaderWriter", "LookupError", "getincrementalencoder", "Reader", "getincrementaldecoder", "SystemError"], "class_names": ["BufferedIncrementalEncoder", "StreamWriter", "IncrementalEncoder", "StreamReader", "CodecInfo", "BufferedIncrementalDecoder", "StreamRecoder", "StreamReaderWriter", "Codec", "IncrementalDecoder"], "class_method_calls": ["sr.file_encoding", "line.splitlines", "self.charbuffer", "self.reader", "sr.data_encoding", "self._empty_charbuffer", "sys.byteorder", "self.incrementaldecoder", "IncrementalDecoder.__init__", "sys.stdout", "self.streamreader", "self.name", "self.writer", "self.incrementalencoder", "self._buffer_encode", "data.endswith", "decoding_map.items", "srw.encoding", "self._buffer_decode", "info.streamreader", "builtins.open", "self.decode", "self.errors", "IncrementalDecoder.reset", "self.write", "self.read", "self.reset", "self.charbuffertype", "data.splitlines", "self.bytebuffer", "tuple.__new__", "self.buffer", "self.readline", "IncrementalEncoder.reset", "file.close", "sys.stdin", "data_info.encode", "self.stream", "newchars.splitlines", "file_info.streamreader", "self.streamwriter", "decoder.decode", "IncrementalEncoder.__init__", "self.encode", "data_info.decode", "info.streamwriter", "self.__class__", "self.linebuffer", "file_info.streamwriter", "encoder.encode", "exc.start", "self._is_text_encoding"]}, "codeop.py": {"libraries": ["warnings", "__future__"], "function_names": ["compile_command", "_maybe_compile", "__call__", "__init__", "_compile"], "function_calls": ["compiler", "compile", "Compile", "getattr", "_maybe_compile", "repr"], "class_names": ["Compile", "CommandCompiler"], "class_method_calls": ["warnings.simplefilter", "line.strip", "codeob.co_flags", "self.flags", "source.split", "__future__.all_feature_names", "feature.compiler_flag", "self.compiler", "warnings.catch_warnings"]}, "colorsys.py": {"libraries": [], "function_names": ["_v", "rgb_to_yiq", "hsv_to_rgb", "rgb_to_hsv", "rgb_to_hls", "yiq_to_rgb", "hls_to_rgb"], "function_calls": ["_v", "int", "min", "max"], "class_names": [], "class_method_calls": []}, "compileall.py": {"libraries": ["re", "functools.partial", "importlib.util", "argparse", "py_compile", "sys", "struct", "concurrent.futures.ProcessPoolExecutor", "os"], "function_names": ["_compile_file_tuple", "compile_dir", "compile_file", "_walk_dir", "main", "compile_path"], "function_calls": ["ValueError", "isinstance", "min", "sorted", "partial", "compile_dir", "ProcessPoolExecutor", "compile_file", "_walk_dir", "int", "main", "open", "compile_path", "print"], "class_names": [], "class_method_calls": ["argparse.ArgumentParser", "line.strip", "args.ddir", "err.msg", "rx.search", "args.rx", "py_compile.PycInvalidationMode", "chandle.read", "sys.stdout", "args.invalidation_mode", "os.fspath", "os.pardir", "sys.exit", "importlib.util", "parser.add_argument", "args.compile_dest", "executor.map", "compile_dests.append", "args.legacy", "struct.pack", "os.curdir", "args.force", "args.workers", "args.flist", "sys.stdin", "args.maxlevels", "py_compile.PyCompileError", "sys.path", "names.sort", "os.path", "re.compile", "os.PathLike", "msg.decode", "os.listdir", "e.__class__", "os.stat", "args.recursion", "mode.name", "parser.parse_args", "args.quiet", "py_compile.compile"]}, "_base.py": {"libraries": ["threading", "time", "collections", "warnings", "logging"], "function_names": ["exception", "add_done_callback", "__exit__", "_decrement_pending_calls", "cancelled", "__repr__", "shutdown", "result", "__get_result", "__enter__", "set_result", "__init__", "running", "cancel", "set_exception", "result_iterator", "_invoke_callbacks", "as_completed", "add_exception", "_create_and_install_waiters", "add_result", "add_cancelled", "_yield_finished_futures", "submit", "set_running_or_notify_cancel", "done", "wait", "map"], "function_calls": ["fn", "sorted", "_FirstCompletedWaiter", "id", "RuntimeError", "super", "_AllCompletedWaiter", "TimeoutError", "callback", "_AsCompletedWaiter", "result_iterator", "ValueError", "list", "_AcquireFutures", "_create_and_install_waiters", "set", "_yield_finished_futures", "zip", "len", "any", "DoneAndNotDoneFutures", "NotImplementedError", "sum", "TypeError", "CancelledError", "InvalidStateError"], "class_names": ["_AcquireFutures", "TimeoutError", "_AllCompletedWaiter", "BrokenExecutor", "_Waiter", "Executor", "Error", "Future", "_FirstCompletedWaiter", "_AsCompletedWaiter", "CancelledError", "InvalidStateError"], "class_method_calls": ["future._condition", "time.monotonic", "self.shutdown", "self.futures", "f._waiters", "f.cancelled", "threading.Condition", "threading.Lock", "f._condition", "futures_set.remove", "fs.pop", "self._done_callbacks", "LOGGER.exception", "waiter.add_result", "self.num_pending_calls", "waiter.event", "self._state", "threading.Event", "logging.getLogger", "done.update", "self._result", "warnings.warn", "submit.__text_signature__", "self.lock", "waiter.finished_futures", "waiter.lock", "self.event", "finished.reverse", "self.submit", "self._waiters", "f._state", "self._invoke_callbacks", "self.__get_result", "collections.namedtuple", "self._exception", "future.cancel", "self.finished_futures", "fs.reverse", "LOGGER.critical", "f.exception", "self.stop_on_exception", "waiter.add_exception", "self._condition", "self.__class__", "self._decrement_pending_calls", "waiter.add_cancelled"]}, "process.py": {"libraries": ["threading", "signal", "_weakrefset.WeakSet", "context.get_spawning_popen", "sys", "multiprocessing.connection.wait", "os", "itertools", "traceback"], "function_names": ["_check_closed", "authkey", "terminate", "__repr__", "ident", "current_process", "__reduce__", "_bootstrap", "join", "__init__", "name", "close", "_cleanup", "is_alive", "run", "active_children", "start", "kill", "parent_process", "exitcode", "sentinel", "daemon", "_Popen"], "function_calls": ["ValueError", "list", "isinstance", "_cleanup", "AuthenticationString", "str", "set", "tuple", "next", "get_spawning_popen", "dict", "wait", "type", "TypeError", "WeakSet", "bytes", "_MainProcess", "_ParentProcess"], "class_names": ["BaseProcess", "_MainProcess", "_ParentProcess", "AuthenticationString"], "class_method_calls": ["os.urandom", "_children.add", "info.append", "threading._HAVE_THREAD_NATIVE_ID", "self._config", "traceback.print_exc", "os.getpid", "util._run_after_forkers", "self._Popen", "self._closed", "os.getcwd", "_current_process._config", "_exitcode_to_name.get", "threading.main_thread", "self.name", "util._flush_std_streams", "self._name", "self._start_method", "itertools.count", "name.setter", "util._exit_function", "self._parent_name", "sys.stderr", "_dangling.add", "_current_process._identity", "context._force_start_method", "self.daemon", "p._popen", "threading._shutdown", "self._target", "self._popen", "signal.__dict__", "_children.discard", "util.info", "self._args", "os.path", "util._finalizer_registry", "self._kwargs", "self.run", "daemon.setter", "_current_process.name", "self._sentinel", "self._pid", "authkey.setter", "util._close_stdin", "self._check_closed", "e.args", "self._identity", "self._parent_pid"]}, "thread.py": {"libraries": ["threading", "concurrent.futures._base", "queue", "warnings", "weakref", "os", "atexit", "itertools"], "function_names": ["shutdown", "_worker", "_initializer_failed", "_adjust_thread_count", "run", "__init__", "_python_exit", "submit", "weakref_cb"], "function_calls": ["ValueError", "list", "len", "min", "_WorkItem", "set", "BrokenThreadPool", "callable", "executor_reference", "TypeError", "initializer", "RuntimeError"], "class_names": ["BrokenThreadPool", "ThreadPoolExecutor", "_WorkItem"], "class_method_calls": ["work_queue.put", "q.put", "self._work_queue", "self._broken", "threading.Lock", "self._shutdown", "atexit.register", "self._counter", "executor._initializer_failed", "_base.Executor", "self.future", "t.daemon", "_base.BrokenExecutor", "t.start", "t.join", "shutdown.__doc__", "self.args", "self._max_workers", "self._idle_semaphore", "self._threads", "self._adjust_thread_count", "self.kwargs", "kwargs.pop", "warnings.warn", "itertools.count", "submit.__text_signature__", "queue.Empty", "executor._shutdown", "work_queue.get", "self.fn", "_base.LOGGER", "_base.Future", "queue.SimpleQueue", "weakref.ref", "work_item.future", "submit.__doc__", "os.cpu_count", "weakref.WeakKeyDictionary", "_threads_queues.items", "self._initargs", "executor._idle_semaphore", "threading.Semaphore", "work_item.run", "self._thread_name_prefix", "self._initializer", "threading.Thread", "self._shutdown_lock"]}, "configparser.py": {"libraries": ["collections.abc.MutableMapping", "io", "re", "sys", "warnings", "collections.ChainMap", "os", "functools", "itertools"], "function_names": ["read_file", "options", "_read", "has_option", "append", "before_get", "remove_option", "__repr__", "before_set", "read_dict", "_get", "_options", "_convert_to_boolean", "_interpolate_some", "get", "__init__", "_handle_error", "_unify_values", "_get_conv", "name", "has_section", "sections", "getint", "popitem", "_read_defaults", "add_section", "__len__", "getboolean", "remove_section", "__iter__", "before_write", "set", "items", "converters", "defaults", "_join_multiline_values", "_write_section", "read", "__setitem__", "_validate_value_types", "write", "readfp", "parser", "getfloat", "before_read", "__delitem__", "optionxform", "filename", "_interpolation_replace", "read_string", "__getitem__", "__contains__"], "function_calls": ["object", "min", "getattr", "ConverterMapping", "Interpolation", "SectionProxy", "InterpolationSyntaxError", "BasicInterpolation", "repr", "KeyError", "isinstance", "super", "iter", "str", "tuple", "dict", "open", "_ChainMap", "NoSectionError", "setattr", "ValueError", "list", "InterpolationDepthError", "set", "dir", "value_getter", "DuplicateOptionError", "MissingSectionHeaderError", "type", "enumerate", "delattr", "len", "NoOptionError", "conv", "ParsingError", "callable", "DuplicateSectionError", "TypeError", "InterpolationMissingOptionError", "_impl"], "class_names": ["ConverterMapping", "Interpolation", "Error", "SectionProxy", "InterpolationSyntaxError", "BasicInterpolation", "ConfigParser", "InterpolationError", "RawConfigParser", "NoSectionError", "InterpolationDepthError", "MissingSectionHeaderError", "DuplicateOptionError", "SafeConfigParser", "NoOptionError", "ExtendedInterpolation", "ParsingError", "DuplicateSectionError", "InterpolationMissingOptionError", "LegacyInterpolation"], "class_method_calls": ["line.strip", "self._write_section", "opts.keys", "keys.items", "self.line", "rest.find", "self.OPTCRE_NV", "self._comment_prefixes", "self.read_dict", "self.set", "self._DEFAULT_INTERPOLATION", "msg.insert", "self.remove_section", "InterpolationError.__init__", "os.PathLike", "Error.__init__", "self._unify_values", "self._options", "self._proxies", "self.sections", "exc.append", "self._inline_comment_prefixes", "re.escape", "self._validate_value_types", "f.name", "self.GETTERCRE", "optionstr.lower", "self._converters", "self.lineno", "read_ok.append", "warnings.warn", "io.StringIO", "self._interpolation", "parser.get", "parser.items", "value.lower", "proxy.get", "self._OPT_TMPL", "self._handle_error", "self._KEYCRE", "value.replace", "tmp_value.find", "sys.maxsize", "options.items", "parser.converters", "self.read_file", "_OPT_NV_TMPL.format", "accum.append", "self._strict", "vars.items", "filename.setter", "self._read", "self._interpolate_some", "self._empty_lines_in_values", "fp.write", "os.fspath", "functools.partial", "self._name", "self.args", "mo.group", "itertools.chain", "self.OPTCRE", "m.end", "d.update", "self._get_conv", "self.errors", "defaults.items", "self.SECTCRE", "self._read_defaults", "self.optionxform", "re.compile", "self._join_multiline_values", "self._allow_no_value", "self._delimiters", "self._optcre", "self.NONSPACECRE", "e.args", "optval.strip", "self.reference", "match.group", "self._get", "inline_prefixes.items", "self._dict", "dictionary.items", "self._OPT_NV_TMPL", "_OPT_TMPL.format", "self._defaults", "message.append", "first_nonspace.start", "elements_added.add", "self.source", "self._interpolation_replace", "self.section", "self.message", "d.keys", "opts.update", "func.converter", "Exception.__init__", "self.add_section", "self.BOOLEAN_STATES", "message.extend", "parser.optionxform", "re.VERBOSE", "self.option", "self._sections", "self._convert_to_boolean", "optname.rstrip", "self.has_section", "line.find", "self._data", "self._parser", "self.get", "m.group", "self.default_section"]}, "contextlib.py": {"libraries": ["abc", "_collections_abc", "types.MethodType", "collections.deque", "sys", "warnings", "functools.wraps"], "function_names": ["__exit__", "_create_exit_wrapper", "push", "push_async_exit", "push_async_callback", "contextmanager", "enter_context", "helper", "__enter__", "_create_async_exit_wrapper", "_fix_exception_context", "pop_all", "__call__", "__init__", "callback", "_create_async_cb_wrapper", "_push_cm_exit", "asynccontextmanager", "close", "_create_cb_wrapper", "__subclasshook__", "_push_exit_callback", "_recreate_cm", "inner", "_exit_wrapper", "_push_async_cm_exit"], "function_calls": ["getattr", "wraps", "cb", "MethodType", "deque", "RuntimeError", "isinstance", "issubclass", "_fix_exception_context", "callback", "setattr", "_GeneratorContextManager", "typ", "type", "next", "func", "_AsyncGeneratorContextManager", "len", "TypeError"], "class_names": ["AbstractContextManager", "_AsyncGeneratorContextManager", "closing", "_GeneratorContextManager", "redirect_stdout", "nullcontext", "AbstractAsyncContextManager", "redirect_stderr", "_BaseExitStack", "suppress", "AsyncExitStack", "_RedirectStream", "ExitStack", "ContextDecorator", "_GeneratorContextManagerBase"], "class_method_calls": ["new_stack._exit_callbacks", "self._stream", "self._create_async_cb_wrapper", "self._new_target", "_cb_type.__exit__", "push_async_callback.__text_signature__", "_exit_wrapper.__wrapped__", "self._create_cb_wrapper", "_cm_type.__aexit__", "self._push_exit_callback", "self.func", "_cm_type.__aenter__", "self.args", "warnings.warn", "self.enter_result", "_cm_type.__enter__", "self._create_exit_wrapper", "self._exit_callbacks", "self._create_async_exit_wrapper", "sys.exc_info", "self._push_cm_exit", "self._push_async_cm_exit", "self._exceptions", "callback.__text_signature__", "_cb_type.__aexit__", "new_exc.__context__", "self.__aexit__", "exc.__cause__", "self.thing", "self._recreate_cm", "kwds.pop", "abc.abstractmethod", "self.kwds", "self._old_targets", "_collections_abc._check_methods", "self.__exit__", "_cm_type.__exit__", "self.__doc__", "self.__class__", "abc.ABC", "self.gen"]}, "contextvars.py": {"libraries": ["_contextvars.Context", "_contextvars.Token", "_contextvars.copy_context", "_contextvars.ContextVar"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "copy.py": {"libraries": ["org.python.core.PyStringMap", "copyreg.dispatch_table", "types", "weakref"], "function_names": ["copy", "deepcopy", "_deepcopy_tuple", "_reconstruct", "_deepcopy_method", "_keep_alive", "_deepcopy_atomic", "_deepcopy_dict", "_deepcopy_list", "_copy_immutable"], "function_calls": ["append", "getattr", "Error", "id", "isinstance", "issubclass", "_reconstruct", "copier", "tuple", "setattr", "_copy_immutable", "deepcopy", "type", "zip", "func", "hasattr", "len", "reductor", "_keep_alive", "_deepcopy_atomic"], "class_names": ["Error"], "class_method_calls": ["types.FunctionType", "y.__dict__", "types.MethodType", "set.copy", "types.BuiltinFunctionType", "PyStringMap.copy", "types.CodeType", "_copy_dispatch.get", "memo.get", "x.__func__", "weakref.ref", "x.items", "list.copy", "dispatch_table.get", "dict.copy", "bytearray.copy", "slotstate.items", "_deepcopy_dispatch.get", "y.__setstate__", "x.__self__", "y.append"]}, "copyreg.py": {"libraries": [], "function_names": ["_reconstructor", "_reduce_ex", "__newobj__", "__newobj_ex__", "add_extension", "remove_extension", "constructor", "pickle", "pickle_complex", "clear_extension_cache", "_slotnames"], "function_calls": ["ValueError", "isinstance", "getattr", "constructor", "pickle", "callable", "int", "getstate", "TypeError", "base", "hasattr"], "class_names": [], "class_method_calls": ["self.__dict__", "_extension_registry.get", "names.append", "object.__init__", "c.__name__", "base.__init__", "cls.__slotnames__", "name.startswith", "self.__getstate__", "c.__dict__", "_extension_cache.clear", "base.__new__", "c.imag", "cls.__dict__", "cls.__name__", "c.real", "base.__flags__", "object.__new__", "self.__class__", "cls.__new__", "name.endswith", "_inverted_registry.get", "cls.__mro__"]}, "crypt.py": {"libraries": ["random.SystemRandom", "sys", "_crypt", "string", "collections.namedtuple"], "function_names": ["_add_method", "crypt", "mksalt", "__repr__"], "function_calls": ["ValueError", "_add_method", "isinstance", "len", "_SystemRandom", "_namedtuple", "ImportError", "_Method", "crypt", "mksalt", "TypeError", "range", "globals"], "class_names": ["_Method"], "class_method_calls": ["self.name", "_crypt.crypt", "_sr.choice", "int.bit_length", "method.ident", "rounds.__class__", "method.total_size", "_string.digits", "methods.append", "method.salt_chars", "_sys.platform", "_string.ascii_letters"]}, "csv.py": {"libraries": ["_csv.list_dialects", "re", "_csv.unregister_dialect", "_csv.QUOTE_NONNUMERIC", "_csv.Error", "_csv.reader", "_csv.Dialect", "_csv.get_dialect", "_csv.QUOTE_ALL", "_csv.QUOTE_MINIMAL", "_csv.register_dialect", "_csv.QUOTE_NONE", "_csv.__doc__", "io.StringIO", "_csv.writer", "_csv.field_size_limit", "_csv.__version__"], "function_names": ["__next__", "writerows", "writerow", "__iter__", "_dict_to_list", "__init__", "_guess_quote_and_delimiter", "fieldnames", "has_header", "_validate", "sniff", "_guess_delimiter", "writeheader"], "function_calls": ["min", "colType", "Error", "repr", "register_dialect", "str", "StringIO", "dict", "reader", "range", "thisType", "ValueError", "list", "next", "zip", "writer", "type", "float", "len", "max", "chr", "_Dialect", "filter", "sum", "map"], "class_names": ["Dialect", "excel", "unix_dialect", "dialect", "DictReader", "excel_tab", "DictWriter", "Sniffer"], "class_method_calls": ["self._dict_to_list", "items.sort", "items.remove", "self.restkey", "charFrequency.get", "self._valid", "self.writerow", "columnTypes.keys", "self.reader", "regexp.findall", "re.escape", "data.split", "self._guess_quote_and_delimiter", "self.writer", "dialect.doublequote", "metaFrequency.get", "rowdict.keys", "delims.keys", "delims.items", "dialect.quotechar", "quotes.get", "self._validate", "extrasaction.lower", "fieldnames.setter", "dialect.skipinitialspace", "self._guess_delimiter", "self.extrasaction", "dq_regexp.search", "delims.get", "self.dialect", "self.preferred", "re.MULTILINE", "self.line_num", "rowdict.get", "charFrequency.keys", "line.count", "self._fieldnames", "self.fieldnames", "self.sniff", "re.compile", "re.DOTALL", "columnTypes.items", "modes.items", "regexp.groupindex", "self.__class__", "dialect.delimiter", "self.restval"]}, "_aix.py": {"libraries": ["re", "sys.maxsize", "ctypes.c_void_p", "os.path", "sys.executable", "subprocess.PIPE", "subprocess.Popen", "subprocess.DEVNULL", "ctypes.sizeof", "os.environ"], "function_names": ["get_libpaths", "get_member", "get_ld_header_info", "get_version", "get_legacy", "get_ld_headers", "_num_version", "get_ld_header", "_last_version", "find_shared", "find_library", "get_one_match", "get_shared"], "function_calls": ["get_member", "get_version", "reversed", "_last_version", "list", "sizeof", "Popen", "int", "get_ld_header", "get_shared", "get_libpaths", "len", "get_ld_header_info", "max", "get_legacy", "get_ld_headers", "filter", "find_shared", "get_one_match"], "class_names": [], "class_method_calls": ["line.index", "shared.append", "libpaths.extend", "libname.split", "info.append", "p.wait", "re.escape", "nums.insert", "p.stdout", "re.search", "path.split", "environ.get", "ld_header.rstrip", "path.join", "parts.pop", "path.exists", "line.split", "versions.append", "line.startswith", "re.match", "ldr_headers.append", "m.group", "libpaths.split"]}, "_endian.py": {"libraries": ["sys", "ctypes.*"], "function_names": ["__setattr__", "_other_endian"], "function_calls": ["isinstance", "issubclass", "super", "RuntimeError", "getattr", "type", "_other_endian", "TypeError", "hasattr"], "class_names": ["LittleEndianStructure", "BigEndianStructure", "_swapped_meta"], "class_method_calls": ["fields.append", "sys.byteorder", "typ._type_", "typ._length_"]}, "dyld.py": {"libraries": ["_ctypes._dyld_shared_cache_contains_path", "itertools.*", "ctypes.macholib.framework.framework_info", "ctypes.macholib.dylib.dylib_info", "os"], "function_names": ["dyld_image_suffix_search", "_dyld_shared_cache_contains_path", "_inject", "dyld_default_search", "dyld_library_path", "dyld_env", "dyld_fallback_framework_path", "dyld_override_search", "dyld_find", "dyld_executable_path_search", "dyld_framework_path", "framework_find", "dyld_fallback_library_path", "dyld_image_suffix", "test_dyld_find"], "function_calls": ["dyld_image_suffix_search", "ValueError", "_dyld_shared_cache_contains_path", "len", "_inject", "dyld_default_search", "dyld_library_path", "dyld_env", "dyld_fallback_framework_path", "dyld_override_search", "framework_info", "dyld_find", "dyld_executable_path_search", "dyld_framework_path", "chain", "dyld_fallback_library_path", "dyld_image_suffix", "test_dyld_find"], "class_names": [], "class_method_calls": ["os.path", "path.endswith", "rval.split", "env.get", "fn.rfind", "name.startswith", "os.environ"]}, "dylib.py": {"libraries": ["re"], "function_names": ["test_dylib_info", "d", "dylib_info"], "function_calls": ["dylib_info", "d", "dict", "test_dylib_info"], "class_names": [], "class_method_calls": ["DYLIB_RE.match", "is_dylib.groupdict", "re.compile"]}, "framework.py": {"libraries": ["re"], "function_names": ["framework_info", "test_framework_info", "d"], "function_calls": ["dict", "framework_info", "test_framework_info", "d"], "class_names": [], "class_method_calls": ["is_framework.groupdict", "STRICT_FRAMEWORK_RE.match", "re.compile"]}, "test_anon.py": {"libraries": ["unittest", "test.support", "ctypes.*"], "function_names": ["test_nested", "test_anon", "test_anon_nonseq", "test_issue31490", "test_anon_nonmember"], "function_calls": ["type", "sizeof"], "class_names": ["ANON_U", "ANON_S", "Y", "ANON", "Name", "AnonTest"], "class_method_calls": ["Y.x", "Y.a", "self.assertEqual", "ANON.a", "ANON.b", "Y._", "Y.y", "unittest.TestCase", "test.support", "Y.b", "unittest.main", "self.assertRaises"]}, "test_array_in_pointer.py": {"libraries": ["unittest", "re", "ctypes.*", "binascii.hexlify"], "function_names": ["test_2", "dump", "test"], "function_calls": ["hexlify", "dump", "memoryview", "POINTER", "Container", "cast", "range"], "class_names": ["Value", "Container", "Test"], "class_method_calls": ["re.sub", "self.assertEqual", "c.pvalues", "unittest.TestCase", "unittest.main"]}, "test_arrays.py": {"libraries": ["unittest", "ctypes.*", "operator.setitem", "ctypes.test.need_symbol", "sys", "operator.delitem", "test.support._2G", "test.support.bigmemtest"], "function_names": ["test_numeric_arrays", "test_empty_element_struct", "test_bad_subclass", "test_subclass", "test_from_address", "test_bad_length", "test_zero_length", "test_step_overflow", "test_large_array", "test_empty_element_array", "test_bpo36504_signed_int_overflow", "test_simple", "test_from_addressW", "test_cache", "test_classcache"], "function_calls": ["c_int", "Y", "create_string_buffer", "int_array", "create_unicode_buffer", "numarray", "range", "X", "list", "sizeof", "ARRAY", "bigmemtest", "setitem", "CharArray", "len", "map", "need_symbol", "addressof", "c"], "class_names": ["my_int", "EmptyStruct", "U", "EmptyArray", "T", "Y", "ArrayTestCase", "W", "V", "X"], "class_method_calls": ["sz.value", "self.assertIs", "X._type_", "Y._type_", "sys.maxsize", "c._type_", "X._length_", "unittest.skipUnless", "self.assertEqual", "self.assertListEqual", "unittest.TestCase", "self.assertIsNot", "Y._length_", "c._length_", "unittest.main", "self.assertRaises"]}, "test_as_parameter.py": {"libraries": ["unittest", "ctypes.*", "ctypes.c_int", "ctypes.test.need_symbol", "_ctypes_test"], "function_names": ["test_callbacks_2", "test_byval", "test_shorts", "test_longlong_callbacks", "test_wchar_parm", "__init__", "getParameter", "callback", "test_pointers", "test_callbacks", "test_struct_return_8H", "test_struct_return_2H", "test_recursive_as_param", "wrap"], "function_calls": ["c_int", "POINT", "CALLBACK_FUNCTYPE", "MyCallback", "byref", "CDLL", "pointer", "A", "property", "int", "type", "f", "CFUNCTYPE", "AnotherCallback", "need_symbol", "S8I", "S2H", "POINTER", "CallBack"], "class_names": ["AsParamPropertyWrapperTestCase", "BasicWrapTestCase", "POINT", "AsParamPropertyWrapper", "S8I", "A", "S2H", "AsParamWrapper", "AsParamWrapperTestCase"], "class_method_calls": ["self.assertIsInstance", "dll.ret_8i_func", "c_int.from_param", "ptout.y", "s8i.h", "self.assertEqual", "s8i.c", "s8i.g", "inp.x", "s8i.d", "self.wrap", "self.assertIs", "s8i.f", "s8i.e", "a._as_parameter_", "ptout.x", "dll._testfunc_callback_i_if", "self.assertRaises", "dll.ret_2h_func", "v.value", "dll._testfunc_callback_q_qf", "s2h.y", "f.restype", "result.contents", "unittest.main", "self._param", "dll._testfunc_p_p", "inp.y", "s8i.a", "s8i.b", "dll._testfunc_byval", "dll._testfunc_i_bhilfd", "self._as_parameter_", "f.argtypes", "args.append", "unittest.TestCase", "s2h.x", "_ctypes_test.__file__"]}, "test_bitfields.py": {"libraries": ["unittest", "ctypes.*", "ctypes.test.need_symbol", "_ctypes_test", "os"], "function_names": ["test_mixed_3", "test_uint32_swap_little_endian", "test_multi_bitfields_size", "test_signed", "fail_fields", "test_longlong", "test_single_bitfield_size", "test_mixed_4", "test_uint32", "test_mixed_1", "test_uint32_swap_big_endian", "test_unsigned", "test_ulonglong", "test_c_wchar", "test_uint64", "get_except", "test_ints", "test_shorts", "test_nonint_types", "test_mixed_2", "test_anon_bitfields"], "function_calls": ["bytearray", "func", "sizeof", "byref", "getattr", "str", "BITS", "CDLL", "need_symbol", "type", "setattr", "alignment", "POINTER", "range", "X"], "class_names": ["C_Test", "Y", "Little", "Big", "BitFieldTest", "BITS", "Dummy", "X"], "class_method_calls": ["func.argtypes", "self.assertEqual", "X.c", "Little.from_buffer", "self.get_except", "X.a1", "X.b", "Big.from_buffer", "self.fail_fields", "x.b", "name.encode", "X.a", "unittest.main", "x.a", "detail.__class__", "x.c", "self.skipTest", "os.name", "unittest.TestCase", "_ctypes_test.__file__"]}, "test_buffers.py": {"libraries": ["unittest", "ctypes.*", "ctypes.test.need_symbol"], "function_names": ["test_unicode_conversion", "test_create_unicode_buffer_non_bmp", "test_buffer_interface", "test_buffer", "test_unicode_buffer"], "function_calls": ["bytearray", "len", "sizeof", "need_symbol", "create_string_buffer", "type", "create_unicode_buffer"], "class_names": ["StringBufferTestCase"], "class_method_calls": ["self.assertIs", "self.assertEqual", "unittest.TestCase", "unittest.main", "self.assertRaises"]}, "test_bytes.py": {"libraries": ["ctypes.pythonapi", "ctypes.c_char_p", "ctypes.py_object", "ctypes.c_uint", "ctypes.c_long", "test.support", "array", "unittest", "copy", "ctypes.c_ssize_t", "test.support.MAX_Py_ssize_t", "os", "functools", "test.string_tests", "_testcapi.getbuffer_with_null_view", "re", "test.support.bigaddrspacetest", "ctypes.c_ulong", "tempfile", "test.list_tests", "ctypes.c_size_t", "ctypes.c_int", "sys", "pickle"], "function_names": ["test_decode", "test_insert", "test_index", "test_find", "delitem", "test_rindex", "test_remove", "__index__", "test_partition_bytearray_doesnt_share_nullstring", "test_setslice_extend", "wrapper", "test_center", "test_iterator_length_hint", "test_clear", "__init__", "test_ord", "test_count", "test_replace", "test_split_unicodewhitespace", "test_setslice", "test_from_bytearray", "test_from_index", "__iter__", "test_delitem", "test_compare_bytes_to_bytearray", "test_bytearray_api", "test_to_str", "test_concat", "test_regexps", "test_repeat_after_setslice", "test_getitem_error", "test_hex_separator_five_bytes", "test_translate", "test_rsplit_unicodewhitespace", "test_bytes_blocking", "test_basic", "test_from_mutating_list", "test_xjust_int_error", "test_strip_bytearray", "test_init_alloc", "test_integer_arguments_out_of_byte_range", "test_pop", "__bytes__", "test_iterator_pickling2", "fixtype", "test_basics", "ptr_formatter", "test_format", "test_doc", "test_rjust", "test_irepeat", "test_repeat_1char", "test_setslice_trap", "test_from_iterable", "test_constructor_value_errors", "test_alloc", "test_resize_forbidden", "test_split_string_error", "test_partition_int_error", "test_split_bytearray", "test_fifo_overrun", "test_reversed", "test_nosort", "test_fromhex", "test_rfind", "delslice", "__new__", "test_constructor_exceptions", "test_hex", "test_getslice", "test_ljust", "test_replace_int_error", "__getitem__", "test_endswith", "test_reverse", "test_literal", "test_compare_to_str", "test_obsolete_write_lock", "test_returns_new_copy", "test_extend", "test_from_ssize", "check_bytes_warnings", "test_irepeat_1char", "by", "bytes_warning", "test_buffer_is_readonly", "test_setitem_error", "test_rmod", "test_encoding", "test_empty_sequence", "test_startswith", "test_split_int_error", "resize", "test_pickle", "test_custom", "test_from_buffer", "test_from_int", "test_copy", "test_return_self", "test_contains", "test_from_tuple", "test_mod", "test_constructor_overflow", "test_from_format", "test_repr_str", "test_append", "test_pickling", "test_partition_string_error", "test_nohash", "test_iconcat", "test_constructor_type_errors", "test_free_after_iterating", "test_find_etc_raise_correct_error_messages", "test_extended_getslice", "test_imod", "test_extended_set_del_slice", "test_from_list", "test_join", "test_partition", "test_del_expand", "test_rsplit_bytearray", "test_copied", "test_none_arguments", "test_rpartition", "test_hex_separator_six_bytes", "test_strip_string_error", "test_init_override", "test_iterator_pickling", "test_strip_int_error", "test_setitem", "g", "test_hex_separator_basics", "test_compare", "test_repeat", "test_maketrans", "marshal"], "function_calls": ["BadInt", "BytesSubclassBlocked", "object", "c_int", "format", "fill_type", "getattr", "BadIterable", "Y", "reversed", "memoryview", "subclass", "dot_join", "BufferBlocked", "ptr_formatter", "id", "py_formatter", "isinstance", "c_long", "issubclass", "by", "super", "bytes_warning", "iter", "str", "B", "tuple", "A", "BytesSubclass", "PyBytes_FromFormat", "open", "copy_method", "range", "X", "list", "Indexable", "method", "c_ulong", "resize", "C", "OtherBytesSubclass", "IntBlocked", "c_size_t", "c_uint", "int", "next", "type", "ctypes_type", "func", "float", "IterationBlocked", "eval", "f", "c_char_p", "bytearray", "len", "g", "chr", "bytes", "ord", "map", "S"], "class_names": ["ByteArrayAsStringTest", "BadInt", "BytesSubclassBlocked", "BadIterable", "Y", "subclass", "BufferBlocked", "B1", "ByteArraySubclass", "ByteArraySubclassTest", "BytesAsStringTest", "BytearrayPEP3137Test", "B", "A", "BytesSubclass", "BaseBytesTest", "X", "Indexable", "B2", "OtherBytesSubclass", "C", "IntBlocked", "SubclassTest", "BytesTest", "IterationBlocked", "ByteArrayTest", "AssortedBytesTest", "FixedStringTest", "BytesSubclassTest", "S"], "class_method_calls": ["a.y", "tempfile.mktemp", "unittest.skipUnless", "self.assertEqual", "os.O_RDONLY", "self.assertNotEqual", "self.assertGreaterEqual", "self.assertIs", "b.count", "c.remove", "obj.encode", "sys.getsizeof", "s1.join", "self.marshal", "self.assertRaises", "os.open", "b.endswith", "pickle.HIGHEST_PROTOCOL", "b.partition", "test.list_tests", "b.rjust", "b.foo", "data.reverse", "self.assertTrue", "six_bytes.hex", "B1.fromhex", "self.assertIsInstance", "self.type2test", "sep.join", "b.rpartition", "b.__init__", "re.escape", "functools.wraps", "b.insert", "cm.exception", "b.append", "_testcapi.ULONG_MAX", "b.__class__", "b.extend", "self.assertNotIn", "self.basetype", "bb.append", "a.append", "seq.append", "b.x", "copy.deepcopy", "pickle.loads", "self.assertIsNot", "array.array", "sys.maxsize", "b.center", "bytearray.__doc__", "unittest.TestCase", "self.assertFalse", "copy.copy", "b.rfind", "PyBytes_FromFormat.argtypes", "sys.flags", "b.translate", "self.value", "test.support", "self.assertLessEqual", "b.split", "me.foo", "f.write", "value.hex", "_testcapi.PY_SSIZE_T_MIN", "b.decode", "_testcapi.LONG_MIN", "ctypes.sizeof", "b.index", "test.string_tests", "_testcapi.LONG_MAX", "bytearray.__init__", "sample.encode", "b.pop", "b.remove", "_testcapi.INT_MAX", "self.assertGreater", "unittest.main", "input.reverse", "_testcapi.PY_SSIZE_T_MAX", "B2.fromhex", "b.clear", "re.findall", "a.x", "b.reverse", "self.assertIsNotNone", "b.replace", "_testcapi.INT_MIN", "PyBytes_FromFormat.restype", "f.readinto", "self.assertRaisesRegex", "self.assertIn", "b.rsplit", "self.fail", "b.copy", "a.clear", "b.find", "os.remove", "b.__alloc__", "b.ljust", "f.read", "b.startswith", "five_bytes.hex", "a.extend", "b.y", "bytes.__doc__", "x.translate", "pickle.dumps", "os.name", "pythonapi.PyBytes_FromFormat", "ba.clear", "b.rindex", "three_bytes.hex"]}, "test_byteswap.py": {"libraries": ["unittest", "ctypes.*", "sys", "struct", "ctypes", "math", "binascii.hexlify"], "function_names": ["test_struct_fields_2", "test_endian_other", "test_endian_int", "test_endian_longlong", "test_X", "bin", "test_struct_struct", "test_endian_double", "test_endian_short", "test_unaligned_nonnative_struct_fields", "test_unaligned_native_struct_fields", "test_struct_fields_1", "test_slots", "test_endian_float"], "function_calls": ["len", "hexlify", "sizeof", "c_double", "dump", "bin", "memoryview", "LowPoint", "c_float", "S", "setattr", "POINTER", "BITS", "BigPoint", "cast", "range", "print"], "class_names": ["T", "Test", "TestStructure", "NestedStructure", "LowPoint", "BigPoint", "S"], "class_method_calls": ["little.x", "c_int.__ctype_le__", "c_double.__ctype_le__", "s.value", "s1.b", "c_short.__ctype_be__", "self.assertAlmostEqual", "c_float.__ctype_le__", "sys.byteorder", "self.assertEqual", "c_byte.__ctype_be__", "big.y", "c_byte.__ctype_le__", "c_ushort.__ctype_le__", "self.assertIs", "c_char.__ctype_le__", "big.z", "s1.h", "c_ubyte.__ctype_be__", "s1.d", "c_longlong.__ctype_be__", "c_float.__ctype_be__", "c_ushort.__ctype_be__", "little.y", "big.x", "self.assertRaises", "c_longlong.__ctype_le__", "s1.i", "little.z", "struct.pack", "unittest.skip", "c_ulonglong.__ctype_be__", "s.point", "unittest.main", "c_uint.__ctype_le__", "c_short.__ctype_le__", "math.pi", "sys.stderr", "c_ubyte.__ctype_le__", "c_uint.__ctype_be__", "c_char.__ctype_be__", "c_double.__ctype_be__", "ctypes._pointer_type_cache", "c_int.__ctype_be__", "c_ulonglong.__ctype_le__", "_fields_.append", "unittest.TestCase", "T._fields_"]}, "test_callbacks.py": {"libraries": ["unittest", "ctypes.wintypes.LPARAM", "ctypes.*", "ctypes.wintypes.BOOL", "gc", "ctypes.test.need_symbol", "ctypes.util.find_library", "sys.getrefcount", "math", "_ctypes_test", "test.support", "ctypes.wintypes.HWND", "functools"], "function_names": ["test_ulong", "test_char_p", "test_longdouble", "test_callback_large_struct", "test_double", "test_issue_7959", "test_callback_register_double", "test_issue_8959_a", "test_longlong", "test_callback_too_many_args", "__init__", "callback", "test_issue12483", "test_float", "__del__", "test_byte", "test_integrate", "check_type", "test_ulonglong", "test_convert_result_error", "func", "test_int", "test_char", "test_callback_register_int", "test_ushort", "test_unsupported_restype_2", "test_ubyte", "test_long", "test_unsupported_restype_1", "cmp_func", "test_uint", "test_issue_8959_b", "test_pyobject", "test_short", "EnumWindowsCallbackFunc"], "function_calls": ["object", "abs", "cb", "WINFUNCTYPE", "grc", "isinstance", "CALLBACK", "CDLL", "Check", "callback", "Nasty", "find_library", "range", "proto", "X", "ctypes_func", "sizeof", "PROTO", "func", "integrate", "len", "CFUNCTYPE", "need_symbol", "POINTER"], "class_names": ["StdcallCallbacks", "Callbacks", "SampleCallbacksTestCase", "Nasty", "Check", "X"], "class_method_calls": ["windll.user32", "func.restype", "self.assertIsInstance", "self.assertLess", "libc.qsort", "self.assertAlmostEqual", "func.argtypes", "s.second", "self.assertEqual", "check.third", "self.assertIs", "self.v", "cm.unraisable", "integrate.restype", "check.first", "self.functype", "self.func", "functools.partial", "self.got_args", "self.assertRaises", "dll._testfunc_cbk_reg_double", "support.catch_unraisable_exception", "self.callback", "self.check_type", "s.first", "unittest.skip", "gc.get_objects", "math.e", "unittest.main", "integrate.argtypes", "dll._testfunc_cbk_large_struct", "s.third", "check.second", "dll._testfunc_cbk_reg_int", "self.skipTest", "gc.collect", "unittest.TestCase", "_ctypes_test.__file__", "dll.integrate"]}, "test_cast.py": {"libraries": ["unittest", "sys", "ctypes.*", "ctypes.test.need_symbol"], "function_names": ["test_bad_type_arg", "test_wchar_p", "test_char_p", "test_other", "test_array2pointer", "test_p2a_objects", "test_address2pointer"], "function_calls": ["c_char_p", "c_int", "sizeof", "c_void_p", "c_wchar_p", "need_symbol", "id", "addressof", "POINTER", "array_type", "cast", "range"], "class_names": ["Test", "MyUnion", "Struct"], "class_method_calls": ["self.assertIs", "array._objects", "self.assertEqual", "sys.byteorder", "p._objects", "unittest.TestCase", "unittest.main", "self.assertRaises"]}, "test_cfuncs.py": {"libraries": ["unittest", "ctypes.*", "ctypes.test.need_symbol", "_ctypes_test"], "function_names": ["__getattr__", "test_ulong", "stdcall_dll", "test_longdouble", "test_uint_plus", "test_double", "test_ushort_plus", "test_longlong", "test_ulonglong_plus", "test_int_plus", "test_short_plus", "test_ubyte_plus", "test_float", "test_byte", "test_long_plus", "test_ulonglong", "process_result", "test_int", "test_void", "test_ushort", "test_longdouble_plus", "U", "test_ubyte", "test_long", "test_ulong_plus", "test_longlong_plus", "test_float_plus", "test_double_plus", "test_callwithresult", "test_uint", "test_byte_plus", "test_short", "S"], "function_calls": ["AttributeError", "stdcall_dll", "CDLL", "need_symbol", "setattr"], "class_names": ["CFunctions", "stdcall_dll", "stdcallCFunctions"], "class_method_calls": ["self.S", "unittest.main", "self._dll", "c_ulonglong.in_dll", "self.assertEqual", "self._FuncPtr", "self.U", "unittest.TestCase", "_ctypes_test.__file__", "c_longlong.in_dll"]}, "test_checkretval.py": {"libraries": ["unittest", "ctypes.*", "ctypes.test.need_symbol", "_ctypes_test"], "function_names": ["test_oledll", "_check_retval_", "test_checkretval"], "function_calls": ["staticmethod", "str", "CDLL", "need_symbol"], "class_names": ["Test", "CHECKED"], "class_method_calls": ["value.value", "oledll.oleaut32", "unittest.main", "self.assertEqual", "unittest.TestCase", "_ctypes_test.__file__", "dll._testfunc_p_p", "self.assertRaises"]}, "test_delattr.py": {"libraries": ["unittest", "ctypes.*"], "function_names": ["test_simple", "test_chararray", "test_struct"], "function_calls": ["c_int", "X"], "class_names": ["TestCase", "X"], "class_method_calls": ["unittest.TestCase", "unittest.main", "self.assertRaises"]}, "test_errno.py": {"libraries": ["unittest", "errno"], "function_names": ["test_attributes_in_errorcode", "test_using_errorcode", "test_for_improper_attributes"], "function_calls": ["getattr", "frozenset", "hasattr"], "class_names": ["ErrnoAttributeTests", "ErrorcodeTests"], "class_method_calls": ["self.assertIn", "errno.__dict__", "self.assertTrue", "errno.errorcode", "attribute.isupper", "unittest.TestCase", "unittest.main"]}, "test_find.py": {"libraries": ["unittest", "ctypes.*", "os.path", "sys", "unittest.mock", "ctypes.util.find_library", "tempfile", "subprocess", "test.support"], "function_names": ["test_find_on_libpath", "test_gle", "setUpClass", "test_shell_injection", "test_find_library_with_gcc", "test_glu", "tearDownClass", "test_gl", "test_find_library_with_ld"], "function_calls": ["open", "find_library", "CDLL", "print"], "class_names": ["Test_OpenGL_libs", "FindLibraryLinux"], "class_method_calls": ["sys.platform", "p.communicate", "cls.gl", "unittest.skipUnless", "unittest.mock", "self.assertEqual", "self.assertNotEqual", "test.support", "cls.glu", "unittest.SkipTest", "tempfile.TemporaryDirectory", "subprocess.Popen", "env.set", "self.gl", "subprocess.PIPE", "self.glu", "self.assertIsNone", "unittest.main", "subprocess.check_output", "cls.gle", "os.path", "self.skipTest", "subprocess.DEVNULL", "self.assertTrue", "unittest.TestCase", "self.assertFalse", "self.gle"]}, "test_frombuffer.py": {"libraries": ["unittest", "ctypes._Pointer", "ctypes.*", "gc", "ctypes._CFuncPtr", "ctypes._SimpleCData", "_testbuffer", "array"], "function_names": ["test_from_buffer", "__init__", "test_from_buffer_copy_with_offset", "test_abstract", "test_from_buffer_with_offset", "test_fortran_contiguous", "test_from_buffer_memoryview", "test_from_buffer_copy"], "function_calls": ["list", "bytearray", "isinstance", "sizeof", "str", "memoryview", "range"], "class_names": ["Test", "X"], "class_method_calls": ["_CFuncPtr.from_buffer", "_testbuffer.ndarray", "Structure.from_buffer", "self.assertEqual", "self._init_called", "X.from_buffer_copy", "_CFuncPtr.from_buffer_copy", "_Pointer.from_buffer_copy", "self.assertRaisesRegex", "_SimpleCData.from_buffer_copy", "self.assertIn", "obj.obj", "Union.from_buffer", "_Pointer.from_buffer", "Structure.from_buffer_copy", "_testbuffer.ND_FORTRAN", "a.append", "c_int.from_buffer", "_SimpleCData.from_buffer", "array.f_contiguous", "self.assertRaises", "x._objects", "Union.from_buffer_copy", "c_int.from_buffer_copy", "array.c_contiguous", "_testbuffer.ND_WRITABLE", "y.c_int", "Array.from_buffer_copy", "a.pop", "a.tolist", "Array.from_buffer", "c_char.from_buffer", "unittest.main", "array.array", "y.init_called", "self.skipTest", "self.assertTrue", "gc.collect", "unittest.TestCase", "self.assertFalse", "X.from_buffer"]}, "test_funcptr.py": {"libraries": ["unittest", "ctypes.*", "ctypes._CFuncPtr", "_ctypes_test"], "function_names": ["test_structures", "NoNullHandle", "test_basic", "test_abstract", "c_string", "func", "wndproc", "test_first", "test_dllfunctions"], "function_calls": ["len", "WINFUNCTYPE", "sizeof", "CFUNCTYPE", "s", "WinError", "WNDCLASS", "strchr", "CDLL", "strtok", "WNDPROC", "c_string", "StdCallback", "c", "f", "CdeclCallback", "X"], "class_names": ["CFuncPtrTestCase", "WNDCLASS"], "class_method_calls": ["self.assertIs", "wndclass.lpfnWndProc", "lib.my_strtok", "unittest.main", "strtok.restype", "x.argtypes", "strchr.restype", "strchr.argtypes", "lib.my_strchr", "self.assertEqual", "x.restype", "unittest.TestCase", "_ctypes_test.__file__", "self.assertRaises"]}, "test_functions.py": {"libraries": ["unittest", "tkinter.ttk", "test.support.run_unittest"], "function_names": ["test_nosplit", "test_format_elemcreate", "test_it", "test_list_from_statespec", "test_format_layoutlist", "sample_expected", "test_tclobj_to_py", "test_multivalues", "test_convert_stringval", "__init__", "check_against", "test_format_mapdict", "test_list_from_layouttuple", "__str__", "sample", "splitlist", "test_script_from_settings", "func", "test_format_optdict", "wantobjects", "test_unicode", "test_val_or_dict"], "function_calls": ["isinstance", "MockStateSpec", "len", "list", "sample", "MockTclObj", "sample_expected", "str", "MockTkApp", "set", "tuple", "check_against", "run_unittest", "spaces", "test_it", "range"], "class_names": ["MockStateSpec", "TclObjsToPyTest", "MockTclObj", "InternalFunctionsTest", "MockTkApp"], "class_method_calls": ["self.assertEqual", "opts.keys", "tk.call", "ttk._list_from_layouttuple", "ttk._format_layoutlist", "ttk._val_or_dict", "self.fail", "ttk.tclobjs_to_py", "opts.copy", "self.assertRaises", "ttk._tclobj_to_py", "ttk._script_from_settings", "ttk._list_from_statespec", "self.val", "ttk._format_optdict", "result.pop", "ttk._format_mapdict", "ttk._format_elemcreate", "arg.split", "self.assertTrue", "unittest.TestCase", "self.assertFalse", "ttk._convert_stringval"]}, "test_incomplete.py": {"libraries": ["unittest", "ctypes.*", "ctypes._pointer_type_cache"], "function_names": ["test_incomplete_example"], "function_calls": ["cell", "pointer", "POINTER", "SetPointerType", "range"], "class_names": ["MyTestCase", "cell"], "class_method_calls": ["c1.next", "result.append", "p.name", "c2.next", "self.assertEqual", "p.next", "unittest.TestCase", "c2.name", "unittest.main", "c1.name"]}, "test_init.py": {"libraries": ["unittest", "ctypes.*"], "function_names": ["test_get", "__init__", "__new__"], "function_calls": ["Y", "super", "X"], "class_names": ["InitTest", "Y", "X"], "class_method_calls": ["x.b", "x.a", "x.new_was_called", "y.x", "self.assertEqual", "result.new_was_called", "self.b", "unittest.TestCase", "unittest.main", "self.a"]}, "test_internals.py": {"libraries": ["unittest", "sys.getrefcount", "ctypes.*"], "function_names": ["assertSame", "test_ints", "test_embedded_structs", "test_c_char_p", "test_xxx", "test_simple_struct", "test_ptr_struct"], "function_calls": ["grc", "c_char_p", "c_int", "Y", "A", "POINTER", "id", "X"], "class_names": ["Y", "ObjectsTestCase", "X"], "class_method_calls": ["y._objects", "x1.a", "x._objects", "x.b", "x.a", "ci._objects", "x2.b", "y.x", "x.data", "cs._objects", "self.assertEqual", "self.assertSame", "unittest.TestCase", "a._objects", "y.y", "unittest.main"]}, "test_keeprefs.py": {"libraries": ["unittest", "ctypes.*", "gc", "ctypes._pointer_type_cache", "sys.getrefcount"], "function_names": ["test_cint_array", "test", "test_cint_struct", "test_cint", "test_struct_struct", "test_p_cint", "test_X", "test_ccharp_struct", "test_ccharp"], "function_calls": ["c_char_p", "grc", "c_int", "INTARR", "POINT", "pointer", "RECT", "print", "POINTER", "range", "X"], "class_names": ["PointerToStructure", "X", "POINT", "PointerTestCase", "ArrayTestCase", "RECT", "StructureTestCase", "DeletePointerTestCase", "SimpleTestCase"], "class_method_calls": ["r.lr", "r.b", "x.value", "x.b", "x._objects", "x.a", "unittest.skip", "ia._objects", "x.x", "r.a", "self.assertEqual", "x.p", "gc.collect", "unittest.TestCase", "unittest.main", "r._objects", "r.ul"]}, "test_libc.py": {"libraries": ["unittest", "ctypes.*", "math", "_ctypes_test"], "function_names": ["three_way_cmp", "sort", "test_qsort", "test_sqrt"], "function_calls": ["len", "sizeof", "CFUNCTYPE", "CDLL", "create_string_buffer", "three_way_cmp", "POINTER", "comparefunc"], "class_names": ["LibTest"], "class_method_calls": ["chars.raw", "unittest.main", "self.assertEqual", "lib.my_qsort", "unittest.TestCase", "math.sqrt", "_ctypes_test.__file__", "lib.my_sqrt"]}, "test_loading.py": {"libraries": ["unittest", "ctypes.*", "_ctypes.call_function", "shutil", "sys", "ctypes.util.find_library", "subprocess", "_ctypes.LoadLibrary", "_ctypes_test", "test.support", "os", "_ctypes.FreeLibrary", "sysconfig"], "function_names": ["test_load_library", "setUpModule", "should_pass", "test_find", "test_load_dll_with_flags", "test_1703286_A", "test_load_ordinal_functions", "test_load", "test_1703286_B", "test_load_version", "should_fail"], "function_calls": ["call_function", "should_fail", "hex", "CDLL", "FreeLibrary", "WinDLL", "should_pass", "addressof", "LoadLibrary", "find_library", "print"], "class_names": ["LoaderTest"], "class_method_calls": ["windll.advapi32", "sys.platform", "c_void_p.from_address", "sys.executable", "unittest.skipUnless", "windll.LoadLibrary", "self.assertEqual", "self.unknowndll", "dll.GetString", "test.support", "windll.kernel32", "subprocess.STDOUT", "self.subTest", "self.assertRaises", "dll.__getitem__", "src.lower", "advapi32._handle", "_sqlite3.__file__", "unittest.main", "subprocess.check_output", "shutil.copy", "advapi32.CloseEventLog", "os.path", "self.skipTest", "os.name", "self.assertTrue", "cdll.LoadLibrary", "unittest.TestCase", "subprocess.CalledProcessError", "_ctypes_test.__file__"]}, "test_macholib.py": {"libraries": ["sys", "os", "unittest", "ctypes.macholib.dyld.dyld_find"], "function_names": ["test_find", "find_lib"], "function_calls": ["ValueError", "dyld_find", "find_lib"], "class_names": ["MachOTest"], "class_method_calls": ["self.assertRegex", "sys.platform", "os.path", "self.assertIn", "unittest.skipUnless", "unittest.TestCase", "unittest.main"]}, "test_memfunctions.py": {"libraries": ["unittest", "ctypes.*", "ctypes.test.need_symbol", "sys", "test.support"], "function_names": ["test_memmove", "test_cast", "test_overflow", "test_string_at", "test_wstring_at", "test_memset"], "function_calls": ["len", "sizeof", "memset", "cast", "need_symbol", "create_string_buffer", "memmove", "POINTER", "string_at", "create_unicode_buffer", "map", "ord", "wstring_at"], "class_names": ["MemFunctionsTest"], "class_method_calls": ["unittest.skip", "sys.maxint", "self.assertEqual", "self.assertTrue", "sys.getrefcount", "support.refcount_test", "a.value", "unittest.TestCase", "unittest.main", "self.assertRaises"]}, "test_numbers.py": {"libraries": ["unittest", "ctypes.c_char", "ctypes.*", "operator.truth", "ctypes.c_int", "struct", "ctypes.c_bool", "sys", "ctypes._SimpleCData", "time.perf_counter", "array.array"], "function_names": ["test_sizes", "test_signed_values", "test_float_from_address", "test_default_init", "test_init", "__index__", "test_bool_from_address", "test_float_overflow", "valid_ranges", "__int__", "test_int_from_address", "test_floats", "test_typeerror", "test_valid_ranges", "test_byref", "check_perf", "test_perf", "run_test", "test_alignments", "test_bool_values", "test_char_from_address", "__float__", "test_from_param", "test_integers", "test_unsigned_values"], "function_calls": ["c_int", "min", "alignment", "IntLike", "array", "c_long", "byref", "valid_ranges", "clock", "truth", "range", "sizeof", "int", "type", "zip", "check_perf", "func", "hasattr", "run_test", "max", "IndexLike", "t", "ord", "FloatLike", "print"], "class_names": ["NumberTestCase", "c_int_S", "IndexLike", "IntLike", "FloatLike"], "class_method_calls": ["result.append", "t.from_address", "signed_types.append", "t.__ctype_le__", "self.assertEqual", "struct.calcsize", "c_bool._type_", "self.assertIs", "sys.float_info", "bool_types.append", "self.assertRaises", "c_char.from_address", "self.assertWarns", "v.value", "t.__ctype_be__", "a.buffer_info", "unittest.skip", "struct.unpack", "t._type_", "unittest.main", "unsigned_types.append", "struct.error", "t.from_param", "unittest.TestCase"]}, "test_objects.py": {"libraries": ["unittest", "doctest", "ctypes.test.test_objects"], "function_names": ["test"], "function_calls": [], "class_names": ["TestCase"], "class_method_calls": ["unittest.TestCase", "doctest.testmod", "self.assertFalse", "ctypes.test"]}, "test_parameters.py": {"libraries": ["ctypes.c_char_p", "ctypes.byref", "ctypes.c_uint", "ctypes.c_double", "ctypes._SimpleCData", "_ctypes_test", "ctypes.c_long", "test.support", "ctypes.c_ubyte", "ctypes._CFuncPtr", "unittest", "ctypes.Structure", "ctypes.c_void_p", "ctypes.c_longlong", "ctypes.c_short", "ctypes.c_float", "ctypes.c_bool", "ctypes.c_char", "ctypes._Pointer", "ctypes.c_wchar_p", "_ctypes.set_conversion_mode", "ctypes.test.need_symbol", "ctypes.c_ulong", "ctypes.ArgumentError", "ctypes.Union", "ctypes.c_wchar", "ctypes.c_byte", "ctypes.c_ulonglong", "ctypes.c_int", "ctypes.CDLL", "ctypes.POINTER", "ctypes.c_longdouble", "ctypes", "ctypes.c_ushort", "ctypes.pointer", "ctypes.Array"], "function_names": ["test_subclasses", "test_byref_pointer", "__dict__", "test_byref_pointerpointer", "setUp", "from_param", "test_parameter_repr", "test_noctypes_argtype", "test_int_pointers", "test_cstrings", "test_abstract", "test_cw_strings", "tearDown", "test_array_pointers", "test_issue31311", "test_subclasses_c_wchar_p"], "function_calls": ["object", "c_int", "c_wchar_p", "classmethod", "repr", "Adapter", "c_long", "byref", "pointer", "CDLL", "range", "ValueError", "c_uint", "type", "func", "c_char_p", "set_conversion_mode", "WorseStruct", "len", "c_short", "INTARRAY", "BadStruct", "need_symbol", "POINTER", "c_void_p", "LPINT"], "class_names": ["CCHARP", "WorseStruct", "BadStruct", "CWCHARP", "SimpleTypesTestCase", "CVOIDP", "Adapter"], "class_method_calls": ["func.restype", "c_int.from_param", "c_ulong.from_param", "_SimpleCData.from_param", "c_longdouble.from_param", "func.argtypes", "self.assertEqual", "CCHARP.from_param", "_Pointer.from_param", "c_float.from_param", "test.support", "Union.from_param", "self.assertIs", "c_uint.from_param", "self.prev_conv_mode", "c_byte.from_param", "c_bool.from_param", "self.assertRaises", "c_ulonglong.from_param", "Array.from_param", "c_char.from_param", "self.assertRegex", "c_char_p.from_param", "LPLPINT.from_param", "c_short.from_param", "c_void_p.from_param", "c_ubyte.from_param", "_CFuncPtr.from_param", "c_ushort.from_param", "unittest.main", "CVOIDP.from_param", "c_long.from_param", "CWCHARP.from_param", "_ctypes_test.__file__", "c_longlong.from_param", "Structure.from_param", "x.contents", "c_wchar_p.from_param", "unittest.TestCase", "c_wchar.from_param", "LPINT.from_param", "c_double.from_param"]}, "test_pep3118.py": {"libraries": ["unittest", "sys", "re", "ctypes.*"], "function_names": ["normalize", "test_endian_types", "test_native_types"], "function_calls": ["len", "sizeof", "CFUNCTYPE", "tp", "memoryview", "normalize", "POINTER", "print"], "class_names": ["EmptyStruct", "BEPoint", "aUnion", "PackedPoint", "Point2", "Test", "Point", "StructWithArrays", "Incomplete", "LEPoint", "Complete"], "class_method_calls": ["re.sub", "v.itemsize", "v.readonly", "v.shape", "v.format", "Point2._fields_", "sys.byteorder", "self.assertEqual", "Complete._fields_", "v.tobytes", "unittest.TestCase", "self.assertFalse", "format.replace", "unittest.main"]}, "test_pickling.py": {"libraries": ["unittest", "pickle", "ctypes.*", "_ctypes_test"], "function_names": ["test_wchar", "test_unpickable", "test_struct", "__init__", "dumps", "loads", "test_simple"], "function_calls": ["c_char_p", "prototype", "c_int", "CFUNCTYPE", "c_wchar", "c_double", "c_wchar_p", "Y", "CDLL", "globals", "pointer", "memoryview", "type", "c_char", "c_void_p", "range", "X"], "class_names": ["PickleTest", "Y", "X"], "class_method_calls": ["self.assertEqual", "y.__dict__", "self.dumps", "self.loads", "self.assertRaises", "self.x", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "x.__dict__", "unittest.main", "dll._testfunc_p_p", "x.a", "pickle.dumps", "src.__dict__", "X.init_called", "self.proto", "unittest.TestCase", "_ctypes_test.__file__", "dst.__dict__"]}, "test_pointers.py": {"libraries": ["unittest", "ctypes._Pointer", "ctypes.*", "ctypes._pointer_type_cache", "sys", "operator.delitem", "_ctypes_test", "array.array"], "function_names": ["test_pointer_type_str_name", "func", "test_basic", "test_pass_pointers", "test_change_pointers", "test_from_address", "test_pointers_bool", "test_c_void_p", "test_callbacks_with_pointers", "test_other", "test_abstract", "test_basics", "test_charpp", "test_pointer_crash", "test_bug_1467852", "test_pointer_type_name"], "function_calls": ["object", "c_int", "id", "array", "Table", "WINFUNCTYPE", "byref", "doit", "CDLL", "pointer", "range", "sizeof", "c_ulong", "ct", "type", "zip", "func", "bool", "CFUNCTYPE", "PROTOTYPE", "POINTER", "c_void_p"], "class_names": ["PointersTestCase", "A", "Table"], "class_method_calls": ["func.restype", "dummy.append", "self.result", "sys.platform", "p.contents", "dll._testfunc_callback_with_pointer", "func.argtypes", "self.assertEqual", "_Pointer.set_type", "self.assertIs", "res.contents", "c_int.from_address", "dll._testfunc_c_p_p", "self.assertRaises", "pt.contents", "a.buffer_info", "unittest.main", "dll._testfunc_p_p", "x.value", "i.value", "self.assertTrue", "unittest.TestCase", "_ctypes_test.__file__"]}, "test_prototypes.py": {"libraries": ["unittest", "ctypes.*", "ctypes.test.need_symbol", "struct", "_ctypes_test"], "function_names": ["test_instance", "c_wbuffer", "test_int_pointer_arg", "test_c_char_p_arg", "test_POINTER_c_char_arg", "test", "func", "setUp", "test_paramflags", "test_POINTER_c_wchar_arg", "test_c_void_p_arg", "test_c_void_p_arg_with_c_wchar_p", "test_c_wchar_p_arg", "positive_address"], "function_calls": ["c_int", "c_wchar", "c_wchar_p", "byref", "str", "CDLL", "pointer", "X", "prototype", "c_wbuffer", "sizeof", "c_char", "func", "c_char_p", "len", "CFUNCTYPE", "c_buffer", "need_symbol", "addressof", "POINTER", "positive_address", "ord"], "class_names": ["WCharPointersTestCase", "ArrayTest", "CharPointersTestCase", "X"], "class_method_calls": ["func.restype", "unittest.main", "self.fail", "testdll._testfunc_ai8", "func.argtypes", "self.assertEqual", "struct.calcsize", "c_wchar_p.from_param", "unittest.TestCase", "_ctypes_test.__file__", "testdll._testfunc_p_p", "self.assertRaises"]}, "test_python_api.py": {"libraries": ["unittest", "ctypes.*", "_ctypes.PyObj_FromPtr", "sys", "sys.getrefcount", "test.support"], "function_names": ["test_PyObj_FromPtr", "test_PyString_FromString", "test_pyobject_repr", "test_PyLong_Long", "test_PyBytes_FromStringAndSize", "test_PyOS_snprintf"], "function_calls": ["grc", "sizeof", "c_buffer", "PyBytes_FromStringAndSize", "PyObj_FromPtr", "py_object", "POINTER", "id", "PyOS_snprintf", "repr"], "class_names": ["PythonAPITestCase"], "class_method_calls": ["self.assertIs", "buf.value", "pythonapi.PyOS_snprintf", "pythonapi.PyBytes_FromString", "pythonapi.PyLong_FromLong", "PyBytes_FromStringAndSize.restype", "sys.version_info", "self.assertEqual", "pythonapi.PyBytes_FromStringAndSize", "PyOS_snprintf.argtypes", "support.refcount_test", "PyBytes_FromStringAndSize.argtypes", "pythonapi.PyLong_AsLong", "unittest.TestCase", "unittest.main", "self.assertRaises"]}, "test_random_things.py": {"libraries": ["unittest", "ctypes.*", "contextlib", "_ctypes.call_function", "sys", "test.support"], "function_names": ["test", "expect_unraisable", "test_TypeErrorDivisionError", "test_ValueError", "callback_func", "test_FloatDivisionError", "test_IntegerDivisionError"], "function_calls": ["ValueError", "CFUNCTYPE", "call_function", "str", "cb"], "class_names": ["call_function_TestCase", "CallbackTracbackTestCase"], "class_method_calls": ["self.expect_unraisable", "self.assertIsInstance", "self.assertIs", "support.catch_unraisable_exception", "cm.unraisable", "sys.platform", "unittest.skipUnless", "self.assertEqual", "contextlib.contextmanager", "windll.kernel32", "unittest.TestCase", "unittest.main"]}, "test_refcounts.py": {"libraries": ["unittest", "gc", "sys", "ctypes", "sys.getrefcount", "_ctypes_test", "test.support"], "function_names": ["test_1", "test_callback", "callback", "func", "test_refcount"], "function_calls": ["grc", "OtherCallback", "MyCallback", "f", "proto", "X"], "class_names": ["RefcountTestCase", "X", "AnotherLeak"], "class_method_calls": ["self.assertEqual", "self.assertGreaterEqual", "ctypes.Structure", "ctypes.CFUNCTYPE", "dll._testfunc_callback_i_if", "f.restype", "f.cycle", "sys.getrefcount", "self.assertGreater", "unittest.main", "ctypes.c_ulonglong", "x.a", "ctypes.c_int", "ctypes.CDLL", "f.argtypes", "support.refcount_test", "gc.collect", "unittest.TestCase", "_ctypes_test.__file__"]}, "test_repr.py": {"libraries": ["unittest", "ctypes.*"], "function_names": ["test_numbers", "test_char"], "function_calls": ["typ", "c_char", "repr", "base", "X"], "class_names": ["ReprTest", "X"], "class_method_calls": ["subclasses.append", "typ.__bases__", "base.__name__", "self.assertEqual", "self.assertTrue", "unittest.TestCase", "unittest.main"]}, "test_returnfuncptrs.py": {"libraries": ["unittest", "ctypes.*", "_ctypes_test"], "function_names": ["test_without_prototype", "test_from_dll_refcount", "test_with_prototype", "test_from_dll", "__getitem__"], "function_calls": ["get_strchr", "CFUNCTYPE", "BadSequence", "strchr", "CDLL"], "class_names": ["BadSequence", "ReturnFuncPtrTestCase"], "class_method_calls": ["dll.get_strchr", "unittest.main", "get_strchr.restype", "self.assertEqual", "self.assertTrue", "unittest.TestCase", "_ctypes_test.__file__", "self.assertRaises"]}, "test_simplesubclasses.py": {"libraries": ["unittest", "ctypes.*"], "function_names": ["func", "test_int_callback", "test_int_struct", "test_compare", "__eq__", "test_ignore_retval"], "function_calls": ["CFUNCTYPE", "MyInt", "cb", "type", "proto", "X"], "class_names": ["Test", "MyInt", "X"], "class_method_calls": ["other.value", "self.value", "self.assertEqual", "self.assertNotEqual", "args.append", "unittest.TestCase", "unittest.main", "s.x"]}, "test_sizes.py": {"libraries": ["unittest", "ctypes.*"], "function_names": ["test_8", "test_64", "test_16", "test_ssize_t", "test_size_t", "test_32"], "function_calls": ["sizeof"], "class_names": ["SizesTestCase"], "class_method_calls": ["unittest.TestCase", "self.assertEqual", "unittest.main"]}, "test_slicing.py": {"libraries": ["unittest", "ctypes.*", "operator", "operator.setitem", "ctypes.test.need_symbol", "_ctypes_test"], "function_names": ["test_wchar_ptr", "test_setslice_cint", "test_char_array", "errcheck", "test_getslice_cint", "test_char_ptr_with_free", "test_char_ptr"], "function_calls": ["list", "len", "sizeof", "CDLL", "need_symbol", "slice", "POINTER", "ord", "range"], "class_names": ["SlicesTestCase", "allocated_c_char_p"], "class_method_calls": ["dll.my_strdup", "unittest.main", "dll.my_free", "operator.setitem", "dll.my_wcsdup", "result.value", "self.skipTest", "self.assertEqual", "operator.getitem", "unittest.TestCase", "_ctypes_test.__file__", "self.assertRaises"]}, "test_stringptr.py": {"libraries": ["unittest", "ctypes.*", "sys.getrefcount", "_ctypes_test", "test.support"], "function_names": ["test_functions", "test__c_char_p", "test__POINTER_c_char"], "function_calls": ["grc", "len", "c_buffer", "strchr", "CDLL", "POINTER", "range", "X"], "class_names": ["X", "StringPtrTestCase"], "class_method_calls": ["unittest.main", "x.str", "strchr.restype", "strchr.argtypes", "lib.my_strchr", "self.assertEqual", "support.refcount_test", "unittest.TestCase", "_ctypes_test.__file__", "self.assertRaises"]}, "test_strings.py": {"libraries": ["unittest", "ctypes.*", "ctypes.test.need_symbol", "time.perf_counter"], "function_names": ["test_wchar", "test_param_1", "test_basic_wstrings", "test_param_2", "test", "run_test", "test_c_buffer_value", "test_c_buffer_raw", "test_initialized_strings", "test_del_segfault", "test_nonbmp", "test_sized_strings", "check_perf", "test_toolong", "test_basic_strings", "test_perf"], "function_calls": ["func", "len", "sizeof", "c_buffer", "run_test", "clock", "chr", "c_wchar", "c_wstring", "byref", "need_symbol", "memoryview", "c_string", "check_perf", "repr", "BUF", "range", "print"], "class_names": ["StringTestCase", "WStringArrayTestCase", "WStringTestCase", "StringArrayTestCase"], "class_method_calls": ["unittest.skipIf", "cs.value", "buf.value", "unittest.skip", "self.assertEqual", "cs.raw", "buf.raw", "unittest.TestCase", "w.value", "unittest.main", "self.assertRaises"]}, "test_struct_fields.py": {"libraries": ["unittest", "ctypes.*"], "function_names": ["test___set__", "test_4", "test_2", "test_3", "test_1_B", "test___get__", "test_1_A"], "function_calls": ["sizeof", "X"], "class_names": ["StructFieldsTestCase", "Y", "MyCStruct", "MyCUnion", "X"], "class_method_calls": ["Y._fields_", "MyCUnion.field", "MyCStruct.field", "self.assertEqual", "X._fields_", "unittest.TestCase", "unittest.main", "self.assertRaises"]}, "test_structures.py": {"libraries": ["unittest", "_testcapi", "platform", "ctypes.*", "ctypes.test.need_symbol", "sys", "struct", "struct.calcsize", "_ctypes_test", "test.support"], "function_names": ["test_fields", "test", "test_huge_field_name", "test_invalid_field_types", "test_none_to_pointer_fields", "test_packed_c_limits", "test_methods", "test_initializers", "test_intarray_fields", "test_keyword_initializers", "test_38368", "test_positional_args", "test_simple_structs", "test_array_in_struct", "test_contains_itself", "test_subclass_delayed", "test_init_errors", "declare_with_name", "test_nested_initializers", "test_pass_by_value", "__del__", "test_vice_versa", "test_subclass", "test_subclass_creation", "test_packed", "test_empty", "get_except", "test_pass_by_value_finalizer", "test_conflicting_initializers", "test_struct_alignment", "test_invalid_name", "test_unions", "test_union_by_value", "test_abstract_class", "test_bitfield_by_value", "test_structures_with_wchar", "create_class", "test_pass_by_value_in_register"], "function_calls": ["Test8", "min", "POINT", "alignment", "Z", "byref", "SomeInts", "str", "CDLL", "locals", "PersonW", "Test7", "calcsize", "range", "Person", "X", "Test5", "sizeof", "Test6", "Test", "Test2", "dir", "Test3", "type", "func", "Test4", "U", "max", "create_class", "need_symbol", "POINTER", "Test3B", "S"], "class_names": ["Test8", "POINT", "Y", "First", "Z", "Recursive", "StructureTestCase", "PointerMemberTestCase", "Test3A", "SomeInts", "PersonW", "Test7", "TestRecursiveStructure", "Person", "X", "Test5", "Second", "Test6", "Test", "Test2", "XX", "Phone", "Test3", "IS", "W", "SI", "Nested1", "U", "Test4", "SubclassesTest", "Nested2", "Test3B", "S"], "class_method_calls": ["Y._fields_", "s.second", "self.assertEqual", "struct.calcsize", "support.gc_collect", "test5.nested", "self.get_except", "self.assertRaises", "Second._fields_", "test7.B", "z.a", "X._fields_", "got.first", "test6.B", "detail.__class__", "dll._testfunc_bitfield_by_value2", "z.d", "test5.an_int", "test4.a_long", "dll._testfunc_union_by_reference3", "self.assertTrue", "test4.a_struct", "pt.x", "test5.another_int", "test7.C", "sys.byteorder", "Recursive._fields_", "got.second", "p.age", "X.y", "unittest.skip", "s.x", "s.p", "s.data", "u.f2", "test6.A", "s.third", "unittest.TestCase", "z.c", "test7.A", "s.more_data", "u.f1", "func.argtypes", "self.formats", "z.b", "s.array", "First._fields_", "dll._testfunc_bitfield_by_reference2", "u.f3", "pt.y", "dll._testfunc_bitfield_by_value1", "ctx.exception", "test6.C", "X.b", "dll._testfunc_large_struct_update_value", "test6.D", "dll._testfunc_union_by_value1", "p.phone", "finalizer_calls.append", "s.first", "_testcapi.INT_MAX", "self.assertGreater", "Z._fields_", "unittest.main", "X.x", "_ctypes_test.__file__", "func.restype", "dll._testfunc_array_in_struct2a", "self.assertAlmostEqual", "self.assertRaisesRegex", "_testcapi.UINT_MAX", "self.assertIn", "self.fail", "test7.D", "dll._testfunc_array_in_struct2", "z.e", "unittest.skipIf", "dll._testfunc_reg_struct_update_value", "dll._testfunc_union_by_value2", "p.name", "dll._testfunc_bitfield_by_reference1", "X.in_dll", "support.cpython_only", "dll._testfunc_array_in_struct1", "dll._testfunc_union_by_reference1", "dll._testfunc_union_by_reference2", "z.f"]}, "test_unaligned_structures.py": {"libraries": ["sys", "ctypes.*", "unittest"], "function_names": ["test_swapped", "test_native"], "function_calls": ["typ"], "class_names": ["TestStructures", "Y", "X"], "class_method_calls": ["o.value", "sys.byteorder", "self.assertEqual", "typ.value", "unittest.TestCase", "structures.append", "unittest.main", "byteswapped_structures.append"]}, "test_unicode.py": {"libraries": ["ctypes.c_char_p", "ctypes.pythonapi", "enum", "_testcapi.unicode_encodedecimal", "ctypes.py_object", "_string", "ctypes.c_uint", "struct", "warnings", "_testcapi.getargs_u", "ctypes.c_long", "test.support", "unicodedata", "unittest", "ctypes.c_void_p", "datetime", "ctypes.c_ssize_t", "_testcapi.unicode_asucs4", "ctypes.c_longlong", "codecs", "_testcapi.unicode_aswidechar", "_testcapi.unicode_aswidecharstring", "ctypes.sizeof", "test.string_tests", "itertools", "_testcapi.getargs_s_hash", "operator", "ctypes.c_ulong", "_testcapi.INT_MAX", "ctypes.c_wchar", "_testcapi.unicode_findchar", "ctypes.c_ulonglong", "_testcapi.unicode_transformdecimaltoascii", "ctypes.c_size_t", "ctypes.c_int", "sys", "_testcapi.unicode_copycharacters"], "function_names": ["test_iterators", "test_index", "test_swapcase", "test_formatting_huge_precision", "test_formatting_huge_width", "test_capitalize", "test_find", "test_isspace", "test_rindex", "__index__", "test_join_overflow", "test_center", "test_format_auto_numbering", "test_isdecimal", "__init__", "__missing__", "__iadd__", "test_count", "test_isalpha", "test_replace", "__str__", "test_surrogates", "test_formatter_parser", "assertCorrectUTF8Decoding", "__add__", "test_isascii", "test_concatenation", "test_istitle", "duplicate_string", "test_maketrans_translate", "test_lower", "test_case_operation_overflow", "test_aswidecharstring", "test_issue8271", "test_invalid_cb_for_2bytes_seq", "test_format", "test_resize", "checkequalnofix", "test_findchar", "test_isspace_invariant", "test_encode_decimal", "encode1", "test_isnumeric", "encode2", "test_codecs_errors", "test_codecs_charmap", "split", "test_rfind", "PyUnicode_FromFormat", "test_codecs_utf8", "test_isprintable", "test_bytes_comparison", "test_transform_decimal", "test_formatter_field_name_split", "test_conversion", "__new__", "test_constructor_defaults", "test_rsplit", "__getitem__", "test_asucs4", "decode2", "test_utf8_decode_invalid_sequences", "test_printing", "test_invalid_start_byte", "__repr__", "test_comparison", "test_upper", "test_codecs", "test_isdigit", "test_isidentifier", "test_codecs_idna", "__int__", "parse", "test_startswith_endswith_errors", "test_format_subclass", "test_getnewargs", "test_islower", "test_formatting", "test_formatting_with_enum", "test_issue18183", "test_format_float", "test_casefold", "test_contains", "test_copycharacters", "test_issue28598_strsubclass_rhs", "test_isalnum", "test_raiseMemError", "test_subclass_add", "test_from_format", "test_codecs_utf7", "test_utf8_decode_valid_sequences", "test_format_huge_item_number", "test_unexpected_end_of_data", "test_lecmp", "test_invalid_cb_for_3bytes_seq", "test_isupper", "test_repr", "test_expandtabs_overflows_gracefully", "__rmod__", "search_function", "test_free_after_iterating", "check_format", "test_ascii", "test_format_huge_width", "test_constructor", "__format__", "test_constructor_keyword_args", "test_join", "test_partition", "test_replace_id", "test_title", "test_rpartition", "test_pep393_utf8_caching_bug", "test_invalid_cb_for_4bytes_seq", "test_aswidechar", "test_format_huge_precision", "decode1", "test_unicode_repr", "test_ucs4", "write", "test_printable_repr", "test_fixup", "test_literals", "test_expandtabs_optimization", "test_format_map", "test_compare", "test_split", "test_formatting_huge_precision_c_limits"], "function_calls": ["c_ssize_t", "usub", "getattr", "WrongRepr", "unicode_findchar", "StrSubclass", "BadMapping", "StrSubclassToStr", "dict", "Mapping", "_PyUnicode_FromFormat", "sizeof", "M", "int", "s1", "enumerate", "len", "unicode_encodedecimal", "J", "S", "c_int", "StringCompat", "duplicate_string", "unicode_aswidechar", "memoryview", "str", "getargs_u", "list", "c_ulong", "SubclassedStr", "unicode_copycharacters", "c_uint", "split", "PyUnicode_FromFormat", "MyWrapper", "D", "c_longlong", "s2", "StrSubclassToStrSubclass", "format", "getargs_s_hash", "transform_decimal", "unicode_aswidecharstring", "c_long", "isinstance", "F", "tuple", "parse", "py_object", "ascii", "range", "unicode_asucs4", "method", "C", "c_size_t", "Wrapper", "type", "float", "I", "c_ulonglong", "PseudoFloat", "InternalMapping", "bytes", "ord", "BitBucket", "print", "meth", "test_lecmp", "N", "repr", "PseudoInt", "check_format", "super", "G", "next", "ObjectToStr", "bytearray", "chr", "map", "test_fixup", "c_void_p", "E"], "class_names": ["StringCompat", "usub", "WrongRepr", "StrSubclass", "BadMapping", "N", "CAPITest", "PseudoInt", "StrSubclassToStr", "F", "Str", "UnicodeTest", "G", "Mapping", "S", "SubclassedStr", "C", "M", "Wrapper", "s1", "MyWrapper", "D", "I", "ObjectToStr", "StringModuleTest", "Float", "s2", "Int", "PseudoFloat", "InternalMapping", "J", "StrSubclassToStrSubclass", "E", "BitBucket"], "class_method_calls": ["unittest.skipUnless", "self.assertEqual", "self.assertNotEqual", "struct.calcsize", "self.sval", "codecs.register", "string_tests.Sequence", "self.assertIs", "support.requires_resource", "warnings.catch_warnings", "x.encode", "self.checkequal", "self.assertRaises", "s.upper", "support.check_warnings", "self._x", "str.__new__", "self.mapping", "itertools.combinations", "self.assertTrue", "e.start", "text.__getnewargs__", "support.import_module", "cm.exception", "seq.decode", "u.encode", "ch.isdigit", "byte.decode", "self.assertNotIn", "Int.IDES", "self.x", "string_tests.CommonTest", "int.__format__", "string_tests.MixinStrUnicodeUserStringTest", "self.assertIsNot", "res.replace", "y.decode", "sys.maxsize", "_PyUnicode_FromFormat.restype", "s.istitle", "ch.isalnum", "s.islower", "object.__format__", "unittest.TestCase", "enum.IntEnum", "self.assertFalse", "datetime.date", "self.strftime", "enum.Enum", "self.assertCorrectUTF8Decoding", "sys.platform", "Float.PI", "self.value", "ch.isspace", "text.replace", "sys.maxunicode", "_PyUnicode_FromFormat.argtypes", "unicodedata.category", "warnings.simplefilter", "self.checkraises", "self.checkequalnofix", "s.expandtabs", "unittest.main", "ch.isdecimal", "operator.mod", "_string.formatter_parser", "char.isspace", "ch.isnumeric", "text.translate", "str.__repr__", "_string.formatter_field_name_split", "support.check_free_after_iterating", "unicodedata.bidirectional", "c.encode", "bytes.fromhex", "self.assertRaisesRegex", "subclass.encode", "self.assertIn", "self.fail", "format_string.format", "Str.ABC", "unittest.skipIf", "str.maketrans", "support.run_with_locale", "e.end", "ch.istitle", "s.isupper", "support.cpython_only", "string_tests.MixinStrUnicodeTest", "self.skipTest", "self.type2test", "text.encode"]}, "test_values.py": {"libraries": ["unittest", "ctypes.*", "ctypes._pointer_type_cache", "sys", "_ctypes_test"], "function_names": ["test_optimizeflag", "test_undefined", "test_frozentable", "test_an_integer"], "function_calls": ["POINTER", "CDLL", "sorted"], "class_names": ["PythonValuesTestCase", "ValuesTestCase", "struct_frozen"], "class_method_calls": ["entry.name", "FrozenTable.in_dll", "unittest.main", "an_integer.value", "sys.flags", "c_int.in_dll", "entry.size", "ctdll.get_an_integer", "self.assertEqual", "self.assertTrue", "unittest.TestCase", "bootstrap_seen.append", "_ctypes_test.__file__", "items.append", "self.assertRaises"]}, "test_varsize_struct.py": {"libraries": ["unittest", "ctypes.*"], "function_names": ["test_array_invalid_length", "test_zerosized_array", "test_resize"], "function_calls": ["resize", "sizeof", "X"], "class_names": ["VarSizeTest", "X"], "class_method_calls": ["x.array", "array.__setitem__", "x.item", "self.assertEqual", "unittest.TestCase", "array.__getitem__", "unittest.main", "self.assertRaises"]}, "test_win32.py": {"libraries": ["unittest", "ctypes.*", "ctypes.wintypes", "ctypes._pointer_type_cache", "sys", "_ctypes.COMError", "_ctypes_test", "test.support", "errno"], "function_names": ["test_sizes", "test_HWND", "test_struct_by_value", "test_COMError", "test_SEH", "test_PARAM", "test_winerror", "test_noargs"], "function_calls": ["sizeof", "PointInRect", "byref", "WinError", "getattr", "POINT", "COMError", "CDLL", "ReturnRect", "FormatError", "pointer", "RECT", "POINTER", "bytes", "enumerate", "ord", "f", "range"], "class_names": ["FunctionCallTestCase", "ReturnStructSizesTestCase", "POINT", "TestWinError", "TestWintypes", "Structures", "RECT", "S"], "class_method_calls": ["windll.user32", "sys.platform", "ex.hresult", "ReturnRect.argtypes", "right.value", "PointInRect.argtypes", "unittest.skipUnless", "sys.executable", "self.assertEqual", "ex.text", "support.HAVE_DOCSTRINGS", "e.errno", "e.winerror", "ret.top", "top.value", "COMError.__doc__", "errno.EINVAL", "support.disable_faulthandler", "windll.kernel32", "ret.bottom", "ReturnRect.restype", "self.assertRaises", "unittest.skipIf", "dll.ReturnRect", "f.restype", "wintypes.HWND", "unittest.main", "dll.PointInRect", "bottom.value", "c_long.in_dll", "sys.version", "ex.details", "e.args", "left.value", "wintypes.WPARAM", "wintypes.LPARAM", "ret.right", "ret.left", "unittest.TestCase", "_ctypes_test.__file__"]}, "test_wintypes.py": {"libraries": ["unittest", "ctypes.wintypes", "ctypes.*"], "function_names": ["test_variant_bool"], "function_calls": ["POINTER", "c_int16", "cast", "repr"], "class_names": ["WinTypesTest"], "class_method_calls": ["self.assertIs", "value.contents", "vb.value", "self.assertEqual", "wintypes.VARIANT_BOOL", "unittest.TestCase", "unittest.main"]}, "util.py": {"libraries": ["posixpath", "urllib.parse.quote", "warnings", "io.StringIO", "io.BytesIO"], "function_names": ["shift_path_info", "__iter__", "setup_testing_defaults", "__init__", "is_hop_by_hop", "application_uri", "request_uri", "__next__", "__getitem__", "guess_scheme"], "function_calls": ["BytesIO", "quote", "_hoppish", "StringIO", "guess_scheme", "application_uri", "hasattr"], "class_names": ["FileWrapper"], "class_method_calls": ["self.close", "header_name.lower", "environ.setdefault", "environ.get", "path_info.split", "warnings.warn", "posixpath.normpath", "script_name.endswith", "filelike.close", "self.filelike", "self.blksize"]}, "wintypes.py": {"libraries": ["ctypes"], "function_names": ["RGB", "__repr__"], "function_calls": [], "class_names": ["WIN32_FIND_DATAA", "VARIANT_BOOL", "POINT", "WIN32_FIND_DATAW", "FILETIME", "_COORD", "RECT", "_SMALL_RECT", "SIZE", "MSG"], "class_method_calls": ["ctypes.c_char_p", "ctypes.c_uint", "self.value", "ctypes.c_double", "ctypes._SimpleCData", "ctypes.c_long", "ctypes.Structure", "ctypes.c_void_p", "ctypes.c_longlong", "ctypes.c_short", "ctypes.c_float", "ctypes.sizeof", "ctypes.c_char", "ctypes.c_wchar_p", "ctypes.c_ulong", "ctypes.c_wchar", "ctypes.c_byte", "ctypes.c_ulonglong", "ctypes.c_int", "ctypes.POINTER", "self.__class__", "ctypes.c_ushort"]}, "ascii.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": [], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "StreamConverter", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.StreamReader", "Codec.decode", "codecs.ascii_encode", "codecs.StreamWriter", "codecs.IncrementalDecoder", "Codec.encode", "codecs.Codec", "codecs.ascii_decode", "self.errors"]}, "has_key.py": {"libraries": ["_curses"], "function_names": ["has_key"], "function_calls": ["has_key", "isinstance", "ord", "print"], "class_names": [], "class_method_calls": ["_curses.KEY_F14", "_curses.KEY_F42", "_curses.KEY_REDO", "_curses.KEY_F5", "_curses.KEY_SREDO", "_curses.KEY_SPREVIOUS", "_curses.KEY_F16", "_curses.KEY_SFIND", "_curses.KEY_STAB", "_curses.KEY_PREVIOUS", "_curses.KEY_F53", "_curses.KEY_F28", "_curses.KEY_F48", "_curses.KEY_END", "_curses.KEY_UNDO", "L.append", "_curses.KEY_COMMAND", "_curses.KEY_SBEG", "_curses.KEY_SEOL", "_curses.KEY_IC", "_curses.KEY_F34", "_curses.KEY_CREATE", "_curses.KEY_F58", "_curses.KEY_DOWN", "_curses.KEY_SF", "_curses.KEY_F54", "_curses.KEY_F57", "_curses.KEY_SOPTIONS", "_curses.KEY_F49", "_curses.KEY_REFERENCE", "_curses.KEY_F2", "_curses.KEY_F11", "_curses.KEY_SCANCEL", "_curses.KEY_SAVE", "_curses.KEY_F60", "_curses.KEY_SDC", "_curses.KEY_F37", "_curses.KEY_SLEFT", "_curses.KEY_SREPLACE", "_curses.KEY_PRINT", "_curses.KEY_F17", "_curses.KEY_HOME", "_curses.KEY_F62", "_curses.KEY_CLOSE", "_curses.KEY_CANCEL", "_curses.KEY_F26", "_curses.KEY_NPAGE", "_curses.KEY_UP", "_curses.KEY_F61", "_curses.KEY_SRIGHT", "_curses.KEY_RIGHT", "_curses.KEY_RESUME", "_curses.KEY_CATAB", "_curses.KEY_F12", "_curses.KEY_F23", "_curses.endwin", "_curses.KEY_F30", "_curses.KEY_SRSUME", "_curses.KEY_F27", "_curses.KEY_SCREATE", "_curses.has_key", "_curses.KEY_F55", "_curses.KEY_LL", "_curses.KEY_NEXT", "_curses.KEY_SMESSAGE", "_curses.KEY_SIC", "_curses.KEY_F56", "_curses.KEY_F6", "_curses.KEY_LEFT", "_curses.KEY_F1", "_curses.KEY_A3", "_curses.KEY_F25", "_curses.KEY_OPTIONS", "_curses.KEY_MARK", "_curses.KEY_F39", "_curses.KEY_F41", "_curses.KEY_EIC", "_curses.KEY_BTAB", "_curses.initscr", "_curses.KEY_C1", "_curses.KEY_DC", "_curses.KEY_MOVE", "_curses.KEY_F22", "_curses.KEY_F20", "_curses.KEY_SSAVE", "_curses.KEY_REFRESH", "_curses.KEY_SELECT", "_curses.KEY_SHELP", "_curses.KEY_F40", "_curses.KEY_F0", "_curses.KEY_F10", "_curses.KEY_SNEXT", "_curses.KEY_A1", "_curses.KEY_SMOVE", "_curses.KEY_C3", "_curses.KEY_F63", "_curses.KEY_PPAGE", "_curses.KEY_CTAB", "_curses.KEY_EOS", "_curses.KEY_F13", "_curses.KEY_F36", "_curses.KEY_FIND", "_curses.KEY_DL", "_curses.KEY_ENTER", "_curses.tigetstr", "_curses.keyname", "_curses.KEY_SEND", "_curses.KEY_F24", "_curses.KEY_F4", "_curses.KEY_OPEN", "_curses.KEY_F46", "_curses.KEY_IL", "_curses.KEY_REPLACE", "_curses.KEY_SPRINT", "_curses.KEY_EOL", "_curses.KEY_BACKSPACE", "_curses.KEY_F44", "_curses.KEY_MESSAGE", "_curses.KEY_COPY", "_curses.KEY_CLEAR", "_curses.KEY_HELP", "_curses.KEY_EXIT", "_curses.KEY_F3", "_curses.KEY_F15", "_curses.KEY_F32", "_curses.KEY_F18", "_curses.KEY_F31", "_curses.KEY_SEXIT", "_curses.KEY_F35", "_curses.KEY_F47", "_curses.KEY_BEG", "_curses.KEY_SUNDO", "_curses.KEY_SCOMMAND", "_curses.KEY_F59", "_curses.KEY_F21", "_curses.KEY_F38", "_curses.KEY_F45", "_curses.KEY_F52", "_capability_names.keys", "_curses.KEY_F33", "_curses.KEY_F50", "_curses.KEY_SCOPY", "_curses.KEY_F43", "_curses.KEY_F7", "_curses.KEY_SR", "_curses.KEY_SUSPEND", "_curses.KEY_F9", "_curses.KEY_RESTART", "_curses.KEY_F29", "_curses.KEY_F19", "_curses.KEY_SDL", "_curses.KEY_F8", "_curses.KEY_B2", "_curses.KEY_F51", "_curses.KEY_SHOME", "_curses.KEY_SSUSPEND", "_capability_names.get"]}, "panel.py": {"libraries": ["_curses_panel.*"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "textpad.py": {"libraries": ["curses.ascii", "curses"], "function_names": ["rectangle", "_update_max_yx", "test_editbox", "edit", "__init__", "gather", "_insert_printable_char", "do_command", "_end_of_line"], "function_calls": ["rectangle", "Textbox", "min", "chr", "validate", "print", "range", "repr"], "class_names": ["Textbox"], "class_method_calls": ["curses.KEY_RIGHT", "win.vline", "stdscr.addstr", "win.keypad", "self.maxx", "self._end_of_line", "curses.newwin", "curses.KEY_LEFT", "curses.KEY_DOWN", "curses.ACS_LRCORNER", "self._update_max_yx", "curses.ascii", "curses.error", "self.stripspaces", "curses.ACS_ULCORNER", "win.addch", "curses.ACS_HLINE", "curses.KEY_BACKSPACE", "curses.KEY_UP", "stdscr.refresh", "curses.ACS_URCORNER", "self.lastcmd", "self.win", "self.gather", "self.do_command", "self.insert_mode", "curses.ACS_VLINE", "curses.ACS_LLCORNER", "self._insert_printable_char", "win.hline", "curses.wrapper", "self.maxy"]}, "dataclasses.py": {"libraries": ["_thread", "re", "keyword", "types", "copy", "inspect", "sys", "warnings", "functools", "builtins"], "function_names": ["_frozen_get_del_attr", "_field_assign", "field", "replace", "_create_fn", "_is_dataclass_instance", "_process_class", "__repr__", "_is_initvar", "wrapper", "_init_fn", "_is_type", "_hash_fn", "__set_name__", "is_dataclass", "_tuple_str", "dataclass", "__init__", "_set_new_attribute", "asdict", "astuple", "_is_classvar", "_recursive_repr", "__getitem__", "fields", "_repr_fn", "_asdict_inner", "_hash_exception", "_hash_add", "wrap", "make_dataclass", "_get_field", "_hash_set_none", "_astuple_inner", "_field_init", "_cmp_fn", "_init_param"], "function_calls": ["InitVar", "_frozen_get_del_attr", "_field_assign", "field", "_create_fn", "getattr", "_is_dataclass_instance", "_process_class", "id", "_FIELD_BASE", "dict_factory", "_is_initvar", "_init_fn", "repr", "_hash_fn", "_is_type", "isinstance", "user_function", "str", "_tuple_str", "tuple", "dataclass", "is_type_predicate", "_field_init", "_set_new_attribute", "_DataclassParams", "hash_action", "setattr", "ValueError", "_is_classvar", "_recursive_repr", "set", "type", "fields", "func", "_repr_fn", "bool", "_asdict_inner", "_init_param", "Field", "_MISSING_TYPE", "hasattr", "wrap", "_HAS_DEFAULT_FACTORY_CLASS", "delattr", "len", "_get_field", "_astuple_inner", "TypeError", "tuple_factory", "_cmp_fn", "exec"], "class_names": ["_HAS_DEFAULT_FACTORY_CLASS", "InitVar", "_MISSING_TYPE", "Field", "_DataclassParams", "_InitVarMeta", "FrozenInstanceError", "_FIELD_BASE"], "class_method_calls": ["locals.update", "obj.__class__", "self.eq", "repr_running.discard", "f.type", "result.append", "self.unsafe_hash", "base_fields.values", "ns.update", "f.name", "f._field_type", "functools.wraps", "sys.modules", "self.type", "module.__dict__", "types.MemberDescriptorType", "fields.values", "repr_running.add", "self.name", "name.isidentifier", "types.MappingProxyType", "a_type.__origin__", "self.frozen", "typing.ClassVar", "keyword.iskeyword", "warnings.warn", "cls.__doc__", "self.order", "cls.__module__", "self.metadata", "f.default_factory", "cls_annotations.items", "locals.keys", "self.default_factory", "namespace.copy", "cls.__mro__", "fn.__name__", "cls.__dict__", "f.init", "_thread.get_ident", "cls.__hash__", "self.compare", "body_lines.append", "cls.__name__", "copy.deepcopy", "replace.__text_signature__", "self.hash", "types.new_class", "changes.pop", "self.repr", "f.hash", "dataclasses.InitVar", "f.default", "seen.add", "a_type.__module__", "typing._GenericAlias", "ns.get", "re.compile", "f.repr", "self.init", "inspect.signature", "self._field_type", "_MODULE_IDENTIFIER_RE.match", "match.group", "obj.items", "f.compare", "self.default"]}, "datetime.py": {"libraries": ["time", "_strptime", "sys", "warnings", "_datetime.__doc__", "math", "_datetime.*"], "function_names": ["total_seconds", "__reduce_ex__", "timetuple", "hour", "toordinal", "second", "_format_offset", "_cmperror", "date", "fromutc", "utctimetuple", "_to_microseconds", "__str__", "__gt__", "_check_tzinfo_arg", "__add__", "fold", "isoformat", "_days_before_month", "utcnow", "_parse_isoformat_date", "__rsub__", "microseconds", "replace", "_wrap_strftime", "_ord2ymd", "__sub__", "_tzstr", "fromisoformat", "_fromtimestamp", "_ymd2ord", "_divide_and_round", "__floordiv__", "month", "seconds", "_getstate", "__neg__", "minute", "_check_date_fields", "strftime", "fromisocalendar", "time", "_name_from_offset", "__bool__", "local", "timestamp", "utcfromtimestamp", "__new__", "isocalendar", "now", "today", "__truediv__", "combine", "tzname", "weekday", "__repr__", "days", "__reduce__", "_parse_hh_mm_ss_ff", "tzinfo", "_parse_isoformat_time", "year", "timetz", "astimezone", "_build_struct_time", "__mul__", "_format_time", "_check_tzname", "fromordinal", "_is_leap", "dst", "__le__", "__getinitargs__", "__pos__", "__eq__", "_check_time_fields", "__ge__", "__setstate", "day", "_check_int_field", "_days_in_month", "_create", "__lt__", "microsecond", "_days_before_year", "strptime", "__format__", "_cmp", "__divmod__", "_isoweek1monday", "_local_timezone", "__mod__", "fromtimestamp", "_check_utc_offset", "__abs__", "utcoffset", "__hash__", "_mktime", "plural", "isoweekday", "ctime"], "function_calls": ["object", "min", "_wrap_strftime", "_ord2ymd", "getattr", "push", "cls", "all", "abs", "_ymd2ord", "_check_time_fields", "_parse_hh_mm_ss_ff", "isinstance", "_divide_and_round", "getinitargs", "datetime", "_check_int_field", "str", "_days_in_month", "_parse_isoformat_time", "_format_offset", "_cmperror", "_days_before_year", "date", "converter", "timezone", "hash", "_check_date_fields", "timedelta", "range", "ValueError", "_cmp", "time", "_check_tzinfo_arg", "_isoweek1monday", "int", "type", "getstate", "local", "OverflowError", "_build_struct_time", "hasattr", "_check_utc_offset", "divmod", "len", "_format_time", "_check_tzname", "map", "NotImplementedError", "_days_before_month", "bytes", "plural", "_parse_isoformat_date", "TypeError", "ord", "_is_leap", "round"], "class_names": ["tzinfo", "time", "datetime", "date", "timezone", "timedelta"], "class_method_calls": ["diff.days", "time.hour", "offset.days", "tzinfo.__new__", "self._month", "s.replace", "other._offset", "t.utcoffset", "other._minute", "other.days", "year.encode", "self.__setstate", "other.toordinal", "dt.tzinfo", "trans.days", "rest.microseconds", "self.year", "other._second", "t._getstate", "date.min", "self.toordinal", "self._hour", "other._microsecond", "_time.struct_time", "cls.fromtimestamp", "self._day", "self._second", "self.second", "self.microseconds", "value.__int__", "datetime.max", "self._tzinfo", "date.year", "other._to_microseconds", "self.__reduce_ex__", "_strptime._strptime_datetime", "self.utc", "result._fold", "self.utcoffset", "time_comps.append", "self.tzinfo", "tstr.find", "self._mktime", "self.day", "time.__slots__", "date.fromordinal", "date.month", "cls.utcfromtimestamp", "rest.seconds", "self.replace", "self.month", "warnings.warn", "self.hour", "self._to_microseconds", "localtm.tm_gmtoff", "other._days", "self._offset", "other._seconds", "other._day", "other._hour", "self.microsecond", "_time.gmtime", "_time.strftime", "date.day", "self._minute", "timedelta.resolution", "cls._maxoffset", "off.days", "dt.dst", "fmt.format", "self.days", "cls._Omitted", "other._tzinfo", "self._getstate", "self.strftime", "timezone.min", "timezone.max", "self._hashcode", "other._month", "datetime.min", "date.__slots__", "sys.platform", "delta.seconds", "other._year", "cls._fromtimestamp", "_time.localtime", "ss.seconds", "self.timetuple", "time.tzinfo", "self._year", "self.fold", "self._name", "tz.fromutc", "time.fold", "time.second", "_DAYS_BEFORE_MONTH.append", "cls.utc", "date.max", "localtm.tm_zone", "object.tzname", "hour.encode", "_math.modf", "self._microseconds", "other.fold", "newformat.append", "self._local_timezone", "timedelta.max", "timezone.utc", "time.resolution", "datetime.resolution", "_time.time", "other.replace", "self._tzstr", "offset.microseconds", "self._microsecond", "cls._create", "self._fold", "other._getstate", "other.utcoffset", "date.resolution", "cls._minoffset", "self.dst", "self.seconds", "time.min", "ss.microseconds", "self.minute", "timedelta.min", "self._name_from_offset", "self.tzname", "dt.utcoffset", "self._cmp", "time.max", "object.utcoffset", "self._days", "timezone._create", "delta.microseconds", "object.__new__", "other._microseconds", "time.minute", "time.microsecond", "self.isoformat", "other.as_integer_ratio", "mytz.utcoffset", "self.__class__", "self._seconds", "args.append", "delta.days", "value.__index__"]}, "dumb.py": {"libraries": ["os", "io", "ast", "collections.abc"], "function_names": ["__exit__", "iterkeys", "keys", "__enter__", "_create", "_update", "__init__", "_chmod", "open", "_addkey", "_verify_open", "close", "__len__", "_addval", "items", "__setitem__", "_commit", "__delitem__", "_setval", "__getitem__", "__contains__"], "function_calls": ["ValueError", "isinstance", "len", "list", "iter", "error", "int", "TypeError", "_Database"], "class_names": ["_Database"], "class_method_calls": ["self._chmod", "key.encode", "_io.open", "self._datfile", "self.close", "self._addval", "f.write", "self._io", "self._mode", "f.read", "f.seek", "_os.umask", "self._index", "self._modified", "self._create", "f.tell", "self._readonly", "self._dirfile", "collections.abc", "self._verify_open", "self._setval", "line.rstrip", "_ast.literal_eval", "self._commit", "self._bakfile", "key.decode", "_os.remove", "val.encode", "self._os", "f.close", "self._addkey", "self._update"]}, "gnu.py": {"libraries": ["_gdbm.*"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "ndbm.py": {"libraries": ["_dbm.*"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "decimal.py": {"libraries": ["_pydecimal.__libmpdec_version__", "_decimal.__libmpdec_version__", "_decimal.__doc__", "_pydecimal.__doc__", "_pydecimal.__version__", "_pydecimal.*", "_decimal.*", "_decimal.__version__"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "difflib.py": {"libraries": ["re", "doctest", "heapq.nlargest", "difflib", "collections.namedtuple"], "function_names": ["__chain_b", "get_grouped_opcodes", "_test", "expand_tabs", "_line_wrapper", "make_file", "restore", "decode", "compare", "_calculate_ratio", "real_quick_ratio", "_keep_original_ws", "_line_pair_iterator", "_collect_lines", "unified_diff", "set_seq1", "__init__", "IS_CHARACTER_JUNK", "_check_types", "_make_line", "_make_prefix", "set_seqs", "_fancy_replace", "make_table", "find_longest_match", "get_matching_blocks", "_format_range_unified", "get_opcodes", "_format_line", "_mdiff", "get_close_matches", "_plain_replace", "_convert_flags", "_qformat", "_line_iterator", "ratio", "record_sub_info", "context_diff", "diff_bytes", "_format_range_context", "quick_ratio", "_tab_newline_replace", "ndiff", "_dump", "IS_LINE_JUNK", "_split_line", "_fancy_helper", "set_seq2"], "function_calls": ["min", "_test", "reversed", "expand_tabs", "j2lenget", "decode", "Differ", "_calculate_ratio", "_keep_original_ws", "_line_pair_iterator", "dfunc", "isinstance", "_namedtuple", "dict", "_check_types", "isjunk", "_make_line", "range", "ValueError", "list", "pat", "Match", "_format_range_unified", "_mdiff", "set", "isbjunk", "int", "_line_iterator", "zip", "next", "type", "_nlargest", "SequenceMatcher", "enumerate", "_format_range_context", "len", "any", "max", "availhas", "ndiff", "sum", "TypeError", "map"], "class_names": ["SequenceMatcher", "Differ", "HtmlDiff"], "class_method_calls": ["self._dump", "self._styles", "self.opcodes", "b2j.setdefault", "b2j.get", "self._qformat", "junk.add", "matching_blocks.append", "b2j.items", "non_adjacent.append", "s.set_seq1", "self._collect_lines", "fromlist.append", "self.a", "self.set_seq1", "self.isjunk", "j2len.get", "line.replace", "self.set_seq2", "fullbcount.get", "s.real_quick_ratio", "s.startswith", "queue.pop", "self.fullbcount", "text.count", "self.bpopular", "lines.pop", "result.append", "fromlines.append", "self._wrapcolumn", "c.isspace", "cruncher.set_seq2", "s.quick_ratio", "HtmlDiff._default_prefix", "s.ratio", "matching_blocks.sort", "self._line_wrapper", "fromlist.pop", "self._linejunk", "tolist.append", "self._format_line", "fromlines.pop", "self.autojunk", "table.replace", "self.make_table", "cruncher.set_seq1", "self.linejunk", "b2j.keys", "text.replace", "change_re.sub", "match_object.group", "cruncher.set_seqs", "tolist.pop", "popular.add", "doctest.testmod", "self.b2j", "self.charjunk", "self._fancy_helper", "self._table_template", "flaglist.append", "cruncher.real_quick_ratio", "self._plain_replace", "avail.__contains__", "self._charjunk", "self._convert_flags", "s.append", "self._file_template", "self._tabsize", "group.append", "re.compile", "sub_info.append", "match_object.span", "tolines.pop", "answer.append", "self.get_matching_blocks", "self._make_prefix", "self.matching_blocks", "queue.append", "self.set_seqs", "self.bjunk", "self.get_opcodes", "cruncher.quick_ratio", "self._legend", "cruncher.get_opcodes", "line.encode", "cruncher.ratio", "indices.append", "s.decode", "self.b", "self._split_line", "self._fancy_replace", "self._prefix", "self.find_longest_match", "lines.append", "data_list.append", "line.expandtabs", "Match._make", "self.__chain_b", "self._tab_newline_replace", "tolines.append", "s.set_seq2"]}, "dis.py": {"libraries": ["io", "opcode.__all__", "types", "argparse", "sys", "opcode.*", "collections"], "function_names": ["info", "_format_code_info", "_test", "_try_compile", "_unpack_opargs", "findlinestarts", "code_info", "__repr__", "show_code", "_disassemble_str", "_get_instructions_bytes", "__init__", "_disassemble_bytes", "get_instructions", "_disassemble_recursive", "_get_name_info", "__iter__", "distb", "_get_const_info", "disassemble", "from_traceback", "dis", "findlabels", "_get_code_object", "pretty_flags", "_disassemble"], "function_calls": ["_format_code_info", "_test", "sorted", "_try_compile", "cls", "_unpack_opargs", "findlinestarts", "code_info", "repr", "RuntimeError", "isinstance", "str", "_disassemble_str", "_get_instructions_bytes", "Instruction", "dict", "_disassemble_bytes", "range", "_disassemble_recursive", "_get_name_info", "hex", "type", "zip", "distb", "enumerate", "bool", "_get_const_info", "disassemble", "hasattr", "len", "compile", "dis", "max", "findlabels", "_get_code_object", "TypeError", "pretty_flags", "print"], "class_names": ["Bytecode", "Instruction"], "class_method_calls": ["_Instruction.is_jump_target", "_Instruction.argval", "code.co_firstlineno", "argparse.ArgumentParser", "types.FunctionType", "_Instruction.offset", "code.co_lnotab", "co.co_stacksize", "co.co_cellvars", "x.ag_code", "instr.starts_line", "infile.read", "sys.last_traceback", "fields.append", "self.arg", "_Instruction.starts_line", "names.append", "self._line_offset", "instr._disassemble", "tb.tb_frame", "types.MethodType", "co.co_freevars", "self.current_offset", "output.getvalue", "x.gi_code", "co.co_names", "co.co_code", "parser.add_argument", "io.StringIO", "self.argrepr", "co.co_argcount", "self._cell_names", "co.co_kwonlyargcount", "self.first_line", "tb.tb_next", "self._original_object", "types.CodeType", "linestarts.get", "lines.append", "_Instruction.opname", "x.__func__", "co.co_varnames", "self.codeobj", "code.co_code", "_Instruction.opcode", "self.starts_line", "COMPILER_FLAG_NAMES.get", "co.co_consts", "_Instruction.arg", "x.__dict__", "co.co_name", "co.co_posonlyargcount", "collections.namedtuple", "args.infile", "_Instruction.argrepr", "tb.tb_lasti", "self._linestarts", "co.co_filename", "instr.offset", "self.offset", "co.co_flags", "labels.append", "self.opname", "co.co_nlocals", "self.__class__", "argparse.FileType", "x.__code__", "parser.parse_args", "co.co_firstlineno", "linestarts.values", "x.cr_code", "self.is_jump_target"]}, "_msvccompiler.py": {"libraries": ["json", "distutils.errors.DistutilsExecError", "distutils.errors.CompileError", "distutils.ccompiler.gen_lib_options", "distutils.log", "distutils.ccompiler.CCompiler", "distutils.errors.LinkError", "distutils.util.get_platform", "shutil", "distutils.errors.LibError", "distutils.errors.DistutilsPlatformError", "subprocess", "itertools.count", "os", "stat", "winreg"], "function_names": ["library_dir_option", "object_filenames", "_find_exe", "_find_vc2015", "compile", "create_static_lib", "library_option", "link", "__init__", "runtime_library_dir_option", "_get_vc_env", "find_library_file", "_find_vc2017", "initialize", "make_out_path", "_find_vcvarsall", "spawn"], "function_calls": ["LinkError", "get_platform", "gen_lib_options", "_find_vcvarsall", "_find_exe", "super", "str", "tuple", "_get_vc_env", "list", "DistutilsPlatformError", "_find_vc2015", "LibError", "int", "float", "CompileError", "count", "_find_vc2017", "map"], "class_names": ["MSVCCompiler"], "class_method_calls": ["self.plat_name", "os.pathsep", "self.preprocess_options", "self.obj_extension", "self.ldflags_static_debug", "self._rc_extensions", "self.initialized", "CCompiler.SHARED_LIBRARY", "self.linker", "CCompiler.EXECUTABLE", "self._setup_compile", "self._need_link", "self.spawn", "self.ldflags_shared_debug", "self._fix_lib_args", "self.ldflags_exe", "winreg.KEY_READ", "self._mc_extensions", "ld_args.append", "self.rc", "self.mc", "exc.output", "self.add_include_dir", "self.res_extension", "log.debug", "self.src_extensions", "compile_opts.append", "self.ldflags_exe_debug", "self._fix_object_args", "line.partition", "args.extend", "self.mkpath", "subprocess.STDOUT", "self.warn", "winreg.KEY_WOW64_32KEY", "self.compile_options_debug", "log.error", "self._paths", "winreg.EnumValue", "self.add_library_dir", "os.sep", "winreg.REG_SZ", "self.mt", "self.lib", "out.splitlines", "ld_args.extend", "dir.rstrip", "compile_opts.extend", "exc.cmd", "os.environ", "self.compile_options", "CCompiler.__init__", "self.cc", "subprocess.check_output", "self._cpp_extensions", "self.ldflags_static", "os.getenv", "winreg.HKEY_LOCAL_MACHINE", "os.path", "self._c_extensions", "self._ldflags", "winreg.OpenKeyEx", "self.library_filename", "self.initialize", "self.ldflags_shared", "args.append", "vc_env.get", "key.lower", "base.startswith", "subprocess.CalledProcessError", "CCompiler.SHARED_OBJECT"]}, "archive_util.py": {"libraries": ["distutils.errors.DistutilsExecError", "distutils.log", "pwd.getpwnam", "zipfile", "sys", "distutils.spawn.spawn", "warnings.warn", "distutils.dir_util.mkpath", "grp.getgrnam", "os", "tarfile"], "function_names": ["_get_gid", "make_archive", "_set_uid_gid", "check_archive_formats", "make_tarball", "make_zipfile", "_get_uid"], "function_calls": ["getgrnam", "ValueError", "getpwnam", "_get_gid", "DistutilsExecError", "warn", "spawn", "func", "mkpath", "_get_uid"], "class_names": [], "class_method_calls": ["tarinfo.uname", "tarinfo.uid", "sys.platform", "tar.add", "os.getcwd", "os.chdir", "zipfile.ZIP_DEFLATED", "compress_ext.keys", "compress_ext.get", "log.debug", "zipfile.ZipFile", "tar.close", "log.info", "tarinfo.gname", "tarfile.open", "zipfile.ZIP_STORED", "os.curdir", "tarinfo.gid", "os.walk", "os.path", "zip.write"]}, "bcppcompiler.py": {"libraries": ["distutils.errors.CompileError", "distutils.errors.DistutilsExecError", "distutils.ccompiler.gen_lib_options", "distutils.log", "distutils.ccompiler.CCompiler", "distutils.ccompiler.gen_preprocess_options", "distutils.errors.LinkError", "distutils.file_util.write_file", "distutils.errors.LibError", "distutils.dep_util.newer", "os", "distutils.errors.DistutilsPlatformError", "distutils.errors.UnknownFileError"], "function_names": ["preprocess", "object_filenames", "compile", "create_static_lib", "link", "__init__", "find_library_file"], "function_calls": ["gen_preprocess_options", "UnknownFileError", "CompileError", "LinkError", "str", "LibError", "newer", "map", "print"], "class_names": ["BCPPCompiler"], "class_method_calls": ["self.preprocess_options", "self.obj_extension", "self.linker", "self.force", "CCompiler.EXECUTABLE", "self._setup_compile", "self._need_link", "self.spawn", "self.find_library_file", "self.ldflags_shared_debug", "self._fix_lib_args", "self.ldflags_exe", "ld_args.append", "self.src_extensions", "log.debug", "compile_opts.append", "self.ldflags_exe_debug", "self._fix_object_args", "self._fix_compile_args", "self.mkpath", "pp_args.extend", "self.execute", "self.compile_options_debug", "resources.append", "self.lib", "ld_args.extend", "compile_opts.extend", "CCompiler.__init__", "self.compile_options", "self.cc", "log.warn", "self._cpp_extensions", "self.ldflags_static", "os.path", "self._c_extensions", "self.library_filename", "self.ldflags_shared", "objects.append", "contents.append", "pp_args.append", "obj_names.append"]}, "ccompiler.py": {"libraries": ["distutils.debug.DEBUG", "re", "distutils.log", "distutils.util.execute", "distutils.util.split_quoted", "distutils.fancy_getopt.FancyGetopt", "sys", "distutils.spawn.spawn", "distutils.dir_util.mkpath", "tempfile", "distutils.dep_util.newer_group", "distutils.file_util.move_file", "os", "distutils.dep_util.newer_pairwise", "distutils.errors.*"], "function_names": ["gen_preprocess_options", "set_executable", "set_library_dirs", "_fix_lib_args", "preprocess", "library_dir_option", "shared_object_filename", "_need_link", "gen_lib_options", "set_link_objects", "find_library_file", "add_runtime_library_dir", "execute", "mkpath", "move_file", "executable_filename", "show_compilers", "add_include_dir", "add_library_dir", "_get_cc_args", "_prep_compile", "link", "__init__", "add_link_object", "_setup_compile", "define_macro", "_compile", "debug_print", "_check_macro_definitions", "set_executables", "new_compiler", "undefine_macro", "create_static_lib", "link_shared_object", "announce", "link_executable", "_find_macro", "set_include_dirs", "_fix_compile_args", "spawn", "object_filenames", "compile", "library_filename", "set_runtime_library_dirs", "library_option", "has_function", "detect_language", "link_shared_lib", "add_library", "get_default_compiler", "warn", "runtime_library_dir_option", "_fix_object_args", "set_libraries"], "function_calls": ["gen_preprocess_options", "getattr", "newer_group", "mkpath", "execute", "move_file", "FancyGetopt", "vars", "isinstance", "__import__", "DistutilsModuleError", "setattr", "range", "ValueError", "list", "DistutilsPlatformError", "klass", "spawn", "UnknownFileError", "len", "get_default_compiler", "TypeError", "split_quoted", "print"], "class_names": ["CCompiler"], "class_method_calls": ["self.shared_lib_extension", "sys.platform", "self.object_filenames", "self.executable_filename", "self.obj_extension", "compiler.warn", "CCompiler.SHARED_LIBRARY", "self.force", "CCompiler.EXECUTABLE", "compilers.sort", "self._setup_compile", "sys.modules", "self.library_dirs", "self.executables", "compiler.library_dir_option", "f.write", "self.output_dir", "self.src_extensions", "log.debug", "tempfile.mkstemp", "self.include_dirs", "self.mkpath", "compiler.runtime_library_dir_option", "self.link", "self.set_executable", "self.objects", "self._find_macro", "self.compile", "compilers.append", "pp_opts.append", "self._get_cc_args", "self.dry_run", "self.runtime_library_dirs", "self.link_executable", "compiler.find_library_file", "self.language_map", "self.exe_extension", "obj_names.append", "self._compile", "pretty_printer.print_help", "os.path", "os.fdopen", "sys.stderr", "self.library_filename", "self.verbose", "compiler_class.keys", "self.language_order", "re.match", "compiler.library_option", "self.libraries", "os.name", "self.__class__", "f.close", "self.macros", "CCompiler.SHARED_OBJECT", "lib_opts.append"]}, "bdist.py": {"libraries": ["distutils.fancy_getopt.FancyGetopt", "distutils.util.get_platform", "os", "distutils.core.Command", "distutils.errors.*"], "function_names": ["finalize_options", "run", "show_formats", "initialize_options"], "function_calls": ["len", "DistutilsPlatformError", "DistutilsOptionError", "get_platform", "FancyGetopt", "range"], "class_names": ["bdist"], "class_method_calls": ["self.plat_name", "formats.append", "self.reinitialize_command", "self.dist_dir", "self.formats", "self.default_format", "sub_cmd.keep_temp", "self.bdist_base", "self.skip_build", "bdist.format_commands", "self.get_finalized_command", "self.run_command", "self.group", "commands.append", "bdist.format_command", "sub_cmd.format", "self.owner", "sub_cmd.owner", "self.ensure_string_list", "self.format_command", "pretty_printer.print_help", "os.path", "sub_cmd.group", "os.name", "self.no_format_option"]}, "bdist_dumb.py": {"libraries": ["distutils.dir_util.remove_tree", "distutils.sysconfig.get_python_version", "distutils.dir_util.ensure_relative", "distutils.log", "distutils.util.get_platform", "os", "distutils.core.Command", "distutils.errors.*"], "function_names": ["finalize_options", "run", "initialize_options"], "function_calls": ["DistutilsPlatformError", "get_platform", "get_python_version", "ensure_relative", "remove_tree", "repr"], "class_names": ["bdist_dumb"], "class_method_calls": ["self.plat_name", "self.reinitialize_command", "self.set_undefined_options", "self.dist_dir", "self.default_format", "self.relative", "self.make_archive", "self.skip_build", "install.root", "self.distribution", "log.info", "self.get_finalized_command", "self.run_command", "self.group", "self.format", "install.install_base", "self.dry_run", "self.owner", "install.install_platbase", "install.skip_build", "install.warn_dir", "self.keep_temp", "os.path", "self.bdist_dir", "os.name"]}, "bdist_msi.py": {"libraries": ["distutils.dir_util.remove_tree", "msilib.sequence", "distutils.sysconfig.get_python_version", "msilib.Directory", "distutils.log", "msilib.add_data", "msilib.schema", "distutils.util.get_platform", "sys", "msilib.text", "msilib.Feature", "os", "distutils.version.StrictVersion", "distutils.core.Command", "distutils.errors.DistutilsOptionError", "msilib.Dialog", "msilib"], "function_names": ["title", "xbutton", "initialize_options", "run", "add_scripts", "add_find_python", "__init__", "finalize_options", "next", "add_ui", "add_files", "cancel", "get_installer_filename", "back"], "function_calls": ["Directory", "add_data", "list", "DistutilsOptionError", "StrictVersion", "Dialog", "get_platform", "int", "get_python_version", "open", "PyDialog", "Feature", "remove_tree", "hasattr"], "class_names": ["PyDialog", "bdist_msi"], "class_method_calls": ["dir.make_short", "self.all_versions", "self.set_undefined_options", "costing.pushbutton", "seldlg.text", "metadata.author_email", "text.UIText", "whichusers.next", "self.line", "build.build_base", "self.no_target_optimize", "self.add_files", "dir.add_file", "prep.next", "progress.cancel", "self.install_script", "msilib.init_database", "self.distribution", "install.ensure_finalized", "self.db", "install.prefix", "self.add_scripts", "dir.component", "self.keep_temp", "exit_dialog.back", "maint.radiogroup", "user_exit.title", "user_exit.cancel", "progress.next", "self.other_version", "error.text", "whichusers.title", "progress.control", "msilib.gen_uuid", "metadata.author", "error.pushbutton", "cancel.text", "install_lib.optimize", "props.append", "cost.control", "self.add_find_python", "fatal.title", "exit_dialog.text", "self.w", "inuse.cancel", "fatal.next", "prep.title", "seldlg.back", "user_exit.text", "self.no_target_compile", "self.get_finalized_command", "self.run_command", "g.add", "inuse.back", "self.dry_run", "c.event", "maint.text", "user_exit.back", "maint.title", "os.path", "text.ActionText", "seldlg.next", "self.add_ui", "seldlg.title", "sys.version_info", "items.append", "fin.read", "dir.logical", "self.install_script_key", "metadata.url", "whichusers.radiogroup", "self.h", "dir.start_component", "cab.commit", "inuse.text", "user_exit.next", "cost.text", "f.write", "maint.back", "dir.absolute", "whichusers.back", "self.mkpath", "metadata.maintainer_email", "self.pre_install_script", "Dialog.__init__", "install.run", "self.text", "c.condition", "install.warn_dir", "inuse.control", "c.mapping", "prep.text", "build.build_lib", "self.bdist_dir", "self.target_version", "fatal.cancel", "progress.text", "msilib.add_tables", "os.listdir", "msilib.Binary", "metadata.get_version", "exit_dialog.next", "fatal.text", "maint.cancel", "msilib.CAB", "prep.back", "todo.append", "self.plat_name", "self.reinitialize_command", "whichusers.cancel", "seldlg.control", "self.pushbutton", "self.dist_dir", "msilib.Win64", "maint.next", "self.versions", "self.skip_build", "inuse.next", "install_lib.compile", "db.Commit", "seldlg.cancel", "exit_dialog.title", "self.get_installer_filename", "cancel.pushbutton", "log.info", "cost.xbutton", "progress.back", "costing.text", "fatal.back", "install.skip_build", "exit_dialog.cancel", "os.unlink", "sys.path", "prep.cancel", "todo.pop", "metadata.maintainer"]}, "bdist_rpm.py": {"libraries": ["distutils.debug.DEBUG", "distutils.sysconfig.get_python_version", "distutils.log", "distutils.util.get_platform", "distutils.file_util.write_file", "sys", "subprocess", "os", "distutils.core.Command", "distutils.errors.*"], "function_names": ["_make_spec_file", "_format_changelog", "initialize_options", "run", "finalize_options", "finalize_package_data", "_dist_path"], "function_calls": ["isinstance", "len", "DistutilsPlatformError", "DistutilsOptionError", "getattr", "DistutilsFileError", "DistutilsExecError", "get_python_version", "open", "repr", "print"], "class_names": ["bdist_rpm"], "class_method_calls": ["line.strip", "self.set_undefined_options", "sys.executable", "self.bdist_base", "out.close", "self.use_rpm_opt_flags", "self.release", "self.install_script", "self.move_file", "self.distribution", "self.ensure_string", "changelog.strip", "self.clean_script", "self.post_install", "self.keep_temp", "self.verify_script", "sys.argv", "self.changelog", "new_changelog.append", "self.pre_install", "self.build_requires", "sdist.get_archive_files", "self.prep_script", "self.no_autoreq", "self.icon", "self.prep", "vendor_hook.replace", "field.lower", "self.spec_only", "self._make_spec_file", "self.run_command", "self.dry_run", "self._format_changelog", "self.use_bzip2", "self.copy_file", "self.ensure_string_list", "self.pre_uninstall", "os.path", "self.ensure_filename", "self.build_script", "self.rpm3_mode", "rpm_cmd.append", "self.spawn", "self.fix_python", "self.provides", "new_changelog.extend", "self.doc_files", "self.mkpath", "self.distribution_name", "self.binary_only", "self.group", "self.serial", "self.vendor", "self.source_only", "binary_rpms.append", "self.post_uninstall", "sdist.formats", "self.force_arch", "self.requires", "self.reinitialize_command", "rpm_cmd.extend", "subprocess.getoutput", "self.packager", "out.readline", "self.dist_dir", "self.finalize_package_data", "os.popen", "spec_file.extend", "spec_file.append", "f.read", "self.execute", "log.info", "self.obsoletes", "self.rpm_base", "self.quiet", "self.conflicts", "vendor_hook.splitlines", "self.python", "os.name"]}, "bdist_wininst.py": {"libraries": ["distutils.dir_util.remove_tree", "distutils.sysconfig.get_python_version", "distutils.dir_util.create_tree", "time", "distutils.log", "msvcrt.CRT_ASSEMBLY_VERSION", "tempfile.mktemp", "distutils.util.get_platform", "sys", "warnings", "struct", "distutils", "os", "distutils.core.Command", "distutils.errors.*"], "function_names": ["escape", "initialize_options", "get_exe_bytes", "run", "create_exe", "get_inidata", "__init__", "finalize_options", "get_installer_filename"], "function_calls": ["isinstance", "remove_tree", "DistutilsPlatformError", "len", "super", "DistutilsOptionError", "escape", "mktemp", "getattr", "get_platform", "open", "get_python_version", "setattr"], "class_names": ["bdist_wininst"], "class_method_calls": ["sys.platform", "self.plat_name", "self.reinitialize_command", "self.set_undefined_options", "s.replace", "self.dist_dir", "metadata.long_description", "install_lib.optimize", "self.make_archive", "install.plat_name", "self.get_exe_bytes", "self.skip_build", "cfgdata.encode", "build.build_base", "self.no_target_optimize", "self.title", "install.root", "install_lib.compile", "time.ctime", "log.debug", "self.get_installer_filename", "warnings.warn", "self.mkpath", "self.install_script", "self.create_exe", "os.remove", "f.read", "self.distribution", "self.no_target_compile", "script.read", "log.info", "self.user_access_control", "self.announce", "lines.append", "install.ensure_finalized", "self.pre_install_script", "self.run_command", "self.get_finalized_command", "distutils.__version__", "struct.pack", "name.capitalize", "install.run", "self.dry_run", "install.skip_build", "install.warn_dir", "self.keep_temp", "key.upper", "file.write", "time.time", "sys.path", "os.path", "self.bitmap", "build.build_lib", "CRT_ASSEMBLY_VERSION.partition", "self.bdist_dir", "self.target_version", "bdist.plat_name", "sys.version_info", "f.close", "self.get_inidata"]}, "build.py": {"libraries": ["distutils.util.get_platform", "distutils.ccompiler.show_compilers", "sys", "os", "distutils.core.Command", "distutils.errors.DistutilsOptionError"], "function_names": ["show_compilers", "has_pure_modules", "initialize_options", "run", "has_c_libraries", "finalize_options", "has_scripts", "has_ext_modules"], "function_calls": ["show_compilers", "isinstance", "DistutilsOptionError", "get_platform", "int", "hasattr"], "class_names": ["build"], "class_method_calls": ["self.plat_name", "self.build_scripts", "sys.executable", "self.force", "self.build_base", "self.build_temp", "self.compiler", "self.debug", "self.get_sub_commands", "self.build_platlib", "self.build_purelib", "self.distribution", "self.run_command", "self.executable", "os.path", "self.build_lib", "os.name", "sys.version_info", "self.parallel"]}, "build_clib.py": {"libraries": ["distutils.log", "distutils.sysconfig.customize_compiler", "distutils.ccompiler.new_compiler", "os", "distutils.core.Command", "distutils.ccompiler.show_compilers", "distutils.errors.*"], "function_names": ["show_compilers", "initialize_options", "build_libraries", "run", "finalize_options", "get_source_files", "get_library_names", "check_library_list"], "function_calls": ["show_compilers", "isinstance", "list", "len", "DistutilsSetupError", "customize_compiler", "new_compiler"], "class_names": ["build_clib"], "class_method_calls": ["self.build_libraries", "os.pathsep", "self.set_undefined_options", "self.force", "self.build_temp", "self.compiler", "self.debug", "self.undef", "self.include_dirs", "self.distribution", "self.define", "log.info", "filenames.extend", "os.sep", "self.dry_run", "self.check_library_list", "build_info.get", "self.build_clib", "lib_names.append", "self.libraries"]}, "build_ext.py": {"libraries": ["contextlib", "distutils.ccompiler.new_compiler", "concurrent.futures.ThreadPoolExecutor", "distutils._msvccompiler.MSVCCompiler", "distutils.sysconfig.get_config_h_filename", "distutils.log", "distutils.util.get_platform", "os", "distutils.sysconfig.get_config_var", "distutils.ccompiler.show_compilers", "re", "distutils.sysconfig.get_python_version", "distutils.extension.Extension", "distutils.sysconfig.customize_compiler", "distutils.sysconfig", "site.USER_BASE", "sys", "distutils.dep_util.newer_group", "distutils.core.Command", "distutils.errors.*"], "function_names": ["get_export_symbols", "find_swig", "swig_sources", "show_compilers", "_build_extensions_parallel", "get_libraries", "get_source_files", "get_ext_filename", "get_ext_fullpath", "_filter_build_errors", "run", "get_ext_fullname", "check_extensions_list", "build_extension", "get_outputs", "_build_extensions_serial", "initialize_options", "finalize_options", "build_extensions"], "function_calls": ["getattr", "get_platform", "get_python_version", "newer_group", "show_compilers", "isinstance", "DistutilsOptionError", "get_config_var", "DistutilsSetupError", "ThreadPoolExecutor", "setattr", "new_compiler", "list", "DistutilsPlatformError", "Extension", "int", "zip", "enumerate", "customize_compiler", "hasattr", "len", "get_config_h_filename"], "class_names": ["build_ext"], "class_method_calls": ["ext.extra_link_args", "self.set_undefined_options", "plat_py_include.split", "self.swig_opts", "sys.executable", "self.check_extensions_list", "ext.depends", "self.debug", "self.build_extensions", "self.swig_sources", "self.distribution", "macros.append", "ext.runtime_library_dirs", "fut.result", "sysconfig.get_config_var", "ext.undef_macros", "ext.extra_objects", "outputs.append", "swig_cmd.append", "extension.swig_opts", "ext.library_dirs", "new_sources.append", "self.library_dirs", "self.undef", "self.include_dirs", "sysconfig.python_build", "self.warn", "ext.name", "self.get_finalized_command", "ext.language", "ext.export_symbols", "self._build_extensions_serial", "ext.libraries", "self.dry_run", "build_info.get", "sys.hexversion", "contextlib.contextmanager", "self.ensure_string_list", "self.build_extension", "self.get_ext_filename", "ext_name.split", "os.path", "self._filter_build_errors", "self.swig", "self.get_ext_fullname", "self.get_export_symbols", "ext.include_dirs", "swig_sources.append", "sys.platform", "os.pathsep", "self.compiler", "ext.optional", "self.swig_cpp", "self.spawn", "sys.prefix", "self._built_objects", "self.get_libraries", "self.package", "self.find_swig", "suffix.encode", "log.debug", "fullname.split", "filenames.extend", "self.inplace", "os.environ", "extension_name_re.match", "re.compile", "self.verbose", "self.libraries", "self.get_ext_fullpath", "self.parallel", "self.link_objects", "ext.sources", "self._build_extensions_parallel", "build_py.get_package_dir", "sys.base_exec_prefix", "ext.define_macros", "self.plat_name", "self.force", "self.build_temp", "swig_cmd.extend", "self.extensions", "build_clib.get_library_names", "self.rpath", "self.define", "log.info", "executor.submit", "log.warn", "os.cpu_count", "sysconfig.get_python_inc", "py_include.split", "build_clib.build_clib", "self.user", "self.build_lib", "objects.extend", "os.name", "ext.extra_compile_args", "sys.exec_prefix"]}, "build_py.py": {"libraries": ["distutils.errors.*", "distutils.log", "distutils.util.convert_path", "importlib.util", "distutils.util.byte_compile", "sys", "distutils.util.Mixin2to3", "os", "distutils.core.Command", "glob"], "function_names": ["byte_compile", "find_package_modules", "find_all_modules", "build_package_data", "check_module", "get_source_files", "get_module_outfile", "build_module", "run", "find_modules", "build_packages", "build_modules", "get_data_files", "get_outputs", "find_data_files", "initialize_options", "get_package_dir", "check_package", "finalize_options"], "function_calls": ["isinstance", "list", "DistutilsOptionError", "len", "DistutilsFileError", "byte_compile", "int", "TypeError", "convert_path"], "class_names": ["build_py_2to3", "build_py"], "class_method_calls": ["self.get_data_files", "package.split", "self.set_undefined_options", "self.force", "self.check_module", "self.build_packages", "self.package_dir", "modules.append", "self.find_modules", "self.package", "importlib.util", "modules.extend", "self.byte_compile", "self.build_modules", "self.get_package_dir", "self.mkpath", "data.append", "self.warn", "glob.glob", "self.distribution", "self.compile", "self.find_data_files", "self.run_2to3", "self.packages", "os.sep", "self.optimize", "self.dry_run", "self.copy_file", "module.split", "self.debug_print", "self.updated_files", "tail.insert", "self.build_package_data", "log.warn", "self.build_module", "self.get_outputs", "self.find_package_modules", "self.py_modules", "self.package_data", "self.check_package", "os.path", "self.find_all_modules", "build_py.build_module", "self.build_lib", "sys.dont_write_bytecode", "glob.escape", "self.data_files", "self.get_module_outfile", "outputs.append", "files.extend"]}, "build_scripts.py": {"libraries": ["re", "distutils.log", "stat.ST_MODE", "distutils.sysconfig", "tokenize", "distutils.util.Mixin2to3", "distutils.dep_util.newer", "os", "distutils.core.Command", "distutils.util.convert_path"], "function_names": ["initialize_options", "run", "copy_scripts", "finalize_options", "get_source_files"], "function_calls": ["newer", "convert_path", "ValueError", "open"], "class_names": ["build_scripts", "build_scripts_2to3"], "class_method_calls": ["first_line_re.match", "self.set_undefined_options", "self.force", "tokenize.detect_encoding", "build_scripts.copy_scripts", "outf.write", "self.copy_scripts", "os.fsencode", "f.readline", "log.debug", "self.mkpath", "sysconfig.python_build", "self.warn", "self.distribution", "outf.writelines", "log.info", "f.seek", "self.run_2to3", "updated_files.append", "shebang.decode", "sysconfig.get_config_var", "self.outfiles", "self.dry_run", "self.copy_file", "self.executable", "os.path", "f.readlines", "re.compile", "self.scripts", "self.build_dir", "os.chmod", "os.name", "os.stat", "match.group", "f.close", "outfiles.append"]}, "check.py": {"libraries": ["distutils.errors.DistutilsSetupError", "docutils.nodes", "docutils.frontend", "docutils.parsers.rst.Parser", "io.StringIO", "docutils.utils.Reporter", "distutils.core.Command"], "function_names": ["initialize_options", "run", "warn", "check_restructuredtext", "__init__", "finalize_options", "check_metadata", "_check_rst_data", "system_message"], "function_calls": ["SilentReporter", "getattr", "DistutilsSetupError", "Parser", "hasattr"], "class_names": ["SilentReporter", "check"], "class_method_calls": ["settings.debug", "settings.warning_stream", "metadata.author", "self.messages", "self.check_metadata", "metadata.author_email", "settings.error_encoding_error_handler", "reporter.messages", "Command.warn", "self.strict", "settings.report_level", "settings.tab_width", "self.restructuredtext", "self._warnings", "missing.append", "self.levels", "settings.error_encoding", "self.warn", "metadata.maintainer_email", "self.metadata", "self.distribution", "document.note_source", "self.check_restructuredtext", "frontend.OptionParser", "settings.halt_level", "settings.pep_references", "nodes.document", "parser.parse", "self._check_rst_data", "settings.rfc_references", "Reporter.__init__", "nodes.system_message", "metadata.maintainer"]}, "clean.py": {"libraries": ["distutils.dir_util.remove_tree", "os", "distutils.core.Command", "distutils.log"], "function_names": ["finalize_options", "run", "initialize_options"], "function_calls": ["remove_tree"], "class_names": ["clean"], "class_method_calls": ["log.info", "self.all", "os.path", "self.build_lib", "self.set_undefined_options", "self.build_scripts", "self.dry_run", "log.debug", "self.build_base", "self.build_temp", "self.bdist_base", "log.warn", "os.rmdir"]}, "config.py": {"libraries": ["json", "re", "io", "threading", "select", "socketserver.ThreadingTCPServer", "configparser", "struct", "sys", "logging.handlers", "socketserver.StreamRequestHandler", "errno", "logging", "traceback"], "function_names": ["_handle_existing_loggers", "valid_ident", "_resolve", "listen", "stopListening", "convert", "configure_formatter", "handle", "configure_root", "_install_handlers", "resolve", "cfg_convert", "common_logger_config", "configure_filter", "_install_loggers", "ext_convert", "get", "configure_logger", "convert_with_key", "__init__", "configure", "as_tuple", "_clearExistingHandlers", "dictConfig", "run", "add_filters", "_strip_spaces", "pop", "serve_until_stopped", "add_handlers", "configure_handler", "configure_custom", "_create_formatters", "fileConfig", "__getitem__"], "function_calls": ["_handle_existing_loggers", "valid_ident", "sorted", "getattr", "_resolve", "_install_handlers", "vars", "Server", "isinstance", "issubclass", "ConvertingTuple", "__import__", "super", "fileConfig", "_install_loggers", "str", "tuple", "ConvertingList", "staticmethod", "converter", "dict", "setattr", "ValueError", "list", "ConvertingDict", "_clearExistingHandlers", "dictConfig", "factory", "klass", "int", "type", "_strip_spaces", "eval", "hasattr", "len", "map", "callable", "dictConfigClass", "TypeError", "_create_formatters", "c"], "class_names": ["Server", "ConvertingMixin", "ConvertingTuple", "ConvertingDict", "ConfigStreamHandler", "ConvertingList", "ConfigSocketReceiver", "BaseConfigurator", "DictConfigurator"], "class_method_calls": ["self.common_logger_config", "chunk.decode", "configparser.RawConfigParser", "v.__traceback__", "e.errno", "self.WORD_PATTERN", "json.loads", "result.setLevel", "ThreadingTCPServer.__init__", "logger.propagate", "config.update", "logger.handlers", "self.convert", "self.value_converters", "config.get", "fixups.append", "logging.PlaceHolder", "logging.Formatter", "dict.__getitem__", "result.setFormatter", "self.config", "configparser.ConfigParser", "tuple.__getitem__", "logger.disabled", "cp.read", "llist.remove", "self.importer", "name.pop", "self.server", "m.groupdict", "self.configure_logger", "deferred.append", "log.setLevel", "flist.split", "self.abort", "dict.pop", "traceback.print_exc", "self.DOT_PATTERN", "self.timeout", "handler_config.get", "value.configurator", "self.connection", "logging.NOTSET", "cp.get", "result.key", "self.configure_root", "io.StringIO", "self.CONVERT_PATTERN", "select.select", "self.DIGIT_PATTERN", "struct.unpack", "self.rcvr", "m.groups", "root.removeHandler", "logging._releaseLock", "logger.removeHandler", "log.addHandler", "root.handlers", "IDENTIFIER.match", "existing.sort", "self.port", "self.resolve", "existing.index", "s.split", "list.__getitem__", "section.getint", "h.setFormatter", "filterer.addFilter", "self.hdlr", "logging.handlers", "logging.Filter", "logging.Handler", "logging.shutdown", "logging._checkLevel", "logging._acquireLock", "kwargs.pop", "m.end", "self.handle_request", "self.ready", "self.configurator", "child_loggers.append", "server.server_address", "re.I", "llist.split", "self.socket", "logger.addHandler", "conn.recv", "dict.get", "self.convert_with_key", "list.pop", "root.manager", "self.configure_filter", "name.split", "re.compile", "errno.ECONNRESET", "self.as_tuple", "logging._handlers", "h.setLevel", "self.server_close", "section.get", "handler.setLevel", "handler.name", "self.INDEX_PATTERN", "self.configure_custom", "hlist.split", "h.setTarget", "threading.Event", "logging.getLogger", "str.strip", "server.serve_until_stopped", "cp.read_file", "logging.root", "result.parent", "props.items", "self.add_filters", "v.__cause__", "self.configure_formatter", "sys.exc_info", "self.configure_handler", "self.add_handlers", "logger.setLevel", "config.pop", "_listener.abort", "e.__cause__", "logging._handlerList", "threading.Thread", "self.verify", "existing.remove"]}, "install.py": {"libraries": ["distutils.debug.DEBUG", "distutils.sysconfig.get_config_vars", "distutils.util.subst_vars", "distutils.util.change_root", "distutils.log", "pprint.pprint", "distutils.util.get_platform", "distutils.file_util.write_file", "site.USER_SITE", "sys", "distutils.fancy_getopt.longopt_xlate", "site.USER_BASE", "os", "distutils.errors.DistutilsPlatformError", "distutils.core.Command", "distutils.errors.DistutilsOptionError", "distutils.util.convert_path"], "function_names": ["create_home_path", "change_roots", "select_scheme", "has_lib", "has_headers", "expand_basedirs", "has_scripts", "finalize_other", "dump_dirs", "run", "create_path_file", "convert_paths", "handle_extra_path", "get_outputs", "has_data", "initialize_options", "_expand_attrs", "get_inputs", "finalize_options", "finalize_unix", "expand_dirs"], "function_calls": ["pprint", "isinstance", "len", "DistutilsOptionError", "DistutilsPlatformError", "change_root", "get_config_vars", "getattr", "range", "get_platform", "convert_path", "subst_vars", "map", "setattr", "print"], "class_names": ["install"], "class_method_calls": ["self.extra_path", "self.expand_dirs", "self.select_scheme", "self.install_platbase", "opt_name.translate", "self.install_platlib", "self.convert_paths", "self.set_undefined_options", "os.makedirs", "sys.exec_prefix", "self.change_roots", "self.install_lib", "self.force", "self.build_base", "self.user_options", "self.finalize_unix", "self.handle_extra_path", "sys.prefix", "self.skip_build", "path.startswith", "self.get_sub_commands", "self.install_path_file", "user_options.append", "self.root", "inputs.extend", "log.debug", "self.extra_dirs", "self.install_usersite", "self.config_vars", "self.warn", "self.exec_prefix", "self.distribution", "self.execute", "self.install_libbase", "self.install_purelib", "self.compile", "boolean_options.append", "self.install_headers", "self.get_finalized_command", "self.run_command", "self.install_userbase", "self.negative_opt", "cmd.get_outputs", "self.optimize", "self.dump_dirs", "self.finalize_other", "self.record", "self.debug_print", "sys.abiflags", "self.home", "self.warn_dir", "log.warn", "self.install_scripts", "self.get_outputs", "self._expand_attrs", "self.user", "sys.path", "os.path", "self.install_base", "self.build_lib", "sys.version", "cmd.get_inputs", "self.prefix", "os.name", "self.path_file", "sys.version_info", "self.expand_basedirs", "self.create_path_file", "outputs.append", "self.install_data", "self.create_home_path"]}, "install_data.py": {"libraries": ["distutils.util.change_root", "os", "distutils.core.Command", "distutils.util.convert_path"], "function_names": ["get_outputs", "initialize_options", "run", "get_inputs", "finalize_options"], "function_calls": ["convert_path", "isinstance", "change_root"], "class_names": ["install_data"], "class_method_calls": ["os.path", "self.outfiles", "self.root", "self.set_undefined_options", "self.install_dir", "self.warn", "self.force", "self.copy_file", "self.data_files", "self.mkpath", "self.warn_dir", "self.distribution"]}, "install_egg_info.py": {"libraries": ["re", "distutils.log", "distutils.dir_util", "sys", "distutils.cmd.Command", "os"], "function_names": ["get_outputs", "initialize_options", "run", "safe_name", "finalize_options", "to_filename", "safe_version"], "function_calls": ["to_filename", "safe_version", "safe_name", "open"], "class_names": ["install_egg_info"], "class_method_calls": ["log.info", "version.replace", "dir_util.remove_tree", "re.sub", "name.replace", "os.path", "os.makedirs", "self.set_undefined_options", "self.target", "self.install_dir", "self.dry_run", "sys.version_info", "self.outputs", "os.unlink", "self.distribution", "self.execute"]}, "install_headers.py": {"libraries": ["distutils.core.Command"], "function_names": ["get_outputs", "initialize_options", "run", "get_inputs", "finalize_options"], "function_calls": [], "class_names": ["install_headers"], "class_method_calls": ["self.outfiles", "self.set_undefined_options", "self.install_dir", "self.force", "self.copy_file", "self.mkpath", "self.distribution"]}, "install_lib.py": {"libraries": ["importlib.util", "distutils.util.byte_compile", "sys", "os", "distutils.core.Command", "distutils.errors.DistutilsOptionError"], "function_names": ["get_outputs", "initialize_options", "install", "byte_compile", "run", "_mutate_outputs", "_bytecode_filenames", "get_inputs", "finalize_options", "build"], "function_calls": ["isinstance", "len", "DistutilsOptionError", "getattr", "byte_compile", "int"], "class_names": ["install_lib"], "class_method_calls": ["self.set_undefined_options", "self.install_dir", "self.force", "self._bytecode_filenames", "build_py.get_outputs", "self.skip_build", "self.copy_tree", "bytecode_files.append", "self._mutate_outputs", "importlib.util", "inputs.extend", "self.byte_compile", "self.warn", "self.build", "self.distribution", "self.compile", "build_ext.get_outputs", "self.get_finalized_command", "self.run_command", "os.sep", "self.optimize", "self.dry_run", "self.install", "os.path", "build_cmd.get_outputs", "self.build_dir", "sys.dont_write_bytecode", "self.verbose", "outputs.append"]}, "install_scripts.py": {"libraries": ["stat.ST_MODE", "os", "distutils.core.Command", "distutils.log"], "function_names": ["get_outputs", "initialize_options", "run", "get_inputs", "finalize_options"], "function_calls": [], "class_names": ["install_scripts"], "class_method_calls": ["self.get_outputs", "log.info", "self.run_command", "self.build_dir", "self.outfiles", "self.set_undefined_options", "self.install_dir", "self.dry_run", "self.force", "os.name", "os.chmod", "os.stat", "self.distribution", "self.skip_build", "self.copy_tree"]}, "register.py": {"libraries": ["urllib.parse", "urllib.request", "io", "distutils.errors.*", "distutils.log", "warnings.warn", "getpass", "distutils.core.PyPIRCCommand"], "function_names": ["send_metadata", "initialize_options", "_set_config", "build_post_data", "run", "post_to_server", "finalize_options", "check_metadata", "verify_metadata", "classifiers"], "function_calls": ["ValueError", "len", "str", "warn", "input", "type", "print"], "class_names": ["register"], "class_method_calls": ["urllib.request", "meta.get_keywords", "meta.get_classifiers", "self._set_config", "meta.get_provides", "self.build_post_data", "PyPIRCCommand.finalize_options", "self._get_rc_file", "check.ensure_finalized", "self.username", "meta.get_version", "self.post_to_server", "PyPIRCCommand.initialize_options", "self._read_pypi_response", "PyPIRCCommand.boolean_options", "self._read_pypirc", "self.strict", "self.get_sub_commands", "body.write", "meta.get_contact", "meta.get_requires", "self.classifiers", "PyPIRCCommand.user_options", "e.code", "self.has_config", "self.repository", "getpass.getpass", "body.getvalue", "opener.open", "data.items", "meta.get_name", "self.list_classifiers", "io.StringIO", "meta.get_platforms", "meta.get_contact_email", "meta.get_long_description", "self.distribution", "log.info", "self.announce", "meta.get_obsoletes", "self.run_command", "self.send_metadata", "e.fp", "meta.get_url", "self.finalize_options", "self.dry_run", "log.INFO", "auth.add_password", "self.verify_metadata", "meta.get_download_url", "self.password", "self.DEFAULT_REPOSITORY", "urllib.parse", "check.run", "choice.lower", "urllib.error", "self.realm", "self._store_pypirc", "check.restructuredtext", "meta.get_licence", "check.strict", "meta.get_description", "e.msg", "self.show_response"]}, "sdist.py": {"libraries": ["distutils.archive_util.ARCHIVE_FORMATS", "distutils.archive_util", "distutils.log", "distutils.dir_util", "distutils.errors.DistutilsOptionError", "distutils.fancy_getopt.FancyGetopt", "sys", "os", "warnings.warn", "distutils.errors.DistutilsTemplateError", "distutils.file_util", "glob.glob", "distutils.core.Command", "distutils.text_file.TextFile", "distutils.filelist.FileList", "distutils.util.convert_path"], "function_names": ["_cs_path_exists", "_add_defaults_scripts", "_add_defaults_optional", "check_metadata", "_add_defaults_ext", "get_file_list", "_add_defaults_c_libs", "_add_defaults_data_files", "checking_metadata", "_add_defaults_python", "get_archive_files", "make_release_tree", "show_formats", "_add_defaults_standards", "add_defaults", "prune_file_list", "make_distribution", "run", "read_template", "write_manifest", "read_manifest", "initialize_options", "_manifest_is_not_generated", "finalize_options"], "function_calls": ["isinstance", "DistutilsOptionError", "glob", "FileList", "TextFile", "warn", "open", "filter", "convert_path", "FancyGetopt", "hasattr"], "class_names": ["sdist"], "class_method_calls": ["self._add_defaults_c_libs", "dir_util.create_tree", "dir_util.remove_tree", "self.filelist", "formats.append", "self.make_distribution", "sys.platform", "build_py.get_source_files", "line.strip", "template.current_line", "archive_util.check_archive_formats", "self.make_release_tree", "self.dist_dir", "self.formats", "self.get_file_list", "self._add_defaults_data_files", "check.ensure_finalized", "fp.close", "self.make_archive", "file_util.write_file", "self._add_defaults_standards", "self.get_sub_commands", "self.write_manifest", "build.build_base", "template.readline", "self._add_defaults_python", "self.mkpath", "self.manifest_only", "self.prune_file_list", "self.warn", "self.distribution", "build_py.data_files", "self.execute", "log.info", "archive_files.append", "self.READMES", "self.get_finalized_command", "self.run_command", "self.group", "self._add_defaults_scripts", "build_scripts.get_source_files", "self.archive_files", "self.dry_run", "build_ext.get_source_files", "self.owner", "self.copy_file", "template.filename", "self.use_defaults", "self.ensure_string_list", "ARCHIVE_FORMATS.keys", "check.run", "self._add_defaults_optional", "self.keep_temp", "self._add_defaults_ext", "self._manifest_is_not_generated", "self.add_defaults", "log.warn", "self.manifest", "self.read_manifest", "os.path", "self.metadata_check", "self.prune", "os.listdir", "self.read_template", "template.close", "fp.readline", "line.startswith", "content.insert", "build_clib.get_source_files", "formats.sort", "self.template", "self.force_manifest", "self._cs_path_exists"]}, "upload.py": {"libraries": ["io", "platform", "urllib.request.Request", "distutils.log", "urllib.parse.urlparse", "base64.standard_b64encode", "distutils.spawn.spawn", "hashlib", "urllib.request.HTTPError", "distutils.errors.DistutilsError", "os", "urllib.request.urlopen", "distutils.errors.DistutilsOptionError", "distutils.core.PyPIRCCommand"], "function_names": ["finalize_options", "run", "initialize_options", "upload_file"], "function_calls": ["DistutilsError", "isinstance", "DistutilsOptionError", "len", "str", "urlparse", "standard_b64encode", "urlopen", "type", "open", "Request", "AssertionError", "spawn"], "class_names": ["upload"], "class_method_calls": ["meta.get_keywords", "meta.get_classifiers", "meta.get_provides", "title.encode", "PyPIRCCommand.finalize_options", "result.msg", "self.username", "self.sign", "io.BytesIO", "result.getcode", "meta.get_version", "PyPIRCCommand.initialize_options", "self._read_pypi_response", "PyPIRCCommand.boolean_options", "self._read_pypirc", "self.upload_file", "self.identity", "body.write", "meta.get_contact", "meta.get_requires", "e.code", "PyPIRCCommand.user_options", "self.repository", "log.ERROR", "hashlib.md5", "body.getvalue", "data.items", "meta.get_name", "meta.get_platforms", "f.read", "meta.get_contact_email", "meta.get_long_description", "self.distribution", "self.announce", "meta.get_obsoletes", "meta.get_url", "self.dry_run", "log.INFO", "meta.get_download_url", "self.password", "self.realm", "meta.get_licence", "os.path", "meta.get_description", "e.msg", "f.close", "self.show_response", "boundary.encode"]}, "core.py": {"libraries": ["distutils.debug.DEBUG", "distutils.config.PyPIRCCommand", "distutils.errors.*", "distutils.extension.Extension", "sys", "distutils.cmd.Command", "os", "distutils.dist.Distribution"], "function_names": ["gen_usage", "run_setup", "setup"], "function_calls": ["ValueError", "str", "klass", "SystemExit", "gen_usage", "open", "print", "vars", "exec", "RuntimeError"], "class_names": [], "class_method_calls": ["dist.run_commands", "os.path", "dist.script_name", "dist.parse_config_files", "sys.stderr", "attrs.get", "dist.dump_option_dicts", "dist.parse_command_line", "sys.argv", "f.read"]}, "cygwinccompiler.py": {"libraries": ["distutils.unixccompiler.UnixCCompiler", "distutils.errors.DistutilsExecError", "distutils.ccompiler.gen_lib_options", "distutils.errors.CompileError", "distutils.spawn.find_executable", "distutils.file_util.write_file", "copy", "distutils.log", "distutils.ccompiler.gen_preprocess_options", "subprocess.Popen", "os", "distutils.errors.UnknownFileError", "re", "distutils.errors.CCompilerError", "distutils.sysconfig", "subprocess.PIPE", "subprocess.check_output", "sys", "distutils.version.LooseVersion"], "function_names": ["object_filenames", "get_msvcr", "_find_exe_version", "link", "__init__", "_compile", "get_versions", "check_config_h", "is_cygwingcc"], "function_calls": ["UnknownFileError", "CompileError", "ValueError", "get_msvcr", "_find_exe_version", "tuple", "Popen", "LooseVersion", "get_versions", "check_output", "open", "CCompilerError", "check_config_h", "is_cygwingcc", "find_executable"], "class_names": ["Mingw32CCompiler", "CygwinCCompiler"], "class_method_calls": ["copy.copy", "UnixCCompiler.link", "self.dll_libraries", "self.compiler_type", "self.obj_extension", "exc.strerror", "self.ld_version", "out.close", "self.spawn", "UnixCCompiler.__init__", "extra_preargs.extend", "config_h.close", "result.group", "self.compiler_so", "out_string.strip", "out.read", "self.src_extensions", "self.EXECUTABLE", "self.gcc_version", "self.warn", "self.linker_dll", "RE_VERSION.search", "self.execute", "CygwinCCompiler.__init__", "libraries.extend", "cmd.split", "self.debug_print", "obj_names.append", "config_h.read", "self.dllwrap_version", "extra_preargs.append", "self.set_executables", "os.path", "re.compile", "sys.version", "sysconfig.get_config_h_filename", "objects.append", "contents.append"]}, "debug.py": {"libraries": ["os"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["os.environ"]}, "dep_util.py": {"libraries": ["stat.ST_MTIME", "os", "distutils.errors.DistutilsFileError"], "function_names": ["newer_group", "newer_pairwise", "newer"], "function_calls": ["ValueError", "len", "DistutilsFileError", "newer", "range"], "class_names": [], "class_method_calls": ["os.stat", "os.path", "n_targets.append", "n_sources.append"]}, "dir_util.py": {"libraries": ["distutils.file_util.copy_file", "distutils.log", "distutils.errors.DistutilsInternalError", "distutils.errors.DistutilsFileError", "os", "errno"], "function_names": ["ensure_relative", "_build_cmdtuple", "create_tree", "copy_tree", "mkpath", "remove_tree"], "function_calls": ["isinstance", "sorted", "DistutilsFileError", "DistutilsInternalError", "set", "_build_cmdtuple", "copy_file", "mkpath", "copy_tree"], "class_names": [], "class_method_calls": ["outputs.extend", "cmdtuples.append", "os.mkdir", "os.symlink", "exc.args", "exc.errno", "_path_created.get", "tails.insert", "os.remove", "os.rmdir", "log.info", "os.sep", "e.strerror", "n.startswith", "log.warn", "created_dirs.append", "errno.EEXIST", "os.path", "os.listdir", "os.readlink", "need_dir.add", "outputs.append"]}, "dist.py": {"libraries": ["distutils.debug.DEBUG", "pprint.pformat", "distutils.fancy_getopt.FancyGetopt", "distutils.fancy_getopt.translate_longopt", "warnings", "distutils.versionpredicate", "distutils.log", "distutils.cmd.Command", "os", "distutils.command", "re", "distutils.core.gen_usage", "email.message_from_file", "distutils.util.check_environ", "configparser.ConfigParser", "sys", "distutils.util.strtobool", "distutils.util.rfc822_escape", "distutils.errors.*"], "function_names": ["get_option_dict", "read_pkg_file", "print_command_list", "get_version", "_get_toplevel_options", "parse_config_files", "has_data_files", "_read_field", "get_keywords", "get_provides", "has_modules", "get_long_description", "get_author_email", "get_classifiers", "get_contact", "get_contact_email", "reinitialize_command", "set_platforms", "find_config_files", "_show_help", "get_command_list", "get_maintainer_email", "dump_option_dicts", "has_headers", "get_command_obj", "get_name", "has_c_libraries", "__init__", "get_url", "set_requires", "set_obsoletes", "has_scripts", "fix_help_options", "_write_list", "is_pure", "get_description", "get_license", "set_classifiers", "set_keywords", "write_pkg_file", "announce", "write_pkg_info", "_parse_command_opts", "get_command_class", "_set_command_options", "get_author", "set_provides", "get_obsoletes", "handle_display_options", "get_maintainer", "get_requires", "get_download_url", "has_pure_modules", "run_command", "finalize_options", "get_command_packages", "run_commands", "parse_command_line", "_ensure_list", "get_fullname", "get_platforms", "_read_list", "print_commands", "has_ext_modules"], "function_calls": ["frozenset", "sorted", "getattr", "_read_field", "SystemExit", "rfc822_escape", "message_from_file", "FancyGetopt", "vars", "repr", "isinstance", "strtobool", "issubclass", "ConfigParser", "__import__", "DistutilsOptionError", "check_environ", "DistutilsModuleError", "open", "fix_help_options", "setattr", "list", "klass", "DistributionMetadata", "DistutilsClassError", "type", "func", "hasattr", "len", "gen_usage", "translate_longopt", "pformat", "callable", "_read_list", "_ensure_list", "DistutilsArgError", "print"], "class_names": ["Distribution", "DistributionMetadata"], "class_method_calls": ["self.ext_modules", "self.get_platforms", "self.read_pkg_file", "self.dist_files", "self.classifiers", "pkgs.split", "self.help", "cmd_class.user_options", "parser.set_aliases", "opt.replace", "extra_commands.append", "self.headers", "command.finalized", "self.license", "self.get_option_dict", "self.find_config_files", "self.get_command_packages", "negative_opt.copy", "cmd_class.help_options", "self.print_commands", "self.help_commands", "sys.stderr", "is_std.get", "self.platforms", "log.WARN", "self.print_command_list", "cmd_obj.run", "self.version", "self.description", "arg.startswith", "self.keywords", "self.display_options", "cmd_obj.ensure_finalized", "cmd_options.items", "self.get_keywords", "value.split", "self._get_toplevel_options", "attrs.items", "self.get_url", "opts.help", "parser.options", "self.get_contact_email", "parser.sections", "attrs.get", "self.get_version", "self.include_dirs", "parser.set_negative_aliases", "self._set_command_options", "warnings.warn", "self.command_packages", "self.author", "msg.get_all", "self.command_options", "parser.get", "self.has_ext_modules", "self.command_obj", "self.announce", "self.run_command", "self.author_email", "self.get_name", "self.get_classifiers", "self.finalize_options", "self.dry_run", "self.download_url", "klass.description", "self.has_c_libraries", "option_dict.items", "command_obj.negative_opt", "self._parse_command_opts", "os.path", "self.common_usage", "options.items", "self.get_license", "pkgs.insert", "command.initialize_options", "klass.user_options", "klass.help_options", "self.get_description", "self.package_dir", "log.set_verbosity", "sys.prefix", "self.provides", "out.split", "self.write_pkg_file", "self.get_long_description", "self.has_pure_modules", "parser.__init__", "self._show_help", "self.maintainer_email", "self.get_requires", "self.metadata", "command.get_command_name", "distutils.command", "klass.__name__", "self.url", "parser.set_option_table", "log.INFO", "new_options.append", "parser.getopt", "is_display_option.get", "files.append", "sys.base_prefix", "self.py_modules", "self.package_data", "re.compile", "self.commands", "self.scripts", "self.display_option_names", "self.verbose", "self.libraries", "command_re.match", "self.data_files", "parser.read", "negative_opt.update", "rv.append", "self.handle_display_options", "self.get_provides", "parser.get_attr_name", "self.extra_path", "self.requires", "command_obj.get_command_name", "self.reinitialize_command", "pkg.strip", "self.get_obsoletes", "self.ext_package", "self.want_user_cfg", "self.long_description", "sys.modules", "distutils.versionpredicate", "self.name", "parser.get_option_order", "log.log", "self.get_command_obj", "command_obj.boolean_options", "self.maintainer", "command.get_sub_commands", "log.info", "self.obsoletes", "self.packages", "v.strip", "self.negative_opt", "parser.print_help", "cmd_class.negative_opt", "self.password", "self.have_run", "self.get_command_class", "self.script_args", "os.name", "self._write_list", "self.script_name", "self.global_options", "self.cmdclass", "file.write", "self.get_contact", "elm.strip"]}, "errors.py": {"libraries": [], "function_names": ["__init__", "__str__"], "function_calls": ["super"], "class_names": ["HeaderDefect", "MessageParseError", "HeaderParseError", "StartBoundaryNotFoundDefect", "MessageError", "NonASCIILocalPartDefect", "NonPrintableDefect", "CharsetError", "InvalidMultipartContentTransferEncodingDefect", "InvalidBase64PaddingDefect", "BoundaryError", "CloseBoundaryNotFoundDefect", "ObsoleteHeaderDefect", "UndecodableBytesDefect", "InvalidBase64LengthDefect", "MultipartConversionError", "MisplacedEnvelopeHeaderDefect", "InvalidBase64CharactersDefect", "MissingHeaderBodySeparatorDefect", "MultipartInvariantViolationDefect", "InvalidHeaderDefect", "HeaderMissingRequiredValue", "NoBoundaryInMultipartDefect", "MessageDefect", "FirstHeaderLineIsContinuationDefect"], "class_method_calls": ["self.non_printables", "self.line"]}, "extension.py": {"libraries": ["distutils.sysconfig.parse_makefile", "distutils.sysconfig.expand_makefile_vars", "distutils.sysconfig._variable_rx", "distutils.util.split_quoted", "warnings", "os", "distutils.text_file.TextFile"], "function_names": ["__init__", "__repr__", "read_setup_file"], "function_calls": ["isinstance", "len", "Extension", "sorted", "TextFile", "all", "expand_makefile_vars", "parse_makefile", "id", "AssertionError", "split_quoted", "repr"], "class_names": ["Extension"], "class_method_calls": ["ext.extra_link_args", "self.define_macros", "ext.define_macros", "_variable_rx.match", "ext.library_dirs", "self.extra_link_args", "self.swig_opts", "value.find", "self.library_dirs", "self.name", "self.include_dirs", "warnings.warn", "self.language", "append_next_word.append", "file.readline", "ext.libraries", "self.runtime_library_dirs", "self.undef_macros", "file.close", "self.extra_compile_args", "ext.runtime_library_dirs", "self.depends", "self.extra_objects", "file.warn", "os.path", "self.optional", "extensions.append", "self.libraries", "self.__class__", "self.export_symbols", "self.sources", "ext.undef_macros", "ext.extra_objects", "ext.extra_compile_args", "ext.include_dirs", "ext.sources"]}, "fancy_getopt.py": {"libraries": ["re", "getopt", "sys", "string", "distutils.errors.*"], "function_names": ["generate_help", "_build_index", "getopt", "has_option", "print_help", "wrap_text", "_check_alias_dict", "__init__", "translate_longopt", "get_option_order", "fancy_getopt", "set_negative_aliases", "add_option", "set_option_table", "get_attr_name", "set_aliases", "_grok_option_table"], "function_calls": ["OptionDummy", "ValueError", "isinstance", "len", "RuntimeError", "wrap_text", "getattr", "DistutilsGetoptError", "DistutilsArgError", "ord", "FancyGetopt", "setattr", "print"], "class_names": ["OptionDummy", "FancyGetopt"], "class_method_calls": ["self._build_index", "self.takes_arg", "self.short2long", "self.negative_alias", "long_option.translate", "sys.stdout", "self.option_order", "parser.set_negative_aliases", "string.whitespace", "self.attr_name", "getopt.getopt", "self.option_table", "self.long_opts", "str.maketrans", "self.generate_help", "lines.append", "self.alias", "self.repeat", "self.get_attr_name", "longopt_re.match", "self.short_opts", "parser.getopt", "self.option_index", "getopt.error", "self._check_alias_dict", "re.compile", "aliases.items", "text.expandtabs", "text.translate", "opt.translate", "sys.argv", "self._grok_option_table", "file.write", "cur_line.append", "re.split"]}, "file_util.py": {"libraries": ["os.path.exists", "distutils.log", "stat.S_IMODE", "stat.ST_MODE", "os.path.isfile", "distutils.errors.DistutilsFileError", "os.path.basename", "os.path.dirname", "distutils.dep_util.newer", "os.path.isdir", "stat.ST_MTIME", "os", "errno", "stat.ST_ATIME"], "function_names": ["write_file", "copy_file", "move_file", "_copy_file_contents"], "function_calls": ["ValueError", "isfile", "basename", "DistutilsFileError", "isdir", "dirname", "exists", "S_IMODE", "open", "_copy_file_contents", "newer", "copy_file"], "class_names": [], "class_method_calls": ["fsrc.read", "os.rename", "os.symlink", "errno.EXDEV", "f.write", "os.utime", "log.debug", "fdst.write", "os.link", "log.info", "e.strerror", "os.unlink", "fdst.close", "fsrc.close", "os.path", "e.args", "os.chmod", "os.stat", "f.close"]}, "filelist.py": {"libraries": ["idlelib.run.fix_scaling", "idlelib.editor.fixwordbreaks", "tkinter.messagebox", "idlelib.editor.EditorWindow", "os", "tkinter.Tk", "unittest.main"], "function_names": ["canonize", "_test", "gotofileline", "unregister_maybe_terminate", "filename_changed_edit", "__init__", "open", "new", "close_all_callback"], "function_calls": ["list", "Tk", "fix_scaling", "FileList", "fixwordbreaks", "main", "print", "action"], "class_names": ["FileList"], "class_method_calls": ["edit._close", "root.withdraw", "self.open", "self.EditorWindow", "root.mainloop", "os.getcwd", "self.root", "messagebox.showerror", "self.vars", "edit.saved_change_hook", "flist.inversedict", "edit.gotoline", "edit.good_load", "edit.io", "os.path", "flist.new", "edit.close", "self.inversedict", "edit.top", "self.canonize", "self.dict"]}, "msvc9compiler.py": {"libraries": ["re", "distutils.errors.DistutilsExecError", "distutils.errors.CompileError", "distutils.ccompiler.gen_lib_options", "distutils.log", "distutils.ccompiler.CCompiler", "distutils.ccompiler.gen_preprocess_options", "distutils.errors.LinkError", "distutils.util.get_platform", "sys", "distutils.errors.LibError", "subprocess", "os", "distutils.errors.DistutilsPlatformError", "winreg"], "function_names": ["library_dir_option", "load_macros", "read_keys", "_remove_visual_c_ref", "normalize_and_reduce_paths", "sub", "removeDuplicates", "find_library_file", "manifest_setup_ldargs", "link", "__init__", "set_macro", "read_values", "convert_mbcs", "get_value", "create_static_lib", "query_vcvarsall", "get_build_version", "find_exe", "object_filenames", "compile", "library_option", "manifest_get_embed_info", "find_vcvarsall", "runtime_library_dir_option", "initialize"], "function_calls": ["LinkError", "getattr", "get_platform", "normalize_and_reduce_paths", "gen_lib_options", "RegEnumValue", "classmethod", "dec", "removeDuplicates", "KeyError", "str", "staticmethod", "open", "ValueError", "list", "DistutilsPlatformError", "LibError", "int", "query_vcvarsall", "get_build_version", "CompileError", "len", "find_vcvarsall", "RegOpenKeyEx", "RegEnumKey"], "class_names": ["MSVCCompiler", "Reg", "MacroExpander"], "class_method_calls": ["stderr.decode", "stdout.decode", "manifest_f.close", "winreg.EnumKey", "self.load_macros", "line.strip", "self.obj_extension", "self.initialized", "s.replace", "CCompiler.EXECUTABLE", "self._setup_compile", "self._need_link", "self.ldflags_shared_debug", "export_opts.append", "result.keys", "value.endswith", "manifest_f.write", "self._fix_object_args", "L.append", "self.compile_options_debug", "self.manifest_setup_ldargs", "self.__version", "Reg.get_value", "ld_args.extend", "compile_opts.extend", "sys.version", "self.initialize", "stdout.split", "arg.startswith", "newList.append", "Reg.convert_mbcs", "re.search", "self._fix_lib_args", "subprocess.Popen", "self.warn", "popen.wait", "winreg.EnumValue", "name.lower", "self.vsbase", "CCompiler.__init__", "self.manifest_get_embed_info", "sys.maxsize", "os.path", "re.DOTALL", "cls.convert_mbcs", "self.find_exe", "self.set_macro", "key.lower", "popen.stderr", "sys.platform", "os.pathsep", "self._rc_extensions", "self.linker", "self.spawn", "self.__root", "self._mc_extensions", "os.pardir", "self.src_extensions", "log.debug", "self.mkpath", "winreg.error", "re.sub", "subprocess.PIPE", "os.environ", "reduced_paths.append", "self._cpp_extensions", "winreg.HKEY_LOCAL_MACHINE", "re.compile", "manifest_f.read", "self.library_filename", "variable.split", "cls.read_values", "arg.split", "self.__paths", "self.__product", "self.plat_name", "self.preprocess_options", "popen.communicate", "ld_args.append", "self.rc", "self.mc", "self.res_extension", "compile_opts.append", "winreg.HKEY_USERS", "self.__arch", "self.lib", "self._remove_visual_c_ref", "self.compile_options", "self.cc", "line.split", "self.ldflags_static", "winreg.HKEY_CURRENT_USER", "self._c_extensions", "popen.stdout", "winreg.OpenKeyEx", "self.ldflags_shared", "winreg.HKEY_CLASSES_ROOT", "self.macros", "obj_names.append"]}, "msvccompiler.py": {"libraries": ["distutils.msvc9compiler.MacroExpander", "distutils.errors.CompileError", "distutils.errors.DistutilsExecError", "distutils.ccompiler.gen_lib_options", "distutils.log", "distutils.ccompiler.CCompiler", "distutils.ccompiler.gen_preprocess_options", "distutils.errors.LinkError", "win32con", "sys", "distutils.errors.LibError", "distutils.msvc9compiler.MSVCCompiler", "win32api", "os", "distutils.errors.DistutilsPlatformError", "winreg"], "function_names": ["library_dir_option", "load_macros", "read_keys", "set_path_env_var", "normalize_and_reduce_paths", "sub", "find_library_file", "link", "__init__", "set_macro", "read_values", "convert_mbcs", "create_static_lib", "get_build_version", "find_exe", "object_filenames", "compile", "library_option", "get_msvc_paths", "get_build_architecture", "runtime_library_dir_option", "initialize"], "function_calls": ["LinkError", "getattr", "normalize_and_reduce_paths", "gen_lib_options", "RegEnumValue", "dec", "str", "MacroExpander", "read_values", "convert_mbcs", "DistutilsPlatformError", "LibError", "int", "get_build_version", "CompileError", "len", "RegOpenKeyEx", "get_build_architecture", "RegEnumKey"], "class_names": ["MSVCCompiler", "MacroExpander"], "class_method_calls": ["self.__product", "self.__macros", "win32api.RegOpenKeyEx", "winreg.EnumKey", "self.load_macros", "self.preprocess_options", "self.obj_extension", "self.get_msvc_paths", "self._rc_extensions", "self.initialized", "win32api.RegEnumKey", "self.linker", "hkey_mod.HKEY_USERS", "s.replace", "self.set_path_env_var", "self._setup_compile", "CCompiler.EXECUTABLE", "hkey_mod.HKEY_CLASSES_ROOT", "self._need_link", "self.spawn", "self.ldflags_shared_debug", "self.__root", "self._fix_lib_args", "export_opts.append", "self._mc_extensions", "ld_args.append", "win32api.RegEnumValue", "self.rc", "self.mc", "self.src_extensions", "self.res_extension", "log.debug", "compile_opts.append", "self._fix_object_args", "self.mkpath", "L.append", "win32api.error", "winreg.error", "self.warn", "winreg.EnumValue", "self.__arch", "self.compile_options_debug", "log.info", "self.__version", "self.lib", "name.lower", "ld_args.extend", "compile_opts.extend", "os.environ", "CCompiler.__init__", "self.compile_options", "self.cc", "reduced_paths.append", "self._cpp_extensions", "self.ldflags_static", "os.path", "self._c_extensions", "hkey_mod.HKEY_CURRENT_USER", "winreg.OpenKeyEx", "sys.version", "hkey_mod.HKEY_LOCAL_MACHINE", "self.library_filename", "self.find_exe", "self.initialize", "self.ldflags_shared", "self.set_macro", "self.macros", "self.__paths", "obj_names.append"]}, "spawn.py": {"libraries": ["runpy", "types", "msvcrt", "_winapi", "sys", "context.reduction", "os"], "function_names": ["set_executable", "spawn_main", "get_preparation_data", "is_forking", "_main", "_check_not_importing_main", "_fixup_main_from_name", "get_command_line", "prepare", "import_main_path", "get_executable", "freeze_support", "_fixup_main_from_path"], "function_calls": ["spawn_main", "set_start_method", "len", "is_forking", "_main", "_check_not_importing_main", "_fixup_main_from_name", "getattr", "get_start_method", "prepare", "int", "dict", "_fixup_main_from_path", "RuntimeError"], "class_names": [], "class_method_calls": ["runpy.run_path", "os.dup", "sys.platform", "resource_tracker._resource_tracker", "sys.executable", "os.O_RDONLY", "sys.modules", "process.current_process", "_winapi.SYNCHRONIZE", "util._logger", "reduction.duplicate", "os.getcwd", "os.chdir", "util._log_to_stderr", "runpy.run_module", "current_main.__spec__", "sys.exit", "main_module.__spec__", "reduction.pickle", "d.update", "sys_path.index", "kwds.items", "main_module.__dict__", "util.get_logger", "mod_name.endswith", "util.log_to_stderr", "types.ModuleType", "self._bootstrap", "sys.path", "os.path", "old_main_modules.append", "os.fdopen", "process.ORIGINAL_DIR", "msvcrt.open_osfhandle", "sys.argv", "util._args_from_interpreter_flags", "arg.split", "_winapi.PROCESS_DUP_HANDLE", "_winapi.OpenProcess", "sys.exec_prefix"]}, "sysconfig.py": {"libraries": ["pprint", "re", "types", "_osx_support", "os.path.pardir", "os.path.realpath", "sys", "warnings", "_imp", "os"], "function_names": ["_get_default_scheme", "get_platform", "get_python_version", "get_path", "_main", "get_config_var", "_print_dict", "_extend_dict", "get_config_vars", "parse_config_h", "_getuserbase", "get_path_names", "_expand_vars", "_safe_realpath", "joinuser", "get_makefile_filename", "_init_non_posix", "is_python_build", "_parse_makefile", "_is_python_source_dir", "_subst_vars", "_generate_posix_vars", "_init_posix", "get_paths", "_fix_pcbuild", "get_scheme_names", "get_config_h_filename", "_get_sysconfigdata_name"], "function_calls": ["sorted", "_get_default_scheme", "getattr", "get_platform", "globals", "get_python_version", "get_path", "isinstance", "AttributeError", "_main", "__import__", "str", "tuple", "locals", "open", "list", "_extend_dict", "get_config_vars", "parse_config_h", "_getuserbase", "int", "_expand_vars", "_safe_realpath", "joinuser", "enumerate", "get_makefile_filename", "OSError", "_init_non_posix", "hasattr", "is_python_build", "len", "_parse_makefile", "_is_python_source_dir", "_generate_posix_vars", "_subst_vars", "_init_posix", "realpath", "_fix_pcbuild", "print", "_print_dict", "get_config_h_filename", "get_paths", "_get_sysconfigdata_name"], "class_names": [], "class_method_calls": ["sys.base_exec_prefix", "sys.platform", "_variable_rx.match", "line.strip", "os.makedirs", "sys.executable", "rel_re.match", "sys.modules", "_imp.extension_suffixes", "sys.prefix", "os.getcwd", "f.write", "done.items", "sys._framework", "s.format", "_temp.build_time_vars", "machine.replace", "other_dict.items", "data.items", "m1.start", "name.startswith", "target_dict.keys", "warnings.warn", "m.end", "_osx_support.get_platform_osx", "_findvar2_rx.search", "variables.remove", "value.strip", "_osx_support.customize_config_vars", "v.strip", "os.uname", "m.start", "m2.start", "_PROJECT_BASE.lower", "_findvar1_rx.search", "define_rx.match", "e.strerror", "sys.abiflags", "pprint.pprint", "os.environ", "v.replace", "sys.base_prefix", "_CONFIG_VARS.get", "notdone.keys", "types.ModuleType", "sys.maxsize", "os.path", "f.readlines", "re.compile", "vals.append", "sys.version", "vars.update", "os.name", "sys.version_info", "sys.implementation", "sys.argv", "fp.readline", "line.startswith", "undef_rx.match", "osname.lower", "module.build_time_vars", "m.group", "sys.exec_prefix"]}, "support.py": {"libraries": [], "function_names": ["wibble", "is_instance"], "function_calls": ["type", "issubclass"], "class_names": ["SomeClass", "X"], "class_method_calls": []}, "test_archive_util.py": {"libraries": ["pwd", "distutils.archive_util", "distutils.spawn.find_executable", "distutils.archive_util.check_archive_formats", "warnings", "test.support.run_unittest", "bz2", "unittest", "test.support.patch", "zipfile", "distutils.tests.support", "distutils.archive_util.make_tarball", "os", "tarfile", "grp", "distutils.spawn.spawn", "test.support.check_warnings", "zlib", "distutils.archive_util.ARCHIVE_FORMATS", "test.support.change_cwd", "lzma", "sys", "os.path.splitdrive", "distutils.archive_util.make_archive", "distutils.archive_util.make_zipfile"], "function_names": ["test_make_tarball_xz", "test_make_tarball_extended", "test_compress_deprecated", "test_tarfile_vs_tar", "test_make_archive", "test_make_archive_tar", "test_make_tarball_bzip2", "_create_files", "test_check_archive_formats", "_make_tarball", "test_make_zipfile_no_zlib", "can_fs_encode", "test_suite", "test_make_archive_cwd", "test_tarfile_root_owner", "test_make_archive_owner_group", "test_make_tarball_gzip", "test_make_tarball_latin1", "fake_zipfile", "test_make_tarball", "test_make_zipfile", "_tarinfo", "test_make_archive_gztar", "test_make_archive_bztar", "test_make_archive_xztar", "_breaks"], "function_calls": ["len", "can_fs_encode", "zipfile_class", "sorted", "RuntimeError", "splitdrive", "check_warnings", "make_archive", "patch", "spawn", "check_archive_formats", "run_unittest", "test_suite", "make_tarball", "make_zipfile", "change_cwd", "find_executable"], "class_names": ["ArchiveUtilTestCase"], "class_method_calls": ["os.mkdir", "support.LoggingSilencer", "unittest.skipUnless", "self.assertEqual", "support.TempdirManager", "called.append", "tar.getnames", "self._make_tarball", "os.getcwd", "os.chdir", "archive.close", "self._created_files", "self.write_file", "p.rstrip", "zipfile.ZipFile", "os.remove", "filename.encode", "tar.close", "pwd.getpwuid", "self.assertRaises", "warnings.simplefilter", "tarfile.open", "self.test_make_tarball", "self._create_files", "zipfile.ZIP_STORED", "unittest.makeSuite", "archive.getmembers", "self.assertIsNone", "w.warnings", "member.gid", "archive_util.zipfile", "grp.getgrgid", "self.mkdtemp", "kw.get", "os.path", "names.sort", "member.uid", "zf.namelist", "sys.getfilesystemencoding", "self._zip_created_files", "self.assertTrue", "self._tarinfo", "unittest.TestCase", "self.assertFalse"]}, "test_bdist.py": {"libraries": ["unittest", "distutils.command.bdist.bdist", "warnings", "distutils.tests.support", "os", "test.support.run_unittest"], "function_names": ["test_suite", "test_formats", "test_skip_build"], "function_calls": ["sorted", "getattr", "run_unittest", "test_suite", "bdist"], "class_names": ["BuildTestCase"], "class_method_calls": ["names.append", "cmd.skip_build", "dist.command_obj", "cmd.get_finalized_command", "unittest.makeSuite", "self.assertEqual", "support.TempdirManager", "os.name", "cmd.formats", "self.assertTrue", "self.create_dist", "warnings.catch_warnings", "unittest.TestCase", "warnings.filterwarnings", "cmd.ensure_finalized", "subcmd.skip_build", "cmd.format_command"]}, "test_bdist_dumb.py": {"libraries": ["unittest", "zipfile", "sys", "distutils.core.Distribution", "distutils.command.bdist_dumb.bdist_dumb", "zlib", "distutils.tests.support", "os", "test.support.run_unittest"], "function_names": ["test_suite", "setUp", "test_simple_built", "tearDown"], "function_calls": ["Distribution", "super", "sorted", "filter", "run_unittest", "test_suite", "map", "bdist_dumb"], "class_names": ["BuildDumbTestCase"], "class_method_calls": ["os.mkdir", "support.LoggingSilencer", "self.old_location", "unittest.skipUnless", "self.assertEqual", "support.TempdirManager", "fp.close", "os.getcwd", "cmd.plat_name", "os.chdir", "cmd.run", "dist.get_fullname", "self.write_file", "support.EnvironGuard", "zipfile.ZipFile", "wanted.append", "unittest.makeSuite", "self.old_sys_argv", "cmd.format", "self.mkdtemp", "os.path", "dist.script_name", "sys.dont_write_bytecode", "os.listdir", "sys.version_info", "sys.implementation", "sys.argv", "unittest.TestCase", "cmd.ensure_finalized", "fp.namelist"]}, "test_bdist_msi.py": {"libraries": ["unittest", "distutils.command.bdist_msi.bdist_msi", "sys", "distutils.tests.support", "test.support.run_unittest"], "function_names": ["test_suite", "test_minimal"], "function_calls": ["test_suite", "bdist_msi", "run_unittest"], "class_names": ["BDistMSITestCase"], "class_method_calls": ["sys.platform", "support.LoggingSilencer", "unittest.makeSuite", "unittest.skipUnless", "support.TempdirManager", "self.create_dist", "unittest.TestCase", "cmd.ensure_finalized"]}, "test_bdist_rpm.py": {"libraries": ["unittest", "distutils.command.bdist_rpm.bdist_rpm", "distutils.spawn.find_executable", "sys", "distutils.core.Distribution", "distutils.tests.support", "os", "test.support.run_unittest", "test.support.requires_zlib"], "function_names": ["setUp", "test_no_optimize_flag", "test_quiet", "test_suite", "tearDown"], "function_calls": ["bdist_rpm", "Distribution", "super", "run_unittest", "test_suite", "find_executable"], "class_names": ["BuildRpmTestCase"], "class_method_calls": ["os.mkdir", "sys.platform", "support.LoggingSilencer", "self.old_location", "unittest.skipUnless", "sys.executable", "support.TempdirManager", "cmd.fix_python", "os.getcwd", "os.chdir", "cmd.run", "unittest.SkipTest", "self.write_file", "self.assertIn", "support.EnvironGuard", "os.remove", "unittest.skipIf", "unittest.makeSuite", "dist.dist_files", "self.old_sys_argv", "os.environ", "self.mkdtemp", "os.path", "dist.script_name", "os.listdir", "cmd.quiet", "sys.argv", "unittest.TestCase", "cmd.ensure_finalized"]}, "test_bdist_wininst.py": {"libraries": ["unittest", "platform", "sys", "test.support.check_warnings", "distutils.tests.support", "distutils.command.bdist_wininst.bdist_wininst", "test.support.run_unittest"], "function_names": ["test_suite", "test_get_exe_bytes"], "function_calls": ["bdist_wininst", "len", "getattr", "check_warnings", "run_unittest", "test_suite"], "class_names": ["BuildWinInstTestCase"], "class_method_calls": ["platform.machine", "unittest.skipIf", "sys.platform", "support.LoggingSilencer", "unittest.makeSuite", "cmd.get_exe_bytes", "support.TempdirManager", "self.assertGreater", "self.create_dist", "unittest.TestCase", "cmd.ensure_finalized"]}, "test_build.py": {"libraries": ["unittest", "sysconfig.get_platform", "sys", "distutils.command.build.build", "distutils.tests.support", "os", "test.support.run_unittest"], "function_names": ["test_suite", "test_finalize_options"], "function_calls": ["get_platform", "hasattr", "run_unittest", "test_suite", "build"], "class_names": ["BuildTestCase"], "class_method_calls": ["support.LoggingSilencer", "sys.executable", "self.assertEqual", "support.TempdirManager", "cmd.build_lib", "cmd.plat_name", "cmd.build_temp", "unittest.makeSuite", "cmd.executable", "cmd.build_scripts", "unittest.TestCase", "cmd.build_base", "os.path", "cmd.finalize_options", "sys.version_info", "cmd.build_platlib", "self.assertTrue", "self.create_dist", "cmd.build_purelib"]}, "test_build_clib.py": {"libraries": ["unittest", "distutils.errors.DistutilsSetupError", "test.support.missing_compiler_executable", "distutils.spawn.find_executable", "sys", "distutils.command.build_clib.build_clib", "distutils.tests.support", "os", "test.support.run_unittest"], "function_names": ["test_finalize_options", "compile", "test_run", "test_check_library_dist", "test_get_source_files", "test_suite", "test_build_libraries"], "function_calls": ["list", "FakeCompiler", "build_clib", "tuple", "missing_compiler_executable", "test_suite", "run_unittest"], "class_names": ["FakeCompiler", "BuildCLibTestCase"], "class_method_calls": ["os.mkdir", "sys.platform", "support.LoggingSilencer", "cmd.build_clib", "self.assertEqual", "support.TempdirManager", "cmd.build_temp", "cmd.run", "self.write_file", "self.assertIn", "cmd.distribution", "cmd.include_dirs", "cmd.libraries", "self.assertRaises", "unittest.skipIf", "unittest.makeSuite", "cmd.get_source_files", "cmd.check_library_list", "cmd.build_libraries", "os.path", "cmd.finalize_options", "self.skipTest", "os.listdir", "cmd.compiler", "self.create_dist", "unittest.TestCase"]}, "test_build_ext.py": {"libraries": ["distutils.errors.CompileError", "distutils.core.Distribution", "distutils.tests.support.TempdirManager", "test.support", "unittest", "distutils.errors.DistutilsSetupError", "textwrap", "distutils.tests.support.LoggingSilencer", "site", "io.StringIO", "test.support.script_helper.assert_python_ok", "os", "distutils.errors.UnknownFileError", "distutils.extension.Extension", "distutils.command.build_ext", "distutils.sysconfig", "distutils.tests.support.copy_xxmodule_c", "distutils.command.build_ext.build_ext", "distutils.sysconfig._config_vars", "sys", "distutils.errors.DistutilsPlatformError", "distutils.tests.support.fixup_build_ext"], "function_names": ["test_deployment_target_higher_ok", "build_ext", "setUp", "test_check_extensions_list", "test_deployment_target_default", "test_get_source_files", "test_unicode_module_names", "test_solaris_enable_shared", "test_deployment_target_too_low", "test_compiler_option", "test_ext_fullpath", "test_finalize_options", "test_optional_extension", "test_suite", "test_build_ext", "_try_compile_deployment_target", "tearDown", "test_user_site", "test_get_outputs"], "function_calls": ["Distribution", "len", "super", "Extension", "build_ext", "assert_python_ok", "str", "fixup_build_ext", "tuple", "StringIO", "int", "type", "open", "copy_xxmodule_c", "map", "hasattr"], "class_names": ["BuildExtTestCase", "ParallelBuildExtTestCase"], "class_method_calls": ["os.mkdir", "plat_py_include.split", "cmd.library_dirs", "unittest.skipUnless", "self.assertEqual", "sys.stdout", "self.tmp_dir", "target.split", "self.assertRaises", "unittest.makeSuite", "suite.addTest", "cmd.get_source_files", "cmd.inplace", "self.assertTrue", "sysconfig.get_config_var", "self.assertIsInstance", "cmd.rpath", "os.getcwd", "so_file.endswith", "cmd.include_dirs", "cmd.get_outputs", "self.assertRegex", "support.run_unittest", "ext.libraries", "cmd.user", "cmd.define", "cmd.link_objects", "os.path", "support.missing_compiler_executable", "unittest.TestCase", "self.assertFalse", "support.change_cwd", "sys.platform", "os.pathsep", "cmd.run", "fp.write", "build_ext.USER_BASE", "dist.package_dir", "self.addCleanup", "cmd.distribution", "cmd.libraries", "build_ext.parallel", "cmd.get_ext_fullpath", "cmd.undef", "self.assertGreater", "site.USER_BASE", "os.environ", "cmd.swig_opts", "self.mkdtemp", "orig_environ.copy", "change_cwd.__exit__", "cmd.finalize_options", "unittest.TestSuite", "cmd.compiler", "cmd.ensure_finalized", "self._try_compile_deployment_target", "cmd.get_finalized_command", "change_cwd.__enter__", "self.build_ext", "cmd.get_export_symbols", "cmd.build_lib", "os.chdir", "cmd.build_temp", "cmd.user_options", "self.write_file", "self.assertIn", "self.fail", "_config_vars.get", "support.verbose", "self.old_user_base", "deptarget.split", "cmd.get_ext_filename", "textwrap.dedent", "sysconfig.get_python_inc", "py_include.split", "cmd.check_extensions_list", "build_py.package_dir", "self.skipTest"]}, "test_build_py.py": {"libraries": ["unittest", "distutils.errors.DistutilsFileError", "sys", "distutils.core.Distribution", "distutils.command.build_py.build_py", "distutils.tests.support", "os", "test.support.run_unittest"], "function_names": ["test_package_data", "test_dont_write_bytecode", "test_byte_compile_optimized", "test_empty_package_dir", "test_suite", "test_byte_compile", "test_dir_in_package_data"], "function_calls": ["Distribution", "len", "sorted", "build_py", "open", "run_unittest", "test_suite"], "class_names": ["BuildPyTestCase"], "class_method_calls": ["dist.run_commands", "os.mkdir", "support.LoggingSilencer", "self.assertEqual", "support.TempdirManager", "dist.package_data", "cmd.optimize", "dist.command_obj", "cmd.build_lib", "cmd.byte_compile", "os.chdir", "cmd.run", "f.write", "self.write_file", "self.assertIn", "dist.package_dir", "self.fail", "cmd.package_data", "dist.script_args", "unittest.skipIf", "support.DummyCommand", "cmd.get_outputs", "dist.packages", "unittest.makeSuite", "self.assertFalse", "self.mkdtemp", "os.path", "cmd.finalize_options", "self.logs", "dist.script_name", "sys.dont_write_bytecode", "cmd.compile", "dist.parse_command_line", "os.listdir", "sys.implementation", "self.create_dist", "f.close", "unittest.TestCase", "cmd.ensure_finalized"]}, "test_build_scripts.py": {"libraries": ["unittest", "distutils.sysconfig", "distutils.core.Distribution", "distutils.command.build_scripts.build_scripts", "sys", "distutils.tests.support", "os", "test.support.run_unittest"], "function_names": ["test_default_settings", "write_script", "test_build", "write_sample_scripts", "test_version_int", "test_suite", "get_build_scripts_cmd"], "function_calls": ["Distribution", "build_scripts", "open", "run_unittest", "test_suite"], "class_names": ["BuildScriptsTestCase"], "class_method_calls": ["support.LoggingSilencer", "self.write_script", "sys.executable", "self.assertEqual", "support.TempdirManager", "dist.command_obj", "cmd.run", "f.write", "self.assertIn", "support.DummyCommand", "unittest.makeSuite", "dist.scripts", "expected.append", "self.assertIsNone", "self.get_build_scripts_cmd", "self.write_sample_scripts", "self.mkdtemp", "cmd.build_dir", "sysconfig._config_vars", "cmd.finalize_options", "os.path", "cmd.force", "os.listdir", "self.assertTrue", "f.close", "unittest.TestCase", "self.assertFalse", "sysconfig.get_config_vars"]}, "test_check.py": {"libraries": ["unittest", "distutils.errors.DistutilsSetupError", "textwrap", "pygments", "distutils.command.check.check", "distutils.tests.support", "os", "test.support.run_unittest", "distutils.command.check.HAS_DOCUTILS"], "function_names": ["_run", "test_check_restructuredtext", "test_check_metadata", "test_check_all", "test_check_restructuredtext_with_syntax_highlight", "test_suite", "test_check_document"], "function_calls": ["check", "len", "str", "run_unittest", "test_suite", "setattr"], "class_names": ["CheckTestCase"], "class_method_calls": ["cmd._warnings", "support.LoggingSilencer", "unittest.skipUnless", "self.assertEqual", "support.TempdirManager", "self._run", "os.getcwd", "os.chdir", "cmd.run", "cmd.check_restructuredtext", "self.assertRaises", "cmd.initialize_options", "example_rst_docs.append", "unittest.makeSuite", "cmd._check_rst_data", "textwrap.dedent", "os.path", "options.items", "self.create_dist", "unittest.TestCase", "cmd.ensure_finalized"]}, "test_clean.py": {"libraries": ["unittest", "distutils.command.clean.clean", "distutils.tests.support", "os", "test.support.run_unittest"], "function_names": ["test_suite", "test_simple_run"], "function_calls": ["test_suite", "setattr", "clean", "run_unittest"], "class_names": ["cleanTestCase"], "class_method_calls": ["cmd.run", "os.mkdir", "os.path", "support.LoggingSilencer", "self.write_file", "unittest.makeSuite", "self.assertFalse", "cmd.all", "support.TempdirManager", "self.create_dist", "unittest.TestCase", "cmd.ensure_finalized"]}, "test_cmd.py": {"libraries": ["unittest", "io", "test.test_cmd", "sys", "test.support", "cmd"], "function_names": ["test_input_reset_at_EOF", "test_main", "test_coverage", "test_file_with_missing_final_nl", "do_shell", "postloop", "completedefault", "do_add", "do_exit", "complete_command", "help_add", "do_print", "do_EOF", "preloop"], "function_calls": ["len", "test_coverage", "test_main", "samplecmdclass", "int", "print"], "class_names": ["simplecmd2", "simplecmd", "samplecmdclass", "TestAlternateInput"], "class_method_calls": ["self.simplecmd", "sys.base_exec_prefix", "cmd.Cmd", "tracer.results", "cmd.use_rawinput", "support.run_doctest", "support.import_module", "tracer.run", "cmd.cmdloop", "self.assertMultiLineEqual", "output.getvalue", "cmd.stdout", "io.StringIO", "cmd.stdin", "self.stdout", "support.run_unittest", "r.write_results", "self.simplecmd2", "sys.base_prefix", "trace.Trace", "s.split", "sys.argv", "unittest.TestCase"]}, "test_config.py": {"libraries": ["unittest", "idlelib.idle_test.mock_idle.Func", "tkinter.Tk", "test.support.findfile", "test.support.requires", "idlelib.config", "sys", "tempfile", "unittest.mock", "os", "tkinter.font.Font", "idlelib", "test.support.captured_stderr"], "function_names": ["test_load_nothing", "test_new_builtin_theme", "test_save_added", "test_get", "test_get_current_theme_and_keys", "setUp", "test_set_option", "test_init", "test_user_override_keys", "test_get_core_keys", "test_get_font", "test_get_current_keyset", "new_parser", "test_get_keybinding", "test_get_extension_keys", "test_old_builtin_theme", "test_clear", "setUpModule", "mock_config", "test_extra_help_source_list", "test_warn", "test_save_user_cfg_files", "setUpClass", "test_get_keyset", "test_default_keys", "test_load_cfg_files", "test_remove_key_bind_names", "load", "test_remove_empty_sections", "test_add_section", "test_save", "tearDownClass", "test_get_extensions", "test_current_colors_and_keys", "test_save_option", "test_add_option", "test_load_file", "test_get_option", "test_user_override_theme", "tearDownModule", "test_get_highlight", "test_get_user_cfg_dir_unix", "test_old_builtin_keys", "test_get_section_list", "test_save_help", "test_save_default", "test_is_empty", "test_get_option_list", "test_get_user_cfg_dir_windows", "test_delete_section", "test_remove_option", "test_create_config_handlers", "test_new_builtin_keys", "new_config", "test_get_extn_name_for_event", "test_get_extension_bindings", "test_get_theme_dict", "test_is_core_binding"], "function_calls": ["captured_stderr", "eq", "Tk", "len", "get_list", "findfile", "Font", "set", "iGE", "save_option", "Func", "open", "requires", "iGEB", "Equal"], "class_names": ["IdleUserConfParserTest", "IdleConfParserTest", "CurrentColorKeysTest", "IdleConfTest", "WarningTest", "ChangesTest"], "class_method_calls": ["stderr.getvalue", "_warn.call_count", "self.assertEqual", "self.mock_config", "root.destroy", "self.assertIs", "config.IdleConfParser", "tempfile.TemporaryDirectory", "config.IdleConf", "changes.save_all", "idlelib.testing", "conf.GetThemeDict", "self.empty", "conf.CreateConfigHandlers", "self.assertRaises", "parser.RemoveOption", "config.ConfigChanges", "changes.clear", "userextn.remove_section", "conf.userCfg", "self.config", "changes.save_option", "conf.SaveUserCfgFiles", "self.changes", "parser.AddSection", "self.assertCountEqual", "self.assertTrue", "self.new_config", "idleConf.GetExtensions", "self.assertIsInstance", "conf.GetHighlight", "parser.GetOptionList", "config.idleConf", "changes.add_option", "conf.default_keys", "cls.orig_warn", "conf.GetKeySet", "self.default_theme", "conf.GetExtraHelpSourceList", "conf.config_types", "userhigh.remove_section", "parser.sections", "m.call_count", "conf.GetOption", "self.default_keys", "parser.read_string", "parser.SetOption", "conf.GetCurrentKeySet", "config.InvalidConfigType", "config._warn", "cls.config_string", "usermain.read_string", "self.colorkeys", "self.assertIsNone", "config.InvalidTheme", "conf.CurrentTheme", "os.path", "conf.defaultCfg", "parser.remove_section", "conf.GetSectionList", "parser.Load", "unittest.TestCase", "self.assertFalse", "conf.CurrentKeys", "sys.platform", "conf.current_colors_and_keys", "idleConf.GetExtnNameForEvent", "conf.GetFont", "idleConf.GetExtensionBindings", "root.withdraw", "self.new_parser", "userkeys.remove_section", "parser.file", "self.loaded", "changes.delete_section", "self.config_string", "conf.GetCoreKeys", "config._warned", "usermain.has_option", "parser.Get", "userkeys.read_string", "unittest.main", "conf.GetKeyBinding", "conf.GetAllExtraHelpSourcesList", "idleConf.default_keys", "parser.add_section", "usermain.remove_section", "conf.RemoveKeyBindNames", "userhigh.read_string", "conf.LoadCfgFiles", "idleConf.GetExtensionKeys", "Font.actual", "conf.SetOption", "f.read", "userextn.read_string", "parser.IsEmpty", "unittest.skipIf", "idleConf.userCfg", "config.IdleUserConfParser", "config.InvalidConfigSet", "conf.IsCoreBinding", "mock.patch", "conf.GetUserCfgDir", "parser.RemoveEmptySections", "sys.path", "self.load", "conf.userdir", "idleConf.current_colors_and_keys", "parser.Save"]}, "test_config_cmd.py": {"libraries": ["unittest", "distutils.command.config.config", "distutils.command.config.dump_file", "distutils.log", "test.support.missing_compiler_executable", "shutil", "sys", "distutils.tests.support", "os", "test.support.run_unittest"], "function_names": ["test_finalize_options", "test_search_cpp", "setUp", "_info", "test_clean", "test_suite", "tearDown", "test_dump_file"], "function_calls": ["len", "super", "test_suite", "config", "dump_file", "missing_compiler_executable", "open", "run_unittest"], "class_names": ["ConfigTestCase"], "class_method_calls": ["sys.platform", "support.LoggingSilencer", "os.pathsep", "self._info", "cmd.library_dirs", "self.assertEqual", "support.TempdirManager", "compiler.preprocessor", "self.write_file", "cmd.search_cpp", "cmd.include_dirs", "self._logs", "cmd.libraries", "log.info", "unittest.skipIf", "unittest.makeSuite", "self.assertFalse", "self.mkdtemp", "msg.splitlines", "os.path", "f.readlines", "cmd._check_compiler", "cmd._clean", "self.skipTest", "cmd.compiler", "self.old_log", "self.assertTrue", "self.create_dist", "f.close", "unittest.TestCase", "cmd.ensure_finalized"]}, "test_core.py": {"libraries": ["unittest", "distutils.core", "io", "test.support.captured_stdout", "distutils.log", "shutil", "sys", "distutils.tests.support", "test.support", "os", "test.support.run_unittest"], "function_names": ["test_run_setup_provides_file", "test_debug_mode", "setUp", "write_setup", "test_run_setup_preserves_sys_argv", "test_suite", "tearDown", "cleanup_testfn", "test_run_setup_defines_subclass", "test_run_setup_uses_current_dir"], "function_calls": ["super", "open", "captured_stdout", "test_suite", "run_unittest"], "class_names": ["CoreTestCase"], "class_method_calls": ["os.mkdir", "stdout.readlines", "self.assertEqual", "log._global_log", "test.support", "sys.stdout", "os.getcwd", "distutils.core", "f.write", "output.endswith", "self.assertIn", "self.old_stdout", "support.EnvironGuard", "self.addCleanup", "io.StringIO", "self.old_argv", "os.remove", "dist.get_command_obj", "stdout.seek", "stdout.read", "unittest.makeSuite", "shutil.rmtree", "self.write_setup", "os.path", "self.cleanup_testfn", "install.sub_commands", "log.set_threshold", "sys.argv", "f.close", "unittest.TestCase"]}, "test_cygwinccompiler.py": {"libraries": ["unittest", "distutils.cygwinccompiler.CONFIG_H_NOTOK", "distutils.cygwinccompiler.CONFIG_H_UNCERTAIN", "distutils.cygwinccompiler.get_msvcr", "distutils.cygwinccompiler.get_versions", "sys", "distutils.cygwinccompiler.CONFIG_H_OK", "distutils.sysconfig", "distutils.cygwinccompiler", "io.BytesIO", "distutils.cygwinccompiler.check_config_h", "distutils.tests.support", "os", "test.support.run_unittest"], "function_names": ["test_get_msvcr", "_get_config_h_filename", "setUp", "test_get_versions", "_find_executable", "__init__", "test_suite", "tearDown", "test_check_config_h"], "function_calls": ["BytesIO", "super", "get_msvcr", "str", "get_versions", "test_suite", "check_config_h", "run_unittest"], "class_names": ["CygwinCCompilerTestCase", "FakePopen"], "class_method_calls": ["self.version", "FakePopen.test_class", "self._get_config_h_filename", "cygwinccompiler.find_executable", "self.assertEqual", "support.TempdirManager", "os.popen", "self.write_file", "self.test_class", "self.old_get_config_h_filename", "self.stdout", "cygwinccompiler.Popen", "self.assertRaises", "self.old_find_executable", "cmd.split", "unittest.makeSuite", "self.old_popen", "self.mkdtemp", "self.python_h", "os.path", "self.cmd", "sys.version", "self._find_executable", "sysconfig.get_config_h_filename", "unittest.TestCase", "self._exes"]}, "test_dep_util.py": {"libraries": ["unittest", "test.support.run_unittest", "distutils.errors.DistutilsFileError", "distutils.dep_util.newer", "distutils.dep_util.newer_group", "distutils.tests.support", "os", "distutils.dep_util.newer_pairwise"], "function_names": ["test_suite", "test_newer_group", "test_newer", "test_newer_pairwise"], "function_calls": ["newer_pairwise", "newer_group", "newer", "run_unittest", "test_suite"], "class_names": ["DepUtilTestCase"], "class_method_calls": ["self.mkdtemp", "os.mkdir", "os.path", "self.write_file", "unittest.makeSuite", "self.assertEqual", "support.TempdirManager", "self.assertTrue", "unittest.TestCase", "os.remove", "self.assertFalse", "self.assertRaises"]}, "test_dir_util.py": {"libraries": ["unittest", "distutils.dir_util.remove_tree", "distutils.dir_util.copy_tree", "distutils.dir_util.create_tree", "test.support.run_unittest", "distutils.dir_util.ensure_relative", "distutils.dir_util", "distutils.log", "sys", "distutils.errors", "distutils.dir_util.mkpath", "unittest.mock.patch", "distutils.tests.support", "os", "stat"], "function_names": ["test_create_tree_verbosity", "setUp", "test_ensure_relative", "test_copy_tree_skips_nfs_temp_files", "test_mkpath_with_custom_mode", "_log", "test_mkpath_remove_tree_verbosity", "test_copy_tree_exception_in_listdir", "test_suite", "tearDown", "test_copy_tree_verbosity"], "function_calls": ["remove_tree", "len", "super", "run_unittest", "patch", "open", "create_tree", "test_suite", "ensure_relative", "OSError", "mkpath", "copy_tree"], "class_names": ["DirUtilTestCase"], "class_method_calls": ["sys.platform", "stat.S_IMODE", "self.root_target", "self.assertEqual", "support.TempdirManager", "self._log", "f.write", "os.umask", "self._logs", "self.assertRaises", "log.info", "unittest.skipIf", "fh.write", "os.sep", "unittest.makeSuite", "errors.DistutilsFileError", "self.target", "self.tempdirs", "self.mkdtemp", "os.path", "self.target2", "dir_util.copy_tree", "os.listdir", "self.old_log", "os.stat", "unittest.TestCase"]}, "test_dist.py": {"libraries": ["unittest", "io", "test.support.TESTFN", "distutils.dist.DistributionMetadata", "textwrap", "distutils.dist.fix_help_options", "distutils.log", "distutils.tests.test_dist.test_dist", "test.support.captured_stderr", "sys", "warnings", "unittest.mock", "distutils.cmd.Command", "distutils.tests.support", "test.support.captured_stdout", "os", "test.support.run_unittest", "distutils.dist.Distribution"], "function_names": ["test_obsoletes_to_list", "setUp", "_warn", "test_command_packages_cmdline", "test_platforms", "test_simple_metadata", "test_command_packages_configfile", "test_requires_to_list", "test_provides_illegal", "find_config_files", "test_announce", "test_finalize_options", "format_metadata", "test_requires", "test_show_help", "test_long_description", "test_provides", "test_suite", "create_distribution", "test_keywords", "_expander", "test_custom_pydistutils", "test_fix_help_options", "tearDown", "test_get_command_packages", "test_venv_install_options", "test_read_metadata", "test_platforms_invalid_types", "test_classifier", "test_obsoletes", "initialize_options", "test_command_packages_unspecified", "test_empty_options", "test_obsoletes_illegal", "test_requires_illegal", "test_download_url", "test_classifier_invalid_type", "test_find_config_files_disable", "test_keywords_invalid_type"], "function_calls": ["captured_stderr", "list", "Distribution", "len", "super", "sorted", "TestDistribution", "iter", "test_suite", "dir", "open", "run_unittest", "fix_help_options", "captured_stdout", "print"], "class_names": ["DistributionTestCase", "TestDistribution", "MetadataTestCase", "test_dist"], "class_method_calls": ["metadata.name", "meta.replace", "line.strip", "dist.find_config_files", "self.assertEqual", "result_dict.keys", "dist.get_keywords", "self.assertRaises", "s.getvalue", "unittest.makeSuite", "metadata.requires", "error.getvalue", "self.sample_option", "suite.addTest", "dist.get_provides", "self.format_metadata", "dist.get_platforms", "dist.get_classifiers", "sys.argv", "self.assertTrue", "self.assertIsInstance", "sio.getvalue", "support.TempdirManager", "metadata.write_pkg_file", "self._config_files", "self.assertNotIn", "warnings.warn", "io.StringIO", "dist.help", "self.argv", "d.parse_command_line", "os.path", "d.find_config_files", "dist.parse_command_line", "dist.finalize_options", "unittest.TestCase", "sys.platform", "d.command_options", "log._global_log", "d.get_command_obj", "metadata.keywords", "d.parse_config_files", "f.write", "dist.command_packages", "d._config_files", "self.addCleanup", "warns.append", "metadata.platforms", "dist.announce", "metadata.obsoletes", "metadata.version", "dist.get_command_packages", "d.get_command_packages", "metadata.description", "os.environ", "self.mkdtemp", "cmd.sample_option", "dist.script_name", "unittest.TestSuite", "log.set_threshold", "f.close", "support.LoggingSilencer", "d.metadata", "dist.metadata", "self.assertIn", "dist.get_requires", "support.EnvironGuard", "PKG_INFO.seek", "metadata.read_pkg_file", "os.remove", "meta.lower", "self.create_distribution", "dist.get_obsoletes", "os.unlink", "mock.patch", "textwrap.dedent", "metadata.download_url", "os.name"]}, "test_extension.py": {"libraries": ["unittest", "distutils.extension.read_setup_file", "distutils.extension.Extension", "warnings", "test.support.check_warnings", "os", "test.support.run_unittest"], "function_names": ["test_suite", "test_extension_init", "test_read_setup_file"], "function_calls": ["len", "Extension", "getattr", "check_warnings", "str", "run_unittest", "test_suite", "read_setup_file"], "class_names": ["ExtensionTestCase"], "class_method_calls": ["warnings.simplefilter", "names.sort", "os.path", "ext.language", "unittest.makeSuite", "self.assertEqual", "ext.optional", "ext.sources", "unittest.TestCase", "w.warnings", "ext.name", "self.assertRaises"]}, "test_file_util.py": {"libraries": ["unittest", "distutils.file_util.copy_file", "distutils.log", "test.support.unlink", "distutils.errors.DistutilsFileError", "unittest.mock.patch", "distutils.tests.support", "distutils.file_util.move_file", "os", "test.support.run_unittest", "errno"], "function_names": ["test_move_file_verbosity", "setUp", "_log", "test_copy_file_hard_link_failure", "test_move_file_exception_unpacking_rename", "test_suite", "tearDown", "test_copy_file_hard_link", "test_move_file_exception_unpacking_unlink"], "function_calls": ["len", "super", "unlink", "patch", "open", "run_unittest", "test_suite", "copy_file", "OSError", "move_file"], "class_names": ["FileUtilTestCase"], "class_method_calls": ["os.mkdir", "fobj.write", "self.assertEqual", "support.TempdirManager", "self._log", "errno.EXDEV", "self.source", "f.write", "self._logs", "f.read", "os.link", "self.assertRaises", "log.info", "unittest.makeSuite", "self.target", "self.target_dir", "self.mkdtemp", "os.path", "self.skipTest", "self.old_log", "os.stat", "self.assertTrue", "f.close", "unittest.TestCase", "self.assertFalse"]}, "test_filelist.py": {"libraries": ["unittest", "test.support.requires", "tkinter.Tk", "idlelib.filelist"], "function_names": ["setUpClass", "tearDownClass", "test_new_empty"], "function_calls": ["requires", "type", "Tk"], "class_names": ["FileListTest"], "class_method_calls": ["e._close", "flist.new", "flist.root", "self.root", "filelist.FileList", "cls.root", "self.assertEqual", "flist.EditorWindow", "unittest.TestCase", "unittest.main"]}, "test_install.py": {"libraries": ["unittest", "distutils.command.install", "distutils.command.build_ext.build_ext", "distutils.command.install.install", "distutils.command.install.INSTALL_SCHEMES", "test.support", "distutils.extension.Extension", "distutils.sysconfig", "sys", "distutils.core.Distribution", "site", "distutils.tests.support", "test.support.captured_stdout", "os", "test.support.run_unittest", "distutils.errors.DistutilsOptionError"], "function_names": ["cleanup", "test_home_installation_scheme", "test_finalize_options", "test_debug_mode", "test_record", "_make_ext_name", "test_record_extensions", "test_handle_extra_path", "test_suite", "check_path", "test_user_site", "_expanduser"], "function_calls": ["Distribution", "len", "install", "build_ext", "Extension", "_make_ext_name", "open", "run_unittest", "test_suite", "check_path", "captured_stdout"], "class_names": ["InstallTestCase"], "class_method_calls": ["buildextcmd.ensure_finalized", "support.LoggingSilencer", "cmd.install_platbase", "self.test_record", "self.assertEqual", "support.TempdirManager", "cmd.extra_dirs", "dist.command_obj", "site.USER_SITE", "install_module.USER_SITE", "os.chdir", "cmd.config_vars", "cmd.handle_extra_path", "cmd.run", "cmd.user_options", "self.write_file", "self.assertIn", "cmd.install_lib", "dist.extra_path", "support.EnvironGuard", "self.addCleanup", "f.read", "cmd.install_platlib", "cmd.extra_path", "cmd.path_file", "self.assertRaises", "f.close", "install_module.USER_BASE", "cmd.record", "support.DummyCommand", "support.fixup_build_ext", "unittest.makeSuite", "self.old_user_base", "self.tmpdir", "self.user_site", "cmd.root", "cmd.home", "cmd.ensure_finalized", "cmd.user", "self.assertGreater", "site.USER_BASE", "cmd.install_base", "cmd.install_scripts", "cmd.install_headers", "self.assertFalse", "content.splitlines", "self.old_user_site", "install_module.DEBUG", "self.mkdtemp", "cmd.install_data", "cmd.install_purelib", "os.path", "cmd.finalize_options", "support.copy_xxmodule_c", "dist.script_name", "self.logs", "cmd.prefix", "self.old_expand", "self.skipTest", "sys.version_info", "sys.implementation", "self.assertTrue", "test_support.missing_compiler_executable", "self.create_dist", "sysconfig.get_config_var", "unittest.TestCase", "self.user_base"]}, "test_install_data.py": {"libraries": ["unittest", "distutils.command.install_data.install_data", "distutils.tests.support", "os", "test.support.run_unittest"], "function_names": ["test_suite", "test_simple_run"], "function_calls": ["test_suite", "install_data", "len", "run_unittest"], "class_names": ["InstallDataTestCase"], "class_method_calls": ["support.LoggingSilencer", "self.assertEqual", "support.TempdirManager", "cmd.run", "self.write_file", "support.EnvironGuard", "cmd.data_files", "cmd.get_outputs", "unittest.makeSuite", "cmd.root", "cmd.outfiles", "os.path", "cmd.warn_dir", "cmd.get_inputs", "self.assertTrue", "self.create_dist", "cmd.install_dir", "unittest.TestCase", "cmd.ensure_finalized"]}, "test_install_headers.py": {"libraries": ["unittest", "distutils.tests.support", "os", "test.support.run_unittest", "distutils.command.install_headers.install_headers"], "function_names": ["test_suite", "test_simple_run"], "function_calls": ["test_suite", "len", "install_headers", "run_unittest"], "class_names": ["InstallHeadersTestCase"], "class_method_calls": ["self.mkdtemp", "cmd.get_outputs", "cmd.run", "os.path", "support.LoggingSilencer", "self.write_file", "unittest.makeSuite", "support.EnvironGuard", "cmd.get_inputs", "self.assertEqual", "support.TempdirManager", "self.create_dist", "cmd.install_dir", "unittest.TestCase", "cmd.ensure_finalized"]}, "test_install_lib.py": {"libraries": ["unittest", "distutils.command.install_lib.install_lib", "distutils.extension.Extension", "importlib.util", "sys", "distutils.tests.support", "os", "test.support.run_unittest", "distutils.errors.DistutilsOptionError"], "function_names": ["test_get_outputs", "test_get_inputs", "test_finalize_options", "test_suite", "test_byte_compile", "test_dont_write_bytecode"], "function_calls": ["len", "Extension", "run_unittest", "test_suite", "install_lib"], "class_names": ["InstallLibTestCase"], "class_method_calls": ["os.mkdir", "support.LoggingSilencer", "self.assertEqual", "support.TempdirManager", "cmd.optimize", "cmd.byte_compile", "os.chdir", "self.write_file", "self.assertIn", "importlib.util", "support.EnvironGuard", "cmd.distribution", "self.assertRaises", "cmd.get_outputs", "unittest.skipIf", "unittest.makeSuite", "self.mkdtemp", "os.path", "cmd.finalize_options", "self.logs", "sys.dont_write_bytecode", "cmd.compile", "cmd.get_inputs", "self.assertTrue", "self.create_dist", "cmd.install_dir", "unittest.TestCase"]}, "test_install_scripts.py": {"libraries": ["unittest", "distutils.core.Distribution", "distutils.tests.support", "os", "test.support.run_unittest", "distutils.command.install_scripts.install_scripts"], "function_names": ["test_suite", "write_script", "test_installation", "test_default_settings"], "function_calls": ["Distribution", "write_script", "open", "run_unittest", "test_suite", "install_scripts"], "class_names": ["InstallScriptsTestCase"], "class_method_calls": ["support.LoggingSilencer", "self.assertEqual", "support.TempdirManager", "dist.command_obj", "cmd.run", "f.write", "self.assertIn", "f.close", "cmd.skip_build", "support.DummyCommand", "unittest.makeSuite", "expected.append", "self.assertIsNone", "self.mkdtemp", "cmd.build_dir", "os.path", "cmd.finalize_options", "cmd.force", "os.listdir", "self.assertTrue", "cmd.install_dir", "unittest.TestCase", "self.assertFalse"]}, "test_log.py": {"libraries": ["unittest", "test.support.swap_attr", "io", "distutils.log", "sys", "test.support.run_unittest"], "function_names": ["test_suite", "test_non_ascii"], "function_calls": ["test_suite", "swap_attr", "run_unittest"], "class_names": ["TestLog"], "class_method_calls": ["stdout.read", "unittest.makeSuite", "stdout.seek", "log.debug", "log.DEBUG", "log.set_threshold", "self.assertEqual", "log.fatal", "io.BytesIO", "unittest.TestCase", "stderr.read", "self.subTest", "stderr.seek", "io.TextIOWrapper"]}, "test_msvc9compiler.py": {"libraries": ["unittest", "test.support.run_unittest", "distutils.msvc9compiler.query_vcvarsall", "distutils.msvc9compiler", "distutils.msvc9compiler.Reg", "sys", "winreg", "distutils.msvc9compiler.MSVCCompiler", "distutils.tests.support", "os", "distutils.errors.DistutilsPlatformError", "distutils.msvccompiler.get_build_version"], "function_names": ["test_reg_class", "test_remove_visual_c_ref", "test_remove_entire_manifest", "test_suite", "_find_vcvarsall", "test_no_compiler"], "function_calls": ["test_suite", "open", "run_unittest", "MSVCCompiler", "get_build_version"], "class_names": ["msvc9compilerTestCase"], "class_method_calls": ["sys.platform", "compiler._remove_visual_c_ref", "unittest.skipUnless", "self.assertEqual", "support.TempdirManager", "f.write", "self.assertIn", "self.assertRaises", "unittest.makeSuite", "Reg.get_value", "self.assertIsNone", "line.rstrip", "self.mkdtemp", "winreg.HKEY_CURRENT_USER", "os.path", "f.readlines", "f.close", "unittest.TestCase", "Reg.read_keys", "msvc9compiler.find_vcvarsall"]}, "test_msvccompiler.py": {"libraries": ["unittest", "test.support.run_unittest", "sys", "distutils._msvccompiler", "distutils.tests.support", "os", "distutils.errors.DistutilsPlatformError"], "function_names": ["test_get_vc2015", "test_get_vc_env_unicode", "test_suite", "test_get_vc2017", "_find_vcvarsall", "test_no_compiler"], "function_calls": ["test_suite", "run_unittest"], "class_names": ["msvccompilerTestCase"], "class_method_calls": ["sys.platform", "unittest.SkipTest", "_msvccompiler._find_vc2015", "os.path", "unittest.makeSuite", "self.assertIn", "self.assertGreaterEqual", "_msvccompiler._find_vc2017", "unittest.skipUnless", "self.assertEqual", "support.TempdirManager", "self.assertTrue", "_msvccompiler._get_vc_env", "test_var.lower", "unittest.TestCase", "os.environ", "_msvccompiler._find_vcvarsall", "self.assertRaises"]}, "test_register.py": {"libraries": ["unittest", "distutils.command.register.register", "distutils.errors.DistutilsSetupError", "distutils.log.INFO", "docutils", "distutils.tests.test_config.BasePyPIRCCommandTestCase", "warnings", "distutils.command.register", "getpass", "test.support.check_warnings", "urllib", "os", "test.support.run_unittest"], "function_names": ["test_strict", "setUp", "test_password_reset", "test_password_not_in_file", "test_create_pypirc", "getheader", "__call__", "__init__", "test_register_invalid_long_description", "test_show_response", "open", "test_suite", "_get_cmd", "test_list_classifiers", "test_registering", "tearDown", "read", "test_check_metadata_deprecated", "_getpass", "_no_way"], "function_calls": ["register", "len", "super", "Inputs", "check_warnings", "test_suite", "FakeOpener", "open", "run_unittest", "dict", "AssertionError"], "class_names": ["Inputs", "FakeOpener", "RegisterTestCase"], "class_method_calls": ["urllib.request", "cmd.check_metadata", "unittest.skipUnless", "self.assertEqual", "self.conn", "self.get_logs", "cmd.show_response", "self.answers", "self._get_cmd", "req.headers", "req.data", "getpass.getpass", "cmd.run", "self.write_file", "self.rc", "self.assertIn", "self.addCleanup", "cmd.distribution", "register_module.input", "f.read", "self.index", "self._old_getpass", "self.assertRaises", "warnings.simplefilter", "cmd.strict", "unittest.makeSuite", "cmd.ensure_finalized", "name.lower", "cmd.list_classifiers", "w.warnings", "self.old_opener", "os.path", "cmd.finalize_options", "self.reqs", "self.assertTrue", "cmd.send_metadata", "self.create_dist", "f.close", "cmd._set_config", "self.assertFalse", "inputs.__call__"]}, "test_sdist.py": {"libraries": ["pwd", "distutils.spawn.find_executable", "warnings", "os.path.join", "distutils.core.Distribution", "test.support.run_unittest", "unittest", "zipfile", "test.support.captured_stdout", "os", "tarfile", "distutils.log.WARN", "distutils.errors.DistutilsOptionError", "grp", "test.support.check_warnings", "zlib", "textwrap.dedent", "distutils.archive_util.ARCHIVE_FORMATS", "distutils.command.sdist.show_formats", "distutils.tests.test_config.BasePyPIRCCommandTestCase", "distutils.command.sdist.sdist", "distutils.filelist.FileList"], "function_names": ["_check_template", "setUp", "test_get_file_list", "test_manifest_comments", "test_manual_manifest", "test_metadata_check_option", "test_invalid_template_wrong_arguments", "test_finalize_options", "test_show_formats", "test_suite", "test_make_distribution", "test_make_distribution_owner_group", "test_add_defaults", "get_cmd", "test_prune_file_list", "test_manifest_marker", "tearDown", "test_invalid_template_unknown_command", "test_invalid_template_wrong_path", "test_check_metadata_deprecated"], "function_calls": ["Distribution", "len", "super", "sorted", "join", "FileList", "dedent", "check_warnings", "sdist", "show_formats", "open", "run_unittest", "test_suite", "captured_stdout", "find_executable"], "class_names": ["SDistTestCase"], "class_method_calls": ["cmd.manifest", "os.mkdir", "cmd.check_metadata", "cmd.owner", "line.strip", "self.clear_logs", "os.getuid", "unittest.skipUnless", "zip_file.close", "self.assertEqual", "dist.package_data", "self.get_logs", "tarinfo.name", "os.getcwd", "os.chdir", "cmd.dist_dir", "cmd.run", "cmd.use_defaults", "archive.close", "self.tmp_dir", "self.write_file", "self.assertIn", "msg.startswith", "dist.data_files", "zip_file.namelist", "zipfile.ZipFile", "os.remove", "f.read", "dist.get_command_obj", "pwd.getpwuid", "self.assertRaises", "self.old_path", "f.close", "unittest.skipIf", "tarfile.open", "warnings.simplefilter", "os.sep", "dist.packages", "dist.include_package_data", "stdout.getvalue", "unittest.makeSuite", "dist.scripts", "self._check_template", "archive.getmembers", "ARCHIVE_FORMATS.keys", "w.warnings", "member.gid", "cmd.metadata_check", "cmd.filelist", "grp.getgrgid", "build_py.ensure_finalized", "member.uid", "cmd.finalize_options", "result.sort", "dist.script_name", "os.listdir", "build_py.finalized", "os.name", "self.get_cmd", "cmd.read_template", "cmd.formats", "cmd.ensure_finalized", "cmd.group", "cmd.template"]}, "test_spawn.py": {"libraries": ["unittest", "distutils.errors.DistutilsExecError", "test.support.run_unittest", "distutils.spawn._nt_quote_args", "distutils.spawn.find_executable", "sys", "unittest.mock", "distutils.spawn.spawn", "distutils.tests.support", "test.support", "os", "stat", "test.support.unix_shell"], "function_names": ["test_suite", "test_spawn", "test_find_executable", "test_nt_quote_args"], "function_calls": ["_nt_quote_args", "open", "run_unittest", "test_suite", "spawn", "find_executable"], "class_names": ["SpawnTestCase"], "class_method_calls": ["sys.platform", "support.LoggingSilencer", "os.pathsep", "unittest.skipUnless", "unittest.mock", "self.assertEqual", "support.TempdirManager", "env.pop", "stat.S_IXUSR", "test_support.EnvironmentVarGuard", "self.write_file", "test_support.temp_dir", "test_support.TESTFN", "self.assertRaises", "unittest.makeSuite", "self.assertIsNone", "test_support.change_cwd", "self.mkdtemp", "os.path", "os.chmod", "os.name", "unittest.TestCase"]}, "test_sysconfig.py": {"libraries": ["copy.copy", "sysconfig.get_platform", "sysconfig._main", "sysconfig.get_scheme_names", "subprocess", "sysconfig.get_path_names", "sysconfig._INSTALL_SCHEMES", "sysconfig.get_paths", "sysconfig", "unittest", "platform", "test.support.PythonSymlink", "sysconfig._get_default_scheme", "test.support.captured_stdout", "os", "re", "_osx_support", "sysconfig.get_config_var", "test.support.unlink", "shutil", "test.support.check_warnings", "_imp", "test.support.TESTFN", "test.support.change_cwd", "test.support.import_module", "sys", "sysconfig._expand_vars", "test.support.skip_unless_symlink", "sysconfig.get_path", "sysconfig.get_config_vars"], "function_names": ["setUp", "test_get_makefile_filename", "test_parse_makefile", "test_triplet_in_ext_suffix", "test_get_config_vars", "test_main", "test_SO_deprecation", "test_get_platform", "test_EXT_SUFFIX_in_vars", "_get_uname", "_cleanup_testfn", "test_platform_in_subprocess", "test_get_path", "test_symlink", "test_get_path_names", "test_srcdir_independent_of_cwd", "test_get_paths", "test_SO_value", "tearDown", "_set_uname", "test_ldshared_value", "test_get_scheme_names", "test_get_config_h_filename", "test_osx_ext_suffix", "test_user_similar", "test_srcdir"], "function_calls": ["sorted", "_get_default_scheme", "get_platform", "PythonSymlink", "change_cwd", "get_path", "_main", "copy", "super", "get_config_var", "check_warnings", "open", "captured_stdout", "get_config_vars", "get_path_names", "_expand_vars", "hasattr", "len", "import_module", "get_paths", "get_scheme_names", "print"], "class_names": ["MakefileTests", "TestSysConfig"], "class_method_calls": ["os.uname_result", "self.assertIsInstance", "py.call_real", "self.version", "sys.base_exec_prefix", "sys.platform", "sysconfig._is_python_source_dir", "self.assertIsNotNone", "ctypes.c_char_p", "sysconfig.get_platform", "p.communicate", "self._set_uname", "sys.exec_prefix", "p.wait", "self.uname", "unittest.skipUnless", "sys.executable", "self.assertEqual", "sysconfig._SCHEME_KEYS", "sysconfig._parse_makefile", "self._uname", "_imp.extension_suffixes", "sys.prefix", "global_path.replace", "self.name", "scheme.items", "os.pardir", "self.assertIn", "self._changed_envvars", "output.getvalue", "self.addCleanup", "sysconfig._PYTHON_BUILD", "subprocess.Popen", "sysconfig._CONFIG_VARS", "ctypes.sizeof", "os.remove", "self.sys_path", "self._config_vars", "unittest.skipIf", "test_platform.decode", "os.uname", "os.sep", "self.assertWarns", "platform.machine", "py.call_link", "self._get_uname", "shutil.rmtree", "subprocess.PIPE", "_osx_support._remove_original_values", "self._cleanup_testfn", "base.replace", "os.environ", "self.splitdrive", "unittest.main", "sys.base_prefix", "sys.maxsize", "sys.path", "os.path", "self.isabs", "self._added_envvars", "sys.version", "re.match", "self.sep", "suffix.endswith", "sysconfig.get_config_h_filename", "os.name", "self.join", "self.assertTrue", "subprocess.DEVNULL", "sys.implementation", "sysconfig.get_config_var", "unittest.TestCase", "wanted.items", "sysconfig.get_makefile_filename", "sysconfig.get_config_vars", "self.platform"]}, "test_text_file.py": {"libraries": ["unittest", "distutils.tests.support", "os", "test.support.run_unittest", "distutils.text_file.TextFile"], "function_names": ["test_suite", "test_class", "test_input"], "function_calls": ["TextFile", "test_input", "open", "run_unittest", "test_suite"], "class_names": ["TextFileTestCase"], "class_method_calls": ["self.mkdtemp", "os.path", "unittest.makeSuite", "in_file.close", "file.readlines", "support.TempdirManager", "self.assertEqual", "out_file.close", "unittest.TestCase", "out_file.write"]}, "test_unixccompiler.py": {"libraries": ["unittest", "distutils.unixccompiler.UnixCCompiler", "distutils.sysconfig", "sys", "test.support.run_unittest", "test.support.EnvironmentVarGuard"], "function_names": ["rpath_foo", "test_osx_cc_overrides_ldshared", "setUp", "gcv", "test_osx_explicit_ldshared", "test_suite", "tearDown", "test_runtime_libdir_option"], "function_calls": ["test_suite", "CompilerWrapper", "EnvironmentVarGuard", "run_unittest"], "class_names": ["UnixCCompilerTestCase", "CompilerWrapper"], "class_method_calls": ["unittest.skipIf", "self._backup_platform", "sys.platform", "self._backup_get_config_var", "unittest.makeSuite", "sysconfig.customize_compiler", "unittest.skipUnless", "self.assertEqual", "sysconfig.get_config_var", "unittest.TestCase", "self.cc", "self.runtime_library_dir_option"]}, "test_upload.py": {"libraries": ["unittest", "distutils.command.upload.upload", "distutils.log.INFO", "distutils.tests.test_config.BasePyPIRCCommandTestCase", "unittest.mock", "distutils.command.upload", "distutils.core.Distribution", "distutils.tests.test_config.PYPIRC", "distutils.log.ERROR", "urllib.request.HTTPError", "distutils.errors.DistutilsError", "os", "test.support.run_unittest"], "function_names": ["test_finalize_options", "test_wrong_exception_order", "setUp", "getheader", "test_saved_password", "test_upload_fails", "__init__", "test_upload_correct_cr", "_urlopen", "test_suite", "tearDown", "getcode", "read", "test_upload"], "function_calls": ["isinstance", "Distribution", "super", "HTTPError", "getattr", "type", "upload", "dict", "FakeOpen", "run_unittest", "test_suite", "OSError"], "class_names": ["uploadTestCase", "FakeOpen"], "class_method_calls": ["self.last_open", "self.clear_logs", "self.code", "self.assertEqual", "self.get_logs", "cmd.show_response", "self.test_upload", "cmd.run", "self.req", "mock.Mock", "self.write_file", "self.rc", "self.assertIn", "upload_mod.urlopen", "self.subTest", "self.assertRaises", "content_type.startswith", "self._urlopen", "unittest.makeSuite", "self.url", "name.lower", "self.old_open", "mock.patch", "dist.password", "self.mkdtemp", "os.path", "self.next_code", "cmd.finalize_options", "self.next_msg", "cmd.password", "self.assertTrue", "self.create_dist", "cmd.ensure_finalized", "self.msg"]}, "test_util.py": null, "test_version.py": {"libraries": ["unittest", "distutils.version.StrictVersion", "test.support.run_unittest", "distutils.version.LooseVersion"], "function_names": ["test_suite", "test_cmp", "test_cmp_strict", "test_prerelease"], "function_calls": ["StrictVersion", "str", "LooseVersion", "run_unittest", "test_suite", "AssertionError"], "class_names": ["VersionTestCase"], "class_method_calls": ["version.prerelease", "unittest.makeSuite", "version.version", "self.assertEqual", "unittest.TestCase"]}, "test_versionpredicate.py": {"libraries": ["distutils.versionpredicate", "doctest", "test.support.run_unittest"], "function_names": ["test_suite"], "function_calls": ["test_suite", "run_unittest"], "class_names": [], "class_method_calls": ["distutils.versionpredicate", "doctest.DocTestSuite"]}, "text_file.py": {"libraries": ["sys", "io"], "function_names": ["close", "error", "warn", "__init__", "gen_error", "readline", "unreadline", "open", "readlines"], "function_calls": ["KeyError", "ValueError", "isinstance", "str", "tuple", "setattr", "RuntimeError"], "class_names": ["TextFile"], "class_method_calls": ["options.keys", "line.strip", "self.default_options", "self.collapse_join", "self.rstrip_ws", "self.open", "self.skip_blanks", "line.lstrip", "io.open", "self.lstrip_ws", "self.warn", "self.errors", "outmsg.append", "self.current_line", "lines.append", "self.linebuf", "self.file", "self.readline", "file.close", "self.strip_comments", "line.rstrip", "line.replace", "self.filename", "line.find", "self.join_lines", "sys.stderr", "self.gen_error"]}, "unixccompiler.py": {"libraries": ["re", "distutils.ccompiler.gen_lib_options", "distutils.errors.DistutilsExecError", "distutils.errors.CompileError", "distutils.log", "_osx_support", "distutils.ccompiler.CCompiler", "distutils.ccompiler.gen_preprocess_options", "distutils.errors.LinkError", "distutils.sysconfig", "sys", "distutils.errors.LibError", "distutils.dep_util.newer", "os"], "function_names": ["library_dir_option", "preprocess", "_is_gcc", "create_static_lib", "library_option", "link", "runtime_library_dir_option", "find_library_file", "_compile"], "function_calls": ["gen_preprocess_options", "CompileError", "isinstance", "LinkError", "LibError", "gen_lib_options", "type", "newer", "TypeError"], "class_names": ["UnixCCompiler"], "class_method_calls": ["self.linker_exe", "sys.platform", "self.force", "CCompiler.EXECUTABLE", "self.preprocessor", "_osx_support._default_sysroot", "self._need_link", "self.spawn", "re.search", "self._fix_lib_args", "self.compiler_cxx", "self.compiler_so", "log.debug", "self._fix_compile_args", "self._fix_object_args", "dir.startswith", "self.mkpath", "self.ranlib", "self.objects", "pp_args.extend", "_osx_support.compiler_fixup", "self.linker_so", "ld_args.extend", "self.archiver", "os.path", "self.library_filename", "sysconfig.get_config_var", "m.group", "self._is_gcc", "pp_args.append"]}, "version.py": {"libraries": ["re"], "function_names": ["__ge__", "__str__", "__le__", "_cmp", "__gt__", "__lt__", "__init__", "parse", "__eq__", "__repr__"], "function_calls": ["ValueError", "isinstance", "StrictVersion", "str", "tuple", "int", "LooseVersion", "enumerate", "map"], "class_names": ["StrictVersion", "LooseVersion", "Version"], "class_method_calls": ["other.version", "self.version_re", "self.version", "re.compile", "self.prerelease", "self.vstring", "re.ASCII", "self.__class__", "self._cmp", "match.group", "other.prerelease", "re.VERBOSE", "self.component_re", "self.parse"]}, "versionpredicate.py": {"libraries": ["re", "distutils.version", "operator"], "function_names": ["__str__", "satisfied_by", "splitUp", "__init__", "split_provision"], "function_calls": ["ValueError", "str", "splitUp"], "class_names": ["VersionPredicate"], "class_method_calls": ["match.groups", "operator.eq", "_provision_rx.match", "re_splitComparison.match", "operator.ge", "self.name", "operator.ne", "res.groups", "re_validPackage.match", "operator.lt", "value.strip", "distutils.version", "re.ASCII", "versionPredicateStr.strip", "self.pred", "operator.gt", "re_paren.match", "re.compile", "str.split", "operator.le", "m.group", "paren.strip"]}, "doctest.py": {"libraries": ["unittest", "re", "builtins", "inspect", "argparse", "difflib", "__future__", "sys", "io.StringIO", "collections.namedtuple", "pdb", "os", "linecache", "traceback"], "function_names": ["_test", "DocTestSuite", "set_unittest_reportflags", "get_examples", "setUp", "set_trace", "_normalize_module", "_from_module", "_find_options", "report_failure", "_ellipsis_match", "script_from_examples", "__eq__", "__repr__", "output_difference", "id", "runTest", "shortDescription", "__record_outcome", "_toAscii", "debug", "set_continue", "_removeTestAtIndex", "_parse_example", "report_unexpected_exception", "trace_dispatch", "get", "__lt__", "__init__", "parse", "__patched_linecache_getlines", "register_optionflag", "check_output", "_strip_exception_details", "report_start", "_indent", "_do_a_fancy_diff", "__str__", "_extract_future_flags", "debug_src", "getvalue", "_find_lineno", "__run", "test_skip", "square", "run", "out", "_get_test", "_failure_header", "_min_indent", "report_success", "merge", "_exception_traceback", "tearDown", "_check_prefix", "DocFileSuite", "_load_testfile", "testfile", "_check_prompt_blank", "summarize", "_find", "format_failure", "_newline_convert", "truncate", "_module_relative_path", "__hash__", "debug_script", "run_docstring_examples", "find", "DocFileTest", "testsource", "get_doctest", "testmod", "_comment_line"], "function_calls": ["check", "min", "_test", "getattr", "_DocTestSuite", "globals", "_normalize_module", "DebugRunner", "Example", "script_from_examples", "_ellipsis_match", "DocFileCase", "id", "OutputChecker", "isinstance", "__import__", "str", "DocTestRunner", "StringIO", "locals", "hash", "register_optionflag", "TestResults", "open", "_SpoofOut", "_strip_exception_details", "range", "_indent", "DocTestCase", "ValueError", "list", "_extract_future_flags", "out", "DocTestParser", "int", "namedtuple", "type", "enumerate", "SkipDocTestCase", "_exception_traceback", "_load_testfile", "hasattr", "testfile", "DocTestFinder", "len", "UnexpectedException", "DocTest", "compile", "_newline_convert", "_module_relative_path", "DocTestFailure", "debug_script", "DocFileTest", "_comment_line", "_OutputRedirectingPdb", "TypeError", "testsource", "testmod", "exec", "print"], "class_names": ["OutputChecker", "DocTestCase", "DocTestFinder", "UnexpectedException", "DocTest", "SkipDocTestCase", "DocTestFailure", "_DocTestSuite", "DocTestParser", "DocTestRunner", "DocFileCase", "Example", "DebugRunner", "_TestClass", "_OutputRedirectingPdb", "_SpoofOut"], "class_method_calls": ["example.exc_msg", "self._name2ft", "self._find", "notests.append", "example.want", "notests.sort", "new.getvalue", "DocTestRunner.run", "self.indent", "self._IS_BLANK_OR_COMMENT", "sys.stdout", "self._EXAMPLE_RE", "runner.failures", "save_stdout.encoding", "inspect.ismethoddescriptor", "self.debugger", "self._verbose", "test_finder.find", "inspect.getsourcefile", "got.splitlines", "inspect.getfile", "self.original_optionflags", "runner.tries", "parser.add_argument", "obj.__code__", "self._fakeout", "inspect.iscode", "StringIO.getvalue", "inspect.unwrap", "self._min_indent", "pdb.Pdb", "other._dt_checker", "self.val", "__future__.all_feature_names", "engine.compare", "self._dt_tearDown", "self.DIVIDER", "self._exclude_empty", "obj.__func__", "other.want", "re.MULTILINE", "suite.addTest", "self.__run", "other._dt_optionflags", "StringIO.truncate", "obj.tb_frame", "obj.__doc__", "self.__record_outcome", "self._check_prefix", "linecache.getlines", "self._checker", "kw.get", "module.__file__", "piece.want", "package.__loader__", "self._check_prompt_blank", "m.__name__", "self._toAscii", "args.option", "globs.copy", "sys.argv", "test.docstring", "self._dt_setUp", "want.splitlines", "traceback.print_exception", "tests.sort", "msg.rfind", "self._find_options", "self._OPTION_DIRECTIVE_RE", "file_contents.decode", "other.docstring", "self._failure_header", "failed.append", "re.escape", "want.split", "self._dt_checker", "self.failures", "save_stdout.write", "inspect.isclass", "test.examples", "encoding.lower", "exc_msg.endswith", "sys.__displayhook__", "tests.append", "inspect.getmodule", "test.filename", "obj.__dict__", "self.lineno", "self.seek", "self.examples", "self._parse_example", "test.globs", "self.format_failure", "traceback.format_exception_only", "piece.source", "builtins._", "difflib.Differ", "s.encode", "inspect.istraceback", "out.append", "other.examples", "other._name2ft", "self.report_failure", "got.count", "self.example", "string.count", "self.exc_msg", "object.__globals__", "args.fail_fast", "self.failureException", "runner.DIVIDER", "os.curdir", "p.reset", "got.startswith", "t.name", "inspect.isroutine", "module.__name__", "self._from_module", "piece.split", "self._dt_optionflags", "self.filename", "os.path", "example.options", "re.DOTALL", "inspect.isfunction", "OPTIONFLAGS_BY_NAME.keys", "passed.sort", "sys.settrace", "test_path.startswith", "sys._getframe", "line.startswith", "module.__path__", "re.match", "unittest.TestCase", "parser.parse_args", "object.__objclass__", "other._dt_test", "self.__LINECACHE_FILENAME_RE", "self.__out", "argparse.ArgumentParser", "test.name", "passed.append", "sys.flags", "got.endswith", "parser.get_doctest", "self.__patched_linecache_getlines", "other._dt_setUp", "self.exc_info", "difflib.IS_CHARACTER_JUNK", "got.find", "got.split", "self.save_linecache_getlines", "data.replace", "inspect.ismodule", "self._recurse", "globs.update", "self._EXCEPTION_RE", "self.docstring", "other.name", "master.merge", "sys.displayhook", "m.end", "other.globs", "self._find_lineno", "filename.endswith", "self.options", "self.want", "pat.match", "difflib.context_diff", "self.report_unexpected_exception", "output.pop", "re.sub", "DocTestCase.__init__", "result.endswith", "other.options", "feature.compiler_flag", "new.write", "inspect.ismethod", "self._do_a_fancy_diff", "want.count", "self.optionflags", "self._get_test", "line.rstrip", "runner.summarize", "object.__module__", "re.compile", "other.source", "unittest.TestSuite", "difflib.unified_diff", "other.exc_msg", "excout.getvalue", "self.module", "self.report_start", "msg.find", "args.verbose", "self.test", "test_path.split", "other.lineno", "example.source", "self.tearDown", "self.report_success", "object.__str__", "output.append", "pdb.set_trace", "sys.modules", "runner.run", "inspect.isframe", "self.source", "module.__dict__", "other.filename", "self.name", "sys.exit", "self.tries", "string.expandtabs", "other.indent", "self.__debugger_used", "obj.f_code", "self.setUp", "f.read", "want.endswith", "args.file", "self.got", "m.start", "sys.exc_info", "OPTIONFLAGS_BY_NAME.setdefault", "self._INDENT_RE", "self.globs", "self._dt_test", "example.lineno", "re.VERBOSE", "other._dt_tearDown", "p.interaction", "self.parse", "test.lineno", "source.endswith", "sys.path", "failed.sort", "finder.find", "self._parser", "self.skipTest", "self.use_rawinput", "self.__class__", "sys.gettrace", "string.split", "m.group", "globs.get", "self.get_examples"]}, "dummy_threading.py": {"libraries": ["_dummy_threading.*", "threading", "_dummy_thread", "sys.modules", "_dummy_threading.__all__"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "_encoded_words.py": {"libraries": ["email.errors", "re", "string.digits", "binascii", "string.ascii_letters", "base64", "functools"], "function_names": ["decode_q", "encode_q", "len_b", "__missing__", "decode", "encode_b", "len_q", "decode_b", "encode"], "function_calls": ["divmod", "len", "chr", "_QByteMap", "_q_byte_subber", "sum", "ord"], "class_names": ["_QByteMap"], "class_method_calls": ["cte.lower", "digits.encode", "errors.CharsetError", "binascii.Error", "base64.b64encode", "bytes.fromhex", "charset.partition", "errors.InvalidBase64CharactersDefect", "ew.split", "base64.b64decode", "functools.partial", "errors.InvalidBase64PaddingDefect", "ascii_letters.encode", "errors.InvalidBase64LengthDefect", "m.group", "errors.UndecodableBytesDefect", "defects.append", "cte_string.encode", "re.compile", "bstring.decode", "self.safe", "encoded.replace", "string.encode", "charset.lower"]}, "_header_value_parser.py": {"libraries": ["email.errors", "re", "string.hexdigits", "operator.itemgetter", "email._encoded_words", "sys", "email.utils", "urllib"], "function_names": ["get_no_fold_literal", "parse_content_transfer_encoding_header", "_fold_mime_parameters", "get_ttext", "pop_trailing_ws", "get_comment", "get_local_part", "__init__", "__str__", "quote_string", "get_msg_id", "_check_for_early_dl_end", "_refold_parse_tree", "ip", "fold", "content", "get_obs_local_part", "route", "get_section", "get_bare_quoted_string", "all_defects", "domain", "get_fws", "value", "parse_content_type_header", "get_display_name", "get_domain", "get_atom", "get_obs_route", "get_name_addr", "get_attrtext", "get_mailbox_list", "get_attribute", "get_word", "comments", "mailboxes", "as_ew_allowed", "domains", "params", "parse_message_id", "__new__", "get_invalid_mailbox", "get_address_list", "startswith_fws", "get_domain_literal", "get_token", "__repr__", "pprint", "quote", "get_angle_addr", "_pp", "get_quoted_string", "get_dtext", "get_value", "_get_ptext_to_endchars", "get_group", "addresses", "ppstr", "quoted_value", "parse_content_disposition_header", "__getnewargs__", "stripped_value", "get_group_list", "get_phrase", "_validate_xtext", "get_parameter", "get_extended_attribute", "display_name", "get_cfws", "get_encoded_word", "get_address", "addr_spec", "get_extended_attrtext", "param_value", "parse_mime_parameters", "get_qcontent", "get_unstructured", "_find_mime_parameters", "get_qp_ctext", "get_dot_atom", "get_dot_atom_text", "get_addr_spec", "section_number", "_fold_as_ew", "_steal_trailing_WSP_if_exists", "parse_mime_version", "local_part", "get_mailbox", "get_invalid_parameter", "all_mailboxes", "get_atext"], "function_calls": ["get_no_fold_literal", "sorted", "DotAtom", "Phrase", "MIMEVersion", "itemgetter", "NameAddr", "_fold_mime_parameters", "MsgID", "get_ttext", "ContentType", "get_comment", "get_local_part", "MessageID", "Attribute", "quote_string", "Group", "get_msg_id", "int", "MailboxList", "_check_for_early_dl_end", "_refold_parse_tree", "MimeParameters", "get_obs_local_part", "len", "_InvalidEwError", "CFWSList", "get_section", "_non_attribute_end_matcher", "get_bare_quoted_string", "InvalidMailbox", "TokenList", "reversed", "BareQuotedString", "get_fws", "DotAtomText", "ObsRoute", "get_display_name", "get_domain", "get_atom", "EncodedWord", "get_attrtext", "get_name_addr", "str", "get_obs_route", "Address", "get_mailbox_list", "get_attribute", "get_word", "_wsp_splitter", "list", "Comment", "ValueTerminal", "InvalidParameter", "Parameter", "_non_token_end_matcher", "Section", "get_invalid_mailbox", "ObsLocalPart", "InvalidMessageID", "get_domain_literal", "all", "get_token", "UnstructuredTokenList", "_non_extended_attribute_end_matcher", "Terminal", "isinstance", "_non_atom_end_matcher", "get_angle_addr", "get_quoted_string", "range", "get_dtext", "get_value", "_get_ptext_to_endchars", "set", "ContentTransferEncoding", "_non_printable_finder", "get_group", "AddressList", "AngleAddr", "hasattr", "any", "Token", "NoFoldLiteral", "sum", "Mailbox", "get_group_list", "get_phrase", "_validate_xtext", "print", "get_parameter", "Value", "get_extended_attribute", "Atom", "GroupList", "get_cfws", "get_encoded_word", "WhiteSpaceTerminal", "get_address", "super", "LocalPart", "get_extended_attrtext", "EWWhiteSpaceTerminal", "parse_mime_parameters", "get_qcontent", "_find_mime_parameters", "get_unstructured", "get_dot_atom", "get_addr_spec", "get_dot_atom_text", "get_qp_ctext", "ContentDisposition", "QuotedString", "_steal_trailing_WSP_if_exists", "_fold_as_ew", "AddrSpec", "DisplayName", "DomainLiteral", "get_mailbox", "get_invalid_parameter", "Domain", "get_atext"], "class_names": ["TokenList", "DotAtom", "Phrase", "MIMEVersion", "InvalidMessageID", "BareQuotedString", "Value", "NameAddr", "DotAtomText", "Atom", "MsgID", "UnstructuredTokenList", "ObsRoute", "GroupList", "Terminal", "Word", "ContentType", "WhiteSpaceTerminal", "EncodedWord", "LocalPart", "Address", "MessageID", "Attribute", "HeaderLabel", "EWWhiteSpaceTerminal", "Comment", "ParameterizedHeaderValue", "WhiteSpaceTokenList", "ValueTerminal", "InvalidParameter", "ContentTransferEncoding", "Group", "Header", "MailboxList", "AddressList", "ContentDisposition", "AngleAddr", "QuotedString", "Parameter", "MimeParameters", "AddrSpec", "Token", "DisplayName", "DomainLiteral", "NoFoldLiteral", "_InvalidEwError", "CFWSList", "Domain", "Section", "Mailbox", "InvalidMailbox", "ObsLocalPart"], "class_method_calls": ["tok.count", "errors.InvalidHeaderDefect", "ptext.defects", "self.domain", "token.token_type", "quoted_string.append", "param.section_number", "dot_atom_text.append", "section.defects", "self.display_name", "param.token_type", "ctype.subtype", "utils._has_surrogates", "self.local_part", "disp_header.content_disposition", "address.append", "policy.max_line_length", "angle_addr.defects", "policy.utf8", "t.value", "section.append", "errors.ObsoleteHeaderDefect", "section.number", "x.content", "param.charset", "tok.token_type", "x.addr_spec", "obs_local_part.defects", "comment.append", "display_name.defects", "v.append", "xtext.defects", "ew.lang", "re.MULTILINE", "self.ppstr", "disp_header.append", "token.value", "value.startswith", "part.startswith_fws", "param.extended", "value.token_type", "digits.isdigit", "param.lang", "newparts.append", "part.fold", "part.all_defects", "msg_id.append", "cte_header.append", "mime_version.defects", "part.ew_combine_allowed", "mailbox_list.defects", "x.all_defects", "obs_local_part.append", "dot_atom.append", "param.extend", "re.escape", "params.items", "urllib.parse", "last.token_type", "param.defects", "value.partition", "value.lstrip", "rfc2047_matcher.search", "errors.InvalidHeaderError", "angle_addr.append", "part.token_type", "errors.NonPrintableDefect", "mailbox.extend", "message_id.append", "_ew.decode", "atom.append", "local_part.value", "mailbox.token_type", "msg_id.defects", "token._pp", "self.defects", "mtoken.append", "param.append", "bare_quoted_string.defects", "res.append", "x.domains", "qstring.stripped_value", "x.token_type", "x.mailboxes", "bare_quoted_string.append", "sys.maxsize", "token.defects", "token.params", "self.content", "addr_spec.defects", "tok.split", "value_parts.append", "mailbox_list.append", "remstr.split", "cte_header.cte", "_ew.encode", "param.param_value", "self.sectioned", "self.value", "message_id.defects", "obs_local_part.token_type", "unstructured.defects", "tstr.encode", "ew.charset", "policy.linesep", "value.encode", "value.decode", "token.stripped_value", "local_part.append", "obs_route.append", "mime_version.append", "param.sectioned", "disp_header.defects", "no_fold_literal.append", "vchars.append", "ew.append", "res.value", "ew.defects", "phrase.append", "invalid_mailbox.append", "mime_parameters.defects", "group_list.append", "self.token_type", "token.section_number", "parts.insert", "errors.HeaderParseError", "ctype.append", "x.value", "display_name.extend", "group.append", "domain.append", "mailbox.append", "re.compile", "part.as_ew_allowed", "params.append", "local_part.defects", "part.params", "ew.cte", "token.all_mailboxes", "domain.defects", "res.pop", "x.domain", "first_param.extended", "ctype.maintype", "errors.NonASCIILocalPartDefect", "addr_spec.append", "phrase.defects", "tokenlist.append", "mime_parameters.append", "x.all_mailboxes", "attribute.append", "unstructured.append", "part.syntactic_break", "comments.extend", "mime_version.major", "group_list.defects", "self._pp", "address_list.defects", "self.params", "mime_version.minor", "lines.append", "parts.pop", "invalid_parameter.append", "first_param.charset", "token.all_defects", "ctype.defects", "self.quote", "token.comments", "errors.UndecodableBytesDefect", "re.VERBOSE", "domain_literal.append", "name_addr.append", "comment.defects", "cte_header.defects", "appendto.append", "errors.HeaderMissingRequiredValue", "t.token_type", "cfws.append", "group_list.extend", "self.__class__", "x.local_part", "address_list.append", "m.group", "group.defects"]}, "_parseaddr.py": {"libraries": ["time", "calendar"], "function_names": ["getaddrspec", "getatom", "getcomment", "getaddress", "__sub__", "getaddrlist", "quote", "getdelimited", "parsedate", "__init__", "getdomain", "getphraselist", "__iadd__", "__isub__", "gotonext", "__len__", "_parsedate_tz", "mktime_tz", "__add__", "parsedate_tz", "getquote", "getdomainliteral", "getrouteaddr", "__getitem__"], "function_calls": ["isinstance", "len", "quote", "_parsedate_tz", "tuple", "int", "parsedate_tz", "AddressList"], "class_names": ["AddressList", "AddrlistClass"], "class_method_calls": ["self.getaddress", "atomlist.append", "s.find", "result.append", "slist.append", "self.gotonext", "self.commentlist", "aslist.pop", "tz.upper", "data.split", "self.getcomment", "self.getdomain", "self.getaddrspec", "self.getphraselist", "other.addresslist", "self.FWS", "tm.split", "self.pos", "newaddr.addresslist", "SPACE.join", "self.addresslist", "self.specials", "self.getaddrlist", "self.field", "str.replace", "self.atomends", "calendar.timegm", "data.append", "tz.startswith", "self.LWS", "self.getatom", "aslist.append", "self.getdomainliteral", "self.phraseends", "_monthnames.index", "mm.lower", "sdlist.append", "dd.lower", "self.getdelimited", "yy.find", "self.CR", "wslist.append", "plist.append", "self.getrouteaddr", "self.getquote", "time.mktime", "AddrlistClass.__init__", "EMPTYSTRING.join"]}, "_policybase.py": {"libraries": ["abc", "email.charset", "email.utils._has_surrogates", "email.header"], "function_names": ["clone", "_sanitize_header", "__setattr__", "handle_defect", "header_max_count", "fold", "header_fetch_parse", "_append_doc", "__init__", "__add__", "_fold", "header_source_parse", "__repr__", "header_store_parse", "fold_binary", "register_defect", "_extend_docstrings"], "function_calls": ["isinstance", "AttributeError", "super", "getattr", "_append_doc", "_has_surrogates", "TypeError", "Compat32", "hasattr"], "class_names": ["_PolicyBase", "Policy", "Compat32"], "class_method_calls": ["attr.__doc__", "self.__dict__", "kw.items", "self._fold", "doc.rsplit", "self._sanitize_header", "base.mro", "_charset.UNKNOWN8BIT", "value.lstrip", "other.__dict__", "object.__setattr__", "cls.__doc__", "self.register_defect", "cls.__bases__", "parts.append", "self.cte_type", "obj.defects", "header.Header", "self.clone", "cls.__dict__", "abc.ABCMeta", "value.rstrip", "self.linesep", "self.max_line_length", "self.raise_on_defect", "abc.abstractmethod", "added_doc.split", "folded.encode", "msg.format", "self.__class__", "h.encode"]}, "base64mime.py": {"libraries": ["binascii.b2a_base64", "base64.b64encode", "binascii.a2b_base64"], "function_names": ["header_length", "header_encode", "decode", "body_encode"], "function_calls": ["divmod", "len", "isinstance", "b64encode", "b2a_base64", "a2b_base64", "bytes", "range"], "class_names": [], "class_method_calls": ["encvec.append", "enc.endswith", "string.encode", "EMPTYSTRING.join", "header_bytes.encode"]}, "charset.py": {"libraries": ["email.errors", "email.quoprimime", "email.base64mime", "functools.partial", "email.encoders.encode_7or8bit"], "function_names": ["header_encode_lines", "_get_encoder", "get_body_encoding", "body_encode", "add_codec", "_encode", "add_charset", "get_output_charset", "__init__", "header_encode", "add_alias", "__repr__", "__eq__"], "function_calls": ["ValueError", "isinstance", "len", "encoder", "partial", "_encode", "str", "next"], "class_names": ["Charset"], "class_method_calls": ["encoder_module.header_encode", "errors.CharsetError", "self.input_codec", "email.quoprimime", "email.base64mime", "input_charset.encode", "CODEC_MAP.get", "self.header_encoding", "self.output_codec", "lines.append", "self.get_output_charset", "self.body_encoding", "string.decode", "encoder_module.header_length", "ALIASES.get", "self.output_charset", "current_line.append", "input_charset.lower", "CHARSETS.get", "current_line.pop", "self.input_charset", "string.encode", "EMPTYSTRING.join", "self._get_encoder"]}, "contentmanager.py": {"libraries": ["email.errors", "email.quoprimime", "binascii", "email.message", "email.charset"], "function_names": ["add_set_handler", "add_get_handler", "get_text_content", "_find_set_handler", "_prepare_set", "get_message_content", "_encode_base64", "__init__", "set_message_content", "set_content", "_finalize_set", "get_non_text_content", "embedded_body", "set_text_content", "set_bytes_content", "get_content", "get_and_fixup_unknown_message_content", "_encode_text", "normal_body"], "function_calls": ["KeyError", "ValueError", "len", "ContentManager", "_prepare_set", "_finalize_set", "max", "handler", "embedded_body", "_encode_base64", "getattr", "type", "bytes", "TypeError", "_encode_text", "range", "normal_body", "hasattr"], "class_names": ["ContentManager"], "class_method_calls": ["typ.__name__", "linesep.join", "raw_data_manager.add_set_handler", "msg.clear_content", "header.fold", "typ.__qualname__", "msg.get_content_maintype", "msg.get_param", "email.charset", "params.items", "self.get_handlers", "policy.linesep", "mp.header_factory", "msg.set_payload", "data.encode", "mp.header_source_parse", "policy.max_line_length", "sniff.decode", "header.name", "data.decode", "self.set_handlers", "raw_data_manager.add_get_handler", "email.errors", "msg.get_payload", "content.decode", "binascii.b2a_qp", "binascii.b2a_base64", "msg.policy", "self._find_set_handler", "encoded_lines.append", "header.defects", "policy.cte_type", "email.message", "quoprimime.body_encode", "msg.get_content_type", "string.encode", "msg.set_param"]}, "encoders.py": {"libraries": ["quopri.encodestring", "base64.encodebytes"], "function_names": ["encode_7or8bit", "_qencode", "encode_quopri", "encode_base64", "encode_noop"], "function_calls": ["_encodestring", "str", "_bencode", "_qencode"], "class_names": [], "class_method_calls": ["msg.get_payload", "orig.decode", "enc.replace", "msg.set_payload"]}, "feedparser.py": {"libraries": ["email.errors", "re", "collections.deque", "email.message.Message", "io.StringIO", "email._policybase.compat32"], "function_names": ["push_eof_matcher", "close", "feed", "pushlines", "push", "__iter__", "pop_eof_matcher", "_new_message", "_parsegen", "__init__", "readline", "unreadline", "_pop_message", "_parse_headers", "_set_headersonly", "__next__", "_call_parse"], "function_calls": ["BufferedSubFile", "isinstance", "object", "ateof", "len", "super", "str", "reversed", "StringIO", "_factory", "deque", "enumerate"], "class_names": ["BufferedSubFile", "FeedParser", "BytesFeedParser"], "class_method_calls": ["self._lines", "errors.InvalidHeaderDefect", "errors.InvalidMultipartContentTransferEncodingDefect", "errors.MisplacedEnvelopeHeaderDefect", "headerRE.match", "re.escape", "self._closed", "lastvalue.append", "errors.FirstHeaderLineIsContinuationDefect", "errors.MultipartInvariantViolationDefect", "headers.append", "errors.NoBoundaryInMultipartDefect", "preamble.append", "self._headersonly", "errors.StartBoundaryNotFoundDefect", "mo.group", "data.decode", "self._msgstack", "self._parsegen", "NLCRE.match", "self._call_parse", "self.pushlines", "self._input", "errors.MissingHeaderBodySeparatorDefect", "self._parse", "root.is_multipart", "lines.append", "self._partial", "epilogue.append", "self._eofstack", "msg.set_default_type", "self._last", "self._cur", "self.readline", "parts.pop", "root.get_content_maintype", "boundaryre.match", "policy.message_factory", "NLCRE_bol.match", "self._new_message", "re.compile", "self.policy", "line.find", "bolmo.group", "eolmo.group", "self._factory", "self._old_style_factory", "self._pop_message", "line.startswith", "NLCRE_eol.search", "EMPTYSTRING.join", "errors.CloseBoundaryNotFoundDefect", "self._parse_headers"]}, "generator.py": {"libraries": ["re", "time", "random", "copy.deepcopy", "sys", "io.StringIO", "email.utils._has_surrogates", "io.BytesIO"], "function_names": ["write", "clone", "_write", "_encode", "flatten", "__init__", "_dispatch", "_write_headers", "_compile_re", "_handle_message", "_write_lines", "_handle_text", "_new_buffer", "_make_boundary", "_handle_multipart_signed", "_handle_message_delivery_status", "_handle_multipart"], "function_calls": ["BytesIO", "isinstance", "len", "super", "deepcopy", "meth", "getattr", "str", "StringIO", "_has_surrogates", "type", "print", "TypeError", "repr"], "class_names": ["DecodedGenerator", "Generator", "BytesGenerator"], "class_method_calls": ["msg.epilogue", "msg.get_content_subtype", "blocks.append", "self._encoded_EMPTY", "policy.clone", "self._fp", "part.get_payload", "self._mangle_from_", "UNDERSCORE.join", "re.escape", "msg.get_content_maintype", "self._encoded_NL", "msg.get_param", "policy.linesep", "self._dispatch", "msgtexts.pop", "msg.set_payload", "self._NL", "self._EMPTY", "msg.raw_items", "self._encode", "msg.get_boundary", "time.ctime", "s.encode", "Generator.__init__", "cre.search", "part.get_content_subtype", "text.split", "msgtexts.append", "msg.set_boundary", "self.write", "part.get", "main.replace", "cls._compile_re", "self.clone", "msg.get_payload", "s.getvalue", "msg.preamble", "self._writeBody", "part.get_content_type", "self._write", "g.flatten", "random.randrange", "msg.replace_header", "re.MULTILINE", "sfp.getvalue", "policy.mangle_from_", "NLCRE.split", "msg._payload", "part.get_filename", "p.clone", "msg.policy", "part.get_content_maintype", "time.time", "Generator._make_boundary", "sys.maxsize", "re.compile", "self.policy", "self._make_boundary", "self.maxheaderlen", "self._handle_multipart", "self._write_headers", "self._new_buffer", "msg.walk", "self.__class__", "self._write_lines", "self._fmt", "fcre.sub", "self._munge_cte", "msg.get_unixfrom", "msg.get"]}, "header.py": {"libraries": ["re", "email.base64mime", "email.quoprimime", "binascii", "email.charset", "email.errors.HeaderParseError"], "function_names": ["append", "push", "make_header", "__eq__", "part_count", "feed", "_ascii_split", "__init__", "_maxlengths", "decode_header", "add_transition", "_str", "_normalize", "__str__", "__len__", "_nonctext", "pop_from", "pop", "encode", "is_onlyws", "newline", "reset", "_append_chunk"], "function_calls": ["isinstance", "len", "super", "iter", "str", "reversed", "_ValueFormatter", "HeaderParseError", "Header", "Charset", "zip", "_Accumulator", "sum", "enumerate", "bytes", "AssertionError", "range", "hasattr"], "class_names": ["_ValueFormatter", "Header", "_Accumulator"], "class_method_calls": ["self._nonctext", "header.splitlines", "self._lines", "self._ascii_split", "words.append", "charset.output_codec", "last_chunk.append", "self.newline", "linesep.join", "SPACE.join", "ecre.search", "string.splitlines", "binascii.Error", "decoded_words.append", "self.part_count", "self._initial_size", "self.append", "self._maxlen", "self._continuation_ws_len", "self._continuation_ws", "ch.isspace", "line.lstrip", "email.quoprimime", "formatter._str", "_charset.UNKNOWN8BIT", "self._current_line", "h.append", "email.base64mime", "self._str", "header._chunks", "unencoded.lstrip", "original_bytes.decode", "s.encode", "encoded_lines.pop", "s.decode", "formatter.feed", "_charset._encode", "self._normalize", "charset.header_encode_lines", "_embedded_header.search", "chunks.append", "s.isspace", "self._append_chunk", "parts.pop", "self._maxlinelen", "re.MULTILINE", "formatter.newline", "_charset.Charset", "re.VERBOSE", "self._headerlen", "self._splitchars", "uchunks.append", "self._chunks", "self._charset", "re.compile", "self._maxlengths", "collapsed.append", "droplist.append", "formatter.add_transition", "string.encode", "charset.input_codec", "ecre.split", "charset.header_encoding", "EMPTYSTRING.join", "re.split"]}, "headerregistry.py": {"libraries": ["email.errors", "types.MappingProxyType", "email.utils", "email._header_value_parser"], "function_names": ["maintype", "version", "username", "address", "content_type", "domain", "__repr__", "__eq__", "groups", "subtype", "map_to_type", "display_name", "__reduce__", "major", "datetime", "_reconstruct", "addr_spec", "__call__", "__init__", "parse", "defects", "name", "init", "value_parser", "__str__", "addresses", "fold", "cte", "params", "_reconstruct_header", "minor", "__new__", "content_disposition", "__getitem__"], "function_calls": ["ValueError", "isinstance", "len", "list", "super", "str", "set", "tuple", "Group", "staticmethod", "type", "Address", "filter", "hasattr", "TypeError", "MappingProxyType"], "class_names": ["DateHeader", "UniqueDateHeader", "UniqueSingleAddressHeader", "MessageIDHeader", "ContentDispositionHeader", "UnstructuredHeader", "Group", "AddressHeader", "HeaderRegistry", "BaseHeader", "UniqueUnstructuredHeader", "Address", "ContentTransferEncodingHeader", "SingleAddressHeader", "ContentTypeHeader", "UniqueAddressHeader", "MIMEVersionHeader", "ParameterizedMIMEHeader"], "class_method_calls": ["self.__dict__", "self.domain", "header.fold", "parse_tree.major", "self._domain", "self.display_name", "self._params", "parser.ValueTerminal", "parse_tree.minor", "self._maintype", "utils._has_surrogates", "utils.parsedate_to_datetime", "other.display_name", "header.append", "a_s.domain", "str.__new__", "self._username", "self.default_class", "parser.parse_message_id", "parser.parse_content_type_header", "self._minor", "self._subtype", "self.username", "self._groups", "parser.parse_content_transfer_encoding_header", "parser.HeaderLabel", "cls.parse", "self._defects", "addr.display_name", "address_list.addresses", "self.registry", "self._major", "self.addr_spec", "self._datetime", "parser.WhiteSpaceTerminal", "name.lower", "parser.TokenList", "parse_tree.params", "parser.CFWSList", "self._display_name", "parser.get_address_list", "self._parse_tree", "self._addresses", "self._name", "address_list.all_defects", "utils.format_datetime", "cls.value_parser", "other.username", "parser.quote_string", "mb.display_name", "self._cte", "self._content_disposition", "cls.__name__", "self.base_class", "other.addresses", "a_s.all_defects", "parser.Header", "self.maintype", "self._version", "self.init", "groups.append", "a_s.local_part", "self.addresses", "parse_tree.all_defects", "mb.domain", "parser.get_unstructured", "self.subtype", "self.name", "group.addresses", "parser.SPECIALS", "mb.local_part", "parser.parse_mime_version", "kw.pop", "parser.get_addr_spec", "parser.DOT_ATOM_ENDS", "utils._sanitize", "other.domain", "errors.HeaderMissingRequiredValue", "parser.parse_content_disposition_header", "self.__class__", "addr.all_mailboxes"]}, "iterators.py": {"libraries": ["sys", "io.StringIO"], "function_names": ["walk", "body_line_iterator", "_structure", "typed_subpart_iterator"], "function_calls": ["StringIO", "isinstance", "_structure", "print"], "class_names": [], "class_method_calls": ["msg.get_default_type", "self.is_multipart", "subpart.get_content_maintype", "msg.get_payload", "msg.is_multipart", "subpart.get_payload", "msg.walk", "subpart.walk", "msg.get_content_type", "self.get_payload", "sys.stdout", "subpart.get_content_subtype"]}, "message.py": {"libraries": ["email.message", "email.mime.nonmultipart.MIMENonMultipart"], "function_names": ["__init__"], "function_calls": ["TypeError", "isinstance"], "class_names": ["MIMEMessage"], "class_method_calls": ["self.set_default_type", "message.Message", "MIMENonMultipart.__init__"]}, "application.py": {"libraries": ["email.mime.nonmultipart.MIMENonMultipart", "email.encoders"], "function_names": ["__init__"], "function_calls": ["TypeError", "_encoder"], "class_names": ["MIMEApplication"], "class_method_calls": ["self.set_payload", "MIMENonMultipart.__init__", "encoders.encode_base64"]}, "audio.py": {"libraries": ["email.mime.nonmultipart.MIMENonMultipart", "sndhdr", "io.BytesIO", "email.encoders"], "function_names": ["__init__", "_whatsnd"], "function_calls": ["BytesIO", "_whatsnd", "_encoder", "testfn", "TypeError"], "class_names": ["MIMEAudio"], "class_method_calls": ["MIMENonMultipart.__init__", "encoders.encode_base64", "sndhdr.tests", "_sndhdr_MIMEmap.get", "self.set_payload"]}, "base.py": {"libraries": ["email.policy", "email.message"], "function_names": ["__init__"], "function_calls": [], "class_names": ["MIMEBase"], "class_method_calls": ["self.add_header", "message.Message", "email.policy"]}, "image.py": {"libraries": ["imghdr", "email.mime.nonmultipart.MIMENonMultipart", "email.encoders"], "function_names": ["__init__"], "function_calls": ["TypeError", "_encoder"], "class_names": ["MIMEImage"], "class_method_calls": ["self.set_payload", "MIMENonMultipart.__init__", "imghdr.what", "encoders.encode_base64"]}, "multipart.py": {"libraries": ["email.mime.base.MIMEBase"], "function_names": ["__init__"], "function_calls": [], "class_names": ["MIMEMultipart"], "class_method_calls": ["MIMEBase.__init__", "self.attach", "self.set_boundary", "self._payload"]}, "nonmultipart.py": {"libraries": ["email.errors", "email.mime.base.MIMEBase"], "function_names": ["attach"], "function_calls": [], "class_names": ["MIMENonMultipart"], "class_method_calls": ["errors.MultipartConversionError"]}, "text.py": {"libraries": ["os", "msilib"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["os.path"]}, "parser.py": {"libraries": ["warnings", "re", "html.unescape", "_markupbase"], "function_names": ["set_cdata_mode", "unknown_decl", "goahead", "parse_endtag", "handle_endtag", "get_starttag_text", "clear_cdata_mode", "feed", "handle_charref", "__init__", "parse_bogus_comment", "handle_entityref", "check_for_whole_start_tag", "handle_decl", "close", "handle_data", "parse_starttag", "handle_comment", "handle_pi", "handle_starttag", "unescape", "parse_pi", "parse_html_declaration", "handle_startendtag", "reset"], "function_calls": ["len", "startswith", "max", "AssertionError", "unescape"], "class_names": ["HTMLParser"], "class_method_calls": ["namematch.end", "locatestarttagend_tolerant.match", "match.start", "tagfind_tolerant.match", "endtagfind.match", "self.clear_cdata_mode", "self.handle_data", "self.check_for_whole_start_tag", "piclose.search", "self.parse_bogus_comment", "elem.lower", "self.parse_pi", "self.handle_charref", "rawdata.rfind", "self.handle_entityref", "self.__starttag_text", "self.parse_html_declaration", "warnings.warn", "m.end", "self.parse_endtag", "self.parse_comment", "self.lasttag", "self.handle_starttag", "attrfind_tolerant.match", "self.reset", "entityref.match", "incomplete.match", "re.I", "self.handle_pi", "rawdata.startswith", "endendtag.search", "namematch.group", "match.end", "self.goahead", "self.updatepos", "self.interesting", "self.cdata_elem", "rawdata.find", "re.VERBOSE", "self.CDATA_CONTENT_ELEMENTS", "self.parse_starttag", "self.handle_decl", "re.compile", "self.handle_comment", "_markupbase.ParserBase", "self.convert_charrefs", "end.endswith", "self.handle_startendtag", "attrname.lower", "starttagopen.match", "attrs.append", "self.getpos", "charref.match", "self.rawdata", "self.handle_endtag", "match.group", "self.set_cdata_mode", "m.group", "self.parse_marked_section"]}, "policy.py": {"libraries": ["re", "email._policybase.Compat32", "email.contentmanager.raw_data_manager", "email._policybase._extend_docstrings", "sys", "email.headerregistry.HeaderRegistry", "email._policybase.Policy", "email._policybase.compat32", "email.utils._has_surrogates", "email.message.EmailMessage"], "function_names": ["header_max_count", "header_fetch_parse", "__init__", "_fold", "header_store_parse", "header_source_parse", "fold_binary", "fold"], "function_calls": ["ValueError", "isinstance", "len", "any", "EmailPolicy", "super", "_has_surrogates", "HeaderRegistry", "hasattr"], "class_names": ["EmailPolicy"], "class_method_calls": ["default.clone", "self._fold", "SMTP.clone", "linesep_splitter.split", "value.name", "value.lstrip", "object.__setattr__", "self.refold_source", "self.cte_type", "default.header_factory", "self.header_factory", "value.rstrip", "self.utf8", "name.lower", "self.linesep", "self.max_line_length", "sys.maxsize", "re.compile", "folded.encode", "value.splitlines", "value.fold"]}, "quoprimime.py": {"libraries": ["re", "string.ascii_letters", "string.digits", "string.hexdigits"], "function_names": ["_max_append", "quote", "body_encode", "header_decode", "body_length", "header_check", "header_encode", "_unquote_match", "decode", "body_check", "unquote", "header_length"], "function_calls": ["ValueError", "isinstance", "len", "quote", "chr", "append", "int", "unquote", "sum", "ord", "range"], "class_names": [], "class_method_calls": ["encoded.splitlines", "decoded.endswith", "re.sub", "eol.join", "digits.encode", "re.ASCII", "s.replace", "encoded_body.append", "s.lstrip", "ascii_letters.encode", "header_bytes.decode", "match.group", "L.append", "body.translate", "body.splitlines", "line.rstrip"]}, "utils.py": {"libraries": ["contextlib", "unittest.mock", "test.support", "asyncio", "unittest", "io", "threading", "http.server.HTTPServer", "asyncio.events", "asyncio.base_events", "collections", "weakref", "socket", "os", "asyncio.futures", "logging", "re", "socketserver", "time", "wsgiref.simple_server.WSGIRequestHandler", "tempfile", "asyncio.format_helpers", "wsgiref.simple_server.WSGIServer", "selectors", "ssl", "sys", "asyncio.tasks", "asyncio.log.logger"], "function_names": ["disable_logger", "setUp", "run_briefly", "get_stderr", "add_reader", "data_file", "simple_client_sslcontext", "__eq__", "dummy_ssl_context", "gen", "MockCallback", "assert_no_reader", "run_until", "gen_unix_socket_path", "get_request", "select", "call_at", "remove_reader", "set_event_loop", "__init__", "_process_events", "get_function_source", "_add_reader", "_run_once", "_run_test_server", "add_writer", "register", "app", "handle_error", "close", "time", "assert_writer", "simple_server_sslcontext", "get_map", "_add_writer", "_remove_writer", "unix_socket_path", "_write_to_self", "tearDown", "run_once", "run_test_unix_server", "_ensure_fd_no_transport", "unpatch_get_running_loop", "remove_writer", "server_bind", "_remove_reader", "assert_reader", "new_test_loop", "log_message", "unregister", "loop", "reset_counters", "close_loop", "make_test_protocol", "finish_request", "run_test_server", "mock_nonblocking_socket", "advance_time"], "function_calls": ["min", "TestLoop", "server_class", "start_response", "data_file", "gen", "MockCallback", "RuntimeError", "gen_unix_socket_path", "isinstance", "super", "str", "_run_test_server", "AssertionError", "ValueError", "list", "dir", "int", "type", "next", "unix_socket_path", "bool", "hasattr", "pred", "len", "loop", "once", "FileNotFoundError", "TestSelector"], "class_names": ["MockPattern", "SSLWSGIServer", "UnixHTTPServer", "TestLoop", "SSLWSGIServerMixin", "UnixSSLWSGIServer", "UnixWSGIServer", "SilentWSGIServer", "TestCase", "SilentWSGIRequestHandler", "MockInstanceOf", "TestSelector", "SilentUnixWSGIServer"], "class_method_calls": ["self._time", "server_context.check_hostname", "self._ensure_fd_no_transport", "self.close_loop", "self.assertEqual", "socket.SOCK_STREAM", "sock.proto", "handle._callback", "self._thread_cleanup", "base.__bases__", "loop.close", "ssock.close", "support.maybe_get_event_loop_policy", "client_context.verify_mode", "collections.defaultdict", "re.S", "thread.join", "self.setup_environ", "policy.get_child_watcher", "loop.call_soon", "ssl.PROTOCOL_TLS_SERVER", "t._log_destroy_pending", "self._add_writer", "httpd.set_app", "socketserver.UnixStreamServer", "self.advance_time", "ssl.PROTOCOL_TLS_CLIENT", "name.endswith", "ssl.CERT_NONE", "client_context.check_hostname", "fd.fileno", "ssl.SSLContext", "selectors.BaseSelector", "self.keys", "watcher._threads", "re.search", "events.set_event_loop", "mock.Mock", "self.request_timeout", "sock.gettimeout", "handle._args", "io.StringIO", "tasks.sleep", "httpd.address", "UnixHTTPServer.server_bind", "contextlib.contextmanager", "self.server_name", "self._check_on_close", "os.path", "httpd.shutdown", "unittest.TestCase", "loop._default_executor", "httpd.serve_forever", "time.monotonic", "executor.shutdown", "self._type", "sock.family", "futures.TimeoutError", "file.name", "logging.CRITICAL", "self._selector", "name.startswith", "self._get_running_loop", "self.addCleanup", "self._transports", "loop.create_task", "support.threading_setup", "selectors.SelectorKey", "loop.run_until_complete", "logger.level", "self._gen", "server_thread.start", "base_events.BaseEventLoop", "server_thread.join", "server_context.load_cert_chain", "support.TEST_HOME_DIR", "events._get_running_loop", "mock.MagicMock", "self.remove_reader_count", "socket.AF_INET", "loop.run_forever", "self.writers", "support.threading_cleanup", "tempfile.NamedTemporaryFile", "self.reset_counters", "socket.IPPROTO_TCP", "self.unpatch_get_running_loop", "self._clock_resolution", "format_helpers._get_function_source", "request.settimeout", "self.set_event_loop", "self._remove_reader", "gen.close", "self._timers", "ssl.PROTOCOL_TLS", "sock.type", "weakref.WeakValueDictionary", "httpd.server_address", "events.Handle", "self.RequestHandlerClass", "sys.exc_info", "self.server_port", "self._remove_writer", "context.wrap_socket", "self.readers", "self._add_reader", "support.reap_children", "context.load_cert_chain", "server_context.verify_mode", "os.unlink", "asyncio.ThreadedChildWatcher", "self.doCleanups", "loop.stop", "self.remove_writer_count", "logger.setLevel", "threading.Thread", "httpd.server_close", "socket.socket"]}, "aliases.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "base64_codec.py": {"libraries": ["codecs", "base64"], "function_names": ["base64_encode", "base64_decode", "decode", "getregentry", "encode"], "function_calls": ["base64_encode", "len", "base64_decode"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["base64.decodebytes", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "base64.encodebytes", "self.errors"]}, "big5.py": {"libraries": ["_codecs_tw", "_multibytecodec", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "_codecs_tw.getcodec", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "big5hkscs.py": {"libraries": ["codecs", "_multibytecodec", "_codecs_hk"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "_codecs_hk.getcodec", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "bz2_codec.py": {"libraries": ["bz2", "codecs"], "function_names": ["bz2_encode", "__init__", "decode", "reset", "getregentry", "bz2_decode", "encode"], "function_calls": ["bz2_decode", "bz2_encode", "len"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["bz2.BZ2Compressor", "codecs.CodecInfo", "bz2.compress", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "self.compressobj", "self.decompressobj", "bz2.BZ2Decompressor", "codecs.Codec", "self.errors", "bz2.decompress"]}, "charmap.py": {"libraries": ["codecs"], "function_names": ["__init__", "decode", "encode", "getregentry"], "function_calls": [], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "self.mapping", "codecs.StreamReader", "Codec.decode", "codecs.StreamWriter", "codecs.IncrementalDecoder", "Codec.encode", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp037.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp1006.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp1026.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp1125.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp1140.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp1250.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp1251.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp1252.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp1253.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp1254.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp1255.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp1256.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp1257.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp1258.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp273.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp424.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp437.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp500.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp720.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp737.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp775.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp850.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp852.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp855.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp856.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp857.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp858.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp860.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp861.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp862.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp863.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp864.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp865.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp866.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp869.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "cp874.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp875.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "cp932.py": {"libraries": ["_multibytecodec", "_codecs_jp", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "_codecs_jp.getcodec", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "cp949.py": {"libraries": ["codecs", "_multibytecodec", "_codecs_kr"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "_codecs_kr.getcodec", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "cp950.py": {"libraries": ["_codecs_tw", "_multibytecodec", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "_codecs_tw.getcodec", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "euc_jis_2004.py": {"libraries": ["_multibytecodec", "_codecs_jp", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "_codecs_jp.getcodec", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "euc_jisx0213.py": {"libraries": ["_multibytecodec", "_codecs_jp", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "_codecs_jp.getcodec", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "euc_jp.py": {"libraries": ["_multibytecodec", "_codecs_jp", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "_codecs_jp.getcodec", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "euc_kr.py": {"libraries": ["codecs", "_multibytecodec", "_codecs_kr"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "_codecs_kr.getcodec", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "gb18030.py": {"libraries": ["_multibytecodec", "_codecs_cn", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "_codecs_cn.getcodec", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "gb2312.py": {"libraries": ["_multibytecodec", "_codecs_cn", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "_codecs_cn.getcodec", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "gbk.py": {"libraries": ["_multibytecodec", "_codecs_cn", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "_codecs_cn.getcodec", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "hex_codec.py": {"libraries": ["binascii", "codecs"], "function_names": ["hex_encode", "hex_decode", "decode", "getregentry", "encode"], "function_calls": ["len", "hex_encode", "hex_decode"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "binascii.a2b_hex", "codecs.Codec", "binascii.b2a_hex", "self.errors"]}, "hp_roman8.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "hz.py": {"libraries": ["_multibytecodec", "_codecs_cn", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "_codecs_cn.getcodec", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "idna.py": {"libraries": ["re", "unicodedata.ucd_3_2_0", "stringprep", "codecs"], "function_names": ["nameprep", "ToASCII", "_buffer_encode", "_buffer_decode", "decode", "getregentry", "ToUnicode", "encode"], "function_calls": ["nameprep", "isinstance", "len", "any", "bytearray", "str", "UnicodeError", "ToASCII", "bytes", "Codec", "ToUnicode"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["result.append", "stringprep.in_table_c7", "stringprep.in_table_d1", "codecs.StreamWriter", "dots.split", "stringprep.in_table_c8", "label.startswith", "stringprep.in_table_c3", "label.encode", "codecs.CodecInfo", "label1.decode", "stringprep.in_table_c12", "result.split", "codecs.StreamReader", "stringprep.in_table_c9", "codecs.BufferedIncrementalDecoder", "unicodedata.normalize", "stringprep.in_table_b1", "stringprep.in_table_c22", "result.extend", "stringprep.in_table_c6", "codecs.Codec", "stringprep.map_table_b2", "stringprep.in_table_d2", "stringprep.in_table_c4", "stringprep.in_table_c5", "newlabel.append", "codecs.BufferedIncrementalEncoder", "re.compile", "input.encode", "input.decode", "input.split"]}, "iso2022_jp.py": {"libraries": ["_multibytecodec", "_codecs_iso2022", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec", "_codecs_iso2022.getcodec"]}, "iso2022_jp_1.py": {"libraries": ["_multibytecodec", "_codecs_iso2022", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec", "_codecs_iso2022.getcodec"]}, "iso2022_jp_2.py": {"libraries": ["_multibytecodec", "_codecs_iso2022", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec", "_codecs_iso2022.getcodec"]}, "iso2022_jp_2004.py": {"libraries": ["_multibytecodec", "_codecs_iso2022", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec", "_codecs_iso2022.getcodec"]}, "iso2022_jp_3.py": {"libraries": ["_multibytecodec", "_codecs_iso2022", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec", "_codecs_iso2022.getcodec"]}, "iso2022_jp_ext.py": {"libraries": ["_multibytecodec", "_codecs_iso2022", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec", "_codecs_iso2022.getcodec"]}, "iso2022_kr.py": {"libraries": ["_multibytecodec", "_codecs_iso2022", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec", "_codecs_iso2022.getcodec"]}, "iso8859_1.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_10.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_11.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_13.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_14.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_15.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_16.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_2.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_3.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_4.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_5.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_6.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_7.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_8.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "iso8859_9.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "johab.py": {"libraries": ["codecs", "_multibytecodec", "_codecs_kr"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "_codecs_kr.getcodec", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "koi8_r.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "koi8_t.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "koi8_u.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "kz1048.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "latin_1.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": [], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "StreamConverter", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.latin_1_decode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.latin_1_encode", "Codec.decode", "codecs.StreamWriter", "codecs.IncrementalDecoder", "Codec.encode", "codecs.Codec", "self.errors"]}, "mac_arabic.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "decoding_map.update", "codecs.Codec", "self.errors", "codecs.charmap_decode"]}, "mac_centeuro.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "mac_croatian.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "mac_cyrillic.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "mac_farsi.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "mac_greek.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "mac_iceland.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "mac_latin2.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "mac_roman.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "mac_romanian.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "mac_turkish.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "mbcs.py": {"libraries": ["codecs", "codecs.mbcs_decode", "codecs.mbcs_encode"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["mbcs_decode", "mbcs_encode"], "class_names": ["StreamReader", "IncrementalEncoder", "IncrementalDecoder", "StreamWriter"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.BufferedIncrementalDecoder", "self.errors"]}, "oem.py": {"libraries": ["codecs.oem_decode", "codecs.oem_encode", "codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["oem_decode", "oem_encode"], "class_names": ["StreamReader", "IncrementalEncoder", "IncrementalDecoder", "StreamWriter"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.BufferedIncrementalDecoder", "self.errors"]}, "palmos.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "ptcp154.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "punycode.py": {"libraries": ["codecs"], "function_names": ["selective_find", "adapt", "generate_integers", "insertion_sort", "generate_generalized_integer", "T", "punycode_encode", "decode_generalized_number", "insertion_unsort", "punycode_decode", "selective_len", "segregate", "decode", "getregentry", "encode"], "function_calls": ["sorted", "T", "decode_generalized_number", "punycode_decode", "selective_len", "isinstance", "insertion_sort", "str", "segregate", "Codec", "selective_find", "adapt", "generate_integers", "generate_generalized_integer", "punycode_encode", "UnicodeError", "set", "insertion_unsort", "enumerate", "bytearray", "len", "chr", "bytes", "ord"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "result.append", "codecs.StreamReader", "base.append", "result.extend", "codecs.StreamWriter", "codecs.IncrementalDecoder", "text.rfind", "codecs.Codec", "text.encode", "extended.add", "self.errors"]}, "quopri_codec.py": {"libraries": ["quopri", "io.BytesIO", "codecs"], "function_names": ["quopri_decode", "quopri_encode", "decode", "getregentry", "encode"], "function_calls": ["BytesIO", "len", "quopri_decode", "quopri_encode"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "g.getvalue", "codecs.IncrementalDecoder", "quopri.decode", "codecs.Codec", "self.errors", "quopri.encode"]}, "raw_unicode_escape.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": [], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.raw_unicode_escape_decode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.raw_unicode_escape_encode", "codecs.StreamReader", "Codec.decode", "codecs.StreamWriter", "codecs.IncrementalDecoder", "Codec.encode", "codecs.Codec", "self.errors"]}, "rot_13.py": {"libraries": ["sys", "codecs"], "function_names": ["rot13", "decode", "encode", "getregentry"], "function_calls": ["len", "Codec", "range", "rot13"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["str.translate", "rot13_map.update", "codecs.CodecInfo", "codecs.make_identity_dict", "codecs.IncrementalEncoder", "outfile.write", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "infile.read", "sys.stdin", "codecs.encode", "codecs.Codec", "sys.stdout"]}, "shift_jis.py": {"libraries": ["_multibytecodec", "_codecs_jp", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "_codecs_jp.getcodec", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "shift_jis_2004.py": {"libraries": ["_multibytecodec", "_codecs_jp", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "_codecs_jp.getcodec", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "shift_jisx0213.py": {"libraries": ["_multibytecodec", "_codecs_jp", "codecs"], "function_names": ["getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "mbc.MultibyteStreamWriter", "codecs.StreamReader", "_codecs_jp.getcodec", "mbc.MultibyteStreamReader", "mbc.MultibyteIncrementalDecoder", "codecs.StreamWriter", "codec.encode", "codecs.IncrementalDecoder", "codec.decode", "mbc.MultibyteIncrementalEncoder", "codecs.Codec"]}, "tis_620.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.charmap_encode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.charmap_decode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec", "self.errors", "codecs.charmap_build"]}, "undefined.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "UnicodeError"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.StreamWriter", "codecs.IncrementalDecoder", "codecs.Codec"]}, "unicode_escape.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": [], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.unicode_escape_decode", "codecs.IncrementalEncoder", "codecs.StreamReader", "Codec.decode", "codecs.StreamWriter", "codecs.IncrementalDecoder", "Codec.encode", "codecs.unicode_escape_encode", "codecs.Codec", "self.errors"]}, "utf_16.py": {"libraries": ["sys", "codecs"], "function_names": ["setstate", "__init__", "getstate", "_buffer_decode", "reset", "decode", "getregentry", "encode"], "function_calls": ["int", "UnicodeError"], "class_names": ["StreamReader", "IncrementalEncoder", "IncrementalDecoder", "StreamWriter"], "class_method_calls": ["codecs.utf_16_le_decode", "codecs.CodecInfo", "codecs.utf_16_be_decode", "codecs.IncrementalEncoder", "codecs.utf_16_decode", "codecs.StreamReader", "codecs.utf_16_ex_decode", "codecs.utf_16_le_encode", "self.decoder", "sys.byteorder", "codecs.utf_16_be_encode", "codecs.utf_16_encode", "codecs.StreamWriter", "self.encoder", "codecs.BufferedIncrementalDecoder", "self.decode", "self.errors"]}, "utf_16_be.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": [], "class_names": ["StreamReader", "IncrementalEncoder", "IncrementalDecoder", "StreamWriter"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.utf_16_be_encode", "codecs.StreamWriter", "codecs.BufferedIncrementalDecoder", "codecs.utf_16_be_decode", "self.errors"]}, "utf_16_le.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": [], "class_names": ["StreamReader", "IncrementalEncoder", "IncrementalDecoder", "StreamWriter"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.utf_16_le_encode", "codecs.StreamReader", "codecs.StreamWriter", "codecs.BufferedIncrementalDecoder", "codecs.utf_16_le_decode", "self.errors"]}, "utf_32.py": {"libraries": ["sys", "codecs"], "function_names": ["setstate", "__init__", "getstate", "_buffer_decode", "reset", "decode", "getregentry", "encode"], "function_calls": ["int", "UnicodeError"], "class_names": ["StreamReader", "IncrementalEncoder", "IncrementalDecoder", "StreamWriter"], "class_method_calls": ["codecs.utf_32_ex_decode", "codecs.CodecInfo", "codecs.utf_32_le_decode", "codecs.utf_32_le_encode", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.utf_32_decode", "self.decoder", "codecs.utf_32_be_decode", "sys.byteorder", "codecs.StreamWriter", "self.encoder", "codecs.utf_32_be_encode", "codecs.BufferedIncrementalDecoder", "codecs.utf_32_encode", "self.decode", "self.errors"]}, "utf_32_be.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": [], "class_names": ["StreamReader", "IncrementalEncoder", "IncrementalDecoder", "StreamWriter"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.utf_32_be_decode", "codecs.StreamWriter", "codecs.utf_32_be_encode", "codecs.BufferedIncrementalDecoder", "self.errors"]}, "utf_32_le.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": [], "class_names": ["StreamReader", "IncrementalEncoder", "IncrementalDecoder", "StreamWriter"], "class_method_calls": ["codecs.CodecInfo", "codecs.utf_32_le_encode", "codecs.IncrementalEncoder", "codecs.StreamReader", "self.errors", "codecs.StreamWriter", "codecs.BufferedIncrementalDecoder", "codecs.utf_32_le_decode"]}, "utf_7.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": [], "class_names": ["StreamReader", "IncrementalEncoder", "IncrementalDecoder", "StreamWriter"], "class_method_calls": ["codecs.utf_7_decode", "codecs.CodecInfo", "codecs.IncrementalEncoder", "codecs.StreamReader", "codecs.utf_7_encode", "codecs.StreamWriter", "codecs.BufferedIncrementalDecoder", "self.errors"]}, "utf_8.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": [], "class_names": ["StreamReader", "IncrementalEncoder", "IncrementalDecoder", "StreamWriter"], "class_method_calls": ["codecs.CodecInfo", "codecs.utf_8_decode", "codecs.IncrementalEncoder", "codecs.StreamReader", "self.errors", "codecs.StreamWriter", "codecs.BufferedIncrementalDecoder", "codecs.utf_8_encode"]}, "utf_8_sig.py": {"libraries": ["codecs"], "function_names": ["setstate", "__init__", "getstate", "_buffer_decode", "reset", "decode", "getregentry", "encode"], "function_calls": ["len", "encode"], "class_names": ["StreamReader", "IncrementalEncoder", "IncrementalDecoder", "StreamWriter"], "class_method_calls": ["codecs.CodecInfo", "codecs.utf_8_decode", "codecs.IncrementalEncoder", "self.decode", "codecs.StreamReader", "self.first", "self.errors", "self.encode", "codecs.StreamWriter", "codecs.BufferedIncrementalDecoder", "codecs.BOM_UTF8", "codecs.utf_8_encode"]}, "uu_codec.py": {"libraries": ["binascii", "io.BytesIO", "codecs"], "function_names": ["uu_decode", "decode", "getregentry", "uu_encode", "encode"], "function_calls": ["write", "BytesIO", "ValueError", "len", "uu_decode", "readline", "uu_encode", "read"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["codecs.CodecInfo", "codecs.IncrementalEncoder", "outfile.write", "codecs.StreamReader", "infile.readline", "binascii.Error", "self.errors", "codecs.StreamWriter", "filename.replace", "codecs.IncrementalDecoder", "infile.read", "binascii.b2a_uu", "codecs.Codec", "outfile.getvalue", "binascii.a2b_uu"]}, "zlib_codec.py": {"libraries": ["zlib", "codecs"], "function_names": ["__init__", "zlib_encode", "decode", "reset", "getregentry", "zlib_decode", "encode"], "function_calls": ["zlib_decode", "len", "zlib_encode"], "class_names": ["StreamWriter", "IncrementalEncoder", "StreamReader", "Codec", "IncrementalDecoder"], "class_method_calls": ["zlib.compressobj", "codecs.CodecInfo", "zlib.compress", "zlib.decompress", "codecs.IncrementalEncoder", "codecs.StreamReader", "zlib.decompressobj", "codecs.StreamWriter", "codecs.IncrementalDecoder", "self.compressobj", "self.decompressobj", "codecs.Codec", "self.errors"]}, "_uninstall.py": {"libraries": ["ensurepip", "sys", "argparse"], "function_names": ["_main"], "function_calls": ["_main"], "class_names": [], "class_method_calls": ["argparse.ArgumentParser", "sys.exit", "parser.add_argument", "ensurepip._uninstall_helper", "parser.parse_args", "ensurepip.version", "args.verbosity"]}, "enum.py": {"libraries": ["sys", "types.MappingProxyType", "types.DynamicClassAttribute", "warnings"], "function_names": ["unique", "_break_on_call_reduce", "__getattr__", "_is_sunder", "__reduce_ex__", "__reversed__", "_find_new_", "__dir__", "_create_", "_high_bit", "__repr__", "_convert_", "value", "__members__", "__setattr__", "_is_dunder", "_check_for_existing_members", "__call__", "_decompose", "__init__", "__prepare__", "_missing_", "__format__", "name", "_is_descriptor", "__str__", "__len__", "_get_mixins_", "_find_data_type", "__iter__", "__delattr__", "__bool__", "__and__", "__or__", "__setitem__", "_reduce_ex_by_name", "_convert", "_make_class_unpicklable", "__xor__", "__hash__", "__new__", "_generate_next_value_", "_power_of_two", "__invert__", "_create_pseudo_member_", "__getitem__", "__contains__"], "function_calls": ["object", "_power_of_two", "getattr", "cls", "reversed", "_high_bit", "vars", "isinstance", "AttributeError", "issubclass", "_is_dunder", "super", "str", "member_type", "_decompose", "hash", "setattr", "_is_descriptor", "ValueError", "list", "_find_data_type", "set", "type", "bool", "enumerate", "hasattr", "_make_class_unpicklable", "len", "any", "_EnumDict", "__new__", "filter", "_is_sunder", "TypeError", "MappingProxyType"], "class_names": ["Enum", "_EnumDict", "Flag", "IntEnum", "IntFlag", "EnumMeta", "auto"], "class_method_calls": ["member.name", "self.__dict__", "enum_class._value2member_map_", "self._ignore", "Enum.__new__", "self._last_values", "metacls._get_mixins_", "pseudo_member._name_", "source.items", "classdict.pop", "m.name", "classdict.setdefault", "enum_class.__module__", "enum_member.__init__", "value.bit_length", "cls.__reduce_ex__", "self._member_type_", "metacls.__prepare__", "need_to_create.append", "m._name_", "exc.__context__", "cls._value2member_map_", "classdict.get", "enum_member._name_", "cls._member_names_", "base._member_names_", "cls._member_map_", "Flag.__str__", "names.append", "members.sort", "members.pop", "warnings.warn", "cls.__module__", "self._auto_called", "cls._missing_", "cls.__dict__", "enum_class.mro", "self._member_map_", "metacls._find_new_", "members.append", "cls._create_pseudo_member_", "value.replace", "enum_class.__new__", "enum_class._member_map_", "sys._getframe", "enumeration.__members__", "enum_class.__new_member__", "data_types.append", "cls._convert_", "cls.__format__", "cls.__class__", "enum_member._value_", "first_enum._generate_next_value_", "base._member_type_", "enum_class._member_names_", "self._generate_next_value", "Enum.__str__", "first_enum._member_names_", "cls.__members__", "c.__dict__", "member._value_", "metacls.__new__", "enum_class._member_type_", "duplicates.append", "enum_class.__qualname__", "cls.__name__", "chain.__mro__", "base.__dict__", "value.value", "member._name_", "names.replace", "_order_.replace", "canonical_member._value_", "metacls._check_for_existing_members", "int.__new__", "sys.modules", "flag._value2member_map_", "self.name", "self._member_names_", "enum_member.__objclass__", "self._name_", "m._value_", "last_values.append", "cls._get_mixins_", "member_type.__dict__", "cls._create_", "classdict._member_names", "object.__new__", "self._value_", "self._member_names", "pseudo_member._value_", "self.__class__", "cls.__new__", "module_globals.update", "base.__name__", "other._value_"]}, "filecmp.py": {"libraries": ["itertools.filterfalse", "getopt", "sys", "os", "stat"], "function_names": ["__getattr__", "phase4", "phase0", "phase2", "_filter", "cmp", "__init__", "demo", "report", "clear_cache", "_cmp", "phase1", "cmpfiles", "phase3", "_sig", "phase4_closure", "report_full_closure", "_do_cmp", "report_partial_closure"], "function_calls": ["getattr", "abs", "filterfalse", "AttributeError", "_filter", "cmp", "demo", "dict", "open", "clear_cache", "list", "_cmp", "cmpfiles", "zip", "_sig", "dircmp", "len", "filter", "map", "_do_cmp", "print"], "class_names": ["dircmp"], "class_method_calls": ["self.common_dirs", "stat.S_ISDIR", "self.report", "self.phase4", "self.left_list", "self.methodmap", "stat.S_IFREG", "self.funny_files", "self.common_files", "stat.S_IFMT", "st.st_mode", "fp1.read", "stat.S_ISREG", "os.pardir", "dd.report_full_closure", "_cache.clear", "_cache.get", "self.left_only", "getopt.getopt", "sd.phase4_closure", "self.common", "st.st_size", "self.subdirs", "self.common_funny", "skip.__contains__", "self.right_only", "sd.report", "self.left", "os.curdir", "getopt.GetoptError", "fp2.read", "self.hide", "self.same_files", "b_stat.st_mode", "self.diff_files", "self.right_list", "a.__contains__", "self.ignore", "b.__getitem__", "os.path", "a.__getitem__", "self.right", "os.listdir", "a_stat.st_mode", "st.st_mtime", "os.stat", "sys.argv", "dd.report", "sd.report_full_closure", "b.__contains__"]}, "fileinput.py": {"libraries": ["getopt", "sys", "warnings", "os", "gzip", "bz2"], "function_names": ["_test", "__exit__", "input", "filelineno", "__enter__", "__init__", "isstdin", "close", "__del__", "hook_encoded", "__iter__", "nextfile", "openhook", "isfirstline", "__next__", "hook_compressed", "lineno", "_readline", "readline", "filename", "fileno", "__getitem__"], "function_calls": ["ValueError", "isinstance", "filelineno", "_test", "lineno", "getattr", "IndexError", "tuple", "FileInput", "input", "callable", "open", "print", "hasattr", "filename", "isfirstline", "RuntimeError"], "class_names": ["FileInput"], "class_method_calls": ["_state.fileno", "self._filename", "self._files", "os.rename", "_state._file", "self._savestdout", "gzip.open", "self._filelineno", "state.close", "sys.stdout", "self.__next__", "self.close", "self.lineno", "os.fspath", "self._inplace", "self._mode", "bz2.BZ2File", "mode.replace", "_state.lineno", "getopt.getopt", "warnings.warn", "output.close", "_state.nextfile", "os.O_BINARY", "self._output", "self._readline", "self._isstdin", "self._backup", "os.fstat", "os.open", "file.close", "sys.stdin", "self.nextfile", "os.unlink", "self._backupfilename", "_state.filelineno", "self._write_mode", "self._openhook", "self._file", "os.path", "os.fdopen", "os.O_CREAT", "os.O_WRONLY", "self._startlineno", "os.PathLike", "_state.filename", "os.chmod", "os.O_TRUNC", "sys.argv", "_state.isstdin", "_state.isfirstline"]}, "fnmatch.py": {"libraries": ["posixpath", "os", "functools", "re"], "function_names": ["translate", "fnmatch", "filter", "_compile_pattern", "fnmatchcase"], "function_calls": ["isinstance", "len", "str", "translate", "bytes", "match", "_compile_pattern", "fnmatchcase"], "class_names": [], "class_method_calls": ["chunks.append", "re.sub", "os.path", "result.append", "re.compile", "functools.lru_cache", "pat.find", "s.replace", "re.escape", "stuff.replace"]}, "formatter.py": {"libraries": ["sys", "warnings"], "function_names": ["format_letter", "test", "set_spacing", "add_line_break", "push_margin", "new_alignment", "new_font", "new_spacing", "pop_margin", "pop_font", "push_style", "send_hor_rule", "send_flowing_data", "push_alignment", "add_hor_rule", "send_literal_data", "__init__", "add_label_data", "add_flowing_data", "flush", "pop_style", "send_line_break", "push_font", "new_styles", "assert_line_data", "send_label_data", "send_paragraph", "end_paragraph", "pop_alignment", "add_literal_data", "format_roman", "reset", "flush_softspace", "new_margin", "format_counter"], "function_calls": ["write", "isinstance", "divmod", "len", "test", "chr", "AbstractFormatter", "NullWriter", "tuple", "open", "ord", "DumbWriter", "print"], "class_names": ["NullFormatter", "AbstractFormatter", "NullWriter", "DumbWriter", "AbstractWriter"], "class_method_calls": ["NullWriter.__init__", "self.parskip", "self.style_stack", "data.split", "self.margin_stack", "fp.close", "self.col", "self.maxcol", "self.have_label", "sys.stdout", "self.para_end", "self.writer", "warnings.warn", "f.add_flowing_data", "f.end_paragraph", "self.reset", "self.format_letter", "self.font_stack", "data.expandtabs", "self.softspace", "self.file", "sys.stdin", "self.align", "data.rfind", "self.format_roman", "sys.argv", "self.spacing", "self.nospace", "self.atbreak", "self.align_stack", "label.upper", "self.hard_break", "self.format_counter"]}, "fractions.py": {"libraries": ["re", "operator", "numbers", "decimal.Decimal", "sys", "warnings", "math"], "function_names": ["__le__", "denominator", "_add", "__deepcopy__", "from_decimal", "__pos__", "__repr__", "__eq__", "__reduce__", "_richcmp", "__pow__", "_div", "__ge__", "reverse", "__lt__", "__neg__", "_operator_fallbacks", "gcd", "_divmod", "__floor__", "_floordiv", "_gcd", "__str__", "from_float", "as_integer_ratio", "_mod", "__gt__", "__ceil__", "__bool__", "__rpow__", "__copy__", "numerator", "__trunc__", "__round__", "__abs__", "_sub", "__hash__", "forward", "__new__", "_mul", "limit_denominator"], "function_calls": ["cls", "abs", "monomorphic_operator", "Fraction", "isinstance", "super", "str", "complex", "_operator_fallbacks", "_gcd", "ValueError", "int", "type", "bool", "float", "fallback_operator", "divmod", "len", "op", "ZeroDivisionError", "pow", "Decimal", "TypeError", "round"], "class_names": ["Fraction"], "class_method_calls": ["operator.floordiv", "fallback_operator.__name__", "numbers.Complex", "_RATIONAL_FORMAT.match", "numbers.Rational", "denominator.denominator", "b.imag", "self._numerator", "b.denominator", "operator.add", "numerator.denominator", "b._denominator", "operator.truediv", "operator.sub", "operator.ge", "self._denominator", "re.IGNORECASE", "b.numerator", "monomorphic_operator.__doc__", "a._denominator", "operator.mul", "warnings.warn", "other.numerator", "b.real", "numerator.as_integer_ratio", "operator.lt", "numbers.Real", "a._numerator", "numerator.numerator", "forward.__doc__", "math.gcd", "cls.__name__", "self.from_float", "reverse.__name__", "math.isinf", "numbers.Integral", "self.numerator", "dec.as_integer_ratio", "forward.__name__", "reverse.__doc__", "re.VERBOSE", "a.denominator", "a.numerator", "operator.gt", "operator.mod", "sys.hash_info", "self.denominator", "f.as_integer_ratio", "re.compile", "self.__class__", "operator.le", "a.from_float", "denominator.numerator", "other.denominator", "a._richcmp", "m.group", "math.isnan", "b._numerator"]}, "ftplib.py": {"libraries": ["re", "netrc", "ssl", "sys", "warnings", "socket", "socket._GLOBAL_DEFAULT_TIMEOUT"], "function_names": ["pwd", "mlsd", "test", "getwelcome", "parse257", "__exit__", "putcmd", "rename", "getresp", "quit", "auth", "voidresp", "login", "parse229", "transfercmd", "__enter__", "parse150", "voidcmd", "retrbinary", "retrlines", "delete", "__init__", "size", "makepasv", "set_pasv", "parse227", "abort", "acct", "nlst", "sendport", "makeport", "storlines", "close", "ftpcp", "ntransfercmd", "prot_c", "mkd", "dir", "storbinary", "sendeprt", "rmd", "ccc", "sanitize", "putline", "cwd", "getmultiline", "sendcmd", "prot_p", "connect", "getline", "set_debuglevel", "print_line"], "function_calls": ["test", "parse257", "Error", "repr", "isinstance", "parse229", "parse150", "error_temp", "callback", "parse227", "ValueError", "error_perm", "int", "type", "error_reply", "len", "error_proto", "FTP", "print"], "class_names": ["FTP_TLS", "error_perm", "error_proto", "FTP", "Error", "error_temp", "error_reply"], "class_method_calls": ["self.getline", "resp.find", "sys.stdout", "self.close", "self.quit", "_150_re.match", "self.host", "target.voidresp", "conn.sendall", "re.ASCII", "file.close", "self.transfercmd", "FTP.login", "test.__doc__", "self.putline", "_227_re.search", "self.makepasv", "netrcobj.authenticators", "sys.stderr", "ssl.PROTOCOL_TLS_CLIENT", "self.context", "sys.argv", "ssl._create_stdlib_context", "source.voidcmd", "sys.audit", "self.keyfile", "self.sanitize", "ftp.passiveserver", "self.connect", "target.sendcmd", "source.sendcmd", "FTP.ntransfercmd", "self.timeout", "self.debugging", "self.makeport", "host.split", "self.lastresp", "re.IGNORECASE", "self.sendcmd", "self._prot_p", "warnings.warn", "s.rstrip", "socket.create_server", "m.groups", "fp.read", "self.source_address", "ftp.login", "self.sock", "self.trust_server_pasv_ipv4_address", "self.port", "self.certfile", "self.getresp", "sock.close", "key.lower", "self.ntransfercmd", "self.voidresp", "self.af", "conn.settimeout", "self.retrlines", "target.voidcmd", "self.sendeprt", "conn.unwrap", "msg.args", "ftp.sendcmd", "socket.create_connection", "FTP.__init__", "self.ssl_version", "socket.AF_INET6", "self.encoding", "conn.recv", "conn.makefile", "files.append", "sock.getsockname", "line.rstrip", "ftp.dir", "self.sendport", "re.compile", "ssl.SSLSocket", "ftp.retrbinary", "self.voidcmd", "fact.partition", "target.sendport", "self.passiveserver", "socket.AF_INET", "ftp.set_pasv", "self.welcome", "line.encode", "ftp.quit", "sys.exit", "resp.startswith", "self.auth", "ssl.PROTOCOL_TLS", "lines.append", "ftp.set_debuglevel", "self.login", "self.file", "ssl.SSLError", "conn.close", "sock.accept", "self.getmultiline", "netrc.netrc", "self.maxline", "self.putcmd", "sock.settimeout", "fp.readline", "__all__.append", "source.voidresp", "m.group"]}, "functools.py": {"libraries": ["abc.get_cache_token", "types", "_functools.cmp_to_key", "_functools.reduce", "warnings", "_functools._lru_cache_wrapper", "weakref", "typing.get_type_hints", "_functools.partial", "_thread.RLock", "reprlib.recursive_repr", "collections.namedtuple"], "function_names": ["_le_from_lt", "cmp_to_key", "_ge_from_le", "__le__", "wraps", "_lt_from_le", "_c3_merge", "dispatch", "_make_key", "__repr__", "__eq__", "_make_unbound_method", "wrapper", "__reduce__", "_ge_from_lt", "lru_cache", "__ge__", "_compose_mro", "_lru_cache_wrapper", "__set_name__", "total_ordering", "__call__", "_gt_from_ge", "__init__", "__get__", "_le_from_ge", "cache_info", "_ge_from_gt", "_gt_from_le", "__lt__", "update_wrapper", "_unwrap_partial", "_lt_from_gt", "register", "is_related", "_gt_from_lt", "__gt__", "singledispatch", "_method", "_lt_from_ge", "_le_from_gt", "decorating_function", "__setstate__", "__isabstractmethod__", "_find_impl", "is_strict_base", "__hash__", "cache_clear", "_c3_mro", "__new__", "reduce"], "function_calls": ["object", "cache_len", "recursive_repr", "getattr", "_c3_merge", "reversed", "dispatch", "make_key", "repr", "RuntimeError", "isinstance", "issubclass", "_HashedSeq", "_compose_mro", "function", "_lru_cache_wrapper", "user_function", "iter", "super", "cache_get", "get", "tuple", "hash", "dict", "update_wrapper", "setattr", "get_cache_token", "ValueError", "list", "is_related", "register", "partial", "singledispatch", "set", "namedtuple", "next", "type", "mycmp", "enumerate", "RLock", "get_type_hints", "hasattr", "len", "any", "max", "_find_impl", "is_strict_base", "_c3_mro", "callable", "TypeError", "map", "_CacheInfo"], "class_names": ["cached_property", "singledispatchmethod", "_HashedSeq", "partial", "K", "partialmethod"], "class_method_calls": ["registry.keys", "self.__dict__", "self.__le__", "self.register", "result.append", "cache.clear", "self.keywords", "func.func", "other.__mro__", "mro.append", "wrapper.register", "wrapper.dispatch", "dispatch_cache.clear", "func.keywords", "self.func", "types.MappingProxyType", "self.args", "self.attrname", "registry.get", "sub.__mro__", "wrapper.__wrapped__", "method.__get__", "warnings.warn", "found.sort", "args.extend", "format_string.format", "cls.__bases__", "wrapper.registry", "abstract_bases.append", "_method._partialmethod", "__init__.__text_signature__", "self.lock", "self._make_unbound_method", "instance.__dict__", "self.__isabstractmethod__", "cls.__mro__", "self.dispatcher", "self.obj", "result.__self__", "kwds.items", "new_func.__self__", "typ.__subclasses__", "wrapper.cache_clear", "cache.get", "self.hashvalue", "func.args", "opfunc.__name__", "keywords.pop", "self.__lt__", "weakref.WeakKeyDictionary", "found.append", "other.obj", "self.__ge__", "wrapper._clear_cache", "kwds.values", "self.__gt__", "self.__doc__", "_method.__isabstractmethod__", "wrapper.cache_info", "_method.register", "abcs.remove", "self.__class__", "func.__doc__", "cache.__len__"]}, "genericpath.py": {"libraries": ["os", "stat"], "function_names": ["isfile", "_splitext", "getsize", "getctime", "samefile", "commonprefix", "isdir", "_check_arg_types", "getmtime", "getatime", "samestat", "exists", "sameopenfile"], "function_calls": ["isinstance", "TypeError", "min", "max", "tuple", "samestat", "enumerate", "map"], "class_names": [], "class_method_calls": ["stat.S_ISDIR", "stat.S_ISREG", "st.st_mode", "os.fspath", "s1.st_dev", "os.fstat", "s2.st_ino", "s.__class__", "os.stat", "s1.st_ino", "s2.st_dev", "p.rfind"]}, "getopt.py": {"libraries": ["sys", "gettext.gettext", "os"], "function_names": ["long_has_args", "__str__", "getopt", "_", "do_shorts", "__init__", "gnu_getopt", "short_has_arg", "do_longs"], "function_calls": ["long_has_args", "isinstance", "GetoptError", "list", "len", "getopt", "_", "do_shorts", "type", "short_has_arg", "range", "do_longs", "print"], "class_names": ["GetoptError"], "class_method_calls": ["o.startswith", "prog_args.append", "shortopts.startswith", "Exception.__init__", "opt.index", "sys.argv", "os.environ", "self.opt", "unique_match.endswith", "self.msg", "opts.append"]}, "getpass.py": {"libraries": ["pwd", "io", "msvcrt", "contextlib", "sys", "warnings", "termios", "os"], "function_names": ["fallback_getpass", "unix_getpass", "win_getpass", "getuser", "_raw_input"], "function_calls": ["fallback_getpass", "str", "print", "_raw_input", "hasattr"], "class_names": ["GetPassWarning"], "class_method_calls": ["os.getuid", "stream.encoding", "termios.tcsetattr", "termios.ECHO", "stack.close", "msvcrt.getwch", "warnings.warn", "io.FileIO", "pwd.getpwuid", "termios.TCSAFLUSH", "prompt.decode", "stream.write", "msvcrt.putwch", "os.open", "stream.flush", "prompt.encode", "sys.stdin", "os.environ", "termios.error", "termios.tcgetattr", "io.TextIOWrapper", "sys.__stdin__", "input.readline", "contextlib.ExitStack", "os.O_RDWR", "sys.stderr", "os.O_NOCTTY", "stack.enter_context", "termios.TCSASOFT"]}, "gettext.py": {"libraries": ["re", "errno.ENOENT", "copy", "struct.unpack", "sys", "warnings", "locale", "os", "builtins"], "function_names": ["info", "_tokenize", "_error", "add_fallback", "_get_versions", "translation", "gettext", "_parse", "ngettext", "bindtextdomain", "output_charset", "install", "npgettext", "textdomain", "__init__", "c2py", "ldgettext", "_as_int", "_expand_lang", "lngettext", "pgettext", "ldngettext", "charset", "lgettext", "dgettext", "dpgettext", "dnpgettext", "dngettext", "find", "bind_textdomain_codeset", "set_output_charset"], "function_calls": ["object", "_tokenize", "_error", "getattr", "translation", "_parse", "str", "class_", "c2py", "ldgettext", "open", "range", "ValueError", "_expand_lang", "ldngettext", "set", "int", "next", "unpack", "enumerate", "OSError", "dgettext", "len", "dpgettext", "dnpgettext", "FileNotFoundError", "dngettext", "find", "NullTranslations", "TypeError", "round", "exec"], "class_names": ["GNUTranslations", "NullTranslations"], "class_method_calls": ["self._fallback", "copy.copy", "self.plural", "nelangs.append", "result.add_fallback", "t.set_output_charset", "result.append", "self._info", "self.VERSIONS", "self.LE_MAGIC", "t.lngettext", "msg.split", "item.startswith", "warnings.filterwarnings", "val.split", "item.split", "_localedirs.get", "mo.group", "loc.find", "k.strip", "warnings.warn", "mo.lastgroup", "warnings.catch_warnings", "b_item.decode", "t.pgettext", "ret.reverse", "message.encode", "self.gettext", "self._parse", "locale.getpreferredencoding", "v.strip", "tmsg.split", "v.split", "re.finditer", "t.install", "self.BE_MAGIC", "n.__class__", "item.endswith", "fp.read", "t.lgettext", "t.npgettext", "self._get_versions", "languages.append", "t.ngettext", "re.VERBOSE", "_c2py_ops.get", "sys.base_prefix", "os.environ", "self.CONTEXT", "_translations.setdefault", "tmsg.encode", "self._charset", "os.path", "self._catalog", "re.compile", "re.DOTALL", "self._output_charset", "_localecodesets.get", "_translations.get", "locale.normalize", "t.gettext", "ret.append", "builtins.__dict__"]}, "glob.py": {"libraries": ["sys", "fnmatch", "os", "re"], "function_names": ["_iterdir", "_rlistdir", "has_magic", "escape", "iglob", "_glob0", "_glob1", "_isrecursive", "_glob2", "_iglob", "glob0", "_ishidden", "glob1", "glob"], "function_calls": ["has_magic", "_iterdir", "list", "isinstance", "_rlistdir", "iglob", "_glob1", "_glob0", "_isrecursive", "_glob2", "_iglob", "glob_in_dir", "next", "_ishidden", "bytes"], "class_names": [], "class_method_calls": ["magic_check.search", "sys.audit", "entry.name", "os.path", "re.compile", "os.scandir", "os.curdir", "magic_check_bytes.sub", "magic_check.sub", "fnmatch.filter", "entry.is_dir", "magic_check_bytes.search"]}, "gzip.py": {"libraries": ["io", "argparse.ArgumentParser", "time", "struct", "sys", "_compression", "zlib", "warnings", "os", "errno", "builtins"], "function_names": ["_init_write", "writable", "readable", "read1", "compress", "__repr__", "_write_gzip_header", "prepend", "rewind", "_read_exact", "__init__", "open", "seek", "close", "flush", "decompress", "_read_eof", "closed", "seekable", "_read_gzip_header", "write32u", "_add_read_data", "read", "_rewind", "write", "peek", "_init_read", "readline", "main", "mtime", "filename", "fileno"], "function_calls": ["getattr", "memoryview", "id", "repr", "isinstance", "super", "_GzipReader", "open", "range", "ArgumentParser", "ValueError", "hex", "int", "BadGzipFile", "write32u", "OSError", "hasattr", "len", "GzipFile", "chr", "EOFError", "_PaddedFile", "main", "TypeError"], "class_names": ["GzipFile", "_GzipReader", "_PaddedFile", "BadGzipFile"], "class_method_calls": ["zlib.compressobj", "self._init_read", "zlib.decompressobj", "self._decomp_factory", "sys.stdout", "self._read_gzip_header", "self.compress", "_compression.BaseStream", "self.myfileobj", "output.write", "parser.add_argument", "self.write", "fname.encode", "zlib.MAX_WBITS", "self._size", "self.offset", "self._crc", "os.PathLike", "io.SEEK_SET", "self._stream_size", "zlib.Z_SYNC_FLUSH", "self.fileobj", "data.nbytes", "self._fp", "io.DEFAULT_BUFFER_SIZE", "self._write_mtime", "mode.replace", "zlib.crc32", "warnings.warn", "args.decompress", "builtins.open", "self.mode", "self.readall", "struct.unpack", "self._init_write", "self._read_exact", "fileobj.write", "io.BufferedReader", "fname.endswith", "os.path", "self.crc", "parser.parse_args", "_compression.DecompressReader", "group.add_argument", "self._check_not_closed", "self._read", "self._decomp_args", "g.close", "f.write", "self.size", "os.fspath", "self._add_read_data", "self.writebuf", "self._new_member", "zlib.DEFLATED", "args.args", "self.bufsize", "self._write_gzip_header", "sys.stdin", "io.TextIOWrapper", "time.time", "g.write", "f.close", "self._length", "myfileobj.close", "self._pos", "io.BytesIO", "args.fast", "self.name", "parser.add_mutually_exclusive_group", "self._read_eof", "args.best", "sys.exit", "f.read", "buf.getvalue", "struct.pack", "self.file", "errno.EBADF", "self._decompressor", "mode.startswith", "io.SEEK_CUR", "self._last_mtime", "zlib.DEF_MEM_LEVEL", "self._buffer"]}, "hashlib.py": {"libraries": ["_blake2", "_sha512", "_sha1", "_md5", "_sha256", "_sha3", "_hashlib", "_hashlib.scrypt", "_hashlib.pbkdf2_hmac", "logging"], "function_names": ["__get_builtin_constructor", "prf", "pbkdf2_hmac", "__get_openssl_constructor", "__py_new", "__hash_new"], "function_calls": ["ValueError", "isinstance", "len", "from_bytes", "__get_builtin_constructor", "getattr", "set", "prf", "memoryview", "__get_hash", "bytes", "new", "TypeError", "f", "range", "globals"], "class_names": [], "class_method_calls": ["_sha3.shake_256", "_hashlib.openssl_md_meth_names", "int.from_bytes", "_md5.md5", "outer.copy", "_blake2.blake2b", "_sha3.sha3_512", "_sha512.sha384", "inner.digest_size", "algorithms_available.union", "inner.update", "_hashlib.new", "_sha3.sha3_256", "_sha3.shake_128", "loop.to_bytes", "_sha3.sha3_384", "outer.update", "icpy.digest", "_sha512.sha512", "ocpy.update", "cache.get", "_blake2.blake2s", "password.translate", "inner.copy", "ocpy.digest", "_sha256.sha256", "_sha3.sha3_224", "rkey.to_bytes", "_sha1.sha1", "logging.exception", "icpy.update", "_sha256.sha224", "outer.digest_size"]}, "heapq.py": {"libraries": ["doctest", "_heapq._heapreplace_max", "_heapq.*", "_heapq._heapify_max", "_heapq._heappop_max"], "function_names": ["nlargest", "_siftup_max", "nsmallest", "merge", "heappush", "_siftdown", "heappushpop", "_heapify_max", "_heapreplace_max", "heappop", "heapify", "_siftup", "heapreplace", "_heappop_max", "_siftdown_max"], "function_calls": ["object", "min", "sorted", "reversed", "heapify", "_siftup", "_heapreplace", "iter", "_siftdown_max", "range", "_heapify", "_heappop", "_siftup_max", "_heapify_max", "next", "h_append", "zip", "key", "enumerate", "len", "max", "_siftdown", "map", "print"], "class_names": [], "class_method_calls": ["doctest.testmod", "h.append", "result.sort", "heap.append", "heap.pop", "it.__next__", "next.__self__"]}, "hmac.py": {"libraries": ["warnings", "_operator._compare_digest", "_hashlib", "hashlib"], "function_names": ["digest", "copy", "hexdigest", "update", "__init__", "new", "name", "_current"], "function_calls": ["HMAC", "isinstance", "len", "frozenset", "getattr", "digest_cons", "callable", "bytes", "type", "TypeError", "range", "hasattr"], "class_names": ["HMAC"], "class_method_calls": ["inner.digest", "key.ljust", "self.digest_size", "inner.update", "_hashlib.new", "other.digest_cons", "h.digest", "self.update", "other.digest_size", "self.digest_cons", "_hashopenssl.hmac_digest", "key.translate", "digest.new", "outer.update", "outer.digest", "_warnings.warn", "other.outer", "self.block_size", "self.inner", "self._current", "h.hexdigest", "other.inner", "self.blocksize", "self.outer", "self.__class__", "h.update", "_hashopenssl.openssl_md_meth_names", "digestmod.new"]}, "entities.py": {"libraries": [], "function_names": [], "function_calls": ["chr"], "class_names": [], "class_method_calls": ["name2codepoint.items"]}, "client.py": {"libraries": ["urllib.parse", "time", "xml.parsers.expat", "datetime.datetime", "http.client", "sys", "decimal.Decimal", "io.BytesIO", "base64", "gzip", "errno"], "function_names": ["end_string", "__getattr__", "parse_response", "__le__", "end_fault", "__close", "end_boolean", "end_bigdecimal", "end_value", "timetuple", "__exit__", "dumps", "_iso8601_format", "end_struct", "end", "decode", "gzip_encode", "__repr__", "__eq__", "__ge__", "end_base64", "make_comparable", "escape", "end_params", "feed", "data", "_binary", "end_nil", "dump_datetime", "end_int", "__enter__", "single_request", "__lt__", "__init__", "__call__", "end_dispatch", "dump_unicode", "_datetime_type", "loads", "end_dateTime", "_datetime", "dump_bool", "get_host_info", "end_double", "make_connection", "__str__", "close", "dump_double", "send_content", "__gt__", "dump_instance", "request", "end_array", "dump_bytes", "start", "__dump", "xml", "end_methodName", "dump_struct", "encode", "send_headers", "dump_nil", "gzip_decode", "getmethodname", "getparser", "dump_long", "dump_array", "__request", "_strftime", "send_request", "__getitem__"], "function_calls": ["Unmarshaller", "handler", "ExpatParser", "_iso8601_format", "_MultiCallMethod", "_Method", "dumps", "gzip_encode", "id", "repr", "isinstance", "AttributeError", "escape", "super", "datetime", "FastMarshaller", "str", "FastParser", "tuple", "Fault", "dict", "_datetime_type", "FastUnmarshaller", "DateTime", "range", "ValueError", "MultiCallIterator", "list", "multi", "dump", "MultiCall", "ServerProxy", "int", "type", "OverflowError", "Binary", "float", "OSError", "f", "hasattr", "write", "BytesIO", "ResponseError", "len", "NotImplementedError", "getparser", "Marshaller", "bytes", "Decimal", "GzipDecodedResponse", "ProtocolError", "TypeError", "_strftime", "print"], "class_names": ["Unmarshaller", "MultiCallIterator", "Binary", "MultiCall", "Error", "ExpatParser", "Fault", "Marshaller", "_MultiCallMethod", "_Method", "GzipDecodedResponse", "ServerProxy", "ProtocolError", "SafeTransport", "DateTime", "Transport", "ResponseError"], "class_method_calls": ["u.getmethodname", "self._connection", "resp.getheader", "marshalled_list.append", "s.replace", "http_conn.getresponse", "self.memo", "multi.getData", "e.errno", "self.end_string", "self.single_request", "data.encode", "self.close", "self._use_datetime", "self.getparser", "self._methodname", "self.errmsg", "self.write", "out.write", "time.localtime", "self.headers", "connection.endheaders", "other.data", "gzf.write", "expat.ParserCreate", "self.encode_threshold", "self.__send", "self.context", "Error.__init__", "self.allow_none", "p.feed", "u.close", "f.getvalue", "self._encoding", "self._extra_headers", "resp.getheaders", "self.__name", "self._use_bytes", "base64.encodebytes", "urllib.parse", "p.close", "parser.StartElementHandler", "server.currentTime", "gzf.read", "self.make_comparable", "out.append", "self.dump_struct", "self._marks", "self.__allow_none", "self.__request", "datetime.strptime", "target.end", "m.dumps", "response.getheader", "value.items", "self.__encoding", "self.__call_list", "self._headers", "self.__dump", "self.send_headers", "sys.version_info", "connection.close", "base64.decodebytes", "self.__close", "target.start", "self._type", "self.get_host_info", "self.value", "self.faultCode", "_day0.strftime", "parser.CharacterDataHandler", "self.append", "self.timetuple", "value.encode", "value.decode", "multi.add", "http.client", "values.faultString", "gzip.GzipFile", "self._use_builtin_types", "errno.EPIPE", "self._stack", "self.send_request", "errno.ECONNABORTED", "data.__class__", "self.errcode", "self.url", "self.__handler", "self.encoding", "resp.read", "parser.EndElementHandler", "self.make_connection", "parser.Parse", "self.faultString", "value.strftime", "self._target", "time.time", "self.parse_response", "value.__class__", "self.verbose", "errno.ECONNRESET", "other.timetuple", "self.__verbose", "other.__class__", "self.dispatch", "target.xml", "self.__transport", "time.struct_time", "stream.close", "tag.split", "multi.pow", "encoded.decode", "time.strptime", "self.io", "object.__str__", "target.data", "resp.reason", "headers.append", "auth.split", "stream.read", "other.value", "resp.status", "value.__dict__", "data.decode", "self.data", "self.__server", "self.__host", "self.accept_gzip_encoding", "self._value", "self.user_agent", "values.faultCode", "self.results", "connection.putheader", "value.data", "self._data", "self.send_content", "self._parser", "self.__class__", "response.read", "connection.putrequest", "connection.set_debuglevel"]}, "cookiejar.py": {"libraries": ["urllib.parse", "urllib.request", "re", "io", "threading", "time", "copy", "datetime", "http.client", "warnings", "calendar.timegm", "os", "logging", "traceback"], "function_names": ["set_blocked_domains", "vals_sorted_by_key", "set_ok_verifiability", "is_not_allowed", "user_domain_match", "revert", "_really_load", "__init__", "set_ok_name", "request_host", "_cookies_from_attrs_set", "is_blocked", "__str__", "domain_match", "return_ok_port", "_cookies_for_request", "load", "__iter__", "domain_return_ok", "set_ok_domain", "set_policy", "time2netscape", "set_ok", "_warn_unhandled_exception", "unmatched", "_debug", "set_nonstandard_attr", "return_ok", "return_ok_secure", "path_return_ok", "as_lwp_str", "_process_rfc2109_cookies", "set_cookie", "clear_session_cookies", "_timegm", "_str2time", "set_ok_port", "request_port", "blocked_domains", "strip_quotes", "request_path", "return_ok_version", "liberal_is_HDN", "is_HDN", "_cookies_for_domain", "has_nonstandard_attr", "allowed_domains", "return_ok_domain", "__repr__", "lwp_cookie_str", "clear", "eff_request_host", "is_expired", "split_header_words", "_cookie_from_cookie_tuple", "http2time", "no_matching_rfc2965", "uppercase_escaped_char", "join_header_words", "set_ok_path", "set_allowed_domains", "_cookie_attrs", "_normalized_cookie_tuples", "escape_path", "time2isoz", "parse_ns_headers", "offset_from_tz_string", "add_cookie_header", "return_ok_expires", "is_third_party", "return_ok_verifiability", "clear_expired_cookies", "set_cookie_if_ok", "get_nonstandard_attr", "deepvalues", "reach", "set_ok_version", "save", "iso2time", "__len__", "extract_cookies", "make_cookies"], "function_calls": ["fn", "sorted", "getattr", "vals_sorted_by_key", "abs", "_timegm", "_str2time", "timegm", "lwp_cookie_str", "request_port", "repr", "user_domain_match", "isinstance", "eff_request_host", "deepvalues", "reach", "str", "Cookie", "tuple", "request_host", "split_header_words", "open", "LoadError", "http2time", "ValueError", "iso2time", "strip_quotes", "request_path", "domain_match", "join_header_words", "h", "int", "enumerate", "bool", "float", "_warn_unhandled_exception", "unmatched", "len", "_debug", "DefaultCookiePolicy", "escape_path", "NotImplementedError", "time2isoz", "parse_ns_headers", "liberal_is_HDN", "offset_from_tz_string", "is_HDN", "filter", "map", "is_third_party"], "class_names": ["FileCookieJar", "LWPCookieJar", "DefaultCookiePolicy", "MozillaCookieJar", "Cookie", "CookieJar", "Absent", "LoadError", "CookiePolicy"], "class_method_calls": ["HEADER_ESCAPE_RE.sub", "line.strip", "req_path.startswith", "self.domain", "request.unverifiable", "request.type", "self.port_specified", "self._cookies_for_domain", "text.lstrip", "cookie.comment_url", "cookie.comment", "A.rfind", "key.strip", "path.startswith", "datetime.MAXYEAR", "self.strict_ns_set_path", "WEEKDAY_RE.sub", "self._blocked_domains", "request.has_header", "r.append", "headers.get_all", "self.strict_ns_domain", "mon.lower", "time.localtime", "self.clear", "cookies_by_name.values", "re.ASCII", "self.strict_domain", "cookie.expires", "dt.month", "adict.keys", "_threading.RLock", "self.discard", "request.origin_req_host", "text.endswith", "self.make_cookies", "self.strict_rfc2965_unverifiable", "self.set_cookie", "self.clear_expired_cookies", "self.DomainRFC2965Match", "B.lower", "request.host", "cookies.sort", "self.version", "f.getvalue", "MONTHS_LOWER.append", "request.get_full_url", "self.rfc2109", "cookie.domain", "datetime.datetime", "self.comment", "result.append", "traceback.print_exc", "param.strip", "self.DomainStrictNoDots", "domain.count", "self.secure", "cookie._rest", "self._cookie_attrs", "erhn.endswith", "h.find", "re.search", "erhn.startswith", "urllib.parse", "self._rest", "self.magic_re", "cookie.is_expired", "cookie.value", "ns_cookie.domain", "self.delayload", "warnings.warn", "io.StringIO", "self.secure_protocols", "dt.year", "cookie.port", "IPV4_RE.search", "HEADER_QUOTED_VALUE_RE.search", "request.get_header", "dt.weekday", "cookie.path", "copy.deepcopy", "m.groups", "self._process_rfc2109_cookies", "self.header", "adict.get", "val.strip", "dt.hour", "self.is_blocked", "self.non_word_re", "cookie.discard", "HEADER_JOIN_ESCAPE_RE.sub", "match.string", "response.info", "self.filename", "parts.path", "self.port", "self.hide_cookie2", "line.startswith", "key.lower", "logger.debug", "self.path_specified", "copy.copy", "self._policy", "self.strict_ns_unverifiable", "self._allowed_domains", "req_host.find", "c.discard", "self.value", "cookie_tuples.append", "self.path_return_ok", "tz.upper", "re.X", "self.expires", "self.is_not_allowed", "host.find", "self._now", "text.startswith", "attr.append", "f.write", "h.append", "month.lower", "os.fspath", "cookie.domain_initial_dot", "self.netscape", "http.client", "f.readline", "self.quote_re", "host_prefix.find", "ESCAPED_CHAR_RE.sub", "re.subn", "self._cookie_from_cookie_tuple", "ns_cookie.name", "domain.lower", "cookies.extend", "req_host.endswith", "re.I", "re.sub", "pairs.append", "self.comment_url", "HEADER_VALUE_RE.search", "self._cookies_for_request", "value.rstrip", "self.path", "A.endswith", "k.lower", "LOOSE_HTTP_DATE_RE.search", "time.time", "line.endswith", "undotted_domain.find", "self.domain_specified", "re.compile", "self.DomainStrictNonDomain", "param.partition", "attrs.append", "STRICT_DATE_RE.search", "c.is_expired", "dt.minute", "self.rfc2109_as_netscape", "match.group", "domain.rfind", "HEADER_TOKEN_RE.search", "self._cookies_lock", "MONTHS_LOWER.index", "dt.second", "v.lower", "ISO_DATE_RE.search", "cookie.path_specified", "cookie.name", "cookie.rfc2109", "request.add_unredirected_header", "self._really_load", "ns_cookie.path", "cookies.append", "match.span", "TIMEZONE_RE.search", "self.domain_initial_dot", "headers.append", "self.name", "cookie.version", "path.endswith", "logging.getLogger", "host.lower", "cookies_by_path.keys", "A.lower", "ns_header.split", "b.find", "cookie.secure", "sld.lower", "CookieJar.__init__", "cookie.domain_specified", "dt.day", "self.strict_ns_set_initial_dollar", "a.path", "cookie.port_specified", "cut_port_re.sub", "standard.get", "line.split", "self._cookies_from_attrs_set", "self.as_lwp_str", "domain.startswith", "path.rfind", "self.load", "self.rfc2965", "self._normalized_cookie_tuples", "self.__class__", "args.append", "req_host.startswith", "B.startswith", "obj.items", "m.group", "self._cookies"]}, "cookies.py": {"libraries": ["time.time", "re", "time.gmtime", "string"], "function_names": ["output", "value_decode", "__eq__", "__repr__", "value", "coded_value", "OutputString", "copy", "update", "__getstate__", "__init__", "__set", "_quote", "_unquote", "load", "set", "__parse_string", "_getdate", "isReservedKey", "key", "value_encode", "__setitem__", "__setstate__", "js_output", "setdefault"], "function_calls": ["_spacejoin", "_nulljoin", "sorted", "append", "_is_legal_key", "ord", "repr", "isinstance", "_semispacejoin", "str", "dict", "CookieError", "gmtime", "range", "time", "_quote", "_unquote", "set", "int", "_getdate", "len", "chr", "Morsel", "map"], "class_names": ["CookieError", "Morsel", "BaseCookie", "SimpleCookie"], "class_method_calls": ["Morsel._reserved", "string.digits", "object.__ne__", "result.append", "self.__dict__", "sep.join", "l.append", "M.set", "morsel.__dict__", "self.__set", "_OctalPatt.search", "re.escape", "self.coded_value", "str.translate", "o_match.start", "self._coded_value", "self.items", "value.output", "self._key", "value.js_output", "morsel._key", "morsel._value", "self.__parse_string", "rawdata.items", "dict.setdefault", "self._value", "self._reserved", "self.value_encode", "re.ASCII", "dict.update", "match.end", "dict.__setitem__", "self.OutputString", "res.append", "dict.__eq__", "Morsel._flags", "re.VERBOSE", "string.ascii_letters", "value.value", "_QuotePatt.search", "morsel._coded_value", "patt.match", "K.lower", "re.compile", "self.load", "parsed_items.append", "self._flags", "q_match.start", "self.value_decode", "self.__class__", "self.key", "key.lower", "match.group", "self.get", "_Translator.update"]}, "server.py": {"libraries": ["re", "socketserver", "http.server", "xmlrpc.client.gzip_encode", "http.server.BaseHTTPRequestHandler", "datetime", "functools.partial", "xmlrpc.client.loads", "xmlrpc.client.dumps", "sys", "inspect.signature", "xmlrpc.client.gzip_decode", "fcntl", "html", "pydoc", "os", "xmlrpc.client.Fault", "traceback"], "function_names": ["docserver", "system_multicall", "set_server_name", "_marshaled_dispatch", "handle_get", "register_instance", "is_rpc_path_valid", "system_listMethods", "accept_encodings", "handle_xmlrpc", "__init__", "_dispatch", "getCurrentTime", "log_request", "handle_request", "get_dispatcher", "generate_html_documentation", "markup", "do_POST", "system_methodHelp", "system_methodSignature", "set_server_documentation", "getData", "decode_request_content", "resolve_dotted_attribute", "register_introspection_functions", "add_dispatcher", "docroutine", "register_multicall_functions", "report_404", "do_GET", "register_function", "set_server_title", "list_public_methods"], "function_calls": ["min", "sorted", "getattr", "dumps", "gzip_encode", "isinstance", "AttributeError", "escape", "str", "ServerHTMLDoc", "signature", "dispatch_method", "tuple", "Fault", "Exception", "loads", "SimpleXMLRPCServer", "partial", "resolve_dotted_attribute", "set", "dir", "int", "func", "float", "hasattr", "len", "ExampleService", "gzip_decode", "callable", "list_public_methods", "print"], "class_names": ["SimpleXMLRPCRequestHandler", "DocXMLRPCRequestHandler", "ExampleService", "XMLRPCDocGenerator", "ServerHTMLDoc", "currentTime", "DocCGIXMLRPCRequestHandler", "MultiPathXMLRPCServer", "CGIXMLRPCRequestHandler", "SimpleXMLRPCDispatcher", "SimpleXMLRPCServer", "DocXMLRPCServer"], "class_method_calls": ["function.__name__", "match.groups", "sys.stdout", "self.system_methodSignature", "self._marshaled_dispatch", "L.append", "XMLRPCDocGenerator.__init__", "BaseHTTPRequestHandler.log_request", "self.headers", "fault.faultCode", "self.encode_threshold", "socketserver.TCPServer", "self.server", "self.allow_none", "i.startswith", "self.dispatchers", "datetime.datetime", "self.is_rpc_path_valid", "self._dispatch", "re.IGNORECASE", "self.end_headers", "self.server_title", "SimpleXMLRPCDispatcher.__init__", "member.startswith", "trace.encode", "self.bigsection", "server.register_function", "self.decode_request_content", "self.funcs", "self.handle_get", "self.server_documentation", "self.server_name", "self.system_methodHelp", "self.allow_dotted_names", "self.heading", "html.escape", "self.escape", "traceback.format_exc", "self.logRequests", "pydoc.getdoc", "self.markup", "self.handle_xmlrpc", "attr.split", "methods.items", "response.encode", "self.grey", "self.namelink", "self.instance", "self.rpc_paths", "http.server", "self.docroutine", "self.accept_encodings", "self.wfile", "server.register_multicall_functions", "BaseHTTPRequestHandler.responses", "SimpleXMLRPCServer.__init__", "self.send_header", "self.encoding", "self.system_multicall", "self.path", "sys.stdin", "os.environ", "re.compile", "self.preformat", "pydoc.HTMLDoc", "pattern.search", "CGIXMLRPCRequestHandler.__init__", "match.group", "cl.__name__", "contents.append", "server.register_instance", "results.append", "self.use_builtin_types", "ae.split", "documenter.page", "match.span", "self.rfile", "sys.exit", "server.serve_forever", "self.register_function", "fault.faultString", "self.report_404", "sys.exc_info", "self.system_listMethods", "self.aepattern", "re.VERBOSE", "documenter.docserver", "self.send_response", "self.generate_html_documentation"]}, "autocomplete.py": {"libraries": ["keyword", "idlelib.autocomplete_w", "idlelib.config.idleConf", "string", "__main__", "sys", "idlelib.hyperparser.HyperParser", "os", "unittest.main"], "function_names": ["_delayed_open_completions", "_remove_autocomplete_window", "try_open_completions_event", "get_entity", "force_open_completions_event", "_make_autocomplete_window", "__init__", "open_completions", "fetch_completions", "reload", "autocomplete_event"], "function_calls": ["len", "sorted", "dir", "main", "HyperParser", "ord", "eval", "hasattr"], "class_names": ["AutoComplete"], "class_method_calls": ["string.digits", "self._remove_autocomplete_window", "keyword.kwlist", "os.altsep", "self._make_autocomplete_window", "sys.modules", "hp.get_expression", "entity.__all__", "self._delayed_completion_index", "bigl.extend", "autocomplete_w.AutoCompleteWindow", "bigl.sort", "self.popupwait", "cls.popupwait", "rpcclt.remotecall", "hp.set_index", "os.sep", "self.editwin", "idleConf.GetOption", "self.fetch_completions", "__main__.__builtins__", "self.text", "event.mc_state", "hp.is_in_string", "hp.is_in_code", "string.ascii_letters", "self._delayed_completion_id", "editwin.text", "os.path", "self.get_entity", "self.open_completions", "os.listdir", "comp_what.find", "__main__.__dict__", "AutoComplete.reload", "self._delayed_open_completions", "self.autocompletewindow"]}, "autocomplete_w.py": {"libraries": ["tkinter.ttk.Scrollbar", "idlelib.autocomplete.FILES", "platform", "idlelib.multicall.MC_SHIFT", "idlelib.autocomplete.ATTRS", "unittest.main", "tkinter.*"], "function_names": ["_selection_changed", "_hide_event_check", "doubleclick_event", "_complete_string", "is_active", "winconfig_event", "keyrelease_event", "complete", "hide_event", "__init__", "hide_window", "_binary_search", "listselect_event", "show_window", "keypress_event", "_change_start"], "function_calls": ["len", "min", "Listbox", "any", "max", "Toplevel", "int", "Scrollbar", "main", "hasattr"], "class_names": ["AutoCompleteWindow"], "class_method_calls": ["self._hide_event_check", "event.keysym", "self.listselect_event", "acw.update_idletasks", "self._binary_search", "acw._w", "EventType.FocusOut", "self.winconfigid", "self.completions", "self.hidewid", "self.complete", "self.widget", "event.type", "acw.event_add", "scrollbar.set", "text.winfo_height", "self.lastkey_was_tab", "self.hideaid", "text.winfo_rootx", "acw.unbind", "listbox.pack", "self._change_start", "listbox.cget", "text.bbox", "self.morecompletions", "acw.wm_overrideredirect", "acw.winfo_height", "event.char", "platform.system", "EventType.ButtonPress", "self.userwantswindow", "self.scrollbar", "self.hide_window", "self.mode", "self.keyrelease_event", "listbox.yview", "self.listbox", "acw.tk", "acw.update", "acw.wm_geometry", "self.keyreleaseid", "self.doubleclick_event", "self.is_active", "self.keypressid", "self.lasttypedstart", "text.see", "text.winfo_rooty", "event.mc_state", "self.winconfig_event", "self.start", "self.origselbackground", "listbox.insert", "acw.bind", "acw.lift", "scrollbar.config", "self.listupdateid", "self._selection_changed", "listbox.bind", "scrollbar.pack", "self.doubleclickid", "self.hide_event", "text.winfo_width", "self.origselforeground", "self.is_configuring", "self._complete_string", "acw.winfo_width", "self.hideid", "self.keypress_event", "self.startindex", "self.autocompletewindow"]}, "autoexpand.py": {"libraries": ["re", "unittest.main", "string"], "function_names": ["expand_word_event", "__init__", "getwords", "getprevword"], "function_calls": ["len", "main"], "class_names": ["AutoExpand"], "class_method_calls": ["re.findall", "self.state", "editwin.text", "words.append", "self.bell", "string.digits", "self.getwords", "self.getprevword", "wbefore.reverse", "self.text", "self.wordchars", "dict.get", "string.ascii_letters"]}, "browser.py": {"libraries": ["idlelib.window.ListedToplevel", "idlelib.config.idleConf", "unittest.main", "idlelib.tree.TreeItem", "sys", "idlelib.idle_test.htest.run", "idlelib.tree.ScrolledCanvas", "idlelib.tree.TreeNode", "os", "pyclbr", "idlelib.pyshell"], "function_names": ["GetSubList", "close", "GetIconName", "GetText", "_module_browser", "nested_in_class", "listchildren", "rootnode", "closure", "transform_children", "__init__", "settitle", "OnDoubleClick", "IsExpandable", "init"], "function_calls": ["ModuleBrowser", "isinstance", "TreeNode", "len", "run", "ChildBrowserTreeItem", "transform_children", "ListedToplevel", "file_open", "main", "hasattr", "type", "ScrolledCanvas", "ModuleBrowserTreeItem"], "class_names": ["ModuleBrowser", "Nested_in_closure", "ChildBrowserTreeItem", "Nested_in_func", "ModuleBrowserTreeItem"], "class_method_calls": ["idleConf.CurrentTheme", "pyclbr._modules", "pyshell.PyShellFileList", "self.node", "self.rootnode", "obj.module", "self.close", "top.protocol", "self.name", "pyshell.flist", "top.focus_set", "sc.canvas", "root.winfo_rootx", "child_dict.items", "root.winfo_rooty", "self._utest", "obj.name", "idleConf.GetHighlight", "node.update", "pyclbr.Function", "self.settitle", "self._htest", "self.obj", "flist.open", "obs.append", "top.geometry", "sc.frame", "self.listchildren", "self.isfunction", "self.top", "self.file", "node.expand", "edit.gotoline", "sup.name", "self.path", "obj.super", "self.master", "sys.path", "os.path", "supers.append", "pyclbr.readmodule_ex", "self.init", "top.bind", "sys.argv", "sup.module"]}, "calltip.py": {"libraries": ["idlelib.calltip_w", "re", "types", "textwrap", "inspect", "__main__", "sys", "idlelib.hyperparser.HyperParser", "unittest.main"], "function_names": ["force_open_calltip_event", "close", "get_argspec", "try_open_calltip_event", "refresh_calltip_event", "__init__", "_make_tk_calltip_window", "fetch_tip", "remove_calltip_window", "open_calltip", "get_entity"], "function_calls": ["isinstance", "len", "get_argspec", "str", "main", "HyperParser", "map", "eval", "get_entity"], "class_names": ["Calltip"], "class_method_calls": ["self.open_calltip", "calltip_w.CalltipWindow", "line.strip", "self._calltip_window", "self.active_calltip", "sys.modules", "hp.get_expression", "ob.__call__", "self.remove_calltip_window", "types.MethodType", "self._make_tk_calltip_window", "msg.startswith", "hp.get_surrounding_brackets", "hp.set_index", "rpcclt.remotecall", "lines.append", "self.editwin", "expression.find", "self.text", "textwrap.wrap", "self.fetch_tip", "inspect.getdoc", "editwin.text", "re.compile", "doc.split", "inspect.signature", "__main__.__dict__"]}, "calltip_w.py": {"libraries": ["tkinter.LEFT", "tkinter.Label", "tkinter.Text", "tkinter.TclError", "tkinter.SOLID", "tkinter.BOTH", "idlelib.idle_test.htest.run", "idlelib.tooltip.TooltipBase", "unittest.main", "tkinter.Toplevel"], "function_names": ["calltip_hide", "showtip", "_unbind_events", "_bind_events", "hidetip", "position_window", "showcontents", "hide_event", "_calltip_window", "get_position", "__init__", "checkhide_event", "calltip_show"], "function_calls": ["Label", "list", "super", "run", "Toplevel", "int", "main", "Text", "map", "CalltipWindow"], "class_names": ["CalltipWindow"], "class_method_calls": ["calltip.hidetip", "self.position_window", "text.insert", "self.anchor_widget", "parent.geometry", "self.checkhide_after_id", "self.parencol", "self.label", "self.parenline", "self._unbind_events", "top.geometry", "self.checkhideid", "self.text", "calltip.showtip", "self.checkhide_event", "self.tipwindow", "top.title", "text.bind", "text.focus_set", "self.hide_event", "top.update", "self.hidetip", "text.pack", "text.event_add", "self.lastline", "self.hideid", "self._bind_events"]}, "codecontext.py": {"libraries": ["re", "sys.maxsize", "tkinter.constants.NSEW", "idlelib.config.idleConf", "tkinter.Text", "tkinter.constants.SUNKEN", "tkinter.TclError", "tkinter.Frame", "unittest.main"], "function_names": ["get_line_info", "update_font", "timer_event", "__del__", "jumptoline", "get_spaces_firstword", "toggle_code_context_event", "update_code_context", "__init__", "update_highlight_colors", "_reset", "get_context", "reload"], "function_calls": ["get_line_info", "len", "max", "get_spaces_firstword", "Frame", "int", "main", "Text", "float", "range"], "class_names": ["CodeContext"], "class_method_calls": ["self.get_context", "idleConf.CurrentTheme", "widget.grid_info", "cls.context_depth", "widget.pack_info", "c.match", "self.info", "self.topvisible", "self.update_highlight_colors", "self.UPDATEINTERVAL", "self.jumptoline", "context.grid", "self._reset", "idleConf.GetHighlight", "lines.reverse", "self.t1", "lines.append", "self.editwin", "idleConf.GetOption", "self.timer_event", "widget.tk", "self.text", "self.context_depth", "self.update_code_context", "idleConf.GetFont", "editwin.text", "widget.cget", "re.compile", "self.update_font", "CodeContext.reload", "self.context", "self.cell00", "context.bind"]}, "colorizer.py": {"libraries": ["keyword", "re", "time", "idlelib.config.idleConf", "unittest.main", "tkinter.Text", "idlelib.idle_test.htest.run", "tkinter.Toplevel", "idlelib.delegator.Delegator", "idlelib.percolator.Percolator", "builtins"], "function_names": ["notify_range", "make_pat", "any", "init_state", "setdelegate", "config_colors", "close", "LoadTagDefs", "insert", "_color_delegator", "delete", "__init__", "toggle_colorize_event", "recolorize", "recolorize_main", "removecolors", "color_config"], "function_calls": ["make_pat", "len", "any", "min", "ColorDelegator", "run", "Toplevel", "Percolator", "str", "dir", "main", "Text", "color_config", "map", "print"], "class_names": ["ColorDelegator"], "class_method_calls": ["Delegator.setdelegate", "text.config", "self.after_id", "self.recolorize_main", "keyword.kwlist", "idleConf.CurrentTheme", "self.after_cancel", "self.recolorize", "text.insert", "self.tag_names", "Delegator.__init__", "self.tag_nextrange", "self.unbind", "parent.geometry", "self.tag_add", "self.tag_configure", "self.tagdefs", "self.after", "self.tag_prevrange", "self.idprog", "self.colorizing", "name.startswith", "m.end", "self.tag_raise", "self.update", "self.allow_colorizing", "re.S", "self.index", "idleConf.GetHighlight", "m.span", "top.geometry", "self.config_colors", "self.bind", "self.LoadTagDefs", "self.prog", "time.perf_counter", "self.tag_remove", "top.title", "re.compile", "text.focus_set", "self.delegate", "self.init_state", "self.stop_colorizing", "text.pack", "p.insertfilter", "self.notify_range", "m.groupdict", "m1.span", "self.toggle_colorize_event", "self.get"]}, "config_key.py": {"libraries": ["tkinter.ttk.Scrollbar", "tkinter.ttk.Button", "tkinter.ttk.Entry", "tkinter.messagebox", "string", "unittest.main", "tkinter.TclError", "tkinter.simpledialog._setup_dialog", "sys", "tkinter.ttk.Checkbutton", "idlelib.idle_test.htest.run", "tkinter.Listbox", "tkinter.ttk.Frame", "tkinter.StringVar", "tkinter.ttk.Label", "tkinter.Toplevel"], "function_names": ["set_modifiers_for_platform", "create_widgets", "build_key_string", "clear_key_seq", "ok", "keys_ok", "bind_ok", "translate_key", "__init__", "toggle_level", "get_modifiers", "showerror", "cancel", "final_key_selected"], "function_calls": ["Label", "Listbox", "Checkbutton", "Entry", "run", "tuple", "Frame", "translate_key", "Scrollbar", "_setup_dialog", "main", "Button", "zip", "StringVar"], "class_names": ["GetKeysDialog"], "class_method_calls": ["self.modifier_label", "scroll_keys_final.grid", "self.transient", "self.button_level", "frame_buttons.pack", "string.digits", "self.result", "sys.platform", "self.winfo_reqheight", "self.action", "advanced_title.pack", "mapping.get", "self.update_idletasks", "frame.pack", "self.destroy", "self.get_modifiers", "keylist.append", "self.protocol", "self.advanced_keys", "self.final_key_selected", "variable.set", "self.winfo_reqwidth", "self.frame", "self.configure", "self.resizable", "self.toggle_level", "self.cancel", "self.wait_window", "self.title", "self.unbind", "variable.get", "parent.winfo_rootx", "self.button_ok", "self.modifiers", "check.grid", "messagebox.showerror", "self.frame_keyseq_basic", "self.bind_ok", "self.deiconify", "self.button_cancel", "Toplevel.__init__", "self.clear_key_seq", "self.keyerror_title", "self.showerror", "self.current_key_sequences", "string.ascii_lowercase", "self.frame_controls_basic", "keys.endswith", "self.bind", "self.keys_ok", "parent.winfo_width", "self.frame_help_advanced", "help_basic.grid", "scroll_keys_final.set", "self.list_keys_final", "self.grab_set", "help_advanced.grid", "key.upper", "self.set_modifiers_for_platform", "self.parent", "self.ok", "self.build_key_string", "self.modifier_checkbuttons", "basic_keys.pack", "self.modifier_vars", "self.key_string", "self.geometry", "self.grab_release", "self.advanced", "basic_title.pack", "self.withdraw", "parent.winfo_height", "self.frame_keyseq_advanced", "self.button_clear", "self.create_widgets", "parent.winfo_rooty"]}, "configdialog.py": {"libraries": ["tkinter.ttk.Button", "tkinter.Canvas", "idlelib.dynoption.DynOptionMenu", "tkinter.NONE", "tkinter.FALSE", "tkinter.VERTICAL", "idlelib.format.FormatParagraph", "tkinter.E", "tkinter.ttk.Radiobutton", "idlelib.query.HelpSource", "tkinter.ttk.Checkbutton", "tkinter.HORIZONTAL", "tkinter.StringVar", "tkinter.W", "tkinter.Toplevel", "tkinter.Y", "tkinter.TRUE", "tkinter.ANCHOR", "idlelib.config.ConfigChanges", "tkinter.messagebox", "tkinter.font", "tkinter.BooleanVar", "tkinter.RIGHT", "tkinter.BOTH", "tkinter.NW", "tkinter.colorchooser", "tkinter.Listbox", "tkinter.ttk.Label", "tkinter.LEFT", "re", "idlelib.parenmatch.ParenMatch", "tkinter.X", "tkinter.NSEW", "tkinter.ttk.OptionMenu", "idlelib.textview.view_text", "tkinter.ttk.Notebook", "tkinter.SOLID", "tkinter.Scale", "tkinter.IntVar", "tkinter.END", "tkinter.ttk.Style", "tkinter.NS", "tkinter.EW", "tkinter.ttk.Entry", "tkinter.ttk.Frame", "idlelib.config_key.GetKeysDialog", "idlelib.macosx", "idlelib.autocomplete.AutoComplete", "idlelib.textview.ScrollableTextFrame", "tkinter.ttk.Scrollbar", "tkinter.BOTTOM", "unittest.main", "idlelib.config.idleConf", "tkinter.GROOVE", "tkinter.ttk.LabelFrame", "idlelib.codecontext.CodeContext", "idlelib.squeezer.Squeezer", "tkinter.ACTIVE", "idlelib.query.SectionName", "tkinter.TOP", "idlelib.idle_test.htest.run"], "function_names": ["create_page_font_tab", "extension_selected", "var_changed_space_num", "askyesno", "var_changed_color", "on_new_color_set", "save_all_changed_extensions", "load_font_cfg", "var_changed_custom_name", "on_fontlist_select", "var_changed_keybinding", "update_help_changes", "create_action_buttons", "save_new", "create_new", "var_changed_font", "create_page_keys", "help_source_selected", "apply", "load_tab_cfg", "_configure_interior", "create_widgets", "set_theme_type", "load_extensions", "create_extension_frame", "ok", "var_changed_builtin_name", "var_changed_theme_source", "set_highlight_target", "get_color", "save_as_new_key_set", "clear", "__init__", "set_extension_value", "helplist_item_edit", "cancel", "set_color_sample", "paint_theme_sample", "delete_custom", "set_keys_type", "get_new_keys_name", "default_callback", "tem", "var_changed_keyset_source", "create_page_highlight", "set_add_delete_state", "detach", "get_new_keys", "on_bindingslist_select", "helplist_item_remove", "create_page_general", "attach", "set_samples", "set_color_sample_binding", "load_key_cfg", "activate_config_changes", "help", "var_changed_highlight_target", "create_new_key_set", "deactivate_current_config", "load_general_cfg", "load_theme_cfg", "make_callback", "is_digits_or_empty", "load_keys_list", "create_page_extensions", "is_int", "add", "save_new_key_set", "delete_custom_keys", "helplist_item_add", "save_as_new_theme", "destroy", "init_validators", "_configure_canvas", "get_new_theme_name"], "function_calls": ["BooleanVar", "Notebook", "sorted", "OptionMenu", "HighPage", "StringVar", "view_text", "Label", "IntVar", "isinstance", "ScrollableTextFrame", "SectionName", "super", "LabelFrame", "Checkbutton", "str", "Frame", "Scrollbar", "Style", "range", "VarTrace", "list", "HelpSource", "GetKeysDialog", "Canvas", "Entry", "run", "ConfigChanges", "set", "int", "Button", "Radiobutton", "VerticalScrolledFrame", "enumerate", "len", "Listbox", "GenPage", "main", "DynOptionMenu", "KeysPage", "FontPage", "Scale"], "class_names": ["VarTrace", "ConfigDialog", "GenPage", "HighPage", "KeysPage", "FontPage", "VerticalScrolledFrame"], "class_method_calls": ["self.format_width_int", "self.highlight_sample", "sample_frame.text", "event.type", "self.protocol", "interior.winfo_reqwidth", "self.win_width", "self.font_name", "frame_target.pack", "frame.rowconfigure", "self.create_page_extensions", "changes.save_all", "self.genpage", "frame_sample.grid", "Toplevel.__init__", "self.var_changed_keyset_source", "self.context_int", "self.button_helplist_add", "self.font_size", "self.get_color", "self.askyesno", "self.details_frame", "self.wm_deiconify", "canvas.pack", "frame_context.pack", "self.update_help_changes", "idleConf.GetExtensions", "paren_time_title.pack", "lc_fonts.index", "self.load_key_cfg", "self.line_numbers_default", "idleConf.CurrentTheme", "changes.add_option", "format_width_title.pack", "self.create_page_font_tab", "self.set_highlight_target", "self.auto_squeeze_min_lines_int", "theme_type_title.pack", "frame_target.rowconfigure", "self.button_save_custom_keys", "self.deactivate_current_config", "frame_shell.pack", "self.ext_defaultCfg", "target_title.grid", "canvas.yview_moveto", "self.geometry", "self.helplist_item_edit", "scroll_target_y.grid", "idleConf.IsCoreBinding", "macosx.isAquaTk", "self.helplist_item_add", "self.register", "self.bindingslist", "custom_key_list.sort", "Frame.__init__", "idleConf.GetExtnNameForEvent", "self.helplist_item_remove", "binding.split", "self.button_delete_custom_keys", "self.save_auto_on", "self.var_changed_font", "var.get", "self.load_tab_cfg", "self.parent", "vscrollbar.set", "self.delete_custom_keys", "self.get_new_theme_name", "self.font_bold", "self.set_samples", "self.tabbed_page_set", "self.cancel", "self.theme_message", "self.win_width_int", "self.paren_style", "frame_theme.pack", "self.create_extension_frame", "tracers.attach", "frame.columnconfigure", "self.var_changed_highlight_target", "self.create_page_keys", "self.paren_style_type", "self.win_height_int", "self.set_extension_value", "self.rowconfigure", "frame_font_param.pack", "self.load_keys_list", "self.autosave", "win_height_title.pack", "self.delete_custom", "idleConf.GetKeySet", "self.button_set_color", "note.pack", "self.ext_userCfg", "self.columnconfigure", "self.startup_editor_on", "changes.clear", "frame_format.pack", "frame_custom.pack", "self.save_as_new_theme", "tkfont.BOLD", "parent.instance_dict", "interior.bind", "vscrollbar.config", "self.keyset_source", "canvas.itemconfigure", "interior.winfo_reqheight", "self.create_page_highlight", "scroll_helplist.set", "self.keybinding", "self.extension_names", "parent.winfo_rootx", "frame.configure", "colorchooser.askcolor", "self.space_num", "self.buttons", "self.save_ask_on", "self.var_changed_custom_name", "self.get_new_keys_name", "opt_name.startswith", "self.startup_shell_on", "self.button_delete_custom", "self.indent_scale", "canvas.config", "scroll_font.pack", "self.builtinlist", "idleConf.GetCoreKeys", "note.add", "messagebox.askyesno", "self.traced", "idleConf.GetCurrentKeySet", "self.title", "self.custom_theme_on", "self.keyspage", "self.helplist", "self.highlight_target", "frame_fg_bg_toggle.pack", "self.targetlist", "self.flash_delay", "text.bind", "self.highpage", "self.is_int", "self.create_new_key_set", "self.builtin_name", "self.create_widgets", "self.button_save_custom", "auto_squeeze_min_lines_title.pack", "self.color", "f.interior", "tkfont.NORMAL", "self.startup_edit", "self.bold_toggle", "idleConf.GetHighlight", "self.current_extension", "self.grab_set", "self.ok", "paren_style_title.pack", "canvas.xview_moveto", "theme_names.sort", "self.create_new", "self.custom_keyset_on", "self.extension_selected", "self.create_action_buttons", "text.get", "self.destroy", "self.set_keys_type", "text.insert", "self.help", "var.trace_info", "self.init_validators", "self.fontpage", "self.set_color_sample_binding", "self.withdraw", "self.button_helplist_edit", "self.apply", "text.configure", "instance.RemoveKeybindings", "sample_frame.pack", "frame_auto_squeeze_min_lines.pack", "frame_target.columnconfigure", "frame_help.pack", "self.custom_name", "self.set_color_sample", "self.font_sample", "label.grid", "frame_cursor_blink.pack", "self.button_new_keys", "bind_names.sort", "self.load_theme_cfg", "s.lower", "self.var_changed_keybinding", "win_size_title.pack", "self.load_general_cfg", "self.autocomplete_wait", "self.fontlist", "self.style", "self.transient", "run_save_title.pack", "self.on_bindingslist_select", "idleConf.CurrentKeys", "self.frame_color_set", "note.enable_traversal", "self.var_changed_theme_source", "frame_paren2.pack", "self.customlist", "self.bg_on", "self.help_source_selected", "self.cd", "frame_helplist_buttons.pack", "self.get_new_keys", "font_sample_frame.pack", "font_size_title.pack", "self.paren_bell", "font_name_title.pack", "canvas.bind", "idleConf.GetFont", "instance.reset_help_menu_entries", "self.format_width", "custom_theme_list.sort", "self.interior", "master.winfo_toplevel", "idleConf.default_keys", "canvas.create_window", "var.trace_add", "self.theme_source", "self.extensions", "var.trace_remove", "self.wait_window", "context_title.pack", "self.auto_squeeze_min_lines", "self.paren_flash_time", "self.activate_config_changes", "self.builtin_keyset_on", "self.builtin_theme_on", "self.cursor_blink", "self.outerframe", "self.extension_list", "opt_list.remove", "self.paint_theme_sample", "font_sample_frame.text", "item_list.sort", "self.auto_wait_int", "self.config_frame", "self.grab_release", "frame_editor.pack", "frame_line_numbers_default.pack", "keyset.keys", "self.resizable", "self.fg_bg_toggle", "self.var_changed_color", "instance.ResetColorizer", "help_pages.get", "self.user_helplist", "idleConf.GetAllExtraHelpSourcesList", "cursor_blink_title.pack", "canvas.winfo_width", "self.untraced", "self.save_all_changed_extensions", "text.tag_bind", "self.context_lines", "tracers.add", "idleConf.GetThemeDict", "self.set_theme_type", "scroll_target_x.set", "self.cursor_blink_bool", "self.line_numbers_default_bool", "frame_helplist.pack", "self.digits_only", "font.lower", "self.create_page_general", "win_width_title.pack", "self.frame", "frame_run.pack", "scroll_target_y.set", "frame_font.grid", "frame_key_sets.pack", "scroll_helplist.pack", "line_numbers_default_title.pack", "startup_title.pack", "frame_window.pack", "frame_paren1.pack", "self.keys_message", "self.load_extensions", "scroll.set", "self.save_new", "frame_autocomplete.pack", "tkfont.families", "frame_save.pack", "self.bell_on", "self.note", "self.fg_on", "instance.ResetFont", "changes.delete_section", "frame_win_size.pack", "vscrollbar.pack", "highpage.highlight_sample", "self.sizelist", "self.load_font_cfg", "idleConf.GetSectionList", "instance.set_notabs_indentwidth", "buttons_frame.pack", "instance.update_cursor_blink", "self.extpage", "scroll.grid", "var.set", "self.win_height", "instance.ApplyKeybindings", "re.compile", "scroll_font.set", "self.button_helplist_remove", "parent.winfo_rooty", "klass.reload", "self.on_new_color_set", "digits_or_empty_re.fullmatch", "self.save_new_key_set", "frame_indent.grid", "auto_wait_title.pack", "idleConf.GetOption", "idleConf.userCfg", "self.make_callback", "self.theme_elements", "self.set_add_delete_state", "idleConf.defaultCfg", "self.on_fontlist_select", "current_bindings.values", "scroll_font.config", "indent_title.pack", "self.var_changed_builtin_name", "scroll_target_x.grid", "self.save_as_new_key_set", "frame_font_name.pack", "canvas.yview"]}, "debugger.py": {"libraries": ["tkinter.ttk.Scrollbar", "bdb", "idlelib.window.ListedToplevel", "linecache", "unittest.main", "reprlib", "idlelib.scrolledlist.ScrolledList", "os", "idlelib.macosx", "tkinter.ttk.Frame", "tkinter.*"], "function_names": ["on_select", "show_locals", "user_exception", "make_gui", "sync_source_line", "in_rpc_code", "__frame2message", "load_stack", "load_dict", "quit", "goto_source_line", "clear_breakpoint_here", "show_source", "user_line", "abort_loop", "fill_menu", "interaction", "__init__", "on_double", "cont", "close", "show_stack", "load_breakpoints", "run", "popup_event", "next", "show_globals", "ret", "show_frame", "__frame2fileline", "set_breakpoint_here", "show_variables", "step", "clear_file_breaks", "show_stack_frame"], "function_calls": ["min", "BooleanVar", "sorted", "Idb", "ListedToplevel", "StackViewer", "Label", "NamespaceViewer", "Checkbutton", "str", "Frame", "Scrollbar", "range", "list", "Canvas", "Entry", "Button", "len", "max", "main"], "class_names": ["Debugger", "Idb", "StackViewer", "NamespaceViewer"], "class_method_calls": ["self.vglobals", "self.fstack", "frame.f_back", "subframe.winfo_reqwidth", "self.bsource", "self.close", "self.bstack", "self.vsource", "self.quit", "frame.f_locals", "self.flist", "dict.keys", "self.bnext", "self.flocals", "self.set_step", "self.select", "self.clear", "frame.f_code", "self.errorbg", "self.make_gui", "self.cframe", "vbar.set", "self.next", "self.sfid", "vbar.pack", "menu.add_command", "self.ret", "self.load_dict", "self.run", "code.co_name", "canvas.pack", "prev_frame.f_code", "l.grid", "self.localsviewer", "reprlib.Repr", "bl.append", "self.set_breakpoint_here", "self.show_stack", "pyshell.root", "self.nesting_level", "self.idb", "self.abort_loop", "self.frame", "pyshell.flist", "self.bframe", "self.root", "editwin.io", "self.error", "self.__frame2fileline", "self.label", "self.buttons", "self.listbox", "ScrolledList.__init__", "frame.f_globals", "self.step", "edit.gotoline", "self.fglobals", "lv.close", "self.repr", "top.wm_protocol", "os.path", "self.blocals", "self.cont", "self.show_source", "self.bcont", "macosx.isAquaTk", "gv.close", "self.dict", "frame.pack", "subframe.children", "self.vlocals", "self.append", "self.show_variables", "subframe.update_idletasks", "self.gui", "lv.load_dict", "self.subframe", "sv.close", "editwin.breakpoints", "self.title", "self.bret", "sourceline.strip", "c.destroy", "sv.load_stack", "self.canvas", "self.top", "self.pyshell", "subframe.winfo_reqheight", "gv.load_dict", "self.bstep", "self.status", "type.__name__", "l.insert", "self.stack", "canvas.create_window", "self.stackviewer", "b.pack", "self.vstack", "self.in_rpc_code", "bdb.Bdb", "self.interacting", "self.show_locals", "self.show_globals", "self.sync_source_line", "code.co_filename", "b.configure", "self.vbar", "self.bglobals", "self.goto_source_line", "frame.f_lineno", "self.globalsviewer", "self.master", "self.__frame2message", "linecache.getline", "self.menu", "ScrolledList.popup_event", "self.__class__", "self.show_stack_frame", "canvas.yview"]}, "debugger_r.py": {"libraries": ["types", "reprlib", "__main__", "idlelib.debugger", "unittest.main"], "function_names": ["__getattr__", "frame_attr", "_get_f_code", "keys", "_get_f_globals", "set_continue", "interaction", "call", "wrap_frame", "get_stack", "__init__", "wrap_info", "restart_subprocess_debugger", "dict_keys", "dict_item", "_get_dict_proxy", "start_remote_debugger", "set_break", "run", "set_next", "frame_globals", "start_debugger", "set_return", "code_name", "clear_all_file_breaks", "frame_locals", "code_filename", "dict_keys_list", "frame_code", "close_remote_debugger", "clear_break", "set_step", "_get_f_locals", "set_quit", "__getitem__", "close_subprocess_debugger"], "function_calls": ["isinstance", "list", "AttributeError", "GUIAdapter", "GUIProxy", "FrameProxy", "getattr", "NotImplementedError", "wrap_frame", "CodeProxy", "wrap_info", "main", "IdbAdapter", "id", "DictProxy", "IdbProxy", "close_subprocess_debugger"], "class_names": ["GUIProxy", "FrameProxy", "CodeProxy", "IdbAdapter", "GUIAdapter", "DictProxy", "IdbProxy"], "class_method_calls": ["rpchandler.register", "self._fid", "self._get_dict_proxy", "self.conn", "self._did", "debugger.Debugger", "self.idb", "frame._fid", "self.gui", "self.call", "self._get_f_globals", "frame.f_locals", "dict.keys", "self.oid", "rpcclt.remotecall", "code.co_filename", "debugger.Idb", "self._dictcache", "rpcclt.register", "frame.f_globals", "self._cid", "frame.f_code", "self._get_f_locals", "self._oid", "self._conn", "self.shell", "types.TracebackType", "self._get_f_code", "rpcclt.unregister", "code.co_name", "__main__.__dict__", "reprlib.repr"]}, "debugobj.py": {"libraries": ["unittest.main", "idlelib.tree.TreeItem", "sys", "idlelib.idle_test.htest.run", "idlelib.tree.ScrolledCanvas", "idlelib.tree.TreeNode", "reprlib.Repr", "tkinter.Toplevel"], "function_names": ["GetSubList", "GetIconName", "GetText", "_object_browser", "GetLabelText", "SetText", "__init__", "IsEditable", "IsExpandable", "setfunction", "keys", "make_objecttreeitem"], "function_calls": ["list", "c", "Repr", "TreeNode", "len", "getattr", "run", "Toplevel", "range", "dir", "str", "type", "main", "setattr", "map", "eval", "make_objecttreeitem", "ScrolledCanvas"], "class_names": ["AtomicObjectTreeItem", "SequenceTreeItem", "ObjectTreeItem", "DictTreeItem", "ClassTreeItem"], "class_method_calls": ["myrepr.maxother", "sublist.insert", "ObjectTreeItem.GetSubList", "self.keys", "top.configure", "myrepr.repr", "top.focus_set", "sc.canvas", "parent.geometry", "self.IsExpandable", "self.object", "node.update", "keys.sort", "self.setfunction", "sc.frame", "top.geometry", "top.title", "self.labeltext", "myrepr.maxstring", "sublist.append"]}, "debugobj_r.py": {"libraries": ["unittest.main", "idlelib.rpc"], "function_names": ["__getattr__", "__init__", "remote_object_tree_item", "_GetSubList"], "function_calls": ["list", "getattr", "StubObjectTreeItem", "id", "main", "WrappedObjectTreeItem", "map"], "class_names": ["WrappedObjectTreeItem", "StubObjectTreeItem"], "class_method_calls": ["rpc.objecttable", "self.__item", "self.sockio", "rpc.MethodProxy", "self.oid"]}, "delegator.py": {"libraries": ["unittest.main"], "function_names": ["__getattr__", "__init__", "resetcache", "setdelegate"], "function_calls": ["getattr", "set", "main", "delattr", "setattr"], "class_names": ["Delegator"], "class_method_calls": ["self.resetcache", "self.__cache", "self.delegate"]}, "dynoption.py": {"libraries": ["copy", "tkinter._setit", "tkinter.Button", "idlelib.idle_test.htest.run", "tkinter.OptionMenu", "tkinter.StringVar", "tkinter.Toplevel"], "function_names": ["_dyn_option_menu", "__init__", "update", "SetMenu"], "function_calls": ["list", "_setit", "map", "run", "Toplevel", "Button", "DynOptionMenu", "StringVar"], "class_names": ["DynOptionMenu"], "class_method_calls": ["copy.copy", "kwargsCopy.get", "self.config", "top.focus_set", "kwargs.keys", "parent.geometry", "top.geometry", "kwargs.get", "self.command", "dyn.pack", "OptionMenu.__init__", "button.pack", "dyn.SetMenu", "self.variable", "top.title", "var.set"]}, "editor.py": {"libraries": ["idlelib.help", "idlelib.format.FormatParagraph", "idlelib.format.Rstrip", "importlib.abc", "subprocess", "idlelib.zoomheight.ZoomHeight", "idlelib.multicall.MultiCallCreator", "string", "idlelib.colorizer.color_config", "webbrowser", "idlelib.colorizer.ColorDelegator", "idlelib.browser", "traceback", "idlelib.grep", "platform", "idlelib.autoexpand.AutoExpand", "idlelib.sidebar.LineNumbers", "tkinter.messagebox", "idlelib.help_about", "importlib.util", "idlelib.format.FormatRegion", "idlelib.window", "os", "idlelib.pyparse", "idlelib.undo.UndoDelegator", "tkinter.*", "idlelib.percolator.Percolator", "idlelib.runscript.ScriptBinding", "idlelib.search", "re", "tkinter.simpledialog", "idlelib.calltip.Calltip", "idlelib.parenmatch.ParenMatch", "idlelib.query", "idlelib.mainmenu", "tokenize", "idlelib.replace", "tkinter.font.Font", "idlelib.macosx", "unittest.main", "idlelib.pathbrowser", "idlelib.autocomplete.AutoComplete", "tkinter.ttk.Scrollbar", "idlelib.config.idleConf", "idlelib.configdialog", "idlelib.iomenu.IOBinding", "idlelib.codecontext.CodeContext", "idlelib.format.Indents", "idlelib.squeezer.Squeezer", "idlelib.iomenu.encoding", "sys", "idlelib.tree.wheel_event", "idlelib.statusbar.MultiStatusBar", "idlelib.idle_test.htest.run"], "function_names": ["_addcolorizer", "get_saved", "del_word_left", "reset_undo", "tokeneater", "make_rmenu", "gotoline", "copy", "load_extensions", "prepstr", "__init__", "reindent_to", "getwindowlines", "rmenu_check_copy", "ApplyKeybindings", "set_notabs_indentwidth", "set_line_and_column", "RemoveKeybindings", "rmenu_check_cut", "set_tk_tabwidth", "del_word_right", "smart_indent_event", "handle_winconfig", "open_module", "load_extension", "help_dialog", "select_all", "update_cursor_blink", "display_extra_help", "handle_yview", "cut", "get_standard_extension_names", "config_dialog", "right_menu_event", "set_close_hook", "ResetFont", "createmenubar", "_sphinx_version", "set_status_bar", "_editor_window", "reset_help_menu_entries", "open_module_browser", "_make_blanks", "guess_indent", "goto_line_event", "ispythonsource", "fill_menus", "short_title", "close_hook", "about_dialog", "get_geometry", "saved_change_hook", "update_menu_state", "set_saved", "smart_backspace_event", "command", "open_module_event", "paste", "toggle_line_numbers_event", "apply_bindings", "getlineno", "get_selection_indices", "open_recent_file", "set_indentation_params", "_build_char_in_string_func", "get_tk_tabwidth", "get_accelerator", "ResetColorizer", "postwindowsmenu", "setvar", "close", "index2line", "center", "open_path_browser", "long_title", "update_recent_files_list", "get_var_obj", "newline_and_indent_event", "find_event", "fixwordbreaks", "find_again_event", "readline", "_rmcolorizer", "remove_selection", "_close", "home_callback", "filename_change_hook", "move_at_edge_if_selection", "getvar", "new_callback", "move_at_edge", "__extra_help_callback", "is_char_in_string", "get_line_indent", "unload_extensions", "__recent_file_callback", "find_selection_event", "center_insert_event", "find_in_files_event", "set_width", "load_standard_extensions", "run", "update_menu_label", "python_docs", "close_event", "maybesave", "replace_event", "inner", "rmenu_check_paste", "colorize_syntax_error", "open_turtle_demo"], "function_calls": ["EditorWindow", "ScriptBinding", "self_text_index", "getattr", "cls", "repr", "get_line_indent", "str", "prepstr", "Font", "Frame", "_sphinx_version", "Scrollbar", "open", "get_accelerator", "range", "list", "index2line", "NameError", "run", "int", "enumerate", "float", "hasattr", "MultiCallCreator", "len", "vartype", "divmod", "max", "IndentSearcher", "fixwordbreaks", "_icis", "self_text_mark_set", "main", "Menu", "sum", "map", "round", "print"], "class_names": ["EditorWindow", "IndentSearcher"], "class_method_calls": ["indents.toggle_tabs_event", "self.fill_menus", "_line_indent_re.match", "self.Calltip", "self.flist", "self.find_selection_event", "self.extfiles", "self.paste", "self.apply_bindings", "self.AutoComplete", "vbar.set", "flist.dict", "string.ascii_letters", "search.find_again", "instance.recent_files_menu", "self.getlineno", "self.right_menu_event", "self.askyesno", "self.i", "self.short_title", "query.ModuleName", "sys.argv", "idleConf.GetExtensions", "self.ispythonsource", "self.FormatParagraph", "self.IOBinding", "self.python_docs", "self.allow_line_numbers", "text.delete", "EditorWindow.help_url", "self.about_dialog", "self.newline_and_indent_event", "self.tabwidth", "rmenu.entryconfigure", "io.set_filename_change_hook", "instance.__recent_file_callback", "os.path", "configdialog.ConfigDialog", "macosx.isAquaTk", "rf_list.remove", "helpmenu.add_separator", "self.Rstrip", "s.find", "mbar.add_cascade", "self.cut", "text.tag_prevrange", "self.finished", "self.IDENTCHARS", "self.undo", "self._rmcolorizer", "pyparse.C_STRING_FIRST_LINE", "self.find_in_files_event", "flist.vars", "self.replace_event", "self.set_width", "cls.menudefs", "self.new_callback", "self.usetabs", "self.showerror", "re.sub", "query.Goto", "var.get", "self.mainmenu", "event.y_root", "self.blkopenline", "self._make_blanks", "text.undo_block_stop", "self.find_again_event", "text.winfo_width", "self.set_indentation_params", "self.ZoomHeight", "parenmatch.paren_closed_event", "menu.entrycget", "self.code_context", "self.rmenu_check_copy", "self.base_helpmenu_length", "rf_list.insert", "y.is_block_opener", "self.open_module_event", "root.tk", "menu.delete", "tokenize.generate_tokens", "prefix.expandtabs", "simpledialog.askinteger", "text.keydefs", "replace.replace", "ctip.refresh_calltip_event", "ins.close", "text.tk", "self.wmenu_end", "self.remove_selection", "sys.executable", "vbar.grid", "self.LineNumbers", "self.indentedline", "xkeydefs.items", "self.get_standard_extension_names", "window.add_windows_to_menu", "self.FormatRegion", "self.Percolator", "self.menudict", "EditorWindow.color_config", "self.make_rmenu", "self.find_event", "pyparse.C_NONE", "traceback.print_exc", "rmenu.tk_popup", "window.unregister_callback", "helpfile.startswith", "self.handle_yview", "event.state", "self.guess_indent", "self.reindent_to", "text.see", "self.ctip", "self.text_frame", "m.groups", "self.saved_change_hook", "y.set_lo", "scriptbinding.run_module_event", "self.update_menu_label", "self.smart_indent_event", "sys.version_info", "re.match", "text.config", "string.digits", "rmenu.add_command", "self.good_load", "messagebox.askyesno", "event.x_root", "self.center", "idleConf.GetCurrentKeySet", "pyparse.C_BRACKET", "text_frame.columnconfigure", "messagebox.showwarning", "text.yview", "text_frame.pack", "self.ColorDelegator", "self.__extra_help_callback", "sys.base_prefix", "text.bind", "bad_paths.append", "self.set_status_bar", "self.recent_files_path", "self.close_event", "rmenu.add_separator", "self.help_url", "self.color", "self.io", "scriptbinding.run_custom_event", "self.close_hook", "self.load_extension", "self.tokeneater", "event.x", "self.smart_backspace_event", "self.goto_line_event", "macosx.isCarbonTk", "chars.expandtabs", "macosx.setupApp", "self.__class__", "text.event_add", "search.find_selection", "m.group", "self.CodeContext", "self.tkinter_vars", "menu.index", "text.get", "self.get_tk_tabwidth", "pyparse.C_STRING_NEXT_LINES", "fregion.untabify_region_event", "text.insert", "self.width", "self.long_title", "self.unload_extensions", "self.UndoDelegator", "self.open_path_browser", "self.reset_help_menu_entries", "flist.inversedict", "helpmenu.index", "undo.set_saved_change_hook", "fregion.indent_region_event", "menudict.get", "self._close", "ctip.try_open_calltip_event", "self.prompt_last_line", "tokenize.TokenError", "self.move_at_edge_if_selection", "text.mark_set", "text.configure", "self.filename_change_hook", "self.update_cursor_blink", "per.insertfilter", "text.winfo_height", "autocomplete.try_open_completions_event", "self._build_char_in_string_func", "text.tag_remove", "self.MultiStatusBar", "self.root", "self.handle_winconfig", "self.update_recent_files_list", "platform.python_version", "pyparse.C_BACKSLASH", "self.set_line_and_column", "self.readline", "self.load_standard_extensions", "self.postwindowsmenu", "macosx.isCocoaTk", "text.focus_set", "self.select_all", "line.startswith", "menu.add_checkbutton", "self.get_saved", "keydefs.get", "help_about.AboutDialog", "rf_list_file.readlines", "sys.platform", "self.status_bar", "autocomplete.force_open_completions_event", "self.maybesave", "idleConf.GetExtensionBindings", "m.end", "self.config_dialog", "text.bell", "y.is_block_closer", "text.index", "self.text", "self.get_var_obj", "text.grid", "idleConf.GetFont", "self.set_notabs_indentwidth", "text.undo_block_start", "self.open_turtle_demo", "tokenize.tabsize", "self.del_word_left", "self.num_context_lines", "self.set_tk_tabwidth", "fregion.dedent_region_event", "edit.text", "self.rmenu_specs", "self.extensions", "self.ResetColorizer", "helpmenu.delete", "importlib.import_module", "grep.grep", "text.compare", "fregion.comment_region_event", "self.AutoExpand", "keynames.get", "autocomplete.autocomplete_event", "self.vbar", "y.compute_backslash_indent", "y.get_continuation_type", "fregion.uncomment_region_event", "io.loadfile", "self.line_numbers", "self.indentwidth", "file_name.rstrip", "self.askinteger", "idleConf.blink_off_time", "sep.pack", "self.close", "pathbrowser.PathBrowser", "help.show_idlehelp", "y.get_base_indent_string", "keydefs.items", "indents.change_indentwidth_event", "self.fregion", "window.ListedToplevel", "idleConf.GetAllExtraHelpSourcesList", "scriptbinding.check_module_event", "self.menu_specs", "menu.add_command", "self.ParenMatch", "self.is_char_in_string", "idleConf.userdir", "tk.call", "self.open_module_browser", "y.find_good_parse_start", "io.set_filename", "search.find", "parenmatch.flash_paren_event", "fregion.tabify_region_event", "messagebox.showerror", "subprocess.Popen", "window.register_callback", "self.Indents", "menu.add_separator", "self.menubar", "event.y", "text.event_generate", "self.get_selection_indices", "y.get_num_lines_in_stmt", "self.copy", "webbrowser.open", "helpmenu.add_command", "pyparse.Parser", "browser.ModuleBrowser", "self.load_extensions", "self.recent_files_menu", "event.keysym", "self.help_dialog", "self.rmenu", "self.toggle_line_numbers_event", "os.startfile", "self.per", "self.del_word_right", "self.open_module", "tokenize.INDENT", "y.set_code", "self._addcolorizer", "flist.root", "self.event", "self.top", "undo.undo_block_start", "text_frame.rowconfigure", "rf_file.writelines", "var.set", "re.compile", "sys.getfilesystemencoding", "self.allow_code_context", "self.getwindowlines", "y.compute_bracket_indent", "menu.type", "self.center_insert_event", "text.master", "menu.entryconfig", "idleConf.GetOption", "self.createmenubar", "undo.undo_block_stop", "tokenize.NAME", "self.home_callback", "text.cget", "ctip.force_open_calltip_event", "menuitem.entryconfig", "self.update_menu_state", "vevent.replace", "text.tag_add"]}, "format.py": {"libraries": ["re", "idlelib.config.idleConf", "tkinter.messagebox.askyesno", "tkinter.simpledialog.askinteger", "unittest.main"], "function_names": ["is_all_white", "toggle_tabs_event", "format_paragraph_event", "_asktabwidth", "reload", "change_indentwidth_event", "get_line_indent", "set_region", "get_comment_header", "__init__", "find_paragraph", "reformat_paragraph", "close", "get_indent", "untabify_region_event", "comment_region_event", "uncomment_region_event", "dedent_region_event", "tabify_region_event", "indent_region_event", "do_rstrip", "reformat_comment", "get_region"], "function_calls": ["divmod", "len", "reformat_paragraph", "askyesno", "get_indent", "max", "get_line_indent", "is_all_white", "askinteger", "get_comment_header", "reformat_comment", "int", "main", "find_paragraph", "float", "map", "range", "hasattr"], "class_names": ["FormatRegion", "Indents", "FormatParagraph", "Rstrip"], "class_method_calls": ["text.mark_set", "newdata.split", "mark.split", "self._asktabwidth", "text.get", "_line_indent_re.match", "chars.split", "data.split", "new.extend", "text.insert", "txt.rstrip", "text.delete", "text.tag_remove", "editwin.usetabs", "text.compare", "m.end", "partial.rstrip", "text.bell", "self.editwin", "FormatParagraph.reload", "idleConf.GetOption", "undo.undo_block_stop", "text.index", "text.see", "self.max_width", "undo.undo_block_start", "cls.max_width", "text.undo_block_stop", "text.undo_block_start", "self.set_region", "editwin.indentwidth", "editwin.text", "re.compile", "self.get_region", "new.append", "text.tag_add", "re.match", "m.group", "re.split"]}, "grep.py": {"libraries": ["tkinter.ttk.Button", "idlelib.searchbase.SearchDialogBase", "idlelib.searchengine", "unittest.main", "tkinter.Text", "tkinter.BooleanVar", "tkinter.END", "sys", "fnmatch", "idlelib.outwin.OutputWindow", "tkinter.SEL", "tkinter.ttk.Checkbutton", "idlelib.idle_test.htest.run", "os", "idlelib.pyshell.PyShellFileList", "tkinter.ttk.Frame", "tkinter.StringVar", "tkinter.Toplevel"], "function_names": ["show_grep_dialog", "findfiles", "create_entries", "grep_it", "__init__", "create_other_buttons", "walk_error", "grep", "open", "create_command_buttons", "default_command", "_grep_dialog"], "function_calls": ["BooleanVar", "sorted", "Toplevel", "grep", "StringVar", "super", "findfiles", "Checkbutton", "Frame", "Text", "open", "run", "Button", "GrepDialog", "OutputWindow", "enumerate", "hasattr", "PyShellFileList", "main", "map", "print"], "class_names": ["GrepDialog"], "class_method_calls": ["self.grep_it", "self.make_entry", "text.get", "frame.pack", "self.default_command", "self.engine", "dialog.open", "SearchDialogBase.create_command_buttons", "sys.stdout", "engine._grepdialog", "text._root", "self.close", "text.tag_remove", "parent.geometry", "self.flist", "self.globent", "btn.pack", "self.globvar", "self.make_button", "self.make_frame", "top.geometry", "os.curdir", "self.top", "top.title", "io.filename", "os.walk", "os.path", "fnmatch.fnmatch", "searchengine.get", "self.recvar", "prog.search", "SearchDialogBase.open", "SearchDialogBase.create_entries", "text.pack", "text.tag_add", "button.pack"]}, "help.py": {"libraries": ["platform.python_version", "tkinter.ttk.Scrollbar", "idlelib.config.idleConf", "unittest.main", "tkinter.font", "html.parser.HTMLParser", "tkinter.Text", "os.path.isfile", "tkinter.ttk.Style", "os.path.join", "os.path.abspath", "idlelib.idle_test.htest.run", "tkinter.Menu", "tkinter.ttk.Frame", "tkinter.ttk.Menubutton", "os.path.dirname", "tkinter.Toplevel"], "function_names": ["show_idlehelp", "handle_data", "findfont", "toc_menu", "copy_strip", "indent", "__init__", "handle_starttag", "handle_endtag"], "function_calls": ["python_version", "join", "HelpText", "str", "dirname", "Scrollbar", "open", "Style", "run", "HelpFrame", "isfile", "len", "Menubutton", "HelpParser", "main", "Menu", "HelpWindow", "abspath", "print"], "class_names": ["HelpParser", "HelpText", "HelpFrame", "HelpWindow"], "class_method_calls": ["tkfont.families", "self.show", "self.toc", "Frame.__init__", "self.destroy", "self.grid_rowconfigure", "tkfont.names", "self.findfont", "self.protocol", "d.strip", "self.hdrlink", "self.indent", "self.scroll", "data.replace", "self.level", "self.tags", "self.parser", "Text.__init__", "self.tag_configure", "x.lower", "toc.grid", "drop.add_command", "self.hprefix", "f.read", "Toplevel.__init__", "text.yview", "out.write", "HTMLParser.__init__", "self.nested_dl", "tkfont.Font", "idleConf.GetOption", "lastline.isspace", "self.simplelist", "self.columnconfigure", "self.text", "name.lower", "self.pre", "self.header", "scroll.grid", "text.grid", "line.rstrip", "self.prevtag", "self.toc_menu", "self.wm_title", "d.index", "text.parser", "font.actual", "self.rowconfigure", "scroll.set", "self.grid_columnconfigure", "self.chartags", "self.style", "class_.find"]}, "help_about.py": {"libraries": ["tkinter.E", "platform.architecture", "tkinter.W", "tkinter.Toplevel", "tkinter.BOTH", "tkinter.Button", "tkinter.Frame", "os", "platform.python_version", "tkinter.LEFT", "tkinter.X", "tkinter.NSEW", "idlelib.textview", "tkinter.EW", "tkinter.SUNKEN", "unittest.main", "tkinter.BOTTOM", "tkinter.PhotoImage", "tkinter.Label", "sys", "tkinter.TOP", "idlelib.idle_test.htest.run"], "function_names": ["show_py_credits", "create_widgets", "ok", "show_py_copyright", "__init__", "show_py_license", "show_idle_news", "display_printer_text", "display_file_text", "build_bits", "show_readme", "show_idle_credits"], "function_calls": ["Label", "python_version", "PhotoImage", "run", "Frame", "main", "Button", "build_bits", "architecture"], "class_names": ["AboutDialog"], "class_method_calls": ["py_buttons.grid", "self.transient", "frame_buttons.pack", "idle_buttons.grid", "sys.platform", "self._current_textview", "tkver.grid", "self.readme", "idlever.grid", "frame.pack", "self.display_printer_text", "self.destroy", "self.display_file_text", "self.py_license", "self.protocol", "self.idle_news", "header.grid", "printer._Printer__lines", "self.configure", "self.resizable", "self.wait_window", "self.show_readme", "self.idle_credits", "self.title", "self.tk", "docs.grid", "parent.winfo_rootx", "self.button_ok", "self.py_copyright", "printer._Printer__setup", "frame_background.pack", "logo.grid", "textview.view_text", "self._utest", "self.deiconify", "self.show_py_credits", "Toplevel.__init__", "self.show_py_license", "textview.view_file", "self.py_credits", "self.show_idle_credits", "self.bg", "self.bind", "email.grid", "self._root", "byline.grid", "self.grab_set", "pyver.grid", "self.parent", "self.fg", "self.ok", "sys.maxsize", "os.path", "self.icon_image", "self.show_py_copyright", "self.geometry", "self.show_idle_news", "self.grab_release", "self.create_widgets", "parent.winfo_rooty"]}, "history.py": {"libraries": ["unittest.main", "idlelib.config.idleConf"], "function_names": ["fetch", "history_next", "store", "__init__", "history_prev"], "function_calls": ["len", "main"], "class_names": ["History"], "class_method_calls": ["self.history", "text.bind", "idleConf.GetOption", "self.history_next", "source.strip", "self.cyclic", "self.pointer", "self.text", "self.prefix", "self.fetch", "self.history_prev"]}, "hyperparser.py": {"libraries": ["keyword.iskeyword", "string", "idlelib.pyparse", "unittest.main"], "function_names": ["is_in_code", "is_in_string", "index2line", "set_index", "get_expression", "__init__", "_eat_identifier", "get_surrounding_brackets"], "function_calls": ["ValueError", "len", "min", "frozenset", "chr", "index2line", "max", "iskeyword", "int", "main", "float", "ord", "range", "repr"], "class_names": ["HyperParser"], "class_method_calls": ["string.digits", "self.bracketing", "text.get", "parser.get_last_stmt_bracketing", "editwin.tabwidth", "text.tag_prevrange", "parser.find_good_parse_start", "editwin._build_char_in_string_func", "parser.set_code", "cls._ID_KEYWORDS", "self.rawtext", "self.editwin", "self.stopatindex", "self.isopener", "editwin.prompt_last_line", "text.index", "parser.code", "self.text", "self.indexinrawtext", "self._eat_identifier", "string.ascii_letters", "self.indexbracket", "self.is_in_code", "editwin.text", "pyparse.Parser", "editwin.indentwidth", "parser.set_lo", "self.set_index", "self._whitespace_chars", "editwin.num_context_lines"]}, "idle.py": {"libraries": ["sys", "idlelib.pyshell.main", "os.path"], "function_names": [], "function_calls": ["main"], "class_names": [], "class_method_calls": ["sys.path", "os.path"]}, "htest.py": {"libraries": ["tkinter.ttk.Scrollbar", "tkinter", "textwrap", "importlib.import_module", "idlelib.pyshell"], "function_names": ["run_test", "run", "close", "next_test"], "function_calls": ["len", "getattr", "run", "globals", "Scrollbar", "callable_object", "next_test", "import_module", "print"], "class_names": [], "class_method_calls": ["text.configure", "text.config", "tk.Button", "test.__name__", "scrollbar.set", "root.mainloop", "text.insert", "root.destroy", "text.delete", "root.title", "tk.StringVar", "text.yview", "next_button.pack_forget", "root.cget", "tk.Text", "k.endswith", "test_name.set", "next_button.pack", "tk.Frame", "next_button.focus_set", "tk.NoDefaultRoot", "root.bind", "textwrap.dedent", "frameLabel.pack", "test_list.append", "test_list.pop", "scrollbar.pack", "widget.result", "tk.Tk", "text.pack", "button.pack", "root.resizable"]}, "mock_idle.py": {"libraries": ["idlelib.idle_test.mock_tk.Text"], "function_names": ["__call__", "__init__", "get_selection_indices", "undo_block_stop", "undo_block_start"], "function_calls": ["isinstance", "Text", "UndoDelegator"], "class_names": ["Editor", "Func", "UndoDelegator"], "class_method_calls": ["self.return_self", "self.result", "self.kwds", "self.args", "self.text", "self.undo", "self.called"]}, "mock_tk.py": {"libraries": ["_tkinter.TclError", "re"], "function_names": ["scan_mark", "index", "scan_dragto", "see", "mark_unset", "mark_set", "_decode", "get", "set", "__call__", "__init__", "_endex", "insert", "delete", "tag_remove", "compare", "focus_set", "bind"], "function_calls": ["Mbox_func", "isinstance", "len", "str", "int", "TclError", "range"], "class_names": ["Mbox_func", "Entry", "Event", "Text", "Var", "Mbox"], "class_method_calls": ["self.result", "self.__dict__", "self.value", "index.split", "index.lower", "self._endex", "re.A", "self.name", "self.title", "self.message", "re.fullmatch", "self.args", "self.data", "chars.splitlines", "lines.append", "char.endswith", "self.master", "self.kwds", "self._decode", "chars.append", "m.group"]}, "template.py": {"libraries": ["unittest", "test.support.requires", "tkinter.Tk", "idlelib.zzdummy"], "function_names": ["setUpClass", "tearDownClass", "test_init"], "function_calls": ["requires", "Tk"], "class_names": ["Test"], "class_method_calls": ["unittest.TestCase", "self.assertTrue", "unittest.main", "cls.root"]}, "test_autocomplete.py": {"libraries": ["unittest", "idlelib.idle_test.mock_idle.Func", "idlelib.autocomplete_w", "idlelib.idle_test.mock_tk.Event", "test.support.requires", "tkinter.Text", "__main__", "os", "idlelib.autocomplete", "unittest.mock.patch", "tkinter.Tk", "unittest.mock.Mock"], "function_names": ["setUp", "test_oc_no_list", "test_init", "test_delayed_open_completions", "test_make_autocomplete_window", "__init__", "test_force_open_completions_event", "setUpClass", "test_open_completions", "tearDownClass", "test_oc_cancel_comment", "test_get_entity", "test_open_completions_none", "_listdir", "test_remove_autocomplete_window", "make_acw", "test_autocomplete_event", "test_try_open_completions_event", "test_fetch_completions"], "function_calls": ["trycompletions", "Tk", "none", "len", "any", "sorted", "Event", "Mock", "all", "dir", "Text", "Func", "DummyEditwin", "filter", "requires", "Equal", "hasattr"], "class_names": ["AutoCompleteTest", "dummy_acw", "DummyEditwin"], "class_method_calls": ["self.indentwidth", "self.assertIsInstance", "self.assertLess", "__main__.__file__", "acp._remove_autocomplete_window", "acp.force_open_completions_event", "open_c.args", "acw.AutoCompleteWindow", "self.assertEqual", "after.called", "self.assertNotEqual", "cls.editor", "text.insert", "self.dummy_acw", "open_c.called", "patch.dict", "self.assertIn", "self.root", "acp.popupwait", "patch.object", "cls.root", "ac.ATTRS", "ac.AutoComplete", "self.assertNotIn", "acp._delayed_completion_index", "acp.autocompletewindow", "b.index", "fetch.called", "ev.mc_state", "ac.FORCE", "self.assertRaises", "self.tabwidth", "m.hide_window", "cls.text", "acp.fetch_completions", "self.autocomplete", "acp._make_autocomplete_window", "ac.TAB", "acp.text", "self.text", "text.index", "ac.TRY_A", "ac.TRY_F", "ac.__file__", "acp.autocomplete_event", "self.assertIsNone", "acp.try_open_completions_event", "unittest.main", "after.result", "mock._private", "acp.open_completions", "after.args", "open_c.result", "acp._delayed_open_completions", "mock.is_active", "acp.get_entity", "self.prompt_last_line", "x.startswith", "self.editor", "ac.FILES", "self.assertTrue", "cancel.args", "unittest.TestCase", "self.assertFalse", "mock.complete", "acp._delayed_completion_id"]}, "test_autocomplete_w.py": {"libraries": ["unittest", "idlelib.autocomplete_w", "test.support.requires", "tkinter.Text", "tkinter.Tk"], "function_names": ["setUpClass", "tearDownClass", "test_init"], "function_calls": ["requires", "Tk", "Text"], "class_names": ["AutoCompleteWindowTest"], "class_method_calls": ["self.acw", "cls.acw", "cls.text", "acw.AutoCompleteWindow", "self.text", "cls.root", "self.assertEqual", "unittest.TestCase", "unittest.main"]}, "test_autoexpand.py": {"libraries": ["unittest", "idlelib.autoexpand.AutoExpand", "test.support.requires", "tkinter.Text", "tkinter.Tk"], "function_names": ["setUpClass", "test_both_before_after", "test_before_only", "test_after_only", "test_get_prevword", "__init__", "tearDownClass", "test_other_expand_cases", "tearDown"], "function_calls": ["Tk", "DummyEditwin", "equal", "Text", "expand", "AutoExpand", "previous", "requires", "hasattr"], "class_names": ["AutoExpandTest", "DummyEditwin"], "class_method_calls": ["cls.auto_expand", "text.mark_set", "text.delete", "cls.text", "cls.tk", "self.text", "self.assertEqual", "self.auto_expand", "self.assertNotEqual", "unittest.TestCase", "text.insert", "unittest.main"]}, "test_browser.py": {"libraries": ["unittest", "tkinter.Tk", "os.path", "test.support.requires", "collections.deque", "unittest.mock", "idlelib.tree.TreeNode", "pyclbr", "idlelib.idle_test.mock_idle.Func", "idlelib.browser"], "function_names": ["test_transform_node_children", "test_geticonname", "test_getsublist", "setUpClass", "test_nested", "test_rootnode", "test_close", "test_init", "test_listchildren", "test_ondoubleclick", "tearDownClass", "test_gettext", "test_isexpandable", "test_transform_module_children", "test_settitle"], "function_calls": ["eq", "list", "Tk", "len", "transform", "Func", "deque", "requires", "CBT"], "class_names": ["ChildBrowserTreeItemTest", "NestedChildrenTest", "ModuleBrowserTest", "ModuleBrowserTreeItemTest", "TransformChildrenTest"], "class_method_calls": ["self.assertIsInstance", "cb.IsExpandable", "mb.path", "self.assertIsNotNone", "fopen.assert_not_called", "browser.ModuleBrowserTreeItem", "cls.cbt_C1", "fopen.called_with", "queue.extend", "self.cbt_f1", "mb._nest_function", "self.assertEqual", "pyclbr._modules", "mbt.listchildren", "actual_names.append", "f0.children", "fopen.assert_called", "browser.file_open", "goto.assert_called", "self.assertIs", "mb.Class", "mock.Mock", "queue.popleft", "self.assertIn", "cls.mbt", "cls.root", "cb.GetSubList", "mb.Function", "self.mb", "browser.transform_children", "mb.close", "cb.name", "browser.pyclbr", "fopen.return_value", "mb.top", "cls.cbt_F1", "cb.GetText", "mbt.GetSubList", "C0.children", "mbt.OnDoubleClick", "sub1.name", "cb.GetIconName", "mock.patch", "unittest.main", "self.mbt", "sub0.name", "mb._nest_class", "cls.cbt_f1", "os.path", "mb.node", "goto.assert_called_with", "browser.ChildBrowserTreeItem", "browser.ModuleBrowser", "cls.mb", "self.assertTrue", "unittest.TestCase", "self.assertFalse", "mb.rootnode", "self.cbt_F1", "self.cbt_C1"]}, "test_calltip.py": {"libraries": ["unittest", "re", "types", "idlelib.idle_test.mock_tk.Text", "textwrap", "idlelib.calltip", "unittest.mock.Mock"], "function_names": ["t1", "parens", "__getattr__", "test_repeated_parens", "test_starred_parameter", "showtip", "setUp", "t4", "test_repeated_force", "cm", "test_methods", "test_comment_parens", "baz", "test_non_ascii_name", "test_bound_methods", "test_non_callables", "test_builtins", "test_no_docstring", "test_signature_wrap", "m1", "t5", "__call__", "__init__", "nd", "args", "remove_calltip_window", "force", "setUpClass", "test_multiline_docstring", "fetch_tip", "sm", "f", "test_properly_formated", "test_buggy_getattr_class", "foo", "comment", "t6", "t2", "test_docline_truncation", "bar", "test_bad_entity", "test_open_close", "test_invalid_method_get_spec", "test_good_entity", "test_functions", "_make_tk_calltip_window", "open_close", "m2", "t3", "test_metaclass_class", "tiptest"], "function_calls": ["CallA", "mock_Shell", "Mock", "TC", "Text", "C", "property", "Test", "Object", "NoCall", "mock_TipWindow", "WrappedCalltip", "testfunc", "SB", "CallB", "opentip", "map", "get_spec", "tiptest"], "class_names": ["CalltipTest", "Get_argspecTest", "CallA", "WrappedCalltip", "CallB", "mock_Shell", "C", "Test", "Type", "Object", "List", "NoCall", "Get_entityTest", "mock_TipWindow", "SB", "TC"], "class_method_calls": ["t3.tip", "self.indentwidth", "__call__.tip", "List.__doc__", "self.active_calltip", "text.tag_prevrange", "cls.ct", "TC.t1", "TC.t4", "self.assertEqual", "func.tip", "self.ct", "parenleft.split", "t4.tip", "textwrap.TextWrapper", "tc.t6", "t1.__doc__", "calltip.get_argspec", "self.assertIs", "tc.t1", "tc.t4", "calltip._invalid_method", "self.tip", "TC.t2", "types.MethodType", "TC.t3", "calltip.get_entity", "self.args", "t1.tip", "TC.__doc__", "calltip._MAX_LINES", "t6.tip", "List.append", "self.parencol", "list.__init__", "list.__new__", "self.tips_removed", "C.m1", "p.sub", "calltip._first_param", "calltip.Calltip", "t5.tip", "self.subTest", "self.parenline", "self.tabwidth", "meth.tip", "re.sub", "calltip._default_callable_argspec", "c.m1", "cls.text", "TC.t6", "self.text", "self.open_close", "calltip._MAX_COLS", "self.assertIsNone", "TC.t5", "unittest.main", "__init__.tip", "tc.__call__", "t2.tip", "list.append", "TC.sm", "re.compile", "TC.__call__", "self.prompt_last_line", "TC.nd", "f.__doc__", "tc.nd", "unittest.TestCase", "calltip._INDENT", "TC.cm"]}, "test_calltip_w.py": {"libraries": ["idlelib.calltip_w", "unittest", "test.support.requires", "tkinter.Text", "tkinter.Tk"], "function_names": ["setUpClass", "tearDownClass", "test_init"], "function_calls": ["requires", "Tk", "Text"], "class_names": ["CallTipWindowTest"], "class_method_calls": ["calltip_w.CalltipWindow", "cls.calltip", "cls.text", "self.text", "cls.root", "self.assertEqual", "unittest.TestCase", "self.calltip", "unittest.main"]}, "test_codecontext.py": {"libraries": ["unittest", "re", "tkinter.NSEW", "test.support.requires", "tkinter.Text", "idlelib.config", "tkinter.TclError", "unittest.mock", "idlelib.codecontext", "tkinter.Tk", "tkinter.Frame"], "function_names": ["setUp", "test_init", "getlineno", "mock_idleconf_GetFont", "mock_idleconf_GetHighlight", "test_del_with_timer", "test_get_line_info", "test_highlight_colors", "test_get_spaces_firstword", "test_timer_event", "__init__", "test_get_context", "test_jumptoline", "test_del", "setUpClass", "tearDownClass", "test_toggle_code_context_event", "update_menu_label", "tearDown", "assert_colors_are_equal", "test_reload", "test_font", "test_update_code_context"], "function_calls": ["eq", "Tk", "toggle", "gc", "str", "get", "Frame", "int", "gli", "assert_colors_are_equal", "Text", "dict", "DummyEditwin", "float", "requires", "orig_idleConf_GetHighlight", "jump"], "class_names": ["CodeContextTest", "HelperFunctionText", "DummyEditwin"], "class_method_calls": ["cls.frame", "self.assertIsNotNone", "frame.pack", "cc.update_code_context", "unittest.mock", "self.assertEqual", "root.withdraw", "self.assertNotEqual", "cls.editor", "text.insert", "ed.text", "cc.toggle_code_context_event", "cm.exception", "cc.editwin", "cc.update_font", "codecontext.get_line_info", "self.assertIn", "self.root", "codecontext.get_spaces_firstword", "self.addCleanup", "GetFont_patcher.stop", "cls.root", "GetHighlight_patcher.start", "cc.context", "self.label", "self.font_override", "mock_update.assert_called", "mock_update.assert_not_called", "self.assertRaises", "codecontext.idleConf", "cc.info", "cls.text", "self.highlight_cfg", "self.top", "self.text", "self.text_frame", "codecontext.CodeContext", "config.IdleUserConfParser", "GetFont_patcher.start", "text.grid", "self.assertIsNone", "mock.patch", "self.cc", "unittest.main", "cc.text", "cc.topvisible", "code_sample.splitlines", "cc.get_context", "re.compile", "GetHighlight_patcher.stop", "codecontext.INFINITY", "cc.update_highlight_colors", "self.editor", "cc.jumptoline", "unittest.TestCase", "cc.context_depth"]}, "test_colorizer.py": {"libraries": ["unittest", "test.support.requires", "functools.partial", "tkinter.Text", "idlelib.config", "idlelib.colorizer", "unittest.mock", "tkinter.Tk", "idlelib.percolator.Percolator"], "function_names": ["test_insert", "test_make_pat", "test_idprog", "setUp", "test_init", "test_delete", "test_setdelegate", "test_prog", "test_removecolors", "setUpModule", "test_LoadTagDefs", "test_toggle_colorize_event", "setUpClass", "test_recolorize", "tearDownClass", "tearDown", "test_notify_range", "test_recolorize_main", "tearDownModule", "test_any", "test_init_state", "test_config_colors", "test_color_config"], "function_calls": ["eq", "highlight", "Tk", "partial", "Percolator", "Text", "requires"], "class_names": ["ColorDelegatorInstantiationTest", "ColorDelegatorTest", "ColorConfigTest", "FunctionTest"], "class_method_calls": ["self.assertIsInstance", "mock_notify.assert_called_with", "idprog.match", "self.assertIsNotNone", "config.idleConf", "colorizer.prog", "text.get", "colorizer.any", "self.assertEqual", "root.withdraw", "self.assertNotEqual", "self.color", "mock_recmain.call_count", "colorizer.idprog", "text.tag_ranges", "text.insert", "color.notify_range", "mock_recmain.assert_not_called", "text.delete", "text.tag_remove", "text.tag_names", "self.assertIn", "self.root", "colorizer.ColorDelegator", "text.after_cancel", "cls.root", "m.end", "colorizer.color_config", "self.percolator", "self.subTest", "colorizer.idleConf", "text.tag_nextrange", "cls.text", "self.text", "cls.percolator", "color.toggle_colorize_event", "config.IdleUserConfParser", "color.recolorize_main", "self.assertIsNone", "colorizer.make_pat", "color.allow_colorizing", "mock.patch", "unittest.main", "text.tag_cget", "tag.lower", "prog.search", "mock_recmain.assert_called", "color.colorizing", "color.after_id", "color.stop_colorizing", "color.removecolors", "color.delegate", "self.assertTrue", "text.tag_add", "m.groupdict", "colorizer.Delegator", "unittest.TestCase", "self.assertFalse", "m.group", "color.tagdefs", "color.recolorize"]}, "test_config_key.py": {"libraries": ["unittest", "idlelib.idle_test.mock_idle.Func", "idlelib.idle_test.mock_tk.Mbox_func", "test.support.requires", "tkinter.TclError", "unittest.mock", "idlelib.config_key", "tkinter.Tk"], "function_names": ["test_build_key_string", "test_keys_no_modifier_ok", "setUp", "test_keys_dup", "test_bind_ok", "test_keys_shift_bad", "test_keys_no_modifier_bad", "test_translate_key", "test_get_modifiers", "__init__", "test_cancel", "test_final_key_selected", "set_modifiers_for_platform", "setUpClass", "test_ok_good", "stackorder", "test_ok_empty", "tearDownClass", "test_toggle_level", "test_bind_not_ok", "test_keys_no_ending"], "function_calls": ["Mbox_func", "gkd", "eq", "Tk", "tr", "super", "stackorder", "gm", "Func", "enumerate", "requires", "string"], "class_names": ["Validator", "Basic", "HelperTest", "ValidationTest", "ToggleLevelTest", "KeySelectionTest", "CancelTest", "list_keys_final"], "class_method_calls": ["self.modifier_label", "key.get", "self.assertEqual", "self.dialog", "config_key.GetKeysDialog", "dialog.key_string", "cls.dialog", "self.assertIn", "cls.Basic", "self.modifiers", "cls.root", "dialog.build_key_string", "dialog.final_key_selected", "child._name", "dialog.toggle_level", "self.subTest", "dialog.modifier_checkbuttons", "self.assertRaises", "config_key.translate_key", "dialog.get_modifiers", "dialog.advanced", "cls.Validator", "mock_modifiers.return_value", "self.assertGreater", "dialog.button_level", "self.list_keys_final", "dialog.frame", "mock.patch", "unittest.main", "dialog.list_keys_final", "self.assertTrue", "unittest.TestCase", "self.assertFalse"]}, "test_configdialog.py": {"libraries": ["unittest", "tkinter.Tk", "idlelib.configdialog.idleConf", "idlelib.configdialog", "test.support.requires", "idlelib.config", "idlelib.configdialog.changes", "tkinter.IntVar", "tkinter.BooleanVar", "unittest.mock", "tkinter.DISABLED", "tkinter.NORMAL", "idlelib.idle_test.mock_idle.Func", "idlelib.configdialog.tracers", "tkinter.StringVar"], "function_names": ["test_set_color_sample", "test_source_selected", "test_custom_name", "test_helplist_item_edit", "test_make_callback", "test_deactivate_current_config", "test_save_as_new_key_set", "click_it", "setUp", "test_click_apply", "test_click_ok", "test_fontlist_mouse", "test_init", "test_paint_theme_sample", "test_create_new_key_set_and_save_new_key_set", "test_parenmatch", "test_attach_detach", "test_load_tab_cfg", "test_save_as_new_theme", "test_delete_custom", "test_load_font_cfg", "tag_to_element", "test_builtin_name", "test_update_help_changes", "test_color", "test_set_samples", "test_create_new_and_save_new", "test_get_new_keys_name", "test_theme_source", "setUpModule", "test_clear", "test_keyset_source", "test_indent_scale", "test_context", "test_paragraph", "test_cursor_blink", "test_editor_size", "test_keybinding", "test_highlight_sample_double_click", "test_set_add_delete_state", "setUpClass", "test_startup", "test_get_color", "var_changed_boolean", "test_load_general_cfg", "test_set_highlight_target", "tearDownClass", "test_on_new_color_set", "test_set_theme_type", "test_autocomplete_wait", "test_load_keys_list", "activate_config_changes", "test_delete_custom_keys", "test_highlight_target_list_mouse", "test_get_new_keys", "tearDownModule", "test_helplist_item_add", "test_bold_toggle", "test_sizelist", "test_click_cancel", "test_fontlist_key", "test_click_help", "test_font_set", "test_load_theme_cfg", "test_highlight_target_text_mouse", "test_set_keys_type", "test_on_bindingslist_select", "test_helplist_item_remove", "var_changed_increment", "test_add", "test_set_color_sample_binding", "test_load_key_cfg", "test_autosave", "test_get_new_theme_name", "test_highlight_sample_b1_motion"], "function_calls": ["IntVar", "eq", "hs_tag", "Tk", "list", "click_it", "BooleanVar", "sad", "str", "range", "cb", "callable", "Func", "requires", "StringVar", "tag_to_element"], "class_names": ["ButtonTest", "VarTraceTest", "FontPageTest", "KeysPageTest", "GenPageTest", "IndentTest", "HighPageTest", "ConfigDialogTest"], "class_method_calls": ["cls.page", "page.set_color_sample", "hs.update_idletasks", "d.helplist_item_edit", "helplist.update", "configdialog.HelpSource", "page.builtin_name", "d.create_new", "self.assertEqual", "self.assertNotEqual", "idleConf.GetKeySet", "root.destroy", "d.theme_elements", "self.assertIs", "d.builtin_theme_on", "new_console.items", "b.get", "d.paren_style_type", "b.selection_anchor", "d.button_delete_custom", "d.set_highlight_target", "d.keybinding", "helplist.see", "root.update_idletasks", "self.tracers", "d.custom_keyset_on", "d.autosave", "d.get_new_theme_name", "hs.focus_force", "d.font_bold", "d.customlist", "dialog.buttons", "d.bindingslist", "deactivate.assert_called_once", "d.load_theme_cfg", "yesno.called", "d.font_name", "d.helplist_item_add", "tr.detach", "d.apply", "d.color", "d.win_width", "d.font_sample", "page.helplist", "changes.clear", "gks.result", "d.button_helplist_remove", "helplist.activate", "d.builtin_name", "d.on_new_color_set", "d.button_save_custom", "b.curselection", "idleConf.GetThemeDict", "self.assertTrue", "configdialog.colorchooser", "cls.bv", "self.assertCountEqual", "d.fg_bg_toggle", "iv.set", "tracers.detach", "d.var_changed_builtin_name", "gntn.result", "page.set_theme_type", "destroy.assert_called_once", "d.create_new_key_set", "cb.assert_called_with", "fontlist.focus_force", "iv.get", "d.bold_toggle", "d.win_width_int", "idleConf.CurrentTheme", "fontlist.event_generate", "changes.add_option", "tr.make_callback", "dialog.deactivate_current_config", "d.fg_on", "b.insert", "d.set_theme_type", "b.event_generate", "helplist.event_generate", "contents.endswith", "page.set_keys_type", "helplist.focus_force", "helplist.get", "d.load_font_cfg", "idleConf.SetOption", "page.set_samples", "mock.Mock", "gntn.called", "page.create_new", "d.theme_source", "d.bg_on", "self.assertNotIn", "sn.result", "page.user_helplist", "d.indent_scale", "d.activate_config_changes", "d.startup_editor_on", "cb.assert_called_once", "d.style", "hs.result", "d.button_save_custom_keys", "d.bell_on", "dialog.note", "d.theme_message", "d.get_new_keys_name", "helplist.bbox", "b.see", "h.insert", "d.highlight_target", "save_ext.assert_called_once", "down_font.lower", "page.load_keys_list", "hs.see", "helplist.insert", "hs.tag_ranges", "hs.dlineinfo", "d.button_set_color", "configdialog.ConfigDialog", "d.button_helplist_edit", "page.highlight_sample", "d.button_new_keys", "unittest.TestCase", "self.assertFalse", "dialog.highpage", "fontlist.activate", "d.startup_edit", "b.activate", "d.button_delete_custom_keys", "page.update", "d.targetlist", "self.page", "d.highlight_sample", "idleConf.CurrentKeys", "d.var_changed_custom_name", "view.kwds", "apply.assert_called_once", "d.fontlist", "tr.add", "dialog.genpage", "yesno.result", "d.set_color_sample", "scs.called", "d.deactivate_current_config", "fontlist.see", "dialog.fontpage", "hs.event_generate", "self.called", "d.set_add_delete_state", "self.iv", "d.buttons", "d.font_size", "idleConf.GetSectionList", "tracers.clear", "page.upc", "d.set", "unittest.main", "idleConf.GetFont", "self.var_changed_increment", "d.helplist_item_remove", "d.save_auto_on", "page.update_help_changes", "tr.attach", "page.set_add_delete_state", "d.set_samples", "b.focus_force", "fontlist.update", "page.paint_theme_sample", "b.bbox", "d.destroy", "gnkn.result", "fontlist.get", "tr.untraced", "d.load_keys_list", "dialog.keyspage", "tr.__init__", "up_font.lower", "d.builtinlist", "d.custom_name", "d.frame_color_set", "d.save_all_changed_extensions", "idleConf.default_keys", "configdialog.GetKeysDialog", "tr.clear", "d.custom_theme_on", "self.bv", "gnkn.called", "cls.tracers", "d.win_height", "d.askyesno", "chooser.result", "self.assertIn", "d.load_key_cfg", "self.var_changed_boolean", "d.space_num", "d.startup_shell_on", "dialog.activate_config_changes", "page.set", "hs.tag_names", "page.theme_source", "idleConf.GetHighlight", "d.paint_theme_sample", "d.helplist", "h.delete", "cls.iv", "activate.assert_called_once", "b.delete", "d.win_height_int", "contents.startswith", "d.load_general_cfg", "d.save_ask_on", "idleConf.userCfg", "page.set_highlight_target", "d.user_helplist", "d.paren_flash_time", "d.upc", "d.set_keys_type", "d.update_help_changes", "config.IdleUserConfParser", "configdialog.SectionName", "tracers.attach", "d.builtin_keyset_on", "d.keyset_source", "configdialog.VarTrace", "mock.patch", "h.selection_set", "d.keys_message", "b.selection_set", "tr.traced", "d.sizelist", "gkd.result", "b.update", "fontlist.bbox", "self.skipTest", "hs.bbox", "d.load_tab_cfg", "font1.lower"]}, "test_debugger.py": {"libraries": ["idlelib.debugger", "test.support.requires", "tkinter.Tk", "unittest"], "function_names": ["setUpClass", "tearDownClass", "test_init"], "function_calls": ["requires", "Tk"], "class_names": ["NameSpaceTest"], "class_method_calls": ["self.root", "cls.root", "debugger.NamespaceViewer", "unittest.TestCase", "unittest.main"]}, "test_debugger_r.py": {"libraries": ["unittest", "test.support.requires", "tkinter.Tk", "idlelib.debugger_r"], "function_names": ["test_dict_item_noattr", "test_init", "__repr__"], "function_calls": ["BinData"], "class_names": ["IdbAdapterTest", "Test", "BinData"], "class_method_calls": ["self.length", "idb.dict_item", "debugger_r.IdbAdapter", "self.assertTrue", "unittest.TestCase", "unittest.main", "debugger_r.dicttable"]}, "test_debugobj.py": {"libraries": ["idlelib.debugobj", "unittest"], "function_names": ["test_keys", "test_isexpandable", "test_init"], "function_calls": ["list"], "class_names": ["ObjectTreeItemTest", "DictTreeItemTest", "AtomicObjectTreeItemTest", "SequenceTreeItemTest", "ClassTreeItemTest"], "class_method_calls": ["debugobj.DictTreeItem", "ti.setfunction", "ti.IsExpandable", "debugobj.SequenceTreeItem", "self.assertEqual", "ti.labeltext", "debugobj.ObjectTreeItem", "debugobj.ClassTreeItem", "self.assertTrue", "ti.keys", "unittest.TestCase", "self.assertFalse", "debugobj.AtomicObjectTreeItem", "unittest.main", "ti.object"]}, "test_debugobj_r.py": {"libraries": ["idlelib.debugobj_r", "unittest"], "function_names": ["test_getattr", "test_init"], "function_calls": [], "class_names": ["WrappedObjectTreeItemTest", "StubObjectTreeItemTest"], "class_method_calls": ["debugobj_r.StubObjectTreeItem", "ti.append", "list.append", "ti.sockio", "self.assertEqual", "debugobj_r.WrappedObjectTreeItem", "unittest.TestCase", "ti.oid", "unittest.main"]}, "test_delegator.py": {"libraries": ["unittest", "idlelib.delegator.Delegator"], "function_names": ["test_mydel"], "function_calls": ["Delegator", "set"], "class_names": ["DelegatorTest"], "class_method_calls": ["self.assertIs", "mydel.__dict__", "mydel.delegate", "mydel.setdelegate", "mydel.bit_length", "mydel.__getattr__", "int.bit_length", "mydel.numerator", "self.assertEqual", "mydel._Delegator__cache", "self.assertNotIn", "unittest.TestCase", "unittest.main", "self.assertRaises"]}, "test_editmenu.py": {"libraries": ["unittest", "tkinter", "test.support.requires", "tkinter.ttk", "idlelib.pyshell"], "function_names": ["setUpClass", "test_paste_entry", "tearDownClass", "test_paste_spin", "test_paste_text"], "function_calls": ["requires"], "class_names": ["PasteTest"], "class_method_calls": ["cls.entry", "text.get", "spin.event_generate", "self.assertEqual", "cls.spin", "text.insert", "entry.get", "entry.insert", "text.delete", "self.entry", "cls.root", "entry.delete", "tk.Entry", "self.subTest", "entry.event_generate", "root.clipboard_clear", "text.event_generate", "tk.Text", "root.clipboard_append", "cls.text", "tk.Spinbox", "cls.tentry", "self.text", "pyshell.fix_x11_paste", "ttk.Entry", "spin.selection", "spin.delete", "unittest.main", "self.tentry", "spin.insert", "entry.select_range", "tk.Tk", "self.spin", "unittest.TestCase", "spin.get"]}, "test_editor.py": {"libraries": ["unittest", "idlelib.idle_test.mock_idle.Func", "test.support.requires", "idlelib.editor", "tkinter.Tk", "collections.namedtuple"], "function_names": ["test_rclick", "setUpClass", "test_tabwidth_4", "tk_popup", "test_init", "insert", "tearDownClass", "test_empty_lines", "test_indent_and_newline_event", "test_tabwidth_8"], "function_calls": ["eq", "Tk", "nl", "Editor", "insert", "get", "TestInfo", "namedtuple", "requires"], "class_names": ["EditorWindowTest", "RMenuTest", "TestGetLineIndent", "DummyRMenu", "IndentAndNewlineTest"], "class_method_calls": ["text.mark_set", "text.get", "self.assertEqual", "w.text", "text.insert", "test.text", "editor.EditorWindow", "text.delete", "cls.window", "self.root", "cls.root", "self.window", "self.subTest", "e._close", "w.prompt_last_line", "editor.get_line_indent", "unittest.main", "test.mark", "e.root", "test.expected", "text.tag_add", "w.newline_and_indent_event", "text.update", "test.label", "unittest.TestCase"]}, "test_format.py": {"libraries": ["unittest", "test.support.TestFailed", "test.support", "sys", "_testcapi.INT_MAX", "locale", "test.support.verbose"], "function_names": ["test_precision", "test_str_format", "test_precision_c_limits", "test_exc_common", "testcommon", "__bytes__", "test_bytes_and_bytearray_format", "testformat", "test_nul", "test_optimisations", "test_exc", "test_common_format", "test_non_ascii", "test_locale"], "function_calls": ["format", "bytearray", "isinstance", "len", "testcommon", "test_exc_common", "FakeBytes", "str", "tuple", "TestFailed", "complex", "memoryview", "testformat", "repr", "float", "test_exc", "AssertionError", "print"], "class_names": ["FakeBytes", "FormatTest"], "class_method_calls": ["locale.LC_ALL", "self.assertEqual", "text.replace", "self.assertIs", "formatstr.encode", "output.encode", "sys.maxunicode", "self.assertIn", "locale.setlocale", "locale.Error", "self.assertRaises", "support.MAX_Py_ssize_t", "text.format", "unittest.main", "sys.maxsize", "support.cpython_only", "self.skipTest", "unittest.TestCase", "locale.localeconv"]}, "test_grep.py": {"libraries": ["unittest", "idlelib.grep", "re", "idlelib.idle_test.mock_tk.Var", "test.support.captured_stdout", "os"], "function_names": ["close", "setUpClass", "test_found", "test_recurse", "test_unfound", "tearDownClass", "test_base", "getpat", "test_invaliddir", "test_curdir", "report"], "function_calls": ["list", "len", "Dummy_grep", "Dummy_searchengine", "Var", "captured_stdout", "ff"], "class_names": ["Default_commandTest", "Dummy_grep", "Dummy_searchengine", "Grep_itTest", "FindfilesTest"], "class_method_calls": ["self._pat", "self.report", "lines.pop", "self.assertEqual", "self.realpath", "self.assertNotEqual", "os.getcwd", "os.chdir", "self.assertIn", "self.assertNotIn", "cls.realpath", "_grep.engine", "s.getvalue", "os.curdir", "unittest.TestCase", "self.path", "self.assertGreater", "unittest.main", "_grep.grep_it", "grep.GrepDialog", "os.path", "re.compile", "self.assertTrue", "grep.findfiles", "cls.path"]}, "test_help.py": {"libraries": ["unittest", "test.support.requires", "idlelib.help", "os.path.join", "os.path.abspath", "tkinter.Tk", "os.path.dirname"], "function_names": ["setUpClass", "tearDownClass", "test_line1"], "function_calls": ["Tk", "join", "dirname", "abspath", "requires"], "class_names": ["HelpFrameTest"], "class_method_calls": ["self.frame", "help.HelpFrame", "cls.frame", "text.get", "cls.root", "self.assertEqual", "root.withdraw", "unittest.TestCase", "unittest.main"]}, "test_help_about.py": {"libraries": ["unittest", "idlelib.idle_test.mock_idle.Func", "idlelib.idle_test.mock_tk.Mbox_func", "platform.python_version", "os.path", "test.support.findfile", "idlelib.help_about", "test.support.requires", "idlelib.textview", "tkinter.TclError", "tkinter.Tk"], "function_names": ["test_build_bits", "test_file_display", "test_file_buttons", "setUpClass", "test_close", "tearDownClass", "test_dialog_title", "test_dialog_logo", "test_printer_buttons"], "function_calls": ["Mbox_func", "python_version", "Tk", "About", "len", "findfile", "handler", "get", "Func", "open", "requires", "Dummy_about_dialog"], "class_names": ["CloseTest", "LiveDialogTest", "DefaultTitleTest", "Dummy_about_dialog", "DisplayFileTest"], "class_method_calls": ["dialog.py_license", "cls.orig_error", "cls.orig_view", "About.show_idle_news", "self.assertEqual", "textview.showerror", "self.dialog", "printer._Printer__lines", "cls.dialog", "self.assertIn", "self.fail", "f.readline", "printer._Printer__setup", "cls.root", "textview.view_text", "self.error", "About.display_file_text", "cls.view", "self.subTest", "self.assertRaises", "button.invoke", "About.show_idle_credits", "dialog.py_copyright", "self.view", "About.show_readme", "unittest.main", "dialog._current_textview", "os.path", "help_about.build_bits", "cls.error", "unittest.TestCase", "dialog.py_credits", "help_about.AboutDialog"]}, "test_history.py": {"libraries": ["unittest", "idlelib.history.History", "tkinter", "idlelib.idle_test.mock_tk.Text", "idlelib.config.idleConf", "test.support.requires", "tkinter.Text"], "function_names": ["__getattr__", "test_fetch_prev_prefix", "setUp", "test_init", "test_store_short", "fetch_test", "test_store_dup", "__init__", "test_fetch_next_noncyclic", "test_history_prev_next", "test_fetch_next_cyclic", "test_store_reset", "setUpClass", "bell", "test_fetch_edit", "tearDownClass", "test_fetch_next_prefix", "tearDown", "test_fetch_prev_cyclic", "test_fetch_prev_noncyclic", "test_fetch_cursor_move"], "function_calls": ["tkText", "test", "Equal", "getattr", "TextWrapper", "requires", "mkText", "History"], "class_names": ["StoreTest", "TextWrapper", "FetchTest"], "class_method_calls": ["text.mark_set", "text.mark_gravity", "cls.history", "History.pointer", "self._bell", "self.assertEqual", "History.prefix", "text.insert", "self.assertIs", "self.history", "self.root", "cls.root", "idleConf.GetOption", "cls.text", "self.text", "self.fetch_test", "self.assertIsNone", "unittest.main", "tk.Tk", "unittest.TestCase", "History.fetch"]}, "test_hyperparser.py": {"libraries": ["unittest", "test.support.requires", "tkinter.Text", "idlelib.editor.EditorWindow", "idlelib.hyperparser.HyperParser", "tkinter.Tk"], "function_names": ["test_get_surrounding_bracket", "setUpClass", "setUp", "test_is_in_code", "test_eat_identifier_various_lengths", "without_mustclose", "test_init", "test_eat_identifier", "__init__", "tearDownClass", "with_mustclose", "is_valid_id", "test_get_expression", "tearDown", "test_is_in_string", "get_parser"], "function_calls": ["Tk", "len", "without_mustclose", "str", "get", "HyperParser", "with_mustclose", "eat_id", "Text", "is_valid_id", "DummyEditwin", "Exception", "requires", "range"], "class_names": ["HyperParserTest", "DummyEditwin"], "class_method_calls": ["self.indentwidth", "p.get_expression", "self.code", "cls.editwin", "self.assertEqual", "EditorWindow._build_char_in_string_func", "self.assertTupleEqual", "self.assertIn", "p.is_in_string", "self.get_parser", "cls.root", "self.assertRaises", "self.tabwidth", "self.editwin", "cls.text", "HyperParser._eat_identifier", "self.text", "p.is_in_code", "self.assertIsNone", "EditorWindow.is_char_in_string", "unittest.main", "self.prompt_last_line", "self.assertTrue", "p.rawtext", "parser.get_surrounding_brackets", "unittest.TestCase", "self.assertFalse", "self.num_context_lines", "ve.exception"]}, "test_iomenu.py": {"libraries": ["unittest", "idlelib.iomenu", "test.support.requires", "idlelib.editor.EditorWindow", "tkinter.Tk"], "function_names": ["setUpClass", "tearDownClass", "test_init", "test_fixnewlines_end"], "function_calls": ["eq", "EditorWindow", "Tk", "fix", "requires"], "class_names": ["IOBindingTest"], "class_method_calls": ["self.assertIs", "self.editwin", "io.eol_convention", "iomenu.IOBinding", "text.get", "cls.io", "cls.root", "cls.editwin", "self.assertEqual", "io.editwin", "self.io", "io.fixnewlines", "unittest.TestCase", "text.insert", "unittest.main"]}, "test_macosx.py": {"libraries": ["unittest", "tkinter", "test.support.requires", "unittest.mock", "idlelib.filelist.FileList", "idlelib.macosx"], "function_names": ["setUpClass", "test_isfuncs", "test_setupapp", "test_is_calls_init", "test_init_sets_tktype", "tearDownClass", "cmd"], "function_calls": ["isinstance", "FileList", "type", "func", "requires"], "class_names": ["InitTktypeTest", "SetupTest", "IsTypeTkTest"], "class_method_calls": ["mockinit.called", "cls.orig_platform", "mockinit.reset_mock", "self.assertIn", "macosx._init_tk_type", "self.root", "cls.root", "self.subTest", "macosx.isCarbonTk", "macosx._tk_type", "macosx.isXQuartz", "unittest.TestCase", "macosx.platform", "overrideRootMenu.called", "macosx.setupApp", "mock.patch", "unittest.main", "macosx.isCocoaTk", "self.isfuncs", "overrideRootMenu.reset_mock", "tk.Tk", "self.assertTrue", "macosx.isAquaTk", "self.assertFalse"]}, "test_mainmenu.py": {"libraries": ["unittest", "re", "idlelib.mainmenu"], "function_names": ["test_tcl_indexes", "test_default_keydefs", "test_menudefs"], "function_calls": ["len", "any"], "class_names": ["MainMenuTest"], "class_method_calls": ["self.assertEqual", "mainmenu.default_keydefs", "self.assertTrue", "unittest.TestCase", "self.assertGreaterEqual", "mainmenu.menudefs", "unittest.main", "self.subTest", "re.search"]}, "test_multicall.py": {"libraries": ["unittest", "test.support.requires", "tkinter.Text", "idlelib.multicall", "tkinter.Tk"], "function_names": ["test_creator", "setUpClass", "test_init", "test_yview", "tearDownClass"], "function_calls": ["requires", "Tk", "issubclass"], "class_names": ["MultiCallTest"], "class_method_calls": ["self.assertIs", "self.assertIsInstance", "mc.yview", "cls.mc", "multicall._multicall_dict", "self.mc", "self.root", "cls.root", "mctext.yview", "multicall.MultiCallCreator", "self.assertTrue", "mctext._MultiCall__binders", "Text.yview", "unittest.TestCase", "unittest.main"]}, "test_outwin.py": {"libraries": ["unittest", "idlelib.idle_test.mock_idle.Func", "idlelib.idle_test.mock_tk.Mbox_func", "idlelib.outwin", "tkinter.Text", "test.support.requires", "unittest.mock", "tkinter.Tk"], "function_names": ["test_window_title", "setUpClass", "setUp", "test_ispythonsource", "tearDownClass", "test_maybesave", "test_write", "test_writelines", "test_file_line_helper", "test_compile_progs", "test_goto_file_line"], "function_calls": ["Mbox_func", "eq", "write", "Tk", "writelines", "len", "str", "delete", "get", "zip", "Text", "Func", "requires", "flh"], "class_names": ["OutputWindowTest", "ModuleFunctionTest"], "class_method_calls": ["self.assertEqual", "root.withdraw", "test_text.rstrip", "w.text", "w.write", "w.goto_file_line", "showerror.title", "mock.Mock", "cls.window", "text.delete", "w.ispythonsource", "w.showerror", "w.get_saved", "cls.root", "w.flist", "w.maybesave", "self.window", "outwin.file_line_progs", "cls.text", "test_text2.rstrip", "self.text", "gfl.called", "self.assertIsNone", "outwin.OutputWindow", "mock.patch", "unittest.main", "outwin.compile_progs", "gfl.args", "regex.pattern", "outwin.file_line_helper", "mock_open.assert_called_with", "outwin.file_line_pats", "unittest.TestCase", "self.assertFalse"]}, "test_parenmatch.py": {"libraries": ["unittest", "idlelib.parenmatch.ParenMatch", "test.support.requires", "tkinter.Text", "tkinter.Tk", "unittest.mock.Mock"], "function_names": ["get_parenmatch", "test_paren_styles", "test_handle_restore_timer", "setUpClass", "__init__", "tearDownClass", "test_paren_corner", "tearDown"], "function_calls": ["Tk", "ParenMatch", "Mock", "Text", "DummyEditwin", "requires"], "class_names": ["ParenMatchTest", "DummyEditwin"], "class_method_calls": ["self.indentwidth", "pm.flash_paren_event", "text.tag_prevrange", "cls.editwin", "self.assertEqual", "text.event_info", "text.insert", "pm.paren_closed_event", "pm.restore_event", "text.delete", "self.assertTupleEqual", "self.assertIn", "cls.root", "self.assertNotIn", "self.get_parenmatch", "self.subTest", "self.tabwidth", "self.editwin", "text.tag_nextrange", "cls.text", "self.text", "pm.STYLE", "unittest.main", "pm.handle_restore_timer", "pm.bell", "self.prompt_last_line", "self.assertTrue", "unittest.TestCase", "self.assertFalse"]}, "test_pathbrowser.py": {"libraries": ["unittest", "idlelib.idle_test.mock_idle.Func", "os.path", "test.support.requires", "sys", "idlelib.tree.TreeNode", "idlelib.browser", "idlelib", "tkinter.Tk", "pyclbr", "idlelib.pathbrowser"], "function_names": ["test_PathBrowserTreeItem", "setUpClass", "test_rootnode", "test_close", "test_init", "tearDownClass", "test_DirBrowserTreeItem", "test_settitle"], "function_calls": ["eq", "len", "Tk", "type", "Func", "requires"], "class_names": ["DirBrowserTreeItemTest", "PathBrowserTreeItemTest", "PathBrowserTest"], "class_method_calls": ["pb.close", "self.assertIsInstance", "self.assertIsNotNone", "pb.rootnode", "d.GetSubList", "p.GetText", "self.assertEqual", "pyclbr._modules", "pb.top", "cls.pb", "browser.file_open", "pathbrowser.PathBrowser", "idlelib.__file__", "pathbrowser.PathBrowserTreeItem", "self.root", "cls.root", "pb.node", "d.GetText", "pathbrowser.DirBrowserTreeItem", "d.ispackagedir", "unittest.main", "self.pb", "sys.path", "os.path", "pb.master", "p.GetSubList", "self.assertTrue", "unittest.TestCase"]}, "test_percolator.py": {"libraries": ["unittest", "test.support.requires", "tkinter.Text", "tkinter.END", "idlelib.percolator.Delegator", "tkinter.Tk", "idlelib.percolator.Percolator"], "function_names": ["test_modify_insert", "test_insert", "test_removefilter", "setUpClass", "setUp", "uppercase_insert", "dont_insert", "delete", "insert", "tearDown", "__init__", "tearDownClass", "test_modify_chain_insert", "test_insertfilter", "test_dont_insert", "test_without_filter", "test_delete", "lowercase_insert"], "function_calls": ["Tk", "MyFilter", "Percolator", "Text", "requires"], "class_names": ["MyFilter", "PercolatorTest"], "class_method_calls": ["self.assertIsNotNone", "self.assertEqual", "chars.lower", "chars.upper", "Delegator.__init__", "self.insert_called_with", "self.delete_called_with", "self.assertTupleEqual", "self.filter_one", "cls.root", "self.filter_two", "self.percolator", "cls.text", "self.text", "self.assertIsNone", "unittest.main", "filter_three.delegate", "self.delegate", "unittest.TestCase"]}, "test_pyparse.py": {"libraries": ["unittest", "idlelib.pyparse", "collections.namedtuple"], "function_names": ["test_parsemap", "test_find_good_parse_start", "test_is_block_closer", "test_init", "test_study1", "test_get_last_stmt_bracketing", "test_get_num_lines_in_stmt", "test_compute_backslash_indent", "test_get_continuation_type", "setUpClass", "tearDownClass", "test_trans", "test_compute_bracket_indent", "test_get_base_indent_string", "test_set_lo", "test_is_block_opener", "char_in_string_false", "test_study2", "test_set_code"], "function_calls": ["setcode", "eq", "gettype", "getlines", "baseindent", "opener", "start", "TestInfo", "indent", "namedtuple", "closer", "ord", "study", "bracketing", "range"], "class_names": ["ParseMapTest", "PyParseTest"], "class_method_calls": ["test.start", "p.get_last_stmt_bracketing", "p.get_num_lines_in_stmt", "p.goodlines", "p.get_base_indent_string", "test.end", "self.assertEqual", "test.spaces", "p.is_block_opener", "p.set_code", "p.continuation", "test.indent", "p.is_block_closer", "p.compute_bracket_indent", "test.continuation", "test.bracketing", "cls.parser", "p.compute_backslash_indent", "p.study_level", "self.parser", "p.stmt_bracketing", "test.assert_", "test.goodlines", "test.lines", "test.lastch", "p.lastch", "self.subTest", "self.assertRaises", "p.find_good_parse_start", "p._study2", "test.bracket", "p.set_lo", "pyparse.trans", "self.assertIsNone", "p.stmt_end", "unittest.main", "pyparse.Parser", "test.string", "p.stmt_start", "p.lastopenbracketpos", "p._study1", "self.assertTrue", "p.code", "test.openbracket", "unittest.TestCase", "self.assertFalse", "p.get_continuation_type", "pyparse.ParseMap"]}, "test_pyshell.py": {"libraries": ["unittest", "test.support.requires", "tkinter.Tk", "idlelib.pyshell"], "function_names": ["setUpClass", "test_init", "test_restart_line_narrow", "tearDownClass", "test_restart_line_wide"], "function_calls": ["eq", "requires", "len", "Tk"], "class_names": ["PyShellFileListTest", "FunctionTest"], "class_method_calls": ["psfl.pyshell", "pyshell.PyShellEditorWindow", "pyshell.restart_line", "self.root", "psfl.EditorWindow", "cls.root", "self.assertEqual", "self.assertIsNone", "unittest.TestCase", "pyshell.PyShellFileList", "unittest.main", "self.subTest"]}, "test_query.py": {"libraries": ["unittest", "idlelib.query", "test.support.requires", "idlelib.idle_test.mock_tk.Var", "tkinter.END", "sys", "unittest.mock", "tkinter.Tk"], "function_names": ["setUp", "test_click_ok", "path_ok", "test_invalid_args", "test_bogus_goto", "cli_args_ok", "test_file_replaces_path", "test_good_module_name", "test_path_ok_web", "test_blank_module_name", "test_good_goto", "test_good_args", "__init__", "test_cancel", "test_used_section_name", "test_entry_ok_helpsource", "test_path_ok_file", "test_good_section_name", "test_click_args", "test_entry_ok_good", "test_entry_ok_customrun", "test_blank_args", "setUpClass", "test_ok_good", "test_entry_ok_blank", "test_click_help_source", "test_bad_goto", "tearDownClass", "test_ok_blank", "test_long_section_name", "test_c_source_name", "test_path_ok_bad", "test_blank_section_name", "test_click_cancel", "test_bogus_module_name", "item_ok", "showerror", "test_click_module_name", "test_click_blank", "destroy", "test_path_ok_blank", "test_click_section_name"], "function_calls": ["Tk", "requires", "Equal", "Var"], "class_names": ["SectionnameGuiTest", "Dummy_ModuleName", "GotoGuiTest", "GotoTest", "Dummy_Query", "HelpsourceGuiTest", "CustomRunEntryokTest", "QueryGuiTest", "SectionNameTest", "HelpsourceEntryokTest", "Dummy_CustomRun", "QueryTest", "ModulenameGuiTest", "HelpsourcePathokTest", "CustomRunCLIargsokTest", "Dummy_SectionName", "Dummy_HelpSource", "ModuleNameTest", "HelpsourceBrowsefileTest", "CustomRunGuiTest"], "class_method_calls": ["dialog.used_names", "dialog.ok", "self.result", "sys.platform", "self.destroyed", "self.assertEqual", "root.withdraw", "cls.orig_platform", "self.dialog", "dialog.text0", "self.Dummy_CustomRun", "self.cli_args", "root.destroy", "self.Dummy_ModuleName", "dialog.button_ok", "dialog.entry_ok", "self.name", "cls.dialog", "mock.Mock", "self.Dummy_HelpSource", "self.assertIn", "query.SectionName", "dialog.cancel", "dialog.browse_file", "self.path_error", "dialog.result", "self.entry", "cls.root", "self.Dummy_SectionName", "self.Dummy_Query", "dialog.path", "dialog.entry", "dialog.restartvar", "self.entry_error", "dialog.button_cancel", "dialog.destroy", "self.subTest", "query.Goto", "query.HelpSource", "dialog.path_error", "dialog.cli_args", "self.path", "dialog.cli_args_ok", "unittest.main", "dialog.entry_error", "dialog.askfilename", "query.platform", "query.CustomRun", "dialog.destroyed", "dialog.name", "query.ModuleName", "dialog.pathvar", "query.Query", "self.assertTrue", "unittest.TestCase", "self.assertFalse", "dialog.path_ok"]}, "test_redirector.py": {"libraries": ["unittest", "idlelib.idle_test.mock_idle.Func", "idlelib.redirector.WidgetRedirector", "test.support.requires", "tkinter.Text", "tkinter.TclError", "tkinter.Tk"], "function_names": ["test_unregister_no_attribute", "test_register", "test_original_command", "setUpClass", "setUp", "test_unregister", "test_close", "test_init", "test_dispatch_intercept", "test_dispatch_error", "tearDownClass", "test_repr", "test_command_dispatch", "test_dispatch_bypass", "tearDown"], "function_calls": ["Tk", "WidgetRedirector", "TclError", "Text", "Func", "repr", "requires", "hasattr"], "class_names": ["InitCloseTest", "WidgetRedirectorTest"], "class_method_calls": ["self.assertEqual", "redir.register", "self.func", "self.assertIn", "self.root", "redir.widget", "cls.root", "self.assertNotIn", "self.assertRaises", "cls.text", "redir._operations", "redir.close", "self.text", "self.assertIsNone", "unittest.main", "redir.tk", "self.assertTrue", "self.redir", "unittest.TestCase", "self.orig_insert", "self.assertFalse"]}, "test_replace.py": {"libraries": ["unittest", "idlelib.searchengine", "test.support.requires", "tkinter.Text", "idlelib.replace.ReplaceDialog", "idlelib.idle_test.mock_tk.Mbox", "tkinter.Tk", "unittest.mock.Mock"], "function_names": ["test_default_command", "test_replace_wrap_around", "setUpClass", "setUp", "test_replace_match_case", "test_replace_simple", "tearDownClass", "test_replace_all", "test_replace_whole_word", "tearDown", "test_replace_regex", "test_replace_backwards"], "function_calls": ["Tk", "ReplaceDialog", "replace_find", "replace", "Mock", "equal", "Text", "requires", "replace_all"], "class_names": ["ReplaceDialogTest"], "class_method_calls": ["rv.set", "text.mark_set", "text.get", "self.engine", "self.assertEqual", "self.dialog", "text.insert", "Mbox.showerror", "showerror.title", "cls.dialog", "self.assertIn", "cls.root", "self.assertNotIn", "se.messagebox", "pv.get", "cls.text", "self.text", "cls.engine", "unittest.main", "showerror.message", "pv.set", "unittest.TestCase", "se.SearchEngine"]}, "test_rpc.py": {"libraries": ["unittest", "idlelib.rpc"], "function_names": ["test_dumps", "test_code_pickler", "f", "test_pickle_unpickle"], "function_calls": ["type"], "class_names": ["CodePicklerTest"], "class_method_calls": ["self.assertIs", "rpc.unpickle_code", "rpc.CodePickler", "rpc.pickle_code", "f.__code__", "self.assertIn", "code.co_names", "rpc.dumps", "self.assertEqual", "unittest.TestCase", "unittest.main"]}, "test_run.py": {"libraries": ["unittest", "io", "idlelib.run", "sys", "unittest.mock", "test.support.captured_output", "idlelib.idle_test.mock_idle.Func", "idlelib", "test.support.captured_stderr"], "function_names": ["push", "__eq__", "test_print_exception_unhashable", "test_readlines", "test_fatal_error", "test_fixdoc", "test_close", "__init__", "__getslice__", "__str__", "close", "__len__", "test_write_stderr_nonencodable", "setUpClass", "test_misc", "__iter__", "test_default_recursion_limit_preserved", "tearDownClass", "test_write", "__unicode__", "func", "test_writelines", "test_bad_setrecursionlimit_calls", "test_roundtrip", "write", "test_readline", "readline", "reset", "test_unsupported", "test_exceptions", "test_read", "__getitem__"], "function_calls": ["captured_stderr", "eq", "list", "len", "isinstance", "MockShell", "iter", "UnhashableException", "type", "Func", "captured_output", "S"], "class_names": ["PrintExceptionTest", "MockShell", "RecursionLimitTest", "StdOutputFilesTest", "UnhashableException", "HandleErrorTest", "ExecRuncodeTest", "StdInputFilesTest", "S"], "class_method_calls": ["self.assertIsInstance", "cls.prt", "err.getvalue", "cls.ex", "run.exit_now", "run.print_exception", "shell.push", "f.readable", "self.written", "self.assertEqual", "shell.reset", "sys.setrecursionlimit", "f.name", "f.newlines", "run.fixdoc", "f.errors", "f.writelines", "f.isatty", "ct.side_effect", "sys.__excepthook__", "self.assertIs", "f.write", "mock.Mock", "self.assertIn", "f.encoding", "f.readline", "output.getvalue", "self.addCleanup", "self.prt", "idlelib.testing", "f.read", "self.reset", "self.lines", "self.assertRaises", "io.TextIOBase", "f.seek", "run.install_recursionlimit_wrappers", "mockrpc.console", "f.seekable", "sys.excepthook", "run.StdInputFile", "f.writable", "f.tell", "run.MyRPCServer", "ex.runcode", "func.called", "run.quitting", "self.assertIsNone", "run.StdOutputFile", "ex.user_exc_info", "unittest.main", "shell.written", "sys.getrecursionlimit", "self.ex", "mock.patch", "f.readlines", "e.__context__", "f.closed", "run.uninstall_recursionlimit_wrappers", "self.assertTrue", "f.fileno", "f.close", "unittest.TestCase", "func.__doc__", "self.assertFalse", "cls.addClassCleanup", "run.Executive"]}, "test_runscript.py": {"libraries": ["unittest", "test.support.requires", "idlelib.editor.EditorWindow", "idlelib.runscript", "tkinter.Tk"], "function_names": ["setUpClass", "tearDownClass", "test_init"], "function_calls": ["requires", "Tk", "EditorWindow"], "class_names": ["ScriptBindingTest"], "class_method_calls": ["unittest.main", "self.root", "runscript.ScriptBinding", "cls.root", "unittest.TestCase", "ew._close"]}, "test_scrolledlist.py": {"libraries": ["idlelib.scrolledlist.ScrolledList", "test.support.requires", "tkinter.Tk", "unittest"], "function_names": ["setUpClass", "tearDownClass", "test_init"], "function_calls": ["requires", "ScrolledList", "Tk"], "class_names": ["ScrolledListTest"], "class_method_calls": ["unittest.TestCase", "self.root", "unittest.main", "cls.root"]}, "test_search.py": {"libraries": ["unittest", "idlelib.search", "idlelib.searchengine", "test.support.requires", "tkinter.Text", "tkinter.BooleanVar", "tkinter.Tk"], "function_names": ["test_find_again", "setUpClass", "setUp", "test_find_selection", "tearDownClass"], "function_calls": ["requires", "Tk", "Text", "BooleanVar"], "class_names": ["SearchDialogTest"], "class_method_calls": ["searchengine.SearchEngine", "text.delete", "search.SearchDialog", "text.tag_remove", "self.root", "self.engine", "self.text", "cls.root", "self.assertTrue", "text.tag_add", "self.dialog", "unittest.TestCase", "self.assertFalse", "unittest.main"]}, "test_searchbase.py": {"libraries": ["unittest", "idlelib.idle_test.mock_idle.Func", "idlelib.searchengine", "idlelib.searchbase", "test.support.requires", "tkinter.Text", "tkinter.Tk", "tkinter.ttk.Frame", "tkinter.Toplevel"], "function_names": ["test_make_frame", "test_create_option_buttons", "test_create_widgets", "test_create_other_buttons", "test_make_button", "setUpClass", "setUp", "test_open_and_close", "test_create_command_buttons", "tearDownClass", "test_make_entry", "btn_test_setup", "tearDown", "test_create_entries"], "function_calls": ["Tk", "meth", "str", "Toplevel", "Frame", "equal", "int", "zip", "Text", "Func", "type", "requires"], "class_names": ["SearchDialogBaseTest"], "class_method_calls": ["toplevel.update_idletasks", "self.btn_test_setup", "self.engine", "entry.grid_info", "self.assertEqual", "self.dialog", "e.revar", "entry.get", "sdb.SearchDialogBase", "self.assertIn", "self.root", "cls.root", "e.wrapvar", "toplevel.destroy", "var.get", "e.wordvar", "e.casevar", "var.set", "unittest.main", "self.assertTrue", "unittest.TestCase", "frame.pack_slaves", "se.SearchEngine"]}, "test_searchengine.py": {"libraries": ["unittest", "re", "idlelib.searchengine", "idlelib.idle_test.mock_tk.Text", "tkinter.messagebox", "tkinter.TclError", "tkinter.BooleanVar", "idlelib.idle_test.mock_tk.Var", "idlelib.idle_test.mock_tk.Mbox", "tkinter.StringVar"], "function_names": ["search", "test_get", "setUp", "make_search", "test_getcookedpat", "test_search", "test_search_reverse", "setUpModule", "__init__", "test_search_forward", "test_get_selection", "test_search_backward", "sel", "setUpClass", "test_report_error", "mark", "test_is_get", "tearDownModule", "test_setcookedpat", "test_get_line_col", "test_getprog"], "function_calls": ["len", "search", "Mock", "forward", "mockText", "backward", "func", "Equal"], "class_names": ["GetLineColTest", "ReverseSearchTest", "Mock", "ForwardBackwardTest", "SearchTest", "SearchEngineTest", "GetTest", "GetSelectionTest"], "class_method_calls": ["self.pat", "self.assertIsInstance", "engine.getcookedpat", "se.get_selection", "engine.setpat", "engine.patvar", "self.engine", "engine.getprog", "self.assertEqual", "se.BooleanVar", "engine.casevar", "Mbox.showerror", "text.insert", "engine.setcookedpat", "self.assertIs", "showerror.title", "engine.isback", "re.IGNORECASE", "se.get_line_col", "engine.search_text", "self.emptypat", "cls.pat", "engine.getpat", "se.get", "se.messagebox", "engine.isre", "cls.res", "self.assertRaises", "engine.iswrap", "self.res", "engine.isword", "text.index", "cls.text", "engine.backvar", "engine.wrapvar", "self.make_search", "self.failpat", "self.text", "se.StringVar", "cls.engine", "unittest.main", "cls.failpat", "root._searchengine", "se.search_reverse", "showerror.message", "re.compile", "engine.revar", "engine.wordvar", "cls.emptypat", "engine.iscase", "unittest.TestCase", "se.SearchEngine", "temppat.pattern"]}, "test_sidebar.py": {"libraries": ["unittest", "tkinter", "test.support.requires", "itertools.chain", "unittest.mock", "idlelib.sidebar", "idlelib.delegator.Delegator", "idlelib.percolator.Percolator"], "function_names": ["test_insert", "setUp", "test_click_selection", "get_selection", "getlineno", "test_init_not_empty", "test_delete", "mock_idleconf_GetFont", "mock_idleconf_GetHighlight", "assert_state_disabled", "test_highlight_colors", "test_sidebar_text_width", "test_toggle_linenumbering", "simulate_drag", "__init__", "setvar", "test_drag_selection_up", "assert_sidebar_n_lines", "get_width", "setUpClass", "test_drag_selection_down", "tearDownClass", "test_init_empty", "tearDown", "assert_colors_are_equal", "get_line_screen_position", "get_sidebar_text_contents", "test_scroll", "lerp", "test_font", "assert_text_equals"], "function_calls": ["get_width", "Delegator", "Percolator", "chain", "range", "tuple", "lerp", "int", "zip", "Dummy_editwin", "dict", "assert_colors_are_equal", "float", "requires", "map", "orig_idleConf_GetHighlight"], "class_names": ["Dummy_editwin", "LineNumbersTest"], "class_method_calls": ["tk.Scrollbar", "tk.DISABLED", "ln.show_sidebar", "unittest.mock", "cls.editwin", "self.assertEqual", "self.assertNotEqual", "self.undo", "tk.NONE", "ln.update_font", "ln.hide_sidebar", "GetFont_patcher.stop", "self.per", "self.addCleanup", "self.assert_sidebar_n_lines", "self.simulate_drag", "cls.root", "tk.END", "self.root", "GetHighlight_patcher.start", "tk.LEFT", "self.font_override", "self.get_line_screen_position", "self.editwin", "tk.Text", "tk.NSEW", "cls.text", "self.highlight_cfg", "ln.update_colors", "self.assert_text_equals", "self.get_sidebar_text_contents", "self.text", "self.text_frame", "idlelib.sidebar", "tk.Frame", "GetFont_patcher.start", "ln.sidebar_text", "self.linenumber", "unittest.main", "self.assert_state_disabled", "GetHighlight_patcher.stop", "cls.text_frame", "tk.BOTH", "tk.Tk", "unittest.TestCase", "self.get_selection"]}, "test_squeezer.py": {"libraries": ["unittest", "unittest.mock.ANY", "idlelib.squeezer.count_lines_with_wrapping", "idlelib.config.idleConf", "idlelib.textview.view_text", "unittest.mock.NonCallableMagicMock", "tkinter.Text", "test.support.requires", "idlelib.squeezer.Squeezer", "unittest.mock.sentinel", "idlelib.pyshell.PyShell", "unittest.mock.patch", "idlelib.tooltip.Hovertip", "tkinter.Tk", "idlelib.macosx", "unittest.mock.Mock", "idlelib.squeezer.ExpandingButton", "textwrap.dedent"], "function_names": ["check", "test_count_begins_with_empty_line", "test_count_empty", "make_mock_squeezer", "make_mock_editor_window", "test_init", "test_count_ends_with_empty_line", "test_rmenu", "test_count_several_lines", "test_long_line", "test_squeeze_current_text_event_no_allowed_tags", "test_expand", "make_squeezer_instance", "test_empty_lines", "test_reload_no_squeezer_instances", "test_write_not_stdout", "test_several_lines_different_lengths", "test_auto_squeeze", "test_expand_dangerous_oupput", "test_copy", "test_view", "cleanup_root", "set_idleconf_option_with_cleanup", "make_text_widget", "test_squeeze_current_text_event", "test_write_no_tags", "test_reload", "test_squeeze_text_before_existing_squeezed_text", "test_count_lines", "get_test_tk_root", "test_write_stdout"], "function_calls": ["Tk", "len", "eval", "dedent", "str", "Mock", "count_lines_with_wrapping", "patch", "Squeezer", "NonCallableMagicMock", "Text", "requires", "ExpandingButton", "get_test_tk_root"], "class_names": ["SqueezerTest", "CountLinesTest", "ExpandingButtonTest"], "class_method_calls": ["expandingbutton.bind", "text_widget.mark_set", "squeezer.editwin", "squeezer.auto_squeeze_min_lines", "expandingbutton.base_text", "mock_msgbox.askyesno", "expandingbutton.is_dangerous", "squeezer.expandingbuttons", "MockHovertip.call_args", "mock_view_text.call_count", "self.assertEqual", "root.withdraw", "expandingbutton.copy", "orig_write.assert_called_with", "tooltip_text.lower", "editwin.width", "Squeezer.reload", "self.make_mock_editor_window", "root.destroy", "expandingbutton.rmenu_specs", "self.check", "macosx.isAquaTk", "self.assertIs", "expandingbutton.text", "idleConf.SetOption", "text_widget.index", "mock_event.y", "expandingbutton.selection_own", "text_widget.insert", "self.assertIn", "expandingbutton.expand", "expandingbutton.set_is_dangerous", "self.addCleanup", "squeezer.squeeze_current_text_event", "text_widget.compare", "mock_msgbox.askokcancel", "patch.object", "sentinel.SENTINEL_VALUE", "self.set_idleconf_option_with_cleanup", "editwin.per", "root.update_idletasks", "squeezer.count_lines", "self.subTest", "MockHovertip.assert_called_with", "self.make_text_widget", "expandingbutton.view", "self.make_squeezer_instance", "idleConf.GetOption", "text_widget.tag_nextrange", "expandingbutton.cget", "mock_menu.add_command", "expandingbutton.context_menu_event", "expandingbutton.master", "test_instance.addCleanup", "expandingbutton.clipboard_append", "editwin.write", "unittest.main", "editwin.text", "MockHovertip.call_count", "editwin.root", "mock_event.x", "expandingbutton.clipboard_clear", "mock_Menu.return_value", "text_widget.get", "expandingbutton.s", "self.assertTrue", "orig_write.call_count", "self.make_mock_squeezer", "text_widget.window_create", "unittest.TestCase", "mock_view_text.call_args"]}, "test_stackviewer.py": {"libraries": ["unittest", "idlelib.stackviewer", "test.support.requires", "sys", "idlelib.tree.ScrolledCanvas", "idlelib.tree.TreeNode", "tkinter.Tk"], "function_names": ["setUpClass", "tearDownClass", "test_init"], "function_calls": ["requires", "Tk", "isi"], "class_names": ["StackBrowserTest"], "class_method_calls": ["svs.last_traceback", "self.assertIsInstance", "sys.exc_info", "svs.last_type", "stackviewer.sc", "stackviewer.StackTreeItem", "svs.last_value", "self.root", "stackviewer.item", "stackviewer.sys", "cls.root", "unittest.TestCase", "stackviewer.StackBrowser", "unittest.main", "stackviewer.node"]}, "test_statusbar.py": {"libraries": ["unittest", "test.support.requires", "tkinter.Tk", "idlelib.statusbar"], "function_names": ["setUpClass", "tearDownClass", "test_set_label", "test_init"], "function_calls": ["requires", "Tk"], "class_names": ["Test"], "class_method_calls": ["bar.labels", "self.assertIn", "self.root", "bar.set_label", "statusbar.MultiStatusBar", "cls.root", "self.assertEqual", "unittest.TestCase", "unittest.main"]}, "test_text.py": {"libraries": ["unittest", "tkinter.test.support.AbstractTkTest", "tkinter", "test.support.requires", "test.support.run_unittest"], "function_names": ["setUp", "test_search", "test_debug"], "function_calls": ["requires", "super", "run_unittest"], "class_names": ["TextTest"], "class_method_calls": ["text.search", "tkinter.Text", "self.root", "tkinter.TclError", "self.text", "self.assertEqual", "unittest.TestCase", "text.insert", "text.debug", "self.assertRaises"]}, "test_textview.py": {"libraries": ["unittest", "tkinter.Tk", "idlelib.idle_test.mock_idle.Func", "tkinter.ttk.Button", "idlelib.idle_test.mock_tk.Mbox_func", "tkinter.NONE", "test.support.requires", "tkinter.CHAR", "idlelib.textview", "tkinter.TclError", "tkinter.WORD", "os"], "function_names": ["setUp", "test_init_nonmodal", "test_bad_file", "make_frame", "setUpModule", "test_horiz_scrollbar", "test_view_text_bind_with_button", "test_line1", "test_view_file", "cleanup_frame", "setUpClass", "test_view_text", "test_forbidden_geometry", "tearDownClass", "tearDown", "test_view_file_bind_with_button", "tearDownModule", "test_init_modal", "test_bad_encoding", "test_nowrap", "_command", "test_ok"], "function_calls": ["Mbox_func", "Tk", "get", "Func", "Button", "open", "requires", "VW"], "class_names": ["ViewFunctionTest", "VW", "ViewFrameTest", "ViewWindowTest", "ButtonClickTest", "AutoHideScrollbarTest", "ScrollableTextFrameTest"], "class_method_calls": ["self.assertIsInstance", "frame.text", "frame.destroy", "cls.frame", "self.assertIsNotNone", "cls.orig_error", "tv.ScrollableTextFrame", "tv.AutoHideScrollbar", "scroll.pack", "tv.view_file", "self.assertEqual", "root.withdraw", "frame.xscroll", "tv.ViewFrame", "root.destroy", "self.frame", "self.assertIn", "self.root", "f.readline", "self.addCleanup", "cls.root", "view.ok", "button.destroy", "root.update_idletasks", "self.subTest", "self.called", "self.assertRaises", "scroll.place", "self.make_frame", "button.invoke", "p.dirname", "self.view", "VW.grab_set", "tv.view_text", "tv.ViewWindow", "self.assertIsNone", "text_widget.cget", "unittest.main", "VW.transient", "os.path", "view.viewframe", "frame.update_idletasks", "p.join", "tv.showerror", "p.abspath", "self.assertTrue", "view.destroy", "unittest.TestCase", "self.assertFalse", "VW.wait_window"]}, "test_tooltip.py": {"libraries": ["tkinter.Tk", "unittest", "time", "test.support.requires", "functools.wraps", "tkinter.Button", "idlelib.tooltip.Hovertip", "idlelib.tooltip.TooltipBase", "tkinter.Toplevel"], "function_names": ["wrapped_func", "tearDownModule", "test_hover_with_delay", "_make_top_and_button", "setUp", "setUpModule", "is_tipwindow_shown", "test_showtip_on_mouse_enter_no_delay", "test_hidetip", "test_hidetip_on_mouse_leave", "test_base_class_is_unusable", "test_showtip", "add_call_counting", "test_showtip_twice"], "function_calls": ["Tk", "len", "Hovertip", "add_call_counting", "_make_top_and_button", "wraps", "Toplevel", "Button", "func", "requires", "TooltipBase"], "class_names": ["HovertipTest", "ToolTipBaseTest"], "class_method_calls": ["testobj.addCleanup", "self.button", "top.destroy", "self.assertEqual", "top.lift", "root.destroy", "self.assertIs", "root.update", "self.addCleanup", "tooltip.hidetip", "button.destroy", "root.update_idletasks", "wrapped_func.call_args_list", "tooltip.showtip", "self.assertRaises", "tooltip1.showtip", "self.top", "tooltip2.hidetip", "self.assertGreater", "tooltip.tipwindow", "top.title", "unittest.main", "time.sleep", "tooltip1.hidetip", "self.assertTrue", "button.pack", "unittest.TestCase", "self.is_tipwindow_shown", "self.assertFalse", "tooltip2.showtip"]}, "test_tree.py": {"libraries": ["unittest", "idlelib.tree", "test.support.requires", "tkinter.EventType", "tkinter.SCROLL", "tkinter.Tk"], "function_names": ["setUpClass", "test_init", "__init__", "tearDownClass", "test_wheel_event", "yview"], "function_calls": ["requires", "Tk", "_Event", "_Widget"], "class_names": ["_Widget", "TestScrollEvent", "TreeTest", "_Event"], "class_method_calls": ["tree.FileTreeItem", "self.assertEqual", "event.type", "sc.canvas", "self.assertTupleEqual", "self.root", "cls.root", "EventType.ButtonPress", "tree.TreeNode", "tree.ICONDIR", "sc.frame", "event.delta", "node.expand", "EventType.MouseWheel", "unittest.main", "tree.ScrolledCanvas", "event.num", "widget.expected", "tree.wheel_event", "unittest.TestCase"]}, "test_undo.py": {"libraries": ["unittest", "unittest.mock.Mock", "test.support.requires", "tkinter.Text", "tkinter.Tk", "idlelib.undo.UndoDelegator", "idlelib.percolator.Percolator"], "function_names": ["test_dump_event", "test_undo_start_stop", "setUpClass", "setUp", "test_redo_event", "test_get_set_saved", "test_addcmd", "tearDownClass", "tearDown", "test_undo_event"], "function_calls": ["Tk", "len", "UndoDelegator", "Percolator", "Mock", "Text", "requires", "range"], "class_names": ["UndoDelegatorTest"], "class_method_calls": ["text.get", "self.assertEqual", "d.pointer", "d.can_merge", "text.insert", "self.assertLessEqual", "text.delete", "self.assertTupleEqual", "cls.root", "self.delegator", "d.set_saved", "self.percolator", "text.event_generate", "cls.text", "self.text", "cls.percolator", "d.saved_change_hook", "unittest.main", "d.get_saved", "d.saved", "self.assertTrue", "unittest.TestCase", "self.assertFalse"]}, "test_warning.py": {"libraries": ["unittest", "idlelib.run", "warnings", "idlelib.pyshell", "test.support.captured_stderr"], "function_names": ["test_shell_show", "test_run_show", "test_idle_formatter", "test_showwarnings"], "function_calls": ["captured_stderr"], "class_names": ["ShellWarnTest", "RunWarnTest"], "class_method_calls": ["self.assertIs", "unittest.skipIf", "shell.idle_formatwarning", "showwarning.__name__", "shellmsg.splitlines", "f.getvalue", "shell.idle_showwarning", "idlemsg.splitlines", "run.capture_warnings", "shell.capture_warnings", "run.idle_showwarning_subproc", "self.assertEqual", "unittest.TestCase", "unittest.main", "warnings.showwarning"]}, "test_window.py": {"libraries": ["unittest", "test.support.requires", "tkinter.Tk", "idlelib.window"], "function_names": ["setUpClass", "tearDownClass", "test_init"], "function_calls": ["requires", "Tk", "set"], "class_names": ["WindowListTest", "ListedToplevelTest"], "class_method_calls": ["window.registry", "self.assertIn", "self.root", "window.ListedToplevel", "wl.callbacks", "cls.root", "self.assertEqual", "window.WindowList", "win.focused_widget", "unittest.TestCase", "unittest.main", "wl.dict"]}, "test_zoomheight.py": {"libraries": ["unittest", "test.support.requires", "idlelib.editor.EditorWindow", "idlelib.zoomheight", "tkinter.Tk"], "function_names": ["setUpClass", "tearDownClass", "test_zoom_height_event", "test_init"], "function_calls": ["requires", "Tk", "EditorWindow"], "class_names": ["Test"], "class_method_calls": ["self.assertIs", "self.editwin", "cls.root", "cls.editwin", "zoomheight.ZoomHeight", "unittest.TestCase", "zoom.zoom_height_event", "unittest.main", "zoom.editwin"]}, "test_zzdummy.py": {"libraries": ["unittest", "idlelib.zzdummy", "test.support.requires", "tkinter.Text", "idlelib.config", "idlelib.editor", "unittest.mock", "tkinter.Tk", "idlelib.format"], "function_names": ["checklines", "setUpClass", "setUp", "test_init", "test_reload", "__init__", "tearDownClass", "test_z_out_event", "tearDown", "test_z_in_event", "test_roundtrip"], "function_calls": ["eq", "Tk", "int", "Text", "DummyEditwin", "float", "requires", "range"], "class_names": ["ZZDummyTest", "DummyEditwin"], "class_method_calls": ["text.get", "self.assertEqual", "root.withdraw", "zz.editwin", "zzdummy.ZzDummy", "zzdummy.idleConf", "text.insert", "cls.editor", "txt.startswith", "editor.EditorWindow", "zz.z_out_event", "mock.Mock", "text.tag_remove", "self.root", "cls.root", "self.fregion", "format.FormatRegion", "cls.text", "text.index", "zz.text", "self.top", "self.text", "config.IdleUserConfParser", "zz.z_in_event", "unittest.main", "zz.ztext", "text.undo_block_start", "self.checklines", "text.undo_block_stop", "self.zz", "actual.append", "self.editor", "text.tag_add", "unittest.TestCase"]}, "iomenu.py": {"libraries": ["io", "tkinter.filedialog", "shlex", "tkinter.messagebox", "idlelib.config.idleConf", "tkinter.Text", "tokenize", "sys", "tempfile", "idlelib.idle_test.htest.run", "os", "idlelib", "unittest.main", "tkinter.simpledialog.askstring", "tkinter.Toplevel"], "function_names": ["get_saved", "print_window", "reset_undo", "_io_binding", "asksavefile", "saveas", "defaultfilename", "__init__", "open", "save", "close", "set_filename", "set_filename_change_hook", "loadfile", "savecopy", "writefile", "save_as", "save_a_copy", "encode", "maybesave", "fixnewlines", "updaterecentfileslist", "askopenfile", "set_saved", "print"], "function_calls": ["isinstance", "getattr", "run", "Toplevel", "str", "IOBinding", "main", "Text", "open", "askstring", "repr", "MyEditWin", "map", "hasattr"], "class_names": ["IOBinding", "MyEditWin"], "class_method_calls": ["filedialog.Open", "pipe.read", "parent.geometry", "self.flist", "self.__id_saveas", "self.asksavefile", "self.savedialog", "os.close", "self.reset_undo", "self.askopenfile", "messagebox.askyesnocancel", "os.linesep", "editwin.text", "self.writefile", "text.pack", "self.save", "self.save_as", "self.loadfile", "self.filename_change_hook", "f.newlines", "os.getcwd", "self.fileencoding", "messagebox.showerror", "pipe.close", "shlex.quote", "self.filename", "os.path", "root.geometry", "text.focus_set", "messagebox.YES", "self.__id_print", "self.save_a_copy", "self.get_saved", "self.set_saved", "tokenize.open", "self.print_window", "sys.platform", "self.dirname", "self.maybesave", "self.eol_convention", "self.open", "self.print", "text.replace", "f.write", "f.encoding", "self.set_filename", "messagebox.showwarning", "self.editwin", "flist.open", "self.text", "self.__id_savecopy", "self.defaultextension", "self.filetypes", "messagebox.OK", "self.updaterecentfileslist", "tokenize.detect_encoding", "io.BytesIO", "filedialog.SaveAs", "f.flush", "os.popen", "root.title", "tempfile.mkstemp", "self.__id_save", "self.saveas", "chars.encode", "f.read", "idleConf.GetOption", "self.__id_open", "self.opendialog", "self.defaultfilename", "self.savecopy", "os.unlink", "self.fixnewlines", "messagebox.showinfo", "os.name", "self.encode", "os.fsync", "f.fileno", "messagebox.askokcancel"]}, "macosx.py": {"libraries": ["sys.platform", "tkinter", "idlelib.configdialog", "idlelib.help_about", "idlelib.help", "idlelib.mainmenu", "idlelib.window", "os.path.expanduser", "tkinter.Menu", "unittest.main", "plistlib"], "function_names": ["hideTkConsole", "doOpenFile", "addOpenEventSupport", "overrideRootMenu", "fixb2context", "postwindowsmenu", "setupApp", "config_dialog", "isCarbonTk", "_init_tk_type", "about_dialog", "help_dialog", "isXQuartz", "isCocoaTk", "tkVersionWarning", "isAquaTk", "readSystemPreferences", "preferTabsPreferenceWarning"], "function_calls": ["hideTkConsole", "overrideRootMenu", "addOpenEventSupport", "fixb2context", "isCarbonTk", "_init_tk_type", "Menu", "isCocoaTk", "main", "expanduser", "isAquaTk", "readSystemPreferences", "open"], "class_names": [], "class_method_calls": ["menubar.add_cascade", "menu.index", "help_about.AboutDialog", "mainmenu.menudefs", "root.destroy", "root.createcommand", "help.show_idlehelp", "prefs.get", "flist.close_all_callback", "tkinter.Tk", "window.register_callback", "root.tk", "menu.delete", "flist.open", "flist.inversedict", "tkinter.TclError", "plistlib.load", "root.configure", "window.add_windows_to_menu", "root.bind", "root.unbind_class", "configdialog.ConfigDialog", "root.instance_dict"]}, "mainmenu.py": {"libraries": ["idlelib.config.idleConf", "importlib.util.find_spec", "unittest.main"], "function_names": [], "function_calls": ["find_spec", "main"], "class_names": [], "class_method_calls": ["idleConf.GetCurrentKeySet"]}, "multicall.py": {"libraries": ["re", "tkinter", "sys", "idlelib.idle_test.htest.run", "unittest.main"], "function_names": ["MultiCallCreator", "event_delete", "event_add", "__del__", "bind", "nbits", "handler", "bindseq", "_triplet_to_sequence", "__init__", "unbind", "__create_handler", "event_info", "_multi_call", "_parse_sequence", "expand_substates"], "function_calls": ["issubclass", "doit", "tuple", "dict", "_parse_sequence", "range", "list", "run", "set", "type", "expand_substates", "enumerate", "func", "f", "MultiCallCreator", "len", "divmod", "main", "map", "bindseq", "print"], "class_names": ["_ComplexBinder", "_SimpleBinder", "MultiCall"], "class_method_calls": ["self.handlerids", "sys.platform", "self.__binders", "self.widget", "triplets.remove", "widget.unbind", "self.type", "tkinter.Toplevel", "widget.event_info", "self.doafterhandler", "self.typename", "self.sequence", "type_re.match", "event.mc_type", "parent.geometry", "tkinter.Text", "self.bindedfuncs", "widget.__init__", "_state_codes.append", "self.ishandlerrunning", "self.widgetinst", "widget.event_delete", "top.geometry", "tkinter.TclError", "widget.event_add", "widget.bind", "event.mc_state", "top.title", "self.__eventinfo", "self.__create_handler", "statelist.append", "text.bind", "re.compile", "e.args", "text.pack", "substates.sort", "text.event_add", "self.handlerid", "tkinter.Misc", "triplets.append"]}, "outwin.py": {"libraries": ["re", "unittest.main", "idlelib.editor.EditorWindow", "tkinter.messagebox"], "function_names": ["write", "maybesave", "ispythonsource", "file_line_helper", "writelines", "flush", "short_title", "__init__", "goto_file_line", "showerror", "setup", "compile_progs"], "function_calls": ["isinstance", "len", "file_line_helper", "int", "main", "OutputWindow", "open", "compile_progs"], "class_names": ["OutputWindow", "OnDemandOutputWindow"], "class_method_calls": ["text.tag_raise", "re.IGNORECASE", "EditorWindow.__init__", "self.tagdefs", "self.flist", "messagebox.showerror", "self.write", "f.close", "self.showerror", "self.goto_file_line", "self.text", "owin.text", "self.setup", "re.compile", "prog.search", "match.group", "self.get_saved", "self.owin", "text.tag_configure"]}, "parenmatch.py": {"libraries": ["idlelib.hyperparser.HyperParser", "unittest.main", "idlelib.config.idleConf"], "function_names": ["paren_closed_event", "set_timeout_none", "create_tag_parens", "callme", "create_tag_opener", "create_tag_expression", "flash_paren_event", "__init__", "restore_event", "set_timeout_last", "activate_restore", "finish_paren_event", "deactivate_restore", "handle_restore_timer", "reload"], "function_calls": ["HyperParser", "main"], "class_names": ["ParenMatch"], "class_method_calls": ["self.handle_restore_timer", "self.HILITE_CONFIG", "idleConf.CurrentTheme", "self.STYLE", "cls.HILITE_CONFIG", "self.RESTORE_SEQUENCES", "cls.FLASH_DELAY", "ParenMatch.reload", "cls.BELL", "hp.get_surrounding_brackets", "idleConf.GetHighlight", "self.RESTORE_VIRTUAL_EVENT_NAME", "self.restore_event", "self.deactivate_restore", "self.editwin", "idleConf.GetOption", "self.set_timeout_none", "self.activate_restore", "self.finish_paren_event", "self.text", "self.is_restore_active", "cls.STYLE", "self.create_tag_expression", "self.FLASH_DELAY", "hp.is_in_code", "self.set_timeout_last", "editwin.text", "self.tagfuncs", "self.counter", "self.BELL"]}, "pathbrowser.py": {"libraries": ["importlib.machinery", "idlelib.tree.TreeItem", "sys", "idlelib.browser.ModuleBrowserTreeItem", "idlelib.browser.ModuleBrowser", "idlelib.idle_test.htest.run", "os", "unittest.main"], "function_names": ["GetSubList", "GetText", "listmodules", "rootnode", "__init__", "ispackagedir", "settitle", "_path_browser"], "function_calls": ["len", "PathBrowserTreeItem", "PathBrowser", "run", "DirBrowserTreeItem", "main", "ModuleBrowserTreeItem"], "class_names": ["PathBrowserTreeItem", "PathBrowser", "DirBrowserTreeItem"], "class_method_calls": ["importlib.machinery", "self.listmodules", "packages.sort", "self.ispackagedir", "allnames.remove", "packages.append", "self._utest", "parent.mainloop", "self.packages", "self._htest", "self.top", "os.curdir", "sorted.append", "self.master", "sys.path", "os.path", "self.init", "os.listdir", "sorted.sort", "self.dir", "sublist.append"]}, "percolator.py": {"libraries": ["tkinter", "idlelib.redirector.WidgetRedirector", "idlelib.idle_test.htest.run", "unittest.main", "idlelib.delegator.Delegator"], "function_names": ["toggle1", "close", "insertfilter", "removefilter", "delete", "insert", "_percolator", "__init__", "toggle2"], "function_calls": ["isinstance", "WidgetRedirector", "run", "Percolator", "Delegator", "main", "Tracer", "map", "print"], "class_names": ["Percolator", "Tracer"], "class_method_calls": ["self.removefilter", "var1.get", "f.resetcache", "f.delegate", "cb2.pack", "self.insert", "Delegator.__init__", "self.name", "parent.geometry", "self.bottom", "self.delete", "filter.delegate", "filter.setdelegate", "tk.Text", "tk.Checkbutton", "self.top", "self.text", "box.geometry", "tk.IntVar", "p.removefilter", "self.delegate", "tk.Toplevel", "box.title", "var2.get", "text.pack", "p.insertfilter", "cb1.pack", "self.redir", "self.filters", "f.setdelegate"]}, "pyparse.py": {"libraries": ["re", "unittest.main"], "function_names": ["get_continuation_type", "find_good_parse_start", "_study1", "compute_backslash_indent", "is_block_opener", "__init__", "compute_bracket_indent", "__missing__", "set_code", "get_base_indent_string", "set_lo", "get_num_lines_in_stmt", "is_block_closer", "get_last_stmt_bracketing", "_study2"], "function_calls": ["len", "_itemre", "push_good", "tuple", "_match_stringre", "push_stack", "main", "_chew_ordinaryre", "_closere", "_junkre", "ord", "_synchre", "range", "is_char_in_string"], "class_names": ["ParseMap", "Parser"], "class_method_calls": ["self.indentwidth", "self.code", "goodlines.append", "code.find", "code.rfind", "self.stmt_end", "trans.update", "m.end", "self.lastopenbracketpos", "self.lastch", "self.study_level", "stack.append", "m.span", "self.tabwidth", "m.start", "self.continuation", "self._study2", "self.stmt_start", "re.MULTILINE", "ParseMap.fromkeys", "bracketing.append", "self.goodlines", "re.VERBOSE", "self.stmt_bracketing", "code.replace", "re.compile", "re.DOTALL", "self._study1", "code.translate", "re.match"]}, "pyshell.py": {"libraries": ["idlelib.rpc", "warnings", "idlelib.outwin.OutputWindow", "subprocess", "idlelib.debugger_r", "idlelib.debugobj_r", "textwrap.TextWrapper", "idlelib.filelist.FileList", "idlelib.colorizer.ColorDelegator", "idlelib.run.StdOutputFile", "idlelib.history.History", "idlelib.iomenu", "threading", "idlelib.editor.fixwordbreaks", "getopt", "tkinter.messagebox", "platform.system", "idlelib.testing", "socket", "os", "idlelib.tree.ScrolledCanvas", "idlelib.undo.UndoDelegator", "idlelib.tree.TreeNode", "tkinter.*", "platform.python_version", "re", "idlelib.run.fix_scaling", "time", "idlelib.editor.EditorWindow", "tokenize", "code.InteractiveInterpreter", "idlelib.macosx", "idlelib.run.StdInputFile", "os.path", "idlelib.config.idleConf", "tkinter", "sys", "ctypes", "idlelib.stackviewer.StackBrowser", "idlelib.debugger", "pydoc", "linecache", "idlelib.run.idle_formatwarning"], "function_names": ["cancel_callback", "update_breakpoints", "restore_file_breaks", "close_debugger", "resetoutput", "__init__", "recolorize_main", "endexecuting", "removecolors", "interrupt_subprocess", "poll_subprocess", "rmenu_check_cut", "restart_shell", "main", "runcommand", "runit", "isatty", "capture_warnings", "open_stack_viewer", "get_standard_extension_names", "filename_changed_hook", "transfer_path", "toggle_debugger", "open_debugger", "LoadTagDefs", "setdebugger", "showtraceback", "enter_callback", "execsource", "restart_line", "restart_subprocess", "eof_callback", "insert", "terminate_subprocess", "set_breakpoint", "ispythonsource", "short_title", "set_breakpoint_here", "ranges_to_linenumbers", "toggle_jit_stack_viewer", "build_subprocess_arglist", "spawn_subprocess", "begin", "display_executing_dialog", "extended_linecache_checkcache", "getdebugger", "store_file_breaks", "clear_breakpoint_here", "showprompt", "checklinecache", "runcode", "color_breakpoint_text", "view_restart_mark", "execfile", "close", "handle_EOF", "remote_stack_viewer", "readline", "_close", "stuffsource", "linefeed_callback", "display_no_subprocess_error", "get_warning_stream", "display_port_binding_error", "start_subprocess", "show_warning", "recall", "prepend_syspath", "fix_x11_paste", "open_remote_stack_viewer", "__request_interrupt", "delete", "open_shell", "idle_showwarning", "beginexecuting", "debug_menu_postcommand", "write", "kill_subprocess", "set_warning_stream", "showsyntaxerror", "runsource", "set_debugger_indicator", "stop_readline", "rmenu_check_paste", "clear_file_breaks"], "function_calls": ["StdOutputFile", "MyRPCClient", "capture_warnings", "TreeNode", "StackBrowser", "getattr", "Toplevel", "SystemExit", "NoDefaultRoot", "system", "ScrolledCanvas", "fix_x11_paste", "repr", "python_version", "isinstance", "fix_scaling", "super", "old_hook", "orig_checkcache", "str", "PyShell", "open", "restart_line", "range", "list", "StdInputFile", "PhotoImage", "TextWrapper", "int", "float", "idle_formatwarning", "eval", "hasattr", "divmod", "Tk", "len", "PyShellFileList", "compile", "fixwordbreaks", "main", "ModifiedInterpreter", "exec", "print"], "class_names": ["ModifiedUndoDelegator", "MyRPCClient", "PyShellFileList", "ModifiedColorDelegator", "PyShellEditorWindow", "PyShell", "ModifiedInterpreter"], "class_method_calls": ["self.indentwidth", "self.pollinterval", "EditorWindow.close", "self.showprompt", "self.console", "sys.executable", "debugger.Debugger", "sys.stdout", "root.destroy", "self.restart_shell", "self.close", "self.history", "new_file.write", "self.debugger", "self.flist", "self.breakpoints", "self.reading", "flist.open_shell", "self.stdout", "pydoc.pager", "self.write", "wrapper.wrap", "tkconsole.colorize_syntax_error", "ColorDelegator.LoadTagDefs", "flist.inversedict", "source.split", "self.save_stdin", "path.extend", "self.showtraceback", "self.rpcsubproc", "getopt.error", "self.tag_remove", "flist.dict", "s.strip", "debug.load_breakpoints", "self.menu_specs", "rpc.displayhook", "fp.readlines", "sys.stderr", "sys.version", "self.prompt_last_line", "args.remove", "self.stuffsource", "sys.argv", "self.shell_title", "idleConf.userdir", "self.subprocess_arglist", "console.stop_readline", "self.poll_subprocess", "self.spawn_subprocess", "idleConf.GetExtensions", "socket.SOL_SOCKET", "self.set_breakpoint_here", "text.configure", "self.toggle_debugger", "wrapped_msg.endswith", "self.update_breakpoints", "shell.top", "idleConf.CurrentTheme", "self.stop_readline", "root.wm_iconbitmap", "ColorDelegator.__init__", "self._stop_readline_flag", "shell.open_debugger", "debugger.run", "OutputWindow.__init__", "sys.last_traceback", "self.stdin", "PyShell.shell_title", "os.getcwd", "re.search", "debug.set_breakpoint_here", "sc.canvas", "OutputWindow.write", "text.tag_remove", "self.canceled", "self.root", "self.clear_file_breaks", "squeezer.squeeze_current_text_event", "self.getdebugger", "messagebox.showerror", "subprocess.Popen", "self.terminate_subprocess", "self.set_breakpoint", "self._afterid", "shell.interp", "root._windowingsystem", "self.__request_interrupt", "cache.pop", "self.stderr", "shell.show_warning", "self.newline_and_indent_event", "ColorDelegator.recolorize_main", "UndoDelegator.insert", "self.History", "tkconsole.text", "self.save_stdout", "tkinter._support_default_root", "self.endoffile", "macosx.preferTabsPreferenceWarning", "self.set_line_and_column", "tkconsole.resetoutput", "self.ctip", "fp.read", "self.enter_callback", "prefix.rstrip", "self.execfile", "clt.pollresponse", "self.tkconsole", "rpc.RPCClient", "console.text", "self.eof_callback", "os.path", "console.showprompt", "self.port", "debug.clear_file_breaks", "tkconsole.showprompt", "self.display_port_binding_error", "s.split", "line.startswith", "tokenize.open", "self.runcommand", "macosx.isAquaTk", "pathx.append", "sys.platform", "db.close", "console.write", "root.withdraw", "messagebox.askyesno", "InteractiveInterpreter.showsyntaxerror", "self.view_restart_mark", "text.tag_ranges", "self.set_debugger_indicator", "self.prompt", "debugobj_r.StubObjectTreeItem", "self.recall", "root.bind_class", "self.tag_add", "self.per", "self.restart_subprocess", "InteractiveInterpreter.runsource", "sys.displayhook", "tkinter._default_root", "getopt.getopt", "self.transfer_path", "text.bell", "self.toggle_jit_stack_viewer", "self.usetabs", "self.compile", "re.sub", "self.display_executing_dialog", "self.resetoutput", "text.index", "flist.open", "self.top", "self.text", "node.expand", "self.checklinecache", "self.sys_ps1", "sys.stdin", "self.save_stderr", "os.environ", "self.rpcclt", "self.pyshell", "flist.pyshell", "line.rstrip", "text.bind", "iomenu.encoding", "console.width", "pydoc.plainpager", "self.locals", "EditorWindow._close", "self.gid", "self.linefeed_callback", "macosx.tkVersionWarning", "self.build_subprocess_arglist", "self.restarting", "self.remote_stack_viewer", "linecache.cache", "self.cancel_callback", "self.Squeezer", "debugger_r.close_subprocess_debugger", "self.closing", "self.active_seq", "self.runcode", "self.restore_file_breaks", "self.close_debugger", "self.io", "sys.modules", "console.executing", "root.mainloop", "warnings.showwarning", "self.open_stack_viewer", "dbg_gui.load_breakpoints", "c.keys", "debugger_r.start_remote_debugger", "ctypes.OleDLL", "sys.ps1", "socket.SO_REUSEADDR", "self.executing", "self.open_debugger", "sys.exit", "debugger_r.close_remote_debugger", "self.tagdefs", "EditorWindow.__init__", "root.wm_iconphoto", "self.ranges_to_linenumbers", "InteractiveInterpreter.showtraceback", "socket.timeout", "OutputWindow.rmenu_specs", "self.display_no_subprocess_error", "linecache.checkcache", "self.color_breakpoint_text", "idleConf.GetHighlight", "debugger_r.restart_subprocess_debugger", "cache.update", "messagebox.askokcancel", "sys.exc_info", "lines.append", "self.setvar", "idleConf.GetOption", "sc.frame", "self.LoadTagDefs", "sys.__stderr__", "self.original_compiler_flags", "InteractiveInterpreter.__init__", "macosx.setupApp", "sys.warnoptions", "time.sleep", "self.COPYRIGHT", "UndoDelegator.delete", "sys.path", "self.interp", "self.update_menu_state", "flist.new", "self.clear_breakpoint_here", "debug.clear_breakpoint_here", "self.delegate", "text.tag_add", "iomenu.errors", "self.runit", "file.write", "threading.Thread", "ms.insert", "self.breakpointPath"]}, "query.py": {"libraries": ["tkinter.ttk.Button", "sys.platform", "shlex", "tkinter.filedialog", "tkinter.simpledialog._setup_dialog", "sys.executable", "tkinter.E", "importlib.abc", "tkinter.ttk.Checkbutton", "tkinter.W", "tkinter.StringVar", "tkinter.Toplevel", "importlib.util", "tkinter.BooleanVar", "os", "tkinter.ttk.Label", "tkinter.ttk.Entry", "tkinter.font.Font", "tkinter.ttk.Frame", "unittest.main", "idlelib.idle_test.htest.run", "tkinter.S"], "function_names": ["create_widgets", "askfilename", "ok", "path_ok", "browse_file", "cli_args_ok", "__init__", "showerror", "cancel", "entry_ok", "destroy", "create_extra"], "function_calls": ["Label", "isinstance", "len", "BooleanVar", "super", "Checkbutton", "Entry", "run", "str", "Font", "Frame", "int", "main", "_setup_dialog", "Button", "StringVar"], "class_names": ["SectionName", "HelpSource", "Goto", "Query", "CustomRun", "ModuleName"], "class_method_calls": ["self.winfo_reqheight", "self.transient", "self.entry_ok", "self.result", "self.update_idletasks", "self.destroy", "self.args_error", "spec.loader", "importlib.abc", "self.protocol", "self.winfo_reqwidth", "filedialog.Open", "self.text0", "os.getcwd", "path.startswith", "self.frame", "self.resizable", "restart.grid", "self.entryvar", "self.cancel", "self.message", "self.title", "entrylabel.grid", "self.wait_window", "self.cli_args_ok", "self.button_ok", "self.path_error", "self.entry", "shlex.split", "importlib.util", "parent.winfo_rootx", "self._windowingsystem", "parent.winfo_height", "self.create_extra", "self.pathvar", "self.entry_error", "self.button_cancel", "self.path_ok", "SectionName.entry_ok", "Toplevel.__init__", "self.deiconify", "browse.grid", "self.showerror", "self.used_names", "self.bind", "pathlabel.grid", "self.path", "parent.winfo_width", "self.grab_set", "self.restartvar", "self.item_ok", "self.parent", "frame.grid_columnconfigure", "self.ok", "os.path", "self.filepath", "self.error_font", "self.geometry", "self.grab_release", "self.askfilename", "self.withdraw", "frame.grid", "self.browse_file", "self.create_widgets", "parent.winfo_rooty"]}, "redirector.py": {"libraries": ["tkinter.Text", "tkinter.TclError", "idlelib.idle_test.htest.run", "unittest.main", "tkinter.Toplevel"], "function_names": ["register", "close", "unregister", "dispatch", "__init__", "__call__", "__repr__", "my_insert", "_widget_redirector"], "function_calls": ["list", "original_insert", "WidgetRedirector", "run", "Toplevel", "m", "main", "Text", "map", "delattr", "setattr", "OriginalCommand", "print"], "class_names": ["WidgetRedirector", "OriginalCommand"], "class_method_calls": ["self.dispatch", "self.orig_and_operation", "self._operations", "self.widget", "redir.orig", "redir.register", "self.tk", "parent.geometry", "tk.deletecommand", "tk.createcommand", "widget.tk", "top.geometry", "self.orig", "self.operation", "self.tk_call", "top.title", "widget._w", "self.unregister", "text.focus_set", "redir.tk", "self.__class__", "text.pack", "self.redir", "tk.call"]}, "replace.py": {"libraries": ["re", "tkinter.ttk.Button", "idlelib.searchbase.SearchDialogBase", "idlelib.searchengine", "unittest.main", "tkinter.Text", "tkinter.TclError", "tkinter.END", "tkinter.SEL", "idlelib.idle_test.htest.run", "tkinter.ttk.Frame", "tkinter.StringVar", "tkinter.Toplevel"], "function_names": ["undo_block_start", "close", "replace", "create_entries", "do_find", "_replace_dialog", "find_it", "show_hit", "__init__", "do_replace", "default_command", "create_command_buttons", "open", "replace_it", "_replace_expand", "undo_block_stop", "replace_all", "show_replace"], "function_calls": ["len", "super", "replace", "run", "Toplevel", "Frame", "main", "Button", "Text", "StringVar", "ReplaceDialog", "map", "hasattr"], "class_names": ["ReplaceDialog"], "class_method_calls": ["SearchDialogBase.close", "text.mark_set", "self.replace_all", "re.error", "self.make_entry", "self.do_find", "self.default_command", "frame.pack", "text.get", "self.engine", "searchengine.get_line_col", "m.expand", "dialog.open", "SearchDialogBase.create_command_buttons", "text.insert", "text._root", "self.close", "self.do_replace", "text.delete", "self.replace_it", "self.replent", "text.tag_remove", "parent.geometry", "engine._replacedialog", "m.span", "self.make_button", "top.geometry", "text.update_idletasks", "text.index", "text.see", "self.text", "self.replvar", "self.find_it", "self.show_hit", "top.title", "text.undo_block_stop", "text.undo_block_start", "prog.match", "self.ok", "self.bell", "text.focus_set", "searchengine.get", "SearchDialogBase.open", "SearchDialogBase.create_entries", "text.pack", "text.tag_add", "button.pack", "m.group", "self._replace_expand"]}, "rpc.py": {"libraries": ["io", "select", "socketserver", "threading", "types", "unittest.main", "queue", "struct", "sys", "pickle", "traceback", "copyreg", "socket", "os", "marshal", "builtins"], "function_names": ["__getattr__", "getresponse", "pollmessage", "decode_interrupthook", "__getattributes", "displayhook", "dumps", "pollresponse", "handle", "_proxify", "EOFhook", "newseq", "_getresponse", "remoteref", "server_activate", "remotecall", "pollpacket", "get_request", "debug", "_stage1", "mainloop", "__call__", "__init__", "asyncqueue", "decoderesponse", "pickle_code", "_stage0", "_getmethods", "accept", "register", "handle_error", "localcall", "close", "__getmethods", "remotequeue", "exithook", "_getattributes", "asynccall", "unpickle_code", "asyncreturn", "server_bind", "handle_EOF", "unregister", "putmessage", "get_remote_proxy"], "function_calls": ["getattr", "dumps", "id", "RuntimeError", "repr", "remoteref", "isinstance", "AttributeError", "str", "_getmethods", "list", "method", "RemoteProxy", "dir", "_getattributes", "OSError", "SystemError", "hasattr", "CodePickler", "len", "MethodProxy", "RPCProxy", "callable", "main", "map", "print"], "class_names": ["CodePickler", "MethodProxy", "RPCServer", "RPCClient", "RemoteProxy", "RPCProxy", "SocketIO", "RPCHandler", "RemoteObject"], "class_method_calls": ["request_queue.put", "socket.SOCK_STREAM", "self.asyncqueue", "self.pollmessage", "self.debug", "sys.stdout", "traceback.print_stack", "cvar.release", "self.oid", "obj.__bases__", "self.pollpacket", "threading.current_thread", "cv.acquire", "self._stage1", "self.nextseq", "self.server_address", "self.exithook", "self.putmessage", "self.sockthread", "cv.release", "socketserver.TCPServer", "obj.oid", "copyreg.dispatch_table", "f.getvalue", "self.bufneed", "self.location", "traceback.print_exc", "self.debugging", "self.handle_EOF", "marshal.loads", "response_queue.get", "builtins._", "self.mainloop", "self._stage0", "self.asynccall", "self.pollresponse", "types.CodeType", "self.asyncreturn", "select.select", "self._getresponse", "struct.unpack", "pickle.loads", "self.__attributes", "self.objtable", "pickle.PicklingError", "self.sock", "sock.close", "svr.current_handler", "self.decode_interrupthook", "self.__getattributes", "threading.Condition", "self.__methods", "self.decoderesponse", "p.dump", "self.newseq", "queue.Queue", "bytes.decode", "self.socket", "self._proxify", "cvar.wait", "self.getresponse", "self.EOFhook", "self.responses", "socketserver.BaseRequestHandler", "self.buff", "self.sockio", "socket.AF_INET", "io.BytesIO", "self.name", "self.localcall", "pickle.UnpicklingError", "marshal.dumps", "queue.Empty", "self.listening_sock", "struct.pack", "cvar.acquire", "self.__getmethods", "sys.__stderr__", "pickle.Pickler", "cv.notify", "self.cvars", "os._exit", "SocketIO.__init__", "self.bufstate", "text.encode", "socket.socket"]}, "run.py": {"libraries": ["tkinter.messagebox.showerror", "idlelib.rpc", "warnings", "idlelib.debugger_r", "idlelib.debugobj_r", "atexit", "idlelib", "traceback", "io", "idlelib.iomenu", "threading", "textwrap", "idlelib.calltip", "tkinter.font", "queue", "functools", "_thread", "time", "__main__", "unittest.main", "idlelib.stackviewer", "tkinter", "sys", "idlelib.autocomplete", "pydoc", "linecache"], "function_names": ["idle_showwarning_subproc", "get_the_completion_list", "capture_warnings", "writable", "readable", "exit", "print_exc", "decode_interrupthook", "print_exception", "uninstall_recursionlimit_wrappers", "handle", "EOFhook", "setrecursionlimit", "get_the_calltip", "flush_stdout", "runcode", "fix_scaling", "start_the_debugger", "encoding", "errors", "__init__", "show_socket_error", "interrupt_the_server", "handle_tk_events", "name", "handle_error", "close", "manage_socket", "stackviewer", "exithook", "getrecursionlimit", "fixdoc", "idle_formatwarning", "read", "write", "install_recursionlimit_wrappers", "readline", "main", "stop_the_debugger", "isatty", "cleanup_traceback"], "function_calls": ["StdOutputFile", "capture_warnings", "exit", "print_exc", "getattr", "print_exception", "id", "flush_stdout", "Executive", "isinstance", "fix_scaling", "str", "show_socket_error", "MyRPCServer", "handle_tk_events", "range", "ValueError", "StdInputFile", "method", "set", "int", "type", "fixdoc", "float", "delattr", "idle_formatwarning", "hasattr", "len", "install_recursionlimit_wrappers", "main", "showerror", "TypeError", "round", "cleanup_traceback", "exec", "print"], "class_names": ["StdOutputFile", "MyHandler", "StdInputFile", "Executive", "StdioFile", "MyRPCServer"], "class_method_calls": ["self._line_buffer", "line.strip", "self.closed", "self.console", "self.calltip", "root.destroy", "sys.stdout", "debugobj_r.remote_object_tree_item", "rpc.response_queue", "rpc.RPCServer", "self.tags", "tkinter.font", "setrecursionlimit.__wrapped__", "idlelib.testing", "pydoc.pager", "io.TextIOBase", "threading.current_thread", "cause.__traceback__", "rpc.displayhook", "exc.__suppress_context__", "sys.stderr", "self.get_remote_proxy", "sys.argv", "exc.__context__", "err.args", "traceback.print_exception", "self._encoding", "traceback.print_exc", "debugger_r.start_debugger", "functools.wraps", "sys.last_traceback", "server.handle_request", "atexit._clear", "traceback.format_exception_only", "rpc.RPCHandler", "self.user_exc_info", "traceback.print_list", "self._keep_stdin", "traceback.extract_tb", "__main__.__dict__", "sys.__excepthook__", "sys.last_value", "self.register", "textwrap.fill", "root.withdraw", "sockthread.start", "err.strerror", "tb.tb_frame", "tkinter.Tcl", "sockthread.daemon", "sys.displayhook", "thread.interrupt_main", "self.errors", "fn.startswith", "rpc.request_queue", "self.autocomplete", "self.encoding", "getrecursionlimit.__wrapped__", "exc.__cause__", "sys.stdin", "category.__name__", "sys.getrecursionlimit", "self.shell", "iomenu.encoding", "pydoc.plainpager", "sys.last_type", "self.locals", "e.args", "context.__traceback__", "self._errors", "err.errno", "sys.setrecursionlimit", "sys.modules", "rpc.objecttable", "warnings.showwarning", "sys.exit", "tkinter.Tk", "queue.Empty", "linecache.checkcache", "calltip.Calltip", "tb.tb_next", "root.tk", "sys.exc_info", "sys.excepthook", "stackviewer.StackTreeItem", "autocomplete.AutoComplete", "rpchandler.remotecall", "sys.__stderr__", "textwrap.dedent", "self.rpchandler", "time.sleep", "seen.add", "self.interp", "linecache.getline", "line.find", "fun.__doc__", "tcl.eval", "iomenu.errors", "file.write", "threading.Thread", "str.encode"]}, "runscript.py": {"libraries": ["idlelib.query.CustomRun", "time", "idlelib.config.idleConf", "tkinter.messagebox", "unittest.main", "idlelib.outwin", "tokenize", "os", "idlelib.macosx", "idlelib.pyshell", "tabnanny"], "function_names": ["run_module_event", "errorbox", "run_custom_event", "ask_save_dialog", "check_module_event", "__init__", "checksyntax", "getfilename", "tabnanny"], "function_calls": ["isinstance", "compile", "getattr", "CustomRun", "main", "open", "ord"], "class_names": ["ScriptBinding"], "class_method_calls": ["self.checksyntax", "pyshell.use_subprocess", "tabnanny.NannyNag", "self.perf", "self.tabnanny", "msg.args", "self.cli_args", "interp.runcommand", "self.run_module_event", "nag.get_lineno", "text.tag_remove", "self.root", "f.readline", "self.flist", "messagebox.showerror", "editwin.colorize_syntax_error", "f.read", "self.errorbox", "self.editwin", "idleConf.GetOption", "tokenize.generate_tokens", "time.perf_counter", "outwin.OutputWindow", "shell.stderr", "self.getfilename", "interp.prepend_syspath", "messagebox.OK", "macosx.isCocoaTk", "editwin.text", "self.shell", "os.path", "self.ask_save_dialog", "interp.restart_subprocess", "source.replace", "shell.get_warning_stream", "interp.runcode", "tabnanny.process_tokens", "tokenize.open", "shell.set_warning_stream", "messagebox.askokcancel", "tokenize.TokenError"]}, "scrolledlist.py": {"libraries": ["tkinter.ttk.Scrollbar", "unittest.main", "idlelib.idle_test.htest.run", "idlelib.macosx", "tkinter.ttk.Frame", "tkinter.*"], "function_names": ["make_menu", "_scrolled_list", "close", "select", "fill_menu", "clear", "append", "on_select", "get", "down_event", "click_event", "__init__", "popup_event", "on_double", "up_event", "double_click_event"], "function_calls": ["Listbox", "run", "Toplevel", "str", "Frame", "Scrollbar", "main", "Menu", "MyScrolledList", "map", "range", "print"], "class_names": ["ScrolledList", "MyScrolledList"], "class_method_calls": ["scrolled_list.append", "self.click_event", "listbox.configure", "event.x_root", "self.fill_menu", "self.frame", "listbox.pack", "parent.geometry", "event.x", "self.empty", "listbox.yview", "self.listbox", "self.select", "self.clear", "self.vbar", "top.geometry", "event.y", "self.down_event", "vbar.set", "event.y_root", "self.make_menu", "self.double_click_event", "self.master", "menu.tk_popup", "listbox.bind", "self.on_select", "self.up_event", "self.menu", "self.popup_event", "macosx.isAquaTk", "self.get", "self.on_double", "self.default"]}, "search.py": {"libraries": ["tkinter.ttk.Button", "idlelib.searchbase.SearchDialogBase", "idlelib.searchengine", "unittest.main", "tkinter.Text", "tkinter.TclError", "idlelib.idle_test.htest.run", "tkinter.ttk.Frame", "tkinter.Toplevel"], "function_names": ["show_find", "create_widgets", "find", "find_again", "default_command", "_search_dialog", "_setup", "find_selection"], "function_calls": ["run", "Toplevel", "Frame", "main", "Button", "Text", "SearchDialog", "_setup", "map", "hasattr"], "class_names": ["SearchDialog"], "class_method_calls": ["text.mark_set", "text.get", "frame.pack", "self.default_command", "self.engine", "self.open", "self.find_again", "text.insert", "text._root", "text.tag_remove", "parent.geometry", "engine._searchdialog", "SearchDialogBase.create_widgets", "m.span", "self.make_button", "top.geometry", "text.index", "text.see", "self.text", "top.title", "self.bell", "searchengine.get", "text.pack", "text.tag_add", "button.pack"]}, "searchbase.py": {"libraries": ["re", "tkinter.ttk.Button", "idlelib.searchengine", "unittest.main", "tkinter.simpledialog._setup_dialog", "tkinter.ttk.Radiobutton", "tkinter.ttk.Checkbutton", "idlelib.idle_test.htest.run", "tkinter.ttk.Entry", "tkinter.ttk.Frame", "tkinter.ttk.Label", "tkinter.Toplevel"], "function_names": ["close", "create_widgets", "make_frame", "create_entries", "make_button", "__init__", "create_option_buttons", "create_other_buttons", "default_command", "create_command_buttons", "open", "make_entry"], "function_calls": ["Label", "list", "Checkbutton", "Entry", "run", "Toplevel", "Frame", "main", "_setup_dialog", "Button", "Radiobutton", "map", "print"], "class_names": ["_searchbase", "SearchDialogBase"], "class_method_calls": ["self.buttonframe", "self.make_entry", "top.wm_title", "self.default_command", "self.engine", "options.append", "self.create_command_buttons", "top.wm_iconname", "self.icon", "top.grid_columnconfigure", "self.create_option_buttons", "self.create_entries", "engine.casevar", "self.close", "self.frame", "top.protocol", "self.create_other_buttons", "self.title", "parent.geometry", "f.grid", "self.root", "label.grid", "btn.pack", "entry.grid", "self.needwrapbutton", "self.make_button", "self.make_frame", "root.bell", "engine.wrapvar", "self.top", "self.text", "self.ent", "text.winfo_toplevel", "self.row", "self.bell", "top.grid_rowconfigure", "b.grid", "searchengine.get", "top.bind", "engine.revar", "b.lower", "engine.wordvar", "frame.grid", "re.split", "self.create_widgets"]}, "searchengine.py": {"libraries": ["re", "tkinter.messagebox", "tkinter.TclError", "tkinter.BooleanVar", "unittest.main", "tkinter.StringVar"], "function_names": ["isword", "get_selection", "isre", "getprog", "iswrap", "report_error", "iscase", "get", "search_text", "__init__", "getcookedpat", "isback", "search_forward", "setpat", "setcookedpat", "search_reverse", "get_line_col", "getpat", "search_backward"], "function_calls": ["search_reverse", "len", "BooleanVar", "map", "get_line_col", "str", "get_selection", "main", "SearchEngine", "StringVar", "hasattr"], "class_names": ["SearchEngine"], "class_method_calls": ["re.error", "self.report_error", "self.backvar", "text.get", "self.casevar", "index.split", "re.escape", "self.setpat", "self.isback", "self.wrapvar", "self.iscase", "re.IGNORECASE", "self.getcookedpat", "self.root", "messagebox.showerror", "m.end", "pos.split", "self.wordvar", "e.pos", "m.span", "self.getpat", "m.start", "self.getprog", "self.search_forward", "text.index", "self.patvar", "self.revar", "self.isre", "root._searchengine", "self.search_backward", "re.compile", "prog.search", "self.isword", "e.msg"]}, "sidebar.py": {"libraries": ["tkinter", "idlelib.config.idleConf", "idlelib.idle_test.test_sidebar.Dummy_editwin", "idlelib.idle_test.htest.run", "functools", "unittest.main", "idlelib.delegator.Delegator", "itertools"], "function_names": ["update_font", "_linenumbers_drag_scrolling", "b1_drag_handler", "redirect_focusin_event", "redirect_yscroll_event", "redirect_mousebutton_event", "delete", "_update_colors", "__init__", "selection_handler", "update_colors", "show_sidebar", "get_end_linenumber", "bind_events", "redirect_mousewheel_event", "insert", "get_widget_padding", "b1_mousedown_handler", "update_sidebar_text", "drag_update_selection_and_insert_mark", "_update_font", "b1_mouseup_handler", "bind_mouse_event", "hide_sidebar"], "function_calls": ["sorted", "LineNumbers", "EndLineDelegator", "str", "range", "ValueError", "get_end_linenumber", "run", "int", "type", "get_widget_padding", "float", "drag_update_selection_and_insert_mark", "len", "main", "sum", "bind_mouse_event", "Dummy_editwin", "map"], "class_names": ["EndLineDelegator", "LineNumbers", "BaseSideBar"], "class_method_calls": ["tk.RIGHT", "idleConf.CurrentTheme", "self.changed_callback", "tk.Scrollbar", "self.update_sidebar_text", "editwin.text_frame", "widget.grid_info", "widget.pack_info", "tk.DISABLED", "self.redirect_yscroll_event", "self.prev_end", "self.update_colors", "text.insert", "editwin.vbar", "Delegator.__init__", "widget.winfo_manager", "tk.NONE", "linenumbers.show_sidebar", "functools.partial", "itertools.chain", "self.redirect_mousewheel_event", "text_frame.columnconfigure", "self.redirect_mousebutton_event", "tk.LEFT", "idleConf.GetHighlight", "tk.NORMAL", "delegator.delegate", "self.editwin", "tk.Text", "event.y", "tk.NSEW", "self.redirect_focusin_event", "text.index", "widget.tk", "event.delta", "text_frame.pack", "self.text", "text_frame.rowconfigure", "self.bind_events", "tk.Frame", "self._update_font", "text.grid", "idleConf.GetFont", "self.parent", "self.is_shown", "editwin.text", "widget.cget", "BaseSideBar.__init__", "self.sidebar_text", "self.update_font", "self._update_colors", "tk.Toplevel", "end_line_delegator.setdelegate", "self.delegate", "tk.BOTH", "self._sidebar_width_type", "delegator.resetcache"]}, "squeezer.py": {"libraries": ["re", "idlelib.config.idleConf", "tkinter", "idlelib.textview.view_text", "tkinter.messagebox", "idlelib.tooltip.Hovertip", "idlelib.macosx", "unittest.main"], "function_names": ["copy", "squeeze_current_text_event", "set_is_dangerous", "count_lines", "count_lines_with_wrapping", "__init__", "expand", "context_menu_event", "mywrite", "view", "reload"], "function_calls": ["write", "len", "any", "Hovertip", "getattr", "count_lines_with_wrapping", "int", "main", "ExpandingButton", "view_text"], "class_names": ["Squeezer", "ExpandingButton"], "class_method_calls": ["self.expandingbuttons", "tk.RIGHT", "text.mark_gravity", "squeezer.editwin", "self.squeezer", "self.count_lines", "rmenu.add_command", "tk.Button", "self.rmenu_specs", "tk.INSERT", "event.x_root", "self.clipboard_append", "Squeezer.reload", "self.window_width_delta", "rmenu.tk_popup", "self.clipboard_clear", "self.tags", "self.is_dangerous", "self.expand", "self.auto_squeeze_min_lines", "tk.Menu", "event.x", "self.s", "editwin.per", "tk.LEFT", "cls.auto_squeeze_min_lines", "m.start", "self.editwin", "re.finditer", "self.base_text", "idleConf.GetOption", "messagebox.CANCEL", "event.y", "self.bind", "self.text", "text.see", "event.y_root", "editwin.write", "text.cget", "line_match.group", "self.after_idle", "editwin.text", "self.set_is_dangerous", "self.context_menu_event", "text.window_create", "self.numoflines", "text.update", "macosx.isAquaTk", "self.selection_handle", "messagebox.askokcancel"]}, "stackviewer.py": {"libraries": ["tkinter", "idlelib.tree.TreeItem", "sys", "os", "idlelib.debugobj.make_objecttreeitem", "idlelib.idle_test.htest.run", "idlelib.tree.ScrolledCanvas", "idlelib.tree.TreeNode", "idlelib.debugobj.ObjectTreeItem", "idlelib.pyshell.PyShellFileList", "unittest.main", "linecache"], "function_names": ["GetSubList", "_stack_viewer", "GetText", "StackBrowser", "GetLabelText", "get_stack", "setfunction", "__init__", "IsExpandable", "OnDoubleClick", "get_exception"], "function_calls": ["len", "TreeNode", "PyShellFileList", "StackBrowser", "VariablesTreeItem", "run", "str", "main", "StackTreeItem", "make_objecttreeitem", "map", "FrameTreeItem", "ScrolledCanvas", "hasattr"], "class_names": ["VariablesTreeItem", "FrameTreeItem", "StackTreeItem"], "class_method_calls": ["sys.last_value", "self.stack", "sys.last_traceback", "self.info", "sc.canvas", "tb.tb_frame", "frame.f_locals", "parent.geometry", "self.flist", "self.object", "code.co_filename", "tb.tb_next", "sourceline.strip", "stack.append", "sys.exc_info", "frame.f_globals", "sc.frame", "top.geometry", "frame.f_code", "node.expand", "self.text", "self.get_exception", "top.title", "tb.tb_lineno", "os.path", "sys.last_type", "self.labeltext", "linecache.getline", "self.get_stack", "tk.Toplevel", "code.co_name", "type.__name__", "sublist.append"]}, "statusbar.py": {"libraries": ["tkinter.ttk.Button", "unittest.main", "tkinter.Text", "idlelib.idle_test.htest.run", "tkinter.ttk.Frame", "tkinter.ttk.Label", "tkinter.Toplevel"], "function_names": ["_multistatus_bar", "__init__", "set_label", "change"], "function_calls": ["Label", "run", "Toplevel", "Frame", "main", "Text", "Button", "MultiStatusBar", "map"], "class_names": ["MultiStatusBar"], "class_method_calls": ["self.labels", "msb.set_label", "parent.geometry", "top.geometry", "label.config", "label.pack", "frame.pack", "Frame.__init__", "text.pack", "button.pack", "msb.pack", "top.title"]}, "textview.py": {"libraries": ["tkinter.ttk.Scrollbar", "idlelib.colorizer.color_config", "tkinter.ttk.Button", "tkinter.NSEW", "tkinter.messagebox.showerror", "tkinter.NONE", "unittest.main", "tkinter.Text", "tkinter.TclError", "tkinter.VERTICAL", "tkinter.WORD", "tkinter.NS", "idlelib.idle_test.htest.run", "tkinter.HORIZONTAL", "tkinter.ttk.Frame", "tkinter.SUNKEN", "tkinter.EW", "tkinter.Toplevel"], "function_names": ["pack", "ok", "set", "__init__", "view_file", "view_text", "place"], "function_calls": ["ScrollableTextFrame", "AutoHideScrollbar", "super", "run", "ViewWindow", "str", "ViewFrame", "TclError", "main", "Text", "Button", "open", "showerror", "float", "color_config", "view_text"], "class_names": ["ScrollableTextFrame", "AutoHideScrollbar", "ViewWindow", "ViewFrame"], "class_method_calls": ["text.configure", "self.transient", "file.read", "self.destroy", "self.grid_rowconfigure", "button_ok.pack", "self.protocol", "text.insert", "self.grid_remove", "self.textframe", "self.is_modal", "self.wait_window", "self.title", "parent.winfo_rootx", "self.button_ok", "self.viewframe", "text.yview", "self.xscroll", "self.bind", "self.text", "self.grid", "text.grid", "self.grab_set", "text.xview", "self.parent", "self.ok", "text.focus_set", "self.yscroll", "self.geometry", "self.__class__", "self.grab_release", "self.grid_columnconfigure", "parent.winfo_rooty"]}, "tooltip.py": {"libraries": ["idlelib.idle_test.htest.run", "unittest.main", "tkinter.*"], "function_names": ["__del__", "showtip", "_tooltip", "unschedule", "hidetip", "position_window", "_hide_event", "showcontents", "schedule", "__init__", "get_position", "_show_event"], "function_calls": ["Label", "Hovertip", "super", "run", "Toplevel", "main", "Button", "map"], "class_names": ["Hovertip", "TooltipBase", "OnHoverTooltipBase"], "class_method_calls": ["tw._w", "self._id3", "self.get_position", "self.position_window", "self.unschedule", "tw.destroy", "tw.wm_overrideredirect", "self.anchor_widget", "self.showtip", "button1.pack", "tw.tk", "parent.geometry", "self.showcontents", "self._show_event", "top.geometry", "self.schedule", "self.text", "self.hover_delay", "self._id1", "self.tipwindow", "top.title", "self._hide_event", "label.pack", "self._after_id", "self.hidetip", "self._id2", "button2.pack"]}, "tree.py": {"libraries": ["time.perf_counter", "turtle.Turtle", "turtle.mainloop"], "function_names": ["main", "tree", "maketree"], "function_calls": ["maketree", "clock", "mainloop", "tree", "Turtle", "main", "print"], "class_names": [], "class_method_calls": ["p.setundobuffer", "p.getscreen", "p.hideturtle", "p.penup", "p.forward", "p.left", "p.pendown", "q.right", "p.speed", "lst.append", "p.clone"]}, "undo.py": {"libraries": ["tkinter.Text", "tkinter.Button", "idlelib.idle_test.htest.run", "pprint.pprint", "string", "unittest.main", "idlelib.delegator.Delegator", "idlelib.percolator.Percolator", "tkinter.Toplevel"], "function_names": ["get_saved", "append", "reset_undo", "__repr__", "check_saved", "redo_event", "do", "setdelegate", "save_marks", "bump_depth", "undo_event", "delete", "__init__", "set_saved_change_hook", "undo", "__len__", "set_marks", "addcmd", "insert", "redo", "undo_block_stop", "merge", "undo_block_start", "dump_event", "getcmd", "set_saved", "classify", "_undo_delegator"], "function_calls": ["pprint", "len", "UndoDelegator", "run", "Toplevel", "Percolator", "CommandSequence", "DeleteCommand", "main", "Text", "Button", "repr", "InsertCommand", "map", "print"], "class_names": ["UndoDelegator", "CommandSequence", "DeleteCommand", "Command", "InsertCommand"], "class_method_calls": ["self.undolist", "Delegator.setdelegate", "cmd.undo", "text.mark_set", "cmd.redo", "string.digits", "d.undo_event", "cmd.tags", "text.get", "self.classify", "cmds.reverse", "self.index1", "self.chars", "self.marks_after", "marks.items", "text.insert", "Delegator.__init__", "strs.append", "cmd.do", "self.was_saved", "undo.pack", "text.delete", "self.tags", "self.unbind", "self.undo_event", "parent.geometry", "text.compare", "text.mark_names", "d.redo_event", "cmd.index1", "lastcmd.merge", "self.cmds", "cmd.chars", "text.index", "d.dump_event", "self.check_saved", "self.alphanumeric", "self.pointer", "cmd.index2", "text.see", "self.reset_undo", "undowin.title", "self.marks_before", "self.bind", "self.saved_change_hook", "self.index2", "undowin.geometry", "self.depth", "dump.pack", "self.max_undo", "cmd.__class__", "string.ascii_letters", "cmd.getcmd", "self.bell", "text.focus_set", "self.delegate", "self.saved", "Command.__init__", "self.dump_event", "self.undoblock", "self.__class__", "text.pack", "p.insertfilter", "self.addcmd", "self.set_saved", "self.get_saved", "self.can_merge", "redo.pack", "self.redo_event", "self.set_marks", "self.save_marks"]}, "window.py": {"libraries": ["sys", "tkinter.TclError", "unittest.main", "tkinter.Toplevel"], "function_names": ["call_callbacks", "get_title", "delete", "update_windowlist_registry", "wakeup", "__init__", "add", "unregister_callback", "destroy", "register_callback", "add_windows_to_menu"], "function_calls": ["str", "callback", "main", "WindowList", "print"], "class_names": ["ListedToplevel", "WindowList"], "class_method_calls": ["registry.add_windows_to_menu", "self.callbacks", "registry.delete", "window.get_title", "registry.register_callback", "self.call_callbacks", "window.after_idle", "list.sort", "self.wm_state", "self.quit", "window.wakeup", "self.focused_widget", "Toplevel.__init__", "sys.exc_info", "registry.call_callbacks", "registry.dict", "registry.unregister_callback", "self.wm_withdraw", "list.append", "self.wm_title", "menu.add_command", "Toplevel.destroy", "self.tkraise", "self.wm_deiconify", "registry.add", "self.dict"]}, "zoomheight.py": {"libraries": ["sys", "re", "unittest.main", "tkinter"], "function_names": ["zoom_height_event", "get_max_height_and_y_coord", "zoom_height", "__init__", "get_window_geometry", "set_window_geometry"], "function_calls": ["tuple", "get_window_geometry", "main", "map", "WmInfoGatheringError", "set_window_geometry"], "class_names": ["ZoomHeight", "WmInfoGatheringError"], "class_method_calls": ["self.zoom_height", "top.winfo_screenheight", "top.wm_geometry", "sys.platform", "self.editwin", "top.wm_state", "self.get_max_height_and_y_coord", "self._max_height_and_y_coords", "tkinter.TclError", "self.top", "top.update", "top.winfo_rooty", "m.groups", "re.match", "top.winfo_screenwidth"]}, "zzdummy.py": {"libraries": ["unittest", "functools.wraps", "idlelib.config.idleConf"], "function_names": ["apply", "z_in_event", "format_selection", "__init__", "z_out_event", "reload"], "function_calls": ["len", "wraps", "range", "format_line"], "class_names": ["ZzDummy"], "class_method_calls": ["cls.ztext", "editwin.text", "self.editwin", "idleConf.GetOption", "self.ztext", "self.text", "line.startswith", "editwin.fregion", "ZzDummy.reload", "unittest.main", "self.formatter"]}, "imaplib.py": {"libraries": ["hmac", "re", "time", "io.DEFAULT_BUFFER_SIZE", "getopt", "datetime.datetime", "datetime.timedelta", "binascii", "random", "ssl", "sys", "warnings", "getpass", "subprocess", "datetime.timezone", "socket", "errno", "calendar"], "function_names": ["lsub", "_untagged_response", "decode", "copy", "store", "__init__", "_create_socket", "_check_bye", "open", "authenticate", "capability", "partial", "_match", "_new_tag", "xatom", "response", "encode", "noop", "ParseFlags", "_dump_ur", "__exit__", "_mode_ascii", "_get_response", "_log", "recent", "setannotation", "uid", "_append_untagged", "getannotation", "namespace", "list", "Internaldate2tuple", "process", "_connect", "starttls", "deleteacl", "setacl", "myrights", "status", "fetch", "enable", "search", "append", "rename", "_CRAM_MD5_AUTH", "login_cram_md5", "create", "socket", "thread", "unsubscribe", "close", "getquota", "_mesg", "Time2Internaldate", "_get_capabilities", "getacl", "logout", "subscribe", "readline", "__getattr__", "check", "_mode_utf8", "_simple_command", "getquotaroot", "shutdown", "login", "select", "__enter__", "delete", "_command_complete", "proxyauth", "_quote", "run", "_get_line", "Int2AP", "read", "send", "print_log", "setquota", "_command", "_get_tagged_response", "expunge", "sort"], "function_calls": ["getattr", "IMAP4_stream", "abs", "_Authenticator", "isinstance", "AttributeError", "datetime", "str", "tuple", "timezone", "IMAP4", "literator", "timedelta", "ValueError", "run", "int", "type", "Time2Internaldate", "enumerate", "Int2AP", "divmod", "len", "bytes", "map", "print"], "class_names": ["_Authenticator", "IMAP4_SSL", "error", "IMAP4_stream", "abort", "IMAP4", "readonly"], "class_method_calls": ["mechanism.upper", "IMAP4.open", "self._log", "self._mode_utf8", "self.debug", "self.untagged_responses", "M._mesg", "self.readonly", "ur.get", "self._simple_command", "self.print_log", "IMAP4._create_socket", "self.host", "date_time.tm_gmtoff", "M.PROTOCOL_VERSION", "self.utf8_enabled", "dat.upper", "self._quote", "time.localtime", "self._mode_ascii", "re.ASCII", "self._create_socket", "dt.month", "self.authenticate", "getopt.error", "self.writefile", "sys.stderr", "cre.match", "self._dump_ur", "self._match", "self.tagged_commands", "self._cmd_log_len", "sys.argv", "self.capabilities", "ssl._create_stdlib_context", "self.capability", "self._get_response", "sys.audit", "self._command_complete", "self.keyfile", "self.abort", "code.upper", "self.shutdown", "self._encoding", "time.timezone", "hmac.HMAC", "self._check_bye", "ml.split", "self._CRAM_MD5_AUTH", "time.altzone", "s.encode", "self._tls_established", "subprocess.Popen", "warnings.warn", "self.mech", "self.error", "exc.errno", "self._new_tag", "self.decode", "self.readfile", "self._cmd_log_idx", "self.continuation_response", "self.readline", "Flags.match", "binascii.b2a_base64", "self._get_tagged_response", "self.sock", "self.port", "self.certfile", "IMAP4.error", "name.upper", "time.mktime", "re.match", "self.Literal", "cre.pattern", "self.state", "errno.ENOTCONN", "self.open", "dict.items", "self.ssl_context", "getpass.getpass", "self.noop", "self._connect", "command.upper", "socket.create_connection", "self.tagnum", "mo.group", "datetime.fromtimestamp", "getopt.getopt", "self.tagpre", "self.literal", "time.strftime", "IMAP4.__init__", "MapCRLF.sub", "subprocess.PIPE", "self.send", "self.mo", "random.randint", "line.endswith", "self._command", "capability.upper", "InternalDate.match", "time.time", "re.compile", "self.process", "attr.lower", "ssl_context.wrap_socket", "dt.strftime", "timezone.utc", "self.is_readonly", "inp.encode", "self._cmd_log", "self.command", "self.PROTOCOL_VERSION", "self.welcome", "self._mesg", "self.logout", "self._append_untagged", "getpass.getuser", "self.Untagged_status", "self._untagged_response", "t.join", "arg.replace", "date_time.tzinfo", "calendar.timegm", "M.state", "binascii.a2b_base64", "self.read", "time.daylight", "self.file", "dat.split", "self._get_capabilities", "self.password", "self.tagre", "self.user", "M.capabilities", "self._get_line", "self.encode", "socket.SHUT_RDWR", "__all__.append"]}, "imghdr.py": {"libraries": ["sys", "os", "os.PathLike", "glob"], "function_names": ["test_webp", "test", "test_tiff", "test_exr", "test_bmp", "testall", "what", "test_jpeg", "test_pgm", "test_gif", "test_ppm", "test_xbm", "test_png", "test_rgb", "test_pbm", "test_rast"], "function_calls": ["isinstance", "len", "test", "tf", "testall", "what", "open", "ord", "print"], "class_names": [], "class_method_calls": ["os.path", "file.read", "sys.exit", "file.tell", "sys.stderr", "glob.escape", "sys.argv", "h.startswith", "f.close", "f.read", "glob.glob", "sys.stdout", "file.seek", "tests.append"]}, "imp.py": {"libraries": ["_imp._fix_co_filename", "importlib.machinery", "_imp.lock_held", "_imp.get_frozen_object", "warnings", "_imp.is_builtin", "types", "importlib.util", "_imp.is_frozen", "os", "importlib._bootstrap_external.SourcelessFileLoader", "importlib._bootstrap._builtin_from_name", "_imp.is_frozen_package", "importlib._bootstrap._load", "_imp.acquire_lock", "tokenize", "_imp.init_frozen", "importlib._bootstrap._exec", "importlib", "sys", "importlib._bootstrap._ERR_MSG", "_imp.release_lock", "_imp.create_dynamic"], "function_names": ["load_dynamic", "get_suffixes", "cache_from_source", "load_compiled", "find_module", "get_magic", "get_data", "source_from_cache", "new_module", "get_tag", "__init__", "load_module", "load_source", "init_builtin", "reload", "load_package"], "function_calls": ["_builtin_from_name", "is_frozen", "RuntimeError", "load_dynamic", "isinstance", "super", "ImportError", "is_builtin", "open", "init_builtin", "load_package", "ValueError", "_LoadCompiledCompatibility", "_LoadSourceCompatibility", "type", "get_suffixes", "load_compiled", "_exec", "init_frozen", "TypeError", "SourcelessFileLoader", "load_source", "_load"], "class_names": ["_LoadCompiledCompatibility", "_LoadSourceCompatibility", "_HackedGetData", "NullImporter"], "class_method_calls": ["importlib.machinery", "file.mode", "machinery.EXTENSION_SUFFIXES", "file.read", "util.cache_from_source", "tokenize.detect_encoding", "importlib.reload", "sys.modules", "_ERR_MSG.format", "machinery.SourceFileLoader", "warnings.warn", "machinery.SOURCE_SUFFIXES", "warnings.catch_warnings", "util.source_from_cache", "warnings.simplefilter", "util.spec_from_file_location", "file.readline", "self.file", "self.path", "file.close", "types.ModuleType", "sys.path", "os.path", "mode.startswith", "sys.implementation", "util.MAGIC_NUMBER", "module.__loader__", "machinery.BYTECODE_SUFFIXES", "module.__spec__"]}, "_bootstrap.py": {"libraries": ["_frozen_importlib_external"], "function_names": ["_builtin_from_name", "_requires_frozen_wrapper", "_get_module_lock", "_calc___package__", "__exit__", "_requires_builtin_wrapper", "_load_module_shim", "_install", "_spec_from_module", "_module_repr_from_spec", "cb", "_find_and_load_unlocked", "exec_module", "release", "acquire", "__repr__", "__eq__", "_wrap", "_init_module_attrs", "parent", "__import__", "__enter__", "_requires_builtin", "_install_external_importers", "_find_spec", "__init__", "_handle_fromlist", "_gcd_import", "_load_unlocked", "_new_module", "get_source", "find_spec", "_setup", "load_module", "module_repr", "has_deadlock", "find_module", "_requires_frozen", "_resolve_name", "_call_with_frames_removed", "_load_backward_compatible", "spec_from_loader", "_verbose_message", "is_package", "_sanity_check", "_lock_unlock_module", "module_from_spec", "get_code", "_module_repr", "_exec", "_find_spec_legacy", "_find_and_load", "create_module", "has_location", "_load", "cached"], "function_calls": ["_builtin_from_name", "object", "_get_module_lock", "_calc___package__", "getattr", "_load_module_shim", "_DummyModuleLock", "_spec_from_module", "_module_repr_from_spec", "_find_and_load_unlocked", "classmethod", "id", "_wrap", "_init_module_attrs", "fxn", "RuntimeError", "isinstance", "ImportError", "ModuleSpec", "_find_spec", "_handle_fromlist", "_gcd_import", "_load_unlocked", "_new_module", "_ImportLockContext", "find_spec", "_setup", "_DeadlockError", "setattr", "ValueError", "list", "_ModuleLock", "type", "_resolve_name", "_call_with_frames_removed", "_load_backward_compatible", "spec_from_loader", "bool", "_verbose_message", "ModuleNotFoundError", "f", "_sanity_check", "hasattr", "len", "_lock_unlock_module", "module_from_spec", "_ModuleLockManager", "_exec", "_find_spec_legacy", "_find_and_load", "spec_from_file_location", "TypeError", "_load", "exec", "print"], "class_names": ["_ModuleLock", "_ModuleLockManager", "BuiltinImporter", "_DummyModuleLock", "ModuleSpec", "_ImportLockContext", "_DeadlockError", "FrozenImporter"], "class_method_calls": ["BuiltinImporter.find_spec", "_NamespaceLoader.__new__", "other.origin", "cached.setter", "spec.loader", "_bootstrap_external._NamespaceLoader", "spec.origin", "self.count", "self.origin", "spec._set_fileattr", "other.cached", "spec._initializing", "sys.meta_path", "_thread.get_ident", "_imp.is_frozen_package", "spec.name", "_imp.acquire_lock", "self._cached", "module.__file__", "sys.stderr", "m.__name__", "spec.cached", "loader._ORIGIN", "parent_module.__path__", "module.__spec__", "module.__all__", "self.has_location", "_ERR_MSG.format", "self.loader", "module.__package__", "_imp.exec_builtin", "_frozen_importlib_external._install", "lock.acquire", "_imp.create_builtin", "module.__cached__", "module.__name__", "finder.find_module", "self.has_deadlock", "self.wakeup", "loader._path", "cls._ORIGIN", "module.__path__", "other.loader", "loader.module_repr", "loader.is_package", "sys.flags", "self.cached", "cls.find_spec", "self._set_fileattr", "message.format", "self._name", "other.name", "_weakref.ref", "sys.builtin_module_names", "package.rpartition", "_imp.is_frozen", "self.lock", "lock.release", "_blocking_on.get", "_bootstrap_external._get_cached", "_bootstrap_external.spec_from_file_location", "self.owner", "self._lock", "finder.find_spec", "_thread.allocate_lock", "_module_locks.get", "new.__dict__", "self.submodule_search_locations", "self.loader_state", "_imp.release_lock", "module.__loader__", "globals.get", "self.waiters", "package.rsplit", "_imp.get_frozen_object", "has_location.setter", "FrozenImporter._ORIGIN", "sys.modules", "_imp.is_builtin", "module.__dict__", "other.has_location", "self.name", "old.__dict__", "name.partition", "lock.owner", "spec.has_location", "exc.name", "name.rpartition", "spec.submodule_search_locations", "_warnings.warn", "spec.parent", "self.__class__", "args.append", "message.startswith", "other.submodule_search_locations"]}, "_bootstrap_external.py": {"libraries": ["importlib.metadata.MetadataPathFinder", "tokenize", "_io", "sys", "winreg", "_warnings", "posix", "_imp", "nt", "marshal"], "function_names": ["cache_from_source", "_find_module_shim", "_install", "path_mtime", "exec_module", "get_filename", "_wrap", "__init__", "find_loader", "_check_name", "__iter__", "_path_isfile", "_cache_bytecode", "__setitem__", "_path_stat", "path_hook", "set_data", "_validate_hash_pyc", "_make_relax_case", "_code_to_timestamp_pyc", "create_module", "_compile_bytecode", "_legacy_get_spec", "find_distributions", "_write_atomic", "_recalculate", "open_resource", "_path_isabs", "get_resource_reader", "path_stats", "_find_parent_path_names", "_validate_timestamp_pyc", "_fix_up_module", "_search_registry", "load_module", "module_repr", "decode_source", "_path_importer_cache", "find_module", "get_data", "_get_cached", "_pack_uint32", "get_code", "_path_isdir", "spec_from_file_location", "_get_supported_file_loaders", "__getitem__", "__contains__", "append", "_fill_cache", "_get_sourcefile", "__repr__", "_path_hooks", "get_source", "find_spec", "_setup", "_unpack_uint32", "resource_path", "_get_parent_path", "_check_name_wrapper", "_unpack_uint16", "_path_is_mode_type", "_get_spec", "_path_join", "_relax_case", "path_hook_for_FileFinder", "_code_to_hash_pyc", "__eq__", "_open_registry", "source_from_cache", "_calc_mode", "contents", "is_resource", "_path_split", "__len__", "is_package", "__hash__", "_classify_pyc", "source_to_code", "invalidate_caches"], "function_calls": ["object", "cache_from_source", "_code_to_hash_pyc", "getattr", "cls", "reversed", "all", "memoryview", "hook", "id", "_write_atomic", "_wrap", "_path_isabs", "isinstance", "super", "iter", "str", "ImportError", "_validate_timestamp_pyc", "tuple", "_NamespacePath", "source_from_cache", "_calc_mode", "hash", "_setup", "_unpack_uint32", "setattr", "ValueError", "list", "_path_split", "method", "decode_source", "set", "int", "type", "_path_is_mode_type", "_path_isfile", "_path_stat", "_pack_uint32", "hasattr", "bytearray", "_path_join", "len", "any", "compile", "max", "EOFError", "_validate_hash_pyc", "NotImplementedError", "_classify_pyc", "_make_relax_case", "loader", "_relax_case", "_code_to_timestamp_pyc", "_path_isdir", "spec_from_file_location", "SourceFileLoader", "TypeError", "SourcelessFileLoader", "_get_supported_file_loaders", "map", "loader_class", "_compile_bytecode"], "class_names": ["WindowsRegistryFinder", "PathFinder", "_NamespaceLoader", "_NamespacePath", "ExtensionFileLoader", "SourceFileLoader", "FileLoader", "_LoaderBasics", "SourcelessFileLoader", "SourceLoader", "FileFinder"], "class_method_calls": ["SOURCE_SUFFIXES.append", "_imp._fix_co_filename", "_imp.exec_dynamic", "self.__dict__", "cls._open_registry", "_io.FileIO", "_bootstrap._imp", "sys.path_hooks", "self._relaxed_path_cache", "optimization.isalnum", "spec.loader", "_os.unlink", "path_sep.join", "_imp.extension_suffixes", "path.startswith", "spec.origin", "_os.O_CREAT", "spec._set_fileattr", "_winreg.HKEY_LOCAL_MACHINE", "_bootstrap._builtin_from_name", "self._recalculate", "sys.meta_path", "optimization.startswith", "spec.name", "_imp.check_hash_based_pycs", "self.get_code", "_bootstrap.ModuleSpec", "pycache_filename.partition", "self.path_mtime", "_os.stat", "pycache_filename.rsplit", "self._path_finder", "_io.open_code", "lower_suffix_contents.add", "_winreg.QueryValue", "tail.rpartition", "self._cache_bytecode", "namespace_path.extend", "sys.implementation", "sys.path_importer_cache", "self._find_parent_path_names", "_bootstrap.sys", "_write_atomic.__code__", "_os.mkdir", "self._path_mtime", "int.from_bytes", "_io.BytesIO", "new_root.endswith", "tail_module.lower", "_imp.source_hash", "self.get_data", "cls._get_spec", "marshal.loads", "location.endswith", "cls._search_registry", "new_root.rstrip", "self._get_spec", "cls._path_hooks", "cls._legacy_get_spec", "cls._path_importer_cache", "root.startswith", "module.__name__", "_bootstrap.spec_from_loader", "finder.find_module", "_os.open", "FileFinder.path_hook", "self.set_data", "head.lstrip", "data.extend", "sys.dont_write_bytecode", "msg.format", "path.append", "st.st_mtime", "sys.version_info", "EXTENSION_SUFFIXES.extend", "path_parts.append", "self.find_loader", "extension.lower", "_imp.create_dynamic", "loader.is_package", "pycache_filename.count", "sys.platform", "sys.flags", "_bootstrap._verbose_message", "cls.find_spec", "finder.find_loader", "_os.replace", "MetadataPathFinder.find_distributions", "_os.listdir", "_bootstrap._call_with_frames_removed", "self._name", "self._fill_cache", "loader.get_filename", "stat_info.st_mode", "filename.rsplit", "self.is_resource", "part.rstrip", "p.rstrip", "loaders.extend", "WindowsRegistryFinder.DEBUG_BUILD", "filename.endswith", "opt_level.isalnum", "self._path_cache", "_os.fspath", "self.source_to_code", "self.path", "finder.find_spec", "self._get_parent_path", "_winreg.OpenKey", "filepath.endswith", "_os._path_splitroot", "_os.O_EXCL", "fullname.rpartition", "bytecode_path.rpartition", "ns.get", "new.__dict__", "cls.REGISTRY_KEY", "other.__class__", "self._last_parent_path", "self.is_package", "new_root.casefold", "cls.REGISTRY_KEY_DEBUG", "self._path", "new_root.startswith", "file.read", "_io.IncrementalNewlineDecoder", "source_bytes.decode", "_os.O_WRONLY", "tokenize.detect_encoding", "self.get_filename", "sys.modules", "cls.DEBUG_BUILD", "registry_key.format", "suffix.lower", "module.__dict__", "self.find_spec", "_winreg.HKEY_CURRENT_USER", "self.name", "old.__dict__", "_os.environ", "root.casefold", "root.endswith", "other.__dict__", "newline_decoder.decode", "st.st_size", "marshal.dumps", "self.path_stats", "head.startswith", "_os.getcwd", "self._loaders", "finder.invalidate_caches", "sys.pycache_prefix", "fn.lower", "spec.submodule_search_locations", "_warnings.warn", "item.partition", "_bootstrap._wrap", "_bootstrap._load_module_shim", "sys.path", "path.rfind", "self.__class__", "file.write"]}, "machinery.py": {"libraries": ["_bootstrap_external.OPTIMIZED_BYTECODE_SUFFIXES", "_bootstrap_external.FileFinder", "_bootstrap_external.SourcelessFileLoader", "_bootstrap_external.WindowsRegistryFinder", "_bootstrap.BuiltinImporter", "_bootstrap_external.SOURCE_SUFFIXES", "_bootstrap_external.EXTENSION_SUFFIXES", "_bootstrap_external.PathFinder", "_bootstrap.ModuleSpec", "_bootstrap_external.ExtensionFileLoader", "_imp", "_bootstrap_external.BYTECODE_SUFFIXES", "_bootstrap.FrozenImporter", "_bootstrap_external.SourceFileLoader", "_bootstrap_external.DEBUG_BYTECODE_SUFFIXES"], "function_names": ["all_suffixes"], "function_calls": [], "class_names": [], "class_method_calls": []}, "metadata.py": {"libraries": ["abc", "posixpath", "contextlib.suppress", "io", "importlib.import_module", "itertools.starmap", "zipfile", "collections", "pathlib", "os", "functools", "itertools", "email", "re", "operator", "csv", "importlib.abc.MetaPathFinder", "configparser.ConfigParser", "sys"], "function_names": ["at", "version", "children", "search", "find_distributions", "joinpath", "_read_egg_info_reqs", "read_binary", "make_file", "make_condition", "__repr__", "distribution", "_convert_egg_info_reqs_to_simple_reqs", "__reduce__", "files", "_read_dist_info_reqs", "distributions", "_from_text", "_search_paths", "__init__", "_read_files_distinfo", "_read_files_egginfo", "zip_children", "_discover_resolvers", "locate", "metadata", "load", "_from_config", "is_egg", "__iter__", "_deps_from_requires_text", "_read_sections", "discover", "path", "from_name", "parse_condition", "read_text", "extras", "locate_file", "requires", "entry_points"], "function_calls": ["sorted", "getattr", "cls", "make_condition", "distribution", "vars", "ConfigParser", "resolver", "iter", "suppress", "distributions", "tuple", "PackagePath", "locals", "PathDistribution", "ValueError", "list", "PackageNotFoundError", "int", "next", "FileHash", "starmap", "Context", "Prepared", "parse_condition", "import_module", "filter", "map"], "class_names": ["Prepared", "Distribution", "Context", "FastPath", "EntryPoint", "PackageNotFoundError", "PackagePath", "FileHash", "MetadataPathFinder", "DistributionFinder", "PathDistribution"], "class_method_calls": ["path.search", "cls._discover_resolvers", "cls._search_paths", "functools.reduce", "self.zip_children", "config.read_string", "spec.partition", "cls._convert_egg_info_reqs_to_simple_reqs", "posixpath.sep", "cls._read_sections", "self.base", "sys.meta_path", "operator.itemgetter", "config.readfp", "self.is_egg", "self.joinpath", "self.children", "zip_path.root", "context.name", "n_low.startswith", "abc.abstractmethod", "self.read_text", "base.startswith", "self.exact_matches", "search.prefix", "read_text.__doc__", "source.splitlines", "dict.fromkeys", "self.root", "self.locate", "config.items", "io.StringIO", "n_low.endswith", "self.mode", "section.partition", "child.split", "text.splitlines", "name.lower", "DistributionFinder.Context", "child.lower", "config.optionxform", "os.path", "operator.attrgetter", "search.versionless_egg_name", "re.match", "self._deps_from_requires_text", "base.endswith", "self.value", "context.path", "Distribution.read_text", "kwargs.pop", "dist.entry_points", "itertools.chain", "EntryPoint._from_config", "self.pattern", "self.metadata", "self.normalized", "Distribution.from_name", "zip_path.joinpath", "re.finditer", "self.group", "result.dist", "config.sections", "collections.namedtuple", "self._read_files_distinfo", "re.compile", "pathlib.PurePosixPath", "os.listdir", "result.size", "match.group", "self.suffixes", "sections.items", "csv.reader", "self._path", "itertools.groupby", "email.message_from_string", "self.versionless_egg_name", "Distribution.discover", "section_match.group", "self.name", "name.exact_matches", "stream.read", "name.suffixes", "pathlib.Path", "self._read_egg_info_reqs", "zipfile.Path", "self.dist", "EntryPoint._from_text", "sys.path", "self._read_files_egginfo", "result.hash", "self.prefix", "self.__class__", "self._read_dist_info_reqs", "name.prefix"]}, "resources.py": {"libraries": ["typing.Union", "typing.Optional", "io.BytesIO", "contextlib.suppress", "typing.io.BinaryIO", "zipimport.ZipImportError", "importlib.import_module", "typing.Set", "os", "typing.Iterable", "pathlib.Path", "tempfile", "contextlib.contextmanager", "importlib.abc.ResourceLoader", "typing.cast", "types.ModuleType", "io.TextIOWrapper", "typing.Iterator", "typing.io.TextIO"], "function_names": ["_get_package", "_check_location", "open_binary", "_get_resource_reader", "read_text", "open_text", "path", "read_binary", "contents", "_normalize_path", "is_resource"], "function_calls": ["TextIOWrapper", "_get_resource_reader", "open_text", "_normalize_path", "suppress", "Path", "open", "contents", "ValueError", "_get_package", "_check_location", "set", "cast", "hasattr", "BytesIO", "open_binary", "FileNotFoundError", "import_module", "TypeError"], "class_names": [], "class_method_calls": ["file_path.exists", "os.write", "reader.resource_path", "spec.loader", "package.__spec__", "reader.is_resource", "tempfile.mkstemp", "resources_abc.ResourceReader", "reader.open_resource", "os.remove", "path.is_file", "loader.get_data", "spec.name", "os.close", "fp.read", "reader.contents", "os.path", "os.PathLike", "os.listdir", "module.__spec__"]}, "inspect.py": {"libraries": ["abc", "importlib.machinery", "enum", "warnings", "types", "token", "warnings.warn", "ast", "os", "functools", "itertools", "builtins", "re", "tokenize", "collections.abc", "collections.OrderedDict", "collections.namedtuple", "dis", "operator.attrgetter", "argparse", "importlib", "sys", "linecache"], "function_names": ["isroutine", "istraceback", "_signature_from_callable", "_signature_bound_method", "getmodulename", "tokeneater", "classify_class_attrs", "visit_Name", "_signature_from_builtin", "isgenerator", "isgeneratorfunction", "_formatannotation", "__getstate__", "unwrap", "__init__", "_check_class", "getabsfile", "_hash_basis", "getmembers", "__str__", "isabstract", "iscoroutinefunction", "getargs", "parameters", "_finddoc", "currentframe", "_signature_from_function", "from_callable", "visit_Attribute", "walktree", "from_function", "getcomments", "replace", "default", "description", "formatannotation", "convert", "ismethoddescriptor", "ismemberdescriptor", "annotation", "_missing_arguments", "isbuiltin", "getfile", "_too_many", "ismethod", "ismodule", "_signature_get_bound_param", "signature", "getattr_static", "getclasstree", "_bind", "getcoroutinestate", "trace", "getframeinfo", "cleandoc", "getdoc", "kwargs", "wrap_value", "isframe", "getclosurevars", "getsourcelines", "parse_name", "_is_wrapper", "getmodule", "getblock", "isclass", "getlineno", "__repr__", "getgeneratorstate", "_is_type", "__reduce__", "_has_code_flag", "_main", "isasyncgen", "getsource", "args", "_check_instance", "formatannotationrelativeto", "formatargandannotation", "_signature_fromstr", "_signature_get_partial", "getfullargspec", "getcallargs", "indentsize", "getouterframes", "p", "isfunction", "from_builtin", "_static_getmro", "__setstate__", "bind_partial", "_signature_strip_non_python_syntax", "getinnerframes", "isdatadescriptor", "isasyncgenfunction", "bind", "isawaitable", "apply_defaults", "getargvalues", "getargspec", "__eq__", "getsourcefile", "_signature_get_user_defined_method", "name", "formatargspec", "iscoroutine", "return_annotation", "_findclass", "isgetsetdescriptor", "_signature_is_functionlike", "kind", "_signature_is_builtin", "iscode", "stack", "getcoroutinelocals", "findsource", "__hash__", "getmro", "formatargvalues", "_shadowed_dict", "getgeneratorlocals"], "function_calls": ["isroutine", "frozenset", "istraceback", "getattr", "formatvarkw", "_signature_from_callable", "_signature_bound_method", "_signature_from_builtin", "isgenerator", "iter", "unwrap", "_check_class", "Traceback", "getabsfile", "Exception", "Attribute", "FullArgSpec", "dir", "getargs", "zip", "enumerate", "OSError", "OrderedDict", "len", "_finddoc", "warn", "_signature_from_function", "FrameInfo", "walktree", "predicate", "globals", "object", "cls", "reversed", "formatannotation", "convert", "ismethoddescriptor", "ismemberdescriptor", "_missing_arguments", "isbuiltin", "ClosureVars", "getfile", "_too_many", "ismethod", "RewriteSymbolics", "attrgetter", "str", "ismodule", "formatarg", "list", "getframeinfo", "cleandoc", "namedtuple", "Parameter", "wrap_value", "isframe", "parse_name", "getsourcelines", "min", "_is_wrapper", "getmodule", "getblock", "isclass", "id", "_is_type", "_ParameterKind", "_has_code_flag", "isinstance", "_main", "tuple", "getsource", "hash", "_check_instance", "range", "formatargandannotation", "_signature_fromstr", "_signature_get_partial", "set", "getfullargspec", "ArgInfo", "type", "getouterframes", "indentsize", "p", "isfunction", "eval", "_static_getmro", "hasattr", "any", "_signature_strip_non_python_syntax", "max", "getinnerframes", "isdatadescriptor", "ArgSpec", "formatvarargs", "BlockFinder", "formatvalue", "print", "stop", "formatreturns", "getsourcefile", "repr", "RuntimeError", "AttributeError", "issubclass", "_signature_get_user_defined_method", "ValueError", "_findclass", "_signature_is_functionlike", "next", "_signature_is_builtin", "iscode", "bool", "findsource", "getmro", "add", "callable", "TypeError", "_shadowed_dict", "Arguments"], "class_names": ["_void", "Parameter", "Signature", "RewriteSymbolics", "EndOfBlock", "BoundArguments", "_empty", "BlockFinder", "_ParameterKind"], "class_method_calls": ["entry.__dict__", "type.__call__", "param.annotation", "other._default", "func_code.co_posonlyargcount", "wrapped_sig.bind_partial", "attrs.split", "ast.NodeTransformer", "frame.f_back", "types.DynamicClassAttribute", "types.GeneratorType", "t.string", "func.__globals__", "n.value", "expline.lstrip", "self.indent", "self._default", "other._kind", "object.__flags__", "Parameter.POSITIONAL_OR_KEYWORD", "types.MethodType", "frame.f_locals", "blockfinder.tokeneater", "type.__dict__", "functools._unwrap_partial", "self.indecorator", "ast.arg", "new_params.move_to_end", "parser.add_argument", "func_code.co_varnames", "other._annotation", "node.ctx", "object.__dict__", "self.arguments", "co.co_kwonlyargcount", "posonlyargs.append", "self._kind", "cls.empty", "obj.__qualname__", "annotation.__module__", "object.co_firstlineno", "f.__func__", "co.co_varnames", "Parameter.POSITIONAL_ONLY", "abc.ABCMeta", "frame.f_code", "other._name", "tokenize.NL", "func.__annotations__", "obj.__func__", "func_code.co_kwonlyargcount", "obj.__mro__", "ast.literal_eval", "base.__text_signature__", "comments.append", "types.ModuleType", "Traceback._fields", "linecache.getlines", "self._hash_basis", "types.TracebackType", "module.__file__", "roots.append", "sys.stderr", "Parameter.KEYWORD_ONLY", "object.__name__", "builtin_ns.__dict__", "object.__file__", "func.__func__", "specs.append", "func.__self__", "self.islambda", "wrapped_sig.parameters", "text.append", "annotation.__qualname__", "t.type", "importlib.machinery", "args.details", "generator.gi_frame", "obj.__signature__", "lines.pop", "result.append", "types.ClassMethodDescriptorType", "partial.args", "results.sort", "types.FrameType", "object.co_filename", "global_ns.get", "sig.empty", "kwargs_param.name", "func.__name__", "self.decoratorhasargs", "blockfinder.last", "values.extend", "frame.tb_lineno", "self.last", "names.append", "line.lstrip", "object.__init__", "tokenize.COMMENT", "types.MappingProxyType", "first_wrapped_param.kind", "obj.__name__", "token.ERRORTOKEN", "tokenize.tokenize", "spec.find", "obj.__self__", "coroutine.cr_running", "warnings.warn", "self._return_annotation", "ast.Module", "dict_attr.__get__", "types.BuiltinFunctionType", "a.append", "class_dict.__objclass__", "all.__call__", "kwargs.update", "Signature.from_callable", "types.CodeType", "object.gi_code", "spec.startswith", "ast.Constant", "signature.split", "target.partition", "object.__bases__", "kwo_params.values", "self.parameters", "self._signature", "c.__bases__", "other.arguments", "self.__qualname__", "_ParameterKind.KEYWORD_ONLY", "module.__cached__", "tokenize.NEWLINE", "module.__name__", "named.items", "fname.endswith", "param.default", "sys.maxsize", "sig.replace", "os.path", "file.startswith", "co.co_flags", "msg.format", "sys._getframe", "self.body_col0", "cell.cell_contents", "module.__path__", "func.__kwdefaults__", "types.CoroutineType", "enum.IntEnum", "itertools.zip_longest", "parser.parse_args", "object.f_code", "param.empty", "obj.func", "builtins.__dict__", "candidates.append", "top_kind.description", "Parameter.VAR_POSITIONAL", "doc.expandtabs", "argparse.ArgumentParser", "sig.return_annotation", "types.FunctionType", "_ParameterKind.VAR_POSITIONAL", "ast.Name", "self.kind", "kwonlyargs.append", "func_code.co_argcount", "dis.COMPILER_FLAG_NAMES", "object.__getattribute__", "Parameter.empty", "srch_cls.__getattr__", "tokenize.DEDENT", "tokenize.ENCODING", "types.MemberDescriptorType", "sig.parameters", "old_params.items", "tb.tb_frame", "functools.partial", "param.name", "wrapped_sig.replace", "module.body", "token.OP", "func_code.co_flags", "self._name", "sys.builtin_module_names", "node.annotation", "itertools.chain", "kwargs.pop", "args.extend", "obj._partialmethod", "self.return_annotation", "filename.endswith", "co.co_argcount", "classes.sort", "obj.__objclass__", "tokenize.INDENT", "pat.match", "object.tb_frame", "partialmethod.func", "kwdefaults.get", "processed.add", "new_params.pop", "Parameter.VAR_KEYWORD", "ast.Load", "code.co_freevars", "func.__qualname__", "base.__dict__", "object.__doc__", "sigcls.from_callable", "dict.get", "other.signature", "sys.getrecursionlimit", "suffixes.sort", "base.__doc__", "node.arg", "parameters.append", "obj.__init__", "object.__module__", "new_arguments.append", "re.compile", "int.__dict__", "ast.parse", "self.annotation", "obj.fget", "self._parameters", "match.group", "frame.tb_frame", "self._annotation", "ba.arguments", "object.__func__", "module.__loader__", "cls.__mro__", "types.AsyncGeneratorType", "obj.__new__", "f.args", "linecache.cache", "results.append", "object.__code__", "n.attr", "self.signature", "param.kind", "ast.Attribute", "sys.modules", "parameters.pop", "func.__code__", "_ParameterKind.POSITIONAL_ONLY", "_ParameterKind.VAR_KEYWORD", "self.passline", "module.__dict__", "framelist.append", "file.endswith", "kind.description", "cls._parameter_cls", "self.name", "unbound_names.add", "importlib.import_module", "func.__defaults__", "sys.exit", "name.isidentifier", "self.started", "func.__closure__", "types.GetSetDescriptorType", "_ParameterKind.POSITIONAL_OR_KEYWORD", "linecache.checkcache", "self._name_", "tb.tb_next", "sys.exc_info", "f.__code__", "tokenize.generate_tokens", "self._bound_arguments_cls", "code.co_names", "n.id", "self._bind", "_filesbymodname.get", "frame.f_lineno", "collections.abc", "line.expandtabs", "types.BuiltinMethodType", "coroutine.cr_frame", "functools.partialmethod", "generator.gi_running", "l.encode", "func.__module__", "args.object", "new_params.values", "object.__new__", "candidates.sort", "node.id", "class_dict.__name__", "self.__class__", "other._hash_basis", "args.append", "func.__wrapped__", "annotations.get", "param.replace", "partial.keywords", "self.default"]}, "io.py": {"libraries": ["abc", "_io._WindowsConsoleIO", "_io.BufferedRWPair", "_io.open_code", "_io.UnsupportedOperation", "_io.FileIO", "_io.IncrementalNewlineDecoder", "_io.BufferedReader", "_io.StringIO", "_io", "_io.BufferedWriter", "_io.DEFAULT_BUFFER_SIZE", "_io.open", "_io.BytesIO", "_io.BufferedRandom", "_io.TextIOWrapper", "_io.BlockingIOError"], "function_names": [], "function_calls": [], "class_names": ["TextIOBase", "IOBase", "BufferedIOBase", "RawIOBase"], "class_method_calls": ["_io._TextIOBase", "_io._BufferedIOBase", "abc.ABCMeta", "_io._RawIOBase", "_io.open", "RawIOBase.register", "_io._IOBase", "UnsupportedOperation.__module__", "BufferedIOBase.register", "TextIOBase.register"]}, "ipaddress.py": {"libraries": ["functools"], "function_names": ["with_prefixlen", "_ip_int_from_prefix", "address_exclude", "_prefix_from_ip_int", "_is_subnet_of", "_address_class", "__init__", "max_prefixlen", "__str__", "ip_interface", "__iter__", "exploded", "__add__", "_compress_hextets", "ip", "is_multicast", "sixtofour", "num_addresses", "is_reserved", "_split_addr_prefix", "ip_network", "hostmask", "_report_invalid_netmask", "is_loopback", "_count_righthand_zero_bits", "version", "__sub__", "with_netmask", "compressed", "v4_int_to_packed", "_split_optional_netmask", "collapse_addresses", "is_global", "overlaps", "summarize_address_range", "_prefix_from_prefix_string", "packed", "supernet_of", "_parse_octet", "__getitem__", "__contains__", "_string_from_ip_int", "_parse_hextet", "with_hostmask", "_collapse_addresses_internal", "_make_netmask", "__repr__", "__reduce__", "is_unspecified", "is_link_local", "is_site_local", "__int__", "_ip_int_from_string", "teredo", "is_private", "subnets", "reverse_pointer", "supernet", "broadcast_address", "_reverse_pointer", "_prefix_from_ip_string", "_get_address_key", "ip_address", "_find_address_range", "compare_networks", "__eq__", "_get_networks_key", "get_mixed_type_key", "prefixlen", "__lt__", "subnet_of", "hosts", "v6_int_to_packed", "__hash__", "_check_packed_address", "_explode_shorthand_ip_string", "ipv4_mapped", "_check_int_address"], "function_calls": ["IPv6Network", "min", "IPv4Network", "frozenset", "sorted", "_count_righthand_zero_bits", "_find_address_range", "_collapse_addresses_internal", "isinstance", "v4_int_to_packed", "iter", "str", "IndexError", "_split_optional_netmask", "hash", "AssertionError", "range", "ValueError", "list", "summarize_address_range", "IPv6Interface", "hex", "set", "NetmaskValueError", "int", "next", "type", "enumerate", "ip", "IPv4Interface", "len", "any", "AddressValueError", "IPv6Address", "v6_int_to_packed", "NotImplementedError", "IPv4Address", "TypeError", "map"], "class_names": ["_BaseAddress", "_BaseV4", "_IPAddressBase", "_BaseNetwork", "IPv4Network", "_IPv4Constants", "AddressValueError", "IPv6Address", "IPv6Network", "IPv6Interface", "_IPv6Constants", "_BaseV6", "IPv4Address", "NetmaskValueError", "IPv4Interface"], "class_method_calls": ["IPv4Address._constants", "other._ip", "other.netmask", "IPv6Address.__eq__", "IPv4Address.__lt__", "cls._ip", "prefixlen_str.isdigit", "self._make_netmask", "other.network_address", "cls._netmask_cache", "other._version", "self._ip", "a._version", "IPv6Address.__init__", "self._string_from_ip_int", "address.to_bytes", "self._check_int_address", "ip.ip", "IPv6Address.__lt__", "a.network_address", "self._address_class", "self._constants", "self.hostmask", "self.subnets", "self.netmask", "cls._report_invalid_netmask", "nets.append", "self._ALL_ONES", "to_merge.append", "self.network", "self.prefixlen", "cls._max_prefixlen", "int.from_bytes", "a.broadcast_address", "ip._version", "cls._parse_hextet", "net.supernet", "self._check_packed_address", "obj._get_networks_key", "self._max_prefixlen", "subnets.get", "self._reverse_pointer", "s1.subnets", "last.broadcast_address", "self._ip_int_from_string", "self._split_addr_prefix", "ip._ip", "self.__iter__", "IPv6Address._constants", "cls._HEX_DIGITS", "net.broadcast_address", "cls._ip_int_from_prefix", "IPv4Address.__init__", "self._explode_shorthand_ip_string", "octet_str.isdigit", "self.is_private", "cls._prefix_from_ip_string", "octet_str.isascii", "ip._ALL_ONES", "ip_int.to_bytes", "cls._prefix_from_prefix_string", "cls._prefix_from_ip_int", "functools.total_ordering", "prefixlen_str.isascii", "functools.lru_cache", "self.broadcast_address", "self._prefixlen", "first._ip", "self._version", "b.broadcast_address", "to_merge.pop", "b._version", "last._ip", "other.__class__", "other.broadcast_address", "subnets.values", "self._is_subnet_of", "cls._compress_hextets", "ip._prefixlen", "first._max_prefixlen", "ip_str.split", "last.version", "b.network_address", "self.network_address", "s2.subnets", "other.prefixlen", "self.exploded", "other.network", "other.subnet_of", "functools.cached_property", "IPv4Address.__eq__", "ip.network_address", "self.ip", "parts.append", "cls._parse_octet", "obj._get_address_key", "cls._HEXTET_COUNT", "_IPAddressBase.__reduce__", "parts.pop", "cls._ip_int_from_string", "ips.append", "first.version", "ip._max_prefixlen", "self.__class__", "addrs.extend", "cls._ALL_ONES", "self.hosts"]}, "decoder.py": {"libraries": ["_json.scanstring", "re", "json.scanner"], "function_names": ["JSONObject", "JSONArray", "__init__", "py_scanstring", "raw_decode", "decode", "_decode_uXXXX", "__reduce__"], "function_calls": ["object_pairs_hook", "len", "JSONDecodeError", "_w", "chr", "_m", "pairs_append", "int", "dict", "scanstring", "object_hook", "scan_once", "float", "_decode_uXXXX", "memo_get", "_append"], "class_names": ["JSONDecoder", "JSONDecodeError"], "class_method_calls": ["self.object_hook", "scanner.make_scanner", "self.raw_decode", "self.parse_int", "self.memo", "chunk.end", "_CONSTANTS.__getitem__", "self.strict", "self.pos", "self.lineno", "memo.setdefault", "self.colno", "self.scan_once", "chunk.groups", "chunks.append", "ValueError.__init__", "pairs.append", "self.parse_array", "WHITESPACE.match", "re.MULTILINE", "re.VERBOSE", "self.parse_string", "doc.count", "re.compile", "re.DOTALL", "self.object_pairs_hook", "self.parse_object", "self.parse_constant", "doc.rfind", "self.__class__", "self.parse_float", "STRINGCHUNK.match", "err.value", "values.append", "self.msg", "self.doc"]}, "encoder.py": {"libraries": ["re", "_json.encode_basestring", "_json.encode_basestring_ascii", "_json.make_encoder"], "function_names": ["py_encode_basestring_ascii", "iterencode", "replace", "_make_iterencode", "_iterencode_list", "_iterencode", "default", "__init__", "py_encode_basestring", "floatstr", "_iterencode_dict", "encode"], "function_calls": ["_iterencode_list", "sorted", "encode_basestring", "encode_basestring_ascii", "id", "_default", "repr", "isinstance", "_encoder", "_iterencode", "_floatstr", "range", "_iterencode_dict", "ValueError", "list", "_make_iterencode", "_intstr", "float", "chr", "c_make_encoder", "_repr", "TypeError", "ord"], "class_names": ["JSONEncoder"], "class_method_calls": ["self.key_separator", "self.ensure_ascii", "dct.items", "int.__repr__", "self.allow_nan", "self.indent", "self.check_circular", "self.sort_keys", "self.iterencode", "ESCAPE_DCT.setdefault", "self.item_separator", "o.__class__", "float.__repr__", "self.skipkeys", "re.compile", "key.__class__", "ESCAPE_ASCII.sub", "ESCAPE.sub", "match.group", "self.default"]}, "scanner.py": {"libraries": ["_json.make_scanner", "re"], "function_names": ["py_make_scanner", "_scan_once", "scan_once"], "function_calls": ["StopIteration", "parse_float", "parse_object", "match_number", "parse_int", "parse_string", "_scan_once", "parse_constant", "parse_array"], "class_names": [], "class_method_calls": ["re.VERBOSE", "context.parse_string", "context.object_hook", "context.object_pairs_hook", "context.parse_int", "re.compile", "re.DOTALL", "NUMBER_RE.match", "context.parse_constant", "context.memo", "memo.clear", "m.groups", "context.parse_float", "m.end", "context.parse_object", "re.MULTILINE", "context.parse_array", "context.strict"]}, "tool.py": {"libraries": ["json", "sys", "argparse"], "function_names": ["main"], "function_calls": ["main", "SystemExit"], "class_names": [], "class_method_calls": ["json.dump", "sys.stdout", "json.loads", "argparse.ArgumentParser", "outfile.write", "sys.exit", "options.sort_keys", "parser.add_argument", "argparse.FileType", "options.json_lines", "exc.errno", "json.load", "sys.stdin", "parser.parse_args", "options.outfile", "options.infile"]}, "keyword.py": {"libraries": [], "function_names": [], "function_calls": ["frozenset"], "class_names": [], "class_method_calls": []}, "btm_matcher.py": {"libraries": ["logging", "btm_utils.reduce_tree", "collections.defaultdict", "pygram.python_symbols", "itertools"], "function_names": ["print_ac", "print_node", "run", "add_fixer", "__init__", "add", "type_repr"], "function_calls": ["isinstance", "print_node", "str", "reduce_tree", "set", "next", "type", "BMNode", "defaultdict", "type_repr", "print"], "class_names": ["BMNode", "BottomMatcher"], "class_method_calls": ["subnode.id", "current_ast_node.parent", "self.nodes", "self.match", "_type_reprs.setdefault", "fixer.pattern_tree", "current_ast_node.was_checked", "current_ac_node.fixers", "tree.get_linear_subpattern", "self.id", "match_nodes.extend", "pytree.Leaf", "logging.getLogger", "self.root", "itertools.count", "node.transition_table", "self.logger", "self.fixers", "current_ast_node.type", "current_ast_node.children", "python_symbols.__dict__", "self.add", "BMNode.count", "child.value", "subnode.content", "subnode.fixers", "match_node.fixers", "start.transition_table", "node.id", "self.content", "self.transition_table", "current_ac_node.transition_table", "current_ast_node.value"]}, "btm_utils.py": {"libraries": ["pygram.python_symbols", "pgen2.token", "pygram.pattern_symbols", "pgen2.grammar"], "function_names": ["leaf_to_root", "leaves", "get_characteristic_subpattern", "reduce_tree", "__init__", "get_linear_subpattern", "__repr__", "rec_test"], "function_calls": ["isinstance", "len", "any", "get_characteristic_subpattern", "max", "getattr", "str", "reduce_tree", "MinNode", "tuple", "type", "test_func", "rec_test", "hasattr"], "class_names": ["MinNode"], "class_method_calls": ["syms.Alternatives", "subpatterns_with_names.append", "new_node.children", "syms.Matcher", "self.type", "repeater_node.children", "self.name", "pytree.Leaf", "syms.Alternative", "details_node.children", "node.type", "name_leaf.type", "name_leaf.value", "node.parent", "subp.append", "node.name", "self.leaf", "syms.Details", "subpatterns_with_common_names.append", "self.group", "node.group", "child.leaves", "subpatterns_with_common_chars.append", "self.children", "child.value", "self.parent", "node.alternatives", "self.alternatives", "token_labels.NAME", "child.type", "node.children", "self.leaves", "new_node.parent", "syms.Unit", "token_labels.STRING", "syms.Repeater", "l.leaf_to_root", "grammar.opmap"]}, "fixer_base.py": {"libraries": ["patcomp.PatternCompiler", "fixer_util.does_tree_import", "itertools"], "function_names": ["should_skip", "log_message", "transform", "set_filename", "compile_pattern", "finish_tree", "__init__", "new_name", "warning", "match", "start_tree", "cannot_convert"], "function_calls": ["super", "str", "NotImplementedError", "set", "next", "PatternCompiler", "does_tree_import"], "class_names": ["ConditionalFix", "BaseFix"], "class_method_calls": ["self.pattern_tree", "self.numbers", "self.log", "tree.used_names", "PC.compile_pattern", "self.set_filename", "itertools.count", "self.pattern", "self.first_log", "self.options", "self.compile_pattern", "self.log_message", "self.used_names", "node.clone", "self.skip_on", "self.filename", "self.PATTERN", "node.get_lineno", "self._should_skip", "for_output.prefix", "pygram.python_symbols"]}, "fixer_util.py": {"libraries": ["pygram.python_symbols", "pytree.Node", "pgen2.token", "pytree.Leaf"], "function_names": ["RParen", "touch_import", "in_special_context", "ImportAndCall", "String", "Name", "does_tree_import", "attr_chain", "Assign", "Comma", "find_root", "Call", "Attr", "LParen", "Subscript", "is_import", "Dot", "parenthesize", "ArgList", "is_list", "find_indentation", "Number", "FromImport", "BlankLine", "is_tuple", "_find", "_is_import_binding", "KeywordArg", "Newline", "ListComp", "find_binding", "make_suite", "is_probably_builtin", "is_import_stmt"], "function_calls": ["RParen", "getattr", "Node", "Name", "does_tree_import", "isinstance", "attr_chain", "str", "find_root", "Attr", "ValueError", "LParen", "is_import", "Dot", "ArgList", "zip", "bool", "enumerate", "FromImport", "len", "_find", "Leaf", "_is_import_binding", "Newline", "find_binding", "make_suite", "is_import_stmt"], "class_names": [], "class_method_calls": ["xp.prefix", "nodes.pop", "lparen.clone", "n.value", "node.value", "n.children", "token.LBRACE", "it.prefix", "token.COLON", "token.RBRACE", "imp.value", "inner_args.append", "syms.import_as_names", "new.prefix", "root.children", "root.insert_child", "imp.type", "last.value", "child.type", "token.LPAR", "token.RPAR", "last.type", "syms.trailer", "node.prev_sibling", "syms.argument", "token.DOT", "n.clone", "child.children", "syms.file_input", "node.parent", "token.NUMBER", "syms.power", "syms.arglist", "imp.children", "parent.type", "pattern.match", "token.STAR", "syms.import_as_name", "indent.value", "syms.expr_stmt", "indent.type", "syms.funcdef", "syms.if_stmt", "token.NEWLINE", "token.NAME", "syms.comp_for", "syms.try_stmt", "prev.type", "leaf.remove", "for_leaf.prefix", "syms.while_stmt", "source.prefix", "parent.children", "node.type", "token.STRING", "node.prefix", "syms.parameters", "kid.type", "patcomp.compile_pattern", "nodes.extend", "suite.parent", "fp.prefix", "syms.listmaker", "kid.value", "syms.import_name", "syms.classdef", "node.insert_child", "syms.atom", "obj.type", "syms.dotted_as_names", "in_leaf.prefix", "if_leaf.prefix", "syms.simple_stmt", "n.type", "syms.comp_if", "syms.suite", "token.INDENT", "test.prefix", "node.clone", "syms.dotted_as_name", "child.value", "rparen.clone", "token.EQUAL", "syms.import_from", "node.children", "token.COMMA", "obj.clone", "syms.typedargslist", "syms.for_stmt"]}, "fix_apply.py": {"libraries": ["fixer_util.parenthesize", "fixer_util.Comma", "pgen2.token", "fixer_util.Call"], "function_names": ["transform"], "function_calls": ["Call", "Comma", "parenthesize"], "class_names": ["FixApply"], "class_method_calls": ["func.clone", "kwds.type", "self.syms", "fixer_base.BaseFix", "args.clone", "pytree.Leaf", "token.DOUBLESTAR", "kwds.prefix", "node.prefix", "args.prefix", "func.prefix", "syms.power", "args.children", "token.STAR", "kwds.clone", "args.type", "l_newargs.extend", "func.children", "kwds.children", "results.get", "token.NAME", "func.type", "syms.atom"]}, "fix_asserts.py": {"libraries": ["fixer_util.Name", "fixer_base.BaseFix"], "function_names": ["transform"], "function_calls": ["map", "str", "dict", "Name"], "class_names": ["FixAsserts"], "class_method_calls": ["name.prefix", "name.replace"]}, "fix_basestring.py": {"libraries": ["fixer_util.Name"], "function_names": ["transform"], "function_calls": ["Name"], "class_names": ["FixBasestring"], "class_method_calls": ["node.prefix", "fixer_base.BaseFix"]}, "fix_buffer.py": {"libraries": ["fixer_util.Name"], "function_names": ["transform"], "function_calls": ["Name"], "class_names": ["FixBuffer"], "class_method_calls": ["name.prefix", "fixer_base.BaseFix", "name.replace"]}, "fix_dict.py": {"libraries": ["fixer_util.Name", "fixer_util.Dot", "fixer_util.Call"], "function_names": ["transform", "in_special_context"], "function_calls": ["Call", "Name", "Dot", "repr"], "class_names": ["FixDict"], "class_method_calls": ["n.clone", "syms.power", "method.value", "patcomp.compile_pattern", "syms.trailer", "fixer_util.consuming_calls", "self.p1", "self.syms", "node.prefix", "method.prefix", "fixer_base.BaseFix", "method_name.startswith", "node.parent", "self.in_special_context", "self.p2", "new.prefix", "pytree.Node"]}, "fix_except.py": {"libraries": ["pgen2.token", "fixer_util.is_list", "fixer_util.syms", "fixer_util.Name", "fixer_util.is_tuple", "fixer_util.Attr", "fixer_util.Assign"], "function_names": ["transform", "find_excepts"], "function_calls": ["isinstance", "len", "is_tuple", "reversed", "find_excepts", "Assign", "is_list", "Name", "enumerate", "Attr"], "class_names": ["FixExcept"], "class_method_calls": ["self.new_name", "self.syms", "fixer_base.BaseFix", "e_suite.children", "N.replace", "n.children", "comma.replace", "n.clone", "new_N.clone", "target.prefix", "node.type", "n.type", "e_suite.insert_child", "syms.except_clause", "c.clone", "N.clone", "except_clause.children", "pytree.Node", "ch.clone", "N.prefix", "N.type", "token.NAME", "node.children"]}, "fix_exec.py": {"libraries": ["fixer_util.Name", "fixer_util.Comma", "fixer_util.Call"], "function_names": ["transform"], "function_calls": ["Call", "Comma", "Name"], "class_names": ["FixExec"], "class_method_calls": ["b.clone", "results.get", "a.clone", "self.syms", "node.prefix", "fixer_base.BaseFix", "args.extend", "c.clone"]}, "fix_execfile.py": {"libraries": ["fixer_util.RParen", "fixer_util.String", "fixer_util.syms", "fixer_util.Name", "fixer_util.Comma", "fixer_util.Dot", "fixer_util.Node", "fixer_util.ArgList", "fixer_util.LParen", "fixer_util.Call"], "function_names": ["transform"], "function_calls": ["LParen", "RParen", "Node", "Dot", "ArgList", "String", "Comma", "Name", "Call"], "class_names": ["FixExecfile"], "class_method_calls": ["locals.clone", "filename_arg.prefix", "syms.power", "syms.trailer", "globals.clone", "results.get", "node.prefix", "node.children", "fixer_base.BaseFix", "args.extend", "filename.clone"]}, "fix_exitfunc.py": {"libraries": ["lib2to3.pytree", "lib2to3.fixer_util.Comma", "lib2to3.fixer_util.Name", "lib2to3.fixer_util.Attr", "lib2to3.fixer_base", "lib2to3.fixer_util.syms", "lib2to3.fixer_util.Newline", "lib2to3.fixer_util.Call"], "function_names": ["__init__", "transform", "start_tree"], "function_calls": ["super", "Newline", "Comma", "Name", "Call", "Attr"], "class_names": ["FixExitfunc"], "class_method_calls": ["syms.import_name", "func.prefix", "syms.power", "syms.dotted_as_names", "syms.simple_stmt", "containing_stmt.children", "self.sys_import", "node.replace", "names.append_child", "node.prefix", "fixer_base.BaseFix", "self.warning", "containing_stmt.insert_child", "containing_stmt.parent", "pytree.Node", "names.type"]}, "fix_filter.py": {"libraries": ["fixer_util.in_special_context", "fixer_util.Name", "fixer_util.ListComp", "fixer_util.ArgList", "fixer_util.parenthesize", "pygram.python_symbols", "pytree.Node"], "function_names": ["transform"], "function_calls": ["in_special_context", "Node", "parenthesize", "ListComp", "ArgList", "Name"], "class_names": ["FixFilter"], "class_method_calls": ["xp.prefix", "syms.power", "fixer_base.ConditionalFix", "self.should_skip", "results.get", "node.prefix", "t.clone", "syms.test", "trailers.append", "xp.type", "new.prefix"]}, "fix_funcattrs.py": {"libraries": ["fixer_util.Name"], "function_names": ["transform"], "function_calls": ["Name"], "class_names": ["FixFuncattrs"], "class_method_calls": ["attr.replace", "attr.prefix", "fixer_base.BaseFix", "attr.value"]}, "fix_future.py": {"libraries": ["fixer_util.BlankLine"], "function_names": ["transform"], "function_calls": ["BlankLine"], "class_names": ["FixFuture"], "class_method_calls": ["node.prefix", "new.prefix", "fixer_base.BaseFix"]}, "fix_getcwdu.py": {"libraries": ["fixer_util.Name"], "function_names": ["transform"], "function_calls": ["Name"], "class_names": ["FixGetcwdu"], "class_method_calls": ["name.prefix", "fixer_base.BaseFix", "name.replace"]}, "fix_has_key.py": {"libraries": ["fixer_util.Name", "fixer_util.parenthesize"], "function_names": ["transform"], "function_calls": ["len", "tuple", "parenthesize", "Name"], "class_names": ["FixHasKey"], "class_method_calls": ["syms.not_test", "self.syms", "syms.comparison", "fixer_base.BaseFix", "syms.argument", "syms.or_test", "n.clone", "node.prefix", "self.pattern", "node.parent", "syms.shift_expr", "syms.power", "syms.lambdef", "syms.and_test", "syms.comp_op", "syms.test", "syms.and_expr", "new.prefix", "syms.factor", "pytree.Node", "syms.term", "syms.xor_expr", "results.get", "arg.type", "syms.arith_expr", "syms.expr", "before.prefix"]}, "fix_idioms.py": {"libraries": ["fixer_util.syms", "fixer_util.Name", "fixer_util.BlankLine", "fixer_util.Comma", "fixer_util.Node", "fixer_util.Call"], "function_names": ["transform", "transform_isinstance", "transform_sort", "match", "transform_while"], "function_calls": ["BlankLine", "super", "Node", "Comma", "Name", "Call", "RuntimeError"], "class_names": ["FixIdioms"], "class_method_calls": ["list_call.prefix", "syms.not_test", "fixer_base.BaseFix", "x.prefix", "btwn.rpartition", "node.prefix", "self.transform_sort", "sort_stmt.prefix", "self.transform_while", "simple_expr.clone", "test.prefix", "simple_expr.prefix", "new.prefix", "sort_stmt.remove", "T.prefix", "list_call.replace", "list_call.next_sibling", "end_line.prefix", "list_call.parent", "self.transform_isinstance", "one.prefix", "results.get", "simple_expr.replace", "one.replace"]}, "fix_import.py": {"libraries": ["os.path.exists", "fixer_util.FromImport", "fixer_util.syms", "fixer_util.token", "os.path.join", "os.path.sep", "os.path.dirname"], "function_names": ["traverse_imports", "start_tree", "transform", "probably_a_local_import"], "function_calls": ["FromImport", "super", "join", "dirname", "exists", "traverse_imports", "AssertionError", "hasattr"], "class_names": ["FixImport"], "class_method_calls": ["syms.dotted_as_names", "ch.value", "fixer_base.BaseFix", "pending.append", "pending.pop", "syms.dotted_name", "node.value", "imp_name.startswith", "node.type", "node.prefix", "self.probably_a_local_import", "pending.extend", "imp.value", "imp.changed", "imp.children", "syms.dotted_as_name", "new.prefix", "self.filename", "syms.import_from", "token.NAME", "node.children", "self.skip", "self.warning", "tree.future_features", "imp_name.split"]}, "fix_imports.py": {"libraries": ["fixer_util.Name", "fixer_util.attr_chain"], "function_names": ["transform", "compile_pattern", "build_pattern", "match", "start_tree", "alternates"], "function_calls": ["any", "super", "attr_chain", "build_pattern", "match", "Name", "alternates", "map"], "class_names": ["FixImports"], "class_method_calls": ["self.transform", "self.replace", "self.match", "self.mapping", "bare_name.replace", "bare_name.value", "self.build_pattern", "self.PATTERN", "results.get", "bare_name.prefix", "fixer_base.BaseFix", "import_mod.prefix", "mapping.keys", "import_mod.value", "import_mod.replace"]}, "fix_imports2.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": ["FixImports2"], "class_method_calls": ["fix_imports.FixImports"]}, "fix_input.py": {"libraries": ["fixer_util.Name", "fixer_util.Call"], "function_names": ["transform"], "function_calls": ["Call", "Name"], "class_names": ["FixInput"], "class_method_calls": ["patcomp.compile_pattern", "node.prefix", "node.clone", "fixer_base.BaseFix", "node.parent", "new.prefix", "context.match"]}, "fix_intern.py": {"libraries": ["fixer_util.touch_import", "fixer_util.ImportAndCall"], "function_names": ["transform"], "function_calls": ["touch_import", "ImportAndCall"], "class_names": ["FixIntern"], "class_method_calls": ["self.syms", "fixer_base.BaseFix", "obj.type", "obj.children"]}, "fix_isinstance.py": {"libraries": ["fixer_util.token"], "function_names": ["transform"], "function_calls": ["enumerate", "len", "set", "next"], "class_names": ["FixIsinstance"], "class_method_calls": ["node.changed", "new_args.append", "names_inserted.add", "token.NAME", "arg.type", "fixer_base.BaseFix", "token.COMMA", "atom.prefix", "testlist.children", "testlist.parent", "atom.replace", "arg.value"]}, "fix_itertools.py": {"libraries": ["fixer_util.Name"], "function_names": ["transform"], "function_calls": ["locals", "Name"], "class_names": ["FixItertools"], "class_method_calls": ["dot.remove", "func.prefix", "it.remove", "func.value", "fixer_base.BaseFix", "func.parent", "it.prefix", "func.replace"]}, "fix_itertools_imports.py": {"libraries": ["lib2to3.fixer_base", "lib2to3.fixer_util.token", "lib2to3.fixer_util.BlankLine", "lib2to3.fixer_util.syms"], "function_names": ["transform"], "function_calls": ["locals", "getattr", "BlankLine"], "class_names": ["FixItertoolsImports"], "class_method_calls": ["child.remove", "child.children", "children.pop", "node.changed", "imports.children", "imports.parent", "name_node.value", "imports.type", "token.NAME", "node.prefix", "token.STAR", "syms.import_as_name", "fixer_base.BaseFix", "token.COMMA", "child.type", "child.value"]}, "fix_long.py": {"libraries": ["lib2to3.fixer_util.is_probably_builtin", "lib2to3.fixer_base"], "function_names": ["transform"], "function_calls": ["is_probably_builtin"], "class_names": ["FixLong"], "class_method_calls": ["fixer_base.BaseFix", "node.value", "node.changed"]}, "fix_map.py": {"libraries": ["fixer_util.in_special_context", "pgen2.token", "fixer_util.Name", "fixer_util.ListComp", "fixer_util.ArgList", "pygram.python_symbols", "pytree.Node", "fixer_util.Call"], "function_names": ["transform"], "function_calls": ["in_special_context", "Node", "ListComp", "ArgList", "Name", "Call"], "class_names": ["FixMap"], "class_method_calls": ["args.type", "args.clone", "syms.power", "fixer_base.ConditionalFix", "syms.trailer", "syms.simple_stmt", "syms.arglist", "args.children", "self.should_skip", "token.NAME", "node.prefix", "t.clone", "node.parent", "self.warning", "node.clone", "trailers.append", "new.prefix"]}, "fix_metaclass.py": {"libraries": ["fixer_util.Node", "pygram.token", "fixer_util.syms", "fixer_util.Leaf"], "function_names": ["remove_trailing_newline", "has_metaclass", "transform", "find_metas", "fixup_simple_stmt", "fixup_parse_tree", "fixup_indent"], "function_calls": ["ValueError", "list", "isinstance", "len", "remove_trailing_newline", "has_metaclass", "Leaf", "Node", "find_metas", "fixup_simple_stmt", "fixup_parse_tree", "enumerate", "fixup_indent"], "class_names": ["FixMetaclass"], "class_method_calls": ["suite.children", "node.append_child", "kids.extend", "expr_node.children", "move_node.remove", "fixer_base.BaseFix", "new_stmt.children", "new_expr.append_child", "parent.children", "last_metaclass.children", "stmt.remove", "node.set_child", "syms.simple_stmt", "node.type", "arglist.children", "node.prefix", "syms.suite", "left_side.value", "token.INDENT", "stmt_node.children", "expr_stmt.type", "token.COLON", "suite.remove", "old_leaf1.prefix", "suite.insert_child", "syms.arglist", "arglist.append_child", "move_node.clone", "token.LPAR", "meta_txt.value", "left_node.value", "syms.expr_stmt", "node.remove", "expr_node.type", "cls_node.append_child", "expr_stmt.children", "cls_node.children", "suite.append_child", "kids.pop", "pass_leaf.prefix", "node.insert_child", "token.DEDENT", "new_leaf1.prefix", "simple_node.type", "token.NEWLINE", "node.children", "parent.insert_child", "token.COMMA", "simple_node.children", "token.SEMI", "meta_txt.prefix", "token.RPAR"]}, "fix_methodattrs.py": {"libraries": ["fixer_util.Name"], "function_names": ["transform"], "function_calls": ["Name"], "class_names": ["FixMethodattrs"], "class_method_calls": ["attr.replace", "attr.value", "fixer_base.BaseFix", "attr.prefix"]}, "fix_ne.py": {"libraries": ["pgen2.token"], "function_names": ["transform", "match"], "function_calls": [], "class_names": ["FixNe"], "class_method_calls": ["pytree.Leaf", "node.prefix", "fixer_base.BaseFix", "node.value", "token.NOTEQUAL"]}, "fix_next.py": {"libraries": ["pgen2.token", "fixer_util.Name", "fixer_util.find_binding", "pygram.python_symbols", "fixer_util.Call"], "function_names": ["transform", "is_subtree", "is_assign_target", "find_assign", "start_tree"], "function_calls": ["any", "super", "str", "is_subtree", "find_binding", "Name", "find_assign", "Call", "is_assign_target"], "class_names": ["FixNext"], "class_method_calls": ["assign.children", "attr.replace", "node.replace", "self.shadowed_next", "fixer_base.BaseFix", "n.clone", "syms.simple_stmt", "node.type", "node.prefix", "node.parent", "attr.prefix", "syms.expr_stmt", "token.EQUAL", "name.replace", "results.get", "root.children", "self.warning", "child.type", "name.prefix"]}, "fix_nonzero.py": {"libraries": ["fixer_util.Name"], "function_names": ["transform"], "function_calls": ["Name"], "class_names": ["FixNonzero"], "class_method_calls": ["name.prefix", "fixer_base.BaseFix", "name.replace"]}, "fix_numliterals.py": {"libraries": ["fixer_util.Number", "pgen2.token"], "function_names": ["transform", "match"], "function_calls": ["len", "Number", "set"], "class_names": ["FixNumliterals"], "class_method_calls": ["val.isdigit", "node.value", "node.prefix", "val.startswith", "fixer_base.BaseFix", "token.NUMBER"]}, "fix_operator.py": {"libraries": ["lib2to3.fixer_util.String", "lib2to3.fixer_util.Name", "lib2to3.fixer_base", "collections.abc", "lib2to3.fixer_util.touch_import", "lib2to3.fixer_util.Call"], "function_names": ["invocation", "_handle_type2abc", "_check_method", "_isCallable", "transform", "_irepeat", "_isSequenceType", "_handle_rename", "_repeat", "_sequenceIncludes", "dec", "_isNumberType", "_isMappingType"], "function_calls": ["invocation", "isinstance", "method", "touch_import", "getattr", "str", "String", "dict", "Name", "Call"], "class_names": ["FixOperator"], "class_method_calls": ["method.value", "f.invocation", "self._handle_rename", "node.prefix", "method.invocation", "fixer_base.BaseFix", "obj.clone", "collections.abc", "method.changed", "self._check_method", "self.warning", "self._handle_type2abc"]}, "fix_paren.py": {"libraries": ["fixer_util.RParen", "fixer_util.LParen"], "function_names": ["transform"], "function_calls": ["LParen", "RParen"], "class_names": ["FixParen"], "class_method_calls": ["lparen.prefix", "target.append_child", "target.insert_child", "target.prefix", "fixer_base.BaseFix"]}, "fix_print.py": {"libraries": ["fixer_util.String", "pgen2.token", "fixer_util.Name", "fixer_util.Comma", "fixer_util.Call"], "function_names": ["transform", "add_kwarg"], "function_calls": ["len", "Comma", "String", "Name", "Call", "repr"], "class_names": ["FixPrint"], "class_method_calls": ["l_nodes.append", "self.syms", "fixer_base.BaseFix", "parend_expr.match", "pytree.Leaf", "token.RIGHTSHIFT", "node.prefix", "n_argument.prefix", "patcomp.compile_pattern", "bare_print.replace", "bare_print.prefix", "self.add_kwarg", "arg.clone", "n_expr.prefix", "pytree.Node", "token.EQUAL", "results.get", "node.children", "n_stmt.prefix"]}, "fix_raise.py": {"libraries": ["pgen2.token", "fixer_util.Name", "fixer_util.is_tuple", "fixer_util.ArgList", "fixer_util.Attr", "fixer_util.Call"], "function_names": ["transform"], "function_calls": ["is_tuple", "ArgList", "Name", "Call", "Attr"], "class_names": ["FixRaise"], "class_method_calls": ["exc.type", "self.syms", "fixer_base.BaseFix", "val.prefix", "syms.simple_stmt", "token.STRING", "exc.prefix", "node.prefix", "val.children", "c.clone", "syms.raise_stmt", "self.cannot_convert", "val.type", "new.prefix", "pytree.Node", "val.value", "token.NAME", "exc.children", "tb.prefix"]}, "fix_raw_input.py": {"libraries": ["fixer_util.Name"], "function_names": ["transform"], "function_calls": ["Name"], "class_names": ["FixRawInput"], "class_method_calls": ["name.prefix", "fixer_base.BaseFix", "name.replace"]}, "fix_reduce.py": {"libraries": ["lib2to3.fixer_base", "lib2to3.fixer_util.touch_import"], "function_names": ["transform"], "function_calls": ["touch_import"], "class_names": ["FixReduce"], "class_method_calls": ["fixer_base.BaseFix"]}, "fix_reload.py": {"libraries": ["fixer_util.touch_import", "fixer_util.ImportAndCall"], "function_names": ["transform"], "function_calls": ["touch_import", "ImportAndCall"], "class_names": ["FixReload"], "class_method_calls": ["self.syms", "fixer_base.BaseFix", "obj.type", "obj.children"]}, "fix_renames.py": {"libraries": ["fixer_util.Name", "fixer_util.attr_chain"], "function_names": ["build_pattern", "alternates", "transform", "match"], "function_calls": ["list", "any", "super", "attr_chain", "build_pattern", "match", "Name", "map"], "class_names": ["FixRenames"], "class_method_calls": ["mod_name.value", "attr_name.replace", "attr_name.value", "results.get", "MAPPING.items", "attr_name.prefix", "fixer_base.BaseFix", "replace.items"]}, "fix_repr.py": {"libraries": ["fixer_util.Name", "fixer_util.parenthesize", "fixer_util.Call"], "function_names": ["transform"], "function_calls": ["Call", "parenthesize", "Name"], "class_names": ["FixRepr"], "class_method_calls": ["self.syms", "node.prefix", "fixer_base.BaseFix", "expr.type"]}, "fix_set_literal.py": {"libraries": ["lib2to3.fixer_base", "lib2to3.fixer_util.syms", "lib2to3.fixer_util.token", "lib2to3.pytree"], "function_names": ["transform"], "function_calls": ["len"], "class_names": ["FixSetLiteral"], "class_method_calls": ["maker.prefix", "fixer_base.BaseFix", "syms.dictsetmaker", "n.clone", "token.LBRACE", "n.remove", "pytree.Leaf", "node.prefix", "maker.children", "n.prefix", "items.next_sibling", "token.RBRACE", "items.children", "literal.append", "syms.listmaker", "single.replace", "pytree.Node", "literal.extend", "results.get", "single.clone"]}, "fix_standarderror.py": {"libraries": ["fixer_util.Name"], "function_names": ["transform"], "function_calls": ["Name"], "class_names": ["FixStandarderror"], "class_method_calls": ["node.prefix", "fixer_base.BaseFix"]}, "fix_sys_exc.py": {"libraries": ["fixer_util.syms", "fixer_util.Name", "fixer_util.Number", "fixer_util.Node", "fixer_util.Attr", "fixer_util.Subscript", "fixer_util.Call"], "function_names": ["transform"], "function_calls": ["Subscript", "Node", "Name", "Call", "Number", "Attr"], "class_names": ["FixSysExc"], "class_method_calls": ["attr.append", "syms.power", "node.prefix", "fixer_base.BaseFix", "self.exc_info", "sys_attr.prefix", "sys_attr.value"]}, "fix_throw.py": {"libraries": ["pgen2.token", "fixer_util.Name", "fixer_util.is_tuple", "fixer_util.ArgList", "fixer_util.Attr", "fixer_util.Call"], "function_names": ["transform"], "function_calls": ["is_tuple", "ArgList", "Name", "Call", "Attr"], "class_names": ["FixThrow"], "class_method_calls": ["exc.type", "syms.power", "self.cannot_convert", "token.STRING", "results.get", "self.syms", "fixer_base.BaseFix", "pytree.Node", "throw_args.replace", "val.children", "c.clone", "tb.prefix", "val.clone", "val.prefix"]}, "fix_tuple_params.py": {"libraries": ["pgen2.token", "fixer_util.syms", "fixer_util.Name", "fixer_util.Number", "fixer_util.Newline", "fixer_util.Assign", "fixer_util.Subscript"], "function_names": ["map_to_index", "simplify_args", "find_params", "handle_tuple", "transform", "transform_lambda", "is_docstring", "tuple_name"], "function_calls": ["Number", "simplify_args", "isinstance", "map_to_index", "Subscript", "find_params", "handle_tuple", "len", "str", "tuple_name", "Newline", "is_docstring", "Assign", "Name", "enumerate", "range", "RuntimeError"], "class_names": ["FixTupleParams"], "class_method_calls": ["syms.tfpdef", "args.replace", "tuple_arg.replace", "l.append", "self.new_name", "tuple_arg.clone", "end.clone", "fixer_base.BaseFix", "n.value", "node.value", "n.clone", "pytree.Leaf", "syms.simple_stmt", "node.type", "token.STRING", "arg.prefix", "n.type", "c.type", "token.INDENT", "new_param.clone", "c.clone", "n.prefix", "inner.prefix", "syms.power", "args.children", "n.replace", "stmt.children", "new.prefix", "pytree.Node", "syms.vfpdef", "args.type", "body.post_order", "self.transform_lambda", "syms.vfplist", "line.parent", "token.NAME", "node.children", "arg.type", "inner.clone", "inner.type", "token.COMMA", "syms.typedargslist", "new_lines.append"]}, "fix_types.py": {"libraries": ["fixer_util.Name"], "function_names": ["transform"], "function_calls": ["Name"], "class_names": ["FixTypes"], "class_method_calls": ["_TYPE_MAPPING.get", "node.prefix", "fixer_base.BaseFix"]}, "fix_unicode.py": {"libraries": ["pgen2.token"], "function_names": ["start_tree", "transform"], "function_calls": ["super"], "class_names": ["FixUnicode"], "class_method_calls": ["new.value", "node.type", "token.STRING", "token.NAME", "v.replace", "fixer_base.BaseFix", "node.clone", "tree.future_features", "val.split", "self.unicode_literals", "node.value"]}, "fix_urllib.py": {"libraries": ["lib2to3.fixer_util.Comma", "lib2to3.fixer_util.FromImport", "lib2to3.fixer_util.Name", "lib2to3.fixes.fix_imports.FixImports", "lib2to3.fixer_util.find_indentation", "lib2to3.fixer_util.Node", "lib2to3.fixer_util.syms", "lib2to3.fixer_util.Newline", "lib2to3.fixes.fix_imports.alternates"], "function_names": ["handle_name", "transform_dot", "transform", "build_pattern", "transform_member", "transform_import"], "function_calls": ["FromImport", "isinstance", "handle_name", "find_indentation", "Node", "set", "Newline", "build_pattern", "Comma", "Name", "alternates"], "class_names": ["FixUrllib"], "class_method_calls": ["nodes.append", "mod_member.replace", "node.replace", "MAPPING.items", "member.value", "mod_member.value", "name.value", "names.append", "member.children", "names.extend", "modules.append", "new_nodes.append", "name.children", "member.type", "mod_member.prefix", "self.transform_import", "node.parent", "self.cannot_convert", "nodes.extend", "syms.import_as_name", "module_dot.value", "module_dot.prefix", "import_mod.prefix", "new.prefix", "module_dot.replace", "import_mod.value", "results.get", "mod_dict.setdefault", "self.transform_dot", "self.transform_member", "name.type", "import_mod.replace"]}, "fix_ws_comma.py": {"libraries": ["pgen2.token"], "function_names": ["transform"], "function_calls": [], "class_names": ["FixWsComma"], "class_method_calls": ["pytree.Leaf", "child.prefix", "prefix.isspace", "new.children", "fixer_base.BaseFix", "token.COMMA", "node.clone", "self.SEPS", "token.COLON"]}, "fix_xrange.py": {"libraries": ["fixer_util.Name", "fixer_util.consuming_calls", "fixer_util.Call"], "function_names": ["transform_range", "transform", "in_special_context", "transform_xrange", "finish_tree", "start_tree"], "function_calls": ["ValueError", "super", "set", "Name", "id", "Call", "repr"], "class_names": ["FixXrange"], "class_method_calls": ["self.transform_xrange", "name.replace", "patcomp.compile_pattern", "self.transform_range", "self.p1", "node.prefix", "fixer_base.BaseFix", "node.parent", "self.in_special_context", "list_call.append_child", "self.p2", "self.transformed_xranges", "name.prefix", "name.value"]}, "fix_xreadlines.py": {"libraries": ["fixer_util.Name"], "function_names": ["transform"], "function_calls": ["Name"], "class_names": ["FixXreadlines"], "class_method_calls": ["no_call.replace", "node.replace", "results.get", "fixer_base.BaseFix", "x.clone", "no_call.prefix"]}, "fix_zip.py": {"libraries": ["fixer_util.in_special_context", "fixer_util.Name", "fixer_util.ArgList", "pygram.python_symbols", "pytree.Node"], "function_names": ["transform"], "function_calls": ["ArgList", "in_special_context", "Node", "Name"], "class_names": ["FixZip"], "class_method_calls": ["n.clone", "syms.power", "fixer_base.ConditionalFix", "self.should_skip", "node.prefix", "args.prefix", "new.prefix", "n.prefix"]}, "main.py": {"libraries": ["support.filesets.*", "support.props.*", "support.constants.*", "support.nuspec.*", "subprocess", "lib2to3.pgen2.driver.load_grammar", "zipfile", "os", "functools", "re", "pathlib.Path", "support.logging.*", "support.catalog.*", "shutil", "tempfile", "argparse", "support.options.*", "py_compile", "sys", "support.appxmanifest.*", "support.pip.*"], "function_names": ["_py_temp_compile", "get_tcltk_lib", "in_build", "_write_to_zip", "copy_files", "get_layout", "_compile_one_py", "get_lib_layout", "main", "_create_zip_file", "generate_source_files", "_c", "copy_if_modified"], "function_calls": ["log_error", "get_tcltk_lib", "extract_pip_files", "getattr", "_compile_one_py", "get_appx_layout", "get_pip_layout", "FileNameSet", "get_nuspec_layout", "_py_temp_compile", "load_grammar", "isinstance", "log_exception", "copy_files", "str", "_write_to_zip", "log_warning", "configure_logger", "log_info", "Path", "open", "generate_source_files", "setattr", "FileSuffixSet", "copy_if_modified", "get_argparse_options", "list", "get_layout", "get_props_layout", "int", "bool", "len", "FileStemSet", "error_was_logged", "in_build", "update_presets", "get_lib_layout", "write_catalog", "log_debug", "main", "_create_zip_file", "rglob", "print"], "class_names": [], "class_method_calls": ["sys.executable", "zip_file.close", "dest.with_suffix", "py_compile.PycInvalidationMode", "ns.debug", "parser.add_argument", "ns.include_symbols", "ns.include_stable", "ns.source", "ns.doc_build", "shutil.copy2", "ns.include_nuspec", "src.parent", "shutil.SameFileError", "tmp.unlink", "ns.include_idle", "pyc.unlink", "py_compile.compile", "d.is_dir", "ns.zip", "ns.include_launchers", "f.name", "ns.include_bdist_wininst", "zipfile.ZIP_DEFLATED", "tempfile.mkdtemp", "need_compile.append", "ns.include_html_doc", "ns.include_dev", "n.endswith", "zipfile.ZipFile", "zip_path.is_dir", "zip_path.is_file", "dest.parent", "py_compile.PyCompileError", "Path.cwd", "ns.zip_lib", "os.getenv", "sys.maxsize", "os.path", "zip_file.write", "ns.include_venv", "ns.include_tests", "parser.parse_args", "ns.include_tools", "argparse.ArgumentParser", "f.rpartition", "ns.include_chm", "ns.build", "src_stat.st_size", "ns.flat_dlls", "dest_stat.st_mtime", "f.is_dir", "pdb.is_file", "in_catalog.append", "f.write", "src.name", "ns.copy", "ns.arch", "dest_stat.st_size", "n.replace", "src_stat.st_mtime", "zf.write", "shutil.copy", "f.unlink", "cdest.name", "ns.include_tcltk", "zip_file.writestr", "ns.include_pip", "lib.is_file", "sys.exit", "ns.include_props", "src.suffix", "src.with_suffix", "ns.include_underpth", "f.read", "ns.include_appxmanifest", "zip_path.unlink", "ns.catalog", "src.stem", "ns.precompile", "os.stat", "ns.temp", "ns.include_cat"]}, "patcomp.py": {"libraries": ["pgen2.driver", "io", "pgen2.token", "pgen2.grammar", "pgen2.tokenize", "pgen2.literals", "pgen2.parse"], "function_names": ["pattern_convert", "tokenize_wrapper", "get_int", "compile_pattern", "compile_basic", "__init__", "_type_of_literal", "compile_node"], "function_calls": ["len", "tokenize_wrapper", "getattr", "str", "int", "PatternSyntaxError", "_type_of_literal", "PatternCompiler"], "class_names": ["PatternSyntaxError", "PatternCompiler"], "class_method_calls": ["driver.load_grammar", "parse.ParseError", "pygram.python_grammar", "grammar.number2symbol", "self.syms", "self.pysyms", "node.value", "self.compile_basic", "grammar.opmap", "literals.evalString", "token.LBRACE", "pattern.name", "pytree.Leaf", "node.type", "token.STRING", "io.StringIO", "token.PLUS", "token.INDENT", "self.pygrammar", "token.NUMBER", "pattern.optimize", "self.grammar", "self.compile_node", "p.optimize", "repeat.children", "pytree.NegatedPattern", "pytree.HUGE", "pygram.pattern_symbols", "token.RBRACE", "tokenize.generate_tokens", "token.STAR", "self.driver", "pytree.WildcardPattern", "pygram.pattern_grammar", "pygram.Symbols", "value.isupper", "pytree.Node", "token.EQUAL", "token.DEDENT", "repeat.type", "value.startswith", "pytree.LeafPattern", "child.type", "token.NEWLINE", "token.NAME", "node.children", "pytree.NodePattern", "driver.Driver", "self.get_int", "pygram.python_symbols"]}, "conv.py": {"libraries": ["re", "pgen2.token", "pgen2.grammar"], "function_names": ["parse_graminit_c", "finish_off", "run", "parse_graminit_h"], "function_calls": ["list", "len", "int", "next", "open", "enumerate", "ord", "map", "eval", "range", "print"], "class_names": ["Converter"], "class_method_calls": ["self.labels", "states.append", "line.strip", "self.keywords", "mo.groups", "self.parse_graminit_c", "arcs.append", "self.symbol2number", "self.number2symbol", "self.dfas", "state.append", "mo.group", "self.finish_off", "self.tokens", "self.parse_graminit_h", "self.start", "self.states", "labels.append", "token.NAME", "grammar.Grammar", "line.startswith", "re.match"]}, "driver.py": {"libraries": ["io", "sys", "pkgutil", "os", "logging"], "function_names": ["parse_file", "load_grammar", "_newer", "load_packaged_grammar", "parse_tokens", "parse_stream", "__init__", "parse_string", "main", "_generate_pickle_name", "parse_stream_raw"], "function_calls": ["load_grammar", "_newer", "int", "main", "_generate_pickle_name", "map"], "class_names": ["Driver"], "class_method_calls": ["parse.ParseError", "g.dump", "self.parse_stream_raw", "self.parse_stream", "g.load", "logging.basicConfig", "sys.stdout", "logger.info", "p.addtoken", "io.open", "g.loads", "sys.exit", "logging.getLogger", "value.endswith", "token.OP", "self.convert", "io.StringIO", "parse.Parser", "logging.INFO", "self.grammar", "self.logger", "p.rootnode", "tokenize.generate_tokens", "tokenize.NL", "os.path", "token.tok_name", "self.parse_tokens", "stream.readline", "sys.version_info", "sys.argv", "grammar.Grammar", "grammar.opmap", "tokenize.COMMENT", "pgen.generate_grammar", "pkgutil.get_data", "p.setup"]}, "grammar.py": {"libraries": ["collections"], "function_names": ["produce_graminit_h", "print_arcs", "print_states", "print_labels", "__init__", "print_dfas", "produce_graminit_c"], "function_calls": ["write", "bytearray", "len", "writer", "enumerate"], "class_names": ["Grammar"], "class_method_calls": ["self.print_arcs", "self.symbol2number", "self.labels", "self.number2symbol", "self.dfas", "self.states", "self.keywords", "self.print_labels", "self.print_states", "self.tokens", "self.start", "self.symbol2label", "self.print_dfas", "collections.OrderedDict"]}, "literals.py": {"libraries": ["re"], "function_names": ["escape", "test", "evalString"], "function_calls": ["ValueError", "len", "test", "chr", "evalString", "int", "print", "range", "repr"], "class_names": [], "class_method_calls": ["re.sub", "all.startswith", "simple_escapes.get", "tail.startswith", "s.endswith", "s.startswith", "m.group"]}, "parse.py": {"libraries": ["re", "sys", "warnings", "collections", "unicodedata", "collections.namedtuple"], "function_names": ["splitattr", "port", "_splitparams", "_splitport", "unquote_plus", "username", "_splitnport", "_remove_unsafe_bytes_from_url", "splitquery", "splitvalue", "geturl", "decode", "__repr__", "password", "_splituser", "urlencode", "quote", "hostname", "urldefrag", "quote_plus", "urlunsplit", "splituser", "splitpasswd", "_coerce_args", "urlsplit", "quote_from_bytes", "unwrap", "splitport", "urlunparse", "__init__", "__missing__", "_hostinfo", "_fix_result_transcoding", "clear_cache", "parse_qs", "_splitpasswd", "splittag", "_splittag", "_to_bytes", "_splittype", "splithost", "_checknetloc", "splittype", "_decode_args", "_splitattr", "encode", "urljoin", "_noop", "_splitquery", "_userinfo", "_splitvalue", "parse_qsl", "urlparse", "_splithost", "splitnport", "unquote_to_bytes", "unquote", "_splitnetloc", "to_bytes", "_encode_result"], "function_calls": ["_splitparams", "min", "frozenset", "_splitport", "append", "_splitnport", "_remove_unsafe_bytes_from_url", "_coerce_result", "_splituser", "repr", "isinstance", "quote", "quote_via", "urlunsplit", "str", "_coerce_args", "urlsplit", "tuple", "SplitResult", "quote_from_bytes", "urlunparse", "dict", "_fix_result_transcoding", "range", "clear_cache", "ValueError", "_splitpasswd", "_splittag", "Quoter", "ParseResult", "_to_bytes", "_splittype", "UnicodeError", "int", "namedtuple", "type", "bool", "_splitattr", "hasattr", "_decode_args", "len", "DefragResult", "_splitquery", "quoter", "chr", "any", "_splitvalue", "parse_qsl", "urlparse", "_splithost", "bytes", "unquote_to_bytes", "unquote", "filter", "TypeError", "_splitnetloc", "_checknetloc"], "class_names": ["_NetlocResultMixinStr", "Quoter", "DefragResult", "ParseResultBytes", "ParseResult", "_NetlocResultMixinBytes", "SplitResultBytes", "SplitResult", "_NetlocResultMixinBase", "_ResultMixinBytes", "DefragResultBytes", "_ResultMixinStr"], "class_method_calls": ["self.netloc", "match.groups", "attr.partition", "self._userinfo", "_SplitResultBase.path", "scheme.strip", "_parse_cache.clear", "user.partition", "r.append", "_ParseResultBase.params", "x.encode", "collections.defaultdict", "obj.encode", "unicodedata.normalize", "bracketed.partition", "_DefragResultBase.url", "_ParseResultBase.fragment", "url.replace", "x.decode", "self._encoded_counterpart", "_SplitResultBase.__doc__", "_ParseResultBase.query", "l.append", "url.encode", "resolved_path.pop", "url.rfind", "_hostprog.match", "netloc.rpartition", "self.fragment", "_asciire.split", "warnings.warn", "url.lstrip", "self._decoded_counterpart", "bpath.split", "res.append", "_encoded._decoded_counterpart", "self._hostinfo", "_portprog.fullmatch", "safe.encode", "netloc.replace", "_SplitResultBase.fragment", "re.DOTALL", "self.safe", "qs.count", "_ParseResultBase.__doc__", "_typeprog.match", "url.rpartition", "netloc.isascii", "url.find", "hostname.partition", "bs.decode", "_DefragResultBase.fragment", "host.rpartition", "hostname.lower", "_parse_cache.get", "_ParseResultBase.path", "n.replace", "self.url", "_ALWAYS_SAFE.union", "_decoded._encoded_counterpart", "_SplitResultBase.scheme", "qs.split", "nv.append", "name_value.split", "re.compile", "url.split", "bs.rstrip", "query.items", "resolved_path.append", "hostinfo.partition", "_SplitResultBase.query", "bytes.fromhex", "path.split", "_ParseResultBase.scheme", "_safe_quoters.clear", "_DefragResultBase.__doc__", "sys.exc_info", "string.replace", "_SplitResultBase.netloc", "_ParseResultBase.netloc", "userinfo.partition", "self.__class__", "string.split", "scheme.lower", "port.partition", "string.encode"]}, "pgen.py": {"libraries": ["collections", "tokenize"], "function_names": ["addclosure", "gettoken", "__eq__", "dump_nfa", "addarc", "closure", "__init__", "parse", "addfirstsets", "parse_rhs", "make_dfa", "parse_item", "dump_dfa", "parse_alt", "make_first", "simplify_dfa", "make_label", "calcfirst", "expect", "unifystate", "make_grammar", "parse_atom", "raise_error"], "function_calls": ["sorted", "addclosure", "SyntaxError", "NFAState", "isinstance", "iter", "closure", "DFAState", "dict", "open", "range", "close_stream", "ValueError", "list", "set", "next", "enumerate", "eval", "len", "map", "print"], "class_names": ["DFAState", "ParserGenerator", "NFAState"], "class_method_calls": ["self.opmap", "self.dump_nfa", "self.first", "c.dfas", "self.line", "state.arcs", "names.remove", "z.addarc", "c.states", "self.tokens", "self.gettoken", "self.calcfirst", "self.dump_dfa", "tokenize.NL", "self.arcs", "self.isfinal", "other.arcs", "self.stream", "dfa.index", "c.symbol2label", "totalset.add", "first.add", "tokenize.STRING", "stream.readline", "b.addarc", "self.startsymbol", "names.insert", "self.make_label", "aa.addarc", "self.make_dfa", "state.unifystate", "totalset.update", "self.type", "self.make_first", "c.keywords", "overlapcheck.items", "self.raise_error", "arcs.setdefault", "tokenize.NEWLINE", "collections.OrderedDict", "base.add", "self.filename", "self.generator", "tokenize.COMMENT", "tokenize.ENDMARKER", "states.append", "self.value", "state.addarc", "other.isfinal", "token.generate_tokens", "self.expect", "todo.index", "self.parse_item", "self.nfaset", "self.begin", "a.addarc", "c.number2symbol", "c.labels", "tok_file.readlines", "self.verbose", "grammar.Grammar", "self.parse_alt", "self.end", "c.symbol2number", "todo.append", "stream.close", "arcs.append", "self.dfas", "c.start", "self.simplify_dfa", "self.parse_rhs", "tokenize.OP", "state.nfaset", "tokenize.generate_tokens", "token.generate_opmap", "self.parse_atom", "arcs.items", "tokenize.NAME", "self.parse", "nfastate.arcs", "state.isfinal", "c.tokens", "self.addfirstsets", "st.nfaset"]}, "token.py": {"libraries": ["itertools"], "function_names": ["generate_opmap", "generate_tokens"], "function_calls": ["len", "next"], "class_names": [], "class_method_calls": ["itertools.count", "line.split", "op.strip", "line.strip"]}, "tokenize.py": {"libraries": ["re", "token.*", "argparse", "collections", "sys", "codecs.lookup", "token", "token.EXACT_TOKEN_TYPES", "builtins.open", "codecs.BOM_UTF8", "itertools", "io.TextIOWrapper"], "function_names": ["_tokenize", "__repr__", "compat", "perror", "maybe", "exact_type", "__init__", "open", "_compile", "_get_normal_name", "find_cookie", "group", "add_whitespace", "tokenize", "read_or_stop", "any", "generate_tokens", "error", "detect_encoding", "untokenize", "main", "_all_string_prefixes"], "function_calls": ["_tokenize", "TextIOWrapper", "sorted", "lookup", "_builtin_open", "SyntaxError", "perror", "maybe", "iter", "TokenError", "toks_append", "_compile", "_get_normal_name", "find_cookie", "group", "ValueError", "list", "set", "tokenize", "TokenInfo", "read_or_stop", "len", "any", "Untokenizer", "IndentationError", "error", "detect_encoding", "readline", "main", "_all_string_prefixes", "map", "print"], "class_names": ["TokenInfo", "TokenError", "Untokenizer", "StopTokenizing"], "class_method_calls": ["out.encode", "token.__all__", "text.mode", "argparse.ArgumentParser", "enc.startswith", "token.end", "buffer.close", "_itertools.permutations", "buffer.seek", "re.escape", "self.prev_col", "endmatch.end", "ut.encoding", "cookie_re.match", "self.type", "single_quoted.add", "token.type", "result.add", "token.start", "sys.exit", "first.startswith", "f.readline", "re.UNICODE", "self.tokens", "parser.add_argument", "_itertools.repeat", "args.exact", "self.prev_row", "self.compat", "_itertools.product", "token.string", "re.ASCII", "line.decode", "token.endswith", "indents.pop", "self.encoding", "rl_gen.__next__", "initial.isidentifier", "c.upper", "sys.stdin", "readline.__self__", "blank_re.match", "collections.namedtuple", "self.string", "args.filename", "self._replace", "endpats.get", "re.compile", "pseudomatch.span", "sys.stderr", "endprog.match", "self.add_whitespace", "token.exact_type", "ut.untokenize", "triple_quoted.add", "indents.append", "match.group", "parser.parse_args", "err.args", "_itertools.chain", "buffer.readline"]}, "pygram.py": {"libraries": ["pgen2.driver", "os", "pgen2.token"], "function_names": ["__init__"], "function_calls": ["Symbols", "setattr"], "class_names": ["Symbols"], "class_method_calls": ["os.path", "python_grammar.copy", "python_grammar_no_print_statement.keywords", "python_grammar_no_print_statement.copy", "driver.load_packaged_grammar", "python_grammar_no_print_and_exec_statement.keywords", "grammar.symbol2number"]}, "pytree.py": {"libraries": ["sys", "io.StringIO", "pygram.python_symbols"], "function_names": ["clone", "generate_matches", "replace", "convert", "get_suffix", "match", "__eq__", "__repr__", "_recursive_matches", "leaves", "next_sibling", "depth", "pre_order", "__init__", "set_child", "__str__", "optimize", "_iterative_matches", "get_lineno", "__unicode__", "changed", "type_repr", "prev_sibling", "insert_child", "_eq", "remove", "post_order", "append_child", "prefix", "__new__", "_bare_name_matches", "_submatch", "match_seq"], "function_calls": ["generate_matches", "min", "Node", "repr", "isinstance", "str", "tuple", "StringIO", "range", "list", "WildcardPattern", "type", "zip", "enumerate", "type_repr", "hasattr", "len", "NodePattern", "Leaf", "map"], "class_names": ["Base", "WildcardPattern", "NodePattern", "Leaf", "Node", "LeafPattern", "BasePattern", "NegatedPattern"], "class_method_calls": ["l_children.append", "self.match", "other.children", "child.pre_order", "results.append", "self._bare_name_matches", "self.value", "_type_reprs.setdefault", "self.wildcards", "ch.parent", "self._iterative_matches", "node.lineno", "l_children.extend", "other.type", "subpattern.name", "self.fixers_applied", "self.type", "node.value", "self._recursive_matches", "self.changed", "self.column", "self.name", "self.lineno", "other.value", "node.type", "subpattern.optimize", "child.post_order", "subpattern.match", "gr.number2symbol", "BasePattern.match", "self.next_sibling", "self.was_changed", "subpattern.min", "self._prefix", "python_symbols.__dict__", "self.match_seq", "self._eq", "x.parent", "results.update", "child.leaves", "new_results.append", "self.children", "p.generate_matches", "prefix.setter", "self.parent", "ch.clone", "object.__new__", "sys.stderr", "subpattern.content", "self.min", "self.content", "node.children", "sys.version_info", "self.__class__", "self.prefix", "self.generate_matches", "r.update", "next_sib.prefix", "subpattern.max", "self._submatch", "child.parent", "other.__class__", "self.max"]}, "refactor.py": {"libraries": ["pgen2.driver", "io", "operator", "pgen2.token", "itertools.chain", "sys", "pkgutil", "collections", "fixer_util.find_root", "os", "pgen2.tokenize", "multiprocessing", "logging"], "function_names": ["log_error", "refactor_doctest", "gen_lines", "refactor_dir", "parse_block", "print_output", "__init__", "_get_head_types", "_read_python_source", "get_all_fix_names", "get_fixers", "wrap_toks", "processed_file", "_identity", "refactor_tree", "write_file", "_detect_future_features", "refactor", "get_fixers_from_package", "traverse_by", "summarize", "refactor_docstring", "log_message", "_child", "refactor_file", "log_debug", "refactor_string", "_get_headnode_dict", "advance", "refactor_stdin"], "function_calls": ["frozenset", "getattr", "RuntimeError", "isinstance", "__import__", "super", "str", "find_root", "dict", "open", "Exception", "_get_head_types", "AssertionError", "range", "list", "get_all_fix_names", "set", "next", "FixerError", "_detect_future_features", "len", "any", "fix_class", "chain", "advance", "_get_headnode_dict"], "class_names": ["_EveryNode", "MultiprocessingUnsupported", "RefactoringTool", "FixerError", "MultiprocessRefactoringTool"], "class_method_calls": ["self.processed_file", "fixer.start_tree", "fixer.match", "tree.was_changed", "pytree.Base", "tree.pre_order", "self.get_fixers", "node.replace", "node.fixers_applied", "io.open", "self.PS1", "self.refactor_dir", "block.append", "self.write_unchanged_files", "collections.defaultdict", "self.grammar", "fix_names.append", "pytree.WildcardPattern", "self.queue", "tokenize.NL", "self.post_order", "fixer._accept_type", "pytree.convert", "fixer.explicit", "input.splitlines", "every.append", "os.extsep", "self.bmi_post_order", "tree.future_features", "tree.leaves", "pygram.python_grammar_no_print_statement", "self.print_output", "result.append", "self.bmi_pre_order_heads", "self.log_debug", "self.refactor_doctest", "line.lstrip", "self.files", "match_set.values", "self.log_error", "dn.startswith", "fix_name.startswith", "self.FILE_PREFIX", "fixer.finish_tree", "self.wrap_toks", "self.gen_lines", "p.title", "p.start", "io.StringIO", "new.pop", "pytree.NegatedPattern", "features.add", "pat.content", "err.__class__", "prefix.rstrip", "dirnames.sort", "multiprocessing.JoinableQueue", "self.PS2", "os.path", "operator.attrgetter", "self.wrote", "token.NEWLINE", "token.NAME", "pkg.__path__", "line.startswith", "self.CLASS_PREFIX", "new.post_order", "self.fixer_log", "pre_order_fixers.sort", "new.leaves", "pygram.python_grammar", "self.output_lock", "fix_mod_path.rsplit", "fp.write", "node.type", "token.STRING", "name.startswith", "pat.type", "f.readline", "token.OP", "fix_name.split", "pkgutil.iter_modules", "self.options", "self.errors", "fixer.BM_compatible", "self._default_options", "multiprocessing.Process", "result.extend", "fixer.keep_line_order", "sys.stdin", "logging.DEBUG", "post_order_fixers.sort", "line.rstrip", "os.walk", "self.explicit", "p.join", "self.traverse_by", "pytree.NodePattern", "tree.post_order", "f.close", "multiprocessing.Lock", "pre_order_fixers.append", "self.refactor_docstring", "post_order_fixers.append", "self.BM", "fixer.pattern", "tokenize.detect_encoding", "self.refactor_tree", "self.bmi_post_order_heads", "self.parse_block", "fixer.transform", "self.write_file", "token.COMMENT", "logging.getLogger", "f.read", "self.logger", "self.fixers", "p.is_alive", "self.log_message", "tokenize.generate_tokens", "self.refactor_file", "self.driver", "self.refactor_string", "filenames.sort", "self._read_python_source", "self._child", "bm.BottomMatcher", "line.find", "pytree.LeafPattern", "self.bmi_pre_order", "r.update", "self.pre_order", "driver.Driver", "fixer.order"]}, "bom.py": null, "crlf.py": {"libraries": ["sys", "os"], "function_names": ["main"], "function_calls": ["main", "open", "print"], "class_names": [], "class_method_calls": ["f.write", "os.path", "sys.argv", "f.read", "data.replace"]}, "different_encoding.py": null, "false_encoding.py": null, "bad_order.py": {"libraries": ["lib2to3.fixer_base.BaseFix"], "function_names": [], "function_calls": [], "class_names": ["FixBadOrder"], "class_method_calls": []}, "fix_explicit.py": {"libraries": ["lib2to3.fixer_base.BaseFix"], "function_names": ["match"], "function_calls": [], "class_names": ["FixExplicit"], "class_method_calls": []}, "fix_first.py": {"libraries": ["lib2to3.fixer_base.BaseFix"], "function_names": ["match"], "function_calls": [], "class_names": ["FixFirst"], "class_method_calls": []}, "fix_last.py": {"libraries": ["lib2to3.fixer_base.BaseFix"], "function_names": ["match"], "function_calls": [], "class_names": ["FixLast"], "class_method_calls": []}, "fix_parrot.py": {"libraries": ["lib2to3.fixer_base.BaseFix", "lib2to3.fixer_util.Name"], "function_names": ["transform"], "function_calls": ["Name"], "class_names": ["FixParrot"], "class_method_calls": ["name.prefix", "name.replace"]}, "fix_preorder.py": {"libraries": ["lib2to3.fixer_base.BaseFix"], "function_names": ["match"], "function_calls": [], "class_names": ["FixPreorder"], "class_method_calls": []}, "no_fixer_cls.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "parrot_example.py": {"libraries": [], "function_names": ["parrot"], "function_calls": [], "class_names": [], "class_method_calls": []}, "infinite_recursion.py": {"libraries": ["ctypes.*"], "function_names": [], "function_calls": ["POINTER", "alignment", "sizeof", "CFUNCTYPE"], "class_names": ["PBEPARAM_st", "engine_st", "MD2state_st", "_opaque_pthread_once_t", "timespec", "obj_name_st", "crypto_ex_data_st", "pkcs7_enveloped_st", "_opaque_pthread_mutexattr_t", "rsa_st", "X509_val_st", "ldiv_t", "cert_st", "__siginfo", "pkcs7_signedandenveloped_st", "st_CRYPTO_EX_DATA_IMPL", "X509_pubkey_st", "pem_recip_st", "pkcs8_priv_key_info_st", "X509_sig_st", "ssl_ctx_st", "__sFILE", "evp_cipher_st", "dh_method", "bio_st", "asn1_string_st", "bignum_ctx", "pkcs7_recip_info_st", "__sbuf", "pkcs7_signed_st", "X509_extension_st", "evp_cipher_info_st", "N13ssl2_state_st4DOLLAR_19E", "x509_store_ctx_st", "pkcs7_signer_info_st", "N10pem_ctx_st4DOLLAR_17E", "_opaque_pthread_t", "BIT_STRING_BITNAME_st", "pkcs7_digest_st", "ucontext64", "asn1_ctx_st", "sigaltstack", "bf_key_st", "pkcs7_issuer_and_serial_st", "x509_cinf_st", "lhash_st", "ssl_method_st", "x509_hash_dir_st", "PBE2PARAM_st", "wait", "RIPEMD160state_st", "ssl3_enc_method", "dsa_st", "bn_mont_ctx_st", "div_t", "X509_info_st", "bn_recp_ctx_st", "asn1_method_st", "N10ssl_ctx_st4DOLLAR_18E", "CRYPTO_dynlock", "sigcontext", "cast_key_st", "pem_ctx_st", "rlimit", "x509_attributes_st", "N18x509_attributes_st4DOLLAR_13E", "pkcs7_encrypted_st", "N11evp_pkey_st4DOLLAR_12E", "x509_trust_st", "N4wait3DOLLAR_4E", "ASN1_TEMPLATE_st", "ui_method_st", "__sigaction_u", "mdc2_ctx_st", "__mbstate_t", "X509_crl_st", "_opaque_pthread_condattr_t", "X509_req_st", "env_md_st", "x509_lookup_st", "__sFILEX", "mcontext64", "Netscape_certificate_sequence", "__darwin_pthread_handler_rec", "ssl3_state_st", "lldiv_t", "N14x509_object_st4DOLLAR_14E", "X509_name_entry_st", "sigvec", "N8pkcs7_st4DOLLAR_15E", "timeval", "ssl2_state_st", "aes_key_st", "bignum_st", "x509_file_st", "x509_object_st", "PBKDF2PARAM_st", "ssl_cipher_st", "x509_store_st", "x509_lookup_method_st", "mcontext", "sigevent", "asn1_string_table_st", "N12asn1_type_st4DOLLAR_11E", "_opaque_pthread_mutex_t", "rusage", "N23_ossl_old_des_ks_struct4DOLLAR_10E", "N10pem_ctx_st4DOLLAR_16E", "X509_name_st", "_ossl_old_des_ks_struct", "X509_revoked_st", "ASN1_ITEM_st", "env_md_ctx_st", "rsa_meth_st", "ASN1_ENCODING_st", "X509_algor_st", "pkcs7_enc_content_st", "rc2_key_st", "N13ssl3_state_st4DOLLAR_20E", "_opaque_pthread_cond_t", "MD4state_st", "dh_st", "ssl3_record_st", "sess_cert_st", "CRYPTO_dynlock_value", "ssl_session_st", "X509_crl_info_st", "__sigaction", "X509_objects_st", "rc4_key_st", "Netscape_spki_st", "buf_mem_st", "ASN1_VALUE_st", "asn1_header_st", "lhash_node_st", "pkcs7_st", "_opaque_pthread_attr_t", "ssl3_buffer_st", "X509_req_info_st", "ui_st", "asn1_type_st", "fd_set", "N4wait3DOLLAR_3E", "hostent", "ASN1_TLC_st", "ucontext", "bio_method_st", "evp_Encode_Ctx_st", "comp_ctx_st", "rc5_key_st", "_opaque_pthread_rwlockattr_t", "bn_blinding_st", "tm", "ssl_st", "PEM_Encode_Seal_st", "evp_pkey_st", "MD5state_st", "x509_cert_aux_st", "stack_st", "_opaque_pthread_rwlock_t", "dsa_method", "AUTHORITY_KEYID_st", "evp_cipher_ctx_st", "sigaction", "bio_f_buffer_ctx_struct", "DSA_SIG_st", "Netscape_spkac_st", "ssl_comp_st", "comp_method_st", "ui_string_st", "N6DES_ks3DOLLAR_9E", "x509_st", "DES_ks", "asn1_object_st", "crypto_ex_data_func_st", "private_key_st", "sigval", "SHAstate_st", "sigstack"], "class_method_calls": ["ssl3_enc_method._fields_", "pkcs7_signer_info_st._fields_", "dh_method._fields_", "X509_algor_st._fields_", "rlimit._fields_", "rsa_meth_st._fields_", "bignum_st._fields_", "pkcs7_issuer_and_serial_st._fields_", "N8pkcs7_st4DOLLAR_15E._fields_", "buf_mem_st._fields_", "bio_st._fields_", "sigaction._fields_", "MD5state_st._fields_", "mcontext._fields_", "N13ssl2_state_st4DOLLAR_19E._fields_", "PBE2PARAM_st._fields_", "bn_blinding_st._fields_", "x509_st._fields_", "cast_key_st._fields_", "ssl_ctx_st._fields_", "rc5_key_st._fields_", "evp_pkey_st._fields_", "sigaltstack._fields_", "asn1_object_st._fields_", "CRYPTO_dynlock._fields_", "pkcs7_st._fields_", "DSA_SIG_st._fields_", "ASN1_TEMPLATE_st._fields_", "bf_key_st._fields_", "asn1_ctx_st._fields_", "cert_st._fields_", "N11evp_pkey_st4DOLLAR_12E._fields_", "X509_name_st._fields_", "_opaque_pthread_rwlock_t._fields_", "x509_trust_st._fields_", "x509_lookup_st._fields_", "X509_crl_info_st._fields_", "bn_recp_ctx_st._fields_", "sigstack._fields_", "sigvec._fields_", "BIT_STRING_BITNAME_st._fields_", "lldiv_t._pack_", "ucontext64._fields_", "ssl3_record_st._fields_", "dsa_method._fields_", "N12asn1_type_st4DOLLAR_11E._fields_", "_ossl_old_des_ks_struct._fields_", "N4wait3DOLLAR_4E._fields_", "__mbstate_t._pack_", "asn1_header_st._fields_", "pem_recip_st._fields_", "X509_val_st._fields_", "ssl3_buffer_st._fields_", "_opaque_pthread_mutex_t._fields_", "N13ssl3_state_st4DOLLAR_20E._fields_", "x509_cinf_st._fields_", "x509_cert_aux_st._fields_", "pkcs8_priv_key_info_st._fields_", "x509_object_st._fields_", "X509_sig_st._fields_", "PBKDF2PARAM_st._fields_", "ssl3_state_st._fields_", "ssl_method_st._fields_", "obj_name_st._fields_", "ui_string_st._fields_", "tm._fields_", "rlimit._pack_", "env_md_ctx_st._fields_", "ldiv_t._fields_", "bignum_ctx._fields_", "__sFILE._fields_", "X509_objects_st._fields_", "_opaque_pthread_condattr_t._fields_", "ASN1_VALUE_st._fields_", "pkcs7_encrypted_st._fields_", "MD4state_st._fields_", "rsa_st._fields_", "rusage._fields_", "Netscape_certificate_sequence._fields_", "lhash_st._fields_", "ssl2_state_st._fields_", "asn1_method_st._fields_", "x509_store_st._fields_", "ucontext._fields_", "__sbuf._fields_", "__siginfo._fields_", "timespec._fields_", "PBEPARAM_st._fields_", "ssl_cipher_st._fields_", "comp_ctx_st._fields_", "engine_st._fields_", "X509_req_info_st._fields_", "ASN1_ITEM_st._fields_", "x509_attributes_st._fields_", "st_CRYPTO_EX_DATA_IMPL._fields_", "evp_Encode_Ctx_st._fields_", "ui_st._fields_", "asn1_string_st._fields_", "PEM_Encode_Seal_st._fields_", "Netscape_spki_st._fields_", "_opaque_pthread_once_t._fields_", "N10ssl_ctx_st4DOLLAR_18E._fields_", "hostent._fields_", "_opaque_pthread_cond_t._fields_", "SHAstate_st._fields_", "_opaque_pthread_rwlockattr_t._fields_", "__mbstate_t._fields_", "X509_req_st._fields_", "X509_revoked_st._fields_", "bn_mont_ctx_st._fields_", "AUTHORITY_KEYID_st._fields_", "crypto_ex_data_func_st._fields_", "N10pem_ctx_st4DOLLAR_17E._fields_", "N14x509_object_st4DOLLAR_14E._fields_", "sigevent._fields_", "ASN1_TLC_st._fields_", "CRYPTO_dynlock_value._fields_", "private_key_st._fields_", "__sFILE._pack_", "Netscape_spkac_st._fields_", "bio_f_buffer_ctx_struct._fields_", "__sigaction_u._fields_", "DES_ks._fields_", "pkcs7_enc_content_st._fields_", "rc4_key_st._fields_", "crypto_ex_data_st._fields_", "pkcs7_digest_st._fields_", "bio_method_st._fields_", "dsa_st._fields_", "sigcontext._fields_", "env_md_st._fields_", "x509_store_ctx_st._fields_", "pkcs7_signed_st._fields_", "ui_method_st._fields_", "X509_pubkey_st._fields_", "N6DES_ks3DOLLAR_9E._fields_", "fd_set._fields_", "pem_ctx_st._fields_", "aes_key_st._fields_", "mcontext64._fields_", "pkcs7_signedandenveloped_st._fields_", "X509_extension_st._fields_", "evp_cipher_ctx_st._fields_", "__sFILEX._fields_", "timeval._fields_", "lhash_node_st._fields_", "lldiv_t._fields_", "ssl_st._fields_", "pkcs7_enveloped_st._fields_", "evp_cipher_info_st._fields_", "X509_info_st._fields_", "X509_crl_st._fields_", "sigval._fields_", "stack_st._fields_", "MD2state_st._fields_", "div_t._fields_", "N4wait3DOLLAR_3E._fields_", "comp_method_st._fields_", "x509_lookup_method_st._fields_", "dh_st._fields_", "evp_cipher_st._fields_", "x509_hash_dir_st._fields_", "_opaque_pthread_mutexattr_t._fields_", "ssl_session_st._fields_", "ASN1_ENCODING_st._fields_", "N10pem_ctx_st4DOLLAR_16E._fields_", "__darwin_pthread_handler_rec._fields_", "asn1_string_table_st._fields_", "RIPEMD160state_st._fields_", "N23_ossl_old_des_ks_struct4DOLLAR_10E._fields_", "wait._fields_", "asn1_type_st._fields_", "sess_cert_st._fields_", "__sigaction._fields_", "_opaque_pthread_attr_t._fields_", "X509_name_entry_st._fields_", "pkcs7_recip_info_st._fields_", "ssl_comp_st._fields_", "rc2_key_st._fields_", "_opaque_pthread_t._fields_", "N18x509_attributes_st4DOLLAR_13E._fields_", "mdc2_ctx_st._fields_", "x509_file_st._fields_"]}, "py2_test_grammar.py": null, "py3_test_grammar.py": {"libraries": ["test.support.check_syntax_error", "unittest", "time.time", "sys.maxsize", "time", "sys.path", "sys.*", "sys", "sys.argv", "test.support.run_unittest"], "function_names": ["testPlainIntegers", "d21v", "pos2key2", "meth3", "g2", "test_break_continue_loop", "testIf", "__init__", "testShiftOps", "testEllipsis", "testGlobal", "testLambdef", "testExprStmt", "g1", "testComparison", "test_nested_front", "f3", "testUnderscoresInNumbers", "test_in_func", "d21", "testReturn", "__exit__", "testAtoms", "pos2key2dict", "testStringLiterals", "testDictcomps", "testNonlocal", "testUnaryOps", "testLongIntegers", "_checkeval", "d12v", "testComprehensionSpecials", "testAdditiveOps", "a2", "v2", "testContinueStmt", "testBinaryMaskOps", "d01v", "testSuite", "d22v", "testSelectors", "d12", "f", "class_decorator", "d11", "d22", "testClassdef", "testYield", "pos0key1", "v1", "testRaise", "__getitem__", "meth2", "d02", "testFor", "testWhile", "test_main", "testBackslash", "v0", "testFuncdef", "testEvalInput", "f1", "testMultiplicativeOps", "test_with_statement", "f2", "d11v", "testGenexps", "testIfElseExpr", "testListcomps", "testImport", "testAssert", "testDelStmt", "testTry", "testTest", "__enter__", "d01", "null", "testFloats", "__len__", "meth1", "test_inner", "testPassStmt", "a1", "d02v", "testSimpleStmt", "foo", "testBreakStmt"], "function_calls": ["y", "d02", "l3", "pos2key2dict", "manager", "l1", "d21v", "pos2key2", "Squares", "g2", "l5", "RuntimeError", "x", "test_main", "_checkeval", "isinstance", "str", "d01", "d12v", "v0", "run_unittest", "range", "list", "f1", "v2", "l6", "d01v", "type", "next", "test_inner", "eval", "d12", "d22v", "f", "g1", "len", "test_nested_front", "l4", "f3", "f2", "d11", "d22", "d11v", "check_syntax_error", "sum", "d02v", "test_in_func", "d21", "foo", "pos0key1", "ord", "v1", "print"], "class_names": ["B2", "TokenTests", "GrammarTests", "B", "C", "C1", "G", "C2", "manager", "Squares", "D"], "class_method_calls": ["time.time", "f3.__code__", "sys.path", "self.sofar", "result.append", "f.__annotations__", "f2.__code__", "self.assertEquals", "self.fail", "e.args", "self.assert_", "L.sort", "self.assertEqual", "sys.modules", "s.strip", "unittest.TestCase", "self.max", "self.assertRaises"]}, "pytree_idempotency.py": {"libraries": ["pgen2.driver", "__future__.print_function", "sys", "os", "logging"], "function_names": ["main", "diff"], "function_calls": ["diff", "str", "main", "open", "hasattr", "print"], "class_names": [], "class_method_calls": ["driver.load_grammar", "problems.append", "sys.modules", "logging.basicConfig", "f.write", "os.remove", "pgen2.parse", "os.system", "dr.parse_file", "pytree.convert", "sys.path", "os.path", "sys.stderr", "mod.__file__", "os.listdir", "sys.argv", "f.close", "driver.Driver", "name.endswith", "fn.endswith"]}, "test_all_fixers.py": {"libraries": ["unittest", "test.support"], "function_names": ["setUp", "test_all_project_files"], "function_calls": [], "class_names": ["Test_all"], "class_method_calls": ["support.all_project_files", "support.TestCase", "self.refactor", "test.support", "unittest.main", "support.get_refactorer"]}, "test_fixers.py": {"libraries": ["fixes.fix_urllib.MAPPING", "operator.itemgetter", "itertools.chain", "lib2to3.fixes.fix_import", "fixes.fix_imports2.MAPPING", "lib2to3.tests.support", "lib2to3.fixer_util", "lib2to3.pygram", "os", "fixes.fix_imports.MAPPING"], "function_names": ["test_unchanged_complex_float", "test_assign_to_next_in_tuple", "test_bytes_literal_escape_u", "test_extreme", "test_bare_operator_irepeat", "_check", "test_unchanged_6b", "test_nested_tuples", "test_unchanged_1", "test_01", "test_eq_simple", "test_in_consuming_context", "test_is_reverse", "test_prefix_preservation_5", "test_operator_isNumberType", "test_from", "test_long_int_2", "test_bare_sequenceIncludes", "test_simple_no_space_before_target", "test_ifilter_and_zip_longest", "test_native_literal_escape_u", "test_15", "test_bare_except_and_else_finally", "test_tuple_exc_2", "test_import_module_as", "test_none", "test_builtin_assign", "test_unchanged_3", "check_both", "test_12", "test_import_module_usage", "test_whitespace", "test_None_with_multiple_arguments", "test_unchanged_4", "test_05", "test_map_basic", "test_7", "test_tb_3", "test_basestring", "test_operator_irepeat", "test_is_simple", "test_complex", "test_unchanged_7", "test_prefix_preservation_2", "test_bare_operator_repeat", "test_map_nochange", "test_in_package", "test_prefix_preservation_6", "assert_runs_after", "test_docstring", "test_indentation", "test_comments", "test_future", "test_21", "test_single_arg", "p", "test_subscript", "test_07", "test_varargs", "test_method_4", "test_17", "test_string_exc", "test_octal_1", "test_variants", "test_not_in_package", "test_import_star", "test_with_future_print_function", "test_simple_1", "test_filter_nochange", "test_multilation", "test_tb_4", "test_weird_target_3", "test_untouched_1", "test_semicolon", "test_untouched_2", "test_tuple", "test_complex_3", "test_while_unchanged", "test_multiple_imports", "test_shadowing_for_simple", "test_prefix_preservation_1", "test_attr_ref", "test_buffer", "test_08", "test_lambda_nested", "test_shadowing_import_1", "test_idempotency_print_as_function", "test_operator_sequenceIncludes", "test_tuple_exc_1", "test_03", "test_unicode_literal_1", "test_while", "test_meta", "test_1", "test_simple_2", "test_range_in_for", "test_noncall_access_1", "test_bare_isCallable", "test_shadowing_funcdef_1", "test_prefix", "test_type_unchanged", "test_27", "test_multi_class", "test_23", "test_25", "test_tb_2", "test_noncall_access_2", "test_call", "test_04", "test_already_relative_import", "test_bare_operator_isMappingType", "test_bare_operator_isSequenceType", "test_slicing", "test_unchanged_2", "test_unchanged_9", "test_ne_expression", "test_tuple_value", "test_24", "test_files_checked", "test_unchanged_8", "test_prefix_preservation_3", "test_10", "test_dotted_name", "test_shadowing_assign_tuple_2", "test_builtin_assign_in_tuple", "test_spacing", "test_native_unicode_literal_escape_u", "test_lambda_nested_multi_use", "test_14", "test_dotted_import", "test_warn_1", "test_future_builtins", "test_method_2", "test_18", "fake_exists", "test_tb_1", "test_simple_call", "test_with_trailing_comma", "test_5", "test_comments_and_spacing", "test_06", "test_nested", "test_lambda_one_tuple", "test_complex_expression", "test_sort_simple_expr", "test_tuple_detection", "test_chained", "test_shadowing_for_tuple_1", "test_vargs_without_trailing_comma", "test_9", "test_indented", "test_listcomps", "test_method_unchanged", "test_trailing_comma_2", "test_with_globals", "test_idempotency", "test_13", "test_after_local_imports_refactoring", "test_in_contains_test", "test_local_and_absolute", "test_trailing_comment", "test_ne_reverse", "test_method_1", "test_tb_8", "test_shadowing_for_tuple_2", "test_with_comments", "test_run_order", "test_is_not_reverse", "test_unchanged_hex", "test_is_not_simple", "test_no_trailing_comma", "test_unchanged_float", "test_unchanged_complex_int", "test_operator_isSequenceType", "test_unchanged_exp", "test_30", "test_from_as", "test_bug_7253", "test_lambda_parens_single_arg", "test_sort_unchanged", "test_import_from", "test_16", "test_with_absolute_import_enabled", "test_None_value", "test_method_3", "test_multiple_imports_as", "test_with_globals_locals", "test_bare_except", "test", "test_operator_repeat", "test_19", "test_import_from_package", "test_sort_list_call", "test_star", "test_4", "warns_unchanged", "test_shadowing_import_from_1", "test_eq_reverse", "test_6", "test_zip_nochange", "test_shadowing_assign_tuple_1", "test_string_exc_val", "test_zip_trailers", "test_dotted_import_as", "test_weird_comments", "test_shadowing_import_from_4", "test_deprecated_names", "test_ne_simple", "test_tb_6", "test_02", "test_wrap_in_list", "test_unchanged_func", "test_comments_and_indent", "test_lambda_simple_reverse", "test_unchanged_6", "test_shadowing_funcdef_2", "test_no_sys_import", "test_two_args", "warns", "test_import_from_as", "test_assign_to_next_in_list", "test_no_spaces", "test_dotted_from", "test_unchanged_0", "test_unicode_literal_3", "test_weird_target_1", "test_shadowing_global_2", "test_double_transform", "test_lambda_no_change", "test_29", "test_eq_expression", "test_qualified", "test_in_a_function", "test_unicode_literal_escape_u", "test_import_module", "test_tb_5", "test_2", "test_09", "test_noncall_access_3", "test_string_exc_val_tb", "test_prefix_preservation", "test_space_2", "test_keywords", "test_0", "test_shadowing_import_from_2", "test_names_import", "test_shadowing_import_2", "test_filter_trailers", "test_multi_2", "tearDown", "test_32", "test_is_not_expression", "XXX_test_from_import_usage", "checkall", "test_list_unpack", "test_basic", "test_unchanged_octal", "test_weird_target_2", "test_long_int_1", "test_one_line_suites", "test_multi_1", "test_map_trailers", "test_tb_7", "test_unicode_call", "test_lambda_simple", "test_warn_3", "test_builtin_assign_in_list", "test_prefix_preservation_4", "test_zip_basic", "test_shadowing_assign_simple", "test_11", "test_simple", "test_26", "test_filter_basic", "test_operator_isMappingType", "test_conversion", "test_operator_isCallable", "test_shadowing_global_1", "test_shadowing_import_3", "test_assign_to_next", "setUp", "test_unicode_literal_2", "test_shadowing_import_from_3", "test_bare_operator_isNumberType", "test_warn_2", "test_unchanged_int", "test_trailing_comma_1", "test_20", "test_unchanged", "test_space", "test_reduced", "test_space_1", "test_unchanged_5", "test_8", "test_28", "test_unchanged_complex_bare", "test_unichr", "check", "test_3", "test_complex_1", "test_shadowing_assign_list_2", "test_call_with_lambda", "test_remove_multiple_items", "test_tuple_unpack", "test_lambda_simple_multi_use", "unchanged", "test_complex_2", "test_basic_types_convert", "test_import", "test_long_hex", "test_import_as", "test_comment", "test_xrange_in_for", "test_trailing_comma_3", "test_22", "test_three_args", "test_untouched_3", "test_31", "test_is_expression", "test_spaces_before_file", "test_multi_fixed_excepts_before_bare_except", "test_shadowing_assign_list_1"], "function_calls": ["list", "super", "str", "set", "itemgetter", "p", "chain", "map"], "class_names": ["Test_raw_input", "Test_execfile", "Test_metaclass", "Test_isinstance", "Test_imports_fixer_order", "Test_has_key", "Test_standarderror", "Test_nonzero", "Test_urllib", "Test_long", "ImportsFixerTests", "Test_imports2", "FixerTestCase", "Test_raise", "Test_set_literal", "Test_tuple_params", "Test_exitfunc", "Test_paren", "Test_unicode", "Test_repr", "Test_methodattrs", "Test_sys_exc", "Test_operator", "Test_itertools", "Test_apply", "Test_numliterals", "Test_itertools_imports", "Test_input", "Test_intern", "Test_throw", "Test_getcwdu", "Test_exec", "Test_imports", "Test_types", "Test_map", "Test_future", "Test_asserts", "Test_reduce", "Test_zip", "Test_import", "Test_renames", "Test_xreadlines", "Test_buffer", "Test_reload", "Test_xrange", "Test_ne", "Test_print", "Test_xrange_with_reduce", "Test_funcattrs", "Test_except", "Test_next", "Test_idioms", "Test_basestring", "Test_dict", "Test_filter"], "class_method_calls": ["self.fixer_log", "self.checkall", "tree.was_changed", "fixes.extend", "mapping2.copy", "support.reformat", "self.assertEqual", "self.assert_runs_after", "r.get_fixers", "path.split", "self.check", "self._check", "fixer_util.consuming_calls", "fixer.log", "self.assertIn", "self.fail", "self.fixer", "self.refactor", "self.files_checked", "support.get_refactorer", "support.TestCase", "self.attrs", "self.check_both", "self.always_exists", "x.__class__", "self.warns_unchanged", "fix_import.exists", "self.filename", "os.path", "all_members.append", "self.modules", "expected_checks.add", "self.assertTrue", "self.warns", "self.present_files", "self.unchanged", "pygram.python_grammar_no_print_statement"]}, "test_main.py": {"libraries": ["json", "unittest", "re", "textwrap", "importlib.metadata.distributions", "importlib.metadata", "importlib.metadata.entry_points", "pickle", "importlib.metadata.Distribution", "importlib.metadata.metadata", "importlib.metadata.version", "importlib.metadata.EntryPoint", "importlib.metadata.PackageNotFoundError", "pyfakefs.fake_filesystem_unittest", "stubs.fake_filesystem_unittest"], "function_names": ["pkg_with_non_ascii_description", "test_hashable", "setUp", "test_metadata_loads", "test_repr", "test_entrypoint_with_colon_in_name", "test_dist_name_found_as_any_case", "test_immutable", "test_invalid_usage", "__init__", "test_egg", "pkg_with_non_ascii_description_egg_info", "pkg_with_dashes", "test_entry_point_pickleable", "test_import_nonexistent_module", "test_resolve", "test_retrieves_version_of_self", "test_new_style_classes", "test_resolve_without_attr", "test_package_discovery", "test_discovery", "test_egg_info", "test_dashes_in_dist_name_found_as_underscores", "test_for_name_does_not_exist", "pkg_with_mixed_case", "test_json_dump", "test_metadata_loads_egg_info"], "function_calls": ["list", "isinstance", "any", "version", "super", "EntryPoint", "metadata", "distributions", "all", "hash", "dict", "entry_points", "repr"], "class_names": ["DirectoryTest", "DiscoveryTests", "TestEntryPoints", "NonASCIITests", "InaccessibleSysPath", "BasicTests", "ImportTests", "NameNormalizationTests", "MissingSysPath"], "class_method_calls": ["self.setUpPyfakefs", "self.assertIsInstance", "metadata_dir.mkdir", "self.assertEqual", "ep.value", "self.pkg_with_non_ascii_description", "self.ep", "self.site_dir", "meta.get_payload", "self.fs", "fixtures.EggInfoPkg", "dist.metadata", "fp.write", "ffs.TestCase", "importlib.import_module", "ep.load", "dist.version", "egg.mkdir", "pkg_name.upper", "fixtures.DistInfoPkg", "json.dumps", "self.assertRaises", "pkg_name.lower", "self.pkg_with_dashes", "Distribution.from_name", "self.pkg_with_non_ascii_description_egg_info", "self.pkg_with_mixed_case", "fixtures.SiteDir", "pickle.loads", "textwrap.dedent", "self.version_pattern", "self.add_sys_path", "importlib.metadata", "fixtures.OnSysPath", "strm.write", "pickle.dumps", "re.match", "unittest.TestCase", "metadata.open"]}, "test_parser.py": {"libraries": ["unittest", "copy", "operator", "parser", "struct", "pickle", "test.support", "test.support.script_helper.assert_python_failure"], "function_names": ["test_simple_assignments", "test_pep263", "test_illegal_yield_2", "test_illegal_encoding", "test_extended_unpacking", "test_compile_expr", "test_basic_import_statement", "test_invalid_node_id", "test_yield_statement", "test_issue_9011", "XXXROUNDUP", "test_illegal_yield_1", "test_junk", "test_set_comprehensions", "test_nonlocal_statement", "test_copy_pickle", "test_dict_displays", "test_simple_expression", "test_try_stmt", "check_bad_tree", "test_class_defs", "test_ParserError_message", "test_named_expressions", "test_raise_statement", "test_compile_suite", "test_comparisons", "test_await_statement", "test_import_from_statement", "check_expr", "test_compile_badunicode", "test_assert", "test_function_defs", "test_compile_filename", "test_flags_passed", "test_async_for_statement", "test_expressions", "test_sizeof", "walk", "roundtrip", "test_malformed_global", "test_position", "_nested_expression", "test_with", "test_a_comma_comma_c", "test_relative_imports", "test_simple_augmented_assignments", "check_st_sizeof", "test_list_displays", "test_illegal_terminal", "test_async_with_statement", "sizeofchildren", "test_two_args_to_expr", "test_if_stmt", "test_deeply_nested_list", "test_missing_import_source", "test_argument_unpacking", "test_dict_comprehensions", "test_trigger_memory_error", "test_var_annot", "test_set_displays", "test_illegal_operator", "test_compile_error", "check_suite"], "function_calls": ["isinstance", "list", "min", "assert_python_failure", "bytearray", "max", "eval", "sorted", "len", "str", "check_st_sizeof", "memoryview", "sizeofchildren", "XXXROUNDUP", "walk", "f", "range", "exec"], "class_names": ["IllegalSyntaxTestCase", "RoundtripLegalSyntaxTestCase", "CompileTestCase", "OtherParserCase", "ParserStackLimitTestCase", "STObjectTestCase"], "class_method_calls": ["copy.copy", "self.assertIsInstance", "self.assertEqual", "struct.calcsize", "st.compile", "self.check_sizeof", "parser.compilest", "operator.ge", "st.tolist", "parser.suite", "self.assertIn", "self.fail", "parser.expr", "st.totuple", "suite.compile", "operator.lt", "code.co_filename", "self._nested_expression", "self.roundtrip", "self.assertRaises", "self.assertWarns", "copy.deepcopy", "support.calcobjsize", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "parser.ParserError", "st2.totuple", "operator.gt", "unittest.main", "self.check_expr", "parser.sequence2st", "parser.st2tuple", "parser.st2list", "st_copy.totuple", "support.cpython_only", "pickle.dumps", "operator.le", "self.assertTrue", "self.check_suite", "st1.totuple", "unittest.TestCase", "self.check_bad_tree", "support.check_sizeof"]}, "test_pytree.py": {"libraries": ["lib2to3.pytree"], "function_names": ["test_post_order", "test_leaves", "test_node_append_child", "test_node_constructor_prefix", "sorted", "test_wildcard", "test_depth", "test_node_prev_sibling", "test_node_insert_child", "test_pre_order", "test_replace_with_list", "test_remove", "test_leaf_next_sibling", "test_leaf_prev_sibling", "test_node_recursive_equality", "test_generate_matches", "test_leaf_equality", "test_node_prefix", "test_has_key_example", "test_leaf_str_numeric_value", "test_basic_patterns", "test_leaf_constructor_prefix", "test_replace", "test_node_str", "test_changed", "test_node_next_sibling", "test_leaf", "test_node", "test_node_repr", "test_node_equality", "test_node_set_child", "test_remove_parentless", "test_get_suffix", "test_leaf_repr", "test_leaf_prefix", "test_instantiate_base", "test_leaf_str"], "function_calls": ["list", "len", "sorted", "str", "repr"], "class_names": ["TestPatterns", "TestNodes"], "class_method_calls": ["self.assertIsInstance", "n1.post_order", "n1.prev_sibling", "n2.next_sibling", "l2.next_sibling", "p1.prev_sibling", "pytree.Base", "n1.remove", "self.assertEqual", "self.assertNotEqual", "l1.depth", "self.assertIs", "l3.prefix", "pn.match", "n2.children", "pytree.Leaf", "pw.generate_matches", "r.keys", "l1.was_changed", "n1.insert_child", "n1.next_sibling", "n1.type", "n2.parent", "pl.match", "n1.was_changed", "l1.next_sibling", "n1.append_child", "l1.parent", "n2.set_child", "l1.value", "self.assertRaises", "n1.prefix", "l2.replace", "l1.remove", "n1.set_child", "n2.prev_sibling", "support.TestCase", "l2.prefix", "l2.prev_sibling", "pytree.generate_matches", "n1.depth", "l2.remove", "pattern.match", "pytree.WildcardPattern", "l1.changed", "n1.parent", "l2.parent", "p1.next_sibling", "l1.type", "n1.children", "l1.prefix", "pytree.Node", "n1.changed", "n3.depth", "n1.leaves", "n1.get_suffix", "l1.get_suffix", "pytree.LeafPattern", "n2.was_changed", "l2.get_suffix", "l.sort", "self.assertTrue", "pytree.NodePattern", "l1.prev_sibling", "self.assertFalse", "n1.pre_order", "n2.get_suffix", "l3.get_suffix", "pw.match_seq"]}, "test_refactor.py": {"libraries": ["unittest", "io", "re", "myfixes.fix_last.FixLast", "myfixes.fix_explicit.FixExplicit", "codecs", "shutil", "sys", "tempfile", "lib2to3.fixer_base", "myfixes.fix_first.FixFirst", "myfixes.fix_preorder.FixPreorder", "lib2to3.pgen2.token", "lib2to3.pygram", "os", "lib2to3.refactor", "myfixes.fix_parrot.FixParrot"], "function_names": ["check", "read_file", "setUp", "test_naughty_fixers", "test_fixer_loading_helpers", "test_get_headnode_dict", "check_file_refactoring", "test_refactor_file_write_unchanged_file", "test_refactor_file", "test_detect_future_features", "test_crlf_newlines", "test_refactor_docstring", "test_refactor_dir", "print_output", "test_print_function_option", "test_false_file_encoding", "test_refactor_stdin", "test_file_encoding", "test_bom", "test_crlf_unchanged", "rt", "test_write_unchanged_files_option", "tearDown", "mock_refactor_file", "recording_log_debug", "init_test_file", "test_fixer_loading", "test_explicit", "test_refactor_string", "refactor_file", "check_instances"], "function_calls": ["MyRT", "check", "len", "isinstance", "SimpleFix", "FileInputFix", "run", "str", "zip", "open", "fs", "NoneFix"], "class_names": ["MyRT", "FileInputFix", "SimpleFix", "TestRefactoringTool", "NoneFix"], "class_method_calls": ["os.mkdir", "refactor._detect_future_features", "d.pop", "rt.refactor_file", "rt.refactor_dir", "re.escape", "self.assertEqual", "fixer_base.BaseFix", "d.values", "self.assertNotEqual", "rt.driver", "refactor._get_headnode_dict", "self.assertIs", "results.extend", "tempfile.mkdtemp", "data.startswith", "self.assertIn", "self.fail", "self.addCleanup", "rt.get_fixers", "self.init_test_file", "self.assertNotIn", "io.StringIO", "rt.grammar", "rt.write_unchanged_files", "rt.post_order", "rt.log_debug", "refactor.get_all_fix_names", "self.assertRaises", "rt.refactor_stdin", "pygram.python_symbols", "self.rt", "os.sep", "self.check_file_refactoring", "self.assertRegex", "self.refactor_file", "shutil.rmtree", "fp.read", "debug_messages.append", "sys.stdin", "rt.refactor_docstring", "codecs.BOM_UTF8", "shutil.copy", "os.linesep", "sys.path", "refactor.get_fixers_from_package", "os.path", "rt.refactor_string", "self.check_instances", "got.append", "token.NAME", "os.chmod", "self.read_file", "self.assertTrue", "refactor.FixerError", "unittest.TestCase", "self.assertFalse", "pygram.python_grammar_no_print_statement", "refactor.RefactoringTool"]}, "linecache.py": {"libraries": ["sys", "os", "functools", "tokenize"], "function_names": ["lazycache", "updatecache", "checkcache", "getlines", "getline", "clearcache"], "function_calls": ["lazycache", "list", "len", "updatecache", "getattr", "getlines", "clearcache"], "class_names": [], "class_method_calls": ["stat.st_mtime", "sys.path", "os.path", "data.splitlines", "fp.readlines", "functools.partial", "cache.keys", "os.stat", "filename.startswith", "tokenize.open", "filename.endswith", "cache.pop", "stat.st_size", "module_globals.get"]}, "locale.py": {"libraries": ["_bootlocale", "re", "_collections_abc", "functools", "_locale", "sys", "warnings", "encodings", "_locale.*", "os", "encodings.aliases", "builtins.str"], "function_names": ["format", "_test", "_parse_localename", "atoi", "getlocale", "getpreferredencoding", "_init_categories", "_group", "str", "atof", "delocalize", "format_string", "_build_localename", "getdefaultlocale", "setlocale", "normalize", "resetlocale", "_format", "_strcoll", "_grouping_intervals", "_strip_padding", "localeconv", "_replace_encoding", "currency", "_print_locale", "_strxfrm", "_append_modifier"], "function_calls": ["_parse_localename", "sorted", "_test", "atoi", "getlocale", "_init_categories", "globals", "abs", "lookup", "Error", "_group", "repr", "isinstance", "str", "_localeconv", "tuple", "atof", "delocalize", "format_string", "ValueError", "list", "_setlocale", "getdefaultlocale", "_build_localename", "setlocale", "normalize", "resetlocale", "int", "_format", "func", "_grouping_intervals", "hasattr", "_strip_padding", "localeconv", "len", "_replace_encoding", "_print_locale", "TypeError", "_append_modifier", "print"], "class_names": [], "class_method_calls": ["sys.platform", "locale_encoding_alias.items", "formatted.split", "sys.flags", "_bootlocale.getpreferredencoding", "s.replace", "functools.wraps", "locale_alias.get", "_locale._getdefaultlocale", "encodings.aliases", "defmod.lower", "categories.items", "_percent_re.finditer", "norm_encoding.replace", "warnings.warn", "localename.lower", "s.rstrip", "d.update", "localename.split", "code.partition", "k.replace", "string.replace", "encodings.normalize_encoding", "new_val.append", "locale_encoding_alias.setdefault", "_percent_re.match", "norm_encoding.lower", "perc.group", "os.environ", "groups.reverse", "_collections_abc.Mapping", "code.index", "code.replace", "re.compile", "thousands_sep.join", "groups.append", "windows_locale.get", "encoding.replace", "__all__.append", "decimal_point.join", "code.split", "match.group", "_percent_re.sub"]}, "handlers.py": {"libraries": ["time", "util.FileWrapper", "headers.Headers", "traceback.print_exception", "util.guess_scheme", "sys", "warnings.warn", "util.is_hop_by_hop", "os"], "function_names": ["add_cgi_vars", "setup_environ", "_convert_string_type", "get_stderr", "start_response", "error_output", "get_scheme", "format_date_time", "sendfile", "cleanup_headers", "log_exception", "__init__", "set_content_length", "finish_content", "_needs_transcode", "handle_error", "close", "_flush", "run", "finish_response", "send_preamble", "get_stdin", "write", "send_headers", "read_environ", "_write", "result_is_file", "client_is_modern"], "function_calls": ["read_environ", "application", "len", "isinstance", "_needs_transcode", "print_exception", "str", "format_date_time", "warn", "start_response", "type", "bytes", "repr", "hasattr", "is_hop_by_hop", "_is_request", "AssertionError", "guess_scheme"], "class_names": ["SimpleHandler", "BaseCGIHandler", "CGIHandler", "IISCGIHandler", "BaseHandler"], "class_method_calls": ["stderr.flush", "self.set_content_length", "self.finish_content", "self.result", "sys.platform", "self.send_preamble", "self.result_is_file", "self.error_body", "self.wsgi_version", "self.stdin", "self.finish_response", "sys.stdout", "self.get_stdin", "self.close", "self.origin_server", "k.startswith", "self.error_status", "self.sendfile", "self.add_cgi_vars", "self.wsgi_run_once", "self.cleanup_headers", "self.server_software", "self.headers_class", "self.bytes_sent", "environ.get", "env.setdefault", "software.startswith", "self.headers_sent", "self.stdout", "self.stderr", "self._flush", "self.get_stderr", "self.write", "self.log_exception", "self.environ", "self.wsgi_multithread", "self.traceback_limit", "sys.exc_info", "self.setup_environ", "self.headers", "self.start_response", "self.client_is_modern", "self.get_scheme", "self.http_version", "self._write", "self.wsgi_multiprocess", "self.os_environ", "self.handle_error", "time.gmtime", "sys.stdin", "os.environ", "self.wsgi_file_wrapper", "self.base_env", "self.error_output", "time.time", "self.status", "BaseCGIHandler.__init__", "sys.stderr", "self.send_headers", "sys.getfilesystemencoding", "self._convert_string_type", "v.encode", "self.error_headers"]}, "lzma.py": {"libraries": ["io", "_lzma.*", "_compression", "_lzma._decode_filter_properties", "os", "_lzma._encode_filter_properties", "builtins"], "function_names": ["write", "close", "readable", "writable", "seek", "read1", "decompress", "compress", "__init__", "peek", "closed", "readline", "open", "seekable", "tell", "read", "fileno"], "function_calls": ["ValueError", "isinstance", "len", "TypeError", "LZMAFile", "LZMACompressor", "hasattr", "LZMAError", "LZMADecompressor"], "class_names": ["LZMAFile"], "class_method_calls": ["self._buffer", "results.append", "comp.flush", "self._check_not_closed", "self._fp", "self._pos", "self._check_can_seek", "decomp.eof", "self._check_can_read", "io.DEFAULT_BUFFER_SIZE", "_compression.BaseStream", "self._mode", "mode.replace", "decomp.decompress", "decomp.unused_data", "builtins.open", "self.readable", "comp.compress", "io.TextIOWrapper", "io.BufferedReader", "self._closefp", "os.PathLike", "io.SEEK_SET", "self._check_can_write", "_compression.DecompressReader", "self._compressor"]}, "mailbox.py": {"libraries": ["io", "time", "copy", "contextlib", "email.generator", "warnings", "email.message", "email", "fcntl", "socket", "os", "errno", "calendar"], "function_names": ["set_from", "_generate_toc", "remove_folder", "_explain_to", "get_visible", "_sync_close", "get_from", "_lock_file", "_refresh", "get_file", "update", "add_label", "__init__", "readlines", "iteritems", "get_flags", "set_subdir", "__iter__", "items", "seekable", "lock", "__setitem__", "_append_message", "remove", "_create_temporary", "__delitem__", "writable", "_dump_sequences", "__exit__", "iterkeys", "get_message", "get_subdir", "get_sequences", "unlock", "seek", "set_info", "itervalues", "tell", "closed", "_unlock_file", "list_folders", "pop", "_pre_message_hook", "pack", "_create_tmp", "_string_to_bytes", "__getitem__", "__contains__", "add_folder", "_read", "get_labels", "keys", "clear", "discard", "popitem", "close", "set_flags", "_post_message_hook", "_pre_mailbox_hook", "_sync_flush", "get_bytes", "remove_sequence", "readline", "set_date", "_install_message", "readable", "add_flag", "read1", "update_visible", "_dump_message", "values", "set_sequences", "remove_flag", "clean", "__enter__", "get_string", "remove_label", "get", "set_labels", "flush", "__len__", "_become_message", "next", "_create_carefully", "get_info", "_lookup", "read", "get_date", "add", "get_folder", "set_visible", "add_sequence"], "function_calls": ["min", "read_method", "frozenset", "sorted", "getattr", "_PartialFile", "NoSuchMailboxError", "_sync_close", "KeyError", "isinstance", "Maildir", "MH", "_lock_file", "iter", "str", "dict", "open", "range", "ValueError", "list", "MHMessage", "set", "FormatError", "int", "next", "zip", "type", "_ProxyFile", "_unlock_file", "enumerate", "float", "_create_carefully", "MaildirMessage", "hasattr", "_sync_flush", "len", "max", "NotEmptyError", "NotImplementedError", "Message", "_create_temporary", "ExternalClashError", "TypeError", "BabylMessage"], "class_names": ["_PartialFile", "Error", "NoSuchMailboxError", "_mboxMMDF", "mboxMessage", "MMDF", "Maildir", "MH", "_mboxMMDFMessage", "_singlefileMailbox", "MMDFMessage", "MHMessage", "FormatError", "_ProxyFile", "mbox", "MaildirMessage", "Babyl", "NotEmptyError", "Message", "ExternalClashError", "Mailbox", "BabylMessage"], "class_method_calls": ["self.colon", "os.mkdir", "new_file.close", "self.__dict__", "pre_lock.name", "visible_headers.write", "self._message_factory", "_mboxMMDF.__init__", "os.getpid", "self._from", "self.__getitem__", "e.errno", "message.get_sequences", "self.close", "new_file.tell", "self._next_key", "self._create_tmp", "new_file.write", "self._pre_message_hook", "message.seek", "message.buffer", "self._post_message_hook", "self._append_message", "fcntl.LOCK_NB", "self.get_message", "os.close", "os.open", "self.flush", "socket.gethostname", "tmp_file.close", "entry.isdigit", "self.add", "Maildir._count", "self.discard", "time.gmtime", "errno.EEXIST", "pre_lock.close", "orig_generator.flatten", "os.linesep", "line.replace", "self._file", "self.remove", "message.get_subdir", "os.O_RDWR", "os.O_WRONLY", "Message.__init__", "labels.append", "self.get_visible", "contents.split", "_ProxyFile._read", "message.endswith", "email.message_from_file", "spec.split", "self._date", "new_file.name", "sequences.items", "self.pop", "starts.append", "self._toc_mtimes", "self._locked", "errno.ENOENT", "fcntl.LOCK_EX", "self._skewfactor", "result.append", "self.set_from", "vis_generator.flatten", "original_headers.write", "self._mangle_from_", "self._refresh", "f.name", "self.keys", "msg.set_labels", "buffer.replace", "msg.set_date", "message.readline", "self._subdir", "self._dump_message", "email.generator", "unixfrom.startswith", "self._toc", "self.get_date", "warnings.warn", "io.StringIO", "flags.remove", "fcntl.LOCK_UN", "self._file_length", "original_headers.getvalue", "key_list.append", "os.rmdir", "entry.split", "self._paths", "self._sequences", "arg.items", "f.tell", "self.readline", "copy.deepcopy", "self.set_flags", "message.__dict__", "msg.set_visible", "self._generate_toc", "self.iteritems", "self.add_header", "message.add_flag", "self.get_file", "os.path", "os.O_CREAT", "message.get_date", "self._lookup", "os.O_TRUNC", "self._onetime_keys", "msg.set_from", "email.message", "line.startswith", "orig_buffer.readline", "stops.append", "gen.flatten", "self._info", "msg.set_subdir", "self._read", "changes.append", "time.asctime", "message.tell", "email.message_from_binary_file", "label_lists.append", "_singlefileMailbox.__setitem__", "data.replace", "f.write", "from_line.encode", "self.get_labels", "os.utime", "lastline.endswith", "_singlefileMailbox.remove", "_ProxyFile.tell", "keys.update", "buffer.read", "vis_buffer.readline", "contextlib.closing", "dominant_subpath.split", "self.iterkeys", "self.unlock", "message.add_label", "self._dump_sequences", "os.link", "self._pending_sync", "labels.difference_update", "self._append_newline", "orig_buffer.seek", "self._stop", "errno.EROFS", "fcntl.lockf", "self._pending", "self._pre_mailbox_hook", "all_sequences.items", "message.set_visible", "message.find", "line.rstrip", "hostname.replace", "time.time", "io.TextIOWrapper", "self._labels", "os.walk", "self.get_bytes", "email.message_from_bytes", "name.split", "_singlefileMailbox.__init__", "message.set_subdir", "line.endswith", "message.set_flags", "os.listdir", "os.chmod", "body.replace", "f.close", "message.get_from", "self._last_read", "message.set_from", "message.set_date", "self.replace_header", "label.strip", "self._path", "msg.set_info", "errno.EACCES", "buffer.seek", "self._visible", "self._pos", "os.rename", "message.replace", "message.getvalue", "spec.isdigit", "io.BytesIO", "email.message_from_string", "f.flush", "time.strptime", "label.encode", "self._string_to_bytes", "self._start", "Mailbox.__init__", "data.endswith", "key_list.index", "keys.add", "calendar.timegm", "self.get_flags", "os.remove", "_ProxyFile.seek", "message.get_unixfrom", "f.read", "self._special_labels", "message.encode", "errno.EAGAIN", "self.get_sequences", "_ProxyFile.__init__", "self._install_message", "orig_buffer.read", "special_labels.append", "string.replace", "self._become_message", "message.get_visible", "os.O_EXCL", "self.set_sequences", "message.get_info", "self.itervalues", "msg.add_sequence", "os.unlink", "tmp_file.name", "labels.update", "self.get_subdir", "line.split", "self.get_from", "self._factory", "visible_headers.getvalue", "arg.iteritems", "target.write", "os.stat", "_singlefileMailbox.add", "os.fsync", "message.startswith", "f.fileno", "message._explain_to", "message.add_sequence", "self.get", "message.get_labels"]}, "mailcap.py": {"libraries": ["warnings", "sys", "os", "re"], "function_names": ["parsefield", "parseline", "test", "listmailcapfiles", "show", "_readmailcapfile", "getcaps", "lookup", "lineno_sort_key", "findmatch", "findparam", "readmailcapfile", "subst"], "function_calls": ["parsefield", "len", "subst", "test", "parseline", "sorted", "listmailcapfiles", "_readmailcapfile", "show", "getcaps", "lookup", "findmatch", "open", "findparam", "_find_unsafe", "range", "print"], "class_names": ["UnsafeMailcapInput"], "class_method_calls": ["morecaps.items", "re.compile", "pathstr.split", "os.pathsep", "line.strip", "os.system", "MIMEtype.split", "name.lower", "field.find", "warnings.warn", "fp.readline", "sys.argv", "fields.append", "os.environ", "key.split"]}, "mimetypes.py": {"libraries": ["urllib.parse", "getopt", "posixpath", "sys", "os", "winreg"], "function_names": ["_default_mime_types", "_main", "usage", "readfp", "read_mime_types", "guess_type", "enum_types", "__init__", "guess_all_extensions", "add_type", "guess_extension", "read_windows_registry", "init", "read"], "function_calls": ["list", "_default_mime_types", "_main", "usage", "len", "MimeTypes", "guess_type", "enum_types", "guess_extension", "open", "init", "range", "print"], "class_names": ["MimeTypes"], "class_method_calls": ["self.add_type", "db.types_map", "_winreg.HKEY_CLASSES_ROOT", "url.find", "urllib.parse", "self.types_map", "ext.lower", "os.fspath", "db.suffix_map", "_db.add_type", "sys.exit", "_winreg.QueryValueEx", "getopt.getopt", "self.encodings_map", "_types_map_default.items", "posixpath.splitext", "db.read", "self.read", "self.types_map_inv", "db.readfp", "_suffix_map_default.copy", "self.suffix_map", "_db.guess_extension", "getopt.error", "db.encodings_map", "_winreg.OpenKey", "subkeyname.startswith", "_encodings_map_default.copy", "self.readfp", "line.split", "_winreg.REG_SZ", "self.guess_all_extensions", "_db.guess_type", "os.path", "extensions.append", "_common_types_default.items", "exts.append", "_winreg.EnumKey", "fp.readline", "sys.argv", "db.read_windows_registry", "_db.guess_all_extensions", "type.lower"]}, "modulefinder.py": {"libraries": ["importlib.machinery", "io", "importlib._bootstrap_external", "types", "getopt", "dis", "sys", "warnings", "os", "marshal"], "function_names": ["msg", "test", "ensure_fromlist", "load_file", "_add_badmodule", "__repr__", "run_script", "ReplacePackage", "__init__", "_find_module", "msgout", "load_tail", "load_module", "add_module", "determine_parent", "report", "_safe_import_hook", "scan_code", "load_package", "any_missing_maybe", "find_module", "replace_paths_in_code", "find_all_submodules", "scan_opcodes", "import_hook", "msgin", "find_head_package", "import_module", "any_missing", "AddPackagePath"], "function_calls": ["test", "sorted", "ModuleFinder", "memoryview", "scanner", "repr", "RuntimeError", "isinstance", "str", "ImportError", "tuple", "_find_module", "setattr", "range", "list", "Module", "type", "enumerate", "hasattr", "len", "compile", "print"], "class_names": ["Module", "ModuleFinder"], "class_method_calls": ["pkg.globalnames", "self.msgin", "self.find_module", "parent.__name__", "self.badmodules", "spec.loader", "m.__code__", "self.debug", "self.indent", "spec.origin", "pname.split", "pkg.starimports", "modules.keys", "getopt.error", "a.split", "m.__file__", "co.co_filename", "mf.report", "dis._unpack_opargs", "self.scan_code", "m.starimports", "self.__file__", "m.__name__", "self.__path__", "sys.argv", "self.__name__", "importlib.machinery", "m.globalnames", "mm.starimports", "self.any_missing_maybe", "marshal.loads", "co.co_names", "io.open_code", "self.add_module", "self.__code__", "self.determine_parent", "mm.globalnames", "self._add_badmodule", "exclude.append", "pname.count", "self.find_head_package", "fp.read", "self.processed_paths", "packagePathMap.setdefault", "self.excludes", "self._safe_import_hook", "self.scan_opcodes", "os.path", "self.replace_paths_in_code", "self.load_tail", "name.rfind", "missing.sort", "co.replace", "self.msg", "parent.__path__", "mm.__code__", "os.pathsep", "caller.__path__", "mf.import_hook", "fp.close", "dis.opmap", "self.ensure_fromlist", "self.load_module", "caller.__name__", "co.co_code", "mf.run_script", "getopt.getopt", "sys.builtin_module_names", "self.path", "maybe.append", "self.modules", "self.replace_paths", "m.__path__", "os.listdir", "original_filename.startswith", "mf.load_file", "self.import_hook", "self.load_package", "pname.rfind", "maybe.sort", "self.globalnames", "missing.append", "self.msgout", "replacePackageMap.get", "importlib._bootstrap_external", "self.find_all_submodules", "dis.EXTENDED_ARG", "tail.find", "packagePathMap.get", "co.co_consts", "self.starimports", "sys.path", "self.import_module", "name.find"]}, "schema.py": {"libraries": [], "function_names": [], "function_calls": ["Table"], "class_names": [], "class_method_calls": ["RemoveFile.add_field", "TypeLib.add_field", "CheckBox.add_field", "InstallExecuteSequence.add_field", "Feature.add_field", "DuplicateFile.add_field", "TextStyle.add_field", "IsolatedComponent.add_field", "MsiAssemblyName.add_field", "SelfReg.add_field", "ODBCDriver.add_field", "Upgrade.add_field", "BBControl.add_field", "MsiDigitalSignature.add_field", "ODBCAttribute.add_field", "Component.add_field", "ControlEvent.add_field", "LaunchCondition.add_field", "MIME.add_field", "FileSFPCatalog.add_field", "File.add_field", "AppId.add_field", "DrLocator.add_field", "Class.add_field", "Error.add_field", "ComboBox.add_field", "Signature.add_field", "Registry.add_field", "CustomAction.add_field", "MsiAssembly.add_field", "ODBCSourceAttribute.add_field", "Binary.add_field", "Shortcut.add_field", "FeatureComponents.add_field", "Media.add_field", "Dialog.add_field", "RegLocator.add_field", "Font.add_field", "IniFile.add_field", "PublishComponent.add_field", "InstallUISequence.add_field", "UIText.add_field", "Directory.add_field", "ODBCDataSource.add_field", "Complus.add_field", "CCPSearch.add_field", "MoveFile.add_field", "ServiceControl.add_field", "ReserveCost.add_field", "IniLocator.add_field", "ControlCondition.add_field", "RemoveRegistry.add_field", "AdminExecuteSequence.add_field", "CompLocator.add_field", "Condition.add_field", "RadioButton.add_field", "ODBCTranslator.add_field", "MsiPatchHeaders.add_field", "LockPermissions.add_field", "EventMapping.add_field", "SFPCatalog.add_field", "AdminUISequence.add_field", "CreateFolder.add_field", "Billboard.add_field", "MsiDigitalCertificate.add_field", "Patch.add_field", "MsiFileHash.add_field", "PatchPackage.add_field", "ActionText.add_field", "_Validation.add_field", "Verb.add_field", "BindImage.add_field", "AdvtExecuteSequence.add_field", "Icon.add_field", "ServiceInstall.add_field", "AdvtUISequence.add_field", "ListBox.add_field", "ListView.add_field", "Extension.add_field", "ProgId.add_field", "Property.add_field", "Environment.add_field", "AppSearch.add_field", "RemoveIniFile.add_field", "Control.add_field"]}, "sequence.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "connection.py": {"libraries": ["queue.Queue"], "function_names": ["close", "__enter__", "Pipe", "__exit__", "address", "__init__", "accept", "poll", "Client"], "function_calls": ["Connection", "Queue"], "class_names": ["Connection", "Listener"], "class_method_calls": ["self.close", "self._backlog_queue", "_in.get", "self._out", "self.recv_bytes", "self.send", "self.recv", "_out.put", "address.put", "self.send_bytes", "self._in"]}, "context.py": {"libraries": ["synchronize.Semaphore", "spawn.set_executable", "pool.Pool", "popen_spawn_posix.Popen", "popen_spawn_win32.Popen", "sharedctypes.RawArray", "queues.JoinableQueue", "sharedctypes.Value", "threading", "queues.Queue", "synchronize.Condition", "queues.SimpleQueue", "os", "forkserver.set_forkserver_preload", "synchronize.BoundedSemaphore", "sharedctypes.Array", "popen_fork.Popen", "util.get_logger", "popen_forkserver.Popen", "connection.Pipe", "util.log_to_stderr", "managers.SyncManager", "synchronize.Lock", "sharedctypes.RawValue", "synchronize.Event", "synchronize.RLock", "sys", "spawn.freeze_support", "synchronize.Barrier"], "function_names": ["set_executable", "Queue", "allow_connection_pickling", "get_logger", "Value", "set_spawning_popen", "get_all_start_methods", "SimpleQueue", "Lock", "log_to_stderr", "set_forkserver_preload", "Barrier", "Array", "_force_start_method", "_check_available", "RawArray", "Pipe", "get_start_method", "cpu_count", "Event", "assert_spawning", "JoinableQueue", "__init__", "Condition", "RawValue", "get_spawning_popen", "Manager", "freeze_support", "reducer", "RLock", "set_start_method", "BoundedSemaphore", "Pool", "Semaphore", "get_context", "_Popen"], "function_calls": ["set_executable", "ForkContext", "Queue", "getattr", "get_logger", "Value", "SimpleQueue", "Lock", "log_to_stderr", "set_forkserver_preload", "SpawnContext", "Barrier", "Array", "RuntimeError", "RawArray", "super", "Pipe", "Event", "JoinableQueue", "staticmethod", "Condition", "ValueError", "RawValue", "Popen", "get_spawning_popen", "type", "freeze_support", "RLock", "DefaultContext", "BoundedSemaphore", "Pool", "ForkServerContext", "Semaphore", "NotImplementedError", "SyncManager", "globals"], "class_names": ["BufferTooShort", "DefaultContext", "ForkContext", "TimeoutError", "ForkProcess", "ForkServerContext", "Process", "AuthenticationError", "BaseContext", "SpawnProcess", "SpawnContext", "ForkServerProcess", "ProcessError"], "class_method_calls": ["self.get_context", "sys.platform", "_default_context.get_context", "ctx._check_available", "process.current_process", "methods.append", "reduction.HAVE_SEND_HANDLE", "reducer.setter", "self._name", "_default_context._actual_context", "process.parent_process", "self._default_context", "m.start", "os.cpu_count", "_tls.spawning_popen", "process.active_children", "process.BaseProcess", "threading.local", "self._actual_context"]}, "forkserver.py": {"libraries": ["threading", "signal", "struct", "sys", "warnings", "context.reduction", "socket", "os", "selectors", "errno"], "function_names": ["_stop_unlocked", "connect_to_new_process", "sigchld_handler", "write_signed", "_serve_one", "_stop", "get_inherited_fds", "ensure_running", "__init__", "main", "read_signed", "set_forkserver_preload"], "function_calls": ["ValueError", "len", "ForkServer", "__import__", "write_signed", "_serve_one", "EOFError", "all", "type", "TypeError", "AssertionError", "RuntimeError"], "class_names": ["ForkServer"], "class_method_calls": ["self._inherited_fds", "os.pipe", "threading.Lock", "os.write", "process.current_process", "e.errno", "_forkserver.ensure_running", "os.WIFSIGNALED", "self._forkserver_address", "socket.AF_UNIX", "_forkserver.get_inherited_fds", "os.close", "listener.listen", "listener.close", "self._forkserver_alive_fd", "sys.stderr", "struct.Struct", "util._close_stdin", "util._args_from_interpreter_flags", "selector.select", "os.WIFEXITED", "SIGNED_STRUCT.pack", "resource_tracker.getfd", "_forkserver.connect_to_new_process", "client.connect", "os.WTERMSIG", "warnings.warn", "handlers.items", "resource_tracker.ensure_running", "os.fork", "reduction.recvfds", "os.WEXITSTATUS", "spawn._main", "spawn.get_executable", "signal.SIGINT", "self._forkserver_pid", "selectors.DefaultSelector", "listener.accept", "SIGNED_STRUCT.size", "resource_tracker._resource_tracker", "os.read", "_forkserver._forkserver_address", "os.set_blocking", "pid_to_fd.values", "_forkserver._forkserver_alive_fd", "listener.getsockname", "pid_to_fd.pop", "self._preload_modules", "selectors.EVENT_READ", "errno.ECONNABORTED", "signal.signal", "listener.fileno", "unused_fds.extend", "util.spawnv_passfds", "self._lock", "listener.bind", "os.chmod", "selector.register", "signal.SIG_IGN", "os.dup", "os.waitpid", "_forkserver._inherited_fds", "key.fileobj", "util.is_abstract_socket_namespace", "signal.SIGCHLD", "_forkserver.set_forkserver_preload", "data.items", "spawn.import_main_path", "signal.set_wakeup_fd", "connection.arbitrary_address", "reduction.sendfds", "self.ensure_running", "sys.exc_info", "sys.excepthook", "SIGNED_STRUCT.unpack", "os.WNOHANG", "os.unlink", "s.close", "self._stop_unlocked", "selector.close", "os._exit", "spawn.get_preparation_data", "socket.socket"]}, "heap.py": {"libraries": ["mmap", "threading", "context.assert_spawning", "_winapi", "bisect", "sys", "tempfile", "context.reduction", "collections.defaultdict", "os"], "function_names": ["_malloc", "_discard_arena", "_roundup", "_add_free_block", "rebuild_arena", "_new_arena", "reduce_arena", "_remove_allocated_block", "__init__", "create_memoryview", "__getstate__", "_free_pending_blocks", "_absorb", "free", "malloc", "__setstate__", "_choose_dir"], "function_calls": ["ValueError", "len", "Heap", "max", "assert_spawning", "memoryview", "next", "Arena", "OverflowError", "defaultdict", "range", "FileExistsError"], "class_names": ["Arena", "BufferWrapper", "Heap"], "class_method_calls": ["self._dir_candidates", "util.get_temp_dir", "dupfd.detach", "sys.platform", "self._lengths", "self._DISCARD_FREE_SPACE_LARGER_THAN", "self._lastpid", "self._arenas", "bisect.bisect_left", "os.statvfs", "threading.Lock", "reduction.DupFd", "self._len_to_seq", "os.ftruncate", "os.getpid", "self._malloc", "self._free_pending_blocks", "mmap.mmap", "self._add_free_block", "seq.remove", "self._absorb", "self._alignment", "bisect.insort", "st.f_frsize", "self.name", "self.size", "util.Finalize", "self._start_to_block", "self._state", "BufferWrapper._heap", "buf.close", "tempfile._RandomNameSequence", "tempfile.mkstemp", "self._roundup", "a.fd", "self._n_mallocs", "self._new_arena", "self._stop_to_block", "reduction.register", "self._DOUBLE_ARENA_SIZE_UNTIL", "self.__init__", "self.buffer", "seq.pop", "arena.buffer", "os.close", "self.fd", "self._lock", "self._discard_arena", "os.unlink", "self._pending_free_blocks", "self._size", "util.info", "sys.maxsize", "blocks.remove", "self._allocated_blocks", "a.size", "_winapi.GetLastError", "st.f_bavail", "mmap.PAGESIZE", "self._n_frees", "self._rand", "self._choose_dir", "self._remove_allocated_block", "arena.size"]}, "managers.py": {"libraries": ["threading", "time", "signal", "queue", "context.ProcessError", "traceback.format_exc", "sys", "os.getpid", "context.get_spawning_popen", "warnings", "context.reduction", "os", "array", "traceback"], "function_names": ["register_segment", "serve_client", "address", "dispatch", "_callmethod", "acquire", "throw", "fallback_repr", "__getstate__", "__init__", "get_methods", "accept_connection", "__iadd__", "handle_request", "all_methods", "wait_for", "_run_server", "incref", "is_set", "register", "__str__", "get_server", "__iter__", "decref", "__next__", "track_segment", "list_segments", "serve_forever", "reduce_array", "wait", "rebuild_as_list", "fallback_getvalue", "debug_info", "__exit__", "number_of_objects", "notify_all", "Array", "__setattr__", "abort", "fallback_str", "notify", "__imul__", "__del__", "_connect", "SharedMemory", "__delattr__", "dummy", "parties", "connect", "convert_to_error", "_incref", "__deepcopy__", "MakeProxyType", "__repr__", "release_segment", "__reduce__", "clear", "broken", "destroy_segment", "create", "public_methods", "close", "_getvalue", "set", "start", "_decref", "_finalize_manager", "__setstate__", "AutoProxy", "_debug_info", "RebuildProxy", "reset", "__getattr__", "_after_fork", "release", "shutdown", "ShareableList", "join", "__enter__", "_create", "get", "_number_of_objects", "accepter", "temp", "unlink", "send", "n_waiting"], "function_calls": ["convert_to_error", "getattr", "dispatch", "_Client", "MakeProxyType", "ProcessLocalSet", "id", "_SharedMemoryTracker", "callmethod", "repr", "Server", "isinstance", "AttributeError", "function", "str", "format_exc", "tuple", "RemoteError", "all_methods", "proxytype", "AssertionError", "ProxyType", "setattr", "public_methods", "ValueError", "list", "property", "Listener", "dir", "set", "type", "get_spawning_popen", "func", "initializer", "ProcessError", "State", "hasattr", "send", "len", "Token", "recv", "predicate", "fallback_func", "getpid", "callable", "TypeError", "get_context", "exec", "Client"], "class_names": ["Value", "ProcessLocalSet", "_SharedMemoryTracker", "Server", "ListProxy", "ValueProxy", "EventProxy", "RemoteError", "Namespace", "PoolProxy", "State", "BaseManager", "NamespaceProxy", "SharedMemoryServer", "IteratorProxy", "Token", "BarrierProxy", "AcquirerProxy", "SharedMemoryManager", "SyncManager", "BaseProxy", "ConditionProxy"], "class_method_calls": ["c.send", "proxy._isauto", "self.__dict__", "c.recv", "self._process", "BaseProxy._after_fork", "self._tls", "threading.Lock", "self.typeid", "self._serializer", "process.terminate", "process.current_process", "server.id_to_obj", "sys.stdout", "self._ctx", "util.Finalize", "t.start", "temp.__name__", "state.value", "util.ForkAwareLocal", "BasePoolProxy._method_to_typeid_", "create.__text_signature__", "a.tobytes", "token.address", "self.accepter", "self.destroy_segment", "threading.current_thread", "self.serve_client", "self._address", "reduction.register", "threading.BoundedSemaphore", "method_to_typeid.items", "util.info", "self._close", "sys.stderr", "segment.close", "self._getvalue", "self.stop_event", "self.id_to_local_proxy_obj", "connection.answer_challenge", "self.authkey", "self._authkey", "self.listener", "object.__delattr__", "self.shutdown", "result.append", "traceback.print_exc", "accepter.start", "self._Listener", "token.typeid", "Server.create", "self._manager", "self._registry", "self._state", "BaseProxy._mutex", "self.unlink", "BaseProxy._decref", "connection.deliver_challenge", "warnings.warn", "self._typecode", "connection.Listener", "self.registry", "server.address", "self.segment_names", "resource_tracker.ensure_running", "self._callmethod", "cls.__dict__", "self._create", "threading.Barrier", "self._idset", "BaseProxy._address_to_local", "signal.SIGINT", "accepter.daemon", "self.incref", "array.array", "kwds.pop", "SyncManager.register", "self._Server", "self.terminate", "sms.unlink", "self.public", "Server.shutdown", "State.STARTED", "token.id", "segment.unlink", "time.monotonic", "threading.Condition", "util.ForkAwareThreadLock", "BaseManager.__init__", "process.join", "object.__getattribute__", "State.SHUTDOWN", "gettypeid.get", "process.is_alive", "self.id_to_obj", "ProxyType._exposed_", "self._connect", "sl.shm", "queue.Queue", "self._token", "self.create", "self.args", "name.startswith", "self.handle_request", "object.__setattr__", "reader.close", "keys.sort", "signal.signal", "connection.Client", "shared_memory.SharedMemory", "conn.recv", "c.close", "self.wait", "self._id", "self.shared_memory_context", "threading.Semaphore", "self.address", "cls._registry", "self._owned_by_manager", "signal.SIG_IGN", "writer.send", "pool.Pool", "server.id_to_local_proxy_obj", "State.INITIAL", "os.fsdecode", "util.debug", "tls.connection", "reader.recv", "shared_memory.ShareableList", "writer.close", "self.id", "self.mutex", "t.daemon", "threading.Event", "sys.exit", "server.serve_forever", "DictProxy._method_to_typeid_", "temp.sort", "self._Client", "idset.discard", "conn.send", "self._exposed_", "manager._authkey", "threading.RLock", "connection.XmlClient", "util.register_after_fork", "self.shared_memory_context_name", "temp.append", "self._value", "self.__init__", "conn.close", "self.start", "sys.__stderr__", "obj.clear", "self.fallback_mapping", "connection.Pipe", "sms.name", "a.typecode", "self._incref", "cls._Server", "self.id_to_refcount", "connection.XmlListener", "os.name", "self.__class__", "Server.__init__", "threading.Thread", "process.AuthenticationString", "Server.public", "sys.__stdout__"]}, "pool.py": {"libraries": ["threading", "time", "connection.wait", "queue", "collections", "warnings", "dummy.Process", "os", "queue.Empty", "itertools", "traceback"], "function_names": ["_helper_reraises_exception", "_setup_queues", "_handle_results", "imap_unordered", "__exit__", "mapstar", "_get_tasks", "Process", "terminate", "__repr__", "map_async", "__reduce__", "starmapstar", "apply", "apply_async", "_handle_tasks", "join", "__enter__", "_set_length", "_join_exited_workers", "successful", "get", "__init__", "_set", "_repopulate_pool", "_get_sentinels", "_terminate_pool", "_maintain_pool", "__str__", "close", "__del__", "_guarded_task_generation", "worker", "_map_async", "_get_worker_sentinels", "__iter__", "next", "starmap_async", "starmap", "_wait_for_updates", "_check_running", "ready", "rebuild_exc", "__delitem__", "imap", "_repopulate_pool_static", "_help_stuff_finish", "wait", "_handle_workers", "map"], "function_calls": ["getattr", "IMapUnorderedIterator", "_warn", "reversed", "Process", "set_length", "repr", "isinstance", "ApplyResult", "super", "IMapIterator", "iter", "get", "tuple", "put", "AssertionError", "range", "MapResult", "ValueError", "list", "RemoteTraceback", "next", "type", "enumerate", "func", "bool", "initializer", "hasattr", "divmod", "len", "_PoolCache", "MaybeEncodingError", "NotImplementedError", "ExceptionWithTraceback", "callable", "wait", "TypeError", "get_context", "map"], "class_names": ["ApplyResult", "RemoteTraceback", "ThreadPool", "_PoolCache", "Pool", "IMapIterator", "MaybeEncodingError", "IMapUnorderedIterator", "ExceptionWithTraceback", "MapResult"], "class_method_calls": ["self._outqueue", "threading.Lock", "change_notifier.get", "self._repopulate_pool", "cls._get_worker_sentinels", "ctx.Process", "taskqueue.get", "cls.__qualname__", "ApplyResult.__init__", "self._ctx", "self._processes", "util.Finalize", "Pool._handle_tasks", "self.notifier", "w.name", "self._event", "threading.current_thread", "self.apply_async", "self._quick_get", "self._inqueue", "self._taskqueue", "queue.SimpleQueue", "Pool._handle_workers", "result._job", "result._set_length", "result_handler._state", "p.terminate", "change_notifier.put", "p.exitcode", "p.pid", "self._result_handler", "outqueue._reader", "w.start", "itertools.islice", "self._initializer", "self._chunksize", "self._repopulate_pool_static", "self._maxtasksperchild", "outqueue.put", "self._worker_handler", "result_handler.join", "inqueue.put", "self._state", "self._success", "collections.deque", "warnings.warn", "self._terminate", "self._items", "cls.__module__", "task_handler.join", "worker.exitcode", "w.daemon", "worker.sentinel", "inqueue._rlock", "cls._help_stuff_finish", "Pool.__init__", "self._cache", "self.terminate", "cls._wait_for_updates", "self._task_handler", "self._terminate_pool", "self._setup_queues", "self._number_left", "thread._state", "worker_handler._state", "pool._cache", "result_handler.is_alive", "threading.Condition", "self.value", "Pool._repopulate_pool_static", "self._job", "cls._maintain_pool", "worker.join", "inqueue._writer", "itertools.starmap", "self._map_async", "task_handler._state", "Pool._handle_results", "worker_handler.join", "change_notifier.empty", "self.ready", "self._guarded_task_generation", "traceback.format_exception", "exc.__cause__", "self.wait", "pool.append", "p.join", "self._error_callback", "Pool._join_exited_workers", "self.tb", "self._length", "self._get_sentinels", "util.debug", "taskqueue.put", "self._unsorted", "self._quick_put", "self.Process", "threading.Event", "self._change_notifier", "self._callback", "itertools.count", "task_handler.is_alive", "inqueue.get", "queue.Empty", "self._index", "p.is_alive", "Pool._get_tasks", "self._value", "self._check_running", "inqueue._reader", "self._pool", "os.cpu_count", "self._initargs", "e.__traceback__", "time.sleep", "self._cond", "self.__class__", "self._wrap_exception", "threading.Thread", "self.exc"]}, "popen_fork.py": {"libraries": ["os", "signal", "multiprocessing.connection.wait"], "function_names": ["_launch", "close", "duplicate_for_child", "__init__", "kill", "terminate", "wait", "_send_signal", "poll"], "function_calls": ["wait"], "class_names": ["Popen"], "class_method_calls": ["process_obj._bootstrap", "os.pipe", "os.WIFEXITED", "os.waitpid", "self._send_signal", "self.returncode", "os.WTERMSIG", "os.WIFSIGNALED", "util.Finalize", "util._flush_std_streams", "self.sentinel", "self.pid", "os.fork", "os.WEXITSTATUS", "self.poll", "self.finalizer", "os.close", "os.WNOHANG", "self.wait", "util.close_fds", "self._launch", "os._exit", "signal.SIGTERM", "os.kill", "signal.SIGKILL"]}, "popen_forkserver.py": {"libraries": ["io", "context.reduction", "multiprocessing.connection.wait", "os", "context.set_spawning_popen"], "function_names": ["_launch", "detach", "duplicate_for_child", "__init__", "poll"], "function_calls": ["len", "super", "ImportError", "set_spawning_popen", "open", "wait"], "class_names": ["_DupFd", "Popen"], "class_method_calls": ["reduction.dump", "os.dup", "self.returncode", "io.BytesIO", "buf.getbuffer", "f.write", "util.Finalize", "reduction.HAVE_SEND_HANDLE", "process_obj._name", "self.sentinel", "self.pid", "forkserver.get_inherited_fds", "forkserver.connect_to_new_process", "self.finalizer", "popen_fork.Popen", "self.ind", "os.WNOHANG", "util.close_fds", "self._fds", "forkserver.read_signed", "spawn.get_preparation_data"]}, "popen_spawn_posix.py": {"libraries": ["os", "io", "context.reduction", "context.set_spawning_popen"], "function_names": ["__init__", "_launch", "duplicate_for_child", "detach"], "function_calls": ["open", "set_spawning_popen", "super"], "class_names": ["_DupFd", "Popen"], "class_method_calls": ["reduction.dump", "os.pipe", "resource_tracker.getfd", "io.BytesIO", "f.write", "util.Finalize", "process_obj._name", "self.sentinel", "self.pid", "spawn.get_command_line", "self.finalizer", "os.close", "util.spawnv_passfds", "popen_fork.Popen", "spawn.get_executable", "self.fd", "fp.getbuffer", "fds_to_close.append", "util.close_fds", "self._fds", "spawn.get_preparation_data"]}, "popen_spawn_win32.py": {"libraries": ["msvcrt", "signal", "_winapi", "context.get_spawning_popen", "sys", "context.reduction", "os", "context.set_spawning_popen"], "function_names": ["close", "_close_handles", "duplicate_for_child", "__init__", "_path_eq", "wait", "terminate", "poll"], "function_calls": ["max", "getattr", "set_spawning_popen", "int", "get_spawning_popen", "_path_eq", "open"], "class_names": ["Popen"], "class_method_calls": ["_winapi.CreatePipe", "reduction.dump", "_winapi.GetExitCodeProcess", "sys.platform", "sys.executable", "os.getpid", "self.returncode", "self._handle", "reduction.duplicate", "util.Finalize", "_winapi.CloseHandle", "process_obj._name", "self.sentinel", "_winapi.CreateProcess", "_winapi.INFINITE", "self.pid", "spawn.get_command_line", "_winapi.WAIT_OBJECT_0", "_winapi.TerminateProcess", "sys._base_executable", "self.finalizer", "spawn.get_executable", "os.environ", "self.wait", "_winapi.WaitForSingleObject", "os.path", "msvcrt.open_osfhandle", "spawn.get_preparation_data", "signal.SIGTERM"]}, "reduction.py": {"libraries": ["io", "resource_sharer.DupSocket", "abc.ABCMeta", "_winapi", "sys", "pickle", "copyreg", "socket", "os", "functools", "array"], "function_names": ["dumps", "_reduce_method", "_rebuild_socket", "__init__", "DupFd", "_reduce_method_descriptor", "recv_handle", "register", "detach", "dump", "send_handle", "_rebuild_partial", "steal_handle", "f", "duplicate", "_reduce_partial", "sendfds", "_reduce_socket", "recvfds"], "function_calls": ["register", "ValueError", "list", "len", "super", "RuntimeError", "sendfds", "ForkingPickler", "cls", "DupSocket", "DupHandle", "DupFd", "type", "bytes", "AssertionError", "_C", "recvfds", "hasattr"], "class_names": ["DupHandle", "ForkingPickler", "AbstractReducer", "_C"], "class_method_calls": ["cls._extra_reducers", "p.args", "socket.SOL_SOCKET", "sock.recv", "sys.platform", "_winapi.DUPLICATE_SAME_ACCESS", "context.get_spawning_popen", "os.getpid", "socket.SOCK_STREAM", "io.BytesIO", "p.func", "self._handle", "ds.detach", "s.family", "popen_obj.duplicate_for_child", "a.itemsize", "buf.getbuffer", "_winapi.GetCurrentProcess", "resource_sharer.DupFd", "self._access", "_winapi.DUPLICATE_CLOSE_SOURCE", "functools.partial", "socket.SCM_RIGHTS", "m.__func__", "_winapi.CloseHandle", "socket.AF_UNIX", "conn.send", "sock.sendmsg", "socket.fromfd", "sock.recvmsg", "copyreg.dispatch_table", "socket.CMSG_SPACE", "p.keywords", "conn.fileno", "s.proto", "ForkingPickler.register", "a.frombytes", "popen_obj.DupFd", "s.type", "self._copyreg_dispatch_table", "conn.recv", "pickle.loads", "m.__class__", "_winapi.DuplicateHandle", "self._extra_reducers", "pickle.Pickler", "array.array", "list.append", "self.dispatch_table", "self._pid", "m.__name__", "int.__add__", "sock.send", "df.detach", "s.fileno", "m.__objclass__", "m.__self__", "_winapi.PROCESS_DUP_HANDLE", "_winapi.OpenProcess", "socket.socket"]}, "resource_sharer.py": {"libraries": ["threading", "connection.Client", "signal", "sys", "context.reduction", "connection.Listener", "socket", "os"], "function_names": ["register", "send", "stop", "close", "detach", "_afterfork", "__init__", "_start", "get_connection", "_serve"], "function_calls": ["send", "Client", "close", "Listener", "_ResourceSharer", "hasattr"], "class_names": ["DupSocket", "DupFd", "_ResourceSharer"], "class_method_calls": ["os.dup", "c.send", "sys.platform", "threading.Lock", "_resource_sharer.get_connection", "os.getpid", "socket.fromshare", "util.debug", "new_sock.share", "process.current_process", "conn.recv_bytes", "t.daemon", "t.start", "conn.send_bytes", "self._start", "self._key", "_resource_sharer.register", "reduction.recv_handle", "util.sub_warning", "self._thread", "_resource_sharer.stop", "signal.pthread_sigmask", "util.register_after_fork", "sys.exc_info", "sys.excepthook", "self._old_locks", "self._address", "util.is_exiting", "os.close", "_ResourceSharer._afterfork", "self._lock", "conn.recv", "self._serve", "sock.dup", "c.close", "self._id", "self._cache", "signal.SIG_BLOCK", "new_sock.close", "reduction.send_handle", "signal.valid_signals", "threading.Thread", "self._listener"]}, "resource_tracker.py": {"libraries": ["threading", "_posixshmem", "signal", "_multiprocessing", "sys", "warnings", "os"], "function_names": ["register", "_check_alive", "unregister", "_stop", "__init__", "main", "_send", "ensure_running", "getfd"], "function_calls": ["ValueError", "len", "RuntimeError", "set", "open", "ResourceTracker", "hasattr"], "class_names": ["ResourceTracker"], "class_method_calls": ["_posixshmem.shm_unlink", "self._send", "os.pipe", "signal.SIG_UNBLOCK", "line.strip", "os.waitpid", "threading.Lock", "os.write", "_resource_tracker.unregister", "cache.items", "sys.stdout", "self._check_alive", "warnings.warn", "_CLEANUP_FUNCS.keys", "self._fd", "signal.pthread_sigmask", "_CLEANUP_FUNCS.update", "self.ensure_running", "sys.exc_info", "signal.signal", "sys.excepthook", "_resource_tracker.register", "os.close", "spawn.get_executable", "util.spawnv_passfds", "self._lock", "signal.SIGINT", "sys.stdin", "fds_to_pass.append", "_CLEANUP_FUNCS.get", "_resource_tracker.ensure_running", "_multiprocessing.sem_unlink", "signal.SIG_BLOCK", "sys.stderr", "self._pid", "os.name", "util._args_from_interpreter_flags", "f.close", "signal.SIGTERM", "_resource_tracker.getfd", "signal.SIG_IGN"]}, "shared_memory.py": {"libraries": ["mmap", "functools.partial", "_posixshmem", "_winapi", "struct", "secrets", "resource_tracker.unregister", "resource_tracker.register", "os", "errno"], "function_names": ["format", "buf", "_set_packing_format_and_transform", "_format_packing_metainfo", "__repr__", "_make_filename", "_get_packing_format", "__reduce__", "_offset_back_transform_codes", "_get_back_transform", "__init__", "size", "name", "close", "__del__", "__len__", "index", "_extract_recreation_code", "unlink", "__setitem__", "_format_size_metainfo", "_offset_data_start", "count", "_offset_packing_formats", "_format_back_transform_codes", "__getitem__"], "function_calls": ["memoryview", "_make_filename", "isinstance", "IndexError", "tuple", "range", "register", "ValueError", "list", "back_transform", "partial", "SharedMemory", "int", "type", "enumerate", "FileExistsError", "len", "unregister", "sum"], "class_names": ["ShareableList", "SharedMemory"], "class_method_calls": ["_posixshmem.shm_unlink", "self._back_transforms_mapping", "self.shm", "os.ftruncate", "self._set_packing_format_and_transform", "self._format_packing_metainfo", "struct.calcsize", "fmt.decode", "v.rstrip", "_posixshmem.shm_open", "mmap.mmap", "value.encode", "self._alignment", "self.close", "self.name", "self.size", "os.strerror", "self._name", "secrets.token_hex", "struct.pack_into", "self._get_packing_format", "self._mode", "self.unlink", "_winapi.PAGE_READWRITE", "_winapi.CreateFileMapping", "_winapi.CloseHandle", "_winapi.MapViewOfFile", "self._get_back_transform", "self._fd", "v.encode", "self._prepend_leading_slash", "self._mmap", "_winapi.FILE_MAP_READ", "self._offset_back_transform_codes", "self._list_len", "fmt_as_str.encode", "self._extract_recreation_code", "os.close", "os.fstat", "value.rstrip", "os.O_EXCL", "self._format_size_metainfo", "_winapi.INVALID_HANDLE_VALUE", "struct.unpack_from", "self._buf", "self._size", "errno.EEXIST", "_winapi.OpenFileMapping", "self._format_back_transform_codes", "self._types_mapping", "os.O_CREAT", "self._offset_data_start", "os.O_RDWR", "self._offset_packing_formats", "_winapi.GetLastError", "_winapi.ERROR_ALREADY_EXISTS", "stats.st_size", "self._flags", "os.name", "self.__class__", "_winapi.VirtualQuerySize", "self._allocated_bytes", "_winapi.NULL"]}, "sharedctypes.py": {"libraries": ["context.assert_spawning", "ctypes", "weakref", "context.reduction"], "function_names": ["make_property", "get_lock", "__exit__", "Value", "__setslice__", "__repr__", "Array", "__reduce__", "copy", "RawArray", "__enter__", "__init__", "get_obj", "rebuild_ctype", "__getslice__", "reduce_ctype", "__len__", "RawValue", "synchronized", "__setitem__", "_new_value", "__getitem__"], "function_calls": ["make_property", "isinstance", "AttributeError", "Synchronized", "len", "RawArray", "SynchronizedArray", "RawValue", "assert_spawning", "get_context", "scls", "synchronized", "_new_value", "type", "rebuild_ctype", "SynchronizedString", "exec", "hasattr"], "class_names": ["SynchronizedString", "SynchronizedArray", "Synchronized", "SynchronizedBase"], "class_method_calls": ["obj._wrapper", "wrapper.create_memoryview", "ctypes.c_uint", "ctypes.c_double", "ctypes._SimpleCData", "self.acquire", "obj._type_", "ctypes.c_long", "ctypes.c_ubyte", "reduction.ForkingPickler", "ctypes.c_longlong", "ctypes.c_short", "ctypes.c_float", "self.release", "ctypes.sizeof", "type_.from_buffer", "ctypes.c_char", "heap.BufferWrapper", "ctypes.memset", "ctypes.c_ulong", "typecode_to_type.get", "cls.__name__", "self._lock", "ctypes.c_wchar", "ctypes.c_byte", "weakref.WeakKeyDictionary", "ctypes.c_ulonglong", "obj.__init__", "ctypes.c_int", "obj._length_", "self._obj", "cls._fields_", "result.__init__", "ctypes.addressof", "ctypes.c_ushort", "ctx.RLock", "_ForkingPickler.register", "ctypes.pointer", "ctypes.Array"]}, "synchronize.py": {"libraries": ["heap.BufferWrapper", "threading", "time", "_multiprocessing.sem_unlink", "_multiprocessing.SemLock", "_multiprocessing", "sys", "tempfile", "resource_tracker.unregister", "struct", "resource_tracker.register"], "function_names": ["__exit__", "_after_fork", "notify_all", "__repr__", "_count", "_make_methods", "clear", "__enter__", "__getstate__", "_make_name", "__init__", "is_set", "wait_for", "notify", "_state", "get_value", "_cleanup", "set", "__setstate__", "wait"], "function_calls": ["register", "list", "sem_unlink", "unregister", "ImportError", "BufferWrapper", "next", "range", "predicate", "FileExistsError"], "class_names": ["BoundedSemaphore", "Event", "Semaphore", "SemLock", "Lock", "Condition", "RLock", "Barrier"], "class_method_calls": ["self._wrapper", "time.monotonic", "sys.platform", "_state.setter", "self._timeout", "self._array", "_count.setter", "self.notify", "context.get_spawning_popen", "self._count", "struct.calcsize", "self.acquire", "self._sleeping_count", "util.debug", "process.current_process", "SemLock.__init__", "sl.handle", "ctx.Semaphore", "SemLock._cleanup", "util.Finalize", "self._state", "tempfile._RandomNameSequence", "self.release", "sl.name", "obj._semlock", "self.__setstate__", "self._action", "sl.kind", "sl.maxvalue", "ctx.Condition", "self._parties", "util.register_after_fork", "self._flag", "threading.current_thread", "self._wait_semaphore", "threading.Barrier", "self._lock", "self._semlock", "self._woken_count", "self._make_methods", "self.wait", "self._make_name", "ctx.get_start_method", "SemLock._rand", "sys.maxsize", "self._cond", "_multiprocessing.SemLock", "context.assert_spawning", "ctx.Lock", "context._default_context", "self.__class__", "ctx.RLock"]}, "netrc.py": {"libraries": ["pwd", "os", "stat", "shlex"], "function_names": ["__str__", "__init__", "__repr__", "_parse", "authenticators"], "function_calls": ["len", "NetrcParseError", "netrc", "open", "repr", "print"], "class_names": ["NetrcParseError", "netrc"], "class_method_calls": ["os.getuid", "lexer.push_token", "lexer.get_token", "prop.st_mode", "self.lineno", "lexer.commenters", "stat.S_IRWXG", "stat.S_IRWXO", "Exception.__init__", "pwd.getpwuid", "lexer.instream", "self._parse", "lexer.whitespace", "prop.st_uid", "os.fstat", "shlex.shlex", "lexer.lineno", "tt.startswith", "self.filename", "os.path", "os.name", "lexer.wordchars", "self.hosts", "self.macros", "self.msg", "fp.fileno"]}, "nntplib.py": {"libraries": ["re", "datetime", "netrc", "argparse", "ssl", "collections", "warnings", "sys", "email.header.decode_header", "socket", "socket._GLOBAL_DEFAULT_TIMEOUT"], "function_names": ["remove_number", "cut", "getwelcome", "__exit__", "_getresp", "newgroups", "xover", "_unparse_datetime", "_parse_overview", "_longcmd", "capabilities", "description", "head", "quit", "newnews", "_statcmd", "_putline", "login", "article", "_setreadermode", "__enter__", "_putcmd", "__init__", "_getlongresp", "_getline", "slave", "decode_header", "date", "_close", "body", "xgtitle", "group", "_grouplist", "list", "_getdescriptions", "xpath", "post", "_encrypt_on", "last", "starttls", "over", "_getoverviewfmt", "next", "_longcmdstring", "ihave", "help", "stat", "_artcmd", "getcapabilities", "descriptions", "_parse_overview_fmt", "_statparse", "xhdr", "_post", "set_debuglevel", "_parse_datetime", "_shortcmd"], "function_calls": ["remove_number", "cut", "ArticleInfo", "_unparse_datetime", "_parse_overview", "NNTPTemporaryError", "NNTP_SSL", "NNTPError", "repr", "isinstance", "is_connected", "_email_decode_header", "str", "decode_header", "open", "NNTPDataError", "ValueError", "NNTPProtocolError", "_encrypt_on", "NNTP", "int", "enumerate", "NNTPPermanentError", "hasattr", "NNTPReplyError", "len", "max", "_parse_overview_fmt", "GroupInfo", "TypeError", "map", "_parse_datetime", "print"], "class_names": ["NNTPReplyError", "NNTPProtocolError", "NNTPDataError", "NNTP", "NNTPTemporaryError", "NNTP_SSL", "_NNTPBase", "NNTPPermanentError", "NNTPError"], "class_method_calls": ["self._statcmd", "self._caps", "overview.append", "self._getline", "v.decode", "self._getlongresp", "_NNTPBase.__init__", "self.quit", "date.__class__", "resp.split", "parser.add_argument", "self.host", "raw_line.strip", "self.response", "self.nntp_implementation", "line.decode", "file.close", "self.authenticated", "self._close", "_OVERVIEW_FMT_ALTERNATIVES.get", "self.capabilities", "ssl._create_stdlib_context", "sys.audit", "datetime.datetime", "self.debugging", "line_pat.search", "self._getresp", "self._getdescriptions", "fmt.append", "openedFile.close", "warnings.warn", "dt.year", "self._post", "name.lower", "self._putcmd", "self.sock", "s.starttls", "self.port", "resp.decode", "s.group", "self._longcmd", "line.startswith", "self.nntp_version", "parser.parse_args", "datetime.date", "self.readermode_afterauth", "argparse.ArgumentParser", "self.tls_on", "credentials.authenticators", "self._getoverviewfmt", "socket.create_connection", "self.errors", "pat.match", "self.encoding", "s.getcapabilities", "field_name.startswith", "self.getcapabilities", "line.rstrip", "collections.namedtuple", "line.endswith", "self._artcmd", "re.compile", "self._putline", "match.group", "_NNTPBase._close", "s.xover", "self._statparse", "f.splitlines", "args.group", "self.welcome", "self._longcmdstring", "line.encode", "resp.startswith", "line.partition", "e.response", "self._shortcmd", "Exception.__init__", "parts.append", "lines.append", "self._grouplist", "self.login", "s.quit", "context.wrap_socket", "args.nb_articles", "self._setreadermode", "self.file", "self._cachedoverviewfmt", "args.port", "line.split", "netrc.netrc", "args.server", "__all__.append", "file.write", "m.group", "args.ssl"]}, "ntpath.py": {"libraries": ["nt.readlink", "nt._getfinalpathname", "genericpath.*", "nt._isdir", "string", "nt._getvolumepathname", "sys", "nt._getfullpathname", "os", "stat", "genericpath"], "function_names": ["islink", "_abspath_fallback", "commonpath", "basename", "isabs", "_getfinalpathname_nonstrict", "join", "dirname", "expandvars", "splitext", "lexists", "relpath", "_get_bothseps", "split", "ismount", "expanduser", "normpath", "splitdrive", "_readlink_deep", "normcase", "realpath", "abspath"], "function_calls": ["islink", "_abspath_fallback", "min", "getattr", "isabs", "_getfinalpathname_nonstrict", "_getfullpathname", "isinstance", "_getvolumepathname", "join", "dirname", "tuple", "ValueError", "_getfinalpathname", "_nt_readlink", "set", "_get_bothseps", "split", "zip", "enumerate", "normpath", "hasattr", "len", "splitdrive", "max", "normcase", "_readlink_deep", "bytes", "abspath", "map"], "class_names": [], "class_method_calls": ["head.rstrip", "string.digits", "sep.join", "s.replace", "path.index", "sys.getwindowsversion", "os.fsdecode", "p.replace", "path.split", "os.getcwd", "path.startswith", "st.st_mode", "os.fsencode", "os.fspath", "os.lstat", "prefix.endswith", "p_drive.lower", "start_rest.split", "genericpath._splitext", "path.lstrip", "os.getcwdb", "p.split", "result_drive.lower", "path_rest.split", "splitext.__doc__", "path.replace", "os.environ", "genericpath._check_arg_types", "normp.find", "string.ascii_letters", "seen.add", "comps.append", "ex.winerror", "path.rstrip", "stat.S_ISLNK"]}, "nturl2path.py": {"libraries": ["urllib.parse", "string"], "function_names": ["pathname2url", "url2pathname"], "function_calls": ["len", "OSError"], "class_names": [], "class_method_calls": ["urllib.parse", "url.split", "path.endswith", "url.replace", "url.endswith", "string.ascii_letters", "p.split"]}, "numbers.py": {"libraries": ["abc.ABCMeta", "abc.abstractmethod"], "function_names": ["__le__", "denominator", "__truediv__", "__sub__", "__rtruediv__", "__pos__", "__eq__", "__index__", "__rmod__", "__rrshift__", "__rfloordiv__", "__pow__", "__ror__", "__lshift__", "__floordiv__", "__complex__", "__int__", "__lt__", "__rdivmod__", "__neg__", "__floor__", "conjugate", "__radd__", "imag", "__divmod__", "__ceil__", "__add__", "__bool__", "__rpow__", "__mod__", "__and__", "__rmul__", "__trunc__", "numerator", "__mul__", "__round__", "__or__", "__invert__", "__abs__", "__rand__", "__rxor__", "__xor__", "__float__", "__rlshift__", "real", "__rshift__", "__rsub__"], "function_calls": ["float", "int", "complex"], "class_names": ["Real", "Integral", "Complex", "Rational", "Number"], "class_method_calls": ["Complex.register", "self.numerator", "Integral.register", "Real.register", "self.denominator"]}, "opcode.py": {"libraries": ["_opcode.stack_effect"], "function_names": ["name_op", "def_op", "jabs_op", "jrel_op"], "function_calls": ["jabs_op", "jrel_op", "name_op", "def_op", "range"], "class_names": [], "class_method_calls": ["hasjabs.append", "haslocal.append", "hasconst.append", "hasname.append", "hasjrel.append", "__all__.append", "hascompare.append", "hasfree.append"]}, "operator.py": {"libraries": ["functools.partial", "_operator.__doc__", "_operator.*", "builtins.abs"], "function_names": ["contains", "floordiv", "isub", "abs", "delitem", "sub", "le", "__repr__", "getitem", "countOf", "ior", "__reduce__", "ne", "iconcat", "lt", "ge", "mul", "or_", "__call__", "__init__", "truth", "truediv", "concat", "ixor", "itruediv", "and_", "irshift", "eq", "imod", "index", "length_hint", "indexOf", "not_", "gt", "lshift", "ilshift", "xor", "is_", "ipow", "is_not", "setitem", "func", "matmul", "iadd", "ifloordiv", "rshift", "inv", "add", "pow", "imul", "neg", "mod", "pos", "iand", "imatmul"], "function_calls": ["ValueError", "TypeError", "isinstance", "len", "getter", "partial", "getattr", "tuple", "type", "repr", "enumerate", "_abs", "map", "hint", "hasattr"], "class_names": ["attrgetter", "methodcaller", "itemgetter"], "class_method_calls": ["attr.split", "self._args", "a.__index__", "self._kwargs", "self._name", "self._call", "self._attrs", "self.__class__", "args.extend", "self._items"]}, "optparse.py": {"libraries": ["textwrap", "sys", "gettext.gettext", "gettext.ngettext", "os"], "function_names": ["_check_action", "read_file", "set_title", "dedent", "set_usage", "_check_choice", "_match_abbrev", "_set_attrs", "_update", "__init__", "_check_conflict", "set_short_opt_delimiter", "__str__", "take_action", "set_parser", "get_opt_string", "_add_version_option", "format_epilog", "format_help", "format_option_help", "add_option_group", "_parse_int", "_parse_num", "error", "get_usage", "check_choice", "_create_option_mappings", "parse_args", "check_values", "has_option", "exit", "get_version", "disable_interspersed_args", "set_default", "_check_dest", "ngettext", "ensure_value", "_set_opt_strings", "expand_default", "get_description", "takes_value", "_get_args", "process", "get_default_values", "set_process_default_values", "add_option", "get_option", "format_heading", "_create_option_list", "_check_opt_strings", "format_option_strings", "destroy", "check_value", "format_description", "set_defaults", "_match_long_opt", "print_version", "expand_prog_name", "_check_callback", "gettext", "_get_all_options", "_check_type", "_init_parsing_state", "_update_loose", "_process_args", "print_usage", "_update_careful", "add_options", "_populate_option_list", "indent", "_add_help_option", "read_module", "_check_const", "check_builtin", "remove_option", "enable_interspersed_args", "__eq__", "store_option_strings", "format_option", "_format_text", "set_conflict_handler", "convert_value", "get_option_group", "get_prog_name", "_process_long_opt", "_check_nargs", "format_usage", "print_help", "set_description", "_repr", "_process_short_opts", "_share_option_mappings", "set_long_opt_delimiter"], "function_calls": ["min", "sorted", "getattr", "OptionValueError", "id", "vars", "OptionConflictError", "ngettext", "OptionGroup", "isinstance", "__import__", "_match_abbrev", "IndentedHelpFormatter", "str", "tuple", "open", "AmbiguousOptionError", "setattr", "ValueError", "_", "BadOptionError", "dir", "int", "type", "Values", "hasattr", "len", "checker", "max", "_parse_num", "NotImplementedError", "OptionError", "callable", "cvt", "TypeError", "map", "exec", "print"], "class_names": ["OptionGroup", "OptionParser", "Option", "BadOptionError", "IndentedHelpFormatter", "OptionValueError", "OptionContainer", "OptionError", "HelpFormatter", "TitledHelpFormatter", "Values", "AmbiguousOptionError", "OptParseError", "OptionConflictError"], "class_method_calls": ["c_option._long_opts", "self.__dict__", "parser.exit", "s.replace", "self.format_option_help", "self.help_width", "self.indent", "formatter.format_description", "sys.stdout", "self.choices", "self.level", "self.TYPE_CHECKER", "self.width", "option.process", "self.parser", "group.format_help", "self._check_opt_strings", "self.values", "opt.startswith", "self.callback", "self.option_groups", "self.format_epilog", "textwrap.wrap", "self.add_option", "self.prog", "parser.option_groups", "self._process_args", "self.standard_option_list", "self.nargs", "sys.stderr", "self.callback_args", "sys.argv", "self.process_default_values", "self.print_usage", "usage.lower", "self.format_description", "self._check_conflict", "self._long_opt_fmt", "self.get_prog_name", "self.version", "self.description", "word.startswith", "self.ATTRS", "result.append", "options.extend", "self.largs", "parser.option_list", "self._populate_option_list", "self._process_short_opts", "self.type", "self.conflict_handler", "self.NO_DEFAULT_VALUE", "self._long_opts", "option.takes_value", "option.container", "rargs.pop", "self.get_version", "formatter.dedent", "self.CHECK_METHODS", "self._create_option_mappings", "formatter.format_heading", "self.error", "OptionContainer.__init__", "self.take_action", "HelpFormatter.__init__", "c_option.container", "defaults.get", "self.defaults", "self.dedent", "self._create_option_list", "self.CONST_ACTIONS", "option.type", "self._get_all_options", "self.option_class", "conflict_opts.append", "parser._long_opt", "self.add_options", "self.get_usage", "self.help_position", "self._set_attrs", "self.callback_kwargs", "option.metavar", "option.check_value", "self._short_opt_fmt", "self.STORE_ACTIONS", "self._match_long_opt", "self.max_help_position", "os.path", "option._short_opts", "self.TYPED_ACTIONS", "self.set_usage", "self.format_option_strings", "formatter.store_option_strings", "self._format_text", "self.set_description", "self.format_help", "self._update", "self.msg", "self._short_opts", "self.action", "self.get_description", "option.nargs", "textwrap.fill", "self._process_long_opt", "group.option_list", "self.allow_interspersed_args", "self._add_help_option", "self.default_tag", "option.choices", "wordmap.keys", "OptionContainer.format_help", "self.title", "self.dest", "self.ACTIONS", "parser.print_version", "self.expand_prog_name", "self.convert_value", "self.check_values", "self.option_list", "defaults.items", "self.get_default_values", "self._update_loose", "self.const", "result.extend", "self._share_option_mappings", "parser.defaults", "self.opt_str", "self._add_version_option", "os.environ", "self.short_first", "self.ALWAYS_TYPED_ACTIONS", "formatter.indent", "option.get_opt_string", "option._long_opts", "formatter.format_epilog", "parser.option_class", "OptionContainer.format_option_help", "arg.split", "group.parser", "self.epilog", "self._get_args", "option.dest", "self.formatter", "rargs.insert", "parser._short_opt", "c_option._short_opts", "self.current_indent", "self._set_opt_strings", "attrs.keys", "parser.conflict_handler", "sys.modules", "option.help", "self.TYPES", "sys.exit", "possibilities.sort", "self._short_opt", "other.__dict__", "OptionContainer.destroy", "self.expand_default", "formatter.format_option", "BadOptionError.__init__", "self.indent_increment", "largs.append", "values.ensure_value", "self.possibilities", "parser.print_help", "self.format_heading", "option.default", "group.destroy", "self._init_parsing_state", "file.write", "self.check_value", "self.option_id", "self._update_careful", "self.exit", "self.usage", "self.__class__", "self.set_conflict_handler", "self.option_strings", "self.rargs", "self._long_opt"]}, "os.py": {"libraries": ["abc", "posix.*", "posixpath", "os.path.pathsep", "os.path.defpath", "warnings", "subprocess", "nt", "io", "nt._have_functions", "os.path.altsep", "posix._exit", "os.path.sep", "os.path.extsep", "os.path.pardir", "ntpath", "os.path.devnull", "_collections_abc.MutableMapping", "posix", "nt.*", "posix._have_functions", "os.path.curdir", "stat", "_collections_abc._check_methods", "sys", "nt._exit"], "function_names": ["spawnvp", "spawnlp", "__getattr__", "_add", "spawnlpe", "spawnvpe", "__exit__", "execlp", "renames", "fsencode", "check_str", "spawnl", "__repr__", "decode", "popen", "encodekey", "copy", "fdopen", "_check_bytes", "__enter__", "execvp", "__init__", "spawnle", "_fscodec", "walk", "_get_exports_list", "get_exec_path", "close", "__len__", "execvpe", "getenv", "__iter__", "spawnv", "_spawnvef", "execl", "makedirs", "__getitem__", "_exists", "getenvb", "__subclasshook__", "add_dll_directory", "__setitem__", "_fspath", "_createenviron", "encode", "_execvpe", "spawnve", "fwalk", "_fwalk", "removedirs", "__delitem__", "setdefault", "__fspath__", "fsdecode", "execlpe", "execle"], "function_calls": ["spawnvp", "islink", "mkdir", "_add", "spawnvpe", "getattr", "rename", "fork", "fsencode", "exec_func", "encodekey", "WTERMSIG", "onerror", "KeyError", "isinstance", "_wrap_close", "join", "execvp", "iter", "execve", "ImportError", "waitpid", "_putenv", "dict", "open", "_fscodec", "walk", "_exit", "_AddedDllDirectory", "_check_methods", "rmdir", "ValueError", "list", "_get_exports_list", "get_exec_path", "close", "WEXITSTATUS", "execv", "execvpe", "spawnv", "set", "fsdecode", "WIFSTOPPED", "dir", "WIFEXITED", "type", "makedirs", "zip", "next", "_exists", "func", "stat", "OSError", "WIFSIGNALED", "_createenviron", "hasattr", "encode", "_execvpe", "len", "_Environ", "spawnve", "_fwalk", "removedirs", "scandir", "fspath", "bytes", "TypeError", "map", "_spawnvef", "globals"], "class_names": ["_wrap_close", "PathLike", "_AddedDllDirectory", "_Environ"], "class_method_calls": ["self._proc", "self.unsetenv", "walk_dirs.append", "environ._data", "module.__all__", "sys.modules", "self._stream", "filename.decode", "value.encode", "value.decode", "path.split", "self.close", "environb.get", "io.open", "_set.add", "environ.get", "entry.stat", "sys.builtin_module_names", "subprocess.Popen", "dirs.append", "orig_st.st_mode", "__all__.extend", "warnings.catch_warnings", "nt._remove_dll_directory", "nt._add_dll_directory", "path_type.__fspath__", "filename.encode", "entry.is_dir", "path.join", "warnings.simplefilter", "self.encodevalue", "entry.name", "environ.items", "proc.stdin", "nondirs.append", "entries.append", "self._cookie", "subprocess.PIPE", "st.S_ISDIR", "entry.path", "self.path", "path.exists", "path.isdir", "self._remove_dll_directory", "entry.is_symlink", "path.dirname", "path.samestat", "io.TextIOWrapper", "fspath.__name__", "abc.abstractmethod", "self.putenv", "sys.getfilesystemencodeerrors", "self.encodekey", "proc.stdout", "self._data", "path_type.__name__", "env.get", "sys.getfilesystemencoding", "self.decodekey", "path.islink", "__all__.append", "abc.ABC", "self.decodevalue", "path_list.split"]}, "pathlib.py": {"libraries": ["pwd", "errno.ENOENT", "stat.S_ISDIR", "posixpath", "urllib.parse.quote_from_bytes", "nt", "io", "stat.S_ISREG", "errno.EINVAL", "stat.S_ISCHR", "errno.ELOOP", "os", "functools", "re", "grp", "errno.ENOTDIR", "ntpath", "errno.EBADF", "fnmatch", "stat.S_ISSOCK", "stat.S_ISBLK", "_collections_abc.Sequence", "nt._getfinalpathname", "operator.attrgetter", "stat.S_ISFIFO", "sys", "stat.S_ISLNK"], "function_names": ["write_bytes", "absolute", "_resolve", "home", "match", "resolve", "_cparts", "_is_wildcard_pattern", "parent", "is_dir", "__init__", "select_from", "is_block_device", "casefold_parts", "open", "__str__", "parts", "__gt__", "as_uri", "anchor", "cwd", "is_reserved", "write_text", "_from_parsed_parts", "exists", "casefold", "gethomedir", "mkdir", "replace", "lstat", "__exit__", "__bytes__", "__rtruediv__", "_make_child", "_format_parsed_parts", "_make_child_relpath", "_make_selector", "rmdir", "samefile", "_split_extended_path", "symlink_to", "is_char_device", "_opener", "relative_to", "read_text", "_ext_to_normal", "__new__", "_parse_args", "suffix", "__getitem__", "readlink", "chmod", "_ignore_error", "__truediv__", "compile_pattern", "rename", "__repr__", "_raise_closed", "with_name", "__reduce__", "owner", "parse_parts", "is_absolute", "group", "suffixes", "_iterate_directories", "iterdir", "_init", "join_parsed_parts", "stat", "glob", "is_mount", "parents", "splitroot", "__fspath__", "is_symlink", "rglob", "__le__", "joinpath", "__eq__", "__ge__", "link_to", "is_fifo", "make_uri", "__enter__", "_raw_open", "is_file", "__lt__", "name", "_from_parts", "symlink", "with_suffix", "__len__", "touch", "_select_from", "lchmod", "as_posix", "stem", "expanduser", "unlink", "read_bytes", "is_socket", "__hash__"], "function_calls": ["_ignore_error", "getattr", "_resolve", "S_ISFIFO", "cls", "reversed", "memoryview", "S_ISDIR", "successor_select", "RuntimeError", "_NormalAccessor", "isinstance", "_is_wildcard_pattern", "is_dir", "attrgetter", "iter", "str", "S_ISLNK", "IndexError", "tuple", "Path", "S_ISBLK", "hash", "urlquote_from_bytes", "range", "_make_selector", "ValueError", "list", "_getfinalpathname", "_WindowsFlavour", "property", "S_ISSOCK", "set", "_PosixFlavour", "type", "zip", "S_ISCHR", "bool", "hasattr", "len", "_TerminatingSelector", "_PathParents", "NotImplementedError", "cf", "scandir", "bytes", "TypeError", "S_ISREG"], "class_names": ["_NormalAccessor", "_Accessor", "_Selector", "PosixPath", "_TerminatingSelector", "_Flavour", "_WindowsFlavour", "_RecursiveWildcardSelector", "_PathParents", "_PosixFlavour", "_WildcardSelector", "Path", "PurePosixPath", "PurePath", "WindowsPath", "PureWindowsPath", "_PreciseSelector"], "class_method_calls": ["os.mkdir", "os.getuid", "self._make_child_relpath", "os.scandir", "flavour.compile_pattern", "self.dironly", "self._parse_args", "fnmatch.fnmatchcase", "e.errno", "self.as_posix", "io.open", "self._make_child", "self._str", "self.altsep", "entry.is_dir", "fnmatch.translate", "self._iterate_directories", "self.mkdir", "os.close", "os.open", "path._root", "self._from_parsed_parts", "grp.getgrgid", "os.O_WRONLY", "self._drv", "part.find", "os.PathLike", "self.exists", "tail_parts.append", "os.readlink", "self.successor", "self.join", "s.startswith", "name.endswith", "parsed.reverse", "self._parts", "cls._flavour", "other._flavour", "os.symlink", "path.is_absolute", "self._closed", "self.child_parts", "os.getcwd", "self._flavour", "self._init", "re.IGNORECASE", "self._split_extended_path", "path_cls.exists", "self.reserved_names", "rel.split", "part.replace", "parent.stat", "os.rmdir", "entry.name", "cls._from_parts", "self._cparts", "self._format_parsed_parts", "self._ext_to_normal", "s.lower", "os.replace", "entry.is_symlink", "parent_path._accessor", "path._accessor", "os.O_CREAT", "os.path", "self._select_from", "self.splitroot", "self.sep", "self.lstat", "self.casefold", "sys.intern", "name.rfind", "self._raise_closed", "path_cls.is_dir", "os.lchmod", "template._accessor", "self.absolute", "accessor.readlink", "self._cached_cparts", "self.open", "f.sep", "obj._init", "os.fsencode", "path.drive", "os.utime", "f.altsep", "os.lstat", "f.write", "os.fspath", "self.is_dir", "path.as_posix", "part.lstrip", "os.link", "rest.startswith", "self.stat", "data.__class__", "a._parts", "functools.lru_cache", "cls.__name__", "self._root", "os.environ", "self._opener", "other._cparts", "self.parent", "name.split", "path._parts", "p.lower", "re.compile", "path.rpartition", "rest.encode", "self._raw_open", "os.listdir", "os.chmod", "parent_path._make_child_relpath", "self.is_absolute", "self.match", "parsed.append", "self.parse_parts", "suffix.startswith", "os.rename", "sys.getwindowsversion", "yielded.clear", "selector.select_from", "_Selector.__init__", "yielded.add", "self.name", "path.endswith", "self.drive_letters", "self._accessor", "f.read", "self._hash", "pwd.getpwuid", "parts.append", "self.suffix", "self._from_parts", "pwd.getpwnam", "os.O_EXCL", "other_path.stat", "self._pathcls", "os.unlink", "object.__new__", "rest.split", "name.lstrip", "os.name", "self.__class__", "os.stat", "path._drv", "self._pparts"]}, "pdb.py": {"libraries": ["cmd", "shlex", "code", "traceback", "pprint", "io", "getopt", "signal", "os", "re", "runpy", "inspect", "tokenize", "__main__", "pdb", "glob", "bdb", "dis", "sys", "readline", "pydoc", "linecache"], "function_names": ["help_pdb", "do_condition", "lineinfo", "user_exception", "do_continue", "do_clear", "set_trace", "setup", "_cmdloop", "print_stack_trace", "lookupmodule", "do_run", "interaction", "execRcLines", "__init__", "do_break", "runeval", "_getval_except", "user_call", "do_commands", "do_args", "lasti2lineno", "error", "main", "onecmd", "do_pp", "_complete_bpnumber", "do_down", "_complete_expression", "_runscript", "help_exec", "default", "precmd", "do_tbreak", "user_line", "_select_frame", "complete_unalias", "bp_commands", "preloop", "forget", "do_debug", "do_p", "do_unalias", "help", "do_longlist", "do_ignore", "do_enable", "getsourcelines", "test", "user_return", "displayhook", "print_stack_entry", "__repr__", "do_jump", "do_step", "find_function", "do_display", "_getval", "runctx", "_complete_location", "_print_lines", "runcall", "do_list", "handle_command_def", "complete_undisplay", "do_help", "reset", "do_until", "do_whatis", "_runmodule", "checkline", "do_next", "do_disable", "do_quit", "do_where", "post_mortem", "do_retval", "do_alias", "run", "defaultFile", "do_up", "pm", "message", "do_source", "do_undisplay", "do_return", "do_interact", "do_EOF", "sigint_handler"], "function_calls": ["min", "sorted", "getattr", "reversed", "input", "topic", "find_function", "repr", "_rstr", "str", "post_mortem", "open", "range", "ValueError", "list", "run", "dir", "int", "type", "enumerate", "help", "eval", "hasattr", "len", "compile", "max", "lasti2lineno", "Pdb", "getsourcelines", "exec", "print"], "class_names": ["_rstr", "Restart", "Pdb"], "class_method_calls": ["cmd.Cmd", "line.strip", "Pdb._previous_sigint_handler", "id.split", "first.strip", "obj.f_locals", "self._getval_except", "self.help_exec", "inspect.CO_VARARGS", "sys.stdout", "bp.file", "self._wait_for_mainpyfile", "rcLines.reverse", "frame.f_locals", "self.print_stack_entry", "p.run", "mod_spec.loader", "self.interaction", "self.displaying", "arg.rfind", "identifier.split", "arg.strip", "self.stdout", "pydoc.pager", "co.co_kwonlyargcount", "self.set_step", "self._user_requested_quit", "bp.line", "co.co_varnames", "commands.append", "frame.f_code", "self.sigint_handler", "value.__qualname__", "self.get_file_breaks", "linestarts.reverse", "self._complete_expression", "self.stop_here", "line.replace", "linecache.getlines", "self.currentbp", "self.run", "cre.match", "glob.escape", "os.readlink", "self.breaks", "code.co_name", "sys.argv", "pdb._runmodule", "func.__func__", "sys.audit", "code.co_firstlineno", "runpy._get_module_details", "displaying.items", "last.strip", "traceback.print_exc", "re.escape", "value.__func__", "p.lastcmd", "sys.last_traceback", "self.stdin", "func.__name__", "self.curframe", "self.set_quit", "bdb.Breakpoint", "bp.disable", "self.format_stack_entry", "traceback.format_exception_only", "self.lineno", "self.nosigint", "reply.strip", "self.error", "text.split", "io.open_code", "self.commands_silent", "glob.glob", "self.get_bpbynumber", "frame.f_globals", "pdb.interaction", "self.commands_doprompt", "self.lastcmd", "p.reset", "n.startswith", "fp.read", "self.lineinfo", "signal.SIGINT", "pdb._runscript", "self.cmdqueue", "self.forget", "os.path", "self.set_until", "self._print_lines", "co.co_flags", "self.tb_lineno", "dis.findlinestarts", "sys.settrace", "mod_spec.parent", "sys._getframe", "self.clear_bpbynumber", "tokenize.open", "bp.ignore", "self.set_return", "self.trace_dispatch", "pdb.message", "self.aliases", "__main__.__dict__", "self.handle_command_def", "sys.call_tracing", "self.defaultFile", "self.onecmd", "self.curindex", "sys.flags", "pdb.main", "self._cmdloop", "bp.bpformat", "command.__doc__", "self.clear_break", "self.cmdloop", "self.prompt", "inspect.ismodule", "code.interact", "tb.tb_frame", "self.set_continue", "shlex.split", "self._getval", "getopt.getopt", "sys.displayhook", "self.clear_all_breaks", "inspect.CO_VARKEYWORDS", "co.co_argcount", "bp.enable", "self.completekey", "inspect.findsource", "Pdb.help_exec", "self.commands_defining", "signal.signal", "sys.stdin", "self.displayhook", "self.parseline", "value.__module__", "line.rstrip", "self._select_frame", "self.setup", "re.compile", "self.commands", "value.__class__", "self.get_stack", "arg.split", "self.checkline", "ret.append", "obj.f_globals", "arg.find", "self.print_stack_trace", "ns.keys", "pprint.pformat", "self.stack", "pdb.set_trace", "readline.set_completer_delims", "inspect.getblock", "func.__code__", "inspect.isframe", "self.set_break", "rcLines.pop", "bdb.Bdb", "self.set_next", "self.message", "sys.exit", "self.get_breaks", "bp.number", "self.lookupmodule", "self.do_break", "self.commands_resuming", "a.startswith", "cmdlist.append", "self.bp_commands", "self.canonic", "code.co_filename", "pdb._user_requested_quit", "self.set_trace", "tb.tb_next", "self.commands_bnum", "bp.cond", "sys.exc_info", "self.rcLines", "pdb.rcLines", "self.curframe_locals", "frame.f_lineno", "fn.lower", "self.mainpyfile", "line.split", "p.interaction", "tb.tb_lasti", "sys.path", "linecache.getline", "line.find", "value.__code__", "p.prompt", "self.use_rawinput", "e.startswith", "self.execRcLines", "self.allow_kbdint", "self.default"]}, "pickle.py": {"libraries": ["types.FunctionType", "_pickle.dump", "pprint", "io", "_pickle.Unpickler", "_pickle.dumps", "org.python.core.PyStringMap", "functools.partial", "codecs", "_pickle.loads", "_pickle.PickleError", "re", "_pickle.PicklingError", "_pickle.load", "struct.pack", "struct.unpack", "copyreg._extension_cache", "_pickle.Pickler", "_pickle.PickleBuffer", "doctest", "sys.maxsize", "copyreg._inverted_registry", "argparse", "_pickle.UnpicklingError", "sys", "itertools.islice", "_compat_pickle", "copyreg._extension_registry", "copyreg.dispatch_table"], "function_names": ["load_binunicode8", "_test", "save_global", "load_readonly_buffer", "load_tuple", "load_reduce", "load_next_buffer", "_dumps", "save_pers", "__init__", "put", "load_short_binstring", "save_dict", "load_long1", "load", "load_binunicode", "load_bytearray8", "load_tuple3", "load_newobj", "load_string", "save_tuple", "load_true", "load_stack_global", "save_bytearray", "load_float", "load_binint", "_load", "save_bytes", "load_binpersid", "load_binput", "load_binint2", "load_obj", "persistent_id", "load_long", "_decode_string", "whichmodule", "load_build", "load_additems", "load_empty_tuple", "load_short_binbytes", "write_large_bytes", "load_put", "save_none", "load_short_binunicode", "clear_memo", "save_reduce", "find_class", "load_binint1", "load_tuple2", "_batch_setitems", "load_binbytes8", "save_bool", "load_none", "load_false", "_getattribute", "load_inst", "load_frame", "load_mark", "pop_mark", "memoize", "_instantiate", "load_stop", "load_pop_mark", "load_frozenset", "load_dict", "save_picklebuffer", "start_framing", "save_float", "_loads", "readinto", "load_tuple1", "load_memoize", "load_binget", "encode_long", "load_global", "load_ext1", "load_setitems", "save_long", "save_set", "load_appends", "_dump", "readline", "load_long4", "load_int", "load_ext4", "load_long_binput", "save_frozenset", "end_framing", "load_persid", "load_binbytes", "get", "load_newobj_ex", "load_unicode", "save_str", "_batch_appends", "save", "load_proto", "load_list", "load_empty_set", "load_append", "dump", "load_binfloat", "load_empty_list", "read", "save_type", "write", "decode_long", "save_list", "load_long_binget", "load_pop", "load_binstring", "load_dup", "get_extension", "load_ext2", "load_get", "persistent_load", "load_empty_dictionary", "load_setitem", "commit_frame"], "function_calls": ["extend", "_test", "frozenset", "append", "_Pickler", "getattr", "_Framer", "memoryview", "whichmodule", "id", "_Stop", "PicklingError", "setstate", "repr", "isinstance", "AttributeError", "issubclass", "__import__", "iter", "str", "tuple", "islice", "intern", "_Unpickler", "range", "save", "setattr", "ValueError", "list", "partial", "load", "encode_long", "dir", "set", "klass", "int", "type", "next", "unpack", "func", "float", "bool", "f", "read", "hasattr", "write", "decode_long", "bytearray", "len", "UnpicklingError", "_getattribute", "pack", "add", "callable", "bytes", "_Unframer", "reduce", "TypeError"], "class_names": ["UnpicklingError", "_Pickler", "_Framer", "_Unframer", "_Unpickler", "_Stop", "PickleError", "PicklingError"], "class_method_calls": ["self.memo", "self.save_reduce", "self.memoize", "parser.add_argument", "obj.encode", "list_obj.append", "self.write", "self._buffer_callback", "self.current_frame", "pprint.pprint", "slotstate.items", "self.file_read", "obj.replace", "self.proto", "self.save", "self.save_bytes", "sys.audit", "f.getvalue", "self.file_write", "int.from_bytes", "m.tobytes", "self.fast", "codecs.encode", "self.save_bytearray", "obj.__name__", "_compat_pickle.REVERSE_NAME_MAPPING", "self.framer", "f.tell", "self.readline", "codecs.escape_decode", "_extension_cache.get", "list.append", "sys.maxsize", "state.items", "self.persistent_id", "set_obj.add", "self._batch_appends", "argparse.FileType", "sys.intern", "self.find_class", "re.match", "parser.parse_args", "self._FRAME_SIZE_TARGET", "argparse.ArgumentParser", "self.value", "list_obj.extend", "self.append", "_extension_registry.get", "stack.pop", "value.decode", "inst.__dict__", "__all__.extend", "self.errors", "self.pop_mark", "doctest.testmod", "klass.__name__", "self._decode_string", "_compat_pickle.REVERSE_IMPORT_MAPPING", "_compat_pickle.NAME_MAPPING", "self.encoding", "self._unframer", "m.readonly", "self._write_large_bytes", "obj.raw", "args.test", "name.split", "t.__name__", "self._instantiate", "x.bit_length", "m.contiguous", "_inverted_registry.get", "self.save_pers", "x.to_bytes", "self.dispatch", "obj.__class__", "self._buffers", "file.read", "self.commit_frame", "self._batch_setitems", "self._FRAME_SIZE_MIN", "self.stack", "self._file_readline", "args.pickle_file", "_compat_pickle.IMPORT_MAPPING", "io.BytesIO", "sys.modules", "self.readinto", "self.put", "self.bin", "set_obj.update", "f.getbuffer", "klass.__new__", "self._BATCHSIZE", "self._file_write", "self._file_read", "self.read", "sys.exc_info", "self.fix_imports", "parser.print_help", "args.pop", "file.readline", "name.rpartition", "self.metastack", "self.file_readline", "self.save_global", "self.persistent_load", "stopinst.value", "self.__class__", "cls.__new__", "m.toreadonly", "__all__.append", "obj.items", "file.write", "self.get", "self.get_extension"]}, "pickletools.py": {"libraries": ["re", "io", "doctest", "pickle.decode_long", "struct.unpack", "argparse", "codecs", "sys", "pickle"], "function_names": ["read_uint8", "read_float8", "_test", "read_unicodestring8", "read_uint1", "read_stringnl", "read_bytes4", "__repr__", "read_stringnl_noescape", "read_bytearray8", "read_stringnl_noescape_pair", "read_uint4", "read_decimalnl_short", "read_floatnl", "_genops", "read_unicodestring4", "read_decimalnl_long", "__init__", "read_long1", "genops", "optimize", "read_string1", "read_uint2", "read_int4", "read_unicodestring1", "read_long4", "assure_pickle_consistency", "dis", "read_string4", "read_bytes8", "read_bytes1", "read_unicodestringnl"], "function_calls": ["read_uint8", "StackObject", "_test", "getattr", "read_uint1", "_unpack", "read_stringnl", "read_stringnl_noescape", "read_uint4", "repr", "isinstance", "_genops", "str", "ArgumentDescriptor", "ValueError", "genops", "set", "int", "type", "enumerate", "float", "read_int4", "I", "hasattr", "assure_pickle_consistency", "decode_long", "len", "bytearray", "max", "dis", "getpos", "print"], "class_names": ["ArgumentDescriptor", "StackObject", "_Example", "OpcodeInfo"], "class_method_calls": ["argparse.ArgumentParser", "d.name", "args.preamble", "self.value", "self.reader", "code2op.get", "code2op.copy", "self.code", "data.read", "args.pickle_file", "data.tell", "pickler.write", "io.BytesIO", "self.stack_after", "args.annotate", "stack.pop", "self.arg", "opcode.proto", "args.output", "opcode.code", "sys.stdout", "code.decode", "before.index", "opcode.stack_before", "self.name", "opcode.name", "stack.extend", "data.endswith", "data.startswith", "args.memo", "f.readline", "markstack.pop", "f.name", "data.decode", "d.code", "self.obtype", "parser.add_argument", "markstack.append", "pickler.framer", "f.read", "pickle.bytes_types", "opcodes.append", "pickler.get", "doctest.testmod", "out.write", "out.getvalue", "self.n", "self.stack_before", "opcode.stack_after", "pickle._Pickler", "parser.print_help", "pickle.HIGHEST_PROTOCOL", "oldids.add", "codecs.escape_decode", "picklecode.decode", "args.test", "args.indentlevel", "sys.maxsize", "pickle.__all__", "opcode.doc", "pickler.put", "copy.items", "opcode.arg", "self.proto", "msg.append", "re.match", "argparse.FileType", "parser.parse_args", "self.doc"]}, "pipes.py": {"libraries": ["os", "re", "shlex.quote", "tempfile"], "function_names": ["clone", "prepend", "debug", "copy", "append", "open_w", "open_r", "__init__", "reset", "__repr__", "open", "makepipeline"], "function_calls": ["ValueError", "len", "quote", "type", "Template", "open", "TypeError", "makepipeline", "range", "print"], "class_names": ["Template"], "class_method_calls": ["os.popen", "self.open_r", "list.append", "t.steps", "garbage.append", "self.makepipeline", "os.system", "os.close", "self.open_w", "re.search", "tempfile.mkstemp", "self.steps", "self.debugging", "self.reset", "list.insert", "t.debugging"]}, "pkgutil.py": {"libraries": ["importlib.machinery", "os.path", "importlib.util", "inspect", "importlib", "types.ModuleType", "functools.singledispatch", "sys", "warnings", "zipimport", "zipimport.zipimporter", "os", "marshal", "collections.namedtuple"], "function_names": ["extend_path", "iter_modules", "_get_delegate", "get_filename", "get_importer", "__init__", "find_loader", "load_module", "get_source", "seen", "find_module", "get_data", "walk_packages", "_fix_name", "is_package", "_import_imp", "_get_spec", "_iter_file_finder_modules", "read_code", "_reopen", "get_code", "iter_zipimport_modules", "iter_importers", "get_loader", "iter_importer_modules"], "function_calls": ["iter_modules", "sorted", "getattr", "ImpLoader", "onerror", "get_importer", "isinstance", "__import__", "ImportError", "find_loader", "open", "find_spec", "ValueError", "ImpImporter", "seen", "walk_packages", "ModuleInfo", "namedtuple", "type", "_import_imp", "hasattr", "_get_spec", "len", "compile", "path_hook", "read_code", "iter_importers", "map", "iter_importer_modules"], "class_names": ["ImpImporter", "ImpLoader"], "class_method_calls": ["importlib.machinery", "imp.PY_COMPILED", "file.read", "marshal.load", "imp.load_module", "resource.split", "zipimport._zip_directory_cache", "imp.C_EXTENSION", "self.code", "sys.path_hooks", "spec.loader", "os.fsdecode", "sys.modules", "finder.find_loader", "self.source", "self.etc", "stream.read", "importlib.import_module", "importlib.util", "iter_importer_modules.register", "imp.find_module", "warnings.warn", "warnings.catch_warnings", "fullname.split", "f.read", "fn.startswith", "warnings.simplefilter", "info.name", "sys.meta_path", "imp.PKG_DIRECTORY", "os.sep", "loader.get_data", "self._fix_name", "self.file", "name.rpartition", "importer.iter_modules", "self.path", "finder.find_spec", "importer.prefix", "ModuleInfo.__doc__", "parts.insert", "importer.archive", "importlib._bootstrap", "spec.submodule_search_locations", "filenames.sort", "self.get_source", "line.rstrip", "module.__name__", "self._reopen", "finder.find_module", "self.fullname", "sys.path", "self.filename", "os.path", "imp.PY_SOURCE", "fullname.rpartition", "sys.stderr", "mod.__file__", "importer.path", "msg.format", "fullname.startswith", "info.ispkg", "os.listdir", "path.append", "inspect.getmodulename", "sys.path_importer_cache", "self._get_delegate", "line.startswith"]}, "platform.py": {"libraries": ["java.lang", "re", "_winreg", "collections", "sys", "java.lang.System", "struct", "subprocess", "sys.getwindowsversion", "vms_lib", "socket", "os", "winreg", "plistlib"], "function_names": ["_node", "version", "_follow_symlinks", "win32_ver", "release", "system", "python_compiler", "python_version", "win32_is_iot", "libc_ver", "platform", "mac_ver", "_java_getprop", "processor", "_syscmd_uname", "machine", "_sys_version", "java_ver", "python_implementation", "architecture", "node", "python_revision", "uname", "python_build", "python_branch", "_syscmd_ver", "_norm_version", "system_alias", "win32_edition", "_comparable_version", "_syscmd_file", "_mac_ver_xml", "python_version_tuple", "_platform"], "function_calls": ["_node", "getattr", "_follow_symlinks", "win32_ver", "repr", "platform", "libc_ver", "mac_ver", "_java_getprop", "str", "_syscmd_uname", "tuple", "_sys_version", "dict", "open", "java_ver", "architecture", "ValueError", "uname_result", "uname", "list", "int", "_syscmd_ver", "V", "hasattr", "_norm_version", "len", "max", "system_alias", "win32_edition", "getwindowsversion", "_syscmd_file", "_mac_ver_xml", "filter", "_platform", "map", "print"], "class_names": [], "class_method_calls": ["match.groups", "_sys_version_cache.get", "sys.platform", "l.append", "x.strip", "sys.executable", "output.decode", "sys._git", "struct.calcsize", "os.confstr", "_ver_output.match", "_WIN32_SERVER_RELEASES.get", "vms_lib.getsyi", "platform.replace", "_ironpython_sys_version_parser.match", "sys.exit", "ver.split", "winreg.QueryValueEx", "winver.service_pack_major", "release.split", "m.end", "s.decode", "_platform_cache.get", "f.read", "_ver_stages.get", "sys._mercurial", "os.uname", "_libc_search.search", "re.ASCII", "result.extend", "_sys_version_parser.match", "socket.gethostname", "m.groups", "_ironpython26_sys_version_parser.match", "plistlib.load", "_component_re.split", "os.environ", "subprocess.check_output", "collections.namedtuple", "winreg.HKEY_LOCAL_MACHINE", "os.path", "re.compile", "_WIN32_CLIENT_RELEASES.get", "info.strip", "sys.version", "winreg.OpenKeyEx", "output.strip", "_pypy_sys_version_parser.match", "sys_version.startswith", "System.getProperty", "subprocess.DEVNULL", "sys.argv", "os.readlink", "winver.platform_version", "subprocess.CalledProcessError", "version.split"]}, "plistlib.py": {"libraries": ["re", "enum", "datetime", "contextlib", "binascii", "codecs", "xml.parsers.expat.ParserCreate", "struct", "warnings.warn", "io.BytesIO", "os", "itertools"], "function_names": ["writePlist", "end_string", "readPlistFromBytes", "write_bytes", "begin_dict", "write_dict", "handle_begin_element", "_decode_base64", "end_key", "asBase64", "write_array", "dumps", "writeln", "__eq__", "__repr__", "__index__", "end_true", "__reduce__", "_escape", "begin_array", "writePlistToBytes", "end_integer", "_encode_base64", "end_real", "__init__", "parse", "end_dict", "write_data", "_read_object", "loads", "_get_size", "end_element", "end_false", "handle_entity_decl", "_maybe_open", "handle_data", "_date_to_string", "load", "_is_fmt_binary", "dump", "get_data", "end_array", "_read_ints", "begin_element", "_date_from_string", "readPlist", "_flatten", "add_object", "_read_refs", "_count_to_size", "write", "_write_object", "write_value", "__hash__", "end_data", "_write_size", "_is_fmt_xml", "end_date", "simple_element", "fromBase64", "handle_end_element", "_getrefnum"], "function_calls": ["object", "sorted", "handler", "getattr", "_decode_base64", "Data", "cls", "id", "repr", "isinstance", "_escape", "_encode_base64", "tuple", "hash", "dict", "open", "range", "ValueError", "_maybe_open", "InvalidFileException", "_date_to_string", "load", "dump", "int", "type", "zip", "ParserCreate", "OverflowError", "_date_from_string", "float", "_count_to_size", "BytesIO", "len", "max", "warn", "P", "TypeError", "UID", "globals"], "class_names": ["_PlistParser", "InvalidFileException", "Data", "_DumbXMLWriter", "_PlistWriter", "_BinaryPlistParser", "_BinaryPlistWriter", "UID"], "class_method_calls": ["codecs.BOM_UTF16_BE", "valRefs.append", "d.minute", "d.second", "self.simple_element", "self._indent_level", "self.indent", "lst.append", "self.parser", "codecs.BOM_UTF16_LE", "data.data", "ValueError.__init__", "p.parse", "re.ASCII", "raw.startswith", "self._ref_format", "self.handle_entity_decl", "_dateParser.match", "self._flatten", "other.data", "d.day", "os.SEEK_END", "start.decode", "self._get_size", "self._sort_keys", "f.getvalue", "datetime.datetime", "self.current_key", "self._fp", "int.from_bytes", "Data.fromBase64", "self._objects", "self.get_data", "_DumbXMLWriter.__init__", "self.root", "s.encode", "self._skipkeys", "self.write_array", "self._objidtable", "_controlCharPat.search", "self._object_offsets", "pieces.append", "struct.unpack", "self.writeln", "fp.read", "contextlib.contextmanager", "self.add_object", "binascii.b2a_base64", "d.hour", "codecs.BOM_UTF8", "self._read_ints", "fp.getvalue", "value.items", "keys.append", "struct.error", "fp.seek", "value.to_bytes", "self.handle_begin_element", "values.append", "self.write_data", "enum.Enum", "PlistFormat.__members__", "self.handle_data", "value.encode", "text.replace", "self._objlist", "d.month", "self.write_dict", "itertools.chain", "self._dict_type", "self._use_builtin_types", "self._read_refs", "self._getrefnum", "self.end_element", "header.startswith", "result.extend", "self._ref_size", "self.write_value", "re.compile", "writer.write", "self._write_size", "self.stack", "self._objtable", "d.year", "d.items", "line.encode", "datetime.timedelta", "self.handle_end_element", "self._write_object", "keyRefs.append", "data.decode", "self.data", "binascii.a2b_base64", "self.begin_element", "self.write_bytes", "struct.pack", "_FORMATS.values", "self.file", "self._read_object", "value.data", "self.__class__", "file.write"]}, "poplib.py": {"libraries": ["re", "ssl", "sys", "warnings", "hashlib", "socket", "errno"], "function_names": ["utf8", "getwelcome", "_getresp", "apop", "_longcmd", "quit", "stls", "_putline", "dele", "top", "capa", "user", "_putcmd", "__init__", "_getlongresp", "_create_socket", "_getline", "retr", "list", "close", "_parsecap", "uidl", "rset", "stat", "pass_", "noop", "rpop", "set_debuglevel", "_shortcmd"], "function_calls": ["ValueError", "len", "_parsecap", "getattr", "error_proto", "int", "POP3", "bytes", "repr", "range", "print"], "class_names": ["POP3_SSL", "error_proto", "POP3"], "class_method_calls": ["a.retr", "sys.audit", "self.keyfile", "a.getwelcome", "errno.ENOTCONN", "self._getline", "self._getlongresp", "a.pass_", "self.welcome", "self.close", "socket.create_connection", "self._getresp", "resp.startswith", "hashlib.md5", "a.stat", "self._tls_established", "self.timestamp", "warnings.warn", "exc.errno", "self._shortcmd", "self._debugging", "POP3._create_socket", "self.host", "sock.shutdown", "context.wrap_socket", "self._create_socket", "retval.split", "line.decode", "self.file", "self.encoding", "self._putcmd", "file.close", "socket._GLOBAL_DEFAULT_TIMEOUT", "self.sock", "list.append", "re.compile", "self.port", "a.list", "self.certfile", "self.context", "sock.close", "sys.argv", "self._putline", "__all__.append", "a.user", "self._longcmd", "self.capa", "line.startswith", "socket.SHUT_RDWR", "m.group", "ssl._create_stdlib_context", "POP3.__init__", "a.quit"]}, "posixpath.py": {"libraries": ["pwd", "re", "genericpath.*", "sys", "os", "stat", "genericpath"], "function_names": ["islink", "commonpath", "basename", "isabs", "join", "_joinrealpath", "dirname", "_get_sep", "expandvars", "splitext", "lexists", "relpath", "split", "ismount", "expanduser", "normpath", "splitdrive", "normcase", "realpath", "abspath"], "function_calls": ["islink", "min", "search", "getattr", "isabs", "commonprefix", "isinstance", "_joinrealpath", "join", "str", "tuple", "_get_sep", "ValueError", "set", "split", "enumerate", "normpath", "len", "max", "realpath", "abspath", "map"], "class_names": [], "class_method_calls": ["sys.platform", "head.rstrip", "os.getuid", "sep.join", "s1.st_dev", "s1.st_mode", "new_comps.pop", "_varprogb.search", "os.fsdecode", "name.endswith", "userhome.rstrip", "path.split", "os.getcwd", "path.startswith", "st.st_mode", "os.fsencode", "os.fspath", "os.lstat", "path.endswith", "s2.st_ino", "name.startswith", "genericpath._splitext", "os.getcwdb", "s2.st_dev", "pwd.getpwuid", "pwent.pw_dir", "m.span", "b.startswith", "new_comps.append", "pwd.getpwnam", "rest.partition", "re.ASCII", "_varprog.search", "s1.st_ino", "splitext.__doc__", "os.environ", "genericpath._check_arg_types", "re.compile", "path.find", "os.readlink", "s.startswith", "m.group", "p.rfind", "stat.S_ISLNK"]}, "pprint.py": {"libraries": ["re", "types", "time", "collections", "sys", "io.StringIO"], "function_names": ["_recursion", "format", "_pprint_deque", "_pprint_dict", "_pprint_user_list", "_pprint_set", "_safe_repr", "_pprint_bytearray", "_pprint_default_dict", "_pprint_list", "_pprint_counter", "pprint", "_format_dict_items", "_pprint_user_dict", "_pprint_tuple", "_pprint_bytes", "__lt__", "__init__", "saferepr", "_pprint_user_string", "pp", "isrecursive", "_pprint_ordered_dict", "_pprint_chain_map", "_format", "_safe_tuple", "_format_items", "_pprint_mappingproxy", "_pprint_str", "_repr", "isreadable", "pformat", "_perfcheck", "_wrap_bytes_repr"], "function_calls": ["_safe_key", "_recursion", "frozenset", "sorted", "PrettyPrinter", "append", "getattr", "_safe_repr", "id", "repr", "pprint", "isinstance", "issubclass", "iter", "str", "range", "ValueError", "list", "int", "type", "next", "p", "bool", "enumerate", "write", "len", "_StringIO", "bytes", "_perfcheck", "_wrap_bytes_repr", "print"], "class_names": ["PrettyPrinter", "_safe_key"], "class_method_calls": ["typ.__name__", "re.findall", "sio.getvalue", "object.splitlines", "_types.MappingProxyType", "self._readable", "frozenset.__repr__", "bytearray.__repr__", "self._stream", "self._dispatch", "self._repr", "_collections.UserDict", "object.maxlen", "bytes.__repr__", "self._pprint_bytes", "self._format_items", "object.maps", "self._format", "object.__class__", "_collections.Counter", "_sys.stdout", "context.copy", "self._compact", "set.__repr__", "object.default_factory", "dict.__repr__", "self._sort_dicts", "self.obj", "stream.write", "chunks.append", "_collections.defaultdict", "self._depth", "self.format", "_collections.ChainMap", "_collections.UserString", "self._recursive", "cls.__name__", "parts.pop", "rep.startswith", "time.perf_counter", "list.__repr__", "object.items", "tuple.__repr__", "self._width", "other.obj", "printer.pprint", "components.append", "p.pformat", "_collections.OrderedDict", "_collections.deque", "object.data", "_collections.UserList", "str.__repr__", "self._pprint_dict", "self._format_dict_items", "object.most_common", "object.copy", "self._indent_per_level"]}, "profile.py": {"libraries": ["io", "runpy", "time", "pstats", "__main__", "sys", "warnings", "os", "marshal", "optparse.OptionParser"], "function_names": ["create_stats", "print_stats", "trace_dispatch_c_call", "simulate_cmd_complete", "simulate_call", "snapshot_stats", "__repr__", "trace_dispatch_return", "trace_dispatch_mac", "calibrate", "trace_dispatch", "runctx", "trace_dispatch_exception", "__init__", "trace_dispatch_l", "runcall", "set_cmd", "f1", "run", "dump_stats", "_calibrate_inner", "f", "_show", "trace_dispatch_call", "get_time_timer", "main", "trace_dispatch_i"], "function_calls": ["Profile", "repr", "isinstance", "runctx", "timer", "locals", "open", "range", "OptionParser", "ValueError", "f1", "func", "f", "len", "compile", "_Utils", "sum", "get_time", "main", "print", "TypeError", "exec", "globals"], "class_names": ["fake_frame", "_Utils", "Profile", "fake_code"], "class_method_calls": ["arg.__name__", "prof.dump_stats", "prof.runctx", "self.dispatch", "fcode.co_filename", "marshal.dump", "self.trace_dispatch_return", "parser.allow_interspersed_args", "self.cur", "self.c_func_name", "frame.f_back", "rframe.f_back", "self.co_name", "self.timer", "self.snapshot_stats", "sys.stdout", "self.simulate_call", "runpy.run_module", "sys.exit", "self.stats", "self.f_code", "prof.run", "runcall.__text_signature__", "parser.print_usage", "prof.print_stats", "self.bias", "callers.values", "exc.errno", "warnings.warn", "callers.copy", "p.timings", "fcode.co_name", "self.t", "options.outfile", "io.open_code", "self.runctx", "self.co_firstlineno", "self.fake_frame", "parser.add_option", "kw.pop", "self.dispatcher", "self.fake_code", "options.sort", "self.co_line", "p.runctx", "time.process_time", "frame.f_code", "pstats.Stats", "fp.read", "sys.setprofile", "self.trace_dispatch_i", "self.profiler", "self.f_back", "options.module", "self.simulate_cmd_complete", "self._calibrate_inner", "sys.path", "os.path", "self.cmd", "self.get_time", "self.timings", "self._show", "Profile.fake_frame", "fcode.co_firstlineno", "self.__class__", "sys.argv", "__main__.__dict__", "self.set_cmd", "self.trace_dispatch", "parser.parse_args", "self.create_stats", "self.co_filename", "self.trace_dispatch_l"]}, "pstats.py": {"libraries": ["enum.Enum", "re", "functools.cmp_to_key", "time", "sys", "readline", "os", "marshal", "cmd"], "function_names": ["print_callers", "eval_print_amount", "load_stats", "print_call_heading", "f8", "help_callers", "print_stats", "do_read", "help_read", "do_reverse", "complete_sort", "get_print_list", "print_title", "help_help", "func_std_string", "help_reverse", "compare", "generic_help", "postcmd", "add_callers", "do_quit", "do_sort", "func_strip_path", "do_callees", "__init__", "print_callees", "func_get_function_name", "init", "do_stats", "generic", "help_callees", "do_callers", "help_stats", "help_strip", "add_func_stats", "do_add", "help_EOF", "dump_stats", "count_calls", "calc_callees", "help_sort", "do_strip", "help_quit", "get_sort_arg_defs", "get_top_level_stats", "add", "__new__", "sort_stats", "strip_dirs", "print_call_line", "help_add", "do_EOF", "reverse_order", "print_line"], "function_calls": ["f8", "cmp_to_key", "sorted", "getattr", "reversed", "all", "func_std_string", "isinstance", "add_callers", "func_strip_path", "str", "iter", "tuple", "open", "Stats", "func_get_function_name", "list", "set", "add_func_stats", "int", "type", "next", "zip", "float", "ProfileBrowser", "hasattr", "len", "TupleComp", "TypeError", "print"], "class_names": ["TupleComp", "ProfileBrowser", "SortKey", "Stats"], "class_method_calls": ["self.eval_print_amount", "cmd.Cmd", "marshal.dump", "rex.search", "browser.stream", "self.prim_calls", "obj._all_values", "sys.stdout", "source.items", "browser.cmdloop", "self.add", "self.stream", "str.__new__", "processed.append", "sys.argv", "cls._value2member_map_", "err.args", "name.endswith", "self.total_tt", "self.get_top_level_stats", "re.error", "obj._value_", "item.prim_calls", "callers.items", "self.generic_help", "item.files", "item.total_tt", "stats_list.append", "self.files", "self.comp_select_list", "self.stats", "callers.values", "item.top_level", "self.total_calls", "fcn_list.append", "word.value", "self.print_call_heading", "arg.create_stats", "self.get_sort_arg_defs", "self.all_callees", "err.__class__", "self.top_level", "self.sort_type", "os.path", "new_list.append", "marshal.load", "self.print_call_line", "self.load_stats", "self.print_title", "self.prompt", "item.max_name_len", "self.calc_callees", "self.do_read", "name.startswith", "time.ctime", "self.sort_arg_dict", "file_stats.st_mtime", "oldstats.items", "c.rjust", "item.total_calls", "target.items", "Stats.sort_arg_dict_default", "re.compile", "browser.do_add", "self.fcn_list", "self.init", "call_dict.keys", "item.stats", "new_top.add", "self.generic", "self.sort_arg_dict_default", "self.get_print_list", "a.startswith", "self.print_line", "stats_list.sort", "substats.rjust", "line.split", "arg.stats", "self.max_name_len", "self.__class__", "os.stat"]}, "pty.py": {"libraries": ["select.select", "fcntl.ioctl", "fcntl.I_PUSH", "tty", "sys", "os"], "function_names": ["_writen", "_read", "master_open", "_copy", "fork", "openpty", "_open_terminal", "spawn", "slave_open"], "function_calls": ["select", "_writen", "master_read", "ioctl", "stdin_read", "_copy", "fork", "type", "openpty", "_open_terminal", "OSError", "slave_open"], "class_names": [], "class_method_calls": ["sys.audit", "os.read", "os.waitpid", "fds.remove", "os.write", "tty.setraw", "os.ttyname", "os.dup2", "tty.TCSAFLUSH", "os.openpty", "os.setsid", "tty.error", "os.fork", "os.close", "os.open", "tty.tcgetattr", "os.forkpty", "os.execlp", "tty.tcsetattr", "os.O_RDWR"]}, "py_compile.py": {"libraries": ["importlib.machinery", "importlib._bootstrap_external", "enum", "os.path", "importlib.util", "sys", "os", "traceback"], "function_names": ["__str__", "compile", "__init__", "main", "_get_default_invalidation_mode"], "function_calls": ["compile", "main", "_get_default_invalidation_mode", "PyCompileError", "FileExistsError"], "class_names": ["PycInvalidationMode", "PyCompileError"], "class_method_calls": ["enum.Enum", "importlib.machinery", "os.makedirs", "loader.path_stats", "traceback.format_exception_only", "py_exc.msg", "sys.exit", "tbtext.replace", "importlib.util", "Exception.__init__", "PycInvalidationMode.CHECKED_HASH", "importlib._bootstrap_external", "loader.get_data", "error.msg", "PycInvalidationMode.TIMESTAMP", "filename.rstrip", "self.file", "exc_type.__name__", "self.exc_value", "err.__class__", "sys.stdin", "os.environ", "os.path", "loader.source_to_code", "sys.stderr", "self.exc_type_name", "msg.format", "sys.argv", "self.msg"]}, "pyclbr.py": {"libraries": ["io", "token.DEDENT", "importlib.util", "token.OP", "token.NAME", "tokenize", "sys", "os"], "function_names": ["_nest_function", "_nest_class", "_main", "_addchild", "readmodule", "_addmethod", "__init__", "_readmodule", "_getnamelist", "_getname", "readmodule_ex", "_create_tree"], "function_calls": ["sorted", "getattr", "_getnamelist", "readmodule_ex", "_create_tree", "isinstance", "_nest_class", "_main", "ImportError", "Function", "_getname", "next", "ModuleNotFoundError", "Class", "_nest_function", "hasattr", "len", "_readmodule", "print"], "class_names": ["Class", "Function", "_Object"], "class_method_calls": ["_Object.__init__", "spec.loader", "ob._addchild", "ob.module", "module.rfind", "names.append", "self.lineno", "self.name", "obj.children", "importlib.util", "f.readline", "self.methods", "self.super", "sys.builtin_module_names", "io.StringIO", "objs.pop", "super.append", "ob.file", "obj.name", "n.split", "parts.append", "stack.append", "ob.indent", "ob._addmethod", "tokenize.generate_tokens", "self.file", "obj.super", "self.children", "spec.submodule_search_locations", "self.parent", "sys.path", "os.path", "tree.values", "objs.extend", "obj.lineno", "obj.indent", "sys.argv", "mod.lower", "f.close", "self.module"]}, "pydoc.py": {"libraries": ["importlib.machinery", "warnings", "subprocess", "webbrowser", "sysconfig", "urllib.parse", "io", "platform", "traceback.format_exception_only", "http.server", "select", "threading", "getopt", "collections.deque", "importlib.util", "pydoc_data.topics", "textwrap", "pkgutil", "os", "tty", "builtins", "re", "importlib._bootstrap_external", "time", "inspect", "tokenize", "tempfile", "importlib._bootstrap", "sys", "email.message", "reprlib.Repr"], "function_names": ["repr1", "modpkglink", "input", "modulelink", "ispath", "document", "classify_class_attrs", "resolve", "_is_bound_method", "server_activate", "bigsection", "__init__", "_start_server", "__str__", "index", "browse", "docroutine", "heading", "pipepager", "namelink", "docother", "docclass", "pathdirs", "log_message", "makename", "pager", "serve_until_quit", "getline", "preformat", "replace", "cram", "onerror", "escape", "safeimport", "showsymbol", "_get_revised_path", "__call__", "spill", "callback", "repr_string", "list", "classlink", "tempfilepager", "listsymbols", "ispackage", "showtopic", "docdata", "getdoc", "help", "getdocloc", "source_synopsis", "html_keywords", "page", "multicolumn", "interact", "html_getobj", "grey", "html_index", "output", "importfile", "allmethods", "__repr__", "spilldescriptors", "sort_attributes", "cli", "_escape_stdout", "markup", "describe", "doc", "html_topics", "synopsis", "plain", "listkeywords", "listtopics", "html_navbar", "repr_instance", "_gettopic", "html_error", "indent", "writedocs", "formatvalue", "render_doc", "getpager", "section", "stop", "ttypager", "intro", "splitdoc", "stripid", "writedoc", "listmodules", "repr", "spilldata", "html_search", "apropos", "maybe", "_url_handler", "formattree", "bltinlink", "classname", "_adjust_cli_sys_path", "locate", "visiblename", "run", "html_topicpage", "fail", "filelink", "docmodule", "do_GET", "isdata", "get_html_page", "ready", "plainpager", "bold", "_split_list"], "function_calls": ["sorted", "getchar", "getattr", "input", "ispath", "classify_class_attrs", "resolve", "_is_bound_method", "__import__", "staticmethod", "open", "_start_server", "browse", "int", "pipepager", "enumerate", "DocServer", "len", "makename", "pager", "HTMLRepr", "HorizontalRule", "ErrorDuringImport", "predicate", "object", "replace", "cram", "loader_cls", "onerror", "escape", "safeimport", "str", "ImportError", "_get_revised_path", "spill", "locals", "callback", "ModuleScanner", "list", "tempfilepager", "getdoc", "ServerThread", "source_synopsis", "html_keywords", "TextRepr", "html_getobj", "format", "html_index", "push", "importfile", "allmethods", "deque", "spilldescriptors", "self", "isinstance", "format_exception_only", "tuple", "sort_attributes", "_HTMLDoc", "cli", "_escape_stdout", "range", "describe", "doc", "html_topics", "set", "plain", "type", "eval", "hasattr", "html_navbar", "any", "max", "Helper", "html_error", "writedocs", "ord", "getpager", "render_doc", "print", "splitdoc", "writedoc", "stripid", "_PlainTextDoc", "repr", "spilldata", "HTMLDoc", "apropos", "html_search", "issubclass", "bltinlink", "_adjust_cli_sys_path", "classname", "ValueError", "locate", "visiblename", "html_topicpage", "completer", "get_html_page", "callable", "_split_list", "TypeError", "map", "TextDoc"], "class_names": ["HTMLDoc", "Doc", "DocHandler", "Helper", "TextRepr", "HTMLRepr", "ModuleScanner", "ErrorDuringImport", "_HTMLDoc", "BadUsage", "HorizontalRule", "DocServer", "_PlainTextDoc", "ServerThread", "TextDoc"], "class_method_calls": ["match.groups", "line.strip", "object.__self__", "self.docdata", "tty.setcbreak", "info.append", "self.getline", "inspect.isbuiltin", "warnings.filterwarnings", "spec.loader", "methods.update", "self.symbols", "self.indent", "sys.stdout", "Helper.topics", "inspect.stack", "self.classlink", "inspect.iscoroutinefunction", "self.quit", "request.split", "thread.start", "self.help", "tempfile.TemporaryDirectory", "output.write", "data.append", "warnings.catch_warnings", "request.lower", "inspect.iscode", "self.host", "self.base", "classes.append", "object.__version__", "self.showsymbol", "os.sep", "self.callback", "docloc.startswith", "os.close", "cmd.lower", "tty.tcgetattr", "textwrap.wrap", "modules.keys", "_re_stripid.sub", "modname.find", "renderer.document", "getopt.error", "inspect.classify_class_attrs", "object.__all__", "no.append", "modpkgs_names.add", "doc.strip", "serverthread.stop", "fp.readlines", "mro.popleft", "url.partition", "inspect.getattr_static", "self.maxstring", "self.join", "object.__name__", "sys.argv", "_symbols_inverse.items", "thread.serving", "name.endswith", "html.multicolumn", "self.urlhandler", "importlib.machinery", "pipe.write", "self.serving", "self.keywords", "base.__name__", "self.listsymbols", "result.rstrip", "self.getdocloc", "value.fset", "htmlhelp.keywords", "self.maxlist", "object.__date__", "inspect.isclass", "platform.platform", "loader.get_source", "self.listmodules", "self.docother", "os.getcwd", "field_order.get", "urllib.parse", "inspect.getmodule", "pydoc_data.topics", "html.index", "re.IGNORECASE", "self.maxdict", "thing.__name__", "value.__bases__", "self.end_headers", "self.output", "importlib.util", "self.handler", "Repr.__init__", "submodules.append", "help.help", "inspect.getabsfile", "serverthread.serving", "subprocess.Popen", "inspect.istraceback", "io.StringIO", "self.PYTHONDOCS", "self.error", "text.split", "self.bigsection", "self.filelink", "self.topics", "docsvr.serve_until_quit", "self.document", "cls.__module__", "inspect.isgetsetdescriptor", "select.select", "platform.python_version", "os.device_encoding", "os.system", "normdirs.append", "os.curdir", "self.list", "modpkgs.sort", "object.__bases__", "target.partition", "methods.keys", "self.intro", "name.lower", "inspect.getclasstree", "self.repr", "html.document", "inspect.isroutine", "module.__name__", "webbrowser.open", "hr.maybe", "inspect.getdoc", "object.__path__", "given_path.copy", "self.filename", "os.path", "self.escape", "self.heading", "inspect.isfunction", "self.port", "html.escape", "tty.tcsetattr", "request.strip", "inspect.getmro", "file.startswith", "thing.__objclass__", "sys.version_info", "inspect.signature", "email.message", "funcs.append", "key.lower", "tokenize.open", "name.rfind", "self.markup", "search_result.append", "htmlhelp._gettopic", "sys.platform", "m.startswith", "self.value", "_repr_instance.repr", "object.__author__", "self.grey", "self.namelink", "self.modpkglink", "self.listkeywords", "inspect.ismodule", "self.docmodule", "self.maxother", "contents.rstrip", "value.name", "http.server", "self.docroutine", "type.__subclasses__", "revised_path.insert", "loader.get_filename", "name.startswith", "pkgutil.walk_packages", "sys.builtin_module_names", "getopt.getopt", "pkgutil.iter_modules", "DocServer.handler", "self.handle_request", "DocHandler.MessageClass", "filename.endswith", "server.server_port", "links.append", "self.wfile", "self._input", "self.ready", "Repr.repr", "proc.stdin", "re.sub", "base.__module__", "inspect.isdatadescriptor", "self.url", "self.send_header", "cls.__name__", "object.__credits__", "subprocess.PIPE", "self.needone", "parents.append", "self.path", "self.socket", "sys.stdin", "inspect.ismethod", "os.environ", "revised_path.remove", "str.lower", "self.bold", "x.__class__", "platform.python_build", "io.TextIOWrapper", "Helper.keywords", "self.address", "name.split", "object.__module__", "self._GoInteractive", "re.compile", "proc.wait", "html.section", "self.preformat", "pattern.search", "self.docclass", "pkgutil._get_spec", "self.modulelink", "self.tb", "homecls.__dict__", "cl.__name__", "_repr_instance.escape", "DocHandler.urlhandler", "contents.append", "serverthread.url", "html.markup", "self.interact", "results.append", "file.read", "html.page", "self.maxtuple", "builtins.object", "self.server_close", "self._gettopic", "inspect.isasyncgenfunction", "html.bigsection", "sys.modules", "docloc.rstrip", "match.span", "inspect.isframe", "path.split", "url.endswith", "self.listtopics", "cl.__bases__", "self.section", "platform.python_compiler", "tempfile.mkstemp", "self.showtopic", "yes.append", "dirs.append", "tty.TCSAFLUSH", "symbols.get", "x.find", "submodules.sort", "serverthread.error", "self.multicolumn", "self._output", "sys.exc_info", "inspect.getcomments", "importlib._bootstrap_external", "inspect.getmembers", "value.filename", "url.startswith", "self.docserver", "file.readline", "thread.error", "attrs.sort", "server.host", "cache.get", "self.formattree", "DocServer.base", "value.__name__", "importlib._bootstrap", "os.unlink", "file.write", "line.split", "xrefs.split", "io.UnsupportedOperation", "time.sleep", "sys.path", "text.expandtabs", "modpkgs.append", "html.heading", "self.send_response", "self.input", "self.__class__", "inspect.ismemberdescriptor", "os.stat", "module.__doc__", "sysconfig.get_path", "threading.Thread", "text.encode", "self.exc"]}, "topics.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "queue.py": {"libraries": ["heapq.heappush", "time.monotonic", "threading", "collections.deque", "heapq.heappop", "_queue.Empty", "_queue.SimpleQueue"], "function_names": ["_get", "get_nowait", "task_done", "join", "empty", "full", "get", "__init__", "put", "put_nowait", "_init", "qsize", "_qsize", "_put"], "function_calls": ["ValueError", "len", "time", "heappush", "heappop", "deque"], "class_names": ["PriorityQueue", "Queue", "Full", "_PySimpleQueue", "LifoQueue", "Empty"], "class_method_calls": ["self._init", "self.mutex", "threading.Semaphore", "self.unfinished_tasks", "self.not_empty", "threading.Condition", "self.all_tasks_done", "threading.Lock", "self.not_full", "self._count", "self.queue", "self._get", "self.maxsize", "self._put", "self.get", "self._queue", "self._qsize", "self.put"]}, "quopri.py": {"libraries": ["binascii.a2b_qp", "getopt", "sys", "binascii.b2a_qp", "io.BytesIO"], "function_names": ["write", "needsquoting", "quote", "encodestring", "decodestring", "ishex", "unhex", "main", "decode", "encode"], "function_calls": ["write", "BytesIO", "isinstance", "a2b_qp", "len", "needsquoting", "quote", "ishex", "unhex", "main", "decode", "bytes", "b2a_qp", "print", "open", "ord", "repr", "encode"], "class_names": [], "class_method_calls": ["input.read", "fp.close", "input.readline", "sys.stderr", "sys.exit", "outline.append", "outfp.getvalue", "getopt.getopt", "output.write", "sys.argv", "sys.stdin", "getopt.error", "EMPTYSTRING.join", "sys.stdout"]}, "random.py": {"libraries": ["hashlib.sha512", "os.urandom", "math.sin", "math.cos", "_random", "math.log", "warnings.warn", "math.exp", "math.ceil", "os", "time", "_sha512.sha512", "math.e", "bisect.bisect", "_collections_abc.Sequence", "math.acos", "itertools.repeat", "math.pi", "itertools.accumulate", "_collections_abc.Set", "math.sqrt"], "function_names": ["normalvariate", "_test", "random", "_test_generator", "uniform", "getrandbits", "shuffle", "gauss", "__reduce__", "setstate", "__init_subclass__", "_notimplemented", "gammavariate", "__getstate__", "vonmisesvariate", "__init__", "randrange", "_randbelow_without_getrandbits", "sample", "seed", "paretovariate", "weibullvariate", "randint", "getstate", "choice", "__setstate__", "triangular", "_randbelow_with_getrandbits", "choices", "betavariate", "expovariate", "lognormvariate"], "function_calls": ["_urandom", "min", "_sin", "_test", "_sha512", "random", "_test_generator", "_warn", "reversed", "_accumulate", "getrandbits", "Random", "_log", "_ceil", "isinstance", "super", "_cos", "IndexError", "tuple", "_repeat", "range", "ValueError", "list", "_exp", "set", "bisect", "int", "func", "selected_add", "_sqrt", "_acos", "hasattr", "len", "max", "randbelow", "NotImplementedError", "_int", "TypeError", "ord", "map", "round", "print"], "class_names": ["Random", "SystemRandom"], "class_method_calls": ["_inst.triangular", "_inst.gauss", "int.from_bytes", "_inst.randrange", "func.__name__", "self.getrandbits", "_inst.vonmisesvariate", "_os.register_at_fork", "_inst.gammavariate", "self.gauss_next", "n.bit_length", "_inst.random", "_inst.uniform", "_inst.seed", "self.seed", "c.__dict__", "cls._randbelow", "cls._randbelow_without_getrandbits", "self.normalvariate", "_inst.expovariate", "_inst.normalvariate", "self.VERSION", "a.decode", "cls.__mro__", "_inst.choices", "a.encode", "self.setstate", "self._randbelow", "_inst.sample", "_inst.setstate", "_inst.getrandbits", "self.getstate", "_inst.betavariate", "selected.add", "time.perf_counter", "self.random", "_inst.paretovariate", "_inst.weibullvariate", "_random.Random", "_inst.shuffle", "cls._randbelow_with_getrandbits", "self.__class__", "self.gammavariate", "self.randrange", "_inst.choice", "_inst.randint", "_inst.lognormvariate", "_inst.getstate"]}, "re.py": {"libraries": ["enum", "sre_parse", "sre_constants.SUBPATTERN", "_locale", "sre_compile", "sre_constants.BRANCH", "copyreg", "functools"], "function_names": ["search", "sub", "match", "__repr__", "purge", "_expand", "finditer", "_subx", "_compile_repl", "escape", "subn", "findall", "__init__", "_compile", "_pickle", "split", "template", "fullmatch", "compile", "filter", "scan"], "function_calls": ["_compile_repl", "ValueError", "isinstance", "len", "chr", "append", "iter", "str", "hex", "type", "match", "callable", "next", "TypeError", "_compile", "action", "globals"], "class_names": ["Scanner", "RegexFlag"], "class_method_calls": ["sre_compile.isstring", "s.flags", "sre_parse.SubPattern", "self.match", "result.append", "s.opengroup", "object.__str__", "sre_compile.SRE_FLAG_DOTALL", "sre_compile.SRE_FLAG_TEMPLATE", "p.flags", "RegexFlag.__members__", "flags.value", "sre_compile.SRE_FLAG_IGNORECASE", "self.scanner", "sre_compile.SRE_FLAG_ASCII", "sre_parse.parse", "_cache.clear", "sre_compile.SRE_FLAG_MULTILINE", "sre_compile.SRE_FLAG_LOCALE", "m.end", "sre_compile.SRE_FLAG_UNICODE", "pattern.translate", "sre_parse.expand_template", "self._name_", "s.closegroup", "m._value_", "m.group", "functools.lru_cache", "sre_compile.compile", "p.pattern", "members.append", "copyreg.pickle", "sre_compile.SRE_FLAG_VERBOSE", "self.lexicon", "m._name_", "enum.IntFlag", "m.lastindex", "self._value_", "sre_parse.parse_template", "self.__class__", "p.append", "sre_compile.SRE_FLAG_DEBUG", "_compile_repl.cache_clear", "sre_compile.error", "sre_parse.State"]}, "reprlib.py": {"libraries": ["_thread.get_ident", "itertools.islice", "builtins"], "function_names": ["repr_int", "repr1", "repr_frozenset", "repr_array", "repr_deque", "_possibly_sorted", "recursive_repr", "repr_instance", "repr_tuple", "repr_list", "__init__", "decorating_function", "repr_str", "wrapper", "repr_dict", "_repr_iterable", "repr_set", "repr"], "function_calls": ["repr1", "list", "len", "Repr", "_possibly_sorted", "sorted", "max", "get_ident", "getattr", "user_function", "set", "islice", "type", "id", "hasattr"], "class_names": ["Repr"], "class_method_calls": ["wrapper.__name__", "repr_running.discard", "self.maxtuple", "aRepr.repr", "self.maxlist", "wrapper.__doc__", "self.maxfrozenset", "self.maxarray", "self.maxdeque", "self.maxother", "repr_running.add", "self.maxdict", "self.maxset", "typename.split", "pieces.append", "wrapper.__annotations__", "self.maxlevel", "self.repr1", "builtins.repr", "x.__class__", "self.maxlong", "wrapper.__module__", "x.typecode", "self.maxstring", "self.repr_instance", "wrapper.__qualname__", "self._repr_iterable"]}, "rlcompleter.py": {"libraries": ["keyword", "re", "__main__", "readline", "atexit", "builtins"], "function_names": ["attr_matches", "global_matches", "get_class_members", "complete", "__init__", "_callable_postfix"], "function_calls": ["isinstance", "len", "Completer", "getattr", "set", "dir", "callable", "TypeError", "eval", "get_class_members", "hasattr"], "class_names": ["Completer"], "class_method_calls": ["keyword.kwlist", "thisobject.__class__", "atexit.register", "matches.sort", "self.global_matches", "matches.append", "text.strip", "words.discard", "nspace.items", "self.namespace", "self.attr_matches", "words.add", "self._callable_postfix", "readline.insert_text", "words.update", "seen.add", "readline.redisplay", "readline.set_completer", "self.matches", "klass.__bases__", "__main__.__dict__", "re.match", "m.group", "self.use_main_ns", "builtins.__dict__"]}, "runpy.py": {"libraries": ["pkgutil.read_code", "importlib.machinery", "io", "types", "importlib.util", "sys", "pkgutil.get_importer", "warnings.warn", "os"], "function_names": ["run_path", "_get_module_details", "__enter__", "__exit__", "_run_module_as_main", "_run_code", "__init__", "_run_module_code", "run_module", "_get_code_from_file", "_get_main_module_details"], "function_calls": ["format", "object", "_get_module_details", "_run_module_as_main", "_ModifiedArgv0", "RuntimeError", "get_importer", "isinstance", "__import__", "str", "_run_module_code", "_get_code_from_file", "_run_code", "RuntimeWarning", "type", "_TempModule", "_get_main_module_details", "hasattr", "len", "compile", "read_code", "error", "warn", "exec", "print"], "class_names": ["_ModifiedArgv0", "_TempModule", "_Error"], "class_method_calls": ["self.value", "e.name", "sys.executable", "spec.loader", "mod_globals.copy", "sys.modules", "os.fsdecode", "mod_name.startswith", "importlib.util", "self.mod_name", "mod_spec.loader", "sys.exit", "pkg_name.startswith", "loader.get_code", "io.open_code", "f.read", "run_globals.update", "mod_spec.origin", "temp_module.module", "mod_name.rpartition", "mod_spec.cached", "run_name.rpartition", "mod_name.endswith", "spec.submodule_search_locations", "types.ModuleType", "sys.path", "os.path", "sys.stderr", "msg.format", "self._sentinel", "mod_spec.parent", "sys.argv", "self._saved_value", "self._saved_module", "self.module"]}, "sched.py": {"libraries": ["time.monotonic", "threading", "time", "heapq", "collections.namedtuple"], "function_names": ["__ge__", "enterabs", "__le__", "__gt__", "empty", "run", "queue", "__lt__", "__init__", "enter", "__eq__", "cancel"], "function_calls": ["timefunc", "list", "object", "len", "Event", "namedtuple", "delayfunc", "map", "pop", "action"], "class_names": ["scheduler", "Event"], "class_method_calls": ["heapq.heapify", "self.enterabs", "heapq.heappop", "o.time", "self.delayfunc", "s.time", "self.timefunc", "heapq.heappush", "Event.time", "threading.RLock", "Event.argument", "Event.kwargs", "s.priority", "Event.priority", "self._lock", "Event.action", "time.sleep", "self._queue", "o.priority"]}, "secrets.py": {"libraries": ["hmac.compare_digest", "random.SystemRandom", "binascii", "base64", "os"], "function_names": ["token_hex", "randbelow", "token_urlsafe", "token_bytes"], "function_calls": ["ValueError", "SystemRandom", "token_bytes"], "class_names": [], "class_method_calls": ["_sysrand._randbelow", "os.urandom", "base64.urlsafe_b64encode", "_sysrand.choice", "_sysrand.getrandbits", "binascii.hexlify"]}, "selectors.py": {"libraries": ["abc.abstractmethod", "select", "abc.ABCMeta", "sys", "math", "collections.abc.Mapping", "collections.namedtuple"], "function_names": ["register", "select", "close", "__len__", "unregister", "_fileobj_to_fd", "__enter__", "__exit__", "_fileobj_lookup", "__iter__", "__init__", "get_map", "modify", "_key_from_fd", "get_key", "fileno", "_select", "__getitem__"], "function_calls": ["KeyError", "ValueError", "isinstance", "len", "super", "max", "RuntimeError", "_fileobj_to_fd", "iter", "set", "_SelectorMapping", "SelectorKey", "int", "namedtuple", "hasattr", "globals"], "class_names": ["_PollLikeSelector", "_BaseSelectorImpl", "EpollSelector", "PollSelector", "SelectSelector", "BaseSelector", "KqueueSelector", "_SelectorMapping", "DevpollSelector"], "class_method_calls": ["sys.platform", "self._EVENT_WRITE", "self.register", "key.fileobj", "select.KQ_EV_DELETE", "select.poll", "SelectorKey.events", "self._select", "select.EPOLLOUT", "select.KQ_EV_ADD", "self.close", "self._readers", "ready.append", "select.KQ_FILTER_READ", "key._replace", "self._selector", "SelectorKey.fd", "self._key_from_fd", "self._fd_to_key", "select.devpoll", "math.ceil", "select.KQ_FILTER_WRITE", "SelectorKey.fileobj", "select.select", "key.fd", "self._writers", "select.EPOLLIN", "select.epoll", "key.events", "self._fileobj_lookup", "self._EVENT_READ", "kev.ident", "fileobj.fileno", "select.kevent", "select.POLLOUT", "SelectorKey.__doc__", "self.unregister", "self.get_map", "select.kqueue", "sys.version_info", "kev.filter", "self._selector_cls", "select.POLLIN", "SelectorKey.data", "self._map", "key.data"]}, "shelve.py": {"libraries": ["dbm", "pickle.Unpickler", "io.BytesIO", "collections.abc", "pickle.Pickler"], "function_names": ["__exit__", "__repr__", "__enter__", "get", "__init__", "open", "previous", "close", "__del__", "__len__", "last", "__iter__", "next", "closed", "set_location", "__setitem__", "sync", "first", "__delitem__", "__getitem__", "__contains__"], "function_calls": ["ValueError", "BytesIO", "len", "next", "DbfilenameShelf", "Unpickler", "Pickler", "_ClosedDict", "hasattr"], "class_names": ["Shelf", "BsdDbShelf", "_ClosedDict", "DbfilenameShelf"], "class_method_calls": ["self.close", "self.dict", "Shelf.__init__", "f.getvalue", "k.decode", "self.writeback", "key.encode", "self.cache", "self.sync", "key.decode", "collections.abc", "self.keyencoding", "dbm.open", "p.dump", "self._protocol"]}, "shlex.py": {"libraries": ["re", "collections.deque", "sys", "io.StringIO", "os"], "function_names": ["quote", "_print_tokens", "pop_source", "push_token", "join", "error_leader", "__iter__", "get_token", "read_token", "__init__", "sourcehook", "split", "__next__", "punctuation_chars", "push_source"], "function_calls": ["ValueError", "list", "isinstance", "len", "_print_tokens", "shlex", "quote", "StringIO", "repr", "open", "deque", "_find_unsafe", "print"], "class_names": ["shlex"], "class_method_calls": ["self.state", "self.get_token", "s.replace", "lexer.get_token", "self.whitespace_split", "self.filestack", "lex.whitespace_split", "dict.fromkeys", "self.debug", "self.read_token", "self.source", "self.whitespace", "self.commenters", "self.pushback", "self.lineno", "self.wordchars", "self.eof", "self.push_source", "lex.commenters", "self.pop_source", "self.token", "self.quotes", "re.ASCII", "self.punctuation_chars", "self.instream", "sys.stdin", "self.infile", "self.escapedquotes", "os.path", "self.escape", "re.compile", "self._pushback_chars", "self.sourcehook", "sys.argv", "self._punctuation_chars", "self.posix"]}, "shutil.py": {"libraries": ["tarfile", "pwd.getpwnam", "zipfile", "bz2", "lzma", "sys", "fnmatch", "collections", "zlib", "grp.getgrnam", "posix", "nt", "os", "stat", "errno"], "function_names": ["_fastcopy_sendfile", "get_terminal_size", "_is_immutable", "unregister_archive_format", "_unpack_tarfile", "make_archive", "_copyxattr", "lookup", "_islink", "_set_uid_gid", "_make_tarball", "rmtree", "_fastcopy_fcopyfile", "_check_unpack_options", "copyfileobj", "_unpack_zipfile", "_copyfileobj_readinto", "onerror", "copy", "_destinsrc", "_find_unpack_format", "register_unpack_format", "_samefile", "_basename", "disk_usage", "copystat", "register_archive_format", "chown", "ignore_patterns", "_nop", "_access_check", "_ignore_patterns", "_copytree", "get_unpack_formats", "_ensure_directory", "_stat", "copy2", "copyfile", "_rmtree_isdir", "move", "get_archive_formats", "_rmtree_islink", "_rmtree_safe_fd", "unregister_unpack_format", "unpack_archive", "copymode", "_get_gid", "_make_zipfile", "copytree", "which", "_rmtree_unsafe", "_get_uid"], "function_calls": ["getpwnam", "_fastcopy_sendfile", "min", "sorted", "getattr", "_is_immutable", "fdst_write", "lookup", "_copyxattr", "memoryview", "_islink", "ignore", "Error", "fsrc_readinto", "rmtree", "_check_unpack_options", "_fastcopy_fcopyfile", "copyfileobj", "onerror", "chmod_func", "isinstance", "fsrc_read", "_destinsrc", "_find_unpack_format", "_ntuple_diskusage", "_copyfileobj_readinto", "_samefile", "SameFileError", "_basename", "str", "copystat", "dict", "ReadError", "open", "RegistryError", "getgrnam", "ValueError", "list", "_access_check", "_copytree", "_ensure_directory", "stat_func", "_stat", "copyfile", "set", "_rmtree_isdir", "int", "LookupError", "copytree", "enumerate", "func", "OSError", "_GiveupOnFastCopy", "hasattr", "_rmtree_islink", "SpecialFileError", "bytearray", "len", "any", "_rmtree_safe_fd", "copy_function", "max", "copymode", "_get_gid", "callable", "TypeError", "_rmtree_unsafe", "PermissionError", "_get_uid"], "class_names": ["ExecError", "SameFileError", "Error", "ReadError", "RegistryError", "_GiveupOnFastCopy", "SpecialFileError"], "class_method_calls": ["tarinfo.uname", "os.scandir", "os.O_RDONLY", "e.errno", "srcentry.stat", "os.DirEntry", "err.filename", "st.f_frsize", "logger.info", "nt._getdiskusage", "fdst.write", "stat.UF_IMMUTABLE", "tarobj.close", "os.W_OK", "os.stat_result", "entry.is_dir", "tarinfo.gname", "dst.startswith", "st.f_bfree", "os.close", "os.fstat", "os.open", "zip.infolist", "cmd.lower", "tarinfo.gid", "_UNPACK_FORMATS.items", "ignored_names.extend", "_ntuple_diskusage.used", "_ntuple_diskusage.total", "size.columns", "fsrc.fileno", "os.readlink", "errors.append", "srcentry.name", "formats.sort", "errors.extend", "err.args", "fsrc.readinto", "name.endswith", "stat.S_ISLNK", "sys.audit", "fsrc.read", "os.setxattr", "os.sendfile", "os.makedirs", "os.symlink", "tarobj.extractall", "os.getcwd", "errno.ENOTSUP", "fn.stat", "zipfile.ZIP_DEFLATED", "os.supports_fd", "os.F_OK", "st.st_flags", "tarfile.TarError", "errno.EINVAL", "orig_st.st_mode", "zipfile.ZipFile", "kwargs.update", "os.rmdir", "entry.name", "dst.endswith", "_ARCHIVE_FORMATS.items", "os.curdir", "os.get_terminal_size", "entry.is_symlink", "sys.maxsize", "os.path", "os.getenv", "st.f_bavail", "rmtree.avoids_symlink_attacks", "os.supports_dir_fd", "err.filename2", "logger.debug", "path.rstrip", "sys.platform", "stat.S_IMODE", "os.pathsep", "os.statvfs", "os.lchmod", "os.terminal_size", "zipfile.is_zipfile", "os.confstr", "tar.add", "size.lines", "st.st_atime_ns", "st.st_mode", "os.fsencode", "f.write", "os.fspath", "os.lstat", "name.startswith", "errno.ENOSPC", "filename.endswith", "stat.IO_REPARSE_TAG_MOUNT_POINT", "why.errno", "lstat.st_reparse_tag", "fn.path", "path.insert", "st.st_mtime_ns", "posix._COPYFILE_DATA", "os.access", "entry.path", "os.environ", "zf.write", "zip.read", "collections.namedtuple", "os.walk", "srcentry.is_dir", "name.split", "os.chown", "src.stat", "os.lseek", "os.chmod", "fdst.fileno", "zip.close", "os.listdir", "fdst.name", "os.getxattr", "f.close", "st.st_file_attributes", "st.f_blocks", "fsrc.name", "os.defpath", "fn.is_symlink", "stat.S_ISDIR", "tarinfo.uid", "err.errno", "x.name", "stat.FILE_ATTRIBUTE_REPARSE_POINT", "os.listxattr", "os.rename", "st.st_reparse_tag", "os.fsdecode", "errno.EPERM", "stat.SF_IMMUTABLE", "path.split", "os.chdir", "errno.ENODATA", "ext.lower", "entry.stat", "src.endswith", "st.st_size", "fnmatch.filter", "srcentry.is_symlink", "tar.close", "os.SEEK_CUR", "tarfile.open", "sys.exc_info", "os.X_OK", "pathext_source.split", "os.unlink", "seen.add", "info.filename", "posix._fcopyfile", "os.supports_follow_symlinks", "stat.S_ISFIFO", "os.name", "os.stat", "__all__.append", "errno.ENOTSOCK", "_ntuple_diskusage.free", "sys.__stdout__"]}, "signal.py": {"libraries": ["_signal.*", "enum.IntEnum", "functools.wraps", "_signal"], "function_names": ["pthread_sigmask", "_enum_to_int", "sigpending", "signal", "valid_signals", "getsignal", "_int_to_enum", "sigwait"], "function_calls": ["_enum_to_int", "enum_klass", "set", "int", "_wraps", "_int_to_enum", "globals"], "class_names": [], "class_method_calls": ["_signal.pthread_sigmask", "sigwait.__doc__", "_signal.getsignal", "pthread_sigmask.__doc__", "_signal.sigwait", "name.startswith", "name.isupper", "_signal.sigpending", "_signal.signal", "_signal.valid_signals", "_IntEnum._convert_"]}, "site.py": {"libraries": ["rlcompleter", "usercustomize", "io", "textwrap", "sitecustomize", "sys", "_sitebuiltins", "readline", "traceback", "os", "stat", "atexit", "builtins"], "function_names": ["check_enableusersite", "getsitepackages", "register_readline", "_init_pathinfo", "addsitepackages", "abs_paths", "venv", "setquit", "removeduppaths", "write_history", "_script", "sethelper", "setcopyright", "_getuserbase", "makepath", "execsitecustomize", "joinuser", "addsitedir", "_get_path", "execusercustomize", "getusersitepackages", "getuserbase", "addusersitepackages", "main", "addpackage", "enablerlcompleter"], "function_calls": ["check_enableusersite", "getsitepackages", "sorted", "getattr", "_init_pathinfo", "addsitepackages", "abs_paths", "venv", "setquit", "removeduppaths", "open", "_script", "sethelper", "setcopyright", "_getuserbase", "set", "makepath", "execsitecustomize", "joinuser", "enumerate", "addsitedir", "exec", "_get_path", "execusercustomize", "getusersitepackages", "hasattr", "getuserbase", "addusersitepackages", "main", "addpackage", "enablerlcompleter", "print"], "class_names": [], "class_method_calls": ["builtins.credits", "sys.platform", "os.pathsep", "os.getuid", "sys.flags", "readline.get_current_history_length", "sys.executable", "buffer.append", "os.getegid", "os.geteuid", "sys.modules", "atexit.register", "os.getgid", "readline.read_init_file", "os.__file__", "sys.prefix", "PREFIXES.insert", "key.strip", "builtins.exit", "sys._framework", "os.lstat", "sys.exit", "os.pardir", "name.startswith", "builtins.copyright", "stat.FILE_ATTRIBUTE_HIDDEN", "dirs.extend", "readline.parse_and_bind", "line.partition", "L.append", "io.open_code", "builtins.help", "value.lower", "value.strip", "_sitebuiltins._Printer", "sys.__interactivehook__", "sys._base_executable", "sys.exc_info", "os.sep", "sys.excepthook", "exc.name", "readline.write_history_file", "os.curdir", "traceback.format_exception", "err.__class__", "sys.copyright", "os.environ", "known_paths.add", "sitepackages.append", "io.TextIOWrapper", "textwrap.dedent", "m.__file__", "seen.add", "sys._home", "sys.path", "os.path", "line.rstrip", "readline.read_history_file", "record.splitlines", "sys.stderr", "builtins.license", "os.listdir", "sys.version_info", "os.name", "_sitebuiltins.Quitter", "_sitebuiltins._Helper", "sys.argv", "line.startswith", "stat.UF_HIDDEN", "m.__cached__", "name.endswith", "d.add", "files.extend", "builtins.quit", "sys.exec_prefix"]}, "smtpd.py": {"libraries": ["pwd", "email._header_value_parser.get_angle_addr", "getopt", "asyncore", "Mailman.Message", "collections", "warnings.warn", "io.StringIO", "email._header_value_parser.get_addr_spec", "Mailman.Utils", "socket", "os", "time", "__main__", "Mailman.MailList", "smtplib", "errno", "asynchat", "sys"], "function_names": ["smtp_VRFY", "_print_message_content", "__rcpttos", "collect_incoming_data", "smtp_RCPT", "__mailfrom", "push", "_strip_command_keyword", "__addr", "smtp_HELO", "__peer", "parseargs", "__server", "_set_post_data_state", "usage", "smtp_HELP", "__state", "smtp_EXPN", "max_command_size_limit", "__conn", "__init__", "smtp_DATA", "_getaddr", "process_message", "_getparams", "__data", "smtp_NOOP", "flush", "_set_rset_state", "_deliver", "smtp_QUIT", "__greeting", "handle_accepted", "smtp_RSET", "write", "smtp_MAIL", "__line", "__fqdn", "found_terminator", "smtp_EHLO"], "function_calls": ["getattr", "parseargs", "repr", "isinstance", "usage", "get_angle_addr", "__import__", "super", "class_", "str", "StringIO", "locals", "Devnull", "ValueError", "method", "int", "get_addr_spec", "Options", "len", "max", "warn", "bytes", "print", "ord", "globals"], "class_names": ["PureProxy", "SMTPServer", "MailmanProxy", "SMTPChannel", "Devnull", "Options", "DebuggingServer"], "class_method_calls": ["params.upper", "line.upper", "self.mail_options", "conn.getpeername", "asyncore.loop", "self.conn", "socket.SOCK_STREAM", "self._newline", "self.close", "local.split", "data.append", "collections.defaultdict", "self.smtp_state", "self._decode_data", "self._deliver", "self._set_post_data_state", "__server.setter", "self.addr", "classname.rfind", "self._dotsep", "getopt.error", "options.classname", "self._getaddr", "smtplib.SMTPRecipientsRefused", "listnames.append", "s.sendmail", "sys.stderr", "self._getparams", "options.remoteport", "sys.argv", "options.enable_SMTPUTF8", "param.isalnum", "err.args", "params.keys", "self.mailfrom", "Message.Message", "mlists.get", "options.localhost", "self.fqdn", "__greeting.setter", "self.data_size_limit", "data.split", "self._linesep", "self.require_SMTPUTF8", "__peer.setter", "__conn.setter", "self.command_size_limits", "self.command_size_limit", "asynchat.async_chat", "self.num_bytes", "options.localport", "data.splitlines", "self.set_terminator", "e.recipients", "self.bind", "Utils.list_exists", "self.listen", "arg.lstrip", "address.addr_spec", "smtplib.SMTP", "self.peer", "__addr.setter", "s.connect", "self.enable_SMTPUTF8", "msg.get", "options.setuid", "COMMASPACE.join", "errno.ENOTCONN", "size.isdigit", "self.rcpt_options", "remotespec.find", "smtplib.SMTPException", "time.ctime", "socket.getfqdn", "getopt.getopt", "self.COMMAND", "rcpt.lower", "localspec.find", "options.remotehost", "self.seen_greeting", "time.time", "params.pop", "arg.upper", "self.smtp_server", "self._strip_command_keyword", "param.partition", "e.__class__", "lines.insert", "socket.getaddrinfo", "self.close_when_done", "self._set_rset_state", "self.rcpttos", "self._print_message_content", "self.channel_class", "peerheader.encode", "__line.setter", "self.received_lines", "options.size_limit", "__data.setter", "__rcpttos.setter", "self.extended_smtp", "os.setuid", "rcpttos.remove", "sys.exit", "MailList.MailList", "kwargs.get", "__fqdn.setter", "s.quit", "pwd.getpwnam", "msg.Enqueue", "__mailfrom.setter", "self._emptystring", "__state.setter", "line.split", "asyncore.dispatcher", "NEWLINE.join", "line.find", "self._remoteaddr", "self.DATA", "self.__class__", "self._localaddr", "self.set_reuse_addr", "self.push", "self.create_socket", "self.received_data", "self._map", "self.max_command_size_limit"]}, "smtplib.py": {"libraries": ["hmac", "io", "re", "copy", "email.base64mime.body_encode", "datetime", "email.generator", "ssl", "sys", "warnings", "email.utils", "email.message", "base64", "socket"], "function_names": ["__exit__", "putcmd", "ehlo", "_print_debug", "quit", "send_message", "_addr_only", "_quote_periods", "auth", "getreply", "_fix_eols", "prompt", "quotedata", "auth_cram_md5", "login", "auth_login", "mail", "__enter__", "data", "__init__", "expn", "rcpt", "quoteaddr", "verify", "docmd", "close", "ehlo_or_helo_if_needed", "starttls", "rset", "_get_socket", "helo", "help", "set_debuglevel", "send", "_rset", "noop", "sendmail", "auth_plain", "connect", "has_extn"], "function_calls": ["SMTPHeloError", "getattr", "SMTPServerDisconnected", "_addr_only", "_quote_periods", "prompt", "_fix_eols", "repr", "RuntimeError", "isinstance", "authobject", "str", "SMTP", "SMTPDataError", "SMTPConnectError", "quoteaddr", "ValueError", "SMTPSenderRefused", "int", "SMTPAuthenticationError", "encode_base64", "OSError", "SMTPRecipientsRefused", "len", "any", "SMTPResponseException", "SMTPNotSupportedError", "SMTPException", "print"], "class_names": ["SMTPHeloError", "SMTPResponseException", "SMTPNotSupportedError", "SMTPException", "SMTPServerDisconnected", "SMTPSenderRefused", "SMTP", "SMTP_SSL", "SMTPDataError", "SMTPConnectError", "SMTPAuthenticationError", "LMTP", "SMTPRecipientsRefused"], "class_method_calls": ["self.default_port", "initial_response.encode", "mechanism.upper", "s.replace", "socket.SOCK_STREAM", "self.sender", "sys.stdout", "addrstring.strip", "self.close", "SMTP.__init__", "socket.AF_UNIX", "self.debuglevel", "self._auth_challenge_count", "socket.gethostname", "file.close", "socket._GLOBAL_DEFAULT_TIMEOUT", "self.ehlo", "self.rset", "sys.stderr", "self.context", "socket.gethostbyname", "email.utils", "ssl._create_stdlib_context", "self.smtp_error", "sys.audit", "self.keyfile", "datetime.datetime", "self.connect", "self.recipients", "self.timeout", "hmac.HMAC", "self.mail", "self.helo_resp", "SMTP.connect", "host.rfind", "self.getreply", "email.generator", "s.encode", "warnings.warn", "OLDSTYLE_AUTH.match", "msg.get_all", "self.esmtp_features", "self._rset", "self.source_address", "self.sock", "self.sendmail", "self.certfile", "sock.close", "re.match", "self.smtp_code", "self.ehlo_or_helo_if_needed", "self.docmd", "copy.copy", "base64.decodebytes", "host.find", "self.local_hostname", "socket.create_connection", "self.args", "socket.getfqdn", "self._get_socket", "self._print_debug", "m.string", "m.end", "opt.lower", "re.sub", "re.I", "self.does_esmtp", "g.flatten", "self.send", "sys.stdin", "msg.policy", "auth_match.groups", "re.compile", "self.helo", "socket.gaierror", "server.set_debuglevel", "self.ehlo_resp", "esmtp_opts.append", "server.sendmail", "io.BytesIO", "self.ehlo_msg", "self.rcpt", "self.has_extn", "x.lower", "self.data", "resp.append", "self.auth", "self._host", "server.quit", "context.wrap_socket", "authmethod.lower", "self.file", "self.password", "self.command_encoding", "self.user", "bytesmsg.getvalue", "self.putcmd", "__all__.append", "m.group", "socket.socket"]}, "sndhdr.py": {"libraries": ["glob", "sys", "aifc", "os", "wave", "collections.namedtuple"], "function_names": ["whathdr", "test_sndr", "test_sndt", "get_long_le", "test", "test_voc", "test_au", "testall", "what", "get_short_le", "get_short_be", "test_aifc", "test_hcom", "test_8svx", "get_long_be", "test_wav"], "function_calls": ["whathdr", "test", "get_long_le", "tf", "testall", "what", "get_short_le", "int", "namedtuple", "open", "func", "SndHeaders", "get_long_be", "print"], "class_names": [], "class_method_calls": ["a.getnframes", "a.getframerate", "SndHeaders.filetype", "w.getnchannels", "aifc.open", "sys.stdout", "tests.append", "a.getnchannels", "SndHeaders.nchannels", "sys.exit", "SndHeaders.nframes", "aifc.Error", "wave.open", "f.read", "glob.glob", "a.getsampwidth", "f.seek", "w.getframerate", "w.getnframes", "os.path", "sys.stderr", "glob.escape", "SndHeaders.sampwidth", "SndHeaders.framerate", "sys.argv", "h.startswith", "wave.Error", "w.getsampwidth"]}, "socket.py": {"libraries": ["_socket.*", "io", "enum.IntFlag", "sys", "_socket", "enum.IntEnum", "os", "selectors", "errno"], "function_names": ["writable", "readable", "__exit__", "fromshare", "__repr__", "_real_close", "makefile", "create_server", "sendfile", "socketpair", "__enter__", "create_connection", "__getstate__", "get_inheritable", "__init__", "_decref_socketios", "name", "accept", "readinto", "close", "_intenum_converter", "detach", "getaddrinfo", "type", "seekable", "has_dualstack_ipv6", "write", "family", "_sendfile_use_sendfile", "set_inheritable", "dup", "_check_sendfile_params", "getfqdn", "mode", "_sendfile_use_send", "fileno", "fromfd"], "function_calls": ["object", "min", "getdefaulttimeout", "getattr", "enum_klass", "SocketIO", "memoryview", "os_sendfile", "isinstance", "super", "str", "selector_select", "socket", "sock_send", "ValueError", "gethostname", "_intenum_converter", "getaddrinfo", "gethostbyaddr", "set", "file_read", "has_dualstack_ipv6", "OSError", "_GiveupOnSendfile", "hasattr", "len", "dup", "error", "TypeError"], "class_names": ["SocketIO", "socket", "_GiveupOnSendfile"], "class_method_calls": ["self.closed", "selectors.PollSelector", "self._checkWritable", "_socket.timeout", "self._reading", "self.close", "io.RawIOBase", "sock.listen", "self._mode", "self._real_close", "os.fstat", "io.BufferedRWPair", "file.fileno", "self.proto", "self._sendfile_use_send", "os.get_inheritable", "sock.setsockopt", "text.mode", "selector.select", "os.sendfile", "self.type", "self._closed", "io.DEFAULT_BUFFER_SIZE", "self.getsockname", "csock.close", "file.seek", "self._checkClosed", "lsock.close", "C.isupper", "socketpair.__doc__", "csock.setblocking", "sock.setblocking", "io.BufferedReader", "name.strip", "_socket.socketpair", "sock.close", "self._io_refs", "os._get_exports_list", "self.getpeername", "_socket.getaddrinfo", "self.family", "sys.platform", "sock.bind", "lsock.accept", "set_inheritable.__doc__", "os.get_handle_inheritable", "selectors.SelectSelector", "err.strerror", "self._sock", "os.set_handle_inheritable", "addrlist.append", "self._sendfile_use_sendfile", "__all__.extend", "C.startswith", "aliases.insert", "self._timeout_occurred", "IntFlag._convert_", "self.gettimeout", "self.send", "a.detach", "io.TextIOWrapper", "lsock.bind", "sock.connect", "io.BufferedWriter", "e.args", "lsock.listen", "get_inheritable.__doc__", "selector.register", "_socket.socket", "file.read", "err.errno", "self.fileno", "b.detach", "csock.connect", "self._checkReadable", "os.set_inheritable", "self._check_sendfile_params", "self._writing", "io.UnsupportedOperation", "self._accept", "selectors.EVENT_WRITE", "IntEnum._convert_", "os.name", "self.__class__", "sock.settimeout", "_ss.close", "__all__.append", "lsock.getsockname"]}, "socketserver.py": {"libraries": ["time.monotonic", "threading", "sys", "io.BufferedIOBase", "io.BytesIO", "socket", "os", "selectors", "traceback"], "function_names": ["verify_request", "writable", "handle_timeout", "__exit__", "append", "handle", "shutdown_request", "setup", "reap", "process_request", "shutdown", "server_activate", "get_request", "_handle_request_noblock", "__enter__", "join", "pop_all", "__init__", "collect_children", "handle_request", "finish", "handle_error", "service_actions", "close_request", "process_request_thread", "write", "server_bind", "server_close", "serve_forever", "finish_request", "fileno"], "function_calls": ["BytesIO", "len", "min", "time", "super", "_Threads", "set", "memoryview", "_NoThreads", "_ServerSelector", "hasattr", "_SocketWriter", "vars", "print"], "class_names": ["_Threads", "ForkingTCPServer", "_SocketWriter", "DatagramRequestHandler", "ThreadingUDPServer", "StreamRequestHandler", "ForkingMixIn", "ThreadingUnixDatagramServer", "UnixStreamServer", "ThreadingUnixStreamServer", "ThreadingTCPServer", "TCPServer", "ForkingUDPServer", "BaseServer", "BaseRequestHandler", "UnixDatagramServer", "ThreadingMixIn", "UDPServer", "_NoThreads"], "class_method_calls": ["thread.daemon", "selectors.PollSelector", "socket.SOCK_STREAM", "self.daemon_threads", "self.verify_request", "t.start", "self.get_request", "self.service_actions", "self.close_request", "socket.AF_UNIX", "self.handle", "thread.join", "self.__is_shut_down", "self.handle_error", "self.server_address", "self.server_activate", "sys.stderr", "self.rbufsize", "self.server", "self.request_queue_size", "socket.SOL_SOCKET", "selector.select", "traceback.print_exc", "self.timeout", "self.address_family", "self.collect_children", "self.request", "self.connection", "self.finish", "os.fork", "self.handle_timeout", "view.nbytes", "self.pop_all", "self.__shutdown_request", "thread.is_alive", "self.wbufsize", "self.client_address", "selectors.SelectSelector", "self._sock", "socket.TCP_NODELAY", "__all__.extend", "self.wfile", "request.close", "selectors.EVENT_READ", "self.max_children", "self.socket", "self._handle_request_noblock", "self.setup", "self.active_children", "self.socket_type", "socket.SOCK_DGRAM", "selector.register", "self.reap", "self.max_packet_size", "self.finish_request", "self.server_close", "os.waitpid", "self.block_on_close", "socket.AF_INET", "request.shutdown", "self.disable_nagle_algorithm", "socket.IPPROTO_TCP", "self.rfile", "t.daemon", "self.server_bind", "socket.SHUT_WR", "socket.SO_REUSEADDR", "threading.Event", "self._threads", "self.allow_reuse_address", "self.packet", "self.process_request", "self.RequestHandlerClass", "BaseServer.__init__", "self.shutdown_request", "socket.error", "os.WNOHANG", "self.process_request_thread", "os._exit", "threading.Thread", "socket.socket"]}, "dbapi2.py": {"libraries": ["collections.abc", "_sqlite3.*", "time", "datetime"], "function_names": ["register_adapters_and_converters", "TimestampFromTicks", "adapt_date", "adapt_datetime", "convert_timestamp", "DateFromTicks", "TimeFromTicks", "convert_date"], "function_calls": ["register_adapter", "register_adapters_and_converters", "len", "register_converter", "Time", "Date", "tuple", "int", "map", "Timestamp"], "class_names": [], "class_method_calls": ["sqlite_version.split", "time.localtime", "datetime.datetime", "datepart.split", "val.isoformat", "datetime.time", "collections.abc", "val.split", "datetime.date", "timepart.split", "version.split"]}, "dump.py": {"libraries": ["unittest", "sqlite3"], "function_names": ["test", "setUp", "CheckUnorderableRow", "__init__", "suite", "tearDown", "CheckTableDump", "__getitem__"], "function_calls": ["list", "len", "test", "suite", "range"], "class_names": ["UnorderableRow", "DumpTests"], "class_method_calls": ["self.cx", "unittest.makeSuite", "self.cu", "unittest.TestSuite", "self.assertEqual", "unittest.TextTestRunner", "unittest.TestCase", "sqlite.connect", "runner.run", "self.row"]}, "backup.py": {"libraries": ["unittest", "sqlite3"], "function_names": ["test_non_callable_progress", "setUp", "test_bad_target_none", "test_progress_all_pages_at_once_1", "test_bad_target_filename", "test_progress", "progress", "test_bad_target_in_transaction", "test_modifying_progress", "test_progress_all_pages_at_once_2", "test_bad_target_same_connection", "suite", "test_keyword_only_args", "tearDown", "test_simple", "test_database_source_name", "test_bad_source_closed_connection", "test_bad_target_closed_connection", "test_failing_progress", "verify_backup"], "function_calls": ["len", "SystemError", "str"], "class_names": ["BackupTests"], "class_method_calls": ["bckcx.execute", "journal.append", "self.verify_backup", "cx.commit", "self.assertEqual", "source.backup", "cx.execute", "cm.exception", "self.assertIn", "bck.executemany", "sqlite.ProgrammingError", "sqlite.connect", "self.assertRaises", "unittest.skipIf", "bck.execute", "unittest.makeSuite", "sqlite.SQLITE_DONE", "unittest.main", "sqlite.SQLITE_OK", "self.cx", "cx.executemany", "source.close", "bck.close", "unittest.TestCase", "sqlite.sqlite_version_info", "err.exception", "sqlite.OperationalError"]}, "dbapi.py": {"libraries": ["unittest", "test.support.TESTFN", "threading", "test.support.unlink", "sqlite3"], "function_names": ["CheckExecuteWrongNoOfArgs3", "CheckClosedCurExecute", "CheckDataError", "CheckExecuteTooMuchSql2", "CheckExecuteDictMappingNoArgs", "CheckCursorWrongClass", "CheckLastRowIDInsertOR", "CheckClosedSetProgressCallback", "CheckExecuteManyWrongSqlArg", "CheckLastRowIDOnIgnore", "__init__", "__missing__", "CheckOnConflictRollbackWithExplicitTransaction", "CheckCurExecute", "CheckWarning", "CheckConRollback", "CheckLastRowIDOnReplace", "CheckExecuteArgFloat", "tearDown", "__next__", "CheckTimestamp", "CheckCurClose", "CheckFetchoneNoStatement", "CheckFetchIter", "CheckClosedSetAuthorizer", "CheckScriptStringSql", "step", "CheckOnConflictReplace", "CheckCommit", "CheckInternalError", "CheckScriptSyntaxError", "CheckRowcountSelect", "CheckConnectionExecutemany", "CheckOnConflictAbortRaisesWithoutTransactions", "CheckOnConflictAbortRaisesWithExplicitTransactions", "CheckRowcountExecute", "CheckExecuteDictMappingUnnamed", "CheckWrongCursorCallable", "CheckClosed", "authorizer", "progress", "CheckOperationalError", "CheckArraySize", "CheckClosedConCommit", "CheckExecuteArgInt", "CheckDate", "suite", "CheckConnectionExecutescript", "CheckExecuteDictMapping_Mapping", "CheckIntegrityError", "CheckExecuteWrongSqlArg", "CheckClosedCall", "f", "CheckExecuteParamList", "CheckClosedConCursor", "mygen", "CheckDatabaseError", "CheckError", "CheckExecuteArgStringWithZeroByte", "__getitem__", "CheckFetchmanyKwArg", "test", "setUp", "CheckExecuteArgString", "CheckDateFromTicks", "CheckExceptions", "CheckAPILevel", "CheckConCommit", "CheckExecuteManyGenerator", "CheckExecuteManySequence", "CheckRollbackAfterNoChanges", "CheckExecuteWrongNoOfArgs1", "CheckBinary", "CheckConClose", "CheckSetoutputsize", "CheckParamStyle", "CheckInterfaceError", "CheckExecuteNoArgs", "CheckExecuteTooMuchSql", "CheckFetchone", "CheckProgrammingError", "CheckExecuteParamSequenceBadLen", "CheckTimeFromTicks", "CheckOpenWithPathLikeObject", "CheckClosedCreateAggregate", "CheckTotalChanges", "CheckExecuteManySelect", "CheckInTransaction", "CheckExecuteNonIterable", "__fspath__", "CheckCommitAfterNoChanges", "CheckCursorConnection", "CheckSameThreadErrorOnOldVersion", "CheckExecuteIllegalSql", "CheckCursor", "CheckExecuteWrongNoOfArgs2", "CheckCurIterNext", "CheckExecuteDictMapping", "CheckExecuteTooMuchSql3", "CheckThreadSafety", "CheckNotSupportedError", "CheckConnectionExecute", "CheckExecuteParamSequence", "CheckFailedOpen", "CheckOnConflictFail", "CheckOnConflictRollbackWithoutTransaction", "CheckCurImplicitBegin", "CheckClosedCreateFunction", "CheckRollback", "CheckCursorExecutescriptAsBytes", "CheckConCursor", "CheckClose", "__len__", "CheckExecuteManyIterator", "run", "finalize", "CheckOnConflictIgnore", "CheckSetinputsizes", "CheckClosedConRollback", "CheckOpenUri", "CheckTimestampFromTicks", "CheckFetchmany", "CheckInTransactionRO", "CheckFetchall", "CheckSetoutputsizeNoColumn", "CheckRowcountExecutemany", "CheckScriptErrorNormal", "CheckExecuteDictMappingTooLittleArgs", "CheckExecuteManyNotIterable", "CheckTime"], "function_calls": ["len", "issubclass", "test", "method", "Foo", "MyIter", "str", "mygen", "con", "getattr", "Path", "suite", "L", "D", "range"], "class_names": ["SqliteOnConflictTests", "D", "ExtensionTests", "ModuleTests", "CursorTests", "ThreadTests", "MyIter", "Foo", "Agg", "Path", "ClosedCurTests", "ConnectionTests", "L", "ClosedConTests", "ConstructorTests"], "class_method_calls": ["con.executemany", "sqlite.InternalError", "self.assertLess", "results.append", "con.executescript", "sqlite.paramstyle", "cu.fetchone", "sqlite.DatabaseError", "self.value", "cx.commit", "self.cur", "self.assertEqual", "sqlite.NotSupportedError", "sqlite.Binary", "sqlite.threadsafety", "con.close", "cx.execute", "sqlite.apilevel", "runner.run", "cm.exception", "sqlite.Error", "con.execute", "lst.append", "sqlite.Date", "cur.close", "t.start", "t.join", "sqlite.IntegrityError", "self.fail", "self.addCleanup", "cur.execute", "unittest.TextTestRunner", "sqlite.ProgrammingError", "sqlite.Cursor", "sqlite.InterfaceError", "sqlite.connect", "self.subTest", "self.assertRaises", "con.rollback", "unittest.skipIf", "cur.executescript", "sqlite.TimeFromTicks", "unittest.makeSuite", "sqlite.DENY", "sqlite.Warning", "self.cu", "cur.fetchone", "sqlite.Timestamp", "con.create_function", "self.con", "cu.execute", "con.commit", "con.cursor", "con.create_aggregate", "sqlite.DateFromTicks", "con.set_authorizer", "sqlite.TimestampFromTicks", "sqlite.DataError", "self.cx", "sqlite.Time", "sql.format", "unittest.TestSuite", "con.set_progress_handler", "errors.append", "self.assertTrue", "cx.cursor", "unittest.TestCase", "sqlite.sqlite_version_info", "cx.in_transaction", "threading.Thread", "sqlite.OperationalError"]}, "factory.py": {"libraries": ["unittest", "sqlite3", "collections.abc.Sequence"], "function_names": ["test", "setUp", "CheckIsInstance", "CheckUnicode", "dict_factory", "CheckSqliteRowAsDict", "CheckSqliteRowIndex", "CheckInvalidFactory", "CheckCustom", "CheckBytearray", "__init__", "CheckCustomFactory", "CheckOptimizedUnicode", "CheckSqliteRowAsTuple", "CheckSqliteRowSlice", "CheckBytes", "CheckString", "suite", "tearDown", "CheckSqliteRowHashCmp", "CheckFakeCursorClass", "CheckIsProducedByFactory", "CheckSqliteRowIndexUnicode", "CheckSqliteRowIter", "CheckSqliteRowAsSequence"], "function_calls": ["list", "object", "test", "str", "FakeCursor", "tuple", "reversed", "MyCursor", "type", "suite", "dict", "hash", "enumerate"], "class_names": ["ConnectionFactoryTests", "CursorFactoryTests", "MyConnection", "FakeCursor", "MyCursor", "TextFactoryTestsWithEmbeddedZeroBytes", "RowFactoryTestsBackwardsCompat", "TextFactoryTests", "RowFactoryTests"], "class_method_calls": ["self.assertIsInstance", "cursor.description", "sqlite.Row", "self.assertEqual", "runner.run", "sqlite.OptimizedUnicode", "self.assertIs", "cur.close", "cur.execute", "unittest.TextTestRunner", "sqlite.Cursor", "sqlite.connect", "self.assertRaises", "unittest.makeSuite", "cur.fetchone", "self.con", "austria.encode", "unittest.TestSuite", "sqlite.Connection", "self.row_factory", "self.assertTrue", "unittest.TestCase", "self.assertFalse"]}, "hooks.py": {"libraries": ["unittest", "sqlite3", "test.support.unlink", "test.support.TESTFN"], "function_names": ["CheckCollationRegisterTwice", "test", "CheckClearHandler", "CheckOpcodeCount", "CheckCollationReturnsLargeInteger", "CheckCreateCollationNotCallable", "CheckCreateCollationNotAscii", "CheckCreateCollationBadUpper", "upper", "CheckCancelOperation", "progress", "CheckDeregisterCollation", "CheckUnicodeContent", "trace", "CheckCreateCollationNotString", "CheckTraceCallbackUsed", "CheckClearTraceCallback", "suite", "CheckTraceCallbackContent", "CheckCollationIsUsed", "CheckProgressHandlerUsed", "mycoll"], "function_calls": ["len", "any", "test", "BadUpperStr", "str", "suite", "ascii", "map"], "class_names": ["BadUpperStr", "TraceCallbackTests", "ProgressTests", "CollationTests"], "class_method_calls": ["con1.set_trace_callback", "self.assertEqual", "traced_statements.append", "self.assertGreaterEqual", "cm.exception", "runner.run", "con.execute", "con2.execute", "self.addCleanup", "con1.cursor", "cur.execute", "unittest.TextTestRunner", "con.create_collation", "sqlite.ProgrammingError", "sqlite.connect", "queries.append", "self.assertRaises", "unittest.skipIf", "unittest.makeSuite", "progress_calls.append", "con.commit", "con.cursor", "con.set_trace_callback", "unittest.TestSuite", "con.set_progress_handler", "self.assertTrue", "unittest.TestCase", "sqlite.sqlite_version_info", "self.assertFalse", "curs.execute", "sqlite.OperationalError"]}, "regression.py": {"libraries": ["unittest", "datetime", "weakref", "unittest.mock.patch", "test.support", "sqlite3", "functools"], "function_names": ["CheckPragmaSchemaVersion", "CheckBpo37347", "test", "setUp", "test_recursive_cursor_init", "CheckStatementFinalizationOnCloseDb", "CheckBindMutatingList", "CheckAutoCommit", "CheckSetIsolationLevel", "cursor", "CheckErrorMsgDecodeError", "CheckTypeMapUsage", "test_recursive_cursor_fetch", "CheckPragmaAutocommit", "CheckRecursiveCursorUse", "CheckConvertTimestampMicrosecondPadding", "CheckDelIsolation_levelSegfault", "upper", "__init__", "callback", "CheckColumnNameWithSpaces", "CheckWorkaroundForBuggySqliteTransferBindings", "CheckCommitCursorReset", "__del__", "CheckCursorRegistration", "CheckStatementReset", "CheckOnConflictRollback", "test_recursive_cursor_close", "collation_cb", "suite", "CheckConnectionCall", "tearDown", "CheckEmptyStatement", "CheckPragmaUserVersion", "CheckRegisterAdapter", "CheckNullCharacter", "CheckConnectionConstructorCallCheck", "CheckStrSubclass", "CheckInvalidIsolationLevelType", "__conform__", "CheckCollation", "CheckBpo31770", "foo", "log", "CheckCursorConstructorCallCheck"], "function_calls": ["bytearray", "CustomStr", "test", "method", "Connection", "str", "MyStr", "Printer", "Cursor", "suite", "bytes", "foo", "enumerate", "range", "X"], "class_names": ["CustomStr", "RecursiveUseOfCursors", "Connection", "MyStr", "Printer", "Cursor", "RegressionTests", "X"], "class_method_calls": ["l.append", "con.executescript", "datetime.datetime", "cur.description", "sqlite.DatabaseError", "self.cur", "self.assertEqual", "support.gc_collect", "sqlite.register_adapter", "runner.run", "cur.executemany", "cursors.append", "con.execute", "cm.exception", "self.assertRaisesRegex", "cur.close", "patch.dict", "self.assertIn", "functools.partial", "self.fail", "cur.execute", "unittest.TextTestRunner", "sqlite.Cursor", "sqlite.ProgrammingError", "sqlite.InterfaceError", "sqlite.connect", "cur.__init__", "printer_instance.log", "self.subTest", "self.assertRaises", "con.rollback", "unittest.skipIf", "unittest.makeSuite", "sqlite.PARSE_DECLTYPES", "sqlite.Warning", "cur.fetchone", "weakref.ref", "self.con", "sqlite.PARSE_COLNAMES", "con.commit", "con.isolation_level", "con.cursor", "cur.fetchall", "parameters.clear", "level.lower", "sqlite.sqlite_version_info", "sqlite.SQLITE_OK", "sqlite.converters", "unittest.TestSuite", "level.capitalize", "sqlite.Connection", "unittest.TestCase", "con.close", "self.msg", "sqlite.OperationalError"]}, "transactions.py": {"libraries": ["unittest", "os", "sqlite3"], "function_names": ["CheckDropTable", "test", "setUp", "CheckUpdateStartsTransaction", "CheckRollbackCursorConsistency", "CheckDMLDoesNotAutoCommitBefore", "get_db_path", "CheckDeleteStartsTransaction", "CheckInsertStartsTransaction", "suite", "tearDown", "CheckDdlDoesNotAutostartTransaction", "CheckRaiseTimeout", "CheckTransactionalDDL", "CheckReplaceStartsTransaction", "CheckLocking", "CheckToggleAutoCommit", "CheckPragma", "CheckImmediateTransactionalDDL"], "function_calls": ["len", "suite", "test", "get_db_path"], "class_names": ["TransactionalDDL", "SpecialCommandTests", "TransactionTests"], "class_method_calls": ["self.con1", "self.cur", "self.assertEqual", "runner.run", "cur.execute", "unittest.TextTestRunner", "sqlite.InterfaceError", "os.remove", "sqlite.connect", "self.assertRaises", "con.rollback", "unittest.skipIf", "unittest.makeSuite", "self.con", "cur.fetchall", "con.cursor", "os.unlink", "self.con2", "self.cur1", "self.cur2", "unittest.TestSuite", "unittest.TestCase", "sqlite.sqlite_version_info", "sqlite.OperationalError"]}, "types.py": {"libraries": ["sys", "_collections_abc", "functools"], "function_names": ["_calculate_meta", "setter", "throw", "prepare_class", "coroutine", "deleter", "gi_frame", "__get__", "__init__", "_g", "_m", "__set__", "gi_code", "close", "getter", "gi_yieldfrom", "__iter__", "resolve_bases", "gi_running", "new_class", "_cell_factory", "__next__", "f", "_f", "send", "__delete__", "wrapped"], "function_calls": ["object", "_GeneratorWrapper", "getattr", "_calculate_meta", "prepare_class", "isinstance", "issubclass", "AttributeError", "exec_body", "_ag", "tuple", "_g", "dict", "_C", "list", "resolve_bases", "type", "next", "enumerate", "_cell_factory", "bool", "func", "hasattr", "len", "callable", "TypeError", "meta", "_c", "globals"], "class_names": ["DynamicClassAttribute", "_GeneratorWrapper", "_C"], "class_method_calls": ["FunctionType.__globals__", "dict.__dict__", "self.overwrite_doc", "functools.wraps", "func.__class__", "func.__code__", "_collections_abc.Generator", "object.__init__", "tb.tb_frame", "type.__dict__", "self.__wrapped", "coro.__class__", "self.fdel", "coro.gi_code", "_c.close", "fget.__doc__", "_f.__code__", "result.overwrite_doc", "self.__isabstractmethod__", "sys.exc_info", "meta.__prepare__", "FunctionType.__code__", "self.fset", "self.__qualname__", "base.__mro_entries__", "kwds.pop", "str.join", "self.fget", "self.__isgen", "f.__closure__", "_collections_abc.Coroutine", "co.co_flags", "self.__doc__", "gen.__class__", "sys.implementation", "self.__name__", "co.replace"]}, "userfunctions.py": {"libraries": ["unittest", "sqlite3", "unittest.mock"], "function_names": ["CheckFuncRefCount", "test", "CheckParamBlob", "CheckAggrCheckParamBlob", "CheckAggrErrorOnCreate", "setUp", "func_returnfloat", "CheckFuncReturnUnicode", "func_isstring", "func_isint", "CheckAggrExceptionInInit", "test_column_access", "CheckAggrCheckParamStr", "CheckFuncReturnText", "func_returntext", "func_isblob", "CheckFuncDeterministic", "CheckFuncDeterministicKeywordOnly", "func_returnint", "CheckFuncException", "__init__", "CheckFuncReturnInt", "CheckFuncReturnFloat", "CheckParamInt", "CheckParamNone", "CheckFuncNonDeterministic", "func_isnone", "CheckAggrCheckParamNone", "func_returnnull", "func_isfloat", "CheckFuncReturnNull", "CheckAnyArguments", "CheckAggrNoFinalize", "CheckFuncReturnBlob", "func_raiseexception", "finalize", "CheckAggrExceptionInStep", "CheckAggrCheckParamFloat", "func_returnblob", "CheckAggrCheckAggrSum", "getfunc", "suite", "func", "tearDown", "CheckParamFloat", "CheckAggrExceptionInFinalize", "CheckAggrCheckParamInt", "f", "CheckFuncDeterministicNotSupported", "func_islonglong", "func_returnlonglong", "CheckFuncErrorOnCreate", "step", "CheckAggrNoStep", "CheckParamString", "func_returnunicode", "authorizer_cb", "CheckAggrCheckParamsInt", "CheckFuncReturnLongLong", "test_table_access", "CheckParamLongLong"], "function_calls": ["isinstance", "len", "test", "str", "getfunc", "memoryview", "int", "type", "suite", "globals"], "class_names": ["AggrCheckType", "AggrCheckTypes", "FunctionTests", "AggrNoStep", "AggrExceptionInFinalize", "AggregateTests", "AggrExceptionInInit", "AuthorizerIllegalTypeTests", "AggrSum", "AggrExceptionInStep", "AuthorizerRaiseExceptionTests", "AuthorizerLargeIntegerTests", "AggrNoFinalize", "AuthorizerTests"], "class_method_calls": ["sqlite.DatabaseError", "sqlite.SQLITE_DENY", "unittest.mock", "self.assertEqual", "sqlite.NotSupportedError", "self.authorizer_cb", "runner.run", "cur.executemany", "cm.exception", "self.assertIn", "self.fail", "cur.execute", "unittest.TextTestRunner", "sqlite.connect", "self.assertRaises", "unittest.skipIf", "self.val", "unittest.makeSuite", "cur.fetchone", "self.con", "sqlite.SQLITE_SELECT", "sqlite.SQLITE_OK", "unittest.TestSuite", "mock.call_count", "unittest.TestCase", "sqlite.sqlite_version_info", "sqlite.OperationalError"]}, "sre_compile.py": {"libraries": ["sys", "_sre", "sre_constants.*", "sre_parse"], "function_names": ["_compile_charset", "print_2", "_optimize_charset", "_get_charset_prefix", "_simple", "_bytes_to_codes", "isstring", "_compile_info", "_mk_bitmap", "print_", "_compile", "_combine_flags", "_generate_overlap_table", "_hex_code", "_get_literal_prefix", "compile", "dis", "_get_iscased", "dis_", "_code"], "function_calls": ["min", "_compile_charset", "memoryview", "print_2", "_optimize_charset", "_get_charset_prefix", "_simple", "_bytes_to_codes", "isstring", "isinstance", "prefixappend", "_compile_info", "str", "tailappend", "tuple", "_len", "_mk_bitmap", "print_", "_compile", "iscased", "range", "emit", "_combine_flags", "list", "_generate_overlap_table", "ValueError", "fixup", "tolower", "set", "_hex_code", "_get_literal_prefix", "bytearray", "len", "charsetappend", "any", "dis", "chr", "_get_iscased", "bin", "error", "_int", "bytes", "dis_", "map", "_code", "print"], "class_names": [], "class_method_calls": ["bits.translate", "AT_MULTILINE.get", "groupindex.items", "sys.byteorder", "code.append", "_sre.MAGIC", "a.itemsize", "prefix.extend", "pattern.data", "sre_parse.parse", "AT_UNICODE.get", "charset.append", "labels.add", "out.append", "tail.append", "charmap.find", "_sre.compile", "_sre.unicode_tolower", "runs.append", "p.state", "_sre.ascii_tolower", "AT_LOCALE.get", "_sre.CODESIZE", "pattern.getwidth", "a.tolist", "p.data", "_sre.ascii_iscased", "_sre.unicode_iscased", "code.extend", "prefix.append", "sre_parse.TYPE_FLAGS", "x.to_bytes"]}, "sre_constants.py": {"libraries": ["_sre.MAXREPEAT", "_sre.MAXGROUPS"], "function_names": ["dump", "_makecodes", "__init__", "__new__", "__repr__"], "function_calls": ["isinstance", "super", "sorted", "dump", "_makecodes", "globals", "_NamedIntConstant", "open", "enumerate", "print"], "class_names": ["_NamedIntConstant", "error"], "class_method_calls": ["item.name", "names.strip", "self.lineno", "self.pos", "self.name", "f.write", "self.colno", "self.pattern", "pattern.count", "pattern.rfind", "self.msg"]}, "sre_parse.py": {"libraries": ["warnings", "unicodedata", "sre_constants.*"], "function_names": ["_parse_flags", "expand_template", "append", "checklookbehindgroup", "match", "groups", "__repr__", "_parse", "_escape", "checkgroup", "addgroup", "opengroup", "get", "__init__", "parse", "parse_template", "seek", "__len__", "_class_escape", "dump", "insert", "getwhile", "__next", "tell", "_parse_sub", "fix_flags", "_uniq", "__setitem__", "getwidth", "getuntil", "error", "__delitem__", "pos", "closegroup", "__getitem__"], "function_calls": ["_parse_flags", "min", "frozenset", "lappend", "subpatternappend", "Tokenizer", "_parse", "SubPattern", "repr", "isinstance", "_escape", "sourceget", "addgroup", "str", "IndexError", "_len", "AssertionError", "range", "setappend", "ValueError", "list", "_ord", "_class_escape", "sourcematch", "sget", "int", "_parse_sub", "OverflowError", "itemsappend", "fix_flags", "enumerate", "_uniq", "State", "len", "g", "max", "chr", "error", "ord", "print"], "class_names": ["SubPattern", "Tokenizer", "Verbose", "State"], "class_method_calls": ["self.lookbehindgroups", "self.state", "self.checkgroup", "state.groups", "source.next", "source.seek", "s.getuntil", "s.next", "items.append", "subpattern.append", "self.decoded_string", "item_no.dump", "err.msg", "literals.append", "source.match", "dict.fromkeys", "char.isalpha", "self.istext", "self.width", "s.match", "name.isidentifier", "av.getwidth", "s.encode", "self.data", "source.tell", "state.groupdict", "warnings.warn", "source.error", "self.error", "source.get", "self.index", "self.groupwidths", "source.istext", "source.getwhile", "empty.join", "self.groups", "p.state", "literal.append", "p.getwidth", "self.tell", "ESCAPES.get", "set.extend", "state.checklookbehindgroup", "a.dump", "CATEGORIES.get", "self.next", "item_yes.dump", "condname.isidentifier", "source.getuntil", "source.string", "state.str", "s.error", "self.string", "match.string", "state.opengroup", "self.flags", "self.__next", "set.append", "groups.append", "state.groupindex", "state.lookbehindgroups", "state.closegroup", "set.insert", "state.flags", "match.group", "state.checkgroup", "p.dump", "unicodedata.lookup", "s.get", "self.groupdict"]}, "ssl.py": {"libraries": ["socket.SOL_SOCKET", "enum.Enum", "_ssl.txt2obj", "_ssl.HAS_TLSv1_2", "_ssl.SSLSession", "socket.AF_INET", "warnings", "socket.SOCK_STREAM", "time.strptime", "_ssl.HAS_TLSv1_3", "base64", "_ssl.HAS_ALPN", "_ssl.HAS_NPN", "_ssl.SSLSyscallError", "socket.create_connection", "_ssl.RAND_bytes", "_ssl.RAND_status", "_ssl.HAS_SSLv3", "_ssl._DEFAULT_CIPHERS", "calendar.timegm", "socket", "os", "_ssl.enum_certificates", "_ssl.HAS_TLSv1", "_ssl.MemoryBIO", "_ssl.nid2obj", "socket.SO_TYPE", "_ssl.RAND_add", "_ssl.enum_crls", "_ssl", "_ssl.SSLCertVerificationError", "errno", "_ssl.HAS_TLSv1_1", "collections.namedtuple", "_ssl.RAND_egd", "_ssl.SSLEOFError", "enum.IntFlag", "_ssl.SSLWantReadError", "_ssl._OPENSSL_API_VERSION", "_ssl.OPENSSL_VERSION_INFO", "_ssl.OPENSSL_VERSION_NUMBER", "_ssl.HAS_SSLv2", "_ssl.OPENSSL_VERSION", "sys", "_ssl.RAND_pseudo_bytes", "_ssl.HAS_SNI", "_ssl.SSLError", "_ssl._SSLContext", "enum.IntEnum", "_ssl.SSLZeroReturnError", "_ssl.SSLWantWriteError", "_ssl.HAS_ECDH", "socket.socket"], "function_names": ["recv_into", "get_server_certificate", "options", "do_handshake", "version", "minimum_version", "getpeercert", "server_side", "_real_connect", "get_protocol_name", "set_servername_callback", "wrap_bio", "_real_close", "load_default_certs", "protocol", "recvmsg", "compression", "verify_mode", "server_hostname", "sendfile", "shutdown", "fromname", "shared_ciphers", "sendall", "get_default_verify_paths", "_create", "cipher", "_load_windows_store_certs", "unwrap", "__init__", "session_reused", "selected_npn_protocol", "connect", "create_default_context", "wrap_socket", "set_alpn_protocols", "maximum_version", "_create_unverified_context", "connect_ex", "accept", "_dnsname_match", "DER_cert_to_PEM_cert", "_msg_callback", "_check_connected", "sendto", "verify_flags", "sendmsg", "_inet_paton", "_checkClosed", "context", "get_channel_binding", "fromnid", "hostname_checks_common_name", "set_npn_protocols", "session", "match_hostname", "recvfrom_into", "shim_cb", "read", "_encode_hostname", "_ipaddress_match", "write", "send", "pending", "dup", "recv", "inner", "_sslcopydoc", "cert_time_to_seconds", "selected_alpn_protocol", "verify_client_post_handshake", "__new__", "recvmsg_into", "PEM_cert_to_DER_cert", "recvfrom"], "function_calls": ["DefaultVerifyPaths", "VerifyMode", "msg_enum", "getattr", "_create_stdlib_context", "memoryview", "_txt2obj", "timegm", "VerifyFlags", "_TLSContentType", "isinstance", "super", "server_name_callback", "str", "create_connection", "_SSLMethod", "SSLContext", "callback", "dict", "strptime", "_nid2obj", "range", "_dnsname_match", "DER_cert_to_PEM_cert", "ValueError", "enum_certificates", "_inet_paton", "CertificateError", "TLSVersion", "namedtuple", "SSLError", "_ipaddress_match", "Options", "hasattr", "bytearray", "len", "NotImplementedError", "callable", "bytes", "TypeError", "map"], "class_names": ["_ASN1Object", "TLSVersion", "SSLSocket", "_TLSAlertType", "SSLContext", "Purpose", "_TLSMessageType", "SSLObject", "_TLSContentType"], "class_method_calls": ["context.setter", "self._sslobj", "_socket.inet_ntoa", "self.suppress_ragged_eofs", "sock.proto", "e.errno", "_ssl.HAS_NPN", "self.close", "_socket.inet_pton", "_socket.AF_INET6", "maximum_version.setter", "notconn_pre_handshake_data_error.reason", "self.server_side", "context.keylog_filename", "context.load_default_certs", "sslsock.getpeercert", "context._wrap_bio", "_ssl.PROTO_TLSv1_3", "d.encode", "_IntFlag._convert_", "certs.extend", "Purpose.SERVER_AUTH", "protos.extend", "base64.standard_b64encode", "self.context", "context._encode_hostname", "self._sendfile_use_send", "self._connected", "Options.OP_NO_SSLv3", "_ssl.PROTO_TLSv1_2", "TLSVersion.SSLv3", "verify_mode.setter", "hostname_checks_common_name.setter", "func.__name__", "self._closed", "_TLSContentType.ALERT", "sock.gettimeout", "errno.EINVAL", "warnings.warn", "self.do_handshake_on_connect", "_ssl.PROTO_TLSv1", "self._checkClosed", "sock.detach", "sock.getsockopt", "context.load_verify_locations", "self.set_default_verify_paths", "hostname.decode", "_SSLMethod.PROTOCOL_SSLv23", "_ssl.HOSTFLAG_NEVER_CHECK_SUBJECT", "os.path", "self._context", "self._set_npn_protocols", "self.sni_callback", "self.load_verify_locations", "self.setblocking", "context.verify_mode", "_SSLMethod.__members__", "protos.append", "session.setter", "self.getpeername", "months.index", "dn.lower", "self._real_connect", "base64.decodebytes", "dn_remainder.lower", "_ssl.PROTO_MAXIMUM_SUPPORTED", "self.sslobject_class", "sys.platform", "sys.flags", "errno.ENOTCONN", "_TLSContentType.HEADER", "_SSLContext.__new__", "sock.fileno", "_ssl.HAS_ALPN", "sock.family", "hostname.partition", "_ssl.get_default_verify_paths", "pem_cert_string.strip", "name.startswith", "x.args", "hostname.lower", "self.options", "self.settimeout", "_ssl.PROTO_MINIMUM_SUPPORTED", "self.gettimeout", "dnsnames.append", "self.send", "SSLContext.sslsocket_class", "purpose.oid", "os.environ", "inner.user_function", "cert_ipaddress.rstrip", "context.set_ciphers", "self._session", "hostname_remainder.lower", "func.__doc__", "self._host_flags", "self._encode_hostname", "ss.append", "self.getblocking", "pem_cert_string.startswith", "_SSLMethod.PROTOCOL_TLS", "self._check_connected", "self.sslsocket_class", "cert.get", "hostname.encode", "minimum_version.setter", "notconn_pre_handshake_data_error.library", "options.setter", "sock.type", "verify_flags.setter", "self.read", "self._set_alpn_protocols", "self.do_handshake", "context.wrap_socket", "view.cast", "SSLContext.sslobject_class", "_msg_callback.setter", "_socket.inet_aton", "context.load_cert_chain", "_IntEnum._convert_", "_PROTOCOL_NAMES.get", "_ssl.PROTO_SSLv3", "_ssl.PROTO_TLSv1_1", "self._windows_cert_stores", "self.__class__", "cls.__new__", "self._load_windows_store_certs", "dn.count", "self.recv", "context.check_hostname", "self.server_hostname", "dn.partition"]}, "stat.py": {"libraries": ["_stat.*"], "function_names": ["S_ISPORT", "filemode", "S_ISLNK", "S_ISWHT", "S_ISFIFO", "S_ISSOCK", "S_IFMT", "S_ISDIR", "S_ISBLK", "S_IMODE", "S_ISCHR", "S_ISDOOR", "S_ISREG"], "function_calls": ["S_IFMT"], "class_names": [], "class_method_calls": ["perm.append"]}, "statistics.py": {"libraries": ["bisect.bisect_left", "random", "fractions.Fraction", "itertools.groupby", "decimal.Decimal", "math.tau", "operator.add", "operator.sub", "operator.truediv", "math.log", "_statistics._normal_dist_inv_cdf", "operator.mul", "math.exp", "bisect.bisect_right", "math.hypot", "math.erf", "numbers", "operator.itemgetter", "collections.Counter", "itertools.repeat", "doctest", "math.isclose", "math.fabs", "math", "math.sqrt", "math.fsum"], "function_names": ["mean", "_ss", "_fail_neg", "overlap", "__truediv__", "multimode", "stdev", "median_low", "__sub__", "assert_close", "__pos__", "__eq__", "__repr__", "geometric_mean", "variance", "quantiles", "inv_cdf", "cdf", "_sum", "pstdev", "__init__", "median", "__neg__", "median_grouped", "_find_rteq", "_find_lteq", "__add__", "samples", "_isfinite", "__mul__", "fmean", "_coerce", "_convert", "pvariance", "pdf", "from_samples", "_exact_ratio", "_normal_dist_inv_cdf", "__hash__", "count", "mode", "harmonic_mean", "median_high", "__rsub__"], "function_calls": ["mean", "exp", "_ss", "hypot", "_fail_neg", "sorted", "T", "cls", "itemgetter", "stdev", "erf", "assert_close", "gauss", "Fraction", "variance", "isinstance", "sqrt", "issubclass", "_sum", "iter", "NormalDist", "bisect_left", "isclose", "fsum", "fabs", "hash", "range", "ValueError", "list", "groupby", "_find_rteq", "Counter", "_find_lteq", "bisect_right", "StatisticsError", "next", "type", "zip", "func", "float", "enumerate", "_isfinite", "fmean", "_convert", "_coerce", "pvariance", "len", "_exact_ratio", "_normal_dist_inv_cdf", "partials_get", "count", "repeat", "sum", "TypeError", "map", "log", "print"], "class_names": ["NormalDist", "StatisticsError"], "class_method_calls": ["partials.items", "random.gauss", "var.sqrt", "x.as_integer_ratio", "result.append", "Y.variance", "x.denominator", "X.samples", "x1._mu", "X.cdf", "x2._mu", "x.is_finite", "func.__name__", "X._mu", "G1.stdev", "S.__name__", "Y._mu", "Y.samples", "x2._sigma", "partials.get", "numbers.Real", "math.isfinite", "random.Random", "g1.mean", "doctest.testmod", "self._mu", "g2.samples", "NormalDist.from_samples", "Y._sigma", "X._sigma", "T.__name__", "self._sigma", "self.inv_cdf", "Y.cdf", "G1.mean", "value.denominator", "value.numerator", "g1.stdev", "msg.format", "G2.stdev", "g1.samples", "x.numerator", "X.variance", "x1._sigma", "math.sqrt"]}, "string.py": {"libraries": ["collections.ChainMap", "_string", "re"], "function_names": ["safe_substitute", "format", "format_field", "capwords", "_invalid", "get_field", "substitute", "__init__", "parse", "convert", "check_unused_args", "_vformat", "convert_field", "vformat", "get_value"], "function_calls": ["ValueError", "isinstance", "len", "format", "super", "getattr", "str", "set", "ascii", "_ChainMap", "repr"], "class_names": ["Formatter", "_TemplateMetaclass", "Template"], "class_method_calls": ["_string.formatter_field_name_split", "self.template", "result.append", "self.format_field", "cls.braceidpattern", "cls.delimiter", "cls.idpattern", "self.convert_field", "cls.pattern", "self._vformat", "field_name.isdigit", "mo.group", "self.pattern", "_re.IGNORECASE", "_TemplateMetaclass.pattern", "self.check_unused_args", "_re.compile", "self.delimiter", "self.get_field", "_string.formatter_parser", "self.parse", "mo.start", "_re.VERBOSE", "x.capitalize", "self._invalid", "_re.escape", "used_args.add", "s.split", "self.get_value", "cls.flags", "self.vformat"]}, "stringprep.py": {"libraries": ["unicodedata.ucd_3_2_0"], "function_names": ["in_table_c22", "in_table_d1", "in_table_c8", "in_table_c11", "in_table_c12", "map_table_b2", "in_table_c5", "in_table_c3", "in_table_c11_c12", "in_table_c4", "in_table_c21_c22", "in_table_d2", "in_table_c6", "in_table_c7", "map_table_b3", "in_table_c21", "in_table_b1", "in_table_a1", "in_table_c9"], "function_calls": ["list", "set", "ord", "map_table_b3", "range"], "class_names": [], "class_method_calls": ["unicodedata.normalize", "b3_exceptions.get", "unicodedata.unidata_version", "code.lower", "unicodedata.bidirectional", "unicodedata.category"]}, "struct.py": {"libraries": ["_struct._clearcache", "_struct.*", "_struct.__doc__"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "sunau.py": {"libraries": ["warnings", "audioop", "builtins", "collections.namedtuple"], "function_names": ["_read_u32", "__exit__", "setnframes", "getframerate", "getfp", "getcompname", "setcomptype", "initfp", "_write_u32", "rewind", "__enter__", "readframes", "_write_header", "__init__", "getsampwidth", "_ensure_header_written", "getmarkers", "open", "getnframes", "setframerate", "getmark", "setsampwidth", "close", "__del__", "getcomptype", "tell", "openfp", "setpos", "getparams", "setnchannels", "setparams", "writeframesraw", "getnchannels", "_patchheader", "writeframes"], "function_calls": ["_read_u32", "Error", "memoryview", "_sunau_params", "Au_read", "isinstance", "_write_u32", "open", "Au_write", "range", "int", "namedtuple", "type", "OSError", "hasattr", "divmod", "len", "bytes", "ord"], "class_names": ["Au_write", "Au_read", "Error"], "class_method_calls": ["self.setcomptype", "self.writeframesraw", "file.read", "self._datalength", "self._info", "self._comptype", "self._encoding", "audioop.ulaw2lin", "self.initfp", "self._data_pos", "audioop.lin2ulaw", "self._nchannels", "self._hdr_size", "f.mode", "self.getnchannels", "self.close", "self.setnchannels", "warnings.warn", "self._framesize", "self.setnframes", "builtins.open", "self._nframes", "self._ensure_header_written", "self.getframerate", "file.tell", "self._soundpos", "self._patchheader", "self._datawritten", "file.close", "data.insert", "self._data_size", "self.getnframes", "self._opened", "self._sampwidth", "self._file", "self.getcompname", "self._write_header", "self._form_length_pos", "self.setframerate", "self.getsampwidth", "self.getcomptype", "self._nframeswritten", "file.write", "self.setsampwidth", "self._framerate"]}, "symbol.py": {"libraries": [], "function_names": [], "function_calls": ["list", "type", "globals"], "class_names": [], "class_method_calls": []}, "symtable.py": {"libraries": ["_symtable.LOCAL", "_symtable.FREE", "_symtable.SCOPE_OFF", "_symtable.GLOBAL_IMPLICIT", "_symtable.GLOBAL_EXPLICIT", "_symtable.USE", "weakref", "_symtable.DEF_PARAM", "os", "_symtable.DEF_NONLOCAL", "_symtable.DEF_GLOBAL", "_symtable.SCOPE_MASK", "_symtable.CELL", "_symtable.DEF_LOCAL", "_symtable.DEF_ANNOT", "sys", "_symtable", "_symtable.DEF_IMPORT", "_symtable.DEF_BOUND"], "function_names": ["get_nonlocals", "is_optimized", "get_frees", "is_imported", "has_children", "__check_children", "lookup", "__repr__", "symtable", "has_exec", "is_free", "is_local", "get_identifiers", "get_namespace", "get_name", "__call__", "__init__", "get_locals", "get_methods", "new", "is_nonlocal", "is_namespace", "is_global", "is_assigned", "get_type", "__idents_matching", "get_lineno", "get_id", "get_globals", "is_annotated", "is_parameter", "is_nested", "get_children", "get_symbols", "is_declared_global", "get_namespaces", "is_referenced", "get_parameters"], "function_calls": ["ValueError", "len", "_newSymbolTable", "Class", "SymbolTable", "tuple", "print", "open", "bool", "symtable", "Function", "Symbol", "test_func", "SymbolTableFactory"], "class_names": ["SymbolTable", "Function", "Symbol", "SymbolTableFactory", "Class"], "class_method_calls": ["self.__scope", "self._filename", "_symtable.symtable", "self.new", "table.type", "self.__methods", "self.__params", "self.__name", "self.__idents_matching", "self.__flags", "self.lookup", "_symtable.TYPE_CLASS", "_symtable.TYPE_FUNCTION", "info.is_namespace", "_symtable.USE", "mod.get_identifiers", "_symtable.TYPE_MODULE", "self.__namespaces", "f.read", "self.__locals", "self.__globals", "info.is_local", "weakref.WeakValueDictionary", "self._table", "self.__check_children", "self.__module_scope", "self._symbols", "self.__nonlocals", "self.get_identifiers", "mod.lookup", "os.path", "self.__frees", "self.__memo", "st.name", "self.__class__", "sys.argv"]}, "tabnanny.py": {"libraries": ["sys", "os", "getopt", "tokenize"], "function_names": ["check", "get_line", "not_less_witness", "less", "longest_run_of_spaces", "errprint", "get_lineno", "__init__", "equal", "get_msg", "main", "not_equal_witness", "indent_level", "format_witnesses", "process_tokens"], "function_calls": ["ValueError", "check", "len", "format_witnesses", "max", "str", "NannyNag", "errprint", "Whitespace", "tuple", "main", "print", "repr", "range", "process_tokens", "hasattr"], "class_names": ["NannyNag", "Whitespace"], "class_method_calls": ["other.is_simple", "tokenize.DEDENT", "other.longest_run_of_spaces", "other.norm", "self.lineno", "other.n", "self.line", "nag.get_lineno", "other.nt", "self.indent_level", "other.indent_level", "f.readline", "nag.get_line", "getopt.getopt", "self.norm", "a.append", "tokenize.INDENT", "self.is_simple", "self.raw", "self.nt", "self.n", "tokenize.generate_tokens", "tokenize.NL", "getopt.error", "tokenize.NEWLINE", "nag.get_msg", "os.path", "Whitespace.T", "sys.stderr", "self.longest_run_of_spaces", "os.listdir", "Whitespace.S", "sys.argv", "indents.append", "tokenize.open", "f.close", "tokenize.COMMENT", "self.msg", "tokenize.TokenError"]}, "tarfile.py": {"libraries": ["pwd", "struct", "warnings", "bz2", "io", "copy", "lzma.LZMAFile", "lzma.LZMAError", "bz2.BZ2File", "gzip.GzipFile", "os", "builtins.open", "re", "grp", "time", "shutil", "zlib", "stat", "argparse", "lzma", "sys"], "function_names": ["nts", "calc_chksums", "_check", "_proc_gnulong", "not_compressed", "_proc_sparse", "create_pax_global_header", "_block", "copyfileobj", "isdir", "__init__", "isfifo", "open", "is_tarfile", "getmembers", "islnk", "getcomptype", "__iter__", "_safe_print", "seekable", "makeunknown", "path", "fromtarfile", "makelink", "data_filter", "isfile", "utime", "makedir", "makefifo", "_apply_pax_info", "isdev", "_extract_one", "main", "_proc_pax", "_load", "extract", "writable", "replace", "__exit__", "xzopen", "gzopen", "makefile", "frombuf", "extractall", "_posix_split_name", "gettarinfo", "_proc_gnusparse_10", "_proc_builtin", "isblk", "chown", "list", "stn", "seek", "__del__", "_create_header", "extractfile", "tell", "create_pax_header", "makedev", "getmember", "_handle_nonfatal_error", "fully_trusted_filter", "itn", "_find_link_target", "_read", "chmod", "_create_gnu_long_header", "__repr__", "bz2open", "addfile", "issparse", "ischr", "_get_filter_function", "readinto", "taropen", "close", "__read", "_proc_member", "_handle_fatal_error", "tobuf", "_proc_gnusparse_00", "linkpath", "create_ustar_header", "_getmember", "_get_extract_tarinfo", "_extract_member", "getnames", "isreg", "issym", "readable", "__write", "_get_filtered_attrs", "_create_payload", "__enter__", "_decode_pax_field", "flush", "next", "_init_read_gz", "read", "get_info", "_create_pax_generic_header", "write", "_init_write_gz", "_proc_gnusparse_01", "_dbg", "tar_filter", "add", "create_gnu_header", "nti"], "function_calls": ["itn", "exception", "filter_function", "object", "min", "nts", "calc_chksums", "sorted", "_get_filtered_attrs", "SubsequentHeaderError", "getattr", "LinkOutsideDestinationError", "cls", "reversed", "_StreamProxy", "id", "TruncatedHeaderError", "KeyError", "copyfileobj", "isinstance", "EmptyHeaderError", "super", "str", "dict", "open", "ReadError", "range", "is_tarfile", "setattr", "bltn_open", "ValueError", "list", "stn", "InvalidHeaderError", "ExtractError", "int", "type", "zip", "AbsoluteLinkError", "_safe_print", "StreamError", "bool", "func", "EOFHeaderError", "OSError", "_LowLevelFile", "OutsideDestinationError", "hasattr", "BZ2File", "SpecialFileError", "divmod", "len", "GzipFile", "bytearray", "_Stream", "max", "LZMAFile", "AbsolutePathError", "CompressionError", "callable", "main", "bytes", "filter", "sum", "TypeError", "ord", "_FileInFile", "nti", "print"], "class_names": ["SubsequentHeaderError", "TarError", "LinkOutsideDestinationError", "_StreamProxy", "TruncatedHeaderError", "EmptyHeaderError", "FilterError", "ReadError", "TarFile", "ExtractError", "InvalidHeaderError", "AbsoluteLinkError", "HeaderError", "StreamError", "ExFileObject", "EOFHeaderError", "_LowLevelFile", "OutsideDestinationError", "SpecialFileError", "_Stream", "CompressionError", "AbsolutePathError", "TarInfo", "_FileInFile"], "class_method_calls": ["tarinfo.uname", "self._create_pax_generic_header", "os.O_RDONLY", "tarinfo.name", "pax_headers.get", "member.gname", "obj.linkname", "self.addfile", "self._apply_pax_info", "time.localtime", "os.sep", "os.open", "tarinfo.gid", "self.offset", "tarinfo.offset_data", "self._extract_one", "tarinfo.sparse", "next._block", "arcname.lstrip", "tarinfo.mtime", "self._proc_gnusparse_00", "statres.st_size", "fileobj.mode", "self._create_header", "self.create_ustar_header", "self.fd", "member.mode", "directories.append", "prefix.encode", "zlib.error", "os.path", "self.crc", "io.SEEK_END", "target.truncate", "group.add_argument", "self._handle_fatal_error", "self._proc_builtin", "s.find", "self._init_read_gz", "match.start", "os.read", "structs.append", "obj.gname", "value.encode", "name.startswith", "self._extract_member", "os.link", "target.seek", "os.makedev", "grp.getgrnam", "member.gid", "obj._proc_member", "os.listdir", "cls._create_header", "self._proc_gnulong", "stat.filemode", "source.seek", "statres.st_gid", "fileobj.tell", "fileobj.name", "cls._create_payload", "s.decode", "self.zlib", "result.name", "self.read", "s.insert", "targetpath.replace", "self._get_extract_tarinfo", "linkpath.setter", "self.offset_data", "self.errorlevel", "os.major", "stat.S_ISFIFO", "os.mkdir", "self.makelink", "os.write", "sys.stdout", "obj.offset", "next.size", "bz2.BZ2Compressor", "tarinfo.devminor", "self._mode", "self.fromtarfile", "sparse.append", "tarinfo.gname", "tarinfo.islnk", "self.getmember", "os.fstat", "tarinfo.mode", "fileobj.close", "self.dbuf", "members.index", "self.makeunknown", "lzma.LZMACompressor", "member.isdir", "stat.S_ISLNK", "next.offset_data", "lzma.LZMADecompressor", "self.fileobj", "self.type", "re.search", "cls.frombuf", "self.gettarinfo", "tarinfo.linkname", "zlib.crc32", "stat.S_ISCHR", "self.map", "unfiltered.name", "name.encode", "a.name", "os.curdir", "bz2.BZ2Decompressor", "keyword.encode", "self.utime", "obj.uid", "os.O_TRUNC", "tarinfo.devmajor", "parser.parse_args", "os.O_BINARY", "self.pax_headers", "member.path", "self._read", "self.create_gnu_header", "result.linkname", "os.geteuid", "obj.mode", "value.decode", "self.size", "t.append", "self.makefile", "tarinfo.ischr", "obj.name", "fileobj.getcomptype", "self.errors", "obj.gid", "value.rstrip", "self.encoding", "os.chmod", "self.linkname", "arcname.replace", "statres.st_uid", "self.fileobject", "stream.close", "self.ignore_zeros", "self._proc_gnusparse_01", "self.name", "self.extractfile", "next.isreg", "e.filename", "pwd.getpwnam", "match.end", "offsets.append", "args.create", "src.read", "self.__class__", "os.stat", "self.map_index", "member.name", "self.closed", "self.create_pax_header", "self._posix_split_name", "self.chksum", "tarinfo.isblk", "self.makedir", "self.comptype", "regex.match", "obj.chksum", "args.extract", "e.strerror", "self.add", "tarfile.encoding", "member.isreg", "s.strip", "grp.getgrgid", "tarfile.errors", "self.sparse", "os.O_WRONLY", "cls.taropen", "tf.list", "os.readlink", "path.setter", "self.uname", "statres.st_mtime", "stat.S_ISREG", "statres.st_rdev", "tarinfo.isdir", "obj.uname", "obj.mtime", "tarinfo.offset", "tarinfo.type", "self._proc_pax", "self.gname", "stat.S_IFBLK", "statres.st_ino", "self.uid", "self.tarinfo", "self.getmembers", "tar.getmembers", "self._getmember", "copy.copy", "tarinfo.tobuf", "argparse.ArgumentParser", "pax_headers.copy", "statres.st_dev", "tarinfo.size", "pax_headers.items", "self._check", "os.utime", "buf.split", "self.get_info", "tarinfo.issym", "self.extraction_filter", "stat.S_ISBLK", "next.sparse", "time.time", "self.__read", "member.uid", "os.chown", "parser.format_help", "dst.write", "self._sparse_structs", "tarinfo.tarfile", "member.offset", "match.group", "t._extfileobj", "obj.size", "self._path", "obj.type", "tarinfo.uid", "args.verbose", "TarFile.open", "self.buf", "self.pos", "parser.add_mutually_exclusive_group", "next.name", "pwd.getpwuid", "next._apply_pax_info", "stat.S_IFCHR", "self.members", "self.makedev", "io.SEEK_CUR", "os.name", "self._decode_pax_field", "obj.devminor", "self._loaded", "match.groups", "self.isreg", "parser.exit", "self.devminor", "next.offset", "os.mkfifo", "self.firstmember", "self.debug", "self.close", "self.dereference", "lzma.LZMAError", "cls.OPEN_METH", "tarfile.fileobj", "self._create_gnu_long_header", "parser.add_argument", "result.mode", "os.lchown", "statres.st_nlink", "self.format", "info.get", "os.close", "self.chmod", "self.next", "t.close", "sys.stderr", "io.SEEK_SET", "self.__write", "self._get_filter_function", "next.type", "member.linkname", "os.makedirs", "targetpath.rstrip", "os.symlink", "self.inodes", "self._proc_gnusparse_10", "s.encode", "result.uid", "mode.split", "tarinfo.isfifo", "self.devmajor", "self.position", "self.mode", "copy.deepcopy", "self._extfileobj", "self._dbg", "tf.extractall", "io.BufferedReader", "os.O_CREAT", "self._init_write_gz", "info.items", "obj._sparse_structs", "member.uname", "self._handle_nonfatal_error", "os.minor", "member.issym", "self._block", "result.uname", "self._load", "os.lstat", "self.makefifo", "numbytes.append", "obj.isdir", "args.filter", "directories.sort", "re.finditer", "self.bufsize", "self.exception", "self._find_link_target", "struct.unpack_from", "self._proc_sparse", "fileobj.fileno", "args.test", "statres.st_mode", "name.split", "self.mtime", "re.compile", "self.chown", "sys.getfilesystemencoding", "self.gid", "tf.add", "shutil.copyfileobj", "member.islnk", "obj.devmajor", "result.gid", "stat.S_ISDIR", "args.list", "result.mtime", "self.copybufsize", "member.replace", "tarinfo._link_target", "result.gname", "struct.pack", "tarfile.offset", "cls._create_pax_generic_header", "fileobj.seek", "os.unlink", "buf.count", "os.mknod", "self.cmp", "next.linkname", "tarinfo.isreg", "tarfile.pax_headers"]}, "telnetlib.py": {"libraries": ["_thread", "time.monotonic", "re", "sys", "socket", "selectors"], "function_names": ["listener", "msg", "read_eager", "test", "__exit__", "rawq_getchar", "read_until", "__enter__", "__init__", "read_some", "open", "process_rawq", "sock_avail", "fill_rawq", "read_very_eager", "read_lazy", "close", "__del__", "read_sb_data", "set_option_negotiation_callback", "write", "set_debuglevel", "read_all", "expect", "interact", "mt_interact", "get_socket", "fileno", "read_very_lazy"], "function_calls": ["Telnet", "len", "_TelnetSelector", "test", "max", "EOFError", "int", "bytes", "_time", "print", "bool", "ord", "range", "hasattr"], "class_names": ["Telnet"], "class_method_calls": ["sys.audit", "self.listener", "sys.platform", "selector.select", "self.sock_avail", "self.read_eager", "self.iacseq", "text.decode", "key.fileobj", "selectors.PollSelector", "self.open", "self.timeout", "buffer.replace", "sys.stdout", "selectors.SelectSelector", "self.close", "line.encode", "socket.create_connection", "self.sbdataq", "self.option_callback", "self.process_rawq", "self.irawq", "self.fill_rawq", "data.decode", "m.end", "self.eof", "self.debuglevel", "self.host", "tn.open", "_thread.start_new_thread", "selectors.EVENT_READ", "self.write", "self.rawq_getchar", "self.cookedq", "self.sb", "self.read_very_lazy", "sys.stdin", "socket.getservbyname", "socket._GLOBAL_DEFAULT_TIMEOUT", "self.sock", "self.mt_interact", "re.compile", "self.port", "tn.set_debuglevel", "sock.close", "sys.argv", "tn.interact", "selector.register", "self.rawq", "self.msg"]}, "tempfile.py": {"libraries": ["_thread", "io", "shutil", "warnings", "sys", "weakref", "random.Random", "os", "functools", "errno"], "function_names": ["__getattr__", "_check", "__exit__", "softspace", "_mkstemp_inner", "__repr__", "mkdtemp", "gettempprefixb", "mkstemp", "onerror", "_resetperms", "writelines", "gettempdir", "encoding", "__enter__", "mktemp", "_candidate_tempdir_list", "func_wrapper", "errors", "__init__", "_dont_follow_symlinks", "rollover", "readlines", "_infer_return_type", "_sanitize_params", "name", "_rmtree", "gettempprefix", "_get_default_tempdir", "close", "flush", "seek", "_cleanup", "__del__", "NamedTemporaryFile", "__iter__", "TemporaryFile", "newlines", "closed", "tell", "_exists", "__next__", "read", "write", "cleanup", "truncate", "rng", "isatty", "mode", "readline", "_get_candidate_names", "gettempdirb", "fileno"], "function_calls": ["getattr", "choose", "_mkstemp_inner", "_TemporaryFileWrapper", "_Random", "_TemporaryFileCloser", "mkdtemp", "_RandomNameSequence", "isinstance", "_resetperms", "issubclass", "gettempdir", "_candidate_tempdir_list", "output_type", "_dont_follow_symlinks", "_sanitize_params", "_infer_return_type", "range", "setattr", "ValueError", "gettempprefix", "_get_default_tempdir", "TemporaryFile", "next", "func", "_exists", "unlink", "FileExistsError", "hasattr", "FileNotFoundError", "_allocate_lock", "TypeError", "_get_candidate_names", "gettempdirb", "map"], "class_names": ["_RandomNameSequence", "TemporaryDirectory", "SpooledTemporaryFile", "_TemporaryFileWrapper", "_TemporaryFileCloser"], "class_method_calls": ["self.characters", "_os.O_NOFOLLOW", "self._closer", "func_wrapper._closer", "self.__dict__", "self.close_called", "_os.mkdir", "dirlist.append", "_os.fsencode", "dirlist.extend", "_os.path", "_os.chmod", "self._max_size", "_os.unlink", "_os.lstat", "_io.open", "_once_lock.release", "_io.BytesIO", "newfile.write", "_sys.platform", "_os.O_BINARY", "_os.chflags", "self.close", "file.getvalue", "self.name", "self.rollover", "self._check", "self._cleanup", "_os.O_TMPFILE", "fp.write", "_once_lock.acquire", "_os.O_CREAT", "self._finalizer", "_os.getpid", "_os.close", "_io.TextIOWrapper", "self.delete", "_os.access", "_os.getcwd", "_os.name", "_weakref.finalize", "cls._rmtree", "file.tell", "self._rng", "_os.O_TEMPORARY", "self.file", "_errno.EEXIST", "self._rmtree", "_shutil.rmtree", "newfile.seek", "newfile.buffer", "file.detach", "_thread.allocate_lock", "_os.curdir", "_os.supports_follow_symlinks", "_warnings.warn", "_sys.audit", "self._rolled", "_os.O_RDWR", "_functools.wraps", "_os.open", "_os.O_EXCL", "self._TemporaryFileArgs", "self._file", "_os.getenv", "self.cleanup", "_errno.ENOENT", "self.rng", "self.__class__", "_os.TMP_MAX", "file.write", "file.writelines", "self._rng_pid", "_os.W_OK"]}, "_test_multiprocessing.py": {"libraries": ["json", "multiprocessing.sharedctypes.Value", "random", "multiprocessing.managers.RemoteError", "unittest.mock", "struct", "warnings", "multiprocessing.heap", "subprocess", "ctypes.c_double", "multiprocessing.dummy", "test.support", "multiprocessing.resource_sharer", "array", "unittest", "io", "ctypes.Structure", "threading", "multiprocessing.process.parent_process", "signal", "queue", "multiprocessing.pool", "ctypes.c_longlong", "multiprocessing.pool.MaybeEncodingError", "multiprocessing.forkserver._forkserver", "weakref", "multiprocessing.connection.wait", "socket", "os", "multiprocessing.queues", "multiprocessing.resource_tracker", "multiprocessing.managers.BaseProxy", "logging", "itertools", "time", "gc", "operator", "msvcrt", "multiprocessing.connection", "multiprocessing.managers.BaseManager", "multiprocessing.managers", "multiprocessing.sharedctypes.copy", "errno", "glob", "multiprocessing.reduction", "ctypes.c_int", "multiprocessing.resource_tracker._resource_tracker", "sys", "pickle", "multiprocessing.shared_memory", "multiprocessing.util", "test.support.script_helper"], "function_names": ["test_daemon_argument", "_test_semaphore", "assertTimingAlmostEqual", "test_dont_merge", "_test_abort_f", "test_empty_iterable", "test_wait_socket_slow", "test_resource_tracker_reused", "_test_get", "_test_sleep", "_on_queue_feeder_error", "check_invariant", "_test_empty", "test_terminate", "common", "test_forkserver_sigint", "test_list_proxy_in_list", "__iter__", "test_dict_iter", "__next__", "test_strings", "test_wait_slow", "test_spawn_close", "test_rawvalue", "_check_context", "test_invalid_handles", "_test_process_mainthread_native_id", "mul", "test_timeout", "unpickleable_result", "_sleep_some", "test_barrier_10", "_putter", "test_map_chunksize", "test_stderr_flush", "test_apply", "test_parent_process", "test_action", "test_async", "test_wait_timeout", "is_alive", "test_finalize", "test_traceback", "f", "test_process", "_test_timeout", "_killer", "test_access", "test_pool_in_process", "__new__", "append", "get_module_names", "_test_create_grandchild_process", "_test_value", "test_task_done", "__reduce__", "_test_traceback", "test_rapid_restart", "test_imap_unordered_handle_iterable_exception", "test_shared_memory_across_processes", "test_current", "_test_timeout_f", "_test_closefds", "test_process_mainthread_native_id", "test_forkserver_sigkill", "test_abort_and_reset", "test_wrapped_exception", "test_dict_proxy_nested", "test_noforkbomb", "test_pickling", "test_notify", "latin", "test_release_task_refs", "_child_dont_merge", "test_thousand", "test_free_from_gc", "sqr", "test_fd_transfer", "make_finalizers", "baz", "test_shared_memory_ShareableList_pickling", "test_sentinel", "check_forkserver_death", "_test_waitfor_f", "pool_in_process", "test_heap", "_resource_unlink", "_listener", "test_empty", "test_map_async_callbacks", "_test_ignore_listener", "test_shared_memory_basics", "test_getobj_getlock", "_test_ignore", "func1", "test_queue_feeder_donot_stop_onexc", "assertReturnsIfImplemented", "test_sendbytes", "test_enter", "test_worker_finalization_via_atexit_handler_of_multiprocessing", "test_get_all", "_test_error_on_stdio_flush", "_test_condition", "test_context", "test_listener_client", "_test_close", "test_closed_queue_put_get_exceptions", "Pool", "_child_test_wait", "test_invalid_family", "_child_strings", "test_bounded_semaphore", "test_wait_result", "test_cpu_count", "_echo", "test_qsize", "_is_resource_tracker_reused", "test_wait", "test_lock", "test_notify_n", "test_wait_socket", "test_getobj_getlock_obj", "__del__", "test_synchronize", "_sleep_and_set_event", "_test_barrier", "_writefd", "test_imap_handle_iterable_exception", "test_make_pool", "tearDownModule", "func2", "test_enable_logging", "raising", "test_reset", "test_closefd", "test_unpickleable_result", "terminate", "test_answer_challenge_auth_failure", "record", "test_issue14725", "test_list_iter", "check_resource_tracker_death", "close", "test_ignore_listener", "setUpClass", "test_release_unused_processes", "task", "test_value", "test_shared_memory_ShareableList_basics", "test_copy", "initializer", "run_finalizers", "test_wait_integer", "test_many_processes", "identity", "stop", "test_wait_return", "join", "test_close", "close_queue", "_test_array", "test_sys_exit", "test_flushing", "send_bytes", "test_ignore", "test_issue16955", "test_invalid_family_win32", "recv_bytes", "test_pool", "wait_for_finished", "test_flags", "_test_process", "test_multiple_bind", "__init__", "test_imap_unordered", "child_access", "test_level", "test_large_fd_transfer", "test_preload_resources", "_test_event", "test_poll_eintr", "test_array", "get_queue", "test_lock_context", "test_starmap_async", "_test_dict", "wait_for_handle", "test_list", "test_map_unplicklable", "test_fork", "test_queue_feeder_on_queue_feeder_error", "_remote", "_test_action_f", "get_high_socket_fd", "test_abort", "test_starmap", "_test_child_fd_inflation", "test_connection", "_test_wait_for_threads", "_test_send_parent_process", "_test_task_done", "test_map_no_failfast", "_test_level", "test_barrier", "test_condition", "test_sharedctypes", "test_kill", "test_neg_timeout", "test_duplex_false", "cb", "test_shared_memory_SharedMemoryServer_ignores_sigint", "raise_large_valuerror", "test_recursion", "test_shared_memory_SharedMemoryManager_reuses_resource_tracker", "test_active_children", "test_async_timeout", "get_value", "_test_fork", "test_dict", "test_single_thread", "_new_shm_name", "queue_full", "do_finish", "test_waitfor", "_test_lock", "test_pool_initializer", "test_put", "errback", "run_threads", "_is_fd_assigned", "test_notify_all", "_test_waitfor_timeout_f", "test_semaphore", "exception_throwing_generator", "setUpModule", "test_thread_safety", "test_queue", "queue_empty", "test_resource_tracker_sigint", "flush", "_test_finalize", "_h", "finalize", "run", "test_remote", "test_mymanager_context", "tearDownClass", "_test_wait_result", "_double", "write", "multipass", "_test_put", "_test_queue", "_wait", "_test", "test_manager_initializer", "test_map_handle_iterable_exception", "install_tests_in_module_dict", "wait_for_started", "test_joinable_queue", "_kill_process", "test_map_async", "test_async_error_callback", "test_resource_tracker", "__getstate__", "child", "_this_sub_process", "test_abstract_socket", "test_error_on_stdio_flush_1", "test_resource_tracker_sigkill", "test_shared_memory_SharedMemoryManager_basics", "tearDown", "_test_stderr_flush", "_test_wrapped_exception", "signal_and_sleep", "_afunc", "_test_sentinel", "test_pool_worker_lifetime", "test_pool_worker_lifetime_early_close", "test_get", "join_process", "__call__", "test_resource_tracker_sigterm", "assertReachesEventually", "test_resource_warning", "_test_reset_f", "_test_default_timeout_f", "test_rawarray", "test_parent_process_attributes", "test_empty_string", "_child_boundaries", "check_enough_semaphores", "test_array_from_size", "DummyList", "run_worker", "setUp", "_test_thousand_f", "_test_namespace", "wait_proc_exit", "_test_wait_return_f", "test_imap", "_test_report_parent_status", "start", "check_context", "test_map", "test_queue_in_process", "__setstate__", "test_missing_fd_transfer", "_test_abort_and_reset_f", "test_error_on_stdio_flush_2", "test_namespace", "run_in_child", "test_set_get", "test_waitfor_timeout", "test_default_timeout", "test_deliver_challenge_auth_failure", "_test_rlock", "_test_recursion", "test_event", "test_subclassing", "cache", "handler", "_send_data_without_fd", "_test_pool", "test__all__", "test_no_import_lock_contention", "_test_list", "run_in_grandchild", "test_mymanager", "test_mymanager_context_prestarted", "test_wait_for_threads", "test_shared_memory_cleaned_after_process_termination", "test_child_fd_inflation", "_test_sys_exit", "test_import", "__len__", "test_boundaries", "submit", "g", "test_lose_target_ref", "_attach_existing_shmem_then_write", "_child_test_wait_socket", "test_rlock"], "function_calls": ["sorted", "getattr", "acquire", "DummyCallable", "KeyError", "MyManager", "copy", "__import__", "sorted_", "iter", "QueueManager", "_UpperCaser", "staticmethod", "CountedObject", "dict", "open", "setattr", "NotSerializable", "close_b", "AppendTrue", "int", "zip", "enumerate", "OSError", "len", "NotImplementedError", "wait", "globals", "join_process", "wait_for_handle", "poll", "Foo", "str", "wr", "pmap", "list", "TimingWrapper", "SafeQueue", "parent_process", "f", "psmap", "check_enough_semaphores", "SpecialIterable", "min", "all", "id", "isinstance", "tuple", "AssertionError", "range", "SayWhenError", "get_value", "property", "set", "_file_like", "type", "func", "hasattr", "queue_full", "any", "max", "_Foo", "QueueManager2", "bytes", "sum", "latin", "print", "sqr", "meth", "Value", "OptionalAttachSharedMemory", "RuntimeError", "issubclass", "super", "join", "exception_throwing_generator", "get", "A", "close_queue", "queue_empty", "Bunch", "ValueError", "_resource_unlink", "_FakeConnection", "_DummyList", "next", "bytearray", "chr", "papply", "_wait", "map"], "class_names": ["_TestValue", "_TestSubclassingProcess", "TestTimeouts", "FooBar", "TestInvalidFamily", "_TestFinalize", "TestStdinBadfiledescriptor", "TestPoolNotLeakOnFailure", "_TestPoll", "DummyCallable", "_TestLock", "ManagerMixin", "_TestQueue", "TestInvalidHandle", "_TestBarrier", "OptionalAttachSharedMemory", "_TestProcess", "MyManager", "_TestSharedMemory", "OtherTest", "_TestMyManager", "FailingForkProcess", "Foo", "_FakeConnection", "_TestPoolWorkerLifetime", "QueueManager", "_TestConnection", "_UpperCaser", "_TestLogging", "TestWait", "TestResourceTracker", "A", "CountedObject", "_TestManagerRestart", "Bunch", "SayWhenError", "_TestImportStar", "_TestSemaphore", "_TestListener", "TestNoForkBomb", "NotSerializable", "ProcessesMixin", "AppendTrue", "_TestListenerClient", "_TestPool", "TestInitializers", "_TestHeap", "_DummyList", "TimingWrapper", "_file_like", "_TestPicklingConnections", "TestIgnoreEINTR", "_TestSharedCTypes", "TestStartMethod", "TestSimpleQueue", "TestCloseFds", "SafeQueue", "Temp", "TestSyncManagerTypes", "TestForkAwareThreadLock", "IteratorProxy", "_TestRemoteManager", "_TestContainers", "TestFlags", "_TestEvent", "BaseTestCase", "_TestCondition", "_Foo", "_TestPollEintr", "_TestArray", "QueueManager2", "_TestPoolWorkerErrors", "BaseMixin", "ThreadsMixin", "SpecialIterable", "MiscTestCase"], "class_method_calls": ["self._test_recursion", "c.send", "current.pid", "self._test_put", "self.RLock", "self.BoundedSemaphore", "sem.acquire", "l.getsockname", "d.values", "bar.f", "multiprocessing.dummy", "e.errno", "b.wait", "obj.is_set", "local_sms.buf", "current.daemon", "uppercaser.join", "sys.getswitchinterval", "queue.get_nowait", "heap._len_to_seq", "sl_tethered.shm", "namespace.Event", "foo.x", "manager.get_server", "os.open", "self._test_wait_result", "woken.release", "sms_duo.unlink", "results2.append", "multiprocessing.managers", "child_can_start.wait", "p.terminate", "self._test_timeout_f", "z.value", "queue.put", "self.on_queue_feeder_error_was_called", "larger_sl.shm", "self._test_value", "content.rstrip", "multiprocessing.Queue", "obj.pop", "sms.close", "resource_sharer.stop", "val1.get_lock", "lp.join", "blocks.pop", "sl_copy.shm", "current.ident", "sv.value", "manager.get_queue", "a.closed", "CountedObject.n_instances", "not_serializable_obj.reduce_was_called", "b.extend", "also_sms.buf", "reduction.HAVE_SEND_HANDLE", "conn.send_bytes", "readers.remove", "multiprocessing.pool", "self._finalizer", "p.start", "self.assertNotIn", "self.old_heap", "wrapped.exc", "reader.writable", "sleeping.release", "multiprocessing.cpu_count", "self._test_event", "json.dumps", "self.subTest", "b.send_bytes", "heap._n_mallocs", "lconn.recv", "signal.SIGUSR1", "self._is_fd_assigned", "random.shuffle", "self._test_error_on_stdio_flush", "self._writefd", "obj.count", "array.array", "errno.EADDRINUSE", "self.TYPE", "os.path", "heap._arenas", "res.get", "child_can_start.set", "n._hidden", "evt.is_set", "p.authkey", "it.__next__", "pool._state", "gc.collect", "proc.join", "multiprocessing.Event", "self.dict", "d.recv", "self.wait_proc_exit", "bar._h", "val1.get_obj", "self.result", "multiprocessing.Value", "new_conn.close", "all.append", "obj.full", "self.parent_process", "self.finished", "proc2.exitcode", "cond.wait_for", "messages.sort", "process.is_alive", "cls.Pool", "m.shutdown", "self._is_resource_tracker_reused", "readers.append", "cls.TYPE", "self._test_lock", "self._child_strings", "support.PIPE_MAX_SIZE", "foo.f", "mod.__all__", "ns.test", "poll.elapsed", "client.sendall", "bar._callmethod", "reader.send", "new_conn.recv", "evt.wait", "signal.signal", "call_args.append", "child_conn.close", "sl.format", "self.elapsed", "manager.shutdown", "self.Lock", "self.Queue", "cond.wait", "self._lock", "self._test_wait_for_threads", "self.CONN_MAX_SIZE", "heap._DISCARD_FREE_SPACE_LARGER_THAN", "b.recv", "self.barrier", "self.proc", "e.args", "self.run_threads", "Temp.__qualname__", "pyqueue.Empty", "multiprocessing.set_forkserver_preload", "barrier.n_waiting", "sem.release", "self._wrapper", "acquire.elapsed", "support.check__all__", "q.put", "arr1.get_lock", "self.assertIsNotNone", "self.get_module_names", "get.elapsed", "cls.run_in_grandchild", "self.assertAlmostEqual", "empty_sl.count", "proc.exitcode", "proc2.start", "all.sort", "heap._lock", "n.name", "writer.close", "p.stdout", "srvr.address", "rconn.close", "queue.put_nowait", "self.run_worker", "self.fail", "srvr.listener", "self.started", "self.assertTimingAlmostEqual", "the_warn.category", "o.y", "expected_values.remove", "rconn.poll", "m.start", "d.clear", "support.reap_children", "self.codes_values", "also_sms.close", "conn.readable", "s.sendall", "self._test_level", "gc.set_threshold", "cond.notify_all", "self._test_wrapped_exception", "multiprocessing.set_start_method", "self.test_sharedctypes", "obj.items", "support.skip_if_broken_multiprocessing_synchronize", "self._new_shm_name", "p.sentinel", "get_nowait.elapsed", "socket.socket", "self.manager_class", "util.get_temp_dir", "self._test_list", "val2.get_obj", "writer.poll", "os.write", "sys.executable", "q.get", "gc.enable", "lconn.send", "ctx.Process", "_forkserver.ensure_running", "wconn.send", "util.Finalize", "exc.args", "self._putter", "current.exitcode", "warnings.catch_warnings", "self.assertRaises", "r.poll", "os.fstat", "sms_uno.size", "obj.values", "event.set", "msvcrt.get_osfhandle", "foo.z", "os.O_RDWR", "multiprocessing.TimeoutError", "self.test_array", "manager2.get_queue", "obj.release", "multiprocessing.Condition", "r.get", "result.append", "sio.getvalue", "o.wait", "self.manager", "unittest.mock", "c.poll", "wait.elapsed", "logger.getEffectiveLevel", "Temp.__name__", "self.current_process", "b.append", "conn.recv_bytes", "os.getcwd", "parent_can_continue.set", "self._test_task_done", "o.value", "io.StringIO", "a.append", "glob.glob", "socket.create_server", "o.release", "p.apply", "self.assertRegex", "multiprocessing.get_start_method", "obj.qsize", "o.append", "self._test_child_fd_inflation", "multiprocessing.connection", "multiprocessing.Pipe", "root_logger.level", "threading.BrokenBarrierError", "self._test_wait_return_f", "lock.acquire", "self.assertIsNone", "self._killer", "pyqueue.Full", "self.N", "pool.terminate", "self._test_array", "a.send_bytes", "self.child_conn", "sms.unlink", "killer.join", "b.recv_bytes", "listener.accept", "parent.close", "cls.current_process", "multiprocessing.Pool", "_resource_tracker._check_alive", "the_warn.message", "self._test_barrier", "multiprocessing.current_process", "time.monotonic", "weakref.finalize", "self.assertLess", "self._test_dict", "modules.remove", "buffer.itemsize", "ctx.set_start_method", "self._test_namespace", "self.assertLessEqual", "self._test_empty", "obj.sort", "conn.poll", "ctx.Semaphore", "c.wait", "itertools.starmap", "p.daemon", "f.readline", "self.addCleanup", "l.accept", "o.set", "cls.child", "smm1.shutdown", "self._test_semaphore", "self.__setstate__", "sms_uno.close", "b.send", "QueueManager.register", "self.check_forkserver_death", "arr1.get_obj", "p.apply_async", "obj.copy", "exc.__cause__", "rconn.recv", "deserialized_sl.shm", "util._run_finalizers", "cls.codes_values", "smm1.ShareableList", "client.send", "evt.set", "threads.append", "multiprocessing.util", "signal.SIGTERM", "proc.daemon", "cls.values", "os.dup", "QueueManager2.register", "self._test_abort_and_reset_f", "blocks.append", "obj.index", "smm.start", "os.waitpid", "p.wait", "stream.close", "sms_uno.unlink", "r.close", "self._test_pool", "self.test_wait_socket", "reader.recv", "shared_memory.ShareableList", "w.send_bytes", "o.full", "self._child_boundaries", "rconn0.close", "Temp.__module__", "arr3.get_lock", "d.items", "self.name", "child.send", "self.Semaphore", "results.count", "cond._sleeping_count", "foo._callmethod", "cls._is_fd_assigned", "f.read", "self.exitcode", "exitcodes.append", "empty_sl.shm", "arr3.get_obj", "o.get", "shared_memory._USE_POSIX", "sys.excepthook", "_forkserver._forkserver_pid", "self._value", "b.wait_for_finished", "event.clear", "obj.clear", "f1.getvalue", "self._kill_process", "obj.acquire", "proc1.daemon", "time.sleep", "same_sms.size", "p.name", "s.close", "multiprocessing.get_all_start_methods", "multiprocessing.process", "self.check_invariant", "self.skipTest", "self._test_waitfor_f", "msvcrt.open_osfhandle", "socket.setdefaulttimeout", "self.get_value", "smm.shutdown", "obj.parties", "support.join_thread", "self._delegate", "ok_if_exists_sms.size", "sl_copy.format", "empty_sl.format", "local_sms.close", "self._check_context", "threading._HAVE_THREAD_NATIVE_ID", "procs.append", "unittest.skipUnless", "self.test_queue", "y.value", "os.getpid", "self.assertNotEqual", "struct.calcsize", "support.gc_collect", "self.ns", "queue.close", "self.assertGreaterEqual", "self.assertIs", "self.count", "logger.info", "t.start", "nonexisting_sms.unlink", "val3.get_obj", "self.func", "state.value", "a.recv", "self.child_access", "b.closed", "self._child_dont_merge", "o.put", "smm2.SharedMemory", "self.f", "multiprocessing.RawValue", "self.cache", "self.Event", "foo.g", "self._send_data_without_fd", "p.imap", "self.assertReturnsIfImplemented", "os.O_WRONLY", "p.exitcode", "self._test_reset_f", "r.recv", "glob.escape", "gc.disable", "obj.x", "self._child_test_wait_socket", "cls._test_recursion", "bar.y", "r.recv_bytes", "random.random", "self.assertTrue", "q.full", "multiprocessing.__all__", "flike.write", "self._test_waitfor_timeout_f", "m.join", "break_std_streams.items", "errno.ENOENT", "self.signal_and_sleep", "join.elapsed", "p.map_async", "bar.z", "heap._n_frees", "self.reduce_was_called", "unittest.SkipTest", "manager.connect", "conn._handle", "self.connection", "self.test_wait", "sms_duo.close", "util._exit_function", "cond.acquire", "support.print_warning", "proc2.daemon", "self.test_semaphore", "signal.SIGALRM", "self.obj", "self._lengthbuf", "socket.getdefaulttimeout", "self.list", "wrapped.value", "msg.upper", "cls.N", "writer.writable", "self._test_rlock", "queue.get", "namespace.Process", "sl.index", "out.rstrip", "self.child", "multiprocessing.Barrier", "MyManager.register", "manager.baz", "barrier.wait", "random.lognormvariate", "root_logger.setLevel", "logger.debug", "self._listener", "client.recv", "pool.join", "sleeping.acquire", "sys.platform", "heap._allocated_blocks", "self.Barrier", "self.check_context", "not_serializable_obj.on_queue_feeder_error_was_called", "util.ForkAwareThreadLock", "ok_if_exists_sms.close", "multiprocessing.BufferTooShort", "test.support", "e.winerror", "threading.main_thread", "self._test_stderr_flush", "sl.shm", "f.write", "pool.map", "self.args", "uppercaser.start", "self.JoinableQueue", "manager2.connect", "multiprocessing.RawArray", "reader.readable", "cond._woken_count", "multiprocessing.active_children", "self._test_closefds", "reader.close", "lock.release", "signal.alarm", "self._test_queue", "barrier.reset", "random.getrandbits", "arr2.get_lock", "obj.on_queue_feeder_error_was_called", "subProc.daemon", "os.sysconf", "conn.recv", "rp.join", "a.poll", "c.close", "x.value", "evt.clear", "random.randint", "conn.recv_bytes_into", "l.close", "bar.x", "multiprocessing.Lock", "forked_processes.append", "os.kill", "smm2.ShareableList", "multiprocessing.BoundedSemaphore", "self.DummyList", "self._remote", "sys.setswitchinterval", "os.urandom", "writer.send", "queue.join", "results.append", "evt2.is_set", "parent.recv", "self._can_exit", "obj.reverse", "put_nowait.elapsed", "_resource_tracker._pid", "cond._wait_semaphore", "self.assertRaisesRegex", "self.registry_backup", "resource_tracker._CLEANUP_FUNCS", "modules.append", "self.Process", "smm._process", "self.assertIn", "current.is_alive", "t.join", "self.mgr", "multiprocessing.Manager", "same_sms.close", "cause.tb", "data.decode", "self._test_create_grandchild_process", "smm1.SharedMemory", "pyqueue.Queue", "val2.get_lock", "cls.n_instances", "cond.release", "unittest.skipIf", "a.close", "writer.recv", "barrier.broken", "sys.exc_info", "w.close", "q.task_done", "conn.close", "self._test_sys_exit", "obj.value", "self.Value", "b.close", "self._Semaphore__value", "child.close", "out.decode", "self._test_abort_f", "o.is_set", "cls.manager", "a.recv_bytes", "rp.daemon", "self.pool", "self.defaultTimeout", "pickle.dumps", "os.name", "listener.address", "obj.wait", "threading.Thread", "_resource_tracker.ensure_running", "obj.get", "os.pipe", "self.RawValue", "rconn.send", "self._test_process_mainthread_native_id", "manager.Bar", "self.assertEqual", "socket.SOCK_STREAM", "self._test", "lconn.close", "c.notify", "self.close", "json.loads", "conn.writable", "foo.y", "n.job", "self.Namespace", "self._double", "cls.pool", "threading.ThreadError", "self._test_timeout", "self._test_sentinel", "conn.fileno", "cls.Process", "s.upper", "cls.defaultTimeout", "os.close", "current.name", "support.check_warnings", "manager.address", "self._test_sleep", "cmd.format", "lp.daemon", "writer.readable", "ctx.get_start_method", "namespace.DummyList", "put.elapsed", "p.pid", "sys.stderr", "self.test_barrier", "self._test_finalize", "sms.buf", "multiprocessing.AuthenticationError", "current.authkey", "obj.keys", "self.check_resource_tracker_death", "signal.SIGKILL", "proc0.daemon", "self._test_send_parent_process", "self._test_thousand_f", "self.assertIsInstance", "p._repopulate_pool", "queue.empty", "multiprocessing.heap", "d.copy", "self.Pool", "client.connect", "q.close", "smm1.start", "b.buddy", "p.close", "type_.capitalize", "l.address", "self._test_traceback", "queue.join_thread", "multiprocessing.Array", "self._test_action_f", "reduction.recv_handle", "string.value", "s.encode", "multiprocessing.RLock", "self._test_default_timeout_f", "manager.start", "multiprocessing.get_logger", "logging.NOTSET", "subprocess.Popen", "errno.EINVAL", "socket.fromfd", "util.SUBWARNING", "val3.get_lock", "self._callmethod", "multiprocessing.get_context", "client.close", "dic.values", "random.randrange", "signal.SIGINT", "multiprocessing.JoinableQueue", "self.Pipe", "proc.start", "pickle.loads", "empty_sl.index", "multiprocessing.Semaphore", "proc2.join", "self._sleep_and_set_event", "self._cache", "flike.flush", "w.pid", "os.O_CREAT", "operator.attrgetter", "self._pid", "subProc.join", "s.connect", "util._afterfork_registry", "unittest.TestCase", "self.assertFalse", "obj.reset", "rp.start", "obj.y", "local_globs.items", "self.state", "heap._pending_free_blocks", "sys.flags", "lconn0.close", "obj.popitem", "w.send", "ctx.Pipe", "multiprocessing.SimpleQueue", "self._test_ignore_listener", "success.value", "o.x", "os.dup2", "to_close.append", "event.is_set", "threading._dangling", "self.Array", "sms.size", "err.decode", "lp.start", "buf.append", "self.common", "multiprocessing.queues", "self.multipass", "multiprocessing.Process", "p.map", "warnings.simplefilter", "barrier.parties", "gc.get_threshold", "gc.isenabled", "pool.close", "shared_memory.SharedMemory", "subprocess.PIPE", "parent_can_continue.wait", "uppercaser.stop", "self.test_value", "self.assertGreater", "obj.empty", "manager._process", "barrier.abort", "woken.acquire", "cls._test_report_parent_status", "self.active_children", "p.stderr", "p.join", "support.SOCK_MAX_SIZE", "self._test_ignore", "p.imap_unordered", "util.abstract_sockets_supported", "multiprocessing.__file__", "self._test_fork", "messages.append", "self.task", "arr2.get_obj", "uppercaser.daemon", "a.buddy", "self.assertReachesEventually", "socket.AF_INET", "event.wait", "sys.modules", "self._test_condition", "self._child_test_wait", "self._sleep_some", "barrier2.wait", "t.daemon", "d.keys", "sys.exit", "logging.getLogger", "multiprocessing.parent_process", "self.parent_conn", "cls.dangling", "conn.send", "smm.ShareableList", "self.get_high_socket_fd", "self._attach_existing_shmem_then_write", "cond.notify", "base.ALLOWED_TYPES", "self.RawArray", "q.empty", "self._echo", "p.is_alive", "self.n", "killer.start", "a.send", "self._test_close", "p._pool", "cls.CONN_MAX_SIZE", "results1.append", "weakref.ref", "os.O_EXCL", "self.ref", "errno.EBADF", "w.is_alive", "cls.connection", "sl.count", "ctx.get_context", "os.unlink", "subprocess.check_output", "sms.name", "o.empty", "uppercaser.submit", "obj.set", "q.qsize", "subProc.start", "util._finalizer_registry", "object.__new__", "self._test_get", "results3.append", "logger.setLevel", "os._exit", "f.fileno", "reduction.send_handle", "doppleganger_shm0.buf", "arena.size", "self.Condition", "manager.Foo"]}, "ann_module.py": {"libraries": ["typing.Optional", "types.new_class", "functools.wraps", "typing.Tuple"], "function_names": ["bar", "__init__", "dec", "__new__", "foo", "wrapper"], "function_calls": ["super", "bar", "wraps", "new_class", "func"], "class_names": ["F", "C", "Y", "M", "Meta", "D", "S"], "class_method_calls": []}, "ann_module2.py": {"libraries": ["typing.no_type_check", "typing.ClassVar"], "function_names": ["__init__", "meth", "f"], "function_calls": ["CV", "object", "C", "f"], "class_names": ["CV", "NTC", "C"], "class_method_calls": ["CV.var", "c.new_attr", "self.x"]}, "ann_module3.py": {"libraries": [], "function_names": ["f_bad_ann", "g_bad_ann", "__init__"], "function_calls": [], "class_names": ["D_bad_ann", "C_OK"], "class_method_calls": ["sfel.y", "no_such_name.attr", "self.x"]}, "audiotests.py": {"libraries": ["test.support.TESTFN", "io", "test.support.findfile", "test.support.unlink", "unittest.mock", "pickle", "array"], "function_names": ["create_file", "test_write_array", "setUp", "test_write_params", "test_context_manager_with_filename", "test_read_not_from_start", "check_file", "test_openfp_deprecated", "test_unseekable_incompleted_write", "test_close", "test_multiple_writes", "test_overflowed_write", "test_unseekable_write", "test_incompleted_write", "test_write_bytearray", "test_unseekable_read", "seek", "test_context_manager_with_open_file", "check_params", "setUpClass", "test_write_memoryview", "tell", "test_write", "tearDown", "test_write_context_manager_calls_close", "test_copy", "test_unseekable_overflowed_write", "test_read_params", "test_read"], "function_calls": ["bytearray", "findfile", "memoryview", "UnseekableIO", "open", "unlink", "range"], "class_names": ["AudioTests", "AudioMiscTests", "AudioTestsWithSourceFile", "AudioWriteTests", "UnseekableIO"], "class_method_calls": ["f.setsampwidth", "self.nchannels", "f.setcomptype", "params.nchannels", "self.check_params", "fout.getparams", "f.rewind", "self.assertEqual", "params.nframes", "self.close_fd", "fout.getnframes", "fout.writeframes", "f.getframerate", "self.sndfilepath", "f.getcomptype", "f.getparams", "f.setnframes", "self.comptype", "self.create_file", "self.check_file", "f.read", "io.FileIO", "self.frames", "f.getnchannels", "testfile.closed", "self.assertRaises", "cls.sndfilepath", "self.framerate", "f.getsampwidth", "self.f", "self.assertWarns", "f.tell", "params.comptype", "f.writeframes", "fout.close", "self.compname", "f.getfp", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "self.assertIsNone", "fout.readframes", "mock.patch", "array.array", "self.fout", "fout.setparams", "io.UnsupportedOperation", "f.getnframes", "f.readframes", "testfile.read", "f.setpos", "params.compname", "cls.sndfilename", "f.setframerate", "testfile.write", "params.sampwidth", "params.framerate", "self.sampwidth", "self.nframes", "pickle.dumps", "mock_open.assert_called_with", "f.getcompname", "f.close", "f.setnchannels", "self.assertFalse", "self.sndfilenframes", "self.module"]}, "audit-tests.py": {"libraries": ["mmap", "winreg.HKEY_LOCAL_MACHINE", "gc", "_testcapi.write_unraisable_exc", "contextlib", "winreg.EnumKey", "winreg.OpenKey", "ssl", "sys", "pickle", "test.support.suppress_msvcrt_asserts", "socket", "winreg.CloseKey"], "function_names": ["__reduce_ex__", "test_unraisablehook", "__exit__", "test_cantrace", "test_winreg", "hook", "unraisablehook", "test_open", "test_monkeypatch", "__enter__", "test_block_add_hook", "__init__", "__call__", "test_not_in_gc", "excepthook", "seen_events", "trace", "close", "assertEqual", "assertRaises", "assertNotIn", "test_block_add_hook_baseexception", "test_pickle", "assertIn", "test_excepthook", "assertSequenceEqual", "test_basic", "test_socket", "test_mmap", "test_gc"], "function_calls": ["object", "fn", "CloseKey", "globals", "EnumKey", "RuntimeError", "repr", "isinstance", "A", "write_unraisable_exc", "AssertionError", "ValueError", "assertEqual", "TestHook", "assertRaises", "assertNotIn", "assertIn", "zip", "type", "suppress_msvcrt_asserts", "OpenKey", "eval", "PicklePrint", "len", "any", "assertSequenceEqual", "TypeError", "print"], "class_names": ["PicklePrint", "TestHook", "B", "C", "A"], "class_method_calls": ["sys.audit", "sock.bind", "C.new_attr", "self.closed", "B.__init__", "sys.executable", "self.exc_type", "socket.AF_INET", "self.raise_on_events", "socket.SOCK_STREAM", "hook2.seen_events", "C.__init__", "mmap.mmap", "sys.unraisablehook", "self.close", "C.__name__", "hook.__cantrace__", "type.__dict__", "gc.get_referrers", "event.startswith", "self.seen", "gc.get_referents", "hook1.seen_events", "sys.addaudithook", "sys.excepthook", "C.__bases__", "a.__class__", "frame.f_code", "socket.gethostname", "gc.get_objects", "contextlib.contextmanager", "pickle.loads", "traced.append", "ssl.create_default_context", "hook.seen", "TestHook.__call__", "sys.settrace", "pickle.dumps", "sock.close", "sys.argv", "k.Detach", "sys.__excepthook__", "socket.socket"]}, "autotest.py": {"libraries": ["test.libregrtest.main"], "function_names": [], "function_calls": ["main"], "class_names": [], "class_method_calls": []}, "bad_coding.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "bad_coding2.py": null, "bad_getattr.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "bad_getattr2.py": {"libraries": [], "function_names": ["__getattr__", "__dir__"], "function_calls": [], "class_names": [], "class_method_calls": []}, "bad_getattr3.py": {"libraries": [], "function_names": ["__getattr__"], "function_calls": ["globals"], "class_names": [], "class_method_calls": []}, "badsyntax_3131.py": null, "badsyntax_future10.py": {"libraries": ["__future__.print_function", "__future__.absolute_import"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "badsyntax_future3.py": {"libraries": ["__future__.nested_scopes", "__future__.rested_snopes"], "function_names": ["f", "g"], "function_calls": ["f"], "class_names": [], "class_method_calls": []}, "badsyntax_future4.py": {"libraries": ["__future__.nested_scopes", "__future__"], "function_names": ["f", "g"], "function_calls": ["f"], "class_names": [], "class_method_calls": []}, "badsyntax_future5.py": {"libraries": ["__future__.nested_scopes", "foo"], "function_names": ["f", "g"], "function_calls": ["f"], "class_names": [], "class_method_calls": []}, "badsyntax_future6.py": {"libraries": ["__future__.nested_scopes"], "function_names": ["f", "g"], "function_calls": ["f"], "class_names": [], "class_method_calls": []}, "badsyntax_future7.py": {"libraries": ["__future__.nested_scopes", "string"], "function_names": ["f", "g"], "function_calls": ["f"], "class_names": [], "class_method_calls": []}, "badsyntax_future8.py": {"libraries": ["__future__.*"], "function_names": ["f", "g"], "function_calls": ["f", "print"], "class_names": [], "class_method_calls": []}, "badsyntax_future9.py": {"libraries": ["__future__.nested_scopes", "__future__.braces"], "function_names": ["f", "g"], "function_calls": ["f", "print"], "class_names": [], "class_method_calls": []}, "badsyntax_pep3120.py": {"libraries": [], "function_names": [], "function_calls": ["print"], "class_names": [], "class_method_calls": []}, "bisect_cmd.py": {"libraries": ["os.path", "time", "datetime", "random", "argparse", "sys", "tempfile", "subprocess", "math"], "function_names": ["run_tests", "write_output", "format_shell_args", "main", "list_cases", "parse_args", "write_tests"], "function_calls": ["run_tests", "len", "max", "write_output", "format_shell_args", "main", "open", "list_cases", "parse_args", "write_tests", "print"], "class_names": [], "class_method_calls": ["time.monotonic", "argparse.ArgumentParser", "fp.flush", "line.strip", "tempfile.mktemp", "sys.executable", "args.output", "args.input", "datetime.timedelta", "sys.exit", "parser.add_argument", "math.ceil", "random.sample", "args.test_args", "parser.parse_known_args", "subprocess.run", "cmd.extend", "subprocess.PIPE", "os.unlink", "proc.returncode", "proc.stdout", "os.path", "args.max_tests", "args.max_iter"]}, "bytecode_helper.py": {"libraries": ["unittest", "io", "dis"], "function_names": ["get_disassembly_as_string", "assertNotInBytecode", "assertInBytecode"], "function_calls": ["object"], "class_names": ["BytecodeTestCase"], "class_method_calls": ["self.get_disassembly_as_string", "instr.opname", "dis.dis", "instr.argval", "dis.get_instructions", "s.getvalue", "self.fail", "io.StringIO", "unittest.TestCase"]}, "coding20731.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "bogus_code_obj.py": {"libraries": ["types"], "function_names": [], "function_calls": ["exec"], "class_names": [], "class_method_calls": ["types.CodeType"]}, "gc_inspection.py": {"libraries": ["gc"], "function_names": ["g"], "function_calls": ["object", "g", "tuple", "type", "print"], "class_names": [], "class_method_calls": ["gc.get_referrers"]}, "infinite_loop_re.py": {"libraries": ["re"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["starttag.match", "re.compile"]}, "mutation_inside_cyclegc.py": {"libraries": ["weakref"], "function_names": ["callback"], "function_calls": ["A", "str", "range"], "class_names": ["A"], "class_method_calls": ["weakref.ref", "a.cycle", "keepalive.append"]}, "recursive_call.py": {"libraries": ["sys"], "function_names": [], "function_calls": ["f"], "class_names": [], "class_method_calls": ["sys.setrecursionlimit"]}, "trace_at_recursion_limit.py": {"libraries": ["sys"], "function_names": ["x", "f", "g"], "function_calls": ["x", "f", "print"], "class_names": [], "class_method_calls": ["sys.getrecursionlimit", "sys.settrace"]}, "underlying_dict.py": {"libraries": ["gc"], "function_names": ["f"], "function_calls": ["A", "object", "range", "print"], "class_names": ["A"], "class_method_calls": ["a.f", "gc.get_referrers"]}, "curses_tests.py": {"libraries": ["curses.textpad", "curses"], "function_names": ["test_textpad", "main"], "function_calls": ["test_textpad", "range", "repr"], "class_names": [], "class_method_calls": ["textpad.rectangle", "stdscr.move", "stdscr.addstr", "stdscr.getch", "stdscr.refresh", "box.edit", "stdscr.clear", "stdscr.clrtoeol", "curses.wrapper", "textpad.Textbox", "curses.newwin"]}, "dataclass_module_1.py": {"libraries": ["dataclasses", "typing"], "function_names": [], "function_calls": [], "class_names": ["CV", "IV"], "class_method_calls": ["dataclasses.dataclass", "typing.ClassVar", "dataclasses.InitVar"]}, "dataclass_module_1_str.py": {"libraries": ["typing", "dataclasses", "__future__.annotations"], "function_names": [], "function_calls": [], "class_names": ["CV", "IV"], "class_method_calls": ["dataclasses.dataclass", "typing.ClassVar", "dataclasses.InitVar"]}, "dataclass_module_2.py": {"libraries": ["dataclasses.dataclass", "typing.ClassVar", "dataclasses.InitVar"], "function_names": [], "function_calls": [], "class_names": ["CV", "IV"], "class_method_calls": []}, "dataclass_module_2_str.py": {"libraries": ["dataclasses.InitVar", "dataclasses.dataclass", "typing.ClassVar", "__future__.annotations"], "function_names": [], "function_calls": [], "class_names": ["CV", "IV"], "class_method_calls": []}, "dataclass_textanno.py": {"libraries": ["dataclasses", "__future__.annotations"], "function_names": [], "function_calls": [], "class_names": ["Bar", "Foo"], "class_method_calls": ["dataclasses.dataclass"]}, "datetimetester.py": {"libraries": ["_testcapi", "operator.floordiv", "operator.eq", "datetime.datetime", "random", "struct", "test.support.ALWAYS_EQ", "test.support", "operator.ge", "operator.truediv", "unittest", "datetime.MAXYEAR", "io", "copy", "datetime", "datetime.timedelta", "_strptime", "test.support.LARGEST", "operator.ne", "operator.lt", "os", "test.support.is_resource_enabled", "itertools", "re", "time", "datetime.tzinfo", "datetime.time", "bisect", "operator.gt", "datetime.MINYEAR", "array.array", "operator.mod", "test.support.SMALLEST", "sys", "decimal", "pickle", "operator.le", "datetime.timezone", "datetime.date"], "function_names": ["test_utctimetuple", "test_pickling_base", "test_combine", "test_normal", "test_timetuple", "test_non_abstractness", "test_issue31293", "test_date_from_date", "test_mixed_compare", "test_timestamp_aware", "test_ctime", "__rfloordiv__", "test_pickling_subclass_time", "test_datetime_from_dateandtime", "test_utc_offset_out_of_bounds", "test_str", "test_extreme_hashes", "test_check_delta", "test_utcfromtimestamp", "__getstate__", "test_negative_float_fromtimestamp", "_loc_fold", "__init__", "test_tzinfo_utcfromtimestamp", "fromutc", "test_folds", "test_mixed_compare_fold", "invert", "test_inheritance", "test_replace", "test_trivial", "test_datetime_from_timestamp", "__str__", "test_subclass_date", "test_negative_float_utcfromtimestamp", "fromfile", "test_subclass_now", "test_fromutc", "test_aware_datetime", "as_integer_ratio", "test_1653736", "test_subclass_timetz", "test_tzinfo_fromtimestamp", "__add__", "test_comparison_with_tzinfo", "test_fromisoformat_utc", "test_subclass_replace", "test_hash", "test_carries", "test_more_pickling", "_test_overflow_special", "get_bad_float", "test_isoformat_timezone", "zonenames", "test_pickling_subclass_datetime", "test_fromisoformat_fails_surrogate", "test_subclass_must_override", "test_hash_equality", "test_even_more_compare", "test_pickling_subclass", "test_vilnius_1941_fromutc", "test_bool", "test_remainder", "test_check_tzinfo", "checkoutside", "test_fromisocalendar_value_errors", "test_time_from_time", "test_zones", "stats", "test_overflow", "replace", "test_pickling_subclass_date", "test_subclass_datetime", "test_basic_attributes_nonzero", "checkinside", "test_easy", "test_backdoor_resistance", "test_format", "test_name_cleanup", "print_all_nondst_folds", "__floordiv__", "test_fromisoformat", "test_fromisoformat_fails_typeerror", "_find_ti", "test_fromisocalendar_type_errors", "test_fromisoformat_separators", "gaps", "strftime", "test_divmod", "test_check_time", "test_extra_attributes", "test_harmless_mixed_comparison", "test_check_arg_types", "test_extreme_timedelta", "folds", "__radd__", "test_isocalendar", "test_member", "test_class_members", "convert_between_tz_and_utc", "test_iso_long_years", "test_vilnius_1941_toutc", "test_insane_fromtimestamp", "__rmul__", "test_roundtrip", "test_hash_aware", "test_insane_utcfromtimestamp", "test_extract", "test_aware_subtract", "test_timestamp", "test_extreme_ordinals", "test_subclass_alternate_constructors_datetime", "test_issue23600", "__new__", "test_astimezone", "test_tzinfo_timetuple", "test_strftime_y2k", "test_fromisoformat_fails", "setUp", "test_subclass_timedelta", "pairs", "tzname", "test_timestamp_naive", "test_more_astimezone", "__repr__", "test_comparison", "test_strftime", "test_timestamp_limits", "test_tz_independent_comparing", "test_compat_unpickle", "test_division", "test_utcnow", "test_deepcopy", "test_pickle_fold", "as_hours", "test_fromisoformat_subclass", "test_disallowed_computations", "test_fromisoformat_datetime", "test_check_datetime", "__int__", "test_astimezone_default_eastern", "test_more_strftime", "test_delta_from_dsu", "test_microsecond_rounding", "test_astimezone_default_near_fold", "test_time_from_timeandfold", "test_total_seconds", "test_ordinal_conversions", "test_weekday", "test_massive_normalization", "test_more_ctime", "test_pickle", "test_dst", "test_gaps", "test_fromisoformat_timespecs", "test_copy", "first_sunday_on_or_after", "transitions", "test_tzinfo_isoformat", "__mul__", "test_delta_non_days_ignored", "test_system_transitions", "test_divide_and_round", "test_issue31752", "test_fromisocalendar", "test_datetime_from_dateandtimeandfold", "test_strptime_single_digit", "test_refcnt_crash_bug_22044", "test_today", "test_more_compare", "test_subclass_time", "test_more_timetuple", "test_strftime_trailing_percent", "test_pickling", "test_fromisoformat_fails_datetime", "verify_field_equality", "test_fromtimestamp_lord_howe", "dst", "assertEquivDatetimes", "test_constructors", "test_check_date", "test_bad_constructor_arguments", "nondst_folds", "test_mixed_compare_regular", "test_repr", "test_fromisoformat_timezone", "test_constants", "test_aware_compare", "test_tzinfo_now", "test_subclass_alternate_constructors", "test_timestamp_lord_howe", "from_td", "test_disallowed_special", "_utc_fold", "fromname", "test_hash_edge_cases", "test_utc_capi", "test_basic_attributes", "test_fromisoformat_ambiguous", "test_harmful_mixed_comparison", "test_constructor", "test_bug_1028306", "test_bad_tzinfo_classes", "test_argument_passing", "load_tests", "test_tzname", "newmeth", "__divmod__", "test_subclass_datetimetz", "test_tz_aware_arithmetic", "test_strftime_with_bad_tzname_replace", "test_timezones_capi", "test_resolution_info", "zeros", "test_empty", "test_tzinfo_utcnow", "test_strptime", "test_tricky", "test_more_bool", "test_timezones_offset_zero", "utcoffset", "test_utcoffset", "test_offset_boundaries", "test_comparing", "test_astimezone_default_utc", "test_computations", "test_compare", "test_tzinfo_classes", "test_isoformat", "test_mixed_compare_gap", "test_bogus_dst", "test_date_from_timestamp", "test_fromtimestamp", "test_fromtimestamp_low_fold_detection"], "function_calls": ["C4", "BadInt", "dar", "sorted", "getattr", "T", "SomeClass", "is_tzinfo", "from_timestamp", "_TZInfo", "constructor", "SubclassDate", "date", "open", "TimeDeltaSubclass", "C3", "dir", "txformer", "Badtzname", "int", "zip", "enumerate", "get_bad_float", "is_timedelta", "len", "Float", "BOFS", "PicklableFixedOffset", "Sum", "USTimeZone2", "cls", "MyStr", "array", "ok", "Naive", "str", "introspective", "loads", "timedelta", "UOFS", "list", "time", "Prod", "fts", "Broken", "TimeSubclass", "BetterTry", "NotEnough", "BadFloat", "op", "AlsoBogus", "otype", "ZoneInfoCompleteTest", "round", "pairs", "combine", "is_resource_enabled", "MyTzInfo", "USTimeZone", "OperandDependentOffset", "id", "tzinfo", "isinstance", "datetime", "DateSubclass", "TZInfoSubclass", "B", "tuple", "hash", "range", "eq", "C6", "td", "C", "set", "C1", "type", "func", "float", "first_sunday_on_or_after", "Edgy", "eval", "hasattr", "divmod", "max", "SubclassTime", "bytes", "sum", "print", "meth", "NOFS", "DST", "abs", "FixedOffset", "repr", "is_date", "issubclass", "super", "is_time", "Bogus", "A", "Europe_Vilnius_1941", "timezone", "strptime", "Varies", "C7", "ValueError", "SubclassDatetime", "constr", "Test", "next", "Number", "UKSummerTime", "DateTimeSubclass", "FauxUSTimeZone", "chr", "notok", "is_datetime", "TypeError", "map", "tricky_notok"], "class_names": ["BadInt", "C4", "USTimeZone2", "NOFS", "DST", "T", "HarmlessMixedComparison", "MyStr", "ok", "SomeClass", "MyTzInfo", "USTimeZone", "OperandDependentOffset", "FixedOffset", "TZInfoSubclass", "TestModule", "IranTest", "TestTime", "_TZInfo", "DateSubclass", "B", "Bogus", "TZInfoBase", "introspective", "Naive", "Europe_Vilnius_1941", "SubclassDate", "A", "C7", "Varies", "ZoneInfoTest", "TestDate", "TestTZInfo", "TimeDeltaSubclass", "C3", "UOFS", "TestLocalTimeDisambiguation", "C6", "SubclassDatetime", "C", "TestTimezoneConversions", "Prod", "C1", "Badtzname", "tricky_notok", "TestDateTime", "Broken", "Edgy", "TestTimeZone", "Number", "UKSummerTime", "TestDateOnly", "TimeSubclass", "BetterTry", "NotEnough", "DateTimeSubclass", "Sum", "NiceTry", "BOFS", "TestSubclassDateTime", "FauxUSTimeZone", "Float", "PicklableFixedOffset", "BadFloat", "TestDateTimeTZ", "SubclassTime", "CapiTest", "notok", "TestTimeTZ", "Oddballs", "ZoneInfo", "AlsoBogus", "ZoneInfoCompleteTest", "TestTimeDelta", "tzinfo2"], "class_method_calls": ["_time.tzname", "diff.days", "itertools.product", "t.day", "self.theclass", "line.strip", "t3.tzname", "standard_tests.addTest", "local.strftime", "now.date", "abbrs.find", "_testcapi.get_date_fromdate", "useless.tzname", "bad_time_deltas.extend", "dt.tzinfo", "d.toordinal", "bisect.bisect_right", "tt.tm_isdst", "time.localtime", "tt.tm_sec", "t.__format__", "t.tm_isdst", "b.__rsub__", "self.second", "pickle.HIGHEST_PROTOCOL", "self.offset", "as_datetime.month", "t.second", "dt_summer.dst", "self.checkinside", "exp_date.microsecond", "tiny.utctimetuple", "_testcapi.test_datetime_capi", "dtz.astimezone", "FixedOffset.__init__", "decimal.Decimal", "sys.byteorder", "_testcapi.make_timezones_capi", "got.tzinfo", "DateSubclass.fromisoformat", "ZoneInfo.fromname", "utc.utcoffset", "t4.isoformat", "gdt.strftime", "derived.tzinfo", "expected.tm_mon", "adt1.fold", "dt.year", "self.subTest", "t2.as_hours", "start.day", "dt.weekday", "unittest.skip", "struct.unpack", "exp_delta.days", "dt.fold", "adt1.tzname", "d.isoformat", "self.stdoffset", "self.assertIsNot", "x.tzinfo", "_time.strftime", "expected.date", "tz.gaps", "there_and_back.dst", "self.transitions", "t_gap.replace", "again.tzinfo", "base2.replace", "timedelta.resolution", "t.astimezone", "diff.tzinfo", "os.path", "cls.min", "time.mktime", "got.time", "dt0.astimezone", "dt1.isoformat", "base_d.astimezone", "Eastern.fromutc", "expected.tm_min", "enow.tzinfo", "_time.localtime", "t3.dst", "dt.microsecond", "t4.seconds", "fo.utcoffset", "time.ctime", "name.startswith", "datetime.fromtimestamp", "t3.seconds", "start.month", "t1.fold", "self.assertWarns", "zero.microsecond", "cls.max", "obj.tzname", "t1.isoformat", "useless.utcoffset", "a.fold", "Badtzname.tz", "y.minute", "fromord.hour", "self.ti", "self.stdname", "self._loc_fold", "Eastern2.fromutc", "timezone.utc", "orig.__reduce_ex__", "dt.astimezone", "self.dstoff", "self.assertAlmostEqual", "dt2.isoformat", "a.fromordinal", "got.year", "derived.utcoffset", "now.time", "dstoff.date", "td.days", "base_dt.replace", "td.microseconds", "nowaware.utcoffset", "self.fail", "dt1.second", "b.toordinal", "x.minute", "tsc.isoformat", "min_dt.timestamp", "tz.folds", "t.toordinal", "expected.tm_hour", "dt1.hour", "exp_time.fold", "t1.timestamp", "now.astimezone", "b.tzinfo", "fstart.replace", "got.minute", "datetime.combine", "d.strftime", "t0.fold", "t.dst", "orig.utcoffset", "as_datetime.year", "x.time", "ldt.dst", "now.replace", "big.seconds", "DST.__init__", "DSTEND.replace", "td.seconds", "_testcapi.datetime_check_delta", "self.verify_field_equality", "dt.time", "dt.tzname", "fm5h.utcoffset", "self.assertRaises", "dt.date", "dston.date", "self.DT", "datetime.max", "_testcapi.datetime_check_datetime", "big.microseconds", "expected.tm_sec", "t3.microseconds", "t.tm_wday", "_strptime._strptime_datetime", "d.day", "self.convert_between_tz_and_utc", "self._find_ti", "self.uofs", "s.startswith", "dobj.isocalendar", "minus_one.second", "sixutc.astimezone", "dt1.month", "d.tzname", "ldt.replace", "support.requires_IEEE_754", "_testcapi.get_datetime_fromdateandtimeandfold", "type_indices.fromfile", "dt2.theAnswer", "self.month", "dt_winter.replace", "T.from_td", "a.__format__", "io.StringIO", "t3.strftime", "unpickler.loads", "t.timetuple", "self.tz", "self.assertIsNone", "dt2.tzname", "asutc.astimezone", "t.ctime", "exp_delta.microseconds", "now.tzinfo", "t1.tzinfo", "t.strftime", "self.assertLess", "fourback.astimezone", "d.isocalendar", "self.value", "expectedbase.replace", "t.tm_year", "t2.dst", "tt.tm_year", "t2.tzinfo", "dt.timestamp", "self.assertLessEqual", "dt.__sub__", "udt.replace", "_testcapi.get_time_fromtime", "_testcapi.get_date_fromtimestamp", "t4.microseconds", "ldt.astimezone", "tz.fromutc", "pickle._loads", "nowaware.timetz", "td.__sub__", "tz.utcoffset", "isocals.append", "dt.replace", "self.EST", "dtz.utctimetuple", "t_gap.astimezone", "expected.tm_year", "d2.toordinal", "dt0.replace", "t4.dst", "self.dston", "dt1.year", "expected.timetz", "t1.tzname", "day.__truediv__", "unittest.TestSuite", "t.isoformat", "_testcapi.datetime_check_time", "nowawareplus.utcoffset", "c_api_time.fold", "got.day", "fileobj.read", "ldt.utcoffset", "fromord.second", "a.__mul__", "t.month", "tz.transitions", "exp_time.second", "dt_base.replace", "datetime_module._divide_and_round", "nowaware.tzinfo", "base2.tzname", "DateTimeSubclass.fromisoformat", "dt.extra", "self.ACDT", "max_dt.timestamp", "_testcapi.get_timezone_utc_capi", "asutcbase.replace", "as_date.month", "dt.utcoffset", "nowawareplus.replace", "got.utcoffset", "dt2.utcoffset", "line.split", "fromord.microsecond", "time.sleep", "support.run_with_tz", "date.today", "x.abc", "b.year", "sdt.timestamp", "ISO_LONG_YEARS_TABLE.split", "self.skipTest", "dt2.toordinal", "self.__class__", "dt_summer.replace", "dt.__add__", "expected.replace", "t_fold.astimezone", "x.date", "a.__truediv__", "FEastern.stdoffset", "self.assertNotEqual", "t.utcoffset", "self.checkoutside", "self.dstname", "datetime.utcfromtimestamp", "c_api_date.fold", "self.assertIs", "t1.as_hours", "self.__offset", "exp_date.day", "self.__dstoffset", "b.fold", "L.append", "useless.dst", "derived.tzname", "asutc.replace", "self.year", "dt0.timestamp", "t.tm_min", "a.year", "dt.month", "diff.seconds", "self.microseconds", "self._utc_fold", "t.fold", "datetime.now", "there_and_back.astimezone", "end.day", "exp_date.year", "random.random", "self.assertTrue", "ttis.append", "t.tzname", "ne.utcoffset", "cls.fromfile", "tt.tm_hour", "kws.copy", "self.lt", "re.escape", "b.month", "_testcapi.get_datetime_fromdateandtime", "end.weekday", "t_summer.fold", "t.replace", "base_time.replace", "datetime.utcnow", "expected.tm_mday", "_testcapi.datetime_check_tzinfo", "t.tm_yday", "ne.dst", "dt_broken.astimezone", "base.replace", "dt.hour", "dt_winter.dst", "FEastern.fromutc", "dt1.toordinal", "udt.year", "cls.zonenames", "line.startswith", "self.days", "self.invert", "exp_date.second", "expected.time", "timezone.max", "base.tzname", "copy.copy", "obj.dst", "dt1.fold", "datetime.min", "sys.platform", "base.tzinfo", "dt.timetz", "tt.tm_mon", "d.month", "expected.tzinfo", "t1.strftime", "self.zonename", "got.hour", "t4.utcoffset", "a.tzinfo", "dt0.fold", "method.startswith", "zero.second", "dt2.newmeth", "itertools.tee", "td.total_seconds", "os.environ", "b.day", "d.replace", "a.month", "time.time", "y.fold", "another.utcoffset", "DSTSTART.replace", "dt.minute", "t3.isoformat", "timedelta.max", "diff.microseconds", "d.timetuple", "huge.utctimetuple", "dt.second", "dt_winter.utcoffset", "t0.replace", "exp_date.hour", "td.resolution", "self.assertRaisesRegex", "t.hour", "d.year", "adt0.fold", "t.tm_hour", "b.__format__", "end.month", "self.assertIn", "temp.pop", "_time.timezone", "tt.tm_mday", "t2.isoformat", "self.dst", "dt1.timestamp", "unittest.skipIf", "self.assertEquivDatetimes", "ldt.fold", "t.tm_mon", "t.year", "timedelta.min", "t3.utcoffset", "dt.__format__", "big.days", "self.ut", "pickle.dumps", "dt.toordinal", "self.__dict__", "exp_time.minute", "tzinfo.__new__", "self.assertEqual", "dt.isoformat", "d.second", "as_date.__eq__", "exp_time.microsecond", "datetime.MAXYEAR", "got.month", "exp_date.month", "nowawareplus.tzinfo", "ut.fromfile", "t2.strftime", "cls.zoneroot", "day.__mul__", "t.tzinfo", "time.gmtime", "t3.tzinfo", "obj.utcoffset", "utcnow.astimezone", "got.date", "t2.utcoffset", "tz.dst", "exp_time.hour", "name.endswith", "ZoneInfo.zonenames", "base_d.timestamp", "self.assertIsInstance", "Test.zonename", "t3.days", "t2.replace", "t.timestamp", "_testcapi.get_time_fromtimeandfold", "d1.isocalendar", "got.second", "self.__name", "u.astimezone", "tests.append", "t5.isoformat", "time_deltas.extend", "dt2.__class__", "tt.tm_yday", "self.hour", "base3.tzinfo", "orig.__reduce__", "exp_date.fold", "copy.deepcopy", "as_datetime.replace", "random.randrange", "pickle.loads", "cls.fromname", "datetime.MINYEAR", "tz.tzname", "_testcapi.get_timezones_offset_zero", "dt.dst", "dt_summer.utcoffset", "result.extra", "_time.tzset", "t5.tzinfo", "unittest.TestCase", "self.assertFalse", "timezone.min", "_testcapi.get_datetime_fromtimestamp", "ne.tzname", "adt0.tzname", "t_base.replace", "_testcapi.datetime_check_date", "fo.dst", "t0.timestamp", "got.replace", "astz.replace", "fo.tzname", "minus_one.microsecond", "t4.days", "got.timetz", "ldt.strftime", "gdt.astimezone", "min.replace", "a.replace", "start.replace", "nowawareplus2.tzinfo", "fourback.replace", "t.tm_sec", "fromord.minute", "ctime.replace", "pickler.dumps", "dt1.tzname", "t.timetz", "unittest.main", "counts.byteswap", "d.weekday", "t4.as_hours", "dt2.extra", "as_date.year", "TimeSubclass.fromisoformat", "_testcapi.get_delta_fromdsu", "as_date.day", "dt.strftime", "t.minute", "t4.tzname", "b.replace", "t.weekday", "t2.tzname", "td.__add__", "dt1.utcoffset", "base2.tzinfo", "x.fold", "counts.fromfile", "max.replace", "nexthour_utc.astimezone", "t_winter.fold", "start.weekday", "self.EPOCHORDINAL", "dt_orig.timestamp", "self.seconds", "s.tzinfo", "t4.tzinfo", "ut.byteswap", "exp_delta.seconds", "t.microsecond", "tt.tm_min", "self.reprname", "t1.utcoffset", "t_fold.replace", "t1.dst", "exp_date.minute", "fileobj.seek", "dt.day", "self.dstvalue", "tz.nondst_folds", "tt.tm_wday", "another.tzinfo", "base_d.extra", "t.tm_mday", "dt1.astimezone", "a.day", "a.toordinal", "delta.days", "orig.tzname", "d.utctimetuple"]}, "dis_module.py": {"libraries": [], "function_names": ["f", "g"], "function_calls": [], "class_names": [], "class_method_calls": []}, "doctest_aliases.py": {"libraries": [], "function_names": ["f"], "function_calls": [], "class_names": ["TwoNames"], "class_method_calls": []}, "double_const.py": {"libraries": ["test.support.TestFailed"], "function_names": ["check_ok"], "function_calls": ["abs", "TestFailed", "eval", "check_ok"], "class_names": [], "class_method_calls": []}, "call_stack.py": {"libraries": [], "function_names": ["function_1", "function_5", "start", "function_2", "function_4", "function_3"], "function_calls": ["function_1", "function_5", "start", "function_2", "function_4", "function_3"], "class_names": [], "class_method_calls": []}, "gc.py": {"libraries": ["gc"], "function_names": ["start"], "function_calls": ["start"], "class_names": [], "class_method_calls": ["l.append", "gc.collect"]}, "instance.py": {"libraries": ["gc"], "function_names": [], "function_calls": ["new_style_class", "old_style_class"], "class_names": ["new_style_class", "old_style_class"], "class_method_calls": ["gc.collect"]}, "line.py": {"libraries": [], "function_names": ["test_line"], "function_calls": ["test_line", "range", "print"], "class_names": [], "class_method_calls": []}, "eintr_tester.py": {"libraries": ["unittest", "platform", "select", "time", "test.support", "contextlib", "signal", "faulthandler", "sys", "subprocess", "fcntl", "socket", "os"], "function_names": ["_test_wait_single", "setUp", "_lock", "test_sendmsg", "kill_on_error", "subprocess", "test_open", "test_epoll", "_test_recv", "test_os_open", "test_wait", "test_flock", "check_sigwait", "test_recv", "test_sigwaitinfo", "test_accept", "test_devpoll", "test_sleep", "test_waitpid", "stop_alarm", "wait_func", "test_send", "_test_send", "test_wait3", "test_kqueue", "test_wait4", "python_open", "new_sleep_process", "_test_open", "test_write", "tearDown", "test_lockf", "test_poll", "test_sendall", "os_open", "_test_wait_multiple", "sighandler", "test_recvmsg", "test_select", "test_read", "test_sigtimedwait"], "function_calls": ["wait_func", "len", "str", "memoryview", "kill_on_error", "int", "open", "Exception", "recv_func", "do_open_close_writer", "send_func", "lock_func", "range", "hasattr"], "class_names": ["SelectEINTRTest", "FNTLEINTRTest", "SignalEINTRTest", "TimeEINTRTest", "EINTRBaseTest", "OSEINTRTest", "SocketEINTRTest"], "class_method_calls": ["os.pipe", "sys.executable", "unittest.skipUnless", "self._test_open", "os.getpid", "self.assertEqual", "os.mkfifo", "os.write", "select.poll", "self.assertGreaterEqual", "kqueue.close", "support.requires_freebsd_version", "support.TESTFN", "poller.close", "signal.sigwaitinfo", "select.devpoll", "self.check_sigwait", "proc.pid", "fcntl.LOCK_NB", "os.wait4", "self.os_open", "os.close", "os.open", "wr.type", "rd.close", "os.O_WRONLY", "support.HOST", "self.subprocess", "faulthandler.dump_traceback_later", "fcntl.LOCK_EX", "rd.family", "socket.socketpair", "self.python_open", "signal.setitimer", "self.stop_alarm", "os.wait", "signal.ITIMER_REAL", "subprocess.Popen", "sock.recvmsg", "fcntl.LOCK_UN", "socket.create_server", "select.select", "signal.SIGALRM", "self.signals", "faulthandler.cancel_dump_traceback_later", "self.new_sleep_process", "signal.SIGUSR1", "contextlib.contextmanager", "wr.fileno", "sock.close", "rd.type", "unittest.TestCase", "time.monotonic", "sys.platform", "signal.SIG_UNBLOCK", "os.read", "wr.close", "self.orig_handler", "fp.close", "self.sighandler", "self.signal_period", "self.addCleanup", "support.PIPE_MAX_SIZE", "signal.pthread_sigmask", "signal.signal", "support.unlink", "fcntl.lockf", "fcntl.flock", "poller.poll", "self._lock", "unittest.main", "sock.getsockname", "proc.kill", "signal.SIG_BLOCK", "proc.wait", "support.SOCK_MAX_SIZE", "os.wait3", "os.waitpid", "rd.fileno", "self._test_recv", "signal.sigtimedwait", "wr.family", "client_sock.close", "self.signal_delay", "platform.system", "self.sleep_time", "sock.sendmsg", "unittest.skipIf", "select.epoll", "self._test_wait_single", "sys.__stderr__", "kqueue.control", "sock.accept", "time.sleep", "select.kqueue", "self.skipTest", "self._test_wait_multiple", "self._test_send", "socket.socket"]}, "module_iso_8859_1.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "module_koi8_r.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "final_a.py": {"libraries": ["shutil", "test.final_b"], "function_names": ["__del__"], "function_calls": ["getattr", "C", "print"], "class_names": ["C"], "class_method_calls": ["shutil.rmtree", "test.final_b"]}, "final_b.py": {"libraries": ["test.final_a", "shutil"], "function_names": ["__del__"], "function_calls": ["getattr", "C", "print"], "class_names": ["C"], "class_method_calls": ["test.final_a", "shutil.rmtree"]}, "fork_wait.py": {"libraries": ["unittest", "threading", "time", "sys", "test.support", "os"], "function_names": ["setUp", "wait_impl", "tearDown", "f", "test_wait"], "function_calls": ["list", "len", "range", "sorted"], "class_names": ["ForkWait"], "class_method_calls": ["self.alive", "time.monotonic", "sys.platform", "os.waitpid", "self.assertEqual", "os.getpid", "os.fork1", "support.threading_cleanup", "self.stop", "thread.start", "support.threading_setup", "thread.join", "os.fork", "self._threading_key", "self.f", "os.WNOHANG", "self.wait_impl", "time.sleep", "self.threads", "os._exit", "unittest.TestCase", "threading.Thread"]}, "future_test1.py": {"libraries": ["__future__.nested_scopes"], "function_names": ["f", "g"], "function_calls": ["f"], "class_names": [], "class_method_calls": []}, "future_test2.py": {"libraries": ["__future__.nested_scopes", "site"], "function_names": ["f", "g"], "function_calls": ["f"], "class_names": [], "class_method_calls": []}, "gdb_sample.py": {"libraries": [], "function_names": ["bar", "baz", "foo"], "function_calls": ["id", "bar", "baz", "foo"], "class_names": [], "class_method_calls": []}, "good_getattr.py": {"libraries": [], "function_names": ["__getattr__", "__dir__"], "function_calls": ["AttributeError"], "class_names": [], "class_method_calls": []}, "imp_dummy.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "inspect_fodder.py": {"libraries": ["sys", "inspect", "types.MethodType"], "function_names": ["contradiction", "spam", "eggs", "abuse", "argue", "__call__", "as_method_of", "f"], "function_calls": ["Callable", "spam", "eggs", "MethodType", "Exception"], "class_names": ["MalodorousPervert", "Callable", "FesteringGob", "ParrotDroppings", "WhichComments", "StupidGit"], "class_method_calls": ["inspect.currentframe", "sys.exc_info", "self.argue", "self.tr", "inspect.stack", "inspect.trace", "self.ex"]}, "inspect_fodder2.py": {"libraries": ["functools.wraps"], "function_names": ["func114", "replace", "func137", "gone", "func69", "keyworded", "decorator", "wrapper", "annotated", "onelinefunc", "func83", "manyargs", "with_comment", "twolinefunc", "all_markers", "keyword_only_arg", "method", "insteadfunc", "all_markers_with_defaults", "func136", "positional_only_arg", "func71", "func77", "func88", "f", "wrap", "all_markers_with_args_and_kwargs", "g", "wrapped", "setfunc", "real", "fake"], "function_calls": ["wrap", "wraps", "globals", "setfunc", "f", "print"], "class_names": ["cls135", "cls82", "ClassWithMethod", "cls70", "X"], "class_method_calls": []}, "test_ctypes.py": {"libraries": ["unittest", "test.support.import_module"], "function_names": [], "function_calls": ["import_module"], "class_names": [], "class_method_calls": ["unittest.main", "ctypes_test.load_tests"]}, "test_selftype.py": {"libraries": ["gc"], "function_names": ["leak"], "function_calls": [], "class_names": ["T", "U"], "class_method_calls": ["U.__class__", "gc.collect"]}, "cmdline.py": {"libraries": ["sys", "test.support", "os", "argparse"], "function_names": ["resources_list", "relative_filename", "error", "huntrleaks", "_parse_args", "_create_parser"], "function_calls": ["len", "super", "_ArgParser", "int", "hasattr", "print", "TypeError", "open", "setattr", "_create_parser"], "class_names": ["_ArgParser"], "class_method_calls": ["argparse.ArgumentParser", "ns.randomize", "ns.use", "arg.startswith", "parser.add_argument_group", "ns.timeout", "kwargs.items", "line.strip", "support.SAVEDCWD", "argparse.Namespace", "ns.huntrleaks", "ns.nowindows", "parser.error", "ns.failfast", "ns.random_seed", "ns.fromfile", "ns.header", "ns.forever", "argparse.ArgumentTypeError", "x.lower", "sys.exit", "ns.findleaks", "ns.ignore_tests", "ns.quiet", "ns.pgo", "ns.args", "ns.verbose3", "ns.match_tests", "ns.use_resources", "parser.parse_known_args", "ns.verbose", "ns.ignore_filename", "ns.trace", "ns.pgo_extended", "ns.verbose2", "ns.single", "os.cpu_count", "os.path", "ns.use_mp", "argparse.RawDescriptionHelpFormatter", "sys.stderr", "ns.fail_env_changed", "string.split", "ns.match_filename", "group.add_argument"]}, "pgo.py": {"libraries": [], "function_names": ["setup_pgo_tests"], "function_calls": [], "class_names": [], "class_method_calls": ["ns.args", "ns.pgo_extended"]}, "refleak.py": {"libraries": ["re", "test.support", "sys", "warnings", "zipimport", "weakref", "collections.abc", "copyreg", "inspect.isabstract", "os", "_abc._get_dump"], "function_names": ["_get_dump", "clear_caches", "warm_caches", "dash_R_cleanup", "check_rc_deltas", "dash_R", "get_pooled_int", "check_fd_deltas"], "function_calls": ["gettotalrefcount", "getattr", "all", "fd_count", "_get_dump", "clear_caches", "open", "Exception", "range", "list", "isabstract", "ref", "set", "f", "hasattr", "checker", "any", "chr", "sum", "warm_caches", "dash_R_cleanup", "bytes", "filter", "test_func", "get_pooled_int", "getallocatedblocks", "print"], "class_names": [], "class_method_calls": ["obj._abc_caches_clear", "sys.__stdout__", "cls._abc_registry", "zipimport._zip_directory_cache", "support.SAVEDCWD", "linecache.clearcache", "support.gc_collect", "sys.modules", "mimetypes._default_mime_types", "ns.huntrleaks", "_strptime._regex_cache", "obj.register", "sys.gettotalrefcount", "sys.stdout", "cls._abc_negative_cache", "support.fd_count", "struct._clearcache", "cls._abc_cache", "urllib_request.urlcleanup", "mod.__warningregistry__", "sys._clear_type_cache", "ns.quiet", "doctest.master", "ctypes._reset_cache", "abcs.get", "cls._abc_negative_cache_version", "typing._cleanups", "refrep.flush", "urllib_parse.clear_cache", "warnings.filters", "stream.flush", "weakref.ref", "sys.__stderr__", "collections.abc", "filecmp._cache", "os.path", "sys.stderr", "re.purge", "abc.__subclasses__", "sys.path_importer_cache", "distutils_dir_util._path_created", "sys.getallocatedblocks", "int_pool.setdefault", "copyreg.dispatch_table"]}, "runtest.py": {"libraries": ["test.support", "traceback", "unittest", "io", "faulthandler", "collections", "os", "functools", "time", "gc", "test.libregrtest.refleak.dash_R", "shutil", "test.libregrtest.utils.print_warning", "test.libregrtest.utils.format_duration", "stat", "test.libregrtest.save_env.saved_test_environment", "xml.etree.ElementTree", "importlib", "sys", "test.libregrtest.refleak.clear_caches"], "function_names": ["runtest", "cleanup_test_droppings", "findtestdir", "format_test_result", "get_abs_module", "findtests", "_runtest_inner2", "_runtest", "_test_module", "_runtest_inner", "is_failed"], "function_calls": ["format_duration", "sorted", "getattr", "test_runner", "dash_R", "RuntimeError", "clear_caches", "get_abs_module", "_runtest_inner2", "Exception", "_runtest", "findtestdir", "set", "saved_test_environment", "cleanup_test_droppings", "len", "TestResult", "print_warning", "nuker", "_runtest_inner", "print"], "class_names": [], "class_method_calls": ["faulthandler.dump_traceback_later", "ns.timeout", "loader.errors", "support.gc_collect", "unittest.TestLoader", "stat.S_IRWXU", "ns.huntrleaks", "sys.stdout", "support.failfast", "loader.loadTestsFromModule", "support.TestDidNotRun", "ns.failfast", "tests.append", "ET.tostring", "result.result", "unittest.SkipTest", "support.TESTFN", "importlib.import_module", "support.junit_xml_list", "support.ResourceDenied", "functools.partial", "ns.xmlpath", "stat.S_IRWXG", "ns.ignore_tests", "io.StringIO", "ns.verbose3", "ns.pgo", "ns.quiet", "stat.S_IRWXO", "ns.match_tests", "faulthandler.cancel_dump_traceback_later", "stream.getvalue", "support.verbose", "ns.verbose", "support.run_unittest", "os.curdir", "shutil.rmtree", "support.unload", "gc.garbage", "support.reap_children", "time.perf_counter", "support.set_match_tests", "support.environment_altered", "os.unlink", "collections.namedtuple", "_FORMAT_TEST_RESULT.get", "orig_stderr.write", "os.path", "result.test_name", "sys.stderr", "ns.fail_env_changed", "orig_stderr.flush", "os.listdir", "os.chmod", "FOUND_GARBAGE.extend", "result.test_time", "traceback.format_exc", "support.TestFailed", "ns.testdir", "test_name.startswith", "environment.changed"]}, "runtest_mp.py": {"libraries": ["json", "test.libregrtest.runtest.is_failed", "test.libregrtest.runtest.runtest", "subprocess", "test.support", "traceback", "threading", "types", "test.libregrtest.runtest.TIMEOUT", "signal", "queue", "faulthandler", "collections", "os", "test.libregrtest.runtest.TestResult", "time", "test.libregrtest.runtest.format_test_result", "test.libregrtest.runtest.CHILD_ERROR", "test.libregrtest.utils.print_warning", "test.libregrtest.utils.format_duration", "test.libregrtest.runtest.INTERRUPTED", "test.libregrtest.runtest.PROGRESS_MIN_TIME", "sys", "test.libregrtest.setup.setup_tests"], "function_names": ["stop", "must_stop", "run_tests_worker", "_get_result", "__repr__", "_run_process", "start_workers", "_process_result", "parse_worker_args", "__init__", "get_running", "_kill", "_runtest", "stop_workers", "mp_result_error", "wait_stopped", "run", "__iter__", "__next__", "run_tests", "run_test_in_subprocess", "display_result", "run_tests_multiprocess", "_wait_completed"], "function_calls": ["format_duration", "min", "setup_tests", "must_stop", "vars", "MultiprocessTestRunner", "super", "format_test_result", "get_running", "range", "is_failed", "MultiprocessIterator", "list", "next", "hasattr", "runtest", "TestWorkerProcess", "run_test_in_subprocess", "any", "len", "MultiprocessResult", "TestResult", "print_warning", "print"], "class_names": ["MultiprocessTestRunner", "MultiprocessIterator", "ExitThread", "TestWorkerProcess"], "class_method_calls": ["worker.current_test_name", "info.append", "threading.Lock", "sys.executable", "stderr.rstrip", "self.ns", "self.test_index", "ns.failfast", "self._run_process", "json.loads", "self.current_test_name", "runner.ns", "self.display_result", "info.extend", "running.append", "worker.stop", "popen.pid", "popen.returncode", "regrtest.ns", "worker.is_alive", "sys.stderr", "worker.start_time", "runner.regrtest", "self.join", "os.killpg", "stdout.rstrip", "mp_result.stdout", "signal.SIGKILL", "faulthandler.dump_traceback_later", "runner.output", "worker.start", "self.timeout", "self.pending", "mp_result.stderr", "self.output", "self.worker_id", "subprocess.Popen", "popen.wait", "json.dumps", "mp_result.result", "faulthandler.cancel_dump_traceback_later", "self.start_workers", "runner.worker_timeout", "self.is_alive", "self._wait_completed", "mp_result.error_msg", "traceback.format_exc", "self._get_result", "self.worker_timeout", "self._runtest", "popen.stderr", "types.SimpleNamespace", "time.monotonic", "stdout.rpartition", "self.start_time", "self.log", "result.result", "queue.Queue", "self.regrtest", "self._stopped", "self.lock", "self.workers", "subprocess.PIPE", "collections.namedtuple", "self.tests_iter", "support.args_from_interpreter_flags", "popen.communicate", "worker.wait_stopped", "support.SAVEDCWD", "self._process_result", "sys.exit", "subprocess.TimeoutExpired", "runner.pending", "queue.Empty", "self._killed", "self._kill", "popen.kill", "self._popen", "stdout.strip", "popen.stdout", "self.mp_result_error", "os.name", "result.test_time", "self.stop_workers", "threading.Thread"]}, "save_env.py": {"libraries": ["threading", "asyncio", "multiprocessing.process", "_multiprocessing", "shutil", "sys", "warnings", "test.libregrtest.utils.print_warning", "locale", "test.support", "os", "sysconfig", "logging", "builtins"], "function_names": ["restore_sys_argv", "get_logging__handlers", "get_sysconfig__INSTALL_SCHEMES", "get_sys_stdin", "get_logging__handlerList", "restore_sysconfig__INSTALL_SCHEMES", "get_warnings_filters", "__exit__", "get_sys_gettrace", "get_sysconfig__CONFIG_VARS", "restore_shutil_archive_formats", "get_sys_warnoptions", "restore_threading__dangling", "restore_warnings_showwarning", "resource_info", "get_sys_stdout", "get___import__", "get_os_environ", "restore_sys_stderr", "get_sys_stderr", "get_shutil_archive_formats", "get_multiprocessing_process__dangling", "get_warnings_showwarning", "__enter__", "restore_locale", "__init__", "restore_sys_warnoptions", "restore_shutil_unpack_formats", "restore_cwd", "restore_sys_path", "restore___import__", "get_asyncore_socket_map", "restore_sys_path_hooks", "restore_multiprocessing_process__dangling", "restore_asyncio_events__event_loop_policy", "restore_os_environ", "get_asyncio_events__event_loop_policy", "get_sys_argv", "restore_warnings_filters", "restore_sys_stdin", "restore_sysconfig__CONFIG_VARS", "restore_sys_stdout", "get_sys_path", "get_sys_path_hooks", "restore_logging__handlers", "restore_logging__handlerList", "get_cwd", "restore_files", "restore_sys_gettrace", "get_shutil_unpack_formats", "get_threading__dangling", "get_locale", "restore_asyncore_socket_map", "get_files"], "function_calls": ["sorted", "getattr", "dir", "get", "print_warning", "dict", "restore", "id", "print"], "class_names": ["saved_test_environment"], "class_method_calls": ["saved_values.pop", "sys.path_hooks", "support.gc_collect", "pairings.append", "sys.modules", "sysconfig._INSTALL_SCHEMES", "sys.stdout", "warnings.showwarning", "os.getcwd", "self.testname", "self.resources", "self.changed", "os.chdir", "support.TESTFN", "support.rmtree", "threading._dangling", "asyncore.close_all", "asyncio.set_event_loop_policy", "locale.setlocale", "self._lc", "support.maybe_get_event_loop_policy", "sysconfig._CONFIG_VARS", "lc.startswith", "shutil._ARCHIVE_FORMATS", "warnings.filters", "support.unlink", "self.saved_values", "sys.stdin", "shutil._UNPACK_FORMATS", "os.environ", "builtins.__import__", "support.environment_altered", "self.quiet", "sys.warnoptions", "self.resource_info", "sys.path", "name.replace", "os.path", "sys.stderr", "multiprocessing.process", "asyncore.socket_map", "self.verbose", "sys.settrace", "os.listdir", "sys.argv", "sys.gettrace", "sysconfig.get_config_var", "self.pgo", "logging._handlerList", "logging._handlers"]}, "win_utils.py": {"libraries": ["uuid", "msvcrt", "_winapi", "test.libregrtest.utils.print_warning", "subprocess", "math", "test.support", "os", "winreg"], "function_names": ["close", "__del__", "_read_lines", "start", "__init__", "getloadavg", "_get_counter_name", "_parse_line"], "function_calls": ["len", "iter", "str", "print_warning", "zip", "dict", "sum", "float"], "class_names": ["WindowsLoadTracker"], "class_method_calls": ["lines.pop", "_winapi.OPEN_EXISTING", "support.SAVEDCWD", "self.pipe", "winreg.OpenKey", "_winapi.NMPWAIT_WAIT_FOREVER", "output.decode", "_winapi.ConnectNamedPipe", "self.close", "self._load", "overlapped.getbuffer", "value.endswith", "winreg.QueryValueEx", "_winapi.PIPE_WAIT", "subprocess.Popen", "_winapi.GENERIC_WRITE", "math.exp", "_winapi.CreateFile", "self._get_counter_name", "output.splitlines", "_winapi.FILE_FLAG_FIRST_PIPE_INSTANCE", "overlap.GetOverlappedResult", "os.close", "self._parse_line", "self.start", "_winapi.FILE_FLAG_OVERLAPPED", "overlapped.GetOverlappedResult", "line.split", "line.rstrip", "self._popen", "_winapi.PIPE_ACCESS_INBOUND", "winreg.HKEY_LOCAL_MACHINE", "_winapi.ReadFile", "value.startswith", "uuid.uuid4", "self._values", "_winapi.CreateNamedPipe", "msvcrt.open_osfhandle", "self._read_lines", "self._buffer", "_winapi.NULL"]}, "list_tests.py": {"libraries": ["test.seq_tests", "functools.cmp_to_key", "sys", "test.support", "os"], "function_names": ["test_insert", "test_index", "test_set_subscript", "test_pop", "test_reverse", "test_sort", "test_init", "test_iadd", "test_remove", "test_repr", "__eq__", "test_extend", "test_exhausted_iterator", "revcmp", "test_clear", "__init__", "test_extendedslicing", "__length_hint__", "test_delslice", "test_setitem_error", "test_setslice", "test_reversed", "test_imul", "__iter__", "test_repr_deep", "test_constructor_exception_handling", "test_delitem", "selfmodifyingComparison", "myComparison", "test_copy", "__next__", "test_getitem_error", "test_setitem", "test_slice", "test_print", "test_append"], "function_calls": ["CustomIter", "cmp_to_key", "BadExc", "reversed", "id", "repr", "super", "iter", "str", "F", "tuple", "BadCmp2", "open", "range", "BadCmp", "list", "EvilCmp", "slice", "next", "zip"], "class_names": ["BadCmp", "CustomIter", "EvilCmp", "F", "BadExc", "BadCmp2", "CommonTest"], "class_method_calls": ["self.assertEqual", "self.assertNotEqual", "b.insert", "a.__delitem__", "self.assertRaisesRegex", "u.copy", "self.assertIs", "z.append", "a.__setitem__", "support.TESTFN", "a.append", "os.remove", "u.sort", "self.assertRaises", "a.insert", "self.victim", "seq_tests.CommonTest", "v.append", "fo.read", "a.pop", "u.clear", "fo.write", "sys.getrecursionlimit", "u.__iadd__", "d.extend", "a.__init__", "a.remove", "sys.maxsize", "u.reverse", "d.append", "a.__getitem__", "a.index", "a2.append", "d.remove", "u.append", "self.type2test", "z.sort", "a.extend"]}, "lock_tests.py": {"libraries": ["unittest", "threading", "time", "sys", "_thread.TIMEOUT_MAX", "weakref", "test.support", "_thread.start_new_thread"], "function_names": ["test_locked_repr", "test_set_and_clear", "test_reset", "test_acquire_timeout", "test_state_after_timeout", "run_threads", "setUp", "test_wait_return", "test_repr", "wait_for_finished", "wait_for_started", "test_reset_internal_locks", "action", "test_default_value", "test_acquire_release", "test_release_save_unacquired", "test_weakref_deleted", "test_timeout", "__init__", "test_abort", "test_is_set", "test_different_thread", "test_constructor", "assertTimeout", "test_barrier_10", "test_try_acquire", "test_unacquired_notify", "_with", "_check_notify", "test_thread_leak", "test_action", "test_with", "test_acquire_destroy", "test_acquire", "test_acquire_contended", "test_reacquire", "test_single_thread", "task", "tearDown", "f", "test_release_unacquired", "test_abort_and_reset", "do_finish", "test_try_acquire_contended", "test_weakref_exists", "test_barrier", "test_notify", "test_waitfor", "test__is_owned", "test_waitfor_timeout", "test_unacquired_wait", "multipass", "test_default_timeout", "_wait"], "function_calls": ["len", "sorted", "ref", "range", "start_new_thread", "sum", "_wait", "_with", "f", "Bunch", "repr"], "class_names": ["SemaphoreTests", "RLockTests", "BaseLockTests", "ConditionTests", "EventTests", "BaseTestCase", "BoundedSemaphoreTests", "BaseSemaphoreTests", "LockTests", "BarrierTests", "Bunch"], "class_method_calls": ["threading.Lock", "self.assertEqual", "sem.acquire", "self.assertGreaterEqual", "b.wait", "ready.append", "evt._cond", "threading.get_ident", "sem_results.append", "b.finished", "self.assertRaises", "self.f", "self.locktype", "results2.append", "b.do_finish", "self.test_barrier", "self.assertTrue", "result.append", "self._check_notify", "self.eventtype", "evt._reset_internal_locks", "cond.acquire", "support.wait_threads_exit", "self.assertRegex", "lock.acquire", "threading.BrokenBarrierError", "self.assertIsNone", "self.barriertype", "self.N", "phase.append", "sys.maxsize", "evt.is_set", "barrier.wait", "unittest.TestCase", "self.assertFalse", "time.monotonic", "self.assertLess", "self.assertTimeout", "self.finished", "cond.wait_for", "lock._release_save", "self.multipass", "lock.release", "support.threading_setup", "evt.wait", "self.wait_thread", "lock.locked", "cond.wait", "evt.clear", "self.barrier", "b.wait_for_started", "evt.set", "self.run_threads", "sem.release", "results.append", "self.assertIsNotNone", "self._can_exit", "self.semtype", "support.threading_cleanup", "barrier2.wait", "self._threads", "self.started", "self.condtype", "cond.notify", "cond.release", "threading.enumerate", "self.n", "b.wait_for_finished", "lock._is_owned", "results1.append", "weakref.ref", "success.append", "support.reap_children", "time.sleep", "cond.notify_all", "self.defaultTimeout", "results3.append", "ready.clear"]}, "make_ssl_certs.py": {"libraries": ["pprint", "_ssl", "shutil", "tempfile", "os", "subprocess.*"], "function_names": ["print_cert", "make_cert_key", "make_ca", "unmake_ca"], "function_calls": ["print_cert", "make_cert_key", "range", "check_call", "unmake_ca", "open", "make_ca", "print"], "class_names": [], "class_method_calls": ["os.chdir", "os.mkdir", "req_template.format", "f.write", "os.path", "tempnames.append", "os.remove", "t.write", "_ssl._test_decode_cert", "shutil.rmtree", "t.flush", "f.name", "pprint.pprint", "f.read", "tempfile.NamedTemporaryFile", "t.name", "shutil.copy"]}, "mapping_tests.py": {"libraries": ["unittest", "sys", "collections"], "function_names": ["test_get", "test_pop", "test_repr", "__eq__", "keys", "test_setdefault", "__repr__", "test_fromkeys", "test_update", "test_items", "_full_mapping", "test_eq", "test_clear", "__init__", "_reference", "test_mutatingiteration", "test_constructor", "check_iterandlist", "_empty_mapping", "test_keys", "test_popitem", "test_len", "__iter__", "test_getitem", "test_repr_deep", "test_write", "test_copy", "__next__", "test_contains", "__setitem__", "g", "__hash__", "__new__", "test_values", "test_bool", "test_read", "__getitem__"], "function_calls": ["badseq", "sorted", "Exc", "repr", "dictlike", "SimpleUserDict", "iter", "BadHash", "dict", "check_iterandlist", "BogonIter", "range", "BadCmp", "list", "BadSeq", "set", "BadEq", "int", "next", "type", "FailingUserDict", "BadRepr", "bool", "hasattr", "len", "g", "chr", "ord"], "class_names": ["BadCmp", "badseq", "baddict1", "dictlike", "BadSeq", "SimpleUserDict", "TestMappingProtocol", "baddict2", "BadHash", "BadEq", "BasicTestMappingProtocol", "Exc", "FailingUserDict", "BadRepr", "mydict", "BogonIter", "TestHashMappingProtocol"], "class_method_calls": ["self.assertIsInstance", "d.__class__", "d.__contains__", "d.pop", "self.assertEqual", "self.assertNotEqual", "d.values", "d.copy", "dict.fromkeys", "outerself.reference", "mydict.fromkeys", "p.update", "BasicTestMappingProtocol.test_pop", "d.popitem", "d.items", "baddict2.fromkeys", "self.inmapping", "baddict1.fromkeys", "self._reference", "d.keys", "self.assertIn", "self.fail", "data.items", "self.assertNotIn", "self._empty_mapping", "BasicTestMappingProtocol.test_keys", "BasicTestMappingProtocol.test_update", "d.update", "self.assertRaises", "a.copy", "x.fail", "BasicTestMappingProtocol.test_setdefault", "b.popitem", "BasicTestMappingProtocol.test_len", "BasicTestMappingProtocol.test_get", "a.popitem", "dictlike.fromkeys", "unittest.TestCase", "TestMappingProtocol.test_getitem", "TestMappingProtocol.test_setdefault", "d.clear", "collections.UserDict", "BasicTestMappingProtocol.test_getitem", "p.popitem", "sys.getrecursionlimit", "BasicTestMappingProtocol.test_values", "BasicTestMappingProtocol.test_constructor", "BasicTestMappingProtocol.test_items", "p.items", "self.other", "self.d", "BasicTestMappingProtocol.test_bool", "self._full_mapping", "TestMappingProtocol.test_fromkeys", "self.i", "self.assertTrue", "self.reference", "d.setdefault", "d.get", "TestMappingProtocol.test_pop", "self.type2test", "d.fromkeys", "d.__getitem__", "BasicTestMappingProtocol.test_popitem"]}, "memory_watchdog.py": {"libraries": ["sys", "os", "time"], "function_names": [], "function_calls": ["int"], "class_names": [], "class_method_calls": ["time.sleep", "os.sysconf", "sys.stdin", "sys.stdout", "statm.split"]}, "mock_socket.py": {"libraries": ["socket"], "function_names": ["getdefaulttimeout", "listen", "setblocking", "makefile", "gethostbyname", "setdefaulttimeout", "sendall", "create_connection", "queue_recv", "__init__", "socket", "getsockopt", "accept", "gethostname", "close", "setsockopt", "getaddrinfo", "gettimeout", "send", "getsockname", "recv", "getfqdn", "readline", "reply_with", "getpeername", "settimeout", "fileno", "bind"], "function_calls": ["len", "MockFile", "getdefaulttimeout", "MockSocket", "int"], "class_names": ["MockSocket", "MockFile"], "class_method_calls": ["socket_module.error", "socket_module.AF_INET", "self.family", "self.output", "ms.settimeout", "socket_module.gaierror", "socket_module.getaddrinfo", "self.conn", "socket_module.AF_INET6", "socket_module._GLOBAL_DEFAULT_TIMEOUT", "socket_module.SOCK_STREAM", "self.timeout", "self.lines", "self.last"]}, "mod_generics_cache.py": {"libraries": ["typing.Optional", "sys", "typing.Generic", "typing.TypeVar", "textwrap.dedent"], "function_names": [], "function_calls": ["dedent", "TypeVar", "dict", "exec"], "class_names": ["A", "B"], "class_method_calls": ["sys.version_info"]}, "mp_fork_bomb.py": {"libraries": ["sys", "multiprocessing"], "function_names": ["foo"], "function_calls": ["len", "print"], "class_names": [], "class_method_calls": ["p.exitcode", "sys.exit", "p.join", "p.start", "sys.argv", "multiprocessing.set_start_method", "multiprocessing.Process"]}, "mp_preload.py": {"libraries": ["multiprocessing"], "function_names": ["f"], "function_calls": ["__import__", "print"], "class_names": [], "class_method_calls": ["multiprocessing.get_context", "ctx.set_forkserver_preload", "proc.start", "multiprocessing.Lock", "ctx.Process", "proc.join"]}, "multibytecodec_support.py": {"libraries": ["unittest", "re", "http.client.HTTPException", "codecs", "html.entities.codepoint2name", "sys", "io.BytesIO", "test.support", "os"], "function_names": ["setUp", "test_mapping_file", "test_streamwriter", "test_callback_backward_index", "test_incrementalencoder_del_segfault", "test_callback_wrong_objects", "test_incrementalencoder_error_callback", "open_mapping_file", "load_teststring", "test_streamreader", "unichrs", "test_callback_None_index", "xmlcharnamereplace", "test_xmlcharrefreplace", "test_customreplace_encode", "test_callback_long_index", "test_mapping_supplemental", "_testpoint", "_test_mapping_file_plain", "tempreplace", "test_callback_index_outofbound", "test_callback_returns_bytes", "test_streamwriter_reset_no_pending", "myreplace", "test_incrementaldecoder", "test_errorhandle", "test_chunkcoding", "_test_mapping_file_ucm", "test_incrementalencoder", "test_callback_forward_index"], "function_calls": ["object", "getattr", "UTF8Writer", "isinstance", "str", "unichrs", "open", "range", "list", "int", "type", "zip", "func", "UTF8Reader", "BytesIO", "len", "chr", "TypeError", "ord"], "class_names": ["TestBase", "TestBase_Mapping"], "class_method_calls": ["re.findall", "self.codectests", "lines.pop", "self.supmaps", "l.append", "ostream.writelines", "self.reader", "self.assertEqual", "self.incrementaldecoder", "tstring_lines.append", "codecs.register_error", "bytes.fromhex", "self.codec", "utf8.decode", "self.has_iso10646", "b.split", "self.writer", "self.incrementalencoder", "self.roundtriptest", "self._test_mapping_file_ucm", "istream.read", "self.fail", "self.pass_enctest", "ostream.getvalue", "e.reset", "f.read", "self.decode", "self.assertRaises", "unich.encode", "source.decode", "self.pass_dectest", "e.encode", "self.unmappedunicode", "support.open_urlresource", "codecs.lookup", "myreplace.limit", "e.errors", "self.encoding", "exc.object", "self._testpoint", "writer.reset", "codecs.getreader", "source.encode", "line.split", "sys.maxsize", "os.path", "self.open_mapping_file", "self.mapfileurl", "exc.end", "decoder.decode", "self.skipTest", "self.encode", "ostream.write", "self.tstring", "codecs.getwriter", "self.assertTrue", "encoder.encode", "s.split", "unittest.TestCase", "self._test_mapping_file_plain", "exc.start", "self.xmlcharnametest"]}, "outstanding_bugs.py": {"libraries": ["unittest", "test.support"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["unittest.main"]}, "pickletester.py": {"libraries": ["dbm", "numpy", "struct", "_testbuffer", "test.support", "test.support.run_with_locale", "unittest", "io", "test.support.forget", "threading", "test.support.save_restore_warnings_filters", "collections", "io.StringIO", "weakref", "pickletools.dis", "os", "functools", "pickle.bytes_types", "test.support.TestFailed", "locker", "time", "locking_import.ToBeUnpickled", "shutil", "__main__", "pickletools", "copyreg", "test.support._2G", "test.support.bigmemtest", "textwrap.dedent", "test.support.TESTFN", "test.support.reap_threads", "sys", "pickle", "test.support._4G", "math", "http.cookies.SimpleCookie", "test.support.no_tracing"], "function_names": ["test_large_32b_binbytes8", "f_contiguous", "__reduce_ex__", "test_pickler_hook", "test_unpickle_module_race", "test_proto", "test_getinitargs", "test_frame_readline", "test_newobj_tuple", "test_recursive_tuple_and_list_subclass", "test_bad_init", "test_many_puts_and_gets", "test_huge_long_32b", "test_callapi", "test_maxint64", "test_notimplemented", "test_dict_chunking", "test_empty_bytestring", "test_optional_frames", "test_large_32b_bytearray8", "test_correctly_quoted_string", "__init__", "test_recursive_list_subclass_and_inst", "test_global_ext2", "test_protocol0_is_ascii_only", "test_recursive_frozenset_and_inst", "test_binbytes8", "test_recursive_tuple_and_dict_like_key", "test_newobj_list_slots", "test_reusing_unpickler_objects", "readonly", "test_recursive_tuple_and_dict_like", "test_in_band_buffers", "test_int_pickling_efficiency", "test_global_ext1", "test_ellipsis", "test_reduce_ex_called", "test_appends_on_non_lists", "test_dump_text_file", "reduce_bbb", "test_recursive_tuple_and_list_like", "test_recursive_tuple_and_inst", "test_binget", "test_recursive_dict_like", "seekable", "test_recursive_dict_subclass_and_inst", "test_incomplete_input", "test_negative_32b_binbytes", "test_framed_write_sizes_with_delayed_writer", "setstate_bbb", "__setitem__", "test_highest_protocol", "test_priming_pickler_memo", "test_multiple_unpicklings_minimal", "pie", "test_recursive_dict_key", "test_ints", "test_buffers_numpy", "test_large_pickles", "test_return_correct_type", "test_dump_closed_file", "test_nested_names", "test_class_dispatch_table", "test_load_from_data4", "test_load_from_data1", "_test_recursive_dict_key", "reducer_override", "remove_frames", "test_newobj_proxies", "test_badly_escaped_string", "test_get", "_test_recursive_tuple_and_list", "test_misc_get", "test_reduce_calls_base", "test_complex_newobj_ex", "test_load_from_and_dump_to_file", "_test_recursive_tuple_and_dict", "persistent_id", "test_load_closed_file", "test_recursive_inst_state", "restore", "test_huge_bytes_64b", "_check_multiple_unpicklings", "_test_recursive_list", "test_recursive_set", "opcode_in_pickle", "test_framing_large_objects", "custom_load_dump", "test_set_chunking", "biscuits", "test_py_methods", "test_negative_put", "check_unpickling_error", "test_negative_32b_binunicode", "test_recursive_frozenset_subclass_and_inst", "test_negative_32b_binput", "loads", "_test_recursive_collection_and_inst", "test_recursive_dict_and_inst", "test_load_python2_str_as_bytes", "seek", "_test_recursive_dict", "test_newobj_generic", "test_singleton_types", "test_misc", "test_bytes", "test_buffers_error", "test_dumps_loads_oob_buffers", "tell", "test_attribute_name_interning", "test_recursive_dict", "test_reduce_ex_calls_base", "check_frame_opcodes", "test_default_dispatch_table", "check_dumps_loads_oob_buffers", "f", "test_dynamic_class", "test_reduce", "test_bad_stack", "test_recursive_dict_subclass", "_check_pickling_with_opcode", "test_load_from_data0", "dont_test_disassembly", "test_unicode", "peek", "test_recursive_set_subclass_and_inst", "test_unicode_high_plane", "test_reduce_ex_overrides_reduce", "test_priming_unpickler_memo", "__getitem__", "test_recursive_inst", "append", "setUp", "test_oob_buffers", "test_reducer_override_no_reference_cycle", "test_load_from_data2", "test_recursive_list_like", "assert_is_copy", "test_compat_pickle", "__repr__", "test_recursive_multi", "test_load_classic_instance", "test_recursive_list_and_inst", "test_compat_unpickle", "__reduce__", "test_truncated_data", "test_recursive_tuple_and_inst_state", "test_singletons", "test_framing_many_objects", "test_huge_bytes_32b", "test_bad_reduce", "_reconstruct", "test_recursive_set_and_inst", "reduce_1", "test_bytearray8", "test_bytearray", "__getnewargs_ex__", "test_long1", "test_dump_load_oob_buffers", "test_metaclass", "produce_global_ext", "test_newobj_not_class", "test_local_lookup_error", "test_float", "buffer_like_objects", "test_inband_accept_default_buffers_argument", "test_recursive_tuple_and_list", "test_long_binget", "test_recursive_list_subclass", "test_load_from_data3", "check_no_copy", "test_oob_buffers_writable_to_readonly", "test_short_tuples", "test_complex_newobj", "test_pickle_to_2x", "test_global_ext4", "__setstate__", "test_recursive_dict_subclass_key", "test_setitems_on_non_dicts", "create_data", "_test_dispatch_table", "test_multiple_unpicklings_unseekable", "test_roundtrip_equality", "test_long", "reduce_2", "test_persistence", "test_bad_newobj_ex", "identity", "test_recursive_tuple_and_dict_subclass", "test_reduce_overrides_default_reduce_ex", "__getnewargs__", "t", "__getattr__", "test_binbytes", "test_clear_pickler_memo", "__getinitargs__", "test_badly_quoted_string", "test_huge_str_64b", "test_recursive_tuple_and_dict_subclass_key", "dumps", "test_recursive_tuple_subclass_and_inst", "__eq__", "test_constants", "test_short_binunicode", "count_opcode", "test_load_long_python2_str_as_bytes", "test_large_32b_binunicode8", "test_structseq", "create_dynamic_class", "test_short_binbytes", "__ne__", "test_unpickle_from_2x", "buffer_callback", "default_load_dump", "cheese", "test_recursive_list", "test_recursive_tuple_and_dict_key", "test_unpickling_buffering_readline", "test_recursive_tuple_and_dict", "check_array", "_check_return_correct_type", "test_bad_mark", "c_contiguous", "test_reduce_bad_iterator", "test_c_methods", "test_recursive_dict_like_key", "test_simple_newobj", "h", "test_picklebuffer_error", "wine", "test_load_python2_unicode_as_str", "concatenate_chunks", "test_list_chunking", "test_dup", "test_recursive_nested_names", "test_bad_newobj", "test_huge_str_32b", "g", "write", "ketchup", "_test_recursive_tuple_and_dict_key", "maple", "test_float_format", "test_buffer_callback_error", "test_bad_getattr", "test_instance_dispatch_table", "test_binunicode8", "persistent_load", "test_multiple_unpicklings_seekable", "check_copy", "test_newobj_list", "test_long4"], "function_calls": ["frozenset", "sorted", "dedent", "getattr", "ExtensionSaver", "iter", "SlotList", "StringIO", "bytes_type", "dict", "open", "asdict", "Exception", "AAA", "REX_state", "initarg", "dir", "int", "zip", "MyList", "enumerate", "REX_four", "REX_seven", "len", "REX_one", "NotImplementedError", "REX_three", "remove_frames", "object", "cls", "memoryview", "keep_frame", "opcode_in_pickle", "MyPickler", "custom_load_dump", "str", "BadUnpickler", "wr", "loads", "REX_five", "PyMethodsTest", "list", "BadGetattr", "Object", "D", "ChunkAccumulator", "MyTuple", "myint", "min", "use_metaclass", "unpickled", "isinstance", "B", "ZeroCopyBytes", "range", "BBB", "Subclass", "BadPickler", "REX_six", "method", "C", "factory", "set", "K", "TestFailed", "check_no_copy", "type", "hasattr", "create_data", "pickling_metaclass", "dis", "REX_two", "bytes", "print", "dumps", "run_with_locale", "count_opcode", "save_restore_warnings_filters", "repr", "create_dynamic_class", "ioclass", "aslist", "default_load_dump", "check_array", "X", "ValueError", "ZeroCopyBytearray", "PicklableNDArray", "bigmemtest", "bytearray", "TypeError", "check_copy", "map"], "class_names": ["use_metaclass", "MyStr", "AbstractPickleModuleTests", "ExtensionSaver", "MyUnicode", "AbstractDispatchTableTests", "Recursive", "MyDict", "AbstractPicklerUnpicklerObjectTests", "MinimalIO", "MyPickler", "Nested", "B", "ComplexNewObjEx", "MyInt", "SlotList", "A", "BadUnpickler", "ZeroCopyBytes", "UnseekableIO", "REX_five", "MyClass", "BigmemPickleTests", "PyMethodsTest", "BBB", "MyFrozenSet", "Subclass", "BadPickler", "REX_six", "AbstractIdentityPersistentPicklerTests", "AAA", "ZeroCopyBytearray", "MySet", "PicklableNDArray", "C", "AbstractUnpickleTests", "K", "initarg", "REX_state", "Object", "MyFloat", "BadGetattr", "AbstractPersistentPicklerTests", "MyList", "SimpleNewObj", "REX_four", "D", "MyComplex", "ComplexNewObj", "REX_seven", "ChunkAccumulator", "pickling_metaclass", "AbstractPickleTests", "REX_one", "MyTuple", "AbstractHookTests", "REX_two", "myint", "metaclass", "REX_three", "AbstractCustomPicklerClass", "E"], "class_method_calls": ["functools.reduce", "self._proto", "unpickler.memo", "code.decode", "pickle.INT", "loaded.object", "__main__.E", "pickletools.dis", "pb.raw", "bytearray.maketrans", "copyreg.add_extension", "self.FRAME_SIZE_MIN", "time.localtime", "shutil.rmtree", "np.testing", "self.dump", "pickle.HIGHEST_PROTOCOL", "x.__dict__", "self.a", "self._test_recursive_dict_key", "__main__.C", "o.attr", "self.pickler_class", "op.code", "y.__dict__", "pickletools.genops", "self._testdata", "self.assertNotIn", "p.dispatch_table", "self.subTest", "f.seek", "self.reduce_args", "pickle.STOP", "self.assertListEqual", "self.assertIsNot", "pickle.PicklingError", "os.path", "x.append", "struct.error", "self.check_dumps_loads_oob_buffers", "object.__reduce__", "os.statvfs", "self.code", "self._test_recursive_tuple_and_dict", "x.extend", "self.loads", "c.foo", "buffers.append", "self._test_recursive_list", "pickled.startswith", "pickled.rindex", "loaded.encoding", "pickle.BYTEARRAY8", "collections.UserList", "e.restore", "pickle.TUPLE2", "f.__module__", "self.bad_stack_errors", "pickle.NEWOBJ_EX", "x._proto", "X.__name__", "math.log", "self.fail", "buf.getvalue", "self.read", "PyMethodsTest.cheese", "a.__class__", "t2.join", "copyreg.remove_extension", "collections.UserDict", "self.FRAME_SIZE_TARGET", "__main__.D", "io.UnsupportedOperation", "self.foo", "list.__len__", "cls.__new__", "self.pair", "os.mkdir", "pickler.memo", "pickling_metaclass.__reduce__", "pickle.BINUNICODE", "opcode.name", "f.__qualname__", "self.readonly", "pickle.PROTO", "self.write", "self.assertRaises", "x._reduce_called", "pickle.EXT1", "pickle.BINSTRING", "bio.getvalue", "pickle.EXT2", "self.load_count", "locking_import_module.encode", "PyMethodsTest.biscuits", "pickle.PERSID", "AbstractUnpickleTests._testdata", "pickle.PickleBuffer", "f.getvalue", "pickle.APPENDS", "m.tobytes", "pickle.SETITEMS", "self._test_recursive_tuple_and_dict_key", "dict.fromkeys", "pickle.TUPLE1", "obj.__slots__", "obj.__dict__", "t1.join", "AbstractUnpickleTests.assert_is_copy", "objcopy.__dict__", "x.table", "self._bio", "self.check_unpickling_error", "weakref.proxy", "threading.Barrier", "os.curdir", "support.skip_if_pgo_task", "self.assertIsNone", "y.state", "object.__reduce_ex__", "x.bar", "m.obj", "new.array", "self.assertLess", "self.value", "pickle.NEXT_BUFFER", "pickle.NEWTRUE", "y._proto", "self.assertLessEqual", "self.false_count", "C.__base__", "x.state", "self.addCleanup", "pickle.TUPLE", "pickle.EXT4", "dbm.whichdb", "unpickler.load", "self._test_recursive_collection_and_inst", "x.attr", "pickle.EMPTY_TUPLE", "exc.__class__", "self.assertDictEqual", "Recursive.__qualname__", "f.truncate", "other.state", "io.BytesIO", "primed.load", "other.items", "pickle.UnpicklingError", "obj.a", "non_ascii_str.encode", "pickle.GLOBAL", "C.sample", "pickled.index", "x.abc", "c.bar", "loaded.end", "arr.T", "self.__class__", "os.stat", "io.BufferedRandom", "f.__name__", "unittest.skipUnless", "pickle.LONG1", "support.gc_collect", "self.assertNotEqual", "self.assertGreaterEqual", "ComplexNewObjEx.__new__", "exc.__name__", "self.assertIs", "pickle.ADDITEMS", "x.foo", "np.arange", "collections.defaultdict", "self.truncated_errors", "primed.memo", "self._reduce_called", "_testbuffer.ND_WRITABLE", "pickler.fast", "y.keys", "locker_module.encode", "D.__module__", "pickle.TUPLE3", "self.assertTrue", "other.array", "x.ctypes", "pickle.STACK_GLOBAL", "stream.seek", "_testbuffer.ndarray", "other.table", "pickle.FRAME", "MyDict.fromkeys", "Nested.A", "b.__class__", "self.items", "pickle.BINBYTES", "pickle.LONG4", "self.id_count", "f.tell", "self._check_pickling_with_opcode", "self.readline", "self.Unpickler", "primed.dump", "barrier.wait", "self._check_multiple_unpicklings", "self.check_frame_opcodes", "arr.flags", "f.write", "C.__module__", "pickle.LONG", "support.unlink", "pickle.NEWFALSE", "obj.c_contiguous", "x.value", "pickle.BINUNICODE8", "i.attr", "self.load_false_count", "filelike.getvalue", "f.close", "SimpleNewObj.__new__", "y.add", "results.append", "result.reduce_args", "self.assertRaisesRegex", "Recursive.mod", "self.assertIn", "self.produce_global_ext", "other.__dict__", "self.str", "self.b", "self.Pickler", "unittest.skipIf", "pickler.dump", "support.verbose", "__name__.encode", "writer.concatenate_chunks", "Subclass.Nested", "writer.chunks", "support.cpython_only", "pickle.dumps", "threading.Thread", "self.unpickler_class", "self._check_return_correct_type", "self.__dict__", "t2.start", "Subclass.count", "self.assertEqual", "self.pickler", "exception_pickle.replace", "pickle.APPEND", "self._test_dispatch_table", "self._test_recursive_dict", "loaded.start", "x.items", "copyreg.pickle", "op.name", "frame_starts.append", "copyreg._inverted_registry", "self.get_dispatch_table", "self.getvalue", "objects.append", "self.assertIsInstance", "self.assert_is_copy", "PyMethodsTest.Nested", "l.append", "pickler.clear_memo", "obj.zero_copy_reconstruct", "int.from_bytes", "set.__contains__", "pickle.SETITEM", "pickle.PickleError", "y.ctypes", "loaded.keys", "pickle.loads", "sys.maxsize", "ComplexNewObj.__new__", "self.table", "pickle.READONLY_BUFFER", "unittest.TestCase", "self.assertFalse", "t1.start", "self.state", "loaded.reason", "Recursive.__module__", "PyMethodsTest.wine", "locker.barrier", "self.buffer_like_objects", "obj.readonly", "other.reduce_args", "pickle.NEWOBJ", "self.assertGreater", "y._reduce_called", "self._test_recursive_tuple_and_list", "self.chunks", "classes.remove", "E.__module__", "objcopy.__slots__", "sys.modules", "pickle.NONE", "self.dumps", "str.index", "pickle.SHORT_BINBYTES", "struct.pack", "pickle.BINBYTES8", "weakref.ref", "self.array", "sys.path", "self.load", "p.dump"]}, "profilee.py": {"libraries": ["sys"], "function_names": ["__getattr__", "helper", "testfunc", "helper2", "helper1", "subhelper", "mul", "timer", "factorial", "helper2_indirect"], "function_calls": ["helper", "helper2", "helper1", "subhelper", "C", "mul", "factorial", "helper2_indirect", "range", "hasattr"], "class_names": ["C"], "class_method_calls": ["sys.exc_info", "lst.append"]}, "pyclbr_input.py": {"libraries": [], "function_names": ["bm", "m", "cm", "om", "foo", "sm", "f"], "function_calls": ["Other"], "class_names": ["B", "Other", "C"], "class_method_calls": ["Other.om"]}, "pydoc_mod.py": {"libraries": [], "function_names": ["get_answer", "doc_func", "nodoc_func", "say_no", "__init__", "is_it_true"], "function_calls": [], "class_names": ["A", "B", "C"], "class_method_calls": ["self.say_no", "self.get_answer"]}, "pydocfodder.py": {"libraries": ["types"], "function_names": ["AB_method", "_setx", "A_method", "AD_method", "ABC_method", "ABCD_method", "ACD_method", "BCD_method", "B_method", "__call__", "__init__", "_delx", "D_method", "CD_method", "C_method", "BC_method", "_getx", "BD_method", "A_staticmethod", "AC_method", "ABD_method", "A_classmethod"], "function_calls": ["get_desc", "set_desc", "property", "staticmethod", "classmethod", "del_desc", "print"], "class_names": ["get_desc", "C_new", "set_desc", "D_classic", "B_new", "A_new", "FunkyProperties", "D_new", "B_classic", "del_desc", "C_classic", "A_classic"], "class_method_calls": ["inst.desc", "self.attr", "self.desc", "types.ModuleType"]}, "pythoninfo.py": {"libraries": ["pwd", "_testcapi", "_decimal", "shlex", "_winapi", "warnings", "subprocess", "test.support", "sqlite3", "resource", "sysconfig", "traceback", "platform", "datetime", "test.test_socket", "locale", "socket", "os", "re", "time", "_tkinter", "_testinternalcapi.get_configs", "zlib", "_ssl", "errno", "xml.parsers.expat", "tkinter", "_gdbm._GDBM_VERSION", "__future__.print_function", "ssl", "sys", "readline", "ctypes"], "function_names": ["collect_test_socket", "collect_resource", "collect_subprocess", "collect_locale", "copy_attr", "get_infos", "collect_socket", "call_func", "collect_gdbm", "collect_urandom", "__init__", "format_attr", "collect_builtins", "collect_testcapi", "collect_pwd", "collect_tkinter", "copy_attributes", "collect_get_config", "dump_info", "collect_sys", "collect_readline", "collect_os", "collect_test_support", "collect_cc", "collect_expat", "collect_zlib", "collect_decimal", "collect_windows", "collect_sqlite", "normalize_text", "collect_datetime", "collect_platform", "collect_sysconfig", "collect_gdb", "collect_ssl", "add", "main", "collect_info", "format_groups", "collect_time"], "function_calls": ["get_configs", "info_add", "frozenset", "sorted", "getattr", "copy_attr", "repr", "isinstance", "call_func", "str", "formatter", "collect_func", "copy_attributes", "dump_info", "ValueError", "dir", "func", "bool", "hasattr", "normalize_text", "len", "RtlAreLongPathsEnabled", "PythonInfo", "main", "collect_info", "filter", "map", "print"], "class_names": ["PythonInfo"], "class_method_calls": ["os.getrandom", "sys.dllhandle", "ssl._create_default_https_context", "RtlAreLongPathsEnabled.argtypes", "uname.startswith", "errno.ENOSYS", "os.getuid", "datetime.datetime", "ssl.SSLContext", "traceback.print_exc", "stdout.splitlines", "platform.architecture", "tcl.call", "os.GRND_NONBLOCK", "platform.platform", "proc.communicate", "ntdll.RtlAreLongPathsEnabled", "func.__name__", "ctypes.c_ubyte", "self.info", "_ssl.get_default_verify_paths", "resource.getrlimit", "text.strip", "sys.exit", "tkinter.Tcl", "collect_func.__name__", "os.getgrouplist", "shlex.split", "info.add", "os.umask", "name.startswith", "subprocess.Popen", "CC.split", "ctypes.WinDLL", "exc.errno", "entry.pw_gid", "subprocess.STDOUT", "warnings.catch_warnings", "pwd.getpwuid", "value.strip", "locale.getpreferredencoding", "time.get_clock_info", "re.sub", "platform.python_implementation", "_winapi.GetModuleFileName", "RtlAreLongPathsEnabled.restype", "float.__getformat__", "env_names.extend", "version.splitlines", "socket.gethostname", "subprocess.PIPE", "platform.libc_ver", "os.environ", "value.replace", "os.getlogin", "proc.returncode", "time.time", "entry.pw_name", "sys.getfilesystemencodeerrors", "sys.stderr", "sys.getfilesystemencoding", "name.upper", "args.append", "uname.endswith", "infos.items", "sysconfig.get_config_var", "ssl._create_stdlib_context", "info.get_infos", "attr.startswith"]}, "re_tests.py": {"libraries": [], "function_names": [], "function_calls": ["range", "chr"], "class_names": [], "class_method_calls": ["tests.extend"]}, "regrtest.py": {"libraries": ["sys", "test.libregrtest.main", "os", "importlib"], "function_names": ["_main"], "function_calls": ["len", "main", "_main"], "class_names": [], "class_method_calls": ["sys.argv", "sys.path", "os.path"]}, "relimport.py": {"libraries": ["test_import.*"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "reperf.py": {"libraries": ["re", "time"], "function_names": ["timefunc", "main"], "function_calls": ["timefunc", "main", "func", "range", "print"], "class_names": [], "class_method_calls": ["re.compile", "p.findall", "time.perf_counter", "func.__name__", "p.sub", "p.split"]}, "sample_doctest.py": {"libraries": ["doctest"], "function_names": ["test_silly_setup", "bar", "x_is_one", "w_blank", "foo", "test_suite", "y_is_one"], "function_calls": [], "class_names": [], "class_method_calls": ["doctest.DocTestSuite"]}, "sample_doctest_no_docstrings.py": {"libraries": [], "function_names": ["__init__"], "function_calls": [], "class_names": ["Foo"], "class_method_calls": []}, "sample_doctest_no_doctests.py": {"libraries": [], "function_names": ["__init__"], "function_calls": [], "class_names": ["Foo"], "class_method_calls": []}, "seq_tests.py": {"libraries": ["unittest", "itertools.chain", "sys", "pickle", "test.support"], "function_names": ["test_constructors", "itermulti", "test_index", "test_iadd", "test_truth", "__eq__", "test_minmax", "test_bigrepeat", "test_free_after_iterating", "test_getitemoverwriteiter", "test_contains_fake", "__init__", "test_count", "test_contains_order", "test_len", "__len__", "test_imul", "__iter__", "test_getitem", "test_pickle", "__next__", "test_contains", "test_subscript", "test_addmul", "iterfunc", "test_repeat", "test_getslice", "__getitem__"], "function_calls": ["min", "LyingTuple", "T", "AllEq", "BadExc", "subclass", "id", "LyingList", "iter", "str", "IterGenExc", "tuple", "IterFuncStop", "OtherSeq", "range", "IterNextOnly", "BadCmp", "slice", "int", "next", "IterNoNext", "hasattr", "len", "StopCompares", "g", "max", "chain", "iterfunc", "Sequence", "pow", "IterGen", "map"], "class_names": ["IterNextOnly", "BadCmp", "IterFunc", "StopCompares", "LyingTuple", "T", "AllEq", "DoNotTestEq", "IterGenExc", "CommonTest", "Sequence", "BadExc", "IterFuncStop", "subclass", "IterGen", "IterNoNext", "OtherSeq", "LyingList"], "class_method_calls": ["support.check_free_after_iterating", "x.__mul__", "checklast.__contains__", "self.assertEqual", "self.assertNotEqual", "self.assertIn", "u.__getitem__", "u.count", "u.__contains__", "self.assertNotIn", "self.assertRaises", "x.__imul__", "unittest.TestCase", "pickle.HIGHEST_PROTOCOL", "a.count", "pickle.loads", "self.seqn", "self.__data", "self.assertIsNot", "sys.maxsize", "self.i", "a.__getitem__", "a.index", "pickle.dumps", "self.assertTrue", "self.type2test", "self.assertFalse", "u.index"]}, "signalinterproctester.py": {"libraries": ["unittest", "time", "signal", "sys", "subprocess", "os"], "function_names": ["subprocess_send_signal", "sigusr1_handler", "setUp", "sighup_handler", "wait_signal", "test_interprocess_signal"], "function_calls": ["str"], "class_names": ["InterProcessSignalTests", "SIGUSR1Exception"], "class_method_calls": ["time.monotonic", "sys.executable", "self.assertEqual", "os.getpid", "signal.pause", "self.got_signals", "signal.SIGHUP", "self.fail", "self.sigusr1_handler", "child.wait", "subprocess.Popen", "self.assertRaises", "signal.alarm", "signal.SIGALRM", "signal.signal", "signal.default_int_handler", "self.sighup_handler", "self.subprocess_send_signal", "signal.SIGUSR1", "unittest.main", "signal.SIGUSR2", "self.wait_signal", "unittest.TestCase", "signal.SIG_IGN"]}, "sortperf.py": {"libraries": ["time", "random", "sys", "tempfile", "os", "marshal"], "function_names": ["flush", "randfloats", "doit", "tabulate", "main"], "function_calls": ["list", "len", "flush", "randfloats", "doit", "tuple", "tabulate", "r", "int", "main", "hash", "open", "map", "range", "print"], "class_names": [], "class_method_calls": ["fp.close", "L.reverse", "os.path", "marshal.dump", "os.unlink", "marshal.load", "random.random", "result.extend", "temp.reverse", "L.sort", "tempfile.gettempdir", "sys.argv", "random.randrange", "time.perf_counter", "L.extend", "random.seed", "sys.stdout"]}, "ssl_servers.py": {"libraries": ["pprint", "urllib.parse", "http.server.SimpleHTTPRequestHandler", "threading", "http.server.BaseHTTPRequestHandler", "http.server.HTTPServer", "argparse", "ssl", "sys", "test.support", "os"], "function_names": ["cleanup", "stop", "__str__", "get_request", "do_GET", "log_message", "run", "start", "__init__", "translate_path", "make_https_server", "log_request", "do_HEAD"], "function_calls": ["len", "str", "HTTPSServer", "HTTPSServerThread", "filter", "print"], "class_names": ["RootedHTTPRequestHandler", "HTTPSServer", "StatsRequestHandler", "HTTPSServerThread"], "class_method_calls": ["sock.context", "argparse.ArgumentParser", "args.verbose", "pprint.pformat", "self.do_GET", "context.load_dh_params", "args.use_stats_handler", "sys.stdout", "path.split", "os.getcwd", "urllib.parse", "self.rfile", "args.curve_name", "sock.cipher", "self.end_headers", "server.start", "threading.Event", "case.addCleanup", "server.serve_forever", "self.root", "ssl.Purpose", "self.request", "args.dh_file", "parser.add_argument", "context.set_ecdh_curve", "context.session_stats", "self.wfile", "sock.compression", "self.log_date_time_string", "BaseHTTPRequestHandler.log_request", "self.server_port", "flag.wait", "support.verbose", "self.send_header", "handler_class.root", "args.ciphers", "self.socket", "self.daemon", "context.load_cert_chain", "self.server_name", "args.port", "ssl.create_default_context", "os.path", "self.flag", "self.port", "server.join", "context.set_ciphers", "sys.stderr", "self.context", "self.send_response", "self.__class__", "_HTTPServer.__init__", "self.server", "server.stop", "support.HOST", "parser.parse_args", "threading.Thread", "body.encode"]}, "ssltests.py": {"libraries": ["sys", "subprocess", "ssl"], "function_names": ["run_regrtests"], "function_calls": ["run_regrtests", "print"], "class_names": [], "class_method_calls": ["subprocess.call", "ssl.OPENSSL_VERSION", "sys.exit", "sys.executable", "sys.argv", "args.extend"]}, "string_tests.py": {"libraries": ["unittest", "_testcapi.UINT_MAX", "collections.UserList", "sys", "struct", "_testcapi.INT_MAX", "_testcapi.PY_SSIZE_T_MAX", "test.support", "string"], "function_names": ["test_endswith", "test_istitle", "test_index", "checkequal", "test_swapcase", "test_lower", "test_splitlines", "test_capitalize", "test_find", "test_isupper", "test_rindex", "test_strip", "fixtype", "test_isspace", "test_upper", "test_rjust", "test_floatformatting", "test_center", "test_isdigit", "test_find_etc_raise_correct_error_messages", "test_extended_getslice", "__init__", "test_fixtype", "test_additional_rsplit", "test_bug1001011", "test_count", "test_additional_split", "test_expandtabs", "test_isalpha", "test_formatting_c_limits", "test_replace", "test_join", "test_partition", "test_mul", "__str__", "test_startswith", "test_islower", "__len__", "checkraises", "test_title", "test_formatting", "test_rpartition", "test_none_arguments", "test_inplace_rewrites", "test_rfind", "test_replace_overflow", "test_hash", "f", "test_subscript", "test_capitalize_nonascii", "test_slice", "test_isascii", "test_isalnum", "test_zfill", "test_strip_whitespace", "checkcall", "test_split", "test___contains__", "test_ljust", "test_rsplit", "__getitem__"], "function_calls": ["UserList", "getattr", "subclass", "subtype", "isinstance", "str", "tuple", "hash", "dict", "EQ", "range", "X", "list", "set", "slice", "type", "float", "f", "BadSeq2", "divmod", "len", "Sequence", "bytes", "t"], "class_names": ["MixinStrUnicodeUserStringTest", "BadSeq1", "MixinStrUnicodeTest", "Sequence", "subclass", "subtype", "BaseTest", "CommonTest", "BadSeq2", "X"], "class_method_calls": ["teststrings.add", "string.digits", "s.find", "i.count", "kwargs.items", "self.assertEqual", "self.assertNotEqual", "struct.calcsize", "s.endswith", "cm.exception", "self.assertRaisesRegex", "self.assertIs", "obj.items", "self.fail", "s.index", "self.checkcall", "self.checkequal", "i.rfind", "self.assertRaises", "unittest.skipIf", "s.rfind", "s.rindex", "s.count", "PY_SSIZE_T_MAX.bit_length", "self.checkraises", "self.assertIsNot", "entry.append", "string.ascii_letters", "self.seq", "self.fixtype", "i.replace", "sys.maxsize", "i.find", "support.cpython_only", "self.__class__", "self.contains_bytes", "s.startswith", "self.type2test"]}, "fd_status.py": {"libraries": ["sys", "os", "stat", "errno"], "function_names": [], "function_calls": ["map", "len", "range", "print"], "class_names": [], "class_method_calls": ["stat.S_ISDOOR", "st.st_mode", "os.fstat", "errno.EBADF", "os.sysconf", "sys.argv", "fds.append", "e.errno"]}, "input_reader.py": {"libraries": ["sys"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["sys.stdin"]}, "qcat.py": {"libraries": ["sys"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["sys.stdout", "sys.stdin"]}, "qgrep.py": {"libraries": ["sys"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["sys.argv", "sys.stdout", "sys.stdin"]}, "sigchild_ignore.py": {"libraries": ["sys", "signal", "subprocess", "time"], "function_names": [], "function_calls": ["RuntimeError"], "class_names": [], "class_method_calls": ["p.poll", "time.sleep", "signal.SIGCHLD", "signal.signal", "sys.executable", "subprocess.Popen", "signal.SIG_IGN"]}, "script_helper.py": {"libraries": ["test.support.strip_python_stderr", "os.path", "zipfile", "importlib", "py_compile", "collections", "sys", "test.support.make_legacy_pyc", "subprocess", "os", "importlib.util.source_from_cache"], "function_names": ["make_zip_pkg", "assert_python_failure", "_assert_python", "make_script", "assert_python_ok", "kill_python", "make_zip_script", "interpreter_requires_environment", "make_pkg", "run_python_until_end", "fail", "spawn_python"], "function_calls": ["len", "strip_python_stderr", "make_script", "_assert_python", "range", "interpreter_requires_environment", "source_from_cache", "dict", "open", "make_legacy_pyc", "run_python_until_end", "AssertionError", "_PythonRunResult"], "class_names": ["_PythonRunResult"], "class_method_calls": ["os.mkdir", "unlink.extend", "sys.platform", "p.wait", "sys.executable", "proc.communicate", "subprocess._cleanup", "p.stdin", "p.stdout", "self.rc", "script_name.split", "err.decode", "subprocess.Popen", "script_file.write", "env.update", "cmd_line.append", "subprocess.STDOUT", "subprocess.check_call", "zipfile.ZipFile", "kw.setdefault", "os.sep", "importlib.invalidate_caches", "subprocess.PIPE", "self.err", "os.environ", "os.unlink", "collections.namedtuple", "proc.returncode", "cmd_line.extend", "proc.kill", "unlink.append", "os.path", "out.decode", "env_vars.pop", "res.rc", "zip_file.write", "os.extsep", "res.fail", "subprocess.CalledProcessError", "self.out", "py_compile.compile"]}, "testresult.py": {"libraries": ["unittest", "io", "xml.etree.ElementTree", "time", "datetime.datetime", "sys", "functools", "traceback"], "function_names": ["test_pass", "__write", "printErrorList", "__makeErrorDict", "addExpectedFailure", "test_pass_slow", "_add_result", "addSkip", "test_error", "__init__", "printErrors", "test_fail", "addFailure", "addUnexpectedSuccess", "addSuccess", "run", "__getId", "startTest", "get_test_runner", "get_xml_element", "get_test_runner_class", "addError"], "function_calls": ["isinstance", "len", "test", "super", "test_id", "RuntimeError", "str", "RegressionTestResult", "sum", "print", "hasattr", "bool", "runner_cls", "get_test_runner_class", "repr"], "class_names": ["QuietRegressionTestRunner", "TestTests", "RegressionTestResult"], "class_method_calls": ["ET.Element", "err_type.__module__", "self.result", "self.__suite", "self.failures", "unittest.TextTestResult", "runner.run", "sys.stdout", "self.__e", "test.id", "ET.SubElement", "self.separator1", "self.__start_time", "functools.partial", "self.fail", "s.decode", "io.StringIO", "unittest.TextTestRunner", "ET.tostringlist", "args.items", "self.errors", "e2.set", "self._add_result", "datetime.utcnow", "self.separator2", "stream.getvalue", "unittest.makeSuite", "self._stdout_buffer", "self.printErrorList", "e2.text", "args.pop", "self.buffer", "traceback.format_exception", "suite.addTest", "time.perf_counter", "self.getDescription", "self.stream", "time.sleep", "self.__results", "self._stderr_buffer", "sys.stderr", "self.testsRun", "result.get_xml_element", "unittest.TestSuite", "self.__getId", "sys.argv", "self.__makeErrorDict", "err_type.__name__", "self.__verbose", "unittest.TestCase", "self.__write", "v.items", "e.set"]}, "test___all__.py": {"libraries": ["unittest", "sys", "_socket", "test.support", "os"], "function_names": ["test_all", "check_all", "walk_modules"], "function_calls": ["sorted", "FailedImport", "set", "NoAll", "open", "print", "exec", "hasattr"], "class_names": ["FailedImport", "NoAll", "AllTest"], "class_method_calls": ["failed_imports.append", "sys.platform", "m.rpartition", "self.assertEqual", "ignored.append", "sys.modules", "self.fail", "self.check_all", "f.read", "self.subTest", "self.walk_modules", "support.verbose", "support.check_warnings", "unittest.main", "os.path", "os.listdir", "e.__class__", "self.assertCountEqual", "unittest.TestCase", "fn.endswith"]}, "test___future__.py": {"libraries": ["unittest", "__future__"], "function_names": ["check", "test_names", "test_attributes"], "function_calls": ["check", "isinstance", "len", "compile", "e", "getattr", "dir", "a", "hasattr"], "class_names": ["FutureTest"], "class_method_calls": ["value.getMandatoryRelease", "__future__.all_feature_names", "value.compiler_flag", "__future__._Feature", "self.assertEqual", "self.assertTrue", "unittest.TestCase", "given_feature_names.remove", "value.getOptionalRelease", "unittest.main"]}, "test__locale.py": {"libraries": ["_locale.LC_CTYPE", "unittest", "platform.uname", "_locale.LC_ALL", "_locale.localeconv", "_locale.setlocale", "sys", "locale", "_locale.LC_NUMERIC", "_locale.nl_langinfo", "_locale.RADIXCHAR", "_locale.THOUSEP", "_locale.Error"], "function_names": ["test_lc_numeric_nl_langinfo", "test_lc_numeric_localeconv", "setUp", "test_lc_numeric_basic", "setUpModule", "numeric_tester", "tearDown", "accept", "test_float_parsing"], "function_calls": ["uname", "localeconv", "len", "eval", "nl_langinfo", "setlocale", "int", "type", "float", "accept", "print"], "class_names": ["_LocaleTests"], "class_method_calls": ["known_numerics.get", "self.numeric_tester", "locale.getpreferredencoding", "self.oldlocale", "sys.platform", "unittest.SkipTest", "locale.LC_ALL", "locales.append", "sys.version", "self.assertRaises", "unittest.skipUnless", "locale.setlocale", "self.assertEqual", "self.skipTest", "unittest.TestCase", "unittest.main", "loc.split", "self.lc_numeric_err_msg"]}, "test__opcode.py": {"libraries": ["unittest", "_opcode.stack_effect", "test.support.import_module", "dis"], "function_names": ["test_stack_effect_jump", "test_stack_effect"], "function_calls": ["max", "set", "import_module", "range", "stack_effect"], "class_names": ["OpcodeTests"], "class_method_calls": ["dis.hasjabs", "dis.HAVE_ARGUMENT", "self.assertEqual", "dis.hasjrel", "self.subTest", "unittest.TestCase", "unittest.main", "dis.opmap", "self.assertRaises"]}, "test__osx_support.py": {"libraries": ["unittest", "platform", "_osx_support", "sys", "test.support", "os", "stat"], "function_names": ["test_get_platform_osx", "setUp", "test__find_appropriate_compiler", "test__save_modified_value_unchanged", "test__check_for_unavailable_sdk", "add_expected_saved_initial_values", "test__get_system_version", "test__override_all_archs", "test__remove_original_values", "test__find_executable", "test__remove_universal_flags", "test__save_modified_value", "test__remove_unsupported_archs", "test__check_for_unavailable_sdk_alternate", "test__remove_universal_flags_alternate", "test__find_build_tool", "test__supports_universal_builds", "test__read_output"], "function_calls": ["int", "open", "tuple"], "class_names": ["Test_OSXSupport"], "class_method_calls": ["sys.platform", "unittest.skipUnless", "self.assertEqual", "self.assertNotEqual", "self.env", "stat.S_IRWXU", "test.support", "_osx_support._find_executable", "_osx_support._find_appropriate_compiler", "platform.mac_ver", "os.getcwd", "f.write", "_osx_support._supports_universal_builds", "_osx_support._remove_unsupported_archs", "_osx_support._get_system_version", "self.addCleanup", "_osx_support._find_build_tool", "_osx_support._override_all_archs", "_osx_support._save_modified_value", "_osx_support._read_output", "_osx_support.get_platform_osx", "_osx_support._remove_universal_flags", "_osx_support._remove_original_values", "self.assertIsNone", "self.prog_name", "self.add_expected_saved_initial_values", "unittest.main", "expected_vars.update", "os.path", "config_vars.copy", "self.temp_path_dir", "os.chmod", "_osx_support._check_for_unavailable_sdk", "self.assertTrue", "self.maxDiff", "unittest.TestCase"]}, "test__xxsubinterpreters.py": {"libraries": ["unittest", "threading", "textwrap.dedent", "time", "contextlib", "sys", "tempfile", "pickle", "test.support", "os", "test.support.script_helper", "itertools", "collections.namedtuple"], "function_names": ["_assert_closed", "test_run_string_arg_resolved", "test_multiple_users", "test_after_destroy_all", "from_raw", "__index__", "cid", "test_subinterpreter", "test_shared_overwrites_default_vars", "test_SystemExit", "test_str", "get_interpreter", "__init__", "test_close_send_with_unused_items_forced", "test_bad_kwargs", "run_actions", "clean_up_channels", "_prep_interpreter", "test_create_thread", "__str__", "test_run_string_arg_unresolved", "test_from_subinterpreter", "test_close_recv_with_unused_items_unforced", "test_after_creating", "test_sequential_ids", "test_bytes_for_script", "_running", "test_close_multiple_users", "test_after_destroy_some", "_assert_closed_in_interp", "tearDown", "_iter_close_action_sets", "test_close_defaults_with_unused_items", "_assert_values", "test_with_shared", "test_in_subinterpreter", "test_used_multiple_times_by_single_user", "test_send_recv_different_interpreters_and_threads", "iter_action_sets", "test_close_send_with_unused_items_unforced", "test_send_recv_same_interpreter", "test_single_user", "test_with_unused_items", "state", "test_non_shareable_int", "test_success", "test_close_recv_with_unused_items_forced", "test_recv_not_found", "test_initial", "clean_up", "test_in_thread", "test_failure", "test_default_kwargs", "test_fork", "_new_channel", "test_close_multiple_times", "test_send_not_found", "test_ids_global", "test_close_both_with_unused_items_forced", "_skim_close_tests", "_run_output", "_iter_use_action_sets", "test_bytes", "resolve_interp", "test_in_main", "test_bad_script", "test_strs", "test_close_both_with_unused_items_unforced", "f", "run_interp", "test_multiple_times", "assert_run_failed", "__new__", "test_still_running", "test_close_never_used", "test_recv_empty", "expect_closed_error", "test_bad_id", "test_close_single_user", "test_from_current", "test_from_sibling", "setUp", "iter_fixtures", "test_already_destroyed", "test_close_by_unassociated_interp", "incr", "_run_action", "test_singletons", "test_main", "test_send_recv_different_threads", "test_by_unassociated_interp", "test_never_used", "close", "expect_channel_closed", "test_close_if_unassociated", "test_in_threaded_subinterpreter", "_iter_close_tests", "test_one", "test_with_int", "test_shared_overwrites", "test_int", "test_still_running_at_exit", "test_invalid_syntax", "_iter_post_close_action_sets", "record_action", "test_send_recv_main", "test_not_shareable", "test_create_cid", "_close", "test_equality", "test_force_close", "test_repr", "run_action", "resolve_end", "decr", "test_already_running", "test_from_other_thread", "test_default_shareables", "test_error_id", "test_close", "test_after_destroying", "clean_up_interpreters", "test_coerce_id", "test_does_not_exist", "test_send_recv_different_interpreters", "test_sys_exit", "test_close_empty", "run", "test_types", "test_from_main", "test_with_kwargs", "run_interp_threaded", "test_no_kwargs", "test_main_reused", "_captured_script", "powerset", "test_unique_id", "fs", "test_partially", "_get_interpreter", "prep_interpreter", "test_close_used_multiple_times_by_single_user", "test_all", "_run_interp", "test_execution_namespace_is_main"], "function_calls": ["object", "dedent", "cls", "_run_action", "run_action", "repr", "isinstance", "_run", "Interpreter", "super", "combinations", "str", "clean_up_interpreters", "ChannelCloseFixture", "dict", "open", "Exception", "range", "clean_up_channels", "ValueError", "_run_output", "ChannelAction", "set", "_running", "int", "namedtuple", "type", "_captured_script", "bool", "ChannelState", "float", "SubBytes", "hasattr", "Cheese", "len", "run_interp", "Int", "FSFixture", "_run_interp", "exec", "print"], "class_names": ["IsRunningTests", "Interpreter", "ChannelTests", "ChannelCloseFixture", "IsShareableTests", "ChannelIDTests", "ExhaustiveChannelTests", "ShareableTypeTests", "ChannelAction", "DestroyTests", "CreateTests", "RunStringTests", "ChannelState", "ListAllTests", "SubBytes", "ChannelReleaseTests", "GetCurrentTests", "Cheese", "Int", "GetMainTests", "TestBase", "InterpreterIDTests"], "class_method_calls": ["self._assert_closed", "os.pipe", "self.closed", "self._new_channel", "threading.Lock", "self._iter_close_tests", "unittest.skipUnless", "interpreters.list_all", "self.assertEqual", "self.assertNotEqual", "self._iter_close_action_sets", "sys.stdout", "self.assertIs", "t.start", "pickle.load", "script_helper.spawn_python", "cid.send", "self._assert_closed_in_interp", "self.cid", "creator.name", "interpreters.get_current", "self.assertRaises", "self.iter_action_sets", "fix.expect_closed_error", "Interpreter.from_raw", "self.assert_run_failed", "interp.name", "interpreters.channel_list_all", "self._close", "interpreters.channel_close", "self.assertTrue", "fix.clean_up", "fix.prep_interpreter", "interpreters.ChannelNotFoundError", "self.assertIsInstance", "interpreters.RunFailedError", "interpreters.is_shareable", "int.from_bytes", "support.import_module", "cm.exception", "self.creator", "self._known", "self.pending", "i.to_bytes", "extra.name", "self._state", "interpreters.is_running", "self.assertNotIn", "self._iter_post_close_action_sets", "state.decr", "script.replace", "interpreters._channel_id", "out.strip", "self.subTest", "file.seek", "state.incr", "unittest.skip", "self.iter_fixtures", "interpreters.ChannelEmptyError", "lock.acquire", "fix.end", "contextlib.contextmanager", "self.assertIsNone", "self._prepped", "self.assertIsNot", "sys.maxsize", "action.action", "interpreters.create", "unittest.TestCase", "self.assertFalse", "fix.interp", "self.state", "self.action", "state.close", "interpreters.InterpreterID", "file.name", "self.extra", "fix.record_action", "other.name", "self._prep_interpreter", "ChannelCloseFixture.QUICK", "itertools.chain", "action.resolve_end", "support.temp_dir", "rpipe.read", "self._assert_values", "action.resolve_interp", "lock.release", "fix.cid", "self._get_interpreter", "interpreters.ChannelClosedError", "self.run_action", "unittest.main", "ids.add", "interpreters.channel_release", "file.flush", "self.other", "caught.exception", "proc.wait", "interpreters.ChannelID", "interpreters.get_main", "state.pending", "self.end", "ids.append", "self._fs", "self.run_actions", "spipe.write", "file.read", "fix.get_interpreter", "interpreters.ChannelNotEmptyError", "cls.QUICK", "interpreters.channel_recv", "tempfile.NamedTemporaryFile", "self.id", "interpreters.channel_destroy", "ns.pop", "self.name", "self._iter_use_action_sets", "fix.extra", "t.join", "self.assertIn", "cid.end", "creator.id", "interpreters.destroy", "interp.id", "self._cid", "state.closed", "script_helper.make_script", "seen.add", "fix.state", "interpreters.channel_send", "time.sleep", "self.interp", "fix.other", "interpreters.channel_create", "file.write", "threading.Thread", "interpreters.run_string"]}, "test_abc.py": {"libraries": ["unittest", "io", "types", "sys", "unittest.mock", "warnings", "test.support", "os", "marshal"], "function_names": ["ins", "test_find_module", "exec_module", "get_filename", "test_package_settings", "test_code_with_everything", "test_default_encoding", "closure", "__init__", "find_loader", "test_resource_path", "test_source_to_code_bytes", "load", "test_contents", "test_spec", "mock_methods", "set_data", "test_source_to_code_no_path", "test_no_set_data", "test_load_module", "test_superclasses", "test_get_code_no_path", "test_invalidate_caches", "open_resource", "path_stats", "test_find_loader", "test_code_bad_timestamp", "test_get_code", "load_module", "test_fresh", "module_repr", "test_is_package", "verify_code", "mock_get_code", "test_universal_newlines", "find_module", "test_decoded_source", "get_data", "verify_module", "setUp", "test_get_code_source_is_None", "test_get_source_encoding", "test_set_data_raises_exceptions", "get_source", "find_spec", "resource_path", "test_get_code_ImportError", "test_spec_with_portions", "test_no_bytecode", "test_no_spec", "test_subclasses", "loader", "test_create_module", "test_is_resource", "test_code_bad_magic", "test_source_to_code_path", "test_get_code_source_not_found", "test_get_data", "test_module_repr", "raise_OSError", "test_open_resource", "raise_exception", "test_source_to_code_source", "source_to_module", "contents", "is_resource", "test_dont_write_bytecode", "finder", "is_package", "test_spec_with_loader", "make_abc_subclasses", "test_get_filename", "test_reload", "test_module_returned", "test_get_code_None", "test_get_source", "test_source_to_code"], "function_calls": ["bytearray", "object", "len", "PathEntrySpecFinder", "compile", "list", "issubclass", "super", "getattr", "cls", "raise_exception", "MetaPathSpecFinder", "SpecLoader", "hasattr", "bytes", "exec", "make_abc_subclasses", "repr"], "class_names": ["ABCTestHarness", "ExecutionLoader", "InspectLoaderLoadModuleTests", "ResourceReader", "PathEntryFinder", "SourceLoaderGetSourceTests", "ResourceReaderDefaultsTests", "InspectLoaderDefaultsTests", "InheritanceTests", "InspectLoaderSourceToCodeTests", "SourceLoader", "SourceOnlyLoaderTests", "MetaPathFinderFindModuleTests", "PathEntryFinderDefaultsTests", "ExecutionLoaderDefaultsTests", "PathEntrySpecFinder", "MetaPathSpecFinder", "FileLoader", "SpecLoader", "LoaderLoadModuleTests", "SourceOnlyLoader", "SourceLoaderBytecodeTests", "ResourceLoaderDefaultsTests", "MetaPathFinder", "Loader", "MetaPathFinderDefaultsTests", "ResourceLoader", "InspectLoader", "PathEntryFinderFindLoaderTests", "InspectLoaderGetCodeTests", "LoaderDefaultsTests", "ExecutionLoaderGetCodeTests", "SourceLoaderTestHarness"], "class_method_calls": ["self.called_for", "self.abc", "test_util.split_frozen", "self._KIND", "self.assertEqual", "spec.loader", "self.assertIs", "self.bytecode", "warnings.catch_warnings", "self.mock_get_code", "mocked.return_value", "self.assertRaises", "self.util", "self.found", "self.SPLIT", "self.ExecutionLoaderSubclass", "module._", "source.encode", "types.ModuleType", "test_util.test_both", "module.__file__", "mock.get_source", "loader.found", "self.assertTrue", "module.__spec__", "self.InspectLoaderSubclass", "self.mock_methods", "cm.exception", "self.superclass_names", "self.loader", "module.__package__", "self.assertNotIn", "mock.source", "loader.get_code", "self._NAME", "cls.abc", "self.__test", "support.unload", "self.assertIsNone", "module.__cached__", "module.__name__", "finder.find_module", "self.finder", "os.path", "self.machinery", "data.extend", "source_mock.return_value", "sys.dont_write_bytecode", "abc.items", "module.__path__", "self.assertFalse", "finder.called_for", "self.source_mtime", "self.cached", "self.ins", "mocked_get_code.return_value", "finder.find_loader", "self.package", "self.addCleanup", "name_mock.side_effect", "warnings.simplefilter", "self.assertWarns", "self.path", "self.loader_mock", "unittest.main", "self.module_name", "self.init", "self.subclasses", "io.IncrementalNewlineDecoder", "self.superclasses", "mod.__loader__", "module.__loader__", "self.assertIsNotNone", "self.verify_module", "module.attr", "self.written", "self.verify_code", "test_util.import_importlib", "mocked_get_code.side_effect", "sys.modules", "self.source", "module.__dict__", "self.name", "test_util.uncache", "self.assertIn", "self.source_to_module", "self.setUp", "marshal.dumps", "code.co_filename", "unittest.skipIf", "base_class.__name__", "self.source_size", "name_mock.return_value", "loader.load_module", "self.bytecode_path", "spec.submodule_search_locations", "mock.patch", "loader.source_to_code", "self.load", "self.subclass_names", "cls._KIND", "self.__class__", "self.SourceOnlyLoaderMock"]}, "test_abstract_numbers.py": {"libraries": ["unittest", "operator", "numbers.Complex", "numbers.Rational", "numbers.Integral", "math", "numbers.Real"], "function_names": ["test_float", "test_complex", "test_int"], "function_calls": ["float", "int", "issubclass", "complex"], "class_names": ["TestNumbers"], "class_method_calls": ["operator.floordiv", "self.assertEqual", "self.assertTrue", "math.trunc", "unittest.TestCase", "self.assertFalse", "unittest.main", "operator.mod", "self.assertRaises"]}, "test_aifc.py": {"libraries": ["unittest", "test.support.TESTFN", "io", "test.support.findfile", "test.support.unlink", "test.audiotests", "audioop.byteswap", "unittest.mock", "sys", "struct", "aifc", "test.support.check_no_resource_warning"], "function_names": ["test_close_opened_files_on_error", "test_params_added", "test_write_markers_raises", "test_wrong_open_mode", "test_skipunknown", "test_write_header_comptype_raises", "test_write_header_raises", "test_write_header_comptype_sampwidth", "test_read_written", "test_write_params_bunch", "test_read_comm_kludge_compname_odd", "test_read_wrong_form", "test_write_params_raises", "read_written", "test_write_aiff_by_extension", "test_read_wrong_compression_type", "test_read_wrong_marks", "test_write_long_string_raises", "test_read_comm_kludge_compname_even", "test_read_markers", "test_read_wrong_number_of_channels", "test_write_markers_values", "test_read_raises", "test_read_wrong_sample_width", "test_write_params_singles", "test_read_no_comm_chunk", "test_read_no_ssnd_chunk"], "function_calls": ["findfile", "getattr", "str", "byteswap", "check_no_resource_warning", "float", "read_written"], "class_names": ["AifcALAWTest", "AifcPCM16Test", "AifcMiscTest", "AifcPCM8Test", "AIFCLowLevelTest", "AifcPCM32Test", "AifcPCM24Test", "AifcTest", "AifcULAWTest"], "class_method_calls": ["params.nchannels", "fout.getparams", "fout.setmark", "fout.aiff", "cm.warning", "sys.byteorder", "bytes.fromhex", "self.assertEqual", "params.nframes", "io.BytesIO", "fout.getnchannels", "fout.getnframes", "aifc.open", "fout.writeframes", "fout.setnchannels", "f.getframerate", "aifc._write_string", "self.assertRaisesRegex", "f.getcomptype", "fout.getmarkers", "f.getparams", "aifc._read_ulong", "aifc.Aifc_write", "audiotests.AudioMiscTests", "f.aiff", "self.addCleanup", "aifc.Error", "fout.setcomptype", "fout.aifc", "fout.getmark", "aifc._read_long", "fout.getframerate", "f.getmarkers", "f.getnchannels", "aifc._read_short", "self.assertRaises", "aifc._read_ushort", "f.seek", "f.getsampwidth", "self.assertWarns", "self.f", "f.getmark", "struct.pack", "params.comptype", "fout.setframerate", "fout.getcompname", "fout.close", "fout.tell", "f.setparams", "fout.setnframes", "fout.getsampwidth", "unittest.main", "aifc._HUGE_VAL", "fout.initfp", "self.fout", "fout.setparams", "f.getnframes", "fout.getcomptype", "mock.patch", "params.compname", "params.sampwidth", "params.framerate", "fout.setsampwidth", "audiotests.AudioTestsWithSourceFile", "f.getcompname", "f.close", "unittest.TestCase", "audiotests.AudioWriteTests"]}, "test_argparse.py": {"libraries": ["unittest", "textwrap", "inspect", "argparse", "shutil", "sys", "tempfile", "unittest.mock", "io.StringIO", "test.support", "os", "stat"], "function_names": ["no_groups", "test_nargs_optional_metavar_length3", "test_help_extra_prefix_chars", "_test", "test_no_argument_actions", "test_open_args", "test_parent_help", "test_nargs_optional_metavar_string", "test_optional_subparsers", "test_nargs_zeroormore_metavar_length1", "_test_required_subparsers", "test_get_default", "test_help_non_breaking_spaces", "test_parser_command_help", "test_nargs_oneormore_metavar_length3", "wrapper", "test_nargs_1_metavar_length3", "test_subparser_parents_mutex", "test_nargs_zeroormore_metavar_string", "test_set_defaults_no_args", "test_optional_optional_not_in_message", "test_argparse_module_encoding", "test_nongroup_first", "sysargs", "__init__", "test_failures_when_required", "listargs", "test_issue_15906", "test_alias_invocation", "get_parser", "test_help_alternate_prefix_chars", "test_subparser_parents", "test_parse_known_args", "stderr_to_parser_error", "test_wrapper", "test_nargs_1_metavar_length2", "test_set_defaults_subparsers", "test_required_const_actions", "test_parser", "test_groups_parents", "tearDown", "assertArgumentParserError", "test_multiple_parents_mutex", "test_basic", "error", "test_interleaved_groups", "test_nargs_None_metavar_length3", "test_print", "parse_args", "_test_subparser_help", "test_parse_args_failures", "test_remainder", "test_namespace_starkwargs_identifier", "test_nargs_zeroormore_metavar_length2", "extend", "test_set_defaults_same_as_add_argument", "test_print_file", "exit", "test_failures", "test_successes", "test_invalid_keyword_arguments", "test_exclusive_incompatible", "test_bad_type", "test_nargs_remainder_metavar_length0", "test_nargs_remainder_metavar_length1", "test_nargs_2_metavar_length0", "test_invalid_type", "test_format", "test_nargs_None_metavar_length1", "test_conflicting_parents_mutex", "test_invalid_add_argument_group", "test_nargs_3_metavar_length0", "__call__", "test_nargs_1_metavar_string", "test_w_big5_ignore", "test_help_when_required", "test_non_empty", "test_more_than_one_argument_actions", "test_optionals", "test_mixed", "test_misc", "test_exclusive", "test_resolve_error", "test_argument_error", "test_nargs_remainder_metavar_length3", "test_version_format", "test_arguments_tuple", "test_single_parent_mutex", "test_conflict_error", "test_type_function_call_with_non_string_default", "test_invalid_action", "test_help_with_metavar", "test_subparser2_help", "convert_arg_line_to_args", "test_subparser1_help", "test_nargs_3_metavar_string", "test_missing_destination", "do_test_no_exception", "test_wb_1", "test_nargs_remainder_metavar_string", "many_groups", "test", "test_equality_returns_notimplemented", "test_nargs_oneormore_metavar_length1", "setUp", "test_nargs_oneormore_metavar_string", "assertTypeError", "test_no_help", "__repr__", "test_required_subparsers_via_attribute", "test_version", "test_no_argument_no_const_actions", "test_main", "test_argument", "test_no_double_type_conversion_of_default", "test_nargs_1_metavar_length1", "test_nargs_remainder_metavar_length2", "test_required_subparsers_via_kwarg", "do_test_range_exception", "test_nargs_parser_metavar_length0", "assertPrintHelpExit", "test_r", "test_invalid_add_argument", "test_required_positional", "test_nargs_oneormore_metavar_length0", "test_same_argument_name_parents", "test_namespace_starkwargs_notidentifier", "assertStringEqual", "test_r_latin", "test_nargs_optional_metavar_length1", "test_required_subparsers_default", "test_single_granparent_mutex", "test_conflicting_parents", "test_help_when_not_required", "test_namespace_kwargs_and_starkwargs_notidentifier", "test_nargs_3_metavar_length2", "test_user_defined_action", "spam", "test_single_parent", "test_alternate_help_version", "test_nargs_parser_metavar_string", "test_nargs_optional_metavar_length2", "test_namespace", "test_subparser_title_help", "test_nargs_alphabetic", "test_usage_when_required", "test_successes_when_not_required", "test_help", "test_nargs_None_metavar_string", "test_test_argparse_module_encoding", "test_nargs_2_metavar_length1", "test_nargs_3_metavar_length3", "test_nargs_parser_metavar_length2", "test_set_defaults_parents", "test_nargs_1_metavar_length0", "test_usage_when_not_required", "test_equality", "test_nargs_None_metavar_length0", "test_nargs_oneormore_metavar_length2", "test_version_action", "__eq__", "do_test_exception", "test_group_first", "test_nargs_2_metavar_length2", "test_nargs_zero", "test_parsers_action_missing_params", "test_parse_args", "test_nargs_zeroormore_metavar_length0", "assertValueError", "test_arguments_list_positional", "do_test_invalid_exception", "test_nargs_zeroormore_metavar_length3", "one_group", "test_set_defaults_same_as_add_argument_group", "test_nargs_optional_metavar_length0", "test_error_alias_invocation", "test_optional_positional_not_in_message", "test_type_function_call_only_once", "test_successes_when_required", "custom_type", "test_constructor", "test_set_defaults_with_args", "test_argument_type_error", "test_type_function_call_with_string_default", "test_version_no_help", "test_alias_help", "test_arguments_tuple_positional", "test_multiple_parents", "_test_module_encoding", "test_missing_argument_name_in_message", "test_arguments_list", "create_readonly_file", "test_help_version_extra_arguments", "test_optional", "test_nargs_3_metavar_length1", "test_empty", "test_nargs_2_metavar_length3", "test_all_exports_everything_but_modules", "test_nargs_parser_metavar_length1", "test_nargs_None_metavar_length2", "get_my_type", "test_multiple_dest", "test_nargs_2_metavar_string", "_get_parser", "test_r_1_replace", "test_dest", "_test_mutex_ab", "test_invalid_option_strings", "test_set_defaults_on_parent_and_subparser", "test_nargs_parser_metavar_length3", "test_failures_when_not_required"], "function_calls": ["format", "sorted", "getattr", "ErrorRaisingArgumentParser", "FT", "vars", "repr", "isinstance", "test_main", "StdStreamComparer", "super", "TestHelpFormattingMetaclass", "str", "WFile", "NS", "tuple", "dict", "open", "print_", "AssertionError", "get_parser", "setattr", "StdIOBuffer", "AddTests", "ArgumentParserError", "list", "stderr_to_parser_error", "range", "format_usage", "C", "set", "type", "format_help", "Success", "MyType", "enumerate", "func", "ParserTesterMetaclass", "hasattr", "raises", "Sig", "add", "test_func", "RFile", "parse_args"], "class_names": ["TestPositionalsChoicesInt", "TestHelpSuppressOptionalGroup", "MyAction", "TestOptionalsActionStoreConst", "TestPrefixCharacterOnlyArguments", "TestPositionalsNargsNoneZeroOrMore1", "Action", "TestArgumentError", "ErrorRaisingArgumentParser", "TestPositionalsActionAppend", "TestHelpWrappingShortNames", "TestParentParsers", "TestOptionalsAlternatePrefixCharsMultipleShortArgs", "TestPositionalsNargsNoneOptional1", "TestPositionalsNargs2OneOrMore", "TestTypeFunctionCalledOnDefault", "TestOptionalsNargs3", "NS", "TestDefaultSuppress", "TestPositionalsNargsZeroOrMoreNone", "TestMutuallyExclusiveOptionalAndPositionalParent", "TestFileTypeW", "TestPositionalsNargsOptionalDefault", "TestOptionalsSingleDashCombined", "TestTypeFunctionCallOnlyOnce", "TestOptionalsSingleDashSubsetAmbiguous", "TestPositionalsNargsZeroOrMore1", "TestTypeRegistration", "TestPositionalsGroups", "TestOptionalsActionAppend", "TestPositionalsNargs2None", "TestGetDefault", "TestOptionalsNumeric", "TestOptionalsChoices", "TestPositionalsNargsOptionalConvertedDefault", "TestParserDefaultSuppress", "TestHelpVariableExpansion", "TestHelpUsagePositionalsWrap", "TestPositionalsNargsOneOrMore", "TestIntermixedMessageContentError", "TestActionUserDefined", "Success", "TestMessageContentError", "ParserTesterMetaclass", "TestOptionalsDoubleDash", "TestHelpUsageLongProgPositionalsWrap", "TestOptionalsDefault", "TestOptionalsActionStore", "TestFileTypeMissingInitialization", "TestOptionalsActionAppendConst", "TestNamespace", "RFile", "TestOptionalsNumericAndPositionals", "TestHelpUsageLongProg", "TestOptionalsNargsOneOrMore", "TestArgumentTypeError", "TestPositionalsNargsOptionalNone", "TestHelpSuppressPositional", "TestHelpReformatting", "TestAddArgumentMetavar", "TestOptionalsDoubleDashPrefixMatch", "TestPositionalsNargsNoneOneOrMore1", "TestOptionalsNargsOptional", "TestHelpSubparsersWithHelpOrdering", "TestMutuallyExclusiveOptionalsMixedParent", "TestOptionalsDisallowLongAbbreviation", "TestInvalidNargs", "TestOptionalsSingleDash", "TestPositionalsNargsOptionalOptional", "TestActionExtend", "TempDirMixin", "TestDisallowLongAbbreviationAllowsShortGroupingPrefix", "TestNargsZeroOrMore", "TestMutuallyExclusiveLong", "TestHelpWrappingLongNames", "TestOptionalsAlternatePrefixChars", "TestMutuallyExclusiveOptionalsMixed", "TestMutuallyExclusiveFirstSuppressed", "TestImportStar", "OptionalAction", "TestPositionalsNargsOptionalOneOrMore", "TestFileTypeRB", "TestHelpVersionActionSuppress", "TestParserDefault42", "TestConflictHandling", "TestMutuallyExclusiveGroupErrors", "MEMixin", "TestMutuallyExclusiveNested", "TestTypeCallable", "TestMutuallyExclusiveFirstSuppressedParent", "TestMutuallyExclusiveOptionalsAndPositionalsMixed", "TestHelpNoHelpOptional", "TestMutuallyExclusiveManySuppressedParent", "TestOptionalsActionCount", "MEPBase", "TestHelpUsageOptionalsWrap", "FromFileConverterArgumentParser", "TestHelpBiggerOptionalGroups", "TestHelpBiggerPositionals", "TestEmptyAndSpaceContainingArguments", "TestPositionalsNargsNoneZeroOrMore", "TestMutuallyExclusiveSimpleParent", "TestHelpBiggerOptionals", "TestTypeClassicClass", "TestPositionalsNargsOptionalZeroOrMore", "TestMutuallyExclusiveManySuppressed", "TestPositionalsNargsNoneOneOrMore", "TestPositionalsNargs2Optional", "TestActionsReturned", "TestHelpUsagePositionalsOnlyWrap", "TestOptionalsAllowLongAbbreviation", "TestAddSubparsers", "TestOptionalsSingleDashAmbiguous", "TestSetDefaults", "TestHelpUsageOptionalsPositionalsWrap", "TestFileTypeOpenArgs", "TestOptionalsShortLong", "TestOptionalsActionAppendWithDefault", "TestOptionalsNargsDefault", "TestPositionalsNargsOneOrMore1", "TestPositionalsNargs2ZeroOrMore", "TestHelpFormattingMetaclass", "WFile", "TestOptionLike", "TestHelpUsage", "TestMutuallyExclusiveOptionalsAndPositionalsMixedParent", "PositionalAction", "AddTests", "ArgumentParserError", "TestHelpRawText", "TestPositionalsNargs1", "TestOptionalsSingleDoubleDash", "TestPositionalsNargsNone1", "C", "TestHelpUsageOptionalsOnlyWrap", "TestPositionalsNargsOptional1", "TestHelpRawDescription", "TestShortColumns", "TestOptionalsActionStoreFalse", "TestOptionalsNargsZeroOrMore", "MyType", "TestHelpTupleMetavar", "TestMutuallyExclusiveSimple", "TestPositionalsNargs2", "TestIntermixedArgs", "TestHelpSuppressUsage", "TestHelpRequiredOptional", "TestHelpAlternatePrefixChars", "TestCase", "TestFileTypeR", "TestMutuallyExclusiveGroupErrorsParent", "TestPositionalsNargsNoneNone", "TestFileTypeWB", "TestOptionalsHelpVersionActions", "TestHelpSubparsersOrdering", "TestPositionalsNargsOneOrMoreNone", "TestDisallowLongAbbreviationAllowsShortGrouping", "TestHelpVersionAction", "StdStreamComparer", "TestHelpVariableExpansionUsageSupplied", "TestOptionalsActionStoreTrue", "TestHelpSuppressOptional", "TestActionRegistration", "TestOptionalsDoubleDashPartialMatch", "TestMutuallyExclusiveInGroup", "TestMutuallyExclusiveLongParent", "StdIOBuffer", "TestOptionalsDisallowLongAbbreviationPrefixChars", "TestStrings", "TestOptionalsAlternatePrefixCharsAddedHelp", "TestHelpVariableExpansionNoArguments", "TestEncoding", "TestHelpUsageLongProgOptionsWrap", "TestPositionalsChoicesString", "TestInvalidArgumentConstructors", "TestOptionalsSingleDashLong", "TestOptionalsActionAppendConstWithDefault", "TestPositionalsNargsZeroOrMore", "TestOptionalsNargs1", "TestPositionalsNargsZeroOrMoreDefault", "TestArgumentsFromFileConverter", "TestWrappingMetavar", "TestFileTypeRepr", "TestHelpMetavarTypeFormatter", "TestMutuallyExclusiveOptionalAndPositional", "TestPositionalsNargsNoneOptional", "TestFileTypeDefaults", "Sig", "TestTypeUserDefined", "TestOptionalsDest", "TestOptionalsAlmostNumericAndPositionals", "TestHelpNone", "TestParseKnownArgs", "TestOptionalsRequired", "TestPositionalsNargsNone", "TestNamespaceContainsSimple", "TestHelpArgumentDefaults", "TestNargsRemainder", "TestArgumentsFromFile", "TestPositionalsNargsOptional", "TestHelpOnlyUserGroups"], "class_method_calls": ["cls.parser_signature", "action.type", "env.__exit__", "parser.parse_known_intermixed_args", "self.__dict__", "parent.set_defaults", "self.test_successes", "parent.add_mutually_exclusive_group", "self.assertEqual", "self.assertNotEqual", "self._parse_args", "self._test", "self.do_test_exception", "sys.stdout", "self.assertIs", "self.parser", "group3.add_argument", "self.help", "args_str.split", "self.assertStringEqual", "parser.add_argument", "self.seen", "action.metavar", "bar.required", "self.std_name", "arg.strip", "self.stdout", "TestHelpBiggerOptionals.argument_group_signatures", "ret.command", "self.assertRaises", "self.command_help_parser", "argparse.__all__", "parser.parse_known_args", "argparse.HelpFormatter", "tester.successes", "wxyzabe_parser.add_argument", "shutil.rmtree", "xparser.set_defaults", "file.close", "group1.add_argument", "parser.add_subparsers", "subparsers.required", "self.z_parent", "other.read", "argparse.RawDescriptionHelpFormatter", "sys.stderr", "action.dest", "ns.__eq__", "self.old_dir", "self.test_format", "sys.argv", "self.assertTrue", "self.assertArgumentParserError", "self.do_test_range_exception", "c_group.add_argument", "wrapper.__name__", "self.successes_when_not_required", "self.wxyz_parent", "other.close", "self.abcd_parent", "other.write", "sfile.getvalue", "self.failures", "self.test_print", "cm.exception", "os.getcwd", "self.w_parent", "tempfile.mkdtemp", "sig.args", "group.required", "self._add_arguments", "argparse.ArgumentError", "args.split", "self.get_parser", "self.kwargs", "self.assertNotIn", "test_wrapper.__name__", "g.add_argument", "self.assertValueError", "self.stderr", "self.assertNotRegex", "args_string.split", "self.func_suffix", "self.usage_when_not_required", "self.error_code", "m.assert_called_with", "ns.b", "self.assertRegex", "parent.add_argument_group", "group_sig.args", "parser_a.set_defaults", "TestHelpBiggerOptionals.argument_signatures", "action.nargs", "support.run_unittest", "TestHelpBiggerOptionals.parser_signature", "self.assertIsNone", "RFile.seen", "self.create_readonly_file", "TestHelpBiggerOptionals.version", "argument_sig.args", "os.path", "mutex_group.add_argument", "self.EXPECTED_MESSAGE", "argparse.FileType", "unittest.TestCase", "parser.parse_args", "ns.a", "group.add_argument", "self.test_failures", "action.const", "argparse.ArgumentParser", "self.temp_dir", "argparse.ArgumentDefaultsHelpFormatter", "parser.add_argument_group", "ns.__ne__", "self.value", "argparse.Namespace", "group_sig.kwargs", "other.mode", "os.geteuid", "test_func.__name__", "tester.assertRaises", "inspect.ismodule", "abcde_parser.add_argument", "parser.parse_intermixed_args", "self.do_test_no_exception", "self.do_test_invalid_exception", "other.name", "self.args", "self.addCleanup", "name.startswith", "m.add_argument", "self.dest", "subparsers.add_parser", "argparse.RawTextHelpFormatter", "self._test_mutex_ab", "self.attr", "argparse.__file__", "self.successes", "env.set", "parser.format_usage", "action.choices", "WFile.seen", "group2.add_mutually_exclusive_group", "parser.register", "parent.prog", "argparse.MetavarTypeHelpFormatter", "args.test", "os.walk", "parser.get_default", "parser.format_help", "os.chmod", "self.assertTypeError", "subparser_sig.kwargs", "self.maxDiff", "self.EXPECTED_RANGE_MESSAGE", "tester.failures", "self.usage_when_required", "self.assertPrintHelpExit", "text.decode", "abc_parser.add_argument_group", "self._test_module_encoding", "group.add_mutually_exclusive_group", "os.chdir", "tester.argument_signatures", "self._test_subparser_help", "self.name", "self.message", "self.ab_mutex_parent", "cls.parser_class", "parser.add_mutually_exclusive_group", "self.assertIn", "argparse.ArgumentTypeError", "tester.parser_class", "other.value", "argparse.Action", "self.MyAction", "stat.S_IWRITE", "tester.assertEqual", "expected_ns.badger", "arg_line.split", "f.read", "self.EXPECTED_INVALID_MESSAGE", "Exception.__init__", "self.main_program", "parser.usage", "unittest.skipIf", "parser1.add_argument", "sys.exc_info", "parser2.add_argument", "expected_ns.spam", "x_group.add_argument", "group2.add_argument", "tester.parser_signature", "mock.patch", "argparse.PARSER", "sig.kwargs", "textwrap.dedent", "self.test_print_file", "self._test_required_subparsers", "subparser_sig.args", "parser3.add_argument", "stat.S_IREAD", "argparse.SUPPRESS", "action.help", "self._get_parser", "support.EnvironmentVarGuard", "argument_sig.kwargs", "parser.set_defaults", "file.write", "titled_group.add_mutually_exclusive_group", "action.default", "text.encode"]}, "test_array.py": {"libraries": ["unittest", "array._array_reconstructor", "copy", "operator", "_testcapi.getbuffer_with_null_view", "sys.maxsize", "gc", "struct", "sys", "pickle", "warnings", "weakref", "test.support", "test.support._2G", "array"], "function_names": ["test_sizeof_without_buffer", "test_insert", "test_index", "test_byteswap", "test_iadd", "test_buffer", "test_pickle_for_empty_array", "test_remove", "__index__", "test_exhausted_iterator", "test_str", "__init__", "test_count", "test_setslice", "test_len", "__iter__", "test_assignment", "__add__", "test_delitem", "test_subclass_with_kwargs", "test_tofromfile", "test_fromfile_ioerror", "test_coveritertraverse", "test_tolist", "test_pop", "test_overflow", "test_issue17223", "test_tofrombytes", "__sub__", "test_error", "test_iterator_pickle", "test_numbers", "test_weakref", "badtypecode", "test_cmp", "test_bug_782369", "test_slice", "example", "test_unicode", "test_access", "test_add", "test_sizeof_with_buffer", "test_frombytearray", "__new__", "test_getslice", "__getitem__", "test_type_error", "test_filewrite", "test_reverse", "test_obsolete_write_lock", "test_extend", "test_bytes_extend", "test_example_data", "test_deepcopy", "B", "__int__", "test_create_from_bytes", "test_initialize_with_unicode", "test_pickle", "test_imul", "test_getitem", "test_fromlist", "test_copy", "test_iterationcontains", "check_overflow", "test_append", "test_frombytes", "test_subclassing", "test_repr", "test_free_after_iterating", "test_fromarray", "test_extended_getslice", "test_buffer_info", "test_constructor", "test_extended_set_del_slice", "test_delslice", "test_constructor_with_iterable_argument", "test_reduce_ex", "test_mul", "test_bad_constructor", "test_empty", "test_tofromstring", "assertEntryEqual", "test_setitem", "test_alloc_overflow", "test_nan", "test_tofromlist", "test_extslice"], "function_calls": ["reversed", "memoryview", "id", "ArraySubclassWithKwargs", "repr", "ArraySubclass", "super", "iter", "str", "B", "A", "open", "range", "list", "Intable", "slice", "int", "next", "type", "float", "eval", "hasattr", "bytearray", "len", "ExaggeratingArray", "pow", "bytes", "array_reconstructor"], "class_names": ["UnsignedNumberTest", "ShortTest", "UnsignedIntTest", "UnsignedLongTest", "FloatTest", "ArraySubclassWithKwargs", "IntegerNumberTest", "UnsignedByteTest", "ArraySubclass", "IntTest", "UnicodeTest", "A", "LongLongTest", "UnsignedLongLongTest", "BaseTest", "FPTest", "NumberTest", "ArrayReconstructorTest", "Intable", "LongTest", "MiscTest", "ExaggeratingArray", "LargeArrayTest", "ByteTest", "SignedNumberTest", "DoubleTest", "UnsignedShortTest", "StringTest"], "class_method_calls": ["example.fromlist", "self.badtypecode", "example.index", "self.check_overflow", "unittest.skipUnless", "self.assertEqual", "self.assertNotEqual", "warnings.filterwarnings", "self.assertGreaterEqual", "self.assertIs", "a.__setitem__", "support.TESTFN", "b.frombytes", "a.tobytes", "example.extend", "warnings.catch_warnings", "self.assertRaises", "self.assertEntryEqual", "pickle.HIGHEST_PROTOCOL", "self.offset", "data.reverse", "self.typecode", "example.remove", "example.insert", "s.tobytes", "example.pop", "self.assertIsInstance", "l.append", "operator.setitem", "m.tobytes", "a.fromunicode", "p.tobytes", "a.__delitem__", "cm.exception", "a.__add__", "a.itemsize", "a.tofile", "a.append", "a.reverse", "self.example", "weakref.proxy", "a.tounicode", "b.fromstring", "teststr.encode", "self.biggerexample", "a.__imul__", "self.minitemsize", "a.buffer_info", "a.fromlist", "b.x", "copy.deepcopy", "b.fromfile", "pickle.loads", "a.pop", "array.array", "example.tolist", "sys.maxsize", "self._num", "gc.collect", "unittest.TestCase", "a.__iadd__", "copy.copy", "operator.imul", "b.tobytes", "typecodes.index", "f.write", "example.reverse", "a.byteswap", "a.frombytes", "a.insert", "example.count", "support.unlink", "a.tolist", "unittest.main", "support.bigmemtest", "a.tostring", "a.__getitem__", "a.index", "self.smallerexample", "f.closed", "f.close", "support.check_sizeof", "a.__mul__", "a.x", "support.check_free_after_iterating", "example.append", "self.assertAlmostEqual", "example.frombytes", "a.__reduce_ex__", "operator.delitem", "self.outside", "self.assertIn", "self.fail", "a.fromfile", "struct.pack", "sys.getrefcount", "a.count", "b.byteswap", "b.fromlist", "a.typecode", "a.remove", "support.cpython_only", "self.skipTest", "pickle.dumps", "support.calcvobjsize", "a.extend"]}, "test_asdl_parser.py": {"libraries": ["unittest", "importlib.machinery", "sys", "os", "sysconfig", "os.path.dirname"], "function_names": ["visitModule", "test_module", "visitSum", "test_definitions", "setUpClass", "setUp", "visitType", "__init__", "tearDownClass", "visitConstructor", "test_product", "test_visitor", "test_attributes", "test_constructor_fields"], "function_calls": ["len", "super", "str", "dirname", "CustomVisitor"], "class_names": ["CustomVisitor", "TestAsdlParser"], "class_method_calls": ["self.assertIsInstance", "importlib.machinery", "self.visit", "ehandler.types", "self.asdl", "cls.mod", "self.assertEqual", "f0.type", "cons.fields", "f2.type", "f2.seq", "self.mod", "unittest.SkipTest", "self.assertIn", "mod.dfns", "v.names_with_seq", "self.types", "f.seq", "stmt.attributes", "f2.opt", "f0.name", "loader.load_module", "v.visit", "f1.type", "TestAsdlParser.asdl", "cons.name", "cls.asdl", "self.assertFalse", "unittest.main", "f1.opt", "sys.path", "os.path", "f0.opt", "type.value", "self.names_with_seq", "TestAsdlParser.mod", "self.assertTrue", "sysconfig.is_python_build", "f1.name", "unittest.TestCase", "sum.types", "cls.assertTrue", "ehandler.attributes", "f2.name"]}, "test_ast.py": {"libraries": ["unittest", "dis", "sys", "warnings", "pickle", "weakref", "ast", "cPickle", "test.support", "os", "unicodedata", "textwrap.dedent"], "function_names": ["test_slices", "test_yield", "get_load_const", "test_for", "test_AST_garbage_collection", "test_source_segment_multi", "visit_Ellipsis", "_parse_value", "test_get_docstring", "stmt", "test_comprehensions", "_check_end_pos", "test_nonlocal", "__init__", "test_realtype", "bad_normalize", "test_expr", "test_while", "test_module", "test_elif_stmt_start_position_with_else", "test_ast_validation", "test_funcdef", "test_fstring_multi_line", "test_level_as_none", "_check_arguments", "test_invalid_identitifer", "test_fix_missing_locations", "test_classdef", "test_stdlib_validates", "test_class_def", "main", "test_multi_line_str", "mod", "test_fstring", "test_redundant_parenthesis", "test_listcomp", "test_elif_stmt_start_position", "cls", "arguments", "test_delete", "test_call", "test_list", "test_assign", "test_set", "test_parse", "test_attribute", "visit_Str", "test_importfrom", "test_starred_expr_end_position_within_call", "test_increment_lineno", "test_field_attr_existence", "fac", "test_source_segment_padded", "compile_constant", "test_num", "test_with", "test_empty_yield_from", "test_snippets", "test_dictcomp", "test_displays", "visit_NameConstant", "test_continued_str", "test_from_import", "test_bad_integer", "test_slice", "test_func_def", "test_trailers_with_redundant_parenthesis", "test_source_segment_endings", "expr", "test_copy_location", "test_old_constant_nodes", "test_call_noargs", "test_raise", "_check_comprehension", "test_try", "test_literal_eval_str_int_limit", "test_constant_as_name", "test_lambda", "test_isinstance", "test_singletons", "test_string_kind", "_check_content", "test_no_fields", "test_iter_fields", "test_unaryop", "test_binop", "test_literal_eval", "visit_Num", "_assertTrueorder", "test_load_const", "test_boolop", "test_augassign", "test_dict", "factory", "test_arguments", "visit_Bytes", "test_literal_eval_malformed_dict_nodes", "test_subscript", "wrap", "test_multi_line_docstring_col_offset_and_lineno_issue16806", "test_base_classes", "test_subclasses", "test_issue39579_dotted_name_end_col_offset", "test_literal_eval_complex", "test_field_attr_writable", "test_invalid_sum", "_simple_comp", "test_pickling", "test_nodeclasses", "test_issue18374_binop_col_offset", "test_attribute_spaces", "test_issue31592", "test_suites", "test_tuples", "test_yield_await", "test_dump_incomplete", "test_values", "test_global", "to_tuple", "test_classattrs", "test_setcomp", "test_generatorexp", "test_dump", "test_AST_objects", "test_validation", "test_assert", "test_import_from_multi_line", "test_assign_to_constant", "test_issue40614_feature_version", "test_ifexp", "test_import", "test_if", "test_class_kw", "_sequence", "test_get_docstring_none", "test_non_interned_future_from_ast", "test_source_segment_tabs", "test_starred", "test_compare", "test_tuple", "test_nameconstant", "test_iter_child_nodes", "test_parse_in_error"], "function_calls": ["check", "frozenset", "dedent", "getattr", "cls", "arguments", "N", "repr", "isinstance", "Visitor", "issubclass", "to_tuple", "super", "str", "tuple", "subfloat", "dict", "open", "range", "X", "fac", "S", "list", "ref", "type", "zip", "next", "item", "hasattr", "subcomplex", "len", "compile", "subint", "main", "map", "exec", "print"], "class_names": ["subcomplex", "NodeVisitorTests", "Visitor", "EndPositionTests", "ASTValidatorTests", "subint", "ASTHelpers_Test", "S", "subfloat", "N", "AST_Tests", "N2", "ConstantTests", "X"], "class_method_calls": ["ast.DictComp", "self._check_arguments", "ast.Pass", "self.get_load_const", "child_binop.left", "x.op", "self.assertEqual", "support.gc_collect", "mod.col_offset", "warnings.filterwarnings", "node.lineno", "e.exception", "self.assertGreaterEqual", "elif_stmt.col_offset", "node.value", "slc.upper", "bop.values", "im.slice", "self.assertIs", "t.lineno", "ast.GeneratorExp", "lam.args", "ast.arg", "grandchild_binop.lineno", "w.message", "warnings.catch_warnings", "tests.extend", "ast.Str", "ast.comprehension", "self.assertRaises", "cdef.bases", "x.n", "call.keywords", "ast.Assert", "ast.Index", "ast.Raise", "self._check_comprehension", "ast.literal_eval", "x.__dict__", "visitor.visit", "node.n", "new.end_lineno", "ast.__file__", "ast.ImportFrom", "i2.slice", "instr.argval", "self._simple_comp", "ast.Set", "mod.dumps", "starred_expr.end_col_offset", "binop.left", "ast.List", "self.assertTrue", "sys.argv", "ast.__dict__", "consts.append", "x._fields", "ast.BinOp", "ast.With", "self.stmt", "ast.AST", "self.assertIsInstance", "i1.value", "im.module", "ast.increment_lineno", "result.append", "d.pop", "cdef.body", "child_binop.col_offset", "ast.ExtSlice", "child_binop.end_col_offset", "cm.exception", "consts.extend", "t.col_offset", "ast.While", "ast.ClassDef", "ast.YieldFrom", "if_stmt.body", "ast.Interactive", "ast.Module", "new.lineno", "ast.excepthandler", "ast.Assign", "new.end_col_offset", "ast.stmt", "ast.Import", "self.subTest", "ast.NodeVisitor", "support.swap_attr", "parent_binop.end_lineno", "cdef.keywords", "attr_b.end_col_offset", "ast.Constant", "ast.PyCF_ONLY_AST", "ast.Expr", "ast.NameConstant", "ast.iter_fields", "child_binop.lineno", "ast.Slice", "parent_binop.lineno", "fp.read", "self.assertIsNone", "x.right", "mods.append", "ast.Try", "ast.alias", "os.path", "while_loop.test", "ast.Nonlocal", "ast.Sub", "ast.For", "for_loop.target", "slc.step", "unittest.TestCase", "self.assertFalse", "err_ctx.exception", "support.adjust_int_max_str_digits", "ast_node.lineno", "ast.get_source_segment", "assign.value", "ast.And", "ast.Gt", "ast.dump", "c.kind", "ast.If", "ast.Name", "if_stmt.orelse", "mod.lineno", "ast.UnaryOp", "ast.copy_location", "empty_yield_from.body", "c1.elts", "x.foobarbaz", "ast_node.end_col_offset", "self.compile_constant", "c2.values", "node.body", "t._fields", "self.z", "ast_node._fields", "ast.arguments", "ast.ListComp", "self._check_content", "cmp.elt", "self._sequence", "n.n", "ast.keyword", "try_stmt.handlers", "x.foobar", "x.body", "x.vararg", "starred_expr.end_lineno", "ast.Load", "log.append", "ast.withitem", "ast.Expression", "self._assertTrueorder", "self._check_end_pos", "cmp.generators", "unittest.main", "x.lineno", "self._parse_value", "x.value", "ast.fix_missing_locations", "node.s", "binop.right", "ast.Global", "child_binop.end_lineno", "fdef.args", "t.__class__", "os.listdir", "ast.parse", "self.maxDiff", "ast.Starred", "fn.endswith", "instr.opname", "ast.Compare", "a.x", "new.col_offset", "ast.Ellipsis", "ast.Delete", "fstr.values", "call.args", "self.assertIsNotNone", "ast.In", "ast_node.col_offset", "ast.expr", "ast_node.end_lineno", "mod.loads", "ast.Attribute", "x.left", "parent_binop.col_offset", "parent_binop.end_col_offset", "ast.iter_child_nodes", "ast.Bytes", "n.z", "ast.AugAssign", "self.assertRaisesRegex", "ast.Store", "lam.body", "self.mod", "grandchild_binop.end_col_offset", "self.assertIn", "ast.IfExp", "ast.Call", "c.value", "fdef.body", "ast.Dict", "grandchild_binop.end_lineno", "parent_binop.left", "ast.Add", "dis.get_instructions", "ast.Not", "ast.Num", "ast.Subscript", "ast.Yield", "weakref.ref", "tree.body", "ast.Lambda", "elif_stmt.lineno", "try_stmt.body", "src.body", "ast.ExceptHandler", "c2.keys", "grandchild_binop.col_offset", "mod.body", "ast.get_docstring", "support.cpython_only", "call.func", "ast.Tuple", "self.expr", "slc.lower", "ast.BoolOp", "ast.SetComp", "ast.FunctionDef"]}, "test_asyncgen.py": {"libraries": ["unittest", "inspect", "types", "test.support.import_module"], "function_names": ["test_async_gen_api_01", "test_async_gen_asyncio_athrow_01", "test_async_gen_expression_01", "test_async_gen_asyncio_aclose_12", "test_async_gen_asyncio_aclose_11", "setUp", "test_async_gen_exception_08", "exception_handler", "test_async_gen_asyncio_athrow_stopiteration", "test_async_gen_asyncio_02", "test_async_gen_aclose_compatible_with_get_stack", "test_async_gen_asyncio_anext_stopiteration", "test_async_gen_exception_05", "sync_iterate", "test_async_gen_syntax_04", "test_async_gen_asyncio_gc_aclose_09", "test_async_gen_asyncio_anext_04", "test_async_gen_syntax_03", "test_async_gen_asyncio_asend_01", "test_async_gen_syntax_01", "test_async_gen_asyncio_asend_03", "test_async_gen_aclose_after_exhaustion", "test_async_gen_exception_10", "sync_gen", "test_async_gen_iteration_01", "test_async_gen_asyncio_athrow_02", "sgen", "make_arange", "test_async_gen_exception_09", "test_async_gen_exception_04", "test_async_gen_asyncio_athrow_03", "async_iterate", "test_async_gen_asyncio_anext_tuple", "test_async_gen_asyncio_aclose_07", "awaitable", "test_async_gen_asyncio_shutdown_01", "test_async_gen_iteration_02", "run_until_complete", "test_async_gen_asyncio_03", "test_async_gen_asyncio_aclose_06", "test_async_gen_await_same_anext_coro_twice", "test_async_gen_syntax_02", "sync_gen_wrapper", "test_async_gen_asyncio_anext_05", "test_async_gen_exception_11", "tearDown", "test_async_gen_asyncio_anext_06", "test_async_gen_exception_06", "test_async_gen_exception_03", "test_async_gen_aclose_twice_with_different_coros", "compare_generators", "test_async_gen_asyncio_01", "test_async_gen_asyncio_aclose_08", "test_async_gen_asyncio_asend_02", "test_asyncgen_nonstarted_hooks_are_cancellable", "to_list", "test_async_gen_await_same_aclose_coro_twice", "test_async_gen_syntax_05", "test_async_gen_asyncio_athrow_tuple", "test_async_gen_expression_02", "foo", "test_async_gen_exception_07", "test_async_gen_asyncio_aclose_10"], "function_calls": ["object", "async_gen", "run1", "gen", "sync_gen", "Gen", "waiter", "StopIteration", "sgen", "str", "make_arange", "GeneratorExit", "async_iterate", "range", "sleep_n_crash", "awaitable", "run_until_complete", "run", "arange", "sync_gen_wrapper", "type", "run2", "wrap", "async_gen_wrapper", "iterate", "to_list", "import_module", "main", "target", "wait", "foo", "async_generator", "sync_iterate", "exec"], "class_names": ["AwaitException", "AsyncGenSyntaxTest", "FooEr", "AsyncGenTest", "AsyncGenAsyncioTest", "Gen"], "class_method_calls": ["asyncio.run", "self.assertIsInstance", "asyncio.set_event_loop", "asyncio.ensure_future", "t1.cancel", "ai.__anext__", "g.__qualname__", "g.__aiter__", "sg.send", "self.assertEqual", "asyncio.get_running_loop", "types.FrameType", "task.get_stack", "self.compare_generators", "it.__anext__", "asg.asend", "asyncio.sleep", "cm.exception", "g.ag_code", "asg.athrow", "self.assertRaisesRegex", "g.__anext__", "g.ag_await", "g.close", "self.assertIs", "an.__next__", "self.assertIn", "it.aclose", "self.fail", "asyncio.CancelledError", "coro.send", "asyncio.set_event_loop_policy", "asyncio.create_task", "coro.throw", "self.assertRaises", "loop.set_exception_handler", "types.CodeType", "g.asend", "g.athrow", "v.value", "g.throw", "g.ag_running", "asyncio.all_tasks", "asyncio.new_event_loop", "res.append", "loop.run_until_complete", "messages.append", "sg.throw", "self.assertIsNone", "ex.args", "unittest.main", "g.__name__", "inspect.isawaitable", "ag.aclose", "g.__next__", "g.send", "fut.cancel", "asyncio.Future", "gen.__aiter__", "gen.aclose", "t2.cancel", "types.coroutine", "self.assertTrue", "g.aclose", "unittest.TestCase", "self.assertFalse", "self.to_list", "g.ag_frame", "self.loop"]}, "test_asynchat.py": {"libraries": ["unittest", "threading", "time", "asyncore", "socket", "asynchat", "sys", "unittest.mock", "test.support", "errno"], "function_names": ["collect_incoming_data", "test_simple_producer", "test_find_prefix_at_end", "setUp", "line_terminator_check", "test_none_terminator", "test_blockingioerror", "__init__", "test_close_when_done", "numeric_terminator_check", "test_string_producer", "start_echo_server", "test_disallow_negative_terminator", "test_line_terminator1", "test_push", "run", "test_empty_line", "test_line_terminator2", "handle_expt", "tearDown", "test_numeric_terminator1", "handle_connect", "test_numeric_terminator2", "test_line_terminator3", "found_terminator"], "function_calls": ["start_echo_server", "len", "bytearray", "echo_server", "BlockingIOError", "memoryview", "echo_client"], "class_names": ["TestAsynchat", "TestAsynchatMocked", "echo_server", "TestHelperFunctions", "TestAsynchat_WithPoll", "echo_client", "TestNotConnected"], "class_method_calls": ["sock.recv", "support.bind_port", "support.join_thread", "sys.platform", "s.chunk_size", "self.connect", "asynchat.find_prefix_at_end", "socket.AF_INET", "asyncore.loop", "socket.SOCK_STREAM", "self.assertEqual", "support.threading_cleanup", "event.wait", "self.usepoll", "unittest.mock", "dispatcher.handle_read", "c.push_with_producer", "self.start_resend_event", "threading.Event", "self._threads", "self.addCleanup", "c.buffer", "conn.send", "dispatcher.set_socket", "self.line_terminator_check", "asynchat.async_chat", "s.start_resend_event", "support.threading_setup", "self.assertRaises", "self.contents", "errno.EAGAIN", "s.buffer", "self.event", "self.set_terminator", "c.push", "c.close_when_done", "self.buffer", "event.clear", "s.port", "conn.close", "conn.recv", "self.assertGreater", "self.create_socket", "self.assertFalse", "unittest.main", "self.sock", "client.set_terminator", "time.sleep", "self.chunk_size", "self.port", "c.contents", "dispatcher.del_channel", "error.called", "asynchat.simple_producer", "support.HOST", "unittest.TestCase", "self.numeric_terminator_check", "s.start", "threading.Thread", "socket.socket"]}, "echo.py": {"libraries": ["os"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["os.read", "os.write"]}, "echo2.py": {"libraries": ["os"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["os.read", "os.write"]}, "echo3.py": {"libraries": ["os"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["os.read", "ex.__class__", "os.write"]}, "functional.py": {"libraries": ["pprint", "select", "threading", "contextlib", "asyncio.events", "tempfile", "socket", "os", "asyncio"], "function_names": ["__getattr__", "run_loop_briefly", "stop", "setUp", "__exit__", "__repr__", "tcp_server", "_run", "__enter__", "__init__", "_handle_client", "unix_client", "loop_exception_handler", "_abort_socket_test", "unix_server", "tcp_client", "run", "start_tls", "tearDown", "new_loop", "unix_sock_name", "recv_all", "addr"], "function_calls": ["len", "super", "RuntimeError", "getattr", "type", "TestThreadedServer", "print", "TestThreadedClient", "TestSocketWrapper", "hasattr"], "class_names": ["FunctionalTestCaseMixin", "TestThreadedServer", "SocketThread", "TestThreadedClient", "TestSocketWrapper"], "class_method_calls": ["asyncio.set_event_loop", "conn.settimeout", "self._timeout", "self.tcp_client", "socket.socket", "socket.socketpair", "socket.AF_INET", "socket.SOCK_STREAM", "self._run", "self._test", "tempfile.NamedTemporaryFile", "asyncio.sleep", "self.loop", "self.stop", "self._finished_clients", "self._sock", "self._prog", "asyncio.events", "self.fail", "socket.AF_UNIX", "tempfile.TemporaryDirectory", "socket.timeout", "self._active", "self.__sock", "socket.create_server", "self.new_loop", "select.select", "self.__unhandled_exceptions", "ssl_sock.close", "self._old_get_running_loop", "asyncio.new_event_loop", "self._s2", "self._handle_client", "self.daemon", "self.start", "contextlib.contextmanager", "self._clients", "pprint.pprint", "tmp.name", "os.unlink", "ssl_sock.do_handshake", "os.path", "self.tcp_server", "self.join", "sock.settimeout", "self._s1", "self.recv", "ssl_context.wrap_socket", "threading.Thread", "self.loop_exception_handler", "self._max_clients"]}, "test_asyncio_waitfor.py": {"libraries": ["unittest", "time", "asyncio"], "function_names": ["__init__", "tearDownModule", "test_asyncio_wait_for_cancelled", "test_asyncio_wait_for_timeout"], "function_calls": ["SlowTask"], "class_names": ["AsyncioWaitForTest", "SlowTask"], "class_method_calls": ["asyncio.run", "time.monotonic", "self.TASK_TIMEOUT", "asyncio.sleep", "self.atest_asyncio_wait_for_timeout", "asyncio.CancelledError", "asyncio.wait", "asyncio.set_event_loop_policy", "asyncio.create_task", "t.exited", "self.atest_asyncio_wait_for_cancelled", "asyncio.TimeoutError", "t.TASK_TIMEOUT", "self.exited", "unittest.main", "waitfortask.cancel", "asyncio.wait_for", "self.assertTrue", "t.run", "unittest.TestCase"]}, "test_base_events.py": {"libraries": ["unittest", "concurrent.futures", "threading", "time", "test.support", "asyncio.selector_events.BaseSelectorEventLoop", "test.test_asyncio.utils", "asyncio.base_events", "sys", "unittest.mock", "asyncio.constants", "test.support.script_helper.assert_python_ok", "math", "socket", "os", "errno", "asyncio"], "function_names": ["mock_socket_module", "test__sock_sendfile_native_failure", "test_default_exc_handler_callback", "_test_create_connection_ip_addr", "test_set_exc_handler_custom", "test_create_server_stream_bittype", "throw", "test_thread", "test_asyncgen_finalization_by_gc", "__init__", "test_env_var_debug", "eof_received", "test_create_connection_host_port_sock", "test_create_server_cant_bind", "test_create_connection_timeout", "test_call_later", "test_set_nodelay", "clear_selector", "datagram_received", "test_getnameinfo", "proc_events", "test_subprocess_shell_invalid_args", "test_set_default_executor_deprecation_warnings", "connection_lost", "test_create_datagram_endpoint_sock_unix", "test_nonbinary_file", "test_create_datagram_endpoint_no_matching_family", "cleanup", "test_sock_sendfile_no_fallback", "test_call_later_negative_delays", "test_create_datagram_endpoint_cant_bind", "test_run_once", "test_run_until_complete_loop", "test_create_named_task_with_custom_factory", "test_create_connection_ip_addr", "test_time_and_call_at", "test_call_soon_non_callable", "test_create_server_soreuseport_only_defined", "mock_getaddrinfo", "test_run_until_complete_type_error", "test_default_exc_handler_broken", "test_run_forever_keyboard_interrupt", "test_create_server_ssl_timeout_for_plain_socket", "data_received", "test_create_datagram_endpoint_sock", "test_create_connection_no_getaddrinfo", "test_notint_count", "test_sock_sendfile_fallback", "custom_handler", "mock_make_ssl_transport", "test_ipaddr_info_no_inet_pton", "test_create_datagram_endpoint_reuse_address_warning", "test_create_connection_connect_err", "callback", "test_running_loop_within_a_loop", "test_create_server_wrong_sock", "make_socket", "create_task", "test_set_default_executor", "getaddrinfo", "test_create_server_host_port_sock", "test_create_task", "test_subprocess_exec_invalid_args", "task_factory", "test_create_connection_multiple_errors", "test__add_callback_cancelled_handle", "tearDownModule", "test_create_connection_no_inet_pton", "test_set_exc_handler_invalid", "connection_made", "test_single_selecter_event_callback_after_stopping", "test_negative_offset", "_socket", "test_ipaddr_info", "test_create_named_task_with_default_factory", "default_exception_handler", "test__add_callback_handle", "test_call_soon", "check_thread", "test_create_connection_no_host_port_sock", "test_create_connection_ssl_server_hostname_default", "setUp", "test_create_server_ipv6", "test_create_datagram_endpoint_connect_err", "test_create_connection_ssl_timeout_for_plain_socket", "test_run_until_complete_baseexception", "test_create_connection_wrong_sock", "cb", "test_create_connection_ipv6_scope", "test__run_once_schedule_handle", "check_in_thread", "do_event", "test_create_datagram_endpoint_setblk_err", "simple_coroutine", "test_run_forever_pre_stopped", "test_create_datagram_endpoint_wrong_sock", "test_create_datagram_endpoint_sockopts", "test_create_datagram_endpoint_nosoreuseport", "close", "setUpClass", "zero_error", "func", "test__run_once_cancelled_event_cleanup", "test_set_task_factory_invalid", "get_extra_info", "test_create_server_no_getaddrinfo", "test_nonstream_socket", "test_call_coroutine", "test_accept_connection_exception", "stop_loop_cb", "test_log_slow_callbacks", "test_default_exc_handler_coro", "test_create_server_empty_host", "check_set_nodelay", "run_loop", "bind", "test_create_datagram_endpoint_ip_addr", "test_create_server_no_host_port_sock", "handler", "test_set_exc_handler_broken", "test_sock_sendfile_fallback_offset_and_count", "test_create_datagram_endpoint_addr_error", "test_set_task_factory", "test_negative_count", "test_accept_connection_retry", "test_create_datagram_endpoint_existing_sock_unix", "test_create_datagram_endpoint_noaddr_nofamily", "getaddrinfo_task", "test_create_datagram_endpoint_reuse_address_error", "test_run_until_complete_loop_orphan_future_close_loop", "test_create_connection_multiple", "patch_socket", "test_create_connection_no_ssl_server_hostname_errors", "test_close", "prepare", "test_not_implemented", "error_received", "test_set_debug", "test_create_server_nosoreuseport", "test_blocking_socket", "test_create_connection_no_local_addr", "tearDownClass", "test_asyncgen_finalization_by_gc_in_other_thread", "submit", "test_check_thread", "test_create_connection_service_name", "test_create_datagram_endpoint_socket_err", "test__run_once", "test_create_connection_bluetooth", "test_create_datagram_endpoint_no_addrinfo", "test_create_connection_multiple_errors_local_addr", "test_notint_offset", "test_port_parameter_types", "test_create_datagram_endpoint_allow_broadcast", "test_create_connection_ssl_server_hostname_errors", "test_create_datagram_endpoint_sock_sockopts"], "function_calls": ["run_loop", "object", "test", "assert_python_ok", "getattr", "all", "coro", "stop_loop_coro", "Loop", "isinstance", "AttributeError", "zero_error_coro", "test_thread", "super", "str", "MyDatagramProto", "raise_keyboard_interrupt", "tuple", "agen", "BaseSelectorEventLoop", "open", "range", "setattr", "iter_one", "ValueError", "list", "coro_func", "runner", "getaddrinfo", "BlockingIOError", "FakeSock", "int", "type", "OSError", "delattr", "DummyExecutor", "hasattr", "bytearray", "len", "max", "_SelectorTransportMock", "NotImplementedError", "main", "MyTask", "foo", "EventLoop"], "class_names": ["BaseEventTests", "TestSelectorUtils", "ShowStopper", "_SelectorTransportMock", "MyProto", "MyDatagramProto", "FakeSock", "RunningLoopTests", "Err", "MyTask", "BaseLoopSockSendfileTests", "EventLoop", "Loop", "BaseEventLoopTests", "BaseEventLoopWithSelectorTests", "DummyExecutor"], "class_method_calls": ["calls.append", "f.set_result", "self.closed", "asyncio.start_server", "socket.SO_REUSEPORT", "sys.executable", "unittest.skipUnless", "ai.__anext__", "self.assertEqual", "socket.SOCK_STREAM", "support.gc_collect", "self.leave_unfinalized_asyncgen", "waiter.set_result", "self.make_socket", "self.assertGreaterEqual", "socket.SO_BROADCAST", "asyncio.SelectorEventLoop", "asyncio.sleep", "self.assertIs", "loop.close", "support.IPV6_ENABLED", "transport._sock", "support.TESTFN", "thread.start", "base_events._MIN_CANCELLED_TIMER_HANDLES_FRACTION", "socket.AF_UNIX", "constants.ACCEPT_RETRY_DELAY", "loop.create_future", "server.close", "ex.errno", "srv.wait_closed", "m_socket.AF_INET6", "mock_handler.reset_mock", "self.assertRaises", "thread.join", "loop.call_at", "proto.transport", "transport.close", "loop.call_soon", "getaddrinfo.return_value", "x._cancelled", "event.set", "support.skip_unless_bind_unix_socket", "loop.set_task_factory", "outer_loop.close", "t.close", "proto.wait_closed", "self.assertTrue", "self.done", "support.HOST", "stdout.rstrip", "func.called", "handle._source_traceback", "socket.SOL_SOCKET", "self.assertIsInstance", "constants.SENDFILE_FALLBACK_READBUFFER_SIZE", "asyncio.set_event_loop", "asyncio.get_running_loop", "m_socket.SOCK_STREAM", "m_gai.side_effect", "cm.exception", "asyncio.SubprocessProtocol", "gen.send", "fut.set_result", "m_socket.IPPROTO_UDP", "concurrent.futures", "mock.Mock", "m_socket.SOCK_DGRAM", "socket.IPPROTO_UDP", "asyncio.set_event_loop_policy", "self.assertNotIn", "asyncio.create_task", "self._test_create_connection_ip_addr", "h1.cancel", "ag.__aiter__", "self.subTest", "self.prepare", "base_events._ipaddr_info", "protocol.state", "socket.SOCK_NONBLOCK", "self.assertRegex", "doer.cancel", "mock_handler.called", "asyncio.new_event_loop", "sock.getsockopt", "sock.setblocking", "srv.close", "self.assertIsNone", "transport.get_extra_info", "support.disable_gc", "outer_loop.run_until_complete", "asyncio.DatagramProtocol", "sock.close", "sys.version_info", "test_utils.mock_nonblocking_socket", "unittest.TestCase", "self.assertFalse", "self.state", "self.run_loop", "m_socket.AF_INET", "sys.platform", "sock.bind", "time.monotonic", "self.transport", "socket.SOL_TCP", "server.wait_closed", "socket.AF_UNSPEC", "sock.fileno", "threading.Thread", "sock.family", "self.assertLessEqual", "loop.call_soon_threadsafe", "errno.EMFILE", "err.strerror", "fp.write", "m_sock.bind", "mock_handler.assert_called_with", "socket.TCP_NODELAY", "self._sock", "m_socket.inet_pton", "self.addCleanup", "sock_connect.return_value", "m_sock.close", "asyncio.Task", "m_socket.SO_REUSEPORT", "task._log_destroy_pending", "asyncio.coroutine", "loop.set_exception_handler", "loop.create_task", "test_utils.unix_socket_path", "self.assertWarns", "self.check_set_nodelay", "log.error", "asyncio.TimeoutError", "socket.AF_INET6", "loop2.close", "support.unlink", "cls.__old_bufsize", "self.nbytes", "self.fut", "loop.run_until_complete", "self.assertGreater", "coro_obj.close", "self.check_thread", "unittest.main", "m_log.error", "task.get_name", "base_events.BaseEventLoop", "sock.connect", "cls.DATA", "socket.SOCK_DGRAM", "sock_connect.called", "socket.getaddrinfo", "srv.sockets", "mock.MagicMock", "errno.EADDRNOTAVAIL", "self.new_test_loop", "asyncio.ensure_future", "coro.close", "self.MyProto", "socket.socket", "server.sockets", "loop._run_once", "socket.AF_INET", "protocol.done", "loop.run_forever", "event.wait", "transport.write", "h.cancel", "m_logger.warning", "self.assertRaisesRegex", "socket.IPPROTO_TCP", "socket.SO_REUSEADDR", "self.set_event_loop", "threading.Event", "asyncio.Handle", "self.assertIn", "test_utils.run_once", "base_events._set_nodelay", "m_socket.getaddrinfo", "self.started", "self.data", "self.fail", "h._callback", "bind.assert_called_with", "loop.time", "loop.set_debug", "math.ceil", "proto.data", "test_utils.TestCase", "other_loop.close", "unittest.skipIf", "self.file", "asyncio.Protocol", "fut.add_done_callback", "mock.patch", "other_loop.run_until_complete", "sock.accept", "loop.call_later", "loop.stop", "test_utils.MockPattern", "base_events._MIN_SCHEDULED_TIMER_HANDLES", "self.DATA", "self.skipTest", "m_socket.socket", "test_utils.run_briefly", "asyncio.SendfileNotAvailableError", "fut.set_exception", "mock.ANY", "asyncio.TimerHandle", "self.loop"]}, "test_buffered_proto.py": {"libraries": ["unittest", "test.test_asyncio.functional", "asyncio"], "function_names": ["tearDownModule", "buffer_updated", "get_buffer", "__init__", "on_buf", "connection_lost", "new_loop", "test_buffered_proto_create_connection"], "function_calls": ["bytearray", "client", "ReceiveStuffProto", "hasattr"], "class_names": ["BufferedProtocolSelectorTests", "BaseTestBufferedProtocol", "ReceiveStuffProto", "BufferedProtocolProactorTests"], "class_method_calls": ["writer.wait_closed", "asyncio.start_server", "unittest.skipUnless", "asyncio.ProactorEventLoop", "reader.readexactly", "writer.close", "asyncio.SelectorEventLoop", "self.con_lost_fut", "asyncio.BufferedProtocol", "asyncio.set_event_loop_policy", "srv.wait_closed", "self.buffer", "srv.close", "unittest.main", "self.cb", "tr.write", "asyncio.wait_for", "func_tests.FunctionalTestCaseMixin", "writer.write", "unittest.TestCase", "srv.sockets", "self.loop"]}, "test_context.py": {"libraries": ["unittest", "contextvars", "concurrent.futures", "time", "gc", "random", "weakref", "functools", "_testcapi.hamt"], "function_names": ["test_hamt_delete_3", "__exit__", "test_hamt_collision_3", "test_context_run_4", "func1", "sub", "test_context_var_repr_1", "test_hamt_items_3", "__repr__", "test_context_run_3", "__eq__", "test_hamt_delete_2", "test_hamt_items_1", "wrapper", "test_contextvar_getitem", "test_hamt_eq_1", "test_context_new_1", "test_context_run_1", "fun", "__enter__", "test_hamt_delete_5", "test_context_run_5", "__init__", "test_hamt_delete_1", "test_context_get_context_1", "test_context_run_2", "test_hamt_getitem_1", "test_context_copy_1", "test_hamt_basics_2", "test_context_getset_1", "test_context_getset_2", "test_context_var_new_1", "test_context_getset_5", "test_context_threads_1", "test_hamt_collision_1", "isolated_context", "test_hashkey_helper_1", "test_hamt_items_2", "test_hamt_keys_1", "ctx1_fun", "func", "test_context_getset_4", "test_hamt_basics_4", "test_hamt_stress", "ctx2_fun", "func2", "test_context_run_6", "test_context_run_7", "test_hamt_basics_3", "test_hamt_basics_1", "test_context_getset_3", "__hash__", "test_hamt_eq_2", "test_hamt_in_1", "test_hamt_gc_2", "test_context_subclassing_1", "test_hamt_gc_1", "test_context_typerrors_1", "test_hamt_delete_4"], "function_calls": ["object", "hamt", "RuntimeError", "repr", "isinstance", "super", "str", "hash", "dict", "range", "ValueError", "list", "ref", "set", "next", "enumerate", "KeyStr", "len", "HaskKeyCrasher", "HashKey"], "class_names": ["KeyStr", "MyContextVar", "EqError", "HamtTest", "HaskKeyCrasher", "HashingError", "ContextTest", "MyContext", "MyToken", "HashKey"], "class_method_calls": ["h4.get", "self.assertEqual", "self.assertNotEqual", "d.values", "lst.append", "self.assertIs", "self.error_on_hash", "self.assertRaises", "h2.get", "h.set", "c.name", "ctx1.items", "ctx1.keys", "ctx1.run", "h3.get", "self.assertTrue", "tp.shutdown", "self.error_on_eq_to", "hm.get", "self.assertIsInstance", "ctx2.run", "contextvars.copy_context", "functools.wraps", "t.old_value", "d.copy", "b.append", "concurrent.futures", "self.assertNotIn", "a.append", "h1.set", "h.keys", "contextvars.Token", "random.shuffle", "other.hash", "self.assertIsNone", "self.assertIsNot", "h2.delete", "hm.delete", "keys.append", "contextvars.ContextVar", "t0.var", "gc.collect", "unittest.TestCase", "self.assertFalse", "h1.get", "ctx1.copy", "HashKey._crasher", "random.uniform", "c.set", "functools.partial", "other.name", "ctx1.get", "ctx2.get", "k.name", "cvar.get", "h5.get", "var.get", "ctx.keys", "dm.pop", "ctx1.values", "v1.set", "var.set", "other.error_on_eq_to", "self.error_on_eq", "unittest.main", "v2.reset", "h.items", "cvar.set", "tp.map", "contextvars.Context", "self.assertRaisesRegex", "d.items", "self.name", "c.reset", "h.values", "t0.old_value", "self.assertIn", "d.keys", "h.delete", "unittest.skipIf", "t0.MISSING", "h4.set", "ctx.run", "weakref.ref", "self.hash", "h3.set", "c.get", "ctx.get", "time.sleep", "h2.set", "h.get", "self._crasher"]}, "test_events.py": {"libraries": ["test.test_asyncio.utils", "unittest.mock", "asyncio.proactor_events", "subprocess", "test.support", "asyncio", "_asyncio", "unittest", "io", "concurrent.futures", "platform", "threading", "signal", "asyncio.events", "weakref", "socket", "os", "functools", "tty", "re", "time", "collections.abc", "selectors", "errno", "asyncio.coroutines", "asyncio.selector_events", "ssl", "sys"], "function_names": ["test_handle_weakref", "test_create_ssl_unix_connection", "process_exited", "test_bidirectional_pty", "test_write_pty", "throw", "test_subprocess_shell", "test_get_event_loop", "client", "create_event_loop", "_test_get_event_loop_new_process__sub_proc", "check_killed", "test_coroutine_like_object_debug_formatting", "test_call_soon_threadsafe", "test_callback_with_exception", "__init__", "eof_received", "patched_call_soon", "test_connect_accepted_socket_ssl_timeout_for_plain_socket", "reader", "test_call_later", "test_writer_callback", "test_get_loop", "datagram_received", "test_server_close", "test_get_event_loop_thread", "test_subprocess_shell_invalid_args", "test_read_pty_output", "test_connect_accepted_socket", "test_write_pipe_disconnect_on_close", "test_close_running_event_loop", "test_read_pipe", "test_ssl_connect_accepted_socket", "test_subprocess_exec", "connection_lost", "test_hash", "tearDown", "test_create_server_multiple_hosts_ipv6", "test_when", "noop", "check_ssl_extra_info", "_make_ssl_unix_server", "test_create_unix_server_path_socket_error", "data_received", "test_create_unix_connection", "test_create_datagram_endpoint_sock", "test_add_signal_handler", "__await__", "test_create_connection_local_addr_in_use", "callback", "test_remove_fds_after_closing", "_make_ssl_server", "test_timer_comparison", "test_create_server_addr_in_use", "test_handle_repr_debug", "test_subprocess_close_after_finish", "test_timeout_rounding", "test_create_unix_server_ssl_verify_failed", "test_create_unix_server", "test_subprocess_kill", "test_subprocess_exec_invalid_args", "f", "test_create_datagram_endpoint_ipv6", "test_reader_callback_cancel", "tearDownModule", "test_create_server_ssl_verified", "_basetest_create_ssl_connection", "connection_made", "test_get_event_loop_after_set_none", "test_create_server_ssl", "test_writer_callback_cancel", "test_timer", "test_call_soon", "_test_create_datagram_endpoint", "setUp", "test_not_implemented_async", "test_reader_callback", "test_subprocess_stderr_redirect_to_stdout", "_dummy_ssl_create_context", "test_subprocess_close_client_stream", "test_internal_fds", "_create_ssl_context", "test_set_event_loop", "test_timer_repr_debug", "test_subprocess_exitcode", "test_subprocess_terminate", "_run_once", "test_write_pipe", "test_create_server_ssl_verify_failed", "broken_unix_getsockname", "close", "test_run_until_complete_stopped", "test_prompt_cancellation", "test_get_event_loop_policy", "test_wait_closed", "test_create_ssl_connection", "writer", "test_subprocess_send_signal", "test_new_event_loop", "test_create_server_dual_stack", "test_signal_handling_args", "test_create_server_reuse_port", "test_run_in_executor", "test_timer_repr", "_test_create_ssl_connection", "test_subprocess_wait_no_same_group", "test_handle", "test_get_event_loop_returns_running_loop", "test_get_event_loop_calls_set_event_loop", "test_run_in_executor_cancel", "test_add_fds_after_closing", "test_create_unix_server_ssl", "run_in_thread", "test_signal_handling_while_selecting", "test_get_event_loop_new_process", "pipe_data_received", "test_create_server", "test_set_event_loop_policy", "getaddrinfo_task", "test_create_connection_local_addr", "test_subprocess_interactive", "my_handler", "test_subprocess_stderr", "check_terminated", "test_close", "error_received", "test_not_implemented", "test_create_server_sock", "get_event_loop", "test_run_until_complete", "pipe_connection_lost", "create_server_multiple_hosts", "test_create_unix_server_ssl_verified", "test_create_server_multiple_hosts_ipv4", "test_create_connection", "run", "test_unclosed_pipe_transport", "check_source_traceback", "test_handle_source_traceback", "test_call_soon_threadsafe_same_thread", "_basetest_create_connection", "test_create_datagram_endpoint", "test_run_until_complete_nesting", "send", "_make_unix_server", "test_create_server_ssl_match_failed", "test_handle_repr", "test_event_loop_policy"], "function_calls": ["object", "test", "getattr", "all", "cb", "CoroLike", "repr", "isinstance", "super", "doit", "create_connection", "str", "MyDatagramProto", "tuple", "hash", "coro1", "reader", "range", "ValueError", "broken_unix_getsockname", "getaddrinfo", "MyReadPipeProto", "set", "check_source_traceback", "next", "type", "func", "hasattr", "bytearray", "len", "Policy", "inner", "close_loop", "MyProto", "orig_run_once", "main", "MyWritePipeProto", "wait", "connect", "coro2", "map", "print"], "class_names": ["ProactorEventLoopTests", "TestError", "MySubprocessProtocol", "SubprocessTestsMixin", "CoroLike", "PolicyTests", "TestAbstractServer", "GetEventLoopTestsMixin", "EventLoopTestsMixin", "SelectEventLoopTests", "KqueueEventLoopTests", "MyDatagramProto", "EPollEventLoopTests", "TestMyProto", "TimerTests", "TestCGetEventLoop", "HandleTests", "TestMyDatagramProto", "AbstractEventLoopTests", "PollEventLoopTests", "MyReadPipeProto", "TestServer", "Policy", "TestPyGetEventLoop", "MyProto", "MyBaseProto", "MyWritePipeProto", "UnixEventLoopTestsMixin"], "class_method_calls": ["selectors.KqueueSelector", "thread.start", "write_proto.state", "f.cancel", "loop.call_at", "proto.transport", "loop.connect_read_pipe", "ssl.PROTOCOL_TLS_SERVER", "h2.cancel", "support.skip_unless_bind_unix_socket", "sslcontext_client.check_hostname", "selectors.EpollSelector", "write_proto.transport", "sslobj.getpeercert", "test_utils.simple_server_sslcontext", "self._create_ssl_context", "asyncio.get_running_loop", "self.returncode", "loop._ssock", "signal.setitimer", "signal.ITIMER_REAL", "tr.close", "loop.remove_writer", "test_utils.get_function_source", "sslcontext.load_cert_chain", "loop.get_debug", "events.get_running_loop", "self.assertIsNot", "errno.EADDRINUSE", "os.path", "self.create_event_loop", "csock.sendall", "tr.get_extra_info", "sock.bind", "os.read", "thread.is_alive", "policy.get_event_loop", "proto.state", "sslcontext_client.load_verify_locations", "sock.getsockbyname", "client.sendall", "loop.create_task", "self.assertWarns", "signal.signal", "HandleTests.test_handle_repr", "events._py__set_running_loop", "transp.close", "f_proto.set_result", "self.assertIsNotNone", "coro.close", "loop.time", "transport.sendto", "loop.set_debug", "proto.data", "weakref.WeakValueDictionary", "test_utils.TestCase", "test_utils.SIGNED_CERTFILE", "ssl.SSLError", "loop.sock_recv", "functools.partialmethod", "lsock.getsockname", "support.skip_if_broken_multiprocessing_synchronize", "socket.socket", "self._basetest_create_ssl_connection", "asyncio.get_event_loop", "socket.SO_REUSEPORT", "sys.executable", "os.write", "h1.__eq__", "mock.sentinel", "asyncio.SelectorEventLoop", "io.open", "server.transport", "loop.create_future", "server.close", "proto.got_data", "loop.create_connection", "self.assertRaises", "h.cancelled", "th.join", "proactor_events.BaseProactorEventLoop", "sock_ob.fileno", "read_proto.done", "h._run", "h.when", "self.get_event_loop_saved", "ssl.PROTOCOL_TLS_CLIENT", "self.done", "proto.loop", "socket.SOL_SOCKET", "loop.is_closed", "asyncio.set_event_loop", "loop.sock_sendfile", "ssl.SSLContext", "socket.socketpair", "loop.getaddrinfo", "cm.exception", "transp.terminate", "asyncio.SubprocessProtocol", "concurrent.futures", "ssl.CertificateError", "asyncio.AbstractEventLoop", "selector_events.BaseSelectorEventLoop", "os.openpty", "socket.create_server", "rsock.setblocking", "self.assertRegex", "coroutines._format_coroutine", "sock.getsockopt", "transp.kill", "lock.acquire", "self.assertIsNone", "transport.get_extra_info", "asyncio.DatagramProtocol", "sock.close", "sys.version_info", "asyncio.iscoroutine", "test_utils.ONLYKEY", "loop.run_in_executor", "asyncio._set_running_loop", "time.monotonic", "self.assertLess", "mock_sock.socket", "self.transport", "lsock.accept", "proto.completed", "self.check_killed", "loop.remove_reader", "loop.sock_connect", "loop.sock_accept", "tty.setraw", "server.wait_closed", "read_proto.state", "self.assertLessEqual", "loop.set_default_executor", "functools.partial", "policy.set_child_watcher", "self.addCleanup", "self._test_create_ssl_connection", "loop.set_exception_handler", "s_transport.get_extra_info", "socket.AF_INET6", "client.nbytes", "self.nbytes", "loop.add_reader", "loop.run_until_complete", "proto.disconnects", "loop.remove_signal_handler", "client.send", "socket.SOCK_DGRAM", "signal.SIGTERM", "os.dup", "r.close", "test_utils.run_test_unix_server", "asyncio.DefaultEventLoopPolicy", "loop.sock_recv_into", "events._py_get_running_loop", "w.fileno", "self.data", "server.get_loop", "read_transport._pipe", "client.write", "events._c_get_running_loop", "signal.default_int_handler", "test_utils.disable_logger", "asyncio.Protocol", "collections.abc", "mock.patch", "time.sleep", "proto.returncode", "loop.call_later", "self.skipTest", "loop.is_running", "test_utils.run_briefly", "old_loop.close", "events.get_event_loop", "asyncio.TimerHandle", "loop.call_soon_threadsafe", "self.loop", "test_utils.simple_client_sslcontext", "support.join_thread", "support.requires_mac_ver", "t.result", "threading.Lock", "unittest.skipUnless", "os.getpid", "support.gc_collect", "self.assertNotEqual", "self.assertGreaterEqual", "asyncio.sleep", "test_utils.run_test_server", "self.assertIs", "coro.__qualname__", "t.start", "support.IPV6_ENABLED", "ssl.Purpose", "threading.get_ident", "loop._csock", "loop.create_server", "ex.errno", "proto.connected", "events._py__get_running_loop", "write_transport._pipe", "policy.get_child_watcher", "loop.call_soon", "test_utils.SIGNING_CA", "client.state", "r.recv", "self.assertTrue", "r.fileno", "server.state", "re.escape", "loop.call_exception_handler", "loop.subprocess_shell", "platform.mac_ver", "read_transport.close", "ssl.CERT_REQUIRED", "self._set_running_loop_saved", "mock.Mock", "self._make_ssl_server", "unittest.SkipTest", "ov.pending", "csock.close", "stdout.close", "subprocess.STDOUT", "signal.getsignal", "read_proto.nbytes", "loop.sendfile", "signal.SIGALRM", "lsock.close", "asyncio.new_event_loop", "coro.cr_running", "w.setblocking", "loop.add_writer", "policy.set_event_loop", "watcher.attach_loop", "sys.platform", "sslobj.cipher", "events.AbstractServer", "self._test_create_datagram_endpoint", "self._make_unix_server", "loop.connect_write_pipe", "sslcontext_client.options", "stdin.write", "loop.subprocess_exec", "pr.done", "h._source_traceback", "events._c_get_event_loop", "coro.cr_code", "asyncio.coroutine", "lock.release", "self.assertWarnsRegex", "test_utils.gen_unix_socket_path", "rsock.close", "sock.getsockname", "ssl.OP_NO_SSLv2", "loop.add_signal_handler", "test_utils.run_until", "events._get_running_loop", "proto.nbytes", "os.kill", "results.append", "self.test_connect_accepted_socket", "loop.run_forever", "transport.write", "h.cancel", "asyncio.AbstractEventLoopPolicy", "asyncio.get_event_loop_policy", "self.assertRaisesRegex", "self.set_event_loop", "t.join", "self.assertIn", "self.check_terminated", "h._callback", "tr.__class__", "unittest.skipIf", "w.close", "self.create_server_multiple_hosts", "signal.SIG_DFL", "socket.getnameinfo", "test_utils.PEERCERT", "pr.transport", "asyncio.set_child_watcher", "f.done", "wsock.detach", "sslcontext.options", "asyncio.Event", "threading.Thread", "transp.get_pipe_transport", "os.pipe", "selectors.PollSelector", "self.assertEqual", "socket.SOCK_STREAM", "asyncio.BaseProtocol", "loop.close", "asyncio.CancelledError", "server.nbytes", "socket.AF_UNIX", "loop.getnameinfo", "h._args", "policy.new_event_loop", "test_utils.dummy_ssl_context", "transport.close", "os.close", "f.result", "socket.NI_NUMERICHOST", "read_proto.transport", "rpipeobj.close", "loop.default_exception_handler", "signal.SIGKILL", "self.assertIsInstance", "coro.__name__", "self.get_running_loop_saved", "m_set_event_loop.assert_called_with", "client.connect", "client_ssl.wrap_socket", "signal.SIGHUP", "write_transport.close", "m.call_count", "asyncio.set_event_loop_policy", "signal.NSIG", "support.find_unused_port", "client.close", "httpd.address", "signal.SIGINT", "self.got_data", "sock.setblocking", "pr.nbytes", "sys._getframe", "r.setblocking", "asyncio._get_running_loop", "f2.cancel", "unittest.TestCase", "asyncio.SafeChildWatcher", "self.disconnects", "self.assertFalse", "version.split", "socket.NI_NUMERICSERV", "self.state", "w.send", "sock.fileno", "proto.done", "selectors.SelectSelector", "test_utils.ONLYCERT", "sslobj.compression", "policy._local", "events._c__set_running_loop", "self.assertGreater", "self._get_running_loop_saved", "unittest.main", "csock.recv", "h1.__ne__", "asyncio.Transport", "server.sockets", "self.connected", "socket.AF_INET", "asyncio.ProactorEventLoop", "loop.create_datagram_endpoint", "proto.set_result", "self.check_ssl_extra_info", "bytes_read.extend", "loop.connect_accepted_socket", "self._make_ssl_unix_server", "pool.shutdown", "asyncio.Handle", "csock.connect", "self.completed", "wpipeobj.close", "sslcontext_client.verify_mode", "client.get_extra_info", "events._set_running_loop", "client.transport", "events._py_get_event_loop", "transp.send_signal", "loop._internal_fds", "os.unlink", "th.start", "client.done", "self.doCleanups", "loop.stop", "write_transport.write", "test_utils.MockPattern", "events._c__get_running_loop", "self._basetest_create_connection", "write_proto.done", "mock.ANY", "loop.sock_sendall"]}, "test_futures.py": {"libraries": ["unittest", "re", "concurrent.futures", "threading", "gc", "test.test_asyncio.utils", "asyncio.futures._copy_future_state", "sys", "unittest.mock", "test.support", "asyncio.futures", "asyncio"], "function_names": ["last_cb", "exception", "test_log_traceback", "test_exception_class", "_new_future", "test_schedule_callbacks_list_mutation_1", "test", "setUp", "run_briefly", "_get_future_cls", "cancelled", "test_exception", "test_callbacks_invoked_on_set_result", "mut", "__eq__", "test_wrap_future_cancel2", "_make_callback", "test_callbacks_remove_first_and_second_callback", "result", "test_yield_from_twice", "test_future_stop_iteration_args", "set_result", "test_tb_logger_exception_result_retrieved", "test_wrap_future_future", "test_callbacks_remove_first_callback", "test_callbacks_remove_third_callback", "memory_error", "test_constructor_positional", "_fakefunc", "__init__", "test_cancel", "check_future_exception_never_retrieved", "cancel", "set_exception", "test_tb_logger_not_called_after_cancel", "test_tb_logger_exception_unretrieved", "test_future_exception_never_retrieved_debug", "test_remove_done_callback", "test_future_source_traceback", "test_wrap_future_cancel", "test_tb_logger_result_unretrieved", "test_uninitialized", "test_future_exception_never_retrieved", "test_future_del_segfault", "__del__", "run", "test_result", "__iter__", "test_isfuture", "test_future_repr", "test_schedule_callbacks_list_mutation_2", "test_initial_state", "test_tb_logger_result_retrieved", "test_wrap_future", "test_future_del_collect", "test_set_result_unless_cancelled", "test_remove_done_callbacks_list_mutation", "test_ensure_future", "tearDownModule", "bag_appender", "done", "first_cb", "test_tb_logger_abandoned", "test_inherit_without_calling_super_init", "test_future_iter_throw", "func_repr", "test_init_constructor_default_loop", "test_iter", "test_tb_logger_exception_retrieved", "test_copy_state", "test_wrap_future_use_global_loop", "coro", "fixture", "test_callbacks_invoked_on_set_exception"], "function_calls": ["test", "MyFut", "MemoryError", "RuntimeError", "repr", "DuckFuture", "super", "memory_error", "iter", "_copy_future_state", "Evil", "CSubFuture", "Exception", "range", "evil", "MyFuture", "next", "type", "hasattr", "func_repr", "coro", "fixture"], "class_names": ["PyFutureInheritanceTests", "CFutureInheritanceTests", "PyFutureTests", "BaseFutureDoneCallbackTests", "BaseFutureTests", "CFutureTests", "PyFutureDoneCallbackTests", "CSubFutureTests", "CFutureDoneCallbackTests", "BaseFutureInheritanceTests", "evil", "MyFuture", "Evil", "DuckTests", "CSubFutureDoneCallbackTests", "MyFut", "CSubFuture", "DuckFuture"], "class_method_calls": ["f.set_result", "unittest.skipUnless", "f_result.result", "self.cls", "self.assertEqual", "support.gc_collect", "self.assertNotEqual", "self.assertIs", "fut.get_loop", "ex.shutdown", "threading.get_ident", "asyncio.CancelledError", "fut.remove_done_callback", "newf_cancelled.cancelled", "f_one_callbacks.add_done_callback", "f.cancel", "self.assertRaises", "self.__result", "f.set_exception", "f.get_loop", "futures._set_result_unless_cancelled", "f.result", "fi.throw", "fut.result", "f1.result", "self.assertTrue", "asyncio.wrap_future", "self.done", "f2._loop", "f_pending_debug.cancel", "self.assertIsInstance", "f2.cancelled", "asyncio.set_event_loop", "f.cancelled", "re.escape", "fut.__await__", "f_cancelled.cancel", "f_many_callbacks.cancel", "fut.set_result", "concurrent.futures", "self._get_future_cls", "mock.Mock", "self.cancelled", "asyncio.set_event_loop_policy", "future.set_exception", "test_utils.get_function_source", "bag.append", "self.assertRegex", "fut.done", "futures._CFuture", "f_pending_debug._source_traceback", "fi.send", "self.__cancelled", "f_one_callbacks.cancel", "re.DOTALL", "fut.cancel", "sys._getframe", "sys.version_info", "f_two_callbacks.add_done_callback", "f2.cancel", "gc.collect", "self.assertFalse", "f_many_callbacks.add_done_callback", "f_result.set_result", "self.result", "f._loop", "newf_exception.done", "asyncio.InvalidStateError", "newf.done", "f.add_done_callback", "fut.__iter__", "ex.submit", "self.addCleanup", "newf.result", "self._make_callback", "f_exception.exception", "fut.cancelled", "func.__qualname__", "self.check_future_exception_never_retrieved", "ex.args", "unittest.main", "newf_exception.result", "self._new_future", "m_log.error", "re.compile", "f_exception.set_exception", "futures._PyFuture", "self.new_test_loop", "self.run_briefly", "asyncio.ensure_future", "f.remove_done_callback", "self.assertRaisesRegex", "exc.__traceback__", "fut.exception", "self.fail", "self.__exception", "f1.set_result", "fut._asyncio_future_blocking", "test_utils.TestCase", "fut._log_traceback", "fut.add_done_callback", "mock.patch", "future._source_traceback", "self._asyncio_future_blocking", "f_pending.cancel", "f.done", "f.exception", "asyncio.isfuture", "test_utils.run_briefly", "fut.set_exception", "f1.cancelled", "mock.ANY", "events.get_event_loop", "self.loop"]}, "test_futures2.py": {"libraries": ["unittest", "asyncio"], "function_names": [], "function_calls": ["func", "repr"], "class_names": ["FutureTests"], "class_method_calls": ["self.assertIn", "asyncio.wait_for", "asyncio.all_tasks", "unittest.IsolatedAsyncioTestCase"]}, "test_locks.py": {"libraries": ["threading", "test.lock_tests", "sys", "weakref", "test.support"], "function_names": ["test_main", "test_lock_lifetime", "test_all_locks", "setUp", "run_deadlock_avoidance_test", "test_deadlock", "test_no_deadlock", "f", "_acquire", "tearDown", "bootstrap"], "function_calls": ["len", "test_main", "str", "wr", "classmethod", "_acquire", "range"], "class_names": ["ModuleLockAsRLockTests", "DeadlockAvoidanceTests", "LifetimeTests"], "class_method_calls": ["self.old_switchinterval", "sys.setswitchinterval", "support.reap_threads", "results.append", "self.assertEqual", "support.gc_collect", "splitinit._bootstrap", "test_util.import_importlib", "self.assertGreaterEqual", "lock_tests.Bunch", "cls.LockType", "self.assertIn", "results.count", "self.assertNotIn", "sys.getswitchinterval", "b.release", "support.setswitchinterval", "a.release", "lock_tests.RLockTests", "support.run_unittest", "threading.Barrier", "self.bootstrap", "weakref.ref", "lock.acquire", "self.assertIsNone", "self.run_deadlock_avoidance_test", "test_util.test_both", "self.LockType", "pairs.pop", "self.init", "init.items", "barrier.wait", "self.DeadlockError"]}, "test_pep492.py": {"libraries": ["unittest", "types", "test.test_asyncio.utils", "sys", "unittest.mock", "asyncio"], "function_names": ["test_context_manager_async_with", "setUp", "test_function_returning_awaitable", "test_async_def_coroutines", "gen", "throw", "test_iscoroutine", "test_types_coroutine", "__await__", "test_iscoroutinefunction", "test_debug_mode_manages_coroutine_origin_tracking", "test_context_manager_with_await", "test_double_await", "close", "test_task_print_stack", "func", "send", "tearDownModule", "test_readline"], "function_calls": ["Awaitable", "runner", "test", "super", "bar", "afunc", "start", "coro", "FakeCoro", "foo", "func", "gen", "reader"], "class_names": ["Awaitable", "CoroutineTests", "FakeCoro", "StreamReaderTests", "BaseTest", "LockTests"], "class_method_calls": ["self.assertIsInstance", "t.cancel", "asyncio.ensure_future", "coro.close", "self.assertEqual", "asyncio.StreamReader", "types._GeneratorWrapper", "asyncio.sleep", "sys.get_coroutine_origin_tracking_depth", "self.assertIs", "asyncio.BoundedSemaphore", "mock.Mock", "self.set_event_loop", "primitive.locked", "coro.send", "asyncio.set_event_loop_policy", "asyncio.Lock", "data.append", "T.get_stack", "asyncio.BaseEventLoop", "asyncio.coroutine", "self.assertRaises", "test_utils.TestCase", "asyncio.iscoroutinefunction", "self.assertWarns", "stream.feed_data", "lock.locked", "asyncio.Semaphore", "unittest.main", "asyncio.Condition", "types.coroutine", "self.assertTrue", "f.close", "asyncio.iscoroutine", "self.assertFalse", "stream.feed_eof", "self.loop"]}, "test_proactor_events.py": {"libraries": ["unittest", "asyncio.proactor_events.BaseProactorEventLoop", "io", "test.support", "test.test_asyncio.utils", "sys", "unittest.mock", "asyncio.proactor_events._ProactorWritePipeTransport", "asyncio.proactor_events._ProactorDatagramTransport", "asyncio.proactor_events._ProactorDuplexPipeTransport", "socket", "asyncio.proactor_events._ProactorSocketTransport", "asyncio"], "function_names": ["test_pause_writing_2write", "test_call_connection_lost", "test_fatal_error", "test_sock_sendfile_iobuffer", "test_write_eof_write_pipe", "__init__", "test_force_close_idempotent", "test_make_datagram_transport", "test_loop_reading_no_data", "test_sendto_exception", "test_sendto_memoryview", "test_write_eof_buffer_write_pipe", "test_pause_writing_3write", "close_transport", "test_write", "connection_lost", "test_datagram_loop_reading_data", "test_write_to_self", "test_write_eof_buffer", "test_sendto", "cleanup", "socket_transport", "test_loop_self_reading", "test_datagram_loop_reading_aborted", "test_sendto_buffer_bytearray", "test_loop_reading_data", "test_loop_reading_conn_reset_lost", "data_received", "test_fatal_error_2", "test_fatal_error_connected", "test_sock_sendfile_not_regular_file", "test_datagram_loop_reading_no_data", "test_sendto_no_data", "test_abort", "test_loop_writing_force_close", "make_socket", "test_write_more", "test_dont_pause_writing", "test_stop_serving", "test_sendto_error_received_connected", "test_sendto_bytearray", "test_loop_reading_exception", "test_close_self_pipe", "tearDownModule", "test_write_no_data", "connection_made", "test_loop_reading_aborted", "test__loop_writing_closing", "test_sock_sendfile_not_a_file", "test_loop_writing_closing", "setUp", "test_loop_reading", "test_loop_reading_aborted_is_fatal", "test_sendto_connected_addr", "test_process_events", "test_pause_resume_writing", "pause_writing_transport", "test_pause_resume_reading", "test_write_eof", "test_close_buffer", "setUpClass", "test_sendto_str", "test__loop_writing_exception", "test__loop_writing_error_received", "test__loop_writing_error_received_connection", "run_loop", "datagram_transport", "test_force_close", "test_datagram_loop_writing_aborted", "test_create_server", "test_datagram_loop_reading", "test_sendto_buffer", "test_close", "prepare", "test_loop_reading_aborted_closing", "test_sendto_error_received", "test_loop_self_reading_fut", "tearDownClass", "test_sendto_buffer_memoryview", "test_sendto_closing", "test_ctor", "test_datagram_loop_writing", "test_loop_writing_stop", "test_close_write_fut", "test_loop_self_reading_exception", "test_write_eof_duplex_pipe", "test_loop_writing_err", "test_loop_writing", "test_create_server_cancel", "test_make_socket_transport"], "function_calls": ["object", "_ProactorDuplexPipeTransport", "ConnectionRefusedError", "memoryview", "RuntimeError", "super", "ConnectionAbortedError", "open", "range", "list", "_ProactorDatagramTransport", "close_transport", "BaseProactorEventLoop", "_ProactorSocketTransport", "OSError", "bytearray", "loop", "_ProactorWritePipeTransport", "ConnectionResetError"], "class_names": ["ProactorSocketTransportTests", "MyProto", "ProactorDatagramTransportTests", "ProactorEventLoopUnixSockSendfileTests", "BaseProactorEventLoopTests"], "class_method_calls": ["tr._closing", "f.set_result", "self.closed", "self.assertEqual", "socket.SOCK_STREAM", "self.protocol", "self.make_socket", "self.assertIs", "transport._write_fut", "loop.close", "tr._loop_reading", "transport._sock", "support.TESTFN", "tr._read_fut", "loop._csock", "srv_sock.getsockname", "loop.create_future", "tr.get_write_buffer_size", "server.close", "tr._loop", "tr._force_close", "self.assertRaises", "futures.append", "proto.transport", "transport.close", "m_logging.error", "sock1.fileno", "call_soon.call_args", "tr._protocol", "m_exc.assert_not_called", "self.datagram_transport", "fut.result", "proto.wait_closed", "test_utils.make_test_protocol", "self.assertTrue", "sock.setsockopt", "call_soon.called", "socket.SOL_SOCKET", "self.assertIsInstance", "make_tr.called", "tr.abort", "exc_handler.assert_not_called", "srv_sock.bind", "loop._ssock", "fut.set_result", "transport._closing", "mock.Mock", "transport._conn_lost", "tr._eof_written", "tr.is_closing", "asyncio.set_event_loop_policy", "support.find_unused_port", "tr.close", "tr.resume_reading", "tr.set_write_buffer_limits", "future1.cancel", "self.prepare", "self.pause_writing_transport", "sock.setblocking", "self.assertIsNone", "tr.is_reading", "self.socket_transport", "self.sock", "transport._loop_writing", "tr.write", "fut.cancel", "tr._loop_writing", "asyncio.DatagramProtocol", "sock.close", "test_utils.mock_nonblocking_socket", "transport._fatal_error", "self.assertFalse", "tr.write_eof", "self.proactor", "self.run_loop", "sys.platform", "self.transport", "sock2.close", "server.wait_closed", "socketpair.return_value", "transport._buffer", "self.loop", "self.ssock", "tr._fatal_error", "fp.write", "sock1.close", "self.addCleanup", "socket.SO_SNDBUF", "support.unlink", "tr._buffer", "self.fut", "unittest.main", "m_log.error", "tr._call_connection_lost", "socket.SO_RCVBUF", "m_log.warning", "res.set_result", "cls.DATA", "tr.pause_reading", "self.new_test_loop", "self.MyProto", "tr.can_write_eof", "asyncio.ProactorEventLoop", "socket.AF_INET", "write_fut.cancel", "tr._write_fut", "io.BytesIO", "self.csock", "tr._conn_lost", "self.assertRaisesRegex", "socket.SHUT_WR", "self.set_event_loop", "self.started", "tr._paused", "self.data", "transport.sendto", "test_utils.TestCase", "unittest.skipIf", "read_fut.cancel", "self.file", "asyncio.Protocol", "loop._internal_fds", "mock.patch", "sock2.fileno", "future2.cancel", "test_utils.run_briefly", "f.fileno", "asyncio.SendfileNotAvailableError", "transport._address", "socket.socket"]}, "test_protocols.py": {"libraries": ["unittest", "unittest.mock", "asyncio"], "function_names": ["test_base_protocol", "test_subprocess_protocol", "test_buffered_protocol", "test_protocol", "test_datagram_protocol"], "function_calls": ["hasattr"], "class_names": ["ProtocolsAbsTests"], "class_method_calls": ["p.pause_writing", "dp.connection_lost", "p.buffer_updated", "sp.connection_made", "asyncio.BaseProtocol", "dp.connection_made", "p.connection_lost", "sp.connection_lost", "asyncio.SubprocessProtocol", "p.eof_received", "mock.Mock", "asyncio.BufferedProtocol", "sp.pipe_data_received", "dp.error_received", "asyncio.Protocol", "self.assertIsNone", "p.connection_made", "sp.pipe_connection_lost", "p.data_received", "p.get_buffer", "dp.datagram_received", "sp.process_exited", "asyncio.DatagramProtocol", "p.resume_writing", "unittest.TestCase", "self.assertFalse"]}, "test_queues.py": {"libraries": ["unittest", "test.test_asyncio.utils", "unittest.mock", "asyncio"], "function_names": ["test_nonblocking_put_exception", "setUp", "test_nonblocking_get_exception", "test_cancelled_getters_not_being_held_in_self_getters", "test_repr", "test_float_maxsize", "test_maxsize", "test_cancelled_put_silence_value_error_exception", "gen", "test_format", "test_full", "test_task_done", "test_str", "test_get_cancelled", "test_why_are_getters_waiting", "test_order", "test_cancelled_puts_not_being_held_in_self_putters", "test_nonblocking_get", "test_put_cancelled", "test_ctor_noloop", "test_task_done_underflow", "_test_repr_or_str", "test_put_cancel_drop", "a_generator", "test_get_with_waiting_putters", "test_join_empty_queue", "test_put_cancelled_race", "test_nonblocking_put", "test_why_are_putters_waiting", "test_blocking_get_wait", "test_get_cancelled_race", "test_empty", "test_get_with_putters", "tearDownModule", "test_get_cancel_drop_one_pending_reader", "test_blocking_put", "test_blocking_put_wait", "test_ctor_loop", "test_blocking_get", "test_put_with_waiting_getters", "test_get_cancel_drop_many_pending_readers"], "function_calls": ["len", "producer", "test", "fn", "queue_put", "join", "super", "getter", "worker", "hex", "add_putter", "consumer", "add_getter", "putter", "sum", "id", "queue_get", "range"], "class_names": ["QueueJoinTests", "PriorityQueueTests", "LifoQueueJoinTests", "_QueueTestBase", "LifoQueueTests", "QueuePutTests", "PriorityQueueJoinTests", "QueueBasicTests", "_QueueJoinTestMixin", "QueueGetTests"], "class_method_calls": ["t.result", "self.q_class", "t1.cancel", "self.assertEqual", "q.get", "asyncio.sleep", "q.maxsize", "self.assertIs", "asyncio.Queue", "asyncio.CancelledError", "queue.get_nowait", "self.assertRaises", "put_c.done", "queue.put", "queue.qsize", "self.assertTrue", "q.full", "queue._putters", "asyncio.set_event_loop", "have_been_put.append", "reader3.result", "reader.result", "q.put_nowait", "mock.Mock", "asyncio.wait", "asyncio.set_event_loop_policy", "q._unfinished_tasks", "started.set", "reader1.cancel", "q._loop", "put_task.cancel", "self.assertIsNone", "asyncio.gather", "q.join", "queue.get", "put_a.done", "self._test_repr_or_str", "self.assertFalse", "q.get_nowait", "queue._getters", "reader2.result", "writer.cancel", "waiter.result", "loop.create_task", "asyncio.TimeoutError", "asyncio.QueueEmpty", "self.assertWarns", "q._putters", "loop.run_until_complete", "put_c.cancel", "unittest.main", "put_b.done", "t1.done", "reader.cancel", "q._format", "self.new_test_loop", "asyncio.PriorityQueue", "q.put", "self.assertAlmostEqual", "t.done", "queue.put_nowait", "loop.time", "asyncio.QueueFull", "loop.set_debug", "test_utils.TestCase", "q.empty", "t2.result", "asyncio.LifoQueue", "q.task_done", "started.wait", "loop.call_later", "waiter.done", "q.qsize", "asyncio.wait_for", "asyncio.Event", "test_utils.run_briefly", "self.loop"]}, "test_runners.py": {"libraries": ["unittest", "unittest.mock", "asyncio"], "function_names": ["test_asyncio_run_debug", "test_asyncio_run_raises", "setUp", "set_event_loop", "test_asyncio_run_only_coro", "tearDown", "__init__", "test_asyncio_run_cancels_hanging_tasks", "test_asyncio_run_return", "test_asyncio_run_from_running_loop", "get_event_loop", "test_asyncio_run_closes_gens_after_hanging_tasks_errors", "new_loop", "test_asyncio_run_reports_hanging_tasks_errors", "new_event_loop"], "function_calls": ["spin", "ValueError", "fidget", "super", "main", "leftover", "TestPolicy"], "class_names": ["FancyExit", "RunTests", "TestPolicy", "BaseTest"], "class_method_calls": ["asyncio.run", "self.loop_factory", "asyncio.get_event_loop", "coro.close", "spinner.ag_running", "asyncio.get_running_loop", "self.assertEqual", "loop.call_exception_handler", "lo_task.done", "asyncio.AbstractEventLoopPolicy", "asyncio.sleep", "asyncio.get_event_loop_policy", "self.assertRaisesRegex", "loop.shutdown_ag_run", "self.assertIs", "mock.Mock", "asyncio.CancelledError", "asyncio.set_event_loop_policy", "asyncio.create_task", "lazyboy.done", "asyncio.BaseEventLoop", "spinner.ag_frame", "self.new_loop", "self.assertRaises", "self.subTest", "loop._selector", "loop.get_debug", "self.assertIsNone", "mock.patch", "test_utils.MockInstanceOf", "test_utils.MockPattern", "loop.shutdown_asyncgens", "self.assertTrue", "call_exc_handler_mock.assert_called_with", "policy.loop", "unittest.TestCase", "self.assertFalse", "loop._process_events", "self.loop"]}, "test_selector_events.py": {"libraries": ["unittest", "asyncio.selector_events._SelectorDatagramTransport", "asyncio.selector_events.BaseSelectorEventLoop", "test.test_asyncio.utils", "ssl", "asyncio.selector_events._SelectorTransport", "unittest.mock", "socket", "selectors", "asyncio.selector_events._SelectorSocketTransport", "asyncio"], "function_names": ["test_sendto_ready_closing", "test_close_write_buffer", "test_get_buffer_error", "test__add_reader", "test_fatal_error", "test_read_eof_received_error", "test_read_ready_eof_keep_open", "test_add_reader_existing_writer", "test_write_partial", "test_process_events_read_cancelled", "test_write_bytearray", "test_sendto_exception", "_close_self_pipe", "test_write_partial_bytearray", "test_sendto_memoryview", "close_transport", "test_write", "test_write_eof_buffer", "test_sendto", "socket_transport", "test_sendto_buffer_bytearray", "test_write_ready_partial_none", "test_sendto_ready_error_received", "test_read_ready_conn_reset", "create_transport", "test_write_ready_partial", "test_fatal_error_connected", "test_process_events_write_cancelled", "test_remove_writer", "test_transport_close_remove_writer", "test_sendto_no_data", "test_read_ready_tryagain_interrupted", "test_accept_connection_multiple", "test_abort", "callback", "test_sendto_ready_error_received_connection", "test_process_events_read", "test_read_ready_eof", "test_close_no_selector", "test_remove_reader", "test_add_reader", "test_sendto_error_received_connected", "test_sendto_bytearray", "test_write_eof_after_close", "test_sendto_ready_tryagain", "tearDownModule", "test_write_no_data", "test_write_str", "test_add_writer_existing", "test_read_ready_tryagain", "setUp", "test_read_ready_oserr", "test_write_exception", "test_proto_type_switch", "test_sendto_connected_addr", "test_sendto_ready", "test_write_tryagain", "test_make_ssl_transport", "test_remove_writer_unknown", "test_pause_resume_reading", "test_fatal_error_custom_exception", "test_write_eof", "test_read_ready", "test_connection_lost", "test_remove_reader_unknown", "test_sendto_str", "test_write_partial_none", "test_write_ready_no_data", "test_sendto_ready_exception", "test_write_buffer", "test_get_buffer_zerosized", "test_sendto_tryagain", "test_process_events_write", "test_write_ready_exception", "datagram_transport", "test_force_close", "test_read_ready_err", "test_write_ready", "test_write_to_self_tryagain", "test_sendto_buffer", "test_read_from_self_tryagain", "test_close", "test_buffer_updated_error", "test_write_closing", "test_remove_reader_read_write", "test_write_ready_tryagain", "test_sendto_ready_no_data", "test_add_reader_existing", "test_sendto_error_received", "test_fatal_error_connected_custom_error", "test_write_ready_closing", "test_write_memoryview", "test_read_from_self_exception", "test_sendto_buffer_memoryview", "test_add_writer", "list_to_buffer", "test_sendto_closing", "test_ctor", "test_data_received_error", "_make_self_pipe", "test_write_partial_memoryview", "test_write_to_self_exception", "test_remove_writer_read_write", "test_make_socket_transport", "test_ctor_with_waiter", "test_make_ssl_transport_without_ssl_error"], "function_calls": ["ConnectionRefusedError", "memoryview", "_SelectorTransport", "repr", "RuntimeError", "_SelectorSocketTransport", "super", "_SelectorDatagramTransport", "MyException", "list", "MyError", "close_transport", "LookupError", "list_to_buffer", "OSError", "bytearray", "len", "TestBaseSelectorEventLoop", "EventLoop", "ConnectionResetError", "mock_obj"], "class_names": ["BaseSelectorEventLoopTests", "SelectorDatagramTransportTests", "TestBaseSelectorEventLoop", "SelectorTransportTests", "MyError", "SelectorSocketTransportBufferedProtocolTests", "EventLoop", "MyException", "SelectorSocketTransportTests"], "class_method_calls": ["remove_reader.assert_called_with", "self.assertEqual", "mock.sentinel", "self.protocol", "asyncio.sleep", "buf_proto.buffer_updated", "self.assertIs", "transport._sock", "tr._sock_fd", "reader._cancelled", "self.sock_fd", "ssock.close", "r._callback", "self._csock", "tr._loop", "tr._force_close", "self.assertRaises", "self._internal_fds", "transport._force_close", "transport.close", "tr._sock", "transport._sendto_ready", "tr._protocol", "m_exc.assert_not_called", "self._ssock", "tr._add_reader", "class_name.lower", "self.datagram_transport", "test_utils.make_test_protocol", "self.assertTrue", "self.assertIsInstance", "tr.abort", "reader.cancelled", "transport.pause_reading", "transport.is_reading", "self.selector", "transport._closing", "mock.Mock", "transport._conn_lost", "tr.is_closing", "csock.close", "transport._write_ready", "asyncio.set_event_loop_policy", "tr.close", "tr.resume_reading", "transport.resume_reading", "self.assertIsNone", "tr.is_reading", "self.socket_transport", "self.sock", "tr.write", "asyncio.DatagramProtocol", "transport._fatal_error", "self.assertFalse", "tr.write_eof", "w._callback", "writer.cancelled", "transport._buffer", "writer.cancel", "self.loop", "tr._fatal_error", "tr._read_ready", "waiter.result", "self.create_transport", "asyncio.BufferedProtocol", "self.addCleanup", "transport.set_protocol", "selectors.EVENT_READ", "selectors.SelectorKey", "m_exc.assert_called_with", "tr._buffer", "transport.__class__", "unittest.main", "tr._eof", "csock.fileno", "tr._call_connection_lost", "m_log.warning", "buf_proto.get_buffer", "tr.pause_reading", "transport._read_ready", "tr._write_ready", "reader.cancel", "self.new_test_loop", "self.assertIsNotNone", "tr.can_write_eof", "self.buf", "transport.write", "tr._conn_lost", "self.assertRaisesRegex", "socket.SHUT_WR", "self.set_event_loop", "self.assertIn", "tr._paused", "ssock.fileno", "writer._cancelled", "transport.sendto", "test_utils.TestCase", "unittest.skipIf", "remove_writer.assert_called_with", "test_utils.disable_logger", "asyncio.Protocol", "mock.patch", "sock.accept", "selectors.EVENT_WRITE", "test_utils.MockPattern", "selector.close", "test_utils.run_briefly", "transport._address", "mock.ANY", "socket.socket"]}, "test_sendfile.py": {"libraries": ["unittest", "test.support", "test.test_asyncio.utils", "asyncio.base_events", "ssl", "sys", "tempfile", "asyncio.constants", "unittest.mock", "socket", "os", "selectors", "asyncio"], "function_names": ["run_loop", "test_sendfile_force_fallback", "test_sendfile_pre_and_post_data", "prepare_socksendfile", "setUp", "reduce_receive_buffer_size", "test_sock_sendfile_success", "test_sendfile_fallback_close_peer_in_the_middle_of_receiving", "data_received", "test_sendfile_ssl_close_peer_after_receiving", "reduce_send_buffer_size", "test_sendfile_close_peer_in_the_middle_of_receiving", "prepare_sendfile", "test_sendfile_force_unsupported_native", "create_event_loop", "test_sock_sendfile_with_offset_and_count", "test_sendfile", "test_sendfile_not_supported", "__init__", "eof_received", "test_sendfile_ssl_partial", "make_socket", "test_sendfile_prevents_bare_write", "setUpClass", "test_sock_sendfile_mix_with_regular_send", "tearDownClass", "test_sendfile_ssl_pre_and_post_data", "connection_lost", "test_sendfile_partial", "tearDown", "test_sendfile_close_peer_after_receiving", "test_sendfile_ssl", "test_sendfile_no_fallback_for_fallback_transport", "tearDownModule", "cleanup", "connection_made", "sendfile_native", "test_sendfile_for_closing_transp", "test_sock_sendfile_zero_size"], "function_calls": ["bytearray", "len", "isinstance", "super", "MyProto", "open", "coro", "MySendfileProto", "hasattr"], "class_names": ["SendfileMixin", "SockSendfileMixin", "SelectEventLoopTests", "ProactorEventLoopTests", "KqueueEventLoopTests", "PollEventLoopTests", "MyProto", "EPollEventLoopTests", "SendfileBase", "SendfileTestsBase", "MySendfileProto"], "class_method_calls": ["test_utils.simple_client_sslcontext", "self.closed", "selectors.PollSelector", "self.assertEqual", "support.gc_collect", "socket.SOCK_STREAM", "self.make_socket", "asyncio.SelectorEventLoop", "selectors.KqueueSelector", "self.reduce_receive_buffer_size", "support.TESTFN", "self.prepare_sendfile", "loop.create_future", "server.close", "srv_proto.transport", "self.assertRaises", "proto.transport", "selectors.EpollSelector", "proto.wait_closed", "self.assertTrue", "test_utils.simple_server_sslcontext", "self.done", "support.HOST", "sock.setsockopt", "socket.SOL_SOCKET", "constants.SENDFILE_FALLBACK_READBUFFER_SIZE", "srv_sock.bind", "self.prepare_socksendfile", "fut.set_result", "mock.Mock", "asyncio.set_event_loop_policy", "srv_proto.data", "support.find_unused_port", "tr.close", "sock.setblocking", "cli_proto.done", "self.create_event_loop", "transport.set_write_buffer_limits", "sock.close", "asyncio.DatagramProtocol", "srv_proto.nbytes", "self.state", "self.run_loop", "sys.platform", "self.transport", "server.wait_closed", "transport.is_closing", "self.loop", "selectors.SelectSelector", "fp.write", "tempfile.TemporaryFile", "self.addCleanup", "socket.SO_SNDBUF", "cli_proto.transport", "support.unlink", "cls.__old_bufsize", "self.nbytes", "self.fut", "base_events.BaseEventLoop", "socket.SO_RCVBUF", "cls.DATA", "srv_proto.done", "self.connected", "socket.AF_INET", "asyncio.ProactorEventLoop", "self.close_after", "transport._sendfile_compatible", "self.BUF_SIZE", "self.assertRaisesRegex", "self.set_event_loop", "self.started", "self.data", "proto.data", "test_utils.TestCase", "cli_sock.connect", "unittest.skipIf", "self.file", "asyncio.Protocol", "self.reduce_send_buffer_size", "self.doCleanups", "self.DATA", "self.skipTest", "test_utils.run_briefly", "asyncio.SendfileNotAvailableError", "constants._SendfileMode", "socket.socket"]}, "test_server.py": {"libraries": ["unittest", "threading", "time", "test.test_asyncio.utils", "test.support", "test.test_asyncio.functional", "asyncio"], "function_names": ["tearDownModule", "client", "test_start_server_1", "test_start_unix_server_1", "new_loop"], "function_calls": ["client", "main", "range", "hasattr"], "class_names": ["BaseStartServer", "ProactorStartServerTests", "SelectorStartServerTests"], "class_method_calls": ["writer.wait_closed", "self.tcp_client", "asyncio.start_server", "unittest.skipUnless", "asyncio.ProactorEventLoop", "self.assertEqual", "asyncio.SelectorEventLoop", "writer.close", "reader.readline", "self.assertRaisesRegex", "support.HOSTv4", "srv.start_serving", "threading.Event", "asyncio.CancelledError", "self.unix_client", "asyncio.set_event_loop_policy", "main_task.cancel", "started.set", "self.assertRaises", "test_utils.unix_socket_path", "self.assertWarns", "srv.serve_forever", "started.wait", "self.assertIsNone", "unittest.main", "support.skip_unless_bind_unix_socket", "srv.is_serving", "time.sleep", "asyncio.start_unix_server", "sock.connect", "srv._sockets", "sock.send", "sock.close", "func_tests.FunctionalTestCaseMixin", "sock.settimeout", "self.assertTrue", "writer.write", "srv._waiters", "unittest.TestCase", "self.assertFalse", "sock.recv_all", "srv.sockets", "self.loop"]}, "test_sock_lowlevel.py": {"libraries": ["test.support", "test.test_asyncio.utils", "sys", "asyncio.proactor_events", "itertools.islice", "socket", "selectors", "asyncio", "itertools.cycle"], "function_names": ["_basetest_sock_client_ops", "create_event_loop", "test_create_connection_sock", "test_sock_client_fail", "setUp", "test_sock_client_ops", "test_huge_content_recvinto", "connection_made", "__init__", "data_received", "eof_received", "test_sock_accept", "connection_lost", "test_huge_content", "tearDown", "_basetest_sock_recv_into", "test_unix_sock_client_ops"], "function_calls": ["bytearray", "len", "cycle", "isinstance", "super", "MyProto", "islice", "memoryview", "bytes", "hasattr"], "class_names": ["ProactorEventLoopTests", "SelectEventLoopTests", "KqueueEventLoopTests", "PollEventLoopTests", "MyProto", "EPollEventLoopTests", "BaseSockTestsMixin"], "class_method_calls": ["self.assertIsInstance", "self.state", "sys.platform", "asyncio.Transport", "self.transport", "conn.gettimeout", "self.connected", "s.bind", "asyncio.ProactorEventLoop", "self.assertEqual", "support.gc_collect", "socket.SOCK_STREAM", "selectors.PollSelector", "client.connect", "test_utils.run_test_unix_server", "transport.write", "self.loop", "asyncio.SelectorEventLoop", "test_utils.run_test_server", "selectors.SelectSelector", "selectors.KqueueSelector", "listener.getsockname", "self._basetest_huge_content", "self.set_event_loop", "data.startswith", "pr.done", "self._basetest_huge_content_recvinto", "asyncio.create_task", "loop.create_future", "socket.AF_UNIX", "data.index", "tr.close", "self.assertRaises", "test_utils.TestCase", "proactor_events.BaseProactorEventLoop", "self._basetest_sock_client_ops", "client.close", "client.getpeername", "httpd.address", "self.nbytes", "asyncio.Protocol", "conn.close", "listener.listen", "sock.setblocking", "listener.close", "self.assertGreater", "listener.setblocking", "self._basetest_sock_recv_into", "support.skip_unless_bind_unix_socket", "pr.nbytes", "self.doCleanups", "listener.bind", "selectors.EpollSelector", "s.close", "data.find", "self.create_event_loop", "client.getsockname", "sock.close", "self.assertTrue", "test_utils.run_briefly", "s.getsockname", "self.done", "socket.socket"]}, "test_sslproto.py": {"libraries": ["unittest", "asyncio.sslproto", "asyncio", "test.test_asyncio.utils", "asyncio.protocols", "asyncio.log", "ssl", "sys", "unittest.mock", "weakref", "socket", "test.test_asyncio.functional", "logging"], "function_names": ["mock_handshake", "test_set_new_app_protocol", "setUp", "test_handshake_timeout_negative", "test_create_connection_ssl_slow_handshake", "test_eof_received_waiter", "data_received", "test_data_received_after_closing", "test_start_tls_server_1", "test_fatal_error_no_name_error", "test_handshake_timeout", "client", "serve", "buffer_updated", "test_create_connection_ssl_failed_certificate", "test_start_tls_client_buf_proto_1", "get_buffer", "ssl_protocol", "test_create_connection_memory_leak", "__init__", "eof_received", "test_write_after_closing", "test_buf_feed_data", "test_connection_lost", "server", "test_close_during_handshake", "test_start_tls_client_reg_proto_1", "connection_lost", "test_get_extra_info_on_closed_connection", "new_loop", "test_handshake_timeout_zero", "tearDownModule", "replace_transport", "test_start_tls_wrong_args", "connection_made", "test_start_tls_client_corrupted_ssl", "test_start_tls_slow_client_cancel"], "function_calls": ["bytearray", "object", "len", "client", "super", "ClientProtoSecond", "ClientProto", "ClientProtoFirst", "run_main", "memoryview", "main", "client_sslctx", "bytes", "ServerProto", "client_context", "Proto", "hasattr"], "class_names": ["ClientProto", "ClientProtoSecond", "ClientProtoFirst", "ProactorStartTLSTests", "BaseStartTLS", "SslProtoHandshakeTests", "ServerProto", "SelectorStartTLSTests", "Proto"], "class_method_calls": ["test_utils.simple_client_sslcontext", "ssl_proto._app_transport", "unittest.skipUnless", "self.assertEqual", "asyncio.sleep", "asyncio.SelectorEventLoop", "self.assertIs", "server.close", "self.connection_made", "self.PAYLOAD_SIZE", "self.assertRaises", "orig_sock.send", "test_utils.dummy_ssl_context", "self.on_con_lost", "self.on_got_hello", "sslproto.SSLProtocol", "ssl_proto.connection_lost", "self.usemv", "self.assertTrue", "test_utils.simple_server_sslcontext", "srv.addr", "self.assertIsInstance", "protocols._feed_data_to_buffered_proto", "sslpipe.shutdown", "mock.Mock", "asyncio.set_event_loop_policy", "tr.close", "self.on_con", "ssl_proto._get_extra_info", "asyncio.new_event_loop", "self.assertIsNone", "sock.dup", "self.on_data", "tr.write", "self.tcp_server", "sock.close", "logging.FATAL", "unittest.TestCase", "ssl_proto._fatal_error", "self.transport", "server.wait_closed", "reader.readline", "self.on_eof", "asyncio.BufferedProtocol", "ssl_proto._app_protocol", "sock.start_tls", "self.addCleanup", "log.logger", "transport.abort", "waiter.exception", "ssl.SSLCertVerificationError", "new_tr.write", "asyncio.TimeoutError", "sock.shutdown", "self.assertWarns", "new_tr.set_protocol", "orig_sock.close", "transp.close", "unittest.main", "proto.replace_transport", "sock.connect", "func_tests.FunctionalTestCaseMixin", "writer.write", "messages.append", "asyncio.open_connection", "self.assertIsNotNone", "self.tcp_client", "server.sockets", "asyncio.ProactorEventLoop", "self.buf", "sslpipe.do_handshake", "self.ssl_protocol", "self.TIMEOUT", "proto.con_made_cnt", "writer.close", "self.assertRaisesRegex", "self.set_event_loop", "self.data", "new_tr.close", "ssl_proto.connection_made", "proto.tr", "ssl_proto.eof_received", "self.mv", "proto.data", "test_utils.TestCase", "ssl_proto.data_received", "unittest.skipIf", "sock.sendall", "ssl.SSLError", "asyncio.Protocol", "weakref.ref", "mock.patch", "transp.write", "server_waits_on_handshake.set_result", "asyncio.wait_for", "self.con_made_cnt", "sock.settimeout", "test_utils.run_briefly", "socket.SHUT_RDWR", "sock.recv_all", "self.loop"]}, "test_streams.py": {"libraries": ["unittest", "threading", "gc", "test.support", "test.test_asyncio.utils", "queue", "ssl", "sys", "unittest.mock", "pickle", "socket", "os", "asyncio"], "function_names": ["test_streamreader_constructor", "stop", "test_exception_waiter", "test_read_until_eof", "test_readuntil_eof", "setUp", "test_wait_closed_on_close_with_unread_data", "test___repr__transport", "test_feed_empty_data", "test_open_unix_connection_error", "test_exception", "cb", "handle_client_callback", "test_readuntil_multi_chunks_1", "test_drain_raises", "test_readline_nolimit_nowait", "test_at_eof", "test_read_zero", "test_readuntil_multi_chunks", "test___repr__waiter", "test_IncompleteReadError_pickleable", "_basetest_open_connection_no_loop_ssl", "test___repr__data", "_basetest_open_connection_error", "test_readline_empty_eof", "test_async_writer_api_exception_after_close", "test_read_exception", "test_readline_read_byte_count", "_basetest_open_connection", "test_start_server", "test___repr__exception", "test_open_unix_connection", "test_LimitOverrunError_pickleable", "__init__", "test_open_connection", "test_open_connection_no_loop_ssl", "test_readuntil_separator", "test_readline_limit_with_existing_data", "test_feed_nonempty_data", "test_wait_closed_on_close", "test_start_unix_server", "test_exception_cancel", "test_read_all_from_pipe_reader", "test___repr__nondefault_limit", "test_readline_eof", "server", "test_readexactly_eof", "test_ctor_global_loop", "start", "test_readexactly_limit", "test_eof_feed_when_closing_writer", "tearDown", "test_read_line_breaks", "tearDownModule", "test_open_unix_connection_no_loop_ssl", "test_invalid_limit", "test_readline", "test_readexactly_zero_or_less", "test_readexactly_exception", "test_open_connection_error", "test_readline_exception", "test_readline_limit", "test_async_writer_api", "test___repr__", "test_read_eof", "start_callback", "test_readexactly", "test___repr__eof", "test_streamreaderprotocol_constructor", "test_readuntil_limit_found_sep", "test_read_limit", "test_read"], "function_calls": ["ValueError", "client", "len", "set_err", "super", "inner", "str", "ZeroDivisionError", "MyServer", "open", "repr", "range", "RuntimeError"], "class_names": ["StreamTests", "MyServer"], "class_method_calls": ["self._basetest_open_connection_no_loop_ssl", "protocol._loop", "writer.wait_closed", "os.pipe", "stream.readuntil", "asyncio.start_server", "sys.executable", "self.assertEqual", "e2.expected", "q.get", "wr.drain", "self.handle_client", "reader._loop", "self.assertIs", "test_utils.run_test_server", "server.start", "thread.start", "client_reader.readline", "client_writer.drain", "t1.result", "self.assertRaises", "thread.join", "test_utils.dummy_ssl_context", "writer._protocol", "os.close", "stream.set_exception", "pickle.HIGHEST_PROTOCOL", "asyncio.LimitOverrunError", "support.skip_unless_bind_unix_socket", "wr.is_closing", "asyncio.start_unix_server", "asyncio.Future", "stream.readline", "stream._buffer", "self.assertTrue", "self.server", "asyncio.set_event_loop", "asyncio.StreamReader", "cm.exception", "thread.setDaemon", "e.expected", "e.consumed", "mock.Mock", "asyncio.wait", "asyncio.set_event_loop_policy", "rd.readline", "client_writer.write", "socket.create_server", "self.subTest", "asyncio.StreamReaderProtocol", "self.assertRegex", "httpd.address", "wr.wait_closed", "asyncio.new_event_loop", "stream.feed_data", "pickle.loads", "self.assertIsNone", "client_writer.wait_closed", "clt.close", "stream.exception", "stream.readexactly", "sock.close", "gc.collect", "asyncio.SafeChildWatcher", "client_writer.close", "self.assertFalse", "m_events.get_event_loop", "stream.feed_eof", "watcher.attach_loop", "stream.at_eof", "t.cancel", "sys.platform", "asyncio.open_unix_connection", "asyncio.IncompleteReadError", "wr.close", "reader.readline", "queue.Queue", "stream._transport", "self.addCleanup", "rd.read", "asyncio.create_subprocess_exec", "self._basetest_open_connection", "test_utils.unix_socket_path", "self.assertWarns", "writer.drain", "self.path", "e2.consumed", "unittest.main", "sock.getsockname", "proc.wait", "writer.write", "messages.append", "asyncio.open_connection", "q.put", "stream._waiter", "reader.read", "test_utils.run_test_unix_server", "writer.close", "self.assertRaisesRegex", "e.partial", "self.set_event_loop", "data.endswith", "stream.read", "rd.at_eof", "wr.write", "server.start_callback", "test_utils.TestCase", "e2.partial", "unittest.skipIf", "stream._loop", "self._basetest_open_connection_error", "mock.patch", "sock.accept", "asyncio.set_child_watcher", "self.DATA", "pickle.dumps", "test_utils.run_briefly", "server.stop", "threading.Thread", "self.handle_client_callback", "self.loop"]}, "test_subprocess.py": {"libraries": ["_testcapi", "_posixsubprocess", "unittest.mock", "subprocess", "test.support", "sysconfig", "traceback", "unittest", "io", "resource.getrlimit", "select", "threading", "types", "textwrap", "signal", "test.support.FakePath", "os", "itertools", "time", "gc", "msvcrt", "shutil", "tempfile", "selectors", "errno", "resource.RLIMIT_NPROC", "sys", "resource.setrlimit"], "function_names": ["test_send_signal_dead", "test_getoutput", "test_zombie_fast_process_del", "test_check_output_stdin_arg", "test_exception_bad_args_0", "test_bytes_executable", "test_stdin_none", "test_stdout_filedes_of_stdout", "test_capture_stderr", "test_preexec_exception", "test_exception_errpipe_bad_data", "test_communicate_BrokenPipeError_stdin_close", "test_broken_pipe_cleanup", "test_bufsize_equal_one_binary_mode", "test_check_output_stdin_with_input_arg", "test_io_unbuffered_works", "test_close_fds_1_2", "test_communicate_stdout", "test_universal_newlines_and_text", "test_kill_dead", "test_pipe_cloexec", "test_startupinfo", "_kill_process", "test_executable_replaces_shell", "test_executable_takes_precedence", "test_preexec", "test_call_seq", "test_io_buffered_by_default", "test_check_output", "test_bufsize_equal_one_text_mode", "test_pass_fds_inheritable", "__init__", "open_fds", "test_stderr_fileobj", "test_env", "test_run_with_shell_timeout_and_capture_output", "test_cwd_with_pathlike", "test_terminate", "test_bufsize_is_none", "test_cwd_with_relative_arg", "test_leak_fast_process_del_killed", "kill_p1", "test_startupinfo_keywords", "test_swap_fds", "test_cwd", "test_stdout_stderr_file", "test_check_zero", "test_stderr_pipe", "test_communicate_pipe_fd_leak", "test_capture_output", "test_communicate_BrokenPipeError_stdin_close_with_timeout", "test_close_fds_0_2", "test_invalid_bufsize", "tearDown", "test_communicate", "_test_bufsize_equal_one", "test_stderr_redirect_with_no_stdout_redirect", "test_check_call_zero", "test_pipe", "test_stdout_fileobj", "test_universal_newlines_communicate", "test_universal_newlines_communicate_stdin_stdout_stderr", "test_fork_exec", "test_stderr_none", "_restore_fds", "test_capture_stdout", "test_no_leaking", "test_args_string", "test_stdout_filedes", "test_double_close_on_error", "test_universal_newlines_communicate_input_none", "test_communicate_stderr", "test_stderr_with_capture_output_arg", "test_terminate_dead", "test_shell_string", "test_pass_fds_redirected", "test_communicate_timeout_large_output", "test_shell_sequence_with_spaces", "test_universal_newlines_communicate_stdin", "test_send_signal", "test_call_kwargs", "test_wait", "test_pathlike_executable_replaces_shell", "_get_chdir_exception", "test_small_errpipe_write_fd", "test_wait_when_sigchild_ignored", "test_communicate_returns", "test_failed_child_execute_fd_leak", "test_check_output_stderr", "test_timeout", "test_communicate_epipe_only_stdin", "test_issue31471", "test_stdout_pipe", "test_cwd_with_bytes", "test_CalledProcessError_str_non_zero", "test_run_kwargs", "test_close_fds_with_stdio", "test_wait_timeout", "__del__", "test_file_not_found_includes_filename", "test_close_fds_0_1_2", "test_nonexisting_with_pipes", "test_close_fds_when_max_fd_is_lowered", "_split_python_path", "test_threadsafe_wait", "kill_proc_timer_thread", "assertStderrEqual", "raise_runtime_error", "test_communicate_epipe", "test_file_not_found_with_bad_cwd", "test_check", "test_run_with_pathlike_path_and_arguments", "test_returncode", "test_run_abort", "run_python", "test_universal_newlines_communicate_encodings", "test_stdout_stderr_pipe", "test_preexec_gc_module_failure", "test_check_output_stdout_arg", "test_check_output_input_arg", "test_communicate_BrokenPipeError_stdin_flush", "test_executable_with_cwd", "test_stdout_devnull", "test_stdin_pipe", "test_CalledProcessError_str_signal", "test_communicate_timeout", "with_spaces", "test_pass_fds", "test_kill", "test_issue8780", "test_call_keyboardinterrupt_no_kill", "setUp", "test_executable_without_cwd", "test_surrogates_error_message", "proper_error", "popen_via_context_manager", "test_invalid_args", "test_empty_handle_list", "test_stdout_with_capture_output_arg", "test_stdout_stderr_are_single_inout_fd", "test_empty_env", "_check_swap_std_fds_with_one_closed", "test_call_string", "test_check_output_input_none_text", "test_select_unbuffered", "test_bytes_executable_replaces_shell", "check_close_std_fds", "test_writes_before_communicate", "test_check_call_nonzero", "test_close_fd_0", "__int__", "test_leaking_fds_on_error", "test_context_manager_keyboardinterrupt_no_kill", "test_stderr_devnull", "test_close_fds", "test_communicate_repeated_call_after_stdout_close", "test_preexec_fork_failure", "_assert_python", "test_stdout_none", "test_invalid_env", "_kill_dead_process", "test_close_fds_after_preexec", "test_startupinfo_copy", "test_communicate_stdin", "test_exception_errpipe_normal", "_test_keyboardinterrupt_no_kill", "test_run_keyboardinterrupt_no_kill", "test_call_timeout", "test_close_fds_0_1", "test_stderr_stdin_are_single_inout_fd", "test_check_output_input_none", "test_invalid_cmd", "test_close_fd_1", "test_pipe_cloexec_real_tools", "test_swap_std_fds_with_one_closed", "_normalize_cwd", "test_run_with_bytes_path_and_arguments", "_execute_child", "test_exception_cwd", "test_check_output_nonzero", "test_communicate_errors", "test_preexec_errpipe_does_not_double_close_pipes", "test_list2cmdline", "test_stdin_fileobj", "test_stdout_stdin_are_single_inout_fd", "handler", "test_restore_signals", "test_exception_bad_executable", "test_specific_shell", "test_close_fd_2", "test_communicate_pipe_buf", "is_env_var_to_ignore", "test_stderr_filedes", "test__all__", "test_undecodable_env", "test_check_output_timeout", "test_cwd_with_absolute_arg", "test_creationflags", "setUpModule", "test_stdin_filedes", "test_start_new_session", "test_check_output_input_none_universal_newlines", "test_bytes_program", "prepare", "test_cwd_with_relative_executable", "test_communicate_BrokenPipeError_stdin_write", "bad_error", "test_remapping_std_fds", "test_shell_encodings", "test_noshell_string_with_spaces", "test_empty_attribute_list", "_assert_cwd", "test_executable", "test_shell_sequence", "test_shell_string_with_spaces", "test_CalledProcessError_str_unknown_signal", "check_swap_fds", "test_stopped", "test_poll", "test_stdin_devnull", "test_noshell_sequence_with_spaces", "test_run_with_pathlike_path", "test_communicate_eintr", "test_fork_exec_sorted_fd_sanity_check", "test_handles_closed_on_exception", "raise_it", "_save_fds", "kill_p2", "test_pathlike_executable"], "function_calls": ["BadInt", "frozenset", "getattr", "popener", "id", "is_env_var_to_ignore", "PopenTestException", "BadEnv", "RuntimeError", "repr", "isinstance", "super", "getrlimit", "setrlimit", "str", "PopenExecuteChildRaises", "ascii", "open", "range", "ValueError", "list", "set", "int", "zip", "enumerate", "eval", "hasattr", "len", "normcase", "bytes", "FakePath", "map"], "class_names": ["BadInt", "ProcessTestCaseNoPoll", "_TestExecuteChildPopen", "BaseTestCase", "POSIXProcessTestCase", "PopenExecuteChildRaises", "ProcessTestCase", "MiscTests", "RecordingPopen", "Win32ProcessTestCase", "CommandsWithSpaces", "ContextManagerTests", "RunFuncTestCase", "PopenTestException", "PopenNoDestructor", "BadEnv"], "class_method_calls": ["stderr.startswith", "fds.extend", "stdout.decode", "support.requires_mac_ver", "stderr.decode", "os.pipe", "self.first", "sys.executable", "unittest.skipUnless", "os.write", "self.assertEqual", "os.getpid", "self.assertNotEqual", "gc.enable", "os.O_RDONLY", "handles.append", "inst.wait", "shutil.which", "e.exception", "e.errno", "mock__wait.call_args_list", "sys.stdout", "self._check_swap_std_fds_with_one_closed", "self.RecordingPopen", "tf.fileno", "t.start", "io.RawIOBase", "io.open", "p1.stdin", "support.TESTFN", "os.putenv", "cp.stderr", "self._normalize_cwd", "tempfile.gettempdir", "_posixsubprocess.fork_exec", "pass_fds.insert", "self.check_close_std_fds", "os.environb", "self.stdout", "subprocess.__all__", "self.assertRaises", "proc.pid", "startupinfo.hStdOutput", "shells.append", "s.getvalue", "os.close", "dev_null.fileno", "os.open", "shutil.rmtree", "os.getsid", "e.strerror", "support.check_warnings", "handles.pop", "subprocess.SW_HIDE", "msvcrt.get_osfhandle", "types.ModuleType", "os.linesep", "os.O_WRONLY", "startupinfo.wShowWindow", "p.pid", "os.O_RDWR", "sys.stderr", "self._split_python_path", "gc.disable", "signal.SIGABRT", "itertools.combinations", "mock_proc_stdin.write", "self._get_chdir_exception", "self.assertIsNotNone", "self.assertTrue", "p2.stdout", "sysconfig.get_config_var", "proc.__enter__", "os.get_inheritable", "stdout.rstrip", "signal.SIGKILL", "fname.lower", "self.assertIsInstance", "subprocess.list2cmdline", "process.wait", "fork_exec.side_effect", "subprocess.__dict__", "p1.wait", "mock_proc_stdin.flush", "fds.append", "self._kill_dead_process", "support.import_module", "self._assert_cwd", "res.returncode", "subprocess.STARTF_USESHOWWINDOW", "self.stdin", "p.stdin", "os.getcwd", "read_bytes.decode", "tempfile.mkdtemp", "support.SuppressCrashReport", "unittest.SkipTest", "mock__wait.side_effect", "subprocess.Popen", "self.assertNotIn", "default_proc_status.splitlines", "subprocess.STDOUT", "self.stderr", "output.splitlines", "os.rmdir", "self.check_swap_fds", "tf.write", "select.select", "support.findfile", "mock.call", "desired_exception.filename", "os.curdir", "signal.SIGUSR1", "tf.read", "n.startswith", "self.PopenNoDestructor", "signal.SIGINT", "self._assert_python", "self.assertIsNone", "subprocess.STARTUPINFO", "self.orig_selector", "support.unix_shell", "proc.stdout", "os.path", "self.assertStderrEqual", "out.rstrip", "p1.terminate", "self.instances_created", "mock__wait.call_count", "os.O_CREAT", "traceback.format_exc", "p2.communicate", "subprocess.DEVNULL", "p1.communicate", "line.startswith", "process.communicate", "unittest.TestCase", "self.assertFalse", "self.with_spaces", "os.devnull", "support.strip_python_stderr", "support.change_cwd", "self._nonexistent_dir", "proc.poll", "support.PGO", "time.monotonic", "self.assertLess", "sys.platform", "subprocess.getstatusoutput", "fobj.write", "os.read", "self.value", "desired_exception.strerror", "proc.communicate", "subprocess._cleanup", "value.encode", "sys.prefix", "self.assertLessEqual", "errno.EMFILE", "selectors.SelectSelector", "subprocess.call", "support.temp_cwd", "os.dup2", "os.fsencode", "tempfile.TemporaryFile", "startupinfo.dwFlags", "self._testcase", "self._TestExecuteChildPopen", "mock_proc_stdin.fileno", "self.addCleanup", "_testcapi.W_STOPCODE", "c.exception", "support.PIPE_MAX_SIZE", "support.temp_dir", "mock_proc_stdin.close", "startupinfo.hStdInput", "process.kill", "name.startswith", "subprocess.check_call", "self._save_fds", "restored_proc_status.splitlines", "expected.strip", "output.split", "self.assertWarnsRegex", "proc.stdin", "startupinfo.lpAttributeList", "open_fds.add", "signal.signal", "itertools.permutations", "self.assertWarns", "threading.Timer", "gc.isenabled", "self._test_keyboardinterrupt_no_kill", "subprocess.PIPE", "os.access", "p.returncode", "ProcessTestCase.setUp", "self.fname", "os.environ", "unittest.main", "sys.base_prefix", "msvcrt.CrtSetReportMode", "proc.returncode", "mock__communicate.side_effect", "self.run_python", "p.poll", "proc.kill", "p1.stdout", "proc.wait", "p.stderr", "os.lseek", "os.listdir", "os.chmod", "startupinfo.hStdError", "e.args", "cp.stdout", "tf.seek", "f.close", "p1.stderr", "signal.SIGTERM", "self._restore_fds", "os.kill", "subprocess._posixsubprocess", "os.dup", "results.append", "p2.wait", "proc.__exit__", "open_fds.update", "subprocess._PopenSelector", "p.communicate", "popen.communicate", "os.waitpid", "p.wait", "key.encode", "subprocess.getoutput", "possible_exports.add", "os.SEEK_SET", "p2.terminate", "errno.EISDIR", "proc.stderr", "errno.EPERM", "sigint_calls.append", "p.stdout", "os.chdir", "self._test_bufsize_equal_one", "self.assertIn", "t.join", "self.fail", "open_fds.pop", "subprocess.TimeoutExpired", "tempfile.mkstemp", "io.BufferedIOBase", "output.startswith", "stderr.encode", "f.read", "os.remove", "error_string.lower", "support.captured_stderr", "pass_fds.append", "unittest.skipIf", "subprocess._active", "os.X_OK", "e.filename", "signal.default_int_handler", "subprocess.run", "tf.close", "os.set_inheritable", "context.warning", "support.reap_children", "self._kill_process", "mock.patch", "os.unlink", "subprocess.check_output", "textwrap.dedent", "desired_exception.errno", "self.doCleanups", "time.sleep", "stdout.strip", "support.cpython_only", "self.skipTest", "cp.returncode", "cp.check_returncode", "subprocess.SubprocessError", "os.stat", "f.fileno", "sysconfig.is_python_build", "subprocess.CalledProcessError", "threading.Thread", "ProcessTestCase.tearDown"]}, "test_tasks.py": {"libraries": ["_functools", "contextlib", "test.test_asyncio.utils", "random", "unittest.mock", "test.support", "asyncio", "_asyncio", "unittest", "io", "types", "textwrap", "collections", "weakref", "test.support.script_helper.assert_python_ok", "functools", "asyncio.futures", "re", "gc", "contextvars", "asyncio.coroutines", "sys", "asyncio.tasks"], "function_names": ["test_as_completed", "test_current_task_no_running_loop_implicit", "test_current_task_with_implicit_loop", "test_run_coroutine_threadsafe_with_exception", "test_cancel_at_end", "test_one_exception", "notmuch", "test_cancel_yield", "test_ensure_future_error_msg", "test_as_completed_invalid_args", "test_wait_with_exception", "test_wait_with_timeout", "test_subclasses_ctask_cfuture", "test_wait_first_exception", "test_create_task_with_asynclike_function", "test__unregister_task_not_registered", "test_constructor_homogenous_futures", "test_wait_really_done", "throw", "test_task_repr", "test_coroutine_never_yielded", "test_result_exception_one_cancellation", "test_task_repr_wait_for", "test_return_coroutine_from_coroutine", "test_cancel_gather_2", "call", "test_iscoroutinefunction", "test_step_result_future", "__init__", "test_env_var_debug", "test_shield_shortcut", "test_tb_logger_not_called_after_cancel", "test_refleaks_in_task___init__", "coro1", "test_ensure_future_neither", "inner_coro", "test__register_task_1", "test_ensure_future_awaitable", "test_wait_for_self_cancellation", "test_task_class", "test__leave_task", "_loop", "test_task_awaits_on_itself", "test_context_1", "test_result_exception_success", "test_sleep_cancel", "test_cancel_gather_1", "test_one_cancellation", "tearDown", "test_shield_gather", "_test_cancel_wait_for", "test_exception_traceback", "test_duplicate_coroutines", "child_coro", "test_del__log_destroy_pending_segfault", "test_all_tasks_deprecated", "test_cancel_current_task", "test_create_task_with_noncoroutine", "t1", "test_wait_for_cancellation_race_condition", "test_constructor_loop_selection", "fut_on_done", "test_shield_effect", "fn", "test_success", "test_cancel_both_task_and_inner_future", "test_bare_create_named_task", "wait_for_future", "test_as_completed_with_timeout", "test_set_result_causes_invalid_state", "test__leave_task_failure2", "new_task", "test_wait", "__await__", "fn2", "__call__", "test_shield_result", "test_sleep", "call_soon", "test_run_coroutine_threadsafe", "test_create_task_with_oldstyle_coroutine", "test__leave_task_failure1", "test_asyncio_module_compiled", "__del__", "_check_empty_sequence", "test_ensure_future_task", "test_wait_for_blocking", "test_gather_shield", "test_current_task_with_interleaving_tasks", "task_factory", "test_context_2", "test_wait_invalid_args", "test_corowrapper_weakref", "tearDownModule", "format_coroutine", "test_wait_for", "coro_noop", "new_future", "test_task_cancel_waiter_future", "t2", "test_wait_first_completed", "test_yield_future_passes_cancel", "test_as_completed_concurrent", "test_task_source_traceback", "cancelling_callback", "t3", "coro", "test_task_repr_name_not_str", "test_get_coro", "test_task_set_methods", "wrap_futures", "test_stop_while_run_in_complete", "test_run_coroutine_threadsafe_task_cancelled", "setUp", "test_corowrapper_mocks_generator", "test_wait_first_exception_in_wait", "fn1", "test_shield_exception", "test_coroutine_non_gen_function_return_future", "__repr__", "test_wait_duplicate_coroutines", "test_baseexception_during_cancel", "test_step_result", "test_sleep_zero", "_check_success", "test_task_del_collect", "test_task_repr_autogenerated", "test__enter_task", "test_current_task_no_running_loop", "test_shield_cancel_outer", "test_future_subclass", "test_cancel_awaited_task", "outer_coro", "test_as_completed_reverse_wait", "test_wait_for_timeout_less_then_0_or_0_coroutine_do_not_started", "test_yield_from_corowrapper_send", "test_constructor_heterogenous_futures", "test_cancel_wait_for", "test_wait_with_global_loop", "test__register_task_2", "close", "inc_result", "test_as_completed_duplicate_coroutines", "test__enter_task_failure", "test_wait_for_with_global_loop", "test_current_task", "task", "func", "test_yield_wait_does_not_shield_cancel", "test_corowrapper_throw", "test_as_completed_with_unused_timeout", "test_ensure_future_future", "test_loop_argument_is_deprecated", "test_task_repr_coro_decorator", "get_loop", "done", "test_ensure_future_coroutine", "test_wait_for_timeout_less_then_0_or_0_future_done", "sleeper", "test_other_loop_future", "test_wait_errors", "target", "test_yield_vs_yield_from_generator", "test_run_coroutine_threadsafe_task_factory_exception", "coro2", "test_set_exception_causes_invalid_state", "check", "test_foobar", "test_log_traceback", "test_cancel_task_catching", "add_done_callback", "test_wait_for_waits_for_task_cancellation_w_timeout_0", "test_yield_from_corowrapper", "test_wait_for_timeout_less_then_0_or_0", "test_log_destroyed_pending_task", "add_subclass_tests", "gen", "test_constructor_empty_sequence", "test_shield_cancel_inner", "test_task_basics", "test_return_exceptions", "test_get_stack", "test__register_task_3", "test_task_cancel_sleeping_task", "test_loop_argument_is_deprecated_in_wait", "test_cancel", "test_context_3", "test__unregister_task", "test_cancel_inner_future", "test_wait_concurrent_complete", "test_exception_marking", "runner", "test_coroutine_non_gen_function", "test_await_old_style_coro", "test_cancel_blocking_wait_for", "test_run_coroutine_threadsafe_with_timeout", "test_cancellation_broadcast", "test_create_task_with_async_function", "_run_loop", "test_task_repr_partial_corowrapper", "test_debug_mode_interop", "send", "test_wait_for_race_condition", "kill_me", "test_loop_argument_is_deprecated_in_wait_for", "set_coroutine_debug", "call_later", "test_current_task_deprecated", "test_bare_create_task", "test_error_in_call_soon", "test_yield_vs_yield_from", "foo", "test_yield_from_awaitable", "test_cancel_task_ignoring", "test_wait_for_waits_for_task_cancellation"], "function_calls": ["t1", "check", "object", "orig_call_later", "test", "gettotalrefcount", "assert_python_ok", "getattr", "notmuch", "outer", "wait_for_future", "SystemExit", "sub", "Aw", "inner1", "blocking_coroutine", "RuntimeError", "repr", "StopIteration", "issubclass", "CoroLikeObject", "super", "doit", "call", "str", "iter", "outer_coro", "Evil", "staticmethod", "dict", "Exception", "TaskLike", "wait_for", "coro1", "Dummy", "range", "AssertionError", "inner_coro", "partial_func", "ValueError", "list", "runner", "MyExc", "inc_result", "run", "Fut", "set", "exc", "int", "type", "task", "sleep", "func", "notmutch", "hasattr", "kill_me", "format_coroutine", "coro_noop", "set_coroutine_debug", "len", "inner2", "t2", "inner", "bar", "child_coro", "sleeper", "coroutine_function", "ZeroDivisionError", "main", "nested", "foo", "coro", "coro2", "t3"], "class_names": ["PyTask_CFutureSubclass_Tests", "PyTask_PyFuture_SubclassTests", "CTaskSubclass_PyFuture_Tests", "CommonFuture", "BaseCurrentLoopTests", "SleepTests", "Aw", "CompatibilityTests", "PyTask_CFuture_Tests", "CoroLikeObject", "Evil", "TaskLike", "Dummy", "Future", "CIntrospectionTests", "CTask_PyFuture_Tests", "MyExc", "FutureGatherTests", "BaseTaskTests", "Fut", "PyIntrospectionTests", "BaseTaskIntrospectionTests", "GenericTaskTests", "CTask_CFuture_Tests", "CTask_CFuture_SubclassTests", "PyCurrentLoopTests", "Task", "CTask_Future_Tests", "SetMethodsTest", "GatherTestsBase", "CoroutineGatherTests", "RunCoroutineThreadsafeTests", "CCurrentLoopTests", "WaitTests", "PyTask_PyFuture_Tests"], "class_method_calls": ["t.result", "f.set_result", "unittest.skipUnless", "inner.set_exception", "self.assertEqual", "support.gc_collect", "self.assertNotEqual", "a.result", "waiter.set_result", "Future.set_exception", "fut.cb_added", "e.exception", "asyncio.sleep", "self._register_task", "sleeper.cancel", "exc_context.exception", "self.assertIs", "loop.close", "asyncio.CancelledError", "exception.args", "cls.test_subclasses_ctask_cfuture", "asyncio.FIRST_COMPLETED", "gen.gi_running", "tasks._py_enter_task", "collections.defaultdict", "f.cancel", "mock_handler.reset_mock", "self.assertRaises", "loop.advance_time", "match1.group", "f.set_exception", "fut2.set_result", "task.calls", "tasks.append", "self.other_loop", "loop.call_soon", "self.target", "asyncio.all_tasks", "f.result", "gen._source_traceback", "self.add", "loop.slow_callback_duration", "future.done", "handle._cancelled", "cb.called", "Task.all_tasks", "asyncio.coroutines", "asyncio.Future", "fut3.set_result", "fut.result", "gen.gi_frame", "outer.exception", "tasks._PyTask", "self.assertTrue", "notmuch.__name__", "outer.cancel", "inner1.cancelled", "stdout.rstrip", "task._fut_waiter", "self.new_task", "sleep_coro.close", "self.assertIsInstance", "asyncio.shield", "Future.set_result", "code.co_firstlineno", "exc_handler.call_args", "asyncio.set_event_loop", "d.set_exception", "result.append", "f.cancelled", "gen.__name__", "parent.result", "task.cancelled", "re.escape", "types.FrameType", "fut._loop", "task.set_exception", "self.one_loop", "outer._callbacks", "cm.exception", "waiter.cancelled", "fut.set_result", "t.cancelled", "task.get_loop", "mock.Mock", "child1.cancelled", "t.get_name", "c.set_result", "asyncio.wait", "asyncio.set_event_loop_policy", "task._source_traceback", "tasks._py_unregister_task", "io.StringIO", "t.get_loop", "tasks._c_enter_task", "asyncio.FIRST_EXCEPTION", "asyncio.create_task", "Task.current_task", "self._enter_task", "b.cancel", "cw.send", "file.seek", "test_utils.get_function_source", "types.CodeType", "self.subTest", "f_orig.set_result", "self.assertRegex", "fut.done", "coro.gi_frame", "gatherer.cancel", "asyncio.new_event_loop", "exc_handler.assert_called_once", "task.set_result", "cls.Task", "task._coro", "contextlib.contextmanager", "self.assertIsNone", "asyncio.gather", "t._fut_waiter", "t._loop", "contextvars.ContextVar", "re.DOTALL", "b.set_exception", "gen.__qualname__", "parent.exception", "sys._getframe", "loop._ready", "task.__init__", "gc.collect", "re.match", "asyncio.iscoroutine", "values.append", "self.assertFalse", "b.set_result", "callback.call_args", "fut2.cancelled", "self.cb_added", "match2.group", "self._leave_task", "self.wrap_futures", "wait.cancel", "t.cancel", "self.assertLess", "gather_task.result", "coros.append", "inner.cancel", "nested_task.cancelled", "asyncio.InvalidStateError", "gen.gi_code", "notmuch.__qualname__", "t.set_name", "random.uniform", "gather_task.cancelled", "coroutines._DEBUG", "asyncio.run_coroutine_threadsafe", "parent.cancel", "asyncio.current_task", "mock_handler.assert_called_with", "inner2.cancelled", "functools.partial", "a.set_result", "cls.test_task_source_traceback", "self.addCleanup", "task.cancel", "fut2._loop", "T.get_stack", "asyncio.Task", "task._log_destroy_pending", "asyncio.as_completed", "notmuch.__module__", "asyncio.coroutine", "e.cancel", "fut.cancelled", "cvar.get", "loop.create_task", "asyncio.TimeoutError", "child2.cancelled", "self.assertWarns", "self.coro", "child1.set_result", "fut3.cancelled", "t._must_cancel", "loop.run_until_complete", "ex.args", "unittest.main", "m_log.error", "task.get_coro", "random.randint", "self._check_success", "task.get_name", "a.done", "cvar.set", "re.compile", "fut.calls", "fut1.set_result", "c.set_exception", "task._log_traceback", "test_utils.MockCallback", "inner.set_result", "b.result", "futures._PyFuture", "t._source_traceback", "e.set_exception", "self.new_test_loop", "child2.set_result", "tasks._c_register_task", "file.read", "self.assertIsNotNone", "asyncio.ensure_future", "coro.close", "future.result", "self.assertAlmostEqual", "callback.call_args_list", "self.new_future", "self.Task", "tasks._c_unregister_task", "t.done", "d.cancel", "self.assertRaisesRegex", "self.set_event_loop", "t.add_done_callback", "self.assertIn", "task.exception", "loop.time", "fut.exception", "coro.send", "self.fail", "gen.close", "support.get_attribute", "task.done", "outer.cancelled", "c.cancel", "code.co_filename", "self._run_loop", "weakref.WeakValueDictionary", "cb.assert_called_once_with", "test_utils.TestCase", "self._test_cancel_wait_for", "other_loop.close", "asyncio.iscoroutinefunction", "t2.result", "cls.Future", "self.calls", "b.done", "gather_task.cancel", "qwe.cancel", "T.print_stack", "coro_noop.__qualname__", "cw.throw", "d.set_result", "self._unregister_task", "fut.add_done_callback", "mock.patch", "self._check_empty_sequence", "textwrap.dedent", "tasks._py_register_task", "loop.call_later", "future.cancel", "loop.stop", "cw.gen", "f.done", "completed.add", "f.exception", "asyncio.wait_for", "self.__class__", "test_utils.run_briefly", "support.refcount_test", "self.Future", "tasks._py_leave_task", "mock.ANY", "tasks._c_leave_task", "self.loop"]}, "test_transports.py": {"libraries": ["unittest", "asyncio.transports", "unittest.mock", "asyncio"], "function_names": ["write", "test_get_extra_info", "test_subprocess_transport_not_implemented", "test_not_implemented", "test_flowcontrol_mixin_set_write_limits", "get_write_buffer_size", "test_ctor_extra_is_none", "test_writelines", "test_dgram_not_implemented"], "function_calls": ["bytearray", "object", "memoryview", "writer", "MyTransport"], "class_names": ["TransportTests", "MyTransport"], "class_method_calls": ["asyncio.DatagramTransport", "transport.get_returncode", "asyncio.Transport", "transports.Transport", "transport.pause_reading", "transport.is_reading", "self.assertEqual", "transport.kill", "writer.assert_called_with", "transports._FlowControlMixin", "transport.get_pipe_transport", "transport.write", "transport.get_pid", "self.assertRaisesRegex", "self.assertIs", "mock.Mock", "transport.abort", "transport.sendto", "transport.can_write_eof", "transport.write_eof", "self.assertRaises", "transport.resume_reading", "transport.close", "writer.call_count", "self.assertIsNone", "unittest.main", "transport.writelines", "transport.terminate", "transport.get_extra_info", "transport.get_write_buffer_limits", "transport._protocol", "transport._extra", "transport.set_write_buffer_limits", "transport._protocol_paused", "self.assertTrue", "transport.send_signal", "unittest.TestCase", "self.assertFalse", "asyncio.SubprocessTransport", "transport.get_write_buffer_size"]}, "test_unix_events.py": {"libraries": ["contextlib", "test.test_asyncio.utils", "asyncio.log", "unittest.mock", "test.support", "asyncio", "unittest", "io", "threading", "signal", "collections", "pathlib", "socket", "os", "tempfile", "stat", "errno", "sys", "asyncio.unix_events"], "function_names": ["test_sigchld_remove_handler", "test_add_reader_or_writer_transport_fd", "test_set_loop_race_condition", "test_remove_signal_handler_2", "test__write_ready_err", "test_sock_sendfile_iobuffer", "test_remove_signal_handler_error", "test__call_connection_lost_with_err", "assert_raises", "test_write_partial", "__init__", "test_sock_sendfile_os_error_next_call", "test_sigchld_replace_handler", "wrapped_func", "test_create_unix_connection_ssl_timeout_with_plain_sock", "test_write_err", "test_create_unix_server_path_dgram", "test_create_unix_server_path_stream_bittype", "test_write", "connection_lost", "tearDown", "test_handle_signal_no_handler", "cleanup", "test__read_ready_blocked", "test_remove_signal_handler_error2", "test__read_ready_error", "test_create_unix_server_nopath_nosock", "test_write_again", "read_pipe_transport", "test_sigchld_race_condition", "test_child_watcher_replace_mainloop_existing", "test_create_unix_connection_pathlib", "test_remove_signal_handler", "test_add_signal_handler_install_error", "test_create_unix_server_ssl_timeout_with_plain_sock", "test_sigchld", "test_resume_reading_on_paused_pipe", "data_received", "test__write_ready_again", "test_add_signal_handler", "test_add_signal_handler_install_error3", "test_sock_sendfile_not_regular_file", "test_add_signal_handler_install_error2", "test_abort", "add_zombie", "test_close_already_closing", "test__write_ready_partial", "test_sock_sendfile_os_error_first_call", "test_write_eof_pending", "WEXITSTATUS", "make_socket", "test__write_ready", "test__close", "test_create_unix_connection_nopath_nosock", "WIFEXITED", "test_get_default_child_watcher", "test_pause_reading", "test_add_signal_handler_coroutine_error", "f", "test_create_watcher", "test_sock_sendfile_blocking_error", "tearDownModule", "test_write_no_data", "connection_made", "test_sigchld_unknown_status", "test_close_closing", "test_add_signal_handler_setup_error", "test_sock_sendfile_not_a_file", "setUp", "test_create_unix_connection_path_sock", "test_create_unix_connection_ssl_noserverhost", "test_sigchld_two_children_terminating_together", "set_wakeup_fd", "WTERMSIG", "test_close_on_finalizing", "test_create_unix_server_path_inetsock", "test__read_ready_eof", "test_write_eof", "write_pipe_transport", "test_sock_sendfile_cancel2", "test_get_child_watcher_thread", "close_pipe_transport", "waitpid_mocks", "test_create_unix_connection_nossl_serverhost", "setUpClass", "test_create_unix_server_existing_path_nonsock", "test_remove_signal_handler_cleanup_error", "WIFSIGNALED", "test_write_buffer", "test_pause_reading_on_paused_pipe", "test_create_unix_connection_path_inetsock", "test_write_close", "test_create_unix_server_ssl_bool", "test_create_unix_server_pathlib", "create_policy", "test_get_child_watcher_after_set", "run_loop", "test_sock_sendfile_not_available", "test_sock_sendfile_cancel1", "test_sigchld_two_children", "test_create_unix_server_existing_path_sock", "test_set_loop", "test_sock_sendfile_exception", "test__write_ready_closing", "create_watcher", "test_close", "waitpid", "prepare", "test_not_implemented", "test__write_ready_empty", "test__call_connection_lost", "test_resume_reading", "test_resume_reading_on_closed_pipe", "patch", "test_pause_reading_on_closed_pipe", "tearDownClass", "test_sigchld_unhandled_exception", "test_create_unix_server_bind_error", "test_check_signal", "test_ctor", "test_sigchld_unknown_pid_during_registration", "test_can_write_eof", "test_remove_child_handler", "test_sigchld_child_reaped_elsewhere", "test__read_ready", "test_add_reader_invalid_argument", "test_handle_signal_cancelled_handler"], "function_calls": ["ValueError", "bytearray", "coro_func", "object", "isinstance", "len", "super", "func", "runner", "BlockingIOError", "assert_raises", "WaitPidMocks", "patch", "open", "ChildProcessError", "OSError", "hasattr"], "class_names": ["UnixReadPipeTransportTests", "UnixWritePipeTransportTests", "FastChildWatcherTests", "TestFunctional", "MyProto", "SelectorEventLoopUnixSockSendfileTests", "AbstractChildWatcherTests", "Err", "BaseChildWatcherTests", "ChildWatcherTestsMixin", "SelectorEventLoopSignalTests", "PolicyTests", "SelectorEventLoopUnixSocketTests", "SafeChildWatcherTests"], "class_method_calls": ["tr._closing", "self.closed", "m_write.side_effect", "stat.S_IFSOCK", "m_logexc.assert_not_called", "watcher.is_active", "unittest.skipUnless", "self.assertEqual", "socket.SOCK_STREAM", "self.protocol", "self.make_socket", "asyncio.BaseProtocol", "m_write.called", "asyncio.SelectorEventLoop", "callback.reset_mock", "policy._watcher", "watcher._loop", "tr._close", "self.assertIs", "loop.close", "self.write_pipe_transport", "io.RawIOBase", "support.TESTFN", "sock.listen", "asyncio.CancelledError", "callback1.called", "m_signal.SIGINT", "socket.AF_UNIX", "loop.create_future", "server.close", "srv.wait_closed", "tr._loop", "self.assertRaises", "th.join", "m.WTERMSIG", "callback2.assert_called_once_with", "policy.new_event_loop", "asyncio.FastChildWatcher", "proto.transport", "policy.get_child_watcher", "m.WEXITSTATUS", "m.waitpid", "support.skip_unless_bind_unix_socket", "tr._protocol", "m_signal.set_wakeup_fd", "proto.wait_closed", "test_utils.make_test_protocol", "self.assertTrue", "self.WTERMSIG", "support.HOST", "sock.setsockopt", "transport._pipe", "m.WIFEXITED", "new_loop.close", "socket.SOL_SOCKET", "m_read.side_effect", "self.assertIsInstance", "tr.abort", "asyncio.set_event_loop", "srv_sock.bind", "socket.socketpair", "m_write.return_value", "signal.SIGHUP", "unittest.SkipTest", "mock.Mock", "callback.assert_called_once_with", "tr.is_closing", "asyncio.AbstractEventLoop", "unix_events._UnixReadPipeTransport", "errno.EINVAL", "asyncio.set_event_loop_policy", "watcher.close", "watcher.__enter__", "blocking_patcher.start", "signal.NSIG", "support.find_unused_port", "watcher.remove_child_handler", "m_read.assert_called_with", "tr.resume_reading", "tr.close", "self.prepare", "socket.SOCK_NONBLOCK", "m_old_remove.assert_called_once_with", "asyncio.new_event_loop", "self.add_zombie", "signal.SIGINT", "sock.setblocking", "proto._ready", "blocking_patcher.stop", "self.assertIsNone", "callback3.assert_called_once_with", "srv.close", "self.zombies", "self.m_add_signal_handler", "rsock.fileno", "m_signal.SIG_DFL", "tr.write", "m.WIFSIGNALED", "fut.cancel", "policy.set_event_loop", "wsock.close", "self.WEXITSTATUS", "self.waitpid", "sock.close", "m_logging.info", "self.WIFSIGNALED", "unittest.TestCase", "asyncio.SafeChildWatcher", "self.assertFalse", "os.devnull", "watcher._do_waitpid", "self._ready", "tr.write_eof", "watcher.attach_loop", "self.run_loop", "sys.platform", "sock.bind", "self.transport", "m_add_signal_handler.assert_called_once_with", "server.wait_closed", "self.ignore_warnings", "policy.get_event_loop", "sock.fileno", "threading.Thread", "self.loop", "file.name", "self.watcher", "tr._fatal_error", "tr._read_ready", "st.st_mode", "stat.S_IFIFO", "m_logexc.assert_called_with", "m_read.return_value", "fp.write", "waiter.result", "policy.set_child_watcher", "log.logger", "self.addCleanup", "m_sys.is_finalizing", "m_fstat.return_value", "socket.SO_SNDBUF", "fut.cancelled", "self.WIFEXITED", "self.assertWarnsRegex", "test_utils.unix_socket_path", "watcher.__exit__", "rsock.close", "support.unlink", "fstat_patcher.start", "tr._buffer", "self.fut", "self.assertGreater", "coro_obj.close", "m_signal.NSIG", "unittest.main", "asyncio.AbstractChildWatcher", "collections.namedtuple", "socket.SO_RCVBUF", "tr._call_connection_lost", "m_log.warning", "cls.DATA", "m_new_add.assert_called_once_with", "socket.SOCK_DGRAM", "tr.max_size", "watcher.add_child_handler", "tr.pause_reading", "signal.valid_signals", "tr._write_ready", "self.new_test_loop", "self.assertIsNotNone", "self.MyProto", "callback1.assert_called_once_with", "m_signal.signal", "os.waitpid", "m_remove_signal_handler.assert_called_once_with", "self.pipe", "socket.AF_INET", "tr.can_write_eof", "io.BytesIO", "tempfile.NamedTemporaryFile", "contextlib.suppress", "h.cancel", "tr._conn_lost", "asyncio.DefaultEventLoopPolicy", "self.assertRaisesRegex", "m_signal.default_int_handler", "signal.SIGCHLD", "self.set_event_loop", "asyncio.Handle", "fut.exception", "self.started", "self.data", "h._callback", "self.create_watcher", "test_utils.TestCase", "pathlib.Path", "callback2.called", "self.create_policy", "callback2.reset_mock", "self.file", "asyncio.Protocol", "m_error.called", "m_write.assert_called_with", "os.WNOHANG", "fut.add_done_callback", "mock.patch", "self.read_pipe_transport", "asyncio.ThreadedChildWatcher", "th.start", "callback3.called", "os.unlink", "m_signal.valid_signals", "errno.EFAULT", "test_utils.MockPattern", "self.DATA", "callback.called", "m_socket.socket", "callback1.reset_mock", "test_utils.run_briefly", "f.fileno", "asyncio.SendfileNotAvailableError", "unix_events._UnixWritePipeTransport", "self.running", "mock.ANY", "fstat_patcher.stop", "unix_events.BaseChildWatcher", "socket.socket"]}, "test_windows_events.py": {"libraries": ["unittest", "threading", "time", "test.test_asyncio.utils", "signal", "_winapi", "sys", "unittest.mock", "_overlapped", "asyncio.windows_events", "socket", "os", "asyncio"], "function_names": ["setUp", "test_run_from_nonmain_thread", "data_received", "test_ctrl_c", "test_wait_for_handle_cancel", "test_close", "test_loop_restart", "test_selector_win_policy", "__init__", "SIGINT_after_delay", "test_connect_pipe_cancel", "threadMain", "test_wait_for_handle", "test_double_bind", "test_read_self_pipe_restart", "func", "tearDown", "_unraisablehook", "test_pipe", "tearDownModule", "connection_made", "test_proactor_win_policy"], "function_calls": ["super", "coro", "main", "enumerate", "OSError", "range", "print"], "class_names": ["WindowsEventsTestCase", "UpperProto", "WinPolicyTests", "ProactorLoopCtrlC", "ProactorMultithreading", "ProactorTests"], "class_method_calls": ["stop.is_set", "asyncio.get_event_loop", "self.close_loop", "self.assertEqual", "os.getpid", "sys.unraisablehook", "asyncio.sleep", "asyncio.SelectorEventLoop", "loop.close", "thread.start", "asyncio.CancelledError", "server.close", "self.assertRaises", "thread.join", "loop.call_soon", "f.result", "signal.raise_signal", "fut.result", "self._test_pipe", "self.assertTrue", "asyncio.run", "self.assertIsInstance", "self.trans", "socket.socketpair", "asyncio.get_running_loop", "asyncio.StreamReader", "asyncio.WindowsProactorEventLoopPolicy", "w.write", "unittest.SkipTest", "mock.Mock", "thr.start", "asyncio.set_event_loop_policy", "r.readline", "asyncio.StreamReaderProtocol", "asyncio.new_event_loop", "stop.set", "signal.SIGINT", "self.assertIsNone", "fut.cancel", "self._unraisablehook", "self.assertFalse", "_overlapped.ERROR_PIPE_BUSY", "sys.platform", "clients.append", "self.addCleanup", "task.cancel", "_overlapped.CreateEvent", "self._unraisable", "trans.close", "loop.run_until_complete", "unittest.main", "time.time", "asyncio.Transport", "asyncio.ensure_future", "windows_events.PipeServer", "asyncio.ProactorEventLoop", "self.buf", "loop.run_forever", "exc.winerror", "asyncio.get_event_loop_policy", "self.set_event_loop", "threading.Event", "thr.join", "_winapi.CloseHandle", "self.fail", "test_utils.TestCase", "w.close", "_overlapped.SetEvent", "asyncio.Protocol", "b.close", "self._prev_unraisablehook", "mock.patch", "server1.close", "time.sleep", "threading.Thread", "asyncio.WindowsSelectorEventLoopPolicy", "self.loop"]}, "test_windows_utils.py": {"libraries": ["unittest", "test.support", "_winapi", "sys", "warnings", "_overlapped", "asyncio.windows_utils", "asyncio"], "function_names": ["test_popen", "tearDownModule", "test_pipe_handle", "test_pipe_overlapped"], "function_calls": ["len", "RuntimeError"], "class_names": ["PopenTests", "PipeTests"], "class_method_calls": ["self.assertIsInstance", "sys.platform", "ov1.error", "sys.executable", "self.assertEqual", "support.gc_collect", "warnings.filterwarnings", "p.stdin", "p.stdout", "e.winerror", "ovin.getresult", "ov2.event", "unittest.SkipTest", "_overlapped.Overlapped", "ovout.event", "self.assertIn", "p.fileno", "_winapi.CloseHandle", "overr.pending", "asyncio.set_event_loop_policy", "overr.getresult", "_winapi.WAIT_OBJECT_0", "windows_utils.pipe", "warnings.catch_warnings", "windows_utils.Popen", "ov1.pending", "ov2.WriteFile", "windows_utils.PipeHandle", "overr.ReadFile", "msg.upper", "self.assertGreater", "ov1.ReadFile", "ov2.error", "ov1.getresult", "p.handle", "ovout.getresult", "unittest.main", "_winapi.WaitForMultipleObjects", "_winapi.ERROR_IO_PENDING", "ovin.WriteFile", "overr.event", "ov2.pending", "p.stderr", "windows_utils.PIPE", "ovout.pending", "ovin.pending", "self.assertTrue", "ovout.ReadFile", "unittest.TestCase", "self.assertFalse", "ovin.event"]}, "test_asyncore.py": {"libraries": ["unittest", "select", "time", "asyncore", "threading", "test.support", "sys", "struct", "io.BytesIO", "socket", "os", "errno"], "function_names": ["test_log", "writable", "readable", "test_handle_read", "setUp", "test_dispatcher", "address", "loop_waiting_for_flag", "test_closeall_default", "test_handle_close_after_conn_broken", "test_repr", "test_strerror", "test_quick_connect", "closeall_check", "test_create_socket", "test_closeall", "test_bind", "test_recv", "test_log_info", "capture_server", "test_compact_traceback", "test_handle_connect", "test_set_reuse_addr", "test_handle_accepted", "__init__", "handle_read_event", "test_handle_close", "test_readwrite", "handle_read", "test_handle_error", "test_handle_expt", "handle_error", "close", "test_send", "test_resource_warning", "test_handle_accept", "test_close_twice", "test_handle_write", "handle_expt", "test_connection_attributes", "test_unhandled", "handle_accept", "handle_close", "tearDown", "handle_accepted", "bind_af_aware", "handle_expt_event", "test_readwriteexc", "test_basic", "handle_write", "handle_connect", "fileno", "handle_write_event"], "function_calls": ["object", "getattr", "exitingdummy", "crashingdummy", "id", "repr", "testobj", "TestListener", "open", "Exception", "dispatcherwithsend_noread", "range", "FileDispatcher", "BaseServer", "TestClient", "dummysocket", "float", "bind_af_aware", "hasattr", "BytesIO", "len", "chr", "bytes", "dummychannel", "BaseClient"], "class_names": ["TestAPI_UseUnixSockets", "TestAPI_UseIPv4Poll", "TestHandler", "HelperFunctionTests", "BaseTestHandler", "exitingdummy", "crashingdummy", "BaseTestAPI", "TestAPI_UseIPv4Select", "TestAPI_UseUnixSocketsPoll", "testobj", "FileWrapperTest", "TestListener", "TestAPI_UseIPv6Select", "TestAPI_UseIPv4Sockets", "dispatcherwithsend_noread", "TestAPI_UseUnixSocketsSelect", "FileDispatcher", "TestAPI_UseIPv6Sockets", "BaseServer", "TestClient", "dummysocket", "TestAPI_UseIPv6Poll", "DispatcherTests", "DispatcherWithSendTests", "dummychannel", "BaseClient"], "class_method_calls": ["stderr.getvalue", "support.join_thread", "socket.MSG_OOB", "s2.create_socket", "support.reap_threads", "d.handle_write", "self.closed", "d.readable", "unittest.skipUnless", "asyncore.loop", "self.assertEqual", "os.O_RDONLY", "self.assertNotEqual", "socket.SOCK_STREAM", "support.gc_collect", "w.fd", "self.error_handled", "self.close", "t.start", "support.IPV6_ENABLED", "BaseTestHandler.__init__", "support.TESTFN", "self.use_poll", "os.strerror", "socket.AF_UNIX", "server.close", "d.connect", "data.append", "s.setsockopt", "s.create_socket", "self.write", "self.assertRaises", "stdout.getvalue", "tr2.error_handled", "os.close", "select.POLLERR", "os.open", "buf.write", "asyncore.file_dispatcher", "self.addr", "support.check_warnings", "os.O_WRONLY", "asyncore.file_wrapper", "support.captured_stdout", "self.assertTrue", "support.HOST", "sock.setsockopt", "s1.bind", "socket.SOL_SOCKET", "select.POLLPRI", "l.append", "support.bind_unix_socket", "self.connect", "asyncore.compact_traceback", "w.write", "server.accepting", "d.handle_read", "unittest.SkipTest", "self.handler", "asyncore.close_all", "d.out_buffer", "server.address", "cap.getvalue", "select.select", "client.close", "instance.flag", "unittest.skip", "BaseTestAPI.tearDown", "serv.listen", "s2.bind", "self.listen", "d.send", "support.HOSTv6", "select.POLLNVAL", "os.path", "asyncore.write", "s.socket", "s.connect", "sock.close", "unittest.TestCase", "self.assertFalse", "asyncore.dispatcher_with_send", "serv.close", "f.fd", "support.PGO", "time.monotonic", "support.bind_port", "self.family", "sock.bind", "sys.platform", "d.create_socket", "w.send", "asyncore.read", "asyncore.readwrite", "sock.family", "data.replace", "select.POLLHUP", "client.connected", "s1.socket", "socket.SO_LINGER", "d.handle_connect", "asyncore._exception", "os.O_APPEND", "evt.wait", "socket.AF_INET6", "support.unlink", "self.expt", "self.socket", "conn.recv", "self.send", "self.closeall_check", "w.recv", "unittest.main", "d.log_info", "self.address", "asyncore.poll", "asyncore.socket_map", "evt.set", "d.writable", "client.accepting", "s.settimeout", "asyncore.ExitNow", "s.set_reuse_addr", "f.close", "file.read", "d.log", "c.socket", "socket.AF_INET", "server.connected", "errno.EPERM", "s1.create_socket", "d.ignore_log_types", "socket.SO_REUSEADDR", "threading.Event", "w.fileno", "self.fail", "socket.timeout", "w.read", "self.loop_waiting_for_flag", "support.captured_stderr", "s1.listen", "self.read", "d.handle_expt", "unittest.skipIf", "sys.exc_info", "w.close", "struct.pack", "conn.close", "asyncore.dispatcher", "asyncore._strerror", "time.sleep", "select.POLLOUT", "self.d", "self.flag", "serv.accept", "self.skipTest", "sock.settimeout", "self.set_reuse_addr", "self.recv", "self.create_socket", "file.write", "select.POLLIN", "threading.Thread", "socket.socket"]}, "test_atexit.py": {"libraries": ["unittest", "io", "sys", "test.support", "os", "atexit", "test.support.script_helper"], "function_names": ["inc", "test_shutdown", "exit", "test_raise", "setUp", "test_exit", "dec", "test_badargs", "test_bound_methods", "test_callbacks_leak", "test_callback_on_subinterpreter_teardown", "raise2", "test_clear", "h3", "test_order", "test_callbacks_leak_refcycle", "test_args", "h2", "h4", "test_print_tracebacks", "raise1", "h", "tearDown", "f", "g", "test_unregister", "test_stress", "h1", "test_raise_unnormalized"], "function_calls": ["len", "range", "print"], "class_names": ["SubinterpreterTest", "GeneralTest"], "class_method_calls": ["l.append", "os.pipe", "os.read", "res.out", "self.assertEqual", "atexit.register", "atexit._clear", "sys.stdout", "atexit._run_exitfuncs", "self.assertIn", "io.StringIO", "res.err", "support.run_in_subinterp", "self.assertRaises", "self.save_stdout", "os.close", "self.save_stderr", "atexit.unregister", "unittest.main", "self.stream", "script_helper.assert_python_ok", "atexit._ncallbacks", "sys.stderr", "support.cpython_only", "stderr.count", "unittest.TestCase", "self.assertFalse"]}, "test_audioop.py": {"libraries": ["sys", "audioop", "unittest"], "function_names": ["test_avgpp", "test_max", "test_invalid_adpcm_state", "test_rms", "test_reverse", "test_byteswap", "test_adpcm2lin", "test_issue7673", "test_minmax", "test_negativelen", "test_string", "test_tomono", "test_lin2ulaw", "test_lin2adpcm", "test_alaw2lin", "test_findmax", "test_getsample", "test_ulaw2lin", "test_mul", "test_maxpp", "test_bias", "test_wrongsize", "test_tostereo", "test_avg", "unpack", "test_lin2alaw", "test_ratecv", "pack", "test_findfactor", "test_add", "test_lin2lin", "test_findfit", "test_cross"], "function_calls": ["bytearray", "len", "pack", "memoryview", "bytes", "p", "range"], "class_names": ["TestAudioop"], "class_method_calls": ["audioop.adpcm2lin", "audioop.avg", "audioop.findfit", "audioop.minmax", "audioop.tostereo", "audioop.cross", "audioop.ulaw2lin", "audioop.lin2adpcm", "int.from_bytes", "self.assertAlmostEqual", "sys.byteorder", "self.assertEqual", "audioop.avgpp", "audioop.findfactor", "audioop.lin2ulaw", "audioop.tomono", "audioop.max", "audioop.byteswap", "audioop.reverse", "v.to_bytes", "audioop.maxpp", "audioop.bias", "self.assertRaises", "audioop.add", "audioop.ratecv", "audioop.rms", "audioop.alaw2lin", "audioop.findmax", "unittest.main", "audioop.getsample", "audioop.lin2alaw", "audioop.error", "unittest.TestCase", "audioop.lin2lin", "audioop.mul"]}, "test_audit.py": {"libraries": ["sys", "test.support", "subprocess", "unittest"], "function_names": ["test_monkeypatch", "run_python", "test_basic", "test_unraisablehook", "do_test", "test_cantrace", "test_pickle", "test_block_add_hook_baseexception", "test_excepthook", "test_block_add_hook", "test_socket", "test_winreg", "test_not_in_gc", "test_open", "test_mmap", "test_gc"], "function_calls": ["print", "hasattr"], "class_names": ["AuditTest"], "class_method_calls": ["self.do_test", "line.strip", "p.wait", "sys.executable", "self.assertEqual", "support.import_module", "p.stdout", "sys.stdout", "unittest.SkipTest", "support.TESTFN", "self.fail", "subprocess.Popen", "support.findfile", "support.verbose", "subprocess.PIPE", "p.returncode", "unittest.main", "self.run_python", "p.stderr", "sys.stderr", "self.assertTrue", "unittest.TestCase", "self.assertSequenceEqual"]}, "test_augassign.py": {"libraries": ["unittest"], "function_names": ["__imod__", "__ixor__", "__truediv__", "__itruediv__", "__sub__", "testCustomMethods2", "__rtruediv__", "__rmod__", "testBasic", "__rrshift__", "__rfloordiv__", "__pow__", "__ror__", "__lshift__", "__floordiv__", "__ior__", "__init__", "__iand__", "__iadd__", "__isub__", "testSequences", "testCustomMethods1", "__imul__", "__imatmul__", "testInList", "__radd__", "__matmul__", "__rshift__", "__add__", "__ipow__", "__rpow__", "__rmatmul__", "__mod__", "__and__", "__rmul__", "__or__", "__mul__", "testInDict", "__rand__", "__xor__", "__ilshift__", "__ifloordiv__", "__rlshift__", "__irshift__", "__rxor__", "test_with_unpacking", "__rsub__"], "function_calls": ["testall", "aug_test", "aug_test2", "aug_test4", "aug_test3"], "class_names": ["AugAssignTest", "testall", "aug_test", "aug_test2", "aug_test4", "aug_test3"], "class_method_calls": ["self.assertIsInstance", "self.val", "test_self.assertEqual", "self.assertEqual", "self.assertTrue", "output.append", "unittest.TestCase", "x.val", "unittest.main", "self.assertRaises"]}, "test_base64.py": {"libraries": ["unittest", "binascii", "io.StringIO", "io.BytesIO", "base64", "test.support", "os", "array.array", "test.support.script_helper"], "function_names": ["test_decode", "test_a85_padding", "get_output", "test_b16encode", "test_a85encode", "test_b85decode_errors", "check_type_errors", "test_ErrorHeritage", "test_encode_from_stdin", "test_b64encode", "check_nonbyte_element_format", "test_b16decode", "test_b64decode", "test_a85decode", "test_encodebytes", "test_b85decode", "test_b32decode", "test_encode", "check_multidimensional", "test_a85decode_errors", "test_b32encode", "test_decode_nonascii_str", "test_decodebytes", "check_other_types", "test_b64decode_invalid_chars", "tearDown", "test_b64decode_padding_error", "test_b32decode_error", "test_b85_padding", "test_encode_file", "check_encode_type_errors", "test_b85encode", "check_decode_type_errors", "test_encode_decode", "test_encodestring_warns", "test_decodestring_warns", "test_b32decode_casefold"], "function_calls": ["eq", "bytearray", "BytesIO", "list", "issubclass", "array", "len", "set", "memoryview", "StringIO", "bytes", "open", "func", "f", "range"], "class_names": ["LegacyBase64TestCase", "BaseXYTestCase", "TestMain"], "class_method_calls": ["base64.decodebytes", "base64.b85encode", "base64.urlsafe_b64encode", "self.check_nonbyte_element_format", "base64.b32encode", "binascii.Error", "base64.b64encode", "self.assertEqual", "base64.decodestring", "proc.communicate", "base64.encodebytes", "tests.append", "base64.b64decode", "base64.standard_b64decode", "base64.a85encode", "fp.write", "support.TESTFN", "data.decode", "base64.a85decode", "self.check_encode_type_errors", "script_helper.spawn_python", "base64.decode", "output.splitlines", "self.subTest", "output.rstrip", "self.assertRaises", "base64.b32decode", "map_tests.items", "self.assertWarns", "tests_urlsafe.items", "base64.encodestring", "outfp.getvalue", "base64.b85decode", "self.get_output", "base64.b16decode", "self.check_decode_type_errors", "self.assertIsNone", "base64.encode", "bstr.decode", "map01.decode", "unittest.main", "tests_altchars.items", "os.unlink", "script_helper.assert_python_ok", "base64.b16encode", "altchars.decode", "os.path", "tests.items", "base64.urlsafe_b64decode", "out.rstrip", "self.check_other_types", "base64.standard_b64encode", "self.assertTrue", "self.check_type_errors", "unittest.TestCase", "self.assertSequenceEqual", "self.check_multidimensional"]}, "test_baseexception.py": {"libraries": ["unittest", "os", "platform.system", "builtins"], "function_names": ["test_raise_new_style_non_exception", "test_interface_single_arg", "test_builtins_new_style", "verify_instance_interface", "interface_test_driver", "test_raise_string", "test_catch_string", "test_interface_no_arg", "test_catch_non_BaseException", "catch_fails", "test_interface_multi_arg", "raise_fails", "test_catch_BaseException_instance", "test_inheritance"], "function_calls": ["len", "issubclass", "platform_system", "getattr", "str", "NonBaseException", "exc", "set", "tuple", "type", "zip", "repr", "open", "Exception", "NewStyleClass", "BaseException", "range", "hasattr"], "class_names": ["NonBaseException", "UsageTests", "ExceptionClassTests", "NewStyleClass"], "class_method_calls": ["superclasses.append", "exc_set.add", "ins.__class__", "self.assertEqual", "exc.__name__", "exc_name.index", "exc.args", "self.assertIn", "inheritance_tree.close", "self.fail", "self.catch_fails", "superclasses.pop", "inheritance_tree.readline", "exc_line.rstrip", "self.interface_test_driver", "exc_line.rindex", "self.verify_instance_interface", "self.raise_fails", "unittest.main", "object_.__name__", "self.interface_tests", "os.path", "exc.__class__", "exc_set.discard", "self.assertTrue", "unittest.TestCase", "builtins.__dict__"]}, "test_bdb.py": {"libraries": ["unittest", "bdb", "textwrap", "test_module_for_bdb", "importlib", "sys", "itertools.islice", "contextlib.contextmanager", "test.support", "os", "linecache", "itertools.repeat"], "function_names": ["test_next", "__exit__", "test_ignore_count_on_disabled_bp", "user_return", "user_exception", "do_clear", "test_step_next_on_last_statement", "test_up", "test_return_command_in_generator_with_subiterator", "process_event", "reset_Breakpoint", "break_in_func", "test_next_over_import", "gen", "test_skip_with_no_name_module", "user_line", "pop_next", "test_temporary_bp", "test_main", "__enter__", "set_down", "tfunc_main", "trace_dispatch", "set_enable", "create_modules", "test_bp_on_non_existent_module", "get_stack", "test_bp_condition", "__init__", "set_disable", "info_breakpoints", "delete_temporaries", "test_next_on_plain_statement", "test_disabled_temporary_bp", "check_expect_max_size", "test_bp_ignore_count", "print_state", "test_next_command_in_generator_with_subiterator", "next_set_method", "set_ignore", "set_break", "test_skip", "user_call", "raise_not_expected", "test_until_in_caller_frame", "tfunc_import", "test_until", "test_step_at_return_with_no_trace_in_caller", "test_clear_two_bp_on_same_line", "test_down", "fail", "test_next_command_in_generator_for_loop", "check_lno_name", "check_equal", "test_return", "test_step", "test_bp_after_last_statement", "lno_abs2rel", "set_up", "lno_rel2abs", "run_test", "get_state", "init_test", "tfunc_second", "test_until_with_too_large_count", "test_run_step", "test_runeval_step", "test_next_until_return_in_generator", "tfunc_first", "set_clear", "test_return_in_caller_frame", "test_next_in_caller_frame", "test_clear_at_no_bp", "test_bp_exception_on_condition_evaluation"], "function_calls": ["sorted", "getattr", "TracerRun", "globals", "Tracer", "reset_Breakpoint", "break_in_func", "gen", "set_method", "isinstance", "test_main", "issubclass", "super", "BdbSyntaxError", "iter", "str", "create_modules", "islice", "locals", "open", "info_breakpoints", "BdbError", "list", "next", "BdbNotExpectedError", "eval", "len", "compile", "BaseTestCase", "tfunc_second", "tfunc_first", "repeat", "Bdb", "print"], "class_names": ["BdbError", "BreakpointTestCase", "BdbSyntaxError", "BaseTestCase", "TracerRun", "RunTestCase", "StateTestCase", "Tracer", "IssuesTestCase", "BdbNotExpectedError", "Bdb", "BdbException"], "class_method_calls": ["tracer.run", "self.assertIs", "bp.file", "self.assertRaises", "bp.line", "self.pop_next", "self.stop_here", "self.currentbp", "sl.extend", "code.co_name", "code.co_firstlineno", "bp.enabled", "value.args", "self.next_set_method", "self.lno_rel2abs", "os.getcwd", "self.frame", "self.expect_set", "bp.hits", "self.subTest", "self.get_bpbynumber", "self.failureException", "self.dry_run", "self.init_test", "self.header", "self.breakpoint_hits", "os.path", "sys.settrace", "self.clear_bpbynumber", "self.trace_dispatch", "bp.ignore", "unittest.TestCase", "test.dry_run", "self.check_lno_name", "self.check_expect_max_size", "tracer.runeval", "self.exc_info", "test_module_for_bdb.main", "self.clear_break", "test.support", "self.expect", "info.split", "state.ljust", "self.cur_except", "f.write", "bdb.is_skipped_module", "_bdb.Breakpoint", "args.extend", "self.index", "self.lno_abs2rel", "test_case.id", "self.event", "self.raise_not_expected", "importlib.invalidate_caches", "tracer.runcall", "self._original_tracer", "self.get_stack", "self.get_state", "self.tracer", "self.set_tuple", "self.check_equal", "self.stack", "bp.temporary", "func.__code__", "test.id", "module.__dict__", "test.expect_set", "importlib.import_module", "bp.number", "self.process_event", "self.canonic", "code.co_filename", "self.test_case", "self.expect_set_no", "linecache.checkcache", "bp.cond", "test_case.dry_run", "_bdb.Bdb", "bps.keys", "self.delete_temporaries", "textwrap.dedent", "sys.path", "self.set_list", "self.expected_list", "sys.gettrace", "test_case.expect_set", "self.print_state"]}, "test_bigaddrspace.py": {"libraries": ["unittest", "operator", "test.support.bigaddrspacetest", "test.support.MAX_Py_ssize_t", "sys", "test.support"], "function_names": ["test_main", "test_optimized_concat", "test_concat", "test_repeat"], "function_calls": ["len", "int", "test_main"], "class_names": ["BytesTest", "StrTest"], "class_method_calls": ["self.unicodesize", "operator.add", "operator.mul", "sys.maxunicode", "support.run_unittest", "sys.argv", "support.set_memlimit", "unittest.TestCase", "self.assertRaises"]}, "test_bigmem.py": {"libraries": ["unittest", "operator", "test.support._1G", "sys", "test.support._4G", "test.support", "test.support._2G", "test.support.bigmemtest"], "function_names": ["test_slice_and_getitem", "test_decode", "test_insert", "test_index", "test_swapcase", "test_concat_large", "test_capitalize", "test_find", "test_isspace", "test_rindex", "test_strip", "test_remove", "basic_test_extend", "basic_test_repr", "test_center", "test_count", "test_unicode_repr_wide", "test_isalpha", "basic_test_inplace_repeat", "test_replace", "from_latin1", "test_hash", "test_from_almost_2G_generator", "tearDown", "test_concat", "_test_capitalize", "test_translate", "test_extend_large", "test_encode_utf7", "test_split_large", "test_encode_utf32", "test_istitle", "test_pop", "test_lower", "basic_concat_test", "test_split_small", "test_format", "test_encode_ascii", "test_rjust", "_test_title", "test_encode", "test_rfind", "test_inplace_repeat_large", "test_encode_raw_unicode_escape", "test_inplace_concat_large", "test_zfill", "test_concat_small", "test_ljust", "test_repr_large", "test_endswith", "test_index_and_slice", "test_reverse", "setUp", "_test_swapcase", "test_splitlines", "test_repeat_large", "test_upper", "basic_test_inplace_concat", "test_main", "test_isdigit", "test_lstrip", "test_extend_small", "test_startswith", "test_islower", "test_rstrip", "test_contains", "test_repeat_large_2", "test_isalnum", "basic_encode_test", "test_repr_small", "test_append", "basic_test_repeat", "test_inplace_repeat_small", "test_sort", "test_isupper", "test_inplace_concat_small", "test_repeat_small", "test_expandtabs", "test_join", "basic_test_concat", "test_title", "test_unicode_repr", "test_from_2G_generator", "test_compare", "test_repeat"], "function_calls": ["object", "getattr", "repr", "isinstance", "test_main", "iter", "tuple", "hash", "range", "_", "dir", "set", "bigmemtest", "int", "type", "f", "divmod", "len", "bytearray", "chr", "filter", "ord"], "class_names": ["TupleTest", "ListTest", "BytearrayTest", "BaseStrTest", "BytesTest", "StrTest"], "class_method_calls": ["SUBSTR.rfind", "SUBSTR.capitalize", "s.replace", "self.assertEqual", "r.endswith", "self.assertNotEqual", "SUBSTR.lower", "sys.stdout", "self.basic_test_extend", "meth.memuse", "self._test_title", "SUBSTR.rindex", "self.assertRaises", "s.upper", "l.extend", "s.rfind", "sf.startswith", "self.basic_test_repr", "s.capitalize", "s.title", "self.basic_test_concat", "s.strip", "SUBSTR.rstrip", "self._adjusted", "self.assertTrue", "sys.argv", "s.startswith", "s.join", "self._test_swapcase", "l.append", "operator.setitem", "SUBSTR.zfill", "self.basic_encode_test", "sf.endswith", "x.count", "self._test_capitalize", "s.encode", "s.rstrip", "s.index", "SUBSTR.find", "s.rindex", "s.isspace", "support.run_unittest", "s.lower", "SUBSTR.ljust", "l.index", "SUBSTR.strip", "s.isalpha", "sys.maxsize", "s.istitle", "x.startswith", "self.basic_concat_test", "l.sort", "s.split", "s.islower", "s.translate", "unittest.TestCase", "self.assertFalse", "s.find", "s.isdigit", "self.basic_test_inplace_concat", "l.pop", "s.endswith", "s.swapcase", "self.from_latin1", "l.reverse", "x.endswith", "name.startswith", "s.lstrip", "SUBSTR.endswith", "SUBSTR.lstrip", "bytes.maketrans", "SUBSTR.translate", "self.basic_test_repeat", "s.expandtabs", "s.splitlines", "SUBSTR.swapcase", "l.insert", "support.set_memlimit", "s2.endswith", "self.basic_test_inplace_repeat", "SUBSTR.rjust", "SUBSTR.center", "operator.getitem", "s.decode", "s.count", "caps.lstrip", "s.isupper", "l.remove", "s.isalnum", "l.count", "SUBSTR.index"]}, "test_binascii.py": {"libraries": ["unittest", "re", "binascii", "array"], "function_names": ["test_crc32", "test_uu", "setUp", "test_exceptions", "test_rle", "assertInvalidLength", "test_base64valid", "test_returned_value", "test_unicode_a2b", "test_hex_separator", "type2test", "test_base64errors", "test_crc_hqx", "assertIncorrectPadding", "test_qp", "addnoise", "test_empty_string", "test_hqx", "test_base64invalid", "test_b2a_base64_newline", "test_functions", "test_unicode_b2a", "test_hex"], "function_calls": ["a2b", "getattr", "a2b_qp", "issubclass", "assertInvalidLength", "str", "range", "type2test", "list", "b2a", "assertIncorrectPadding", "set", "zip", "f", "hasattr", "bytearray", "len", "max", "bytes", "b2a_qp", "map"], "class_names": ["BytearrayBinASCIITest", "BinASCIITest", "ArrayBinASCIITest", "MemoryviewBinASCIITest"], "class_method_calls": ["self.assertIsInstance", "binascii.b2a_hqx", "fillers.append", "self.assertLess", "binascii.Error", "self.assertEqual", "binascii.a2b_hex", "binascii.crc32", "self.assertRaisesRegex", "binascii.rledecode_hqx", "self.fail", "self.data", "binascii.crc_hqx", "binascii.b2a_hex", "s.hex", "binascii.a2b_uu", "self.assertRaises", "binascii.a2b_base64", "binascii.hexlify", "lines.append", "a.decode", "re.sub", "binascii.rlecode_hqx", "binascii.Incomplete", "unittest.TestCase", "res.append", "binascii.b2a_qp", "binascii.b2a_base64", "unittest.main", "array.array", "binascii.a2b_qp", "binascii.unhexlify", "binascii.a2b_hqx", "self.assertTrue", "self.rawdata", "binascii.b2a_uu", "self.type2test"]}, "test_binhex.py": {"libraries": ["unittest", "test.support", "binhex"], "function_names": ["test_main", "setUp", "test_binhex_line_endings", "test_binhex_error_on_long_filename", "test_binhex", "tearDown"], "function_calls": ["test_main", "open"], "class_names": ["BinHexTestCase"], "class_method_calls": ["self.fname2", "self.fname1", "f.write", "support.TESTFN", "support.unlink", "self.DATA", "support.run_unittest", "f.readline", "f3.close", "binhex.Error", "self.fname3", "self.assertEqual", "self.assertNotIn", "fp.read", "binhex.hexbin", "unittest.TestCase", "binhex.binhex", "self.assertRaises"]}, "test_binop.py": {"libraries": ["unittest", "operator.eq", "abc.ABCMeta", "operator.le", "operator.ne"], "function_names": ["test_gcd", "test_floordiv", "__le__", "__truediv__", "__rtruediv__", "__sub__", "_get_num", "__repr__", "__eq__", "__rmod__", "isint", "__rfloordiv__", "__ge__", "__floordiv__", "test_eq", "test_true_div", "__int__", "__init__", "__rdivmod__", "test_fallback_rmethod_blocking", "test_constructor", "gcd", "isRat", "test_mul", "__str__", "test_sub", "__divmod__", "__add__", "op_sequence", "_get_den", "__mod__", "isnum", "__mul__", "test_comparison_orders", "test_div", "test_fallback_ne_blocking", "__float__", "log_operation", "test_add", "__rsub__"], "function_calls": ["SN", "isint", "repr", "isinstance", "issubclass", "str", "F", "gcd", "range", "isRat", "X", "ValueError", "property", "int", "op_sequence", "OverflowError", "isnum", "float", "eval", "divmod", "SupEq", "op", "XN", "ZeroDivisionError", "Rat", "TypeError", "c", "S"], "class_names": ["SupEq", "X", "B", "C", "F", "RatTestCase", "SN", "XN", "A", "Rat", "OperationOrderTests", "FallbackBlockingTests", "OperationLogger", "V", "S"], "class_method_calls": ["x.__den", "self.__num", "self.assertEqual", "self.__den", "B.register", "a.den", "self.fail", "other.__num", "a.num", "self.logger", "self.assertRaises", "x.__num", "log.append", "instances.append", "unittest.main", "other.__den", "self.log_operation", "self.assertTrue", "unittest.TestCase", "self.assertFalse"]}, "test_bisect.py": {"libraries": ["unittest", "random.choice", "collections.UserList", "sys", "random.randrange", "test.support"], "function_names": ["setUp", "test_negative_lo", "test_keyword_args", "test_len_only", "test_precomputed", "grade", "test_optionalSlicing", "__lt__", "__init__", "test_large_pyrange", "test_large_range", "test_get_only", "test_non_sequence", "test_listDerived", "__len__", "test_random", "insert", "__getitem__", "test_grades", "test_arg_parsing", "test_backcompatibility", "test_colors", "test_cmp_err", "test_vsBuiltinSort"], "function_calls": ["UserList", "min", "sorted", "GetOnly", "List", "grade", "CmpErr", "IndexError", "bisect_left", "randrange", "range", "Range", "list", "LenOnly", "choice", "func", "f", "len", "max"], "class_names": ["Range", "TestDocExampleC", "TestBisectC", "TestBisectPython", "LenOnly", "TestBisect", "TestInsort", "GetOnly", "CmpErr", "TestErrorHandling", "TestInsortC", "TestDocExamplePython", "List", "TestDocExample", "TestErrorHandlingC", "TestErrorHandlingPython", "TestInsortPython"], "class_method_calls": ["self.last_insert", "mod.insort_right", "self.assertEqual", "self.stop", "lst.data", "mod.insort_left", "self.data", "support.import_fresh_module", "self.precomputedCases", "data.last_insert", "self.assertRaises", "mod.bisect_right", "mod.bisect_left", "self.start", "unittest.main", "sys.maxsize", "data.sort", "self.assertTrue", "unittest.TestCase", "self.module"]}, "test_bool.py": {"libraries": ["unittest", "operator", "pickle", "test.support", "os", "marshal"], "function_names": ["test_convert", "test_repr", "test_format", "test_isinstance", "test_keyword_args", "test_blocked", "test_main", "test_str", "test_convert_to_bool", "test_string", "test_hasattr", "test_float", "__len__", "test_marshal", "test_subclass", "test_pickle", "test_types", "test_picklevalues", "__bool__", "test_contains", "test_int", "test_boolean", "test_operator", "test_from_bytes", "test_real_and_imag", "test_issubclass", "test_callable", "test_fileclosed", "test_print", "test_sane_len", "test_math"], "function_calls": ["check", "abs", "Bar", "repr", "isinstance", "test_main", "issubclass", "Foo", "Eggs", "str", "B", "Baz", "A", "open", "range", "Spam", "int", "type", "bool", "float", "eval", "hasattr", "len", "callable", "print"], "class_names": ["Foo", "Eggs", "B", "Spam", "C", "Baz", "A", "BoolTest", "Bar"], "class_method_calls": ["self.assertNotIsInstance", "int.__new__", "self.assertEqual", "self.assertRaisesRegex", "self.assertIs", "support.TESTFN", "marshal.loads", "self.fail", "bool.from_bytes", "os.remove", "operator.lt", "marshal.dumps", "self.assertRaises", "operator.is_", "support.run_unittest", "operator.not_", "operator.is_not", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "self.assertIsNot", "fi.read", "operator.contains", "operator.truth", "f.closed", "pickle.dumps", "unittest.TestCase"]}, "test_buffer.py": {"libraries": ["itertools.product", "contextlib", "fractions.Fraction", "warnings", "decimal.Decimal", "struct", "test.support", "array", "unittest", "io", "os", "random.sample", "itertools.permutations", "random.randrange", "_testbuffer.*", "numpy.ndarray", "random.choice", "sys", "ctypes"], "function_names": ["test_memoryview_getbuffer_undefined", "ndarray_from_structure", "test_memoryview_serializing", "ndarray_print", "gen_items", "match", "prod", "__index__", "test_ndarray_slice_assign_single", "test_ndarray_index_scalar", "test_ndarray_slice_zero_shape", "test_ndarray_zero_strides", "gencastshapes", "iter_mode", "test_memoryview_assign", "__init__", "test_memoryview_cast_zero_shape", "test_memoryview_compare_multidim_zero_shape", "test_memoryview_compare_zero_strides", "test_memoryview_tobytes", "assert_out_of_bounds_error", "test_ndarray_memoryview_from_buffer", "test_ndarray_slice_multidim", "rslices", "randslice_from_slicelen", "test_memoryview_sequence", "struct_items", "test_memoryview_index", "test_memoryview_release", "rand_aligned_slices", "test_memoryview_cast", "rpermutation", "test_py_buffer_to_contiguous", "iter_roundtrip", "test_ndarray_cmp_contig", "test_memoryview_construction", "test_ndarray_index_null_strides", "_fa", "memory_index", "test_memoryview_compare_zero_shape", "numpy_array_from_structure", "test_ndarray_random_invalid", "test_ndarray_sequence", "test_memoryview_compare_random_formats", "test_ndarray_multidim", "test_memoryview_compare_multidim_mixed", "cast_items", "native_type_range", "test_memoryview_sizeof", "test_memoryview_compare_multidim_zero_strides", "cmptest", "test_ndarray_index_setitem_single", "test_ndarray_zero_shape", "multislice", "rand_structure", "test_memoryview_get_contiguous", "test_ndarray_format_scalar", "test_memoryview_repr", "test_ndarray_re_export", "_flatten", "randitems", "f", "verify_structure", "test_memoryview_compare_special_cases", "is_byte_format", "flatten", "test_ndarray_getbuf", "randrange_fmt", "randslice_from_shape", "test_memoryview_hash", "simple_fmt", "_ca", "test_memoryview_compare_multidim_c", "setUp", "test_issue_7385", "test_ndarray_random", "test_ndarray_index_getitem_multidim", "rslice", "test_memoryview_cast_1D_ND", "test_memoryview_cast_invalid", "genslices_ndim", "__int__", "test_memoryview_compare_ndim_zero", "test_memoryview_struct_module", "strides_from_shape", "verify", "test_ndarray_offset", "test_ndarray_slice_redundant_suboffsets", "is_overlapping", "test_memoryview_tolist", "test_memoryview_redirect", "multislice_assign", "test_ndarray_random_slice_assign", "transpose", "test_ndarray_tolist_null_strides", "test_ndarray_format_strides", "listp", "test_ndarray_get_pointer", "slice_shape", "test_ndarray_slice_invalid", "test_ndarray_index_invalid", "atomp", "test_ndarray_index_getitem_single", "carray", "getindex", "test_ndarray_exceptions", "test_memoryview_compare_multidim_fortran", "get_item", "test_memoryview_slice", "rslices_ndim", "m_assign", "test_ndarray_hash", "catch22", "test_memoryview_check_released", "indices", "iter_format", "test_memoryview_from_static_exporter", "farray", "test_ndarray_fortran", "test_ndarray_slice_assign_multidim", "check_memoryview", "test_memoryview_compare_ndim_one", "gen_item", "test_ndarray_format_shape", "test_ndarray_linked_list", "test_memoryview_compare_not_equal", "verify_getbuf", "genslices", "randitems_from_structure", "is_memoryview_format", "test_memoryview_cast_zero_strides", "test_memoryview_array", "cmp_structure", "test_memoryview_compare_multidim_suboffsets"], "function_calls": ["ndarray_from_structure", "getattr", "gen_items", "match", "Fraction", "prod", "gencastshapes", "iter_mode", "IDX", "get_pointer", "randslice_from_slicelen", "int", "zip", "struct_items", "enumerate", "rand_aligned_slices", "len", "iter_roundtrip", "permutations", "_fa", "memory_index", "memoryview", "numpy_array_from_structure", "numpy_array", "BEPoint", "cast_items", "str", "locals", "staticarray", "native_type_range", "list", "cmptest", "multislice", "rand_structure", "slice", "get_sizeof_void_p", "_flatten", "randitems", "product", "verify_structure", "is_byte_format", "flatten", "randrange_fmt", "randslice_from_shape", "Decimal", "_ca", "rslice", "isinstance", "tuple", "hash", "strides_from_shape", "cmp_contig", "range", "py_buffer_to_contiguous", "is_overlapping", "multislice_assign", "choice", "float", "transpose", "divmod", "any", "listp", "slice_shape", "bytes", "sum", "atomp", "ord", "print", "check", "getindex", "carray", "INT", "get_item", "rslices_ndim", "to_bytelist", "m_assign", "catch22", "indices", "randrange", "iter_format", "vsize", "farray", "ValueError", "is_contiguous", "check_memoryview", "sample", "gen_item", "bool", "bytearray", "genslices", "randitems_from_structure", "get_contiguous", "chr", "is_memoryview_format", "ndarray", "cmp_structure", "slice_indices"], "class_names": ["IDX", "BEPoint", "TestBufferProtocol", "INT"], "class_method_calls": ["ex.tolist", "result.strides", "x.release", "z.itemsize", "y.release", "m.itemsize", "m2.cast", "unittest.skipUnless", "result.tobytes", "self.assertEqual", "ex.f_contiguous", "struct.calcsize", "m.cast", "self.assertNotEqual", "nd.offset", "ex.contiguous", "z.obj", "mv.tolist", "yl.tolist", "ctypes.c_long", "sys.stdout", "nd.__setitem__", "self.assertIs", "nd.suboffsets", "warnings.catch_warnings", "a.tobytes", "m.hex", "nd.ndim", "ex.suboffsets", "ex1.ndim", "nd.flags", "self.assertRaises", "z.shape", "mv.__setitem__", "m.ndim", "self.val", "nd.itemsize", "xr.tolist", "v.tolist", "w.tolist", "ex.tobytes", "result.nbytes", "zl.ndim", "m.__getitem__", "ex.itemsize", "xl.__setitem__", "m2.ndim", "zr.ndim", "self.assertTrue", "m.shape", "ctypes.BigEndianStructure", "nd.strides", "exporter.tobytes", "ex2.ndim", "z.strides", "m.tobytes", "self.check_sizeof", "zl.tolist", "cm.exception", "mode.strip", "result.suboffsets", "b.extend", "ndm.push", "result.itemsize", "m2.itemsize", "nd.pop", "m.__repr__", "mr.tolist", "zl.shape", "m2.__setitem__", "m2.shape", "ex.nbytes", "struct.unpack", "self.sizeof_void_p", "testcase.assertEqual", "zl.strides", "contextlib.contextmanager", "self.assertIsNot", "array.array", "m1.cast", "sys.maxsize", "buf.readinto", "struct.error", "x.append", "msrc.cast", "exporter.ndim", "nd.tobytes", "unittest.TestCase", "self.assertFalse", "fmt.split", "items.append", "m.obj", "m.f_contiguous", "result.obj", "r.startswith", "m2.nbytes", "exporter.nbytes", "nd2.obj", "w.__eq__", "ex.obj", "self.assert_out_of_bounds_error", "zr.shape", "m2.strides", "nd.memoryview_from_buffer", "struct.pack_into", "w.release", "ndsliced.tolist", "zr.strides", "result.format", "ex.flags", "m.tolist", "mv.__delitem__", "m.release", "v.release", "self.verify_getbuf", "w.__ne__", "zr.tolist", "result.shape", "mv.__getitem__", "contig.tobytes", "xl.tolist", "m.readonly", "self.assertGreater", "a.tolist", "struct.unpack_from", "os.environ", "unittest.main", "zl.itemsize", "m2.tolist", "e.__class__", "yr.tolist", "m.__getattribute__", "nd.add_suboffsets", "m.contiguous", "zr.itemsize", "support.check_sizeof", "nd.push", "v.__eq__", "NATIVE.copy", "ex.ndim", "orig_ex.strides", "ex.c_contiguous", "m.__setitem__", "ex.add_suboffsets", "z.ndim", "m2.release", "orig_ex.shape", "ctypes.c_double", "nd.__delitem__", "io.BytesIO", "x.tolist", "self.assertIn", "z.tolist", "m.format", "y.obj", "nd.format", "nd.__getitem__", "ex.strides", "m.c_contiguous", "m1.release", "result.tolist", "m.__hash__", "x.add_suboffsets", "ex.readonly", "struct.pack", "nd.shape", "ml.tolist", "x.tobytes", "m2.obj", "ex.format", "result.ndim", "m2.readonly", "m.nbytes", "nd.tolist", "testcase.assertNotEqual", "m.strides", "m.suboffsets", "m2.suboffsets", "m1.tolist", "m.toreadonly", "orig_ex.tobytes", "support.EnvironmentVarGuard", "result.readonly", "support.calcvobjsize", "y.tolist", "v.__ne__", "ml.__setitem__", "self.verify", "mv.__eq__", "na.tostring"]}, "test_bufio.py": {"libraries": ["unittest", "test.support", "io", "_pyio"], "function_names": ["drive_one", "test_nullpat", "test_primepat", "try_one"], "function_calls": ["list", "divmod", "len", "staticmethod", "open", "range"], "class_names": ["CBufferSizeTest", "PyBufferSizeTest", "BufferSizeTest"], "class_method_calls": ["f.write", "io.open", "self.drive_one", "support.TESTFN", "support.unlink", "pyio.open", "f.readline", "self.assertEqual", "self.open", "f.close", "unittest.TestCase", "self.assertFalse", "unittest.main", "self.try_one"]}, "test_builtin.py": {"libraries": ["types.AsyncGeneratorType", "unittest.mock.MagicMock", "itertools.product", "random", "types.FunctionType", "warnings", "asyncio", "traceback", "unittest", "test.support.swap_attr", "io", "platform", "types", "functools.partial", "signal", "inspect.CO_COROUTINE", "collections", "operator.neg", "test.support.script_helper.assert_python_ok", "ast", "locale", "test.support.cpython_only", "os", "builtins", "test.support.maybe_get_event_loop_policy", "re", "gc", "test.support.unlink", "test.support.check_warnings", "unittest.mock.patch", "textwrap.dedent", "pty", "test.support.TESTFN", "contextlib.ExitStack", "doctest.DocTestSuite", "sys", "decimal", "pickle", "math.sqrt", "fractions", "test.support.EnvironmentVarGuard"], "function_names": ["test_max", "test_zip", "test_compile_top_level_await_invalid_cases", "test_breakpoint_with_passthru_error", "test_setattr", "test_envar_good_path_builtin", "test_envar_good_path_other", "__init__", "test_min", "check_input_tty", "test_baddecorator", "test_ord", "test_abs", "child", "test_len", "__iter__", "test_exec_redirected", "test_bad_arguments", "test_new_type", "test_hash", "test_breakpoint_with_breakpointhook_reset", "__next__", "__round__", "__setitem__", "test_filter", "test_any", "test_eval", "test_basic", "test_callable", "test_chr", "test_getattr", "get_vars_f2", "test_next", "test_input_tty", "test_bad_slots", "badfunc", "test_round_large", "run_child", "test_format", "sqrt", "test_id", "test_type", "__call__", "test_filter_pickle", "test_divmod", "test_type_qualname", "test_bytearray_extend_error", "__bool__", "test_type_name", "test_input_tty_non_ascii_unicode_errors", "test_envar_unimportable", "f", "test_compile", "test_cmp", "test_delattr", "test_breakpoint", "test_oct", "test_bug_27936", "test_general_eval", "test_hex", "__getitem__", "test_input_tty_non_ascii", "setUp", "test_cleanup", "get_vars_f0", "keys", "test_envar_good_path_noop_0", "test_isinstance", "test_dir", "test_type_nokwargs", "test_input_no_stdout_fileno", "test_breakpoint_with_breakpointhook_set", "test_round", "plus", "test_compile_async_generator", "classes_new", "test_open_non_inheritable", "check_iter_pickle", "test_inputtypes", "test_input", "test_map", "test_namespace_order", "_check_uni", "test_pow", "test_envar_good_path_empty_string", "write_testfile", "test_zip_pickle", "identity", "test_type_doc", "__getattr__", "test_zip_result_gc", "test_vars", "meth", "__dir__", "test_repr", "test_open_default_encoding", "gen", "test_open", "handle_sighup", "getDict", "filter_char", "test_ascii", "test_neg", "test_hasattr", "test_sum", "__format__", "test_compile_top_level_await_no_coro", "test_exec", "test_zip_bad_iterable", "load_tests", "test_import", "my_breakpointhook", "__len__", "test_bin", "test_compile_top_level_await", "ham", "class_test", "test_breakpoint_with_args_and_keywords", "test_exec_globals", "empty_format_spec", "write", "__abs__", "test_issubclass", "map_char", "Max", "test_bad_args", "__hash__", "test_construct_singletons", "test_map_pickle", "_run_child", "test_iter", "test_bytearray_translate", "test_all", "test_envar_ignored_when_hook_is_set"], "function_calls": ["FloatLen", "sorted", "assert_python_ok", "dedent", "MagicMock", "getattr", "T", "input", "Squares", "HugeLen", "swap_attr", "KeyError", "__import__", "iter", "dict", "open", "child", "setattr", "C3", "partial", "dir", "M", "zip", "enumerate", "delattr", "BadFormatResult", "len", "bin", "breakpoint", "filter", "exec", "globals", "object", "DocTestSuite", "BadIterable", "cls", "reversed", "memoryview", "tp", "Foo", "str", "ExitStack", "list", "BadSeq", "FunctionType", "async_f", "fifth_power", "D", "product", "Iter", "compile", "SpreadSheet", "pow", "C2", "oct", "round", "format", "min", "EnvironmentVarGuard", "all", "id", "vars", "isinstance", "B", "DerivedFromSimple", "tuple", "SequenceWithoutALength", "hash", "ascii", "NegativeLen", "range", "HugeNegativeLen", "classes_new", "TestRound", "C", "property", "C1", "hex", "set", "NoLenMethod", "type", "twopow", "_check_uni", "eval", "I", "hasattr", "DerivedFromStr", "divmod", "any", "max", "TestFailingIter", "TestFailingBool", "sum", "ord", "BitBucket", "InvalidLen", "print", "abs", "gen", "Z", "repr", "issubclass", "TestNoRound", "check_warnings", "A", "G", "maybe_get_event_loop_policy", "X", "mod10", "patch", "class_test", "next", "DerivedFromA", "empty_format_spec", "frozendict_error", "DerivedFromSimple2", "frozendict", "bytearray", "chr", "callable", "AbsClass", "TypeError", "map", "E"], "class_names": ["InvalidLen", "FloatLen", "BadIterable", "TestSorted", "Z", "Squares", "HugeLen", "Foo", "TestNoRound", "C_get_vars", "B", "DerivedFromSimple", "A", "G", "SequenceWithoutALength", "PtyTests", "NegativeLen", "TestType", "ShutdownTest", "HugeNegativeLen", "X", "C3", "BuiltinTest", "BadSeq", "TestRound", "TestBreakpoint", "C", "C1", "M", "NoLenMethod", "Simple", "DerivedFromA", "frozendict_error", "DerivedFromSimple2", "D", "I", "frozendict", "BadFormatResult", "DerivedFromStr", "Iter", "SpreadSheet", "StrSquares", "TestFailingIter", "TestFailingBool", "C2", "AbsClass", "E", "BitBucket"], "class_method_calls": ["os.pipe", "fractions.Fraction", "unittest.skipUnless", "os.write", "self.assertEqual", "od.move_to_end", "self.assertNotEqual", "warnings.filterwarnings", "sys.stdout", "self.assertIs", "self.sofar", "w.message", "self.assertRaises", "child_output.decode", "os.close", "self._run_child", "pickle.HIGHEST_PROTOCOL", "c.meth", "dict.__getitem__", "types.ModuleType", "data.reverse", "self.write_testfile", "w.category", "self.assertTrue", "__builtins__.__dict__", "os.get_inheritable", "self.check_input_tty", "asyncio.run", "self.assertIsInstance", "A.__name__", "traceback.print_exc", "decimal.Decimal", "re.escape", "dict.fromkeys", "cm.exception", "signal.SIGHUP", "self.resources", "sys.__breakpointhook__", "types.MappingProxyType", "C.__dict__", "asyncio.set_event_loop_policy", "self.assertNotIn", "io.StringIO", "a.append", "self.y", "self.subTest", "sys.spam", "od.items", "platform.machine", "self.x", "fp.read", "random.randrange", "pickle.loads", "random.shuffle", "collections.OrderedDict", "t.__round__", "sys.maxsize", "co.co_flags", "x.startswith", "A.__module__", "gc.collect", "unittest.TestCase", "self.assertFalse", "sys.breakpointhook", "sys.flags", "os.read", "self.env", "fp.close", "fp.write", "sys.maxunicode", "C.__base__", "mock.assert_called_once_with", "self.addCleanup", "C.__module__", "self.z", "keys.__getitem__", "self.check_iter_pickle", "self.handle_sighup", "signal.alarm", "self.assertWarns", "signal.signal", "self.get_vars_f2", "cls.__name__", "codeobjs.append", "self.run_child", "sys.stdin", "x.__class__", "os.environ", "unittest.main", "fileobj.fileno", "A.__qualname__", "io.TextIOWrapper", "A.__bases__", "terminal_input.decode", "ast.parse", "c.__call__", "self.assertSequenceEqual", "self.max", "x.to_bytes", "c2.__call__", "os.waitpid", "self.assertAlmostEqual", "mock.assert_called_once", "self._cells", "child_output.extend", "ast.PyCF_ALLOW_TOP_LEVEL_AWAIT", "self.assertRaisesRegex", "C.__name__", "self.assertIn", "self.fail", "platform.system", "mock.assert_not_called", "fp.encoding", "unittest.skipIf", "my_breakpointhook.assert_called_once_with", "C.__qualname__", "locale.getpreferredencoding", "lines.append", "sys.exc_info", "C.__bases__", "gc.is_tracked", "array.extend", "x.ham", "self.bar", "BuiltinTest.get_vars_f0", "collections.UserDict", "tests.addTest", "A.__doc__", "pty.fork", "out.decode", "self.get_vars_f0", "x.translate", "self.skipTest", "pickle.dumps", "rpipe.readline", "f.__doc__", "fp.readline", "x.spam", "os._exit", "A.__base__", "self.C_get_vars"]}, "test_bz2.py": {"libraries": ["random", "subprocess", "io.BytesIO", "test.support", "unittest", "bz2.BZ2Compressor", "threading", "io.DEFAULT_BUFFER_SIZE", "bz2.BZ2File", "pathlib", "os", "test.support.unlink", "shutil", "tempfile", "bz2.BZ2Decompressor", "_compression", "test.support.bigmemtest", "glob", "sys", "test.support._4G", "pickle"], "function_names": ["testReadMultiStreamTrailingJunk", "testSeekPostEndMultiStream", "testEOFError", "testDecompress4G", "testReadMultiStream", "testRead", "testDecompressorChunksMaxsize", "test_decompressor_inputbuf_2", "testFileno", "open", "testSeekBackwardsFromEnd", "testWrite", "testOpenDel", "testReadLineMultiStream", "testSeekBackwardsAcrossStreams", "testDecompressMultiStream", "tearDown", "testCompressEmptyString", "testOpenBytesFilename", "testReadBadFile", "testOpenPathLikeFilename", "testCompress4G", "testDecompressChunks10", "testWriteMethodsOnReadOnlyFile", "testSeekForwardAcrossStreams", "testCompressChunks10", "test_binary_modes", "testCompress", "testSeekPreStart", "testSeekable", "test_decompressor_inputbuf_1", "testReadBytesIO", "testContextProtocol", "testSeekBackwardsFromEndAcrossStreams", "test_failure", "testReadLine", "testBadArgs", "createTempFile", "testOpenNonexistent", "testSeekForwardBytesIO", "testSeekPostEndTwiceMultiStream", "testSeekBackwardsBytesIO", "testDecompressToEmptyString", "testSeekPreStartMultiStream", "ext_decompress", "testDecompress", "testReadMonkeyMultiStream", "testMixedIterationAndReads", "testAppend", "testSeekBackwards", "testDecompressEmpty", "testDecompressIncomplete", "testWriteBytesIO", "testReadChunk10MultiStream", "testIteratorMultiStream", "setUp", "testDecompressLimited", "testIterator", "comp", "testDecompressUnusedData", "test_main", "test_text_modes", "testSeekForward", "test_read_truncated", "testReadable", "test_decompressor_inputbuf_3", "testWriteChunks10", "test_encoding", "testThreading", "test_Constructor", "test_newline", "test_x_mode", "testMultiStreamOrdering", "testPeek", "testWriteNonDefaultCompressLevel", "testDecompressMultiStreamTrailingJunk", "test_fileobj", "testReadLines", "testClosedIteratorDeadlock", "testDecompressBadData", "testSeekPostEnd", "testPickle", "testWritable", "test_encoding_error_handler", "testReadTrailingJunk", "test_bad_params", "testRead0", "test_implicit_binary_modes", "testWriteLines", "testRead100", "testPeekBytesIO", "testSeekPostEndTwice", "testDecompressTrailingJunk", "testReadInto", "testReadChunk10", "testReadLinesMultiStream", "test_refleaks_in___init__", "testReadlinesNoNewline"], "function_calls": ["gettotalrefcount", "BZ2Compressor", "memoryview", "test_main", "iter", "BZ2Decompressor", "open", "range", "list", "bigmemtest", "ext_decompress", "int", "next", "bool", "unlink", "float", "BZ2File", "BytesIO", "bytearray", "len"], "class_names": ["BZ2CompressorTest", "BZ2FileTest", "OpenTest", "CompressDecompressTest", "BaseTest", "BZ2DecompressorTest"], "class_method_calls": ["bzd.decompress", "self.assertEqual", "self.assertNotEqual", "bio.closed", "shutil.which", "fh.readinto", "bz2f.fileno", "bz2f.peek", "decomp.read", "self.assertRaises", "bio.getvalue", "os.close", "pickle.HIGHEST_PROTOCOL", "self.TEXT", "data.strip", "os.linesep", "glob.escape", "self.assertTrue", "bz2f.writelines", "bz2f.close", "bz2f.readable", "support.import_module", "str_filename.encode", "bz2f.writable", "self.BIG_DATA", "out.append", "glob.glob", "bz2f.seek", "decomp._buffer", "support.run_unittest", "bz2f.readlines", "support.start_threads", "support.skip_if_pgo_task", "bz2f.readinto", "self.filename", "os.path", "self.createTempFile", "unittest.TestCase", "self.assertFalse", "os.devnull", "self.assertLess", "self.open", "self.TEXT_LINES", "self.assertLessEqual", "bz2.decompress", "text.replace", "f.write", "bz2d.decompress", "rawf.fileno", "bzd.eof", "random.getrandbits", "bz2.open", "bz2f.read", "bz2d.unused_data", "self.EMPTY_DATA", "f.readlines", "self.BAD_DATA", "bz2f.write", "f.close", "bz2c.compress", "bz2f.tell", "src.seekable", "self.assertAlmostEqual", "bzd.unused_data", "bz2f.readline", "bz2.compress", "self.fail", "tempfile.mkstemp", "support.get_attribute", "f.read", "bzd.__init__", "pathlib.Path", "_compression.BUFFER_SIZE", "support.reap_children", "subprocess.check_output", "bz2f.seekable", "self.DATA", "self.skipTest", "pickle.dumps", "self.BIG_TEXT", "support.refcount_test", "bzd.needs_input", "bz2c.flush", "threading.Thread"]}, "test_c_locale_coercion.py": {"libraries": ["unittest", "sys", "subprocess", "locale", "test.support.script_helper.run_python_until_end", "test.support", "os", "sysconfig", "collections.namedtuple"], "function_names": ["_set_locale_in_subprocess", "get_child_details", "test_PYTHONCOERCECLOCALE_set_to_one", "test_main", "test_PYTHONCOERCECLOCALE_not_set", "test_LC_ALL_set_to_C", "get_expected_details", "setUpClass", "test_PYTHONCOERCECLOCALE_set_to_zero", "test_PYTHONCOERCECLOCALE_not_zero", "setUpModule", "test_external_target_locale_configuration", "test_PYTHONCOERCECLOCALE_set_to_warn", "_check_c_locale_coercion", "_check_child_encoding_details"], "function_calls": ["_set_locale_in_subprocess", "test_main", "str", "cls", "run_python_until_end", "namedtuple", "dict", "print", "bool", "hasattr"], "class_names": ["LocaleConfigurationTests", "LocaleCoercionTests", "EncodingDetails", "_LocaleHandlingTestCase"], "class_method_calls": ["sys.platform", "self._check_c_locale_coercion", "result.err", "sys.executable", "unittest.skipUnless", "self.assertEqual", "base_var_dict.update", "EncodingDetails.get_child_details", "unittest.SkipTest", "self._check_child_encoding_details", "self.addCleanup", "locale.setlocale", "cmd.stdout", "EXPECTED_C_LOCALE_EQUIVALENTS.append", "stream_info.append", "locale.Error", "self.subTest", "cmd_fmt.format", "_stream.format", "result.fail", "support.verbose", "subprocess.run", "support.run_unittest", "unittest.TestCase", "subprocess.PIPE", "support.reap_children", "EncodingDetails.get_expected_details", "os.environ", "result.out", "AVAILABLE_TARGETS.append", "locale.LC_CTYPE", "support.cpython_only", "self.skipTest", "env_vars.get", "CLI_COERCION_WARNING_FMT.format", "cls.CHILD_PROCESS_SCRIPT", "base_var_dict.copy", "self.maxDiff", "sysconfig.get_config_var", "result.rc", "support.is_android"]}, "test_calendar.py": {"libraries": ["unittest", "time", "datetime", "sys", "os", "test.support.script_helper.assert_python_ok", "locale", "test.support", "test.support.script_helper.assert_python_failure", "calendar"], "function_names": ["test_timegm", "test_illegal_arguments", "test_days", "test_february_nonleap", "test_formatweek", "setUp", "test_january", "test_one_leapday_lower_boundary", "test_output_htmlcalendar_encoding_default", "test_formatmonthname_without_year", "test_output_htmlcalendar_encoding_utf8", "test_yeardayscalendar", "test_itermonthdays4", "test_format", "test__all__", "test_itermonthdays", "test_zeroth_month", "test_april", "test_output_month", "test_pryear", "test_formatweekheader_long", "test_output_current_year", "test_html_output_year_encoding", "test_enumerate_weekdays", "test_html_output_year_css", "test_itermonthdays3", "neitherspacenordigit", "test_several_leapyears_in_range", "check_weeks", "run_ok", "test_option_type", "test_output_year", "test_output_textcalendar", "test_no_range", "test_formatweek_head", "shrink", "test_illegal_month_reported", "normalize_calendar", "test_option_locale", "test_output_htmlcalendar_encoding_ascii", "test_option_lines", "test_no_leapdays_upper_boundary", "test_formatmonth", "test_prmonth", "test_itermonthdays2", "test_format_year", "test_format_year_head", "tearDown", "test_option_months", "test_thirteenth_month", "test_formatmonthname_with_year", "test_yeardatescalendar", "test_formatmonthname", "test_setfirstweekday", "conv", "test_months", "test_locale_calendars", "test_prweek", "test_option_width", "test_option_spacing", "test_output", "check_htmlcalendar_encoding", "test_formatweekheader_short", "test_december", "test_option_encoding", "test_html_output_current_year", "test_february_leap", "test_isleap", "test_no_leapdays", "test_illegal_weekday_reported", "test_february", "assertFailure", "test_help"], "function_calls": ["list", "len", "assert_python_failure", "assert_python_ok", "CustomHTMLCal", "getattr", "conv", "str", "set", "shrink", "reversed", "dict", "filter", "sum", "range"], "class_names": ["CalendarTestCase", "CustomHTMLCal", "MonthCalendarTestCase", "SundayTestCase", "OutputTestCase", "TestSubClassingCase", "LeapdaysTestCase", "MonthRangeTestCase", "MondayTestCase", "TimegmTestCase", "MiscTestCase", "CommandLineTestCase"], "class_method_calls": ["cal.itermonthdays2", "self.assertIsInstance", "support.check__all__", "default_format.copy", "self.oldfirstweekday", "datetime.datetime", "self.normalize_calendar", "s.replace", "self.assertEqual", "sys.getdefaultencoding", "c.isspace", "self.assertGreaterEqual", "locale.LC_TIME", "self.assertRaisesRegex", "d.year", "datetime.MAXYEAR", "calendar.calendar", "d.month", "unittest.SkipTest", "result_2004_text.encode", "self.assertIn", "calendar.IllegalWeekdayError", "cal.itermonthdays", "self.cal", "calendar.IllegalMonthError", "locale.setlocale", "calendar.timegm", "calendar.LocaleTextCalendar", "locale.Error", "self.TIMESTAMPS", "self.assertRaises", "cal.itermonthdays4", "calendar.day_name", "lines.append", "out.getvalue", "calendar.SUNDAY", "calendar.MONDAY", "cal.formatweekday", "calendar.HTMLCalendar", "calendar.LocaleHTMLCalendar", "result_2004_html.format", "self.check_weeks", "locale.getlocale", "calendar.day_abbr", "cal.formatyearpage", "time.gmtime", "cal.formatmonthname", "self.assertFailure", "unittest.main", "calendar.monthrange", "calendar.Calendar", "calendar.isleap", "calendar.TextCalendar", "s.splitlines", "os.linesep", "calendar.leapdays", "d.day", "self.firstweekday", "locale.getdefaultlocale", "self.check_htmlcalendar_encoding", "calendar.monthcalendar", "calendar.firstweekday", "self.skipTest", "support.captured_stdout", "calendar.setfirstweekday", "c.isdigit", "unittest.TestCase", "self.run_ok", "calendar.format"]}, "test_call.py": {"libraries": ["unittest", "_testcapi", "_testcapi.pyvectorcall_call", "_testcapi.pyobject_vectorcall", "gc", "datetime", "types.MethodType", "functools.partial", "struct", "collections", "test.support.cpython_only", "functools", "itertools"], "function_names": ["test_varargs8_kw", "fn", "test_varargs1max", "test_varargs5_kw", "test_varargs6_kw", "test_varargs0", "test_oldargs1_2", "test_oldargs1_1", "vectorcall", "static_method", "__index__", "testfunction_kw", "test_oldargs0_1_ext", "test_oldargs1_0_ext", "test_varargs7_kw", "test_varargs15_kw", "test_oldargs0_1_kw", "test_varargs2", "test_varargs1", "test_oldargs0_2_kw", "test_oldargs1_0", "test_fastcall_clearing_dict", "test_method_descriptor_flag", "test_varargs11_kw", "pyfunc_noarg", "test_kwargs_order", "test_oldargs1_2_ext", "test_varargs12_kw", "method_noarg", "__init__", "__call__", "test_vectorcall_flag", "test_varargs3_kw", "test_varargs3", "test_oldargs1_1_kw", "test_varargs14_kw", "test_vectorcall_dict", "method", "test_varargs0_ext", "test_varargs1_kw", "test_varargs13_kw", "test_varargs1_ext", "test_varargs2_kw", "test_oldargs1_1_ext", "test_varargs9_kw", "test_varargs17_kw", "check_result", "test_fastcall", "testfunction", "test_varargs2_ext", "test_varargs4_kw", "test_vectorcall", "class_method", "test_oldargs0_0", "test_vectorcall_override", "test_varargs2min", "test_oldargs1_0_kw", "test_oldargs1_2_kw", "test_oldargs0_1", "test_oldargs0_0_kw", "test_varargs1min", "test_varargs2max", "test_varargs10_kw", "test_oldargs0_2", "test_oldargs0_0_ext", "test_varargs16_kw", "pyfunc", "test_oldargs0_2_ext"], "function_calls": ["PythonClass", "object", "fn", "meth", "pyvectorcall_call", "vectorcall", "MethodType", "MethodDescriptorHeap", "super", "str", "tuple", "MethodDescriptorSuper", "range", "list", "IntWithDict", "partial", "type", "pyobject_vectorcall", "func", "f", "compile", "wrapped", "MethodDescriptorOverridden"], "class_names": ["MethodDescriptorHeap", "CFunctionCallsErrorMessages", "PythonClass", "FunctionCalls", "FastCallTests", "IntWithDict", "CFunctionCalls", "MethodDescriptorSuper", "SuperBase", "TestPEP590", "MethodDescriptorOverridden"], "class_method_calls": ["self.assertIsInstance", "self.CALLS_KWARGS", "itertools.product", "PythonClass.class_method", "datetime.datetime", "MethodDescriptorHeap.__flags__", "PYTHON_INSTANCE.method_noarg", "int.from_bytes", "self.check_result", "od.move_to_end", "self.assertEqual", "_testcapi.pyobject_fastcalldict", "PythonClass.static_method", "_testcapi.MethodDescriptorBase", "self.assertRaisesRegex", "self.assertIs", "_testcapi.pyobject_vectorcall", "collections.deque", "struct.pack_into", "self.kwargs", "x.kwargs", "self.subTest", "od.items", "self.assertRaises", "PYTHON_INSTANCE.static_method", "kwargs.keys", "_testcapi.MethodDescriptorDerived", "res.items", "_testcapi.pyobject_fastcall", "_testcapi.MethodDescriptor2", "struct.pack", "functools.lru_cache", "dict.update", "PYTHON_INSTANCE.class_method", "kwargs.values", "unittest.main", "collections.OrderedDict", "list.append", "PYTHON_INSTANCE.method", "_testcapi.MethodDescriptorNopGet", "struct.Struct", "list.__add__", "self.assertTrue", "gc.collect", "unittest.TestCase", "self.CALLS_POSARGS", "self.assertFalse"]}, "test_capi.py": {"libraries": ["_posixsubprocess", "random", "subprocess", "test.support", "unittest", "test.support.MISSING_C_DOCSTRINGS", "threading", "textwrap", "test.support.script_helper.assert_python_ok", "os", "_testcapi.pynumber_tobase", "builtins", "re", "time", "binascii", "_testcapi.MyList", "collections.OrderedDict", "sys", "pickle", "test.support.script_helper.assert_python_failure"], "function_names": ["check", "test_pyobject_malloc_without_gil", "pendingcalls_thread", "test_instancemethod", "test_trashcan_subclass", "keys", "test_subprocess_fork_exec", "test_buildvalue_N", "values", "test_thread_state", "test_c_type_with_matrix_multiplication", "test_trashcan_python_class1", "test_subclass_of_heap_gc_ctype_with_tpdealloc_decrefs_once", "test_pendingcalls_threaded", "test_pynumber_tobase", "test_mutate_exception", "test_pyobject_forbidden_bytes_is_freed", "test_docstring_signature_parsing", "test_set_nomemory", "test_pyobject_uninitialized_is_freed", "pendingcalls_submit", "__init__", "callback", "test_seq_bytes_to_charp_array", "test_c_type_with_ipow", "pendingcalls_wait", "test_pendingcalls_non_threaded", "test_return_result_with_error", "test_no_FatalError_infinite_loop", "test_pyobject_freed_is_freed", "test_trashcan_python_class2", "test_c_subclass_of_heap_ctype_with_del_modifying_dunder_class_only_decrefs_once", "test_pymem_malloc_without_gil", "test_subinterps", "__del__", "__len__", "test_mapping_keys_values_items", "test_subinterps_recent_language_features", "test_buffer_overflow", "testfunction", "test_api_misuse", "check_malloc_without_gil", "__getitem__", "items", "test_exc_info", "test_heaptype_with_setattro", "test_pyobject_null_is_freed", "test_memoryview_from_NULL_pointer", "do_test_trashcan_python_class", "test_subclass_of_heap_gc_ctype_with_del_modifying_dunder_class_only_decrefs_once", "test_return_null_without_error", "target", "check_pyobject_is_freed", "test_mapping_keys_values_items_bad_arg", "test_c_subclass_of_heap_ctype_with_tpdealloc_decrefs_once", "test_negative_refcount"], "function_calls": ["assert_python_ok", "Mapping1", "getattr", "BadMapping", "Mapping2", "id", "Z", "pynumber_tobase", "super", "B", "str", "tuple", "locals", "open", "PyList", "range", "ValueError", "list", "assert_python_failure", "HeapGcCTypeSubclass", "dir", "M", "MyList", "InstanceMethod", "OrderedDict", "hasattr", "len", "target", "foo", "TypeError", "print"], "class_names": ["TestThreadState", "PyMemMallocDebugTests", "Mapping1", "Mapping2", "BadMapping", "Z", "CAPITest", "Test_testcapi", "SubinterpreterTest", "B", "A", "PyMemDebugTests", "PyMemDefaultTests", "PyList", "HeapGcCTypeSubclass", "InstanceMethod", "PyMemPymallocDebugTests", "foo", "TestPendingCalls"], "class_method_calls": ["stderr.decode", "support.reap_threads", "os.pipe", "obj.pvalue", "self.pendingcalls_wait", "threading.Lock", "sys.executable", "unittest.skipUnless", "_testcapi._pending_threadfunc", "self.assertEqual", "self.assertNotEqual", "_testcapi.HeapCTypeSubclass", "mapping.keys", "support.requires_resource", "t.start", "pickle.load", "threading.get_ident", "_posixsubprocess.fork_exec", "_testcapi.make_memoryview_from_NULL_pointer", "support.run_in_subinterp", "self.assertRaises", "_testcapi.return_result_with_error", "inst.testfunction", "PyList.num", "_testcapi.docstring_empty", "B.refcnt_in_del", "err.replace", "random.random", "_testcapi.HeapGcCType", "self.assertTrue", "name.endswith", "subclass_instance.value2", "l.append", "idents.append", "support.import_module", "raised_exception.__class__", "cm.exception", "context.l", "support.SuppressCrashReport", "context.nThreads", "subprocess.Popen", "_testcapi.test_buildvalue_N", "mapping.items", "A.refcnt_in_del", "self.assertRegex", "err.rstrip", "self.assertListEqual", "L.attr", "support.start_threads", "self.pendingcalls_thread", "self.check_malloc_without_gil", "inst.id", "idents.count", "subclass_instance.value", "sys.maxsize", "re.DOTALL", "_testcapi.ipowType", "_testcapi.HeapCTypeSubclassWithFinalizer", "unittest.TestCase", "context.event", "self.assertFalse", "_testcapi.get_mapping_keys", "testfunction.__doc__", "new_exc.__class__", "_testcapi.no_docstring", "_testcapi.matmulType", "self.do_test_trashcan_python_class", "_testcapi.docstring_with_invalid_signature2", "support.with_pymalloc", "name.startswith", "_testcapi.docstring_with_signature_and_extra_newlines", "subprocess.PIPE", "regex.format", "_testcapi.instancemethod", "self.check_pyobject_is_freed", "self.assertGreater", "context.n", "_testcapi._test_thread_state", "unittest.main", "_testcapi.set_exc_info", "_testcapi.HeapCTypeSetattr", "re.compile", "_testcapi.docstring_with_signature_but_no_doc", "self.assertSequenceEqual", "out.err", "testfunction.attribute", "mapping.values", "p.communicate", "binascii.Error", "context.nFinished", "sys.modules", "_testcapi.get_mapping_items", "self.PYTHONMALLOC", "self.check", "self.pendingcalls_submit", "threading.Event", "self.assertIn", "t.join", "_testcapi.get_mapping_values", "_testcapi.docstring_no_signature", "__class__.num", "_testcapi.return_null_without_error", "unittest.skipIf", "sys.exc_info", "support.verbose", "_testcapi.docstring_with_signature", "sys.getrefcount", "o.__ipow__", "context.lock", "obj.value", "textwrap.dedent", "e.__traceback__", "self.value2", "time.sleep", "InstanceMethod.testfunction", "_testcapi.docstring_with_invalid_signature", "self.__class__", "threading.Thread", "self.PTR_REGEX"]}, "test_cgi.py": {"libraries": ["unittest", "sys", "tempfile", "io.StringIO", "cgi", "io.BytesIO", "test.support", "os", "collections.namedtuple"], "function_names": ["__getattr__", "test_log", "test_fieldstorage_as_context_manager", "check", "test_strict", "test_fieldstorage_properties", "__eq__", "first_elts", "test_fieldstorage_part_content_length", "test_parse_multipart_invalid_encoding", "test_fieldstorage_multipart", "test_parse_multipart", "__init__", "test_fieldstorage_multipart_w3c", "test_field_storage_multipart_no_content_length", "test_fieldstorage_multipart_non_ascii", "__str__", "gen_result", "testQSAndFormData", "do_test", "norm", "test_max_num_fields", "test_fieldstorage_multipart_maxline", "first_second_elts", "testQSAndFormDataFile", "test_fieldstorage_multipart_leading_whitespace", "testQSAndUrlEncode", "test_fieldstorage_invalid", "test_parse_multipart_without_content_length", "test_fieldstorage_readline", "readline", "test_parse_header", "test_separator", "test_all"], "function_calls": ["check", "sorted", "getattr", "repr", "isinstance", "ComparableException", "str", "StringIO", "dict", "TestReadlineFile", "HackedSysModule", "range", "setattr", "ValueError", "list", "gen_result", "do_test", "namedtuple", "BytesIO", "len"], "class_names": ["HackedSysModule", "CgiTests", "ComparableException", "TestReadlineFile"], "class_method_calls": ["fs.keys", "cgi.parse_multipart", "support.check__all__", "self.__dict__", "fs.getvalue", "buf.encode", "self.assertEqual", "content.encode", "expect.keys", "cgi.parse_header", "self.assertRaisesRegex", "data.encode", "f.write", "fake_stdin.seek", "self._qs_result", "BOUNDARY.encode", "self.assertIn", "tempfile.TemporaryFile", "cgi.FieldStorage", "POSTDATA_W3.encode", "self.addCleanup", "POSTDATA.encode", "cgi.sys", "self.numcalls", "f.numcalls", "self.assertRaises", "fs.list", "f.seek", "anExc.args", "result.update", "cgi.parse", "v.value", "form.getlist", "self.file", "cgi.logfp", "self.assertGreater", "sys.stdin", "self.err", "unittest.main", "cgi.initlog", "os.path", "cgi.logfile", "fs.file", "anExc.__class__", "POSTDATA_NON_ASCII.encode", "self.assertTrue", "self.assertCountEqual", "self.maxDiff", "f.close", "unittest.TestCase", "cgi.closelog", "self.assertFalse", "os.devnull", "cgi.log"]}, "test_cgitb.py": {"libraries": ["unittest", "test.support.temp_dir", "cgitb", "sys", "test.support.script_helper.assert_python_failure"], "function_names": ["test_syshook_no_logdir_text_format", "test_syshook_no_logdir_default_format", "test_blanks", "test_fonts", "test_text", "test_html"], "function_calls": ["ValueError", "temp_dir", "assert_python_failure", "str", "repr"], "class_names": ["TestCgitb"], "class_method_calls": ["sys.exc_info", "out.decode", "cgitb.small", "self.assertIn", "cgitb.strong", "cgitb.html", "sys.getfilesystemencoding", "self.assertEqual", "self.assertNotIn", "cgitb.grey", "unittest.TestCase", "unittest.main", "cgitb.text"]}, "test_charmapcodec.py": {"libraries": ["unittest", "codecs", "test.testcodec"], "function_names": ["test_maptoundefined", "test_constructorx", "test_encodex", "codec_search_function", "test_constructory"], "function_calls": ["str", "tuple"], "class_names": ["CharmapCodecTest"], "class_method_calls": ["testcodec.getregentry", "self.assertEqual", "unittest.TestCase", "codecs.register", "unittest.main", "self.assertRaises"]}, "test_class.py": {"libraries": ["unittest", "gc"], "function_names": ["__getattr__", "testSFBug532646", "setUp", "track", "__eq__", "testUnaryOps", "trackCall", "__setattr__", "testDel", "testGetSetAndDel", "assertNotOrderable", "__int__", "__init__", "testInit", "testHashStuff", "index", "__del__", "assertCallStack", "testSetattrNonStringName", "testSetattrWrapperNameIntern", "__delattr__", "testForExceptionsRaisedInInstanceGetattr2", "testConstructorErrorMessages", "testBadTypeReturned", "f", "testBinaryOps", "testListAndDictOps", "g", "testHashComparisonOfMethods", "__hash__", "add", "booh", "__new__", "testMisc"], "function_calls": ["abs", "C0", "repr", "Empty", "AttributeError", "super", "str", "a", "A", "hash", "E", "DelTest", "ExtraTests", "property", "hex", "C", "slice", "int", "type", "float", "f", "I", "D", "divmod", "AllTests", "C2", "oct", "BadTypeClass", "exec", "globals"], "class_names": ["D", "ClassTests", "ExtraTests", "B", "C", "A", "C0", "C2", "DelTest", "BadTypeClass", "I", "E", "Empty"], "class_method_calls": ["self.assertCallStack", "type.__setattr__", "self.assertEqual", "self.assertRaisesRegex", "object.__init__", "D.__new__", "A.g", "C.__new__", "self.fail", "callLst.append", "a2.f", "self.assertRaises", "A.__call__", "testme.eggs", "testme.cardinal", "a1.g", "self.x", "testme.spam", "a1.f", "self.assertIsNot", "unittest.main", "self.assertNotOrderable", "type.__delattr__", "A.f", "object.__new__", "x.append", "a.f", "self.assertTrue", "B.f", "gc.collect", "unittest.TestCase", "self.assertFalse", "f.__name__"]}, "test_clinic.py": {"libraries": ["unittest", "os.path", "clinic.DSLParser", "inspect", "clinic", "collections", "sys", "unittest.TestCase", "test.support"], "function_names": ["test_have_left_options_but_required_is_empty", "test_function_not_at_column_0", "test_empty_strings", "_test", "test_param_no_docstring", "test_function_docstring", "test_disallowed_grouping__two_top_groups_on_right", "test_c_name", "test_parameters_required_after_star_with_initial_parameters_and_docstring", "test_parameters_not_permitted_after_slash_for_now", "test_solo_newline", "fn", "test_ignore_line", "test_parameters_required_after_star_without_initial_parameters_or_docstring", "test_parser_regression_special_character_in_parameter_column_of_docstring_first_line", "test_illegal_c_basename", "test_empty_substitution", "test_star", "test_eol", "test_parameters_required_after_star_without_initial_parameters_with_docstring", "test_scaffolding", "test_explicit_parameters_in_docstring", "test_disallowed_grouping__parameter_after_group_on_right", "get", "__call__", "__init__", "parse", "test_left_group", "test_param_default_expression", "test_round_trip_2", "test_no_substitution", "test_param", "add_destination", "parse_function_should_fail", "test_single_line_substitution", "test_disallowed_grouping__two_top_groups_on_left", "test_disallowed_grouping__group_after_parameter_on_left", "test_parameters_required_after_star_with_initial_parameters_without_docstring", "test_external", "test_trivial", "test_range", "round_trip", "test_init_with_no_parameters", "test_return_converter", "is_directive", "directive", "_test_clinic", "test_multiline_substitution", "test_single_star", "test_legacy_converters", "test_right_only", "get_destination", "test_mix_star_and_slash", "test_param_default", "test_illegal_module_line", "test_round_trip_1", "test_clinic_1", "parse_function", "test_param_default_parameters_out_of_order", "test_add_window", "test_disallowed_grouping__empty_group_on_right", "test_param_with_continuations", "test_single_slash", "test_ludicrous", "test_group", "test_disallowed_grouping__empty_group_on_left", "test_directive", "disabled_test_converter_arguments", "test_nested_groups", "test_no_parameters"], "function_calls": ["list", "isinstance", "len", "FakeConverterFactory", "CopyParser", "FakeClinic", "d", "open", "InertParser", "repr", "FakeConvertersDict", "setattr", "FakeConverter", "DSLParser"], "class_names": ["ClinicGroupPermuterTest", "ClinicParserTest", "ClinicExternalTest", "FakeConverterFactory", "ClinicWholeFileTest", "FakeClinic", "CopyParser", "ClinicLinearFormatTest", "ClinicBlockParserTest", "InertParser", "FakeConvertersDict", "FakeConverter"], "class_method_calls": ["clinic.Clinic", "self.assertEqual", "self.assertNotEqual", "self._test", "clinic.BlockParser", "clinic.BlockPrinter", "self.classes", "clinic.int_return_converter", "self.parse_function", "clinic.unspecified", "self.destinations", "self.language", "self.assertRaises", "function.docstring", "clinic.str_converter", "stdout.getvalue", "clinic.Module", "p.default", "parser.parse", "self.field_destinations", "clinic.int_converter", "parser.directives", "support.captured_stdout", "self.assertTrue", "c.parse", "self.assertIsInstance", "clinic.Destination", "writer.print_block", "inspect.Parameter", "self.destination_buffers", "function.parameters", "unittest.SkipTest", "clinic.CLanguage", "support.findfile", "clinic.NULL", "self.used_converters", "function.name", "self.round_trip", "block.signatures", "collections.OrderedDict", "self.line_prefix", "os.path", "self.filename", "sys.maxsize", "clinic.parse_file", "function.return_converter", "p.group", "clinic.permute_optional_groups", "clinic.clinic", "f.write", "self.args", "support.temp_dir", "self.add_destination", "self._test_clinic", "clinic.linear_format", "block.input", "block.output", "unittest.main", "clinic.Function", "self.legacy_converters", "self.modules", "clinic.Block", "self.called_directives", "module.name", "self.converters", "writer.f", "self.name", "sys.exit", "parser.flag", "clinic.fail", "f.read", "self.parse_function_should_fail", "self.parse", "sys.path", "self.block_parser", "p.name", "self.line_suffix", "c.parsers", "p.kind", "p.converter", "os.stat", "function.c_basename"]}, "test_cmath.py": {"libraries": ["unittest", "test.test_math.test_file", "platform", "test.test_math", "cmath.polar", "_testcapi.set_errno", "cmath", "sys", "test.test_math.parse_testfile", "test.support.requires_IEEE_754", "cmath.phase", "math", "test.support.cpython_only", "cmath.rect", "cmath.pi"], "function_names": ["test_user_object", "check", "setUp", "test_input_type", "test_complex_values", "check_polar", "test_constants", "__index__", "testAtanhSign", "rect_complex", "test_polar_errno", "test_reject_complex_tolerances", "__complex__", "__int__", "test_isnan", "__init__", "test_phase", "test_abs", "testTanhSign", "test_specific_values", "rAssertAlmostEqual", "test_isinf", "testAtanSign", "test_rect", "assertCEqual", "test_infinity_and_nan_constants", "assertComplexIdentical", "tearDown", "test_complex_near_zero", "polar_with_errno_set", "__float__", "test_polar", "test_isfinite", "test_abs_overflows", "assertFloatIdentical", "polar_complex", "test_cmath_matches_math"], "function_calls": ["check", "object", "rect", "getattr", "abs", "JustFloat", "repr", "FloatAndComplexOS", "JustFloatOS", "Index", "function", "MyComplexOS", "MyInt", "complex", "tuple", "parse_testfile", "FloatAndComplex", "open", "complex_fn", "polar", "NeitherComplexNorFloat", "int", "zip", "func", "float", "phase", "f", "MyComplex", "MyComplexException", "NeitherComplexNorFloatOS", "MyComplexExceptionOS", "max", "float_fn", "set_errno", "map"], "class_names": ["CMathTests", "FloatAndComplexOS", "MyComplexException", "NeitherComplexNorFloatOS", "Index", "MyComplexExceptionOS", "JustFloatOS", "MyComplexOS", "MyInt", "NeitherComplexNorFloat", "FloatAndComplex", "SomeException", "IsCloseTests", "JustFloat", "MyComplex"], "class_method_calls": ["actual.imag", "self.assertIsClose", "sys.platform", "self.assertAllClose", "math.inf", "self.value", "self.assertAlmostEqual", "self.assertEqual", "cmath.atanh", "self.assertAllNotClose", "cmath.isinf", "platform.mac_ver", "actual.real", "x.imag", "a.imag", "self.assertCEqual", "math.log", "self.fail", "cmath.e", "self.test_values", "cmath.isfinite", "cmath.inf", "z.imag", "math.isfinite", "a.real", "cmath.pi", "self.assertRaises", "self.test_functions", "test_math.IsCloseTests", "self.check_polar", "expected.real", "self.assertComplexIdentical", "cmath.tanh", "self.assertFloatIdentical", "math.isinf", "math.copysign", "self.assertIsNotClose", "self.assertFalse", "test_functions.append", "unittest.main", "cmath.rect", "self.rAssertAlmostEqual", "cmath.nanj", "cmath.isnan", "cmath.isclose", "self.isclose", "arg.__float__", "y.imag", "y.real", "test_functions.items", "version_txt.split", "cmath.infj", "msg.format", "expected.imag", "cmath.atan", "self.assertTrue", "cmath.nan", "z.real", "unittest.TestCase", "x.real", "math.isnan", "cmath.log"]}, "test_cmd_line.py": {"libraries": ["unittest", "_testcapi", "test.support.script_helper.kill_python", "test.support.script_helper.spawn_python", "test.support.script_helper.assert_python_failure", "faulthandler", "sys", "tempfile", "subprocess", "test.support.script_helper.assert_python_ok", "test.support", "os", "test.support.script_helper.interpreter_requires_environment"], "function_names": ["preexec", "run_xdev", "test_optimize", "test_pythondevmode_env", "test_warnings_filter_precedence", "test_unbuffered_input", "test_showrefcount", "test_sys_flags_not_set", "test_invalid_utf8_arg", "test_unknown_options", "test_stdin_readline", "test_argv0_normalization", "test_usage", "test_builtin_input", "test_empty_PYTHONPATH_issue16309", "test_version", "test_main", "run_ignoring_vars", "verify_valid_flag", "test_run_module_bug1764407", "check_input", "test_run_code", "_test_no_stdio", "test_hash_randomization", "test_unbuffered_output", "res2int", "test_closed_stdout", "test_directories", "test_large_PYTHONPATH", "test_stdout_flush_at_shutdown", "test_sys_flags_set", "test_xoptions", "test_non_ascii", "test_undecodable_code", "test_ignore_PYTHONHASHSEED", "test_isolatedmode", "test_set_pycache_prefix", "check_pythonmalloc", "test_osx_android_utf8", "test_parsing_error", "test_verbose", "test_displayhook_unencodable", "test_output_newline", "test_unmached_quote", "get_xoptions", "test_run_module", "test_del___main__", "test_int_max_str_digits", "check_warnings_filters", "run_python", "test_no_stderr", "run_utf8_mode", "_kill_python_and_exit_code", "test_pythonmalloc", "run_c_locale", "test_site_flag", "test_no_stdin", "test_xdev", "test_no_std_streams", "test_ignore_PYTHONPATH", "run_default", "test_no_stdout"], "function_calls": ["object", "sorted", "assert_python_ok", "interpreter_requires_environment", "spawn_python", "repr", "test_main", "res2int", "run_cmd", "tuple", "dict", "open", "ascii", "AssertionError", "range", "assert_python_failure", "set", "int", "get_xoptions", "bool", "eval", "hasattr", "run_python", "len", "kill_python", "_kill_python_and_exit_code", "ord", "print"], "class_names": ["CmdLineTest", "IgnoreEnvironmentTest"], "class_method_calls": ["sys.executable", "unittest.skipUnless", "self.assertEqual", "env.pop", "self.assertNotEqual", "support.TESTFN", "err.startswith", "tests.extend", "self.run_ignoring_vars", "self.assertRaises", "path1.encode", "os.close", "self.check_input", "os.linesep", "self.assertTrue", "self.run_xdev", "stdout.rstrip", "support.is_android", "sep.join", "res.out", "p.stdin", "support.SuppressCrashReport", "data.startswith", "out.startswith", "self.assertNotIn", "subprocess.Popen", "subprocess.STDOUT", "hashes.append", "out.strip", "self.subTest", "self.assertRegex", "support.run_unittest", "cmd.extend", "out.splitlines", "self.check_warnings_filters", "proc.stdout", "os.path", "out.rstrip", "subprocess.DEVNULL", "sys.version_info", "unittest.TestCase", "self.assertFalse", "support.strip_python_stderr", "sys.platform", "os.pathsep", "stdin.write", "proc.communicate", "support.temp_cwd", "out.split", "f.write", "self.addCleanup", "support.with_pymalloc", "err.decode", "self._test_no_stdio", "path2.encode", "support.unlink", "subprocess.PIPE", "p.returncode", "self.assertGreater", "os.environ", "proc.returncode", "p.stderr", "data.find", "support.FS_NONASCII", "stdin.seek", "p.communicate", "text.decode", "p.wait", "proc.stderr", "tempfile.NamedTemporaryFile", "stdin.flush", "p.stdout", "self.assertIn", "self.check_pythonmalloc", "self.verify_valid_flag", "stdout.startswith", "unittest.skipIf", "subprocess.run", "out.endswith", "err.splitlines", "support.reap_children", "subprocess.check_output", "os.name", "sys.get_int_max_str_digits", "subprocess.CalledProcessError"]}, "test_cmd_line_script.py": {"libraries": ["importlib.machinery", "test.support.script_helper.make_zip_pkg", "contextlib", "test.support.script_helper.spawn_python", "subprocess", "test.support", "test.support.script_helper.make_zip_script", "unittest", "io", "test.support.script_helper.make_pkg", "textwrap", "zipimport", "test.support.script_helper.assert_python_ok", "os", "os.path", "test.support.script_helper.make_script", "test.support.script_helper.kill_python", "importlib", "py_compile", "sys", "test.support.script_helper.assert_python_failure"], "function_names": ["test_basic_script", "test_zipfile", "test_syntaxerror_unindented_caret_position", "test_dash_m_bad_pyc", "test_package_recursion", "test_repl_stderr_flush", "test_repl_stdout_flush_separate_stderr", "test_repl_stderr_flush_separate_stderr", "test_module_in_subpackage_in_zipfile", "test_zipfile_error", "test_zipfile_compiled_timestamp", "test_issue8202_dash_c_file_ignored", "test_syntaxerror_indented_caret_position", "test_module_in_package", "setup_test_pkg", "test_directory_error", "test_main", "_make_test_script", "test_stdin_loader", "test_dash_m_main_traceback", "test_issue20500_exit_with_exception_value", "test_issue20884", "test_directory_compiled", "test_package_error", "test_package", "test_dash_m_init_traceback", "test_zipfile_compiled_checked_hash", "test_non_ascii", "test_dash_m_error_code_is_one", "test_pep_409_verbiage", "_make_test_zip_pkg", "_check_output", "check_repl_stdout_flush", "test_issue8202_dash_m_file_ignored", "interactive_python", "test_module_in_package_in_zipfile", "test_dash_c_loader", "test_package_compiled", "test_repl_stdout_flush", "test_consistent_sys_path_for_direct_execution", "test_issue8202", "_check_import_error", "test_syntaxerror_multi_line_fstring", "test_directory", "check_dash_m_failure", "test_syntaxerror_invalid_escape_sequence_multi_line", "_check_script", "test_nonexisting_script", "test_zipfile_compiled_unchecked_hash", "test_consistent_sys_path_for_module_execution", "test_dash_m_errors", "test_script_compiled", "check_repl_stderr_flush"], "function_calls": ["make_zip_script", "assert_python_ok", "repr", "make_zip_pkg", "spawn_python", "isinstance", "test_main", "_make_test_script", "tuple", "ascii", "open", "range", "_make_test_zip_pkg", "assert_python_failure", "len", "make_script", "kill_python", "make_pkg", "print"], "class_names": ["CmdLineTest"], "class_method_calls": ["stderr.decode", "os.mkdir", "importlib.machinery", "sys.platform", "self.assertEqual", "self.assertNotEqual", "exception.__name__", "os.fsdecode", "support.TESTFN_UNDECODABLE", "io.BytesIO", "proc.communicate", "printed_argv0.encode", "p.stdout", "support.optim_args_from_interpreter_flags", "os.getcwd", "p.stdin", "py_compile.PycInvalidationMode", "stderr.readline", "printed_loader.encode", "exception.encode", "f.write", "self.setup_test_pkg", "self.check_dash_m_failure", "self.assertIn", "support.TESTFN_NONASCII", "self.addCleanup", "support.temp_dir", "self.check_repl_stdout_flush", "self.assertNotIn", "printed_file.encode", "subprocess.STDOUT", "stderr.splitlines", "os.remove", "self.interactive_python", "self.subTest", "self.check_repl_stderr_flush", "self._check_script", "self.assertRegex", "expected.encode", "stdout.rstrip", "printed_path0.encode", "importlib.invalidate_caches", "support.verbose", "support.unlink", "support.run_unittest", "self._check_import_error", "os.curdir", "subprocess.PIPE", "printed_cwd.encode", "contextlib.contextmanager", "stderr.close", "support.reap_children", "support.make_legacy_pyc", "zipimport.zipimporter", "textwrap.dedent", "self._check_output", "proc.returncode", "io.TextIOWrapper", "os.path", "p.stderr", "expected_msg.encode", "self.skipTest", "printed_package.encode", "self.assertTrue", "self.maxDiff", "unittest.TestCase", "stderr.read", "self.assertFalse", "support.change_cwd", "py_compile.compile"]}, "test_code.py": {"libraries": ["unittest", "_testcapi", "threading", "inspect", "types.FunctionType", "opcode", "test.support.check_impl_detail", "sys", "test.test_code", "ctypes", "weakref", "test.support.cpython_only", "test.support.run_doctest", "test.support.run_unittest"], "function_names": ["test_get_set", "new_code", "find_const", "create_closure", "test_clean_stack_on_return", "test_free_different_thread", "test_closure_injection", "consts", "assertIsInterned", "test_interned_string_with_null", "test_main", "test_interned_string", "test_interned_string_in_tuple", "test_bad_index", "__init__", "callback", "test_constructor", "test_replace", "assertIsNotInterned", "dump", "add_foreign_method", "run", "test_free_called", "test_interned_string_in_frozenset", "func", "f", "test_get_non_code", "isinterned", "func2", "test_basic", "test_newempty", "test_interned_string_default", "myfree", "external_getitem", "get_func"], "function_calls": ["new_code", "frozenset", "create_closure", "getattr", "globals", "check_impl_detail", "List", "consts", "var", "repr", "test_main", "super", "SetExtra", "tuple", "Var", "run_unittest", "GetExtra", "setattr", "RequestCodeExtraIndex", "list", "ct", "add_foreign_method", "hex", "FunctionType", "CodeType", "type", "bool", "run_doctest", "f", "eval", "ThreadTest", "isinterned", "coderef", "compile", "new_function", "freefunc", "bytes", "exec", "print"], "class_names": ["CodeTest", "List", "CodeWeakRefTest", "Var", "CoExtra", "CodeConstsTest", "ThreadTest"], "class_method_calls": ["code.co_lnotab", "co.co_cellvars", "self.assertEqual", "code.co_posonlyargcount", "tt.start", "self.assertIs", "ctypes.c_ssize_t", "ctypes.CFUNCTYPE", "co.co_kwonlyargcount", "self.assertRaises", "self.f", "co.co_varnames", "py._PyEval_RequestCodeExtraIndex", "RequestCodeExtraIndex.restype", "co.co_name", "co.co_filename", "f.__closure__", "code.co_kwonlyargcount", "ctypes.POINTER", "code2.co_lnotab", "code.co_name", "self.assertTrue", "inspect.CO_NOFREE", "ctypes.pythonapi", "code.co_firstlineno", "tt.join", "code.co_varnames", "py._PyCode_GetExtra", "code.co_nlocals", "tests.append", "bytecode.insert", "SetExtra.restype", "co.co_names", "RequestCodeExtraIndex.argtypes", "self.assertIsNotInterned", "self.subTest", "List.__getitem__", "code2.co_consts", "code.co_consts", "elt.co_name", "self.get_func", "code.replace", "code2.co_varnames", "co.co_flags", "co.co_nlocals", "opcode.opmap", "GetExtra.restype", "sys.intern", "unittest.TestCase", "self.assertFalse", "self.assertIsInterned", "ctypes.py_object", "r.startswith", "code.co_argcount", "threading.Thread", "_testcapi.code_newempty", "c.replace", "co.co_lnotab", "GetExtra.argtypes", "code.co_flags", "co.co_code", "c.co_freevars", "co.co_argcount", "self.called", "code.co_code", "code.co_freevars", "py._PyCode_SetExtra", "code2.co_code", "code.co_stacksize", "function.__code__", "ctypes.c_voidp", "self.test", "co.co_stacksize", "f.__globals__", "func.__code__", "self.find_const", "co.co_freevars", "self.assertIn", "self.fail", "inspect.CO_COROUTINE", "f.__defaults__", "code.co_filename", "f.__code__", "code.co_names", "weakref.ref", "SetExtra.argtypes", "co.co_consts", "co.co_posonlyargcount", "code.co_cellvars", "ctypes.c_int", "function.__closure__", "extra.value", "co.co_firstlineno"]}, "test_code_module.py": {"libraries": ["unittest", "contextlib.ExitStack", "sys", "unittest.mock", "test.support", "textwrap.dedent"], "function_names": ["test_banner", "test_ps1", "test_syntax_error", "setUp", "mock_sys", "test_sysexcepthook", "test_ps2", "test_exit_msg", "test_context_tb", "test_cause_tb", "test_console_stderr"], "function_calls": ["list", "len", "dedent", "EOFError", "ExitStack", "AssertionError"], "class_names": ["TestInteractiveConsole"], "class_method_calls": ["self.sysmod", "code.sys", "self.console", "self.assertEqual", "support.import_module", "mock.Mock", "stack.close", "self.assertIn", "self.addCleanup", "self.stderr", "self.stdout", "sys.excepthook", "self.infunc", "unittest.TestCase", "self.mock_sys", "code.InteractiveConsole", "mock.patch", "unittest.main", "self.assertTrue", "sys.__excepthook__", "stack.enter_context", "hook.called"]}, "test_codeccallbacks.py": {"libraries": ["unittest", "html.entities", "codecs", "sys", "unicodedata"], "function_names": ["baddecodereturn2", "badencodereturn1", "test_unicodedecodeerror", "baddecodereturn1", "test_translatehelper", "test_unencodablereplacement", "test_badregistercall", "handle", "test_badlookupcall", "badencodereturn2", "test_nameescape", "test_badandgoodreplaceexceptions", "test_callbacks", "relaxedutf8", "replace_with_long", "mutating", "test_fake_error_class", "unencrepl", "forward_shorter_than_end", "test_badandgoodnamereplaceexceptions", "__init__", "test_xmlcharrefvalues", "test_crashing_decode_handler", "test_unicodetranslateerror", "xmlcharnamereplace", "check_exceptionobjectargs", "handler1", "test_xmlcharrefreplace", "test_xmlcharnamereplace", "test_badandgoodsurrogatepassexceptions", "test_unknownhandler", "test_backslashescape", "test_badandgoodsurrogateescapeexceptions", "test_bug828737", "__getitem__", "handler2", "test_decodehelper", "test_encodehelper", "test_mutatingdecodehandler", "test_badandgoodstrictexceptions", "test_badandgoodbackslashreplaceexceptions", "test_decoding_callbacks", "test_lookup", "replacing", "test_badandgoodxmlcharrefreplaceexceptions", "test_badhandlerresults", "test_uninamereplace", "uninamereplace", "test_badandgoodignoreexceptions", "test_charmapencode", "test_unicodeencodeerror", "test_longstrings"], "function_calls": ["PosReturn", "handler", "isinstance", "UnicodeEncodeError", "str", "dict", "Exception", "UnicodeDecodeError", "range", "UnicodeError", "BadObjectUnicodeEncodeError", "UnicodeTranslateError", "type", "D", "bytearray", "len", "BadObjectUnicodeDecodeError", "FakeUnicodeError", "chr", "exctype", "bytes", "surrogatepass_errors", "TypeError", "ord", "surrogateescape_errors"], "class_names": ["BadObjectUnicodeDecodeError", "PosReturn", "FakeUnicodeError", "NoStartUnicodeTranslateError", "CodecCallbackTest", "NoEndUnicodeTranslateError", "BadObjectUnicodeEncodeError", "NoObjectUnicodeTranslateError", "NoEndUnicodeDecodeError", "D", "BadStartUnicodeEncodeError"], "class_method_calls": ["codecs.charmap_encode", "html.entities", "l.append", "unicodedata.name", "UnicodeTranslateError.__init__", "self.assertEqual", "codecs.lookup_error", "codecs.register_error", "uni.encode", "codecs.replace_errors", "self.check_exceptionobjectargs", "self.pos", "sys.maxunicode", "s.encode", "bytes.decode", "data.decode", "self.object", "s.decode", "callargs.append", "self.subTest", "self.assertRaises", "codecs.namereplace_errors", "UnicodeEncodeError.__init__", "UnicodeDecodeError.__init__", "self.start", "exc.object", "c.upper", "sin.decode", "codecs.ignore_errors", "unittest.main", "sin.encode", "codecs.charmap_decode", "handler.handle", "codecs.xmlcharrefreplace_errors", "codecs.strict_errors", "exc.end", "text.translate", "self.end", "handler.pos", "unittest.TestCase", "exc.start", "codecs.backslashreplace_errors"]}, "test_codecencodings_cn.py": {"libraries": ["unittest", "test.multibytecodec_support"], "function_names": [], "function_calls": [], "class_names": ["Test_GBK", "Test_GB2312", "Test_HZ", "Test_GB18030"], "class_method_calls": ["unittest.TestCase", "multibytecodec_support.TestBase", "unittest.main", "multibytecodec_support.load_teststring"]}, "test_codecencodings_hk.py": {"libraries": ["unittest", "test.multibytecodec_support"], "function_names": [], "function_calls": [], "class_names": ["Test_Big5HKSCS"], "class_method_calls": ["unittest.TestCase", "multibytecodec_support.TestBase", "unittest.main", "multibytecodec_support.load_teststring"]}, "test_codecencodings_iso2022.py": {"libraries": ["unittest", "test.multibytecodec_support"], "function_names": ["test_chunkcoding"], "function_calls": [], "class_names": ["Test_ISO2022_KR", "Test_ISO2022_JP2", "Test_ISO2022_JP3", "Test_ISO2022_JP2004", "Test_ISO2022_JP"], "class_method_calls": ["multibytecodec_support.TestBase", "unittest.skip", "multibytecodec_support.load_teststring", "unittest.TestCase", "unittest.main"]}, "test_codecencodings_jp.py": {"libraries": ["unittest", "test.multibytecodec_support"], "function_names": [], "function_calls": [], "class_names": ["Test_CP932", "Test_SJIS_2004", "Test_SJISX0213", "Test_EUC_JIS_2004", "Test_EUC_JP_COMPAT", "Test_SJIS_COMPAT", "Test_EUC_JISX0213"], "class_method_calls": ["unittest.TestCase", "multibytecodec_support.TestBase", "unittest.main", "multibytecodec_support.load_teststring"]}, "test_codecencodings_kr.py": {"libraries": ["unittest", "test.multibytecodec_support"], "function_names": [], "function_calls": [], "class_names": ["Test_CP949", "Test_EUCKR", "Test_JOHAB"], "class_method_calls": ["unittest.TestCase", "multibytecodec_support.TestBase", "unittest.main", "multibytecodec_support.load_teststring"]}, "test_codecencodings_tw.py": {"libraries": ["unittest", "test.multibytecodec_support"], "function_names": [], "function_calls": [], "class_names": ["Test_Big5"], "class_method_calls": ["unittest.TestCase", "multibytecodec_support.TestBase", "unittest.main", "multibytecodec_support.load_teststring"]}, "test_codecmaps_cn.py": {"libraries": ["unittest", "test.multibytecodec_support"], "function_names": [], "function_calls": [], "class_names": ["TestGBKMap", "TestGB2312Map", "TestGB18030Map"], "class_method_calls": ["unittest.TestCase", "unittest.main", "multibytecodec_support.TestBase_Mapping"]}, "test_codecmaps_hk.py": {"libraries": ["unittest", "test.multibytecodec_support"], "function_names": [], "function_calls": [], "class_names": ["TestBig5HKSCSMap"], "class_method_calls": ["unittest.TestCase", "unittest.main", "multibytecodec_support.TestBase_Mapping"]}, "test_codecmaps_jp.py": {"libraries": ["unittest", "test.multibytecodec_support"], "function_names": [], "function_calls": ["bytes", "range", "chr"], "class_names": ["TestSJISCOMPATMap", "TestEUCJPCOMPATMap", "TestEUCJISX0213Map", "TestCP932Map", "TestSJISX0213Map"], "class_method_calls": ["unittest.TestCase", "supmaps.append", "unittest.main", "multibytecodec_support.TestBase_Mapping"]}, "test_codecmaps_kr.py": {"libraries": ["unittest", "test.multibytecodec_support"], "function_names": [], "function_calls": [], "class_names": ["TestJOHABMap", "TestCP949Map", "TestEUCKRMap"], "class_method_calls": ["unittest.TestCase", "unittest.main", "multibytecodec_support.TestBase_Mapping"]}, "test_codecmaps_tw.py": {"libraries": ["unittest", "test.multibytecodec_support"], "function_names": [], "function_calls": [], "class_names": ["TestBIG5Map", "TestCP950Map"], "class_method_calls": ["unittest.TestCase", "unittest.main", "multibytecodec_support.TestBase_Mapping"]}, "test_codecs.py": {"libraries": ["_testcapi", "ctypes.wintypes.BOOL", "contextlib", "ctypes.wintypes.BYTE", "ctypes.WINFUNCTYPE", "unittest.mock", "test.support", "bz2", "array", "unittest", "ctypes.wintypes.WCHAR", "io", "codecs", "ctypes.WinDLL", "encodings", "locale", "_codecs._forget_codec", "zlib", "ctypes.wintypes.UINT", "ctypes.POINTER", "sys", "ctypes", "ctypes.wintypes.DWORD", "encodings.idna.nameprep", "encodings.cp1140"], "function_names": ["test_decode", "test_stream_bare", "test_charmap", "test_unflagged_non_text_codec_handling", "decode", "test_decode_unicode", "test_seeking_write", "test_badbom", "test_cp932", "__init__", "test_raw_decode", "test_multiple_args_is_not_wrapped", "test_seek", "test_decode_errors", "test_codec_lookup_failure_not_wrapped", "test_rot13_func", "test_uu_invalid", "test_encode_surrogateescape", "test_decode_error", "test_encode_unsupported_error_handler", "test_new_override_is_not_wrapped", "test_stream", "test_escape_encode", "test_write", "test_large_input", "test_surrogatepass_handler", "tearDown", "test_writelines", "test_encodedfile", "encode", "is_code_page_present", "test_only_one_bom", "test_utf8", "test_encode_surrogatepass", "test_basic", "check_partial", "test_errors", "test_lookup", "test_raise_subclass_with_weakref_support", "raise_obj", "test_array", "test_raw_encode", "test_encode_error", "test_encoding_map_type_initialized", "check_decode_strings", "test_binary_to_text_blacklists_binary_transforms", "test_incremental_errors", "test_basics", "_get_test_codec", "test_readlines", "test_cp_utf7", "test_raw", "test_seek0", "test_cp1252", "test_buffer_api_usage", "readalllines", "test_getreader", "test_escape", "test_nonbmp", "test_nameprep", "test_bug1098990_a", "set_codec", "test_decode_invalid", "check_encode_strings", "check_state_handling_decode", "test_encode", "test_encode_surrogateescape_error", "test_custom_hex_error_is_wrapped", "test_binary_to_text_blacklists_text_transforms", "test_code_page_decode_flags", "test_basics_capi", "test_bad_encode_args", "test_undefined", "test_unicode_escape", "test_simple", "test_incremental_surrogatepass", "test_getencoder", "test_incremental_decode", "test_decoder_state", "__new__", "test_lone_surrogates", "test_builtin_decode_length_limit", "test_decode_surrogateescape", "test_read", "test_escape_decode", "test_readlinequeue", "setUp", "test_large_utf8_input", "test_builtin_encode", "test_encode_errors", "check_decode", "test_decode_with_int2int_map", "test_multibyte_encoding", "check_wrapped", "test_decode_surrogatepass", "test_lookup_issue1813", "_forget_codec", "test_non_str_arg_is_not_wrapped", "test_incremental", "test_mixed_readline_and_read", "test_instance_attribute_is_not_wrapped", "test_bad_decode_args", "test_bom", "test_decode_strict", "check_encode", "check_state_handling_encode", "test_encode_strict", "test_getwriter", "test_builtin_decode", "test_file_closes_if_lookup_error_raised", "getreader", "test_getdecoder", "check_not_wrapped", "test_custom_zlib_error_is_wrapped", "test_raise_by_type", "check", "test_register", "test_text_to_binary_blacklists_binary_transforms", "test_text_to_binary_blacklists_text_transforms", "test_decode_with_int2str_map", "encode_to_str", "decode_to_bytes", "test_quopri_stateless", "test_raise_grandchild_subclass_exact_size", "test_decode_with_string_map", "test_open", "test_latin1", "test_seeking_read", "test_bug1098990_b", "test_partial", "coding_checker", "test_handlers", "test_bug1175396", "test_ascii", "test_decode_unsupported_error_handler", "test_raise_by_value", "test_invalid_code_page", "test_incremental_encode", "test_aliases", "test_empty", "read", "test_stream_bom", "write", "test_init_override_is_not_wrapped", "test_readline", "test_bug691291", "test_bad_args", "assertWrapped", "test_issue8941", "test_code_page_name", "test_mbcs_alias", "test_bug1601501", "test_all", "test_streamreaderwriter"], "function_calls": ["check", "Queue", "sorted", "getattr", "memoryview", "decode", "id", "WINFUNCTYPE", "RuntimeError", "repr", "isinstance", "coding_checker", "readalllines", "super", "str", "_forget_codec", "open", "reader", "range", "prototype", "list", "CPINFOEXW", "file", "UnicodeError", "set", "GetCPInfoEx", "zip", "writer", "type", "enumerate", "hasattr", "encode", "nameprep", "bytearray", "len", "is_code_page_present", "MyRuntimeError", "chr", "WinDLL", "getreader", "bytes", "POINTER", "ord", "coder", "print"], "class_names": ["PunycodeTest", "CustomInit", "Queue", "UTF32LETest", "UTF16BETest", "NameprepTest", "ReadBufferTest", "IDNACodecTest", "UnicodeEscapeTest", "Rot13UtilTest", "UTF32Test", "UTF7Test", "CharmapTest", "Rot13Test", "ASCIITest", "WithStmtTest", "TypesTest", "Latin1Test", "MixInCheckStateHandling", "UTF8Test", "ReadTest", "CodePageTest", "RawUnicodeEscapeTest", "TransformCodecTest", "UTF16ExTest", "UTF16LETest", "StreamReaderTest", "CPINFOEXW", "UTF8SigTest", "EncodedFileTest", "StreamRecoderTest", "EscapeEncodeTest", "UTF16Test", "LocaleCodecTest", "CustomNew", "SurrogateEscapeTest", "BomTest", "MyRuntimeError", "UTF32BETest", "ExceptionChainingTest", "BasicUnicodeTest", "EscapeDecodeTest", "CodecsModuleTest"], "class_method_calls": ["bytes_transform_encodings.append", "after.encode", "unittest.skipUnless", "self.assertEqual", "self.check_encode_strings", "self.assertNotEqual", "self.CP_UTF8", "codecs.register", "outfile.read", "self.assertGreaterEqual", "codecs.utf_16_le_decode", "sys.stdout", "data.encode", "reader.seek", "codecs.utf_8_decode", "support.TESTFN", "self.assertWrapped", "codecs.decode", "sr.readline", "f.writer", "locale.setlocale", "self.STRINGS", "d.buffer", "ostream.getvalue", "cdecoder.decode", "codecs.utf_16_be_decode", "encoded_data.decode", "self.assertRaises", "codecs.latin_1_decode", "codecs.raw_unicode_escape_decode", "d.encode", "codecs.utf_16_decode", "s.getvalue", "bio.getvalue", "codecs.escape_encode", "exc_type.__name__", "support.check_warnings", "c.name", "self.spambe", "self.BYTES_STRINGS", "codecs.unicode_escape_encode", "srw.read", "b.upper", "self.stream", "_testcapi.codec_incrementaldecoder", "codecs.utf_32_decode", "before.encode", "cases.extend", "info.streamwriter", "self.assertTrue", "self.assertCountEqual", "support.TestFailed", "self.ENCODING", "d.setstate", "self.check_encode", "self.assertIsInstance", "raw.decode", "f.getvalue", "codecs.raw_unicode_escape_encode", "set_d.encode", "self.codec_name", "sys.byteorder", "ef.write", "codecs.getencoder", "errmsg.startswith", "codecs.encode", "codecs.EncodedFile", "cm.exception", "codecs.ascii_decode", "codecs.utf_16_ex_decode", "u.encode", "codecs.utf_32_ex_decode", "codecs.CodecInfo", "self.set_codec", "sr.seek", "s.encode", "test_string.encode", "codecs.StreamRecoder", "self.check_decode", "io.StringIO", "encoding.endswith", "self.obj_to_raise", "self.ill_formed_sequence_replace", "locale.Error", "encodings.ascii", "self.decode", "self.subTest", "f.seek", "self.assertRegex", "_TEST_CODECS.get", "encoder.reset", "f.tell", "encodings.normalize_encoding", "r.bytebuffer", "d.getstate", "contextlib.contextmanager", "ctypes.c_wchar", "codecs.escape_decode", "self.assertIsNone", "self.raise_obj", "codecs.BOM_UTF8", "array.array", "decoders.append", "fmt.format", "ostream.write", "encoding.replace", "codec.encode", "unittest.TestCase", "cases.append", "sys.platform", "codecs.getdecoder", "all_unicode_encodings.append", "self.check_partial", "codecs.getincrementalencoder", "self.check_wrapped", "reader.readline", "self.assertLessEqual", "bad_input.encode", "codec.name", "ctypes.Structure", "f.write", "codecs.unicode_escape_decode", "codecs.getincrementaldecoder", "fp.write", "vwo.append", "failure.exception", "sys.maxunicode", "f.readline", "puny.decode", "self.addCleanup", "codecs.utf_32_be_decode", "bad_input.decode", "q.read", "self.ill_formed_sequence", "ctypes.sizeof", "info.streamreader", "outfile.seek", "self.check_not_wrapped", "self.assertWarns", "d.decode", "codecs.mbcs_decode", "cencoder.encode", "support.unlink", "self.encoding", "exc.object", "self.check_state_handling_encode", "unittest.main", "strings.append", "codecs.charmap_decode", "codecs.utf_7_decode", "support.bigmemtest", "set_o.encode", "cp1140.encoding_table", "f.readlines", "input.encode", "caught.exception", "name.replace", "exc.end", "f.closed", "sys.getfilesystemencoding", "_TEST_CODECS.pop", "codecs.getwriter", "self.BOM", "writer.write", "codecs.iterencode", "codecs.code_page_decode", "_testcapi.EncodeLocaleEx", "exc.start", "s1.encode", "codecs.utf_32_le_decode", "codecs.readbuffer_encode", "self.assertIsNotNone", "codecs.code_page_encode", "self.reader", "reader.read", "other_ascii.encode", "codecs.lookup_error", "encoded.decode", "io.BytesIO", "mock.mock_open", "self.check_decode_strings", "uni.encode", "self.assertRaisesRegex", "encodings.utf_8", "codecs.StreamReaderWriter", "vw.append", "istream.read", "self.fail", "test_sequence.decode", "data.decode", "self.spamle", "ws.encode", "f.read", "codecs.__all__", "self.check_state_handling_decode", "codecs.open", "info.name", "unittest.skipIf", "lines.append", "d.reset", "q.write", "support.verbose", "decoder.reset", "codecs.lookup", "sr.writelines", "codec.decode", "codecs.iterdecode", "mock.patch", "codecs.getreader", "r.read", "_testcapi.DecodeLocaleEx", "exc.attr", "ef.read", "locale.LC_CTYPE", "_testcapi.codec_incrementalencoder", "encodings._cache", "encodings.rot_13", "transform_aliases.items", "support.cpython_only", "sr.write", "decoder.decode", "self.encode", "self.skipTest", "encoder.encode", "dec.decode", "self._buffer", "text.encode"]}, "test_codeop.py": {"libraries": ["unittest", "io", "warnings", "sys", "codeop.PyCF_DONT_IMPLY_DEDENT", "test.support", "codeop.compile_command"], "function_names": ["assertValid", "unify_callables", "assertInvalid", "test_incomplete", "test_warning", "test_filename", "assertIncomplete", "test_valid", "test_invalid"], "function_calls": ["av", "unify_callables", "compile_command", "len", "compile", "ai", "eval", "exec", "hasattr"], "class_names": ["CodeopTests"], "class_method_calls": ["warnings.simplefilter", "self.assertValid", "d.items", "self.assertIncomplete", "support.is_jython", "self.fail", "self.assertEqual", "support.check_warnings", "self.assertNotEqual", "self.assertTrue", "warnings.catch_warnings", "self.assertInvalid", "io.StringIO", "unittest.TestCase", "w.warnings", "unittest.main", "sys.stdout", "self.assertRaises"]}, "test_collections.py": {"libraries": ["collections.UserString", "collections.abc.AsyncIterator", "collections.abc.AsyncGenerator", "collections.abc.Container", "test.support", "string", "collections.abc.Awaitable", "collections.abc.AsyncIterable", "unittest", "types", "copy", "collections._count_elements", "collections.deque", "collections.abc.Hashable", "collections.abc.ValuesView", "collections.abc.Coroutine", "collections.abc.Collection", "collections.abc.Iterator", "collections", "collections.abc.Callable", "collections.abc.Sequence", "collections.abc.Generator", "collections.abc.ByteString", "collections.abc.MutableSet", "collections.abc.Mapping", "collections.abc.Set", "operator", "inspect", "collections.abc.MutableSequence", "collections.abc.ItemsView", "random.randrange", "collections.UserDict", "collections.abc.Sized", "collections.ChainMap", "collections.Counter", "collections.OrderedDict", "collections.namedtuple", "collections.abc.MutableMapping", "doctest", "collections.abc.Reversible", "random.choice", "collections.UserList", "sys", "pickle", "collections.abc.Iterable", "collections.abc.KeysView"], "function_names": ["test_instance", "test_subtract", "test_name_conflicts", "test_Callable", "test_Mapping", "test_Collection", "test_issue_5647", "test_odd_sizes", "throw", "validate_comparison", "__init__", "__aiter__", "__missing__", "athrow", "_copy_test", "asend", "test_registration", "test_module_parameter", "test_repr_nonsortable", "test_MutableSet", "__iter__", "__next__", "_superset_test", "__setitem__", "test_field_descriptor", "test_tupleness", "test_dict_protocol", "__delitem__", "test_Sequence_mixins", "test_bool", "__reversed__", "test_equality_Set", "test_init", "test_basics", "test_multiset_operations", "test_arithmetic_Set", "__await__", "test_direct_subclassing", "run_async", "test_name_fixer", "test_dict_copy", "test_dict_coercion", "aclose", "test_copy_subclass", "test_Sequence", "test_Iterable", "insert", "test_invariant_for_the_in_operator", "test_factory_doc_attr", "test_MutableSequence_mixins", "test_issue16373", "test_readonly", "coro", "test_MutableMapping", "__getitem__", "__contains__", "__anext__", "test_str_protocol", "test_list_protocol", "test_list_copy", "validate_isinstance", "test_keyword_only_arguments", "test_Iterator", "test_ordering", "test_inplace_operations", "__repr__", "test_unary", "test_field_doc_reuse", "test_Sized", "test_main", "test_hash_Set", "test_Awaitable", "test_Container", "discard", "close", "test_pickle", "assert_index_same", "test_Set_interoperability_with_real_sets", "_test_gen", "test_defaults", "test_missing", "test_copy", "test_Set", "test_isdisjoint_Set", "test_MutableMapping_subclass", "check", "__le__", "test_MutableSequence", "test_ByteString", "test_namedtuple_subclass_issue_24931", "test_Reversible", "correctly_ordered", "test_field_doc", "assertSameSet", "test_Hashable", "test_repr", "__eq__", "gen", "test_conversions", "test_update", "test_order_preservation", "get", "test_copying", "test_issue_4920", "__lt__", "test_issue26915", "test_constructor", "__len__", "test_issue8750", "validate_abstract_methods", "test_AsyncIterable", "test_helper_function", "send", "test_new_child", "test_AsyncIterator", "test_factory", "__hash__", "test_Generator", "add", "test_Coroutine", "test_AsyncGenerator"], "function_calls": ["frozenset", "sorted", "getattr", "T", "CounterSubclassWithGet", "Rev", "iter", "Zero", "ty", "dict", "lowerdict", "setattr", "WithSet", "NonGen1", "ValuesView", "MySet", "Counter", "dir", "int", "MinimalAGen", "zip", "enumerate", "OrderedDict", "regular_op", "len", "RevNoIter", "MutableSequenceSubclass", "NonAGen3", "ColNoCont", "SequenceSubclass", "object", "DefaultChainMap", "reversed", "memoryview", "CoroLike", "Bar", "ListSet", "AnextOnly", "Gen", "R", "str", "run_async", "NonCol", "complex", "CustomEqualObject", "loads", "MyComparableSet", "UserDict", "counterop", "list", "It", "AI", "namedtuple", "CounterSubclassWithSetItem", "inplace_op", "op", "Other", "Col", "ItBlocked", "coro", "ItemsView", "DerCol", "min", "SizeBlock", "Point", "OneTwoThreeSet", "MyCounter", "id", "MinimalCoro", "ColNoIter", "RevPlusIter", "StopIteration", "isinstance", "test_main", "setop", "IterBlock", "copier", "B", "MyNonComparableSet", "tuple", "hash", "NonGen3", "range", "C", "set", "assert_index_same", "type", "_test_gen", "MyMapping", "choice", "float", "eval", "I", "hasattr", "NonAGen2", "ChainMap", "max", "CustomSequence", "numberop", "Big", "bytes", "ColNoSize", "sum", "FailOnClose", "check", "UserList", "correctly_ordered", "dumps", "new_coro", "RevItBlocked", "gen", "repr", "issubclass", "IgnoreGeneratorExit", "super", "A", "_count_elements", "randrange", "TestNT", "ValueError", "sample", "RevRevBlocked", "Dot", "NewPoint", "next", "NonGen2", "bytearray", "MinimalGen", "NonAGen1", "H", "NextOnly"], "class_names": ["SizeBlock", "DefaultChainMap", "Point", "OneTwoThreeSet", "CounterSubclassWithGet", "Rev", "TestChainMap", "MyCounter", "CoroLike", "RevItBlocked", "Bar", "MinimalCoro", "AnextOnly", "ListSet", "ColNoIter", "RevPlusIter", "Gen", "R", "IgnoreGeneratorExit", "ABCTestCase", "B", "IterBlock", "NonCol", "MyNonComparableSet", "SequenceSubclass", "CustomEqualObject", "TestCounter", "NonGen3", "lowerdict", "TestCollectionABCs", "MyComparableSet", "WithSet", "It", "NonGen1", "MySet", "C", "RevRevBlocked", "AI", "NewPoint", "ColImpl", "MinimalAGen", "NonGen2", "CounterSubclassWithSetItem", "MyMapping", "TestUserObjects", "I", "TestNamedTuple", "MinimalGen", "NonAGen1", "NonAGen2", "Other", "CustomSequence", "RevNoIter", "MutableSequenceSubclass", "Col", "NonAGen3", "ItBlocked", "H", "ColNoSize", "TestOneTrickPonyABCs", "ColNoCont", "FailOnClose", "NextOnly", "DerCol"], "class_method_calls": ["p.z", "b._asdict", "c.called", "a._asdict", "p.elements", "Counter.__sub__", "self.assertEqual", "support.gc_collect", "self.assertNotEqual", "mgen.send", "Point.__module__", "self.assertGreaterEqual", "seq1.index", "B.register", "mymap.keys", "Counter.update", "self.assertIs", "Counter.subtract", "Point.y", "combined.update", "obj_copy.data", "Dot._make", "e.maps", "p.subtract", "methodstubs.copy", "self.assertRaises", "self.assertSetEqual", "NT.__module__", "Zero._make", "nt._fields", "dict.__contains__", "mss2.extend", "Point.__new__", "pickle.HIGHEST_PROTOCOL", "mgen.close", "c.setdefault", "string.ascii_letters", "mgen.__aiter__", "dict.__getitem__", "tuple.__getitem__", "Point.__getitem__", "doctest.DocTestSuite", "a.__dict__", "c.copy", "self.assertTrue", "self.validate_isinstance", "c.popitem", "obj_copy.test", "baseline.copy", "self.assertIsInstance", "set.__sub__", "d.pop", "words.copy", "d.copy", "dict.fromkeys", "module.HIGHEST_PROTOCOL", "Counter.__and__", "seq.index", "p.y", "other.right_side", "Q.o", "self.assertNotIn", "Point.x", "self.lst", "Point.__doc__", "mss.clear", "mgen.throw", "self.subTest", "seq.count", "set.__or__", "f.maps", "Counter.__init__", "support.run_unittest", "c.pop", "copy.deepcopy", "seq2.index", "pickle.loads", "self.assertIsNone", "self.assertIsNot", "q._fields", "a.__name__", "list.append", "c.elements", "mss.remove", "key.lower", "unittest.TestCase", "obj.data", "self.assertFalse", "f.parents", "Point._field_defaults", "self.assertSameSet", "copy.copy", "mgen.athrow", "c.values", "sys.flags", "support.run_doctest", "p._fields", "Point.__name__", "mymap.items", "p.update", "Coroutine.register", "obj.test", "a.w", "self.__s", "obj.append", "q.elements", "self.called", "b.__name__", "inspect.isdatadescriptor", "combined.items", "obj.copy", "ex.args", "c.close", "mss.pop", "self._superset_test", "mss.append", "self.validate_comparison", "operators.items", "self._seq", "c.__init__", "result.values", "types.coroutine", "mgen.__anext__", "d.maps", "t.__getnewargs__", "q.update", "mss.extend", "Counter.__isub__", "Point._fields", "Counter.get", "T._fields", "Vector.x", "c.most_common", "self.right_side", "self.assertNotIsInstance", "Q.p", "mss.reverse", "Counter.__ior__", "c.__contains__", "c.keys", "d.new_child", "c.new_child", "self.assertRaisesRegex", "d.popitem", "Big._make", "d.items", "Counter.__add__", "P.n", "cm.items", "self.assertIn", "c.clear", "update_test.update", "p._asdict", "t._replace", "c.items", "self.data", "t._asdict", "Counter.__or__", "coro.send", "set.__and__", "c.subtract", "Point.__slots__", "self._hash", "unittest.skipIf", "np.y", "Counter.__setitem__", "self.contents", "Counter.__iand__", "self._fail", "self.validate_abstract_methods", "s1.isdisjoint", "p.copy", "NT._fields", "np.x", "c.get", "mgen.aclose", "Counter.__iadd__", "self.seq", "T._make", "self.assertEquals", "mgen.asend", "s.pop", "p._replace", "c.update", "b._replace", "Counter.fromkeys", "self._copy_test", "support.cpython_only", "Point._make", "P.m", "p.x", "pickle.dumps", "B.__name__", "d.get", "b._fields"]}, "test_colorsys.py": {"libraries": ["unittest", "colorsys"], "function_names": ["test_hls_roundtrip", "test_hsv_values", "test_yiq_roundtrip", "test_hsv_roundtrip", "test_hls_values", "assertTripleEqual", "test_yiq_values", "frange"], "function_calls": ["len", "frange"], "class_names": ["ColorsysTest"], "class_method_calls": ["self.assertTripleEqual", "colorsys.rgb_to_yiq", "colorsys.hsv_to_rgb", "self.assertAlmostEqual", "colorsys.rgb_to_hls", "self.assertEqual", "colorsys.rgb_to_hsv", "unittest.TestCase", "colorsys.hls_to_rgb", "unittest.main", "colorsys.yiq_to_rgb"]}, "test_compare.py": {"libraries": ["unittest"], "function_names": ["test_id_comparisons", "test_ne_high_priority", "__ne__", "test_comparisons", "test_ne_low_priority", "test_ne_defaults_to_not_eq", "test_issue_1393", "__init__", "test_other_delegation", "__eq__", "__repr__", "unexpected"], "function_calls": ["object", "Base", "len", "func", "Left", "C", "Derived", "Cmp", "setattr", "Anything", "id", "range", "Right", "Empty"], "class_names": ["Base", "Left", "ComparisonTest", "Derived", "C", "Cmp", "Anything", "Right", "Empty"], "class_method_calls": ["self.assertIs", "calls.append", "self.assertSequenceEqual", "self.fail", "self.assertRaises", "self.set1", "self.assertEqual", "self.assertNotEqual", "unittest.TestCase", "self.arg", "L.insert", "unittest.main", "self.subTest", "self.candidates"]}, "test_compile.py": {"libraries": ["unittest", "io", "__mangled_mod", "types", "builtins", "dis", "__package__.module", "sys", "tempfile", "math", "test.support", "os", "test.support.FakePath", "_ast", "test.support.script_helper"], "function_names": ["test_try_except_bare", "continue_in_while", "test_stack_overflow", "test_for", "test_particularly_evil_undecodable", "test_dont_merge_constants", "test_debug_assignment", "test_peephole_opt_unreachable_code_array_access_in_bounds", "test_return_inside_except_block", "unused_code_at_end", "break_in_while", "__init__", "test_compile_filename", "test_32_63_bit_values", "test_lambda_doc", "test_leading_newlines", "test_float_literals", "test_async_with", "test_sequence_unpacking_error", "__setitem__", "check_same_constant", "test_no_ending_newline", "test_extended_arg", "test_unary_minus", "test_path_like_objects", "test_and", "__delitem__", "test_false_while_loop", "test_return_inside_async_with_block", "test_return_inside_finally_block", "test_async_for_else", "test_for_break_continue_inside_finally_block", "test_for_else", "check_limit", "test_compiler_recursion_limit", "test_try_except_qualified", "unused_block_if", "test_return_inside_with_block", "compile_snippet", "test_single_statement", "test_while_else", "test_with", "test_for_break_continue_inside_try_finally_block", "check_different_constants", "test_none_assignment", "f", "test_argument_order", "test_async_for", "__getitem__", "__contains__", "test_return_inside_try_finally_block", "test_mangling", "keys", "test_merge_constants", "test_none_keyword_arg", "test_and_or", "check_constant", "test_for_break_continue", "test_indentation", "test_argument_handling", "test_same_filename_used", "test_binop", "test_func_and", "test_bad_single_statement", "unused_block_while_else", "test_encoding", "test_other_newlines", "test_dead_blocks_do_not_generate_bytecode", "test_if_else", "test_dict_evaluation_order", "test_syntax_error", "unused_block_if_else", "test_literals_with_leading_zeroes", "test_yet_more_evil_still_undecodable", "test_chained_comparison", "assertInvalidSingle", "test_for_break_continue_inside_async_with_block", "test_duplicate_global_local", "test_subscripts", "test_for_distinct_code_objects", "test_or", "test_int_literals_too_long", "test_exec_with_general_mapping_for_locals", "test_annotation_limit", "test_import", "check_stack_size", "test_if", "test_try_finally", "test_null_terminated", "test_try_except_as", "test_empty", "test_compile_ast", "unused_block_while", "compile_single", "test_for_break_continue_inside_except_block", "test_for_break_continue_inside_with_block"], "function_calls": ["frozenset", "memoryview", "id", "repr", "RuntimeError", "isinstance", "check_limit", "str_map", "iter", "str", "A", "dict", "open", "setattr", "range", "compile_snippet", "list", "f1", "check_different_constants", "slice", "set", "M", "int", "next", "type", "eval", "f", "D", "check_same_constant", "bytearray", "len", "compile", "f2", "bytes", "FakePath", "exec", "globals"], "class_names": ["TestSpecifics", "str_map", "TestStackSizeStability", "M", "A", "TestExpressionStackSize", "D"], "class_method_calls": ["fname.lower", "self.assertIsInstance", "_ast.BoolOp", "c.co_filename", "f3.__code__", "self.assertEqual", "m.results", "self.assertNotEqual", "self.assertInvalidSingle", "func.__code__", "self.assertLessEqual", "self.assertRaisesRegex", "self.assertIs", "script_helper.run_python_until_end", "fp.write", "f1.__code__", "self.compile_single", "builtins.__debug__", "dis.dis", "math.log", "co.co_lnotab", "self.assertIn", "f2.__code__", "self.fail", "self.data", "tempfile.TemporaryDirectory", "self.assertNotIn", "io.StringIO", "self.check_stack_size", "math.ceil", "res.err", "f.read", "_ast.If", "code.co_filename", "self.test_32_63_bit_values", "self.assertRaises", "types.CodeType", "self.assertWarns", "out.getvalue", "dis.get_instructions", "code.co_code", "self.check_constant", "c.co_consts", "self.results", "exc.lineno", "ast.body", "co2.co_filename", "self.assertIsNone", "self.assertIsNot", "unittest.main", "co.co_firstlineno", "self.N", "sys.getrecursionlimit", "dict.__getitem__", "code.co_stacksize", "_ast.PyCF_ONLY_AST", "sys.maxsize", "obj.co_filename", "os.path", "_ast.Module", "A.f", "support.cpython_only", "l.__doc__", "self.assertTrue", "unittest.TestCase", "err_ctx.exception", "support.adjust_int_max_str_digits"]}, "test_compileall.py": {"libraries": ["unittest.skipUnless", "struct", "unittest.mock", "test.support", "test.test_importlib.util", "unittest", "io", "importlib.util", "pathlib", "os", "time", "test_py_compile.without_source_date_epoch", "shutil", "tempfile", "concurrent.futures.ProcessPoolExecutor", "compileall", "py_compile", "sys", "test_py_compile.SourceDateEpochTestMeta", "test.support.script_helper"], "function_names": ["add_bad_source_file", "test_compile_missing_multiprocessing", "test_optimize", "test_recursion_control", "test_compiles_as_much_as_possible", "setUp", "_get_run_args", "test_legacy_paths", "test_ddir_empty_multiple_workers", "assertRunNotOK", "test_d_compile_error", "test_pyc_invalidation_mode", "test_compile_one_worker", "test_compile_file_pathlike", "timestamp_metadata", "test_multiple_runs", "test_no_args_compiles_path", "recreation_check", "test_workers", "test_ddir_multiple_workers", "test_regexp", "_test_ddir_only", "test_ddir_only_one_worker", "test_workers_available_cores", "test_error", "test_compile_file_pathlike_ddir", "test_recursion_limit", "assertNotCompiled", "test_compile_workers_cpu_count", "test_mtime", "test_multiple_dirs", "test_silent", "test_compile_pool_called", "_skip_if_sys_path_not_writable", "test_no_args_respects_quiet_flag", "setUpClass", "test_include_file_no_arg", "assertRunOK", "assertCompiled", "test_d_runtime_error", "test_no_pycache_in_non_package", "test_include_bad_file", "test_include_file_with_arg", "test_compile_dir_pathlike", "tearDown", "test_quiet", "f", "test_compile_path", "test_invalid_arg_produces_message", "test_magic_number", "test_force", "test_compile_workers_non_positive", "test_include_on_stdin", "test_ddir_empty_only_one_worker", "test_no_args_respects_force_flag", "test_compile_files"], "function_calls": ["len", "sorted", "str", "locals", "int", "filter", "skipUnless", "open", "range"], "class_names": ["CompileallTestsWithoutSourceEpoch", "CommandLineTestsBase", "CommmandLineTestsNoSourceEpoch", "EncodingTest", "CompileallTestsBase", "CompileallTestsWithSourceEpoch", "CommmandLineTestsWithSourceEpoch"], "class_method_calls": ["os.mkdir", "mod_code_obj.co_filename", "directory.mkdir", "sys.executable", "self.assertEqual", "self.assertNotEqual", "script_helper.make_pkg", "self._get_run_args", "support.optim_args_from_interpreter_flags", "sys.stdout", "self.assertRunNotOK", "compileall.compile_file", "self.timestamp_metadata", "script_helper.spawn_python", "pool_mock.call_args", "cls._sys_path_writable", "stdout.getvalue", "os.sep", "shutil.rmtree", "compileall.compile_dir", "os.linesep", "support.captured_stdout", "sys.implementation", "self.assertTrue", "py_compile.compile", "int.from_bytes", "script_helper.kill_python", "self.bc_path", "p.stdin", "tempfile.mkdtemp", "shutil.copyfile", "self.source_path", "unittest.SkipTest", "directory.is_dir", "path.open", "importlib.util", "compileall.main", "self.assertNotIn", "self.bad_source_path", "self.assertNotRegex", "self.assertRegex", "self.directory", "fp.read", "base.format", "mods.append", "script_helper.assert_python_ok", "os.path", "compileall.compile_path", "mod.startswith", "unittest.TestCase", "self.assertFalse", "self.recreation_check", "compile_dir.call_args", "self.source_path2", "self._sys_path_writable", "os.utime", "compile_file_mock.called", "self.addCleanup", "self.pkgdir", "test.test_importlib", "self.barfn", "support.unlink", "self._test_ddir_only", "self.source_path3", "os.environ", "files.append", "unittest.main", "pool_mock.called", "io.TextIOWrapper", "time.time", "os.listdir", "self._skip_if_sys_path_not_writable", "compile_dir.called", "fn.endswith", "file.read", "self.bc_path2", "self.add_bad_source_file", "os.rename", "self.assertRunOK", "io.BytesIO", "os.fsdecode", "self.pkgdir_cachedir", "self.assertRaisesRegex", "l1.write", "self.assertIn", "support.rmtree", "self.subdirectory", "os.remove", "pathlib.Path", "struct.pack", "self.initfn", "self.assertNotCompiled", "directory.rmdir", "mock.patch", "os.unlink", "script_helper.make_script", "script_helper.assert_python_failure", "sys.path", "self.assertCompiled", "os.stat", "file.write"]}, "test_complex.py": {"libraries": ["unittest", "operator", "test.test_grammar.INVALID_UNDERSCORE_LITERALS", "random.random", "math.atan2", "test.test_grammar.VALID_UNDERSCORE_LITERALS", "math.copysign", "test.support", "math.isnan"], "function_names": ["test_plus_minus_0j", "check", "test_floordiv", "split_zeros", "test", "test_overflow", "assertClose", "check_div", "test_conjugate", "__index__", "test_format", "test_truediv", "test_main", "test_repr_roundtrip", "__complex__", "assertAlmostEqual", "assertFloatsAreIdentical", "__int__", "__init__", "test_boolcontext", "test_constructor", "test_richcompare_boundaries", "test_neg", "test_abs", "test_negated_imaginary_literal", "test_divmod", "test_richcompare", "test_getnewargs", "assertCloseAbs", "test_file", "test_hash", "test_constructor_special_numbers", "test_pow", "test_mod", "__float__", "test_underscores", "test_repr_str", "__new__", "test_negative_zero_repr_str"], "function_calls": ["check", "split_zeros", "format", "test", "complex2", "random", "abs", "MyIndex", "repr", "isinstance", "test_main", "atan2", "test_fn", "OS", "is_equal", "str", "NS", "MyInt", "complex", "hash", "open", "range", "copysign", "isnan", "evilcomplex", "type", "complex0", "float", "eval", "any", "pow", "complex1", "float2", "print"], "class_names": ["ComplexTest", "complex2", "EvilExc", "OS", "evilcomplex", "NS", "MyInt", "complex1", "complex0", "MyIndex", "float2"], "class_method_calls": ["complex.__ne__", "operator.eq", "z2.real", "complex.__le__", "self.value", "fo.close", "self.assertAlmostEqual", "self.assertEqual", "z.__truediv__", "self.assertNotEqual", "b.imag", "complex.__eq__", "support.requires_IEEE_754", "operator.ge", "self.assertRaisesRegex", "num.imag", "x.imag", "self.assertIs", "z0.imag", "a.imag", "num.real", "self.assertFloatsAreIdentical", "support.TESTFN", "complex.__new__", "self.fail", "self.assertCloseAbs", "complex.__truediv__", "z1.real", "self.check_div", "operator.ne", "b.real", "z.imag", "operator.lt", "a.real", "roundtrip.imag", "self.subTest", "self.assertClose", "self.assertRaises", "complex.__ge__", "z1.imag", "self.assertWarns", "lit.replace", "complex.__gt__", "support.unlink", "complex.__lt__", "support.run_unittest", "fo.read", "z0.real", "operator.gt", "complex.__floordiv__", "y.imag", "y.real", "z2.imag", "msg.format", "fo.closed", "operator.le", "self.assertTrue", "z.real", "unittest.TestCase", "x.real", "roundtrip.real"]}, "test_concurrent_futures.py": {"libraries": ["concurrent.futures._base.BrokenExecutor", "contextlib", "test.support", "unittest", "io", "concurrent.futures", "threading", "tempfile.TemporaryFile", "queue", "faulthandler", "pickle.UnpicklingError", "test.support.script_helper.assert_python_ok", "logging.handlers.QueueHandler", "weakref", "os", "itertools", "logging", "multiprocessing.get_context", "concurrent.futures._base.FINISHED", "time", "concurrent.futures._base.CANCELLED_AND_NOTIFIED", "pickle.PicklingError", "multiprocessing.process", "concurrent.futures._base.Future", "sys", "concurrent.futures._base.PENDING", "concurrent.futures._base.RUNNING", "multiprocessing.util", "concurrent.futures._base.CANCELLED", "concurrent.futures.process.BrokenProcessPool"], "function_names": ["test_submit", "_crash", "_assert_logged", "test_free_reference_yielded_future", "test_done_callback_with_cancel", "raising_fn", "_return_instance", "test_first_exception_one_already_failed", "__init__", "test_shutdown_deadlock", "test_initializer", "test_processes_terminate", "init", "test_result_with_success", "tearDown", "test_multiple_set_result", "hide_process_stderr", "test_map_submits_without_iteration", "init_fail", "create_executor_tests", "capture", "test_first_completed_some_already_completed", "make_dummy_object", "test_hang_issue12364", "test_done_callback_raises_already_succeeded", "test_done_callback_already_cancelled", "test_first_completed", "test_shutdown_race_issue12456", "fn", "my_method", "test_map_timeout", "test_no_stale_references", "test_submit_after_interpreter_shutdown", "test_default_workers", "test_threads_terminate", "test_del_shutdown", "test_map_exception", "test_correct_timeout_exception_msg", "mul", "test_interpreter_shutdown", "notification", "test_timeout", "test_running", "_sleep_id", "test_map_chunksize", "__del__", "test_max_workers_too_large", "future_func", "test_exception_with_success", "test_free_reference", "test_traceback", "tearDownModule", "test_max_workers_negative", "test_done", "bad_map", "setUp", "test_idle_thread_reuse", "_raise_error", "__reduce__", "test_done_callback_with_result", "test_first_exception", "_test_traceback", "get_init_status", "test_ressources_gced_in_workers", "test_done_callback_already_failed", "test_map", "test_all_completed", "test_thread_names_default", "test_first_exception_some_already_complete", "test_cancelled", "get_context", "test_zero_timeout", "test_submit_keyword", "test_context_manager_shutdown", "test_run_after_shutdown", "test_result_with_timeout", "test_exception_with_timeout", "acquire_lock", "test_thread_names_assigned", "test_repr", "_fail_on_deadlock", "test_duplicate_futures", "test_no_timeout", "test_killed_child", "test_saturation", "setUpModule", "strip_mixin", "test_cancel", "_exit", "test_done_callback_raises", "_prime_executor", "sleep_and_raise", "test_crash", "sleep_and_print", "record_finished", "test_result_with_cancel", "create_future", "test_done_callback_already_successful", "test_done_callback_with_exception", "test_multiple_set_exception", "test_pending_calls_race"], "function_calls": ["min", "assert_python_ok", "_crash", "getattr", "cls", "QueueHandler", "globals", "Err", "RuntimeError", "PicklingError", "repr", "isinstance", "ExitAtUnpickle", "super", "iter", "str", "strip_mixin", "wr", "dict", "Exception", "_exit", "range", "Future", "ValueError", "list", "ErrorAtPickle", "CrashAtUnpickle", "set", "TemporaryFile", "type", "next", "OSError", "hide_process_stderr", "MyObject", "hasattr", "create_future", "EventfulGCObj", "any", "len", "create_executor_tests", "ErrorAtUnpickle", "get_context", "map", "print"], "class_names": ["ExecutorMixin", "ExecutorDeadlockTest", "ExecutorTest", "ExecutorShutdownTest", "ProcessPoolExecutorTest", "InitializerMixin", "ExitAtPickle", "ProcessPoolForkMixin", "CrashAtPickle", "ThreadPoolWaitTests", "AsCompletedTests", "ExitAtUnpickle", "ProcessPoolSpawnMixin", "ThreadPoolMixin", "ThreadPoolShutdownTest", "ErrorAtPickle", "ProcessPoolForkserverMixin", "CrashAtUnpickle", "FailingInitializerMixin", "MyObject", "EventfulGCObj", "BaseTestCase", "ProcessPoolShutdownTest", "ErrorAtUnpickle", "WaitTests", "ThreadPoolExecutorTest", "FutureTests"], "class_method_calls": ["stderr.getvalue", "f4.cancel", "f.set_result", "mgr.Event", "unittest.skipUnless", "self.assertEqual", "sys.stdout", "self.assertIs", "t.start", "f._result", "exc.args", "logger.propagate", "executor._threads", "sys.getswitchinterval", "f.cancel", "futures.ALL_COMPLETED", "f1._state", "CANCELLED_FUTURE.running", "self.log_queue", "self.assertRaises", "futures.CancelledError", "self.t1", "mgr.join", "f.set_exception", "faulthandler.dump_traceback", "EXCEPTION_FUTURE.done", "f4._state", "f.result", "PENDING_FUTURE.cancelled", "event.set", "e.map", "p.terminate", "f6._state", "RUNNING_FUTURE.running", "f6.cancel", "sys.stderr", "i.__next__", "RUNNING_FUTURE.result", "fut.result", "futures.ProcessPoolExecutor", "f1.result", "self.assertTrue", "self.assertCountEqual", "CANCELLED_FUTURE.exception", "f3._state", "name.endswith", "self.executor_kwargs", "self.get_context", "f1.exception", "callback_exception.args", "SUCCESSFUL_FUTURE.done", "self._thread_key", "PENDING_FUTURE.done", "cm.exception", "self._test_traceback", "f1._condition", "CANCELLED_AND_NOTIFIED_FUTURE.exception", "EXCEPTION_FUTURE.running", "res.result", "EXCEPTION_FUTURE.exception", "futures.ThreadPoolExecutor", "RUNNING_FUTURE.done", "io.StringIO", "callback_future.cancelled", "self._fail_on_deadlock", "out.strip", "faulthandler._sigsegv", "PENDING_FUTURE.exception", "RUNNING_FUTURE.exception", "futures.FIRST_EXCEPTION", "futures.InvalidStateError", "f.seek", "self.subTest", "self.assertRegex", "SUCCESSFUL_FUTURE.exception", "self.executor_type", "SUCCESSFUL_FUTURE.running", "lock.acquire", "self.assertLogs", "contextlib.contextmanager", "self.assertIsNone", "t.name", "my_object_collected.set", "f3.cancel", "futures_list.append", "itertools.repeat", "executor._max_workers", "self.ctx", "f2._state", "futures.process", "SUCCESSFUL_FUTURE.result", "f2.cancel", "unittest.TestCase", "self.assertFalse", "self._prime_executor", "time.monotonic", "self.assertLess", "sys.platform", "executor.shutdown", "queue_management_thread.join", "f5.cancel", "test.support", "futures.TimeoutError", "CANCELLED_AND_NOTIFIED_FUTURE.cancelled", "CANCELLED_FUTURE.result", "f.add_done_callback", "EXCEPTION_FUTURE.result", "EXCEPTION_FUTURE.cancelled", "mixin.__name__", "processes.values", "err.decode", "executor._queue_management_thread", "PENDING_FUTURE.result", "f1.cancel", "executor.map", "self.assertWarns", "e._processes", "self.mp_context", "self.event", "completed_futures.add", "logger.addHandler", "exc.__cause__", "call_queue.join_thread", "unittest.main", "callback_future.result", "CANCELLED_AND_NOTIFIED_FUTURE.running", "obj.event", "threading.Semaphore", "f1._exception", "futures.wait", "f._exception", "p.join", "CANCELLED_AND_NOTIFIED_FUTURE.result", "futures.as_completed", "multiprocessing.util", "sem.release", "sys.setswitchinterval", "my_object_collected.wait", "future.result", "results.append", "self.worker_count", "CANCELLED_AND_NOTIFIED_FUTURE.done", "mgr.shutdown", "event.wait", "output.append", "self.TIMEOUT", "exe.__name__", "self.assertRaisesRegex", "self._assert_logged", "cm.output", "sys.exit", "logging.getLogger", "self.fail", "self.assertIn", "threading.Event", "cause.tb", "t.join", "CANCELLED_FUTURE.cancelled", "faulthandler.disable", "f5._state", "f.read", "queue.Empty", "f1.set_result", "sys.exc_info", "sys.excepthook", "executor._processes", "RUNNING_FUTURE.cancelled", "finished.append", "weakref.ref", "futures.FIRST_COMPLETED", "executor.submit", "f._state", "f1.getvalue", "self.executor", "my_object.my_method", "executor._call_queue", "sys.__stderr__", "os.cpu_count", "PENDING_FUTURE.running", "SUCCESSFUL_FUTURE.cancelled", "time.sleep", "f.done", "f.exception", "futures_list.remove", "self.skipTest", "logger.setLevel", "CANCELLED_FUTURE.done", "callback_future.exception", "threading.Thread"]}, "test_configparser.py": {"libraries": ["unittest", "io", "textwrap", "configparser", "collections", "warnings", "pathlib", "decimal", "pickle", "test.support", "os"], "function_names": ["test_cfgparser_dot_3", "test_interpolation_depth_error", "test_weird_errors", "test_sectionproxy_repr", "test_stripping", "test_interpolationsyntaxerror", "test_clear", "__init__", "test_get_extended_interpolation", "iteritems", "test_empty_case", "test_inheritance", "test_iterable", "test_interpolationerror", "getboolean", "items", "fromstring", "parse_error", "test_write", "test_interpolation", "test_add_section_default", "tearDown", "test_set_nonstring_types", "test_duplicatesectionerror", "test_reading", "test_sorted", "test_basic", "test_safeconfigparser_deprecation", "test_parsingerror", "test_none_as_value_stringified", "test_converters_at_init", "test_default_case_sensitivity", "test_comment_handling", "test_interpolation_validation", "iterkeys", "test_error", "test_instance_assignment", "_test_len", "test_popitem", "test_extended_interpolation", "check_items_config", "test_read_returns_file_list_with_bytestring_path", "test_query_errors", "test_case_sensitivity_mapping_access", "test_converters", "itervalues", "test_none_as_default_interpolation", "test_boolean", "test_set_malformatted_interpolation", "getlen", "test_nosectionerror", "test_interpolationdeptherror", "test_nooptionerror", "setUp", "test_missingsectionheadererror", "test_endless_loop", "keys", "test_basic_from_dict", "test_readline_generator", "test_case_sensitivity", "assertMatchesIni", "test_readfp_deprecation", "test_inconsistent_converters_state", "test_items", "test_safe_interpolation", "test_strange_options", "test_interpolation_missing_value", "test_parsing_error", "get_interpolation_config", "test_parse_errors", "readline_generator", "test_missing_options", "test_interpolationmissingoptionerror", "readline", "test_read_returns_file_list", "newconfig", "test_get_basic_interpolation", "get_error", "test_none_as_value_stringified_raw", "test__all__", "values", "test_source_as_bytes", "test_case_sensitivity_conflicts", "test_other_errors", "prepare", "test_unicode_failure", "test_no_interpolation", "test_duplicateoptionerror", "test_duplicate_option_error", "test_file", "test_invalid_multiline_value", "test_missing_section", "test_set_string_types", "test_setitem", "test_dominating_multiline_values", "basic_test", "test_defaults_keyword", "test_remove_option", "test_case_sensitivity_basic"], "function_calls": ["object", "FakeFile", "sorted", "mystr", "CustomConfigParser", "repr", "isinstance", "super", "iter", "str", "dict", "open", "elem_eq", "range", "eq", "list", "config_class", "set", "readline_generator", "hasattr", "len", "StrangeConfigParser"], "class_names": ["FakeFile", "BlatantOverrideConvertersTestCase", "ConfigParserTestCaseNoValue", "ConfigParserTestCaseNoInterpolation", "mystr", "CustomConfigParser", "ReadFileTestCase", "RawConfigParserTestSambaConf", "Issue7005TestCase", "InlineCommentStrippingTestCase", "SortedTestCase", "ConvertersTestCase", "CompatibleTestCase", "ExceptionContextTestCase", "CfgParserTestCaseClass", "StrictTestCase", "ConfigParserTestCaseNonStandardDefaultSection", "ConfigParserTestCaseNonStandardDelimiters", "RawConfigParserTestCaseNonStandardDelimiters", "CopyTestCase", "ConfigParserTestCase", "ConfigParserTestCaseLegacyInterpolation", "SortedDict", "ExceptionPicklingTestCase", "ConfigParserTestCaseExtendedInterpolation", "BasicTestCase", "ConfigParserTestCaseTrickyFile", "CoverageOneHundredTestCase", "StrangeConfigParser", "MultilineValuesTestCase", "RawConfigParserTestCase", "MiscTestCase"], "class_method_calls": ["configparser.InterpolationSyntaxError", "cfg.getdecimal", "cf.options", "self.assertEqual", "configparser._UNSET", "configparser.RawConfigParser", "self.assertNotEqual", "configparser.DuplicateOptionError", "e2.errors", "e2.line", "s.getlist", "self.strict", "self.assertIs", "cf.items", "self.config_class", "support.TESTFN", "configparser.MissingSectionHeaderError", "config.update", "e1.source", "self.interpolation", "cf._dict", "warnings.catch_warnings", "configparser.LegacyInterpolation", "parser.getdecimal", "error.lineno", "e2.args", "self.comment_prefixes", "configparser.DuplicateSectionError", "cf.set", "self.assertRaises", "self.values", "self.expected_output", "error.section", "e1.line", "self.assertMatchesIni", "pickle.HIGHEST_PROTOCOL", "e2.option", "cf.write", "e2.message", "e1.append", "cf.getfloat", "cf_copy.values", "self.config", "configparser.ConfigParser", "self.wonderful_spam", "e2.lineno", "E.sort", "E.append", "cf.has_section", "cf.add_section", "L.sort", "self.assertCountEqual", "self.assertTrue", "cfg.getboolean", "sio.getvalue", "cf.clear", "section.name", "decimal.Decimal", "cfg.read_string", "exc.__module__", "self.keys", "cm.exception", "e1.lineno", "parser.options", "configparser.Error", "configparser.ExtendedInterpolation", "self.items", "self.check_items_config", "output.getvalue", "s.getfloat", "self.fromstring", "configparser.ParsingError", "self.assertNotIn", "parser.read_string", "cp.set", "io.StringIO", "e1.message", "parser.get", "parser.read_file", "self.lines", "self.prepare", "cfg.getfloat", "support.findfile", "configparser.DEFAULTSECT", "self.inline_comment_prefixes", "self.basic_test", "self._test_len", "pickle.loads", "self.assertIsNone", "cfg.get", "cf.remove_option", "parser.converters", "cfg.converters", "e2.source", "config.remove_option", "unittest.TestCase", "self.assertFalse", "s.get", "cf_from_file.get", "cfg.getint", "cf.read", "cf.read_string", "cf.optionxform", "cf_copy.read_dict", "dse.exception", "e1.option", "cfg.getlen", "e1.args", "self.get_interpolation_config", "cp.add_section", "e.reference", "e1.reference", "f.readline", "ctx.exception", "self.newconfig", "cf.getint", "self._get_conv", "instance.converters", "warnings.simplefilter", "v.split", "cf.popitem", "configparser._default_dict", "s.getint", "cf.read_file", "e1.errors", "cf.sections", "configparser.SafeConfigParser", "unittest.main", "self.delimiters", "s.getboolean", "e.option", "f.readlines", "exc.__qualname__", "e.args", "error.option", "error.source", "cf_from_file.read_file", "cf.read_dict", "config.set", "e.strip", "support.check__all__", "self.assertIsNotNone", "self.dict_type", "error.filename", "self.empty_lines_in_values", "self.assertAlmostEqual", "configparser.InterpolationError", "self.parse_error", "self.assertIn", "cf.has_option", "self.fail", "self.data", "parser.readfp", "cfg.getlist", "cf.remove_section", "e.section", "error.args", "pathlib.Path", "cfg._convert_to_boolean", "file_paths.append", "e1.section", "configparser.InterpolationDepthError", "e2.reference", "self.ini", "collections.UserDict", "self.allow_no_value", "cf.defaults", "configparser.NoSectionError", "os.unlink", "self.get_error", "textwrap.dedent", "cf.getboolean", "configparser.NoOptionError", "s.getdecimal", "configparser.InterpolationMissingOptionError", "warning.category", "section.parser", "self.skipTest", "pickle.dumps", "e2.section", "cp.write", "cf.get", "self.default_section"]}, "test_contains.py": {"libraries": ["unittest", "collections.deque"], "function_names": ["test_builtin_sequence_types", "test_nonreflexive", "__hash__", "__iter__", "__init__", "test_common_tests", "test_block_fallback", "__eq__", "__getitem__", "__contains__"], "function_calls": ["BlockContains", "seq", "list", "Deviant1", "myset", "base_set", "tuple", "constructor", "MyNonReflexive", "ByContains", "float", "range"], "class_names": ["BlockContains", "Deviant1", "seq", "myset", "base_set", "TestContains", "MyNonReflexive", "ByContains"], "class_method_calls": ["self.aList", "self.el", "self.assertIn", "self.assertNotIn", "self.assertTrue", "Deviant1.aList", "dict.fromkeys", "unittest.TestCase", "self.assertFalse", "unittest.main", "self.assertRaises"]}, "test_contextlib.py": {"libraries": ["unittest", "io", "threading", "contextlib.*", "sys", "tempfile", "weakref", "test.support"], "function_names": ["test_instance_docstring_given_cm_docstring", "test_body_exception_suppress", "test_exit_exception_with_correct_context", "test_contextmanager_except_pep479", "test_typo_exit", "woohoo", "test_enter_context", "test_enter", "second", "__init__", "test_contextdecorator_with_exception", "test_contextmanager_except", "test_keywords", "test_decorator_with_exception", "test_exit_is_abstract", "testWithLock", "test_push", "test_instance_bypass", "testWithOpen", "__unter__", "recursive", "test_structural_subclassing", "test_no_resources", "test_callback", "test_contextmanager_doc_attrib", "test_contextmanager_attribs", "test_typo_enter", "__exit__", "test_contextmanager_do_not_unchain_non_stopiteration_exceptions", "test_redirect_to_string_io", "test_contextmanager_as_decorator", "test_recursive", "test_nokeepref", "_create_contextmanager_attribs", "test_nullcontext", "test_exit_exception_chaining", "attribs", "test_no_result_from_enter", "raise_exc", "testWithCondition", "test_dont_reraise_RuntimeError", "first", "_expect_exc", "test", "test_contextmanager_except_stopiter", "gets_the_context_right", "test_contextdecorator", "suppress_exc", "test_exit_exception_chaining_reference", "test_exit_exception_non_suppressing", "test_exit_suppress", "test_excessive_nesting", "test_other_exception", "test_contextmanager_trap_yield_after_throw", "raise_nested", "test_exact_exception", "close", "method", "_expect_ok", "testWithSemaphore", "test_contextmanager_plain", "test_issue29692", "_suppress_exc", "whoo", "test_no_redirect_in_init", "test_no_exception", "__uxit__", "test_pop_all", "test_cm_is_reentrant", "test_instance_docs", "test_decorating_method", "testWithRLock", "test_no_args", "test_decorator", "baz", "boilerPlate", "__enter__", "test_contextmanager_no_reraise", "test_close", "test_exit_exception_chaining_suppress", "test_enter_result_is_target", "test_cm_is_reusable", "test_param_errors", "_exit", "whee", "test_exit_exception_with_existing_context", "decorate", "locked", "test_closing_error", "test_exit_raise", "test_exception_hierarchy", "test_contextdecorator_as_mixin", "test_closing", "test_multiple_exception_args", "testWithBoundedSemaphore", "test_contextmanager_finally"], "function_calls": ["closing", "object", "test", "nullcontext", "getattr", "reversed", "Example", "gets_the_context_right", "MissingExit", "RuntimeError", "StopIteration", "woohoo", "issubclass", "super", "second", "suppress", "a", "A", "attribs", "TestCM", "Exception", "open", "dict", "whee", "UniqueRuntimeError", "range", "setattr", "RaiseExc", "locked", "NameError", "C", "Test", "type", "mycontext", "recursive", "DefaultEnter", "UniqueException", "len", "b", "first", "test_issue29692", "ExitCM", "ZeroDivisionError", "whoo", "pow", "RaiseExcWithContext", "SuppressExc", "TypeError", "exec", "print"], "class_names": ["ContextManagerTestCase", "ManagerFromScratch", "NoEnter", "somecontext", "Example", "FileContextTestCase", "TestBaseExitStack", "TestRedirectStdout", "MissingExit", "A", "LockContextTestCase", "UniqueRuntimeError", "TestCM", "TestRedirectStderr", "TestRedirectStream", "ClosingTestCase", "RaiseExc", "C", "Test", "NoExit", "mycontext", "DefaultEnter", "TestAbstractContextManager", "UniqueException", "ExitCM", "SuppressExc", "RaiseExcWithContext", "NullcontextTestCase", "TestExitStack", "TestSuppress", "TestContextDecorator"], "class_method_calls": ["tempfile.mktemp", "kw.items", "threading.Lock", "es_ctx.enter_context", "context.catch", "self.assertEqual", "self.assertNotEqual", "_exit.__doc__", "self.assertIs", "closing.__doc__", "ex.__cause__", "self.assertRaises", "context.exc", "threading.BoundedSemaphore", "obj.__doc__", "self.a", "self.orig_stream", "SuppressExc.saved_details", "self.assertTrue", "exc.__context__", "inner_exc.__context__", "self.assertIsInstance", "f.getvalue", "result.append", "suppress.__doc__", "_exit.__name__", "self.redirect_stream", "io.StringIO", "self.c", "baz.__doc__", "stack.callback", "cm.__exit__", "lock.acquire", "self.assertIsNone", "test.c", "self._create_contextmanager_attribs", "unittest.TestCase", "self.assertFalse", "stack.enter_context", "err_ctx.exception", "test.method", "threading.Condition", "baz.foo", "self.check_exc", "context.started", "f.write", "ctx.__exit__", "test.a", "state.append", "ctx.__enter__", "test.b", "lock.release", "self.assertWarnsRegex", "stack._exit_callbacks", "self.assertWarns", "support.unlink", "lock.locked", "exc.__cause__", "ex.args", "unittest.main", "manager.__enter__", "threading.Semaphore", "support.requires_docstrings", "mycontext.__doc__", "e.args", "f.closed", "stack.push", "self.boilerPlate", "stack.pop_all", "self.assertIsNotNone", "self.assertRaisesRegex", "stack.close", "self.fail", "self.started", "self.b", "threading.RLock", "f.read", "lock._is_owned", "new_stack.close", "weakref.ref", "self.inner", "self.catch", "self.exit_stack", "self.outer", "baz.__name__", "self.exc"]}, "test_contextlib_async.py": {"libraries": ["unittest", "contextlib.asynccontextmanager", "test.test_contextlib.TestBaseExitStack", "contextlib.AbstractAsyncContextManager", "contextlib.AsyncExitStack", "test.support", "functools", "asyncio"], "function_names": ["decorate", "close", "_async_test", "_create_contextmanager_attribs", "run_coroutine", "test_exit_is_abstract", "setUp", "__enter__", "__exit__", "test_contextmanager_doc_attrib", "__init__", "test_contextmanager_attribs", "attribs", "wrapper", "test_structural_subclassing"], "function_calls": ["reversed", "AsyncExitStack", "gen", "MissingAexit", "RuntimeError", "StopIteration", "woohoo", "issubclass", "super", "attribs", "TestCM", "dict", "whee", "setattr", "ValueError", "type", "func", "DefaultEnter", "ExitCM", "ZeroDivisionError", "whoo", "StopAsyncIteration", "TypeError", "ctx"], "class_names": ["NoneAexit", "NoneAenter", "TestAsyncExitStack", "AsyncContextManagerTestCase", "ManagerFromScratch", "SyncAsyncExitStack", "ExitCM", "TestAbstractAsyncContextManager", "TestCM", "MissingAexit", "DefaultEnter"], "class_method_calls": ["self.assertIsInstance", "asyncio.set_event_loop", "asyncio.get_event_loop", "asyncio.ensure_future", "result.append", "self.assertIsNotNone", "kw.items", "baz.foo", "self.check_exc", "self.assertEqual", "loop.run_forever", "manager.__aenter__", "functools.wraps", "self.assertNotEqual", "_exit.__doc__", "ret.append", "_exit.__name__", "self.aclose", "self.assertIs", "f.add_done_callback", "stack.enter_async_context", "loop.close", "ctx.__aexit__", "state.append", "self.fail", "self.addCleanup", "asyncio.set_event_loop_policy", "self.subTest", "self.assertRaises", "stack._exit_callbacks", "self.assertWarns", "self.run_coroutine", "baz.__doc__", "f.result", "asyncio.new_event_loop", "loop.run_until_complete", "self.__aexit__", "self.assertIsNone", "unittest.main", "stack.push_async_exit", "stack.push_async_callback", "loop.stop", "self.exit_stack", "f.exception", "support.requires_docstrings", "e.args", "self.assertTrue", "exc.__context__", "self._create_contextmanager_attribs", "self.__aenter__", "unittest.TestCase", "ctx.__aenter__", "self.assertFalse", "inner_exc.__context__", "baz.__name__", "self.loop"]}, "test_copy.py": {"libraries": ["abc", "unittest", "operator.eq", "copy", "operator.le", "weakref", "operator.ne", "copyreg", "operator.lt", "operator.gt", "operator.ge"], "function_names": ["__reduce_ex__", "test_copy_copy", "test_deepcopy_reflexive_list", "test_copy_inst_getnewargs_ex", "__getstate__", "test_copy_atomic", "__init__", "_check_weakref", "test_reduce_5tuple", "test_copy_inst_getstate", "test_deepcopy_tuple_of_immutables", "test_copy_reduce_ex", "test_deepcopy_dict", "test_deepcopy_dont_memo_immutable", "test_copy_inst_getinitargs", "test_deepcopy_registry", "test_deepcopy_list_subclass", "test_deepcopy_memo", "__setitem__", "test_deepcopy_inst_getstate", "test_copy_weakref", "test_deepcopy_inst_getnewargs_ex", "m", "test_deepcopy_reflexive_inst", "test_copy_inst_copy", "pickle_C", "test_copy_frozenset", "test_deepcopy_tuple_subclass", "test_copy_inst_getstate_setstate", "test_deepcopy_empty_tuple", "test_getstate_exc", "test_deepcopy_weakref", "test_deepcopy_range", "test_deepcopy_function", "test_deepcopy_reduce_ex", "global_foo", "test_copy_dict", "test_deepcopy_keepalive", "__copy__", "f", "test_deepcopy_slots", "test_deepcopy_inst_getnewargs", "test_copy_weakvaluedict", "test_deepcopy_inst_getstate_setstate", "test_deepcopy_inst_deepcopy", "test_copy_weakkeydict", "__new__", "test_copy_reduce", "test_copy_bytearray", "__deepcopy__", "test_reconstruct_nostate", "test_deepcopy_basic", "test_deepcopy_bound_method", "test_deepcopy_list", "__reduce__", "test_deepcopy_deepcopy", "test_copy_list_subclass", "test_deepcopy_weakvaluedict", "test_reconstruct_state", "__getnewargs_ex__", "test_copy_inst_vanilla", "test_deepcopy_weakkeydict", "test_copy_function", "test_deepcopy_reflexive_tuple", "test_deepcopy_reduce", "test_copy_inst_getnewargs", "__setstate__", "test_copy_cant", "__getnewargs__", "test_reconstruct_reflexive", "test_reconstruct_state_setstate", "test_copy_tuple", "__getinitargs__", "test_reduce_4tuple", "test_deepcopy_reflexive_dict", "__eq__", "test_copy_registry", "test_copy_set", "test_copy_tuple_subclass", "test_deepcopy_cant", "test_deepcopy_inst_getinitargs", "test_deepcopy_atomic", "test_deepcopy_inst_vanilla", "test_copy_slots", "test_deepcopy_inst_setstate", "test_deepcopy_issubclass", "test_copy_inst_setstate", "test_copy_basic", "test_deepcopy_tuple", "_check_copy_weakdict", "__getattribute__", "test_deepcopy_dict_subclass", "test_copy_list", "test_reconstruct_string", "foo", "test_exceptions"], "function_calls": ["frozenset", "sorted", "id", "_dicttype", "AttributeError", "issubclass", "super", "Foo", "iter", "tuple", "dict", "range", "ValueError", "list", "C", "property", "set", "slice", "_copy", "EvilState", "I", "bytearray", "len", "bytes"], "class_names": ["Classic", "Foo", "C", "I", "NewStyle", "EvilState", "TestCopy", "Meta", "WithMetaclass"], "class_method_calls": ["copy.copy", "self.assertIsInstance", "self.__dict__", "v.items", "int.__new__", "self.assertEqual", "f.m", "self.assertNotEqual", "self._check_weakref", "g.b", "object.__getattribute__", "x.stop", "self.assertIs", "x._keys", "self.items", "d.keys", "self.fail", "name.startswith", "other.__dict__", "x.foo", "self.assertNotIn", "other.foo", "f.b", "c.append", "obj.foo", "copy.Error", "self.assertRaises", "weakref.WeakValueDictionary", "y._keys", "b.i", "f.__code__", "abc.ABCMeta", "copy.deepcopy", "self._check_copy_weakdict", "weakref.ref", "a.i", "self._keys", "d.i", "copyreg.pickle", "x.__class__", "self.assertIsNot", "unittest.main", "weakref.WeakKeyDictionary", "g.m", "y.foo", "y.__class__", "y.stop", "x.append", "self.foo", "object.__new__", "self.i", "copy.error", "self.assertTrue", "unittest.TestCase", "z.i", "x.i", "c.i"]}, "test_copyreg.py": {"libraries": ["copyreg", "copy", "unittest", "test.pickletester.ExtensionSaver"], "function_names": ["test_extension_registry", "test_slotnames", "test_class", "test_noncallable_reduce", "test_bool", "test_noncallable_constructor"], "function_calls": ["ExtensionSaver", "type"], "class_names": ["WithSingleString", "WithInherited", "WithoutSlots", "_WithLeadingUnderscoreAndPrivate", "CopyRegTestCase", "C", "WithPrivate", "___", "WithWeakref"], "class_method_calls": ["copy.copy", "copyreg.add_extension", "expected.sort", "result.sort", "copyreg._inverted_registry", "copyreg.pickle", "self.assertEqual", "self.assertNotIn", "copyreg._slotnames", "self.assertTrue", "copyreg._extension_cache", "copyreg.remove_extension", "e.restore", "unittest.TestCase", "copyreg._extension_registry", "unittest.main", "self.assertRaises"]}, "test_coroutines.py": {"libraries": ["unittest", "types", "copy", "_testcapi.awaitType", "contextlib", "inspect", "sys", "warnings", "pickle", "test.support.script_helper.assert_python_ok", "test.support"], "function_names": ["test_await_6", "test_await_12", "__aexit__", "test_comp_4", "test_func_8", "test_await_2", "test_with_4", "test_func_15", "test_with_2", "test_origin_tracking_warning", "test_with_12", "test_origin_tracking", "__init__", "__aiter__", "test_await_8", "test_comp_4_2", "test_func_14", "test_await_4", "__iter__", "silence_coro_gc", "test_with_11", "test_for_assign_raising_stop_async_iteration_2", "__setitem__", "test_with_3", "test_for_tuple", "test_func_4", "test_comp_7", "test_func_17", "test_with_13", "test_for_4", "__exit__", "test_await_1", "test_await_13", "test_for_3", "test_func_7", "test_await_10", "test_comp_10", "test_tp_await_2", "test_func_10", "test_asyncio_1", "__await__", "run_async", "a", "test_unawaited_warning_during_shutdown", "test_for_6", "test_for_stop_iteration", "a2", "test_func_11", "test_comp_1", "test_with_5", "test_for_8", "nested", "test_for_1", "test_func_6", "test_for_assign_raising_stop_async_iteration", "test_await_3", "run_async__await__", "test_with_10", "test_for_7", "__anext__", "test_cr_await", "test_gen_1", "test_comp_3", "test_oneline_defs", "test_unawaited_warning_when_module_broken", "test_func_9", "test_badsyntax_1", "test_await_16", "test_with_6", "test_await_14", "here", "test_pickle", "test_comp_5", "test_comp_8", "test_corotype_1", "test_copy", "test_for_2", "test_for_11", "test_await_7", "wrap", "test_func_16", "test_func_2", "test_tp_await_1", "bar", "test_func_19", "test_with_7", "test_badsyntax_2", "test_func_3", "check", "test_func_1", "gen", "ident", "__aenter__", "test_comp_6", "test_func_13", "test_badsyntax_3", "test_coro_wrapper_send_tuple", "test_await_11", "__enter__", "test_fatal_coro_warning", "test_coro_wrapper_send_stop_iterator", "test_func_12", "test_await_5", "test_func_5", "nop", "test_with_1", "test_await_15", "test_badsyntax_4", "test_func_18", "test_tp_await_3", "test_comp_9", "test_await_9", "test_with_8", "test_comp_2", "test_with_9", "a1", "foo"], "function_calls": ["assert_python_ok", "corofn", "run_dict1", "test1", "iter", "Exception", "coro1", "reader", "dir", "enumerate", "BadTarget", "len", "AsyncYield", "StopAsyncIteration", "main", "run_for", "exec", "test3", "BadIterable", "CM", "Awaitable", "coroutine", "run_async", "str", "a", "foo2", "list", "a2", "run_set2", "run_gen", "spammer", "AI", "source", "f", "b", "compile", "FutureLike", "nested", "coro", "run_async__await__", "at", "AIter", "AsyncYieldFrom", "Iterable", "StopIteration", "isinstance", "F", "tuple", "run_dict", "range", "Wrapper", "badpairs", "run_list", "func", "I", "hasattr", "wrap", "bar", "sum", "coro2", "c", "print", "check", "baz", "gen", "ident", "repr", "waiter", "ValueError", "run_set", "nop", "next", "AsyncIter", "Manager", "bool", "read", "test2", "send", "g", "run_dict2", "a1", "foo"], "class_names": ["AIter", "BadIterable", "AsyncYieldFrom", "Iterable", "CAPITest", "CM", "Awaitable", "F", "OriginTrackingTest", "Done", "MyException", "UnawaitedWarningDuringShutdownTest", "AI", "CoroutineTest", "Wrapper", "AsyncIter", "CoroAsyncIOCompatTest", "Manager", "DB", "I", "AsyncBadSyntaxTest", "BadTarget", "Marker", "AsyncYield", "FutureLike", "TokenizerRegrTest"], "class_method_calls": ["c.send", "bar.__code__", "self.assertEqual", "support.gc_collect", "types.GeneratorType", "warnings.filterwarnings", "c.throw", "asyncio.sleep", "me.send", "sys.get_coroutine_origin_tracking_depth", "self.assertIs", "coro_b.cr_await", "cm.unraisable", "inspect.iscoroutinefunction", "loop.close", "exc.args", "warnings.catch_warnings", "coro.throw", "self.assertRaises", "coro.__await__", "support.catch_unraisable_exception", "exc_type.__name__", "support.check_warnings", "pickle.HIGHEST_PROTOCOL", "err.__cause__", "f.send", "c.name", "ct.close", "self.i", "self.assertTrue", "exc.__context__", "gen.asend", "self.assertIsInstance", "asyncio.set_event_loop", "result.append", "ct.__name__", "cm.warning", "buffer.append", "support.import_module", "cm.exception", "inspect.CORO_CREATED", "cm.__class__", "asyncio.set_event_loop_policy", "aw.throw", "self.subTest", "self.assertRegex", "self.obj", "self.here", "asyncio.new_event_loop", "a.name", "contextlib.contextmanager", "self.assertIsNone", "pickle.PicklingError", "inspect.CO_GENERATOR", "unittest.TestCase", "types.CoroutineType", "self.assertFalse", "copy.copy", "corofn.__qualname__", "sys.set_coroutine_origin_tracking_depth", "self.value", "b.name", "DB.b", "inspect.getframeinfo", "foo.__code__", "it.send", "c.exception", "coro.cr_origin", "buf.append", "contextlib.closing", "reader.send", "self.assertWarnsRegex", "warnings.simplefilter", "it.close", "self.assertWarns", "self.coro", "ct.__dict__", "loop.run_until_complete", "ex.args", "unittest.main", "c.close", "inspect.CORO_SUSPENDED", "inspect.CORO_CLOSED", "info.lineno", "types.coroutine", "ct.send", "coro.close", "inspect.CORO_RUNNING", "future.__await__", "self.assertRaisesRegex", "inspect.currentframe", "self.name", "aw.send", "self.assertIn", "coro.send", "coro_b.send", "inspect.getcoroutinestate", "ct.throw", "self.fail", "inspect.CO_COROUTINE", "coro.__class__", "result.__context__", "f.cr_code", "sys.getrefcount", "it.throw", "reader.throw", "warnings._warn_unawaited_coroutine", "info.filename", "aw.close", "support.cpython_only", "pickle.dumps"]}, "test_cprofile.py": {"libraries": ["unittest", "cProfile", "test.support", "_lsprof", "test.test_profile.regenerate_expected_output", "sys", "test.test_profile.ProfileTest", "test.support.script_helper.assert_python_failure"], "function_names": ["test_profile_enable_disable", "get_expected_output", "test_profile_as_context_manager", "test_sort", "test_bad_counter_during_dealloc", "main"], "function_calls": ["regenerate_expected_output", "main", "assert_python_failure"], "class_names": ["CProfileTest", "TestCommandLine"], "class_method_calls": ["self.assertEqual", "self.profilerclass", "self.assertIs", "cm.unraisable", "cProfile.Profile", "_lsprof.Profiler", "self.assertIn", "self.addCleanup", "obj.enable", "support.catch_unraisable_exception", "prof.enable", "obj.clear", "self.assertGreater", "unittest.main", "prof.disable", "sys.getprofile", "obj.disable", "sys.argv", "unittest.TestCase"]}, "test_crashers.py": {"libraries": ["unittest", "os.path", "test.support", "test.support.script_helper.assert_python_failure", "glob"], "function_names": ["test_crashers_crash", "tearDownModule"], "function_calls": ["assert_python_failure", "print"], "class_names": ["CrasherTest"], "class_method_calls": ["os.path", "glob.escape", "unittest.skip", "unittest.TestCase", "test.support", "glob.glob", "unittest.main"]}, "test_crypt.py": {"libraries": ["sys", "crypt", "unittest"], "function_names": ["test_crypt", "test_blowfish_rounds", "test_invalid_rounds", "test_import_failure_message", "test_methods", "test_sha2_rounds", "test_salt", "test_saltedcrypt"], "function_calls": ["len", "str", "range"], "class_names": ["TestWhyCryptDidNotImport", "CryptTestCase"], "class_method_calls": ["sys.platform", "crypt.METHOD_CRYPT", "unittest.skipUnless", "self.assertEqual", "crypt.METHOD_MD5", "method.total_size", "crypt.methods", "crypt.METHOD_BLOWFISH", "self.assertRaisesRegex", "unittest.SkipTest", "self.assertIn", "method.ident", "self.assertRaises", "unittest.skipIf", "crypt.crypt", "crypt.METHOD_SHA256", "method.salt_chars", "unittest.main", "crypt._saltchars", "crypt.mksalt", "self.assertTrue", "crypt.METHOD_SHA512", "unittest.TestCase"]}, "test_csv.py": {"libraries": ["unittest", "_testcapi", "copy", "gc", "itertools.permutations", "tempfile.TemporaryFile", "csv", "array", "sys", "itertools", "pickle", "io.StringIO", "test.support", "string", "collections.OrderedDict", "textwrap.dedent"], "function_names": ["test_quotes", "test_writeheader_return_value", "test_write_fields_not_in_fieldnames", "test_doublequote", "_read_test", "compare_dialect_123", "test_write_simple_dict", "_test_arg_valid", "_write_error_test", "test_ordering_for_the_dict_reader_and_writer", "test_bad_dialect", "test_single_quoted_quote", "test_read_short", "test_writer_dialect_attrs", "readerAssertEqual", "__str__", "__iter__", "test_write", "test_space_dialect", "test_ordered_dict_reader", "test_invalid_chars", "test_roundtrip_escaped_unquoted_newlines", "test_read_long", "test_read_linenum", "test_space_and_quote", "test_read_oddinputs", "test_dubious_quote", "test_unicode_write", "test_writerows_legacy_strings", "test_delimiters", "test_register_kwargs", "test_simple_writer", "test_quotes_and_more", "test_read_multi", "test_read_escape_fieldsep", "test_write_bigfield", "test_writerows", "_test_kw_attrs", "test_has_header_regex_special_delimiter", "test_write_multiple_dict_rows", "test_float_write", "test_write_quoting", "test_create_read", "test_inline_quote", "test_double_write", "test_writer_kw_attrs", "test_simple", "writerAssertEqual", "test_quoted_quotes", "test_int_write", "test_read_long_with_rest", "test_read_eof", "test_quoted_nl", "test_typo_in_extrasaction_raises_error", "test_read", "__getitem__", "create_invalid", "test_inline_quotes", "test_lineterminator", "test_registry", "test_create_write", "test_writer_attrs", "test_simple_reader", "test_singlequoted_left_empty", "test_quoted_quote", "test_reader_dialect_attrs", "test_read_quoting", "test_reader_attrs", "test_read_dict_no_fieldnames", "test_write_escape_fieldsep", "test_dialect_apply", "test_write_escape", "test_writerows_with_none", "test_quote_fieldsep", "test_pickle", "test_guess_quote_and_delimiter", "test_quote_and_quote", "test_read_escape", "test_copy", "test_writerows_errors", "test_reader_arg_valid", "test_read_long_with_rest_no_fieldnames", "test_incomplete_dialect", "test_escape_fieldsep", "test_read_bigfield", "test_write_field_not_in_field_names_ignore", "test_read_dict_fields", "_test_dialect_attrs", "_test_default_attrs", "test_singlequoted_right_empty", "test_blankline", "test_quoted", "test_quoting", "test_null", "test_read_dict_fieldnames_chain", "test_read_dict_fieldnames_from_file", "test__all__", "test_char_write", "test_singlequoted", "test_write_field_not_in_field_names_raise", "test_lone_quote", "test_delimiter", "test_newlines", "test_write_iterable", "test_sniff", "test_single_writer", "test_write_arg_valid", "test_roundtrip_quoteed_newlines", "test_read_with_blanks", "test_unicode_read", "__len__", "test_writer_arg_valid", "test_write_no_fields", "test_has_header", "test_empty_fields", "test_reader_kw_attrs", "write", "_write_test", "test_registry_badargs", "test_read_semi_sep", "test_read_eol", "test_single"], "function_calls": ["sorted", "dedent", "BadIterable", "NUL", "space", "BadList", "mydialect", "ctor", "iter", "str", "testB", "tuple", "StringIO", "dict", "range", "setattr", "EscapedExcel", "list", "BrokenFile", "QuotedEscapedExcel", "set", "TemporaryFile", "next", "enumerate", "OrderedDict", "hasattr", "BadWriter", "len", "BadItem", "permutations"], "class_names": ["Test_Csv", "BadIterable", "TestEscapedExcel", "NUL", "space", "TestArrayWrites", "BadList", "TestDialectValidity", "TestQuotedEscapedExcel", "mydialect", "testB", "dialect", "TestLeaks", "TestDialectRegistry", "EscapedExcel", "testA", "TestCsvBase", "BrokenFile", "myexceltsv", "QuotedEscapedExcel", "BadWriter", "testUni", "TestDialectUnix", "testC", "BadItem", "TestDialectExcel", "KeyOrderingTest", "TestSniffer", "TestDictFields", "MiscTestCase", "TestUnicode"], "class_method_calls": ["self._write_error_test", "self.sample7", "csv.QUOTE_NONNUMERIC", "unittest.skipUnless", "self._test_default_attrs", "self.assertEqual", "self.assertIs", "self.sample9", "dialect.doublequote", "resultset.add", "mydialect.delimiter", "self._write_test", "mydialect.lineterminator", "self.assertRaises", "mydialect.doublequote", "csv.writer", "pickle.HIGHEST_PROTOCOL", "string.ascii_letters", "self._test_arg_valid", "d.lineterminator", "self.sample5", "self.assertTrue", "writer.dialect", "mydialect.quotechar", "self.sample6", "cm.exception", "cx.exception", "d.doublequote", "self.compare_dialect_123", "self.assertNotIn", "dialect.quotechar", "d.quoting", "csv.Error", "self.subTest", "csv.QUOTE_MINIMAL", "dialect.skipinitialspace", "self._test_kw_attrs", "sniffer.sniff", "csv.excel", "self.dialect", "gc.garbage", "sniffer.has_header", "array.array", "writer.writerow", "fileobj.write", "csv.DictWriter", "gc.collect", "unittest.TestCase", "self.assertFalse", "dw.writeheader", "self.sample1", "mydialect.quoting", "copy.copy", "self.assertLess", "self._test_dialect_attrs", "self.sample2", "obj.dialect", "csv.Dialect", "self.names", "reader.fieldnames", "self.sample3", "self.addCleanup", "itertools.chain", "r.line_num", "self.sample4", "unittest.main", "expected_dialects.sort", "csv.DictReader", "csv.Sniffer", "self.header1", "csv.get_dialect", "fileobj.read", "dialect.delimiter", "csv.list_dialects", "dr.fieldnames", "csv.reader", "support.check__all__", "writer.writeheader", "csv.QUOTE_NONE", "fileobject.seek", "sys.gettotalrefcount", "self.readerAssertEqual", "self.header2", "self.writerAssertEqual", "self.assertIn", "fileobj.getvalue", "csv.register_dialect", "self._read_test", "d.quotechar", "_testcapi.unicode_legacy_string", "csv.unregister_dialect", "d.delimiter", "csv.QUOTE_ALL", "fileobj.seek", "csv.field_size_limit", "self.sample8", "writer.writerows", "fileobj.readline", "support.cpython_only", "pickle.dumps"]}, "test_curses.py": {"libraries": ["unittest", "test.support.SaveSignals", "string", "test.support.requires", "inspect", "codecs", "test.support.import_module", "sys", "tempfile", "test.support.verbose", "os", "functools", "curses.panel"], "function_names": ["test_userptr_without_set", "test_new_curses_panel", "test_init_pair", "test_attributes", "test_read_from_window", "test_refresh", "test_enclose", "test_color_attrs", "test_clear", "test_has_key", "test_ctrl", "test_getsyx", "test_prog_mode", "test_insert_delete", "test_resizeterm", "test_issue13051", "test_ungetch", "test_filter", "test_scroll", "test_pair_content", "requires_curses_window_meth", "test_background", "test_color_content", "test_move_cursor", "requires_colors", "test_resize", "test_unget_wch", "test_ncurses_version", "test_beep", "test_alt", "test_flash", "__del__", "test_init_color", "test_userptr_memory_leak", "requires_curses_func", "test_output_character", "test_is_term_resized", "test_endwin", "test_update_lines_cols", "test_resize_term", "setUp", "bad_colors", "test_input_options", "test_controlnames", "test_unctrl", "test_getch", "test_encoding", "test_issue21088", "test_start_color", "setUpClass", "test_borders_and_lines", "test_overlay", "test_env_queries", "lorem_ipsum", "test_getstr", "deco", "test_use_env", "check", "test_chgat", "test_misc_module_funcs", "test_has_colors", "test_userptr_segfault", "test_refresh_control", "test_issue6243", "test_output_string_embedded_null_chars", "test_terminfo", "test_ascii", "test_getmouse", "get_pair_limit", "test_create_windows", "test_output_string", "test_ctypes", "test_typeahead", "test_keyname", "bad_pairs", "wrapped", "test_putwin", "test_use_default_colors", "test_output_options", "test_curs_set"], "function_calls": ["check", "object", "min", "test", "SaveSignals", "getattr", "repr", "unctrl", "A", "ascii", "open", "alt", "range", "type", "func", "enumerate", "requires_curses_func", "ctrl", "hasattr", "len", "chr", "import_module", "bytes", "lorem_ipsum", "requires_curses_window_meth", "requires", "ord", "print"], "class_names": ["A", "TestAscii", "MiscTests", "TestCurses"], "class_method_calls": ["curses.nonl", "unittest.skipUnless", "curses.COLORS", "self.assertEqual", "win.scroll", "self.assertNotEqual", "win.clrtoeol", "self.assertGreaterEqual", "self.isatty", "win.is_wintouched", "curses.has_ic", "sys.stdout", "win2.touchwin", "curses.use_env", "self.assertIs", "win.insertln", "win.getmaxyx", "win.putwin", "win2.syncok", "p.set_userptr", "stdscr.encoding", "win.border", "curses.filter", "win2.syncup", "stdscr.nodelay", "stdscr.setscrreg", "curses.napms", "curses.start_color", "self.assertRaises", "curses.A_BLINK", "win.redrawln", "curses.mouseinterval", "stdscr.instr", "curses.endwin", "stdscr.refresh", "stdscr.insstr", "os.close", "curses.curs_set", "curses.use_default_colors", "curses.longname", "curses.textpad", "curses.COLOR_WHITE", "string.punctuation", "curses.setupterm", "stdscr.untouchwin", "stdscr.get_wch", "b.isalnum", "curses.doupdate", "sys.stderr", "p.userptr", "curses.newpad", "self.assertTrue", "curses.init_color", "v.patch", "win.chgat", "stdscr.subwin", "win2.addch", "curses.getwin", "self.assertIsInstance", "curses.has_key", "stdscr.addstr", "curses.echo", "win.cursyncup", "curses.killchar", "win.move", "curses.ungetmouse", "functools.wraps", "curses.nocbreak", "curses.flash", "curses.noqiflush", "curses.baudrate", "curses.panel", "win3.getmaxyx", "unittest.SkipTest", "self.save_signals", "self.output", "box._insert_printable_char", "win3.getbegyx", "stdscr.is_wintouched", "s.encode", "curses.isendwin", "b.isupper", "curses.ascii", "stdscr.timeout", "win2.is_wintouched", "curses.nl", "curses.keyname", "win2.mvderwin", "self.subTest", "f.seek", "stdscr.getyx", "srcwin.overlay", "curses.tigetflag", "stdscr.keypad", "curses.meta", "curses.intrflush", "win.deleteln", "stdscr.echochar", "stdscr.insnstr", "ch.encode", "self.assertIsNone", "v.major", "curses.typeahead", "win.getbegyx", "curses.COLOR_BLACK", "curses.cbreak", "win.getyx", "inspect.signature", "win.box", "tmp.fileno", "unittest.TestCase", "win.delch", "self.assertFalse", "b.isspace", "curses.noraw", "curses.is_term_resized", "win.vline", "stdscr.move", "sys.platform", "b.isalpha", "curses.reset_prog_mode", "curses.update_lines_cols", "stdscr.immedok", "win.getparyx", "curses.unget_wch", "curses.LINES", "win2.untouchwin", "os.dup2", "curses.pair_content", "b.isdigit", "win.inch", "srcwin.overwrite", "win.bkgdset", "sys.maxunicode", "win.scrollok", "win.bkgd", "tempfile.TemporaryFile", "self.addCleanup", "curses.tparm", "curses.A_UNDERLINE", "win.addstr", "curses.error", "curses.beep", "win.erase", "tmp.close", "stdscr.inch", "stdscr.addch", "curses.A_STANDOUT", "curses.COLS", "win3.mvderwin", "stdscr.clearok", "func.__qualname__", "stdscr.is_linetouched", "curses.erasechar", "dstwin.instr", "win.attroff", "os.environ", "curses.initscr", "curses.termname", "unittest.main", "stdscr.idlok", "curses.A_REVERSE", "sys.__stdin__", "win.standend", "win.getstr", "win2.getbegyx", "curses.pair_number", "curses.qiflush", "win.clear", "win.resize", "stdscr.idcok", "curses.termattrs", "win.insdelln", "win.subwin", "curses.def_prog_mode", "win2.getmaxyx", "curses.getsyx", "self.stdscr", "os.dup", "win.enclose", "stdscr.touchwin", "curses.color_pair", "string.hexdigits", "stdscr.addnstr", "win.untouchwin", "stdscr.notimeout", "dstwin.addstr", "c.encode", "win3.getparyx", "curses.tigetnum", "curses.init_pair", "curses.getmouse", "curses.savetty", "curses.newwin", "curses.COLOR_PAIRS", "curses.has_colors", "curses.has_il", "curses.A_BOLD", "win.derwin", "curses.putp", "self.assertIn", "curses.tigetstr", "self.fail", "v.minor", "curses.setsyx", "self.bad_colors", "win.mvwin", "win.refresh", "b.islower", "curses.color_content", "win.instr", "curses.raw", "unittest.skipIf", "curses.resetty", "curses.halfdelay", "win.noutrefresh", "stdscr.scrollok", "win.attrset", "curses.ncurses_version", "codecs.lookup", "win.redrawwin", "curses.mousemask", "win.clrtobot", "sys.getrefcount", "sys.__stderr__", "curses.delay_output", "win2.getparyx", "curses.flushinp", "curses.resize_term", "self.get_pair_limit", "stdscr.leaveok", "curses.noecho", "curses.BUTTON1_PRESSED", "win2.syncdown", "self.skipTest", "win.hline", "curses.resizeterm", "panel.set_userptr", "win.standout", "stdscr.touchline", "self.bad_pairs", "curses.ungetch", "curses.unctrl", "win.attron", "win.getch", "win.getbkgd", "curses.can_change_color", "sys.__stdout__"]}, "test_dataclasses.py": {"libraries": ["typing.Optional", "dataclasses", "typing.Dict", "typing.get_type_hints", "typing.TypeVar", "unittest", "collections.deque", "typing.ClassVar", "dataclasses.*", "typing.Generic", "typing", "builtins", "test.dataclass_module_1", "functools.total_ordering", "inspect", "typing.Tuple", "test.dataclass_module_2", "typing.Any", "test.dataclass_module_1_str", "test.dataclass_module_2_str", "collections.OrderedDict", "collections.namedtuple", "unittest.mock.Mock", "pickle", "typing.List", "test.dataclass_textanno", "typing.Union"], "function_names": ["test_isnt_initvar", "test_dataclassses_pickleable", "test_one_field_no_default", "test_hash_no_args", "test_class_var", "test_underscore_field_names", "test_funny_class_names_names", "test_derived_added_field", "test_field_named_object", "test_class_var_no_default", "test_inherit_nonfrozen_from_frozen", "test_initvar_is_specified", "test_is_dataclass_when_getattr_always_returns", "test_no_mutate_namespace", "test_duplicate_field_names", "test_not_in_compare", "test_class_var_with_default", "__init__", "test_class_var_default_factory", "test_simple_compare", "test_helper_astuple_builtin_containers", "test_field_named_like_builtin_frozen", "new_method", "test_initvar", "setattr", "test_invalid_field_name", "non_bool", "test_dont_include_other_annotations", "test_helper_asdict_builtin_object_containers", "test_inherit", "test_docstring_one_field_with_default", "test_base_dataclass", "__gt__", "test_generic_dynamic", "test_initvar_with_default_value", "test_existing_docstring_not_overridden", "test_not_in_repr", "test_classvar", "test_docstring_list_field", "test_helper_asdict_builtin_containers", "test_functools_total_ordering", "test_1_field_compare", "test_field_without_annotation_but_annotation_in_base", "test_init_false_no_default", "test_0_field_compare", "test_inherit_frozen_from_nonfrozen", "test_init_var_with_default", "test_default_factory", "test_helper_astuple", "test_helper_asdict_nested", "test_overwriting_init", "test_overwriting_repr", "test_keyword_field_names", "test_no_init", "test_helper_asdict_namedtuple", "test_post_init_staticmethod", "test_field_metadata_custom_mapping", "test_base", "test_recursive_repr_indirection", "test_helper_astuple_copy_values", "test_missing_default", "test_docstring_two_fields", "__setattr__", "test_frozen_hash", "test_dynamic_class_creation_using_field", "test_helper_fields_with_class_instance", "test_helper_astuple_builtin_object_containers", "test_class_var_frozen", "test_field_metadata_default", "test_field_default_default_factory_error", "test_docstring_one_field_with_default_none", "test_helper_astuple_factory", "test_field_named_object_frozen", "test_class_attrs", "test_not_other_dataclass", "test_post_init_super", "__delattr__", "test_field_no_default", "test_class_marker", "test_field_repr", "test_hash_field_rules", "test_simple", "test_inherit_nonfrozen_from_empty", "test_1_field_hash", "test_no_types", "test_missing_default_factory", "test_default_factory_with_no_init", "test_function_annotations", "test_init_var_default_factory", "test_non_descriptor", "test_unsafe_hash", "test_no_order", "test_generic_dataclasses", "test_named_init_params", "__getitem__", "test_recursive_repr_misc_attrs", "test_disallowed_mutable_defaults", "test", "test_field_named_like_builtin", "test_docstring_no_fields", "test_compare_subclasses", "test_helper_astuple_nested", "__repr__", "from_file", "test_helper_asdict_copy_values", "test_default_factory_derived", "test_docstring_list_field_with_default_factory", "test_field_without_annotation", "test_base_has_init", "test_other_params", "test_init_var", "test_helper_fields_exception", "test_no_fields", "test_overwriting_eq", "__get__", "test_post_init_classmethod", "test_docstring_one_field", "test_overwriting_frozen", "test_hash_rules", "test_helper_asdict_namedtuple_key", "test_helper_astuple_raises_on_classes", "test_invalid_object", "test_eq_order", "test_init_var_preserve_type", "test_overwriting_order", "post_init", "test_docstring_three_fields", "test_not_tuple", "test_frozen", "test_helper_asdict_factory", "test_init_var_no_default", "test_deliberately_mutable_defaults", "test_inherit_from_normal_class", "test_alternate_classmethod_constructor", "test_is_dataclass", "bar", "test_no_options", "test_items_in_dicts", "test_field_named_self", "test_no_eq", "test_0_field_hash", "test_default_factory_not_called_if_value_given", "__getattr__", "__le__", "test_helper_astuple_namedtuple", "test_generic_extending", "test_post_init", "test_repr", "__eq__", "nt", "test_inherit_nonfrozen_from_empty_frozen", "__ge__", "test_isnt_classvar", "test_helper_asdict", "test_missing_repr", "test_field_order", "test_dynamic_class_creation", "test_field_default", "test_set_name", "__set_name__", "test_non_frozen_normal_derived", "test_lookup_on_instance", "test_docstring_deque_field_with_default_factory", "test_field_metadata_mapping", "__lt__", "test_overwrite_hash", "test_invalid_type_specification", "test_init_in_order", "test_text_annotations", "test_helper_asdict_raises_on_classes", "test_recursive_repr", "test_recursive_repr_indirection_two", "test_init_var_inheritance", "test_recursive_repr_two_attrs", "__len__", "test_no_fields_but_member_variable", "validate_class", "my_a", "test_docstring_deque_field", "test_helper_asdict_namedtuple_derived", "test_lookup_on_class", "test_intermediate_non_dataclass", "test_classvar_module_level_import", "test_non_identifier_field_names", "__post_init__", "test_classvar_default_factory", "assertDocStrEqual", "test_eq_only", "test_no_repr", "__hash__", "test_two_fields_one_default", "test_field_without_annotation_but_annotation_in_base_not_dataclass", "test_overwrite_fields_in_derived_class", "foo"], "function_calls": ["LabeledBox", "object", "Base", "field", "test", "sorted", "replace", "fn", "getattr", "T", "Point", "Mock", "cls", "cls1", "Bar", "vars", "GroupList", "repr", "R", "Q", "super", "is_dataclass", "GroupDict", "F", "B", "iter", "Point3D", "Foo", "dataclass", "A", "Baz", "TypeVar", "hash", "asdict", "Mutable", "NT", "CustomError", "non_bool", "range", "astuple", "Subclass", "list", "Parent", "validate_class", "NotDataClass", "C", "Derived", "C1", "Date", "Alias", "UserId", "set", "next", "namedtuple", "type", "fields", "typ", "enumerate", "Point3Dv1", "OrderedDict", "D", "get_type_hints", "GroupTuple", "hasattr", "len", "make_dataclass", "P", "SimpleNameSpace", "User", "Child", "E", "S"], "class_names": ["LabeledBox", "Base", "TestRepr", "T", "Point", "TestDescriptors", "C0", "Base2", "Bar", "TestFrozen", "GroupList", "R", "Base1", "TestOrdering", "TestSlots", "Q", "TestStringAnnotations", "Foo", "GroupDict", "B", "Point3D", "F", "Baz", "A", "Mutable", "TestHash", "CustomError", "TestInit", "TestMakeDataclass", "Subclass", "Parent", "TestEq", "NotDataClass", "C", "Date", "C1", "UserId", "DataDerived", "Derived", "Point3Dv1", "D", "I", "GroupTuple", "TestFieldNoAnnotation", "TestReplace", "NonDataDerived", "P", "TestCase", "User", "Child", "SimpleNameSpace", "TestDocString", "E", "S"], "class_method_calls": ["c.z", "d.y", "calls.append", "c.add_one", "self.__dict__", "param.annotation", "cls.flag", "b.__dataclass_fields__", "self.assertEqual", "self.assertNotEqual", "d.d", "self.assertGreaterEqual", "self.assertIs", "c.new_method", "c.a", "C.__annotations__", "sample.x", "self.assertRaises", "cls.__annotations__", "q.y", "d.z", "int_field.name", "C.e", "pickle.HIGHEST_PROTOCOL", "cls.__init__", "self.a", "d.x", "C.__setattr__", "C.__hash__", "self.i", "C.x", "self.assertTrue", "d.e", "c1.z", "c.i", "c.y", "self.assertIsInstance", "e.f", "C.E", "f.name", "m.USING_STRINGS", "dataclass_textanno.Foo", "C.c", "inspect.Parameter", "c.x", "C.z", "C.__dict__", "object.__hash__", "another_new_sample.y", "self.assertNotIn", "self.y", "other.i", "self.subTest", "c.e", "m.IV", "c0.x", "c.w", "self.x", "pickle.loads", "o2.x", "self.assertIsNone", "self.assertIsNot", "box.content", "s.x", "d.__set_name__", "param.default", "c.c", "c1.x", "c.not_iv4", "d.f", "inspect.signature", "c.self", "o1.x", "u.id", "unittest.TestCase", "self.assertFalse", "builtins.__dict__", "self.assertLess", "D.__set_name__", "another_new_sample.x", "new_sample.x", "C.y", "m.CV", "C.__init__", "self.assertLessEqual", "sig.parameters", "o.x", "C.flag", "param.name", "self.z", "s.y", "a.replace", "c.t", "c.__dict__", "dataclass_textanno.Bar", "self.l", "box.label", "self.assertWarns", "c.cv0", "c.g", "c.b", "cls.__name__", "self.assertGreater", "unittest.main", "C.__doc__", "D.__dict__", "self.assertIsNotNone", "b.replace", "c.s", "param.kind", "sample.y", "C.from_file", "self.assertRaisesRegex", "c1.t", "c0.y", "self.name", "C.D", "C.__name__", "self.assertIn", "factory.call_count", "C.t", "o.y", "c1.y", "b.startswith", "d.j", "C.d", "d.i", "signature.parameters", "f.default", "signature.return_annotation", "Child.__mro__", "s.cached", "self.assertDocStrEqual", "new_sample.y", "pickle.dumps", "c.f", "c.object"]}, "test_datetime.py": {"libraries": ["unittest", "sys", "test.support.run_unittest", "test.support.import_fresh_module"], "function_names": ["setUpClass", "tearDownClass", "test_main"], "function_calls": ["isinstance", "test_main", "issubclass", "sorted", "import_fresh_module", "cls", "set", "type", "zip", "run_unittest"], "class_names": [], "class_method_calls": ["cls_._save_sys_modules", "cls.tearDownClass", "test_classes.extend", "module._strptime", "cls.__name__", "unittest.TestSuite", "module.datetime_module", "test_classes.append", "all_test_classes.extend", "cls.setUpClass", "sys.modules", "unittest.TestCase", "cls.__qualname__", "module.__dict__"]}, "test_dbm.py": {"libraries": ["unittest", "test.support", "dbm.ndbm", "glob"], "function_names": ["test_anydbm_not_existing", "setUp", "test_anydbm_modification", "init_db", "test_empty_value", "keys_helper", "delete_files", "test_error", "test_whichdb_ndbm", "test_anydbm_access", "dbm_iterator", "test_keys", "load_tests", "test_anydbm_creation", "test_anydbm_creation_n_file_exists_with_invalid_contents", "read_helper", "tearDown", "test_whichdb", "test_anydbm_keys", "test_anydbm_read"], "function_calls": ["list", "len", "issubclass", "__import__", "sorted", "getattr", "delete_files", "type", "dbm_iterator", "open"], "class_names": ["AnyDBMTestCase", "WhichDBTestCase"], "class_method_calls": ["self._dict", "k.decode", "mod.__name__", "f.setdefault", "key.encode", "unittest.skipUnless", "module.open", "self.assertEqual", "test.support", "self.assertIn", "self.addCleanup", "self.assertNotIn", "self.read_helper", "dbm.open", "f.keys", "dbm._names", "glob.glob", "self.dbm", "dbm._defaultmod", "self.assertRaises", "classes.append", "k.encode", "unittest.makeSuite", "self.keys_helper", "self.assertIsNone", "dbm._modules", "unittest.main", "module.__name__", "self.filename", "self.d", "glob.escape", "f.get", "self.init_db", "dbm.error", "self.skipTest", "self.assertTrue", "f.close", "unittest.TestCase", "tests.addTests", "self.module"]}, "test_dbm_dumb.py": {"libraries": ["unittest", "io", "dbm.dumb", "operator", "contextlib", "functools.partial", "random", "test.support", "os", "stat"], "function_names": ["test_dumbdbm_read", "test_dumbdbm_keys", "test_create_new", "setUp", "test_check_closed", "init_db", "_delete_files", "test_write_write_read", "keys_helper", "test_readonly_files", "test_invalid_flag", "test_context_manager", "test_random", "test_close_twice", "read_helper", "test_dumbdbm_modification", "tearDown", "test_missing_index", "test_dumbdbm_creation_mode", "test_dumbdbm_creation", "test_write_contains", "test_line_endings", "test_eval", "test_nonascii_filename", "test_str_write_contains", "test_missing_data", "test_str_read"], "function_calls": ["list", "_delete_files", "sorted", "partial", "meth", "str", "open", "range", "hasattr"], "class_names": ["DumbDBMTestCase"], "class_method_calls": ["self._dict", "file.read", "stat.S_IMODE", "operator.setitem", "f.setdefault", "unittest.skipUnless", "self.assertEqual", "operator.delitem", "cm.exception", "stat.S_IXUSR", "data.replace", "self.assertRaisesRegex", "operator.methodcaller", "d.items", "st.st_mode", "io.open", "support.TESTFN", "self.assertIn", "db.keys", "support.TESTFN_NONASCII", "self.addCleanup", "dumbdbm.open", "os.umask", "support.temp_dir", "operator.getitem", "contextlib.closing", "self.read_helper", "f.keys", "stat.S_IRUSR", "self.assertRaises", "stdout.getvalue", "stream.write", "k.encode", "support.unlink", "f.items", "self.keys_helper", "random.randrange", "self.assertIsNone", "os.unlink", "unittest.main", "os.linesep", "operator.contains", "os.path", "f.get", "random.choice", "dumbdbm.error", "random.random", "self.init_db", "os.chmod", "os.name", "support.captured_stdout", "os.stat", "self.assertTrue", "f.close", "unittest.TestCase", "file.write", "self.assertFalse"]}, "test_dbm_gnu.py": {"libraries": ["unittest", "test.support.TESTFN", "_gdbm._GDBM_VERSION", "test.support.unlink", "test.support.TESTFN_NONASCII", "test.support", "os"], "function_names": ["test_nonascii_filename", "test_context_manager", "setUpClass", "setUp", "test_key_methods", "test_error_conditions", "test_bytes", "test_unicode", "test_reorganize", "test_write_readonly_file", "test_nonexisting_file", "tearDown", "test_flags"], "function_calls": ["list", "max", "sorted", "str", "set", "unlink", "print"], "class_names": ["TestGdbm"], "class_method_calls": ["self.assertLess", "unittest.skipUnless", "self.assertEqual", "support.import_module", "self.assertGreaterEqual", "cm.exception", "self.assertIn", "db.keys", "self.addCleanup", "self.assertRaises", "gdbm.open", "support.verbose", "self.g", "self.assertGreater", "self.assertIsNone", "unittest.main", "os.path", "gdbm.open_flags", "gdbm.error", "self.assertTrue", "key_set.remove", "unittest.TestCase"]}, "test_dbm_ndbm.py": {"libraries": ["unittest", "dbm.ndbm", "test.support", "os", "dbm.ndbm.error"], "function_names": ["test_empty_value", "test_nonascii_filename", "test_context_manager", "setUp", "test_bytes", "test_unicode", "test_write_readonly_file", "test_nonexisting_file", "test_modes", "tearDown", "test_keys"], "function_calls": ["list", "str", "any"], "class_names": ["DbmTestCase"], "class_method_calls": ["dbm.ndbm", "unittest.skipUnless", "self.assertEqual", "support.import_module", "cm.exception", "support.TESTFN", "self.assertIn", "db.keys", "support.TESTFN_NONASCII", "self.addCleanup", "self.fail", "self.assertRaises", "support.unlink", "self.assertIsNone", "unittest.main", "self.filename", "self.d", "os.path", "self.skipTest", "self.assertTrue", "unittest.TestCase"]}, "test_decimal.py": {"libraries": ["_testcapi", "random", "warnings", "test.support.requires_IEEE_754", "test.support.run_unittest", "test.support.run_with_locale", "unittest", "threading", "copy", "locale", "test.support.cpython_only", "os", "test.support.is_resource_enabled", "test.support.TestFailed", "operator", "inspect", "doctest.IGNORE_EXCEPTION_DETAIL", "numbers", "test.support.requires_docstrings", "optparse", "locale.CHAR_MAX", "test.support.import_fresh_module", "sys", "pickle", "math", "test.support.run_doctest"], "function_names": ["test_subtract", "test_nan_to_float", "test_is_zero", "test_py_exact_power", "test_max", "test_rop", "test_to_sci_string", "test_default_context", "test_explicit_from_Decimal", "test_threading", "test_power", "test_logical_or", "test_c_ieee_context", "test_rounding_strings_interned", "eval_equation", "make_grouping", "change_clamp", "test_c_integral", "test_flags_irrelevant", "eval_file", "test_internal_use_of_overridden_methods", "test_min", "__init__", "assert_rest", "test_abs", "test_invalid_construction", "init", "test_decimal_complex_comparison", "test_from_float", "test_wide_char_separator_decimal_point", "test_is_signed", "test_module", "test_with_statements_gc2", "test_decimal_from_float_argument_type", "__gt__", "as_integer_ratio", "test_copy_abs", "test_rotate", "test_c_input_restriction", "test_exp", "test_c_context_errors_extra", "mkargs", "tearDown", "thfunc1", "test_is_nan", "test_logical_and", "test_ln", "test_as_nonzero", "test__clamp", "test_decimal_attributes", "test_create_decimal", "test_explicit_context_create_from_float", "test_remainder", "test_float_operation_default", "test_py__round", "test_explicit_from_tuples", "eval_line", "test_logical_invert", "change_precision", "test_c_context_errors", "test_py_decimal_id", "bit_length", "FixQuotes", "test_is_qnan", "test_containers", "test_copy_decimal", "test_compare_total_mag", "test_next_plus", "__rdivmod__", "test_abc", "test_copy_negate", "test_logical_xor", "test_float_operation", "test_is_snan", "change_rounding_method", "test_divmod", "read_unlimited", "test_tonum_methods", "test_from_legacy_strings", "test_unicode_digits", "test_to_eng_string", "test_n_format", "test_complex", "test_divide_int", "test_bignum", "test_c_context_repr", "getexceptions", "assert_signals", "test_c_valid_context", "test_exact_conversion", "test_comparison_operators", "test_conversions_from_int", "test_sqrt", "hashit", "test_log10", "test_implicit_context", "test_context_attributes", "test_none_args", "test_subtraction", "change_min_exponent", "test_add", "eval_directive", "test_remainder_near", "test_float_comparison", "test_hash_method", "test_floor_div_module", "test_next_minus", "test_context_templates", "test_create_decimal_from_float", "test_plus", "test_floor_division", "setUp", "test_divide", "test_fma", "test_is_normal", "test_normalize", "test_explicit_from_bool", "test_context_subclassing", "test_va_args_exceptions", "test_is_subnormal", "test_unary_operators", "test_invalid_override", "test_division", "test_flag_comparisons", "test_main", "doit", "test_round", "test_module_attributes", "test_multiply", "test_same_quantum", "test_scaleb", "test_tostring_methods", "test_with_statements_gc1", "test_as_integer_ratio", "test_explicit_from_string", "test_addition", "test_formatting", "test_min_mag", "test_nested_with_statements", "test_py_rescale", "test_pickle", "test_explicit_from_None", "test_nan_comparisons", "test_decimal_float_comparison", "test_c_signal_dict", "test_is_finite", "test_is_infinite", "test_copy", "test_adjusted", "test_powering", "test_int", "test_implicit_from_int", "test_copy_sign", "test_explicit_from_int", "test_from_tuple", "raise_error", "test_sizeof", "checkSameDec", "__le__", "test_context_repr", "test_copy_and_deepcopy_methods", "test_subclassing", "thfunc2", "test_eval_round_trip", "test_number_class", "test_implicit_from_Decimal", "test_to_integral_exact", "test_invalid_context", "test_py_alternate_formatting", "test_constants", "__eq__", "tr", "change_max_exponent", "test_min_and_max_methods", "test_equality_with_other_types", "__ge__", "test_implicit_from_string", "__ne__", "test_explicit_empty", "__lt__", "test_canonical", "test_py_immutability_operations", "test_with_statements_gc3", "test_minus", "test_multiplication", "test_c_valid_context_extra", "test_decimal_fraction_comparison", "test_inspect_module", "test_next_toward", "test_quantize", "test_implicit_from_float", "test_as_tuple", "test_explicit_from_float", "test_explicit_from_list", "test_localcontextarg", "test_c_funcs", "test_radix", "test_c_round", "test_c_context_templates", "test_inspect_types", "__divmod__", "assertIsExclusivelySet", "test_compare_total", "test_shift", "test_named_parameters", "test_exception_hierarchy", "test_explicit_context_create_decimal", "test_snan_to_float", "__abs__", "test_implicit_from_None", "test_compare_signal", "test_logb", "test_max_mag", "test_c_format", "test_localcontext", "test_compare", "test_to_integral_value", "test_trunc", "assert_attr", "get_fmt", "test_c_context"], "function_calls": ["sorted", "getattr", "make_grouping", "assert_rest", "dict", "open", "init", "setattr", "dir", "int", "mkargs", "enumerate", "len", "object", "fn", "cls", "FixQuotes", "test_containers", "str", "complex", "locals", "list", "assert_signals", "localcontext", "run_doctest", "D", "hashit", "f", "Context", "op", "setcontext", "pow", "Decimal", "round", "format", "min", "is_resource_enabled", "all", "IEEEContext", "id", "isinstance", "test_main", "doit", "F", "tuple", "hash", "run_unittest", "range", "MyContext", "set", "TestFailed", "type", "float", "eval", "getcontext", "I", "hasattr", "divmod", "max", "import_fresh_module", "MyDecimal", "raise_error", "print", "abs", "run_with_locale", "tr", "repr", "issubclass", "super", "p_type", "checkSameDec", "assertIsExclusivelySet", "bool", "c_type", "chr", "funct", "assert_attr", "map", "get_fmt", "E"], "class_names": ["PyFunctionality", "PyContextWithStatement", "ThreadingTest", "PythonAPItests", "CContextAPItests", "Y", "PyUsabilityTest", "FormatTest", "Z", "ExplicitConstructionTest", "ContextFlags", "CImplicitConstructionTest", "CPythonAPItests", "CContextSubclassing", "PyContextFlags", "PyExplicitConstructionTest", "PySpecialContexts", "CheckAttributes", "CContextWithStatement", "CUsabilityTest", "CIBMTestCases", "A", "E", "PyThreadingTest", "ArithmeticOperatorsTest", "PyPythonAPItests", "PyContextSubclassing", "PyWhitebox", "SpecialContexts", "CFormatTest", "CContextFlags", "SignatureTest", "X", "CContextInputValidation", "ContextWithStatement", "PyFormatTest", "CCoverage", "CSpecialContexts", "ImplicitConstructionTest", "PyContextInputValidation", "CWhitebox", "CExplicitConstructionTest", "Coverage", "ContextAPItests", "ContextSubclassing", "CArithmeticOperatorsTest", "I", "PyIBMTestCases", "PyArithmeticOperatorsTest", "UsabilityTest", "CFunctionality", "PyContextAPItests", "PyImplicitConstructionTest", "IBMTestCases", "ContextInputValidation", "MyDecimal", "MyContext", "PyCoverage", "CThreadingTest"], "class_method_calls": ["c.rounding", "c3.traps", "xc.prec", "d1._int", "db.__lt__", "b2._exp", "opt.debug", "x.to_integral_exact", "C.Overflow", "c2.flags", "sys.getsizeof", "C.setcontext", "os.sep", "x.min", "d.as_tuple", "d2._sign", "pickle.HIGHEST_PROTOCOL", "nc.prec", "b2._int", "d.Emax", "c.copy_negate", "c.logical_invert", "sys.argv", "c.clear_flags", "cls.assertTrue", "xc.Emin", "cls.assertRaises", "P.Clamped", "new_ctx.flags", "myexceptions.sort", "db.__le__", "x.strip", "decimal.Decimal", "x.remainder_near", "P.DefaultContext", "b2._sign", "c.shift", "C.getcontext", "C.ROUND_HALF_UP", "y.copy_abs", "self.rounding", "c._unsafe_setprec", "self.readcontext", "context._apply", "self.assertNotIn", "warnings.warn", "self.eval_equation", "c._unsafe_setemin", "context.add", "self.change_max_exponent", "orig_ctx.Emin", "decimal.Context", "P.Overflow", "random.shuffle", "self.assertIsNot", "c.logb", "os.path", "x.logical_and", "P.ROUND_05UP", "val.replace", "context.subtract", "C.DecFloatOperation", "th2.join", "c.max_mag", "s.find", "sig.parameters", "c.quantize", "c.is_qnan", "c.remainder", "Decimal.from_float", "expected_flags.sort", "numbers.Real", "d.update", "C.DecTraps", "xc.flags", "y.logical_invert", "C.ROUND_DOWN", "cls.assertEqual", "d2._int", "self.capitals", "c.logical_xor", "c2.divide", "C.localcontext", "cls.synchro", "os.listdir", "z.number_class", "y.next_minus", "c.is_subnormal", "c.rotate", "dumper.Context", "c.is_canonical", "z.normalize", "d.prec", "self.fail", "x.log10", "math.ceil", "c.to_integral_value", "P.MAX_PREC", "self.finish1", "numbers.Number", "d.__hash__", "P.ROUND_UP", "C.DecimalTuple", "C.IEEE_CONTEXT_MAX_BITS", "x.logical_invert", "P.Context", "c.__delattr__", "c2.traps", "x.compare", "p.parse_args", "sys.get_int_max_str_digits", "x.real", "operator.eq", "c.next_plus", "y.copy_sign", "c.compare", "decimal.Overflow", "orig_ctx.traps", "x.ln", "c.prec", "c.abs", "c.divmod", "P.DecimalTuple", "P.ROUND_HALF_EVEN", "orig_ctx.flags", "DefaultContext.Emax", "c.scaleb", "m.Context", "self.read_unlimited", "self.assertRaises", "self.prec", "x.scaleb", "b1._int", "c.copy_sign", "self.clamp", "context.create_decimal_from_float", "d.quantize", "self.context", "c.logical_and", "s.startswith", "P.FloatOperation", "c.flags", "decimal.FloatOperation", "P.ROUND_FLOOR", "c.copy_decimal", "c.Etop", "e.clamp", "decimal.InvalidOperation", "C.DECIMAL128", "context.Emax", "dict.fromkeys", "C.DecClamped", "C.MAX_PREC", "new_flags.sort", "decimal.InvalidContext", "x.exp", "self.getexceptions", "os.curdir", "xc.Emax", "m.y", "self.x", "math.copysign", "C.DecInvalidContext", "c.is_normal", "self.flags", "val.count", "all_tests.insert", "m.setcontext", "C.Clamped", "c.is_zero", "context.sqrt", "self.assertLess", "c.ln", "self.eval_file", "d1.max", "self.assertLessEqual", "self.eval_directive", "nc.create_decimal", "C.DecDivisionUndefined", "context.clear_flags", "context.traps", "e.traps", "C.DecOverflow", "context.create_decimal", "C.__version__", "th1.start", "C.DivisionByZero", "math.gcd", "c.Emax", "c.logical_or", "theirexceptions.sort", "nc.traps", "c.is_snan", "c.multiply", "self.skipped_test_ids", "P.MIN_ETINY", "test_values.items", "DefaultContext.copy", "math.isnan", "decimal.Subnormal", "d.to_integral", "x.max", "y.quantize", "decimal.Clamped", "c.max", "expected_flags.append", "cls.finish1", "self.assertNotIsInstance", "thiscontext.traps", "c1.traps", "nc.flags", "c.subtract", "optparse.OptionParser", "C.InvalidOperation", "C.ROUND_UP", "z.to_eng_string", "test_values.extend", "y.exp", "self.skipTest", "self.Emax", "c._allcr", "args.append", "locale.localeconv", "e.prec", "c.minus", "C.MIN_EMIN", "e.rounding", "unittest.skipUnless", "self.assertNotEqual", "self.assertGreaterEqual", "decimal.DivisionUndefined", "C.ROUND_FLOOR", "self.assertIs", "P.localcontext", "self.change_min_exponent", "cls.finish2", "filename.startswith", "c.Etiny", "context.prec", "c.number_class", "random.sample", "q.is_nan", "C.ROUND_CEILING", "new_ctx.traps", "c.min_mag", "line.replace", "d1._exp", "x.kind", "c1.flags", "random.random", "P.Inexact", "c.copy", "x.max_mag", "self.assertTrue", "d.rounding", "x.logical_xor", "c.is_infinite", "DefaultContext.Emin", "C.DecIEEEInvalidOperation", "c.clamp", "Decimal.as_integer_ratio", "x.quantize", "unittest.SkipTest", "c.compare_total_mag", "cls.assertFalse", "c.to_sci_string", "c_sig.parameters", "C.Underflow", "context.clear_traps", "e.capitals", "P.setcontext", "decimal.Inexact", "P.Subnormal", "DefaultContext.prec", "c.divide_int", "P.Rounded", "z.is_subnormal", "c.to_integral_exact", "P.ROUND_CEILING", "x.startswith", "a.sort", "P.Decimal", "b1._sign", "e.Emax", "z.sqrt", "c1.create_decimal", "c3.prec", "copy.copy", "decimal.Rounded", "sys.platform", "math.floor", "c.fma", "C.IEEEContext", "d.capitals", "orig_ctx.clear_flags", "c.is_signed", "self.eval_line", "A.from_float", "math.trunc", "c.power", "self.traps", "d.as_integer_ratio", "loader.Context", "P.Underflow", "x.to_integral_value", "y.remainder_near", "context._raise_error", "C.DecUnderflow", "c._unsafe_setemax", "self.change_clamp", "cls.decimal", "c.is_nan", "y.next_plus", "self.change_precision", "c4.prec", "P.MIN_EMIN", "C.DecErrors", "c3.divide", "r.x", "c2.multiply", "x.conjugate", "C.Decimal", "thiscontext.prec", "math.pi", "d.clamp", "p_sig.parameters", "th1.join", "c.plus", "c.is_finite", "P.ROUND_DOWN", "c.copy_abs", "d.traps", "c2.prec", "MyDecimal.from_float", "c.canonical", "new_ctx.prec", "C.ROUND_05UP", "P.ROUND_HALF_UP", "C.DecMallocError", "C.ROUND_HALF_EVEN", "operator.ge", "c.remainder_near", "filename.split", "c.min", "P.HAVE_THREADS", "C.Rounded", "self.assertIn", "thiscontext.flags", "c1.Emin", "unittest.skipIf", "x.rotate", "_testcapi.unicode_legacy_string", "c.create_decimal_from_float", "C.BasicContext", "decimal.DecimalException", "decimal.DivisionImpossible", "x.shift", "decimal.DivisionByZero", "c.radix", "pickle.dumps", "c._traps", "threading.Thread", "P.InvalidOperation", "c.clear_traps", "C.DECIMAL64", "a.a_type", "q.is_infinite", "c._flags", "self.assertEqual", "C.ROUND_HALF_DOWN", "c.normalize", "x.logical_or", "c.compare_signal", "c.__repr__", "C.Subnormal", "Context.__init__", "c.divide", "C.DecInvalidOperation", "self.finish2", "y.sqrt", "self.ignore_list", "exception.__class__", "p.add_option", "P.ROUND_HALF_DOWN", "x.compare_signal", "c3.compare", "y.copy_negate", "c.next_toward", "self.ErrorNames", "self.LogicalFunctions", "DefaultContext.flags", "C.DecFpuError", "operator.gt", "C.DECIMAL32", "self.Emin", "C.DecSubnormal", "operator.le", "r.is_nan", "d1._sign", "attr.startswith", "opt.skip", "C.FloatOperation", "self.assertIsInstance", "set_ctx.prec", "d.Emin", "th2.start", "c.to_eng_string", "random.expovariate", "self.ChangeDict", "e.Emin", "P.MAX_EMAX", "c.same_quantum", "copy.deepcopy", "C.DecDivisionByZero", "self._previous_int_limit", "P.DivisionByZero", "D.from_float", "C.HAVE_THREADS", "pickle.loads", "context.clamp", "random.randrange", "self.RoundingDict", "d.flags", "decimal.ConversionSyntax", "sys.maxsize", "inspect._ParameterKind", "vals.append", "inspect.isfunction", "x.min_mag", "d2._exp", "ctx.traps", "s.split", "inspect.signature", "unittest.TestCase", "self.assertFalse", "x.y", "x.fma", "self.decimal", "C.DecConversionSyntax", "C.DecInexact", "self.a_type", "context.multiply", "op.__name__", "b1._exp", "P.getcontext", "operator.ne", "c.capitals", "C.DecRounded", "z.is_normal", "c.create_decimal", "self.change_rounding_method", "x.to_integral", "ExtendedContext.prec", "c.log10", "c3.flags", "self.assertGreater", "c.exp", "c.compare_total", "C.Inexact", "context.flags", "x.is_nan", "c.add", "C.MIN_ETINY", "xc.clear_flags", "C.MAX_EMAX", "e.__class__", "context.Emin", "c.Emin", "P.__version__", "param.kind", "sys.modules", "c2.power", "C.DefaultContext", "decimal.Underflow", "x.imag", "threading.Event", "x.lower", "sys.set_int_max_str_digits", "C.Context", "e.flags", "BasicContext.prec", "operator.lt", "c.traps", "self.synchro", "c.next_minus", "C.DecDivisionImpossible", "db.__gt__", "x.logb", "y.normalize", "self.NameAdapter", "c.sqrt"]}, "test_decorators.py": {"libraries": ["unittest"], "function_names": ["__getattr__", "check", "test_eval_order", "memoize", "applied_first", "add_five", "noteargs", "test_double", "double", "call", "test_order", "__init__", "applied_second", "ten", "make_decorator", "test_dotted", "decorate", "test_argforms", "f1", "plain", "test_memoize", "test_staticmethod_function", "test_simple", "f", "test_dbcheck", "unimp", "f3", "bar", "notamethod", "test_errors", "countcalls", "test_single", "f2", "dbcheck", "author", "callnum", "foo", "funcattrs", "deco"], "function_calls": ["MiscDecorators", "noteargs", "DbcheckError", "double", "str", "dict", "setattr", "f1", "C", "func", "eval", "f", "compile", "map", "bar", "f2", "countcalls", "dbcheck", "callnum", "foo", "funcattrs"], "class_names": ["MiscDecorators", "TestClassDecorators", "C", "TestDecorators", "NameLookupTracer", "DbcheckError"], "class_method_calls": ["c3.make_decorator", "c2.arg", "self.assertEqual", "f3.dbval", "func.__name__", "c2.make_decorator", "C.foo", "call.__name__", "func.__dict__", "c1.arg", "f2.dbval", "self.index", "Exception.__init__", "self.assertRaises", "decorators.author", "actions.append", "foo.author", "f1.dbval", "double.__name__", "c3.arg", "unittest.main", "c1.make_decorator", "x.extra", "unittest.TestCase", "C.extra"]}, "test_defaultdict.py": {"libraries": ["unittest", "copy", "tempfile", "pickle", "collections.defaultdict", "os"], "function_names": ["test_shallow_copy", "foo", "test_basic", "test_pickling", "foobar", "test_deep_copy", "__init__", "_factory", "test_repr", "test_print", "test_callable_arg", "test_missing", "test_copy", "test_recursive_repr", "test_keyerror_without_factory"], "function_calls": ["sub", "type", "open", "print", "defaultdict", "eval", "range", "repr"], "class_names": ["sub", "TestDefaultDict"], "class_method_calls": ["copy.copy", "d1.default_factory", "tempfile.mktemp", "d2.default_factory", "self.assertEqual", "d.copy", "self.assertIn", "self.fail", "f.readline", "self.assertNotIn", "d1.__missing__", "os.remove", "self.assertRaises", "self.default_factory", "d4.default_factory", "f.seek", "d2.keys", "self.assertRegex", "copy.deepcopy", "d1.copy", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "unittest.main", "self._factory", "pickle.dumps", "d3.default_factory", "self.assertTrue", "f.close", "unittest.TestCase", "err.args"]}, "test_deque.py": {"libraries": ["unittest", "test.seq_tests", "copy", "gc", "collections.deque", "random", "struct", "sys", "pickle", "weakref", "test.test_deque", "test.support"], "function_names": ["test_extendleft", "test_maxlen_zero", "test_insert", "test_runtime_error_on_empty_deque", "test_strange_subclass", "test_index", "test_reverse", "test_copy_method", "bad___new__", "test_iadd", "test_init", "test_bug_31608", "test_remove", "test_repr", "test_basics", "__eq__", "test_reversed_new", "test_extend", "test_gc_doesnt_blowup", "test_iter_with_altered_data", "test_copy_pickle", "test_roundtrip_iter_init", "test_main", "test_deepcopy", "test_free_after_iterating", "test_comparisons", "test_long_steadystate_queue_popleft", "test_clear", "test_maxlen", "test_index_bug_24913", "test_long_steadystate_queue_popright", "__init__", "test_iterator_pickle", "test_constructor", "test_underflow", "test_count", "test_big_queue_popleft", "test_pickle_recursive", "test_big_queue_popright", "test_mul", "test_len", "test_reversed", "test_imul", "test_pickle", "test_getitem", "test_rotate", "test_container_iterator", "__iter__", "test_big_stack_right", "test_weakref", "test_delitem", "test_hash", "test_copy", "test_insert_bug_26194", "test_contains", "fail", "test_subclass_with_kwargs", "test_subscript", "test_setitem", "test_big_stack_left", "test_contains_count_stop_crashes", "test_add", "test_print", "test_getslice", "test_sizeof", "test_maxlen_attribute"], "function_calls": ["check", "min", "append", "reversed", "all", "deque", "id", "MutateCmp", "repr", "test_main", "Deque", "iter", "str", "tuple", "A", "open", "MutatingCompare", "dr", "range", "X", "BadCmp", "list", "ref", "SubclassWithKwargs", "C", "klass", "DequeWithBadIter", "type", "zip", "next", "enumerate", "eval", "fail", "pop", "hasattr", "len", "g", "BadCompare", "map", "print"], "class_names": ["BadCmp", "Deque", "SubclassWithKwargs", "BadCompare", "C", "DequeWithBadIter", "A", "TestSubclass", "TestSequence", "MutatingCompare", "TestVariousIteratorArgs", "TestBasic", "TestSubclassWithKwargs", "MutateCmp", "X"], "class_method_calls": ["self.assertEqual", "self.assertNotEqual", "struct.calcsize", "self.assertIs", "support.TESTFN", "seq_tests.itermulti", "self.deque", "self.assertRaises", "pickle.HIGHEST_PROTOCOL", "fo.read", "d.x", "random.random", "obj.x", "seq_tests.Sequence", "self.assertTrue", "deque.__init__", "d.appendleft", "d.extendleft", "l.append", "d.pop", "d.copy", "self.check_sizeof", "seq_tests.IterNextOnly", "self.assertNotIn", "s.index", "weakref.proxy", "d.maxlen", "support.run_unittest", "seq_tests.CommonTest", "copy.deepcopy", "object.__sizeof__", "random.randrange", "pickle.loads", "self.assertIsNone", "self.assertIsNot", "d.extend", "d.popleft", "d.index", "seq_tests.IterFunc", "d.reverse", "gc.collect", "seq_tests.IterFuncStop", "unittest.TestCase", "copy.copy", "self.result", "support.run_doctest", "l.pop", "right.reverse", "seq_tests.iterfunc", "m.d", "X.__new__", "seq_tests.IterGen", "e.x", "support.unlink", "d.__init__", "seq_tests.IterGenExc", "fo.write", "e.maxlen", "e.rotate", "d.count", "d.__delitem__", "support.check_sizeof", "fo.close", "d.insert", "d.rotate", "sys.gettotalrefcount", "self.assertIn", "d.__copy__", "seq_tests.IterNoNext", "s.insert", "s.count", "weakref.ref", "d.clear", "e.pop", "d.append", "self.d", "support.cpython_only", "self.skipTest", "pickle.dumps", "d.remove", "support.calcvobjsize", "d.__getitem__"]}, "test_descr.py": {"libraries": ["_testcapi", "abc", "_io.FileIO", "warnings", "test.support", "unittest", "io", "types", "copy", "weakref", "itertools", "builtins", "gc", "operator", "binascii", "copy.deepcopy", "xxsubtype", "copyreg", "types.ModuleType", "sys", "pickle", "math"], "function_names": ["test_supers", "test_compattr", "_check_reduce", "test_slices", "test_carloverre", "test_object_new", "test_slots_descriptor", "_assert_is_copy", "empty_seq", "__delete_x", "test_basic_inheritance", "test_iter_items", "test_evil_type_name", "__rfloordiv__", "test_python_dicts", "__pow__", "test_doc_descriptor", "copy", "test_testcapi_no_segfault", "test_reent_set_bases_on_direct_base", "__getstate__", "__init__", "test_classmethods", "complex_num", "specialmethod", "test_wrap_lenfunc_bad_cast", "test_object_class", "hello", "test_keywords", "format_impl", "assertNotHasAttr", "__str__", "test_carloverre_multi_inherit_invalid", "test_buffer_inheritance", "test_set_doc", "set2op_test", "test_newslots", "__gt__", "__iter__", "test_python_lists", "__add__", "test_builtin_bases", "test_iter_values", "test_staticmethods_in_c", "getstate", "test_explicit_reverse_methods", "test_staticmethods", "__setitem__", "setsliceop_test", "test_isinst_isclass", "test_ints", "test_classic_comparisons", "test_rmul", "test_errors", "test_meth_class_get", "__delitem__", "zero", "test_reent_set_bases_tp_base_cycle", "test_copy_setstate", "__prepare__", "test_methods_in_c", "getfoo", "test_wrong_class_slot_wrapper", "test_properties_plus", "test_incomplete_set_bases_on_self", "test_issue24097", "Amethod", "test_multiple_inheritance", "test_init", "test_ipow", "can_delete_dict", "test_special_unbound_method_types", "setter", "test_proxy_call", "run_context", "some_number", "__setattr__", "test_reent_set_bases_on_base", "__floordiv__", "test_vicious_descriptor_nonsense", "assertNotOrderable", "__call__", "__set__", "test_subclass_right_op", "test_dict_type_with_metaclass", "_generate_pickle_copiers", "setx", "__imul__", "test_set_dict", "test_str_subclass_as_dict_key", "__del__", "getter", "getdict", "test_classic", "test_object_class_assignment_between_heaptypes_and_nonheaptypes", "test_weakref_segfault", "__delattr__", "test_pytype_long_ready", "test_descrdoc", "__bool__", "test_complexes", "__rmul__", "f", "cant", "test_reduce", "test_refleaks_in_classmethod___init__", "raises", "test_set_and_no_get", "__delete__", "test_builtin_function_or_method", "test_specials", "unop_test", "test_subclass_propagation", "__new__", "test_proxy_super", "interesting", "verify_dict_readonly", "Cmethod", "test_recursive_call", "test_diamond_inheritance", "__getitem__", "__set_x", "__contains__", "test_bpo25750", "assertHasAttr", "test_restored_object_new", "test_slots_trash", "test_file_fault", "test_mixing_slot_wrappers", "test_rich_comparisons", "setUp", "test", "__cmp__", "test_mutable_names", "test_object_reduce", "test_cycle_through_dict", "do_dict_missing", "test_methods", "_set_x", "number_operators", "__repr__", "__getclass", "test_lists", "test_slots", "test_dir", "test_wrapper_segfault", "setstate", "test_assign_slice", "test_main", "test_incomplete_extend", "test_bound_method_repr", "delx", "test_refleaks_in_staticmethod___init__", "test_consistency_with_epg", "test_bad_new", "__int__", "__get__", "__getnewargs_ex__", "test_str_operations", "test_slots_special2", "test_metaclass", "test_slot_shadows_class_variable", "do_issubclass", "rev", "spamdict", "test_type_lookup_mro_reference", "do_isinstance", "method", "test_str_of_str_subclass", "test_incomplete_super", "test_reduce_copying", "setfoo", "test_uninitialized_modules", "test_type___getattribute__", "setop_test", "func", "test_module_subclasses", "__mul__", "__setstate__", "test_subclasses", "foo", "spam", "test_pickle_slots", "boo", "test_classmethods_in_c", "test_qualname", "test_slots_special", "test_properties", "test_carloverre_multi_inherit_valid", "test_altmro", "__getnewargs__", "test_monotonicity", "test_qualname_dict", "spamlist", "test_mro_disagreement", "test_unsubclassable_types", "check", "stop", "__getattr__", "test_repr_as_str", "__get_x", "__le__", "meth", "test_subtype_resurrection", "test_ex5_from_c3_switch", "test_deepcopy_recursive", "mysetattr", "test_funny_new", "test_repr", "__eq__", "iden", "mygetattr", "mro", "myself", "__ge__", "__ne__", "test_tp_subclasses_cycle_in_update_slots", "test_overloading", "test_mutable_bases_with_failing_mro", "get", "test_not_implemented", "test_tp_subclasses_cycle_error_return_path", "__lt__", "test_floats", "test_dict_constructors", "test_binary_operator_override", "test_dynamics", "test_imul_bug", "test_keyword_arguments", "test_iter_keys", "test_subclassing_does_not_duplicate_dict_descriptors", "test_getattr_hooks", "_get_x", "test_spam_dicts", "test_abstractmethods", "__len__", "test_spam_lists", "test_dicts", "test_delete_hook", "swallow", "step_until", "__ipow__", "__rpow__", "test_weakrefs", "test_mutable_bases", "__getattribute__", "test_properties_doc_attrib", "getx", "test_slots_multiple_inheritance", "__hash__", "binop_test", "sliceop_test", "test_method_wrapper", "test_object_new_and_init_with_parameters", "test_special_method_lookup", "return_true", "test_hash_inheritance", "test_set_class", "test_mutable_bases_catch_mro_conflict"], "function_calls": ["C4", "AddressBookEntry", "frozenset", "getattr", "T", "MyBytes", "C0", "madtuple", "ExceptionType", "octetstring", "M2", "bm", "StdoutGuard", "iter", "DDsub", "constructor", "staticmethod", "C14", "dict", "Mapping", "setattr", "PickleCopier", "C3", "dir", "M", "int", "zip", "W", "delattr", "len", "UserLong", "m", "C10", "madcomplex", "exec", "S", "object", "gettotalrefcount", "DocDescr", "Weak", "cls", "can_delete_dict", "Picky", "Descriptor", "mysuper", "octlong", "Foo", "str", "C15", "complex", "Evil", "wr", "madstring", "ErrDescr", "longclone", "list", "DictSub", "slice", "SpecialDescr", "NewClass", "D", "cant", "_instance", "C16", "Proxy", "C13", "raises", "Oops", "set_add", "pow", "C2", "interesting", "verify_dict_readonly", "oct", "madunicode", "EvilGetattribute", "trash", "Base", "cistr", "classmethod", "FakeStr", "id", "vars", "MyCallable", "isinstance", "test_main", "F", "B", "tuple", "Provoker", "hash", "C9", "precfloat", "AssertionError", "range", "spamdict", "C", "property", "C1", "set", "hex", "Wrapper", "type", "float", "eval", "I", "hexint", "hasattr", "sublist", "max", "C12", "mylist", "C11", "MM", "ord", "spamlist", "c", "print", "check", "base_type", "Unrelated", "Node", "MyKey", "abs", "Derived1", "Frag", "Z", "Derived2", "ZZ", "repr", "RuntimeError", "AttributeError", "issubclass", "super", "OldClass", "MyInt", "A", "G", "Nasty", "computed_attribute", "case", "X", "ValueError", "runner", "ModuleType", "deepcopy", "Descr", "r", "NoWeak", "Q1", "bool", "L", "Cdict", "Number", "bytearray", "chr", "map", "callable", "H", "mydict", "spam_cm", "E", "Counted"], "class_names": ["C4", "AddressBookEntry", "Exception1", "multimetaclass", "T", "MyBytes", "C0", "madtuple", "C5", "octetstring", "M2", "autosuper", "StdoutGuard", "DDsub", "C14", "Mapping", "MyException", "Checker", "PickleCopier", "PTypesLongInitTest", "C3", "Meta2", "A1", "WorkOnce", "MiscTests", "M", "WorkAlways", "W", "PerverseMetaType", "UserLong", "C10", "Inside", "OverrideNeither", "WheelBoat", "HorizontalGrid", "J", "madcomplex", "S", "DocDescr", "Weak", "Y", "MyStr", "Picky", "Exception2", "B1", "Descriptor", "SubSpam", "mysuper", "Module1", "R", "octlong", "Classic", "Q", "Foo", "C15", "Evil", "madstring", "ErrDescr", "MyFrozenSet", "longclone", "EditablePane", "DictSub", "VHGrid", "Module", "SpecialDescr", "NewClass", "SmallCatamaran", "Meta", "D", "_instance", "ScrollingMixin", "C16", "Proxy", "C13", "MyTuple", "OperatorsTest", "Oops", "P", "C2", "madunicode", "EvilGetattribute", "trash", "Base", "cistr", "Pedalo", "FakeStr", "BMeta", "MyCallable", "MyABC", "Sub", "SmallMultihull", "B", "F", "classic", "OverrideNew", "ClassPropertiesAndMethods", "F2", "Provoker", "C9", "precfloat", "OverrideInit", "AMeta", "EngineLess", "_metaclass", "C6", "B2", "C", "C1", "autoproperty", "ANotMeta", "DayBoat", "M1", "ScrollablePane", "MyFloat", "Wrapper", "K", "O", "OverrideBoth", "GridLayout", "VerticalGrid", "I", "hexint", "sublist", "C12", "mylist", "Int", "C11", "Base2", "MM", "DictProxyTests", "BNotMeta", "someclass", "Boat", "Pane", "A2", "SharedKeyTests", "Unrelated", "Node", "MyKey", "Meta1", "Frag", "N", "Derived1", "MroTest", "Module2", "Z", "HVGrid", "SubType", "Derived2", "ZZ", "OldClass", "MyInt", "A", "G", "Nasty", "computed_attribute", "C7", "DebugHelperMeta", "X", "EditableScrollablePane", "Descr", "PicklingTests", "NoWeak", "EditingMixin", "Q1", "MyComplex", "Cdict", "Number", "L", "DDbase", "dynamicmetaclass", "PedalWheelBoat", "H", "mydict", "meta", "Q2", "E", "Counted"], "class_method_calls": ["itertools.product", "kw.items", "C.container", "D.goo", "a.v", "s.replace", "q.__qualname__", "B.__new__", "self.unops", "base.__bases__", "support.check_impl_detail", "MyABC.register", "a.prec", "D.__bases__", "a.b", "s.center", "sys.getsizeof", "o.__repr__", "super_d2.method", "complex.real", "self_local.state", "abc.ABCMeta", "dict.__iter__", "d.bar", "pickle.HIGHEST_PROTOCOL", "derived1.method", "x.__dict__", "cls.ARGS", "list.__bases__", "self.a", "EditableScrollablePane.__mro__", "c.goo", "C.__hash__", "foo.setter", "tuple.__getitem__", "C.x", "self.proto", "a.foobar", "spam.spamdict", "obj.__reduce__", "Counted.counter", "func.__name__", "b.u", "complex.__new__", "C.__dict__", "C.__repr__", "self._rev", "self.assertNotIn", "self.subTest", "u.lstrip", "M.__new__", "self.assertListEqual", "d.getstate", "self.canonical", "a.delitem", "self.real", "self.assertIsNot", "dict.copy", "self.assertNotOrderable", "obj.__reduce_ex__", "int.__add__", "cm.__init__", "gc.collect", "self.dict", "C2.__dict__", "l.__mul__", "kwds.get", "self.append", "L.__bases__", "dict.items", "tp.__qualname__", "L.reverse", "name.startswith", "self.step_until", "self.loads", "descr.__doc__", "keys.sort", "D.mro", "d.__objclass__", "bytearray.__init__", "a.getstate", "c.foo", "set.add", "u.capitalize", "copyreg.__newobj__", "self.assertNotHasAttr", "A.__bases__", "str.split", "MT.__getattribute__", "str.__getitem__", "cls.__mro__", "a.x", "prepare_calls.append", "set_add.__get__", "self.assertAlmostEqual", "b.a", "support.impl_detail", "test.fail", "C2.__subclasses__", "copy._deepcopy_dispatch", "self.fail", "X.mykey", "MT.__init__", "math.ceil", "X.__abstractmethods__", "raw.__doc__", "a.__class__", "unittest.expectedFailure", "pickle_copier.copy", "C._C__super", "x.a", "a.method", "self.foo", "list.__mul__", "x.c", "record.append", "C.__mro__", "A.__slotnames__", "self.C", "Base.__dict__", "a._C__x", "A.__mro__", "sys.__stdout__", "a.y", "raw.fdel", "self_.foo", "self.first", "B.__bases__", "D.__mro__", "sys.stdout", "l1.append", "result.prec", "self.setsliceop_test", "warnings.catch_warnings", "Foo.__repr__", "B1.__bases__", "self.assertRaises", "D.foo", "self.prec", "type.mro", "u.upper", "c.spam", "a.setfoo", "a.getfoo", "X.descr", "b.foo", "types.ModuleType", "MT.__setattr__", "sm.__init__", "self._assert_is_copy", "base.method", "s.startswith", "self.sliceop_test", "F.foo", "descr.counter", "self.assertHasAttr", "minstance.a", "dict.__dict__", "a.state", "dict.fromkeys", "cm.exception", "self.impl", "obj.__slots__", "a.delattr", "obj.__dict__", "objcopy.__dict__", "attrs.get", "io.StringIO", "descr.__get__", "s.rstrip", "a.append", "a.spam", "value.lower", "C.attr", "Z.__mro__", "self.assertRegex", "cls.__dict__", "self.__state", "self.x", "self.assertIsNone", "mod.__dict__", "expr.islower", "d.meth", "X.__qualname__", "d.spam", "B2.__subclasses__", "c.__spam__", "self.assertLess", "c.cmethod", "self.value", "l.pop", "C.__init__", "foo.getter", "f.__call__", "obj.test", "prop.__doc__", "d2.foo", "pickle._loads", "object.__setattr__", "self._check_reduce", "Pedalo.__mro__", "self.__delete", "self.__get", "u.center", "cls.__name__", "c.cdata", "func.__qualname__", "X.a", "m.__class__", "x.__class__", "C.dict", "i.stop", "x.attr", "self.assertDictEqual", "SmallCatamaran.__mro__", "s.ljust", "self.counter", "b.getfoo", "foo.deleter", "type.__setattr__", "self.assertNotIsInstance", "self.binops", "s.__class__", "self.imag", "d.__qualname__", "u.rstrip", "d.items", "self.name", "tp.__dict__", "u.strip", "other.value", "B.__setattr__", "C.__int__", "support.get_attribute", "OldClass.__doc__", "sm.x", "Meta.a", "u.rev", "copyreg._reconstructor", "dict_descr.__set__", "e.foo", "D.myself", "d.foo", "Y.__qualname__", "self.__class__", "self.encode", "support.refcount_test", "self.get", "B1.__subclasses__", "pickle_copier.proto", "d.a", "support.gc_collect", "self.assertNotEqual", "self.assertGreaterEqual", "base.__class__", "complex.__radd__", "cls.KWARGS", "_testcapi.bad_get", "self.assertIs", "types.MethodType", "type.__dict__", "Y.Inside", "c1.foo", "x.foo", "dict.__init__", "EvilGetattribute.__getattr__", "otype.__name__", "m2instance.a", "t.rev", "prepare_calls.clear", "u.title", "s.meth", "a.amethod", "C.__subclasses__", "A.__hash__", "type.__new__", "s.strip", "self.setop_test", "A.__new__", "c.__classcell__", "c.attr", "A.__setitem__", "self.assertTrue", "l.__add__", "d.setstate", "checker.__class__", "object.__delattr__", "a.setattr", "s.rjust", "ff.__get__", "self_.a", "object.__init__", "b.__class__", "cm.x", "t.__dict__", "self.__getstate__", "A.mro", "x.get", "m.foo", "list.__new__", "C.foobar", "MT.__delattr__", "support.run_unittest", "self.setattr", "C.goo", "gc.get_objects", "prop2.__doc__", "x.e", "s.lower", "capture.close", "Mapping.dict", "state.items", "self.number_operators", "support.captured_output", "raw.fget", "pickle._dumps", "self.set2op_test", "list.__getitem__", "sm.__dict__", "a._A__x", "copy.copy", "builtins.__dict__", "d.__class__", "dd.x", "tp.__bases__", "r.startswith", "NewClass.__doc__", "a.foo", "a.adata", "math.floor", "object.__getattribute__", "math.trunc", "B.__mro__", "types.MemberDescriptorType", "C.foo", "raw.fset", "C1.__qualname__", "self_.b", "hits.get", "o.__str__", "C.__module__", "spam_cm.__get__", "c.__dict__", "float.real", "self.ready", "FileIO.closed", "e.meth", "a.setitem", "list.pop", "D.__hash__", "MyABC.a", "self._generate_pickle_copiers", "C.name", "D.__dict__", "derived2.method", "Mapping.__getitem__", "e.__dict__", "self._foo", "self.assertRaisesRegex", "object.__repr__", "C.__name__", "self.assertIn", "a.new", "object.__class__", "c.value", "self.b", "o.whatever", "unittest.skipIf", "m2instance.__dict__", "B.__delattr__", "C.__bases__", "a.setstate", "Foo.method", "copyreg.__newobj_ex__", "cls.descr", "key.startswith", "C.mro", "self.__foo", "Base.aProp", "self.binop_test", "c.abc", "new_calls.append", "self.flag", "float.__rsub__", "cls.lst", "support.cpython_only", "pickle.dumps", "str.__eq__", "self.unop_test", "a.extend", "E.foo", "a.rev", "new_calls.clear", "self.__dict__", "self.assertEqual", "r.endswith", "self.__x", "B.__getattr__", "a.__setitem__", "b.s", "E.__rfloordiv__", "x.z", "d.goo", "self.delattr", "self.__a", "type.__getattribute__", "foo.method", "x.b", "s.getvalue", "B.mro", "capture.getvalue", "dict.__setitem__", "m.__dict__", "A.__getattribute__", "C.__del__", "X.__bases__", "C.__setattr__", "other.canonical", "a.__dict__", "list.__add__", "T.counter", "cls.NEED_DICT_COPYING", "self.assertIsInstance", "Sub.test", "l.append", "self.__set", "self.bases", "hits.items", "self.last", "a.items", "minstance.b", "B.__hash__", "binascii.b2a_hex", "i.start", "A.__call__", "self.step", "str.__add__", "F._F__super", "copy.deepcopy", "s.a", "Foo.__str__", "pickle.loads", "list.append", "sys.maxsize", "u.lower", "d.__repr__", "C.__getattr__", "C.__basicsize__", "s.translate", "unittest.TestCase", "self.assertFalse", "x.y", "self.state", "B.__basicsize__", "C.__rfloordiv__", "sys.flags", "Q1.__qualname__", "c._foo", "Q1.__dict__", "b.v", "a.z", "a.w", "s.lstrip", "cls.__bases__", "b.w", "E.__mro__", "self.__super", "warnings.simplefilter", "e.a", "c.b", "a1.state", "log.append", "d2.boo", "Mapping.keys", "X.__doc__", "self_.__foo", "B2.__bases__", "str.lower", "t.__bases__", "a.u", "E.__dict__", "C.__spam__", "self.delitem", "C.bases", "b.r", "u.ljust", "objcopy.__slots__", "B.__dict__", "d2.goo", "C.method", "u.rjust", "X.__mro__", "cm.__dict__", "f.foo", "X.mykey2", "d.keys", "self.dumps", "self.lower", "env.items", "self.hashcode", "Sub.__dict__", "b.t", "other.lower", "_testcapi.test_with_docstring", "m2instance.b", "d.__name__", "self.__obj", "weakref.ref", "s.rev", "self.ref", "self.setitem", "PedalWheelBoat.__mro__", "object.__new__", "u.replace", "self.test_dir", "sys.gettrace", "d.get", "spam.spamlist", "d.__iter__", "x.__a"]}, "test_descrtut.py": {"libraries": ["pprint", "test.support", "test.support.sortdict", "test.test_descrtut"], "function_names": ["test_main", "m", "get", "__init__", "merge", "__getitem__"], "function_calls": ["test_main", "super"], "class_names": ["B", "C", "A", "defaultdict2", "defaultdict", "D"], "class_method_calls": ["support.run_doctest", "dict.__init__", "dict.get", "dict.__getitem__", "self.default"]}, "test_devpoll.py": {"libraries": ["unittest", "_testcapi.USHRT_MAX", "select", "random", "test.support.cpython_only", "os", "test.support.run_unittest"], "function_names": ["test_main", "test_fd_non_inheritable", "test_close", "test_events_mask_overflow", "test_timeout_overflow", "test_events_mask_overflow_c_limits", "find_ready_matching", "test_devpoll1"], "function_calls": ["len", "test_main", "find_ready_matching", "open", "run_unittest", "range", "hasattr"], "class_names": ["DevPollTests"], "class_method_calls": ["self.assertIsInstance", "p.register", "devpoll.unregister", "os.pipe", "os.get_inheritable", "os.read", "devpoll.poll", "os.write", "self.assertEqual", "bufs.append", "devpoll.closed", "unittest.SkipTest", "writers.remove", "readers.append", "self.fail", "pollster.register", "self.addCleanup", "pollster.modify", "select.devpoll", "p.unregister", "match.append", "self.assertRaises", "p.modify", "os.close", "pollster.poll", "devpoll.modify", "self.assertFalse", "open_file.fileno", "select.POLLOUT", "p.poll", "random.choice", "devpoll.register", "devpoll.fileno", "self.assertTrue", "writers.append", "unittest.TestCase", "select.POLLIN", "open_file.close", "devpoll.close"]}, "test_dict.py": {"libraries": ["unittest", "_testcapi", "test.mapping_tests", "gc", "random", "collections", "sys", "pickle", "weakref", "collections.abc", "test.support", "string", "_testcapi.dict_getitem_knownhash"], "function_names": ["test_setdefault_atomic", "make_shared_key_dict", "test_reverseitemiterator_pickling", "test_mutating_iteration_delete_over_items", "test_eq", "test_clear", "test_copy_fuzz", "test_reentrant_insertion", "__init__", "__missing__", "test_dictview_mixed_set_operations", "test_keys", "test_len", "__iter__", "mutate", "test_repr_deep", "items", "__next__", "__setitem__", "test_equal_operator_modifying_operand", "test_tuple_keyerror", "test_literal_constructor", "test_bool", "test_keys_contained", "helper_keys_contained", "test_splittable_pop_pending", "test_dict_items_result_gc", "test_get", "test_pop", "test_object_set_item_single_instance_non_str_key", "test_dict_copy_order", "test_invalid_keyword_arguments", "test_fromkeys", "test_track_literals", "test_popitem", "test_merge_and_mutate", "test_reversed", "__del__", "test_valuesiterator_pickling", "test_errors_in_view_containment_check", "test_reversevaluesiterator_pickling", "test_mutating_iteration_delete", "test_dictview_set_operations_on_items", "test_empty_presized_dict_in_freelist", "_tracked", "test_mutating_lookup", "__new__", "__getitem__", "test_fromkeys_operator_modifying_dict_operand", "test_reverse_iterator_for_empty_dict", "__repr__", "keys", "test_setdefault", "test_reverseiterator_pickling", "test_items", "test_mutating_iteration_delete_over_values", "test_mutating_iteration", "_not_tracked", "test_copy_maintains_tracking", "test_splittable_pop", "test_splittable_setdefault", "test_getitem", "test_container_iterator", "iter_and_mutate", "test_missing", "test_dictitems_contains_use_after_free", "test_copy", "test_track_subtypes", "test_contains", "test_resize2", "test_getitem_knownhash", "test_copy_noncompact", "test_itemiterator_pickling", "check_reentrant_insertion", "test_init_use_after_free", "test_setitem_atomic_at_resize", "test_dictview_set_operations_on_keys", "test_splittable_setattr_after_pop", "test_reverse_iterator_for_shared_shared_dicts", "test_repr", "test_instance_dict_getattr_str_subclass", "__eq__", "test_splittable_popitem", "test_oob_indexing_dictiter_iternextitem", "test_update", "test_free_after_iterating", "test_track_dynamic", "test_fromkeys_operator_modifying_set_operand", "test_constructor", "test_bad_key", "test_iterator_pickling", "test_splittable_del", "g", "__hash__", "test_resize1", "test_values"], "function_calls": ["badseq", "object", "fn", "Hashed", "sorted", "getattr", "Y", "reversed", "NastyKey", "Exc", "id", "CustomReversedDict", "MyDict", "repr", "RuntimeError", "isinstance", "dictlike", "SimpleUserDict", "Foo", "iter", "F", "BadHash", "A", "G", "locals", "hash", "dict", "BogonIter", "dict_getitem_knownhash", "range", "_str", "X", "Custom", "list", "BadCmp", "BadSeq", "ref", "C", "set", "mutate", "BadEq", "int", "next", "zip", "FailingUserDict", "BadRepr", "bool", "exec", "D", "eval", "hasattr", "MyObject", "v", "len", "BadDictKey", "g", "chr", "Mutating", "CustomDict", "ord", "E"], "class_names": ["badseq", "Hashed", "DictTest", "Y", "Exc", "NastyKey", "CustomReversedDict", "baddict1", "MyDict", "CAPITest", "dictlike", "SimpleUserDict", "baddict2", "Foo", "F", "BadHash", "A", "G", "baddict3", "BogonIter", "GeneralMappingTests", "X", "_str", "Custom", "BadCmp", "BadSeq", "C", "BadEq", "FailingUserDict", "BadRepr", "D", "MyObject", "BadDictKey", "Dict", "Mutating", "CustomException", "CustomDict", "SubclassMappingTests", "mydict", "E"], "class_method_calls": ["hashed2.hash_count", "y.setdefault", "a.y", "d.__contains__", "self.__dict__", "mapping_tests.BasicTestMappingProtocol", "od.move_to_end", "self.assertEqual", "self.assertNotEqual", "d.values", "data.values", "self.assertIs", "self.__missing__", "baddict1.fromkeys", "x.keys", "dict.keys", "sys.getsizeof", "random.sample", "dict_b.clear", "self.assertRaises", "b.popitem", "dictlike.fromkeys", "pickle.HIGHEST_PROTOCOL", "x.items", "string.ascii_letters", "a.a", "d1.items", "NastyKey.mutate_dict", "dd.update", "hashed2.eq_count", "self.i", "obj.x", "a.__dict__", "self.assertTrue", "d.fromkeys", "self.assertIsInstance", "f.a", "d.pop", "d.copy", "self.helper_keys_contained", "dict.fromkeys", "other.clear", "self.assertNotIn", "self.y", "self.subTest", "od.items", "self.x", "random.randrange", "random.shuffle", "pickle.loads", "dict.values", "self.assertIsNot", "a.pop", "collections.OrderedDict", "dict_d.clear", "res.update", "gc.collect", "f.msg", "unittest.TestCase", "self.assertFalse", "self.msg", "_testcapi.dict_hassplittable", "self.value", "dict.items", "d2.items", "mydict.fromkeys", "self._tracked", "baddict2.fromkeys", "a.z", "dict_a.clear", "c.exception", "self.hash_count", "d.update", "a.copy", "x.fail", "b.pop", "self.assertGreater", "unittest.main", "sys.getrecursionlimit", "hashed1.hash_count", "obj.v", "baddict3.fromkeys", "self._not_tracked", "a.x", "d3.items", "support.check_free_after_iterating", "self.eq_count", "d.popitem", "d.items", "d.keys", "self.assertIn", "self.make_shared_key_dict", "self.fail", "other.value", "data.items", "dicts.append", "self.check_reentrant_insertion", "a.popitem", "gc.is_tracked", "weakref.ref", "d.clear", "collections.abc", "collections.UserDict", "b.setdefault", "self.d", "support.cpython_only", "f.__dict__", "pickle.dumps", "self.__class__", "d.setdefault", "copy.items", "d.get", "hashed1.eq_count", "d.__getitem__"]}, "test_dict_version.py": {"libraries": ["unittest", "test.support"], "function_names": ["test_popitem", "check_version_unique", "test_setitem_same_value", "test_setitem", "test_update", "check_version_changed", "test_pop", "setUp", "check_version_dont_change", "test_clear", "new_dict", "test_setitem_equal", "test_constructor", "test_delitem", "__eq__", "test_setdefault", "test_copy"], "function_calls": ["method", "object", "AlwaysEqual", "set"], "class_names": ["Dict", "AlwaysEqual", "DictSubtypeVersionTests", "DictVersionTests"], "class_method_calls": ["d.pop", "self.assertEqual", "self.seen_versions", "support.import_module", "self.check_version_unique", "d.copy", "d.popitem", "self.check_version_changed", "self.assertNotIn", "d.update", "_testcapi.dict_get_version", "self.assertRaises", "unittest.TestCase", "d.clear", "self.check_version_dont_change", "unittest.main", "d.__setitem__", "self.new_dict", "self.assertTrue", "d.setdefault", "self.type2test", "self.assertFalse", "d.__delitem__", "self.dict"]}, "test_dictcomps.py": {"libraries": ["unittest"], "function_names": ["test_scope_isolation", "test_global_visibility", "test_evaluation_order", "test_illegal_assignment", "test_scope_isolation_from_global", "test_basics", "test_local_visibility", "add_call"], "function_calls": ["add_call", "zip", "range", "compile"], "class_names": ["DictComprehensionTest"], "class_method_calls": ["actual_calls.append", "self.assertEqual", "unittest.TestCase", "unittest.main", "self.assertRaisesRegex"]}, "test_dictviews.py": {"libraries": ["unittest", "copy", "sys", "pickle", "collections.abc"], "function_names": ["test_abc_registry", "test_dict_repr", "test_compare_error", "test_dict_values", "test_dict_items", "test_items_set_operations", "test_pickle", "__hash__", "test_dict_mixed_keys_items", "test_deeply_nested_repr", "__eq__", "test_copy", "test_keys_set_operations", "test_recursive_repr", "test_constructors_not_callable", "test_dict_keys"], "function_calls": ["list", "len", "set", "tuple", "BadEq", "type", "dict", "range", "repr"], "class_names": ["BadEq", "DictSetTest", "Exc"], "class_method_calls": ["copy.copy", "self.assertIsInstance", "de.keys", "d3.items", "d.__contains__", "self.assertEqual", "self.assertNotEqual", "d.copy", "d.values", "d3.keys", "d2.items", "d.items", "d.keys", "self.assertIn", "self.assertNotIn", "d1.keys", "de.items", "self.assertRaises", "d2.keys", "e.items", "pickle.HIGHEST_PROTOCOL", "collections.abc", "unittest.main", "sys.getrecursionlimit", "pickle.PicklingError", "e.keys", "d1.items", "pickle.dumps", "self.assertTrue", "unittest.TestCase", "self.assertFalse"]}, "test_difflib.py": {"libraries": ["unittest", "doctest", "test.support.findfile", "sys", "test.support.run_unittest", "difflib"], "function_names": ["check", "test_mdiff_catch_stop_iteration", "test_hint_indented_properly_with_tabs", "test_make_file_default_charset", "test_one_insert_homogenous_sequence", "test_one_insert", "test_main", "test_byte_filenames", "test_mixed_types_content", "test_no_trailing_tab_on_empty_filedate", "test_added_tab_hint", "test_byte_content", "test_recursion_limit", "test_is_line_junk_true", "test_comparing_empty_lists", "test_matching_blocks_cache", "test_bjunk", "test_mixed_types_filenames", "test_is_line_junk_REDOS", "test_range_format_context", "assertDiff", "test_is_line_junk_false", "test_tab_delimiter", "test_make_file_usascii_charset_with_nonascii_input", "_assert_type_error", "test_is_character_junk_true", "test_range_format_unified", "test_make_file_iso88591_charset", "test_is_character_junk_false", "test_mixed_types_dates", "test_ratio_for_null_seqn", "test_html_diff", "test_one_delete"], "function_calls": ["check", "list", "test_main", "len", "findfile", "str", "set", "generator", "zip", "assertDiff", "run_unittest", "open", "fmt", "range", "repr"], "class_names": ["TestJunkAPIs", "TestWithAscii", "TestSFpatches", "TestBytes", "TestOutputFormat", "TestSFbugs", "TestAutojunk"], "class_method_calls": ["self.assertIsInstance", "t1a.splitlines", "sm.bjunk", "k.make_table", "html_diff.make_file", "j.make_table", "self.assertAlmostEqual", "self.assertEqual", "sm.ratio", "f1b.splitlines", "patch914575_from1.splitlines", "difflib.IS_CHARACTER_JUNK", "s.get_matching_blocks", "s.quick_ratio", "self.check", "i.make_file", "s.ratio", "patch914575_to2.splitlines", "sm.bpopular", "difflib.SequenceMatcher", "self.assertIn", "difflib.context_diff", "difflib.Differ", "patch914575_from2.splitlines", "ctx.exception", "patch914575_to1.splitlines", "f3.splitlines", "full.replace", "t3.splitlines", "patch914575_nonascii_to1.splitlines", "difflib._mdiff", "self.assertRaises", "difflib._format_range_context", "difflib.HtmlDiff", "t1b.splitlines", "fp.read", "difflib.IS_LINE_JUNK", "i.make_table", "self._assert_type_error", "sys.getrecursionlimit", "sm.get_opcodes", "difflib._format_range_unified", "patch914575_nonascii_from1.splitlines", "difflib.diff_bytes", "doctest.DocTestSuite", "difflib.unified_diff", "f1a.splitlines", "self.assertTrue", "s.real_quick_ratio", "unittest.TestCase", "self.assertFalse"]}, "test_dis.py": {"libraries": ["test.bytecode_helper.BytecodeTestCase", "unittest", "io", "re", "types", "test.dis_module", "dis", "contextlib", "sys", "test.support.captured_stdout"], "function_names": ["check", "test_dis_none", "bug708901", "test_instantiation", "test_disassemble_coroutine", "_error", "do_disassembly_test", "outer", "expected", "test_source_line_in_disassembly", "tricky", "get_disassemble_as_string", "cm", "test_bug_1333982", "test_disassemble_generator", "test_dis_object", "test_dis_traceback", "test_outer", "test_explicit_first_line", "test_show_code", "test_disassemble_class", "test_disassemble_class_method", "test_nested", "test_opname", "jumpy", "test_from_traceback", "get_tb", "_g", "__init__", "test_disassemble_str", "simple", "test_disassemble_instance_method_bytes", "test_disassemble_bytes", "test_pretty_flags_no_flags", "test_bug_708901", "_h", "test_disassemble_instance_method", "test_disassemble_recursive", "test_from_traceback_dis", "test_boundaries", "test_disassemble_static_method", "test_doubly_nested", "test_disassemble_async_generator", "func", "test_default_first_line", "sm", "f", "test_code_info_object", "test_opmap", "_f", "strip_addresses", "get_disassembly", "test_jumpy", "test_info", "test_first_line_set_to_None", "test_big_linenos", "test_disassemble_fstring", "test_iteration", "inner", "test_big_offsets", "_fstring", "test_code_info", "foo", "test_dis", "bug1333982", "test_disassembled", "test_widths"], "function_calls": ["check", "object", "_error", "outer", "expected", "repr", "_ag", "str", "get_tb", "Instruction", "_g", "captured_stdout", "_C", "range", "list", "func", "enumerate", "_co", "len", "exec", "print"], "class_names": ["InstructionTests", "BytecodeTests", "CodeInfoTests", "_C", "DisTests", "DisWithFileTests"], "class_method_calls": ["self.assertIsInstance", "CodeInfoTests.test_pairs", "b.current_offset", "dis.hasname", "self.test_pairs", "coro.close", "sys.flags", "self.assertEqual", "bug708901.__code__", "cls.x", "_h.__code__", "outer.__code__", "sys.last_traceback", "self.assertLessEqual", "dis.opmap", "code_object_f.co_firstlineno", "dis.dis", "tb.tb_frame", "b.info", "_C.cm", "output.getvalue", "self.assertIn", "code_object_f.co_consts", "io.StringIO", "dis.code_info", "dis.pretty_flags", "dis.HAVE_ARGUMENT", "dis.show_code", "dis.Bytecode", "self.get_disassembly", "_f.__code__", "TRACEBACK_CODE.co_firstlineno", "tb.tb_next", "_C.__init__", "self.assertRaises", "self.subTest", "types.CodeType", "self.assertRegex", "re.sub", "_C.sm", "self.do_disassembly_test", "dis.get_instructions", "dis.EXTENDED_ARG", "simple.__code__", "self.x", "dis._OPARG_WIDTH", "bug1333982.__code__", "self.get_disassemble_as_string", "dis.opname", "actual.strip", "dis._OPNAME_WIDTH", "unittest.main", "tricky.__func__", "dis.disassemble", "e.__traceback__", "b.dis", "tb.tb_lasti", "b.codeobj", "contextlib.redirect_stdout", "dis.Instruction", "code_object_inner.co_firstlineno", "self.skipTest", "self.maxDiff", "unittest.TestCase", "self.strip_addresses", "dis.hasconst", "_fstring.__code__"]}, "test_distutils.py": {"libraries": ["test.support", "distutils.tests"], "function_names": ["test_main"], "function_calls": ["test_main"], "class_names": [], "class_method_calls": ["test.support", "distutils.tests"]}, "test_doctest.py": {"libraries": ["unittest", "doctest", "contextlib", "importlib.util", "importlib", "shutil", "sys", "tempfile", "importlib.abc", "test.test_doctest", "test.support", "os", "functools"], "function_names": ["test_lineendings", "displayhook", "optionflags", "test_debug", "sample_func", "double", "test_look_in_unwrapped", "non_Python_modules", "test_main", "test_DocTest", "test_DocFileSuite", "exceptions", "test_pdb_set_trace", "test_Example", "test_testfile", "test_pdb_set_trace_nested", "get", "test_empty_namespace_package", "__call__", "__init__", "basics", "find_spec", "test_hook", "test_testsource", "test_coverage", "square", "test_DocTestSuite", "get_data", "test_unittest_reportflags", "a_staticmethod", "test_no_trailing_whitespace_stripping", "a_classmethod", "verbose_flag", "remove", "test_unicode", "option_directives", "test_CLI", "readline", "test_testmod", "test_DocTestParser", "test_trailing_space_in_test"], "function_calls": ["SampleClass", "test_coverage", "test_main", "len", "TestHook", "TestImporter", "property", "SampleNewStyleClass", "staticmethod", "classmethod", "hasattr", "open", "print"], "class_names": ["SampleClass", "TestHook", "TestImporter", "SampleNewStyleClass", "TestDocTestFinder", "Wrapper", "test_DocTestRunner", "test_DocTestFinder", "_FakeInput", "NestedClass"], "class_method_calls": ["os.mkdir", "sys.base_exec_prefix", "tracer.results", "self.meta_path", "self.modules_before", "support.run_doctest", "sys.path_hooks", "self.assertEqual", "importlib.abc", "support.import_module", "tracer.run", "sys.modules", "self.path_hooks", "os.fsencode", "importlib.import_module", "self.func", "importlib.util", "tempfile.TemporaryDirectory", "support.forget", "exclude_empty_finder.find", "int.__doc__", "functools.update_wrapper", "f.read", "self.lines", "self.sys_path", "sys.meta_path", "SampleClass.NestedClass", "self.val", "support.run_unittest", "doctest.DocTestFinder", "contextlib.contextmanager", "hook.remove", "r.write_results", "include_empty_finder.find", "sys.base_prefix", "sys.path", "os.path", "trace.Trace", "self.importer", "sys.path_importer_cache", "sys.argv", "sys.gettrace", "unittest.TestCase"]}, "test_doctest2.py": {"libraries": ["unittest", "test.test_doctest2", "doctest.*", "sys", "test.support"], "function_names": ["getx", "__str__", "test_main", "statm", "clsm", "__init__", "nested", "setx"], "function_calls": ["test_main", "property"], "class_names": ["D", "C"], "class_method_calls": ["unittest.SkipTest", "sys.flags", "support.run_doctest", "support.TestFailed", "self._x"]}, "test_docxmlrpc.py": {"libraries": ["unittest", "re", "threading", "http.client", "sys", "xmlrpc.server.DocXMLRPCServer"], "function_names": ["test_autolinking", "make_request_and_skip", "make_request_and_skipIf", "method_annotation", "setUp", "test_server_title_escape", "test_autolink_dotted_methods", "test_method", "test_valid_get_response", "add", "test_lambda", "test_invalid_get_response", "test_system_methods", "test_annotations", "tearDown", "decorator", "annotation", "make_server"], "function_calls": ["make_server", "TestClass", "DocXMLRPCServer", "ClassWithAnnotation", "make_request_and_skipIf"], "class_names": ["ClassWithAnnotation", "DocXMLRPCHTTPGETServer", "TestClass"], "class_method_calls": ["self.client", "sys.flags", "serv.register_introspection_functions", "serv.set_server_title", "self.thread", "self.assertEqual", "self.arg", "re.search", "unittest.SkipTest", "serv.set_server_documentation", "self.assertIn", "http.client", "serv.register_instance", "self.serv", "x.decode", "unittest.main", "serv.server_close", "serv.register_function", "response.getheader", "DocXMLRPCServer._send_traceback_header", "response.status", "serv.set_server_name", "response.read", "unittest.TestCase", "threading.Thread"]}, "test_dtrace.py": {"libraries": ["unittest", "re", "types", "os.path", "dis", "test.support.findfile", "sys", "subprocess", "test.support.run_unittest"], "function_names": ["trace", "test_main", "test_gc", "get_function_instructions", "setUpClass", "run_case", "trace_python", "test_verify_call_opcodes", "test_function_entry_return", "normalize_trace_output", "test_line", "abspath", "assert_usable", "generate_trace_command"], "function_calls": ["normalize_trace_output", "isinstance", "test_main", "compile", "findfile", "get_function_instructions", "str", "DTraceBackend", "set", "int", "SystemTapBackend", "open", "run_unittest", "abspath", "AssertionError"], "class_names": ["TraceBackend", "SystemTapNormalTests", "TraceTests", "SystemTapOptimizedTests", "DTraceNormalTests", "DTraceOptimizedTests", "DTraceBackend", "SystemTapBackend"], "class_method_calls": ["self.trace_python", "self.optimize_python", "sys.executable", "self.assertEqual", "unittest.SkipTest", "self.run_case", "self.EXTENSION", "c.co_name", "subprocess.Popen", "instruction.opname", "subprocess.STDOUT", "f.read", "output.splitlines", "self.COMMAND", "types.CodeType", "re.sub", "row.startswith", "dis.get_instructions", "python_flags.extend", "self.backend", "subprocess.PIPE", "code.co_consts", "self.generate_trace_command", "self.trace", "os.path", "result.sort", "row.split", "output.strip", "opcodes.discard", "unittest.TestCase"]}, "test_dummy_thread.py": {"libraries": ["unittest", "time", "_dummy_thread", "random", "queue", "unittest.mock", "test.support"], "function_names": ["test_multi_thread_creation", "test_uncond_acquire_success", "test_acquire_timeout", "setUp", "queue_mark", "test_LockType", "test_exit", "test_arg_passing", "test_uncond_acquire_return_val", "test_cond_acquire_success", "test_SystemExit", "test_stack_size_None", "test_uncond_acquire_blocking", "test_LockType_context_manager", "test_stack_size_not_None", "test_ident", "test_set_sentinel", "test_cond_acquire_fail", "test_interrupt_main", "test_RaiseException", "test_interrupt_in_main", "test_initlock", "test_kwargs_not_dict", "delay_unlock", "arg_tester", "test_lock_representation", "test_multiple_acquire", "test_release", "test_args_not_tuple", "test_improper_release", "call_interrupt"], "function_calls": ["SystemExit", "tuple", "int", "print", "round", "range", "repr"], "class_names": ["ThreadTests", "LockTests", "MiscTests", "RLockTests"], "class_method_calls": ["self.assertIsInstance", "to_unlock.release", "time.monotonic", "self.assertEqual", "testing_queue.get", "_thread.LockType", "mock_sleep.called", "self.assertGreaterEqual", "_thread._set_sentinel", "cm.exception", "_thread.error", "_thread.interrupt_main", "self.assertIs", "queue.Queue", "mock.Mock", "testing_queue.qsize", "self.assertIn", "self.fail", "_thread.exit", "self.lock", "_thread.RLock", "_thread.start_new_thread", "self.assertRaises", "self.rlock", "_thread.get_ident", "support.verbose", "self.assertGreater", "_thread.allocate_lock", "mock_print_exc.called", "mock.patch", "unittest.main", "queue.put", "time.sleep", "mock_sleep.assert_called_once_with", "random.random", "self.assertTrue", "unittest.TestCase", "self.assertFalse", "_thread.stack_size"]}, "test_dummy_threading.py": {"libraries": ["unittest", "test.support", "dummy_threading", "time"], "function_names": ["setUp", "test_tasks", "run"], "function_calls": ["range", "print"], "class_names": ["TestThread", "DummyThreadingTestCase"], "class_method_calls": ["_threading.BoundedSemaphore", "time.sleep", "self.numtasks", "t.start", "self.name", "t.join", "support.verbose", "self.threads", "mutex.acquire", "_threading.Thread", "self.TestThread", "_threading.RLock", "unittest.TestCase", "sema.acquire", "mutex.release", "unittest.main", "sema.release"]}, "test_dynamic.py": {"libraries": ["unittest", "test.support.swap_item", "test.support.swap_attr", "builtins"], "function_names": ["test_eval_gives_lambda_custom_globals", "configure_func", "test_cannot_replace_builtins_dict_between_calls", "test_cannot_change_globals_or_builtins_with_exec", "test_cannot_replace_builtins_dict_while_active", "bar", "test_modify_builtins", "test_cannot_change_globals_or_builtins_with_eval", "test_modify_builtins_while_generator_active", "foo", "test_modify_builtins_from_leaf_function", "test_globals_shadow_builtins"], "function_calls": ["len", "swap_attr", "modifier", "globals", "next", "foo", "eval", "range", "exec", "swap_item"], "class_names": ["RebindBuiltinsTests"], "class_method_calls": ["l.append", "builtins.len", "self.configure_func", "self.assertEqual", "unittest.TestCase", "unittest.main"]}, "test_dynamicclassattribute.py": {"libraries": ["abc", "sys", "types.DynamicClassAttribute", "unittest"], "function_names": ["test_abstract_virtual", "test_property_decorator_baseclass", "color", "spam", "test_property_decorator_baseclass_doc", "test_docstring_copy", "test_property_getter_doc_override", "test_property_setter_copies_getter_docstring", "test_slots_docstring_copy_exception", "test_property_decorator_subclass", "test_property_decorator_subclass_doc", "test_property___isabstractmethod__descriptor", "__init__", "__bool__", "test_property_new_getter_new_docstring", "foo", "_get_spam", "test_property_decorator_doc"], "function_calls": ["PropertyDocBase", "Okay2", "Okay1", "PropertyDel", "FooSub", "DynamicClassAttribute", "Foo", "BaseClass", "PropertyNewGetter", "NotBool", "Exception", "PropertyDocSub", "ValueError", "SubClass", "bool", "delattr", "hasattr", "PropertySet", "PropertySubNewGetter", "PropertyGet", "print"], "class_names": ["PropertyTests", "PropertyBase", "ClassWithPropertyAbstractVirtual", "PropertyDocBase", "APV", "Okay1", "Okay2", "PropertyDel", "FooSub", "Foo", "PropertySubclassTests", "BaseClass", "Foo2", "PropertyNewGetter", "NotBool", "PropertyDocSub", "AVP", "PropertySubSlots", "C", "SubClass", "PropertySub", "FooBase", "ClassWithAbstractVirtualProperty", "PropertySet", "PropertySubNewGetter", "PropertyGet"], "class_method_calls": ["FooBase.__dict__", "newgettersub.spam", "sys.flags", "base._spam", "Okay2.color", "spam.setter", "base.spam", "spam.getter", "self.assertEqual", "base.__class__", "self._color", "BaseClass.__dict__", "self.assertIs", "spam.__doc__", "C.__dict__", "foo.spam", "self._spam", "self.assertRaises", "unittest.skipIf", "Okay1.color", "FooSub.__dict__", "abc.ABCMeta", "spam.deleter", "newgettersub.__class__", "PropertyDocBase.__dict__", "foo.__isabstractmethod__", "foosub.spam", "unittest.main", "abc.abstractmethod", "newgetter.spam", "newgetter.__class__", "Foo.__dict__", "self.assertTrue", "sub.__class__", "unittest.TestCase"]}, "test_eintr.py": {"libraries": ["unittest", "signal", "sys", "subprocess", "test.support", "os", "test.support.script_helper"], "function_names": ["test_all"], "function_calls": ["print", "hasattr"], "class_names": ["EINTRTests"], "class_method_calls": ["script_helper.assert_python_ok", "support.findfile", "support.verbose", "subprocess.run", "self.fail", "sys.executable", "unittest.skipUnless", "os.name", "unittest.TestCase", "unittest.main", "proc.returncode"]}, "test__encoded_words.py": {"libraries": ["unittest", "email.errors", "test.test_email.TestEmailBase", "email._encoded_words"], "function_names": ["test_simple_q", "test_wrong_format_input_raises", "_test", "test_nonnull_lang", "test_auto_q", "test_b_invalid_bytes_ignored_with_defect", "test_unknown_8bit_charset", "test_non_trivial_q", "test_utf8_default", "test_spaces", "test_q_case_ignored", "test_b", "test_q_escaped_bytes_preserved", "test_b_invalid_bytes_incorrect_padding", "test_invalid_character", "test_all_safe", "test_q_nonascii", "test_run_of_encodables", "test_lang", "test_unknown_8bit", "test_b_padding_defect", "test_padding", "test_run_of_encoded", "test_auto_q_if_long_mostly_safe", "test_b_case_ignored", "test_simple", "test_invalid_length", "test_auto_q_if_short_mostly_safe", "test_unknown_charset", "test_b_undecodable_bytes_ignored_with_defect", "test_missing_padding", "test_auto_b_if_enough_unsafe", "test_simple_b", "test_q", "test_invalid_character_and_bad_padding", "test_auto_b_if_long_unsafe", "test_no_encoded"], "function_calls": [], "class_names": ["TestDecode", "TestEncodeB", "TestDecodeQ", "TestEncode", "TestEncodeQ", "TestDecodeB"], "class_method_calls": ["_ew.decode", "_ew.encode_b", "_ew.decode_q", "self.assertRaises", "self.assertEqual", "errors.InvalidBase64PaddingDefect", "_ew.encode", "self._test", "_ew.encode_q", "errors.UndecodableBytesDefect", "errors.InvalidBase64LengthDefect", "errors.InvalidBase64CharactersDefect", "errors.CharsetError", "unittest.main", "_ew.decode_b", "self.assertDefectsEqual"]}, "test__header_value_parser.py": {"libraries": ["unittest", "email.errors", "email.policy", "test.test_email.parameterize", "test.test_email.TestEmailBase", "string", "email._header_value_parser"], "function_names": ["test_simple_unstructured_folded", "test_get_encoded_word_internal_spaces", "test_get_unstructured_phrase_with_two_ew", "test_get_unstructured_normal_phrase", "test_get_local_part_simple_quoted", "test_get_name_addr_no_content_before_special_raises", "test_get_dot_atom_space_ends_dot_atom", "test_get_bare_quoted_string_only_quotes", "test_get_local_part_with_whitespace", "test_get_cfws_header_ends_in_comment", "test_get_word_all_CFWS", "test__wsp_splitter_one_word", "test_get_qp_ctext_up_to_close_paren_only", "test_get_encoded_word_missing_start_raises", "test_get_group_single_mailbox", "test_get_dot_atom_trailing_dot_raises", "test_get_local_part_trailing_dot", "test_invalid_content_disposition", "test_get_qp_ctext_wsp_before_close_paren_preserved", "test_get_bare_quoted_string_empty_quotes", "test_get_phrase_obsolete", "test_get_address_empty_group", "test_get_msg_id_no_angle_end", "test_get_fws_only", "test_get_atom_only", "test_get_qp_ctext_two_words_gets_first", "test_get_unstructured_invalid_ew_cte", "test_get_phrase_pharse_must_start_with_word", "test_get_local_part_quoted_with_cfws", "test_get_dot_atom_no_atom_raises", "test_get_atom_no_atom", "test_get_address_list_mailboxes_two_simple", "test_get_msg_id_obsolete_local", "test_get_group_list_obs_group_list", "test_get_atext_up_to_special", "test_get_phrase_simple", "test_get_domain_literal_only", "test_get_addr_spec_quoted_strings_in_atom_list", "mime_parameters_as_value", "test_get_mailbox_list_two_complex", "test_get_domain_literal_with_internal_ws", "test_get_group_list_comment_only_invalid", "test_get_address_list_mailboxes_invalid_addresses", "test_get_qp_ctext_up_to_open_paren_only", "test_get_obs_route_no_route_before_end_raises", "test_get_addr_spec_with_qouoted_string_and_cfws", "test_get_group_cfws_only", "test_get_qcontent_two_words_gets_first", "test_get_name_addr_no_content_raises", "test_get_cfws_ends_at_non_printable", "test_get_bare_quoted_string_no_end_dquote", "test_get_comment_end_paren_mid_word", "test_get_dot_atom_text_raises_on_leading_non_atext", "test_get_quoted_string_header_ends_in_qcontent", "test_get_local_part_with_quoted_dot", "test_get_obs_route_complex", "test_get_group_mixed_list", "test_get_address_list_mailboxes_simple", "test_get_group_list_mailbox_list", "test_get_qp_ctext_close_paren_mid_word", "test_get_msg_id_no_id_right_part", "test_get_msg_id_invalid_expected_msg_id_not_found", "test_get_dtext_wsp_before_open_bracket_preserved", "test_get_name_addr_angle_addr_only", "test_get_cfws_only_ws", "test_get_dot_atom_text_lone_atom_is_valid", "test_split_at_whitespace_after_header_before_long_token", "test_get_qcontent_wsp_before_close_paren_preserved", "test_get_unstructured_phrase_with_ew_with_leading_ws", "test_get_comment_only", "test_get_dot_atom_rfc2047_atom", "test_get_address_list_group_simple", "test_get_dot_atom_with_wsp", "test_get_quoted_string_no_quoted_string", "test_get_unstructured_trailing_whitespace", "test_get_comment_no_end_paren", "test_get_bare_quoted_string_quoted_dquote", "test_get_local_part_quoted_strings_in_atom_list", "test_get_dtext_two_words_gets_first", "test_get_local_part_leading_dot", "test_get_fws_space", "test_simple_address", "test_get_unstructured_normal_phrase_with_whitespace", "test_get_dtext_only", "test_get_angle_addr_with_cfws", "test_get_angle_addr_qs_and_domain_literal", "test_get_display_name_simple", "test_get_encoded_word_gets_first_even_if_no_space", "test_get_unstructured_ew_with_internal_ws", "test_get_qp_ctext_wsp_before_open_paren_preserved", "test_get_address_quoted_strings_in_atom_list", "test_get_unstructured_phrase_with_two_ew_extra_ws", "test_long_filename_attachment", "test_get_local_part_double_dot_raises", "test_get_name_addr_with_route", "test_get_atom_non_printable_in_comment", "test_get_msg_id_obsolete_domain_part", "test_EWWhiteSpaceTerminal", "test_get_addr_spec_with_cfws", "test_get_name_addr_no_angle_after_display_name_raises", "test_get_qp_ctext_following_wsp_preserved", "test_get_dtext_following_wsp_preserved", "test_get_comment_quoted_parens", "test_get_display_name_ending_with_obsolete", "test_get_local_part_with_dot", "test_get_quoted_string_non_printable_in_qcontent", "test_get_dtext_non_printables", "test_get_encoded_word_quopri_utf_escape_follows_cte", "test_get_comment_empty_comment", "test_get_dtext_open_bracket_mid_word", "test_get_group_null_addr_spec", "test_get_msg_id_valid", "test_get_display_name_for_invalid_address_field", "test_get_dtext_up_to_open_bracket_only", "test_get_unstructured_one_valid_ew_no_ws", "test_get_obs_route_no_route_before_special_raises2", "test_get_comment_qs_in_nested_comment", "_test_get_x", "test_get_qcontent_following_wsp_preserved", "test_get_quoted_string_qs_ends_at_noncfws", "test_get_dot_atom_with_comments_and_wsp", "test_get_bare_quoted_string_end_dquote_mid_word", "test_get_unstructured_leading_whitespace", "test_get_encoded_word_invalid_cte", "test_get_domain_domain_literal_with_cfws_ends_at_special", "test_get_msg_id_non_folding_literal_domain", "test_get_address_quoted_local_part", "test_get_dot_atom_text_trailing_ws_preserved", "test_address_list_with_unicode_names", "test_get_encoded_word_leading_internal_space", "test_get_encoded_word_missing_middle_raises", "test_get_angle_addr_obs_route", "test_get_group_one_invalid", "test_get_cfws_only_mixed", "test_get_unstructured_two_ew_extra_ws_trailing_text", "test_get_quoted_string_with_multiple_comments", "test_get_local_part_with_cfws", "test_get_qcontent_up_to_dquote_only", "get_phrase_cfws_only_raises", "test_get_comment_non_printable", "test_get_mailbox_list_two_simple_addr", "test_get_name_addr_atom_name_with_cfws", "test_get_dot_atom_text_raises_on_trailing_dot", "test_get_bare_quoted_string_only", "test_get_comment_multiple_nesting", "test_get_obs_route_simple", "test_get_addr_spec_multiple_domains", "test_get_word_qs_yields_qs", "test_get_local_part_unicode_defect", "test_get_bare_quoted_string_missing_endquotes", "test_get_address_list_group_empty", "test_get_qcontent_all_printables", "test_get_unstructured_without_trailing_whitespace_hang_case", "test_get_msg_id_no_angle_start", "test_get_mailbox_ends_at_special", "test_get_word_ends_at_dot", "test_get_angle_addr_missing_closing_angle", "test_split_at_whitespace_before_long_token", "test_get_dot_atom_two_dots_raises", "test_get_domain_literal_no_start_char_before_special_raises", "test_get_addr_spec_dot_atom", "test_get_unstructured_leading_and_trailing_whitespace", "test_get_address_list_group_and_mailboxes", "test_get_cfws_ends_at_non_leader", "test_get_local_part_valid_and_invalid_qp_in_atom_list", "test_get_local_part_simple", "test_get_domain_literal_with_surrounding_cfws", "test_simple_unstructured_no_folds", "test_unstructured_with_unicode_no_folds", "test_get_qp_ctext_all_printables", "test_get_encoded_word_gets_first", "test_get_mailbox_list_single_addr", "test_get_domain_regular_domain_only", "test_get_mailbox_name_addr", "test_get_addr_spec_ends_at_special", "test_get_dtext_all_dtext", "test_get_mailbox_quoted_strings_in_atom_list", "test_get_unstructured_invalid_ew", "test_get_mailbox_list_only_empty_elements", "test_get_name_addr_atom_name", "test_get_local_part_trailing_dot_with_ws", "test_get_mailbox_list_unparseable_mailbox_null", "test_get_name_addr_name_with_cfws_and_dots", "test_get_atom_with_multiple_comments", "test_get_name_addr_ends_at_special", "test_get_mailbox_list_junk_after_valid_address", "test_get_domain_literal_no_start_char_raises", "test_get_atom_header_ends_in_comment", "test_get_group_list_cfws_only", "test_get_unstructured_ew_without_trailing_whitespace", "test_get_cfws_non_printable_in_comment", "test_get_angle_addr_internal_cfws", "test_get_phrase_complex", "test_get_encoded_word_non_printable_defect", "test_get_group_empty", "test__wsp_splitter_two_words", "test_get_addr_spec_with_doamin_literal", "test_get_atom_with_wsp", "test_get_quoted_string_internal_ws", "test_get_qcontent_close_paren_mid_word", "test_get_unstructured_undecodable_bytes", "test_overlong_encodeable_is_wrapped", "test_get_unstructured_one_ew_trailing_ws", "test_get_display_name_complex1", "test_get_atext_following_wsp_preserved", "test_get_domain_literal_bad_dtext_char_before_special_raises", "test_get_comment_nested_comment_wsp", "test_get_comment_missing_end_of_nesting", "test_get_unstructured_no_whitespace_between_ews", "test_get_domain_no_non_cfws_raises", "test_get_quoted_string_with_wsp", "test_get_mailbox_angle_addr_only", "test_get_angle_addr_special_after_angle_raises", "test_get_qp_ctext_open_paren_mid_word", "test_get_addr_spec_normal", "test_get_phrase_ending_with_obsolete", "test_get_word_atom_yields_atom", "test_get_quoted_string_with_comments_and_wsp", "test_get_address_simple", "test_get_qcontent_only", "test_get_address_list_mailboxes_complex", "test_get_dot_atom_only", "test_get_comment_following_wsp_preserved", "test_get_bare_quoted_string_following_wsp_preserved", "test_get_unstructured_ew_with_internal_leading_ws", "test_get_local_part_complex_obsolete_invalid", "test_get_local_part_simple_obsolete", "test_get_dot_atom_text_trailing_text_preserved", "test_get_dtext_wsp_before_close_bracket_preserved", "test_get_display_name_pharse_must_start_with_word", "test_get_angle_addr_no_angle_raise", "test_parse_message_id_with_remaining", "test_get_angle_addr_no_angle_raises", "test_get_mailbox_list_two_name_addr", "test_get_address_rfc2047_display_name", "test_get_unstructured_missing_base64_padding", "test_get_bare_quoted_string_must_start_with_dquote", "test_parse_valid_message_id", "test_get_name_addr_qs_name", "test_get_quoted_string_non_printable_in_comment", "test_ews_combined_before_wrap", "_test", "test__wsp_splitter_ws_runs", "test_get_address_list_CFWS", "test_get_comment_multiple_words", "test_get_local_part_special_instead_raises", "_get_unst", "test_get_unstructured_invaild_ew", "test_get_dot_atom_text_raises_on_leading_dot", "test_get_domain_domain_literal_with_cfws", "test_get_display_name_obsolete", "test_address_list_with_unicode_names_in_quotes", "test_get_qp_ctext_only", "test_address_list_folding_at_commas", "test_get_atom_atom_ends_at_special", "test_get_unstructured_one_word", "test_get_local_part_complex_obsolete_1", "test_get_display_name_complex2", "test_get_unstructured_phrase_with_two_ew_trailing_ws", "test_get_atom_non_printable_in_atext", "test_get_address_ends_at_special", "test_get_quoted_string_only", "test_get_encoded_word_sets_extra_attributes", "test_get_address_complex", "test_get_address_invalid_mailbox_invalid", "test_get_dtext_with_qp", "test_get_obs_route_no_route_before_special_raises", "test_get_address_group", "test_get_atext_only", "test_get_unstructured_phrase_with_ew_in_middle_of_text", "test_get_local_part_quoted_with_whitespace", "test_get_atom_rfc2047_atom", "test_get_dtext_up_to_close_bracket_only", "test_get_cfws_multiple_nested_comments", "test_get_angle_addr_simple", "test_get_bare_quoted_string_multiple_words_wsp_preserved", "test_get_angle_addr_qs_only_quotes", "test_get_mailbox_addr_spec_only", "mime_version_as_value", "test_get_encoded_word_missing_end_raises", "test_get_angle_addr_ends_at_special", "test_get_angle_addr_no_angle_before_special_raises", "test_get_domain_domain_literal_only", "test_get_quoted_string_header_ends_in_comment", "test_get_dot_atom_leading_dot_raises", "test_get_atom_no_atom_before_special", "test_get_fws_ws_run", "test_get_comment_nested_comment", "test_get_bare_quoted_string_multiple_words", "test_get_unstructured_ew_without_leading_whitespace", "test_get_angle_addr_missing_closing_angle_with_cfws", "test_get_atom_with_comments_and_wsp", "test_get_group_missing_final_semicol", "test_get_comment_multiple_words_wsp_preserved", "test_get_unstructured_null", "test_encoded_word_inside_quotes", "test_get_local_part_no_part_raises", "test_get_domain_no_atom_raises", "test_get_encoded_word_valid_ew", "_assert_results", "test_get_domain_obsolete", "test_get_angle_addr_empty", "_test_parse_x", "test_get_qp_ctext_non_printables", "test_get_unstructured_invalid_base64_character_and_bad_padding", "test_get_domain_with_cfws", "test_one_ew_on_each_of_two_wrapped_lines", "test_get_atom_atom_ends_at_noncfws", "test_invalid_content_transfer_encoding", "test_get_comment_must_start_with_paren", "test_get_atext_two_words_gets_first", "test_get_bare_quoted_string_non_printables", "test_get_cfws_only_comment", "test_get_unstructured_one_valid_ew_trailing_text", "test_get_atext_all_atext", "test_get_dtext_close_bracket_mid_word", "test_get_unstructured_invalid_base64_character", "test_get_local_part_leading_dot_after_ws", "test_get_mailbox_list_empty_list_element", "test_get_domain_domain_with_cfws_ends_at_special", "test_get_unstructured_invalid_base64_length", "test_parse_invalid_message_id", "test_get_atext_non_printables", "test_get_qcontent_non_printables", "test_get_msg_id_empty", "test_get_dot_atom_text", "test_get_encoded_word_lang_default_is_blank", "test_get_unstructured_undecodable_bytes_in_EW"], "function_calls": ["list", "len", "method", "str", "bytes", "range"], "class_names": ["TestParserMixin", "TestFolding", "TestParser", "Test_parse_mime_parameters", "Test_parse_mime_version", "TestTokens"], "class_method_calls": ["word.content", "rfc_printable_ascii.translate", "mailbox.domain", "errors.InvalidHeaderDefect", "group.all_mailboxes", "ptext.defects", "tl.fold", "domain_literal.ip", "parser.get_mailbox_list", "self.assertEqual", "self._test", "self.rfc_dtext_chars", "parser.ValueTerminal", "tl.ppstr", "self.assertIs", "name_addr.token_type", "dtext.token_type", "parser.get_dtext", "errors.InvalidBase64PaddingDefect", "errors.ObsoleteHeaderDefect", "name_addr.domain", "qs.quoted_value", "self.assertRaises", "mailbox.route", "comment.token_type", "parser.get_bare_quoted_string", "parser.get_dot_atom", "ew.lang", "local_part.local_part", "parser.get_name_addr", "mailbox.addr_spec", "string.ascii_letters", "self.assertDefectsEqual", "parser.get_group_list", "parser.get_encoded_word", "self.rfc_printable_ascii", "group_list.token_type", "parser.get_phrase", "parser._wsp_splitter", "group.mailboxes", "tl.value", "angle_addr.addr_spec", "domain_literal.domain", "qs.token_type", "name_addr.local_part", "parser.parse_message_id", "name_addr.display_name", "cfws.token_type", "qs.content", "msg_id.token_type", "tl.all_defects", "parser.get_word", "errors.InvalidBase64CharactersDefect", "ptext.token_type", "parser.parse_content_transfer_encoding_header", "parser.HeaderLabel", "parser.get_mailbox", "group.display_name", "address_list.addresses", "phrase.token_type", "mailbox.display_name", "errors.NonPrintableDefect", "group_list.mailboxes", "addr_spec.addr_spec", "addr_spec.local_part", "mailbox.token_type", "parser.WhiteSpaceTerminal", "domain.domain", "self.assertIsNone", "angle_addr.token_type", "x.token_type", "comment.content", "parser.get_msg_id", "obs_route.token_type", "message_id.all_defects", "parser.CFWSList", "message_id.token_type", "dtext.defects", "address_list.all_mailboxes", "self._get_unst", "string.digits", "parser.get_atom", "display_name.value", "dot_atom.token_type", "address.token_type", "display_name.display_name", "ew.charset", "display_name.token_type", "address.mailboxes", "parser.get_local_part", "parser.get_address_list", "parser.parse_mime_parameters", "atext.defects", "self._test_parse_x", "bqs.token_type", "atom.token_type", "address_list.mailboxes", "mailbox_list.token_type", "address.all_mailboxes", "dot_atom_text.token_type", "atext.token_type", "with_qp.replace", "parser.get_quoted_string", "parser.get_address", "parser.get_domain_literal", "group.token_type", "errors.HeaderParseError", "unittest.main", "x.value", "parser.Header", "mime_parameters.params", "parser.get_cfws", "addr_spec.token_type", "group_list.all_mailboxes", "addr_spec.domain", "mailbox.local_part", "parser.get_qp_ctext", "parser.get_atext", "local_part.token_type", "domain_literal.token_type", "parser.get_obs_route", "self._assert_results", "parser.get_display_name", "mailbox_list.all_mailboxes", "name_addr.route", "errors.NonASCIILocalPartDefect", "parser.EWWhiteSpaceTerminal", "parser.get_angle_addr", "self._test_get_x", "parser.get_unstructured", "angle_addr.route", "parser.get_dot_atom_text", "mime_parameters.token_type", "angle_addr.domain", "parser.get_qcontent", "domain.token_type", "parser.get_group", "msg_id.all_defects", "parser.parse_mime_version", "mime_version.major", "errors.InvalidBase64LengthDefect", "name_addr.addr_spec", "angle_addr.local_part", "mime_version.minor", "str.maketrans", "fws.token_type", "self.rfc_atext_chars", "parser.get_comment", "parser.get_addr_spec", "errors.UndecodableBytesDefect", "tl.comments", "parser.get_fws", "policy.default", "obs_route.domains", "word.token_type", "address_list.token_type", "parser.parse_content_disposition_header", "errors.HeaderMissingRequiredValue", "mailbox_list.mailboxes", "parser.get_domain"]}, "test_asian_codecs.py": {"libraries": ["unittest", "email.header.Header", "email.message.Message", "email.charset.Charset", "email.header.decode_header", "test.test_email.TestEmailBase"], "function_names": ["test_japanese_codecs", "test_payload_encoding_utf8", "test_payload_encoding"], "function_calls": ["eq", "str", "Message", "Charset", "Header", "decode_header"], "class_names": ["TestEmailAsianCodecs"], "class_method_calls": ["h.append", "unittest.SkipTest", "msg.get_payload", "self.ndiffAssertEqual", "msg.get_content_charset", "self.assertEqual", "msg.set_payload", "unittest.main", "h.encode"]}, "test_contentmanager.py": {"libraries": ["unittest", "textwrap", "email.contentmanager.ContentManager", "email.contentmanager.raw_data_manager", "test.test_email.parameterize", "email.message.EmailMessage", "test.test_email.TestEmailBase", "email.policy"], "function_names": ["test_set_text_charset_latin_1", "test_set_text_11_lines_long_line_maximal_non_ascii_heuristics", "set_key_as_set_content_key", "test_set_disposition_foo", "test_set_headers_from_strings", "foo_getter", "foo_setter", "get_key_as_get_content_key", "test_set_text_maximal_non_ascii_heuristics", "test_set_filename_and_disposition_inline", "test_set_headers_with_invalid_duplicate_header_header_raises", "bar_getter", "test_get_non_text", "test_get_text_plain_bad_utf8_quoted_printable_ignore_errors", "test_get_content_raises_if_unknown_mimetype_and_no_default", "test_set_text_11_lines_long_line_minimal_non_ascii_heuristics", "test_set_text_11_lines_maximal_non_ascii_heuristics", "content_object_as_disposition_inline_receiver", "test_set_video_mpeg_with_binary_cte", "content_object_as_cid_receiver", "test_set_text_plain_null", "test_set_filename", "test_get_text_plain_latin1", "test_set_headers_with_invalid_duplicate_string_header_raises", "test_set_disposition_inline", "test_set_headers_from_header_objects", "bar_setter", "test_get_text_plain_latin1_quoted_printable", "test_get_text_plain_utf8_base64", "test_get_text_invalid_keyword", "test_set_disposition_attachment", "content_object_as_params_receiver", "set_key_as_set_content_key_order", "test_set_text_non_ascii_with_cte_7bit_raises", "test_set_image_jpg", "test_set_content_raises_if_unknown_type_and_no_default", "test_set_message", "test_set_text_short_line_minimal_non_ascii_heuristics", "test_set_text_plain", "test_set_headers_with_defective_header_header_raises", "test_set_text_plain_long_line_heuristics", "test_set_application_octet_stream_with_8bit_cte", "test_set_text_long_line_maximal_non_ascii_heuristics", "test_get_message_non_rfc822_or_external_body_yields_bytes", "test_set_non_ascii_filename", "test_get_text_html", "test_get_raises_on_multipart", "test_set_message_invalid_cte_raises", "test_set_content_calls_clear_content", "test_set_text_long_line_minimal_non_ascii_heuristics", "test_set_content_raises_if_called_on_multipart", "test_set_headers_with_defective_string_header_raises", "content_object_as_header_receiver", "test_get_non_text_invalid_keyword", "test_get_message_rfc822_and_external_body", "test_set_text_non_ascii_with_cte_7bit_and_charset_ascii_raises", "test_set_text_non_ascii_with_charset_ascii_raises", "test_get_text_plain", "test_get_text_plain_bad_utf8_quoted_printable", "content_object_as_non_ascii_filename_receiver", "test_set_audio_aif_with_quoted_printable_cte", "test_set_message_with_non_ascii_and_coercion_to_7bit", "test_get_text_plain_utf8_base64_recoverable_bad_CTE_data", "get_key_as_get_content_key_order", "test_set_text_html"], "function_calls": ["isinstance", "bytearray", "ContentManager", "message", "str", "memoryview", "bytes", "header_factory", "print"], "class_names": ["TestRawDataManager", "TestContentManager", "Thing", "BaseThing"], "class_method_calls": ["self.assertIsInstance", "cm.get_content", "self.assertEqual", "raw_data_manager.set_content", "cm.add_get_handler", "content.set_content", "self.get_key_params", "self.assertRaisesRegex", "msg.set_payload", "cm.set_content", "self.message", "self.assertIn", "template.format", "self._make_message", "m.as_string", "self.Thing", "m.get_payload", "ar.exception", "cm.add_set_handler", "self.subTest", "m.set_payload", "self.assertRaises", "m.get_content", "self.testobject_full_path", "self.assertIsNone", "unittest.main", "textwrap.dedent", "policy.default", "m.get_filename", "m.set_content", "self.policy", "raw_data_manager.get_content", "self._bytes_msg", "self._str_msg"]}, "test_defect_handling.py": {"libraries": ["unittest", "email.errors", "contextlib", "textwrap", "test.test_email.TestEmailBase", "email.policy"], "function_names": ["test_first_line_is_continuation_header", "test_multipart_no_boundary", "test_same_boundary_inner_outer", "test_multipart_valid_cte_no_defect", "test_lying_multipart", "test_missing_start_boundary", "test_missing_header_body_separator", "test_bad_padding_in_base64_payload", "test_missing_ending_boundary", "setUp", "get_defects", "test_multipart_invalid_cte", "_raise_point", "test_invalid_length_of_base64_payload", "test_multipart_no_cte_no_defect", "register_defect", "test_invalid_chars_in_base64_payload"], "function_calls": ["list", "len", "hasattr"], "class_names": ["TestDefectsBase", "TestDefectCapture", "CapturePolicy", "TestDefectDetection", "TestDefectRaising"], "class_method_calls": ["self.assertIsInstance", "self.captured", "errors.InvalidMultipartContentTransferEncodingDefect", "policy.clone", "self.assertEqual", "self.raise_expected", "errors.InvalidBase64CharactersDefect", "errors.FirstHeaderLineIsContinuationDefect", "errors.MultipartInvariantViolationDefect", "errors.NoBoundaryInMultipartDefect", "errors.StartBoundaryNotFoundDefect", "self.get_defects", "policy.EmailPolicy", "errors.InvalidBase64PaddingDefect", "TestDefectsBase.policy", "errors.InvalidBase64LengthDefect", "errors.MissingHeaderBodySeparatorDefect", "self.multipart_msg", "self.assertRaises", "obj.defects", "self._raise_point", "msg.get_payload", "contextlib.contextmanager", "outer.get_payload", "unittest.main", "self.CapturePolicy", "textwrap.dedent", "policy.default", "self.assertDefectsEqual", "msg.keys", "self.policy", "self.assertTrue", "self._str_msg", "errors.CloseBoundaryNotFoundDefect"]}, "test_email.py": {"libraries": ["email.iterators", "test.test_email.openfile", "email.generator.BytesGenerator", "email.mime.message.MIMEMessage", "io.BytesIO", "email.parser.BytesFeedParser", "base64", "email.header.decode_header", "email.header.make_header", "email.policy", "email.parser.Parser", "email.charset", "test.support.start_threads", "email.feedparser.NeedMoreData", "unittest", "email.mime.audio.MIMEAudio", "email.quoprimime", "email.base64mime", "textwrap", "email.generator.Generator", "email.mime.image.MIMEImage", "itertools.chain", "io.StringIO", "email.mime.base.MIMEBase", "email", "email.mime.text.MIMEText", "email.errors", "re", "time", "email.parser.HeaderParser", "email.generator.DecodedGenerator", "test.support.unlink", "email.encoders", "email.mime.application.MIMEApplication", "unittest.mock.patch", "email.mime.multipart.MIMEMultipart", "email.header.Header", "email.message.Message", "random.choice", "email.parser.FeedParser", "email.charset.Charset", "email.utils", "email.feedparser.BufferedSubFile", "email.mime.nonmultipart.MIMENonMultipart", "test.test_email.TestEmailBase", "threading.Thread"], "function_names": ["test_BytesGenerator_linend", "test_decode", "test_bad_param", "test_rfc2231_no_language_or_charset", "test_flatten_header_with_no_value", "test_preamble_epilogue", "test_get_8bit_header", "test_broken_base64_header", "test_splitter_split_on_punctuation_only_if_fws_with_header", "test_pushCR_LF", "test_embedded_header_via_string_rejected", "test_encode_trailing_space_at_maxlinelen", "test_long_to_header", "test_len", "test_encode_null", "test_encode_maxlinelen_too_small", "test_splitting_first_line_only_is_long", "test_decode_one_word_eol", "test_strip_line_feed_and_carriage_return_in_headers", "test_get_content_maintype_missing", "test_header_decode_one_word", "test_multipart_custom_policy", "test_set_payload_to_list", "test_rfc2231_no_language_or_charset_in_filename_encoded", "test_utf8_shortest", "test_questionable_bytes_payload", "test_encode_one_word_trailing_spaces", "test__contains__", "test_encode_two_lines_one_space", "test_message_external_body_idempotent", "test_hierarchy", "test_rfc2231_bad_encoding_in_charset", "_test_header_encode", "test_header_encode_non_ascii", "test_body", "test_mktime_tz", "test_whitespace_keeper_unicode_2", "test_more_rfc2231_parameters", "test_8bit_in_quopri_body", "test_encode_one_line_trailing_spaces", "test_message_from_file_with_class", "test_as_bytes_policy", "test_quopri_splittable", "test_multiline_with_overlong_last_part_followed_by_split_point", "test_encode_one_word_trailing_tab", "test_default_type_with_explicit_container_type", "test_decode_two_lines_trailing_spaces", "test_encode_one_line_trailing_tab", "test_get_content_subtype_from_message_explicit", "test_multiline_header", "test_parser_on_exception_does_not_close_file", "test_print_8bit_headers", "test_parse_message_rfc822", "test_get_content_subtype_missing", "test_decode_multiple_spaces", "test_del_param_on_nonexistent_header", "test_whitespace_continuation", "test_partial_falls_inside_message_delivery_status", "test_utils_quote_unquote", "test_message_delivery_status", "test_long_headers_as_string_maxheaderlen", "test_get_content_type_missing_with_default_type", "test_missing_filename", "test_binary_body_with_encode_noop", "test_set_payload_with_8bit_data_and_charset_body_encoding_none", "test_binary_quopri_payload", "test_rfc2047_B_bad_padding", "test_parsedate_y2k", "test_unicode_address_raises_error", "test_get_param_liberal", "test_attach_when_payload_is_string", "test_decode_one_word", "test_no_nl_preamble", "test_multipart_digest_with_extra_mime_headers", "test_long_rfc2047_header_with_embedded_fws", "test_long_header_with_multiple_sequential_split_chars", "test_rfc2231_missing_tick", "test_body_line_iterator", "test_noascii_add_header", "test_byte_message_rfc822_only", "test_split_long_continuation", "test_get_content_maintype_missing_with_default_type", "test_nonascii_as_string_without_cte", "test_missing_start_boundary", "test_rfc2231_missing_tick_with_encoded_non_ascii", "test_Generator_linend", "test_parser_does_not_close_file", "test_no_start_boundary", "test_decode_one_line", "test_known_8bit_CTE", "test_long_header_encode_with_different_output_charset", "test_bad_8bit_header", "test_rfc2231_charset", "test_text_plain_in_a_multipart_digest", "test_set_payload_with_non_ascii_and_charset_body_encoding_none", "test_decoded_generator_emits_unicode_body", "test_multipart_report", "test_header_decode_two_lines", "test_header_quopri_len", "test_ascii_add_header_with_tspecial", "test_header_decode_null", "test_seq_parts_in_a_multipart_with_empty_preamble", "test_rfc2822_space_not_allowed_in_header", "test_formatdate_localtime", "test_binary_base64_payload", "test_8bit_in_uuencode_body", "test_encode7or8bit", "test_bytes_feedparser", "test_get_content_type_with_8bit", "test_nonascii_add_header_with_tspecial", "test_encode_one_space", "test_getaddresses_embedded_comment", "test_set_payload_with_charset", "test_get_content_type_from_message_implicit", "test_get_param_funky_continuation_lines", "test_decoded_generator", "test_header_decode_non_ascii", "test_get_all", "test_mangled_from", "test_parsedate_acceptable_to_time_functions", "test_rfc2231_tick_attack_extended", "test_mime_attachments_in_constructor", "test_typed_subpart_iterator_default_type", "test_encode_null_lines", "test_parser", "test_decode_one_line_one_word", "test_encode_one_long_string", "test_rfc2231_encoded_then_unencoded_segments", "test_long_run_with_semi_header_splitter", "test_bytes_generator_with_unix_from", "test_seq_parts_in_a_multipart_with_none_preamble", "test_lying_multipart", "test_set_param_requote", "test_nonascii_add_header_via_triple", "test_no_separating_blank_line", "test_quote_dump", "test_charset", "test_MIME_digest", "test_binary_body_with_encode_base64", "test_string_charset", "test_get_content_subtype_from_message_text_plain_implicit", "test_multilingual", "test_encode_preserves_leading_ws_on_value", "test_make_boundary", "test_mutltipart_with_bad_bytes_in_cte", "test_header_encode", "test_field_containment", "test_make_msgid_idstring", "test_parseaddr_preserves_quoted_pairs_in_addresses", "test_header_splitter", "test_encode_shortest_maxlinelen", "test_rfc2047_rfc2047_3", "test_codec_encodeable", "test_rfc2231_partly_nonencoded", "test_long_unbreakable_lines_with_continuation", "test_get_body_encoding_with_uppercase_charset", "test_get_content_subtype_missing_with_default_type", "test_encode", "test_long_header", "test_getaddresses", "test_getaddresses_nasty", "test_decode_one_line_nl", "test_rfc2231_bad_character_in_filename", "test_add_header_with_name_only_param", "test_get_content_type_from_message_explicit", "test_str_generator_should_not_mutate_msg_when_handling_8bit", "test_dont_mangle_from", "test_another_long_almost_unsplittable_header", "test_get_content_type_from_message_text_plain_implicit", "test_getset_charset", "test_decode_one_line_crnl", "test_message_from_file", "test_rfc2822_one_character_header", "test_decode_uppercase_quoting", "test_parse_untyped_message", "test_type_error", "test_header_encode_one_word", "test_get_content_maintype_from_message_implicit", "test_multipart_no_cte_no_defect", "test_utf8_input", "test_decode_one_long_line", "test_encoded_adjacent_nonencoded", "test_mangled_from_with_bad_bytes", "test_long_headers_as_string", "test_splitting_multiple_long_lines", "test_encoding", "test_empty_header_encode", "test_modify_returned_list_does_not_change_header", "test_payload", "test_long_8bit_header_no_charset", "test_utf8_input_no_charset", "_idempotent", "test_last_split_chunk_does_not_fit", "test_long", "test_encode_trailing_space_beyond_maxlinelen", "test_rfc2231_no_extended_values", "test_encode_one_line_eol", "test_escape_backslashes", "test_rfc2231_tick_attack", "test_encode_empty_payload", "test_encode_one_line_crlf", "test_decode_one_line_lf", "test_generate", "test_us_ascii_header", "test_set_type_on_other_header", "test_quotes_unicode_names", "test_encode_one_long_line", "test_rfc2231_no_language_or_charset_in_filename", "test_mimebase_custom_policy", "test_make_header_handles_binary_unknown8bit", "test_long_line_after_append", "test_invalid_content_type", "test_bytes_generator_b_encoding_linesep", "test_multipart_default_policy", "test_get_content_maintype_from_message_text_plain_explicit", "test_generator_b_encoding_linesep", "test_string_headerinst_eq", "test_bad_multipart", "test_get_payload_n_raises_on_non_multipart", "test_embedded_header_via_Header_rejected", "test_unicode_charset_name", "test_multiline_with_overlong_parts_separated_by_two_split_points", "test_boundary_with_leading_space", "test_noquote_dump", "test_ascii_add_header", "test_multiple_splittable_leading_char_followed_by_overlong_unsplitable", "test_get_body_encoding_with_bogus_charset", "test_message_external_body", "test_rfc2047_rfc2047_1", "test_long_received_header", "test_get_filename", "test_crlf_flatten", "test_get_decoded_payload", "test_del_rfc2231_params_with_8bit", "test_multipart_valid_cte_no_defect", "test_nested_multipart_mixeds", "test_parsedate_no_dayofweek", "test_epilogue", "test_custom_message_does_not_require_arguments", "test_encode_one_very_long_line", "test_rfc2231_no_language_or_charset_in_boundary", "test_seq_parts_in_a_multipart_with_none_epilogue", "test_make_msgid_collisions", "test_CRLFLF_at_end_of_part", "test_shorter_line_with_append", "test_quopri_body_check", "test_same_boundary_inner_outer", "test_unknown_8bit_CTE", "test_rfc2231_bad_character_in_charset", "test_bytes_header_parser", "__init__", "test_unicode_body_defaults_to_utf8_encoding", "test_header_needs_no_decoding", "test_no_parts_in_a_multipart_with_empty_epilogue", "test_rfc2047_rfc2047_6", "test_rfc2231_parse_rfc_quoting", "test_decode_false_quoting", "test_multipart_invalid_cte", "test_push_random", "test_binary_uuencode_payload", "test_MIME_digest_with_part_headers", "test_set_payload_with_8bit_data_and_charset", "test_decode_lowercase_quoting", "test_mixed_with_image", "test_rfc2047_missing_whitespace", "test_body_encode", "test_get_content_maintype_from_message_explicit", "test_seq_parts_in_a_multipart_with_empty_epilogue", "test_multiline_from_comment", "test_get_charsets", "test_header_ctor_default_args", "test_rfc2047_rfc2047_5a", "test_header_decode_re_bug_18380", "test_multipart_no_boundary", "test_bytes_parser_on_exception_does_not_close_file", "test_rfc2047_with_whitespace", "test_body_quopri_len", "test_rfc2047_rfc2047_4", "test_set_type", "test_formatdate_usegmt", "test_encode_whitespace_lines", "test_long_headers_flatten", "test_unicode_header_defaults_to_utf8_encoding", "test_splitter_split_on_punctuation_only_if_fws", "test_should_not_hang_on_invalid_ew_messages", "test_whitespace_keeper_unicode", "test_parsedate_compact", "test_set_charset_from_string", "test_set_boundary", "header_encode", "test_as_string_policy", "test_BytesGenerator_linend_with_non_ascii", "test_bytes_generator_handles_None_body", "test_get_param_with_semis_in_quotes", "test_decode_two_lines", "test_splittable_leading_char_followed_by_overlong_unsplitable", "test_explicit_maxlinelen", "test_rfc2047_rfc2047_2", "test_del_param", "test_values_with_8bit_headers", "test_long_header_encode", "test_one_part_in_a_multipart", "test_binary_body_with_encode_quopri", "test_whitespace_continuation_last_header", "test_simple_surprise", "test_decode_null_word", "test_parsedate_no_space_before_negative_offset", "test_empty_multipart_idempotent", "test_items_with_8bit_headers", "test_long_lines_with_different_header", "test_get_content_subtype_from_message_implicit", "test_header_encode_alt_charset", "test_binary_body_with_unicode_linend_encode_noop", "test_replace_header", "test_default_cte", "test_long_field_name", "test_8bit_in_base64_body", "test_crlf_separation", "test_decode_one_line_cr", "test_default_type_non_parsed", "test_long_header_encode_with_tab_continuation", "test_overlong_last_part_followed_by_split_point", "test_7bit_input_no_charset", "test_get_payload_with_8bit_cte_header", "_test_header_decode", "test_decode_soft_line_break", "test_checkSetMinor", "test_multipart_no_parts", "test_get_param", "test_parse_text_message", "_test_decode", "test_decode_one_line_one_word_eol", "test_mangle_from_in_preamble_and_epilog", "test_parsedate_accepts_time_with_dots", "test_dsn", "test_decode_one_line_trailing_spaces", "test_get_param_with_quotes", "test_charsets_case_insensitive", "test_encode_quoted_equals", "test_formataddr_does_not_quote_parens_in_quoted_string", "test_get_content_type_from_message_text_plain_explicit", "test_empty_header_name_handled", "test_nested_inner_contains_outer_boundary", "_signed_parts_eq", "test_get_params_with_8bit", "test_broken_base64_payload", "test_get_content_maintype_error", "test_default_type", "test_leading_splittable_in_the_middle_just_before_overlong_last_part", "run", "test_types", "test_missing_boundary", "_msgobj", "test_parsedate_no_space_before_positive_offset", "test_rfc2822_header_syntax", "test_get_rfc2231_params_with_8bit", "test_base64_splittable", "test_no_parts_in_a_multipart_with_none_epilogue", "test_parseaddr_multiple_domains", "test_encode_trailing_space_before_maxlinelen", "test_long_lines", "test_bytes_parser_does_not_close_file", "test_set_rfc2231_params_with_8bit", "test_message_from_string_with_class", "test_parseaddr_preserves_spaces_in_local_part", "test_rfc2231_partly_encoded", "test_mime_classes_policy_argument", "test_no_semis_header_splitter", "test_mimebase_default_policy", "test_rfc2231_bad_encoding_in_filename", "_test_encode", "test_shift_jis_charset", "test_rfc2231_unknown_encoding", "test_trailing_splitable_on_overlong_unsplitable_with_leading_splitable", "test_get_content_maintype_from_message_text_plain_implicit", "test_string_generator_reencodes_to_quopri_when_appropriate", "test_rfc2231_unencoded_then_encoded_segments", "test_rfc2047_rfc2047_7", "test_default_multipart_constructor", "test_parseaddr_empty", "test_del_param_on_other_header", "test_7bit_input", "test_parse_missing_minor_type", "tearDown", "test_nonascii_as_string_without_content_type_and_cte", "test_rfc2047_rfc2047_5b", "test_bytes_generator", "test_missing_header_body_separator", "test_nested_with_same_boundary", "test_as_string", "test_EncodersEncode_base64", "test_trailing_splitable_on_overlong_unsplitable", "test_get_content_subtype_from_message_text_plain_explicit", "test_make_msgid_domain", "test_decode_quoted_word", "test_rfc2231_no_language_or_charset_in_charset", "test_rfc2231_parse_extra_quoting", "test_qp_encode_latin1", "test_rfc2231_single_tick_in_filename", "test_as_bytes", "test_whitespace_header", "test_broken_unicode_payload", "test_add_header_with_no_value", "test_header_encode_with_different_output_charset", "test_header_encode_null", "test_get_content_subtype_error", "test_get_content_disposition", "test_rfc2047_Q_invalid_digits", "test_long_header_encode_with_tab_continuation_is_just_a_hint", "test_invalid_8bit_in_non_8bit_cte_uses_replace", "test_quote_unquote_idempotent", "test_formatdate", "test_escaped_8bit_header", "test_simple", "test_8bit_multipart", "test_rfc2231_single_tick_in_filename_extended", "test_parsedate_compact_no_dayofweek", "test_multipart_one_part", "test_bogus_filename", "test_message_from_binary_file", "test_long_8bit_header", "test_generator_handles_8bit", "test_whitespace_keeper", "test_three_lines", "test_binary_body_with_encode_7or8bit", "test_no_split_long_header", "test_get_params", "setUp", "test_get_content_type_missing", "test_escape_dump", "test_header_handles_binary_unknown8bit", "test_encode_one_line_eol_after_non_ascii", "test_first_line_is_continuation_header", "test_make_msgid_default_domain", "parse", "_msg_and_obj", "test_long_nonstring", "test_decode_null_line_null_word", "test_invalid_charset_like_object_raises_error", "test_double_boundary", "test_header_encode_two_lines", "test_encode_one_line", "test_guess_minor_type", "test_decode_one_space", "test_another_long_multiline_header", "test_boundary_in_non_multipart", "test_quopri_header_check", "test_long_header_with_whitespace_runs", "test_name_with_dot", "test_decode_two_lines_eol", "test_get_boundary", "test_message_signed_idempotent", "test_message_from_string", "test_qp_encode_non_latin1", "test_rfc2047_multiline", "test_get_decoded_uu_payload", "test_boundary_without_trailing_newline", "test__all__", "test_accepts_any_charset_like_object", "test_content_type", "test_encode_one_line_one_space", "test_newlines", "test_message_rfc822_only", "test_headers", "test_set_param", "test_valid_argument", "test_header_parser", "test_seq_parts_in_a_multipart_with_nl_epilogue", "test_simple_multipart", "test_get_all_with_8bit_headers", "test_typed_subpart_iterator", "test_rfc2231_get_content_charset", "test_del_nonexistent_param", "test_parsedate_returns_None_for_invalid_strings", "test_get_filename_with_name_parameter", "test_add_header", "test_charset_richcomparisons"], "function_calls": ["MIMEMultipart", "object", "sorted", "append", "make_header", "cls", "he", "neq", "MsgidsThread", "Parser", "ord", "ne", "BufferedSubFile", "MIMEImage", "__import__", "DecodedGenerator", "clock", "super", "iter", "str", "make_msgid", "openfile", "StringIO", "decode_header", "open", "start_threads", "range", "HeaderParser", "eq", "list", "bytesParser", "MIMEBase", "set", "patch", "FeedParser", "int", "Header", "choice", "CharsetMock", "hasattr", "BytesIO", "Generator", "MIMEAudio", "len", "max", "chr", "raises", "parser", "MIMEText", "Message", "BytesGenerator", "Charset", "bytes", "sum", "chain", "MIMEMessage", "MIMEApplication"], "class_names": ["MyMessage", "TestMessageAPI", "TestSigned", "MsgidsThread", "TestFromMangling", "TestBase64", "TestQuopri", "TestIdempotent", "TestBytesGeneratorIdempotentNL", "TestMultipart", "TestEncoders", "BaseTestBytesGeneratorIdempotent", "TestMIMEMessage", "Test8BitBytesHandling", "TestMIMEText", "TestIterators", "TestCharset", "TestHeader", "TestRFC2047", "TestMIMEImage", "TestNonConformant", "TestBytesGeneratorIdempotentCRLF", "CharsetMock", "TestMIMEAudio", "TestMIMEApplication", "TestFeedParsers", "TestParsers", "TestMiscellaneous", "TestLongHeaders", "TestRFC2231"], "class_method_calls": ["encoders.encode_noop", "self.non_latin_bin_msg", "msg.add_header", "t.msgids", "container2.get_payload", "email.header", "self.assertEqual", "self._idempotent", "self.assertNotEqual", "email.mime", "charset.body_encoding", "header.encode", "self._audiodata", "utils.mktime_tz", "self.assertIs", "utils.parsedate", "msg.get_boundary", "CharsetModule.CHARSETS", "subsubpart.get_content_type", "m.keys", "quoprimime.header_encode", "m.items", "msg1.get_content_type", "quoprimime.unquote", "re.S", "fp.closed", "self.blinesep", "outer.set_boundary", "m.set_payload", "outer.preamble", "self.assertRaises", "CharsetModule.QP", "chunks.append", "dsn1.get_param", "time.localtime", "self._test_header_encode", "source.decode", "email.errors", "s.getvalue", "part1a.is_multipart", "self.bnon", "subpart.get_payload", "container.as_string", "quoprimime.body_length", "part2a.is_multipart", "msg.defects", "self.latin_bin_msg_as7bit", "self._msgobj", "container.attach", "r.attach", "x.decode", "hstr.replace", "container2.get_default_type", "dsn2.get_params", "outer.get_payload", "email.feedparser", "self.assertDefectsEqual", "lc.get_body_encoding", "encoded_body.splitlines", "email.charset", "hdr.encode", "non_latin_bin_msg_as7bit_wrapped.split", "msg.walk", "base64ed.split", "email.utils", "self.assertTrue", "part2.is_multipart", "email.message_from_file", "msg.get_content_type", "self.msgids", "errors.CharsetError", "self._test_decode", "msg.set_param", "h.encode", "msg.epilogue", "self.assertIsInstance", "iterators.typed_subpart_iterator", "m1.is_multipart", "msg.get_content_subtype", "msg.get_charsets", "errors.InvalidMultipartContentTransferEncodingDefect", "c.body_encode", "quoprimime.header_length", "time.timezone", "msg.get_param", "iterators.body_line_iterator", "self._msg", "encoders.encode_7or8bit", "header.lower", "au.get_content_type", "module.__all__", "errors.InvalidBase64CharactersDefect", "cm.exception", "utils.parseaddr", "part1.get_content_type", "container1a.get_content_type", "msg.get_charset", "subpart.get_filename", "p.get_filename", "inner.defects", "email.generator", "time.altzone", "utils.make_msgid", "r.get_payload", "self.assertNotIn", "msg3.get_content_type", "msg.get_all", "charset.get_body_encoding", "m.get_payload", "part2a.get_payload", "self._im", "teststr.encode", "self.subTest", "outer.epilogue", "base64mime.header_length", "headers.sort", "msg.get_payload", "utils.getaddresses", "part1.get_payload", "unittest.skip", "msg.is_multipart", "container2a.get_content_type", "part1a.get_content_type", "self.assertListEqual", "fp.read", "self._test_header_decode", "s.lower", "self.hlit", "part1a.get_payload", "self.linesep", "self.assertIsNone", "sfp.getvalue", "msg.keys", "msg.as_string", "bfp.feed", "fp.getvalue", "testfile.write", "fp.seek", "x.startswith", "subpart2.get_content_type", "quoprimime.body_encode", "container2.get_content_type", "m.get_content_type", "time.mktime", "unittest.TestCase", "email.message", "self.assertFalse", "self.msg", "self._imgdata", "part2.get_payload", "base64.decodebytes", "gen.flatten", "time.monotonic", "msg.get", "self._au", "parser.parsestr", "msg.get_filename", "fullrepr.split", "msg.set_charset", "outer.as_string", "self._txt", "msg.get_params", "mock_getfqdn.return_value", "self.headertest_msg", "msg.get_content_maintype", "lines.extend", "self.non_latin_bin_msg_as7bit_wrapped", "email.policy", "self.assertLessEqual", "errors.FirstHeaderLineIsContinuationDefect", "bsf.readline", "errors.MultipartInvariantViolationDefect", "image.add_header", "errors.NoBoundaryInMultipartDefect", "h.append", "msg.items", "msgtxt.replace", "bsf.push", "self.bodytest_msg", "self.addCleanup", "om.append", "mimed.get_payload", "bfp.close", "container1.get_default_type", "container2a.get_default_type", "quoprimime.quote", "utils.parsedate_tz", "msg.set_boundary", "utils.formataddr", "errors.MissingHeaderBodySeparatorDefect", "self.multipart_msg", "time.strftime", "utf8_head.encode", "b.getvalue", "container.epilogue", "cls.__name__", "im.get_content_type", "msg1.get_payload", "msg.get_content_charset", "g.flatten", "msg.replace_header", "email.parser", "msg.as_bytes", "errors.HeaderParseError", "unittest.main", "self.blit", "m0.is_multipart", "msg.policy", "time.time", "s.splitlines", "email.message_from_bytes", "quoprimime.header_check", "re.compile", "utils.formatdate", "self._text", "msg.get_content_disposition", "outer.attach", "msg2.get_payload", "container1a.get_default_type", "part2.get_content_type", "part1.is_multipart", "self._signed_parts_eq", "uc.get_body_encoding", "self.hnon", "base64mime.decode", "SPACE.join", "self.assertNotIsInstance", "encoders.encode_base64", "m.policy", "feedparser.close", "m.is_multipart", "email.message_from_string", "msg.set_type", "self.headertest_headers", "errors.MultipartConversionError", "msg2.get_content_type", "self.assertRaisesRegex", "msg.set_payload", "quoprimime.decode", "time.gmtime", "self.assertIn", "subpart.get_content_type", "errors.StartBoundaryNotFoundDefect", "base64mime.header_encode", "self._msg_and_obj", "data.decode", "base64mime.body_encode", "repart.search", "msg3.get_payload", "self.latin_bin_msg", "msg.values", "f.read", "dsn2.get_param", "re.M", "msg4.get_payload", "container1.get_payload", "out.getvalue", "subpart1.get_default_type", "bad.defects", "lines.append", "r.get_content_type", "feedparser.feed", "msg.preamble", "self.ndiffAssertEqual", "msg.set_default_type", "iterators._structure", "quoprimime.header_decode", "parser.parsebytes", "quoprimime.body_check", "subpart1.get_content_type", "self.non_latin_bin_msg_as7bit", "CharsetModule.add_charset", "submsg.get_payload", "container1.get_content_type", "msg._payload", "self._test_encode", "textwrap.dedent", "msg.del_param", "self.parse", "msg.attach", "NL.join", "c.header_encode", "self.normalize_linesep_regex", "m.encode", "subpart2.get_default_type", "self._str_msg", "EMPTYSTRING.join", "part2a.get_content_type", "encoders.encode_quopri"]}, "test_generator.py": {"libraries": ["unittest", "io", "email.message_from_bytes", "textwrap", "email.generator.Generator", "email.generator.BytesGenerator", "test.test_email.parameterize", "email.message_from_string", "email.message.EmailMessage", "test.test_email.TestEmailBase", "email.policy", "email.headerregistry.Address"], "function_names": ["test_set_mangle_from_via_policy", "length_as_maxheaderlen_parm_overrides_policy", "test_rfc2231_wrapping_switches_to_default_len_if_too_narrow", "length_as_max_line_length_policy", "test_crlf_control_via_policy", "test_rfc2231_wrapping", "length_as_max_line_length_with_refold_none_does_not_fold", "test_flatten_linesep_overrides_policy", "test_compat32_max_line_length_does_not_fold_when_none", "test_smtputf8_policy", "test_cte_type_7bit_transforms_8bit_cte", "test_cte_type_7bit_handles_unknown_8bit", "test_smtp_policy", "length_as_maxheaderlen_parameter", "length_as_max_line_length_with_refold_all_folds", "msgmaker"], "function_calls": ["message_from_bytes", "BytesGenerator", "staticmethod", "Address", "EmailMessage"], "class_names": ["TestGeneratorBase", "TestBytesGenerator", "TestGenerator"], "class_method_calls": ["policy.SMTPUTF8", "self.refold_all_expected", "policy.compat32", "self.refold_long_expected", "self.assertEqual", "io.BytesIO", "refold_long_expected.copy", "policy.SMTP", "self.ioclass", "self.typ", "self.genclass", "io.StringIO", "x.encode", "self.subTest", "s.getvalue", "g.flatten", "unittest.main", "textwrap.dedent", "policy.default", "self.policy", "msg.set_content", "source.replace", "self.msgmaker", "self.msgfunc"]}, "test_headerregistry.py": {"libraries": ["unittest", "email.errors", "email.headerregistry", "textwrap", "datetime", "email.message.Message", "email.headerregistry.Group", "test.test_email.parameterize", "test.test_email.TestEmailBase", "email.policy", "email.headerregistry.Address"], "function_names": ["test_address_addr_spec_and_domain_raises", "test_il8n", "cte_as_value", "test_complex_address_list", "test_address_from_username_domain", "test_override_default_base_class", "test_fold_unstructured_with_commas", "test_str", "test_name_case_ignored", "test_name_read_only", "test_group_addresses_ro", "__init__", "test_display_name_blanks_not_quoted", "test_fold_date_header", "test_non_ascii_username_in_addr_spec_raises", "test_domain_only", "test_fold_overlong_words_using_RFC2047", "test_dont_use_default_map", "test_address_from_addr_spec", "test_map_to_type", "test_defects_is_tuple", "test_address_display_name_ro", "test_set_from_datetime", "make_header", "test_set_from_Group_list", "test_defects_read_only", "string_as_value", "test_groups_read_only", "test_addresses_types", "test_crlf_in_constructor_args_raises", "test_username_only", "test_has_name", "test_fold_unstructured_with_two_overlong_words", "test_group_with_addresses_no_display_name", "_test_attr_ro", "test_set_from_Address", "test_empty_group_list", "test_fold_unstructured_short", "test_address_username_ro", "test_set_date_header_from_datetime", "example_as_address", "test_substr", "test_parse_date", "version_string_as_MIME_Version", "test_fold_address_list", "test_display_name_only", "test_simple_address_list", "content_type_as_value", "test_fold_unstructured_single_word", "test_arbitrary_name_unstructured", "test_resent_date_header_properties", "test_set_from_Address_list", "test_date_header_properties", "test_fold_unstructured_with_overlong_word", "test_addresses_read_only", "content_disp_as_value", "test_set_from_Address_and_Group_list", "test_bad_addr_sepc_raises", "test_empty_group", "test_long_unstructured", "test_group_display_name_ro", "test_unstructured_short_max_line_length", "test_datetime_read_only", "test_space_in_addr_spec_username_raises", "test_address_domain_ro", "test_groups_types", "test_address_addr_spec_and_username_raises", "test_display_name_quoting", "test_no_value_is_defect", "test_group_with_one_address_no_display_name", "test_set_message_header_from_group", "test_address_addr_spec_and_username_and_domain_raises", "test_message_id_header_is_not_folded", "test_group_with_addresses", "test_short_unstructured", "test_quoting", "test_fold_unstructured_with_slightly_long_word", "test_set_message_header_from_address", "test_null_address", "test_address_read_only", "test_address_display_names", "test_null_group", "test_override_default_class", "test_override_default_class_only_overrides_default", "example_as_group", "test_address_with_no_display_name"], "function_calls": ["list", "len", "object", "str", "factory", "Message", "Group", "tuple", "setattr", "Address", "dict", "range"], "class_names": ["TestHeaderBase", "TestContentDisposition", "TestFolding", "TestAddressAndGroup", "FooDefault", "TestDateHeader", "FooBase", "TestBaseHeaderFeatures", "TestMIMEVersionHeader", "TestContentTransferEncoding", "TestAddressHeader", "TestHeaderRegistry", "TestUnstructuredHeader", "TestContentTypeHeader"], "class_method_calls": ["self.assertIsInstance", "headerregistry.BaseHeader", "headerregistry.UniqueDateHeader", "self.factory", "h.fold", "errors.InvalidHeaderDefect", "datetime.datetime", "self.dt", "self.FooBase", "h.content_disposition", "a.addr_spec", "expected.split", "h.addresses", "self.assertEqual", "self._test_attr_ro", "h.content_type", "h.params", "h.subtype", "h.cte", "self.assertRaisesRegex", "headerregistry.UnstructuredHeader", "h.address", "factory.map_to_type", "headerregistry.HeaderRegistry", "datetime.timedelta", "h.major", "self.example_params", "self.assertNotIn", "errors.ObsoleteHeaderDefect", "factory.registry", "h.name", "self.subTest", "self.assertRaises", "h.version", "h.maintype", "self.FooDefault", "headerregistry.UniqueUnstructuredHeader", "a.display_name", "h.minor", "g.addresses", "a.domain", "h.defects", "self.assertIsNone", "errors.UndecodableBytesDefect", "unittest.main", "policy.default", "self.assertDefectsEqual", "textwrap.dedent", "h.datetime", "self.make_header", "g.display_name", "h.split", "headerregistry.DateHeader", "h.groups", "errors.HeaderMissingRequiredValue", "h.max_count", "self.datestring", "self.utcoffset", "a.username", "datetime.timezone"]}, "test_inversion.py": {"libraries": ["unittest", "io", "email.message_from_bytes", "email.generator.BytesGenerator", "test.test_email.parameterize", "email.message.EmailMessage", "test.test_email.TestEmailBase", "email.policy"], "function_names": ["dedent", "msg_as_input", "payload_as_body"], "function_calls": ["ValueError", "message_from_bytes", "len", "dedent", "BytesGenerator", "bytes", "dict"], "class_names": ["TestInversion"], "class_method_calls": ["policy.SMTP", "b.getvalue", "self.policy", "msg.set_content", "self._make_message", "self.assertEqual", "bstr.splitlines", "g.flatten", "io.BytesIO", "msg2.get_content", "unittest.main", "policy.default"]}, "test_message.py": {"libraries": ["unittest", "email.message.MIMEPart", "textwrap", "test.test_email.parameterize", "email.message_from_string", "email.message.EmailMessage", "test.test_email.TestEmailBase", "email.policy"], "function_names": ["test_str_defaults_to_utf8", "test_iter_attachments_mutation", "message_as_get_body", "test_set_content_does_not_add_MIME_Version", "_check_make_multipart", "test_default_content_manager_for_add_comes_from_policy", "test_str_defaults_to_policy_max_line_length", "test_get_content_with_cm", "subtype_as_add", "message_as_clear", "test_as_string_uses_max_header_length_by_default", "_make_subtype_test_message", "test_policy_on_part_made_by_make_comes_from_message", "message_as_clear_content", "test_as_string_allows_maxheaderlen", "test_set_content_does_not_duplicate_MIME_Version", "test_folding_with_utf8_encoding_1", "test_folding_with_utf8_encoding_6", "set_content", "test_folding_with_utf8_encoding_7", "_check_disallowed_subtype_raises", "test_get_content_default_cm_comes_from_policy", "test_folding_with_utf8_encoding_8", "test_string_payload_with_multipart_content_type", "test_set_content_with_cm", "message_as_iter_parts", "message_as_iter_attachment", "test_folding_with_utf8_encoding_2", "subtype_as_make_with_boundary", "test_set_content_default_cm_comes_from_policy", "test_folding_with_utf8_encoding_5", "test_folding_with_utf8_encoding_3", "get_content", "test_error_on_setitem_if_max_count_exceeded", "subtype_as_make", "first", "test_set_content_adds_MIME_Version", "test_is_attachment", "test_rfc2043_auto_decoded_and_emailmessage_used", "test_folding_with_utf8_encoding_4"], "function_calls": ["list", "len", "first", "getattr", "str", "message_from_string", "next", "bytes", "dict", "filter", "Exception", "EmailMessage"], "class_names": ["_TestSetRaisingContentManager", "TestEmailMessage", "_MIME_Version_adding_CM", "Test", "_TestSetContentManager", "TestMIMEPart", "_TestContentManager", "TestEmailMessageBase"], "class_method_calls": ["self.assertIsInstance", "self.kw", "m.set_param", "m.get_content_maintype", "part.get_payload", "msg_headers.append", "self.assertEqual", "cm.args", "m.is_multipart", "self._check_disallowed_subtype_raises", "msg.set_payload", "m.iter_attachments", "self.message", "self.assertIn", "self.args", "self._make_message", "m.keys", "h.lower", "m.as_string", "cm.msg", "self.assertNotIn", "msg.iter_attachments", "m.items", "m.get_payload", "ar.exception", "m.is_attachment", "m.set_payload", "self._make_subtype_test_message", "m.clear_content", "self.assertRaises", "m.get_boundary", "m.walk", "m.get_content", "cm.kw", "m.get_body", "part.get_content_type", "name.lower", "self._TestContentManager", "m.add_related", "self._TestSetRaisingContentManager", "self.assertIsNone", "self._check_make_multipart", "m.replace_header", "unittest.main", "policy.default", "textwrap.dedent", "m.iter_parts", "m.set_content", "self._MIME_Version_adding_CM", "self._TestSetContentManager", "self.policy", "m.clear", "self.assertTrue", "self._str_msg", "self.assertFalse", "self.msg", "m.get_content_subtype"]}, "test_pickleable.py": {"libraries": ["unittest", "copy", "textwrap", "test.test_email.parameterize", "email.headerregistry.HeaderRegistry", "pickle", "email.message", "test.test_email.TestEmailBase", "email.policy", "email"], "function_names": ["header_as_deepcopy", "msg_as_deepcopy", "msg_as_pickle", "header_as_pickle"], "function_calls": ["HeaderRegistry", "header_factory", "str", "range"], "class_names": ["TestPickleCopyHeader", "TestPickleCopyMessage"], "class_method_calls": ["self.header_factory", "policy.default", "msg2.as_string", "copy.deepcopy", "pickle.dumps", "self.assertEqual", "email.message_from_string", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "email.message", "unittest.main", "textwrap.dedent", "msg.as_string"]}, "test_policy.py": {"libraries": ["unittest", "email.errors", "io", "email.headerregistry", "types", "textwrap", "email.generator", "email.message", "email.parser", "email.policy"], "function_names": ["test_message_from_string", "test_message_policy_used_by_as_string", "test_message_policy_propagates_to_generator", "test_parser_propagates_policy_to_message", "test_set_policy_attrs_when_cloned", "test_policy_addition", "test_message_from_bytes", "test_handle_defect_raises_on_strict", "test_short_maxlen_error", "test_overridden_register_defect_still_raises", "make_defaults", "test_header_store_parse_rejects_newlines", "test_all_attributes_covered", "__init__", "test_abc", "test_policy_is_immutable", "test_adding_default_policies_preserves_default_factory", "test_reject_non_policy_keyword_when_called", "_make_msg", "test_non_ascii_chars_do_not_cause_inf_loop", "test_bytes_parser", "test_each_Policy_gets_unique_factory", "test_new_factory_overrides_default", "badmethod", "test_register_defect", "test_parser_propagates_policy_to_sub_messages", "test_parser", "register_defect", "test_defaults", "test_handle_defect_registers_defect", "test_fold_zero_max_line_length", "test_message_from_binary_file", "test_clone_copies_factory", "test_default_header_factory", "test_overridden_register_defect_works", "test_message_from_file"], "function_calls": ["isinstance", "object", "make_defaults", "super", "getattr", "str", "policyclass", "TestException", "dir", "Dummy", "setattr"], "class_names": ["MyObj", "MyPolicy", "Foo", "TestException", "MyDefect", "PolicyAPITests", "TestConcretePolicies", "TestPolicyPropagation", "Dummy"], "class_method_calls": ["self.assertIsInstance", "headerregistry.BaseHeader", "self.MyDefect", "p2.fold", "types.FunctionType", "self.assertNotIsInstance", "policy.fold", "self.assertEqual", "policyclass.clone", "email.message_from_string", "email.message_from_binary_file", "io.BytesIO", "instance.header_store_parse", "email.policy", "cm.exception", "policy1.header_factory", "policy.register_defect", "policy2.header_factory", "self._make_msg", "self.assertIs", "self.assertRaisesRegex", "headerregistry.UnstructuredHeader", "self.Foo", "self.policies", "self.policy_defaults", "self.assertIn", "email.generator", "part.policy", "base_defaults.copy", "expected.items", "my_policy.defects", "io.StringIO", "policy1.clone", "self.MyObj", "h.name", "compat32_defaults.copy", "self.subTest", "newpolicy.header_factory", "my_policy.handle_defect", "self.assertRaises", "obj.defects", "email.errors", "s.getvalue", "p.parsestr", "p1.fold", "defaults.update", "self.defects", "policy.foo", "g.flatten", "email.parser", "self.assertIsNone", "foo.defects", "unittest.main", "email.message_from_file", "policy_defaults.update", "msg.policy", "textwrap.dedent", "msg.as_string", "expected.update", "email.message_from_bytes", "mypolicy.header_factory", "self.policy", "self.MyPolicy", "p.parsebytes", "msg.walk", "new_policy.header_factory", "email.message", "unittest.TestCase", "newpolicy.__dict__", "attr.startswith"]}, "test_utils.py": {"libraries": ["unittest", "time", "os.path", "datetime", "sys", "email.utils", "test.support"], "function_names": ["test_localtime_epoch_utc_daylight_true", "test_localtime_daylight_false_dst_false", "test_parsedate_to_datetime_naive", "test_usegmt", "test_usegmt_with_non_utc_datetime_raises", "test_localtime_is_tz_aware_daylight_false", "test_localtime_epoch_notz_daylight_true", "test_localtime_is_tz_aware_daylight_true", "test_aware_datetime", "test_formatdate_with_localtime", "test_naive_datetime", "test_formatdate", "test_localtime_epoch_notz_daylight_false", "test_localtime_daylight_true_dst_true", "test_usegmt_with_naive_datetime_raises", "test_localtime_daylight_true_dst_false", "test_variable_tzname", "test_parsedate_to_datetime", "test_localtime_epoch_utc_daylight_false", "test_localtime_daylight_false_dst_true"], "function_calls": [], "class_names": ["DateTimeTests", "LocaltimeTests", "FormatDateTests"], "class_method_calls": ["sys.platform", "self.assertIsNotNone", "datetime.datetime", "t2.replace", "t0.replace", "unittest.skipUnless", "self.assertEqual", "test.support", "datetime.timedelta", "self.naive_dt", "utils.format_datetime", "utils.parsedate_to_datetime", "self.assertRaises", "unittest.skipIf", "self.offsetstring", "unittest.TestCase", "t.tzinfo", "unittest.main", "t1.tzname", "os.path", "utils.formatdate", "self.aware_dt", "self.dateargs", "self.datestring", "time.mktime", "datetime.timezone", "utils.localtime"]}, "torture_test.py": {"libraries": ["unittest", "email.__file__", "email.iterators._structure", "sys", "os.path.join", "os.path.abspath", "io.StringIO", "test.test_email.TestEmailBase", "os", "test.support.run_unittest", "os.path.dirname", "email"], "function_names": ["_testclasses", "test_main", "_msgobj", "openfile", "test_mondo_message", "suite"], "function_calls": ["_testclasses", "eq", "len", "_structure", "join", "getattr", "dirname", "openfile", "dir", "StringIO", "neq", "type", "open", "run_unittest", "abspath"], "class_names": ["TortureBase", "TestCrispinTorture"], "class_method_calls": ["msg.epilogue", "fp.close", "fp.getvalue", "email.message_from_file", "unittest.SkipTest", "os.pardir", "msg.get_payload", "msg.preamble", "unittest.makeSuite", "self.ndiffAssertEqual", "name.startswith", "unittest.TestSuite", "self.assertEqual", "sys.modules", "self._msgobj", "suite.addTest", "unittest.main"]}, "test_embed.py": {"libraries": ["unittest", "json", "re", "contextlib", "textwrap", "shutil", "sys", "tempfile", "subprocess", "test.support", "os", "collections.namedtuple"], "function_names": ["test_run_main", "test_init_dont_parse_argv", "setUp", "check_pre_config", "modify_path", "test_init_dev_mode", "test_subinterps_different_ids", "test_init_isolated_config", "test_preinit_parse_argv", "test_init_warnoptions", "test_audit_subinterpreter", "test_init_read_set", "test_preinit_isolated_config", "test_subinterps_distinct_state", "check_all_configs", "test_init_dont_configure_locale", "test_audit", "test_audit_run_stdin", "test_init_isolated_flag", "default_program_name", "test_init_pybuilddir", "test_init_run_main", "test_init_pyvenv_cfg", "test_init_global_config", "test_preinit_python_config", "_get_expected_config", "test_preinit_dont_parse_argv", "test_init_from_config", "test_preinit_isolated1", "remove_python_envvars", "copy_paths_by_env", "test_init_sys_add", "test_global_pathconfig", "test_init_python_env", "test_audit_run_file", "test_subinterps_main", "test_initialize_pymain", "test_init_setpath", "test_audit_run_startup", "test_audit_run_command", "test_init_parse_argv", "tearDownClass", "test_init_setpath_config", "test_init_compat_config", "test_preinit_isolated2", "debug_build", "tearDown", "get_expected_config", "module_search_paths", "check_config", "check_global_config", "test_bpo20891", "test_pre_initialization_api", "test_initialize_twice", "test_audit_run_interactivehook", "_get_expected_config_impl", "test_init_env_dev_mode_alloc", "run_repeated_init_and_subinterpreters", "test_preinit_compat_config", "test_init_python_config", "tmpdir_with_python", "test_pre_initialization_sys_options", "test_init_default_config", "test_open_code_hook", "get_func", "test_forced_io_encoding", "run_embedded_interpreter", "test_init_env_dev_mode", "test_init_main", "test_init_setpythonhome", "main_xoptions", "test_init_compat_env"], "function_calls": ["object", "getattr", "modify_path_cb", "Py_GetPath", "isinstance", "Py_GetProgramFullPath", "str", "Py_GetPrefix", "Interp", "dict", "open", "Exception", "remove_python_envvars", "list", "Py_GetProgramName", "Py_GetPythonHome", "int", "namedtuple", "enumerate", "Py_GetExecPrefix", "debug_build", "len", "get_func", "print"], "class_names": ["AuditingTests", "EmbeddingTestsMixin", "EmbeddingTests", "InitConfigTests"], "class_method_calls": ["main.interp", "os.mkdir", "match.groups", "sys.executable", "self.assertEqual", "current_run.append", "self.assertNotEqual", "self.PRE_CONFIG_ISOLATED", "shutil.which", "os.__file__", "json.loads", "support.TESTFN", "config.update", "COPY_GLOBAL_CONFIG.extend", "tempfile.TemporaryDirectory", "sub.interp", "self.check_pre_config", "self.CONFIG_ISOLATED", "self.PRE_CONFIG_PYTHON", "self.run_repeated_init_and_subinterpreters", "self.DEFAULT_GLOBAL_CONFIG", "interp.tstate", "self.check_global_config", "p.terminate", "name.casefold", "pythonpath_env.split", "interp.interp", "self.assertTrue", "env.copy", "ctypes.pythonapi", "self.tmpdir_with_python", "self.check_config", "os.makedirs", "support.import_module", "config_value.items", "os.getcwd", "ver.major", "shutil.copyfile", "unittest.SkipTest", "self.copy_paths_by_env", "subprocess.Popen", "self.oldcwd", "out.strip", "self.assertRegex", "cmd.extend", "out.splitlines", "err.rstrip", "pre_config.pop", "contextlib.contextmanager", "json.JSONDecodeError", "self.GET_DEFAULT_CONFIG", "proc.stdout", "os.path", "out.rstrip", "self.get_expected_config", "main.modules", "sys.version_info", "path.append", "re.match", "self.CONFIG_PYTHON", "unittest.TestCase", "expected_preconfig.items", "self.COPY_PRE_CONFIG", "self.run_embedded_interpreter", "expected_output.format", "sys.platform", "self.check_all_configs", "self.assertLess", "os.pathsep", "main.tstate", "func.argtypes", "self.IGNORE_CONFIG", "main.id", "fp.write", "self.CONFIG_COMPAT", "expected.items", "self.COPY_GLOBAL_CONFIG", "sub.id", "self.EXPECTED_CONFIG", "opt.split", "self._get_expected_config", "shutil.copystat", "_testinternalcapi.get_configs", "path.insert", "self.UTF8_MODE_ERRORS", "subprocess.PIPE", "COPY_GLOBAL_PRE_CONFIG.extend", "p.returncode", "self.PRE_CONFIG_COMPAT", "self.COPY_GLOBAL_PRE_CONFIG", "os.environ", "unittest.main", "CONFIG_COMPAT.update", "proc.returncode", "PRE_CONFIG_COMPAT.update", "new_env.update", "support.FS_NONASCII", "self.maxDiff", "func.restype", "p.communicate", "self.module_search_paths", "p.wait", "proc.stderr", "ver.minor", "interp.modules", "os.chdir", "self.assertIn", "self.fail", "self.test_exe", "unittest.skipIf", "ctypes.c_wchar_p", "support.verbose", "subprocess.run", "self._get_expected_config_impl", "sub.modules", "key.startswith", "self.default_program_name", "os.unlink", "textwrap.dedent", "sys.path", "self.skipTest", "os.name", "self.__class__", "config.pop", "value.copy", "sub.tstate", "cls.EXPECTED_CONFIG"]}, "test_ensurepip.py": {"libraries": ["unittest", "os.path", "contextlib", "ensurepip", "unittest.mock", "sys", "ensurepip._uninstall", "test.support", "os"], "function_names": ["test_altinstall_default_pip_conflict", "test_bootstrapping_with_verbosity_2", "setUp", "test_uninstall_with_verbosity_2", "test_bootstrapping_with_alt_install", "fake_pip", "test_bootstrapping_error_code", "test_uninstall_skipped_when_not_installed", "test_returns_version", "test_bootstrap_version", "test_bootstrapping_with_root", "test_bootstrapping_with_upgrade", "test_uninstall", "test_basic_bootstrapping", "test_bootstrapping_with_default_pip", "test_bootstrapping_with_regular_install", "test_pip_environment_variables_removed", "test_uninstall_with_verbosity_1", "test_bootstrapping_with_verbosity_3", "test_pip_config_file_disabled", "test_basic_uninstall", "test_bootstrapping_with_verbosity_1", "test_bootstrapping_with_user", "test_uninstall_skipped_with_warning_for_wrong_version", "test_uninstall_with_verbosity_3", "test_uninstall_version", "test_uninstall_error_code"], "function_calls": ["FakePip", "len", "object", "fake_pip"], "class_names": ["FakePip", "TestBootstrappingMainFunction", "EnsurepipMixin", "TestEnsurePipVersion", "TestUninstallationMainFunction", "TestBootstrap", "TestUninstall"], "class_method_calls": ["stderr.getvalue", "unittest.mock", "self.assertEqual", "ensurepip._uninstall", "patched_os.environ", "sys.modules", "test.support", "ensurepip._PIP_VERSION", "run_pip_patch.start", "self.assertIn", "self.addCleanup", "self.assertNotIn", "ensurepip._main", "ensurepip.bootstrap", "self.assertRaises", "stdout.getvalue", "os_patch.start", "run_pip_patch.stop", "self.os_environ", "ensurepip.version", "contextlib.contextmanager", "self.run_pip", "os.environ", "self.assertFalse", "unittest.main", "os.path", "patched_os.devnull", "os_patch.stop", "ensurepip._uninstall_helper", "unittest.TestCase", "patched_os.path", "os.devnull"]}, "test_enum.py": {"libraries": ["enum.Enum", "test.test_json.PyTest", "test.test_json.CTest", "enum.IntEnum", "math.isnan"], "function_names": ["test_weird_floats", "test_ints", "test_dict_values", "test_floats", "test_list", "test_dict_keys"], "function_calls": ["list", "isnan", "str", "int", "zip", "dict", "float", "repr"], "class_names": ["BigNum", "WierdNum", "TestEnum", "FloatNum", "TestPyEnum", "TestCEnum"], "class_method_calls": ["FloatNum.pi", "WierdNum.inf", "BigNum.big", "BigNum.small", "WierdNum.neg_inf", "BigNum.huge", "self.dumps", "WierdNum.nan", "enum.value", "FloatNum.e", "self.assertEqual", "BigNum.really_huge", "self.assertTrue", "self.loads", "FloatNum.tau"]}, "test_enumerate.py": {"libraries": ["unittest", "gc", "operator", "sys", "pickle", "test.support"], "function_names": ["test_exception_propagation", "test_iteratorgenerator", "test_bug1229429", "test_enumerate_result_gc", "test_illformediterable", "test_objmethods", "test_range_optimization", "test_getitemseqn", "__init__", "test_argumentcheck", "test_args", "test_len", "__len__", "test_iteratorseqn", "test_noniterable", "test_pickle", "__iter__", "__next__", "test_simple", "f", "test_basicfunction", "test_tuple_reuse", "check_pickle", "test_gc", "__getitem__"], "function_calls": ["object", "min", "reversed", "N", "NoLen", "SeqWithWeirdLen", "iter", "str", "tuple", "G", "A", "Seq", "range", "X", "Ig", "list", "set", "type", "zip", "next", "enumerate", "I", "hasattr", "len", "NoGetItem", "Blocked", "map", "E"], "class_names": ["N", "NoLen", "TestReversed", "PickleTest", "TestEmpty", "SeqWithWeirdLen", "G", "A", "SubclassTestCase", "E", "Seq", "X", "Ig", "EnumerateStartTestCase", "TestBig", "TestLongStart", "MyEnum", "I", "NoGetItem", "EnumerateTestCase", "Blocked", "TestStart"], "class_method_calls": ["unittest.skipUnless", "self.assertEqual", "dict.fromkeys", "operator.length_hint", "self.fail", "self.called", "self.assertRaises", "self.res", "gc.is_tracked", "s.r", "f.__reversed__", "sys.getrefcount", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "self.seqn", "self.enum", "self.seq", "unittest.main", "sys.maxsize", "self.i", "support.cpython_only", "pickle.dumps", "self.check_pickle", "self.assertTrue", "gc.collect", "unittest.TestCase", "self.assertFalse"]}, "test_eof.py": {"libraries": ["sys", "test.support", "unittest", "test.support.script_helper"], "function_names": ["test_EOFS", "test_line_continuation_EOF", "test_EOFC", "test_line_continuation_EOF_from_file_bpo2180"], "function_calls": ["str", "eval", "exec"], "class_names": ["EOFTestCase"], "class_method_calls": ["excinfo.exception", "unittest.skipIf", "self.assertIn", "sys.executable", "support.temp_dir", "self.assertEqual", "support.TestFailed", "unittest.TestCase", "script_helper.assert_python_failure", "script_helper.make_script", "unittest.main", "self.assertRaises"]}, "test_epoll.py": {"libraries": ["unittest", "select", "time", "socket", "os", "errno"], "function_names": ["test_context_manager", "test_fd_non_inheritable", "setUp", "test_badcreate", "test_close", "test_errors", "_connected_pair", "test_add", "test_control_and_wait", "tearDown", "test_unregister_closed", "test_fromfd", "test_create"], "function_calls": ["object", "len", "sorted", "str", "open", "AssertionError", "hasattr"], "class_names": ["TestEPoll"], "class_method_calls": ["self.assertIsInstance", "time.monotonic", "errno.ENOSYS", "os.get_inheritable", "ep.poll", "ep.close", "self.connections", "self.assertEqual", "epoll.fileno", "client.connect", "epoll.poll", "e.errno", "epoll.closed", "ep.register", "client.setblocking", "select.EPOLLOUT", "server.sendall", "unittest.SkipTest", "epoll.unregister", "epoll.close", "self.fail", "self.addCleanup", "self.serverSocket", "server.close", "select.EPOLL_CLOEXEC", "client.sendall", "socket.create_server", "epoll.register", "self._connected_pair", "self.assertRaises", "ep2.poll", "server.fileno", "ep2.register", "client.fileno", "ep.fileno", "select.EPOLLIN", "select.epoll", "skt.close", "epoll.modify", "errno.EBADF", "self.assertGreater", "unittest.main", "ep.unregister", "open_file.fileno", "select.EPOLLET", "errno.EINPROGRESS", "ep.modify", "e.args", "self.assertTrue", "ep.closed", "unittest.TestCase", "self.assertFalse", "open_file.close", "socket.socket"]}, "test_exception_hierarchy.py": {"libraries": ["unittest", "select", "errno.EEXIST", "socket", "os", "errno", "builtins"], "function_names": ["test_try_except", "test_new_overridden", "test_init_new_overridden", "test_new_kwdargs", "test_errno_translation", "test_socket_errors", "test_init_kwdargs", "test_blockingioerror", "__init__", "test_builtin_errors", "_make_map", "test_windows_error", "__new__", "test_errno_mapping", "test_posix_error", "test_init_standalone", "test_select_error", "test_init_overridden"], "function_calls": ["SubOSErrorWithStandaloneInit", "super", "SubOSErrorCombinedInitFirst", "SubOSErrorWithNew", "SubOSErrorWithInit", "str", "getattr", "BlockingIOError", "set", "SubOSErrorCombinedNewFirst", "dir", "SubOSError", "_make_map", "type", "filter", "open", "OSError", "range"], "class_names": ["SubOSErrorWithStandaloneInit", "SubOSErrorCombinedInitFirst", "SubOSErrorWithNew", "SubOSErrorWithInit", "HierarchyTest", "SubOSErrorCombinedNewFirst", "SubOSError", "ExplicitSubclassingTest", "AttributesTest"], "class_method_calls": ["line.strip", "unittest.skipUnless", "self.assertEqual", "select.error", "e.errno", "e.winerror", "self._map", "self.baz", "self.assertIs", "e.bar", "self.assertIn", "self.fail", "e.characters_written", "line.partition", "self.assertNotIn", "socket.timeout", "errno.errorcode", "errnames.strip", "self.assertRaises", "e.filename", "self.bar", "e.strerror", "socket.error", "os.unlink", "unittest.main", "s.splitlines", "os.path", "OSError.__name__", "e.args", "os.name", "socket.gaierror", "e.baz", "unittest.TestCase", "self.assertFalse", "socket.herror"]}, "test_exception_variations.py": {"libraries": ["unittest"], "function_names": ["test_try_except", "test_nested_else", "test_try_finally_no_exception", "test_try_except_else_finally", "test_try_except_else", "test_nested", "test_try_except_else_no_exception", "test_try_except_else_finally_no_exception", "test_try_except_finally_no_exception", "test_try_except_no_exception", "test_try_except_finally"], "function_calls": ["Exception"], "class_names": ["ExceptionTestCase"], "class_method_calls": ["unittest.TestCase", "self.assertFalse", "self.assertTrue", "unittest.main"]}, "test_exceptions.py": {"libraries": ["_testcapi", "_testcapi.raise_memoryerror", "test.support", "traceback", "unittest", "copy", "test.support.check_impl_detail", "weakref", "test.support.cpython_only", "os", "gc", "test.support.unlink", "test.support.check_warnings", "test.support.gc_collect", "errno", "test.support.captured_stderr", "test.support.TESTFN", "test.support.SuppressCrashReport", "test.support.import_module", "sys", "pickle", "marshal", "test.support.no_tracing", "test.support.script_helper"], "function_names": ["test_unicode_change_attributes", "do_close", "test_trashcan_recursion", "test_attributes", "test_str", "test_capi1", "testRaising", "__init__", "do_del", "test_exception_target_in_nested_scope", "test_generator_leaking4", "__str__", "testSyntaxErrorMessage", "test_generator_leaking2", "test_recursion_normalizing_with_no_memory", "raise_catch", "testInvalidAttrs", "test_generator_next_cleanup_exc_state", "__subclasscheck__", "testSettingException", "test_yield_in_nested_try_excepts", "print_error", "main", "test_generator_close_cleanup_exc_state", "test_capi3", "testChainingDescriptors", "__exit__", "testSyntaxErrorOffset", "test_unraisable", "test_windows_message", "test_errno_ENOTDIR", "__del__", "test_recursion_normalizing_exception", "test_memory_error_subclasses", "run_gen", "testNoneClearsTracebackAttr", "simple_gen", "f", "test_exception_with_doc", "raiseMemError", "test_unicode_errors_no_object", "test_generator_finalizing_and_exc_info", "test_generator_throw_cleanup_exc_state", "test_capi2", "do_throw", "test_generator_del_cleanup_exc_state", "testInvalidTraceback", "test_copy_pickle", "test_generator_doesnt_retain_old_exc2", "test_recursion_normalizing_infinite_exception", "test_generator_send_cleanup_exc_state", "test_raise_in_generator", "test_3114", "do_send", "testInfiniteRecursion", "testExceptionCleanupNames", "testKeywordArgs", "test_unhandled", "testChainingAttrs", "yield_raise", "foo", "test_reset_attributes", "raising_gen", "test_recursion_error_cleanup", "inner_raising_func", "check", "test_badisinstance", "test_non_str_argument", "test_generator_doesnt_retain_old_exc", "ckmsg", "do_next", "test_generator_leaking", "test_memory_error_in_PyErr_PrintEx", "testSyntaxErrorMissingParens", "__enter__", "testExceptionCleanupState", "test_MemoryError", "test_generator_leaking3", "g", "testAttributes", "inner", "_check_generator_cleanup_exc_state", "test_WindowsError", "testWithTraceback", "test_memory_error_cleanup"], "function_calls": ["inner_raising_func", "check", "MyObj", "test_capi3", "object", "getattr", "ckmsg", "check_impl_detail", "gc_collect", "BrokenDel", "BaseException", "RuntimeError", "captured_stderr", "KeyError", "isinstance", "repr", "issubclass", "test_capi1", "UnicodeEncodeError", "str", "ImportError", "IndexError", "check_warnings", "exc_type", "raise_memoryerror", "locals", "wr", "dict", "open", "Exception", "UnicodeDecodeError", "MyException", "range", "SubError", "ValueError", "MainError", "NameError", "run_gen", "C", "exc", "next", "UnicodeTranslateError", "type", "unlink", "OSError", "f", "simple_gen", "MyObject", "yield_raise", "foo", "Context", "g", "testfunc", "raiseMemError", "compile", "inner", "bytearray", "SuppressCrashReport", "import_module", "raising_gen", "main", "print_error", "DerivedException", "TypeError", "test_capi2", "c", "exec", "print"], "class_names": ["MyObj", "Context", "ImportErrorTests", "InvalidException", "MainError", "SlottedNaiveException", "C", "NaiveException", "ExceptionTests", "BrokenStrException", "BadException", "TestException", "DerivedException", "BrokenDel", "MyException", "Meta", "SubError", "MyObject"], "class_method_calls": ["stderr.getvalue", "unittest.skipUnless", "self.assertEqual", "support.gc_collect", "self.assertNotEqual", "w.filename2", "co2.co_name", "exc.__name__", "self.assertIs", "cm.unraisable", "w.filename", "exc.args", "coro.throw", "self.assertRaises", "support.catch_unraisable_exception", "u.start", "g.throw", "exc_type.__name__", "pickle.HIGHEST_PROTOCOL", "co.co_name", "co.co_filename", "sys.stderr", "exc.__init__", "self.assertTrue", "BrokenDel.__del__", "self.fancy_arg", "self.assertIsInstance", "error2.__doc__", "ctypes.pythonapi", "u.encoding", "cm.exception", "u.reason", "marshal.loads", "self.assertNotIn", "self.subTest", "error5.__doc__", "self.obj", "_testcapi.make_exception_with_doc", "self.x", "copy.deepcopy", "pickle.loads", "error4.__doc__", "self.assertIsNone", "w.winerror", "g.send", "e.__context__", "unittest.TestCase", "x.__getitem__", "self.assertFalse", "sys.__excepthook__", "copy.copy", "sys.platform", "report.endswith", "x.fancy_arg", "self._check_generator_cleanup_exc_state", "fp.close", "u.end", "g.close", "tb.tb_frame", "e.__suppress_context__", "w.strerror", "w.errno", "exceptionList.append", "sys.stdin", "unittest.main", "exc.path", "p.HIGHEST_PROTOCOL", "os.listdir", "e.msg", "src.split", "self.assertIsNotNone", "self.raise_catch", "o.__dir__", "error1.__doc__", "self.assertRaisesRegex", "exc.msg", "sys.exit", "self.assertIn", "coro.send", "self.fail", "klass.__new__", "BaseException.__init__", "p.dumps", "sys.exc_info", "errno.ENOTDIR", "exc.name", "orig.name", "src.decode", "weakref.ref", "p.loads", "e.__traceback__", "script_helper.assert_python_failure", "_testcapi.raise_exception", "it.throw", "error5.a", "pickle.dumps", "e.__cause__", "traceback.format_tb", "orig.path"]}, "test_extcall.py": {"libraries": ["sys", "test.support"], "function_names": ["test_main"], "function_calls": ["test_main"], "class_names": [], "class_method_calls": ["support.run_doctest", "sys.modules"]}, "test_faulthandler.py": {"libraries": ["unittest", "_testcapi", "datetime", "signal", "faulthandler", "test.support.is_android", "sys", "tempfile", "subprocess", "contextlib.contextmanager", "test.support", "os", "sysconfig", "textwrap.dedent", "test.support.script_helper"], "function_names": ["check_dump_traceback_threads", "test_dump_traceback_threads", "test_register", "test_dump_traceback_later_repeat", "get_output", "test_raise_exception", "test_fatal_error_without_gil", "test_fatal_error", "test_is_enabled", "test_stack_overflow", "check_stderr_none", "test_sigabrt", "test_enable_single_thread", "check_error", "expected_traceback", "test_sigbus", "test_disable", "check_dump_traceback", "test_truncate", "temporary_filename", "test_dump_traceback_file", "test_dump_traceback_threads_file", "check_dump_traceback_later", "test_dump_traceback_later", "test_dump_traceback_later_fd", "test_dump_traceback", "test_register_threads", "test_dump_traceback_fd", "test_disabled_by_default", "test_dump_traceback_later_twice", "test_raise_nonfatal_exception", "test_stderr_None", "test_enable_file", "test_sigfpe", "test_dump_traceback_later_file", "test_disable_windows_exc_handler", "test_register_chain", "test_fatal_error_c_thread", "test_register_fd", "test_sigsegv", "test_read_null", "test_sigill", "test_dump_traceback_later_cancel", "check_fatal_error", "test_gil_released", "test_register_file", "test_ignore_exception", "test_unregister", "check_register", "skip_segfault_on_android", "test_env_var", "check_windows_exception", "test_sys_xoptions", "test_enable_fd"], "function_calls": ["expected_traceback", "dedent", "str", "dict", "filter", "temporary_filename", "open", "repr", "hasattr"], "class_names": ["FaultHandlerTests"], "class_method_calls": ["faulthandler.dump_traceback_later", "process.wait", "sys.platform", "sys.flags", "tempfile.mktemp", "os.SEEK_SET", "sys.executable", "unittest.skipUnless", "faulthandler.enable", "self.assertEqual", "output.decode", "self.assertNotEqual", "env.pop", "self.check_fatal_error", "cm.exception", "self.check_stderr_none", "support.SuppressCrashReport", "tempfile.TemporaryFile", "datetime.timedelta", "self.assertIn", "script_helper.spawn_python", "faulthandler.disable", "output.splitlines", "faulthandler.register", "pass_fds.append", "output.rstrip", "self.check_dump_traceback_threads", "self.assertRaises", "unittest.skipIf", "self.assertRegex", "self.check_error", "faulthandler.dump_traceback", "support.unlink", "signal.SIGUSR1", "self.get_output", "fp.read", "self.check_dump_traceback", "sys.__stderr__", "regex.format", "self.check_register", "os.environ", "self.check_windows_exception", "unittest.main", "subprocess.check_output", "code.format", "faulthandler.is_enabled", "sys.stderr", "os.lseek", "os.name", "process.communicate", "self.assertTrue", "sysconfig.get_config_var", "unittest.TestCase", "self.assertFalse", "support.strip_python_stderr", "fp.fileno", "self.check_dump_traceback_later"]}, "test_fcntl.py": {"libraries": ["unittest", "_testcapi", "test.support.TESTFN", "platform", "test.support.unlink", "test.support.import_module", "struct", "sys", "_testcapi.INT_MAX", "_testcapi.INT_MIN", "test.support.cpython_only", "test.support.verbose", "os", "test.support.run_unittest", "multiprocessing.Process"], "function_names": ["test_fcntl_bad_file_overflow", "test_flock", "test_main", "test_fcntl_file_descriptor", "test_fcntl_fileno", "test_fcntl_64_bit", "setUp", "test_lockf_share", "try_lockf_on_other_process", "test_lockf_exclusive", "try_lockf_on_other_process_fail", "get_lockdata", "__init__", "test_flock_overflow", "tearDown", "test_fcntl_bad_file", "fileno"], "function_calls": ["test_main", "Process", "get_lockdata", "import_module", "BadFile", "repr", "open", "run_unittest", "unlink", "print"], "class_names": ["BadFile", "TestFcntl"], "class_method_calls": ["fcntl.LOCK_EX", "sys.platform", "os.O_NONBLOCK", "fcntl.DN_MULTISHOT", "os.O_LARGEFILE", "self.assertEqual", "os.O_RDONLY", "struct.calcsize", "fcntl.F_SETLKW", "fcntl.F_NOTIFY", "fcntl.fcntl", "fcntl.LOCK_SH", "p.start", "fcntl.F_WRLCK", "platform.system", "fcntl.LOCK_UN", "self.assertRaises", "platform.machine", "self.fn", "unittest.skipIf", "self.f", "fcntl.LOCK_NB", "struct.pack", "os.close", "fcntl.lockf", "os.open", "fcntl.flock", "_testcapi.INT_MAX", "fcntl.F_SETFL", "os.path", "p.exitcode", "p.join", "self.skipTest", "f.close", "unittest.TestCase"]}, "test_file.py": {"libraries": ["unittest", "io", "test.support.TESTFN", "collections.UserList", "_pyio", "sys", "test.support", "os", "weakref.proxy", "array.array"], "function_names": ["setUp", "testIteration", "testReadinto_text", "testWritelinesUserList", "testTruncateOnWindows", "testReadinto", "testMethods", "testSetBufferSize", "testWeakRefs", "testWritelinesIntegers", "testWritelinesNonString", "tearDown", "testReadWhenWriting", "testWritelinesIntegersUserList", "testErrors", "testAttributes", "_checkBufferSize", "testModeStrings", "testBadModeArgument"], "function_calls": ["UserList", "len", "proxy", "meth", "getattr", "range", "NonString", "str", "int", "staticmethod", "next", "array", "hasattr"], "class_names": ["PyOtherFileTests", "COtherFileTests", "NonString", "AutoFileTests", "PyAutoFileTests", "CAutoFileTests", "OtherFileTests"], "class_method_calls": ["testlines.pop", "support.check_no_warnings", "self.assertEqual", "self.open", "f.name", "msg.args", "methods.append", "f.isatty", "f.readinto", "f.mode", "self._checkBufferSize", "p.write", "f.write", "io.open", "bag.write", "self.fail", "f.readline", "a.tobytes", "f.read", "bag.writelines", "self.assertWarnsRegex", "self.assertRaises", "sys.exc_info", "self.f", "support.unlink", "f.tell", "unittest.main", "p.tell", "buf.tobytes", "f.readlines", "os.path", "pyio.open", "bag.close", "f.closed", "self.assertTrue", "f.truncate", "f.close", "unittest.TestCase", "self.assertFalse"]}, "test_file_eintr.py": {"libraries": ["unittest", "select", "time", "signal", "_pyio", "sys", "_io", "subprocess", "os"], "function_names": ["test_readlines", "test_readline", "_test_reading", "setUp", "fail_with_process_info", "test_readall", "tearDown", "_generate_infile_setup_code"], "function_calls": ["len"], "class_names": ["TestBufferedIOSignalInterrupt", "CTestFileIOSignalInterrupt", "CTestTextIOSignalInterrupt", "TestTextIOSignalInterrupt", "PyTestBufferedIOSignalInterrupt", "PyTestTextIOSignalInterrupt", "CTestBufferedIOSignalInterrupt", "TestFileIOSignalInterrupt", "PyTestFileIOSignalInterrupt"], "class_method_calls": ["stderr.decode", "stdout.decode", "self._process", "sys.executable", "unittest.skipUnless", "self.fail", "subprocess.Popen", "self._test_reading", "select.select", "subprocess.PIPE", "signal.SIGINT", "self.fail_with_process_info", "unittest.main", "self._generate_infile_setup_code", "time.sleep", "self._READING_CODE_TEMPLATE", "self.modname", "os.name", "unittest.TestCase"]}, "test_filecmp.py": {"libraries": ["unittest", "filecmp", "shutil", "tempfile", "test.support", "os"], "function_names": ["test_different", "test_default_ignores", "test_main", "test_cmpfiles", "test_matching", "test_report_partial_closure", "setUp", "test_report_full_closure", "_assert_report", "test_cache_clear", "tearDown", "test_dircmp"], "function_calls": ["len", "test_main", "dircmp_report", "open"], "class_names": ["FileCompareTestCase", "DirCompareTestCase"], "class_method_calls": ["os.mkdir", "d.left_list", "d.common", "self.assertEqual", "self.name_same", "d.report", "d.right_only", "d.diff_files", "filecmp.DEFAULT_IGNORES", "d.right_list", "d.right", "self.caseinsensitive", "d.report_partial_closure", "self.name", "support.TESTFN", "self.assertIn", "d.left", "d.same_files", "filecmp.cmpfiles", "tempfile.gettempdir", "output.write", "shutil.move", "self.dir_ignored", "filecmp.dircmp", "d.report_full_closure", "self._assert_report", "stdout.getvalue", "self.dir", "support.run_unittest", "shutil.rmtree", "d.left_only", "self.dir_same", "os.unlink", "filecmp._cache", "filecmp.cmp", "self.dir_diff", "os.path", "self.name_diff", "support.captured_stdout", "filecmp.clear_cache", "self.assertTrue", "unittest.TestCase", "self.assertFalse"]}, "test_fileinput.py": {"libraries": ["fileinput.FileInput", "unittest.mock", "io.BytesIO", "test.support", "test.support.verbose", "gzip", "bz2", "unittest", "collections", "io.StringIO", "os", "builtins", "re", "pathlib.Path", "test.support.unlink", "fileinput", "fileinput.hook_encoded", "tempfile", "test.support.check_warnings", "test.support.TESTFN", "sys"], "function_names": ["check", "test_zero_byte_files", "test_readline_buffering", "test", "setUp", "filename", "test_blah_ext", "writeTmp", "test_gz_ext_builtin", "test_all", "linesread", "test_state_is_not_None", "filelineno", "test_gz_ext_fake", "test_detached_stdin_binary_mode", "test_inplace_binary_write_mode", "__call__", "__init__", "test_readline_os_chmod_raises_OSError", "test_file_opening_hook", "isstdin", "readlines", "test_no_ext", "replace_builtin_open", "test_empty_files_list_specified_to_constructor", "test_fileno_when_ValueError_raised", "test_bz2_ext_fake", "test_modes", "close", "test_context_manager", "test_nextfile_oserror_deleting_backup", "test_files_that_dont_end_with_newline", "test_close_on_exception", "test_readline_os_fstat_raises_OSError", "test_fileno", "nextfile", "do_test_call_input", "test_readline_binary_mode", "openhook", "isfirstline", "tearDown", "test_empty_string", "test_opening_mode", "test_iteration_buffering", "test_state_is_not_None_and_state_file_is_None", "test_readline", "test__getitem___deprecation", "test__getitem__", "lineno", "test_state_is_not_None_and_state_file_is_not_None", "test_bz2_ext_builtin", "test_buffer_sizes", "do_test_use_builtin_open", "test_errors", "readline", "test_pathlib_file_inplace", "test_stdin_binary_mode", "test__getitem__invalid_key", "assertExactlyOneInvocation", "test_pathlib_file", "test__getitem__eof", "test_state_is_None", "fileno"], "function_calls": ["check", "object", "InvocationRecorder", "LineReader", "result", "CustomOpenHook", "iter", "check_warnings", "StringIO", "Path", "open", "range", "FilenoRaisesValueError", "list", "hook_encoded", "FileInput", "next", "int", "UnconditionallyRaise", "hasattr", "BytesIO", "MockFileInput", "len", "print"], "class_names": ["InvocationRecorder", "BaseTests", "BaseFileInputGlobalMethodsTest", "LineReader", "Test_hook_encoded", "CustomOpenHook", "Test_fileinput_input", "Test_fileinput_filelineno", "Test_hook_compressed", "FilenoRaisesValueError", "BufferSizesTests", "Test_fileinput_fileno", "FileInputTests", "UnconditionallyRaise", "MiscTest", "Test_fileinput_filename", "MockFileInput", "Test_fileinput_isfirstline", "Test_fileinput_lineno", "Test_fileinput_close", "Test_fileinput_isstdin", "Test_fileinput_nextfile"], "class_method_calls": ["self._orig_FileInput", "fileinput.filelineno", "fake_open.invocation_count", "unittest.skipUnless", "fi.readline", "self.assertEqual", "self.assertNotEqual", "fi._file", "fi.isstdin", "sys.stdout", "fi.isfirstline", "self.assertIs", "result.files", "collections.defaultdict", "result.inplace", "result.mode", "fi.nextfile", "fi.fileno", "fileinput.hook_compressed", "self.assertRaises", "fileinput._state", "os.fstat", "fi.close", "src.openhook", "self._file", "self.invocation_count", "os_unlink_replacement.invoked", "self.assertTrue", "fileinput.close", "self.invocation_counts", "self._orig_state", "src.linesread", "cm.exception", "self.files", "self.fake_open", "self.invoked", "self.return_values", "self.replace_builtin_open", "builtins.open", "self.mode", "self.openhook", "fi.lineno", "self._linesread", "m_stdin.buffer", "self.do_test_use_builtin_open", "self.readline", "self.backup", "unconditionally_raise_ValueError.invoked", "self.assertIsNone", "mock_file_input.invocation_counts", "fileinput.fileno", "instance._file", "self.assertExactlyOneInvocation", "custom_open_hook.invoked", "fileinput.nextfile", "fileinput.input", "os_chmod_replacement.invoked", "unittest.TestCase", "self.assertFalse", "self.exception_type", "fileinput.FileInput", "self.writeTmp", "f.write", "os.fspath", "kwargs.pop", "bz2.BZ2File", "self.addCleanup", "UnconditionallyRaise.__init__", "self.assertWarnsRegex", "pat.match", "self.assertWarns", "support.unlink", "instance.return_values", "instance.fileno_retval", "fileinput.hook_encoded", "os_fstat_replacement.invoked", "fileinput.isstdin", "self.inplace", "sys.stdin", "self.it", "unittest.main", "self.do_test_call_input", "re.compile", "self.__call__", "os.chmod", "fileinput.isfirstline", "fake_open.last_invocation", "support.check__all__", "fi.filelineno", "self.last_invocation", "gzip.open", "result.backup", "self.fail", "tempfile.mkstemp", "fobj.readline", "fi.filename", "f.read", "result.openhook", "filename.splitlines", "lines.append", "support.ignore_warnings", "fileinput.filename", "os.unlink", "mock.patch", "fileinput.lineno", "fi._files", "m.group"]}, "test_fileio.py": {"libraries": ["_testcapi", "_pyio", "functools.wraps", "test.support.run_unittest", "unittest", "test.support.TESTFN_UNICODE", "io", "test.support.swap_attr", "test.support.cpython_only", "os", "weakref.proxy", "msvcrt", "test.support.check_warnings", "errno", "array.array", "test.support.TESTFN", "collections.UserList", "sys", "_io", "test.support.make_bad_fd"], "function_names": ["test_reject", "testUnclosedFDOnException", "testBlksize", "testErrnoOnClosedSeekable", "testErrnoOnClose", "testInvalidFd_overflow", "testRecursiveRepr", "setUp", "testReadintoByteArray", "_testReadintoArray", "testReprNoCloseFD", "testWritelinesUserList", "testRepr", "test_open_code", "testInvalidFd", "testErrnoOnClosedTruncate", "testErrnoOnClosedWrite", "testTruncateOnWindows", "testOpendir", "wrapper", "testSeekTell", "bug801631", "testErrnoOnClosedTell", "__setattr__", "test_main", "testMethods", "testWritelinesList", "testModeStrings", "testErrnoOnClosedReadinto", "testBytesOpen", "ClosedFDRaises", "testErrnoOnClosedSeek", "testWritelinesError", "testUnicodeOpen", "testErrnoOnClosedReadable", "testAbles", "testInvalidInit", "testWeakRefs", "testWarnings", "testOpenDirFD", "tearDown", "testUtf8BytesOpen", "ClosedFD", "testInvalidModeStrings", "testErrnoOnClosedReadall", "testErrnoOnClosedRead", "testAppend", "testErrors", "testAttributes", "testTruncate", "test_none_args", "testErrnoOnClosedFileno", "testConstructorHandlesNULChars", "ReopenForRead", "_testReadintoMemoryview", "testErrnoOnClosedIsatty", "testErrnoOnClosedWritable", "testBadModeArgument"], "function_calls": ["UserList", "getattr", "wraps", "memoryview", "array", "bug801631", "repr", "swap_attr", "test_main", "super", "proxy", "str", "check_warnings", "open", "run_unittest", "MyException", "range", "func", "hasattr", "bytearray", "make_bad_fd", "bytes"], "class_names": ["PyOtherFileTests", "COtherFileTests", "AutoFileTests", "PyAutoFileTests", "MyFileIO", "CAutoFileTests", "MyException", "OtherFileTests"], "class_method_calls": ["sys.platform", "_pyio._open_code_with_warning", "self.modulename", "_io.FileIO", "f.readable", "_testcapi.INT_MIN", "self.assertEqual", "os.O_RDONLY", "errno.EISDIR", "self.ReopenForRead", "self.assertNotEqual", "f.name", "msg.args", "e.errno", "f.isatty", "cm.exception", "f.readinto", "f.mode", "p.write", "f.write", "io.DEFAULT_BUFFER_SIZE", "self.fail", "TESTFN_UNICODE.encode", "f.read", "os.remove", "self.assertRaises", "f.seek", "unittest.skipIf", "f.seekable", "self.f", "e.filename", "f.writable", "f.tell", "os.close", "os.fstat", "os.open", "errno.EBADF", "_testcapi.INT_MAX", "f.readall", "w.warnings", "os.unlink", "msvcrt.get_osfhandle", "p.tell", "TESTFN.encode", "_io.open_code", "os.path", "_pyio.FileIO", "f.closed", "sys.getfilesystemencoding", "os.name", "io.SEEK_END", "self.assertTrue", "f.truncate", "f.fileno", "self.skipTest", "f.close", "unittest.TestCase", "self.assertFalse", "self.FileIO"]}, "test_finalization.py": {"libraries": ["unittest", "gc", "contextlib", "_testcapi.with_tp_del", "weakref", "test.support", "_testcapi.without_gc"], "function_names": ["test_heterogenous_suicidal_two", "test_simple_suicide", "test", "setUp", "__tp_del__", "check_sanity", "test_heterogenous_resurrect_three", "test_heterogenous_suicidal_one", "test_legacy", "assert_del_calls", "test_simple_resurrect", "test_legacy_resurrect", "test_legacy_self_cycle", "build_chain", "__init__", "test_homogenous", "__del__", "_cleanup", "check_resurrecting_chain", "with_tp_del", "test_heterogenous_resurrect_one", "test_homogenous_suicidal", "side_effect", "tearDown", "test_simple", "test_homogenous_resurrect", "assert_tp_del_calls", "assert_survivors", "test_non_gc", "clear_survivors", "test_heterogenous_resurrect_two", "test_non_gc_resurrect", "__new__", "without_gc", "check_non_resurrecting_chain", "chain", "assert_garbage"], "function_calls": ["sorted", "LegacyResurrector", "cls", "SimpleSelfCycle", "id", "SuicidalSelfCycle", "LegacySelfCycle", "isinstance", "super", "Legacy", "wr", "NonGC", "range", "SelfCycleResurrector", "Simple", "NonGCResurrector", "len", "SimpleResurrector", "TypeError"], "class_names": ["LegacyResurrector", "SimpleChained", "SimpleSelfCycle", "SuicidalSelfCycle", "LegacySelfCycle", "SelfCycleBase", "ChainedResurrector", "Legacy", "ChainedBase", "NonGC", "SelfCycleResurrector", "SimpleBase", "LegacyBase", "C", "CycleChainFinalizationTest", "LegacyFinalizationTest", "Simple", "NonGCResurrector", "SuicidalChained", "SimpleFinalizationTest", "SelfCycleFinalizationTest", "SimpleResurrector", "TestBase", "NonGCSimpleBase"], "class_method_calls": ["left.right", "self.suicided", "self.assert_survivors", "self.del_calls", "SimpleBase.survivors", "self.assertEqual", "self.check_sanity", "self.clear_survivors", "cls.tp_del_calls", "self.build_chain", "self.assertIs", "self.assert_garbage", "self.check_non_resurrecting_chain", "cls.del_calls", "cls.errors", "NonGCSimpleBase._cleaning", "self._cleaning", "cls._cleanup", "SimpleBase.del_calls", "self.errors", "self.side_effect", "right.suicided", "SimpleBase.test", "gc.is_tracked", "self.left", "self.tp_del_calls", "self.id_", "cls.survivors", "self.ref", "weakref.ref", "right.left", "contextlib.contextmanager", "gc.garbage", "self.old_garbage", "self.survivors", "self.assertIsNot", "self.assert_tp_del_calls", "unittest.main", "self.check_resurrecting_chain", "support.disable_gc", "self.right", "support.cpython_only", "left.suicided", "self.assert_del_calls", "gc.collect", "unittest.TestCase", "self.assertFalse", "SimpleBase.tp_del_calls"]}, "test_float.py": {"libraries": ["math", "test.test_json.PyTest", "test.test_json.CTest"], "function_names": ["test_allow_nan", "test_floats", "test_out_of_range", "test_ints"], "function_calls": ["len", "float", "int", "str"], "class_names": ["TestFloat", "TestPyFloat", "TestCFloat"], "class_method_calls": ["math.pi", "self.dumps", "self.assertEqual", "self.assertNotEqual", "self.loads", "self.assertRaises"]}, "test_flufl.py": {"libraries": ["unittest", "__future__"], "function_names": ["test_barry_as_bdfl", "test_guido_as_bdfl"], "function_calls": ["str", "compile"], "class_names": ["FLUFLTests"], "class_method_calls": ["code.format", "self.assertRegex", "__future__.CO_FUTURE_BARRY_AS_BDFL", "self.assertEqual", "unittest.TestCase", "cm.exception", "unittest.main", "self.assertRaises"]}, "test_fnmatch.py": {"libraries": ["unittest", "fnmatch.translate", "fnmatch.fnmatch", "warnings", "fnmatch.fnmatchcase", "fnmatch.filter", "os"], "function_names": ["test_filter", "test_fnmatchcase", "check_match", "test_translate", "test_fnmatch", "test_bytes", "test_mix_bytes_str", "test_warnings", "test_sep", "test_case"], "function_calls": ["fn", "check", "translate", "filter"], "class_names": ["FnmatchTestCase", "TranslateTestCase", "FilterTestCase"], "class_method_calls": ["warnings.simplefilter", "os.path", "self.assertEqual", "self.assertTrue", "warnings.catch_warnings", "unittest.TestCase", "self.assertFalse", "unittest.main", "self.check_match", "self.assertRaises"]}, "test_fork1.py": {"libraries": ["unittest", "threading", "time", "test.support.get_attribute", "test.support.verbose", "test.fork_wait.ForkWait", "signal", "test.support.reap_children", "sys", "_imp", "os"], "function_names": ["tearDownModule", "wait_impl", "test_threaded_import_lock_fork", "test_nested_import_lock_fork", "fork_with_import_lock", "importer"], "function_calls": ["reap_children", "__import__", "get_attribute", "fork_with_import_lock", "range", "print"], "class_names": ["ForkTest"], "class_method_calls": ["time.monotonic", "os.waitpid", "self.assertEqual", "sys.modules", "import_started.set", "t.start", "threading.Event", "t.join", "os.fork", "import_started.wait", "imp.acquire_lock", "os.WNOHANG", "self.wait_impl", "unittest.main", "time.sleep", "imp.release_lock", "os._exit", "threading.Thread", "os.kill", "signal.SIGKILL"]}, "test_fractions.py": {"libraries": ["unittest", "copy.copy", "operator", "numbers", "functools", "copy.deepcopy", "decimal.Decimal", "sys", "warnings", "test.support.requires_IEEE_754", "pickle.dumps", "math", "pickle.loads", "fractions"], "function_names": ["testRound", "__le__", "testComparisons", "testFromDecimal", "testMixedArithmetic", "__sub__", "__eq__", "testHash", "testInitFromFloat", "_components", "test_slots", "_richcmp", "__ge__", "testComparisonsDummyRational", "__lt__", "__init__", "testArithmetic", "testMixingWithDecimal", "testBigFloatComparisons", "testInit", "testStringification", "test_copy_deepcopy_pickle", "testBoolGuarateesBoolReturn", "testMixedEqual", "testLimitDenominator", "test_as_integer_ratio", "__gt__", "assertRaisesMessage", "testMixedLessEqual", "testImmutable", "testApproximateCos1", "testLargeArithmetic", "testComparisonsDummyFloat", "__bool__", "numerator", "testMixedLess", "testApproximatePi", "assertTypedTupleEquals", "testInitFromDecimal", "testFromString", "assertTypedEquals", "__float__", "testBigComplexComparisons", "testMisc", "testFromFloat", "testConversions"], "function_calls": ["DummyFloat", "abs", "dumps", "id", "DummyRational", "_components", "DummyFraction", "repr", "isinstance", "copy", "F", "str", "complex", "hash", "CustomValue", "gcd", "loads", "AssertionError", "list", "deepcopy", "int", "type", "bool", "float", "divmod", "op", "pow", "callable", "Decimal", "TypeError", "map", "round"], "class_names": ["DummyRational", "DummyFloat", "CustomValue", "FractionTest", "GcdTest", "DummyFraction"], "class_method_calls": ["operator.eq", "numbers.Rational", "self.value", "fractions.Fraction", "self._richcmp", "self.assertAlmostEqual", "math.floor", "self.assertEqual", "math.cos", "self.assertNotEqual", "warnings.filterwarnings", "r._numerator", "operator.add", "math.trunc", "operator.ge", "self.assertRaisesMessage", "self.assertIs", "self.assertTupleEqual", "other.value", "self.fail", "r.numerator", "self.num", "warnings.catch_warnings", "z.imag", "math.ceil", "operator.lt", "self.assertWarnsRegex", "self.assertRaises", "F.from_decimal", "functools.total_ordering", "self.assertTypedTupleEquals", "math.gcd", "other._denominator", "exc_type.__name__", "self.assertListEqual", "p.denominator", "operator.pow", "r._denominator", "operator.gt", "unittest.main", "fractions.gcd", "other._numerator", "r.__init__", "sys.hash_info", "p.numerator", "math.pi", "operator.le", "r.denominator", "F.from_float", "self.assertTrue", "z.real", "self.den", "unittest.TestCase", "rpi.limit_denominator", "self.assertFalse", "self.assertTypedEquals"]}, "test_frame.py": {"libraries": ["unittest", "re", "types", "weakref", "test.support"], "function_names": ["test_clear_refcycles", "test_locals_clear_locals", "test_clear_generator", "g", "inner", "outer", "test_clear_executing", "test_f_lineno_del_segfault", "test_locals", "test_repr", "clear_traceback_frames", "make_frames", "test_clear_locals", "test_clear_executing_generator"], "function_calls": ["g", "inner", "outer", "C", "wr", "next", "repr"], "class_names": ["FrameAttrsTest", "C", "ReprTest", "ClearTest"], "class_method_calls": ["self.assertIsInstance", "inner.f_locals", "types.FunctionType", "re.escape", "self.assertEqual", "support.gc_collect", "frames.append", "outer.__code__", "self.assertIs", "exc.__traceback__", "tb.tb_frame", "self.fail", "f.f_lineno", "inner.clear", "f.f_back", "outer.clear", "self.make_frames", "tb.tb_next", "self.assertRaises", "outer_locals.pop", "self.assertRegex", "outer.f_locals", "weakref.ref", "self.assertIsNot", "f.clear", "unittest.main", "e.__traceback__", "self.inner", "support.disable_gc", "self.clear_traceback_frames", "self.outer", "support.cpython_only", "gen.gi_frame", "self.assertTrue", "unittest.TestCase", "self.assertFalse"]}, "test_frozen.py": {"libraries": ["sys", "test.support.captured_stdout", "unittest", "__hello__"], "function_names": ["test_frozen"], "function_calls": ["captured_stdout"], "class_names": ["TestFrozen"], "class_method_calls": ["out.getvalue", "self.assertEqual", "sys.modules", "unittest.TestCase", "unittest.main"]}, "test_fstring.py": {"libraries": ["unittest", "decimal", "types", "ast"], "function_names": ["fn", "test_side_effect_order", "test_literal", "test_yield", "outer", "test_shadowed_global", "test_not_equal", "test_ast_line_numbers_multiple_formattedvalues", "test_ast", "test_newlines_in_expressions", "test_invalid_string_prefixes", "test_parens_in_expressions", "test_mismatched_braces", "test_empty_format_specifier", "test_lambda", "test_call", "test_loop", "test_backslash_char", "__repr__", "test__format__lookup", "test_docstring", "test_conversions", "test_ast_line_numbers_duplicate_expression", "test_misformed_unicode_character_name", "test_no_escapes_for_braces", "test_missing_format_spec", "test_equal_equal", "test_no_backslashes_in_expression_part", "test_global", "test_debug_conversion", "test_ast_line_numbers_nested", "test_unterminated_string", "test_nested_fstrings", "test_fstring", "__call__", "test_missing_variable", "test_walrus", "test_concat_empty", "__init__", "test_comments", "test_literal_eval", "test_many_expressions", "__format__", "test_yield_send", "test_del", "test_concat_non_empty", "test_ast_line_numbers_multiline_fstring", "build_fstr", "test_if_conditional", "test_dict", "test_compile_time_concat", "test_compile_time_concat_errors", "test_arguments", "test_leading_trailing_spaces", "test_missing_expression", "test_assignment", "test_multiple_vars", "test_expressions_with_triple_quoted_strings", "test_closure", "f", "test_double_braces", "g", "test_ast_line_numbers", "test_format_specifier_expressions", "inner", "test_str_format_differences", "test_errors", "test_locals", "test_ast_compile_time_concat", "foo", "test_backslashes_in_string_part", "assertAllRaise", "test_mismatched_parens"], "function_calls": ["format", "fn", "the_lambda", "outer", "repr", "str", "test_concat_empty", "ascii", "test_concat_non_empty", "range", "X", "build_fstr", "C", "O", "next", "type", "eval", "f", "len", "foo", "compile", "test_fstring", "exec"], "class_names": ["C", "TestCase", "O", "X"], "class_method_calls": ["x.__format__", "binop.op", "t.body", "ast.Name", "decimal.Decimal", "self.assertEqual", "ast.Mult", "ast.FormattedValue", "y.__format__", "binop.col_offset", "self.assertRaisesRegex", "call.lineno", "types.MethodType", "self.assertIn", "ast.Call", "ast.Module", "binop1.op", "self.assertAllRaise", "call.col_offset", "binop2.col_offset", "ast.Assign", "binop1.right", "binop1.col_offset", "self.assertRaises", "self.called", "self.subTest", "self.assertWarns", "ast.Add", "binop1.lineno", "x.called", "ast.Constant", "ast.Expr", "binop1.left", "unittest.TestCase", "binop2.left", "binop2.right", "self.assertIsNone", "ast.literal_eval", "unittest.main", "ast.JoinedStr", "binop2.lineno", "g.send", "binop.right", "binop2.op", "self.i", "binop.lineno", "binop.left", "ast.parse", "self.assertTrue", "f.__doc__", "ast.BinOp", "self.assertFalse", "g.__doc__"]}, "test_ftplib.py": {"libraries": ["io", "test.support.HOST", "threading", "time", "asyncore", "test.support", "test.support.HOSTv6", "asynchat", "ssl", "unittest.skipUnless", "ftplib", "unittest.TestCase", "socket", "os", "errno"], "function_names": ["secure_connection", "cmd_epsv", "collect_incoming_data", "cmd_mlsd", "cmd_noop", "cmd_rnto", "test_nlst", "cmd_pwd", "test_makepasv", "test_rmd", "test_retrlines", "test_retrlines_too_long", "_do_ssl_shutdown", "cmd_eprt", "test_line_too_long", "test_storlines_too_long", "test_makepasv_issue43285_security_disabled", "test_storlines", "test_control_connection", "test_login", "test_storbinary_rest", "test_transfer", "__init__", "cmd_retr", "test_context", "cmd_mkd", "test_cwd", "cmd_quit", "handle_close", "test_all_errors", "tearDown", "recv", "cmd_pbsz", "test_mkd", "set_data", "test_acct", "test_makepasv_issue43285_security_enabled_default", "cmd_setlongretr", "testTimeoutDifferentOrder", "writable", "test_delete", "cmd_list", "test_pwd", "cmd_auth", "test_entry", "testTimeoutValue", "_do_ssl_handshake", "cmd_abor", "cmd_type", "test_voidcmd", "test_abort", "callback", "retr", "cmd_dele", "test_getwelcome", "test_source_address_passive_connection", "test_parse257", "handle_accepted", "cmd_ccc", "testTimeoutConnect", "found_terminator", "handle_write_event", "test_check_hostname", "test_retrbinary", "test_data_connection", "cmd_port", "setUp", "push", "test_auth_issued_twice", "test_dir", "cmd_pass", "test_main", "cmd_opts", "cmd_rmd", "testTimeoutNone", "cmd_stor", "handle_error", "close", "server", "start", "test_with_statement", "testTimeoutDefault", "handle_connect", "test_set_pasv", "stop", "test_af", "test_makeport", "test_ccc", "cmd_prot", "cmd_cwd", "test__all__", "test_retrbinary_rest", "is_client_connected", "test_sanitize", "test_storbinary", "cmd_nlst", "handle_read_event", "cmd_echo", "handle_read", "cmd_acct", "run", "cmd_size", "testTimeoutDirectAccess", "cmd_rest", "cmd_pasv", "test_source_address", "cmd_user", "send", "cmd_rnfr", "test_mlsd", "test_rename", "test_quit", "test_exceptions", "check_data", "test_size"], "function_calls": ["getattr", "skipUnless", "repr", "test_entry", "isinstance", "test_main", "is_client_connected", "x", "super", "str", "tuple", "retr", "DummyFTPServer", "list", "method", "int", "next", "DummyTLS_FTPServer", "hasattr", "len", "set_data", "map"], "class_names": ["TestTimeouts", "TestTLS_FTPClassMixin", "TestTLS_FTPClass", "DummyTLS_FTPHandler", "TestIPv6Environment", "DummyTLS_DTPHandler", "DummyDTPHandler", "SSLConnection", "TestFTPClass", "DummyFTPServer", "MiscTestCase", "DummyTLS_FTPServer", "DummyFTPHandler"], "class_method_calls": ["sock.context", "line.upper", "threading.Lock", "asyncore.loop", "self.assertEqual", "socket.SOCK_STREAM", "self.assertNotEqual", "e.errno", "self.last_received_data", "self.dtp", "data.encode", "self.close", "self.assertIs", "ftplib.FTP_TLS", "support.IPV6_ENABLED", "self.host", "self.assertRaises", "ssl.SSL_ERROR_WANT_READ", "ftplib.FTP", "conn.sendall", "self.secure_connection", "support.check_warnings", "ftp.close", "self._ssl_closing", "ftplib.all_errors", "ssl.PROTOCOL_TLS_CLIENT", "RETR_DATA.replace", "self.join", "self.assertTrue", "self.server", "self.dtp_handler", "err.args", "ssl.CERT_NONE", "socket.SOL_SOCKET", "self.assertIsInstance", "self.in_buffer", "self.client", "l.append", "self.fake_pasv_server_ip", "ftplib.error_proto", "ssl.SSLContext", "ssl.SSL_ERROR_ZERO_RETURN", "self.active_lock", "ctx.verify_mode", "ftp.sock", "ssl.CERT_REQUIRED", "ip.replace", "ssl.CertificateError", "self.handler", "asyncore.close_all", "ssl.SSL_ERROR_WANT_WRITE", "io.StringIO", "self.old_port", "support.find_unused_port", "self.last_received_cmd", "socket.create_server", "asynchat.async_chat", "self.set_socket", "f.seek", "RETR_DATA.encode", "self.next_retr_data", "ssl.SSL_ERROR_EOF", "self.set_terminator", "support.run_unittest", "socket.getdefaulttimeout", "self.bind", "self.listen", "ftplib.error_reply", "self.assertIsNone", "self.active", "self.sock", "errno.EADDRINUSE", "os.path", "self.port", "LIST_DATA.encode", "self.assertFalse", "self.evt", "support.bind_port", "DummyFTPHandler.__init__", "ftplib.Error", "self._do_ssl_shutdown", "socket.create_connection", "ftplib.error_temp", "self.secure_data_channel", "ctx.check_hostname", "ftplib.parse257", "support.threading_setup", "errno.ECONNABORTED", "socket.AF_INET6", "DummyDTPHandler.__init__", "ftplib.error_perm", "flag.append", "self._do_ssl_handshake", "self.socket", "sock.getsockname", "ftp.connect", "asyncore.socket_map", "ssl.SSLSocket", "arg.split", "self.close_when_done", "ctx.load_verify_locations", "sock.recv", "what.encode", "support.check__all__", "self.del_channel", "self.assertNotIsInstance", "socket.AF_INET", "self.dtp_conn_closed", "conn.shutdown", "support.threading_cleanup", "io.BytesIO", "self.next_response", "received.append", "socket.SHUT_WR", "self.handler_instance", "self.check_data", "threading.Event", "self.assertIn", "self.fail", "data.decode", "socket.timeout", "socket.SO_OOBINLINE", "self.server_thread", "self.__flag", "context.wrap_socket", "ssl.SSLError", "conn.close", "self.daemon", "self._ssl_accepting", "LIST_DATA.replace", "context.load_cert_chain", "self.baseclass", "sock.accept", "self._ccc", "line.split", "asyncore.dispatcher", "ftp.timeout", "time.sleep", "self.next_data", "line.find", "NLST_DATA.split", "self.skipTest", "self.rest", "socket.setdefaulttimeout", "sock.settimeout", "self.push", "self.recv", "x.islower", "self.create_socket", "self.handle_close", "threading.Thread", "socket.socket"]}, "test_funcattrs.py": {"libraries": ["unittest", "types", "time", "collections.UserDict"], "function_names": ["test_duplicate_function_equality", "test", "test_set_cell", "e", "setUp", "second_func", "test_cell_new", "test_setting_dict_to_invalid", "test_empty_cell", "test_func_attribute", "test_comparison", "test_func_default_args", "test___func__", "test_delete_docstring", "test_set_attr", "cell", "a", "test_set_docstring_attr", "test_builtin__qualname__", "test___closure__", "test___globals__", "test_dir_includes_correct_attrs", "test_setting_dict_to_valid", "test_blank_func_defaults", "test_delete___dict__", "test___name__", "test_module", "test___func___non_method", "global_function", "test_unset_attr", "test___class__", "test_delete_unknown_attr", "f", "test___self__", "duplicate", "test_unassigned_dict", "b", "first_func", "empty_cell", "inner_function", "inner_function2", "test_func_as_dict_key", "d", "test___qualname__", "inner_global_function", "test_copying___code__", "cannot_set_attr", "c", "test___code__"], "function_calls": ["test", "second_func", "classmethod", "id", "F", "cell", "staticmethod", "UserDict", "setattr", "global_function", "dir", "type", "f", "delattr", "len", "first_func", "empty_cell", "d", "print", "inner_global_function", "c", "exec", "globals"], "class_names": ["LocalClass", "FunctionPropertiesTest", "InstancemethodAttrTest", "ArbitraryFunctionAttrTest", "F", "StaticMethodAttrsTest", "CellTest", "BuiltinFunctionPropertiesTest", "FuncAttrsTest", "FunctionDocstringTest", "FunctionDictsTest"], "class_method_calls": ["self.F", "self.assertIsInstance", "types.CellType", "second_func.__defaults__", "len.__qualname__", "self.assertEqual", "self.assertNotEqual", "dict.fromkeys", "cell_obj.cell_contents", "func.__code__", "self.assertIs", "types.MethodType", "self.assertIn", "self.fail", "FuncAttrsTest.setUp", "self.b", "s.__func__", "self.assertRaises", "e.__code__", "types.CodeType", "str.maketrans", "c.__code__", "self.fi", "b.__code__", "bytes.maketrans", "global_function.__qualname__", "c.__func__", "unittest.main", "func.non_existent_attr", "time.time", "d.__code__", "test.__code__", "f.__closure__", "inner_global_function.__qualname__", "first_func.__defaults__", "self.assertTrue", "self.cannot_set_attr", "float.__getformat__", "unittest.TestCase"]}, "test_functools.py": {"libraries": ["abc", "contextlib", "unittest.mock", "operator.add", "test.support", "unittest", "threading", "copy", "collections", "weakref", "functools", "weakref.proxy", "typing", "builtins", "itertools.permutations", "time", "collections.abc", "collections.UserDict", "random.choice", "sys", "pickle"], "function_names": ["get_cost", "test_need_for_rlock", "test_kw_combinations", "add_dict_attr", "test_attributes", "_cp", "wrapper", "test_type_ann_register", "test_mro_conflicts", "__init__", "test_register_decorator", "test_total_ordering_no_overwrite", "j", "__str__", "__gt__", "test_sort_int", "test_default_update_doc", "__iter__", "test_keyword", "__add__", "test_set_name_not_called", "test_hash", "test_total_ordering_gt", "test_manually_adding_non_string_keyword", "__setitem__", "test_kwargs_copy", "test_cached_attribute_name_differs_from_func_name", "capture", "test_classmethod_register", "test_register_abc", "test_no_operations_defined", "cached_meth", "test_cache_invalidation", "test_wrapping_attributes", "test_lru_method", "g_B", "c_cached_func", "__exit__", "test_builtin_update", "test_iterator_usage", "cost", "test_obj_field", "check_wrapper", "test_basic_examples", "test_doc", "test_lru_no_args", "cached_staticmeth", "test_lru_type_error", "py_cached_func", "test_false_meta", "signature", "test_method_register", "__call__", "a", "orig", "test_annotations", "test_nested_optimization", "test_no_side_effects", "test_error_propagation", "test_unbound_method_retrieval", "square", "test_lru", "_", "test_setstate_errors", "test_weakref", "test_cmp_to_key_arguments", "limited_cache", "test_nested_partial_with_attribute", "f", "test_lru_cache_threaded", "test_positional_only", "test_callable_register", "test_reduce", "test_lru_cache_threaded3", "test_setstate_subclasses", "test_mro", "test_object_with_slots", "test_keystr_replaces_value", "test_lru_with_maxsize_none", "g_A", "prop", "test_positional", "test_total_ordering_ge", "test_selective_update", "__getitem__", "test", "test_staticmethod_register", "test_simple_overloads", "test_invalid_args", "test_reuse_same_name", "test_over_partial", "test_deepcopy", "test_setstate_refcount", "replaced_module", "test_arg_combinations", "test_descriptors", "clear", "fun", "test_kwargs_order", "test_c_classes", "_default_update", "test_invalid_positional_argument", "test_bound_method_introspection", "test_setstate", "eq", "test_pickle", "test_sort_int_str", "test_abstract", "cmp2", "i", "test_lru_hash_only_once", "test_copy", "func", "cmp1", "test_total_ordering_lt", "test_recursive_pickle", "test_reuse_different_names", "test_compose_mro", "test_threaded", "foo", "fib", "test_lru_cache_threaded2", "test_attributes_unwritable", "test_type_error_when_not_implemented", "test_lru_with_exceptions", "t", "test_c3_abc", "test_default_update", "test_lru_bug_36650", "__le__", "test_bad_cmp", "test_repr", "test_lru_bug_35780", "__eq__", "test_lru_cache_decoration", "test_lru_with_keyword_args", "__ge__", "test_protection_of_callers_dict_argument", "test_total_ordering_le", "test_no_update", "test_nested", "test_abstractmethod_register", "__enter__", "test_access_from_class", "__lt__", "test_lru_with_keyword_args_maxsize_none", "test_lru_reentrancy_with_len", "test_lru_star_arg_handling", "test_recursive_repr", "test_lru_with_types", "g_int", "test_argument_checking", "__len__", "full", "test_with_bound_and_unbound_methods", "test_lru_with_maxsize_negative", "test_cached", "h", "mycmp", "infinite_cache", "g", "test_missing_attributes", "__hash__", "test_cmp_to_key", "add", "test_func", "test_overriding_keywords", "test_immutable_dict", "test_invalid_registrations"], "function_calls": ["frozenset", "sorted", "getattr", "T", "CachedCostItemWithSlots", "Squares", "CachedCostItemWait", "staticmethod", "dict", "j", "partial", "int", "enumerate", "len", "SequenceClass", "U", "permutations", "ImplementsGreaterThan", "ImplementsGreaterThanEqualTo", "object", "cls", "ImplementsLessThanEqualTo", "MyDict", "R", "Q", "ImplementsLessThan", "Foo", "str", "signature", "orig", "list", "square", "BadSeq", "limited_cache", "f", "D", "MyTuple", "P", "AA", "classmethod", "vars", "isinstance", "proxy", "BadSequence", "replaced_module", "fun", "B", "tuple", "range", "eq", "TracingDict", "MutatesYourDict", "C", "O", "type", "i", "p", "key", "choice", "func", "hasattr", "fib", "OptionallyCachedCostItem", "DoubleEq", "TestFailingIter", "mro", "repr", "RuntimeError", "ComparatorNotImplemented", "super", "join", "A", "X", "BadCmp", "CachedCostItem", "h", "V", "infinite_cache", "g", "BadTuple", "callable", "test_func", "TypeError", "map"], "class_names": ["AllowPickle", "PyPartialSubclass", "TestCmpToKey", "T", "TestPartialC", "CachedCostItemWithSlots", "AA", "ImplementsLessThanEqualTo", "Abstract", "TestPartial", "MyDict", "Squares", "ComparatorNotImplemented", "R", "ImplementsLessThan", "TestReduce", "CachedCostItemWait", "Q", "BadSequence", "Foo", "B", "MyMeta", "TestCmpToKeyC", "TestCmpToKeyPy", "A", "MyClass", "TestLRUC", "TestWraps", "Orderable_LT", "TestCachedProperty", "X", "BadCmp", "S", "TracingDict", "MutatesYourDict", "ReusedCachedProperty", "CPartialSubclass", "BadSeq", "_", "TestReduceC", "C", "O", "CachedCostItem", "TestPartialMethod", "TestLRU", "D", "V", "SequenceClass", "TestPartialCSubclass", "TestPartialPySubclass", "TestUpdateWrapper", "TestLRUPy", "MyTuple", "OptionallyCachedCostItem", "BadTuple", "DoubleEq", "U", "TestTotalOrdering", "TestFailingIter", "MetaA", "TestSingleDispatch", "P", "ImplementsGreaterThan", "TestReducePy", "TestPartialPy", "ImplementsGreaterThanEqualTo"], "class_method_calls": ["self._cm", "self.get_ops", "unittest.skipUnless", "self.assertEqual", "fun.register", "self.assertNotEqual", "self.partial", "c.Iterable", "c.Reversible", "g.__doc__", "square.cache_info", "self.assertGreaterEqual", "cls.cached_staticmeth", "obj.over_partial", "self.assertIs", "self.sofar", "f.__qualname__", "c.MutableSet", "f.attr", "re_one.exception", "f.keywords", "wrapper.__wrapped__", "py_functools.partial", "sys.getswitchinterval", "self.set_ops", "collections.defaultdict", "part.func", "support.setswitchinterval", "self.assertRaises", "self.A", "c_functools.lru_cache", "abc.ABCMeta", "self._default_update", "builtins.len", "wrapper.__annotations__", "c_functools.partial", "start.wait", "functools._find_impl", "pickle.HIGHEST_PROTOCOL", "part.args", "self.a", "stop.reset", "abc.abstractmethod", "p.__dict__", "module.lru_cache", "obj.cls", "pause.reset", "self.assertTrue", "self.cmp_to_key", "CachedCostItem.cost", "exc.exception", "obj.both", "p.args", "wrapper.__name__", "self.assertIsInstance", "b.f_cnt", "pause.wait", "f.cache_info", "g.registry", "b.f", "f_copy.keywords", "t.register", "unittest.mock", "self._cost", "functools.wraps", "p.func", "wrapper.__doc__", "cm.exception", "obj.nested", "mock_int.__hash__", "c.Sized", "c.f_cnt", "cls.cached_func", "self.assertNotIn", "support.import_fresh_module", "functools.WRAPPER_UPDATES", "stop.wait", "item.cost", "td.set_ops", "self.subTest", "mock_int.__mul__", "p.keywords", "typing.Iterable", "support.swap_attr", "threading.Barrier", "copy.deepcopy", "self.x", "support.start_threads", "contextlib.contextmanager", "pickle.loads", "X.f", "collections.ChainMap", "self.assertIsNot", "obj.args", "part.keywords", "py_functools.cached_property", "g.__name__", "collections.OrderedDict", "b.method", "self.assertIsNone", "str.join", "Abstract.add5", "py_functools.cmp_to_key", "wrapper.__qualname__", "unittest.TestCase", "item.get_cost", "self.assertFalse", "start.set", "copy.copy", "c_functools.cmp_to_key", "c.Set", "c.MutableSequence", "self.assertLess", "decimal.Rounded", "sys.flags", "start.clear", "re_three.exception", "self.value", "kwargs.items", "functools._compose_mro", "c.Container", "py_functools.lru_cache", "c.Callable", "self.arg", "self.assertLessEqual", "Foo.cp", "b.cp", "h.register", "functools.partial", "functools.singledispatchmethod", "ctx.exception", "functools.update_wrapper", "start.reset", "self.lock", "f.__wrapped__", "functools.total_ordering", "self.assertWarns", "item.cached_cost", "g._clear_cache", "self.event", "functools.lru_cache", "c.Collection", "self.reduce", "functools.WRAPPER_ASSIGNMENTS", "self.assertGreater", "j.register", "obj.static", "f.func", "unittest.main", "support.requires_docstrings", "fib.cache_info", "a.f", "A.t", "a.arg", "functools.singledispatch", "c.Mapping", "c_functools.reduce", "re_two.exception", "decimal.Subnormal", "self.max", "self.module", "sys.setswitchinterval", "f.args", "c.MutableMapping", "self.assertNotIsInstance", "p2.new_attr", "Abstract.add", "a.f_cnt", "sys.modules", "f_copy.attr", "a.cp", "MyClass.prop", "self.assertRaisesRegex", "wrapper.attr", "g.register", "py_functools.RLock", "threading.Event", "self.assertIn", "other.value", "self.check_wrapper", "wrapper.__dict__", "a.t", "self.fail", "cls.cached_meth", "g.dispatch", "d.keys", "self.data", "self.f_cnt", "functools._c3_mro", "c.Sequence", "other.x", "unittest.skipIf", "go.set", "f.__setstate__", "self.n", "i.register", "self.AllowPickle", "collections.abc", "decimal.DecimalException", "eq.cache_info", "functools.partialmethod", "td.get_ops", "wrapper.dict_attr", "part.__dict__", "f.cache_clear", "fib.cache_clear", "time.sleep", "td.data", "f_copy.__setstate__", "support.cpython_only", "pickle.dumps", "self.__class__", "c.f", "py_functools.reduce", "f.dict_attr", "threading.Thread", "f_copy.args"]}, "test_future.py": {"libraries": ["test.badsyntax_future3", "test.badsyntax_future7", "test.badsyntax_future6", "test.support", "test.badsyntax_future10", "unittest", "ast", "os", "test.test_future5", "test.badsyntax_future5", "re", "test.badsyntax_future4", "test.badsyntax_future9", "textwrap.dedent", "test.test_future3", "test.future_test2", "test.future_test1", "__future__", "test.badsyntax_future8"], "function_names": ["getActual", "test_unicode_literals_exec", "test_future3", "test_badfuture8", "test_multiple_features", "test_future2", "test_parserhack", "test_badfuture7", "test_badfuture9", "test_badfuture4", "test_future1", "test_annotations", "test_fstring_debug_annotations", "test_ensure_flags_dont_clash", "get_error_location", "test_badfuture3", "test_badfuture10", "test_badfuture6", "test_badfuture5", "check_syntax_error", "assertAnnotationEqual"], "function_calls": ["eq", "dedent", "getattr", "str", "set", "dir", "exec"], "class_names": ["FutureTest", "AnnotationsFutureTestCase"], "class_method_calls": ["self.template", "self.assertIsInstance", "self.check_syntax_error", "self.assertEqual", "self.assertNotEqual", "rx.search", "cm.exception", "flag.startswith", "err.filename", "self.getActual", "future.upper", "self.assertIn", "self.fail", "mo.group", "self.assertAnnotationEqual", "flags.update", "actual.replace", "future_test2.result", "self.assertRaises", "flags.values", "err.lineno", "__future__.all_feature_names", "unittest.main", "os.path", "re.compile", "future_test1.result", "self.assertCountEqual", "err.offset", "unittest.TestCase", "support.CleanImport"]}, "test_future3.py": {"libraries": ["__future__.nested_scopes", "unittest", "__future__.division"], "function_names": ["test_floor_div_operator", "inner", "test_nested_scopes", "nester", "test_true_div_as_default"], "function_calls": ["inner", "nester"], "class_names": ["TestFuture"], "class_method_calls": ["unittest.TestCase", "self.assertEqual", "unittest.main", "self.assertAlmostEqual"]}, "test_future4.py": {"libraries": ["unittest", "__future__.unicode_literals"], "function_names": ["test_unicode_literals"], "function_calls": [], "class_names": ["Tests"], "class_method_calls": ["unittest.TestCase", "self.assertIsInstance", "unittest.main"]}, "test_future5.py": {"libraries": ["unittest", "__future__.unicode_literals", "__future__.print_function", "sys", "test.support"], "function_names": ["test_unicode_literals", "test_print_function"], "function_calls": ["print"], "class_names": ["TestMultipleFeatures"], "class_method_calls": ["self.assertIsInstance", "s.getvalue", "sys.stderr", "support.captured_output", "self.assertEqual", "unittest.TestCase", "unittest.main"]}, "test_gc.py": {"libraries": ["test.support.requires_type_collecting", "subprocess", "test.support.verbose", "test.support.run_unittest", "sysconfig", "test.support.start_threads", "unittest", "threading", "textwrap", "_testcapi.with_tp_del", "test.support.script_helper.assert_python_ok", "weakref", "test.support.cpython_only", "time", "gc", "test.support.unlink", "test.support.refcount_test", "test.support.strip_python_stderr", "test.support.temp_dir", "test.support.TESTFN", "test.support.script_helper.make_script", "test.support.import_module", "sys"], "function_names": ["test_instance", "test_38379", "test_legacy_finalizer_newclass", "__getattr__", "setUp", "__tp_del__", "test_get_objects", "test_get_referents", "test_collect_generations", "do_work", "test_garbage_at_shutdown", "test_saveall", "test_list", "test_boom2", "test_boom_new", "test_gc_ordinary_module_at_shutdown", "test_main", "test_get_objects_arguments", "test_collect", "test_del_newclass", "test_newinstance", "test_get_count", "test_trashcan_threads", "preclean", "test_is_tracked", "test_legacy_finalizer", "test_bug1055820d", "test_collect_garbage", "__init__", "test_frame", "test_get_stats", "it_happened", "test_gc_main_module_at_shutdown", "test_boom2_new", "test_method", "callback", "test_bug1055820c", "test_function", "test_del", "test_bug1055820b", "test_trashcan", "test_global_del_SystemExit", "make_nested", "cb2", "run_thread", "__del__", "with_tp_del", "test_dict", "test_newstyleclass", "test_class", "test_boom", "test_freeze", "tearDown", "test_refcount_errors", "f", "test_bug21435", "cb1", "getstats", "run_command", "test_tuple", "__new__", "test_collect_generation", "sleeper_gen"], "function_calls": ["object", "strip_python_stderr", "UserClass", "assert_python_ok", "Boom2", "do_work", "id", "Z", "isinstance", "test_main", "make_nested", "UserIntSlots", "B", "Boom2_New", "tuple", "A", "C1055820", "Boom", "Uncollectable", "wr", "open", "run_unittest", "dict", "start_threads", "range", "list", "c2wr", "C", "dir", "set", "UserFloatSlots", "next", "f", "D", "hasattr", "temp_dir", "len", "any", "make_script", "bytearray", "Ouch", "getstats", "UserInt", "run_command", "import_module", "GC_Detector", "UserClassSlots", "TypeError", "sleeper_gen", "Boom_New", "exec", "print"], "class_names": ["GCTests", "UserClass", "Boom2", "Z", "B", "Boom2_New", "C1055820", "A", "Boom", "Uncollectable", "GCCallbackTests", "C", "GCTogglingTests", "UserFloatSlots", "D", "Ouch", "UserInt", "GC_Detector", "UserClassSlots", "Boom_New", "UserIntSlots"], "class_method_calls": ["self.cb1", "sys.executable", "exit.append", "self.assertEqual", "self.assertNotEqual", "gc.enable", "b.b", "self.assertGreaterEqual", "self.debug", "gc.callbacks", "b.attr", "sys.getswitchinterval", "L.append", "self.assertRaises", "c1.keep_d0_alive", "c0.loop", "self.othergarbage", "gc.set_debug", "a.a", "self.cleanup", "self.i", "gc.disable", "self.assertTrue", "zs.append", "self.assertIsInstance", "gc.unfreeze", "l.append", "self.enabled", "got.sort", "self.assertNotIn", "subprocess.Popen", "gc.freeze", "out.strip", "e.partner", "self.assertRegex", "self.x", "gc.get_objects", "gc.garbage", "sys._getframe", "gc.collect", "unittest.TestCase", "C.dels", "self.assertFalse", "gc.get_stats", "script.write", "self.preclean", "self.assertLess", "obj.partner", "self.cb2", "self.addCleanup", "gc.get_referents", "self.attr", "gc.isenabled", "gc.get_threshold", "c1.keep_c0_alive", "subprocess.PIPE", "p.returncode", "self.assertGreater", "d0.loop", "gc.get_debug", "A.a", "p.stderr", "self.init", "gc.DEBUG_LEAK", "threads.append", "C.inits", "sysconfig.get_config_vars", "sys.setswitchinterval", "gc.DEBUG_SAVEALL", "self.visit", "self.gc_happened", "p.communicate", "gc.get_count", "junk.append", "p.stdout", "self.me", "self.assertIn", "self.partner", "self.fail", "detector.gc_happened", "Ouch.n", "gc.get_freeze_count", "a.attr", "obj.a", "unittest.skipIf", "gc.is_tracked", "self.__init__", "weakref.ref", "textwrap.dedent", "time.sleep", "stdout.strip", "gc.set_threshold", "self.wr", "threading.Thread", "self.loop"]}, "test_gdb.py": {"libraries": ["unittest", "re", "platform", "textwrap", "test.support.findfile", "test.support.python_is_optimized", "sys", "subprocess", "test.support", "os", "test.support.run_unittest", "sysconfig"], "function_names": ["test_modern_class", "test_tuples", "test_printing_global", "test_pyup_command", "test_up_then_down", "test_NULL_ob_type", "test_selfreferential_new_style_instance", "test_corrupt_tp_name", "test_selfreferential_old_style_instance", "test_bt", "test_frozensets", "gdb_has_frame_select", "test_lists", "get_gdb_version", "test_corrupt_tp_flags", "test_singletons", "assertEndsWith", "run_gdb", "test_subclassing_list", "test_down_at_bottom", "test_main", "test_gc", "test_sets", "test_one_abs_arg", "test_bt_full", "assertGdbRepr", "get_stack_trace", "test_builtin_method", "assertMultilineMatches", "assertListing", "cet_protection", "test_corrupt_ob_type", "assertSane", "test_locals_after_up", "test_NULL_ptr", "test_truncation", "test_getting_backtrace", "test_dicts", "test_bytes", "test_pycfunction", "test_up_at_top", "test_frames", "test_int", "test_builtins_help", "test_strings", "test_selfreferential_list", "check_repr", "test_basic_command", "test_two_abs_args", "test_print_after_up", "get_sample_script", "test_printing_builtin", "get_gdb_repr", "test_threads", "test_exceptions", "test_wrapper_call", "test_selfreferential_dict", "test_subclassing_tuple"], "function_calls": ["frozenset", "gdb_has_frame_select", "get_gdb_version", "run_gdb", "RuntimeError", "repr", "test_main", "tuple", "ascii", "Exception", "run_unittest", "cet_protection", "range", "list", "python_is_optimized", "set", "int", "len", "any", "findfile", "chr", "check_repr", "bytes", "print"], "class_names": ["PyBtTests", "PrettyPrintTests", "PyPrintTests", "PyListTests", "StackNavigationTests", "DebuggerTests", "PyLocalsTests"], "class_method_calls": ["support.PGO", "sys.platform", "sys.flags", "gdb_version.splitlines", "sys.executable", "unittest.skipUnless", "cmds_after_breakpoint.append", "self.assertEqual", "gdbpy_errors.rstrip", "self.assertMultilineMatches", "proc.communicate", "self.assertEndsWith", "re.search", "flag.startswith", "unittest.SkipTest", "self.assertListing", "self.assertIn", "platform.python_compiler", "self.fail", "err.decode", "subprocess.Popen", "self.get_gdb_repr", "env.update", "args.extend", "cflags.split", "self.subTest", "unittest.skipIf", "self.assertRegex", "sysconfig.get_config_var", "self.get_stack_trace", "support.verbose", "actual.endswith", "subprocess.PIPE", "err.splitlines", "os.environ", "textwrap.dedent", "proc.returncode", "os.path", "out.rstrip", "out.decode", "re.DOTALL", "sys.stderr", "self.get_sample_script", "self.assertSane", "subprocess._args_from_interpreter_flags", "self.skipTest", "self.assertTrue", "sysconfig.is_python_build", "re.match", "unittest.TestCase", "self.assertGdbRepr", "match.group", "m.group", "text.encode", "flag.endswith"]}, "test_generator_stop.py": {"libraries": ["unittest", "__future__.generator_stop"], "function_names": ["f", "g", "test_stopiteration_wrapping_context", "test_stopiteration_wrapping"], "function_calls": ["type", "next", "f", "g"], "class_names": ["TestPEP479"], "class_method_calls": ["self.assertIs", "exc.__suppress_context__", "self.fail", "self.assertTrue", "exc.__context__", "exc.__cause__", "unittest.TestCase", "unittest.main", "self.assertRaisesRegex"]}, "test_generators.py": {"libraries": ["unittest", "_testcapi", "copy", "gc", "inspect", "test.test_generators", "sys", "pickle", "weakref", "test.support"], "function_names": ["simple_conjoin", "rowgen", "g3", "add_to_successors", "advance", "test_name", "test_except_gen_except", "test_stopiteration_error", "test_refcycle", "test_except_next", "gen", "g2", "_gen3", "printsolution", "_init_board", "test_main", "test_except_throw", "test_generator_gi_yieldfrom", "generator1", "second", "test_return_tuple", "a", "__init__", "index2coords", "coords2index", "flat_conjoin", "test_tutorial_stopiteration", "last", "test_pickle", "test_except_throw_exception_context", "test_frame_resurrect", "func", "test_copy", "advance_hard", "f", "test_return_stopiteration", "b", "g", "first", "test_raise_and_yield_from", "remove_from_successors", "test_lambda_generator", "store_raise_exc_generator", "generator2", "conjoin", "solve"], "function_calls": ["add_to_successors", "gen", "g2", "_gen3", "StopIteration", "test_main", "str", "a", "wr", "range", "ValueError", "next", "type", "c2i", "func", "f", "hasattr", "divmod", "len", "b", "g", "g1", "remove_from_successors", "it", "TypeError", "store_raise_exc_generator", "gen_fun", "conjoin", "print"], "class_names": ["Knights", "FinalizationTest", "GeneratorTest", "Queens", "YieldFromTests", "ExceptionTest", "SignalAndYieldFromTest"], "class_method_calls": ["copy.copy", "self.assertIsInstance", "candidates.append", "inspect.getgeneratorstate", "self.used", "gen.__name__", "support.run_doctest", "unittest.skipUnless", "self.assertEqual", "support.gc_collect", "self.rowgenerators", "func.__name__", "exc.value", "self._init_board", "cm.exception", "gen.send", "inspect.GEN_CREATED", "gen_b.gi_yieldfrom", "self.assertIs", "self.assertRaisesRegex", "self.m", "self.index2coords", "inspect.GEN_SUSPENDED", "s.remove", "make.throw", "self.assertRaises", "self.succs", "sys.exc_info", "self.n", "self.final", "g.throw", "self.lastij", "support.run_unittest", "func.__qualname__", "weakref.ref", "sys.getrefcount", "pickle.HIGHEST_PROTOCOL", "self.assertGreater", "gc.garbage", "self.assertIsNone", "pickle.PicklingError", "g.send", "self.squaregenerators", "inspect.GEN_CLOSED", "gen_b.send", "candidates.sort", "gen.__qualname__", "self.coords2index", "inspect.GEN_RUNNING", "sys._getframe", "pickle.dumps", "self.generator1", "self.generator2", "self.assertTrue", "exc.__context__", "succs.append", "unittest.TestCase", "self.assertFalse", "_testcapi.raise_SIGINT_then_send_None"]}, "test_genericclass.py": {"libraries": ["unittest", "test.support", "_testcapi.Generic", "_testcapi.GenericAlias"], "function_names": ["test_mro_entry_none", "__mro_entries__", "test_class_getitem_inheritance_2", "test_class_getitem_patched", "__init_subclass__", "test_class_getitem_classmethod", "test_mro_entry_errors", "test_class_getitem_errors_2", "test_mro_entry_with_builtins", "test_mro_entry_signature", "test_class_getitem_metaclass_first", "test_mro_entry_with_builtins_2", "__class_getitem__", "test_mro_entry_type_call", "test_mro_entry", "test_class_getitem_inheritance", "test_class_getitem", "test_class_getitem_with_builtins", "test_class_getitem_format", "test_class_getitem_errors", "test_mro_entry_metaclass", "test_mro_entry_errors_2", "test_c_class", "test_class_getitem_with_metaclass", "__new__", "test_class_getitem_metaclass", "__getitem__"], "function_calls": ["C_not_callable", "C_too_many", "super", "C_not_tuple", "C", "type", "classmethod", "C_too_few", "D", "E"], "class_names": ["C_not_callable", "C_too_many", "C_not_tuple", "B", "C", "A", "TestClassGetitem", "C_too_few", "E", "Meta", "D", "TestMROEntry", "CAPITest"], "class_method_calls": ["self.assertIsInstance", "cls.called_with", "Generic.__class_getitem__", "C.__orig_bases__", "self.assertEqual", "IntGeneric.__mro_entries__", "D.__mro__", "self.assertRaisesRegex", "self.assertIs", "B.called_with", "e.__class_getitem__", "D.__bases__", "E.__mro__", "self.assertRaises", "meta_args.extend", "E.__orig_bases__", "C.__bases__", "tested.append", "cls.__name__", "getitem_args.extend", "item.__name__", "unittest.main", "tested.extend", "support.cpython_only", "C.__mro__", "self.__class__", "D.__orig_bases__", "unittest.TestCase", "cls.__class_getitem__", "E.__bases__", "D.__class__"]}, "test_genericpath.py": {"libraries": ["unittest", "sys", "warnings", "test.support.script_helper.assert_python_ok", "test.support", "os", "test.support.FakePath", "genericpath"], "function_names": ["create_file", "test_abspath", "test_realpath", "test_abspath_issue3426", "test_join_errors", "test_relpath_errors", "_test_samestat_on_link_func", "test_path_isfile", "setUp", "_test_samefile_on_link_func", "test_expandvars", "test_path_exists", "test_samefile_on_symlink", "test_path_isdir", "test_exists_fd", "test_samestat_on_symlink", "test_exists", "test_samefile_on_link", "test_no_argument", "test_isfile", "test_normpath_issue5827", "test_normcase", "test_samestat_on_link", "test_invalid_paths", "test_import", "test_getsize", "check", "assertPathEqual", "test_filetime", "test_splitdrive", "test_sameopenfile", "test_nonascii_abspath", "test_path_getctime", "test_path_samefile", "test_isdir", "test_path_getsize", "test_path_getmtime", "test_commonprefix", "test_samefile", "test_path_commonprefix", "test_expandvars_nonascii", "test_samestat"], "function_calls": ["create_file", "bytearray", "check", "len", "splitdrive", "assert_python_ok", "normcase", "commonprefix", "getattr", "expandvars", "open", "FakePath", "func", "abspath", "hasattr"], "class_names": ["PathLikeTests", "CommonTest", "TestGenericTest", "GenericTest"], "class_method_calls": ["self.assertIsInstance", "os.mkdir", "sys.platform", "support.rmdir", "os.pipe", "unittest.skipUnless", "self.assertEqual", "self.assertNotEqual", "support.TESTFN_UNDECODABLE", "os.symlink", "self.assertLessEqual", "self.assertRaisesRegex", "self.assertIs", "support.temp_cwd", "fp.write", "os.fsencode", "f.write", "support.TESTFN", "self.assertIn", "self.fail", "support.TESTFN_NONASCII", "self.addCleanup", "self.assertPathEqual", "self._test_samestat_on_link_func", "self.common_attributes", "self._test_samefile_on_link_func", "warnings.catch_warnings", "support.skip_unless_symlink", "os.remove", "f.read", "fp2.fileno", "os.link", "self.subTest", "self.file_path", "self.assertRaises", "env.clear", "warnings.simplefilter", "GenericTest.common_attributes", "self.file_name", "support.unlink", "os.close", "self.attributes", "self.pathmodule", "support.check_warnings", "unittest.main", "fp1.fileno", "self.test_abspath", "os.path", "support.FS_NONASCII", "self.skipTest", "self.assertTrue", "os.stat", "support.EnvironmentVarGuard", "s2.startswith", "unittest.TestCase", "self.assertFalse", "s1.startswith"]}, "test_genexps.py": {"libraries": ["sys", "test.support", "gc", "test.test_genexps"], "function_names": ["test_main"], "function_calls": ["len", "test_main", "hasattr", "range", "print"], "class_names": [], "class_method_calls": ["support.run_doctest", "sys.gettrace", "sys.gettotalrefcount", "gc.collect"]}, "test_getargs2.py": {"libraries": ["_testcapi.getargs_h", "_testcapi.getargs_s_star", "_testcapi.getargs_et_hash", "_testcapi.getargs_I", "_testcapi.FLT_MIN", "_testcapi.getargs_n", "_testcapi.getargs_y", "_testcapi.INT_MIN", "_testcapi.getargs_z_hash", "_testcapi.getargs_H", "_testcapi.getargs_u_hash", "_testcapi.getargs_u", "_testcapi.getargs_i", "test.support", "string", "_testcapi.getargs_f", "_testcapi.getargs_es", "_testcapi.UCHAR_MAX", "unittest", "_testcapi.ULONG_MAX", "_testcapi.USHRT_MAX", "_testcapi.getargs_positional_only_and_keywords", "_testcapi.UINT_MAX", "_testcapi.getargs_k", "_testcapi.get_kwargs", "_testcapi.getargs_y_hash", "_testcapi.PY_SSIZE_T_MIN", "_testcapi.getargs_et", "_testcapi.getargs_Z", "_testcapi.DBL_MIN", "_testcapi.getargs_C", "_testcapi.getargs_B", "_testcapi.get_args", "_testcapi.getargs_keywords", "_testcapi.DBL_MAX", "_testcapi.LONG_MIN", "_testcapi.LONG_MAX", "_testcapi.getargs_s", "_testcapi.getargs_U", "_testcapi.SHRT_MIN", "_testcapi.getargs_s_hash", "_testcapi.getargs_p", "_testcapi.getargs_b", "_testcapi.getargs_Y", "_testcapi.getargs_l", "_testcapi.getargs_tuple", "_testcapi.getargs_c", "_testcapi.getargs_z_star", "_testcapi.INT_MAX", "_testcapi.getargs_d", "_testcapi.getargs_K", "_testcapi.getargs_es_hash", "_testcapi.getargs_L", "_testcapi.FLT_MAX", "_testcapi.SHRT_MAX", "_testcapi.getargs_z", "_testcapi.getargs_Z_hash", "_testcapi.getargs_S", "_testcapi.getargs_w_star", "_testcapi.getargs_keyword_only", "sys", "math", "_testcapi.PY_SSIZE_T_MAX", "_testcapi.getargs_D", "_testcapi.getargs_y_star"], "function_names": ["test_u", "test_s", "test_s_star", "test", "test_kwargs", "test_u_hash", "test_H", "test_d", "test_c", "test_es", "test_et_hash", "test_parse_tuple_and_keywords", "test_z_hash", "test_surrogate_keyword", "__index__", "test_y_hash", "test_keyword_args", "test_K", "test_positional_args", "test_skipitem", "test_b", "__complex__", "test_I", "test_skipitem_with_suffix", "test_C", "test_Z_hash", "__int__", "test_required_args", "test_f_rounding", "test_S", "test_args", "test_z_star", "assertEqualWithSign", "test_y_star", "test_empty_keyword", "test_B", "__len__", "test_s_hash", "test_es_hash", "test_Y", "test_f", "test_z", "test_optional_args", "test_w_star", "__bool__", "test_k", "test_l", "test_mixed_args", "test_U", "__getitem__", "test_L", "test_p", "test_positional_only", "test_invalid_keyword", "test_Z", "test_bad_use", "test_h", "test_y", "test_n", "__float__", "test_too_many_args", "test_tuple", "test_D", "test_et", "test_i"], "function_calls": ["BadInt", "FloatSubclass", "getargs_l", "getargs_K", "getargs_S", "BadComplex2", "getattr", "BadFloat3", "getargs_keywords", "getargs_y_hash", "getargs_tuple", "BadFloat2", "dir", "ComplexSubclass2", "getargs_f", "getargs_L", "getargs_z_star", "Float", "Paradox", "getargs_p", "memoryview", "BadInt2", "TupleSubclass", "BadComplex", "getargs_y_star", "getargs_et_hash", "IntSubclass", "DictSubclass", "str", "ComplexSubclass", "getargs_c", "getargs_I", "complex", "locals", "getargs_u", "getargs_s", "Complex", "get_args", "getargs_n", "getargs_B", "BadFloat", "get_kwargs", "BadIndex", "BadIndex3", "getargs_s_hash", "getargs_u_hash", "seq", "Index", "getargs_keyword_only", "getargs_Z", "getargs_d", "parse", "range", "getargs_U", "BadComplex3", "getargs_Y", "getargs_es", "type", "getargs_Z_hash", "float", "getargs_es_hash", "getargs_h", "Int", "FloatSubclass2", "getargs_C", "getargs_k", "getargs_b", "getargs_H", "getargs_et", "BadIndex2", "IndexIntSubclass", "getargs_i", "bytearray", "BadInt3", "chr", "getargs_y", "getargs_w_star", "getargs_z_hash", "getargs_s_star", "map", "getargs_D", "getargs_z"], "class_names": ["BadInt", "FloatSubclass", "BadComplex2", "Paradox", "BadIndex", "BadIndex3", "Unsigned_TestCase", "BadFloat3", "Object_TestCase", "BadInt2", "TupleSubclass", "SkipitemTest", "BadComplex", "seq", "IntSubclass", "Index", "Test_testcapi", "Signed_TestCase", "DictSubclass", "ComplexSubclass", "BadIndex2", "IndexIntSubclass", "Float_TestCase", "LongLong_TestCase", "BadComplex3", "String_TestCase", "BadFloat2", "Complex", "Bytes_TestCase", "ComplexSubclass2", "Keywords_TestCase", "Tuple_TestCase", "KeywordOnly_TestCase", "BadInt3", "Float", "ParseTupleAndKeywords_Test", "BadFloat", "Int", "FloatSubclass2", "PositionalOnlyAndKeywords_TestCase", "Test6012", "Boolean_TestCase"], "class_method_calls": ["self.assertEqual", "self.assertNotEqual", "support.import_module", "support.requires_IEEE_754", "self.assertRaisesRegex", "self.assertIs", "sys.float_info", "self.assertIn", "self.fail", "name.startswith", "self.subTest", "self.assertRaises", "self.assertWarns", "math.copysign", "self.assertIsNone", "self.assertEqualWithSign", "string.ascii_letters", "unittest.main", "_testcapi.argparsing", "_testcapi.parse_tuple_and_keywords", "self.getargs", "unittest.TestCase", "name.endswith"]}, "test_getopt.py": {"libraries": ["unittest", "types", "getopt", "test.support.run_doctest", "test.support.verbose", "test.support.EnvironmentVarGuard"], "function_names": ["test_libref_examples", "setUp", "test_getopt", "test_issue4629", "test_do_shorts", "assertError", "test_short_has_arg", "test_long_has_args", "tearDown", "test_do_longs", "test_gnu_getopt"], "function_calls": ["run_doctest", "object", "EnvironmentVarGuard"], "class_names": ["GetoptTests"], "class_method_calls": ["getopt.do_shorts", "getopt.short_has_arg", "getopt.do_longs", "self.assertError", "types.ModuleType", "getopt.GetoptError", "getopt.long_has_args", "self.assertTrue", "self.assertEqual", "getopt.getopt", "self.env", "getopt.gnu_getopt", "unittest.TestCase", "self.assertFalse", "unittest.main", "self.assertRaises"]}, "test_getpass.py": {"libraries": ["unittest", "pwd", "unittest.mock", "termios", "getpass", "io.StringIO", "io.BytesIO", "test.support", "os", "io.TextIOWrapper"], "function_names": ["test_uses_tty_directly", "test_flushes_stream_after_prompt", "test_trims_trailing_newline", "test_falls_back_to_stdin", "test_username_priorities_of_env_values", "test_raises_on_empty_input", "test_falls_back_to_fallback_if_termios_raises", "test_username_takes_username_from_env", "test_uses_stderr_as_default", "test_uses_stdin_as_default_input", "test_uses_stdin_as_different_locale", "test_flushes_stream_after_input", "test_resets_termios", "test_username_falls_back_to_pwd"], "function_calls": ["StringIO", "list", "BytesIO", "TextIOWrapper"], "class_names": ["GetpassGetuserTest", "GetpassRawinputTest", "UnixGetpassTest"], "class_method_calls": ["open.assert_called_once_with", "stderr.getvalue", "getpass._raw_input", "stdin.fileno", "getpw.return_value", "unittest.skipUnless", "self.assertEqual", "getpass.unix_getpass", "getpass.GetPassWarning", "uid.return_value", "stdin.readline", "open.return_value", "fileio.assert_called_once_with", "fallback.assert_called_once_with", "mock.Mock", "getpass.getuser", "tcgetattr.return_value", "mock_input.readline", "self.assertIn", "environ.get", "support.captured_stderr", "self.assertRaises", "tcsetattr.assert_called_with", "stderr.write", "mock_stream.flush", "self.assertWarns", "mock.call", "textio.assert_called_once_with", "tcsetattr.side_effect", "os_open.side_effect", "fileio.return_value", "stream.flush", "textio.return_value", "termios.error", "mock.patch", "unittest.main", "getpw.assert_called_once_with", "os.O_RDWR", "os.O_NOCTTY", "unittest.TestCase", "mock.ANY"]}, "test_gettext.py": {"libraries": ["unittest", "contextlib", "base64", "gettext", "test.support", "os", "builtins"], "function_names": ["test_textdomain", "test_multiline_strings", "test_bad_minor_version", "setUp", "test_lt", "test_de", "test_gd2", "test_sl", "test_pl", "test_the_alternative_interface", "test_plural_context_forms1", "test_output_encoding", "test__all__", "test_division", "test_lgettext_2", "test_lngettext_output_encoding", "test_unicode_context_msgid", "test_ja", "test_ro", "test_fr", "test_weird_metadata", "test_plural_forms2", "test_ignore_comments_in_headers_issue36239", "test_lngettext_2", "test_triple_double_quotes", "test_gd", "test_bindtextdomain", "test_cs", "test_some_translations_with_context", "test_security", "test_lgettext_output_encoding", "test_nested_condition_operator", "test_unicode_msgstr_with_context", "test_double_quotes", "test_lngettext_bind_textdomain_codeset", "test_unicode_msgid", "test_unicode_context_msgstr", "test_lv", "tearDown", "test_ru", "test_some_translations", "test_lngettext", "test_invalid_syntax", "test_decimal_number", "test_plural_number", "assertDeprecated", "test_ar", "test_bad_major_version", "test_lgettext_bind_textdomain_codeset", "test_some_translations_with_context_and_domain", "test_plural_forms1", "test_unicode_msgstr", "test_chained_comparison", "test_plural_form_error_issue17898", "foo", "test_triple_single_quotes", "test_plural_context_forms2", "test_lgettext", "test_cache"], "function_calls": ["eq", "isinstance", "object", "lngettext", "len", "pgettext", "_", "raises", "ldngettext", "str", "lgettext", "ldgettext", "open", "unless", "f", "range"], "class_names": ["GettextBaseTest", "GNUTranslationParsingTest", "UnicodeTranslationsTest", "DummyGNUTranslations", "MiscTestCase", "GettextCacheTestCase", "WeirdMetadataTest", "UnicodeTranslationsPluralTest", "PluralFormsTestCase", "GettextTestCase1", "LGettextTestCase", "GettextTestCase2"], "class_method_calls": ["self.mofile", "self.assertIsInstance", "t.set_output_charset", "support.check__all__", "base64.decodebytes", "self.pgettext", "self._", "os.makedirs", "exception.filename", "t.output_charset", "self.assertEqual", "t.lngettext", "self.tearDown", "self.env", "gettext.npgettext", "gettext.pgettext", "gettext.translation", "gettext.lgettext", "self.localedir", "cm.exception", "exception.strerror", "GettextBaseTest.setUp", "fp.write", "gettext.ldgettext", "gettext.ldngettext", "support.rmtree", "gettext._localecodesets", "builtins.gettext", "gettext.dpgettext", "self.t", "gettext.lngettext", "self.assertWarnsRegex", "self.assertRaises", "self.assertWarns", "builtins.lgettext", "gettext.install", "self.ngettext", "t.install", "t.info", "os.curdir", "self.assertDeprecated", "t.lgettext", "gettext.textdomain", "contextlib.contextmanager", "t.npgettext", "t.ngettext", "unittest.main", "exception.errno", "gettext.bindtextdomain", "os.path", "gettext.GNUTranslations", "self.npgettext", "t.__class__", "gettext.gettext", "gettext._translations", "self.assertTrue", "gettext.bind_textdomain_codeset", "support.EnvironmentVarGuard", "gettext.ngettext", "unittest.TestCase", "t.gettext", "gettext.c2py"]}, "test_glob.py": {"libraries": ["unittest", "test.support.can_symlink", "test.support.TESTFN", "test.support.change_cwd", "shutil", "sys", "test.support.create_empty_file", "test.support.skip_unless_symlink", "os", "glob"], "function_names": ["test_recursive_glob", "setUp", "test_glob_directory_names", "assertSequencesEqual_noorder", "test_glob_many_open_files", "test_selflink", "test_glob_symlinks", "mktemp", "test_glob_literal", "test_escape", "check_escape", "test_escape_windows", "norm", "test_glob_broken_symlinks", "joins", "tearDown", "glob", "test_glob_directory_with_trailing_slash", "test_glob_nested_directory", "test_glob_one_directory", "test_glob_bytes_directory_with_trailing_slash", "test_glob_magic_in_drive", "rglob"], "function_calls": ["eq", "list", "check", "len", "sorted", "map", "join", "set", "create_empty_file", "type", "next", "can_symlink", "range", "change_cwd"], "class_names": ["GlobTests", "SymlinkLoopGlobTests"], "class_method_calls": ["self.tempdir", "sys.platform", "os.makedirs", "self.joins", "unittest.skipUnless", "self.assertEqual", "os.symlink", "os.fsencode", "self.assertIn", "self.rglob", "self.addCleanup", "self.norm", "glob.glob", "os.sep", "self.assertSequencesEqual_noorder", "results.remove", "self.mktemp", "os.curdir", "shutil.rmtree", "unittest.main", "os.path", "glob.iglob", "glob.escape", "self.assertCountEqual", "self.check_escape", "unittest.TestCase", "self.glob"]}, "test_global.py": {"libraries": ["test.support.check_syntax_error", "unittest", "warnings", "test.support.check_warnings", "test.support.run_unittest"], "function_names": ["test1", "test_main", "setUp", "test3", "test4", "tearDown", "test2"], "function_calls": ["test_main", "compile", "check_warnings", "check_syntax_error", "run_unittest"], "class_names": ["GlobalTests"], "class_method_calls": ["unittest.TestCase", "warnings.filterwarnings", "warnings.catch_warnings", "self._warnings_manager"]}, "test_grammar.py": {"libraries": ["test", "sys.*", "warnings", "test.ann_module3.g_bad_ann", "test.ann_module2", "unittest", "test.ann_module3.f_bad_ann", "typing", "test.support.check_syntax_warning", "time", "inspect", "collections.ChainMap", "test.ann_module", "test.support.check_syntax_error", "time.time", "sys.maxsize", "sys.path", "test.ann_module3.D_bad_ann", "sys", "sys.argv"], "function_names": ["g3", "test_yield", "test_float_exponent_tokenization", "test_expr_stmt", "f_OK", "d21v", "pos2key2", "meth3", "test_for", "g2", "test_eval_input", "test_break_continue_loop", "__init__", "test_nonlocal", "__aiter__", "test_continue_in_finally_after_return", "test_del_stmt", "test_while", "test_ellipsis", "test_multiplicative_ops", "__matmul__", "test_funcdef", "test_async_with", "test_yield_in_comprehensions", "test_shift_ops", "__setitem__", "test_return", "test_return_in_finally", "g1", "test_nested_front", "test_atoms", "f3", "test_classdef", "test_in_func", "d21", "__prepare__", "test_var_annot_metaclass_semantics", "__exit__", "pos2key2dict", "test_dictcomps", "_checkeval", "test_additive_ops", "one", "d12v", "test_var_annot_module_semantics", "test_comparison_is_literal", "test_suite", "f2bad", "test_comprehension_specials", "test_var_annot_rhs", "a2", "test_genexps", "test_continue_stmt", "v2", "d01v", "f", "d12", "d22v", "test_var_annot_custom_maps", "class_decorator", "test_break_stmt", "d11", "d22", "test_async_for", "test_simple_stmt", "test_warn_missed_comma", "pos0key1", "v1", "test_var_annot_basic_semantics", "__getitem__", "meth2", "d02", "test_raise", "test_try", "test_if_else_expr", "test_continue_in_finally", "testAssert2", "fbad", "test_comparison", "v0", "test_break_in_finally", "test_var_annot_in_module", "test_paren_evaluation", "test_former_statements_refer_to_builtins", "__imatmul__", "test_var_annot_refleak", "f1", "test_var_annot_syntax_errors", "test_long_integers", "test_with_statement", "test_async_await", "f2", "d11v", "test_selectors", "sum", "check", "test_plain_integers", "decorator", "test_bad_numerical_literals", "test_pass_stmt", "test_global", "test_break_in_finally_after_return", "__enter__", "d01", "test_assert", "test_var_annot_simple_exec", "null", "test_floats", "test_lambdef", "test_binary_mask_ops", "test_underscore_literals", "test_import", "__len__", "test_if", "test_unary_ops", "meth1", "test_eof_error", "test_inner", "test_test", "test_string_literals", "test_var_annot_basics", "test_backslash", "g", "test_matrix_mul", "test_listcomps", "a1", "d02v", "foo"], "function_calls": ["check", "y", "d02", "g3", "AIter", "l3", "pos2key2dict", "manager", "fbad", "d21v", "f_OK", "l1", "pos2key2", "Squares", "g2", "l5", "RuntimeError", "f_bad_ann", "x", "_checkeval", "str", "d01", "one", "d12v", "v0", "someobj", "f2bad", "D_bad_ann", "setattr", "range", "list", "f1", "v2", "CNS2", "CNS", "l6", "M", "d01v", "type", "next", "test_inner", "bool", "eval", "d12", "d22v", "f", "g1", "len", "g", "test_nested_front", "l4", "f3", "compile", "f2", "d11", "d22", "check_syntax_error", "d11v", "sum", "d02v", "g_bad_ann", "d21", "foo", "test_in_func", "pos0key1", "ord", "v1", "exec", "print"], "class_names": ["AIter", "CC", "CMeta", "manager", "Squares", "GrammarTests", "B", "G", "Done", "Cbad2", "CBad", "B2", "C", "CNS2", "CNS", "Spam", "C1", "M", "Ham", "D", "TokenTests", "C2"], "class_method_calls": ["f3.__code__", "result.append", "f.__annotations__", "self.check_syntax_error", "unittest.skipUnless", "self.assertEqual", "ann_module2.__annotations__", "test.__name__", "CC.__annotations__", "sys.modules", "int.new_attr", "cm.exception", "self.assertRaisesRegex", "self.assertIs", "m.other", "self.sofar", "C.__annotations__", "self.assertIn", "f2.__code__", "self.fail", "test2.__code__", "inspect.CO_COROUTINE", "a.b", "warnings.catch_warnings", "Spam.f", "lit.replace", "self.subTest", "self.assertRaises", "warnings.simplefilter", "test2._marked", "typing.Tuple", "self.x", "item.lower", "case.format", "self.check_syntax_warning", "unittest.main", "s.strip", "time.time", "ann_module.M", "sys.path", "test.__code__", "test.__annotations__", "self.other", "Ham.f", "source.replace", "e.args", "L.sort", "self.assertTrue", "self._dct", "ann_module.__annotations__", "test2.__name__", "no_such_name_defined.attr", "unittest.TestCase", "self.assertFalse", "x.y", "self.max"]}, "test_grp.py": {"libraries": ["unittest", "test.support"], "function_names": ["test_noninteger_gid", "test_values_extended", "test_errors", "test_values", "check_value"], "function_calls": ["list", "len", "chr", "str", "float", "ord", "range"], "class_names": ["GroupDatabaseTestCase"], "class_method_calls": ["self.assertIsInstance", "value.gr_name", "self.assertEqual", "e.gr_gid", "support.import_module", "grp.getgrall", "name.startswith", "value.gr_passwd", "value.gr_mem", "value.gr_gid", "self.assertRaises", "self.assertWarns", "e2.gr_gid", "bynames.keys", "grp.getgrnam", "name.lower", "unittest.main", "self.check_value", "grp.getgrgid", "e2.gr_name", "e.gr_name", "self.skipTest", "unittest.TestCase"]}, "test_gzip.py": {"libraries": ["unittest", "io", "test.support.script_helper.assert_python_failure", "struct", "sys", "pathlib", "subprocess.PIPE", "subprocess.Popen", "test.support._4G", "test.support.script_helper.assert_python_ok", "test.support", "os", "functools", "test.support.bigmemtest", "array"], "function_names": ["test_read_with_extra", "test_write_array", "test_compress_fast_best_are_exclusive", "test_compress", "setUp", "test_compresslevel_metadata", "test_compress_infile_outfile", "test_paddedfile_getattr", "test_zero_padded_file", "test_bad_gzip_file", "test_decompress", "test_readlines", "decorator", "wrapper", "test_fileobj_mode", "test_many_append", "test_main", "test_text_modes", "test_fileobj_from_fdopen", "test_bad_params", "test_read_truncated", "test_compress_infile_outfile_default", "test_textio_readlines", "test_1647484", "test_write_read_with_pathlike_file", "test_seek_write", "test_seek_read", "test_mtime", "test_write_bytearray", "test_gzip_BadGzipFile_exception", "test_encoding", "test_implicit_binary_modes", "test_compress_stdin_outfile", "test_seek_whence", "seek", "test_with_open", "test_metadata", "test_bytes_filename", "create_and_remove_directory", "test_write_memoryview", "test_decompress_limited", "test_mode", "test_newline", "test_exclusive_write", "test_peek", "tell", "test_read1", "test_write", "seekable", "test_decompress_stdin_stdout", "test_decompress_cannot_have_flags_compression", "tearDown", "sizes", "test_prepend_error", "test_write_incompatible_type", "test_compress_mtime", "test_readline", "test_io_on_closed_object", "test_buffered_reader", "test_read_large", "test_decompress_infile_outfile_error", "test_fileobj", "test_binary_modes", "test_decompress_infile_outfile", "write_and_read_back", "test_append", "test_pathlike_file", "test_encoding_error_handler", "test_non_seekable_file", "test_read"], "function_calls": ["assert_python_ok", "memoryview", "test_main", "issubclass", "function", "UnseekableIO", "open", "range", "assert_python_failure", "create_and_remove_directory", "bigmemtest", "sizes", "Popen", "int", "type", "hasattr", "bytearray", "len", "bytes"], "class_names": ["TestCommandLine", "TestGzip", "UnseekableIO", "BaseTest", "TestOpen"], "class_method_calls": ["zgfile.read", "fWrite.write", "sys.executable", "self.assertEqual", "m.cast", "gzip.BadGzipFile", "support.TESTFN", "f.peek", "fileobj.closed", "decomp.read", "self.assertRaises", "fRead.seek", "os.open", "gunziped.read", "os.linesep", "os.O_WRONLY", "gzip.decompress", "self.assertTrue", "self.assertIsInstance", "os.makedirs", "support.import_module", "f.name", "functools.wraps", "str_filename.encode", "io.DEFAULT_BUFFER_SIZE", "gzip.WRITE", "t.readlines", "self.subTest", "f.seek", "data1.splitlines", "f._buffer", "f.tell", "decomp._buffer", "support.run_unittest", "self.assertIsNone", "array.array", "io.BufferedReader", "self.write_and_read_back", "self.filename", "os.path", "os.O_CREAT", "os.fdopen", "f.fileobj", "unittest.TestCase", "self.assertFalse", "self.assertLess", "fRead.read", "proc.communicate", "self.assertLessEqual", "fp.write", "f.write", "gzip.READ", "f.readline", "gzip.compress", "gzip.GzipFile", "f.max_read_chunk", "bytes_io.getvalue", "support.unlink", "io.TextIOWrapper", "self.test_write", "f.readlines", "fRead.mtime", "f.myfileobj", "err.strip", "f.close", "blocks.append", "data1.decode", "f.mtime", "io.BytesIO", "gzip.open", "f.flush", "gzip_file.write", "uncompressed_bytes.decode", "self.assertIn", "support.rmtree", "self.fail", "self.data", "file.readlines", "f.read", "os.remove", "buf.getvalue", "g.mode", "pathlib.Path", "struct.pack", "uncompressed.replace", "io.UnsupportedOperation", "f.read1", "self.skipTest", "os.stat", "f.fileno", "os.fsync", "file.write"]}, "test_hash.py": {"libraries": ["unittest", "datetime", "collections.abc.Hashable", "sys", "test.support.script_helper.assert_python_ok", "os"], "function_names": ["test_hashable", "test_long_fixed_hash", "__eq__", "test_hash_distribution", "get_hash_command", "test_numeric_literals", "__ne__", "same_hash", "lcg", "test_fixed_hash", "get_expected_hash", "test_unaligned_buffers", "test_null_hash", "__len__", "pysiphash", "test_error_hash", "test_coerced_floats", "test_not_hashable", "get_hash", "test_randomized_hash", "test_empty_string", "test_hashes", "test_coerced_integers", "test_ucs2_string", "skip_unless_internalhash", "__hash__", "test_default_hash", "__getitem__"], "function_calls": ["object", "assert_python_ok", "InheritedHashWithEquality", "memoryview", "OnlyInequality", "_default_hash", "repr", "iter", "str", "complex", "hash", "range", "DefaultIterSeq", "list", "DefaultHash", "set", "InheritedHashWithInequality", "int", "OnlyEquality", "FixedHash", "enumerate", "float", "bytearray", "len", "chr", "NoHash", "bytes", "map"], "class_names": ["BytesHashRandomizationTests", "InheritedHashWithEquality", "DatetimeDatetimeTests", "MemoryviewHashRandomizationTests", "OnlyInequality", "HashEqualityTestCase", "DatetimeTests", "HashBuiltinsTestCase", "StringlikeHashRandomizationTests", "HashDistributionTestCase", "DefaultIterSeq", "DatetimeDateTests", "DefaultHash", "InheritedHashWithInequality", "StrHashRandomizationTests", "OnlyEquality", "FixedHash", "DatetimeTimeTests", "HashInheritanceTestCase", "NoHash", "HashRandomizationTests"], "class_method_calls": ["self.assertIsInstance", "self.hashes_to_check", "datetime.datetime", "self.fixed_expected", "self.assertNotIsInstance", "sys.byteorder", "self.error_expected", "self.assertNotEqual", "self.assertEqual", "self.get_expected_hash", "env.pop", "self.repr_ucs2", "self.repr_", "self.fail", "object.__hash__", "s15.add", "self.repr_long", "self.subTest", "self.assertRaises", "unittest.skip", "datetime.time", "self.get_hash", "self.assertGreater", "os.environ", "self.seq", "unittest.main", "sys.hash_info", "self.get_hash_command", "self.same_hash", "sys.maxsize", "self.default_expected", "unittest.TestCase", "s255.add", "datetime.date", "self.known_hashes"]}, "test_hashlib.py": {"libraries": ["_blake2", "warnings", "test.support", "array", "unittest", "threading", "_md5", "hashlib", "os", "functools", "itertools", "_hashlib.HASH", "test.support.requires_hashdigest", "test.support.bigmemtest", "binascii.unhexlify", "http.client.HTTPException", "importlib", "test.support.import_fresh_module", "sys", "_sha3", "test.support._4G"], "function_names": ["test_case_sha3_512_0", "check_sha3", "test_case_sha224_3", "test_threaded_hashing", "test_case_sha384_2", "test_blake2s", "test_case_sha3_384_0", "__init__", "test_case_shake_128_0", "test_case_sha3_256_vector", "test_hash_array", "hash_constructors", "test_case_sha256_3", "test_case_shake128_vector", "test_case_sha512_2", "test_blocksize_name_sha3", "test_case_md5_0", "_conditional_import_module", "test_pbkdf2_hmac_c", "test_no_unicode_blake2", "test_case_md5_huge", "test_case_sha224_2", "check_blake2", "selftest_seq", "test_case_sha3_224_vector", "test_case_md5_1", "test_gil", "test_normalized_name", "test_large_update", "test_case_md5_2", "test_case_sha1_2", "check_no_unicode", "test_case_sha512_0", "test_case_sha512_1", "test_case_sha512_3", "_test_algorithm_via_hashlib_new", "test_algorithms_available", "test_get_builtin_constructor", "blake2_rfc7693", "test_case_sha3_512_vector", "test_blocksize_name", "test_case_sha224_0", "test_blake2s_vectors", "test_case_sha1_3", "test_case_sha256_1", "test_unknown_hash", "test_new_upper_to_lower", "test_case_sha3_384_vector", "add_builtin_constructor", "_test_pbkdf2_hmac", "test_scrypt", "test_algorithms_guaranteed", "test_pbkdf2_hmac_py", "test_hexdigest", "test_case_sha1_0", "test_case_sha256_2", "test_case_blake2s_1", "test_sha3_update_overflow", "check_blocksize_name", "test_case_sha3_256_0", "hash_in_chunks", "test_case_sha3_224_0", "test_name_attribute", "hexstr", "check", "test_case_blake2b_1", "test_case_blake2s_all_parameters", "test_case_sha384_1", "test_blocksize_name_blake2", "test_case_blake2s_0", "test_case_sha1_1", "test_case_blake2b_0", "test_refleaks_in_hash___init__", "test_no_unicode_sha3", "test_case_sha256_0", "test_case_blake2b_all_parameters", "test_digest_length_overflow", "test_extra_sha3", "test_case_sha224_1", "test_case_sha384_3", "test_blake2b_vectors", "test_case_shake256_vector", "test_case_shake_256_0", "test_no_unicode", "test_case_sha384_0", "test_case_md5_uintmax", "read_vectors", "test_blake2b"], "function_calls": ["hexstr", "sorted", "gettotalrefcount", "getattr", "memoryview", "add_builtin_constructor", "repr", "isinstance", "super", "constructor", "locals", "range", "digest", "set", "bigmemtest", "enumerate", "unhexlify", "hasattr", "bytearray", "len", "selftest_seq", "pbkdf2", "hash_object_constructor", "import_fresh_module", "get_builtin_constructor", "read_vectors", "cons"], "class_names": ["KDFTests", "HashLibTestCase"], "class_method_calls": ["hexdigest.lower", "support.reap_threads", "line.strip", "m4_copy.digest", "self.constructors_to_test", "unittest.skipUnless", "self.assertEqual", "hashlib.algorithms_available", "self.assertGreaterEqual", "self.assertIs", "thread.start", "unkeyed.digest", "c_hashlib.pbkdf2_hmac", "m.name", "hashlib.blake2b", "self.assertRaises", "thread.join", "m._rate_bits", "self.check_no_unicode", "constructors.add", "support.open_urlresource", "c.name", "URL.format", "m2.update", "self.assertTrue", "m._suffix", "self.assertIsInstance", "self.pbkdf2_results", "outer.hexdigest", "m.hexdigest", "unittest.SkipTest", "m.block_size", "self.shakes", "m4.copy", "self.assertNotIn", "warnings.warn", "h.digest", "outer.update", "py_hashlib.pbkdf2_hmac", "algorithms.update", "keyed.digest", "hasher.update", "array.array", "hashlib.algorithms_guaranteed", "sys.maxsize", "constructor.MAX_DIGEST_SIZE", "_algo.islower", "line.startswith", "unittest.TestCase", "self.pbkdf2_test_vectors", "m3.digest", "hashlib.sha3_224", "_md5.md5", "m.update", "m._capacity_bits", "hashlib.md5", "itertools.chain", "m1.update", "constructor.SALT_SIZE", "m2.digest", "self._hashlib", "self.assertGreater", "unittest.main", "self.check_sha3", "self.supported_hash_names", "h.hexdigest", "name.split", "m4.digest", "builtin_constructor_cache.clear", "threads.append", "constructor.MAX_KEY_SIZE", "self.assertAlmostEqual", "bytes.fromhex", "self.blake2_rfc7693", "sys.modules", "hashlib.blake2s", "c.hexdigest", "self.assertRaisesRegex", "self.check", "constructor.PERSON_SIZE", "self.check_blocksize_name", "importlib.import_module", "self.assertIn", "sha1_hash.__init__", "self.scrypt_test_vectors", "support.get_attribute", "m1.digest", "c_hashlib.new", "self._test_pbkdf2_hmac", "self._warn_on_extension_import", "self._conditional_import_module", "h.name", "unittest.skipIf", "m1.name", "hashlib.scrypt", "m4_copy.update", "line.split", "m.digest_size", "hashlib.sha1", "self.hash_constructors", "m.digest", "hasher.hexdigest", "self.skipTest", "os.name", "hashlib.new", "algorithm.lower", "h.update", "support.refcount_test", "algorithms.add", "threading.Thread", "self.check_blake2"]}, "test_heapq.py": {"libraries": ["unittest", "doctest", "random", "operator.itemgetter", "unittest.skipUnless", "itertools.chain", "unittest.TestCase", "test.support"], "function_names": ["__le__", "test_merge_stability", "test_c_functions", "test_heappush_mutating_heap", "__eq__", "test_merge_does_not_suppress_index_error", "test_len_only", "R", "test_heappop_max", "heapiter", "test_comparison_operator_modifiying_heap_two_heaps", "test_naive_nbest", "test_empty_merges", "test_heapsort", "__init__", "__lt__", "test_nsmallest", "check_invariant", "test_iterable_args", "iterable", "load_tests", "test_heapify", "test_heappushpop", "test_nlargest", "__len__", "test_non_sequence", "__iter__", "test_nbest_with_pushpop", "test_merge", "test_nbest", "__next__", "L", "test_push_pop", "test_arg_parsing", "test_heappop_mutating_heap", "test_comparison_operator", "test_py_functions", "find", "test_comparison_operator_modifiying_heap", "hsort", "test_cmp_err", "__getitem__"], "function_calls": ["SideEffectLT", "sorted", "getattr", "itemgetter", "comp", "N", "skipUnless", "R", "CmpErr", "G", "iterable", "range", "X", "Ig", "list", "LenOnly", "h", "type", "enumerate", "EvilClass", "f", "HeapqMergeDocTestFinder", "len", "g", "Int", "hsort", "chain", "map", "E", "S"], "class_names": ["TestModules", "SideEffectLT", "TestErrorHandling", "N", "CmpErr", "TestHeapPython", "G", "TestErrorHandlingC", "TestErrorHandlingPython", "X", "Ig", "LenOnly", "h", "EvilClass", "TestHeapC", "I", "HeapqMergeDocTestFinder", "LE", "g", "Int", "TestHeap", "LT", "E", "S"], "class_method_calls": ["results.append", "heap.sort", "obj.pair", "heap.clear", "self.value", "self.assertEqual", "row.append", "list1.clear", "seqs.append", "data_sorted.sort", "other.value", "support.import_fresh_module", "inputs.append", "data.append", "self.heapiter", "other.x", "self.assertRaises", "heap.extend", "i.pair", "doctest.DocTestFinder", "py_heapq.merge", "self.x", "random.randrange", "self.seqn", "unittest.main", "dtf.find", "list2.clear", "random.choice", "self.i", "random.random", "doctest.DocTestSuite", "self.check_invariant", "stream.sort", "self.assertTrue", "self.heap", "tests.addTests", "self.module"]}, "test_hmac.py": {"libraries": ["unittest", "hmac", "binascii", "test.support.requires_hashdigest", "unittest.mock", "warnings", "hashlib", "functools"], "function_names": ["test_equality", "test_normal", "md5test", "ignore_warning", "test_exercise_all_methods", "__eq__", "test_attributes", "wrapper", "test_sha512_rfc4231", "test_realcopy", "test_withmodule", "update", "test_withtext", "__init__", "test_sha384_rfc4231", "test_dot_new_with_str_key", "test_with_str_key", "_rfc4231_test_cases", "digest", "shatest", "test_sha_vectors", "test_legacy_block_size_warnings", "test_with_digestmod_no_default", "test_sha224_rfc4231", "test_compare_digest", "test_with_memoryview_msg", "test_with_bytearray", "test_md5_vectors", "hmactest", "test_sha256_rfc4231"], "function_calls": ["bytearray", "shatest", "range", "md5test", "memoryview", "hmactest", "id", "type", "bytes", "mystr", "requires_hashdigest", "func", "mybytes"], "class_names": ["ConstructorTestCase", "CompareDigestTestCase", "CopyTestCase", "mystr", "SanityTestCase", "MockCrazyHash", "TestVectorsTestCase", "mybytes"], "class_method_calls": ["hmac.digest", "hashlib.sha512", "hashlib.sha384", "hashlib.sha224", "h.copy", "h1.digest_cons", "h.block_size", "unittest.mock", "self.assertEqual", "functools.wraps", "warnings.filterwarnings", "hmac.HMAC", "self.digest_size", "self.assertRaisesRegex", "self.expected", "h.digest_size", "h2.inner", "h1.digest", "hashlib.md5", "self.fail", "hmac.new", "h1.hexdigest", "h1.copy", "warnings.catch_warnings", "h.digest", "h1.inner", "self._rfc4231_test_cases", "h.name", "self.assertRaises", "warnings.simplefilter", "hmac.compare_digest", "MockCrazyHash.block_size", "h2.outer", "unittest.TestCase", "digest.upper", "h2.digest_cons", "self._x", "h2.digest", "unittest.main", "h.hexdigest", "binascii.unhexlify", "hashlib.sha1", "h1.outer", "h2.hexdigest", "self.assertTrue", "h.update", "hashlib.sha256", "h1.update", "self.assertFalse"]}, "test_html.py": {"libraries": ["unittest", "html"], "function_names": ["test_escape", "check", "test_unescape", "check_num"], "function_calls": ["check", "zip", "check_num"], "class_names": ["HtmlTests"], "class_method_calls": ["html.unescape", "html.escape", "self.assertEqual", "unittest.TestCase", "unittest.main"]}, "test_htmlparser.py": {"libraries": ["pprint", "html.parser", "html.unescape", "unittest"], "function_names": ["_run_check_extra", "test_bare_pointy_brackets", "unknown_decl", "test_starttag_end_boundary", "test_tolerant_parsing", "test_valid_doctypes", "test_attr_nonascii", "test_broken_comments", "test_EOF_in_charref", "test_attr_funky_names2", "test_malformed_adjacent_attributes", "test_attr_values", "test_bare_ampersands", "test_convert_charrefs", "test_convert_charrefs_dropped_text", "handle_endtag", "test_bad_nesting", "test_malformatted_charref", "test_unclosed_entityref", "test_get_starttag_text", "test_processing_instruction_only", "test_adjacent_attributes", "get_collector", "get_events", "handle_charref", "test_simple_html", "test_with_unquoted_attributes", "__init__", "test_comments", "test_starttag_junk_chars", "handle_entityref", "test_missing_attribute_value", "handle_decl", "test_entityrefs_in_attributes", "test_startendtag", "handle_data", "test_malformed_attributes", "handle_comment", "test_end_tag_in_attribute_value", "_run_check", "test_cdata_with_closing_tags", "handle_pi", "test_illegal_declarations", "test_javascript_attribute_value", "handle_starttag", "test_buffer_artefacts", "test_comma_between_attributes", "test_cdata_content", "test_attr_entity_replacement", "test_attr_funky_names", "test_attr_syntax", "test_slashes_in_starttag", "test_broken_condcoms", "test_entities_in_attribute_value", "handle_startendtag", "test_invalid_end_tags", "test_weird_chars_in_unquoted_attribute_values", "test_condcoms", "test_correct_detection_of_start_tags", "test_unescape_method", "test_declaration_junk_chars", "test_broken_invalid_end_tag"], "function_calls": ["len", "EventCollectorCharrefs", "EventCollector", "EventCollectorExtra", "Collector", "collector", "unescape", "range", "repr"], "class_names": ["EventCollectorCharrefs", "EventCollector", "AttributesTestCase", "EventCollectorExtra", "TestCaseBase", "Collector", "HTMLParserTestCase"], "class_method_calls": ["parser.close", "pprint.pformat", "self.assertEqual", "self.append", "self._run_check", "self.fail", "p.unescape", "L.append", "self.assertWarns", "self.get_starttag_text", "parser.feed", "EventCollector.handle_starttag", "html.parser", "self._run_check_extra", "unittest.main", "parser.get_events", "element.lower", "self.get_collector", "self.events", "self.assertTrue", "unittest.TestCase"]}, "test_http_cookiejar.py": {"libraries": ["urllib.request", "http.cookiejar.domain_match", "http.cookiejar.split_header_words", "http.cookiejar.lwp_cookie_str", "http.cookiejar.request_port", "http.cookiejar.DefaultCookiePolicy", "test.support", "http.cookiejar.parse_ns_headers", "traceback", "unittest", "io", "http.cookiejar.time2netscape", "pathlib", "http.cookiejar.CookieJar", "os", "http.cookiejar.reach", "http.cookiejar.is_HDN", "email", "re", "time", "http.cookiejar.DEFAULT_HTTP_PORT", "http.cookiejar.iso2time", "http.cookiejar.time2isoz", "http.cookiejar.join_header_words", "http.cookiejar.user_domain_match", "http.cookiejar.MozillaCookieJar", "http.cookiejar.request_host", "http.cookiejar.request_path", "http.cookiejar.Cookie", "http.cookiejar.escape_path", "http.cookiejar.LoadError", "http.cookiejar.http2time", "http.cookiejar.LWPCookieJar"], "function_names": ["test_constructor_with_str", "info", "test_request_host", "test_parse_ns_headers_version", "test_port_mirror", "test_reach", "test_constructor_with_path_like", "test_rejection", "test_netscape_misc", "interact_2965", "test_iso2time_performance_regression", "test_split_header_words", "test_request_port", "test_netscape_example_1", "test_netscape_example_2", "test_parse_ns_headers_special_names", "test_http2time_formats", "test_path_prefix_match", "test_http2time_garbage", "_interact", "test_iso2time_formats", "test_parse_ns_headers", "test_bad_cookie_header", "test_iso2time", "test_bad_magic", "test_secure_block", "test_path_mirror", "test_intranet_domains_2965", "test_session_cookies", "test_empty_path", "test_main", "test_url_encoding", "test_quote_cookie_value", "test_two_component_domain_rfc2965", "test_custom_secure_protocols", "test_ns_parser", "test_ietf_example_1", "test_domain_allow", "__init__", "test_time2netscape", "test_join_header_words", "test_constructor_with_other_types", "test_missing_value", "test_time2isoz", "test_ns_parser_special_names", "test_missing_final_slash", "test_ietf_example_2", "test_iso2time_garbage", "test_Cookie_iterator", "test_intranet_domains_ns", "test_domain_return_ok", "test_no_return_comment", "cookiejar_from_cookie_headers", "test_is_HDN", "test_http2time_redos_regression_actually_completes", "test_expires", "test_constructor_with_none", "save_and_restore", "test_roundtrip", "parse_date", "test_domain_mirror", "test_two_component_domain_ns", "test_strict_domain", "test_mozilla", "test_domain_match", "test_default_path", "test_wrong_domain", "interact_netscape", "test_rfc2109_handling", "test_default_path_with_query", "test_domain_block", "test_secure", "test_request_path", "test_http2time", "test_lwp_valueless_cookie", "test_escape_path"], "function_calls": ["save_and_restore", "interact_2965", "_interact", "FakeResponse", "lwp_cookie_str", "repr", "request_port", "user_domain_match", "test_main", "reach", "Cookie", "request_host", "split_header_words", "open", "range", "http2time", "iso2time", "request_path", "domain_match", "cookiejar_from_cookie_headers", "join_header_words", "cookiejar_class", "CookieJar", "int", "time2netscape", "parse_date", "len", "LWPCookieJar", "DefaultCookiePolicy", "MozillaCookieJar", "escape_path", "time2isoz", "parse_ns_headers", "interact_netscape", "is_HDN", "type_"], "class_names": ["DateTimeTests", "HeaderTests", "CookieTests", "FileCookieJarTests", "A", "FakeResponse", "LWPCookieTests"], "class_method_calls": ["c.version", "c.add_cookie_header", "self.assertEqual", "self.assertNotEqual", "c.extract_cookies", "self.assertRaises", "cookiejar.extract_cookies", "time.localtime", "s.upper", "cookie.expires", "c.name", "time.gmtime", "strict_ns_path_pol.set_ok_path", "c.load", "self.assertTrue", "self.assertIsInstance", "f.getvalue", "cookie.domain", "traceback.print_exc", "foo.expires", "c.revert", "cj._cookies", "cookie.value", "self.assertNotIn", "self._url", "io.StringIO", "cookie.port", "self.subTest", "c.save", "c.domain", "self.assertRegex", "spam.expires", "s.lower", "self.assertIsNone", "self.assertIsNot", "pol.set_blocked_domains", "c._cookies", "c.clear_session_cookies", "self._headers", "c.make_cookies", "unittest.TestCase", "self.assertFalse", "pol.domain_return_ok", "test.support", "c.filename", "f.write", "os.fspath", "pol.return_ok", "re.sub", "re.I", "cookie2965.version", "time.time", "req.get_header", "re.compile", "exc.__class__", "DefaultCookiePolicy.DomainStrictNonDomain", "urllib.request", "self.assertIsNotNone", "cookie.name", "email.message_from_string", "cj.save", "req.has_header", "headers.append", "cookie.has_nonstandard_attr", "cookie.version", "self.assertIn", "c.clear", "self.fail", "c.path", "pathlib.Path", "new_c.load", "c.set_policy", "cookie.domain_specified", "c.set_cookie", "os.unlink", "cookie.port_specified", "cookiejar.add_cookie_header", "h.startswith"]}, "test_http_cookies.py": {"libraries": ["unittest", "copy", "http.cookies", "pickle", "test.support.run_doctest", "test.support.run_unittest"], "function_names": ["test_comment_quoting", "test_extended_encode", "test_setter", "test_special_attrs", "test_repr", "test_setdefault", "test_main", "test_secure_httponly_true_if_have_value", "test_extra_spaces", "test_update", "test_eq", "test_quoted_meta", "test_illegal_chars", "test_set_properties", "test_pickle", "test_reserved_keys", "test_defaults", "test_copy", "test_set_secure_httponly_attrs", "test_setitem", "test_invalid_cookies", "test_basic", "test_secure_httponly_false_if_not_present", "test_samesite_attrs", "test_secure_httponly_true_if_present", "test_load"], "function_calls": ["list", "test_main", "sorted", "str", "dict", "run_unittest", "run_doctest", "range", "repr"], "class_names": ["CookieTests", "MorselTests"], "class_method_calls": ["copy.copy", "self.assertIsInstance", "M.key", "morsel_b.update", "cookies.Morsel", "M.set", "morsel.key", "self.assertEqual", "C.js_output", "M.__setitem__", "M.output", "C.load", "self.assertNotIn", "C.output", "M.js_output", "morsel_b.set", "self.subTest", "self.assertRaises", "morsel.value", "morsel.coded_value", "self.assertRegex", "morsel_a.copy", "morsel.setdefault", "M._reserved", "morsel_a.update", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "self.assertIsNone", "self.assertIsNot", "self.assertFalse", "M.isReservedKey", "morsel.items", "morsel_a.set", "morsel.keys", "M.value", "pickle.dumps", "cookies.SimpleCookie", "self.assertTrue", "morsel.update", "attribs.items", "M.coded_value", "unittest.TestCase", "cookies.CookieError", "morsel.set", "C1.output"]}, "test_httplib.py": {"libraries": ["unittest", "io", "re", "threading", "array", "test.support", "test.ssl_servers.make_https_server", "http.client", "ssl", "warnings", "http.HTTPStatus", "socket", "os", "errno", "itertools"], "function_names": ["testTimeoutAttribute", "test_networked_noverification", "test_incomplete_read", "test_chunked_extension", "test_chunked_missing_end", "test_epipe", "test_read1_bound_content_length", "test_read1_content_length", "test_reuse_reconnect", "test_attributes", "test_overflowing_status_line", "test_getting_nonexistent_header_with_string_default", "test_networked_good_cert", "test_read1_0", "sendall", "_validate_path", "__init__", "test_set_tunnel_host_port_headers", "test_endheaders_chunked", "test_networked_trusted_by_default_cert", "test_text_file_body", "test_explicit_headers", "test_error_leak", "test_manual_content_length", "test_read1", "tearDown", "test_putrequest_override_encoding", "test_read1_bounded", "_parse_request", "_create_connection", "run_server", "test_blocksize_send", "test_host_port", "test_dir_with_added_behavior_on_status", "test_client_constants", "test_partial_reads", "test_getting_header_defaultint", "test_auto_headers", "test_connect_put_request", "test_empty_body", "test_response_headers", "makefile", "test_content_length_0", "test_bytes_body", "_make_body", "test_mixed_reads", "test_overflowing_header_line", "test_send", "_validate_host", "test_tunnel_debuglog", "test_connect_with_tunnel", "connect", "test_chunked_sync", "test_negative_content_length", "test_content_length_sync", "append", "test_overflowing_header_limit_after_100", "setUp", "test_readlines_content_length", "test_too_many_headers", "test_send_file", "create_connection", "_verify_readline", "get_headers_and_fp", "test_send_iter", "test_partial_readintos_incomplete_body", "readinto", "test_getting_nonexistent_header_without_default", "close", "test_bad_status_repr", "test_ascii_body", "test_peek_0", "test_send_updating_file", "test_putheader", "test_list_body", "test_request", "_parse_chunked", "test_partial_readintos", "test_binary_file_body", "test_networked", "test_overflowing_chunked_line", "test_getting_nonexistent_header_with_iterable_default", "test_early_eof", "readline", "test_readinto_head", "test_putrequest_override_domain_validation", "test_partial_reads_no_content_length", "test_ipv6host_header", "test_readinto_chunked", "test_local_bad_hostname", "test_blocksize_request", "test_chunked", "test_getting_header", "test_readinto_chunked_head", "test_putrequest_override_host_validation", "testHTTPConnectionSourceAddress", "test_read_head", "data", "test_read1_unbounded", "test_invalid_method_names", "test_response_fileno", "test_networked_bad_cert", "test_status_lines", "test_chunked_trailers", "test_chunked_head", "test_malformed_headers_coped_with", "test_local_good_hostname", "body", "make_server", "test_local_unknown_cert", "test_partial_readintos_no_content_length", "test_disconnected", "file_close", "setsockopt", "test_partial_reads_incomplete_body", "test_parse_all_octets", "mypeek", "test_disallow_set_tunnel_after_connect", "r", "test_peek", "test_send_type_error", "make_reset_reader", "testHTTPSConnectionSourceAddress", "test_tls13_pha", "_encode_request", "read", "test_responses", "test_latin1_body", "test_readline", "test_100_close", "test_readline_bound_content_length", "test_headers_debuglevel", "test_all", "test_invalid_headers"], "function_calls": ["HeaderCountingBuffer", "ContentLengthChecker", "FakeSocket", "getattr", "EPipeSocket", "memoryview", "repr", "UpdatingFile", "isinstance", "super", "data", "str", "oldpeek", "make_https_server", "open", "body", "AssertionError", "range", "dir", "set", "int", "next", "enumerate", "float", "OSError", "Readliner", "UnsafeHTTPConnection", "hasattr", "HTTPStatus", "bytearray", "len", "FakeSocketHTTPConnection", "readline", "bytes", "ConnectionResetError", "map"], "class_names": ["HeaderCountingBuffer", "ContentLengthChecker", "FakeSocket", "EPipeSocket", "UpdatingFile", "TransferEncodingTest", "TunnelTests", "HttpMethodTests", "ExtendedReadTest", "ExtendedReadTestChunked", "TimeoutTest", "Response", "HTTPResponseTest", "BasicTest", "SourceAddressTest", "Readliner", "UnsafeHTTPConnection", "OfflineTest", "PersistenceTest", "FakeSocketHTTPConnection", "HeaderTests", "NoEOFBytesIO", "RequestBodyTest", "HTTPSTest"], "class_method_calls": ["itertools.product", "headers.keys", "support.system_must_validate_cert", "resp.getheader", "p2.startswith", "self.assertEqual", "self.conn", "socket.SOCK_STREAM", "warnings.filterwarnings", "self.create_connection", "self.assertGreaterEqual", "message.get_content_type", "client.HTTPConnection", "self.assertIs", "resp.begin", "self.count", "support.transient_internet", "client.LineTooLong", "support.TESTFN", "thread.start", "client.UnimplementedFileMode", "self.pipe_trigger", "self._verify_readline", "conn.putheader", "h.close", "response.close", "conn.response_class", "data.append", "warnings.catch_warnings", "list.__init__", "self.host", "self.assertRaises", "io.TextIOBase", "thread.join", "self.serv", "conn.sendall", "serv.getsockname", "val.decode", "self.content_length", "support.check_warnings", "resp.peek", "resp.closed", "client.parse_headers", "resp.msg", "resp.readlines", "self._parse_chunked", "ssl.PROTOCOL_TLS_CLIENT", "support.captured_stdout", "self.assertTrue", "self.assertCountEqual", "support.HOST", "extradata.encode", "i.partial", "str_url.encode", "message.get", "context.post_handshake_auth", "resp.fp", "ssl.SSLContext", "httpConn.close", "self.lines_expected", "data.split", "header.lower", "self._make_body", "conn.putrequest", "resp.isclosed", "cm.exception", "re.search", "ssl.CERT_REQUIRED", "client.HTTP_PORT", "ssl.CertificateError", "unittest.SkipTest", "output.getvalue", "self.assertNotIn", "support.find_unused_port", "exc_info.exception", "socket.create_server", "self.lines", "self.subTest", "client.InvalidURL", "self.readfunc", "self.file_closed", "socket.getdefaulttimeout", "context.load_verify_locations", "self.assertIsNone", "client.responses", "self.fileclass", "conn._buffer", "client.BadStatusLine", "array.array", "self.sock", "io.BufferedReader", "folded.endswith", "list.append", "os.path", "self._parse_request", "read.find", "self.port", "h.getresponse", "self._create_connection", "resp.close", "resp.readline", "context.verify_mode", "client._MAXHEADERS", "unittest.TestCase", "stream.readinto", "self.assertFalse", "FakeSocket.__init__", "conn.request", "self.source_port", "serv.close", "msg.get", "support.bind_port", "self.make_server", "all.append", "self.connections", "client.__all__", "sock.sendall_calls", "h.timeout", "item.split", "reader.readline", "self.assertLessEqual", "f.write", "f.readline", "self.addCleanup", "name.startswith", "itertools.chain", "client.HTTPSConnection", "errno.EPIPE", "resp.readinto", "self.expected_body", "httpConn.connect", "server.port", "TimeoutTest.PORT", "sock.data", "support.unlink", "self.remainder", "self.text", "resp.read", "self.assertGreater", "k.lower", "conn.makefile", "self.sendall_calls", "unittest.main", "self.fake_socket_args", "line.rstrip", "r.getheader", "line.endswith", "key.decode", "expected.add", "c.port", "self.assertIsNotNone", "socket.AF_INET", "reader.read", "httpConn.sock", "io.BytesIO", "client.RemoteDisconnected", "h._context", "conn.getresponse", "support.requires", "self.assertRaisesRegex", "client.NOT_FOUND", "resp.reason", "body.append", "readliner.readline", "self.assertIn", "response.closed", "resp.status", "conn.connections", "ssl.HAS_TLSv1_3", "self.fail", "self.data", "lines.find", "conn.send", "resp.read1", "message.get_charset", "sock.file", "f.read", "s.detach", "text.encode", "unittest.skipIf", "conn.endheaders", "ssl._create_unverified_context", "r.begin", "self.file_close", "response.fileno", "self.file", "ssl.SSLError", "conn.close", "s.sendall", "client.IncompleteRead", "client.OK", "conn.sock", "folded.startswith", "client.HTTPResponse", "h.request", "self.d", "client.HTTPException", "self.resp", "serv.accept", "self.skipTest", "response.status", "socket.setdefaulttimeout", "response.read", "self.get_headers_and_fp", "threading.Thread", "context.check_hostname", "c.host", "socket.socket"]}, "test_httpservers.py": {"libraries": ["http.server.BaseHTTPRequestHandler", "unittest.mock", "io.BytesIO", "html", "base64", "test.support", "urllib.parse", "unittest", "threading", "http.server", "datetime", "http.server.HTTPServer", "http.client", "http.server.CGIHTTPRequestHandler", "io.StringIO", "http.HTTPStatus", "socket", "os", "http.server.SimpleHTTPRequestHandler", "re", "time", "shutil", "ntpath", "tempfile", "sys", "email.utils", "email.message"], "function_names": ["test_version_none_get", "test_nested_cgi_path_issue21323", "test_header_buffering_of_send_error", "test_windows_colon", "test_internal_key_error", "verify_get_called", "test_version_bogus", "test_with_continue_1_1", "test_server_test_localhost", "test_path_without_leading_slash", "test_browser_cache_file_changed", "do_LATINONEHEADER", "__init__", "test_error_content_length", "test_browser_cache_with_If_None_Match_header", "tearDown", "log_message", "test_issue19435", "test_with_continue_rejected", "test_version_none", "test_send_blank", "test_err", "test_html_escape_on_error", "do_EXPLAINERROR", "test_http_0_9", "test_command", "test_headers_and_content", "test_get", "test_header_close", "do_NOTFOUND", "test_return_custom_status", "test_start_with_double_slash", "test_http_1_0", "test_query_arguments", "test_head", "do_SEND_ERROR", "do_ERROR", "test_invaliduri", "close_conn", "test_url_collapse_path", "test_head_via_send_error", "numWrites", "test_undecodable_filename", "test_urlquote_decoding_in_cgi_check", "getData", "do_KEYERROR", "test_post", "test_unprintable_not_logged", "test_last_modified", "test_header_length", "test_latin1_header", "test_request_line_trimming", "test_server_test_unspec", "test_html_escape_filename", "do_TEST", "do_HEAD", "test_return_explain_error", "setUp", "test_too_many_headers", "test_main", "test_return_header_keep_alive", "test_server_test_ipv4", "test_close_connection", "test_invalid_requests", "test_query_with_continuous_slashes", "test_handler", "send_typical_request", "test_get_dir_redirect_location_domain_injection_bug", "test_http_1_1", "test_request_length", "test_header_buffering_of_send_header", "test_header_unbuffered_when_continue", "stop", "test_date_time_string", "test_with_continue_1_0", "test_server_test_ipv6", "test_os_environ_is_not_altered", "handle_expect_100", "mock_server_class", "test_header_keep_alive", "test_version_digits", "check_status_and_reason", "handle_one_request", "verify_expected_headers", "test_authorization", "test_send_error", "request", "run", "test_header_buffering_of_send_response_only", "test_version_invalid", "test_undecodable_parameter", "test_browser_cache", "do_KEEP", "read", "test_query_with_multiple_question_mark", "_readAndReseek", "write", "do_GET", "verify_http_server_response", "test_extra_space", "test_no_leading_slash", "test_all", "do_CUSTOM"], "function_calls": ["getattr", "HTTPServer", "isinstance", "test_main", "issubclass", "super", "iter", "str", "StringIO", "open", "AuditableBytesIO", "dir", "int", "next", "SocketlessRequestHandler", "_readAndReseek", "hasattr", "BytesIO", "len", "log_message", "RejectingSocketlessRequestHandler", "sum", "TestServerThread"], "class_names": ["AuditableBytesIO", "BaseHTTPRequestHandlerTestCase", "CGIHTTPServerTestCase", "RejectingSocketlessRequestHandler", "BaseTestCase", "ScriptTestCase", "SimpleHTTPServerTestCase", "SimpleHTTPRequestHandlerTestCase", "NoLogRequestHandler", "SocketlessRequestHandler", "request_handler", "BaseHTTPServerTestCase", "TestServerThread", "MiscTestCase", "RequestHandlerLoggingTestCase"], "class_method_calls": ["os.mkdir", "err.getvalue", "BaseTestCase.tearDown", "HTTPStatus.NOT_IMPLEMENTED", "fake_stderr.getvalue", "sys.executable", "unittest.skipUnless", "self.assertEqual", "self.assertNotEqual", "response.reason", "temp.flush", "response.msg", "self.base_url", "handler.send_response_only", "self.file2_path", "response.headers", "self.ipv6_addrs", "temp.write", "handler.command", "HTTPStatus.NOT_FOUND", "mock_server.address_family", "file4.write", "self.server_started", "tempfile.gettempdir", "self.assertRaises", "self.HOST", "self.parent_dir", "os.sep", "self.headers", "self.test_object", "handler.end_headers", "self.last_modif_datetime", "shutil.rmtree", "output.numWrites", "HTTPStatus.RESET_CONTENT", "time.gmtime", "HTTPStatus.NO_CONTENT", "os.linesep", "self.join", "self.assertTrue", "self.server", "self.assertCountEqual", "email.utils", "self.assertIsInstance", "HTTPStatus.BAD_REQUEST", "datetime.datetime", "response.version", "HTTPStatus.HTTP_VERSION_NOT_SUPPORTED", "os.getcwd", "BaseHTTPRequestHandler.log_message", "urllib.parse", "tempfile.mkdtemp", "self.end_headers", "self.handler", "mock.Mock", "location.startswith", "last_modif.timestamp", "unittest.SkipTest", "self.connection", "self.cgi_child_dir", "self.request", "output.readlines", "self.assertNotIn", "result.index", "self.file1_path", "os.rmdir", "handler.wfile", "last_modif.replace", "f.seek", "self.assertRegex", "support.swap_attr", "f.tell", "self.get_called", "support.run_unittest", "output.getData", "self.con", "self.check_status_and_reason", "self.linesep", "self.PORT", "HTTPStatus.NOT_MODIFIED", "support.can_symlink", "response.getheader", "self.send_error", "file3.write", "os.path", "html.escape", "self.translated", "handler.send_header", "email.message", "self.HTTPResponseMatch", "res.status", "unittest.TestCase", "self.assertFalse", "self.tempdir", "sys.platform", "self.verify_expected_headers", "self.verify_http_server_response", "self.request_handler", "res.getheader", "os.geteuid", "threading.Thread", "response._close_conn", "fp.write", "f.write", "file2.write", "res.read", "self._pythonexe_symlink", "http.client", "self.addCleanup", "name.startswith", "HTTPStatus.EXPECTATION_FAILED", "stderr.splitlines", "reader.close", "self.wfile", "self.tempdir_name", "support.threading_setup", "socket.AF_INET6", "self.mock_server_class", "self.send_header", "handler.request_version", "self.path", "expected.append", "self.last_modif_header", "os.environ", "time.time", "self.cgi_dir", "self.file3_path", "re.compile", "self.send_typical_request", "response.fp", "sys.getfilesystemencoding", "os.chmod", "handler.send_error", "os.listdir", "self.file4_path", "output.seek", "self.assertSequenceEqual", "datetime.timezone", "file1.write", "mock.MagicMock", "self.ipv4_addrs", "self.assertIsNotNone", "handler.requestline", "server.test", "base64.b64encode", "reader.read", "self.thread", "server.__all__", "socket.AF_INET", "handler.rfile", "support.threading_cleanup", "support.TESTFN_UNDECODABLE", "os.fsdecode", "self.tearDown", "HTTPStatus.PROCESSING", "os.chdir", "html_text.encode", "support.PythonSymlink", "self.nocgi_path", "threading.Event", "self.assertIn", "datetime.timedelta", "self._threads", "self.data", "ntpath.sep", "f.read", "os.remove", "support.captured_stderr", "HTTPStatus.OK", "server.os", "unittest.skipIf", "BaseTestCase.setUp", "server._url_collapse_path", "self.verify_get_called", "HTTPStatus.MOVED_PERMANENTLY", "mock.patch", "test_vectors.items", "os.unlink", "request.makefile", "self.pythonexe", "response.status", "self.send_response", "os.stat", "os.name", "support.EnvironmentVarGuard", "self.cwd", "response.read", "self.skipTest", "h.startswith", "HTTPStatus.SWITCHING_PROTOCOLS", "self.datas", "self.protocol_version", "path.replace"]}, "test_idle.py": {"libraries": ["unittest", "idlelib.idle_test.load_tests", "test.support.import_module"], "function_names": [], "function_calls": ["import_module"], "class_names": [], "class_method_calls": ["tk.TkVersion", "tk._support_default_root", "unittest.SkipTest", "tk.NoDefaultRoot", "idlelib.testing", "tk._default_root", "unittest.main"]}, "test_imaplib.py": {"libraries": ["datetime.datetime", "unittest.mock", "test.support.verbose", "test.support", "test.support.run_with_locale", "unittest", "threading", "datetime.timedelta", "test.support.transient_internet", "test.support.cpython_only", "socket", "test.support.run_with_tz", "socketserver", "time", "test.support.requires_hashdigest", "contextlib.contextmanager", "imaplib", "calendar", "os.path", "ssl", "test.support.reap_threads", "datetime.timezone"], "function_names": ["_send_textline", "test_connect", "cmd_LSUB", "setUp", "timevalues", "reap_server", "cmd_LOGIN", "cmd_SELECT", "handle", "setup", "test_enable_raises_error_if_no_capability", "test_ssl_context_keyfile_exclusive", "test_Internaldate2tuple_issue10941", "test_linetoolong", "test_ssl_verified", "test_valid_authentication", "get_request", "test_search_disallows_charset_in_utf8_mode", "test_imap4_host_default_value", "test_login", "test_login_cram_md5", "_send", "cmd_STORE", "_setup", "test_invalid_authentication", "test_valid_authentication_bytes", "_send_tagged", "make_server", "test_with_statement_logout", "test_bad_auth_name", "test_enable_UTF8_raises_error_if_not_supported", "reaped_server", "test_bracket_flags", "test_lsub", "_cleanup", "test_ssl_raises", "reaped_pair", "test_logincapa", "test_ssl_context_certfile_exclusive", "handle_error", "test_enable_raises_error_if_not_AUTH", "test_issue5949", "test_simple_with_statement", "check_logincapa", "test_aborted_authentication", "cmd_LOGOUT", "test_Time2Internaldate", "tearDown", "test_enable_UTF8_True_append", "test_with_statement", "test_line_termination", "test_login_cram_md5_plain_text", "cmd_AUTHENTICATE", "test_valid_authentication_plain_text", "cmd_CAPABILITY", "cmd_APPEND", "test_login_cram_md5_bytes", "test_certfile_arg_warn", "create_ssl_context", "test_that_Time2Internaldate_returns_a_result", "cmd_ENABLE", "test_logout", "test_EOF_without_complete_welcome_message", "test_Internaldate2tuple", "_send_line"], "function_calls": ["transient_internet", "super", "getattr", "MyServer", "run_with_locale", "timezone", "run_with_tz", "requires_hashdigest", "hasattr", "next", "timedelta", "print"], "class_names": ["EOFHandler", "MyServer", "NewIMAPTests", "SimpleIMAPHandler", "RemoteIMAP_SSLTest", "EnableHandler", "UTF8AppendServer", "NoEnableServer", "NewIMAPTestsMixin", "NewIMAPSSLTests", "TestImaplib", "NonUTF8Server", "LsubCmd", "TestTCPServer", "BracketFlagHandler", "RemoteIMAPTest", "BadNewlineHandler", "SecureTCPServer", "ThreadedNetworkedTestsSSL", "ThreadedNetworkedTests", "UTF8Server", "AuthHandler", "TooLongHandler", "RemoteIMAP_STARTTLSTest"], "class_method_calls": ["support.join_thread", "client.login", "ssl_context.load_cert_chain", "line.strip", "server.shutdown", "unittest.skipUnless", "self.assertEqual", "self.assertNotEqual", "self.imap_class", "imaplib.IMAP4_SSL", "t.start", "self.close_request", "self.check_logincapa", "client.capabilities", "self.host", "self.reap_server", "self.assertRaises", "self.response", "client.logout", "thread.join", "time.localtime", "self.continuation", "support.is_resource_enabled", "line.decode", "_server.logout", "support.check_warnings", "client.state", "imaplib.Time2Internaldate", "socketserver.TCPServer", "ssl.PROTOCOL_TLS_CLIENT", "client.shutdown", "self.assertTrue", "self.server", "support.HOST", "self.capabilities", "self.UTF8Server", "server.capabilities", "ssl.CERT_NONE", "self.assertIsInstance", "self.client", "message.strip", "ssl.SSLContext", "self.username", "self.timevalues", "cm.exception", "ssl.CERT_REQUIRED", "self._cleanup", "ssl.CertificateError", "self._send_tagged", "self.assertNotIn", "client.search", "client.store", "unittest.skip", "os.curdir", "client.lsub", "self._send_line", "self.assertIsNone", "os.path", "imaplib.IMAP4_PORT", "self.flags", "self.port", "client.append", "s.connect", "imaplib.Internaldate2tuple", "time.mktime", "client._encoding", "unittest.TestCase", "self.assertFalse", "self.reaped_server", "self.make_server", "imaplib.IMAP4", "self._send_textline", "support.get_socket_conn_refused_errs", "self.reaped_pair", "ssl_context.check_hostname", "self.addCleanup", "datetime.fromtimestamp", "server.logged", "server.logout", "self.wfile", "client.authenticate", "server.server_address", "self.create_ssl_context", "ssl_context.load_verify_locations", "self.socket", "self._setup", "server.login", "unittest.main", "self._testMethodName", "line.endswith", "server.server_close", "socketserver.StreamRequestHandler", "imaplib._MAXLINE", "msg_string.encode", "self._send", "self.server_close", "server.response", "self.thread", "client.enable", "self.assertRaisesRegex", "self.rfile", "t.daemon", "self.assertIn", "server.serve_forever", "client.utf8_enabled", "client.login_cram_md5", "calendar.timegm", "ssl_context.verify_mode", "message.encode", "imap.login", "server.socket", "context.wrap_socket", "server.RequestHandlerClass", "socket.error", "self.password", "context.load_cert_chain", "mock.patch", "self.server_class", "client.response", "client.select", "self.skipTest", "imap.logout", "msg.encode", "threading.Thread", "socket.socket"]}, "test_imghdr.py": {"libraries": ["unittest", "io", "test.support.TESTFN", "test.support.findfile", "test.support.unlink", "imghdr", "warnings", "pathlib", "os"], "function_names": ["test_closed_file", "seek", "setUpClass", "test_output_stream", "test_unseekable", "test_bad_args", "test_file_pos", "test_string_data", "test_missing_file", "test_data", "test_register_test", "tell", "test_pathlike_filename", "tearDown", "test_jumbo", "test_invalid_headers"], "function_calls": ["bytearray", "findfile", "UnseekableIO", "open", "unlink"], "class_names": ["UnseekableIO", "TestImghdr"], "class_method_calls": ["stream.seek", "cls.testfile", "stream.close", "self.assertEqual", "io.BytesIO", "imghdr.what", "cls.testdata", "os.fsencode", "stream.read", "self.addCleanup", "io.StringIO", "imghdr.tests", "self.testdata", "warnings.catch_warnings", "io.FileIO", "self.subTest", "self.assertRaises", "warnings.simplefilter", "pathlib.Path", "stream.write", "unittest.TestCase", "self.assertIsNone", "unittest.main", "io.UnsupportedOperation", "stream.tell", "h.startswith", "f.fileno", "self.testfile"]}, "test_imp.py": {"libraries": ["unittest", "os.path", "time", "_frozen_importlib", "importlib.util", "importlib", "py_compile", "sys", "warnings", "html.parser", "_frozen_importlib_external", "_imp", "imp", "test.support", "os", "marshal", "test.support.script_helper"], "function_names": ["setUp", "test_cache_from_source", "test_source", "test_import_encoded_module", "test_pyc_invalidation_mode_from_cmdline", "test_find_and_load_checked_pyc", "test_load_dynamic_ImportError_path", "verify_lock_state", "test_issue31315", "test_builtin", "test_bug7732", "test_issue9319", "testLock", "test_issue_35321", "test_source_from_cache", "test_issue24748_load_module_skips_sys_modules_check", "test_issue3594", "test_load_module_extension_file_is_None", "requires_load_dynamic", "test_issue15828_load_extensions", "test_load_from_source", "test_load_source", "cleanup", "test_find_module_encoding", "test_issue16421_multiple_modules_in_one_dll", "test_issue1267", "test_extension", "test_unencodeable", "test_multiple_calls_to_get_data", "test_issue5604", "test_with_deleted_parent", "test_source_hash"], "function_calls": ["BadSpec", "range", "type", "open", "create_dynamic", "hasattr"], "class_names": ["BadSpec", "PEP3147Tests", "NullImporterTests", "ImportTests", "ReloadTests", "LockTests"], "class_method_calls": ["imp.load_package", "os.mkdir", "mod.test_strings", "unittest.skipUnless", "self.assertEqual", "self.assertNotEqual", "imp._LoadSourceCompatibility", "py_compile.PycInvalidationMode", "mod.__path__", "self.assertIs", "spec.origin", "mod.test", "support.TESTFN", "known_locales.get", "imp.source_from_cache", "imp.find_module", "warnings.catch_warnings", "mod2.__name__", "self.test_strings", "self.assertRaises", "mod1.__name__", "special_char.decode", "fileobj.close", "imp.acquire_lock", "file.close", "support.TESTFN_UNENCODABLE", "imp.load_compiled", "mod.x", "file.encoding", "sys.implementation", "self.assertTrue", "py_compile.compile", "support.CleanImport", "module.__spec__", "imp.load_module", "res.out", "imp.lock_held", "mod.a", "_imp.source_hash", "self.tag", "importlib.util", "imp.get_tag", "os.rmdir", "new_os.path", "mod0.__name__", "os.curdir", "self.assertIsNot", "module.__name__", "os.getenv", "os.path", "script_helper.assert_python_ok", "module.int_const", "sys.dont_write_bytecode", "unittest.TestCase", "imp.__file__", "self.test_path", "package.b", "sys.platform", "support.temp_cwd", "fp.write", "new_os.getenv", "imp.load_dynamic", "self.addCleanup", "warnings.simplefilter", "support.unlink", "imp.load_source", "imp.NullImporter", "unittest.main", "imp.reload", "sys.getfilesystemencoding", "imp.release_lock", "fp.tell", "self.verify_lock_state", "err.exception", "file_.close", "mod.__name__", "self.assertIsNotNone", "imp.C_EXTENSION", "imp.cache_from_source", "sys.modules", "fd.encoding", "self.assertRaisesRegex", "_frozen_importlib_external.__spec__", "importlib.import_module", "self.assertIn", "support.rmtree", "self.fail", "support.get_attribute", "fp.encoding", "unittest.skipIf", "loader.get_data", "_frozen_importlib.__spec__", "support.swap_item", "sys.path", "imp.PY_SOURCE", "support.cpython_only", "self.skipTest", "fp.readline", "support.EnvironmentVarGuard", "file.write"]}, "basic.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "basic2.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "binding.py": {"libraries": ["test.test_import.data.circular_imports.binding2"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "binding2.py": {"libraries": ["test.test_import.data.circular_imports.binding"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "from_cycle1.py": {"libraries": ["from_cycle2.a"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "from_cycle2.py": {"libraries": ["from_cycle1.b"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "indirect.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "rebinding.py": {"libraries": ["rebinding2.util"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "rebinding2.py": {"libraries": ["subpkg.util"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["util.util"]}, "source.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "subpackage.py": {"libraries": ["subpkg.subpackage2"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "subpackage2.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "use.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["source.spam"]}, "submodule.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "submodule1.py": {"libraries": ["sys"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["sys.modules"]}, "submodule2.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "test_finder.py": {"libraries": ["unittest", "py_compile", "sys", "tempfile", "test.support.make_legacy_pyc", "warnings", "os", "stat", "errno"], "function_names": ["cleanup", "test_module", "_find", "run_test", "get_finder", "import_", "test_invalidate_caches", "test_empty_string_for_dir", "test_no_read_directory", "test_package_over_module", "test_ignore_file", "test_package_in_package", "test_dir_removal_handling", "test_package", "test_failure", "test_module_in_package"], "function_calls": ["make_legacy_pyc", "open", "hasattr"], "class_names": ["FinderTests", "FinderTestsPEP302", "FinderTestsPEP420", "FinderTestsPEP451"], "class_method_calls": ["util.create_modules", "errno.ENOENT", "sys.platform", "finder._path_mtime", "util.import_importlib", "self.run_test", "self.assertIsNotNone", "self.import_", "self._find", "util.test_both", "unittest.skipUnless", "self.NOT_FOUND", "self.assertEqual", "error.errno", "spec.loader", "finder.find_loader", "tempfile.NamedTemporaryFile", "stat.S_IXUSR", "abc.FinderTests", "self.assertIn", "loader.get_filename", "self.addCleanup", "stat.S_IWUSR", "tempfile.TemporaryDirectory", "warnings.catch_warnings", "tempdir.name", "tempdir.__exit__", "warnings.simplefilter", "file_obj.name", "finder.invalidate_caches", "finder.find_spec", "self.assertIsNone", "os.unlink", "unittest.main", "finder.find_module", "os.path", "self.machinery", "os.chmod", "self.assertTrue", "os.stat", "file.write", "self.get_finder", "py_compile.compile"]}, "test_loader.py": {"libraries": ["unittest", "types", "sys", "warnings", "functools"], "function_names": ["test_loadTestsFromName__callable__wrong_type", "test_loadTestsFromName__unknown_attr_name_on_package", "wrapper", "runTest", "test_loadTestsFromName__module_not_loaded", "test_loadTestsFromNames__callable__TestCase_instance", "test_loadTestsFromName__relative_bad_object", "test_sortTestMethodsUsing__loadTestsFromTestCase", "test_testMethodPrefix__loadTestsFromNames", "test_loadTestsFromName__relative_not_a_module", "test_loadTestsFromNames__relative_TestCase_subclass", "test_loadTestsFromNames__relative_testmethod", "test_1", "test_loadTestsFromNames__callable__call_staticmethod", "warningregistry", "test_loadTestsFromNames__relative_not_a_module", "test_sortTestMethodsUsing__getTestCaseNames", "test_sortTestMethodsUsing__loadTestsFromNames", "test_loadTestsFromName__empty_name", "test_loadTestsFromTestCase__no_matches", "test_loadTestsFromTestCase", "noop", "return_wrong", "test_loadTestsFromModule__faulty_load_tests", "test_loadTestsFromModule__load_tests", "test_loadTestsFromTestCase__default_method_name", "test_sortTestMethodsUsing__default_value", "test_testMethodPrefix__default_value", "test_loadTestsFromModule__use_load_tests_deprecated_positional", "test_loadTestsFromName__relative_invalid_testmethod", "test_loadTestsFromName__relative_TestCase_subclass", "test_testMethodPrefix__loadTestsFromName", "test_loadTestsFromNames__relative_TestSuite", "foobar", "test_loadTestsFromName__relative_empty_name", "test_loadTestsFromModule__not_a_module", "test_loadTestsFromModule__TestCase_subclass", "test_loadTestsFromNames__relative_empty_name_list", "test_loadTestsFromNames__callable__TestSuite", "test_getTestCaseNames", "test_loadTestsFromNames__module_not_loaded", "check_deferred_error", "test_foo", "test_loadTestsFromNames__relative_empty_name", "test_suiteClass__loadTestsFromModule", "test_loadTestsFromNames__malformed_name", "test_loadTestsFromNames__empty_name", "test_loadTestsFromName__unknown_attr_name_on_module", "test_loadTestsFromNames__unknown_name_relative_1", "test", "test_loadTestsFromModule__too_many_positional_args", "test_loadTestsFromName__relative_unknown_name", "test_testMethodPrefix__loadTestsFromModule", "return_TestCase", "test_getTestCaseNames__testNamePatterns", "test_loadTestsFromName__relative_testmethod", "test_loadTestsFromNames__unknown_attr_name", "test_getTestCaseNames__no_tests", "test_loadTestsFromModule__pattern", "test_loadTestsFromName__malformed_name", "__get__", "test_loadTestsFromName__function_with_different_name_than_method", "reversed_cmp", "test_partial_functions", "test_loadTestsFromModule__use_load_tests_deprecated_keyword", "test_loadTestsFromNames__callable__wrong_type", "test_loadTestsFromNames__relative_malformed_name", "test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass", "test_suiteClass__loadTestsFromNames", "test_loadTestsFromModule__use_load_tests_other_bad_keyword", "test_loadTestsFromName__relative_testmethod_ProperSuiteClass", "test_getTestCaseNames__inheritance", "test_sortTestMethodsUsing__loadTestsFromName", "test_sortTestMethodsUsing__None", "test_3", "return_TestSuite", "test_loadTestsFromName__callable__TestSuite", "test_getTestCaseNames__not_a_TestCase", "test_loadTestsFromNames__relative_bad_object", "test_loadTestsFromTestCase__TestSuite_subclass", "test_loadTestsFromNames__empty_name_list", "test_suiteClass__loadTestsFromName", "test_suiteClass__loadTestsFromTestCase", "test_loadTestsFromModule__no_TestCase_tests", "test_loadTestsFromNames__relative_invalid_testmethod", "test___init__", "foo_bar", "test_loadTestsFromNames__unknown_module_name", "load_tests", "test_loadTestsFromNames__unknown_name_relative_2", "test_loadTestsFromModule__no_TestCase_instances", "test_testMethodPrefix__loadTestsFromTestCase", "test_loadTestsFromName__unknown_module_name", "test_getTestCaseNames__testNamePatterns__attribute_access_regression", "test_sortTestMethodsUsing__loadTestsFromModule", "test_loadTestsFromName__relative_TestSuite", "test_loadTestsFromName__relative_malformed_name", "test_loadTestsFromName__callable__TestCase_instance", "test_suiteClass__default_value", "foo", "test_2"], "function_calls": ["list", "object", "TypeError", "len", "MyTestCase", "sorted", "Trap", "Foo", "getattr", "str", "set", "setattr", "type", "func", "Test1"], "class_names": ["MyTestCase", "TestP", "TestC", "Foo", "MyTest", "Test_TestLoader", "Test", "BadCase", "Trap", "NotATestCase", "SubTestSuite", "NotAModule", "Test1"], "class_method_calls": ["self.assertIsInstance", "test.testfoo", "m.return_wrong", "loader.errors", "self.assertEqual", "test.sdasfasfasdf", "unittest.TestLoader", "self.assertNotEqual", "unittest.FunctionTestCase", "sys.modules", "cm.exception", "self.assertRaisesRegex", "loader.loadTestsFromTestCase", "loader.loadTestsFromModule", "self.assertIs", "self.check_deferred_error", "test.m", "self.assertIn", "functools.partial", "self.fail", "loader.suiteClass", "m.testsuite", "warnings.__warningregistry__", "loader.getTestCaseNames", "warnings.catch_warnings", "load_tests_args.extend", "self.assertRaises", "warnings.simplefilter", "m.return_TestCase", "m.return_TestSuite", "m.Foo", "loader.loadTestsFromName", "m.load_tests", "loader.testMethodPrefix", "loader.testNamePatterns", "loader.sortTestMethodsUsing", "m.testcase_1", "unittest.main", "types.ModuleType", "loader.loadTestsFromNames", "unittest.TestSuite", "suite.countTestCases", "self.assertTrue", "unittest.TestCase", "self.assertFalse"]}, "test_case_sensitivity.py": {"libraries": ["unittest", "test.support", "os"], "function_names": ["sensitivity_test", "finder", "find", "test_sensitive", "test_insensitive"], "function_calls": [], "class_names": ["CaseSensitivityTest", "CaseSensitivityTestPEP302", "CaseSensitivityTestPEP451"], "class_method_calls": ["util.create_modules", "util.import_importlib", "self.assertIsNotNone", "util.test_both", "util.CASEOKTestBase", "env.unset", "self.caseok_env_changed", "self.name", "test_support.EnvironmentVarGuard", "self.assertIn", "insensitive.get_filename", "sensitive.get_filename", "env.set", "found.loader", "name.lower", "finder.find_spec", "self.sensitivity_test", "self.assertIsNone", "unittest.main", "self.find", "finder.find_module", "self.finder", "os.path", "self.machinery", "util.case_insensitive_tests"]}, "test_path_hook.py": {"libraries": ["unittest"], "function_names": ["test_empty_string_legacy", "test_success", "path_hook", "test_success_legacy", "test_empty_string"], "function_calls": ["hasattr"], "class_names": ["PathHookTest"], "class_method_calls": ["util.create_modules", "self.machinery", "util.import_importlib", "self.path_hook", "util.test_both", "self.assertTrue", "unittest.main"]}, "fixtures.py": {"libraries": ["textwrap", "contextlib", "shutil", "sys", "tempfile", "pathlib", "os"], "function_names": ["tempdir_as_cwd", "install_finder", "find_module", "setUp", "build_files", "tempdir", "DALS", "save_cwd", "add_sys_path"], "function_calls": ["isinstance", "super", "str", "build_files", "tempdir", "DALS", "save_cwd"], "class_names": ["DistInfoPkgOffPath", "OnSysPath", "EggInfoPkg", "Fixtures", "EggInfoFile", "NullFinder", "DistInfoPkg", "SiteDir"], "class_method_calls": ["EggInfoPkg.files", "self.site_dir", "os.getcwd", "os.chdir", "DistInfoPkg.files", "tempfile.mkdtemp", "f.write", "self.addCleanup", "EggInfoFile.files", "sys.meta_path", "pathlib.Path", "full_name.open", "full_name.mkdir", "shutil.rmtree", "contextlib.contextmanager", "textwrap.dedent", "file_defs.items", "sys.path", "self.fixtures", "contextlib.ExitStack", "self.add_sys_path"]}, "test___loader__.py": {"libraries": ["sys", "importlib.machinery", "types", "unittest"], "function_names": ["load_module", "find_module", "test___loader___missing", "create_module", "exec_module", "test___loader___is_None", "test___loader__", "find_spec"], "function_calls": ["SpecLoaderMock", "LoaderMock"], "class_names": ["LoaderAttributeTests", "LoaderMock", "SpecLoaderMock", "SpecLoaderAttributeTests"], "class_method_calls": ["machinery.ModuleSpec", "util.import_state", "loader.module", "util.uncache", "self.__import__", "util.test_both", "types.ModuleType", "self.assertEqual", "sys.modules", "util.__import__", "unittest.main", "module.__loader__", "self.module"]}, "test___package__.py": {"libraries": ["unittest", "warnings"], "function_names": ["test_using___package__", "test_spec_fallback", "test_None_as___package__", "test_bad__package__", "test_warn_when_using___name__", "test_using___name__", "import_module", "__init__", "test_top_level", "test_submodule", "test_bunk__package__", "test_package", "test_warn_when_package_and_spec_disagree"], "function_calls": ["getattr", "FakeSpec"], "class_names": ["Using__package__PEP451", "Setting__package__PEP302", "Using__package__", "Using__package__PEP302", "FakeSpec", "Setting__package__", "Setting__package__PEP451"], "class_method_calls": ["warnings.simplefilter", "module.__name__", "self.assertWarns", "util.import_state", "util.mock_modules", "self.import_module", "self.__import__", "self.assertRaises", "util.test_both", "module.__package__", "self.assertEqual", "util.mock_spec", "warnings.catch_warnings", "unittest.TestCase", "util.__import__", "unittest.main", "self.mock_modules", "self.parent"]}, "test_api.py": {"libraries": ["unittest", "types", "os.path", "sys", "warnings", "test.support"], "function_names": ["test_success", "test_loaded_once", "test_shallow_relative_package_import", "code", "test_absolute_import_with_package", "test_reload_location_changed", "test_sys_modules_loader_is_None", "test_no_frozen_importlib", "test_relative_import_wo_package", "test_method_lacking", "test_reload_missing_loader", "test_reload_loader_replaced", "test_everyone_has___spec__", "__init__", "test_reload_modules", "find_spec", "test_method_called", "test_reload_namespace_changed", "test_reload_submodule", "test_absolute_package_import", "find_module", "test_sys_modules_loader_is_not_set", "test_sys_modules", "test_success_path", "load_a", "test_module_replaced", "test_module_import", "test_everyone_has___loader__", "test_deep_relative_package_import", "invalidate_caches", "test_nothing", "test_module_missing_spec", "load_b"], "function_calls": ["isinstance", "set", "InvalidatingNullFinder", "type", "open", "vars", "hasattr"], "class_names": ["FindLoaderPEP302Tests", "FindLoaderTests", "StartupTests", "ImportModuleTests", "FrozenImportlibTests", "InvalidateCacheTests", "InvalidatingNullFinder", "FakeMetaFinder", "FindLoaderPEP451Tests", "ReloadTests"], "class_method_calls": ["types.__loader__", "os.mkdir", "self.assertIsNotNone", "test_util.mock_modules", "self.assertEqual", "os.rename", "self.assertNotEqual", "test_util.import_state", "test_util.import_importlib", "sys.modules", "reloaded.spam", "spec.loader", "meta_ins.called", "support.create_empty_file", "self.assertIs", "support.temp_cwd", "ns.pop", "test_util.uncache", "self.addCleanup", "support.DirsOnSysPath", "warnings.catch_warnings", "test_util.submodule", "module.spam", "self.subTest", "self.called", "self.assertRaises", "warnings.simplefilter", "module.__spec__", "sys.meta_path", "self.util", "spec.name", "reloaded.__loader__", "self.assertIsNone", "path_ins.called", "self.assertIsNot", "unittest.main", "source_init.__loader__", "types.ModuleType", "module.__name__", "test_util.test_both", "actual.spam", "loader.path", "os.path", "self.machinery", "test_util.temp_module", "self.init", "sys.path_importer_cache", "self.assertTrue", "self.FakeMetaFinder", "self.maxDiff", "unittest.TestCase", "init_file.write", "module.__loader__", "support.CleanImport"]}, "test_caching.py": {"libraries": ["sys", "unittest", "types.MethodType"], "function_names": ["load_module", "test_using_cache_for_assigning_to_attribute", "test_using_cache_after_loader", "test_None_in_cache", "test_using_cache", "test_using_cache_for_fromlist", "create_mock"], "function_calls": ["id", "original_load", "MethodType", "hasattr"], "class_names": ["UseCache", "ImportlibUseCache"], "class_method_calls": ["util.import_state", "util.uncache", "self.__import__", "self.assertRaises", "util.test_both", "module.module", "self.assertEqual", "self.assertTrue", "sys.modules", "unittest.TestCase", "mock.load_module", "util.__import__", "cm.exception", "unittest.main", "self.create_mock", "util.mock_modules"]}, "test_fromlist.py": {"libraries": ["warnings", "i_do_not_exist", "unittest"], "function_names": ["test_return_from_import", "test_return_from_from_import", "module_code", "test_object", "test_nonexistent_from_package", "test_module_from_package_triggers_ModuleNotFoundError", "basic_star_test", "test_using_star", "test_star_in_all", "test_star_with_others", "test_module_from_package", "test_invalid_type", "test_nonexistent_in_all", "test_fromlist_as_tuple", "test_empty_string", "test_nonexistent_object", "test_invalid_type_in_all"], "function_calls": ["iter", "hasattr"], "class_names": ["ReturnValue", "HandlingFromlist"], "class_method_calls": ["util.test_both", "self.assertEqual", "util.mock_spec", "util.__import__", "self.basic_star_test", "self.assertRaisesRegex", "warnings.catch_warnings", "module.module1", "self.assertRaises", "warnings.simplefilter", "util.mock_modules", "module.module2", "unittest.main", "module.__name__", "util.import_state", "self.__import__", "module.module", "self.assertTrue", "exc.exception", "self.assertFalse"]}, "test_meta_path.py": {"libraries": ["unittest", "types.MethodType", "sys", "warnings", "importlib._bootstrap"], "function_names": ["test_continuing", "test_with_path", "test_no_path", "log_finder", "test_empty", "wrapper", "test_first_called"], "function_calls": ["len", "issubclass", "getattr", "fxn", "MethodType", "setattr"], "class_names": ["CallSignaturePEP302", "CallSignaturePEP451", "CallSignature", "CallingOrder"], "class_method_calls": ["util.test_both", "self.assertEqual", "first.find_spec", "util.mock_spec", "sys.modules", "util.__import__", "self.mock_modules", "self.assertIs", "warnings.catch_warnings", "self.log_finder", "util.mock_modules", "warnings.simplefilter", "second.modules", "importer.modules", "log.append", "first.modules", "self.assertIsNone", "importlib._bootstrap", "unittest.main", "util.import_state", "self.__import__", "self.finder_name", "self.assertTrue", "self.assertFalse"]}, "test_packages.py": {"libraries": ["unittest", "pkg.module", "sys", "subpkg.module", "test.support"], "function_names": ["module_injection", "test_raising_parent_after_relative_importing_child", "test_module_not_package", "__init__", "test_raising_parent_after_double_relative_importing_child", "test_import_parent", "test_raising_parent_after_importing_child", "test_module_not_package_but_side_effects", "test_bad_parent"], "function_calls": ["hasattr"], "class_names": ["ParentModuleTests"], "class_method_calls": ["util.import_state", "self.assertIn", "self.__import__", "util.test_both", "self.assertEqual", "self.assertNotIn", "support.unload", "util.mock_spec", "sys.modules", "util.__import__", "cm.exception", "unittest.main", "self.assertRaises"]}, "test_path.py": {"libraries": ["unittest", "io", "importlib.resources"], "function_names": ["test_reading", "setUp", "test_remove_in_context_manager", "execute"], "function_calls": ["FileNotFoundError"], "class_names": ["PathZipTests", "PathTests", "PathDiskTests", "PathMemoryTests", "CommonTests"], "class_method_calls": ["path.open", "path.unlink", "file.read", "resources.path", "self.addCleanup", "self.data", "self.assertEqual", "util.CommonResourceTests", "util.ZipSetup", "file.close", "io.BytesIO", "util.create_package", "unittest.TestCase", "unittest.main"]}, "test_relative_imports.py": {"libraries": ["unittest", "warnings"], "function_names": ["test_relative_import_no_package_exists_absolute", "test_empty_name_w_level_0", "test_import_from_different_package", "test_package_to_module", "test_too_high_from_module", "test_too_high_from_package", "test_attr_from_module", "test_module_to_package", "test_relative_import_no_package", "test_deep_import", "test_module_from_module", "test_package_to_package", "test_relative_import_no_globals", "test_import_relative_import_no_fromlist", "callback", "relative_import_test"], "function_calls": ["len", "callback", "range", "hasattr"], "class_names": ["RelativeImports"], "class_method_calls": ["self.relative_import_test", "create.append", "mod.__name__", "module.subpkg2", "module.attr", "util.test_both", "self.assertEqual", "util.mock_spec", "util.__import__", "uncache_names.append", "warnings.catch_warnings", "self.assertRaises", "warnings.simplefilter", "unittest.main", "module.__name__", "util.uncache", "util.import_state", "self.__import__", "module.module", "self.assertTrue", "name.endswith", "module.mod2"]}, "one.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "two.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "a_test.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "three.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "test_file_loader.py": {"libraries": ["unittest", "types", "test.support.unload", "shutil", "py_compile", "sys", "warnings", "test.support.make_legacy_pyc", "test.test_py_compile.SourceDateEpochTestMeta", "os", "stat", "marshal", "errno", "test.test_py_compile.without_source_date_epoch"], "function_names": ["test_file_from_empty_string_dir", "test", "test_equality", "_test_non_code_marshal", "setUp", "test_no_marshal", "test_overridden_unchecked_hash_based_pyc", "_test_magic_only", "_test_bad_marshal", "test_unloadable", "_test_partial_hash", "test_bad_magic", "test_get_filename_API", "test_partial_magic", "_test_partial_timestamp", "fake_mtime", "test_partial_size", "test_old_timestamp", "test_partial_flags", "test_partial_timestamp", "test_partial_hash", "_test_empty_file", "test_module_reuse", "test_overridden_checked_hash_based_pyc", "_test_partial_flags", "get_source", "test_package", "test_unchecked_hash_based_pyc", "module_repr", "_test_partial_magic", "_test_bad_magic", "test_bad_marshal", "test_module", "setUpClass", "test_load_module_API", "test_lacking_parent", "manipulate_bytecode", "test_checked_hash_based_pyc", "test_read_only_bytecode", "test_timestamp_overflow", "is_package", "test_inequality", "test_magic_only", "test_state_after_failure", "test_empty_file", "import_", "get_code", "_test_partial_size", "test_bad_syntax", "test_non_code_marshal", "_test_no_marshal"], "function_calls": ["list", "len", "test", "getattr", "Tester", "type", "setattr", "make_legacy_pyc", "open", "id", "manipulator", "fxn"], "class_names": ["SourceDateEpoch_SimpleTest", "BadBytecodeTest", "SourceLoaderBadBytecodeTestPEP451", "SourceLoaderBadBytecodeTest", "SourceLoaderBadBytecodeTestPEP302", "SourcelessLoaderBadBytecodeTestPEP302", "BadBytecodeTestPEP302", "Tester", "SourcelessLoaderBadBytecodeTestPEP451", "SimpleTest", "SourceDateEpochTestMeta", "BadBytecodeTestPEP451", "SourcelessLoaderBadBytecodeTest"], "class_method_calls": ["util.create_modules", "util.import_importlib", "self.abc", "self.assertEqual", "self.assertNotEqual", "e.errno", "py_compile.PycInvalidationMode", "warnings.catch_warnings", "cls.machinery", "self._test_non_code_marshal", "self.assertRaises", "self.util", "shutil.rmtree", "self._test_magic_only", "mod.state", "types.ModuleType", "self.manipulate_bytecode", "self.filepath", "bytecode_file.seek", "mod.x", "mod.__file__", "self._test_empty_file", "self.assertTrue", "stat.S_IRUSR", "module.__spec__", "py_compile.compile", "int.from_bytes", "unittest.mock", "cm.exception", "bytecode_file.write", "self.loader", "stat.S_IWUSR", "self.assertNotIn", "self._test_partial_hash", "self._test_partial_size", "self._test_partial_magic", "fp.read", "os.path", "self.machinery", "self._test_partial_flags", "self._test_bad_magic", "self.import_", "util.test_both", "fp.write", "f.write", "stat.S_IROTH", "os.utime", "loader.get_filename", "self.addCleanup", "self._test_partial_timestamp", "warnings.simplefilter", "mod.__spec__", "self.assertGreater", "module.x", "check.items", "unittest.main", "util.uncache", "os.chmod", "file.read", "mod.__cached__", "self.importlib", "sys.modules", "bytecode_file.read", "module.__dict__", "self._test_bad_marshal", "self.name", "loader.exec_module", "self.assertIn", "marshal.dumps", "stat.S_IRGRP", "loader.load_module", "os.unlink", "cls.loader", "self._test_no_marshal", "abc.LoaderTests", "self.skipTest", "file.write", "util.writes_bytecode_files"]}, "test_source_encoding.py": {"libraries": ["unittest", "test.support.TESTFN", "test.support.unlink", "test.support.unload", "importlib", "sys", "tempfile", "subprocess", "test.support.captured_stdout", "os", "test.support.rmtree", "test.support.script_helper"], "function_names": ["test_utf8_bom_and_utf8_coding_line", "test_pep263", "test_second_non_utf8_coding_line", "test_third_coding_line", "test_compilestring", "test_bad_coding", "test_default_coding", "test_exec_valid_coding", "test_20731", "test_utf8_bom", "check_script_output", "test_file_parse", "test_error_message", "test_double_coding_same_line", "test_issue2301", "test_bad_coding2", "verify_bad_module", "test_issue3297", "test_issue7820", "test_double_coding_line", "test_issue4626", "test_first_non_utf8_coding_line", "test_first_coding_line", "test_second_coding_line", "test_error_from_string"], "function_calls": ["unload", "len", "compile", "__import__", "rmtree", "open", "ascii", "unlink", "captured_stdout", "exec"], "class_names": ["AbstractSourceEncodingTest", "FileSourceEncodingTest", "MiscSourceEncodingTest", "BytesSourceEncodingTest"], "class_method_calls": ["self.verify_bad_module", "self.check_script_output", "sys.executable", "res.out", "self.assertEqual", "sub.returncode", "v.text", "self.assertRaisesRegex", "fp.write", "f.write", "self.fail", "c.exception", "tempfile.TemporaryDirectory", "subprocess.Popen", "self.assertNotIn", "self.assertRaises", "stdout.getvalue", "importlib.invalidate_caches", "os.curdir", "subprocess.PIPE", "fp.read", "sub.communicate", "unittest.main", "sys.path", "os.path", "out.rstrip", "script_helper.assert_python_ok", "self.assertTrue", "unittest.TestCase"]}, "stubs.py": {"libraries": ["unittest"], "function_names": ["setUpPyfakefs"], "function_calls": [], "class_names": ["fake_filesystem_unittest", "TestCase"], "class_method_calls": ["unittest.TestCase", "self.skipTest"]}, "test_lazy.py": {"libraries": ["unittest", "types", "importlib.util", "importlib", "sys", "importlib.abc"], "function_names": ["test_delete_eventual_attr", "test_mutated_attr", "test_module_already_in_sys", "test_e2e", "test_delete_preexisting_attr", "test_validation", "test_init", "test_new_attr", "test_mutated_preexisting_attr", "__init__", "new_module", "exec_module", "test_attr_unchanged", "find_spec", "test_module_substitution_error"], "function_calls": ["TestingImporter", "factory", "exec", "hasattr"], "class_names": ["TestingImporter", "LazyLoaderTests", "LazyLoaderFactoryTests", "CollectInit"], "class_method_calls": ["self.assertIsNotNone", "self.source_code", "module.attr", "util.spec_from_loader", "self.assertEqual", "spec.loader", "test_util.import_state", "sys.modules", "importer.module_name", "module.new_attr", "module.__dict__", "self.assertRaisesRegex", "self.new_module", "importer.loaded", "self.loaded", "test_util.uncache", "importlib.import_module", "self.args", "loader.kwargs", "self.kwargs", "abc.MetaPathFinder", "lazy_loader.loader", "util.LazyLoader", "self.assertRaises", "loader.source_code", "self.assertIsNone", "TestingImporter.mutated_name", "loader.loaded", "unittest.main", "module.__name__", "types.ModuleType", "abc.Loader", "loader.args", "self.module_name", "TestingImporter.module_name", "unittest.TestCase", "self.assertFalse", "module.__loader__", "module.__spec__"]}, "test_metadata_api.py": {"libraries": ["unittest", "re", "textwrap", "importlib.metadata.requires", "importlib.metadata.entry_points", "collections.abc.Iterator", "importlib.metadata.Distribution", "importlib.metadata.metadata", "importlib.metadata.files", "importlib.metadata.version", "importlib.metadata.PackageNotFoundError", "importlib.metadata.distribution"], "function_names": ["test_distribution_at_str", "test_metadata_for_this_package", "test_requires_dist_info", "test_files_dist_info", "test_requires_egg_info", "test_file_hash_repr", "test_retrieves_version_of_distinfo_pkg", "test_more_complex_deps_requires_text", "_test_files", "test_files_egg_info", "test_find_distributions_specified_path", "test_requires_egg_info_file", "test_entry_points", "test_version_egg_info_file", "test_for_top_level", "test_retrieves_version_of_self", "test_distribution_at_pathlib", "test_for_name_does_not_exist", "test_read_text"], "function_calls": ["assertRegex", "isinstance", "len", "any", "version", "sorted", "metadata", "str", "files", "all", "dict", "requires", "distribution", "entry_points", "repr"], "class_names": ["APITests", "OffSysPathTests"], "class_method_calls": ["file.read_text", "file.locate", "self.assertEqual", "self._test_files", "ep.value", "self.site_dir", "md.get_all", "file.name", "util.hash", "fixtures.EggInfoPkg", "Distribution.discover", "dist.metadata", "Distribution.at", "dist.version", "fixtures.DistInfoPkg", "self.assertRaises", "self.assertRegex", "fixtures.EggInfoFile", "self.assertIsNone", "fixtures.DistInfoPkgOffPath", "top_level.read_text", "path.name", "textwrap.dedent", "self.version_pattern", "file.hash", "ep.extras", "p.name", "file.root", "file.size", "file.read_binary", "re.match", "unittest.TestCase", "Distribution._deps_from_requires_text"]}, "test_namespace_pkgs.py": {"libraries": ["unittest", "test.test_importlib.util", "foo", "contextlib", "parent.child.three", "importlib", "bar.two", "sys", "foo.two", "a_test", "parent.child.two", "os", "parent.child.one", "foo.one"], "function_names": ["namespace_tree_context", "setUp", "test_first_path_wins_again", "test_simple_package", "test_module_repr", "test_missing_directory", "test_first_path_wins_importing_second_first", "sys_modules_context", "test_project3_succeeds", "test_project3_fails", "test_imports", "test_path_indexable", "test_cant_import_other", "test_dynamic_path", "test_first_path_wins", "test_module_before_namespace_package", "test_namespace_loader_consistency", "tearDown", "test_present_directory", "test_non_namespace_package_takes_precedence", "test_namespace_origin_consistency"], "function_calls": ["len", "sys_modules_context", "namespace_tree_context", "str", "repr"], "class_names": ["DynamicPathCalculation", "ZipWithMissingDirectory", "SingleNestedZipNamespacePackage", "ModuleAndNamespacePackageInSameDir", "DynamicPathNamespacePackage", "CombinedNamespacePackages", "SingleZipNamespacePackage", "LegacySupport", "SeparatedOverlappingNamespacePackages", "LoaderTests", "SeparatedNestedZipNamespacePackages", "ReloadTests", "SeparatedZipNamespacePackages", "NamespacePackageTest", "SeparatedNamespacePackages", "SingleNamespacePackage"], "class_method_calls": ["a_test.attr", "parent.__path__", "foo.__loader__", "self.assertIsNotNone", "kwargs.setdefault", "sys.path_hooks", "self.assertEqual", "importlib.reload", "sys.modules", "self.assertIn", "self.paths", "self.root", "self.assertNotIn", "self.resolved_paths", "foo.__path__", "foo.one", "self.assertRaises", "foo.__spec__", "sys.meta_path", "foo.two", "unittest.expectedFailure", "contextlib.contextmanager", "self.assertIsNone", "unittest.main", "foo.__file__", "util.import_state", "sys.path", "os.path", "self.ctx", "bar.two", "unittest.TestCase", "parent.child"]}, "test_open.py": {"libraries": ["unittest", "importlib.resources"], "function_names": ["test_open_binary", "execute", "test_open_text_with_errors", "setUp", "test_open_text_FileNotFoundError", "test_open_text_default_encoding", "test_open_text_given_encoding", "test_open_binary_FileNotFoundError"], "function_calls": [], "class_names": ["OpenTests", "OpenZipTests", "OpenDiskTests", "CommonTextTests", "CommonBinaryTests"], "class_method_calls": ["resources.open_text", "resources.open_binary", "self.data", "self.assertEqual", "util.CommonResourceTests", "util.ZipSetup", "fp.read", "unittest.TestCase", "unittest.main", "self.assertRaises"]}, "test_read.py": {"libraries": ["unittest", "importlib.import_module", "importlib.resources"], "function_names": ["test_read_text_given_encoding", "test_read_binary", "test_read_submodule_resource_by_name", "test_read_submodule_resource", "test_read_text_with_errors", "test_read_text_default_encoding", "execute"], "function_calls": ["import_module"], "class_names": ["ReadZipTests", "ReadDiskTests", "ReadTests", "CommonTextTests", "CommonBinaryTests"], "class_method_calls": ["resources.read_binary", "self.data", "resources.read_text", "self.assertEqual", "util.CommonResourceTests", "util.ZipSetup", "unittest.TestCase", "unittest.main", "self.assertRaises"]}, "test_resource.py": {"libraries": ["unittest", "time", "contextlib", "sys", "test.support"], "function_names": ["test_main", "__len__", "test_prlimit", "test_getrusage", "test_setrusage_refcount", "test_fsize_toobig", "__getitem__", "test_args", "test_pagesize", "test_fsize_enforced", "test_prlimit_refcount", "test_fsize_ismax", "test_linux_constants", "test_freebsd_contants"], "function_calls": ["test_main", "len", "BadSeq", "BadSequence", "getattr", "tuple", "open", "range", "hasattr"], "class_names": ["BadSequence", "ResourceTest", "BadSeq"], "class_method_calls": ["resource.RUSAGE_THREAD", "self.assertIsInstance", "support.requires_linux_version", "sys.platform", "unittest.skipUnless", "self.assertEqual", "support.import_module", "f.flush", "self.assertGreaterEqual", "contextlib.suppress", "resource.getrlimit", "resource.RUSAGE_BOTH", "f.write", "support.TESTFN", "resource.getrusage", "resource.RLIMIT_AS", "self.assertRaises", "unittest.skipIf", "resource.RUSAGE_SELF", "support.unlink", "support.run_unittest", "resource.RLIMIT_FSIZE", "resource.RUSAGE_CHILDREN", "resource.RLIM_INFINITY", "resource.RLIMIT_CPU", "time.sleep", "resource.prlimit", "resource.getpagesize", "resource.setrlimit", "f.close", "unittest.TestCase"]}, "test_spec.py": {"libraries": ["test.support.CleanImport", "unittest", "os.path", "sys", "warnings", "pathlib"], "function_names": ["test_has_location_setter", "exec_module", "get_filename", "test_package_is_package", "test_default_is_package_false", "test_spec_from_file_location_default_bad_suffix", "test_module___spec___no_origin_no_loader", "test_module___loader___module_repr", "test_load_replaced", "test_spec_from_file_location_path_like_arg", "__init__", "test_cached_with_origin_not_location", "test_cached_sourceless", "test_equality_location", "test_spec_from_loader_is_package_with_loader_false", "test_module_with_file", "test_load_legacy_attributes", "test_cached_source_missing_cache_tag", "test_reload_modified", "test_spec_from_file_location_smsl_default_bad_is_package", "test_cached_set", "create_module", "test_load_failed", "test_spec_from_file_location_smsl_none", "test_spec_from_loader_is_package_false", "test_spec_from_loader_is_package_true", "load_module", "module_repr", "test_spec_from_loader_is_package_with_loader_true", "test_spec_from_loader_origin", "test_spec_from_file_location_relative_path", "test_spec_from_file_location_smsl_default_not_package", "test_spec_from_loader_default", "test_module___spec___location", "test_spec_from_loader_default_with_file_loader", "test_load_legacy_attributes_immutable", "test_load_legacy", "test_spec_from_file_location_default_without_location", "test_spec_from_file_location_loader_no_location", "test_spec_from_loader_default_with_bad_is_package", "setUp", "test_spec_from_loader_is_package_false_with_fileloader", "test_spec_from_file_location_loader_no_location_bad_get_filename", "__repr__", "test_default", "_is_package", "test_spec_from_file_location_smsl_default", "test_cached_no_origin", "test_cached_source_unknown_suffix", "test_package", "test_module___spec___no_origin", "_get_filename", "test_module_no_name", "test_default_is_package_true", "test_load", "test_spec_from_file_location_smsl_empty", "test_spec_from_loader_origin_and_is_package", "test_reload_extra_attributes", "__getattr__", "test_inequality_incomplete", "test_equality", "test_reload_legacy", "test_load_failed_removed", "test_spec_from_file_location_smsl_default_no_is_package", "test_module_no_file", "test_reload_init_module_attrs", "test_module___loader___module_repr_bad", "test_module___spec__", "test_spec_from_file_location_smsl_not_empty", "test_exec", "test_spec_from_file_location_default", "test_cached_source", "bootstrap", "is_package", "test_inequality", "test_spec_from_file_location_loader_no_location_no_get_filename", "test_spec_from_loader_is_package_true_with_fileloader", "test_reload", "test_default_no_loader", "test_module_no_file_no_loader"], "function_calls": ["AttributeError", "object", "NewLoader", "Loader", "TestLoader", "LegacyLoader", "ImmutableLoader", "ReplacingLoader", "type", "CleanImport", "FailedLoader", "hasattr"], "class_names": ["ModuleSpecMethodsTests", "NewLoader", "Loader", "TestLoader", "LegacyLoader", "FactoryTests", "ReplacingLoader", "ImmutableLoader", "ModuleReprTests", "ModuleSpecTests", "FailedLoader"], "class_method_calls": ["self.assertIsInstance", "loaded.__loader__", "loaded.eggs", "self.cached", "self.EGGS", "self._is_package", "self.assertEqual", "self.assertNotEqual", "spec.loader", "test_util.import_importlib", "sys.modules", "self.fileloader", "os.getcwd", "loaded.__package__", "self.assertIs", "spec.origin", "loaded.__name__", "self.name", "self.package", "self.HAM", "self.loader", "self.assertNotIn", "warnings.catch_warnings", "self.pkgloader", "module.eggs", "self.assertRaises", "warnings.simplefilter", "loaded.__spec__", "spec.has_location", "self.util", "self.loc_spec", "spec.name", "module.ham", "self.bootstrap", "frozen_util.module_for_loader", "self.path", "spec.loader_state", "spec.submodule_search_locations", "unittest.main", "module.__name__", "test_util.test_both", "os.path", "self.machinery", "spec.parent", "self.init", "self._get_filename", "loaded.available", "sys.implementation", "self.assertTrue", "spec.cached", "self.spec", "loaded.ham", "self.assertFalse", "pathlib.PurePath", "self.module"]}, "test_windows.py": {"libraries": ["unittest", "re", "winreg.HKEY_CURRENT_USER", "winreg.EnumKey", "winreg.REG_SZ", "importlib._bootstrap_external._path_join", "distutils.util.get_platform", "winreg.OpenKey", "sys", "winreg.CreateKey", "winreg.SetValue", "winreg.KEY_ALL_ACCESS", "contextlib.contextmanager", "util.temp_module", "test.support", "os", "winreg.DeleteKey", "winreg.CloseKey"], "function_names": ["test_tagged_suffix", "test_find_module_missing", "setup_module", "test_path_join", "test_module_not_found", "delete_registry_tree", "check_join", "test_module_found", "test_find_spec_missing"], "function_calls": ["DeleteKey", "SetValue", "_path_join", "setup_module", "temp_module", "CloseKey", "delete_registry_tree", "get_platform", "CreateKey", "EnumKey", "OpenKey"], "class_names": ["WindowsExtensionSuffixTests", "WindowsBootstrapPathTests", "WindowsRegistryFinderTests"], "class_method_calls": ["self.assertLess", "sys.platform", "root.format", "self.check_join", "unittest.skipUnless", "os.getpid", "self.assertEqual", "support.import_module", "test_util.import_importlib", "self.assertIs", "self.assertIn", "actual.casefold", "self.test_module", "re.sub", "expected.casefold", "suffixes.index", "self.assertIsNone", "self.assertIsNot", "test_util.test_both", "os.path", "self.machinery", "sys.version_info", "unittest.TestCase", "machinery.WindowsRegistryFinder"]}, "test_zip.py": {"libraries": ["unittest", "contextlib.ExitStack", "importlib.resources.path", "importlib.metadata.distributions", "importlib.metadata.entry_points", "sys", "importlib.metadata.files", "importlib.metadata.version", "importlib.metadata.PackageNotFoundError", "importlib.metadata.distribution", "test.support.requires_zlib"], "function_names": ["test_files", "test_zip_entry_points", "test_case_insensitive", "setUp", "test_zip_version", "test_zip_version_does_not_match", "test_one_distribution", "test_missing_metadata"], "function_calls": ["list", "len", "version", "str", "distributions", "ExitStack", "dict", "path", "distribution", "entry_points", "files"], "class_names": ["TestZip", "TestEgg"], "class_method_calls": ["entry_point.value", "self.resources", "sys.path", "self.root", "self.addCleanup", "self.assertIsNone", "self.assertEqual", "file.dist", "unittest.TestCase", "self.assertRaises"]}, "test_index.py": {"libraries": ["unittest", "test.support", "operator"], "function_names": ["test_index", "setUp", "test_large_longs", "test_slice_bug7532", "test_inplace_repeat", "__repr__", "__eq__", "__index__", "test_int_subclass_with_index", "test_error", "__init__", "test_wrappers", "test_sequence_repeat", "test_range", "__len__", "test_setdelitem", "test_getitem", "test_index_returns_int_subclass", "__mul__", "test_subclasses", "test_slice", "test_basic", "test_repeat", "__getitem__"], "function_calls": ["BadInt", "bytearray", "list", "len", "GetItem", "NewSeq", "str", "slice", "MyInt", "int", "type", "TrapInt", "newstyle", "BadInt2", "range", "repr"], "class_names": ["StringTestCase", "BadInt", "ByteArrayTestCase", "GetItem", "NewSeq", "BaseTestCase", "RangeTestCase", "MyInt", "TupleTestCase", "NewSeqTestCase", "SeqTestCase", "OverflowTestCase", "TrapInt", "newstyle", "BytesTestCase", "BadInt2", "ListTestCase"], "class_method_calls": ["self._list", "slc.indices", "self.assertEqual", "self.n2", "self.assertIs", "self.pos", "check_slc.indices", "obj.seq", "my_int.__index__", "lst.__delitem__", "operator.index", "self.o2", "n.ind", "self.o", "self.assertRaises", "support.MAX_Py_ssize_t", "self.assertWarns", "self.n", "self.ind", "self.seq", "unittest.main", "lst.__imul__", "lst.__setitem__", "self.__class__", "self.neg", "unittest.TestCase"]}, "test_inspect.py": {"libraries": ["_testcapi", "test.inspect_fodder", "test.test_import._ready_to_import", "unittest.mock", "warnings", "test.support.DirsOnSysPath", "test.support", "test.support.run_unittest", "unicodedata", "unittest", "concurrent.futures.ThreadPoolExecutor", "io", "os.path.normcase", "types", "test.support.MISSING_C_DOCSTRINGS", "datetime", "textwrap", "functools.partial", "collections", "test.support.script_helper.assert_python_ok", "test.support.cpython_only", "os", "functools", "builtins", "_pickle", "abc.ABCMeta", "inspect", "shutil", "functools.partialmethod", "types.ModuleType", "test.support.TESTFN", "abc.abstractmethod", "inspect_fodder3", "importlib", "sys", "pickle", "test.inspect_fodder2", "test.support.script_helper.assert_python_failure", "linecache"], "function_names": ["test_signature_parameter_positional_only", "test_getmembers_descriptors", "test_abuse_done", "test_builtins", "call", "test_getfullargspec_signature_annos", "test_multiline_sig", "test_signature_parameter_equality", "test_name_resolution", "test_descriptor", "test_class_as_property", "test_getfullargspec_builtin_func_no_signature", "test_inherited_classattribute", "test_classify_VirtualAttribute", "test_getgeneratorlocals_error", "test_varkw_only", "number_generator", "test_signature_from_callable_class", "Y", "test_signature_parameter_object", "test_signature_on_partial", "test_signature_bind_kwonly", "test_findsource_without_filename", "test_property", "signature", "test_created", "test_signature_equality", "_isdesc", "assertInspectEqual", "f", "test_signature_hashable", "getp", "test_trace", "test_getcoroutinelocals", "test_instance_attr", "test_getsource_on_code_object", "__new__", "test_argspec_api_ignores_wrapped", "test_signature_on_non_function", "yield_one", "test_signature_immutability", "__repr__", "test_iscoroutine", "test_frame", "test_unhashable", "test_getfile_builtin_module", "assertEqualCallArgs", "test_custom_getattr", "test_signature_strip_non_python_syntax", "p", "func", "test_getmembers_with_buggy_dir", "test_varargs", "unsorted_keyword_only_parameters_fn", "a_property", "test_signature_on_method", "test_signature_on_class_without_init", "bar", "test_suspended", "test_signature_str_positional_only", "_strip_non_python_syntax", "test_unwrap_one", "test_signature_on_builtin_class", "m2", "__mro__", "assertFullArgSpecEquals", "test_nested_func", "eggs", "__dir__", "test_args_kwargs_only", "__eq__", "makeCallable", "test_signature_bind_var", "test_signature_wrapped_bound_method", "assertSourceEqual", "revise", "test_signature_bound_arguments_unhashable", "test_getclasses", "foo", "test_no_dict_no_slots", "test_signature_bind_posonly_kwargs", "func1", "test_getsourcefile", "__module__", "test_replacing_decorator", "wrapper", "m1", "test_classify_newstyle", "test_classify_DynamicClassAttribute", "test_signature_from_callable_python_obj", "istest", "__dict__", "test_getclosurevars_error", "test_slot", "test_proceed_with_fake_filename", "test_signature_bind_positional_only", "make_adder", "test_getmembers_VirtualAttribute", "test_metaclass_with_descriptor", "test_isabstract_during_init_subclass", "test_one_liner_followed_by_non_name", "running_check_generator", "test_inherited", "test_classify_VirtualAttribute_multi_classes", "test_getcomments", "each", "test_signature_bound_arguments_pickle", "test_previous_frame", "__set__", "test_nested_class", "test_signature_bind_just_args", "test_metaclass_dict_as_property", "func2", "test_signature_bound_arguments_apply_defaults", "test_anonymous", "test_no_dict_no_slots_instance_member", "test_getclosurevars_empty", "test_signature_without_self", "test_nonlocal_vars", "static_method", "test_signature_on_fake_partialmethod", "test_isroutine", "test_getsource", "pred_wrapper", "test_signature_on_wargs", "__get__", "test_metaclass", "test_method_in_dynamic_class", "test_descriptor_raises_AttributeError", "class_method", "test_method_closure", "test_getfile_broken_repr", "test_signature_from_callable_builtin_obj", "test_signature_object_pickle", "test_classify_class_attrs_with_buggy_dir", "test_with_comment_instead_of_docstring", "test_signature_on_staticmethod", "test_getsource_unwrap", "test_getmembers_method", "test_getgeneratorlocals_empty", "test_isawaitable", "test_generator_closure", "f5", "test_threeline_lambda", "__init_subclass__", "test_signature_parameter_kinds", "test_recursion_limit", "attrs_wo_objs", "assertArgSpecEquals", "less_than", "test_signature_bind_with_self_arg", "_getAssertEqualParams", "test_closed_after_immediate_exception", "test_range_toplevel_frame", "wrapped", "add", "test_signature_on_classmethod", "test_signature_on_decorated_builtins", "test_signature_bind_args_and_kwargs", "test_mro_as_property", "number_coroutine", "test_custom_descriptors", "test_signature_bound_arguments_repr", "__init__", "f6", "test_signature_on_noarg", "test_getfullargspec_definition_order_preserved_on_kwonly", "test_twoline_indented_lambda", "test_getsource_on_method", "test_callable", "m", "test_errors", "test_getfullargspec_builtin_func", "test_with_comment", "test_signature_on_class", "_generatorstate", "test_getfile_builtin_function_or_method", "test_getframeinfo_get_first_line", "test_getargspec_method", "x", "test_findsource_code_in_linecache", "test_signature_on_decorated", "make_set", "test_running", "test_stack", "test_signature_bind_args_and_varargs", "test_getfile_builtin_class", "test_signature_on_builtins_no_signature", "test_getmodule_recursion", "test_class", "test_class_method", "test_dict_as_property", "test_isabstract", "test_classVirtualAttribute", "test_builtins_as_module", "test_keyword_only", "test_signature_bind_varargs_order", "test", "test_getdoc_inherited", "test_signature_get_bound_param", "test_details", "test_builtins_fallback", "test_signature_bind_vararg_name", "curry", "test_classmethod", "__wrapped__", "test_signature_functionlike_class", "test_getdoc", "test_signature_on_callable_objects", "test_toplevel_class", "test_decorator_with_lambda", "spam", "test_only_source", "test_oneline_lambda", "test_getsource_reload", "test_isclass", "__getattr__", "assertEqualException", "_nonlocal_vars", "test_cleandoc", "test_getfullargspec_builtin_methods", "gen", "decorator", "test_qualname_source", "test_multiple_features", "test_signature_on_mangled_parameters", "test_onelinefunc", "signatures_with_lexicographic_keyword_only_parameters", "s", "test_signature_on_partialmethod", "test_excluding_predicates", "test_getfile_class_without_module", "test_inherited_slots", "test_builtins_as_dict", "test_findsource_binary", "test_signature_bind_arguments", "test_easy_debugging", "check_method", "wrapper_like", "test_getmodule", "test_plain", "instance_method", "test_range_traceback_toplevel_frame", "test_signature_on_builtins", "function", "gen_coroutine_function_example", "test_class_async_method", "test_unwrap_several", "test_python_function_override_signature", "test_newstyle_mro", "test_module", "test_signature_object", "test_getfullargspec_signature_attr", "tearDown", "gencoro", "test_signature_parameter_implicit", "test_args_only", "test_one_liner_dedent_non_name", "test_basic", "test_signature_definition_order_preserved_on_kwonly", "test_get_slot_members", "test_signature_replace_anno", "test_lambda_in_list", "test_classify_metaclass_class_attribute", "wrapped_foo_call", "test_signature_bind_empty", "__await__", "test_signature_str", "__call__", "test_cycle", "test_signature_bind_just_kwargs", "__bool__", "m1d", "_coroutinestate", "test_stop", "__delete__", "test_functions", "test_signature_bound_arguments_equality", "test_twolinefunc", "test_classAttribute", "generator_function_example", "setUp", "test_wrapped_decorator", "test_slots", "test_findsource_with_out_of_bounds_lineno", "test_main", "__class__", "test_signature_on_lambdas", "test_signature_from_functionlike_object", "test_getfile", "sourcerange", "test_metaclass_with_metaclass_with_dict_as_property", "test_closed_after_exhaustion", "check_y_combinator", "c", "test_signature_parameter_replace", "test_finddoc", "test_manyargs", "test_builtins_have_signatures", "test_signature_parameter_immutability", "get", "test_getfullargspec", "test_getargspec", "test_signature_on_complex_args", "test_getfunctions", "test_signature_bind_implicit_arg", "ham", "_private_globals", "test_staticmethod", "test_getgeneratorlocals", "g", "monkey", "test_custom_object_dict", "test_signature_on_wkwonly", "test_unbound_method", "test_signature_parameter_hashable", "test_classify_overrides_bool", "test_varkw", "test_classify_builtin_types"], "function_calls": ["sorted", "assert_python_ok", "getattr", "other", "async_generator_function_example", "number_coroutine", "iter", "gen_coroutine_function_example", "staticmethod", "dict", "open", "Exception", "mk", "_BrokenMethodDescriptor", "assert_python_failure", "partial", "Spam", "dir", "int", "_orig_isdesc", "CustomGetattr", "gencoro", "len", "make_adder", "test_callable", "_ready_to_import", "MyParameter", "NotImplementedError", "predicate", "exec", "OtherThing", "S", "object", "number_generator", "_foo", "Y", "Something", "running_check_generator", "le", "Bar", "coroutine", "ClassExample", "Foo", "each", "str", "NonDataDescriptor", "EqualsToAll", "list", "getter", "DataDescriptor2", "finddoc", "f", "compile", "P", "DataDescriptor1", "yield_one", "classmethod", "descriptor", "vars", "NotFuture", "isinstance", "test_main", "pred_wrapper", "B", "curry", "getlines", "tuple", "coroutine_function_example", "NTimesUnwrappable", "hash", "run_unittest", "range", "Future", "ErrorRepr", "C", "property", "set", "type", "p", "func", "eval", "funclike", "hasattr", "ThisWorksNow", "print", "DirsOnSysPath", "_nonlocal_vars", "gen", "decorator", "repr", "AttributeError", "super", "signatures_with_lexicographic_keyword_only_parameters", "A", "attrs_wo_objs", "Thing", "_BrokenDataDescriptor", "Custom", "ModuleType", "Test", "next", "revise", "DataDescriptor0", "pred", "g", "MySignature", "normcase", "NoBool", "test_unbound_method", "check_method", "partialmethod", "callable"], "class_names": ["T", "TestReload", "TestBuggyCases", "CMM", "TestSignatureDefinitions", "TestGetGeneratorState", "TestInterpreterStack", "TestSignaturePrivateHelpers", "_BrokenMethodDescriptor", "VA", "Meta2", "Spam", "M", "CustomGetattr", "ConcreteGrandchild", "OtherOtherThing", "MyParameter", "AbstractChild", "TestGetCoroutineState", "TestBoundArguments", "OtherThing", "C_init", "P2", "Something", "Bar", "Empty", "CM", "Meta3", "ClassExample", "TestIsDataDescriptor", "Foo", "NonDataDescriptor", "EqualsToAll", "TestGetcallargsUnboundMethods", "AbstractGrandchild", "C_new", "EmptyTrait", "TestGettingSourceOfToplevelFrames", "DataDescriptor2", "Meta", "D", "Class1", "TestGetcallargsFunctions", "TestGetClosureVars", "TestSignatureObject", "P", "Base", "Class2", "DataDescriptor1", "descriptor", "MetaMeta", "NotFuture", "SlotUser", "TestUnwrap", "TestParameterObject", "TestSignatureBind", "B", "MetaP", "AbstractClassExample", "NTimesUnwrappable", "AbstractChecker", "Future", "ErrorRepr", "C", "Ham", "Wrapped", "funclike", "TestNoEOL", "TestDecorators", "Slotted", "TestOneliners", "IsTestBase", "ThisWorksNow", "P4", "TestBlockComments", "TestPredicates", "sub", "Meta1", "Propertied", "TestRetrievingSourceCode", "HasNB", "A", "Thing", "_BrokenDataDescriptor", "TestClassesAndFunctions", "GetSourceBase", "Custom", "TestGetattrStatic", "TestMain", "Test", "DataDescriptor0", "TestGetcallargsMethods", "Class", "MySignature", "NoBool", "foo", "meta", "P3"], "class_method_calls": ["Test.foo", "inspect._finddoc", "test.__signature__", "git.abuse", "min.__call__", "mod2.tll", "self.executed", "Foo.bar", "m.x", "myparams.values", "shutil.rmtree", "inspect.Signature", "pickle.HIGHEST_PROTOCOL", "p.default", "linecache.getlines", "gen_coro.close", "mod.fr", "sig.bind_partial", "obj.__text_signature__", "self._private_globals", "self.src_before", "p.empty", "source.splitlines", "inspect.Attribute", "mod.MalodorousPervert", "func.__name__", "mod2.gone", "inspect.GEN_CREATED", "func.__text_signature__", "self.assertNotIn", "self.__code__", "self.subTest", "inspect.isgenerator", "self.predicates", "p2.annotation", "Thing.x", "fp.read", "inspect.getclasstree", "self.assertIsNot", "collections.OrderedDict", "module.__name__", "os.path", "int.__add__", "self.coroutine", "param.empty", "VA.__dict__", "A.f4", "Spam.foo", "sig.return_annotation", "sig.parameters", "mod.lobbest", "inspect.findsource", "self.assertWarns", "ba.kwargs", "mod.eggs", "p.foo", "ba.apply_defaults", "sys.getrecursionlimit", "result.kwargs", "inspect.CORO_CLOSED", "HasNB.dd", "self.__kwdefaults__", "_testcapi.docstring_with_signature_but_no_doc", "self.maxDiff", "self.inst", "dict.__delitem__", "inspect.isgeneratorfunction", "self.assertIsNotNone", "coro.close", "mod2.a", "inspect.isasyncgenfunction", "self.signature", "mod2.keyworded", "mod2.keyword_only_arg", "func.__code__", "property.__delete__", "int.real", "self.fail", "manual_sig.replace", "mod2.func77", "spec.defaults", "p2.default", "functools.partialmethod", "textwrap.dedent", "record.code_context", "isabstract_checks.clear", "x.a", "inspect.ismemberdescriptor", "P.KEYWORD_ONLY", "Y.g_ref", "os.mkdir", "mod2.oll", "param.annotation", "types.DynamicClassAttribute", "e.exception", "Wrapped.__wrapped__", "mod2.func114", "inspect.getsourcefile", "inspect.getfile", "warnings.catch_warnings", "self.sourcerange", "not_fut.__await__", "self.assertEqualCallArgs", "self.assertRaises", "self._generatorstate", "func.__annotations__", "inspect.isawaitable", "m.__file__", "co.co_filename", "module.__file__", "os.extsep", "_testcapi.docstring_with_signature_with_defaults", "self.__name__", "params.values", "Ham.foo", "unittest.mock", "inspect.getcallargs", "func1.__wrapped__", "dict.fromkeys", "inspect.getmodule", "SlotUser.distance", "p2.replace", "mod2.wrapped", "io.StringIO", "A.f2", "inspect.isgetsetdescriptor", "self.assertRegex", "p2.empty", "self.makeCallable", "self.x", "inspect.iscoroutine", "self.assertIsNone", "p2.kind", "module.__cached__", "ba.args", "foo.__signature__", "sig.replace", "self.generator", "sig_pickled.parameters", "self.tempdir", "inspect.formatargspec", "builtin_func._builtinmock", "inspect.ismodule", "A.f1", "functools.partial", "param.name", "Spam.g", "wrapped_foo_call.__wrapped__", "inspect.getargvalues", "ba3.arguments", "inspect.ismethod", "record.frame", "inspect.CORO_SUSPENDED", "git.tr", "sig.foo", "inspect.GEN_RUNNING", "self.__defaults__", "meta.__dict__", "mod2.ClassWithMethod", "self.assertInspectEqual", "io.BytesIO", "ns.pop", "fl.__defaults__", "self.istest", "self.spam", "frame_info.code_context", "inspect.getfullargspec", "x.__name__", "inspect.isabstract", "signature.parameters", "e_append.exception", "p.name", "src.read", "os.stat", "B.f", "foo.a", "self.assertNotEqual", "inspect.isbuiltin", "support.optim_args_from_interpreter_flags", "predicate.__name__", "self.assertIs", "self.func", "mod.ParrotDroppings", "self.__annotations__", "int.__doc__", "p2.name", "inspect.iscode", "foo.replace", "inspect.unwrap", "inspect.cleandoc", "p.annotation", "mod2.func88", "Parameter.POSITIONAL_ONLY", "func2.__wrapped__", "Propertied.a_property", "inspect._signature_strip_non_python_syntax", "inspect.classify_class_attrs", "test.called", "self.assertTrue", "self.assertSourceEqual", "mod2.manyargs", "functools.wraps", "sig.empty", "sig.bind", "inspect.Parameter", "foo.__dict__", "kwargs.replace", "inspect.isasyncgen", "P.POSITIONAL_ONLY", "e_abs.exception", "inspect.getdoc", "mod2.cls82", "param.default", "inspect.getattr_static", "no_signature.add", "P.POSITIONAL_OR_KEYWORD", "result.arguments", "mod2.annotated", "Foo.__dict__", "self.fodderModule", "MySignature.from_callable", "self.assertFullArgSpecEquals", "types.FunctionType", "isabstract_checks.append", "mod.StupidGit", "inspect.getclosurevars", "mod2.all_markers_with_args_and_kwargs", "f.write", "tb.tb_frame", "P.VAR_KEYWORD", "inspected_src.splitlines", "inspect.isdatadescriptor", "mod2.onelinefunc", "inspect.getargspec", "record.lineno", "inspect.getgeneratorlocals", "unicodedata.__file__", "inspect.GEN_CLOSED", "record.index", "mod2.twolinefunc", "mod.spam", "ba.arguments", "d.dump", "modfile.endswith", "linecache.cache", "make_set.__code__", "inspect.isframe", "self.assertRaisesRegex", "mod2.multiline_sig", "importlib.import_module", "self.assertIn", "coro.send", "inspect.getcoroutinestate", "datetime.timedelta", "self.src_after", "self._next", "p2.KEYWORD_ONLY", "unittest.skipIf", "other.__name__", "inspect.getcomments", "sys.exc_info", "Meta1.__dir__", "_pickle.Pickler", "mod2.all_markers_with_defaults", "out.decode", "pickle.dumps", "type.__call__", "int.to_bytes", "mod2.all_markers", "self.cls", "self.assertEqual", "A.f3", "m.__loader__", "inspect.iscoroutinefunction", "inspect.ismethoddescriptor", "mod2.with_comment", "wrapper.__wrapped__", "inspect.GEN_SUSPENDED", "mod2.func69", "instance.executed", "Foo.__call__", "Thing.executed", "Slotted.foo", "inspect.formatargvalues", "A.__dict__", "descriptor.__set__", "signature.kwonlyargs", "m.__dict__", "self._x", "mod.__file__", "A.m", "self.assertIsInstance", "b.f", "int.from_bytes", "inspect.isclass", "p.replace", "inspect.CORO_CREATED", "self.assertEqualException", "inspect.istraceback", "Spam.ham", "C.pham", "spec.annotations", "src.write", "p2.POSITIONAL_OR_KEYWORD", "self._getAssertEqualParams", "ns.items", "pickle.loads", "inspect.isroutine", "self._strip_non_python_syntax", "P.VAR_POSITIONAL", "list.append", "sys.maxsize", "test.__annotations__", "inspect.isfunction", "inspect.getmro", "inspect.signature", "func.__kwdefaults__", "unittest.TestCase", "self.assertFalse", "mod.currentframe", "sys.flags", "inspect.getframeinfo", "record.function", "mod.st", "inspect.getcoroutinelocals", "wrapper.__signature__", "self.call", "C.ham", "mysig.parameters", "self.assertArgSpecEquals", "err.decode", "warnings.simplefilter", "functools.lru_cache", "bytes.maketrans", "mod2.anonymous", "Meta2.__dir__", "types.coroutine", "record.filename", "mod.WhichComments", "inspect.getgeneratorstate", "inspect._signature_get_bound_param", "param.kind", "mod2.method_in_dynamic_class", "mod.FesteringGob", "sys.modules", "self.source", "func.__defaults__", "kwargs.get", "inspect.ClosureVars", "_testcapi.docstring_no_signature", "thing.x", "inspect.getsource", "func2.stop_here", "self._coroutinestate", "inspect.getmembers", "foo._partialmethod", "self.n", "mod2.tlli", "SlotUser.power", "mod2.cls135", "mod.tb", "mod2.real", "Thing.__dict__", "new_params.values", "p.kind", "p.append", "func.__wrapped__"]}, "test_int.py": {"libraries": ["unittest", "time", "test.test_grammar.INVALID_UNDERSCORE_LITERALS", "test.test_grammar.VALID_UNDERSCORE_LITERALS", "sys", "test.support", "array.array"], "function_names": ["test_int_returns_int_subclass", "check", "test_int_subclass_with_int", "_other_base_helper", "setUp", "test_max_str_digits", "test_no_args", "test_int_from_other_bases", "test_underscores_ignored", "test_int_base_limits", "__index__", "test_int_base_indexable", "test_keyword_args", "test_int_subclass_with_index", "test_small_ints", "test_error_message", "test_int_memoryview", "__int__", "__init__", "test_non_numeric_input_types", "test_denial_of_service_prevented_int_to_str", "test_power_of_two_bases_unlimited", "test_string_float", "test_sign_not_counted", "tearDown", "test_int_base_bad_types", "__trunc__", "test_issue31619", "test_denial_of_service_prevented_str_to_int", "test_basic", "test_underscores", "test_intconversion", "test_max_str_digits_edge_cases", "test_disabled_limit"], "function_calls": ["BadInt", "check", "BadIndex", "ClassicMissingMethods", "memoryview", "BadInt2", "MyIndex", "TruncReturnsNonInt", "array", "repr", "isinstance", "IntSubclass", "Foo0", "Index", "super", "str", "MyInt", "BadIndex2", "MyIndexable", "range", "TruncReturnsIntSubclass", "Intable", "int", "type", "TruncReturnsNonIntegral", "f", "eval", "ExceptionalTrunc", "NonIntegral", "len", "TruncReturnsBadIndex", "any", "CustomStr", "JustTrunc", "int_class", "get_time", "IntOverridesTrunc", "TruncReturnsBadInt", "MissingMethods"], "class_names": ["CustomByteArray", "BadInt", "IntStrDigitLimitsTests", "BadIndex", "TruncReturnsNonIndex", "IntTestCases", "ClassicMissingMethods", "BadInt2", "MyIndex", "TruncReturnsNonInt", "IntSubclass", "Foo0", "Classic", "Index", "MyInt", "BadIndex2", "MyIndexable", "TruncReturnsIntSubclass", "Intable", "TruncReturnsNonIntegral", "ExceptionalTrunc", "NonIntegral", "CustomStr", "TruncReturnsBadIndex", "JustTrunc", "CustomBytes", "IntSubclassStrDigitLimitsTests", "IntOverridesTrunc", "TruncReturnsBadInt", "MissingMethods"], "class_method_calls": ["self.assertIsInstance", "time.monotonic", "self.assertLess", "self.value", "self.assertEqual", "cm.exception", "self.assertLessEqual", "self.assertRaisesRegex", "self.check", "self.assertIs", "err.exception", "unittest.SkipTest", "self.int_class", "self.assertIn", "self.fail", "sys.set_int_max_str_digits", "b.decode", "self._other_base_helper", "lit.replace", "self.subTest", "self.assertRaises", "self.assertWarns", "time.process_time", "self.assertGreater", "unittest.main", "sys.maxsize", "self._previous_limit", "support.cpython_only", "sys.get_int_max_str_digits", "factories.append", "unittest.TestCase", "support.adjust_int_max_str_digits"]}, "test_int_literal.py": {"libraries": ["unittest"], "function_names": ["test_hex_unsigned", "test_hex_baseline", "test_bin_unsigned", "test_oct_unsigned", "test_oct_baseline", "test_bin_baseline"], "function_calls": [], "class_names": ["TestHexOctBin"], "class_method_calls": ["unittest.TestCase", "self.assertEqual", "unittest.main"]}, "test_io.py": {"libraries": ["abc", "_testcapi", "random", "_pyio", "warnings", "test.support", "sysconfig", "array", "itertools.cycle", "unittest", "io", "threading", "collections.deque", "signal", "codecs", "itertools.count", "weakref", "locale", "test.support.script_helper.assert_python_ok", "test.support.script_helper.run_python_until_end", "test.support.FakePath", "os", "time", "errno", "collections.UserList", "sys", "pickle", "ctypes"], "function_names": ["test_fspath_support", "pipe_writer", "_check", "test_device_encoding", "test_writelines_error", "_check_warn_on_dealloc_fd", "test_writes_and_truncates", "test_interleaved_readline_write", "test_seek_with_encoder_state", "test_encoded_writes", "test_errors_property", "test_seeking_too", "test_RawIOBase_io_in_pyio_match", "test_buffering", "test_io_after_close", "decode", "text_writer", "test_attributes", "test_interrupted_write_buffered", "test_line_buffering", "test_write_non_blocking", "test_read_non_blocking", "test_writer_close_error_on_close", "multi_line_test", "test_issue2282", "test_default_encoding", "test_IOBase_destructor", "pop_written", "test_append_mode_tell", "test_writes", "test_flush", "__init__", "_check_create_at_shutdown", "test_unbounded_file", "test_writes_and_read1s", "test_encoding_errors_reading", "test_next_nonsizeable", "test_seek_bom", "_readinto", "test_with_open", "_check_base_destructor", "test_flush_and_peek", "test_buffered_file_io", "test_bad_opener_other_negative", "mutate", "getstate", "test_read1", "test_close_and_closed", "test_write", "seekable", "test_detach", "test_create_at_shutdown_with_encoding", "tearDown", "test_writelines", "test_open_allargs", "test_interrupted_write_text", "__next__", "test_flush_and_read", "test_large_file_ops", "write_ops", "bad_close", "test_translate", "alarm_interrupt", "badopener", "test_max_buffer_size_removal", "check_interrupted_read_retry", "test_reconfigure_write_non_seekable", "test_truncate_after_write", "test_optional_abilities", "test_seeking", "check_interrupted_write", "test_writeable", "isatty", "buffered_rw_pair", "writable", "test_readonly_attributes", "test_readinto_array", "test_bufio_write_through", "test_read_nonbytes", "check_reentrant_write", "test_constructor_with_not_writeable", "test_issue1395_3", "test_IOBase_finalize", "_check_warn_on_dealloc", "test_nonblock_pipe_write_smallbuf", "alarm1", "test_daemon_threads_shutdown_stdout_deadlock", "test_BufferedIOBase_destructor", "test_rawio_write_through", "alarm2", "test_readlines", "test_args_error", "_seekrel", "test_RawIOBase_destructor", "test_readinto", "test_write_after_readahead", "test_write_overflow", "test_seekable", "test_read_byteslike", "test_RawIOBase_read", "text_reader", "__setattr__", "test_illegal_encoder", "_peek", "test_RawIOBase_pyio_in_io_match", "test_reader_writer_close_error_on_close", "test_issue1395_5", "test_array_writes", "test_multi_close", "_to_memoryview", "test_destructor", "test_opener", "test_encoding_errors_writing", "test_weakref_clearing", "test_create_at_shutdown_without_encoding", "alarm_handler", "test_close_error_on_close", "test_newlines_input", "test_reconfigure_encoding_read", "test_abc_inheritance_official", "_read1", "bad_flush", "seek", "test_context_manager", "__del__", "test_rwpair_cleared_before_textio", "test_reader_close_error_on_close", "test_illegal_decoder", "_default_chunk_size", "tell", "check_flush_error_on_close", "test_read1_arbitrary", "test_interrupted_write_retry_text", "test_newline_decoder", "bad_write", "f", "test_create_writes", "test_truncate_after_read_or_write", "bufio", "test_basic_io", "buffered_writer", "test_nonnormalized_close_error_on_close", "test_closefd_attr", "test_multibyte_seek_and_tell", "test_newline_bytes", "test_interrupted_read_retry_text", "test_read", "test_decoder", "test_buffer_freeing", "test_abcs", "_read", "test_abc_inheritance", "test_closefd", "setUp", "test_no_closefd_with_filename", "test_unseekable", "test_reconfigure_write_fromascii", "test_invalid_args", "test_initialization", "test_invalid_operations", "__repr__", "test_interrupted_write_retry_buffered", "test_read_on_closed", "test_writes_and_peek", "test_flush_and_write", "_seekabs", "test_write_rewind_write", "setstate", "test_issue1395_1", "test_issue1395_2", "test_reentrant_write_buffered", "buffered_random", "_decode_bytewise", "test_newlines_output", "test_error_through_destructor", "test_truncate", "test_blockingioerror", "_check_decode", "test_daemon_threads_shutdown_stderr_deadlock", "test_raw_bytes_io", "test_seek_and_tell", "test_close_assert", "test_reconfigure_line_buffering", "test_RawIOBase_readall", "test_read_all", "test_encoding", "test_telling", "readinto", "check_interrupted_write_retry", "close", "lookupTestDecoder", "test_internal_buffer_size", "test_fileno", "on_alarm", "test_threads_write", "test_non_text_encoding_codecs_are_rejected", "test_issue25862", "_test_nonblock_pipe_write", "test_buffered_readinto_mixin", "test_slow_close_from_thread", "test_writes_and_flushes", "test_seek_and_tell_with_data", "test_nonbuffered_textio", "test_raw_file_io", "test_writes_and_seeks", "test_bad_opener_negative_1", "test_write_and_rewind", "test_readable", "cleanup_fds", "test_warn_on_dealloc_fd", "readline", "_make_very_illegal_wrapper", "test_read_past_eof", "reset", "test_reconfigure_write_through", "test_sizeof", "test_pickling", "fileno", "test_reconfigure_newline", "check_newline_decoding", "test_misbehaved_io_read", "buffered_reader", "check", "read_ops", "writer_close", "readable", "test_warn_on_dealloc", "read1", "large_file_ops", "test_no_extraneous_read", "test_writes_and_reads", "test_readinto_buffer_overflow", "test_TextIOBase_destructor", "check_daemon_threads_shutdown_deadlock", "check_newline_decoding_utf8", "test_repr", "test_isatty", "test_readinto1", "test_close_flushes", "test_writes_and_readintos", "test___all__", "test_detach_flush", "test_garbage_collection", "test_BufferedIOBase_readinto", "test_open_pipe_with_append", "check_writes", "test_read_by_chunk", "test_reconfigure_write", "reader_close", "check_path_succeeds", "test_flush_error_on_close", "test_newlines", "test_interrupted_read_retry_buffered", "pipe_reader", "test_rawio", "test_invalid_newline", "test_open_handles_NUL_chars", "test_constructor", "test_read_and_write", "test_create_fail", "test_read_closed", "_check_abc_inheritance", "byteslike", "test_recursive_repr", "test_read_one_by_one", "_with", "gen_sizes", "test_uninitialized", "_make_illegal_wrapper", "load_tests", "test_seek_append_bom", "flush", "test_override_destructor", "test_append_bom", "test_flush_and_readinto", "test_misbehaved_io", "test_interleaved_read_write", "test_fileio_closefd", "test_peek", "run", "test_issue22849", "test_readinto1_array", "check_flush_and_read", "test_issue1395_4", "test_nonblock_pipe_write_bigbuf", "process_word", "test_del__CHUNK_SIZE_SystemError", "read", "test_reconfigure_defaults", "test_writelines_userlist", "test_unreadable", "write", "test_write_error_on_close", "test_reentrant_write_text", "test_readline", "test_interrupted_write_unbuffered", "truncate", "test_constructor_max_buffer_size_removal", "opener", "_get_bad_decoder", "block_on", "test_types_have_dict", "test_constructor_with_not_readable", "test_readline_nonsizeable", "test_threads"], "function_calls": ["_check", "MyBytesIO", "assert_python_ok", "sorted", "getattr", "UnseekableReader", "decode", "EmptyStruct", "iter", "dict", "open", "NotWriteable", "setattr", "MyTextIO", "mutate", "int", "zip", "OSError", "len", "globals", "read_func", "memoryview", "Reader", "MyIO", "SelectableIsAtty", "R", "cycle", "str", "locals", "wr", "_to_memoryview", "run_python_until_end", "pair", "BufferedWriter", "list", "_default_chunk_size", "f", "bufio", "count", "BadDecoder", "intermediate_func", "MockIO", "min", "test", "deque", "Stream", "id", "isinstance", "F", "_decode_bytewise", "_check_decode", "MyFileIO", "range", "method", "UnReadable", "C", "set", "hasattr", "test_seek_and_tell_with_data", "divmod", "bytes", "_make_very_illegal_wrapper", "sum", "ord", "UnseekableWriter", "check", "StatefulIncrementalDecoder", "UserList", "NotReadable", "repr", "issubclass", "super", "check_path_succeeds", "gen_sizes", "byteslike", "_with", "MemviewBytesIO", "_make_illegal_wrapper", "next", "bytearray", "BadReader", "MyBufferedIO", "FakePath"], "class_names": ["TextIOWrapperTest", "CSlowFlushRawIO", "MyBytesIO", "UnseekableReader", "CMockFileIO", "PyIOTest", "EmptyStruct", "MiscIOTest", "NotWriteable", "MyTextIO", "CMockUnseekableIO", "SignalsTest", "IncrementalNewlineDecoderTest", "SlowFlushRawIO", "CSignalsTest", "PyMockRawIO", "PyBufferedReaderTest", "CMockRawIOWithoutRead", "PyBufferedWriterTest", "CMockNonBlockWriterIO", "SizeofTest", "BufferedRandomTest", "PySlowFlushRawIO", "MockUnseekableIO", "CommonBufferedTests", "Reader", "MyIO", "SelectableIsAtty", "R", "PyMisbehavedRawIO", "CBufferedRWPairTest", "CMockRawIO", "CMisbehavedRawIO", "BufferedWriter", "PyBufferedRWPairTest", "CTextIOWrapperTest", "BadDecoder", "PyBufferedRandomTest", "PyMockRawIOWithoutRead", "MockIO", "CBufferedReaderTest", "MockRawIOWithoutRead", "MockRawIO", "CIOTest", "StatefulIncrementalDecoderTest", "Stream", "MockNonBlockWriterIO", "CloseFailureIO", "F", "PyMockNonBlockWriterIO", "MyFileIO", "MisbehavedRawIO", "CBufferedRandomTest", "UnReadable", "PyMockFileIO", "C", "PyTextIOWrapperTest", "BufferedWriterTest", "BufferedReaderTest", "UnseekableWriter", "StatefulIncrementalDecoder", "PyMiscIOTest", "CIncrementalNewlineDecoderTest", "NotReadable", "PySignalsTest", "PyMockUnseekableIO", "CBufferedWriterTest", "CMiscIOTest", "CCloseFailureIO", "MemviewBytesIO", "PyCloseFailureIO", "BufferedRWPairTest", "PyIncrementalNewlineDecoderTest", "BadReader", "MockFileIO", "APIMismatchTest", "MyBufferedIO", "IOTest"], "class_method_calls": ["wf.closed", "bufio.readinto1", "f.readable", "raw.seekable", "os.O_RDONLY", "e.errno", "normalized.decode", "io.RawIOBase", "thread.start", "bufio.read", "sys.getsizeof", "self.avail", "BufferedWriterTest.test_uninitialized", "support.catch_unraisable_exception", "txt.reconfigure", "unittest.makeSuite", "abc.ABCMeta", "CBufferedReaderTest.test_garbage_collection", "os.open", "buf.write", "pickle.HIGHEST_PROTOCOL", "self.UnsupportedOperation", "x.decode", "os.linesep", "self.check_flush_and_read", "self.check_flush_error_on_close", "self.i", "rw.seek", "obj.read", "py_io_ns.items", "f.name", "support.import_module", "raw.getvalue", "f.writelines", "testdata.replace", "e.characters_written", "bufio.writelines", "cls.codecEnabled", "t._CHUNK_SIZE", "f1.readline", "self.reset", "self.subTest", "f.seek", "pyio.RawIOBase", "select.select", "pair.read1", "name.lower", "fp.read", "random.shuffle", "b.peek", "array.array", "raw.block_on", "os.path", "pair.isatty", "bufio.flush", "support.real_max_memuse", "signal.SIG_UNBLOCK", "os.read", "bufio.truncate", "os.set_blocking", "self._reads", "obj.writable", "buffer.seekable", "name.startswith", "support.PIPE_MAX_SIZE", "raw.write", "self.o", "b.index", "self.assertWarns", "signal.signal", "_testcapi.INT_MAX", "wio.write", "pair.closed", "rawio._extraneous_reads", "signal.SIG_BLOCK", "reader.closed", "err.strip", "io.BufferedWriter", "e.args", "io.BlockingIOError", "buf.closed", "wlines.append", "self.IOBase", "self.assertSequenceEqual", "latin1.encode", "u_suffix.encode", "self.StringIO", "self.assertIsNotNone", "obj.fileno", "flush_called.append", "support.requires", "received.append", "writer.close", "BufferedWriterTest.test_constructor", "f.readinto", "_testcapi.UINT_MAX", "got_lines.append", "self.fail", "rawio._reads", "self.on_del", "self.TextIOWrapper", "t.mode", "buf.getvalue", "read_results.append", "self.read", "BufferedReaderTest.test_constructor", "raw.closed", "c_io_ns.update", "pyio.BytesIO", "pair.write", "support.no_tracing", "io.UnsupportedOperation", "f.read1", "b.flush", "rawio.read", "pair.readable", "record.append", "self.SlowFlushRawIO", "flushed.startswith", "content.count", "rlines.append", "obj.seek", "raw.pop_written", "os.write", "F.tell", "r.getvalue", "self.BufferedWriter", "f.readinto1", "self.check_reentrant_write", "rawio._write_stack", "self._extraneous_reads", "self.check_interrupted_write_retry", "self._test_nonblock_pipe_write", "self._blocker_char", "warnings.catch_warnings", "a.tobytes", "self.assertRaises", "thread.join", "file.close", "event.set", "io.BufferedRWPair", "t1.buddy", "pair.seekable", "txt.readlines", "pyio.UnsupportedOperation", "s.startswith", "rio.close", "self.CloseFailureIO", "f.getvalue", "result.append", "cm.warning", "f2.readline", "bufio.tell", "bufio.closed", "pair.detach", "t.tell", "cm.exception", "f.mode", "txt.readline", "codecs.CodecInfo", "support.requires_type_collecting", "self._check_abc_inheritance", "self.SEEK_END", "txt.seekable", "obj.tell", "g.name", "file.seek", "rw.write", "raw.flush", "self.assertRegex", "encoder.reset", "raw.close", "self.assertIsNone", "t.write_through", "wf.write", "t.errors", "self.BytesIO", "self._check_warn_on_dealloc", "sent.append", "self.FileIO", "testdict.items", "self.assertLess", "self._check_create_at_shutdown", "test.__name__", "f.errors", "self.large_file_ops", "self.TextIOBase", "self.write_ops", "ctypes.Structure", "pair.flush", "queue.popleft", "writer.closed", "f.readline", "self.addCleanup", "py_io_ns.update", "self.testdata", "txt.close", "signal.pthread_sigmask", "self.BlockingIOError", "res.err", "bufio.write", "decoder.getstate", "support.check_no_resource_warning", "pyio.BlockingIOError", "b.getvalue", "self.shutdown_error", "self.LARGE", "io.TextIOWrapper", "base.close", "write_called.append", "unittest.TestSuite", "f.truncate", "self.write_mode", "fileio.close", "t.line_buffering", "buffer.close", "self.assertNotIsInstance", "queue.append", "io.BytesIO", "self.io", "txt.closed", "self.check_newline_decoding", "self.BufferedIOBase", "f.x", "self.tp", "t.__init__", "f.read", "testdata.decode", "s.count", "self.buffer", "decoder.reset", "BufferedWriterTest.test_threads", "x.__name__", "time.sleep", "self.check_writes", "StatefulIncrementalDecoderTest.test_cases", "decoder.decode", "self.skipTest", "self._isatty", "bufio.read1", "io.BufferedRandom", "txt.buffer", "self.MockRawIOWithoutRead", "f.buffer", "self.closed", "unittest.skipUnless", "support.gc_collect", "raw._write_stack", "self.process_word", "codecs.register", "txt.writelines", "self.assertIs", "support.requires_resource", "textio.write", "t.start", "rawio.readall", "support.TESTFN", "b.closed", "self.check_interrupted_read_retry", "abcmodule.RawIOBase", "raw.name", "txt.detach", "abcmodule.TextIOBase", "self.on_flush", "os.O_WRONLY", "self.MockRawIO", "t.flush", "self.assertTrue", "b.read", "txt.flush", "self.multi_line_test", "wf.flush", "g.raw", "t.readline", "self.on_close", "self.BufferedRWPair", "pair.peek", "abcmodule.IOBase", "b.write", "support.detect_api_mismatch", "self.check_newline_decoding_utf8", "self.alarm_interrupt", "pyio.BufferedReader", "self.MockFileIO", "obj.obj", "ctypes.resize", "t.buffer", "pair.__init__", "signal.SIGALRM", "self.in_flush", "bytes_val.decode", "f.tell", "support.start_threads", "f.readall", "t.reconfigure", "self._write_stack", "fp.seek", "self.MockNonBlockWriterIO", "pyio.BufferedRWPair", "self.MockUnseekableIO", "buf._write_stack", "reader.avail", "obj.readable", "sys.platform", "g.close", "b.fileno", "fp.write", "f.write", "os.fsencode", "codecs.getincrementaldecoder", "self.check_daemon_threads_shutdown_deadlock", "reader.close", "signal.alarm", "d.decode", "f.writable", "support.unlink", "t.detach", "rw.tell", "os.environ", "f.readlines", "self._check_warn_on_dealloc_fd", "pyio.BufferedRandom", "res.rc", "f.closed", "StatefulIncrementalDecoder.lookupTestDecoder", "u_prefix.encode", "self.read_history", "f.close", "decoder.setstate", "rawio.in_flush", "err.exception", "enc.startswith", "results.append", "bufio.fileno", "f.flush", "self.assertRaisesRegex", "obj.seekable", "self.assertIn", "t.join", "data.decode", "wio.close", "BufferedReaderTest.test_misbehaved_io", "errno.EAGAIN", "unittest.skipIf", "self.BufferedReader", "self.BufferedRandom", "raw.seek", "t.write", "self.read_ops", "BufferedReaderTest.test_uninitialized", "codecs.lookup", "b.close", "f._CHUNK_SIZE", "quopri._is_text_encoding", "out.decode", "support.cpython_only", "pickle.dumps", "os.name", "fp.readline", "rf.closed", "encoder.encode", "chars.append", "dec.decode", "self.IncrementalNewlineDecoder", "self.oldalrm", "threading.Thread", "t.read", "os.pipe", "txt.write", "self.assertEqual", "rawio.getvalue", "rawio.read_history", "cm.unraisable", "bufio.peek", "f.peek", "support._2G", "os.close", "rw.flush", "f.f", "support.check_warnings", "textio.read", "f1.fileno", "c_io_ns.items", "bufio.readinto", "textio.readline", "errors.append", "self.getvalue", "sysconfig.get_config_var", "wio.flush", "BufferedWriterTest.test_misbehaved_io", "self.assertIsInstance", "l.append", "pair.read", "buf.raw", "self.check_interrupted_write", "f.isatty", "f2.fileno", "writer._write_stack", "file.buffer", "f.__iter__", "fp.writelines", "codecs.IncrementalDecoder", "pyio.OpenWrapper", "obj.truncate", "self.test_cases", "CBufferedWriterTest.test_garbage_collection", "f.seekable", "support.swap_attr", "b.c", "io.BufferedReader", "sys.maxsize", "os.O_CREAT", "w._write_stack", "self._read_stack", "unittest.TestCase", "self.assertFalse", "abcmodule.BufferedIOBase", "txt.read", "rf.read", "arr.itemsize", "sys.flags", "StatefulIncrementalDecoder.codecEnabled", "t.encoding", "self.open", "self.read_mode", "bufio.close", "codecs.getincrementalencoder", "pair.close", "obj.write", "self._check_base_destructor", "err.decode", "warnings.simplefilter", "self.normalized", "t.x", "c.b", "self.MisbehavedRawIO", "txt.seek", "self.assertGreater", "unittest.main", "BufferedRandomTest.test_constructor", "txt.errors", "decoder.newlines", "MockRawIO.__init__", "t2.buddy", "file.read", "io.__all__", "b.read1", "self.RawIOBase", "pyio.BufferedWriter", "pair.writable", "rw.read", "event.wait", "arr.frombytes", "buf.detach", "BufferedReaderTest.test_threads", "file.readinto", "t.daemon", "threading.Event", "dec.newlines", "txt._CHUNK_SIZE", "io.FileIO", "self.SEEK_CUR", "g.mode", "R.flush", "bufio.__init__", "locale.getpreferredencoding", "errno.EBADF", "weakref.ref", "txt.tell", "txt.encoding", "bufio.seek", "fileio.__init__", "rio.read", "f.fileno"]}, "test_ioctl.py": {"libraries": ["unittest", "pty", "test.support.get_attribute", "test.support.import_module", "struct", "os", "array"], "function_names": ["test_ioctl_signed_unsigned_code_param", "test_ioctl_mutate_2048", "test_ioctl", "_check_ioctl_mutate_len", "test_ioctl_mutate_1024", "test_ioctl_mutate"], "function_calls": ["get_attribute", "import_module", "len", "open"], "class_names": ["IoctlTests"], "class_method_calls": ["buf.itemsize", "self.assertEqual", "os.getpgrp", "fcntl.ioctl", "unittest.SkipTest", "self.assertIn", "termios.TIOCGPGRP", "buf.append", "self._check_ioctl_mutate_len", "struct.pack", "struct.unpack", "os.close", "os.getsid", "buf.extend", "pty.openpty", "unittest.main", "array.array", "termios.TIOCSWINSZ", "unittest.TestCase"]}, "test_ipaddress.py": {"libraries": ["unittest", "re", "operator", "contextlib", "test.support.LARGEST", "pickle", "ipaddress", "weakref", "functools", "test.support.SMALLEST"], "function_names": ["testAddressIntMath", "assertBadPart", "testIPVersion", "test_foreign_type_ordering", "test_invalid_characters", "testRepr", "test_mixed_type_equality", "testGetSubnets", "test_large_ints_rejected", "testInterfaceComparison", "test_part_length", "testSlash32Constructor", "testGetNum_Addresses", "testSubnetFailsForLargeCidrDiff", "test_bad_address_split_v6_leading_colon", "testCollapsing", "testIPv4Tuple", "testIpFromPacked", "testGetBroadcast", "testIpv4Mapped", "testAddrExclude", "testCopyConstructor", "test_bad_packed_length", "testReversePointer", "test_same_type_ordering", "test_leading_zeros", "testEqual", "testOverlaps", "testSubnet2", "testSlash128Constructor", "test_valid_netmask", "testForceVersion", "testNetworkElementCaching", "test_bad_address_split_v6_too_many_parts_with_double_colon", "testGetSupernet3", "test_incompatible_versions", "testCompressIPv6Address", "test_empty_address", "test_bad_v4_part_in", "testIPBases", "testIPv6Tuple", "testNetworkComparison", "testV4HashIsNotConstant", "version", "testGetPrefixlen", "testInvalidIntToBytes", "test_supernet_of", "testHash", "test_bad_address_split_v6_repeated_double_colon", "testGetNetmask", "testSlash0Constructor", "test_negative_ints_rejected", "assertBadAddress", "testGetitem", "test_ip_network", "testIPv6NetworkHelpers", "testV6HashIsNotConstant", "testSummarizing", "test_weakref", "testNotEqual", "testIPv6AddressTooLarge", "test_bad_address_split_v6_too_many_parts", "test_subnet_of_mixed_types", "testGetSubnets3", "testSupernetFailsForLargeCidrDiff", "testNth", "assertNetmaskError", "testPacked", "testIPv4NetworkHelpers", "assertFactoryError", "testFancySubnetting", "setUp", "assertCleanError", "testGetSupernet", "assertInstancesEqual", "test_same_type_equality", "test_ip_address", "testExplodeShortHandIpStr", "test_ip_interface", "test_address_errors", "test_mixed_type_ordering", "test_mixed_type_key", "testContains", "testIntRepresentation", "testZeroNetmask", "test_netmask_errors", "testWithStar", "factory", "test_pickle", "testIpType", "testSubnetFailsForNegativeCidrDiff", "testReservedIpv4", "testGetSubnetForSingle32", "test_int", "test_bad_address_split", "testAddressComparison", "test_split_netmask", "testEmbeddedIpv4", "test_floats_rejected", "test_network_passed_as_address", "test_octet_length", "assertAddressError", "testStrictNetworks", "testGetSupernet4", "assertBadOctet", "testIPv4Net", "testReservedIpv6", "testTeredo", "test_not_an_index_issue15559", "testHosts", "assertBadNetmask", "test_bad_address_split_v6_trailing_colon", "test_bad_address_split_v6_too_many_colons", "test_foreign_type_equality", "test_octet_limit", "testMaxPrefixLength", "testGetSubnetForSingle128", "testInternals", "test_empty_octet", "test_bad_address_split_v6_not_enough_parts", "test_packed", "test_no_mask", "test_netmask_in_tuple_errors", "assertBadAddressPart", "testsixtofour", "testGetNetwork", "testGetIp", "test_subnet_of", "assertBadLength", "test_containment", "testIpFromInt", "pickle_test", "assertBadSplit"], "function_calls": ["assertBadPart", "object", "sorted", "address", "assertBadNetmask", "repr", "isinstance", "assertBadAddress", "str", "hash", "IPv7Address", "range", "list", "factory", "int", "type", "assertBadAddressPart", "summarize", "len", "assertBadLength", "assertBadSplit", "assertBadOctet"], "class_names": ["CommonTestMixin", "AddressTestCase_v6", "NetmaskTestMixin_v4", "IpaddrUnitTest", "BaseTestCase", "CommonTestMixin_v4", "NetmaskTestMixin_v6", "CommonTestMixin_v6", "InterfaceTestCase_v4", "NetworkTestCase_v4", "ComparisonTests", "NetworkTestCase_v6", "IPv7Address", "FactoryFunctionErrors", "AddressTestCase_v4", "InterfaceTestCase_v6"], "class_method_calls": ["ipv4_address2.__hash__", "ipv4_zero_netmask._prefix_from_prefix_string", "self.assertEqual", "self.assertNotEqual", "self.assertGreaterEqual", "self.assertIs", "self.v6addr", "self.ipv6_network", "ipaddress.IPv4Network", "addr2.exploded", "self.v6intf", "self.v4_addresses", "self.assertRaises", "ipv4_address1.__hash__", "ipaddress.v4_int_to_packed", "v4net.__lt__", "ipv4.ip", "ipv6_address2.__hash__", "pickle.HIGHEST_PROTOCOL", "net.with_hostmask", "addr1.reverse_pointer", "self.v6net", "ipaddress.NetmaskValueError", "ipaddress.IPV4LENGTH", "self.assertTrue", "other2.overlaps", "self.v4_objects", "exc.exception", "teredo_addr.teredo", "ipv4.__gt__", "ipaddress.IPv4Address", "ipv6.__lt__", "re.escape", "ip2.compare_networks", "v4net.__gt__", "ipaddress.get_mixed_type_key", "ip.subnets", "ip1.__lt__", "v6net.__lt__", "ip3._get_networks_key", "net.prefixlen", "obj.__ne__", "self.v6_addresses", "ipaddress.summarize_address_range", "self.v4intf", "addr1.address_exclude", "operator.index", "ipaddress.ip_network", "self.pickle_test", "v4addr.__gt__", "self.assertNotIn", "self.v4addr", "v4mapped_ipv6.ip", "ipaddress.AddressValueError", "self.subTest", "ipv6_zero_netmask.network", "contextlib.contextmanager", "self.v6addr2", "pickle.loads", "ipv6_network.subnets", "ip1._get_networks_key", "v6net.__gt__", "self.ipv4_interface", "self.v6_objects", "ip1.compare_networks", "self.v4intf2", "v4addr.__lt__", "addr3.exploded", "unittest.TestCase", "self.assertAddressError", "self.assertFalse", "test_addresses.items", "net._string_from_ip_int", "self.assertLess", "self.factory", "ipaddress._find_address_range", "ipv4.network_address", "ipv6.network_address", "ipaddress.IPv6Address", "net.compressed", "ipv6_address1.__hash__", "self.assertInstancesEqual", "v6addr.__lt__", "sixtofouraddr.sixtofour", "v4compat_ipv6.ip", "self.assertLessEqual", "self.ipv4_address", "addr1.exploded", "self.v6net2", "self.ipv6_interface", "self.v6intf2", "ipv6.__gt__", "self.assertGreater", "unsorted.sort", "unittest.main", "net.netmask", "ipv4.__lt__", "ipaddress.ip_address", "ipaddress.IPv4Interface", "net.with_prefixlen", "self.v4net2", "ipv6_network.hosts", "self.ipv6_address", "addr4.exploded", "self.assertFactoryError", "self.v4addr2", "net.hostmask", "ipaddress.IPv6Interface", "bytes.fromhex", "ipv6_zero_netmask._prefix_from_prefix_string", "self.assertRaisesRegex", "self.ipv4_network", "self.assertIn", "ip2.__lt__", "self.assertCleanError", "net.with_netmask", "self.objects", "ipv4_zero_netmask.network", "v6addr.__gt__", "addr2.reverse_pointer", "self.assertNetmaskError", "weakref.ref", "ipaddress.v6_int_to_packed", "ip3.compare_networks", "ipaddress._count_righthand_zero_bits", "ipaddress.IPv6Network", "addr.prefixlen", "bad_addr.sixtofour", "self.v4net", "obj.__eq__", "ipaddress.ip_interface", "pickle.dumps", "ipaddress.collapse_addresses", "ipaddress.IPV6LENGTH"]}, "test_isinstance.py": {"libraries": ["unittest", "sys"], "function_names": ["__bases__", "test_isinstance_dont_mask_non_attribute_error", "test_dont_mask_non_attribute_error", "test_infinite_recursion_in_bases", "test_mask_attribute_error", "test_dont_mask_non_attribute_error_in_cls_arg", "getclass", "test_isinstance_normal", "__call__", "__init__", "test_issubclass_refcount_handling", "test_subclass_tuple", "test_isinstance_abstract", "getbases", "blowstack", "test_subclass_recursion_limit", "test_mask_attribute_error_in_cls_arg", "test_bases_raises_other_than_attribute_error", "test_class_has_no_bases", "test_isinstance_recursion_limit", "test_subclass_abstract", "test_subclass_normal"], "function_calls": ["AbstractClass", "isinstance", "AbstractSuper", "issubclass", "X", "B", "property", "C", "fxn", "I", "AbstractChild", "A", "Child", "AbstractInstance", "Super", "range", "E", "S"], "class_names": ["AbstractClass", "TestIsSubclassExceptions", "AbstractInstance", "X", "B", "C", "TestIsInstanceIsSubclass", "A", "Child", "TestIsInstanceExceptions", "Super", "D", "I", "E", "S"], "class_method_calls": ["self.bases", "self.x", "self.assertEqual", "self.klass", "sys.getrecursionlimit", "unittest.TestCase", "self.__bases__", "unittest.main", "self.assertRaises"]}, "test_iter.py": {"libraries": ["unittest", "test.support.check_free_after_iterating", "test.support.TESTFN", "test.support.unlink", "operator.countOf", "sys", "pickle", "collections.abc", "test.support.cpython_only", "test.support.run_unittest", "operator.indexOf"], "function_names": ["test_builtin_max_min", "test_iter_class_for", "test_seq_class_for", "test_sinkstate_callable", "test_iter_overflow", "test_sinkstate_range", "test_unicode_join_endcase", "test_stop_sequence", "test_iter_callable", "test_unpack_iter", "test_sinkstate_yield", "test_builtin_filter", "test_mutating_seq_class_exhausted_iter", "gen", "test_new_style_iter_class", "test_main", "test_free_after_iterating", "test_builtin_map", "test_builtin_tuple", "test_iter_string", "test_3720", "test_iter_file", "test_nested_comprehensions_iter", "__call__", "__init__", "test_ref_counting_behavior", "test_iter_idempotency", "test_exception_function", "test_iter_for_loop", "test_iter_range", "check_iterator", "test_iter_tuple", "check_for_loop", "test_sinkstate_sequence", "test_sinkstate_enumerate", "test_seq_class_iter", "test_iter_class_iter", "test_nested_comprehensions_for", "test_mutating_seq_class_iter_pickle", "test_exception_sequence", "__len__", "test_iter_empty", "__del__", "__iter__", "test_builtin_list", "test_iter_neg_setstate", "test_sinkstate_tuple", "test_sinkstate_list", "__bool__", "test_iter_basic", "test_writelines", "__next__", "test_in_and_not_in", "lzip", "spam", "test_extending_list_with_iterator_does_not_segfault", "test_countOf", "test_error_iter", "test_sinkstate_dict", "test_indexOf", "check_pickle", "test_builtin_zip", "__new__", "test_iter_independence", "test_iter_function", "test_iter_dict", "test_iter_big_range", "test_iter_function_stop", "test_sinkstate_string", "__getitem__"], "function_calls": ["min", "BasicIterClass", "IterClass", "MySequenceClass", "gen", "countOf", "isinstance", "test_main", "BadIterator", "BadIterableClass", "SeqIter", "iter", "Guess30Len5", "str", "IntsFrom", "tuple", "open", "run_unittest", "Seq", "AssertionError", "range", "list", "OhPhooey", "indexOf", "typ", "C", "IteratingSequenceClass", "UnlimitedSequenceClass", "next", "type", "zip", "enumerate", "unlink", "Whatever", "Boolean", "Guess3Len5", "lzip", "len", "SequenceClass", "max", "check_free_after_iterating", "Iterator", "filter", "map", "NoGuessLen5"], "class_names": ["BasicIterClass", "NoIterClass", "IterClass", "MySequenceClass", "BadIterator", "BadIterableClass", "SeqIter", "Guess30Len5", "IntsFrom", "Seq", "OhPhooey", "DefaultIterClass", "C", "IteratingSequenceClass", "UnlimitedSequenceClass", "Whatever", "Boolean", "Guess3Len5", "SequenceClass", "Iterator", "TestCase", "NoGuessLen5"], "class_method_calls": ["it.__setstate__", "C.count", "SequenceClass.__getitem__", "self.truth", "self.assertEqual", "cls.count", "d.values", "f.writelines", "self.assertIs", "a.n", "d.items", "f.write", "a.values", "d.keys", "self.assertIn", "a.items", "self.fail", "lst.pop", "seq.n", "self.assertNotIn", "BadIterator.__next__", "dict.keys", "self.finish", "self.assertRaises", "f.seek", "self.n", "res.append", "self.start", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "collections.abc", "self.it", "lst.extend", "self.vals", "self.check_for_loop", "sys.maxsize", "self.check_iterator", "object.__new__", "self.i", "pickle.dumps", "self.check_pickle", "self.__class__", "self.assertTrue", "a.keys", "f.close", "unittest.TestCase", "a.extend"]}, "test_iterlen.py": {"libraries": ["unittest", "collections.deque", "operator.length_hint", "itertools.repeat"], "function_names": ["test_invariant", "__len__", "setUp", "__iter__", "test_mutation", "test_issue1242657", "test_invalid_hint", "__length_hint__", "test_immutable_during_iteration"], "function_calls": ["list", "bytearray", "BadLengthHint", "length_hint", "iter", "BadLen", "reversed", "set", "tuple", "NoneLengthHint", "repeat", "next", "deque", "range", "RuntimeError"], "class_names": ["TestSet", "TestDeque", "TestRepeat", "TestListReversed", "BadLengthHint", "TestLengthHintExceptions", "TestDictItems", "BadLen", "NoneLengthHint", "TestList", "TestDequeReversed", "TestDictKeys", "TestTemporarilyImmutable", "TestXrangeCustomReversed", "TestDictValues", "TestTuple", "TestInvariantWithoutMutations", "TestXrange"], "class_method_calls": ["d.popitem", "d.extend", "d.items", "b.extend", "d.append", "d.pop", "self.assertEqual", "d.values", "dict.fromkeys", "unittest.TestCase", "self.mutate", "self.it", "unittest.main", "self.assertRaises"]}, "test_itertools.py": {"libraries": ["unittest", "itertools.*", "copy", "operator", "threading", "gc", "random", "functools.reduce", "fractions.Fraction", "decimal.Decimal", "sys", "pickle", "struct", "weakref", "test.support"], "function_names": ["test_product_sizeof", "gen2", "test_islice", "test_zip", "test_ziplongest", "test_sf_950057", "prod", "__index__", "errfunc", "test_combinations_with_replacement_tuple_reuse", "isOdd", "test_product_overflow", "__init__", "test_count", "test_combinations", "product2", "mutatingtuple", "testR2", "__iter__", "__next__", "take", "lzip", "test_accumulate", "test_filter", "test_product_tuple_reuse", "delayed_raise", "test_count_with_stride", "numcombs", "test_dropwhile", "test_zip_tuple_reuse", "test_combinations_with_replacement_result_gc", "fact", "test_sf_793826", "test_stapmap", "test_bug_7244", "test_filterfalse", "permutations1", "test_zip_longest_result_gc", "test_combinations_sizeof", "keyfunc", "test_combinations_result_gc", "R", "test_product_issue_25021", "test_tee_del_backward", "isEven", "test_starmap", "gen3", "test_cycle_setstate", "permutations2", "test_cycle", "test_accumulate_reducible_none", "test_takewhile", "test_issue30347_1", "f", "test_tee", "gen1", "expand", "test_islice_recipe", "__getitem__", "test_long_chain_of_empty_iterables", "test_issue30347_2", "test_product_result_gc", "test_compress", "test_StopIteration", "test_zip_longest", "setUp", "cwr1", "test_combinations_with_replacement_overflow", "chain2", "test_combinations_tuple_reuse", "test_main", "test_product_pickling", "irange", "islice", "combinations2", "test_chain_reducible", "gulp", "test_chain", "makecycle", "test_combinations_with_replacement_sizeof", "test_groupby", "test_permutations", "test_map", "test_permutations_result_gc", "tupleize", "test_combinations_overflow", "test_permutations_sizeof", "combinations1", "testR", "test_permutations_overflow", "test_issue2246", "test_zip_longest_bad_iterable", "test_combinatorics", "test_zip_longest_pickling", "combinations3", "product1", "__eq__", "underten", "test_permutations_tuple_reuse", "test_zip_longest_tuple_reuse", "onearg", "test_chain_from_iterable", "test_accumulate_reducible", "test_combinations_with_replacement", "test_chain_setstate", "test_keywords_in_subclass", "run", "cwr2", "test_tee_concurrent", "test_product", "L", "test_tee_reenter", "g", "test_repeat_with_negative_times", "test_repeat", "pickletest"], "function_calls": ["dropwhile", "gen2", "sorted", "getattr", "Fraction", "prod", "filterfalse", "StopNow", "iter", "isOdd", "dict", "product2", "Ig", "mutatingtuple", "int", "zip", "enumerate", "take", "lzip", "len", "takewhile", "delayed_raise", "tee", "numcombs", "repeat", "fact", "filter", "permutations", "globals", "S", "BadIterable", "permutations1", "reversed", "compress", "tnew", "accumulate", "R", "cycle", "isEven", "combinations", "locals", "wr", "gen3", "DummyCmp", "permutations2", "list", "slice", "f", "product", "op", "count", "gen1", "expand", "Decimal", "oper", "min", "all", "TypeError", "cwr1", "isinstance", "test_main", "irange", "islice", "tuple", "combinations2", "range", "Subclass", "set", "type", "func", "eval", "I", "hasattr", "cwr", "any", "max", "Int", "combinations1", "c", "print", "check", "combinations3", "product1", "N", "IntLike", "repr", "RuntimeError", "onearg", "G", "X", "groupby", "combinations_with_replacement", "run", "cwr2", "next", "zip_longest", "starmap", "g", "Repeater", "reduce", "chain", "map", "E"], "class_names": ["BadIterable", "N", "RegressionTests", "IntLike", "StopNow", "TestBasicOps", "SubclassWithKwargsTest", "G", "TestGC", "DummyCmp", "X", "Ig", "Subclass", "TestPurePythonRoughEquivalents", "TestExamples", "K", "ExpectedError", "TestVariousIteratorArgs", "LengthTransparency", "I", "SizeofTest", "Repeater", "E", "S"], "class_method_calls": ["self.first", "finish.wait", "self.assertEqual", "support.gc_collect", "self.assertNotEqual", "struct.calcsize", "self.assertIs", "thread.start", "operator.neg", "self.t", "self.assertRaises", "thread.join", "self.val", "start.wait", "operator.pow", "pickle.HIGHEST_PROTOCOL", "cls.__init__", "tgt.append", "self.i", "self.assertTrue", "s.start", "err.args", "it.__setstate__", "result.append", "dict.fromkeys", "self.check_sizeof", "cm.exception", "self.islice", "support.bigaddrspacetest", "operator.length_hint", "self.assertNotIn", "weakref.proxy", "support.run_unittest", "copy.deepcopy", "support.skip_if_pgo_task", "random.randrange", "pickle.loads", "random.shuffle", "self.assertIsNone", "sys.maxsize", "self.makecycle", "self.e", "self.pickletest", "support.captured_output", "s.step", "gc.collect", "unittest.TestCase", "start.set", "copy.copy", "support.run_doctest", "kwds.get", "self.ssize_t", "dup.append", "container.append", "operator.mul", "chain.from_iterable", "self.o", "support.MAX_Py_ssize_t", "operator.is_", "self.seqn", "finish.set", "keyfunc.__dict__", "support.check_sizeof", "c.__setstate__", "s.stop", "self.assertIsNotNone", "sys.modules", "support.impl_detail", "sys.gettotalrefcount", "self.assertRaisesRegex", "hist.append", "threading.Event", "self.fail", "p.__setstate__", "sys.exc_info", "gc.is_tracked", "weakref.ref", "keyfunc.skip", "random.choice", "support.cpython_only", "pickle.dumps", "support.calcobjsize", "threading.Thread"]}, "test_decode.py": {"libraries": ["test.test_json.PyTest", "decimal", "io.StringIO", "test.test_json.CTest", "test.support", "collections.OrderedDict"], "function_names": ["test_extra_data", "test_float", "test_negative_index", "test_limit_int", "check_keys_reuse", "test_decoder_optimizations", "test_string_with_utf8_bom", "test_keys_reuse", "test_invalid_input_type", "test_invalid_escape", "test_decimal", "test_object_pairs_hook", "test_empty_objects"], "function_calls": ["isinstance", "sorted", "str", "StringIO", "type", "loads", "OrderedDict", "eval"], "class_names": ["TestPyDecode", "TestDecode", "TestCDecode"], "class_method_calls": ["self.check_keys_reuse", "self.assertIs", "support.adjust_int_max_str_digits", "self.JSONDecodeError", "d.raw_decode", "self.assertIn", "decoder.decode", "decimal.Decimal", "self.assertEqual", "self.assertTrue", "self.loads", "self.json", "self.assertFalse", "cm.exception", "decoder.memo", "self.assertRaisesRegex", "self.assertRaises"]}, "test_default.py": {"libraries": ["test.test_json.PyTest", "test.test_json.CTest"], "function_names": ["test_default"], "function_calls": ["repr"], "class_names": ["TestDefault", "TestCDefault", "TestPyDefault"], "class_method_calls": ["self.assertEqual", "self.dumps"]}, "test_dump.py": {"libraries": ["test.support._1G", "test.test_json.PyTest", "io.StringIO", "test.test_json.CTest", "test.support.bigmemtest"], "function_names": ["test_large_list", "test_encode_evil_dict", "__hash__", "test_dump", "__lt__", "test_encode_truefalse", "test_encode_mutated", "keys", "test_dumps", "test_dump_skipkeys", "crasher"], "function_calls": ["len", "object", "bigmemtest", "StringIO", "int", "D", "range", "X"], "class_names": ["TestCDump", "TestDump", "TestPyDump", "D", "X"], "class_method_calls": ["sio.getvalue", "self.assertIn", "self.dumps", "self.assertEqual", "self.assertNotIn", "self.json", "self.assertRaises"]}, "test_encode_basestring_ascii.py": {"libraries": ["test.support.bigaddrspacetest", "collections.OrderedDict", "test.test_json.PyTest", "test.test_json.CTest"], "function_names": ["test_ordered_dict", "test_overflow", "test_encode_basestring_ascii", "test_sorted_dict"], "function_calls": ["OrderedDict", "dict"], "class_names": ["TestEncodeBasestringAscii", "TestCEncodeBasestringAscii", "TestPyEncodeBasestringAscii"], "class_method_calls": ["self.assertEqual", "self.dumps", "self.json", "self.assertRaises"]}, "test_fail.py": {"libraries": ["sys", "test.test_json.PyTest", "test.test_json.CTest"], "function_names": ["test_extra_data", "test_not_serializable", "test_linecol", "test_failures", "test_non_string_keys_dict", "test_unexpected_data", "test_truncated_input"], "function_calls": ["enumerate", "str"], "class_names": ["TestCFail", "TestFail", "TestPyFail"], "class_method_calls": ["err.lineno", "self.JSONDecodeError", "self.dumps", "self.fail", "self.assertEqual", "err.colno", "err.msg", "self.loads", "err.pos", "cm.exception", "self.assertRaisesRegex", "self.assertRaises"]}, "test_indent.py": {"libraries": ["io.StringIO", "test.test_json.CTest", "test.test_json.PyTest", "textwrap"], "function_names": ["check", "test_indent", "test_indent0"], "function_calls": ["check", "StringIO"], "class_names": ["TestPyIndent", "TestIndent", "TestCIndent"], "class_method_calls": ["sio.getvalue", "self.dumps", "self.assertEqual", "self.loads", "self.json", "expect.expandtabs", "textwrap.dedent"]}, "test_pass1.py": {"libraries": ["test.test_json.PyTest", "test.test_json.CTest"], "function_names": ["test_parse"], "function_calls": [], "class_names": ["TestPyPass1", "TestCPass1", "TestPass1"], "class_method_calls": ["self.assertEqual", "self.dumps", "self.loads"]}, "test_pass2.py": {"libraries": ["test.test_json.PyTest", "test.test_json.CTest"], "function_names": ["test_parse"], "function_calls": [], "class_names": ["TestPass2", "TestCPass2", "TestPyPass2"], "class_method_calls": ["self.assertEqual", "self.dumps", "self.loads"]}, "test_pass3.py": {"libraries": ["test.test_json.PyTest", "test.test_json.CTest"], "function_names": ["test_parse"], "function_calls": [], "class_names": ["TestPass3", "TestCPass3", "TestPyPass3"], "class_method_calls": ["self.assertEqual", "self.dumps", "self.loads"]}, "test_recursion.py": {"libraries": ["test.test_json.PyTest", "test.test_json.CTest"], "function_names": ["test_defaultrecursion", "test_highly_nested_objects_encoding", "default", "test_endless_recursion", "test_highly_nested_objects_decoding", "test_listrecursion", "test_dictrecursion"], "function_calls": ["RecursiveJSONEncoder", "range", "EndlessJSONEncoder"], "class_names": ["TestRecursion", "TestPyRecursion", "TestCRecursion", "EndlessJSONEncoder", "JSONTestObject", "RecursiveJSONEncoder"], "class_method_calls": ["enc.recurse", "x.append", "self.dumps", "self.fail", "pyjson.JSONEncoder", "self.recurse", "self.assertEqual", "self.loads", "enc.encode", "self.json", "self.assertRaises"]}, "test_scanstring.py": {"libraries": ["sys", "test.test_json.PyTest", "test.test_json.CTest"], "function_names": ["test_scanstring", "test_surrogates", "test_overflow", "test_bad_escapes", "assertScan"], "function_calls": ["len", "assertScan", "scanstring"], "class_names": ["TestCScanstring", "TestScanstring", "TestPyScanstring"], "class_method_calls": ["sys.maxsize", "self.JSONDecodeError", "self.assertEqual", "self.json", "self.assertRaises"]}, "test_separators.py": {"libraries": ["test.test_json.CTest", "test.test_json.PyTest", "textwrap"], "function_names": ["test_illegal_separators", "test_separators"], "function_calls": [], "class_names": ["TestPySeparators", "TestSeparators", "TestCSeparators"], "class_method_calls": ["self.dumps", "self.assertEqual", "self.loads", "textwrap.dedent", "self.assertRaises"]}, "test_speedups.py": {"libraries": ["test.test_json.CTest"], "function_names": ["test_make_encoder", "test_bad_str_encoder", "test_scanstring", "test", "test_make_scanner", "bad_encoder2", "test_bad_bool_args", "__bool__", "bad_encoder1", "test_unsortable_keys", "test_encode_basestring_ascii"], "function_calls": ["enc", "BadBool", "str"], "class_names": ["BadBool", "TestDecode", "TestEncode", "TestSpeedups"], "class_method_calls": ["self.assertEqual", "self.assertRaises", "self.json", "self.assertIs"]}, "test_tool.py": {"libraries": ["unittest", "textwrap", "sys", "subprocess.Popen", "subprocess.PIPE", "test.support.script_helper.assert_python_ok", "test.support", "os", "errno"], "function_names": ["test_sort_keys_flag", "test_infile_stdout", "test_broken_pipe_error", "test_stdin_stdout", "_create_infile", "test_infile_outfile", "test_jsonlines", "test_non_ascii_infile", "test_help_flag"], "function_calls": ["assert_python_ok", "Popen", "open"], "class_names": ["TestTool"], "class_method_calls": ["sys.platform", "sys.executable", "self.assertEqual", "proc.communicate", "fp.write", "self.expect", "support.TESTFN", "self.expect_without_sort_keys", "out.startswith", "self.addCleanup", "self.data", "errno.EPIPE", "os.remove", "self._create_infile", "unittest.skipIf", "out.splitlines", "self.jsonlines_raw", "fp.read", "self.jsonlines_expect", "textwrap.dedent", "proc.returncode", "proc.stdout", "expect.splitlines", "self.assertTrue", "unittest.TestCase"]}, "test_keyword.py": {"libraries": ["unittest", "keyword"], "function_names": ["test_uppercase_true_is_not_a_keyword", "test_async_and_await_are_keywords", "test_none_value_is_not_a_keyword", "test_keywords_are_sorted", "test_changing_the_kwlist_does_not_affect_iskeyword", "test_all_keywords_fail_to_be_used_as_names", "test_true_is_a_keyword"], "function_calls": ["exec", "sorted"], "class_names": ["Test_iskeyword"], "class_method_calls": ["keyword.kwlist", "self.assertIn", "self.addCleanup", "self.assertListEqual", "keyword.iskeyword", "self.assertTrue", "unittest.TestCase", "self.assertFalse", "unittest.main", "self.assertRaises"]}, "test_keywordonlyarg.py": {"libraries": ["unittest"], "function_names": ["sortnum", "test_issue13343", "keywordonly_and_kwarg_sum", "testSyntaxForManyArguments", "testSyntaxErrorForFunctionCall", "test_mangling", "testKwDefaults", "__init__", "mixedargs_sum", "keywordonly_sum", "set", "mixedargs_sum2", "testSyntaxErrorForFunctionDefinition", "testRaiseErrorFuncallWithUnexpectedKeywordArgument", "f", "keywordonly_nodefaults_sum", "test_default_evaluation_order", "shouldRaiseSyntaxError", "posonly_sum", "assertRaisesSyntaxError", "testTooManyPositionalErrorMessage", "foo", "sortwords", "test_kwonly_methods", "sum", "testFunctionCall"], "function_calls": ["sortnum", "sorted", "keywordonly_and_kwarg_sum", "Example", "Foo", "str", "range", "mixedargs_sum", "X", "list", "keywordonly_sum", "mixedargs_sum2", "f", "keywordonly_nodefaults_sum", "posonly_sum", "compile", "sum", "sortwords", "foo"], "class_names": ["Foo", "Example", "KeywordOnlyArgTestCase", "X"], "class_method_calls": ["foo.__kwdefaults__", "kwarg.values", "self.k2", "self.fail", "self.k1", "kwargs.values", "self.assertRaisesSyntaxError", "self.assertEqual", "foo.__code__", "unittest.TestCase", "exc.exception", "Example.f", "unittest.main", "err.exception", "self.assertRaises"]}, "test_kqueue.py": {"libraries": ["unittest", "select", "time", "operator.gt", "operator.le", "socket", "os", "operator.lt", "errno", "operator.ge"], "function_names": ["test_issue30058", "__len__", "test_fd_non_inheritable", "test_create_queue", "test_close", "__iter__", "test_create_event", "test_queue_event", "testPair"], "function_calls": ["BadList", "len", "iter", "set", "open", "range", "hasattr"], "class_names": ["TestKQueue", "BadList"], "class_method_calls": ["kq.control", "self.assertIsInstance", "os.get_inheritable", "socket.socketpair", "serverSocket.getsockname", "self.assertEqual", "select.KQ_EV_DELETE", "self.assertNotEqual", "client.connect", "kqueue.fileno", "client.setblocking", "select.KQ_EV_ADD", "serverSocket.accept", "select.KQ_FILTER_READ", "kqueue.close", "kq.close", "select.KQ_EV_ENABLE", "unittest.SkipTest", "self.fail", "self.addCleanup", "ev.flags", "server.close", "serverSocket.close", "socket.create_server", "self.assertRaises", "ev.filter", "select.KQ_FILTER_WRITE", "kq.closed", "a.close", "server.fileno", "client.fileno", "client.close", "e.ident", "ev.fflags", "os.close", "a.send", "os.open", "kqueue.closed", "ev.udata", "kq2.control", "e.filter", "kq.fileno", "b.close", "select.KQ_EV_ONESHOT", "unittest.main", "kqueue.control", "select.kevent", "ev.data", "open_file.fileno", "ev.ident", "os.O_WRONLY", "time.sleep", "select.KQ_EV_ERROR", "b.recv", "client.send", "select.kqueue", "errno.EINPROGRESS", "e.args", "self.assertTrue", "unittest.TestCase", "self.assertFalse", "os.devnull", "server.send", "open_file.close", "socket.socket"]}, "test_largefile.py": {"libraries": ["unittest", "test.support.TESTFN", "io", "test.support.unlink", "test.support.requires", "signal", "_pyio", "sys", "os", "stat", "test.support.bigmemtest"], "function_names": ["test_osstat", "tearDownModule", "test_seekable", "setUp", "setUpModule", "test_large_read", "test_lseek", "test_truncate", "tearDownClass", "test_seek_read"], "function_calls": ["len", "str", "bigmemtest", "staticmethod", "open", "unlink", "requires", "hasattr"], "class_names": ["CLargeFileTest", "LargeFileTest", "PyLargeFileTest"], "class_method_calls": ["sys.platform", "self.assertEqual", "self.open", "f.flush", "f.write", "io.open", "cls.failureException", "unittest.SkipTest", "cls.open", "f.read", "f.seek", "signal.SIGXFSZ", "signal.signal", "f.seekable", "f.tell", "os.fstat", "unittest.TestCase", "unittest.main", "os.path", "pyio.open", "os.lseek", "os.stat", "self.assertTrue", "f.fileno", "stat.ST_SIZE", "f.close", "f.truncate", "signal.SIG_IGN"]}, "test_lib2to3.py": {"libraries": ["unittest", "lib2to3.tests.load_tests"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["unittest.main"]}, "test_linecache.py": {"libraries": ["unittest", "os.path", "tokenize", "tempfile", "test.support", "linecache"], "function_names": ["test_lazycache_already_cached", "test_no_ending_newline", "test_lazycache_smoke", "setUp", "test_getline", "test_clearcache", "test_getlines", "test_lazycache_check", "test_lazycache_bad_filename", "test_memoryerror", "raise_memoryerror", "test_lazycache_provide_after_failed_lookup", "test_lazycache_no_globals", "test_checkcache"], "function_calls": ["len", "super", "open", "getline", "enumerate", "globals"], "class_names": ["GoodUnicode", "GetLineTestsGoodData", "GetLineTestsBadData", "EmptyFile", "BadUnicode", "LineCacheTests", "TempFile", "SingleEmptyLine"], "class_method_calls": ["linecache.cache", "source.write", "linecache.clearcache", "self.assertEqual", "linecache.lazycache", "self.assertNotEqual", "tempfile.NamedTemporaryFile", "self.file_list", "fp.write", "support.TESTFN", "self.addCleanup", "cached.append", "self.file_byte_string", "linecache.checkcache", "self.assertRaises", "support.swap_attr", "self.file_name", "support.unlink", "source_list.append", "unittest.main", "line.endswith", "linecache.getlines", "os.path", "linecache.getline", "linecache.__file__", "self.assertTrue", "fp.name", "tokenize.open", "unittest.TestCase", "linecache.updatecache"]}, "test_list.py": {"libraries": ["unittest", "sys", "pickle", "test.support.cpython_only", "test.list_tests"], "function_names": ["check", "test_len", "test_repr_large", "test_equal_operator_modifying_operand", "test_basic", "test_no_comdat_folding", "test_overflow", "test_count_index_remove_crashes", "test_preallocation", "mul", "test_iterator_pickle", "test_truth", "imul", "__eq__", "test_identity", "test_reversed_pickle", "test_keyword_args", "test_list_resize_overflow"], "function_calls": ["check", "list", "len", "super", "X", "iter", "str", "Y", "reversed", "int", "next", "type", "Z", "L", "range", "repr"], "class_names": ["ListTest", "Y", "Z", "L", "X"], "class_method_calls": ["list3.clear", "lst.clear", "self.assertEqual", "tuple.__itemsize__", "self.assertRaisesRegex", "list1.clear", "list_tests.CommonTest", "x.extend", "lst.index", "sys.getsizeof", "self.assertRaises", "lst.remove", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "lst.count", "unittest.main", "sys.maxsize", "list2.clear", "pickle.dumps", "self.assertTrue", "self.type2test", "self.assertFalse"]}, "test_listcomps.py": {"libraries": ["sys", "test.support", "gc", "test.test_listcomps"], "function_names": ["test_main"], "function_calls": ["len", "test_main", "hasattr", "range", "print"], "class_names": [], "class_method_calls": ["support.run_doctest", "sys.gettotalrefcount", "gc.collect"]}, "test_lltrace.py": {"libraries": ["unittest", "textwrap", "test.support.script_helper.assert_python_ok", "test.support", "os"], "function_names": ["test_lltrace_does_not_crash_on_subscript_operator"], "function_calls": ["assert_python_ok", "open"], "class_names": ["TestLLTrace"], "class_method_calls": ["fd.write", "support.TESTFN", "self.addCleanup", "unittest.TestCase", "os.unlink", "unittest.main", "textwrap.dedent"]}, "test_locale.py": {"libraries": ["unittest", "test.support.is_android", "codecs", "sys", "_locale", "test.support.check_warnings", "locale", "test.support.verbose", "os"], "function_names": ["check", "test_strcoll_with_diacritic", "test_japanese", "setUp", "test_grouping_and_padding", "_test_delocalize", "test_c", "test_hyphenated_encoding", "test_integer_grouping_and_padding", "test_delocalize", "test_currency", "_test_format_string", "_test_format", "test_latin_modifier", "test_defaults_UTF8", "test_getpreferredencoding", "test_format_deprecation", "test_strxfrm", "test_strcoll_3303", "test_atof", "test_english", "test_complex_formatting", "test_invalid_locale_format_in_localetuple", "_test_currency", "test_strxfrm_with_diacritic", "test_mapping", "test_getsetlocale_issue1813", "_test_atof", "test_percent_escape", "test_euro_modifier", "setUpClass", "_test_atoi", "test_integer_grouping", "test_padding", "test_locale_alias", "tearDown", "test_strcoll", "test_empty", "test_simple", "test_valencia_modifier", "test_decimal_point", "test_onlyOnePattern", "test_setlocale_category", "test_devanagari_modifier", "test_invalid_iterable_in_localetuple", "test_grouping", "test_atoi", "test_euc_encoding", "_test_formatfunc"], "function_calls": ["check_warnings", "int", "hasattr", "func", "print"], "class_names": ["TestLocaleFormatString", "CCookedTest", "TestEnUSNumberFormatting", "BaseDelocalizeTest", "TestCNumberFormatting", "EnUSNumberFormatting", "TestfrFRDelocalizeTest", "FrFRCookedTest", "NormalizeTest", "BaseFormattingTest", "TestFrFRNumberFormatting", "TestFormatPatternArg", "TestCDelocalizeTest", "TestNumberFormatting", "BaseLocalizedTest", "BaseCookedTest", "TestEnUSDelocalize", "TestEnUSCollation", "TestMiscellaneous", "EnUSCookedTest", "TestCollation"], "class_method_calls": ["locale.LC_NUMERIC", "sys.platform", "cls.enUS_locale", "self.assertLess", "locale.LC_ALL", "EnUSCookedTest.setUp", "locale.LC_MONETARY", "locale.format", "self.locale_type", "self.assertEqual", "locale._parse_localename", "locale.format_string", "_locale._getdefaultlocale", "locale.LC_TIME", "self.check", "locale._override_localeconv", "unittest.SkipTest", "self._test_format_string", "self._test_atoi", "self.addCleanup", "locale.setlocale", "locale.currency", "locale.atof", "BaseLocalizedTest.setUp", "locale.LC_COLLATE", "locale.atoi", "locale.Error", "self.subTest", "self._test_atof", "self.assertRaises", "unittest.skipIf", "self._test_format", "locale.getpreferredencoding", "self.assertWarns", "os.uname", "locale.strxfrm", "EnUSNumberFormatting.setUp", "locale.delocalize", "self.enUS_locale", "locale.getlocale", "codecs.lookup", "self._test_currency", "self.assertGreater", "os.environ", "self.cooked_values", "unittest.main", "locale.strcoll", "locale.LC_CTYPE", "locale.getdefaultlocale", "self.sep", "self._test_formatfunc", "self._test_delocalize", "self.skipTest", "locale.normalize", "unittest.TestCase", "locale.localeconv", "locale.locale_alias"]}, "test_logging.py": {"libraries": ["json", "http.server.BaseHTTPRequestHandler", "urllib.parse.parse_qs", "random", "struct", "logging.config", "logging.handlers", "warnings", "smtpd", "test.support", "socketserver.ThreadingTCPServer", "socketserver.DatagramRequestHandler", "unittest", "io", "threading", "copy", "asyncore", "datetime", "textwrap", "http.server.HTTPServer", "signal", "queue", "codecs", "pathlib", "test.support.script_helper.assert_python_ok", "weakref", "socket", "os", "multiprocessing", "win32evtlogutil", "logging", "re", "time", "gc", "win32evtlog", "tempfile", "socketserver.ThreadingUDPServer", "zlib", "unittest.mock.patch", "collections.namedtuple", "pywintypes", "urllib.parse.urlparse", "configparser", "ssl", "sys", "socketserver.StreamRequestHandler", "pickle", "test.support.script_helper.assert_python_failure"], "function_names": ["test_with_other_error_in_close_without_raise", "test_config4a_ok", "test_config0_using_cp_ok", "test_has_handlers", "handleError", "test_config2b_failure", "test_encoding_cyrillic_unicode", "test_custom_formatter_class_with_validate", "get_all_from_queue", "test_path_objects", "_assertTruesurvival", "test_should_not_rollover", "handle_datagram", "setup_via_listener", "test_log_invalid_level_with_raise", "test_file_created", "namer", "test_make_record_with_extra_overwrite", "get_record", "process_request", "test_compute_rollover_weekly_attime", "test_config8_ok", "test_style", "test_listen_config_10_ok", "test_flush", "__init__", "handle_request", "test_out_of_order_with_dollar_style", "test_queue_listener", "test_can_represent_stream_with_int_name", "test_queue_listener_with_StreamHandler", "test_callable_filter", "_test_with_failure_in_method", "test_filemode", "innermost", "test_specific_filters", "formatFunc", "test_post_fork_child_no_deadlock", "test_level", "test_time", "test_no_failure", "next_rec", "test_stream", "test_find_caller_with_stacklevel", "test_namedtuple", "test_filename", "tearDown", "test_regression_29220", "secs", "test_flat", "test_warnings_no_handlers", "test_dollars", "cleanup", "test_filter", "test_config14_ok", "test_basic", "rotator", "serve_forever", "log_message", "removeTarget", "test_caching", "assert_error_message", "filter", "test_is_enabled_for", "test_manager_loggerclass", "test_delay", "test_rollover", "test_log", "test_compute_rollover_daily_attime", "verify_reverse", "test_should_rollover", "test_exception", "test_config12_failure", "test_config1_ok", "test_queue_listener_with_multiple_handlers", "handle", "test_with_other_error_in_close_with_raise", "test_debug", "test_flush_on_close", "test_config_10_ok", "test_race", "test_format", "_log", "test_warnings", "test_child_loggers", "test_config5_ok", "test_disable", "test_error", "test_listen_config_1_ok", "test_braces", "remove_loop", "formatFooter", "process", "test_config3_failure", "test_has_handlers_no_propagate", "test_with_ioerror_in_close", "test_set_invalid_level", "test_nested_inherited", "test_persistent_loggers", "test_with_valueerror_in_acquire", "test_config_8_ok", "_test_log", "test_regression_22386", "test_with_other_error_in_acquire_without_raise", "test_custom_formatter_function_with_validate", "test_empty_filter", "test_warning", "test_custom_formatter_class_with_validate2_with_wrong_fmt", "test_logger_disabling", "test_listen_verify", "test_encoding_plain_file", "test_make_record_with_extra_no_overwrite", "verify_fail", "setUp", "test_logrecord_class", "test_handler_filter", "outer", "handle_socket", "test_queue_handler", "tzname", "assert_log_lines", "test_name", "test_config0_ok", "test_default", "test_rollover_filenames", "lock_holder_thread_fn", "test_main", "test_format_validate", "record_call", "_get_temp_domain_socket", "test_with_ioerror_in_flush", "formatException", "test_root_logger_aliases", "test_calls_task_done_after_stop", "process_message", "test_critical", "test_logger_filter", "test_stream_setting", "test_datefmt", "test_formatting", "formatHeader", "test_config4_ok", "test_invalid_style", "my_basic_config", "test_noserver", "log_at_all_levels", "test_custom", "start", "test_str_rep", "test_config2a_failure", "test_baseconfig", "test_config7_ok", "test_recursion_error", "test_config6_ok", "test_issue27935", "test_config13_failure", "test_handle_called_with_queue_queue", "_watch_for_survival", "server_bind", "test_force", "test_config2_failure", "test_with_other_error_in_flush_without_raise", "test_set_log_record_factory", "test_exception_excinfo", "test_multiprocessing", "test_builtin_handlers", "raise_error", "test_config_9_ok", "test_pickling", "test_nested_with_virtual_parent", "test_subclass_logger_cache", "test_logging_at_shutdown", "test_compute_rollover", "__getattr__", "stop", "test_with_valueerror_in_close", "test_config6_failure", "test_find_caller_with_stack_info", "test_defaults_do_no_interpolation", "test_dict_arg", "test_config11_ok", "test_handle_called_with_mp_queue", "test_race_between_set_target_and_flush", "setup_and_log", "test_no_messages_in_queue_after_stop", "assertLogFile", "test_is_enabled_for_disabled_logger", "test__all__", "filterfunc", "handlerFunc", "test_config_8a_ok", "get_request", "test_invalid_names", "test_config15_ok", "test_handlers", "test_nested", "next_message", "test_last_resort", "test_with_ioerror_in_acquire", "test_incompatible", "finish", "emit", "test_out_of_order", "test_set_logger_class", "test_nested_explicit", "test_error_handling", "test_optional", "test_no_kwargs", "test_log_invalid_level_no_raise", "test_invalid", "write", "test_with_other_error_in_flush_with_raise", "test_rotator", "test_info", "utcoffset", "server_close", "test_custom_formatter_class_with_validate3", "test_strformatstyle", "test_custom_formatter_class_with_validate2", "inner", "test_output", "test_with_other_error_in_acquire_with_raise", "test_stringtemplatestyle", "apply_config", "test_with_valueerror_in_flush", "test_percent"], "function_calls": ["_OurHandler", "object", "CheckingFilter", "_NotAnIntOrString", "TestHTTPServer", "assert_python_ok", "getattr", "outer", "cls", "NONE", "print", "id", "RuntimeError", "Adapter", "namer", "isinstance", "test_main", "TestBufferingFormatter", "TestStreamHandler", "repr", "BadStream", "super", "AttributeError", "str", "tuple", "locals", "FakeHandler", "GarrulousFilter", "_get_temp_domain_socket", "dict", "writer_class", "open", "old_basic_config", "AssertionError", "innermost", "range", "setattr", "RecordingHandler", "parse_qs", "list", "assert_python_failure", "MockRaceConditionHandler", "ref", "assertRaises", "int", "namedtuple", "zip", "type", "hcls", "secs", "StreamWithIntName", "hasattr", "UTC", "len", "TestSMTPServer", "inner", "m", "error", "urlparse", "Resource", "NOT_NONE", "VerySpecificFilter", "TypeError", "map", "log_method"], "class_names": ["ConfigFileTest", "_OurHandler", "UnixSysLogHandlerTest", "CheckingFilter", "_NotAnIntOrString", "TestHTTPServer", "MemoryHandlerTest", "ModuleLevelMiscTest", "LogRecordFactoryTest", "FileHandlerTest", "BufferingFormatterTest", "ConfigDictTest", "ExceptionTest", "DelegatingTCPRequestHandler", "HTTPHandlerTest", "TestUDPServer", "Adapter", "UnixSocketHandlerTest", "FormatterTest", "BasicFilterTest", "TestBufferingFormatter", "TestStreamHandler", "QueueListenerTest", "BadStream", "StreamHandlerTest", "WarningsTest", "CustomHandler", "BaseFileTest", "DelegatingUDPRequestHandler", "SMTPHandlerTest", "HandlerTest", "QueueHandlerTest", "FakeHandler", "GarrulousFilter", "BaseTest", "DerivedLogRecord", "NTEventLogHandlerTest", "ControlMixin", "myCustomFormatter", "LastResortTest", "ShutdownTest", "DelegatingHTTPRequestHandler", "CustomLevelsAndFiltersTest", "RecordingHandler", "MyHandler", "DatagramHandlerTest", "MockRaceConditionHandler", "LoggerTest", "SysLogHandlerTest", "TestTCPServer", "UnixDatagramHandlerTest", "ChildLoggerTest", "ManagerTest", "BuiltinLevelsTest", "ExceptionFormatter", "LogRecordTest", "MemoryTest", "StreamWithIntName", "RotatingFileHandlerTest", "UTC", "LoggerAdapterTest", "IPv6SysLogHandlerTest", "TestSMTPServer", "TestUnixStreamServer", "BasicConfigTest", "SocketHandlerTest", "TimedRotatingFileHandlerTest", "TestUnixDatagramServer", "EncodingTest", "VerySpecificFilter", "MyLogger", "MiscTestCase"], "class_method_calls": ["self.saved_level_to_name", "self.variants", "self.config2b", "ConfigFileTest.config1", "self.config7", "root_logger.removeHandler", "thread.start", "logger.handlers", "h.close", "BaseTest.setUp", "self.message_num", "time.localtime", "stream.getvalue", "method.upper", "ssl.PROTOCOL_TLS_SERVER", "pickle.HIGHEST_PROTOCOL", "os.linesep", "configparser.ConfigParser", "now.strftime", "multiprocessing.Queue", "refed_h.acquire", "adapter_adapter.prefix", "support.captured_stdout", "self.server", "e.SourceName", "rh.rotator", "support.HOST", "fh.stream", "GRANDCHILD.log", "time.timezone", "self.get_record", "old_string_io.getvalue", "BaseTest.tearDown", "logging.weakref", "adapter_adapter.manager", "self.log_output", "self.log_format", "test_logger.debug", "handler.addFilter", "self.custom_formatter_with_function", "formatter._style", "l1.getChild", "refed_h.release", "self.log_at_all_levels", "self.assertNotIn", "warnings.warn", "json.dumps", "recording.records", "os.fork", "test_logger.setLevel", "self.sub_handler", "self.serve_forever", "self._threading_key", "self.handlers", "INF_UNDEF.log", "struct.unpack", "datetime.tzinfo", "root._cache", "r.thread", "root.removeHandler", "self.assertIsNot", "self.mem_logger", "win32evtlogutil.SafeFormatMessage", "log.addHandler", "os.path", "locks_held__ready_to_fork.set", "f.usesTime", "refed_h.name", "gc.collect", "time.mktime", "r.getChild", "r.process", "h.ino", "self.saved_loggers", "self.process_message", "s.find", "smtpd.SMTPServer", "self.config4a", "request.connection", "r.stack_info", "self.test_config1_ok", "locks_held__ready_to_fork.wait", "f.format", "name.startswith", "m.msg", "r.created", "DEB.error", "server.server_port", "self.setup_via_listener", "self.wfile", "server.port", "result.update", "server.server_address", "fh.handle", "foo.setLevel", "self.config4", "logging.FileHandler", "self.config8", "logging._levelToName", "threading.Semaphore", "os.listdir", "DEB.info", "self.record_call", "f.converter", "self.config2a", "logging.lastResort", "support.check__all__", "log_record.message", "self.assertIsNotNone", "logging.LoggerAdapter", "dt.astimezone", "ControlMixin.__init__", "logging.config", "self.config2", "pywintypes.error", "self.root_hdlr", "self.fail", "rh.emit", "fh.close", "record.name", "record.getMessage", "self.assertLogFile", "self.process_request", "dead.append", "f.formatTime", "INF_ERR_UNDEF.debug", "logging.Manager", "result.__dict__", "rh.namer", "logging.error", "textwrap.dedent", "logging.exception", "logging.Logger", "server.stop", "INF_UNDEF.debug", "support.skip_if_broken_multiprocessing_synchronize", "request.headers", "text.encode", "socket.socket", "logger.warning", "listener.stop", "loggerDict.clear", "os.write", "remover.start", "request.command", "sys.stdout", "GRANDCHILD.debug", "ThreadingTCPServer.__init__", "logging.getLoggerClass", "self._thread", "r.threadName", "spam.info", "self.config8a", "self.logger1", "warnings.catch_warnings", "data.msg", "self.assertRaises", "handler.close", "m1.msg", "h2.close", "logging.Formatter", "win32evtlog.EVENTLOG_BACKWARDS_READ", "man.getLogger", "r.processName", "record.msg", "self.handled", "INF_ERR.log", "h.records", "sock.send", "DatagramHandlerTest.tearDown", "self.h_hdlr", "request.end_headers", "s.startswith", "record.exc_info", "stream.truncate", "self.custom_formatter_class_validate2", "root.debug", "child_logger.hasHandlers", "logging.makeLogRecord", "ssl.SSLContext", "logging._nameToLevel", "self.que_logger", "logging.ERROR", "file.getvalue", "self._test_log", "support.requires_type_collecting", "INF.error", "logging.debug", "record.args", "self.config9b", "asyncore.close_all", "io.StringIO", "fork_happened__release_locks_and_end_thread.wait", "self.fn", "self.custom_formatter_class_validate3", "h.LOG_USER", "self.config5", "logging._releaseLock", "self.assertIsNone", "r.removeHandler", "logging.warning", "fn.replace", "self._assertTruesurvival", "self.mem_hdlr", "INF_ERR_UNDEF.error", "logger2.getEffectiveLevel", "sock.close", "handler.target", "r.msecs", "self._quit", "time.monotonic", "self.assertLess", "self.messages", "request.path", "man.setLoggerClass", "logging.handlers", "self.config10", "logging.shutdown", "logging.CRITICAL", "logging._acquireLock", "fh.emit", "self.addCleanup", "SysLogHandlerTest.tearDown", "request.send_response", "sf.read", "support.check_no_resource_warning", "self.rmfiles", "logging.PercentStyle", "socket.AF_INET6", "self.config1", "INF_ERR.info", "logger.addHandler", "rh.close", "self.address", "r.addHandler", "self._handler", "logger.log", "self.next_message", "exc.__class__", "INF_ERR_UNDEF.info", "CHILD.log", "mock_handle.call_count", "self._watch_for_survival", "h.error_record", "INF_UNDEF.error", "logging.setLoggerClass", "ERR.log", "log.warning", "rh.utc", "os.waitpid", "self.orig_factory", "stream.close", "win32evtlog.EVENTLOG_SEQUENTIAL_READ", "handler.setLevel", "io.BytesIO", "called.append", "self.TIMEOUT", "logging.BufferingFormatter", "warnings.showwarning", "self.id", "exc.__traceback__", "self.name", "self._test_with_failure_in_method", "data.endswith", "data.name", "INF.debug", "self.check_no_resource_warning", "server.ready", "formatter.datefmt", "logging.root", "HTTPServer.__init__", "logging.captureWarnings", "f.read", "h.name", "support.patch", "man.logRecordFactory", "self.handle_datagram", "logger.error", "self.que_hdlr", "pathlib.Path", "logging.getLogRecordFactory", "logging.getLevelName", "target.threads", "manager.loggerDict", "ERR.setLevel", "self.config6", "self.repeat", "h.dev", "self.apply_config", "os.WNOHANG", "hyphenated.critical", "self.handle_socket", "child_logger.propagate", "time.sleep", "bar.debug", "ERR.warning", "self.skipTest", "self.prefix", "sock.settimeout", "win32evtlog.GetNumberOfEventLogRecords", "ThreadingUDPServer.__init__", "support.join_thread", "zlib.decompress", "bc.convert", "INF_UNDEF.info", "loggerDict.update", "unittest.skipUnless", "warnings.filterwarnings", "remover.join", "m2.msg", "queue.close", "INF_ERR.debug", "self.assertIs", "zlib.compress", "t.start", "support.IPV6_ENABLED", "logger.info", "foo.debug", "r.asctime", "SocketHandlerTest.setUp", "self.post_data", "self.out_of_order", "self.custom_formatter_class_validate", "my_logging_levels.items", "logger1.isEnabledFor", "logging.logProcesses", "self.config0", "f.filter", "t.ready", "self.assertTrue", "root.setLevel", "support.requires_zlib", "handler.removeFilter", "stream.seek", "self.shutdown", "self.records", "self.config14", "h.shouldFlush", "self._closed", "DEB.debug", "logging.disable", "unittest.SkipTest", "self.filter", "logger2.isEnabledFor", "root.addHandler", "DatagramHandlerTest.setUp", "t.setDaemon", "DEB.warning", "df.write", "self.config9", "a_file.close", "rh.shouldRollover", "support.run_unittest", "listener.start", "ERR.info", "tf.read", "INF_ERR_UNDEF.warning", "handler.stream", "logger.removeHandler", "logger2._cache", "logger2.setLevel", "self.port", "self.threads", "logging.FATAL", "self.logger_states", "logger1.setLevel", "writer_class.encoding", "spam_eggs.info", "record.levelno", "self.logger2", "logger.debug", "log.removeHandler", "sslctx.load_cert_chain", "sys.platform", "config1.replace", "self.config1a", "logging.Filter", "f.startswith", "test_logger.info", "e.winerror", "self.saved_handlers", "f._fmt", "patch.object", "self.handle_request", "self.recording", "self.ready", "v.pop", "DEB.setLevel", "support.unlink", "handler.formatter", "self.socket", "logging.addLevelName", "conn.recv", "logging.raiseExceptions", "random.randint", "time.time", "ssl.create_default_context", "INF_ERR.setLevel", "man.setLogRecordFactory", "self.resource", "r.exc_text", "codecs.getwriter", "f.close", "self.assert_error_message", "os.kill", "manager.disable", "ERR.error", "remover.daemon", "logging.StringTemplateStyle", "INF.setLevel", "self.command", "support.threading_cleanup", "message.append", "logging.setLogRecordFactory", "new_string_io.getvalue", "self.server_exception", "datetime.timedelta", "self.assertIn", "c1.getChild", "data.decode", "self.handle_time", "cp.read_file", "os.remove", "queue.Empty", "self.logger", "support.captured_stderr", "self.deletion_time", "win32evtlog.OpenEventLog", "unittest.skipIf", "sys.exc_info", "logger1._cache", "h.foo", "root.isEnabledFor", "self.config13", "log_queue.close", "self.adapter", "logging.WARNING", "request.packet", "SysLogHandlerTest.setUp", "pickle.dumps", "os.name", "prev.strftime", "logging._handlerList", "h.unixsocket", "threading.Thread", "self._map", "stderr.getvalue", "match.groups", "self.disable_test", "expected.stream", "GRANDCHILD.info", "INF_ERR.warning", "asyncore.loop", "self.assertEqual", "socket.SOCK_STREAM", "CHILD.info", "self.cls", "request.rfile", "fork_happened__release_locks_and_end_thread.set", "handler.matches", "self.close", "server.start", "self.expected_log_pat", "socket.AF_UNIX", "h1.close", "support.TestHandler", "root.warning", "h.setStream", "self.root_formatter", "self.error_record", "os.close", "self.queue", "logging._at_fork_reinit_lock_weakset", "h.toaddrs", "time.gmtime", "ERR.debug", "self.stream", "fh.setFormatter", "self.saved_handler_list", "self.cleanup", "self.saved_name_to_level", "sys.stderr", "INF.info", "self.setup_and_log", "logger.disabled", "logger_dict.copy", "logging.logThreads", "lock_holder_thread.join", "refed_h.sub_handler", "signal.SIGKILL", "self.assertIsInstance", "datetime.datetime", "h.handle", "logging.info", "spam_bakedbeans.info", "adapter.manager", "tests.append", "h.emit", "log_record.msg", "a_file.getvalue", "queue.join_thread", "INF.log", "output.getvalue", "logging.NOTSET", "self.raise_error", "logging.INFO", "h.terminator", "adapter_adapter.log", "logging.logMultiprocessing", "INF_ERR.error", "support.swap_attr", "self.removeTarget", "copy.deepcopy", "pickle.loads", "self.next_rec", "test_logger.addHandler", "logging.StreamHandler", "self.get_all_from_queue", "log_queue.get_nowait", "win32evtlog.ReadEventLog", "unittest.TestCase", "self.log_data", "self.assertFalse", "self.sslctx", "h.setFormatter", "mp.current_process", "INF_UNDEF.warning", "logging.NullHandler", "s.endswith", "self.poll_interval", "logging.traceback", "logging.basicConfig", "logging.Handler", "log_format_str.format", "queue.Queue", "h.facility", "self.config12", "err.decode", "SocketHandlerTest.tearDown", "DEB.log", "logging.LogRecord", "self.common", "self.sock_hdlr", "self.called", "support.threading_setup", "log_queue.join_thread", "logging._logRecordFactory", "datetime.time", "logged.append", "self.assertGreater", "logging.DEBUG", "root.manager", "rv.__dict__", "re.compile", "lock_holder_thread.start", "sock.connect", "INF_ERR_UNDEF.log", "e.message", "logging._handlers", "pat.search", "self.server_close", "socket.AF_INET", "ini.encode", "self.sl_hdlr", "self.config9a", "t.port", "stream.read", "threading.Event", "logging.getLogger", "spam_eggs_fish.info", "tempfile.mkstemp", "log_queue.task_done", "self.original_logging_level", "CHILD.debug", "INF.warning", "support.run_with_locale", "struct.pack", "data.args", "self.root_logger", "weakref.ref", "os.unlink", "support.Matcher", "self.doCleanups", "root_logger.addHandler", "self.config11", "self.server_class", "logging.BASIC_FORMAT", "self.config3", "logger.setLevel", "self.assert_log_lines", "os._exit", "self._survivors", "rh.computeRollover"]}, "test_long.py": {"libraries": ["unittest", "random", "sys", "math", "test.support", "array"], "function_names": ["test_lshift_of_zero", "test_floordiv", "check", "__le__", "test_nan_inf", "check_truediv", "test_true_division", "__eq__", "test_format", "test__format__", "test_division", "test_small_ints", "__ge__", "test_float_overflow", "check_bitop_identities_2", "test_mod_division", "_cmp__", "__lt__", "__init__", "test_round", "test_negative_shift_count", "test_float_conversion", "getran", "truediv", "test_huge_lshift_of_zero", "test_logs", "check_format_1", "check_float_conversion", "test_as_integer_ratio", "test_to_bytes", "__gt__", "slow_format", "check_division", "__trunc__", "test_huge_rshift", "check_bitop_identities_3", "test_bitop_identities", "test_from_bytes", "test_karatsuba", "test_bit_length", "test_mixed_compares", "int_to_float", "__long__", "test_long", "test_access_to_nonexistent_digit_0", "test_huge_lshift", "test_huge_rshift_of_huge", "test_conversion", "test_shift_bool", "__new__", "test_correctly_rounded_true_division", "getran2", "check_bitop_identities_1"], "function_calls": ["check", "format", "min", "getattr", "abs", "memoryview", "mapper", "Integer", "repr", "isinstance", "str", "LongTrunc", "truediv", "AssertionError", "range", "eq", "list", "int", "type", "OverflowError", "JustLong", "bool", "float", "eval", "divmod", "len", "bytearray", "max", "int_to_float", "chr", "bin", "myint", "ZeroDivisionError", "Rat", "TypeError", "ord", "map", "round"], "class_names": ["myint2", "myint", "LongTrunc", "Rat", "LongTest", "JustLong", "Integer", "myint3"], "class_method_calls": ["digits.reverse", "a.bit_length", "mapper.__name__", "test_dict.items", "math.floor", "int.from_bytes", "self.assertAlmostEqual", "self.check_bitop_identities_3", "self.assertEqual", "int.__new__", "self.assertNotEqual", "digits.append", "support.requires_IEEE_754", "sys.int_info", "self.assertRaisesRegex", "self.assertIs", "self._cmp__", "myint2.from_bytes", "self.getran", "n.bit_length", "self.check_float_conversion", "other.n", "sys.float_info", "math.log", "math.ldexp", "other.d", "myint.from_bytes", "self.check_format_1", "special.append", "self.check_bitop_identities_2", "self.slow_format", "self.check_truediv", "digits.extend", "self.assertRaises", "self.subTest", "test.to_bytes", "self.n", "math.frexp", "value.as_integer_ratio", "math.e", "random.randrange", "self.assertGreater", "b.bit_length", "test_values.extend", "unittest.main", "myint3.from_bytes", "array.array", "random.randint", "test_values.append", "math.log10", "support.bigmemtest", "sys.maxsize", "self.d", "tests.items", "self.foo", "random.random", "support.cpython_only", "cases.extend", "x.bit_length", "self.assertTrue", "unittest.TestCase", "self.check_division", "self.check_bitop_identities_1"]}, "test_longexp.py": {"libraries": ["unittest"], "function_names": ["test_longexp"], "function_calls": ["len", "eval"], "class_names": ["LongExpText"], "class_method_calls": ["unittest.TestCase", "self.assertEqual", "unittest.main"]}, "test_lzma.py": {"libraries": ["random", "io.BytesIO", "test.support", "test.support.run_unittest", "unittest", "io.DEFAULT_BUFFER_SIZE", "lzma.LZMAFile", "lzma.LZMAError", "pathlib", "os", "test.support.unlink", "_compression", "test.support.bigmemtest", "io.UnsupportedOperation", "test.support.TESTFN", "lzma.LZMACompressor", "test.support.import_module", "sys", "pickle", "test.support._4G", "lzma.LZMADecompressor"], "function_names": ["test_roundtrip_raw_empty", "test_compressor_bigmem", "test_seek_backward_relative_to_end", "test_roundtrip_xz", "test_writable", "test_filter_properties_roundtrip", "test_read1_0", "test_read_10", "test_decompressor_inputbuf_2", "test_format_and_filters", "test_decompressor_bug_28275", "test_roundtrip_empty_chunks", "test_decompress_memlimit", "__init__", "test_decompressor_chunks", "test_read1", "test_write", "test_write_bad_args", "test_filename", "test_writelines", "test_tell_bad_args", "test_decompress_multistream", "test_seek_forward", "_test_decompressor", "test_seek_bad_args", "test_read_multistream_buffer_size_aligned", "test_seek_forward_relative_to_current", "test_bad_filter_spec", "test_write_to_file", "test_binary_modes", "test_write_append_to_file", "test_seek_backward", "test_roundtrip_alone", "test_seek_past_end", "test_decompress_multistream_trailing_junk", "__exit__", "test_decompressor_inputbuf_1", "test_decompressor_multistream", "test_init", "test_closed", "test_read1_10", "test_init_mode", "test_init_with_x_mode", "test_readlines", "test_is_check_supported", "test_decompressor_xz", "test_decompressor_raw_2", "test_decompressor_raw_1", "test_seekable", "test_read1_bad_args", "test_decompressor_memlimit", "test_issue21872", "test_seek_backward_across_streams", "test_decompress_limited", "test_roundtrip", "test_decompressor_chunks_empty", "test_init_bad_mode", "test_read_multistream", "test_init_with_filename", "test_init_bad_check", "test_init_with_preset_and_filters", "test_read", "test_decompressor_bad_input", "test_decompressor_after_eof", "test_init_bad_filter_spec", "test_main", "test_text_modes", "test_read_from_file_with_bytes_filename", "test_read_truncated", "test_decompressor_inputbuf_3", "test_write_append", "test_init_with_PathLike_filename", "test_encoding", "test__encode_filter_properties", "test_newline", "test_pickle", "test_fileno", "test_roundtrip_chunks", "test_seek_past_start", "test_read_multistream_trailing_junk", "test_decompressor_bigmem", "test_x_mode", "test_decompressor_raw_3", "test_decompress_incomplete_input", "test_simple_bad_args", "test_refleaks_in_decompressor___init__", "test_read_bad_data", "test_read_bad_args", "test_readable", "test_write_10", "test_seek_forward_across_streams", "test_decompressor_alone", "test_read_incomplete", "test_decompressor_chunks_maxsize", "test_peek_bad_args", "test_write_to_file_with_bytes_filename", "test_with_pathlike_filename", "test_read_0", "test_iterator", "test_encoding_error_handler", "test_decompress_bad_input", "test_seek_forward_relative_to_end", "__enter__", "test_roundtrip_raw", "test_bad_params", "test_close", "test_read_from_file", "test_tell", "test_init_bad_preset", "test_read1_multistream", "test_peek", "test__decode_filter_properties", "test_decompress_good_input", "test_decompressor_raw_4", "test_readline", "test_read_trailing_junk", "test_bad_args", "test_decompressor_auto", "test_decompressor_unused_data", "test_decompress_trailing_junk"], "function_calls": ["BytesIO", "list", "test_main", "len", "gettotalrefcount", "LZMAFile", "iter", "bigmemtest", "import_module", "int", "LZMACompressor", "TempFile", "open", "run_unittest", "unlink", "float", "range", "LZMADecompressor"], "class_names": ["CompressDecompressFunctionTestCase", "CompressorDecompressorTestCase", "FileTestCase", "TempFile", "OpenTestCase", "MiscellaneousTestCase"], "class_method_calls": ["lzma.CHECK_ID_MAX", "lzma.FORMAT_XZ", "f.readable", "d2.eof", "self.assertEqual", "f._fp", "lzd.unused_data", "d2.decompress", "lzma.PRESET_EXTREME", "lzma.LZMAError", "f.peek", "lzc.flush", "fp.closed", "decomp.read", "self.assertRaises", "ddata.strip", "chunks.append", "bio.getvalue", "lzma._decode_filter_properties", "pickle.HIGHEST_PROTOCOL", "lzma.CHECK_UNKNOWN", "TESTFN.encode", "lzma.FILTER_LZMA1", "os.linesep", "lzd.__init__", "lzd.check", "self.assertTrue", "self.assertIsInstance", "lzc.compress", "f.writelines", "self._test_decompressor", "lzma.CHECK_NONE", "out.append", "f.seek", "f.seekable", "f.tell", "decomp._buffer", "dst.getvalue", "self.assertListEqual", "support.skip_if_pgo_task", "lzma.PRESET_DEFAULT", "INPUT.startswith", "self.filename", "lzma.compress", "d1.eof", "bio.seek", "lzma.is_check_supported", "unittest.TestCase", "self.assertFalse", "self.assertLess", "lzd.needs_input", "lzma.FILTER_DELTA", "self.assertLessEqual", "f.write", "f.readline", "self.addCleanup", "INPUT.decode", "lzma.FORMAT_ALONE", "f.writable", "random.getrandbits", "lzma.CHECK_CRC64", "self.assertGreater", "d2.needs_input", "src.closed", "lzma.CHECK_CRC32", "lzma.FILTER_IA64", "f.readlines", "d1.decompress", "f.closed", "f.close", "blocks.append", "lzd.decompress", "lzma.FORMAT_AUTO", "lzma.FILTER_X86", "src.seekable", "self.assertAlmostEqual", "lzma.FORMAT_RAW", "lzma.FILTER_LZMA2", "lzma.CHECK_SHA256", "self.data", "support.get_attribute", "f.read", "cdata.append", "pathlib.Path", "lzd.eof", "lzma.decompress", "_compression.BUFFER_SIZE", "uncompressed.replace", "f.read1", "lzma.open", "self.skipTest", "pickle.dumps", "support.refcount_test", "f.fileno", "lzma._encode_filter_properties"]}, "test_mailbox.py": {"libraries": ["unittest", "re", "io", "time", "test.support", "textwrap", "glob", "sys", "tempfile", "mailbox", "email.message", "socket", "os", "stat", "email"], "function_names": ["_test_remove_or_delitem", "test_maildir_to_maildir", "test_initialize_with_unixfrom", "test_file_permissions", "_test_iteration", "test_remove", "_delete_recursively", "test_initialize_with_string", "test_flags", "test_create_tmp", "test_refresh", "test_iteritems", "test_add_binary_nonascii_file", "test_notimplemented", "get_file", "test_clear", "test_info_and_flags", "test_flush", "test_open_close_open", "test_type_specific_attributes_removed_on_conversion", "test_from", "dummy_factory", "__init__", "test_folder_file_perms", "test_add_nonascii_StringIO_raises", "test_explain_to", "test_keys", "_test_close", "test_len", "_check_basics", "createMessage", "test_maildir_to_babyl", "test_issue2625", "test_mboxmmdf_to_babyl", "test_list_folders", "test_issue7627", "test_delitem", "test_clean", "test_get_file_can_be_closed_twice", "tearDown", "test_add_MM", "test_maildir_to_mh", "test_babyl_to_maildir", "test_file_perms", "test_initialize_with_file", "test_add_invalid_8bit_bytes_header", "test_lookup", "_test_readlines", "test_get_folder", "test_add_from_string", "test_initialize_new", "test_iterkeys", "_post_initialize_hook", "test_itervalues", "test_get", "test_pop", "test_get_message", "assertMailboxEmpty", "test_all_eMM_attribues_exist", "test_mh_to_babyl", "test_popitem_and_flush_twice", "test_lock_conflict", "test_get_MM", "test_readlines", "test_x_from_bytes", "test_nonempty_maildir_both", "test_invalid_nonascii_header_as_string", "test_add_binary_file", "test_add_StringIO_warns", "test_mboxmmdf_to_mh", "test_popitem", "test_sequences", "test_add_8bit_body", "test_plain_to_x", "test_directory_in_folder", "test_initialize_with_binary_file", "test_empty_maildir", "test_x_to_plain", "test_mh_to_mh", "test_add_doesnt_rewrite", "test_add_and_close", "refreshed", "test_babyl_to_babyl", "test_folder", "test_add", "test_read", "test_terminating_newline", "test_initialize", "setUp", "test_initialize_with_nothing", "_check_sample", "_check_from", "test_get_bytes", "test_main", "test_items", "_check_iteration", "test_seek_and_tell", "test_mh_to_mboxmmdf", "test_reread", "close", "test_x_to_invalid", "test_visible", "test_initialize_with_eMM", "test_getitem", "raiser", "test_maildir_to_mboxmmdf", "_test_readline", "test_contains", "test_initialize_incorrectly", "test_mboxmmdf_to_maildir", "_test_seek_and_tell", "test_nonempty_maildir_cur", "test_relock", "test_closing_fd", "test_babyl_to_mh", "test_add_that_raises_leaves_mailbox_empty", "test_add_text_file_warns", "_test_read", "test_add_from_bytes", "_test_flush_or_close", "test_date", "test_mh_to_maildir", "test_message_separator", "test_add_mbox_or_mmdf_message", "test__all__", "test_update", "test_become_message", "test_close", "test_nonempty_maildir_new", "test_get_string", "test_get_bytes_from", "test_labels", "test_subdir", "test_add_and_remove_folders", "test_set_item", "test_permissions_after_flush", "_get_lock_path", "test_dump_message", "test_mboxmmdf_to_mboxmmdf", "test_initialize_existing", "test_babyl_to_mboxmmdf", "test_lock_unlock", "test_pack", "test_consistent_factory", "test_get_string_from", "test_get_file", "test_set_MM", "test_readline", "test_discard", "test_info", "test_iteration", "test_iter", "test_values", "test_refresh_after_safety_period", "test_add_nonascii_string_header_raises"], "function_calls": ["object", "FakeMailBox", "sorted", "abs", "class2_", "test_main", "super", "iter", "class_", "str", "open", "Exception", "range", "list", "method", "class2", "FakeFileLikeObject", "set", "int", "next", "enumerate", "class1", "refreshed", "hasattr", "len", "bytes", "map"], "class_names": ["FakeMailBox", "TestMMDFMessage", "TestMMDF", "TestMH", "TestMessage", "_TestMboxMMDFMessage", "FakeMessage", "TestMbox", "TestMboxMessage", "MaildirTestCase", "TestMailbox", "TestBabylMessage", "TestFakeMailBox", "FakeFileLikeObject", "TestPartialFile", "TestMaildir", "TestMailboxSuperclass", "TestMessageConversion", "TestProxyFile", "TestBabyl", "TestMHMessage", "TestMaildirMessage", "MiscTestCase", "_TestSingleFile", "TestBase", "TestProxyFileBase", "_TestMboxMMDF"], "class_method_calls": ["msg0.add_sequence", "box.flush", "os.mkdir", "message.set_payload", "msg0.set_labels", "msg._subdir", "support.rmdir", "match.groups", "self.closed", "self._check_sample", "proxy.close", "c.send", "c.recv", "part.get_payload", "unittest.skipUnless", "msg_maildir.set_date", "self.assertEqual", "os.getpid", "msg.remove_label", "self._check_iteration", "self.assertGreaterEqual", "support.create_empty_file", "p.send", "msg.get_date", "mailbox.Babyl", "msg_maildir.set_flags", "self.assertIs", "mailbox._mboxMMDFMessage", "self._test_seek_and_tell", "box.items", "support.TESTFN", "box.get_folder", "box.get_bytes", "msg2.get_visible", "msg2.get_labels", "msg0.set_sequences", "msg.add_label", "visible.get_payload", "msg2.set_sequences", "subfolder._path", "folder1.keys", "self._non_latin_bin_msg", "msg.__dict__", "self.assertRaises", "time.localtime", "proxy.readlines", "box.iteritems", "box.__getitem__", "box.__contains__", "subj.encode", "socket.gethostname", "self._post_initialize_hook", "tmp_file.close", "box.__iter__", "self._test_readlines", "time.gmtime", "box.update", "msg.set_unixfrom", "box.clear", "mailbox.Maildir", "msg_maildir.set_subdir", "self._file", "os.linesep", "glob.escape", "self.all_mailbox_types", "msg.get_subdir", "msg.set_flags", "self.assertTrue", "box.files", "proxy1.tell", "self.assertIsInstance", "self._check_basics", "folder1_alias._factory", "box.pop", "mailbox.MMDFMessage", "msg_returned.get_subdir", "socket.socketpair", "msg.get_labels", "self._dir", "msg0.add_label", "proxy.read", "self._counter", "box.get_message", "self._test_flush_or_close", "msg.set_labels", "self._get_lock_path", "box.discard", "msg.set_date", "value.get_payload", "msg.remove_flag", "box.add", "self.files", "p.close", "box.remove", "box.itervalues", "msg.update_visible", "email.generator", "stat.ST_MODE", "proxy0.tell", "output.getvalue", "os.umask", "msg1.set_labels", "self.assertNotIn", "box.add_folder", "io.StringIO", "box.__setitem__", "self._delete_recursively", "msg.get_all", "box.get", "glob.glob", "msg.get_sequences", "os.fork", "f.seek", "msg._sequences", "keys.index", "box.unlock", "msg.get_payload", "support.run_unittest", "proxy.seek", "mailbox.Message", "msg.is_multipart", "pattern.match", "self._test_remove_or_delitem", "msg.set_visible", "self.assertIsNone", "proxy.readline", "msg.keys", "msg.get_visible", "box.values", "keys.append", "os.path", "unixfrom.encode", "mailbox.MMDF", "self._nonascii_msg", "msg.set_from", "email.message", "msg.get_info", "unittest.TestCase", "values.append", "self.assertFalse", "p.recv", "msg1.set_sequences", "re.match", "box.get_string", "box.colon", "self._test_readline", "msg.get_from", "self.assertLess", "sys.platform", "msg.set_subdir", "time.asctime", "_sample_headers.items", "_sample_message.encode", "new_folder._factory", "box.close", "msg.add_flag", "proxy.tell", "msg0.get_payload", "mailbox.MaildirMessage", "fp.write", "st.st_mode", "msg.remove_sequence", "os.utime", "self.createMessage", "tempfile.TemporaryFile", "f.write", "self.addCleanup", "eMM.__dict__", "os.link", "self.assertWarns", "box.popitem", "msg2.get_from", "mailbox.MHMessage", "support.unlink", "mailbox.ExternalClashError", "mailbox.Mailbox", "stat.S_ISDIR", "data1.decode", "message.get_payload", "self._template", "mailbox._PartialFile", "foo_stat.st_mtime", "c.close", "target.__dict__", "folder0.add", "self._check_from", "hostname.replace", "time.time", "seen.append", "io.TextIOWrapper", "f.readlines", "re.compile", "returned_keys.append", "os.chmod", "os.listdir", "msg_mboxMMDF.set_flags", "tmp_file.read", "f.close", "box.__delitem__", "self.assertMailboxEmpty", "support.check__all__", "self._path", "msg.set_info", "file.read", "self.assertIsNotNone", "msg._explain_to", "msg2.set_info", "mailbox.mbox", "self._box", "mailbox.MH", "msg.set_sequences", "self.assertNotIsInstance", "_bytes_sample_message.split", "os.waitpid", "box.lock", "email.message_from_string", "self.tearDown", "io.BytesIO", "msg._labels", "_bytes_sample_message.replace", "returned_values.append", "self.assertRaisesRegex", "msg_returned.get_payload", "msg_mboxMMDF.set_from", "mailbox._ProxyFile", "self._test_iteration", "msg0.set_flags", "self.assertIn", "support.rmtree", "self.fail", "msg_maildir.get_date", "proxy.closed", "box.get_file", "TestMailbox.setUp", "f.read", "os.remove", "box.iterkeys", "tmp_file.write", "support.patch", "box.keys", "folder0._factory", "oldbox.close", "msg3.set_sequences", "msg2.get_flags", "self._test_close", "visible.keys", "self.mbox", "support.reap_children", "msg.add_sequence", "msg._become_message", "msg_returned.get_flags", "os.unlink", "tmp_file.name", "data0.decode", "textwrap.dedent", "mailbox.BabylMessage", "folder._factory", "self._test_read", "_sample_message.split", "self._msgfiles", "msg.get_flags", "folder1.get_string", "msg._info", "self._factory", "os.name", "os.stat", "os._exit", "mailbox.mboxMessage", "tmp_file.seek", "box.__len__"]}, "test_mailcap.py": {"libraries": ["unittest", "copy", "mailcap", "test.support", "os"], "function_names": ["test_test", "test_readmailcapfile", "test_findmatch", "_run_cases", "test_lookup", "test_system_mailcap", "test_listmailcapfiles", "test_mock_getcaps", "test_subst"], "function_calls": ["open"], "class_names": ["FindmatchTest", "GetcapsTest", "HelperFunctionTest"], "class_method_calls": ["self.assertIsInstance", "os.pathsep", "MAILCAPDICT_DEPRECATED.values", "unittest.skipUnless", "self.assertEqual", "test.support", "mailcap.lookup", "caps.items", "self.assertWarns", "mailcap.listmailcapfiles", "self._run_cases", "copy.deepcopy", "unittest.TestCase", "self.assertListEqual", "unittest.main", "mailcap.findmatch", "mailcap.getcaps", "mailcap.readmailcapfile", "os.path", "self.assertDictEqual", "os.name", "entry.pop", "mailcap.subst"]}, "test_marshal.py": {"libraries": ["unittest", "_testcapi", "io", "types", "sys", "test.support", "os", "marshal", "array"], "function_names": ["test_loads_reject_unicode_strings", "check", "_test", "testBytes", "test_empty_frozenset_singleton", "testList", "test1To3", "test_list", "testIntern", "test_code", "test_large_marshal", "test_fuzz", "test_set", "helper", "test_str", "test_string", "test_sets", "test3To3", "test2To3", "test_memoryview", "test_bytearray", "test_read_object_from_file", "test_recursion_limit", "test_same_filename_used", "test_floats", "test_invalid_longs", "test0To3", "test_read_short_from_file", "test_patch_873224", "test_read_long_from_file", "testTuple", "readinto", "test_multiple_dumps_and_loads", "test_write_long_to_file", "testInt", "test_many_codeobjects", "check_unmarshallable", "test_dict", "test_frozenset", "test_bytes", "test_bad_reader", "testStr", "testNoIntern", "test_loads_recursion", "testModule", "testFrozenSet", "test_eof", "write", "run_tests", "testFloat", "test_version_argument", "test_ints", "test_write_object_to_file", "test_exact_type_match", "helper3", "test_different_filenames", "test_unicode", "testRecursion", "test_tuple", "test_array", "test_int64", "test_bug_5888452", "test_exceptions", "testDict", "test_bool", "test_read_last_object_from_file", "CollectObjectIDs", "testSet"], "function_calls": ["check", "frozenset", "NullWriter", "memoryview", "id", "isinstance", "super", "tuple", "constructor", "open", "range", "subtyp", "list", "set", "int", "type", "enumerate", "float", "run_tests", "bytearray", "len", "compile", "BadReader", "bytes", "CollectObjectIDs"], "class_names": ["StringTestCase", "HelperMixin", "BugsTestCase", "IntTestCase", "NullWriter", "InstancingTestCase", "FloatTestCase", "InterningTestCase", "BadReader", "BufferTestCase", "ContainerTestCase", "ExceptionTestCase", "CompatibilityTestCase", "LargeValuesTestCase", "CAPI_TestCase", "CodeTestCase"], "class_method_calls": ["last.append", "marshal.dump", "l.append", "marshal.load", "_testcapi.pymarshal_read_short_from_file", "_testcapi.pymarshal_write_object_to_file", "_testcapi.pymarshal_read_long_from_file", "int.to_bytes", "unittest.skipUnless", "self.assertEqual", "self.assertNotEqual", "self.helper3", "io.BytesIO", "self._test", "self.keys", "self.assertGreaterEqual", "positions.append", "_testcapi.pymarshal_read_last_object_from_file", "self.assertIs", "f.write", "support.TESTFN", "marshal.loads", "obj.items", "self.check_unmarshallable", "f.read", "sys.getsizeof", "self.helper", "marshal.dumps", "__file__.endswith", "self.assertRaises", "types.CodeType", "unittest.skipIf", "support.unlink", "f.tell", "marshal.version", "_testcapi.pymarshal_write_long_to_file", "co2.co_filename", "self.assertGreater", "co.co_consts", "unittest.main", "array.array", "ids.add", "co.co_filename", "support.bigmemtest", "sys.maxsize", "co1.co_filename", "ExceptionTestCase.test_exceptions", "self.d", "obj.co_filename", "support.cpython_only", "os.name", "sys.intern", "_testcapi.pymarshal_read_object_from_file", "unittest.TestCase", "self.strobj"]}, "test_math.py": {"libraries": ["random.gauss", "random", "fractions.Fraction", "struct", "decimal.Decimal", "test.support.requires_IEEE_754", "test.support", "test.support.verbose", "test.support.run_unittest", "unittest", "platform", "sys.float_info", "os", "itertools", "doctest.DocFileSuite", "random.shuffle", "random.random", "sys", "decimal", "math"], "function_names": ["test_near_zero", "ulp", "testmodf", "ftest", "__index__", "testRadians", "testDist", "testFloor", "__init__", "result_check", "testFmod", "ulp_abs_check", "testCeil", "assertIsClose", "testPow", "testLog2Exact", "assertIsNotClose", "test_identical_infinite", "__float__", "testCopysign", "testDegrees", "test_inf_ninf_nan", "assertAllClose", "testCosh", "py_factorial", "testIsqrt", "testIsinf", "test_mtestfile", "testFactorialHugeInputs", "testLog2", "testLog10", "testLog1p", "testHypot", "testLdexp", "testfrexp", "testTan", "test_identical", "testAtan", "testFabs", "testFactorial", "testPerm", "testAtan2", "testLog", "testAtanh", "test_asymmetry", "testComb", "assertIsNaN", "test_issue39871", "testAcosh", "test_fractions", "parse_mtestfile", "test_eight_decimal_places", "testSin", "testSqrt", "test_main", "testTanh", "testSinh", "to_ulps", "testFsum", "__floor__", "test_inf_constant", "testTanhSign", "msum", "_naive_prod", "testConstants", "testGcd", "testFrexp", "testExp", "testAcos", "testFactorialNonIntegers", "testAsin", "testAsinh", "test_negative_tolerances", "test_zero_tolerance", "partial_product", "test_prod", "test_testfile", "validate_spec", "testCos", "parse_testfile", "count_set_bits", "testIsnan", "__ceil__", "testRemainder", "__trunc__", "test_decimals", "testModf", "test_integers", "assertAllNotClose", "test_trunc", "test_nan_constant", "test_exceptions", "testIsfinite"], "function_calls": ["hypot", "perm", "ulp", "parse_mtestfile", "py_factorial", "getattr", "T", "TestTrunc", "random", "reversed", "testmodf", "abs", "shuffle", "factorial", "gauss", "Fraction", "prod", "TestNoTrunc", "isinstance", "test_main", "sqrt", "IntSubclass", "partial_product", "TestNoFloor", "testfrexp", "F", "iter", "validate_spec", "tuple", "result_check", "parse_testfile", "open", "run_unittest", "gcd", "to_ulps", "count_set_bits", "IntegerLike", "ulp_abs_check", "range", "MyIndexable", "comb", "msum", "list", "int", "type", "zip", "enumerate", "float", "_naive_prod", "bool", "DocFileSuite", "D", "func", "TestNoCeil", "bytearray", "len", "any", "TestCeil", "max", "TestFloor", "bin", "Decimal", "dist", "sum", "map"], "class_names": ["IntSubclass", "TestNoTrunc", "TestCeil", "TestFloor", "TestNoFloor", "MathTests", "T", "TestTrunc", "F", "IntegerLike", "IsCloseTests", "MyIndexable", "TestNoCeil"], "class_method_calls": ["math.atan", "math.fmod", "support.requires_mac_ver", "itertools.product", "math.isqrt", "line.strip", "math.prod", "unittest.skipUnless", "math.sinh", "self.assertEqual", "self.assertAllNotClose", "self.assertIs", "math.atanh", "support.check_impl_detail", "sys.float_info", "math.ldexp", "math.radians", "math.exp", "math.isfinite", "self.assertRaises", "unittest.makeSuite", "suite.addTest", "expected.hex", "random.random", "math.isclose", "sys.argv", "self.assertTrue", "math.tan", "math.cos", "decimal.Decimal", "platform.mac_ver", "n.bit_length", "math.pow", "math.log1p", "math.tanh", "self.subTest", "math.hypot", "math.asinh", "math.frexp", "struct.unpack", "os.curdir", "math.copysign", "actual.hex", "t.__floor__", "self.assertIsNotClose", "test_values.append", "os.path", "vals.append", "math.remainder", "fmt.format", "line.startswith", "unittest.TestCase", "t.__ceil__", "self.assertFalse", "math.sqrt", "fail_fmt.format", "line.index", "self.assertIsClose", "math.cosh", "self.assertLess", "sys.platform", "math.inf", "self.value", "math.floor", "math.modf", "math.asin", "case.split", "math.acosh", "math.trunc", "self.assertLessEqual", "random.uniform", "math.dist", "math.gcd", "rhs.split", "self.assertGreater", "math.acos", "self.isclose", "math.pi", "self.converted", "float.fromhex", "unittest.TestSuite", "failures.append", "math.gamma", "math.isnan", "math.fsum", "math.sin", "self.assertAllClose", "self.assertIsNaN", "self.assertAlmostEqual", "math.tau", "math.factorial", "math.perm", "math.log", "self.fail", "float_info.mant_dig", "math.ceil", "math.degrees", "unittest.skipIf", "math.comb", "float_info.min_exp", "struct.pack", "lhs.split", "self.ftest", "math.isinf", "math.e", "math.atan2", "line.split", "math.log10", "math.nan", "version_txt.split", "math.log2", "support.cpython_only", "math.fabs"]}, "test_memoryio.py": {"libraries": ["unittest", "io", "_pyio", "__main__", "sys", "pickle", "test.support", "array"], "function_names": ["test_overseek", "test_newlines_property", "test_subclassing", "buftype", "test_writelines_error", "test_init", "test_instance_dict_leak", "test_issue5265", "_test_cow_mutation", "test_iterator", "__index__", "test_readlines", "test_flags", "test_cow_truncate", "testSeek", "test_readinto", "testRead", "test1", "error_gen", "test_flush", "test_relative_seek", "test_issue5449", "test_cow_setstate", "__init__", "test_truncate", "test_tell", "test_newline_crlf", "testInit", "test_widechar", "test_seek", "test_sizeof", "test_getstate", "test_setstate", "test_cow_mutable", "test_getvalue", "test_newline_default", "test_getbuffer", "test_newline_lf", "testReadNoArgs", "testTell", "test_read1", "test_write", "test_detach", "mutation", "test_writelines", "test_lone_surrogates", "force_decode", "test2", "write_ops", "test_textio_properties", "test_readline", "test_newline_argument", "test_unicode", "test_newline_none", "test_newline_cr", "test_cow_write", "__new__", "test_newline_empty", "test_pickling", "test_bytes_array", "test_read"], "function_calls": ["check", "bytearray", "list", "len", "MemIO", "test1", "error_gen", "iter", "t", "type", "bytes", "mutation", "PickleTestMemIO", "IntLike", "force_decode", "test2", "range", "hasattr"], "class_names": ["PyBytesIOTest", "ioclass", "CStringIOTest", "MemIO", "TextIOTestMixin", "CStringIOPickleTest", "PyStringIOTest", "MemorySeekTestMixin", "PyStringIOPickleTest", "PickleTestMemIO", "IntLike", "CBytesIOTest", "MemoryTestMixin"], "class_method_calls": ["self.assertEqual", "memio.closed", "support.gc_collect", "obj2.getvalue", "obj.getvalue", "PickleTestMemIO.__qualname__", "memio.isatty", "submemio.seek", "memio.write", "a.tobytes", "PickleTestMemIO.__module__", "sys.getsizeof", "self.buftype", "self.assertRaises", "memio.getbuffer", "self._test_cow_mutation", "memio.errors", "pickle.HIGHEST_PROTOCOL", "self.UnsupportedOperation", "memio.newlines", "pyio.UnsupportedOperation", "memio.close", "self.assertTrue", "memio.encoding", "memio.__next__", "self.assertIsInstance", "memio.seek", "self.check_sizeof", "pyio.StringIO", "bytesIo.read", "s.encode", "io.StringIO", "obj.tell", "f.seek", "f.tell", "object.__sizeof__", "pickle.loads", "self.assertIsNone", "array.array", "PickleTestMemIO.__name__", "memio.seekable", "memio.line_buffering", "memio.readlines", "obj2.foo", "obj2.tell", "memio.readinto", "self._num", "bytesIo.tell", "__main__.PickleTestMemIO", "unittest.TestCase", "self.assertFalse", "memio.__getstate__", "memio.truncate", "self.EOF", "self.write_ops", "me.foo", "f.write", "memio.__init__", "unittest.main", "obj2.__class__", "memio.foo", "memio.read", "f.truncate", "support.check_sizeof", "obj.__class__", "obj2.close", "memio.tell", "io.BytesIO", "buf.detach", "self.ioclass", "memio.readline", "memio.writelines", "memio.getvalue", "obj.foo", "sys.getrefcount", "pyio.BytesIO", "memio.__setstate__", "io.UnsupportedOperation", "memio.flush", "bytesIo.seek", "memio.readable", "support.cpython_only", "pickle.dumps", "memio.writable", "m.getvalue", "support.calcobjsize"]}, "test_memoryview.py": {"libraries": ["unittest", "io", "copy", "gc", "sys", "pickle", "weakref", "test.support", "array"], "function_names": ["test_tolist", "test_ctypes_cast", "test_hash_writable", "_view", "check_attributes_with_type", "_check_contents", "test_tobytes", "test_refs", "_check_released", "test_toreadonly", "__init__", "check_getitem_with_type", "callback", "test_constructor", "test_contextmanager", "test_attributes_writable", "test_memoryview_hex", "test_issue22668", "_source", "test_reversed", "test_getbuffer", "test_pickle", "test_getitem", "_types", "test_weakref", "test_array_assign", "test_getbuf_fail", "test_setitem_readonly", "test_delitem", "test_writable_readonly", "test_hash", "test_copy", "setitem", "test_attributes_readonly", "test_setitem_writable", "test_compare", "test_release", "test_iter", "test_gc"], "function_calls": ["MySource", "reversed", "tp", "memoryview", "repr", "isinstance", "str", "tp_comp", "wr", "hash", "range", "list", "slice", "MyView", "MyObject", "len", "bytes", "filter", "ord"], "class_names": ["OtherTest", "MySource", "BaseMemoryviewTests", "ArrayMemoryviewTest", "BytesMemoryviewTest", "BaseArrayMemoryTests", "BaseMemorySliceSliceTests", "ArrayMemorySliceTest", "ArrayMemorySliceSliceTest", "MyView", "BytesMemorySliceTest", "BytesMemorySliceSliceTest", "BaseBytesMemoryTests", "BaseMemorySliceTests", "AbstractMemoryTests", "MyObject"], "class_method_calls": ["copy.copy", "self.assertIsInstance", "d.value", "self.check_getitem_with_type", "self.source_bytes", "b.m", "m.itemsize", "m.tobytes", "self.assertEqual", "ctypes.c_double", "self.assertNotEqual", "m.cast", "self.check_attributes_with_type", "io.BytesIO", "test.support", "x.cast", "m.o", "self.assertRaisesRegex", "self.assertIs", "mm.tolist", "self.assertIn", "self.m", "self._source", "m.format", "self._check_released", "s.encode", "self.rw_type", "L.append", "b.o", "self.subTest", "self.assertRaises", "self._view", "m.tolist", "self.ro_type", "m.ndim", "i.readinto", "m.x", "m.release", "self.format", "unittest.skip", "self.itemsize", "c.format", "weakref.ref", "m2.hex", "sys.getrefcount", "m.readonly", "pickle.HIGHEST_PROTOCOL", "self._check_contents", "unittest.main", "array.array", "d.format", "sys.maxsize", "mm.readonly", "mm.release", "m.strides", "m.suboffsets", "self.skipTest", "pickle.dumps", "m.toreadonly", "self.assertTrue", "self.getitem_type", "gc.collect", "unittest.TestCase", "self._types", "self.assertFalse", "m.shape"]}, "test_metaclass.py": {"libraries": ["sys", "test.support", "test.test_metaclass"], "function_names": ["test_main"], "function_calls": ["test_main", "hasattr"], "class_names": [], "class_method_calls": ["support.run_doctest", "sys.gettrace"]}, "test_mimetypes.py": {"libraries": ["unittest", "_bootlocale", "io", "mimetypes", "platform.win32_edition", "sys", "pathlib", "locale", "test.support"], "function_names": ["test_path_like_ob", "test_help_option", "setUp", "test_data_urls", "test_filename_with_url_delimiters", "test_non_standard_types", "test__all__", "mimetypes_cmd", "test_keywords_args_api", "setUpModule", "test_read_mime_types", "test_default_data", "test_guess_type", "test_encoding", "test_guess_extension", "test_guess_all_types", "test_invalid_option", "test_init_reinitializes", "test_init_stability", "tearDown", "test_registry_parsing", "tearDownModule", "test_file_parsing", "check_extensions", "test_preferred_extension"], "function_calls": ["eq", "win32_edition", "guess_type", "set", "check_extensions", "unless"], "class_names": ["MiscTestCase", "MimeTypesTestCase", "Win32MimeTypesTestCase", "MimetypesCliTestCase"], "class_method_calls": ["support.check__all__", "sys.platform", "mimes.guess_all_extensions", "file.write_text", "mimetypes.MimeTypes", "mimetypes.common_types", "sys.executable", "unittest.skipUnless", "mimetypes.inited", "self.assertEqual", "mimetypes._main", "mimetypes.init", "mimetypes._default_mime_types", "self.original_types_map", "all.sort", "cm.exception", "mimetypes.read_mime_types", "self.assertIn", "output.getvalue", "self.addCleanup", "support.temp_dir", "io.StringIO", "self.assertRaises", "support.patch", "unittest.skipIf", "locale.getpreferredencoding", "pathlib.Path", "support.findfile", "support.swap_attr", "mimetypes.knownfiles", "self.db", "mimetypes.add_type", "mimetypes.guess_extension", "mimetypes.types_map", "self.assertIsNone", "self.assertIsNot", "self.mimetypes_cmd", "unittest.main", "mimetypes.suffix_map", "mimetypes.encodings_map", "support.captured_stdout", "self.assertTrue", "unittest.TestCase"]}, "test_minidom.py": {"libraries": ["unittest", "io", "copy", "xml.dom.minidom.getDOMImplementation", "xml.dom.minidom.Node", "xml.dom.minidom", "xml.dom.minidom.parse", "pickle", "xml.parsers.expat.ExpatError", "xml.dom.minidom.parseString", "test.support", "pyexpat", "xml.dom.minidom.Document"], "function_names": ["testReplaceChildFragment", "testEncodings", "testProcessingInstructionNameError", "testAAA", "setup", "testGetAttrValues", "testRenameAttribute", "testNonZero", "testAttrList__setitem__", "testParseElementNamespaces", "testParseProcessingInstructions", "testNormalizeCombineAndNextSibling", "testSchemaType", "testParseFromTextFile", "testParents", "testParseAttributes", "testTextRepr", "testNormalize", "testElement", "testNormalizeDeleteWithNextSibling", "testProcessingInstructionRepr", "testSetIdAttributeNode", "testCloneDocumentTypeDeepOk", "testGetAttrLength", "testAttrListItemNS", "testAttrListKeysNS", "testNodeListItem", "testDeepcopiedDocument", "testImportDocumentShallow", "testAppendChild", "check_clone_attribute", "testWriteText", "handle", "checkRenameNodeSharedConstraints", "testInsertBefore", "testNormalizeDeleteWithTwoNonTextSiblings", "testAppendChildFragment", "create_doc_with_doctype", "testParseElement", "testAltNewline", "test_toprettyxml_with_text_nodes", "testCloneAttributeShallow", "testNormalizeDeleteWithPrevSibling", "testAttrListValues", "testDocumentAsyncAttr", "testGetEmptyNodeListFromElementsByTagNameNS", "testCloneDocumentShallow", "testReplaceWholeText", "test_toprettyxml_with_cdata", "testCloneDocumentTypeDeepNotOk", "testGetAttributeNode", "_testCloneElementCopiesAttributes", "create_doc_without_doctype", "_create_fragment_test_nodes", "testPickledDocument", "testGetElementsByTagNameNS", "check_clone_pi", "testUnlink", "testAttrListItem", "test_toprettyxml_with_adjacent_text_nodes", "testDocumentElement", "testChildNodes", "testAAB", "testNormalizeRecursion", "test_cdata_parsing", "testGetAttributeNS", "testInsertBeforeFragment", "testGetAttrList", "testDeleteAttr", "confirm", "checkWholeText", "testRenameElement", "testCreateElementNS", "testCloneDocumentTypeShallowOk", "testContext", "testAttrListKeys", "testWriteXML", "testImportDocumentDeep", "testElementReprAndStrUnicode", "testCloneDocumentDeep", "testParseFromBinaryFile", "testSerializeCommentNodeWithDoubleHyphen", "testEmptyXMLNSValue", "testCloneDocumentTypeShallowNotOk", "testWholeText", "testHasChildNodes", "testHasAttribute", "testParseString", "testLegalChildren", "testDocRemoveChild", "test_minidom_attribute_order", "testSiblings", "testRenameOther", "test_toxml_with_attributes_ordered", "testNormalizeDeleteAndCombine", "testFirstChild", "testRemoveAttrNS", "testSetAttrValueandNodeValue", "testProcessingInstruction", "check_clone_node_entity", "testAttributeRepr", "testCloneNodeEntity", "assert_recursive_equal", "testCreateAttributeNS", "testTooManyDocumentElements", "testAttrListItems", "testImportDocumentTypeDeep", "test_toprettyxml_with_attributes_ordered", "testClonePIDeep", "testParse", "testGetAttribute", "testComment", "testSetIdAttribute", "testExceptionOnSpacesInXMLNSValue", "testGetElementsByTagName", "testChangeAttr", "check_import_document", "testElementReprAndStrUnicodeNS", "testImportDocumentTypeShallow", "testParseAttributeNamespaces", "testElementReprAndStr", "testUserData", "_setupCloneElement", "testRemoveAttr", "get_empty_nodelist_from_elements_by_tagName_ns_helper", "test_toprettyxml_preserves_content_of_text_node", "testCloneElementDeep", "testSetIdAttributeNS", "testRemoveNamedItemNS", "testCloneElementShallow", "testNamedNodeMapSetItem", "testClonePIShallow", "testBug0777884", "testAttrList__getitem__", "testCloneAttributeDeep", "testPatch1094164", "testBug1433694", "testRemoveAttributeNode", "testAddAttr", "testAttrListLength", "create_nonempty_doctype", "testRemoveNamedItem", "testTextNodeRepr"], "function_calls": ["create_doc_with_doctype", "list", "len", "Document", "isinstance", "create_doc_without_doctype", "str", "tuple", "parse", "parseString", "setup", "getDOMImplementation", "open", "create_nonempty_doctype", "Handler", "hasattr", "range", "repr"], "class_names": ["UserDataHandler", "Handler", "MinidomTest"], "class_method_calls": ["e.setAttributeNode", "elem.unlink", "keys2.sort", "children.item", "a2.namespaceURI", "entity.actualEncoding", "clone.toxml", "doc.appendChild", "attrs.removeNamedItemNS", "clone.parentNode", "n1.nodeType", "entity.version", "el.getAttributeNode", "pickle.HIGHEST_PROTOCOL", "no2.name", "sn.nodeName", "doc.firstChild", "sn.systemId", "child2.getAttributeNode", "a2.nodeValue", "elm2b.parentNode", "e1.systemId", "n2.isSameNode", "doc.createAttribute", "frag.unlink", "elem.schemaType", "pi.namespaceURI", "dom.toxml", "a2.localName", "self.check_clone_node_entity", "a.schemaType", "elem.prefix", "n.getUserData", "elem.ownerDocument", "a1.value", "doc2.childNodes", "pi.cloneNode", "Node.ELEMENT_NODE", "self.check_clone_attribute", "attr.namespaceURI", "attr.value", "n.setUserData", "child.getAttributeNS", "frag.appendChild", "dom.getElementsByTagName", "ce.isSameNode", "ce.publicId", "clone.specified", "doctype.name", "handler.called", "src.setUserData", "attrs2.item", "clone.name", "elem.replaceChild", "dom.createElement", "pi.firstChild", "elem.firstChild", "dom.insertBefore", "self.UserDataHandler", "no2.systemId", "elem.getAttributeNodeNS", "se.notationName", "dom.unlink", "ce.notationName", "el.attributes", "child.getAttribute", "attr.isSameNode", "e.parentNode", "n1.nodeName", "text.nextSibling", "child.attributes", "el.getAttribute", "self.check_import_document", "root.setAttribute", "elem.tagName", "attr.cloneNode", "a2.value", "e.isSameNode", "doc2.renameNode", "a1.namespaceURI", "target.importNode", "doc.createAttributeNS", "t.namespace", "doc2.hasChildNodes", "doc.cloneNode", "child.hasAttribute", "elem.getAttributeNode", "e.setIdAttribute", "root.cloneNode", "self.assertRaises", "child.removeAttribute", "doc.doctype", "n1.notations", "se.nodeName", "dom2.getElementsByTagName", "doc.createCDATASection", "doc.hasChildNodes", "doc.writexml", "n2.nodeType", "se.systemId", "dom.childNodes", "a.ownerElement", "dom.documentElement", "a.nodeValue", "clone.ownerElement", "attr.nodeName", "attrs1.item", "elm.nextSibling", "root.toxml", "ce.actualEncoding", "io.StringIO", "e.setIdAttributeNode", "doctype.notations", "pi.childNodes", "dom.createComment", "root.appendChild", "se.publicId", "n2.nodeName", "self._create_fragment_test_nodes", "a1.localName", "text2.replaceWholeText", "c.getUserData", "attrs1.keys", "xml.dom", "doctype.cloneNode", "dom2.appendChild", "ce.encoding", "pyexpat.version_info", "a1.isId", "se.version", "stack.append", "cn.isSameNode", "root.insertBefore", "dom.appendChild", "el.setIdAttribute", "self.assert_recursive_equal", "cn.systemId", "a3.isId", "doc2.documentElement", "handler.src", "pi.nodeName", "e1.notationName", "n1.entities", "e.attributes", "self.confirm", "doctype.nodeName", "dom.replaceChild", "pi.data", "cn.publicId", "clone.doctype", "self.data", "doc.getElementsByTagNameNS", "se.isSameNode", "elem.childNodes", "child.removeAttributeNode", "self.get_empty_nodelist_from_elements_by_tagName_ns_helper", "self.operation", "pi.target", "self.check_clone_pi", "nelem2.nextSibling", "elm2a.parentNode", "nodemap.setNamedItem", "doc.createElement", "elem.attributes", "self.assertNotEqual", "elm.previousSibling", "self.assertIs", "elem.removeChild", "dom.createDocumentFragment", "doc.createTextNode", "str.replace", "dom2.documentElement", "orig.unlink", "sn.publicId", "self.checkRenameNodeSharedConstraints", "attrs2.keys", "doc.createComment", "nelem.previousSibling", "dom1.toprettyxml", "a1.isSameNode", "src.doctype", "self.assertTrue", "doc.unlink", "clone.isSameNode", "root.tagName", "text1.nextSibling", "a3.value", "clone.entities", "node.childNodes", "doc1.importNode", "handler.operation", "elm1.childNodes", "clone.ownerDocument", "doc2.doctype", "support.findfile", "sn.isSameNode", "attr.name", "a.ownerDocument", "root.nodeName", "t.name", "handler.key", "child2.getAttributeNS", "clone.nodeName", "clone.notations", "n2.ownerDocument", "pi.nextSibling", "e2.attributes", "text.previousSibling", "doc.renameNode", "stack.pop", "Node.PROCESSING_INSTRUCTION_NODE", "Node.DOCUMENT_NODE", "n2.notations", "root.lastChild", "a1.nodeValue", "ce.nodeName", "doc.documentElement", "doc2.isSameNode", "doc2.namespaceURI", "child.setAttribute", "elm1.parentNode", "elm3.parentNode", "dom.createElementNS", "dom.getElementsByTagNameNS", "pi.lastChild", "self.key", "text1.replaceWholeText", "text.nodeType", "attrs.item", "cn.nodeName", "ce.version", "root.parentNode", "elem.namespaceURI", "doc.toxml", "no1.systemId", "root.firstChild", "self.assertRaisesRegex", "doctype.systemId", "dst.setUserData", "pi.nodeType", "self.dst", "child.appendChild", "e1.attributes", "n.unlink", "no2.publicId", "pickle.dumps", "clone.documentElement", "doc.toprettyxml", "dom.toprettyxml", "pi.hasChildNodes", "elem.appendChild", "self.assertEqual", "se.actualEncoding", "clone.systemId", "child.removeAttributeNS", "e.getAttributeNode", "self.checkWholeText", "handler.data", "document.cloneNode", "doc.isSameNode", "c.unlink", "el.toxml", "child.getAttributeNode", "elem.nodeName", "elm2b.childNodes", "e.setIdAttributeNS", "pi.localName", "e2.publicId", "e2.notationName", "self._testCloneElementCopiesAttributes", "output.getvalue", "doctype.publicId", "n2.childNodes", "child2.removeAttributeNode", "doc.normalize", "keys1.sort", "support.swap_attr", "elem.localName", "doc.createProcessingInstruction", "child.setAttributeNS", "document.doctype", "copy.deepcopy", "dom2.createElement", "n.cloneNode", "n2.entities", "pickle.loads", "el.setAttribute", "pi.nodeValue", "pi.attributes", "dom.createTextNode", "e2.systemId", "a2.isId", "unittest.TestCase", "e1.publicId", "self.assertFalse", "ce.systemId", "clone.target", "handler.dst", "self.src", "attrs.removeNamedItem", "docelem.childNodes", "doc.async_", "doc.getElementById", "clone.data", "a.value", "e.getAttributeNodeNS", "elem.lastChild", "dom1.getElementsByTagName", "self.called", "no1.publicId", "elem.insertBefore", "unittest.main", "Node.DOCUMENT_TYPE_NODE", "Node.TEXT_NODE", "pi.previousSibling", "clone.childNodes", "text.normalize", "doc.childNodes", "node.normalize", "doc.removeChild", "entity.setUserData", "n1.childNodes", "root.childNodes", "no1.name", "attr.ownerElement", "entity.encoding", "Document.async_", "attr.prefix", "attr.localName", "n1.isSameNode", "attr.ownerDocument", "node.wholeText", "nodemap.setNamedItemNS", "self._setupCloneElement", "n1.ownerDocument", "se.encoding", "doctype.entities", "clone.publicId", "a2.ownerElement"]}, "test_mmap.py": {"libraries": ["unittest", "test.support.TESTFN", "re", "socket", "test.support.unlink", "test.support.requires", "test.support.import_module", "os", "sys", "test.support._4G", "weakref", "test.support.gc_collect", "test.support.cpython_only", "test.support._2G", "itertools"], "function_names": ["test_non_ascii_byte", "test_length_0_offset", "test_tagname", "test_tougher_find", "test_flush_return_value", "test_large_offset", "_make_test_file", "setUp", "test_find_end", "test_prot_readonly", "test_write_returning_the_number_of_bytes_written", "test_concat_repeat_exception", "test_double_close", "test_move", "test_invalid_descriptor", "test_bad_file_desc", "test_crasher_on_windows", "test_madvise", "test_read_invalid_arg", "test_extended_getslice", "test_error", "_test_around_boundary", "test_entire_file", "test_extended_set_del_slice", "test_read_all", "test_length_0_large_offset", "test_around_2GB", "test_context_manager", "make_mmap_file", "test_subclass", "test_around_4GB", "test_weakref", "test_rfind", "test_io_methods", "test_resize_past_pos", "tearDown", "test_context_manager_exception", "test_empty_file", "test_basic", "test_access_parameter", "test_large_filesize", "test_anonymous", "test_offset", "__new__", "test_sizeof"], "function_calls": ["bytearray", "len", "list", "max", "getattr", "str", "reversed", "gc_collect", "import_module", "type", "bytes", "wr", "open", "anon_mmap", "unlink", "requires", "range", "hasattr"], "class_names": ["MmapTests", "LargeMmapTests", "anon_mmap"], "class_method_calls": ["itertools.product", "unittest.skipUnless", "self.assertEqual", "m.write_byte", "m.tell", "self.assertIs", "sys.getsizeof", "self.make_mmap_file", "self.assertRaises", "mmap.MAP_PRIVATE", "m.__getitem__", "self.assertTrue", "mmap.ACCESS_WRITE", "exc.exception", "self.assertIsInstance", "m.read", "m.closed", "mmap.mmap", "re.search", "m.seek", "mmap.ALLOCATIONGRANULARITY", "unittest.SkipTest", "mf.move", "mm.write", "mmap.PROT_READ", "f.seek", "f.tell", "mmap.MADV_NORMAL", "fp.read", "self.assertIsNone", "m2.close", "m.move", "sys.maxsize", "m.read_byte", "os.path", "m.madvise", "mf.close", "m.rfind", "mmap.error", "unittest.TestCase", "self.assertFalse", "mmap.ACCESS_READ", "sys.platform", "fp.write", "f.write", "mm.close", "m.close", "self.addCleanup", "m.size", "mf.__getitem__", "mf.read", "unittest.main", "data.find", "s.fileno", "f.close", "f.truncate", "mmap.ACCESS_COPY", "m.__setitem__", "m.write", "self._test_around_boundary", "self._make_test_file", "f.flush", "match.span", "self.assertRaisesRegex", "mm.flush", "self.fail", "f.read", "unittest.skipIf", "m1.close", "weakref.ref", "os.unlink", "m.flush", "s.close", "m.find", "self.skipTest", "mmap.PAGESIZE", "os.name", "f.fileno", "m.resize", "socket.socket"]}, "test_module.py": {"libraries": ["unittest", "test.good_getattr.test", "test.good_getattr", "test.support.requires_type_collecting", "test.bad_getattr2", "sys", "weakref", "test.support.script_helper.assert_python_ok", "test.bad_getattr", "test.support.gc_collect", "test.bad_getattr3"], "function_names": ["test_module_repr_with_name", "test_module_repr_with_bare_loader_and_filename", "test_module_getattr", "test_reinit", "test_module_repr_with_full_loader_but_no_name", "test_module_repr_builtin", "test_module_repr_with_loader_as_None", "test_uninitialized_missing_getattr", "test_module_dir_errors", "test_module_repr_with_full_loader_and_filename", "test_module_dir", "test_missing_getattr", "test_no_docstring", "test_module_repr_with_filename_only", "__get__", "test_descriptor_errors_propagate", "test_module_getattr_errors", "test_module_repr_source", "module_repr", "test_uninitialized", "test_dont_clear_dict", "test_ascii_docstring", "test_weakref", "f", "test_module_repr_minimal", "test_module_getattr_tricky", "test_module_repr_with_name_and_filename", "test_module_finalization_at_shutdown", "test_module_repr_with_full_loader", "test_module_repr_with_bare_loader_but_no_name", "test_module_repr_with_bare_loader", "test_clear_dict_in_ref_cycle", "test_unicode_docstring"], "function_calls": ["len", "ModuleType", "assert_python_ok", "Descr", "dir", "set", "gc_collect", "M", "type", "wr", "f", "exec", "repr"], "class_names": ["FullLoader", "ModuleTests", "Descr", "M", "BareLoader"], "class_method_calls": ["foo.__init__", "foo.__loader__", "foo.bar", "bad_getattr2.x", "m.destroyed", "self.assertEqual", "gga.whatever", "m.__loader__", "sys.modules", "bad_getattr3.delgetattr", "self.assertRaisesRegex", "self.assertIs", "ModuleType.__new__", "self.fail", "foo.__doc__", "foo.__dict__", "gga.yolo", "bad_getattr3.one", "foo.__spec__", "self.assertRaises", "foo.__package__", "out.splitlines", "weakref.ref", "gga.x", "m.__dict__", "bga.x", "unittest.main", "gga.y", "foo.__name__", "m.__file__", "m.__name__", "ModuleType.__doc__", "self.assertTrue", "bga.nope", "unittest.TestCase", "self.assertFalse", "bad_getattr2.nope"]}, "test_modulefinder.py": {"libraries": ["unittest", "importlib.machinery", "shutil", "py_compile", "tempfile", "modulefinder", "test.support", "os", "errno"], "function_names": ["test_relative_imports_3", "test_same_name_as_bad", "test_load_module_api", "test_replace_paths", "create_package", "test_extended_opargs", "test_bytecode", "test_relative_imports_2", "test_coding_explicit_cp1252", "__init__", "load_module", "test_package", "test_relative_imports", "_do_test", "test_relative_imports_4", "test_absolute_imports", "test_syntax_error", "test_coding_explicit_utf8", "test_maybe", "open_file", "test_maybe_new", "test_coding_default_utf8"], "function_calls": ["list", "modulefinder_class", "super", "sorted", "set", "open_file", "type", "open", "create_package", "range"], "class_names": ["ModuleFinderTest", "CheckLoadModuleApi"], "class_method_calls": ["importlib.machinery", "line.strip", "os.makedirs", "mf.modules", "source.splitlines", "self.assertEqual", "mf.import_hook", "e.errno", "mf.any_missing_maybe", "tempfile.mkdtemp", "line.encode", "output.getvalue", "self.assertIn", "os.remove", "tempfile.__file__", "line.decode", "shutil.rmtree", "self._do_test", "unittest.main", "errno.EEXIST", "modulefinder.ModuleFinder", "ofi.close", "ofi.write", "os.path", "mf.report", "support.captured_stdout", "line.startswith", "unittest.TestCase", "file.write", "py_compile.compile"]}, "test_msilib.py": {"libraries": ["unittest", "test.support.TESTFN", "test.support.unlink", "msilib.schema", "test.support.import_module", "test.support.FS_NONASCII", "os"], "function_names": ["init_database", "test_getproperty_uninitialized_var", "test_invalid_first_char", "test_invalid_any_char", "test_view_fetch_returns_none", "test_get_property_vt_empty", "test_database_create_failed", "test_view_non_ascii", "test_is_no_change_required", "test_summaryinfo_getproperty_issue1104", "test_database_open_failed", "test_directory_start_component_keyfile"], "function_calls": ["init_database", "import_module", "str"], "class_names": ["MsiDatabaseTestCase", "Test_make_id"], "class_method_calls": ["msilib._directories", "db.GetSummaryInformation", "msilib.Directory", "msilib.schema", "msilib.PID_SECURITY", "self.assertEqual", "msilib.PID_TITLE", "dir.start_component", "si.GetProperty", "msilib.Feature", "cm.exception", "msilib.MSIDBOPEN_CREATE", "properties.append", "record.GetString", "msilib.make_id", "msilib.MSIDBOPEN_READONLY", "self.addCleanup", "sum_info.GetProperty", "msilib.init_database", "msilib.MSIError", "self.assertRaises", "view.Close", "view.Execute", "self.assertIsNone", "sum_info.SetProperty", "os.unlink", "unittest.main", "view.Fetch", "db.Close", "os.path", "db.OpenView", "msilib.OpenDatabase", "summary.GetProperty", "unittest.TestCase", "msilib.CAB"]}, "test_multibytecodec.py": {"libraries": ["unittest", "test.support.TESTFN", "io", "_multibytecodec", "codecs", "sys", "test.support"], "function_names": ["test_setstate_validates_input_bytes", "test_nullcoding", "test_dbcs", "test_issue5640", "test_bug1572832", "test_str_decode", "test_state_methods_with_non_buffer_state", "test_codingspec", "test_decode_unicode", "test_streamwriter_strwrite", "test_g2", "test_main", "test_state_methods", "test_state_methods_with_buffer_state", "test_utf_8", "test_errorcallback_custom_ignore", "test_setstate_validates_input_size", "test_encode", "test_dbcs_keep_buffer", "test_gb18030", "test_stateless", "test_iso2022", "test_bug1728403", "test_iso2022_jp_g0", "test_incrementalencoder_final", "test_stateful_keep_buffer", "test_setstate_validates_input", "test_init_segfault", "test_stateful", "test_errorcallback_longindex", "test_getstate_returns_expected_value", "test_incrementalencoder"], "function_calls": ["len", "test_main", "any", "chr", "str", "open", "enumerate", "range", "exec"], "class_names": ["Test_StreamReader", "Test_IncrementalEncoder", "TestHZStateful", "Test_MultibyteCodec", "Test_IncrementalDecoder", "TestStateful", "Test_StreamWriter", "Test_ISO2022"], "class_method_calls": ["codecs.getdecoder", "_multibytecodec.MultibyteStreamWriter", "encoder.setstate", "int.from_bytes", "self.expected_reset", "self.assertEqual", "codecs.register_error", "io.BytesIO", "codecs.getincrementalencoder", "data.encode", "self.expected", "non_buffer_state_encoder.getstate", "f.write", "codecs.getincrementaldecoder", "self.assertNotIn", "wr.write", "f.read", "non_buffer_state_encoder.encode", "decoder.getstate", "self.reset", "self.assertRaises", "codecs.open", "iso2022jp2.decode", "s.getvalue", "support.unlink", "encoder.reset", "support.run_unittest", "encoder.getstate", "decoder.reset", "self.text", "self.encoding", "_multibytecodec.MultibyteStreamReader", "buffer_state_encoder.encode", "codecs.ignore_errors", "c.write", "sys.maxsize", "decoder.decode", "buffer_state_encoder.getstate", "codecs.getwriter", "encoder.encode", "f.close", "unittest.TestCase", "self.assertFalse", "decoder.setstate"]}, "test_multiprocessing_fork.py": {"libraries": ["unittest", "test.support", "sys", "test._test_multiprocessing"], "function_names": [], "function_calls": ["globals"], "class_names": [], "class_method_calls": ["support.PGO", "sys.platform", "unittest.SkipTest", "test._test_multiprocessing", "unittest.main"]}, "test_multiprocessing_forkserver.py": {"libraries": ["unittest", "test.support", "sys", "test._test_multiprocessing"], "function_names": [], "function_calls": ["globals"], "class_names": [], "class_method_calls": ["support.PGO", "sys.platform", "unittest.SkipTest", "test._test_multiprocessing", "unittest.main"]}, "test_multiprocessing_main_handling.py": {"libraries": ["unittest", "importlib.machinery", "os.path", "test.support.script_helper.make_pkg", "test.support.script_helper.make_script", "test.support.script_helper.make_zip_pkg", "importlib", "py_compile", "sys", "test.support.script_helper.assert_python_ok", "test.support", "os", "test.support.script_helper.make_zip_script", "multiprocessing"], "function_names": ["test_basic_script", "test_zipfile", "test_basic_script_no_suffix", "setUp", "test_module_in_subpackage_in_zipfile", "test_ipython_workaround", "test_module_in_package", "_make_launch_script", "_make_test_script", "test_directory_compiled", "test_package", "test_zipfile_compiled", "_make_test_zip_pkg", "_check_output", "test_module_in_package_in_zipfile", "test_package_compiled", "tearDownModule", "test_directory", "_check_script", "test_script_compiled"], "function_calls": ["make_zip_pkg", "_make_test_script", "_make_launch_script", "make_script", "make_zip_script", "_make_test_zip_pkg", "assert_python_ok", "set", "make_pkg", "print", "repr"], "class_names": ["ForkCmdLineTest", "ForkServerCmdLineTest", "SpawnCmdLineTest", "MultiProcessingCmdLineMixin"], "class_method_calls": ["self.start_method", "support.PGO", "sys.flags", "self.assertEqual", "support.import_module", "unittest.SkipTest", "err.decode", "support.temp_dir", "self.main_in_children_source", "os.remove", "self._check_script", "importlib.invalidate_caches", "support.verbose", "support.make_legacy_pyc", "support.reap_children", "unittest.main", "self._check_output", "os.path", "multiprocessing.get_all_start_methods", "out.decode", "self.skipTest", "unittest.TestCase", "support.skip_if_broken_multiprocessing_synchronize", "py_compile.compile"]}, "test_multiprocessing_spawn.py": {"libraries": ["unittest", "test.support", "test._test_multiprocessing"], "function_names": [], "function_calls": ["globals"], "class_names": [], "class_method_calls": ["support.PGO", "test._test_multiprocessing", "unittest.SkipTest", "unittest.main"]}, "test_named_expressions.py": {"libraries": ["unittest", "os"], "function_names": ["eggs", "test_named_expression_assignment_06", "test_named_expression_scope_04", "test_named_expression_invalid_12", "test_named_expression_invalid_comprehension_iterable_expression", "test_named_expression_assignment_11", "test_named_expression_scope_20", "test_named_expression_assignment_03", "test_named_expression_assignment_16", "test_named_expression_invalid_06", "test_named_expression_scope_07", "test_named_expression_scope_24", "test_named_expression_nonlocal_scope", "test_named_expression_scope_03", "test_named_expression_scope_17", "test_named_expression_invalid_03", "test_named_expression_assignment_05", "test_named_expression_invalid_07", "test_named_expression_invalid_01", "test_named_expression_assignment_01", "test_named_expression_assignment_09", "test_named_expression_scope_11", "test_named_expression_invalid_in_class_body", "test_named_expression_scope_05", "test_named_expression_scope_10", "test_named_expression_invalid_11", "test_named_expression_scope_21", "test_named_expression_nonlocal_scope_no_nonlocal_keyword", "test_named_expression_scope_19", "test_named_expression_invalid_16", "test_named_expression_assignment_15", "test_named_expression_scope_09", "test_named_expression_global_scope_no_global_keyword", "test_named_expression_scope_02", "test_named_expression_assignment_07", "test_named_expression_assignment_02", "test_named_expression_invalid_04", "test_named_expression_invalid_08", "test_named_expression_invalid_13", "test_named_expression_invalid_10", "test_named_expression_scope_08", "test_named_expression_scope_23", "test_named_expression_scope_18", "test_named_expression_assignment_04", "test_named_expression_scope_06", "test_named_expression_invalid_17", "test_named_expression_invalid_15", "test_named_expression_invalid_rebinding_comprehension_iteration_variable", "test_named_expression_global_scope", "test_named_expression_invalid_14", "test_named_expression_invalid_02", "test_named_expression_assignment_14", "test_named_expression_assignment_12", "f", "test_named_expression_scope_25", "spam", "g", "test_named_expression_invalid_09", "test_named_expression_scope_01", "test_named_expression_assignment_08", "test_named_expression_assignment_13", "test_named_expression_variable_reuse_in_comprehensions", "test_named_expression_assignment_10", "test_named_expression_scope_22", "test_named_expression_invalid_rebinding_comprehension_inner_loop"], "function_calls": ["spam", "object", "len", "any", "g", "eggs", "f", "range", "exec"], "class_names": ["NamedExpressionScopeTest", "NamedExpressionInvalidTest", "NamedExpressionAssignmentTest"], "class_method_calls": ["self.fail", "self.assertEqual", "self.assertTrue", "unittest.TestCase", "unittest.main", "self.subTest", "self.assertRaisesRegex"]}, "test_netrc.py": {"libraries": ["unittest", "textwrap", "netrc", "sys", "tempfile", "test.support", "os"], "function_names": ["test_file_not_found_in_home", "_test_comment", "test_comment_at_end_of_machine_line", "test_comment_before_machine_line_hash_only", "test_comment_at_end_of_machine_line_pass_has_hash", "test_file_not_found_explicit", "test_password_with_internal_hash", "test_default", "make_nrc", "test_macros", "test_home_not_set", "test_password_with_leading_hash", "test_security", "_test_passwords", "test_comment_at_end_of_machine_line_no_space", "test_password_with_trailing_hash", "test_comment_before_machine_line", "test_comment_before_machine_line_no_space", "fake_expanduser"], "function_calls": ["orig_expanduser", "open"], "class_names": ["NetrcTestCase"], "class_method_calls": ["os.mkdir", "sys.platform", "unittest.skipUnless", "self.assertEqual", "called.append", "nrc.hosts", "environ.set", "self._test_comment", "fp.write", "f.write", "support.TESTFN", "support.rmtree", "self.addCleanup", "tempfile.mkstemp", "self.make_nrc", "self.assertRaises", "nrc.macros", "support.swap_attr", "nrc.__repr__", "os.unlink", "unittest.main", "textwrap.dedent", "self._test_passwords", "netrc.netrc", "os.path", "netrc.NetrcParseError", "os.fdopen", "nrc2.hosts", "nrc.authenticators", "os.chmod", "os.name", "self.assertTrue", "support.EnvironmentVarGuard", "unittest.TestCase"]}, "test_nis.py": {"libraries": ["unittest", "test.support"], "function_names": ["test_maps"], "function_calls": ["str"], "class_names": ["NisTests"], "class_method_calls": ["nis.match", "nis.cat", "nis.maps", "self.fail", "maps.remove", "self.skipTest", "nis.error", "support.import_module", "mapping.items", "unittest.TestCase", "unittest.main"]}, "test_nntplib.py": {"libraries": ["unittest", "io", "re", "threading", "os.path", "test.support", "textwrap", "datetime", "contextlib", "nntplib.NNTP", "nntplib.GroupInfo", "ssl", "unittest.mock.patch", "nntplib", "socket", "functools"], "function_names": ["check_over_xover_resp", "test_unknown_command", "test_welcome", "_check_desc", "test_service_temporarily_unavailable", "handle_STAT", "test_article_head_body", "test_parse_overview", "test_too_long_lines", "__init__", "check_post_ihave", "test_decode_header", "handle_POST", "test_xover", "tearDown", "handle_MODE", "_check_post_ihave_sub", "handle_OVER", "handle_HEAD", "test_over", "test_zlogin", "run_server", "test_stat", "iterlines", "test_service_permanently_unavailable", "_check_article_head", "handle_LAST", "test_login_aborted", "test_next", "test_article", "writable", "gives", "test_head_file", "_check_art_dict", "test_description", "test_list", "test_head", "check_constructor_error_conditions", "makefile", "test_body", "handle_welcome", "handle_CAPABILITIES", "test_post", "test_ihave", "wrap_meth", "test_newnews", "test_bad_welcome", "test_group", "test_unparse_datetime", "test_authinfo", "handle_DATE", "test_module_all_attribute", "setUp", "test_list_active", "_check_posted_body", "test_ssl_support", "wrap_methods", "handle_HELP", "create_connection", "test_zzquit", "process_pending", "readinto", "push_lit", "close", "handle_ARTICLE", "_check_article_body", "setUpClass", "test_unparse_datetime_legacy", "test_bad_capabilities", "push_data", "test_newgroups", "start", "handle_GROUP", "nntp_class", "test_with_statement", "handle_IHAVE", "handle_BODY", "_decode", "_check_article_data", "test_help", "test_xhdr", "test_parse_datetime", "test_capabilities", "test_caps_only_after_login", "readable", "handle_AUTHINFO", "test_date", "test_parse_overview_fmt", "test_descriptions", "test_caps", "make_mock_file", "is_connected", "wrap_socket", "test_article_file", "test_last", "test_body_file", "handle_QUIT", "make_server", "expect_body", "check_article_resp", "tearDownClass", "handle_unknown", "handle_LIST", "write", "handle_NEWNEWS", "handle_XOVER", "handle_NEXT", "_check_caps", "wrapped", "test_quit", "test_starttls", "test_we_are_in_reader_mode_after_connect"], "function_calls": ["gives", "meth", "getattr", "_check_desc", "make_mock_file", "is_connected", "super", "iter", "str", "MockSocket", "ascii", "Exception", "setattr", "_NNTPServerIO", "ValueError", "file_factory", "dir", "set", "patch", "NNTP", "type", "blacklist", "func", "handler_class", "hasattr", "len", "_check_caps", "GroupInfo", "wrap_meth", "callable"], "class_names": ["mock_socket_module", "ModeSwitchingNNTPv2Handler", "PublicAPITests", "NNTPv2Handler", "MockSslTests", "MockedNNTPWithReaderModeMixin", "NetworkedNNTP_SSLTests", "MockSocket", "LocalServerTests", "NetworkedNNTPTestsMixin", "NNTPv1Handler", "MockedNNTPTestsMixin", "_NNTPServerIO", "NetworkedNNTPTests", "MockSocketTests", "MiscTests", "CapsAfterLoginNNTPv2Handler", "SSLError", "Handler", "NNTPv1Tests", "bypass_context", "NNTPv1v2TestsMixin", "NNTPv2Tests", "SendReaderNNTPv2Tests", "CapsAfterLoginNNTPv2Tests"], "class_method_calls": ["nntplib.NNTP", "nntplib.NNTPError", "lit.encode", "unittest.skipUnless", "self.assertEqual", "self.handle_welcome", "self.assertNotEqual", "self.handle_XOVER", "nntplib.NNTPPermanentError", "self.assertGreaterEqual", "self.push_data", "self.check_post_ihave", "nntplib.ArticleInfo", "self.body_callback", "io.RawIOBase", "support.transient_internet", "sock.listen", "self._check_art_dict", "nntplib.decode_header", "Handler.welcome", "self.expect_body", "self.assertRaises", "exc.response", "head.lines", "nntplib.NNTP_SSL", "self.NNTP_CLASS", "cls.NNTP_HOST", "io.BufferedRWPair", "body.lines", "date.year", "nntplib._parse_overview", "self.assertTrue", "self.server", "support.HOST", "nntplib._parse_datetime", "self.assertIsInstance", "self._check_article_data", "f.getvalue", "art_dict.keys", "datetime.datetime", "ssl.SSLContext", "self.handler_class", "cls.server", "nntplib.NNTPTemporaryError", "functools.wraps", "cm.exception", "self._check_article_body", "re.search", "self.handler", "self.sio", "data.startswith", "unittest.SkipTest", "cls.NNTP_CLASS", "self.assertNotIn", "self.GROUP_NAME", "self.posted_body", "cmd.upper", "server.help", "self.push_lit", "ssl_err.reason", "self.body", "self.sample_article", "nntplib._DEFAULT_OVERVIEW_FMT", "self.check_constructor_error_conditions", "self._switched", "self._user_sent", "os.path", "self._logged_in", "fmt.format", "line.startswith", "NetworkedNNTPTestsMixin.wrap_methods", "self.nntp_version", "unittest.TestCase", "self.assertFalse", "datetime.date", "support.bind_port", "self.make_server", "client.makefile", "art_dict.values", "self.run_server", "nntplib._NNTPBase", "self.check_article_resp", "self.handle_unknown", "reader.readline", "self.assertLessEqual", "lit.splitlines", "target_api.append", "self.nntp", "self.addCleanup", "name.startswith", "client.sendall", "self.NNTP_HOST", "reader.close", "self._readline", "b.splitlines", "cleanup.enter_context", "article.lines", "files.append", "unittest.main", "line.endswith", "ssl.SSLSocket", "f.closed", "ssl.SSLEOFError", "self.in_body", "self.check_over_xover_resp", "nntplib._parse_overview_fmt", "self.sample_body", "nntplib.NNTPReplyError", "nntplib.__all__", "io.BytesIO", "support.requires", "self.sample_head", "self._check_posted_body", "self.assertRaisesRegex", "self.welcome", "self._check_post_ihave_sub", "self.s2c", "self.assertIn", "resp.startswith", "datetime.timedelta", "self.GROUP_PAT", "data.endswith", "self.DESC", "e.response", "unittest.skipIf", "server.quit", "self.c2s", "context.wrap_socket", "nntplib.NNTPDataError", "self.nntp_class", "self.sample_post", "ssl.SSLError", "nntplib._unparse_datetime", "self._push_data", "context.load_cert_chain", "self._check_article_head", "sock.accept", "self.background", "textwrap.dedent", "line.split", "nntplib.NNTPProtocolError", "article.number", "contextlib.ExitStack", "self.allow_posting", "self.skipTest", "self._decode", "threading.Thread", "socket.socket"]}, "test_normalization.py": {"libraries": ["unittest", "unicodedata.normalize", "http.client.HTTPException", "unicodedata.unidata_version", "unicodedata.is_normalized", "sys", "test.support.open_urlresource"], "function_names": ["test_main", "NFKD", "NFKC", "check_version", "NFD", "test_bug_834676", "unistr", "run_normalization_tests", "NFC"], "function_calls": ["is_normalized", "NFKD", "chr", "open_urlresource", "NFKC", "NFD", "normalize", "int", "unistr", "NFC", "range"], "class_names": ["RangeError", "NormalizationTest"], "class_method_calls": ["line.strip", "sys.maxunicode", "self.fail", "self.skipTest", "data.split", "testfile.readline", "line.startswith", "self.assertTrue", "unittest.TestCase", "self.run_normalization_tests", "unittest.main", "line.split"]}, "test_ntpath.py": {"libraries": ["unittest", "test.test_genericpath", "test.support.TestFailed", "test.support", "tempfile.TemporaryFile", "ntpath", "sys", "warnings", "nt", "ctypes", "test.support.FakePath", "os"], "function_names": ["test_path_normpath", "test_abspath", "check", "test_path_realpath", "setUp", "test_path_islink", "test_expandvars", "test_path_normcase", "test_nt_helpers", "test_realpath_curdir", "_check_function", "test_path_isdir", "test_path_commonpath", "test_path_splitext", "test_split", "test_normpath", "check_error", "test_path_ismount", "test_isabs", "test_expanduser", "test_relpath", "test_path_split", "test_realpath_cwd", "assertEqualCI", "test_path_basename", "test_splitext", "test_join", "assertPathEqual", "_getshortpathname", "test_realpath_symlink_loops", "test_realpath_symlink_prefix", "test_path_relpath", "assertPathIn", "test_splitdrive", "test_path_expandvars", "test_path_abspath", "test_realpath_nul", "test_realpath_relative", "_norm", "test_path_isabs", "test_realpath_broken_symlinks", "test_sameopenfile", "test_path_splitdrive", "test_commonpath", "test_path_join", "test_path_lexists", "test_path_expanduser", "test_realpath_pardir", "test_ismount", "test_path_dirname", "test_commonprefix", "tester", "test_expandvars_nonascii", "test_realpath_basic"], "function_calls": ["check", "repr", "isinstance", "check_error", "str", "tuple", "open", "_getshortpathname", "TestFailed", "TemporaryFile", "func", "_norm", "OSError", "eval", "hasattr", "len", "GSPN", "tester", "FakePath"], "class_names": ["PathLikeTests", "NtpathTestCase", "TestNtpath", "NtCommonTest"], "class_method_calls": ["os.mkdir", "sys.executable", "unittest.skipUnless", "self.assertEqual", "nt._getdiskusage", "support.TESTFN", "warnings.catch_warnings", "support.skip_unless_symlink", "self.assertRaises", "ntpath.dirname", "tf1.fileno", "os.PathLike", "self.assertTrue", "self.assertIsInstance", "nt._getvolumepathname", "os.symlink", "os.getcwd", "drive.lower", "fn.encode", "tf2.fileno", "self.assertPathIn", "fn.replace", "s1.lower", "ntpath.normpath", "ntpath._getfinalpathname", "unittest.TestCase", "self.assertFalse", "support.change_cwd", "sys.platform", "drive.upper", "GSPN.restype", "sys.prefix", "ntpath.basename", "support.temp_cwd", "os.fsencode", "f.write", "test_genericpath.CommonTest", "ctypes.c_uint32", "ctypes.get_last_error", "self.addCleanup", "support.temp_dir", "ntpath.abspath", "self.assertEqualCI", "self.file_path", "warnings.simplefilter", "env.clear", "GSPN.argtypes", "self.file_name", "support.unlink", "ntpath.commonpath", "self.path", "path.encode", "self.assertGreater", "ntpath.normcase", "unittest.main", "support.FS_NONASCII", "ntpath.realpath", "ntpath.splitdrive", "ctypes.create_unicode_buffer", "os.fsdecode", "os.chdir", "self.assertIn", "support.rmtree", "self.assertPathEqual", "test_dir_long.lower", "ctypes.WinDLL", "f.read", "ntpath.ismount", "ctypes.c_wchar_p", "ntpath.join", "ntpath.sameopenfile", "ntpath.relpath", "s2.lower", "self._check_function", "nt._getfinalpathname", "support.EnvironmentVarGuard", "file.write", "sys.exec_prefix"]}, "test_numeric_tower.py": {"libraries": ["unittest", "operator", "random", "fractions.Fraction", "sys", "decimal.Decimal", "math"], "function_names": ["test_fractions", "check_equal_hash", "test_complex", "test_bools", "__hash__", "test_hash_normalization", "test_integers", "__eq__", "test_binary_floats", "test_mixed_comparisons", "test_decimals"], "function_calls": ["len", "F", "complex", "HalibutProxy", "int", "hash", "enumerate", "float", "D", "range"], "class_names": ["HalibutProxy", "ComparisonTest", "HashTest"], "class_method_calls": ["self.assertLess", "self.assertEqual", "self.assertNotEqual", "self.assertGreaterEqual", "self.assertLessEqual", "operator.ge", "self.check_equal_hash", "math.exp", "operator.lt", "self.assertRaises", "D.from_float", "random.randrange", "self.assertGreater", "operator.gt", "unittest.main", "sys.hash_info", "random.random", "operator.le", "F.from_float", "unittest.TestCase"]}, "test_opcodes.py": {"libraries": ["unittest", "test.support", "test.ann_module"], "function_names": ["test_use_existing_annotations", "test_try_inside_for_loop", "test_compare_function_objects", "test_no_annotations_if_not_needed", "__init__", "test_do_not_recreate_annotations", "test_modulo_of_string_subclasses", "__mod__", "test_setup_annotations_line", "test_raise_class_exceptions"], "function_calls": ["DClass", "BClass", "compile", "MyString", "AClass", "open", "eval", "range", "exec", "globals"], "class_names": ["DClass", "BClass", "CClass", "OpcodeTest", "MyString", "C", "AClass"], "class_method_calls": ["self.assertIsInstance", "ann_module.__file__", "C.__annotations__", "self.fail", "self.assertEqual", "self.assertNotEqual", "f.read", "unittest.TestCase", "support.swap_item", "unittest.main", "co.co_firstlineno", "self.assertRaises"]}, "test_openpty.py": {"libraries": ["unittest", "os"], "function_names": ["test"], "function_calls": ["hasattr"], "class_names": ["OpenptyTest"], "class_method_calls": ["os.isatty", "unittest.SkipTest", "self.fail", "os.close", "self.addCleanup", "os.read", "os.write", "self.assertEqual", "os.openpty", "unittest.TestCase", "unittest.main"]}, "test_operator.py": {"libraries": ["unittest", "sys", "pickle", "test.support"], "function_names": ["__getattr__", "__imod__", "test_floordiv", "test_is", "test_pos", "__ixor__", "test_lt", "test_rshift", "__itruediv__", "test_inplace", "baz", "test_truth", "test_gt", "__eq__", "test_itemgetter", "test_truediv", "test_bitwise_and", "copy", "test_eq", "__ne__", "__ior__", "test_attrgetter", "__init__", "__iand__", "__iadd__", "test_neg", "__isub__", "__length_hint__", "test_abs", "test_le", "__imul__", "test_mul", "test_matmul", "test_is_not", "test_sub", "__len__", "test_methodcaller", "__imatmul__", "__irshift__", "__iter__", "test_ge", "test_ne", "test_getitem", "__add__", "test_length_hint", "test_dunder_is_original", "__matmul__", "test_bitwise_or", "test_delitem", "__bool__", "__ipow__", "__rmul__", "__mul__", "test_contains", "test_concat", "test_pow", "test_setitem", "test_countOf", "bar", "test_mod", "test_indexOf", "__ilshift__", "__ifloordiv__", "test_add", "test_bitwise_xor", "foo", "test_invert", "__getitem__", "test_lshift"], "function_calls": ["sorted", "getattr", "T", "BadIterable", "itemgetter", "repr", "attrgetter", "iter", "tuple", "A", "dict", "methodcaller", "range", "X", "list", "C", "dir", "slice", "M", "type", "Seq2", "f", "len", "f2", "map", "Seq1"], "class_names": ["OperatorTestCase", "PyOperatorTestCase", "OperatorPickleTestCase", "CCOperatorPickleTestCase", "PyCOperatorPickleTestCase", "CPyOperatorPickleTestCase", "X", "T", "BadIterable", "C", "PyPyOperatorPickleTestCase", "M", "A", "Seq2", "COperatorTestCase", "Seq1"], "class_method_calls": ["a.y", "operator.eq", "record.y", "unittest.skipUnless", "self.assertEqual", "self.assertIs", "operator.neg", "record.z", "self.assertRaises", "other.lst", "operator.itruediv", "operator.itemgetter", "operator.pow", "pickle.HIGHEST_PROTOCOL", "operator.gt", "operator.xor", "operator.lshift", "operator.isub", "operator.le", "self.assertTrue", "operator.matmul", "operator.ixor", "operator.setitem", "operator.sub", "operator.ipow", "operator.methodcaller", "operator.ifloordiv", "operator.length_hint", "operator.countOf", "operator.imod", "support.import_fresh_module", "self.lst", "self.subTest", "a.name", "pickle.loads", "self.assertIsNone", "self.copy", "name.strip", "operator.concat", "operator.attrgetter", "operator.and_", "unittest.TestCase", "self.assertFalse", "operator.imul", "operator.invert", "self.value", "operator.truediv", "operator.indexOf", "operator.mul", "a.z", "name.startswith", "operator.ne", "operator.is_", "operator.inv", "unittest.main", "operator.mod", "record.x", "self.module", "operator.floordiv", "a.x", "operator.ior", "operator.pos", "operator.imatmul", "operator.delitem", "operator.abs", "sys.modules", "operator.add", "operator.ge", "a.t", "self.module2", "operator.getitem", "operator.lt", "operator.iand", "operator.is_not", "operator.irshift", "support.swap_item", "operator.iadd", "operator.or_", "operator.contains", "operator.truth", "a.child", "pickle.dumps", "operator.ilshift", "operator.iconcat", "operator.rshift"]}, "test_optparse.py": {"libraries": ["optparse._match_abbrev", "optparse.make_option", "test.support", "optparse.OptionConflictError", "unittest", "optparse.OptionGroup", "copy", "optparse.Values", "optparse.Option", "io.StringIO", "optparse.TitledHelpFormatter", "optparse.OptionValueError", "os", "optparse.OptionParser", "optparse.BadOptionError", "re", "optparse", "optparse._parse_num", "optparse.SUPPRESS_USAGE", "sys", "optparse.OptionError"], "function_names": ["test_invalid_choice", "test_help_title_formatter", "test_callback_help", "test_consume_separator_stop_at_option", "test_bool_flicker_on_and_off", "test_opt_string_short_invalid", "test_add_option_no_Option", "test_default_progname", "test_bool_default", "assertVersion", "test_bad_choices_list", "__init__", "test_parse_num_ok", "test_conflict_error_group", "test_has_option", "test_bool_true", "test_count_with_default", "test_count_overriding_default", "__str__", "test_hyphen_becomes_positional_arg", "take_action", "test_positional_arg_and_variable_args", "test_count_one", "variable_args", "test_wrap_columns", "test_conflict_resolve_long_opt", "test_long_invalid_integer", "tearDown", "assertHelpEquals", "test_no_nargs_for_action", "test_get_option", "test_no_const_for_action", "process_many", "test_callback", "error", "test_no_default", "test_count_three_apart", "test_group_manipulate", "test_no_such_option", "assertOutput", "test_default_none_1", "test_parser_default_1", "test_conflict_override_args", "test_combined_single_invalid_option", "test_add_option_invalid_arguments", "exit", "test_option_argument_joined_integer", "test_stop_at_option", "assertTrueconflict_error", "test_basics", "test_count_override_amount", "test_count_overriding", "test_mixed_defaults_post", "test_extend_add_action_normal", "test_action_invalid", "test_opt_string_long_invalid", "test_ambiguous_option", "test_conflict_default", "test_remove_long_opt", "test_callback_not_callable", "test_help_unicode", "test_refleak", "test_match_abbrev_error", "test_filetype_ok", "test_stop_at_invalid_option", "test_count_interspersed_args", "test_no_callback_args_for_action", "test_remove_short_opt", "test_help_description_groups", "_check_duration", "dummy", "test_no_single_dash", "test_invalid_integer", "test_long_option_append", "test_parser_default_2", "test_nargs_append_required_values", "test_conflict_error", "test_no_choices_list", "process_tuple", "test_callback_extra_args", "test_float_default", "test_add_group_wrong_parser", "test_count_option_no_value", "test_abbrev_long_option", "test_str_aliases_string", "test_no_callback_kwargs_for_action", "test_option_argument_joined", "test_conflict_resolve_help", "test_valid_choice", "setUp", "test_abbrev_callback_expansion", "assertTypeError", "assertParseFail", "test_short_option_consumes_separator", "make_parser", "test_option_group_create_instance", "test_option_argument_split", "test_mixed_defaults_pre", "test_version", "test_filetype_noexist", "test_main", "test_no_choices_for_type", "test_callback_kwargs_no_dict", "process_n", "check_file", "test_process_default", "test_match_abbrev", "test_no_expand", "test_count_three", "test_conflict_resolve_short_opt", "test_callback_meddle_args", "test_bool_false", "test_no_callback_for_action", "test_type_object", "test_no_version", "assertRaises", "test_short_option_split_long_option_append", "test_add_group_no_group", "test_filetype_notfile", "assertParseOK", "test_defaults", "check_abbrev", "test_help_old_usage", "test_add_group_invalid_arguments", "test_numeric_options", "test_callback_meddle_args_separator", "test_nargs_required_values", "test_help_long_opts_first", "test_short_option_split_one_positional_arg", "test_count_override_quiet", "assertOptionError", "test_help_unicode_description", "test_opt_string_empty", "test_help", "test_extend_add_action", "test_nargs_append_const", "test_get_option_equals", "test_short_and_long_option_split", "test_count_no_interspersed_args", "test_long_option_short_option", "test_many_args", "test_variable_args", "test_conflict_resolve", "assertHelp", "test_opt_string_too_short", "assertTrueremoved", "test_conflict_resolve_long_opts", "test_count_no_such_option", "test__all__", "test_shortopt_empty_longopt_append", "test_option_argument_split_negative_integer", "test_default_none_2", "assertUsage", "test_long_option_argument_joined", "test_attr_invalid", "test_parse_num_fail", "show_version", "test_short_option_joined_and_separator", "test_conflict_override_opts", "test_basic_defaults", "test_option_consumes_optionlike_string", "test_nargs_append_simple", "test_long_option_argument_split", "test_empty", "test_no_such_conflict_handler", "test_nargs_with_positional_args", "test_add_choice_option", "test_nargs_invalid_float_value", "process_opt", "test_custom_progname", "test_type_invalid", "test_no_append_versus_append", "test_callback_args_no_tuple", "test_remove_nonexistent", "test_no_type_for_action", "test_conflict_default_none", "test_option_default", "test_conflict_override_help", "test_nargs_long_opt", "test_alt_expand", "test_required_value", "test_nargs_append"], "function_calls": ["getattr", "InterceptingOptionParser", "OptionValueError", "vars", "OptionGroup", "isinstance", "test_main", "_match_abbrev", "str", "tuple", "locals", "StringIO", "InterceptedError", "setattr", "range", "OptionParser", "int", "type", "TitledHelpFormatter", "func", "Values", "len", "_parse_num", "make_option", "map"], "class_names": ["TestConflictingDefaults", "TestProgName", "TestExtendAddTypes", "TestMultipleArgsAppend", "InterceptingOptionParser", "TestCallbackCheckAbbrev", "TestOptionParser", "TestExtendAddActions", "TestConflict", "TestBool", "TestCallbackExtraArgs", "TestOptionValues", "TestConflictResolve", "ConflictBase", "MyOption", "TestMultipleArgs", "TestCount", "TestExpandDefaults", "TestCallback", "TestParseNumber", "InterceptedError", "TestChoice", "TestVersion", "BaseTest", "TestTypeAliases", "TestCallbackVarArgs", "TestOptionGroup", "DurationOption", "TestDefaultValues", "TestCallbackManyArgs", "TestStandard", "TestConflictOverride", "MiscTestCase", "TestMatchAbbrev", "TestHelp", "TestOptionChecks", "TestCallbackMeddleArgs"], "class_method_calls": ["os.mkdir", "self.make_parser", "self.assertEqual", "self.assertNotEqual", "verbose_opt._long_opts", "support.create_empty_file", "parser_.largs", "sys.stdout", "support.TESTFN", "self.parser", "opt1.dest", "version_opt._long_opts", "ConflictBase.setUp", "self.assertRaises", "Option.TYPE_CHECKER", "opt.action", "self.variable_args", "self.error_message", "group.set_title", "Option.ACTIONS", "err.error_message", "self.exit_status", "self.file_help", "self.assertOutput", "self.process_tuple", "self.assertTrue", "sys.argv", "self.assertTrueremoved", "self.assertIsInstance", "opt._long_opts", "parser.destroy", "expected_message.pattern", "value.split", "self.check_abbrev", "self.dummy", "verbose_opt._short_opts", "self.assertVersion", "os.rmdir", "self.failureException", "support.run_unittest", "opt1._long_opts", "self.assertTrueconflict_error", "os.curdir", "Option.take_action", "parser.big_thing", "Option.STORE_ACTIONS", "self.help_prefix", "dest.append", "self.process_many", "os.path", "opt1.action", "option._short_opts", "version_opt._short_opts", "unittest.TestCase", "self.assertFalse", "self.process_n", "copy.copy", "self.assertParseOK", "self.process_opt", "err.exit_message", "re.Pattern", "self.MyOption", "parser.remove_option", "self.assertUsage", "expected_message.search", "opt.type", "self.assertOptionError", "parser.add_option", "parser.values", "value.append", "self.assertParseFail", "self.exit_message", "Option.TYPES", "self.assertHelpEquals", "parser_.rargs", "self.expected_help_file", "option._long_opts", "re.compile", "parser.format_help", "self.assertTypeError", "opt1._short_opts", "group.parser", "option.dest", "v_opt._long_opts", "options.verbose", "support.check__all__", "err.msg", "support.impl_detail", "parser_.values", "self.expected", "self.fail", "group.add_option", "err.exit_status", "opt._short_opts", "self.expected_help_none", "values.ensure_value", "err.option_id", "sys.getrefcount", "self.show_version", "os.unlink", "parser.get_version", "self.v_opt", "parser.rargs", "Option.TYPED_ACTIONS", "support.EnvironmentVarGuard", "parser.get_usage", "self.assertHelp"]}, "test_ordered_dict.py": {"libraries": ["unittest", "collections.abc.MutableMapping", "test.mapping_tests", "copy", "gc", "contextlib", "struct", "sys", "pickle", "random.randrange", "random.shuffle", "weakref", "test.support", "builtins"], "function_names": ["check", "test_iterators", "test_equality", "test_pop", "test_reinsert", "test_sorted_iterators", "test_dict_pop", "test_init", "test_repr", "__eq__", "test_popitem_last", "test_setdefault", "keys", "__repr__", "test_sizeof_exact", "test_fromkeys", "test_468", "test_update", "test_free_after_iterating", "replaced_module", "test_issue24348", "test_clear", "update", "test_delitem_hash_collision", "test_copying", "test_repr_recursive", "__init__", "test_abc", "__missing__", "test_issue24667", "test_dict_clear", "test_pickle_recursive", "test_reduce_not_too_fat", "test_dict_update", "test_ordered_dict_items_result_gc", "test_popitem", "__del__", "setUpClass", "test_highly_nested", "test_dict_popitem", "test_move_to_end_issue25406", "test_views", "test_issue24347", "test_dict_setitem", "test_iterators_pickling", "items", "test_delitem", "test_highly_nested_subclass", "test_dict_delitem", "test_weakref_list_is_not_traversed", "test_detect_deletion_during_iteration", "test_key_change_during_iteration", "test_setitem", "test_repr_recursive_values", "test_override_update", "test_dict_setdefault", "test_yaml_linkage", "test_iterators_empty", "__hash__", "test_reference_loop", "test_move_to_end", "test_sizeof", "blocking_hash", "test_init_calls"], "function_calls": ["check", "sorted", "meth", "getattr", "reversed", "all", "shuffle", "id", "repr", "issubclass", "replaced_module", "iter", "str", "size", "dict", "randrange", "Exception", "calcsize", "range", "setattr", "list", "Spam", "Missing", "MyOD", "r", "next", "type", "enumerate", "OrderedDict", "eval", "len", "Key", "blocking_hash"], "class_names": ["CPythonOrderedDictTests", "PurePythonOrderedDictSubclassTests", "PurePythonSubclassMappingTests", "MyOrderedDict", "Spam", "Key", "PurePythonOrderedDictTests", "Missing", "MyOD", "CPythonOrderedDictSubclassTests", "CPythonSubclassMappingTests", "A", "CPythonBuiltinDictTests", "CPythonGeneralMappingTests", "PurePythonGeneralMappingTests", "OrderedDict", "OrderedDictTests"], "class_method_calls": ["calls.append", "mapping_tests.BasicTestMappingProtocol", "od.keys", "unittest.skipUnless", "od.move_to_end", "self.assertEqual", "support.gc_collect", "struct.calcsize", "self.assertNotEqual", "d.values", "self.assertIs", "c_coll.OrderedDict", "sys.getsizeof", "self.assertRaises", "OrderedDict.fromkeys", "dict.__setitem__", "od.x", "pickle.HIGHEST_PROTOCOL", "dup.items", "od.update", "self.i", "self.assertTrue", "cycle.append", "self.assertIsInstance", "od.__dict__", "dict.pop", "self.check_sizeof", "od.pop", "self.assertNotIn", "support.import_fresh_module", "od.values", "dict.clear", "self.subTest", "od.items", "dict.setdefault", "dup.keys", "copy.deepcopy", "contextlib.contextmanager", "pickle.loads", "self.assertIsNone", "self.assertIsNot", "pairs.pop", "OrderedDict.__init__", "gc.collect", "unittest.TestCase", "copy.copy", "deleted.append", "self.assertLess", "obj.popitem", "self.value", "self._empty_mapping", "d.update", "od.setdefault", "d.__init__", "py_coll.OrderedDict", "self.assertGreater", "unittest.main", "m.pop", "cls.type2test", "self.OrderedDict", "self.module", "support.check_sizeof", "dict.__delitem__", "support.check_free_after_iterating", "sys.modules", "d.popitem", "d.items", "d.keys", "other.value", "update_test.update", "od.clear", "x.cycle", "A.od", "self._hash", "od.__reduce__", "dict.popitem", "gc.is_tracked", "dict.update", "OrderedDict.update", "weakref.ref", "obj.i", "od.copy", "support.cpython_only", "pickle.dumps", "support.calcobjsize", "od.popitem"]}, "test_os.py": {"libraries": ["uuid", "pwd", "contextlib", "ctypes.wintypes", "_winapi", "warnings", "subprocess", "test.support", "resource", "sysconfig", "unittest", "test.mapping_tests", "threading", "asyncore", "signal", "codecs", "test.support.script_helper.assert_python_ok", "locale", "fcntl", "socket", "os", "test.support.FakePath", "itertools", "time", "msvcrt", "shutil", "tempfile", "fnmatch", "_testcapi.INT_MAX", "platform.win32_is_iot", "stat", "errno", "mmap", "asynchat", "sys", "decimal", "pickle", "ctypes", "_testcapi.PY_SSIZE_T_MAX", "fractions", "test.support.unix_shell"], "function_names": ["test_set_get_priority", "test_fds", "test_getlogin", "test_broken_symlink", "test_blocking", "test_open_keywords", "test_utime", "test_device_encoding", "test_os_all", "test_seteuid", "test_utime_by_indexed", "test_invalid_offset", "test_remove", "test_not_symlink", "test_1686475", "add_filename", "test_attributes", "test_closerange", "test_flags", "test_pathlike_subclasshook", "test_bad_path_type", "test_dup_standard_stream", "test_walk_many_open_files", "test_getrandom_random", "test_setregid_neg1", "check_file_attributes", "test_issue31577", "helper", "set_time", "removexattr", "test_iter_error_when_changing_os_environ_values", "test_walk_symlink", "test_listdir_no_extended_path", "test_spawnvpe", "test_send_whole_file", "test_stat_attributes_bytes", "test_stat_result_pickle", "test_getppid", "_reference", "create_args", "test_spawnv", "__init__", "_kill", "setxattr", "test_keywords", "test_urandom_value", "test_replace", "test_copy_file_range_offset", "requires_os_func", "test_dir_fd", "test_statvfs", "test_dup2", "test_file_attributes", "test_headers_overflow_32bits", "test_mode", "test_large_time", "test_bad_fd", "test_write", "_check_xattrs_str", "handle_close", "tearDown", "_test_utime", "test_identity", "test_get_set_inheritable", "test_chmod", "test_devnull", "test_yields_correct_dir_fd", "test_29248", "test_pipe", "test_15261", "_execvpe_mockup", "_test_utime_current", "test_lseek", "test_utime_fd", "test_urandom_subprocess", "test_directory_link_nonlocal", "test_getcwd", "test_stat", "test_urandom_fd_closed", "wait", "test_cpu_count", "test_getrandom_nonblock", "test_trailers", "check_entry", "test_link_bytes", "test_os_popen_iter", "writable", "get_entries", "test_getcwdb", "test_fpathconf", "test_empty_path", "supports_extended_attributes", "test_does_not_crash", "test_makedir", "test_path_t_converter", "test_appexeclink", "test_rmdir_on_directory_link_to_missing_target", "test_setgid", "getxattr", "test_statvfs_attributes", "test_create_junction", "write_windows_console", "_compare_to_walk", "test_chown_with_root", "test_write_windows_console", "support_subsecond", "running", "test_utime_nofollow_symlinks", "test_stty_match", "_empty_mapping", "test_update2", "test_getrandom_value", "test_chdir", "test_setregid", "test_spawnve_noargs", "test_unset_error", "test_remove_nothing", "test_consume_iterator_twice", "test_context_manager", "test_resource_warning", "assertPathEqual", "test_walk_prune", "test_spawnlpe", "get_data", "get_single", "test_bytes", "test_chown_without_permission", "test_buffer_overflow", "test_walk_bad_dir", "test_execvpe_with_bad_program", "handle_accept", "trunc", "test_copy_file_range", "fdopen_helper", "test_environb", "test_simple", "test_compare_to_walk", "test_setegid", "test_utime_dir_fd", "test_get_inheritable_cloexec", "test_internal_execvpe_str", "test_nowait", "test_exist_ok_existing_regular_file", "test_urandom_failure", "fwalk", "test_kill_sigterm", "test_getfinalpathname_handles", "test_ftruncate", "check_stat_attributes", "test_access", "test_get_exec_path", "test_garbage_in_exception_out", "test_fdopen", "test_exist_ok_existing_directory", "check_waitpid", "test_execve_invalid_env", "test_read", "test_getcwd_long_path", "test_symlink_keywords", "setUp", "test_bad_pathlike", "test_listdir", "test_fspath_protocol", "test_iter_error_when_changing_os_environ", "test_missing_link", "test_utime_current_old", "test_walk_bottom_up", "test_urandom_fd_reopened", "test_iter_error_when_changing_os_environ_items", "test_inheritable", "test_spawnle", "test_memfd_create", "test_dup_nul", "test_items", "test_copy_file_range_invalid_values", "_test_internal_execvpe", "test_fchmod", "test_spawnle_noargs", "test_key_type", "check_stat", "test_spawnl_noargs", "test_spawnvpe_invalid_env", "test_utime_by_times", "test_isdir_on_directory_link_to_missing_target", "test_trailers_overflow_32bits", "_test_environ_iteration", "_test_invalid_env", "test_set_inheritable_cloexec", "test_setreuid", "get_file_system", "test_link", "test_setreuid_neg1", "test_return_bytes", "listxattr", "test_lpath", "test_current_directory", "test_statvfs_result_pickle", "test_setuid", "test_waitpid", "test_unicode_name", "test_file_like_path", "test_spawnve_invalid_env", "handle_error", "test_get_set_inheritable_o_path", "setUpClass", "test_times", "test_kill_int", "assert_stat_equal", "test_waitpid_exitcode", "start", "test_getrandom_type", "test_tcsetpgrpt", "test_removed_file", "test_chown_uid_gid_arguments_must_be_index", "test_argument_required", "test_path_t_converter_and_custom_class", "test_unlink_removes_junction", "test_exist_ok_s_isgid_directory", "sendfile_wrapper", "test_offset_overflow", "test___repr__", "test_chown_gid", "handle_connect", "mock_execv", "test_openpty", "test_fsencode_fsdecode", "test_access_denied", "test_spawnve", "test_spawnlp", "test_directory_link", "test_bytes_like", "test_spawnv_noargs", "test_keyvalue_types", "test_spawnve_bytes", "create_file", "test_utime_directory", "check", "test_waitpid_windows", "stop", "test_remove_partial", "test_execvpe_with_bad_arglist", "test_context_manager_close", "get_urandom_subprocess", "test_pathlike_bytes", "test_repr", "test_utime_current", "test_isatty", "test_12084", "test_open", "test_return_string", "test_fchown", "test_walk_topdown", "test_spawnl", "test_stat_block_device", "test_get_set_inheritable_badf", "test_large_read", "test_close", "test_execve_with_empty_path", "test_file_link", "test_removed_dir", "walk", "test_CTRL_C_EVENT", "test_headers", "test_fd", "handle_read", "ns_to_sec", "test_utime_invalid_arguments", "_test_link", "_kill_with_event", "_check_xattrs", "test_listdir_extended_path", "test_pathlike", "run", "get_entry", "create_file_entry", "__divmod__", "tearDownClass", "test_readv", "test_getrandom0", "test_remove_directory_link_to_missing_target", "test_remove_all", "mock_execve", "_create_missing_dir_link", "test_send_at_certain_offset", "test_stat_attributes", "test_dup", "test_fspath_protocol_bytes", "test_context_manager_exception", "test_urandom_length", "test_mkdir", "get_bad_int", "test_nop", "test_execv_with_bad_arglist", "test_writev", "test_oserror_filename", "test_CTRL_BREAK_EVENT", "test_rename", "test_fd_leak", "test_spawnvp"], "function_calls": ["create_file", "BadInt", "object", "min", "fn", "sorted", "assert_python_ok", "getattr", "cls", "memoryview", "supports_extended_attributes", "add_filename", "RuntimeError", "repr", "isinstance", "getxattr", "issubclass", "win32_is_iot", "set_time", "join", "removexattr", "iter", "str", "s", "Str", "locals", "SetConsoleCtrlHandler", "staticmethod", "listxattr", "dict", "open", "setxattr", "hash", "symlink", "range", "requires_os_func", "ValueError", "list", "dir", "get_single", "set", "cleanup_fn", "int", "next", "type", "PeekNamedPipe", "trunc", "enumerate", "func", "OSError", "f", "spawn", "hasattr", "bytearray", "len", "_execvpe_mockup", "map", "SendfileTestServer", "get_bad_int", "has_prefix", "ZeroDivisionError", "bytes", "FakePath", "c", "vapor", "print"], "class_names": ["BadInt", "ExportsTests", "TestPEP519", "ExecTests", "BytesFwalkTests", "TermsizeTests", "Win32SymlinkTests", "OSErrorTests", "CPUCountTests", "TestInvalidFD", "RemoveDirsTests", "DeviceEncodingTests", "Win32JunctionTests", "Win32ListdirTests", "Win32ErrorTests", "MakedirTests", "EnvironTests", "TimesTests", "FileTests", "UtimeTests", "FSEncodingTests", "Str", "FwalkTests", "A", "ExtendedAttributeTests", "LinkTests", "TestPEP519PurePython", "DevNullTests", "Pep383Tests", "LoginTests", "ProgramPriorityTests", "PosixUidGidTests", "Win32NtTests", "Win32KillTests", "MiscTests", "WalkTests", "NonLocalSymlinkTests", "BytesWalkTests", "ChownFileTests", "TestScandir", "URandomTests", "PathTConverterTests", "URandomFDTests", "GetRandomTests", "Handler", "MemfdCreateTests", "PidTests", "StatAttributeTests", "ReadlinkTests", "SendfileTestServer", "TestSendfile", "BlockingTests", "SpawnTests", "FDInheritanceTests"], "class_method_calls": ["itertools.product", "fractions.Fraction", "os.O_RDONLY", "e.errno", "self.check_stat", "names.extend", "entry.inode", "times.children_user", "os.environb", "support.skip_unless_symlink", "entry.is_dir", "os.sep", "os.open", "shutil.rmtree", "st.st_atime", "os.lchflags", "pickle.HIGHEST_PROTOCOL", "os.__all__", "os.spawnlpe", "self.check_waitpid", "in_file.fileno", "self.server", "os.execv", "os.P_NOWAIT", "support.HOST", "self._kill_with_event", "wintypes.DWORD", "support.requires_linux_version", "self.client", "self._test_utime_current", "decimal.Decimal", "support.import_module", "os.setegid", "dirs.remove", "os.F_OK", "self.assertNotIn", "self.walk", "self._test_internal_execvpe", "exc.errno", "self.assert_stat_equal", "os.rmdir", "asynchat.async_chat", "self.subTest", "ctypes.c_char", "os.chroot", "unittest.skip", "os.setregid", "name.lower", "times.children_system", "fwalk_kwargs.copy", "walk_kwargs.copy", "os.fchown", "self.bdir", "os.path", "os.fdopen", "entry.is_file", "stat.ST_SIZE", "os.devnull", "self.get_entries", "os.statvfs", "os.read", "all.append", "os.lchmod", "uuid.uuid1", "popen.read", "self.check_entry", "funcs.extend", "self.env", "os.getgid", "os.set_blocking", "value.encode", "os.fspath", "kwargs.pop", "signal.CTRL_C_EVENT", "self.sub1_path", "self.walk_path", "os.link", "self.bytes_filenames", "os.times_result", "self.assertWarns", "entry.path", "self.missing_link", "support.bigmemtest", "uuid.uuid4", "os.lseek", "os.listdir", "result.parrot", "support.TESTFN_UNICODE", "self.support_subsecond", "self.assertSequenceEqual", "subprocess.CREATE_NEW_PROCESS_GROUP", "self.assertIsNotNone", "self.assertAlmostEqual", "os.listxattr", "st.st_reparse_tag", "os.fsdecode", "os.SF_NODISKIO", "os.spawnvp", "os.removexattr", "PeekNamedPipe.restype", "result.f_bfree", "self.check", "os.spawnvpe", "self.handler_instance", "errno.ENODATA", "fobj.flush", "self.check_file_attributes", "self.fail", "ctypes.WinDLL", "os.closerange", "os.setgid", "self.sendfile_wrapper", "self._active_lock", "self.file", "os.set_inheritable", "self._test_environ_iteration", "self._check_xattrs_str", "socket.SHUT_RDWR", "self.recv", "subprocess.CalledProcessError", "fp.fileno", "socket.socket", "os.mkdir", "ctypes.wintypes", "self.link_path", "os.chflags", "sys.executable", "os.write", "os.ftruncate", "err.filename", "self.__save", "warnings.catch_warnings", "os.fchmod", "os.stat_result", "self.host", "self.assertRaises", "os.fstat", "msvcrt.get_osfhandle", "errno.EEXIST", "cls.key", "os.tcsetpgrp", "os.O_RDWR", "ctypes.POINTER", "entries.keys", "stat.S_ISLNK", "os.XATTR_CREATE", "in_file.read", "os.WIFEXITED", "os.copy_file_range", "cm.exception", "os.getcwd", "self.__saveb", "asyncore.close_all", "SetConsoleCtrlHandler.restype", "os.openpty", "kernel32.GetVolumeInformationW", "self.create_file_entry", "walk_kwargs.update", "os.curdir", "self.bind", "os.get_exec_path", "self.assertIsNone", "os.getlogin", "os.truncate", "self.filelinkb", "errno.ENOSYS", "stat.S_IMODE", "os.getgroups", "self.sockno", "os.GRND_NONBLOCK", "os.geteuid", "os.times", "value.decode", "self.assertLessEqual", "fcntl.F_GETFD", "os.isatty", "st.st_mode", "os.PRIO_PROCESS", "self.addCleanup", "subprocess.check_call", "support.check_no_resource_warning", "os.execve", "os.execvpe", "self.unicodefn", "self.bytes_path", "cls.DATA", "os.chmod", "self.accept", "signal.SIGTERM", "self.Handler", "self.junction", "p.startswith", "os.getrandom", "os.dup", "errno.EACCES", "p.communicate", "os.waitpid", "os.rename", "self.fileno", "os.O_PATH", "subprocess.CREATE_NEW_CONSOLE", "result.st_size", "self._test_utime", "ctypes.create_string_buffer", "os.spawnv", "support.get_attribute", "os.pathconf", "self.check_no_resource_warning", "self.exitcode", "f.read", "self.fspath", "self.__flag", "self._kill", "self._create_missing_dir_link", "sys.getrefcount", "kernel.GetProcessHandleCount", "ctypes.windll", "self.file1", "time.sleep", "nt._getfinalpathname", "xattr.add", "stat.S_ISGID", "os.supports_follow_symlinks", "self.skipTest", "os.writev", "os.stat", "self.push", "self.running", "support.requires_mac_ver", "calls.append", "self.closed", "os.getuid", "threading.Lock", "unittest.skipUnless", "os.getpid", "support.gc_collect", "self.assertNotEqual", "stat.S_IRWXU", "self.assertGreaterEqual", "os.DirEntry", "support.create_empty_file", "self.assertIs", "support.TESTFN", "self._test_link", "wintypes.HANDLE", "errno.EBUSY", "proc.pid", "self.get_urandom_subprocess", "support.TESTFN_UNENCODABLE", "os.P_WAIT", "os.O_WRONLY", "os.XATTR_REPLACE", "size.columns", "os.PathLike", "os.setpriority", "os.readlink", "self.join", "self.assertTrue", "os.get_inheritable", "os.setreuid", "pwd.getpwall", "support.temp_umask", "os.setxattr", "self._test_invalid_env", "os.sendfile", "out_file.fileno", "stat.IO_REPARSE_TAG_APPEXECLINK", "mmap.mmap", "self.stop", "stat.S_ISREG", "unittest.SkipTest", "os.supports_bytes_environ", "os.seteuid", "self.create_file", "self.UID_OVERFLOW", "c.__fspath__", "entry.name", "f.tell", "self.fwalk", "wintypes.BOOL", "os.get_terminal_size", "self.listen", "contextlib.contextmanager", "os.replace", "self.get_entry", "entry.is_symlink", "os.spawnve", "stat.S_IFBLK", "stat.FILE_ATTRIBUTE_DIRECTORY", "proc.stdout", "self.port", "os.supports_dir_fd", "self.dir", "self._compare_to_walk", "self.dirlink", "proc.poll", "sys.platform", "fobj.write", "self.dirname", "e.winerror", "bytesfn.append", "subprocess.call", "fp.write", "os.fsencode", "f.write", "os.utime", "self.sub2_tree", "fcntl.FD_CLOEXEC", "ctx.exception", "support.make_bad_fd", "self.assertWarnsRegex", "proc.stdin", "os.spawnle", "support.unlink", "result.f_fsid", "os._fspath", "os.access", "self.socket", "self.fname", "out_file.close", "os.environ", "time.time", "os.chown", "fcntl.F_SETFD", "self.key", "f.close", "os.getxattr", "os.kill", "self.filelinkb_target", "os.urandom", "err.errno", "self.created_paths", "support.threading_cleanup", "support.TESTFN_UNDECODABLE", "self.assertRaisesRegex", "os.popen", "self._check_xattrs", "buf.value", "os.MFD_CLOEXEC", "self.assertIn", "self.functions", "self.assertPathEqual", "entry.stat", "times.elapsed", "os.getcwdb", "self._active", "os.remove", "fnmatch.filter", "kernel.GetCurrentProcess", "errno.EAGAIN", "self.dirlink_target", "unittest.skipIf", "errno.ENOTDIR", "support.verbose", "codecs.lookup", "os.cpu_count", "asyncore.dispatcher", "self.DATA", "support.cpython_only", "pickle.dumps", "self.file2", "os.name", "threading.Thread", "os.fwalk", "self.write_windows_console", "os.pipe", "mapping_tests.BasicTestMappingProtocol", "os.scandir", "signal.CTRL_BREAK_EVENT", "fwalk_kwargs.update", "self.assertEqual", "socket.SOCK_STREAM", "asyncore.loop", "PeekNamedPipe.argtypes", "stat.st_uid", "self.close", "tempfile.TemporaryDirectory", "os.W_OK", "os.lchown", "xattr.remove", "self.sub11_path", "SetConsoleCtrlHandler.argtypes", "os.close", "f1.fileno", "result.st_rdev", "os.get_blocking", "errors.append", "sysconfig.get_config_var", "errno.ENOTTY", "name.endswith", "os.spawnlp", "env.copy", "attr.startswith", "self.assertIsInstance", "self.in_buffer", "ctypes.byref", "os.makedirs", "entry_stat.st_mode", "os.symlink", "f2.fileno", "names.append", "self.filelink_target", "os.supports_fd", "fcntl.fcntl", "os.umask", "errno.EINVAL", "subprocess.Popen", "self.check_stat_attributes", "self.filelink", "os.device_encoding", "os.WEXITSTATUS", "result.st_mode", "handle_count.value", "os.getpriority", "pickle.loads", "signal.SIGINT", "support.can_symlink", "os.fpathconf", "sys.maxsize", "self.accumulate", "os.memfd_create", "os.O_CREAT", "expected_names.append", "st.st_mtime", "funcs.append", "unittest.TestCase", "self.assertFalse", "support.change_cwd", "iterator.close", "os.pathsep", "self.test_walk_prune", "entry_lstat.st_mode", "size.lines", "st.st_ctime", "st.st_atime_ns", "os.dup2", "os.lstat", "self.get_file_system", "support.TESTFN_NONASCII", "self.GID_OVERFLOW", "os.readv", "self.filenames", "stat.st_gid", "ctypes.sizeof", "os.statvfs_result", "support.threading_setup", "st.st_mtime_ns", "_winapi.CreateJunction", "subprocess.PIPE", "self.path", "self.assertGreater", "unittest.main", "os._execvpe", "sys.__stdin__", "os.walk", "proc.wait", "asyncore.socket_map", "errno.ECONNRESET", "os.removedirs", "sys.getfilesystemencoding", "os.defpath", "stat.S_ISDIR", "self.unicode_filenames", "os.spawnl", "self.fdopen_helper", "in_file.close", "fobj.read", "socket.AF_INET", "ctypes.create_unicode_buffer", "proc.stderr", "os.chdir", "os.setuid", "self.create_args", "self._reference", "threading.Event", "support.rmtree", "env.items", "u.pw_uid", "fobj.fileno", "result.st_file_attributes", "errno.EBADF", "self.ns_to_sec", "self.junction_target", "os.unlink", "subprocess.check_output", "self.SUPPORT_HEADERS_TRAILERS", "errno.ENAMETOOLONG", "sys.thread_info", "ctypes.c_int", "f.fileno", "self.create_socket"]}, "test_ossaudiodev.py": {"libraries": ["unittest", "sunau", "time", "test.support.findfile", "ossaudiodev.AFMT_S16_NE", "sys", "audioop", "test.support", "errno"], "function_names": ["test_main", "set_parameters", "test_with", "test_set_parameters", "test_on_closed", "test_playback", "play_sound_file", "read_sound_file", "test_mixer_methods", "set_bad_parameters"], "function_calls": ["test_main", "len", "findfile", "abs", "open", "read_sound_file", "float", "setattr", "RuntimeError"], "class_names": ["OSSAudioDevTests"], "class_method_calls": ["time.monotonic", "ossaudiodev.OSSAudioError", "sunau.AUDIO_FILE_ENCODING_MULAW_8", "dsp.bufsize", "errno.ENOENT", "errno.EACCES", "au._encoding", "audioop.ulaw2lin", "ossaudiodev.AFMT_U8", "sys.byteorder", "self.assertEqual", "self.assertNotEqual", "support.import_module", "dsp.obuffree", "msg.args", "support.requires", "self.assertGreaterEqual", "ossaudiodev.openmixer", "errno.ENODEV", "dsp.getptr", "dsp.obufcount", "unittest.SkipTest", "self.play_sound_file", "self.set_parameters", "self.fail", "ossaudiodev.AFMT_S16_LE", "dsp.setparameters", "dsp.writeall", "sunau.open", "dsp.name", "self.assertRaises", "mixer.fileno", "dsp.write", "errno.EBUSY", "dsp.close", "dsp.channels", "support.run_unittest", "dsp.read", "dsp.speed", "dsp.mode", "fp.read", "ossaudiodev.open", "ossaudiodev.AFMT_S16_BE", "dsp.closed", "au.getframerate", "au.getnchannels", "fp.seek", "self.assertTrue", "ossaudiodev.error", "unittest.TestCase", "dsp.setfmt", "self.assertFalse", "dsp.fileno", "mixer.close"]}, "test_osx_env.py": {"libraries": ["unittest", "sys", "subprocess", "test.support.EnvironmentVarGuard", "sysconfig"], "function_names": ["_check_sys", "test_pythonexecutable_sets_sys_executable"], "function_calls": ["str", "EnvironmentVarGuard"], "class_names": ["OSXEnvironmentVariableTestCase"], "class_method_calls": ["evg.set", "subprocess.call", "evg.unset", "sys.platform", "sys.executable", "unittest.skipUnless", "self.assertEqual", "self._check_sys", "sysconfig.get_config_var", "unittest.TestCase", "unittest.main"]}, "test_pathlib.py": {"libraries": ["unittest", "pwd", "io", "test.support.TESTFN", "test.support.FakePath", "grp", "test.support", "urllib.parse.quote_from_bytes", "sys", "tempfile", "pathlib", "pickle", "unittest.mock", "collections.abc", "socket", "os", "stat", "errno"], "function_names": ["test_equivalences", "test_as_bytes_common", "test_is_socket_true", "test_complex_symlinks_absolute", "_check", "test_as_posix_common", "test_is_block_device_false", "test_as_uri_common", "test_is_mount", "test_parse_parts", "test_suffix_common", "_test_home", "test_root", "test_is_fifo_true", "test_different_flavours_unordered", "test_glob_many_open_files", "test_truediv", "test_str", "test_eq", "test_iterdir_symlink", "test_eq_common", "test_expanduser_common", "test_is_file", "__init__", "assertFileNotFound", "test_is_char_device_true", "test_replace", "test_parts_interning", "test_open_mode", "test_cwd", "test_resolve_loop", "test_ordering_common", "test_parent", "test_parts", "test_chmod", "test_iterdir", "test_match_common", "test_drive", "test_anchor_common", "test_is_fifo_false", "test_complex_symlinks_relative_dot_dot", "cleanup", "assertOrderedEqual", "test_div", "test_touch_nochange", "test_splitroot", "test_str_common", "test_stat", "test_rtruediv", "test_repr_common", "test_mkdir_exist_ok", "test_mkdir_no_parents_file", "test_drive_common", "test_complex_symlinks_relative", "test_str_subclass", "_check_complex_symlinks", "__rtruediv__", "test_name_common", "test_mkdir_exist_ok_with_parent", "test_exists", "test_read_write_bytes", "test_str_subclass_common", "test_join_common", "test_suffixes", "test_with_name_common", "test_stem", "test_resolve_common", "test_root_common", "test_relative_to_common", "assertLess", "_check_str", "test_with", "test_unlink", "test_parents_common", "test_mkdir_with_unknown_drive", "test_resolve_root", "test_mkdir_concurrent_parent_creation", "assertSame", "test_with_suffix_common", "test_concrete_class", "test_parent_common", "_check_symlink_loop", "dirlink", "test_parse_parts_common", "test_samefile", "test_group", "test_rglob_common", "test_owner", "test_mkdir_parents", "test_is_dir", "test_symlink_to", "test_with_name", "test_rglob", "setUp", "_test_cwd", "__truediv__", "test_as_uri", "test_pickling_common", "test_parents", "_check_resolve", "test_name", "test_relative_to", "test_empty_path", "test_glob_dotdot", "test_glob_empty_pattern", "assertEqualNormCase", "test_touch_mode", "test_expanduser", "test_resolve_dot", "_check_str_subclass", "test_rmdir", "test_open_common", "test_stem_common", "test_is_socket_false", "test_is_char_device_false", "test_with_suffix", "test_touch_common", "test_is_symlink", "test_home", "test_glob_common", "test_anchor", "test_suffix", "test_suffixes_common", "test_lstat_nosymlink", "test_link_to", "test_link_to_not_implemented", "test_match", "test_different_flavours_unequal", "test_is_absolute", "test_unsupported_flavour", "check", "test_glob", "test_unlink_missing_ok", "test_parts_common", "test_mkdir_with_child_file", "test_mkdir_exist_ok_root", "test_fspath_common", "test_lstat", "test_is_reserved", "test_join", "test_as_uri_non_ascii", "test_glob_permissions", "test_rglob_symlink_loop", "test_div_common", "my_mkdir", "test_constructor_common", "_check_parse_parts", "test_mkdir", "test_read_write_text", "test_rename", "test_handling_bad_descriptor", "test_iterdir_nodir"], "function_calls": ["check", "_check", "sorted", "StrSubclass", "repr", "isinstance", "join", "str", "quote_from_bytes", "tuple", "hash", "open", "assertLess", "range", "list", "set", "rel_join", "next", "type", "func", "bool", "eval", "f", "hasattr", "len", "assertOrderedEqual", "P", "bytes", "FakePath", "map", "print"], "class_names": ["_BaseFlavourTest", "PureWindowsPathTest", "WindowsPathAsPureTest", "NTFlavourTest", "PosixPathTest", "StrSubclass", "PathTest", "PurePosixPathTest", "PosixPathAsPureTest", "PurePathTest", "PosixFlavourTest", "WindowsPathTest", "_BasePurePathTest", "CompatiblePathTest", "_BasePathTest", "CompatPath"], "class_method_calls": ["os.mkdir", "file3.symlink_to", "expected.replace", "base.mkdir", "R.is_mount", "os.getuid", "file2.touch", "link.iterdir", "link.is_dir", "os.scandir", "unittest.skipUnless", "os.mkfifo", "self.cls", "self.assertEqual", "self.assertNotEqual", "socket.SOCK_STREAM", "env.pop", "r.endswith", "pp.stat", "e.errno", "self.assertGreaterEqual", "self.assertIs", "p.expanduser", "p.mkdir", "io.RawIOBase", "socket.AF_UNIX", "self.altsep", "p.is_absolute", "self._check_str_subclass", "p.as_posix", "support.skip_unless_symlink", "self._check_parse_parts", "p.unlink", "link.symlink_to", "q.rename", "self.assertRaises", "io.TextIOBase", "self._check_symlink_loop", "f.is_socket", "file1.touch", "p.iterdir", "scandir.return_value", "pp.__class__", "q.resolve", "pickle.HIGHEST_PROTOCOL", "self.flavour", "p4.expanduser", "errno.EEXIST", "grp.getgrgid", "base.rglob", "support._longpath", "P.exists", "p7.expanduser", "self.assertTrue", "support.fs_is_case_insensitive", "pwd.getpwall", "P.is_socket", "self.assertIsInstance", "errno.ENOENT", "pathlib.WindowsPath", "x.replace", "pathlib._windows_flavour", "base.glob", "p.glob", "support.import_module", "P.is_char_device", "os.symlink", "cm.exception", "p.replace", "p.touch", "subdir.mkdir", "os.getcwd", "tempfile.mkdtemp", "link.lstat", "os.umask", "errno.EINVAL", "pathlib.PosixPath", "self.assertNotIn", "f.exists", "part.replace", "p6.expanduser", "equivalences.update", "P.is_fifo", "pickle.loads", "p.exists", "pwdent.pw_name", "support.can_symlink", "q.__class__", "self.string", "os.path", "p.lstat", "p._flavour", "q.stat", "self.sep", "sock.close", "st.st_mtime", "self._check_str", "self._check_resolve_absolute", "concurrently_created.add", "unittest.TestCase", "p3.expanduser", "self.assertFalse", "self.dirlink", "self.assertLess", "sys.platform", "sock.bind", "stat.S_IMODE", "r.startswith", "r.resolve", "pathlib.__dict__", "p.group", "self._check_complex_symlinks", "self._test_home", "f.is_dir", "self.assertLessEqual", "f.is_block_device", "os.fsencode", "st.st_mode", "os.utime", "os.fspath", "f.write", "self.addCleanup", "pattern.pop", "f.is_fifo", "k.replace", "env.clear", "p12.mkdir", "p.parents", "p.rename", "p.parent", "st.st_mtime_ns", "subdir.chmod", "p.__class__", "p.is_dir", "self.assertGreater", "p.parts", "p.resolve", "p1.expanduser", "self._test_cwd", "unittest.main", "path.resolve", "pathlib.PurePosixPath", "q.unlink", "os.chmod", "P.is_block_device", "p.open", "link.stat", "p.absolute", "f.is_file", "p.rglob", "p.link_to", "self.assertFileNotFound", "p5.expanduser", "pwdent.pw_dir", "self._check_resolve_relative", "q.parts", "self.assertRaisesRegex", "p.chmod", "os.chdir", "result.string", "self.assertIn", "p.relative_to", "support.rmtree", "self.CompatPath", "self.fail", "io.BufferedIOBase", "f.is_char_device", "pathlib.PureWindowsPath", "q.replace", "f.read", "_BasePurePathTest.equivalences", "pwd.getpwuid", "p.rmdir", "p.samefile", "unittest.skipIf", "pathlib.Path", "errno.ENOTDIR", "p.owner", "p2.expanduser", "errno.EBADF", "p.__enter__", "collections.abc", "self.assertEqualNormCase", "mock.patch", "r.samefile", "target.stat", "p.joinpath", "pathlib._posix_flavour", "tuples.append", "q.link_to", "pickle.dumps", "os.name", "self.skipTest", "os.stat", "self.equivalences", "support.EnvironmentVarGuard", "p.__fspath__", "f.is_symlink", "p.stat", "P.is_file", "pathlib.PurePath", "socket.socket"]}, "test_pdb.py": {"libraries": ["unittest", "doctest", "types", "contextlib.ExitStack", "textwrap", "bdb.Breakpoint", "codecs", "sys", "os", "io.StringIO", "subprocess", "unittest.mock.patch", "test.test_pdb", "test.support", "pdb", "test.test_doctest._FakeInput"], "function_names": ["test_pdb_skip_modules", "test_pdb_next_command_in_generator_for_loop", "__exit__", "run_pdb_module", "test_list_commands", "test_next_until_return_at_return_event", "test_pdb_run_with_incorrect_argument", "test_find_function_found_with_encoding_cookie", "test_pdb_skip_modules_with_callback", "pdb_invoke", "test_readrc_homedir", "test_header", "reset_Breakpoint", "test_relative_imports_on_plain_module", "test_issue42383", "test_pdb_next_command_subiterator", "test_pdb_issue_20766", "test_find_function_found", "test_find_function_found_with_bom", "test_errors_in_command", "test_issue16180", "__enter__", "test_run_pdb_with_pdb", "test_pdb_displayhook", "__init__", "test_pdb_return_command_for_coroutine", "test_pdb_breakpoint_commands", "test_pdb_next_command_for_generator", "test_pdb_until_command_for_generator", "test_blocks_at_first_code_line", "test_issue36250", "test_module_is_run_as_main", "do_nothing", "test_pdb_next_command_for_coroutine", "test_issue42384", "test_post_mortem", "load_tests", "test_issue7964", "_assert_find_function", "test_readrc_kwarg", "test_relative_imports", "test_pdb_next_command_for_asyncgen", "test_pdb_until_command_for_coroutine", "do_something", "test_pdb_basic_commands", "test_module_without_a_main", "tearDown", "test_pdb_whatis_command", "run_pdb_script", "test_run_module", "test_issue13120", "test_issue13183", "test_pdb_return_command_for_generator", "test_issue26053", "test_issue42384_symlink", "test_breakpoint", "test_pdb_continue_in_bottomframe", "test_pdb_run_with_code_object", "_run_pdb", "test_find_function_empty_file"], "function_calls": ["any", "getattr", "all", "patch", "StringIO", "ExitStack", "hasattr", "open", "_FakeInput", "exec", "print"], "class_names": ["PdbTestCase", "PdbTestInput"], "class_method_calls": ["stdout.split", "os.mkdir", "stdout.decode", "self._run_pdb", "self.run_pdb_module", "sys.executable", "x.strip", "Breakpoint.next", "self.assertEqual", "stdout.splitlines", "proc.communicate", "pdb.set_trace", "self.run_pdb_script", "os.symlink", "self.orig_trace", "support.temp_cwd", "f.write", "support.TESTFN", "self.assertIn", "support.rmtree", "self.addCleanup", "patch.object", "bytes.decode", "support.temp_dir", "subprocess.Popen", "self.assertNotIn", "subprocess.STDOUT", "support.skip_unless_symlink", "Breakpoint.bplist", "self._assert_find_function", "self.assertRegex", "stdout.getvalue", "pdb.Pdb", "support.unlink", "unittest.makeSuite", "stdout.replace", "subprocess.PIPE", "Breakpoint.bpbynumber", "sys.stdin", "os.environ", "mod.__dict__", "unittest.main", "codecs.BOM_UTF8", "textwrap.dedent", "types.ModuleType", "proc.stdout", "pdb.find_function", "self.real_stdin", "os.path", "self.module_name", "pdb._usage", "resources.enter_context", "unittest.TestSuite", "doctest.DocTestSuite", "sys.settrace", "self.input", "self.assertTrue", "sys.gettrace", "unittest.TestCase", "str.encode"]}, "test_peepholer.py": {"libraries": ["unittest", "test.bytecode_helper.BytecodeTestCase", "dis"], "function_names": ["negzero", "test_elim_jump_to_uncond_jump3", "test_elim_jump_after_return2", "test_in_literal_list", "test_while_one", "test_folding_of_lists_of_constants", "test_trailing_nops", "test_bug_11510", "test_elim_jump_to_return", "test_elim_jump_to_uncond_jump", "count_instr_recursively", "test_folding_of_unaryops_on_constants", "test_iterate_literal_list", "check_lnotab", "test_elim_jump_after_return1", "test_elim_jump_to_uncond_jump2", "test_condition_with_binop_with_bools", "unot", "check_jump_targets", "crater", "h", "test_folding_of_binops_on_constants", "test_global_as_constant", "test_binary_subscr_on_unicode", "f", "test_folding_of_tuples_of_constants", "g", "test_unot", "test_elim_inversion_of_is_or_in", "test_pack_unpack", "test_folding_of_sets_of_constants", "test_if_with_if_expression", "test_constant_folding", "forloop", "test_elim_extra_return", "containtest", "test_make_function_doesnt_bail"], "function_calls": ["count_instr_recursively", "list", "len", "min", "g", "compile", "max", "frozenset", "tuple", "baz", "foo", "repr", "f", "range", "hasattr"], "class_names": ["TestBuglets", "TestTranforms"], "class_method_calls": ["instr.opname", "self.assertLess", "f.co_consts", "tgt.opname", "self.assertEqual", "self.assertGreaterEqual", "self.assertLessEqual", "dis._get_code_object", "self.assertInBytecode", "self.fail", "self.assertNotInBytecode", "self.assertNotIn", "tgt.offset", "self.assertRaises", "self.check_jump_targets", "f.__code__", "dis.get_instructions", "code.co_code", "self.check_lnotab", "code.co_consts", "unittest.main", "instr.offset", "instr.argval", "dis.findlinestarts", "self.assertTrue", "unittest.TestCase", "self.assertFalse"]}, "test_pickle.py": {"libraries": ["_pickle.dump", "_compat_pickle.IMPORT_MAPPING", "struct", "test.pickletester.AbstractPickleTests", "test.support", "unittest", "io", "test.pickletester.AbstractUnpickleTests", "test.pickletester.AbstractPersistentPicklerTests", "_pickle.dumps", "collections", "test.pickletester.AbstractDispatchTableTests", "_compat_pickle.REVERSE_NAME_MAPPING", "weakref", "_pickle.loads", "builtins", "test.pickletester.AbstractPickleModuleTests", "_pickle", "_pickle.load", "_compat_pickle.REVERSE_IMPORT_MAPPING", "_compat_pickle.NAME_MAPPING", "test.pickletester.AbstractIdentityPersistentPicklerTests", "_pickle.Pickler", "test.pickletester.AbstractPicklerUnpicklerObjectTests", "test.pickletester.BigmemPickleTests", "test.pickletester.AbstractHookTests", "sys", "test.pickletester.AbstractCustomPicklerClass", "pickle", "_pickle.Unpickler"], "function_names": ["check", "getmodule", "recurse", "reverse_mapping", "persistent_id", "dumps", "test_pickler", "test_main", "test_reverse_import_mapping", "mapping", "get_dispatch_table", "get_exceptions", "loads", "test_reverse_name_mapping", "test_import_mapping", "test_import", "test_unpickler", "check_unpickler", "test_pickler_reference_cycle", "test_unpickler_reference_cycle", "test_issue18339", "getattribute", "test_name_mapping", "persistent_load", "test_exceptions", "test_multiprocessing_exceptions"], "function_calls": ["check", "PersPickler", "getmodule", "recurse", "reverse_mapping", "getattr", "isinstance", "test_main", "issubclass", "__import__", "mapping", "PersUnpickler", "staticmethod", "get_exceptions", "range", "unpickler", "dir", "set", "r", "check_unpickler", "Pickler", "len", "chr", "getattribute", "bytes", "Unpickler", "print"], "class_names": ["CPickleTests", "PersPickler", "DumpPickle_CLoadPickle", "CIdPersPicklerTests", "PersistentPicklerUnpicklerMixin", "CPersPicklerTests", "PyPickleTests", "PyPersPicklerTests", "SizeofTests", "PyChainDispatchTableTests", "PersUnpickler", "CompatPickleTests", "PyPicklerUnpicklerObjectTests", "CPicklerUnpicklerObjectTests", "CustomPyPicklerClass", "PyIdPersPicklerTests", "CDumpPickle_LoadPickle", "InMemoryPickleTests", "PyPicklerHookTests", "PyUnpicklerTests", "CDispatchTableTests", "CUnpicklerTests", "CPicklerHookTests", "CPicklerTests", "PyDispatchTableTests", "CChainDispatchTableTests", "CustomCPicklerClass", "PyPicklerTests"], "class_method_calls": ["self.unpickler_class", "NAME_MAPPING.items", "f.getvalue", "unpickler.persistent_load", "u.load", "pickle.dispatch_table", "support.run_doctest", "REVERSE_NAME_MAPPING.items", "self.assertEqual", "self.pickler", "struct.calcsize", "support.import_module", "io.BytesIO", "pickle._Unpickler", "pickle._dump", "p.dump", "self.check_sizeof", "sys.modules", "unpickler.memo", "self.assertIn", "self.dumps", "self.fail", "REVERSE_IMPORT_MAPPING.get", "pickle.UnpicklingError", "pickle._loads", "self.unpickler", "self.loads", "IMPORT_MAPPING.get", "f.read", "tests.extend", "sys.getsizeof", "self.subTest", "self.assertRaises", "f.seek", "pickler.dump", "support.verbose", "support.run_unittest", "pickle._Pickler", "object.__sizeof__", "NAME_MAPPING.values", "weakref.ref", "IMPORT_MAPPING.items", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "IMPORT_MAPPING.values", "_pickle.Pickler", "collections.ChainMap", "self.assertIsNone", "unpickler.load", "name.split", "pickler.persistent_id", "struct.error", "self.persistent_id", "self.persistent_load", "REVERSE_IMPORT_MAPPING.items", "support.cpython_only", "pickle.dumps", "pickle._load", "self.assertTrue", "pickle._dumps", "support.calcobjsize", "unittest.TestCase", "pickle.Pickler", "_pickle.Unpickler", "support.check_sizeof"]}, "test_picklebuffer.py": {"libraries": ["unittest", "pickle.PickleBuffer", "gc", "weakref", "test.support"], "function_names": ["test_raw", "test_raw_non_contiguous", "check_raw", "test_cycle", "check_memoryview", "test_ndarray_2d", "check_raw_non_contiguous", "test_release", "test_basics", "test_raw_ndarray", "test_constructor_failure", "test_raw_released"], "function_calls": ["PickleBuffer", "bytearray", "list", "wpb", "B", "str", "memoryview", "ndarray", "bytes", "range"], "class_names": ["B", "PickleBufferTest"], "class_method_calls": ["self.assertIsInstance", "m.f_contiguous", "self.check_memoryview", "b.cycle", "m.itemsize", "arr.c_contiguous", "m.tobytes", "self.assertEqual", "support.import_module", "expected.c_contiguous", "expected.nbytes", "expected.itemsize", "self.assertRaisesRegex", "pb.release", "expected.tobytes", "arr.f_contiguous", "self.assertIn", "expected.shape", "m.format", "expected.format", "pb.raw", "self.check_raw_non_contiguous", "self.subTest", "self.assertRaises", "m.c_contiguous", "m.release", "raises.exception", "weakref.ref", "m.readonly", "self.assertIsNone", "unittest.main", "self.check_raw", "m.nbytes", "expected.f_contiguous", "m.strides", "self.assertTrue", "expected.readonly", "gc.collect", "expected.strides", "unittest.TestCase", "self.assertFalse", "m.shape"]}, "test_pickletools.py": {"libraries": ["unittest", "pickle", "pickletools", "test.pickletester.AbstractPickleTests", "test.support"], "function_names": ["test_main", "test_optimize_long_binget", "test_optimize_binput_and_memoize", "dumps", "loads", "test__all__"], "function_calls": ["test_main", "str", "range"], "class_names": ["MiscTestCase", "OptimizedPickleTests"], "class_method_calls": ["self.assertIs", "support.check__all__", "pickletools.optimize", "self.assertIn", "pickle.LONG_BINGET", "support.run_doctest", "support.run_unittest", "pickle.LONG_BINPUT", "pickle.dumps", "self.assertEqual", "pickle.BINPUT", "self.assertNotIn", "data.append", "pickle.loads", "pickle.HIGHEST_PROTOCOL", "unittest.TestCase"]}, "test_pipes.py": {"libraries": ["unittest", "test.support.TESTFN", "string", "test.support.unlink", "shutil", "test.support.reap_children", "pipes", "os", "test.support.run_unittest"], "function_names": ["testBadAppendOptions", "test_main", "testEmptyPipeline2", "testBadPrependOptions", "testBadOpenMode", "testEmptyPipeline3", "testWriteOpenSource", "testSetDebug", "testRepr", "testSimplePipe3", "testSimplePipe2", "testReadOpenSink", "testEmptyPipeline1", "testClone", "tearDown", "testSimplePipe1"], "function_calls": ["reap_children", "test_main", "id", "open", "run_unittest", "unlink", "repr"], "class_names": ["SimplePipeTests"], "class_method_calls": ["pipes.FILEIN_FILEOUT", "u.debugging", "string.ascii_uppercase", "pipes.SINK", "self.assertEqual", "pipes.Template", "t.clone", "self.assertNotEqual", "shutil.which", "t.debugging", "pipes.FILEIN_STDOUT", "f.write", "t.steps", "unittest.SkipTest", "t.copy", "t.append", "f.read", "t.debug", "self.assertRaises", "u.steps", "t.open", "string.ascii_lowercase", "pipes.STDIN_STDOUT", "pipes.SOURCE", "self.skipTest", "os.name", "f.close", "unittest.TestCase", "pipes.STDIN_FILEOUT", "t.prepend"]}, "test_pkg.py": {"libraries": ["unittest", "t1", "t7", "t7.sub", "t6", "t7.sub.subsub", "textwrap", "t7.sub.subsub.spam", "t8", "t2.sub.subsub.spam", "t5", "sys", "tempfile", "t2.sub", "t2.sub.subsub", "os", "t3.sub.subsub"], "function_names": ["run_code", "test_4", "test_1", "setUp", "test_3", "test_7", "test_8", "mkhier", "test_5", "test_6", "cleanout", "test_2", "tearDown", "fixdir"], "function_calls": ["list", "set", "dir", "locals", "cleanout", "open", "fixdir", "exec", "globals"], "class_names": ["TestPkg"], "class_method_calls": ["t8.__doc__", "os.mkdir", "sub.subsub", "t3.sub", "sys.flags", "self.assertEqual", "t3.__name__", "sys.modules", "contents.endswith", "self.syspath", "tempfile.mkdtemp", "f.write", "self.root", "os.remove", "os.rmdir", "unittest.skipIf", "self.mkhier", "sub.__name__", "self.modules_to_cleanup", "t2.__name__", "lst.remove", "self.pkgname", "t2.sub", "subsub.__name__", "unittest.main", "textwrap.dedent", "sys.path", "os.path", "name.split", "t5.foo", "self.run_code", "os.listdir", "os.extsep", "self.assertTrue", "unittest.TestCase", "self.assertFalse", "t5.string"]}, "test_pkgimport.py": {"libraries": ["unittest", "string", "importlib.util.cache_from_source", "random", "shutil", "sys", "tempfile", "test.support.create_empty_file", "os"], "function_names": ["test_package_import__semantics", "setUp", "rewrite_file", "__init__", "tearDown", "remove_modules"], "function_calls": ["__import__", "cache_from_source", "getattr", "dir", "create_empty_file", "open", "hasattr", "RuntimeError"], "class_names": ["TestImport"], "class_method_calls": ["os.mkdir", "random.choose", "self.remove_modules", "self.assertEqual", "self.package_name", "self.assertNotEqual", "self.package_dir", "sys.modules", "tempfile.mkdtemp", "f.write", "self.module_path", "self.assertNotIn", "os.remove", "shutil.rmtree", "string.ascii_letters", "unittest.main", "sys.path", "os.path", "self.module_name", "self.test_dir", "unittest.TestCase", "self.assertFalse", "self.rewrite_file"]}, "test_pkgutil.py": {"libraries": ["importlib.util.spec_from_file_location", "foo.bar", "test.support.run_unittest", "pkg.subpkg.c.c", "unittest", "zipfile", "pkgutil", "zipimport", "os", "pkg.subpkg", "pathlib.Path", "test.support.unload", "shutil", "tempfile", "test.support.check_warnings", "test.support.CleanImport", "os.path", "importlib", "foo.baz", "sys", "foo", "pkg.subpkg.d.d", "pkg"], "function_names": ["setUp", "create_submodule", "test_find_loader_avoids_emulation", "exec_module", "test_getdata_filesys", "test_main", "test_find_loader_missing_module", "test_importer_deprecated", "test_get_loader_None_in_sys_modules", "test_nested", "test_get_loader_handles_missing_loader_attribute", "test_walk_packages_raises_on_string_or_bytes_input", "test_get_loader_avoids_emulation", "test_walkpackages_filesys", "test_get_loader_handles_missing_spec_attribute", "test_get_importer_avoids_emulation", "find_spec", "test_walkpackages_zipfile", "test_loader_deprecated", "test_iter_importers", "get_data", "test_unreadable_dir_on_syspath", "test_getdata_zipfile", "test_issue44061", "create_init", "tearDown", "test_iter_importers_avoids_emulation", "test_simple", "test_issue44061_iter_modules", "test_mixed_namespace", "test_get_loader_handles_spec_attribute_none", "test_alreadyloaded", "create_module", "check_deprecated", "test_getdata_pep302"], "function_calls": ["get_importer", "list", "test_main", "len", "sorted", "check_warnings", "Path", "type", "CleanImport", "spec_from_file_location", "open", "run_unittest", "iter_importers", "print"], "class_names": ["PkgutilTests", "ExtendPathTests", "NestedNamespacePackageTest", "MyTestImporter", "ImportlibMigrationTests", "PkgutilPEP302Tests", "MyTestLoader"], "class_method_calls": ["self.assertIsInstance", "os.mkdir", "self.check_deprecated", "PkgutilPEP302Tests.MyTestLoader", "importlib.machinery", "pkg.endswith", "foo.bar", "self.assertIsNotNone", "os.makedirs", "self.dirname", "self.basedir", "zipimport._zip_directory_cache", "pkgutil.get_importer", "self.assertEqual", "fl.write", "spec.loader", "sys.modules", "self.assertRaisesRegex", "names.append", "loader.loader", "tempfile.mkdtemp", "f.write", "importlib.import_module", "z.close", "self.fail", "name.rsplit", "self.addCleanup", "pkgutil.walk_packages", "pkgutil.iter_modules", "zipfile.ZipFile", "foo.__path__", "os.rmdir", "pkg.subpkg", "self.assertRaises", "self.old_path", "unittest.skipIf", "sys.meta_path", "pkgutil.ImpLoader", "z.writestr", "importlib.invalidate_caches", "mod.__spec__", "shutil.rmtree", "pkgutil.ModuleInfo", "self.MyTestImporter", "base.replace", "self.assertIsNone", "pkgutil.get_loader", "mod.__dict__", "os.unlink", "w.warnings", "self.create_module", "self.create_submodule", "moduleinfo.name", "sys.path", "os.path", "pkgutil.ImpImporter", "pkgutil.find_loader", "self.create_init", "foo.baz", "pkgutil.iter_importers", "foo.loads", "pkg.__path__", "pkgutil._get_spec", "f.close", "unittest.TestCase", "pkgutil.get_data", "loader.__class__"]}, "test_platform.py": {"libraries": ["unittest", "platform", "_winapi", "sys", "unittest.mock", "subprocess", "test.support", "os", "platform._comparable_version"], "function_names": ["test_java_ver", "test_uname_win32_ARCHITEW6432", "test_mac_ver", "setUp", "test_system", "test_libc_ver", "test_version", "test_machine", "test_processor", "clear_caches", "test__comparable_version", "test_win32_ver", "test_sys_version", "test_mac_ver_with_fork", "test_node", "test_uname", "tearDown", "test_macos", "test_release", "test_architecture_via_symlink", "test_architecture", "test_system_alias", "test_platform"], "function_calls": ["len", "any", "all", "open", "V", "hasattr"], "class_names": ["PlatformTest"], "class_method_calls": ["py.call_real", "self.assertLess", "sys.platform", "fp.flush", "line.strip", "os.waitpid", "sys.executable", "unittest.skipUnless", "self.assertEqual", "sys.byteorder", "sys._git", "platform.architecture", "platform.platform", "res.machine", "platform._uname_cache", "platform.mac_ver", "self.save_version", "fp.write", "support.PythonSymlink", "f.write", "support.TESTFN", "self.assertIn", "platform.python_compiler", "self.fail", "platform.java_ver", "self.addCleanup", "platform.version", "platform.system", "res.processor", "support.skip_unless_symlink", "res.release", "platform._platform_cache", "output.splitlines", "platform._sys_version", "platform.python_revision", "res.system", "res.version", "platform.machine", "platform.uname", "os.fork", "self.clear_caches", "platform.python_implementation", "platform.python_version", "real_ver.split", "self.save_platform", "support.unlink", "platform.system_alias", "py.call_link", "_winapi.GetModuleFileName", "platform.libc_ver", "platform.python_build", "platform._sys_version_cache", "mock.patch", "unittest.main", "subprocess.check_output", "expect_list.extend", "os.path", "sys.version", "platform.release", "sys_versions.items", "support.cpython_only", "self.assertTrue", "os._exit", "support.EnvironmentVarGuard", "self.save_git", "line.startswith", "unittest.TestCase", "platform.node", "platform.win32_ver", "res.node", "platform.python_branch", "platform.processor"]}, "test_plistlib.py": {"libraries": ["unittest", "copy", "operator", "datetime", "binascii", "codecs", "struct", "collections", "pickle", "plistlib.UID", "io.BytesIO", "test.support", "os", "plistlib"], "function_names": ["test_invalidinteger", "test_indentation_dict", "test_skipkeys", "test_keysort_bytesio", "test_dict_members", "test_keys_no_string", "test_load_invalid_file", "decode", "test_invalid_type", "test_uid_repr", "test_deep_nesting", "test_large_timestamp", "test_indentation_dict_mix", "test_uid_hash", "test_uid_data", "test_nondictroot", "test_invalidreal", "test_integer_notations", "test_dump_invalid_format", "test_nonstandard_refs_size", "test_io_deprecated", "test__all__", "test_appleformatting", "_create", "test_uid_eq", "test_bytearray", "test_uid_copy", "test_modified_uid_negative", "test_dump_duplicates", "test_io", "test_create", "test_invaliddict", "test_cycles", "test_xml_encodings", "test_dataobject_deprecated", "test_appleformattingfromliteral", "test_load_singletons", "test_uid_pickle", "test_non_bmp_characters", "test_bytes", "test_invalid_uid", "test_list_members", "test_indentation_array", "test_bytesio", "test_uid_index", "tearDown", "test_lone_surrogates", "test_int", "test_identity", "test_invalid_binary", "test_keysort", "test_invalidarray", "test_bytes_deprecated", "test_uid", "test_load_int", "test_modified_uid_huge", "test_unsupported", "test_keyed_archive_data", "test_tuple_members", "test_controlcharacters", "test_xml_plist_with_entity_decl"], "function_calls": ["BytesIO", "bytearray", "object", "len", "list", "isinstance", "chr", "hash", "dict", "open", "bytes", "range", "UID", "repr"], "class_names": ["TestKeyedArchive", "TestBinaryPlistlib", "TestPlistlib", "TestPlistlibDeprecated", "MiscTestCase"], "class_method_calls": ["plistlib.FMT_XML", "self.assertIsInstance", "copy.copy", "support.check__all__", "codecs.BOM_UTF16_BE", "self.assertLess", "plistlib.writePlistToBytes", "datetime.datetime", "self.assertEqual", "self.assertNotEqual", "plistlib.InvalidFileException", "plistlib.Data", "self.assertRaisesRegex", "self.assertIs", "plistlib.readPlistFromBytes", "unsupported.extend", "support.TESTFN", "datetime.timedelta", "codecs.BOM_UTF16_LE", "plistlib.dump", "self.addCleanup", "data.decode", "uid.data", "operator.index", "data.append", "a.append", "self.decode", "self.subTest", "self.assertRaises", "binascii.a2b_base64", "self.assertWarns", "b.getvalue", "huge_uid.data", "support.unlink", "self._create", "struct.pack", "plistlib.dumps", "copy.deepcopy", "plistlib.writePlist", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "plistlib.load", "base.replace", "self.assertIsNot", "neg_uid.data", "unittest.main", "collections.OrderedDict", "os.unlink", "codecs.BOM_UTF8", "offsets.append", "plistlib.loads", "fp.getvalue", "data.extend", "plistlib.readPlist", "offset.to_bytes", "pickle.dumps", "plistlib.FMT_BINARY", "pl2.keys", "self.maxDiff", "unittest.TestCase"]}, "test_poll.py": {"libraries": ["unittest", "test.support.TESTFN", "_testcapi.USHRT_MAX", "select", "threading", "time", "_testcapi.UINT_MAX", "random", "test.support.reap_threads", "_testcapi.INT_MAX", "subprocess", "test.support.cpython_only", "os", "test.support.run_unittest"], "function_names": ["test_main", "test_threaded_poll", "test_poll3", "test_poll_unit_tests", "test_poll1", "test_poll2", "test_poll_blocks_with_negative_ms", "fileno", "test_poll_c_limits", "find_ready_matching"], "function_calls": ["len", "test_main", "Nope", "Almost", "range", "open", "run_unittest", "find_ready_matching", "RuntimeError"], "class_names": ["PollTests", "Almost", "Nope"], "class_method_calls": ["p.register", "os.dup", "poll_thread.start", "proc.__exit__", "os.pipe", "os.read", "unittest.skipUnless", "os.write", "self.assertEqual", "bufs.append", "select.poll", "poll_thread.join", "select.POLLHUP", "t.start", "unittest.SkipTest", "t.join", "writers.remove", "readers.append", "self.fail", "pollster.register", "self.addCleanup", "pollster.modify", "subprocess.Popen", "p.readline", "pollster.unregister", "p.unregister", "match.append", "self.assertRaises", "p.modify", "os.close", "unittest.TestCase", "subprocess.PIPE", "pollster.poll", "rfds.append", "os.unlink", "self.assertFalse", "p.poll", "select.POLLOUT", "time.sleep", "proc.stdout", "select.POLLNVAL", "random.choice", "self.assertTrue", "writers.append", "f.fileno", "poll_thread.is_alive", "proc.__enter__", "select.POLLIN", "threading.Thread"]}, "test_popen.py": {"libraries": ["unittest", "test.support", "os", "sys"], "function_names": ["test_return_code", "_do_test_commandline", "test_keywords", "test_contextmanager", "test_iterating", "test_popen"], "function_calls": ["list", "eval"], "class_names": ["PopenTest"], "class_method_calls": ["os.popen", "self._do_test_commandline", "sys.executable", "self.assertEqual", "os.name", "p.read", "support.reap_children", "unittest.TestCase", "f.read", "unittest.main", "self.assertRaises"]}, "test_poplib.py": {"libraries": ["threading", "asyncore", "test.support", "test.test_ftplib.SSLConnection", "asynchat", "ssl", "unittest.skipUnless", "unittest.TestCase", "socket", "os", "errno", "poplib"], "function_names": ["test_top", "stop", "collect_incoming_data", "writable", "cmd_noop", "cmd_capa", "test_stls_capa", "setUp", "push", "cmd_utf8", "cmd_stls", "test_list", "cmd_list", "test_rpop", "test__all__", "test_stls", "cmd_pass", "cmd_rpop", "test_main", "test_too_long_lines", "testTimeoutValue", "cmd_apop", "testTimeoutNone", "__init__", "cmd_retr", "cmd_echo", "cmd_stat", "test_context", "cmd_dele", "handle_read", "test_apop_normal", "test_getwelcome", "test_pass_", "handle_error", "test_stls_context", "test_uidl", "server", "run", "test_capa", "test_noop", "start", "test_dele", "cmd_quit", "_do_tls_handshake", "tearDown", "handle_accepted", "cmd_user", "test_user", "test_utf8", "assertOK", "testTimeoutDefault", "handle_connect", "test_retr", "test_apop_REDOS", "test_stat", "test_quit", "test_exceptions", "found_terminator", "_get_capas", "test_utf8_raises_if_unsupported"], "function_calls": ["test_main", "len", "method", "DummyPOP3Server", "getattr", "str", "dict", "skipUnless", "hasattr"], "class_names": ["DummyPOP3Handler", "TestPOP3_TLSClass", "TestTimeouts", "DummyPOP3_SSLHandler", "TestPOP3_SSLClass", "TestPOP3Class", "DummyPOP3Server"], "class_method_calls": ["threading.Lock", "asyncore.loop", "self.assertEqual", "socket.SOCK_STREAM", "poplib._MAXLINE", "test_support.HOST", "data.encode", "self.close", "self.assertIs", "self.host", "self.assertRaises", "ssl.SSL_ERROR_WANT_READ", "_ln.extend", "self.secure_connection", "test_support.requires_hashdigest", "self.tls_active", "ssl.PROTOCOL_TLS_CLIENT", "poplib.POP3", "self.join", "self.assertTrue", "self.server", "err.args", "ssl.CERT_NONE", "self.assertIsInstance", "self.in_buffer", "self.client", "ssl.SSLContext", "self.active_lock", "ctx.verify_mode", "ssl.CERT_REQUIRED", "ssl.CertificateError", "self.handler", "asyncore.close_all", "ssl.SSL_ERROR_WANT_WRITE", "poplib.__all__", "asynchat.async_chat", "self.set_socket", "self.assertOK", "ssl.SSL_ERROR_EOF", "self.set_terminator", "poplib.error_proto", "socket.getdefaulttimeout", "os.curdir", "self.bind", "serv.listen", "self.listen", "self.assertIsNone", "self.active", "self.sock", "os.path", "pop.sock", "self.port", "self.assertFalse", "self.evt", "serv.close", "test_support.run_unittest", "self._do_tls_handshake", "self.CAPAS", "test_support.threading_setup", "pop.close", "ctx.check_hostname", "test_support.bind_port", "errno.ECONNABORTED", "self.socket", "test_support.swap_attr", "ssl.SSLSocket", "evt.set", "asyncore.socket_map", "ssl.SSLEOFError", "self.close_when_done", "ctx.load_verify_locations", "poplib.POP3_SSL", "capa.keys", "self.del_channel", "socket.AF_INET", "self.thread", "self._get_capas", "self.handler_instance", "threading.Event", "self.assertIn", "resp.startswith", "conn.send", "socket.timeout", "self.enable_UTF8", "self.__flag", "self.tls_starting", "context.wrap_socket", "ssl.SSLError", "conn.close", "self.daemon", "context.load_cert_chain", "line.split", "asyncore.dispatcher", "line.find", "serv.accept", "socket.setdefaulttimeout", "self.push", "self.handle_close", "self.create_socket", "threading.Thread", "test_support.threading_cleanup", "socket.socket"]}, "test_positional_only_arg.py": {"libraries": ["unittest", "pickle", "test.support.check_syntax_error", "dis"], "function_names": ["test_pos_only_call_via_unpacking", "test_positional_only_and_optional_arg_invalid_calls", "test_syntax_for_many_positional_only", "test_positional_only_and_kwonlyargs_invalid_calls", "test_pos_only_definition", "test_mangling", "test_positional_only_invalid_calls", "test_positional_only_and_arg_invalid_calls", "test_optional_positional_only_args", "test_closures", "test_same_keyword_as_positional_with_kwargs", "test_too_many_arguments", "test_change_default_pos_only", "test_invalid_syntax_lambda", "test_annotations", "test_annotations_constant_fold", "test_no_standard_args_usage", "test_async", "method", "global_inner_has_pos_only", "test_posonly_methods", "test_invalid_syntax_errors_async", "global_pos_only_f", "test_invalid_syntax_errors", "test_positional_only_with_optional_invalid_calls", "f", "test_serialization", "global_pos_only_defaults", "assertRaisesSyntaxError", "g", "test_module_function", "f3", "global_pos_only_and_normal", "f2", "_check_call", "test_lambdas", "test_generator", "test_use_positional_as_keyword", "test_super"], "function_calls": ["x", "object", "compile", "unpickled_defaults", "super", "unpickled_optional", "global_inner_has_pos_only", "C", "unpickled_posonly", "_check_call", "check_syntax_error", "Example", "global_pos_only_f", "next", "f", "range", "X"], "class_names": ["C", "Example", "A", "PositionalOnlyTestCase", "X"], "class_method_calls": ["unittest.main", "f.__code__", "self.assertIn", "coro.send", "e.value", "i.argval", "dis.get_instructions", "pickle.dumps", "self.assertEqual", "self.assertNotIn", "pickle.loads", "i.opname", "unittest.TestCase", "Example.f", "f.__defaults__", "self.assertRaisesRegex", "self.assertRaises"]}, "test_posix.py": {"libraries": ["pwd", "unittest", "_testcapi", "platform", "sysconfig", "time", "textwrap", "signal", "sys", "tempfile", "warnings", "test.support.script_helper.assert_python_ok", "test.support", "os", "stat", "errno"], "function_names": ["test_setpgroup_wrong_type", "test_link_dir_fd", "test_setsigdef", "test_utime", "test_setsid", "test_waitid", "test_path_with_null_byte", "test_strerror", "test_mknod", "test_returns_pid", "test_environ", "test_readlink_dir_fd", "test_readv_overflow_32bits", "test_mkfifo", "test_preadv_flags", "test_sched_setaffinity", "test_setscheduler_only_param", "test_rename_dir_fd", "test_statvfs", "test_dup2", "test_pwritev_overflow_32bits", "test_setresuid_exception", "testNoArgFunctions", "test_posix_fallocate_errno", "test_getcwd_long_pathnames", "test_multiple_file_actions", "test_pipe2", "test_pwritev", "tearDown", "test_confstr", "test_no_such_executable", "test_pipe", "test_chown_dir_fd", "test_resetids", "test_posix_fallocate", "test_stat", "test_pread", "test_getgrouplist", "test_resetids_explicit_default", "test_posix_fadvise", "test_osshlock", "test_oscloexec", "test_symlink_dir_fd", "test_pipe2_c_limits", "_supports_sched", "test_initgroups", "test_writev_overflow_32bits", "test_fstat", "test_close_file", "test_utime_nofollow_symlinks", "test_chdir", "test_path_error2", "test_path_with_null_character", "test_mkdir_dir_fd", "test_pwrite", "_test_all_chown_common", "test_utime_dir_fd", "test_listdir_bytes", "chflags_nofollow", "test_ftruncate", "test_access", "test_mknod_dir_fd", "test_setgroups", "test_listdir_default", "test_stat_dir_fd", "test_posix_spawnp", "test_setsigmask_wrong_type", "setUp", "test_sched_priority", "test_sched_yield", "test_setpgroup", "test_listdir", "test_setsigdef_wrong_type", "test_listdir_bytes_like", "test_get_and_set_scheduler_and_param", "test_unlink_dir_fd", "test_main", "python_args", "test_putenv", "test_chown", "check_stat", "test_preadv_overflow_32bits", "test_truncate", "test_fstatvfs", "_test_chflags_regular_file", "test_specify_environment", "test_setresgid", "test_access_dir_fd", "test_open_dir_fd", "test_lockf", "test_chflags", "test_sched_getaffinity", "test_getresuid", "_create_and_do_getcwd", "test_mkfifo_dir_fd", "test_register_at_fork", "test_empty_file_actions", "test_osexlock", "test_pwritev_flags", "test_rtld_constants", "test_lchflags_symlink", "test_getresgid", "test_fchown", "test_open_file", "test_resetids_wrong_type", "test_fs_holes", "test_bad_file_actions", "test_none_file_actions", "test_setresgid_exception", "test_setscheduler_with_policy", "test_umask", "test_sched_rr_get_interval", "test_utime_with_fd", "test_getgroups", "test_makedev", "test_chmod_dir_fd", "test_readv", "test_preadv", "test_setresuid", "test_lchflags_regular_file", "test_dup", "test_setsigmask", "test_lchown", "test_listdir_fd", "test_fexecve", "test_writev", "test_posix_fadvise_errno"], "function_calls": ["object", "fn", "sorted", "assert_python_ok", "getattr", "cls", "_supports_sched", "test_main", "function", "check_stat", "str", "tuple", "open", "posix_func", "range", "list", "stat_func", "set", "int", "type", "float", "hasattr", "bytearray", "len", "_create_and_do_getcwd", "max", "chown_func", "chflags_func", "bytes", "t", "map"], "class_names": ["PosixTester", "TestPosixSpawnP", "_PosixSpawnMixin", "PosixGroupsTester", "TestPosixSpawn"], "class_method_calls": ["os.mkdir", "posix.posix_fadvise", "os.pipe", "os.getuid", "posix.utime", "posix.sched_param", "fp.flush", "sys.executable", "unittest.skipUnless", "posix.chflags", "self.assertEqual", "os.O_RDONLY", "os.mkfifo", "warnings.filterwarnings", "self.assertNotEqual", "os.write", "os.getpid", "e.errno", "self.assertGreaterEqual", "posix.chmod", "support.create_empty_file", "posix.getgrouplist", "stat.st_uid", "res.si_pid", "stat.S_IRWXU", "self.assertIs", "posix.RTLD_LAZY", "os.WIFSIGNALED", "support.TESTFN", "os.putenv", "tempfile.gettempdir", "stat.UF_IMMUTABLE", "posix.sched_setparam", "posix.pipe", "mask.pop", "support.skip_unless_symlink", "posix.fstatvfs", "posix.pwrite", "self.assertRaises", "os.getppid", "os.O_EXLOCK", "groups.split", "posix.writev", "os.close", "os.open", "os.getsid", "support.check_warnings", "posix.P_PID", "new_testfn_st.st_flags", "os.get_blocking", "os.register_at_fork", "os.O_WRONLY", "posix.confstr", "os.O_RDWR", "os.O_SHLOCK", "posix.readlink", "os.readlink", "self.assertTrue", "stat.S_IRUSR", "posix.sched_get_priority_min", "os.sched_get_priority_min", "os.get_inheritable", "posix.RTLD_GLOBAL", "self.python_args", "sysconfig.get_config_var", "posix.access", "self.assertIsInstance", "posix.stat", "support.requires_linux_version", "fp2.close", "posix.posix_fallocate", "posix.fstat", "support.import_module", "os.symlink", "os.POSIX_SPAWN_DUP2", "posix.environ", "os.WTERMSIG", "cm.exception", "os.getcwd", "errno.ENOTSUP", "tempfile.mkdtemp", "os.supports_fd", "unittest.SkipTest", "st.st_flags", "stat.S_IWUSR", "posix.open", "self._test_chflags_regular_file", "errno.EINVAL", "posix.sched_rr_get_interval", "signal.NSIG", "posix.sched_get_priority_max", "posix.lchown", "os.POSIX_SPAWN_OPEN", "dummy_symlink_st.st_flags", "os.R_OK", "os.O_CLOEXEC", "posix.link", "os.fork", "os.rmdir", "posix.symlink", "support.run_unittest", "os.curdir", "fp1.close", "signal.SIGUSR1", "self.assertListEqual", "exc.filename", "self.assertIsNone", "sys.maxsize", "os.path", "posix.sched_getscheduler", "os.O_CREAT", "param.sched_priority", "os.supports_dir_fd", "os.O_TRUNC", "posix.getegid", "unittest.TestCase", "self.assertFalse", "posix.__dict__", "self.assertLess", "sys.platform", "errno.ENOSYS", "os.pathsep", "os.POSIX_SPAWN_CLOSE", "os.getgroups", "posix.O_RDONLY", "os.read", "posix.lchflags", "self.teardown_files", "posix.sched_getparam", "posix.waitid", "self.saved_groups", "fp.close", "os.getgid", "posix.getuid", "posix.getresgid", "os.RWF_SYNC", "self.assertLessEqual", "posix.readv", "fp.write", "os.fsencode", "stat.S_IFIFO", "os.utime", "os.lstat", "posix.unlink", "posix.SCHED_RR", "self.addCleanup", "posix.RTLD_NOW", "posix.umask", "posix.sched_getaffinity", "posix.getresuid", "posix.major", "posix.sched_setaffinity", "os.readv", "posix.getcwd", "support.PIPE_MAX_SIZE", "stat.st_gid", "os.pipe2", "fp2.fileno", "self.assertWarnsRegex", "os.link", "self.assertWarns", "childfile.fileno", "signal.signal", "dt.split", "outfile.write", "posix.preadv", "support.unlink", "idg.read", "new_st.st_flags", "posix.makedev", "posix.truncate", "os.access", "_testcapi.INT_MAX", "posix.rename", "posix.chown", "os.environ", "fp1.fileno", "posix.WEXITED", "time.time", "posix.initgroups", "posix.ftruncate", "os.chown", "os.pwritev", "self.spawn_func", "posix.getgroups", "os.lseek", "os.chmod", "posix.mkfifo", "fp.tell", "posix.listdir", "signal.SIG_IGN", "errno.EOPNOTSUPP", "testfn_st.st_flags", "posix.setresgid", "os.O_NONBLOCK", "posix.statvfs", "err.errno", "errno.EACCES", "os.waitpid", "os.SEEK_SET", "new_dummy_symlink_st.st_flags", "os.rename", "posix.fchown", "errno.EPERM", "os.getpgrp", "posix.F_LOCK", "os.sched_getscheduler", "posix.execve", "self._warnings_manager", "self.assertRaisesRegex", "os.chdir", "os.popen", "idg.close", "_testcapi.UINT_MAX", "os.SEEK_DATA", "self.assertIn", "support.rmtree", "posix.close", "idg_groups.symmetric_difference", "self.fail", "self.NOOP_PROGRAM", "os.SEEK_HOLE", "test_file.fileno", "posix.POSIX_FADV_WILLNEED", "posix.read", "platform.system", "inst.errno", "f.read", "posix.RTLD_LOCAL", "posix.F_ULOCK", "pwd.getpwuid", "posix.sched_yield", "unittest.skipIf", "posix.pread", "posix.mkdir", "os.preadv", "test_file.close", "posix.mknod", "posix.minor", "posix.dup", "os.set_inheritable", "errno.EBADF", "self._test_all_chown_common", "support.reap_children", "st.st_dev", "posix.dup2", "os.unlink", "posix.lockf", "textwrap.dedent", "posix.setresuid", "os.mknod", "posix.setgroups", "name.startswith", "support.cpython_only", "os.supports_follow_symlinks", "stat.S_ISFIFO", "os.name", "os.writev", "os.stat", "posix.strerror", "posix.sched_setscheduler", "os.RWF_HIPRI", "posix.chdir", "self.skipTest", "os.sched_param", "fp.fileno"]}, "test_posixpath.py": {"libraries": ["unittest", "test.test_genericpath", "posixpath.basename", "posixpath", "posixpath.realpath", "unittest.mock", "posix", "posixpath.dirname", "posixpath.abspath", "test.support", "os", "test.support.FakePath"], "function_names": ["test_path_normpath", "check", "test_path_realpath", "setUp", "test_path_islink", "test_path_normcase", "skip_if_ABSTFN_contains_backslash", "test_realpath_curdir", "test_path_commonpath", "test_ismount_symlinks", "test_path_splitext", "splitextTest", "test_normpath", "check_error", "test_path_ismount", "test_isabs", "test_expanduser", "test_relpath", "test_path_split", "fake_lstat", "test_path_basename", "test_splitext", "test_dirname", "test_join", "test_realpath_repeated_indirect_symlinks", "test_expanduser_home_envvar", "assertPathEqual", "test_realpath_symlink_loops", "test_realpath_basic", "test_basename", "test_path_relpath", "test_relpath_bytes", "test_ismount_non_existent", "test_path_expandvars", "test_path_abspath", "test_expanduser_pwd", "test_realpath_relative", "tearDown", "test_realpath_resolve_first", "test_ismount_directory_not_readable", "test_islink", "test_path_isabs", "test_path_splitdrive", "test_realpath_resolve_before_normalizing", "test_commonpath", "test_path_join", "test_realpath_resolve_parents", "test_path_lexists", "test_path_expanduser", "test_ismount", "test_realpath_pardir", "test_path_dirname", "test_ismount_different_device", "test_split", "safe_rmdir", "test_realpath_deep_recursion"], "function_calls": ["check", "func", "check_error", "basename", "dirname", "bytes", "realpath", "FakePath", "open", "safe_rmdir", "abspath", "OSError", "range", "hasattr"], "class_names": ["PosixCommonTest", "PathLikeTests", "PosixPathTest"], "class_method_calls": ["self.assertIsInstance", "os.mkdir", "os.getuid", "unittest.skipUnless", "self.assertEqual", "posixpath.relpath", "self.tearDown", "support.import_module", "posixpath.dirname", "os.symlink", "posixpath.ismount", "os.getcwd", "path.startswith", "self.assertIs", "f.write", "os.fsencode", "support.TESTFN", "os.lstat", "test_genericpath.CommonTest", "posixpath.basename", "self.addCleanup", "self.assertPathEqual", "os.getcwdb", "posixpath.commonpath", "os.remove", "posixpath.join", "os.rmdir", "posixpath.splitext", "self.file_path", "self.assertRaises", "posixpath.isabs", "unittest.skipIf", "posixpath.exists", "pwd.getpwuid", "self.subTest", "self.file_name", "support.unlink", "unittest.skip", "posix.stat_result", "self.path", "os.unlink", "unittest.main", "support.can_symlink", "file.write", "mock.patch", "os.path", "home.rstrip", "posixpath.islink", "posixpath.abspath", "posixpath.lexists", "self.splitextTest", "posixpath.expanduser", "support.EnvironmentVarGuard", "posixpath.split", "unittest.TestCase", "posixpath.normpath", "support.change_cwd"]}, "test_pow.py": {"libraries": ["unittest", "math"], "function_names": ["test_bug705231", "test_powfloat", "test_bug643260", "test_negative_exponent", "test_powint", "test_other", "powtest", "__rpow__"], "function_calls": ["eq", "list", "TestRpow", "asseq", "pow", "othertype", "type", "int", "float", "range"], "class_names": ["PowTest", "TestRpow"], "class_method_calls": ["self.powtest", "math.gcd", "self.assertAlmostEqual", "self.assertEqual", "unittest.TestCase", "unittest.main", "self.subTest", "self.assertRaises"]}, "test_pprint.py": {"libraries": ["pprint", "unittest", "io", "types", "random", "collections", "test.support", "test.test_set", "itertools"], "function_names": ["format", "__le__", "test_set_reprs", "test_subclassing", "setUp", "test_counter", "test_init", "test_depth", "__repr__", "__eq__", "test_bytearray_wrap", "__ge__", "test_basic_line_wrap", "test_str_wrap", "test_user_dict", "test_set_of_sets_reprs", "__ne__", "test_ordered_dict", "test_user_list", "__lt__", "__init__", "test_sorted_dict", "test_same_as_repr", "test_nested_indentations", "__gt__", "test_sort_orderable_and_unorderable_values", "test_default_dict", "test_bytes_wrap", "test_user_string", "test_knotted", "test_unreadable", "test_deque", "test_basic", "test_compact", "__hash__", "test_mapping_proxy", "test_chainmap", "test_width", "test_sort_unorderable_values", "test_compact_width", "test_sort_dict"], "function_calls": ["frozenset", "sorted", "dict3", "id", "repr", "Unorderable", "isinstance", "tuple3", "clean", "tuple2", "str", "tuple", "hash", "dict", "dict2", "set3", "range", "Orderable", "list", "set", "type", "list3", "zip", "DottedPrettyPrinter", "eval", "bytearray", "set2", "max", "list2", "frozenset3", "bytes", "frozenset2", "map"], "class_names": ["tuple3", "Unorderable", "set2", "tuple2", "dict3", "list2", "QueryTestCase", "frozenset3", "list3", "frozenset2", "dict2", "set3", "DottedPrettyPrinter", "Orderable"], "class_method_calls": ["self.assertLess", "collections.UserString", "pprint.pformat", "s.replace", "self.assertEqual", "frozenset.__repr__", "dict.fromkeys", "test.support", "self.assertLessEqual", "test.test_set", "pprint.isrecursive", "types.MappingProxyType", "collections.deque", "io.StringIO", "itertools.count", "collections.defaultdict", "self.b", "pp.isreadable", "self._hash", "self.assertRaises", "pp.isrecursive", "set.__repr__", "dict.__repr__", "unittest.expectedFailure", "random.shuffle", "collections.UserDict", "collections.ChainMap", "self.assertGreater", "list.__repr__", "unittest.main", "collections.OrderedDict", "tuple.__repr__", "self.a", "collections.Counter", "pprint.saferepr", "self.d", "collections.UserList", "pprint.PrettyPrinter", "self.assertTrue", "unittest.TestCase", "self.assertFalse", "pprint.isreadable"]}, "test_print.py": {"libraries": ["unittest", "test.support", "sys", "io.StringIO"], "function_names": ["write", "check", "x", "__str__", "test_print_flush", "flush", "test_normal_string", "test_stream_redirection_hint_for_py2_migration", "test_string_with_soft_space", "test_string_with_semicolon", "__init__", "test_string_in_loop_on_same_line", "test_print", "test_string_with_excessive_whitespace", "__rrshift__", "test_string_with_leading_whitespace"], "function_calls": ["x", "object", "fn", "str", "StringIO", "filelike", "ClassWith__str__", "OverrideRRShift", "noflush", "exec", "print"], "class_names": ["TestPy2MigrationHint", "filelike", "ClassWith__str__", "OverrideRRShift", "noflush", "TestPrint"], "class_method_calls": ["self.flushed", "context.exception", "t.getvalue", "self.check", "f.written", "self.assertIn", "sys.stderr", "o.getvalue", "self.x", "self.assertEqual", "self.assertNotIn", "f.flushed", "support.captured_stdout", "self.written", "unittest.TestCase", "unittest.main", "self.assertRaises"]}, "test_profile.py": {"libraries": ["unittest", "test.profilee.timer", "test.support.TESTFN", "test.support.temp_dir", "test.profilee.testfunc", "pstats", "test.support.unlink", "test.support.script_helper.assert_python_failure", "test.support.change_cwd", "sys", "difflib.unified_diff", "io.StringIO", "test.support.script_helper.assert_python_ok", "contextlib.contextmanager", "profile", "os", "test.support.run_unittest"], "function_names": ["test_runctx", "test_main", "regenerate_expected_output", "get_expected_output", "test_run_profile_as_module", "do_profiling", "test_calling_conventions", "test_run", "test_output_file_when_changing_directory", "main", "silent", "tearDown", "test_cprofile"], "function_calls": ["assert_python_ok", "getattr", "change_cwd", "test_main", "unified_diff", "timer", "StringIO", "locals", "open", "run_unittest", "assert_python_failure", "regenerate_expected_output", "unlink", "enumerate", "temp_dir", "main", "print", "silent", "globals"], "class_names": ["ProfileTest"], "class_method_calls": ["os.mkdir", "prof.runctx", "results.append", "stats.print_stats", "fail.append", "self.assertEqual", "self.profilerclass", "f.writelines", "cls.profilerclass", "b.split", "profile.Profile", "sys.stdout", "f.write", "self.assertIn", "self.expected_max_output", "self.fail", "stats.strip_dirs", "newfile.append", "fail.extend", "self.do_profiling", "s.getvalue", "cls.do_profiling", "self.get_expected_output", "filename.rstrip", "pstats.Stats", "testfunc.__module__", "line.rstrip", "a.split", "os.path", "self.profilermodule", "sys.argv", "self.assertTrue", "line.startswith", "unittest.TestCase", "self.methodnames", "cls.methodnames"]}, "test_property.py": {"libraries": ["sys", "test.support", "unittest"], "function_names": ["test_property_decorator_baseclass", "test_property_setter_copies_getter_docstring", "test_property_decorator_subclass", "test_property___isabstractmethod__descriptor", "test_property_getter_doc_override", "test_property_decorator_subclass_doc", "__init__", "test_property_decorator_doc", "test_docstring_copy", "test_slots_docstring_copy_exception", "__bool__", "test_property_new_getter_new_docstring", "test_property_decorator_baseclass_doc", "spam", "test_property_builtin_doc_writable", "foo", "test_refleaks_in___init__", "test_property_decorator_doc_writable", "_get_spam"], "function_calls": ["gettotalrefcount", "PropertyDocBase", "PropertyDel", "FooSub", "Foo", "BaseClass", "PropertyNewGetter", "NotBool", "Exception", "range", "PropertyDocSub", "ValueError", "property", "SubClass", "PropertyWritableDoc", "bool", "delattr", "hasattr", "PropertySet", "PropertySubNewGetter", "PropertyGet"], "class_names": ["PropertyTests", "PropertyBase", "PropertyDocBase", "PropertyDel", "FooSub", "Foo", "PropertySubclassTests", "BaseClass", "Foo2", "PropertyNewGetter", "NotBool", "PropertyDocSub", "PropertySubSlots", "C", "SubClass", "PropertySub", "PropertyWritableDoc", "FooBase", "PropertySet", "PropertySubNewGetter", "PropertyGet"], "class_method_calls": ["Foo.spam", "PropertyDocBase.spam", "newgettersub.spam", "sys.flags", "base._spam", "self.assertAlmostEqual", "spam.setter", "base.spam", "spam.getter", "self.assertEqual", "base.__class__", "FooBase.spam", "C.foo", "self.assertIs", "foo.spam", "support.get_attribute", "self._spam", "self.assertRaises", "unittest.skipIf", "p.__doc__", "spam.deleter", "newgettersub.__class__", "foo.__isabstractmethod__", "BaseClass.spam", "foosub.spam", "unittest.main", "newgetter.spam", "newgetter.__class__", "self.assertTrue", "sub.__class__", "support.refcount_test", "unittest.TestCase", "fake_prop.__init__", "FooSub.spam"]}, "test_pstats.py": {"libraries": ["unittest", "pstats", "io.StringIO", "test.support", "pstats.SortKey"], "function_names": ["test_combine_results", "setUp", "test_SortKey_enum", "test_sort_stats_string", "test_sort_starts_mix", "test_add", "test_sort_stats_partial", "test_sort_stats_enum", "test_sort_stats_int"], "function_calls": ["StringIO"], "class_names": ["AddCallersTestCase", "StatsTestCase"], "class_method_calls": ["support.findfile", "self.stats", "SortKey.FILENAME", "pstats.add_callers", "pstats.Stats", "valid_args.items", "SortKey.CALLS", "self.assertEqual", "member.value", "self.assertNotEqual", "unittest.TestCase", "stats.add", "unittest.main", "SortKey.TIME", "self.assertRaises"]}, "test_pty.py": {"libraries": ["pty", "unittest", "io", "select", "socket", "signal", "test.support.reap_children", "test.support.import_module", "sys", "test.support.verbose", "os", "errno"], "function_names": ["tearDownModule", "test__copy_to_each", "debug", "test_basic", "setUp", "test__copy_eof_on_all", "_pipe", "_readline", "normalize_output", "_socketpair", "_mock_select", "tearDown", "test_fork", "handle_sig", "handle_sighup"], "function_calls": ["reap_children", "len", "debug", "str", "_readline", "import_module", "normalize_output", "print"], "class_names": ["SmallPtyTests", "PtyTest"], "class_method_calls": ["self._socketpair", "os.pipe", "os.read", "os.waitpid", "socket.socketpair", "os.write", "self.assertEqual", "self._mock_select", "self.select_rfds_lengths", "e.errno", "reader.readline", "signal.SIGHUP", "os.set_blocking", "data.replace", "self.orig_pty_select", "sys.stdout", "self.files", "os.isatty", "self.fds", "unittest.SkipTest", "data.endswith", "self.fail", "self.addCleanup", "pty.CHILD", "pty.slave_open", "io.FileIO", "os.setsid", "self.handle_sig", "self.handle_sighup", "self.assertRaises", "errno.EAGAIN", "signal.alarm", "select.select", "signal.SIGALRM", "signal.signal", "pty.master_open", "os.close", "self.select_rfds_results", "file.close", "unittest.main", "pty.select", "os.get_blocking", "self._pipe", "pty.fork", "pty._copy", "pty.STDIN_FILENO", "pty.STDOUT_FILENO", "s.fileno", "self.assertTrue", "os._exit", "unittest.TestCase", "self.orig_stdin_fileno", "self.orig_stdout_fileno"]}, "test_pulldom.py": {"libraries": ["unittest", "io", "test.support.findfile", "xml.sax.xmlreader.AttributesImpl", "xml.dom.pulldom", "xml.sax", "xml.sax.handler.feature_external_ges"], "function_names": ["_test_thorough", "test_parse_semantics", "test_end_document", "test_parse", "test_sax2dom_fail", "test_basic", "test_comment", "setContentHandler", "test_getitem_deprecation", "test_thorough_sax2dom", "test_expandItem", "parse", "test_external_ges_default", "test_thorough_parse", "stub", "reset", "confirm", "testSAX2DOM"], "function_calls": ["list", "len", "AttributesImpl", "SAX2DOMTestHelper", "findfile", "SAXExerciser", "next", "open", "SAX2DOMExerciser", "hasattr"], "class_names": ["SAX2DOMTestHelper", "ThoroughTestCase", "SAX2DOMTestCase", "SAXExerciser", "SAX2DOMExerciser", "PullDOMTestCase"], "class_method_calls": ["elm1.nextSibling", "pulldom.START_DOCUMENT", "node.childNodes", "items.expandNode", "node.target", "sax2dom.endElement", "self.assertEqual", "pulldom.COMMENT", "root.parentNode", "pulldom.CHARACTERS", "h.endElement", "h.endDocument", "pulldom.DOMEventStream", "h.startElement", "root.childNodes", "text1.previousSibling", "node.data", "self.assertIs", "text2.previousSibling", "elm1.previousSibling", "self.parser", "items.parser", "self.fail", "elm1.childNodes", "self.addCleanup", "node.tagName", "sax2dom.characters", "pulldom.parse", "text3.previousSibling", "text3.nextSibling", "text3.parentNode", "sax2dom.document", "io.StringIO", "pulldom.END_DOCUMENT", "items.stream", "node.attributes", "doc.documentElement", "sax2dom.startElement", "text2.nextSibling", "self.assertRaises", "self.assertWarnsRegex", "h.characters", "sax2dom.endDocument", "items.clear", "h.processingInstruction", "elm1.parentNode", "pulldom.START_ELEMENT", "unittest.expectedFailure", "pulldom.SAX2DOM", "self.assertGreater", "self.assertIsNone", "pulldom.END_ELEMENT", "xml.sax", "unittest.main", "pulldom.parseString", "handler.stream", "text1.parentNode", "item.childNodes", "pulldom.PROCESSING_INSTRUCTION", "h.comment", "item.tagName", "self._handler", "parser.parser", "sax2dom.startDocument", "h.startDocument", "self.pulldom", "self.assertTrue", "doc.unlink", "self._test_thorough", "unittest.TestCase", "text1.nextSibling", "text2.parentNode", "saxparser.getFeature"]}, "test_pwd.py": {"libraries": ["sys", "test.support", "unittest"], "function_names": ["test_values", "test_values_extended", "test_errors"], "function_calls": ["list", "len", "chr", "type", "ord", "range", "hasattr"], "class_names": ["PwdTest"], "class_method_calls": ["e.pw_dir", "self.assertIsInstance", "e.pw_gid", "unittest.skipUnless", "self.assertEqual", "support.import_module", "e.pw_shell", "self.assertIn", "self.assertNotIn", "pwd.getpwuid", "self.assertRaises", "e.pw_name", "e.pw_uid", "bynames.keys", "e.pw_gecos", "pwd.getpwnam", "entriesbyname.setdefault", "unittest.main", "e.pw_passwd", "sys.maxsize", "self.skipTest", "entriesbyuid.setdefault", "unittest.TestCase", "pwd.getpwall"]}, "test_py_compile.py": {"libraries": ["unittest", "stat", "importlib.util", "shutil", "py_compile", "sys", "tempfile", "subprocess", "test.support", "os", "functools", "test.support.script_helper"], "function_names": ["test_cache_path", "setUp", "test_exceptions_propagate", "test_file_not_exists", "pycompilecmd", "test_bad_coding", "test_optimization_path", "test_invalidation_mode", "test_do_not_overwrite_symlinks", "wrapper", "test_with_files", "pycompilecmd_failure", "test_source_date_epoch", "test_do_not_overwrite_nonregular_files", "test_double_dot_no_clobber", "test_stdin", "test_cwd", "test_quiet", "tearDown", "without_source_date_epoch", "test_absolute_path", "test_relative_path", "__new__", "with_source_date_epoch", "test_bad_syntax"], "function_calls": ["super", "getattr", "dir", "without_source_date_epoch", "type", "setattr", "with_source_date_epoch", "open", "fxn", "hasattr"], "class_names": ["PyCompileTestsBase", "PyCompileCLITestCase", "SourceDateEpochTestMeta", "PyCompileTestsWithSourceEpoch", "PyCompileTestsWithoutSourceEpoch"], "class_method_calls": ["stderr.getvalue", "sys.flags", "sys.executable", "self.assertEqual", "functools.wraps", "os.geteuid", "os.symlink", "self.cache_path", "py_compile.PycInvalidationMode", "os.getcwd", "env.unset", "os.chdir", "tempfile.mkdtemp", "self.source_path", "self.assertIn", "support.rmtree", "importlib.util", "self.pyc_path", "result.stdout", "support.captured_stderr", "self.assertRaises", "result.stderr", "unittest.skipIf", "self.pycompilecmd_failure", "importlib._bootstrap_external", "subprocess.run", "shutil.rmtree", "self.directory", "fp.read", "self.assertIsNone", "os.environ", "self.pycompilecmd", "unittest.main", "result.returncode", "py_compile.PyCompileError", "script_helper.assert_python_failure", "mode.st_mode", "script_helper.assert_python_ok", "os.path", "self.cwd_drive", "os.chmod", "stat.S_IREAD", "os.name", "attr.startswith", "self.assertTrue", "os.stat", "support.EnvironmentVarGuard", "self.skipTest", "sys.implementation", "unittest.TestCase", "file.write", "self.assertFalse", "os.devnull", "support.change_cwd", "py_compile.compile"]}, "test_pyclbr.py": {"libraries": ["test.test_importlib.util", "types.MethodType", "types.FunctionType", "sys", "unittest.TestCase", "types.BuiltinFunctionType", "pyclbr", "unittest.main", "textwrap.dedent"], "function_names": ["checkModule", "assertListEq", "assertHasattr", "ismethod", "defined_in", "test_nested", "setUp", "test_decorators", "assertEqualsOrIgnored", "test_dotted_name_not_a_package", "test_others", "test_module_has_no_spec", "test_easy", "assertHaskey", "tearDown", "compare"], "function_calls": ["isinstance", "__import__", "defined_in", "ismethod", "dedent", "getattr", "unittest_main", "dir", "set", "globals", "staticmethod", "type", "classmethod", "cm", "hasattr", "compare", "print"], "class_names": ["ReadmoduleTests", "PyclbrTest"], "class_method_calls": ["o1.file", "self.assertIsInstance", "o1.name", "children2.values", "o1.module", "mb._nest_function", "self.assertEqual", "children2.keys", "self.assertHaskey", "pyclbr._modules", "dict.items", "o2.file", "mb._create_tree", "o1.lineno", "value.super", "module.__dict__", "item.__globals__", "self.assertIs", "o2.name", "py_item.__name__", "self.checkModule", "mb.Class", "objname.endswith", "self.assertIn", "self._modules", "obj.__name__", "self.fail", "value.name", "obj.__self__", "o1.children", "mb.Function", "py_item.__module__", "o2.lineno", "self.assertRaises", "pyclbr.Function", "test_importlib_util.uncache", "oclass.__dict__", "item.__module__", "self.assertHasattr", "children1.keys", "ob.parent", "value.module", "py_item.__bases__", "self.assertEqualsOrIgnored", "value.methods", "o2.methods", "objname.startswith", "module.__name__", "o2.children", "mb._nest_class", "o2.module", "missing.pop", "foundMethods.append", "pyclbr.readmodule_ex", "sys.stderr", "self.assertListEq", "py_item.__dict__", "o1.methods", "actualMethods.append", "self.assertTrue", "oclass.__name__", "children1.values", "base.__name__"]}, "test_pydoc.py": {"libraries": ["enum", "test_error_package", "contextlib", "test.support.reap_children", "test.pydocfodder", "test.support.captured_output", "test.support", "string", "unittest", "urllib.parse", "keyword", "types", "textwrap", "importlib.util", "test.pydoc_mod", "pkgutil", "io.StringIO", "test.support.script_helper.assert_python_ok", "test.support.captured_stdout", "os", "typing", "re", "time", "_pickle", "test.support.unlink", "inspect", "test.support.requires_docstrings", "tempfile", "stat", "test.support.rmtree", "collections.namedtuple", "test.support.captured_stderr", "xml.etree.ElementTree", "test.support.TESTFN", "xml.etree", "test.support.reap_threads", "py_compile", "sys", "pydoc"], "function_names": ["test_unbound_python_method", "test_typing_pydoc", "cm", "test_url_requests", "test_input_strip", "test_namedtuple_public_underscore", "wrapper", "test_sys_path_adjustment_adds_missing_curdir", "test_resolve_false", "call_url_handler", "_restricted_walk_packages", "test_keywords", "_get_starting_path", "test_synopsis_sourceless_empty_doc", "test_module", "test_custom_non_data_descriptor", "test_importfile", "test_content_type_err", "test_apropos_with_bad_package", "test_builtin_on_metaclasses", "test_method_aliases", "get_pydoc_text", "test_is_package_when_is_package", "test_virtualClassAttributeWithTwoMeta", "test_not_here", "test_property", "_get_revised_path", "__set__", "test_getset_descriptor", "test_async_generator_annotation", "get_pydoc_html", "test_allmethods", "test_mixed_case_module_names_are_lower_cased", "test_class", "sm", "test_modules_search", "itemconfigure", "test_apropos_empty_doc", "get_pydoc_link", "test_url_search_package_error", "test_bound_python_method", "test_html_doc", "test_getpager_with_stdin_none", "test_badimport", "tkraise", "my_url_handler", "test_async_annotation", "test_module_level_callable", "test_field_order_for_named_tuples", "test_text_doc", "method_returning_true", "setUp", "test_builtin_no_child", "a_size", "test_splitdoc_with_description", "test_sys_path_adjustment_when_curdir_already_included", "test_main", "test_namedtuple_field_descriptor", "__get__", "test_builtin", "test_classmethod", "area", "test_builtin_with_child", "test_DynamicClassAttribute", "test_non_str_name", "test_bound_builtin_method", "test_slot_descriptor", "test_synopsis_sourceless", "test_not_ascii", "test_custom_data_descriptor", "test_modules_search_builtin", "test_builtin_with_more_than_four_children", "test_synopsis", "__getattr__", "test_text_enum_member_with_value_zero", "test_virtualClassAttributeWithOneMeta", "_get_summary_line", "__dir__", "test_stripid", "test_is_package_when_not_package", "test_dict_attr_descriptor", "test_buggy_dir", "test_builtin_with_grandchild", "test_modules", "restrict_walk_packages", "test_unbound_builtin_method", "test_sys_path_adjustment_removes_argv0_dir", "run_pydoc", "test_help_output_redirect", "ham", "test_sys_path_adjustment_protects_pydoc_dir", "get_html_title", "test_server", "test_staticmethod", "test_apropos_with_unreadable_dir", "test_member_descriptor", "_get_summary_lines", "test_issue8225", "test_structseq_member_descriptor", "test_namedtuple_fields", "foo"], "function_calls": ["get_pydoc_text", "sorted", "assert_python_ok", "stripid", "vars", "captured_stderr", "test_main", "helper", "super", "str", "dirname", "B", "tuple", "_get_revised_path", "StringIO", "A", "dict", "open", "captured_stdout", "captured_output", "range", "get_pydoc_html", "reap_children", "list", "run_pydoc", "C", "Descr", "set", "walk_packages", "namedtuple", "type", "get_html_title", "hasattr", "len", "get_pydoc_link", "abspath", "print"], "class_names": ["PydocDocTest", "PydocWithMetaClasses", "NonIterableFields", "Point", "Class2", "Rect", "Meta1", "nonascii", "Meta3", "B", "NS", "A", "DA", "X", "Meta2", "C", "Descr", "NonHashableFields", "M", "TestHelper", "PydocBaseTest", "Meta", "PydocUrlHandlerTest", "Class", "Class1", "PydocImportTest", "TestClass", "TestDescriptions", "TestInternalUtilities", "BinaryInteger", "PydocServerTest"], "class_method_calls": ["os.mkdir", "err.getvalue", "X.sm", "pydoc.help", "TestClass.__subclasshook__", "types.DynamicClassAttribute", "s.replace", "self.assertEqual", "pydoc.allmethods", "self._restricted_walk_packages", "self.assertGreaterEqual", "help_io.getvalue", "doc.getdocloc", "sys.float_info", "clean_path.count", "pydoc.importfile", "loaded_pydoc.__file__", "tempfile.TemporaryDirectory", "pydoc.plain", "slice.start", "helper.help", "self.assertRaises", "complex.real", "stdout.getvalue", "Rect.area", "pydoc.locate", "tmpdir.name", "os.__cached__", "missing_module.strip", "self.argv0dir", "text.partition", "pydoc.TextDoc", "typing.Iterator", "X.cm", "os.linesep", "serverthread.stop", "self.argv0", "self.curdir_spellings", "output.strip", "os.extsep", "self.assertTrue", "pydoc._start_server", "self._get_starting_path", "pydoc.synopsis", "py_compile.compile", "keyword.kwlist", "doc.docmodule", "Box.width", "pydoc.stripid", "os.getcwd", "urllib.parse", "output.getvalue", "importlib.util", "loaded_pydoc.__name__", "inspect.getabsfile", "serverthread.serving", "self.assertNotIn", "self._get_summary_lines", "Point.x", "self.w", "text.split", "s.index", "out.strip", "os.rmdir", "self.subTest", "self.assertRegex", "unittest.skip", "os.curdir", "typing.Mapping", "contextlib.contextmanager", "typing.Any", "self.assertIsNone", "self.assertIsNot", "pydoc._get_revised_path", "property.fget", "os.path", "xml.etree", "title.partition", "serverthread.docserver", "pydoc.ispackage", "stat.S_IEXEC", "sys.version_info", "unittest.TestCase", "enum.IntEnum", "self.assertFalse", "pydoc._url_handler", "Exception.args", "time.monotonic", "loaded_pydoc.__spec__", "self.assertLess", "stat.S_IMODE", "TestClass.__init_subclass__", "sys.flags", "fobj.write", "self.h", "X.attr", "os.__doc__", "memoryview.obj", "nonascii.__doc__", "typing.TypeVar", "test.support", "pydoc.Helper", "textwrap.TextWrapper", "adoc.replace", "result.splitlines", "NS.__dict__", "pydoc.splitdoc", "self.restrict_walk_packages", "f.write", "self.addCleanup", "pkgutil.walk_packages", "self.call_url_handler", "float.real", "header.partition", "patt.sub", "re.sub", "int.numerator", "doc.docclass", "importlib.invalidate_caches", "sys.stdin", "StopIteration.value", "re.compile", "pydoc.HTMLDoc", "Meta2.__dir__", "os.chmod", "self.assertDictEqual", "pydoc.__spec__", "self.maxDiff", "pydoc.__file__", "range.start", "typing.List", "A.a_size", "tmpdir.cleanup", "self.assertIsNotNone", "pydoc.plaintext", "X.__dict__", "result.startswith", "self.assertRaisesRegex", "self._get_summary_line", "pydoc.describe", "pydoc.render_doc", "self.assertIn", "self.fail", "self.unreadable_dir", "typing.Generic", "os.remove", "serverthread.error", "buf.getvalue", "unittest.skipIf", "self.abs_curdir", "out.getvalue", "self._get_revised_path", "t.wrap", "typing.Tuple", "Meta1.__dir__", "_pickle.Pickler", "TestClass.method_returning_true", "textwrap.dedent", "sys.hash_info", "time.sleep", "pydoc.getpager", "sys.path", "clean_path.remove", "self.test_dir", "sys.gettrace", "os.stat", "p.dump", "pydoc.apropos"]}, "test_pyexpat.py": {"libraries": ["unittest", "xml.parsers.expat.errors", "xml.parsers.expat", "sys", "io.BytesIO", "os", "sysconfig", "test.support.sortdict", "traceback"], "function_names": ["check", "test_default_to_disabled", "test", "test_codes", "NotationDeclHandler", "setUp", "test_getter_setter_round_trip", "test3", "test_unchanged_size", "AttlistDeclHandler", "handler", "test_1025_bytes", "test_exception", "test_invalid_attributes", "test_wrong_size", "test_parse_file", "EndCdataSectionHandler", "EntityDeclHandler", "_hookup_callbacks", "counting_handler", "NotStandaloneHandler", "test1", "test_ignore_use_foreign_dtd", "StartNamespaceDeclHandler", "StartElementHandler", "start_element", "CommentHandler", "test_use_foreign_dtd", "test_buffering_enabled", "test_legal", "test4", "small_buffer_test", "__init__", "ExternalEntityRefHandler", "test5", "test_1000_bytes", "test_parse_bytes", "ProcessingInstructionHandler", "EndElementHandler", "CharacterDataHandler", "test_reparse_deferral_disabled", "XmlDeclHandler", "test_issue9402", "EndNamespaceDeclHandler", "test6", "resolve_entity", "_verify_parse_output", "test_parse_only_xml_data", "StartDoctypeDeclHandler", "DefaultHandlerExpand", "test_ordered_attributes", "test_namespace_prefixes", "test_buffer_text", "StartCdataSectionHandler", "test7", "check_traceback_entry", "test_parse_str", "test2", "check_pos", "test_change_size_1", "collector", "SkippedEntityHandler", "test_disabling_buffer", "test_change_size_2", "UnparsedEntityDeclHandler", "test_zero_length", "test_reparse_deferral_enabled", "test_expaterror", "test_illegal", "ElementDeclHandler", "test_specified_attributes", "setHandlers", "DefaultHandler", "test_parse_again", "EndDoctypeDeclHandler"], "function_calls": ["BytesIO", "len", "ExternalOutputter", "getattr", "str", "sortdict", "setattr", "zip", "repr", "bool", "map", "range", "RuntimeError"], "class_names": ["ForeignDTDTests", "ErrorMessageTest", "SpecificException", "ReparseDeferralTest", "Outputter", "ExternalOutputter", "ParseTest", "BufferTextTest", "MalformedInputTest", "NamespaceSeparatorTest", "PositionTest", "InterningTest", "SetAttributeTest", "ChardataBufferTest", "HandlerExceptionTest", "sf1296433Test"], "class_method_calls": ["parser.SetParamEntityParsing", "errors.XML_ERROR_UNCLOSED_TOKEN", "parser.CharacterDataHandler", "self.assertEqual", "xml.encode", "parser.GetReparseDeferralEnabled", "expat.version_info", "cm.exception", "out.parser_result", "self.assertRaisesRegex", "started.append", "e.code", "self.assertIs", "self.stuff", "errors.XML_ERROR_SYNTAX", "self.parser_result", "parser.StartElementHandler", "self.small_buffer_test", "self.parser", "self.assertIn", "self.fail", "out.out", "parser.buffer_size", "attrs.get", "data.decode", "handler_call_args.append", "self.StartElementHandler", "self._hookup_callbacks", "errors.messages", "L.append", "parser.UseForeignDTD", "self.handler_names", "parser.SetReparseDeferralEnabled", "self.Outputter", "self.CharacterDataHandler", "self.assertRaises", "p.Parse", "expat.ErrorString", "traceback.extract_tb", "expat.error", "self.n", "expat.ExpatError", "parser.ExternalEntityRefHandler", "self.check_pos", "p.EndElementHandler", "self.counting_handler", "parser.ParseFile", "parser.Parse", "unittest.main", "e.__traceback__", "self.EndElementHandler", "expat.ParserCreate", "data.strip", "external_parser.Parse", "sys.maxsize", "os.path", "self.setHandlers", "self.check_traceback_entry", "errors.codes", "out.ExternalEntityRefHandler", "self.upto", "expat.XML_PARAM_ENTITY_PARSING_ALWAYS", "parser.buffer_text", "expat.errors", "self.skipTest", "self.expected_list", "e.args", "self._verify_parse_output", "p.StartElementHandler", "self.assertTrue", "sysconfig.is_python_build", "unittest.TestCase", "self.assertFalse", "self.out"]}, "test_queue.py": {"libraries": ["unittest", "threading", "time", "random", "weakref", "test.support", "itertools"], "function_names": ["run_threads", "basic_queue_test", "setUp", "consume_nonblock", "test_many_threads", "test_negative_timeout_raises_exception", "test_queue_join", "test_failing_queue", "qfull", "wrapper", "_put", "_get", "test_references", "feed", "test_order", "test_queue_task_done", "log_exceptions", "__init__", "test_is_default", "queue_join_test", "consume", "__del__", "worker", "failing_queue_test", "do_exceptional_blocking_test", "run", "consume_timeout", "do_blocking_test", "test_many_threads_nonblock", "test_shrinking_queue", "test_nowait", "test_basic", "test_many_threads_timeout", "test_reentrancy"], "function_calls": ["_TriggerThread", "Circular", "list", "super", "sorted", "C", "FailingQueueException", "log_exceptions", "block_func", "wr", "dict", "next", "sum", "qfull", "f", "range", "RuntimeError"], "class_names": ["QueueTest", "PyFailingQueueTest", "CSimpleQueueTest", "Circular", "FailingQueueException", "CPriorityQueueTest", "CFailingQueueTest", "FailingQueueTest", "PySimpleQueueTest", "C", "CQueueTest", "BaseSimpleQueueTest", "PyQueueTest", "CLifoQueueTest", "PyLifoQueueTest", "_TriggerThread", "BlockingTestMixin", "BaseQueueTestMixin", "PyPriorityQueueTest", "PriorityQueueTest", "FailingQueue", "LifoQueueTest"], "class_method_calls": ["support.join_thread", "q.get_nowait", "self.q", "self.result", "q.put", "self.queue_join_test", "results.append", "self.cum", "Queue._put", "self.worker", "threading.Lock", "self.do_exceptional_blocking_test", "unittest.skipUnless", "self.assertEqual", "q.get", "seq.reverse", "self.circular", "q.maxsize", "thread.startedEvent", "q.put_nowait", "self.assertIs", "self.consume_timeout", "self.failing_queue_test", "threading.Event", "thread.start", "self.args", "q.fail_next_put", "self.consume", "self.FailingQueue", "self.fail", "support.import_fresh_module", "itertools.count", "self.consume_nonblock", "random.Random", "self.assertRaises", "exceptions.append", "q.empty", "self.fn", "thread.join", "self.fail_next_get", "q.task_done", "self.basic_queue_test", "self.cumlock", "self.do_blocking_test", "self.startedEvent", "seq.pop", "unittest.TestCase", "weakref.ref", "self.queue", "support.start_threads", "rnd.random", "self.assertIsNone", "unittest.main", "q.__class__", "self.fail_next_put", "Queue._get", "q.join", "time.sleep", "q.qsize", "Queue.__init__", "self.assertTrue", "q.fail_next_get", "self.run_threads", "q.full", "self.feed", "self.type2test", "threads.append", "self.assertFalse", "threading.Thread"]}, "test_quopri.py": {"libraries": ["unittest", "io", "sys", "subprocess", "quopri"], "function_names": ["test_encode", "test_scriptdecode", "test_decode", "test_scriptencode", "test_decodestring_double_equals", "test_encodestring", "test_decodestring", "withpythonimplementation", "test_encode_header", "test_decode_header", "test_embedded_ws", "newtest", "test_idempotent_string"], "function_calls": ["len", "range", "testfunc"], "class_names": ["QuopriTestCase"], "class_method_calls": ["cout.splitlines", "sys.executable", "p.decode", "self.assertEqual", "quopri.b2a_qp", "quopri.encodestring", "self.ESTRINGS", "io.BytesIO", "quopri.decode", "quopri.encode", "p.splitlines", "process.stdout", "e.decode", "self.addCleanup", "subprocess.Popen", "self.STRINGS", "cout.decode", "quopri.decodestring", "outfp.getvalue", "subprocess.PIPE", "newtest.__name__", "quopri.a2b_qp", "unittest.main", "testfunc.__name__", "self.HSTRINGS", "process.communicate", "unittest.TestCase"]}, "test_raise.py": {"libraries": ["sys", "test.support", "types", "unittest"], "function_names": ["test_assert_with_tuple_arg", "test_instance_cause", "test_tuples", "__exit__", "test_3611", "test_invalid_cause", "test_3118", "test_class_context_class_raise", "test_reraise_cycle_broken", "gen", "test_class_cause", "nested_reraise", "test_raise_finally", "test_reraise", "__enter__", "test_attrs", "test_invalid_reraise", "get_tb", "test_accepts_traceback", "test_class_context_instance_raise", "test_new_returns_invalid_instance", "test_except_reraise", "test_erroneous_exception", "test_constructor", "test_c_exception_raise", "test_cycle_broken", "__init__", "reraise", "test_finally_reraise", "testCauseSyntax", "test_context_manager", "__del__", "raiser", "test_with_reraise2", "test_instance_context_instance_raise", "test_c_exception_context", "test_yield_reraise", "f", "test_strings", "test_nested_reraise", "test_erroneous_cause", "test_raise_from_None", "test_with_reraise1", "test_sets_traceback", "__new__", "test_noraise_finally"], "function_calls": ["KeyError", "nested_reraise", "ValueError", "object", "Context", "str", "C", "IndexError", "ContextManager", "get_tb", "next", "TypeError", "gen", "OSError", "reraise", "f", "RuntimeError"], "class_names": ["Context", "TestTraceback", "C", "TestRaise", "ContextManager", "TestCause", "TestTracebackType", "TestRemovedFunctionality", "MyException", "TestContext"], "class_method_calls": ["self.assertIsInstance", "x.x", "self.assertEqual", "self.assertNotEqual", "self.assertIs", "exc.__traceback__", "cm.unraisable", "tb.tb_frame", "self.assertIn", "self.fail", "e.__suppress_context__", "tb.tb_next", "self.assertRaises", "support.catch_unraisable_exception", "sys.exc_info", "exc.__cause__", "self.assertIsNone", "unittest.main", "e.__traceback__", "tb.tb_lasti", "tb.tb_lineno", "e.__context__", "types.TracebackType", "exc.__suppress_context__", "sys._getframe", "self.raiser", "self.assertTrue", "e.__cause__", "unittest.TestCase", "self.assertFalse"]}, "test_random.py": {"libraries": ["unittest", "time", "math.sin", "math.pi", "math.log", "functools.partial", "test.support", "random", "math.ldexp", "fractions.Fraction", "unittest.mock", "warnings", "pickle", "math.exp", "math.factorial", "os", "math.fsum"], "function_names": ["test_randrange_bug_1590891", "test_von_mises_range", "test_gammavariate_alpha_between_zero_and_one", "test_saverestore", "test_randrange_nonunit_step", "random", "test_bug_9025", "test_referenceImplementation", "test_setstate_middle_arg", "test_subclasses_overriding_methods", "getrandbits", "test_gauss", "test_shuffle_random_argument", "test_gammavariate_alpha_equal_one", "test_random_subclass_with_kwargs", "test__all__", "test_guaranteed_stable", "testMagicConstants", "test_strong_reference_implementation", "test_seed_when_randomness_source_not_found", "test_gammavariate_alpha_equal_one_equals_expovariate", "__init__", "test_after_fork", "test_bug_31478", "test_setstate_first_arg", "test_choice", "test_sample_distribution", "test_gammavariate_alpha_greater_one", "randomlist", "test_randrange_uses_getrandbits", "test_randrange_errors", "test_gammavariate_errors", "test_bigrand_ranges", "test_genrandbits", "test_choices", "test_bigrand", "test_autoseed", "test_bug_31482", "test_zeroinputs", "test_shuffle", "test_sample", "test_53_bits_per_float", "test_bug_1727780", "test_choices_algorithms", "test_sample_inputs", "test_long_seed", "test_randbelow_without_getrandbits", "test_avg_std", "test_sample_on_dicts", "test_von_mises_large_kappa", "__abs__", "test_randbelow_logic", "test_rangelimits", "test_bug_27706", "gamma", "__hash__", "test_constant", "test_choices_subnormal", "test_seedargs", "test_pickling", "test_betavariate_return_zero"], "function_calls": ["BadInt", "exp", "SubClass1", "ldexp", "SubClass3", "shuffle", "factorial", "_log", "Fraction", "SubClass6", "variate", "str", "getbits", "tuple", "fsum", "dict", "open", "randrange", "sin", "range", "Subclass", "list", "partial", "set", "dir", "int", "type", "zip", "SubClass8", "choice", "float", "SubClass4", "SubClass5", "eval", "hasattr", "bytearray", "MySeed", "len", "SubClass7", "raises", "gamma", "choices", "sum", "SubClass2"], "class_names": ["BadInt", "SubClass1", "SubClass3", "SubClass6", "SystemRandom_TestBasicOps", "TestModule", "MersenneTwister_TestBasicOps", "TestBasicOps", "Mixin1", "Mixin2", "TestDistributions", "Subclass", "SubClass8", "SubClass5", "SubClass4", "TestRandomSubclassing", "MySeed", "SubClass7", "SubClass2"], "class_method_calls": ["random_mock.side_effect", "random.__all__", "random.betavariate", "random.gammavariate", "os.pipe", "os.waitpid", "unittest.skipUnless", "unittest.mock", "self.assertEqual", "g.normalvariate", "self.assertNotEqual", "self.assertAlmostEqual", "y.append", "g.expovariate", "dict.fromkeys", "random_mock.call_count", "random._log", "g.weibullvariate", "called.add", "random.expovariate", "g.triangular", "f.write", "random.LOG4", "pickle.load", "self.assertIn", "self.fail", "urandom_mock.side_effect", "newgen.random", "random.TWOPI", "warnings.catch_warnings", "random.SG_MAGICCONST", "f.read", "random.Random", "random.vonmisesvariate", "random.NV_MAGICCONST", "self.assertRaises", "warnings.simplefilter", "gammavariate_mock.return_value", "os.fork", "support.findfile", "random.SystemRandom", "g.gauss", "random.getrandbits", "mock_random.assert_called_with", "g.uniform", "random._exp", "os.close", "random._e", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "g.betavariate", "unittest.main", "time.sleep", "random.BPF", "variate.__name__", "g.paretovariate", "g.vonmisesvariate", "pickle.dumps", "g.random", "g.lognormvariate", "self.assertTrue", "os._exit", "self.gen", "g.gammavariate", "unittest.TestCase", "self.randomlist", "self.test_seedargs", "r.random"]}, "test_range.py": {"libraries": ["unittest", "sys", "pickle", "itertools"], "function_names": ["pyrange", "check", "test_large_operands", "test_index", "test_odd_bug", "_range_len", "test_repr", "test_user_index_method", "test_attributes", "test_reverse_iteration", "test_comparison", "test_invalid_invocation", "__eq__", "__index__", "pyrange_reversed", "test_issue11845", "test_exhausted_iterator_pickling", "test_large_exhausted_iterator_pickling", "__int__", "__init__", "test_count", "test_large_range", "test_range", "assert_attrs", "test_types", "test_iterator_pickling", "test_empty", "test_contains", "test_range_iterators_invocation", "test_range_iterators", "test_slice", "test_strided_limits", "test_pickling", "assert_iterators_equal"], "function_calls": ["pyrange", "check", "object", "BadExc", "reversed", "_range_len", "pyrange_reversed", "repr", "iter", "hash", "IN", "range", "C3", "BadCmp", "list", "C1", "slice", "int", "type", "next", "enumerate", "I", "IX", "len", "C2", "map", "AlwaysEqual"], "class_names": ["BadCmp", "BadExc", "RangeTest", "C1", "C2", "IN", "AlwaysEqual", "I", "IX", "C3"], "class_method_calls": ["self.assertEqual", "self.assertNotEqual", "self.assertIs", "self.assertIn", "self.fail", "u.count", "self.assertNotIn", "self.assert_iterators_equal", "rangeobj.stop", "self.subTest", "self.assertRaises", "self.n", "self.assert_attrs", "unittest.TestCase", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "unittest.main", "rangeobj.step", "sys.maxsize", "rangeobj.start", "a.index", "pickle.dumps", "itertools.islice", "self.assertTrue", "itertools.zip_longest", "self.assertFalse", "u.index"]}, "test_re.py": {"libraries": ["sre_constants.MAXGROUPS", "warnings", "string", "array", "unittest", "copy", "re.Scanner", "test.re_tests.FAIL", "locale", "test.support.cpython_only", "test.support.captured_stdout", "weakref.proxy", "re._compile", "test.re_tests.SUCCEED", "re", "test.re_tests.tests", "test.re_tests.SYNTAX_ERROR", "_sre.MAXREPEAT", "test.support.gc_collect", "test.support._2G", "test.support.bigmemtest", "_sre", "sre_compile", "pickle", "test.re_tests.benchmarks"], "function_names": ["test_quotes", "test_bug_20998", "test_bug_3629", "test_qualified_re_sub", "assertMatch", "__index__", "test_flags", "test_sre_byte_literals", "test_stack_overflow", "test_bug_34294", "test_character_set_errors", "bump_num", "test_bug_117612", "test_search_star_plus", "test_lookahead", "s_operator", "test_bug_612074", "__init__", "check_flags", "test_unknown_flags", "test_bug_16688", "test_locale_flag", "test_sub_template_numeric_escape", "test_ignore_case", "test_re_tests", "test_issue17998", "test_re_benchmarks", "test_bug_449964", "test_getattr", "test_bug_6509", "test_single_flag", "test_repeat_minmax_overflow_maxrepeat", "test_pattern_compare", "test_bug_926075", "test_zerowidth", "test_backref_group_name_in_exception", "test_bug_113254", "test_re_subn", "test_enum", "test_bug_817234", "test_search_coverage", "test_bug_6561", "checkTemplateError", "test_big_codesize", "test_lookbehind", "test_overlap_table", "test_re_match", "test_re_escape_non_ascii_bytes", "test_long_pattern", "test_error", "test_sre_character_class_literals", "test_not_literal", "test_scoped_flags", "test_multiple_flags", "test_inline_flags", "test_re_split", "check_en_US_iso88591", "test_bug_931848", "test_bug_725106", "test_bytes", "test_weakref", "test_repeat_minmax_overflow", "test_multiple_repeat", "test_bigcharset", "test_qualified_re_split", "test_special_escapes", "assertTypedEqual", "test_compile", "test_nothing_to_repeat", "s_ident", "test_re_escape", "test_bug_114660", "test_sre_byte_class_literals", "test_ignore_case_range", "s_int", "test_ascii_and_unicode_flag", "test_bug_527371", "test_flags_repr", "test_ignore_case_set", "test_group", "checkPatternError", "__getitem__", "test_locale", "s_float", "test_match_repr", "test_possible_set_operations", "test_re_groupref", "test_empty_array", "test_string_boundaries", "test_symbolic_refs", "test_re_findall", "test_named_unicode_escapes", "test_bug_581080", "test_debug_flag", "test_keyword_parameters", "test_basic_re_sub", "test_anyall", "test_re_escape_bytes", "test_locale_caching", "test_match_getitem", "test_dealloc", "test_pattern_compare_bytes", "test_keep_buffer", "test_dollar_matches_twice", "test_search_dot_unicode", "test_bug_418626", "test_pickling", "test_repeat_minmax", "test_groupdict", "check", "recurse", "test_constants", "test_unicode_flag", "test_bytes_str_mixing", "check_en_US_utf8", "test_expand", "test_re_groupref_overflow", "test_bug_29444", "test_other_escapes", "test_copying", "test_finditer", "test_re_groupref_exists", "test_bug_1661", "test_bug_448951", "test_sre_character_literals", "test_without_flags", "test_case_helpers", "test_re_escape_non_ascii", "test_scanner", "test_locale_compiled", "test_large_subn", "test_group_name_in_exception", "test_bug_449000", "test_unlimited_zero_width_repeat", "test_bug_2537", "test_large_search", "test_misc_errors", "test_bug_725149", "test_symbolic_groups", "test_category", "test_re_fullmatch", "test_bug_764548"], "function_calls": ["sorted", "recurse", "memoryview", "gc_collect", "my_unicode", "repr", "matcher", "isinstance", "Index", "super", "proxy", "B", "str", "hash", "captured_stdout", "range", "Scanner", "list", "ValueError", "bigmemtest", "int", "type", "zip", "next", "float", "f", "eval", "bytearray", "len", "chr", "bytes", "print", "ord", "map", "S"], "class_names": ["PatternReprTests", "Index", "B", "ReTests", "ImplementationTest", "ExternalTests", "my_unicode", "S"], "class_method_calls": ["self.assertTypedEqual", "s.replace", "self.assertEqual", "re.U", "self.assertNotEqual", "obj.search", "pat.sub", "self.assertIs", "x.findall", "scanner.scan", "locale.setlocale", "pat.scanner", "warnings.catch_warnings", "re.S", "self.assertRaises", "p.search", "err.pattern", "re.L", "bpat.match", "re.ASCII", "p4.match", "result.re", "err.colno", "pickle.HIGHEST_PROTOCOL", "c.lower", "re.MULTILINE", "err.pos", "string.ascii_letters", "pattern.sub", "self.assertTrue", "m.groupdict", "self.assertIsInstance", "re.error", "re.LOCALE", "sletter.encode", "re.escape", "cm.exception", "re.search", "re.IGNORECASE", "b.extend", "self.check_en_US_iso88591", "re.DEBUG", "re.UNICODE", "self.assertNotIn", "self.bump_num", "self.assertMatch", "locale.Error", "_sre.unicode_tolower", "self.subTest", "m.span", "self.assertRegex", "bpat.sub", "warns.warnings", "pattern.encode", "p.findall", "copy.deepcopy", "m.groups", "pickle.loads", "self.assertIsNone", "self.assertIsNot", "_sre.ascii_iscased", "matchobj.group", "pat.split", "array.array", "re.DOTALL", "re.purge", "m2.group", "re.match", "unittest.TestCase", "pat.findall", "self.assertFalse", "re.split", "copy.copy", "self.assertLess", "string.digits", "scanner.scanner", "re.Pattern", "self.value", "result.span", "self.checkPatternError", "re.X", "self.checkTemplateError", "result.group", "self.addCleanup", "m.end", "re.subn", "pat.match", "warnings.simplefilter", "self.assertWarns", "err.lineno", "re.sub", "re.I", "re.finditer", "p.match", "p.fullmatch", "scanner.search", "_sre.unicode_iscased", "unittest.main", "re.compile", "self.check_en_US_utf8", "item.group", "self.maxDiff", "re.findall", "self.assertIsNotNone", "pat.search", "pat.fullmatch", "err.msg", "self.assertRaisesRegex", "self.check", "re.A", "r.match", "re.fullmatch", "self.assertIn", "self.check_flags", "pat.finditer", "_sre.compile", "re.M", "bletter.decode", "out.getvalue", "locale.getpreferredencoding", "m.start", "y.findall", "_sre.ascii_tolower", "self.LITERAL_CHARS", "c.upper", "re.VERBOSE", "p.groupindex", "locale.LC_CTYPE", "self.skipTest", "pickle.dumps", "m.group", "sre_compile._generate_overlap_table"]}, "test_readline.py": {"libraries": ["unittest", "test.support.temp_dir", "test.support.TESTFN", "contextlib.ExitStack", "test.support.unlink", "errno.EIO", "test.support.import_module", "sys", "tempfile", "subprocess", "locale", "test.support.script_helper.assert_python_ok", "test.support.verbose", "os", "selectors"], "function_names": ["test_nonascii_history", "run_pty", "test_write_read_append", "test_history_size", "setUpModule", "test_init", "test_nonascii", "testHistoryUpdates", "terminate", "test_auto_history_enabled", "test_auto_history_disabled"], "function_calls": ["format", "bytearray", "len", "run_pty", "temp_dir", "assert_python_ok", "import_module", "ExitStack", "dict", "hasattr", "open", "range", "print"], "class_names": ["TestReadline", "TestHistoryManipulation"], "class_method_calls": ["err.errno", "sel.select", "os.read", "readline.get_current_history_length", "sys.executable", "unittest.skipUnless", "os.write", "self.assertEqual", "self.auto_history_script", "tempfile.NamedTemporaryFile", "cleanup.callback", "os.set_blocking", "selectors.SelectSelector", "f.write", "readline._READLINE_RUNTIME_VERSION", "readline.replace_history_item", "self.assertIn", "output.extend", "sel.register", "self.addCleanup", "locale.setlocale", "subprocess.Popen", "readline.__doc__", "sel.modify", "os.remove", "hfile.name", "selectors.EVENT_READ", "self.assertRaises", "unittest.skipIf", "readline.append_history_file", "readline.write_history_file", "os.close", "unittest.TestCase", "proc.terminate", "cleanup.enter_context", "os.environ", "pty.openpty", "readline.clear_history", "unittest.main", "os.unlink", "locale.LC_CTYPE", "readline._READLINE_LIBRARY_VERSION", "hfile.close", "readline.read_history_file", "readline.get_history_item", "selectors.EVENT_WRITE", "os.path", "readline.add_history", "readline._READLINE_VERSION", "f.readlines", "self.skipTest", "readline.remove_history_item"]}, "test_regrtest.py": {"libraries": ["unittest", "io", "platform", "re", "os.path", "contextlib", "textwrap", "faulthandler", "sys", "tempfile", "test.libregrtest", "subprocess", "test.support", "test.libregrtest.utils", "sysconfig", "glob"], "function_names": ["test_runleaks", "test_interrupted", "test_module_regrtest", "check_line", "test_nocoverdir", "test_header", "test_unrecognized_argument", "test_unknown_option", "test_huntrleaks_fd_leak", "test_use", "test_no_test_ran_some_test_exist_some_not", "test_long_option__partial", "test_forever", "test_testdir", "run_batch", "test_no_tests_ran_skip", "test_start", "test_randseed", "test_multiprocess", "test_module_test", "test_rerun_success", "test_rerun_fail", "test_huntrleaks", "test_matchfile", "test_exclude", "test_threshold", "test_fromfile", "test_wait", "test_verbose2", "test_verbose3", "test_timeout", "test_format_duration", "test_option_with_empty_string_value", "regex_search", "test_nowindows", "test_coverage", "parse_methods", "create_test", "test_no_tests_ran_multiple_tests_nonexistent", "parse_random_seed", "run_python", "test_no_tests_ran", "test_randomize", "test_ignorefile", "test_list_cases", "test_failing_test", "test_slowest", "test_two_options", "setUp", "test_cleanup", "test_memlimit", "test_resources", "checkError", "test_module_autotest", "test_findleaks", "test_worker_args", "check_output", "test_tools_script_run_tests", "test_pcbuild_rt", "test_script_autotest", "test_option_and_arg", "run_command", "test_help", "test_match", "test_list_tests", "test_multiprocessing_timeout", "test_arg_option_arg", "test_module_from_test_autotest", "test_tools_buildbot_test", "test_crashed", "test_finds_expected_number_of_tests", "check_executed_tests", "test_coverdir", "test_script_regrtest", "test_slowest_interrupted", "check_leak", "test_random", "test_arg", "test_verbose", "test_quiet", "run_tests", "test_ignore", "test_failfast", "test_single", "test_env_changed", "list_regex", "plural", "parse_executed_tests"], "function_calls": ["list", "len", "isinstance", "any", "super", "sorted", "str", "set", "int", "list_regex", "plural", "open", "print", "enumerate", "range", "hasattr"], "class_names": ["ProgramsTestCase", "CheckActualTests", "BaseTestCase", "ArgsTestCase", "ParseArgsTestCase", "TestUtils"], "class_method_calls": ["stderr.getvalue", "os.mkdir", "err.getvalue", "ns.randomize", "ns.timeout", "sys.executable", "unittest.skipUnless", "self.assertEqual", "platform.architecture", "ns.print_slow", "self.parse_methods", "ns.failfast", "ns.header", "support.TESTFN", "libregrtest.ALL_RESOURCES", "self.assertRaises", "tests.values", "ns.verbose2", "re.MULTILINE", "contextlib.redirect_stderr", "ns.exclude", "glob.escape", "ns.wait", "support.captured_stdout", "self.assertTrue", "self.python_args", "result.append", "re.escape", "self.run_batch", "self.regrtest_args", "self.regex_search", "re.search", "self.create_test", "self.tmptestdir", "ns.random_seed", "tempfile.mkdtemp", "io.StringIO", "ns.quiet", "subprocess.STDOUT", "self.testdir", "self.TESTNAME_PREFIX", "output.splitlines", "glob.glob", "ns.match_tests", "self.subTest", "output.rstrip", "platform.machine", "self.assertRegex", "self.run_command", "ns.memlimit", "ns.worker_args", "utils.format_duration", "fp.read", "self.assertIsNone", "self.check_line", "proc.stdout", "os.path", "self.tests", "unittest.TestCase", "self.assertFalse", "self.TESTNAME_REGEX", "sys.platform", "self.parse_random_seed", "ns.huntrleaks", "ns.nowindows", "self.check_leak", "fp.write", "regex.finditer", "ns.forever", "test_args.append", "self.addCleanup", "rt_args.append", "ns.ignore_tests", "ns.args", "self.parse_executed_tests", "ns.threshold", "ns.use_resources", "re.finditer", "support.unlink", "self.run_tests", "ns.trace", "subprocess.PIPE", "self.assertGreater", "unittest.main", "proc.returncode", "self.run_python", "self.NTEST", "re.compile", "libregrtest._parse_args", "match.group", "self.check_output", "ns.runleaks", "ns.start", "self.checkError", "support.SAVEDCWD", "proc.stderr", "ns.fromfile", "self.assertIn", "support.rmtree", "self.fail", "expected.remove", "ns.verbose3", "support.captured_stderr", "out.getvalue", "BaseTestCase.TEST_UNIQUE_ID", "ns.verbose", "subprocess.run", "ns.coverdir", "ns.single", "textwrap.dedent", "ns.use_mp", "support.cpython_only", "self.skipTest", "ns.testdir", "self.check_executed_tests", "sysconfig.is_python_build"]}, "test_repl.py": {"libraries": ["unittest", "test.support.SuppressCrashReport", "test.support.script_helper.kill_python", "sys", "subprocess", "test.support.cpython_only", "os", "textwrap.dedent"], "function_names": ["test_no_memory", "test_close_stdin", "test_multiline_string_parsing", "spawn_repl"], "function_calls": ["spawn_repl", "kill_python", "dedent", "SuppressCrashReport", "dict"], "class_names": ["TestInteractiveInterpreter"], "class_method_calls": ["cmd_line.extend", "p.stdin", "os.path", "self.assertIn", "process.returncode", "sys.executable", "subprocess.PIPE", "subprocess.Popen", "self.assertEqual", "process.communicate", "p.returncode", "subprocess.STDOUT", "unittest.TestCase", "os.environ", "unittest.main", "kw.setdefault"]}, "test_reprlib.py": {"libraries": ["test.support.create_empty_file", "test.support.verbose", "unittest", "areallylongpackageandmodulenametotestreprtruncation.areallylongpackageandmodulenametotestreprtruncation.bar", "collections.deque", "importlib.util", "areallylongpackageandmodulenametotestreprtruncation.areallylongpackageandmodulenametotestreprtruncation.qux", "os", "shutil", "functools.WRAPPER_ASSIGNMENTS", "array.array", "areallylongpackageandmodulenametotestreprtruncation.areallylongpackageandmodulenametotestreprtruncation.baz", "importlib", "sys", "areallylongpackageandmodulenametotestreprtruncation.areallylongpackageandmodulenametotestreprtruncation.areallylongpackageandmodulenametotestreprtruncation", "areallylongpackageandmodulenametotestreprtruncation.areallylongpackageandmodulenametotestreprtruncation.foo", "reprlib.repr", "reprlib.Repr", "reprlib.recursive_repr"], "function_names": ["test_instance", "append", "setUp", "test_lambda", "__repr__", "test_cell", "get_cell", "test_string", "nestedTuple", "test_descriptors", "test_type", "__init__", "test_method", "test_recursive_repr", "test_nesting", "test_range", "test_module", "test_numbers", "test_frozenset", "write_file", "test_builtin_function", "test_class", "_check_path_limitations", "tearDown", "test_assigned_attributes", "test_unsortable", "test_object", "inner", "test_tuple", "test_container", "foo", "test_set_literal"], "function_calls": ["recursive_repr", "frozenset", "getattr", "classmethod", "deque", "id", "array", "get_cell", "repr", "nestedTuple", "create_empty_file", "staticmethod", "open", "Exception", "ClassWithFailingRepr", "range", "eq", "list", "set", "MyContainer", "r", "write_file", "MyContainer2", "len", "Repr", "ClassWithRepr", "map", "print"], "class_names": ["ReprTests", "C", "TestRecursiveRepr", "MyContainer", "MyContainer2", "ClassWithRepr", "MyContainer3", "LongReprTest", "ClassWithFailingRepr"], "class_method_calls": ["os.mkdir", "MyContainer3.wrapped", "s.find", "bar.bar", "r.startswith", "self.subpkgname", "self.assertEqual", "self._check_path_limitations", "s.endswith", "dict.items", "os.getcwd", "C.foo", "self.assertIs", "fp.write", "foo.foo", "bar.__name__", "r2.maxtuple", "self.assertIn", "importlib.util", "self.s", "os.remove", "iqux.amethod", "os.rmdir", "r2.repr", "self.longname", "qux.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "self.here", "self.values", "self.assertRegex", "actions.append", "importlib.invalidate_caches", "actions.reverse", "unittest.skip", "MyContainer3.wrapper", "m.append", "self.pkgname", "shutil.rmtree", "unittest.main", "module.__name__", "baz.baz", "foo.__name__", "os.walk", "sys.path", "os.path", "module.__file__", "qux.__name__", "actions.sort", "self.skipTest", "os.name", "self.assertTrue", "self.maxDiff", "s.startswith", "unittest.TestCase", "baz.__name__"]}, "test_richcmp.py": {"libraries": ["unittest", "operator", "collections.UserList", "random", "test.support"], "function_names": ["test_exception_message", "__le__", "__cmp__", "checkfail", "checkvalue", "__eq__", "__repr__", "do", "__ge__", "test_recursion", "__ne__", "__cast", "__lt__", "__init__", "test_coverage", "__len__", "test_misbehavin", "__gt__", "test_mixed", "test_dicts", "test_goodentry", "test_badentry", "__bool__", "__setitem__", "test_basic", "test_not", "checkequal", "test_values", "__getitem__"], "function_calls": ["ValueError", "isinstance", "len", "list", "Misb", "UserList", "typea", "op", "Bad", "getattr", "Spam", "zip", "TypeError", "Vector", "enumerate", "range", "typeb", "Good"], "class_names": ["VectorTest", "ListTest", "Misb", "Bad", "DictTest", "Good", "Spam", "NumberTest", "Exc", "Vector", "Number", "MiscTest"], "class_method_calls": ["operator.eq", "self.__cast", "self.assertEqual", "operator.__lt__", "b.insert", "operator.__eq__", "operator.ge", "b.append", "self.assertRaisesRegex", "operator.__le__", "self.assertIs", "self.checkvalue", "self.checkfail", "imag1a.items", "self.fail", "self.data", "operator.ne", "operator.lt", "a.append", "self.checkequal", "self.subTest", "self.assertRaises", "a.insert", "operator.not_", "self.x", "random.randrange", "random.shuffle", "operator.__gt__", "operator.gt", "unittest.main", "other.data", "support.no_tracing", "operator.__ne__", "operator.__ge__", "operator.le", "self.assertTrue", "support.TestFailed", "imag1b.copy", "unittest.TestCase", "opmap.values"]}, "test_rlcompleter.py": {"libraries": ["unittest", "rlcompleter", "unittest.mock.patch", "builtins"], "function_names": ["test_attr_matches", "test_excessive_getattr", "setUp", "test_namespace", "bar", "test_duplicate_globals", "test_global_matches", "test_complete", "test_uncreated_attr"], "function_calls": ["sorted", "Foo", "B", "dir", "A", "dict"], "class_names": ["Foo", "B", "TestRlcompleter", "A", "CompleteMe"], "class_method_calls": ["self.assertIn", "self.completer", "rlcompleter.Completer", "self.calls", "self.stdcompleter", "patch.object", "self.assertIsNone", "unittest.mock", "self.assertEqual", "x.startswith", "self.assertTrue", "completer.complete", "f.calls", "unittest.TestCase", "self.assertFalse", "unittest.main", "self.assertRaises"]}, "test_robotparser.py": {"libraries": ["unittest", "io", "threading", "test.support", "http.server.BaseHTTPRequestHandler", "http.server.HTTPServer", "urllib.robotparser", "os"], "function_names": ["test_string_formatting", "test_bad_urls", "do_GET", "test_request_rate", "setUp", "test_site_maps", "log_message", "testPasswordProtectedSite", "setUpClass", "test_basic", "test_read_404", "test_can_fetch", "url", "test_good_urls", "tearDown", "get_agent_and_url"], "function_calls": ["isinstance", "str", "HTTPServer"], "class_names": ["BaseRobotTest", "EmptyFileTest", "CrawlDelayAndRequestRateTest", "SitemapTest", "UserAgentOrderingTest", "UserAgentWildcardTest", "DifferentAgentTest", "UseFirstUserAgentWildcardTest", "RejectAllRobotsTest", "EmptyQueryStringTest", "CrawlDelayAndCustomAgentTest", "InvalidRequestRateTest", "DisallowQueryStringTest", "GoogleURLOrderingTest", "RobotHandler", "PasswordProtectedSiteTestCase", "InvalidCrawlDelayTest", "AnotherInvalidRequestRateTest", "NetworkTestCase", "UserAgentGoogleMobileTest", "StringFormattingTest", "BaseRequestRateTest", "DefaultEntryTest"], "class_method_calls": ["parser.can_fetch", "self.assertIsInstance", "support.reap_threads", "self.assertEqual", "parser.crawl_delay", "parsed_request_rate.requests", "support.requires", "self.base_url", "support.transient_internet", "cls.parser", "self.site_maps", "self.parser", "io.StringIO", "self.good", "parser.mtime", "self.t", "parser.set_url", "self.agent", "self.subTest", "cls.robots_txt", "self.expected_output", "parser.request_rate", "parser.disallow_all", "self.url", "self.robots_txt", "self.crawl_delay", "self.assertGreater", "self.assertIsNone", "unittest.main", "self.bad", "self.send_error", "cls.base_url", "os.path", "self.get_agent_and_url", "parsed_request_rate.seconds", "parser.allow_all", "self.assertTrue", "self.server", "parser.read", "support.HOST", "unittest.TestCase", "urllib.robotparser", "self.assertFalse", "threading.Thread", "self.request_rate"]}, "test_runpy.py": {"libraries": ["importlib.machinery", "runpy.run_path", "contextlib", "warnings", "subprocess", "test.support.create_empty_file", "test.support.verbose", "test.support.script_helper.make_zip_script", "unittest", "test.support.forget", "runpy.run_module", "textwrap", "importlib.util", "signal", "test.support.make_legacy_pyc", "pkgutil", "pathlib", "re", "runpy", "test.support.unload", "tempfile", "runpy._run_code", "test.support.temp_dir", "os.path", "test.support.script_helper.make_script", "runpy._run_module_code", "py_compile", "sys", "test.support.no_tracing"], "function_names": ["test_basic_script", "_check_package", "test_zipfile", "test_basic_script_no_suffix", "_del_pkg", "_check_module", "assertNamespaceMatches", "test_zipfile_error", "_add_relative_modules", "test_pymain_run_command_run_module", "test_run_package", "_add_pkg_dir", "test_directory_error", "test_pymain_run_file_runpy_run_module_as_main", "test_run_module_in_namespace_package", "test_run_package_alter_sys", "_make_test_script", "test_invalid_names", "test_pymain_run_module", "test_run_code", "test_explicit_relative_import", "create_ns", "assertSigInt", "test_run_namespace_package", "test_directory_compiled", "test_pymain_run_file", "_fix_ns_for_legacy_pyc", "test_script_compiled", "test_zipfile_compiled", "test_encoding", "test_run_name", "test_run_package_init_exceptions", "test_library_module", "run", "test_pymain_run_command", "test_run_namespace_package_in_namespace_package", "test_package_imported_no_warning", "test_pymain_run_file_runpy_run_module", "test_run_package_in_namespace_package", "test_run_module", "test_main_recursion_error", "_check_relative_imports", "test_pkgutil_walk_packages", "check_code_execution", "test_submodule_imported_warning", "test_run_module_alter_sys", "_check_import_error", "tmp_path", "test_directory", "test_pymain_run_stdin", "_make_pkg", "test_main_relative_import", "expect_import_error", "_check_script", "test_basic_script_with_path_object", "test_run_module_code"], "function_calls": ["format", "object", "make_zip_script", "getattr", "run_module", "RuntimeError", "__import__", "super", "create_empty_file", "_run_module_code", "dict", "open", "make_legacy_pyc", "range", "forget", "ValueError", "list", "unload", "_run_code", "set", "type", "run_path", "temp_dir", "len", "make_script", "create_namespace", "print"], "class_names": ["RunModuleTestCase", "TestExit", "CodeExecutionMixin", "ExecutionLayerTestCase", "RunPathTestCase"], "class_method_calls": ["os.mkdir", "moduleinfo.ispkg", "sys.executable", "self.assertEqual", "ham.parent", "self.check_code_execution", "self.assertIs", "mod_spec.loader", "result_ns.copy", "expected_spec.loader", "warnings.catch_warnings", "expected_ns.update", "mod_name.replace", "spec.name", "mod_name.rpartition", "run_name.rpartition", "ham.stem", "self._fix_ns_for_legacy_pyc", "self.ham", "self.EXPECTED_CODE", "self._check_module", "os.extsep", "sys.argv", "self.assertTrue", "expected_ns.pop", "py_compile.compile", "importlib.machinery", "self.assertIsInstance", "self._make_test_script", "expected_namespace.copy", "re.escape", "self._check_package", "tempfile.mkdtemp", "k.startswith", "importlib.util", "self.assertNotIn", "os.rmdir", "self.subTest", "self._check_script", "example_namespace.copy", "k.endswith", "expected_modules.remove", "contextlib.contextmanager", "signal.SIGINT", "self.assertIsNone", "self.assertIsNot", "moduleinfo.name", "os.path", "sys.dont_write_bytecode", "moduleinfo.module_finder", "unittest.TestCase", "sys.platform", "self.expect_import_error", "self.tmp_path", "self.assertSigInt", "self._check_relative_imports", "f.write", "self.addCleanup", "ham.write_text", "pkgutil.walk_packages", "self.assertWarnsRegex", "warnings.simplefilter", "result_spec.loader", "importlib.invalidate_caches", "self._check_import_error", "subprocess.PIPE", "unittest.main", "self._add_relative_modules", "proc.returncode", "os.walk", "entry.startswith", "example_namespace.update", "result_ns.pop", "mod_file.write", "expected_modules.add", "exception.__name__", "self._make_pkg", "sys.modules", "proc.stderr", "self._add_pkg_dir", "self.assertRaisesRegex", "self.assertIn", "self.fail", "run_module.write_text", "self.assertNamespaceMatches", "expected_ns.copy", "self._del_pkg", "os.remove", "expected_packages.add", "pathlib.Path", "subprocess.run", "mod_spec.cached", "pkgutil.ModuleInfo", "run_module_as_main.write_text", "expected_packages.remove", "textwrap.dedent", "sys.path", "self.CHECKED_SPEC_ATTRIBUTES"]}, "test_sax.py": {"libraries": ["xml.sax.SAXReaderNotAvailable", "unittest.mock", "io.BytesIO", "test.support", "test.support.run_unittest", "xml.sax.SAXParseException", "unittest", "urllib.error.URLError", "xml.sax.SAXException", "xml.sax.xmlreader.AttributesNSImpl", "xml.sax.xmlreader.InputSource", "xml.sax.xmlreader.AttributesImpl", "xml.sax.parse", "codecs", "io.StringIO", "test.support.FakePath", "xml.sax.ContentHandler", "xml.sax.expatreader.create_parser", "xml.sax.saxutils.unescape", "xml.sax.saxutils.escape", "xml.sax.saxutils.prepare_input_source", "test.support.findfile", "shutil", "pyexpat", "test.support.TESTFN", "xml.sax.parseString", "os.path", "xml.sax.saxutils.XMLFilterBase", "xml.sax.saxutils.XMLGenerator", "xml.sax.make_parser", "xml.sax.handler.feature_namespaces", "xml.sax.saxutils.quoteattr", "xml.sax.handler.feature_external_ges"], "function_names": ["test_unescape_extra", "test_double_quoteattr", "test_path_objects", "check_parseString", "test_5027_1", "test_parseString_bytes", "test_make_parser4", "test_single_quoteattr", "make_byte_stream", "test_expat_entityresolver_default", "__init__", "test_nsattrs_empty", "test_expat_binary_file_nonascii", "test_text_file", "test_xmlgen_content_empty", "test_parse_close_source", "test_unescape_all", "test_expat_binary_file_bytes_name", "test_expat_inpsource_sysid_nonascii", "test_quoteattr_basic", "seekable", "tearDown", "test_1463026_1", "test_xmlgen_content", "test_xmlgen_ignorable", "test_flush_reparse_deferral_enabled", "cleanup", "verify_attrs_wattr", "test_expat_incremental_reset", "test_escape_basic", "test_make_parser5", "test_expat_external_dtd_default", "test_unescape_amp_extra", "xml_str", "test_expat_locator_noinfo", "test_expat_binary_file", "test_xmlgen_attr_escape", "test_escape_extra", "test_xmlgen_unencodable", "test_expat_dtdhandler", "test_single_double_quoteattr", "xml_bytes", "test_expat_nsattrs_wattr", "test_expat_external_dtd_enabled", "test_expat_inpsource_sysid", "test_1463026_2", "test_expat_attrs_wattr", "test_parse_bytes", "test_xmlgen_fragment", "test_expat_incomplete", "getvalue", "notationDecl", "make_character_stream", "test_xmlgen_ns", "tell", "test_1463026_2_empty", "test_expat_inpsource_location", "test_expat_inpsource_byte_stream", "test_filter_basic", "test_1463026_3_empty", "getColumnNumber", "test_xmlgen_content_escape", "test_make_parser3", "test_byte_stream", "test_binary_file", "setUp", "test_attrs_empty", "test_xmlgen_encoding", "test_parse_path_object", "test_main", "test_expat_inpsource_filename", "test_escape_all", "check_parse", "test_xmlgen_basic_empty", "test_expat_attrs_empty", "mock_open", "test_expat_entityresolver_enabled", "test_xmlgen_pi", "test_xmlgen_ignorable_empty", "test_system_id", "test_parse_InputSource", "test_character_stream", "test_5027_2", "test_1463026_1_empty", "test_make_parser", "test_expat_nsattrs_empty", "test_expat_locator_withinfo", "test_attrs_wattr", "test_1463026_3", "func", "test_parse_text", "test_make_parser2", "test_parseString_text", "unparsedEntityDecl", "startElementNS", "test_expat_binary_file_int_name", "make_xml_file", "checkContent", "test_expat_incremental", "test_xmlgen_encoding_bytes", "test_xmlgen_ns_empty", "test_nsattrs_wattr", "ioclass", "test_string", "test_expat_text_file", "test_expat_inpsource_character_stream", "test_sax_parse_exception_str", "startElement", "resolveEntity", "test_unescape_basic", "getPublicId", "test_no_close_file", "getSystemId", "xml", "test_expat_locator_withinfo_nonascii", "verify_empty_nsattrs", "getLineNumber", "test_xmlgen_basic", "test_flush_reparse_deferral_disabled", "verify_empty_attrs"], "function_calls": ["InputSource", "make_xml_file", "frozenset", "quoteattr", "XMLFilterBase", "ContentHandler", "make_parser", "xml_bytes", "SAXParseException", "test_main", "escape", "iter", "str", "XMLGenerator", "tuple", "StringIO", "parse", "parseString", "open", "run_unittest", "list", "set", "func", "unescape", "create_parser", "builtin_open", "BytesIO", "prepare_input_source", "len", "AttributesImpl", "findfile", "AttributesNSImpl", "FakePath", "xml_str"], "class_names": ["ErrorReportingTest", "StringXmlgenTest", "SaxutilsTest", "PrepareInputSourceTest", "XmlReaderTest", "XmlTestBase", "TestEntityRecorder", "XMLFilterBaseTest", "MakeParserTest", "ioclass", "BytesXmlgenTest", "DummyLocator", "AttrGatherer", "StreamWriterXmlgenTest", "XmlgenTest", "StreamReaderWriterXmlgenTest", "ExpatReaderTest", "TestDTDHandler", "TestEntityResolver", "ParseTest", "WriterXmlgenTest"], "class_method_calls": ["self.make_character_stream", "gen.endElementNS", "parser.getFeature", "source.setPublicId", "unittest.skipUnless", "self._attrs", "self.assertEqual", "attrs.getQNames", "input.setByteStream", "self._entities", "attrs.__getitem__", "self._notations", "parser.setDTDHandler", "gen.endDocument", "support.TESTFN", "gen.processingInstruction", "inpsrc.setByteStream", "self.check_parseString", "prep.getByteStream", "fileobj.closed", "input.setEncoding", "self.checkContent", "self.TestEntityResolver", "self.assertRaises", "filter.endDocument", "gen.startPrefixMapping", "gen.startElementNS", "self._lineno", "parser.parse", "parser.setEntityResolver", "gen.startElement", "self.assertTrue", "filter.ignorableWhitespace", "parser.getLineNumber", "gen.startDocument", "source.setByteStream", "gather._attrs", "source.setSystemId", "raw.getvalue", "attrs.getNames", "attrs.items", "parser.reset", "shutil.copyfile", "unittest.SkipTest", "filter.setContentHandler", "filter.startDocument", "attrs.get", "self.assertNotIn", "handler._notations", "self.TestDTDHandler", "parser._parser", "self.entities", "self.TestEntityRecorder", "parser.feed", "self.assertIsNone", "list.append", "os.path", "TEST_XMLFILE.encode", "self.verify_empty_attrs", "result.getvalue", "parser.flush", "unittest.TestCase", "self.assertFalse", "e.getSystemId", "resolver.entities", "parser.getColumnNumber", "parser.close", "pyexpat.version_info", "filter.endElement", "TEST_XMLFILE_OUT.encode", "f.write", "os.fsencode", "self.addCleanup", "self.DummyLocator", "self.xml", "support.unlink", "writer.name", "self.fname", "src.setByteStream", "src.setCharacterStream", "self.verify_empty_nsattrs", "codecs.getwriter", "support.TESTFN_UNICODE", "attrs.getValueByQName", "handler._entities", "gen.ignorableWhitespace", "parser.getPublicId", "attrs.getQNameByName", "self.assertIsNotNone", "parser.setFeature", "writer.getvalue", "attrs.getNameByQName", "stream.close", "attrs.keys", "self.make_byte_stream", "writer.close", "filter.startElement", "self.check_parse", "self.ioclass", "stream.read", "self.assertIn", "gen.endElement", "support.TESTFN_ENCODING", "self.fail", "self.data", "parser.setContentHandler", "tmp.write", "attrs.getValue", "attrs.getLength", "parser.getSystemId", "f.read", "codecs.open", "self.verify_attrs_wattr", "unittest.skipIf", "prep.getCharacterStream", "inpsrc.setCharacterStream", "self.file", "gen.endPrefixMapping", "mock.patch", "self.AttrGatherer", "self._colno", "filter.characters", "gen.characters", "attrs.values", "f.fileno", "result.closed"]}, "test_sched.py": {"libraries": ["unittest", "threading", "time", "queue", "sched", "test.support"], "function_names": ["test_enter_concurrent", "test_args_kwargs", "test_enterabs", "time", "fun", "test_enter", "__init__", "test_run_non_blocking", "test_cancel", "test_queue", "sleep", "test_priority", "test_empty", "advance", "test_cancel_concurrent"], "function_calls": ["Timer"], "class_names": ["Timer", "TestCase"], "class_method_calls": ["self._time", "support.join_thread", "q.put", "l.append", "threading.Condition", "sched.scheduler", "self.assertEqual", "q.get", "t.start", "queue.Queue", "timer.sleep", "scheduler.run", "scheduler.queue", "seq.append", "q.empty", "self._stop", "timer.advance", "timer.time", "unittest.main", "time.time", "time.sleep", "self._cond", "scheduler.empty", "scheduler.enter", "self.assertTrue", "scheduler.enterabs", "self.assertCountEqual", "scheduler.cancel", "unittest.TestCase", "self.assertFalse", "threading.Thread"]}, "test_scope.py": {"libraries": ["unittest", "test.support.check_syntax_error", "sys", "weakref", "test.support.cpython_only"], "function_names": ["testNestingThroughClass", "testLocalsFunction", "make_adder2", "dec", "testComplexDefinitions", "top", "testFreeingCell", "dig", "make_adder4", "__init__", "testUnboundLocal_AfterDel", "testLocalsClass_WithTrace", "testUnoptimizedNamespaces", "testLocalsClass", "make_adder6", "testNonLocalFunction", "make_adder", "extra", "m", "tracer", "testRecursion", "fact", "testLeaks", "testNestingGlobalNoFree", "testGlobalInParallelNestedFunctions", "testNonLocalMethod", "testUnboundLocal_AugAssign", "x", "testNonLocalGenerator", "str", "__call__", "__del__", "testListCompLocalVars", "testUnboundLocal", "f", "nest", "testScopeOfGlobalStmt", "b", "method_and_var", "inc", "testBoundAndFree", "test", "make_adder3", "testCellIsKwonlyArg", "testNestingPlusFreeRefToGlobal", "testTopIsNotSignificant", "errorInOuter", "f1", "adaptgetter", "testInteractionWithTraceFunc", "testSimpleAndRebinding", "testMixedFreevarsAndCellvars", "testNonLocalClass", "makeReturner", "testEvalExecFreeVars", "bar", "f2", "adder", "testExtraNesting", "identity", "actual_global", "returner", "testClassAndGlobal", "testNestedNonLocal", "errorInInner", "get", "testLambdas", "testClassNamespaceOverridesClosure", "makeReturner2", "testFreeVarInMethod", "h", "testNearestEnclosingScope", "g", "inner", "testEvalFreeVars", "testSimpleNesting", "make_adder5", "testCellLeak", "foo"], "function_calls": ["inc", "f8", "test", "make_adder3", "make_adder2", "getattr", "dec", "nestedcell_get", "x", "Foo", "str", "make_adder4", "locals", "range", "plus10", "ValueError", "list", "f1", "adaptgetter", "ref", "makeReturner2", "make_adder6", "Test", "h", "f", "makeReturner", "eval", "Adder", "hasattr", "nest", "g", "make_adder", "f3", "inner", "extra", "bar", "f2", "check_syntax_error", "make_adder5", "Tester", "adder", "fact", "test_func", "foo", "identity", "c", "exec", "print"], "class_names": ["TestClass", "Foo", "ScopeTests", "Test", "C", "Tester", "Special", "c", "Adder", "X"], "class_method_calls": ["t.test", "t.method_and_var", "c.inc", "self.assertEqual", "g.__code__", "inst.a", "X.y", "tester.dig", "self.assertIn", "t.actual_global", "self.fail", "c.__class__", "self.addCleanup", "self.assertNotIn", "self.assertRaises", "klass.__name__", "weakref.ref", "c.dec", "c.get", "Foo.count", "self.assertIsNone", "unittest.main", "inst.m", "sys.settrace", "s.split", "sys.gettrace", "unittest.TestCase", "self.assertFalse", "self.exc"]}, "test_script_helper.py": {"libraries": ["unittest", "sys", "unittest.mock", "subprocess", "os", "test.support.script_helper"], "function_names": ["test_assert_python_failure_raises", "test_interpreter_requires_environment_false", "setUp", "test_interpreter_requires_environment_true", "test_assert_python_ok_raises", "test_assert_python_failure", "test_assert_python_ok", "test_interpreter_requires_environment_details", "test_assert_python_not_isolated_when_env_is_required", "test_interpreter_requires_environment_with_pythonhome", "tearDown", "test_assert_python_isolated_when_env_not_required"], "function_calls": ["str", "hasattr", "RuntimeError"], "class_names": ["TestScriptHelperEnvironment", "TestScriptHelper"], "class_method_calls": ["script_helper._assert_python", "mock_popen.call_count", "sys.executable", "mock_ire_func.call_count", "self.assertEqual", "self.assertNotEqual", "script_helper.__dict__", "mock_popen.side_effect", "mock_check_call.call_args", "mock_popen.call_args", "self.assertIn", "self.assertNotIn", "self.assertRaises", "script_helper.interpreter_requires_environment", "os.environ", "error_context.exception", "mock.patch", "unittest.main", "mock_check_call.call_count", "self.assertFalse", "script_helper.assert_python_failure", "script_helper.assert_python_ok", "err.args", "mock_check_call.side_effect", "self.assertTrue", "unittest.TestCase", "subprocess.CalledProcessError"]}, "test_secrets.py": {"libraries": ["secrets", "string", "unittest"], "function_names": ["test_token_urlsafe", "test_unequal", "test_randbelow", "test_bad_types", "test_token_bytes", "test_token_defaults", "test_bool", "test_randbits", "test_choice", "test_token_hex", "test_equal"], "function_calls": ["isinstance", "len", "all", "func", "range"], "class_names": ["Token_Tests", "Compare_Digest_Tests", "Random_Tests"], "class_method_calls": ["self.assertIsInstance", "string.digits", "string.hexdigits", "self.assertEqual", "secrets.randbits", "func.__name__", "self.assertIn", "secrets.token_hex", "self.fail", "b.encode", "secrets.compare_digest", "self.subTest", "self.assertRaises", "secrets.token_bytes", "a.encode", "unittest.TestCase", "string.ascii_letters", "unittest.main", "secrets.token_urlsafe", "secrets.DEFAULT_ENTROPY", "secrets.choice", "self.assertTrue", "secrets.randbelow", "self.assertFalse"]}, "test_select.py": {"libraries": ["unittest", "select", "sys", "test.support", "os", "errno"], "function_names": ["test_select_mutated", "tearDownModule", "test_error_conditions", "test_errno", "test_returned_list_identity", "test_select", "fileno"], "function_calls": ["repr", "F", "open", "print"], "class_names": ["SelectTestCase", "F", "Almost", "Nope"], "class_method_calls": ["sys.platform", "err.errno", "sys.__stdout__", "self.assertEqual", "fp.close", "os.popen", "self.fail", "self.Almost", "p.readline", "self.assertRaises", "select.select", "unittest.skipIf", "support.verbose", "errno.EBADF", "support.reap_children", "self.assertIsNot", "unittest.main", "self.Nope", "unittest.TestCase", "fp.fileno"]}, "test_selectors.py": {"libraries": ["unittest", "time.sleep", "time.monotonic", "test.support", "random", "signal", "sys", "unittest.mock", "tempfile", "socket", "os", "selectors", "resource", "errno"], "function_names": ["test_register", "test_modify", "handler", "test_empty_select", "test_register_bad_fd", "test_unregister_after_fd_close_and_reuse", "test_select_interrupt_noraise", "test_main", "socketpair", "test_selector", "test_get_key", "test_close", "test_select_interrupt_exc", "test_modify_unregister", "test_timeout", "find_ready_matching", "make_socketpair", "test_get_map", "test_context_manager", "test_unregister_after_fd_close", "test_fileno", "test_unregister_after_socket_close", "test_register_file", "test_unregister", "test_above_fd_setsize", "test_select"], "function_calls": ["list", "test_main", "object", "len", "time", "socketpair", "min", "isinstance", "getattr", "find_ready_matching", "sleep", "range", "hasattr"], "class_names": ["KqueueSelectorTestCase", "InterruptSelect", "BaseSelectorTestCase", "DevpollSelectorTestCase", "PollSelectorTestCase", "ScalableSelectorMixIn", "DefaultSelectorTestCase", "EpollSelectorTestCase", "SelectSelectorTestCase"], "class_method_calls": ["support.requires_mac_ver", "s.get_map", "unittest.skipUnless", "self.assertEqual", "socket.SOCK_STREAM", "self.assertNotEqual", "l.getsockname", "e.errno", "self.assertGreaterEqual", "resource.getrlimit", "key2.data", "sel.register", "s.modify", "self.assertRaises", "wr2.fileno", "os.close", "resource.RLIMIT_NOFILE", "m.return_value", "rd.close", "self.assertTrue", "resource.setrlimit", "support.HOST", "s.register", "s.get_key", "self.assertIsInstance", "socket.socketpair", "unittest.mock", "cm.exception", "errno.EINVAL", "keys.values", "s.unregister", "key.fd", "signal.SIGALRM", "support.run_unittest", "key.events", "l.bind", "selectors.DefaultSelector", "wr.fileno", "unittest.TestCase", "self.assertFalse", "key2.events", "s.select", "key.data", "self.assertLess", "sys.platform", "wr.close", "selectors.SelectSelector", "os.dup2", "readers.append", "self.addCleanup", "l.accept", "errno.ENOSPC", "support.make_bad_fd", "wr.send", "selectors.EVENT_READ", "signal.alarm", "signal.signal", "selectors.SelectorKey", "c.connect", "c.getsockname", "s._map", "c.close", "rd.recv", "s.fileno", "key.fileobj", "socket.AF_INET", "rd.fileno", "bufs.append", "tempfile.NamedTemporaryFile", "self.assertIn", "writers.remove", "self.fail", "self.make_socketpair", "match.append", "unittest.skipIf", "a.close", "errno.EBADF", "rd2.fileno", "support.reap_children", "selectors.EVENT_WRITE", "s.close", "random.choice", "self.SELECTOR", "self.skipTest", "os.name", "writers.append", "mapping.__getitem__", "l.listen", "socket.socket"]}, "test_set.py": {"libraries": ["unittest", "copy", "operator", "gc", "itertools.chain", "warnings", "collections", "pickle", "weakref", "random.randrange", "random.shuffle", "collections.abc", "test.support", "itertools"], "function_names": ["test_eq_ne", "test_in", "test_remove", "test_not_in", "test_sym_difference_overlap", "test_intersection_update", "test_eq", "test_cyclical_print", "test_clear", "test_8420_set_merge", "test_difference_non_overlap", "test_setOfFrozensets", "__init__", "test_issue_37219", "test_update_empty_tuple", "test_singleton_empty_frozenset", "test_len", "test_instancesWithoutException", "test_sub", "test_difference_update_operator", "__gt__", "test_intersection_subset", "cube", "test_intersection_non_overlap", "test_intersection_superset", "test_union_method_call", "test_hash_caching", "__iter__", "test_discard_present", "test_hash", "test_symmetric_difference_update", "tearDown", "__next__", "test_binopsVsSubsets", "gooditer", "test_self_intersection", "test_difference_update", "check_repr_against_values", "test_self_difference", "test_inline_methods", "test_and", "faces", "test_sub_and_super", "test_print", "test_gc", "test_update_unit_tuple_overlap", "test_inplace_methods", "test_rich_compare", "test_intersection_update_operator", "test_pop", "test_init", "test_isdisjoint_empty", "test_symmetric_difference", "test_self_symmetric_difference", "test_difference_overlap", "R", "test_uniquification", "test_isub", "test_changingSizeWhileIterating", "test_do_not_rehash_dict_keys", "test_empty_symmetric_difference", "test_cyclical_repr", "test_ixor", "test_commutativity", "test_merge_and_mutate", "zf_range", "test_weakref", "test_c_api", "test_remove_present", "test_sym_difference_update", "test_sym_difference", "test_constructor_identity", "test_sym_difference_superset", "test_intersection_empty", "f", "test_exclusion", "test_union_subset", "test_remove_absent", "test_sym_difference_non_overlap", "test_remove_keyerror_unpacking", "test_isdisjoint_overlap", "test_add", "test_set_literal_insertion_order", "test_set_literal", "__getitem__", "test_inplace_on_self", "test_empty_union", "setUp", "test_union_non_overlap", "test_isdisjoint_subset", "test_difference_superset", "test_summations", "__deepcopy__", "test_xor", "test_equivalent_equality", "__repr__", "test_union", "test_union_overlap", "record", "test_empty_difference_rev", "test_deepcopy", "test_empty_isdisjoint", "test_iand", "test_empty_intersection", "test_ior", "test_intersection", "test_length", "test_new_or_init", "test_subclass_with_custom_hash", "test_ge_gt_le_lt", "test_difference", "check_pass_thru", "test_union_superset", "test_iter_and_mutate", "test_container_iterator", "test_isdisjoint_superset", "test_update_unit_tuple_non_overlap", "test_copy", "test_contains", "test_add_present", "test_remove_until_empty", "test_union_empty", "test_hash_effectiveness", "test_pickling", "test_self_equality", "test_empty_difference", "__le__", "test_intersection_method_call", "test_equality", "test_add_absent", "test_or", "test_self_union", "test_sym_difference_method_call", "test_repr", "__eq__", "gen", "test_badcmp", "test_sym_difference_subset", "linegraph", "__ge__", "test_update", "test_free_after_iterating", "__lt__", "test_constructor", "test_cube", "test_difference_method_call", "test_intersection_overlap", "test_keywords_in_subclass", "test_sym_difference_update_operator", "baditer", "test_set_literal_evaluation_order", "test_discard_absent", "test_iterator_pickling", "test_deep_copy", "powerset", "test_remove_keyerror_set", "L", "test_self_isdisjoint", "test_instanceWithException", "test_add_until_full", "test_issubset", "test_discard", "test_nested_empty_constructor", "test_iteration", "test_cuboctahedron", "__hash__", "test_frozen_as_dictkey", "test_isdisjoint_non_overlap", "test_update_operator", "test_difference_subset", "test_isdisjoint"], "function_calls": ["frozenset", "sorted", "meth", "getattr", "reversed", "ReprWrapper", "shuffle", "Tracer", "N", "id", "gen", "addhashvalue", "bad_eq", "linegraph", "record", "repr", "R", "isinstance", "iter", "str", "A", "locals", "G", "hash", "dict", "open", "randrange", "nums", "range", "X", "BadCmp", "list", "Ig", "method", "check_pass_thru", "ref", "cube", "C", "baditer", "set", "int", "type", "next", "powerset", "SetSubclassWithKeywordArgs", "TestRichSetCompare", "eval", "f", "Frozenset", "hasattr", "gooditer", "bad_dict_clear", "len", "g", "faces", "H", "sum", "chain", "map", "cons", "E"], "class_names": ["TestGraphs", "TestSet", "TestOnlySetsInBinaryOps", "TestMutate", "TestBasicOpsTriple", "TestCopyingTuple", "ReprWrapper", "TestBasicOpsBytes", "N", "TestBasicOpsString", "Tracer", "TestExceptionPropagation", "bad_eq", "FrozenSetSubclass", "SetSubclass", "TestUpdateOps", "TestBasicOps", "TestOnlySetsString", "PassThru", "TestCopyingSingleton", "TestOnlySetsDict", "TestJointOps", "G", "A", "E", "TestSubsetEqualNonEmpty", "TestOnlySetsTuple", "X", "BadCmp", "TestCopyingTriple", "Ig", "S", "TestBasicOpsTuple", "TestSubsetEqualEmpty", "TestOnlySetsNumeric", "C", "TestSubsetPartial", "TestIdentities", "TestSetOfSets", "TestBasicOpsEmpty", "HashCountingInt", "TestCopyingEmpty", "SetSubclassWithKeywordArgs", "TestSubsetEmptyNonEmpty", "TestCopyingNested", "I", "TestVariousIteratorArgs", "TestRichSetCompare", "bad_dict_clear", "TestFrozenSetSubclass", "TestCopying", "TestSetSubclassWithKeywordArgs", "TestOnlySetsOperator", "TestSubsetNonOverlap", "TestWeirdBugs", "TestSubsets", "TestSetSubclass", "TestBasicOpsSingleton", "TestBinaryOps", "H", "TestOnlySetsGenerator", "TestBasicOpsMixedStringBytes", "TestFrozenSet"], "class_method_calls": ["s.union", "unittest.skipUnless", "self.assertEqual", "TestSubsets.reverse", "self.assertNotEqual", "s.difference", "support.TESTFN", "t.value", "elem.set", "s.add", "s.__contains__", "self.case", "s.intersection", "collections.defaultdict", "self.assertRaises", "self._warning_filters", "self.set", "self.values", "set2.clear", "self.left", "f.remove", "set1.update", "support.check_warnings", "pickle.HIGHEST_PROTOCOL", "elem.hash_count", "fo.read", "self.a", "text.endswith", "self.length", "self.i", "obj.x", "self.otherword", "self.right", "itertools.combinations", "self.assertTrue", "empty_set.isdisjoint", "f.add", "self.assertIsInstance", "outer.discard", "myobj.ge_called", "self.lt_called", "setiter.__length_hint__", "set.__init__", "cuboctahedron.values", "newt.value", "dict.fromkeys", "G.items", "s.__init__", "other.clear", "self.assertNotIn", "self.basetype", "self.le_called", "dup.x", "weakref.proxy", "myobj.lt_called", "dict2.clear", "copy.deepcopy", "pickle.loads", "hashvalues.add", "self.repr", "w.value", "myobj.le_called", "self.gt_called", "result.sort", "gc.collect", "unittest.TestCase", "self.assertFalse", "x.union", "self.value", "outer.add", "sorted_repr_values.sort", "g.values", "int.__hash__", "self.cases", "outer.remove", "text.startswith", "self.thetype", "events.append", "s.isdisjoint", "self.hash_count", "s.remove", "warnings.simplefilter", "TestSubsets.case2method", "support.unlink", "s.difference_update", "self.assertGreater", "self.seqn", "self.word", "fo.write", "unittest.main", "s.update", "self.other", "self.ge_called", "s.copy", "e.args", "self.check_repr_against_values", "tmp.add", "self.otherIsIterable", "support.check_free_after_iterating", "fo.close", "nums.append", "operator.add", "outer.pop", "self.assertIn", "self.fail", "set1.symmetric_difference_update", "s.intersection_update", "self.s", "self.b", "s.clear", "self.dup", "results.add", "elem.sub", "s.symmetric_difference", "s1.isdisjoint", "myobj.gt_called", "weakref.ref", "s.discard", "collections.abc", "s.symmetric_difference_update", "s.pop", "self.d", "f.discard", "pickle.dumps", "elem.cycle", "self.letters"]}, "test_setcomps.py": {"libraries": ["sys", "test.support", "test.test_setcomps", "gc"], "function_names": ["test_main"], "function_calls": ["len", "test_main", "hasattr", "range", "print"], "class_names": [], "class_method_calls": ["support.run_doctest", "sys.gettotalrefcount", "gc.collect"]}, "test_shelve.py": {"libraries": ["unittest", "collections.abc.MutableMapping", "shelve", "test.test_dbm.dbm_iterator", "test.mapping_tests", "test.support", "glob"], "function_names": ["iterkeys", "keys", "test_proto2_file_shelf", "L1", "test_in_memory_shelf", "test_main", "copy", "test_close", "__init__", "_reference", "_empty_mapping", "test_writeback_also_writes_immediately", "__len__", "test_with", "test_mutable_entry", "test_ascii_file_shelf", "test_binary_file_shelf", "test_default_protocol", "tearDown", "__setitem__", "__delitem__", "test_keyencoding", "__getitem__"], "function_calls": ["L1", "list", "len", "test_main", "str", "dbm_iterator", "byteskeydict"], "class_names": ["TestBinaryFileShelve", "TestProto2MemShelve", "TestAsciiFileShelve", "TestShelveBase", "TestProto2FileShelve", "TestCase", "TestAsciiMemShelve", "TestBinaryMemShelve", "byteskeydict"], "class_method_calls": ["db.close", "mapping_tests.BasicTestMappingProtocol", "key.encode", "self.assertEqual", "self.assertNotEqual", "d2.items", "self.assertIn", "self.fail", "s.decode", "shelve.Shelf", "self.iterkeys", "glob.glob", "self.assertRaises", "self.fn", "k.encode", "support.unlink", "s._protocol", "support.run_unittest", "shelve.open", "self._in_mem", "self.d", "s.close", "d1.items", "s.__setitem__", "self._args", "self.counter", "unittest.TestCase", "self._db"]}, "test_shlex.py": {"libraries": ["unittest", "io", "shlex", "string", "itertools"], "function_names": ["testSyntaxSplitSemicolon", "testSyntaxSplitRedirect", "setUp", "testJoinRoundtrip", "testPunctuationWithWhitespaceSplit", "testSyntaxSplitAmpersandAndPipe", "testTokenTypes", "splitTest", "testQuote", "oldSplit", "testPunctuationInWordChars", "testSyntaxSplitParen", "testSyntaxSplitCustom", "testJoin", "testUnicodeHandling", "testPunctuationCharsReadOnly", "testPunctuationWithPosix", "testSplitPosix", "testCompat", "testEmptyStringHandling"], "function_calls": ["list", "len", "getattr", "dir", "delattr", "range"], "class_names": ["ShlexTest"], "class_method_calls": ["itertools.product", "self.posix_data", "string.digits", "posix_data.splitlines", "s.punctuation_chars", "self.assertEqual", "shlex.split", "self.data", "self.assertNotIn", "io.StringIO", "methname.startswith", "lex.get_token", "self.subTest", "s.whitespace_split", "self.assertRaises", "data.splitlines", "self.splitTest", "s.eof", "shlex.shlex", "shlex.quote", "string.ascii_letters", "unittest.main", "observed.append", "s.get_token", "shlex_instance.punctuation_chars", "shlex.join", "s.wordchars", "self.oldSplit", "unittest.TestCase", "ret.append", "x.split"]}, "test_shutil.py": {"libraries": ["shutil.register_unpack_format", "shutil.RegistryError", "pwd", "contextlib", "random", "_winapi", "shutil.get_archive_formats", "unittest.mock", "subprocess", "test.support", "string", "unittest", "shutil.make_archive", "io", "shutil.unregister_unpack_format", "zipfile", "pathlib", "test.support.FakePath", "os", "functools", "tarfile", "shutil._GiveupOnFastCopy", "grp", "shutil", "tempfile", "shutil.get_unpack_formats", "posix", "shutil.unregister_archive_format", "stat", "errno", "shutil.unpack_archive", "test.support.TESTFN", "os.path", "shutil.Error", "shutil.SameFileError", "shutil.register_archive_format", "sys"], "function_names": ["read_file", "test_w_dest_close_fails", "zerocopy_fun", "test_bad_environ", "_boo", "test_copystat_handles_harmless_chflags_errors", "test_copytree_dangling_symlinks", "test_copytree_retains_permissions", "mkdtemp", "test_zipfile_vs_zip", "check_unpack_archive_with_converter", "test_move_file", "test_file_offset", "test_copy2_xattr", "test_move_file_symlink", "test_rmtree_works_on_bytes", "test_exception_on_first_call", "test_unpack_archive_gztar", "_ignore", "__init__", "check_unpack_archive", "test_tarfile_root_owner", "test_nonexistent_file", "test_regular_copy", "test_non_existent_src", "test_cwd", "test_existing_file_inside_dest_dir", "test_make_archive_owner_group", "test_non_regular_file_dst", "tearDown", "test_copy_return_value", "test_environ_path_missing", "test_basic", "test_copy2", "test_relative_path", "test_copytree_winerror", "test_fallback", "check_args_to_onerror", "test_rmtree_on_junction", "_copy_file", "__exit__", "test_move_dir_permission_denied", "test_relative_cmd", "test_make_archive", "test_register_archive_format", "test_does_not_crash", "make_chflags_raiser", "onerror", "sendfile", "test_move_file_to_dir_other_fs", "test_non_matching_mode", "test_copystat_symlinks", "test_move_file_special_function", "test_stty_match", "test_move_dir_to_dir", "test_move_dir_special_function", "test_rmtree_works_on_symlinks", "test_blocksize_arg", "test_content", "test_move_file_to_dir", "test_file_not_closed", "test_environ_path_cwd", "test_unpack_archive_zip", "test_copyfile_same_file", "test_same_file", "test_make_tarball", "test_environ_path_empty", "test_move_as_rename_return_value", "test_dont_move_dir_in_itself", "test_copytree_named_pipe", "test_win_impl", "test_move_dir_symlink", "test_unzip_zipfile", "test_empty_path_no_PATH", "test_rmtree_fails_on_junctions", "test_copy2_symlinks", "_breaks", "test_copytree_subdirectory", "test_rmtree_errors", "test_copytree_custom_copy_function", "test_rmtree_does_not_choke_on_failing_lstat", "test_rmtree_uses_safe_fd_version_if_available", "_set_shutil_open", "test_small_chunks", "test_module_all_attribute", "setUp", "test_copyxattr_symlinks", "test_tarfile_vs_tar", "_create_files", "_raise_on_src", "test_environ_path", "write_test_file", "supports_file2file_sendfile", "_check_move_file", "test_dont_copy_file_onto_symlink_to_itself", "test_empty_path", "test_move_dir", "test_os_environ_first", "test_move_dir_other_fs", "_filter", "test_chown", "test_copytree_symlinks", "test_copymode_symlink_to_symlink_wo_lchmod", "test_pathext_with_empty_str", "test_copyfile_return_value", "test_move_file_other_fs", "_open", "_raise_on_user_foo", "test_pathext_checking", "test_unhandled_exception", "chunks", "_raiser", "setUpClass", "test_big_chunk", "test_on_error", "test_filesystem_full", "raiser", "_copy", "test_copytree_special_func", "test_unpack_archive_xztar", "test_file2file_not_supported", "test_copy", "test_make_zipfile", "test_w_dest_open_fails", "test_copymode_symlink_to_symlink", "test_dont_copy_file_onto_link_to_itself", "wrap", "test_unpack_archive_bztar", "test_w_source_close_fails", "test_copyfile_named_pipe", "test_non_regular_file_src", "check_unpack_tarball", "test_disk_usage", "reset", "test_move_dir_sep_to_dir", "test_move_dangling_symlink", "_fake_rename", "test_rmtree_dont_delete_file", "test_move_dir_to_dir_other_fs", "assert_files_eq", "test_move_return_value", "test_unpack_registry", "check_chown", "rlistdir", "test_make_tarfile_in_curdir", "test_move_dir_altsep_to_dir", "test_absolute_cmd", "_maxdataOK", "test_cant_get_size", "test_copy_symlinks", "test_w_source_open_fails", "test_copyfile_symlinks", "test_rmtree_on_symlink", "test_copytree_symlink_dir", "__enter__", "test_copytree_dirs_exist_ok", "test_exception_on_second_call", "test_unpack_archive_tar", "test_copytree_arg_types_of_ignore", "test_make_zipfile_in_curdir", "test_move_dir_caseinsensitive", "test_copytree_simple", "_chflags_raiser", "test_copytree_return_value", "test_make_archive_cwd", "test_move_file_symlink_to_dir", "test_destinsrc_false_positive", "test_copyxattr", "mock_rename", "test_destinsrc_false_negative", "_check_move_dir", "test_copytree_with_exclude", "write_file", "tearDownClass", "custom_cpfun", "read", "test_pathext", "test_rmtree_works_on_junctions", "test_copymode_follow_symlinks", "_tarinfo", "test_empty_file", "test_rmtree_fails_on_symlink", "get_files"], "function_calls": ["read_file", "min", "fn", "sorted", "getattr", "unregister_archive_format", "check_chown", "make_archive", "abs", "rlistdir", "write_test_file", "supports_file2file_sendfile", "_maxdataOK", "make_chflags_raiser", "RuntimeError", "isinstance", "issubclass", "super", "join", "register_unpack_format", "tuple", "register_archive_format", "orig_lstat", "converter", "open", "range", "list", "chunks", "method", "set", "write_file", "int", "orig_listxattr", "func", "OSError", "get_archive_formats", "hasattr", "len", "orig_setxattr", "unpack_archive", "unregister_unpack_format", "orig_sendfile", "NotImplementedError", "exists", "get_unpack_formats", "PermissionError"], "class_names": ["TestMove", "TestShutil", "TestWhichBytes", "_ZeroCopyFileTest", "TestWhich", "TermsizeTests", "TestZeroCopySendfile", "Faux", "PublicAPITests", "Called", "TestZeroCopyMACOS", "TestCopyFile", "TestCopyFileObj"], "class_method_calls": ["os.mkdir", "moved.append", "os.getuid", "os.chflags", "tempfile.mktemp", "os.scandir", "sys.executable", "unittest.skipUnless", "shutil.chown", "self.assertEqual", "os.mkfifo", "self.assertNotEqual", "env.pop", "stat.S_IRWXU", "shutil.which", "os.DirEntry", "support.create_empty_file", "self.assertGreaterEqual", "tar.getnames", "s.st_uid", "tarfile.is_tarfile", "self.assertIs", "exc.output", "self.src_dir", "ex.errno", "self.FILEDATA", "hdrs.split", "os.W_OK", "support.skip_unless_symlink", "shutil.__all__", "shutil._fastcopy_fcopyfile", "copied.append", "self.assertRaises", "os.close", "os.open", "shutil.rmtree", "destfile._entered", "os.lchflags", "src.tell", "shutil._USE_CP_SENDFILE", "shutil.disk_usage", "string.ascii_letters", "self._copy_file", "grp.getgrgid", "shutil.copy2", "support.skip_unless_xattr", "zf.namelist", "size.columns", "invokations.append", "temp_filexyz.close", "shutil.get_terminal_size", "src_link_stat.st_flags", "shutil.SameFileError", "self.curdir", "os.readlink", "errors.append", "self.assertTrue", "self._set_shutil_open", "self.assertCountEqual", "srcfile._entered", "self._raise_in_exit", "self.assertIsInstance", "os.setxattr", "support.requires_zlib", "dst.name", "fsrc.read", "os.sendfile", "self._entered", "os.makedirs", "stat.UF_NODUMP", "usage.used", "unittest.mock", "src_stat.st_flags", "functools.wraps", "f.name", "os.symlink", "cm.exception", "self.src_file", "self._exited_with", "os.getcwd", "shutil.SpecialFileError", "errno.ENOTSUP", "archive.close", "tempfile.mkdtemp", "shutil.copyfile", "os.supports_fd", "shutil.ignore_patterns", "self.env_path", "self.Faux", "errno.EINVAL", "self.assertNotIn", "self.test_move_dir", "subprocess.STDOUT", "shutil.move", "src_stat.st_mode", "file1_stat.st_mode", "stat.S_IRWXO", "zipfile.ZipFile", "dst.closed", "os.rmdir", "self.reset", "dst.fileno", "support.swap_attr", "shutil.copytree", "os.curdir", "archive.getmembers", "res.append", "fp.read", "contextlib.contextmanager", "support.requires_lzma", "self.assertIsNone", "os_helper.create_empty_file", "sys.maxsize", "os.path", "self.child_file_path", "shutil.Error", "self.PATCHPOINT", "msg.format", "stat.S_IEXEC", "os.supports_dir_fd", "subprocess.DEVNULL", "unittest.TestCase", "self.dir", "self.assertFalse", "os.devnull", "support.change_cwd", "m.call_args", "sys.platform", "self.temp_dir", "os.pathsep", "cls.FILESIZE", "self.zerocopy_fun", "self.dst_dir", "os.lchmod", "dst_stat.st_mode", "support.check_no_warnings", "actual.startswith", "zipfile.is_zipfile", "os.geteuid", "os.getgid", "stat.S_IXUSR", "size.lines", "self.assertLessEqual", "src_stat.st_atime", "m.called", "os.isatty", "shutil._destinsrc", "fp.write", "os.fsencode", "f.write", "os.utime", "target_api.append", "os.lstat", "self.addCleanup", "self.check_args_to_onerror", "stat.S_IRWXG", "errno.ENOTSOCK", "self._delete", "subprocess.check_call", "errno.ENOSPC", "shutil.copystat", "os.link", "dst_link_stat.st_mode", "src.fileno", "self.check_unpack_archive", "shutil._copyxattr", "support.unlink", "posix._COPYFILE_DATA", "_winapi.CreateJunction", "flag.append", "self.tearDownClass", "TestWhich.setUp", "os_helper.rmtree", "os.access", "self.tempdirs", "self.assertGreater", "src.closed", "src_stat.st_mtime", "member.gid", "unittest.main", "self.check_unpack_tarball", "shutil.copy", "self.test_move_dir_to_dir", "self.mkdtemp", "self.check_unpack_archive_with_converter", "self._raised", "dst.seek", "srcfile._exited_with", "self.FILESIZE", "shutil._use_fd_functions", "self.test_move_file", "member.uid", "e.args", "os.listdir", "os.chmod", "shutil._fastcopy_sendfile", "self.get_files", "self.ext", "destfile._raised", "shutil.copyfileobj", "os.getxattr", "f.close", "errno.EOPNOTSUPP", "temp_filexyz.name", "src_link_stat.st_mode", "self.test_move_file_to_dir", "self.dst_file", "self.setUpClass", "subprocess.getoutput", "s.st_gid", "os.listxattr", "os.rename", "self.tearDown", "io.BytesIO", "errno.EPERM", "shutil._rmtree_safe_fd", "tempfile.NamedTemporaryFile", "stat.SF_IMMUTABLE", "dst_link_stat.st_flags", "dst.read", "path.split", "stat.UF_OPAQUE", "shutil.open", "dst.tell", "self.assertIn", "support.rmtree", "self.fail", "tempfile.mkstemp", "expected.remove", "fdst.read", "self.setUp", "usage.free", "f.read", "os.remove", "usage.total", "srcfile._raised", "pwd.getpwuid", "self._suppress_at_exit", "unittest.skipIf", "tarfile.open", "pathlib.Path", "self._create_files", "self.file", "errno.EBADF", "shutil.ReadError", "tf.getnames", "self.errorState", "self._check_move_file", "self.assert_files_eq", "os.unlink", "subprocess.check_output", "self.child_dir_path", "self._check_move_dir", "names.sort", "mock.st_size", "dst_stat.st_flags", "cls.FILEDATA", "random.choice", "os.supports_follow_symlinks", "stat.S_IREAD", "self.skipTest", "os.name", "subprocess.CalledProcessError", "os.stat", "self._tarinfo", "support.EnvironmentVarGuard", "support.requires_bz2", "shutil.copymode", "self.temp_file", "mock_patch.side_effect", "file2_stat.st_mode", "sys.__stdout__"]}, "test_signal.py": {"libraries": ["unittest", "_testcapi", "threading", "time", "test.support", "test.support.script_helper.spawn_python", "random", "signal", "sys", "subprocess", "statistics", "test.support.script_helper.assert_python_ok", "socket", "os", "errno"], "function_names": ["test_wakeup_fd_during", "test_set_wakeup_fd_result", "test_invalid_fd", "measure_itimer_resolution", "second_handler", "test_warn_on_full_buffer", "test_out_of_range_signal_number_raises_error", "trivial_signal_handler", "test_invalid_socket", "setUp", "sig_alrm", "test_siginterrupt_off", "test_itimer_virtual", "test_setitimer_tiny", "test_pthread_sigmask_arguments", "test_stress_modifying_handlers", "test_keyboard_interrupt_exit_code", "test_sigpending", "test_sigint", "test_setting_signal_handler_to_none_raises_error", "test_valid_signals", "test_signum", "test_getsignal", "test_itimer_exc", "test_set_wakeup_fd_blocking", "test_sigwait", "test_stress_delivery_dependent", "custom_handler", "handler", "test_sigwaitinfo", "test_sigwait_thread", "test_pthread_kill", "test_invalid_argument", "test_itimer_real", "cycle_handlers", "decide_itimer_count", "test_enums", "test_pthread_sigmask", "sig_vtalrm", "test_handler", "test_send_error", "test_invalid_call", "test_siginterrupt_on", "test_sigtimedwait_poll", "test_set_wakeup_fd_socket_result", "test_sigpending_empty", "tearDown", "first_handler", "test_pthread_sigmask_valid_signals", "test_interprocess_signal", "readpipe_interrupted", "test_sigtimedwait_timeout", "tearDownModule", "test_wakeup_write_error", "test_pending", "test_stress_delivery_simultaneous", "set_interrupts", "test_pthread_kill_main_thread", "test_issue9324", "sig_prof", "test_wakeup_fd_early", "test_without_siginterrupt", "wait_helper", "setsig", "test_strsignal", "test_socket", "test_itimer_prof", "check_wakeup", "test_sigtimedwait_negative_timeout", "test_sigtimedwait"], "function_calls": ["len", "assert_python_ok", "handler", "getattr", "str", "set", "dir", "tuple", "pow", "cycle_handlers", "Exception", "print", "spawn_python", "map", "range", "hasattr"], "class_names": ["WindowsSignalTests", "WakeupFDTests", "StressTest", "PosixTests", "PendingSignalsTests", "WakeupSignalTests", "SiginterruptTest", "ItimerTest", "RaiseSignalTest", "GenericTests", "WakeupSocketSignalTests"], "class_method_calls": ["signal.Handlers", "os.pipe", "signal.SIGFPE", "sys.executable", "unittest.skipUnless", "os.write", "self.assertEqual", "times.append", "os.getpid", "e.errno", "self.assertGreaterEqual", "cm.unraisable", "self.sig_prof", "t.start", "self.assertRaises", "support.catch_unraisable_exception", "os.close", "signal.SIGPROF", "signal.raise_signal", "sock1.fileno", "sigs.append", "signal.SIGUSR2", "self.check_wakeup", "signal.SIGABRT", "random.random", "self.itimer", "self.assertTrue", "self.sig_vtalrm", "self.assertIsInstance", "sock1.setblocking", "self.measure_itimer_resolution", "process.wait", "self.readpipe_interrupted", "signal.SIG_SETMASK", "signal.pause", "cm.exception", "signal.SIGHUP", "self.wait_helper", "self.setsig", "signal.setitimer", "signal.getitimer", "signal.ITIMER_REAL", "errno.EINVAL", "self.sig_alrm", "self.assertNotIn", "signal.NSIG", "signal.getsignal", "self.hndl_called", "signal.SIGALRM", "signal.ITIMER_VIRTUAL", "signal.SIGVTALRM", "signal.SIGUSR1", "signal.SIGINT", "process.stderr", "os.path", "signal.SIGSEGV", "self.decide_itimer_count", "sock.close", "process.communicate", "unittest.TestCase", "self.assertFalse", "checked.add", "signal.Sigmasks", "self.trivial_signal_handler", "time.monotonic", "self.assertLess", "sys.platform", "signal.SIG_UNBLOCK", "sock2.close", "sock.fileno", "os.set_blocking", "self.assertLessEqual", "process.stdout", "signal.SIGILL", "sock1.close", "self.addCleanup", "name.startswith", "process.kill", "support.make_bad_fd", "signal.pthread_sigmask", "signal.signal", "statistics.median", "subprocess.PIPE", "signal.SIGBREAK", "signal.sigpending", "self.assertGreater", "unittest.main", "signal.SIG_BLOCK", "signal.valid_signals", "signal.SIGTERM", "os.kill", "signal.SIG_IGN", "signal.sigtimedwait", "self.assertIn", "t.join", "self.fail", "subprocess.TimeoutExpired", "signal.set_wakeup_fd", "unittest.skipIf", "self.old_alarm", "process.returncode", "support.verbose", "subprocess.run", "signal.ItimerError", "test.strip", "support.reap_children", "time.perf_counter", "signal.ITIMER_PROF", "time.sleep", "sock2.fileno", "signal.strsignal", "signal.Signals", "self.skipTest", "self.hndl_count", "os.name", "sock2.setblocking", "threading.Thread", "socket.socket"]}, "test_site.py": {"libraries": ["urllib.request", "copy.copy", "_winapi", "unittest.mock", "subprocess", "test.support", "sysconfig", "unittest", "site", "encodings", "locale", "os", "builtins", "re", "shutil", "tempfile", "urllib.error", "stat", "glob", "test.support.captured_stderr", "test.support.TESTFN", "test.support.change_cwd", "sys", "sitecustomize", "test.support.EnvironmentVarGuard"], "function_names": ["make_pth", "test_init_pathinfo", "setUp", "test_no_duplicate_paths", "test_setting_copyright", "test_setting_quit", "test_setting_help", "test_addpackage_import_bad_syntax", "test_getsitepackages", "test_addpackage_import_bad_exec", "pth_file_tests", "test_addpackage_import_bad_pth_file", "test_addsitedir_hidden_flags", "setUpModule", "test_addsitedir_hidden_file_attribute", "__init__", "create", "test_get_path", "test_addsitedir", "test_startup_interactivehook_isolated_explicit", "test_underpth_file", "_create_underpth_exe", "test_underpth_dll_file", "test_makepath", "test_no_home_directory", "test_addpackage", "test_startup_imports", "test_startup_interactivehook_isolated", "test_aliasing_mbcs", "tearDown", "test_startup_interactivehook", "test_underpth_nosite_file", "test_add_build_dir", "cleanup", "tearDownModule", "test_license_exists_at_url", "test_sitecustomize_executed", "test_getuserbase", "test_addsitedir_dotfile", "test_s_option", "test_abs_paths_cached_None", "_calc_sys_path_for_underpth_nosite", "test_getusersitepackages", "test__getuserbase"], "function_calls": ["captured_stderr", "PthFile", "isinstance", "len", "copy", "EnvironmentVarGuard", "set", "open", "print", "repr", "eval", "range", "hasattr"], "class_names": ["PthFile", "_pthFileTests", "StartupImportTests", "ImportSideEffectTests", "HelperFunctionsTests"], "class_method_calls": ["self.bad_dir_path", "os.mkdir", "site.getuserbase", "os.chflags", "sys.executable", "unittest.skipUnless", "self.assertEqual", "site.getusersitepackages", "self.base_dir", "site._get_path", "encodings.aliases", "pth_file.bad_dir_path", "self.good_dir_path", "site.getsitepackages", "pth_file.write", "pth_file.base_dir", "pth_file.imported", "os.sep", "pth_file.create", "popen.returncode", "self._create_underpth_exe", "urllib.error", "encodings.__file__", "self._calc_sys_path_for_underpth_nosite", "self.imported", "site.PREFIXES", "glob.escape", "self.assertTrue", "stat.UF_HIDDEN", "os.makedirs", "re.escape", "self.old_base", "self.bad_dirname", "user_base.startswith", "e.code", "tempfile.mkdtemp", "unittest.SkipTest", "sysconfig._getuserbase", "sys._framework", "self.pth_file_tests", "st.st_flags", "self.old_site", "subprocess.Popen", "self.assertNotIn", "sysconfig._CONFIG_VARS", "user_site.startswith", "err_out.getvalue", "glob.glob", "site.addusersitepackages", "os.rmdir", "output.rstrip", "self.sys_path", "self.assertRegex", "support.swap_attr", "unittest.skip", "self.assertIsNone", "os.getenv", "self.filename", "os.path", "site._getuserbase", "self.imported_module", "sys.version_info", "unittest.TestCase", "self.assertFalse", "sys.dllhandle", "sys.platform", "data.getcode", "sys.flags", "site.ENABLE_USER_SITE", "site.addpackage", "test.support", "subprocess.call", "self.addCleanup", "sys.builtin_module_names", "subprocess.check_call", "mock_isdir.assert_called_once_with", "self.file_path", "self.original_vars", "_winapi.GetModuleFileName", "license._Printer__data", "site.abs_paths", "site.removeduppaths", "subprocess.PIPE", "site.USER_BASE", "os.environ", "unittest.main", "shutil.copy", "locale.getdefaultlocale", "sys_path.append", "pth_file.file_path", "FILE.close", "self.maxDiff", "seen_paths.add", "urllib.request", "self.old_vars", "popen.communicate", "sys.modules", "site.USER_SITE", "pth_file.good_dir_path", "self.make_pth", "self.assertIn", "self.fail", "self.old_prefixes", "os.remove", "modules.intersection", "site._init_pathinfo", "mock_addsitedir.assert_not_called", "mock.patch", "subprocess.check_output", "pth_file.filename", "sys.path", "site.addsitedir", "self.skipTest", "os.name", "os.stat", "pth_file.cleanup", "sysconfig.get_path", "site.makepath", "self.good_dirname"]}, "test_slice.py": {"libraries": ["unittest", "operator", "sys", "pickle.dumps", "weakref", "pickle.loads", "test.support", "itertools"], "function_names": ["test_members", "test_cmp", "check_indices", "__setitem__", "test_cycle", "test_pickle", "test_setslice_without_getslice", "evaluate_slice_index", "__init__", "test_indices", "test_repr", "test_constructor", "test_hash", "__eq__", "__index__", "slice_indices"], "function_calls": ["min", "evaluate_slice_index", "w", "dumps", "AnyClass", "id", "repr", "loads", "MyIndexable", "range", "X", "ValueError", "BadCmp", "list", "slice", "hasattr", "max", "myobj", "TypeError", "slice_indices"], "class_names": ["BadCmp", "X", "myobj", "Exc", "AnyClass", "MyIndexable", "SliceTest"], "class_method_calls": ["itertools.product", "s.stop", "self.value", "self.assertEqual", "support.gc_collect", "self.assertNotEqual", "slice.step", "t.indices", "slice.indices", "self.check_indices", "operator.index", "slice.stop", "tmp.append", "slice.start", "self.assertRaises", "weakref.ref", "self.assertIsNone", "s.indices", "unittest.main", "sys.maxsize", "o.s", "s.step", "self.assertTrue", "unittest.TestCase", "s.start"]}, "test_smtpd.py": {"libraries": ["unittest", "test.mock_socket", "io", "asyncore", "socket", "textwrap", "smtpd", "test.support"], "function_names": ["test_EHLO_HELO_duplicate", "test_HELO", "test_EHLO_duplicate", "test_bad_state", "test_unknown_command", "test_with_decode_data_true", "test_NOOP", "test_MAIL_quoted_localpart_with_size", "test_no_HELO_RCPT", "test_broken_connect", "test_MAIL_allows_space_after_colon", "test_HELO_QUIT", "__init__", "test_nested_MAIL", "test_MAIL_command_limit_extended_with_SIZE_and_SMTPUTF8", "test_data_longer_than_default_data_size_limit", "test_QUIT", "tearDown", "test_MAIL_invalid_size_parameter", "test_MAIL_quoted_localpart_no_angles", "test_server_accept", "test_decode_data_and_enable_SMTPUTF8_raises", "test_MAIL_quoted_localpart_with_size_no_angles", "test_MAIL_chevrons", "test_VRFY_syntax", "test_need_RCPT", "test_DATA_syntax", "test_MAIL_command_accepts_SMTPUTF8_when_announced", "test_process_message_unimplemented", "test_RSET_syntax", "write_line", "test_EXPN_not_implemented", "test_data_limit_dialog_too_much_data", "test_with_decode_data_false", "test_HELO_parameter_rejected_when_extensions_not_enabled", "test_multiple_emails_with_extended_command_length", "test_command_too_long", "test_process_smtputf8_message", "test_missing_data", "test_EHLO", "test_data_transparency_section_4_5_2", "test_MAIL_command_rejects_SMTPUTF8_by_default", "test_process_message_with_enable_SMTPUTF8_true", "setUp", "listen", "test_MAIL_empty_chevrons", "test_MAIL_RCPT_unknown_parameters", "test_socket_uses_IPv6", "test_utf8_data", "test_HELO_bad_syntax", "test_HELO_RSET", "test_EHLO_bad_syntax", "test_HELO_NOOP", "test_MAIL_size_parameter", "process_message", "test_RCPT_syntax_EHLO", "test_ascii_data", "test_MAIL_size_parameter_larger_than_default_data_size_limit", "test_HELP_command_unknown", "test_params_rejected", "test_RCPT_lowercase_to_OK", "test_RCPT_syntax_HELO", "test_nothing_accepted", "test_extended_MAIL_allows_space_after_colon", "test_HELO_EHLO_duplicate", "test_MAIL_syntax_EHLO", "send_data", "test_MAIL_command_limit_extended_with_SIZE", "test_no_HELO_DATA", "test_MAIL_syntax_HELO", "test_RSET", "test_NOOP_bad_syntax", "test_process_message_with_decode_data_true", "test_HELO_duplicate", "test_HELP_command", "test_multiple_RCPT", "test_data_dialog", "test_QUIT_arg_ignored", "test_process_message_with_decode_data_false", "test__all__", "test_attribute_deprecations", "test_socket_uses_IPv4", "test_HELP", "test_VRFY", "test_no_HELO_MAIL", "test_manual_status", "test_process_SMTPUTF8_message_with_enable_SMTPUTF8_true", "test_data_limit_dialog", "test_need_MAIL", "test_MAIL_quoted_localpart", "test_with_enable_smtputf8_true", "test_MAIL_missing_address"], "function_calls": ["len", "write_line", "DummyDispatcherBroken", "DummyServer"], "class_names": ["SMTPDChannelWithDecodeDataFalse", "TestRcptOptionParsing", "SMTPDServerTest", "DummyDispatcherBroken", "SMTPDChannelTestWithEnableSMTPUTF8True", "MiscTestCase", "SMTPDChannelIPv6Test", "TestFamilyDetection", "SMTPDChannelWithDecodeDataTrue", "TestMailOptionParsing", "SMTPDChannelTest", "SMTPDChannelWithDataSizeLimitTest", "BrokenDummyServer", "DebuggingServerTest", "DummyServer"], "class_method_calls": ["self.send_data", "smtpd.DEBUGSTREAM", "support.check__all__", "self.write_line", "self.messages", "smtpd.SMTPServer", "unittest.skipUnless", "self.return_status", "self.assertEqual", "socket.AF_INET", "self.extended_smtp", "self.debug", "support.HOSTv4", "smtpd.DebuggingServer", "support.IPV6_ENABLED", "asyncore.close_all", "channel.handle_read", "io.StringIO", "smtpd.SMTPChannel", "self._decode_data", "self.assertRaises", "self.error_response", "server.socket", "socket.AF_INET6", "s.getvalue", "server.accept", "smtpd.socket", "support.check_warnings", "self.old_debugstream", "support.HOSTv6", "unittest.main", "textwrap.dedent", "self.channel", "asyncore.socket", "support.captured_stdout", "self.server", "support.HOST", "unittest.TestCase", "channel.socket"]}, "test_smtplib.py": {"libraries": ["email.base64mime.body_encode", "smtpd", "base64", "test.support", "test.support.HOST", "test.support.join_thread", "unittest", "io", "select", "threading", "asyncore", "textwrap", "hashlib", "email.message.EmailMessage", "socket", "test.support.threading_cleanup", "hmac", "re", "email.mime.text", "time", "test.support.requires_hashdigest", "smtplib", "errno", "test.mock_socket", "sys", "email.utils", "unittest.mock.Mock", "test.support.threading_setup"], "function_names": ["testELHO", "_decode_base64", "testSendNullSender", "testEXPN", "test_421_from_rcpt_cmd", "testBasic1", "test_421_from_data_cmd", "__init__", "testSourceAddress", "testAUTH_LOGIN_initial_response_notok", "testQuoteData", "testLineTooLong", "testSendMessageResent", "test_issue43124_escape_localhostname", "test_smtputf8_NotSupportedError_if_no_server_support", "test_auth_function", "tearDown", "testHELP", "smtp_RSET", "smtp_MAIL", "testAUTH_CRAM_MD5", "testSendMessageWithSomeAddresses", "debugging_server", "smtp_EHLO", "testSecondHELO", "testAUTH_PLAIN_initial_response_login", "_auth_buggy", "testSendMessageMultipleResentRaises", "smtp_RCPT", "testSendMessageWithMultipleFrom", "testLocalHostName", "get_output_without_xpeer", "testSendMessageWithMailOptions", "testRSET", "_auth_plain", "testTimeoutValue", "testNonnumericPort", "testAUTH_BUGGY", "smtp_QUIT", "handle_accepted", "_auth_cram_md5", "test_send_unicode_with_SMTPUTF8_via_low_level_API", "test_send_message_error_on_non_ascii_addrs_if_no_smtputf8", "testEHLO", "test_with_statement_QUIT_failure", "found_terminator", "test_send_message_uses_smtputf8_if_addrs_non_ascii", "setUp", "testSendBinary", "testNOOP", "testBasic", "test_quit_resets_greeting", "testAUTH_PLAIN_initial_response_auth", "testSendMessageWithSpecifiedAddresses", "smtp_EXPN", "testTimeoutNone", "test__rest_from_mail_cmd", "testBasic2", "testSendNeedingDotQuote", "process_message", "testVRFY", "test_421_from_mail_cmd", "handle_error", "test_debuglevel_2", "server", "handle_expt", "testSendMessage", "smtp_AUTH", "testAUTH_PLAIN", "testNotConnected", "auth_buggy", "test_with_statement", "testTimeoutDefault", "test_test_server_supports_extensions", "testSend", "testSockAttributeExists", "smtp_VRFY", "testSendMessageWithAddresses", "test_issue43124_escape_options", "testEXPNNotImplemented", "test_send_unicode_without_SMTPUTF8", "smtp_DATA", "test_name_field_not_included_in_envelop_addresses", "testAUTH_LOGIN", "_auth_login", "test_issue43124_putcmd_escapes_newline", "test_send_unicode_with_SMTPUTF8_via_sendmail", "testFailingHELO", "testAUTH_LOGIN_initial_response_ok", "add_feature", "test_debuglevel", "_authenticated", "testAUTH_multiple"], "function_calls": ["threading_setup", "getattr", "SimSMTPServer", "Mock", "requires_hashdigest", "repr", "super", "join_thread", "str", "enumerate", "threading_cleanup", "EmailMessage", "encode_base64", "SimSMTPAUTHInitialResponseServer", "hasattr", "len", "poll_fun", "SimSMTPUTF8Server", "bytes", "print"], "class_names": ["NonConnectingTests", "TooLongLineTests", "DefaultArgumentsTests", "DebuggingServerTests", "SMTPSimTests", "GeneralTests", "BadHELOServerTests", "SimSMTPServer", "SMTPUTF8SimTests", "SimSMTPAUTHInitialResponseChannel", "ResponseException", "SimSMTPUTF8Server", "SMTPAUTHInitialResponseSimTests", "SimSMTPChannel", "MySimSMTPChannel", "SimSMTPAUTHInitialResponseServer"], "class_method_calls": ["self._extra_features", "stderr.getvalue", "smtp.auth_plain", "smtp.data", "email.mime", "logpass.split", "self.assertEqual", "socket.SOCK_STREAM", "e.errno", "sys.stdout", "smtplib.SMTPNotSupportedError", "smtplib.socket", "smtp.getreply", "smtp.rcpt", "smtp.sock", "smtplib.SMTPDataError", "self.auth_object", "smtp.auth", "smtplib._MAXLINE", "self.respdata", "sim_lists.items", "self.smtp_state", "self.host", "smtp.send", "self._decode_data", "self.assertRaises", "mock_socket.setdefaulttimeout", "self.serv", "smtp.user", "re.MULTILINE", "serv_evt.set", "smtplib.SMTPRecipientsRefused", "e.smtp_error", "msg.set_content", "smtp.expn", "email.utils", "self.get_output_without_xpeer", "self.last_mailfrom", "self.assertTrue", "smtp.mail", "smtplib.SMTPSenderRefused", "client_evt.is_set", "exc.exception", "self.authenticated_user", "smtpd.DEBUGSTREAM", "self.data_response", "self.last_rcpttos", "smtp.ehlo_or_helo_if_needed", "smtp.connect", "self.thread_key", "e.smtp_code", "arg.lower", "self.quit_response", "hmac.HMAC", "smtp.login", "smtp.send_message", "self.output", "self.old_stdout", "self.rcpt_count", "m.as_string", "asyncore.close_all", "self.assertNotIn", "io.StringIO", "support.find_unused_port", "smtpd.SMTPChannel", "self.assertNotRegex", "smtp.rset", "self.subTest", "smtp.close", "select.select", "self.assertRegex", "mock_socket.getfqdn", "socket.getdefaulttimeout", "serv.listen", "self.smtp", "self.last_mail_options", "smtp.putcmd", "smtplib.SMTP", "self.assertIsNone", "self.sock", "smtplib.quotedata", "errno.EADDRINUSE", "re.DOTALL", "self.port", "supported.add", "self.enable_SMTPUTF8", "smtp.does_esmtp", "smtp.quit", "unittest.TestCase", "self.evt", "self.assertFalse", "self.msg", "self._extrafeatures", "self.last_rcpt_options", "serv.close", "base64.decodebytes", "support.bind_port", "sys.platform", "self._SMTPchannel", "smtpd.SMTPServer", "asyncore.poll2", "users.append", "self.rset_count", "smtp.source_address", "smtplib.SMTPException", "self._addresses", "hashlib.md5", "self.addCleanup", "socket.getfqdn", "smtplib.SMTPServerDisconnected", "mechanism.lower", "smtp.local_hostname", "r.exception", "self.serv_evt", "smtplib.SMTPConnectError", "self.COMMAND", "smtp.ehlo", "re.sub", "self.client_evt", "self.last_message", "self.AUTH", "self._authenticated", "smtp.helo", "unittest.main", "self.seen_greeting", "smtplib.SMTPResponseException", "asyncore.poll", "re.compile", "asyncore.socket_map", "evt.set", "self.assertDictEqual", "arg.split", "smtp.esmtp_features", "m.decode", "self.close_when_done", "error.exception", "self.disconnect", "self.channel_class", "smtplib.quoteaddr", "self.real_getfqdn", "smtp.noop", "mock_socket.getdefaulttimeout", "self.received_lines", "socket.AF_INET", "self.thread", "self.old_DEBUGSTREAM", "self.extended_smtp", "smtp.set_debuglevel", "self.assertRaisesRegex", "smtp.password", "smtpd.DebuggingServer", "smtp.help", "threading.Event", "self.assertIn", "self.mail_response", "conn.send", "socket.timeout", "self.rcpt_response", "self._decode_base64", "sim_users.items", "support.captured_stderr", "smtp.auth_login", "conn.close", "self._emptystring", "smtp.has_extn", "self.last_peer", "textwrap.dedent", "self.doCleanups", "time.sleep", "mock_socket.reply_with", "self.DATA", "serv.accept", "self.skipTest", "socket.setdefaulttimeout", "smtp.vrfy", "self.push", "smtp.verify", "self._auth_login_user", "string.encode", "threading.Thread", "smtp.sendmail", "socket.socket"]}, "test_smtpnet.py": {"libraries": ["unittest", "test.support", "smtplib", "socket"], "function_names": ["test_connect", "test_connect_using_sslcontext_verified", "test_connect_default_port", "check_ssl_verifiy", "test_connect_using_sslcontext", "test_connect_starttls"], "function_calls": ["check_ssl_verifiy"], "class_names": ["SmtpTest", "SmtpSSLTest"], "class_method_calls": ["ssl.SSLContext", "server.ehlo", "self.remotePort", "self.testServer", "support.import_module", "support.requires", "smtplib.SMTPException", "support.transient_internet", "socket.create_connection", "support.get_attribute", "server.starttls", "server.quit", "context.wrap_socket", "unittest.skip", "smtplib.SMTP", "unittest.main", "ssl.create_default_context", "ssl.PROTOCOL_TLS_CLIENT", "e.args", "sock.close", "smtplib.SMTP_SSL", "self.skipTest", "context.verify_mode", "unittest.TestCase", "context.check_hostname", "ssl.CERT_NONE"]}, "test_sndhdr.py": {"libraries": ["unittest", "sndhdr", "pickle", "test.support.findfile"], "function_names": ["test_data", "test_pickleable"], "function_calls": ["range", "findfile"], "class_names": ["TestFormats"], "class_method_calls": ["what.nchannels", "what.sampwidth", "pickle.dumps", "self.assertEqual", "self.assertNotEqual", "what.framerate", "pickle.HIGHEST_PROTOCOL", "what.nframes", "pickle.loads", "unittest.TestCase", "self.assertSequenceEqual", "sndhdr.what", "unittest.main", "what.filetype"]}, "test_socket.py": {"libraries": ["_testcapi", "contextlib", "random", "struct", "socket.AF_INET", "test.support", "string", "array", "traceback", "unittest", "io", "platform", "select", "threading", "signal", "queue", "fcntl", "socket", "os", "weakref.proxy", "multiprocessing", "socket.inet_aton", "itertools", "socket.inet_ntoa", "socket.inet_ntop", "_thread", "time", "socket.AF_INET6", "shutil", "tempfile", "socket.has_ipv6", "socket.inet_pton", "errno", "sys", "pickle", "_socket", "math"], "function_names": ["testSendAll", "_testSingleCmsgTruncLen0Minus1", "skipdec", "test_default_inheritable", "testRecvmsgLongAncillaryBuf", "accept_conn", "check_sendall_interrupted", "_testSendFrame", "testBindAny", "mocked_socket_module", "test_flowinfo", "testRecvFromIntoEmptyBuffer", "test_create_connection_timeout", "testRecvFromIntoMemoryview", "_testSendmsgBadCmsg", "_testSingleCmsgTrunc0", "_testRecvmsgBadArgs", "_testCloseAfterMakefile", "test_getnameinfo_ipv6_scopeid_symbolic", "testCountSmall", "_testTimeoutDefault", "testSendmsgBadCmsg", "testSetBlocking", "testAutoBindSock", "test_getaddrinfo_ipv6_basic", "closeRecvmsgFDs", "testNameOverflow", "testCreateSocket", "testRecvmsgIntoGenerator", "test_setblocking_invalidfd", "testHostnameRes", "_have_socket_can_isotp", "_have_socket_rds", "checkTruncatedSecondHeader", "_testRecvmsgPeek", "noskipdec", "testNewAttributes", "test_sock_ioctl", "testSendmsgExcessCmsgReject", "_testRecvmsgIntoArray", "_testOverFlowRecv", "_testStream", "testDup", "_testRecvmsgEOF", "_testCmsgTrunc1", "testTypes", "testBytearrayName", "test_dualstack_ipv6_family", "raising_handler", "_testRegularFile", "test_getaddrinfo_ipv6_scopeid_symbolic", "_testAccept", "testTimeoutZero", "_test_socket_fileno", "checkTruncatedHeader", "testOffset", "get_cid", "_testMakefileAfterMakefileClose", "testFilter", "_testRecvmsgFromSendmsg", "_testSetBlocking", "testSocketBufferSize", "testRecvHopLimit", "test_str_for_enums", "test_socket_fileno_requires_socket_fd", "_testRecvmsgLongAncillaryBuf", "test_sha256", "doRecvmsg", "testRecvmsg", "isTipcAvailable", "test_set_inheritable_cloexec", "testSendmsgBadMultiCmsg", "testTCPTimeout", "testVSOCKConstants", "test__sendfile_use_sendfile", "_testCreateConnectionBase", "testGetaddrinfo", "_testSecondCmsgTrunc1", "checkHopLimitTruncatedHeader", "doConnect", "_testCmsgTruncLen0", "testSecondCmsgTrunc1", "_have_socket_can", "_testFDPassSimple", "testFDPassSeparate", "_testSingleCmsgTrunc1", "testSendmsgNoDestAddr", "testInitNonBlocking", "doCleanups", "serverExplicitReady", "testSecondCmsgTrunc2Int", "testDefaults", "create_alg", "fileno", "testCreateISOTPSocket", "_testCreateConnectionClose", "_setUp", "testSecondCmsgTrunc0", "_testSendmsgAfterClose", "test_repr", "checkTrafficClassAndHopLimit", "test_tcp4", "testSockName", "testSendmsgAncillaryGenerator", "testBindSock", "test_set_inheritable", "_testSendAndRecvMsg", "testEmptyFileSend", "_testSelect", "testOverFlowRecv", "_testSendAndRecvMulti", "testInvalidInterfaceNameToIndex", "_testOverFlowRecvFrom", "test_dealloc_warn", "testNtoH", "_testSendmsg", "_testInsideTimeout", "compareSockets", "_testOffset", "_testSend", "_testSendmsgDataGenerator", "_testShutdown_overflow", "testRecvmsgExplicitDefaults", "test_connect", "testRefCountGetNameInfo", "build_can_frame", "testBCM", "_testRecvmsgExplicitDefaults", "_testSecondCmsgTrunc2Int", "_testRecvIntoArray", "testCountWithOffset", "testInterruptedRecvfromIntoTimeout", "_testMakefileClose", "_testSendtoAndRecv", "_testSecondCmsgTrunc0", "checkNonblock", "_testSendmsgNoDestAddr", "testFDPassCMSG_LEN", "test_ipv6_only_default", "newFDs", "socket_setdefaulttimeout", "test_getnameinfo", "testFDPassSimple", "_testUnbufferedRead", "_testTimeoutValueNonamed", "testSecomdCmsgTruncInData", "testRecvmsgFromSendmsg", "testSendmsgDontWait", "_testPeek", "_testSecomdCmsgTruncInData", "testInterpreterCrash", "testCMSG_LEN", "testRecvFrom", "testSendmsgArray", "_testMultipleFDPass", "_testTimeoutValueNamed", "testSendtoAndRecv", "testRecvFromIntoSmallBuffer", "testInterruptedRecvIntoTimeout", "test_socket_fileno_rejects_float", "testCmsgTruncNoBufSize", "_testReadAfterTimeout", "checkHopLimit", "testSetTrafficClassAndHopLimit", "_testFDPassSeparateMinSpace", "_testFromFd", "alarm_handler", "testRecvTrafficClassAndHopLimitCMSG_SPACE", "checkInterruptedRecv", "testCmsgTruncLen0", "testRecvmsgIntoBadArgs", "testFDPassSeparateMinSpace", "testSetBlocking_overflow", "testRecvmsgPeek", "test_tcp6", "_test_errors", "testCount", "testStringToIPv4", "testInterruptedRecvmsgTimeout", "msg_flags_eor_indicator", "connect", "testBind", "testMakefileClose", "testCmsgTrunc2Int", "checkRecvmsgFDs", "_testWithTimeoutTriggeredSend", "requireSocket", "_testClosedAttr", "_testRecvTrafficClassAndHopLimitCMSG_SPACE", "sendAncillaryIfPossible", "_testRecvFromNegative", "_testFDPassSeparate", "testRecvmsgAfterClose", "_testInheritFlagsBlocking", "test_listen_backlog", "assert_sock_timeout", "testInvalidBindSock", "_testSetTrafficClassAndHopLimit", "testSingleCmsgTrunc2Int", "testFullRead", "setUpClass", "chunks", "testRecvmsgIntoArray", "testCMSG_SPACE", "_testRecvmsg", "_testFDPassPartialIntInMiddle", "requireAttrs", "testSendMaxFrame", "_testAttributes", "testSetSockOpt", "test_makefile_invalid_mode", "_testRecvmsgShorter", "testShareLength", "_testOddCmsgSize", "_testRecvFromIntoSmallBuffer", "test_length_restriction", "testCreateConnectionBase", "test_SOCK_CLOEXEC", "testIPv6toString", "testIPv4toString", "testCmsgTruncLen1", "testRecvFromIntoArray", "_testSendmsgTimeout", "test_name_closed_socketio", "_testSendAndRecv", "_testInheritFlagsTimeout", "_testRecvmsgTimeout", "_testDefaults", "testFDPassPartialIntInMiddle", "_testCmsgTruncLen2Minus1", "testRDM", "_testWithTimeout", "test_create_connection", "testShareLocal", "testSendAndRecvMulti", "testStringToIPv6", "testSendmsgBadArgs", "test_dup", "test_drbg_pr_sha256", "testSmallRead", "testSendmsgDataGenerator", "checkFlags", "testSendAfterClose", "_testNonRegularFile", "test_socketpair", "_have_socket_vsock", "testSurrogateescapeBind", "_testRecvFromIntoArray", "_testMakefileCloseSocketDestroy", "test_unusable_closed_socketio", "echo_server", "skipWithClientIf", "testInvalidInterfaceIndexToName", "_testUnbufferedReadline", "_testOutsideTimeout", "_testSendMultiFrames", "testInsideTimeout", "testUnencodableAddr", "_testSmallRead", "createAndSendFDs", "__init__", "_testSocketClass", "testFromFd", "testClose", "newSocket", "_testNonBlocking", "testMultipleFDPass", "testRecvHopLimitCMSG_SPACE", "_testSendmsgBadMultiCmsg", "testNonBlocking", "testCreateBCMSocket", "checkTruncatedArray", "testUnbufferedReadline", "testOverFlowRecvFrom", "testCmsgTrunc1", "test_getaddrinfo_ipv6_scopeid_numeric", "_testRecvTrafficClassAndHopLimit", "testRecvIntoArray", "_testEmptyFileSend", "testFDPassEmpty", "testDetach", "test_new_tcp_flags", "test_errors", "test_host_resolution", "testRecvFromNegative", "testWriteNonBlocking", "_testSetHopLimit", "test_family_and_type", "testLoopback", "testCmsgTruncLen0Plus1", "test_socket_fileno_rejects_other_types", "serv_sock", "testUDPTimeout", "testRealClose", "testInterruptedRecvmsgIntoTimeout", "dissect_can_frame", "remoteProcessServer", "testWithTimeout", "testTooLongInterfaceName", "testBCMConstants", "_testCmsgTrunc2Int", "_testSingleCmsgTrunc2Int", "_testRecvmsgIntoBadArgs", "_testSendmsgDontWait", "addCleanup", "_testCountWithOffset", "checkRecvmsgAddress", "_testSingleCmsgTruncInData", "testSecondCmsgTruncLen0Minus1", "test_getsockaddrarg", "_testRecvmsgShortAncillaryBuf", "testIPv4_inet_aton_fourbytes", "testInterruptedSendTimeout", "test_get_inheritable_cloexec", "test_socket_fileno_rejects_invalid_socket", "_testSendmsgExcessCmsgReject", "testSingleCmsgTruncLen0Minus1", "encoded", "testCmsgTruncLen0Minus1", "testLinuxAbstractNamespace", "_testFDPassCMSG_SPACE", "test_reuse_port", "testSetHopLimit", "test_socket_close", "testMaxName", "newClientSocket", "test_csocket_repr", "_testCmsgTruncNoBufSize", "testSendmsg", "testRecvmsgShortAncillaryBuf", "bindServer", "_testRecvHopLimit", "testCmsgTrunc0", "_testCmsgTruncLen0Minus1", "_testSendmsgGather", "testWithTimeoutTriggeredSend", "test_pickle", "_testCmsgTruncLen0Plus1", "_testFDPassCMSG_LEN", "_check_defaults", "testExceptionTree", "testPeek", "test_dual_stack_client_v4", "bindClient", "testStrAddr", "test_sendmsg_afalg_args", "testFDPassCMSG_SPACE", "bind", "_testRecvmsgIntoGenerator", "testInterruptedRecvTimeout", "testSingleCmsgTrunc1", "setAlarm", "testCrucialIpProtoConstants", "testBytesAddr", "testDefaultTimeout", "testSendmsgGather", "test_SOCK_NONBLOCK", "testSendMultiFrames", "testRecvmsgEOF", "_testInitNonBlocking", "testRecvIntoMemoryview", "_testRecvHopLimitCMSG_SPACE", "test_socket_fileno_requires_valid_fd", "sendmsgToServer", "testCloseException", "testClosedAttr", "_testSmallReadNonBlocking", "run", "cli_sock", "clientTearDown", "_testSendmsgAncillaryGenerator", "testSendmsgExplicitNoneAddr", "_testCmsgTruncLen1", "tearDownClass", "testStrName", "testMakefileCloseSocketDestroy", "_testTimeoutNone", "testSendmsgTimeout", "testOddCmsgSize", "test_sendall_interrupted", "test_socket_fileno_rejects_negative", "testCmsgTruncLen2Minus1", "test_aes_cbc", "clientRun", "_testDetach", "test_host_resolution_bad_address", "_testRecvmsgAfterClose", "testReadline", "_testShutdown", "testShutdown", "test_dual_stack_client_v6", "_testClose", "testMakefileAfterMakefileClose", "testInterruptedRecvfromTimeout", "ancillaryMapping", "checkFDs", "raise_timeout", "_testRecvFrom", "_testWriteNonBlocking", "tearDown", "testRecvmsgTrunc", "registerRecvmsgResult", "testReadAfterTimeout", "testSingleCmsgTrunc0", "_testReadline", "_tearDown", "testRecvFromIntoBytearray", "testUnbufferedRead", "testRecv", "testUnbound", "_testCmsgTrunc0", "bindSock", "test_aead_aes_gcm", "clientSetUp", "test_hmac_sha1", "testInheritFlagsTimeout", "echo_client", "_testCount", "testInterfaceNameIndex", "testSmallReadNonBlocking", "test_unknown_socket_family_repr", "ok_handler", "testSendtoErrors", "testWindowsSpecificConstants", "testCloseAfterMakefile", "testNtoHErrors", "_testFDPassEmpty", "_testSendmsgExplicitNoneAddr", "_testFDPassPartialInt", "testRecvmsgBadArgs", "_testSendAll", "_testSourceAddress", "test_weakref", "_testRecvmsgTrunc", "_justAccept", "test_sio_loopback_fast_path", "test_getnameinfo_ipv6_scopeid_numeric", "_testSendmsgArray", "testInterruptedSendmsgTimeout", "testCreateConnectionClose", "test_sendall_interrupted_with_timeout", "testSendFrame", "setUp", "testRecvIntoBytearray", "testInterruptedTimeout", "_testRecv", "testInterruptedSendtoTimeout", "msg_flags_non_eor_indicator", "testSendAndRecvMsg", "test_main", "testFDPassPartialInt", "testNonRegularFile", "meth_from_sock", "test_address", "_testSendMaxFrame", "sendmsg_to_server_defaults", "testRegularFile", "sendToServer", "_testRecvmsgOverflow", "test_SocketType_is_socketobject", "checkInterruptedSend", "test_sethostname", "test_listen_backlog_overflow", "_testRecvmsgIntoScatter", "testAccept", "testGetServBy", "testSelect", "_testDup", "testSend", "testSendmsgAfterClose", "test_socket_consistent_sock_type", "testSendAndRecv", "recv_data", "testSingleCmsgTruncInData", "testRecvmsgShorter", "_have_socket_qipcrtr", "testCrucialConstants", "_testSecondCmsgTruncLen0Minus1", "test_idna", "_testFullRead", "_testCountSmall", "test_socket_fileno", "_testRealClose", "testRecvmsgIntoScatter", "testShare", "client_pass", "_testBCM", "test_makefile_mode", "_testFamily", "_testSendmsgBadArgs", "testInheritFlagsBlocking", "testRecvmsgOverflow", "_have_socket_alg", "testGetSockOpt", "testRecvTrafficClassAndHopLimit", "testAttributes", "testRecvmsgTimeout", "testSocketError", "testStream"], "function_calls": ["object", "min", "_have_socket_qipcrtr", "inet_pton", "skipWithClientIf", "get_cid", "requireSocket", "getattr", "meth", "memoryview", "repr", "_have_socket_can_isotp", "test_main", "isinstance", "issubclass", "super", "_have_socket_rds", "proxy", "str", "assertInvalid", "isTipcAvailable", "pack_uint32", "dict", "open", "Exception", "inet_ntop", "range", "eq", "list", "socket_setdefaulttimeout", "chunks", "dir", "int", "type", "enumerate", "func", "bool", "f", "hasattr", "bytearray", "_have_socket_alg", "len", "g", "_have_socket_can", "max", "File", "NotImplementedError", "requireAttrs", "bytes", "_have_socket_vsock", "test_func", "TypeError"], "class_names": ["NetworkConnectionAttributesTest", "SCTPStreamBase", "SendrecvmsgSCTPStreamTestBase", "FileObjectClassTestCase", "ThreadedUDPSocketTest", "RecvmsgTests", "RecvmsgUDP6Test", "CreateServerTest", "SocketUDPTest", "BasicRDSTest", "ThreadableTest", "LineBufferedFileObjectClassTestCase", "RecvmsgIntoUnixStreamTest", "SocketCANTest", "TCPCloserTest", "SendmsgConnectionlessTests", "TestLinuxAbstractNamespace", "RFC3542AncillaryTest", "SocketTCPTest", "NonblockConstantTest", "SendrecvmsgDgramFlagsBase", "BasicQIPCRTRTest", "UDPTestBase", "RecvmsgGenericTests", "SocketRDSTest", "RecvmsgTCPTest", "NetworkConnectionTest", "SendrecvmsgBase", "InterruptedRecvTimeoutTest", "ConnectedStreamTestMixin", "NetworkConnectionNoServer", "RecvmsgIntoSCMRightsStreamTest", "SendrecvmsgUnixStreamTestBase", "ThreadedTCPSocketTest", "UnixStreamBase", "RecvmsgUDPTest", "MockSocket", "CmsgMacroTests", "TIPCTest", "SendmsgUnixStreamTest", "UnbufferedFileObjectClassTestCase", "UnicodeReadFileObjectClassTestCase", "SendrecvmsgUDP6TestBase", "RecvmsgIntoMixin", "RecvmsgIntoUDP6Test", "SendrecvmsgConnectionlessBase", "TestExceptions", "SCMRightsTest", "ThreadedSocketTestMixin", "GeneralModuleTests", "SendmsgTCPTest", "Inet6TestBase", "RecvmsgGenericStreamTests", "ThreadedRDSSocketTest", "File", "SendmsgUDPTest", "InterruptedTimeoutBase", "TCPTestBase", "BasicVSOCKTest", "SendmsgTests", "SendmsgUDP6Test", "SendrecvmsgTCPTestBase", "SendmsgStreamTests", "BasicUDPTest", "SocketListeningTestMixin", "ThreadedCANSocketTest", "LinuxKernelCryptoAPI", "InheritanceTest", "SendrecvmsgSCTPFlagsBase", "SendrecvmsgServerTimeoutBase", "RecvmsgIntoUDPTest", "SocketTestBase", "UnicodeWriteFileObjectClassTestCase", "ThreadedVSOCKSocketStreamTest", "BasicSocketPairTest", "SocketPairTest", "Alarm", "CreateServerFunctionalTest", "UDPTimeoutTest", "BasicTCPTest2", "TestSocketSharing", "SendmsgSCTPStreamTest", "RecvmsgRFC3542AncillaryUDP6Test", "SendrecvmsgUDPTestBase", "ISOTPTest", "SmallBufferedFileObjectClassTestCase", "ContextManagersTest", "RDSTest", "TCPTimeoutTest", "TestMSWindowsTCPFlags", "RecvmsgIntoRFC3542AncillaryUDP6Test", "UDP6TestBase", "UnicodeReadWriteFileObjectClassTestCase", "RecvmsgIntoTests", "InetTestBase", "BufferIOTest", "TIPCThreadableTest", "BasicCANTest", "InterruptedSendTimeoutTest", "NetworkConnectionBehaviourTest", "SendrecvmsgConnectedBase", "BasicTCPTest", "RecvmsgSCTPStreamTest", "ThreadSafeCleanupTestCase", "NonBlockingTCPTests", "UnixSocketTestBase", "SendfileUsingSendTest", "SendfileUsingSendfileTest", "RecvmsgUnixStreamTest", "RecvmsgIntoSCTPStreamTest", "SocketConnectedTest", "TestUnixDomain", "CANTest", "RecvmsgSCMRightsStreamTest", "RecvmsgIntoTCPTest"], "class_method_calls": ["self.server_ready", "s2.type", "sys.getandroidapilevel", "self.remoteProcessServer", "self.conn", "os.O_RDONLY", "e.errno", "self.serv_conn", "thread.start_new_thread", "SocketConnectedTest.__init__", "testRecvmsgFromSendmsg.client_skip", "socket.gethostbyname_ex", "self.cli_sock", "fp.writable", "self.client_ready", "cli.close", "ip.find", "self.cli", "socket.ALG_OP_DECRYPT", "testRecvTrafficClassAndHopLimit.client_skip", "os.open", "shutil.rmtree", "fp.mode", "self.clientRun", "pickle.HIGHEST_PROTOCOL", "testSingleCmsgTrunc1.client_skip", "string.ascii_letters", "socket.IPPROTO_IPV6", "socket.VMADDR_PORT_ANY", "multiprocessing.Queue", "testOddCmsgSize.client_skip", "socket.gethostbyname", "socket.SOL_ALG", "support.HOST", "support.requires_linux_version", "other.gettimeout", "s2.family", "conn.gettimeout", "sock.makefile", "self.ancillaryMapping", "fcntl.ioctl", "tempfile.mkdtemp", "signal.setitimer", "socket.CAN_ISOTP", "signal.ITIMER_REAL", "p.start", "self.assertNotIn", "self.checkRecvmsgAddress", "exc.errno", "org.family", "sock.recvmsg", "self.dir_path", "testSingleCmsgTruncInData.client_skip", "os.rmdir", "self.subTest", "select.select", "socket.SO_VM_SOCKETS_BUFFER_MAX_SIZE", "struct.unpack", "unittest.skip", "self.fd", "socket.has_ipv6", "socket.IPPROTO_PGM", "sock.dup", "array.array", "errno.EADDRINUSE", "errno.ECONNREFUSED", "os.path", "self.interface", "self.hop_limit", "socket.AI_NUMERICSERV", "socket.SO_VM_SOCKETS_BUFFER_MIN_SIZE", "self.newFDs", "self.read_file", "socket.CAN_RAW_LOOPBACK", "support.bind_port", "socket.CAN_BCM_TX_READ", "self.cliaddr", "testRecvHopLimit.client_skip", "sock.bind", "methodname.rfind", "os.read", "c.sendall", "socket.fromshare", "self.knownTCPFlags", "socket.SOCK_SEQPACKET", "socket.AF_UNSPEC", "socket.CAN_BCM_RX_READ", "fp.close", "sock.family", "self.mocked_socket_module", "socket.create_connection", "socket.CMSG_LEN", "socket.VMADDR_CID_ANY", "SocketConnectedTest.setUp", "self.accept_conn", "self.assertWarns", "testFDPassPartialIntInMiddle.client_skip", "signal.signal", "conn.setblocking", "socket.AddressFamily", "self.__setUp", "self.evt1", "_testcapi.INT_MAX", "socket.IPV6_V6ONLY", "self.checkFDs", "SocketTCPTest.__init__", "_socket.SOCK_STREAM", "ancdata.pop", "socket.PF_CAN", "self.FILESIZE", "self.cf1", "socket.IPPROTO_CBT", "socket.SO_RCVBUF", "os.lseek", "s.settimeout", "support.TESTFN_UNICODE", "socket.getaddrinfo", "op.sendall", "q.put", "self._check_defaults", "self.newline", "self.checkInterruptedSend", "_testcapi.INT_MIN", "self.tearDown", "socket.ALG_SET_KEY", "socket.IPV6_RECVTCLASS", "sizes.items", "received.append", "self.encoded", "socket.IPPROTO_ICLFXBM", "sock.get_inheritable", "socket.getservbyport", "_testcapi.UINT_MAX", "socket.SO_REUSEADDR", "self.data2", "cls.BUFSIZE", "self.echo_server", "self.fail", "socket.timeout", "threading.RLock", "sock.type", "testRecvTrafficClassAndHopLimitCMSG_SPACE.client_skip", "self.msg_flags_common_unset", "self.bcm_cmd_msg_fmt", "socket.MSG_PEEK", "fp.readable", "socket.CAN_BCM_RX_RTR_FRAME", "cli.sendto", "testSetHopLimit.client_skip", "bcm.send", "socket.MSG_TRUNC", "self.newSocket", "socket.CAN_BCM_SETTIMER", "socket.EAI_SERVICE", "s.accept", "s2.sendall", "errno.ENOTSOCK", "socket.AF_RDS", "socket.socket", "s.ioctl", "tempfile.mktemp", "socket.SO_REUSEPORT", "os.write", "socket.IPPROTO_ST", "self.__tearDown", "socket.CAN_BCM_TX_STATUS", "socket.htons", "sock.proto", "q.get", "errno.ENODEV", "socket.SOL_CAN_RAW", "shared.close", "ThreadedTCPSocketTest.setUp", "sock.listen", "self.alarm_time", "self.MockSocket", "socket.MSG_EOR", "self.FILEDATA", "self.host", "self.assertRaises", "ThreadedTCPSocketTest.__init__", "self.serv", "testCmsgTruncNoBufSize.client_skip", "s.type", "socket.IPPROTO_L2TP", "event.set", "testSecondCmsgTrunc2Int.client_skip", "struct.Struct", "sock.send", "self.done", "s.startswith", "self.cf", "socket.SOL_SOCKET", "cli.getsockname", "self.serv_addr", "support.bind_unix_socket", "self.doConnect", "socket.socketpair", "cm.warning", "self.timeout", "ThreadedTCPSocketTest.tearDown", "self.newClientSocket", "testSingleCmsgTruncLen0Minus1.client_skip", "cm.exception", "ThreadedTCPSocketTest.clientTearDown", "self.serverExplicitReady", "socket.create_server", "self._setUp", "retval.client_skip", "sock.detach", "socket.ALG_OP_ENCRYPT", "self.echo_client", "sock.getsockopt", "self.srv", "self.bind", "os.curdir", "socket.SIO_LOOPBACK_FAST_PATH", "self.assertIsNone", "support.HOSTv6", "socket.if_nametoindex", "testSingleCmsgTrunc2Int.client_skip", "socket.CAN_BCM_RX_SETUP", "socket.gethostbyaddr", "socket.CAN_BCM_TX_EXPIRED", "sock.close", "s.getsockname", "fp.seekable", "self.assert_sock_timeout", "socket.SOL_TCP", "time.monotonic", "self.assertLess", "cls.FILESIZE", "socket.CAN_BCM_RX_CHANGED", "socket.CAN_BCM_TX_COUNTEVT", "conn.settimeout", "SocketConnectedTest.clientSetUp", "self.assertLessEqual", "fcntl.F_GETFD", "s2.close", "socket.SCM_RIGHTS", "afile.fileno", "self.addCleanup", "socket.getfqdn", "socket.htonl", "socket.ntohs", "self.checkHopLimitTruncatedHeader", "s2.fileno", "self.errors", "self.bindServer", "self.serv_finished", "socket.AF_INET6", "SocketPairTest.__init__", "self.encoding", "sock.sendmsg_afalg", "testSecomdCmsgTruncInData.client_skip", "socket.MSG_MORE", "self.serv_sock", "socket.VM_SOCKETS_INVALID_VERSION", "socket.close", "testFDPassSeparateMinSpace.client_skip", "socket.SOCK_DGRAM", "socket.IPV6_TCLASS", "s2.get_inheritable", "socket.ALG_SET_OP", "socket.ALG_SET_IV", "self.write_mode", "self.client_thread", "socket.if_indextoname", "socket.CAN_BCM_STARTTIMER", "self.bindSock", "self.msg_flags_eor_indicator", "bytes.fromhex", "op.send", "io.BytesIO", "errno.EPERM", "exc.winerror", "self.TIMEOUT", "tempfile.NamedTemporaryFile", "self.misc_event", "self.id", "self.registerRecvmsgResult", "socket.IPPROTO_TCP", "socket.CAN_BCM_TX_CP_CAN_ID", "self.data", "self.createAndSendFDs", "cli_thread.start", "self.setUp", "f.read", "self.sendmsgToServer", "cmsg_types.remove", "s1.accept", "s1.listen", "srv.recvfrom", "self.doRecvmsg", "sock.sendall", "socket._LOCALHOST", "s.recv", "sys.getrefcount", "SocketUDPTest.__init__", "sock.getblocking", "time.sleep", "cls.can_frame_fmt", "op.sendmsg_afalg", "s.close", "sock.recvmsg_into", "self.skipTest", "socket.setdefaulttimeout", "sock.settimeout", "self.setAlarm", "socket.AF_CAN", "source.share", "errno.ENOMEM", "testSecondCmsgTruncLen0Minus1.client_skip", "s.sendto", "support.requires_mac_ver", "unittest.skipUnless", "os.getpid", "support.gc_collect", "struct.calcsize", "self.assertNotEqual", "self.assertGreaterEqual", "self._tearDown", "socket.VMADDR_CID_HOST", "support.IPV6_ENABLED", "support.transient_internet", "support.TESTFN", "op.recv", "testSendmsgBadMultiCmsg.client_skip", "tests.extend", "socket.CMSG_SPACE", "support.is_resource_enabled", "socket.SocketType", "fcntl.F_GETFL", "testSecondCmsgTrunc0.client_skip", "self.checkTruncatedSecondHeader", "support.TESTFN_UNENCODABLE", "algo.setsockopt", "socket.IPPROTO_RDP", "srv.bind", "socket.TIPC_ADDR_NAME", "socket.IPV6_RECVHOPLIMIT", "self.assertTrue", "socket.CAN_RAW_FILTER", "errno.EWOULDBLOCK", "support.is_android", "other.proto", "self.cli_conn", "thread.exit", "socket.sethostname", "socket.AF_ALG", "self.fail_timeout", "unittest.SkipTest", "self.create_alg", "testSetTrafficClassAndHopLimit.client_skip", "self.server_crashed", "org.gettimeout", "socket.CAN_BCM_RX_DELETE", "socket.SO_VM_SOCKETS_BUFFER_SIZE", "socket.CAN_BCM_TX_RESET_MULTI_IDX", "self.can_id", "support.wait_threads_exit", "signal.SIGALRM", "support.run_unittest", "socket.getdefaulttimeout", "MSG.decode", "sock._sendfile_use_sendfile", "contextlib.contextmanager", "self.build_can_frame", "self.BUFSIZE", "self.sock", "fds.frombytes", "self.port", "sock.set_inheritable", "traceback.format_exc", "line.startswith", "obj.client_skip", "self.source_port", "sys.platform", "testSendmsgDontWait.client_skip", "bcm.close", "s.bind", "math.acosh", "other.type", "s.getsockopt", "e.winerror", "os.fsencode", "f.write", "socket.AF_QIPCRTR", "socket.CAN_BCM_RX_ANNOUNCE_RESUME", "self.checkTrafficClassAndHopLimit", "ctx.exception", "fcntl.FD_CLOEXEC", "s.gettimeout", "socket.SO_SNDBUF", "support.make_bad_fd", "testRecvmsgPeek.client_skip", "self.serv_skipped", "socket.has_dualstack_ipv6", "self.msg_flags_common_set", "SocketConnectedTest.clientTearDown", "signal.alarm", "other.family", "a.frombytes", "support.unlink", "file.tell", "s.get_inheritable", "self.checkFlags", "testRecvHopLimitCMSG_SPACE.client_skip", "socket.CAN_BCM_TX_ANNOUNCE", "conn.recv", "socket.getservbyname", "socket.PF_RDS", "c.close", "sock.getsockname", "buf.tobytes", "self.traffic_class", "socket.CAN_BCM_TX_DELETE", "self.sendAncillaryIfPossible", "sock._closed", "fcntl.F_SETFD", "self.socklen_t_limit", "s.fileno", "srv.listen", "s1.get_inheritable", "socket.AF_VSOCK", "os.urandom", "os.O_NONBLOCK", "err.errno", "self.thread", "support.threading_cleanup", "errno.EAFNOSUPPORT", "self.assertRaisesRegex", "socket._GiveupOnSendfile", "self.assertIn", "self._cleanup_lock", "self.s", "self.write_msg", "socket.TIPC_ADDR_NAMESEQ", "errno.EAGAIN", "unittest.skipIf", "s.proto", "sys.exc_info", "self.checkHopLimit", "conn.close", "socket.CAN_BCM_TX_SETUP", "socket.getnameinfo", "socket.IPPROTO_IGP", "socket.SIO_KEEPALIVE_VALS", "SocketCANTest.__init__", "self.cli_finished", "sock.accept", "socket.AI_PASSIVE", "socket.ntohl", "org.type", "support.cpython_only", "pickle.dumps", "os.name", "threading.Thread", "socket.herror", "self.clientTearDown", "self.assertEqual", "socket.SOCK_STREAM", "self.check_sendall_interrupted", "ThreadableTest.__init__", "self.meth_from_sock", "socket.AF_TIPC", "self.sendmsg_to_server_defaults", "testFDPassCMSG_SPACE.client_skip", "socket.CAN_BCM_RX_NO_AUTOTIMER", "SocketRDSTest.__init__", "op.sendmsg", "self.bindClient", "socket.AF_UNIX", "s.setsockopt", "self.connaddr", "socket.SOCK_RAW", "self.recv_data", "s.getblocking", "self._test_socket_fileno", "conn.sendall", "os.close", "socket.NI_NUMERICHOST", "self.badfd", "socket.gethostname", "self.queue", "ThreadedRDSSocketTest.__init__", "s1.close", "socket.CAN_BCM_RX_STATUS", "socket.CAN_BCM", "sd.recv", "p.pid", "source.close", "self.checkNonblock", "cli_thread.join", "s2.connect", "self.sendToServer", "sock.sendfile", "sock.setsockopt", "s1.bind", "self.assertIsInstance", "fds.itemsize", "c.settimeout", "fds.append", "tests.append", "_testcapi.ULONG_MAX", "socket.ALG_SET_AEAD_ASSOCLEN", "ThreadedCANSocketTest.__init__", "fcntl.fcntl", "sock.gettimeout", "self.checkRecvmsgFDs", "socket.IPPROTO_UDP", "self.cf2", "org.proto", "support.find_unused_port", "socket.fromfd", "socket.SOCK_NONBLOCK", "bcm.connect", "self.UNIX_PATH_MAX", "self.dissect_can_frame", "data.ljust", "socket.SOCK_CLOEXEC", "testSecondCmsgTrunc1.client_skip", "newsock.get_inheritable", "self.compareSockets", "pickle.loads", "sock.setblocking", "srv.close", "socket.CAN_BCM_RX_TIMEOUT", "self.checkTruncatedHeader", "socket.IPV6_HOPLIMIT", "testFDPassSeparate.client_skip", "socket.ALG_SET_AEAD_AUTHSIZE", "sys.maxsize", "socket.MSG_CTRUNC", "socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID", "s.connect", "msg.decode", "self.evt2", "cli.connect", "unittest.TestCase", "self.evt", "self.assertFalse", "socket.NI_NUMERICSERV", "srv.setsockopt", "self.closeRecvmsgFDs", "socket.MSG_DONTWAIT", "errno.ENOTCONN", "self.read_mode", "s1.getsockname", "ThreadedTCPSocketTest.clientSetUp", "sock.fileno", "algo.accept", "support.get_socket_conn_refused_errs", "s.family", "queue.Queue", "b.decode", "self.clientSetUp", "socket.CAN_BCM_RX_FILTER_ID", "multiprocessing.Process", "support.threading_setup", "socket.CAN_BCM_RX_CHECK_DLC", "self.checkInterruptedRecv", "_socket.AF_INET", "self.read_msg", "self.bufsize", "self.event", "ThreadableTest.clientTearDown", "self.assertGreater", "self.checkTruncatedArray", "self.data1", "s.setblocking", "SocketConnectedTest.tearDown", "ThreadedUDPSocketTest.__init__", "sock.connect", "p.join", "support.SOCK_MAX_SIZE", "sys.getfilesystemencoding", "socket.gaierror", "socket.SocketKind", "_socket.socket", "sock0.fileno", "sock.recv", "sock0.close", "os.SEEK_SET", "socket.AF_INET", "event.wait", "support.HOSTv4", "socket.if_nameindex", "self.write_file", "threading.Event", "p.fileno", "tempfile.mkstemp", "conn.send", "platform.system", "itertools.count", "s.detach", "self.wait_threads", "socket.inet_aton", "testSingleCmsgTrunc0.client_skip", "struct.pack", "m.append", "socket.CAN_RAW", "errno.EBADF", "socket.IPPROTO_SCTP", "os.unlink", "socket.SOCK_RDM", "random.choice", "self.cli_addr", "cls.FILEDATA", "s2.getpeername", "socket.CAN_BCM_TX_SEND", "self.msg_flags_non_eor_indicator"]}, "test_socketserver.py": {"libraries": ["unittest", "io", "select", "threading", "socketserver", "contextlib", "test.support", "test.support.verbose", "signal", "test.support.reap_threads", "test.support.reap_children", "tempfile", "socket", "os"], "function_names": ["signal_alarm", "signal_handler", "verify_request", "test_shutdown", "setUp", "test_TCPServer", "test_UnixStreamServer", "test_ForkingUnixDatagramServer", "test_all", "dgram_examine", "test_UnixDatagramServer", "test_tcpserver_bind_leak", "handle", "simple_subprocess", "test_ForkingTCPServer", "shutdown_request", "test_basics", "run_client", "wait_done", "stream_examine", "test_shutdown_request_called_if_verify_request_false", "pickaddr", "test_ForkingUnixStreamServer", "test_forking_not_handled", "__init__", "test_close_immediately", "make_server", "handle_error", "test_context_manager", "check_result", "test_threading_handled", "test_write", "tearDown", "test_ThreadingUnixDatagramServer", "receive", "run_server", "test_ThreadingTCPServer", "test_ForkingUDPServer", "test_UDPServer", "test_sync_not_handled", "test_threading_not_handled", "test_sync_handled", "test_ThreadingUDPServer", "test_forking_handled", "test_ThreadingUnixStreamServer", "test_threads_reaped"], "function_calls": ["signal_alarm", "getattr", "MyServer", "BaseErrorTestServer", "simple_subprocess", "RuntimeError", "ThreadingErrorTestServer", "isinstance", "super", "open", "range", "reap_children", "ForkingErrorTestServer", "dir", "_real_select", "float", "hasattr", "pthread_kill", "len", "testfunc", "receive", "print"], "class_names": ["MyHandler", "ThreadingErrorTestServer", "ForkingErrorTestServer", "SocketServerTest", "ErrorHandlerTest", "SocketWriterTest", "BadHandler", "BaseErrorTestServer", "ForkingUnixStreamServer", "MyServer", "ForkingUnixDatagramServer", "Handler", "MiscTestCase"], "class_method_calls": ["s.makefile", "s.sendto", "server.shutdown", "server.received", "tempfile.mktemp", "unittest.skipUnless", "self.assertEqual", "socket.SOCK_STREAM", "self.pickaddr", "server.wfile_fileno", "t.start", "self.close_request", "threading.get_ident", "socket.AF_UNIX", "self.assertRaises", "background.join", "server.active_children", "self.server_address", "s.shutdown", "server.wfile", "socketserver.UnixStreamServer", "socketserver.TCPServer", "socketserver.ThreadingUnixDatagramServer", "self.assertCountEqual", "self.server", "self.done", "s.serve_forever", "self.assertIsInstance", "socketserver.ThreadingUnixStreamServer", "self.wait_done", "server.handle_request", "socketserver.ThreadingTCPServer", "socketserver.UDPServer", "server._threads", "self.request", "socketserver.UnixDatagramServer", "server.request_fileno", "self.test_files", "socketserver.ForkingMixIn", "interrupted.wait", "select.select", "os.fork", "testcase.assertEqual", "socketserver.ThreadingMixIn", "signal.SIGUSR1", "contextlib.contextmanager", "s.connect", "unittest.TestCase", "self.assertFalse", "self.stream_examine", "self.dgram_examine", "socketserver.ForkingTCPServer", "self.assertLess", "self.make_server", "server.sent2", "self.run_server", "s.bind", "test.support", "reader.readline", "server.shutdown_called", "socket.create_connection", "self.addCleanup", "name.startswith", "self.handle_request", "self.wfile", "s.server_close", "signal.alarm", "server.server_address", "signal.signal", "svrcls.address_family", "self.exception", "expected.append", "unittest.main", "server.server_close", "socketserver.BaseRequestHandler", "socketserver.StreamRequestHandler", "socket.SOCK_DGRAM", "log.read", "threads.append", "sock.recv", "self.port_seed", "os.waitpid", "self.server_close", "self.check_result", "socket.AF_INET", "reader.read", "socketserver.DatagramRequestHandler", "socket.IPPROTO_TCP", "self.rfile", "t.daemon", "threading.Event", "t.join", "server.serve_forever", "server.address_family", "io.BufferedIOBase", "os.remove", "server.sent1", "background.start", "server.socket", "socketserver.__all__", "log.write", "self.shutdown_called", "socketserver.ThreadingUDPServer", "s.sendall", "interrupted.set", "s.close", "socketserver.ForkingUDPServer", "self.skipTest", "os._exit", "threading.Thread", "socket.socket"]}, "test_sort.py": {"libraries": ["unittest", "test.support", "random", "functools.cmp_to_key"], "function_names": ["check", "k", "test_reverse", "mutating_cmp", "my_cmp", "__repr__", "test_key_with_mutating_del", "test_unsafe_long_compare", "test_unsafe_object_compare", "__init__", "test_baddecorator", "__lt__", "__del__", "test_key_with_exception", "test_safe_object_compare", "check_against_PyObject_RichCompareBool", "test_stability", "test_decorated", "test_undetected_mutation", "test_unsafe_tuple_compare", "testStressfully", "test_unsafe_latin_compare", "test_bug453523", "test_unsafe_float_compare", "test_reverse_stability", "test_key_with_mutation", "test_not_all_tuples", "my_cmp_reversed", "bad_key", "test_key_with_mutating_del_and_exception"], "function_calls": ["check", "cmp_to_key", "Stable", "sorted", "WackyComparator", "Complains", "id", "str", "range", "WackyList1", "list", "check_against_PyObject_RichCompareBool", "C", "int", "zip", "enumerate", "float", "len", "bytes", "PointlessComparator", "print"], "class_names": ["WackyList1", "WackyList2", "Stable", "C", "TestDecorateSortUndecorate", "TestBugs", "WackyComparator", "TestBase", "Complains", "SortKiller", "TestOptimizedCompares", "PointlessComparator"], "class_method_calls": ["other.key", "self.assertEqual", "augmented.sort", "L.pop", "self.assertIs", "Complains.maybe_complain", "elem.__class__", "e.index", "x.lower", "L.append", "int.__lt__", "copy2.sort", "self.index", "other.i", "random.seed", "self.assertRaises", "copy.sort", "support.verbose", "sizes.extend", "random.shuffle", "s.sort", "str.lower", "random.randrange", "y.reverse", "unittest.main", "y.lower", "raw.sort", "s.reverse", "data.sort", "copy1.sort", "self.i", "random.random", "L.sort", "self.key", "unittest.TestCase"]}, "test_spwd.py": {"libraries": ["unittest", "test.support", "os"], "function_names": ["test_getspall", "test_getspnam_exception", "test_getspnam"], "function_calls": ["str", "hasattr"], "class_names": ["TestSpwdNonRoot", "TestSpwdRoot"], "class_method_calls": ["self.assertIsInstance", "entry.sp_flag", "entry.sp_pwdp", "unittest.skipUnless", "self.assertEqual", "support.import_module", "os.geteuid", "entry.sp_inact", "cx.exception", "entry.sp_warn", "os.fsencode", "spwd.struct_spwd", "entry.sp_expire", "entry.sp_pwd", "self.assertRaises", "spwd.getspnam", "spwd.getspall", "entry.sp_nam", "entry.sp_namp", "entry.sp_lstchg", "unittest.main", "entry.sp_min", "entry.sp_max", "self.skipTest", "unittest.TestCase"]}, "test_sqlite.py": {"libraries": ["unittest", "sqlite3.test.userfunctions", "sqlite3.test.transactions", "sqlite3.test.dump", "sqlite3.test.backup", "sqlite3.test.types", "sqlite3.test.regression", "sqlite3.test.hooks", "test.support", "sqlite3", "sqlite3.test.factory", "sqlite3.test.dbapi"], "function_names": ["load_tests"], "function_calls": ["print"], "class_names": [], "class_method_calls": ["userfunctions.suite", "sqlite3.version", "dbapi.suite", "types.suite", "transactions.suite", "hooks.suite", "unittest.TestSuite", "sqlite3.sqlite_version", "dump.suite", "backup.suite", "regression.suite", "test.support", "unittest.main", "factory.suite"]}, "test_ssl.py": {"libraries": ["urllib.request", "unittest.mock", "struct", "ssl._TLSMessageType", "test.support", "sysconfig", "traceback", "unittest", "pprint", "platform", "select", "threading", "asyncore", "datetime", "http.client", "weakref", "socket", "os", "functools", "test.ssl_servers.make_https_server", "re", "time", "gc", "errno", "ssl._TLSContentType", "sys", "ctypes", "ssl.TLSVersion"], "function_names": ["server_params_test", "test_connect", "keylog_lines", "test_read_write", "test_bio_handshake", "utc_offset", "test_load_default_certs_env_windows", "getpass_bytearray", "wrapper", "test_num_tickest", "set_socket_so_linger_on_with_zero_timeout", "test_min_max_version_tlsv1_1", "test_pha_not_tls13", "cb_returning_alert", "test_str", "test_socketserver", "test_protocol_sslv3", "test_sendfile", "__init__", "can_clear_options", "test_sni_callback_alert", "test_sni_callback_refcycle", "test_min_max_version_mismatch", "cb_raising", "test_default_ecdh_curve", "__str__", "test_pha_setter", "is_ubuntu", "test_DER_to_PEM", "test_empty_cert", "getpass_bytes", "test_ciphers", "test_bpo37428_pha_cert_none", "test_connect_with_context", "test_errors_sslwrap", "test_load_cert_chain", "test_min_max_version_tlsv1_2", "test_context_custom_class", "test_compression_disabled", "test_preauth_data_to_tls_client", "handle_close", "test_create_default_context", "test_wrap_socket", "seclevel_workaround", "test_cert_time_to_seconds_locale", "test_ecc_cert", "test_server_accept", "test_version_basic", "test_selected_alpn_protocol", "test_match_hostname", "test_enum_crls", "test_connect_ex_error", "test_session_handling", "cert_time_fail", "listener", "test_asn1object", "test_sni_callback", "test_recv_zero", "testing_context", "__exit__", "test_getpeercert", "getpass_unicode", "cb_wrong_return_type", "test_load_default_certs_env", "test_wrapped_unconnected", "test_preauth_data_to_tls_server", "test_tls1_3", "test_protocol", "test_get_ca_certs", "_test_get_server_certificate", "test_tls_unique_channel_binding", "test_crl_check", "test_set_ecdh_curve", "test_unwrap", "test_protocol_tlsv1_1", "ok", "_do_ssl_handshake", "test_timeout", "test_makefile_close", "__call__", "servername_cb", "test_wrong_cert_tls13", "non_linux_skip_if_other_okay_error", "test_buffer_types", "test_protocol_sslv2", "test_do_handshake_enotconn", "test_parse_cert_CVE_2019_5010", "test_subclass", "_test_get_server_certificate_fail", "test_set_default_verify_paths", "test_session", "test_load_verify_cadata", "handle_accepted", "test_enum_certificates", "test_protocol_tlsv1", "test_recv_send", "getpass_badpass", "_recv_into", "test_load_verify_locations", "test_https_client_non_tls_response_ignored", "test_bad_server_hostname", "test_dh_params", "test_keylog_defaults", "requires_tls_version", "test_malformed_cert", "test_compression", "connect", "test_openssl_version", "test_get_ciphers", "has_tls_protocol", "test_check_hostname", "test_bio_read_write_data", "test_keylog_env", "test_connect_ex", "setUp", "test_random_fork", "test_options", "test_parse_all_sans", "sni_cb", "have_verify_flags", "test_refcycle", "_assert_context_options", "test_connect_with_context_fail", "test_msg_callback", "test_main", "test_unsupported_dtls", "_recvfrom_into", "test_str_for_enums", "test_context_client_server", "test_load_dh_params", "test_PROTOCOL_TLS", "test_selected_alpn_protocol_if_server_uses_alpn", "test_selected_npn_protocol", "test_cert_store_stats", "test_connect_fail", "test_msg_callback_tls12", "fill_buffer", "test_ecdh_curve", "local_february_name", "test_min_max_version", "handle_error", "test_get_server_certificate", "close", "test_python_ciphers", "test_pha_no_pha_server", "wrap_conn", "test_get_server_certificate_ipv6", "test_non_blocking_handshake", "start", "test_protocol_tlsv1_2", "test_getpeercert_enotconn", "test_sni_callback_wrong_return_type", "test_echo", "test_sni_callback_raising", "msg_cb", "test_pending", "call_after_accept", "test_check_hostname_idn", "test_connect_cadata", "bad_cert_test", "ssl_io_loop", "test_pha_optional_nocert", "test_keylog_filename", "test_timeout_connect_ex", "sni_contexts", "test_nonblocking_send", "getpass_bad_type", "stop", "readable", "test_wrong_cert_tls12", "check_common_name", "test_alpn_protocols", "test_dual_rsa_ecc", "data_file", "try_protocol_combo", "test_constants", "test__create_stdlib_context", "test_lib_reason", "decorator", "test_handshake_timeout", "test_no_shared_ciphers", "test_npn_protocols", "test_hostname_checks_common_name", "test_load_default_certs", "test_pha_required", "test_connect_capath", "test_parse_cert", "getpass_huge", "serve", "test_get_server_certificate_fail", "test_error_types", "__enter__", "test_session_stats", "test_ssl_cert_verify_error", "test_read_write_after_close_raises_valuerror", "test_server_side", "getpass", "test_constructor", "test_private_init", "test_get_default_verify_paths", "test_min_max_version_sslv3", "handle_read", "test_dealloc_warn", "test_non_blocking_connect_ex", "test_random", "run", "test_get_ca_certs_capath", "test_cert_time_to_seconds_timezone", "test_parse_cert_CVE_2013_4238", "test_cert_time_to_seconds", "test_shared_ciphers", "test_unknown_channel_binding", "cert_time_ok", "test_rude_shutdown", "asn1time", "fail", "no_sslv2_implies_sslv3_hello", "test_eof", "_have_secp_curves", "test_purpose_enum", "read", "write", "getpass_exception", "has_tls_version", "test_pha_required_nocert", "test_context_setget", "dummycallback", "test_verify_flags", "test_malformed_key", "test_verify_mode_protocol", "test_asyncore_server", "test_pha_optional", "test_msg_callback_deadlock_bpo43577", "test_starttls", "test_pha_no_pha_client", "connector"], "function_calls": ["server_params_test", "object", "sorted", "testing_context", "getattr", "have_verify_flags", "memoryview", "ret_val_meth", "data_file", "try_protocol_combo", "utc_offset", "_test_get_server_certificate", "repr", "set_socket_so_linger_on_with_zero_timeout", "RuntimeError", "isinstance", "test_main", "AsyncoreEchoServer", "super", "ok", "str", "GetPassCallable", "can_clear_options", "SynchronizedHTTPSConnection", "make_https_server", "open", "wr", "Exception", "AssertionError", "range", "ThreadedEchoServer", "local_february_name", "ValueError", "list", "handle_error", "is_ubuntu", "hex", "set", "_test_get_server_certificate_fail", "int", "type", "func", "fail", "asn1time", "no_sslv2_implies_sslv3_hello", "hasattr", "_have_secp_curves", "bytearray", "len", "test_wrap_socket", "any", "has_tls_version", "seclevel_workaround", "recv_meth", "requires_tls_version", "send_meth", "has_tls_protocol", "connector", "print"], "class_names": ["EchoServer", "NetworkedTests", "BasicSocketTests", "SimpleBackgroundTests", "MySSLSocket", "ThreadedTests", "AsyncoreEchoServer", "SSLObjectTests", "GetPassCallable", "SynchronizedHTTPSConnection", "ConnectionHandler", "SingleConnectionTestServerThread", "TestPostHandshakeAuth", "ThreadedEchoServer", "MySSLObject", "ContextTests", "SSLErrorTests", "MemoryBIOTests", "TestSSLDebug", "TestPreHandshakeClose"], "class_method_calls": ["ss.gettimeout", "outdata.strip", "e.errno", "client_context.options", "ssl.OPENSSL_VERSION_INFO", "client_context.verify_mode", "ssl.SSL_ERROR_WANT_READ", "support.catch_unraisable_exception", "time.localtime", "ssl.OPENSSL_VERSION", "ssl.DER_cert_to_PEM_cert", "ssl.PROTOCOL_TLS_SERVER", "sslobj.getpeercert", "self.server", "msg.append", "support.HOST", "err.args", "ctx.hostname_checks_common_name", "client_context.load_verify_locations", "ctx.sslsocket_class", "conn_to_client.close", "indata.lower", "conn.write", "time.timezone", "listener_gone.wait", "support.import_module", "server_accept_called.set", "ctx.verify_mode", "func.__name__", "cx.exception", "client.setblocking", "c.setblocking", "s.server_side", "ssl.OP_NO_COMPRESSION", "self.non_linux_skip_if_other_okay_error", "self.assertNotIn", "self.subTest", "os.fork", "select.select", "ss.get_channel_binding", "ssl.VERIFY_CRL_CHECK_CHAIN", "val.shortname", "ss.makefile", "ss.recvfrom_into", "self.assertIsNot", "errno.ECONNREFUSED", "os.path", "self._context", "gc.collect", "asyncore.dispatcher_with_send", "ssl.CHANNEL_BINDING_TYPES", "support.bind_port", "os.read", "stats.update", "client_context.minimum_version", "listener_ready.set", "ctypes.c_ubyte", "server_context.set_ecdh_curve", "ssl.RAND_status", "socket.create_connection", "http.client", "ssl.OP_NO_TLSv1_2", "s_in.write", "outgoing.read", "ctx.check_hostname", "ready_for_server_wrap_socket.wait", "ssl.SSLCertVerificationError", "server.port", "ctx.verify_flags", "self.shared_ciphers", "self.sslconn", "evt.wait", "ssl.PROTOCOL_TLSv1", "self.assertWarns", "time.strftime", "KEY_PASSWORD.encode", "re.I", "self._do_ssl_handshake", "server_context.set_servername_callback", "catch.unraisable", "session3.id", "bio.write", "context.set_ciphers", "errno.EINPROGRESS", "server_context.keylog_filename", "s.settimeout", "ctx.options", "ss.connect", "msg.lower", "self.assertIsNotNone", "ssl.HAS_NPN", "c.do_handshake", "test.fail", "_TLSMessageType.CHANGE_CIPHER_SPEC", "wrap_error.library", "self.fail", "ssl.OP_ALL", "connection.getresponse", "server_context.options", "socket.timeout", "ssl.SSLObject", "self.read", "session4.id", "s.sendmsg", "s.version", "server_context.set_alpn_protocols", "server_responding.set", "time.daylight", "self.selected_npn_protocols", "sslobj.get_channel_binding", "ssl.SSLError", "server.__enter__", "ssl.get_protocol_name", "server.selected_alpn_protocols", "self._ssl_accepting", "ssl.OP_NO_TLSv1_1", "s.sendall", "client_ctx.wrap_bio", "server_context.load_dh_params", "tls_client.recv", "s.accept", "self.recv", "context.check_hostname", "socket.socket", "sock.context", "ssl._PROTOCOL_NAMES", "bio.write_eof", "tls_client.close", "ssl.OP_SINGLE_ECDH_USE", "os.write", "val.oid", "e.exception", "ssl.get_default_verify_paths", "sys.stdout", "protocol.startswith", "s.read", "server.listener", "client_context2.wrap_socket", "server.close", "self.handle_read_event", "val.nid", "self.host", "self.write", "self.assertRaises", "errno.ENETUNREACH", "s.verify_client_post_handshake", "ssl.enum_certificates", "server.accept", "ctx.protocol", "ssl.MemoryBIO", "server.selected_npn_protocols", "client_context.protocol", "ssl.PROTOCOL_TLS_CLIENT", "self.context", "ssl.CERT_OPTIONAL", "client_context.post_handshake_auth", "ctx2.load_verify_locations", "s.startswith", "session.timeout", "wrap_error.args", "ssl.CERT_NONE", "socket.SOL_SOCKET", "server.conn_errors", "ctx.sslobject_class", "client_context.check_hostname", "ssl.SSLContext", "paths.capath", "cm.warning", "ssl.PROTOCOL_TLSv1_2", "unittest.mock", "self.timeout", "platform.platform", "cm.exception", "server.do_handshake", "re.search", "self.wrap_error", "ssl.CertificateError", "time.altzone", "asyncore.close_all", "self.cert_time_ok", "s_out.pending", "socket.create_server", "ctx.cert_store_stats", "ctx.load_dh_params", "os.curdir", "s.recvmsg", "self.assertIsNone", "server_responding.wait", "self.call_after_accept", "sslobj.do_handshake", "s.selected_alpn_protocol", "ctx.load_cert_chain", "self.certfile", "sock.close", "server.unwrap", "handler.start", "s.getsockname", "_TLSMessageType.SERVER_KEY_EXCHANGE", "time.monotonic", "self.assertLess", "client_context.set_ciphers", "server_can_continue_with_wrap_socket.set", "sock.getpeercert", "errno.EHOSTUNREACH", "session.has_ticket", "ssl.RAND_bytes", "ctx.post_handshake_auth", "ssl.PROTOCOL_SSLv2", "self.assertLessEqual", "self.ssl_ctx", "msg.startswith", "self.addCleanup", "p2.endswith", "s.getpeercert", "dt.replace", "ssl.SSLZeroReturnError", "ssl.SSLWantReadError", "client.unwrap", "ssl._inet_paton", "server_accept_called.wait", "client.send", "ss.recvmsg_into", "server_context.load_cert_chain", "evt.set", "socket.SOCK_DGRAM", "ss.sendmsg", "server_context.set_npn_protocols", "client_context.set_ecdh_curve", "ctx.load_verify_locations", "s._sslobj", "s.do_handshake", "os.waitpid", "s.sendfile", "self._assert_context_options", "ssl._ssl", "client_context.set_npn_protocols", "s.send", "server_ctx.wrap_bio", "wrap_error.reason", "ssl_sock.context", "ctx1.wrap_socket", "f.read", "ssl.PROTOCOL_TLS", "server.shared_ciphers", "client_context2.options", "s.dup", "context.wrap_socket", "sock.sendall", "session2.timeout", "ssl.SSLSyscallError", "s.recv", "started.wait", "self.daemon", "self.starttls_server", "ssl.OPENSSL_VERSION_NUMBER", "self.EchoServer", "s.close", "ctx.get_ca_certs", "self.skipTest", "self.__class__", "ctx.wrap_socket", "ss.sendto", "ctx.set_default_verify_paths", "self.chatty", "ctx.num_tickets", "self.running", "s.sendto", "ss.close", "calls.append", "unittest.skipUnless", "ssl.HAS_ALPN", "support.gc_collect", "self.assertNotEqual", "conn.read", "self.assertGreaterEqual", "self.check_common_name", "s.session", "ss._sslobj", "self.assertIs", "t.start", "support.IPV6_ENABLED", "c_out.pending", "support.TESTFN", "ssl.Purpose", "support.transient_internet", "PROTOCOL_TO_TLS_VERSION.get", "obj.longname", "ctx.wrap_bio", "ssl.OP_NO_SSLv3", "support.is_resource_enabled", "ssl.cert_time_to_seconds", "s.recvmsg_into", "server.join", "self.join", "errno.EWOULDBLOCK", "self.assertTrue", "server.listen", "ctx.maximum_version", "ctx.set_ecdh_curve", "server_context._msg_callback", "ss.dup", "obj.oid", "ssl._create_stdlib_context", "ssl.RAND_pseudo_bytes", "server.__exit__", "errno.ENOENT", "client_context.keylog_filename", "other_context.load_cert_chain", "ss.recvfrom", "s.cipher", "ssl.VERIFY_X509_STRICT", "server.wrap_error", "ssl.PEM_FOOTER", "cipher.split", "functools.wraps", "errno.ETIMEDOUT", "ss.context", "bio.read", "platform.mac_ver", "s_out.read", "self.stop", "ssl.CERT_REQUIRED", "unittest.SkipTest", "ssl.SSL_ERROR_WANT_WRITE", "ctx.set_servername_callback", "s.recv_into", "ss.send", "support.run_unittest", "ctx.get_ciphers", "context.load_verify_locations", "ssl.DefaultVerifyPaths", "self.listen", "ssl.PROTOCOL_SSLv23", "self.sock", "server_can_continue_with_wrap_socket.wait", "self.port", "context.verify_mode", "server_context.set_ciphers", "self.keylog_lines", "client.recv", "server_context.minimum_version", "ssl.OP_SINGLE_DH_USE", "self.conn_errors", "sys.platform", "sslobj.cipher", "server_context.sni_callback", "ssl.VERIFY_CRL_CHECK_LEAF", "server.received_data", "self.bad_cert_test", "remote.send", "os.fsencode", "f.write", "self.ssl_io_loop", "socket.SO_LINGER", "ss.recv_into", "bio.pending", "ssl.PROTOCOL_SSLv3", "data.lower", "errno.ECONNABORTED", "bio.eof", "support.unlink", "c.connect", "s.listen", "self.socket", "self.send", "os.environ", "c.close", "ssl.OP_NO_SSLv2", "ssl.create_default_context", "version.name", "ssl.match_hostname", "s.server_hostname", "client.getsockname", "self.ConnectionHandler", "ssl.PEM_cert_to_DER_cert", "f.close", "client.do_handshake", "urllib.request", "self.sni_contexts", "err.errno", "support.threading_cleanup", "obj.shortname", "e.verify_code", "self.assertRaisesRegex", "self.assertIn", "t.join", "sock.do_handshake", "ctx.keylog_filename", "errno.EAGAIN", "support.catch_threading_exception", "unittest.skipIf", "sys.exc_info", "sslobj.read", "support.verbose", "client_context._msg_callback", "ctx.load_default_certs", "conn.close", "ss.recvmsg", "self.start", "listener_gone.set", "s.selected_npn_protocol", "server_context.verify_mode", "asyncore.dispatcher", "client_can_continue_with_wrap_socket.wait", "plats.items", "self.flag", "support.cpython_only", "os.name", "c_in.write", "ssl.HAS_ECDH", "self.handle_close", "self.received_data", "platform.win32_ver", "threading.Thread", "tls_socket.recv", "f.info", "os.pipe", "session.ticket_lifetime_hint", "self.connectionchatty", "p2.startswith", "s.session_reused", "asyncore.loop", "self.assertEqual", "socket.SOCK_STREAM", "sslobj.write", "conns.append", "s.get_channel_binding", "self.close", "server.server_side", "ss.fileno", "err.reason", "ssl.get_server_certificate", "ss.recv", "os.close", "ssl.RAND_egd", "self.selected_alpn_protocols", "client_context.set_alpn_protocols", "self.addr", "support.check_warnings", "ssl.OP_NO_TLSv1_3", "obj.nid", "ctx.minimum_version", "support.TestFailed", "sysconfig.get_config_var", "sock.setsockopt", "ssl.RAND_add", "self.assertIsInstance", "self.listener", "ssl.HAS_SNI", "context.options", "session2.time", "datetime.datetime", "server_context.post_handshake_auth", "c.settimeout", "client.connect", "protocol.name", "ssl._OPENSSL_API_VERSION", "handler.join", "session4.timeout", "ssl.wrap_socket", "tests.append", "self.SingleConnectionTestServerThread", "client_context.verify_flags", "server_context.maximum_version", "errno.EINVAL", "ctx1.load_verify_locations", "started.set", "client_context.wrap_socket", "remote.close", "session2.id", "errno.EPROTOTYPE", "client.close", "ssl.OP_NO_TLSv1", "self.active", "s.compression", "session.time", "ssl.PROTOCOL_TLSv1_1", "ctx.set_ciphers", "self.cert_time_fail", "server_context.session_stats", "s.connect", "s.write", "unittest.TestCase", "self.assertFalse", "val.longname", "ssl._ASN1Object", "sys.flags", "errno.ENOTCONN", "client_context.maximum_version", "conn.unwrap", "incoming.write", "remote.recv", "TLSVersion.TLSv1_2", "paths.cafile", "newsock.close", "session4.time", "self.server_addr", "sslobj.shared_ciphers", "support.threading_setup", "c_out.read", "functools.lru_cache", "traceback.format_exception", "self.assertGreater", "s.setblocking", "ready_for_server_wrap_socket.set", "ssl.SSLSocket", "sock.connect", "errno.ECONNRESET", "s.recvfrom_into", "sslobj._sslobj", "ssl.SSLEOFError", "dt.strftime", "sock.recv", "session.id", "connection.request", "ssl_ctx.wrap_socket", "pprint.pformat", "sslobj.version", "socket.AF_INET", "client_context.load_cert_chain", "s.connect_ex", "client_can_continue_with_wrap_socket.set", "ctx.session_stats", "listener_ready.wait", "ubyte.from_buffer_copy", "ssl.VERIFY_DEFAULT", "ssl.OP_CIPHER_SERVER_PREFERENCE", "threading.Event", "_TLSContentType.CHANGE_CIPHER_SPEC", "ssl.enum_crls", "kwargs.get", "ssl.ALERT_DESCRIPTION_ACCESS_DENIED", "conn_to_client.send", "ssl.HAS_NEVER_CHECK_COMMON_NAME", "ssl.SSLWantWriteError", "trust_oids.update", "server_context.load_verify_locations", "ssl.PEM_HEADER", "_TLSContentType.HANDSHAKE", "s.recvfrom", "e.verify_message", "support.run_with_locale", "struct.pack", "errno.EBADF", "sslobj.unwrap", "weakref.ref", "context.load_cert_chain", "msg.strip", "self.wrap_conn", "incoming.write_eof", "os._exit", "support.EnvironmentVarGuard", "client_context.hostname_checks_common_name", "ssl.TLSVersion"]}, "test_startfile.py": {"libraries": ["unittest", "platform", "os.path", "sys", "test.support", "os"], "function_names": ["test_empty", "test_nonexisting"], "function_calls": ["startfile"], "class_names": ["TestCase"], "class_method_calls": ["path.join", "unittest.skipIf", "path.dirname", "sys.executable", "support.get_attribute", "unittest.TestCase", "platform.win32_is_iot", "unittest.main", "support.change_cwd", "self.assertRaises"]}, "test_stat.py": {"libraries": ["unittest", "test.support.TESTFN", "test.support.skip_unless_bind_unix_socket", "test.support.import_fresh_module", "sys", "socket", "os"], "function_names": ["test_devices", "test_fifo", "setUp", "test_mode", "test_directory", "test_socket", "assertS_IS", "get_mode", "test_link", "test_module_attributes", "test_file_attribute_constants"], "function_calls": ["ValueError", "sorted", "import_fresh_module", "getattr", "str", "callable", "open", "func", "hasattr"], "class_names": ["TestFilemode", "TestFilemodeCStat", "TestFilemodePyStat"], "class_method_calls": ["self.assertIsInstance", "os.mkdir", "sys.platform", "unittest.skipUnless", "os.mkfifo", "self.assertEqual", "self.formats", "s.bind", "self.file_attributes", "os.symlink", "os.getcwd", "unittest.SkipTest", "self.statmod", "os.lstat", "self.get_mode", "socket.AF_UNIX", "os.remove", "os.rmdir", "self.file_flags", "self.stat_struct", "unittest.main", "self.permission_bits", "os.path", "self.assertS_IS", "os.chmod", "name.lstrip", "os.name", "self.skipTest", "self.assertTrue", "self.format_funcs", "os.stat", "unittest.TestCase", "self.assertFalse", "os.devnull", "socket.socket"]}, "test_statistics.py": {"libraries": ["unittest", "doctest", "copy", "random", "fractions.Fraction", "bisect", "collections", "decimal", "pickle", "sys", "decimal.Decimal", "collections.abc", "math", "statistics", "test.support"], "function_names": ["test_approx_equal_both1", "test_exactly_equal_both", "test_cdf", "test_mismatched_infs", "_calc_errors", "test_decimal_nan", "test_check_all", "test_error_msg", "__pow__", "check_exact_equal", "test_strings_fail", "test_none_data", "test_bytes_fail", "__init__", "test_doc_tests", "test_unique_data", "test_meta", "test_torture", "test_nominal_data", "__add__", "tearDown", "test_exactly_unequal_fractions", "testZeroes", "check_type_coercions", "do_check_both", "check_coerce_to", "test_ints", "test_error_cases", "test_exactly_equal_absolute", "test_alternative_constructor", "test_range_data", "check_infinity", "test_floats_exact", "test_bool", "test_negative_error", "test_symmetry", "test_interval", "__rsub__", "test_relative_symmetry", "test_error_msg_numeric", "do_exactly_equal_test", "test_fraction", "test_translation_and_scaling", "__rtruediv__", "__sub__", "test_exactly_equal_fractions", "test_basics", "test_empty_data", "test_equal_inputs", "test_equal_sized_groups", "test_bad_rel", "test_multiply_data_points", "test_sample_generation", "do_approx_equal_abs_test", "assertCoerceTo", "test_special_values", "test_exactly_unequal_floats", "test_bad_tol", "sign", "test_no_inplace_modifications", "test_mixed_sum", "test_regression_25177", "test_approx_equal_absolute_floats", "test_specific_cases", "test_center_not_at_mean", "test_bad_arg_types", "test_exactly_unequal_decimals", "simplified_sum", "check_for_type_error", "test_exact_uniform", "f", "test_approx_equal_both4", "test_negative_exponent", "test_overlap", "test_cross_zero", "test_non_numeric_types", "test_counter_data", "test_decimal_zeroes", "test_decimal", "do_exactly_unequal_test", "test_start_argument", "test_inf", "do_relative_symmetry", "test_domain_error_regression", "test_approx_equal_absolute_fractions", "prepare_values_for_repeated_single_test", "test_positive_exponent", "test_fractions", "test_compare_with_math_fsum", "test_even_number_repeated", "setUp", "test_c_functions", "do_approx_equal_rel_test", "test_negatives_raise", "__truediv__", "test_doubled_data", "approx_equal", "test_slots", "_nan_equal", "test_sign", "test_iter_list_same", "_check_approx_seq", "test_single_value", "test_even_ints", "test_decimals_exact", "test_unary_operations", "test_approx_equal_absolute_ints", "test_float_zeroes", "test_same_type_addition_and_subtraction", "test_approx_equal_both2", "test_float_mismatched_infs", "test_float", "test_pass_through", "test_discrete_data", "test_approx_equal_relative_decimals", "test_decimal_snan_raises", "test_approx_equal_both3", "test_infinity", "assertApproxEqual", "test_exactly_equal_decimals", "test_odd_fractions", "test_bimodal_data", "test_torture_pep", "test_exactly_equal_floats", "test_int", "assertCoerceRaises", "test_approx_equal_relative_fractions", "test_odd_ints", "test_pdf", "do_test_inf", "test_even_fractions", "test_approx_equal_relative_ints", "test_properties", "test_approx_equal_absolute_decimals", "test_finite", "test_float_nan", "test_error_msg_sequence", "test_equality", "test_decimal_basiccontext_mismatched_infs_to_nan", "test_no_args", "test_big_data", "test_instantiation_and_attributes", "test_repr", "test_numerictestcase_is_testcase", "test_has_exception", "do_symmetry_test", "__eq__", "test_shift_data", "_check_approx_num", "test_incompatible_types", "prepare_types_for_conservation_test", "test_type_of_data_collection", "test_hashability", "test_compare_to_variance", "test_floats", "generator", "overlap_numeric", "load_tests", "prepare_data", "test_types_conserved", "test_repeated_single_value", "generate_substrings", "test_float_inf", "test_quantiles", "test_pickle_and_copy", "do_test", "test_data_type_error", "test_exactly_equal_ints", "test_regression_20536", "test_odd_number_repeated", "test_order_doesnt_matter", "test_regression_20561", "test_decimals", "test_exactly_equal_relative", "test_singleton_lists", "test_odd_decimals", "test_big_and_small", "test_even_decimals", "test_nan", "test_zero", "test_py_functions", "test_shift_data_exact", "test_type_of_data_element", "test_specific_cases_inclusive", "test_various_input_types", "test_decimal_inf", "_make_std_err_msg", "test_exactly_unequal_ints", "test_approx_equal_relative_floats", "test_exactly_equal_absolute_decimals", "test_inv_cdf", "test_decimal_extendedcontext_mismatched_infs_to_nan"], "function_calls": ["check", "object", "min", "sorted", "getattr", "ND", "all", "abs", "_calc_errors", "MyFraction", "approx_equal", "multimode", "Fraction", "geometric_mean", "vars", "quantiles", "repr", "_nan_equal", "isinstance", "issubclass", "super", "NormalDist", "iter", "F", "MyInt", "tuple", "A", "fsum", "LognormalDist", "sign", "range", "ValueError", "list", "overlap_numeric", "set", "MyFloat", "kind", "int", "type", "zip", "next", "enumerate", "float", "D", "NewNormalDist", "fmean", "hasattr", "len", "_exact_ratio", "max", "SizedNormalDist", "Decimal", "MyDecimal", "type_", "map"], "class_names": ["StatisticsErrorTest", "ConvertTest", "TestModules", "TestMean", "SubclassOfB", "IsFiniteTest", "MySubclass", "TestNormalDistPython", "TestSign", "MyFraction", "FailNegTest", "ExactRatioTest", "TestMode", "TestNormalDistC", "TestMultiMode", "TestMedianLow", "UnivariateTypeMixin", "TestVariance", "TestFMean", "ApproxEqualExactTest", "TestMedian", "ApproxEqualSpecialsTest", "TestSumCommon", "AverageMixin", "NumericTestCase", "ApproxEqualUnequalTest", "_DoNothing", "SubclassOfA", "MyInt", "TestMedianHigh", "A", "SumSpecialValues", "UnivariateCommonMixin", "VarianceStdevMixin", "LognormalDist", "TestSum", "MyClass", "SumTortureTest", "DecimalToRatioTest", "MyFloat", "TestStdev", "TestGeometricMean", "W", "MyList", "V", "NewNormalDist", "ApproxEqualInexactTest", "GlobalsTest", "TestQuantiles", "TestApproxEqualErrors", "CoerceTest", "TestPStdev", "TestPVariance", "U", "MyTuple", "SizedNormalDist", "TestNormalDist", "TestHarmonicMean", "TestMedianDataType", "MyDecimal", "TestMedianGrouped", "TestNumericTestCase", "ApproxEqualSymmetryTest", "DocTests"], "class_method_calls": ["statistics.quantiles", "self.do_test", "statistics.harmonic_mean", "self._check_approx_seq", "statistics.median_grouped", "nd1.__eq__", "math.prod", "self.prepare_data", "unittest.skipUnless", "X.samples", "self.assertEqual", "self.assertNotEqual", "self.assertGreaterEqual", "self.assertIs", "self.func", "statistics._convert", "statistics._coerce", "data.append", "random.seed", "nd.variance", "self.assertRaises", "statistics._isfinite", "self.mu", "self.expected_metadata", "random.triangular", "self.do_exactly_unequal_test", "Y.stdev", "statistics.stdev", "X.mode", "X.mean", "values.remove", "collections.Counter", "self.prepare_values_for_repeated_single_test", "pp.items", "data.sort", "doctest.ELLIPSIS", "doctest.DocTestSuite", "data.remove", "math.isclose", "self.assertTrue", "X.variance", "self.assertCoerceTo", "iq.inv_cdf", "self.sigma", "random.choices", "statistics.StatisticsError", "nd.mean", "self.assertIsInstance", "self.assertCoerceRaises", "X.median", "self.check_coerce_to", "X.cdf", "decimal.InvalidOperation", "module.__all__", "a.as_tuple", "random.expovariate", "template.format", "statistics.pvariance", "support.import_fresh_module", "X.stdev", "self.do_test_inf", "statistics.pstdev", "self.subTest", "self.failureException", "self.do_check_both", "copy.deepcopy", "self.assertListEqual", "support.skip_if_pgo_task", "math.copysign", "random.shuffle", "pickle.loads", "random.randrange", "self.assertIsNot", "statistics.fmean", "self._formatMessage", "Y.mean", "self.do_symmetry_test", "random.lognormvariate", "self._check_approx_num", "unittest.TestCase", "self.assertFalse", "math.sqrt", "copy.copy", "self.assertLess", "Z.quantiles", "sys.flags", "statistics._exact_ratio", "statistics._fail_neg", "iq.cdf", "self.assertLessEqual", "random.uniform", "statistics.median_high", "X2.overlap", "self.generate_substrings", "X.overlap", "name.startswith", "b.as_tuple", "decimal.BasicContext", "statistics.geometric_mean", "doctest.testmod", "self.rel", "iq.mean", "nd.__slots__", "statistics.median", "self.func_names", "self.assertGreater", "Y.cdf", "unittest.main", "self.check_for_type_error", "random.randint", "statistics.median_low", "self.do_exactly_equal_test", "e.args", "Z.cdf", "statistics.mean", "tests.addTests", "math.isnan", "math.fsum", "decimal.localcontext", "self.module", "Z.inv_cdf", "X1.overlap", "NewNormalDist.from_samples", "self.check_type_coercions", "self.assertAlmostEqual", "sys.modules", "self.check_infinity", "self.do_approx_equal_rel_test", "statistics.multimode", "NumericTestCase._make_std_err_msg", "self.assertIn", "self.fail", "Z.pdf", "self.prepare_types_for_conservation_test", "statistics.variance", "data.count", "decimal.ExtendedContext", "substrings.append", "Y.pdf", "self.assertApproxEqual", "statistics.mode", "self.tol", "unittest.skipIf", "self.do_approx_equal_abs_test", "self.n", "NormalDist.from_samples", "math.isinf", "collections.abc", "self.check_exact_equal", "bisect.bisect", "nd.stdev", "self.do_relative_symmetry", "pickle.dumps", "self.__class__", "statistics._sum", "X.pdf", "self._make_std_err_msg"]}, "test_strftime.py": {"libraries": ["unittest", "re", "time", "java", "sys", "locale.setlocale", "test.support", "locale.LC_TIME", "calendar"], "function_names": ["test_y_before_1900", "escapestr", "strftest2", "setUp", "test_y_after_1900", "fixasctime", "test_y_1900", "strftest1", "test_strftime", "_update_variables"], "function_calls": ["escapestr", "setlocale", "str", "fixasctime", "int", "range", "print"], "class_names": ["StrftimeTest", "Y1900Tests"], "class_method_calls": ["sys.platform", "calendar.month_abbr", "self.clock12", "re.escape", "self.assertEqual", "time.asctime", "self._update_variables", "self.fail", "time.ctime", "self.addCleanup", "java.util", "time.tzname", "self.assertRaises", "new_text.replace", "time.strftime", "time.localtime", "calendar.day_name", "support.verbose", "self.tz", "calendar.day_abbr", "self.strftest2", "time.gmtime", "unittest.main", "self.ampm", "time.time", "self.strftest1", "self.gmt", "sys.version", "calendar.month_name", "self.jan1", "self.now", "time.mktime", "re.match", "unittest.TestCase"]}, "test_string.py": {"libraries": ["unittest", "string", "string.Template"], "function_names": ["__getattr__", "test_regular_templates", "test_regular_templates_with_non_letters", "test_auto_numbering", "test_invalid_with_no_lines", "test_idpattern_override_inside_outside", "test_pattern_override", "test_conversion_specifiers", "test_tupleargs", "test_braced_override_safe", "test_regular_templates_with_braces", "test_attrs", "test_override_convert_field", "test_check_unused_args", "test_idpattern_override_inside_outside_invalid_unbraced", "__init__", "parse", "test_escapes", "test_vformat_recursion_limit", "test_keyword_arguments", "convert_field", "get_value", "format_field", "test_delimiter_override", "test_capwords", "test_format_keyword_arguments", "test_keyword_arguments_safe", "test_index_lookup", "test_flags_override", "test_basic_formatter", "test_braced_override", "test_unicode_values", "test_name_lookup", "test_override_parse", "test_invalid_placeholders", "test_idpattern_override", "test_percents", "test_override_format_field", "check_unused_args", "test_SafeTemplate", "test_regular_templates_with_upper_case", "test_stringification", "test_override_get_value", "__getitem__"], "function_calls": ["format", "NamespaceFormatter", "getattr", "value", "KeyError", "isinstance", "super", "str", "AnyAttr", "MyTemplate", "dict", "Template", "Mapping", "CheckAllUsedFormatter", "range", "CallFormatter", "eq", "ValueError", "XFormatter", "set", "PieDelims", "AmpersandTemplate", "len", "BarFormatter", "chr", "MyPattern", "raises", "BadPattern", "Bag", "PathPattern"], "class_names": ["CallFormatter", "NamespaceFormatter", "BarFormatter", "XFormatter", "MyPattern", "Mapping", "ModuleTest", "AnyAttr", "AmpersandTemplate", "BadPattern", "MyTemplate", "PieDelims", "Bag", "CheckAllUsedFormatter", "PathPattern", "TestTemplate"], "class_method_calls": ["t.safe_substitute", "string.Formatter", "string.digits", "string.hexdigits", "s.substitute", "string.ascii_uppercase", "string.octdigits", "self.assertEqual", "s.safe_substitute", "self.assertRaisesRegex", "self.assertIn", "t.substitute", "string.whitespace", "unused_args.update", "self.namespace", "self.assertRaises", "format_string.split", "kwargs.keys", "string.capwords", "string.ascii_lowercase", "fmt._vformat", "string.punctuation", "string.ascii_letters", "string.printable", "unittest.main", "m.bag", "name.split", "fmt.format", "unused_args.remove", "unittest.TestCase", "Template.substitute", "err.exception"]}, "test_string_literals.py": {"libraries": ["unittest", "test.support.check_syntax_warning", "shutil", "sys", "tempfile", "warnings", "os"], "function_names": ["setUp", "test_eval_str_incomplete", "test_eval_bytes_invalid_escape", "test_eval_str_u", "test_file_latin9", "check_encoding", "test_eval_bytes_incomplete", "byte", "test_eval_str_invalid_escape", "test_file_utf_8", "tearDown", "test_eval_str_raw", "test_template", "test_eval_str_normal", "test_eval_bytes_normal", "test_file_utf_8_error", "test_file_utf8", "test_file_iso_8859_1", "test_file_latin_1", "test_eval_bytes_raw"], "function_calls": ["len", "__import__", "chr", "byte", "bytes", "open", "eval", "range", "repr"], "class_names": ["TestLiterals"], "class_method_calls": ["self.assertEqual", "sys.modules", "cm.exception", "tempfile.mkdtemp", "f.write", "warnings.catch_warnings", "self.assertRaises", "warnings.simplefilter", "self.assertWarns", "self.check_encoding", "self.tmpdir", "shutil.rmtree", "exc.filename", "exc.lineno", "unittest.main", "self.save_path", "sys.path", "os.path", "encoding.replace", "f.close", "unittest.TestCase"]}, "test_stringprep.py": {"libraries": ["unittest", "stringprep.*"], "function_names": ["test"], "function_calls": ["in_table_c22", "in_table_b1", "in_table_c3", "in_table_c21_c22", "in_table_d1", "in_table_c11_c12", "in_table_c8", "in_table_c11", "in_table_a1", "in_table_c4", "in_table_c12", "in_table_c6", "in_table_d2", "in_table_c7", "map_table_b2", "in_table_c5", "map_table_b3", "in_table_c21"], "class_names": ["StringprepTests"], "class_method_calls": ["unittest.TestCase", "self.assertFalse", "self.assertTrue", "unittest.main"]}, "test_strptime.py": {"libraries": ["unittest", "re", "time", "datetime", "_strptime", "test.support.skip_if_buggy_ucrt_strfptime", "sys", "locale", "test.support", "os", "datetime.date"], "function_names": ["check", "test_pattern", "test_date_time", "test_week_0", "setUp", "test_fraction", "test_date", "test_helper", "test_time_re_recreation", "test_strptime_exception_context", "test_unconverteddata", "test_escaping", "test_whitespace_substitution", "helper", "test_caseinsensitive", "test_pattern_escaping", "test_second", "test_year", "test_julian", "test_new_localetime", "test_all_julian_days", "test_day_of_week_calculation", "compare_against_time", "test_ValueError", "test_am_pm", "test_TimeRE_recreation_locale", "test_hour", "test_weekday", "test_lang", "test_week_of_year_and_day_of_week_calculation", "test_locale_data_w_regex_metacharacters", "test_time", "test_day", "test_TimeRE_recreation_timezone", "test_bad_timezone", "test_defaults", "test_mar1_comes_after_feb29_even_when_omitting_the_year", "test_bad_offset", "test_julian_calculation", "test_blankpattern", "test_compile", "test_gregorian_calculation", "test_timezone", "test_basic", "test_regex_cleanup", "test_month", "test_offset", "test_minute", "test_twelve_noon_midnight", "test_matching_with_escapes", "test_feb29_on_leap_year_without_year", "test_percent"], "function_calls": ["eq", "check", "len", "frozenset", "str", "test_helper", "int", "range", "datetime_date"], "class_names": ["Strptime12AMPMTests", "CacheTests", "StrptimeTests", "getlang_Tests", "JulianTests", "CalculationTests", "TimeRETests", "LocaleTime_Tests"], "class_method_calls": ["self.assertEqual", "pattern_string.find", "e.exception", "tz_name.upper", "self.assertIs", "compiled.match", "self._formats_excluded", "locale.setlocale", "compiled_re.match", "self.helper", "self.assertRaises", "time.localtime", "strf_output.upper", "self.locale_time", "LT.am_pm", "time.gmtime", "time.tzset", "self.time_tuple", "_strptime._strptime", "found.group", "self.assertTrue", "_strptime.TimeRE", "compiled.pattern", "support.is_android", "datetime.datetime", "strf_output.capitalize", "locale.LC_TIME", "tm.tm_isdst", "strf_output.lower", "found.string", "time.tzname", "locale.Error", "result.tm_mday", "self.subTest", "self.compare_against_time", "support.swap_attr", "err.__class__", "LT.LC_time", "self.assertIsNot", "self._ymd_excluded", "result.tm_yday", "d.microsecond", "re.match", "unittest.TestCase", "self.assertFalse", "found.re", "test_locale.timezone", "self.assertLess", "sys.platform", "dt_date.timetuple", "result.tm_mon", "time.strftime", "_strptime._CACHE_MAX_SIZE", "os.environ", "unittest.main", "time_re.compile", "result.tm_year", "err.exception", "locale_time.timezone", "time.strptime", "_strptime._regex_cache", "_strptime._TimeRE_cache", "_strptime.LocaleTime", "self.assertIn", "self.fail", "result.tm_wday", "self.time_re", "strp_output.tm_isdst", "_strptime._strptime_time", "self.LT_ins", "unittest.skipIf", "time.daylight", "locale.getlocale", "support.run_with_tz", "dt_date.strftime", "self.skipTest", "_strptime._getlang"]}, "test_strtod.py": {"libraries": ["unittest", "re", "random", "sys", "test.support"], "function_names": ["check_strtod", "test_bigcomp", "test_large_exponents", "negative_exp", "positive_exp", "test_particular", "test_halfway_cases", "test_short_halfway_cases", "test_boundaries", "strtod", "test_parsing", "test_underflow_boundary", "test_oversized_digit_strings"], "function_calls": ["negative_exp", "ValueError", "divmod", "len", "positive_exp", "max", "getattr", "strtod_parser", "strtod", "int", "float", "range"], "class_names": ["StrtodTests"], "class_method_calls": ["re.IGNORECASE", "unittest.SkipTest", "re.compile", "a.bit_length", "fs.hex", "random.choice", "q.bit_length", "self.assertEqual", "random.randrange", "b.bit_length", "unittest.TestCase", "test.support", "re.VERBOSE", "m.group", "unittest.main", "self.check_strtod", "self.assertRaises"]}, "test_struct.py": {"libraries": ["unittest", "operator", "binascii", "struct", "sys", "random.randrange", "math", "collections.abc", "test.support", "array"], "function_names": ["test_isbigendian", "test_count_overflow", "test_module_func", "test_consistence", "string_reverse", "test_new_features", "test_pack_into", "test_pack_into_fn", "test_nN_code", "test_1530559", "test_boundary_error_message_with_large_offset", "test_issue35714", "__index__", "test__sizeof__", "iter_integer_formats", "test_iterate", "assertStructError", "test_unpack_with_buffer", "test_boundary_error_message", "__int__", "_check_iterator", "__init__", "test_unpack_from", "test_transitiveness", "test_issue29802", "test_format_attr", "run", "test_boundary_error_message_with_negative_offset", "test_length_hint", "check_sizeof", "test_one", "__bool__", "test_p_code", "test_calcsize", "test_705836", "test_half_float", "test_trailing_counter", "bigendian_to_native", "test_integers", "test_construct", "test_Struct_reinitialization", "test_arbitrary_buffer", "test_bool"], "function_calls": ["BadIndex", "string_reverse", "cls", "memoryview", "pack_into", "iter_integer_formats", "super", "assertStructError", "str", "tuple", "_check_iterator", "randrange", "range", "ValueError", "Indexable", "int", "next", "IntTester", "lh", "unpack", "func", "float", "NotAnInt", "unhexlify", "bytearray", "len", "pack", "bytes", "ExplodingBool"], "class_names": ["Indexable", "BadIndex", "StructTest", "UnpackIteratorTest", "IntTester", "ExplodingBool", "NotAnInt"], "class_method_calls": ["self.assertIsInstance", "self.byteorder", "self.code", "sys.byteorder", "self.assertEqual", "struct.calcsize", "self.test_one", "self.check_sizeof", "self.assertGreaterEqual", "values.extend", "cm.exception", "self.assertLessEqual", "self.assertRaisesRegex", "s.format", "self.assertIn", "operator.length_hint", "math.ldexp", "struct.pack_into", "s.__init__", "self.fail", "self.signed", "s2.format", "self.assertRaises", "self.bytesize", "s.iter_unpack", "writable_buf.tobytes", "expected.encode", "s.unpack_from", "self._value", "struct.pack", "struct.unpack", "s.pack_into", "self.format", "self.bitsize", "struct.iter_unpack", "abc.Iterable", "struct.unpack_from", "unittest.main", "self.max_value", "array.array", "math.nan", "binascii.unhexlify", "sys.maxsize", "self.min_value", "values.append", "struct.error", "struct.Struct", "support.cpython_only", "self.assertTrue", "t.run", "support.calcobjsize", "unittest.TestCase", "abc.Iterator", "self.assertFalse", "math.isnan", "support.check_sizeof"]}, "test_structmembers.py": {"libraries": ["_testcapi.INT_MIN", "test.support", "_testcapi.UCHAR_MAX", "unittest", "_testcapi.ULONG_MAX", "_testcapi.CHAR_MAX", "_testcapi.USHRT_MAX", "_testcapi.UINT_MAX", "_testcapi.PY_SSIZE_T_MIN", "_testcapi.CHAR_MIN", "_testcapi.LONG_MIN", "_testcapi.LONG_MAX", "_testcapi.ULLONG_MAX", "_testcapi.LLONG_MIN", "_testcapi.SHRT_MIN", "_testcapi.INT_MAX", "_testcapi._test_structmembersType", "_testcapi.SHRT_MAX", "_testcapi.LLONG_MAX", "_testcapi.PY_SSIZE_T_MAX"], "function_names": ["test_byte_max", "test_byte", "test_short_min", "test_longlong", "test_long", "test_py_ssize_t", "test_ushort_max", "test_bad_assignments", "test_ubyte_max", "test_byte_min", "test_inplace_string", "test_bool", "test_int", "test_short", "test_short_max"], "function_calls": ["_test_structmembersType", "hasattr"], "class_names": ["TestWarnings", "ReadWriteTests"], "class_method_calls": ["integer_attributes.extend", "ts.T_UBYTE", "unittest.skipUnless", "self.assertEqual", "support.import_module", "ts.T_LONG", "ts.T_SHORT", "ts.T_USHORT", "ts.T_ULONG", "ts.T_UINT", "ts.T_STRING_INPLACE", "self.assertRaises", "ts.T_BYTE", "ts.T_ULONGLONG", "ts.T_PYSSIZET", "support.check_warnings", "ts.T_BOOL", "unittest.main", "ts.T_LONGLONG", "ts.T_INT", "unittest.TestCase"]}, "test_structseq.py": {"libraries": ["unittest", "os", "time"], "function_names": ["test_cmp", "test_fields", "__len__", "test_reduce", "test_extended_getslice", "test_repeat", "test_repr", "test_tuple", "test_hash", "test_constructor", "__getitem__", "test_eviltuple", "test_contains", "test_concat"], "function_calls": ["list", "len", "C", "tuple", "type", "hash", "t", "range", "repr"], "class_names": ["C", "StructSeqTest", "Exc"], "class_method_calls": ["self.assertIsInstance", "t.n_unnamed_fields", "time._STRUCT_TM_ITEMS", "t.n_fields", "t.__reduce__", "self.assertIn", "rep.startswith", "time.struct_time", "t.n_sequence_fields", "self.assertEqual", "self.assertNotIn", "self.assertTrue", "os.stat", "t.__getitem__", "time.gmtime", "unittest.TestCase", "unittest.main", "self.assertRaises"]}, "test_subclassinit.py": {"libraries": ["unittest", "types"], "function_names": ["__getattr__", "test_set_name_lookup", "test_set_name_modifying_dict", "__init_subclass__", "test_set_name", "test_set_name_error", "test_type", "__set_name__", "__init__", "test_init_subclass_diamond", "test_init_subclass_dict", "test_init_subclass_error", "test_init_subclass_wrong", "test_init_subclass", "test_set_name_wrong", "test_set_name_init_subclass", "test_errors_changed_pep487", "test_set_name_metaclass", "test_errors", "test_init_subclass_skipped", "__new__", "test_init_subclass_kwargs"], "function_calls": ["super", "NonDescriptor", "str", "type", "dict", "Descriptor", "setattr"], "class_names": ["NotGoingToWork", "BaseWithoutInit", "Base", "Right", "Left", "Middle", "B", "Test", "NonDescriptor", "MyMeta", "A", "Descriptor", "MyClass", "Meta", "BaseWithInit"], "class_method_calls": ["self.assertIsInstance", "B.meta_owner", "B.name", "A.d", "B.owner", "cls.d", "B.kwargs", "B.initialized", "MyClass.otherarg", "self.assertEqual", "cm.exception", "cls.kwargs", "cls.owner", "self.otherarg", "self.assertIs", "notified.append", "self.name", "self.assertNotIn", "cls.name", "self.meta_name", "ret.d", "resolved.append", "self.assertRaises", "cls.calls", "self.assertRegex", "cls.initialized", "self.owner", "types.new_class", "Right.calls", "exc.__cause__", "self.meta_owner", "unittest.main", "A.initialized", "t.__name__", "A.calls", "types.prepare_class", "BaseWithoutInit.initialized", "self.assertTrue", "self.assertCountEqual", "unittest.TestCase", "self.assertFalse", "Left.calls"]}, "test_sunau.py": {"libraries": ["unittest", "io", "sunau", "test.audiotests", "audioop.byteswap", "struct", "sys"], "function_names": ["test_read_wrong_encoding", "test_read_bad_magic_number", "test_read_too_large_header", "test_read_too_small_header", "test_read_wrong_number_of_channels"], "function_calls": ["byteswap"], "class_names": ["SunauPCM16Test", "SunauULAWTest", "SunauTest", "SunauPCM8Test", "SunauPCM24Test", "SunauPCM32Test", "SunauMiscTests", "SunauLowLevelTest"], "class_method_calls": ["sunau.Error", "audiotests.AudioMiscTests", "struct.pack", "self.assertRaises", "audiotests.AudioTestsWithSourceFile", "bytes.fromhex", "sys.byteorder", "sunau.open", "io.BytesIO", "sunau.AUDIO_FILE_ENCODING_LINEAR_8", "unittest.TestCase", "sunau.AUDIO_FILE_MAGIC", "unittest.main", "self.assertRaisesRegex", "audiotests.AudioWriteTests"]}, "test_sundry.py": {"libraries": ["unittest", "sys", "test.test_tools.scriptsdir", "test.test_tools.import_tool", "test.test_tools.skip_if_missing", "test.support", "os"], "function_names": ["test_sundry_windows", "test_analyze_dxp_import", "test_sundry"], "function_calls": ["skip_if_missing", "import_tool", "hasattr"], "class_names": ["TestSundryScripts"], "class_method_calls": ["unittest.skipIf", "self.windows_only", "sys.platform", "self.skiplist", "support.modules_setup", "os.listdir", "support.modules_cleanup", "unittest.TestCase", "unittest.main", "fn.endswith", "self.assertRaises"]}, "test_super.py": {"libraries": ["unittest"], "function_names": ["test_various___class___pathologies", "test___class___classmethod", "test_basics_working", "meth", "test___class___new", "test_class_methods_still_working", "cm", "test_class_getattr_working", "mro", "test___classcell___expected_behaviour", "test___class___staticmethod", "test_unbound_method_transfer_working", "test_super_init_leaks", "test___class___delayed", "test_obscure_super_errors", "test_subclass_no_override_working", "test___class___instancemethod", "test___classcell___missing", "tearDown", "f", "test___class___mro", "g", "test_super_in_class_methods_working", "test_super_with_closure", "test_cell_as_self", "test___classcell___overwrite", "__new__", "nested", "test___classcell___wrong_cell"], "function_calls": ["len", "object", "super", "F", "globals", "A", "G", "type", "f", "exec", "D", "range", "E", "X"], "class_names": ["B", "C", "F", "WithClassRef", "A", "G", "WithoutClassRef", "TestSuper", "Meta", "D", "E", "X"], "class_method_calls": ["self.__dict__", "X.__dict__", "self.assertEqual", "e.exception", "self.assertRaisesRegex", "self.assertIs", "G.cm", "x.f", "F.f", "self.assertNotIn", "self.subTest", "self.assertRaises", "namespace.copy", "X.meth", "WithClassRef.f", "self.f", "WithClassRef.__classcell__", "E.f", "X.f", "x.__class__", "D.f", "unittest.main", "d.cm", "A.cm", "super.__init__", "e.cm", "X.x", "B.f", "namespace.pop", "unittest.TestCase"]}, "test_support.py": {"libraries": ["unittest", "io", "time", "test.support", "contextlib", "textwrap", "importlib", "shutil", "sys", "tempfile", "sched", "subprocess", "socket", "os", "stat", "errno", "test.support.script_helper"], "function_names": ["test_args_from_interpreter_flags", "test_temp_cwd", "test_sortdict", "test_detect_api_mismatch__ignore", "test_temp_dir__forked_child", "id", "test_CleanImport", "test_captured_stdin", "test_main", "test_forget", "test_HOST", "test_reap_children", "test_import_fresh_module", "__init__", "test_temp_dir", "test_temp_dir__existing_dir__quiet_true", "test_get_original_stdout", "test_check_syntax_error", "test_change_cwd", "check_print_warning", "test_make_bad_fd", "test_python_is_optimized", "test_fd_count", "test_print_warning", "call_change_cwd", "test_get_attribute", "test_unlink", "test_gc_collect", "test_find_unused_port", "test_swap_attr", "test_unload", "test_captured_stderr", "test_match_test", "test_temp_cwd__name_none", "test_temp_dir__existing_dir__quiet_default", "test_DirsOnSysPath", "test_swap_item", "test_check__all__", "test_optim_args_from_interpreter_flags", "test_temp_dir__path_none", "test_captured_stdout", "check_options", "test_bind_port", "test_import_module", "test_detect_api_mismatch", "test_rmtree", "test_change_cwd__non_existent_dir__quiet_true", "test_change_cwd__chdir_warning", "call_temp_dir", "test_change_cwd__non_existent_dir"], "function_calls": ["test_main", "len", "__import__", "str", "Test", "Obj", "set", "input", "Exception", "open", "print", "repr", "hasattr"], "class_names": ["TestSupport", "Obj", "Test", "RefClass", "OtherClass"], "class_method_calls": ["stderr.getvalue", "os.mkdir", "sys.executable", "unittest.skipUnless", "os.write", "self.assertEqual", "support.gc_collect", "os.O_RDONLY", "self.assertNotEqual", "sys.stdout", "support.sortdict", "support.TESTFN", "w.message", "self.assertRaises", "self.OtherClass", "stdout.getvalue", "warn.startswith", "os.close", "os.open", "shutil.rmtree", "support.check_warnings", "sys.stderr", "obj.x", "support.captured_stdout", "self.assertTrue", "support.HOST", "stat.S_IRUSR", "support.python_is_optimized", "support.CleanImport", "self.assertIsInstance", "support.import_module", "cm.exception", "os.getcwd", "support.detect_api_mismatch", "tempfile.mkdtemp", "unittest.SkipTest", "support.fd_count", "self.assertNotIn", "support.import_fresh_module", "io.StringIO", "test_chdir.id", "support.find_unused_port", "socket.create_server", "self.subTest", "support.print_warning", "os.fork", "support.swap_attr", "unittest.skip", "support.run_unittest", "os.curdir", "support.unload", "support.check_syntax_error", "self.assertIsNone", "support.set_match_tests", "support.environment_altered", "self.check_options", "script_helper.assert_python_ok", "os.path", "proc.stdout", "subprocess.DEVNULL", "unittest.TestCase", "self.assertFalse", "support.captured_stdin", "obj.y", "support.change_cwd", "support.bind_port", "time.monotonic", "test_access.id", "stdin.write", "self.check_print_warning", "stat.S_IXUSR", "support.temp_cwd", "msg.startswith", "support.temp_dir", "support.make_bad_fd", "support.unlink", "importlib.invalidate_caches", "s.listen", "subprocess.PIPE", "support.match_test", "os.environ", "proc.returncode", "self.RefClass", "os.chmod", "self.test_get_attribute", "stdin.seek", "support.check__all__", "sys.modules", "support.get_original_stdout", "importlib.import_module", "self.assertIn", "support.rmtree", "self.fail", "support.get_attribute", "support.forget", "support.DirsOnSysPath", "recorder.warnings", "support.captured_stderr", "self.test_id", "subprocess.run", "errno.EBADF", "key.startswith", "sys.__stderr__", "support.reap_children", "support.swap_item", "textwrap.dedent", "time.sleep", "sys.path", "s.close", "os._exit", "socket.socket"]}, "test_symbol.py": {"libraries": ["unittest", "sys", "subprocess", "test.support", "os", "sysconfig"], "function_names": ["_copy_file_without_generated_symbols", "test_real_grammar_and_symbol_file", "compare_files", "_generate_symbols"], "function_calls": ["open"], "class_names": ["TestSymbolGeneration"], "class_method_calls": ["self._generate_symbols", "lines.index", "sys.executable", "unittest.skipUnless", "self.assertEqual", "proc.communicate", "support.TESTFN", "self.addCleanup", "subprocess.Popen", "self.compare_files", "fp.writelines", "support.findfile", "support.unlink", "subprocess.PIPE", "unittest.main", "proc.returncode", "os.path", "self._copy_file_without_generated_symbols", "fp.readlines", "sysconfig.is_python_build", "unittest.TestCase"]}, "test_symtable.py": {"libraries": ["symtable", "unittest"], "function_names": ["test_assigned", "test_function_info", "test_name", "test_annotated", "test_symtable_repr", "test_referenced", "test_symbol_lookup", "test_imported", "test_namespaces", "test_children", "test_type", "checkfilename", "test_nested", "test_nonlocal", "test_class_info", "test_exec", "test_filename_correct", "test_lineno", "test_local", "test_bytes", "find_block", "test_parameters", "test_free", "test_eval", "test_single", "test_optimized", "test_globals"], "function_calls": ["bytearray", "len", "list", "sorted", "checkfilename", "str", "memoryview", "find_block"], "class_names": ["SymtableTest"], "class_method_calls": ["self.other_internal", "self.assertIsNotNone", "self.a_method", "st1.get_children", "self.assertEqual", "self.fail", "self.internal", "st3.get_children", "e.lineno", "func.get_locals", "ns_test.get_namespace", "st2.lookup", "TEST_CODE.encode", "self.assertRaises", "self.spam", "func.get_parameters", "self.assertWarns", "e.filename", "st4.lookup", "func.get_globals", "self.top", "ns_test.get_namespaces", "block.get_children", "self.Mine", "unittest.main", "st5.lookup", "symtable.symtable", "self.foo", "ch.get_name", "self.assertTrue", "e.offset", "unittest.TestCase", "self.assertFalse"]}, "test_syntax.py": {"libraries": ["unittest", "test.support", "re", "test.test_syntax"], "function_names": ["test_continue_outside_loop", "test_main", "test_unexpected_indent", "test_no_indent", "test_kwargs_last2", "test_nonlocal_param_err_first", "test_kwargs_last", "_check_error", "test_return_outside_function", "test_global_param_err_first", "test_bad_outdent", "test_kwargs_last3", "test_break_outside_loop", "test_assign_del", "test_assign_call", "test_yield_outside_function"], "function_calls": ["isinstance", "test_main", "str", "compile"], "class_names": ["SyntaxTestCase"], "class_method_calls": ["err.filename", "subclass.__name__", "err.lineno", "support.run_doctest", "support.run_unittest", "self.fail", "self.assertEqual", "err.offset", "unittest.TestCase", "self._check_error", "re.search"]}, "test_sys.py": {"libraries": ["_testcapi", "_testcapi.get_recursion_depth", "struct", "warnings", "subprocess", "test.support", "sysconfig", "traceback", "unittest", "threading", "types", "textwrap", "datetime", "codecs", "collections", "test.support.script_helper.assert_python_ok", "locale", "weakref", "os", "_ast", "builtins", "re", "gc", "operator", "inspect", "collections.OrderedDict", "encodings.iso8859_3", "sys", "test.support.script_helper.assert_python_failure"], "function_names": ["check_exit_message", "test_getdefaultencoding", "test_gc_head_size", "test_original_unraisablehook", "test_sys_version_info_no_instantiation", "test_attributes", "test_changing_sys_stderr_and_removing_reference", "get_gen", "test_lost_displayhook", "f123", "test_dlopenflags", "test_custom_unraisablehook", "write_unraisable_exc", "__str__", "test_posix_locale_surrogateescape", "test_issue20602", "tearDown", "test_recursionlimit_fatalerror", "test_sys_flags", "test_errors", "test_recursionlimit_recovery", "test_pythontypes", "c_locale_get_error_handler", "test_custom_unraisablehook_fail", "test_switchinterval", "test__enablelegacywindowsfsencoding", "test_sys_getwindowsversion_no_instantiation", "test_getallocatedblocks", "get_cell", "get_cell2", "hook_func", "test_is_finalizing", "setx", "test_implementation", "set_recursion_limit_at_depth", "test_original_excepthook", "__del__", "test_call_tracing", "test_refcount", "f", "test_ioencoding", "check_fsencoding", "test_ioencoding_nonascii", "test_custom_displayhook", "test_getfilesystemencoding", "test_getframe", "test_intern", "test_getandroidapilevel", "baddisplayhook", "setUp", "test_default", "test_slots", "test_recursionlimit", "test_objecttypes", "delx", "test_original_displayhook", "test_original_unraisablehook_err", "test_debugmallocstats", "func", "test_excepthook", "test_sys_tracebacklimit", "foo", "test_setrecursionlimit_recursion_depth", "test_thread_info", "bar", "__sizeof__", "test_getwindowsversion", "check", "check_locale_surrogateescape", "check_code_size", "test_clear_type_cache", "test_exit", "test_current_frames", "g456", "assert_raise_on_new_sys_type", "test_excepthook_bytes_filename", "test_sys_flags_no_instantiation", "check_slots", "test_original_unraisablehook_wrong_type", "test_no_duplicates_in_meta_path", "test_executable", "test_setcheckinterval", "test_asyncgen_hooks", "getx", "inner", "__hash__", "test_43581", "test_c_locale_surrogateescape"], "function_calls": ["check", "check_exit_message", "object", "check_code_size", "frozenset", "OverflowSizeof", "assert_python_ok", "getattr", "FS", "reversed", "InvalidSizeof", "dh", "SyntaxError", "BaseException", "get_recursion_depth", "get_cell", "g456", "repr", "get_gen", "super", "UnicodeEncodeError", "iter", "str", "complex", "BrokenStrException", "size", "dict", "ascii", "Exception", "UnicodeDecodeError", "vsize", "calcsize", "range", "BadSizeof", "ValueError", "set_recursion_limit_at_depth", "assert_python_failure", "property", "slice", "set", "int", "type", "UnicodeTranslateError", "test_class", "enumerate", "float", "attr_type", "f", "D", "L", "hasattr", "OrderedDict", "bytearray", "len", "compile", "chr", "BA", "max", "OD", "newstyleclass", "pow", "FloatSizeof", "ord", "S"], "class_names": ["OverflowSizeof", "FS", "InvalidSizeof", "BrokenExceptionDel", "BrokenDel", "BrokenStrException", "ExceptHookTest", "BadSizeof", "SysModuleTest", "C", "L", "D", "OD", "DisplayHookTest", "newstyleclass", "SizeofTest", "FloatSizeof", "BA", "c", "UnraisableHookTest", "S"], "class_method_calls": ["vi.minor", "stderr.getvalue", "_ast.AST", "err.getvalue", "sys.getandroidapilevel", "sys.executable", "unittest.skipUnless", "old.finalizer", "self.assertEqual", "env.pop", "struct.calcsize", "sys.getdefaultencoding", "leave_g.wait", "x.f_code", "self.check_locale_surrogateescape", "self.__x", "self.assertGreaterEqual", "sys.unraisablehook", "sys.setcheckinterval", "sys.stdout", "self.assertIs", "o.d", "t.start", "vi.micro", "sys.float_info", "threading.get_ident", "v.product_type", "get_cell.__code__", "sys.getswitchinterval", "sys._clear_type_cache", "warnings.catch_warnings", "vi.serial", "collections.defaultdict", "err.startswith", "sys.getsizeof", "info.lock", "self.assertRaises", "sys._debugmallocstats", "leave_g.set", "codecs.charmap_build", "sys.meta_path", "self.assert_raise_on_new_sys_type", "hooks.finalizer", "traceback.extract_stack", "sys.abiflags", "sys.copyright", "os.linesep", "sys.version", "support.captured_stdout", "sys.implementation", "self.assertTrue", "sys.argv", "v.service_pack_major", "sysconfig.get_config_var", "stdout.rstrip", "vi.releaselevel", "self.assertIsInstance", "v.suite_mask", "d.pop", "version.serial", "sys.byteorder", "sys.api_version", "self.check_sizeof", "cm.exception", "sys.__displayhook__", "self.check_slots", "entered_g.wait", "C.__dict__", "thread_info.append", "builtins._", "sys.__unraisablehook__", "subprocess.Popen", "subprocess.STDOUT", "weakref.proxy", "self.subTest", "o.h", "self.assertRegex", "support.swap_attr", "sys.getdlopenflags", "self.longdigit", "out.splitlines", "sys.hexversion", "sys.float_repr_style", "self.assertIsNone", "sys.setdlopenflags", "self.P", "v.major", "x.__alloc__", "v.service_pack_minor", "sys.maxsize", "os.path", "version.releaselevel", "int.__add__", "sys._getframe", "sys.version_info", "version.micro", "sys.intern", "old.firstiter", "gc.collect", "sys.__excepthook__", "unittest.TestCase", "o.f", "sys.call_tracing", "o.a", "types.SimpleNamespace", "self.assertLess", "sys.platform", "vi.major", "report.endswith", "sys.flags", "v.service_pack", "_testcapi.SIZEOF_PYGC_HEAD", "sys.is_finalizing", "self.c_locale_get_error_handler", "sub.returncode", "attr_type.__new__", "s.swapcase", "test.support", "sys.prefix", "self.assertLessEqual", "sys.getcheckinterval", "os.fsencode", "sys.maxunicode", "self.write_unraisable_exc", "support.with_pymalloc", "sys.builtin_module_names", "sys.displayhook", "o.g", "v.platform", "get_cell2.__code__", "err.endswith", "warnings.simplefilter", "sys._current_frames", "cur.finalizer", "re.finditer", "_testcapi.pymem_getallocatorsname", "subprocess.PIPE", "self.assertGreater", "str.lower", "os.environ", "test_class.__del__", "unittest.main", "sys.getrecursionlimit", "sys.base_prefix", "self.check_fsencoding", "o.b", "o.c", "sys.getfilesystemencoding", "SysModuleTest.test_getframe", "cur.firstiter", "sys.setswitchinterval", "sys.base_exec_prefix", "sys.set_asyncgen_hooks", "self.assertIsNotNone", "p.communicate", "version.minor", "p.wait", "self.assertAlmostEqual", "sys.setrecursionlimit", "sys.getwindowsversion", "sys.int_info", "sys.gettotalrefcount", "sys.get_asyncgen_hooks", "inspect.currentframe", "exc.__traceback__", "entered_g.set", "o.e", "threading.Event", "self.assertIn", "sys.exit", "t.join", "self.fail", "datetime.timedelta", "v.minor", "operator.getitem", "hooks.firstiter", "support.captured_stderr", "info.name", "unittest.skipIf", "out.getvalue", "locale.getpreferredencoding", "sys.excepthook", "sys.exc_info", "gc.is_tracked", "version.major", "weakref.ref", "codecs.lookup", "sys.getrefcount", "sys.__stderr__", "sub.communicate", "self.gc_headsize", "textwrap.dedent", "sys.hash_info", "stdout.strip", "sys.thread_info", "_testcapi.write_unraisable_exc", "out.decode", "encodings.iso8859_3", "self.skipTest", "sys.gettrace", "sys.getallocatedblocks", "args.append", "threading.Thread", "v.build", "sys.__stdout__", "sys.exec_prefix"]}, "test_sys_setprofile.py": {"libraries": ["pprint", "sys", "unittest", "gc"], "function_names": ["test_setget", "test_raise_twice", "test_exception_propagation", "fn", "test_raise", "setUp", "protect", "test_exception", "test_nested_exception", "trace_call", "ident", "test_unbound_method_no_args", "trace_return", "get_events", "trace_pass", "test_unbound_method_no_keyword_args", "__init__", "callback", "j", "check_events", "show_events", "test_exception_in_except_clause", "test_basic_exception", "capture_events", "test_stop_iteration", "h", "i", "trace_exception", "new_watcher", "tearDown", "test_empty", "test_simple", "f", "test_distant_exception", "test_caught_nested_exception", "g", "add_event", "test_unbound_method_invalid_args", "test_unbound_method", "test_raise_reraise", "test_generator", "test_caught_exception", "test_unbound_method_invalid_keyword_args"], "function_calls": ["len", "g", "range", "protect", "ProfileSimulator", "capture_events", "h", "i", "HookWatcher", "Exception", "f", "ident", "hasattr"], "class_names": ["ProfileSimulatorTestCase", "ProfileSimulator", "ProfileHookTestCase", "HookWatcher", "TestCaseBase", "TestGetProfile"], "class_method_calls": ["function.__code__", "self.dispatch", "code.co_firstlineno", "pprint.pformat", "self.stack", "gc.enable", "p.get_events", "self.add_event", "self.assertIs", "p.callback", "self.fail", "self.frames", "gc.isenabled", "self.check_events", "sys.setprofile", "pprint.pprint", "self.assertIsNone", "dict.get", "self.testcase", "unittest.main", "gc.disable", "sys.getprofile", "self.new_watcher", "HookWatcher.__init__", "sys._getframe", "code.co_name", "self.events", "function.f_code", "unittest.TestCase", "p.add_event"]}, "test_sys_settrace.py": {"libraries": ["unittest", "gc", "asyncio", "sys", "functools.wraps", "test.support", "difflib"], "function_names": ["test_09_settrace_and_raise", "test_no_jump_without_trace_function", "test_16_blank_lines", "onliners", "test_no_jump_forwards_into_for_block", "test_02_arigo1", "test_jump_out_of_with_assignment", "test_no_jump_to_except_1", "run_async_test", "test_jump_over_return_in_try_finally_block", "call", "test_no_jump_out_of_qualified_except_block", "__init__", "test_02_arigo0", "test_no_jump_between_except_blocks_2", "compare_jump_output", "test_no_jump_into_bare_except_block_from_try_block", "test_jump_forwards_out_of_with_block", "test_05_no_pop_tops", "test_no_jump_from_return_event", "make_tracer", "arigo_example0", "tearDown", "run_test2", "run_test_for_event", "test_12_tighterloop", "test_line", "test_return", "test_jump_out_of_with_block_within_with_block", "tighterloop_example", "compare_events", "test_no_jump_to_except_4", "test_no_jump_out_of_bare_except_block", "test_jump_backwards_out_of_try_except_block", "settrace_and_return", "test_jump_over_break_in_try_finally_block", "test_02_arigo2", "test_no_jump_into_qualified_except_block_from_try_block", "test_no_jump_to_non_integers", "test_jump_out_of_block_backwards", "fn", "test_jump_in_nested_finally_3", "__exit__", "test_exception", "test_jump_forwards_into_while_block", "test_call", "arigo_example2", "one_instr_line", "arigo_example1", "test_jump_across_with", "test_jump_out_of_with_block_within_finally_block", "test_jump_infinite_while_loop", "test_jump_simple_forwards", "no_pop_tops", "trace", "test_06_call", "test_no_jump_from_call", "test_jump_backwards_out_of_try_finally_block", "test_exception_arguments", "jump_test", "f", "test_jump_simple_backwards", "test_07_raise", "settrace_and_raise", "run_test", "raises", "test_set_and_retrieve_none", "test_no_jump_backwards_into_with_block", "test_10_ireturn", "nested", "_settrace_and_return", "tightloop_example", "test_no_jump_from_exception_event", "test_jump_forwards_out_of_try_finally_block", "called", "test_jump_backwards_out_of_with_block", "test_no_jump_into_bare_except_block", "test_raise", "test_jump_backwards_into_while_block", "setUp", "test_11_tightloop", "test_no_jump_backwards_into_try_finally_block", "test", "test_no_jump_forwards_into_with_block", "test_no_jump_over_return_out_of_finally_block", "test_01_basic", "test_no_jump_too_far_backwards", "no_jump_to_non_integers", "test_13_genexp", "test_17_none_f_trace", "test_jump_forwards_out_of_try_except_block", "generator_function", "basic", "test_jump_in_nested_finally", "test_no_jump_into_finally_block_from_try_block", "test_04_no_pop_blocks", "test_no_jump_out_of_finally_block", "test_no_jump_backwards_into_try_except_block", "test_no_jump_too_far_forwards", "test_14_onliner_if", "run_and_compare", "func", "test_no_jump_between_with_blocks", "no_jump_without_trace_function", "test_jump_between_except_blocks", "ireturn_example", "test_no_jump_into_for_block_before_else", "test_no_jump_forwards_into_try_except_block", "test_jump_within_except_block", "test_jump_to_firstlineno", "test_trash_stack", "test_jump_in_nested_finally_2", "test_jump_out_of_with_block_within_for_block", "test_no_jump_from_yield", "no_pop_blocks", "gen", "decorator", "test_jump_over_for_block_before_else", "test_set_and_retrieve_func", "test_no_jump_into_qualified_except_block", "test_jump_out_of_block_forwards", "__enter__", "test_jump_over_return_try_finally_in_finally_block", "async_jump_test", "while_example", "traceWithGenexp", "_reconfigure_frame", "test_no_jump_to_except_3", "test_no_jump_into_finally_block", "for_example", "test_no_jump_backwards_into_for_block", "test_jump_out_of_complex_nested_blocks", "generator_example", "test_large_function", "test_no_jump_forwards_into_try_finally_block", "test_jump_to_same_line", "test_no_jump_to_except_2", "g", "test_jump_to_codeless_line", "test_03_one_instr", "_settrace_and_raise", "test_08_settrace_and_return", "test_15_loops"], "function_calls": ["called", "wraps", "Tracer", "tracecontext", "gen", "RuntimeError", "generator_function", "repr", "super", "JumpTracer", "asynciter", "async_jump_test", "str", "AssertionError", "range", "generator_example", "next", "func", "jump_test", "f", "no_jump_without_trace_function", "len", "any", "compile", "raises", "_settrace_and_raise", "nested", "_settrace_and_return", "asynctracecontext", "exec", "print"], "class_names": ["RaisingTraceFuncTestCase", "TraceOpcodesTestCase", "fake_function", "JumpTracer", "JumpTestCase", "SkipLineEventsTraceTestCase", "TraceTestCase", "Tracer", "tracecontext", "asynctracecontext"], "class_method_calls": ["function.__code__", "asyncio.run", "self.make_tracer", "test_raise.events", "self.assertLess", "self.assertIsInstance", "difflib.ndiff", "self.run_test", "self.value", "previous_frame.f_lineno", "tightloop_example.events", "self.code", "self.run_and_compare", "basic.events", "gc.enable", "frame.f_trace_opcodes", "self._reconfigure_frame", "generator_example.events", "output.append", "generator_example.__code__", "func.__code__", "self.assertRaisesRegex", "self.jumpFrom", "tracer.trace", "self.trace_line_events", "tracer.traceWithGenexp", "x.no_such_attr", "self.output", "frame.f_trace_lines", "self.fail", "self.run_async_test", "self.addCleanup", "func.events", "asyncio.set_event_loop_policy", "f.f_back", "self.firstLine", "arigo_example1.events", "f.f_code", "self.run_test_for_event", "self.f", "f.__code__", "settrace_and_raise.events", "self.event", "gc.isenabled", "self.jumpTo", "frame.f_code", "no_pop_blocks.events", "ireturn_example.events", "self.using_gc", "self.run_test2", "frame.f_lineno", "self.trace_opcode_events", "no_pop_tops.events", "call.events", "self.raiseOnEvent", "tighterloop_example.events", "self.trace", "unittest.main", "sys.getrecursionlimit", "arigo_example2.events", "self.compare_events", "tracer.events", "one_instr_line.events", "gc.disable", "self.compare_jump_output", "support.cpython_only", "sys.settrace", "sys._getframe", "arigo_example0.events", "self.events", "sys.gettrace", "self.done", "gc.collect", "unittest.TestCase", "settrace_and_return.events"]}, "test_syslog.py": {"libraries": ["unittest", "test.support"], "function_names": ["test_syslog", "test_openlog", "test_openlog_noargs", "test_log_mask", "test_log_upto", "test_setlogmask", "test_closelog"], "function_calls": [], "class_names": ["Test"], "class_method_calls": ["syslog.openlog", "syslog.LOG_ERR", "syslog.closelog", "syslog.LOG_MASK", "syslog.LOG_DEBUG", "syslog.LOG_UPTO", "syslog.setlogmask", "syslog.LOG_INFO", "support.import_module", "syslog.syslog", "unittest.TestCase", "unittest.main", "self.assertRaises"]}, "test_tabnanny.py": {"libraries": ["textwrap", "test.support.findfile", "test.support.unlink", "tokenize", "unittest.mock", "tempfile", "unittest.TestCase", "test.support.captured_stdout", "os", "test.support.script_helper", "errno", "tabnanny", "test.support.captured_stderr"], "function_names": ["test_format_witnesses", "test_errored_directory", "test_command_usage", "test_double_verbose_mode", "__exit__", "setUp", "test_all_methods", "test_quiet_flag", "__enter__", "__init__", "test_when_nannynag_error", "test_errprint", "test_with_correct_code", "test_when_no_file", "test_when_nannynag_error_verbose", "test_correct_file", "test_with_error_free_file", "test_correct_directory_verbose", "test_when_tokenize_tokenerror", "test_with_errored_codes_samples", "test_with_errored_file", "test_correct_directory", "validate_cmd", "test_when_wrong_indented", "test_verbose_mode", "verify_tabnanny_check"], "function_calls": ["captured_stderr", "findfile", "open", "captured_stdout", "unlink", "TemporaryPyFile"], "class_names": ["TestCommandLine", "TestNannyNag", "TestFormatWitnesses", "TestProcessTokens", "TestErrPrint", "TemporaryPyFile", "TestCheck"], "class_method_calls": ["stderr.getvalue", "errno.ENOENT", "self.source_code", "stdout.splitlines", "self.assertEqual", "tabnanny.NannyNag", "f.name", "tempfile.NamedTemporaryFile", "f.write", "os.strerror", "self.assertIn", "f.readline", "self.addCleanup", "err.decode", "tempfile.TemporaryDirectory", "tabnanny.verbose", "stderr.splitlines", "output.splitlines", "self.subTest", "self.file_path", "self.assertRaises", "lines.append", "stdout.getvalue", "tokenize.generate_tokens", "out.splitlines", "tabnanny.errprint", "self.assertListEqual", "err.splitlines", "tabnanny.check", "self.assertFalse", "mock.patch", "MockNannyNag.called", "textwrap.dedent", "script_helper.assert_python_ok", "out.decode", "nanny.get_msg", "nanny.get_lineno", "self.verify_tabnanny_check", "nanny.get_line", "tabnanny.process_tokens", "tabnanny.format_witnesses", "std.splitlines", "self.validate_cmd", "self.dir"]}, "test_tarfile.py": {"libraries": ["pwd", "warnings", "unittest.mock", "test.support", "gzip", "bz2", "unittest", "io", "pathlib", "random.Random", "os", "tarfile", "re", "grp", "shutil", "contextlib.contextmanager", "stat", "lzma", "sys", "hashlib.sha256", "test.support.script_helper"], "function_names": ["test_write_number_fields", "test_no_name_argument", "_test_pathname", "valueerror_filter", "_test", "test_find_gnusparse_00", "test_header_offset", "test_fileobj_readlines", "test_fileobj_regular_file", "test_fileobj_symlink2", "_test_ustar_name", "test_find_gnusparse_01", "test_find_umlauts", "test_empty_fileobj", "test_test_command_invalid_file", "format_mtime", "_create_testtar", "test_no_name_attribute", "test_premature_end_of_archive", "test_change_default_filter_on_instance", "test_absolute_hardlink", "test_sparse_file_00", "test_find_ustar_longname", "test_stream_padding", "test_unicode_argument", "test_extractall_none_gname", "_testfunc_fileobj", "test_default_filter_warns_not", "extract_with_none", "test_extract_hardlink", "test_find_chrtype", "test_find_regtype_oldv7", "__init__", "open", "test_fileobj_text", "requires_name_attribute", "_test_fileobj_link", "test_provoke_stream_error", "test_list_verbose", "expect_file", "test_directory_size", "test_create_existing", "test_extractall_with_numeric_owner", "_setup_test", "test_find_lnktype", "test_cwd", "test_extract_without_numeric_owner", "test_special_files", "test_detect_stream_bz2", "test_no_eof", "test_extract_pathlike_name", "test_change_default_filter_on_class", "test_binary_header", "filtererror_filter", "test_fileobj_with_offset", "tearDown", "test_uname_unicode", "test_create_existing_taropen", "test_replace_internal", "test_pipe", "test_filter", "test_pax_global_header", "tarfilecmd", "test_test_command", "test_bad_use", "test_basic", "_test_partial_input", "test_absolute", "test_sly_relative0", "test_extract_command_verbose", "_test_member", "test_longname_1025", "test_create_command_dotless_filename", "root_is_uid_gid_0", "test_dereference_hardlink", "filter", "test_extractall", "_testfunc_file", "test_ordered_recursion", "expect_exception", "test_link_size", "test_change_default_filter_to_string", "test_sparse_file_10", "test_benign_file", "__exit__", "test_closed", "test_find_sparse", "test_symlink_extraction1", "test_init_close_fobj", "test_find_pax_umlauts", "test_exception", "test_list", "test_non_existent_tarfile", "make_evil_tarfile", "test_number_field_limits", "test_extract_command_different_directory", "test_pathlike_name", "test_find_members", "test_compare_members", "test_detect_fileobj", "test_hardlink_extraction2", "test_partial_input", "test_find_regtype", "test_empty_name_attribute", "test_test_command_verbose", "test_longnamelink_1023", "test_incomplete", "test_data_filter", "__call__", "test_100_char_name", "test_modes", "test_stateful_filter", "test_absolute_symlink", "seek", "test_sparse_file_01", "test_longlink_1025", "_fs_supports_holes", "test_add_self", "_length", "test_extract_directory", "test_extractall_pathlike_name", "test_longname_1023", "test_tar_size", "_test_sparse_file", "test_extractall_none_gid", "test_extractall_none_ownership", "test_deep_symlink", "test_add_twice", "test_utf7_filename", "tearDownModule", "test_eof_marker", "test_gnu_limits", "test_xstar_type", "test_find_dirtype", "mode", "_filemode_to_int", "test_length_zero_header", "test_add", "test_iso8859_1_filename", "test_partial_input_bz2", "test_check_members", "test_utf8_filename", "test_keyword_only", "test_create_command_dot_started_filename", "test_int_name_attribute", "test_find_fifotype", "test_parallel_iteration", "setUp", "test_existing", "test_unicode_link1", "test_issue14160", "tarfilecmd_failure", "test_create_command", "test_pax_number_fields", "test_replace_all", "test_empty_tarfile", "test_parent_symlink2", "test_ustar_limits", "extracterror_filter", "test_unicode_longname1", "test_open_nonwritable_fileobj", "test_fileobj_symlink1", "test_extract_command_filter", "test_extract_command_invalid_file", "test_unicode_name1", "test_truncated_longname", "test_parent_symlink", "test_pax_global_headers", "test_gettarinfo_pathlike_name", "test_fileobj_iter", "custom_filter", "test_create_command_compressed", "make_simple_tarfile", "test_list_command_verbose", "test_fileobj_no_close", "test_premature_eof", "test_symlink_size", "test_unicode_link2", "setUpClass", "test_pax_extended_header", "test_extractall_none_uid", "test_fileobj_seek", "test_longlink_1023", "test_list_members", "test_find_gnusparse", "check_context", "test_null_tarfile", "test_longnamelink_1024", "test_create_taropen_pathlike_name", "test_find_conttype", "test_find_blktype", "test_abs_pathnames", "conv", "test_fileobj_link1", "test_file_mode", "test_fileobj", "test_sparse_file_old", "test_append_compressed", "test_find_gnusparse_10", "test_non_existing", "test_change_default_filter_on_subclass", "tarerror_filter", "test_symlink_extraction2", "test_fully_trusted_filter", "test_bad_filter_name", "oserror_filter", "test_illegal_mode_arg", "test_list_command", "test_source_directory_not_leaked", "test_extract_with_numeric_owner", "test_tar_filter", "_test_unicode_filename", "_make_test_archive", "test_create_taropen", "test_pathnames", "_test_ustar_link", "test_unicode_name2", "test_find_symtype", "test_null", "test_replace_deep", "test_fail_comp", "_calc_size", "test_unicode_filename_error", "test_unicode_longname4", "test_read_longname", "test__all__", "test_extractall_none_mtime", "test_create_pathlike_name", "test_add_hardlink", "_test_error", "__enter__", "test_list_command_invalid_file", "test_create_command_verbose", "setUpModule", "_test_link_extraction", "test_file_size", "test_longlink_1024", "test_sly_relative2", "test_unicode_longname2", "test_unicode_longname3", "test_char_fields", "test_v7_dirtype", "test_hardlink_extraction1", "test_create", "test_read_through", "test_custom_filter", "test_errorlevel", "test_detect_file", "test_longname_1024", "test_read_longlink", "test_fileobj_link2", "check_files_present", "test_longnamelink_1025", "test_bad_pax_header", "members", "tearDownClass", "test_pax_limits", "test_extractall_none_uname", "test_read_number_fields", "test_replace_shallow", "test_empty", "test_invalid", "sha256sum", "test_chains", "test_bytes_name_attribute", "test_eof", "read", "extraction_filter", "write", "test_extractall_symlinks", "strict_filter", "test_extract_command", "test_find_dirtype_with_size", "test_extractall_none_mode", "test_ignore_zeros", "test_trailing_garbage", "add", "_test_modes", "test_replace_name", "_add_testfile"], "function_calls": ["MyBytesIO", "getattr", "Random", "format_mtime", "isinstance", "super", "str", "sha256", "ArchiveMaker", "staticmethod", "open", "AssertionError", "range", "setattr", "StatefulFilter", "ValueError", "list", "set", "members", "int", "type", "zip", "TarSubclass", "float", "OSError", "sha256sum", "hasattr", "len", "testfunc", "conv", "NotImplementedError", "_filemode_to_int", "BadFile", "root_is_uid_gid_0", "bytes"], "class_names": ["MyBytesIO", "LzmaUstarReadTest", "ContextManagerTest", "GNUReadTest", "NoneInfoExtractTests_Default", "CommandLineTest", "Bz2PartialReadTest", "LzmaStreamReadTest", "ReadTest", "GzipListTest", "ReplaceTests", "CreateWithXModeTest", "PaxWriteTest", "Bz2MiscReadTest", "PaxReadTest", "MiscTest", "NoneInfoExtractTests", "GzipWriteTest", "Bz2StreamReadTest", "TestExtractionFilters", "LzmaMiscReadTest", "Bz2StreamWriteTest", "Bz2CreateTest", "Bz2WriteTest", "LzmaDetectReadTest", "LzmaWriteTest", "Bz2UstarReadTest", "GzipUstarReadTest", "MiscReadTestBase", "LzmaListTest", "UstarReadTest", "Bz2ListTest", "CommonReadTest", "GzipStreamReadTest", "GzipStreamWriteTest", "Bz2AppendTest", "StreamWriteTest", "GzipDetectReadTest", "GNUWriteTest", "MemberReadTest", "GzipCreateTest", "Bz2DetectReadTest", "LongnameTest", "ArchiveMaker", "UnicodeTest", "WriteTest", "DetectReadTest", "StatefulFilter", "StreamReadTest", "PAXUnicodeTest", "TarSubclass", "LzmaAppendTest", "LinkEmulationTest", "GzipAppendTest", "GzipTest", "AppendTestBase", "NoneInfoExtractTests_FullyTrusted", "LzmaCreateTest", "NoneInfoTests_Misc", "WriteTestBase", "TarTest", "GNUUnicodeTest", "ListTest", "LzmaStreamWriteTest", "CreateTest", "LzmaTest", "NumericOwnerTest", "MiscReadTest", "Bz2Test", "UstarUnicodeTest", "HardlinkTest", "GzipMiscReadTest", "NoneInfoExtractTests_Data", "AppendTest", "NoneInfoExtractTests_Tar", "BadFile", "LimitsTest"], "class_method_calls": ["tarinfo.uname", "support.rmdir", "expected.startswith", "t.size", "tarfile.PAX_FORMAT", "expected.endswith", "os.O_RDONLY", "tarinfo.name", "v2.read", "tar.getnames", "tarinfo.pax_headers", "arc.open", "support.skip_unless_symlink", "s.st_blocks", "os.sep", "tar.list", "self._test_link_extraction", "os.open", "shutil.rmtree", "tarfile.OutsideDestinationError", "tarinfo.gid", "tarfile.AbsoluteLinkError", "tarfl.addfile", "os.linesep", "fobj.closed", "support.captured_stdout", "exc.exception", "self._test_ustar_link", "t.getvalue", "t.linkname", "tarfile.itn", "self._test_member", "tarinfo.mtime", "lzma.LZMAFile", "t.isdir", "self.assertNotIn", "member.pax_headers", "self.subTest", "path.parents", "os.rmdir", "self.tarfilecmd_failure", "dec.decompress", "mock_chown.assert_has_calls", "m2.offset", "self.assertListEqual", "support.requires_lzma", "self.assertIsNot", "tarfile.FIFOTYPE", "regular_file.write_text", "os.path", "tarfile.BLKTYPE", "t.gname", "tar.addfile", "tf.addfile", "expected.split", "fobj.seek", "self._create_testtar", "os.fspath", "tarfile.nts", "gzip.GzipFile", "self._test_partial_input", "os.link", "self.expect_exception", "err.strip", "tarfile.USTAR_FORMAT", "support.check__all__", "stat.filemode", "self.assertIsNotNone", "filetype.suffix", "paths.append", "self._test_pathname", "self.fail", "tar1.extractfile", "self._test_modes", "self.subdir", "tarfile.RECORDSIZE", "self.foo", "cls.file_path", "tio_new.detach", "fobj1.readlines", "os.mkdir", "self.first", "tarfile.ExtractError", "tarfile.ReadError", "NumericOwnerTest._make_test_archive", "m2.get_info", "self.assertRaises", "tarinfo.gname", "self._test_sparse_file", "tarinfo.mode", "path.is_fifo", "self.done", "lzma.LZMADecompressor", "stat.S_ISUID", "unittest.mock", "stat.S_IWGRP", "self._testfunc_fileobj", "cm.exception", "fobj.name", "regular_file.stat", "tarinfo.linkname", "t2.issym", "self._add_testfile", "tarfile.LENGTH_LINK", "path.is_symlink", "stat.S_ISVTX", "self.assertRegex", "a.name", "bz2.BZ2Decompressor", "self.assertIsNone", "tar1.close", "script_helper.assert_python_ok", "tar.gettarinfo", "tar.open", "src.extractfile", "self._test_ustar_name", "re.match", "mock_listdir.return_value", "self.assertLess", "stat.S_IMODE", "kwargs.items", "self.expect_file", "tarfile.BLOCKSIZE", "support.temp_cwd", "self.addCleanup", "fobj.getvalue", "self.file_path", "self._setup_test", "io.TextIOWrapper", "tarfile.TarInfo", "filtered.name", "os.chmod", "m1.get_info", "self.make_simple_tarfile", "t2.islnk", "arc.add", "io.BytesIO", "tar.extract", "f.read", "tio_prev.detach", "pathlib.Path", "self.expected_paths", "self.bar", "self.destdir", "self._testfunc_file", "cls.control_dir", "tar.format", "stat.S_ISGID", "self.skipTest", "self.prefix", "os.stat", "path.replace", "member.name", "self._test_error", "unittest.skipUnless", "support.gc_collect", "self.assertNotEqual", "tarfile.TarFile", "tar.offset", "self.assertGreaterEqual", "support.create_empty_file", "err.lower", "filtered.type", "self.assertIs", "support.TESTFN", "out.replace", "testtarnames.append", "tarfile.GNU_FORMAT", "tarfile.FilterError", "tar.write", "grp.getgrgid", "src.getmember", "got.samefile", "fobj.tell", "tf.list", "os.readlink", "self.assertTrue", "self.raised_exception", "stat.S_IRUSR", "t.type", "tar.name", "custom_filter.done", "tar.next", "stat.S_IXOTH", "self._calc_size", "self.bio", "tarfile.TarError", "t.uname", "tarinfo.offset", "tarinfo.type", "support.findfile", "tarfile.tar_filter", "self.tell", "tar.extraction_filter", "m1.offset", "tarfile.SpecialFileError", "fobj.truncate", "t.name", "tar.extractfile", "tar.getmembers", "tarfile.REGTYPE", "tarinfo.tobuf", "tarfile.DIRTYPE", "sys.platform", "fobj.write", "self.check_context", "support.check_no_warnings", "b.name", "tar2.next", "got.split", "filetype.taropen", "tobj.add", "tarinfo.size", "os.fsencode", "tarfile.nti", "f.write", "tar.fileobj", "tar.__init__", "bz2.BZ2File", "support.temp_dir", "s.st_size", "self.longnametype", "tarfile.XHDTYPE", "support.unlink", "dec.unused_data", "custom_filter.num_files_processed", "tarfl.extractall", "tarinfo2.name", "f.closed", "tobj.name", "self._length", "replaced.pax_headers", "tarfile.LNKTYPE", "tar.getmember", "tarinfo.uid", "stat.S_IWOTH", "self.outerdir", "tarfile.GNUTYPE_LONGNAME", "tar1.next", "self.tarfilecmd", "self.make_evil_tarfile", "self.assertRaisesRegex", "mtime.hex", "bz2.compress", "self.assertIn", "p.relative_to", "fobj.readline", "path.is_dir", "tarfile.CHRTYPE", "tar.close", "pwd.getpwuid", "unittest.skipIf", "self.contents", "tarfile.open", "t.gid", "path.is_file", "stat.S_IRGRP", "self.taropen", "support.requires_bz2", "replaced.name", "tar.extractall", "self.requires_name_attribute", "self.assertEqual", "self._test", "m.name", "self.format", "tarfile.LENGTH_NAME", "tar.type", "self._fs_supports_holes", "tarfile.stn", "self.getvalue", "tio.detach", "fobj2.readlines", "name.endswith", "tarfile.PAX_NUMBER_FIELDS", "self.assertIsInstance", "member.linkname", "filetype.open", "os.makedirs", "cls.control_paths", "os.symlink", "tarfile.fully_trusted_filter", "mock_geteuid.return_value", "t.uid", "os.umask", "s.encode", "c.open", "stat.S_IWUSR", "tar.closed", "self.decompressor", "self.mode", "support.swap_attr", "support.can_symlink", "path.stat", "fobj.readlines", "unittest.TestCase", "self.assertFalse", "c.tarname", "support.change_cwd", "stat.S_IXGRP", "tarfile.LinkOutsideDestinationError", "support.requires_gzip", "t.offset", "self.open", "tar.add", "stat.S_IXUSR", "tarfile.StreamError", "self.tarname", "stat.S_IROTH", "tar.pax_headers", "b.decode", "self.tar_w", "cls.extraction_filter", "self.assertGreater", "unittest.main", "self.tar", "self._test_unicode_filename", "self.control_paths", "t.pax_headers", "tf.add", "tarinfo.replace", "tobj.getnames", "self.hit_eof", "tar2.extractfile", "mock_chown.assert_called_with", "tar.errorlevel", "tarfile.SYMTYPE", "fobj.read", "tarfl.extract", "tarfile.data_filter", "member.replace", "support.rmtree", "data.count", "v1.read", "io.FileIO", "self.suffix", "self._test_fileobj_link", "os.unlink", "self.check_files_present", "script_helper.assert_python_failure", "object.__new__", "self.num_files_processed", "self.extract_with_none", "tarfile.AbsolutePathError", "tarinfo.isreg"]}, "test_tcl.py": {"libraries": ["unittest", "re", "tkinter", "tkinter.Tcl", "_tkinter.TclError", "sys", "_testcapi.INT_MAX", "subprocess", "locale", "_testcapi.PY_SSIZE_T_MAX", "test.support", "os"], "function_names": ["check", "testFlattenLen", "setUp", "testUnsetVarException", "float_eq", "testCall", "test_exprdouble", "testEvalException", "test_huge_string_call", "testEvalException2", "test_evalfile_surrogates_in_result", "test_exprboolean", "test_getboolean", "test_eval_surrogates_in_result", "test_main", "test_splitlist", "test_split", "test_evalfile_null_in_result", "test_user_command", "test_huge_string_builtins", "setUpModule", "passValue", "get_integers", "testCallException2", "testGetVarArray", "test_join", "test_booleans", "test_exprstring", "test_eval_null_in_result", "testGetVarException", "test_getdouble", "testUnsetVar", "test_splitdict", "testEvalFileException", "testEvalFile", "test_getint", "testGetVar", "test_huge_string_builtins2", "unpack", "testLoadWithUNC", "get_tk_patchlevel", "testEval", "test_passing_values", "test_expr_bignum", "testfunc", "testUnsetVarArray", "test_new_tcl_obj", "testSetVar", "testGetVarArrayException", "testSetVarArray", "testCallException", "test_exprlong", "testPackageRequireException"], "function_calls": ["check", "Tcl", "abs", "repr", "test_main", "join", "call", "str", "splitdict", "tuple", "passValue", "open", "eq", "splitlist", "int", "split", "unpack", "float", "get_tk_patchlevel", "map", "print"], "class_names": ["TclTest", "TkinterTest", "BigmemTclTest"], "class_method_calls": ["self.assertIsInstance", "tcl.evalfile", "sys.platform", "tcl.wantobjects", "_tkinter._flatten", "tk.split", "self.wantobjects", "sys.executable", "unittest.skipUnless", "tk.unsetvar", "self.assertEqual", "tkinter._join", "self.assertNotIsInstance", "support.import_module", "tcl.call", "tk.setvar", "self.assertNotEqual", "self.assertAlmostEqual", "tk.getboolean", "env.unset", "self.assertIs", "tk.splitlist", "f.write", "unittest.SkipTest", "support.TESTFN", "re.fullmatch", "self.assertIn", "sys.float_info", "tcl.getboolean", "self.addCleanup", "tk.deletecommand", "_tkinter.TCL_VERSION", "tcl.exprlong", "os.remove", "tk.exprboolean", "tk.createcommand", "tcl.getint", "tcl.exprdouble", "self.assertRaises", "tk.getint", "tk.evalfile", "tk.record", "tcl.setvar", "support.unlink", "support.verbose", "tcl.getdouble", "support.run_unittest", "tk.eval", "m.groups", "tcl.exprstring", "self.get_integers", "os.environ", "tkinter._splitdict", "tcl.getvar", "subprocess.check_output", "support.bigmemtest", "sys.maxsize", "tk.getdouble", "self.interp", "tcl.exprboolean", "tk.exprstring", "os.path", "tk.adderrorinfo", "support.cpython_only", "tcl.eval", "tk.exprlong", "support.EnvironmentVarGuard", "unittest.TestCase", "tcl.unsetvar", "_tkinter.Tcl_Obj"]}, "test_telnetlib.py": {"libraries": ["unittest", "threading", "test.support", "contextlib", "telnetlib", "socket", "selectors"], "function_names": ["testContextManager", "msg", "test_read_until", "_read_eager", "setUp", "test_telnet", "testGetters", "_test_command", "do_nego", "testBasic", "select", "testTimeoutValue", "sendall", "testTimeoutNone", "testTimeoutOpen", "__init__", "sock_avail", "resolution", "test_read_all", "test_debug_accepts_str_port", "register", "new_conn", "close", "test_read_lazy", "test_SB_commands", "server", "test_IAC_commands", "get_map", "test_write", "tearDown", "test_read_some", "recv", "unregister", "testTimeoutDefault", "test_expect", "test_debuglevel_write", "test_socket", "test_debuglevel_reads", "test_read_eager", "fileno", "read_very_lazy"], "function_calls": ["nego_collector", "list", "len", "isinstance", "SocketStub", "test_telnet", "getattr", "cls", "NotImplementedError", "TelnetAlike", "test_socket", "type", "bytes", "func"], "class_names": ["nego_collector", "OptionTests", "ExpectAndReadTestCase", "SocketStub", "GeneralTests", "TelnetAlike", "WriteTests", "ReadTests", "MockSelector", "ExpectTests"], "class_method_calls": ["telnet.open", "self.assertEqual", "nego.seen", "socket.SOCK_STREAM", "telnetlib.Telnet", "t_sock.fileno", "tl.GA", "want.startswith", "telnet.get_socket", "tl.SB", "telnet._messages", "self._read_eager", "self.seen", "self.assertRaises", "self.old_selector", "tl.DO", "tl.NOOPT", "telnet.fill_rawq", "nego.do_nego", "tl.DONT", "telnet.sock", "telnet.read_very_lazy", "support.captured_stdout", "self.assertTrue", "support.HOST", "self.reads", "selectors.BaseSelector", "telnet.read_sb_data", "nego.sb_getter", "self.keys", "self._test_command", "self.block", "telnet.write", "telnet.rawq", "telnet.read_some", "telnet.cookedq", "tl.SE", "self.assertRegex", "socket.getdefaulttimeout", "serv.listen", "key.events", "contextlib.contextmanager", "self.assertIsNone", "self.sock", "self.port", "tl.EC", "tl.NOP", "tl.EL", "unittest.TestCase", "self.evt", "self.sb_seen", "serv.close", "support.bind_port", "telnet.fileno", "tl.IAC", "data.replace", "socket.create_connection", "telnetlib._TelnetSelector", "fileobj.sock", "telnet.set_option_negotiation_callback", "selectors.SelectorKey", "unittest.main", "evt.set", "tl.AYT", "telnet.read_until", "self.assertIsNotNone", "socket.AF_INET", "self.thread", "tl.IP", "self.writes", "threading.Event", "self.assertIn", "telnet.expect", "socket.timeout", "telnet.set_debuglevel", "tl.WILL", "out.getvalue", "self.cmds", "tn.get_socket", "telnet.read_all", "telnet.read_lazy", "conn.close", "self._messages", "self.sb_getter", "tl.AO", "nego.sb_seen", "serv.accept", "socket.setdefaulttimeout", "telnet.msg", "tl.BRK", "threading.Thread", "tl.WONT", "socket.socket"]}, "test_tempfile.py": {"libraries": ["unittest", "io", "re", "contextlib", "signal", "tempfile", "sys", "pathlib", "warnings", "weakref", "unittest.mock", "test.support", "os", "stat", "errno", "test.support.script_helper"], "function_names": ["test_no_files_left_behind", "test_non_directory", "do_create2", "test_flags", "test_multiple_close_before_rollover", "__init__", "check_flags", "test_sane_template", "test_bad_mode", "supports_iter", "test_mode", "test_warnings_on_cleanup", "tearDown", "test_writelines", "test_noinherit", "test_basic", "test_basic_with_bytes_names", "test_rewrite_small", "__exit__", "test_multiple_close_after_rollover", "test_sparse", "test_basic_many", "test_infer_return_type_multiples_and_none", "test_multiple_close", "test_process_awareness", "test_cleanup_with_symlink_modes", "test_modes", "test_context_manager_during_rollover", "test_retval", "test_textmode", "test_cleanup_with_symlink_to_a_directory", "test_context_manager", "__del__", "test_directory_writable", "make_temp", "test_del_on_collection", "test", "test_infer_return_type_multiples", "test_collision_with_existing_file", "setUp", "test_write_sequential", "test_cleanup_with_symlink_flags", "test_infer_return_type_singles", "make_file", "nameCheck", "use_closed", "test_mkdtemp_failure", "_inside_empty_temp_dir", "test_del_on_shutdown", "test_many", "close", "do_create", "test_dis_del_on_close", "test_fileno", "test_choose_directory", "bad_writer", "test_writelines_sequential", "test_case_sensitive", "test_mode_and_encoding", "test_text_mode", "test_has_no_name", "test_file_mode", "test_method_lookup", "test_no_leak_fd", "test_get_six_char_str", "test_properties", "test_read_only_directory", "test_same_thing", "test_wanted_dirs", "test_text_newline_and_encoding", "test_collision_with_existing_directory", "test_directory_exists", "test_bound_methods", "test_explicit_cleanup", "raise_OSError", "__enter__", "test_infer_return_type_pathlib", "test_nonempty_list", "test_del_on_close", "test_truncate_with_size_parameter", "roundtrip", "test_context_manager_after_rollover", "test_exit_on_shutdown", "test_exports", "test_creates_named", "_mock_candidate_names", "our_candidate_list", "write", "test_context_manager_before_rollover", "test_iter", "test_usable_template", "test_nonexisting_directory"], "function_calls": ["format", "test", "make_file", "isinstance", "os_close", "super", "iter", "output_type", "_inside_empty_temp_dir", "wr", "open", "orig_open", "range", "roundtrip", "list", "seek", "next", "zip", "_mock_candidate_names", "write2", "type", "enumerate", "OSError", "read", "hasattr", "write", "len"], "class_names": ["TestMkstemp", "TestExports", "TestCandidateTempdirList", "mktemped", "TestTemporaryDirectory", "TestTemporaryFile", "TestGetDefaultTempdir", "TestMkstempInner", "TestGetTempDir", "TestRandomNameSequence", "TestGetCandidateNames", "TestGetTempPrefix", "NulledModules", "TestBadTempdir", "TestMkdtemp", "TestSpooledTemporaryFile", "TestLowLevelInternals", "BaseTestCase", "mkstemped", "TestNamedTemporaryFile", "TestMktemp"], "class_method_calls": ["os.mkdir", "d.name", "os.pipe", "support.rmdir", "dir1.endswith", "tempfile.mktemp", "os.chflags", "tempfile.gettempdirb", "sys.executable", "unittest.skipUnless", "os.write", "self.assertEqual", "support.gc_collect", "self.assertNotEqual", "warnings.filterwarnings", "check.match", "self.assertIs", "tempfile._infer_return_type", "support.check_impl_detail", "self._unlink", "support.TESTFN", "tempfile.TemporaryDirectory", "tempfile.gettempdir", "self.do_create2", "stat.UF_IMMUTABLE", "os.W_OK", "support.skip_unless_symlink", "self.assertRaises", "ref.copy", "os.close", "os.fstat", "d1.cleanup", "os.open", "support.check_warnings", "self.mkstemped", "file.close", "name2.endswith", "self.do_create", "tmp.name", "f._rolled", "os.P_WAIT", "self._close", "os.linesep", "os.O_RDWR", "os.PathLike", "dir2.endswith", "self.assertTrue", "sys.argv", "unexp.append", "os.get_inheritable", "name.endswith", "signal.SIGKILL", "tempfile.tempdir", "self.assertIsInstance", "errno.ENOENT", "self.r", "self._bflags", "stat.S_IWGRP", "f.name", "f.newlines", "os.symlink", "f.writelines", "cm.exception", "f.mode", "os.getcwd", "tempfile.mkdtemp", "name1.endswith", "stat.S_IWUSR", "self.assertNotIn", "os.rmdir", "self.subTest", "f.seek", "os.fork", "support.swap_attr", "os.curdir", "self.fd", "contextlib.contextmanager", "self.assertIsNone", "mod.__dict__", "fileobj.write", "script_helper.assert_python_ok", "os.path", "os.getenv", "self.str_check", "os.O_CREAT", "unittest.TestCase", "d.cleanup", "self.assertFalse", "self.dir", "f.fd", "sys.platform", "stat.S_IMODE", "os.read", "f.errors", "check.pattern", "file.name", "fp.write", "f.write", "tempfile._mkstemp_inner", "tempfile.TemporaryFile", "f.encoding", "d2.cleanup", "self.addCleanup", "tempfile._RandomNameSequence", "err.decode", "d1.name", "d.update", "support.unlink", "tempfile._candidate_tempdir_list", "tempfile.SpooledTemporaryFile", "tempfile.gettempprefixb", "f._file", "os.access", "self.assertGreater", "dir.endswith", "unittest.main", "self._tflags", "os.walk", "re.compile", "file.fd", "os.lseek", "tempfile._get_candidate_names", "f.closed", "os.chmod", "os.listdir", "fileobj.read", "f.close", "self.nameCheck", "f.truncate", "os.kill", "self.b_check", "os.spawnl", "self.assertIsNotNone", "stat.S_IWOTH", "os.SEEK_SET", "os.waitpid", "self.mktemped", "os.fsdecode", "tempfile._bin_openflags", "f.flush", "tempfile.NamedTemporaryFile", "self._warnings_manager", "d2.name", "self.name", "self.assertIn", "support.rmtree", "tempfile.__dict__", "tempfile.mkstemp", "self.check_flags", "f.read", "closed.append", "tempfile._get_default_tempdir", "self.contents", "pathlib.Path", "self.refs", "support.verbose", "weakref.ref", "d.clear", "stat.UF_NOUNLINK", "tempfile._text_openflags", "fileobj.seek", "os.unlink", "self.make_temp", "mock.patch", "tempfile.gettempprefix", "out.decode", "support.cpython_only", "self.skipTest", "os._exit", "os.stat", "support.EnvironmentVarGuard", "f.fileno", "file.write"]}, "test_textwrap.py": {"libraries": ["unittest", "textwrap.indent", "textwrap.fill", "textwrap.wrap", "textwrap.shorten", "textwrap.TextWrapper", "textwrap.dedent"], "function_names": ["check", "test_roundtrip_tabs", "test_nobreak_long", "show", "setUp", "test_initial_indent", "test_unix_options", "test_wrap_short_1line", "test_indent_nomargin_explicit_default", "test_first_word_too_long_but_placeholder_fits", "test_indent_nomargin_all_lines", "test_non_breaking_space", "check_wrap", "test_drop_whitespace_false", "test_drop_whitespace_false_whitespace_only", "test_dedent_preserve_internal_tabs", "check_shorten", "test_hyphenated", "test_wrap_short", "test_spaces", "test_narrow_non_breaking_space", "test_placeholder_backtrack", "assertUnchanged", "test_indent_no_lines", "test_no_split_at_umlaut", "test_max_lines_long", "test_fill", "test_drop_whitespace_leading_whitespace", "test_width_too_small_for_placeholder", "test_punct_hyphens", "test_break_on_hyphens", "test_dedent_uneven", "test_drop_whitespace_whitespace_line", "test_empty_string_with_initial_indent", "test_dedent_preserve_margin_tabs", "test_indent_empty_lines", "test_bad_width", "test_indent_default", "test_dedent_nomargin", "test_hyphenated_numbers", "test_drop_whitespace_whitespace_indent", "test_indent_nomargin_default", "test_drop_whitespace_false_whitespace_only_with_indent", "test_em_dash", "test_fix_sentence_endings", "test_dedent_even", "test_roundtrip_mixed", "test_indent_all_lines", "test_empty_string", "test_simple", "test_dedent_declining", "test_roundtrip_spaces", "test_umlaut_followed_by_dash", "test_funky_hyphens", "test_indent_explicit_default", "test_placeholder", "test_drop_whitespace_whitespace_only", "test_funky_parens", "test_drop_whitespace_whitespace_only_with_indent", "test_subsequent_indent", "check_split", "test_split", "test_break_long", "test_whitespace"], "function_calls": ["shorten", "fill", "isinstance", "len", "dedent", "TextWrapper", "indent", "zip", "repr", "range", "wrap"], "class_names": ["MaxLinesTestCase", "ShortenTestCase", "DedentTestCase", "BaseTestCase", "LongWordTestCase", "IndentTestCases", "WrapTestCase", "IndentTestCase"], "class_method_calls": ["self.check_wrap", "self.show", "result.append", "line.strip", "self.ROUNDTRIP_CASES", "self.assertEqual", "self.check_split", "self.assertUnchanged", "self.check", "wrapper.width", "self.CASES", "self.wrapper", "text.split", "self.assertRaises", "wrapper.wrap", "self.check_shorten", "self.text", "unittest.main", "wrapper.fill", "unittest.TestCase"]}, "test_thread.py": {"libraries": ["unittest", "_thread", "time", "test.lock_tests", "random", "weakref", "test.support", "os"], "function_names": ["test_forkinthread", "test_barrier", "verbose_print", "setUp", "test_nt_and_posix_stack_size", "test_unraisable_exception", "__init__", "test_stack_size", "task", "test__count", "enter", "tearDown", "task2", "newtask", "test_starting_threads", "thread1"], "function_calls": ["ValueError", "verbose_print", "str", "hasattr", "Barrier", "round", "range", "print"], "class_names": ["BarrierTest", "TestForkInThread", "ThreadRunningTests", "Barrier", "LockTests", "BasicThreadTest"], "class_method_calls": ["self.read_fd", "support.reap_threads", "os.pipe", "self.task", "thread.allocate_lock", "self.assertIsNotNone", "os.read", "os.waitpid", "mut.acquire", "unittest.skipUnless", "self.task2", "self.assertEqual", "mut.release", "os.write", "support.threading_cleanup", "thread.stack_size", "thread.start_new_thread", "lock_tests.LockTests", "started.append", "self.next_ident", "self.assertIs", "cm.unraisable", "self.addCleanup", "thread._count", "self.newtask", "self.write_fd", "support.threading_setup", "os.fork", "unittest.skipIf", "support.wait_threads_exit", "self.checkin_mutex", "self.created", "self.checkout_mutex", "support.catch_unraisable_exception", "done.append", "support.verbose", "os.close", "self.bar", "self.waiting", "self.num_threads", "thread.error", "weakref.ref", "unittest.main", "time.sleep", "self.running_mutex", "self.random_mutex", "self.done_mutex", "random.random", "self.skipTest", "os.name", "started.acquire", "os._exit", "unittest.TestCase", "self.running", "started.release"]}, "test_threaded_import.py": {"libraries": ["random", "unittest.mock", "test.support.verbose", "test.support.run_unittest", "test.support.start_threads", "unittest", "test.support.forget", "threading", "test.threaded_import_hangers", "B", "A", "os", "time", "test.support.unlink", "shutil", "test.support.rmtree", "test.support.TESTFN", "importlib", "test.support.reap_threads", "sys", "modulefinder", "_imp"], "function_names": ["import_ab", "test_main", "test_import_hangers", "path_hook", "setUp", "test_side_effect_import", "import_ba", "tearDown", "__init__", "test_parallel_meta_path", "test_circular_imports", "task", "test_parallel_path_hooks", "find_spec", "mock_register_at_fork", "test_parallel_module_init", "check_parallel_module_init"], "function_calls": ["FlushingFinder", "test_main", "len", "__import__", "Finder", "getattr", "set", "open", "run_unittest", "start_threads", "range", "print"], "class_names": ["Finder", "FlushingFinder", "ThreadedImportTests"], "class_method_calls": ["os.mkdir", "sys.setswitchinterval", "time.monotonic", "results.append", "e.with_traceback", "threading.Lock", "t2.start", "done.set", "self.assertEqual", "sys.path_hooks", "imp.lock_held", "sys.modules", "contents.encode", "f.write", "unittest.SkipTest", "done.wait", "threading.Event", "threading.get_ident", "t1.join", "test.threaded_import_hangers", "self.addCleanup", "sys.getswitchinterval", "self.numcalls", "self.lock", "self.check_parallel_module_init", "sys.meta_path", "importlib.invalidate_caches", "done.clear", "os.curdir", "self.x", "shutil.rmtree", "unittest.TestCase", "t2.join", "finder.numcalls", "random.randrange", "self.assertGreater", "finder.find_spec", "mock.patch", "time.sleep", "sys.path", "flushing_finder.find_spec", "os.path", "self.old_random", "done_tasks.append", "finder.x", "errors.append", "code.encode", "sys.path_importer_cache", "self.assertTrue", "circular_imports_modules.items", "self.assertFalse", "threading.Thread", "t1.start"]}, "test_threadedtempfile.py": {"libraries": ["unittest", "io", "threading", "traceback.print_exc", "tempfile", "test.support.start_threads"], "function_names": ["test_main", "run"], "function_calls": ["len", "print_exc", "str", "TempFileGreedy", "sum", "start_threads", "range"], "class_names": ["TempFileGreedy", "ThreadedTempFileTest"], "class_method_calls": ["self.ok_count", "t.errors", "threading.Event", "tempfile.TemporaryFile", "startEvent.set", "t.name", "self.assertEqual", "t.ok_count", "io.StringIO", "t.error_count", "self.error_count", "f.close", "unittest.TestCase", "threading.Thread", "unittest.main", "self.errors", "startEvent.wait"]}, "test_threading.py": {"libraries": ["_testcapi", "test.lock_tests", "test.support.requires_type_collecting", "random", "subprocess", "test.support.verbose", "test.support", "unittest", "threading", "signal", "test.support.script_helper.assert_python_ok", "weakref", "test.support.cpython_only", "os", "_thread", "time", "test.support.import_module", "sys", "test.support.script_helper.assert_python_failure"], "function_names": ["test_frame_tstate_tracing", "dec", "test_threads_join_2", "test_joining_current_thread", "test_old_threading_api", "test_interrupt_main_noerror", "__init__", "test_clear_threads_states_after_fork", "test_print_exception_stderr_is_none_2", "test_joining_inactive_thread", "test_repr_stopped", "noop_trace", "test_limbo_cleanup", "tearDown", "test_is_alive_after_fork", "test_various_ops_large_stack", "test_custom_excepthook", "test_start_thread_again", "test_no_refcycle_through_target", "test_releasing_unacquired_lock", "test_main_thread_after_fork", "test_interrupt_main_subthread", "test_excepthook_thread_None", "test_PyThreadState_SetAsyncExc", "test_finalize_with_trace", "_run", "test_interrupt_main_mainthread", "test_finalization_shutdown", "callback", "_run_and_join", "test_finalize_runnning_thread", "test_threads_join", "test_tstate_lock", "test_bare_raise_in_brand_new_thread", "test_join_nondaemon_on_shutdown", "f", "test_2_join_in_forked_process", "test_reinit_tls_after_fork", "test_init_immutable_default_args", "test_BoundedSemaphore_limit", "test_3_join_in_forked_from_thread", "inc", "test_system_exit", "do_fork_and_wait", "setUp", "test_main_thread", "threading_hook", "test_print_exception", "test_4_daemon_threads", "test_foreign_thread", "test_shutdown_locks", "test_excepthook", "test_main_thread_during_shutdown", "test_custom_excepthook_fail", "test_print_exception_stderr_is_none_1", "hook", "test_daemon_threads_fatal_error", "test__all__", "test_main_thread_after_fork_from_nonmain_thread", "test_dummy_thread_after_fork", "_callback_spy", "test_various_ops", "test_various_ops_small_stack", "get", "test_recursion_limit", "test_daemon_param", "generator", "sys_hook", "run", "test_enumerate_after_join", "test_daemonize_active_thread", "bare_raise", "fail_new_thread", "test_repr_daemon", "test_1_join_on_shutdown", "test_ident_of_no_threading_threads", "call_interrupt"], "function_calls": ["set_async_exc", "enum", "weak_raising_cyclic_object", "assert_python_ok", "RunSelfFunction", "repr", "Worker", "str", "staticmethod", "callback", "range", "ThreadRunFail", "generator", "ValueError", "weak_cyclic_object", "assert_python_failure", "Counter", "set", "next", "TestThread", "Issue27558", "hasattr", "len", "bare_raise", "ThreadExit", "import_module", "print"], "class_names": ["ThreadTests", "EventTests", "ExceptHookTests", "PyRLockTests", "RunSelfFunction", "InterruptMainTests", "AsyncExc", "ConditionTests", "Worker", "BoundedSemaphoreTests", "TimerTests", "SubinterpThreadingTests", "LockTests", "ThreadRunFail", "SemaphoreTests", "ThreadingExceptionTests", "Counter", "TestThread", "BarrierTests", "Issue27558", "ConditionAsRLockTests", "MiscTestCase", "BaseTestCase", "ThreadExit", "CRLockTests", "ThreadJoinOnShutdown"], "class_method_calls": ["stderr.getvalue", "stdout.decode", "stderr.decode", "self.test_various_ops", "os.pipe", "threading.Lock", "sys.executable", "unittest.skipUnless", "done.set", "self.assertEqual", "self.exc", "self.assertNotEqual", "_thread.error", "_thread.interrupt_main", "self.assertIs", "t.start", "threading.get_ident", "thread.start", "bs.release", "sys.getswitchinterval", "kwargs.copy", "timer2.join", "threading.ThreadError", "self.assertRaises", "_thread.start_new_thread", "thread.join", "th.join", "self.callback_event", "finish.release", "self._run_and_join", "lock_tests.RLockTests", "threading.current_thread", "lock_tests.ConditionTests", "os.close", "ctypes.c_ulong", "threading.BoundedSemaphore", "event.set", "current_thread.join", "e.isSet", "lock_tests.BoundedSemaphoreTests", "lock_tests.BarrierTests", "self.callback_args", "random.random", "self.assertTrue", "tstate_lock.acquire", "t.setName", "t.isAlive", "args.thread", "self.assertIsInstance", "ctypes.pythonapi", "self.should_raise", "os.WIFEXITED", "worker_saw_exception.set", "timer2.start", "t.native_id", "args.exc_type", "done.wait", "unittest.SkipTest", "threading.get_native_id", "threading._PyRLock", "t.setDaemon", "self.assertNotIn", "subprocess.Popen", "lock_tests.SemaphoreTests", "signal.getsignal", "out.strip", "self.nrunning", "threading.ExceptHookArgs", "self.subTest", "t.getName", "os.fork", "support.wait_threads_exit", "os.WEXITSTATUS", "self.assertRegex", "data.splitlines", "support.swap_attr", "threading.Barrier", "signal.SIGINT", "self.assertIsNone", "thread._tstate_lock", "threading._CRLock", "support.captured_output", "sys.settrace", "t.id", "self.sema", "bs.acquire", "threading._DummyThread", "thread.exc", "timer1.kwargs", "unittest.TestCase", "self.assertFalse", "threading.settrace", "threading._start_new_thread", "sys.platform", "ctypes.py_object", "_testcapi.call_in_temporary_c_thread", "threading.Condition", "self.value", "self._callback_spy", "os.read", "mutex.acquire", "self.finished", "self._run", "threading.currentThread", "test.support", "threading.stack_size", "threading.main_thread", "self.addCleanup", "err.decode", "t.ident", "callback.gen", "lock.release", "self.assertWarnsRegex", "sys._current_frames", "signal.signal", "threading.Timer", "subprocess.PIPE", "p.returncode", "self.assertGreater", "_thread.allocate_lock", "t.isDaemon", "unittest.main", "timer1.args", "set_async_exc.argtypes", "threading.Semaphore", "finish.acquire", "threads.append", "worker_started.set", "mutex.release", "signal.SIG_IGN", "threading.excepthook", "sys.setswitchinterval", "support.check__all__", "thread.name", "self.assertIsNotNone", "p.communicate", "timer1.start", "os.waitpid", "threading._shutdown_locks", "self.thread", "event.wait", "lock_tests.LockTests", "numrunning.get", "self.id", "self.mutex", "t.daemon", "main.name", "t.finished", "self.name", "threading.Event", "self.assertIn", "t.join", "self._threads", "self.fail", "sys.exit", "t.is_alive", "raising_cyclic_object.thread", "threading.RLock", "args.exc_value", "lock_tests.EventTests", "main.ident", "timer1.join", "unittest.skipIf", "threading.enumerate", "BaseTestCase.setUp", "ident.append", "sys.exc_info", "t._tstate_lock", "weakref.ref", "signal.SIG_DFL", "tstate_lock.release", "worker_started.wait", "sys.getrefcount", "self.testcase", "worker_saw_exception.wait", "th.start", "time.sleep", "args.exc_traceback", "threading.activeCount", "out.decode", "support.cpython_only", "cyclic_object.thread", "threading._limbo", "threading._active", "started.acquire", "sys.gettrace", "os._exit", "threading.Thread", "started.release"]}, "test_threading_local.py": {"libraries": ["unittest", "_thread", "threading", "time", "gc", "doctest.DocTestSuite", "sys", "weakref", "_threading_local", "test.support"], "function_names": ["setUp", "_test_dict_attribute", "test_threading_local_subclass", "test_derived", "test_main", "test_derived_cycle_dealloc", "_test_one_class", "__init__", "test_local_refs", "f1", "_local_refs", "test_arguments", "tearDown", "f", "test_threading_local", "test_dict_attribute", "test_dict_attribute_subclass", "f2", "target", "test_cycle_collection"], "function_calls": ["MyLocal", "test_main", "len", "DocTestSuite", "Local", "Weak", "cls", "all", "wr", "weak", "hasattr", "c", "range", "X"], "class_names": ["MyLocal", "PyThreadingLocalTest", "ThreadLocalTest", "Local", "Weak", "BaseLocalTest", "LocalSubclass", "X"], "class_method_calls": ["e2.wait", "t2.start", "self.assertEqual", "cycle.append", "self._test_one_class", "obj.__dict__", "t.start", "threading.Event", "self.assertIn", "t.join", "t1.join", "obj.y", "local.weak", "local.x", "e1.set", "local.someothervar", "_thread._local", "self.assertRaises", "e2.set", "unittest.makeSuite", "support.run_unittest", "e1.wait", "self._failed", "weakref.ref", "t2.join", "support.start_threads", "suite.addTest", "self.assertIsNone", "self._local", "self._test_dict_attribute", "time.sleep", "sys.stderr", "obj.x", "x.local", "weaklist.append", "unittest.TestSuite", "self.assertTrue", "gc.collect", "_threading_local.local", "unittest.TestCase", "self.assertFalse", "threading.Thread", "t1.start", "self._local_refs"]}, "test_threadsignals.py": {"libraries": ["unittest", "_thread", "time", "signal", "sys", "test.support", "os"], "function_names": ["send_signals", "test_rlock_acquire_interruption", "test_rlock_acquire_retries_on_intr", "test_main", "test_interrupted_timed_acquire", "handle_signals", "registerSignals", "my_handler", "timed_acquire", "alarm_interrupt", "test_lock_acquire_retries_on_intr", "spawnSignallingThread", "acquire_retries_on_intr", "other_thread", "test_lock_acquire_interruption", "test_signals"], "function_calls": ["timed_acquire", "test_main", "range", "registerSignals"], "class_names": ["ThreadSignals"], "class_method_calls": ["time.monotonic", "self.assertLess", "sys.platform", "thread.allocate_lock", "signalled_all.acquire", "os.getpid", "self.assertEqual", "signal.pause", "thread.start_new_thread", "self.alarm_interrupt", "thread.RLock", "unittest.SkipTest", "self.spawnSignallingThread", "done.acquire", "rlock.release", "signalled_all.release", "lock.release", "self.assertRaises", "signal.alarm", "unittest.skipIf", "signal.SIGALRM", "signal.signal", "support.wait_threads_exit", "self.acquire_retries_on_intr", "rlock.acquire", "support.run_unittest", "signal.SIGUSR1", "self.sig_recvd", "self.start", "lock.acquire", "self.assertGreater", "self.sigs_recvd", "signal.SIGUSR2", "thread.get_ident", "time.sleep", "sys.thread_info", "self.assertTrue", "done.release", "unittest.TestCase", "self.end", "os.kill"]}, "test_time.py": {"libraries": ["_testcapi", "_testcapi.PyTime_AsTimespec", "enum", "_testcapi.pytime_object_to_time_t", "_testcapi.SIZEOF_TIME_T", "test.support", "sysconfig", "unittest", "platform", "threading", "test.support.skip_if_buggy_ucrt_strfptime", "_testcapi.PyTime_AsSecondsDouble", "_testcapi.pytime_object_to_timespec", "_testcapi.PyTime_AsMilliseconds", "locale", "_testcapi.LONG_MIN", "_testcapi.LONG_MAX", "time", "_testcapi.PyTime_AsTimeval", "os.environ", "_testcapi.PyTime_AsMicroseconds", "_testcapi.PyTime_FromSecondsObject", "sys", "decimal", "pickle", "_testcapi.PyTime_FromSeconds", "_testcapi.pytime_object_to_timeval", "math"], "function_names": ["test_strptime_bytes", "test_get_clock_info", "test_monotonic", "setUp", "test_strftime_bounding_check", "converter", "test_perf_counter", "yearstr", "check_int_rounding", "test_bug_3061", "create_converter", "year4d", "test_asctime", "test_localtime_without_arg", "test_strptime_exception_context", "test_strftime", "test_asctime_bounding_check", "create_decimal_converter", "test_object_to_timeval", "test_conversions", "test_clock_monotonic", "test_ctime", "test_tzset", "test_negative", "seconds_filter", "_check_rounding", "test_thread_time", "test_year", "check_ns", "test_monotonic_settime", "test_short_times", "_bounds_checking", "time_t_filter", "test_AsMilliseconds", "test_strftime_format_check", "test_sleep", "test_process_time", "test_clock_getres", "test_ctime_without_arg", "test_large_year", "test_clock_settime", "decimal_round", "test_clock_realtime", "test_FromSecondsObject", "test_insane_timestamps", "test_AsTimespec", "test_localtime_failure", "test_mktime_error", "convert_values", "test_strptime_timezone", "test_time_ns_type", "test_time", "check_float_rounding", "test_object_to_timespec", "float_converter", "test_data_attributes", "test_pthread_getcpuclockid", "tearDown", "timespec_converter", "test_object_to_time_t", "test_strptime", "test_4dyear", "test_localtime_timezone", "_rounding_values", "skip_if_not_supported", "test_default_values_for_zero", "test_AsSecondsDouble", "timeval_converter", "c_int_filter", "test_FromSeconds", "test_mktime", "test_AsTimeval", "test_gmtime_without_arg", "test_AsMicroseconds"], "function_calls": ["sorted", "abs", "PyTime_FromSeconds", "PyTime_AsSecondsDouble", "super", "str", "check_ns", "pytime_object_to_timespec", "range", "convert_values", "set", "pytime_converter", "int", "type", "pytime_object_to_timeval", "expected_func", "PyTime_FromSecondsObject", "func", "float", "hasattr", "divmod", "len", "us_converter", "skip_if_not_supported", "filter", "PyTime_AsTimespec"], "class_names": ["CPyTimeTestCase", "TestPytime", "TestCPyTime", "TestOldPyTime", "_PyTime", "_TestStrftimeYear", "_Test4dYear", "TestLocale", "TestStrftime4dyear", "TestAsctime4dyear", "_TestAsctimeYear", "TimeTestCase"], "class_method_calls": ["decimal.ROUND_HALF_EVEN", "ns_timestamps.append", "unittest.skipUnless", "self.assertEqual", "self.assertNotEqual", "info.monotonic", "self.OVERFLOW_SECONDS", "e.exception", "self.assertGreaterEqual", "self.assertIs", "threading.get_ident", "locale.setlocale", "time.process_time_ns", "self.t", "self.assertRaises", "time.localtime", "time.process_time", "decimal.ROUND_UP", "support.check_warnings", "platform.libc_ver", "time.gmtime", "time.tzset", "d.quantize", "context.rounding", "self.assertTrue", "sysconfig.get_config_var", "_PyTime.ROUND_HALF_EVEN", "self.create_converter", "self.assertIsInstance", "time._STRUCT_TM_ITEMS", "time.timezone", "decimal.Decimal", "time.pthread_getcpuclockid", "time.thread_time", "time.perf_counter_ns", "time.altzone", "time.time_ns", "time.tzname", "locale.Error", "time.CLOCK_REALTIME", "pickle.loads", "info.resolution", "sys.maxsize", "self.create_decimal_converter", "self.test_year", "time.mktime", "unittest.TestCase", "enum.IntEnum", "self.assertFalse", "time.monotonic", "self.assertLess", "sys.platform", "math.modf", "time.asctime", "self.decimal_round", "_PyTime.ROUND_FLOOR", "time.monotonic_ns", "self.assertLessEqual", "info.adjustable", "new_lt.tm_gmtoff", "decimal.ROUND_CEILING", "new_lt9.tm_zone", "time.ctime", "time.CLOCK_THREAD_CPUTIME_ID", "new_lt.tm_zone", "time.clock_gettime_ns", "self._check_rounding", "time.strftime", "_testcapi.INT_MAX", "_PyTime.ROUND_UP", "self.assertGreater", "lt.tm_zone", "unittest.main", "lt.tm_isdst", "time.time", "self.oldloc", "time.clock_settime", "decimal.localcontext", "self.check_float_rounding", "self.time_t_max", "locale.LC_ALL", "ns_timestamps.extend", "self.assertAlmostEqual", "_testcapi.INT_MIN", "time.strptime", "self.time_t_filter", "self._rounding_values", "time.CLOCK_MONOTONIC", "self.assertIn", "self._format", "self.fail", "environ.get", "platform.system", "math.ceil", "unittest.skipIf", "time.clock_gettime", "time.get_clock_info", "t.tm_zone", "t.tm_gmtoff", "decimal.ROUND_FLOOR", "time.clock_getres", "time.daylight", "_PyTime.ROUND_CEILING", "info.implementation", "time.perf_counter", "time.sleep", "self.yearstr", "self.check_int_rounding", "lt.tm_gmtoff", "self.skipTest", "self._bounds_checking", "self.time_t_min", "time.thread_time_ns", "units.append"]}, "test_timeit.py": {"libraries": ["unittest", "io", "timeit", "sys", "test.support.captured_stdout", "textwrap.dedent", "test.support.captured_stderr"], "function_names": ["inc", "test_repeat_callable_setup", "test_repeat_few_reps_and_iters", "fake_callable_setup", "test_main_setup", "setup", "test_timeit_function_zero_iters", "test_main_fixed_iters", "fake_callable_stmt", "test_main_seconds", "test_autorange_with_callback", "autorange", "test_main_milliseconds", "test_autorange", "test_reindent_multi_empty", "test_print_exc", "__call__", "__init__", "test_timeit_few_iters", "test_timer_invalid_setup", "callback", "test_repeat_zero_iters", "run_main", "test_main_microseconds", "assert_exc_string", "timeit", "test_main_exception", "test_reindent_empty", "wrap_timer", "test_reindent_single", "test_main_very_verbose", "test_autorange_second", "test_timer_invalid_stmt", "test_main_verbose", "test_timeit_zero_iters", "tearDown", "test_timeit_callable_stmt_and_setup", "test_main_exception_fixed_reps", "test_main_help", "test_repeat_function_zero_reps", "test_main_with_time_unit", "test_main_bad_switch", "test_timeit_callable_stmt", "test_reindent_multi", "test_timeit_callable_setup", "repeat", "test_main_fixed_reps", "test_repeat_zero_reps", "test_main_multiple_setups", "test_main_negative_reps", "test_repeat_callable_stmt_and_setup", "test_repeat_function_zero_iters", "test_repeat_callable_stmt", "test_timeit_globals_args"], "function_calls": ["captured_stderr", "len", "dedent", "FakeTimer", "globals", "locals", "captured_stdout", "float", "print"], "class_names": ["FakeTimer", "TestTimeit"], "class_method_calls": ["exc_string.splitlines", "timeit.repeat", "sys.flags", "self.fake_timer", "t.repeat", "self.assertEqual", "timeit.timeit", "self.seconds_per_increment", "self.assert_exc_string", "self.count", "self.run_main", "self.BASE_TIME", "self.fake_callable_setup", "self.fake_stmt", "timeit.reindent", "self.autorange", "t.print_exc", "io.StringIO", "self.saved_timer", "t.autorange", "timeit.Timer", "self.timeit", "self.assertRaises", "unittest.skipIf", "timeit.main", "timer.wrap_timer", "self.repeat", "s.getvalue", "self.fake_setup", "t.timeit", "timeit._fake_timer", "self.assertGreater", "unittest.main", "self.fake_callable_stmt", "timeit.__doc__", "sys.path", "self.assertTrue", "args.append", "error_stringio.getvalue", "unittest.TestCase", "self.setup_calls"]}, "test_timeout.py": {"libraries": ["unittest", "time", "socket", "test.support", "functools", "errno"], "function_names": ["setUp", "testBlockingThenTimeout", "testReturnType", "testFloatReturnValue", "test_main", "testTypeCheck", "testAcceptTimeout", "testRecvTimeout", "testRangeCheck", "tearDown", "testTimeoutThenBlocking", "testConnectTimeout", "testRecvfromTimeout", "testSendto", "testObjectCreation", "testSendall", "testSend", "resolve_address", "_sock_operation"], "function_calls": ["test_main", "method", "getattr", "range", "NotImplementedError", "type", "resolve_address"], "class_names": ["TCPTimeoutTestCase", "UDPTimeoutTestCase", "CreationTestCase", "TimeoutTestCase"], "class_method_calls": ["support.bind_port", "time.monotonic", "self.assertLess", "err.errno", "socket.AF_INET", "self.assertEqual", "socket.SOCK_STREAM", "support.requires", "support.transient_internet", "self.fail", "socket.timeout", "self.assertRaises", "unittest.skipIf", "support.is_resource_enabled", "functools.lru_cache", "support.run_unittest", "serv.listen", "serv.getsockname", "self._sock_operation", "self.assertGreater", "self.fuzz", "self.sock", "errno.ECONNREFUSED", "self.localhost", "sock.connect", "sock.close", "socket.SOCK_DGRAM", "self.skipTest", "sock.settimeout", "self.addr_remote", "socket.getaddrinfo", "support.HOST", "unittest.TestCase", "socket.socket"]}, "test_tix.py": {"libraries": ["unittest", "tkinter.tix", "tkinter.TclError", "sys", "test.support"], "function_names": ["setUp", "test_tix_available"], "function_calls": [], "class_names": ["TestTix"], "class_method_calls": ["support.requires", "sys.platform", "self.root", "self.fail", "self.addCleanup", "self.skipTest", "support.import_module", "unittest.TestCase", "tix.Tk", "unittest.main"]}, "test_tk.py": {"libraries": ["test.support", "tkinter.test.runtktests"], "function_names": ["test_main"], "function_calls": ["test_main"], "class_names": [], "class_method_calls": ["support.requires", "support.run_unittest", "support.import_module", "runtktests.get_tests"]}, "test_tokenize.py": {"libraries": ["random", "tokenize.detect_encoding", "unittest.mock", "decimal.Decimal", "tokenize.Untokenizer", "tokenize.tok_name", "io.BytesIO", "test.support", "tokenize.ENCODING", "unittest", "tokenize.tokenize", "token", "io.StringIO", "os", "tokenize.NUMBER", "tokenize.OP", "tokenize.generate_tokens", "tokenize.untokenize", "tokenize", "tokenize._tokenize", "tokenize.NAME", "tokenize.NEWLINE", "glob", "tokenize.STRING", "test.test_grammar.INVALID_UNDERSCORE_LITERALS", "test.test_grammar.VALID_UNDERSCORE_LITERALS", "tokenize.open", "unittest.TestCase", "tokenize.ENDMARKER"], "function_names": ["test_non_ascii_identifiers", "_testFile", "test_matched_bom_and_cookie_second_line", "test_utf8_normalization", "test_string_concatenation", "test_backslash_continuation", "test_latin1_coding_cookie_and_utf8_bom", "test_cookie_second_line_empty_first_line", "mock__tokenize", "test_multiplicative", "test_oneline_defs", "test_unary", "test_comparison", "test_open", "test_open_error", "test_utf8_coding_cookie_and_no_utf8_bom", "test_syntaxerror_latin1", "test_continuation", "test_additive", "test_mismatched_bom_and_cookie_first_line_raises_syntaxerror", "test_string", "test_selector", "check_roundtrip", "test_utf8_coding_cookie_and_utf8_bom", "test_bad_coding_cookie", "test_bom_no_cookie", "test_false_encoding", "__init__", "number_token", "mock_readline", "test_method", "test_pathological_trailing_whitespace", "test_cookie_second_line_noncommented_first_line", "test_function", "roundtrip", "test_underscore_literals", "test_float", "test__tokenize_does_not_decode_with_encoding_none", "mock_detect_encoding", "test_async", "test_cookie_first_line_no_bom", "test_matched_bom_and_cookie_first_line", "test_tokenize", "test_cookie_second_line_no_bom", "test_latin1_normalization", "test_shift", "check_tokenize", "assertExactTypeEqual", "test_random_files", "test_implicit_newline", "get_readline", "test_int", "test_cookie_second_line_commented_first_line", "test_short_files", "stringify_tokens_from_source", "test_mismatched_bom_and_cookie_second_line_raises_syntaxerror", "test_roundtrip", "test_indentation_semantics_retained", "test_bad_input_order", "test_iter_compat", "test_no_bom_no_encoding_cookie", "test_basic", "test_no_coding_cookie_and_utf8_bom", "decistmt", "test_long", "test__tokenize_decodes_with_specified_encoding", "test_unicode", "readline", "test_exact_type", "test_filename_in_exception", "test_decistmt", "test_tabs"], "function_calls": ["object", "_tokenize", "repr", "isinstance", "iter", "str", "StringIO", "number_token", "open", "range", "list", "tokenize_open", "tokenize", "eval", "stringify_tokens_from_source", "BytesIO", "len", "Untokenizer", "generate_tokens", "decistmt", "detect_encoding", "Bunk", "readline", "untokenize", "Decimal", "print"], "class_names": ["UntokenizeTest", "Test_Tokenize", "TestMisc", "TestTokenizerAdheresToPep0263", "TokenizeTest", "TestTokenize", "TestRoundtrip", "Bunk", "TestDetectEncoding", "GenerateTokensTest"], "class_method_calls": ["u.compat", "token.LESS", "u.untokenize", "buf.encode", "self.assertEqual", "self.assertNotEqual", "token.ENDMARKER", "token.LEFTSHIFT", "token.LBRACE", "token.LSQB", "support.TESTFN", "token.STAREQUAL", "token.PLUS", "token.GREATEREQUAL", "random.sample", "token.COLON", "self.assertRaises", "token.RBRACE", "u.prev_col", "token.DOUBLESLASH", "support.is_resource_enabled", "fp.mode", "token.VBAREQUAL", "token.RSQB", "tokenize_module._tokenize", "token.SLASHEQUAL", "glob.escape", "self.assertTrue", "token.CIRCUMFLEX", "token.SEMI", "token.RPAR", "token.LPAR", "result.append", "u.prev_row", "m.closed", "testfiles.remove", "u.encoding", "token.DOT", "cm.exception", "token.VBAR", "ins.name", "token.DOUBLESTAREQUAL", "s.encode", "out.append", "opstr.encode", "glob.glob", "token.ATEQUAL", "token.NUMBER", "self.subTest", "self.roundtrip", "source_string.splitlines", "self.assertRegex", "support.findfile", "os.curdir", "token.STAR", "enc.encode", "token.MINEQUAL", "tokenize_module.detect_encoding", "self.check_tokenize", "os.path", "token.NEWLINE", "token.NAME", "encoding.replace", "self._testFile", "self._lines", "literal.encode", "self.check_roundtrip", "self.assertExactTypeEqual", "code.splitlines", "token.NOTEQUAL", "f.readline", "self.addCleanup", "buf.append", "token.DOUBLESLASHEQUAL", "token.PLUSEQUAL", "token.CIRCUMFLEXEQUAL", "token.AT", "u.tokens", "support.unlink", "token.COLONEQUAL", "result.extend", "self.get_readline", "token.AMPER", "unittest.main", "f.encode", "f.close", "token.AMPEREQUAL", "bytes_from5.splitlines", "token.PERCENTEQUAL", "token.RIGHTSHIFTEQUAL", "token.LESSEQUAL", "token.TILDE", "token.SLASH", "token.LEFTSHIFTEQUAL", "token.RARROW", "TestRoundtrip.check_roundtrip", "self.assertRaisesRegex", "token.GREATER", "u.add_whitespace", "self.name", "bytes_from2.splitlines", "token.DOUBLESTAR", "token.RIGHTSHIFT", "fp.encoding", "f.read", "self._index", "token.EQEQUAL", "support.verbose", "token.PERCENT", "ins.readline", "mock.patch", "expected.rstrip", "token.MINUS", "token.EQUAL", "code.encode", "token.COMMA", "token.ELLIPSIS"]}, "test_fixcid.py": {"libraries": ["unittest", "runpy", "os.path", "sys", "test.test_tools.scriptsdir", "io.StringIO", "test.test_tools.skip_if_missing", "test.support", "os"], "function_names": ["test_alter_comments", "run_script", "test_directory", "test_parse_strings"], "function_calls": ["skip_if_missing", "list", "open", "StringIO"], "class_names": ["Test"], "class_method_calls": ["os.mkdir", "runpy.run_path", "os.path", "support.swap_attr", "support.TESTFN", "self.assertMultiLineEqual", "support.unlink", "support.rmtree", "output.getvalue", "self.addCleanup", "support.captured_stdout", "self.assertEqual", "exit.code", "unittest.TestCase", "file.write", "support.captured_stderr", "self.run_script"]}, "test_gprof2html.py": {"libraries": ["unittest", "sys", "unittest.mock", "tempfile", "test.test_tools.skip_if_missing", "test.test_tools.import_tool", "os"], "function_names": ["setUp", "test_gprof", "fixup"], "function_calls": ["open", "skip_if_missing", "import_tool"], "class_names": ["Gprof2htmlTests"], "class_method_calls": ["os.path", "mock.patch", "self.addCleanup", "tempfile.TemporaryDirectory", "wmock.open", "sys.argv", "self.assertTrue", "unittest.TestCase", "self.gprof", "unittest.main"]}, "test_i18n.py": {"libraries": ["unittest", "test.support.temp_dir", "datetime.datetime", "test.test_tools.toolsdir", "sys", "test.support.temp_cwd", "test.support.script_helper.assert_python_ok", "test.test_tools.skip_if_missing", "os", "textwrap.dedent"], "function_names": ["test_funcdocstring_multiple_funcs", "get_header", "test_funcdocstring", "test_classdocstring_early_colon", "test_funcdocstring_fstring", "test_header", "test_funcdocstring_annotated_args", "test_msgid", "test_classdocstring_bytes", "get_msgids", "test_funcdocstring_bytes", "test_funcdocstring_defvalue_args", "test_files_list", "test_classdocstring", "test_classdocstring_fstring", "test_msgid_bytes", "test_POT_Creation_Date", "test_funcdocstring_annotated_return", "test_msgid_fstring", "extract_docstrings_from_str"], "function_calls": ["skip_if_missing", "temp_dir", "len", "assert_python_ok", "dedent", "temp_cwd", "open"], "class_names": ["Test_pygettext"], "class_method_calls": ["os.mkdir", "self.script", "self.get_header", "line.strip", "sys.platform", "data.split", "self.get_msgids", "creationDate.endswith", "self.extract_docstrings_from_str", "fp.write", "self.assertIn", "self.assertNotIn", "sfile.write", "msgids.append", "self.subTest", "unittest.skipIf", "datetime.strptime", "cur_msgid.append", "fp.read", "val.strip", "line.split", "os.path", "line.startswith", "unittest.TestCase", "self.assertFalse"]}, "test_lll.py": {"libraries": ["unittest", "sys", "tempfile", "test.test_tools.skip_if_missing", "test.test_tools.import_tool", "test.support", "os"], "function_names": ["setUp", "test_lll_multiple_dirs"], "function_calls": ["open", "skip_if_missing", "import_tool"], "class_names": ["lllTests"], "class_method_calls": ["os.path", "output.getvalue", "tempfile.TemporaryDirectory", "self.assertEqual", "os.symlink", "support.captured_stdout", "os.name", "unittest.TestCase", "self.lll", "support.skip_unless_symlink", "unittest.main"]}, "test_md5sum.py": {"libraries": ["unittest", "test.support.script_helper.assert_python_failure", "test.test_tools.scriptsdir", "test.support.script_helper.assert_python_ok", "test.test_tools.skip_if_missing", "test.support", "os"], "function_names": ["test_multiple_files", "setUpClass", "test_checksum_fodder", "test_dash_t", "tearDownClass", "test_dash_s", "test_usage", "test_noargs", "test_dash_l"], "function_calls": ["skip_if_missing", "len", "assert_python_failure", "assert_python_ok", "open"], "class_names": ["MD5SumTests"], "class_method_calls": ["cls.fodder", "os.mkdir", "self.fodder", "self.script", "self.assertEqual", "f.write", "support.TESTFN", "self.assertIn", "support.rmtree", "out.startswith", "self.assertNotIn", "self.fodder_textmode_md5", "cls.fodder_textmode_md5", "out.splitlines", "self.fodder_md5", "self.assertGreater", "unittest.main", "os.path", "part.encode", "cls.script", "self.assertTrue", "cls.fodder_md5", "unittest.TestCase", "self.assertFalse"]}, "test_pathfix.py": {"libraries": ["unittest", "sys", "test.test_tools.scriptsdir", "subprocess", "test.test_tools.import_tool", "test.test_tools.skip_if_missing", "test.support", "os"], "function_names": ["test_pathfix_keeping_flags", "test_recursive", "setUp", "pathfix", "test_pathfix_adding_errors", "test_pathfix", "test_pathfix_adding_flag"], "function_calls": ["skip_if_missing", "open"], "class_names": ["TestPathfixFunctional"], "class_method_calls": ["os.mkdir", "self.script", "sys.executable", "self.assertEqual", "proc.stderr", "f.write", "support.TESTFN", "support.rmtree", "self.addCleanup", "f.read", "output.split", "support.unlink", "subprocess.run", "unittest.main", "proc.returncode", "proc.stdout", "os.path", "self.pathfix", "unittest.TestCase"]}, "test_pdeps.py": {"libraries": ["unittest", "tempfile", "test.test_tools.skip_if_missing", "test.test_tools.import_tool", "os"], "function_names": ["setUpClass", "test_process_errors", "test_inverse_attribute_error"], "function_calls": ["open", "skip_if_missing", "import_tool"], "class_names": ["PdepsTests"], "class_method_calls": ["self.pdeps", "os.path", "stream.write", "tempfile.TemporaryDirectory", "unittest.TestCase", "unittest.main"]}, "test_pindent.py": {"libraries": ["unittest", "textwrap", "sys", "test.test_tools.scriptsdir", "subprocess", "test.support.script_helper.assert_python_ok", "test.test_tools.skip_if_missing", "test.support", "os"], "function_names": ["test_escaped_newline", "assertFileEqual", "pindent", "test_empty_line", "test_oneline", "test_selftest", "lstriplines", "test_statements", "test_preserve_indents", "test_multilevel", "pindent_test"], "function_calls": ["assert_python_ok", "skip_if_missing", "compile", "open"], "class_names": ["PindentTests"], "class_method_calls": ["self.script", "f2.readlines", "self.lstriplines", "sys.executable", "self.assertEqual", "proc.communicate", "line.lstrip", "f.write", "support.temp_dir", "subprocess.Popen", "self.pindent", "f.read", "self.pindent_test", "f1.readlines", "data.splitlines", "subprocess.PIPE", "self.assertIsNone", "unittest.main", "textwrap.dedent", "os.path", "self.assertTrue", "self.maxDiff", "unittest.TestCase"]}, "test_reindent.py": {"libraries": ["unittest", "test.support.findfile", "test.test_tools.scriptsdir", "test.support.script_helper.assert_python_ok", "test.test_tools.skip_if_missing", "os"], "function_names": ["test_reindent_file_with_bad_encoding", "test_noargs", "test_help"], "function_calls": ["assert_python_ok", "skip_if_missing", "findfile"], "class_names": ["ReindentTests"], "class_method_calls": ["self.script", "os.path", "self.assertEqual", "self.assertNotEqual", "self.assertGreater", "unittest.TestCase", "unittest.main"]}, "test_unparse.py": {"libraries": ["unittest", "io", "unparse", "random", "test.test_tools.basepath", "tokenize", "test.test_tools.toolsdir", "test.test_tools.skip_if_missing", "ast", "test.support", "os"], "function_names": ["test_with_as", "test_files", "test_chained_comparisons", "read_pyfile", "test_with_two_items", "test_del_statement", "test_class_decorators", "test_dict_comprehension", "test_try_except_finally", "test_for_else", "check_roundtrip", "test_raise_from", "test_huge_float", "test_nonlocal", "test_relative_import", "test_unary_parens", "test_annotations", "test_lambda_parentheses", "test_set_comprehension", "assertASTEqual", "test_shifts", "test_while_else", "test_integer_parens", "test_starred_assignment", "get_names", "test_function_arguments", "test_bytes", "test_fstrings", "test_subscript", "test_dict_unpacking_in_dict", "test_strings", "test_imaginary_literals", "test_min_int", "test_elifs", "test_set_literal", "test_with_simple", "test_class_definition"], "function_calls": ["skip_if_missing", "compile", "read_pyfile", "str", "open", "print"], "class_names": ["UnparseTestCase", "DirectoryTestCase", "ASTTestCase"], "class_method_calls": ["ast.dump", "pyfile.readline", "self.check_roundtrip", "tokenize.detect_encoding", "self.assertEqual", "test.support", "names.append", "unparse_buffer.getvalue", "pyfile.read", "cls.NAMES", "io.StringIO", "self.assertASTEqual", "n.endswith", "random.sample", "self.subTest", "ast.PyCF_ONLY_AST", "cls.test_directories", "n.startswith", "unittest.main", "os.path", "unparse.Unparser", "os.listdir", "unittest.TestCase", "self.get_names"]}, "test_trace.py": {"libraries": ["unittest", "test.support.TESTFN_UNICODE", "test.support.TESTFN", "trace", "test.tracedmodules.testmod", "trace.Trace", "textwrap", "test.support.unlink", "test.support.script_helper.assert_python_failure", "sys", "test.support.FS_NONASCII", "test.support.script_helper.assert_python_ok", "test.support.captured_stdout", "os", "test.support.rmtree"], "function_names": ["test_loop_caller_importing", "test_failures", "traced_func_calling_generator", "traced_func_importing_caller", "setUp", "inst_method_calling", "traced_capturer", "test_simple_caller", "traced_caller_list_comprehension", "test_listfuncs_flag_success", "_coverage", "test_inst_method_calling", "traced_func_loop", "test_traced_decorated_function", "__init__", "test_traced_func_loop", "test_coverage_ignore", "traced_decorated_function", "inst_method_linear", "test_linear_methods", "decorator1", "static_method_linear", "class_method_linear", "test_coverage", "test_count_and_summary", "test_arg_errors", "test_traced_func_importing", "test_issue9936", "traced_func_linear", "test_exec_counts", "traced_func_importing", "test_cover_files_written_with_highlight", "traced_doubler", "func", "tearDown", "get_firstlineno", "test_trace_func_generator", "fix_ext_py", "traced_func_generator", "test_traced_func_linear", "test_ignored", "test_trace_list_comprehension", "test_sys_argv_list", "test_run_as_module", "traced_func_simple_caller", "decorator_fabric", "decorator2", "my_file_and_modname", "test_cover_files_written_no_highlight"], "function_calls": ["assert_python_ok", "getattr", "rmtree", "Trace", "vars", "TracedClass", "jn", "open", "captured_stdout", "range", "assert_python_failure", "traced_func_linear", "traced_func_importing", "int", "traced_doubler", "unlink", "func", "get_firstlineno", "hasattr", "traced_func_generator", "fix_ext_py", "compile", "traced_func_simple_caller", "decorator_fabric", "my_file_and_modname", "globals"], "class_names": ["TestCommandLine", "TestFuncs", "TestCallers", "Test_Ignore", "TestCoverageCommandLineOutput", "TestLineCounts", "TestCoverage", "TracedClass", "TestRunExecCounts"], "class_method_calls": ["stdout.decode", "sys.base_exec_prefix", "tracer.runfunc", "tracer.results", "self.assertEqual", "stdout.readline", "tracer.run", "sys.modules", "ignore.names", "os.__file__", "func.__code__", "trace._fullmodname", "f.write", "self.assertIn", "trace._Ignore", "self._saved_tracefunc", "self.addCleanup", "expected.keys", "filename.endswith", "f.read", "testmod.func", "stdout.seek", "testmod.__file__", "self.assertRaises", "unittest.skipIf", "self.assertWarns", "stdout.getvalue", "expected.encode", "fd.write", "obj.inst_method_calling", "self.codefile", "self.my_py_filename", "self.filemod", "direct_stdout.strip", "r.write_results", "unittest.main", "sys.base_prefix", "self.a", "self._coverage", "line.split", "textwrap.dedent", "os.path", "trace.Trace", "self.coverfile", "sys.settrace", "os.listdir", "sys.gettrace", "self.tracer", "self.assertTrue", "trace.__file__", "unittest.TestCase", "self.assertFalse", "self.inst_method_linear"]}, "test_traceback.py": {"libraries": ["unittest", "re", "test.support.TESTFN", "textwrap", "test.support.unlink", "_testcapi.traceback_print", "test.support.Error", "sys", "io.StringIO", "test.support.script_helper.assert_python_ok", "traceback", "test.support.captured_output", "test.support.cpython_only", "subprocess", "test.support", "_testcapi.exception_print", "linecache", "collections.namedtuple"], "function_names": ["test_traceback_format_with_cleared_frames", "test_walk_stack", "test_extract_stack", "test_format_exception_only_bad__str__", "_check_recursive_traceback_display", "test_extract_tb", "syntax_error_with_caret_non_ascii", "test_traceback_format", "test_clear", "test_context", "test_nocaret", "test_bad_indentation", "test_len", "__str__", "test_format_smoke", "syntax_error_with_caret", "test_from_exception", "test_cause", "test_context_suppression", "middle", "raise_with_locals", "cleanup_tb", "test_format_exception", "test_from_list_edited_stack", "test_extract_stackup_deferred_lookup_lines", "test_locals", "test_comparison_params_variations", "last_returns_frame1", "test_recursive_traceback_python", "extract", "test_base_exception", "test_comparison_equivalent_exceptions_are_equal", "test_extract_stack_lookup_lines", "test_basics", "test_recursive_traceback_cpython_internal", "render_exc", "last_returns_frame5", "last_raises4", "test_print_traceback_at_exit", "test_comparison_basic", "test_caret", "last_returns_frame2", "raise_exc", "test_lazy_lines", "test_simple", "f", "test_syntax_error_offset_at_eol", "some_inner", "last_raises5", "test_explicit_line", "last_raises1", "last_raises2", "get_exception", "syntax_error_bad_indentation2", "test_format_stack", "deeper", "test_lookup_lines", "e", "outer", "test_walk_tb", "test_cause_recursive", "test_print_exception", "fmt", "test_format_locals", "test_unhashable", "check_zero_div", "syntax_error_bad_indentation", "test_syntax_error_no_lineno", "test_limit", "prn", "inner_raise", "get_exception_format", "test_stack_format", "last_returns_frame3", "last_raises3", "test_cause_and_context", "some_exception", "test_no_refs_to_exception_and_traceback_objects", "syntax_error_with_caret_2", "recurse", "test_encoded_file", "zero_div", "__eq__", "outer_raise", "assertEqualExcept", "test_from_list", "test_print_stack", "test_message_none", "test_extract_stack_limit", "test_smoke", "do_test", "test_no_locals", "h", "last_returns_frame4", "get_report", "g", "inner", "test_traceback_header", "foo", "test_all", "check_traceback_format"], "function_calls": ["extract", "traceback_print", "deeper", "assert_python_ok", "recurse", "getattr", "outer", "Error", "SyntaxError", "fmt", "KeyboardInterrupt", "test_code", "render_exc", "KeyError", "isinstance", "test_tb", "iter", "UnhashableException", "str", "tuple", "StringIO", "test_frame", "assertEqualExcept", "open", "Exception", "captured_output", "range", "X", "ValueError", "list", "prn", "raise_exc", "do_test", "cleanup_func", "set", "dir", "h", "int", "namedtuple", "inner_raise", "type", "func", "exception_or_callable", "unlink", "f", "MyObject", "middle", "len", "raise_with_locals", "g", "compile", "exception_print", "inner", "some_inner", "foo", "exec", "globals"], "class_names": ["TestStack", "X", "TracebackFormatTests", "UnhashableException", "TestFrame", "MiscTracebackCases", "MyObject", "BaseExceptionReportingTests", "TestTracebackException", "TracebackCases", "PyExcReportingTests", "LimitTests", "CExcReportingTests", "MiscTest"], "class_method_calls": ["stderr.getvalue", "stdout.decode", "exc.format", "excs.append", "extract.__code__", "sys.executable", "traceback.StackSummary", "file_.getvalue", "self.assertEqual", "linecache.lazycache", "exc.stack", "self.assertNotEqual", "traceback.print_stack", "traceback.format_stack", "output.write", "s2.format", "self.get_exception_format", "self._check_recursive_traceback_display", "s.getvalue", "traceback.extract_stack", "source_line.startswith", "fmt.__code__", "f.line", "self.check_traceback_format", "exc.__suppress_context__", "self.last_returns_frame3", "self.assertTrue", "exc.__context__", "self.assertCountEqual", "self.syntax_error_with_caret", "result_f.splitlines", "traceback.TracebackException", "linecache.updatecache", "prn.__code__", "self.assertIsInstance", "traceback.print_exception", "sio.getvalue", "self.check_zero_div", "traceback.print_exc", "inner_frame.f_locals", "re.escape", "g.__code__", "re.search", "self.syntax_error_with_caret_non_ascii", "traceback.walk_stack", "traceback.format_exception_only", "support.requires_type_collecting", "location.startswith", "output.getvalue", "subprocess.Popen", "self.assertNotIn", "stfile.getvalue", "subprocess.STDOUT", "some_inner.__code__", "traceback.extract_tb", "self.assertRegex", "support.swap_attr", "exc.exc_type", "self.last_returns_frame2", "excstderr.getvalue", "self.get_exception", "self.last_raises4", "traceback.FrameSummary", "self.assertIsNone", "self.assertIsNot", "f._line", "traceback.print_tb", "self.last_raises1", "X.__qualname__", "context_message.strip", "sys._getframe", "traceback.format_exc", "process.communicate", "self.last_raises5", "unittest.TestCase", "tbfile.getvalue", "traceback.__all__", "self.zero_div", "stderr_h.getvalue", "self.expected_stack", "boundaries.split", "X.__module__", "f.locals", "tb.tb_frame", "s.format", "name.startswith", "e.lineno", "self.last_returns_frame1", "self.some_exception", "stderr.splitlines", "self.syntax_error_bad_indentation", "traceback.clear_frames", "python_fmt.splitlines", "subprocess.PIPE", "traceback.format_exception", "encoded_message.decode", "self.assertGreater", "exc.__cause__", "unittest.main", "sys.getrecursionlimit", "re.compile", "e.__class__", "banner.startswith", "self.maxDiff", "self.syntax_error_with_caret_2", "expected.add", "linecache.cache", "excfile.getvalue", "self.last_raises2", "linecache.clearcache", "sys.tracebacklimit", "self.last_raises3", "self.syntax_error_bad_indentation2", "self.assertIn", "X.__name__", "self.fail", "self.last_returns_frame5", "traceback.walk_tb", "message.encode", "tb.tb_next", "self.get_report", "sys.exc_info", "stderr_f.getvalue", "e.filename", "f.__code__", "stderr_g.getvalue", "sys.getrefcount", "tbstderr.getvalue", "textwrap.dedent", "e.__traceback__", "traceback._RECURSIVE_CUTOFF", "msg.splitlines", "self.last_returns_frame4", "ststderr.getvalue", "h.__code__", "traceback.format_tb", "self.exc"]}, "test_tracemalloc.py": {"libraries": ["unittest", "tracemalloc", "_testcapi", "contextlib", "test.support.script_helper.assert_python_failure", "sys", "unittest.mock.patch", "test.support.script_helper.assert_python_ok", "test.support", "os", "test.support.script_helper.interpreter_requires_environment"], "function_names": ["test_env_var_disabled", "test_get_traces_intern_traceback", "test_slices", "setUp", "test_env_var_enabled_at_startup", "test_snapshot", "track", "test_get_traces", "test_track", "find_trace", "test_fork", "traceback", "test_is_tracing", "test_main", "check_sys_xoptions_invalid", "test_env_limit", "allocate_bytes2", "test_env_var_ignored_with_E", "getline", "allocate_bytes4", "test_format_traceback", "check_env_var_invalid", "test_pymem_alloc0", "test_env_var_invalid", "test_stop_track", "allocate_bytes", "untrack", "frame", "test_filter_match_trace", "traceback_lineno", "get_traced_memory", "test_snapshot_group_by_file", "test_get_traced_memory", "test_new_reference", "check_track", "traceback_filename", "get_frames", "test_snapshot_group_by_traceback", "test_filter_match_filename_joker", "fnmatch", "test_track_without_gil", "test_statistic_diff_format", "get_traceback", "test_snapshot_group_by_cumulative", "test_stop_untrack", "tearDown", "allocate_bytes3", "test_filter_attributes", "test_create_snapshot", "test_track_already_tracked", "test_filter_traces_domain", "test_get_object_traceback", "test_env_var_disabled_by_default", "test_untrack", "test_filter_match_filename", "fork_child", "test_snapshot_group_by_line", "test_get_tracemalloc_memory", "test_set_traceback_limit", "test_filter_match", "test_sys_xoptions_invalid", "create_snapshots", "test_filter_traces", "test_sys_xoptions", "test_trace_format", "test_snapshot_save_attr", "test_filter_traces_domain_filter", "test_clear_traces", "test_statistic_format"], "function_calls": ["assert_python_ok", "reversed", "interpreter_requires_environment", "id", "traceback", "test_main", "allocate_bytes2", "str", "allocate_bytes4", "tuple", "allocate_bytes", "traceback_lineno", "range", "list", "assert_python_failure", "traceback_filename", "get_frames", "fnmatch", "allocate_bytes3", "hasattr", "len", "create_snapshots", "sum"], "class_names": ["TestCommandLine", "TestTracemallocEnabled", "TestSnapshot", "TestCAPI", "TestFilters"], "class_method_calls": ["snapshot2.statistics", "self.untrack", "tracemalloc.Traceback", "tracemalloc.get_object_traceback", "self.domain", "unittest.skipUnless", "snapshot.filter_traces", "frame.f_back", "self.assertEqual", "support.gc_collect", "frames.append", "self.assertGreaterEqual", "f._match_frame", "self.assertIs", "support.TESTFN", "f.lineno", "sys.getsizeof", "self.assertRaises", "f.inclusive", "tracemalloc._get_traces", "trace.size", "self.get_traceback", "frame.f_code", "_testcapi.tracemalloc_track", "filter._match_frame", "self.assertTrue", "stdout.rstrip", "self.assertIsInstance", "snapshot.statistics", "os.WIFEXITED", "snapshot4.traces", "tracemalloc.take_snapshot", "unittest.mock", "tracemalloc.clear_traces", "cm.exception", "support.SuppressCrashReport", "tracemalloc.Snapshot", "snapshot2.test_attr", "self.subTest", "tracemalloc.get_tracemalloc_memory", "os.fork", "os.WEXITSTATUS", "self.obj", "self.fork_child", "support.run_unittest", "self.assertIsNone", "snapshot2.traces", "self.assertIsNot", "snapshot.dump", "tracemalloc.Filter", "_testcapi.tracemalloc_get_traceback", "obj2_traceback._frames", "sys._getframe", "snapshot3.filter_traces", "self.check_env_var_invalid", "unittest.TestCase", "self.get_traced_memory", "self.assertFalse", "stack.enter_context", "trace.traceback", "self.assertLess", "self.assertLessEqual", "tb.format", "self.size", "_testcapi.tracemalloc_untrack", "self.ptr", "self.addCleanup", "snapshot2.compare_to", "patch.object", "obj1_traceback._frames", "f._match_traceback", "support.unlink", "snapshot.traces", "tracemalloc.Statistic", "tracemalloc.stop", "snapshot3.traces", "self.find_trace", "tracemalloc.get_traced_memory", "tracemalloc.DomainFilter", "self.assertIsNotNone", "os.waitpid", "snapshot.test_attr", "self.fail", "self.check_track", "tracemalloc.StatisticDiff", "tracemalloc._Frame", "obj_traceback._frames", "code.co_filename", "tracemalloc.is_tracing", "unittest.skipIf", "f.filename_pattern", "self.check_sys_xoptions_invalid", "frame.f_lineno", "tracemalloc.start", "traceback._frames", "contextlib.ExitStack", "f.all_frames", "snapshot.traceback_limit", "self.skipTest", "snapshot5.traces", "os.name", "tracemalloc.get_traceback_limit", "os._exit", "self.track"]}, "test_ttk_guionly.py": {"libraries": ["unittest", "tkinter", "_tkinter.TclError", "tkinter.test.runtktests", "test.support", "tkinter.ttk"], "function_names": ["test_main"], "function_calls": ["test_main"], "class_names": [], "class_method_calls": ["unittest.SkipTest", "runtktests.get_tests", "support.run_unittest", "ttk.Button", "button.destroy", "support.import_module", "support.requires", "tkinter.Tk", "root.destroy"]}, "test_ttk_textonly.py": {"libraries": ["test.support", "tkinter.test.runtktests"], "function_names": ["test_main"], "function_calls": ["test_main"], "class_names": [], "class_method_calls": ["support.run_unittest", "support.import_module", "runtktests.get_tests"]}, "test_tuple.py": {"libraries": ["unittest", "test.seq_tests", "itertools.product", "gc", "sys", "pickle", "test.support", "collections.Counter"], "function_names": ["test_constructors", "check", "check_one_exact", "test_tupleresizebug", "test_no_comdat_folding", "test_iadd", "test_hash_optional", "test_truth", "test_repr", "test_keyword_args", "test_track_dynamic", "tryone", "test_bug7466", "test_iterator_pickle", "_not_tracked", "test_track_literals", "test_len", "test_imul", "check_track_dynamic", "test_track_subtypes", "f", "test_getitem_error", "test_lexicographic_ordering", "tryone_inner", "test_hash_exact", "_tracked", "test_reversed_pickle", "test_repr_large"], "function_calls": ["check", "object", "check_one_exact", "T", "reversed", "tp", "repr", "super", "iter", "str", "tryone", "tuple", "hash", "range", "list", "Counter", "set", "next", "zip", "type", "f", "product", "tryone_inner", "len", "max", "map", "print"], "class_names": ["T", "MyTuple", "TupleTest"], "class_method_calls": ["self.assertLess", "c.values", "self.assertEqual", "self._tracked", "self.assertRaisesRegex", "support.NHASHBITS", "self.fail", "support.collision_stats", "self.assertRaises", "gc.is_tracked", "seq_tests.CommonTest", "self.check_track_dynamic", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "unittest.main", "support.cpython_only", "pickle.dumps", "self.assertTrue", "gc.collect", "self.type2test", "self.assertFalse", "self._not_tracked", "sys.__stdout__"]}, "test_turtle.py": {"libraries": ["unittest", "test.support", "pickle"], "function_names": ["test_config_dict", "_assert_arithmetic_cases", "test_pos", "test_equality", "test_reset", "setUp", "test_backwards", "test_repr", "test_vector_negative", "test_goto", "test_constructor", "test_forward", "test_heading", "test_radians_and_degrees", "test_towards", "test_partial_config_dict_with_commments", "test_setheading", "test_rotate", "__rmul__", "test_home", "__mul__", "test_vector_subtraction", "get_cfg_file", "test_right", "test_showturtle_hideturtle_and_isvisible", "test_pendown_and_penup", "assertVectorsAlmostEqual", "test_left", "test_positions", "test_setx_and_sety", "test_config_dict_invalid", "test_distance_method", "test_distance", "test_vector_multiply", "test_pickling", "test_vector_addition"], "function_calls": ["len", "range", "tuple", "abs", "lambda_operator", "zip", "Vec2D", "open", "sum", "enumerate", "Multiplier", "repr"], "class_names": ["TestTNavigator", "TestVec2D", "TestTPen", "VectorComparisonMixin", "TurtleConfigTest", "Multiplier"], "class_method_calls": ["self.assertIsInstance", "vec.rotate", "self.get_cfg_file", "self.assertAlmostEqual", "self.assertEqual", "self.assertNotEqual", "support.import_module", "turtle.config_dict", "tpen.hideturtle", "tpen.isvisible", "f.write", "support.TESTFN", "another_turtle.forward", "self.assertIn", "self.fail", "self.addCleanup", "tpen.isdown", "turtle.TNavigator", "tpen.penup", "self.subTest", "self.assertRaises", "stdout.getvalue", "support.unlink", "self.assertVectorsAlmostEqual", "turtle.Vec2D", "tpen.showturtle", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "self.assertFalse", "unittest.main", "another_turtle.left", "pickle.dumps", "support.captured_stdout", "self.assertTrue", "unittest.TestCase", "self._assert_arithmetic_cases", "tpen.pendown", "turtle.TPen", "self.nav"]}, "test_type_comments.py": {"libraries": ["sys", "ast", "unittest"], "function_names": ["classic_parse", "test_vardecl", "test_longargs", "test_asyncvar", "test_nonasciidef", "test_inappropriate_type_comments", "test_underscorednumber", "check_both_ways", "test_func_type_input", "parse", "test_forstmt", "test_asyncdef", "parse_func_type_input", "test_matmul", "parse_all", "test_funcdef", "test_ignores", "test_asynccomp", "test_withstmt", "test_fstring", "test_redundantdef"], "function_calls": ["len", "SyntaxError", "check_both_ways", "str", "set", "bool", "enumerate", "ord", "range", "parse_func_type_input"], "class_names": ["TypeCommentTests"], "class_method_calls": ["t.args", "self.lowest", "ti.tag", "arg.arg", "self.assertEqual", "self.assertRaisesRegex", "arg.id", "tree.returns", "ti.lineno", "self.classic_parse", "arg.type_comment", "self.assertRaises", "tree.body", "self.assertIsNone", "tree.type_ignores", "t.name", "unittest.main", "self.parse", "self.parse_all", "self.highest", "tree.argtypes", "todo.remove", "sys.version_info", "ast.parse", "self.assertTrue", "unittest.TestCase"]}, "test_typechecks.py": {"libraries": ["unittest"], "function_names": ["__subclasscheck__", "__instancecheck__", "testIsSubclassInternal", "testIsSubclassBuiltin", "testIsInstanceBuiltin", "testIsInstanceActual", "testIsSubclassActual", "testSubclassBehavior"], "function_calls": ["isinstance", "issubclass", "any", "set", "type", "SubInt", "Integer"], "class_names": ["TypeChecksTest", "SubInt", "Integer", "ABC"], "class_method_calls": ["Integer.__subclasscheck__", "cls.__dict__", "inst.__class__", "self.assertEqual", "sub.mro", "unittest.TestCase", "unittest.main", "cls.__subclasscheck__"]}, "test_types.py": {"libraries": ["types", "inspect", "sys", "unittest.mock", "pickle", "weakref", "collections.abc", "locale", "test.support.run_with_locale"], "function_names": ["test_iterators", "__mro_entries__", "throw", "copy", "__init__", "__missing__", "test_float_to_string", "test_method_wrapper_types", "test_len", "test_as_dict", "__iter__", "items", "test_new_class_metaclass_keywords", "__next__", "test_strings", "test_customdict", "test_new_class_with_mro_entry_multiple", "__prepare__", "test_format_spec_errors", "test_prepare_class", "test_method_descriptor_types", "test_get", "test_type_function", "test_recursive", "gen_func", "__await__", "test_new_class_exec_body", "test_truth_values", "test_new_class_with_mro_entry_none", "test_bad___prepare__", "test_boolean_ops", "test_new_class_defaults", "test_subclass", "test_views", "test_zero_division", "test_underlying_dict", "f", "test_float__format__locale", "test_attrset", "test_slot_wrapper_types", "__new__", "coro", "test_equal", "__contains__", "__getitem__", "test_duck_corogen", "test", "test_returning_itercoro", "test_new_class_with_mro_entry_multiple_2", "test_methods", "keys", "test_fake_namespace_compare", "test_duck_coro", "test_one_argument_type", "test_comparisons", "test_attrdel", "test_new_class_meta", "test_duck_functional_gen", "test_unbound", "close", "test_pickle", "test_genfunc", "test_missing", "func", "test_copy", "test_contains", "test_async_def", "test_attrget", "test_int__format__locale", "test_int__format__", "bar", "test_chainmap", "test_float__format__", "test_new_class_subclass", "test_wrong_args", "test_non_gen_values", "test_repr", "gen", "test_metaclass_override_callable", "test_new_class_with_mro_entry_error", "values", "test_numeric_types", "test_nested", "get", "test_floats", "test_constructor", "test_recursive_repr", "test_new_class_basics", "__len__", "test_wrapper_object", "test_duck_gen", "test_resolve_bases", "test_internal_sizes", "test_metaclass_derivation", "test_gen", "send", "meta_func", "test_normal_integers", "test_float_constructor", "test_new_class_with_mro_entry", "test_new_class_meta_with_base", "foo", "test_metaclass_override_function"], "function_calls": ["format", "object", "min", "test", "sorted", "getattr", "run_with_locale", "N", "CoroLike", "CoroGenLike", "dictmissing", "gen", "TypeError", "vars", "repr", "StopIteration", "Awaitable", "issubclass", "gen_func", "super", "iter", "str", "customdict", "B", "tuple", "A", "dict", "Exception", "range", "list", "ref", "C", "Spam", "set", "dir", "M", "int", "next", "zip", "type", "corofunc", "float", "userdict", "Generator", "len", "FakeSimpleNamespace", "max", "chr", "bar", "BadMeta", "foo", "coro", "ord"], "class_names": ["A2", "N", "dictmissing", "B1", "CoroLike", "A3", "BMeta", "CoroGenLike", "Bar", "ClassCreationTests", "Awaitable", "MappingProxyTests", "CoroutineTests", "Foo", "B", "customdict", "A", "AMeta", "SimpleNamespaceTests", "B2", "A1", "C", "Spam", "ANotMeta", "M", "GenLike", "Meta", "userdict", "Generator", "FakeSimpleNamespace", "BadMeta", "TypesTests", "BNotMeta"], "class_method_calls": ["gen.__iter__", "new_calls.clear", "gen.__next__", "f.__format__", "self.assertEqual", "self.assertNotEqual", "decorated_foo.__code__", "tuple.__itemsize__", "gen.__code__", "D.__mro__", "wrapper.gi_code", "self.assertIs", "ns.z", "ns2.z", "D.__bases__", "gen.gi_running", "self.assertRaises", "self.Meta", "prepare_calls.clear", "dict.__contains__", "wrapper.cr_running", "pickle.HIGHEST_PROTOCOL", "ns3.spam", "type.__new__", "dict.__getitem__", "ns2.ham", "wrapper.cr_frame", "gen.gi_frame", "C.x", "self.assertTrue", "gen.reset_mock", "D.__orig_bases__", "self.assertIsInstance", "wrapper.__name__", "types.ClassMethodDescriptorType", "gen.__name__", "int.from_bytes", "unittest.mock", "locale.format_string", "dict.fromkeys", "cm.exception", "gen.send", "object.__init__", "ns.y", "ns.w", "types.MappingProxyType", "types.MethodWrapperType", "C.z", "C.__dict__", "view.values", "ns2._y", "ns1.a", "wrapper.send", "ns3.__dict__", "types.new_class", "pickle.loads", "self._i", "collections.ChainMap", "self.assertIsNone", "self.assertIsNot", "gen.throw", "ns1.spam", "str.join", "list.append", "sys.maxsize", "wrapper.close", "ns1.__dict__", "wrapper.throw", "gen.__qualname__", "inspect.CO_ITERABLE_COROUTINE", "view.items", "wrapper.__qualname__", "unittest.TestCase", "self.assertFalse", "types.SimpleNamespace", "C2.__dict__", "g.gi_code", "wrapper.gi_running", "C.y", "ns.update", "gen.gi_code", "value.__format__", "foo.__code__", "ns2.theta", "ns.x", "ns3.x", "ns2.__dict__", "ns2.spam", "self._fut", "coro.cr_code", "view.__getitem__", "self.assertGreater", "self.send", "dict.get", "ex.args", "unittest.main", "view.keys", "types.MethodDescriptorType", "types.WrapperDescriptorType", "wrapper.__await__", "object.__basicsize__", "object.__lt__", "E.__dict__", "types.resolve_bases", "int.__dict__", "types.coroutine", "D.__dict__", "wrapper.gi_frame", "coro.close", "prepare_calls.append", "int.__new__", "i.__format__", "view.copy", "types._GeneratorWrapper", "object.__str__", "self.assertRaisesRegex", "C.__name__", "self.throw", "ns2.x", "self.assertIn", "self.fail", "coro.send", "inspect.CO_COROUTINE", "gen.close", "wrapper.cr_code", "self.mappingproxy", "view.get", "int.__lt__", "wrapper.gi_yieldfrom", "ns2.y", "C.__bases__", "wrapper.cr_await", "weakref.ref", "collections.abc", "types.BuiltinMethodType", "gen.gi_yieldfrom", "new_calls.append", "ns1.b", "types.prepare_class", "pickle.dumps"]}, "test_typing.py": {"libraries": ["copy.copy", "typing.Literal", "abc", "typing.NamedTuple", "typing.no_type_check_decorator", "typing.Pattern", "contextlib", "typing.Optional", "typing.VT", "typing.NewType", "typing.AsyncContextManager", "unittest.skipUnless", "typing.re.__all__", "typing.no_type_check", "typing.get_type_hints", "typing.MutableMapping", "typing.TypeVar", "typing.re.__name__", "typing.io.BinaryIO", "test.ann_module2", "typing.get_origin", "typing.io.__all__", "types", "unittest.SkipTest", "typing.AnyStr", "typing.T", "typing.ClassVar", "typing.Type", "collections", "test.mod_generics_cache", "typing.io.__name__", "typing.TextIO", "weakref", "typing.Generic", "typing.final", "typing.io.TextIO", "typing", "typing.__all__", "re", "typing.re.Pattern", "typing.io.IO", "unittest.skip", "typing.NoReturn", "typing.Tuple", "typing.Protocol", "copy.deepcopy", "typing.TypedDict", "typing.IO", "typing.Any", "xml.etree.cElementTree.Element", "test.ann_module", "unittest.main", "typing.cast", "test.ann_module3", "typing.re.Match", "typing.runtime_checkable", "typing.Match", "typing.get_args", "typing.BinaryIO", "typing.overload", "sys", "pickle", "typing.Final", "typing.KT", "unittest.TestCase", "typing.List", "typing.Callable", "typing.Union"], "function_names": ["test_typeddict_create_errors", "test_subclass_error", "test_union_forward", "test_callable_with_ellipsis", "cmp", "test_fail_with_bare_generic", "test_noreturn_subclass_type_error", "test_no_isinstance_or_issubclass", "test_async_generator", "test_namedtuple_errors", "__iter__", "test_subprotocols_extending", "test_multiple_inheritance_special", "test_custom_subclasshook", "test_counter_instantiation", "test_reversible", "test_protocols_isinstance", "test_basic_protocol", "test_collections_as_base", "test_container", "test_none_treated_correctly", "test_previous_behavior", "test_type_basic", "test_hashable", "test_mutableset", "test_typeddict_errors", "test_unordered", "test_ellipsis_in_generic", "test_list_subclass", "test_basics", "test_annotation_usage", "foobar", "test_name_error", "test_mapping", "test_forward_recursion_actually", "namespace1", "test_init_called", "test_no_async_generator_instantiation", "test_no_type_check", "f", "test_sized", "test_async_contextmanager", "__new__", "test_new_repr_complex", "__getitem__", "test_deque_instantiation", "test_basics_keywords_syntax", "append", "test_type_erasure_special", "test_new_repr_bare", "test_supports_abs", "test_literals_inside_other_types", "fun", "__int__", "test_no_runtime_deco_on_nominal", "test_no_inheritance_from_nominal", "test_counter_subclass_instantiation", "test_protocols_issubclass_non_callable", "test_forwardref_instance_type_error", "func", "test_protocols_bad_subscripts", "bar", "test_extended_generic_rules_eq", "test_callable_instance_type_error", "test_delayed_syntax_error", "meth", "test_repr", "test_namedtuple_keyword_usage", "test_no_isinstance", "visit", "test_any_instance_type_error", "test_non_protocol_subclasses", "test_multi_subscr_base", "test_parameterized_slots_dict", "test_empty", "test_annotation_usage_with_methods", "test_coroutine", "foo", "test_cannot_instantiate", "test_subscripted_generics_as_proxies", "test_naive_runtime_checks", "test_get_args", "test_defaultdict_subclass", "test_final_forward_ref", "test_defining_generic_protocols_old_style", "test_subclassing_async_generator", "test_subclassing_subclasshook", "test_protocols_issubclass", "__complex__", "test_collection", "test_type_erasure", "test_extended_generic_rules_subclassing", "test_no_type_check_forward_ref_as_string", "test_get_type_hints_wrapped_decoratored_func", "__str__", "test_union_unique", "test_namedtuple_special_keyword_names", "test_py36_class_syntax_usage", "test_binaryio", "test_ordereddict_subclass", "test_collections_protocols_allowed", "test_callable_instance_works", "test_frozenset_subclass_instantiation", "test_abc_bases", "test_no_type_check_class", "test_dict_subclass", "test_generic_protocols_eq", "test_typevar_subclass_type_error", "test_no_eval_union", "test_typeddict_special_keyword_names", "test_no_type_check_no_bases", "test_bytestring", "test_basics_functional_syntax", "test_awaitable", "test_callable_forward", "test_protocols_pickleable", "nested", "test_get_type_hints_from_various_objects", "test_chainmap_instantiation", "test_type_error", "test_sequence", "test_union_forward_recursion", "test_supports_round", "close", "test_cannot_init", "test_orig_bases", "test_union_generalization", "test_forward_equality_hash", "test_get_type_hints_modules_forwardref", "test_overload_succeeds", "test_copy_and_deepcopy", "test_subprotocols_merging", "test_repr_2", "test_no_list_instantiation", "test_no_dict_instantiation", "test_async_iterable", "test_no_tuple_instantiation", "test_generic_errors", "__init_subclass__", "test_nested", "test_protocol_checks_after_subscript", "test_mutablesequence", "test_protocols_in_unions", "test_new_with_args2", "test_generic_hashes", "test_subclassing_register", "test_none_on_non_callable_doesnt_block_implementation", "test_everything_implements_empty_protocol", "test_no_bivariant", "test_eq_2", "test_protocols_isinstance_py36", "test_new_repr", "test_abstractset", "__subclasshook__", "test_union_compare_other", "test_generator", "test_callable_with_ellipsis_forward", "test_init_subclass_super_called", "test_missing__name__", "__init__", "stuff", "new_user", "athrow", "test_false_subclasses", "test_annotation_usage_with_default", "asend", "test_function_implements_protocol", "test_any_works_with_alias", "test_immutability_by_copy_and_pickle", "__add__", "blah", "test_generic_protocols_special_from_protocol", "assertNotIsSubclass", "test_generic_protocols_repr", "test_eq_hash", "test_errors", "test_union_union", "test_init", "naive_dict_check", "test_list", "test_no_generator_instantiation", "test_tuple_subclass", "test_multiple_bases", "test_set", "x", "test_cannot_subclass_vars", "test_copy_and_pickle", "test_contextmanager", "test_textio", "test_no_multiple_subscripts", "test_union_object", "test_generic_protocols_special_from_generic", "test_deque", "test_forward_equality_gth", "test_single_class_disappears", "barfoo2", "test_typevar_instance_type_error", "manager", "test_tuple_instance_type_error", "test_base_class_kept", "test_union_str_pattern", "test_etree", "test_parameterized_slots", "test_get_type_hints_for_object_with_annotations", "test_dict", "test_pickle", "test_implicit_any", "test_alias_equality", "test_cannot_subclass_var_itself", "add_both", "test_callable_wrong_forms", "test_protocols_isinstance_init", "test_syntax_error", "test_copy_generic_instances", "test_forwardref_subclass_type_error", "add_right", "test_cannot_subclass", "test_all_exported_names", "test_counter", "naive_list_base_check", "test_noreturn_instance_type_error", "test_constrained_error", "test_iterator", "barfoo", "test_union_constrained", "test_none_on_callable_blocks_implementation", "test_forward_equality_namespace", "test_final_unmodified", "test_ordereddict_instantiation", "namespace2", "test_optional", "test_issubclass_fails_correctly", "test_get_type_hints_ClassVar", "test_any_subclass_type_error", "test_supports_float", "test_all", "test_weakref_all", "assertIsSubclass", "test_self_subclass", "test_nested_classvar_fails_forward_ref_check", "test_subscript_meta", "test_builtin_protocol_whitelist", "test_supports_complex", "test_meta_no_type_check", "test_respect_no_type_check", "test_tuple_forward", "test_namedtuple_pyversion", "test_type_optional", "test_extended_generic_rules_repr", "test_supports_bytes", "test_io", "test_iterable", "test_io_submodule", "test_init_subclass", "__setitem__", "test_basic", "testg", "test_default_globals", "test_generic_forward_ref", "__delitem__", "test_no_redefinition", "test_chainmap_subclass", "test_multiple_inheritance", "__bytes__", "test_protocols_support_register", "test_type_typevar", "test_no_frozenset_instantiation", "clear_caches", "test_supports_index", "__call__", "test_new_no_args", "test_no_subclassing", "test_get_type_hints_modules", "test_forward_equality", "test_frozenset", "test_new_with_args", "ameth", "test_supports_int", "test_total", "meth2", "test_get_type_hints_for_builtins", "test_defaultdict_instantiation", "test_eq_1", "test_mutablemapping", "set", "test_abc_registry_kept", "test_cannot_instantiate_vars", "test_fail_with_bare_union", "test_cannot_instantiate_abstract", "test_bundled_protocol_instance_works", "test_no_set_instantiation", "magic_decorator", "test_not_generic", "test_union_any", "test_equality", "test_subclassing", "naive_generic_check", "test_bound_errors", "test_basic_plain", "double", "test_illegal_parameters_do_not_raise_runtime_errors", "test_async_iterator", "get", "test_forward_repr", "test_function_repr_union", "test_re_submodule", "add_left", "testf", "test_set_subclass_instantiation", "__len__", "test_overload_fails", "test_union_instance_type_error", "meth1", "test_get_origin", "test_all_repr_eq_any", "g", "test_defining_generic_protocols", "Elem", "test_get_type_hints_classes", "test_chain_repr", "test_no_instantiation"], "function_calls": ["frozenset", "CoolEmployee", "getattr", "MyDefDict", "Any", "g_with", "LocalEmployee", "NewType", "copy", "iter", "Literal", "dict", "new_user", "Concrete", "AsyncIteratorWrapper", "MySet", "blah", "MyList", "gth", "cast", "Options", "EmpDnew", "Emp", "len", "MyOrdDict", "Union", "Element", "main", "PG", "exec", "globals", "MyDeque", "Callable", "object", "MMC", "cls", "naive_dict_check", "UserName", "final", "MyDict", "u", "ClassVar", "user_class", "str", "NonPR", "BadClass", "a", "locals", "MyFrozenSet", "namespace1", "get_args", "ACM", "UserId", "Other1", "get_type_hints", "D", "LabelPoint2D", "f", "Other", "SkipTest", "P", "C2", "TD", "APoint", "all", "MyCounter", "manager", "skipUnless", "skip", "get_origin", "vars", "isinstance", "B", "tuple", "TypeVar", "hash", "range", "XRepr", "C", "Tuple", "set", "C1", "type", "hasattr", "D1", "XMeth", "Bad", "T1", "TypedDict", "MM", "c", "OKClass", "Point2D", "naive_generic_check", "naive_list_base_check", "Node", "NotACM", "CP", "CoolEmployeeWithDefault", "BPoint", "repr", "issubclass", "super", "NamedTuple", "MyChainMap", "G", "A", "MMA", "NT", "NoReturn", "deepcopy", "FinalException", "Test", "namespace2", "IntListVisitor", "Final", "bytearray", "MMB", "SM1", "MyPoint", "callable", "foo", "E", "EmpD"], "class_names": ["ForRefExample", "NamedTupleTests", "CoolEmployee", "Der", "LiteralTests", "MyDefDict", "Coordinate", "BP", "Loop", "IOTests", "UnionTests", "MyChain", "MM1", "Concrete", "NewTypeTests", "MySet", "Derived", "MyGeneric", "M", "W", "MyList", "OverloadTests", "Options", "MyOrdDict", "ClassVarTests", "Founder", "OtherABCTests", "PG", "TP", "NewGeneric", "MyDeque", "S", "MMC", "P2", "Y", "ManagingFounder", "RETests", "Bar", "TypeVarTests", "MyDict", "T2", "Empty", "TupleTests", "CastTests", "CM", "Visitor", "Foo", "NonPR", "P1", "PR", "BadClass", "MyFrozenSet", "NoReturnTests", "NestedEmployee", "PSub", "Position", "AnyTests", "MySimpleMapping", "MyCall", "HasCallProtocol", "Other1", "BadP", "D", "LabelPoint2D", "Other2", "Meta", "CallableTests", "NoTpCheck", "MyTuple", "BaseTestCase", "Other", "P", "CustomContextManager", "ProtocolTests", "CSub", "C2", "Proto", "Base", "APoint", "Point", "Inn", "MyCounter", "BadPG", "MM2", "B", "F", "CI", "Subclass", "PNonCall", "XRepr", "C", "C1", "MyMapping", "TypeTests", "MyTup", "CustomProtocol", "Employee", "I", "NoneAndForward", "ABase", "CG", "XMeth", "D1", "Bad", "T1", "MM", "OKClass", "GenericTests", "D2", "ProUser", "NonP", "Point2D", "NotACM", "Node", "TypedDictTests", "YAxis", "CP", "CC", "CoolEmployeeWithDefault", "Z", "GetUtilitiesTestCase", "BPoint", "MyChainMap", "A", "G", "MMA", "NT", "X", "CollectionsAbcTests", "HasForeignBaseClass", "Custom", "BasicUser", "NotYet", "MyDef", "FinalException", "Test", "GetTypeHintTests", "Manager", "ForwardRefTests", "IntListVisitor", "V", "Final", "MMB", "FinalTests", "PM", "XAxis", "AllTests", "MyPoint", "User", "DI", "SimpleMapping", "E"], "class_method_calls": ["typing.Generator", "a.readline", "TD.__annotations__", "jelle.name", "typing.Pattern", "ann_module.h_class", "typing.Optional", "D.x", "c.from_a", "t.add_both", "PR._is_protocol", "self.assertEqual", "ci.__orig_class__", "self.assertNotEqual", "Emp._field_types", "ann_module2.CV", "B.register", "self.add_both", "ann_module2.__dict__", "typing.AbstractSet", "self.assertIs", "joe.name", "obj.items", "D.__bases__", "typing.Type", "x.foo", "collections.defaultdict", "typing.SupportsInt", "typing.OrderedDict", "cls.attr", "D.__parameters__", "Emp._fields", "self.assertRaises", "typing.__all__", "cooler_employee.cool", "self.assertSetEqual", "self.from_a", "abc.ABCMeta", "typing.MutableSet", "obj.__orig_class__", "self.left", "testf.__annotations__", "tim.cool", "typing.IO", "pickle.HIGHEST_PROTOCOL", "ann_module2.NTC", "LocalEmployee.__name__", "obj.__mro__", "b.__annotations__", "x.__dict__", "typing.re", "collections.Counter", "b.foo", "PR._is_runtime_protocol", "jelle.cool", "typing.Iterator", "self.a", "abc.abstractmethod", "typing.Match", "obj.from_b", "self.from_c", "c.attr", "self.right", "typing.SupportsAbs", "C.x", "ABase.meth", "self.assertTrue", "CoolEmployeeWithDefault._fields", "D.__orig_bases__", "XRepr.__new__", "typing.Callable", "CoolEmployee.__name__", "a.__parameters__", "self.assertIsInstance", "d_int.banana", "TypedDict.__new__", "ann_module.j_class", "C.__orig_bases__", "ann_module.C", "P.__parameters__", "x.x", "typing.FrozenSet", "typing.io", "t.add_left", "W.attr", "PNonCall.register", "NoTpCheck.__no_type_check__", "d.banana", "LabelPoint2D.__module__", "k.startswith", "C.z", "collections.deque", "nick.name", "CoolEmployeeWithDefault._field_types", "typing.ClassVar", "LabelPoint2D.__annotations__", "self.assertNotIn", "PG._is_protocol", "typing.SupportsRound", "typing.Set", "NoTpCheck.Inn", "c_int.potato", "typing.ContextManager", "a.append", "self.y", "d_int.foobar", "CoolEmployeeWithDefault._field_defaults", "self.label", "self.subTest", "self.clear_caches", "typing.Iterable", "typing.Hashable", "typing._cleanups", "MMC.update", "self.failureException", "LocalEmployee._field_types", "typing.Awaitable", "k.endswith", "typing.AsyncIterator", "C.register", "self.x", "typing.Mapping", "self.NestedEmployee", "D.z", "contextlib.contextmanager", "pickle.loads", "collections.ChainMap", "self.assertIsNot", "collections.OrderedDict", "typing.Sized", "str.join", "g.send", "ann_module.M", "tim.name", "sys.version_info", "typing.ChainMap", "A.register", "joe.id", "b.__dict__", "typing.ForwardRef", "stuff.__annotations__", "x.bar", "D.register", "self.assertFalse", "typing.Union", "typing._get_protocol_attrs", "mod_generics_cache.A", "typing.SupportsBytes", "LabelPoint2D.__name__", "obj.__parameters__", "types.FunctionType", "typing.AsyncContextManager", "c.from_c", "X.attr", "c_int.tomato", "X.__module__", "ci.attr", "Emp.__name__", "self.arg", "Z.attr", "c.arg", "C.foo", "pat.__class__", "Emp.__module__", "c.potato", "P._is_protocol", "ann_module.dec", "P._is_runtime_protocol", "C.__module__", "a.label", "Emp.__total__", "c.__dict__", "typing.TextIO", "cls.__bases__", "self.attr", "C.__parameters__", "Y.attr", "a.fields", "self.assertWarns", "t.add_right", "typing.Coroutine", "typing.AsyncIterable", "re.I", "c.foo", "typing.ByteString", "typing.Protocol", "self.assertIsSubclass", "c.tomato", "a.typename", "Options.__total__", "typing.MutableSequence", "Emp.__bases__", "foo.__name__", "NamedTuple.__new__", "re.compile", "a.get", "typing.BinaryIO", "C2.__parameters__", "d.foobar", "T2.__parameters__", "e.args", "typing.Counter", "self.store", "tp.__args__", "typing.List", "typing.Deque", "jim.id", "ForRefExample.nested", "T1.__parameters__", "ann_module.Y", "ann_module.foo", "ann_module.D", "a.set", "a.self", "magic_decorator.__name__", "self.assertNotIsInstance", "X.__parameters__", "typing.Dict", "pat.search", "a.cls", "self.test", "k.upper", "object.__str__", "typing.MutableMapping", "tp.__orig_bases__", "CoolEmployee.__annotations__", "LabelPoint2D.__total__", "TypedDict.__module__", "B.A", "typing.Container", "self.assertIn", "CoolEmployee._field_types", "Y.__module__", "typing.SupportsFloat", "typing.Generic", "ex.exception", "MM2.__bases__", "typing.DefaultDict", "typing.Reversible", "C.__qualname__", "C.meth", "other.__name__", "Y.__parameters__", "C.__bases__", "Emp.__annotations__", "mat.__class__", "typing.AsyncGenerator", "typing.Tuple", "typing.SupportsIndex", "tp.__parameters__", "u.__args__", "typing.SupportsComplex", "NT._fields", "TD.__name__", "collections.abc", "weakref.ref", "C._abc_caches_clear", "D.__total__", "LabelPoint2D.__bases__", "LocalEmployee._fields", "typing.__name__", "CoolEmployee._fields", "typing.Collection", "typing.Sequence", "b.label", "mod_generics_cache.B", "c.bar", "ann_module.S", "C._abc_registry_clear", "Y.__qualname__", "C.__mro__", "P.register", "pickle.dumps", "CoolEmployeeWithDefault.__name__", "LocalEmployee.__annotations__", "NT.__name__", "c.from_b", "jim.name", "obj.arg", "obj.from_c", "self.assertNotIsSubclass", "ForRefExample.func", "c.label"]}, "test_ucn.py": {"libraries": ["unittest", "_testcapi.UINT_MAX", "http.client.HTTPException", "_testcapi.INT_MAX", "_testcapi.PY_SSIZE_T_MAX", "test.support", "test.test_normalization.check_version", "unicodedata"], "function_names": ["test_issue16335", "test_bmp_characters", "test_misc_symbols", "test_cjk_unified_ideographs", "test_named_sequences_sample", "test_aliases_names_in_pua_range", "test_strict_error_handling", "test_hangul_syllables", "test_errors", "test_ascii_letters", "checkletter", "test_named_sequences_names_in_pua_range", "test_aliases", "test_general", "test_named_sequences_full"], "function_calls": ["len", "chr", "str", "int", "bytes", "zip", "ord", "map", "eval", "range"], "class_names": ["UnicodeNamesTest"], "class_method_calls": ["self.checkletter", "unicodedata.ucd_3_2_0", "line.strip", "unicodedata.name", "unittest.skipUnless", "self.assertEqual", "self.assertNotEqual", "cm.exception", "self.assertRaisesRegex", "testdata.close", "self.addCleanup", "self.assertRaises", "unicodedata.unidata_version", "char.upper", "support.open_urlresource", "x.decode", "unittest.main", "line.split", "support.bigmemtest", "support.cpython_only", "self.skipTest", "line.startswith", "unittest.TestCase", "unicodedata.lookup", "codepoints.split"]}, "test_unary.py": {"libraries": ["unittest"], "function_names": ["test_negative", "test_no_overflow", "test_bad_types", "test_negation_of_exponentiation", "test_invert", "test_positive"], "function_calls": ["eval"], "class_names": ["UnaryOpTestCase"], "class_method_calls": ["self.assertEqual", "self.assertTrue", "unittest.TestCase", "unittest.main", "self.assertRaises"]}, "test_unicode_file.py": {"libraries": ["unittest", "test.support.TESTFN_UNICODE", "test.support.TESTFN_UNENCODABLE", "time", "test.support.change_cwd", "shutil", "test.support.create_empty_file", "test.support.TESTFN_ENCODING", "os", "test.support.run_unittest", "unicodedata", "test.support.rmtree", "glob"], "function_names": ["test_main", "_test_single", "_do_single", "_do_directory", "test_directories", "_do_copyish", "remove_if_exists", "test_single_files"], "function_calls": ["test_main", "create_empty_file", "run_unittest", "rmtree", "remove_if_exists", "change_cwd"], "class_names": ["TestUnicodeFiles"], "class_method_calls": ["os.mkdir", "os.rename", "self.assertEqual", "self._do_directory", "os.getcwd", "self._do_copyish", "os.utime", "unittest.SkipTest", "self.assertIn", "TESTFN_UNICODE.encode", "shutil.move", "self._test_single", "glob.glob", "os.rmdir", "os.R_OK", "unicodedata.normalize", "os.close", "os.open", "os.access", "os.unlink", "shutil.copy", "time.time", "shutil.copy2", "os.path", "os.O_CREAT", "glob.escape", "os.chmod", "os.listdir", "self._do_single", "self.assertTrue", "unittest.TestCase", "self.assertFalse"]}, "test_unicode_file_functions.py": {"libraries": ["unicodedata.normalize", "unittest", "sys", "warnings", "test.support", "os"], "function_names": ["test_main", "test_failures", "setUp", "_apply_failure", "norm", "test_normalize", "test_listdir", "test_directory", "test_rename", "test_open"], "function_calls": ["test_main", "len", "fn", "set", "normalize", "open"], "class_names": ["UnicodeNFKCFileTests", "UnicodeNFCFileTests", "UnicodeFileTests", "UnicodeNFKDFileTests", "UnicodeNFDFileTests"], "class_method_calls": ["os.mkdir", "sys.platform", "files.add", "self.assertEqual", "os.rename", "self._listdir_failure", "os.chdir", "self.files", "support.temp_cwd", "f.write", "unittest.SkipTest", "support.TESTFN", "self._apply_failure", "support.rmtree", "self.addCleanup", "c.exception", "self.norm", "warnings.catch_warnings", "os.remove", "os.rmdir", "os.R_OK", "self.assertRaises", "warnings.simplefilter", "filenames.extend", "unittest.skipIf", "fn.__name__", "support.run_unittest", "name.encode", "os.access", "self.normal_form", "os.path", "os.listdir", "sys.getfilesystemencoding", "os.stat", "f.close", "unittest.TestCase"]}, "test_unicode_identifiers.py": {"libraries": ["unittest", "test.badsyntax_3131"], "function_names": ["test_non_bmp_normalized", "test_valid", "test_invalid"], "function_calls": ["getattr", "str", "dir"], "class_names": ["PEP3131Test", "T"], "class_method_calls": ["self.assertIn", "self.fail", "self.assertEqual", "unittest.TestCase", "unittest.main"]}, "test_unicodedata.py": {"libraries": ["unittest", "sys", "hashlib", "unicodedata", "test.support.script_helper"], "function_names": ["test_linebreak_7643", "test_function_checksum", "setUp", "test_normalize", "test_bug_5828", "test_east_asian_width", "test_bug_1704793", "test_ucd_510", "test_mirrored", "test_digit", "test_failed_import_during_compiling", "test_east_asian_width_9_0_changes", "test_issue10254", "test_combining", "test_pr29", "test_decimal_numeric_consistent", "tearDown", "test_numeric", "test_method_checksum", "test_bug_4971", "test_bidirectional", "test_decomposition", "test_issue29456", "test_decimal", "test_category", "test_digit_numeric_consistent"], "function_calls": ["format", "bytearray", "len", "chr", "str", "eaw", "range"], "class_names": ["UnicodeMethodsTest", "UnicodeDatabaseTest", "UnicodeMiscTest", "UnicodeFunctionsTest"], "class_method_calls": ["char.isdecimal", "unicodedata.ucd_3_2_0", "char.isupper", "result.err", "unicodedata.mirrored", "self.assertEqual", "char.isalpha", "self.expectedchecksum", "char.isnumeric", "char.islower", "char.isalnum", "self.assertIn", "sys.maxunicode", "char.title", "self.assertRaises", "char.lower", "self.db", "char.upper", "unittest.main", "script_helper.assert_python_failure", "char.istitle", "char.isspace", "h.hexdigest", "hashlib.sha1", "char.isdigit", "self.assertTrue", "h.update", "unittest.TestCase"]}, "test_unittest.py": {"libraries": ["test.support", "unittest.test"], "function_names": ["load_tests", "test_main"], "function_calls": ["test_main"], "class_names": [], "class_method_calls": ["support.run_unittest", "unittest.test", "support.reap_children"]}, "test_univnewlines.py": {"libraries": ["unittest", "io", "_pyio", "sys", "test.support", "os"], "function_names": ["test_readlines", "test_readline", "setUp", "test_tell", "test_seek", "tearDown", "test_read"], "function_calls": ["repr", "staticmethod", "hasattr"], "class_names": ["TestGenericUnivNewlines", "CTestCRNewlines", "CTestCRLFNewlines", "CTestLFNewlines", "TestCRLFNewlines", "TestCRNewlines", "PyTestCRNewlines", "PyTest", "PyTestCRLFNewlines", "TestLFNewlines", "CTest", "TestMixedNewlines", "PyTestLFNewlines", "PyTestMixedNewlines", "CTestMixedNewlines"], "class_method_calls": ["self.WRITEMODE", "self.assertEqual", "self.open", "data.encode", "fp.write", "io.open", "unittest.SkipTest", "support.TESTFN", "data.append", "self.NEWLINE", "fp.read", "self.READMODE", "sys.stdin", "os.unlink", "unittest.main", "fp.readlines", "pyio.open", "self.DATA", "fp.seek", "fp.tell", "fp.newlines", "fp.readline", "unittest.TestCase"]}, "test_unpack.py": {"libraries": ["test.support", "test.test_unpack"], "function_names": ["test_main"], "function_calls": ["test_main"], "class_names": [], "class_method_calls": ["support.run_doctest"]}, "test_unpack_ex.py": {"libraries": ["test.support", "test.test_unpack_ex"], "function_names": ["test_main"], "function_calls": ["test_main"], "class_names": [], "class_method_calls": ["support.run_doctest"]}, "test_urllib.py": {"libraries": ["urllib.parse", "urllib.request", "io", "unittest", "nturl2path.pathname2url", "test.support", "http.client", "nturl2path.url2pathname", "base64.b64encode", "ssl", "sys", "tempfile", "collections", "email.message", "unittest.mock.patch", "urllib.error", "os"], "function_names": ["test_interface", "test_unquote_with_unicode", "test_unquote_to_bytes", "test_invalid_base64_data", "test_quoting_plus", "test_missing_comma", "sendall", "test_quote_with_unicode", "__init__", "test_unquoting_parts", "_reporthook", "test_simple_compare", "check_read", "fakehttp", "test_converting_drive_letter", "test_unquoting_plus", "test_missing_localfile", "test_urlopener_retrieve_remote", "test_with_method_arg", "test_safe", "tearDown", "test_getcode", "registerFileForCleanUp", "test_ftp_nonexisting", "test_reporthook_5_bytes", "test_basic", "test_unquoting_with_bytes_input", "test_userpass_inurl", "test_url_path_with_control_char_rejected", "unfakeftp", "test_quote_bytes", "test_urlopener_retrieve_file", "test_url_host_with_control_char_rejected", "test_redirect_limit_independent", "createNewTempFile", "test_readlines", "makefile", "test_userpass_inurl_w_spaces", "test_long_drive_letter", "test_reporthook", "test_geturl", "test_invalid_redirect", "test_empty_socket", "open_spam", "test_roundtrip_pathname2url", "test_never_quote", "test_using_sequence", "fakeftp", "test_read_0_9", "test_getproxies_environment_prefer_lowercase", "test_default_values", "open_local_file", "test_default_quoting", "test_using_mapping", "test_read_text", "connect", "test_read", "test_url_host_with_newline_header_injection_rejected", "hexescape", "test_roundtrip_url2pathname", "setUp", "test_ftp_nohost", "hooktester", "retrfile", "test_urlencode_encoding_safe_parameter", "test_url_fragment", "test_short_content_raises_ContentTooShortError_without_reporthook", "test_quote_plus_with_unicode", "test_ftp_cache_pruning", "test_unquoting_badpercent", "test_prefixes", "test_read_bogus", "test_default_safe", "help_inputtype", "test_cafile_and_context", "test_doseq", "unfakehttp", "test_proxy_bypass_environment_newline", "test_empty_sequence", "close", "test_thishost", "test_urlencode_encoding", "test_willclose", "test_URLopener_deprecation", "test_fileno", "test_local_file_open", "test_quoting_space", "test_urlencode_encoding_doseq", "test_quoted_open", "test_copy", "test_converting_when_no_drive_letter", "test_urlencode_bytes", "test_proxy_bypass_environment_always_match", "test_proxy_cgi_ignore", "test_reporthook_8193_bytes", "urlopen", "readline", "FancyURLopener", "test_read_1_1", "test_non_ascii_drive_letter", "test_url_path_with_newline_header_injection_rejected", "test_quoting", "test_read_text_base64", "test_unquoting", "test_unquoting_mixed_case", "test_file_notexists", "test_close", "test_short_content_raises_ContentTooShortError", "test_ntpath", "test_relativelocalfile", "test_nonstring_seq_values", "test_nonstring_values", "test_proxy_bypass_environment_host_match", "constructLocalFileUrl", "test_reporthook_0_bytes", "test_read_1_0", "read", "test_getproxies_environment_keep_no_proxies", "test_readline", "test_info", "test_read_image", "test_iter"], "function_calls": ["hexescape", "FakeSocket", "repr", "DummyURLopener", "str", "dict", "open", "fakehttp", "range", "list", "url2pathname", "b64encode", "hex", "type", "Request", "hasattr", "len", "pathname2url", "chr", "bypass", "urlopen", "bytes", "FancyURLopener", "ord"], "class_names": ["FakeHTTPMixin", "FakeSocket", "urlopen_HttpTests", "RequestTests", "FakeFtpWrapper", "DummyURLopener", "QuotingTests", "urlencode_Tests", "UnquotingTests", "ProxyTests_withOrderedEnv", "urlopen_DataTests", "ProxyTests", "URL2PathNameTests", "Pathname_Tests", "urlretrieve_HttpTests", "urlopen_FileTests", "FakeHTTPConnection", "Utility_Tests", "urlretrieve_FileTests", "PathName2URLTests", "FakeFTPMixin", "URLopener_Tests"], "class_method_calls": ["request.method", "self.closed", "unittest.skipUnless", "self.unfakehttp", "self.assertEqual", "self.assertNotEqual", "e.exception", "support.TESTFN", "self.registerFileForCleanUp", "_report.append", "self.image_url_resp", "self.assertRaises", "os.close", "tmp_file.replace", "support.check_warnings", "self.text_url_base64_resp", "self._connection_class", "self.fakeftp", "urllib.error", "should_quote.append", "self.fakedata", "request.get_method", "self.assertTrue", "self.image_url", "self.assertIsInstance", "resp.fp", "resp.geturl", "FILE.read", "fp.geturl", "urllib.parse", "unittest.SkipTest", "userpass.encode", "self.constructLocalFileUrl", "opener.open", "self.assertNotIn", "result.index", "self.help_inputtype", "self.returned_obj", "support.TEST_HTTP_URL", "self.pathname", "self.fakehttp", "self.assertIsNone", "collections.OrderedDict", "self.sock", "os.path", "os.fdopen", "on_amp_right.isdigit", "FakeHTTPConnection.fakedata", "email.message", "unittest.TestCase", "self.assertFalse", "sys.platform", "os.read", "filePath.encode", "on_amp_left.isdigit", "self.unfakeftp", "self.env", "escape_list.append", "f.write", "http.client", "self.createNewTempFile", "self._ftpwrapper_class", "patch.object", "self.tempFiles", "self.addCleanup", "support.temp_dir", "fakehttp_wrapper.buf", "self._saved_env", "FILE.write", "self.text", "k.lower", "os.environ", "unittest.main", "ssl.create_default_context", "self.io_refs", "FILE.close", "f.close", "urllib.request", "self.text_url_resp", "self.text_url_base64", "io.BytesIO", "FakeHTTPConnection.buf", "self.text_url", "fp.getcode", "self.assertRaisesRegex", "self.check_read", "self.assertIn", "tempfile.mkstemp", "os.remove", "result.count", "support.ignore_warnings", "given.replace", "os.unlink", "self.image", "newFile.write", "self.__class__", "fp.readline", "support.EnvironmentVarGuard", "newFile.close"]}, "test_urllib2.py": {"libraries": ["urllib.request", "urllib.request.HTTPPasswordMgrWithPriorAuth", "urllib.request.OpenerDirector", "urllib.request._parse_proxy", "subprocess", "base64", "test.support", "array", "unittest", "urllib.error.URLError", "io", "urllib.request.Request", "copy", "http.client", "http.cookiejar.CookieJar", "socket", "os", "email", "urllib.request.AbstractDigestAuthHandler", "tempfile", "ftplib", "urllib.request._proxy_bypass_macosx_sysconf", "urllib.error", "urllib.request._proxy_bypass_winreg_override", "urllib.parse.urlparse", "test.test_urllib", "urllib.request.HTTPBasicAuthHandler", "sys", "test.test_http_cookiejar.interact_netscape", "email.utils"], "function_names": ["bar_open", "test_proxy_basic_auth", "add_parent", "test_http_body_file", "getheaders", "test_http_body_empty_seq", "test_redirect_fragment", "test_build_opener", "test_selector", "__init__", "open", "test_deleting_data_should_remove_content_length", "test_trivial", "test_relative_redirect", "test_http_error", "test_http_closed", "test_basic_auth", "opener_has_handler", "test_parse_proxy", "test_http_body_pipe", "test_fixpath_in_weirdurls", "_test_basic_auth", "test_full_url_setter", "error", "test_errors", "_define_methods", "set_debuglevel", "test_proxy_no_proxy_all", "test_add_non_handler", "test_full_url_deleter", "test_password_manager_default_port", "handle", "set_tunnel", "test_cookie_redirect", "http_error_401", "test_parse_http_list", "redirect", "__call__", "test_redirect_encoding", "test_data", "test_method", "test_invalid_closed", "test_http_body_array", "test_invalid_redirect", "test_get_full_url", "test_proxy_https_proxy_authorization", "test_basic_prior_auth_auto_send", "test_get_host", "add_password", "test_get_host_unquote", "test_handler_order", "test_processors", "getresponse", "http_open", "test_winreg_proxy_bypass", "test_raise", "retrfile", "setUp", "test_http_doubleslash", "test_url_fragment", "build_test_opener", "test_proxy_no_proxy", "test_proxy", "foo_open", "record", "add_ordered_mock_handlers", "test_unsupported_auth_basic_handler", "test_url_fullurl_get_full_url", "iterable_body", "test_basic_prior_auth_send_after_first_success", "test_request_headers_methods", "test_setting_data_should_remove_content_length", "test_osx_proxy_bypass", "test_request_headers_dict", "test_basic_and_digest_auth_handlers", "test_HTTPError_interface", "close", "connect_ftp", "check_basic_auth", "test_http_handler_debuglevel", "test_http_body_fileobj", "test_handled", "test_issue16464", "test_badly_named_methods", "readline", "test_URLError_reasonstr", "reset", "add_cookie_header", "https_open", "info", "sanepathname2url", "geturl", "test_get_type", "__eq__", "test_ftp", "test___all__", "test_password_manager", "test_redirect_no_path", "__lt__", "find_user_password", "test_redirect", "test_file", "request", "test_wrapped_url", "extract_cookies", "test_http", "read", "test_cookies", "test_unsupported_auth_digest_handler", "test_http_body_iterable", "test_proxy_https", "test_unsupported_algorithm"], "function_calls": ["sorted", "sanepathname2url", "FakeMethod", "getattr", "MockFTPWrapper", "build_test_opener", "MockHTTPSHandler", "MockHTTPClass", "add_ordered_mock_handlers", "repr", "find_user_pass", "iterable_body", "iter", "str", "BarHandler", "MockPasswordManager", "redirect", "MockResponse", "RecordingOpenerDirector", "dict", "open", "MockCookieJar", "TestDigestAuthHandler", "MockHTTPHandler", "setattr", "HTTPPasswordMgrWithPriorAuth", "_proxy_bypass_macosx_sysconf", "NonHandler", "list", "AbstractDigestAuthHandler", "Unknown", "MockFile", "method", "NullFTPHandler", "MockHTTPHandlerCheckAuth", "CookieJar", "build_opener", "MockHandlerSubclass", "int", "zip", "next", "MockHTTPResponse", "enumerate", "Request", "MockOpener", "Handler", "TestBasicAuthHandler", "HTTPBasicAuthHandler", "OSError", "hasattr", "MockHeaders", "proxy_bypass", "len", "any", "_parse_proxy", "urlparse", "add", "interact_netscape", "bytes", "OpenerDirector", "exec"], "class_names": ["FakeMethod", "MockFTPWrapper", "RequestTests", "MockHTTPSHandler", "MockHTTPClass", "BarHandler", "MockPasswordManager", "MockResponse", "MockHandler", "RecordingOpenerDirector", "MyHTTPHandler", "MockCookieJar", "TestDigestAuthHandler", "MockHTTPHandler", "OpenerDirectorTests", "NonHandler", "HandlerTests", "MockFile", "Unknown", "MyOtherHTTPHandler", "MockHTTPHandlerCheckAuth", "MiscTests", "NullFTPHandler", "MockHandlerSubclass", "FooHandler", "TrivialTests", "PutRequest", "MockHTTPResponse", "MockHeaders", "RequestHdrsTests", "MockOpener", "Handler", "TestBasicAuthHandler"], "class_method_calls": ["self.method", "newreq.has_header", "h.handler_order", "http.method", "sys.executable", "unittest.skipUnless", "self._count", "self.assertEqual", "self.ach_req", "urls.append", "self.raise_on_endheaders", "header.encode", "h.http_error_302", "handler.get_algorithm_impls", "p_ds_req.unredirected_hdrs", "self.level", "self.assertIs", "support.transient_internet", "support.TESTFN", "err.reason", "real_class.request", "h.__class__", "h.do_request_", "self.encode_chunked", "http.data", "self.fp", "mgr.find_user_password", "self.host", "self.head", "self.assertRaises", "self.handle", "req.get_full_url", "hh.req", "self.values", "os.sep", "self.headers", "support.is_resource_enabled", "req.timeout", "password_manager.user", "o.req", "socket.gethostname", "support.check_warnings", "req.type", "http.req_headers", "urllib.error", "self.requests", "socket._GLOBAL_DEFAULT_TIMEOUT", "conn.__class__", "self.post", "req.full_url", "self.filetype", "socket.gethostbyname", "self.target_url", "email.utils", "self.httpconn", "self.assertTrue", "self.proto", "conn.fakesock", "exc.exception", "opener.add_handler", "http_handler.reset", "o.add_handler", "action.startswith", "h.ftpwrapper", "hdrs.get", "self.assertIsInstance", "self.handler_order", "OpenerDirector.__init__", "self.reason", "self.meth_name", "req.add_unredirected_header", "o.open", "self.timeout", "self.selector", "h.passwd", "req.unverifiable", "opener.recorded", "http.selector", "urllib.parse", "fp.geturl", "os.getcwd", "pwd_manager.is_authenticated", "base64.encodebytes", "self.req", "password_manager.realm", "unittest.SkipTest", "stats.st_mtime", "cj.ec_req", "opener.open", "self.connection", "self.assertNotIn", "subprocess.Popen", "io.StringIO", "http_handler.has_auth_header", "r.readline", "self.reset", "self.subTest", "request.get_header", "auth_prior_handler.add_password", "http_handler.requests", "r.full_url", "h.http_request", "r.get_full_url", "copy.deepcopy", "self.ec_req", "action.rfind", "self.assertIsNone", "self.realm", "handler.last_buf", "self.has_auth_header", "self.sock", "array.array", "context.pop", "proc.stdout", "handler.do_open", "file_obj.close", "v.__module__", "self.filename", "hdrs.__contains__", "self.recorded", "request.data", "self.PutRequest", "self.port", "os.path", "request.startswith", "other.handler_order", "r.selector", "mgr.add_password", "self.opener_has_handler", "err.code", "unittest.TestCase", "req.unredirected_hdrs", "self.assertFalse", "self.msg", "req._tunnel_host", "self.target_realm", "self.last_buf", "sys.platform", "self.action", "self.force_post", "test_urllib.fakehttp", "self.code", "o.args", "h.parent", "f.write", "context.items", "self.args", "req.origin_req_host", "self.addCleanup", "h.http_response", "http.client", "password_manager.url", "req.header_items", "req.add_header", "h.port", "o.proto", "h.file_open", "self.req_headers", "self.dirs", "u.__module__", "password_manager.target_url", "h.host", "https_handler.httpconn", "o.addheaders", "req.remove_header", "h._debuglevel", "auth_handler.add_password", "self.url", "self._define_methods", "subprocess.PIPE", "resp.read", "path.encode", "io.IOBase", "h.add_parent", "os.environ", "unittest.main", "self.ec_r", "self.parent", "req.get_header", "self._tunnel_headers", "headers.items", "self.status", "http.raise_on_endheaders", "err.headers", "h.dirs", "o.calls", "socket.gaierror", "f.close", "newreq.selector", "urllib.request", "headers.get", "self.assertIsNotNone", "urlpath.startswith", "h.user", "cj.ach_req", "newreq.get_header", "req.host", "email.message_from_string", "err.msg", "io.BytesIO", "ftplib.FTP_PORT", "r.msg", "r.close", "tempfile.NamedTemporaryFile", "req.has_header", "handler.connection", "r.geturl", "self.put", "r.code", "self.passwd", "r.info", "http.level", "self.assertIn", "r.fragment", "x.lower", "self.do_open", "http.host", "self.data", "h.ftp_open", "newreq.host", "redirected_url.strip", "f.read", "self.ftpwrapper", "os.remove", "password_manager.password", "h.do_open", "opener.handlers", "self._tunnel_host", "unittest.skipIf", "parsed.fragment", "req.selector", "file_obj.name", "np_ds_req.unredirected_hdrs", "self.password", "os.unlink", "password_manager.target_realm", "self.check_basic_auth", "r.read", "self.user", "self._tunnel_port", "parsed.query", "ds_req.set_proxy", "self._test_basic_auth", "cj.ec_r", "p.__module__", "os.name", "handlers.append", "self.__class__", "os.stat", "self.get"]}, "test_urllib2_localnet.py": {"libraries": ["urllib.parse", "urllib.request", "unittest", "threading", "http.server", "ssl", "hashlib", "base64", "test.support", "os", "test.ssl_servers.make_https_server", "email"], "function_names": ["stop", "test_sending_headers", "test_line_iteration", "test_redirection", "set_qop", "setUp", "test_proxy_qop_auth_works", "test_chunked", "cb_sni", "test_200_with_parameters", "test_basic_auth_httperror", "get_request", "stop_server", "GetRequestHandler", "setUpModule", "test_proxy_with_no_password_raises_httperror", "test_404", "__init__", "handle_request", "_create_auth_dict", "set_realm", "test_https_sni", "test_geturl", "do_POST", "create_fake_proxy_handler", "send_head", "run", "http_server_with_basic_auth_handler", "test_https_with_cafile", "_return_auth_challenge", "restore_environ", "test_200", "tearDown", "test_proxy_with_bad_password_raises_httperror", "_generate_nonce", "tearDownModule", "test_https_with_cadefault", "test_info", "do_AUTHHEAD", "log_message", "do_GET", "_validate_auth", "test_proxy_qop_auth_int_works_or_throws_urlerror", "start_server", "start_https_server", "test_basic", "urlopen", "test_https", "test_iteration", "test_basic_auth_success", "set_users", "do_HEAD"], "function_calls": ["isinstance", "len", "super", "LoopbackHttpServerThread", "DigestAuthHandler", "GetRequestHandler", "str", "LoopbackHttpServer", "int", "bytes", "make_https_server", "BasicAuthHandler", "enumerate", "FakeProxyHandler", "hasattr"], "class_names": ["LoopbackHttpServerThread", "DigestAuthHandler", "TestUrlopen", "LoopbackHttpServer", "BasicAuthTests", "BasicAuthHandler", "FakeHTTPRequestHandler", "FakeProxyHandler", "ProxyAuthTests"], "class_method_calls": ["request_handler.command", "auth_dict.get", "open_url.geturl", "self.assertEqual", "self.start_server", "self.PASSWD", "self.ENCODED_AUTH", "request_handler.path", "self._request_num", "self.REALM", "self.digest_auth_handler", "handler.port", "self.assertRaises", "l.extend", "self.headers", "response_str.encode", "ssl.PROTOCOL_TLS_SERVER", "support.check_warnings", "request_handler.short_path", "urllib.error", "self._nonces", "self.requests", "self._qop", "self.do_AUTHHEAD", "self.join", "self.assertTrue", "self.server", "auth_str.find", "self.assertIsInstance", "ssl.HAS_SNI", "l.append", "ssl.SSLContext", "self.send_head", "self.do_GET", "self.stop_server", "urllib.parse", "self.end_headers", "responses.pop", "self._generate_nonce", "self._return_auth_challenge", "request_handler.wfile", "USER_PASSWD.encode", "part.split", "request_handler.send_response", "request_handler.send_header", "FakeHTTPRequestHandler.headers_received", "auth_str.split", "name.strip", "os.path", "self.port", "self.URL", "self.urlopen", "email.message", "unittest.TestCase", "self._realm_name", "self.short_path", "self.start_https_server", "support.requires_hashdigest", "HA1_str.encode", "http.server", "request_handler.headers", "hashlib.md5", "f.readline", "self._validate_auth", "self.addCleanup", "self.INCORRECT_PASSWD", "open_url.info", "self.wfile", "self.ready", "server.port", "support.threading_setup", "self._create_auth_dict", "self.httpd", "self.send_header", "HA2_str.encode", "self.socket", "self.path", "open_url.read", "os.environ", "unittest.main", "request_handler.protocol_version", "self._stop_server", "handler.requests", "ssl.create_default_context", "f.readlines", "request_handler.end_headers", "f.close", "self.server_url", "result.read", "urllib.request", "base64.b64encode", "final_dict.update", "support.threading_cleanup", "self.rfile", "request.settimeout", "threading.Event", "self.fail", "f.read", "value.strip", "self.proxy_digest_handler", "ah.add_password", "self.USER", "self._users", "handler.headers_received", "info_obj.get_content_subtype", "self.send_response", "self.skipTest", "context.set_servername_callback", "threading.Thread", "self.opener"]}, "test_urllib2net.py": {"libraries": ["unittest", "urllib.request", "test.test_urllib2.sanepathname2url", "time", "socket", "urllib.error", "sys", "test.support", "os", "logging"], "function_names": ["test_http_basic", "test_ftp_basic", "setUp", "test_http_default_timeout", "test_ftp", "_retry_thrice", "test_close", "test_custom_headers", "test_urlwithfrag", "test_file", "_extra_handlers", "test_ftp_timeout", "test_redirect_url_withfrag", "_wrap_with_retry_thrice", "test_ftp_default_timeout", "_test_urls", "wrapped", "test_http_timeout", "test_http_no_timeout", "test_sites_no_connection_close", "test_ftp_no_timeout"], "function_calls": ["isinstance", "func", "len", "_retry_thrice", "debug", "sanepathname2url", "_urlopen_with_retry", "urlopen", "type", "open", "_wrap_with_retry_thrice", "range", "print"], "class_names": ["CloseSocketTest", "AuthTests", "TimeoutTest", "OtherNetworkTests"], "class_method_calls": ["urllib.request", "u.close", "self.assertIsInstance", "self._extra_handlers", "self.assertEqual", "cfh.clear_cache", "res.geturl", "support.requires", "u.fp", "f.write", "support.transient_internet", "support.TESTFN", "request.add_header", "request.has_header", "logging.getLogger", "self.fail", "self.addCleanup", "opener.open", "socket.timeout", "response.close", "self._test_urls", "f.read", "os.remove", "support.TEST_HTTP_URL", "self.subTest", "self.FTP_HOST", "self.assertRaises", "request.get_header", "unittest.skipIf", "support.socket_peer_reset", "unittest.skip", "socket.getdefaulttimeout", "logger.addHandler", "self.assertIsNone", "urllib.error", "os.environ", "sock.closed", "unittest.main", "req.read", "time.sleep", "logging.StreamHandler", "os.path", "sys.stderr", "response.fp", "cfh.setTimeout", "request.header_items", "handlers.append", "self.assertTrue", "socket.setdefaulttimeout", "support.time_out", "support.ioerror_peer_reset", "f.close", "unittest.TestCase", "self.assertFalse"]}, "test_urllib_response.py": {"libraries": ["tempfile", "socket", "unittest", "urllib.response"], "function_names": ["test_addinfo", "test_with", "setUp", "closehook", "test_addclosehook", "test_addinfourl", "tearDown", "f"], "function_calls": ["f"], "class_names": ["TestResponse"], "class_method_calls": ["self.assertIsInstance", "urllib.response", "socket.AF_INET", "self.assertEqual", "socket.SOCK_STREAM", "infourl.getcode", "self.test_headers", "closehook.close", "self.fp", "self.assertRaises", "info.info", "infourl.geturl", "unittest.TestCase", "unittest.main", "self.sock", "infourl.info", "self.assertTrue", "tempfile._TemporaryFileWrapper", "self.assertFalse", "socket.socket"]}, "test_urllibnet.py": {"libraries": ["unittest", "urllib.parse", "urllib.request", "time", "socket", "contextlib", "email.message", "test.support", "os"], "function_names": ["test_geturl", "test_readlines", "test_info", "urlretrieve", "test_basic", "testURLread", "setUp", "test_data_header", "urlopen", "test_bad_address", "test_specified_path", "test_header", "recording_reporthook", "tearDown", "test_getcode", "test_reporthook"], "function_calls": ["len", "int", "open", "repr", "hasattr"], "class_names": ["urlopenNetworkTests", "urlretrieveNetworkTests", "URLTimeoutTest"], "class_method_calls": ["urllib.request", "self.assertIsInstance", "open_url.close", "open_url.geturl", "open_url.readlines", "self.assertEqual", "time.strptime", "r.close", "support.requires", "self.TIMEOUT", "self.assertGreaterEqual", "urllib.parse", "support.transient_internet", "support.TESTFN", "self.urlretrieve", "self.fail", "f.read", "open_url.info", "support.TEST_HTTP_URL", "self.assertRaises", "self.assertWarns", "support.unlink", "self.url", "fileheaders.get", "contextlib.contextmanager", "self.assertGreater", "self.logo", "open_url.read", "info_obj.get_content_subtype", "unittest.main", "open_url.readline", "os.path", "open_url.getcode", "socket.gethostbyname", "self.skipTest", "socket.setdefaulttimeout", "self.urlopen", "self.assertTrue", "records.append", "email.message", "unittest.TestCase"]}, "test_urlparse.py": {"libraries": ["sys", "urllib.parse", "unicodedata", "unittest"], "function_names": ["test_default_scheme", "checkJoin", "test_unquote_to_bytes", "test_splituser_deprecation", "test_Quoter_repr", "test_all", "test_parse_qs_encoding", "test_RFC2396", "test_unparse_parse", "test_qsl", "test_unwrap", "test_splitpasswd", "test_attributes_without_netloc", "test_urlencode_quote_via", "test_urlsplit_normalization", "test_splitquery", "test_RFC1808", "test_urldefrag", "test_mixed_types_rejected", "test_result_pairs", "test_splittag_deprecation", "test_splitquery_deprecation", "test_splithost", "test_qs", "test_parse_qs_separator", "test_urljoins", "test_quote_errors", "__str__", "test_RFC2732", "test_splitpasswd_deprecation", "test_to_bytes", "test_RFC3986", "test_splitattr_deprecation", "test_attributes_bad_port", "test_urlsplit_remove_unsafe_bytes", "test_parse_fragments", "test_parse_qsl_separator", "test_quote_from_bytes", "test_splitnport", "test_noslash", "checkRoundtrips", "test_urlsplit_scoped_IPv6", "test_telurl_params", "test_splithost_deprecation", "test_splitvalue_deprecation", "test_splituser", "test_splittype_deprecation", "test_http_roundtrips", "test_splitnport_deprecation", "test_withoutscheme", "_check_result_type", "test_splitport", "test_splitport_deprecation", "test_to_bytes_deprecation", "test_RFC2368", "test_splittag", "test_urlsplit_strip_url", "_encode", "test_urlencode_sequences", "test_splitattr", "test_usingsys", "test_parse_qsl_encoding", "test_port_casting_failure_message", "test_splitvalue", "test_anyscheme", "test_issue14072", "test_urlsplit_attributes", "test_roundtrips", "test_splittype", "test_portseparator", "test_parse_qsl_max_num_fields"], "function_calls": ["splitattr", "getattr", "Trivial", "splitquery", "splitvalue", "repr", "str_type", "splitpasswd", "splituser", "str", "splitport", "bytes_type", "tuple", "parse", "range", "splittag", "splithost", "dir", "set", "type", "func", "splittype", "len", "_encode", "splitnport", "bytes", "ord", "map"], "class_names": ["Utility_Tests", "UrlParseTestCase", "Trivial", "DeprecationTest"], "class_method_calls": ["p.password", "netloc.format", "str_result.encode", "result.fragment", "str_type._encoded_counterpart", "unicodedata.decomposition", "result3.hostname", "cm.warning", "urlparsed.hostname", "url.encode", "self.assertEqual", "result.scheme", "result.port", "p.port", "result.path", "result.password", "urllib.parse", "result3.query", "result3.scheme", "p.username", "self.assertIs", "p1.path", "p1.params", "self.assertRaisesRegex", "self._check_result_type", "self.assertIn", "result.split", "sys.maxunicode", "result3.geturl", "base_url.encode", "urlparsed.port", "p.hostname", "name.startswith", "result.query", "p.path", "result.params", "p.query", "x.encode", "result.geturl", "p.geturl", "noise.decode", "self.subTest", "self.assertRaises", "netloc.encode", "result3.username", "self.assertWarns", "p.netloc", "bytes_type._decoded_counterpart", "result3.netloc", "p2.scheme", "p.scheme", "expected.append", "result.netloc", "unittest.main", "p.fragment", "self.checkRoundtrips", "result.username", "result3.fragment", "result3.params", "result3.path", "str_type._fields", "p2.path", "p1.port", "result.hostname", "p1.scheme", "self.assertCountEqual", "self.checkJoin", "result3.password", "result.url", "bytes_result.decode", "unittest.TestCase", "self.assertTrue", "self.assertFalse", "result3.port", "p2.port"]}, "test_userdict.py": {"libraries": ["unittest", "test.mapping_tests", "collections"], "function_names": ["test_update", "display", "test_init", "__init__", "__missing__", "test_missing", "test_all"], "function_calls": ["MyUserDict", "list", "len", "sorted", "RuntimeError", "F", "str", "set", "G", "hasattr", "print", "D", "range", "E", "repr"], "class_names": ["UserDictTest", "MyUserDict", "F", "G", "D", "E"], "class_method_calls": ["self.assertIsInstance", "u2.copy", "self.assertEqual", "self.assertNotEqual", "d2.values", "d2.items", "t.setdefault", "u2.keys", "t.popitem", "d.items", "self.__missing__", "u2b.copy", "d.keys", "self.assertIn", "self.fail", "u1.fromkeys", "self.assertNotIn", "u2.fromkeys", "ikeys.append", "u2.get", "m2.copy", "u1.get", "d1.get", "d.update", "self.assertWarnsRegex", "self.assertRaises", "u2.items", "d2.keys", "u3.__delitem__", "t.pop", "u0.get", "d0.get", "u2.values", "collections.UserDict", "u1.__getitem__", "mapping_tests.TestHashMappingProtocol", "unittest.main", "err.args", "self.assertTrue", "u3.clear", "t.update"]}, "test_userlist.py": {"libraries": ["unittest", "test.list_tests", "collections.UserList"], "function_names": ["test_slice_type", "test_getitemoverwriteiter", "test_add_specials", "test_mixedadd", "test_iadd", "test_mixedcmp", "test_getslice", "test_radd_specials", "test_userlist_copy", "__getitem__"], "function_calls": ["list", "UserList", "super", "iter", "str", "T", "next", "type", "range"], "class_names": ["UserListTest", "T"], "class_method_calls": ["self.assertIsInstance", "list_tests.CommonTest", "self.assertEqual", "u.__radd__", "self.assertNotEqual", "u.copy", "self.type2test", "unittest.main", "u.__class__"]}, "test_userstring.py": {"libraries": ["unittest", "test.string_tests", "collections.UserString"], "function_names": ["test_encode_explicit_none_args", "checkraises", "checkcall", "checkequal", "test_encode_default_args", "__rmod__", "test_rmod"], "function_calls": ["ustr3", "super", "getattr", "str", "ustr2"], "class_names": ["UserStringTest", "ustr3", "ustr2"], "class_method_calls": ["self.assertRaises", "string_tests.CommonTest", "self.assertEqual", "self.assertNotEqual", "self.checkraises", "string_tests.MixinStrUnicodeUserStringTest", "unittest.TestCase", "cm.exception", "unittest.main", "self.checkequal", "self.fixtype"]}, "test_utf8_mode.py": {"libraries": ["unittest", "textwrap", "sys", "test.support.script_helper.assert_python_ok", "locale", "test.support", "test.support.script_helper.assert_python_failure"], "function_names": ["test_xoption", "test_locale_getpreferredencoding", "check", "test_filesystemencoding", "get_output", "test_stdio", "posix_locale", "test_pyio_encoding", "test_io_encoding", "test_env_var", "test_posix_locale", "_check_io_encoding", "test_cmd_line", "test_optim_level", "check_io_encoding", "test_io"], "function_calls": ["check", "assert_python_failure", "assert_python_ok", "dict", "ascii"], "class_names": ["UTF8ModeTests"], "class_method_calls": ["sys.platform", "self.assertEqual", "self.assertIn", "self.posix_locale", "locale.setlocale", "self.subTest", "self._check_io_encoding", "unittest.skipIf", "self.check_io_encoding", "out.splitlines", "self.get_output", "unittest.main", "textwrap.dedent", "self.DEFAULT_ENV", "locale.LC_CTYPE", "out.rstrip", "out.decode", "out.partition", "args.append", "arg.decode", "unittest.TestCase", "support.is_android"]}, "test_utf8source.py": {"libraries": ["unittest", "test.badsyntax_pep3120"], "function_names": ["test_pep3120", "test_latin1", "test_badsyntax"], "function_calls": ["compile", "str", "exec"], "class_names": ["PEP3120Test", "BuiltinCompileTests"], "class_method_calls": ["self.fail", "self.assertEqual", "self.assertTrue", "unittest.TestCase", "unittest.main"]}, "test_uu.py": {"libraries": ["unittest", "io", "codecs", "sys", "uu", "test.support", "os", "stat"], "function_names": ["test_encode", "test_decode", "getvalue", "test_decode_mode", "setUp", "test_truncatedinput", "test_garbage_padding", "test_decode_filename", "__init__", "test_missingbegin", "test_newlines_escaped", "test_decodetwice", "tearDown", "encodedtextwrapped", "test_no_directory_traversal"], "function_calls": ["isinstance", "super", "str", "FakeIO", "bytes", "open", "encodedtextwrapped"], "class_names": ["UUFileTest", "FakeIO", "UUTest", "UUStdIOTest"], "class_method_calls": ["fin.write", "stat.S_IMODE", "self._encoding", "self.tmpin", "self.tmpout", "self.assertEqual", "plaintext.decode", "os.altsep", "io.BytesIO", "encodedtext.replace", "self.stdin", "sys.stdout", "self.assertRaisesRegex", "f.write", "self.seek", "support.TESTFN", "self.assertIn", "self.fail", "codecs.decode", "self.addCleanup", "stat.S_IWRITE", "f.read", "self.stdout", "uu.Error", "self.write", "self.subTest", "self.assertRaises", "uu.encode", "out.getvalue", "stdout.getvalue", "uu.decode", "support.unlink", "self.flush", "self.buffer", "unittest.TestCase", "sys.stdin", "unittest.main", "fout.read", "io.TextIOWrapper", "relative_bad.replace", "absolute_bad.replace", "os.chmod", "os.stat", "self._errors"]}, "test_uuid.py": {"libraries": ["io", "copy", "contextlib", "shutil", "unittest.mock", "sys", "pickle", "subprocess", "weakref", "test.support", "os", "builtins"], "function_names": ["test_random_getnode", "test_uuid1_time", "check", "test_uuid1_bogus_return_value", "test_uuid1_is_safe", "test_uuid1_is_unsafe", "test_unpickle_previous_python_versions", "importable", "test_uuid1", "test_uuid1_eui64", "test_uuid_weakref", "test_uuid1_safe", "test_find_mac", "test_netbios_getnode", "test_uuid1_unknown", "test_uuid3", "test_uuid4", "test_netstat_getnode", "test_pickle_roundtrip", "test_lanscan_getnode", "test_UUID", "check_node", "test_uuid5", "test_ifconfig_getnode", "test_unix_getnode", "mock_generate_time_safe", "test_arp_getnode", "test_ipconfig_getnode", "test_windll_getnode", "test_ip_getnode", "test_getnode", "test_exceptions", "testIssue8621"], "function_calls": ["check", "badvalue", "len", "object", "__import__", "str", "importable", "equal", "weak", "type", "setattr", "badtype", "int", "dict", "f", "range", "print"], "class_names": ["TestUUIDWithoutExtModule", "TestUUIDWithExtModule", "BaseTestInternals", "TestInternalsWithExtModule", "BaseTestUUID", "TestInternalsWithoutExtModule"], "class_method_calls": ["_uuid._lanscan_getnode", "u.is_safe", "uuids.keys", "support.requires_mac_ver", "copy.copy", "_uuid._netstat_getnode", "os.pipe", "self.uuid", "os.waitpid", "os.read", "unittest.skipUnless", "os.write", "self.assertEqual", "unittest.mock", "self.assertNotEqual", "u.variant", "io.BytesIO", "sys.modules", "u.fields", "equivalents.append", "u.clock_seq_low", "u.urn", "u.node", "resorted.reverse", "u.time_hi_version", "data.encode", "self.assertIs", "value.hex", "builtins.bytes", "self.assertIn", "self.fail", "self.addCleanup", "_uuid._ifconfig_getnode", "support.import_fresh_module", "u.time_low", "ascending.append", "u.time", "expected.is_safe", "self.subTest", "self.assertRaises", "os.fork", "u.clock_seq_hi_variant", "resorted.sort", "support.verbose", "os.close", "u.time_mid", "copy.deepcopy", "weakref.ref", "self.mock_generate_time_safe", "pickle.HIGHEST_PROTOCOL", "contextlib.contextmanager", "pickle.loads", "support.swap_item", "mock.patch", "unittest.main", "u.int", "u.hex", "actual.is_safe", "u.version", "_uuid._arp_getnode", "u.clock_seq", "popen.stdout", "u.bytes", "self.skipTest", "pickle.dumps", "os.name", "_uuid._GETTERS", "self.assertTrue", "os._exit", "self.check_node", "u.bytes_le", "unittest.TestCase", "_uuid._ip_getnode"]}, "test_venv.py": {"libraries": ["test.support.can_symlink", "ensurepip", "struct", "subprocess", "unittest", "threading", "venv", "test.support.captured_stdout", "os", "re", "shutil", "tempfile", "test.support.skip_if_broken_multiprocessing_synchronize", "test.support.rmtree", "test.support.captured_stderr", "os.path", "test.support.import_module", "sys", "ctypes", "test.support.EnvironmentVarGuard", "test.support.requires_zlib"], "function_names": ["create_contents", "assert_pip_not_installed", "test_deactivate_with_strict_bash_opts", "setUp", "get_env_file", "test_no_pip_by_default", "test_isolation", "test_prefixes", "test_prompt", "isdir", "test_upgrade", "test_unicode_in_batch_file", "do_test_with_pip", "check_output", "test_executable_symlinks", "run_with_capture", "test_explicit_no_pip", "test_macos_env", "test_executable", "test_overwrite_existing", "test_defaults", "tearDown", "get_text_file_contents", "test_devnull", "test_multiprocessing", "test_with_pip", "test_symlinking", "test_unoverwritable_fails", "clear_directory"], "function_calls": ["captured_stderr", "len", "EnvironmentVarGuard", "check_output", "rmtree", "open", "captured_stdout", "func", "can_symlink", "skip_if_broken_multiprocessing_synchronize", "print"], "class_names": ["EnsurePipTest", "BasicTest", "BaseTest"], "class_method_calls": ["venv.create", "os.mkdir", "self.env_dir", "sys.base_exec_prefix", "sys.platform", "self.get_text_file_contents", "p.communicate", "self.exe", "sys.executable", "unittest.skipUnless", "self.include", "self.assertEqual", "struct.calcsize", "shutil.which", "context.prompt", "sys.prefix", "builder.create", "self.create_contents", "venv.EnvBuilder", "tempfile.mkdtemp", "f.write", "os.fsencode", "self.assertIn", "output.getvalue", "self.bindir", "self.fail", "envpy.encode", "err.decode", "exc.output", "tempfile.TemporaryDirectory", "subprocess.Popen", "self.assertNotIn", "self.clear_directory", "self.run_with_capture", "f.read", "os.remove", "out.strip", "self.assertRaises", "unittest.skipIf", "sys._base_executable", "expected.encode", "builder.ensure_directories", "re.sub", "error.getvalue", "self.lib", "subprocess.PIPE", "err.rstrip", "ensurepip.version", "p.returncode", "re.MULTILINE", "self.assertFalse", "sys.base_prefix", "unittest.main", "self.isdir", "self.do_test_with_pip", "os.path", "self.ENV_SUBDIRS", "out.decode", "self.assert_pip_not_installed", "msg.format", "os.listdir", "self.skipTest", "os.name", "sys.version_info", "self.assertTrue", "self.cannot_link_exe", "unittest.TestCase", "subprocess.CalledProcessError", "os.devnull", "self.get_env_file"]}, "test_wait3.py": {"libraries": ["unittest", "time", "test.fork_wait.ForkWait", "test.support.reap_children", "os"], "function_names": ["wait_impl", "tearDownModule"], "function_calls": ["reap_children", "hasattr"], "class_names": ["Wait3Test"], "class_method_calls": ["os.wait3", "time.monotonic", "time.sleep", "unittest.SkipTest", "self.assertEqual", "self.assertTrue", "os.WNOHANG", "unittest.main"]}, "test_wait4.py": {"libraries": ["unittest", "time", "test.support.get_attribute", "test.fork_wait.ForkWait", "test.support.reap_children", "sys", "os"], "function_names": ["wait_impl", "tearDownModule"], "function_calls": ["get_attribute", "reap_children"], "class_names": ["Wait4Test"], "class_method_calls": ["time.monotonic", "time.sleep", "sys.platform", "os.wait4", "self.assertEqual", "self.assertTrue", "os.WNOHANG", "unittest.main"]}, "import_warning.py": {"libraries": ["warnings"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["warnings.warn"]}, "stacklevel.py": {"libraries": ["warnings"], "function_names": ["inner", "outer"], "function_calls": ["inner"], "class_names": [], "class_method_calls": ["warnings.warn"]}, "test_wave.py": {"libraries": ["unittest", "io", "test.audiotests", "audioop.byteswap", "struct", "sys", "test.support", "wave"], "function_names": ["test_read_no_riff_chunk", "test_read_no_fmt_no_data_chunk", "test_read_not_wave", "test_read_no_fmt_chunk", "test_read_no_chunks", "test_read_no_data_chunk", "test_read_wrong_form", "test_read_wrong_number_of_channels", "test_read_wrong_sample_width", "test__all__"], "function_calls": ["byteswap"], "class_names": ["WaveLowLevelTest", "WavePCM24Test", "WaveTest", "WavePCM8Test", "WavePCM32Test", "MiscTestCase", "WavePCM16Test"], "class_method_calls": ["support.check__all__", "audiotests.AudioMiscTests", "struct.pack", "self.assertRaises", "audiotests.AudioTestsWithSourceFile", "bytes.fromhex", "sys.byteorder", "wave.Error", "wave.open", "io.BytesIO", "unittest.TestCase", "unittest.main", "self.assertRaisesRegex", "audiotests.AudioWriteTests"]}, "test_weakref.py": {"libraries": ["unittest", "_testcapi", "test.mapping_tests", "threading", "copy", "gc", "operator", "contextlib", "time", "random", "sys", "collections", "weakref", "test.support", "test.support.script_helper"], "function_names": ["dict_copy", "test_make_weak_valued_dict_from_dict", "test_weak_keys_destroy_while_iterating", "collect", "test_callback_when_method_dead", "test_weak_keyed_len_race", "test_threaded_weak_value_dict_copy", "test_subclass_refs", "_subclass", "__index__", "check_weak_destroy_while_iterating", "create_bound_method", "test_weak_valued_len_cycles", "check_weak_destroy_and_mutate_while_iterating", "check_popitem", "test_proxy_matmul", "__init__", "_reference", "test_ref_created_during_del", "__str__", "test_ref_reuse", "test_callback_gcs", "__matmul__", "test_atexit", "test_weak_valued_delitem", "__iter__", "test_callback_in_cycle_3", "other_method", "test_make_weak_valued_dict_misc", "test_method_dead", "test_weak_values_destroy_while_iterating", "remove", "error", "test_gc_during_ref_creation", "test_weak_keyed_dict_popitem", "make_weak_valued_dict", "__delitem__", "test_make_weak_keyed_dict_repr", "check_gc_during_creation", "encapsulate", "test_callbacks_on_callback", "__bytes__", "test_init", "C_went_away", "test_trashcan_16602", "test_threaded_weak_valued_pop", "test_threaded_weak_key_dict_deepcopy", "testcontext", "test_callback_in_cycle_4", "__floordiv__", "test_proxy_iter", "test_multiple_selfref_callbacks", "check_basic_ref", "__call__", "callback", "test_subclass_refs_with_slots", "pop_and_collect", "check_len_cycles", "test_callback_in_cycle_2", "test_getweakrefs", "__del__", "test_arg_errors", "test_callback_attribute_after_deletion", "test_make_weak_keyed_dict_from_weak_keyed_dict", "check_weak_del_and_len_while_iterating", "test_basic_ref", "test_finalize", "test_weak_valued_dict_setdefault", "_ne", "test_no_cycles", "test_weak_keyed_cascading_deletes", "f", "test_classes", "test_callbacks_protected", "test_multiple_callbacks", "__new__", "test_constructor_kwargs", "test_weak_keyed_iters", "collect_in_thread", "setUp", "test_sf_bug_840829", "test_weak_valued_iters", "test_weak_valued_len_race", "cb", "test_ordering", "__repr__", "test_make_weak_keyed_dict_from_dict", "test_main", "check_proxy", "test_weak_valued_dict_update", "test_subclass_refs_dont_conflate_callbacks", "test_threaded_weak_key_dict_copy", "test_weak_valued_dict_popitem", "test_callback_attribute", "test_weak_keyed_bad_delitem", "test_order", "check_update", "test_gc_during_proxy_creation", "__imatmul__", "method", "some_method", "test_getweakrefcount", "test_proxy_bool", "test_weak_keyed_dict_setdefault", "check_len_race", "__rmatmul__", "test_callback_when_object_dead", "create_function", "_eq", "test_weak_keyed_len_cycles", "test_all_freed", "run_in_child", "test_newstyle_number_ops", "test_proxy_div", "check_iters", "__ifloordiv__", "test_proxy_unicode", "test_cfunction", "test_subclass_refs_with_cycle", "test_proxy_deletion", "check_setdefault", "_collect_if_necessary", "check", "test_alive", "test_equality", "meth", "make_weak_keyed_dict", "test_threaded_weak_value_dict_deepcopy", "test_basic_callback", "__eq__", "test_shared_ref_without_callback", "test_callback_in_cycle_1", "test_basic_proxy", "fin", "test_proxy_index", "__lt__", "test_weak_keys", "test_callable_proxy", "test_weak_values", "test_weak_keyed_delitem", "acallback", "test_threaded_weak_valued_setdefault", "safe_callback", "test_proxy_reuse", "check_shared_without_callback", "test_make_weak_valued_dict_from_weak_valued_dict", "test_subclass_refs_dont_replace_standard_refs", "check_basic_callback", "test_object_dead", "test_proxy_ref", "test_callback_in_cycle_resurrection", "test_threaded_weak_valued_consistency", "check_threaded_weak_dict_copy", "test_make_weak_valued_dict_repr", "__hash__", "test_shared_proxy_without_callback", "test_hashing", "add", "test_set_callback_attribute", "test_weak_keyed_dict_update", "test_remove_closure"], "function_calls": ["Callable", "create_cfunction", "MyObj", "collect_in_thread", "getattr", "wr_f", "RefCycle", "List", "mr", "f5", "repr", "testcontext", "isinstance", "test_main", "MyFinalizer", "ObjectWithDel", "super", "MyRef", "Foo", "iter", "F", "II", "a", "A", "ref2", "wr", "hash", "range", "Target", "DummyKey", "DummyValue", "list", "wself", "ref", "C", "factory", "klass", "dir", "r", "Object", "set", "_ne", "next", "type", "bool", "f", "D", "hasattr", "len", "_eq", "dict_type", "f3", "f2", "makeref", "bytes", "external_wr", "type_", "ref1", "wr_callback", "map", "cons", "encapsulate", "print"], "class_names": ["Callable", "MyObj", "RefCycle", "ReferencesTestCase", "WeakKeyDictionaryTestCase", "List", "BogusError", "MappingTestCase", "MyFinalizer", "ObjectWithDel", "MyRef", "Foo", "F", "II", "SubclassableWeakrefTestCase", "A", "WeakMethodTestCase", "Target", "DummyKey", "DummyValue", "FinalizeTestCase", "C", "Object", "WeakValueDictionaryTestCase", "D", "TestBase", "J"], "class_method_calls": ["z.other_method", "f3.atexit", "calls.append", "mapping_tests.BasicTestMappingProtocol", "self.assertEqual", "support.gc_collect", "r.slot1", "self.attribute", "f2.atexit", "self.check_weak_destroy_while_iterating", "self.assertGreaterEqual", "f1.atexit", "r2.o", "weakdict.update", "self.assertIs", "mr.value", "weakdict.popitem", "t.start", "objs.reverse", "I.acallback", "f5.alive", "self.check_gc_during_creation", "f.peek", "dict.keys", "proxy.bar", "self.check_shared_without_callback", "self.assertRaises", "self.A", "self.callback", "t_copy.join", "self.ctr", "f.result", "values.remove", "operator.gt", "dict.__getitem__", "mr.called", "a.a", "d.__setitem__", "o.foo", "_testcapi.create_cfunction", "self._collect_if_necessary", "self.wparent", "operator.le", "self.assertTrue", "sys.implementation", "self.check_proxy", "d.other", "self.assertIsInstance", "weakref.CallableProxyType", "l.append", "d.pop", "dict.pop", "exc.append", "items2.sort", "self.check_basic_ref", "x.other_method", "c2.c1", "d.copy", "c.other", "weakref.getweakrefcount", "c2.cb", "self.check_len_race", "weakdict.keys", "f2.alive", "support.requires_type_collecting", "self._subclass", "Object.some_method", "o.value", "self.assertNotIn", "self.check_weak_destroy_and_mutate_while_iterating", "operator.index", "dict.clear", "self.c", "d.cb", "weakref.proxy", "proxy.foo", "ref1.__callback__", "t_collect.start", "self.assertRegex", "support.run_unittest", "objects.pop", "z.some_method", "dict.itervaluerefs", "res.append", "copy.deepcopy", "contextlib.contextmanager", "self.assertIsNone", "self.assertIsNot", "dict.values", "ref.__callback__", "weakref.WeakKeyDictionary", "weakref.WeakMethod", "self.check_popitem", "r.__init__", "dict.copy", "support.disable_gc", "script_helper.assert_python_ok", "keys.append", "c1.i", "t_copy.start", "f4.atexit", "y.some_method", "r1.r", "c1.acallback", "gc.collect", "weakdict.setdefault", "unittest.TestCase", "dict.keyrefs", "self.assertFalse", "other.arg", "values.append", "copy.copy", "weakref.finalize", "c2.wr", "self.c1", "items.remove", "self.result", "d._remove", "support.run_doctest", "o.arg", "self.value", "weakdict.get", "I.wr", "self.check_len_cycles", "dict.items", "self.arg", "dict.valuerefs", "self.assertLessEqual", "self.addCleanup", "ob.arg", "c2.c", "self.cycle", "d.update", "self.called", "self.assertWarns", "weakref.ReferenceType", "r.meth", "gc.get_threshold", "x.some_method", "r1.o", "f.alive", "self.slot1", "self.__ref", "dict.get", "d.wr", "c1.wr", "random.randint", "self.COUNT", "collections.UserList", "f.detach", "keys.remove", "c2.me", "d.__delitem__", "ref2.__callback__", "f5.detach", "objects2.remove", "dict.__delitem__", "self.cbcalled", "self.assertIsNotNone", "dct.items", "self.make_weak_keyed_dict", "t_collect.join", "alist.append", "self.check_iters", "self.check_weak_del_and_len_while_iterating", "a.wr", "weakref.getweakrefs", "sys.modules", "C.some_method", "operator.ge", "I.J", "self.me", "d.items", "d.keys", "self.assertIn", "t.join", "self.fail", "other.value", "self.slot2", "lst.pop", "items1.sort", "self.check_update", "operator.lt", "o.some_method", "self.check_threaded_weak_dict_copy", "c.cb", "y.other_method", "weakref.WeakValueDictionary", "dict.popitem", "r.slot2", "self.check_setdefault", "dict.update", "self.bar", "weakref.ref", "self.ref", "o.bar", "c1.c", "time.sleep", "self.J", "self.check_basic_callback", "gc.set_threshold", "out.decode", "f3.alive", "support.cpython_only", "self.make_weak_valued_dict", "c.wr", "p.append", "c2.acallback", "d.setdefault", "self.wr", "threading.Thread", "d.__getitem__"]}, "test_weakset.py": {"libraries": ["unittest", "collections.UserString", "gc", "contextlib", "weakref.WeakSet", "string"], "function_names": ["test_update_set", "test_pop", "setUp", "test_lt", "test_inplace_on_self", "test_weak_destroy_while_iterating", "test_init", "test_xor", "test_or", "test_remove", "test_methods", "test_len_cycles", "test_gt", "test_repr", "test_symmetric_difference", "test_union", "testcontext", "test_intersection_update", "test_update", "test_weak_destroy_and_mutate_while_iterating", "test_eq", "test_clear", "test_iand", "test_isub", "test_ior", "test_intersection", "__init__", "test_new_or_init", "test_subclass_with_custom_hash", "test_difference", "test_ixor", "test_len", "test_sub", "test_len_race", "test_ne", "test_constructor_identity", "test_hash", "test_symmetric_difference_update", "test_copy", "test_contains", "test_discard", "test_difference_update", "__hash__", "test_and", "test_add", "test_sub_and_super", "test_gc", "test_isdisjoint"], "function_calls": ["frozenset", "RefCycle", "ustr", "id", "repr", "testcontext", "Foo", "iter", "str", "tuple", "range", "list", "C", "set", "dir", "int", "next", "type", "len", "H", "WeakSet"], "class_names": ["TestWeakSet", "Foo", "H", "RefCycle"], "class_method_calls": ["f.add", "self.assertEqual", "self.assertNotEqual", "dict.fromkeys", "self.assertGreaterEqual", "self.fs", "self.assertLessEqual", "self.abcde_items", "self.items2", "self.ab_weakset", "self.items", "self.assertIn", "elem.set", "s.add", "s.__init__", "self.addCleanup", "self.def_items", "self.assertNotIn", "self.def_weakset", "self.s", "self.cycle", "s.intersection", "s.clear", "method.startswith", "s.remove", "self.assertRaises", "elem.sub", "self.obj", "gc.get_threshold", "f.remove", "contextlib.contextmanager", "self.ab_items", "string.ascii_letters", "unittest.main", "s.update", "self.d", "s.copy", "gc.set_threshold", "f.discard", "elem.cycle", "self.assertTrue", "items.pop", "i.intersection", "gc.collect", "unittest.TestCase", "self.assertFalse", "self.letters", "self.abcde_weakset"]}, "test_webbrowser.py": {"libraries": ["unittest", "sys", "unittest.mock", "subprocess", "test.support", "os", "webbrowser"], "function_names": ["test_register", "test_register_preferred", "_test", "test_get", "test_open_new", "setUp", "test_environment", "test_open_with_autoraise_false", "test_environment_preferred", "test_open_new_tab", "wait", "tearDown", "test_open", "_check_registration", "test_register_default", "poll", "test_synthesize"], "function_calls": ["ExampleBrowser", "PopenMock", "getattr", "str", "dict"], "class_names": ["ChromeCommandTest", "ExampleBrowser", "PopenMock", "GaleonCommandTest", "MozillaCommandTest", "ELinksCommandTest", "ImportTest", "NetscapeCommandTest", "OperaCommandTest", "CommandTestMixin", "BrowserRegistrationTest", "GenericBrowserCommandTest", "BackgroundBrowserCommandTest"], "class_method_calls": ["self._saved_tryorder", "webbrowser.Elinks", "webbrowser._tryorder", "self.assertIsNotNone", "sys.executable", "self.assertEqual", "self._test", "webbrowser.register", "webbrowser.Mozilla", "webbrowser.get", "webbrowser.Error", "self.assertIn", "subprocess.Popen", "support.import_fresh_module", "self._saved_browsers", "webbrowser.Opera", "self.assertRaises", "support.patch", "self.browser_class", "webbrowser._browsers", "webbrowser.Chrome", "popen_args.index", "webbrowser.Galeon", "webbrowser.GenericBrowser", "self.assertIsNone", "unittest.main", "webbrowser.BackgroundBrowser", "os.path", "popen_args.pop", "self.skipTest", "self._check_registration", "self.assertTrue", "support.EnvironmentVarGuard", "webbrowser.Netscape", "unittest.TestCase", "self.assertFalse", "mock.MagicMock"]}, "test_winconsoleio.py": {"libraries": ["unittest", "io", "_testconsole.write_input", "sys", "tempfile", "test.support", "os"], "function_names": ["test_partial_surrogate_reads", "test_open_name", "test_open_fd", "test_partial_reads", "test_abc", "test_conout_path", "test_write_empty_data", "test_input", "test_ctrl_z", "assertStdinRoundTrip", "test_conin_conout_names"], "function_calls": ["issubclass", "ConIO", "write_input", "input", "open", "range"], "class_names": ["WindowsConsoleIOTests"], "class_method_calls": ["self.assertIsInstance", "sys.platform", "self.assertIsNotNone", "tmpfile.fileno", "self.assertNotIsInstance", "sys.executable", "f.readable", "self.assertEqual", "sys.getwindowsversion", "stdin.readall", "stdin.buffer", "self.assertRaisesRegex", "io._WindowsConsoleIO", "tempfile.mkdtemp", "f.write", "io.RawIOBase", "unittest.SkipTest", "tempfile.TemporaryFile", "support.rmtree", "self.addCleanup", "io.BufferedIOBase", "self.assertRaises", "io.TextIOBase", "unittest.skipIf", "f.writable", "stdin.read", "actual.endswith", "self.assertStdinRoundTrip", "sys.stdin", "unittest.main", "os.path", "self.assertTrue", "f.fileno", "f.close", "unittest.TestCase", "self.assertFalse"]}, "test_winreg.py": {"libraries": ["unittest", "platform.machine", "threading", "platform.win32_edition", "sys", "winreg.*", "test.support", "os", "errno"], "function_names": ["test_remote_registry_works", "setUp", "_read_test_data", "test_reflection_functions", "_delete_test_data", "test_connect_registry_to_local_machine_works", "test_dynamic_key", "test_setvalueex_value_range", "test_main", "test_exception_numbers", "_test_named_args", "test_reflection_unsupported", "test_registry_works_extended_functions", "test_registry_works", "test_long_key", "test_reflection", "_test_all", "test_context_manager", "_write_test_data", "delete_tree", "test_read_string_containing_null", "run", "test_disable_reflection", "testExpandEnvironmentStrings", "test_nonexistent_remote_registry", "test_named_arguments", "test_setvalueex_crash_with_none_arg", "test_queryvalueex_return_value", "test_changing_value"], "function_calls": ["SetValue", "QueryValue", "CloseKey", "QueryReflectionKey", "EnumKey", "QueryValueEx", "DeleteValue", "test_main", "OpenKeyEx", "SetValueEx", "machine", "ExpandEnvironmentStrings", "DeleteKeyEx", "range", "EnumValue", "VeryActiveThread", "CreateKeyEx", "ConnectRegistry", "CreateKey", "int", "type", "OpenKey", "DeleteKey", "len", "EnableReflectionKey", "win32_edition", "QueryInfoKey", "DisableReflectionKey", "print"], "class_names": ["VeryActiveThread", "Win64WinregTests", "LocalWinregTests", "RemoteWinregTests", "BaseWinregTests"], "class_method_calls": ["sub_key.Close", "self._test_all", "errno.EACCES", "h.Close", "unittest.skipUnless", "os.getpid", "self.assertEqual", "self.assertNotEqual", "sys.getwindowsversion", "support.import_module", "h.handle", "self.delete_tree", "key.handle", "e.errno", "self._test_named_args", "key.Close", "ck.handle", "errno.EPERM", "created_key.handle", "thread.start", "self.fail", "self._read_test_data", "self.assertRaises", "thread.join", "unittest.skipIf", "self._write_test_data", "support.run_unittest", "self.assertIsNone", "os.environ", "ckey.handle", "okey.handle", "self.skipTest", "sys.argv", "self.assertTrue", "unittest.TestCase", "self.assertFalse", "threading.Thread", "self._delete_test_data"]}, "test_winsound.py": {"libraries": ["unittest", "test.support", "functools", "time"], "function_names": ["test_exclamation", "test_alias_nofallback", "test_default", "test_stopasync", "test_snd_filename", "wrapper", "test_keyword_args", "test_question", "test_asterisk", "test_extremes", "sound_func", "test_alias_fallback", "test_increasingfrequency", "test_hand", "test_aliases", "tearDown", "test_errors", "test_snd_memory", "test_ok"], "function_calls": ["safe_Beep", "bytearray", "safe_MessageBeep", "sound_func", "open", "print", "func", "range", "safe_PlaySound"], "class_names": ["PlaySoundTest", "BeepTest", "MessageBeepTest"], "class_method_calls": ["winsound.SND_NOSTOP", "winsound.MB_OK", "support.import_module", "functools.wraps", "support.requires", "func.__name__", "winsound.MB_ICONQUESTION", "winsound.SND_ALIAS", "winsound.SND_NODEFAULT", "winsound.SND_FILENAME", "winsound.MB_ICONASTERISK", "f.read", "winsound.SND_ASYNC", "self.subTest", "self.assertRaises", "support.findfile", "support.verbose", "winsound.PlaySound", "winsound.Beep", "unittest.main", "winsound.MessageBeep", "time.sleep", "winsound.SND_PURGE", "winsound.MB_ICONEXCLAMATION", "winsound.MB_ICONHAND", "unittest.TestCase", "winsound.SND_MEMORY", "winsound.SND_LOOP"]}, "test_with.py": {"libraries": ["unittest", "collections.deque", "sys", "contextlib.contextmanager", "contextlib._GeneratorContextManager"], "function_names": ["testRaisedGeneratorExit2", "testExitThrows", "mock_contextmanager", "testMultipleArgUnbound", "testAssignmentToTupleContainingNoneError", "cm", "helper", "testAssignmentToNoneError", "__init__", "assertInWithManagerInvariants", "testInlineGeneratorBoundToDottedVariable", "testNoExceptions", "testSingleComplexTarget", "falseAsBool", "testBoundGenerator", "testEnterReturnsTuple", "testNameError", "trueAsBool", "assertAfterWithManagerInvariantsWithError", "testMultipleArgBound", "testWithReturn", "testSingleResource", "testExceptionInExit", "testExitAttributeError", "testEnterThrows", "__exit__", "fooNotDeclared", "testEnterAttributeError2", "testAssignmentToTupleOnlyContainingNoneError", "mock_contextmanager_generator", "assertInWithGeneratorInvariants", "testInlineGeneratorSyntax", "fooLacksEnter", "__bool__", "testWithYield", "assertAfterWithManagerInvariants", "testWithRaise", "setUp", "testRaisedStopIteration3", "assertAfterWithGeneratorInvariantsWithError", "testNestedSingleStatements", "testMultipleComplexTargets", "testRaisedStopIteration1", "testNestedExceptionBeforeInnerStatement", "testInlineGeneratorBoundSyntax", "testSingleArgUnbound", "testSingleArgBoundToSingleElementParenthesizedList", "fooLacksExit", "assertAfterWithGeneratorInvariantsNoError", "fooLacksEnterAndExit", "testNestedExceptionAfterInnerStatement", "testRaisedStopIteration2", "testSingleArgBoundToMultipleElementTupleError", "shouldThrowValueError", "testExceptionInEnter", "testRaisedGeneratorExit1", "assertAfterWithManagerInvariantsNoError", "shouldThrow", "gen", "testSingleArgBoundToNonTuple", "testExceptionInExprList", "testErrorsInBool", "testInlineGeneratorBoundToExistingVariable", "__enter__", "testSingleArgInlineGeneratorSyntax", "testExitFalseDoesntSwallowException", "raiseTestException", "testExceptionNormalized", "testExitTrueSwallowsException", "testEnterAttributeError1", "shouldRaiseSyntaxError", "assertRaisesSyntaxError", "testMultipleResourcesInSingleStatement", "testWithContinue", "testUnboundGenerator", "failAsBool", "testWithBreak", "foo"], "function_calls": ["bool_conversion", "MockNested", "LacksExit", "LacksEnter", "cm", "shouldThrow", "deque", "gen", "Bool", "RuntimeError", "StopIteration", "LacksEnterAndExit", "AfricanSwallow", "super", "Nested", "mock_contextmanager_generator", "B", "iter", "GeneratorExit", "MockContextManager", "list", "C", "trueAsBool", "type", "next", "hasattr", "compile", "EnterThrows", "EuropeanSwallow", "MockResource", "foo", "ExitThrows"], "class_names": ["FailureTestCase", "ExitRaises", "NonexceptionalTestCase", "MockNested", "LacksExit", "InitRaises", "EnterRaises", "LacksEnter", "cm", "Bool", "NestedNonexceptionalTestCase", "LacksEnterAndExit", "AfricanSwallow", "Nested", "NonLocalFlowControlTestCase", "ExitSwallowsExceptionTestCase", "B", "NestedWith", "ExceptionalTestCase", "AssignmentTargetTestCase", "Dummy", "MockContextManager", "C", "ContextmanagerAssertionMixin", "EnterThrows", "EuropeanSwallow", "MockResource", "ExitThrows"], "class_method_calls": ["self.assertIsInstance", "self.assertAfterWithGeneratorInvariantsNoError", "mock_generator.stopped", "self.assertInWithManagerInvariants", "self.exit_result", "self.ExitRaises", "self.value", "self.resource_b", "self.assertAfterWithManagerInvariants", "self.assertEqual", "self.assertNotEqual", "a.enter_called", "self.exc_info", "self.assertAfterWithManagerInvariantsNoError", "self.assertAfterWithGeneratorInvariantsWithError", "mgr.__exit__", "self.assertRaisesRegex", "self.enter_called", "mock.stopped", "mock_manager.exit_args", "mock_generator.yielded", "Nested.__exit__", "blah.three", "self.resource_a", "blah.one", "self.fail", "mock_manager.exit_called", "vars.append", "self.InitRaises", "Nested.__enter__", "self.exit_called", "self.assertRaisesSyntaxError", "mgr.__enter__", "mock.yielded", "mock_b.exit_called", "self.exit_args", "self.raiseTestException", "_GeneratorContextManager.__exit__", "self.Dummy", "keys.sort", "targets.values", "self.assertRaises", "self.entered", "sys.exc_info", "mock_b.enter_called", "blah.foo", "self.gobble", "self.yielded", "b.enter_called", "self.bar", "self.managers", "self.stopped", "b.exit_called", "self.EnterRaises", "self.assertInWithGeneratorInvariants", "self.assertIsNot", "Nested.__init__", "mock_manager.enter_called", "unittest.main", "targets.keys", "a.exc_info", "self.resource", "a.exit_called", "self.foo", "self.assertAfterWithManagerInvariantsWithError", "self.__exit__", "self.assertTrue", "_GeneratorContextManager.__enter__", "unittest.TestCase", "self.assertFalse", "mock_b.exit_args", "self.TEST_EXCEPTION", "blah.two"]}, "test_wsgiref.py": {"libraries": ["http.client.HTTPConnection", "wsgiref.handlers.SimpleHandler", "wsgiref.handlers.BaseCGIHandler", "wsgiref.util.setup_testing_defaults", "unittest.mock", "io.BytesIO", "test.support", "unittest", "threading", "wsgiref.simple_server.make_server", "signal", "test.test_httpservers.NoLogRequestHandler", "io.StringIO", "os", "re", "platform.python_implementation", "wsgiref.simple_server.WSGIRequestHandler", "wsgiref.handlers.BaseHandler", "wsgiref.headers.Headers", "socketserver.BaseServer", "wsgiref.simple_server.WSGIServer", "wsgiref.util", "io.BufferedReader", "wsgiref.validate.validator", "sys", "unittest.TestCase"], "function_names": ["signal_handler", "hello_app", "testGuessScheme", "testScheme", "checkAppURI", "create_bad_app", "trivial_app1", "test_validated_hello", "test_wsgi_input", "testMappingInterface", "setup", "test_filewrapper_getitem_deprecation", "testCGIEnviron", "run_client", "test_environ", "testBytesData", "testErrorAfterOutput", "test_plain_hello", "testClientConnectionTerminations", "testSimpleShifts", "testFileWrapper", "testDontResetInternalStateOnException", "make_it", "trivial_app3", "testExtras", "testCloseOnError", "checkCrossDefault", "test_simple_validation_error", "trivial_app2", "header_app", "__init__", "testAbstractMethods", "trivial_app4", "finish", "testPartialWrite", "testReqURIs", "app", "handle_error", "run_amock", "non_error_app", "bad_app", "compare_generic_iter", "flush", "close", "__iter__", "testHeaderFormats", "checkShift", "test_request_length", "test_interrupted_write", "testEnviron", "testContentLength", "error_app", "testAppURIs", "test_cp1252_url", "testDefaults", "testHopByHop", "server_bind", "testBasicErrorOutput", "write", "test_status_validation_errors", "checkDefault", "check_hello", "testNormalizedShifts", "checkFW", "testCrossDefaults", "checkReqURI", "testRequireList", "test_bytes_validation"], "function_calls": ["SimpleHandler", "TestHandler", "create_bad_app", "AbortingWriter", "getattr", "start_response", "setup_testing_defaults", "HTTPConnection", "ErrorHandler", "make_it", "isinstance", "BaseCGIHandler", "s", "iter", "str", "Headers", "CrashyIterable", "StringIO", "dict", "python_implementation", "AssertionError", "make_server", "run_amock", "compare_generic_iter", "next", "BaseHandler", "float", "pthread_kill", "BytesIO", "bytearray", "len", "BufferedReader", "m", "PartialWriter", "validator"], "class_names": ["TestHandler", "HandlerTests", "HeaderTests", "AbortingWriter", "PartialWriter", "UtilityTests", "IntegrationTests", "WsgiHandler", "CrashyIterable", "MockHandler", "CustomException", "MockServer", "ErrorHandler"], "class_method_calls": ["stderr.getvalue", "h.error_status", "err.getvalue", "util.request_uri", "util.guess_scheme", "self.assertEqual", "self.assertIs", "h.get_all", "threading.get_ident", "self.assertRaises", "background.join", "self.setup_environ", "h.status", "self.server_address", "expected.update", "sys.stderr", "h.stdout", "sys.version", "h.result", "self.assertTrue", "support.HOST", "self.assertIsInstance", "h.origin_server", "written.extend", "h.environ", "server.handle_request", "http.getresponse", "hop.title", "self.connection", "self.request", "h.error_body", "server.finish_request", "http.request", "self.checkCrossDefault", "it.filelike", "self.subTest", "interrupted.wait", "support.swap_attr", "out.splitlines", "signal.SIGUSR1", "self.server_name", "self.assertIsNot", "h.setup_environ", "self.checkFW", "h.__getitem__", "util.FileWrapper", "self.checkReqURI", "h.headers", "re.match", "self.assertFalse", "h._write", "handler.get_stderr", "threading.Thread", "os_environ.items", "util.application_uri", "self.addCleanup", "h.http_version", "self.wfile", "err.endswith", "self.assertWarnsRegex", "self.checkAppURI", "it.close", "signal.signal", "server.server_address", "self.check_hello", "hop.upper", "self.checkDefault", "os.environ", "unittest.main", "hop.lower", "server.server_close", "support.SOCK_MAX_SIZE", "self.assertDictEqual", "h.stderr", "handler.environ", "self.assertIsNotNone", "util.is_hop_by_hop", "h.__contains__", "self.rfile", "self.server_bind", "threading.Event", "self.assertIn", "support.get_attribute", "h.server_software", "self.checkShift", "h.run", "background.start", "out.getvalue", "self.server_port", "BaseServer.__init__", "out.endswith", "support.ignore_warnings", "err.splitlines", "http.close", "util.setup_testing_defaults", "interrupted.set", "BaseCGIHandler.__init__", "h.get", "handler.get_stdin", "util.shift_path_info", "handler.setup_environ", "h.add_header", "response.read", "h.setdefault", "mock.ANY"]}, "test_xdrlib.py": {"libraries": ["unittest", "xdrlib"], "function_names": ["test_float", "setUp", "test_pack_int", "test_xdr", "test_pack_uint", "test_uhyper", "test_double", "assertRaisesConversion"], "function_calls": ["list", "range"], "class_names": ["XDRTest", "ConversionErrorTest"], "class_method_calls": ["self.packer", "up.unpack_string", "up.set_position", "xdrlib.ConversionError", "p.pack_uint", "up.unpack_list", "p.pack_bool", "self.assertAlmostEqual", "self.assertEqual", "up.unpack_bool", "xdrlib.Packer", "p.pack_array", "p.pack_string", "up.unpack_uhyper", "up.unpack_float", "p.pack_double", "self.assertRaises", "self.assertRaisesConversion", "up.unpack_array", "up.get_position", "p.pack_uhyper", "xdrlib.Unpacker", "p.pack_list", "unittest.main", "p.pack_int", "p.pack_float", "p.get_buffer", "up.unpack_uint", "up.done", "self.assertTrue", "up.unpack_double", "unittest.TestCase", "up.unpack_int"]}, "test_xml_dom_minicompat.py": {"libraries": ["unittest", "copy", "xml.dom.minicompat.*", "pickle", "xml.dom"], "function_names": ["test_nodelist_item", "test_emptynodelist___radd__", "test_nodelist_pickle_roundtrip", "test_nodelist_deepcopy", "test_emptynodelist_length", "test_nodelist___radd__", "test_emptynodelist_item", "test_nodelist_copy", "test_nodelist_length", "test_nodelist___add__", "test_emptynodelist___add__"], "function_calls": ["range", "zip", "EmptyNodeList", "NodeList"], "class_names": ["NodeListTestCase", "EmptyNodeListTestCase"], "class_method_calls": ["copy.copy", "node_list.length", "self.assertIs", "node_list.item", "self.assertRaises", "self.assertIsNone", "copy.deepcopy", "self.assertEqual", "pickle.dumps", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "xml.dom", "unittest.TestCase", "self.assertIsNot", "unittest.main", "node_list.append"]}, "test_xml_etree.py": {"libraries": ["itertools.product", "warnings", "html", "test.support", "unittest", "test.support.swap_attr", "io", "types", "copy", "textwrap", "functools.partial", "weakref", "locale", "os", "functools", "itertools", "operator", "test.support.findfile", "test.support.gc_collect", "pyexpat", "xml.parsers.expat.errors", "test.support.TESTFN", "xml.etree.ElementTree", "xml.etree.ElementPath", "test.support.import_fresh_module", "sys", "pickle", "itertools.islice", "xml.etree.ElementInclude"], "function_names": ["test_tostring_default_namespace", "test_write_to_text_file", "test_events_comment", "test_interface", "test_xinclude_default", "test_element_factory_subclass", "_make_elem_with_children", "test_custom_builder", "serialize", "test_simple_xml_with_ns", "test_bug_xmltoolkit39", "test_xpath_tokenizer", "test_expat224_utf8_bug", "test_subscr", "_elem_tags", "test_tostringlist_invariant", "check_mapping", "__index__", "test_cdata", "test_treebuilder_comment", "test_read_from_stringio", "__init__", "test_bug_xmltoolkit54", "test_bug_xmltoolkit60", "test_dummy_builder", "test_events", "test_element_factory", "test_bug_200708_close", "test_file_init", "test_Element_subclass_trivial", "test_setslice_negative_steps", "test_c14n_exclusion", "test_ns_events_start", "__iter__", "_get_error", "test_write_to_binary_file", "test_setslice_range", "test_treebuilder_start", "tearDown", "__next__", "test_tostring_default_namespace_different_namespace", "test_bad_find", "test_flush_reparse_deferral_enabled", "assert_event_tags", "check_string", "test_basic", "test_set_attribute", "assert_events", "test_Element_subclass_find", "test_setslice_steps", "test_Element_subclass_constructor", "test_custom_builder_only_end_ns", "test_doctype", "pi", "test_write_to_binary_file_with_bom", "test_html_empty_elems_serialization", "test_getiterator", "none_loader", "test_bug_200709_element_insert", "end_ns", "check_iter", "test_getchildren", "_check_sample1_element", "test_bug_xmltoolkit28", "handle", "end", "test_late_tail_mix_pi_comments", "bxml", "newtest", "test_find_through_ElementTree", "test_sanity", "test_writefile", "test_bug_xmltoolkit25", "test_bug_xmltoolkit21", "test_bug_xmltoolkitX1", "test_findall_wildcard", "newmethod", "test_tostring_xml_declaration_cases", "test_events_pi", "_ilist", "foobar", "_my_loader", "test_cyclic_gc", "test_bug_200709_default_namespace", "test_feed_while_iterating", "test_test_find_with_ns", "test_get_keyword_args", "check_expat224_utf8_bug", "__del__", "test_write_to_user_text_writer", "test_subclass", "test_weakref", "serialize_check", "__bool__", "test_findall_different_nsmaps", "check_element", "test_find_with_namespace", "test_issue6233", "test_expat224_utf8_bug_file", "test_ass_subscr", "get_option", "test_treebuilder_end", "test_bug_xmltoolkit62", "test_lost_elem", "test_getslice_single_index", "test_lost_tail", "test_makeelement", "test_tostringlist_xml_declaration", "__new__", "test_iter_by_tag", "test_extend_mutable_list2", "xinclude_loader", "doctype", "test_tostring_xml_declaration", "test_bug_xmltoolkit63", "test_xinclude_failures", "setUp", "test_getslice_range", "test_iterparse", "test_doctype_warning", "test_element_get_tail", "__deepcopy__", "test_subclass_comment_pi", "test_methods", "test_processinginstruction", "test_bug_200709_iter_comment", "test_writestring", "_check_element_factory_class", "test_read_from_bytesio", "test_entity", "test_find_with_mutating", "start_ns", "test_main", "test_write_to_bytesio", "__class__", "test_find_xpath", "test_constructor_args", "test_parsefile", "test___copy__", "test_read_from_user_binary_reader", "test_treebuilder_elementfactory_none", "test_attrib", "_feed", "test_istype", "element_factory", "test_error_position", "test_encoding", "test_issue14818", "test_late_tail", "close", "setUpClass", "test_pickle", "test_bug_200709_element_comment", "test_write_to_user_binary_writer_with_bom", "test_lost_text", "test_findtext_with_error", "test_read_from_user_text_reader", "start", "test_xml_c14n2", "test_parseliteral", "test_copy", "test_bug_1534630", "test_augmentation_type_errors", "test_dump_attribute_order", "test_events_sequence", "test_corners", "test_issue6565", "test_error_code", "assert_event_tuples", "test_namespace", "test_findall_with_mutating", "test_treebuilder_pi", "test_find_simple", "test_findtext_with_mutating", "test_getslice_negative_steps", "test_simpleops", "_check_sample_element", "test_short_empty_elements", "test_simple_xml_chunk_5", "check", "test_tree_write_attribute_order", "test_findall_with_error", "__getattr__", "test_qname", "test_ns_events", "test_path_cache", "test_write_to_user_binary_writer", "test_doctype_public", "__eq__", "test_write_to_filename", "decorator", "checkwarnings", "test_simple_xml_chunk_22", "test_find_with_error", "c14n_roundtrip", "test_Element_subclass_new_method", "test_setslice_single_index", "data", "test_element_get_text", "wref_cb", "test___deepcopy__", "test_tostringlist_default_namespace", "test___init__", "test_remove_with_mutating", "test_recursive_repr", "test_inherited_doctype", "test_delslice", "test_correct_import_pyET", "test_issue18347", "test_findall", "test_tostring_xml_declaration_unicode_encoding", "test_subclass_doctype", "test_builder_lookup_errors", "test_extend_mutable_list", "test_write_to_stringio", "test_tostring_no_xml_declaration", "test_element_factory_pure_python_subclass", "xml", "assertEqualElements", "myfactory", "read", "xmltoolkit63", "test_simple_xml", "test_unknown_event", "test_bug_200709_register_namespace", "test_getslice_steps", "test_parse_string", "comment", "test_ns_events_start_end", "summarize_list", "test_tostring_default_namespace_original_no_namespace", "test_simple_roundtrip", "test_issue10777", "_subelem_tags", "test_bug_200708_newline", "check_method", "test_xinclude", "test_bug_xmltoolkit55", "test_pickle_issue18997", "test_simple_xml_chunk_1", "test_all", "test_flush_reparse_deferral_disabled", "pickleRoundTrip"], "function_calls": ["check", "MyElement", "check_iter", "MutatingElementPath", "test", "sorted", "object", "wref", "Y", "gc_collect", "properties", "serialize", "iterparse", "bxml", "BaseDummyBuilder", "swap_attr", "check_mapping", "checkwarnings", "repr", "test_main", "DoctypeParser", "super", "c14n_roundtrip", "iter", "str", "tuple", "islice", "Text", "open", "dict", "MyParserWithDoctype", "Dummy", "range", "X", "list", "ExceptionFile", "MyParserWithoutDoctype", "RaisingBuilder", "partial", "BadElementPath", "dir", "MyParser", "next", "zip", "full_path", "xml", "OSError", "check_element", "Tag", "xmltoolkit63", "hasattr", "product", "get_option", "len", "check_string", "findfile", "MyTreeBuilder", "import_fresh_module", "summarize_list", "EchoTarget", "check_method", "DummyBuilder", "TreeBuilderSubclass", "Builder", "E", "DummyIter"], "class_names": ["MutatingElementPath", "MyElement", "KeywordArgsTest", "NoAcceleratorTest", "ElementTestCase", "Y", "BaseDummyBuilder", "ElementIterTest", "NamespaceParseTest", "DoctypeParser", "BadElementTest", "Builder", "ElementTreeTypeTest", "ElementTreeTest", "Text", "MyParserWithDoctype", "Dummy", "X", "MyParserWithoutDoctype", "ExceptionFile", "ParseErrorTest", "RaisingBuilder", "BadElementPath", "TreeBuilderTest", "ModuleTest", "MyParser", "ElementSlicingTest", "dummy", "XMLParserTest", "Tag", "ElementFindTest", "C14NTest", "MyTreeBuilder", "EchoTarget", "XMLPullParserTest", "BugsTest", "DummyIter", "DummyBuilder", "TreeBuilderSubclass", "BadElementPathTest", "IOTest", "XIncludeTest", "E", "BasicElementTest"], "class_method_calls": ["elem.clear", "ET.canonicalize", "element.tag", "element_foo2.tail", "lst.append", "context.root", "b.comment", "element_foo2.tag", "root.get", "stream.getvalue", "ET.PI", "pickle.HIGHEST_PROTOCOL", "el.get", "parser2.feed", "support.captured_stdout", "sub.text", "ET.parse", "raw.getvalue", "element.insert", "e.extend", "config.items", "self.subTest", "fp.read", "self.assertIsNot", "tree.findtext", "pickle.PicklingError", "elem.append", "a.iter", "os.path", "tests.items", "ET.QName", "it.__next__", "tree.start", "self.sample1", "elem.tail", "element.items", "self.append", "element.attrib", "raw.write", "functools.update_wrapper", "element.getchildren", "ET._set_factories", "elem.insert", "e2.attrib", "parser.read_events", "os.listdir", "writer.write", "support.check__all__", "e.findtext", "child.attrib", "BadElementPath.__hash__", "child.tail", "child.tag", "elem.extend", "cls.modules", "tree.attrib", "textwrap.dedent", "self._my_loader", "self._subelem_tags", "self.elem", "element_foo2.attrib", "SAMPLE_XML.encode", "elem.set", "e1.find", "warnings.catch_warnings", "self.assertRaises", "tests.values", "self._check_element_factory_class", "ERRORS.codes", "self.path_cache", "str.__new__", "e.itertext", "e.iter", "self._make_elem_with_children", "xml.encode", "cm.exception", "b.append", "tree.end", "self.assertEqualElements", "self.dummy", "file.getvalue", "tree.parse", "element.text", "io.StringIO", "mapping.items", "ET.Comment", "a.append", "file.seek", "pyET.canonicalize", "self.assertRegex", "parser.version", "dumper.fromstring", "self.assertIsNone", "ET.fromstring", "element.iter", "e.append", "tree.set", "self.assertLess", "parser.close", "element.keys", "pyexpat.version_info", "e2.append", "self.what", "attrib.clear", "text.replace", "e.text", "element_foo2.text", "self.addCleanup", "e.remove", "elem.tag", "support.check_no_resource_warning", "elem.text", "ElementInclude.FatalIncludeError", "b.end", "bob.close", "test_classes.extend", "ET.iterparse", "elem.makeelement", "b.start", "ET.TreeBuilder", "io.BytesIO", "ET.SubElement", "ElementPath._cache", "f.read", "doc.getiterator", "self.assert_event_tuples", "human.get", "elem.attrib", "sys.getrefcount", "element.remove", "element_foo.attrib", "element_foo.text", "e.findall", "mye.text", "self.skipTest", "self.raise_in", "tree.data", "tree.iter", "tree.iterfind", "tree.find", "ET.Element", "e.tag", "expected.replace", "ET.fromstringlist", "x.findtext", "mye.newmethod", "self.assertNotEqual", "e.attrib", "bob.end", "mapping.keys", "self.assertIs", "pyET.XMLParser", "filename.startswith", "self.xinclude_loader", "ET.tostringlist", "x.iterfind", "stream.write", "ET.register_namespace", "config.get", "ERRORS.XML_ERROR_SYNTAX", "doc.find", "element.getiterator", "tree.getroot", "d.dummyref", "self.assertTrue", "ET.XMLParser", "element.set", "unittest.SkipTest", "e2.tag", "c.tag", "parser._parser", "support.run_unittest", "a.text", "child.text", "doc.iter", "raw.read", "element_foo.tag", "element.itertext", "element.findall", "parser.flush", "copy.copy", "root.findall", "element_foo.append", "types.FunctionType", "elem.remove", "dumper.SubElement", "self.sample3", "f.write", "tree.getiterator", "bob.start", "nsmap.update", "raw.tell", "e1.__getstate__", "filename.rsplit", "filename.endswith", "e.insert", "self.assertWarnsRegex", "a.insert", "base.__module__", "ET.XMLID", "support.unlink", "element.get", "enc.upper", "self.none_loader", "self._feed", "doc.findall", "self.test_simple_xml", "f.closed", "mye.tag", "tree.write", "element_foo.tail", "self.assert_events", "text.decode", "option.tag", "element.findtext", "reader.read", "element.tail", "ET.ElementTree", "self.assertRaisesRegex", "self.assertIn", "self._check_sample1_element", "dumper.Element", "unittest.skipIf", "elem.items", "element.clear", "self._check_sample_element", "elem.keys", "elem.getchildren", "b.close", "e.__setstate__", "element.lower", "mye.items", "writer.tell", "pickle.dumps", "tree.findall", "self._doctype", "nsmap.clear", "tb.foobar", "ET._Element_Py", "self.assert_event_tags", "self.assertEqual", "bob.data", "ElementPath.xpath_tokenizer", "b.pi", "ET.dump", "ET.iselement", "x.findall", "self._get_error", "entity_file.read", "self._elem_tags", "e3.append", "self.pickleRoundTrip", "t.tag", "str.__hash__", "element.iterfind", "stdout.getvalue", "element.find", "ET.XML", "support.check_warnings", "e1.append", "elem.get", "support.TestFailed", "self.assertIsInstance", "raw.decode", "e.tail", "self.tag", "SIMPLE_XMLFILE.encode", "b.data", "path_cache.copy", "copy.deepcopy", "parser.feed", "pickle.loads", "element.extend", "sys.maxsize", "html.escape", "operator.attrgetter", "unittest.TestCase", "itertools.zip_longest", "self.assertFalse", "self.sample2", "writer.seekable", "ElementInclude.include", "elem.iter", "MutatingElementPath.__hash__", "parser.entity", "pyET.Element", "ET.ProcessingInstruction", "warnings.simplefilter", "doc.itertext", "parser2.close", "self.assertGreater", "nsmap.copy", "ET.ParseError", "self.modules", "e1.get", "self.events", "self._ilist", "self.serialize_check", "ET.XMLPullParser", "option.text", "sys.modules", "element.append", "ET.tostring", "stream.read", "x.find", "locale.getpreferredencoding", "weakref.ref", "self.check_expat224_utf8_bug", "e.find", "root.append", "subelem.attrib", "t.find", "sys.gettrace"]}, "test_xml_etree_c.py": {"libraries": ["unittest", "io", "types", "test.support.import_fresh_module", "struct", "test.support", "test.test_xml_etree"], "function_names": ["test_parser_comes_from_C", "test_bpo_31728", "test_iterparse_leaks", "setUp", "test_element_with_children", "test_correct_import_cET_alias", "test_main", "test_element", "test_length_overflow", "test_setstate_leaks", "test_trashcan", "test_xmlpullparser_leaks", "__del__", "test_alias_working", "read", "test_parser_ref_cycle", "test_element_with_attrib", "test_uninitialized_parser", "test_del_attribute", "parser_ref_cycle", "test_correct_import_cET"], "function_calls": ["list", "test_main", "len", "MockFile", "import_fresh_module", "parser_ref_cycle", "next", "range", "X"], "class_names": ["MockFile", "MiscTests", "SizeofTest", "TestAliasWorking", "TestAcceleratorImported", "X"], "class_method_calls": ["e.tag", "elem.clear", "parser.close", "support.check_sizeof", "types.FunctionType", "self.assertNotIsInstance", "unittest.skipUnless", "element.tag", "element.tail", "self.assertEqual", "support.gc_collect", "struct.calcsize", "cET.XMLParser", "self.check_sizeof", "self.extra", "self.elementsize", "parser._parse_whole", "element.text", "element.attrib", "io.StringIO", "parser.entity", "support._2G", "elem.tag", "self.assertRaises", "cET_alias.Element", "support.run_unittest", "test_xml_etree.test_main", "elem.text", "cET.Element", "parser.feed", "elem.attrib", "self.assertIsNone", "cET.iterparse", "parser.target", "support.bigmemtest", "cET.XMLPullParser", "cET_alias.SubElement", "support.cpython_only", "parser._setevents", "cET.SubElement", "support.calcobjsize", "unittest.TestCase", "elem.__setstate__", "elem.tail"]}, "test_xmlrpc.py": {"libraries": ["contextlib", "unittest.mock", "base64", "test.support", "gzip", "unittest", "io", "threading", "http.server", "datetime", "http.client", "xmlrpc.client", "socket", "re", "time", "http", "ssl", "sys", "decimal", "xmlrpc.server"], "function_names": ["test_decode", "test_dotted_attribute", "test_header", "test_introspection3", "test_newstyle_class", "test_limit_int", "test_introspection4", "test_multicall", "test_bad_gzip_request", "test_transport", "test_unicode_host", "check_loads", "threadFunc", "test_path3", "test_time", "test_load_standard_types", "test_nonascii", "test_client_encoding", "test_dump_bare_datetime", "tearDown", "dispatched_func", "test_xmlrpcserver_has_use_builtin_types_flag", "test_loads_unsupported", "test_basic", "log_message", "run_server", "div", "test_header_many", "test_dump_big_long", "test_header_empty", "test_two", "_marshaled_dispatch", "handle", "test_path2", "make_request_and_skip", "foobar", "test_escape", "_dispatch", "captured_stdout", "http_multi_server", "test_introspection2", "_methodHelp", "do_POST", "getData", "test_fail_no_info", "test_context_manager", "_", "test_datetime_before_1900", "test_get_host_info", "test_call_registered_func", "test_gzip_response", "test_keepalive_disconnect", "test_gzip_request", "test_dump_load", "test_time_tuple", "test_header_tuple", "test_time_struct", "test_load_extension_types", "parse_response", "test_server_encoding", "setUp", "test_dump_big_int", "test_use_builtin_types", "test_allow_dotted_names_true", "test_comparison", "test_default", "dummy_write", "test_datetime_datetime", "test_main", "assertContainsAdditionalHeaders", "test_404", "test_dump_encoding", "test_header_items", "test_ssl_presence", "is_unavailable_exception", "test_call_dispatch_func", "test_dump_recursive_seq", "test_simple1", "test_context_manager_method_error", "test_nonascii_methodname", "my_function", "test_cgi_get", "test_repr", "test_gzip_decode_limit", "decorator", "test_dump_double", "make_request_and_skipIf", "get_request", "test_string", "test_close", "test_path1", "get", "test_dump_bytes", "test_dump_bad_dict", "handle_one_request", "test_instance_has_no_func", "test_partial_post", "send_content", "test_call_instance_func", "test_cannot_locate_func", "test_introspection1", "test_fail_with_info", "test_cgi_xmlrpc_response", "http_server", "test_bug_1164912", "test_dump_fault", "test_cgihandler_has_use_builtin_types_flag", "test_registered_func_is_none", "test_non_existing_multicall", "test_dump_none", "test_dump_recursive_dict"], "function_calls": ["check", "object", "sorted", "getattr", "T", "MyXMLRPCServer", "id", "make_request_and_skipIf", "repr", "RuntimeError", "test_main", "super", "TestInstanceClass", "str", "staticmethod", "captured_stdout", "list", "TestInstance", "server", "is_unavailable_exception", "set", "int", "type", "http_server", "p", "multicall", "float", "hasattr", "bytearray", "len", "BrokenDispatcher", "type_", "DispatchedClass"], "class_names": ["GzipUtilTestCase", "DispatchExc", "T", "MyXMLRPCServer", "MultiPathServerTestCase", "FaultTestCase", "RequestHandler", "DateTimeTestCase", "BaseServerTestCase", "TestInstanceClass", "BinaryTestCase", "SimpleXMLRPCDispatcherTestCase", "KeepaliveServerTestCase1", "HelperTestCase", "Transport", "SimpleServerTestCase", "TestInstance", "Fixture", "SimpleServerEncodingTestCase", "UseBuiltinTypesTestCase", "FailingMessageClass", "CGIHandlerTestCase", "HeadersServerTestCase", "GzipServerTestCase", "BrokenDispatcher", "KeepaliveServerTestCase2", "ServerProxyTestCase", "FailingServerTestCase", "XMLRPCTestCase", "DispatchedClass", "MyRequestHandler", "BaseKeepaliveServerTestCase"], "class_method_calls": ["headers.keys", "support.reap_threads", "self.assertEqual", "dispatcher._dispatch", "self.assertNotEqual", "response.reason", "t.fake_gzip", "self.assertGreaterEqual", "sys.stdout", "serv.server_activate", "self.assertIs", "self.assertContainsAdditionalHeaders", "multicall.add", "thread.start", "self.assertRaises", "xmlrpclib.dumps", "thread.join", "time.localtime", "xmlrpclib.loads", "self.headers", "xmlrpclib.escape", "SimpleXMLRPCDispatcherTestCase.DispatchExc", "xmlrpclib._datetime", "dispatcher.register_instance", "t.encode_threshold", "self.handled", "now.strftime", "xmlrpclib.Binary", "self.assertTrue", "t1.decode", "xmlrpclib.gzip_decode", "support.HOST", "xmlrpclib.MultiCall", "self.assertIsInstance", "self.requestHandler", "p.add", "l.append", "data_out.seek", "datetime.datetime", "e.headers", "xmlrpclib.Marshaller", "self.reqidx", "data_in.write", "decimal.Decimal", "self.fake_gzip", "p.t\u00ea\u0161t", "new_d.value", "now.timetuple", "serv.socket", "server.handle_request", "base64.encodebytes", "xmlrpclib.ServerProxy", "re.search", "t.y", "xmlrpclib.MAXINT", "p.pow", "self.end_headers", "unittest.SkipTest", "t.__dict__", "self.parentClass", "self.standard_headers", "m.dump_int", "http.HTTPStatus", "dstr.encode", "self.close_connection", "localtime_mock.return_value", "support.run_unittest", "multicall.this_is_not_exists", "self.assertListEqual", "contextlib.contextmanager", "self.assertIsNone", "additional.items", "response.getheader", "sys.maxsize", "BaseServerTestCase.setUp", "xmlrpclib._binary", "self.raw_requestline", "server.use_builtin_types", "xmlrpc.server", "key.lower", "unittest.TestCase", "self.evt", "support.captured_stdin", "self.assertFalse", "p.system", "support.adjust_int_max_str_digits", "conn.request", "sys.flags", "serv.register_introspection_functions", "e.errcode", "response.encode", "server.add", "xmlrpclib.ResponseError", "self.log", "http.server", "xmlrpclib.Fault", "socket.create_connection", "http.client", "self.addCleanup", "exc_mess.lower", "contextlib.closing", "multicall.div", "handler.register_function", "self.wfile", "serv.add_dispatcher", "xmlrpclib.DateTime", "t.x", "additional.keys", "time.strftime", "server.server_address", "multicall.pow", "xmlrpclib.gzip_encode", "self.url", "self.send_header", "self.RequestHandler", "self.socket", "dispatcher.register_function", "serv.register_function", "xmlrpclib.Transport", "io.TextIOWrapper", "xmlrpclib.MININT", "server.server_close", "data_out.read", "s.setblocking", "d.register_introspection_functions", "re.compile", "evt.set", "result.results", "serv.handle_request", "handler.use_builtin_types", "p.method", "headers.get", "server.Fixture", "self.check_loads", "time.struct_time", "transp.get_host_info", "self.DispatchExc", "io.BytesIO", "conn.getresponse", "strg.encode", "self.assertRaisesRegex", "self.rfile", "self.cgi", "xmlrpclib.ProtocolError", "self.Transport", "threading.Event", "datetime.timedelta", "self.fail", "xmlrpc.client", "conn.send", "socket.timeout", "self.request_count", "self.myRequests", "serv.server_bind", "handle.find", "serv.register_instance", "unittest.skipIf", "serv.get_dispatcher", "server.socket", "then.timetuple", "serv.register_multicall_functions", "exc_ctx.exception", "d.register_multicall_functions", "handle.split", "handler._marshaled_dispatch", "socket.error", "connection.putheader", "t.response_length", "mock.patch", "m.dump_double", "data_in.seek", "self.test_simple1", "self.send_response", "response.status", "self.threadFunc", "self.__class__", "support.EnvironmentVarGuard", "threading.Thread", "self.response_length"]}, "test_xmlrpc_net.py": {"libraries": ["unittest", "test.support", "collections.abc", "xmlrpc.client"], "function_names": ["test_python_builders", "test_main"], "function_calls": ["server", "test_main"], "class_names": ["PythonBuildersTest"], "class_method_calls": ["self.assertIsInstance", "support.requires", "unittest.skip", "support.run_unittest", "self.addCleanup", "self.skipTest", "self.assertTrue", "collections.abc", "server.getAllBuilders", "unittest.TestCase", "xmlrpclib.ServerProxy"]}, "test_xxtestfuzz.py": {"libraries": ["unittest", "test.support", "faulthandler"], "function_names": ["test_sample_input_smoke_test"], "function_calls": [], "class_names": ["TestFuzzer"], "class_method_calls": ["_xxtestfuzz.run", "faulthandler.enable", "unittest.TestCase", "test.support", "unittest.main"]}, "test_yield_from.py": {"libraries": ["unittest", "test.support.disable_gc", "inspect", "test.support.gc_collect", "test.support", "test.support.captured_stderr"], "function_names": ["__getattr__", "test_next_and_return_with_value", "eggs", "test_close_with_cleared_frame", "outer", "test_delegating_throw_to_non_generator", "test_delegation_of_close_to_non_generator", "test_custom_iterator_return", "test_delegation_of_next_call_to_subgenerator", "test_send_and_return_with_value", "test_handling_exception_while_delegating_send", "test_generator_return_value", "test_throwing_GeneratorExit_into_subgenerator_that_yields", "test_delegator_is_visible_to_debugger", "test_delegating_generators_claim_to_be_running", "test_yield_from_empty", "g2", "gen", "test_exception_in_initial_next_call", "test_returning_value_from_delegated_throw", "one", "two", "test_handing_exception_while_delegating_close", "test_catching_exception_from_subgen_and_returning", "test_throwing_GeneratorExit_into_subgen_that_returns", "test_raising_exception_in_initial_next_call", "innermost", "test_attempted_yield_from_loop", "test_raising_exception_in_delegated_next_call", "pex", "close", "test_delegation_of_initial_next_to_subgenerator", "run", "test_broken_getattr_handling", "__iter__", "call_stack", "test_send_tuple_with_custom_generator", "test_exception_value_crash", "__next__", "test_delegating_close", "f", "send", "g1", "spam", "g", "test_value_attribute_of_StopIteration_exception", "inner", "test_conversion_of_sendNone_to_next", "test_throwing_GeneratorExit_into_subgen_that_raises", "test_delegation_of_send", "test_delegating_throw", "test_attempting_to_send_to_non_generator", "test_delegation_of_next_to_non_generator"], "function_calls": ["eggs", "outer", "gc_collect", "gen", "g2", "MyIter", "repr", "captured_stderr", "StopIteration", "LunchError", "MyIt", "one", "two", "innermost", "range", "ValueError", "list", "pex", "MyGen", "next", "disable_gc", "Broken", "call_stack", "f", "g1", "spam", "g", "inner"], "class_names": ["TestPEP380Operation", "LunchError", "MyIt", "MyErr", "MyGen", "Broken", "MyIter"], "class_method_calls": ["self.assertIsInstance", "g1.throw", "g1.close", "self.assertEqual", "gi.throw", "inspect.stack", "g.close", "trace.append", "cm.unraisable", "output.getvalue", "self.assertIn", "self.fail", "self.assertRaises", "gi.send", "support.catch_unraisable_exception", "g.throw", "e.value", "res.append", "gi.close", "unittest.main", "g.send", "e.__context__", "g1.gi_running", "e.args", "e.__class__", "self.assertTrue", "unittest.TestCase", "g1.send", "outer_gen.send"]}, "test_zipapp.py": {"libraries": ["unittest", "io", "zipapp", "zipfile", "sys", "tempfile", "pathlib", "unittest.mock.patch", "stat", "test.support.requires_zlib"], "function_names": ["test_create_archive_with_subdirs", "test_cmdline_copy", "setUp", "test_custom_interpreter", "test_main_and_main_py", "make_archive", "test_cmdline_copy_inplace", "test_create_archive_with_filter", "test_main_only_written_once", "test_create_archive_with_compression", "test_cmdline_copy_change_main", "test_content_of_copied_archive", "test_cmdline_create", "test_default_no_shebang", "test_write_shebang_to_fileobj", "skip_dummy_dir", "test_main_written", "test_no_shebang_is_not_executable", "test_create_archive", "test_create_archive_with_pathlib", "test_create_archive_filter_exclude_dir", "skip_pyc_files", "test_no_main", "test_info_command", "test_shebang_is_executable", "test_read_shebang", "test_remove_shebang", "test_info_error", "test_read_from_pathobj", "test_main_validation", "test_pack_to_fileobj", "test_read_missing_shebang", "test_modify_shebang", "test_create_archive_default_target", "test_read_from_fileobj"], "function_calls": ["patch", "len", "str", "set"], "class_names": ["ZipAppCmdlineTest", "ZipAppTest"], "class_method_calls": ["new_target.getvalue", "tmpdir.cleanup", "target.getvalue", "sys.platform", "path.suffix", "expected_target.is_file", "z.getinfo", "self.assertEqual", "self.assertNotEqual", "io.BytesIO", "self.make_archive", "source.mkdir", "target.is_file", "cm.exception", "zipapp.main", "zipfile.ZIP_DEFLATED", "temp_archive.seek", "self.assertIn", "f.readline", "self.addCleanup", "tempfile.TemporaryDirectory", "self.assertNotIn", "io.StringIO", "source.with_suffix", "zipfile.ZipFile", "f.read", "target.open", "self.subTest", "z.read", "self.assertRaises", "unittest.skipIf", "zipapp.get_interpreter", "pathlib.Path", "target.seek", "self.tmpdir", "tmpdir.name", "mock_stdout.getvalue", "zipapp.ZipAppError", "zipapp.create_archive", "unittest.main", "target.stat", "stat.S_IEXEC", "self.assertTrue", "z.namelist", "path.parts", "unittest.TestCase", "self.assertFalse", "new_target.seek"]}, "test_zipfile.py": {"libraries": ["test", "test.support.requires_bz2", "contextlib", "posixpath", "test.support.requires_lzma", "struct", "unittest.mock", "subprocess", "string", "unittest", "io", "tempfile.TemporaryFile", "importlib.util", "zipfile", "pathlib", "test.support.captured_stdout", "os", "itertools", "email", "time", "test.support.findfile", "random.getrandbits", "test.support.unlink", "test.support.rmtree", "random.randint", "test.support.TESTFN", "test.support.temp_dir", "random.random", "test.support.temp_cwd", "sys", "test.support.requires_zlib", "test.support.script_helper"], "function_names": ["test_bug_6050", "test_open_conflicting_handles", "test_traverse_truediv", "test_unsupported_version", "test_ignores_stuff_appended_past_comments", "test_bad_open_mode", "test_empty_zipfile", "make_test_archive", "test_read_after_write", "test_sanitize_windows_name", "test_decompress_without_3rd_party_library", "test_bad_constructor_mode", "_test_extract_hackers_arcnames", "test_execute_zip64", "test_extract_hackers_arcnames_common_cases", "large_file_exception_test", "zip_test", "test_null_byte_in_filename", "__init__", "test_read_unicode_filenames", "zip_readline_read_test", "test_read_with_bad_crc", "zip_open_test", "zip_iterlines_test", "test_extract_all", "test_exclusive_create_zip_file", "test_struct_sizes", "test_read_zip64_with_exe_prepended", "test_absolute_arcnames", "test_read_zip_with_exe_prepended", "zip_read1_test", "large_file_exception_test2", "test_add_file_after_2107", "test_from_file", "__iter__", "test_parent", "test_extract_dir", "test_read1", "test_write", "test_close_after_close", "test_write_python_directory", "tearDown", "__next__", "test_iterlines", "zip_read1_10_test", "test_test_command", "test_bad_use", "test_basic", "test_writestr_extended_local_header_issue1202", "zip_readline_test", "filter", "test_unsupported_compression", "test_readline_read", "test_append_to_non_zip_file", "test_read1_10", "test_good_password", "test_from_file_fileno", "test_append_to_concatenated_zip_file", "test_readlines", "test_low_compression", "test_open_with_pathlike", "test_read0", "build_alpharep_fixture", "test_writing_errors", "test_missing_dir_parent", "test_add_file_before_1980", "test_closed_zip_raises_ValueError", "test_write_default_name", "test_writestr_dir", "test_zipfile_with_short_extra_field", "test_open_write", "test_execute_zip2", "test_implied_dirs_performance", "test_read_concatenated_zip_file", "test_close_erroneous_file", "test_joinpath", "test_large_file_exception", "_test_extract_with_target", "zip_random_open_test", "test_open_empty_file", "test_write_pathlike", "tell", "test_same_file", "test_different_file", "test_write_to_readonly", "test_extract_with_target", "test_extract_hackers_arcnames_windows_only", "test_writestr_compression", "test_extract", "test_is_zip_erroneous_file", "test_extract_hackers_arcnames_posix_only", "add_dirs", "zipfile_alpharep", "test_open_non_existent_item", "test_unicode_password", "test_writestr_permissions", "test_read", "test_subdir_is_dir", "setUp", "test_create_command", "test_write_python_package", "test_non_existent_file_raises_OSError", "test_write_after_read", "test_testzip_with_bad_crc", "test_write_pyfile", "test_bad_zip64_extra", "test_write_filtered_python_package", "check_file", "test_extract_with_target_pathlike", "test_change_comment_in_empty_archive", "test_create_non_existent_file_for_append", "test_comments", "zipfile_ondisk", "test_append_to_zip_file", "test_joinpath_constant_time", "make_zip64_file", "test_open_via_zip_info", "test_damaged_zipfile", "setUpClass", "test_close_on_exception", "test_ignores_newline_at_end", "test_too_many_files_append", "zipfilecmd_failure", "test_extract_all_with_target", "test_many_opens", "requiresWriteAccess", "huge_zipfile", "make_test_file", "test_write_dir", "assertCompiledIn", "test_per_file_compresslevel", "test_write_pyfile_bad_syntax", "test_mutability", "_test_zip_works", "test_from_file_pathlike", "test_quoted_overlap", "test_from_file_bytes", "test_write_python_directory_filtered", "test_full_overlap", "test_truncated_zipfile", "test_append", "test_write_non_pyfile", "test_list_command", "test_read_return_size", "test_no_password", "zip_test_writestr_permissions", "test_writestr_compresslevel", "test_read_after_write_unicode_filenames", "test_write_with_optimization", "test_per_file_compression", "test_repr", "zip_readlines_test", "test_write_unicode_filenames", "test_change_comment_in_nonempty_archive", "test_from_dir", "test_open", "test_extract_all_with_target_pathlike", "test_bad_compression_mode", "test_traverse_pathlike", "test_writestr", "test_read_after_close", "test_dir_parent", "test_close", "test_compresslevel_basic", "test_interleaved", "test_pathlike_construction", "test_write_after_close", "test_empty_file_raises_BadZipFile", "test_seek_tell", "flush", "test_iterdir_and_types", "test_generated_valid_zip64_extra", "test_bad_password", "zipfilecmd", "test_random_open", "getrandbytes", "write", "test_readline", "test_unicode_comment", "_test_extract_all_with_target", "test_extract_command", "test_is_zip_valid_file", "test_write_while_reading", "test_create_zipinfo_before_1980", "test_too_many_files", "get_files"], "function_calls": ["random", "getrandbits", "rmtree", "san", "wrapper", "repr", "build_alpharep_fixture", "isinstance", "super", "iter", "str", "temp_cwd", "open", "captured_stdout", "range", "BrokenFile", "randint", "TemporaryFile", "next", "zip", "unlink", "getrandbytes", "temp_dir", "len", "any", "findfile", "add_dirs", "bytes", "get_files", "map", "print"], "class_names": ["LzmaTestZip64InSmallFiles", "Tellable", "LzmaBadCrcTests", "Bzip2TestsWithSourceFile", "Bzip2TestZip64InSmallFiles", "LzmaWriterTests", "UnseekableTests", "DeflateBadCrcTests", "ZipInfoTests", "StoredTestsWithRandomBinaryFiles", "AbstractTestsWithSourceFile", "AbstractTestZip64InSmallFiles", "CommandLineTest", "StoredTestZip64InSmallFiles", "DeflateWriterTests", "ExtractTests", "StoredWriterTests", "StoredTestsWithSourceFile", "TestsWithMultipleOpens", "TestWithDirectory", "itertools", "AbstractWriterTests", "LzmaTestsWithRandomBinaryFiles", "OtherTests", "jaraco", "BrokenFile", "StoredBadCrcTests", "DeflateTestsWithSourceFile", "LzmaTestsWithSourceFile", "Counter", "Bzip2WriterTests", "Bzip2BadCrcTests", "PyZipFileTests", "TestPath", "AbstractTestsWithRandomBinaryFiles", "DeflateTestsWithRandomBinaryFiles", "TestExecutablePrependedZip", "DeflateTestZip64InSmallFiles", "DecryptionTests", "Unseekable", "Bzip2TestsWithRandomBinaryFiles", "AbstractBadCrcTests"], "class_method_calls": ["os.mkdir", "self.make_test_file", "f2.write", "sys.executable", "unittest.skipUnless", "root.is_dir", "self.assertEqual", "test.assertFalse", "self.assertNotEqual", "tf.printdir", "nine_info._compresslevel", "self.zipfile_ondisk", "info.file_size", "e.exception", "err.lower", "zopen.write", "info.compress_type", "fixedname.split", "jaraco.itertools", "self.count", "zipfile.ZIP_LZMA", "posixpath.basename", "zopen2.read", "zipdata2.append", "zipopen.read1", "zipfile.BadZipFile", "zipfp.open", "zipfp.writepy", "out.replace", "b.iterdir", "os.W_OK", "zipfp.fp", "zi.compress_type", "zopen1.read", "self.fp", "sinfo.compress_type", "os.listdir", "self.assertRaises", "time.localtime", "os.sep", "h.iterdir", "s.getvalue", "bio.getvalue", "self._filecount_limit", "self.zip_test_writestr_permissions", "os.close", "os.open", "b_info.compress_type", "i.is_file", "zinfo.filename", "self.zip_iterlines_test", "self.offset", "self._orig_iter", "alpharep.fp", "os.O_WRONLY", "zf.namelist", "zf.filename", "os.linesep", "one_info._compresslevel", "zipdata.append", "zinfo.flag_bits", "os.SEEK_END", "zipfp.infolist", "itertools.combinations", "corrupt_file.MIN_READ_SIZE", "self.assertTrue", "zopen.read", "self.zip_readline_test", "self._test_zip_works", "self.zipfile_alpharep", "entry.joinpath", "self.large_file_exception_test2", "self.assertIsInstance", "t.getvalue", "f.getvalue", "i.filename", "child.name", "email.__file__", "root.iterdir", "arcname.encode", "baz.read_text", "zipf.extractall", "os.altsep", "c.is_file", "zinfo.extra", "self.test_extract_dir", "w.write", "os.getcwd", "zipfile.ZIP_DEFLATED", "self.exe_zip64", "path.open", "zipfile.sizeCentralDir", "zipfile.LargeZipFile", "importlib.util", "d.iterdir", "a.is_file", "zipopen2.read", "self.assertNotIn", "cls.data2", "io.StringIO", "self.make_zip64_file", "zipfp.printdir", "local_zip64_fields.append", "zipfile.ZipFile", "zipopen1.read", "zipf.comment", "zf.read", "kwargs.update", "self.subTest", "zinfo.header_offset", "f.seek", "directory.splitlines", "zipfp.extractall", "zipfp.extract", "zipfile.sizeEndCentDir64Locator", "self.zip_readlines_test", "a.read_text", "fp.read", "entries.count", "self.assertIsNone", "zipfile.PyZipFile", "zinfo.external_attr", "fp._offset", "zipf.writestr", "self._limit", "self.plain2", "self.zip_readline_read_test", "zipfp.read", "b.is_dir", "zipfile.ZIP64_LIMIT", "fp.getvalue", "self.fixtures", "script_helper.assert_python_ok", "os.path", "zipf2.close", "struct.error", "os.O_CREAT", "out.rstrip", "fp.seek", "fp.MIN_READ_SIZE", "strm.write", "zi.filename", "zipfp.testzip", "root.joinpath", "w1.write", "unittest.TestCase", "self.assertFalse", "os.devnull", "alpharep.close", "stack.enter_context", "self._test_extract_hackers_arcnames", "cls.data1", "self.assertLess", "zipf.namelist", "self.compression", "zipfp.comment", "w.closed", "self.zipfilecmd_failure", "fp._readbuffer", "zf.mode", "zipfile.is_zipfile", "self.make_test_archive", "self._test_extract_all_with_target", "zinfo.file_size", "os.supports_effective_ids", "cls.data", "self.assertLessEqual", "self.huge_zipfile", "a.read_bytes", "fp.write", "zipfile.sizeEndCentDir", "txt.find", "os.utime", "f.write", "os.fsencode", "zi.is_dir", "i.file_size", "zipf.open", "self.check_file", "self.addCleanup", "a_info.compress_type", "zipf.close", "zipfp.write", "zipf.getinfo", "zf.writestr", "self._test_extract_with_target", "self.HUGE_ZIPFILE_NUM_ENTRIES", "self.zip_open_test", "zipf.testzip", "zi.header_offset", "zf.filelist", "zipfp2.fp", "central_zip64_fields.append", "zi.file_size", "self.assertWarns", "zipfile.ZIP_STORED", "self.zip2", "zipfp.namelist", "string.ascii_lowercase", "os.access", "buffer.getvalue", "a.open", "zipf.read", "self.line_gen", "unittest.main", "self.zip_test", "self.data1", "g.iterdir", "orig_zip.writestr", "alpharep.filename", "r1.read", "err.strip", "g.is_dir", "comment2.encode", "zipf.write", "io.BufferedWriter", "zipfp.writestr", "f.closed", "zipfile.ZIP_FILECOUNT_LIMIT", "self.plain", "b_info._compresslevel", "self.zip_read1_test", "fp.tell", "fn.split", "self.exe_zip", "f.close", "self.assertCompiledIn", "testfile.getvalue", "arcname.replace", "fn.endswith", "f.is_file", "fp.truncate", "zi.compress_size", "self.assertIsNotNone", "zipfile.sizeEndCentDir64", "self.zip_read1_10_test", "zipfile.ZipInfo", "os.SEEK_SET", "zipfp.filename", "time.strptime", "io.BytesIO", "zf.infolist", "zipf2.read", "self.assertRaisesRegex", "alpharep.writestr", "self.zip", "zipf2.namelist", "path_split.extend", "self.requiresWriteAccess", "self.data2", "self.assertIn", "self.fail", "zinfo.compress_size", "w2.write", "self.data", "f.read", "zipfr.comment", "zipfile.CompleteDirs", "e.is_file", "unittest.skipIf", "zinfo2.external_attr", "pathlib.Path", "os.SEEK_CUR", "zipf.filelist", "os.X_OK", "self.large_file_exception_test", "w.close", "struct.pack", "zipf.debug", "zipfile.Path", "self.zipfilecmd", "zipopen.read", "zipopen.readlines", "corrupt_file.read", "os.unlink", "mock.patch", "subprocess.check_output", "reportSIO.getvalue", "script_helper.assert_python_failure", "zipdata1.append", "dinfo.compress_type", "zipfp.getinfo", "zf.extract", "test.__file__", "contextlib.ExitStack", "info.filename", "zipopen.readline", "self.zip_random_open_test", "openobj.read", "zinfo.date_time", "zipfile.ZIP_BZIP2", "self.skipTest", "os.stat", "self.zip_with_bad_crc", "cls.line_gen", "f.fileno", "strm.read", "e.read_text", "fdata.encode", "a_info._compresslevel"]}, "test_zipfile64.py": {"libraries": ["unittest", "test.support.TESTFN", "time", "tempfile.TemporaryFile", "zipfile", "sys", "test.support", "os", "test.support.requires_zlib"], "function_names": ["zipTest", "testMoreThan64kFilesAppend", "setUp", "testMoreThan64kFiles", "testStored", "tearDown", "testDeflated"], "function_calls": ["len", "TemporaryFile", "open", "range", "print"], "class_names": ["TestsWithSourceFile", "OtherTests"], "class_method_calls": ["time.monotonic", "zipf.namelist", "self.assertEqual", "support.requires", "zipf2.read", "zipfile.ZIP_DEFLATED", "fp.write", "zipf2.namelist", "zipfile.LargeZipFile", "self.data", "self.zipTest", "zipfile.ZipFile", "os.remove", "self.assertRaises", "zipfile.ZIP_STORED", "support.unlink", "zipf.debug", "unittest.main", "zipf.writestr", "zipfp.read", "os.path", "zipfp.writestr", "f.closed", "unittest.TestCase", "self.assertFalse", "sys.__stdout__"]}, "test_zipimport.py": {"libraries": ["zipfile.ZipInfo", "struct", "unittest.mock", "test.support", "unittest", "io", "zipfile.ZIP_DEFLATED", "importlib.util", "zipimport", "zipfile.ZipFile", "os", "traceback.extract_tb", "time", "zipfile.ZIP_STORED", "inspect", "traceback.extract_stack", "zlib", "traceback.print_tb", "doctest", "importlib", "sys", "marshal", "linecache"], "function_names": ["testUncheckedHashBasedPyc", "check", "testNoFile", "testComment", "make_pyc", "setUp", "testGetSource", "testZipImporterMethods", "doDoctestSuite", "testPy", "testBeginningCruftAndComment", "test_main", "testBadArgs", "makeTree", "testFilenameTooLong", "testBadMTime", "testEmptyFile", "runDoctest", "_testBogusZipFile", "test_checked_hash_based_change_pyc", "testImporterAttr", "doTraceback", "testBytesPath", "testPyc", "assertModuleSource", "testUnencodable", "testEmptyPy", "testDoctestFile", "module_path_to_dotted_name", "testAFakeZlib", "testSubNamespacePackage", "testPackage", "testBadMagic2", "testTraceback", "tearDown", "testBoth", "testZipImporterMethodsInSubDirectory", "testGetCompiledSource", "testMixedNamespacePackage", "testBadMagic", "doDoctestFile", "testNotZipFile", "testLargestPossibleComment", "testNamespacePackage", "testDefaultOptimizationLevel", "testEmptyFilename", "testImport_WithStuff", "testSubPackage", "testGetData", "assertZipFailure", "makeZip", "doTest", "testDoctestSuite", "testFileUnreadable"], "function_calls": ["make_pyc", "memoryview", "extract_tb", "print_tb", "repr", "test_main", "call", "locals", "open", "AssertionError", "range", "extract_stack", "list", "module_path_to_dotted_name", "int", "type", "bytearray", "len", "compile", "ZipInfo", "ZipFile", "bytes"], "class_names": ["UncompressedZipImportTestCase", "ImportHooksBaseTestCase", "CompressedZipImportTestCase", "BadFileZipImportTestCase"], "class_method_calls": ["z.compression", "self.modules_before", "sys.path_hooks", "self.assertEqual", "zi.load_module", "self.doDoctestSuite", "support.create_empty_file", "doctest.testfile", "zinfo.comment", "mod.__path__", "support.TESTFN", "mod.test", "zi.find_module", "zi2.find_module", "doctest.master", "zinfo.compress_type", "self.assertRaises", "sys.meta_path", "time.localtime", "os.sep", "s.getvalue", "os.close", "support.modules_setup", "os.open", "z.find_module", "zipimport.zipimporter", "support.TESTFN_UNENCODABLE", "mod.state", "kw.get", "self.runDoctest", "mod.__file__", "z.comment", "module.do_raise", "sys.path_importer_cache", "self.assertTrue", "zi.get_data", "self.assertIsInstance", "find_mod.load_module", "support.requires_zlib", "os.makedirs", "unittest.mock", "find_mod_dotted.load_module", "zi.archive", "loader.get_source", "p2.split", "self.assertZipFailure", "doctest.DocFileTest", "importlib.util", "io.StringIO", "self.doDoctestFile", "z.writestr", "support.run_unittest", "support.modules_cleanup", "os.path", "os.O_CREAT", "self.assertModuleSource", "unittest.TestCase", "self.assertFalse", "self.meta_path", "self.compression", "zipimport._zip_directory_cache", "self.doTest", "zi2.archive", "fp.close", "zi2.is_package", "z.get_source", "fp.write", "find_mod.get_filename", "os.fsencode", "f.write", "mod.get_file", "tb.tb_frame", "find_mod.is_package", "loader.get_filename", "self.addCleanup", "zi.prefix", "sys.builtin_module_names", "packdir3.replace", "support.unlink", "self.path", "zi.get_source", "time.time", "os.chmod", "zi2.prefix", "ImportHooksBaseTestCase.setUp", "mod.__loader__", "self.doTraceback", "z.is_package", "self.assertIsNotNone", "find_mod_dotted.get_filename", "z.get_code", "linecache.clearcache", "p1.split", "sys.modules", "raise_src.strip", "zipimport.ZipImportError", "self.path_hooks", "importlib.import_module", "self.assertIn", "support.rmtree", "self.fail", "load_mod.__file__", "z.get_data", "z.load_module", "f.read", "marshal.dumps", "files.items", "inspect.getsource", "unittest.skipIf", "sys.exc_info", "importlib._bootstrap_external", "struct.pack", "zi.get_filename", "zi.is_package", "self.makeZip", "sys.path", "self.makeTree", "self.skipTest", "path.replace"]}, "test_zipimport_support.py": {"libraries": ["test.support.script_helper.spawn_python", "zip_pkg", "test.support", "test.support.script_helper.make_zip_script", "unittest", "textwrap", "zipfile", "zipimport", "test.support.script_helper.assert_python_ok", "os", "inspect", "test.sample_doctest_no_doctests", "test.sample_doctest_no_docstrings", "test.test_doctest", "test.sample_doctest", "test_zipped_doctest", "doctest", "os.path", "test.support.script_helper.kill_python", "test.support.script_helper.make_script", "sys", "linecache"], "function_names": ["tearDownModule", "setUp", "_run_object_doctest", "test_pdb_issue4201", "test_doctest_issue4197", "test_inspect_getsource_issue4223", "tearDown", "test_doctest_main_issue4197"], "function_calls": ["make_script", "make_zip_script", "assert_python_ok", "kill_python", "_run_object_doctest", "ascii", "print", "spawn_python"], "class_names": ["ZipSupportTests"], "class_method_calls": ["sample_sources.items", "test_zipped_doctest.SampleNewStyleClass", "mod.__name__", "self.meta_path", "zip_pkg.foo", "test_zipped_doctest.test_Example", "zipimport._zip_directory_cache", "test_zipped_doctest.test_DocTest", "linecache.clearcache", "sys.path_hooks", "self.assertEqual", "test_zipped_doctest.test_DocFileSuite", "sys.modules", "run_name.encode", "test.support", "runner.run", "p.stdin", "test_zipped_doctest.test_DocTestFinder", "self.path_hooks", "test_zipped_doctest.test_testsource", "test_zipped_doctest.test_DocTestSuite", "runner.failures", "self.assertIn", "src.replace", "runner.tries", "test_zipped_doctest.test_trailing_space_in_test", "zipfile.ZipFile", "os.remove", "mod_name.replace", "inspect.getsource", "obj.__qualname__", "sys.meta_path", "expected.encode", "obj.__module__", "z.writestr", "script_name.encode", "zip_file.printdir", "doctest.DocTestFinder", "test_zipped_doctest.test_debug", "self.path", "test_zipped_doctest.SampleClass", "test_zipped_doctest.test_unittest_reportflags", "test_zipped_doctest.test_DocTestParser", "unittest.main", "textwrap.dedent", "module.__name__", "test_zipped_doctest.sample_func", "doctest.DocTestRunner", "sys.path", "os.path", "test_zipped_doctest.test_testfile", "finder.find", "test_src.replace", "sys.path_importer_cache", "unittest.TestCase", "test_zipped_doctest.test_DocTestRunner"]}, "test_zlib.py": {"libraries": ["unittest", "copy", "test.support._1G", "binascii", "random", "sys", "pickle", "test.support._4G", "test.support", "test.support.bigmemtest"], "function_names": ["test_dictionary", "test_wbits", "test_overflow", "test_incomplete_stream", "test_decompimax", "test_badargs", "test_maxlenmisc", "__index__", "check_big_decompress_buffer", "genblock", "test_dictionary_streaming", "test_crc32empty", "test_compressoptions", "test_flush_large_length", "test_flushes", "test_compressincremental", "test_library_version", "test_clear_unconsumed_tail", "test_flush_with_freed_input", "test_decompress_unused_data", "test_compresscopy", "test_decompinc", "test_badcompresscopy", "test_crc32_adler32_unsigned", "test_same_as_binascii_crc32", "test_64bit_compress", "test_baddecompresscopy", "test_keywords", "test_big_compress_buffer", "choose_lines", "test_maxlen_large", "test_pair", "test_empty_flush", "test_crc32start", "check_big_compress_buffer", "test_maxlen_custom", "test_decompress_raw_with_dictionary", "test_speech128", "test_large_unused_data", "test_decompress_eof", "test_badlevel", "test_decompress_eof_incomplete_stream", "test_penguins", "test_decompressobj_badflush", "test_decompresscopy", "test_decompincflush", "test_badcompressobj", "test_large_unconsumed_tail", "test_big_decompress_buffer", "test_speech", "test_decompressmaxlen", "test_compresspickle", "test_decompresspickle", "test_decompressmaxlenflush", "test_decompress_incomplete_stream", "test_odd_flush", "test_big_buffer", "test_custom_bufsize", "test_adler32start", "test_adler32empty", "test_baddecompressobj", "test_flush_custom_length", "test_large_bufsize"], "function_calls": ["compress_func", "bytearray", "len", "map", "getattr", "str", "randint", "tuple", "bigmemtest", "int", "bytes", "print", "hasattr", "CustomInt", "func", "genblock", "range", "decompress_func"], "class_names": ["BaseCompressTestCase", "CustomInt", "CompressTestCase", "ChecksumTestCase", "VersionTestCase", "ChecksumBigBufferTestCase", "CompressObjectTestCase", "ExceptionTestCase"], "class_method_calls": ["zlib.compressobj", "zlib.decompress", "unittest.skipUnless", "zlib.decompressobj", "self.assertEqual", "zlib.compress", "dco.flush", "zlib.adler32", "d0.decompress", "random.Random", "generator.choice", "c.compress", "self.assertRaises", "d.flush", "source.split", "zlib.ZLIB_RUNTIME_VERSION", "zlib.MAX_WBITS", "v.append", "pickle.HIGHEST_PROTOCOL", "obj.compress", "data.strip", "c.copy", "bufs1.append", "dco.unconsumed_tail", "self.assertTrue", "do.decompress", "self.assertIsInstance", "zlib.Z_SYNC_FLUSH", "c1.flush", "support.import_module", "d.copy", "zlib.Z_BEST_COMPRESSION", "binascii.crc32", "obj.flush", "self.test_decompinc", "zlib.crc32", "c.flush", "dco.decompress", "do.unconsumed_tail", "copy.deepcopy", "zlib.DEF_BUF_SIZE", "random.shuffle", "pickle.PicklingError", "zlib.error", "sys.maxsize", "unittest.TestCase", "self.assertFalse", "dco.eof", "copy.copy", "gen.seed", "co.compress", "bufs0.append", "dco.unused_data", "generator.seed", "c0.compress", "generator.randint", "zlib.DEFLATED", "random.getrandbits", "self.assertGreater", "unittest.main", "d1.decompress", "h.split", "zlib.Z_FILTERED", "c1.compress", "random.WichmannHill", "self.check_big_decompress_buffer", "bufs.append", "self.test_decompressmaxlen", "sync_opt.append", "self.assertRaisesRegex", "co.flush", "self.check_big_compress_buffer", "zlib.ZLIB_VERSION", "do.unused_data", "support.cpython_only", "pickle.dumps", "do.flush", "c0.flush", "d.decompress"]}, "testcodec.py": {"libraries": ["codecs"], "function_names": ["decode", "encode", "getregentry"], "function_calls": ["Codec", "range"], "class_names": ["StreamReader", "Codec", "StreamWriter"], "class_method_calls": ["codecs.charmap_encode", "codecs.make_identity_dict", "codecs.StreamReader", "decoding_map.items", "codecs.StreamWriter", "decoding_map.update", "codecs.Codec", "codecs.charmap_decode"]}, "tf_inherit_check.py": {"libraries": ["sys", "os", "test.support.SuppressCrashReport"], "function_names": [], "function_calls": ["SuppressCrashReport", "int"], "class_names": [], "class_method_calls": ["sys.exit", "sys.argv", "sys.stderr", "os.write"]}, "threaded_import_hangers.py": {"libraries": ["tempfile", "threading", "os.path"], "function_names": ["__init__", "run"], "function_calls": ["Worker"], "class_names": ["Worker"], "class_method_calls": ["self.function", "t.start", "os.path", "tempfile.TemporaryFile", "t.join", "self.args", "errors.append", "t.is_alive", "threading.Thread"]}, "time_hashlib.py": {"libraries": ["sys", "_hashlib", "hashlib", "time"], "function_names": ["test_zero", "creatorFunc", "test_scaled_msg", "test_create"], "function_calls": ["len", "getattr", "localCF", "test_zero", "test_create", "test_scaled_msg", "hasattr", "print", "creatorFunc", "range", "exec", "RuntimeError"], "class_names": [], "class_method_calls": ["time.perf_counter", "sys.argv"]}, "testmod.py": {"libraries": [], "function_names": ["func", "func2"], "function_calls": [], "class_names": [], "class_method_calls": []}, "win_console_handler.py": {"libraries": ["mmap", "ctypes.wintypes", "signal", "ctypes.WINFUNCTYPE", "sys", "ctypes"], "function_names": ["_ctrl_handler"], "function_calls": ["WINFUNCTYPE", "exit", "SetConsoleCtrlHandler", "HandlerRoutine", "print"], "class_names": [], "class_method_calls": ["SetConsoleCtrlHandler.argtypes", "signal.CTRL_C_EVENT", "wintypes.BOOL", "signal.CTRL_BREAK_EVENT", "sys.argv", "SetConsoleCtrlHandler.restype", "mmap.mmap", "ctypes.windll", "wintypes.DWORD"]}, "xmltests.py": {"libraries": ["sys", "test.support"], "function_names": ["runtest"], "function_calls": ["runtest", "__import__", "hasattr"], "class_names": [], "class_method_calls": ["test.support", "sys.modules", "module.test_main"]}, "testdata_module_inside_zip.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "textwrap.py": {"libraries": ["re"], "function_names": ["shorten", "fill", "_split", "dedent", "_wrap_chunks", "indent", "__init__", "_munge_whitespace", "_fix_sentence_endings", "_split_chunks", "_handle_long_word", "prefixed_lines", "predicate", "wrap"], "function_calls": ["ValueError", "len", "dedent", "patsearch", "TextWrapper", "zip", "sum", "enumerate", "ord", "map", "prefixed_lines", "predicate", "print"], "class_names": ["TextWrapper"], "class_method_calls": ["self.wordsep_re", "self._split", "w.fill", "chunks.reverse", "line.strip", "self.initial_indent", "margin.startswith", "re.escape", "chunks.pop", "self.wrap", "self.expand_tabs", "self.fix_sentence_endings", "self.replace_whitespace", "self.width", "self.placeholder", "text.strip", "self.break_on_hyphens", "_leading_whitespace_re.findall", "self.max_lines", "text.split", "self.drop_whitespace", "_whitespace_only_re.sub", "self.subsequent_indent", "self._handle_long_word", "self.break_long_words", "lines.append", "re.sub", "self.unicode_whitespace_trans", "self.sentence_end_re", "self._split_chunks", "text.splitlines", "indent.startswith", "self.wordsep_simple_re", "self._wrap_chunks", "re.MULTILINE", "self.tabsize", "re.VERBOSE", "re.compile", "text.expandtabs", "reversed_chunks.pop", "text.translate", "self._fix_sentence_endings", "line.startswith", "self._munge_whitespace", "cur_line.append", "w.wrap"]}, "this.py": {"libraries": [], "function_names": [], "function_calls": ["chr", "range", "print"], "class_names": [], "class_method_calls": ["d.get"]}, "threading.py": {"libraries": ["_thread", "time.monotonic", "_thread._ExceptHookArgs", "traceback.print_exception", "collections.deque", "_collections.deque", "_weakrefset.WeakSet", "_thread._excepthook", "sys", "warnings", "itertools.islice", "itertools.count", "_thread._local", "os", "_thread.stack_size", "_threading_local.local", "collections.namedtuple"], "function_names": ["_break", "getName", "isDaemon", "_is_owned", "current_thread", "settrace", "_enumerate", "_shutdown", "__exit__", "_after_fork", "_enter", "_stop", "invoke_excepthook", "notify_all", "active_count", "acquire", "_release_save", "__repr__", "release", "ident", "_make_invoke_excepthook", "_reset_internal_locks", "__enter__", "clear", "_bootstrap", "_delete", "join", "broken", "__init__", "isAlive", "cancel", "is_set", "excepthook", "wait_for", "_exit", "abort", "name", "setDaemon", "notify", "_set_native_id", "setName", "native_id", "is_alive", "_set_ident", "run", "_acquire_restore", "set", "main_thread", "start", "setprofile", "_wait_for_tstate_lock", "enumerate", "_set_tstate_lock", "RLock", "ExceptHookArgs", "daemon", "parties", "_release", "_newname", "_bootstrap_inner", "reset", "wait", "n_waiting", "_wait"], "function_calls": ["current_thread", "_MainThread", "_PyRLock", "_enumerate", "local_print", "sys_excepthook", "hook", "_count", "Lock", "id", "_deque", "sys_exc_info", "_CRLock", "RuntimeError", "_ExceptHookArgs", "_start_new_thread", "_make_invoke_excepthook", "str", "Event", "_time", "Condition", "_print_exception", "_islice", "ValueError", "list", "_DummyThread", "hex", "set", "_set_sentinel", "namedtuple", "RLock", "hasattr", "len", "ExceptHookArgs", "get_native_id", "_counter", "get_ident", "max", "_allocate_lock", "_newname", "WeakSet", "predicate", "print"], "class_names": ["_DummyThread", "BoundedSemaphore", "_MainThread", "Timer", "Event", "Semaphore", "BrokenBarrierError", "Condition", "Thread", "Barrier", "_RLock"], "class_method_calls": ["self.notify", "self._count", "self._set_tstate_lock", "thread._stderr", "_thread.error", "_os.register_at_fork", "_shutdown_locks.discard", "self.release", "_sys.stderr", "self._native_id", "_thread.start_new_thread", "_dangling.add", "_thread.get_ident", "_sys.excepthook", "self._owner", "threads.update", "self._waiters", "Thread.__init__", "exc.__suppress_context__", "self._acquire_restore", "_limbo.values", "_active.clear", "self.run", "args.thread", "self._timeout", "self._invoke_excepthook", "_shutdown_locks.clear", "self.function", "self._tstate_lock", "local_sys.stderr", "args.exc_type", "thread._stop", "self._state", "self.kwargs", "warnings.warn", "_thread.RLock", "_active.update", "_main_thread._is_stopped", "local_sys.excepthook", "lock.acquire", "self._ident", "self._stderr", "self._started", "self.is_alive", "self._kwargs", "daemon.setter", "self._initialized", "_main_thread._tstate_lock", "self._exit", "_sys.exc_info", "tlock.release", "self._release_save", "_sys.setprofile", "self.finished", "self.acquire", "self._block", "lock._release_save", "lock._acquire_restore", "tlock.locked", "self._enter", "waiter.release", "self._name", "self.args", "self._daemonic", "_thread.TIMEOUT_MAX", "_shutdown_locks.add", "self._initial_value", "lock.release", "self._break", "self._stop", "lock.locked", "self._lock", "_thread.allocate_lock", "self.wait", "self._target", "self._bootstrap", "_thread.get_native_id", "self._bootstrap_inner", "_sys.settrace", "self._release", "thread._reset_internal_locks", "self._set_ident", "stderr.flush", "all_waiters.remove", "_active.values", "self._wait_for_tstate_lock", "_thread._set_sentinel", "self._is_stopped", "self._set_native_id", "self.name", "self._is_owned", "name.setter", "args.exc_value", "self._wait", "self._action", "_main_thread._stop", "self._parties", "thread._ident", "self._flag", "Semaphore.__init__", "self._value", "lock._is_owned", "self.interval", "_limbo.clear", "self.daemon", "args.exc_traceback", "self._args", "self._cond", "self.__class__", "__all__.append", "waiter.acquire"]}, "timeit.py": {"libraries": ["time", "getopt", "gc", "linecache", "sys", "warnings", "os", "itertools", "traceback"], "function_names": ["autorange", "format_time", "print_exc", "__init__", "repeat", "reindent", "main", "callback", "timeit"], "function_calls": ["min", "isinstance", "_wrap_timer", "Timer", "callback", "range", "ValueError", "format_time", "int", "_globals", "len", "compile", "max", "reindent", "main", "callable", "map", "exec", "print"], "class_names": ["Timer"], "class_method_calls": ["linecache.cache", "traceback.print_exc", "t.repeat", "gc.enable", "self.timer", "self.src", "warnings.warn_explicit", "sys.exit", "template.format", "r.append", "src.replace", "getopt.getopt", "setup.append", "t.print_exc", "t.autorange", "self.timeit", "time.process_time", "gc.isenabled", "os.curdir", "scales.sort", "getopt.error", "time.perf_counter", "itertools.repeat", "self.inner", "units.items", "sys.path", "sys.stderr", "gc.disable", "msg.format", "sys.argv"]}, "colorchooser.py": {"libraries": ["tkinter.commondialog.Dialog"], "function_names": ["_fixoptions", "askcolor", "_fixresult"], "function_calls": ["isinstance", "Chooser", "str", "askcolor", "print"], "class_names": ["Chooser"], "class_method_calls": ["self.options", "widget.winfo_rgb", "options.copy"]}, "commondialog.py": {"libraries": ["tkinter.*"], "function_names": ["__init__", "_fixoptions", "show", "_fixresult"], "function_calls": ["Frame"], "class_names": ["Dialog"], "class_method_calls": ["w.tk", "w.destroy", "options.get", "self._fixresult", "options.items", "self.command", "self.options", "self.master", "w._options", "self._fixoptions"]}, "dialog.py": {"libraries": ["tkinter._cnfmerge", "tkinter.*"], "function_names": ["__init__", "destroy", "_test"], "function_calls": ["Dialog", "Button", "_cnfmerge", "print"], "class_names": ["Dialog"], "class_method_calls": ["Widget._setup", "Widget.destroy", "self.tk", "t.mainloop", "t.quit", "d.num", "self.widgetName", "self.num", "self._w"]}, "dnd.py": {"libraries": ["tkinter"], "function_names": ["dnd_motion", "test", "dnd_accept", "dnd_enter", "dnd_leave", "__init__", "putback", "cancel", "where", "finish", "on_motion", "on_release", "__del__", "detach", "press", "dnd_start", "attach", "move", "dnd_end", "dnd_commit"], "function_calls": ["test", "dnd_start", "Icon", "Tester", "DndHandler", "attr"], "class_names": ["Icon", "Tester", "DndHandler"], "class_method_calls": ["self.on_motion", "old_target.dnd_leave", "t3.canvas", "tkinter.Canvas", "old_target.dnd_motion", "self.initial_button", "canvas.create_window", "self.press", "root.__dnd", "self.save_cursor", "event.x_root", "label.bind", "root.mainloop", "self.detach", "self.id", "self.source", "self.initial_widget", "tkinter.Toplevel", "self.name", "self.root", "source.id", "self.dnd_leave", "source.attach", "event.x", "label.destroy", "self.x_off", "tkinter.Button", "target.dnd_commit", "tkinter.Tk", "self.label", "self.release_pattern", "self.finish", "canvas.winfo_rootx", "target.dnd_leave", "source.canvas", "i3.attach", "self.dnd_motion", "event.y", "target_widget.master", "t1.canvas", "h.root", "self.target", "self.canvas", "self.top", "widget.bind", "self.where", "canvas.winfo_rooty", "source.dnd_end", "t3.top", "event.y_root", "root.quit", "new_target.dnd_enter", "t2.canvas", "self.on_release", "self.x_orig", "source.where", "self.y_off", "self.y_orig", "t2.top", "i1.attach", "tkinter.Label", "root.geometry", "canvas.delete", "event.num", "self.dnd_accept", "self.dndid", "event.widget", "t1.top", "target_widget.dnd_accept", "i2.attach"]}, "filedialog.py": {"libraries": ["tkinter.commondialog", "tkinter.dialog.Dialog", "tkinter.simpledialog._setup_dialog", "sys", "fnmatch", "locale", "os", "tkinter.*"], "function_names": ["test", "askopenfilenames", "asksaveasfile", "get_selection", "set_selection", "quit", "askopenfilename", "get_filter", "asksaveasfilename", "ok_command", "__init__", "dirs_select_event", "_fixoptions", "askopenfiles", "files_double_event", "go", "cancel_command", "filter_command", "files_select_event", "set_filter", "_fixresult", "dirs_double_event", "askopenfile", "ok_event", "askdirectory"], "function_calls": ["SaveFileDialog", "test", "getattr", "askopenfilenames", "Toplevel", "askopenfilename", "isinstance", "asksaveasfilename", "Open", "Frame", "tuple", "Scrollbar", "open", "Dialog", "Entry", "_setup_dialog", "Button", "Directory", "Tk", "LoadFileDialog", "Listbox", "SaveAs", "print"], "class_names": ["SaveFileDialog", "LoadFileDialog", "FileDialog", "SaveAs", "_Dialog", "Open", "Directory"], "class_method_calls": ["self.cancel_button", "ofiles.append", "self.how", "self._fixresult", "subdirs.append", "locale.LC_ALL", "self.filesbar", "self.files_select_event", "locale.CODESET", "root.withdraw", "self.set_filter", "self.dirsbar", "self.ok_button", "fp.close", "os.getcwd", "self.files", "fd.go", "self.quit", "self.title", "commondialog.Dialog", "self.filter", "os.pardir", "result.string", "self.midframe", "locale.setlocale", "self.filter_command", "self.options", "self.get_filter", "locale.nl_langinfo", "self.cancel_command", "self.dirs", "sys.exc_info", "os.sep", "self.ok_command", "self.dirs_select_event", "widget.tk", "self.top", "self.filter_button", "os.curdir", "self.directory", "openfilename.encode", "self.botframe", "self.master", "_Dialog._fixresult", "self.selection", "self.ok_event", "self.filename", "names.sort", "os.path", "fnmatch.fnmatch", "self.set_selection", "matchingfiles.append", "self.dirs_double_event", "os.listdir", "d.num", "saveasfilename.encode", "self.get_selection", "self.files_double_event"]}, "font.py": {"libraries": ["tkinter", "itertools"], "function_names": ["_get", "actual", "_mkdict", "__str__", "__del__", "copy", "nametofont", "measure", "cget", "names", "families", "_set", "__init__", "config", "metrics", "__eq__", "__setitem__", "__getitem__"], "function_calls": ["isinstance", "len", "getattr", "str", "Font", "tuple", "names", "next", "range", "print"], "class_names": ["Font"], "class_method_calls": ["self.actual", "self._mkdict", "f.measure", "kw.items", "f.config", "options.append", "w.pack", "tkinter._get_default_root", "root.destroy", "self.configure", "self.name", "tk.splitlist", "f.actual", "other.name", "self.counter", "itertools.count", "tkinter.Button", "tkinter.Tk", "w.config", "tkinter._tkinter", "root.tk", "kw.pop", "f.cget", "fb.config", "self._call", "f.metrics", "self._tk", "tkinter.mainloop", "self._set", "tkinter.Label", "self.cget", "other._tk", "self._get", "self.delete_font", "tk.call", "self._split"]}, "messagebox.py": {"libraries": ["tkinter.commondialog.Dialog"], "function_names": ["askyesno", "askquestion", "askretrycancel", "askyesnocancel", "showinfo", "showerror", "showwarning", "askokcancel", "_show"], "function_calls": ["isinstance", "askyesno", "str", "askquestion", "askretrycancel", "askyesnocancel", "Message", "showinfo", "showerror", "showwarning", "askokcancel", "_show", "print"], "class_names": ["Message"], "class_method_calls": []}, "scrolledtext.py": {"libraries": ["tkinter.constants.END", "tkinter.Pack", "tkinter.Text", "tkinter.constants.LEFT", "tkinter.Place", "tkinter.constants.BOTH", "tkinter.constants.RIGHT", "tkinter.Frame", "tkinter.constants.Y", "tkinter.Grid", "tkinter.Scrollbar"], "function_names": ["__init__", "__str__", "example"], "function_calls": ["getattr", "str", "example", "Frame", "Scrollbar", "ScrolledText", "vars", "setattr"], "class_names": ["ScrolledText"], "class_method_calls": ["self.frame", "self.pack", "kw.update", "self.vbar", "stext.pack", "Text.__init__", "stext.mainloop", "stext.focus_set", "stext.insert", "methods.difference", "self.yview"]}, "simpledialog.py": {"libraries": ["tkinter._get_default_root", "tkinter.*", "tkinter.messagebox"], "function_names": ["test", "askstring", "apply", "ok", "askfloat", "buttonbox", "doit", "__init__", "cancel", "body", "getresult", "go", "validate", "_setup_dialog", "_set_transient", "return_event", "done", "askinteger", "wm_delete_window", "destroy"], "function_calls": ["test", "SimpleDialog", "_QueryInteger", "_get_default_root", "Toplevel", "askstring", "Label", "askfloat", "Frame", "_QueryString", "range", "Entry", "_setup_dialog", "Button", "Tk", "len", "askinteger", "Message", "_QueryFloat", "print"], "class_names": ["SimpleDialog", "_QueryInteger", "Dialog", "_QueryString", "_QueryFloat", "_QueryDialog"], "class_method_calls": ["self.buttonbox", "self.destroy", "parent.winfo_viewable", "self.protocol", "self.wm_delete_window", "self.initial_focus", "d.result", "w.tk", "master.winfo_rootx", "t.quit", "self.entry", "Toplevel.__init__", "self._set_transient", "self.getint", "w.grid", "widget.update_idletasks", "widget.winfo_reqwidth", "widget.geometry", "self.getdouble", "self.done", "self.withdraw", "self.maxvalue", "self.apply", "self.update_idletasks", "master.winfo_rooty", "widget.withdraw", "self.frame", "self.minvalue", "self.root", "t.mainloop", "parent.winfo_rootx", "self.num", "master.winfo_screenheight", "widget.deiconify", "self.body", "self.bind", "self.initialvalue", "entry.configure", "self.geometry", "self.__show", "self.transient", "self.result", "Dialog.destroy", "self.prompt", "widget.transient", "w._windowingsystem", "widget.winfo_reqheight", "self.title", "master.winfo_height", "self.deiconify", "messagebox.showwarning", "Dialog.__init__", "self.validate", "self.parent", "Toplevel.destroy", "b.config", "parent.winfo_rooty", "self.wait_visibility", "box.pack", "self.getresult", "body.pack", "d.go", "b.pack", "w.pack", "self.errormessage", "_QueryDialog.__init__", "self.return_event", "t.pack", "self.cancel", "self.wait_window", "self.message", "master.winfo_ismapped", "q.pack", "_QueryDialog.body", "master.winfo_width", "self.grab_set", "master.winfo_screenwidth", "self.ok", "w.wm_attributes", "self.default"]}, "runtktests.py": {"libraries": ["test.support", "os", "importlib"], "function_names": ["get_tests", "is_package", "get_tests_modules"], "function_calls": ["list", "len", "get_tests", "getattr", "filter", "is_package", "get_tests_modules"], "class_names": [], "class_method_calls": ["os.walk", "os.path", "os.sep", "x.endswith", "importlib.import_module", "os.listdir", "attrs.append", "x.startswith", "dirnames.remove", "test.support"]}, "test_colorchooser.py": {"libraries": ["unittest", "test.support.swap_attr", "tkinter.test.support.AbstractTkTest", "tkinter", "test.support.requires", "tkinter.colorchooser", "test.support.run_unittest"], "function_names": ["setUpClass", "test_fixoptions", "test_fixresult"], "function_calls": ["requires", "run_unittest"], "class_names": ["ChooserTest"], "class_method_calls": ["cc._fixresult", "cls.cc", "AbstractTkTest.setUpClass", "self.root", "cc.options", "self.assertEqual", "cc._fixoptions", "unittest.TestCase", "self.cc", "colorchooser.Chooser"]}, "test_font.py": {"libraries": ["unittest", "tkinter.test.support.AbstractTkTest", "tkinter", "tkinter.test.support.AbstractDefaultRootTest", "tkinter.font", "test.support.requires", "test.support.gc_collect", "test.support.run_unittest"], "function_names": ["test_actual", "test_configure", "test_equality", "setUpClass", "test_metrics", "test_names", "test_name", "test_families", "test_measure", "test_unicode_family"], "function_calls": ["str", "set", "gc_collect", "run_unittest", "requires"], "class_names": ["FontTest", "DefaultRootTest"], "class_method_calls": ["self.assertIsInstance", "self.wantobjects", "self.assertEqual", "self.assertNotEqual", "font.names", "self.assertGreaterEqual", "root.destroy", "font.Font", "self.font", "self.assertIn", "font.families", "self.root", "self.addCleanup", "cls.root", "tkinter.NoDefaultRoot", "root2.destroy", "tkinter.Tk", "font1.copy", "cls.font", "self.assertRaises", "f.cget", "AbstractTkTest.setUpClass", "tkinter.TclError", "self.assertIsNot", "self.assertTrue", "unittest.TestCase"]}, "test_geometry_managers.py": {"libraries": ["unittest", "re", "tkinter", "test.support.requires", "tkinter.test.widget_tests.AbstractWidgetTest", "tkinter.TclError", "tkinter.test.support.tcl_version", "tkinter.test.support.requires_tcl", "tkinter.test.support.pixels_conv"], "function_names": ["test_pack_configure_anchor", "test_place_configure_anchor", "test_grid_columnconfigure", "check", "test_place_configure_x", "test_pack_configure_in", "test_pack_slaves", "test_place_configure_relwidth", "test_pack_configure_pady_ipady_fill", "test_grid_columnconfigure_weight", "test_grid_rowconfigure", "test_grid_configure_padx", "test_grid_rowconfigure_weight", "test_grid_info", "test_grid_bbox", "test_grid_location", "test_grid_slaves", "test_place_configure_relheight", "test_pack_propagate", "test_pack_configure_padx_ipadx_fill", "test_place_configure_rely", "test_grid_configure_columnspan", "test_grid_remove", "test_grid_configure_rownspan", "test_grid_rowconfigure_uniform", "test_pack_configure_before", "test_grid_columnconfigure_pad", "test_grid_forget", "test_grid_configure_in", "test_grid_configure_sticky", "test_place_configure_relx", "test_place_configure_y", "test_pack_configure_after", "test_place_slaves", "test_pack_forget", "test_grid_propagate", "create2", "tearDown", "test_place_configure_height", "test_place_info", "test_place_forget", "test_grid_configure", "test_grid_configure_pady", "test_grid_configure_ipadx", "test_grid_anchor", "test_pack_info", "test_pack_configure_side", "test_pack_configure_expand", "test_grid_rowconfigure_minsize", "test_grid_size", "test_grid_configure_column", "test_place_configure_width", "test_place_configure_bordermode", "test_grid_columnconfigure_uniform", "test_grid_configure_ipady", "test_place_configure_in", "test_grid_columnconfigure_minsize", "test_grid_configure_row", "test_grid_rowconfigure_pad"], "function_calls": ["check", "pixels_conv", "super", "str", "requires", "round", "range", "requires_tcl"], "class_names": ["GridTest", "PackTest", "PlaceTest"], "class_method_calls": ["pack.pack_propagate", "self.assertIsInstance", "foo.place_configure", "pack.wm_minsize", "pack.configure", "re.escape", "self.assertEqual", "d.grid_configure", "f2.winfo_x", "foo.winfo_ismapped", "t.grid_location", "a.pack_configure", "f2.place_configure", "pack.wm_geometry", "f.grid_configure", "self.assertRaisesRegex", "tkinter.Toplevel", "f2.place_info", "f.grid_info", "f2.winfo_manager", "self.root", "pack.pack_slaves", "self._str", "g.grid_configure", "pack.winfo_reqheight", "foo.place_slaves", "b.grid_configure", "foo.place_forget", "tkinter.Button", "c.pack_slaves", "b.pack_configure", "b.pack_info", "tkinter.Frame", "t.grid_bbox", "t.wm_geometry", "f.winfo_width", "a.pack_info", "self.assertRaises", "f.grid_propagate", "b.grid_remove", "b.grid_forget", "self.create2", "c.winfo_geometry", "f2.winfo_width", "f.winfo_height", "b.winfo_geometry", "tkinter.Scale", "bar.place_configure", "c.pack_configure", "f.grid_location", "a.grid_configure", "c.grid_forget", "pack.winfo_pixels", "unittest.main", "f2.grid_configure", "f2.winfo_height", "f1.grid_configure", "d.winfo_geometry", "d.pack_configure", "tkinter.Label", "f.place_info", "a.pack_forget", "b.grid_info", "c.grid_remove", "a.winfo_geometry", "d.pack_forget", "self.scaling", "f.place_configure", "f2.winfo_y", "unittest.TestCase", "self.assertFalse", "c.grid_configure", "b.pack_forget", "pack.winfo_reqwidth"]}, "test_images.py": {"libraries": ["unittest", "tkinter.test.support.AbstractTkTest", "tkinter", "tkinter.test.support.AbstractDefaultRootTest", "tkinter.test.support.requires_tcl", "test.support"], "function_names": ["test_configure_palette", "assertEqualStrList", "test_create_from_gif_data", "test_configure_gamma", "test_get", "test_configure_foreground", "test_configure_background", "test_configure_file", "test_create_from_pgm_data", "test_put", "test_configure_width_height", "create", "check_create_from_file", "test_configure_format", "test_blank", "test_configure_data", "test_create_from_data", "setUpClass", "test_image_names", "test_image_create_bitmap", "test_image_types", "test_write", "test_create_from_png_file", "check_create_from_data", "test_create_from_ppm_file", "test_copy", "test_create_from_file", "test_create_from_gif_file", "test_transparency", "test_create_from_ppm_data", "test_image_create_photo", "test_create_from_png_data", "test_subsample", "colorlist", "test_create_from_pgm_file", "test_zoom"], "function_calls": ["open", "str", "requires_tcl"], "class_names": ["PhotoImageTest", "BitmapImageTest", "DefaultRootTest", "MiscTest"], "class_method_calls": ["self.assertIsInstance", "self.assertEqualStrList", "tkinter.BitmapImage", "image2.width", "cls.testfile", "tkinter.TkVersion", "self.wantobjects", "image2.get", "self.assertEqual", "tkinter._join", "image3.type", "support.requires", "self.colorlist", "image3.get", "root.destroy", "image.width", "self.create", "support.TESTFN", "self.assertIn", "image.blank", "self.root", "self.addCleanup", "data.decode", "self.assertNotIn", "image.name", "image.configure", "tkinter.NoDefaultRoot", "image.subsample", "tkinter.Tk", "image.get", "self.check_create_from_file", "f.read", "image.zoom", "self.assertRaises", "image.type", "support.findfile", "AbstractTkTest.setUpClass", "image2.height", "support.unlink", "image3.height", "support.run_unittest", "self.testfile", "tkinter.TclError", "image.write", "tkinter.image_names", "image.height", "image2.type", "image.put", "tkinter.PhotoImage", "self.check_create_from_data", "image.transparency_get", "tkinter.image_types", "image.copy", "image.transparency_set", "unittest.TestCase", "image3.width"]}, "test_loadtk.py": {"libraries": ["unittest", "tkinter.Tcl", "tkinter.TclError", "sys", "test.support", "os"], "function_names": ["testLoadTkFailure", "testLoadTk"], "function_calls": ["Tcl"], "class_names": ["TkLoadTest"], "class_method_calls": ["os.popen", "unittest.skipIf", "tcl.winfo_geometry", "sys.platform", "tcl.loadtk", "test_support.EnvironmentVarGuard", "os.environ", "pipe.read", "self.assertEqual", "test_support.requires", "unittest.TestCase", "test_support.run_unittest", "tcl.destroy", "self.assertRaises"]}, "test_misc.py": {"libraries": ["unittest", "tkinter.test.support.AbstractTkTest", "tkinter", "tkinter.test.support.AbstractDefaultRootTest", "test.support"], "function_names": ["test_getboolean", "test_winfo_rgb", "test_default_root", "test_tk_setPalette", "test_generated_names", "test_mainloop", "test_clipboard", "test_clipboard_astral", "test_event_repr_defaults", "test_after", "callback", "test_repr", "test_after_idle", "test_after_cancel", "test_event_repr", "test_no_default_root"], "function_calls": ["str", "rgb", "repr", "ord", "hasattr"], "class_names": ["DefaultRootTest", "MiscTest"], "class_method_calls": ["e.keysym", "e.y", "tkinter.EventType", "self.assertEqual", "support.requires", "e.keysym_num", "e.num", "tkinter.Toplevel", "e.delta", "self.assertRaisesRegex", "self.assertIs", "e.x_root", "root.destroy", "e.type", "root.after", "self.assertIn", "root.update", "self.root", "root.clipboard_get", "name.isidentifier", "root.after_idle", "tkinter.Button", "tkinter._default_root", "tkinter.getboolean", "e.height", "tkinter.Frame", "root.update_idletasks", "tkinter.Tk", "root.after_cancel", "root2.destroy", "tkinter.NoDefaultRoot", "self.assertRaises", "root.clipboard_clear", "root.tk", "tkinter._support_default_root", "e.x", "root.clipboard_append", "support.run_unittest", "tkinter.TclError", "root.winfo_rgb", "e.serial", "e.char", "e.width", "log.append", "tkinter.mainloop", "root.quit", "e.time", "self.assertIsNone", "e.focus", "e.state", "e.send_event", "tkinter.Event", "e.widget", "e.y_root", "root3.destroy", "self.assertTrue", "unittest.TestCase", "e.keycode", "self.assertFalse", "root.tk_setPalette"]}, "test_simpledialog.py": {"libraries": ["unittest", "test.support.swap_attr", "tkinter", "tkinter.test.support.AbstractDefaultRootTest", "test.support.requires", "tkinter.simpledialog.askinteger", "tkinter.simpledialog.Dialog", "test.support.run_unittest"], "function_names": ["test_askinteger"], "function_calls": ["requires", "askinteger", "swap_attr", "run_unittest"], "class_names": ["DefaultRootTest"], "class_method_calls": ["w.destroy", "tkinter.NoDefaultRoot", "unittest.TestCase", "tkinter.Tk", "root.destroy", "self.assertRaises"]}, "test_variables.py": {"libraries": ["unittest", "tkinter.Variable", "tkinter", "gc", "tkinter.test.support.AbstractDefaultRootTest", "tkinter.Tcl", "tkinter.TclError", "tkinter.IntVar", "tkinter.BooleanVar", "test.support.ALWAYS_EQ", "tkinter.DoubleVar", "test.support.run_unittest", "tkinter.StringVar"], "function_names": ["test_initialize", "test_equality", "test_get", "setUp", "test_variable", "write_tracer", "test_default", "test_set", "test_invalid_value_domain", "test_invalid_value", "test_name_and_value", "info_exists", "test_null_in_name", "set", "test___del__", "test_dont_unset_not_existing", "tearDown", "test_trace_old", "test_get_null", "test_trace", "test_invalid_name", "test_get_from_int", "read_tracer"], "function_calls": ["IntVar", "object", "BooleanVar", "sorted", "super", "str", "Variable", "DoubleVar", "type", "Var", "run_unittest", "StringVar", "V", "Tcl"], "class_names": ["TestIntVar", "TestDoubleVar", "TestBooleanVar", "TestBase", "TestStringVar", "DefaultRootTest", "TestVariable", "Var"], "class_method_calls": ["self.assertAlmostEqual", "self.assertEqual", "self.assertNotEqual", "v.side_effect", "v.get", "root.destroy", "self.assertIs", "trace.append", "self.root", "self.addCleanup", "v.trace_add", "v.trace_remove", "v.set", "tkinter.NoDefaultRoot", "root2.destroy", "tkinter.Tk", "v.trace_variable", "v.trace_vdelete", "self.assertRaises", "self.side_effect", "self.assertRegex", "v.trace_vinfo", "self.assertTrue", "v.trace_info", "gc.collect", "unittest.TestCase", "self.assertFalse", "self.info_exists"]}, "test_widgets.py": {"libraries": ["tkinter.test.support.simulate_mouse_click", "test.support.requires", "tkinter.test.support.tcl_version", "tkinter.test.widget_tests.add_standard_options", "unittest", "tkinter.test.widget_tests.StandardOptionsTests", "tkinter.test.support.AbstractTkTest", "tkinter.test.test_ttk.test_functions.MockTclObj", "tkinter.test.support.AbstractDefaultRootTest", "tkinter.test.widget_tests.setUpModule", "tkinter.test.widget_tests.AbstractWidgetTest", "tkinter.TclError", "tkinter.test.widget_tests.PixelSizeTests", "tkinter.test.widget_tests.noconv", "tkinter.test.widget_tests.IntegerSizeTests", "tkinter.test.support.get_tk_patchlevel", "tkinter", "sys", "tkinter.ttk"], "function_names": ["test_configure_invoke", "test_insert", "test_index", "test_configure_values", "test_configure_labelwidget", "test_forget", "test_configure_height", "test_configure_class", "test_heading", "test_configure_style", "test_configure_value", "test_custom_event", "test_detach_reattach", "test_insert_item", "_click_increment_arrow", "validate", "test_configure_padding", "test_configure_phase", "test_configure_wrap", "test_tag_bind", "test_add_and_hidden", "test_get", "test_configure_font", "test_delete", "test_configure_maximum", "test_configure_mode", "test_exists", "test_set", "test_validation_options", "test_configure_tabs", "test_configure_state", "test_widget_state", "test_configure_show", "_click_decrement_arrow", "test_invoke", "test_traversal", "test_configure_width", "test_sashpos", "test_configure_selectmode", "test_configure_validate", "test_add", "test_configure_displaycolumns", "test_select", "test_configure_menu", "simulate_heading_click", "setUp", "cb_test", "test_configure_columns", "test_configure_postcommand", "test_cb", "test_virtual_event", "test_selection", "checkImageParam", "test_configure_orient", "test_frame", "create", "test_configure_validatecommand", "test_tag_has", "test_configure_format", "test_configure_command", "test_direction", "test_heading_callback", "check_get_current", "test_bbox", "test_configure_offvalue", "test_configure_from", "test_tab", "test_configure_length", "test_revalidation", "test_children", "test_tag_configure", "test_validation", "_show_drop_down_listbox", "test_label", "test_configure_default", "test_configure_to", "test_configure_increment", "test_column", "test_identify", "test_configure_invalidcommand", "test_configure_labelanchor", "test_pane", "test_tab_identifiers", "test_focus", "test_configure_compound", "test_configure_onvalue"], "function_calls": ["get_tk_patchlevel", "len", "add_standard_options", "super", "simulate_mouse_click", "simulate_heading_click", "conv", "check_get_current", "str", "MockTclObj", "getattr", "set", "int", "zip", "requires", "range", "hasattr"], "class_names": ["SizegripTest", "SpinboxTest", "EntryTest", "SeparatorTest", "ScrollbarTest", "CheckbuttonTest", "NotebookTest", "StandardTtkOptionsTests", "ProgressbarTest", "WidgetTest", "RadiobuttonTest", "DefaultRootTest", "AbstractToplevelTest", "ButtonTest", "AbstractLabelTest", "ScaleTest", "ComboboxTest", "MenubuttonTest", "TreeviewTest", "LabelFrameTest", "FrameTest", "LabelTest", "PanedWindowTest"], "class_method_calls": ["self.child2", "self.assertEqual", "self.assertNotEqual", "self._test_widget", "failure.pop", "self.entry", "label.destroy", "self.checkCommandParam", "self.assertRaises", "self.combo", "ttk.Notebook", "good_child.destroy", "self.assertTrue", "self.checkParams", "self.assertIsInstance", "ttk.Scrollbar", "self.checkPixelsParam", "myvar.get", "cbtn2.invoke", "self.scale", "self.root", "pos_y.add", "ttk.LabelFrame", "self.assertNotIn", "value.index", "tkinter.DoubleVar", "found.add", "self.assertRegex", "self.checkFloatParam", "ttk.Separator", "ttk.Combobox", "self.checkEnumParam", "self._click_increment_arrow", "self._click_decrement_arrow", "self.spin", "child.destroy", "ttk.Radiobutton", "unittest.TestCase", "self.assertFalse", "combo2.destroy", "sys.platform", "ttk.PanedWindow", "self.checkParam", "self.widget", "cbtn.tk", "self.assertLessEqual", "ttk.Menubutton", "events.append", "self.create", "self.nb", "spin2.destroy", "ttk.Spinbox", "var.get", "ttk.Checkbutton", "tkinter.IntVar", "ttk.Frame", "menu.destroy", "var.set", "unittest.main", "ttk.Progressbar", "self.paned", "tkinter.PhotoImage", "cbtn.state", "self.checkInvalidParam", "ttk.Label", "self.tv", "to_insert.lower", "self.wantobjects", "ttk.Sizegrip", "btn.invoke", "self._show_drop_down_listbox", "self.assertIsBoundingBox", "other_child.destroy", "validation.append", "ttk.Treeview", "self.assertIn", "self.fail", "ttk.Button", "tkinter.Menu", "unittest.skipIf", "tkinter.TclError", "cbtn.invoke", "ttk.Entry", "success.append", "self.child1", "ttk.Scale", "letter.lower", "tab_changed.append"]}, "test_extensions.py": {"libraries": ["unittest", "tkinter.test.support.AbstractTkTest", "test.support.run_unittest", "tkinter", "tkinter.test.support.AbstractDefaultRootTest", "test.support.requires", "sys", "tkinter.ttk"], "function_names": ["test_widget_destroy", "setUp", "cb_test", "test_labeledscale", "test_horizontal_range", "test_unique_radiobuttons", "tearDown", "test_initialization", "check_positions", "test_variable_change", "test_menu", "test_resize"], "function_calls": ["len", "super", "conv", "str", "int", "run_unittest", "float", "requires", "check_positions", "range", "hasattr"], "class_names": ["OptionMenuTest", "LabeledScaleTest", "DefaultRootTest"], "class_method_calls": ["scale.pack_info", "optmenu2.pack", "x.label", "self.wantobjects", "myvar.get", "self.assertEqual", "self.assertNotEqual", "lscale.pack", "myvar._name", "lscale.destroy", "tkinter.StringVar", "optmenu._variable", "x.pack", "self.textvar", "label.place_info", "x.tk", "self._test_widget", "ttk.OptionMenu", "optmenu.tk", "self.root", "var._name", "self.fail", "optmenu.update_idletasks", "optmenu2.destroy", "lscale.label", "tkinter.DoubleVar", "tkinter.Frame", "self.assertRaises", "var.get", "optmenu.pack", "x.master", "tkinter.TclError", "tkinter.IntVar", "success.append", "self.assertGreater", "lscale.update", "ttk.LabeledScale", "x.update", "x.value", "lscale.scale", "optmenu.destroy", "sys.maxsize", "sys.last_type", "x.destroy", "self.assertTrue", "x.scale", "unittest.TestCase", "x._variable"]}, "test_style.py": {"libraries": ["unittest", "tkinter.test.support.AbstractTkTest", "test.support.run_unittest", "tkinter", "test.support.requires", "sys", "test.support", "tkinter.ttk"], "function_names": ["test_configure", "setUp", "test_lookup", "test_layout", "test_theme_use", "test_configure_custom_copy", "test_map", "test_map_custom_copy"], "function_calls": ["requires", "print", "super", "run_unittest"], "class_names": ["StyleTest"], "class_method_calls": ["self.assertIsInstance", "default.items", "style.lookup", "support.verbose", "self.root", "tkinter.TclError", "self.addCleanup", "self.assertFalse", "self.assertEqual", "sys.getwindowsversion", "ttk.Style", "style.map", "unittest.TestCase", "style.layout", "self.style", "style.configure", "self.subTest", "self.assertRaises"]}, "widget_tests.py": {"libraries": ["unittest", "tkinter.test.support.AbstractTkTest", "tkinter.test.support.pixels_conv", "tkinter", "tkinter.test.support.tcl_obj_eq", "sys", "tkinter.test.support.tcl_version", "tkinter.test.support.requires_tcl", "test.support", "tkinter.test.support.get_tk_patchlevel"], "function_names": ["test_configure_background", "checkEnumParam", "checkVariableParam", "checkColorParam", "test_configure_offrelief", "test_configure_variable", "test_configure_repeatdelay", "test_configure_height", "test_configure_tristateimage", "test_keys", "test_configure_highlightcolor", "test_configure_overrelief", "test_configure_relief", "test_configure_highlightbackground", "add_standard_options", "test_configure_insertbackground", "checkIntegerParam", "checkInvalidParam", "test_configure_image", "test_configure_font", "test_configure_activeborderwidth", "test_configure_setgrid", "checkParams", "test_configure_anchor", "checkPixelsParam", "checkCursorParam", "test_configure_state", "_str", "test_configure_selectcolor", "test_configure_insertontime", "test_configure_width", "test_configure_selectforeground", "test_configure_underline", "test_configure_insertborderwidth", "test_configure_troughcolor", "command", "test_configure_bitmap", "checkBooleanParam", "test", "test_configure_justify", "checkFloatParam", "test_configure_activeforeground", "assertIsBoundingBox", "test_configure_disabledforeground", "checkImageParam", "test_configure_insertwidth", "test_configure_orient", "test_configure_selectbackground", "test_configure_command", "test_configure_yscrollcommand", "test_configure_selectimage", "test_configure_jump", "assertEqual2", "checkParam", "test_configure_insertofftime", "test_configure_highlightthickness", "checkReliefParam", "test_configure_repeatinterval", "test_configure_textvariable", "scaling", "checkCommandParam", "test_configure_indicatoron", "test_configure_foreground", "test_configure_tristatevalue", "test_configure_selectborderwidth", "decorator", "test_configure_exportselection", "test_configure_pady", "setUpModule", "test_configure_borderwidth", "test_configure_activebackground", "test_configure_padx", "test_configure_text", "test_configure_cursor", "test_configure_wraplength", "test_configure_xscrollcommand", "test_configure_compound", "test_configure_takefocus"], "function_calls": ["object", "sorted", "getattr", "isinstance", "str", "staticmethod", "AssertionError", "pixels_conv", "setattr", "eq", "set", "float", "hasattr", "get_tk_patchlevel", "len", "conv", "map", "requires_tcl", "print"], "class_names": ["PixelSizeTests", "AbstractWidgetTest", "IntegerSizeTests", "StandardOptionsTests"], "class_method_calls": ["self.assertIsInstance", "self.checkPixelsParam", "sys.platform", "self.checkBooleanParam", "self.assertIsNotNone", "self.wantobjects", "errmsg.format", "self.checkParam", "self.assertEqual", "tkinter._join", "tcl.call", "object.__eq__", "widget.keys", "test.__name__", "test.support", "self._conv_pad_pixels", "cm.exception", "tkinter.StringVar", "self.create", "self.checkVariableParam", "self.root", "tkinter.Tcl", "self.fail", "self._str", "cls.OPTIONS", "self.checkCommandParam", "tkinter.DoubleVar", "self.assertRaises", "unittest.skipIf", "self.checkImageParam", "self.checkColorParam", "tkinter.TclError", "cls.__name__", "self._scaling", "self.checkEnumParam", "self.assertEqual2", "self._conv_pixels", "widget.configure", "self.OPTIONS", "widget.cget", "tkinter.PhotoImage", "self._stringify", "self.checkCursorParam", "self.checkInvalidParam", "self.default_orient", "self.__class__", "self.scaling", "self.assertTrue", "self.checkIntegerParam", "self.checkReliefParam", "self.checkParams"]}, "tix.py": {"libraries": ["_tkinter", "tkinter", "tkinter._cnfmerge", "os", "tkinter.*"], "function_names": ["dragsite_set", "show", "column_width", "add_command", "info_data", "panes", "info_dragsite", "file_dialog", "subwidget", "info_children", "tix_getimage", "tix_addbitmapdir", "delete_row", "indicator_configure", "panecget", "header_exists", "attach_widget", "update", "subwidgets_all", "info_bbox", "__init__", "info_down", "open", "edit_set", "_subwidget_names", "append_history", "__str__", "info_hidden", "decrement", "active_set", "header_delete", "tix_filedialog", "anchor_get", "popup", "popdown", "__setitem__", "info_left", "add_child", "delete_siblings", "unset", "filter", "increment", "entrycget", "add_separator", "move_row", "autosetmode", "dropsite_set", "grid", "hide_entry", "item_cget", "delete_entry", "OptionName", "bind_widget", "item_exists", "info_size", "forget", "see", "setmode", "delete_offsprings", "pages", "insert", "item_create", "paneconfigure", "tix_getbitmap", "set_silent", "item_configure", "active_clear", "edit_apply", "image_delete", "page", "indicator_exists", "info_prev", "_subwidget_name", "destroy", "show_entry", "__getitem__", "header_configure", "indicator_cget", "enable", "info_active", "info_right", "info_anchor", "size_column", "getselection", "chdir", "header_size", "_options", "post_widget", "tix_resetoptions", "image_create", "unbind_widget", "close", "info_next", "header_create", "center", "set", "selection_set", "config", "size_row", "info_up", "detach_widget", "getmode", "indicator_size", "invoke", "disable", "raise_page", "anchor_clear", "anchor_set", "move_column", "selection_clear", "__getattr__", "check", "info", "info_parent", "delete_all", "tix_option_get", "add_history", "selection_includes", "entryconfigure", "hide", "nearest", "delete", "delete_column", "setstatus", "info_selection", "raised", "config_all", "info_exists", "pick", "FileTypeList", "apply_filter", "header_cget", "slaves", "indicator_create", "indicator_delete", "getstatus", "item_delete", "tix_configure", "add", "tix_cget", "info_dropsite", "dropsite_clear", "dragsite_clear"], "function_calls": ["_dummyMenu", "_dummyHList", "_dummyScrolledListBox", "_dummyScrolledHList", "_dummyDirSelectBox", "repr", "isinstance", "AttributeError", "_dummyLabel", "_dummyListbox", "TclError", "_cnfmerge", "_dummyStdButtonBox", "range", "_dummyMenubutton", "_dummyButton", "list", "_dummyFileComboBox", "_dummyComboBox", "_dummyDirList", "_dummyCheckbutton", "_dummyFrame", "_dummyTList", "_dummyFileSelectBox", "_dummyScrollbar", "_dummyText", "len", "_dummyPanedWindow", "callable", "TixSubWidget", "_dummyExFileSelectBox", "_dummyEntry"], "class_names": ["_dummyMenu", "TList", "_dummyHList", "TixWidget", "OptionMenu", "ScrolledWindow", "_dummyScrolledListBox", "FileSelectBox", "NoteBook", "_dummyScrolledHList", "ScrolledHList", "_dummyDirSelectBox", "NoteBookFrame", "Form", "LabelFrame", "ExFileSelectDialog", "ListNoteBook", "_dummyLabel", "_dummyListbox", "ScrolledGrid", "ResizeHandle", "DirTree", "ExFileSelectBox", "DirSelectBox", "LabelEntry", "_dummyStdButtonBox", "Control", "_dummyMenubutton", "Balloon", "_dummyButton", "tixCommand", "PanedWindow", "PopupMenu", "_dummyComboBox", "_dummyFileComboBox", "_dummyDirList", "ScrolledTList", "InputOnly", "ComboBox", "_dummyCheckbutton", "Shell", "ScrolledText", "_dummyFrame", "_dummyTList", "StdButtonBox", "FileEntry", "HList", "Grid", "_dummyFileSelectBox", "ScrolledListBox", "_dummyScrollbar", "_dummyText", "Tk", "DisplayStyle", "ButtonBox", "DirList", "FileSelectDialog", "Meter", "_dummyPanedWindow", "CObjView", "CheckList", "DialogShell", "_dummyNoteBookFrame", "Tree", "TixSubWidget", "_dummyExFileSelectBox", "Select", "DirSelectDialog", "_dummyEntry"], "class_method_calls": ["self._subwidget_name", "master._nametowidget", "self._configure", "master._w", "self.stylename", "master.tk", "self.protocol", "ret.append", "tkinter._get_default_root", "self.subwidget", "path.split", "self._getconfigure1", "Widget._setup", "self.tk", "self._name", "self._nametowidget", "dict.keys", "static_options.append", "tkinter.Tk", "TixSubWidget.__init__", "self.cnf", "self._getconfigure", "c.destroy", "widget.tk", "self._getints", "self.destroy_physically", "self.children", "os.environ", "self.subwidget_list", "self.master", "master._subwidget_name", "retlist.append", "Widget.config", "widget._w", "Form.form", "self._register", "cnf.items", "TixWidget.__init__", "tkinter.Widget", "self.widgetName", "self._subwidget_names", "self._w", "self._getboolean", "self._options"]}, "ttk.py": {"libraries": ["tkinter", "tkinter._flatten", "tkinter._join", "os", "tkinter._splitdict", "tkinter._stringify"], "function_names": ["theme_names", "element_create", "parent", "__init__", "index", "_convert_stringval", "theme_create", "validate", "tag_has", "heading", "set_children", "focus", "enable_traversal", "identify_row", "step", "exists", "state", "set_menu", "adjust_label", "_list_from_statespec", "_format_elemcreate", "value", "identify", "_format_mapdict", "pane", "selection_add", "configure", "sashpos", "identify_region", "_format_optvalue", "forget", "_selection", "see", "insert", "item", "theme_use", "get_children", "_format_layoutlist", "tab", "identify_element", "column", "destroy", "__getitem__", "layout", "selection_toggle", "_tclobj_to_py", "selection_remove", "tclobjs_to_py", "selection", "set", "start", "selection_set", "tag_configure", "move", "bbox", "_load_tile", "identify_column", "invoke", "setup_master", "instate", "stop", "_val_or_dict", "lookup", "_script_from_settings", "element_names", "element_options", "current", "select", "hide", "_to_number", "get", "delete", "_adjust", "_mapdict_values", "detach", "next", "tag_bind", "tabs", "_format_optdict", "prev", "add", "theme_settings", "map", "_list_from_layouttuple"], "function_calls": ["_val_or_dict", "getattr", "_list_from_statespec", "_format_elemcreate", "_script_from_settings", "_format_mapdict", "Label", "isinstance", "super", "_tclobj_to_py", "iter", "str", "_to_number", "tuple", "callback", "_mapdict_values", "_format_optvalue", "list", "_convert_stringval", "int", "type", "zip", "next", "_flatten", "_join", "float", "hasattr", "_load_tile", "_format_optdict", "_splitdict", "len", "any", "_stringify", "_format_layoutlist", "setup_master", "Scale", "map", "_list_from_layouttuple"], "class_names": ["Sizegrip", "Notebook", "Spinbox", "OptionMenu", "Widget", "Label", "Treeview", "Checkbutton", "Combobox", "Frame", "Scrollbar", "Style", "Entry", "Panedwindow", "Button", "Radiobutton", "Labelframe", "Menubutton", "Progressbar", "Separator", "Scale", "LabeledScale"], "class_method_calls": ["dummy.lower", "result.append", "self.set_menu", "tkinter.TkVersion", "opt_val.append", "Frame.__init__", "self.value", "self.update_idletasks", "state.split", "optdict.items", "tkinter.YView", "adict.items", "master.tk", "tkinter._get_default_root", "value.setter", "self._selection", "self._label_top", "master._tile_loaded", "tk.splitlist", "self.tk", "self.scale", "self._name", "kwargs.pop", "self.__tracecb", "opts.extend", "Widget.__init__", "self._callback", "tkinter.XView", "self._substitute", "n.lstrip", "tkinter.Menu", "self.event_generate", "self.label", "tkinter.Scrollbar", "menu.delete", "script.append", "kw.pop", "opt.startswith", "kwargs.keys", "self.identify", "Widget.configure", "tkinter.Scale", "Entry.__init__", "opts.get", "self._bind", "res.append", "self._getints", "self._adjust", "self.bind", "dummy.pack", "tkinter.IntVar", "tkinter.Entry", "os.environ", "self.master", "self.nametowidget", "o.lstrip", "self.after_idle", "tkinter._setit", "kw.get", "tkinter.PanedWindow", "kw.update", "Menubutton.__getitem__", "mapdict.items", "settings.items", "tkinter.TclError", "menu.add_radiobutton", "tkinter.Widget", "self._variable", "Menubutton.__init__", "self._w", "tk.call", "opts.append", "self._last_valid"]}, "trace.py": {"libraries": ["io", "time.monotonic", "threading", "runpy", "gc", "dis", "inspect", "argparse", "tokenize", "sys", "__main__", "token", "pickle", "warnings", "os", "sysconfig", "linecache"], "function_names": ["localtrace_trace_and_count", "_find_strings", "localtrace_trace", "results", "write_results", "_find_executable_linenos", "is_ignored_filename", "update", "parse_ignore_dir", "runctx", "write_results_file", "__init__", "runfunc", "file_module_function_of", "localtrace_count", "_find_lines", "_modname", "run", "_fullmodname", "globaltrace_countfuncs", "globaltrace_trackcallers", "names", "main", "_find_lines_from_code", "globaltrace_lt"], "function_calls": ["_find_strings", "sorted", "Trace", "isinstance", "_find_executable_linenos", "parse_ignore_dir", "_time", "open", "_find_lines", "_Ignore", "range", "CoverageResults", "_modname", "_fullmodname", "set", "int", "func", "enumerate", "hasattr", "len", "any", "compile", "main", "TypeError", "_find_lines_from_code", "exec", "print"], "class_names": ["CoverageResults", "Trace", "_Ignore"], "class_method_calls": ["opts.missing", "pickle.dump", "self.write_results_file", "s.replace", "frame.f_back", "self._ignore", "modulename.startswith", "pickle.load", "argparse.REMAINDER", "mod_spec.loader", "self.calledfuncs", "parser.add_argument", "filename.startswith", "self.update", "self.callers", "inspect.iscode", "self.globaltrace", "self.runctx", "t.runctx", "os.sep", "opts.timing", "frame.f_code", "linenos.update", "self.infile", "opts.listfuncs", "self.trace", "self.localtrace_trace", "linecache.getlines", "other.counts", "sys.stderr", "self.globaltrace_trackcallers", "code.co_name", "sys.argv", "opts.trackcalls", "other.calledfuncs", "runpy._get_module_details", "opts.summary", "os.makedirs", "self.pathtobasename", "opts.coverdir", "os.altsep", "other.callers", "self.localtrace_trace_and_count", "warnings.warn", "io.open_code", "frame.f_globals", "code.co_consts", "fp.read", "base.replace", "i.split", "self.donothing", "os.path", "grp.add_mutually_exclusive_group", "inspect.isfunction", "dis.findlinestarts", "sys.settrace", "mod_spec.parent", "__main__.__dict__", "tokenize.open", "parser.parse_args", "opts.trace", "self._mods", "self._calledfuncs", "threading.settrace", "argparse.ArgumentParser", "os.pathsep", "self.start_time", "parser.add_argument_group", "opts.ignore_dir", "self._caller_cache", "f.encoding", "f.readline", "token.STRING", "gc.get_referrers", "_grp.add_argument", "opts.file", "filename.endswith", "self._callers", "opts.count", "opts.progname", "self.globaltrace_countfuncs", "outfile.write", "comparepath.startswith", "runfunc.__text_signature__", "self.outfile", "self.ignore", "self.counts", "self.globaltrace_lt", "per_file.items", "self.counter", "opts.module", "filename.lstrip", "tokenize.detect_encoding", "mod.strip", "parser.error", "self._dirs", "per_file.get", "self.localtrace_count", "counts.get", "sys.exit", "opts.report", "t.results", "token.INDENT", "f.read", "code.co_filename", "self.file_module_function_of", "opts.ignore_module", "kw.pop", "opts.no_report", "tokenize.generate_tokens", "self.localtrace", "frame.f_lineno", "line.expandtabs", "results.write_results", "grp.add_argument", "sys.path", "linecache.getline", "opts.arguments", "self.__class__", "fp.readline", "self.is_ignored_filename", "sysconfig.get_path"]}, "traceback.py": {"libraries": ["collections", "sys", "linecache", "itertools"], "function_names": ["format", "extract", "walk_tb", "_format_final_exc_line", "print_exc", "print_exception", "_some_str", "clear_frames", "print_stack", "extract_tb", "print_tb", "__eq__", "__repr__", "print_list", "format_tb", "format_exception_only", "format_exc", "__init__", "format_exception", "format_list", "print_last", "extract_stack", "__str__", "__len__", "format_stack", "__iter__", "from_exception", "_load_lines", "walk_stack", "from_list", "line", "__getitem__"], "function_calls": ["TracebackException", "min", "walk_tb", "sorted", "_format_final_exc_line", "print_exception", "_some_str", "getattr", "cls", "extract_tb", "StackSummary", "id", "print_list", "repr", "isinstance", "issubclass", "iter", "str", "format_exception", "format_list", "ValueError", "list", "extract_stack", "klass", "set", "type", "hasattr", "len", "walk_stack", "FrameSummary", "print"], "class_names": ["TracebackException", "FrameSummary", "StackSummary"], "class_method_calls": ["badline.strip", "stack.reverse", "self.__dict__", "result.append", "sys.last_value", "self.stack", "frame.filename", "self.exc_type", "linecache.lazycache", "other.lineno", "self._line", "self.msg", "c.isspace", "sys.last_traceback", "row.append", "StackSummary.extract", "other.filename", "self.__context__", "exc.__traceback__", "self.lineno", "self.name", "self.line", "tb.tb_frame", "exc_value.offset", "frame.name", "other.name", "self._str", "_seen.add", "f.f_lineno", "exc_value.__cause__", "other.__dict__", "other.locals", "f.f_back", "collections.deque", "frame.line", "locals.items", "f.f_globals", "linecache.checkcache", "tb.tb_next", "self.__cause__", "f.f_code", "sys.exc_info", "self._load_lines", "self.text", "fnames.add", "self.format_exception_only", "frame.lineno", "exc_value.__suppress_context__", "exc_value.filename", "co.co_name", "exc_value.__context__", "self.offset", "co.co_filename", "tb.tb_lineno", "f.line", "self.filename", "StackSummary.from_list", "self.locals", "sys.last_type", "sys.stderr", "badline.rstrip", "linecache.getline", "exc_value.lineno", "sys._getframe", "frame.locals", "f.f_locals", "itertools.islice", "exc_value.msg", "exc_value.text", "self.__suppress_context__"]}, "tracemalloc.py": {"libraries": ["functools.total_ordering", "os.path", "_tracemalloc.*", "collections.abc.Sequence", "fnmatch", "pickle", "collections.abc.Iterable", "_tracemalloc._get_traces", "_tracemalloc._get_object_traceback", "linecache"], "function_names": ["format", "filename_pattern", "_match_frame_impl", "filter_traces", "domain", "__eq__", "__repr__", "compare_to", "get_object_traceback", "traceback", "_group_by", "__lt__", "__init__", "size", "statistics", "__str__", "_filter_trace", "take_snapshot", "__len__", "load", "dump", "_match", "_format_size", "_match_traceback", "_sort_key", "_match_frame", "lineno", "__hash__", "_compare_grouped_stats", "_normalize_filename", "filename", "__getitem__", "__contains__"], "function_calls": ["reversed", "abs", "_get_object_traceback", "Trace", "RuntimeError", "isinstance", "super", "_Traces", "str", "tuple", "Frame", "Snapshot", "hash", "Traceback", "open", "is_tracing", "ValueError", "list", "get_traceback_limit", "type", "_format_size", "StatisticDiff", "_get_traces", "len", "any", "Statistic", "_compare_grouped_stats", "TypeError", "_normalize_filename"], "class_names": ["StatisticDiff", "Statistic", "_Traces", "BaseFilter", "Frame", "Filter", "Traceback", "DomainFilter", "Snapshot", "Trace"], "class_method_calls": ["pickle.dump", "self._filename_pattern", "self.inclusive", "StatisticDiff._sort_key", "Sequence.__init__", "self.domain", "frame._frame", "other._trace", "other.size_diff", "grouped.values", "previous.count", "frame.filename", "self._domain", "self._frames", "self.count_diff", "self._match_traceback", "other._frame", "other.size", "old_group.items", "other._traces", "previous.size", "self._filter_trace", "trace._trace", "self.count", "self.lineno", "self.size", "pickle.load", "other._frames", "old_group.pop", "exclude_filters.append", "self._traces", "filename.endswith", "trace_filter.inclusive", "stat.size", "self._group_by", "self._frame", "self.traceback_limit", "statistics.append", "statistics.sort", "lines.append", "other.count_diff", "other.traceback", "self._match_frame", "pickle.HIGHEST_PROTOCOL", "frame.lineno", "self.size_diff", "stat.count", "self._match_frame_impl", "self.all_frames", "os.path", "self.filename", "self._trace", "fnmatch.fnmatch", "linecache.getline", "new_group.items", "trace_filter._match", "self.traceback", "old_snapshot._group_by", "other.count", "include_filters.append", "Statistic._sort_key", "self.traces"]}, "tty.py": {"libraries": ["termios.*"], "function_names": ["setraw", "setcbreak"], "function_calls": ["tcgetattr", "tcsetattr"], "class_names": [], "class_method_calls": []}, "turtle.py": {"libraries": ["tkinter.simpledialog", "re", "types", "time", "tkinter", "inspect", "os.path.isfile", "copy.deepcopy", "sys", "os.path.join", "math", "os.path.split"], "function_names": ["clone", "pendown", "isdown", "shape", "_color", "_undogoto", "home", "_resize", "isvisible", "_createline", "_drawturtle", "dot", "setup", "_cc", "exitGracefully", "_onrelease", "getturtle", "update", "numinput", "_update", "_onscreenclick", "__init__", "ontimer", "_bgcolor", "turtles", "_drawpoly", "begin_poly", "get_shapepoly", "switchpen", "ondestroy", "penup", "__add__", "_setbgpic", "heading", "setundobuffer", "back", "register_shape", "tracer", "tiltangle", "forward", "towards", "_newLine", "getshapes", "color", "pencolor", "_setDegreesPerAU", "undobufferentries", "baba", "setworldcoordinates", "bgcolor", "__sub__", "begin_fill", "_colorstr", "_createimage", "nr_of_items", "showturtle", "config_dict", "adjustScrolls", "right", "getcanvas", "_tracer", "getmethparlist", "circle", "distance", "exitonclick", "Screen", "__neg__", "setx", "shearfactor", "getscreen", "_blankimage", "_go", "_getshapepoly", "_ondrag", "onkeypress", "_setscrollregion", "radians", "onkey", "__rmul__", "_make_global_funcs", "pop", "_write", "tilt", "bye", "_pointlist", "_incrementudc", "mode", "shapetransform", "onResize", "__new__", "pos", "__methods", "_createpoly", "_destroy", "demo2", "fillcolor", "pen", "_type", "_clear", "window_width", "push", "__methodDict", "listen", "demo1", "unbind", "degrees", "__repr__", "onclick", "end_poly", "_ontimer", "clear", "_setshape", "pensize", "cget", "window_height", "_rotate", "screensize", "readconfig", "undo", "title", "_undo", "left", "config", "_window_size", "_reset", "bbox", "end_fill", "__mul__", "setheading", "hideturtle", "_drawline", "read_docstrings", "reset", "__getnewargs__", "_drawimage", "bind", "speed", "setupcanvas", "clearstamp", "win_width", "_goto", "eventfun", "xcor", "win_height", "colormode", "_turtle_docrevise", "_setmode", "delay", "_polytrafo", "set_geometry", "get_poly", "textinput", "mainloop", "rotate", "_getcanvas", "_delete", "goto", "settiltangle", "_iscolorstring", "onrelease", "bgpic", "shapesize", "ondrag", "_rescale", "_listen", "addcomponent", "ycor", "focus_force", "stamp", "filling", "__forwardmethods", "_delay", "sety", "write_docstringdict", "write", "__abs__", "_onclick", "_onkeyrelease", "_image", "clearstamps", "_update_data", "resizemode", "_onkeypress", "_screen_docrevise", "_clearstamp"], "function_calls": ["isdown", "sorted", "shape", "Shape", "getattr", "_Screen", "getturtle", "__import__", "open", "setattr", "switchpen", "int", "zip", "isfile", "len", "tracer", "forward", "towards", "color", "pencolor", "globals", "exec", "_Root", "undobufferentries", "exit", "pu", "begin_fill", "ScrolledCanvas", "config_dict", "right", "st", "getmethparlist", "circle", "exitonclick", "str", "distance", "Screen", "fd", "list", "split", "down", "_make_global_funcs", "docrevise", "bye", "TurtleGraphicsError", "round", "__methods", "demo2", "Tbuffer", "fillcolor", "min", "__methodDict", "demo1", "isinstance", "fun", "pensize", "tuple", "width", "range", "pd", "readconfig", "up", "undo", "left", "type", "Vec2D", "rt", "end_fill", "float", "eval", "hasattr", "setheading", "max", "read_docstrings", "reset", "speed", "print", "abs", "colormode", "repr", "_TurtleImage", "lt", "join", "mainloop", "deepcopy", "Turtle", "backward", "TurtleScreen", "__forwardmethods", "write", "clearscreen"], "class_names": ["Tbuffer", "_Root", "Terminator", "TNavigator", "Shape", "_TurtleImage", "RawTurtle", "TurtleScreenBase", "Turtle", "Vec2D", "TurtleScreen", "TurtleGraphicsError", "_Screen", "TPen", "ScrolledCanvas"], "class_method_calls": ["TurtleScreen._RUNNING", "TK.SUNKEN", "q.currentLineItem", "self.shapeIndex", "shape._data", "line.strip", "screen._delayvalue", "screen._drawimage", "self.ht", "tri.write", "self._delay", "self.bye", "screen._delete", "key.strip", "self._outlinewidth", "root.destroy", "self._drawing", "self.width", "self._window_size", "screen._tracing", "self._degreesPerAU", "inspect.getargs", "self._mode", "tri.pencolor", "screen._createline", "self._polytrafo", "self.resizemode", "self._update_data", "self.update", "TK.ROUND", "t._drawturtle", "self._orient", "TurtleScreen._image", "self.clear", "TPen.pen", "self.bg", "self._canvas", "tuple.__new__", "self.winfo_toplevel", "self.columnconfigure", "self._onkeypress", "_dict_1.keys", "self._rescale", "self.setundobuffer", "self._pencolor", "self.cv", "self.yscale", "turtle.stamp", "screen._type", "self._poly", "baseList.reverse", "self._shapetrafo", "TNavigator.START_ORIENTATION", "self._delayvalue", "self._shown", "self._colorstr", "docstr.replace", "self.winfo_screenheight", "turtle.left", "self._rotate", "self.forward", "self._bgpicname", "self._bgpics", "self.onResize", "screen._turtles", "tri.distance", "parexp.sub", "self._fillitem", "self._setDegreesPerAU", "self._setshape", "x.split", "self._setmode", "q.turtle", "self._turtles", "self._ontimer", "math.cos", "self._listen", "self._angleOrient", "mode.lower", "self._createimage", "self._resize", "lang.lower", "self.currentLineItem", "turtle.reset", "newcoordlist.append", "self._resizemode", "TurtleScreenBase.__init__", "cstr.startswith", "self.winfo_screenwidth", "self.items", "simpledialog.askfloat", "self._onkeyrelease", "turtle.speed", "self._undogoto", "self._drawturtle", "stitem.append", "self._clearstamp", "self._creatingPoly", "self._fullcircle", "self.hscroll", "self.setpos", "Turtle._screen", "self.reset", "self.mode", "__func_body.format", "self._fillpath", "Turtle._pen", "cls.__dict__", "turtle.goto", "self._angleOffset", "module.docsdict", "self.xscale", "self.onkey", "turtle._setmode", "event.y", "name.lower", "turtle.color", "self._clear", "self._undo", "self._setbgpic", "q._update", "self._stretchfactor", "self.turtle", "rmode.lower", "self.onclick", "simpledialog.askstring", "self._image", "self._shapes", "self.heading", "screen.xscale", "TK.Canvas", "self.screen", "items2.append", "self._undobuffersize", "self.clearstamps", "screen._updatecounter", "self.geometry", "self.degrees", "self._item", "line.startswith", "screen._drawpoly", "data.pop", "RawTurtle.__init__", "self.settiltangle", "self._update", "turtle.resizemode", "self.DEFAULT_ANGLEORIENT", "self._iscolorstring", "screen._drawline", "self._type", "self._speed", "sys.platform", "align.lower", "turtle.fd", "self._onscreenclick", "types.FunctionType", "self.bgcolor", "t._update_data", "self.pencolor", "self.vscroll", "turtle.shape", "ob.__code__", "self._cc", "self.height", "tri.towards", "self._shearfactor", "p.update", "self._color", "f.write", "self._rootwindow", "self.ptr", "self._bgcolor", "self.screensize", "TK.TclError", "self.pendown", "_CFG.update", "self._delete", "cls.__bases__", "self.clearstamp", "TurtleScreen.__init__", "cv.winfo_toplevel", "data.lower", "q.screen", "shape._type", "RawTurtle.screens", "TPen._reset", "self.speed", "self.bufsize", "TK.PhotoImage", "self.onkeypress", "self._newLine", "self._write", "turtle.down", "TNavigator.reset", "self._root", "ob.__defaults__", "self._destroy", "tri.resizemode", "tri.fd", "TK.HORIZONTAL", "_Screen._title", "self.setup", "TK.Frame", "self.cumulate", "re.compile", "f.readlines", "math.pi", "img.blank", "_Screen._canvas", "method.__doc__", "tri.stamp", "screen.cv", "self._go", "self.undobuffer", "_dict.items", "self.stampItems", "self.currentLine", "buf.buffer", "f.close", "turtle.pensize", "_Screen._root", "tri.speed", "turtle.up", "self.pensize", "math.sin", "screen._createimage", "self._tracer", "screen._createpoly", "self._getshapepoly", "tri.onclick", "buf.ptr", "buf.bufsize", "self._bgpic", "self._updatecounter", "screen._update", "items1.append", "self._position", "screen._delay", "self.DEFAULT_ANGLEOFFSET", "rootwindow.call", "self.canvwidth", "self.pos", "turtle.undo", "tri.setheading", "screen._shapes", "TPen.__init__", "screen.turtles", "self._tracing", "cl.append", "event.x", "self.filling", "self._fillcolor", "self.turtles", "TK.Tk", "self.goto", "self.wm_protocol", "value.strip", "TNavigator.__init__", "tri.undo", "x._position", "screen._pointlist", "self.drawingLineItem", "self._colormode", "self.canvheight", "self.tiltangle", "self.buffer", "self._keys", "TK.Scrollbar", "turtle.lt", "self._goto", "_dict.keys", "math.atan2", "line.split", "time.sleep", "self._blankimage", "self.adjustScrolls", "self._data", "self._setscrollregion", "screen.mode", "self.rowconfigure", "self._tilt", "screen.yscale", "self._hidden_from_screen", "self._pensize", "self.setheading", "self.pen"]}, "bytedesign.py": {"libraries": ["time.perf_counter", "turtle.Turtle", "turtle.mainloop"], "function_names": ["pentpiece", "wheel", "pentl", "centerpiece", "tripiece", "tripolyl", "design", "tripolyr", "main", "pentr"], "function_calls": ["clock", "mainloop", "main", "Designer", "range", "print"], "class_names": ["Designer"], "class_method_calls": ["self.backward", "self.getscreen", "t.speed", "self.wheel", "self.centerpiece", "self.tripiece", "self.up", "self.pentr", "self.tripolyl", "self.goto", "t.position", "self.position", "t.hideturtle", "self.left", "self.tripolyr", "t.getscreen", "t.design", "self.pentl", "self.heading", "self.right", "self.down", "self.pentpiece", "self.forward", "self.setheading"]}, "chaos.py": {"libraries": ["turtle.*"], "function_names": ["g", "h", "f", "main", "plot", "line", "jumpto", "coosys"], "function_calls": ["hideturtle", "pendown", "coosys", "mainloop", "fun", "setworldcoordinates", "goto", "penup", "main", "reset", "dot", "plot", "line", "jumpto", "range", "pencolor", "speed"], "class_names": [], "class_method_calls": []}, "clock.py": {"libraries": ["datetime.datetime", "turtle.*"], "function_names": ["datum", "tick", "wochentag", "main", "clockface", "setup", "make_hand_shape", "hand", "jump"], "function_calls": ["pendown", "datum", "setup", "dot", "right", "end_poly", "lt", "get_poly", "mainloop", "pensize", "tick", "ontimer", "clockface", "make_hand_shape", "fd", "range", "begin_poly", "left", "ht", "penup", "Turtle", "rt", "register_shape", "tracer", "mode", "forward", "wochentag", "main", "reset", "hand", "jump", "print"], "class_names": [], "class_method_calls": ["t.minute", "z.day", "writer.bk", "minute_hand.color", "second_hand.color", "t.weekday", "minute_hand.shape", "hour_hand.setheading", "writer.back", "t.hour", "minute_hand.setheading", "second_hand.shape", "writer.ht", "z.month", "hour_hand.shape", "hand.speed", "second_hand.setheading", "hand.resizemode", "datetime.today", "hour_hand.color", "writer.pu", "t.microsecond", "writer.forward", "writer.clear", "z.year", "writer.home", "t.second", "hand.shapesize", "writer.write"]}, "colormixer.py": {"libraries": ["turtle.Turtle", "turtle.Screen", "turtle.mainloop"], "function_names": ["main", "__init__", "shift", "setbgcolor"], "function_calls": ["min", "max", "mainloop", "ColorTurtle", "Screen", "Turtle", "main", "setbgcolor", "print"], "class_names": ["ColorTurtle"], "class_method_calls": ["self.pensize", "self.color", "blue.ycor", "self.sety", "self._color", "screen.setworldcoordinates", "self.ondrag", "self.resizemode", "self.shapesize", "writer.ht", "self.goto", "self.speed", "writer.pu", "self.shift", "self.left", "self.shape", "green.ycor", "self.x", "self.ycor", "screen.bgcolor", "Turtle.__init__", "self.pu", "red.ycor", "screen.delay", "writer.goto", "self.pd", "self.fillcolor", "writer.write", "self.pencolor"]}, "forest.py": {"libraries": ["turtle.tracer", "random.randrange", "turtle.Turtle", "turtle.mainloop", "time.perf_counter", "turtle.colormode"], "function_names": ["doit3", "symRandom", "randomfd", "randomize", "tree", "start", "doit1", "main", "doit2"], "function_calls": ["doit3", "symRandom", "list", "clock", "mainloop", "tree", "tracer", "doit1", "start", "randomfd", "randomize", "Turtle", "main", "colormode", "randrange", "zip", "range", "doit2"], "class_names": [], "class_method_calls": ["t.hideturtle", "b.__next__", "p.ht", "t.speed", "t.pencolor", "t.pendown", "t.penup", "t.forward", "t.clone", "t.left", "t.right", "t.setpos", "pen.hideturtle", "brs.append", "lst.append", "t.reset", "t.pensize"]}, "fractalcurves.py": {"libraries": ["time.perf_counter", "math", "time.sleep", "turtle.*"], "function_names": ["fractal", "main", "hilbert", "fractalgon"], "function_calls": ["clock", "mainloop", "CurvesTurtle", "main", "sleep", "range", "print"], "class_names": ["CurvesTurtle"], "class_method_calls": ["ft.fd", "ft.getscreen", "ft.fillcolor", "math.sin", "ft.end_fill", "ft.pd", "ft.pu", "self.lt", "ft.hilbert", "self.bk", "ft.setpos", "ft.fractalgon", "ft.lt", "ft.color", "ft.ht", "self.rt", "self.left", "self.fd", "self.pu", "ft.speed", "ft.rt", "math.pi", "ft.begin_fill", "self.pd", "self.right", "self.hilbert", "self.forward", "self.fractal", "ft.reset"]}, "lindenmayer.py": {"libraries": ["time.sleep", "turtle.*", "math.sqrt"], "function_names": ["replace", "B", "F", "r", "A", "main", "l", "draw", "f"], "function_calls": ["replace", "right", "sqrt", "circle", "mainloop", "range", "up", "ht", "left", "backward", "sleep", "speed", "draw", "down", "tracer", "forward", "main", "reset", "color", "print"], "class_names": [], "class_method_calls": ["replacementRules.get"]}, "minimal_hanoi.py": {"libraries": ["turtle.*"], "function_names": ["hanoi", "play", "push", "__init__", "main", "pop"], "function_calls": ["write", "len", "hanoi", "Disc", "clear", "mainloop", "ht", "goto", "listen", "penup", "main", "onkey", "Tower", "range", "print"], "class_names": ["Disc", "Tower"], "class_method_calls": ["d.setx", "d.sety", "self.fillcolor", "t1.push", "self.shapesize", "self.x", "to_.push", "list.pop", "from_.pop", "self.append", "self.st", "Turtle.__init__", "self.pu"]}, "nim.py": {"libraries": ["random", "turtle", "time"], "function_names": ["computerzug", "randomrow", "display", "clear", "notify_move", "randommove", "notify_over", "__init__", "coords", "makemove", "main", "setup", "move", "game_over"], "function_calls": ["computerzug", "divmod", "randomrow", "max", "NimController", "NimModel", "NimView", "range", "randommove", "main", "Stick", "Nim"], "class_names": ["NimController", "NimModel", "NimView", "Stick", "Nim"], "class_method_calls": ["self.controller", "self.state", "turtle.Screen", "stick.makemove", "self.color", "self.col", "self.BUSY", "self.player", "game.screen", "self.move", "game.view", "self.writer", "mainscreen.setup", "self.shapesize", "self.showturtle", "self.goto", "self.winner", "self.display", "Nim.OVER", "Nim.CREATED", "self.model", "self.game_over", "self.speed", "self.shape", "self.view", "self.coords", "turtle.Turtle", "self.game", "turtle.mainloop", "Nim.RUNNING", "self.sticks", "self.row", "random.randint", "self.pu", "time.sleep", "self.screen", "stick.onclick", "game.model", "mainscreen.mode"]}, "paint.py": {"libraries": ["turtle.*"], "function_names": ["changecolor", "main", "switchupdown"], "function_calls": ["pen", "up", "shapesize", "shape", "mainloop", "begin_fill", "resizemode", "main", "width", "end_fill", "color", "down", "onscreenclick", "switchupdown", "print"], "class_names": [], "class_method_calls": []}, "peace.py": {"libraries": ["turtle.*"], "function_names": ["main"], "function_calls": ["right", "up", "circle", "mainloop", "left", "goto", "forward", "Screen", "main", "reset", "backward", "width", "color", "down"], "class_names": [], "class_method_calls": []}, "penrose.py": {"libraries": ["time.sleep", "turtle.*", "math.pi", "math.cos", "time.perf_counter"], "function_names": ["kite", "inflatekite", "makeshapes", "inflatedart", "test", "dart", "start", "demo", "main", "sun", "draw", "star"], "function_calls": ["kite", "inflatedart", "test", "shape", "bgcolor", "pu", "end_poly", "lt", "clear", "cos", "fun", "mainloop", "goto", "get_poly", "clock", "demo", "fd", "range", "inflatekite", "begin_poly", "shapesize", "ht", "dart", "start", "stamp", "int", "heading", "rt", "sleep", "setpos", "draw", "makeshapes", "setheading", "write", "len", "register_shape", "tracer", "mode", "resizemode", "reset", "main", "pos", "color", "round", "pencolor", "print"], "class_names": [], "class_method_calls": []}, "planet_and_moon.py": {"libraries": ["turtle.Vec2D", "turtle.Turtle", "turtle.Shape", "turtle.mainloop"], "function_names": ["step", "start", "__init__", "main", "init", "acc"], "function_calls": ["Vec", "Shape", "mainloop", "Star", "abs", "Turtle", "main", "GravSys", "range"], "class_names": ["GravSys", "Star"], "class_method_calls": ["self.planets", "s.get_poly", "self.dt", "earth.pencolor", "gravSys.planets", "s.circle", "planet.pos", "self.v", "self.pos", "s.pu", "self.m", "self.resizemode", "sun.color", "moon.shapesize", "self.penup", "self.pendown", "self.gravSys", "s.begin_poly", "self.t", "s.ht", "sun.shapesize", "self.setpos", "s.fd", "planet.m", "self.towards", "s.getscreen", "self.setheading", "p.init", "Turtle.__init__", "self.acc", "self.a", "gs.start", "moon.pencolor", "gs.init", "s.end_poly", "earth.shapesize", "planetshape.addcomponent", "s.lt", "p.step", "sun.pu", "s.reset"]}, "rosette.py": {"libraries": ["time.sleep", "turtle.Screen", "turtle.Turtle", "turtle.mainloop", "time.perf_counter"], "function_names": ["mn_eck", "main"], "function_calls": ["mn_eck", "any", "clock", "mainloop", "abs", "Screen", "Turtle", "main", "sleep", "range", "print"], "class_names": [], "class_method_calls": ["p.pensize", "p.hideturtle", "s.bgcolor", "t.pencolor", "t.rt", "s.tracer", "t.undobufferentries", "t.fd", "p.pencolor", "turtlelist.append", "t.undo", "p.speed", "q.rt", "p.clone", "s.turtles"]}, "round_dance.py": {"libraries": ["turtle.*"], "function_names": ["stop", "main"], "function_calls": ["clone", "Shape", "shape", "bgcolor", "pu", "home", "listen", "right", "lt", "mainloop", "update", "fd", "range", "shapesize", "get_shapepoly", "onkeypress", "setpos", "tilt", "clearscreen", "register_shape", "tracer", "main", "print"], "class_names": [], "class_method_calls": ["dancer.lt", "dancer.tilt", "dancer.fd", "dancers.append", "sh.addcomponent"]}, "sorting_animate.py": {"libraries": ["random", "turtle.*"], "function_names": ["unglow", "_close_gap_from_i", "ssort", "_open_gap_from_i", "init_shelf", "push", "enable_keys", "start_ssort", "__repr__", "disable_keys", "partition", "__init__", "start_qsort", "start_isort", "insert", "pop", "qsort", "isort", "randomize", "main", "show_text", "glow"], "function_calls": ["ssort", "init_shelf", "listen", "enable_keys", "disable_keys", "clear", "mainloop", "goto", "partition", "Block", "getscreen", "range", "list", "ht", "penup", "onkey", "enumerate", "Shelf", "write", "len", "qsort", "isort", "main", "show_text"], "class_names": ["Block", "Shelf"], "class_method_calls": ["b.pos", "b.unglow", "d.shapesize", "self.append", "b.setx", "shelf.insert", "self._open_gap_from_i", "list.insert", "pivot.size", "self.size", "self.shapesize", "self.y", "shelf.pop", "b.shapesize", "s.push", "d.sety", "d.setx", "b.sety", "self._close_gap_from_i", "s.insert", "b.glow", "self.x", "random.shuffle", "list.pop", "Turtle.__init__", "self.pu", "s.pop", "self.fillcolor", "self.st"]}, "two_canvases.py": {"libraries": ["turtle.TurtleScreen", "turtle.RawTurtle", "turtle.TK"], "function_names": ["main"], "function_calls": ["RawTurtle", "main", "range", "TurtleScreen"], "class_names": [], "class_method_calls": ["q.color", "t.shape", "t.begin_fill", "p.width", "TK.mainloop", "p.color", "q.width", "TK.Tk", "t.pu", "cv2.pack", "t.bk", "cv1.pack", "q.lt", "t.end_fill", "t.lt", "s1.bgcolor", "TK.Canvas", "t.fd", "s2.bgcolor"]}, "yinyang.py": {"libraries": ["turtle.*"], "function_names": ["yin", "main"], "function_calls": ["right", "up", "circle", "mainloop", "left", "ht", "forward", "begin_fill", "yin", "reset", "backward", "width", "end_fill", "color", "down", "main"], "class_names": [], "class_method_calls": []}, "typing.py": {"libraries": ["types.WrapperDescriptorType", "re", "abc.abstractmethod", "types", "operator", "contextlib", "types.MethodWrapperType", "abc.ABCMeta", "collections", "sys", "warnings", "collections.abc", "functools", "types.MethodDescriptorType"], "function_names": ["_evaluate", "__mro_entries__", "NewType", "__index__", "runtime_checkable", "__complex__", "buffer", "__init__", "readlines", "__class_getitem__", "no_type_check_decorator", "newlines", "seekable", "cast", "__round__", "__subclasscheck__", "__float__", "isatty", "_get_defaults", "writable", "__exit__", "__bytes__", "final", "__setattr__", "_is_dunder", "encoding", "errors", "__call__", "_collect_type_vars", "seek", "_no_init", "__instancecheck__", "get_args", "_check_generic", "tell", "closed", "__copy__", "get_type_hints", "no_type_check", "mode", "__new__", "__getitem__", "copy_with", "__deepcopy__", "__repr__", "get_origin", "__reduce__", "__int__", "_alias", "line_buffering", "close", "_dict_new", "__getitem_inner__", "_subs_tvars", "_get_protocol_attrs", "readline", "_remove_dups_flatten", "fileno", "new_type", "_type_repr", "__getattr__", "readable", "__eq__", "_overload_dummy", "_typeddict_new", "__init_subclass__", "writelines", "__enter__", "overload", "name", "_tp_cache", "_make_nmtuple", "_proto_hook", "_is_callable_members_only", "flush", "read", "wrapped_decorator", "write", "_type_check", "__abs__", "_eval_type", "inner", "truncate", "_allow_reckless_class_cheks", "__hash__", "_check_fails"], "function_calls": ["frozenset", "_SpecialForm", "getattr", "reversed", "all", "globals", "ForwardRef", "SyntaxError", "decorator", "get_origin", "repr", "isinstance", "_VariadicGenericAlias", "AttributeError", "issubclass", "_is_dunder", "super", "str", "tuple", "TypeVar", "dict", "hash", "_alias", "_collect_type_vars", "_make_nmtuple", "setattr", "ValueError", "list", "_is_callable_members_only", "set", "_check_generic", "type", "zip", "cached", "enumerate", "func", "bool", "eval", "hasattr", "_type_check", "len", "any", "_subs_tvars", "_eval_type", "compile", "_TypedDictMeta", "NotImplementedError", "_allow_reckless_class_cheks", "no_type_check", "_get_protocol_attrs", "callable", "_GenericAlias", "TypeError", "_remove_dups_flatten", "_get_defaults", "_type_repr"], "class_names": ["_TypingEmpty", "_SpecialForm", "NamedTupleMeta", "SupportsInt", "ForwardRef", "_TypingEllipsis", "Generic", "io", "_VariadicGenericAlias", "SupportsBytes", "NamedTuple", "_Immutable", "SupportsRound", "_ProtocolMeta", "TypeVar", "re", "SupportsAbs", "Protocol", "_Final", "BinaryIO", "SupportsFloat", "_TypedDictMeta", "IO", "SupportsIndex", "TypedDict", "_GenericAlias", "SupportsComplex", "TextIO"], "class_method_calls": ["self.__dict__", "self.__forward_is_argument__", "tvars.append", "other.__forward_evaluated__", "t._evaluate", "cls.__qualname__", "types.MethodType", "other.__forward_arg__", "self.__forward_arg__", "self.__slots__", "t.copy_with", "collections.defaultdict", "_cleanups.append", "self.__forward_value__", "self.__constraints__", "obj.__qualname__", "new_type.__name__", "other._name", "self.__origin__", "obj.__mro__", "nm_tpl.__annotations__", "cls.__origin__", "cls.__init__", "collections.Counter", "t._special", "cls._special", "types.ModuleType", "t.__args__", "self._doc", "stdlib_re.Pattern", "Callable.__doc__", "self.__name__", "re.__name__", "Type.__doc__", "attr.startswith", "other.__origin__", "other.__forward_value__", "params.extend", "self.__forward_code__", "functools.wraps", "tp.__origin__", "code.co_varnames", "all_params.remove", "p.__args__", "self.__getitem_inner__", "obj.__dict__", "nm_tpl._field_defaults", "self.__bound__", "tvars.extend", "object.__init__", "base._is_protocol", "collections.deque", "obj.__name__", "self._inst", "attr.endswith", "other.__args__", "warnings.warn", "cls._is_runtime_protocol", "types.BuiltinFunctionType", "bases.index", "obj.__no_type_check__", "cls.__orig_bases__", "nm_tpl.__new__", "obj.__module__", "arg_attrs.values", "cls.__dict__", "cached.cache_clear", "nm_tpl.__module__", "tp._special", "res.append", "self.__args__", "instance.__class__", "collections.ChainMap", "collections.OrderedDict", "attrs.add", "self.__covariant__", "sys._getframe", "new_type.__supertype__", "res._special", "func.__kwdefaults__", "tp_dict.__total__", "_normalize_alias.get", "contextlib.AbstractContextManager", "ann.items", "other.__mro__", "arg.__no_type_check__", "kwargs.items", "types.FunctionType", "t.__parameters__", "code.co_argcount", "stdlib_re.Match", "self._name", "defaults.append", "kwargs.pop", "annotations.keys", "hints.items", "nm_tpl._field_types", "cls.__bases__", "anns.update", "base.__module__", "nm_tpl._fields", "functools.lru_cache", "cls.__name__", "base.__origin__", "other._is_protocol", "self.__subclasscheck__", "base.__dict__", "collections.namedtuple", "params.append", "ns.get", "io.__name__", "cls._is_protocol", "nsobj.__wrapped__", "cls.__parameters__", "self._special", "tp.__args__", "self.copy_with", "cls.__mro__", "self.__parameters__", "Tuple.__doc__", "origin.__name__", "arg_attrs.pop", "result.__orig_class__", "p.__origin__", "sys.modules", "func.__code__", "self.__contravariant__", "base.__parameters__", "tp_dict.__annotations__", "self.__module__", "func.__defaults__", "operator.getitem", "arg.__bases__", "origin.__module__", "__new__.__text_signature__", "defaults_dict.keys", "contextlib.AbstractAsyncContextManager", "arg.__origin__", "cls.__subclasshook__", "new_params.append", "types.items", "collections.abc", "self.__forward_evaluated__", "anns.items", "object.__new__", "arg.__dict__", "tp.copy_with", "base.__name__"]}, "async_case.py": {"libraries": ["case.TestCase", "inspect", "asyncio"], "function_names": ["_callSetUp", "_callTearDown", "_callTestMethod", "_setupAsyncioLoop", "run", "__init__", "_callMaybeAsync", "_callCleanup", "_callAsync", "_tearDownAsyncioLoop", "addAsyncCleanup"], "function_calls": ["func", "super"], "class_names": ["IsolatedAsyncioTestCase"], "class_method_calls": ["asyncio.set_event_loop", "self._asyncioLoopRunner", "queue.task_done", "task.cancelled", "loop.call_exception_handler", "self.tearDown", "self._asyncioTestLoop", "fut.set_result", "loop.close", "asyncio.Queue", "task.exception", "asyncio.CancelledError", "self.addCleanup", "task.cancel", "loop.create_future", "self.setUp", "loop.set_debug", "self._tearDownAsyncioLoop", "self._callMaybeAsync", "fut.cancelled", "loop.create_task", "self.asyncSetUp", "self._asyncioCallsQueue", "asyncio.all_tasks", "asyncio.new_event_loop", "loop.run_until_complete", "self._asyncioCallsTask", "self._setupAsyncioLoop", "inspect.isawaitable", "asyncio.gather", "queue.get", "loop.shutdown_asyncgens", "self._callAsync", "fut.set_exception", "self.asyncTearDown"]}, "case.py": {"libraries": ["pprint", "re", "types", "contextlib", "util._count_diff_all_purpose", "util._count_diff_hashable", "util._common_shorten_repr", "sys", "difflib", "warnings", "collections", "util.safe_repr", "util.strclass", "functools", "logging", "traceback"], "function_names": ["assertDictEqual", "assertFalse", "runTest", "assertIsInstance", "assertWarns", "assertDictContainsSubset", "__init__", "_callCleanup", "assertCountEqual", "__str__", "expectedFailure", "__iter__", "assertIn", "tearDown", "skipTest", "_getAssertEqualityFunc", "addTypeEqualityFunc", "assertGreater", "_callSetUp", "_callTearDown", "__exit__", "addModuleCleanup", "handle", "assertIsNot", "doClassCleanups", "assertAlmostEqual", "__call__", "testPartExecutor", "assertListEqual", "assertLess", "_is_subtype", "addCleanup", "subTest", "assertLessEqual", "_id", "assertIsNone", "_subDescription", "assertRaisesRegex", "assertNotAlmostEqual", "_callTestMethod", "setUp", "skipUnless", "skip", "id", "__repr__", "shortDescription", "defaultTestResult", "debug", "assertIsNotNone", "assertTrue", "assertEqual", "setUpClass", "assertRaises", "assertNotIn", "_baseAssertEqual", "_deprecate", "_raiseFailure", "assertRegex", "skipIf", "assertNotRegex", "assertLogs", "doCleanups", "assertGreaterEqual", "assertWarnsRegex", "__eq__", "countTestCases", "decorator", "_truncateMessage", "assertSetEqual", "addClassCleanup", "__enter__", "doModuleCleanups", "_addSkip", "assertNotIsInstance", "_addExpectedFailure", "emit", "flush", "run", "tearDownClass", "_formatMessage", "fail", "_feedErrorsToResult", "assertTupleEqual", "assertSequenceEqual", "_addUnexpectedSuccess", "assertMultiLineEqual", "deprecated_func", "__hash__", "assertNotEqual", "assertIs", "skip_wrapper"], "function_calls": ["object", "min", "_AssertRaisesContext", "getattr", "_count_diff_hashable", "all", "abs", "addExpectedFailure", "skip", "_count_diff_all_purpose", "decorator", "_AssertLogsContext", "startTestRun", "repr", "isinstance", "issubclass", "function", "addSkip", "super", "_LoggingWatcher", "iter", "str", "tuple", "hash", "callable_obj", "range", "_is_subtype", "list", "ValueError", "addUnexpectedSuccess", "method", "stopTestRun", "set", "strclass", "_OrderedChainMap", "_deprecate", "type", "next", "original_func", "safe_repr", "_Outcome", "_SubTest", "hasattr", "len", "_AssertWarnsContext", "_common_shorten_repr", "NotImplementedError", "SkipTest", "_CapturingHandler", "TypeError", "assertion_func", "round"], "class_names": ["_AssertRaisesContext", "_AssertWarnsContext", "_AssertRaisesBaseContext", "SkipTest", "_ShouldStop", "_UnexpectedSuccess", "_OrderedChainMap", "FunctionTestCase", "TestCase", "_CapturingHandler", "_SubTest", "_BaseTestCaseContext", "_Outcome", "_AssertLogsContext"], "class_method_calls": ["self._message", "self.old_propagate", "self._callTestMethod", "first.strip", "self._subDescription", "self.result_supports_subtests", "self.expected_regex", "self._type_equality_funcs", "self._getAssertEqualityFunc", "test_item.__unittest_expecting_failure__", "self.level", "logger.propagate", "self.logger_name", "cls.tearDown_exceptions", "logger.handlers", "warnings.catch_warnings", "_BaseTestCaseContext.__init__", "set2.difference", "parent.params", "result.addUnexpectedSuccess", "unexpected_regex.pattern", "self.format", "logging.Formatter", "result.addSuccess", "collections.Counter", "doc.strip", "self.run", "set1.difference", "self.warnings", "result.addFailure", "self._outcome", "self._diffThreshold", "unexpected_regex.search", "self._tearDownFunc", "context.handle", "self.assertIsInstance", "other._testFunc", "self._truncateMessage", "self._cleanups", "test_item.__unittest_skip__", "self._baseAssertEqual", "logging._nameToLevel", "functools.wraps", "expected_regex.search", "result.addExpectedFailure", "self.lineno", "self.maps", "warnings.warn", "m.message", "logging.INFO", "self.obj_name", "exceptions.append", "outcome.skipped", "self.old_handlers", "self._addExpectedFailure", "self.failureException", "test_item.__unittest_skip_why__", "contextlib.contextmanager", "collections.ChainMap", "expected_regex.pattern", "self._testMethodDoc", "self.filename", "self._formatMessage", "result.addSubTest", "outcome.success", "self._callCleanup", "exc_value.with_traceback", "v.__warningregistry__", "outcome.testPartExecutor", "self._base_type_str", "self._subtest", "self.msg", "original_func.__name__", "mismatched.append", "self.result", "handler.setFormatter", "addCleanup.__text_signature__", "self._callTearDown", "match.start", "types.FunctionType", "self.old_level", "self._callSetUp", "_module_cleanups.pop", "logging.Handler", "self.watcher", "self.addTypeEqualityFunc", "self._testFunc", "cls._class_cleanups", "kwargs.pop", "self.warnings_manager", "result.addError", "second.splitlines", "self._description", "test_case.failureException", "m.filename", "other._tearDownFunc", "result.stopTest", "self.errors", "warnings.simplefilter", "traceback.clear_frames", "self._addSkip", "self.exception", "logger.level", "_module_cleanups.append", "self._testMethodName", "collections.namedtuple", "re.compile", "m.lineno", "seq_type.__name__", "self.expecting_failure", "first.splitlines", "self.warning", "outcome.expecting_failure", "self.maxDiff", "self.assertSequenceEqual", "difflib.ndiff", "self._raiseFailure", "testMethod.__doc__", "pprint.pformat", "self.tearDown", "sys.modules", "self.skipped", "self.expectedFailure", "result.failfast", "self.expected", "result.TestResult", "logging.getLogger", "self.fail", "self.success", "other._description", "self.longMessage", "handler.watcher", "other._testMethodName", "subset.items", "self.setUp", "missing.append", "outcome.errors", "self.params", "self.test_case", "self.logger", "parts.append", "other._setUpFunc", "lines.append", "sys.exc_info", "self._addUnexpectedSuccess", "logging.getLevelName", "result.startTest", "match.end", "callable_obj.__name__", "self._feedErrorsToResult", "self.doCleanups", "self._setUpFunc", "self._base_type", "seen.add", "logging.Logger", "doc.split", "logger.setLevel", "self.__class__", "test.test_case", "outcome.expectedFailure", "seq_type_name.capitalize", "self.defaultTestResult", "self.LOGGING_FORMAT"]}, "loader.py": {"libraries": ["re", "types", "fnmatch.fnmatch", "sys", "warnings", "fnmatch.fnmatchcase", "os", "functools", "traceback"], "function_names": ["__getattr__", "_get_name_from_path", "_make_failed_test", "testSkipped", "_get_module_from_name", "_make_failed_import_test", "_make_skipped_test", "testFailure", "makeSuite", "_get_directory_containing_module", "loadTestsFromName", "__init__", "_match_path", "_jython_aware_splitext", "_make_failed_load_tests", "findTestCases", "loadTestsFromModule", "loadTestsFromTestCase", "discover", "_find_tests", "_makeLoader", "getTestCaseNames", "loadTestsFromNames", "shouldIncludeMethod", "_find_test_path"], "function_calls": ["_make_failed_test", "sorted", "_FailedTest", "getattr", "_make_failed_import_test", "_make_skipped_test", "fnmatchcase", "isinstance", "parent", "issubclass", "__import__", "super", "str", "ImportError", "TestLoader", "obj", "staticmethod", "_jython_aware_splitext", "list", "load_tests", "_make_failed_load_tests", "set", "dir", "fnmatch", "type", "hasattr", "suiteClass", "len", "any", "_makeLoader", "TestClass", "callable", "filter", "TypeError", "map"], "class_names": ["_FailedTest", "TestLoader"], "class_method_calls": ["self.getTestCaseNames", "functools.cmp_to_key", "self.loadTestsFromModule", "types.FunctionType", "spec.loader", "sys.modules", "the_module.__path__", "self.testMethodPrefix", "path.split", "tests.append", "path.startswith", "the_module.__spec__", "self.loadTestsFromName", "re.IGNORECASE", "loader.suiteClass", "fullpath_noext.lower", "self.sortTestMethodsUsing", "sys.builtin_module_names", "warnings.warn", "case.SkipTest", "self._match_path", "the_module.__file__", "tests.extend", "_relpath.startswith", "self.errors", "self._get_name_from_path", "testFnNames.sort", "self.loadTestsFromTestCase", "suite.TestSuite", "self._loading_packages", "loader.testMethodPrefix", "testCaseClass.__module__", "parts_copy.pop", "the_module.__name__", "loader.sortTestMethodsUsing", "loader.testNamePatterns", "testCaseClass.__qualname__", "self.testNamePatterns", "case.skip", "self._get_module_from_name", "self._get_directory_containing_module", "self._testMethodName", "spec.submodule_search_locations", "types.ModuleType", "self._exception", "self._top_level_dir", "VALID_MODULE_NAME.match", "case.TestCase", "name.split", "os.path", "path.lower", "re.compile", "module.__file__", "sys.path", "module.__name__", "realpath.lower", "kws.pop", "self.suiteClass", "traceback.format_exc", "os.listdir", "_relpath.replace", "attrname.startswith", "self._find_tests", "start_dir.split", "self._find_test_path", "util.three_way_cmp"]}, "mock.py": {"libraries": ["pprint", "types.CodeType", "io", "contextlib", "types.MethodType", "functools.partial", "inspect", "types.ModuleType", "sys", "_io", "functools.wraps", "unittest.util.safe_repr", "asyncio", "builtins"], "function_names": ["_patch_multiple", "assert_not_called", "assert_called", "reset_data", "wrapper", "_readline_side_effect", "decorate_callable", "_get", "copy", "_readlines_side_effect", "_check_signature", "_extract_mock", "__init__", "_set", "decorate_class", "__aiter__", "index", "_format_mock_call_signature", "call_list", "__iter__", "assert_any_call", "_is_exception", "_get_async_iter", "__next__", "_is_async_obj", "assert_has_calls", "_format_mock_failure_message", "_to_stream", "assert_awaited", "assert_has_awaits", "create_mock", "_callable", "_dot_lookup", "_mock_add_spec", "__exit__", "_get_method", "_increment_mock_call", "_unpatch_dict", "_delegating_property", "_get_eq", "__setattr__", "_instance_callable", "decoration_helper", "get_original", "__call__", "__set__", "_calls_repr", "_get_iter", "_get_ne", "_is_async_func", "__get_return_value", "__delattr__", "_mock_check_sig", "_execute_mock_call", "_read_side_effect", "assert_any_await", "mock_add_spec", "assert_called_once", "kwargs", "_check_and_set_parent", "__set_side_effect", "__set_return_value", "_format_call_signature", "count", "__new__", "_extract_mock_name", "_iter_side_effect", "_get_child_mock", "_is_list", "_call_matcher", "__contains__", "_get_signature_object", "_is_magic", "_patch_stopall", "assert_awaited_once", "_get_target", "__repr__", "_importer", "_patch_dict", "_patch_object", "__reduce__", "_clear_dict", "_set_signature", "__class__", "mock_open", "_get_call_signature_from_name", "__get__", "args", "method", "start", "_setup_async_mock", "_try_iter", "_get_call_arguments", "_mock_call", "reset_mock", "assert_called_once_with", "__getattr__", "attach_mock", "stop", "configure_mock", "__dir__", "__eq__", "__get_side_effect", "seal", "checksig", "__enter__", "__ne__", "assert_awaited_once_with", "_mock_set_magics", "_setup_func", "assert_called_with", "patch", "assert_not_awaited", "patched", "_is_instance_mock", "_must_skip", "_error_message", "__getattribute__", "decorate_async_callable", "_copy_func_details", "_set_return_value", "_inner", "assert_awaited_with", "_next_side_effect", "create_autospec"], "function_calls": ["patcher", "original", "sorted", "_MockIter", "getattr", "MagicMock", "_readline_side_effect", "__import__", "_ANY", "iter", "_check_signature", "_extract_mock", "_SentinelObject", "child_klass", "dict", "setattr", "_AsyncIterator", "partial", "dir", "klass", "_patch", "_is_exception", "_is_async_obj", "delattr", "_CallList", "len", "_to_stream", "_callable", "exec", "_dot_lookup", "NonCallableMock", "wraps", "_get_method", "reversed", "_safe_super", "_delegating_property", "_instance_callable", "_Call", "list", "_is_async_func", "f", "_check_and_set_parent", "_format_call_signature", "effect", "MagicProxy", "_iter_side_effect", "_is_list", "_get_signature_object", "_SpecState", "_is_magic", "AsyncMock", "_get_target", "return_calculator", "id", "_importer", "_patch_dict", "self", "_clear_dict", "isinstance", "_set_signature", "tuple", "AssertionError", "range", "property", "set", "side_effector", "type", "func", "hasattr", "_try_iter", "_setup_async_mock", "_Sentinel", "decorator", "Klass", "repr", "RuntimeError", "seal", "AttributeError", "issubclass", "super", "ValueError", "_setup_func", "next", "_is_instance_mock", "_must_skip", "safe_repr", "bool", "_error_message", "_copy_func_details", "_set_return_value", "callable", "TypeError", "create_autospec"], "class_names": ["NonCallableMock", "_SpecState", "Base", "MagicMixin", "_MockIter", "MagicMock", "AsyncMock", "Mock", "_Sentinel", "PropertyMock", "_patch_dict", "AsyncMockMixin", "_ANY", "_SentinelObject", "_Call", "_AsyncIterator", "_patch", "AsyncMagicMixin", "_CallList", "CallableMixin", "NonCallableMagicMock", "MagicProxy"], "class_method_calls": ["mock.await_count", "e.with_traceback", "self.new", "self.__dict__", "ANY.__eq__", "mock.return_value", "mock._mock_sealed", "value._mock_parent", "self._get_call_arguments", "self.attribute", "keywargs.update", "self.attribute_name", "self.create_mock", "funcopy.__signature__", "self.call_args_list", "mock.assert_any_call", "inspect.iscoroutinefunction", "mock._is_coroutine", "obj.mock", "mock.assert_has_calls", "_kwargs.update", "self._exit_stack", "self._active_patches", "child.reset_mock", "self.temp_original", "handle.__next__", "target.split", "mock.assert_called_with", "funcopy.mock", "thing._mock_from_kall", "mock.mock", "funcopy.assert_called_once_with", "mock.reset_mock", "self.values", "self.assert_awaited_with", "self.__eq__", "patch.multiple", "self.clear", "object.__dir__", "self._mock_sealed", "self.__aiter__", "child._mock_children", "self.target", "tuple.__new__", "_patch._active_patches", "patcher.attribute_name", "obj.__func__", "obj.__mro__", "funcopy.call_args", "spec.__mro__", "self.call_args", "_spec_asyncs.append", "self.has_local", "funcopy.call_count", "inspect.isawaitable", "this_patcher.attribute_name", "kw.get", "self.is_local", "sig.bind_partial", "asyncio.coroutines", "self._mock_children", "mock.await_args", "patch.TEST_PREFIX", "self._original", "result.spec", "self.decorate_class", "func.__init__", "children.get", "attr.startswith", "tuple.__dict__", "arg.startswith", "_kwargs.pop", "m._mock_new_parent", "_io.BytesIO", "self.mock_calls", "self._mock_name", "sig.bind", "child._spec_signature", "funcopy.called", "patch.dict", "self._mock_check_sig", "object.__hash__", "handle.__iter__", "self._mock_set_magics", "self.kwargs", "io.StringIO", "funcopy.assert_called", "handle.write", "self.new_callable", "self._spec_set", "handle.__enter__", "self._calls_repr", "not_found.append", "self.return_value", "_new_parent._mock_new_parent", "method.side_effect", "self.obj", "self.__iter__", "original.__name__", "self.autospec", "self._increment_mock_call", "_allowed_names.add", "patch.stop", "object.__sizeof__", "_new_parent.mock_calls", "self.decoration_helper", "contextlib.contextmanager", "self.__getattr__", "funcopy.assert_has_calls", "mock._mock_delegate", "self._spec_signature", "self.copy", "self._mock_new_parent", "self._mock_side_effect", "last._mock_name", "self._mock_delegate", "self._unpatch_dict", "_new_parent._mock_new_name", "vals.append", "inner_mock._mock_name", "patched.patchings", "self._execute_mock_call", "self.spec_set", "inspect.CO_ITERABLE_COROUTINE", "inspect.signature", "sentinel.DELETED", "in_dict.update", "mock.await_args_list", "func.patchings", "in_dict.clear", "funcopy.method_calls", "self._mock_return_value", "thing._mock_parent", "list.__contains__", "object.__ne__", "self.ids", "self.call_count", "funcopy.call_args_list", "kwargs.items", "self._mock_call", "code_mock.co_flags", "spec.__class__", "handle.readline", "ret.reset_mock", "all_awaits.remove", "handle.readlines", "self._patch_dict", "self.instance", "exit_stack.__exit__", "mock.side_effect", "self._sentinels", "_type.__mro__", "funcopy.mock_calls", "self.create", "handle.read", "funcopy.return_value", "_side_effect_methods.get", "mock.assert_called_once_with", "self._call_matcher", "name.startswith", "patch.object", "funcopy.assert_not_called", "self._mock_parent", "all_calls.remove", "funcopy.assert_called_once", "components.pop", "object.__setattr__", "self.iterator", "cls.__doc__", "_new_parent._mock_parent", "self._mock_new_name", "sentinel.MISSING", "sentinel.DEFAULT", "other._mock_parent", "self.called", "self._format_mock_call_signature", "self.side_effect", "klass.__dict__", "self.method_calls", "inspect.isdatadescriptor", "in_dict.copy", "cls.__name__", "funcopy.side_effect", "orig_magics.intersection", "base.__dict__", "exit_stack.enter_context", "numerics.split", "_parent._mock_children", "_parent._mock_new_name", "self.assert_called_with", "visited.append", "self._spec_class", "self.parent", "self._get_child_mock", "target.__dict__", "_new_parent._mock_name", "name.replace", "self.get_original", "value._mock_name", "NonCallableMock.__init__", "parent._get_child_mock", "funcopy.assert_called_with", "_parent._mock_new_parent", "self.await_args", "arg.split", "patching.attribute_name", "self.spec", "mock.assert_called", "delegated.side_effect", "self.configure_mock", "self._mock_methods", "funcopy.reset_mock", "self._extract_mock_name", "self.decorate_callable", "tuple.__getattribute__", "pprint.pformat", "_return_values.get", "mock.assert_called_once", "io.BytesIO", "object.__str__", "inner_mock._mock_new_parent", "funcopy.assert_any_call", "method.return_value", "self._mock_add_spec", "method.__name__", "self.getter", "self.name", "name.isidentifier", "func.__call__", "self._get_call_signature_from_name", "value._mock_new_name", "result.spec_set", "inspect.CO_COROUTINE", "bound_args.keys", "self.in_dict", "mock._mock_children", "target.rsplit", "funcopy._mock_children", "extra_args.update", "result.parent", "_calculate_return_value.get", "mock.assert_not_called", "extra_args.append", "_io.TextIOWrapper", "self.__ne__", "result.name", "patcher.additional_patchers", "asyncio.iscoroutinefunction", "self.decorate_async_callable", "sys.exc_info", "inner_mock._mock_parent", "self._mock_wraps", "args.pop", "p.copy", "patching.new", "self._mock_from_kall", "self.await_args_list", "inner_mock._mock_new_name", "patch.stopall", "self._mock_unsafe", "_name_list.append", "contextlib.ExitStack", "self.__exit__", "self.await_count", "self.__enter__", "result.instance", "_new_parent.method_calls", "e.startswith", "self.additional_patchers", "value._mock_new_parent", "self._format_mock_failure_message", "new.return_value"]}, "result.py": {"libraries": ["sys", "io", "functools.wraps", "traceback"], "function_names": ["stop", "addExpectedFailure", "__repr__", "startTestRun", "addSkip", "_exc_info_to_string", "printErrors", "__init__", "_restoreStdout", "_is_relevant_tb_level", "_count_relevant_tb_levels", "addFailure", "addUnexpectedSuccess", "addSuccess", "stopTestRun", "wasSuccessful", "inner", "failfast", "_setupStdout", "stopTest", "startTest", "addError", "addSubTest"], "function_calls": ["list", "len", "issubclass", "method", "getattr", "wraps", "hasattr"], "class_names": ["TestResult"], "class_method_calls": ["msgLines.append", "self._original_stdout", "self.unexpectedSuccesses", "tb_e.format", "self._count_relevant_tb_levels", "self._exc_info_to_string", "self.failures", "self.skipped", "sys.stdout", "self.stop", "tb.tb_frame", "test.failureException", "output.endswith", "self.tb_locals", "io.StringIO", "self._restoreStdout", "self.expectedFailures", "self.failfast", "self.errors", "tb.tb_next", "self._mirrorOutput", "self._stdout_buffer", "self._original_stderr", "self.buffer", "self._setupStdout", "self._is_relevant_tb_level", "self.shouldStop", "self._stderr_buffer", "error.endswith", "sys.stderr", "self.testsRun", "errors.append", "self.__class__", "util.strclass", "traceback.TracebackException"]}, "runner.py": {"libraries": ["sys", "warnings", "signals.registerResult", "time"], "function_names": ["__getattr__", "addFailure", "addUnexpectedSuccess", "addSuccess", "addSkip", "printErrorList", "run", "_makeResult", "addExpectedFailure", "__init__", "printErrors", "writeln", "startTest", "getDescription", "addError"], "function_calls": ["AttributeError", "len", "test", "super", "_WritelnDecorator", "stopTestRun", "getattr", "registerResult", "str", "map", "startTestRun", "hasattr"], "class_names": ["TextTestRunner", "TextTestResult", "_WritelnDecorator"], "class_method_calls": ["self.dots", "warnings.filterwarnings", "self.failures", "result.failfast", "result.separator2", "self.separator1", "self.showAll", "result.wasSuccessful", "result.buffer", "result.TestResult", "infos.append", "self.tb_locals", "result.skipped", "warnings.catch_warnings", "self.write", "self.errors", "self.failfast", "warnings.simplefilter", "result.printErrors", "self.separator2", "self.resultclass", "result.testsRun", "result.tb_locals", "self.printErrorList", "self.buffer", "result.errors", "self.descriptions", "time.perf_counter", "self.verbosity", "self.getDescription", "self.stream", "test.shortDescription", "result.expectedFailures", "result.unexpectedSuccesses", "sys.stderr", "self.warnings", "self._makeResult", "result.failures"]}, "signals.py": {"libraries": ["functools.wraps", "signal", "weakref"], "function_names": ["default_handler", "installHandler", "inner", "registerResult", "__call__", "__init__", "removeResult", "removeHandler"], "function_calls": ["isinstance", "TypeError", "method", "wraps", "bool", "removeHandler", "_InterruptHandler"], "class_names": ["_InterruptHandler"], "class_method_calls": ["signal.signal", "self.default_handler", "signal.default_int_handler", "result.stop", "self.original_handler", "_interrupt_handler.original_handler", "signal.SIG_DFL", "signal.SIGINT", "signal.getsignal", "_results.keys", "weakref.WeakKeyDictionary", "signal.SIG_IGN", "self.called", "_results.pop"]}, "suite.py": {"libraries": ["sys"], "function_names": ["addTests", "_tearDownPreviousClass", "_handleModuleTearDown", "_addClassOrModuleLevelException", "__eq__", "__repr__", "id", "countTestCases", "shortDescription", "debug", "_removeTestAtIndex", "__call__", "__init__", "addTest", "_createClassOrModuleLevelException", "__str__", "run", "__iter__", "_isnotsuite", "_get_previous_module", "_handleClassSetUp", "_call_if_exists", "_handleModuleFixture"], "function_calls": ["test", "getattr", "_DebugResult", "repr", "isinstance", "issubclass", "addSkip", "iter", "setUpModule", "str", "list", "setUpClass", "tearDownClass", "_isnotsuite", "_ErrorHolder", "func", "enumerate", "hasattr", "tearDownModule", "len", "callable", "TypeError", "_call_if_exists"], "class_names": ["BaseTestSuite", "_DebugResult", "TestSuite", "_ErrorHolder"], "class_method_calls": ["previousClass.__module__", "self.description", "self._createClassOrModuleLevelException", "result._previousTestClass", "self._handleClassSetUp", "self._removed_tests", "self._handleModuleFixture", "currentClass.doClassCleanups", "sys.modules", "previousClass.tearDown_exceptions", "self.id", "result._moduleSetUpFailed", "self._cleanup", "case.doModuleCleanups", "result.addError", "result.shouldStop", "case.SkipTest", "self._addClassOrModuleLevelException", "result._testRunEntered", "self._handleModuleTearDown", "sys.exc_info", "self._tests", "test.debug", "currentClass.tearDown_exceptions", "currentClass._classSetupFailed", "test.__class__", "self.addTest", "case.TestCase", "self._removeTestAtIndex", "self.run", "self._tearDownPreviousClass", "self.addTests", "self.__class__", "previousClass.doClassCleanups", "self._get_previous_module", "util.strclass", "test.countTestCases"]}, "_test_warnings.py": {"libraries": ["sys", "warnings", "unittest"], "function_names": ["test_import", "test_other_unittest", "test_deprecation", "warnfun", "test_assert", "test_warning", "test_fail", "test_function"], "function_calls": ["warnfun", "len", "print"], "class_names": ["TestWarnings"], "class_method_calls": ["unittest.main", "self.assertAlmostEqual", "warnings.warn", "w.message", "sys.argv", "warnings.catch_warnings", "self.assertNotAlmostEqual", "unittest.TestCase", "self.failUnless", "self.assertEquals"]}, "dummy.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "test_assertions.py": {"libraries": ["unittest", "itertools.product", "datetime", "warnings", "weakref"], "function_names": ["test_AlmostEqual", "testAssertSetEqual", "testAssertDictContainsSubset", "setUp", "testAssertIsNotNone", "testAssertLess", "testAssertIsNone", "testAssertWarnsRegex", "_raise", "test_assertRaises_frames_survival", "test_functional", "testAssertFalse", "testAssertSequenceEqual", "testNotAlmostEqual", "testAlmostEqual", "testAssertGreaterEqual", "testAssertIs", "test_AmostEqualWithDelta", "testAssertIsNot", "testAssertWarns", "getMethod", "testAssertRaisesRegex", "testTest", "testAssertIn", "testAssertGreater", "test_with", "testDefault", "testAssertLessEqual", "raise_wrong_message", "test_baseAssertEqual", "test_formatMessage_unicode_error", "testNotEqual", "testAssertRegex", "testAssertRaises", "testAssertNotRegex", "test_assertRaises", "testAssertMultiLineEqual", "test_formatMsg", "testAssertNotIn", "testAssertDictEqual", "assertMessages", "foo", "assertMessagesCM", "testAssertTrue"], "function_calls": ["object", "getattr", "TestableTestTrue", "KeyError", "Foo", "str", "getMethod", "A", "wr", "TestableTestFalse", "range", "method", "set", "zip", "enumerate", "float", "func", "product", "chr", "testMethod", "TypeError"], "class_names": ["Foo", "TestableTestTrue", "TestLongMessage", "A", "Test_Assertions", "TestableTestFalse"], "class_method_calls": ["datetime.datetime", "self.assertAlmostEqual", "self.assertEqual", "cm.exception", "self.assertRaisesRegex", "self.assertIs", "cls.failureException", "self.testableTrue", "datetime.timedelta", "self.assertIn", "self.fail", "self.assertMessagesCM", "warnings.warn", "warnings.catch_warnings", "self.assertNotRegex", "self.assertRaises", "warnings.simplefilter", "self.failureException", "weakref.ref", "self.assertIsNone", "self.assertNotAlmostEqual", "unittest.main", "self.foo", "e.args", "self.assertTrue", "self.assertMessages", "unittest.TestCase", "self.testableFalse"]}, "test_async_case.py": {"libraries": ["unittest", "asyncio"], "function_names": ["test_cleanups_interleave_order", "tearDownModule", "test_exception_in_test_after_adding_cleanup", "test_full_cycle", "setUp", "test_base_exception_from_async_method", "test_exception_in_setup", "test_exception_in_tear_clean_up", "tearDown", "test_exception_in_test", "test_exception_in_tear_down"], "function_calls": ["BaseException", "Test", "Exception"], "class_names": ["Test", "TestAsyncCase"], "class_method_calls": ["self.on_sync_cleanup", "events.append", "self.on_async_cleanup", "asyncio.CancelledError", "self.on_cleanup", "asyncio.set_event_loop_policy", "self.assertEqual", "test.run", "output.wasSuccessful", "self.addAsyncCleanup", "unittest.TestCase", "self.assertFalse", "unittest.main", "unittest.IsolatedAsyncioTestCase"]}, "test_break.py": {"libraries": ["unittest", "io", "gc", "signal", "sys", "weakref", "os"], "function_names": ["test", "testRemoveHandler", "testInstallHandler", "setUp", "run", "testHandlerReplacedButCalled", "testRegisterResult", "testRemoveResult", "__init__", "testSecondInterrupt", "new_handler", "testMainInstallsHandler", "testRemoveHandlerAsDecorator", "tearDown", "testRunner", "testWeakReferences", "testInterruptCaught", "testTwoResults"], "function_calls": ["object", "test", "ref", "handler", "Program", "hasattr"], "class_names": ["TestBreakDefaultIntHandler", "TestBreak", "FakeRunner", "Program", "TestBreakSignalIgnored", "TestBreakSignalDefault"], "class_method_calls": ["unittest.signals", "sys.platform", "self.result", "unittest.TestResult", "self.test", "unittest.skipUnless", "self.assertEqual", "os.getpid", "self.assertNotEqual", "unittest.removeHandler", "self.int_handler", "p.result", "runner.run", "FakeRunner.runArgs", "FakeRunner.initArgs", "self.assertIn", "self.tb_locals", "self.fail", "self.assertNotIn", "result.shouldStop", "unittest.TextTestRunner", "io.StringIO", "signal.getsignal", "self.failfast", "unittest.skipIf", "signal.signal", "signal.default_int_handler", "self.testRunner", "signal.SIG_DFL", "result.breakCaught", "weakref.ref", "signal.SIGINT", "unittest.removeResult", "self.assertIsNone", "unittest.installHandler", "self.verbosity", "weakref.WeakKeyDictionary", "unittest.main", "self.catchbreak", "self.runArgs", "self.exit", "unittest.registerResult", "unittest.TestProgram", "self.initArgs", "unittest.TestSuite", "self.skipTest", "result3.shouldStop", "self.assertTrue", "gc.collect", "result2.shouldStop", "unittest.TestCase", "self.assertFalse", "os.kill", "signal.SIG_IGN", "p.runTests", "self._default_handler"]}, "test_case.py": {"libraries": ["contextlib", "warnings", "unittest.test.support.LegacyLoggingResult", "test.support", "pprint", "unittest", "types", "unittest.test.support.TestEquality", "weakref", "logging", "difflib", "re", "inspect", "copy.deepcopy", "unittest.test.support.LoggingResult", "test.support.captured_stderr", "unittest.test.support.TestHashing", "sys", "unittest.test.support.ResultWithNoStartTestRunStopTestRun", "pickle"], "function_names": ["testAssertDictContainsSubset", "runTest", "test1", "test_init__test_name__invalid", "AllSnakesCreatedEqual", "testAssertLogsFailureLevelTooHigh", "test_tearDown", "__init__", "testAssertWarnsCallable", "assertLogRecords", "testAssertLogsFailureMismatchingLogger", "testAssertIn", "testSkippingEverywhere", "_check_call_order__subtests", "testNoCycles", "test_run_call_order__subtests_success_legacy", "testAssertEqual_shorten", "test_run_call_order__failure_in_test_default_result", "assertNoStderr", "tearDown", "_runtime_warn", "test_run_call_order__subtests", "testAssertWarnsRegexNoExceptionType", "testAssertIsInstance", "testAssertDictEqualTruncates", "testEquality", "testAssertRaisesCallable", "testAssertLogsPerLogger", "testAssertWarnsNoExceptionType", "test_run_call_order__error_in_test_default_result", "testDeprecatedMethodNames", "test_run_call_order_default_result", "test_run__returns_given_result", "testShortDescriptionWithOneLineDocstring", "test_run_call_order__subtests_failfast", "testNothing", "test_id", "test_a", "test_run_call_order__error_in_setUp_default_result", "checkAssertLogsPerLogger", "testAssertIs", "explodingTruncation", "test_b", "test_run_call_order__error_in_test", "testAssertRaisesRegex", "test_failureException__subclassing__explicit_raise", "testAssertNotIsInstance", "__del__", "testAssertRaisesRegexMismatch", "testKeyboardInterrupt", "test_no_exception_leak", "testAssertRegex", "nothing", "_skip", "_testDeprecatedFailMethods", "testSystemExit", "testAssertWarnsRegexCallable", "test", "test_run_call_order__error_in_setUp", "testTruncateMessage", "setUp", "_check_call_order__subtests_success", "testAssertIsNone", "test_run__uses_defaultTestResult", "testAssertEqual", "testAssertLogsTwoMatchingMessages", "defaultTestResult", "testAssertRaisesRegexNoExceptionType", "bytes_warning", "testAssertIsNot", "test_call__invoking_an_instance_delegates_to_run", "test_countTestCases", "test_init__no_test_name", "testAssertLogsDefaults", "test_defaultTestResult", "__warningregistry__", "testShortDescriptionWhitespaceTrimming", "test_run_call_order__error_in_tearDown", "testAssertRaisesContext", "test_run_call_order__error_in_tearDown_default_result", "func", "test_run_call_order__failure_in_test", "test_subtests_debug", "testAssertRaisesRegexInvalidRegex", "testAssertWarnsRegexInvalidRegex", "testAssertRaisesRefcount", "testAssertMultiLineEqual", "testAssertSequenceEqualMaxDiff", "test_run_call_order__subtests_legacy", "testAssertSetEqual", "testPickle", "testAssertWarnsRegexContext", "test_run_call_order__subtests_success", "test_c", "test_init__test_name__valid", "test_setUp", "testEqualityBytesWarning", "testAssertCountEqual", "_raise", "testAssertLogsPerLevel", "Stub", "testAssertWarnsContext", "testAssertLogsFailureNoLogs", "testAssertNotRaisesRegex", "testAssertRaisesExcValue", "testAssertRaisesNoExceptionType", "test_failureException__subclassing__implicit_raise", "testDeepcopy", "run", "checkAssertLogsPerLevel", "test_failureException__default", "testShortDescriptionWithMultiLineDocstring", "testAssertWarnsModifySysModules", "test2", "test_something", "testAssertMultiLineEqualTruncates", "testAddTypeEqualityFunc", "truncate", "testAssertEqualSingleLine", "testInequality", "testShortDescriptionWithoutDocstring", "test_subtests_failfast", "testAssertEqual_diffThreshold"], "function_calls": ["object", "frozenset", "meth", "getattr", "SadSnake", "RuntimeError", "captured_stderr", "LoggingResult", "super", "bytes_warning", "Foo", "iter", "str", "Stub", "tuple", "wr", "dict", "Exception", "LegacyLoggingResult", "MyException", "range", "setattr", "TestableTest", "deepcopy", "Test", "set", "klass", "int", "type", "zip", "ResultWithNoStartTestRunStopTestRun", "SystemError", "_runtime_warn", "ExceptionMock", "len", "chr", "TestCase"], "class_names": ["MyWarn", "Test_TestCase", "MyExc", "Foo", "TestableTest", "Test4", "Test", "SadSnake", "LoggingTestCase", "Test2", "Test3", "TestCase", "Bar", "MyException", "Test1", "ExceptionMock"], "class_method_calls": ["self.assertNoStderr", "self.assertEqual", "Test.LoggingTestCase", "self.assertNotEqual", "self.assertGreaterEqual", "self.assertIs", "Test.Bar", "test.failureException", "self.assert_", "self.assertAlmostEquals", "self.assertRegexpMatches", "warnings.catch_warnings", "self.assertRaises", "self.assertSetEqual", "log_foo.info", "unittest.makeSuite", "log_quux.error", "self._check_call_order__subtests", "inspect.getsourcelines", "pickle.HIGHEST_PROTOCOL", "self.failIf", "types.ModuleType", "self.failUnlessRaises", "self.assertCountEqual", "suite.run", "self._diffThreshold", "self.failUnless", "self.assertIsInstance", "self.shortDescription", "self._truncateMessage", "test._truncateMessage", "cm.warning", "self.checkAssertLogsPerLogger", "cm.exception", "cm.filename", "logging.ERROR", "b.extend", "unittest.SkipTest", "result.skipped", "self.assertNotIn", "warnings.warn", "unittest.case", "self.subTest", "unittest.util", "cm.lineno", "self.assertRegex", "self.failureException", "result.testsRun", "log_foobar.error", "self.assertListEqual", "self.assertLogs", "contextlib.contextmanager", "pickle.loads", "self.assertIsNone", "self.assertIsNot", "self.checkAssertLogsPerLevel", "support.disable_gc", "unpickled_test.assertEqual", "sys.version_info", "match.items", "unittest.TestCase", "self.assertFalse", "test.assertMultiLineEqual", "self._check_call_order__subtests_success", "self.assertLess", "sys.flags", "self.assertLessEqual", "self.addTypeEqualityFunc", "events.append", "self.assertTupleEqual", "self.assertMultiLineEqual", "self.addCleanup", "ctx.exception", "self.failUnlessEqual", "logging.LogRecord", "d.update", "self.assertWarnsRegex", "warnings.simplefilter", "self.assertWarns", "log_foo.warning", "test.assertEqual", "result.errors", "self.failIfAlmostEqual", "self.assertGreater", "unittest.main", "Test.Foo", "re.compile", "e.args", "self.assertDictEqual", "self.events", "self.assertRaisesRegexp", "MyException.ninstance", "self.maxDiff", "self.assertSequenceEqual", "difflib.ndiff", "self.assertIsNotNone", "pprint.pformat", "unittest.TestResult", "self.assertNotIsInstance", "test.run", "testcase.run", "sys.modules", "result.failfast", "log_quux.warning", "self.assertRaisesRegex", "cm.records", "cm.output", "self.assertIn", "logging.getLogger", "self.fail", "log_quux.critical", "self.failIfEqual", "self.failUnlessAlmostEqual", "buf.getvalue", "Exception.__init__", "unittest.skipIf", "test.assertRaises", "outer_cm.output", "log_foobar.debug", "test.assertDictEqual", "weakref.ref", "sys.getrefcount", "unittest.expectedFailure", "self.assertEquals", "self.assertDictContainsSubset", "self.assertLogRecords", "contextlib.ExitStack", "support.cpython_only", "pickle.dumps", "self.assertNotEquals", "self.assertNotAlmostEquals"]}, "test_discovery.py": {"libraries": ["test.test_importlib.util", "unittest", "re", "types", "os.path", "sys", "unittest.mock", "os.path.abspath", "pickle", "unittest.test", "test.support"], "function_names": ["test_discovery_failed_discovery", "test_get_name_from_path", "test_find_tests", "test_discover_with_init_modules_that_fail_to_import", "test_command_line_handling_discover_by_default_with_options", "test_module_symlink_ok", "_get_module_from_name", "_import", "restore", "test_find_tests_with_package", "__eq__", "restore_path", "test_detect_module_clash", "restore_isfile", "test_discover_start_dir_is_package_calls_package_load_tests", "isdir", "test_find_tests_customize_via_package_pattern", "setup_import_issue_tests", "__init__", "setup_module_clash", "test_command_line_handling_do_discovery_uses_default_loader", "list_dir", "setup_import_issue_package_tests", "test_discovery_from_dotted_path", "load_tests", "test_find_tests_default_calls_package_load_tests", "test_discovery_from_dotted_namespace_packages", "test_command_line_handling_do_discovery_calls_loader", "loadTestsFromModule", "test_command_line_handling_parseArgs", "restore_listdir", "listdir", "discover", "_find_tests", "test_discover_with_init_module_that_raises_SkipTest_on_import", "isfile", "cleanup", "test_discovery_from_dotted_path_builtin_modules", "test_command_line_handling_discover_by_default", "test_command_line_handling_do_discovery_too_many_arguments", "restore_isdir", "test_discover_with_module_that_raises_SkipTest_on_import", "realpath", "test_discover", "test_find_tests_socket", "test_discover_with_modules_that_fail_to_import"], "function_calls": ["list", "len", "Loader", "TestableTestProgram", "str", "ImportError", "slice", "Module", "orig_load_tests", "abspath", "range"], "class_names": ["Module", "TestableTestProgram", "Loader", "TestDiscovery"], "class_method_calls": ["stderr.getvalue", "test.my_package", "self.assertEqual", "program.buffer", "self.assertNotEqual", "import_calls.append", "package.__spec__", "self.assertIs", "program.test", "loader.suiteClass", "program.parseArgs", "program._initArgParsers", "_find_tests_args.append", "expected.extend", "self.assertRaises", "pickle.HIGHEST_PROTOCOL", "unittest.BaseTestSuite", "package.__path__", "loader._get_name_from_path", "types.ModuleType", "suite.countTestCases", "path_lists.pop", "self.assertTrue", "suite._tests", "suite.run", "loader.errors", "re.escape", "unittest.mock", "unittest.TestLoader", "cm.exception", "os.getcwd", "other.path", "unittest.SkipTest", "self.paths", "result.skipped", "program.failfast", "self.setup_import_issue_tests", "result.testsRun", "pickle.loads", "module.path", "os.path", "Module.load_tests_args", "unittest.test", "unittest.TestCase", "self.assertFalse", "program.catchbreak", "loader.discover", "types.SimpleNamespace", "self.wasRun", "test.test_this_does_not_exist", "program.testLoader", "Module.paths", "self.args", "self.addCleanup", "test.test_importlib", "program.verbosity", "loader._get_module_from_name", "self.path", "self.load_tests_args", "unittest.main", "self.setup_module_clash", "self.setup_import_issue_package_tests", "os.listdir", "unittest.TestResult", "sys.modules", "self.assertRaisesRegex", "loader.loadTestsFromModule", "Loader.args", "self.assertIn", "path.endswith", "support.DirsOnSysPath", "support.captured_stderr", "program._do_discovery", "self.load_tests", "loader._top_level_dir", "sys.path", "unittest.TestProgram", "object.__new__", "pickle.dumps", "os.name", "args.append", "loader._find_tests"]}, "test_functiontestcase.py": {"libraries": ["unittest", "unittest.test.support.LoggingResult"], "function_names": ["test_shortDescription__no_docstring", "test", "test_id", "test_run_call_order__error_in_setUp", "setUp", "test_run_call_order__error_in_tearDown", "test_run_call_order__error_in_test", "tearDown", "test_shortDescription__singleline_docstring", "test_countTestCases", "test_run_call_order__failure_in_test"], "function_calls": ["LoggingResult", "RuntimeError"], "class_names": ["Test_FunctionTestCase"], "class_method_calls": ["self.assertIsInstance", "test.shortDescription", "events.append", "self.fail", "self.assertEqual", "unittest.FunctionTestCase", "unittest.TestCase", "test.countTestCases", "unittest.main", "test.id"]}, "test_program.py": {"libraries": ["unittest", "io", "sys", "subprocess", "unittest.test", "test.support", "os"], "function_names": ["testBufferCatchFailfast", "testFail", "setUp", "test_defaultTest_with_string", "testPass", "removeTest", "fakeInstallHandler", "test_ExitAsDefault", "restore", "testCatchBreakInstallsHandler", "testParseArgsAbsolutePathsThatCanBeConverted", "testVerbosity", "test_defaultTest_with_iterable", "__init__", "run_unittest", "testRunTestsOldRunnerClass", "testParseArgsNonExistentFiles", "testParseArgsAbsolutePathsThatCannotBeConverted", "test_discovery_from_dotted_path", "testParseArgsFilePaths", "runTests", "run", "testRunTestsRunnerClass", "testSelectedTestNamesFunctionalTest", "loadTestsFromModule", "testParseArgsSelectedTestNames", "test_Exit", "testRunTestsRunnerInstance", "testNoExit", "_find_tests", "_join", "testWarning", "isfile", "test_NonExit", "loadTestsFromNames", "_patch_isfile", "parseArgs", "test_locals", "testParseArgsFileNames", "restoreParseArgs"], "function_calls": ["object", "getattr", "FakeTP", "FakeRunner", "InitialisableProgram", "run_unittest", "_join", "setattr", "hasattr"], "class_names": ["TestCommandLineArgs", "FooBar", "Test_TestProgram", "FooBarLoader", "FakeTP", "FakeRunner", "InitialisableProgram"], "class_method_calls": ["stderr.decode", "loader.discover", "p.communicate", "self.test", "sys.executable", "self.wasRun", "self.assertEqual", "program.buffer", "unittest.TestLoader", "program.tb_locals", "sys.modules", "program.warnings", "cm.exception", "os.getcwd", "FakeRunner.initArgs", "self.assertIs", "self.assertIn", "program.test", "program.parseArgs", "self.addCleanup", "self.FooBarLoader", "program.testNamePatterns", "subprocess.Popen", "program.testRunner", "program.failfast", "unittest.TextTestRunner", "io.StringIO", "program.verbosity", "FakeRunner.test", "support.captured_stderr", "self.assertRaises", "unittest.defaultTestLoader", "self.loadTestsFromTestCase", "runner.test", "self.program", "subprocess.PIPE", "self._patch_isfile", "self.assertIsNone", "unittest.main", "sys.warnoptions", "unittest.TestProgram", "os.path", "program.runTests", "self.installed", "Test_TestProgram.FooBar", "self.suiteClass", "subprocess.DEVNULL", "sys.argv", "loader._find_tests", "module.installHandler", "self.assertTrue", "suite._tests", "unittest.TestCase", "program.result", "unittest.test", "program.testNames", "program.createTests", "program.catchbreak", "FakeRunner.raiseError"]}, "test_result.py": {"libraries": ["unittest", "io", "textwrap", "sys", "test.support", "traceback"], "function_names": ["format", "testGetDescriptionWithOneLineDocstring", "testOldTestTesultSetup", "test", "testGetDescriptionWithoutDocstring", "testOldTestResult", "testBufferSetUpModule", "test_startTest", "setUp", "testBufferOutputStartTestAddSuccess", "testFailFast", "test_init", "testBufferTearDownModule", "testBufferSetupClass", "testOldTestResultClass", "testGetSubTestDescriptionWithoutDocstringAndParams", "testGetSubTestDescriptionForFalsyValues", "testGetDescriptionWithMultiLineDocstring", "testFailFastSetByRunner", "setUpModule", "testGetSubTestDescriptionWithMultiLineDocstring", "testFoo", "__init__", "testSkip", "assertOldResultWarning", "test_addFailure", "test_stopTest", "testOldResultWithRunner", "test_1", "setUpClass", "testGetSubTestDescriptionWithOneLineDocstring", "test_addSuccess", "getStartedResult", "tearDownClass", "test_addSubTest", "test_addError", "test_foo", "testBufferOutputAddErrorOrFailure", "tearDown", "test_addError_locals", "test_stop", "tearDownModule", "testGetNestedSubTestDescriptionWithoutDocstring", "testUnexpectedSuccess", "restore_traceback", "testGetSubTestDescriptionWithoutDocstring", "testBufferOutputOff", "test_startTestRun_stopTestRun", "testBufferTearDownClass", "testStackFrameTrimming", "testExpectedFail", "testGetDuplicatedNestedSubTestDescriptionWithoutDocstring"], "function_calls": ["len", "OldResult", "Foo", "getattr", "Test", "addFunction", "int", "type", "suite", "dict", "TypeError", "print"], "class_names": ["TestOutputBuffering", "TracebackException", "MockTraceback", "Foo", "tb_frame", "Test", "Frame", "Module", "Test_OldTestResult", "Test_TestResult"], "class_method_calls": ["self.assertEqual", "self.capture_locals", "sys.stdout", "self.assertIs", "unittest.TextTestRunner", "result.addUnexpectedSuccess", "unittest.result", "support.check_warnings", "self._real_err", "result.addSuccess", "sys.stderr", "self.assertTrue", "result.addFailure", "self.assertIsInstance", "result.append", "self.failures", "result.shouldStop", "io.StringIO", "Foo.__module__", "self.subTest", "result.stopTestRun", "result.testsRun", "unittest.skip", "self.assertIsNone", "self.assertIsNot", "result.addSubTest", "unittest.TestCase", "self.assertFalse", "self._subtest", "self._real_out", "result._original_stderr", "result._stderr_buffer", "result._is_relevant_tb_level", "sys.flags", "Frame.tb_frame", "unittest.TextTestResult", "result.buffer", "self.assertMultiLineEqual", "result.addError", "self.tb_locals", "self.addCleanup", "result.stopTest", "self.errors", "self.assertOldResultWarning", "result.errors", "out_stream.getvalue", "err_stream.getvalue", "unittest.main", "self.shouldStop", "self.testsRun", "unittest.TestSuite", "result.startTestRun", "self.getStartedResult", "unittest.TestResult", "test.run", "sys.modules", "result.failfast", "result.stop", "runner.run", "test.fail", "result.wasSuccessful", "self.assertIn", "self.fail", "kwargs.get", "unittest.skipIf", "sys.exc_info", "result.startTest", "result.tb_locals", "self.buffer", "result._stdout_buffer", "unittest.expectedFailure", "textwrap.dedent", "result.getDescription", "self.skipTest", "result._original_stdout", "result.failures", "result._exc_info_to_string"]}, "test_runner.py": {"libraries": ["unittest", "io", "unittest.case._Outcome", "sys", "unittest.test.support.ResultWithNoStartTestRunStopTestRun", "pickle", "subprocess", "os", "unittest.test.support.LoggingResult"], "function_names": ["setUp", "testSpecifiedStreamUsed", "testCleanupInRun", "test_init", "test_multiple_inheritance", "_makeResult", "test_addModuleCleanup_arg_errors", "test_with_errors_in_addCleanup", "success", "testBufferAndFailfast", "resultFactory", "testRunnerRegistersResult", "test_add_and_do_ModuleCleanup", "test_warnings", "testNothing", "module_cleanup_good", "testStdErrLookedUpAtInstantiationTime", "setUpModule", "test_run_module_cleanUp", "testCleanUpWithErrors", "__init__", "testFoo", "test_with_errors_addCleanUp", "printErrors", "test_addClassCleanUp", "getRunner", "runTests", "test_module_cleanUp_with_multiple_classes", "testCleanUp", "test_works_with_result_without_startTestRun_stopTestRun", "MockResultClass", "setUpClass", "test_doModuleCleanup_with_errors_in_addModuleCleanup", "module_cleanup1", "testTestCaseDebugExecutesCleanups", "test_with_errors_in_addModuleCleanup_and_setUps", "cleanup1", "class_cleanup1", "tearDownClass", "cleanup3", "module_cleanup2", "module_cleanup_bad", "tearDown", "cleanup2", "test_pickle_unpickle", "get_parse_out_err", "cleanup", "test_debug_module_executes_cleanUp", "tearDownModule", "test_with_errors_in_addClassCleanup", "test_run_class_cleanUp", "test_run_multiple_module_cleanUp", "test_startTestRun_stopTestRun_called", "test_debug_executes_classCleanUp", "class_cleanup2", "test_resultclass", "fakeRegisterResult", "test_run_with_errors_addClassCleanUp", "test_locals", "test_addClassCleanup_arg_errors", "test_addCleanup_arg_errors", "test_doClassCleanups_with_errors_addClassCleanUp", "test_with_errors_in_addClassCleanup_and_setUps"], "function_calls": ["object", "Runner", "reversed", "OldTextResult", "LoggingTextResult", "ATextResult", "super", "str", "dict", "Exception", "getRunner", "range", "runTests", "TestableTest", "Test", "_Outcome", "get_parse_out_err", "len", "LoggingRunner"], "class_names": ["ATextResult", "Test_TextTestRunner", "TestableTest2", "TestableTest", "Runner", "Test", "TestCleanUp", "AResult", "Module", "OldTextResult", "TestClassCleanup", "Module2", "OtherTestableTest", "TestModuleCleanUp", "LoggingRunner", "Module1", "LoggingTextResult"], "class_method_calls": ["TestableTest.doClassCleanups", "test.addCleanup", "runner._makeResult", "p.communicate", "unittest.runner", "unittest.TestResult", "sys.executable", "self.assertEqual", "test.run", "runner.resultclass", "sys.modules", "e.exception", "unittest.TextTestResult", "result.failfast", "runner.run", "obj.stream", "suite.debug", "result.buffer", "self.assertIn", "self.addCleanup", "self.pythonwarnings", "runner.descriptions", "test._class_cleanups", "subprocess.Popen", "unittest.TextTestRunner", "runner.buffer", "io.StringIO", "class_cleanups.append", "outcome.errors", "test.doCleanups", "unittest.case", "self._events", "ordering.append", "self.assertRaises", "self.assertWarns", "unittest.defaultTestLoader", "self2.addCleanup", "stream.getvalue", "test.debug", "result.tb_locals", "out.count", "b.splitlines", "result.errors", "realSuite.addTest", "TestableTest2.__module__", "subprocess.PIPE", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "test._cleanups", "suite.addTest", "os.environ", "result.addSuccess", "self.assertFalse", "unittest.main", "runner.failfast", "runner.tb_locals", "cleanups.append", "test._outcome", "runner.stream", "suite.addTests", "OtherTestableTest.__module__", "os.path", "sys.stderr", "unittest.addModuleCleanup", "unittest.TestSuite", "outcome.success", "runner.verbosity", "runner.warnings", "pickle.dumps", "self.assertTrue", "TestableTest.__module__", "module_cleanups.append", "unittest.TestCase", "self.wasRegistered", "cls.addClassCleanup", "TestableTest.addClassCleanup"]}, "test_setups.py": {"libraries": ["sys", "io", "unittest"], "function_names": ["test_error_in_teardown_module", "test_error_in_teardown_class", "test_two", "resultFactory", "testOne", "test_skiptest_in_setupmodule", "test_testcase_with_missing_module", "test_setup_teardown_order_with_pathological_suite", "test_class_not_setup_or_torndown_when_skipped", "setUpModule", "test_teardown_class", "test_setup_class", "test_teardown_class_two_classes", "getRunner", "test_setup_module", "runTests", "test_suite_debug_executes_setups_and_teardowns", "setUpClass", "test_teardown_module", "test_class_not_torndown_when_setup_fails", "test_suite_debug_propagates_exceptions", "test_one", "tearDownClass", "test_error_in_setupclass", "test_something", "tearDownModule", "test_skiptest_in_setupclass", "test_error_in_setup_module", "testTwo"], "function_calls": ["TypeError", "len", "str", "Test2", "Test3", "Exception", "enumerate", "Test1"], "class_names": ["Test", "Test2", "TestSetups", "Module", "Test3", "Module2", "BrokenTest", "Test1", "Module1"], "class_method_calls": ["results.append", "unittest.TestResult", "Test.classTornDown", "self.assertEqual", "sys.modules", "runner.run", "self.assertRaisesRegex", "Test.tearDownCalled", "suite.debug", "unittest.SkipTest", "self.runTests", "Test.classSetUp", "result.skipped", "Test.__qualname__", "unittest.TextTestRunner", "io.StringIO", "Test2.tearDownCalled", "Test.tornDown", "Module.moduleSetup", "Test.setUpCalled", "ordering.append", "unittest.defaultTestLoader", "Module.moduleTornDown", "result.testsRun", "unittest.skip", "result.errors", "realSuite.addTest", "suite.addTest", "Test3.__module__", "unittest.main", "BrokenTest.__qualname__", "Test2.tornDown", "Test1.__module__", "suite.addTests", "Test2.__module__", "unittest.TestSuite", "self.getRunner", "self.assertTrue", "Test.__module__", "unittest.TestCase", "self.assertFalse"]}, "test_skipping.py": {"libraries": ["unittest", "unittest.test.support.LoggingResult"], "function_names": ["test_expected_failure_with_wrapped_class", "test_expected_failure", "setUp", "test_die", "test_skip_without_reason", "decorator", "test_skip_non_unittest_class", "tornDown", "test_skipping_subtests", "test_skipping", "test_dont_skip", "test_unexpected_success", "test_skipping_decorators", "test_skip_me", "test_1", "test_skip", "test_skip_doesnt_run_setup", "test_decorated_skip", "test_unexpected_success_subtests", "inner", "test_expected_failure_with_wrapped_subclass", "test_skip_class", "test_expected_failure_subtests", "test_nothing"], "function_calls": ["LoggingResult", "len", "func", "Foo", "deco", "Bar"], "class_names": ["Test_TestSkipping", "Foo", "Mixin", "Bar"], "class_method_calls": ["Foo.wasSetUp", "self.assertIsInstance", "unittest.TestResult", "unittest.skipUnless", "self.assertEqual", "test.run", "self.assertIs", "result.wasSuccessful", "result.skipped", "self.fail", "self.subTest", "unittest.skipIf", "result.testsRun", "unittest.skip", "unittest.TestCase", "unittest.expectedFailure", "self.assertIsNot", "Foo.wasTornDown", "unittest.main", "result.expectedFailures", "result.unexpectedSuccesses", "unittest.TestSuite", "self.skipTest", "record.append", "self.assertTrue", "suite.run", "self.assertFalse", "result.failures"]}, "test_suite.py": {"libraries": ["unittest", "gc", "unittest.test.support.TestEquality", "sys", "weakref", "unittest.test.support.LoggingResult"], "function_names": ["test_addTest__casesuiteclass", "test", "test_addTest__TestCase", "test_overriding_call", "test_2", "test_3", "testFail", "testPass", "test_countTestCases_zero_nested", "test_addTests__string", "gen", "runTest", "test_run__requires_result", "test_init__tests_optional", "test_addTest__TestSuite", "test1", "test_init__tests_from_any_iterable", "setUpModule", "test_countTestCases_simple", "assert_garbage_collect_test_after_run", "__call__", "test_basetestsuite", "test_remove_test_at_index", "test_1", "setUpClass", "test_run__empty_suite", "test_remove_test_at_index_not_indexable", "run", "test_garbage_collect_test_after_run_BaseTestSuite", "test_addTest__noniterable", "test_addTests", "test_run", "tearDownClass", "test_garbage_collect_test_after_run_TestSuite", "test_init__empty_tests", "test_function_in_suite", "f", "tests", "test2", "tearDownModule", "_mk_TestSuite", "test_iter", "test_init__TestSuite_instances_in_tests", "test_countTestCases_zero_simple", "test_countTestCases_nested", "test_nothing", "test_addTest__noncallable"], "function_calls": ["LoggingResult", "list", "len", "Foo", "TestSuiteClass", "wref", "Test", "set", "LoggingCase", "_mk_TestSuite", "gen", "wrapper", "Test1", "tests", "MySuite"], "class_names": ["Foo", "Test", "LoggingCase", "Module", "Test_TestSuite", "Test1", "MySuite"], "class_method_calls": ["suite_3.countTestCases", "suite._removeTestAtIndex", "unittest.TestResult", "self.assertEqual", "unittest.FunctionTestCase", "sys.modules", "Module.wasTornDown", "suite_2.run", "suite_3.run", "cls.wasTornDown", "parent.run", "events.append", "unittest.SkipTest", "self.fail", "self.addCleanup", "suite_2.addTest", "wrapper.addTest", "self.assertRaises", "self.called", "result._testRunEntered", "result.testsRun", "suite_1.addTests", "result.errors", "weakref.ref", "Module.wasSetUp", "unittest.BaseTestSuite", "suite.called", "suite.addTest", "self.assertIsNone", "suite.run", "unittest.main", "self._testMethodName", "Test.wasSetUp", "Test.Foo", "suite.addTests", "suite_1.countTestCases", "suite_2.countTestCases", "parent.countTestCases", "suite_1.run", "unittest.TestSuite", "Test.wasTornDown", "suite.countTestCases", "self.assert_garbage_collect_test_after_run", "child.countTestCases", "self.assertTrue", "Test.__module__", "suite._tests", "gc.collect", "unittest.TestCase", "self.assertFalse", "cls.wasSetUp", "result.failures"]}, "testasync.py": {"libraries": ["unittest", "unittest.mock.MagicMock", "re", "unittest.mock.ANY", "unittest.mock.call", "unittest.mock.create_autospec", "inspect", "unittest.mock.sentinel", "unittest.mock._CallList", "unittest.mock.patch", "unittest.mock.AsyncMock", "unittest.mock.Mock", "asyncio"], "function_names": ["test_is_async_patch", "test_assert_called_once_and_awaited_twice", "test_assert_not_awaited", "test_aiter_set_return_value", "test_magic_methods_are_async_functions", "test_spec_as_normal_positional_AsyncMock", "test_async_method_calls_recorded", "test_assert_has_mock_calls_on_async_mock_with_spec", "test_sync_magic_methods_return_magic_mocks", "__init__", "__aiter__", "test_future_isfuture", "test_set_return_value", "test_mock_supports_async_context_manager", "test_magicmock_lambda_spec", "test_iscoroutinefunction_default", "test_patch_with_autospec", "test_assert_called_then_awaited", "test_mock_customize_async_context_manager_with_coroutine", "test_assert_has_awaits_no_order", "test_assert_any_wait", "test_async_arg_lists", "test_iscoroutinefunction_normal_function", "test_async_magic_methods_return_async_mocks", "__exit__", "test_attribute_not_async_spec_is", "test_set_return_value_iter", "test_is_async_AsyncMock", "test_asyncmock_has_sync_magic_methods", "test_magicmock_has_async_magic_methods", "test_assert_has_awaits_ordered", "test_assert_awaited_once_with", "test_iscoroutinefunction_function", "test_spec_mock_type_positional", "__await__", "test_no_parent_attribute", "a", "test_create_autospec_instance", "inner_test", "test_async", "test_async_def_cm", "tearDownModule", "test_assert_awaited_with", "test_async_attributes_coroutines", "test_assert_awaited", "test_normal_method", "test_spec_async_mock", "test_assert_has_awaits_not_matching_spec_error", "test_mock_customize_async_context_manager", "test_spec_parent_not_async_attribute_is", "test_async_attribute", "setUp", "test_assert_has_mock_calls_on_async_mock_no_spec", "test_spec_normal_methods_on_class", "test_default", "normal_func", "test_target_not_async_spec_is", "test_async_def_patch", "test_mock_aiter_and_anext_asyncmock", "test_assert_called_twice_and_awaited_once", "normal_method", "test_is_child_AsyncMock", "assert_attrs", "test_context_manager_raise_exception_by_default", "test_is_AsyncMock_patch_classmethod", "test_assert_called_and_awaited_at_same_time", "test_is_async_function_cm", "test_is_async_cm", "test_assert_called_but_not_awaited", "test_create_autospec", "test_isawaitable", "test_spec_mock_type_kw", "test_assert_has_calls_not_awaits", "test_mock_async_for", "test_create_autospec_awaitable_class", "test_spec_normal_methods_on_class_with_mock", "__enter__", "test_is_AsyncMock_cm", "test_is_AsyncMock_patch_staticmethod", "test_is_AsyncMock_patch", "test_assert_awaited_but_not_called", "test_set_return_value_of_aenter", "test_is_coroutine_function_patch", "test_spec_as_normal_kw_AsyncMock", "inner", "test_target_async_spec_not", "test_spec_async_attributes", "addition", "foo", "test_assert_awaited_once"], "function_calls": ["object", "test_async_attribute", "AsyncMock", "MagicMock", "getattr", "test_attribute_not_async_spec_is", "use_context_manager", "Mock", "mock_method", "test_set_return_value_iter", "async_func", "AwaitableClass", "async_mock", "SampleException", "test_default", "call", "iter", "mock", "test_no_parent_attribute", "test_set_return_value", "Exception", "inner_test", "test_async", "async_func_args", "assert_attrs", "dir", "patch", "mock_type", "raise_in", "spec", "hasattr", "len", "test_async_attributes_coroutines", "iterate", "test_normal_method", "main", "TypeError", "create_autospec"], "class_names": ["AsyncMockAssert", "AsyncIteratorTest", "AsyncContextManagerTest", "AwaitableClass", "AsyncAutospecTest", "SampleException", "AsyncSpecSetTest", "AsyncPatchCMTest", "AsyncMockTest", "WithAsyncIterator", "AsyncArguments", "AsyncPatchDecoratorTest", "WithSyncContextManager", "NormalClass", "ProductionCode", "WithAsyncContextManager", "AsyncSpecTest", "AsyncMagicMethods", "AsyncClass"], "class_method_calls": ["m_mock.__aiter__", "self.assertEqual", "mock.async_method", "self.assertIs", "loop.close", "inspect.iscoroutinefunction", "spec.await_args", "spec.await_count", "a_mock.__len__", "mock_method.assert_awaited", "self.assertRaises", "mock_method.await_args_list", "self._await_coroutine", "mock_method.normal_method", "a_class_mock.mock_calls", "mock_instance.__aexit__", "unittest.IsolatedAsyncioTestCase", "inspect.isawaitable", "async_mock.await_args_list", "asyncio.Future", "self.assertTrue", "asyncio.run", "self.assertIsInstance", "instance.__aiter__", "asyncio.set_event_loop", "spec.await_args_list", "mock_method.reset_mock", "re.escape", "mock_method.await_count", "cm.exception", "fut.set_result", "m_mock.__aenter__", "self.WithAsyncContextManager", "pc.session", "self.items", "response.json", "asyncio.set_event_loop_policy", "self.subTest", "self.entered", "mock.assert_awaited", "accumulator.append", "spec.assert_awaited_with", "asyncio.new_event_loop", "inspect.iscoroutine", "func_args_mock._mock_name", "self.assertIsNone", "self.assertIsNot", "spec.assert_awaited_once", "spec.assert_awaited_once_with", "self.ProductionCode", "spec.assert_awaited", "m_mock.__aexit__", "spec.assert_not_awaited", "asyncio.iscoroutine", "unittest.TestCase", "self.assertFalse", "sentinel.Cake", "func_mock._mock_name", "a_mock.reset_mock", "pc.main", "self.session", "async_mock.assert_has_awaits", "a_mock.__exit__", "m_mock.__anext__", "patch.object", "mock_method.assert_not_awaited", "MockNormalClass.async_method", "self.assertWarns", "a_class_mock.async_method", "self.WithAsyncIterator", "mock_instance.__aenter__", "a_mock.__enter__", "self.exited", "async_mock.call_args_list", "mock_instance.__aiter__", "NormalClass.a", "mock_method.mock", "cm_mock.__aexit__", "mock_method.assert_awaited_with", "mock_instance.__anext__", "self.mock", "AsyncClass.async_method", "cm_mock.__aenter__", "instance.__anext__", "a_mock.__next__", "self.assertRaisesRegex", "mock_obj.mock_func", "self.assertIn", "mock.normal_method", "mock_method.await_args", "asyncio.iscoroutinefunction", "a_mock.async_method", "mock_method.assert_awaited_once_with", "mock_iter.__aiter__", "cm.__aenter__", "self._runnable_test", "loop.stop", "mock_method.assert_awaited_once", "call.async_method", "mock_method.async_method"]}, "testcallable.py": {"libraries": ["unittest", "unittest.mock.Mock", "unittest.mock.MagicMock", "unittest.mock.NonCallableMock", "unittest.mock.CallableMixin", "unittest.mock.create_autospec", "unittest.mock.NonCallableMagicMock", "unittest.mock.patch", "unittest.test.testmock.support.is_instance", "unittest.test.testmock.support.SomeClass", "unittest.test.testmock.support.X"], "function_names": ["test_subclasses", "test_non_callable", "test_patch_spec_instance", "test_patch_spec_set", "test_patch_spec_callable_class", "assertNotCallable", "test_create_autospec", "test_hierarchy", "test_create_autospec_instance", "__call__", "test_patch_spec", "test_attributes", "test_patch_spec_set_instance"], "function_calls": ["NonCallableMock", "result", "issubclass", "is_instance", "mock", "patch", "NonCallableMagicMock", "type", "repr", "hasattr", "MagicSub", "MockSub", "instance", "create_autospec", "X"], "class_names": ["TestCallable", "Sub", "CallableX", "Multi", "MagicSub", "MockSub"], "class_method_calls": ["patcher.stop", "result.foo", "mock.__class__", "self.assertIn", "patcher.start", "mock.assert_called_once_with", "self.addCleanup", "two.two", "instance.assert_called_once_with", "self.assertTrue", "one.one", "result.assert_called_once_with", "mock.wibble", "unittest.TestCase", "self.assertNotCallable", "self.assertFalse", "unittest.main", "self.assertRaises"]}, "testhelpers.py": {"libraries": ["unittest", "unittest.mock.MagicMock", "unittest.mock.call", "unittest.mock.ANY", "types", "time", "unittest.mock.create_autospec", "unittest.mock._callable", "datetime.datetime", "functools.partial", "inspect", "unittest.mock._CallList", "unittest.mock.patch", "unittest.mock.PropertyMock", "unittest.mock.Mock", "unittest.mock._Call"], "function_names": ["test_call_with_name", "test_nested_calls_not_equal", "test_attributes", "test_create_autospec_return_value", "test_call_with_args", "test_named_call_with_args", "test_builtins", "three", "__init__", "test_builtin_functions_types", "test_function", "test_spec_inspect_signature", "test_skip_attributeerrors", "classfunc", "test_spec_function_no_name", "test_inherit", "test_propertymock_returnvalue", "existing", "test_dunder_call", "test_autospec_functions_with_self_in_odd_place", "test_spec_function_assert_has_calls", "test_two_args_call", "test_spec_as_list", "test_spec_inspect_signature_annotations", "test_any", "test_basic", "test_method_calls", "test_autospec_on_bound_builtin_function", "_check_someclass_mock", "test_extended_call", "test_call", "test_recursive", "test_non_callable_staticmethod", "test_type", "test_call_list", "test_spec_has_function_not_in_bases", "test_spec_function_assert_any_call", "one", "test_non_callable_classmethod", "a", "__call__", "__set__", "subprop", "test_class_with_no_init", "test_named_empty_call", "staticfunc", "test_create_autospec_none", "f", "test_signature_noncallable", "test_named_call_with_kwargs", "test_create_autospec_keyword_only_arguments", "test_spec_set", "test_empty__Call", "prop", "test_magic_methods", "myfunc", "test_descriptors", "two", "__get__", "test_call_with_args_call_empty_name", "test_classmethod", "test_spec_function_reset_mock", "test_call_list_str", "test_propertymock", "test_args_list_contains_call_list", "test_spec_has_descriptor_returning_function", "test_create_autospec_keyword_arguments", "test_extended_not_equal", "bar", "test_any_and_datetime", "test_any_mock_calls_comparison_order", "__getattr__", "test_autospec_reset_mock", "test_autospec_getattr_partial_function", "test_spec_inheritance_for_classes", "test_signature_callable", "__dir__", "test_autospec_data_descriptor", "test_repr", "test_call_non_tuples", "__eq__", "test_call_magic_method", "test_attribute_call", "__ne__", "test_call_ne", "test_call_any", "test_function_as_instance_attribute", "test_call_with_kwargs", "test_mocking_unbound_methods", "test_signature_class", "test_staticmethod", "test_call_with_call", "g", "check_data_descriptor", "foo"], "function_calls": ["Callable", "object", "CrazyDescriptor", "meth", "MagicMock", "NonCallable", "mocked", "_callable", "Mock", "SomeClass", "PropertyMock", "classmethod", "Descriptor", "Bar", "repr", "AttributeError", "Sub", "super", "Foo", "iter", "str", "mock", "call", "Baz", "mock_attr", "staticmethod", "dict", "instance", "_Call", "list", "partial", "set", "patch", "int", "type", "hasattr", "CrazyClass", "len", "class_mock", "m", "check_data_descriptor", "foo", "create_autospec", "Raiser"], "class_names": ["Callable", "AnyTest", "CrazyDescriptor", "BadClassMethod", "NonCallable", "SomeClass", "Descriptor", "Bar", "SpecSignatureTest", "Sub", "WithStaticMethod", "Foo", "Baz", "WithClassMethod", "A", "MyClass", "TestCallList", "TestCallablePredicate", "MyProperty", "RaiserClass", "CallTest", "CrazyClass", "BuiltinSubclass", "Raiser", "BadStaticMethod"], "class_method_calls": ["mock.three", "self._check_someclass_mock", "mock.foo", "A.foo", "self.assertEqual", "self.assertNotEqual", "mocked.reset_mock", "self.assertIs", "mock.assert_any_call", "types.MethodType", "mock.assert_has_calls", "this_mock.a", "foo.prop", "expected.extend", "call.one", "rv.mock_calls", "mock.assert_called_with", "self.assertRaises", "mock.mock_calls", "mock.reset_mock", "mock.some_attr", "kall.call_list", "f.f", "s.one", "s.raiser", "datetime.now", "A.bar", "mocked.assert_called_once_with", "foo.subprop", "self.assertTrue", "foo.desc", "args.kwargs", "self.assertIsInstance", "BadClassMethod.not_callable", "call.B", "foo.slot", "inst.other", "RaiserClass.existing", "mock.method", "mock.attr", "instance_mock.a", "mock_attr.abc", "mock.call_args", "call.a", "p.start", "self.assertNotIn", "sub_mock.attr", "m.foo", "m.assert_called_with", "mock.a", "self.assertIsNot", "WithStaticMethod.staticfunc", "obj.f", "mock.__name__", "inspect.signature", "s.existing", "unittest.TestCase", "self.assertFalse", "mock.append", "m.reset_mock", "mock.one", "self.value", "mock.method_calls", "A.B", "mock.f", "BadStaticMethod.not_callable", "mock.assert_called_once_with", "time.ctime", "patch.object", "mock.bar", "args.args", "mock.sorted", "obj.bar", "m.mock_calls", "call.bar", "call.foo", "m.a", "unittest.main", "time.time", "p.assert_called_once_with", "call.two", "a.f", "Foo.Foo", "instance.assert_called_once_with", "call.three", "mock.call_args_list", "p.stop", "instance_mock.Bar", "call.method", "self.assertNotIsInstance", "s.nonexisting", "WithClassMethod.classfunc", "mock.two", "self.assertIn", "SomeClass.one", "obj.foo", "mock.Foo", "instance.assert_called_with", "inst.crazy", "mock_attr.assert_called_once_with", "m.__int__", "last_call.call_list", "call.attr", "mock_foo.assert_called_with", "none.foo", "mock.crazy", "mock.g", "mock.B"]}, "testmagicmethods.py": {"libraries": ["unittest", "unittest.mock.MagicMock", "unittest.mock.AsyncMock", "unittest.mock._magics", "sys", "math", "os", "unittest.mock.Mock", "asyncio"], "function_names": ["test_magic_methods_and_spec_set", "set_int", "_get_type", "test_equality", "test_changing_magic_set_in_initialization", "comp", "delitem", "set_setattr", "test_repr", "getitem", "test_comparison", "test_bound_methods", "test_dir", "ne", "test_division", "_dir", "test_str", "test_magic_method_reset_mock", "test_magic_in_initialization", "_del", "test_magicmock_defaults", "test_asyncmock_defaults", "_set", "test_iterable_as_iter_return_value", "test_magic_methods_and_spec", "test_divmod_and_rdivmod", "truediv", "test_len_contains_iter", "test_nonzero", "test_descriptor_from_class", "itruediv", "_hash", "test_magic_methods_fspath", "test_magic_methods_are_magic_mocks", "test_matmul", "test_magic_methods_isolated_between_mocks", "eq", "test_setting_unsupported_magic_method", "test_magic_method_wrapping", "test_attributes_and_return_value", "__iter__", "test_deleting_magic_methods", "test_dict_methods", "test_hash", "test_magic_mock_equality", "setitem", "test_numeric", "test_magicmock_del", "f", "iadd", "test_magic_method_type", "add", "test_magicmock"], "function_calls": ["object", "_get_type", "AsyncMock", "MagicMock", "getattr", "Mock", "id", "repr", "Foo", "iter", "str", "mock", "complex", "hash", "list", "hex", "dir", "int", "type", "bool", "float", "hasattr", "divmod", "len", "oct", "round"], "class_names": ["TestMockingMagicMethods", "Foo", "NonIterable", "Iterable"], "class_method_calls": ["self.assertIsInstance", "mock.__add__", "mock.__round__", "m.__bool__", "mock.__int__", "mock.__repr__", "mock.foo", "math.floor", "self.assertEqual", "mock.__iadd__", "m.__iter__", "mock.__dir__", "m.__matmul__", "object.__str__", "Mock.__hash__", "mock.__ceil__", "mock.__str__", "math.trunc", "self.assertRaisesRegex", "mock.__contains__", "self.assertIs", "mock.__aenter__", "m.__rmatmul__", "os.fspath", "self.assertIn", "mock.__lt__", "object.__hash__", "m.__divmod__", "mock.__rtruediv__", "mock.__eq__", "self.assertNotIn", "math.ceil", "mock.__delitem__", "m.__str__", "mock.__hash__", "m.configure_mock", "self.assertRaises", "asyncio.iscoroutinefunction", "unittest.skipIf", "mock.reset_mock", "mock.__truediv__", "m.__rdivmod__", "mock.__trunc__", "mock.__ne__", "mock.__floor__", "mock.__gt__", "mock.__radd__", "self.assertIsNot", "mock.__iter__", "unittest.main", "mock.__fspath__", "mock.__aexit__", "m.__imatmul__", "mock.__setattr__", "mock1.__iter__", "sys.version", "mock.__getitem__", "mock.__setitem__", "mock.value", "mock.__itruediv__", "self.assertTrue", "mock.__ge__", "unittest.TestCase", "mock.__len__", "self.assertFalse", "mock.__le__", "foo.__int__"]}, "testmock.py": {"libraries": ["unittest.mock.MagicMock", "unittest.mock.sentinel", "unittest.mock", "unittest.mock.AsyncMock", "unittest", "unittest.mock.NonCallableMock", "copy", "unittest.mock._CallList", "re", "tempfile", "unittest.mock.patch", "unittest.mock.call", "unittest.mock.create_autospec", "unittest.mock.NonCallableMagicMock", "sys", "unittest.mock.DEFAULT", "unittest.test.testmock.support.is_instance", "unittest.mock.Mock", "unittest.mock._Call"], "function_names": ["y", "test_parent_propagation_with_create_autospec", "test_assert_called_once_with_message", "test_attach_mock_patch_autospec", "_check", "test_attributes", "test__name__", "test_assert_called_with", "_get", "test_mock_open_alter_readline", "test_mock_open_after_eof", "__init__", "_set", "test_reset_mock_recursion", "test_from_spec", "test_arg_lists", "test_mock_open_write", "test_spec_class_no_object_base", "test_attribute_deletion", "test_reset_mock_does_not_raise_on_attr_deletion", "test_name_attribute_of_call", "test_autospec_side_effect", "test_dir_does_not_include_deleted_attributes", "__iter__", "test_mock_call_not_equal_non_leaf", "test_change_side_effect_via_delegate", "test_spec_class", "test_mock_call_not_equal_non_leaf_params_different", "cmeth", "test_assert_called_with_method_spec", "test_customize_wrapped_object_with_side_effect_exception", "test_mock_calls_contains", "test_reset_return_sideeffect", "test_adding_child_mock", "test_mock_open_dunder_iter_issue", "test_mock_call_not_equal_non_leaf_attr", "test_baseexceptional_side_effect", "test_mock_call_not_equal_leaf", "test_assert_called_once_with_call_list", "test_mock_call_repr_loop", "test_side_effect_iterator_exceptions", "test_side_effect", "test_return_value_in_constructor", "test_method_calls_compare_easily", "test_call", "test_mock_add_spec_magic_methods", "test_wraps_calls", "test_attributes_have_name_and_parent_set", "test_assert_has_calls_any_order", "test_assert_has_calls", "test_attach_mock_patch_autospec_signature", "test_exceptional_side_effect", "__call__", "test_mock_calls", "test_reset_mock_on_mock_open_issue_18622", "test_attach_mock_return_value", "test_ordered_call_signature", "test_dir_from_spec", "test_configure_mock", "trace", "test_wraps_call_with_nondefault_return_value", "test_call_args_comparison", "test_magic_methods_mock_calls", "side_effect", "test_subclass_with_properties", "f", "test_call_args_two_tuple", "set_attr", "test_spec_list_subclass", "test_mock_does_not_raise_on_repeated_attribute_deletion", "effect", "test_reset_return", "test_side_effect_setting_iterator", "smeth", "test_mock_call_repr", "_get_child_mock", "test_attribute_access_returns_mocks", "test_assert_called_once_with_function_spec", "test", "test_parent_attribute_of_call", "test_assert_called_with_message", "test_create_autospec_classmethod_and_staticmethod", "test_assert_called_exception_message", "static_method", "test_customize_wrapped_object_with_return_value_and_side_effect2", "test_dir", "test_child_mock_call_equal", "test_mock_call_not_equal_non_leaf_call_versus_attr", "test_assert_any_call_with_function_spec", "test_mock_open_reuse_issue_21750", "test_autospec_side_effect_exception", "test_override_tuple_methods", "test_assert_has_calls_nested_without_spec", "test_change_return_value_via_delegate", "test_repr_with_spec", "test_customize_wrapped_object_with_side_effect_iterable", "test_side_effect_iterator", "test_setting_call", "test_reset_sideeffect", "test_assert_called", "test_assert_any_call", "test_adding_return_value_mock", "test_wraps_attributes", "test_create_autospec_with_name", "test_class_assignable", "method", "test_assert_has_calls_with_function_spec", "assert_attrs", "test_method_calls_recorded", "test_mock_unsafe", "test_calls_equal_with_any", "test_customize_wrapped_object_with_side_effect_iterable_with_default", "test_mock_parents", "test_customize_wrapped_object_with_return_value", "class_method", "test_assert_called_with_function_spec", "test_copy", "test_assert_has_calls_nested_spec", "test_attach_mock", "test_assert_called_with_any", "test_mock_add_spec", "test_assert_called_with_failure_message", "test_parent_propagation_with_autospec_attach_mock", "test_isinstance_under_settrace", "test_manager_mock", "something", "test_setting_attribute_with_spec_set", "test_assert_called_once", "test_customize_wrapped_object_with_return_value_and_side_effect_default", "test_subclassing", "meth", "test_repr", "test_assert_called_once_with", "test_assert_not_called_message", "test_wraps_prevents_automatic_creation_of_mocks", "assertRaisesWithMsg", "test_mock_raises_when_deleting_nonexistent_attribute", "test_constructor", "test_assert_called_once_message", "test_assert_has_calls_not_matching_spec_error", "test_side_effect_iterator_default", "test_customize_wrapped_object_with_side_effect_function", "meth1", "next", "test_reset_mock", "test_mock_open_using_next", "test_filter_dir", "test_mock_calls_create_autospec", "test_assert_called_once_message_not_called", "test_customize_wrapped_object_with_return_value_and_side_effect", "attempt", "test_only_allowed_methods_exist", "foo", "test_all", "test_assert_not_called"], "function_calls": ["NonCallableMock", "object", "_check", "MagicMock", "mock_class", "getattr", "Mock", "reversed", "mock_method", "mocked_open", "Something", "Klass2", "test_attributes", "id", "KeyboardInterrupt", "Klass", "repr", "mopen", "AttributeError", "Sub", "iter", "str", "mock", "call", "dict", "range", "_open", "X", "setattr", "ValueError", "Subclass", "list", "NameError", "property", "SubClass", "set", "dir", "assert_attrs", "K", "int", "next", "zip", "type", "func", "float", "OSError", "SystemError", "hasattr", "Real", "len", "Iter", "is_instance", "m", "NonCallableMagicMock", "return_value", "callable", "mock_func", "TypeError", "real", "create_autospec", "something", "exec"], "class_names": ["Subclass", "Real", "_One", "Iter", "Sub", "TestClass", "_Two", "Foo", "SubClass", "Something", "Anything", "MockTest", "X"], "class_method_calls": ["mock.three", "call.name", "parent.mock_calls", "mock.__class__", "mock.foo", "mock.return_value", "self.assertEqual", "self.assertNotEqual", "e.exception", "m.count", "self.assertRaisesWithMsg", "mock_write.side_effect", "m.b", "self.assertIs", "mock.assert_any_call", "mock.y", "mock.assert_has_calls", "patcher.start", "mocked.assert_has_calls", "sentinel.VALUE2", "call.one", "real.assert_called_with", "mock.assert_called_with", "Something.cmeth", "call.wibble", "mock.mock", "self.assertRaises", "mock.reset_mock", "mock.mock_calls", "f2.read", "m.assert_foo_call", "call.__int__", "self.thing", "m.return_value", "mock.c", "sentinel.RETURN", "something._mock_name", "s.some_attribute", "sentinel.SomethingElse", "result.mock_calls", "m.assert_called_once_with", "self.assertTrue", "sentinel.ReturnValue", "call.baz", "klasses.append", "mock._mock_name", "mock.version", "self.assertIsInstance", "mock.__int__", "a.reset_mock", "obj.meth", "unittest.mock", "re.escape", "mock_filehandle.write", "mock.method", "Something.smeth", "m2.foo", "mock.baz", "p1.start", "cm.exception", "call.child", "mock.called", "sentinel.Kwarg", "mock.call_args", "patch.dict", "m.meth", "manager.attach_mock", "mopen.return_value", "self.assertNotIn", "mock.fish", "sentinel.VALUE", "f1.__next__", "mock.bam", "mock_namedtemp.return_value", "m.foo", "call.bam", "sentinel.SideEffect", "p2.start", "m.assert_not_called", "m.assert_called_with", "self.subTest", "call.meth", "mock.mock_add_spec", "mock.a", "self.assertRegex", "call.attach_meth", "mock.call", "m.Foo", "self._increment_mock_call", "results.pop", "self.assertIsNone", "call.count", "patcher.stop", "obj.f", "mock._mock_methods", "sentinel.ORIGINAL_VALUE", "mock.something_else", "mock.__name__", "return_value.called", "mock.call_count", "sys.settrace", "msg.format", "s.foo", "call.spam", "unittest.TestCase", "m.attach_mock", "self.assertFalse", "parent.child", "h.readline", "mock.b", "copy.copy", "sentinel.Cake", "manager.assert_has_calls", "mock.append", "m.reset_mock", "m.startswith", "real.reset_mock", "m.assret_foo_call", "call.parent", "mock.method_calls", "mock.create_autospec", "self._mock_call", "mock.new_attr", "mock.one", "m.one", "call.attach_obj", "mock.f", "mock.side_effect", "sentinel.VALUE1", "m.hello", "mock.attribute", "mock.assert_called_once_with", "mock.__something__", "self.addCleanup", "patch.object", "result.wibble", "mock.x", "call.index", "mock.bar", "p2.stop", "f1.read", "m.side_effect", "m.bar", "m.mock_calls", "m.method_calls", "call.bar", "call.foo", "sentinel.Arg", "expected.append", "real.called", "m.a", "call.__float__", "unittest.main", "sys.getrecursionlimit", "p1.stop", "mock.spam", "call.two", "mock.__dict__", "h.readlines", "Real.attribute", "mock._mock_parent", "sentinel.Something", "mock.MagicMock", "mock.call_args_list", "something._mock_parent", "manager.mock_calls", "mock.something", "real.attribute", "self.assertIsNotNone", "sentinel.WRONG_VALUE", "Foo.one", "self.assertNotIsInstance", "m.__float__", "h.read", "sys.setrecursionlimit", "mock.mock_open", "kalls2.extend", "something.mock_calls", "sys.modules", "tempfile.NamedTemporaryFile", "m.assert_called_once", "self.assertRaisesRegex", "something.assert_has_calls", "context.exception", "mock_method.assert_called_once_with", "mock.two", "sentinel.KeyArg", "self.assertIn", "mocks.append", "mock._mock_children", "mock_class.assert_has_calls", "mock.configure_mock", "func.mock_calls", "m.index", "call.attach_func", "m.assert_has_calls", "mock_func.mock_calls", "m.__int__", "call.non_existent", "mock.patch", "mock.__iter__", "mock.child", "mock_func.mock", "call.Foo", "parent.attach_mock", "Foo.two", "mock_class.reset_mock", "sys.gettrace", "mock.ANY", "mock.m", "mock.d"]}, "testpatch.py": {"libraries": ["unittest", "unittest.mock.CallableMixin", "unittest.mock.NonCallableMock", "unittest.mock.MagicMock", "unittest.mock._patch", "unittest.mock.call", "unittest.mock._get_target", "unittest.mock.NonCallableMagicMock", "unittest.test.testmock.support", "unittest.mock.sentinel", "sys", "unittest.mock.patch", "unittest.mock.DEFAULT", "unittest.test.testmock.support.is_instance", "test.test_importlib.util.uncache", "unittest.test.testmock.support.SomeClass", "os", "unittest.mock.Mock"], "function_names": ["test_name_preserved", "test_patch_class_attribute", "_test", "test_patch_stopall", "test_patch_start_stop", "test_patchobject_with_none", "test_patch_dict_with_container_object", "test_patch_multiple_new_callable", "test_stop_idempotent", "test_special_attrs", "get_patch", "test_patch_dict_as_context_manager", "test_patch_dict_keyword_args", "test_spec_set_inherit", "test_autospec_inherits", "test_patch_slots", "test1", "test_patch", "function", "test_new_callable_patch", "test_stopall_lifo", "woot", "__init__", "test_spec_set_true", "test_patch_dict_start_stop", "test_create_and_specs", "test_ord", "test_patch_with_static_methods", "test_new_callable_create", "test_patch_keyword_args", "test_patch_with_create_mocks_non_existent_attributes", "test_patchobject_start_stop", "not_test_method", "__iter__", "test_multiple_specs", "test_patch_with_spec_as_list", "test_get_only_proxy", "test_patch_multiple_create_mocks_patcher", "test_patch_multiple_create_mocks", "__setitem__", "test_patchobject_with_spec_as_list", "test_patchobject_twice", "test_patch_spec_set", "test_not_callable_spec_as_list", "thing2", "test_patch_with_spec_mock_repr", "bar_two", "__delitem__", "test_patch_wont_create_by_default", "test_patch_dict_test_prefix", "_get_proxy", "test_patch_propagates_exc_on_exit", "test_new_callable_inherit_for_mocks", "test_patch_object_with_spec_as_boolean", "test_patch_local", "__exit__", "test3", "test_object_lookup_is_quite_lazy", "test_two", "test_autospec_with_object", "test_stop_without_start", "with_custom_patch", "_test2", "test_first", "__setattr__", "test_patch_multiple_spec_set", "bar_one", "test_patch_with_spec", "test_second", "test_falsey_spec", "a", "test_method", "test_patch_imports_lazily", "test_cant_set_kwargs_when_passing_a_mock", "test_new_callable_spec", "test_patch_multiple_create_mocks_different_order", "test_mock_calls_with_patch", "test_patchobject_with_string_as_target", "test_autospec_keywords", "test_tracebacks", "__delattr__", "test_autospec_with_new", "test_new_callable_patch_object", "f", "test_autospec_function", "test_patch_multiple_create", "test_patch_with_exception", "assertNotCallable", "test_autospec", "test_patch_dict_decorator_resolution", "test_patch_object_keyword_args", "__getitem__", "test_patch_dict_class_decorator", "test_nested_patch_with_spec_as_list", "test", "test_patch_multiple_no_kwargs", "static_method", "test_new_callable_failure", "test_patch_dict", "test_callable_spec_as_list", "some_name", "test_patch_builtins_without_create", "test_multiple_patchobject", "test_patchobject_class_decorator", "test_patch_multiple_new_callable_failure", "test_new_callable_inherit_non_mock", "test_invalid_target", "test_one", "class_method", "test_patch_class_decorator", "func", "foo", "test_patch_with_spec_as_boolean", "test_patch_test_prefix", "test_single_patchobject", "test_new_callable_incompatible_with_new", "test_patch_dict_with_clear", "__getattr__", "stop", "test_patchobject_with_spec", "test_new_callable_keyword_arguments", "test_new_callable_incompatible_with_autospec", "test_open", "thing1", "test_specs_false_instead_of_none", "test_patchobject_with_default_mock", "test_autospec_staticmethod", "test_patch_class_acts_with_spec_is_inherited", "test_patchobject_wont_create_by_default", "test_patch_multiple", "test_nested_patch_failure", "test_dotted_but_module_not_loaded", "test_patch_dict_with_container_object_and_clear", "test_patch_multiple_stacked_decorators", "test_patchobject_with_create_mocks_non_existent_attributes", "thing3", "patched", "test_autospec_name", "crasher", "foo_one", "test2", "test_autospec_classmethod", "foo_two", "anonymous", "g", "test_new_callable_class_decorating", "test_patch_dict_with_string", "test_patch_multiple_failure", "test_patch_multiple_string_subclasses", "test_get_set_delete_proxy", "test_patch_nested_autospec_repr", "test_patch_multiple_decorating_class"], "function_calls": ["custom_patch", "object", "test", "_test", "getattr", "test3", "MagicMock", "Mock", "_get_target", "Something", "get_patch", "test_open", "with_custom_patch", "_test2", "repr", "test1", "mypatch", "function", "super", "Foo", "iter", "call", "mock", "staticmethod", "dict", "open", "test_ord", "setattr", "MockClass", "NameError", "Test", "MockSomeClass", "set", "patch", "patched", "type", "Container", "test2", "delattr", "hasattr", "anonymous", "len", "Proxy", "is_instance", "m", "uncache", "SomeTest", "callable", "_get_proxy", "foo", "ord"], "class_names": ["custom_patch", "PatchTest", "SomethingElse", "mypatch", "Proxy", "thing", "Foo", "Test", "Bar", "holder", "MockSub", "SomeTest", "Something", "Thing", "Container", "Boo", "NotAMock"], "class_method_calls": ["instance.wibble", "PTModule.SomeClass", "mock.foo", "mock.return_value", "good.attribute_name", "self.assertEqual", "self.assertNotEqual", "sentinel.Patched", "self._test", "foo.bar_one", "test.assertIsNot", "self.assertIs", "Foo.woot", "Foo.foo", "mock_open.return_value", "fobj.close", "patcher.start", "stopped.append", "mock.assert_called_with", "call.wibble", "self.assertRaises", "self.values", "some_name.__name__", "patch.multiple", "MockSomeClass.wibble", "patcher.attribute_name", "Foo.class_method", "bad.attribute_name", "self.thing", "m.return_value", "sentinel.Handle", "m.SomeClass", "test.assertTrue", "sentinel.SomethingElse", "result.mock_calls", "self.assertTrue", "mock.Bar", "sentinel.Something2", "self.assertIsInstance", "SomeClass.wibble", "foo.Foo", "foo.foo_one", "sentinel.Original", "thing.test_two", "m.read", "Foo.blam", "Proxy.__delattr__", "_patch.__exit__", "foo.bar_two", "Test.something", "d.copy", "this.assertEqual", "p1.start", "foo.fish", "sentinel.this2", "SomeClass.frooble", "SomeClass.class_attribute", "patch.dict", "foo.__doc__", "p.start", "SomeClass.not_wibble", "self.assertNotIn", "proxy.__dict__", "test.test_second", "proxy.foo", "support.target", "foo.__module__", "sentinel.Original2", "mock.does_not_exist", "self.assertIsNone", "self.assertIsNot", "MockSomeClass.not_wibble", "Foo.static_method", "patcher.stop", "test.assertIs", "os.path", "sentinel.Frooble", "thing.foo", "instance.z", "unittest.TestCase", "self.assertFalse", "foo.test_two", "holder.exc_info", "foo.foo_two", "method.assert_called_once_with", "PTModule.something", "function.assert_called_once", "unittest.TextTestResult", "mock.f", "squizz.squozz", "Foo.g", "f.not_test_method", "function.assert_not_called", "sentinel.Foo", "f.test_method", "function.assert_called", "kwargs.pop", "patch.object", "result.wibble", "test.assertIsInstance", "thing.test_one", "sentinel.ClassAttribute", "m.mock_calls", "PTModule.something_else", "test.assertEqual", "m.method_calls", "Bar.kwargs", "os.environ", "original.copy", "unittest.main", "p1.stop", "foo.copy", "foo.values", "result.method_calls", "Something.attribute", "other.attribute_name", "sentinel.Something", "sentinel.this1", "self.spec", "instance.not_wibble", "p.stop", "self.assertIsNotNone", "fobj.read", "sys.modules", "self.assertRaisesRegex", "os.chdir", "m.spec", "MockClass.z", "self.assertIn", "m.class_attribute", "sentinel.Patched2", "m.wibble", "patcher.additional_patchers", "Something.next_attribute", "foo.__annotations__", "sys.exc_info", "Proxy.__setattr__", "foo.test_one", "patch.stopall", "os.unlink", "Foo.f", "mock.extra", "kalls.append", "mock_ord.return_value", "test.test_first", "sentinel.replacement_value", "mock.g", "function.assert_called_with", "sentinel.Static", "self.assertNotCallable", "Test.something2", "result._exc_info_to_string"]}, "testsealable.py": {"libraries": ["unittest", "unittest.mock"], "function_names": ["test_seals_dont_recurse_on_manual_attributes", "test_existing_attributes_allowed_after_seal", "test_initialized_attributes_allowed_after_seal", "test_integration_with_spec_method_definition_respects_spec", "test_call_on_defined_sealed_mock_succeeds", "test_attribute_chain_is_maintained", "test_new_attributes_cannot_be_set_on_seal", "test_seals_recurse_on_magic_methods", "test_attributes_return_more_mocks_by_default", "test_call_chain_is_maintained", "test_existing_attributes_can_be_set_on_seal", "test_new_attributes_cannot_be_set_on_child_of_seal", "test_call_on_sealed_mock_fails", "method_sample1", "test_seals_recurse_on_added_attributes", "method_sample2", "test_integration_with_spec_att_definition", "test_new_attributes_cannot_be_accessed_on_seal", "test_sealed_exception_has_attribute_name", "test_integration_with_spec_method_definition"], "function_calls": ["m", "str"], "class_names": ["SampleObject", "TestSealable"], "class_method_calls": ["self.assertIsInstance", "self.assertEqual", "cm.exception", "m.attr_sample2", "m.attr_sample3", "mock.Mock", "self.assertIn", "m.method_sample1", "m.test", "m.method_sample2", "self.assertRaises", "mock.seal", "m.method_sample3", "m.SECRETE_name", "m.test_value", "unittest.main", "m.test1", "m.attr_sample1", "unittest.TestCase", "mock.MagicMock"]}, "testsentinel.py": {"libraries": ["unittest", "copy", "unittest.mock.sentinel", "pickle", "unittest.mock.DEFAULT"], "function_names": ["testPickle", "testSentinelName", "testSentinels", "testCopy", "testBases", "testDEFAULT"], "function_calls": ["str", "range"], "class_names": ["SentinelTest"], "class_method_calls": ["copy.copy", "self.assertIs", "sentinel.__bases__", "sentinel.whatever", "copy.deepcopy", "pickle.dumps", "self.assertEqual", "self.assertNotEqual", "pickle.HIGHEST_PROTOCOL", "pickle.loads", "sentinel.DEFAULT", "sentinel.whateverelse", "unittest.TestCase", "unittest.main", "self.subTest", "self.assertRaises"]}, "testwith.py": {"libraries": ["unittest", "unittest.mock.MagicMock", "unittest.mock.call", "unittest.mock.sentinel", "unittest.mock.mock_open", "unittest.mock.patch", "warnings.catch_warnings", "unittest.test.testmock.support.is_instance", "unittest.mock.Mock"], "function_names": ["test_double_patch_instance_method", "test_patch_object_with_statement", "test_read_data", "test_interleaved_reads", "test_mock_open", "test_with_statement_exception", "test_with_statement_specified", "test_context_manager_with_magic_mock", "test_dict_context_manager", "test_with_statement_nested", "test_readline_bytes", "test_with_statement_imbricated", "test_next_data", "test_with_statement_same_attribute", "test_readlines_data", "test_readline_data", "test_explicit_mock", "test_mock_open_context_manager", "testContextManagerMocking", "test_mock_open_read_with_argument", "test_read_bytes", "test_overriding_return_values", "test_readlines_bytes", "test_with_statement_as", "test_with_statement", "f", "test_dunder_iter_data", "test_mock_open_context_manager_multiple_times"], "function_calls": ["is_instance", "mock_open", "MagicMock", "catch_warnings", "mock", "C", "Mock", "call", "patch", "NameError", "next", "open", "SampleException"], "class_names": ["TestMockOpen", "Foo", "C", "WithTest", "SampleException"], "class_method_calls": ["patch2.call_count", "Foo.something", "mock.return_value", "self.assertEqual", "h.read", "handle.readline", "self.assertNotEqual", "sentinel.Patched", "handle.readlines", "self.assertIs", "patch.dict", "handle.read", "mock.assert_called_once_with", "f.readline", "patch.object", "patch1.call_count", "f.read", "mock.__enter__", "self.assertRaises", "mock.mock_calls", "unittest.main", "f.readlines", "h.readlines", "sentinel.SomethingElse", "self.assertTrue", "c.f", "sentinel.Something", "unittest.TestCase", "h.readline", "mock.__exit__", "sentinel.Something2"]}, "error.py": {"libraries": ["urllib.response"], "function_names": ["reason", "__str__", "__init__", "__repr__", "headers"], "function_calls": [], "class_names": ["URLError", "HTTPError", "ContentTooShortError"], "class_method_calls": ["headers.setter", "self.filename", "urllib.response", "self.__super_init", "self.args", "self.reason", "self.hdrs", "self.content", "self.code", "self.fp", "self.msg", "URLError.__init__"]}, "request.py": {"libraries": ["urllib.response.addclosehook", "contextlib", "urllib.parse._splitvalue", "posixpath", "urllib.parse.unquote", "mimetypes", "ipaddress.IPv4Address", "warnings", "base64", "string", "winreg", "urllib.error.URLError", "io", "http.cookiejar", "urllib.response.addinfourl", "urllib.parse._to_bytes", "urllib.error.ContentTooShortError", "http.client", "getpass", "hashlib", "urllib.parse._splithost", "socket", "os", "urllib.parse._splitport", "ipaddress.AddressValueError", "urllib.error.HTTPError", "email", "nturl2path.pathname2url", "re", "_scproxy._get_proxy_settings", "time", "urllib.parse._splitattr", "urllib.parse.urlunparse", "urllib.parse._splittype", "urllib.parse.unquote_to_bytes", "urllib.parse._splitquery", "_scproxy._get_proxies", "bisect", "tempfile", "ftplib", "urllib.parse.urljoin", "urllib.parse.unwrap", "urllib.parse._splitpasswd", "urllib.parse.urlparse", "fnmatch.fnmatch", "urllib.parse.quote", "urllib.parse.urlsplit", "urllib.parse._splituser", "ssl", "nturl2path.url2pathname", "sys", "email.utils", "urllib.parse._splittag"], "function_names": ["reduce_uri", "open_unknown_proxy", "add_parent", "ftperrors", "_open_generic_http", "proxy_bypass_environment", "localhost", "__init__", "request_host", "open", "init", "_proxy_bypass_macosx_sysconf", "redirect_internal", "getproxies_environment", "add_header", "url2pathname", "update_authenticated", "do_open", "http_response", "has_proxy", "cleanup", "_parse_proxy", "http_request", "_get_content_length", "proxy_bypass_macosx_sysconf", "error", "open_file", "do_request_", "has_header", "ftp_open", "endtransfer", "proxy_bypass_registry", "get_header", "get_algorithm_impls", "open_http", "get_user_passwd", "open_data", "get_full_url", "http_error_302", "urlcleanup", "http_error_401", "thishost", "proxy_open", "urlretrieve", "add_handler", "__del__", "set_http_debuglevel", "_proxy_bypass_winreg_override", "getproxies_macosx_sysconf", "proxy_bypass", "_safe_gethostbyname", "add_password", "retry_http_digest_auth", "open_local_file", "open_ftp", "install_opener", "setMaxConns", "http_open", "http_error_307", "retrfile", "getproxies", "add_unredirected_header", "get_authorization", "get_entity_digest", "retry_http_basic_auth", "get_cnonce", "ip2num", "_open", "clear_cache", "close", "get_method", "_call_chain", "get_names", "_parse_realm", "connect_ftp", "build_opener", "http_error", "noheaders", "is_suburi", "retry_https_basic_auth", "urlopen", "parse_keqv_list", "open_https", "check_cache", "data_open", "https_open", "getproxies_registry", "retry_proxy_https_basic_auth", "http_error_303", "_parse", "set_proxy", "is_authenticated", "real_close", "_https_connection", "http_error_301", "addheader", "retrieve", "data", "http_error_default", "parse_http_list", "__lt__", "header_items", "find_user_password", "retry_proxy_http_basic_auth", "setTimeout", "unknown_open", "full_url", "file_close", "http_error_auth_reqed", "http_error_407", "open_unknown", "pathname2url", "prompt_user_passwd", "redirect_request", "file_open", "reset_retry_count", "remove_header"], "function_calls": ["getattr", "input", "ftperrors", "connection_factory", "unwrap", "urlsplit", "proxy_bypass_environment", "localhost", "request_host", "ContentTooShortError", "dict", "open", "HTTPError", "_proxy_bypass_macosx_sysconf", "setattr", "addinfourl", "getproxies_environment", "url2pathname", "dir", "klass", "int", "OSError", "_parse_proxy", "ftpwrapper", "len", "URLError", "proxy_bypass_macosx_sysconf", "unquote", "filter", "proxy_bypass_registry", "reporthook", "KD", "str", "thishost", "HTTPPasswordMgr", "list", "http_class", "_to_bytes", "_proxy_bypass_winreg_override", "getproxies_macosx_sysconf", "Request", "addclosehook", "_splitattr", "proxy_bypass", "urljoin", "_safe_gethostbyname", "_splitvalue", "min", "_splitport", "getproxies", "isinstance", "quote", "HTTPSHandler", "tuple", "ip2num", "_get_proxy_settings", "_splittag", "method", "set", "build_opener", "type", "func", "hasattr", "urlparse", "_splithost", "parse_keqv_list", "urlopen", "OpenerDirector", "unquote_to_bytes", "print", "getproxies_registry", "meth", "_get_proxies", "_randombytes", "_splituser", "issubclass", "super", "parse_http_list", "urlunparse", "ValueError", "_splitpasswd", "_splittype", "h", "fnmatch", "_splitquery", "IPv4Address", "H", "TypeError", "map"], "class_names": ["UnknownHandler", "HTTPErrorProcessor", "HTTPHandler", "CacheFTPHandler", "ProxyHandler", "HTTPPasswordMgrWithDefaultRealm", "AbstractBasicAuthHandler", "HTTPSHandler", "HTTPDefaultErrorHandler", "HTTPPasswordMgrWithPriorAuth", "AbstractHTTPHandler", "HTTPPasswordMgr", "AbstractDigestAuthHandler", "FTPHandler", "DataHandler", "BaseHandler", "HTTPBasicAuthHandler", "Request", "HTTPRedirectHandler", "URLopener", "ftpwrapper", "FileHandler", "ProxyBasicAuthHandler", "HTTPDigestAuthHandler", "FancyURLopener", "OpenerDirector", "HTTPCookieProcessor", "ProxyDigestAuthHandler"], "class_method_calls": ["self.method", "http_conn.getresponse", "data.encode", "socket.gethostbyname_ex", "request.has_header", "h.close", "x.encode", "self.last_nonce", "req.get_full_url", "re.ASCII", "self.auth_header", "self.handle_error", "self.max_conns", "self._debuglevel", "self._full_url", "socket.gethostbyname", "msg.append", "opener.add_handler", "self.http_error_500", "user_passwd.encode", "self.selector", "default_classes.remove", "part.strip", "req.redirect_dict", "AbstractHTTPHandler.__init__", "warnings.warn", "self.ftpcache", "self.handlers", "visited.get", "self._open_generic_http", "self.get_entity_digest", "name.lower", "res.append", "fp.read", "mimetypes.guess_type", "self.proxy_open", "self.process_response", "self.ftp", "response.info", "os.path", "os.fdopen", "handler.add_parent", "self._context", "other.handler_order", "hdrs.items", "authreq.split", "r.reason", "full_url.setter", "tfp.name", "self.get_user_passwd", "fp.close", "fw.retrfile", "hashlib.md5", "http.client", "req.origin_req_host", "time.ctime", "self.open_unknown_proxy", "key.capitalize", "time.strftime", "re.I", "self.open_unknown", "conn.makefile", "self.parent", "self.unredirected_hdrs", "name.replace", "self.addheaders", "response.fp", "v.close", "base64.b64encode", "self.passwd", "self.redirect_internal", "self.process_request", "self.__unlink", "self._tunnel_host", "headers.update", "self.file_close", "host.endswith", "h.request", "HTTPPasswordMgr.find_user_password", "http_conn.request", "_url_tempfiles.append", "elt.split", "data.deleter", "headers.get_all", "self.host", "self.delay", "self.http_error_302", "ftplib.FTP", "self.retry_http_basic_auth", "self._https_connection", "self.real_close", "self.full_url", "self.handler_order", "self.refcount", "req.add_unredirected_header", "data.split", "self.timeout", "exc.with_traceback", "self.type", "proxyServer.split", "self.fragment", "opener.open", "io.StringIO", "self._parse", "AbstractBasicAuthHandler.rx", "req.get_method", "AbstractHTTPHandler.do_request_", "self.update_authenticated", "self.add_header", "hostonly.endswith", "h.getresponse", "sys.version_info", "self.keepalive", "re.match", "self.soonest", "getpass.getpass", "req.add_header", "self.key_file", "k.lower", "self._parse_realm", "url.split", "self.init", "self._get_content_length", "attr.lower", "urlparts.netloc", "request.add_unredirected_header", "io.BytesIO", "r.msg", "proxy_settings.get", "req.headers", "tempfile.NamedTemporaryFile", "self.get_cnonce", "r_scheme.startswith", "req.has_header", "self._check_hostname", "self.http_error_auth_reqed", "host.lower", "tfp.write", "self.data", "e.filename", "req.selector", "name.capitalize", "self.user", "winreg.HKEY_CURRENT_USER", "self._data", "name.lstrip", "mediatype.endswith", "self.__class__", "os.stat", "__all__.append", "m.group", "no_proxy.split", "h.set_debuglevel", "chal.get", "response.reason", "response.msg", "skip.add", "tfp.close", "self.cert_file", "ssl.Purpose", "URLopener.http_error_default", "self.headers", "self.http_error_default", "default_classes.append", "req.timeout", "self.cache", "e.strerror", "self._call_chain", "string.punctuation", "proxies.items", "socket._GLOBAL_DEFAULT_TIMEOUT", "ftplib.all_errors", "base64.standard_b64encode", "email.utils", "self.nonce_count", "request.host", "self.version", "mo.groups", "http.cookiejar", "stats.st_mtime", "urltype.lower", "self._open", "raw.encode", "condition.find", "request.get_header", "self.is_suburi", "name.strip", "self.busy", "self.port", "proxies.pop", "type.lower", "_cut_port_re.sub", "req._tunnel_host", "base64.decodebytes", "sys.platform", "name.title", "r_scheme.find", "host.find", "internetSettings.Close", "contextlib.closing", "self.add_password", "self.dirs", "ftplib.error_perm", "os.environ", "x509.get", "self.endtransfer", "ssl.create_default_context", "time.time", "req.get_header", "headers.items", "chain.get", "self.prompt_user_passwd", "headers.get", "os.urandom", "self.has_header", "email.message_from_string", "user_pass.encode", "path.split", "auth.split", "self.do_open", "new.redirect_dict", "type.rfind", "sys.exc_info", "proxy_passwd.encode", "self.retry_http_digest_auth", "conn.close", "auth_str.strip", "self.get_authorization", "self.maxtries", "os.name", "domains.items", "self.get_names", "match.groups", "winreg.OpenKey", "self.handle_open", "proxyhost.find", "self.close", "newurl.replace", "self.reset_retry_count", "override.split", "self.retried", "socket.gethostname", "req.type", "self.remove_header", "time.gmtime", "self.authenticated", "req.set_proxy", "req.full_url", "self.cleanup", "qop.split", "stats.st_size", "request.get_method", "self.http_error", "self.origin_req_host", "ipAddr.split", "sys.audit", "self.auth_cache", "meth.find", "full_url.deleter", "req.data", "bisect.insort", "request.selector", "r.url", "lookup.setdefault", "s.encode", "self.get_algorithm_impls", "h.set_tunnel", "p.split", "request.has_proxy", "request.data", "condition.startswith", "req.unredirected_hdrs", "self.redirect_request", "self.open", "request.full_url", "self.reduce_uri", "self.connect_ftp", "FileHandler.names", "winreg.QueryValueEx", "self.__tempfiles", "self.inf_msg", "urlparts.scheme", "header.split", "self.proxies", "re.compile", "self.tempcache", "socket.gaierror", "data.setter", "self.open_local_file", "response.code", "self.unverifiable", "req.host", "ftplib.FTP_PORT", "urlparts.path", "self.tries", "tempfile.mkstemp", "fp.info", "h.sock", "value.upper", "test.strip", "self.check_cache", "os.unlink", "URLopener.__init__", "hashlib.sha1", "self.max_redirections", "response.status", "handlers.append", "self.max_repeats", "scheme.lower", "self.cookiejar"]}, "response.py": {"libraries": ["tempfile"], "function_names": ["info", "close", "__enter__", "__exit__", "__init__", "geturl", "__repr__", "getcode"], "function_calls": ["id", "ValueError", "closehook", "super"], "class_names": ["addinfourl", "addbase", "addclosehook", "addinfo"], "class_method_calls": ["self.close", "self.headers", "self.url", "self.file", "self.code", "self.closehook", "self.__class__", "tempfile._TemporaryFileWrapper", "self.fp", "self.hookargs"]}, "robotparser.py": {"libraries": ["collections", "time", "urllib.request", "urllib.parse"], "function_names": ["modified", "can_fetch", "__str__", "set_url", "applies_to", "__init__", "_add_entry", "parse", "request_rate", "allowance", "mtime", "site_maps", "read", "crawl_delay"], "function_calls": ["len", "Entry", "RuleLine", "int", "RequestRate", "map"], "class_names": ["Entry", "RuleLine", "RobotFileParser"], "class_method_calls": ["urllib.request", "self.req_rate", "entry.delay", "raw.decode", "parsed_url.path", "line.strip", "ret.extend", "rate.seconds", "line.applies_to", "self.last_checked", "self.set_url", "urllib.parse", "self.useragents", "self.sitemaps", "entry.rulelines", "useragent.split", "filename.startswith", "f.read", "rate.requests", "self.host", "self.delay", "entry.req_rate", "entry.allowance", "agent.lower", "parsed_url.fragment", "self.allow_all", "self._add_entry", "self.url", "self.entries", "parsed_url.params", "self.path", "entry.applies_to", "self.default_entry", "urllib.error", "parsed_url.query", "line.split", "collections.namedtuple", "time.time", "self.parse", "self.mtime", "self.disallow_all", "line.find", "line.allowance", "entry.useragents", "self.modified", "err.code", "self.rulelines", "ret.append", "self.allowance"]}, "uu.py": {"libraries": ["os", "sys", "binascii", "optparse"], "function_names": ["test", "decode", "encode"], "function_calls": ["isinstance", "len", "test", "Error", "int", "decode", "open", "print", "encode"], "class_names": ["Error"], "class_method_calls": ["in_file.read", "binascii.Error", "os.altsep", "out_file.startswith", "parser.error", "sys.stdout", "sys.exit", "hdr.split", "out_file.write", "options.text", "optparse.OptionParser", "binascii.a2b_uu", "parser.add_option", "options.decode", "os.sep", "in_file.readline", "sys.stdin", "hdr.startswith", "s.strip", "name.replace", "os.path", "sys.stderr", "os.chmod", "sys.argv", "opened_files.append", "os.stat", "binascii.b2a_uu", "f.close", "parser.parse_args"]}, "uuid.py": {"libraries": ["_uuid", "enum.Enum", "re", "platform", "netbios", "time", "hashlib.sha1", "ctypes.util", "hashlib.md5", "random", "shutil", "sys", "warnings", "ctypes", "subprocess", "socket", "os", "win32wnet"], "function_names": ["variant", "_netstat_getnode", "_lanscan_getnode", "__le__", "_load_system_functions", "bytes_le", "time_low", "uuid4", "version", "time_hi_version", "_ipconfig_getnode", "_random_getnode", "_find_mac", "__eq__", "__repr__", "_arp_getnode", "__ge__", "__setattr__", "_netbios_getnode", "getnode", "__getstate__", "__int__", "__lt__", "__init__", "_ifconfig_getnode", "uuid1", "node", "urn", "_ip_getnode", "__str__", "time", "_is_universal", "clock_seq", "__gt__", "_generate_time_safe", "hex", "uuid5", "fields", "uuid3", "_unix_getnode", "__setstate__", "clock_seq_hi_variant", "_popen", "__hash__", "_windll_getnode", "clock_seq_low", "bytes", "time_mid"], "function_calls": ["bytes_", "_load_system_functions", "get_index", "getattr", "_find_mac", "_uuid_generate_time_safe", "repr", "isinstance", "getnode", "_UuidCreate", "str", "sha1", "hash", "dict", "range", "SafeUUID", "ValueError", "_generate_time_safe", "_is_universal", "int_", "getter", "int", "_uuid_generate_time", "hasattr", "len", "_popen", "md5", "bytes", "UUID", "TypeError", "ord"], "class_names": ["SafeUUID", "UUID"], "class_method_calls": ["status._unpack", "self.time_hi_version", "int_.from_bytes", "self.clock_seq_hi_variant", "shutil.which", "word.count", "buffer.value", "ncb.Command", "adapters._unpack", "self.is_safe", "socket.gethostname", "socket.gethostbyname", "_libnames.append", "netbios.NCBRESET", "self.variant", "int.from_bytes", "netbios.NCBENUM", "ncb.Reset", "namespace.bytes", "netbios.LANA_ENUM", "time.time_ns", "args.split", "self.int", "subprocess.Popen", "warnings.warn", "ncb.Buffer", "os.uname", "_uuid_generate_time.restype", "self.bytes", "value.replace", "adapters.length", "proc.stdout", "os.path", "lib.uuid_generate_time", "adapters._pack", "other.int", "ctypes.CDLL", "subprocess.DEVNULL", "ncb.Callname", "sys.platform", "os.pathsep", "hex.replace", "os.fsencode", "object.__setattr__", "netbios.NCB", "words.index", "hex.strip", "status.adapter_address", "random.getrandbits", "netbios.NCBASTAT", "subprocess.PIPE", "_buffer.raw", "os.environ", "line.rstrip", "dirs.insert", "adapters.lana", "self.time_low", "netbios.ADAPTER_STATUS", "lib.uuid_generate_time_safe", "os.urandom", "_uuid.has_uuid_generate_time_safe", "win32wnet.Netbios", "self.node", "_uuid.generate_time_safe", "ctypes.create_string_buffer", "re.fullmatch", "word.replace", "platform.system", "ncb.Lana_num", "self.clock_seq_low", "self.time_mid", "ctypes.windll", "line.split", "ctypes.util", "line.lower", "os.name", "self.__class__", "SafeUUID.unknown"]}, "warnings.py": {"libraries": ["_warnings._defaultaction", "tracemalloc", "re", "builtins", "_warnings._onceregistry", "_warnings._filters_mutated", "sys", "traceback", "_warnings.filters", "_warnings.warn", "linecache", "_warnings.warn_explicit"], "function_names": ["_formatwarnmsg", "extract", "__exit__", "_formatwarnmsg_impl", "__repr__", "showwarning", "resetwarnings", "warn_explicit", "formatwarning", "_next_external_frame", "__enter__", "_setoption", "_getcategory", "__init__", "filterwarnings", "_showwarnmsg_impl", "_filters_mutated", "_getaction", "__str__", "_is_internal_frame", "_add_filter", "_showwarnmsg", "simplefilter", "_processoptions", "_warn_unawaited_coroutine", "warn"], "function_calls": ["_formatwarnmsg", "extract", "getattr", "_formatwarnmsg_impl", "reversed", "WarningMessage", "RuntimeError", "warn_explicit", "isinstance", "issubclass", "_next_external_frame", "__import__", "_setoption", "str", "_getcategory", "filterwarnings", "_showwarnmsg_impl", "_filters_mutated", "_getaction", "range", "sw", "list", "_is_internal_frame", "fw", "_add_filter", "int", "type", "_showwarnmsg", "category", "hasattr", "_OptionError", "len", "simplefilter", "_processoptions", "warn", "callable", "TypeError", "print"], "class_names": ["_OptionError", "catch_warnings", "WarningMessage"], "class_method_calls": ["self._filters", "msg.source", "self._entered", "line.strip", "tracemalloc.get_object_traceback", "msg.lineno", "re.escape", "frame.f_back", "filters.append", "frame.filename", "sys.modules", "self.source", "coro.__qualname__", "msg.category", "msg.file", "self.lineno", "self.line", "self.message", "self._showwarning", "globals.setdefault", "registry.get", "msg.filename", "coro.cr_origin", "self._module", "a.startswith", "registry.clear", "filters.insert", "parts.append", "tracemalloc.is_tracing", "msg.line", "frame.f_globals", "re.I", "sys.__dict__", "log.append", "frame.f_code", "traceback.format_list", "self.file", "frame.f_lineno", "frame.lineno", "category.__name__", "message.__class__", "self._category_name", "file.write", "s.strip", "sys.warnoptions", "linecache.getlines", "self.filename", "onceregistry.get", "re.compile", "linecache.getline", "sys.stderr", "msg.message", "mod.match", "self.category", "sys._getframe", "arg.split", "self._showwarnmsg_impl", "args.append", "filters.remove", "category.rpartition", "self._record", "msg.match", "msg_lines.append"]}, "wave.py": {"libraries": ["chunk.Chunk", "struct", "sys", "audioop", "warnings", "collections.namedtuple", "builtins"], "function_names": ["__exit__", "_read_fmt_chunk", "setnframes", "getframerate", "getfp", "getcompname", "setcomptype", "initfp", "rewind", "_write_header", "__enter__", "readframes", "__init__", "getsampwidth", "_ensure_header_written", "getmarkers", "open", "getnframes", "setframerate", "getmark", "setsampwidth", "close", "__del__", "getcomptype", "setmark", "tell", "openfp", "setpos", "getparams", "setnchannels", "setparams", "writeframesraw", "getnchannels", "_patchheader", "writeframes"], "function_calls": ["isinstance", "len", "_wave_params", "Wave_write", "Wave_read", "Chunk", "Error", "memoryview", "int", "namedtuple", "open", "round", "hasattr"], "class_names": ["Wave_write", "Wave_read", "Error"], "class_method_calls": ["chunk.skip", "self._data_length_pos", "self.writeframesraw", "self._comptype", "self._datalength", "self.initfp", "sys.byteorder", "self._nchannels", "f.mode", "self.getnchannels", "self.close", "self.setnchannels", "audioop.byteswap", "self._headerwritten", "warnings.warn", "self._data_chunk", "self._fmt_chunk_read", "chunk.read", "chunk.chunksize", "self._framesize", "self.setnframes", "builtins.open", "self._nframes", "self._i_opened_the_file", "self._read_fmt_chunk", "self._ensure_header_written", "self.getframerate", "self._convert", "self._soundpos", "self._compname", "self._patchheader", "self._datawritten", "struct.pack", "file.close", "chunk.getname", "struct.unpack_from", "self._data_seek_needed", "self.getnframes", "self._sampwidth", "self._file", "self.getcompname", "struct.error", "self._write_header", "self._form_length_pos", "self.setframerate", "self.getsampwidth", "self.getcomptype", "self._nframeswritten", "f.close", "self.setcomptype", "self.setsampwidth", "self._framerate"]}, "weakref.py": {"libraries": ["_weakrefset._IterationGuard", "_collections_abc", "_weakref.proxy", "gc", "_weakref.ProxyType", "_weakrefset.WeakSet", "_weakref.ref", "sys", "copy.deepcopy", "_weakref.getweakrefs", "warnings", "_weakref.getweakrefcount", "_weakref.ReferenceType", "_weakref._remove_dead_weakref", "atexit", "itertools", "_weakref.CallableProxyType"], "function_names": ["_exitfunc", "__deepcopy__", "_commit_removals", "__eq__", "__repr__", "keys", "alive", "_scrub_removals", "atexit", "values", "copy", "_cb", "__ne__", "update", "get", "__call__", "__init__", "keyrefs", "itervaluerefs", "popitem", "__len__", "detach", "items", "valuerefs", "__setitem__", "pop", "_select_for_exit", "remove", "__delitem__", "peek", "setdefault", "__new__", "__getitem__", "__contains__"], "function_calls": ["self_wr", "id", "KeyError", "isinstance", "super", "WeakValueDictionary", "selfref", "_IterationGuard", "tuple", "wr", "callback", "dict", "list", "ref", "deepcopy", "set", "type", "next", "WeakKeyDictionary", "bool", "key", "f", "hasattr", "len", "_remove_dead_weakref", "_atomic_removal", "KeyedRef", "TypeError"], "class_names": ["WeakMethod", "WeakValueDictionary", "finalize", "_Info", "KeyedRef", "WeakKeyDictionary"], "class_method_calls": ["self._Info", "info.func", "ref.__new__", "kwargs.items", "self._meth_type", "l.pop", "info.args", "atexit.register", "self._shutdown", "gc.enable", "dict.items", "pending.pop", "finalize._dirty", "info.index", "other._func_ref", "self._registry", "info.atexit", "finalize._registered_with_atexit", "other.items", "kwargs.pop", "self._func_ref", "self._index_iter", "cls._select_for_exit", "info.kwargs", "self.data", "warnings.warn", "itertools.count", "self.update", "meth.__self__", "info.weakref", "__init__.__text_signature__", "sys.exc_info", "sys.excepthook", "self._pending_removals", "self._commit_removals", "self._registered_with_atexit", "ref.__ne__", "gc.isenabled", "ref.__eq__", "i.atexit", "_collections_abc.MutableMapping", "atexit.setter", "self._remove", "meth.__func__", "self._dirty_len", "finalize._shutdown", "self._iterating", "self._scrub_removals", "self._exitfunc", "cls._registry", "other._alive", "gc.disable", "L.sort", "self.__class__", "self._alive", "wr.key", "self.key", "ref.__hash__"]}, "webbrowser.py": {"libraries": ["pwd", "threading", "copy", "shlex", "getopt", "shutil", "sys", "tempfile", "subprocess", "socket", "os", "glob"], "function_names": ["register", "register_X_browsers", "_invoke", "get", "open_new", "__init__", "main", "register_standard_browsers", "open", "_find_grail_rc", "open_new_tab", "_remote", "_synthesize"], "function_calls": ["Galeon", "Error", "Konqueror", "_synthesize", "Elinks", "register_X_browsers", "isinstance", "get", "open", "Mozilla", "register", "BackgroundBrowser", "Chrome", "Opera", "int", "register_standard_browsers", "bool", "len", "MacOSXOSAScript", "Netscape", "GenericBrowser", "main", "print"], "class_names": ["BackgroundBrowser", "MacOSXOSAScript", "Galeon", "BaseBrowser", "Netscape", "Chrome", "Grail", "GenericBrowser", "UnixBrowser", "WindowsDefault", "Error", "Opera", "MacOSX", "Konqueror", "Mozilla", "Elinks"], "class_method_calls": ["copy.copy", "sys.audit", "raw_result.decode", "sys.platform", "os.pathsep", "os.getuid", "p.wait", "socket.SOCK_STREAM", "self.open", "shutil.which", "self.remote_action", "os.popen", "self._find_grail_rc", "self.name", "browser.open", "self._name", "self.args", "s.send", "sys.exit", "shlex.split", "subprocess.TimeoutExpired", "socket.AF_UNIX", "subprocess.Popen", "getopt.getopt", "tempfile.gettempdir", "arg.replace", "threading.RLock", "glob.glob", "self._invoke", "pwd.getpwuid", "self.remote_action_newtab", "name.lower", "os.startfile", "url.replace", "controller.basename", "self.raise_opts", "getopt.error", "os.environ", "os.unlink", "self.background", "_tryorder.insert", "subprocess.check_output", "p.poll", "controller.name", "browser.lower", "os.path", "s.close", "self._remote", "userchoices.reverse", "glob.escape", "self.remote_args", "_tryorder.append", "sys.stderr", "s.connect", "self.redirect_stdout", "browser.split", "subprocess.DEVNULL", "self.basename", "sys.argv", "self.remote_action_newwin", "subprocess.CalledProcessError", "osapipe.close", "osapipe.write", "socket.socket"]}, "headers.py": {"libraries": ["re"], "function_names": ["values", "add_header", "get_all", "__str__", "__len__", "_convert_string_type", "__bytes__", "get", "__init__", "__delitem__", "__getitem__", "items", "setdefault", "__repr__", "keys", "__setitem__", "_formatparam", "__contains__"], "function_calls": ["len", "str", "type", "TypeError", "AssertionError", "_formatparam", "repr"], "class_names": ["Headers"], "class_method_calls": ["k.replace", "tspecials.search", "re.compile", "self._headers", "name.lower", "self.__class__", "self._convert_string_type", "_params.items", "k.lower", "self.get", "value.replace", "parts.append"]}, "simple_server.py": {"libraries": ["urllib.parse", "wsgiref.handlers.SimpleHandler", "platform.python_implementation", "http.server.BaseHTTPRequestHandler", "http.server.HTTPServer", "sys", "io.StringIO", "webbrowser"], "function_names": ["demo_app", "server_bind", "close", "setup_environ", "get_stderr", "set_app", "get_environ", "handle", "get_app", "make_server"], "function_calls": ["len", "sorted", "ServerHandler", "str", "start_response", "StringIO", "server_class", "python_implementation", "repr", "make_server", "print"], "class_names": ["WSGIServer", "WSGIRequestHandler", "ServerHandler"], "class_method_calls": ["self.server_version", "self.application", "self.request_handler", "self.command", "self.client_address", "urllib.parse", "self.rfile", "handler.request_handler", "self.bytes_sent", "self.request_version", "handler.run", "self.wfile", "self.get_stderr", "self.requestline", "k.replace", "v.strip", "environ.items", "stdout.getvalue", "self.setup_environ", "self.server_port", "self.headers", "self.address_string", "self.parse_request", "httpd.socket", "self.path", "self.server_name", "HTTPServer.server_bind", "webbrowser.open", "self.base_environ", "self.send_error", "self.get_environ", "self.status", "sys.stderr", "self.raw_requestline", "sys.version", "SimpleHandler.close", "self.server", "server.set_app", "httpd.handle_request"]}, "validate.py": {"libraries": ["sys", "re", "warnings"], "function_names": ["lint_app", "check_status", "start_response_wrapper", "check_headers", "check_string_type", "writelines", "check_input", "check_environ", "__call__", "__init__", "readlines", "check_iterator", "assert_", "close", "flush", "__del__", "__iter__", "check_content_type", "check_exc_info", "__next__", "read", "write", "validator", "readline", "check_errors"], "function_calls": ["check_status", "application", "InputWrapper", "start_response", "check_headers", "repr", "check_string_type", "isinstance", "check_input", "ErrorWrapper", "check_environ", "iter", "WriteWrapper", "AssertionError", "check_iterator", "assert_", "int", "type", "next", "check_content_type", "check_exc_info", "hasattr", "len", "IteratorWrapper", "check_errors"], "class_names": ["ErrorWrapper", "InputWrapper", "WSGIWarning", "WriteWrapper", "IteratorWrapper", "PartialIteratorWrapper"], "class_method_calls": ["self.check_start_response", "self.closed", "environ.keys", "status.split", "self.original_iterator", "self.writer", "environ.get", "warnings.warn", "bad_header_value_re.search", "self.iterator", "self.write", "self.errors", "header_re.search", "self.readline", "name.lower", "start_response_started.append", "re.compile", "sys.stderr", "self.input", "name.endswith"]}, "xdrlib.py": {"libraries": ["struct", "functools.wraps", "io.BytesIO"], "function_names": ["pack_uint", "unpack_float", "pack_float", "pack_double", "__repr__", "unpack_uint", "pack_farray", "unpack_uhyper", "result", "pack_int", "get_buffer", "unpack_farray", "unpack_bool", "unpack_hyper", "__init__", "get_position", "set_position", "raise_conversion_error", "__str__", "pack_string", "unpack_fstring", "pack_fstring", "pack_bool", "unpack_int", "unpack_string", "unpack_array", "pack_list", "unpack_double", "done", "pack_array", "unpack_list", "reset", "pack_uhyper"], "function_calls": ["BytesIO", "ValueError", "len", "function", "unpack_item", "str", "wraps", "pack_item", "Error", "ConversionError", "int", "bool", "range", "repr"], "class_names": ["Unpacker", "ConversionError", "Packer", "Error"], "class_method_calls": ["self.unpack_int", "self.pack_fstring", "list.append", "struct.error", "self.pack_farray", "self.unpack_uint", "self.unpack_farray", "struct.pack", "struct.unpack", "e.args", "self.__pos", "self.unpack_uhyper", "self.pack_uint", "self.msg", "self.reset", "self.__buf", "self.unpack_fstring"]}, "NodeFilter.py": {"libraries": [], "function_names": ["acceptNode"], "function_calls": [], "class_names": ["NodeFilter"], "class_method_calls": []}, "domreg.py": {"libraries": ["sys", "os"], "function_names": ["_good_enough", "registerDOMImplementation", "_parse_feature_string", "getDOMImplementation"], "function_calls": ["_good_enough", "isinstance", "len", "ValueError", "__import__", "ImportError", "tuple", "_parse_feature_string", "getDOMImplementation", "creator"], "class_names": [], "class_method_calls": ["well_known_implementations.get", "features.append", "mod.getDOMImplementation", "sys.flags", "well_known_implementations.keys", "registered.values", "s.split", "os.environ", "dom.hasFeature"]}, "expatbuilder.py": {"libraries": ["xml.dom.xmlbuilder", "xml.parsers.expat", "xml.dom.Node", "xml.dom.minidom", "xml.dom.EMPTY_NAMESPACE", "xml.dom.NodeFilter.NodeFilter", "xml.dom.EMPTY_PREFIX", "xml.dom.XMLNS_NAMESPACE", "xml.dom.minidom._set_attribute_node", "xml.dom.minidom._append_child"], "function_names": ["end_doctype_decl_handler", "xml_decl_handler", "start_cdata_section_handler", "_getDeclarations", "getAttributeTypeNS", "character_data_handler_cdata", "_finish_start_element", "getParser", "start_namespace_decl_handler", "comment_handler", "_finish_end_element", "entity_decl_handler", "acceptNode", "install", "__getstate__", "end_element_handler", "attlist_decl_handler", "_intern", "parse", "__init__", "parseString", "external_entity_ref_handler", "first_element_handler", "isId", "parseFragmentString", "createParser", "isElementContent", "parseFragment", "end_cdata_section_handler", "character_data_handler", "start_element_handler", "_initNamespaces", "parseFile", "makeBuilder", "pi_handler", "notation_decl_handler", "__setstate__", "_parse_ns_name", "_handle_white_text_nodes", "_setup_subset", "getSubset", "_getNSattrs", "isEmpty", "reset", "start_doctype_decl_handler", "startContainer", "isIdNS", "getAttributeType", "element_decl_handler"], "function_calls": ["_set_attribute_node", "Skipper", "FragmentBuilder", "repr", "ParseEscape", "isinstance", "_intern", "intern", "_append_child", "open", "range", "setattr", "Rejecter", "ValueError", "FragmentBuilderNS", "FilterVisibilityController", "ExpatBuilder", "hasattr", "_parse_ns_name", "len", "ElementInfo", "ExpatBuilderNS", "InternalSubsetExtractor"], "class_names": ["FilterCrutch", "Rejecter", "ParseEscape", "ElementInfo", "Namespaces", "FilterVisibilityController", "FragmentBuilderNS", "InternalSubsetExtractor", "ExpatBuilderNS", "Skipper", "FragmentBuilder", "ExpatBuilder"], "class_method_calls": ["self._getDeclarations", "parser.StartCdataSectionHandler", "NodeFilter.SHOW_CDATA_SECTION", "self.end_element_handler", "minidom._no_type", "parser.StartNamespaceDeclHandler", "info._model", "self.start_namespace_decl_handler", "node.nodeType", "NodeFilter.SHOW_ATTRIBUTE", "child.data", "L.append", "self._builder", "info._attr_info", "self.curNode", "NodeFilter.SHOW_ELEMENT", "Node.DOCUMENT_FRAGMENT_NODE", "NodeFilter.SHOW_ENTITY_REFERENCE", "theDOMImplementation.createDocument", "entity.notationName", "minidom.Attr", "self.createParser", "node._attrsNS", "self.end_doctype_decl_handler", "context.parentNode", "self._setup_subset", "curNode.localName", "self._cdata", "expat.ParserCreate", "self.character_data_handler_cdata", "xmlbuilder.DOMBuilderFilter", "self.character_data_handler", "minidom.Element", "a.ownerElement", "parser.StartDoctypeDeclHandler", "parser.ElementDeclHandler", "Node.NOTATION_NODE", "self.context", "self._initNamespaces", "self._options", "parser.CommentHandler", "self._filter", "parser.EndCdataSectionHandler", "node.childNodes", "self.getParser", "builder.parseFile", "self.first_element_handler", "ExpatBuilder.parseFile", "NodeFilter.SHOW_DOCUMENT", "self._intern_setdefault", "Node.CDATA_SECTION_NODE", "self._cdata_continue", "extractor.getSubset", "ExpatBuilder.install", "parser.StartElementHandler", "child.nodeType", "self.filter", "self.fragment", "self._source", "self.entity_decl_handler", "self._nodetype_mask", "doctype.publicId", "self._finish_start_element", "ExpatBuilder.__init__", "NodeFilter.SHOW_DOCUMENT_TYPE", "self.document", "doctype.notations", "parser.ProcessingInstructionHandler", "ExpatBuilder.external_entity_ref_handler", "self.reset", "node._attrs", "builder.parseString", "self.start_cdata_section_handler", "self.parseString", "node._ensure_attributes", "a.ownerDocument", "self.install", "node.ownerDocument", "self.tagName", "curNode.tagName", "NodeFilter.SHOW_PROCESSING_INSTRUCTION", "self._finish_end_element", "expat.model", "notation.systemId", "self._model", "Node.ELEMENT_NODE", "Node.ATTRIBUTE_NODE", "self.isId", "doctype.internalSubset", "info.isElementContent", "parser.CharacterDataHandler", "minidom.Text", "entity.publicId", "parser.XmlDeclHandler", "ExpatBuilder.parseString", "Node.PROCESSING_INSTRUCTION_NODE", "node.data", "Node.DOCUMENT_NODE", "NodeFilter.SHOW_NOTATION", "parser.namespace_prefixes", "self.element_decl_handler", "a.value", "node.unlink", "self._elem_info", "curNode.namespaceURI", "minidom.TypeInfo", "minidom.getDOMImplementation", "entity.nodeName", "self.originalDocument", "self.start_element_handler", "context.ownerDocument", "parser.EndElementHandler", "self.end_cdata_section_handler", "ExpatBuilder.reset", "FragmentBuilder.reset", "parser.Parse", "curNode.parentNode", "Node.ENTITY_REFERENCE_NODE", "self._attr_info", "parser.NotationDeclHandler", "NodeFilter.SHOW_COMMENT", "Node.DOCUMENT_TYPE_NODE", "name.split", "xmlbuilder.Options", "self.start_doctype_decl_handler", "parser.DefaultHandler", "curNode.unlink", "Node.TEXT_NODE", "NodeFilter.SHOW_ENTITY", "options.namespaces", "self.external_entity_ref_handler", "self._level", "self.xml_decl_handler", "curNode.nodeName", "self._old_start", "self._old_end", "file.read", "notation.nodeName", "entity.systemId", "self.subset", "NodeFilter.SHOW_DOCUMENT_FRAGMENT", "context._ns_prefix_uri", "node.parentNode", "parser.AttlistDeclHandler", "extractor.parseString", "curNode.prefix", "doctype.systemId", "builder._parser", "self.notation_decl_handler", "self.attlist_decl_handler", "entity.firstChild", "Node.COMMENT_NODE", "parent.appendChild", "node.removeChild", "parser.EndDoctypeDeclHandler", "FilterCrutch.__init__", "parser.ExternalEntityRefHandler", "self._getNSattrs", "Node.ENTITY_NODE", "self._handle_white_text_nodes", "NodeFilter.SHOW_TEXT", "context.nodeType", "builder._intern_setdefault", "self.comment_handler", "self._parser", "notation.publicId", "doctype.entities", "self.pi_handler", "parser.EntityDeclHandler", "self._ns_ordered_prefixes", "doctype.ownerDocument"]}, "minicompat.py": {"libraries": ["xml.dom"], "function_names": ["_get_length", "_set_length", "__radd__", "set", "__add__", "defproperty", "item", "__setstate__"], "function_calls": ["len", "getattr", "property", "hasattr", "repr", "setattr", "NodeList"], "class_names": ["EmptyNodeList", "NodeList"], "class_method_calls": ["NL.extend", "xml.dom"]}, "minidom.py": {"libraries": ["io", "xml.dom.minicompat.*", "xml.dom.xmlbuilder.DocumentLS", "xml.dom.domreg", "xml.dom.pulldom", "xml.dom.EMPTY_NAMESPACE", "xml.dom.expatbuilder", "xml.dom.EMPTY_PREFIX", "xml.dom.XMLNS_NAMESPACE", "xml.dom", "xml.dom.xmlbuilder.DOMImplementationLS"], "function_names": ["createElement", "createAttribute", "_clone_node", "getNamedItem", "setNamedItemNS", "appendChild", "_set_attribute_node", "itemsNS", "_get_wholeText", "_get_nodeValue", "_do_pulldom_parse", "__getstate__", "_get_containing_element", "__init__", "_get_attributes", "_append_child", "hasAttributeNS", "createProcessingInstruction", "setAttributeNS", "createComment", "__gt__", "setAttributeNode", "items", "_identified_mixin_init", "__setitem__", "_get_standalone", "_ensure_attributes", "appendData", "__delitem__", "createAttributeNS", "hasAttributes", "getAttributeType", "setNamedItem", "_create_notation", "_get_systemId", "_call_user_data_handler", "__exit__", "removeAttributeNS", "_get_childNodes", "_get_actualEncoding", "_get_value", "_get_publicId", "splitText", "isSameNode", "_set_nodeName", "replaceChild", "isId", "setUserData", "_get_nodeName", "_get_specified", "toprettyxml", "_set_prefix", "_set_data", "renameNode", "_get_lastChild", "_set_nodeValue", "setAttribute", "getElementById", "normalize", "__bool__", "_get_isWhitespaceInElementContent", "item", "_create_entity", "createDocumentType", "getInterface", "_get_prefix", "getAttributeNodeNS", "isEmpty", "isIdNS", "hasFeature", "__getitem__", "__contains__", "getNamedItemNS", "getElementsByTagName", "_get_internalSubset", "setIdAttribute", "hasAttribute", "__repr__", "keys", "getElementsByTagNameNS", "_write_data", "removeAttributeNode", "_clear_id_cache", "importNode", "_get_documentURI", "_get_elements_by_tagName_ns_helper", "getAttributeNS", "setIdAttributeNode", "_get_encoding", "parse", "createDocumentFragment", "parseString", "removeNamedItem", "getAttribute", "insertData", "deleteData", "_create_document", "isElementContent", "_get_documentElement", "_get_localName", "keysNS", "_get_isId", "_get_tagName", "__setstate__", "insertBefore", "getDOMImplementation", "toxml", "createCDATASection", "cloneNode", "_get_schemaType", "__le__", "getAttributeNode", "_get_strictErrorChecking", "replaceData", "getAttributeTypeNS", "__eq__", "_get_data", "values", "__ge__", "removeAttribute", "_get_errorHandler", "__enter__", "_get_version", "get", "_get_containing_entref", "__lt__", "_get_elements_by_tagName_helper", "hasChildNodes", "createTextNode", "removeNamedItemNS", "substringData", "setIdAttributeNS", "_get_namespace", "_set_value", "_cmp", "__len__", "createElementNS", "_get_elem_info", "createDocument", "unlink", "getUserData", "_get_firstChild", "_set_name", "_get_doctype", "removeChild", "writexml", "_get_length", "_nssplit", "replaceWholeText", "isSupported", "_in_document", "_get_name"], "function_calls": ["_clone_node", "Entity", "getattr", "_set_attribute_node", "id", "_write_data", "_clear_id_cache", "repr", "KeyError", "isinstance", "CDATASection", "_get_elements_by_tagName_ns_helper", "_do_pulldom_parse", "EmptyNodeList", "NamedNodeMap", "tuple", "_get_containing_entref", "_get_containing_element", "Notation", "_get_elements_by_tagName_helper", "Text", "_append_child", "defproperty", "NodeList", "Attr", "ValueError", "list", "Document", "Comment", "property", "DOMImplementation", "ReadOnlySequentialNamedNodeMap", "func", "bool", "hasattr", "len", "ProcessingInstruction", "_nssplit", "DocumentFragment", "Element", "DocumentType", "TypeInfo", "TypeError", "_in_document"], "class_names": ["Entity", "Node", "Childless", "CDATASection", "NamedNodeMap", "Notation", "Text", "Identified", "Attr", "Comment", "Document", "DOMImplementation", "ReadOnlySequentialNamedNodeMap", "ElementInfo", "ProcessingInstruction", "DocumentFragment", "Element", "DocumentType", "TypeInfo", "CharacterData"], "class_method_calls": ["self.getNamedItemNS", "clone.documentElement", "newChild.nodeType", "self.isSupported", "self.removeChild", "self.hasFeature", "self._create_document", "self.errorHandler", "newChild.nextSibling", "node.localName", "oldChild.previousSibling", "clone.getAttributeNodeNS", "self._attrs", "e.nodeName", "element.setAttributeNode", "n._call_user_data_handler", "self.previousSibling", "entity.actualEncoding", "t.ownerDocument", "node.value", "childclone.ownerDocument", "node.nodeType", "Node.__init__", "node.systemId", "node.tagName", "node.namespaceURI", "doc.appendChild", "clone.version", "elem._magic_id_nodes", "self.implementation", "node._id_cache", "L.append", "child.data", "self.insertBefore", "self.internalSubset", "node.name", "Node.DOCUMENT_FRAGMENT_NODE", "doc.doctype", "entity.version", "self.toprettyxml", "self.target", "oldChild.nodeType", "attr.unlink", "n.ownerElement", "newOwnerDocument.implementation", "self.parentNode", "childclone.parentNode", "last.nextSibling", "element._attrs", "self.actualEncoding", "self._features", "clone.encoding", "doc._get_elem_info", "clone.value", "Node.NOTATION_NODE", "node.previousSibling", "self.writexml", "self.standalone", "self.localName", "self.childNodes", "Node.unlink", "self.appendChild", "self._attrsNS", "self._id_search_stack", "self.isSameNode", "clone.entities", "self.version", "node.childNodes", "info.isId", "self.setNamedItem", "attr.nodeName", "e.encoding", "e.systemId", "Node.CDATA_SECTION_NODE", "self._ensure_attributes", "c.data", "notation.ownerDocument", "writer.detach", "attr._is_id", "expatbuilder.parseString", "self.removeAttributeNode", "node._magic_id_nodes", "n.localName", "self._child_node_types", "newChild.previousSibling", "child.nodeType", "doctype.publicId", "self.unlink", "newOwnerDocument.createElementNS", "child.unlink", "parent.childNodes", "self.setAttributeNode", "element.localName", "io.StringIO", "clone.ownerDocument", "entity.ownerDocument", "oldChild.nextSibling", "childNodes.append", "element.setIdAttributeNode", "node.attributes", "node._call_user_data_handler", "newOwnerDocument.createDocumentFragment", "clone.setAttributeNS", "self.doctype", "attr.name", "self.entities", "self._identified_mixin_init", "a.ownerDocument", "child.nextSibling", "node.ownerDocument", "n.namespaceURI", "node.nodeName", "L.insert", "self._localName", "self.tagName", "qualifiedName.split", "newOwnerDocument.createComment", "Node.appendChild", "a.specified", "n.publicId", "clone.nodeName", "newText.data", "doctype.parentNode", "clone.notations", "element.removeAttributeNode", "newChild.parentNode", "self.ownerDocument", "newChild.childNodes", "xml.dom", "expatbuilder.parse", "Node.ELEMENT_NODE", "self._call_user_data_handler", "node.target", "Node.ATTRIBUTE_NODE", "info.isElementContent", "attr.namespaceURI", "domreg._parse_feature_string", "self._id_cache", "e.publicId", "attr.value", "elem._attrsNS", "self.notationName", "e.ownerDocument", "events.clear", "Node.PROCESSING_INSTRUCTION_NODE", "self._get_documentElement", "self._magic_id_count", "stack.pop", "n.ownerDocument", "info.getAttributeTypeNS", "idAttr.ownerElement", "data.replace", "node.data", "node.notations", "Node.DOCUMENT_NODE", "element._ensure_attributes", "Document.implementation", "stack.extend", "n.nodeType", "self._name", "self.specified", "self.DOCUMENT_FRAGMENT_NODE", "self.strictErrorChecking", "self.nodeType", "a.value", "node.unlink", "child.normalize", "node.ownerElement", "self.ownerElement", "self._elem_info", "element.namespaceURI", "c.ownerDocument", "n.prefix", "clone.standalone", "events.getEvent", "attr.isId", "element._attrsNS", "newOwnerDocument.createTextNode", "info.isIdNS", "clone.specified", "newOwnerDocument.createAttributeNS", "self.namespaceURI", "self.encoding", "parent.removeChild", "clone.name", "c.parentNode", "child.previousSibling", "e._call_user_data_handler", "attr.specified", "n.data", "Node.ENTITY_REFERENCE_NODE", "pulldom.parseString", "io.TextIOWrapper", "Node.DOCUMENT_TYPE_NODE", "handler.handle", "name.split", "self.systemId", "events.expandNode", "self.documentElement", "self._seq", "self.notations", "childclone.nodeType", "writer.write", "self.getAttributeNodeNS", "Node.TEXT_NODE", "clone.childNodes", "feature.lower", "node._id_search_stack", "e.version", "self._magic_id_nodes", "self.publicId", "oldChild.parentNode", "writer.getvalue", "n.systemId", "rc.append", "attrs.keys", "info.getAttributeType", "n._localName", "io.BytesIO", "n.name", "n.nextSibling", "attr.ownerElement", "self._user_data", "node.nextSibling", "self._is_id", "node.parentNode", "self.nextSibling", "self.name", "idAttr._is_id", "self._get_elem_info", "entity.encoding", "n.previousSibling", "clone.doctype", "doctype.systemId", "clone.appendChild", "element.tagName", "self.data", "pulldom.parse", "e.notationName", "old.unlink", "self._get_attributes", "t.data", "self.namespace", "attr.localName", "Node.COMMENT_NODE", "CharacterData.__init__", "n.tagName", "self._prefix", "attr.prefix", "n.nodeName", "p.ownerDocument", "self._value", "self.getAttributeNode", "elem._attrs", "node.publicId", "newText.ownerDocument", "newOwnerDocument.createProcessingInstruction", "self._cmp", "e.actualEncoding", "Node.ENTITY_NODE", "node.writexml", "d.ownerDocument", "self.setIdAttributeNode", "self._ownerElement", "attr.ownerDocument", "self._data", "self.getNamedItem", "self.nodeName", "newOwnerDocument.createCDATASection", "refChild.previousSibling", "self.prefix", "self.__class__", "node.entities", "doc.implementation", "self.documentURI", "n._is_id", "c.nodeType", "doctype.ownerDocument", "doc.createElementNS"]}, "pulldom.py": {"libraries": ["xml.sax.handler", "xml.dom.minidom", "warnings", "io.StringIO", "xml.sax", "xml.dom.XML_NAMESPACE"], "function_names": ["endPrefixMapping", "expandNode", "warning", "endElement", "endElementNS", "_slurp", "clear", "getEvent", "_emit", "__init__", "parse", "parseString", "startElement", "buildDocument", "startPrefixMapping", "startDocument", "__iter__", "processingInstruction", "__next__", "pop", "fatalError", "comment", "ignorableWhitespace", "error", "startElementNS", "setDocumentLocator", "reset", "endDocument", "characters", "__getitem__"], "function_calls": ["isinstance", "len", "PullDOM", "getattr", "DOMEventStream", "StringIO", "open", "hasattr", "AssertionError", "print"], "class_names": ["SAX2DOM", "ErrorHandler", "DOMEventStream", "PullDOM"], "class_method_calls": ["self.getEvent", "PullDOM.startElement", "self._current_context", "attr.value", "self.pending_events", "attrs._attrs", "attrs.items", "self._emit", "self.buildDocument", "node.setAttributeNodeNS", "self.lastEvent", "self._xmlns_attrs", "self.parser", "node.setAttributeNode", "warnings.warn", "self.elementStack", "self.document", "self.reset", "PullDOM.processingInstruction", "self.bufsize", "PullDOM.characters", "parents.append", "PullDOM.startElementNS", "xml.sax", "PullDOM.ignorableWhitespace", "self._ns_contexts", "self.stream", "self._slurp", "self.firstEvent", "self.pulldom", "node.firstChild", "self.push", "xml.dom", "self._locator", "self.documentFactory", "self.pop", "parentNode.appendChild"]}, "xmlbuilder.py": {"libraries": ["urllib.parse", "urllib.request", "copy", "posixpath", "warnings", "xml.dom.expatbuilder", "xml.dom.NodeFilter.NodeFilter", "xml.dom"], "function_names": ["parseURI", "_get_characterStream", "_set_baseURI", "getFeature", "_get_systemId", "_set_byteStream", "_set_systemId", "_set_characterStream", "_set_async", "_get_async", "parseWithContext", "_get_filter", "createDOMBuilder", "createDOMInputSource", "_get_byteStream", "_get_publicId", "_set_encoding", "_set_filter", "acceptNode", "_get_baseURI", "_get_errorHandler", "loadXML", "createDOMWriter", "_get_encoding", "__init__", "parse", "_parse_bytestream", "_set_errorHandler", "_create_opener", "_set_stringData", "resolveEntity", "abort", "_get_whatToShow", "canSetFeature", "_get_entityResolver", "load", "_get_opener", "_name_xform", "_set_entityResolver", "setFeature", "_guess_media_encoding", "_set_publicId", "saveXML", "_get_stringData", "supportsFeature", "startContainer"], "function_calls": ["ValueError", "DOMBuilder", "getattr", "DOMInputSource", "NotImplementedError", "DOMEntityResolver", "hasattr", "repr", "setattr", "Options", "_name_xform"], "class_names": ["DOMImplementationLS", "DOMBuilder", "DOMInputSource", "DocumentLS", "DOMEntityResolver", "Options", "DOMBuilderFilter"], "class_method_calls": ["self.entityResolver", "copy.copy", "urllib.request", "source.systemId", "self.MODE_SYNCHRONOUS", "self._get_opener", "self.publicId", "options.comments", "builder.parseFile", "options.systemId", "self.errorHandler", "options.whitespace_in_element_content", "posixpath.dirname", "options.cdata_sections", "options.namespace_declarations", "urllib.parse", "self._settings", "self.filter", "path.endswith", "options.validate_if_schema", "options.errorHandler", "self.byteStream", "NodeFilter.SHOW_ALL", "input.systemId", "options.create_entity_ref_nodes", "source.baseURI", "source.publicId", "self._legal_actions", "self._parse_bytestream", "self.stringData", "source.encoding", "info.getplist", "options.charset_overrides_xml_encoding", "options.filter", "self.characterStream", "snode.ownerDocument", "options.entities", "options.datatype_normalization", "self.baseURI", "self.encoding", "name.lower", "self._guess_media_encoding", "param.split", "self._opener", "input.byteStream", "snode.toxml", "param.startswith", "self.parse", "self.MODE_ASYNCHRONOUS", "self.systemId", "self.whatToShow", "source.byteStream", "xml.dom", "self._create_opener", "self.supportsFeature", "self._options", "self.FILTER_ACCEPT"]}, "ElementInclude.py": {"libraries": ["copy"], "function_names": ["default_loader", "include"], "function_calls": ["len", "include", "FatalIncludeError", "loader", "open"], "class_names": ["FatalIncludeError"], "class_method_calls": ["e.tag", "copy.copy", "file.read", "elem.text", "e.tail", "ElementTree.parse", "node.tail", "e.get"]}, "ElementPath.py": {"libraries": ["re"], "function_names": ["xpath_tokenizer", "prepare_parent", "select", "prepare_star", "findtext", "prepare_self", "iterfind", "findall", "find", "__init__", "get_parent_map", "prepare_predicate", "prepare_descendant", "_is_wildcard_tag", "prepare_child", "select_child", "_prepare_tag"], "function_calls": ["_isinstance", "sorted", "select_tag", "SyntaxError", "select_child", "RuntimeError", "select", "iter", "tuple", "_prepare_tag", "list", "iterfind", "slice", "int", "_SelectorContext", "next", "_is_wildcard_tag", "len", "xpath_tokenizer", "get_parent_map"], "class_names": ["_SelectorContext"], "class_method_calls": ["e.tag", "e.itertext", "parent.findall", "tag.split", "context.parent_map", "elem.findall", "selector.append", "namespaces.items", "namespaces.get", "self.root", "_cache.clear", "elem.itertext", "context.root", "elem.iter", "xpath_tokenizer_re.findall", "elem.tag", "predicate.append", "elem.text", "elem.find", "re.compile", "signature.append", "elem.get", "re.match"]}, "ElementTree.py": {"libraries": ["re", "io", "xml.parsers.expat", "contextlib", "sys", "warnings", "collections", "collections.abc", "locale", "pyexpat", "_elementtree._set_factories", "_elementtree.*"], "function_names": ["_escape_attrib_html", "getiterator", "read_events", "_setevents", "copy", "feed", "iter", "_escape_attrib", "__init__", "_raiseerror", "_qname", "__str__", "tostring", "__gt__", "iterator", "items", "seekable", "_escape_cdata", "__setitem__", "ProcessingInstruction", "_escape_attrib_c14n", "remove", "pi", "_fixname", "_iter_namespaces", "_get_writer", "_close_and_return_root", "__delitem__", "extend", "writable", "SubElement", "end", "_assert_is_element", "iterparse", "_default", "findall", "_serialize_text", "_start", "Comment", "_flush", "getchildren", "iterfind", "insert", "__bool__", "tell", "getroot", "_end_ns", "_escape_cdata_c14n", "iselement", "find", "_resolve_prefix_name", "write_c14n", "_end", "tostringlist", "__getitem__", "_setroot", "append", "register_namespace", "__repr__", "keys", "start_ns", "clear", "add_qname", "parse", "close", "XML", "set", "start", "_raise_serialization_error", "findtext", "XMLID", "__le__", "_serialize_html", "handler", "fromstringlist", "__eq__", "_serialize_xml", "__ge__", "data", "itertext", "get", "__lt__", "_start_ns", "makeelement", "flush", "__len__", "dump", "_handle_single", "_namespaces", "write", "comment", "canonicalize", "__hash__"], "function_calls": ["sorted", "append", "_serialize_html", "parse_qname", "_looks_like_prefix_name", "_escape_attrib_html", "data_handler", "_reversed", "end", "serialize", "TypeError", "id", "_serialize_xml", "XMLPullParser", "fixname", "isinstance", "start_ns", "add_qname", "ImportError", "_escape_attrib", "parse", "hash", "_serialize_text", "open", "ElementTree", "range", "ValueError", "list", "IterParseIterator", "TreeBuilder", "factory", "iterator", "set", "_ListDataStream", "start", "type", "_raise_serialization_error", "_escape_cdata", "_join_text", "_namespaces", "hasattr", "write", "ParseError", "close_handler", "len", "_escape_cdata_c14n", "_escape_attrib_c14n", "_get_writer", "Element", "C14NWriterTarget", "_set_factories", "end_ns", "XMLParser"], "class_names": ["ParseError", "IterParseIterator", "TreeBuilder", "QName", "_ListDataStream", "Element", "C14NWriterTarget", "XMLPullParser", "ElementTree", "XMLParser"], "class_method_calls": ["attr_list.sort", "self._fixname", "target.comment", "self._handle_single", "self._default", "sys.stdout", "qnames.add", "parser._parse_whole", "parser.StartNamespaceDeclHandler", "io.RawIOBase", "self.parser", "elem.itertext", "pullparser._close_and_return_root", "self._flush", "self.write", "file_or_filename.write", "out.write", "self._rewrite_prefixes", "expat.error", "stream.getvalue", "self._last", "self._comment_factory", "self.target", "self._root_done", "file.detach", "self._iter_namespaces", "expat.ParserCreate", "self.iter", "self._strip_text", "data.strip", "parser.buffer_text", "elem.write", "elem.get", "source.close", "self._close_and_return_root", "err.offset", "self._pi_factory", "parent.makeelement", "parser.CommentHandler", "events.popleft", "other.text", "self.version", "e.itertext", "events_queue.append", "sio.getvalue", "e.iter", "self._names", "e.tail", "encoding.lower", "attrs.items", "self.tag", "self._children", "namespaces.items", "parser.StartElementHandler", "collections.deque", "namespaces.get", "tree.parse", "attrs.get", "element.text", "re.UNICODE", "file_or_filename.tell", "warnings.warn", "io.StringIO", "self._qname_aware_tags", "self.lst", "parser.ProcessingInstructionHandler", "self._start_ns", "tag.text", "stack.callback", "parser.feed", "self._tail", "attrib.__class__", "contextlib.contextmanager", "parent.append", "self._pending_start", "it.root", "self.tail", "tag.lower", "parser.DefaultHandlerExpand", "self._with_comments", "attr_list.append", "value.lineno", "k.text", "err.code", "re.match", "self._ns_stack", "elem.tail", "register_namespace._namespace_map", "self.attrib", "parser.close", "pullparser.read_events", "self._root_seen", "parser.CharacterDataHandler", "_namespace_map.get", "expat.version_info", "text.text", "text.replace", "self._end", "ElementPath.iterfind", "elem.iter", "self._find_qname_aware_attrs", "elem.getroot", "elem.tag", "ElementPath.findtext", "pullparser.feed", "err.lineno", "self._error", "self._exclude_attrs", "file.tell", "elem.text", "self.text", "self._write", "self._root", "parser.EndElementHandler", "self.entity", "self._target", "io.TextIOWrapper", "self.insert_comments", "file.seekable", "self._elem", "re.compile", "io.BufferedWriter", "self._declared_ns_stack", "target.pi", "self._prefix_map", "value.offset", "value.code", "_namespace_map.items", "self._events_queue", "parser.specified_attributes", "io.BytesIO", "key.text", "v.text", "target.data", "source.read", "self._start", "text.strip", "self._exclude_tags", "io.BufferedIOBase", "value.text", "self._resolve_prefix_name", "n.split", "self._assert_is_element", "locale.getpreferredencoding", "elem.items", "parser.EndNamespaceDeclHandler", "self._raiseerror", "file_or_filename.seekable", "prefixes_seen.add", "collections.abc", "self._ignored_depth", "ElementPath.findall", "self._qname", "self.parse", "self.makeelement", "parser.ordered_attributes", "prefixed_name.split", "self.insert_pis", "self._preserve_space", "contextlib.ExitStack", "self._data", "file.writable", "self._factory", "self._parser", "ElementPath.find", "self.__class__", "self._doctype", "file.write", "tree.iter", "err.position", "self._end_ns"]}, "cElementTree.py": {"libraries": ["xml.etree.ElementTree.*"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "expat.py": {"libraries": ["sys", "pyexpat.*"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["sys.modules"]}, "_exceptions.py": {"libraries": ["sys", "java.lang.Exception"], "function_names": ["__str__", "getException", "getColumnNumber", "getSystemId", "getLineNumber", "__init__", "getMessage", "getPublicId", "__getitem__"], "function_calls": ["AttributeError"], "class_names": ["SAXException", "SAXParseException", "SAXNotRecognizedException", "SAXNotSupportedException", "SAXReaderNotAvailable"], "class_method_calls": ["self._exception", "self.getLineNumber", "sys.platform", "self._linenum", "self.getColumnNumber", "self._systemId", "self.getSystemId", "self._msg", "self._locator", "SAXException.__init__", "Exception.__init__", "self._colnum"]}, "expatreader.py": {"libraries": ["xml.sax.handler.feature_validation", "xml.sax.handler.feature_namespace_prefixes", "xml.sax.handler.property_interning_dict", "xml.parsers.expat", "xml.sax.saxutils", "_weakref", "xml.sax.handler", "xml.sax.handler.property_xml_string", "sys", "xml.sax._exceptions.*", "xml.sax.handler.feature_namespaces", "weakref", "xml.sax.xmlreader", "xml.sax.handler.feature_external_ges", "xml.sax.handler.feature_external_pes", "xml.sax.handler.feature_string_interning"], "function_names": ["_close_source", "start_namespace_decl", "getFeature", "notation_decl", "end_namespace_decl", "feed", "start_element", "_mkproxy", "end_element_ns", "character_data", "__init__", "parse", "skipped_entity_handler", "getPublicId", "end_element", "unparsed_entity_decl", "close", "flush", "processing_instruction", "getSystemId", "getProperty", "setProperty", "create_parser", "start_element_ns", "prepareParser", "getColumnNumber", "setFeature", "getLineNumber", "_reset_cont_handler", "setContentHandler", "start_doctype_decl", "_reset_lex_handler_prop", "reset", "external_entity_ref"], "function_calls": ["isinstance", "SAXReaderNotAvailable", "AttributesImpl", "len", "SAXParseException", "AttributesNSImpl", "_mkproxy", "SAXNotRecognizedException", "SAXNotSupportedException", "ExpatParser", "tuple", "_ClosedParser", "ExpatLocator", "create_parser", "hasattr"], "class_names": ["ExpatLocator", "_ClosedParser", "ExpatParser"], "class_method_calls": ["self.notation_decl", "parser.EndCdataSectionHandler", "parser.StartCdataSectionHandler", "self._decl_handler_prop", "sys.platform", "self._interning", "source.getByteStream", "xmlreader.InputSource", "self.start_element_ns", "parser.ErrorColumnNumber", "self._namespaces", "self.end_element_ns", "attrs.items", "self._entity_stack", "e.code", "parser.ErrorLineNumber", "expat.XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE", "xmlreader.AttributesImpl", "self._source", "self.start_namespace_decl", "xmlreader.IncrementalParser", "self._lex_handler_prop", "self.external_entity_ref", "weakref.proxy", "self.start_element", "self.reset", "expat.ErrorString", "xmlreader.Locator", "self.end_element", "p.setContentHandler", "p.setErrorHandler", "self._close_source", "parser._parser", "p.parse", "expat.error", "handler.property_lexical_handler", "parser.EndDoctypeDeclHandler", "self._reset_lex_handler_prop", "saxutils.prepare_input_source", "lex.endCDATA", "self.start_doctype_decl", "self.end_namespace_decl", "lex.endDTD", "lex.comment", "self._reset_cont_handler", "lex.startCDATA", "xmlreader.AttributesNSImpl", "self._parsing", "aname.split", "xml.sax", "file.close", "self._err_handler", "self._external_ges", "self.feed", "self._cont_handler", "expat.ParserCreate", "self._dtd_handler", "name.split", "self.unparsed_entity_decl", "parser._source", "source.getCharacterStream", "source.getSystemId", "parser.StartDoctypeDeclHandler", "self._parser", "self._ref", "self.skipped_entity_handler", "self._ent_handler", "parser.CommentHandler"]}, "handler.py": {"libraries": [], "function_names": ["endPrefixMapping", "warning", "endElement", "endElementNS", "__init__", "startElement", "resolveEntity", "startPrefixMapping", "notationDecl", "startDocument", "processingInstruction", "fatalError", "ignorableWhitespace", "error", "startElementNS", "unparsedEntityDecl", "setDocumentLocator", "endDocument", "characters", "skippedEntity"], "function_calls": ["print"], "class_names": ["ContentHandler", "DTDHandler", "EntityResolver", "ErrorHandler"], "class_method_calls": ["self._locator"]}, "saxutils.py": {"libraries": ["urllib.parse", "urllib.request", "io", "codecs", "sys", "os"], "function_names": ["__getattr__", "endPrefixMapping", "getFeature", "quoteattr", "warning", "endElement", "endElementNS", "escape", "__init__", "parse", "startElement", "resolveEntity", "setLocale", "_finish_pending_start_element", "_qname", "startPrefixMapping", "notationDecl", "setParent", "startDocument", "_gettextwriter", "getProperty", "processingInstruction", "setProperty", "unescape", "__dict_replace", "fatalError", "prepare_input_source", "ignorableWhitespace", "error", "setFeature", "startElementNS", "unparsedEntityDecl", "getParent", "setDocumentLocator", "endDocument", "characters", "skippedEntity"], "function_calls": ["isinstance", "_wrapper", "escape", "getattr", "str", "quoteattr", "_gettextwriter", "hasattr", "open", "__dict_replace"], "class_names": ["_wrapper", "XMLFilterBase", "XMLGenerator"], "class_method_calls": ["urllib.request", "out.__class__", "out.seekable", "xmlreader.XMLReader", "buffer.close", "source.setByteStream", "self._encoding", "source.getByteStream", "self._finish_pending_start_element", "handler.ContentHandler", "s.replace", "self._current_context", "xmlreader.InputSource", "codecs.StreamWriter", "f.name", "source.setSystemId", "attrs.items", "source.setCharacterStream", "out.flush", "sys.stdout", "data.replace", "urllib.parse", "codecs.StreamReaderWriter", "d.items", "buffer.tell", "io.RawIOBase", "os.fspath", "self._short_empty_elements", "self._pending_start_element", "buffer.seekable", "io.BufferedIOBase", "f.read", "self._flush", "self._undeclared_ns_maps", "io.TextIOBase", "out.write", "self._write", "self._err_handler", "self._ns_contexts", "self._qname", "io.TextIOWrapper", "buffer.write", "self._cont_handler", "self._dtd_handler", "source.getCharacterStream", "os.path", "source.getSystemId", "os.PathLike", "self._parent", "buffer.writable", "out.tell", "self._ent_handler"]}, "xmlreader.py": {"libraries": ["_exceptions.SAXNotSupportedException", "_exceptions.SAXNotRecognizedException"], "function_names": ["_test", "getFeature", "getEncoding", "setEntityResolver", "getNames", "keys", "getType", "setCharacterStream", "values", "copy", "feed", "getQNameByName", "getValue", "get", "getErrorHandler", "getEntityResolver", "__init__", "parse", "setByteStream", "setLocale", "setEncoding", "getPublicId", "getDTDHandler", "close", "getByteStream", "__len__", "setSystemId", "getSystemId", "getLength", "items", "getProperty", "setErrorHandler", "getCharacterStream", "setProperty", "getContentHandler", "getQNames", "getValueByQName", "prepareParser", "setPublicId", "getColumnNumber", "getNameByQName", "setFeature", "getLineNumber", "setContentHandler", "reset", "setDTDHandler", "__getitem__", "__contains__"], "function_calls": ["KeyError", "list", "len", "_test", "SAXNotRecognizedException", "NotImplementedError", "SAXNotSupportedException", "IncrementalParser", "XMLReader", "Locator"], "class_names": ["AttributesImpl", "InputSource", "AttributesNSImpl", "IncrementalParser", "XMLReader", "Locator"], "class_method_calls": ["file.read", "source.getByteStream", "handler.ContentHandler", "self._attrs", "self._bufsize", "self.__charfile", "self.__public_id", "self.close", "self.__bytefile", "saxutils.prepare_input_source", "self._err_handler", "handler.ErrorHandler", "XMLReader.__init__", "self.prepareParser", "self._cont_handler", "handler.EntityResolver", "self._dtd_handler", "source.getCharacterStream", "self.__encoding", "self._qnames", "handler.DTDHandler", "self.__class__", "self.__system_id", "self.feed", "self._ent_handler"]}, "zipapp.py": {"libraries": ["contextlib", "zipfile", "argparse", "shutil", "sys", "pathlib", "os", "stat"], "function_names": ["_maybe_open", "get_interpreter", "create_archive", "main", "_write_file_prefix", "_copy_archive"], "function_calls": ["isinstance", "_maybe_open", "get_interpreter", "ZipAppError", "SystemExit", "all", "create_archive", "main", "print", "_write_file_prefix", "_copy_archive", "open", "filter", "hasattr"], "class_names": ["ZipAppError"], "class_method_calls": ["argparse.ArgumentParser", "sys.platform", "main_py.encode", "part.isidentifier", "mod.split", "args.output", "target.chmod", "source.is_file", "zipfile.ZIP_DEFLATED", "f.write", "sys.exit", "f.readline", "child.relative_to", "parser.add_argument", "source.with_suffix", "args.info", "zipfile.ZipFile", "f.read", "args.source", "src.readline", "arcname.as_posix", "source.rglob", "args.python", "pathlib.Path", "zipfile.ZIP_STORED", "z.writestr", "MAIN_TEMPLATE.format", "contextlib.contextmanager", "interpreter.encode", "target.stat", "os.path", "args.compress", "os.PathLike", "source.exists", "src.read", "main.partition", "os.chmod", "sys.getfilesystemencoding", "dst.write", "stat.S_IEXEC", "os.stat", "fn.split", "z.write", "args.main", "shutil.copyfileobj", "parser.parse_args"]}, "zipfile.py": {"libraries": ["contextlib", "posixpath", "struct", "warnings", "bz2", "io", "threading", "importlib.util", "os", "functools", "itertools", "time", "binascii", "shutil", "zlib", "stat", "argparse", "lzma", "sys", "py_compile"], "function_names": ["writestr", "_difference", "_read2", "parent", "is_dir", "__init__", "open", "decrypter", "__str__", "writepy", "decompress", "_next", "seekable", "crc32", "_RealGetContents", "_fpclose", "main", "exists", "extract", "_check_zipfile", "writable", "__exit__", "compress", "make", "_EndRecData", "extractall", "_get_codename", "resolve_dir", "_ZipDecrypter", "_read1", "seek", "__del__", "_ancestry", "_is_child", "tell", "_strip_extra", "_get_compressor", "_fileobj", "_open_to_write", "read_text", "peek", "namelist", "_EndRecData64", "__repr__", "from_file", "_write_end_record", "_init_decrypter", "getinfo", "close", "_sanitize_windows_name", "is_zipfile", "printdir", "testzip", "iterdir", "_init", "FileHeader", "_extract_member", "update_keys", "_gen_crc", "readline", "_parents", "readable", "read1", "addToZip", "_get_decompressor", "joinpath", "_update_crc", "_writecheck", "__enter__", "is_file", "name", "_compile", "flush", "infolist", "_decodeExtra", "_encodeFilenameFlags", "read_bytes", "_check_compression", "read", "write", "comment", "_name_set", "setpassword", "_implied_dirs"], "function_calls": ["_EndRecData64", "_check_zipfile", "min", "sorted", "append", "getattr", "addToZip", "cls", "_get_decompressor", "_difference", "vars", "RuntimeError", "KeyError", "filterfunc", "isinstance", "LZMADecompressor", "_EndRecData", "super", "_ZipDecrypter", "Path", "open", "ZipExtFile", "_compile", "range", "ValueError", "list", "_ancestry", "set", "type", "_Tellable", "unpack", "_strip_extra", "_check_compression", "_get_compressor", "_dedupe", "hasattr", "bytearray", "len", "crc32", "_SharedFile", "_ZipWriteFile", "max", "chr", "LargeZipFile", "ZipInfo", "ZipFile", "NotImplementedError", "update_keys", "main", "bytes", "filter", "LZMACompressor", "TypeError", "map", "BadZipFile", "print"], "class_names": ["_SharedFile", "_ZipWriteFile", "LargeZipFile", "FastLookup", "ZipInfo", "ZipFile", "Path", "_Tellable", "LZMACompressor", "PyZipFile", "CompleteDirs", "ZipExtFile", "BadZipFile", "LZMADecompressor"], "class_method_calls": ["self._unconsumed", "zlib.compressobj", "os.mkdir", "self.closed", "self.reserved", "self._pwd", "self._writecheck", "zinfo.create_version", "x.create_version", "FastLookup.make", "self.external_attr", "zlib.decompressobj", "self.volume", "struct.calcsize", "self.__repr", "posixpath.sep", "self._compress_type", "self.debug", "data.encode", "zinfo.comment", "self.close", "bz2.BZ2Compressor", "io.open", "posixpath.basename", "x.filename", "self._sanitize_windows_name", "x.extract_version", "zinfo.internal_attr", "self.create_version", "self._get_codename", "self.eof", "self.fp", "zinfo.compress_type", "self.write", "self.orig_filename", "time.localtime", "os.sep", "x._raw_time", "lzma._decode_filter_properties", "strm.read", "args.extract", "zf.extractall", "self._encodeFilenameFlags", "x.external_attr", "zinfo.filename", "self._decrypter", "zinfo.FileHeader", "self.offset", "self._close", "lzma.FILTER_LZMA1", "pathsep.join", "self._close_fileobj", "self._file", "self._crc", "zinfo.flag_bits", "sys.stderr", "struct.Struct", "data.rfind", "os.PathLike", "lzma.LZMACompressor", "self._RealGetContents", "itertools.islice", "self._compresslevel", "path.at", "self.MAX_SEEK_READ", "zinfo._end_offset", "lzma.LZMADecompressor", "x.date_time", "py_compile.compile", "source.mode", "result.append", "self._allowZip64", "zinfo.orig_filename", "self.pwd", "self.comment", "os.makedirs", "self._left", "self._optimize", "buffer.append", "self._end_offset", "os.altsep", "dict.fromkeys", "posixpath.dirname", "data.filename", "filename.decode", "binascii.crc32", "self.flag_bits", "zinfo.extra", "os.getcwd", "self._init", "fpin.seek", "self._comp", "self._fileRefCnt", "fileobj.seekable", "importlib.util", "self.root", "self._read2", "self._fileobj", "self.create_system", "zlib.crc32", "self._open_to_write", "warnings.warn", "self.__lookup", "zipinfo.file_size", "self.mode", "zinfo.header_offset", "self._offset", "dirlist.remove", "self.compress_size", "self.tell", "compressor_names.get", "struct.unpack", "self._filePassed", "os.curdir", "x.comment", "fp.read", "self._read1", "fpin.read", "self.namelist", "x.file_size", "self._strict_timestamps", "bz2.BZ2Decompressor", "zef_file.read", "dest.write", "zinfo.external_attr", "py_compile.PyCompileError", "x.reserved", "self.getinfo", "self.extract_version", "self.filename", "os.path", "zinfo.create_system", "extra.append", "self._readbuffer", "self._seekable", "fp.seek", "zinfo.reserved", "self._running_crc", "self.header_offset", "st.st_mtime", "self._orig_compress_size", "self._compress_size", "parser.parse_args", "self._compressor", "path.rstrip", "group.add_argument", "self.file_size", "itertools.filterfalse", "argparse.ArgumentParser", "endrec.append", "sys.platform", "self.compression", "sys.flags", "self.compresslevel", "zipinfo.compress_size", "zf.testzip", "zinfo.file_size", "self.open", "x.compress_size", "fp.close", "self.extra", "comment.setter", "self._zinfo", "self.compress_type", "x.volume", "self.is_dir", "st.st_mode", "zef_file.close", "os.fspath", "os.pardir", "functools.partial", "itertools.chain", "cls._windows_illegal_name_trans_table", "filename.replace", "x.header_offset", "self._name_set", "arcname.split", "self._extract_member", "self._orig_compress_start", "posixpath.join", "zlib.DEFLATED", "ZipInfo.from_file", "file.tell", "self._zipfile", "x.CRC", "self.MIN_READ_SIZE", "self._lock", "self.newlines", "self.MAX_N", "zf.write", "args.test", "io.TextIOWrapper", "time.time", "file.seekable", "zlib.Z_DEFAULT_COMPRESSION", "self._didModify", "zinfo.CRC", "self.date_time", "x.compress_type", "os.listdir", "self.seekable", "x.extra", "x.internal_attr", "zipinfo.flag_bits", "shutil.copyfileobj", "posixpath.split", "x.flag_bits", "arcname.translate", "zinfo.is_dir", "arcname.replace", "zinfo._encodeFilenameFlags", "zf.printdir", "stat.S_ISDIR", "stat.filemode", "self.filelist", "self._compress_left", "self._pos", "zipinfo.CRC", "x.rstrip", "fileobj.tell", "lzma.FORMAT_RAW", "err.msg", "io.BytesIO", "self._eof", "contextlib.suppress", "args.list", "self._orig_start_crc", "self.name", "self.start_dir", "self.writepy", "self.internal_attr", "parser.add_mutually_exclusive_group", "self._expected_crc", "zinfo.compress_size", "io.BufferedIOBase", "zipinfo.compress_type", "x.create_system", "zipinfo.filename", "st.st_size", "threading.RLock", "self._next", "self._init_decrypter", "f.read", "filename.find", "self.NameToInfo", "self.read", "self.CRC", "self._decomp", "self._comment", "str.maketrans", "self.__names", "self._implied_dirs", "self._orig_file_size", "self._write_end_record", "struct.pack", "zipinfo.orig_filename", "self._update_crc", "self.at", "zinfo.extract_version", "self._decompressor", "zef_file.tell", "self._is_child", "x._decodeExtra", "fname.decode", "fpin.tell", "self._writing", "io.UnsupportedOperation", "args.create", "self._fpclose", "zinfo.date_time", "ZipFile.__init__", "cls.__new__", "os.stat", "self.__class__", "zipinfo._raw_time", "zinfo._compresslevel", "member.is_dir", "member.filename", "self._zip64", "lzma._encode_filter_properties", "self._file_size", "_EXTRA_FIELD_STRUCT.unpack"]}, "zipimport.py": {"libraries": ["zlib.decompress", "pathlib.Path", "time", "_frozen_importlib", "_frozen_importlib_external._unpack_uint32", "_io", "_frozen_importlib_external._unpack_uint16", "sys", "_frozen_importlib_external", "io.BytesIO", "_imp", "os", "marshal", "importlib.abc.ResourceReader"], "function_names": ["_get_decompress_func", "_get_mtime_and_size_of_source", "__repr__", "get_filename", "open_resource", "_get_data", "_get_pyc_source", "_normalize_line_endings", "get_resource_reader", "__init__", "_is_dir", "_get_module_info", "find_loader", "get_source", "load_module", "contents", "is_resource", "resource_path", "_unmarshal_code", "find_module", "get_data", "_get_module_code", "is_package", "_get_module_path", "_read_directory", "get_code", "_parse_dostime", "_compile_source", "_eq_mtime"], "function_calls": ["ZipImportError", "_ZipImportResourceReader", "_get_decompress_func", "abs", "_get_mtime_and_size_of_source", "_get_data", "_get_pyc_source", "_normalize_line_endings", "isinstance", "_eq_mtime", "ImportError", "Path", "_is_dir", "_get_module_info", "_unpack_uint32", "_module_type", "_unmarshal_code", "decompress", "set", "type", "_get_module_code", "_unpack_uint16", "OSError", "hasattr", "BytesIO", "len", "compile", "_get_module_path", "max", "_read_directory", "EOFError", "_parse_dostime", "FileNotFoundError", "_compile_source", "TypeError", "exec"], "class_names": ["ZipImportError", "zipimporter", "_ZipImportResourceReader"], "class_method_calls": ["_bootstrap_external.path_sep", "_bootstrap_external.path_separators", "self._files", "_bootstrap._verbose_message", "_bootstrap_external._path_join", "_bootstrap_external._validate_hash_pyc", "os.fsdecode", "mod.__builtins__", "sys.modules", "_bootstrap_external._path_split", "_imp.source_hash", "mod.__path__", "pathname.replace", "st.st_mode", "self.archive", "marshal.loads", "relative_path.parent", "_bootstrap_external._fix_up_module", "pathname.startswith", "_ZipImportResourceReader._registered", "_bootstrap_external._classify_pyc", "_bootstrap_external._path_stat", "ResourceReader.register", "self.zipimporter", "_imp.check_hash_based_pycs", "subdirs_seen.add", "relative.parent", "relative.name", "fp.read", "_bootstrap_external._RAW_MAGIC_NUMBER", "mod.__dict__", "_unmarshal_code.__code__", "self.fullname", "fullname.rpartition", "_io.open_code", "name.replace", "source.replace", "data.rfind", "name.decode", "fp.seek", "prefix.append", "fp.tell", "self.prefix", "relative_path.name", "time.mktime", "fullname_path.relative_to", "mod.__loader__", "self.find_loader", "path.replace", "self.is_package"]}, "build-installer.py": {"libraries": ["pwd", "pprint", "urllib.request", "platform", "grp", "time", "getopt", "textwrap", "plistlib.dump", "shutil", "sys", "plistlib.writePlist", "urllib2", "os", "stat"], "function_names": ["writePlist", "getTclTkVersion", "pkg_recipes", "buildPythonDocs", "getTargetCompilers", "shellQuote", "checkEnvironment", "getBuildTuple", "buildInstaller", "buildLibraries", "makeMpkgPlist", "patchScript", "useOldTk", "getFullVersion", "library_recipes", "build_universal_openssl", "getVersionMajorMinor", "getVersion", "verifyThirdPartyFile", "extractArchive", "captureCommand", "grepValue", "buildPython", "setIcon", "getDeptargetTuple", "fatal", "patchFile", "parseOptions", "runCommand", "tweak_tcl_build", "buildDMG", "installSize", "packageFromRecipe", "build_openssl_arch", "main", "fileContents", "downloadURL", "internalTk", "buildRecipe"], "function_calls": ["writePlist", "pkg_recipes", "buildPythonDocs", "getTargetCompilers", "shellQuote", "downloadURL", "buildrecipe", "checkEnvironment", "RuntimeError", "isinstance", "getBuildTuple", "buildInstaller", "buildLibraries", "makeMpkgPlist", "patchScript", "useOldTk", "str", "tuple", "getFullVersion", "library_recipes", "dict", "open", "getVersionMajorMinor", "getVersion", "verifyThirdPartyFile", "extractArchive", "range", "captureCommand", "grepValue", "list", "buildPython", "setIcon", "dump", "fatal", "patchFile", "getDeptargetTuple", "int", "type", "bool", "parseOptions", "runCommand", "buildDMG", "len", "installSize", "packageFromRecipe", "NotImplementedError", "build_openssl_arch", "main", "fileContents", "print", "internalTk", "buildRecipe", "exec", "globals"], "class_names": [], "class_method_calls": ["os.mkdir", "os.getuid", "target_cc_map.get", "sys.stdout", "DEPTARGET.split", "time.localtime", "fpIn.close", "shutil.rmtree", "pprint.pprint", "configure_args.extend", "line.replace", "fp.readlines", "sys.stderr", "platform.release", "os.readlink", "sys.argv", "stat.S_IRUSR", "f.endswith", "archbasefws.insert", "os.makedirs", "stat.S_IWGRP", "data.split", "archbasefws.append", "stat.S_IXOTH", "os.symlink", "platform.mac_ver", "os.getcwd", "fpOut.close", "stat.S_IWUSR", "fp.writelines", "ln.split", "shutil.copytree", "os.system", "fp.read", "value.replace", "os.getenv", "os.path", "sys.version_info", "line.startswith", "stat.S_IXGRP", "stat.S_IMODE", "default_target_map.get", "libcrypto.replace", "LDVERSION.replace", "fpIn.read", "f.startswith", "configure_args.insert", "fp.close", "retval.endswith", "stat.S_IXUSR", "data.replace", "stat.S_IROTH", "fp.write", "st.st_mode", "time.ctime", "getopt.getopt", "fpOut.write", "result.extend", "grp.getgrnam", "getopt.GetoptError", "ev.startswith", "os.environ", "shutil.copy", "fd.read", "os.walk", "os.chown", "os.listdir", "os.chmod", "THIRD_PARTY_LIBS.append", "f.close", "fn.endswith", "archiveName.endswith", "l.startswith", "_saved.append", "os.rename", "libssl.replace", "urllib_request.urlopen", "os.popen", "os.chdir", "sys.exit", "item.get", "platform.system", "value.strip", "pwd.getpwuid", "recipe.get", "ln.startswith", "sys.exc_info", "stat.S_IRGRP", "retval.startswith", "configure_opts.append", "build_time_vars.items", "v.replace", "os.unlink", "textwrap.dedent", "configure_args.remove", "time.sleep", "new_contents.append", "os.stat", "universal_opts_map.keys", "fd.close"]}, "Extras.install.py": {"libraries": ["sys", "os", "shutil"], "function_names": ["isclean", "copycleandir", "main"], "function_calls": ["len", "isclean", "main", "copycleandir", "range", "print"], "class_names": [], "class_method_calls": ["shutil.copy2", "os.walk", "os.path", "sys.exit", "cursrc.startswith", "sys.stderr", "os.makedirs", "sys.argv", "name.endswith"]}, "idlemain.py": {"libraries": ["sys", "os", "idlelib.pyshell.main"], "function_names": [], "function_calls": ["enumerate", "main"], "class_names": [], "class_method_calls": ["os.chdir", "sys.path", "os.path", "value.startswith", "value.partition", "pyex.partition", "sys.executable", "sys.version_info", "sys.argv", "os.environ", "sys.prefix"]}, "plistlib_generate_testdata.py": {"libraries": ["Cocoa.NSPropertyListSerialization", "Cocoa.NSPropertyListOpenStepFormat", "Cocoa.NSURL", "datetime", "Cocoa.NSMutableArray", "Cocoa.NSUUID", "Cocoa.CFUUIDCreateFromString", "Cocoa.NSPropertyListXMLFormat_v1_0", "binascii", "Cocoa.NSNull", "Cocoa.NSNumber", "Cocoa.NSMutableDictionary", "Cocoa.NSDate", "Cocoa.NSString", "Cocoa.NSKeyedArchiver", "Cocoa.CFPropertyListCreateData", "Cocoa.NSPropertyListBinaryFormat_v1_0", "collections.OrderedDict"], "function_names": ["_encode_base64", "nsstr", "main"], "function_calls": ["len", "OrderedDict", "_encode_base64", "main", "bytes", "nsstr", "range", "print"], "class_names": [], "class_method_calls": ["NSMutableDictionary.alloc", "NSNumber.numberWithUnsignedLongLong_", "NSKeyedArchiver.archivedDataWithRootObject_", "binascii.b2a_base64", "datetime.timezone", "datetime.datetime", "NSPropertyListSerialization.dataWithPropertyList_format_options_error_", "pieces.append", "NSDate.dateWithTimeIntervalSince1970_", "datetime.timedelta", "NSString.alloc", "aa.append", "a.append", "NSMutableArray.alloc"]}, "blake2b2s.py": {"libraries": ["os", "re"], "function_names": ["find_public", "main", "getfiles"], "function_calls": ["getfiles", "sorted", "set", "main", "open", "print"], "class_names": [], "class_method_calls": ["line.replace", "f.write", "os.path", "lines.append", "re.compile", "mo.group", "os.listdir", "public_funcs.add", "PUBLIC_SEARCH.search"]}, "fnt.py": {"libraries": [], "function_names": ["prod", "is_primitive_root", "ntt", "ntt_convolute"], "function_calls": ["divmod", "len", "ntt_convolute", "pow", "is_primitive_root", "zip", "prod", "ntt", "range", "print"], "class_names": [], "class_method_calls": []}, "bench.py": {"libraries": ["test.test_support.import_fresh_module", "time", "test.support.import_fresh_module"], "function_names": ["pi_float", "factorial", "pi_cdecimal", "pi_decimal"], "function_calls": ["import_fresh_module", "str", "factorial", "func", "D", "range", "print"], "class_names": [], "class_method_calls": ["C.Decimal", "c.Emin", "time.time", "c.prec", "C.MIN_EMIN", "to_benchmark.insert", "c.Emax", "C.MAX_PREC", "C.MAX_EMAX", "P.Decimal", "P.getcontext", "func.__name__", "C.getcontext"]}, "bignum.py": {"libraries": ["sys", "decimal.*", "gmpy.mpz"], "function_names": ["xhash"], "function_calls": ["pow", "int", "hash", "Decimal", "xhash", "mpz"], "class_names": [], "class_method_calls": ["sys.hash_info"]}, "deccheck.py": {"libraries": ["copy.copy", "randdec.all_unary", "formathelper.rand_locale", "formathelper.rand_format", "_pydecimal._dec_from_triple", "time", "random", "test.support.import_fresh_module", "sys", "randdec.randfloat", "randdec.all_binary", "collections.defaultdict", "randdec.binary_optarg", "randdec.unary_optarg", "randdec.ternary_optarg", "randdec.all_ternary"], "function_names": ["function_as_string", "exp", "getemin", "getclamp", "default", "RestrictedDecimal", "convert", "randcontext", "test_unary", "ln", "check_untested", "test_format", "setprec", "setemax", "standard_ulp", "getround", "__pow__", "check_ulpdiff", "bin_resolve_ulp", "assert_eq_status", "harrison_ulp", "__init__", "test_round", "clear_status", "test_ternary", "log10", "test_method", "settraps", "setstatus", "clear_traps", "verify", "test_from_float", "__str__", "setclamp", "__radd__", "getemax", "getprec", "__round__", "__getattribute__", "setround", "resolve_underflow", "test_binary", "skip_error", "setemin", "__float__", "callfuncs", "getcapitals", "unsupported", "setcapitals", "raise_error", "test_quantize_api", "log", "rounding_direction"], "function_calls": ["function_as_string", "TestSet", "sorted", "getattr", "abs", "RestrictedDecimal", "convert", "randcontext", "check_untested", "rand_locale", "repr", "_dec_from_triple", "isinstance", "AttributeError", "copy", "rand_format", "str", "all_binary", "tuple", "unary_optarg", "test_method", "defaultdict", "range", "verify", "ValueError", "property", "set", "dir", "binary_optarg", "int", "type", "all_unary", "enumerate", "SkipHandler", "ternary_optarg", "Context", "len", "testfunc", "chr", "import_fresh_module", "skip_error", "callfuncs", "all_ternary", "raise_error", "randfloat", "log", "RestrictedList", "VerifyError", "print"], "class_names": ["Context", "TestSet", "SkipHandler", "RestrictedList", "VerifyError"], "class_method_calls": ["funcdict.values", "c.clear_traps", "C.MIN_EMIN", "P.InvalidContext", "t.op", "C.ROUND_HALF_DOWN", "sys.stdout", "C.Subnormal", "C.ROUND_FLOOR", "C.Overflow", "P.InvalidOperation", "c.prec", "P.DivisionUndefined", "self.presults", "t.cresults", "context.clear_status", "P.ROUND_HALF_EVEN", "rounded.is_infinite", "self.cex", "context.prec", "random.seed", "random.sample", "P.ROUND_HALF_DOWN", "context.capitals", "C.ROUND_CEILING", "C.DivisionUndefined", "self.context", "C.InvalidContext", "P.Inexact", "context.rounding", "sys.argv", "P.FloatOperation", "self.pop", "P.ROUND_FLOOR", "C.ConversionSyntax", "C.FloatOperation", "P.Clamped", "maxcontext.create_decimal", "c.clamp", "maxcontext.traps", "t.context", "self.maxctx", "dec.next_plus", "dec._int", "context.Emax", "tested.add", "t.cex", "C.getcontext", "C.DivisionImpossible", "self.p", "C.ROUND_HALF_UP", "P.ConversionSyntax", "C.MAX_PREC", "self.c", "t.contextfunc", "self.ulpdiff", "C.Underflow", "context.clear_traps", "self.clear_traps", "P.Overflow", "err.rstrip", "P.DivisionByZero", "random.randrange", "context.clamp", "self.check_ulpdiff", "funcname.replace", "stat.items", "t.rc", "P.Subnormal", "P.Rounded", "P.ROUND_CEILING", "context.c", "P.ROUND_05UP", "P.Decimal", "context.assert_eq_status", "C.Clamped", "shandler.default", "t.rp", "self.pex", "P.Underflow", "context.p", "t.pex", "P.getcontext", "method.startswith", "maxcontext.clamp", "C.DivisionByZero", "C.ROUND_DOWN", "c.Emax", "self.cresults", "C.Inexact", "C.Decimal", "time.time", "C.MAX_EMAX", "self.rounding_direction", "e.__class__", "context.Emin", "c.Emin", "P.ROUND_DOWN", "self.resolve_underflow", "self.standard_ulp", "self.contextfunc", "funcname.startswith", "dec._exp", "C.ROUND_05UP", "op.p", "P.ROUND_HALF_UP", "C.ROUND_HALF_EVEN", "t.cop", "x.compare_total", "C.Rounded", "sys.exit", "self.harrison_ulp", "C.Context", "value.strip", "dec.next_minus", "exact._sign", "C.InvalidOperation", "list.__getattribute__", "exact.is_infinite", "rounded._sign", "t.pop", "self.bin_resolve_ulp", "C.ROUND_UP", "self.op", "maxcontext.flags", "self.powmod_zeros", "self.settraps", "base_expts.append", "t.funcname", "v.replace", "self.clear_status", "P.ROUND_UP", "P.Context", "self.setstatus", "self.funcname", "t.presults", "random.choice", "op.c", "maxcontext.clear_flags", "self.cop"]}, "formathelper.py": {"libraries": ["platform", "distutils.spawn.find_executable", "random", "test.support.import_fresh_module", "sys", "subprocess", "locale", "os"], "function_names": ["check_fillchar", "rand_format", "all_format_loc", "get_preferred_encoding", "all_format_sep", "rand_fillchar", "randfill", "all_fillchars", "rand_locale", "printit"], "function_calls": ["format", "len", "sorted", "chr", "check_fillchar", "import_fresh_module", "str", "get_preferred_encoding", "open", "range", "find_executable"], "class_names": [], "class_method_calls": ["locale.LC_ALL", "result.encode", "c.encode", "typespec.replace", "sys.stdout", "f.readline", "locale.setlocale", "subprocess.Popen", "platform.system", "loc.startswith", "locale.Error", "random.sample", "locale_list.split", "locale_list.decode", "locale.getpreferredencoding", "subprocess.PIPE", "locale_list.remove", "random.randrange", "line.split", "locale.LC_CTYPE", "os.path", "f.readlines", "fmt.encode", "sys.stderr", "random.choice", "P.Decimal", "line.startswith", "loc.split"]}, "randdec.py": {"libraries": ["fractions.Fraction", "random.randrange", "randfloat.un_randfloat", "random.sample", "randfloat.bin_randfloat", "randfloat.tern_randfloat"], "function_names": ["indicator", "nan", "bin_close_to_pow10", "from_triple", "close_to_zero_less", "close_to_etiny_less", "randcomplex", "decimal_part", "randsign", "close_to_etiny_greater", "tern_incr_digits", "randfraction", "infinity", "bin_close_numbers", "dot", "logical_bin_incr_digits", "close_to_zero_greater", "tern_random_mixed_op", "close_to_one_less", "numeric_value", "rand_adjexp", "close_to_emin_greater", "close_to_min_etiny_greater", "un_random_mixed_op", "digits", "bin_incr_digits", "close_to_one_greater", "logical_un_incr_digits", "all_binary", "un_close_numbers", "tern_close_numbers", "unary_optarg", "close_to_min_etiny_less", "sign", "close_to_emax_less", "close_to_emax_greater", "expdigits", "close_to_emin_less", "randint", "un_incr_digits", "binary_optarg", "all_unary", "randtuple", "exponent_part", "bindigits", "ternary_optarg", "bin_random_mixed_op", "numeric_string", "randdec", "un_close_to_pow10", "all_ternary", "randfloat", "ndigits", "un_incr_digits_tuple"], "function_calls": ["indicator", "nan", "bin_close_to_pow10", "from_triple", "decimal_part", "randsign", "tern_incr_digits", "infinity", "abs", "bin_close_numbers", "func1", "dec", "dot", "Fraction", "logical_bin_incr_digits", "un_randfloat", "tern_randfloat", "number", "tern_random_mixed_op", "numeric_value", "un_random_mixed_op", "str", "digits", "complex", "logical_un_incr_digits", "bin_incr_digits", "tuple", "un_close_numbers", "tern_close_numbers", "randrange", "sign", "range", "sample", "expdigits", "randint", "randtuple", "func", "float", "func3", "exponent_part", "bindigits", "bin_randfloat", "func2", "bin_random_mixed_op", "len", "map", "numeric_string", "randdec", "un_close_to_pow10", "randfloat", "ndigits", "un_incr_digits_tuple"], "class_names": [], "class_method_calls": []}, "randfloat.py": {"libraries": ["random"], "function_names": ["test_bigcomp", "test_halfway_cases", "test_short_halfway_cases", "test_boundaries", "test_parsing", "test_underflow_boundary", "tern_randfloat", "un_randfloat", "bin_randfloat"], "function_calls": ["test_bigcomp", "divmod", "test_halfway_cases", "test_short_halfway_cases", "test_boundaries", "test_parsing", "test_underflow_boundary", "range"], "class_names": [], "class_method_calls": ["random.choice", "random.randrange"]}, "cleanup.py": {"libraries": ["os", "re"], "function_names": ["cleanup", "getfiles"], "function_calls": ["open", "cleanup", "getfiles"], "class_names": [], "class_method_calls": ["f.write", "os.path", "re.compile", "line.strip", "os.listdir", "buf.append", "line.startswith", "CPP2.sub", "CPP1.sub"]}, "typeslots.py": {"libraries": ["sys", "re"], "function_names": ["main", "generate_typeslots"], "function_calls": ["len", "max", "generate_typeslots", "int", "main", "open", "range"], "class_names": [], "class_method_calls": ["out.write", "res.keys", "member.startswith", "sys.argv", "re.match", "m.group", "sys.stdout", "sys.stdin"]}, "appxmanifest.py": {"libraries": ["io", "xml.etree.ElementTree", "pathlib.Path", "collections", "sys", "constants.*", "ctypes", "pathlib.PureWindowsPath", "os"], "function_names": ["get_appxmanifest", "get_packagefamilyname", "add_file_type", "add_visual", "get_resources_xml", "add_registry_entries", "get_appx_layout", "add_alias", "find_or_add", "add_application", "_get_registry_entries", "_fixup_sccd", "disable_registry_virtualization", "_get_app"], "function_calls": ["object", "cond", "add_application", "PureWindowsPath", "_fixup_sccd", "disable_registry_virtualization", "isinstance", "get_appxmanifest", "str", "dict", "find_or_add", "open", "_get_registry_entries", "PACKAGE_ID", "ValueError", "get_packagefamilyname", "add_file_type", "QN", "get_resources_xml", "add_registry_entries", "zip", "add_alias", "LookupError", "OSError", "_get_app", "len", "add_visual"], "class_names": ["PACKAGE_ID"], "class_method_calls": ["ctypes.byref", "sccd.is_file", "element.partition", "ns.include_chm", "ns.include_launchers", "APPXMANIFEST_NS.items", "ctypes.create_unicode_buffer", "data.get", "sys.getwindowsversion", "io.BytesIO", "sccd.parent", "r.parts", "ns.include_pip", "sccd.name", "buffer.getbuffer", "value.get", "e.text", "ET.SubElement", "ctypes.Structure", "d.items", "ns.debug", "ctypes.c_uint32", "node.keys", "result.value", "xml.find", "xml.findall", "data.items", "ctypes.c_uint64", "io.StringIO", "ns.include_html_doc", "ns.arch", "ctypes.c_wchar_p", "fullkey.parts", "ET.register_namespace", "xml.write", "e.set", "k.set", "ns.source", "result_len.value", "ctypes.windll", "node.tag", "ns.include_appxmanifest", "os.getenv", "ET.QName", "ns.include_idle", "ae.clear", "node.text", "ns.temp", "RESOURCES_XML_TEMPLATE.encode", "node.set", "ET.parse"]}, "catalog.py": {"libraries": ["sys"], "function_names": ["can_sign", "write_catalog", "public"], "function_calls": ["can_sign"], "class_names": [], "class_method_calls": ["CATALOG_TEMPLATE.format", "file.stat", "file.is_file", "__all__.append", "cat.writelines", "cat.write", "target.open", "f.__name__"]}, "distutils.command.bdist_wininst.py": {"libraries": ["distutils.errors.DistutilsPlatformError", "distutils.core.Command"], "function_names": ["finalize_options", "run", "initialize_options"], "function_calls": ["DistutilsPlatformError"], "class_names": ["bdist_wininst"], "class_method_calls": []}, "filesets.py": {"libraries": ["os"], "function_names": ["_return_true", "_make_name", "_rglob", "__init__", "rglob", "__contains__"], "function_calls": ["isinstance", "any", "condition", "set", "_rglob", "type", "filter", "map"], "class_names": ["FileNameSet", "FileStemSet", "FileSuffixSet"], "class_method_calls": ["os.scandir", "d.glob", "self._names", "f.name", "f2.is_dir", "f.stem", "self._prefixes", "dirs.extend", "bn.endswith", "p.endswith", "p.startswith", "self._make_name", "os.path", "dirs.pop", "f.suffix", "self._suffixes", "f.relative_to", "bn.startswith", "f.is_file"]}, "logging.py": {"libraries": ["sys", "logging"], "function_names": ["log_error", "__str__", "error_was_logged", "log_exception", "log_warning", "configure_logger", "log_info", "__init__", "log_debug", "public"], "function_calls": ["BraceMessage", "max"], "class_names": ["BraceMessage"], "class_method_calls": ["handler.setFormatter", "LOG.addHandler", "LOG.debug", "handler.setLevel", "sys.stdout", "self.fmt", "ns.log", "logging.ERROR", "logging.getLogger", "self.args", "self.kwargs", "logging.INFO", "LOG.level", "ns.v", "logging.Formatter", "logging.DEBUG", "logging.FileHandler", "logging.WARNING", "logging.StreamHandler", "LOG.error", "LOG.info", "LOG.warning", "__all__.append", "LOG.exception", "f.__name__"]}, "nuspec.py": {"libraries": ["sys", "os", "constants.*"], "function_names": ["get_nuspec_layout", "_get_nuspec_data_overrides"], "function_calls": ["_get_nuspec_data_overrides", "zip", "dict"], "class_names": [], "class_method_calls": ["ns.include_nuspec", "os.getenv", "ns.include_props", "data.get", "nuspec.encode", "sys._git", "NUSPEC_TEMPLATE.format_map", "ns.include_all", "ns.source", "ns.arch"]}, "options.py": {"libraries": [], "function_names": ["get_argparse_options", "update_presets", "ns_get", "public", "ns_set"], "function_calls": ["AttributeError", "getattr", "ns_get", "setattr", "ns_set", "hasattr"], "class_names": [], "class_method_calls": ["OPTIONS.items", "key.replace", "info.get", "PRESETS.items", "__all__.append", "ns.include_all", "f.__name__"]}, "pip.py": {"libraries": ["filesets.*", "shutil", "sys", "subprocess", "os"], "function_names": ["get_pip_layout", "extract_pip_files", "get_pip_dir"], "function_calls": ["str", "log_warning", "get_pip_dir", "rglob"], "class_names": [], "class_method_calls": ["ns.source", "pkg_root.format", "ns.zip_lib", "src.glob", "os.pathsep", "os.remove", "sys.executable", "shutil.rmtree", "ns.copy", "dest.mkdir", "content.encode", "ns.temp", "os.environ", "ns.include_pip_user", "subprocess.check_output", "shutil.copy", "pip_dir.is_dir"]}, "props.py": {"libraries": ["constants.*", "os"], "function_names": ["get_props_layout"], "function_calls": ["dict"], "class_names": [], "class_method_calls": ["props.encode", "os.getenv", "ns.include_props", "d.get", "ns.include_all", "ns.arch", "PROPS_TEMPLATE.format_map"]}, "testpy.py": {"libraries": ["sys", "os", "symbol", "libregrtest"], "function_names": [], "function_calls": ["print"], "class_names": [], "class_method_calls": ["libregrtest.main", "sys.exit", "sys.path", "os.path"]}, "validate_ucrtbase.py": {"libraries": ["ctypes.byref", "ctypes.Structure", "ctypes.wintypes.HANDLE", "ctypes.POINTER", "sys", "ctypes.create_unicode_buffer", "ctypes.WinDLL", "ctypes.c_buffer", "ctypes.wintypes.DWORD"], "function_names": [], "function_calls": ["len", "c_buffer", "HANDLE", "byref", "WinDLL", "POINTER", "create_unicode_buffer", "DWORD", "print"], "class_names": ["VS_FIXEDFILEINFO"], "class_method_calls": ["pvi.contents", "sys.exit", "sys.argv", "kernel32.GetModuleFileNameW", "version.VerQueryValueW", "ucrtbased._handle", "version.GetFileVersionInfoSizeW", "name.value", "version.GetFileVersionInfoW"]}, "field3.py": {"libraries": ["sys"], "function_names": [], "function_calls": ["hex", "print"], "class_names": [], "class_method_calls": ["sys.version_info", "sys.version"]}, "fix_encoding.py": {"libraries": ["pathlib.Path"], "function_names": ["fix"], "function_calls": ["fix", "Path", "open", "print"], "class_names": [], "class_method_calls": ["f.read", "ROOT_DIR.glob", "f.write", "f.name"]}, "get_external.py": {"libraries": ["urllib.request.urlretrieve", "argparse", "zipfile", "pathlib", "os"], "function_names": ["main", "extract_zip", "parse_args", "fetch_zip"], "function_calls": ["fetch_zip", "urlretrieve", "extract_zip", "main", "parse_args"], "class_names": [], "class_method_calls": ["args.binary", "argparse.ArgumentParser", "args.externals_dir", "pathlib.Path", "args.verbose", "os.fspath", "zf.namelist", "args.tag", "zf.extractall", "zip_dir.mkdir", "p.parse_args", "p.add_argument", "zipfile.ZipFile", "args.organization"]}, "prepare_ssl.py": {"libraries": ["re", "__future__.print_function", "sys", "subprocess", "os", "shutil.copy"], "function_names": ["fix_uplink", "run_configure", "find_working_perl", "copy_includes", "main", "find_all_on_path", "prep"], "function_calls": ["ValueError", "list", "len", "copy", "fix_uplink", "run_configure", "copy_includes", "find_working_perl", "prep", "main", "find_all_on_path", "open", "print"], "class_names": [], "class_method_calls": ["os.pathsep", "os.makedirs", "f2.write", "os.rename", "sys.stdout", "os.getcwd", "re.search", "os.chdir", "sys.exit", "src.replace", "os.system", "makefile_template.format", "os.replace", "os.environ", "os.unlink", "subprocess.check_output", "line.split", "dest.strip", "os.path", "sys.argv", "re.match", "subprocess.CalledProcessError", "ret.append"]}, "rmpyc.py": {"libraries": ["os.path.join", "os"], "function_names": ["deltree"], "function_calls": ["join", "deltree", "print"], "class_names": [], "class_method_calls": ["os.remove", "os.walk", "name.endswith"]}, "urlretrieve.py": {"libraries": ["urllib.request.urlretrieve", "urllib.urlretrieve", "__future__.print_function", "sys", "requests.get"], "function_names": ["urlretrieve"], "function_calls": ["len", "urlretrieve", "get", "open", "print"], "class_names": [], "class_method_calls": ["f.write", "sys.exit", "sys.stderr", "sys.executable", "r.raise_for_status", "sys.argv", "r.iter_content"]}, "asdl.py": {"libraries": ["re", "collections.namedtuple"], "function_names": ["check", "_parse_product", "__repr__", "visitField", "_parse_type", "_parse_optional_field_quantifier", "_parse_optional_fields", "visitProduct", "__init__", "parse", "_parse_fields", "_parse_optional_attributes", "visit", "tokenize_asdl", "__str__", "visitSum", "_at_keyword", "_parse_module", "_match", "visitType", "_advance", "_parse_definitions", "visitConstructor", "visitModule"], "function_calls": ["Constructor", "meth", "getattr", "Type", "isinstance", "super", "str", "Check", "open", "range", "tokenize_asdl", "Module", "ASDLSyntaxError", "namedtuple", "next", "Product", "enumerate", "Field", "Token", "ASDLParser", "Sum", "print"], "class_names": ["Sum", "Constructor", "Type", "AST", "Module", "ASDLSyntaxError", "Check", "Product", "VisitorBase", "ASDLParser", "Field", "TokenKind"], "class_method_calls": ["buf.splitlines", "obj.__class__", "self.cons", "l.append", "type.name", "self.visit", "TokenKind.Asterisk", "line.strip", "self.value", "self.dfns", "self._parse_optional_fields", "cons.fields", "self.fields", "fields.append", "self.type", "TokenKind.operator_table", "self._tokenizer", "self.name", "self.lineno", "self._id_kinds", "self._parse_fields", "self._parse_product", "self.cur_token", "TokenKind.RParen", "TokenKind.Pipe", "self._parse_type", "mod.dfns", "f.read", "self.types", "TokenKind.ConstructorId", "TokenKind.TypeId", "self.errors", "TokenKind.Comma", "self._advance", "klass.__name__", "self._parse_definitions", "TokenKind.Question", "re.finditer", "TokenKind.RBrace", "sumlist.append", "mod.types", "self._parse_module", "TokenKind.LBrace", "self.attributes", "self.cache", "prod.fields", "TokenKind.Equals", "v.visit", "field.type", "TokenKind.LParen", "cons.name", "self.opt", "parser.parse", "self.seq", "defs.append", "self._parse_optional_attributes", "v.errors", "type.value", "self._match", "self._parse_optional_field_quantifier", "v.types", "sum.types", "m.group", "self.msg", "self._at_keyword"]}, "asdl_c.py": {"libraries": ["sys", "os", "getopt", "asdl"], "function_names": ["find_sequence", "emitSeq", "has_sequence", "sumTrailer", "visitField", "complexSum", "simple_sum", "visitFieldDeclaration", "get_c_type", "isSimpleSum", "visitProduct", "visitAttributeDeclaration", "__init__", "func_end", "reflow_lines", "visit", "emit", "prototype", "funcHeader", "isNumeric", "visitSum", "get_args", "addObj", "set", "is_simple", "emit_body_union", "simpleSum", "func_begin", "emit_identifier", "visitType", "buildArgs", "sum_with_constructors", "isSimpleType", "visitConstructor", "main", "emit_body_struct", "emit_function", "visitModule"], "function_calls": ["PyTypesDeclareVisitor", "find_sequence", "TypeDefVisitor", "StructVisitor", "FunctionVisitor", "Obj2ModPrototypeVisitor", "ASTModuleVisitor", "super", "PyTypesVisitor", "str", "get_c_type", "locals", "open", "reflow_lines", "range", "emit", "Obj2ModVisitor", "set", "is_simple", "PrototypeVisitor", "ObjVisitor", "len", "PartingShots", "main", "TypeError", "ChainOfVisitors", "print"], "class_names": ["ASTModuleVisitor", "ObjVisitor", "StaticVisitor", "PyTypesVisitor", "PickleVisitor", "Obj2ModVisitor", "PyTypesDeclareVisitor", "EmitVisitor", "PrototypeVisitor", "PartingShots", "TypeDefVisitor", "StructVisitor", "MarshalPrototypeVisitor", "FunctionVisitor", "Obj2ModPrototypeVisitor", "ChainOfVisitors"], "class_method_calls": ["enum.append", "prod.attributes", "c.visit", "type.name", "self.visit", "f.type", "v.emit", "sum.attributes", "cur.rfind", "self.emit", "self.CODE", "f.name", "cons.fields", "asdl.check", "f.opt", "self.isSimpleSum", "field.opt", "f.write", "asdl.VisitorBase", "self.emit_identifier", "sys.exit", "asdl.parse", "self.sum_with_constructors", "getopt.getopt", "args.extend", "self.emit_function", "mod.dfns", "self.visitFieldDeclaration", "self.isSimpleType", "self.visitAttributeDeclaration", "mod.name", "f.seq", "self.identifiers", "t.fields", "lines.append", "self.set", "product.fields", "argv0.split", "os.sep", "self.visitConstructor", "prod.fields", "self.file", "a.name", "tnames.append", "unnamed.get", "self.visitors", "self.visitField", "product.attributes", "field.type", "self.sumTrailer", "self.simpleSum", "cons.name", "v.visit", "self.emit_body_union", "t.name", "self.funcHeader", "self.buildArgs", "field.seq", "self.emit_body_struct", "self.simple_sum", "self.get_args", "field.name", "asdl.builtin_types", "type.value", "self.func_begin", "a.type", "cur.find", "sys._getframe", "sys.argv", "args.append", "self.func_end", "self.addObj", "sum.types", "self.isNumeric", "self.complexSum"]}, "keywordgen.py": {"libraries": ["pgen.ParserGenerator", "argparse"], "function_names": ["main"], "function_calls": ["list", "sorted", "ParserGenerator", "main", "map"], "class_names": [], "class_method_calls": ["argparse.ArgumentParser", "args.grammar", "p.make_grammar", "TEMPLATE.format", "parser.add_argument", "argparse.FileType", "args.keyword_file", "thefile.write", "parser.parse_args", "grammar.keywords", "args.tokens"]}, "makeopcodetargets.py": {"libraries": ["sys", "os", "importlib.machinery.SourceFileLoader", "imp"], "function_names": ["main", "write_contents", "find_module"], "function_calls": ["len", "find_module", "main", "SourceFileLoader", "open", "write_contents", "print"], "class_names": [], "class_method_calls": ["f.write", "os.path", "sys.exit", "imp.load_module", "imp.find_module", "opcode.opmap", "sys.argv"]}, "check-c-globals.py": {"libraries": ["re", "os.path", "argparse", "shutil", "sys", "subprocess", "collections.namedtuple", "glob"], "function_names": ["check", "make_sort_key", "_is_module", "_parse_columns_arg", "sort_key", "_parse_filters_arg", "parse_nm", "_find_capi_vars", "_read_global_names", "_is_autogen_var", "find_vars", "parse", "find_capi_vars", "filter_var", "_parse_group_arg", "_is_exception", "_find_var_symbols", "external", "format_vars", "_parse_sort_arg", "make_groups", "_is_global_var", "main", "format_groups", "_is_type_var", "parse_args", "_is_compiler"], "function_calls": ["make_sort_key", "sorted", "_is_module", "getattr", "cls", "_parse_columns_arg", "print", "vars", "_parse_filters_arg", "RuntimeError", "_read_global_names", "_find_capi_vars", "_is_autogen_var", "find_vars", "tuple", "open", "Exception", "find_capi_vars", "filter_var", "_parse_group_arg", "set", "_is_exception", "namedtuple", "bool", "_find_var_symbols", "len", "format_vars", "_parse_sort_arg", "max", "make_groups", "error", "_is_global_var", "main", "format_groups", "_is_type_var", "parse_args", "log", "_is_compiler"], "class_names": ["Filter", "Var"], "class_method_calls": ["match.groups", "column.lstrip", "argparse.ArgumentParser", "line.strip", "COLUMN_WIDTHS.items", "self.action", "col.upper", "self.value", "filters.append", "Var.parse_nm", "self.kind", "COLUMN_WIDTHS.update", "args.columns", "args.group", "args.rc", "shutil.which", "filename.partition", "parser.error", "Filter.parse", "args.verbosity", "raw.split", "self.name", "sys.exit", "name.startswith", "fmt.replace", "raw.partition", "columns.remove", "line.partition", "parser.add_argument", "groupvars.append", "filename.endswith", "glob.glob", "value.strip", "args.sort", "args.filters", "self.op", "raw.startswith", "filter.name", "filter.check", "subprocess.check_output", "col.strip", "name.strip", "os.path", "col.startswith", "re.compile", "out.decode", "sys.stderr", "glob.escape", "var.name", "fmt.format", "names.split", "sys.argv", "line.startswith", "parser.parse_args", "name.endswith", "COLUMNS.split", "CAPI_REGEX.match"]}, "ccbench.py": {"libraries": ["re", "platform", "threading", "time", "__future__.print_function", "optparse.SUPPRESS_HELP", "__future__.division", "bz2", "sys", "zlib", "subprocess", "hashlib", "socket", "os", "optparse.OptionParser", "itertools"], "function_names": ["extract", "task_pidigits", "pi_digits", "run_latency_tests", "run_bandwidth_client", "run_latency_test", "task_compress_zlib", "compress", "task_compress_bz2", "latency_client", "run_throughput_test", "run_bandwidth_tests", "findall", "compute", "task_regex", "__init__", "__call__", "_sendto", "task_hashing", "run_bandwidth_test", "list_sort", "task_sort", "_send_chunk", "_ping", "run", "gen_x", "run_latency_client", "_recv", "compose", "bandwidth_client", "calc_ndigits", "run_throughput_tests", "main"], "function_calls": ["extract", "pi_digits", "run_latency_tests", "run_bandwidth_client", "_map", "run_latency_test", "globals", "latency_client", "_count", "run_throughput_test", "run_bandwidth_tests", "repr", "isinstance", "__import__", "str", "TimedLoop", "_sendto", "_time", "open", "run_bandwidth_test", "range", "_islice", "OptionParser", "list", "_send_chunk", "_ping", "gen_x", "run_latency_client", "int", "next", "_recv", "task", "func", "compose", "eval", "_func", "len", "bandwidth_client", "max", "loop", "_sleep", "run_throughput_tests", "main", "sum", "print"], "class_names": ["TimedLoop"], "class_method_calls": ["sock.recv", "sys.setswitchinterval", "options.latclient", "process.wait", "options.bandwidth", "sock.bind", "zlib.decompress", "results.append", "line.strip", "threading.Condition", "throughput_tasks.append", "sys.executable", "socket.AF_INET", "task.__doc__", "parser.error", "sys.setcheckinterval", "platform.processor", "end_event.append", "start_cond.notify", "options.bwclient", "t.start", "bz2.compress", "zlib.compress", "ready.append", "ready_cond.notify", "self.func", "t.join", "self.args", "options.latency", "s.encode", "t.setDaemon", "subprocess.Popen", "process.kill", "itertools.count", "options.throughput", "platform.system", "f.read", "parser.add_option", "platform.python_version", "chunks.append", "sock.sendto", "platform.machine", "platform.python_implementation", "options.switch_interval", "itertools.imap", "options.check_interval", "re.MULTILINE", "platform.python_build", "start_cond.wait", "sock.getsockname", "s.partition", "time.time", "cmd_line.extend", "time.sleep", "options.nthreads", "os.path", "hashlib.sha1", "re.compile", "sock.close", "socket.SOCK_DGRAM", "l.sort", "itertools.islice", "threads.append", "chunk.splitlines", "parser.parse_args", "ready_cond.wait", "pat.findall", "threading.Thread", "socket.socket"]}, "clinic.py": {"libraries": ["abc", "shlex", "contextlib", "string", "traceback", "pprint", "io", "cpp", "copy", "types", "textwrap", "collections", "hashlib", "ast", "os", "functools", "itertools", "re", "inspect", "types.*", "tempfile", "argparse", "sys"], "function_names": ["parse_file", "directive_preserve", "quoted_for_c_string", "ensure_legal_c_identifier", "dedent", "directive_version", "OverrideStdioWith", "version_comparitor", "text_accumulator", "is_start_line", "copy", "fix_right_bracket_count", "closure", "version_splitter", "eval_ast_expr", "__init__", "converter_init", "infer", "length_name", "render", "directive_class", "validate", "__iter__", "permute_right_option_groups", "indent_all_lines", "normalize_snippet", "modify", "__next__", "cleanup", "parse_clinic_block", "add_parameter", "at_coexist", "warn", "main", "get_destination_buffer", "assert_only_one", "state_parameter_docstring", "create_regex", "compute_checksum", "output_templates", "add_c_return_converter", "measure", "is_positional_only", "correct_name_for_self", "depth", "required_type_for_self_for_parser", "state_dsl_start", "directive_dump", "parse_arg", "_render_self", "to_required", "parse_verbatim_block", "pre_render", "render_function", "strip_leading_and_trailing_blank_lines", "methoddef_flags", "parse_converter", "directive_set", "set_template_dict", "parse_line", "directive_destination", "parse_argument", "parse_special_symbol", "initialize", "state_modulename_name", "add_legacy_c_converter", "permute_left_option_groups", "__getitem__", "state_parameters_start", "parser_type", "render_option_group_parsing", "output", "state_parameter", "is_stop_line", "__repr__", "is_optional", "clear", "declare", "parse", "get_displayname", "format_docstring", "state_terminal", "err_occurred_if", "docstring_for_c_string", "get_value", "parser_body", "err_occurred_if_null_pointer", "add_c_converter", "get_destination", "c_repr", "_module_and_class", "indent", "directive_module", "reset", "declaration", "return_converter_init", "add_default_legacy_c_converter", "_text_accumulator", "is_keyword_only", "directive_print", "state_function_docstring", "_render_non_self", "format_escape", "wrap_declarations", "print_block", "rstrip_lines", "add_destination", "is_legal_py_identifier", "suffix_all_lines", "ignore_line", "at_staticmethod", "flush", "render_parameters", "dump", "at_classmethod", "simple_declaration", "write_file", "r", "next", "linear_format", "calculate_indent", "state_parameter_docstring_start", "permute_optional_groups", "str_converter_key", "directive_output", "fail", "local_fail", "write", "__getattribute__", "summarize", "warn_or_fail", "group_to_variable_name", "bad_node", "_line", "_ensure"], "function_calls": ["parse_file", "frozenset", "sorted", "quoted_for_c_string", "ensure_legal_c_identifier", "getattr", "OverrideStdioWith", "version_comparitor", "text_accumulator", "fix_right_bracket_count", "version_splitter", "eval_ast_expr", "open", "dir", "int", "permute_right_option_groups", "indent_all_lines", "normalize_snippet", "enumerate", "BufferSeries", "add_parameter", "len", "warn", "main", "assert_only_one", "output_output", "globals", "create_regex", "exec", "fn", "compute_checksum", "reversed", "Destination", "add_c_return_converter", "correct_name_for_self", "str", "required_type_for_self_for_parser", "Null", "self_converter", "CReturnConverter", "list", "Unknown", "strip_leading_and_trailing_blank_lines", "Module", "Parameter", "compile", "d", "add_legacy_c_converter", "permute_left_option_groups", "min", "output", "all", "is_stop_line", "id", "isinstance", "DetectBadNodes", "tuple", "Block", "Function", "range", "parser_body", "set", "_text_accumulator_nt", "type", "add_c_converter", "CRenderData", "eval", "BlockParser", "c_repr", "hasattr", "Clinic", "any", "max", "text_accumulator_nt", "BlockPrinter", "Unspecified", "bytes", "add_default_legacy_c_converter", "_text_accumulator", "print", "input_output", "abs", "RuntimeError", "repr", "init_return_converter", "super", "format_escape", "wrap_declarations", "input_add", "output_add", "rstrip_lines", "p_add", "is_legal_py_identifier", "suffix_all_lines", "ValueError", "flush", "LandMine", "r", "write_file", "next", "linear_format", "directive", "IndentStack", "bool", "str_converter_key", "permute_optional_groups", "local_fail", "fail", "Class", "write", "summarize", "p_output", "warn_or_fail", "FormatCounterFormatter", "add", "is_legal_c_identifier"], "class_names": ["byte_converter", "rwbuffer", "CReturnConverterAutoRegister", "unsigned_char_converter", "char_converter", "short_converter", "long_return_converter", "Destination", "bool_converter", "double_converter", "DSLParser", "unsigned_long_long_converter", "Py_ssize_t_converter", "init_return_converter", "unicode_converter", "PythonParser", "CLanguage", "slice_index_converter", "buffer", "DetectBadNodes", "unsigned_int_converter", "Py_buffer_converter", "Block", "Null", "int_converter", "CConverterAutoRegister", "Function", "self_converter", "size_t_converter", "Py_UNICODE_converter", "unsigned_long_converter", "str_converter", "CReturnConverter", "int_return_converter", "robuffer", "Py_ssize_t_return_converter", "size_t_return_converter", "Py_complex_converter", "Unknown", "PyBytesObject_converter", "LandMine", "float_converter", "unsigned_short_converter", "Module", "PyByteArrayObject_converter", "NoneType_return_converter", "IndentStack", "CRenderData", "BlockParser", "BufferSeries", "Parameter", "Class", "CConverter", "Clinic", "long_converter", "double_return_converter", "PythonLanguage", "Language", "FormatCounterFormatter", "BlockPrinter", "object_converter", "long_long_converter", "Unspecified", "unsigned_long_return_converter", "unsigned_int_return_converter", "bool_return_converter", "float_return_converter"], "class_method_calls": ["line.strip", "s.replace", "n.value", "node.value", "after_l_paren.partition", "self.self_converter", "self.state_modulename_name", "self.return_conversion", "self.dsl_name", "line.append", "fd.copy", "f.methoddef_flags", "self.parameter_indent", "abc.ABCMeta", "inspect.Signature", "p.default", "self.converter_init", "self.directives", "self.initialize", "function_args.defaults", "self.specified_type", "converter.function", "text.pop", "self.keyword_only", "sys.argv", "clinic.line_prefix", "x.strip", "declaration.append", "value.format_map", "c_basename.strip", "f.return_converter", "f.name", "self.destination_buffers", "dirs.remove", "self.output", "ns.converters", "sc.name", "output.splitlines", "fcf.counts", "self.reset", "self.return_value", "self.group_to_variable_name", "fcf.format", "fp.read", "self.clinic", "collections.OrderedDict", "self.type_object", "self.line_prefix", "self.filename", "os.path", "docstring.split", "self.conversion_fn", "value.docstring", "self.ps_left_square_before", "ast.dump", "kwargs.setdefault", "self.kind", "self.parse_arguments", "clinic.destination_buffers", "version.append", "self.ps_required", "group_ids.discard", "self.docstring", "self.state_terminal", "existing_function.name", "clinic.get_destination", "modifications.rstrip", "last_parameter.docstring", "block.output", "language.start_line", "right.append", "cls.format_unit", "self.parent", "line.rstrip", "self.impl_by_reference", "existing_function.copy", "annotation.s", "self.margin", "ns.output", "final.append", "self.seen_positional_with_default", "data.impl_arguments", "f_self.converter", "string.Formatter", "self._array", "self.parse_special_symbol", "self.err_occurred_if", "flags.append", "parameters.pop", "ns.make", "block.dsl_name", "so_far.append", "f.docstring_only", "output.endswith", "f.render_parameters", "cmdline.parse_args", "value.strip", "lines.append", "self.is_start_line", "p.copy", "ns.filename", "self.converter", "self.__message__", "textwrap.dedent", "ta._text", "self.input", "counts.add", "self.default_type", "d.buffers", "ns.force", "f.kind", "self.unsigned_cast", "prototype.append", "self.declaration", "sys.stdout", "self.block_start_line_number", "self.state_parameter_docstring_start", "self.destinations", "annotation.value", "c_basename.upper", "self.format_units", "collections.Counter", "initializers.rstrip", "self.parse_clinic_block", "self.impl_arguments", "self.cpp", "accumulator.clear", "self.type", "re.search", "line.lstrip", "self.function", "self.get_destination", "self.is_positional_only", "p.is_positional_only", "io.StringIO", "annotation.id", "s.rstrip", "self.ps_start", "a.append", "parser_prototype.endswith", "self.parse_verbatim_block", "self.ps_group_after", "accumulator.append", "self.state_dsl_start", "text.clear", "function_args.kwarg", "os.curdir", "c.render", "self.py_default", "self.typedef", "self.is_optional", "sys.version_info", "self.parameter_state", "function_args.args", "self._render_self", "self.state_parameter_docstring", "parameters.split", "kwargs.items", "ast.Name", "parameter.is_keyword_only", "p.group", "self.__render_parameters__", "before.partition", "fields.insert", "self.py_name", "find_start_re.search", "e.text", "functools.partial", "shlex.split", "self.checksum_line", "self.docstring_only", "self.return_annotation", "self.saved_output", "last_parameter.kind", "self._render_non_self", "self.last_dsl_name", "data.keywords", "cls.__name__", "textwrap.indent", "self.encoding", "function_args.kw_defaults", "parameter.arg", "collections.namedtuple", "line.endswith", "input.encode", "self.render_function", "self.preserve_output", "self.positional_only", "self.annotation", "ids.append", "printer_2.f", "ns.srcdir", "n.attr", "cls.functions", "parameter.default", "data.cleanup", "d.items", "self.name", "self.measure", "printer.print_block", "ast.Call", "self.subclass_of", "self.get_destination_buffer", "f.read", "self.modify", "methoddef_define.replace", "cls.typedef", "n.id", "self.format_unit", "printer_2.print_block", "line.split", "signature.parameters", "p.name", "field.partition", "self.line_number", "p.converter", "self.__class__", "printer.f", "checksum_re.match", "indent.strip", "f.__name__", "self.verify", "self.default", "second_pass_replacements.items", "self.c_basename", "cleanup.rstrip", "p.get_displayname", "self.return_converter_init", "self.printer", "data.format_units", "left.append", "self._constructor", "self.rendered_parameters", "self.find_start_re", "existing_function.kind", "self.f", "self.ps_optional", "self.simple_declaration", "parser_code.append", "fields.extend", "remainder.isspace", "ast.literal_eval", "self.impl_parameters", "accumulator.sort", "self.length", "abc.abstractmethod", "input.splitlines", "self.preindent", "c.isdigit", "cpp.Monitor", "self.parser_type", "parameter.name", "trailing.strip", "self.keywords", "fd.update", "re.escape", "inspect.Parameter", "blacklist.visit", "self.block", "data.initializers", "data.declarations", "self.first_block", "ast.NodeVisitor", "destination.type", "clinic.ifndef_symbols", "self.indents", "self.parameter", "annotation.func", "s.format_map", "data.impl_parameters", "cmdline.print_usage", "self.parameters", "contextlib.contextmanager", "os.replace", "self.parse_converter", "block.signatures", "f.full_name", "name.strip", "traceback.format_exc", "line.startswith", "fields.pop", "copy.copy", "existing_function.coexist", "argparse.ArgumentParser", "self.render_option_group_parsing", "existing.split", "types.FunctionType", "self._line", "self._ensure", "ast.UnaryOp", "self.declare", "p.docstring", "fp.write", "self.c_default", "parameter.annotation", "module.modules", "s.format", "module.classes", "module.body", "filename.endswith", "self.add_destination", "parameter.is_positional_only", "ast.Expression", "block.input", "self.bad", "group.append", "default.strip", "expr.operand", "lines.insert", "ast.parse", "match.group", "self.start_re", "data.modifications", "self.module", "self.docstring_for_c_string", "f.parameters", "self.ps_group_before", "ast.Attribute", "self.full_name", "self.functions", "line.partition", "self.modifications", "self.parse_by_reference", "ns.verbose", "self.initializers", "pattern.format", "self.length_name", "self.block_parser", "self.line_suffix", "self.state_parameter", "value.copy", "input.split", "destination.append", "clinic.line_suffix", "data.parse_arguments", "line.format_map", "self.to_required", "self.cls", "self.indent", "self.classes", "self.show_in_signature", "full_name.strip", "line.rpartition", "self.language", "ast.Str", "s.getvalue", "cmdline.add_argument", "data.return_conversion", "self.next", "self.parse_argument", "parser.parse", "self.cleanup", "template.format_map", "ta.output", "ast.BinOp", "self.ifndef_symbols", "self.state_parameters_start", "text.append", "self.parameter_continuation", "name.endswith", "l.append", "os.makedirs", "trailing.partition", "accumulator.extend", "docstring.rstrip", "self.parsers", "self.destination_buffers_stack", "self.c_ignored_default", "full_name.split", "c_name.endswith", "collections.deque", "str_converter_argument_map.get", "clinic.block_parser", "printer.write", "text.split", "self.signature_name", "kwargs.update", "ast.Constant", "ast.Expr", "clinic.filename", "p.right_bracket_count", "self.ignore_line", "parent.modules", "list.append", "sys.maxsize", "stripped.startswith", "inspect.signature", "s.split", "itertools.zip_longest", "self.last_checksum_re", "self.buffers", "self.state", "language.validate", "destination.dump", "self.declarations", "blacklist.bad", "fields.append", "self.ps_right_square_after", "self.format_docstring", "annotation.keywords", "existing.strip", "clinic.parse", "self.group", "f.docstring", "functools.lru_cache", "self.signatures", "self.coexist", "parameter.kind", "self.presets", "node.arg", "destination.filename", "os.walk", "name.split", "parameters.append", "re.compile", "self.cast", "self.counts", "self.modules", "f.c_basename", "self.output_templates", "split.pop", "self.state_function_docstring", "pprint.pformat", "self.return_converter", "self._start", "sys.exit", "p.is_optional", "kwargs.get", "docstring_first_line.replace", "name.partition", "ast.Num", "f.cls", "self.presets_text", "data.return_value", "os.unlink", "self.parameter_docstring_indent", "parent.classes", "function_args.vararg", "hashlib.sha1", "expr.id", "p.kind", "parser_definition.replace", "p.is_keyword_only"]}, "cpp.py": {"libraries": ["sys", "re"], "function_names": ["write", "pop_stack", "close", "condition", "fail", "writeline", "status", "__init__", "__repr__", "negate"], "function_calls": ["pop_stack", "len", "str", "id", "repr", "open", "enumerate", "Monitor", "negate", "print"], "class_names": ["Monitor"], "class_method_calls": ["line.strip", "self.stack", "self.condition", "cpp.writeline", "sys.exit", "self.fail", "line.partition", "self.is_a_simple_defined", "f.read", "before.rstrip", "self.in_comment", "self.continuation", "condition.split", "self.writeline", "line.split", "line.endswith", "self.filename", "re.compile", "self.status", "after.lstrip", "condition.startswith", "self.line_number", "self.verbose", "s.split", "sys.argv", "line.startswith", "remainder.partition"]}, "beer.py": {"libraries": ["sys"], "function_names": ["bottle"], "function_calls": ["str", "int", "bottle", "range", "print"], "class_names": [], "class_method_calls": ["sys.argv"]}, "eiffel.py": {"libraries": ["unittest", "types.FunctionType"], "function_names": ["m2_post", "_test", "method", "testEiffelMetaClass2", "m", "__call__", "__init__", "__get__", "m2", "__new__", "m2_pre", "convert_methods", "testEiffelMetaClass1", "make_eiffel_method", "callmethod"], "function_calls": ["isinstance", "post", "Sub", "super", "EiffelMethodWrapper", "pre", "Test", "func"], "class_names": ["EiffelBaseMetaClass", "Sub", "EiffelDescriptor", "EiffelMethodWrapper", "Test", "Eiffel", "Tests", "EiffelMetaClass2", "EiffelMetaClass1"], "class_method_calls": ["t.m", "self.assertEqual", "self._test", "dict.items", "methods.append", "func.__name__", "self._inst", "t.m2", "meta.convert_methods", "self.assertRaises", "cls.make_eiffel_method", "self._func", "k.endswith", "self._post", "dict.get", "func.__doc__", "s.m2", "unittest.main", "method.__doc__", "self.__doc__", "self._pre", "unittest.TestCase", "self.__name__", "self._descr"]}, "hanoi.py": {"libraries": ["sys", "tkinter.Tk", "tkinter.Canvas"], "function_names": ["hanoi", "run", "__init__", "main", "report"], "function_calls": ["Tk", "hanoi", "len", "max", "Canvas", "Tkhanoi", "int", "main", "report", "range"], "class_names": ["Tkhanoi"], "class_method_calls": ["c.move", "self.report", "self.bitmap", "self.n", "self.tk", "c.bbox", "c.create_bitmap", "self.canvas", "c.create_rectangle", "self.pegstate", "c.pack", "self.pieces", "sys.argv", "self.pegs", "h.run", "tk.getint"]}, "life.py": {"libraries": ["random", "curses"], "function_names": ["toggle", "display", "erase_menu", "set", "__init__", "main", "make_random", "keyloop", "erase", "display_menu"], "function_calls": ["ValueError", "min", "chr", "max", "erase_menu", "LifeBoard", "keyloop", "ord", "range", "display_menu"], "class_names": ["LifeBoard"], "class_method_calls": ["curses.KEY_RIGHT", "self.state", "stdscr.move", "self.char", "stdscr.addstr", "board.display", "self.X", "curses.KEY_MOUSE", "curses.init_pair", "board.Y", "curses.getmouse", "curses.flash", "curses.has_colors", "curses.COLOR_RED", "curses.KEY_LEFT", "curses.COLOR_CYAN", "curses.COLOR_MAGENTA", "curses.KEY_DOWN", "stdscr.attrset", "stdscr.clear", "stdscr.clrtoeol", "stdscr.getmaxyx", "board.X", "stdscr.nodelay", "self.display", "board.toggle", "self.boring", "self.set", "curses.KEY_UP", "stdscr.refresh", "board.make_random", "curses.BUTTON1_CLICKED", "curses.COLOR_WHITE", "curses.mousemask", "random.randrange", "self.scr", "self.Y", "curses.COLOR_BLUE", "curses.COLOR_YELLOW", "stdscr.getch", "random.random", "curses.COLOR_GREEN", "board.erase", "curses.wrapper", "curses.color_pair", "stdscr.subwin"]}, "markov.py": {"libraries": ["sys", "random", "getopt"], "function_names": ["test", "get", "__init__", "add", "put"], "function_calls": ["len", "test", "max", "Markov", "tuple", "add", "int", "open", "choice", "repr", "range", "print"], "class_names": ["Markov"], "class_method_calls": ["self.trans", "self.histsize", "para.split", "sys.exit", "random.choice", "m.get", "self.choice", "m.trans", "getopt.getopt", "sys.argv", "data.split", "text.split", "f.read", "self.add", "getopt.error", "f.isatty", "m.put", "sys.stdin"]}, "mcast.py": {"libraries": ["struct", "socket", "sys", "time"], "function_names": ["receiver", "main", "sender"], "function_calls": ["sender", "str", "receiver", "main", "print", "repr"], "class_names": [], "class_method_calls": ["socket.SOL_SOCKET", "socket.IPV6_MULTICAST_HOPS", "s.sendto", "socket.IP_MULTICAST_TTL", "s.bind", "socket.AF_INET", "socket.IPV6_JOIN_GROUP", "socket.INADDR_ANY", "socket.SO_REUSEADDR", "s.setsockopt", "s.recvfrom", "struct.pack", "socket.IP_ADD_MEMBERSHIP", "socket.inet_pton", "socket.IPPROTO_IP", "socket.IPPROTO_IPV6", "time.time", "time.sleep", "socket.SOCK_DGRAM", "sys.argv", "socket.getaddrinfo", "socket.socket"]}, "queens.py": {"libraries": ["sys"], "function_names": ["remove", "display", "__init__", "main", "reset", "place", "solve", "safe"], "function_calls": ["int", "main", "Queens", "range", "print"], "class_names": ["Queens"], "class_method_calls": ["self.solve", "q.silent", "self.place", "self.remove", "self.n", "q.solve", "q.nfound", "self.up", "self.safe", "self.down", "self.silent", "self.nfound", "sys.argv", "self.display", "self.y", "self.reset", "self.row"]}, "redemo.py": {"libraries": ["re", "tkinter.*"], "function_names": ["getflags", "recompile", "reevaluate", "__init__", "main", "addoptions"], "function_calls": ["Label", "IntVar", "list", "Tk", "len", "Listbox", "Checkbutton", "Entry", "getattr", "str", "Frame", "main", "Radiobutton", "Text", "StringVar", "ReDemo", "range"], "class_names": ["ReDemo"], "class_method_calls": ["box.pack", "re.error", "self.getflags", "self.showvar", "frame.pack", "root.mainloop", "groups.insert", "self.statusdisplay", "self.recompile", "root.protocol", "self.showframe", "self.vars", "self.frames", "self.promptdisplay", "self.stringdisplay", "m.span", "self.grouplist", "var.get", "self.addoptions", "self.regexdisplay", "self.showallradio", "m.groups", "self.boxes", "root.quit", "self.labeldisplay", "self.master", "self.compiled", "self.grouplabel", "re.compile", "self.reevaluate", "self.showfirstradio", "m.group"]}, "rpython.py": {"libraries": ["socket.SHUT_WR", "sys", "socket.AF_INET", "socket.SOCK_STREAM", "socket.socket"], "function_names": ["main"], "function_calls": ["len", "int", "main", "socket", "print"], "class_names": [], "class_method_calls": ["sys.exit", "s.send", "s.connect", "reply.decode", "s.recv", "sys.argv", "command.encode", "s.shutdown", "host.find"]}, "rpythond.py": {"libraries": ["io", "sys", "socket.AF_INET", "socket.SOCK_STREAM", "traceback", "socket.socket"], "function_names": ["execute", "main"], "function_calls": ["len", "int", "main", "socket", "execute", "exec", "print"], "class_names": [], "class_method_calls": ["sys.stderr", "reply.encode", "request.decode", "traceback.print_exc", "s.bind", "s.listen", "fakefile.getvalue", "conn.send", "io.StringIO", "sys.argv", "s.accept", "conn.recv", "sys.stdout"]}, "sortvisu.py": {"libraries": ["random", "tkinter.*"], "function_names": ["show_pivot", "updatereport", "hide_left_right_pivot", "c_isort", "quicksort", "demosort", "uniform", "c_quit", "c_step", "compare", "bubblesort", "swap", "selectionsort", "c_bsort", "c_randomize", "delete", "__init__", "c_distinct", "interpolate", "cancel", "hide_right", "c_qsort", "insertionsort", "c_uniform", "getsize", "mouse_move", "resize", "run", "set", "show_partition", "position", "setdata", "compareto", "show_left", "countcompare", "setspeed", "nearestindex", "c_ssort", "setindex", "message", "mouse_up", "hide_partition", "steps", "randomize", "step", "mouse_down", "hide_left", "hide_pivot", "c_demo", "distinct", "main", "reset", "wait", "countswap", "swapwith", "c_cancel", "destroy", "show_right"], "function_calls": ["ArrayItem", "OptionMenu", "abs", "StringVar", "Array", "Label", "alg", "str", "Frame", "tuple", "interpolate", "MyIntVar", "range", "ValueError", "list", "Canvas", "int", "Button", "SortDemo", "func", "float", "Tk", "len", "max", "steps", "randomize", "main", "round"], "class_names": ["ArrayItem", "Cancelled", "SortDemo", "Array", "MyIntVar"], "class_method_calls": ["self.hide_partition", "self.c_distinct", "self.c_bsort", "self.setdata", "self.c_uniform", "sizes.sort", "self.stop_mainloop", "self.c_demo", "array.show_partition", "root.protocol", "array.setdata", "self.b_bsort", "self.left", "IntVar.set", "self.botframe", "array.canvas", "self.v_speed", "self.countswap", "self.nearestindex", "array.show_right", "self.c_ssort", "self.run", "self.right", "self.b_randomize", "self.m_size", "self.maxvalue", "self.hide_pivot", "self.b_ssort", "self.mouse_down", "self.b_cancel", "self.b_uniform", "self.botleftframe", "self.frame", "self.m_speed", "self.items", "IntVar.__init__", "self.pivot", "Array.Cancelled", "self.label", "item.swapwith", "self.position", "self.reset", "self.v_size", "event.y", "array.hide_partition", "self.ncompares", "array.show_left", "self.c_cancel", "res.append", "other.position", "item.compareto", "self.updatereport", "self.b_distinct", "self.busy", "other.index", "self.b_demo", "self.origy", "self.value", "self.origx", "self.item_id", "self.c_step", "self.size", "self.nswaps", "self.b_qsort", "sizes.append", "self.c_randomize", "self.index", "self.b_step", "self.botrightframe", "stack.append", "self.b_quit", "self.demo", "self.speed", "self.b_isort", "self.canvas", "array.reset", "random.randint", "self.hide_left", "array.message", "self.c_quit", "self.in_mainloop", "demo.c_quit", "self.hide_left_right_pivot", "self.report", "self.lasty", "self.lastx", "root.mainloop", "self.message", "other.value", "self.c_isort", "event.x", "self.mouse_move", "self.hide_right", "other.setindex", "array.wait", "self.array", "self.countcompare", "self.master", "array.compare", "other.item_id", "array.swap", "self.mouse_up", "item.delete", "array.show_pivot", "array.getsize", "self.c_qsort"]}, "ss1.py": {"libraries": ["re", "xml.parsers.expat", "tkinter", "sys", "os", "xml.sax.saxutils.escape"], "function_names": ["end_string", "format", "end_complex", "movecells", "whichxy", "end_value", "clearrows", "colnum2name", "startelement", "extendrow", "parsefile", "extendcolumn", "selectrow", "setbeacon", "insertcolumns", "test_gui", "makegrid", "deletecolumns", "setcell", "delete_event", "end_int", "data", "rjust", "__init__", "ljust", "getcell", "_xml_float", "load_entry", "change_cell", "save", "end_double", "cellname", "cellvalue", "setcurrent", "getsize", "endelement", "clearcell", "insertrows", "load", "center", "_xml_complex", "press", "shift_return_event", "multicellvalue", "end_cell", "xml", "motion", "_xml_int", "renumber", "setcorner", "clearfocus", "sync", "colname2num", "return_event", "shift_tab_event", "start_cell", "test_basic", "display", "recalc", "end_formula", "selectall", "translate", "deleterows", "sum", "start_value", "selectcolumn", "clearcells", "reset", "clearcolumns", "tab_event", "escape_event", "selectcells"], "function_calls": ["getattr", "colnum2name", "cls", "test_gui", "isinstance", "escape", "str", "SheetGUI", "complex", "dict", "open", "range", "Sheet", "cellname", "FormulaCell", "method", "NumericCell", "int", "type", "float", "StringCell", "SheetParser", "eval", "hasattr", "colname2num", "divmod", "len", "max", "chr", "translate", "ord", "print"], "class_names": ["Sheet", "FormulaCell", "BaseCell", "SheetGUI", "NumericCell", "SheetParser", "StringCell"], "class_method_calls": ["cell.renumber", "self.clearrows", "self.escape_event", "self.sheet", "cell.grid_configure", "self.ns", "cell.reset", "exc.__name__", "w.__x", "self.cellvalue", "self.columns", "self.entry", "self.release", "self.savebutton", "self.selectall", "s.upper", "self.extendcolumn", "self.setcurrent", "self.load_entry", "parser.ParseFile", "expat.ParserCreate", "self.selectcolumn", "text.endswith", "self.cell", "sys.argv", "x.rjust", "self.save", "self.extendrow", "cell.formula", "cell.__y", "self.setcorner", "self.selectcells", "g.root", "cell.bind", "parser.StartElementHandler", "self.root", "attrs.get", "out.append", "self.movecells", "self.y", "self.currentxy", "Tk.Button", "self.reset", "seq.append", "a.display", "full.get", "self.x", "m.groups", "self.tab_event", "cell.__x", "sys.maxsize", "self.filename", "self.shift_tab_event", "os.path", "self.translated", "re.match", "re.split", "self.rows", "self.alignment", "cell.recalc", "Tk.Label", "self.value", "self.getcell", "parser.CharacterDataHandler", "self.delete_event", "event.x_root", "self.change_cell", "text.startswith", "self.clearcells", "a.save", "f.write", "self.clearfocus", "self.texts", "self.xml", "self.endelement", "Tk.Entry", "self.selectrow", "self.text", "self.multicellvalue", "parser.EndElementHandler", "event.y_root", "self.cells", "self.beacon", "a.setcell", "self.shift_return_event", "self.formula", "xml2align.get", "self.cellgrid", "self.press", "w.__y", "self.sync", "self.setbeacon", "cell.xml", "self.fmt", "Tk.Frame", "self.return_event", "Tk.Tk", "self.data", "sys.exc_info", "x.center", "cell.format", "self.getsize", "self.whichxy", "self.startelement", "self.gridcells", "self.motion", "self.makegrid", "self.cornerxy", "x.ljust"]}, "vector.py": {"libraries": ["doctest"], "function_names": ["test", "__len__", "__sub__", "__init__", "__add__", "fromlist", "__repr__", "__mul__", "__getitem__"], "function_calls": ["list", "len", "isinstance", "test", "cls", "zip", "repr"], "class_names": ["Vec"], "class_method_calls": ["Vec.fromlist", "doctest.testmod", "self.v", "inst.v", "other.v"]}, "bkfile.py": {"libraries": ["filecmp", "os", "builtins.open"], "function_names": ["close", "open"], "function_calls": ["_orig_close", "_orig_open"], "class_names": [], "class_method_calls": ["os.rename", "os.unlink", "filecmp.cmp", "f.close"]}, "checkextensions.py": {"libraries": ["os", "parsesetup"], "function_names": ["checkextensions", "expandvars", "select", "treatword"], "function_calls": ["list", "len", "select", "treatword", "expandvars"], "class_names": [], "class_method_calls": ["modules.append", "mods.keys", "os.path", "w.split", "str.find", "parsesetup.getsetupinfo", "files.append"]}, "checkextensions_win32.py": {"libraries": ["sys", "os", "win32api"], "function_names": ["write_extension_table", "AddLinkerLib", "GetLinkerLibs", "GetCompilerOptions", "get_extension_defn", "AddCompilerOption", "GetSourceFiles", "__init__", "checkextensions", "parse_dsp"], "function_calls": ["open", "get_extension_defn", "CExtension", "parse_dsp"], "class_names": ["CExtension"], "class_method_calls": ["module.AddLinkerLib", "line.strip", "module.name", "fp.close", "exclude.split", "win32api.ExpandEnvironmentStrings", "fp.write", "self.name", "win32api.GetFullPathName", "self.compilerOptions", "self.linkerLibs", "extra_inis.append", "os.environ", "module.AddCompilerOption", "os.path", "fp.readlines", "sys.stderr", "module.sourceFiles", "self.sourceFiles", "sys.argv", "win32api.GetProfileVal", "ret.append"]}, "flag.py": {"libraries": [], "function_names": [], "function_calls": ["print"], "class_names": [], "class_method_calls": []}, "freeze.py": {"libraries": ["makemakefile", "winmakemakefile", "getopt", "bkfile", "modulefinder", "sys", "makefreeze", "checkextensions", "checkextensions_win32", "os", "makeconfig", "parsesetup", "sysconfig"], "function_names": ["usage", "main"], "function_calls": ["usage", "len", "sorted", "str", "locals", "main", "hasattr", "open", "print"], "class_names": [], "class_method_calls": ["os.mkdir", "sys.platform", "bkfile.open", "mf.load_file", "winmakemakefile.get_custom_entry_point", "mf.modules", "checkextensions.checkextensions", "mf.any_missing", "mf.import_hook", "sys.prefix", "sys.stdout", "frozen_extensions.append", "implicits.append", "unknown.remove", "mf.add_module", "sys.exit", "unknown.append", "getopt.getopt", "mf.run_script", "dict.keys", "infp.read", "mod.name", "checkextensions_win32.checkextensions", "addn_link.append", "winmakemakefile.makemakefile", "modulefinder.AddPackagePath", "exclude.append", "sys.abiflags", "parsesetup.getmakevars", "getopt.error", "makemakefile.makemakefile", "a.split", "modulefinder.ModuleFinder", "makefreeze.makefreeze", "sys.path", "os.path", "mf.report", "sys.stderr", "makeconfig.makeconfig", "mod.__file__", "extensions.append", "checkextensions_win32.CExtension", "fail_import.append", "replace_paths.append", "builtins.append", "sys.version_info", "sys.argv", "sysconfig.get_config_var", "checkextensions_win32.write_extension_table", "builtins.sort", "sys.exec_prefix"]}, "hello.py": null, "makeconfig.py": {"libraries": ["sys", "re"], "function_names": ["makeconfig", "test"], "function_calls": ["makeconfig", "test", "open", "print"], "class_names": [], "class_method_calls": ["re.compile", "sys.exit", "sys.stderr", "outfp.close", "sys.argv", "infp.close", "sys.stdin", "m2.search", "outfp.write", "sys.stdout", "m1.search"]}, "makefreeze.py": {"libraries": ["bkfile", "marshal"], "function_names": ["makefreeze", "writecode"], "function_calls": ["len", "sorted", "bytes", "writecode", "range", "print"], "class_names": [], "class_method_calls": ["bkfile.open", "done.append", "mod.split", "m.__path__", "dict.keys", "marshal.dumps", "m.__code__", "outfp.write", "files.append"]}, "makemakefile.py": {"libraries": ["os"], "function_names": ["makemakefile"], "function_calls": ["len", "range", "sorted"], "class_names": [], "class_method_calls": ["outfp.write", "deps.append", "os.path", "makevars.keys"]}, "parsesetup.py": {"libraries": ["sys", "os", "re"], "function_names": ["prdict", "getsetupinfo", "getmakevars", "test"], "function_calls": ["getsetupinfo", "test", "sorted", "getmakevars", "prdict", "str", "open", "print"], "class_names": [], "class_method_calls": ["line.endswith", "setupvardef.match", "os.path", "re.compile", "d.keys", "sys.exit", "line.find", "line.split", "value.find", "sys.argv", "fp.readline", "fp.close", "matchobj.group", "makevardef.match", "value.strip"]}, "ok.py": {"libraries": ["sys"], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": ["sys.exit"]}, "winmakemakefile.py": {"libraries": ["sys", "os"], "function_names": ["makemakefile", "get_custom_entry_point", "realwork"], "function_calls": ["ValueError", "realwork", "print"], "class_names": [], "class_method_calls": ["moddefn.name", "os.path", "moddefn.GetLinkerLibs", "moddefn.sourceFiles", "moddefn.GetCompilerOptions", "libs.append", "sys.version_info", "objects.append", "sys.stdout"]}, "libpython.py": {"libraries": ["re", "__future__.print_function", "pprint.pformat", "sys", "locale", "os", "unicodedata", "gdb"], "function_names": ["get_attr_dict", "_PyObject_VAR_SIZE", "get_selected_python_frame", "field", "get_index", "_sizeof_void_p", "write_repr", "print_traceback", "pyop_field", "_unichr_is_printable", "_type_char_ptr", "_type_unsigned_short_ptr", "write_field_repr", "iter_locals", "__repr__", "to_string", "int_from_int", "get_var_by_name", "char_width", "get_selected_bytecode_frame", "iter_builtins", "current_line", "select", "safety_limit", "_type_unsigned_int_ptr", "get_gdb_type", "is_waiting_for_gil", "get_selected_frame", "subclass_from_type", "__init__", "safe_tp_name", "move_in_stack", "newer", "iteritems", "safe_self_addresss", "get_pyop", "print_summary", "register", "current_line_num", "addr2line", "safe_range", "_dummy_key", "getvalue", "stringify", "is_optimized_out", "write_unicode", "proxyval", "__str__", "is_python_frame", "_write_instance_repr", "__iter__", "safe_name", "is_gc_collect", "os_fsencode", "type", "__getitem__", "_get_entries", "pretty_printer_lookup", "write", "get_truncated_repr", "invoke", "_type_unsigned_char_ptr", "is_other_python_frame", "older", "from_pyobject_ptr", "iter_globals", "is_evalframe", "_unichr", "filename", "as_address", "is_null"], "function_calls": ["_PyObject_VAR_SIZE", "min", "frozenset", "_sizeof_void_p", "long", "PyObjectPtr", "cls", "abs", "_type_char_ptr", "_type_unsigned_short_ptr", "_unichr_is_printable", "TruncatedStringIO", "xrange", "FakeRepr", "PyObjectPtrPrinter", "int_from_int", "repr", "isinstance", "BuiltInFunctionProxy", "safety_limit", "_type_unsigned_int_ptr", "str", "tuple", "Frame", "move_in_stack", "open", "PyLocals", "PyList", "register", "PyBacktrace", "safe_range", "stringify", "write_unicode", "os_fsencode", "_write_instance_repr", "set", "NullPyObjectPtr", "ProxyAlreadyVisited", "BuiltInMethodProxy", "int", "StringTruncated", "zip", "enumerate", "PyDown", "_unichr", "hasattr", "unichr", "len", "PyPrint", "_type_unsigned_char_ptr", "chr", "InstanceProxy", "PyUp", "PyBacktraceFull", "pformat", "sum", "PyTypeObjectPtr", "ord", "map", "ProxyException", "print"], "class_names": ["PyObjectPtr", "PyFrameObjectPtr", "PyUnicodeObjectPtr", "PySetObjectPtr", "PyDictObjectPtr", "TruncatedStringIO", "PyBaseExceptionObjectPtr", "PyTupleObjectPtr", "FakeRepr", "PyObjectPtrPrinter", "BuiltInFunctionProxy", "PyLongObjectPtr", "PyBytesObjectPtr", "Frame", "PyBoolObjectPtr", "PyVarObjectPtr", "PyList", "PyLocals", "HeapTypeObjectPtr", "PyBacktrace", "PyListObjectPtr", "StringTruncated", "NullPyObjectPtr", "ProxyAlreadyVisited", "BuiltInMethodProxy", "wrapperobject", "PyCFunctionObjectPtr", "PyDown", "PyPrint", "InstanceProxy", "PyUp", "PyBacktraceFull", "PyClassObjectPtr", "PyCodeObjectPtr", "PyTypeObjectPtr", "PyNoneStructPtr", "ProxyException"], "class_method_calls": ["cls.subclass_from_type", "self.safe_tp_name", "line.strip", "field_obj.write_repr", "sys.stdout", "compact.address", "pyop_value.write_repr", "self.write_field_repr", "gdb.NORMAL_FRAME", "self.field", "pyop_value.get_truncated_repr", "out.write", "self.co_nlocals", "frame.read_var", "cls.get_gdb_type", "iter_frame.is_python_frame", "pyop_attrdict.iteritems", "PyObjectPtr.get_gdb_type", "self.is_evalframe", "ucs.encode", "pyop_frame.iter_locals", "PyTupleObjectPtr.from_pyobject_ptr", "element.write_repr", "fp.readlines", "gdb.lookup_type", "self.as_address", "iter_frame.newer", "self.char_width", "self._rep", "pyop.current_line", "iter_frame.select", "pyop_globals.iteritems", "self._gdbval", "self.gdbval", "frame.newer", "f.name", "frame.is_optimized_out", "self.co_name", "frame.is_python_frame", "iter_frame.print_summary", "type.code", "gdb.current_objfile", "self.type", "self.safe_self_addresss", "frame.print_summary", "ob_type.field", "frame.print_traceback", "gdb.COMMAND_DATA", "typeobj.field", "gdb.COMMAND_STACK", "obj.pretty_printers", "p.type", "pyop_m_self.is_null", "self.tp_name", "ascii.address", "gdbval.cast", "cls._typename", "Frame.get_selected_bytecode_frame", "type.target", "m.groups", "dictptr.dereference", "frame.older", "gdb.COMMAND_FILES", "frame.get_pyop", "pyop.print_traceback", "self.iteritems", "self.proxyval", "self.pyop_m_self", "self.ml_name", "pyop_builtins.iteritems", "self.filename", "pyop_key.write_repr", "field_str.cast", "pyop_arg.proxyval", "sys.version_info", "caller.startswith", "gdb.COMPLETE_NONE", "pyo_ptr.dereference", "self.cl_name", "re.match", "PyFrameObjectPtr.from_pyobject_ptr", "self.iter_builtins", "char.encode", "self.get_attr_dict", "PyVarObjectPtr.get_gdb_type", "pyop_value.proxyval", "key.proxyval", "pyop_key.proxyval", "pyop.current_line_num", "pyop_frame.get_var_by_name", "pyop.filename", "os.fsencode", "self.iter_globals", "cls.get_selected_frame", "sys.maxunicode", "self.args", "PyObjectPtr.__init__", "self.f_lineno", "unicodedata.category", "Frame.get_selected_python_frame", "PyCodeObjectPtr.from_pyobject_ptr", "tp_name.string", "gdb.error", "gdb.selected_frame", "self.pyop_field", "t.field", "_PyObject_VAR_SIZE._type_size_t", "self.is_optimized_out", "pyop_var.get_truncated_repr", "self.get_pyop", "PyObjectPtr.from_pyobject_ptr", "self.current_line_num", "self.is_waiting_for_gil", "self.iter_locals", "self.address", "f.readlines", "self._dummy_key", "_type_Py_UNICODE.sizeof", "ent_addr.cast", "sys.getfilesystemencoding", "field_ob_sval.address", "gdb.Frame", "self.attrdict", "self.safe_name", "frame.is_evalframe", "self.co_filename", "self.co_varnames", "pyop_val.write_repr", "encoded.append", "self.f_lasti", "gdb.TYPE_CODE_PTR", "pyop.get_truncated_repr", "caller.read_var", "self.write_repr", "self._get_entries", "self.co", "gdbval.type", "frame.name", "visited.add", "gdb.lookup_global_symbol", "PyLongObjectPtr.proxyval", "self._val", "self._gdbframe", "filename.encode", "out.getvalue", "locale.getpreferredencoding", "self.is_gc_collect", "self.maxlen", "pyop_attr_dict.proxyval", "self.is_null", "pyop.proxyval", "key.write_repr", "gdb.Command", "pyop_name.proxyval", "dictptr.cast", "pyop.is_optimized_out", "Py_UNICODEs.append", "pyop_value.is_null", "file.write", "m.group", "text.encode", "self.get_index", "self.is_other_python_frame"]}, "makelocalealias.py": {"libraries": ["sys", "argparse", "locale"], "function_names": ["pprint", "check", "optimize", "parse", "print_differences", "parse_glibc_supported"], "function_calls": ["pprint", "check", "list", "len", "optimize", "sorted", "parse", "print_differences", "open", "parse_glibc_supported", "print"], "class_names": [], "class_method_calls": ["argparse.ArgumentParser", "line.strip", "sys.exit", "args.glibc_supported", "data.items", "parser.add_argument", "locale.lower", "_locale._replace_encoding", "data.update", "olddata.items", "line.split", "alias.partition", "line.rstrip", "locale.split", "line.replace", "sys.stderr", "data.copy", "alias_mod.partition", "encoding.replace", "locale.normalize", "alias.lower", "parser.parse_args", "args.locale_alias", "locale.locale_alias"]}, "msgfmt.py": {"libraries": ["email.parser.HeaderParser", "getopt", "sys", "struct", "ast", "os", "array"], "function_names": ["generate", "usage", "add", "main", "make"], "function_calls": ["HeaderParser", "generate", "len", "usage", "sorted", "add", "main", "make", "open", "print"], "class_names": [], "class_method_calls": ["l.startswith", "MESSAGES.keys", "f.write", "sys.exit", "getopt.getopt", "filename.endswith", "p.parsestr", "struct.pack", "msgstr.decode", "l.strip", "getopt.error", "ast.literal_eval", "array.array", "l.decode", "offsets.append", "l.encode", "f.readlines", "os.path", "sys.stderr", "l.split", "sys.argv"]}, "pygettext.py": {"libraries": ["importlib.machinery", "time", "getopt", "importlib.util", "tokenize", "sys", "token", "fintl", "os", "glob"], "function_names": ["usage", "__call__", "__init__", "__addentry", "safe_eval", "containsAny", "getFilesForName", "set_filename", "__suiteseen", "normalize", "__keywordseen", "make_escapes", "__openseen", "escape_nonascii", "escape_ascii", "__suitedocstring", "write", "is_literal_string", "__waiting", "main"], "function_calls": ["TokenEater", "sorted", "usage", "escape", "tuple", "open", "range", "safe_eval", "containsAny", "getFilesForName", "_", "normalize", "make_escapes", "int", "eval", "Options", "len", "any", "is_literal_string", "chr", "main", "print", "ord", "eater", "globals"], "class_names": ["TokenEater", "Options"], "class_method_calls": ["expanded.extend", "sys.stdout", "spec.origin", "self.__options", "self.__lineno", "options.keywords", "options.excludefilename", "eater.set_filename", "self.__suitedocstring", "lineterm.join", "self.__messages", "tokenize.NL", "options.width", "getopt.error", "self.__enclosurecount", "options.locationstyle", "fp.readlines", "sys.stderr", "tokenize.STRING", "options.GNU", "list.extend", "sys.argv", "options.extractall", "locations.get", "tokenize.TokenError", "importlib.machinery", "eater.write", "options.outpath", "arg.lower", "dirs.remove", "importlib.util", "tokenize.tokenize", "self.__curfile", "s.encode", "glob.glob", "options.docstrings", "fintl.gettext", "self.__state", "reverse.keys", "self.__data", "tokenize.NEWLINE", "os.path", "self.__addentry", "token.NEWLINE", "v.keys", "s.split", "expanded.append", "tokenize.COMMENT", "options.writelocations", "self.__freshmodule", "fp.close", "opts.keywords", "getopt.getopt", "tokenize.INDENT", "v.values", "time.strftime", "opts.nodocstrings", "sys.stdin", "os.walk", "e.args", "self.__waiting", "options.verbose", "options.nodocstrings", "sys.exit", "self.__openseen", "rentries.sort", "options.escape", "self.__suiteseen", "options.SOLARIS", "fp.encoding", "token.INDENT", "options.outfile", "opts.docstrings", "tokenize.OP", "options.toexclude", "tokenize.NAME", "token.DEDENT", "self.__keywordseen", "reverse.setdefault", "fp.readline", "EMPTYSTRING.join"]}, "importbench.py": {"libraries": ["test.test_importlib.util", "importlib.machinery", "json", "argparse", "importlib", "py_compile", "sys", "decimal", "imp", "os", "tabnanny", "timeit"], "function_names": ["benchmark_wo_bytecode", "using_bytecode_benchmark", "cleanup", "_wo_bytecode", "source_using_bytecode", "bench", "from_cache", "builtin_mod", "source_wo_bytecode", "_using_bytecode", "source_writing_bytecode", "main", "_writing_bytecode", "writing_bytecode_benchmark"], "function_calls": ["format", "cleanup", "len", "max", "_wo_bytecode", "bench", "benchmark", "_using_bytecode", "main", "_writing_bytecode", "range", "print"], "class_names": [], "class_method_calls": ["importlib.machinery", "util.create_modules", "argparse.ArgumentParser", "results.append", "py_compile.compile", "sys.path_hooks", "b.__doc__", "using_bytecode_benchmark.__doc__", "__builtins__.__import__", "sys.modules", "imp.cache_from_source", "json.load", "importlib.__import__", "sys.stdout", "writing_bytecode_benchmark.__doc__", "imp.new_module", "json.dump", "sys.exit", "options.benchmark", "module.__package__", "parser.add_argument", "benchmark.__doc__", "timeit.Timer", "sys.meta_path", "options.source_file", "os.unlink", "timer.timeit", "module.__name__", "util.uncache", "os.path", "module.__file__", "sys.stderr", "sys.dont_write_bytecode", "options.dest_file", "header.format", "argparse.FileType", "parser.parse_args", "benchmark_wo_bytecode.__doc__", "options.builtin"]}, "iobench.py": {"libraries": ["re", "platform", "time", "sys", "os", "optparse.OptionParser", "itertools"], "function_names": ["read_big_chunks", "run_one_test", "run_all_tests", "with_open_mode", "modify_medium_chunks", "run_test_family", "print_results", "get_text_files", "write_medium_chunks", "print_label", "seek_forward_bytewise", "make_test_source", "read_whole_file", "write_bytewise", "modify_bytewise", "modify_small_chunks", "read_seek_blockwise", "write_large_chunks", "text_open", "prepare_files", "modify_seek_forward_blockwise", "write_small_chunks", "decorate", "modify_seek_forward_bytewise", "warm_cache", "run_during", "read_lines", "get_file_sizes", "read_bytewise", "get_binary_files", "seek_forward_blockwise", "read_modify_bytewise", "read_seek_bytewise", "main", "read_modify_blockwise", "read_small_chunks", "with_sizes"], "function_calls": ["run_one_test", "run_all_tests", "run_test_family", "print_results", "get_text_files", "print_label", "open_func", "globals", "xrange", "RuntimeError", "isinstance", "__import__", "_t", "tuple", "text_open", "prepare_files", "open", "OptionParser", "list", "warm_cache", "run_during", "int", "next", "get_file_sizes", "func", "float", "get_binary_files", "f", "len", "main", "test_func", "sum", "with_open_mode", "with_sizes", "print"], "class_names": [], "class_method_calls": ["test_func.file_open_mode", "os.urandom", "chunk.decode", "s.replace", "options.binary", "platform.platform", "os.times", "parser.error", "sys.stdout", "out.flush", "itertools.cycle", "bw.rjust", "name.center", "f.write", "sys.maxunicode", "f.file_open_mode", "test_func.file_sizes", "os.devnull", "f.read", "options.io_module", "options.text", "parser.add_option", "f.seek", "out.write", "f.tell", "options.read", "options.write", "options.newlines", "chunk.encode", "func.__doc__", "itertools.repeat", "time.time", "line.replace", "os.path", "sys.version", "options.encoding", "sys.version_info", "s.split", "line.startswith", "tail.decode", "parser.parse_args", "f.file_sizes", "re.split"]}, "csv_to_wxs.py": {"libraries": ["re", "csv", "uuid.uuid1", "itertools.chain", "sys", "pathlib.PureWindowsPath", "collections.defaultdict", "itertools.zip_longest"], "function_names": ["make_id", "main"], "function_calls": ["list", "len", "PureWindowsPath", "sorted", "str", "set", "all", "make_id", "main", "uuid1", "open", "chain", "defaultdict", "zip_longest", "print"], "class_names": [], "class_method_calls": ["create_folders.discard", "csv.reader", "ID_CHAR_SUBS.get", "x.rstrip", "target.parents", "lines.extend", "f.writelines", "dirname.parent", "p1.parents", "dirname.name", "cache_directories.values", "lines.append", "re.sub", "re.I", "target.suffix", "target.name", "target.parent", "remove_folders.discard", "sys.argv", "m.group"]}, "generate_md5.py": {"libraries": ["sys", "os", "hashlib"], "function_names": ["main"], "function_calls": ["len", "str", "int", "zip", "main", "open", "print"], "class_names": [], "class_method_calls": ["filenames.append", "os.path", "sys.exit", "hashlib.md5", "sizes.append", "md5.hexdigest", "sys.argv", "md5.update", "f.read", "hashes.append"]}, "purge.py": {"libraries": ["sys", "re", "urllib.request.*"], "function_names": [], "function_calls": ["Request", "urlopen", "print"], "class_names": [], "class_method_calls": ["r.read", "re.compile", "sys.exit", "VERSION_RE.match", "sys.argv", "m.group"]}, "unparse.py": {"libraries": ["io", "tokenize", "sys", "ast", "os"], "function_names": ["_Constant", "testdir", "dispatch", "_Tuple", "_SetComp", "_For", "leave", "_write_constant", "_Await", "_FormattedValue", "_Pass", "_ListComp", "__init__", "_BoolOp", "_JoinedStr", "_YieldFrom", "_Assert", "main", "_AnnAssign", "_withitem", "_Attribute", "fill", "_Set", "_keyword", "_GeneratorExp", "_Try", "_IfExp", "_fstring_JoinedStr", "write_item", "_ImportFrom", "_Compare", "_List", "_UnaryOp", "_Return", "_Call", "_Break", "_ExceptHandler", "_NamedExpr", "_Import", "_Assign", "_AugAssign", "_Name", "_AsyncFor", "_Starred", "_Global", "_alias", "_BinOp", "_AsyncFunctionDef", "_ClassDef", "_Nonlocal", "_With", "_ExtSlice", "write_key_value_pair", "_Continue", "_Index", "_Module", "_Delete", "_Slice", "_FunctionDef", "_DictComp", "_Lambda", "_Raise", "_Expr", "roundtrip", "_fstring_FormattedValue", "_Ellipsis", "interleave", "__For_helper", "enter", "_If", "_Subscript", "_While", "write", "_comprehension", "_fstring_Constant", "_arg", "_Dict", "_arguments", "__FunctionDef_helper", "_Yield", "_AsyncWith"], "function_calls": ["meth", "getattr", "testdir", "repr", "isinstance", "iter", "Unparser", "open", "roundtrip", "interleave", "next", "zip", "type", "enumerate", "f", "write", "len", "compile", "chr", "write_key_value_pair", "main", "print", "inter"], "class_names": ["Unparser"], "class_method_calls": ["t.test", "t.args", "t.body", "t.keywords", "t.op", "pyfile.readline", "t.format_spec", "sys.stdout", "string.getvalue", "self.unop", "t.value", "sys.float_info", "pyfile.read", "t.conversion", "tree.target", "t.right", "self.write", "o.__class__", "t.kind", "t.func", "self.f", "t.orelse", "t.left", "t.simple", "self._fstring_JoinedStr", "t.targets", "t.key", "sys.stderr", "t.elts", "t.kw_defaults", "sys.argv", "t.iter", "self._indent", "t.type", "self.leave", "t.operand", "t.decorator_list", "t.returns", "t.finalbody", "self.__For_helper", "t.dims", "t.names", "ast.Or", "io.StringIO", "t.upper", "n.endswith", "t.context_expr", "ast.PyCF_ONLY_AST", "ast.Constant", "t.handlers", "self._fstring_FormattedValue", "self.enter", "t.name", "t.values", "os.path", "t.id", "t.kwonlyargs", "string.write", "ast.And", "t.module", "ast.If", "ast.Name", "t.ops", "self.cmpops", "t.bases", "t.posonlyargs", "t.kwarg", "expr.getvalue", "t.attr", "t.arg", "t.level", "t.lower", "t.target", "os.listdir", "tree.__class__", "t.defaults", "t.items", "self.dispatch", "t.comparators", "tokenize.detect_encoding", "t.msg", "t.asname", "self.binop", "t.is_async", "self.__FunctionDef_helper", "self._write_constant", "t.optional_vars", "self.boolops", "t.step", "self.fill", "tree.body", "expr.startswith", "t.elt", "t.cause", "t.keys", "t.annotation", "t.exc", "t.vararg", "t.slice", "tree.value", "t.ifs", "ast.Tuple", "t.generators", "ast.Index"]}, "ChipViewer.py": {"libraries": ["ColorDB", "tkinter.*"], "function_names": ["set_color", "set_message", "set_name", "press", "get_color", "__init__", "update_yourself", "release", "__buttonrelease", "__buttonpress"], "function_calls": ["Label", "Entry", "Frame", "ChipWidget", "StringVar"], "class_names": ["ChipWidget", "ChipViewer"], "class_method_calls": ["colordb.nearest", "self.__nframe", "self.__selected", "self.__label", "self.__chip", "self.__sb", "self.__frame", "self.__buttonrelease", "self.__buttonpress", "self.__namevar", "colordb.find_byname", "ColorDB.rrggbb_to_triplet", "self.__msgvar", "ColorDB.triplet_to_rrggbb", "self.__name", "self.__nearest", "self.__sframe"]}, "ColorDB.py": {"libraries": ["sys", "re", "types.*", "time"], "function_names": ["unique_names", "_extractrgb", "_extractname", "triplet_to_fractional_rgb", "filename", "nearest", "__init__", "triplet_to_brightness", "aliases_of", "rrggbb_to_triplet", "get_colordb", "find_byname", "triplet_to_rrggbb", "find_byrgb"], "function_calls": ["class_", "int", "BadColor", "rrggbb_to_triplet", "get_colordb", "open", "triplet_to_rrggbb", "print"], "class_names": ["WebsafeDB", "ColorDB", "LightlinkDB", "RGBColorDB", "HTML40DB", "BadColor"], "class_method_calls": ["colordb.find_byrgb", "self.__byname", "COMMASPACE.join", "typere.search", "SPACE.join", "fp.close", "colordb.unique_names", "self.__name", "colordb.nearest", "sys.exit", "mo.group", "self.__byrgb", "colordb.aliases_of", "aliases.append", "self._extractrgb", "name.lower", "colordb.find_byname", "str.lower", "time.time", "re.compile", "sys.stderr", "self.__allnames", "self._re", "fp.readline", "fp.name", "_namedict.get", "self._extractname", "_tripdict.get"]}, "DetailsViewer.py": {"libraries": ["tkinter.*"], "function_names": ["__minus10", "withdraw", "__minus1", "__plus25", "deiconify", "__init__", "__quit", "__effect", "__plus1", "__plus10", "update_yourself", "__delta", "__minus25", "save_options"], "function_calls": ["Label", "IntVar", "len", "min", "max", "Checkbutton", "Toplevel", "OptionMenu", "Frame", "Button", "StringVar"], "class_names": ["DetailsViewer"], "class_method_calls": ["root.iconname", "self.__frame", "self.__down25", "self.__plus1", "self.__radio2", "frame.pack", "switchboard.current_rgb", "self.__green", "self.__quit", "self.__root", "optiondb.get", "self.__omenu", "self.__minus10", "self.__sb", "self.__down1", "root.title", "self.__radio3", "self.__down10", "self.__effect", "switchboard.optiondb", "self.__blue", "root.protocol", "self.__btnframe", "self.__l3", "self.__bvar", "self.__l1", "self.__up1", "self.__minus25", "self.__radio1", "self.__delta", "self.__boundvar", "self.__red", "root.bind", "self.__rvar", "self.__l2", "self.__gvar", "self.__up25", "self.__plus10", "self.__plus25", "tie.append", "self.withdraw", "frame.grid", "self.__minus1", "self.__up10"]}, "ListViewer.py": {"libraries": ["ColorDB", "tkinter.*"], "function_names": ["__onrelease", "withdraw", "colordb_changed", "__toggleupdate", "__populate", "__init__", "deiconify", "__quit", "update_yourself", "save_options"], "function_calls": ["Label", "Listbox", "BooleanVar", "Checkbutton", "Canvas", "Toplevel", "Frame", "Scrollbar", "int"], "class_names": ["ListViewer"], "class_method_calls": ["root.iconname", "self.__frame", "frame.pack", "canvas.itemconfigure", "self.__onrelease", "self.__green", "self.__quit", "colordb.unique_names", "ColorDB.triplet_to_rrggbb", "canvas.configure", "canvas.canvasy", "self.update_yourself", "self.__root", "bboxes.append", "optiondb.get", "self.__sb", "root.title", "self.__uoc", "switchboard.optiondb", "event.x", "root.protocol", "self.__blue", "ColorDB.rrggbb_to_triplet", "canvas.create_rectangle", "self.__dontcenter", "self.__toggleupdate", "self.__populate", "self.__uocbtn", "event.y", "self.__scrollbar", "self.__aliases", "canvas.coords", "canvas.bind", "self.__red", "root.bind", "canvas.canvasx", "canvas.find_overlapping", "canvas.create_text", "self.__canvas", "ColorDB.BadColor", "self.__bboxes", "self.__alabel", "canvas.config", "self.__lastbox", "canvas.pack", "self.withdraw", "colordb.find_byname", "canvas.bbox", "canvas.yview"]}, "Main.py": {"libraries": ["Switchboard.Switchboard", "ColorDB", "PyncheWidget.PyncheWidget", "getopt", "ChipViewer.ChipViewer", "sys", "TypeinViewer.TypeinViewer", "StripViewer.StripViewer", "os"], "function_names": ["usage", "run", "initial_color", "main", "scan_color", "docstring", "build"], "function_calls": ["usage", "len", "run", "Switchboard", "globals", "TypeinViewer", "initial_color", "main", "scan_color", "print", "StripViewer", "docstring", "PyncheWidget", "ChipViewer", "build"], "class_names": [], "class_method_calls": ["files.pop", "app.start", "ColorDB.get_colordb", "optiondb.get", "s.update_views", "sys.exit", "s.optiondb", "getopt.getopt", "ColorDB.rrggbb_to_triplet", "s.set_colordb", "s.add_view", "getopt.error", "sys.path", "os.path", "sb.save_views", "ColorDB.BadColor", "app.window", "sys.argv", "colordb.find_byname"]}, "PyncheWidget.py": {"libraries": ["ColorDB", "tkinter.filedialog", "tkinter.messagebox", "Main.__version__", "Main.docstring", "sys", "os", "functools", "tkinter.*"], "function_names": ["withdraw", "__keepalive", "menutext", "make_view_popups", "__eq__", "__okay", "__cancel", "__lt__", "__init__", "__popup_usage", "__popup_about", "__bell", "__withdraw", "start", "deiconify", "__quit", "window", "popup", "__load", "underline"], "function_calls": ["Tk", "__import__", "Helpwin", "getattr", "class_", "Toplevel", "make_view_popups", "Frame", "PopupViewer", "Scrollbar", "Menu", "Text", "Button", "open", "docstring", "hasattr"], "class_names": ["PopupViewer", "PyncheWidget", "Helpwin"], "class_method_calls": ["self.__filemenu", "menubar.add_cascade", "self.__helpwin", "text.configure", "root.iconname", "self.__m", "self.__popup_usage", "viewmenu.add_command", "self.__detailswin", "ColorDB.get_colordb", "self.__quit", "fp.close", "self.__name", "viewers.sort", "text.insert", "self.__root", "v.menutext", "self.__sb", "self.__bell", "root.title", "v.popup", "other.__menutext", "self.__menubar", "messagebox.showerror", "self.__menutext", "self.__window", "root.protocol", "self.__underline", "scrollbar.configure", "tkroot.grab_set", "functools.total_ordering", "self.__okay", "self.__popup_about", "contents.rfind", "self.__modal", "self.__version", "self.__load", "tkroot.withdraw", "fp.read", "viewers.append", "self.__keepalive", "self.__withdraw", "okay.pack", "cancel.pack", "root.bind", "helpmenu.add_command", "v.underline", "self.__tkroot", "bframe.grid", "scrollbar.pack", "os.path", "sys.path", "self.__cancel", "messagebox.showinfo", "module.ADDTOVIEW", "self.__dialogstate", "sys.stderr", "os.listdir", "self.__listwin", "self.__text", "text.pack", "self.__textwin", "filedialog.askopenfilename", "filemenu.add_command"]}, "StripViewer.py": {"libraries": ["ColorDB", "tkinter.*"], "function_names": ["constant_cyan_generator", "_x", "__togglehex", "__towhite", "constant_magenta_generator", "constant_red_generator", "save_options", "_create", "__init__", "__arrow_x", "__select_chip", "set", "update_yourself", "move_to", "constant_blue_generator", "__toblack", "constant_green_generator", "__trackarrow", "constant", "constant_yellow_generator", "set_text"], "function_calls": ["list", "len", "BooleanVar", "Checkbutton", "Canvas", "RightArrow", "hex", "Frame", "LeftArrow", "int", "constant", "zip", "StripWidget", "Button", "range", "repr"], "class_names": ["LeftArrow", "StripWidget", "RightArrow", "StripViewer"], "class_method_calls": ["frame.grid", "self.__hexpvar", "frame2.pack", "self.__arrow", "self.__select_chip", "self.__generator", "self.__arrow_x", "SPACE.join", "self.__uwdvar", "self.__blues", "event.type", "chips.append", "ColorDB.triplet_to_rrggbb", "self.update_yourself", "self.__chips", "self.__greens", "ColorDB.triplet_to_brightness", "self.__lastchip", "uwdbtn.grid", "optiondb.get", "self.__label", "self.__sb", "self.move_to", "switchboard.optiondb", "canvas.tk", "event.x", "canvas.create_rectangle", "ColorDB.rrggbb_to_triplet", "frame2.columnconfigure", "seq.append", "self.__toblack", "self._TEXTYOFFSET", "self._YOFFSET", "event.y", "self.__trackarrow", "self._create", "self._canvas", "uwd.set", "tk.eval", "hexbtn.grid", "self._x", "self.__uwd", "canvas.bind", "canvas.find_overlapping", "hexp.set", "self.__towhite", "self.__numchips", "self._ARROWWIDTH", "canvas.create_text", "self.__canvas", "self.__togglehex", "self.__axis", "self.__rightarrow", "blackbtn.grid", "frame1.pack", "self._ARROWHEIGHT", "self.__text", "self._TAG", "canvas.pack", "self.__hexp", "self.__reds", "self.__leftarrow", "whitebtn.grid"]}, "Switchboard.py": {"libraries": ["sys", "marshal"], "function_names": ["canceled", "update_views_current", "update_views", "current_rgb", "withdraw_views", "add_view", "colordb", "save_views", "set_colordb", "__init__", "optiondb", "canceled_p"], "function_calls": ["isinstance", "print", "open", "hasattr"], "class_names": ["Switchboard"], "class_method_calls": ["self.__optiondb", "self.__colordb", "v.colordb_changed", "v.save_options", "marshal.dump", "self.update_views", "marshal.load", "sys.stderr", "v.withdraw", "self.update_views_current", "v.update_yourself", "self.__blue", "self.__initfile", "self.__green", "self.__canceled", "fp.close", "self.__views", "self.__red"]}, "TextViewer.py": {"libraries": ["ColorDB", "tkinter.*"], "function_names": ["withdraw", "__toggletrack", "__set_color", "deiconify", "__init__", "__quit", "__forceupdate", "update_yourself", "save_options"], "function_calls": ["IntVar", "Label", "BooleanVar", "Checkbutton", "Toplevel", "Frame", "Text", "Radiobutton"], "class_names": ["TextViewer"], "class_method_calls": ["text.configure", "root.iconname", "self.__frame", "frame.pack", "self.__quit", "self.__toggletrack", "ColorDB.triplet_to_rrggbb", "self.__root", "optiondb.get", "self.__which", "self.__t", "self.__sb", "l.configure", "root.title", "switchboard.optiondb", "self.__labels", "root.protocol", "ColorDB.rrggbb_to_triplet", "r.configure", "self.__radios", "self.__set_color", "root.bind", "r.grid", "ColorDB.BadColor", "self.__text", "self.withdraw", "l.grid", "self.__trackp"]}, "TypeinViewer.py": {"libraries": ["tkinter.*"], "function_names": ["__togglehex", "hexp_var", "__maybeupdate", "__init__", "update_yourself", "__update", "__normalize", "save_options"], "function_calls": ["Label", "BooleanVar", "Checkbutton", "Entry", "hex", "Frame", "int"], "class_names": ["TypeinViewer"], "class_method_calls": ["x.delete", "event.keysym", "self.__frame", "self.__z", "x.insert", "self.__x", "self.update_yourself", "z.icursor", "self.__xl", "optiondb.get", "z.delete", "self.__sb", "self.__update", "switchboard.optiondb", "y.index", "event.char", "ew.get", "ew.icursor", "self.__xox", "self.__zl", "self.__uwtyping", "y.insert", "x.icursor", "self.__yl", "ew.insert", "y.icursor", "ew.bell", "self.__maybeupdate", "z.index", "self.__uwt", "self.__zox", "ew.delete", "x.index", "y.delete", "self.__yox", "subframe.grid", "self.__togglehex", "self.__normalize", "z.insert", "self.__y", "event.widget", "ew.index", "self.__hexp", "self.__hex"]}, "pyColorChooser.py": {"libraries": ["ColorDB", "os", "tkinter.Tk", "Main", "tkinter.*"], "function_names": ["show", "__choose", "run", "__init__", "__quit", "askcolor", "save"], "function_calls": ["Label", "Tk", "Chooser", "Tester", "Button", "askcolor"], "class_names": ["Tester", "Chooser"], "class_method_calls": ["colordb.find_byrgb", "b.pack", "self.__choose", "ColorDB.get_colordb", "self.__quit", "ColorDB.triplet_to_rrggbb", "self.__ignore", "_chooser.show", "self.__root", "options.get", "self.__sb", "self.__master", "q.pack", "Main.run", "self.__initfile", "_chooser.save", "self.__wantspec", "Main.initial_color", "os.path", "ColorDB.BadColor", "self.__pw", "self.__databasefile", "self.__l", "t.run", "Main.build"]}, "abitype.py": {"libraries": ["sys", "re"], "function_names": ["get_fields", "classify", "make_slots"], "function_calls": ["len", "get_fields", "make_slots", "Exception", "enumerate", "classify"], "class_names": [], "class_method_calls": ["m.start", "re.compile", "tokens.append", "source.find", "val.endswith", "m.lastgroup", "res.append", "tokenizer.match", "m.end", "re.MULTILINE", "sys.stdin", "fields.append", "m.group", "sys.stdout", "re.search"]}, "analyze_dxp.py": {"libraries": ["threading", "copy", "operator", "opcode", "sys"], "function_names": ["seq", "render_common_pairs", "snapshot_profile", "reset_profile", "common_pairs", "merge_profile", "common_instructions", "has_pairs"], "function_calls": ["seq", "isinstance", "len", "snapshot_profile", "common_pairs", "hasattr", "merge_profile", "enumerate", "has_pairs", "range", "RuntimeError"], "class_names": [], "class_method_calls": ["sys.getdxp", "opcode.opname", "result.sort", "operator.itemgetter", "copy.deepcopy", "threading.RLock"]}, "byext.py": {"libraries": ["sys", "os"], "function_names": ["statdir", "__init__", "main", "addstats", "statfile", "report", "printheader", "statargs"], "function_calls": ["len", "max", "sorted", "str", "main", "open", "Stats", "map", "printheader", "print"], "class_names": ["Stats"], "class_method_calls": ["cols.insert", "self.statdir", "data.split", "self.stats", "name.startswith", "s.report", "f.read", "columns.update", "s.statargs", "os.curdir", "self.addstats", "os.path", "sys.stderr", "exts.append", "os.listdir", "sys.argv", "d.get", "self.statfile", "name.endswith"]}, "byteyears.py": {"libraries": ["sys", "os", "stat.*", "time"], "function_names": ["main"], "function_calls": ["len", "statfunc", "max", "int", "main", "repr", "float", "print"], "class_names": [], "class_method_calls": ["time.time", "os.lstat", "sys.exit", "filename.ljust", "sys.stderr", "sys.argv", "os.stat"]}, "checkpip.py": {"libraries": ["json", "sys", "ensurepip", "urllib.request"], "function_names": ["main"], "function_calls": ["main", "print"], "class_names": [], "class_method_calls": ["urllib.request", "sys.exit", "json.loads", "ensurepip._PROJECTS"]}, "checkpyc.py": {"libraries": ["sys", "stat.ST_MTIME", "os", "importlib.util"], "function_names": ["get_long", "main"], "function_calls": ["len", "cache_from_source", "sorted", "get_long", "main", "open", "print", "repr"], "class_names": [], "class_method_calls": ["sys.path", "os.path", "importlib.util", "os.listdir", "sys.implementation", "sys.argv", "os.stat", "f.read", "name.endswith"]}, "cleanfuture.py": {"libraries": ["getopt", "tokenize", "sys", "__future__", "os"], "function_names": ["write", "check", "gettherest", "run", "errprint", "__init__", "main", "getline"], "function_calls": ["check", "len", "getattr", "str", "errprint", "get", "FutureFinder", "main", "open", "map", "range", "print"], "class_names": ["FutureFinder"], "class_method_calls": ["changed.append", "os.rename", "self.getline", "f.writelines", "okfeatures.append", "self.changed", "object.getMandatoryRelease", "f.write", "ff.run", "getopt.getopt", "os.remove", "self.lines", "ff.write", "self.therest", "self.f", "tokenize.OP", "tokenize.generate_tokens", "name.lower", "self.ateof", "tokenize.NL", "tokenize.NAME", "self.fname", "getopt.error", "tokenize.NEWLINE", "changed.reverse", "features.append", "os.path", "sys.stderr", "tokenize.STRING", "os.listdir", "sys.version_info", "sys.argv", "ff.gettherest", "tokenize.COMMENT", "ff.lines"]}, "combinerefs.py": {"libraries": ["sys", "re"], "function_names": ["combinefile", "read", "combine"], "function_calls": ["iter", "combine", "open", "bool", "combinefile", "read", "print"], "class_names": [], "class_method_calls": ["line.rstrip", "re.compile", "m.groups", "sys.argv", "crack.match", "pat.match"]}, "copytime.py": {"libraries": ["sys", "stat.ST_MTIME", "os", "stat.ST_ATIME"], "function_names": ["main"], "function_calls": ["len", "main"], "class_names": [], "class_method_calls": ["os.utime", "sys.exit", "sys.stderr", "sys.argv", "os.stat"]}, "db2pickle.py": {"libraries": ["getopt", "dbm.ndbm", "sys", "pickle", "bsddb", "dbm.gnu"], "function_names": ["usage", "main"], "function_calls": ["len", "usage", "main", "open", "dbopen", "globals"], "class_names": [], "class_method_calls": ["bsddb.error", "pickle.dump", "gdbm.open", "bsddb.rnopen", "db.close", "sys.exit", "sys.stderr", "db.keys", "pfile.close", "bsddb.hashopen", "bsddb.btopen", "getopt.getopt", "sys.argv", "dbm.open", "getopt.error", "sys.stdout", "anydbm.open"]}, "diff.py": {"libraries": ["datetime.datetime", "argparse", "sys", "datetime.timezone", "os", "difflib"], "function_names": ["file_mtime", "main"], "function_calls": ["file_mtime", "main", "open"], "class_names": [], "class_method_calls": ["difflib.ndiff", "timezone.utc", "argparse.ArgumentParser", "options.u", "sys.stdout", "difflib.context_diff", "datetime.fromtimestamp", "parser.add_argument", "ff.readlines", "difflib.HtmlDiff", "options.n", "options.m", "options.fromfile", "tf.readlines", "options.c", "t.astimezone", "options.tofile", "difflib.unified_diff", "os.stat", "options.lines", "parser.parse_args"]}, "dutree.py": {"libraries": ["sys", "os", "errno"], "function_names": ["display", "main", "show", "store"], "function_calls": ["len", "show", "display", "store", "main", "print", "eval", "repr"], "class_names": [], "class_method_calls": ["os.popen", "list.sort", "list.append", "errno.EPIPE", "d.keys", "sys.argv", "list.reverse", "e.errno", "filename.split"]}, "eptags.py": {"libraries": ["sys", "re"], "function_names": ["main", "treat_file"], "function_calls": ["len", "main", "treat_file", "open"], "class_names": [], "class_method_calls": ["matcher.search", "re.compile", "sys.stderr", "sys.argv", "fp.readline", "outfp.write", "m.group", "tags.append"]}, "find-uname.py": {"libraries": ["sys", "re", "unicodedata"], "function_names": ["main"], "function_calls": ["chr", "main", "range", "print"], "class_names": [], "class_method_calls": ["re.I", "re.compile", "unicode_names.append", "sys.maxunicode", "pat.search", "unicodedata.name", "sys.argv"]}, "find_recursionlimit.py": {"libraries": ["sys", "io", "itertools", "_pickle"], "function_names": ["__getattr__", "test_cpickle", "check_limit", "test_init", "test_getitem", "test_recurse", "test_getattr", "test_add", "test_compiler_recursion", "__init__", "test_repr", "__add__", "__repr__", "__getitem__"], "function_calls": ["RecursiveBlowup5", "compile", "check_limit", "RecursiveBlowup1", "RecursiveBlowup4", "getattr", "test_recurse", "RecursiveBlowup6", "globals", "test_func", "print", "RecursiveBlowup2", "range", "repr"], "class_names": ["RecursiveBlowup5", "RecursiveBlowup1", "RecursiveBlowup4", "RecursiveBlowup6", "RecursiveBlowup2"], "class_method_calls": ["self.__init__", "itertools.count", "sys.setrecursionlimit", "io.BytesIO", "_pickle.Pickler", "sys.getrecursionlimit", "test_func_name.startswith"]}, "finddiv.py": {"libraries": ["sys", "os", "getopt", "tokenize"], "function_names": ["processdir", "usage", "main", "process"], "function_calls": ["processdir", "usage", "process", "main", "open", "print"], "class_names": [], "class_method_calls": ["files.sort", "os.path", "tokenize.generate_tokens", "sys.exit", "sys.stderr", "os.listdir", "getopt.getopt", "fp.readline", "sys.argv", "getopt.error", "files.append"]}, "findlinksto.py": {"libraries": ["sys", "os", "re", "getopt"], "function_names": ["visit", "main"], "function_calls": ["len", "main", "print"], "class_names": [], "class_method_calls": ["os.walk", "os.path", "re.compile", "sys.stderr", "sys.exit", "prog.search", "os.readlink", "getopt.GetoptError", "getopt.getopt", "sys.argv", "sys.stdout"]}, "findnocoding.py": {"libraries": ["re", "getopt", "pysource", "sys", "os"], "function_names": ["has_correct_encoding", "needs_declaration", "get_declaration", "walk_python_files"], "function_calls": ["has_correct_encoding", "str", "pysource", "get_declaration", "open", "needs_declaration", "print"], "class_names": ["pysource"], "class_method_calls": ["os.walk", "pysource.looks_like_python", "os.path", "decl_re.match", "re.compile", "sys.exit", "pysource.can_be_compiled", "sys.stderr", "path.endswith", "infile.readline", "getopt.getopt", "sys.argv", "match.group", "pysource.walk_python_files", "getopt.error", "infile.read", "blank_re.match", "filename.endswith"]}, "fixcid.py": {"libraries": ["re", "getopt", "stat.*", "sys", "os"], "function_names": ["usage", "recursedown", "setdocomments", "fix", "wanted", "initfixline", "setreverse", "main", "addsubst", "fixline"], "function_calls": ["rep", "usage", "recursedown", "len", "setdocomments", "initfixline", "fix", "wanted", "str", "setreverse", "main", "print", "open", "err", "dbg", "addsubst", "fixline", "repr"], "class_names": [], "class_method_calls": ["line.index", "subdirs.append", "match.start", "os.rename", "sys.stdout", "g.close", "os.pardir", "sys.exit", "f.readline", "getopt.getopt", "f.close", "f.seek", "os.curdir", "sys.stdin", "getopt.error", "names.sort", "os.path", "re.compile", "sys.stderr", "os.listdir", "os.chmod", "sys.argv", "os.stat", "fp.readline", "Program.search", "re.match", "match.group", "g.write"]}, "fixdiv.py": {"libraries": ["sys", "re", "getopt", "tokenize"], "function_names": ["chop", "readwarnings", "usage", "fill", "process", "reportphantomwarnings", "__init__", "readline", "main", "scanline", "report", "__getitem__"], "function_calls": ["chop", "list", "readwarnings", "usage", "process", "len", "reportphantomwarnings", "int", "main", "open", "FileContext", "scanline", "report", "range", "print"], "class_names": ["FileContext"], "class_method_calls": ["blocks.append", "f.report", "warnings.get", "intlong.append", "lastblock.append", "list.sort", "self.lineno", "files.sort", "warnings.append", "sys.exit", "f.readline", "getopt.getopt", "self.lookahead", "self.window", "self.fp", "self.eoflookahead", "self.fill", "rows.append", "tokenize.generate_tokens", "orphans.append", "self.buffer", "m.groups", "floatcomplex.append", "getopt.error", "tokenize.NEWLINE", "line.endswith", "prog.match", "list.append", "re.compile", "line.find", "sys.stderr", "slashes.append", "bad.append", "sys.argv", "sys.intern", "warnings.keys"]}, "fixheader.py": {"libraries": ["sys"], "function_names": ["main", "process"], "function_calls": ["process", "str", "main", "open", "ord", "print"], "class_names": [], "class_method_calls": ["f.write", "sys.stderr", "c.isalnum", "sys.argv", "c.upper", "f.read"]}, "fixnotice.py": {"libraries": ["sys", "os", "getopt"], "function_names": ["usage", "main", "process"], "function_calls": ["usage", "len", "process", "main", "open", "print", "globals"], "class_names": [], "class_method_calls": ["f.write", "sys.exit", "data.find", "os.rename", "getopt.getopt", "sys.argv", "fp.read", "f.read", "getopt.error"]}, "fixps.py": {"libraries": ["sys", "re"], "function_names": ["main"], "function_calls": ["repr", "main", "open", "print"], "class_names": [], "class_method_calls": ["f.write", "re.sub", "f.readline", "sys.argv", "re.match", "f.read"]}, "generate_opcode_h.py": {"libraries": ["sys", "tokenize"], "function_names": ["main"], "function_calls": ["main", "open", "hasattr", "exec", "print"], "class_names": [], "class_method_calls": ["fobj.write", "fp.read", "sys.argv", "tokenize.open"]}, "generate_symbol_py.py": {"libraries": ["sys", "re"], "function_names": ["main"], "function_calls": ["sorted", "str", "int", "main", "open"], "class_names": [], "class_method_calls": ["prog.match", "re.IGNORECASE", "lines.append", "fp.write", "re.compile", "tokens.keys", "sys.exit", "sys.stderr", "format.index", "fp.read", "sys.argv", "match.group"]}, "generate_token.py": {"libraries": ["sys"], "function_names": ["generate_chars_to_token", "make_rst", "load_tokens", "make_py", "make_c", "main", "update_file", "make_h"], "function_calls": ["write", "isinstance", "len", "sorted", "eval", "generate_chars_to_token", "globals", "make", "main", "open", "print", "enumerate", "update_file", "load_tokens"], "class_names": [], "class_method_calls": ["names.append", "defines.append", "chars_to_token.setdefault", "result.append", "line.strip", "fobj.write", "line.find", "tok_names.append", "fobj.read", "constants.append", "sys.argv", "string_to_tok.items", "constants.insert", "line.split", "m.setdefault", "token_types.append"]}, "get-remote-certificate.py": {"libraries": ["re", "sys", "subprocess.Popen", "tempfile", "subprocess.PIPE", "subprocess.DEVNULL", "subprocess.STDOUT", "os"], "function_names": ["fetch_server_certificate", "subproc", "strip_to_x509_cert"], "function_calls": ["ValueError", "len", "fetch_server_certificate", "strip_to_x509_cert", "subproc", "Popen", "int", "open", "RuntimeError"], "class_names": [], "class_method_calls": ["fp.write", "proc.stdout", "m.group", "proc.wait", "sys.exit", "re.DOTALL", "tempfile.mktemp", "sys.stderr", "fp.read", "arg.split", "sys.argv", "re.MULTILINE", "os.unlink", "sys.stdout", "re.search"]}, "google.py": {"libraries": ["sys", "webbrowser", "urllib.parse"], "function_names": ["quote", "main"], "function_calls": ["quote", "main"], "class_names": [], "class_method_calls": ["urllib.parse", "sys.argv", "webbrowser.open"]}, "gprof2html.py": {"libraries": ["re", "sys", "html", "os", "webbrowser"], "function_names": ["main", "add_escapes", "gprof2html"], "function_calls": ["gprof2html", "add_escapes", "main", "open"], "class_names": [], "class_method_calls": ["re.findall", "html.escape", "os.path", "output.write", "sys.argv", "line.startswith", "re.match", "m.group", "webbrowser.open"]}, "h2py.py": {"libraries": ["sys", "os", "re", "getopt"], "function_names": ["pytify", "main", "process"], "function_calls": ["len", "process", "str", "slice", "int", "main", "open", "pytify", "exec"], "class_names": [], "class_method_calls": ["ignores.append", "sys.stdout", "p_define.match", "getopt.getopt", "outfp.write", "p.sub", "searchdirs.insert", "m.span", "body.strip", "p_char.sub", "match.end", "sys.stdin", "os.environ", "p_include.match", "sys.maxsize", "p_hex.search", "os.path", "re.compile", "sys.stderr", "outfile.rfind", "outfile.upper", "match.regs", "sys.argv", "fp.readline", "match.group", "p_macro.match"]}, "highlight.py": {"libraries": ["keyword", "re", "os.path", "textwrap", "argparse", "tokenize", "sys", "html", "functools", "webbrowser", "builtins"], "function_names": ["html_highlight", "combine_range", "analyze_python", "ansi_highlight", "build_html_page", "latex_highlight", "is_builtin", "alltt_escape", "raw_highlight"], "function_calls": ["combine_range", "raw_highlight", "analyze_python", "build_html_page", "ansi_highlight", "iter", "latex_highlight", "is_builtin", "dict", "hasattr", "open", "alltt_escape", "html_highlight"], "class_names": [], "class_method_calls": ["argparse.ArgumentParser", "result.append", "source.splitlines", "html.format", "parser.error", "sys.stdout", "f.write", "args.complete", "tokenize.COMMENT", "functools.partial", "mo.group", "keyword.iskeyword", "parser.add_argument", "args.raw", "f.read", "args.browser", "css.items", "args.latex", "tokenize.INDENT", "lines.append", "re.sub", "tokenize.OP", "tokenize.generate_tokens", "tokenize.NAME", "webbrowser.open", "textwrap.dedent", "os.path", "argparse.RawDescriptionHelpFormatter", "commands.items", "tokenize.STRING", "args.sourcefile", "colors.get", "args.section", "parser.parse_args", "html_module.escape"]}, "ifdef.py": {"libraries": ["sys", "getopt"], "function_names": ["main", "process"], "function_calls": ["len", "main", "process", "open"], "class_names": [], "class_method_calls": ["stack.append", "defs.append", "line.strip", "undefs.append", "sys.stderr", "getopt.getopt", "fpo.write", "sys.argv", "tmp.split", "sys.stdin", "fpi.readline", "sys.stdout"]}, "import_diagnostics.py": {"libraries": ["sys", "argparse", "pprint.pprint"], "function_names": ["_make_parser", "main", "_add_dump_args", "_dump_state"], "function_calls": ["pprint", "_make_parser", "add_args", "getattr", "main", "print"], "class_names": [], "class_method_calls": ["cmd.set_defaults", "argparse.ArgumentParser", "sys.exit", "sys.version", "args.attributes", "sys.argv", "cmd.add_argument", "parser.add_subparsers", "parser.parse_args", "args.command", "sub.add_parser"]}, "lfcr.py": {"libraries": ["sys", "os", "re"], "function_names": ["main"], "function_calls": ["main", "open", "print"], "class_names": [], "class_method_calls": ["f.write", "os.path", "re.sub", "sys.argv", "f.read"]}, "linktree.py": {"libraries": ["sys", "os"], "function_names": ["linknames", "main"], "function_calls": ["len", "linknames", "main", "print"], "class_names": [], "class_method_calls": ["os.mkdir", "os.path", "os.pardir", "sys.exit", "os.curdir", "os.listdir", "sys.argv", "os.symlink"]}, "lll.py": {"libraries": ["sys", "os"], "function_names": ["main", "lll"], "function_calls": ["len", "main", "lll", "print"], "class_names": [], "class_method_calls": ["os.path", "os.pardir", "os.curdir", "os.listdir", "os.readlink", "sys.argv"]}, "mailerdaemon.py": {"libraries": ["re", "sys", "email.message", "os", "calendar"], "function_names": ["is_warning", "get_errors", "__init__", "main", "sort_numeric", "parsedir", "emparse_list"], "function_calls": ["list", "len", "tuple", "int", "type", "main", "filter", "open", "parsedir", "range", "p", "print"], "class_names": ["ErrorMessage", "Unparseable"], "class_method_calls": ["m.getaddr", "errordict.keys", "calendar.month_abbr", "re.escape", "os.rename", "fp.close", "m.getdate", "os.chdir", "list.sort", "re.IGNORECASE", "files.sort", "res.end", "exp.search", "self.sub", "self.fp", "pat.match", "emails.append", "emparse_list_from.search", "sub.lower", "m.get_errors", "regexp.split", "sub.startswith", "res.start", "fp.read", "re.MULTILINE", "regexp.search", "m.is_warning", "list.append", "self.rewindbody", "res.group", "re.compile", "os.listdir", "errors.append", "email.strip", "sys.argv", "email.message", "xl.append", "email.message_from_file", "self.get"]}, "make_ctype.py": {"libraries": [], "function_names": [], "function_calls": ["method", "chr", "getattr", "print", "ord", "range", "repr"], "class_names": [], "class_method_calls": ["c.isupper", "flags.append", "name.lower", "c.lower", "c.islower", "c.isdigit", "c.upper", "values.append"]}, "md5sum.py": {"libraries": ["io", "getopt", "hashlib.md5", "sys", "os"], "function_names": ["printsum", "printsumfp", "main", "sum"], "function_calls": ["isinstance", "len", "fnfilter", "printsum", "md5", "int", "main", "open", "sum", "printsumfp"], "class_names": [], "class_method_calls": ["out.write", "os.path", "sys.exit", "sys.stderr", "m.hexdigest", "m.update", "getopt.getopt", "fp.read", "sys.argv", "io.IOBase", "fp.encoding", "getopt.error", "sys.stdout", "sys.stdin", "data.encode"]}, "mkreal.py": {"libraries": ["sys", "os", "stat.*"], "function_names": ["mkrealfile", "mkrealdir", "main"], "function_calls": ["join", "mkrealdir", "main", "S_IMODE", "open", "mkrealfile", "print"], "class_names": [], "class_method_calls": ["os.mkdir", "os.path", "f_out.write", "os.pardir", "sys.stderr", "sys.exit", "os.curdir", "os.chmod", "os.readlink", "os.listdir", "os.stat", "sys.argv", "f_in.read", "os.symlink", "os.unlink", "sys.stdout"]}, "ndiff.py": {"libraries": ["getopt", "pstats", "sys", "profile", "difflib"], "function_names": ["fopen", "fcompare", "main", "restore", "fail"], "function_calls": ["len", "out", "fopen", "str", "fcompare", "main", "restore", "open", "fail", "print"], "class_names": [], "class_method_calls": ["difflib.ndiff", "sys.stderr", "f2.readlines", "stats.strip_dirs", "pstats.Stats", "difflib.restore", "args.remove", "getopt.getopt", "profile.run", "sys.argv", "f1.close", "f2.close", "sys.stdin", "getopt.error", "sys.stdout", "f1.readlines"]}, "nm2def.py": {"libraries": ["sys", "os"], "function_names": ["main", "filter_Python", "export_list", "symbols"], "function_calls": ["list", "len", "symbols", "export_list", "main", "filter_Python"], "class_names": [], "class_method_calls": ["os.popen", "f.write", "symbols.keys", "data.sort", "code.sort", "sys.version_info", "line.split", "data.append", "code.append", "pipe.readlines", "sys.stdout", "s.strip", "symbols.items"]}, "objgraph.py": {"libraries": ["sys", "os", "re", "getopt"], "function_names": ["printundef", "printcaller", "printcallee", "store", "warndups", "main", "flat", "readinput"], "function_calls": ["list", "len", "printundef", "sorted", "printcaller", "printcallee", "store", "warndups", "main", "open", "flat", "readinput", "print"], "class_names": [], "class_method_calls": ["file2def.keys", "matcher.search", "re.compile", "os.path", "sys.stderr", "elist.sort", "file2undef.keys", "sys.exit", "undefs.keys", "getopt.getopt", "fp.readline", "matcher.regs", "sys.argv", "sys.stdin", "getopt.error", "def2file.keys", "sys.stdout", "callers.sort"]}, "parse_html5_entities.py": {"libraries": ["json", "sys", "html.entities.html5", "os", "urllib.request.urlopen"], "function_names": ["get_json", "write_items", "create_dict", "compare_dicts"], "function_calls": ["compare_dicts", "len", "sorted", "get_json", "write_items", "set", "urlopen", "create_dict", "open", "print"], "class_names": [], "class_method_calls": ["entities.items", "json.loads", "os.remove", "f2.write", "str.lower", "name.lstrip", "os.rename", "changed.add", "sys.argv", "line.startswith", "f.read", "new.keys", "old.keys", "entities.keys", "sys.stdout"]}, "parseentities.py": {"libraries": ["sys", "re"], "function_names": ["writefile", "parse"], "function_calls": ["len", "sorted", "parse", "int", "open", "writefile", "repr"], "class_names": [], "class_method_calls": ["f.write", "comment.split", "re.compile", "defs.items", "m.end", "m.groups", "sys.argv", "entityRE.search", "infile.read", "sys.stdin", "sys.stdout"]}, "patchcheck.py": {"libraries": ["re", "os.path", "untabify", "argparse", "shutil", "sys", "reindent", "subprocess", "sysconfig"], "function_names": ["changed_files", "decorated_fxn", "normalize_docs_whitespace", "reported_news", "normalize_c_whitespace", "call_fxn", "get_base_branch", "regenerated_pyconfig_h_in", "credit_given", "docs_modified", "n_files_str", "status", "get_git_upstream_remote", "report_modified_files", "get_git_branch", "main", "regenerated_configure", "travis", "normalize_whitespace"], "function_calls": ["info", "changed_files", "normalize_docs_whitespace", "reported_news", "normalize_c_whitespace", "fxn", "get_base_branch", "regenerated_pyconfig_h_in", "credit_given", "open", "docs_modified", "set", "bool", "len", "any", "n_files_str", "status", "get_git_upstream_remote", "get_git_branch", "main", "regenerated_configure", "travis", "normalize_whitespace", "print"], "class_names": [], "class_method_calls": ["argparse.ArgumentParser", "untabify.process", "f.writelines", "filename.split", "fixed.append", "sys.stdout", "filenames.append", "shutil.copyfile", "st.stdout", "sys.exit", "path.endswith", "subprocess.Popen", "parser.add_argument", "filename.startswith", "f.read", "fn.startswith", "lines.append", "cmd.split", "fixed.extend", "line.decode", "subprocess.PIPE", "filenames2.append", "subprocess.check_output", "args.travis", "line.split", "os.path", "f.readlines", "re.compile", "ws_re.sub", "status.intersection", "version.releaselevel", "sys.version_info", "subprocess.DEVNULL", "reindent.makebackup", "sysconfig.get_config_var", "parser.parse_args", "subprocess.CalledProcessError", "p.startswith", "fn.endswith", "reindent.check"]}, "pathfix.py": {"libraries": ["re", "getopt", "stat.*", "sys", "os"], "function_names": ["parse_shebang", "ispython", "recursedown", "fix", "main", "fixline", "populate_flags"], "function_calls": ["parse_shebang", "rep", "ispython", "recursedown", "fix", "str", "main", "open", "err", "dbg", "fixline", "populate_flags"], "class_names": [], "class_method_calls": ["subdirs.append", "shebangline.find", "os.rename", "sys.stdout", "os.utime", "os.pardir", "sys.exit", "statbuf.st_mtime", "f.readline", "getopt.getopt", "f.read", "os.remove", "statbuf.st_atime", "shebangline.rstrip", "a.encode", "os.curdir", "getopt.error", "names.sort", "os.path", "sys.stderr", "os.listdir", "os.chmod", "sys.argv", "os.stat", "line.startswith", "g.write", "new_interpreter.startswith", "name.endswith"]}, "pdeps.py": {"libraries": ["sys", "os", "re"], "function_names": ["process", "printresults", "store", "closure", "inverse", "main"], "function_calls": ["list", "len", "process", "sorted", "max", "printresults", "closure", "store", "inverse", "main", "open", "print"], "class_names": [], "class_method_calls": ["list.append", "os.path", "table.keys", "re.compile", "m_found.regs", "sys.exit", "m_import.match", "m_from.match", "sys.argv", "fp.readline", "word.strip", "mod.ljust"]}, "pep384_macrocheck.py": {"libraries": ["sys", "os", "re"], "function_names": ["parse_file", "parse_headerfiles", "limited_gen", "ifdef_level_gen", "report", "dprint"], "function_calls": ["ValueError", "TypeError", "parse_file", "str", "parse_headerfiles", "next", "limited_gen", "ifdef_level_gen", "enumerate", "open", "report", "dprint", "print"], "class_names": [], "class_method_calls": ["line.endswith", "line.rstrip", "f.readlines", "os.path", "python_h.readline", "sys.stderr", "re.DOTALL", "name.startswith", "limited.append", "found.group", "sys.argv", "re.match", "ifdef_level.send", "limited.pop", "limited.send"]}, "pickle2db.py": {"libraries": ["getopt", "dbm.ndbm", "sys", "pickle", "bsddb", "dbm.gnu"], "function_names": ["usage", "main"], "function_calls": ["list", "usage", "len", "main", "open", "dbopen", "globals"], "class_names": [], "class_method_calls": ["bsddb.error", "gdbm.open", "bsddb.rnopen", "db.close", "pickle.load", "sys.exit", "sys.stderr", "pfile.close", "bsddb.hashopen", "db.keys", "bsddb.btopen", "getopt.getopt", "sys.argv", "dbm.open", "sys.stdin", "getopt.error", "anydbm.open"]}, "pindent.py": {"libraries": ["io", "re", "os.path", "getopt", "sys", "os"], "function_names": ["test", "reformat", "error_both", "delete_string", "delete_file", "reformat_file", "complete_string", "reformat_filter", "delete", "__init__", "delete_filter", "complete_filter", "complete", "reformat_string", "complete_file", "make_backup", "write", "error", "putline", "readline", "getline"], "function_calls": ["divmod", "len", "PythonIndenter", "test", "complete_string", "int", "error_both", "print", "reformat_string", "open", "delete_string", "vars", "eval", "make_backup", "action"], "class_names": ["PythonIndenter"], "class_method_calls": ["self.expandtabs", "todo.append", "pi.delete", "self.kwprog", "indentws.expandtabs", "self.fpo", "os.rename", "self.getline", "stack.pop", "sys.stdout", "self.lineno", "f.write", "output.getvalue", "sys.exit", "self.fpi", "getopt.getopt", "io.StringIO", "self.error", "self.wsprog", "f.read", "os.remove", "self.write", "stack.append", "self.readline", "self._write", "fpo.write", "line.expandtabs", "sys.stdin", "getopt.error", "self.tabsize", "self.putline", "os.path", "self.indentsize", "re.compile", "sys.stderr", "currentws.expandtabs", "self.endprog", "sys.argv", "pi.complete", "m.group", "pi.reformat"]}, "ptags.py": {"libraries": ["sys", "os", "re"], "function_names": ["main", "treat_file"], "function_calls": ["main", "treat_file", "open"], "class_names": [], "class_method_calls": ["matcher.match", "fp.write", "os.path", "re.compile", "sys.stderr", "tags.sort", "sys.argv", "fp.readline", "m.group", "tags.append"]}, "pysource.py": {"libraries": ["os", "re"], "function_names": ["walk_python_files", "can_be_compiled", "has_python_ext", "looks_like_python", "_open", "print_debug"], "function_calls": ["walk_python_files", "compile", "is_python", "open", "print", "_open", "print_debug"], "class_names": [], "class_method_calls": ["os.walk", "binary_re.search", "os.path", "re.compile", "infile.readline", "fullpath.endswith", "os.stat", "dirnames.remove", "infile.read"]}, "reindent-rst.py": {"libraries": ["sys", "patchcheck"], "function_names": ["main"], "function_calls": ["main"], "class_names": [], "class_method_calls": ["sys.exit", "sys.argv", "patchcheck.normalize_docs_whitespace"]}, "reindent.py": {"libraries": ["getopt", "shutil", "tokenize", "sys", "os"], "function_names": ["write", "check", "usage", "run", "errprint", "__init__", "main", "getlspace", "tokeneater", "getline", "_rstrip"], "function_calls": ["check", "isinstance", "len", "usage", "min", "str", "errprint", "Reindenter", "main", "getlspace", "open", "dict", "_rstrip", "range", "print"], "class_names": ["Reindenter"], "class_method_calls": ["r.write", "after.append", "lines.pop", "tokenize.detect_encoding", "r.run", "a.upper", "self.getline", "f.newlines", "tokenize.DEDENT", "f.writelines", "sys.stdout", "self.level", "shutil.copyfile", "self.stats", "f.readline", "have2want.get", "self.after", "self.tokeneater", "getopt.getopt", "self.index", "tokenize.INDENT", "self.lines", "self.raw", "r.newlines", "tokenize.generate_tokens", "name.lower", "tokenize.NL", "self.newlines", "sys.stdin", "getopt.error", "stats.append", "after.extend", "tokenize.NEWLINE", "self.find_stmt", "f.readlines", "os.path", "sys.stderr", "os.listdir", "sys.argv", "tokenize.COMMENT"]}, "rgrep.py": {"libraries": ["sys", "re", "getopt"], "function_names": ["usage", "main"], "function_calls": ["len", "usage", "min", "reversed", "main", "open", "print"], "class_names": [], "class_method_calls": ["f.seek", "re.error", "re.IGNORECASE", "re.compile", "sys.stderr", "sys.exit", "f.tell", "prog.search", "getopt.getopt", "sys.argv", "f.read", "buffer.split", "sys.stdout"]}, "run_tests.py": {"libraries": ["sys", "test.support", "os", "subprocess.call"], "function_names": ["is_multiprocess_flag", "main", "is_resource_use_flag"], "function_calls": ["is_multiprocess_flag", "any", "is_resource_use_flag", "call", "main", "print"], "class_names": [], "class_method_calls": ["sys.platform", "arg.startswith", "sys.exit", "sys.executable", "args.append", "args.extend", "sys.argv", "os.execv", "test.support"]}, "serve.py": {"libraries": ["wsgiref.simple_server", "mimetypes", "sys", "os", "wsgiref.util"], "function_names": ["app"], "function_calls": ["len", "respond", "int", "open", "print"], "class_names": [], "class_method_calls": ["os.path", "util.FileWrapper", "httpd.server_close", "simple_server.make_server", "fn.split", "sys.argv", "mimetypes.guess_type", "httpd.serve_forever", "os.getcwd"]}, "smelly.py": {"libraries": ["sys", "subprocess", "sysconfig"], "function_names": ["get_smelly_symbols", "main", "get_exported_symbols"], "function_calls": ["len", "get_exported_symbols", "sorted", "get_smelly_symbols", "set", "main", "Exception", "print"], "class_names": [], "class_method_calls": ["sys.stdout", "symbols.sort", "sys.platform", "proc.stdout", "sys.exit", "subprocess.run", "symtype.islower", "stdout.splitlines", "subprocess.PIPE", "symbols.append", "ignored_symtypes.add", "symbol.startswith", "sysconfig.get_config_var", "line.split", "proc.returncode"]}, "suff.py": {"libraries": ["sys"], "function_names": ["getsuffix", "main"], "function_calls": ["len", "sorted", "getsuffix", "main", "repr", "print"], "class_names": [], "class_method_calls": ["filename.rpartition", "sys.argv", "suffixes.setdefault", "suffixes.items"]}, "texi2html.py": {"libraries": ["sys", "os", "re", "string"], "function_names": ["close_dfn", "close_copyright", "open_strong", "open_questiondown", "close_strong", "bgn_quotation", "do_clear", "close_w", "do_subsubsection", "listcontents", "dumpindex", "open_dfn", "do_appendixsubsubsec", "end_titlepage", "bgn_deftp", "bgn_ifclear", "open_footnote", "close_exclamdown", "bgn_ifinfo", "bgn_deftypevr", "do_appendixsubsec", "do_defvrx", "getnode", "bgn_defvar", "do_deftpx", "__init__", "open_o", "open_url", "open_bullet", "do_defcvx", "bgn_menu", "report", "bgn_defivar", "end_example", "do_defunx", "open_dmn", "close_AE", "close_footnote", "index", "open_kbd", "close_small", "close_b", "open_pxref", "bgn_deffn", "close_AA", "close_oe", "close_xref", "heading", "open_small", "end_itemize", "close_error", "do_settitle", "close_ss", "end_ftable", "do_item", "open_oe", "bgn_flushleft", "open_OE", "open_aa", "findwordend", "open_file", "writefootnotes", "do_deftypefunx", "close_minus", "increment", "do_defopx", "open_key", "end_menu", "open_image", "open_AE", "end_ifclear", "open_ref", "close_image", "end_quotation", "close_samp", "open_value", "close_L", "bgn_defmac", "endmenu", "unknown_cmd", "close_l", "open_t", "makefile", "makeimage", "open_r", "close_emph", "do_page", "open_uref", "close_uref", "do_end", "popstack", "link", "open_email", "end_ignore", "close_pxref", "do_subsubheading", "open_b", "open_copyright", "beginmenu", "close_var", "bgn_tex", "open_AA", "do_center", "bgn_defcv", "process", "do_hline", "close_code", "end_deffn", "do_deffnx", "close_kbd", "do_set", "bgn_defvr", "parserest", "close_url", "bgn_multitable", "prindex", "bgn_cartouche", "do_defspecx", "open_links", "open_cite", "open_error", "open_point", "open_O", "close_dots", "do_deftypevarx", "end_flushright", "open_dots", "open_print", "close_i", "do_top", "unknown_handle", "close_cite", "bgn_deftypefn", "makeref", "close_value", "expand", "command", "end_ifinfo", "bgn_defopt", "bgn_table", "close_email", "setdirname", "do_kindex", "do_vindex", "end_group", "close_O", "open_exclamdown", "open_inforef", "test", "do_subheading", "dumpmenu", "do_node", "do_defivarx", "close_", "end_cartouche", "open_w", "end_table", "do_exdent", "open_var", "endnode", "bgn_defspec", "do_pindex", "do_contents", "do_synindex", "menuitem", "bgn_deftypefun", "close_result", "close_ref", "do_unnumberedsubsubsec", "do_appendix", "parse", "do_comment", "unknown_close", "bgn_defun", "codeexpand", "bgn_iftex", "dumpnode", "do_deftypefnx", "inmenu", "open_code", "close_bullet", "resetindex", "open_xref", "close_r", "do_tindex", "close_expansion", "makevar", "do_findex", "close_ae", "open_equiv", "dumpnodes", "open_l", "do_defoptx", "do_sp", "addimage", "close_o", "close_equiv", "open_", "open_emph", "end_iftex", "bgn_ignore", "close_file", "close_OE", "handle_noindent", "do_subsection", "startsaving", "close_key", "do_parskip", "do_defmethodx", "do_unnumberedsubsec", "handle_tab", "do_need", "close_dmn", "close_point", "open_sc", "bgn_example", "close_print", "splitwords", "bgn_group", "bgn_defop", "close_inforef", "close_links", "do_bye", "do_chapter", "do_section", "open_samp", "bgn_ifset", "end_ifset", "open_ss", "do_defvarx", "handle_refill", "bgn_titlepage", "do_defmacx", "bgn_defmethod", "bgn_ftable", "end_enumerate", "addnode", "unknown_end", "dumpfiles", "do_printindex", "unknown_open", "handle_copyright", "do_appendixsec", "close_t", "do_shorttitlepage", "do_chapheading", "bgn_flushright", "output_links", "do_unnumbered", "flush", "end_flushleft", "bgn_vtable", "end_tex", "finalize", "do_unnumberedsec", "do_deftypevrx", "do_cindex", "end_multitable", "sethtmlhelp", "open_TeX", "close_questiondown", "open_ae", "open_i", "bgn_enumerate", "bgn_itemize", "do_include", "open_result", "user_index", "close_aa", "write", "open_minus", "fixfunnychars", "open_expansion", "bgn_deftypevar", "do_heading", "collectsavings", "close_sc", "do_shortcontents", "end_vtable", "close_TeX", "handle_columnfractions", "open_L", "do_majorheading", "setincludedir"], "function_calls": ["test", "sorted", "getattr", "splitwords", "SyntaxError", "makefile", "RuntimeError", "repr", "HTMLHelp", "TexinfoParser", "open", "TexinfoParserHTML3", "method", "func", "makevar", "len", "fixfunnychars", "findwordend", "increment", "print"], "class_names": ["HTMLHelp", "HTMLNode", "HTML3Node", "TexinfoParser", "TexinfoParserHTML3"], "class_method_calls": ["parser.print_headers", "self.dumpindex", "line.strip", "parser.debugging", "self.prev", "co.span", "sys.stdout", "self.unknown_end", "self.listcontents", "self.open_links", "mo.end", "self.nodeindex", "self.stackinfo", "self.indextitle", "self.prindex", "self.bgn_deffn", "self.FN_HEADER", "self.footnotes", "self.epilogue", "self.write", "self.savetext", "self.itemindex", "self.values", "self.writefootnotes", "nodename.lower", "self.nodelinks", "self.topnode", "self.prologue", "prevlevels.append", "self.projectfile", "self.next", "string.ascii_letters", "parser.parse", "blprog.match", "self.numbering", "s.strip", "cmd.ljust", "self.menudict", "self.skip", "sys.argv", "self.done", "self.helpbase", "self.do_deftypefnx", "index1.sort", "sequence.index", "string.ascii_uppercase", "self.debugging", "self.codeexpand", "parser.setdirname", "self.do_deffnx", "args.split", "self.do_deftpx", "self.up", "self.DOCTYPE", "self.inmenu", "self.nodenames", "text.split", "self.includedepth", "self.link", "self.whichindex", "self.lines", "self.itemnumber", "self.close_links", "self.htmlhelp", "self.nodelist", "self.nodestack", "self.do_defopx", "self.topname", "self.heading", "os.path", "self.cont", "self.makeimage", "self.nodename", "self.noncodeindices", "self.FN_TARGET_PATTERN", "key.lower", "cmprog.match", "self.parserest", "parser.cont", "mo.span", "self.bgn_defop", "words.append", "string.digits", "self.popstack", "self.dirname", "self.do_deftypevrx", "fp.write", "self.title", "self.expand", "self.filenames", "menu.append", "self.output_links", "parser.setincludedir", "self.nodelineno", "self.itemarg", "self.index", "self.indexlist", "self.savestack", "self.Node", "self.do_defvrx", "stack.append", "self.dumped", "miprog.match", "self.current", "string.ascii_lowercase", "self.text", "self.print_headers", "self.links", "self.bgn_defvr", "self.unknown_cmd", "self.contentfile", "mo.start", "re.compile", "self.bgn_defcv", "self.process", "index1.append", "self.nodefp", "self.indexfile", "self.unknown_open", "self.endnode", "self.stack", "self.makeref", "self.dumpmenu", "self.nofill", "fwprog.search", "self.unknown", "self.dumpnode", "self.bgn_table", "self.command", "self.node", "parser.report", "self.end_table", "spprog.search", "junkprog.match", "self.bgn_deftypevr", "self.name", "self.unknown_handle", "sys.exit", "htmlhelp.finalize", "self.FN_SOURCE_PATTERN", "self.COPYRIGHT_SYMBOL", "self.do_defcvx", "parts.append", "accu.append", "self.contents", "self.getnode", "self.includedir", "parser.sethtmlhelp", "nodename.strip", "self.dumpfiles", "self.unknown_close", "self.dumpnodes", "self.bgn_deftypefn", "self.startsaving", "self.collectsavings", "fp.readline", "args.append", "self.codeprog", "self.resetindex"]}, "untabify.py": {"libraries": ["sys", "os", "getopt", "tokenize"], "function_names": ["main", "process"], "function_calls": ["process", "int", "main", "open", "print"], "class_names": [], "class_method_calls": ["f.write", "text.expandtabs", "f.encoding", "getopt.getopt", "os.rename", "sys.argv", "tokenize.open", "f.read", "getopt.error", "os.unlink"]}, "update_file.py": {"libraries": ["sys", "os"], "function_names": ["main"], "function_calls": ["len", "main", "open", "print"], "class_names": [], "class_method_calls": ["sys.exit", "sys.argv", "os.replace", "f.read", "os.unlink"]}, "var_access_benchmark.py": {"libraries": ["timeit.Timer", "collections.deque", "collections.namedtuple"], "function_names": ["write_dict", "read_boundmethod", "write_instancevar", "write_classvar", "read_list", "list_append_pop", "write_local", "read_builtin", "read_dict", "write_list", "read_instancevar_slots", "deque_append_pop", "write_deque", "read_global", "__init__", "loop_overhead", "read_strdict", "read_instancevar", "make_nonlocal_writer", "write_instancevar_slots", "read_namedtuple", "write_strdict", "write_global", "read_deque", "read_classvar_from_class", "inner", "m", "read_classvar_from_instance", "deque_append_popleft", "read_local", "make_nonlocal_reader"], "function_calls": ["isinstance", "len", "min", "make_nonlocal_writer", "Timer", "B", "C", "ap", "A", "namedtuple", "deque", "make_nonlocal_reader", "D", "pop", "print"], "class_names": ["A", "B", "C"], "class_method_calls": ["inner.__name__", "a.x", "A.x", "a.m", "self.x", "a.popleft", "a.pop", "a.append", "f.__name__"]}, "verify_ensurepip_wheels.py": {"libraries": ["json", "re", "pathlib.Path", "hashlib", "os", "urllib.request.urlopen"], "function_names": ["print_error", "verify_wheel", "print_notice"], "function_calls": ["list", "len", "print_notice", "SystemExit", "urlopen", "print_error", "Path", "verify_wheel", "print"], "class_names": [], "class_method_calls": ["json.loads", "os.getenv", "package_path.read_bytes", "hashlib.sha256", "package_path.name", "package_name.upper", "WHEEL_DIR.glob", "re.search"]}, "which.py": {"libraries": ["sys", "os", "stat.*"], "function_names": ["msg", "main"], "function_calls": ["msg", "main", "S_IMODE", "repr", "S_ISREG", "print"], "class_names": [], "class_method_calls": ["sys.path", "os.path", "os.pathsep", "sys.exit", "sys.stderr", "os.system", "sys.argv", "os.stat", "os.environ"]}, "win_add2path.py": {"libraries": ["sys", "os", "site", "winreg"], "function_names": ["main", "modify"], "function_calls": ["len", "main", "modify", "hasattr", "print"], "class_names": [], "class_method_calls": ["winreg.HKEY_CURRENT_USER", "os.path", "winreg.REG_EXPAND_SZ", "os.pathsep", "winreg.QueryValueEx", "sys.executable", "site.USER_SITE", "winreg.CreateKey", "paths.append", "winreg.ExpandEnvironmentStrings", "os.environ", "winreg.SetValueEx"]}, "make_ssl_data.py": {"libraries": ["re", "operator", "datetime", "argparse", "sys", "os"], "function_names": ["gen_library_codes", "parse_err_h", "gen_error_codes", "parse_extra_reasons", "parse_openssl_error_text", "main", "_file_search"], "function_calls": ["gen_library_codes", "parse_err_h", "gen_error_codes", "sorted", "parse_extra_reasons", "int", "parse_openssl_error_text", "main", "open", "_file_search"], "class_names": [], "class_method_calls": ["match.groups", "args.reasons", "argparse.ArgumentParser", "args.srcdir", "datetime.datetime", "pat.search", "args.output", "lines.extend", "parser.error", "sys.stdout", "args.lib2errnum", "parser.add_argument", "args.errtxt", "args.errcodes", "lines.append", "args.err_h", "reasons.extend", "operator.itemgetter", "os.path", "re.compile", "argparse.FileType", "parser.parse_args"]}, "multissltests.py": {"libraries": ["urllib2.urlopen", "urllib2.HTTPError", "re", "string", "__future__.print_function", "datetime.datetime", "argparse", "shutil", "sys", "urllib.request.urlopen", "subprocess", "urllib.error.HTTPError", "os", "tarfile", "logging"], "function_names": ["pyssl_version", "openssl_version", "__eq__", "short_version", "_subprocess_output", "configure_make", "_post_install", "install", "__init__", "has_src", "run_python_tests", "has_openssl", "recompile_pymods", "__str__", "_make_install", "lib_dir", "_subprocess_call", "_build_src", "include_dir", "check_imports", "openssl_cli", "check_pyssl", "_download_src", "_unpack_src", "__hash__", "main", "_post_install_300"], "function_calls": ["ValueError", "list", "configure_make", "BuildOpenSSL", "isinstance", "len", "str", "tuple", "BuildLibreSSL", "urlopen", "int", "main", "hash", "open", "print"], "class_names": ["BuildOpenSSL", "AbstractBuilder", "BuildLibreSSL"], "class_method_calls": ["member.name", "self._post_install_300", "sys.executable", "log.exception", "self.include_dir", "self._make_install", "self.src_dir", "parser.add_argument", "filename.startswith", "build.run_python_tests", "shutil.rmtree", "self._unpack_src", "datetime.now", "sys.stderr", "sys.version", "self._download_src", "self._post_install", "url_template.format", "self.version", "os.makedirs", "self.pyssl_version", "mo.groups", "self.src_file", "args.tests", "re.search", "build.check_pyssl", "build.recompile_pymods", "self._subprocess_call", "tf.getmembers", "self.install_target", "logging.INFO", "out.strip", "args.network", "cmd.extend", "self.check_imports", "tf.extractall", "self.has_src", "os.path", "self.build_dir", "sys.version_info", "parser.parse_args", "argparse.ArgumentParser", "self.openssl_version", "self.install_dir", "self.has_openssl", "self.module_files", "args.disable_ancient", "logging.basicConfig", "f.write", "os.utime", "self.args", "log.debug", "subprocess.check_call", "args.steps", "args.openssl", "log.error", "other.version", "self.module_libs", "args.system", "self.openssl_cli", "os.environ", "self._build_src", "logging.DEBUG", "os.walk", "self.library", "log.warning", "members.remove", "self.short_version", "build.install", "parser.error", "OPENSSL_FIPS_CNF.format", "sys.exit", "logging.getLogger", "self.src_template", "log.info", "builds.append", "tarfile.open", "args.base_directory", "args.libressl", "self.system", "os.unlink", "self._subprocess_output", "subprocess.check_output", "req.read", "self.lib_dir", "self.url_templates", "other.library", "self.build_template", "args.debug"]}, "stringbench.py": {"libraries": ["re", "operator", "datetime", "random", "timeit", "sys", "optparse", "itertools"], "function_names": ["newlines_rsplit_2000", "startswith_multiple_not", "rpartition_test_no_match_two_character", "rpartition_test_slow_match_two_characters", "endswith_multiple", "newlines_splitlines_2000", "partition_test_slow_match_100_characters", "uses_re", "whitespace_partition", "endswith_single", "find_test_quick_match_two_characters", "split_multichar_sep_dna", "rfind_test_no_match_single_character", "lower_conversion_rare", "in_test_no_match_single_character", "rsplit_multichar_sep_small", "index_test_quick_match_two_characters", "tab_split_no_limit", "rindex_test_quick_match_two_characters", "replace_multiple_character_remove", "bench", "split_test_no_match_single_character", "blah", "replace_single_character_re", "rsplit_test_quick_match_single_character", "replace_single_character", "in_test_quick_match_two_characters", "partition_test_quick_match_two_characters", "in_test_quick_match_single_character", "join_100_words_single", "find_test_slow_match_100_characters_bis", "startswith_single", "_get_2000_lines", "main", "rsplit_multichar_sep_dna", "join_100_words_5", "rfind_test_quick_match_two_characters", "newlines_rsplit", "_make_2000_lines", "rfind_test_slow_match_100_characters_bis", "rindex_test_quick_match_single_character", "startswith_multiple", "rfind_test_quick_match_single_character", "newlines_split_2000", "whitespace_rsplit", "join_empty_single", "_get_format", "in_test_slow_match_100_characters", "whitespace_rpartition", "find_test_no_match_single_character", "upper_conversion_rare", "join_empty_5", "find_test_no_match_two_character_bis", "rfind_test_slow_match_two_characters_bis", "rpartition_test_slow_match_100_characters", "partition_test_slow_match_two_characters", "find_test_no_match_two_character", "_get_big_s", "terminal_newline_strip_left", "repeat_5_1000_times", "quick_replace_single_match", "index_test_quick_match_single_character", "rsplit_test_no_match_two_character", "whitespace_rsplit_1", "whitespace_split_huge", "replace_multiple_characters_dna", "join_alphabet_list_single", "partition_test_no_match_single_character", "rfind_test_slow_match_100_characters", "terminal_newline_rstrip", "newlines_splitlines", "rsplit_test_slow_match_two_characters", "terminal_newline_if_else", "join_alphabet_5", "re_test_slow_match_100_characters", "get_bytes_yielding_seq", "whitespace_split", "partition_test_no_match_two_character", "terminal_space_lstrip", "count_aact", "split_test_quick_match_single_character", "rfind_test_no_match_two_character", "endswith_multiple_not", "rsplit_test_no_match_single_character", "upper_conversion_dense", "rsplit_test_quick_match_two_characters", "index_test_slow_match_two_characters", "whitespace_split_1", "in_test_slow_match_two_characters", "index_test_slow_match_100_characters", "format_with_dict", "split_test_slow_match_100_characters", "find_test_slow_match_100_characters", "terminal_newline_lstrip", "newlines_split", "rpartition_test_quick_match_single_character", "repeat_single_10_times", "p", "in_test_no_match_two_character", "replace_single_character_big", "terminal_space_rstrip", "best", "find_test_slow_match_two_characters_bis", "rpartition_test_quick_match_two_characters", "terminal_newline_strip_both", "_get_dna", "lower_conversion_dense", "find_test_slow_match_two_characters", "split_test_quick_match_two_characters", "rindex_test_slow_match_two_characters", "concat_two_strings", "whitespace_rsplit_huge", "terminal_newline_strip_right", "repeat_single_1000_times", "rindex_test_slow_match_100_characters", "replace_single_character_big_re", "rpartition_test_no_match_single_character", "tab_rsplit_limit", "replace_multiple_character_big", "repeat_5_10_times", "_get_human_text", "rsplit_test_slow_match_100_characters", "rfind_test_no_match_two_character_bis", "quick_replace_multiple_match", "terminal_space_strip", "split_test_no_match_two_character", "split_test_slow_match_two_characters", "rfind_test_slow_match_two_characters", "tab_rsplit_no_limit", "find_test_quick_match_single_character", "join_alphabet_single", "tab_split_limit", "partition_test_quick_match_single_character", "count_newlines", "join_alphabet_list_five", "split_multichar_sep_small", "concat_many_strings", "_get_format_dict"], "function_calls": ["min", "search", "s1_rfind", "s1_index", "_make_2000_lines", "SystemExit", "get_bytes_yielding_seq", "s1_endswith", "s_strip", "s_partition", "s_lower", "seq_replace", "BenchTimer", "_get_format", "s_count", "s_rstrip", "str", "s_rpartition", "dict", "s1_split", "bytes_from_str", "s1_find", "STR", "range", "s1_startswith", "_get_human_text", "AssertionError", "s1_partition", "list", "s1_rpartition", "_get_big_s", "bench", "s_upper", "s1_rindex", "p", "s_replace", "s1_rsplit", "s_rsplit", "hasattr", "unicode_from_str", "pat_sub", "len", "map", "seq_count", "_get_2000_lines", "_get_dna", "main", "sep_join", "s_lstrip", "_get_format_dict", "s_split", "s_splitlines", "globals"], "class_names": ["BenchTimer", "UnsupportedType"], "class_method_calls": ["s1.find", "s1.rindex", "s.rsplit", "words.append", "seq.replace", "s1.split", "sep.join", "f.repeat_count", "pat.search", "datetime.datetime", "v.group", "s1.index", "s.replace", "itertools.groupby", "f.group", "times.append", "s1.partition", "pat.sub", "s1.rpartition", "sys.stdout", "s.rpartition", "f.comment", "r.randrange", "v.repeat_count", "options.bytes_only", "s.lstrip", "_dna.splitlines", "s.rstrip", "x.encode", "options.skip_re", "s1.rfind", "random.Random", "optparse.OptionParser", "timeit.Timer", "parser.add_option", "seq.count", "self.timeit", "s.upper", "s.count", "s1.endswith", "s1.rsplit", "r.randint", "operator.itemgetter", "s.lower", "_format_dict.items", "x.decode", "s.partition", "s.strip", "s.splitlines", "v.comment", "re.compile", "sys.version", "sys.version_info", "s.split", "f.is_bench", "options.unicode_only", "bench_functions.sort", "bench_functions.append", "f.uses_re", "parser.parse_args", "s1.startswith", "f.__name__"]}, "maintest.py": null, "runtests.py": {"libraries": ["unittest", "test_foo.FooTest", "sys", "distutils.util.copydir_run_2to3", "os"], "function_names": [], "function_calls": ["copydir_run_2to3"], "class_names": [], "class_method_calls": ["sys.version_info", "sys.path", "unittest.main", "os.path"]}, "test_foo.py": null, "zdump.py": {"libraries": ["datetime.datetime", "sys", "struct", "os", "array.array", "collections.namedtuple"], "function_names": ["fromfile", "__init__", "dump", "zonelist"], "function_calls": ["ValueError", "len", "range", "cls", "namedtuple", "zip", "open", "enumerate", "array", "print"], "class_names": ["TZInfo"], "class_method_calls": ["transitions.byteswap", "tzi.dump", "zones.append", "sys.byteorder", "self.ttis", "sys.stdout", "datetime.utcfromtimestamp", "type_indices.fromfile", "sys.exit", "TZInfo.zonelist", "transitions.fromfile", "filepath.startswith", "TZInfo.fromfile", "tti.tt_abbrind", "struct.unpack", "fileobj.seek", "ttinfo._make", "o.read", "self.transitions", "os.walk", "self.type_indices", "os.path", "prev_tti.tt_gmtoff", "self.abbrs", "sys.argv", "fileobj.read", "tti.tt_gmtoff", "ttis.append", "self.tzh"]}, "comparecodecs.py": {"libraries": ["sys"], "function_names": ["compare_codecs"], "function_calls": ["chr", "bytes", "compare_codecs", "range", "print"], "class_names": [], "class_method_calls": ["sys.maxunicode", "c.decode", "sys.argv", "u.encode"]}, "gencjkcodecs.py": {"libraries": ["sys", "os", "string"], "function_names": ["gencodecs"], "function_calls": ["gencodecs", "open"], "class_names": [], "class_method_calls": ["f.write", "os.path", "string.Template", "enc.upper", "codecs.items", "sys.argv", "enc.lower", "TEMPLATE.substitute"]}, "gencodec.py": {"libraries": ["re", "codecs", "sys", "os", "marshal"], "function_names": ["pymap", "parsecodes", "python_tabledef_code", "codegen", "python_mapdef_code", "hexrepr", "rewritepythondir", "convertdir", "marshalmap", "readmap"], "function_calls": ["sorted", "append", "codegen", "python_mapdef_code", "rewritepythondir", "marshalmap", "isinstance", "pymap", "parsecodes", "tuple", "open", "convertdir", "range", "list", "python_tabledef_code", "int", "len", "chr", "max", "hexrepr", "ord", "readmap", "print"], "class_names": [], "class_method_calls": ["l.append", "marshal.dump", "line.strip", "marshal.load", "codes.split", "f.write", "l.extend", "mapRE.match", "codecs.make_encoding_map", "map.items", "mapname.endswith", "name.lower", "m.groups", "name.split", "os.path", "f.readlines", "re.compile", "name.replace", "unmapped.remove", "identity.append", "os.listdir", "sys.argv", "encodingname.replace"]}, "genwincodec.py": {"libraries": ["platform", "ctypes.wintypes", "gencodec.codegen", "sys", "ctypes", "unicodedata"], "function_names": ["genwincodec", "genwinmap"], "function_calls": ["list", "codegen", "genwincodec", "genwinmap", "MultiByteToWideChar", "int", "bytes", "ord", "range", "print"], "class_names": [], "class_method_calls": ["MultiByteToWideChar.argtypes", "wintypes.LPCSTR", "wintypes.UINT", "ctypes.c_int", "unicodedata.name", "ctypes.create_unicode_buffer", "sys.argv", "code.split", "MultiByteToWideChar.restype", "platform.win32_ver", "wintypes.LPWSTR", "ctypes.windll", "wintypes.DWORD"]}, "listcodecs.py": {"libraries": ["os", "encodings", "codecs"], "function_names": ["listcodecs"], "function_calls": ["listcodecs", "print"], "class_names": [], "class_method_calls": ["names.append", "names.sort", "encodings.__path__", "os.listdir", "codecs.lookup"]}, "makeunicodedata.py": {"libraries": ["urllib.request", "functools.partial", "zipfile", "sys", "os", "textwrap.dedent"], "function_names": ["maketables", "merge_old_version", "open_data", "getsize", "word_key", "splitbins", "uselatin1", "dump", "makeunicodedata", "__init__", "makeunicodetype", "makeunicodename", "myhash"], "function_calls": ["sorted", "dedent", "all", "abs", "open_data", "Array", "repr", "str", "makeunicodedata", "tuple", "hash", "open", "Exception", "makeunicodetype", "AssertionError", "range", "ValueError", "list", "Difference", "getsize", "splitbins", "partial", "dump", "hex", "set", "fprint", "int", "zip", "enumerate", "float", "makeunicodename", "maketables", "merge_old_version", "len", "max", "chr", "NotImplementedError", "Hash", "filter", "sum", "UnicodeData", "ord", "map", "print"], "class_names": ["UnicodeData", "Array", "Difference", "Hash"], "class_method_calls": ["old.exclusions", "normalization_changes.append", "self.changed", "r.split", "unicode.changed", "words.items", "t1.append", "data.append", "s.upper", "i.strip", "s.partition", "s.strip", "numeric.values", "sys.stderr", "qc_order.index", "sys.argv", "self.special_casing", "s.startswith", "self.named_sequences", "unicode.table", "decomp_data.extend", "l.append", "wordlist.sort", "value.split", "comp_last_ranges.append", "unicode.named_sequences", "unicode.chars", "self.case_folding", "zip.open", "s.rstrip", "s.index", "zipfile.ZipFile", "new.exclusions", "codehash.dump", "comp_pairs.append", "wordlist.extend", "cjk_ranges_found.append", "spaces.append", "t2.extend", "sys.maxsize", "self.filename", "new.changed", "os.path", "s.split", "self.table", "line.startswith", "self.aliases", "decomp_prefix.append", "table.append", "bincache.get", "self.chars", "comp_first_ranges.append", "self.magic", "self.size", "r.strip", "decomp.pop", "linebreaks.append", "wordtail.sort", "decomp_prefix.index", "unicode.special_casing", "name.split", "p.strip", "urllib.request", "version.replace", "EASTASIANWIDTH_NAMES.index", "self.exclusions", "chars.split", "lexicon.find", "old.table", "self.poly", "old_unicode.table", "unicode.aliases", "words.get", "phrasebook.append", "self.name", "extra_casing.extend", "data.decode", "self.data", "numeric.items", "value.strip", "unicode.case_folding", "local.endswith", "unicode.exclusions", "CATEGORY_NAMES.index", "new.table", "file.readline", "cache.get", "codepoints.sort", "line.split", "decomp_data.index", "BIDIRECTIONAL_NAMES.index", "self.collisions", "records.append", "numeric.setdefault", "lexicon_offset.append", "file.write"]}, "mkstringprep.py": {"libraries": ["sys", "re", "unicodedata.ucd_3_2_0"], "function_names": ["gen_category", "compact_set", "map_table_b2", "map_table_b3", "gen_bidirectional"], "function_calls": ["gen_category", "gen_bidirectional", "list", "len", "map_table_b2", "sorted", "RuntimeError", "chr", "set", "compact_set", "int", "open", "enumerate", "ord", "map", "map_table_b3", "range", "print"], "class_names": [], "class_method_calls": ["l.startswith", "table.keys", "nonchar.update", "tables.append", "unicodedata.bidirectional", "value.split", "table_c21.keys", "sys.maxunicode", "code.lower", "specials.sort", "unicodedata.category", "value.strip", "unicodedata.normalize", "table_c22.keys", "b3_exceptions.get", "unicodedata.unidata_version", "l.strip", "b3_exceptions.items", "tuple.append", "single.append", "f.readlines", "table_b2.items", "l.split", "re.match", "m.group"]}, "unittestgui.py": {"libraries": ["unittest", "tkinter.simpledialog", "tkinter.filedialog", "tkinter", "tkinter.messagebox", "sys", "traceback"], "function_names": ["runClicked", "notifyTestStarted", "notifyTestFinished", "createWidgets", "notifyTestErrored", "addExpectedFailure", "paint", "apply", "initGUI", "showSelectedError", "addSkip", "setProgressFraction", "notifyTestFailedExpectedly", "__init__", "body", "notifyTestsDiscovered", "notifyRunning", "stopClicked", "addFailure", "notifyStopped", "settingsClicked", "notifyTestFailed", "getDirectoryToDiscover", "notifyTestSkipped", "discoverClicked", "errorDialog", "selectDirClicked", "stopTest", "main", "startTest", "rollbackImports", "addError"], "function_calls": ["DiscoverSettingsDialog", "RollbackImporter", "ProgressBar", "GUITestResult", "len", "super", "TkTestRunner", "str", "int", "main", "float"], "class_names": ["DiscoverSettingsDialog", "RollbackImporter", "ProgressBar", "GUITestResult", "TkTestRunner", "BaseGUITestRunner"], "class_method_calls": ["tk.CENTER", "test_suite.countTestCases", "window.quit", "tk.Button", "simpledialog.Dialog", "self.paint", "self.dirVar", "listFrame.pack", "statusFrame.pack", "root.protocol", "self.testPatternVar", "self.callback", "self.statusVar", "self.createWidgets", "tk.TOP", "tk.W", "self.top_level_dir", "self.initGUI", "self.notifyRunning", "tk.Y", "self.e1", "w.quit", "progressFrame.pack", "window.bind", "sys.argv", "suiteNameFrame.pack", "self.expectFailCountVar", "window.protocol", "self.currentResult", "traceback.print_exception", "tk.Scrollbar", "tk.DISABLED", "listScroll.set", "self.progressBar", "self.test_file_glob_pattern", "listScroll.pack", "self.root", "tk.END", "messagebox.showerror", "tk.LEFT", "tk.Entry", "d.test_file_glob_pattern", "self.test_suite", "self.runClicked", "tk.X", "tk.Frame", "self.skipCountVar", "root.quit", "tk.SUNKEN", "window.destroy", "self.errorInfo", "tk.Listbox", "tk.GROOVE", "buttonFrame.pack", "self.settingsClicked", "tk.Canvas", "self.fraction", "tk.BOTTOM", "self.rect", "self.discoverClicked", "self.errorDialog", "tk.StringVar", "self.stopGoButton", "unittest.defaultTestLoader", "tk.SW", "self.errorListbox", "self.totalTests", "self.canvas", "self.top", "self.text", "traceback.format_exception", "window.mainloop", "leftFrame.pack", "tk.IntVar", "self.__rollbackImporter", "tk.Toplevel", "tk.BOTH", "self.runCountVar", "tk.Label", "tk.NW", "unittest.TestResult", "self.color", "self.getDirectoryToDiscover", "sys.modules", "self.errorCountVar", "root.mainloop", "root.title", "window.title", "self.previousModules", "tk.NORMAL", "self.selectDirClicked", "sys.exc_info", "self.failCountVar", "tk.N", "self.e2", "self.directory_to_read", "self.setProgressFraction", "self.notifyStopped", "self.notifyTestsDiscovered", "d.top_level_dir", "self.showSelectedError", "self.remainingCountVar", "tk.Tk", "filedialog.askdirectory", "self.running", "tk.SINGLE"]}}