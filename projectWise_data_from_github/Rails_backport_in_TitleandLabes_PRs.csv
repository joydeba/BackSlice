https://api.github.com/repos/rails/rails,37806,execute_batch-6-0-backport::6-0-stable,0,merged,activerecord::,This backports https://github.com/rails/rails/pull/37707 to 6-0-stable to make it possible to use databases/connectors without enabling/supporting multiple statements. I discussed the backport with @eileencodes,c1ba13464fc1eecfa6527ca53b3d8d67a49a6a8f::
https://api.github.com/repos/rails/rails,37505,fix/6-0-tests::6-0-stable,0,merged,activerecord::,,43b3a5c7b83d475e86bc13229a63d92d634e992f::2e1747757d13b4cd7a72cb3125123bbd0b0d80da::
https://api.github.com/repos/rails/rails,36905,6-0-test-db-backports::6-0-stable,0,merged,activerecord::railties::,Test of backports to double check CI,26ab0ad34be5c0b18b2164e6c22d04b5c18d1015::c550e7199eb22a4b4f15ddc88f9dc3e131876856::0169c93b339b31d51ba2fc18ac7e6850a343923a::4f912de2fd23b1ba3465a73d26d3dbaf732028cb::
https://api.github.com/repos/rails/rails,36843,add-ability-to-unset-preventing-writes::master,0,merged,activerecord::needs backport::,Previously if an app attempts to do a write inside a read request it will be impossible to switch back to writing to the primary. This PR adds an argument to the `while_preventing_writes` so that we can make sure to turn it off if we're doing a write on a primary. Fixes #36830 Co-authored-by: John Crepezzi <john.crepezzi@gmail.com> cc/ @tenderlove @jhawthorn @rafaelfranca @matthewd,f2de448106ca3bb947dc88f96ca7d81d37b5be9a::
https://api.github.com/repos/rails/rails,36834,deduplicate_joins::master,0,merged,activerecord::needs backport::,"#36805 have one possible regression that failing deduplication if `joins_values` have complex order (e.g. `joins_values = [join_node_a, :comments, :tags, join_node_a]`). This fixes the deduplication to take it in the first phase before grouping. I believe the deduplication issue https://github.com/rails/rails/pull/36805#issuecomment-517031240 might be fixed by this. cc @eileencodes",e6f953fc395e3ff2fdea1ff60743f83f73158e7b::
https://api.github.com/repos/rails/rails,36824,fix-db-seed::master,0,merged,activerecord::needs backport::railties::,"The `rake db:seed` command was broken for the primary environment if the application is using multiple databases. We never implemented `rake db:seed` for other databases (coming soon), but that shouldn't break the default case. The reason this was broken was because `abort_if_pending_migrations` would loop through the configs for all databases and check for migrations but would leave the last established connection. So `db:seed` was looking in the wrong database for the table to seed. This PR doesn't fix the fact that `db:seed` doesn't work for multiple databases but does fix the default case. Fixes #36817 Co-authored-by: John Crepezzi <john.crepezzi@gmail.com>",cd148be07298e298bb84f5df7b973f2b188830ee::
https://api.github.com/repos/rails/rails,36617,fix_database_url_trampling_other_env_configs::master,0,merged,activerecord::needs backport::,"fixes #36610 ### Summary If the `DATABASE_URL` env var is present and the database env in database.yml matches the current environment *and* the database env for the current environment doesn't contain a `url:` key then all environments in the database.yml will have their database connection data overwritten wether they contain a `url:` key or not ### Other Information The original reported was expecting the database URL for the `external_db` database config (copied here for ease of reference): ```yaml default: &default adapter: postgresql encoding: unicode # For details on connection pooling, see Rails configuration guide # https://guides.rubyonrails.org/configuring.html#database-pooling pool: <%= ENV.fetch(""RAILS_MAX_THREADS"") { 5 } %> development: <<: *default database: external_db_url_config_development production: <<: *default database: external_db_url_config_production url: <%= ENV['DATABASE_URL'] %> external_db: url: <%= ENV['EXTERNAL_DB_URL'] %> ``` to be set to the value of the EXTERNAL_DB_URL env var when running the app in development mode, however it ends up being set to the DATABASE_URL env var instead, despite having a `url:` key which should prevent that. As stated in the docs: > The only way to explicitly not use the connection information in ENV['DATABASE_URL'] is to specify an explicit URL connection using the ""url"" sub key: I think the reason this happens is [`database_configurations.rb:156`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/database_configurations.rb#L156): ```ruby def build_url_config(url, configs) env = ActiveRecord::ConnectionHandling::DEFAULT_ENV.call.to_s if original_config = configs.find(&:for_current_env?) # <----------------- here if original_config.url_config? configs else configs.map do |config| ActiveRecord::DatabaseConfigurations::UrlConfig.new(config.env_name, config.spec_name, url, config.config) end end else configs + [ActiveRecord::DatabaseConfigurations::UrlConfig.new(env, ""primary"", url)] end end ``` On this line we *only* get the development env from the database.yml: ``` (byebug) configs.find(&:for_current_env?) #<ActiveRecord::DatabaseConfigurations::HashConfig:0x00007fa0a565b038 @env_name=""development"", @spec_name=""primary"", @config={""adapter""=>""postgresql"", ""encoding""=>""unicode"", ""pool""=>5, ""database""=>""external_db_url_config_development""}> ``` As the development env is not a `original_config.url_config?` in this situation we fall through to the code: ```ruby configs.map do |config| ActiveRecord::DatabaseConfigurations::UrlConfig.new(config.env_name, config.spec_name, url, config.config) end ``` Where `url` is [populated earlier from ENV[""DATABASE_URL""] ](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/database_configurations.rb#L111). This code doesn't have a `url_config?` condition, so even if the config has a `url:` parameter in the database.yml at this point it will be trampled by `ActiveRecord::DatabaseConfigurations::UrlConfig.new` which doesn't match the behaviour described in the docs.",ff42b21915c08cf44f2c263dfe13c249dd780528::
https://api.github.com/repos/rails/rails,36440,multi-db-abort_if_pending_migrations-task::master,0,merged,activerecord::needs backport::railties::,"### Summary Currently, the `db:abort_if_pending_migrations` only operates on the primary database configured. If you have a pending migration for a different database, it will not be detected by this task. This pull request has the task look through all of the databases, and also generates separate tasks for each database, both based off of the pattern of other multi-DB aware tasks.Is there another way to check pending migrations? This feels a rough way to test that pending migrations work correctly. 1) I don't like the usage of `fail` and 2) I don't like recusing the error.::Sorry about that, I wasn't aware of the `allow_failure:` param on `rails(...)`. I've updated and squashed appropriately.::",cb8b57d07e132a6528bce47c93ee392c6cc64c10::
https://api.github.com/repos/rails/rails,36439,move-schema-migration-to-migration-context::master,0,merged,activerecord::needs backport::railties::,"This PR moves the `schema_migration` to `migration_context` so that we can access the `schema_migration` per connection. This does not change behavior of the SchemaMigration if you are using one database. This also does not change behavior of any public APIs. `Migrator` is private as is `MigrationContext` so we can change these as needed. We now need to pass a `schema_migration` to `Migrator` so that we can run migrations on the right connection outside the context of a rake task. The bugs this fixes were discovered while debugging the issues around the SchemaCache on initialization with multiple database. It was clear that `get_all_versions` wouldn't work without these changes outside the context of a rake task (because in the rake task we establish a connection and change AR::Base.connection to the db we're running on). Because the `SchemaCache` relies on the `SchemaMigration` information we need to make sure we store it per-connection rather than on ActiveRecord::Base. cc/ @tenderlove, @rafaelfranca, @jhawthorn, @matthewd This was @tenderlove's idea ðŸ˜‰ ::Is this intended to be exposed in the api doc?::Is this necessary? Actually the `SchemaMigration` super class is not abstract class.::Is this `options[:schema_migration]` will be used in the future? It is not used yet in this PR.::What intent is this `suppress_messages`?::Is this intentionallly not used `@schema_migration` here?::If the class was not, I think we shouldn't make the method public.::Maybe we should move this `to_i` to inside the `SchemaMigration` class?::I don't see the method call for this method passing the `schema_migration` on this PR. Should not we change it? Or it is just relying on the fact that the methods being called on `MigrationContext` don't use the `schema_migration` information? Maybe we should just default to `SchemaMigration` on this method like we did on `current_version` so at least things will not explode if `migrations` start to use the `schema_migration ` argument. There is also a test setting `schema_migration` to `nil` that we probably should use `SchemaMigration`.::Are these internal methods should be public? `create_schema_migration_table` is not used yet, and others are not used from public. https://github.com/rails/rails/compare/9ef5b7edbad2383ae50413ffd3d71fc6ab1e6b3e...remove-internal-methods-in-migration-context ```patch From 27cf3da4c0ede28302bbb4e27fa53d1aadb6bc7d Mon Sep 17 00:00:00 2001 From: Ryuta Kamizono <kamipo@gmail.com> Date: Mon, 10 Jun 2019 20:34:03 +0900 Subject: [PATCH] Remove internal methods which are not used from public --- .../connection_adapters/abstract_adapter.rb   |  2 +- activerecord/lib/active_record/migration.rb   | 30 ++++--------------- 2 files changed, 6 insertions(+), 26 deletions(-) diff --git a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb index 3a08900f3d07..3d0993dfd7e1 100644 --- a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb +++ b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb @@ -166,7 +166,7 @@ def migration_context # :nodoc: MigrationContext.new(migrations_paths, schema_migration) end -      def schema_migration +      def schema_migration # :nodoc: @schema_migration ||= begin conn = self spec_name = conn.pool.spec.name diff --git a/activerecord/lib/active_record/migration.rb b/activerecord/lib/active_record/migration.rb index 0256d2b710f9..aa2e7f95aec0 100644 --- a/activerecord/lib/active_record/migration.rb +++ b/activerecord/lib/active_record/migration.rb @@ -885,7 +885,7 @@ def method_missing(method, *arguments, &block) def copy(destination, sources, options = {}) copied = [] -      schema_migration = options[:schema_migration] +      schema_migration = ActiveRecord::Base.connection.schema_migration FileUtils.mkdir_p(destination) unless File.exist?(destination) @@ -1022,26 +1022,6 @@ def initialize(migrations_paths, schema_migration) @schema_migration = schema_migration end -    def table_exists? -      schema_migration.table_exists? -    end - -    def all_versions -      schema_migration.all_versions.map(&:to_i) -    end - -    def normalized_versions -      schema_migration.normalized_versions -    end - -    def normalize_migration_number(version) -      schema_migration.normalize_migration_number(version) -    end - -    def create_schema_migration_table -      schema_migration.create_table -    end - def migrate(target_version = nil, &block) case when target_version.nil? @@ -1092,8 +1072,8 @@ def open end def get_all_versions -      if table_exists? -        all_versions +      if schema_migration.table_exists? +        schema_migration.all_versions.map(&:to_i) else [] end @@ -1130,12 +1110,12 @@ def migrations end def migrations_status -      db_list = normalized_versions +      db_list = schema_migration.normalized_versions file_list = migration_files.map do |file| version, name, scope = parse_migration_filename(file) raise IllegalMigrationNameError.new(file) unless version -        version = normalize_migration_number(version) +        version = schema_migration.normalize_migration_number(version) status = db_list.delete(version) ? ""up"" : ""down"" [status, version, (name + scope).humanize] end.compact ``` ::The entire class is nodoc'd.::Fixed::Removed::Moved `to_i` to SchemaMigration class::I purposefully didn't change the method signature because `copy` is a public method. Updated this to default to not nil. ::Took the majority of suggested changes and amended my original commit.::I'm still don't get about this `:schema_migration` option. This option is not used yet in this PR, so any test is not failed even if this option is removed. Is this option used in GitHub? If so, should we have a test case for this option? ```diff diff --git a/activerecord/lib/active_record/migration.rb b/activerecord/lib/active_record/migration.rb index 9db017cded..a6dd135b5f 100644 --- a/activerecord/lib/active_record/migration.rb +++ b/activerecord/lib/active_record/migration.rb @@ -884,7 +884,7 @@ def method_missing(method, *arguments, &block) def copy(destination, sources, options = {}) copied = [] -      schema_migration = options[:schema_migration] || ActiveRecord::SchemaMigration +      schema_migration = ActiveRecord::SchemaMigration FileUtils.mkdir_p(destination) unless File.exist?(destination) ```::I will add a test for it. ::",7cc27d749c3563e6b278ad01d233cb92ea3b7935::
https://api.github.com/repos/rails/rails,35706,revert_35549_from_5_2_stable::5-2-stable,0,merged,actionpack::,"This reverts commit 4185881d09bb6077228aa82fcb7c0da7373d8aa3. We bumped on this when upgrading. IMO it's a great change in 6.0, but is a potentially breaking change that shouldn't be backported to 5-2-stable. cc @eileencodes @kamipo",cc26fc056e3ee141f6d86f10957959f6575d4171::
https://api.github.com/repos/rails/rails,34570,allow_attribute_aliases_in_update_5_2_stable::5-2-stable,0,closed,activerecord::,### Summary Backport of https://github.com/rails/rails/pull/34569 to `5-2-stable`.,dc006211e0d0d6b8529276ed61a5327cdb76c887::
https://api.github.com/repos/rails/rails,32539,anticompress::master,0,merged,activesupport::needs backport::regression::,"On Rails 5.2, when compression is enabled (which it is by default), the actual value being written to the underlying storage is actually _bigger_ than the uncompressed raw value. This is because the `@marshaled_value` instance variable (typically) gets serialized with the entry object, which is then written to the underlying storage, essentially double-storing every value (once uncompressed, once possibly compressed). This regression was introduced in #32254. Fix incoming.was it changed intentionally since `defined?(@compressed) ? @compressed : false` looks correct?::Yes. Ruby semantics of query methods don't require us to return `false` or `true` so `nil` is totally fine and inline with our guidelines.::@rafaelfranca Ruby semantics is fine. I have another concern here since I see that behavior of this method is changed here. `defined?` returns a string describing its argument by http://ruby-doc.org/core-2.5.0/doc/keywords_rdoc.html Example: ```ruby @compressed = nil # or @compressed = false defined? @compressed # => ""instance-variable"" ``` That means if we used `@compressed` like `nil` or `false`, we would need to change this method to the previous version in order to get right behavior. I would recomend to initialize `@compressed` in the controller in order to get rid of using `defined?` there. if it is a good reason, I'll send a patch? ```diff diff --git a/activesupport/lib/active_support/cache.rb b/activesupport/lib/active_support/cache.rb index d769e2c..317723b 100644 --- a/activesupport/lib/active_support/cache.rb +++ b/activesupport/lib/active_support/cache.rb @@ -719,6 +719,7 @@ def initialize(value, compress: true, compress_threshold: DEFAULT_COMPRESS_LIMIT @version    = version @created_at = Time.now.to_f @expires_in = expires_in && expires_in.to_f +        @compressed = nil compress!(compress_threshold) if compress end @@ -798,7 +799,7 @@ def compress!(compress_threshold) end def compressed? -          defined?(@compressed) +          @compressed end def uncompress(value) ```::The current implementation is fine. A string is a truthy value and that is only want we need. `@compressed` will never be `@nil` or `@false` because we serialize this instance using marshal and we don't want to always serialize `@compressed` and your implementation always serialize `@compressed`.::You are right. Sorry for distraction.::No problem! thank you for double checking the implementation.::",84b1feeaff94a598b335c5d3f73c4f74f489a165::66df366268c4e5b17c9235b5a0c3aabcbd578e01::
https://api.github.com/repos/rails/rails,32106,fix-rails-6_0_changelogs::master,0,merged,,Remove railties' changelog added by 7340596de45dc4c0f62a287b6acc4e71d8ee6c60 since it was backported to `5-2-stable` via ac99916fcf7bf27bb1519d4f7387c6b4c5f0463d Remove activesupport's changelog added by 1077ae96b34b5a1dfbf10ee0c40b1ceb1eb6b30b since it was backported to `5-2-stable` via a2b97e4ffef971607a1be8fc7909f099b6840f36 Remove activesupport's changelog added by 0d41a76d0c693000005d79456dee7f9299f5e8d4 since it was backported to `5-2-stable` via cdce6a709e1cbc98fff009effc3b1b3ce4c7e8db Remove activestorage's changelog added by d57c52a385eb57c6ce8c6d124ab5e186f931d142 since it was backported to `5-2-stable` via 5292cdf59a2052c453d6016c69b90b790cbf2547 Follow up c113bdc9d0c2cffd535ca97aff85c4bdc46b11f6 /cc @guilleiguaran,ae3e241b573b450fd9ce694a458ad942a8bd6b03::
https://api.github.com/repos/rails/rails,30986,rm-changelog::master,0,merged,,- Backport commit: https://github.com/rails/rails/commit/7122a2cdc3634e170129f8b6cabd1e8fbed13c3d,28162a0833432bc6726ac5a1924faa13215fb0bf::
https://api.github.com/repos/rails/rails,30955,rm-changelog-entry::master,0,merged,,- It was backported in https://github.com/rails/rails/commit/0eae8dd4b859c109919e5da0d6e74ffc6dc8a258 and is present in Rails 5.1.3,95de5033cded0b59372c0cb6a329a703c7b34905::
https://api.github.com/repos/rails/rails,30421,fix_30405::master,0,merged,actionpack::needs backport::,"In Rails engine `Rails.root `returns the path of the dummy application. Therefore, there is no `tmp` directly where the test is running, so can not get the screenshot. For this reason, instead of directly specifying tmp, retrive screenshot by relative path from the current directory. Fixes #30405",52422f2af60c0830da6e5749700f911c6c0b22ea::
https://api.github.com/repos/rails/rails,29282,prevent_making_bind_param_if_casted_value_is_nil::master,0,merged,activerecord::needs backport::,"If casted value is nil, generated SQL should be `IS NULL`. But currently it is generated as `= NULL`. To prevent this behavior, avoid making bind param if casted value is nil. Fixes #28945.Let's use `assert_equal 1, Task.where(starting: """").count` instead. Trying to match quoted identifiers seems tricky, because we'd have to account for SQL Server, etc. (And just in general, if we can prove what we need without being specific about the SQL, so much the better.)::I changed the test without `assert_match` against generated SQL.::I added a CHANGELOG.md entry.::",67a4a9feb9d31747db8a9ce5fcfe61d6067dd625::
https://api.github.com/repos/rails/rails,29259,4-2-backport-fix-session-keys-and-values-methods::4-2-stable,0,closed,,This is a backport of PR #28895 which has been merged into master. This fixes a bug where session.keys and session.values return an empty array unless one of the other methods that does lazy loading from the underlying store is called first. #keys and #values should also call #load_for_read!,a145b07851f188906ab5c60199f45ae816ca5667::
https://api.github.com/repos/rails/rails,29146,fix_29138::master,0,merged,needs backport::railties::,"Current `user_supplied_options` method can not set the value correctly if there is no space between option and value (e.g., `-p9000`). This makes it possible to set the value correctly in the case like the above. Fixes #29138",7a154ab380501050e6ce20463de8f702353bceb0::
https://api.github.com/repos/rails/rails,28604,bug/custom_sanitizer_config::master,0,closed,actionview::needs backport::,### Summary Fixes #28587 These changes ensure that configured `ActionView::Base` sanitizer instances are properly inherited in view contexts used by `sanitize` and other `SanitizeHelper` methods by changing sanitizer class instance variables to use `cattr_accessor`. ### Other Information It would be nice to get this fix into both Rails 5.x and 4.2 versions.,736789c1dde95d34d7f48d2eb539d19ac47c9813::
https://api.github.com/repos/rails/rails,28142,tmp/5-0-backports::5-0-stable,1,merged,railties::,Backport #27605 & #28013 into 5-0-stable,355596772d7d0108b50c35603a9381544a46f7f7::e845c122b9852d11ab42e24e123a448f4640d599::
https://api.github.com/repos/rails/rails,28137,schneems/fix-default-puma-port::master,0,merged,needs backport::railties::,"Currently when Puma gets a `:Port` it doesn't know if it is Rails' default port or if it is one that is specified by a user. Because of this it assumes that the port passed in is always a user defined port and therefor 3000 always ""wins"" even if you specify `port` inside of the `config/puma.rb` file when booting your server with `rails s`. The fix is to record the options that are explicitly passed in from the user and pass those to the Puma server (or all servers really). Puma then has enough information to know when `:Port` is the default and when it is user defined. I went ahead and did this for all values rails server exposes as server side options for completeness. The hardest thing was converting the input say `-p` or `--port` into the appropriate ""name"", in this case `Port`. There may be a more straightforward way to do this with Thor, but I'm not an expert here. Seems like `ENV[""PORT""]` should count as user-supplied for our purposes here, too.::Good call.::",6ac4dabbcfa092ddda24ae9ee4698a55eb495021::
https://api.github.com/repos/rails/rails,27176,fix_26958::master,0,closed,actionpack::needs backport::,"### Summary The path helper calls `#to_param` inside. But `ActionController::Parameters` does not have `#to_param`, so `NoMethodError` error will raise. To avoid this, convert to hash if argument is `ActionController::Parameters` Fixes #26958.We should be doing the same as https://github.com/rails/rails/blob/2b4a9735d816d3a05c7fca207d97bebcb09c95a0/actionview/lib/action_view/helpers/url_helper.rb#L619-L628 here::Thanks! I updated.::",20a5f7893457c2108c7e1cb5e54d0ff7c04d9b73::
https://api.github.com/repos/rails/rails,26643,4-2-mysql2-no-nil-connection::4-2-stable,0,merged,MySQL::activerecord::,"@rafaelfranca, @arthurnn please review cc @Sirupsen Backport #26434 for the 4-2-stable branch",c6bf2b89471f14075d1de8f42b4c0eac9585ca98::
https://api.github.com/repos/rails/rails,26604,arthurnn/backport-26441::5-0-stable,1,merged,,[backport fix for #26441] original commit: https://github.com/rails/rails/commit/f62451a50b2c9119adce7acc53ce3dfffc4d41d5,352afa7c3ae0083ea3d232524ea3d680b6bffd25::
https://api.github.com/repos/rails/rails,26490,4-2-stable::4-2-stable,0,closed,,"Backport 025187d9806ddfbdded15d0c7bd8341665ee40e9 for the `4-2-stable` branch. ### Summary There are many ways that things end up getting passed to `concat`. Not all of those entry points called `flatten` on their input. It seems that just about every method that is meant to take a single record, or that splats its input, is meant to also take an array. `concat` is the earliest point that is common to all of the methods which add records to the association. Partially fixes #18689",98058e3058d4396436cd0f34791d570d557e209f::
https://api.github.com/repos/rails/rails,26473,5-0-mysql2-no-nil-connection::5-0-stable,0,merged,activerecord::,"@rafaelfranca, @arthurnn please review Backport #26434 for the 5-0-stable branch",23753b7efc1e906c7e10634ef86616e4c644acf8::0725e3ede0798640f69e2382f457331aed8e5315::c65b6a30c53f4ccfb50b4abc9403787d935d93f5::
https://api.github.com/repos/rails/rails,26261,fix-unnecessary-query-cache-busting::4-2-stable,0,merged,activerecord::,### Summary AR's query cache currently depends on the type objects being not only equivalent but also to be the same object. Either reloading the type information or using custom type objects that aren't cached will unnecessarily bust the cache. The problem is that `ActiveRecord::Type::Value` didn't implement `#eql?` or `#hash`. ### Other Information This is fixed in 5.0 as an ancillary part of 574f255 but here I also add a test for the condition.,fce3dbf30241f2a65c777e192a7171b0eea81453::
https://api.github.com/repos/rails/rails,25951,sg-backport-20317::4-2-stable,0,closed,activerecord::,"The patch does not apply at all cleanly, so this is a manual backport of the most relevant bits",57ca6734cf3730eae4f5b5e285e3c3f3e46f6ef3::3c311ee753feec7d9e6c51d409862c9ef5d723f7::335a1dfcbab2c5f3d2d4d5aabe643a56c6622f81::
https://api.github.com/repos/rails/rails,25511,jm-5-0-0-bp-1::5-0-0,0,merged,,This brings us up to date with backports to 5-0-0. r? @rafaelfranca,b55cc2428d9f88787fb7767fdfe468e968a0eb48::
https://api.github.com/repos/rails/rails,25509,jm-5-0-stable-bp-1::5-0-stable,0,merged,,This brings us up to date with backports to `5-0-stable`. r? @rafaelfranca,9f574465b8fe78ae289e2a86231b7a6d49004b3f::
https://api.github.com/repos/rails/rails,25508,schneems/backport-evented-file-boot-at-check-time::5-0-stable,0,closed,,"Backport of https://github.com/rails/rails/pull/25302 Even though https://github.com/rails/rails/pull/25302 had a 5-0 milestone, it was never backported to the branch :( Having master not be the current pre-release target is error prone.",9472b97eee93aeefae1961871837deb1dc79177e::e7c5174b1ea49139c0dae2331a091770c2c25e19::42bcb0323d61012265d8b688980c91d239c90f5e::846f71bc572795e2664f9a4df3a8474bc27d8c62::4e6b76195244d9d91c7cbdf27ce9807eaef60a02::
https://api.github.com/repos/rails/rails,25479,4-2-stable::4-2-stable,0,merged,activesupport::docs::,@rafaelfranca Updates the changelog to reflect 4.2 backports from #25397 and #25356.,e8cd808ae97fc0a0c09b44d80bc2b195cdc44888::
https://api.github.com/repos/rails/rails,23657,4-1-uniqueness-validator-pk-fix::4-1-stable,0,closed,activerecord::,"This is a backport from PR #23581 that fixes the issue reported on #23399 for Rails 4.1. > When changing the PK for a record which has a uniqueness validation on > some other attribute, Active Record should exclude itself from the > validation based on the PK value stored on the DB (id_was) instead of > its new value (id). r? @sgrif",1ad5e11871c1b9f4c50767746e950a987eb3eb8c::
https://api.github.com/repos/rails/rails,23656,4-2-uniqueness-validator-pk-fix::4-2-stable,0,closed,activerecord::,"This is a backport from PR #23581 that fixes the issue reported on #23399 for Rails 4.2. > When changing the PK for a record which has a uniqueness validation on > some other attribute, Active Record should exclude itself from the > validation based on the PK value stored on the DB (id_was) instead of > its new value (id).",3b85deb5ecd00f5e371b9d128fb0ec9ba2b953b3::
https://api.github.com/repos/rails/rails,21940,4-2-stable::4-2-stable,0,closed,activerecord::,"LIke @joallard in #20425, I also could use the functionality in #18228 in Rails 4.2. I rebased joallard's branch on the current 4-2-stable and also backported 112706a, which should fix the test failures that #20425 is seeing since it removes the `types` argument that isn't really needed. About to try this in our rails app while travis takes a look, will report back. I'll do my best to keep this up-to-date :) :heart: :heart: :heart: :heart:",ca3808f4368b7bcf19757bcb6a2f5f0811da5bfc::351c3593bb53057a2c16684ea047873c4a25a499::504a266abe14f3d6f7e0e4d4c7bf05e4cbda31a4::15b0b8fc88900efc5c33802bd2a94adf97688202::08100529a4ae03c6b5061e92cbe7e3140b24054b::68bc97bf4b9ace7e341ac9fffa590a3559277ba9::
https://api.github.com/repos/rails/rails,20425,4-2-stable::4-2-stable,0,closed,,"I couldn't get a Travis run on my repo, so here. #18228 ie Is it possible to backport 18228 to 4-2? Code fails there as `prepare_column_options` in 4.2 requires two arguments: `column` and `types`. Second argument must be supplied (I do not know what is it). ActiveRecord internals differs heavily between 4.2 and 5.0, so it wouldn't be easy to backport anything. But I need this fix too. ::Same thing here: `prepare_column_options` in 4.2 requires two arguments: `column` and `types`. ::",aa8d72879a54624133dd3ddb3c0874827ec136a2::
https://api.github.com/repos/rails/rails,18616,sanitize_docs_4-2::4-2-stable,0,closed,,"@rafaelfranca This is a backport of #18557 to `4-2-stable`. I'm not 100% sure of what the protocol is for backporting doc fixes, so if this isn't something typically done, feel free to close.  Thanks!",40db93774bd19c143f64af0167658a1792091196::d95df87de78114aeccedfd10b08f56b9e8bfde93::538bf300beb921298b43e6b61188fecdfdde8eb1::
https://api.github.com/repos/rails/rails,18071,backport_18052_4-2::4-2-stable,0,closed,,"This is a backport of #18052. The current implementation of `variants=` don't allow a resetting to nil, wich is the default value. This results in the following code smell: ``` ruby case request.user_agent when /iPhone/ request.variants = :phone when /iPad/ request.variants = :ipad end ``` With the ability to reset variants to nil, it could be: ``` ruby request.variants = case request.user_agent when /iPhone/ :phone when /iPad/ :ipad end ```",2ba994edc602b0eae5b1fed6a56c625561855afa::
https://api.github.com/repos/rails/rails,17258,v3.0.20.12::master,0,closed,,Backporting a patch. PTAL /to: @jeffyip,3aaa91eb37fc228d6fcd2913a5c58b3d75576d14::
https://api.github.com/repos/rails/rails,17200,backport_underscore_nested_inflections::4-1-stable,0,closed,,Respect nested acronym inflections as handled on edge Fixes #17193,aeaf957f4f2a7afa5e6f8c9109286c20b08e7e81::
https://api.github.com/repos/rails/rails,16872,4-0-stable-backport-16871::4-0-stable,0,closed,,This is a backport PR of #16871 to `4-0-stable`.,86ae533ad0fd29a95b09b1cdd2df5d0c97496915::
https://api.github.com/repos/rails/rails,14947,4-1-stable::4-1-stable,0,closed,,"When an object with a binary column is updated with a nil value in that column, the SQL logger would throw an exception when trying to log that nil value. This only occurs when updating a record that already has a non-nil value in that column since an initial nil value isn't included in the SQL anyway (at least, when dirty checking is enabled.) The column's new value will now be logged as <NULL binary data> to parallel the existing <N bytes of binary data> for non-nil values.",423afb7677f171bdbf9e528362535fd2f6800af0::
https://api.github.com/repos/rails/rails,14518,hash-wia-update-respects-to-hash-4-1-stable::4-1-stable,0,merged,activesupport::,Backports the stable parts of #12550.,939f4eaed0b484aab13df3e3b2d1b20925fafa26::
https://api.github.com/repos/rails/rails,14179,14171_backport::4-1-stable,0,merged,,backport #14171 to 4.1 review @guilleiguaran,b2d19a539f542ee10da6414bdc5a3ee6ee2f90bd::
https://api.github.com/repos/rails/rails,11925,ivar_rename_for_11831::master,0,closed,,"Rubinius uses @locals on Thread for their Fiber locals. Since Rubinius, unlike CRuby doesn't hide internal ivars, they can conflict with monkey patched ivars. This namespaces the backported ivar so it is not the same as Rubinius's name. See #11831 for context.",23689b8595f4aecc6ca89d77834a198118485107::
https://api.github.com/repos/rails/rails,11576,backport_11575::4-0-stable,0,closed,,#11575 /cc @spastorino,52b34f32919d2edb0aba7c3cc0de84e23c58b911::
https://api.github.com/repos/rails/rails,11562,backport_efeb039::4-0-stable,0,merged,,/cc @senny @pftg,5ddb94de08d551d86831e622bfdcf3e81196b19a::
https://api.github.com/repos/rails/rails,10681,3-2-stable-fix_association_auto_save::3-2-stable,0,merged,,"This is a backport of #10417 The issue: Per the comments in pull #3329, If you have a table with a unique field index, and you mark a record for destruction, and you build a new record with the same value as the unique field, then when you call save, a database level unique index error will be thrown. This happens because the record destruction happens after record creation. In this pull request, I moved the record destruction ahead of the record creation.",c2362461cdf9615d5704d6f2942921b84b854c3c::
https://api.github.com/repos/rails/rails,10548,benolee-backport_cc7dd66_and_c0ba0f0::3-2-stable,0,closed,,"Backport cc7dd66 and c0ba0f0, which fix the runner loading issue from issue #7683 closes #7695 #882",69ad78457e5ad1053e79ee4f7108f1727dff427d::
https://api.github.com/repos/rails/rails,9368,3-2-stable::3-2-stable,0,merged,actionpack::,This is the 3-2 patch that mimics https://github.com/rails/rails/pull/5219.,03ac291526b04586a0f0db0f531f18f14be792c6::
https://api.github.com/repos/rails/rails,8763,backport-to-hide-warning::3-2-stable,0,merged,,backport 4f0f1b5. 1.9.3-p362 warned unused variables. this test failed because of this warning.,8a1ba017c657353daebf13a1f30d1a028967dc36::
https://api.github.com/repos/rails/rails,8665,8661_should_not_append_charset_if_already_present::3-2-stable,0,merged,,This is a backport of #8662 to fix #8661,55a886b6e9bae1986a357626b08522a838aedb3e::
https://api.github.com/repos/rails/rails,8618,backport_8612::3-2-stable,0,merged,,This is a fix for #8612 Conflicts: ``` railties/CHANGELOG.md railties/lib/rails/generators/test_unit/model/model_generator.rb railties/lib/rails/generators/test_unit/model/templates/fixtures.yml railties/test/generators/model_generator_test.rb ``` There were some modifications on the fixture.yml that are not present on `3-2-stable`. Thats why most of the files had conflicts.,5203b6dd50dd88904c57c001ed49c157b3afe536::
https://api.github.com/repos/rails/rails,8413,8403_backport::3-2-stable,0,merged,,This is a backport of #8403. It fixes the issue described in #3313 Conflicts: ``` activerecord/CHANGELOG.md activerecord/test/models/developer.rb ``` I had to make some modifications to the spec because the API changed in 4.0.,1b961765871eba76d50d463d3af6c3c5926f537a::
https://api.github.com/repos/rails/rails,8295,8265_backport::3-2-stable,0,merged,,This is a backport of #8291 Closes #8265 Conflicts: ``` activerecord/CHANGELOG.md activerecord/lib/active_record/associations/association.rb ```,d397a38c0268e61295e23f617e9bf70d905ea610::
https://api.github.com/repos/rails/rails,8271,backport_8262::3-2-stable,0,merged,,"If you generate a full engine, this will include rake tasks from your gem under the `app` namespace. For example if you have a dependency on `rspec-rails` in your engine's `gemspec`. You will get the task `app:spec` Closes #8229 Conflicts: ``` railties/CHANGELOG.md ```",da6951af63b311cf6c0e92ee09301820a620aa3d::
https://api.github.com/repos/rails/rails,8227,backport_8139::3-2-stable,0,merged,,"The `plugin new` generator always adds the dummy app rake tasks, when a dummy app was created. Closes #8224 I had to backport the commit 00fbee5bbf7896d38ccf3a26d4b6f36f9a63f358 also. Otherwise the error from #6251 would popup. This line should be here ::I see. ::",00fbee5bbf7896d38ccf3a26d4b6f36f9a63f358::e69058c15389b7f88771a95c1637b2f306d0c02f::
https://api.github.com/repos/rails/rails,8209,backport_8176::3-2-stable,0,merged,,"This is a backport of #8176 to fix #7551 I had to modify the patch, since the code looks different on `3-2-stable` than on master. Effectively it does the exact same thing tough. Since `spawn` was not available I used `clone`. Also I had to use `pluck` with an Array (in the test case) because multiple arguments are not supported on `3-2-stable`",d3006f3503cd62510f669fcac84f8dc47c3b333c::
https://api.github.com/repos/rails/rails,8199,backport_8182::3-2-stable,0,merged,,This is a backport of #8185 to fix #8182,be79632b96d6fe6b844c99561ce96f540e98cae0::
https://api.github.com/repos/rails/rails,8149,backport_7842_to_rails_3_2_stable::3-2-stable,0,merged,,"this is a backport of #8115 to fix #7842 The problem was already fixed in master, the solution used for `3-2-stable` is different.",d12e75340996f174649ed584b062f46aa030e0dd::
https://api.github.com/repos/rails/rails,7989,backport_7969::3-2-stable,0,merged,,this is a backport of #7969.,1f73a53071dc50b3264decde7cc35e1b154695ec::
https://api.github.com/repos/rails/rails,7865,link_to_remote_3_2::3-2-stable,0,merged,,This is a backport of pull request #7864,380800e4a272db98f3dd267f82e0ce1e4d03f4b8::
https://api.github.com/repos/rails/rails,7785,3-2-stable::3-2-stable,0,merged,,Closes #5011,8dbf337e0a7e4db521aa2f5f992609fae98c329e::
https://api.github.com/repos/rails/rails,7695,backport_cc7dd66_and_c0ba0f0::3-2-stable,0,merged,railties::,"Backport cc7dd66 and c0ba0f0, which fix the runner loading issue from issue #7683",38af3540ae53b9f2fbdb649a68cde3edf182fe67::
https://api.github.com/repos/rails/rails,7689,assume_migration_version_with_prefix_fix::3-2-stable,0,merged,activerecord::,Reopening https://github.com/rails/rails/pull/4157 back ported to 3-2-stable,4325bec1d46de4a7fbe094ae18e83648532e2ddf::
https://api.github.com/repos/rails/rails,7675,fair_conn_pool_backport::3-2-stable,0,merged,,"In master, @pmahoney's 02b2335563 causes contention for connections in the ConnectionPool to be fair (first-waiting, first-satisfied) which is important for reasonable behavior in a high-contention short-checkout scenario.  See also issue #6492 . I have been using a hacky local monkey patched backport of that patch in my rails 3.2.x app for several months now -- and it's performing admirably.  My app that had so much trouble in rails 3.2.x in the sorts of scenarios the patch is designed to fix -- now runs awesomely, as expected. So I think it's valuable to backport this to 3-2-stable. (A couple others have asked me about these issues in 3.2).  Which is what this pull request is. I manually prepared the backport -- master had enough other semantic and implementation diffs from 3-2-stable that it was a bit tricky to figure out the right way to do this (and this stuff is confusing). But I think I got it right. Note one significant difference in this backport patch from master:  3-2 still tries to rescue 'leaked' connections in #checkout, if no connections are available, `clear_stale_cached_connections!` is called. This behavior is still preserved with this backport in 3-2-stable, adding the `clear_stale_cached_connections!` check in the new `acquire_connection`. (When I forgot to do this, I indeed got failing tests in 3-2-stable `test_checkout_behaviour`, which passed again when I made sure `clear_stale_cached_connections!` still happened when required). I am relatively confident I've gotten everything right, although this stuff is admittedly quite tricky. @tenderlove, @rafaelfranca or anyone else with eyes on AR, appreciate feedback and/or merge, thanks! Remove this blank line ::Remove this blank line ::remove the assignment to `conn` because the variable is not used and will print a warning ::remove the assignment to `conn` because the variable is not used and will print a warning ::",0693e079708a52b777f2b7872b8e3d467b880a0d::
https://api.github.com/repos/rails/rails,7446,backport-fix-issue-7431::3-2-stable,0,merged,,,4b1985578a2b27b170358e82e72e00d23fdaf087::
https://api.github.com/repos/rails/rails,6973,wrapped_keys_in_log_for_3_2::3-2-stable,0,merged,,It's related to #6050 but for 3.2 branch,ffdca21e4489967abcc709333c4835ee45059337::
https://api.github.com/repos/rails/rails,6682,dup_validation_fix_backport_for_1_9_3::3-2-stable,0,merged,activemodel::,"At the end of initialize_dup was added the call to super if it exists, so it also works with 1.8.7 where initialize_dup doesn't exist. This issu was introduced with the pull request #6324",b97e0a1127d45e25e4281d6c1b5fb9a57f0efea6::
https://api.github.com/repos/rails/rails,6670,3-2-stable::3-2-stable,0,closed,activemodel::,"See https://github.com/rails/rails/pull/6569 for master: https://github.com/rails/rails/pull/6671 This is a backport for 3-2-stable branch with exception changed to a deprecation warning. I only ran ActiveModel tests, so if you have bad test isolation you might have to fix some tests outside ActiveModel, if they use validates_format_of :)",9ce29c3a20efe6e97d83e7d03b070b58110fad00::
https://api.github.com/repos/rails/rails,6669,3-2-stable::3-2-stable,0,closed,,"See https://github.com/rails/rails/pull/6569 This is a backport for 3-2-stable branch with exception changed to a deprecation warning. I only ran ActiveModel tests, so if you have bad test isolation you might have to fix some tests outside ActiveModel, if they use validates_format_of :)",7def64a96840d439fdc29339cf5d1f4870605220::
https://api.github.com/repos/rails/rails,6664,3-2-stable::3-2-stable,0,closed,,"See https://github.com/rails/rails/pull/6569 This is a backport for 3-2-stable branch with exception changed to a deprecation warning. NOTE: The exception is changed into a warning in the second commit (and the two tests are also updated accordingly). I only ran ActiveModel tests, so if you have bad test isolation you might have to fix some tests outside ActiveModel, if they use validates_format_of :)",3c76156c865b9a90a86133988b17c9d6b6b1202a::06ca3c2acd54b7e296444fee163ad46ee1145410::8fbc328d01ca6cc600c1372dd39dd2faf652b1ad::4ba06019910b1a3772c67c01938ea11e9d102d71::02ba1764edfe5daba3939b7bd0f869bd4c4b5206::
https://api.github.com/repos/rails/rails,6649,logger_in_metal_3_2::3-2-stable,0,merged,actionpack::,Just backport that metal controller doesn't have logger method for 3.2 /cc @josevalim,3b1ea3d896a6a1ebefdf3fcd461396ddbf8df230::4717c2ffc6c2416cfbf5fb560689606eadd3b3c6::
https://api.github.com/repos/rails/rails,6447,add_backporting_instructions_to_contrib_guides::master,0,merged,docs::,I was looking for instructions on backporting changes the other day and wasn't able to find it anywhere. I updated the contrib guides based on the disccusion in #6420 and #6215. This should be `git checkout...`. I think you(me too) are used to our aliases. ::Good catch! :) I'll wait for more feedback on the overall direction and fix it then. ::,c97fb889a6db6c661853ce0612791a26524e7c50::
https://api.github.com/repos/rails/rails,6427,resolver_concurrency_fix_backport-3-2::3-2-stable,0,closed,,This is a backport of the following for 3-2-stable: 685192bbcba7f887236ddf43ebb7d7dcf7409bd9 and 719b008f1dae30c5fb6d09a371ae8d949c867a0c,26160ec1de79259ece2127141812736012e329e0::56ea5dfdd4adf74f3565f5d97d8724c73515eace::
https://api.github.com/repos/rails/rails,6327,string-interpolation::master,0,merged,,,80b681686a8ba58a1fd7868c067ecc8bed41df15::
https://api.github.com/repos/rails/rails,6066,remove_active_support_ruby_shim::master,0,closed,activesupport::,"I believe this removes 1.8 support, I'm not sure what else I need to remove or update so let me know please! /cc @fxn",ba9708d4d16562ce5a6bee8c60f4aa9f21260bf3::
https://api.github.com/repos/rails/rails,5105,3-2-stable::3-2-stable,0,closed,,Please ignore the .gitignore commit... git cherry-pick FTW...,20273eba6b81180636b5af529e3807d7fb98d0b0::942186b80568ad0d9264e17f776717047929d22f::00c0cc334faac747b7f4e2ae29f6b84012e41399::
https://api.github.com/repos/rails/rails,4280,3-2-backport-callbacks::3-2-stable,0,merged,,It resolves issue #4046,9f8f4c28718d5688f18140111eac517a5ef8142e::4e8286fe124dd5a54960fce191b86fa00010cd3b::5b8d27000b23e7561ef09d3ca3e50ac50bb5885b::40c8aa706adbb60ff9d289016fb9020d48969fea::
https://api.github.com/repos/rails/rails,4021,3-1-scope-with-lambda-duplicates::3-1-stable,0,merged,,backport #4011 to 3-1-stable /cc @jonleighton,9f7fe5d38b5064dbca99638ebe3877398c444e06::
https://api.github.com/repos/rails/rails,2939,url_for_fix_3_0::3-0-stable,0,merged,,This PR is a combination of this original PR... https://github.com/rails/rails/pull/2497 And a better fix from this commit... https://github.com/rails/rails/commit/8196c842b6f32271c23cba6b97918d32747018d8#actionpack/lib/action_dispatch/routing/url_for.rb This PR backports the fix to 3-0-stable using the cleaner solution.  This cleaner fix already exists in master and 3-1-stable.,45b7731838cf9f9033e531ea55cf4aea4a1cf51b::a8cfc997144233915d8daa372ad0a998f760cf2f::
https://api.github.com/repos/rails/rails,2921,exists_fix_3_1::3-1-stable,0,merged,,Backport to 3-1-stable of PR https://github.com/rails/rails/pull/2485,44a5849cfb0b83085244f14079d3d4b40be9a295::8f2f39ba905ae55dea53fb893363dfaea5852627::
https://api.github.com/repos/rails/rails,2919,exists_fix_3_0::3-0-stable,0,merged,,Backport to 3-0-stable of PR https://github.com/rails/rails/pull/2485,15dcdf6cf2c384614b1e8c1a64d5c113cc6b4e65::3e00e4992940f88f278d444fb7f67d6919691ba4::
https://api.github.com/repos/rails/rails,2605,3-1-stable-2602-backport::3-1-stable,0,merged,,Per @tenderlove :heart:,bf4714fe8214a4d92693541b6c9ba613bdc64ec3::
https://api.github.com/repos/rails/rails,1557,multiple-sources-sprockets-3-1::3-1-stable,0,merged,,cc. @josevalim,6e9714ca1e275ac0ce1479ea932e35dc04dedd8f::
