https://api.github.com/repos/rails/rails,41475,add-uncountable::main,0,merged,activemodel::,"Hello! 👋 I was confused, when got error: ```ruby 2.7.1 :001 > require 'active_model' => true 2.7.1 :002 > ActiveModel.version => Gem::Version.new(""6.1.1"") 2.7.1 :003 > class User 2.7.1 :004 >   extend ActiveModel::Naming 2.7.1 :005 > end => User 2.7.1 :006 > User.model_name.plural => ""users"" 2.7.1 :007 > User.model_name.singular => ""user"" 2.7.1 :008 > User.model_name.uncountable? Traceback (most recent call last): 21: from /home/artem/.rvm/gems/ruby-2.7.1/bin/ruby_executable_hooks:24:in `<main>' 20: from /home/artem/.rvm/gems/ruby-2.7.1/bin/ruby_executable_hooks:24:in `eval' 19: from /home/artem/.rvm/gems/ruby-2.7.1/bin/irb:23:in `<main>' 18: from /home/artem/.rvm/gems/ruby-2.7.1/bin/irb:23:in `load' 17: from /home/artem/.rvm/gems/ruby-2.7.1/gems/irb-1.3.2/exe/irb:11:in `<top (required)>' (irb):8:in `<main>': undefined method `uncountable?' for #<ActiveModel::Name:0x000056202b0bd3e8> (NoMethodError) # But in this case it work 2.7.1 :009 > ActiveModel::Naming.uncountable?(User) => false ``` This PR fixed undefined method error. Also, I think it's worth making a backport for Rails 5. What do you think? Thanks. I don't think we need the `attr_accessor` for `uncountable`. Let's define only `uncountable?`::Sounds good. I fixed. I need squash my commits?::Yes please::Squashed and rebased::",89db42b5e1f548e00cf6a25da07dafb1444e146a::
https://api.github.com/repos/rails/rails,41115,failing-test-on-ruby-master::main,0,merged,activerecord::,"https://github.com/ruby/bigdecimal/pull/180 is causing a test to fail when running activerecord against ruby master (eg. [here](https://buildkite.com/rails/rails/builds/74067#24ffeea4-7f61-4804-990f-84f00f26d545)). I've reported that to the author here: https://github.com/ruby/bigdecimal/issues/70#issuecomment-759832301 - but I'm not sure if it's considered correct behavior or not. In the meantime, I replaced it with tests where there should be no doubt about which direction to round in. cc @gmcgibbon since you added the test originally.While this makes sense from a Ruby perspective, I think it would be better not to switch on the assertions, but on the behaviour in the validator. Less Rails apps will be broken when they upgrade ruby versions this way if we keep the same casting expectations across versions.::I started writing that, but I think the new `BigDecimal` code is more correct. If anything, we should backport the fix for older `BigDecimal` versions. But then that would break all Rails apps (or fix the bug for all Rails apps, depending on how you look at it). If we do decide to keep it consistent across all ruby versions, we'll want to also update other places where we call `BigDecimal(float, precision). For example https://github.com/rails/rails/blob/master/activemodel/lib/active_model/type/decimal.rb#L46::You're right, the old behaviour is a bug. This looks good to me. Thanks!::",f9b4de06dcd12effb9d9e0865c600807e78461d9::
https://api.github.com/repos/rails/rails,41013,5-2-stable-fix-connection-pool-reaper::5-2-stable,0,closed,activerecord::,"Bring patches to rails 5.2 from rails 6+ to: · Make reaper use a single thread for all ConnectionPool Reapers (#36296) · Use WeakRef in Reaper to avoid leaking connection pools (#36345) ### Summary Backport of one bug and one feature solved in Rails 6+, non existent in Rails 5.1.7. After suffering the connection pool leakage issue in a real production environment that killed the servers in a few hours periodically, I forked Rails 5.2 to fix the issue using Reaper code from the corresponding fix in Rails 6+. While I was fixing the bug, I also brought the enhancement to use a single thread for connection pool reapers, which is really useful since we had a lot (nearly 100 per server) reaper threads running. Now down to one per application. I have tested the code in our production environment and it is working as expected. The code changes really belong to #36296 and #36345, there was no reason to add or remove code. ### Other Information Rails 5.2 is unable to close open threads generated by stablish_connection. I have suffered this issue in a production environment with thousands of users after upgrading 9 applications, having servers fail every few hours continuously. I have tested the same applications on Rails 5.1.7 and it worked as expected, however I didn't feel like downgrading was the answer. After researching I found #36345 had been fixed in Rails 6.1 and backported to Rails 6.0, but not to Rails 5.2. While I understand that Rails 5.2 is not under development, this bug can break a production environment, and I would really like for it to be fixed in Rails 5.2 so other users don't have to deal with it. I also found stackoverflow unresolved posts related to this issue, before answering them I'd love to point them to the official repo and not to my forked repo. Thanks for your time.",c98f55e6d3afee6915d05774bf16d0e58ac993bc::
https://api.github.com/repos/rails/rails,40897,backport-preload-links-header-config::6-1-stable,1,merged,actionview::docs::railties::,"PR #39939 added support for the `Link` header being generated automatically when using `stylesheet_link_tag` and `javascript_include_tag`. However not everything should be preloaded, e.g. a link to a legacy IE stylesheet has no need to be preloaded because IE doesn't support the header and in some browsers it will trigger the preload even though it's not used since it's inside an IE conditional comment. This leads to increased bandwith costs and slower application performance. To allow more flexibility for sites that may have complex needs for the `Link` header this commit adds a configuration option that disables it completely and leaves it up to the application to decide how to handle generating a `Link` header. NOTE: This is a backport of #40882 with the config added to `new_framework_defaults_6_1.rb` plus additional tests to ensure that the header isn't set when an application is being upgraded.",c55e32ec94c80168d3fbb7eace02cb5e72034e48::
https://api.github.com/repos/rails/rails,40882,add-preload-links-header-config::master,1,merged,actionview::docs::railties::,"PR #39939 added support for the `Link` header being generated automatically when using `stylesheet_link_tag` and `javascript_include_tag`. However not everything should be preloaded, e.g. a link to a legacy IE stylesheet has no need to be preloaded because IE doesn't support the header and in some browsers it will trigger the preload even though it's not used since it's inside an IE conditional comment. This leads to increased bandwith costs and slower application performance. To allow more flexibility for sites that may have complex needs for the `Link` header this commit adds a configuration option that disables it completely and leaves it up to the application to decide how to handle generating a `Link` header. NOTE: The intention is to backport this to 6-1-stable and add a new entry to `new_framework_defaults_6_1.rb` so that upgrading applications can opt into the default option of it being enabled since they're the most likely to be affected by the legacy IE issue.",200083c232a5879a77b01bd5d38b6a259ab769d9::
https://api.github.com/repos/rails/rails,40542,add-legacy_connection_handling-to-configuring-rails-apps-guide::master,0,merged,docs::,"While adopting the new framework defaults of Rails 6.1 in my current project, I noticed that there is no info about `legacy_connection_handling` in the guide. (We should backport this to 6-1-stable)",daaee9251d9b1a1abb190adf3389d5515ad5bcc8::
https://api.github.com/repos/rails/rails,40244,method-defined-inherits::master,0,merged,activerecord::,"Ruby 2.6 added a second parameter to `method_defined?` exactly for this use case. It avoid allocating an Array and then doing a linear search. It's a small but noticeable chunk of boot time (`0.4%` for us): ``` $ bundle exec stackprof .....dump --method='ActiveRecord::AutosaveAssociation::ClassMethods#define_non_cyclic_method' ActiveRecord::AutosaveAssociation::ClassMethods#define_non_cyclic_method (/tmp/bundle/ruby/3.0.0/bundler/gems/rails-1b2879404fd7/activerecord/lib/active_record/autosave_association.rb:158) samples:     2 self (0.0%)  /    208 total (0.4%) callers: 127  (   61.1%)  ActiveRecord::AutosaveAssociation::ClassMethods#add_autosave_association_callbacks 81  (   38.9%)  ActiveRecord::AutosaveAssociation::ClassMethods#define_autosave_validation_callbacks callees (206 total): 186  (   90.3%)  Module#instance_methods 10  (    4.9%)  Module#define_method 10  (    4.9%)  Array#include? ``` cc @rafaelfranca @tenderlove This is a large diff and a lot of duplication, which will be dropped again next time Rails bumps its minimum Ruby version. How about conditionally defining a small private helper method instead: ```ruby if Module.method(:method_defined?).arity == 1 # MRI 2.5 def non_cyclic_method_already_defined?(name) instance_methods(false).include?(name) end else def non_cyclic_method_already_defined?(name) method_defined?(name, false) end end ```::I understand the concern, I kinda had the same reaction when writing it. I'm not too fan about the private helper method though. Often time in such case people use refinements to backport Ruby features. I'll push a refinement version.::```suggestion instance_methods(false).include?(method.to_sym) ```::The house style seems to be to use an anonymous module for refinements: https://github.com/rails/rails/blob/315f8b46038d0ce8ba5ec11e8909715b21be221b/activejob/lib/active_job/arguments.rb#L73 https://github.com/rails/rails/blob/315f8b46038d0ce8ba5ec11e8909715b21be221b/activesupport/lib/active_support/core_ext/enumerable.rb#L233 https://github.com/rails/rails/pull/40182::🤦 ::Oh right, totally forgot.::",d6252aedadf1c02b45afdb6d842a2f42be9305ea::
https://api.github.com/repos/rails/rails,40167,active-storage-azure-config-5.2::5-2-stable,0,merged,activestorage::,"### Summary This is a backport of updates made to [master](https://github.com/rails/rails/pull/35096). In order to set custom options (e.g. a custom domain name) on the azure storage client, the ActiveStorage adapter must allow more options to be passed to the initializer. Currently `ActiveStorage::Service::AzureStorage` only allows for a fixed set of options. Here we add the ability to pass additional options to the initializer. ### Other Information This change allows government entities using the `core.usgovcloudapi.net` domain to use this service.",848348b050fc98d3b0bbe686fb806ce4073006af::
https://api.github.com/repos/rails/rails,40085,backport-38254::6-0-stable,0,merged,activesupport::,"This backports #38254 to `6-0-stable`, since it is a simple fix for a potentially flakey bug on Linux. Closes #40082.",3fed62cfb1f43d8df5a5ff31229a5ad03264186e::
https://api.github.com/repos/rails/rails,39990,fix-cve-2020-1867::5-1-stable,0,closed,actioncable::actionmailer::actionpack::actionview::activejob::activemodel::activerecord::activesupport::docs::rails-ujs::railties::,"### Summary This backports [JackMcs fix](https://github.com/rails/rails/commit/fbc7bec074b5ef9ae22f79ca5d9bafec7b276dd3) of [CVE-2020-8167](https://groups.google.com/g/rubyonrails-security/c/x9DixQDG9a0) to the Rails 5.1 line. ### Other Information [Today, the security vulnerability scanner brakeman released their new version 4.9.0](https://rubygems.org/gems/brakeman/versions/4.9.0), which included a warning for this CVE that was initially disclosed on May 18th. I think some people will get a warning like we did with the new version: ``` Confidence: Medium Category: Cross-Site Request Forgery Check: CSRFTokenForgeryCVE Message: Rails 5.1.X has a vulnerability that may allow CSRF token forgery. Upgrade to Rails 5.2.4.3 or patch ``` For convenience, I thought it might be useful to issue a new gem release for those who are not able to update, although I know that version 5.1 is no longer supported for some time now. It seems that this version is not very happy with the current CI though 🙈",abf3f79f95aa408424344569d41d282bb5d21372::a4b7e5c5d600144d1ce4a6ee0ad4f71e7744a5d0::
https://api.github.com/repos/rails/rails,39989,translate-refactor::master,0,merged,actionview::,"This disentangles the control flow between Action View's `translate` and I18n's `translate`.  In doing so, it fixes a handful of corner cases, for which tests have now been added.  It also reduces memory allocations, and improves speed when using a default: **Memory** ```ruby require ""benchmark/memory"" Benchmark.memory do |x| x.report(""warmup"") { translate(:""translations.foo""); translate(:""translations.html"") } x.report(""text"") { translate(:""translations.foo"") } x.report(""html"") { translate(:""translations.html"") } x.report(""text 1 default"") { translate(:""translations.missing"", default: :""translations.foo"") } x.report(""html 1 default"") { translate(:""translations.missing"", default: :""translations.html"") } x.report(""text 2 defaults"") { translate(:""translations.missing"", default: [:""translations.missing"", :""translations.foo""]) } x.report(""html 2 defaults"") { translate(:""translations.missing"", default: [:""translations.missing"", :""translations.html""]) } end ``` Before: ``` text     1.240k memsize (     0.000  retained) 13.000  objects (     0.000  retained) 2.000  strings (     0.000  retained) html     1.600k memsize (     0.000  retained) 19.000  objects (     0.000  retained) 2.000  strings (     0.000  retained) text 1 default     4.728k memsize (     1.200k retained) 39.000  objects (     4.000  retained) 5.000  strings (     0.000  retained) html 1 default     5.056k memsize (     1.160k retained) 41.000  objects (     3.000  retained) 4.000  strings (     0.000  retained) text 2 defaults     7.464k memsize (     2.392k retained) 54.000  objects (     6.000  retained) 4.000  strings (     0.000  retained) html 2 defaults     7.944k memsize (     2.384k retained) 60.000  objects (     6.000  retained) 4.000  strings (     0.000  retained) ``` After: ``` text   952.000  memsize (     0.000  retained) 9.000  objects (     0.000  retained) 1.000  strings (     0.000  retained) html     1.008k memsize (     0.000  retained) 10.000  objects (     0.000  retained) 1.000  strings (     0.000  retained) text 1 default     2.400k memsize (    40.000  retained) 24.000  objects (     1.000  retained) 4.000  strings (     0.000  retained) html 1 default     2.464k memsize (     0.000  retained) 22.000  objects (     0.000  retained) 2.000  strings (     0.000  retained) text 2 defaults     3.232k memsize (     0.000  retained) 30.000  objects (     0.000  retained) 2.000  strings (     0.000  retained) html 2 defaults     3.456k memsize (     0.000  retained) 32.000  objects (     0.000  retained) 2.000  strings (     0.000  retained) ``` **Speed** ```ruby require ""benchmark/ips"" Benchmark.ips do |x| x.report(""text"") { translate(:""translations.foo"") } x.report(""html"") { translate(:""translations.html"") } x.report(""text 1 default"") { translate(:""translations.missing"", default: :""translations.foo"") } x.report(""html 1 default"") { translate(:""translations.missing"", default: :""translations.html"") } x.report(""text 2 defaults"") { translate(:""translations.missing"", default: [:""translations.missing"", :""translations.foo""]) } x.report(""html 2 defaults"") { translate(:""translations.missing"", default: [:""translations.missing"", :""translations.html""]) } end ``` Before: ``` text     35.685k (± 0.7%) i/s -    179.050k in   5.017773s html     28.569k (± 3.1%) i/s -    143.871k in   5.040128s text 1 default     13.953k (± 2.0%) i/s -     70.737k in   5.071651s html 1 default     12.507k (± 0.4%) i/s -     63.546k in   5.080908s text 2 defaults      9.103k (± 0.3%) i/s -     46.308k in   5.087323s html 2 defaults      8.570k (± 4.3%) i/s -     43.071k in   5.034322s ``` After: ``` text     36.694k (± 2.0%) i/s -    186.864k in   5.094367s html     30.415k (± 0.5%) i/s -    152.900k in   5.027226s text 1 default     18.095k (± 2.7%) i/s -     91.086k in   5.036857s html 1 default     15.934k (± 1.7%) i/s -     80.223k in   5.036085s text 2 defaults     12.179k (± 0.6%) i/s -     61.659k in   5.062910s html 2 defaults     11.193k (± 2.1%) i/s -     56.406k in   5.041433s ``` --- In an effort to make this easier to review, I have broken it down into two logical commits.  The original code is complicated, but the changes are a bit easier to understand if you view each commit individually.  If I need to break this down further, let me know, and I will do my best. Do we have to update the docs for this change? Also I'm wondering what the motivation for this change is. Is it to make code like the following simpler? ``` translate([:apple, :pear]).join("", "") ``` instead of ``` ""#{translate(:apple)}, #{translate(:pear)}"" ```::This is to support [bulk lookup](https://github.com/ruby-i18n/i18n/blob/v1.6.0/lib/i18n.rb#L149-L158).  I doubt it's commonly used, but basic usage is currently supported: ```ruby helper.translate([:hello, :hello]) # => [""Hello world"", ""Hello world""] helper.translate([:missing, :missing], default: ""Hello world"") # => [""Hello world"", ""Hello world""] ``` However a few corner cases are broken: ```ruby helper.translate([:missing, :missing], default: :hello) # => ""Hello world"" helper.translate([:hello_html, :hello_html]).all?(&:html_safe?) # => false ``` Since `translate` is documented as [""Delegates to `I18n.translate`""](https://github.com/rails/rails/blob/8654891cc7d0ea80b67ef7d352cc81463f526532/actionview/lib/action_view/helpers/translation_helper.rb#L19-L20), I don't think we need to add further documentation. Alternatively, if we don't want to support this feature, I can remove this line.  I could also raise an `ArgumentError` when an array is passed. ::It looks like this relies on our backport of `Symbol#start_with?` to work on Ruby < 2.7, so this file should now require `active_support/core_ext/symbol/starts_ends_with`.::This is a bit confusing: the empty array isn't a sentinel value, it's telling I18n not to return a default so that the `raise` option takes effect. The clearest way to do this would be to omit the `default` option entirely. I was going to suggest moving this value inside `options`: ```patch diff --git a/actionview/lib/action_view/helpers/translation_helper.rb b/actionview/lib/action_view/helpers/translation_helper.rb index 76beeca7a3..67a8f3e66c 100644 --- a/actionview/lib/action_view/helpers/translation_helper.rb +++ b/actionview/lib/action_view/helpers/translation_helper.rb @@ -65,11 +65,11 @@ def translate(key, **options) end options[:raise] = true if options[:raise].nil? && ActionView::Base.raise_on_missing_translations -        sentinel = MISSING_TRANSLATION +        options[:default] = MISSING_TRANSLATION while key if (defaults.nil? || defaults.empty?) && !options[:raise].nil? -            sentinel = [].freeze # let I18n handle missing translation +            options.delete(:default) # let I18n handle missing translation end key = scope_key_by_partial(key) @@ -77,11 +77,11 @@ def translate(key, **options) if html_safe_translation_key?(key) html_safe_options ||= html_escape_translation_options(options) -            translation = I18n.translate(key, **html_safe_options, default: sentinel) -            return html_safe_translation(translation) unless translation.equal?(sentinel) +            translation = I18n.translate(key, **html_safe_options) +            return html_safe_translation(translation) unless translation.equal?(MISSING_TRANSLATION) else -            translation = I18n.translate(key, **options, default: sentinel) -            return translation unless translation.equal?(sentinel) +            translation = I18n.translate(key, **options) +            return translation unless translation.equal?(MISSING_TRANSLATION) end return defaults.first if defaults && !defaults.empty? && !defaults.first.is_a?(Symbol) ``` Until I realised it introduced a bug that wasn't covered by tests: ```ruby def test_translate_with_html_key_and_missing_default_and_raise_option assert_raise(I18n::MissingTranslationData) do translate(:'translations.missing_html', default: :'translations.missing_html', raise: true) end end ``` I'm still not sure how to make this any clearer, but would you mind adding that test coverage?::Good eyes, as always!  :eagle: :eyes:::I added the test, and changed `translation.equal?(sentinel)` to `translation.equal?(MISSING_TRANSLATION)` for clarity.  Also, I know it's not an enormous difference, but I changed `sentinel` to `guard`.  To me, `guard` is a bit less concrete, and thus more flexible in its interpretation and usage.  What do you think? ::I don't think this line is necessary: if `options[:raise] == false`, then we hit the ""nullify guard"" condition in the main loop, and the missing translation was already handled by the i18n gem.::Why freeze this array? If you're trying to avoid an allocation, you'll need to extract this to a constant.::This set will be regenerated for every new view instance, even though it never changes. How about adding a memoised singleton method on this module?::```suggestion break defaults.first if defaults.present? && !defaults.first.is_a?(Symbol) ```::```suggestion if defaults.blank? && !options[:raise].nil? ```::I think `guard` is a bit better, even if only because it's less intimidating!:::+1:  I believe this was vestigial from one of my earlier revisions.:::+1:  In retrospect, I should have left that out.  I was thinking of [this discussion](https://bugs.ruby-lang.org/issues/16600), which will be very cool when it happens, but it's not there yet.  It's probably not worth extracting a constant.:::+1:  Sounds good to me!::This isn't necessary, `blank?` is always available internally (except within Active Support itself): https://github.com/rails/rails/blob/1b2879404fd763b41fea234d24b008247d6d52c8/actionview/lib/action_view.rb#L27 https://github.com/rails/rails/blob/1b2879404fd763b41fea234d24b008247d6d52c8/activesupport/lib/active_support/rails.rb#L5-L7 https://github.com/rails/rails/blob/1b2879404fd763b41fea234d24b008247d6d52c8/activesupport/lib/active_support/rails.rb#L13-L14::How about removing `default` from the options hash here, as we did before? ```suggestion options[:default].is_a?(Array) ? options.delete(:default).compact : [options.delete(:default)] ``` That way when `default` is the only option provided, we still hit the `options.empty?` fast path in `html_escape_translation_options`. I suspect passing `default` as the only option is a pretty common case.::I'd prefer to extract a constant here, not just for performance but also to give the behaviour a name; `[]` seems like it should disable something or be a no-op in some way, when it actually enables i18n's missing translation handler. I'd also call this `default`; the name `guard` still sets off my ""something intricate and important is happening here!"" sense in the same way that `sentinel` did, when we haven't even gotten to the important part of the method yet. ```patch diff --git a/actionview/lib/action_view/helpers/translation_helper.rb b/actionview/lib/action_view/helpers/translation_helper.rb index 2c804f0736..8122f0470e 100644 --- a/actionview/lib/action_view/helpers/translation_helper.rb +++ b/actionview/lib/action_view/helpers/translation_helper.rb @@ -75,11 +75,11 @@ def translate(key, **options) end options[:raise] = true if options[:raise].nil? && ActionView::Base.raise_on_missing_translations -        guard = MISSING_TRANSLATION +        default = MISSING_TRANSLATION translation = while key if defaults.blank? && !options[:raise].nil? -            guard = [] # nullify guard, let I18n handle missing translation +            default = HANDLE_WITH_I18N end key = scope_key_by_partial(key) @@ -87,10 +87,10 @@ def translate(key, **options) if html_safe_translation_key?(key) html_safe_options ||= html_escape_translation_options(options) -            translated = I18n.translate(key, **html_safe_options, default: guard) +            translated = I18n.translate(key, **html_safe_options, default: default) break html_safe_translation(translated) unless translated.equal?(MISSING_TRANSLATION) else -            translated = I18n.translate(key, **options, default: guard) +            translated = I18n.translate(key, **options, default: default) break translated unless translated.equal?(MISSING_TRANSLATION) end @@ -121,6 +121,9 @@ def localize(object, **options) MISSING_TRANSLATION = Object.new private_constant :MISSING_TRANSLATION +        HANDLE_WITH_I18N = [].freeze +        private_constant :HANDLE_WITH_I18N + def self.i18n_option?(name) (@i18n_option_names ||= I18n::RESERVED_KEYS.to_set).include?(name) end ``` Feel free to disagree with me here (or in any other case!) by the way: I'm happy enough with the current code, this really is just a suggestion.::If you go for https://github.com/rails/rails/pull/39989#discussion_r487587243: ```suggestion unless name == :scope ```::Good suggestion! :+1:::I've renamed `guard` to `default` and `defaults` to `alternatives`.  I felt like having both `default` and `defaults` was too confusing, especially since they aren't actually connected.  Overall I think it's a big improvement! :+1: I also extracted the constant, but it felt marginally more natural to name the value by what it is rather than how it's used, so I named it `NO_DEFAULT`.  (And I left the code comment highlighting the hand-off to I18n.)  Any objections? <details> <summary>diff</summary> ```diff diff --git a/actionview/lib/action_view/helpers/translation_helper.rb b/actionview/lib/action_view/helpers/translation_helper.rb index 302dcfe6d8..513290275b 100644 --- a/actionview/lib/action_view/helpers/translation_helper.rb +++ b/actionview/lib/action_view/helpers/translation_helper.rb @@ -70,16 +70,16 @@ module TranslationHelper def translate(key, **options) return key.map { |k| translate(k, **options) } if key.is_a?(Array) -        defaults = if options.key?(:default) +        alternatives = if options.key?(:default) options[:default].is_a?(Array) ? options.delete(:default).compact : [options.delete(:default)] end options[:raise] = true if options[:raise].nil? && ActionView::Base.raise_on_missing_translations -        guard = MISSING_TRANSLATION +        default = MISSING_TRANSLATION translation = while key -          if defaults.blank? && !options[:raise].nil? -            guard = [] # nullify guard, let I18n handle missing translation +          if alternatives.blank? && !options[:raise].nil? +            default = NO_DEFAULT # let I18n handle missing translation end key = scope_key_by_partial(key) @@ -87,16 +87,16 @@ def translate(key, **options) if html_safe_translation_key?(key) html_safe_options ||= html_escape_translation_options(options) -            translated = I18n.translate(key, **html_safe_options, default: guard) +            translated = I18n.translate(key, **html_safe_options, default: default) break html_safe_translation(translated) unless translated.equal?(MISSING_TRANSLATION) else -            translated = I18n.translate(key, **options, default: guard) +            translated = I18n.translate(key, **options, default: default) break translated unless translated.equal?(MISSING_TRANSLATION) end -          break defaults.first if defaults.present? && !defaults.first.is_a?(Symbol) +          break alternatives.first if alternatives.present? && !alternatives.first.is_a?(Symbol) -          key = defaults&.shift +          key = alternatives&.shift end if key.nil? @@ -121,6 +121,9 @@ def localize(object, **options) MISSING_TRANSLATION = Object.new private_constant :MISSING_TRANSLATION +        NO_DEFAULT = [].freeze +        private_constant :NO_DEFAULT + def self.i18n_option?(name) (@i18n_option_names ||= I18n::RESERVED_KEYS.to_set).include?(name) end ``` </details> ::💯 `alternatives` is great, much clearer!::",98a76a50ed271c17bedcbc0f3e6efe7a530c3359::d81926fdacbeb384d211e22cff66195c1a753eb5::
https://api.github.com/repos/rails/rails,39924,backport-37850::6-0-stable,0,merged,railties::,"This backports 21c7199c0f0a0187298621631fbc3864c93ec8b9 of #37850 to `6-0-stable`, since #37800 was technically a regression. I did my best to preserve the style of 21c7199c0f0a0187298621631fbc3864c93ec8b9 while adhering to 6.0 expected behavior.",7d8cc2feb99b60cf0d2c76415b8b923246cca4a0::
https://api.github.com/repos/rails/rails,39919,6-0-activestorage-azure-blob::6-0-stable,0,closed,activestorage::docs::,"### Summary Backport the work from `master` to `6-0-stable` to make the ActiveStorage `AzureStorage` service easily usable. Azure has deprecated the previous `azure-storage` gem since rails 6.0 was released, and split everything into separate gems. @peterzhu2118 has already migrated the `AzureStorageService` on `master` to use the new `azure-storage-blob` gem. This backports that work, and other bugfixes/features in the `AzureStorage` service specifically that don't involve other changes within ActiveStorage (like the `#service_uri` deprecation) as that likely isn't relevant for `6-0-stable` and I don't need in my backport. It also includes Content Disposition headers being included in the S3 and Google Cloud storage services as well. I'm happy to revert these out of this branch if that is an issue. ### Other Information The PRs that originally applied these changes to master are: * https://github.com/rails/rails/pull/36715 * https://github.com/rails/rails/pull/36792 * https://github.com/rails/rails/pull/36866 * https://github.com/rails/rails/pull/36793 * https://github.com/rails/rails/pull/38747 _(I'm not sure if this is the done thing for backporting work, apologies if it isn't and please just close this in that case!)_",eef1754eb82a6e42b2060c3f08d4070a3d0da134::c662f73b07190c214408bcf7f13be0706ebcb2a1::af5769b71991301c05aaa561ab05fc62ed37731b::08d74f27a5d919037609bfc9bdd9331366291662::d7213e1300037df418c7cfd0ef4d1b0e13bf4e55::
https://api.github.com/repos/rails/rails,39806,CVE-2020-8163-regression::4-2-stable,0,merged,actionview::,### Summary Allow again the following non-reserved local names: `_ arg args block` Closes: #39301 ### Other Information See rationale at https://github.com/rails/rails/issues/39301#issuecomment-648885623 Tested notably against redmine 3.4 Includes tests backported from current rails. `ruby -I actionview/lib:actionview/test actionview/test/template/compiled_templates_test.rb`,1cd1e6c227cd3b03301a7536b93cacc1570b2a34::
https://api.github.com/repos/rails/rails,39769,backport_new_constant_for_forward_compatibility::6-0-stable,0,merged,activemodel::,"The purpose of backporting #39612 is for `Marshal.load(record.dump)` forward compatibility. Actually we never said we would keep Mashal compatibility between two versions of Rails, so we sometimes directly added and removed the internal objects. Theoretically, removing objects will lose backward compatibility and adding objects will lose forward compatibility. Example: * Rails 4.2/4.1 lost forward/backward compatibility due to entirely changed object layout * Rails 5.0/4.2 lost backward compatibility due to removed `MysqlDateTime` f1a0fa9e19b7e4ccaea191fc6cf0613880222ee7 * Rails 5.2/5.1 lost forward compatibility due to added `SQLite3Integer` #28379 * Rails 5.2/5.1 lost forward/backward compatibility due to added `Type::Json` and removed `MysqlJson`/`OID::Json` #29666 I'm not sure how much we should be aware of `Mashal.load` compatibility. Especially if we should keep perfectly forward compatibility, we almost have no chance to improve object layout (includes ivar usage). One possible idea to mitigate breaking forward compatibility is backporting new constant to the latest stable branch.",fecea8fe5d013941d7baf1a074651a61db1d75b2::ccbc2d055d6f70cd8ebe41d4fb81a230af796f8e::
https://api.github.com/repos/rails/rails,39730,6-0-stable-translate-in-layout::6-0-stable,0,closed,actionview::,"### Summary The replacement of `@virtual_path` with `@current_template.virtual_path` (introduced in [dd7a673][]) might have unintentionally resolved a quirk in how the `translate` helper method evaluated scoped keys. ### Other Information These tests are currently passing on `master`, but are failing on `6-0-stable`. This pull request is against the `6-0-stable` branch. ``` TranslationHelperTest#test_finds_translation_scoped_by_translate_in_layout: ActionView::Template::Error: translation missing: en.translations.templates.layout.foo /usr/local/bundle/gems/i18n-1.8.3/lib/i18n.rb:373:in `handle_exception' /usr/local/bundle/gems/i18n-1.8.3/lib/i18n.rb:211:in `translate' /rails/actionview/lib/action_view/helpers/translation_helper.rb:91:in `translate' /rails/actionview/test/fixtures/translations/templates/translate_in_layout.erb:2:in `block in __rails_actionview_test_fixtures_translations_templates_translate_in_layout_erb__3892919063673559343_46930294445700' ``` Assuming the fix in [dd7a673] was unintentional (I couldn't find mention of the bug in https://github.com/rails/rails/pull/39060 or the [CHANGELOG](https://github.com/rails/rails/blob/357e15290ab06af8b4f32dd480b48a8c6e31e9e7/actionview/CHANGELOG.md)), I wonder if backporting makes sense at all, since a bugfix would alter existing behavior that some applications might have worked-around. [dd7a673]: https://github.com/rails/rails/commit/dd7a673782f102d2b58194007bf18a8e496818e3#diff-cda406008ce3935156e8ba173b1e9837",1172f02e50051d0b41b4778e972272d6279fa94e::
https://api.github.com/repos/rails/rails,39639,backport-dns-rebinding-attacks-prevention::5-1-stable,0,closed,actioncable::actionmailer::actionpack::,"### Summary Already merged to master on #33145, this PR backports the DNS rebinding attacks prevention to Rails 5-1-stable.",56a57a38273a6386fde0c95b03d6e7973e926604::
https://api.github.com/repos/rails/rails,39500,backport-38684::6-0-stable,0,merged,activerecord::railties::,"In Rails 6.0 the connection specification name for the ActiveRecord::Base class is `primary`. In 6.1 we've changed it to be `ActiveRecord::Base` to match how other classes behave. Due to the way the schema migration table and connection to that table are handled in Active Record we need to generate classes on the connection so those connections are able to find the correct table. Applications don't create the table, Rails does, and the default schema migration class inherits directly from Active Record. Since the default connection in 6.0 is named `primary` we end up with a class name of `primary::SchemaMigration` which is not a valid constant name and causes problems with Zeitwerk. I realized however that I never backported #38684 to 6.0 which skips the creation of the class for `ActiveRecord::Base` since it can use the default. This should fix the issue for Zeitwrk since we're no longer creating a `primary::SchemaMigration` class. The other databases in a multi-db application won't have issues because they use their actual class name, therefore causing no issues for Zeitwerk since it follows the Active Model naming pattern. Ref: #36757",3335a0e79b308f5100e2b88536144307fd4db13f::
https://api.github.com/repos/rails/rails,39434,6_0-fix-reporter_test::6-0-stable,0,merged,railties::,"This backports #39379, fixing the [currently failing](https://buildkite.com/rails/rails/builds/69566#eca4e2ef-de6b-40f6-94cf-941ce41061dd/1079-1087) `6-0-stable` build.",cca17e59e94ca6f774a855034f7863b3850c1fbd::
https://api.github.com/repos/rails/rails,39332,patch-2::5-2-stable,0,closed,activestorage::,"This backport is important to keep the development environment useful in Rails 5.2 without monkey patching. Also, the original commit was intended to be applied in rails v5.2 first, not v6.",73c1c6f461c30666daf232c532fde77c2b1b8400::
https://api.github.com/repos/rails/rails,39304,zenspider/backtrace_filter_should_never_return_empty::master,0,merged,actionpack::activerecord::activesupport::railties::,"### Summary Empty backtraces means you didn't run any code, which isn't the case, and goes against the contract that Minitest.backtrace_cleaner expects. This fixes a bug I've seen in a number of reports. It would be nice if this got backported to whatever versions are active, as this keeps coming back on minitest issues.Since this is doing a `map`, `empty_guard` should not be necessary here, no?::I don't think we want to guard against an empty result here.  If `noise` needs to be the opposite of `silence`, the extra guard would be more like: ```ruby silenced = backtrace.select do |line| @silencers.any? do |s| s.call(line) end end # if everything has been silenced, `silence` will return everything silenced.size == backtrace.size ? [] : silenced ``` But I don't know how strict that contract is, so perhaps even this isn't necessary. ::If this is the only spot where `empty_guard` is necessary, perhaps it could be rolled into this method: ```ruby keep = @silencers.reduce(backtrace) do |bt, s| bt.reject { |line| s.call(line) } end keep.first ? keep : backtrace ``` The above code also sidesteps the issue of Enumerator not responding to `empty?`.::The strictness is the question... It IS strict on minitest, but this looks to be used in multiple locations so it doesn't necessarily apply here. It might be better to have a subclass JUST for `Minitest.backtrace_filter`. I can go either way.::No, not necessary... but doesn't hurt. If we pull the guard_empty down to the one below then it's a moot point and I'll unfactor the rest of these (tho, Iike the way that `process_collection` reads... thoughts?)::I like the `.first` change... I gotta ask, what's the point of making a known collection lazy? You already have the collection and things like `find` and `any?` are already shortcutting. That's why I took the `lazy` out. Totally fine with putting it back.::I _really_ don't like this change. Please read the comment on the commit for my thoughts.::Given how `SuppressedSummaryReporter` works, that means when you run tests with `inline` on and you have an error, you NEVER get a backtrace? That seems bad.::P.S. I lived the first 5ish years of my life in/around Lafayette!::In this case, using `first`, it avoids processing the entire collection.  It looks like the `lazy` was added in #35985 as a performance optimization.  Since it was for performance reasons, it would be nice to avoid calling `first` twice, but I don't see a way around that. ::@zenspider Haha, small world!  :earth_americas:  :smile:::This change is causing problems in master.  I've got some failing tests in master and with this change the backtrace is gone.  Without the change I can see the backtrace.  Why do we need this change?::",3116bdcebaf0db3e76c094ef62e77755a3b20812::39e8cab17ac388020865d38bd924e4f711a7a498::d0060f12061bf2b8962964abd67b413c601101b5::
https://api.github.com/repos/rails/rails,39124,autosave_multiple_times::master,0,merged,activerecord::regression::,"Since https://github.com/rails/rails/pull/38166, associations can only be autosaved once: after a record has been saved, `@new_record_before_save` will always be false. This assumes that records only transition to being persisted once, but there are two cases where it can happen multiple times: when the transaction that saved the record is rolled back, and when the persisted record is later duplicated. This caused a regression in our application from 6.0.2.2 to 6.0.3.rc1, so I'd like to backport this.",8fd418955edb686b5bb7c69f97fa3dc2d2350644::
https://api.github.com/repos/rails/rails,39112,deprecate_legacy_marshalling_load::master,0,merged,activemodel::,"Since #31827, marshalling attributes hash format is changed to improve performance because materializing lazy attribute hash is too expensive. In that time, we had kept an ability to load from legacy attributes format, since that performance improvement is backported to 5-1-stable and 5-0-stable. Now all supported versions will dump attributes as new format, the backward compatibity should no longer be needed.",f93b04afab15475817c638a8dbe20eb9ce672b54::
https://api.github.com/repos/rails/rails,38675,update-listen-rails6::6-0-stable,0,merged,docs::railties::,"### Summary This is a backport of https://github.com/rails/rails/pull/37788 to 6.0-stable. `listen` 3.2, among other fixes, removes the [unmaintained](https://github.com/e2/ruby_dep/pull/37) `ruby_dep` dependency, which incorrectly shows warnings when running on TruffleRuby: ``` $ bundle exec rails s RubyDep: WARNING: Your Ruby may not be supported. RubyDep: WARNING: Your Ruby is: 2.6.2 'truffleruby' (unrecognized). If you need this version supported, please open an issue at http://github.com/e2/ruby_dep RubyDep: WARNING: (To disable warnings, see:http://github.com/e2/ruby_dep/wiki/Disabling-warnings ) => Booting Puma => Rails 6.0.1 application starting in development => Run `rails server --help` for more startup options Puma starting in single mode... * Version 4.3.0 (truffleruby 19.3.0 - ruby 2.6.2), codename: Mysterious Traveller * Min threads: 5, max threads: 5 * Environment: development * Listening on tcp://127.0.0.1:3000 * Listening on tcp://[::1]:3000 Use Ctrl-C to stop ``` I am not aware of any issue by using a newer version of `listen`. https://github.com/guard/listen/releases/tag/v3.2.0 are the release notes and https://github.com/guard/listen/issues/465 is the issue asking for this new release. ddddedc487912e33edb7d78aec6bcf99b1312c6d is the commit that added the `< 3.2` version constraint. I guess that was just precaution (3.2 did not exist back then).",49348a95ad0c501688d83295565a3807ec05a6e2::
https://api.github.com/repos/rails/rails,38267,fix_kwargs_warning_in_activejob::master,0,merged,actionmailer::activejob::,"Reopened #38260. Related #38053, #38187, #38105, #38260. This is a reattempt to fix keyword arguments warnings in Active Job. Now Ruby (master) has `Hash.ruby2_keywords_hash{?,}` and that will be backported to 2.7.1. https://github.com/ruby/ruby/pull/2818 https://bugs.ruby-lang.org/issues/16486 I've emulated that for 2.7.0 and older versions. The difference from #38260 is storing only extra 3 bytes in exchange for requiring deployment order (deploy this change first, then update Ruby 2.6 to 2.7). This is just a thought experiment, safe (#38260) vs compact (#38267).::This is a great idea. I prefer this one.::Changed the method signature to allow kwargs to prepare a future change.::",fc678575961ada06a72746e438caae201a722205::8e452c710d9f8bb7dec24407c0c3c5508e26ef01::
https://api.github.com/repos/rails/rails,38260,fix_kwargs_warning_for_activejob::master,0,merged,actionmailer::activejob::,"Related #38053, #38187, #38105. This is a reattempt to fix keyword arguments warnings in Active Job. Now Ruby (master) has `Hash.ruby2_keywords_hash{?,}` and that will be backported to 2.7.1. https://github.com/ruby/ruby/pull/2818 https://bugs.ruby-lang.org/issues/16486 I've emulated that for 2.7.0 and older versions.This change is to excercise `perform_now` with keyword arguments, `perform_later` is already tested by `MultipleKwargsJob`. https://github.com/rails/rails/blob/d72f940d1612aa8b905214c06115db48af41e8ec/activejob/test/cases/test_helper_test.rb#L561-L570::This mean storing 25 characters, ~96 more bytes to the database just to get rid of a warning on Ruby. I don't think this is a good trade off.::This is still not future safe. Workers with old code will still break as soon we change the code to actually split the arguments. We should at least add a kwargs argument to the job with a default as `nil` right now so, when we have to split the arguments for real, the workers are ready to receive a pass them. But I'm not sure if we can even pass them right now, what makes this solution still not good enough.::I'm not sure why ""Workers with old code will still break as soon we change the code to actually split the arguments"", but I agree that ""We should at least add a kwargs argument to the job with a default"" as a future plan, that is to be required if Ruby team will decide to remove internal kwargs flag (my hope that removal should not be happen since there is a serialization/deserialization problem, though). Anyway, I'll revert this for now.::Let's say we deploy Rails X to production, the first request running on 6.1 add a job to the queue with the arguments and keyword arguments split. The job worker that fetches that job is still using Rails X-1, given the deploy is still happening. That same worker would have code that doesn't know how to deal with the split keyword arguments so it would only pass around the regular arguments and leave the keyword arguments out of the method call.::Thanks for the explanation. I see that concern is almost not for this change but for a future plan.::Right. As soon we release the code to deal with this is better. It means that the entire 6.1+ releases will be able to run Ruby 3.0 without having to release a version to prepare and a version to actually add support.::",950b39482d83593d18b926d080944dd78bb2adb2::c10b580909938b5d3ada77619087b4acae4c99cb::
https://api.github.com/repos/rails/rails,38204,fix-reading-conn-so-text-fixtures-raise-when-writing-on-replica::master,0,merged,activerecord::,"Since test fixtures share connections (due to transactional tests) we end up overwriting the reading configuration so Rails doesn't recognize it as a replica connection. This change ensures that if we're using the `reading` role that connections will always have prevent writes turned on. If you need a replica connection that does not block writes, you should use a different role name other than `:reading`. The db selector test and connection handlers test have been updated to test for these changes. In the db selector test we don't always have a writing handler so I updated test fixtures to return if that's nil. Lastly one test needed to be updated to use a different handler name due to it needing to write to successfully test what it needs to test. Fixes #37765 This needs to be backported to 6-0-stable.",1c98e6c0053033440c8ea5f3ee8e958d3a5e5b09::
https://api.github.com/repos/rails/rails,38140,HostAuthorization-to-Configuring-Middleware-guide::master,0,merged,docs::,"This commit copies info from https://github.com/rails/rails/pull/33145 ([an excellent changelog](https://github.com/rails/rails/blob/6-0-stable/railties/CHANGELOG.md)) to our guides. Closes https://github.com/rails/rails/issues/36959 Not sure whether there is a need mentioning `config.hosts` in the ""Upgrading to Rails 6.0"" guide since it is configured to work in the development environment by default and we guide how to deal with ""blocked host"" issue, see: https://github.com/rails/rails/blob/6-0-stable/actionpack/lib/action_dispatch/middleware/templates/rescues/blocked_host.html.erb I would like to backport this to `6-0-stable` so users will be able to find info about `ActionDispatch::HostAuthorization` middleware and how to configure it. Give credit to @gsamokovarov since I copied the info from the changelog. <3 [bogdanvlviv, Genadi Samokovarov]",1c6f8e3e0a01512d4aa9f4ba14876da117648c45::
https://api.github.com/repos/rails/rails,38108,fix-27-deprecation-activerecord::6-0-stable,0,merged,activerecord::,"This backports 7b7c986e3ef38b466040c1a4938fc072f7ced820 to 6-0-stable. I was seeing the following deprecation warning running my Rails app on 6-0-stable, but a fix for it already existed in master: ``` /Users/connorshea/.rbenv/versions/2.7.0/lib/ruby/gems/2.7.0/bundler/gems/rails-5e0354b99908/activerecord/lib/active_record/railties/collection_cache_association_loading.rb:7: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call /Users/connorshea/.rbenv/versions/2.7.0/lib/ruby/gems/2.7.0/bundler/gems/rails-5e0354b99908/activerecord/lib/active_record/railties/collection_cache_association_loading.rb:12: warning: The called method `relation_from_options' is defined here ``` This fixes the last deprecation warning from Rails that I see in my app :)",92bbeca672cfbdda432ecba74d44387884dce62d::
https://api.github.com/repos/rails/rails,38065,6_0_stable_template_syntax_error::6-0-stable,0,merged,actionview::,"Closes https://github.com/rails/rails/issues/37512. https://github.com/rails/rails/pull/36521 and https://github.com/rails/rails/pull/36532 both fix regressions in 6.0 (via https://github.com/rails/rails/pull/35308), so I think they should be backported.",c7bef8aa4a3b82d05f36a2c3ffb5c217b6f47cec::e350c4d638c28714a48c48f5594855cce301e3dd::
https://api.github.com/repos/rails/rails,38061,6_0_stable_unrelated_name_error::6-0-stable,0,merged,actionpack::activesupport::,"Closes https://github.com/rails/rails/issues/38060. https://github.com/rails/rails/pull/37834 fixes a problem that's new in Rails 6.0, so I think it should be backported as a bug fix.",6f108f8b1219d43a93d33f830034dc613d485337::
https://api.github.com/repos/rails/rails,37806,execute_batch-6-0-backport::6-0-stable,0,merged,activerecord::,This backports https://github.com/rails/rails/pull/37707 to 6-0-stable to make it possible to use databases/connectors without enabling/supporting multiple statements. I discussed the backport with @eileencodes,c1ba13464fc1eecfa6527ca53b3d8d67a49a6a8f::
https://api.github.com/repos/rails/rails,37797,issue-37779-escape-literal-colons::master,0,closed,activerecord::stale::,"### Summary Fixes #37779. This PR simply allows the ability to escape literal colons in SQL when using named bind params. See the above issue for a detailed description of the problem. <!-- Provide a general description of the code changes in your pull request... were there any bugs you had fixed? If so, mention them. If these bugs have open GitHub issues, be sure to tag them here as well, to keep the conversation linked together. --> ### Other Information If this proposal is accepted, I would love to also backport to 5.x as well. <!-- If there's anything else that's important and relevant to your pull request, mention that information here. This could include benchmarks, or other information. If you are updating any of the CHANGELOG files or are asked to update the CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file. Finally, if your pull request affects documentation or any non-code changes, guidelines for those changes are [available here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation) Thanks for contributing to Rails! -->",0ba7fa6f2704a9c1264728f8b1644fd43c7b4fe9::7ed5be282339fafe6b0f8cd1c55de1c252211019::0056b03599425396c01c27852cb6e54e1fc34f40::
https://api.github.com/repos/rails/rails,37679,cherry-pick-#31901-to-5-0::5-0-stable,0,closed,railties::,"#31901 fixes an issue where there's mixed output when running tests when the [minitest-reporters](https://github.com/kern/minitest-reporters) is imported. I know that 5.0 is not actively maintained anymore, and I'm fine if you decide to close this PR. But this is a trivial fix to backport, so I think it may be worth it. /cc @Kevinrob",fa2a296eda9030c36f526e645420428054a779b8::
https://api.github.com/repos/rails/rails,37608,fix-assertions-for-mail-with-legacy-parameterized-delivery-job::master,0,merged,actionmailer::,"We should backport this to `6-0-stable`. Fixes https://github.com/rails/rails/issues/37605 There is no rubocop rules for that sadly, but I think the convention is to indent multiline conditions ```ruby Base.descendants.map(&:delivery_job).include?(job_class) || ActionMailer::Parameterized::DeliveryJob == job_class ```::Fixed.::",37b72ff5dee6d41dc30ca2a9eeceb51f6623bd43::
https://api.github.com/repos/rails/rails,37595,improve-docs-of-load_defaults::master,0,closed,docs::railties::,"I changed `load_defaults` to `config.load_defaults` in the guide to emphasize its context, sorted headers ""With 'x.x'"" in descending and rephrased them to ""With 'x.x', it includes previous versions' new defaults"" and documented the method on https://api.rubyonrails.org. I think mapping the ""With 'x.x'"" with this text is too cumbersome, I've been wondering if we can rephrase the headers to communicate that it's <= 6.0 for instance. Maybe if we sort them in descending order and say something like ""With '6.0', these including previous versions' new defaults""?::Yeah, sorting them in descending and rephrasing them to emphasize that ""it includes previous versions' new defaults"" will definitely be easier to understand. Thanks for the advice. It would be great to backport to `6-0-stable` to refresh this on https://guides.rubyonrails.org when a new version of 6.0.x is released?::",18b2dd2e7a902576087d3beb6ad5d9f98b355b43::
https://api.github.com/repos/rails/rails,37334,6_0_stable_action_dispatch_response_autoload::6-0-stable,0,merged,actionpack::railties::,"Both https://github.com/rails/rails/pull/37228 and https://github.com/rails/rails/pull/37112 need to be backported to 6-0-stable to fix the problem described in https://github.com/rails/rails/pull/37112: after upgrading to 6.0.0 and running `app:update`, uncommenting this line has no effect: https://github.com/rails/rails/blob/66cabeda2c46c582d19738e1318be8d59584cc5b/railties/lib/rails/generators/rails/app/templates/config/initializers/new_framework_defaults_6_0.rb.tt#L19-L20",9346e6dc7eb29d6adf68dfe872b9037e8b75791e::362d3eeb5c113cdaedb8ac8f3c4b46ad2e6d8c8f::
https://api.github.com/repos/rails/rails,37328,sql_active_record_query_cache::master,0,merged,activerecord::,"Since https://github.com/rails/rails/pull/34602 the `sql.active_record` notification includes the connection that executed the query, but only when the result comes from the database, not the query cache. This change was suggested by @kamipo in https://github.com/rails/rails/pull/36456#discussion_r292138321. I'd like to make it separately from removing `connection_id`, so that it can be backported to 6-0-stable to improve the migration path.",cb7c92203ba436e21ee93488c7ff0ba48bbf044b::
https://api.github.com/repos/rails/rails,36947,patch-2::master,0,closed,actiontext::,"### Summary <!-- Provide a general description of the code changes in your pull request... were there any bugs you had fixed? If so, mention them. If these bugs have open GitHub issues, be sure to tag them here as well, to keep the conversation linked together. --> `render` returns a `ActionView::AbstractRenderer::RenderedTemplate`, whose rendered content is in the `body` attribute as a string. Without this fix, rendering this view will cause an undefined method `chomp` for `ActionView::AbstractRenderer::RenderedTemplate` exception. ### Other Information <!-- If there's anything else that's important and relevant to your pull request, mention that information here. This could include benchmarks, or other information. If you are updating any of the CHANGELOG files or are asked to update the CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file. Finally, if your pull request affects documentation or any non-code changes, guidelines for those changes are [available here](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation) Thanks for contributing to Rails! --> This should be backported to Rails 6.0.0",9988e2a2913a286e0c6679073a9de783865ec925::
https://api.github.com/repos/rails/rails,36905,6-0-test-db-backports::6-0-stable,0,merged,activerecord::railties::,Test of backports to double check CI,26ab0ad34be5c0b18b2164e6c22d04b5c18d1015::c550e7199eb22a4b4f15ddc88f9dc3e131876856::0169c93b339b31d51ba2fc18ac7e6850a343923a::4f912de2fd23b1ba3465a73d26d3dbaf732028cb::
https://api.github.com/repos/rails/rails,36782,move_database_exists_to_adapter::master,0,merged,activerecord::,"Follow up to #36766 (but not looking to backport this PR) Previously it was the responsibility of the database tasks to translate the invalid statement from creating a duplicate database into an `ActiveRecord::Tasks::DatabaseAlreadyExists` error. It's actually easier for us to do this detection inside of the adapter, where we already do a case statement on the return code to translate the error. This commit introduces `ActiveRecord::DatabaseAlreadyExists`, a subclass of `StatementInvalid`, and updates both `AbstractMysqlAdapter` and `PostgresqlAdapter` to return this more specific exception in that case. Because this is a subclass of the old exception, `StatementInvalid`, it should be backwards compatible with any code expecting that from create_database. This works for both `create_database(...)` and `execute(""CREATE DATABASE ..."")` ``` [1] pry(main)> ActiveRecord::Base.connection.create_database(""test"") (0.5ms)  CREATE DATABASE ""test"" ENCODING = 'utf8' ActiveRecord::DatabaseAlreadyExists: PG::DuplicateDatabase: ERROR:  database ""test"" already exists from /Users/jhawthorn/src/rails/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:90:in `async_exec' Caused by PG::DuplicateDatabase: ERROR:  database ""test"" already exists from /Users/jhawthorn/src/rails/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:90:in `async_exec' [2] pry(main)> ActiveRecord::Base.connection.execute(""CREATE DATABASE test"") (0.7ms)  CREATE DATABASE test ActiveRecord::DatabaseAlreadyExists: PG::DuplicateDatabase: ERROR:  database ""test"" already exists from /Users/jhawthorn/src/rails/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:90:in `async_exec' Caused by PG::DuplicateDatabase: ERROR:  database ""test"" already exists from /Users/jhawthorn/src/rails/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:90:in `async_exec' ```",69700c9ee760c5880fc80af70a89b42bb791cf98::
https://api.github.com/repos/rails/rails,36766,call_connection_error_number::master,0,merged,activerecord::,"`MySQLDatabaseTasks`, like `AbstractMysqlAdapter`, should be able to operate on any mysql adapter, not just mysql2. Errors having a .error_number attribute is a mysql2 specific API, which we (Rails) don't control, so we should instead use `connection.error_number(err)`, which we do control. This also updates tests to better test how this really works, previously it stubbed create_database to raise `Tasks::DatabaseAlreadyExists`, which can never happen. Refs #36653 (which is a great change!) cc @y-yagi @cpruitt @eileencodes I'd like to backport this to 6-0-stable",15c81c8ed4930574d9900a6f947d4e0ebaa82a2f::
https://api.github.com/repos/rails/rails,36744,fix-db-prepare::master,0,merged,activerecord::railties::,"During https://github.com/rails/rails/pull/36416 I forgot to move the conditional for dumping schema, that is present in https://github.com/rails/rails/blob/0e149abbd5affc43f80a5c9bf8b7a7c2a5905d53/activerecord/lib/active_record/railties/databases.rake#L92 This is causing issues in environments with limited file permissions that are preparing database. @eileencodes can we have it backported to 6-0-stable branch as well?",5c1f6d1ff655a4c49ddbebe65156c08c8e853b1d::
https://api.github.com/repos/rails/rails,36692,mysql2-adapter-timeout::master,0,merged,activerecord::,"This is a backport of a Shopify patch. When mysql2 client fails on a read timeout, it raises [Mysql2::Error::TimeoutError](https://github.com/brianmario/mysql2/pull/911/files#diff-634fc29a00423da17966525049aa8877R10) - which is currently wrapped into `ActiveRecord::StatementInvalid`. Based on our experience that's not a very descriptive exception class (the statement that times out is usually valid, so it's misleading) so we prefer to wrap it into its own (descriptive) exception. This PR makes `translate_exception` to wrap  `Mysql2::Error::TimeoutError` into `ActiveRecord::AdapterTimeout` which indicates that the timeout is coming from adapter, not from MySQL server. I'm open to hear alternative suggestions on the naming. I'm also aware that this is MySQL-only thing, but I think it's still worth doing. I looked for adapter timeouts for PG, but I couldn't find any specific exception for it. cc @casperisfine @rafaelfranca @Edouard-chin times -> time::I think ""while waiting for the server"" is better. from -> for::",080939c98724b039704ca8115ba610134d1edcff::
https://api.github.com/repos/rails/rails,36611,system_testing_rails_6::6-0-stable,0,merged,actionpack::,Making sure CI passes before backporting these changes,0826d0bf4dbaaa664d63ff380df4fe60bd7e6b31::5134a34c9c425ac388173d332d6802ef7ef3e360::f5c1f85c797a2ccec4ede9a86901f3ab1fcfe173::
https://api.github.com/repos/rails/rails,36602,system_testing_preload_2::master,0,merged,actionpack::,"Follow up to #36592 Older versions of selenium had `driver_path` on `::Selenium::WebDriver::Chrome` directly, not on `...::Service`. This avoids errors on those old versions and will preload properly if webdrivers is installed. I learned this because I broke tests on 6-0-stable when backporting the initial commit (oops! 😳). We'll probably want to also bump the selenium version on 6-0-stable to make the test added in #36592 pass.",cd4541a1aa7f306d59d167fade17dff17d57ac75::5dbc814ddfde99c4429532886aaec07c8d6ebb74::
https://api.github.com/repos/rails/rails,36394,treat-application-record-as-primary::master,0,merged,activerecord::railties::,"When someone has a multi-db application their `ApplicationRecord` will look like: ```ruby class ApplicationRecord < ActiveRecord::Base self.abstract_class = true connects_to database: { writing: :primary, reading: :replica } end ``` This will cause us to open 2 connections to ActiveRecord::Base's database when we actually only want 1. This is because Rails sees `ApplicationRecord` and thinks it's a new connection, not the existing `ActiveRecord::Base` connection because the `connection_specification_name` is different. This PR changes `ApplicationRecord` classes to consider themselves the same as the ""primary"" connection. Fixes #36382 Note: this needs a backport to 6-0-stable cc/ @tenderlove @jhawthorn @rafaelfranca @matthewd @morgoth I changed this because technically in a new app this is what Post would inherit from and checking `defined?` loaded `ApplicationRecord` in this test. In master if I change this line the same thing happens so I think that this more accurately demonstrates what a real app would load/unload.::",2f8b397258b66581409b0e6537f98ea9b56e9f19::
https://api.github.com/repos/rails/rails,36268,backport_36257_to_6-0-stable::6-0-stable,0,merged,railties::,### Summary This pull request backports #36257 into 6-0-stable branch because Rails 6.0 bumps the minimum version of SQLite by #32923. I wanted these two template files to include #36257 ### Other Information This branch has been made as follows to cherry-pick merged commit. ``` $ git cherry-pick -m 1 317543c ``` cc @vipulnsward @kamipo,fa415ed5280a38f323210aaa4a746217ec8a11b7::
https://api.github.com/repos/rails/rails,36107,add_more_release_notes::master,0,merged,docs::,"### Summary I've gone through the CHANGELOG for Action Pack, pulled out anything that was backported, rephrased some of the descriptions and found their PR's/commits as links. If there is anything that you feel I should remove, please let me know. 😄 We can expand on this, perhaps something like ~ `Raise an error when a root route exists and other is defined without name.`::This is internal of the framework so I think we should not include in the changelog.::Can we say `for handling parameter parsing errors`.::👍 Got it!::How do you like `Raise an ArgumentError when multiple root routes exists in the same context without as: naming specifications.`?::",fdb44b408225403c24e7eb22fa34e35e7b7cd4a5::
https://api.github.com/repos/rails/rails,35706,revert_35549_from_5_2_stable::5-2-stable,0,merged,actionpack::,"This reverts commit 4185881d09bb6077228aa82fcb7c0da7373d8aa3. We bumped on this when upgrading. IMO it's a great change in 6.0, but is a potentially breaking change that shouldn't be backported to 5-2-stable. cc @eileencodes @kamipo",cc26fc056e3ee141f6d86f10957959f6575d4171::
https://api.github.com/repos/rails/rails,35617,add-annotation-support-to-relations::master,0,merged,activerecord::,"#### Summary This pull request implements a small new feature that allows users to annotate generated SQL queries. A new method, `ActiveRecord::Relation#annotate`, has been added that allows annotating queries generated from the relation instance with block-style SQL comments. For example: ```ruby Post.annotate(""this is a comment"").where(id: 123).to_sql # SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""id"" = 123 /* this is a comment */ ``` The hope is to land this feature in time for Rails 6.0. 🙂🤞 #### Discussion This kind of annotation can be extremely useful when combined with instrumentation or other methods of tracking and analyzing queries generated at runtime, particularly in a large, mature application. The [`marginalia` gem](https://github.com/basecamp/marginalia) provides similarly useful functionality in some contexts, but currently operates on all queries within a request or job and can't be used to target specific queries. By hooking into `ActiveRecord::Relation` it's possible to annotate arbitrary scopes and model associations. ```ruby class Post < ActiveRecord::Base has_many :tags, -> { annotate(""association comment"") } scope :published, -> { where.not(published_at: nil).annotate(""scope comment"") } end ``` This PR also updates `ActiveRecord::Relation#update_all` and `ActiveRecord::Relation#delete_all` to respect any annotations on the receiving relation object. Multiple annotations may be added: ```ruby Post.where(id: 123).with_annotation(""foo"").annotate(""bar"") # SELECT ""posts"".* FROM ""posts"" WHERE ""posts"".""id"" = 123 /* foo */ /* bar */ ``` Not all queries issued from `ActiveRecord` can be annotated using this approach,  but many can. #### Implementation The implementation extends `Arel` under the hood by adding a new `Arel::Nodes::Comment` node and associated plumbing to work with them. ~Of note, `Arel::Nodes::Comment` is responsible for preventing SQL injection via comment escaping.~ ~Comment content is scrubbed of SQL block comment delimiters at creation time [here](https://github.com/rails/rails/blob/6d85bc596389ba0118fb90e843d1abc2a68fea6e/activerecord/lib/arel/nodes/annotation.rb#L39). This should be reviewed for correctness. :eyes:~ #### Example use with instrumentation Here's a toy example of how this could be used with `ActiveSupport::Notifications` instrumentation to perform basic analysis. ```ruby query_checker = Proc.new do |_, _, _, _, payload| query = payload[:sql] if query =~ /JOIN ""forbidden_table""/ && query !~ %r{/\* whitelisted \*/} Rails.logger.warn(""this is bad!"") end end ActiveSupport::Notifications.subscribe ""sql.active_record"", query_logger # This would be all right Post.annotate(""whitelisted"").joins(:forbidden_table).first # But this would raise eyebrows Post.joins(:forbidden_table).first ``` ### Rails Guides It might be useful to add documentation for this new method to the [Active Record Query Interface](https://guides.rubyonrails.org/active_record_querying.html) page. I can provide a separate PR for that or add it here if so.Why reject `nil?`? Why would someone pass `nil` for that method?::`tap` here is confusing an it would be better to just assign to a variable since the value itself is not returned.::This was an artifact of iterating on the implementation, I think. Good points, thank you. I've simplified things in the latest version.::Suggests there's a single comment per statement, when there's a single annotation that is a comment node. What would we call this if we had other comments in the statement? Annotation as well?::Should we catch magic comment injection here as well, e.g. `/*! … ` extensions in MySQL or `/*+` optimizer hints? We do prevent these cases due to the SQL visitor emitting spaces around the value. Would we notice the injection if it stopped emitting spaces? (And whose responsibility is it to recognize that: the SQL visitor or the node?)::The `with_` feels mismatched with other relation builder methods, suggesting e.g. an annotation that applies within the scope of a block. Analog would be `with_conditions` vs `where` or `with_limit` vs `limit`. Would compare with `Post.where(id: 123).annotate(""this is a comment"")` or similar.::Nice test coverage double delimiters. Do `#`/`--` comments interfere with inline comments at all?::> The `with_` feels mismatched with other relation builder methods Totally agreed. `annotate` fits much better, thanks. :+1: I've updated the diff.::> What would we call this if we had other comments in the statement? Annotation as well? Thinking of https://github.com/rails/rails/pull/35615 and the optimizer hints use case for context here. I think there's a compelling argument that we do want the concrete naming of `comment` and `optimizer_hints` as distinct statement properties. They may each be represented by an `Arel::Nodes::Annotation` node but syntactically they have different positional and presentational constraints and it makes sense to refer to them by their function. I've added acdd31616ce026241f4b8db44f50d5000627f4ab, which isn't strictly necessary for this PR, to demonstrate how I think both comments and hints may be represented as an annotation. Thoughts?::> Do `#`/`--` comments interfere with inline comments at all? They don't, nope. `#` and `--` are treated as any other characters inside a block comment. The [standard](https://ronsavage.github.io/SQL/sql-2003-2.bnf.html#bracketed%20comment) does technically allow for nested `/* ... */` blocks, though, so long as the delimiter pairs are balanced. Support for that is mixed, though — MySQL doesn't allow it — and at least in the [current diff](https://github.com/rails/rails/blob/3b12a5542236cf7a7365e5b4f9d61b96d962d55d/activerecord/lib/arel/nodes/comment.rb#L13) a determined user could get around this sanitization by manually constructing an `Arel::Nodes::SqlLiteral` and passing it instead of a `String` if they really wanted nested comments.::> Should we catch magic comment injection here as well, e.g. `/*! … ` extensions in MySQL or `/*+` optimizer hints? [...] (And whose responsibility is it to recognize that: the SQL visitor or the node?) This is an interesting question. 🙂I think if the functionality here were going to be limited strictly to generating straight inline SQL comments, we might consider putting the responsibility solely in the ~`Comment`~ `Annotation` node here. But if we want `Arel::Nodes::Annotation` to be able to represent optimization hints as well, a la https://github.com/rails/rails/pull/35615, then we need to let the visitor handle the delimiters since they're database dependent. I think there's value in generalizing the `Nodes::Annotation` node a bit to support hints. acdd31616ce026241f4b8db44f50d5000627f4ab demonstrates an approach for that. _There may be a separate question around how much the developer should be protected from themselves..._ _These annotations should never be coming from end user input, so arguably we could allow any input here without sanitization though we probably don't want to do that. It's probably a moot question and a digression, though, and at least [currently](https://github.com/rails/rails/blob/3b12a5542236cf7a7365e5b4f9d61b96d962d55d/activerecord/lib/arel/nodes/comment.rb#L13) there's an escape hatch via_ `Arel::Nodes::SqlLiteral`. > We do prevent these cases due to the SQL visitor emitting spaces around the value. Would we notice the injection if it stopped emitting spaces? I think there's a basic test in place for that [in `test/cases/arel/visitors/to_sql_test.rb`](https://github.com/rails/rails/blob/acdd31616ce026241f4b8db44f50d5000627f4ab/activerecord/test/cases/arel/visitors/to_sql_test.rb#L713) but perhaps that testing could be bulked up.::Wrapping my head around annotate with multiple arguments. Joining with a space in the SQL statement feels surprising, and I'm not sure what's meant by more than one annotation. For multivalue, I'd imagine we'd want a standard format and key/value pairs rather than arbitrary strings.::Seems the AST node is an `annotation`, since it's a specific usage of a comment that always appears at the end of the query.::Optimizer hints and annotation nodes are both serialized as comments in SQL, thanks to the SQL visitor, but as Arel nodes, does OptimizerHints have an _is-a_ relationship with Annotation? Consider a `Comment` mixin (or superclass?) that clarifies that their relationship is implementation only. Furthermore, should comment sanitization be the node's responsibility, or the SQL visitor's? /cc @kamipo ::I think in my mental model, `Annotation` was the superclass, representing a non-executable (hand-wavey term) piece of metadata added to the query. Maybe `Annotation`, which handles comment sanitization, is the mixin and `OptimizerHints` and `Comment` are the concrete classes. > Furthermore, should comment sanitization be the node's responsibility, or the SQL visitor's? I do think SQL comment sanitization should be done at the node level. At the node level it happens once, up front, at node creation time, rather than having to be repeated through multiple visitor methods. If a relation is used to generate multiple queries, the sanitization cost is paid once also. All types of annotations have to care about SQL comment injection, so I think it makes sense to centralize it. Visitors could layer on additional sanitization if needed for something database format-specific. From https://github.com/rails/rails/pull/35615#pullrequestreview-215377223: > Does this need different sanitization than `/* */` removal? Consider the hint `) …other SQL clauses… OPTION(`. That would result in a query error, as multiple `OPTION` clauses in a statement is invalid. (Doc [here](https://docs.microsoft.com/en-us/sql/t-sql/queries/option-clause-transact-sql?view=sql-server-2017).) I think the risk profile there is much lower and probably there's no need to sanitize it. (Sanitization would probably just result in a differently invalid query.) But if it did need to be escaped, that seems like something to handle in the database-specific visitor.::I see what you're saying. Perhaps if `Annotation` is the mixin and we're instantiating a `Comment` here then this property name `comment` makes sense.::> Joining with a space in the SQL statement feels surprising, and I'm not sure what's meant by more than one annotation. Yeah, that's a great point. I suppose I've done this because I could, not because I should. I'll walk it back. > For multivalue, I'd imagine we'd want a standard format and key/value pairs rather than arbitrary strings. Yeah, I'd considered this, i.e., accepting a hash and generating `""key1:val1,key2:val2""` strings, but that also seems like something that can be handled as per developer preferences at the application level.::(At least, I _think_ I see what you're saying. 🙂 If it seems like I've misinterpreted you please let me know.) Something that may be clear by inference but I'll make explicit, the naming at the `AR::Relation` level around ""annotate"" / ""annotation"" was chosen primarily because of the likely number of `:comment` / `:comments` associations and scopes in the wild, and wanting to avoid ambiguity or collision there. At the Arel AST level, in terms of the SQL domain, the term ""comment"" seems the most precise. Hence the intent to switch back to a `Comment` concrete node class and name the more generic mixin `Annotation`.::As of the latest code, there are now `Arel::Nodes::Comment` and `Arel::Nodes::OptimizerHints` classes that each mix in `Arel::Nodes::Annotation`. I think that naming makes the most sense in the SQL domain, but if you disagree I can change it around.::~~`:annotate` is no longer multi value.~~, ah nvm I was seeing old code.::This looks odd to me. All multi value query methods defined by `def multi_value_method(*args)` except the `annotate`.::There is no worth to share `Arel::Nodes::Annotation` anymore.::This is a little outside the norm for multi-value methods, but I believe this is a necessary compromise between the [desired](https://github.com/rails/rails/pull/35617#discussion_r266260622) API for `annotate` and the requirements of working with [`Relation::Merger`](https://github.com/rails/rails/blob/9c1adcaaf7ec27b5f994fe119c8a56516a514bea/activerecord/lib/active_record/relation/merger.rb#L76), e.g., to pass [this test](https://github.com/rails/rails/blob/9c1adcaaf7ec27b5f994fe119c8a56516a514bea/activerecord/test/cases/relation/merging_test.rb#L139).::What is the desired behavior for `User.annotate(""foo"").annotate(""bar"")`?::There is no reason to touch the `OptimizerHints` node in this PR anymore.::`OptimizerHints` is no longer impacted by this PR. :+1:::The desired result would be a single SQL comment, `/* foo bar */`. This is inline with how `#optimizer_hints` includes each hint in a single block, though of course that's required by the way hints are implemented across databases. The alternative would be `/* foo */ /* bar */`. Do you think that is preferable?::Would be a single SQL comment is fine for now (merging different relation comments `Post.annotate(""post comment"").joins(:tags).merge(Tag.annotate(""tag comment"")) #=> ""/* post comment tag comment */""` looks odd to me though). My point is that, if defined by `def annotate(comment)`, it reminds me of single value method (i.e. `User.annotate(""foo"").annotate(""bar"") # => /* bar */`, that is the reason for the my confusion https://github.com/rails/rails/pull/35617#discussion_r267547547). Since the `def annotate(comment)` makes any other confusion, it would be better to allow multiple values as multiple values query method like other multiple values query methods (`select`, `group`, etc.) for consistency for now. ::I'd not prefer the splat args for the internal node, this allows `Comment.new(single_value)` even the `values` expects multiple values, but that is not necessary flexibility for internal nodes.::Can you consolidate the duplicated `test/cases/adapters/*/annotate_test.rb`? Those are not adapter specific tests.::ah I see, that is for the quoting things for `assert_sql`, it is fine as is for now.::> it would be better to allow multiple values as multiple values query method like other multiple values query methods (`select`, `group`, etc.) for consistency for now I definitely see the value in consistency. I had changed to the current `def annotate(comment)` signature with a singular argument based on @jeremy's suggestion a few days ago. I can revert to accepting multiple arguments but I don't know if there will be any disagreement on the approach. > it reminds me of single value method (i.e. `User.annotate(""foo"").annotate(""bar"") # => /* bar */`, that is the reason for the my confusion I think that `User.annotate(""foo"").annotate(""bar"")` could be thought of in a similar way to `Post.where(id: [1,2]).where(state: ""published"")`, where the arguments are merged rather than replaced. (I realize the arguments that `where` accepts are actually much more complicated, but in common use cases I think the API feels similar.)::This has been removed. :+1:::There is no reason to add the unused internal API.::This was added because some developers do use `Arel` directly in applications. It has been removed. :+1:::I'm fine with `User.annotate(""foo"").annotate(""bar"") # => /* foo bar */`. But if it behaves so, the single value method like method definition makes me (and any other people) confused that the `annotate` is single value method (i.e. `User.annotate(""foo"").annotate(""bar"") # => /* bar */`, that is the reason for the my confusion https://github.com/rails/rails/pull/35617#discussion_r267547547). As a multiple values method, the `select` behaves `User.select(""foo"").select(""bar"") # => SELECT ""users"".""foo"", ""users"".""bar"" ...`, so as the same multiple values method, it is worth to be defined the `annotate` in the same way. Can you change it back to be defined in the multiple values method way? cc @jeremy ::Still remained.::How about joining multiple comments with `""; ""`? I think it is one solution to mitigate the issue `Post.annotate(""post comment"").joins(:tags).merge(Tag.annotate(""tag comment"")) #=> ""/* post comment tag comment */""`. ::```suggestion log = capture_sql do ```::```suggestion log = capture_sql do ```::```suggestion log = capture_sql do ```::```suggestion log = capture_sql do ```::```suggestion log = capture_sql do ```::```suggestion log = capture_sql do ```::```suggestion log = capture_sql do ```::```suggestion log = capture_sql do ```::```suggestion log = capture_sql do ```::Is this internal API necessary (no way to use it by public API (Active Record))? ::This was speculative. Removed. :+1:::I must have made a mistake while rebasing, sorry. It is now gone.::> Can you change it back to be defined in the multiple values method way? This has been done. :+1:::I don't think text content should be inserted into the user's annotation if it can be avoided. As a consumer of the API I wouldn't want that. After more reflection I think the best approach by far is actually to wrap each annotation in its own delimiters, e.g., ``` Post.annotate(""post comment"").joins(:tags).merge(Tag.annotate(""tag comment"")) #=> ""... /* post comment */ /* tag comment */"" ``` This solves the concerns with running them together, it makes it much simpler to detect or parse out annotation in instrumentation, and it prevents different developers from stepping on one another's annotations. I've been using a ""backport"" of this API in an experimental branch for a large refactor and after working with it a bit this is the behavior I'd want to have.::Is `annotate` a finder method? Just curious to understand this because the documentation on the above line says ``` To retrieve objects from the database, Active Record provides several finder methods. Each finder method allows you to pass arguments into it to perform certain queries on your database without writing raw SQL. ``` As per the changelog, it says `Add 'ActiveRecord::Relation#annotate' for adding SQL comments to its queries.` ::Hi, @abhaynikam! It's possible the description should be generalized a bit. Several other relation query methods arguably don't fit that documention sentence literally, either — `preload`, `create_with`, and `includes` being examples. Perhaps the intro sentence could be updated in another PR.::Thanks, @mattyoho .  That makes sense, I agree a few other methods do not fit the description. Great addition @mattyoho 🎉::About updating the description, I would say let remove methods which do not fit description sinces that particular documentation section is for understanding how to retrieve objects from database. I'll like to raise a PR if somebody from Rails team approve it is correct to update the doc 😊 ::",f41825809cf3d27f98467bd7bc005e5d6ed94828::
https://api.github.com/repos/rails/rails,35154,chore/sqlite1.4::master,0,merged,activerecord::,"sqlite3 v1.4 has been released just now. Since we don't specify `sqlite3` gem version by default in Gemfile, it'll break adapter loading. Should we backport it into 5.x branches? There [are no significant changes](https://github.com/sparklemotion/sqlite3-ruby/blob/master/CHANGELOG.rdoc#140) since 1.3.13 cc @tenderlove Can we change it to `~> 1.3`, `>= 1.3.6`?::sure thing! I was not sure about sqlite3 versioning. ::I **really** think you want this to be `"">= 1.3.6"", ""< 2.0""`. When/if sqlite3 releases a backwards-incompat 2.0, it's going to cause a whole lot of confusion when it's specified like this. ::",2a29202288c2625a84993a8d0b94ea507988b557::
https://api.github.com/repos/rails/rails,34963,better-composed-of-single-field-query::master,0,merged,activerecord::,"## Problem When using an aggregate with one mapping, e.g. ```ruby class Customer < ActiveRecord::Base composed_of :balance, class_name: ""Money"", mapping: %w(balance amount) end ``` The SQL query from `Customer.where(balance: (1..50).map { |amount| Money.new(amount) })` would be something like ```sql SELECT ""customers"".* FROM ""customers"" WHERE (((((((((((((((((((((((((((((((((((((((((((((((((""customers"".""balance"" = 1 OR ""customers"".""balance"" = 2) OR ""customers"".""balance"" = 3) OR ""customers"".""balance"" = 4) OR ""customers"".""balance"" = 5) OR ""customers"".""balance"" = 6) OR ""customers"".""balance"" = 7) OR ""customers"".""balance"" = 8) OR ""customers"".""balance"" = 9) OR ""customers"".""balance"" = 10) OR ""customers"".""balance"" = 11) OR ""customers"".""balance"" = 12) OR ""customers"".""balance"" = 13) OR ""customers"".""balance"" = 14) OR ""customers"".""balance"" = 15) OR ""customers"".""balance"" = 16) OR ""customers"".""balance"" = 17) OR ""customers"".""balance"" = 18) OR ""customers"".""balance"" = 19) OR ""customers"".""balance"" = 20) OR ""customers"".""balance"" = 21) OR ""customers"".""balance"" = 22) OR ""customers"".""balance"" = 23) OR ""customers"".""balance"" = 24) OR ""customers"".""balance"" = 25) OR ""customers"".""balance"" = 26) OR ""customers"".""balance"" = 27) OR ""customers"".""balance"" = 28) OR ""customers"".""balance"" = 29) OR ""customers"".""balance"" = 30) OR ""customers"".""balance"" = 31) OR ""customers"".""balance"" = 32) OR ""customers"".""balance"" = 33) OR ""customers"".""balance"" = 34) OR ""customers"".""balance"" = 35) OR ""customers"".""balance"" = 36) OR ""customers"".""balance"" = 37) OR ""customers"".""balance"" = 38) OR ""customers"".""balance"" = 39) OR ""customers"".""balance"" = 40) OR ""customers"".""balance"" = 41) OR ""customers"".""balance"" = 42) OR ""customers"".""balance"" = 43) OR ""customers"".""balance"" = 44) OR ""customers"".""balance"" = 45) OR ""customers"".""balance"" = 46) OR ""customers"".""balance"" = 47) OR ""customers"".""balance"" = 48) OR ""customers"".""balance"" = 49) OR ""customers"".""balance"" = 50) ``` instead of the simpler query that we would get from not using `composed_of` (i.e. querying using `Customer.where(balance: (1..50))`) ```sql SELECT ""customers"".* FROM ""customers"" WHERE ""customers"".""balance"" IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50) ``` https://stackoverflow.com/questions/782915/mysql-or-vs-in-performance shows this could have a performance impact, at least in older versions of mysql.  Mostly I just want to avoid a database regression by using `composed_of` to introduce an abstraction. ## Solution The code already had a special case for a single mapping, so I just separated this code path more to avoid building multiple conditions joined with OR.Can we not use `yield_self`? This make harder to backport.::Done.  Note that I needed to use different variable names from the `mapping.map` in the `else` branch to avoid ""shadowing outer local variable"" warnings.::I'd prefer using the same variable names in both path. ```suggestion field_attr, aggregate_attr = mapping.first ```::Use `public_send` instead since `respond_to?` doesn't include private/protected methods by default. https://ruby-doc.org/core-2.6/Object.html#method-i-respond_to-3F ```suggestion object.respond_to?(aggr_attr) ? object.public_send(aggr_attr) : object ```::That causes ""shadowing outer local variable"" ruby warnings::oh... I see...::",242fc54f57d8db96eb2d34b1db19b9a61d7412b7::b278db1d2361656c634c15c94ea981e6d0e327f9::9905cdc9465c482e193950e2f672c6c6c2e6ded1::
https://api.github.com/repos/rails/rails,34817,issue-34813::master,0,closed,activemodel::,"`#added?` without options shouldn't try to match by options See https://github.com/rails/rails/issues/34813#issuecomment-450375840 I know that we are working on https://github.com/rails/rails/pull/32313 that should introduce model for an error object(instead of using Hash), but there is two reasons why we should merge this to master: Improved test that describes `added?` method behavior better and also we should backport it to `5-2-stable` since we made regression in 5.2.2 ad739f59aa0fd81850010cedf992b81b24da9ff1. Closes #34813 would something like this be simpler? ```ruby normalized = normalize_detail(message, options) details[attribute.to_sym].any? {|e| normalized.all? {|k,v| e[k] == v} } ``` ::Well, actually it isn't the same, see an example ```ruby person = Person.new person.errors.add :name, :too_long, count: 25, actual_count: 42 # should return `false` since we are missing `actual_count: 42`, # but with your implementation it returns `true` assert_not person.errors.added? :name, :too_long, count: 25 ``` (I've added this case to the test in order to prevent any regression in the future)::",3c7f2ddb9772f9f595406eb2dc563f67fe4f41ba::
https://api.github.com/repos/rails/rails,34720,5-2-stable_ruby26::5-2-stable,0,merged,actioncable::actionpack::actionview::activerecord::activesupport::docs::railties::,"### Summary [Ruby 2.6.0-rc2 Released](https://www.ruby-lang.org/en/news/2018/12/15/ruby-2-6-0-rc2-released/) and Ruby 2.6 will be released on this December 25. I expect Rails 5.2 should run with Ruby 2.6 without errors/warnings. This pull request backports changes to 5-2-stable branch to suppress errors and warnings which have been already addressed in the master branch. I'm wondering if these kinds of backporting should be done by Rails committers and/or release manager. Let me open a pull request first. ### Other Information There are some errors remained. One can be ""fixed"" but it needs to backport pull requests with CHANGELOG. Another one, I do not know why it fails with 5-2-stable. * It has been addressed by #32938 to master branch. It has changelog entry then I did not backport it to this pull request. ```ruby $ cd activesupport $ bundle exec ruby -w -Itest test/core_ext/range_ext_test.rb -n /test_should_compare/ Run options: -n /test_should_compare/ --seed 24989 # Running: F Failure: RangeTest#test_should_compare_other_with_exclusive_end [test/core_ext/range_ext_test.rb:72]: Expected false to be truthy. bin/rails test test/core_ext/range_ext_test.rb:71 F Failure: RangeTest#test_should_compare_identical_exclusive [test/core_ext/range_ext_test.rb:68]: Expected false to be truthy. bin/rails test test/core_ext/range_ext_test.rb:67 F Failure: RangeTest#test_should_compare_identical_inclusive [test/core_ext/range_ext_test.rb:64]: Expected false to be truthy. bin/rails test test/core_ext/range_ext_test.rb:63 Finished in 0.001701s, 1763.5357 runs/s, 1763.5357 assertions/s. 3 runs, 3 assertions, 3 failures, 0 errors, 0 skips ``` * `test_restart_rails_server_with_custom_pid_file_path` fails It passes with the master branch. ```ruby $ cd railties $ bundle exec ruby -w -Itest test/application/server_test.rb -n test_restart_rails_server_with_custom_pid_file_path Run options: -n test_restart_rails_server_with_custom_pid_file_path --seed 41272 # Running: F Failure: ApplicationTests::ServerTest#test_restart_rails_server_with_custom_pid_file_path [test/application/server_test.rb:53]: ""Inherited"" expected, but got: ... Traceback (most recent call last): 2: from bin/rails:4:in `<main>' 1: from /home/yahonda/.rbenv/versions/2.6.0-rc2/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require' /home/yahonda/.rbenv/versions/2.6.0-rc2/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require': cannot load such file -- rails/commands (LoadError) . Expected ""...\r\n\e[1mTraceback\e[m (most recent call last):\r\n\t2: from bin/rails:4:in `<main>'\r\n\t1: from /home/yahonda/.rbenv/versions/2.6.0-rc2/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require'\r\n/home/yahonda/.rbenv/versions/2.6.0-rc2/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require': \e[1mcannot load such file -- rails/commands (\e[1;4mLoadError\e[m\e[1m)\e[m\r\n"" to include ""Inherited"". bin/rails test test/application/server_test.rb:35 Finished in 14.595938s, 0.0685 runs/s, 0.4111 assertions/s. 1 runs, 6 assertions, 1 failures, 0 errors, 0 skips ```Why is ff0af71 (and 48d1c48) necessary?::The deprecation warning should not be happened in the next stable release.::Removed this deprecation warning as far as I understand this file will not be removed in 5.2.x.::Can you fix CHANGELOG entry too? https://github.com/rails/rails/pull/34720/files#diff-4be3c90df95ede75a8d48016f370c0d9R7::Updated the changelog entry.::",4329735ac14c0f8a45d66a04c05f452f89c505b3::5a0f6efcab8eacb316acc1ee1b0887d12e4641a2::13bdad82b0b9f2cb0840318cd0e2729efacb4d97::445aa6ed9aa9d081b2a3f21811fc4601f35bf584::d7b9502576f00b6f6063041c20b9e14b9130c531::bd24ef67ff2cb2d378371db25bf65e6afe19cebb::e12df15f1b08cca583be7d2f27d82897f19ff23e::
https://api.github.com/repos/rails/rails,34669,5-2-stable_pg_with_ruby251::5-2-stable,0,merged,,"### Summary This pull request attempts to fix #34664 by increasing ramfs size before installing for CI against 5-2-stable. For master branch, https://github.com/rails/rails/pull/33861 has been merged, which depends on https://github.com/rails/rails/pull/33608. #33608 has not and should not be backported to 5-2-stable. Increasing ramfs should be a better way to address #34664 for 5-2-stable. cc @y-yagi",065bee3c46e683e96c23ec43770f7aefa789408d::ac7dbaf611b60007451deb5b4f6dd140dda43d4e::912d08226db0abc36be9f7532853050322158879::
https://api.github.com/repos/rails/rails,34591,new_delivery_job::master,0,merged,actionmailer::,"### Summary In https://github.com/rails/rails/pull/34367, we merged a breaking change to `actionmailer` that changed the parameters of `DeliveryJob`. This will cause upgrade pains for any app delivering mail in the background. This patch attempts to rectify the situation by reverting and deprecating `DeliveryJob` and `Parameterized::DeliveryJob` and introducing `NewDeliveryJob` to send either kind of mail. Because web and job workers aren't always deployed to in lockstep, and enqueued jobs can be worked off at any time during a deployment, we have two problems to solve: 1. Old delivery jobs need to be able to be worked off by a rails 6 job worker. 2. New delivery jobs have to be able to be worked off by an old rails 5.x job worker. So, the parameter change to `DeliveryJob` needs to be reverted and `Parameterized::DeliveryJob` needs to be brought back to satisfy problem 1. And, the `NewDeliveryJob` class needs to be backported to 5.x to satisfy problem 2. I'll followup with a backport PR if we can all agree on this course of action. cc @eileencodes @Edouard-chin I'm not sure `NewDeliveryJob` is the best name. We don't want users to have to change the constant name back after we fully remove `DeliveryJob` (and after a few years `NewDeliveryJob` will be a strange name cause it's not new anymore). What about a name that better describes the roll of this job AND has the new code like `MailDeliveryJob`?::Sorry missed this on the first round of review - I think `params` should be `nil` by default right? Since parameter jobs are a special kind of job?::Since `Parameterized::DeliveryJob` isn't released yet can we instead deprecate just `DeliveryJob` and then recommend the new one? If you need the `params` key then you should use the new one.::My plan was to deprecate `NewDeliveryJob` and rename to `DeliveryJob` in `6.2` or `7.0` but that will also cause problems for people that upgrade multiple versions at a time. I'll rename to `MailDeliveryJob`!::I removed `Parameterized::DeliveryJob` from the warning, but the warning will still happen for parameterized delivery jobs because its a subclass. I assume this is good enough?::I was thinking that `Parameterized::DeliveryJob` has never been released so we can delete the code that supported `Parameterized::DeliveryJob` and anyone who needs a `Parameterized::DeliveryJob` would use the new `MailDeliveryJob` instead. ::I think it is released in all versions since [`5.1.0`](https://github.com/rails/rails/blob/v5.1.0/actionmailer/lib/action_mailer/parameterized.rb#L146)::Ah I see I was thinking of this PR https://github.com/rails/rails/commit/251b9d4bd62bfc076969bd0751fa4cc6e95a4f33 which is only in master. ::This should say `MailDeliveryJob` now. Also let's add back in the Paramertized deprecation since I was wrong about when it was added.::It looks like this one mention of `NewDeliveryJob` stuck around even though most others were updated to `MailDeliveryJob` instead?::Fixed. Thanks::",f5050d998def98563f8fa4b381c09f563681f159::
https://api.github.com/repos/rails/rails,34502,master::master,0,closed,docs::,"…nqueued with ActiveJobs. ### Summary I've updated the Rails Guide on Testing to reflect testing emails that have been delivered with the `deliver_later` method. The example provided in the original guide does not take that that into account or show the more recent assertions that can be used in functional and system tests. ### Other Information This is my first PR, so please let me know how I could make this better!> will show only those emails that have been queued for delivery I think this sentence is confusing, the ""queued for delivery"" might make people think about `deliver_later`, but that's actually the opposite (email sent with with `deliver_now` will be in the deliveries array). Maybe we can say ""The `ActionMailer::Base.deliveries` method will show only those emails that have been performed.""::We could inherit from `ActionDispatch::SystemTestCase` if someone copy/pastes this but we would need to add a `driven_by` line.::This isn't quite right. I think we should promote using `assert_enqueued_emails` when wanting to check email jobs enqueued without needing access to the actual message. Otherwise, use `assert_emails`. These assertions no longer has strict relationships with delivery methods.::@gmcgibbon yeah, I may need to make this PR for the 5.2 version of Rails and then modify the note for version 6. Does that sound right?::No problem @gmcgibbon I can add that. I wasn't sure if the Rails opinion was they should be inheriting from ApplicationSystemTestCase since the generator does that by default.::@gmcgibbon I wasn't sure about this `include ActionMailer::TestHelper` for Rails 6 either.::You can remove it :), it gets included automatically on rails 6.0 https://github.com/rails/rails/commit/64a9759aff949761f1d79b010e4817a91f3ee226::Sure. Reword this for the `master` patch, and then if you want to backport this patch to `5-2-stable` (in another PR) you can keep this wording.::",2607b144393ca64f95ca924ef0983705b74a9d58::85f5014b80da01c4c870a984d1d1da49b9f94d37::
https://api.github.com/repos/rails/rails,34363,docs-cache-key-note-5-2::master,0,merged,activerecord::docs::,"### Summary `ActiveRecord::Base#cache_key` will now return a stable key without a timestamp. Therefore I just replaced `cache_key` with `cache_key_with_version` in the Caching with Rails guide.Since the documentation is versioned for 6.0, I think we can probably just remove the timestamp in the previous note instead of specifying this. We might want to backport this change to `5-2-stable` once this is merged.::@gmcgibbon Thank you for reviewing. I removed the timestamp in the previous note and change pull request title, summary. ::I think we should update the code to use the two methods that are now using by default to generate the key with the id and timestamp and also update this note to talk about the two methods. ::@rafaelfranca Thank you for review. I changed the notes again and updated the sample code.::This code is artificial to showcase the methods. This is not how we write the guides. I think we should only use `cache_key_with_version` here.::@rafaelfranca Thanks! Fix the code to use only `cache_key_with_version` method and also fixed the note.::According to [the documentation on `ActiveRecord::Base.cache_versioning`](https://github.com/rails/rails/blob/b5302d5a820b078b6488104dd695a679e5a49623/activerecord/lib/active_record/integration.rb#L23), it is going to be true by default on 6.0's release. Do we really need to change these docs on master in that case? Seems like maybe we should just backport a find replace of `cache_key` => `cache_key_with_version` to the guides for `5.2`.::@gmcgibbon Thanks! I returned the note to the original and just replaced `cache_key` with `cache_key_with_version`. Since it was also used in the ""Conditional GET support"" section, I replaced it. ::Perfect! Please squash your commits and I'll merge. Any concerns with this @rafaelfranca?::Actually, one last thing. Can you also change your base branch to `5-2-stable`? Master has Rails 6 on it currently but this is specific to 5.2.::@gmcgibbon I cleaned my commits! `cache_versioning` will be `true` by default on Rails 6.0 and [it be also true on Rails 5.2](https://github.com/rails/rails/blob/v5.2.1/railties/lib/rails/application/configuration.rb#L94). `cache_key` returns key without a timestamp if `cache_versioning` is `true`. I think that this change is also necessary for master. What do you think? ``` Product.cache_versioning = false     # 5.1 or earlier default Product.last.cache_key               # => ""products/1-20181116023527886197"" Product.last.cache_key_with_version  # => ""products/1-20181116023527886197"" Product.cache_versioning = true      # 5.2 or later default Product.last.cache_key               # => ""products/1"" Product.last.cache_key_with_version  # => ""products/1-20181116023527886197"" ```::You are correct. 👍 Sorry, that comment confused me about the current behaviour.::",96a31c41afc0ca1ee84f1927822dea33992c8db8::
https://api.github.com/repos/rails/rails,34228,52-lazy_mysql_version_check_support::5-2-stable,0,closed,activerecord::,"### Summary Will allow sub classes to override the protected `#check_version` method hook if desired. For example, this will be most helpful in sub classes that wish to support lazy initialization because the version check can be postponed until the connection is ready to be initialized. This is a backport of what is being applied in Rails `master`. ### Other Information @tenderlove This is a follow-up to this [PR](https://github.com/rails/rails/pull/34227) to ensure support is back ported to Rails 5.2 at a minimum.",3514c30a9088528321cfe22c1e5ec0072b299c4a::
https://api.github.com/repos/rails/rails,34120,query_attribute_small_num::master,0,closed,activerecord::,"If a value of virtual attribute is numeric whose absolute value is less than one, `to_i` returns incorrect result. I think removing this behavior is a way to go, but that needs deprecation cycle (#29059). Meanwhile, this fixes #22429 with keeping backport possible.",2ee083a7183fcc512db06a916e9f58cc3b62715c::
https://api.github.com/repos/rails/rails,33902,related-to-31727::master,0,merged,,"`ActiveRecord::Migrator.migrations_path=` was deprecated in #31727. This commit fixes: - `ActiveRecord::Migrator.migrations_path=` is deprecated, but not `ActiveRecord::Migrator.migrations_paths=` - Adds missing space The warning including this commit: ``` DEPRECATION WARNING: `ActiveRecord::Migrator.migrations_path=` is now deprecated and will be removed in Rails 6.0. You can set the `migrations_paths` on the `connection` instead through the `database.yml`, or use `ActiveRecord::Migrator.migrations_paths=`. ``` Since It was deprecated in Rails 5.2 we should backport it to the `5-2-stable` branch. Related to #31727 r? @eileencodes",d48a9ebe9a81004e7d6354a2ad882facee4995ca::
https://api.github.com/repos/rails/rails,33899,follow-up-33405::master,0,merged,,"The issue #32584 was fixed in #33405 by adding foreign key constraint to the `active_storage_attachments` table for blobs. This commit implements fix on app-level in order to ensure that users can't delete a blob with attachments even if they don't have the foreign key constraint. See a related discussion in the Campfire: https://3.basecamp.com/3076981/buckets/24956/chats/12416418@1236718899 Note that, we should backport it to `5-2-stable` too. Related to #33405 r? @georgeclaghorn",be0d22a8e1465a4a30f262ac348edf87daee03e9::
https://api.github.com/repos/rails/rails,33829,encode-filename::master,0,merged,,"### Summary A few years ago, @stanhu tried to support non-ascii encodings for `send_data` and `send_file`. https://github.com/rails/rails/pull/21461 but it's still not merged because it lacks tests and some points to be fixed. In the PR, [@jeremy told us how he encodes](https://github.com/rails/rails/pull/21461#discussion_r41824447) and actually it's the same [how activestorage encodes file name now]( https://github.com/rails/rails/commit/63395aba5a96cf7f915ac97c2ac1c42f58a9a850) I changed `ActiveStorage::Filename::Parameters` to `ActionController::DataStreaming::DispositionFilenameParameters` to encode in `send_data` and `send_file` and share the logic. <details> <summary> I tested on Chrome, IE11, Safari and Firefox </summary> #### Chrome ![chrome](https://user-images.githubusercontent.com/1796864/45262704-1b6bbc80-b457-11e8-84b4-6559ffcc6d4b.gif) #### IE11 ![ie](https://user-images.githubusercontent.com/1796864/45262722-6d144700-b457-11e8-9074-14e6fd94ca6e.gif) #### Safari ![safari](https://user-images.githubusercontent.com/1796864/45262765-325ede80-b458-11e8-95f4-d6be2e59d776.gif) #### Firefox ![firefox](https://user-images.githubusercontent.com/1796864/45262746-ef047000-b457-11e8-958c-884ac1cf2e30.gif) #### Script ```ruby # 1. Put this file into the root of rails repo # 2. `bundle exec rackup -b 0.0.0.0` # 3. `open localhost:9292` require 'rails/all' tmpdir = Dir.mktmpdir Dir.chdir(tmpdir) ENV['DATABASE_URL'] = ""sqlite3://#{File.join(tmpdir, 'database.sql')}"" class TestApp < Rails::Application secrets.secret_key_base = 'secret_key_base' end Rails.application.configure do config.load_defaults 5.2 config.eager_load = true config.active_storage.service = :local config.logger = ActiveSupport::Logger.new(STDOUT) config.active_storage.service_configurations = { local: { service: 'Disk', root: tmpdir } } config.after_initialize do |app| ActiveRecord::Schema.define do create_table :users, force: true do |t| end load File.join(Bundler.rubygems.find_name('activestorage').first.full_gem_path, 'db/migrate/20170806125915_create_active_storage_tables.rb') CreateActiveStorageTables.new.change end class User < ActiveRecord::Base has_one_attached :avatar end class UsersController < ActionController::Base def index @user = User.new render inline: <<~ERB <%= form_with model: @user do |f| %> <%= f.file_field :avatar %> <%= f.submit %> <% end %> <ul> <%- User.all.each do |u| %> <li> <div>id: <%= u.id %></div> <%= link_to 'download via send_data', user_path(u.id) %> <%= link_to 'download via rails_blob_path', rails_blob_path(u.avatar, disposition: 'attachment') %> </li> <% end %> </ul> ERB end def create User.create!(params.require(:user).permit(:avatar)) redirect_to users_path end def show user = User.find(params[:id]) send_data user.avatar.download, disposition: 'attachment', filename: user.avatar.filename.to_s end end app.routes.prepend do root to: redirect('/users') resources :users end user = User.new user.avatar.attach(io: File.open(__FILE__), filename: %(あ""い""\\う/え'お.rb)) user.save! end end Rails.application.initialize! run Rails.application at_exit do FileUtils.rm_rf(tmpdir) end ``` </details> ### Other Information ~I'm wondering if we can backport this change to older versions~ -> I created backport gem https://github.com/mtsmfm/action_dispatch-http-content_dispositionIs this `:nodoc:` comment necessary? What is it excluding from the docs?::Sorry, it's my bad::This merits more detail. At minimum, we ought to name the specifications implemented (RFCs [2231](https://tools.ietf.org/html/rfc2231) and [5987](https://tools.ietf.org/html/rfc5987)) and provide examples.::✅ ::Don't we need to require this file one? Also `action_controller` because it is not in Active Storage.::If we want to reuse inside Active Storage I don't think it should be inside `DataStreaming`. `ActionController:: DispositionFilename` is a better name.::I think we don't have to require because this file is under `app` and it's on Rails engine::okay, I'll rename::ah, you also meant `DispositionFilenameParameters` should be renamed to `DispositionFilename`, right?::Can we avoid [internally] exposing this class entirely? AFAICS, this method's result is only used in: https://github.com/rails/rails/blob/b2eb1d1c55a59fee1e6c4cba7030d8ceb524267c/activestorage/lib/active_storage/service.rb#L125 (And that method seems to have more in common with the surrounding lines in `send_file_headers!`, too.)::> Can we avoid [internally] exposing this class entirely? Hmm, how can I avoid? AFAIK, there's no way to share this logic across gems without exposing class/module::I think Matthew’s suggesting removing the `parameters` method here and using the new class directly in  `ActiveStorage::Service#content_disposition_with`.::gotcha::I was thinking of something like `ActionController::ContentDisposition.format(:inline, filename: ""hello.jpg"") # => ""inline; filename=[...]""` So we still need to expose a constant (and following @rafaelfranca's suggestion to move it out of the DataStreaming namespace), but having it do the work internally, and just return a string. It just feels a bit odd to me that we're exposing the class _instance_, when all we want to do is call `to_s` on it.::Right, but maybe `DispositionFilenameParameter` is better.::Cool, I'll do that::@rafaelfranca Now I think this class should be put into the same place as `ActionDispatch::Http::UploadedFile`. It seems all helper stuff is placed in `ActionDispatch`. So I propose to rename this class to `ActionDispatch::Http::ContentDisposition`. What do you think?::This require should be probably inside `lib/active_storage/service.rb`::Good point. Makes sense to me.::",890485cfce4c361c03a41ec23b0ba187007818cc::
https://api.github.com/repos/rails/rails,33785,follow-up-33773-33779::master,0,merged,,"Related to #33773`:null_store` isn't clear enough for us? I feel this like a cosmetic change.::I think `:null_store` could be, but from ""the default store in the test environment."" not clear about what kind of store we are talking about.::Okey I'll accept ""not clear about what kind of store we are talking about"" this time. But we generally do not accept pull request only changing the changelog. https://github.com/rails/rails/pull/32669#issuecomment-383125549 ::I still more lean to `ActiveSupport::Cache::NullStore` in order to reflect our docs https://edgeguides.rubyonrails.org/caching_with_rails.html#activesupport-cache-nullstore. > But we generally do not accept pull request only changing the changelog. #32669 (comment) As I remember @rafaelfranca wanted to say me that it was annoying(I admitted that it was annoying) that I was doing those cleanups often. It is better to do that during preparing ""Ruby on Rails 6.0 Release Notes"" guide. I'm not sure that we don't allow contributors to fix the changelogs since it is related to documentation. If we don't allow fix the changelogs we should add the mention about it to the guides, but I'm not sure that it is a good idea. The main reason why I was doing those cleanups of the changelogs is that once it took me an extra few hours after I [prepared Ruby on Rails 5.2 Release Notes](https://github.com/rails/rails/commit/7fd6d69af2f5fcea70c5c7df7d75e547ef9c807e) because [I had to remove entries that backported to 5.1 from changelogs and from Ruby on Rails 5.2 Release Note guide](https://github.com/rails/rails/pull/32281). Anyway I don't want to violate our rules. Please feel free to close this Pull Request if it violates our rules.::",ff718abcba6fd8ca5972f019524836bbd1d068d2::
https://api.github.com/repos/rails/rails,33744,fixes-27852::master,0,merged,,"Issue #27852 reports that when `rails db:create` fails, it causes leaking of user's DB credentials to $stderr. We print a DB's configuration hash in order to help users more quickly to figure out what could be wrong with his configuration. This commit changes message from ""Couldn't create database for #{configuration.inspect}"" to ""Couldn't create '#{configuration['database']}' database. Please check your configuration."". There are two PRs that fixing it #27878, #27879, but they need a bit more work. I decided help to finish this and added Author of those PRs credit in this commit. Since it is a security issue, I think we should backport it to `5-2-stable`, and `5-1-stable`. Guided by https://edgeguides.rubyonrails.org/maintenance_policy.html#security-issues Fixes #27852 Closes #27879 Related to #27878 [Alexander Marrs & bogdanvlviv]",9b455fe6f0e5d21e8c428da5bdba7d0f3162aef7::
https://api.github.com/repos/rails/rails,33656,follow-up-33413::master,0,merged,,Context https://github.com/rails/rails/pull/33413#issuecomment-414137587 We should backport it to `5-2-stable` too. /cc @javan,0e77706dc5d2928e945c34b9ac49ff0807888ba5::
https://api.github.com/repos/rails/rails,33608,use_utf8mb4::master,0,merged,activerecord::,"### Summary This pull request implements #33596. It includes these changes: * Replace `utf8` character set with `utf8mb4` to support supplementary characters including emoji * Removed `utf8_unicode_ci` collation from Active Record unit test databases to let MySQL server use the default collation for the character set * Bump the minimum version of MySQL to 5.7.9 and MariaDB to 10.2.2 to support `utf8mb4` character set and 3072 bytes key length with InnoDB *  Addressed `Specified key was too long; max key length is 1000 bytes` for MyISAM table in the test by using InnoDB storage engine * CI against MySQL 5.7Do we need the limit, since max key length is now 3072 bytes?::Should we omit the default collation? Then for MySQL 8 and later we'll be sure to test against its new default choices.::Let's explain it a little so people understand why we've made the change.::There is another limit for MyISAM storage engine since it uses `ENGINE=MyISAM` option. https://dev.mysql.com/doc/refman/5.7/en/myisam-storage-engine.html > The maximum key length is 1000 bytes. This can also be changed by changing the source and recompiling. For the case of a key longer than 250 bytes, a larger key block size than the default of 1024 bytes is used. Another idea is removing `ENGINE=MyISAM` option. This table is created for `type: :fulltext` since MySQL used to support FULLTEXT option only with MyISAM storage engine. Starting from MySQL 5.6, InnoDB storage engine also supports  FULLTEXT option. Then we may not need `ENGINE=MyISAM` option and `limit: 250` anymore.::Agreed. Removed the default collation and pushed the commit.::Sure. Let me have some more time to update the changelog entry.::Removed `ENGINE=MyISAM` option and `limit: 250`.::Ah yes, I didn't notice MyISAM! Glad we can remove it.::it is not happened by this PR, but I prefer consistent formatting `%x( command ""args"" )` than `%x( command ""args "")`. ```diff diff --git a/activerecord/Rakefile b/activerecord/Rakefile index 86ec547622..fae56a51bb 100644 --- a/activerecord/Rakefile +++ b/activerecord/Rakefile @@ -94,8 +94,8 @@ namespace :db do desc ""Build the MySQL test databases"" task :build do config = ARTest.config[""connections""][""mysql2""] -      %x( mysql --user=#{config[""arunit""][""username""]} --password=#{config[""arunit""][""password""]} -e ""create DATABASE #{config[""arunit""][""database""]} DEFAULT CHARACTER SET utf8mb4 "") -      %x( mysql --user=#{config[""arunit2""][""username""]} --password=#{config[""arunit2""][""password""]} -e ""create DATABASE #{config[""arunit2""][""database""]} DEFAULT CHARACTER SET utf8mb4 "") +      %x( mysql --user=#{config[""arunit""][""username""]} --password=#{config[""arunit""][""password""]} -e ""create DATABASE #{config[""arunit""][""database""]} DEFAULT CHARACTER SET utf8mb4"" ) +      %x( mysql --user=#{config[""arunit2""][""username""]} --password=#{config[""arunit2""][""password""]} -e ""create DATABASE #{config[""arunit2""][""database""]} DEFAULT CHARACTER SET utf8mb4"" ) end desc ""Drop the MySQL test databases"" ```::Added some more entries why we need utf8mb4 character set.::Thanks for the review. Remove trailing spaces.::Using default collation in both connections would lose the purpose this test. At least one connection should be given non default collation. See https://github.com/rails/rails/commit/d5ad2037455a03261d680d143257ba253d8a7112::Required 5.7.9 is not for the first GA version of MySQL 5.7 but is for the first version of introduced `innodb_default_row_format` (`DYNAMIC` by default). `innodb_default_row_format` is required for CI passed with utf8mb4, MariaDB 10.2.2 is the first version (and backported to 10.1.32), so if using MariaDB 10.1.31, probably CI would fail with this branch. https://mariadb.com/kb/en/library/xtradbinnodb-server-system-variables/#innodb_default_row_format::Thanks for the review. Restored `collation: utf8mb4_unicode_ci` for `test_mysql_connection_collation_is_configured` ::I did not know that. Updated to show different messages for MariaDB. It may not be necessary then please advise.::What does 5.6.33 mean?::When I tested at Travis CI by setting too high version to show MariaDB 10.3 version. It was ""5.6.33"". ``` /home/travis/build/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:57:in `initialize': Your version of MySQL (5.6.33) is too old. Active Record supports MySQL >= 5.7.9. (RuntimeError) ``` But it must be wrong there may be something wrong since I installed MariaDB 10.3 locally and it says ""10.3.9"" as follows. ``` Your version of MariaDB (10.3.9) is too old. Active Record supports MariaDB >= 10.2.2 (RuntimeError) ``` ::✂️ redundant parentheses. b2c1e29c14b91b290b30c928c63253d1555e0fd9::Thanks. Rebased from the latest master.::Bumping the minimum MySQL/MariaDB versions is important for new apps creating a database using the default charset, but it also affects all existing apps, many of which have already switched to utf8mb4 on their own and would continue to behave properly after this change despite running an older database. Perhaps we could require a newer db for new apps but allow existing apps to continue to use older versions. One possibility is to have `create_database` do the version check, but only when `:charset` is not specified.::Thanks for the comment. I still wanted to bump the minimum version of MySQL and MariaDB to support utf8mb4 character set without any my.cnf changes. I believe many users have successfully migrated to utf8mb4 character set using MySQL 5.5 and 5.6. Also, there is plenty number of users who just configured utf8mb4 character set and have been struggling with ""ERROR 1071 (42000): Specified key was too long; max key length is 767 bytes"". i.e. Googled ""utf8mb4 Specified key was too long"" and found more than 10,000 articles. To address this error with MySQL 5.5 and 5.6, my.cnf needs update to change `innodb_file_per_table`, `innodb_file_format` and `innodb_large_prefix` to non-default value. MySQL 5.7.9 and MariaDB 10.2.2 introduces `innodb_default_row_format` to allow longer 3072 byte key size by default. No need to change my.cnf at all to support utf8mb4 character set. I think the biggest advantage to bump MySQL version to 5.7 and MariaDB 10.2.2 is no need to change my.cnf at all to support utf8mb4 character set. I might have misunderstood your point. Further discussions are appreciated. ::I get all the reasoning but should not that decision come from the users? If they want to change the my.cnf file to have support to `utf8mb4` but still use Rails 6.0 with MySQL 5.5 they should be able to. I don't see any reason that an application running MySQL 5.5 with the proper my.cnf config can't work with your current code. If it can't I believe it is better to only change the default when the version is 5.7.9 than forcing everyone to upgrade MySQL just to use Rails 6.::Thanks for the feedback. I think I get points of review from Jeremy and Rafael and still, I'd like to keep this pull request as it is for now. Because without this pull request users can use utf8mb4 with MySQL 5.5 with some necessary changes in my.cnf. I am thinking that the main point of this pull request is ""by default"". Upgrading MySQL server version is not an easy task, but still, it is a good timing bump the minimum requirement of MySQL when Rails major version bumps from 5 to 6. I'd like to see some more feedback if many of these feedback prefers not to bump the minimum version of MySQL I'll revise or close this pull request. Thanks again for the useful feedback.::@matthewd @tenderlove can you give us your opinion about this?::@yahonda Agreed that Rails 6 apps should have correct ""by default"" utf-8 charset behavior with MySQL/MariaDB and that bumping the required db version is a strong way to guarantee it. I suggest we allow existing deployed apps to upgrade to Rails 6 if they have taken responsibility for compatibility. For example, if they have already migrated to utf8mb4 on an AWS Aurora cluster with MySQL 5.6, then they already set `encoding: utf8mb4` in config/database.yml and we can trust their configuration. So perhaps we can require modern databases by default, but also allow ""migrated"" databases: * New Rails 6 apps require modern MySQL/MariaDB. * Upgrading Rails 6 apps that do not specify encoding in database.yml, and hence inherit the new default encoding, also require modern MySQL/MariaDB. * Upgrading Rails 6 apps that explicitly specify encoding in database.yml are assumed to be using a compatible, properly configured database. I think we could do this with a version check in `initialize` that's only triggered when `!config.include?(:encoding)`.::To be clear, I'm not suggesting closing this PR either! This change is very desirable, and so is an ""escape hatch"" for existing app deployments that are already compatible. If there are other MySQL/MariaDB features we'd like to rely on, or old database support we'd like to drop from the adapter, we can certainly update our minimum version requirements for those reasons as well.::I noticed that [lib/active_record/tasks/mysql_database_tasks.rb](https://github.com/rails/rails/blob/53be0132c3f66dd8510921215d940641bbfd9588/activerecord/lib/active_record/tasks/mysql_database_tasks.rb#L77-L82) is using `config[:encoding]` as default charset, whereas we fall back to utf8mb4 here regardless of configured encoding. ```ruby def creation_options Hash.new.tap do |options| options[:charset]     = configuration[""encoding""]   if configuration.include? ""encoding"" ``` It's preexisting behavior, but should we do the same here? e.g. `options[:charset] || @config[:encoding] || 'utf8mb4'`::I wish we had named this `:charset` instead of `:encoding` long ago 😅::I think I get lost on the version interactions here... if new/recent MySQL/MariaDB has good default behaviour for encoding, and older versions _can_ be configured to have the good behaviour (but might not be), and if you're using an old version that _isn't_ configured well then everything will still work fine but you'll get an error from some DDL if you aren't overriding default lengths (is that right?)... then I'm not sure we need to do anything. Bumping our compatible server versions just to enforce ""good encodings are good"" seems pretty aggressive to me. It may not be our recommended configuration, but I'd want compelling internal driver benefits to warrant outright refusing to talk to peoples databases. You _should_ use `utf8mb4`, which is also what you get automatically from a modern DB server... but I don't see why even a brand new application shouldn't still work with an arbitrarily-encoded database, if the only implication is that you might have encoding issues. There are plenty of app-external things you _should_ be doing, but it's not our job to enforce them. (""The kernel version you're using has a known bug in the ext4 driver; refusing to boot Rails""?)::Thanks for additional feedbacks. I'll update my pull request to relax database version requirements. I need to take a look at the differences between `charset` and `encoding` first. ::",cd8be30d74c9a0352b2f31a9628027bda4447c09::e2b1ec526ddce103184d233c134b0fcf4702d948::1b047bf01dc553dc94cc947fc324bec042449b96::a132d6279e1a4b93ca673179b54bdcce3a6a0130::
https://api.github.com/repos/rails/rails,33567,backport-uri-unescape-fixes::5-2-stable,0,merged,,"This is a backport of https://github.com/rails/rails/pull/32183 to 5-2-stable. /cc @eileencodes Is this the right way to do backports? I cherry-picked the commit we need in Rails 5.2, should I have grabbed the merge commit instead?",c32da7e307b5c269b40a2bf191cae346769b0a1c::
https://api.github.com/repos/rails/rails,33466,am-model-name-match::master,0,merged,,"The purpose of the module seems to quack like a string, so this gives it parity. The `match?` core extension [was added](https://github.com/rails/rails/commit/575dbeeefcaafeb566afc07cdd8b55603b698d9f) for ActiveSupport 5.1, although only for Regexp and not String. Not sure if this is worth backporting.",790e2bd18cc3a8f40c9c0c2901f099afe5d5cfd5::
https://api.github.com/repos/rails/rails,33413,active-storage-direct-uploads-multiple-submit-buttons::master,0,merged,activestorage::,"Often times forms have more than one submit button enabling different actions, there are [various ways to use this with Rails](https://stackoverflow.com/questions/3027149/how-do-i-create-multiple-submit-buttons-for-the-same-form-in-rails). ![multiple submits](http://i.imgur.com/bSaToGv.png) Currently `activestorage.js` takes a somewhat naive approach in just using the first `input[type=submit]` inside a form to `click()` and submit the form after direct uploads. This PR utilizes the name and value from `form._ujsData` to use the input the User has really clicked, when submitting the form after an upload. I'm not too happy with the code myself, so this is more of a question if Rails should even support multiple submit buttons per form or not. If so, it might be possible for me to find a cleaner approach. Edit: When this fix is finshed, it might be better if I backport it to 5-2-stable before. `activestorage.js` doesn't depend on rails-ujs so we can't rely on help from it. Even if we could, those ""private"" expando properties aren't meant to be accessed directly. Maybe there's an easier way to track which submit button was clicked? Something like: ```js let button = findElement(form, ""input[type=submit]:active, input[type=submit]"") ``` (untested!)::Yes, thats understandable. ::We can't rely Turbolinks events since not all apps use it. I'd add a new `click` listener here: https://github.com/rails/rails/blob/ba1dab1e3b32a7c81cb9b8bdc22429f6620a3833/activestorage/app/javascript/activestorage/ujs.js#L10-L11 The handler can check if the `event.target` is a submit button and record the last clicked button in a `WeakMap` using the button's form as the key.::This won't handle clicks on dynamically inserted elements (ajax loaded content, Turbolinks page change, etc).::",880f977925601c3afe125274b5cc95e150341a9f::
https://api.github.com/repos/rails/rails,33313,fix/statement-cache-issue::4-2-stable,0,closed,,This is a backport for rails 4.2 fixes: https://github.com/rails/rails/issues/30266,66b1583e4e8490017fbb0377992fe580c602c075::6f5216382b55ae6e3f269957a5f20345cf720150::
https://api.github.com/repos/rails/rails,33261,backport-a845ffd-to-5-2-stable::5-2-stable,0,merged,,"Incompatibility of Direct Uploads & Mirror Service Since #32732 might be fixed only for Rails 6.0, #33255 should be backported to 5-2-stable directly. cherry-pick a845ffdbd6d02f2166c24524e85ed67598b11938",f0771bb78eadf6882f62bb31d56ae7ea43884456::
https://api.github.com/repos/rails/rails,33188,pg-1.1::master,0,merged,,"pg-1.1 is planned to deprecate some behavior. I (tried to) discussed this [here](https://bitbucket.org/ged/ruby-pg/issues/277/deprecation-warnings-for-query-methods). It currently warns at every method invocation, but I plan to change it to warm only once and to add an environment variable to disable the warning entirely. I'm also open to disable the most prominent warning about async_exec vs. async_exec_params until the next rails-5.x releases are out. Fixes #33185the inline rescue there is a bit worrying, why is it needed? ::Would exec_params be safe as a 5.2 backport? (would we need to backport to 5.1/5.0/4.2 as well?) ::also I find the semantics a bit confusing cause I would expect exec_params to work like exec and async_exec_params to work like async_exec ... but it appears that exec_params is always async. ::This method receives user inputs and cast it to Array. They can be malformed and that will be raised in pg-2.0. See [this commit](https://bitbucket.org/ged/ruby-pg/commits/1b081326b346368e70c9c03ee7080e28d6b3a3dc). The rescue is not there for values retrieved from the database.::maybe we explicitly rescue TypeError then with a tiny comment about it? ``` value = begin @pg_decoder.decode(value) rescue TypeError # malformed array string is treated as [], will raise in PG 2.0 gem # this keeps a consistent implementation [] end ``` I do wonder if we should just let this error float back to the user cause they are sending in something PG can not handle so its surprising to have input eaten. ::> Would exec_params be safe as a 5.2 backport? Yes, `exec_params` has been there since pg-0.15.0. And starting with pg-1.1.0 it will be a alias for `async_exec_params`. In pg < 1.1 `exec_params` did what `sync_exec_params` will do in pg-1.1. `sync_exec_params` differed from `async_exec_params`, in that it doesn't stop at signals. It delayes signal processing until the SQL statement has been finished. Using `exec_params` instead of `async_exec` is therefore kind of regression regarding signals. But there are still other pg methods in use which delay signal processing equally and it is only valid when running with pg < 1.1, so that I don't think it's actually a problem. I asked to get the other methods fixed in PR #32820, but then we came to the conclusion, that it's better to alias all query methods to the corresponding `async_foo` method in pg-1.1 instead.::> maybe we explicitly rescue TypeError then with a tiny comment about it? Makes sense. I'll change this. > just let this error float back to the user Not sure - there's a [test case](https://github.com/rails/rails/blob/master/activerecord/test/cases/adapters/postgresql/array_test.rb#L316-L322) for this behavior.::I made it [a configuration option](https://github.com/ged/ruby-pg/commit/ee1e19cca83ac0b5d01b7776997964c300445e24) whether a TypeError is raised or whether a partial array is returned. The latter one is the default, so that the second commit of this PR is not strictly necessary for pg-1.1.0.::",8d5c71ee7f3baf0f05d05d62bbc16ce13bc4679e::6c46aad3f5edce30e009bd89d0a11dc3d95ffa93::
https://api.github.com/repos/rails/rails,33148,backport_33107::5-2-stable,0,merged,,"This is a backport of #33107. `touch` option was added to `increment!` (#27660) and `update_counters` (#26995). But that option behaves inconsistently with `Persistence#touch` method. If `touch` option is passed attribute names, it won't update update_at/on attributes unlike `Persistence#touch` method. Due to changed from `Persistence#touch` to `increment!` with `touch` option, #31405 has a regression that `counter_cache` with `touch` option which is passed attribute names won't update update_at/on attributes. I think that the inconsistency is not intended. To get back consistency, ensure that `touch` option updates update_at/on attributes.",72d9c92495f9fad17f26f3562bf0c978c14eea90::
https://api.github.com/repos/rails/rails,33012,fix-discard_on-and-retry_on-doc::master,0,merged,,[ci skip] Follow up #32854 and ba07b5fc12a740d41d288bea6347f15f4948483c. I would like to backport this to `5-2-stable` too in order to update http://api.rubyonrails.org/ when 5.2.1 will be released.,d6702b7ab256a62b859e5f26650f2b320d5ed8c5::
https://api.github.com/repos/rails/rails,32978,activesupport_cache_autoload_notifications::master,0,closed,,"### Summary This PR autoloads `ActiveSupport::Notifications` within `active_support/cache`, since it's used in the `ActiveSupport::Cache` implementation: https://github.com/rails/rails/blob/c31317bd16f14c868f7a3ffea9eee120880a7a4d/activesupport/lib/active_support/cache.rb#L664 Without this PR, `active_support/cache` currently depends on `active_support/notifications` already being loaded. In Rails 5.0.x, this raises a `NameError` when `ActiveSupport::Cache` is used on its own without loading all of `active_support` first: ``` $ bundle exec ruby -e ""require 'active_support'; puts ActiveSupport::Cache::MemoryStore.new.fetch 'x'"" $ bundle exec ruby -e ""require 'active_support/cache'; puts ActiveSupport::Cache::MemoryStore.new.fetch 'x'"" Traceback (most recent call last): 3: from -e:1:in `<main>' 2: from [GEMS]/activesupport-5.0.6/lib/active_support/cache.rb:305:in `fetch' 1: from [GEMS]/activesupport-5.0.6/lib/active_support/cache.rb:317:in `read' [GEMS]/activesupport-5.0.6/lib/active_support/cache.rb:562:in `instrument': uninitialized constant ActiveSupport::Notifications (NameError) ``` This bug was accidentally fixed in 5.1, since [#28204](https://github.com/rails/rails/pull/28204/files#diff-273d4ceedb426a237b07cb7146a074dfR4) indirectly loads `active_support/notifications` via a long require-chain through `active_support/deprecation`: - https://github.com/rails/rails/blob/c31317bd16f14c868f7a3ffea9eee120880a7a4d/activesupport/lib/active_support/cache.rb#L8 - https://github.com/rails/rails/blob/c31317bd16f14c868f7a3ffea9eee120880a7a4d/activesupport/lib/active_support/core_ext/numeric/time.rb#L3 - https://github.com/rails/rails/blob/c31317bd16f14c868f7a3ffea9eee120880a7a4d/activesupport/lib/active_support/duration.rb#L7 - https://github.com/rails/rails/blob/c31317bd16f14c868f7a3ffea9eee120880a7a4d/activesupport/lib/active_support/deprecation.rb#L18 - https://github.com/rails/rails/blob/c31317bd16f14c868f7a3ffea9eee120880a7a4d/activesupport/lib/active_support/deprecation/behaviors.rb#L3 ([#30782](https://github.com/rails/rails/pull/30782/files#diff-7981f69995a3750c52e68d1aa65d0c12R7) also loads `active_support/deprecation` through a slightly different require path.) Instead of implicitly depending on this unintentional load-order, this PR explicitly autoloads `ActiveSupport::Notifications` and adds a test to ensure `ActiveSupport::Cache` can be used on its own. ### Other Information This PR would be most useful if backported to the `5.0` branch where this test case is currently failing - I can create this additional backport PR if there's any interest in this.",986968a49a75061856c605d91e6a9f89e272693d::
https://api.github.com/repos/rails/rails,32871,backport-update_attribute::5-0-stable,0,merged,,This backports https://github.com/rails/rails/pull/27780 to the 5.0.x series. /cc @eileencodes & @tenderlove,08bd4bcea213fd86c31d7f1041c5d08354b5fa3b::
https://api.github.com/repos/rails/rails,32841,5-1-stable::5-1-stable,0,closed,,"### Summary Backporting these two patches is the only way I've found to be able to use these libraries with rails 5.1. There's a very annoying problem with this combination of libraries that it's only fixed in `capybara 3.0` (see https://github.com/rspec/rspec-rails/issues/1887 and https://github.com/rspec/rspec-rails/issues/1887#issuecomment-375804167 in particular). It'd be nice to be able to upgrade to capybara 3.0 to fix this issue without having to attempt the full rails upgrade at the same time. @twalpole What do you think about this? Will it cause problems for older versions of `capybara`? We can't remove this server. If someone is already using it directly they expect it to continue working. Is the Rails puma handler a problem that we need to remove it? Why?::@rafaelfranca The issue is that  `Rack::Handler::Puma.run` traps interrupt signals which prevents the tests from ending when ctrl-c is pressed.::The justification for removing the puma handler is in the relevant commit that I backported from master. Your point about backwards compatibility is legit though, so I'll just close this PR and monkeypatch! Thanks.::",aa17030b1618cd8c8f6d97c9577c5a2dce2d9f87::cf395b92cd2e79278aaa76c2b96b23b08ef253ec::
https://api.github.com/repos/rails/rails,32669,clean-up-changelogs-on-master::master,0,closed,,"Remove ``` *   Output only one Content-Security-Policy nonce header value per request. Fixes #32597. *Andrey Novikov*, *Andrew White* ``` since it was backported to `5-2-stable` in 4f8765f. Remove ``` *   Add the `nonce: true` option for `javascript_include_tag` helper to support automatic nonce generation for Content Security Policy. Works the same way as `javascript_tag nonce: true` does. *Yaroslav Markin* ``` since it was backported to `5-2-stable` in 8cca042. Remove ``` *   Fix JavaScript views rendering does not work with Firefox when using Content Security Policy. Fixes #32577. *Yuji Yaginuma* ``` since it was backported to `5-2-stable` in 744a506. Remove ``` *   Fix bug where `ActiveSupport::Cache` will massively inflate the storage size when compression is enabled (which is true by default). This patch does not attempt to repair existing data: please manually flush the cache to clear out the problematic entries. *Godfrey Chan* ``` since it was backported to `5-2-stable` in 276fa9d. Remove ``` *   Fix bug where `ActiveSupport::Timezone.all` would fail when tzinfo data for any timezone defined in `ActiveSupport::MAPPING` is missing. *Dominik Sander* ``` since it was backported to `5-2-stable` in 3084e9c. Remove ``` *   Redis cache store: `delete_matched` no longer blocks the Redis server. (Switches from evaled Lua to a batched SCAN + DEL loop.) *Gleb Mazovetskiy* ``` since it was backported to `5-2-stable` in 6bc0f8d. Remove ``` *   Make the master.key file read-only for the owner upon generation on POSIX-compliant systems. Previously: $ ls -l config/master.key -rw-r--r--   1 owner  group      32 Jan 1 00:00 master.key Now: $ ls -l config/master.key -rw-------   1 owner  group      32 Jan 1 00:00 master.key Fixes #32604. *Jose Luis Duran* ``` since it was backported to `5-2-stable` in 5411796. Related to https://github.com/rails/rails/pull/32652#issuecomment-382956920 r? @rafaelfranca",1fee068a73c9de9b01544dee93206cbc2563b62b::
https://api.github.com/repos/rails/rails,32652,add-missing-changelog-for-32593::master,0,merged,,https://github.com/rails/rails/pull/32593 was backported to `5-2-stable` but since 5.2.0 is released the changelog entry should be in Rails 6.0.0 too. [ci skip],888dda875bfa210c436aff946dff487c7a5304a3::
https://api.github.com/repos/rails/rails,32650,return_back_slash_and_use___dir__::master,0,merged,,"- The ""/"" was removed in 40bdbce191ad90dfea43dad51fac5c4726b89392 during refactoring. It may cause regression since looks like was added intentionaly because it is possible that a name of any another gem can start with /rails/, so slash was added to ensure that it is ""rails"" gem. I would like to backport this to `5-2-stable` too. - Use `__dir__` instead of `__FILE__`. Follow up #29176.",f8cbc1dd6e186f9e077d101653f5b56deb740503::
https://api.github.com/repos/rails/rails,32642,fix-name-test-added-by-32613::master,0,merged,,"Related to https://github.com/rails/rails/pull/32613 r? @pixeltrixLOL, how did I miss that - thanks 👍 ::thanks for the review. will we backport this to `5-2-stable`?::Yes - I'll cherry pick::Done in e4ab3c17203cd90ec07ca78dc25b5989705bce16 - thanks again::",e6970c42d58bd9a488f036d74eb0fab09bc15537::
https://api.github.com/repos/rails/rails,32633,fix-ref-in-actionpack-changelog::master,0,merged,,Pull Request #32602 fixes Issue #32597. Please backport this to `5-2-stable` as well because i don't have permission doing that. r? @pixeltrix,698332cf8596e7ffde35316bfb91ee4bbd432821::
https://api.github.com/repos/rails/rails,32488,patch-4::master,0,merged,,"Per Chromium team this has not been necessary on other platforms for quite some time: https://bugs.chromium.org/p/chromium/issues/detail?id=737678#c1 IMHO, this should be backported to 5-2-stable",bade485636ef9cf0ff0c194acc4083296a7f5c26::
https://api.github.com/repos/rails/rails,32437,small_doc_fixes_5-2-stable::5-2-stable,0,merged,,This is a backport of the portion of #32427 that applies to 5-2-stable — getting in before the 5.2.0 release.,84ee8e111c077adf34f82507b114fbc522bca479::
https://api.github.com/repos/rails/rails,32370,patch-1::master,0,merged,,"### Summary Ruby version check has some bug with 2 digit minor version (i.e. [2.2.10](https://www.ruby-lang.org/en/news/2018/03/28/ruby-2-2-10-released/)) To make it work, compare ruby version using `Gem::Version` ### Other Information If you think it's fine, please backport this to 5.x to let developer who uses rails with 2.2.10 ;)",0014790b2a8a7830685ec91b68d457ec37617f26::
https://api.github.com/repos/rails/rails,32369,activejob/test-perform::master,0,closed,activejob::stale::,"### Summary Current behavior of `perform_enqueued_jobs` will discard filtered jobs, this PR changes it to enqueue the jobs instead of discarding. ### Other Information I found current behavior confusing and non-intuitive.. The updated behavior feels more intuitive and is especially useful when working with test while refactoring, or adding extra behavior to existing codes.. For example, let's say that request to a certain endpoint are currently registering X number of jobs and we already have some integration test to make sure that those jobs are registered (enqueued) correctly.. Now let's say that we want to add 1 more job to be run, but we want to actually perform it and check its side effect.. wrapping the request with `perform_enqueued_jobs` without filter will run all the jobs failing existing test, similarly, adding `only: TheNewJob` before this PR will also fails existing test.. PS: hopefully it can also be backported to 5.2--stable at least :grin:",e69f086b9ff05caefd6fc1d00517b8ee70aed43c::
https://api.github.com/repos/rails/rails,32281,fix-rails_5_2-notes-32222::master,0,merged,,"<details> <summary>Summary</summary> - Remove ``` *   Namespace error pages' CSS selectors to stop the styles from bleeding into other pages when using Turbolinks. ([Pull Request](https://github.com/rails/rails/pull/28814)) ``` since it was backported to `5-1-stable` by 50d5baf7ed15908ce66c39cc62ce80ad99e313c3 and `5-0-stable` by d1c4a39ed796a31efc51901e7e818609fb3cb7ec. - Remove ``` *   Allow irb options to be passed from `rails console` command. ([Pull Request](https://github.com/rails/rails/pull/29010)) ``` since it was backported to `5-1-stable` by e91b48348c9a33447bf1bff6e043c043cf36439f. - Remove ``` *   Load environment file in `dbconsole` command. ([Pull Request](https://github.com/rails/rails/pull/29725)) ``` since it was backported to `5-1-stable` by 7f9342877a80bc9a2a283462babf7b829902dc78. - Remove ``` *   Gemfile for new apps: upgrade redis-rb from ~> 3.0 to 4.0. ([Pull Request](https://github.com/rails/rails/pull/30748)) ``` since it was backported to `5-1-stable` by 37895311514a35333e5597018852eb0fe2c9eb28. - Remove ``` *   Fix minitest rails plugin. The custom reporters are added only if needed. This will fix conflicts with others plugins. ([Commit](https://github.com/rails/rails/commit/ac99916fcf7bf27bb1519d4f7387c6b4c5f0463d)) ``` since it was backported to `5-1-stable` by caa76956d396a6a9feae7aa17adce784127e92cc. - Remove ``` *   Add support for compatibility with redis-rb gem for 4.0 version. ([Pull Request](https://github.com/rails/rails/pull/30748)) ``` since it was backported to `5-1-stable` by 37895311514a35333e5597018852eb0fe2c9eb28. - Remove ``` *   Add `action_controller_api` and `action_controller_base` load hooks to be called in `ActiveSupport.on_load`. ([Pull Request](https://github.com/rails/rails/pull/28402)) ``` since it was backported to `5-1-stable` by b9a5fd706a821401cbe3ce11d7a18daa8267588f. - Remove ``` *   `driven_by` now registers poltergeist and capybara-webkit. ([Pull Request](https://github.com/rails/rails/pull/29315)) ``` since it was backported to `5-1-stable` by c5dd45119a28fb1c41de6d27d63443480c86894e. - Remove ``` *   Fallback `ActionController::Parameters#to_s` to `Hash#to_s`. ([Pull Request](https://github.com/rails/rails/pull/29630)) ``` since it was backported to `5-1-stable` by c1014e435d26db867b2c15b74c9ef47ccff38edb and `5-0-stable` by 0e71fc3040edc3c28d12c07300f0162559bbe4e5. - Remove ``` *   Make `take_failed_screenshot` work within engine. ([Pull Request](https://github.com/rails/rails/pull/30421)) ``` since it was backported to `5-1-stable` by 595a231029ce402445da33eec62775cbe0da97de. - Remove ``` *   Fix optimized url helpers when using relative url root. ([Pull Request](https://github.com/rails/rails/pull/31261)) ``` since it was backported to `5-1-stable` by e9b77953a277a707ce1fb60e1f9963a833df9312. - Remove ``` *   Update `distance_of_time_in_words` helper to display better error messages for bad input. ([Pull Request](https://github.com/rails/rails/pull/20701)) ``` since it was backported to `5-1-stable` by 2c97fbf6503c9199f3fe5ed06222e7226dc6fcd9. - Remove ``` *   Generate field ids in `collection_check_boxes` and `collection_radio_buttons`. ([Pull Request](https://github.com/rails/rails/pull/29412)) ``` since it was backported to `5-1-stable` by 2d8c10a7b1066d6a577096b4a86e310f1b0d2c22. - Remove ``` *   Fix issues with scopes and engine on `current_page?` method. ([Pull Request](https://github.com/rails/rails/pull/29503)) ``` since it was backported to `5-1-stable` by 2135daf0d552bbb2eca4208f8c33fb015cf052ab. - Remove ``` *   Bring back proc with arity of 1 in `ActionMailer::Base.default` proc since it was supported in Rails 5.0 but not deprecated. ([Pull Request](https://github.com/rails/rails/pull/30391)) ``` since it was backported to `5-1-stable` by b2bedb149274c8490c782c62dd8ab0bbae6a9730. - Remove ``` *   Add type caster to `RuntimeReflection#alias_name`. ([Pull Request](https://github.com/rails/rails/pull/28961)) ``` since it was backported to `5-1-stable` by f644e7a6fddf1b239dc1af0b0c6be8af9f776918. - Remove ``` *   Loading model schema from database is now thread-safe. ([Pull Request](https://github.com/rails/rails/pull/29216)) ``` since it was backported to `5-1-stable` by 02926cfff6a403d28f83903b08ae7375fad8e836. and `5-0-stable` by 84bcfe5a6a65d3c2998d14b85b9f02560d3f9e98 - Remove ``` *   Fix destroying existing object does not work well when optimistic locking enabled and `locking_column` is null in the database. ([Pull Request](https://github.com/rails/rails/pull/28926)) ``` since it was backported to `5-1-stable` by e498052c5210e886f46c61deadd161f8ea41666f. - Remove ``` *   `ActiveRecord::Persistence#touch` does not work well when optimistic locking enabled and `locking_column`, without default value, is null in the database. ([Pull Request](https://github.com/rails/rails/pull/28914)) ``` since it was backported to `5-1-stable` by 1e2f63db78b9089fb7011eb954c88136f324e7c0. - Remove ``` *   Previously, when building records using a `has_many :through` association, if the child records were deleted before the parent was saved, they would still be persisted. Now, if child records are deleted before the parent is saved on a `has_many :through` association, the child records will not be persisted. ([Pull Request](https://github.com/rails/rails/pull/29593)) ``` since it was backported to `5-1-stable` by a22c39e9cc08c052bb5c828b45533e5a01c896f1. - Remove ``` *   Query cache was unavailable when entering the `ActiveRecord::Base.cache` block without being connected. ([Pull Request](https://github.com/rails/rails/pull/29609)) ``` since it was backported to `5-1-stable` by fd6c8cdfe69ed3a0763f0ff1dc41d2d2ee2e8752 and `5-0-stable` by 9f2532bb16b49751fbdda51846b156c3eca09054. - Remove ``` *   `Relation#joins` is no longer affected by the target model's `current_scope`, with the exception of `unscoped`. ([Commit](https://github.com/rails/rails/commit/5c71000d086cc42516934415b79380c2224e1614)) ``` since it was backported to `5-1-stable` by 3630d6354cab31bb233a1f1d7b1a4d2c24aef54d. - Remove ``` *   Fix `unscoped(where: [columns])` removing the wrong bind values. ([Pull Request](https://github.com/rails/rails/pull/29780)) ``` since it was backported to `5-1-stable` by d378fcb254462f9da8d921f0fa2e9b9868a7d34e. - Remove ``` *   When a `has_one` association is destroyed by `dependent: destroy`, `destroyed_by_association` will now be set to the reflection, matching the behaviour of `has_many` associations. ([Pull Request](https://github.com/rails/rails/pull/29855)) ``` since it was backported to `5-1-stable` by 8254a8be81c07dbdbc2a281bab72f23f93f6b12f. - Remove ``` *   Fix `COUNT(DISTINCT ...)` with `ORDER BY` and `LIMIT` to keep the existing select list. ([Pull Request](https://github.com/rails/rails/pull/29848)) ``` since it was backported to `5-1-stable` by 0e8d4edd56f44b27f33bd214aa03af60cc5d39ae. - Remove ``` *   Ensure `sum` honors `distinct` on `has_many :through` associations. ([Commit](https://github.com/rails/rails/commit/566f1fd068711dfe557bef63406f8dd6d41d473d)) ``` since it was backported to `5-1-stable` by c0a1dc256144b91aee5241fad2121e85e6d8093f. - Remove ``` *   Fix `COUNT(DISTINCT ...)` for `GROUP BY` with `ORDER BY` and `LIMIT`. ([Commit](https://github.com/rails/rails/commit/5668dc6b1863ef43be8f8ef0fb1d5db913085fb3)) ``` since it was backported to `5-1-stable` by 87ca68e76eec68ec61fc0d3d3bf315b4bfe45c42. - Remove ``` *   MySQL: Don't lose `auto_increment: true` in the `db/schema.rb`. ([Commit](https://github.com/rails/rails/commit/9493d4553569118b2a85da84fd3a8ba2b5b2de76)) ``` since it was backported to `5-1-stable` by 8b6e694e5febdcb39f72d98ff9d5e7124cc0ca32. - Remove ``` *   Fix longer sequence name detection for serial columns. ([Pull Request](https://github.com/rails/rails/pull/28339)) ``` since it was backported to `5-1-stable` by af9c1707ad49eb421cf76c1367da3efbf3c39aea and `5-0-stable` by 7025b1d8ebf694c288c71878b5229394ba3c0580. - Remove ``` *   Fix `bin/rails db:setup` and `bin/rails db:test:prepare` create wrong ar_internal_metadata's data for a test database. ([Pull Request](https://github.com/rails/rails/pull/30579)) ``` since it was backported to `5-1-stable` by bb67b5f278c2dbca65b9dd03038788a4dbb4a21f and `5-0-stable` by 60437e6d3c99cbbb95a01f31d44be19f7b63e3eb. - Remove ``` *   Fix conflicts `counter_cache` with `touch: true` by optimistic locking. ([Pull Request](https://github.com/rails/rails/pull/31405)) ``` since it was backported to `5-1-stable` by 5236ddaf35492513895d4a706435520e74ab723b. - Remove ``` *   Fix `count(:all)` to correctly work `distinct` with custom SELECT list. ([Commit](https://github.com/rails/rails/commit/c6cd9a59f200863ccfe8ad1d9c5a8876c39b9c5c)) ``` since it was backported to `5-1-stable` by 6beb4de7dd5205d9b08ce4eedbe383cb0b18540d. - Remove ``` *   Fix to invoke callbacks when using `update_attribute`. ([Commit](https://github.com/rails/rails/commit/732aa34b6e6459ad66a3d3ad107cfff75cc45160)) ``` since it was backported to `5-1-stable` by 6346683bc58b79b2745e9305e65a6f1f1a63c288. - Remove ``` *   Use `count(:all)` in `HasManyAssociation#count_records` to prevent invalid SQL queries for association counting. ([Pull Request](https://github.com/rails/rails/pull/27561)) ``` since it was backported to `5-1-stable` by eef3c89e3b38c99c79decb1ec5d6854f4ab9ea18. - Remove ``` *   Fix `count(:all)` with eager loading and having an order other than the driving table. ([Commit](https://github.com/rails/rails/commit/ebc09ed9ad9a04338138739226a1a92c7a2707ee)) ``` since it was backported to `5-1-stable` by 6df9b69b2363734175d8869393e83e6ce8b4d7b6. - Remove ``` *   PostgreSQL: Allow pg-1.0 gem to be used with Active Record. ([Pull Request](https://github.com/rails/rails/pull/31671)) ``` since it was backported to `5-1-stable` by a9c06f61d52c7cf03dc413dd50e9a9c5ab580703. - Remove ``` *   Fix that after commit callbacks on update does not triggered when optimistic locking is enabled. ([Commit](https://github.com/rails/rails/commit/7f9bd034c485c2425ae0164ff5d6374834e3aa1d)) ``` since it was backported to `5-1-stable` by aaee10e6e4fdfbc8bb7dc6169ed9deea3638c5a8. - Remove ``` *   Fix regression in numericality validator when comparing Decimal and Float input values with more scale than the schema. ([Pull Request](https://github.com/rails/rails/pull/28584)) ``` since it was backported to `5-1-stable` by 5b1c3e5a8b02d0078bd2527ca0969b0d89fec433. Note that there was incorrect link to PR, original PR is https://github.com/rails/rails/pull/29249. - Remove ``` *   Fix to working before/after validation callbacks on multiple contexts. ([Pull Request](https://github.com/rails/rails/pull/31483)) ``` since it was backported to `5-1-stable` by 0f7046a7f820186fd6fbe19a6142002cb8537fe6. - Remove ``` *   Fix implicit coercion calculations with scalars and durations. ([Pull Request](https://github.com/rails/rails/pull/29163), [Pull Request](https://github.com/rails/rails/pull/29971)) ``` since it was backported to `5-1-stable` by 51ea27c04c60373d97e212389d587821deae6fe0, 4d82e2aad98ddf7c1a54e588288dcf1f68ad7af4. - Remove ``` *   Fix modulo operations involving durations. ([Commit](https://github.com/rails/rails/commit/a54e13bd2e8fb4d6aa0aebe59271699a2d62567b)) ``` since it was backported to `5-1-stable` by 233fa7eab36e7d6fb515b2e55c699bff9858ea5f. - Remove ``` *   Return all mappings for a timezone identifier in `country_zones`. ([Commit](https://github.com/rails/rails/commit/cdce6a709e1cbc98fff009effc3b1b3ce4c7e8db)) ``` since it was backported to `5-1-stable` by 0222ebbe0695fd1fbaf98e64333d9d7b285a54ed. - Remove ``` *   Add support for compatibility with redis-rb gem for 4.0 version. ([Pull Request](https://github.com/rails/rails/pull/30748)) ``` since it was backported to `5-1-stable` by 37895311514a35333e5597018852eb0fe2c9eb28. Related to #32252. </details> Related to #32222, https://github.com/rails/rails/pull/32222#discussion_r174256536. Follow up a489cc81b6aa1187b169ddccc92f4c077fe0408f.",b5b179fb57ec37ffc3b8c033fd886d6718f89b59::
https://api.github.com/repos/rails/rails,32279,patch-4::master,0,merged,,"This should be backported to 5-2-stable along with [the other change](https://github.com/rails/rails/commit/8f98054ef96f9335667071c70a7cf7d82ee92b07#diff-034764bc2980815d84b7181e29c961f3) made to these docs. ### Summary 1. Fix minor grammatical issues & expound on some potentially confusing sections 1. Explain [hiredis](https://github.com/redis/hiredis) support 1. Add basic configuration 1. Update [example production config](http://edgeguides.rubyonrails.org/caching_with_rails.html#activesupport-cache-rediscachestore) to fix syntax errors: ```ruby # frozen_string_literal: true begin require ""bundler/inline"" rescue LoadError => e $stderr.puts ""Bundler version 1.10 or later is required. Please update your Bundler"" raise e end gemfile(true) do source ""https://rubygems.org"" git_source(:github) { |repo| ""https://github.com/#{repo}.git"" } # Activate the gem you are reporting the issue against. gem ""rails"", ""5.2.0.rc1"" end require ""minitest/autorun"" # Ensure backward compatibility with Minitest 4 Minitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test) Rails.application.configure do |config| # http://edgeguides.rubyonrails.org/caching_with_rails.html#activesupport-cache-rediscachestore cache_servers = %w[ ""redis://cache-01:6379/0"", ""redis://cache-02:6379/0"", … ], config.cache_store = :redis_cache_store, url: cache_servers, connect_timeout:    30,  # Defaults to 20 seconds read_timeout:       0.2, # Defaults to 1 second write_timeout:      0.2, # Defaults to 1 second reconnect_attempts: 1,   # Defaults to 0 error_handler: -> (method:, returning:, exception:) { # Report errors to Sentry as warnings Raven.capture_exception exception, level: 'warning"", tags: { method: method, returning: returning } } end ``` ``` $ ruby -v ruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin17] $ ruby test.rb test.rb:26: syntax error, unexpected tLABEL ...tore = :redis_cache_store, url: cache_servers, ...                           ^~~~ ```",1b93e78792d15d9813217d200f20f194eaffb77e::
https://api.github.com/repos/rails/rails,32252,fix-changelogs-of-5-1-stable-30748::5-1-stable,0,merged,,https://github.com/rails/rails/pull/30748 was backported to `5-1-stable` by 37895311514a35333e5597018852eb0fe2c9eb28. This commit adds missing changelog entry and fixes others.,5dfb3a2fca229290abf379bcdafffbe065d54af4::
https://api.github.com/repos/rails/rails,32222,update-ruby_on_rails_5_2_release_notes::master,0,merged,,"- Add a description of major features in Rails 5.2. - Add a reference to Pull Request/Commit to every entry in CHANGELOGs, note that some of them combined. - Add section ""Ruby on Rails Guides"" with notable changes. - Note that - Skipped this since encrypted secrets are already on the way out. ``` *   Add `rails secrets:show` command. ([Pull Request](https://github.com/rails/rails/pull/29695)) ``` - Skipped this since it was backported all the way to 5-0-stable. ``` *   Make Rails' test runner work better with minitest plugins. ([Pull Request](https://github.com/rails/rails/pull/29572)) ``` Thanks to everyone who has been working on Rails 5.2! <3Is it intentional to refer to backported commits rather than PRs?::Yes, since it is related to 5.2.::Should probably skip this since encrypted secrets are already on the way out.::This was backported all the way to 5-0-stable.::Sorry but we don't mention the person who compiled the release notes. The same way we don't mention the contributors directly in all these entries or in who wrote a guide.::Looks like we used to add a mention who wrote a release notes guide https://github.com/rails/rails/blob/3c9edcffb60b21beb6d54a72d38aa1883fc7b2c9/guides/source/3_2_release_notes.md. We haven't added this mention since Rails 4.0 so I'm removing this.::Not sure if it's intentional, but this one was backported to Rails 5.1.3.::I removed this entry a489cc81b6aa1187b169ddccc92f4c077fe0408f. Thanks!::I'll try to catch more backported changes this week since I didn't pay attention to this attribute. I want to improve a bit this guide by extracting info about CSP into docs(https://github.com/rails/rails/pull/32222#issuecomment-372269242). Thank you.::",7fd6d69af2f5fcea70c5c7df7d75e547ef9c807e::
https://api.github.com/repos/rails/rails,32151,capybara_3::master,0,merged,,"### Summary Capybara 3.0.0.rc1 has been released, and contains no changes that affect how Rails system tests integrate with it. This PR allows Rails users to use Capybara 3.x.  Would be great to have it backported to Rails 5.1 and 5.2 too",0fa5bb8aeff1797589f913afd8e48de23e618a61::eca246dccb988b725b666893bb05554c4a296746::
https://api.github.com/repos/rails/rails,32145,query_cache_base_configurations::master,0,closed,activerecord::stale::,"Followup to https://github.com/rails/rails/pull/29609. Overriding the `.configurations` method doesn't affect how connections are established; it shouldn't change the query cache behaviour either. This is going in the opposite direction to https://github.com/rails/rails/pull/32135 - but even if we want to allow models to override the base configuration we shouldn't make that change in a stable branch, and https://github.com/rails/rails/pull/29609 was backported to 5-1-stable and 5-0-stable.",c1021e19d73d89b471b203ea7c27f6dce3b47fcc::
https://api.github.com/repos/rails/rails,32122,remove-extra-changelog-added-by-31944::master,0,merged,,Previously it was removed by #32106 since it was backported to `5-2-stable`. [ci skip],a72bc8f0043d1dd43da2654e4b0d4c1585f9b420::
https://api.github.com/repos/rails/rails,32107,move-up-activestorage-changelog::5-2-stable,0,merged,,It wasn't fixed in Rails 5.2.0.rc1 since it was backported after this release.,0f2c36c813ffd53b983323588bc4adb8884c5cf2::
https://api.github.com/repos/rails/rails,32106,fix-rails-6_0_changelogs::master,0,merged,,Remove railties' changelog added by 7340596de45dc4c0f62a287b6acc4e71d8ee6c60 since it was backported to `5-2-stable` via ac99916fcf7bf27bb1519d4f7387c6b4c5f0463d Remove activesupport's changelog added by 1077ae96b34b5a1dfbf10ee0c40b1ceb1eb6b30b since it was backported to `5-2-stable` via a2b97e4ffef971607a1be8fc7909f099b6840f36 Remove activesupport's changelog added by 0d41a76d0c693000005d79456dee7f9299f5e8d4 since it was backported to `5-2-stable` via cdce6a709e1cbc98fff009effc3b1b3ce4c7e8db Remove activestorage's changelog added by d57c52a385eb57c6ce8c6d124ab5e186f931d142 since it was backported to `5-2-stable` via 5292cdf59a2052c453d6016c69b90b790cbf2547 Follow up c113bdc9d0c2cffd535ca97aff85c4bdc46b11f6 /cc @guilleiguaran,ae3e241b573b450fd9ce694a458ad942a8bd6b03::
https://api.github.com/repos/rails/rails,32089,fix-plugin-generated-files::master,0,merged,,"- <s>Prevent generation of `protect_from_forgery` in `ApplicationController` of plugin - There is `protect_from_forgery` by default since 48cb8b3 </s> - Comment `require ""active_storage/engine""` in `bin/rails` of plugin if `--skip-active-storage` - Improve generated file `app/views/application.html.erb` of plugin - Do not generate `javascript_include_tag` if `--skip-javascript` - Generate `<%= csp_meta_tag %>`. Related to #32018. /cc @pixeltrix I'll backport to `5-2-stable` after merging this.Setting `default_protect_from_forgery` to true is in `load_defaults`. However, engine does not use `load_defaults`. Therefore, I think that this is still necessary. ::Thanks for the pointing this.::",dcdb8e72cc2c4e57334e0de94f516e53ff028de8::9390bff5ce5fcde82840747fae077ba333375211::
https://api.github.com/repos/rails/rails,32031,remove_redundant_freeze::master,0,merged,actioncable::actionmailer::actionpack::routing::security::,"### Summary Since Rails 6.0 will support Ruby 2.4.1 or higher `# frozen_string_literal: true` magic comment enabled by `Style/FrozenStringLiteralComment` cop is enough to make string object frozen. ### Other Information I'd like to hear from Rails committers for this change since Rails 5.2 will supports Ruby 2.2, this change itself should not be backported but also it could make other backports complex.Why exclude these test files? https://github.com/rails/rails/blob/master/actionpack/test/controller/test_case_test.rb https://github.com/rails/rails/blob/master/activemodel/test/cases/type/string_test.rb https://github.com/rails/rails/blob/master/activesupport/test/core_ext/string_ext_test.rb https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/string/strip.rb https://github.com/rails/rails/blob/master/railties/test/generators/actions_test.rb::`/.*\""(\w+)\"".*collate\s+\""(\w+)\"".*/i` is not a string so this `.freeze` is not redundant.::This is not redundant freeze. https://github.com/rails/rails/blob/d03cc170c1bdad15245be7f2681a265fd2bd0d5d/activesupport/lib/active_support/core_ext/string/strip.rb#L24::This `"""".freeze` is obviously redundant, there is no reason to exclude it. https://github.com/rails/rails/blob/d03cc170c1bdad15245be7f2681a265fd2bd0d5d/activesupport/lib/active_support/core_ext/string/strip.rb#L23::Thanks for the review. Let me confirm this review first. I think you mean regular expressions is not a string. It looks like Ruby itself does not support frozen regular expressions yet. https://bugs.ruby-lang.org/issues/8948 I'm wondering if this .freeze is actually valid or not::Looks like that https://bugs.ruby-lang.org/issues/8948 is a proposal for `3.times { /foo/f }` returning the same regex object like a frozen string literal. At least removing `.freeze` has an effect that changing the result of `.frozen?`. ``` irb(main):001:0> RUBY_VERSION => ""2.5.1"" irb(main):002:0> /foo/.frozen? => false irb(main):003:0> /foo/.freeze.frozen? => true irb(main):004:0> /foo/.instance_variable_set(:@foo, ""foo"") => ""foo"" irb(main):005:0> /foo/.freeze.instance_variable_set(:@foo, ""foo"") Traceback (most recent call last): 3: from /Users/kamipo/.rbenv/versions/2.5.1/bin/irb:11:in `<main>' 2: from (irb):7 1: from (irb):7:in `instance_variable_set' FrozenError (can't modify frozen Regexp) ```::While it does sound like Rubocop's being over-eager in declaring it redundant, I think this instance is fine in practice. It's not a value we return anywhere, so someone would have to be trying pretty hard to even find it... and at that point a `const_set` is just as easy.::In my 5 second test, Rubocop didn't seem to complain about redundant `-""foo""`. If that's the case (and deliberate?), maybe we can consider switching to that for the first two. `string_ext_test.rb` seems more like it's missing a test for the _unfrozen_ case (though I'd really prefer to see all those wrapped in an `assert_deprecated` anyway). ::Yeah, this instance is fine in practice, and this is an only place where RuboCop's auto-correct affects in I reviewed all diff in this PR. I suppose it is an issue for the cop, but I'm not sure whether RuboCop intentionally regard a regex literal like a string literal or not.::Yeah, I also confirmed about redundant `-""foo""` is no offence for the cop when I commented. Since we already replaced all `String#dup` to `String#+@`, replacing redundant `String#freeze` to `String#-@` is fine to me.::I have opened a RuboCop issue https://github.com/rubocop-hq/rubocop/issues/6331 ::Thank you for opening the RuboCop issue. I think this is a false positive of RuboCop. I opened a PR rubocop-hq/rubocop#6333 to fix, but it may take some time to the next new release of RuboCop (maybe 0.59.3 or 0.60.0) and subsequent Code Climate support. Until then it will depend on hand craft. ::Thanks for the review. I have removed these files from the exclude list and replaced `String#freeze` with `String#-@` where explicit string objects are necessary.::Just excluded this file to avoid false positive until the fix made by https://github.com/rubocop-hq/rubocop/pull/6333 is available as the newer version of RuboCop, 0.60 maybe and Code Climate supports the new version of RuboCop to avoid auto correct by the false positive.::I re-searched by ""/.freeze"" in the diff and found extra affected regexs. ::Thank you for finding other false positives. Addressed and exclude 'actionpack/lib/action_dispatch/journey/router/utils.rb' also.::",aa3dcabd874a3e82e455e85a1c94a7abaac2900a::
https://api.github.com/repos/rails/rails,32016,visitors::master,0,merged,,"Before: Total allocated: 209050523 bytes (2219202 objects) Total retained:  36580305 bytes (323462 objects) After: Total allocated: 209180253 bytes (2222455 objects) Total retained:  36515599 bytes (321850 objects) --- Modest saving of 1612 RVALUEs in the heap on Discourse boot What is going on here? i'm not familiar with `-()` invocation, is that what's saving memory? ::http://ruby-doc.org/core-2.5.0/String.html#method-i-2D-40. It is equivalent to `left.tr(""*:"", """").freeze`, except that it only freeze if it is not frozen already.::oh... you got to read https://samsaffron.com/archive/2018/02/16/reducing-string-duplication-in-ruby carefully, and https://bugs.ruby-lang.org/issues/14478 ... `left.tr(""*:"", """").freeze` will not de-duplicate in Ruby 2.5 ... `-(left.tr(""*:"", """"))` will ... and amusingly `-(left.tr(""*:"", """").freeze)` will not until my bug is fixed and backported, which is a 3 line change ;) ::",98d4fc3e82ebfd535b05b7f6e3abb4b03595c2dd::
https://api.github.com/repos/rails/rails,31958,fix-has_many_through-dumping-5-2-stable::5-2-stable,0,merged,,This is a missing backport of https://github.com/rails/rails/pull/31934 into `5-2-stable`.,042b0eee0088df0b63185eb26e38c17c1c2009a4::
https://api.github.com/repos/rails/rails,31951,do_not_update_load_defaults_in_app_update::master,0,merged,,"Incompatible settings are included in the settings set by `load_defaults`. So, I think that target version should be updated by a user when becomes available, and should not be updated with `app:update`. Let's use 5.1, so this test still applies when backported to 5.2::I think we also need a test that this matches the generated content (e.g., right now it would stop working for version 10.0, but no test would fail). Do you have any ideas how we could do that?::If there's no `load_defaults` in there, but we're upgrading... maybe this should be: ```ruby @config_target_version = load_defaults[1] || ""5.0"" ```::Two other thoughts on the regex: 1. Start with `/^\s*`, to ignore commented lines. 2. Technically, the argument is allowed to be a string (because `6.10.to_s` and `""6.10"".to_s` are very different)... but maybe that's not worth worrying about for now.::If there's no `config.load_defaults` line in the file, and we regenerate it with `config.load_defaults 5.0`, we've opted the app into [a set of defaults](https://github.com/rails/rails/blob/936a96a98b543c593590064356cb04e884b875b7/railties/lib/rails/application/configuration.rb#L66-L77) that they weren't getting before - which is what we're trying to avoid here. I think we should skip the `load_defaults` line in the template if we didn't find it in the current file.::Yeah, it's a fair point. But since I would like to recommend using `load_defaults`, want to avoid skip. So, I added version `4.2` which does not affect existing configs and used it there. @matthewd What do you think?::I think omitting it for upgrades is fine... people should really be doing a stepwise upgrade anyway, so it will be rare for 5.2 to see an app that was never upgraded to 5.0 or 5.1. (That's also why I went for 5.0... it's not correct, but seemed less bother than making the whole line optional just for a corner case.) Offering 4.2 seems more likely to be confusing, because it's not really true... IIRC we changed a number of the 'real'/baseline defaults in 5.0?::My concern was `belongs_to_required_by_default`. It effects to the whole application. But I fixed it to `5.0` in order to agree that `4.2` is confusing and that it seems to have responded somewhat already with the update from 5.0 to 5.1. (I also do not agree much to make the whole line an option for that corner case) ::",66b4752e3db0e1103bbefb90fd04598df89cf2c5::
https://api.github.com/repos/rails/rails,31838,fix-value-of-as-attribute-for-link-type-preload::master,0,merged,,`as` attribute value should be `style` for stylesheet preload link See https://w3c.github.io/preload/#as-attribute https://github.com/rails/rails/pull/30744#discussion_r164954159 thanks for the report @mengqing shall I backport it to `5-2-stable`? r? @eileencodes,689da12082f5223388a96c1324f029e94188d70b::
https://api.github.com/repos/rails/rails,31710,indestructible_through_record::master,0,merged,,"When removing a record from a has many through association, the counter cache was being updated even if the through record halted the callback chain and prevented itself from being destroyed. https://github.com/rails/rails/pull/31687 would also fix this problem, but in a different way: records which were not destroyed would no longer be returned from `destroy_all`. This approach is more appropriate to backport however, as it doesn't change any public APIs, and I think having test coverage for this case is useful.",3e71bc4b048bef2ae7723dde5082020fd984bbd6::
https://api.github.com/repos/rails/rails,31671,pg-1.0::master,0,merged,,"### Summary pg-1.0.0 is just released and most Gemfiles don't restrict it's version. But the version is checked when connecting to the database, which leads to the following error, when after `bundle update`: ``` Gem::LoadError: can't activate pg (~> 0.18), already activated pg-1.0.0 ``` See also this pg issue: https://bitbucket.org/ged/ruby-pg/issues/270/pg-100-x64-mingw32-rails-server-not-start Preparation for pg-1.0 was done in commit f28a331, but the pg version constraint was not yet relaxed. The second commit switches the queue_classic repository to an open pull request, in order to enable testing on pg-1.0.0. I'm not sure if this is desired, so take it a proposal only! ### Rails Version Information The patch is now backported to rails-5.0 and rails-5.1, so that pg-1.0.0 will work together with rails-5.0.7+ and 5.1.5+. Until these versions are released please add a gem version constraint to the Gemfile like: ``` gem ""pg"", ""~> 0.18"" ``` __Edit:__ Update information about rails-5.0 and 5.1.It been intended to use gemspec!::pg or other database adapters have never been part of the gemspec, because this would force the user to install all of them.::Oh, I understand. Someone have to take out the adapter to a separate gem with own dependency. Maybe `activerecord-pg`.::",f820dc2dea3775f6c05c5ca77631ac27a9d3c954::13eff51b1b6a8ea1a21b3fedf0dfa16968b3bebb::
https://api.github.com/repos/rails/rails,31525,5-1-stable_backport_31520::5-1-stable,0,merged,,"This pull request backports #31520 to 5-1-stable where the actual failures reported like https://travis-ci.org/rails/rails/jobs/318867883 ### Summary This pull request handles `FrozenError` introduced by Ruby 2.5. Refer https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/61131 Since `FrozenError` is a subclass of `RuntimeError` minitest used by master branch can handle it, though it would be better to handle `FrozenError` explicitly if possible. `FrozenError` does not exist in Ruby 2.4 or lower, `frozen_error_class` handles which exception is expected to be raised.",080694118f9a2476ec22b0103007a6d5e10cbc93::
https://api.github.com/repos/rails/rails,31520,introduce_frozen_error_class::master,0,merged,,"### Summary This pull request handles `FrozenError` introduced by Ruby 2.5. Refer https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/61131 Since `FrozenError` is a subclass of `RuntimeError` minitest used by master branch can handle it, though it would be better to handle `FrozenError` explicitly if possible. `FrozenError` does not exist in Ruby 2.4 or lower, `frozen_error_class` handles which exception is expected to be raised. This pull request is intended to be merged to master, then backported to `5-1-stable` to address #31508 Let's define it in `ActiveRecord::TestCase`. https://github.com/rails/rails/blob/master/activerecord/test/cases/test_case.rb::Thanks for the review. Updated.::",01efbc128d1379d02dd14acf324d011944a1c429::
https://api.github.com/repos/rails/rails,31516,backport-31483::5-1-stable,0,merged,,This is a bug fix. So I think we should backport to 5-1-stable.,0f7046a7f820186fd6fbe19a6142002cb8537fe6::
https://api.github.com/repos/rails/rails,31489,backport-29127::5-1-stable,0,merged,,This is a bug fix. So I think we should backport to 5-1-stable.,e5800d2cd1683ce8077d3cb7687a98a6c7d6fd08::
https://api.github.com/repos/rails/rails,31446,inverse-of-options-docs::master,0,merged,docs::,"Came across a few issues when working on https://github.com/bbatsov/rubocop/pull/5045 - the docs contradict the code in `reflection.rb` a few ways: - setting `:inverse_of` works for `:as`, `:through` and `:polymorphic` options - it's not mentioned using a scope prevents the inverse being set automatically - the list of options preventing automatic inverses didn't match the `INVALID_AUTOMATIC_INVERSE_OPTIONS` constant in the code This can be backported to older maintained versions with the caveat that automatic inverse for polymorphic relations is 5.2 only (https://github.com/rails/rails/pull/28808)This and below are not for `:inverse_of` examples. Do we need these changes?::I think updating all examples is the way to since scopes are only mentioned once in the text, that way when people copy-paste an example they'll get the right thing. We could address this in another way too.::Is this (`group` with `inverse_of`) right example?::Just spotted in passing, but.. didn't we stop supporting `:conditions` options on associations in 4.x? 🙊 ::Good catch!::the colon is missing::`has_many :books, ..., inverse_of: :author` is not always the right association name. At least we have another example `has_many :books, inverse_of: 'writer'` in the guide. ```ruby class Author < ApplicationRecord has_many :books, inverse_of: 'writer' end class Book < ApplicationRecord belongs_to :writer, class_name: 'Author', foreign_key: 'author_id' end ``` https://github.com/rails/rails/blame/011f76e57b145b9e5ef1fd520df7d7096cf8896a/guides/source/association_basics.md#L770-L778::I agree with @kamipo that those examples don't need to change. They also are giving the impression that if you define an association you already need to define the `inverse_of:`::",4ab4364a51e7e95c15eaa09fc6b7234afcfbc6f4::
https://api.github.com/repos/rails/rails,31398,5-0-stable_mariadb::5-0-stable,0,closed,,### Summary This pull request aims to address `5-0-stable` CI failure. https://travis-ci.org/rails/rails/jobs/314848740 ```ruby Error: ActiveRecord::Migration::ColumnsTest#test_remove_column_with_multi_column_index: ActiveRecord::StatementInvalid: Mysql2::Error: Key column 'hat_size' doesn't exist in table: ALTER TABLE `test_models` DROP `hat_size` ``` I think it would address the error above. Since https://github.com/rails/rails/commit/55bcd2f62b5302cfa5a2214c8bba68718c710088 has been backported to 5-0-stable branch.  I have no other idea how to address it.,e7b61a80c6dacd4136745992eba2f18e23758d69::
https://api.github.com/repos/rails/rails,31361,backport-fix-custom-id-sqlite::5-1-stable,0,merged,,"This backports bbacd60 which allows a record created with a custom primary key to be migrated using sqlite. Previously, while attempting to copy the table, the type of the primary key was ignored, creating a `DataTypeMismatch` error. This also skips copying an index if the index name begins with ""sqlite_"".  Previously, copying the index for custom primary keys would fail because they are autoindexed by sqlite, so attempting to copy them created a duplicate index. ""sqlite_"" is a reserved word that indicates that the index is an internal schema object. SQLite prohibits applications from creating objects whose names begin with ""sqlite_"", so this string should be safe to use as a check. ref https://www.sqlite.org/fileformat2.html#intschema cc @eileencodes",832520cfd208618c59e4884c74552ce94a06ca81::
https://api.github.com/repos/rails/rails,31174,bmw-db-load-deadlock-5-1::5-1-stable,0,merged,,### Summary This backports #31035 which fixes an issue where competing threads deadlock each other to the 5.1 branch. - Thread A holds the load interlock but is blocked on getting the DB lock - Thread B holds the DB lock but is blocked on getting the load interlock (for example when there is a `Model.transaction` block that needs to autoload) This solution allows for dependency loading in other threads while a thread is waiting to acquire the DB lock.,eccc533e7490cb858ff6995eee1e8ad96b796b32::
https://api.github.com/repos/rails/rails,31075,fix-autosave-association-when-object-is-deleted::master,0,closed,activerecord::,### Summary When you have lots of complicated callbacks you can run into `RuntimeError: can't modify frozen Hash` since object was destroyed by some callback and you cannot modify its' fields anymore and autosave tries to save new association_id. ### Other Information I ran into problem on Rails 5.1.4 and fixed it like that. It would be nice if it was backported to older versions.,d6c76a7c475669d33bb4d42753e65e70bd8d2191::
https://api.github.com/repos/rails/rails,30955,rm-changelog-entry::master,0,merged,,- It was backported in https://github.com/rails/rails/commit/0eae8dd4b859c109919e5da0d6e74ffc6dc8a258 and is present in Rails 5.1.3,95de5033cded0b59372c0cb6a329a703c7b34905::
https://api.github.com/repos/rails/rails,30919,17622-before_save_strict_arguments::master,0,merged,activemodel::,"### Summary This fixes #17622 by adding strict argument checking to ActiveRecord callbacks. This ends up adding it to all save-related callbacks defined in `ActiveRecord::DefineCallbacks`, including e.g. `after_create`. Which should be fine: they didn't support `:on` in the first place. ### Other Information Should this go in the changelog? It seems like it should be backported to 5.0.This name is waaaay too generic for us to add everywhere that `AMo::Callbacks` gets included. It doesn't actually use any instance state, though, so instead of giving it a big ugly name, let's just move it onto the module itself.::Do you mean as a class method (on the module) so it'd be called like this? ```ruby Callback.verify_options(__method__, options)::Yep :+1:::The `method` argument is no longer used here. This code is now simple enough that it could probably just be inlined.::Agreed::These assertions are backwards: the expected value should be passed first, and the actual value second.::Oh, okay. I'm usually use Rspec, which AFAIK tends to follow the opposite pattern. Is there a style guide documenting things like this?::@seanlinsley It's an xUnit idiom. All assertion methods are of the form `assert(expected, actual)`. Rspec just does it the other way, for the semantics of their api, eg `expect(actual).to be(expected)`. FWIW, some JS test suites also use the order actual, expected. 😮 ::",dfb0e4b3dc94860e6d484385d31fd399d33dac92::
https://api.github.com/repos/rails/rails,30861,fix_preloading_has_many_through_with_sti::4-2-stable,0,closed,,"`values[:includes]` in `reflection_scope` is not compatible with `through_scope` Without this fix, preloading `:comments_with_include` will cause the following error: ``` % bundle exec ruby -w -Itest test/cases/associations/eager_test.rb -n test_eager_with_has_many_through_join_model_with_include Using sqlite3 Run options: -n test_eager_with_has_many_through_join_model_with_include --seed 1502 E Error: EagerAssociationTest#test_eager_with_has_many_through_join_model_with_include: ActiveRecord::AssociationNotFoundError: Association named 'post' was not found on Post; perhaps you misspelled it? ``` ### Summary This is a backport of the fix merged here: https://github.com/rails/rails/commit/82bfe3bf115e7d4d6f5f5b40f8ab32a61148da67",3883b99525def0c9392ea0bef0cfd962f8aac855::221c6e3e537cc79306ad050429e1fcc314faf836::
https://api.github.com/repos/rails/rails,30712,5-1-stable::5-1-stable,0,merged,actionpack::,"### Summary https://github.com/rails/rails/pull/30638 fixed potential Puma configs in `config/puma.rb` overriding the desirable stack for SystemTests but could not be pulled into `5.1.x` because it required a Capybara upgrade. This just backports the fix to 5.1.x by manually copying over the missing options. My first Rails PR, Railsbot is 😱  but I think for a backport this base branch is correct? cc @twalpole This should be fine without this `Threads` change, so happy to change this out::Can you clarify what settings changed? Something like ""Ensure local dev and prod puma configs do not clobber  `ActionDispatch::SystemTesting` defaults. Adds `workers: 0` and `daemon: false`. ::",87e085dacc3cffe53591b76550dd263fb89aff3f::
https://api.github.com/repos/rails/rails,30597,backport_29146::5-1-stable,0,merged,,This PR backports #29146 to the 5-1-stable branch. Fixes #30588,c6c651933ad9685ad57e9900abde22ad1f9f0892::
https://api.github.com/repos/rails/rails,30557,trailing_slash::master,0,closed,railties::stale::,"### Summary 07d84b7c8db5b85f7521cfc5d2028ed973d9a14b accidentally made it so that paths with trailing slashes are ignored by bin/rails test. This is a bit annoying, as Bash auto-complete adds a trailing slash for directory names. This commit fixes the bug and adds relevant tests. ### Other Information This is an (unintended, I assume) behavior change between Rails 5.1.2 and Rails 5.1.4, so I think this should be backported to 5-1-stable. I'd be happy to submit a separate PR for that, after this goes through code review.I added this because the test below needed 3 folders so it'd fail without the fix. I figured it's a good idea to add a 3rd folder here too, to make sure that the code does pick up 2 folders, instead of dropping all the arguments. ::I'd move this to a helper instead, its kind of long and hard to understand.::",335c422797a7d7a5ef55e3e98362342e0847e02c::
https://api.github.com/repos/rails/rails,30555,allow-skipping-rails-minitest-reporter::master,0,closed,,"### Summary Add an option for skipping Rails' custom Minitest reporter. Due to how Minitest loads plugins (alphabetical order), is really hard to control how reporters will be configured. Take the following scenario: - I want to use a custom reporter available through the gem [minitest-utils](https://rubygems.org/gems/minitest-utils). - Minitest will load plugins using `Gem.find_files('minitest/*_plugin.rb')`, so this will always return Rails' plugin as the last one from the list. - Running tests will result in duplicated output (even though `minitest-utils` clears the existing reporters). With the change proposed by this PR, one can run tests like `rails test --skip-reporter`. This approach is somewhat inspired by [minitest/pride](https://github.com/seattlerb/minitest/blob/ca6a71ca901016db09a5ad466b4adea4b52a504a/lib/minitest/pride_plugin.rb#L5-L7), which is enabled by `--pride`. Please also check #30554, which backports this to Rails 5.1.Since `-s` option conflicts with minitest's option(SEED option), it should avoid.::Good call. I'll keep just the full switch (`--skip-rails-reporter`).::",70f259e9435ee6aec24321f8d9973075af78d1ed::e47cf7631af5145510d3c843b47a08725e8eacfb::
https://api.github.com/repos/rails/rails,30436,backport_30421::5-1-stable,0,merged,,This PR backports #30421 to the 5-1-stable branch. ping @eileencodes,8f900b73df7fc0de8f12ed96125220301419e75a::
https://api.github.com/repos/rails/rails,30300,jm-bp-5-0-stable::5-0-stable,0,merged,activerecord::docs::,"Tried to backport myself, but ran into the error below. For some reason, didn't run into any issues with `5-1-stable` ``` Jonathans-MacBook-Pro:activerecord jon$ git cherry-pick 835246e622dc0431af3cb951db22ef78876006af [5-0-stable 497d1f8501] Add note about JSON/JSONB serialization changes Date: Thu Aug 17 13:43:43 2017 -0400 1 file changed, 9 insertions(+) Jonathans-MacBook-Pro:activerecord jon$ git push dnt 5-0-stable Counting objects: 5, done. Delta compression using up to 4 threads. Compressing objects: 100% (5/5), done. Writing objects: 100% (5/5), 1.40 KiB | 1.40 MiB/s, done. Total 5 (delta 4), reused 0 (delta 0) remote: Resolving deltas: 100% (4/4), completed with 4 local objects. remote: error: GH006: Protected branch update failed for refs/heads/5-0-stable. remote: error: You're not authorized to push to this branch. Visit https://help.github.com/articles/about-protected-branches/ for more information. To github.com:rails/rails.git ! [remote rejected]       5-0-stable -> 5-0-stable (protected branch hook declined) error: failed to push some refs to 'git@github.com:rails/rails.git' ```",497d1f8501366114dd9f6b55459f1b894774e251::
https://api.github.com/repos/rails/rails,30286,revenge-of-the-fixtures::4-2-stable,0,merged,,### Summary Apply changes from commit #29064  that address issue #29051 and update guide to clarify that mailer fixtures are not created when using the mailer generator. This is to Bring 4-2-stable up to date with latest edge rails. ### Other Information Attempted to use a patch from my original commit to master to backport these changes as per the [docs](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#older-versions-of-ruby-on-rails) but the patch failed because it did not apply correctly.,86e7fa9724a1bd9dce846adc23a7a30432075107::
https://api.github.com/repos/rails/rails,30277,backport_29918::5-1-stable,0,merged,,"This PR backports #29918 to the 5-1-stable branch. Without this fix, many warnings are displayed. Ref: https://travis-ci.org/rails/rails/jobs/264919805",4aaebc4969273a1c6e047b1460bf971c5d7c029a::
https://api.github.com/repos/rails/rails,30257,backport_29010::5-1-stable,0,merged,,This PR backports #29010 to the 5-1-stable branch.,b53a8469e8c7571c3e06e07addc1fa57efa31973::
https://api.github.com/repos/rails/rails,30163,backport-ar-association-reload::5-1-stable,0,closed,,"Hello, This is just a tiny pull request that partially backports #30125 to `5-1-stable` has it's been backported to `5-0-stable` but this branch isn't completely up to date with the documentation changes. Cross-refs #30162. Have a nice day !",badd704c57aa90545de7470ad91410947ef99313::
https://api.github.com/repos/rails/rails,30154,backport_29273::5-1-stable,0,merged,,"This PR backports #29175, #29273, and #29491 to fix #28754.",2f2e470d2b187551dbaa3f7e0ca7645837fa8be4::8bd50999aeaa15e07ff71c726064847bd618961b::c0347adddc951f11a0ace04a8973b8bcb96399bb::
https://api.github.com/repos/rails/rails,30142,add-missing-bit-reload-associations-docs::master,0,merged,,"Hello! I missed some documentation that I think is nice to have when I did https://github.com/rails/rails/pull/30125 and I noticed about this when I did the backport to 5-0-stable https://github.com/rails/rails/pull/30141 As promised, here is the extra bit 😄 Sorry for the noise!Does this return an array? I'm pretty sure it just returns `self`::Same here -- I don't think this returns an array.::Hi @sgrif, thanks for the feedback! I based this on this documentation above https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations.rb#L1194-L1196 Both `collection` and `collection.reload` return an `ActiveRecord::Associations::CollectionProxy` so they behave the same. Does it mean that the documentation for `#collection` is also wrong? I'm not sure how to rephrase it, though 🙈 ::updated the link, sorry :)::Yes, that documentation is also wrong. It was last touched by https://github.com/rails/rails/commit/6e754551 9 years ago when the behavior was different. I would rephrase it by replacing `array` with `Relation`::You could also just link to `Relation#reload`::sure! Let me do the changes and I'll amend this commit! Thanks for the tip! :)::@sgrif done here and in the backport https://github.com/rails/rails/pull/30141! ✌️ ::",bc129f1be8e37b4e7ed22317871b1e66c2682410::
https://api.github.com/repos/rails/rails,30141,add-reload-associations-docs::5-0-stable,0,merged,,Hello again ❤️ @rafaelfranca this is the backport of #30125. I just noticed I missed some documentation for `collection.reload` and I added it here. I'll create another PR to master adding that bit 🙇‍♀️ I also included the changes of https://github.com/rails/rails/pull/29459/files. I wanted to cherry-pick the commit but it was easier just to apply the changes manually 🙈 That's all! Thanks!,3b0f24f06741deb460418d8990546cbf4849d57c::
https://api.github.com/repos/rails/rails,30140,add-reload-associations-docs::5-0-stable,0,closed,,@rafaelfranca this is the backport of https://github.com/rails/rails/pull/30125 I also included the changes of https://github.com/rails/rails/pull/29459/files. I wanted to cherry-pick the commit but it was easier just to apply the changes manually 🙈 Thanks! <3,b19a65cc9f96dc711f332a5f2ceae1c7d67e8474::
https://api.github.com/repos/rails/rails,29991,backport-sti-scope-fix::5-0-stable,0,merged,,This is a backport of #29569 into 5-0-stable.,da464ac042221f21b6fcb685a10b126d1d0cc0d0::
https://api.github.com/repos/rails/rails,29881,fix_unscope_where_column_with_or_5-1::5-1-stable,0,merged,,This is a backport of #29780.,d378fcb254462f9da8d921f0fa2e9b9868a7d34e::
https://api.github.com/repos/rails/rails,29876,fix_default_current_timestamp_and_virtual_columns::5-1-stable,0,merged,,"This PR backports #29704, #29706, and #29708.",f822ec3bd5893c9e936db6239bbcc0fadc8d557a::9e5205d10f4f12df9c79489cd6024c5fd9f3adf9::aa44945881510b86929cab4df3d39297e42483d3::
https://api.github.com/repos/rails/rails,29831,backport-29821-5-1::5-1-stable,0,merged,,"Reason: #29725 has been backported to 5-1-stable, and this fix also affects in 5-1-stable.",1940bce17da863eee2d3c3f28c00a70e08a3d050::
https://api.github.com/repos/rails/rails,29805,avoid_or_clause_duplicates::master,0,closed,,"Right now, when using `#or`, nothing is done to try to avoid duplicated conditions. As a result, query length increases at an exponential rate. This makes it really hard to parse for humans, making debugging / understanding the query log really hard. This PR does basic work to extract the predicates and binds that are common to both associations beings `#or`-ed and put them first, before the `#or`. To show the scale of the problem: ``` class Project scope :big, -> { where(big1: true).or(where(big2: true)) } scope :important, -> { where(important1: true).or(where(important2: true)) } scope :ongoing, -> { where(ongoing1: true).or(where(ongoing2: true)) } end Project.big # 2 conditions #=> SELECT...WHERE (""projects"".""big1"" = ? OR ""projects"".""big2"" = ?) Project.big.important # 6 conditions #=> SELECT...WHERE ((""projects"".""big1"" = ? OR ""projects"".""big2"" = ?) AND ""projects"".""important1"" = ? OR (""projects"".""big1"" = ? OR ""projects"".""big2"" = ?) AND ""projects"".""important2"" = ?) Project.big.important.ongoing # 14 conditions #=> To long to show # Then 30 conditions # Then 62 # Then 126 conditions, for using #or 6 times. This should be 12! # After this fix, it is correctly 2, 4, 6, 8, 10, ... conditions. ``` To make further development in WhereClause easier, the basic behavior of iterating over the predicate and binds has been generalized. In the current code, there are 2 questions i ask as comments: * I wonder if `#+` should be changed to do the same behavior as `#|`. The only reason not to, in my mind, is if someone considers this to be a performance issue. * `#partition_common_left_right` is currently less readable than it could be if i just used the new operators I added to WhereClause. However, those operators might be a little slower since it means more iterations over the lists in the WhereClauses. Because the the logic for finding the binds that go with a predicate has been extracted and fixed, this also fixes the #29780. However, the test case in #29780 is not included in this PR, and I assume #29780 will be backported, unlike this PR.",00edb56e9b8d4cbcf93289bc05621e7104cdd880::
https://api.github.com/repos/rails/rails,29780,fix_unscope_where_column_with_or::master,0,merged,,"Right now, unscope sometimes doesn't skip a bind as it iterates over the different conditions. For example, when that bind is used as part of an OR clause. As a result, the unscope will remove the wrong bind. For example: ``` Post.where(id: 1).or(Post.where(id: 2)).where(foo: 3).unscope(where: :foo).to_sql # Currently: #     SELECT ""posts"".* FROM ""posts"" WHERE (""posts"".""id"" = 2 OR ""posts"".""id"" = 3) # With fix: #     SELECT ""posts"".* FROM ""posts"" WHERE (""posts"".""id"" = 1 OR ""posts"".""id"" = 2) ``` I propose this bugfix gets also backported to Rails 5.1. Rails 5.0 had a different version that was probably more buggy, since a bugfix was applied to this same function as part of 5.1, making it harder to backport to 5.0.",425ba83c28214ca97c5d3600c16ad7a796cd33e6::36ff7b63ec083924a5b407cf3df7ae90e22183e2::
https://api.github.com/repos/rails/rails,29594,fix-regression-with-date-helper::5-1-stable,0,merged,,"It seems that commit https://github.com/rails/rails/commit/756de667ae9a4b17a7ab6c7e4b17e73e67c27cba was never backported to `5-1-stable` and `5.1.2` was released without it, causing the issue described in #29582.",2c97fbf6503c9199f3fe5ed06222e7226dc6fcd9::
https://api.github.com/repos/rails/rails,29572,test-runner-no-eager-require::master,0,merged,,"Fixes https://github.com/rails/rails/issues/29469. Fixes https://github.com/rails/rails/issues/25046. By making the Rails minitest behave like a standard minitest plugin we're much more likely to not break when people use other minitest plugins. Like minitest-focus and pride. To do this, we need to behave like minitest: require files up front and then perform the plugin behavior via the at_exit hook. This also saves us a fair bit of wrangling with test file loading. Finally, since the environment and warnings options have to be applied as early as possible, and since minitest loads plugins at_exit, they have to be moved to the test command. Ideally, I'd like to backport this to both 5-1-stable and 5-0-stable. It's an extensive fix for sure though.Renaming this file to be ""minitest/*_plugin.rb"" makes minitest autoload us.::I should try removing this altogether now.::In a later PR, I'd like to follow minitest-focus'es lead to make the filters regexps. I.e. move the filter definitions into `plugin_rails_init` by resolving line numbers to a specific method name. Needs to handle a file creating multiple Runnables though and running with multiple line numbers (test/models/post_test.rb:4:8). Tried to do it for this, but faced way too much head-desking.::I really despise this code. At first I had defined these as Thor options in the test command, but I couldn't figure out a way to make Thor remove the options from ARGV after parsing them (that also broke the test/generators/plugin_test_runner_test.rb tests). ::The test runner of the rails plugin does not use `TestCommand`. Therefore, `TestCommand#help` will not be called and rails' help will not be displayed. ``` $ rails plugin new yaffle $ cd yaffle $ <edit some files> $ ./bin/test --help minitest options: -h, --help                       Display this help. -s, --seed SEED                  Sets random seed. Also via env. Eg: SEED=n rake -v, --verbose                    Verbose. Show progress processing files. -n, --name PATTERN               Filter run on /regexp/ or string. -e, --exclude PATTERN            Exclude /regexp/ or string from run. Known extensions: rails, pride -b, --backtrace                  Show the complete backtrace -d, --defer-output               Output test failures and errors after the test run -f, --fail-fast                  Abort test run on first failure or error -c, --[no-]color                 Enable color in the output -p, --pride                      Pride. Show your testing pride! ``` I think that it is better to keep help displayed on `plugin_rails_options`, what about it? ::Would `Display Ruby warning` be more clear option name than `Enable`?::I noticed that but opted to separate them out. If we're running with `ruby -Itest test/models --help` we aren't running directly through the Rails test command, so I liked that we're slightly indicating that in the different help output. For instance when tests are run with `ruby` we can't support the `-e` option (iirc the app is booted once `rails/test_help` is run, so invoking the test command from there won't work either).::Oh, I see. Thanks for you explanation!::Should we need `Rails::TestUnit::Runner.parse_options(ARGV)` here?::Can we use `Rails::TestUnit::Runner.run`?::",0d72489b2a08487f71dd4230846c01a5d99ef35f::
https://api.github.com/repos/rails/rails,29439,set-skip-default-ids::master,0,closed,,"Per https://github.com/rails/rails/commit/a6d065e39f9285119d75a05ee46c659f8b3c0db8, ids are not outputted by default in `form_with`.  Passing `skip_default_ids: false` will not set the option to false as it is currently overridden and forced to true within `form_with`. This change will allow ids to be outputted if `skip_default_ids: false` is passed. Where this method is being used? It seems to not be used at all.::We need to keep it `true` since we are not going to change the current behavior in 5.1.::What do you think about `form_with_generates_ids` as the name?::Aren't we? It was a conscious decision to skip them in 5.1 at the time, *but* if we're saying that change introduced a bug (and doesn't have any worse effect than making HTML slightly bulkier) ISTM we might reasonably backport the do-use-ids behaviour to fix the bug.::That is true. Let's change the default.::It is used on line 53 (https://github.com/rails/rails/pull/29439/files#diff-6f3573047e15b0e2eba56e404d6a03f5R53). It uses the id to make the `for` attribute. It is no longer needed though so I'll remove it.  ::Sounds good to me!::I like that a lot, makes it a little bit easier to read. ::",7b11b3867513f58ef5094a79c52ab54d0e87a870::010d7ac01c4e3bcd9175a6aed8518d0f0715026f::a5308157b99ec491613fdd4f39165d00ce613fc3::8bd1e1d038c569a1f8dc9772b80bbd400e4f8864::2d14d3eed2fed05c64ecd1fae84dfb57f5575262::89f663cd1e44bb93a48ac51f655d2768905a4e77::8335e19c65df09d880b43e0a0554457d84f4b596::bb7b250c46e348c5a62ec250f33c56e7bea41129::
https://api.github.com/repos/rails/rails,29259,4-2-backport-fix-session-keys-and-values-methods::4-2-stable,0,closed,,This is a backport of PR #28895 which has been merged into master. This fixes a bug where session.keys and session.values return an empty array unless one of the other methods that does lazy loading from the underlying store is called first. #keys and #values should also call #load_for_read!,a145b07851f188906ab5c60199f45ae816ca5667::
https://api.github.com/repos/rails/rails,29212,threadsafe-load-schema::master,0,closed,activerecord::,Fixes #28589 This prevents multiple distinct threads from attempting to call `load_schema!`. On JRuby this bug would result in serialized attributes being deeply recursively nested. Note: This test will occasionally flake due to #14021 (See also #27418). Needs to be backported to 5.0/5.1 ### Summary See #28589 Duplicates (Improves) #28756,006d6145ba27a9066a9ba37135137fb00c7d4a08::3a3ea2ff4e04595b7cb4134fe666437911162745::29839ffd34fa16ecf6d206000d8576e7977c3f56::
https://api.github.com/repos/rails/rails,28924,fix-release-note::master,0,merged,docs::,"* `Permit same-origin connections by default` was backported in db70978, 549d732. * `Deprecated `:controller` and `:action` path parameters` was included in 6520ea5. * `Exception handling: use `rescue_from` was included in 6b54316.",df6aef2518884f65871f719125a972790518fd17::
https://api.github.com/repos/rails/rails,28879,ar/backport_28776::5-0-stable,0,merged,activerecord::,Backports #28776 to 5-0-stable as well after backporting it to 5-1-stable in #28871.,66d72d8de8d7a7c3ad63a64880d9e1770f34d832::
https://api.github.com/repos/rails/rails,28871,ar/backport_28776::5-1-stable,0,merged,activerecord::,"Backports https://github.com/rails/rails/pull/28776. If this is accepted, I'd also like to backport it to 5-0-stable.",e7c9fe20abf89cfc62795f201c0222076a8993fd::
https://api.github.com/repos/rails/rails,28837,do_not_use_nonexistent_function::5-1-stable,0,closed,actionview::,"`handleDisabledElement` was added to master in #28367. The #28367 was not backported to 5-1-stable, but when backporting 154c879e097ba088a8eee1d55f4d9703b70680b7, only a part of it was mistakenly included. The test is an error, but it seems that it could not be detected. https://travis-ci.org/rails/rails/jobs/224686927",205f23829c401cf943dd3439805ffe26b6d96cb3::
https://api.github.com/repos/rails/rails,28790,require_as_time_in_testing_time_helpers::master,0,merged,activesupport::,"If you just try to use `ActiveSupport::Testing::TimeHelpers` standalone by requiring `active_support/testing/time_helpers`, you currently get an error: ``NoMethodError: undefined method `change' for 2017-12-14 01:04:44 -0500:Time``. 9f6e82ee4783e491c20f5244a613fdeb4024beb5 added a dependency on `AS::Time` by using `AS::Time#change`. Here's a script to reproduce the error: ```ruby require ""bundler/inline"" gemfile(true) do source ""https://rubygems.org"" gem ""activesupport"", github: ""rails/rails"" end require ""active_support/testing/time_helpers"" require ""minitest/autorun"" class BugTest < Minitest::Test include ActiveSupport::Testing::TimeHelpers def test_stuff travel_to Time.new(2017, 12, 14, 01, 04, 44) do assert true end end end ``` It currently fails for all 5.x.x versions and master.  Ideally, this would be backported to `5-0-stable` and `5-1-stable` as well. Thanks!Can we require only what we need. I believe only `active_support/core_ext/time/calculations` should be sufficient.::@rafaelfranca Updated.::",1d82b7ce7c96b86e8ef44b2eba12bccd2bd14331::
https://api.github.com/repos/rails/rails,28788,require_as_notifications_in_cache::master,0,merged,activesupport::,"Right now, if you install the current release version of Active Support (5.0.2) and try to use its cache implementation standalone by requiring `active_support/cache`, it crashes with `NameError: uninitialized constant ActiveSupport::Notifications`.  (`AS::Notifications` is used in `cache.rb` down around [line 555](https://github.com/rails/rails/blob/8776a7139757d0b264785c774d4e7f37d4bc1ac7/activesupport/lib/active_support/cache.rb#L555).) Here's a quick repro script: ```ruby require ""bundler/inline"" gemfile(true) do source ""https://rubygems.org"" gem ""activesupport"", ""5.0.2"" end require ""active_support/cache"" cache_store = ActiveSupport::Cache::MemoryStore.new cache_store.write('test', 'okay') puts cache_store.read('test') ``` `5.1.0.beta1` also fails.  However, any version _newer_ than `5.1.0.beta1` passes (including `master`). This is because [this commit](https://github.com/rails/rails/commit/75924c4517c8f87712d3f59c11f10152ed57b9d8) inadvertently included `AS::Notifications` into `AS::Cache` (thus fixing the issue) by mixing [`AS::Deprecation` into `AS::Duration`](https://github.com/rails/rails/blob/75924c4517c8f87712d3f59c11f10152ed57b9d8/activesupport/lib/active_support/duration.rb#L4), giving you a nice require chain of [`Cache` including `Time`][1] [including `Duration`][2] [including `Deprecation`][3] [including `Behaviors`][4] [including `Notifications`][5].  Phew. Aside from being not very explicit, the fact that the fixing is specifically done by `AS::Deprecation` means that this fix is probably only temporary (until the deprecation is removed). This PR just makes the inclusion explicit to future-proof against this breakage. (Ideally, this would also be backported to `5-0-stable` to get picked up in any subsequent point release.) See also: https://github.com/rails/rails/pull/14667 [1]: https://github.com/rails/rails/blob/75924c4517c8f87712d3f59c11f10152ed57b9d8/activesupport/lib/active_support/cache.rb#L6 [2]: https://github.com/rails/rails/blob/75924c4517c8f87712d3f59c11f10152ed57b9d8/activesupport/lib/active_support/time.rb#L2 [3]: https://github.com/rails/rails/blob/75924c4517c8f87712d3f59c11f10152ed57b9d8/activesupport/lib/active_support/duration.rb#L4 [4]: https://github.com/rails/rails/blob/75924c4517c8f87712d3f59c11f10152ed57b9d8/activesupport/lib/active_support/deprecation.rb#L16 [5]: https://github.com/rails/rails/blob/75924c4517c8f87712d3f59c11f10152ed57b9d8/activesupport/lib/active_support/deprecation/behaviors.rb#L1",2feaf438985c8bcf1ee9d5c25d70fd4ade5be5d1::
https://api.github.com/repos/rails/rails,28734,strong-parameters::master,0,merged,actionpack::,"Some changes were made in this PR to improve the upgrade path of Strong Parameters not inheriting from hash anymore. ### Raise exception when calling `to_h` in an unpermitted `Parameters` Before we returned either an empty hash or only the always permitted parameters (:controller and :action by default). The previous behavior was dangerous because in order to get the attributes users usually fallback to use `to_unsafe_h` that could potentially introduce security issues. The `to_unsafe_h` API is also not good since Parameters is a object that quacks like a `Hash` but not in all cases since `to_h` would return an empty hash and users were forced to check if `to_unsafe_h `is defined or if the instance is a `ActionController::Parameters` in order to work with it. This end up coupling a lot of libraries and parts of the application with something that is from the controller layer. ### Add ActionController::Parameters#to_hash to implicit conversion Now methods that implicit convert objects to a hash will be able to work without requiring the users to change their implementation. This method will return a Hash instead of a `HashWithIndefirentAccess` to mimic the same implementation of `HashWithIndefirentAccess#to_hash`. ### Implement ActionController::Parameters#to_query and #to_param Previously it was raising an error because it may be unsafe to use those methods in a unpermitted parameter. Now we delegate to to_h that already raise an error when the Parameters instance is not permitted. This also fix a bug when using `#to_query` in a hash that contains a `ActionController::Parameters` instance and was returning the name of the class in the string. ## Backport The plan is to backport this to 5.1 and part of it to 5.0. ### Backport to 5.0 The plan is to backport the first and the last change fully. The `#to_hash` change I want to just undeprecate it for now since it is already calling `to_hash` in the internal array and the result includes all the parameters in the case were they are not permitted. Also implement `respond_to_missing` since we have a `method_missing`. cc @maartenvg @nicolaslupien @trevorturk""unable to convert unpermitted parameters to hash"", maybe? ""not allowed"" sounds like we're being difficult.::Forbidden doesn't sound quite right.. how about UnfilteredParameters?::I don't think this should mutate the original params object.. otherwise `params.to_unsafe_h` in one place that's being careful some other way could leave a later `params.to_h` exposed to danger.::oh. That is right. I was wondering why we implemented like that and now I know it. We are missing some test coverage about this case. I'll add. Do you have preference between dup the paramters and mutate it or the implementation like it was before?::If it's just a simple dup that seems fine.. if it would need to be a deep dup, I think it's probably worth the effort of the more complicated version.::This will make our code cleaner, thanks! 👍 ::the parameters::maybe have `})` be on a new line, like above?::same comment -- maybe have `})` be on a new line, like above?::It would be friendly to the developer to suggest how they're supposed to fix the error (by using permit)::An exception don't need to explain what users have to do. It depends on the context and since we don't know what is the context we can't recommend something. But, it needs to be clear about what it means. Is the exception message and documentation clear about what it means?::+1 exceptions should clearly state what's wrong, but leave speculation about how the developer might fix it to someone/something else::""to transform it to a hash.""::How do we honor `always_permitted_parameters` now? Should it be deprecated?::Should the new documentation here use double quoted strings and no hash braces on the `new` call to fit our Rubocop rules?::Wouldn't Ruby implicitly call `to_hash` on the `params` here? Should we test an implicit case?::It is still needed when you permit let say `[:user][:name]` in a controller and the `action_on_unpermitted_parameters` is either `:log` or `:raise`. that way `:controller` and `:action` will not raise.::Done::Done::Done::Ah, it's handled in `unpermitted_parameters!`. Never mind 😊::",1396b05e5a36859a9730e7a4a56abba02c41c0d6::fd88ccc905549c61e0e4525fcb68b91d20b9afe9::9f4c2632ef28b9622ffa0eca5d02beea8ec809c0::e13e72cce4e08484aaa03b1e62fc0c70d0a7e6f9::af878151dbf93fae647ec682d96c0caaeb9a81f1::29333ddb69e69d0fa99a66bf5fab333e8c5611aa::3ee56f7b3de34aa7f6bc9fc69c93544c3f037798::70c6fb1a06d76d0d6cddb6fb50137aa1341745a0::93034ad7fea7e00562103a7cd0acfab19bbfadf9::
https://api.github.com/repos/rails/rails,28522,replace-deprecated-pg-constants::master,0,merged,PostgreSQL::activerecord::,"### Summary This PR replaces the top level classes PGconn, PGresult and PGError with their counterparts within the PG namespace. The old top level classes PGconn, PGresult and PGError were deprecated [since pg-0.13.0](https://github.com/ged/ruby-pg/blob/master/History.rdoc#v0130-2012-02-09-michael-granger-gedfaeriemudorg) . The old classes will probably be removed in pg-1.0.0. See: https://bitbucket.org/ged/ruby-pg/issues/257/release-version-10 . Possibly we'll add another 0.x release cycle which prints deprecation warnings when the old constants are used. ### Other Information Shall I add an entry to the CHANGELOG? Shall I open separate PRs for backporting to the stable branches? `PGresult` has been renamed to `PG::Result` [source](https://github.com/ged/ruby-pg/blob/master/History.rdoc#v0130-2012-02-09-michael-granger-gedfaeriemudorg)::Of course, `PG_DIAG_SQLSTATE` is first defined as [PG::Constants::PG_DIAG_SQLSTATE](https://github.com/ged/ruby-pg/blob/master/ext/pg.c#L551) but `PG::Constants` is included into [PG](https://github.com/ged/ruby-pg/blob/master/ext/pg.c#L643) , [PG::Result](https://github.com/ged/ruby-pg/blob/master/ext/pg_result.c#L1216) and [PG::Connection](https://github.com/ged/ruby-pg/blob/master/ext/pg_connection.c#L3925) . Each of these would work. ::Oh I just noticed this. It wasn't so obvious for the first time.::",f28a331023fab241f694c53802b45fb2d66c2c4f::
https://api.github.com/repos/rails/rails,28493,backport-fix-to-remove-duplicate-logging-output-from-rails-server::4-2-stable,0,merged,railties::,This is a follow up of PR #25284 which backported @schneems' fix in #22933 but only fixed `rails console`. This PR fixes the output when running `rails server`.,48220e80bea9d54872ceced1f0067539d644cae2::
https://api.github.com/repos/rails/rails,28465,4-2-stable::4-2-stable,0,merged,activesupport::,"Backport of #28147 which also includes 505537082849d912e8e29819655b80a573e93c0c by @pixeltrix ## Summary Properly handles `#to_time` calls on date/time/TWZ objects, including memoziation for speed and dealing with frozen objects. Fixes the `RuntimeError: can't modify frozen Time` when comparing against a frozen time in some cases. **Also**, includes the small change to prevent coersion with `to_time` unnecessarily if the object is already a `Time`. It is on `master` and `5-0-stable` but was lost on `4-2-stable` due to some reverts that were not backported. This specific omission is what makes this time freeze bug so much easier to encounter on `4.2.8`. https://github.com/rails/rails/blob/bac40b9cc8bae5a88743dba01bdee24ef8a2d579/activesupport/lib/active_support/core_ext/time/calculations.rb#L287-L288",8f37556ed543749fca8b523d30255d02ffd0a3f7::7441d767f25925dd66b8100de9f100eb3a3e95e5::524597d3b33365e3c558cb4298804a4ac690d597::
https://api.github.com/repos/rails/rails,28226,tarebyte/backport-rails-warning-fix::5-0-stable,0,merged,railties::,"### Summary This closes https://github.com/rails/rails/issues/28163 by backporting https://github.com/rails/rails/commit/a36ef6ee3ed44e6ce1636f12da59c473dddd94bb to the `5-0-stable` branch. I couldn't figure out a better way to test other than making screenshots with `5-0-stable` and my branch. | Before | After | | ------- | ----- | | <img width=""1546"" alt=""Screenshot with issue"" src=""https://www.dropbox.com/s/grgz76uiwduhkc4/Screen%20Shot%202017-02-28%20at%2015.13.59.png?raw=1""> | <img width=""1546"" alt=""Screenshot without issue"" src=""https://www.dropbox.com/s/iz0snzj3hu5nfkb/Screen%20Shot%202017-02-28%20at%2015.13.32.png?raw=1""> | Please let me know if there is a better way to do this, or if there is a test I should add to avoid this regression again. Thanks! Also thank you to @eileencodes for answering my questions about test failures ✨",aab4e6f0fa2c6d321a8a3b585f698a5c3940cacd::
https://api.github.com/repos/rails/rails,28189,tarebyte/backport-rails-warning-fix::5-0-stable,0,closed,railties::,"### Summary This closes https://github.com/rails/rails/issues/28163 by backporting https://github.com/rails/rails/commit/a36ef6ee3ed44e6ce1636f12da59c473dddd94bb to the `5-0-2` branch. I couldn't figure out a better way to test other than making screenshots with `5-0-2` and my branch. | Before | After | | ------- | ----- | | <img width=""1546"" alt=""screen shot 2017-02-26 at 14 49 44"" src=""https://cloud.githubusercontent.com/assets/564113/23343089/d9fa133c-fc33-11e6-9a7a-49f201250b48.png""> | <img width=""1546"" alt=""screen shot 2017-02-26 at 14 50 37"" src=""https://cloud.githubusercontent.com/assets/564113/23343073/71e406a4-fc33-11e6-9529-61432c844a26.png""> | Please let me know if there is a better way to do this, or if there is a test I should add to avoid this regression again. Thanks!",2c858521b8e3a4d00b703a5ec08adbfe6141497c::89ff9fc6cb370af7ea24be2f518460ec165d303c::174f37518b700397811e845cc7c20efe8800713b::
https://api.github.com/repos/rails/rails,28147,master-time-freeze::master,0,merged,activesupport::,"## Problem In 29f211f8419e91002feefe82d827875b3a035b55 memoization was added to `DateAndTime::Compatibility#to_time` for performance reasons. Unfortunately, since `Time` can be frozen memozation is not possible. Any creating of ivars from inside a frozen object will immediately raise a `RuntimeError`. So any call to `to_time` on a frozen `Time` raises. This affects all stable versions of rails. ## Solution I have reverted the commit that adds this memoization. I added regression tests to cover the cases with frozen `Time` and `DateTime` objects, since the module is included in both. In working through this problem and attempting to test it, I found that calling `#to_time` on a time does not return a frozen time, which is inconsistent: ``` > {}.freeze.to_hash.frozen? => true > """".freeze.to_s.frozen? => true > :x.freeze.to_sym.frozen? => true > DateTime.new.freeze.to_datetime.frozen? => true ``` I have fixed this by returning a frozen time if the original was frozen. ## Next steps This affects `5-0-stable` and `4-2-stable` so I intend to backport the memoization revert and regression tests to those branches. **Question** :question: Should I also backport the last commit making `.freeze.to_time` return a frozen time? It's a behaviour change. There is actually a more serious regression specifically and exclusively in `4.2.8` that causes a `RuntimeError: can't modify frozen Time` to be raised whenever anything is compared with a frozen `Time`. Details in a follow up PR. @rafaelfranca @pixeltrixThis change fixes the original bug.::Changes `prepend` to `include`. Not sure about this. Really it only is including the `preserve_timezone` property and the `to_time` we want to override. When it was prepending it would never reach the `to_time` in this file. Open to feedback.::These tests now check the `preserve_timezone` which is included into TWZ as part of `DateAndTime::Compatibility` included at the top.::Further tests the memoization and regression against the freezing bug.::I'm fuzzy on the benefits of overshadowing vs `undef_method`. So this may not be necessary.::",92fc8ec663f7dbb554c42dd41a86a7efe63dc725::
https://api.github.com/repos/rails/rails,28138,rwz/hwia-compact::master,0,merged,activesupport::,"### Summary In ActiveSupport 5 `HashWithIndifferentAccess#compact` currently returns nil when hash doesn't contain nil values in it. This PR fixes it. Example: ```ruby HashWithIndifferentAccess.new.compact       # => nil, expected {} {foo: :bar}.with_indifferent_access.compact # => nil, expected { ""foo"" => :bar } ``` Note: this fix will also have to be backported into 4-2 branch since the same bug was recently introduced there as well by https://github.com/rails/rails/commit/828e0199b79a23e2b098933dfc117b2ac21861a1",b74c7e939ae5bec5c7b98c456a3b9ceb56a0ca17::
https://api.github.com/repos/rails/rails,28132,aead-encrypted-cookies::master,0,merged,actionpack::needs feedback::security::,"### Summary This PR is the start of migrating from HMAC AES-CBC encrypted cookies to AEAD encrypted cookies. Commit d4ea18a8 added AES-256-GCM for Authenticated Encryption support. I'm hoping this PR could be the start of migrating cookies and sessions to this form of encryption. I think it's worth considering to what degree we should be supporting legacy signed and encrypted cookies as well. This PR includes a `UpgradeLegacyHmacAesCbcCookieJar` class which aims to seamlessly upgrade encrypted cookies. Should we be looking to deprecate older legacy schemes now? ### Other Information This PR comments out some tests that are now broken. Depending on how we move forward with encrypted cookies and to the degree to which legacy cookies are supported, I will update, fix, and add any tests as needed. Nitpick, instead of `blank?` a `nil?` is enough because `"""".bytes == 0`::Master now targets 5.2.::👍::Prefer: ```ruby request… && request… && request… && request…? ```::We should just make this the default for `ActiveSupport::MessageEncryptor`, so we wouldn't need this line. I'll make that part of @Assain's GSoC tasks 😉::Why do we need the `nil?` check? Should that be a separate fix + regression tests we backport to 5.1 and 5.0 as well?::Just saying deprecated in the guides won't cut it. We need to use `ActiveSupport::Deprecation.warn` — but I'm not sure we should deprecate those just yet, so let's leave this mention out of this PR.::I'm really confused about this. Are apps expected to overwrite this? When would it make sense for apps to do so?::I'd nix secret key in ""using the server-side ~secret key~ `secrets.secret_key_base`"".::`secret_key_base` could also be stored in `config/secrets.yml.enc`, so I'd drop the file reference.::I'd say: ``` Rails 5.2 uses AES in GCM mode for the encryption which couples authentication and encryption in one faster step and produces shorter ciphertexts. Encrypted cookies are automatically upgraded if the `config.action_dispatch.use_authenticated_cookie_encryption` is enabled. ```::This sounds good. Agreed this should become the new default!::This was something I stumbled upon during testing the upgrade cases. It is probably something that should be pulled out into a separate PR and backported to whenever AEAD was added as a feature of `MessageEncryptor`.::Sounds good. I'll remove this from the guide for now.::Will do!::I don't think very many applications set these salts. As long as the `secret_key_base` is sufficiently long and random it's fine to not use a random salt for PBKDF. In fact, since `secret_key_base` is from `SecureRandom` it would likely be OK to use directly as the cipher key. I'm not suggesting we do that though, because the key base is used for multiple features (like signed cookies). Some quick Googling lead me to [this post](http://blog.carbonfive.com/2016/07/06/rails-meet-phoenix-add-phoenix-to-your-rails-ecosystem-with-session-sharing/#step-1-configure-rails-accordingly) which mentions that they do set the salts (the post talks about accessing Rails' session in a Phoenix app). I'm on the fence if this new salt value should be configurable or not. If the value is changed for an existing application, legitimate cookies/sessions would be invalidated because the resulting cipher key would then be different and decryption would fail. Having a upgrade middleware to handle such a case would be overly complex and not something we should bother with.::I created PR rails/rails/pull/29086 for this since we'll likely want to backport this fix to Rails 5.1 (which is when AEAD mode was introduced into `MessageEncryptor`.::Agree the middleware is out of scope. I'm fine with making it configurable. And then we'll need to mention it in the security guide, but stress that it's not something that most apps should use: ``` Rails provides a default salt for the authenticated encryption. In the rare case you want to change that use `config.action_dispatch.authenticated_encrypted_cookie_salt`. ```::Lets keep these lines wrapped at 80 chars.::Also needs to keep the 80 char limit.::We need to copy over the intro from the `_5_1.rb` file and nestle the config to be under `config.action_dispatch`.::To nestle the config under `action_dispatch` we'll need to move the `false` assign to this file: https://github.com/rails/rails/blob/7cc526beb5c1ecc509db9f607c26fabaed4b4027/actionpack/lib/action_dispatch/railtie.rb#L18 Your override in `initializer` further below in that file then needs to take the new namespace into account.::Remember to rewrite this too 😉::Don't forget to add your name too 😄 ``` *Michael Coyne* ```::This seems off?::Are we sure that's the default?::I think this gets solved by Rails removing support for upgrading the cookies from CBC, so I'd rather not make this a config.::I was recently schooled on the new_framework_defaults_* file by @matthewd and how I've been doing them wrong. We should follow the now added example above: use the future default, but start it commented out.::Newer Rails app `load_defaults` from the version they were created with: https://github.com/rails/rails/blob/e8b4a927340183acba7fd0a2c3864afc2388a9aa/railties/lib/rails/generators/rails/app/templates/config/application.rb#L25-L26 So a brand new 5.2 app shouldn't have this file, it's only for 5.1 upgrading apps.::Let's mention the AES GCM benefits here (faster, shorter — copy from the security guide if you like) and that `new_framework_defaults_5.2.rb` shows how to upgrade.::Will double check this.::Will double check this.::Gotcha!::Understood. This file was a bit of mystery to me as well. Did this discussion occur in the PR from dhh for the new fragment caching feature? I'm definitely interested in fully understanding its uses!::See my [latest comment](https://github.com/rails/rails/pull/28132#issuecomment-302944890) for more discussion on this flag. I'm thinking to we just leave the upgrade behavior as is and have future version use ""pure"" GCM cookies...::The intent is captured here: https://github.com/rails/rails/pull/28469 😊::So this would be: ```ruby request.secret_key_base.present? && request.authenticated_encrypted_cookie_salt.present? && request.encrypted_signed_cookie_salt.present? && request.encrypted_cookie_salt.present? ``` And we can kill the `use_authenticated_cookie_encryption?` and `upgrade_legacy_hmac_aes_cbc_cookies?` methods then. `authenticated_encrypted_cookie_salt` was placed up further, since it's less likely to be assigned on upgrading apps and we'll avoid the presence check on the present in older releases salt values. Related: I'm not sure why we check the presence of the `secret_key_base` here. Rails apps won't boot without it these days.::Checking `secret_key_base` seemed a bit unnecessary and I do think it's likely safe to drop at this point. I'll also rework my commits soon and drop the `upgrade_legacy_hmac_aes_cbc_cookies` flag and revert the `upgrade_legacy_hmac_aes_cbc_cookies?` method to just check if the salt values are `present?`. I'll also update the above mention changes to the various guides. At that point, I think we'll be close to ready for this PR. Thanks again!!::",5a3ba63d9abad86b7f6dd36a92cfaf722e52760b::
https://api.github.com/repos/rails/rails,28048,5-0-stable-27801-multiple-rake-tests::5-0-stable,0,closed,railties::,"Replaces the rake_patterns instance variable with simple require, as `autorun` will run tests from all eagerly required test files. Fixes #27801 (**backport of merged #27802**, cherry picked from commit 1c8a4cdf63134f34d638703a956c2706d8e3789f on master)",edee35ea102a22d3f28c3b208b732fdf40be89a0::
https://api.github.com/repos/rails/rails,28029,empty_insert_statement_value_not_supported::master,0,merged,activerecord::,"## Summary Follow up to https://github.com/rsim/oracle-enhanced/pull/1180. This PR fixes the following 2 errors when using Oracle (11g) . ### 1. PrimaryKeysTest#test_create_without_primary_key_no_extra_query ```sh % ruby -v ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-linux] % ARCONN=oracle bundle exec ruby -w -Itest:lib test/cases/primary_keys_test.rb -n test_create_without_primary_key_no_extra_query (snip) Run options: -n test_create_without_primary_key_no_extra_query --seed 5401 # Running: E Finished in 0.286236s, 3.4936 runs/s, 0.0000 assertions/s. 1) Error: PrimaryKeysTest#test_create_without_primary_key_no_extra_query: NotImplementedError: NotImplementedError /home/vagrant/src/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced/database_statements.rb:228:in `empty_insert_statement_value' /home/vagrant/src/rails/activerecord/lib/active_record/relation.rb:56:in `insert' /home/vagrant/src/rails/activerecord/lib/active_record/persistence.rb:578:in `_create_record' /home/vagrant/src/rails/activerecord/lib/active_record/counter_cache.rb:178:in `_create_record' /home/vagrant/src/rails/activerecord/lib/active_record/locking/optimistic.rb:78:in `_create_record' /home/vagrant/src/rails/activerecord/lib/active_record/attribute_methods/dirty.rb:296:in `_create_record' /home/vagrant/src/rails/activerecord/lib/active_record/callbacks.rb:340:in `block in _create_record' /home/vagrant/src/rails/activesupport/lib/active_support/callbacks.rb:131:in `run_callbacks' /home/vagrant/src/rails/activesupport/lib/active_support/callbacks.rb:825:in `_run_create_callbacks' /home/vagrant/src/rails/activerecord/lib/active_record/callbacks.rb:340:in `_create_record' /home/vagrant/src/rails/activerecord/lib/active_record/timestamp.rb:95:in `_create_record' /home/vagrant/src/rails/activerecord/lib/active_record/persistence.rb:555:in `create_or_update' /home/vagrant/src/rails/activerecord/lib/active_record/callbacks.rb:336:in `block in create_or_update' /home/vagrant/src/rails/activesupport/lib/active_support/callbacks.rb:97:in `run_callbacks' /home/vagrant/src/rails/activesupport/lib/active_support/callbacks.rb:825:in `_run_save_callbacks' /home/vagrant/src/rails/activerecord/lib/active_record/callbacks.rb:336:in `create_or_update' /home/vagrant/src/rails/activerecord/lib/active_record/persistence.rb:154:in `save!' /home/vagrant/src/rails/activerecord/lib/active_record/validations.rb:50:in `save!' /home/vagrant/src/rails/activerecord/lib/active_record/attribute_methods/dirty.rb:43:in `save!' /home/vagrant/src/rails/activerecord/lib/active_record/transactions.rb:313:in `block in save!' /home/vagrant/src/rails/activerecord/lib/active_record/transactions.rb:384:in `block in with_transaction_returning_status' /home/vagrant/src/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:225:in `block in transaction' /home/vagrant/src/rails/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:196:in `within_new_transaction' /home/vagrant/src/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:225:in `transaction' /home/vagrant/src/rails/activerecord/lib/active_record/transactions.rb:210:in `transaction' /home/vagrant/src/rails/activerecord/lib/active_record/transactions.rb:381:in `with_transaction_returning_status' /home/vagrant/src/rails/activerecord/lib/active_record/transactions.rb:313:in `save!' /home/vagrant/src/rails/activerecord/lib/active_record/suppressor.rb:46:in `save!' /home/vagrant/src/rails/activerecord/lib/active_record/persistence.rb:51:in `create!' test/cases/primary_keys_test.rb:189:in `test_create_without_primary_key_no_extra_query' 1 runs, 0 assertions, 0 failures, 1 errors, 0 skips ``` ### 2. ActiveRecord::DupTest#test_dup_without_primary_key ```sh % ARCONN=oracle bundle exec ruby -w -Itest test/cases/dup_test.rb -n test_dup_without_primary_key (snip) Run options: -n test_dup_without_primary_key --seed 41695 # Running: E Finished in 0.197323s, 5.0678 runs/s, 0.0000 assertions/s. 1) Error: ActiveRecord::DupTest#test_dup_without_primary_key: NotImplementedError: NotImplementedError /home/vagrant/src/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced/database_statements.rb:228:in `empty_insert_statem ent_value' /home/vagrant/src/rails/activerecord/lib/active_record/relation.rb:56:in `insert' /home/vagrant/src/rails/activerecord/lib/active_record/persistence.rb:578:in `_create_record' /home/vagrant/src/rails/activerecord/lib/active_record/counter_cache.rb:178:in `_create_record' /home/vagrant/src/rails/activerecord/lib/active_record/locking/optimistic.rb:78:in `_create_record' /home/vagrant/src/rails/activerecord/lib/active_record/attribute_methods/dirty.rb:296:in `_create_record' /home/vagrant/src/rails/activerecord/lib/active_record/callbacks.rb:340:in `block in _create_record' /home/vagrant/src/rails/activesupport/lib/active_support/callbacks.rb:131:in `run_callbacks' /home/vagrant/src/rails/activesupport/lib/active_support/callbacks.rb:825:in `_run_create_callbacks' /home/vagrant/src/rails/activerecord/lib/active_record/callbacks.rb:340:in `_create_record' /home/vagrant/src/rails/activerecord/lib/active_record/timestamp.rb:95:in `_create_record' /home/vagrant/src/rails/activerecord/lib/active_record/persistence.rb:555:in `create_or_update' /home/vagrant/src/rails/activerecord/lib/active_record/callbacks.rb:336:in `block in create_or_update' /home/vagrant/src/rails/activesupport/lib/active_support/callbacks.rb:97:in `run_callbacks' /home/vagrant/src/rails/activesupport/lib/active_support/callbacks.rb:825:in `_run_save_callbacks' /home/vagrant/src/rails/activerecord/lib/active_record/callbacks.rb:336:in `create_or_update' /home/vagrant/src/rails/activerecord/lib/active_record/persistence.rb:154:in `save!' /home/vagrant/src/rails/activerecord/lib/active_record/validations.rb:50:in `save!' /home/vagrant/src/rails/activerecord/lib/active_record/attribute_methods/dirty.rb:43:in `save!' /home/vagrant/src/rails/activerecord/lib/active_record/transactions.rb:313:in `block in save!' /home/vagrant/src/rails/activerecord/lib/active_record/transactions.rb:384:in `block in with_transaction_returning_status' /home/vagrant/src/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:225:in `block in transaction' /home/vagrant/src/rails/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:186:in `within_new_transaction' /home/vagrant/src/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:225:in `transaction' /home/vagrant/src/rails/activerecord/lib/active_record/transactions.rb:210:in `transaction' /home/vagrant/src/rails/activerecord/lib/active_record/transactions.rb:381:in `with_transaction_returning_status' /home/vagrant/src/rails/activerecord/lib/active_record/transactions.rb:313:in `save!' /home/vagrant/src/rails/activerecord/lib/active_record/suppressor.rb:46:in `save!' /home/vagrant/src/rails/activerecord/lib/active_record/persistence.rb:51:in `create!' test/cases/dup_test.rb:150:in `test_dup_without_primary_key' 1 runs, 0 assertions, 0 failures, 1 errors, 0 skips ``` `empty_insert_statement_value` is not implemented by Oracle database. When using `empty_insert_statement_value` method, raises `NotImplementedError`. ### Other Information With 5-0-stable, the `NotImplementedError` exception does not occur. So backport to 5-0-stable is unnecessary.",d62a79fae4f024872942057fcc0093ae95ec5e49::
https://api.github.com/repos/rails/rails,28006,master::master,0,merged,activesupport::,"### Summary From my entry in the **ActiveSupport** changelog: > In Core Extensions, make `MarshalWithAutoloading#load` pass through the second, optional argument for `Marshal#load( source [, proc] )`. This way we don't have to do `Marshal.method(:load).super_method.call(sourse, proc)` just to be able to pass a proc. For reference: [https://ruby-doc.org/core-2.2.0/Marshal.html#method-c-load](https://ruby-doc.org/core-2.2.0/Marshal.html#method-c-load ) ### Other Information I originally [submitted a similar pull request](https://github.com/rails/rails/pull/27894) to 4-2-stable a couple weeks ago. What's the standard practice for backporting changes like this?This should not be here.::What is this asserting? Is not the assertion above sufficient?::Thanks for your feedback. I guess we don't need lines 33-35, because by testing the output of Marshal#load we are also testing that the function doesn't raise an error. And I could see why line 38 is arguably testing the Marshal ruby class, not the ActiveSupport extension.::",a72498f776b2e67b7e3a074423181defcd06fc56::
https://api.github.com/repos/rails/rails,27972,travel_to_datetime::4-2-stable,0,merged,activesupport::,"Support for stubbing `DateTime.now` with `travel_to` was added in https://github.com/rails/rails/pull/18758. It was later backported to 4-2-stable as part of https://github.com/rails/rails/commit/d7ac341147159ff527f9a5a726da47c0735b86f0, but the tests and changelog entry were not included. The documentation update from https://github.com/rails/rails/pull/19303 is also included here.",0c9751a8f660add7dac2d9434d2d3f88e2a0eaa4::2c31e1c0e8afb70c5e27597349e5dc9ff5d80a88::
https://api.github.com/repos/rails/rails,27905,4-2-stable::4-2-stable,0,closed,needs feedback::,"Use concurrent-ruby, not deprecated thread_safe gem. This backports 56ac6e4, which was merged in https://github.com/rails/rails/pull/21679 to 5.0, but we have a 4.2 app that would love not to have deprecation warnings on 2.4 :) It was easier for me to reimplement the commit rather than resolve conflicts (there were a few..), but I definitely want to keep the original author credit for @jdantonio -- not sure how to do that, so help welcome :) Note that `tzinfo` still uses `thread_safe` in activesupport, but no minor version bump exists yet for that update so I've left well alone. My hope is that this resolves the majority of the deprecation warnings in 4.x rails applications.",29047edb2b79e65e31f073f5ced166ef702926ae::
https://api.github.com/repos/rails/rails,27832,backtrace-silencer-regex::master,0,merged,activesupport::,"In https://github.com/rails/rails/commit/575dbeeefcaafeb566afc07cdd8b55603b698d9f a backport for Ruby 2.4's [`Regexp#match?`](https://bugs.ruby-lang.org/issues/8110) was introduced. On Ruby 2.4 this method [is about 13% faster](http://blog.bigbinary.com/2016/11/04/ruby-2-4-implements-regexp-match-without-polluting-global-variables.html) than `=~` because it doesn't allocate a MatchData object and sets the value of `$~`. Since the silencer only cares about a boolean return value, we should use `match?`.",870af0679e1a8a1b19053f1d559df5b74af4669f::
https://api.github.com/repos/rails/rails,27822,bump-unicode-version::master,0,merged,activesupport::,"### Summary 9.0.0 was released on June 21, 2016 http://blog.unicode.org/2016/06/announcing-unicode-standard-version-90.html http://www.unicode.org/versions/Unicode9.0.0/ There are some changes about grapheme cluster in Unicode 9.0.0: http://unicode.org/reports/tr29/#Grapheme_Cluster_Boundary_Rules ### Other Information I noticed that `unpack_graphemes` will return [Other] when the argument is Other ÷ Prepend (it must be [Other, Prepend]). But in [Unicode 8.0.0's Prepend has no characters](http://www.unicode.org/reports/tr29/tr29-27.html#Prepend) so we don't have to backport following patch: ```diff should_break = + if pos == eoc +   true # GB3. CR X LF ``` ------------- If we support Ruby 2.4 only, we can simply replace `unpack_graphemes` with Ruby's `scan(/\X/)`  😉 (@nurse implemented grapheme extended cluster on 2.4!  ) https://bugs.ruby-lang.org/issues/12831 ```ruby def unpack_graphemes(string) string.scan(/\X/).map(&:codepoints) end ``` See https://github.com/rails/rails/pull/26743 for more information about replacing `AS::Multibyte` with Ruby's feature. ----------- I'm not unicode expert so I'm very happy if you review this PR carefully  🙏 Do we have test coverage demonstrating these grapheme cluster boundary rules?::👍::Worth noting how this affects grapheme cluster boundaries. Notably, this will change `string.mb_chars.grapheme_length` and `string.mb_chars.reverse`—perhaps fixing them to work with clusters like 👩‍👩‍👧‍👦!::It seems that http://www.unicode.org/Public/9.0.0/ucd/auxiliary/GraphemeBreakTest.txt covers all lines of `unpack_graphemes`: https://s3-ap-northeast-1.amazonaws.com/mtsmfm/rails/27822/coverage/index.html#40076a266c43e5b028d6d14e50d80fabb410f3b5 Following diff is how I got the coverage: ```diff diff --git a/Gemfile b/Gemfile index 2a42a4aea0..2aaf64360a 100644 --- a/Gemfile +++ b/Gemfile @@ -151,3 +151,5 @@ end gem ""ibm_db"" if ENV[""IBM_DB""] gem ""tzinfo-data"", platforms: [:mingw, :mswin, :x64_mingw, :jruby] gem ""wdm"", "">= 0.1.0"", platforms: [:mingw, :mswin, :x64_mingw, :mswin64] + +gem ""simplecov"" diff --git a/activesupport/cov.rb b/activesupport/cov.rb new file mode 100644 index 0000000000..f5911a16c3 --- /dev/null +++ b/activesupport/cov.rb @@ -0,0 +1,7 @@ +$LOAD_PATH << ""test"" + +require ""simplecov"" + +SimpleCov.start + +load ""test/multibyte_grapheme_break_conformance_test.rb"" ``` ``` $ cd activesupport $ bundle exec ruby cov.rb ``` ::I added some notes :smile:::❤️::",bdcfdef21444b03413213c69035f0fac8feedffb::
https://api.github.com/repos/rails/rails,27736,reduce-numeric-with-format-allocations::master,0,merged,activesupport::,"We were profiling in production, and were surprised to see `NumericWithFormat#to_s` account for 2% of global object  allocations. ``` 34   (2.0%)          34   (2.0%)     ActiveSupport::NumericWithFormat#to_s ``` Looking at the code, it turns out that even if you want to call the regular `Integer#to_s` (which is fairly common, especially if you display numbers in your views) you end up allocating both an Array (splat args) and a Hash (options). This PR prevent those allocations if you are not trying to call any advanced formatting. I know 2 objects isn't much at all, and that this version is a bit more complex to grasp, but for such a hotspot I believe it's worth it. @rafaelfranca @csfrancis @camilo These can both be `when` clauses, I think?::Good point.::It's private, but we're still ending up adding this to core classes. Maybe worth storing it elsewhere?::Any idea where it could go?::I think this clause is still wrong - we should either delete it and it'll raise the appropriate error (`TypeError` from `Integer` or `ArgumentError` from `Float`), or we should raise an `ArgumentError` with an unknown format message rather than just silently returning the default. That would be a better developer experience since it'd blow up if there was a typo in the format name.::I agree.. but IMO we should probably keep that change away from this perf one::Yep I agree as well.::👍 performance change can be backported to 5-0-stable but change to raising can't.::",b9bda7fd891147a0bc0cffa6dd9d15601be8b472::
https://api.github.com/repos/rails/rails,27710,backport-fix-pool_from_any_process::4-2-stable,0,merged,activerecord::,"I was going to backport this but I can't push to 4-2-stable because it's protected 😕 cc/ @tenderlove --- If a process is forked more than once, the pool was grabbing the oldest spec, not the most recent spec. This wasn't noticed before because most folks are lilely forking the process only once. If you're forking the process multiple times however the wrong spec name will be returned and an incorrect connection will be used for the process. This fixes the issue by reversing the list of spec names so we can grab the most recent spec rather than the oldest spec.",be68811aaa4c75a032df72b11d07b10446b4d0ac::
https://api.github.com/repos/rails/rails,27623,fix_and_speed_up_duration_parsing_for_5_0::5-0-stable,0,closed,activesupport::,"Fixes next comparison: ActiveSupport::Duration.parse('P3Y') == 3.years # It should be true Duration parsing made independent from any moment of time: Fixed length in seconds is assigned to each duration part during parsing. Methods on `Numeric` like `2.days` now use these predefined durations to avoid duplicating of duration constants through the codebase and eliminate creation of intermediate durations. Partial backport of https://github.com/rails/rails/pull/27610 except changes in month and year duration lengths. r? @pixeltrix It's slightly less clear, but reorganizing this as `1461 * 6 * 60 * 60` (absorbing a factor of 4 from 24 into the first term) will make it an integer like the others.::I'm not sure whether breaking them out into calculations gives us anything - we're all taught in primary school the number of seconds in a minute, minutes in an hour, etc.::Replaced calculations with precalculated values with comments for months and years (as they will be changed in 5.1).::",8c1ffc36541169ddfee68e8f3d250037143aeb33::672c5637ad9cef0bf2f83fdd5cdc3f1e80a5874b::
https://api.github.com/repos/rails/rails,27620,schneems/backport-27596::5-0-stable,0,merged,activerecord::,In Rails 4.2 calling `ActiveRecord::Migrator.migrate` would return an array of results. Without realizing that this return type was expected I accidentally introduced a change in https://github.com/rails/rails/commit/4d60e93174a3d6d90b1a06fc7515cb5cd749a6f3 This PR preserves the previous behavior and adds a test on the return type. This is a backport of #27596 to the 5-0-stable branch.,ccdd5836529593a66a7385383d2e822637dd05e1::31562697f7f2b8a0f7ddb66b2b25e2c28e200c42::
https://api.github.com/repos/rails/rails,27596,schneems/migrator-result::master,0,merged,activerecord::,In Rails 4.2 calling `ActiveRecord::Migrator.migrate` would return an array of results. Without realizing that this return type was expected I accidentally introduced a change in https://github.com/rails/rails/commit/4d60e93174a3d6d90b1a06fc7515cb5cd749a6f3 This PR preserves the previous behavior and adds a test on the return type. This will need a backport to 5.0 branch.,93ee268ef40b052497daf22f124fc1535acabd64::
https://api.github.com/repos/rails/rails,27577,jm-fix-27547::master,0,merged,actioncable::,"### Summary Before this commit, the database connection used in Action Cable's PostgreSQL adapter was ""owned"" by `ActiveRecord::Base.connection_pool`. This meant that if, for example, `#clear_reloadable_connections!` was called on the pool, Active Record would ""steal"" the database connection from Action Cable, and would cause all sorts of issues. This became evident during file reloads; despite Action Cable trying its hardest to return its borrowed database connection to Active Record via `@pubsub.shutdown`, Active Record calls `#clear_reloadable_connections!` on the connection pool, and due to the order of callbacks, Active Record's callback was being executed first. This meant that if you tried to rerender a view after a file was reloaded, you would have to wait through Active Record's timeout and such. Now, Action Cable takes direct ownership of the database connection it uses. It removes the connection from the pool to avoid the situation described above. Action Cable also makes sure to call `#disconnect!` on the connection when appropriate, to match the previous behavior of Active Record. Fixes #27547. r? @matthewd Perhaps we should be managing our own connection pool instead of peeling conns off of another one.::Seems late to be checking this. Would expect an error when the subscription adapter is created.::This will break with other PG-backed adapters.::Do we need this conditional if we know it's a PG adapter?::Got a name that precisely, concisely indicates what we're testing?::AR's ""connect and give up control"" public API feels like a narrower dependency than trying to steal its connection config and connect for ourselves... and forcing the user to duplicate the details just seems unnecessary.::We're relying on the `pg` gem's notify API, so that's intended.::We don't need the conditional. We do need the disconnect.::We only want to do this for the subscription connection, not broadcasts: those should still use AR's `with_connection`. .. which may be a wrinkle in the viability of this as a backportable solution. :confused:::Does this test even currently fail?::Even ignoring the difficulty of checking earlier, that would seem pretty defensive to me. Here, its purpose is more to translate the error you'd get from the block into something immediately obvious -- it's just easier to check the condition first instead of using a rescue.::Think this handles two separate concerns: verifying and satisfying the surrounding code's usage. `_and_yield!` also reads like a smell. Ruby code usually doesn't advertise its yieldyness 😊 I think moving yield out to the callers and going with this would be clearer: ```ruby def verify(conn) unless conn.is_a?… raise … end end ```::@maclover7 ?::@jeremy yep, I believe it fails on master.::should this disconnect be in a `ensure` block?::",686f6a762fec59dcda30ed24b12bd9ba9e029d64::
https://api.github.com/repos/rails/rails,27566,singular_collection_ids-fix::4-2-stable,0,merged,activerecord::,"Closely related to #14439. It looks like someone opened a PR to try and fix this(#15262) but it looks to be abandoned. This is resolved in Rails 5 but is not resolved in the 4.2. I thought I would open a PR since this isn't a feature enhancement but a bug in 4.2. Example Models: ```ruby class User < ActiveRecord::Base has_many :user_businesses has_many :businesses, through: :user_businesses end class UserBusiness < ActiveRecord::Base belongs_to :user belongs_to :business, primary_key: :uuid end class Business < ActiveRecord::Base end ``` When a different primary_key is signified on the `has_many through` relationship, using `user.business_ids = [""111-111-111""]` throws a `RecordNotFound` exception. This is due to the `ids_writers` method ignoring the `primary_key` key and using the default primary key(id) when looking for records. The `ids_writer` method essentially does this: `Business.find([""111-111-111""])` and then the ids that are passed get cast to integers. Here's a gist to help clear up any confusion: https://gist.github.com/npezza93/3a34d8b023669c70bf5f16d89ab0d111@npezza93 That's really a big change, this method raises an exception now. I know it's already merged, but I think there is a side effect here, now you cannot use `model.association_ids += [x,y]` if `x` or `y` is already in the association ids and it will raise `ActiveRecord::RecordNotFound` which is really weird imo. So I was wondering if it was intended? or a side effect? https://gist.github.com/madwork/94bcaa528fe0ea68e510b9feda549cb4::@madwork So this was essentially a backport of what is on master currently, as seen [here](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/collection_association.rb#L62). So, does it have that same behavior on master? If it doesn't, I can take a look and try to remedy that. ::Looks like this isn't happening on master and I think I might know why. I'll submit a PR once I get a fix in place. ::",ae83c5be69122717187ba32546f699fba558f84d::
https://api.github.com/repos/rails/rails,27554,sg-backport-0f1d0b1b5254e3678abaabbebb3362a100c10262::5-0-stable,0,merged,activerecord::,This is a backport of 0f1d0b1,11cad5888092be771fe66c5fa508a4aa2eed27b3::
https://api.github.com/repos/rails/rails,27553,backport-2-4-time-changes::4-2-stable,1,merged,activesupport::,"This backports the changes made to Rails 5.0 required for supporting Ruby 2.4. This was mainly around the behaviour of `to_time` but since the changes required the backporting of a later fix for a possible stack level too deep error (ee5e476) and the caching of `to_time` it was safest to include a number of small changes which possibly aren't entirely necessary, but would've meant rewriting patches to make them apply cleanly. However larger changes like duration parsing were left out since they could be safely ignored. Needed for #27473.Just want to confirm that the data type change in the response for the 4.2.x branch is intended. I have some test code in 4.2.7 that happens to call `.utc.rfc3339` on a `DateTime` object. On 4.2.8 this fails because `utc` converts to a `Time` object which does not support the `rfc3339` method. I would like to clarify if this change in return type is a backwards compatibility bug for 4.2.x or perhaps `DateTime` is considered an internal-only type that client code should not work with directly?::@matt-glover hmm, definitely a change here isn't great - it was never the intention when I originally wrote this code for it to be backported so I may have overlooked something. We're currently tweaking this code anyway because of #28147 so I'll look at it as part of that.::This commit (ee5e476aad791e41c97f2a833f41bb5899d5252b ) has more context on the reasons why - the reasons for the stack overflow error are a little fuzzy. It may be easier to add `rfc3339` to Time 😄 ::Thanks for the quick reply! The additional context helps and I appreciate that you plan to look at it as part of your other work. In my particular case it happens to be some test-only code that does the `.utc.rfc3339` call so I can easily adjust things on my side. Primarily raised it in case it's a possible issue for others.::So looking at it, I think that the stack overflow issue was with `localtime` rather than `utc` so I can change back just that method. I changed `utc` to match `localtime` because it's inconsistent for them to return different types. However `localtime` didn't exist prior to 4.2.8 on 4-2-stable so changing back seems okay.::Fixed in fccc031cb61d98b3fc401d8a323e71da222362ca::",d569f8dc5f0c6345db476ebd9f228c68c3434a29::e90143bae026ebcf8f28e4fa095bb6eb281732e9::1fc3bdab8f34e066837195bcceffd782926a8b13::3edf968a1160955395e279b4384289d2a0c1c22e::7f740eb645c4b37f1a80045ba137c47784dcf3dd::a9097a8cf54c42f9122e2ef560f42c09fa680a96::2e0e168051d098155f03eb2698fabca487fd033b::bc7c5668d7f036d572790bfebbe6a1f9a49d3452::bcda029a47b414a86d196eeae19c651ea3ca9be1::352d92aa3d1ff31162a7adeabb44498781e59028::bc1a6e69778f73f166541c3491b443e66b692662::29f211f8419e91002feefe82d827875b3a035b55::d86a57bd6726c418b70cde835880201b80433827::5c3c4eabc9b4a7713edd8c5c9669c5e46222d6a4::0f66cef180cd9a5d02d40eecc87eac638254353c::
https://api.github.com/repos/rails/rails,27417,4-2-stable::4-2-stable,0,closed,activesupport::,This PR backports PR #24616 to the 4-2-stable branch.,b620a1140d216e0c0abb965e4a9bcdc33461c14e::129b152b7f3c5914d4a5962dbc4379515e9b723b::
https://api.github.com/repos/rails/rails,27395,backport-26732::5-0-stable,0,merged,,This PR backports PR #26732 to the 5-0-stable branch.,b552b5edaffe5dae183ece4d8475a0e7005da6c7::
https://api.github.com/repos/rails/rails,27379,backport-fd87169::5-0-stable,0,merged,activerecord::,### Summary This PR is backporting of https://github.com/rails/rails/commit/fd87169eb11fc4cfd9082dabe0a85f3bfa385c29. I want this commit. Because I want to solve this problem. https://github.com/rsim/oracle-enhanced/pull/1084,f489fd739f7ae3e5ab5cd408b18f509accb10a8b::
https://api.github.com/repos/rails/rails,27333,jm-fix-25183::master,0,closed,actionpack::stale::,"### Summary - Add fallback encoder support to `ActionDispatch::IntegrationTest` - Now gems like jbuilder can set fallback encoders (in that case, a `:json` fallback encoder for `ActionController::API` controllers). - Revert changes made in d68562e ### Other Information - Should this be backported to `5-0-stable` (I think so...?) - Write patch for jbuilder that will utilize this new functionality Patch for jbuilder would look something like this: ``` diff --- a/lib/jbuilder/railtie.rb +++ b/lib/jbuilder/railtie.rb @@ -20,6 +20,10 @@ class Jbuilder if self == ActionController::API include ActionController::Helpers include ActionController::ImplicitRender + +            if ActionDispatch::IntegrationTest.respond_to?(:fallback_encoder=) +              ActionDispatch::IntegrationTest.fallback_encoder = :json +            end end end end ``` ref #25183I think this would be better off being set on the `ActionDispatch::IntegrationTest` class and then in `process` we do: ```ruby request_encoder = RequestEncoder.encoder(as || self.class.encode_requests_as) ```::",249bb50b8c964d8ded435671941273e1f04a3c33::65690d1a8588aa6c1c9f99cda2dbf1056a983ace::
https://api.github.com/repos/rails/rails,27271,permantent_digest_in_tests::master,0,merged,actionview::,"__TL/DR__ `rspec spec/integration`. Before: 35sec. After patch: 20sec. #20384 implemented template digest expiry for dev requests. It's enabled by default for test env, which is not required and degradates test performance. I'm not sure if there should be testcase for this commit. __UPD__ There is failing test on travis. But it's for actioncable, and passes locally for me.It looks like we could get rid of the `if` entirely, and change this to use `app.reloader.to_run` instead of the executor. Then it'll automatically get run as part of the reloading in development (if reloading is enabled), and be skipped in test and production (unless reloading is enabled). If it works, that feels like a better statement of our intent -- this current `consider_all_requests_local` check feels more like an indirect attempt to avoid running in production. Are you up for trying that instead? (FYI, this won't make 5.0.1 -- as we're in RC stage, the only things that will be added are fixes for regressions relative to 5.0.0. But it does seem a reasonable candidate for backporting for the future 5.0.2.)::Ok. I'll try it tomorrow.::Just to clarify. Does reloader run when templates changed, or it tracks only .rb files?::Ah, good point. I thought it did, but it looks like I was wrong. So looking at how views actually get handled... it seems `cache_template_loading` is what should be deciding whether the digest cache should persist (true), or get cleared for each execution (false).::Don't you think it's overkill? I mean, the only place where it's used is dev env. I can't think any other scenario up.::The point of the config settings is to abstract away the environment definitions. People can define their own environments, for example. Unless I'm confused, I'm just suggesting we change the `if` to use `! cache_template_loading` where it currently uses `consider_all_requests_local`, so I'm not sure where the overkill is.::It uses existing config option, but we would define one more. Not really a problem for me. What if we use clear_compiled_templates instead? The idea is to make it safe for production by default, and not to treat missing value (nil) as true. It would require to enable it explicitly in development.::Or recompile_templates.::`cache_template_loading` is an already-existing config setting::I use this instead of `cache_template_loading`, because this one is set to default value if not configured on line 35.::Is this doing what we want? I think it needs to be `unless`.::Yes, `ActionView::Resolver.caching?` is on in production by default (because of the `cache_classes` fallback above).::Nice catch! 😅 ::Fixed. Waiting for github getting up to repush.::pushed::",238035409ec0c5180b59cfbcd50cdf9a605e37cf::
https://api.github.com/repos/rails/rails,27234,backport_26972::5-0-stable,0,closed,activerecord::,Backport #26972 and #26981. Our Rails app encountered lots of slow queries due to except `:order` in production. Currently I'm using `relation.load.size` instead as a workaround to keep `:order`. I'd like to backport these fixes to latest stable branch.,6d88c2c388c84dfd0e91593225e871617c91593f::c6370551d5c28f2ff47d83721dca975bac9921bf::6ac688bbc2846aa67172dfbd56c0a8277d5d4162::fb0feb3aed1f23e821e19fa797d6e0d346635847::
https://api.github.com/repos/rails/rails,27133,reload_singular_associations::master,1,merged,activerecord::,"### Summary This patch brings back the functionality of passing true to the association proxy. The behavior was deprecated with #20888 and scheduled for removal in Rails 5.1. The deprecation mentioned that instead of `Article.category(true)` one should use `article#reload.category`. Unfortunately the alternative does not expose the same behavior as passing true to the reader did. Specifically reloading the parent record throws unsaved changes and other caches away. Passing true only affected the association. This is problematic and there is no easy workaround. I propose to bring back the old functionality by introducing this new reader method for singular associations. ### Implications We started to issue deprecation warnings for this since 5.0.0. If this is merged, I think we should backport the patch to `5-0-stable` and update the deprecation warning accordingly.",0e9957135d9057f91fe30af01d4a70e30ee8a6b3::
https://api.github.com/repos/rails/rails,27097,backport-pr-23093-from-5-1-to-4-2::4-2-stable,0,closed,,This is a backport of pull request rails/rails#23093,f7209027e5808a4d0f862cea89784a4d861f0f6e::52f68381784dd87b510fc200ef97e21b75416238::
https://api.github.com/repos/rails/rails,27093,backport-24202::5-0-stable,0,closed,,### Summary This PR is backporting of #24202. Fixes #24195,963219c956eb77c4b7606b178727d797c27a6186::
https://api.github.com/repos/rails/rails,27071,jm-backports::5-0-stable,0,merged,actionpack::docs::,"### Summary All of the following commits were marked with the `needs backport` label, and this PR backports those commits to the `5-0-stable` branch.",cfbc617a6ba82da1dd86ea4c040fb9b7a3a577e8::5620a0e6a296932a94b9b32a49de019896f8e7e1::281cd579ba8744c9abb685238caf147370e5309b::df947b4c8a6810246b3148a69cf30bb2c7f741c9::
https://api.github.com/repos/rails/rails,27063,merge_keep_inner_join::master,0,merged,activerecord::needs feedback::,"Doing `Author.joins(:posts).merge(Post.joins(:comments))` does this `SELECT ... INNER JOIN posts ON... LEFT OUTER JOIN comments ON...` instead of doing `SELECT ... INNER JOIN posts ON... INNER JOIN comments ON...`. This behavior is unexpected and makes little sense as, basically, doing `Post.joins(:comments)` means I want posts that have comments. Turning it to a LEFT JOIN means I want posts and join the comments data, if any. We can see this problem directly in the existing tests. The test_relation_merging_with_merged_joins_as_symbols only does joins from posts to comments to ratings while the ratings fixture isn't loaded, but the count is non-zero. The only thing I'm not sure about is if my fix should use make_outer_joins as it was before and as is used in walk or if it should use make_left_outer_joins which is used above in the same method.Why using `make_left_outer_joins` instead of the previous `make_outer_joins`?::This is a question I asked in the initial message of the pull request: > The only thing I'm not sure about is if my fix should use make_outer_joins as it was before and as is used in walk or if it should use make_left_outer_joins which is used above in the same method. Since I'm doing basically the same code as what is done at line 110, I used the same one as is used there. The code of those 2 methods is similar, except for one using `table_aliases_for`, which is very obcsure to me. So I leave that one last choice up to someone more experienced for those internals. Note, this has been changed on HEAD, the 2 methods were replaced by a single one, but it has a parameter to specify if aliasing is to be done or not. Once the choice is made, i'll rebase with the chosen way.::I think it is fine to keep it the same as in the line 110. Could you please rebase. I'll merge it to master. I'm not going to backport since even that it is a bug it may cause behavior change in a stable branch for some people.::@rafaelfranca The upgrade guide for whichever version this is included in probably needs to warn people about this loudly. It could lead to a lot of stuff being excluded from queries where it was previously included.::This is a good point. Usually we don't start the upgrade guide until before the release but I agree we should warn about this.::Can you add a new line here with: `TODO: Add to the Rails 5.2 upgrade guide`::",249ddd0c39e6f24145ae1150d4c8eec9f11219b1::
https://api.github.com/repos/rails/rails,27058,jm-fix-26904::master,0,merged,actionpack::activerecord::,"### Summary - [x] changelog - [x] regression test - [x] make commit description more descriptiveThis is wrong ::derp, sorry, fixing now ::Once that's fixed this is fine to squash and merge. Don't forget to backport to 5-0-stable. ::Why do we allow unpermitted params to be persisted? IMO, we should only persist params that have been permitted with strong parameters API.::Because this is fundamentally different than attribute assignment elsewhere. It's assigning a value to a single known attribute. Similarly to how we don't require users to whitelist possible values for a string when assigning to a string column. Most importantly, this is matching the behavior of 4.2::",0a8b212db76441df29a572580f1dab596d28d73d::
https://api.github.com/repos/rails/rails,27045,backport_26745::5-0-stable,0,merged,activerecord::,"```ruby # Before t.index [""firm_id"", ""type"", ""rating""], name: ""company_index"", order: {""rating""=>:desc}, using: :btree # After t.index [""firm_id"", ""type"", ""rating""], name: ""company_index"", order: { rating: :desc }, using: :btree ``` Backport #26155, #26745, and #26785.https://github.com/rails/rails/pull/26785#issuecomment-254106539 > Originally `(index.lengths || []).compact` have a bug. > https://github.com/rails/rails/blob/5-0-stable/activerecord/lib/active_record/schema_dumper.rb#L216 > If #26785 will backport, it is better to backport #26745 as well. If adding `t.index [:firm_id, :type], name: ""company_partial_index"", length: { type: 10 }`, it will be dumped as `t.index [""firm_id"", ""type""], name: ""company_partial_index"", length: {""firm_id""=>10, ""type""=>nil}`. ::",2620a23929752f53744364d604cb43c1627be00d::4ce674f6449c870707ebdc0f7995e4147a1348af::3ee4bf63eb47223f9146bac2b38319f3e31021c3::
https://api.github.com/repos/rails/rails,27042,yaml-schema-cache::master,0,merged,activerecord::,"**WTF is schema cache:** Rails has support for storing the schema information in `db/schema_cache.dump` to avoid hitting database with `SHOW FULL FIELDS`. This feature was introduced in https://github.com/rails/rails/pull/5162. The problem now is that we dump all many things into Marshal, including **internal column classes**. When you try to read schema cache generated by Rails 4.2 in Rails 5.0: ``` uninitialized constant ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::Column (NameError) ``` (because obviously, internal AR classes have been refactored). ## Solution proposal By serializing basic schema information into YAML instead of Marshal dump, we could make schema cache compatible between Rails versions and avoid exceptions like a described above. ## Concerns 1. I had to make `connection.column_definitions` method public 2. Instead of messing with `SchemaCache` classes and its dynamic cache methods, I introduced `PersistedSchemaCache` that would be immutable. review @rafaelfranca @sgrif I think you don't need those aliases here. ::This is not being called so why do we need this? ::Because it's a public method that someone may call, and since this class is immutable, we'd like to avoid that call. ::Don't think we need this line anymore ::Think this is just `cache.version` again ::`schema_cache.dump` -> `schema_cache.yml` ::`schema_cache.dump` -> `schema_cache.yml` ::The name of this file should be `'test/assets/schema_dump_5_1.yml'`. I don't think it is going to be safe to backport this.::",4c00c6ed230e6fdc6199dfba43f6da1e741a02aa::
https://api.github.com/repos/rails/rails,27038,backport-25758::4-2-stable,0,merged,,"### Summary This PR is backporting of https://github.com/rails/rails/pull/25758. It also happens in ruby `2.4.0preview3` and rails `4-2-stable`, so I'd like to incorporate this fix. cf. https://github.com/rails/rails/pull/26998",be56c439856b6fea21aaabc6144e5ab9ad77ec76::
https://api.github.com/repos/rails/rails,26978,query-cache-pool::master,0,merged,activerecord::,"Fixes #25573 cc @sgrif On reflection, I believe this makes #26909 backportable (which isn't too surprising: it almost reverses that PR's changes to the querycache middleware).",a6d14df40f81ae766081e6a5d4e5fa428eca3174::3c785bdceed4bdf67708197aa687ced6728d77f3::
https://api.github.com/repos/rails/rails,26967,bad_threading_test::master,0,merged,activerecord::,"Under JRuby, the updates of the one shared variable interleaved, causing threads to pick up each others' connections. I'm amazed this worked on MRI. This needs to be backported to 5-0-stable.",2646c1021adb181b96395afc92b143e115ff113f::
https://api.github.com/repos/rails/rails,26854,explicit_order_callback_args::master,0,merged,JRuby::activesupport::,"### Summary In https://bugs.ruby-lang.org/issues/12860 I argue that MRI's execution order here is incorrect. The splatting of the 'c' args should happen before the shift, but it happens after. On JRuby, it behaves the way you would expect, leading to the 'c' args splat still containing the block and producing an error like ""cannot convert proc to symbol"" when the send attempts to coerce it. This patch makes the unpacking order explicit with a multi-assign, which behaves properly on all implementations I tested. ### Additional Information This code appears to have been introduced after the most recent Rails release so I don't _think_ it needs to be backported. I started running into the ""proc to symbol"" errors only after switching to master for JRuby testing.",5f382d41c30b1e433d777a8daaedb247d7f2a57c::
https://api.github.com/repos/rails/rails,26672,support_ruby_keywords_as_template_locals::master,0,merged,actionview::,"### Summary This is a change to ActionView::Template. It lets you pass ruby keywords to render: ``` <%= render 'my_partial', class: ""cool"" %> ``` It prevents confusing syntax errors. Normally you'd see a misleading error on the template's line 1, where there is no error: ``` SyntaxError (.../_my_partial.html.erb:1: syntax error, unexpected '=' ``` Instead it will render successfully. If you use a keyword in your template, you get a syntax error on the line where you use it ⛑. The keywords are still available in `local_assigns`, which is useful if your template takes in variables to use as html attributes, like `class`. ### Other Information I've also made this change available as a gem: https://rubygems.org/gems/actionview_template_safe_locals Why downcase? ::I think we already have a list like this.. AS delegate, maybe? Is there a practical way we can re-use it? Possible it makes more sense to keep a separate copy here, but let's at least explore our options. ::@matthewd thanks! there was a list in AS delegate, 683c907 addresses this ::@matthewd this will handle `<%= render 'template', locals: { CLASS: ""food"", Alias: ""bar"" }` which cause the same misleading syntax error. I'd be OK changing this to not handle those edge cases though, please let me know. ::I'm just unclear why those would give the same error. If the error they're giving is a more general ""you can't set a constant here"", then it seems we'd want to handle that separately -- `Foo` would be just as problematic as `Alias`. Do we want to check for something like `/\A(?!=[A-Z0-9])\w+\z/`? (There's probably a better definition of a valid local identifier than that, somewhere.) ::iirc Array `-` already compares by hash for speed. The set conversion shouldn't be necessary. ::We need to require the match? core ext file that backports it all the way to Ruby 2.2. ::Or use `grep` ::Did you find a reference to guide the regexp? I was trying for something that might do the right thing on unicode characters. ::Did not find a reference for regexp. This regex is incorrect, was looking for something that would handle unicode but haven't found anything useful yet (e.g. something that matches a single emoji as a valid identifier.) Open to suggestions! ::@kaspth with `-` I get an error: ""no implicit conversion of Set into Array"" `DELEGATION_RESERVED_METHOD_NAMES` is a set. Am I able to subtract a set from an array without converting it? ::Here we go: https://github.com/ruby/ruby/blob/46bbb62bed20e93b651a9f19c87634d2732f05a5/parse.y#L5184 `/\A(?![A-Z0-9])(?:[[:alnum:]_]|[^\0-\177])+\z/` ::excellent, thank you: e1c1274 ::Let's add a comment noting why we're doing this: ``` # Only locals with valid variable names get set directly. Others will still be # available in local_assigns. ``` ::Can we load just the delegation file? The two lines above show a precedent of being as narrow as practical. ::",f9960f2d74b510e0d994d49377cec36301f7e7f0::
https://api.github.com/repos/rails/rails,26604,arthurnn/backport-26441::5-0-stable,1,merged,,[backport fix for #26441] original commit: https://github.com/rails/rails/commit/f62451a50b2c9119adce7acc53ce3dfffc4d41d5,352afa7c3ae0083ea3d232524ea3d680b6bffd25::
https://api.github.com/repos/rails/rails,26349,logger_kwargs::master,0,closed,,"### Summary Backports feature introduced in https://github.com/ruby/ruby/commit/a0409533866991529136224b549f53f2ab61c8e4 so we can start using it now. Assuming from https://github.com/rails/rails/commit/575dbeeefcaafeb566afc07cdd8b55603b698d9f that backporting Ruby 2.4 features is acceptable. ### Other Information Copied from the CHANGELOG Before: ``` ruby logger = Logger.new(STDOUT) logger.level = Logger::WARN logger.formatter = MyFormatter.new ``` After: ``` ruby logger = Logger.new(STDOUT, level: Logger::WARN, formatter: MyFormatter.new) ```",21b2a79287388176650fdf6fb15c0c18001d0d01::
https://api.github.com/repos/rails/rails,26334,remove-json-dependency::4-2-stable,0,merged,,### Summary This is backport request from Rails 5. I cherry-picked f3433f7c757ef8352c3ea3796a9b350b4454a2b6 Because json-1.x didn't support Ruby 2.4.0. So ActiveSupport 4.x will not works Ruby 2.4.0 when it release at 2016/12. ### Other Information I faced a lot of gems that depends on activesupport 4.2. ex https://github.com/jekyll/jemoji/pull/49 I hope to work these gems with Ruby 2.4.0. Does Ruby 1.9.3's built-in json satisfy this requirement? ::,89a532dfaf5910891ea3acd77d36fbaa4cb8fd0b::
https://api.github.com/repos/rails/rails,26322,jm-26317-backport::5-0-stable,0,merged,actionpack::,### Summary This PR backports PR #26317 to the `5-0-stable` branch. r? @tenderlove,e4ee3ce01e7c4625f4c8634451b34018fc156a27::
https://api.github.com/repos/rails/rails,26271,fix-unnecessary-query-cache-busting-test::master,0,merged,activerecord::,### Summary This is fixed in 5.0 as an ancillary part of 574f255629a45cd67babcfb9bb8e163e091a53b8 but here I also add a test for the condition. I'd previously backported the fix (and added a test) in the below commit which was merged in #26261; this brings the fix back up to master. (cherry picked from commit fce3dbf30241f2a65c777e192a7171b0eea81453),3df5173d006f190548d38da3445a0dc3af3858ef::
https://api.github.com/repos/rails/rails,26196,doc-fixes::5-0-stable,0,merged,activerecord::docs::,- Followup of https://github.com/rails/rails/pull/23179. I had made this commit directly on docrails but it needs backport to 5-0-stable.,c451629b8a8d182d44109f9eb4cda87fc7be4f81::
https://api.github.com/repos/rails/rails,25951,sg-backport-20317::4-2-stable,0,closed,activerecord::,"The patch does not apply at all cleanly, so this is a manual backport of the most relevant bits",57ca6734cf3730eae4f5b5e285e3c3f3e46f6ef3::3c311ee753feec7d9e6c51d409862c9ef5d723f7::335a1dfcbab2c5f3d2d4d5aabe643a56c6622f81::
https://api.github.com/repos/rails/rails,25907,lock-web-console-for-5.0::master,0,merged,railties::,"I dropped the version constraint in web-console with the idea it will be easier to upgrade the console between Rails releases. However, issues like #25899 started popping up. I'm reintroducing the constraint, but this time, I don't set an upper limit to the major version. This will keep the web-console in a version that always works for the current Rails and can be easily upgraded to the last one with `bundle update`. We may need to backport this for Rails 5.0.1. Fixes #25899.",e072db77378cad43e720482d0d31297ebb7602c6::
https://api.github.com/repos/rails/rails,25803,fix-dbconsole-search::4-2-stable,0,merged,railties::,### Summary This PR backports https://github.com/rails/rails/pull/18049 in order to fix https://github.com/rails/rails/issues/25801,0f77e0c654add0b343ba4db7388ab6a58b9dbdda::
https://api.github.com/repos/rails/rails,25696,link-to-the-right-documentation::master,0,merged,,"The options used in this file are _not_ directly described in the [Rails 5.0 release notes](http://edgeguides.rubyonrails.org/5_0_release_notes.html), but instead in section 2 of the [Guide for Upgrading Ruby on Rails](http://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html) document. cc/ @prathamesh-sonpatki @kaspth Should I open a PR for backporting to 5-0-0-stable?",ab18b380a5c2942f7651457c4cff008b84e83aa6::
https://api.github.com/repos/rails/rails,25569,return_false_only_when_it_has_primary_keys::master,0,closed,activerecord::,"### Summary This pull request addresses #25388 ### Steps to reproduce ``` ruby $ cd activerecord $ ARCONN=oracle bundle exec ruby -W -w -I""lib:test"" test/cases/associations/has_and_belongs_to_many_associations_test.rb -n test_has_and_belongs_to_many_in_a_namespaced_model_pointing_to_a_namespaced_model ``` ### Current behavior without this pull request ``` ruby ActiveRecord::StatementInvalid: OCIError: ORA-01400: cannot insert NULL into (""ARUNIT"".""ARTICLES_MAGAZINES"".""ID""): INSERT INTO ""ARTICLES_MAGAZINES"" (""ARTICLE_ID"", ""MAGAZINE_ID"") VALUES (:a1, :a2) ``` ### Other Information Oracle enhanced adapter does not support `auto_increment` or `AUTOINCREMENT` features yet, then it needs to insert primary key column ""ID"" explicitly. To get the primary key column, [`attributes_for_create`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_methods.rb#L444-L448) uses [`pk_attribute?`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_methods.rb#L454-L456). In master branch with https://github.com/rails/rails/commit/2df891dc commit, [`self.class.primary_key`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/builder/has_and_belongs_to_many.rb#L79-L81) always returns false for habtm to avoid `WARNING: Rails does not support composite primary key.` by https://github.com/rails/rails/pull/23345 In `4-2-stable` branch [`primary_key`](https://github.com/rails/rails/blob/4-2-stable/activerecord/lib/active_record/attribute_methods/primary_key.rb#L72-L74) returns the actual primary key column, ""id"" here. then it can create a sql statement which set ""id"" column explicitly as follows: - SQL statement generated with this pull request ``` sql INSERT INTO ""ARTICLES_MAGAZINES"" (""ARTICLE_ID"", ""MAGAZINE_ID"", ""ID"") VALUES (:a1, :a2, :a3)  [[""article_id"", 10000], [""magazine_id"", 10000], [""id"", 10000]] ``` This pull request has been tested also for all bundled adapters, sqlite3, postgresql, and mysql2. Once it get merged, I wanted it would be backported into `5-0-stable` branch.",abde25471bccabcb5544c4dd1070899872ddd092::
https://api.github.com/repos/rails/rails,25565,fix_serialize_for_date_type::4-2-stable,0,merged,activerecord::,"This PR is backport #25364 to 4-2-stable. Currently `Type::Date#serialize` does not cast a value to a date object. It should be cast to a date object for finding by date column correctly working. Fixes #25354. r? @rafaelfranca Actually this assert is unexpected behavior, I think. Previously type casting against `Type::Date` was not worked. ::Oh, now I understand it. So those tests still make sense because the column information is still being used differently from 5.0, but this assertion needs to be changed or removed ::Changed this assertion to expected behavior! ::@kamipo I'm not sure this is sufficient to fix the underlying problem.  I tried this same solution last night (as module included onto `ActiveRecord::Type::Date` to monkey patch it), and I am seeing this method called in some cases, such as when persisting records; however, when calling `where` on the model, it is still coercing to a UTC date time string.  Here is an example (rspec) test: ``` ruby describe 'querying dates with times works around day boundaries' do let(:model_class) do model_class = Class.new(ActiveRecord::Base) model_class.table_name = 'date_serialization_test' model_class end let!(:old_record)       { model_class.create!(a_date_field: Date.new(2016, 6, 8)) } let!(:boundary_record)  { model_class.create!(a_date_field: Date.new(2016, 6, 9)) } let!(:newer_record)     { model_class.create!(a_date_field: Date.new(2016, 6, 10)) } before(:context) do ActiveRecord::Migration.new.create_table(:date_serialization_test) do |t| t.date :a_date_field end end after(:context) do ActiveRecord::Migration.new.drop_table(:date_serialization_test) end it 'coerces TimeWithZone to Date in current locale' do date = Time.new(2016, 6, 9, 23, 0, 0, '-05:00').in_time_zone byebug query = model_class.where('a_date_field >= ?', date) expect(query).to include boundary_record, newer_record expect(query).not_to include old_record end it 'coerces Time to Date in current locale' do date = Time.new(2016, 6, 9, 23, 0, 0, '-05:00') query = model_class.where('a_date_field >= ?', date) expect(query).to include boundary_record, newer_record expect(query).not_to include old_record end it 'coerces DateTime to Date in current locale' do date = DateTime.new(2016, 6, 9, 23, 0, 0, '-5') query = model_class.where('a_date_field >= ?', date) binding.pry expect(query).to include boundary_record, newer_record expect(query).not_to include old_record end it 'queries still work correctly using a Date object' do date = Date.new(2016, 6, 9) query = model_class.where('a_date_field >= ?', date) expect(query).to include boundary_record, newer_record expect(query).not_to include old_record end end ``` I suspect that because the `where` clause uses an SQL string, it may not be able to determine the column type?  I am finding that my issue may not be quite the same as the case this and the relate rails 5 PR solves. ::> I suspect that because the `where` clause uses an SQL string, it may not be able to determine the column type? Right, AR cannot determine the column type if using `where` with an SQL string for now. ::Yes, after further investigation I determined we need to just type cast the values ourselves. Thanks @kamipo ::",226e1a3cefeaf8ea3a27475668d430cd4ce30354::
https://api.github.com/repos/rails/rails,25564,serializable_hash_fix::master,0,merged,activerecord::,"### Summary This pull request fixes a bug that causes `ActiveRecord::Serialization#serializable_hash` to raise a RuntimeError when it receives a frozen hash as its argument. Instead of cloning the argument to prevent mutation of the input parameter, this patch dup's it. This will clear the frozen state and allow for modifications of the local duplicate. ### Other Information This patch reworks an existing test to verify the new behavior. I figured it was easier to kill two birds with one stone here and the new version of the test should be less brittle. No need spaces inside `*`. ![image](https://cloud.githubusercontent.com/assets/12642/16440077/5cf79718-3df9-11e6-9b04-2b663c68b858.png) ::@kamipo Sorry for the typo in the changelog. I cleaned that up, rebased, and pushed the corrected changes. ::Can we just remove this line and change the above line to `def serializable_hash(**options)`? ::@sgrif That would be more elegant. It would be nice to backport to 4.2 though, in which case we can't use named arguments (because of the minimum ruby version requirement), right? ::I just realized that if you change the signature to `def serializable_hash(**options)`, and that is called _without_ splatting a hash being passed in, it will modify the hash. So that is probably not a viable option. ::That sounds like a bug in Ruby::",a5faf6fb7279ebd1fab92d51bcc705469b7b98d9::
https://api.github.com/repos/rails/rails,25560,introduce-form_with-25197::master,0,closed,actionview::,"### Introducing form_with Introduce form_with in place of form_for and form_tag. This is a prototype and the purpose of this PR is to gather feedback. We can spare the `is_a?` check and handle the array-ness more cleanly with: ``` ruby def option_tags_for_select(choices, blank: false) built_options = choices.map do |(title, value)| tag.option title, value: value || title end.join(""\n"") if blank tag.option("""", value: """").html_safe + built_options else built_options.html_safe end end ``` Tested in the console with: ``` ruby irb(main):011:0> [ [ :horse, :cheese ] ].map { |(choice, value)| puts choice; puts value || choice } horse cheese => [nil] irb(main):012:0> [ [ :horse ] ].map { |(choice, value)| puts choice; puts value || choice } horse horse => [nil] irb(main):013:0> [ [ :horse, :cheese, :grill ] ].map { |(choice, value)| puts choice; puts value || choice } horse cheese => [nil] ``` ::We should just kill this method entirely and just have `select`. ::Don't think saving two lines here is worth it (plus I dislike the nil, since that's the default return value for a method) : ``` ruby if model && model.class.respond_to?(:human_attribute_name) model.class.human_attribute_name(method) end ``` ::Is this to support changing the scope on just one field, e.g. `form.text_field :title, scope: :comment`? Personally I'd sway more to tackle on some extra lines, like we do in routes.rb, than try to cram everything in to one line. That's how we end up with tons of options again. I'd go with `fields(:permission) do |fields|` to change the scope. What do you think, @dhh? ::How about? 😁 ``` ruby def input_name(attribute, index: nil, multiple: nil, **options) attribute = attribute.to_s.chomp(""?"") indexing   = ""[#{index}]"" if index multipling = ""[]"" if multiple if @scope ""#{@scope}#{indexing}[#{attribute}]#{multipling}"" else ""#{attribute}#{indexing}#{multipling}"" end end ``` ::This doesn't seem to be used? Besides I think `dom_id(model)` is what's to be used for this. ::How about this? 😁 ``` ruby def #{selector}(method, *args, **options) tag.input options_for_field('#{selector.split(""_"").first}', method, args, options) end def field_options(field_type, attribute, value = nil, *args, placeholder: nil, **options) options = default_options(attribute, options) if value options[:value] ||= value elsif @model && field_type.match?('password') options[:value] ||= @model.public_send(attribute) end options[:placeholder] = placeholder(placeholder, attribute) options[:size] ||= options[:max_length] options[:type] ||= field_type options end ``` This pulls up the selector splitting, because we only need to do that once when we build the method. Avoids `merge` calls because that allocates extra hashes and just assigning the key is clearer. ::Can we pull this string outside the `class_eval`? I think we could save a needless string allocation that happens on each call to one of these helpers. ::`method` confuses me because I keep thinking of the `_method` input field as well as the HTTP methods. To me it makes much more sense to say `attribute` since that what we're working on. ::Yes this to support changing the scope as in your example. In defence of `scope` often times you do have fields like non related to the model, that would be useful to put into another scope, i.e. checkbox with terms and conditions. But I don't insist :) ::I don't like that scope here just obliterates the existing scope passed in to the form — shouldn't it add to the existing scope? I mean, if you want the field in a completely different scope then I think we should encourage the use of `tag`. E.g.: ``` ruby form_with model: @post do |form| # Other fields... tag.input type: 'check_box', name: 'terms[conditions]', checked: false end ``` Although that's a bit wordy, we could look into replacing `check_box_tag` and friends with `tag.check_box` and such. ::Let's see if we can't reuse all the tag helpers instead of copying the code over. ::On the other hand, it's also nice to be free from the old code to explore new ways of doing things. I don't think having everything in this file will read well. ::I would avoid using tag helpers for couple of reasons: - They are not HTML5 compliant - They have tons of deprecated logic e.g. retrieving object by name - It seems to me they might be deprecated at some point as they main purpose seems to be implementation of form_for - there is relatively little code to copy ::Great 👍, I just reached the same conclusion looking more into the code. But let's not just copy code then, let's question the embedded assumptions. ::Each case is covered with test corresponding test. However I am not sure if we need all the different cases. I think it would be easier and more efficient if you start code review from tests, so that we discuss interface and different variants & cases -> then I implement conclusions -> and the we go back to implementation details do the review and implement changes. There is still plenty open questions regarding usage that focusing on implementation might be to early. What do you think? :) ::Or one can do that: ``` form_with model: @post do |form| # Other fields... form.checkbox name: 'terms[conditions]', checked: false end ``` And one can use fields to add to existing scope as a one liner: fields(:permission) { |f| f.checkbox :admin } You convinced me. It was in original idea by DHH thou. Shell I remove `scope` related code completely? ::This is nice, but doesn't cover pass `value: nil` to force no `value` attribute, e.g. `f.text_field(""title"", value: nil)`. In similar way it doesn't support forcing size not to be shown by forcing nil, i.e. `f.text_field(""title"", maxlength: 35, size: nil)` One question is: do we want to support old logic that copy `maxlength` to `size` -> might be a bit misleading. Check tests: `test_text_field_with_nil_value`, `test_text_field_assuming_size`, `test_text_field_removing_size` for more details. How about: ``` def field_options(field_type, attribute, value = nil, *args, placeholder: nil, **options) options = default_options(attribute, options) if options.include?(:value) elsif value options[:value] = value elsif @model && !field_type.match('password') options[:value] ||= @model.public_send(attribute) end options[:placeholder] = placeholder(placeholder, attribute) options[:size] = options[:maxlength] unless options.key?(:size) options[:type] ||= field_type options end ``` Not sure what to do with empty if statement - seems ugly. Any hints? Also: max_length -> maxlength ::Not sure what you mean. Do you meant this string: `'#{selector}'`? It will evaluate during class loading. The generated method will look like this (after including feeback from the other comment; tested in console): ``` def text_field(attribute, *args, **options) tag.input field_options('text', attribute, *args, options) end ``` ::> I think it would be easier and more efficient if you start code review from tests, so that we discuss interface and different variants & cases -> then I implement conclusions -> and the we go back to implementation details do the review and implement changes. As you've probably noticed I'm more of a nuts and bolts guy, preferring to go from the bottom up and to learn decisions that way. But you're right, let's go the other way — or we might end up with this taking a lot longer. Thanks for the reminder ❤️ ::Good points 👍 We can use `fetch` to circumvent the empty if: ``` ruby options.fetch(:value) do if value options[:value] = value elsif @model && !field_type.match?('password') # We want to use our Ruby 2.4 backported match? method options[:value] = @model.public_send(attribute) end end ``` Yeah, let's find a way to kill either `maxlength` or `size` (also personally don't like `maxlength` as one word). ::> form.checkbox Oh, we have wrappers that will generate the correct `input` from that? It ought to be `check_box` though 😉 > And one can use fields to add to existing scope as a one liner: > fields(:permission) { |f| f.checkbox :admin } Yes, that too! I only see `:scope` in the `form_with` calls in @dhh's examples and not in individual `*_field` calls. ::I thought we could pull the string outside `class_eval` such that we could reference that instance from within the method body and spare a new instance each time the method is called. But this isn't really an allocation hot spot, so it's fine 👍 ::",227731efd92f3f91677efb7038afb966bf7787c3::6e821ea9b30f2aae20d2621a7fcf6b9baaf97cfa::8e6c14011cb56ceb2ac3d8faa4920bafb9c8dc82::56cb4060014f8f449be014b0b22ce3d61e3d3a12::6d2543716175bbab1bcf3bd598d5e0b7a836233f::fb22319b5478059fbe8a3300cba7418eeee0e89b::2b65432003b3faac38652378226a7aded00eb793::53787f1700af7668fc3eac6463c4c0d27f112c0e::0efeb03b70ac7892c1def2632d4d003c39e96a4a::4faa7c5e1c90e3f561d3601b2cbe36e06845d5cf::a51423c6e4b36da399041b59091a01d0121bc5c9::e9af391f041a2d977623a0c5849b3f8c4a022a8a::cffd118f7f21ab5dacf09bbca616374be468c91a::cdb7e8fa86e027786a8f67e3260f305e6224d2b9::5cbb0a226042b98512c14e8e30fbdc92e58091fc::45ec43155f3765e4fdfb2bafafafd273371b04af::e5ed831de7c67032fcd4b23ae2a303bb803a31fd::e2955e7183e73a06a1e29f3a9ca9a98e9b2249c1::5625ce875eadffbea220b7b49cfcbabd4b96bde3::ab024606e9fed776dea59b3e31b818d76034643a::01263447846c9370cfba686cfee5dc99260ba6e2::395361f370d638d2a20494367006a31cebd24a24::e0d38fe34a6377f77c924e4578a9ed026de0efd8::cfdf7c5009c20b6c676334b37f6511e10bc03dbd::b3bd09b1d99361364db80785cb91951e5baecdad::8065b4a1420a2b89c964e626fb22b55b0b7e17e6::b3da0e6b030fb2eeabc6106161889c3b45efa06e::d425555b41afd59966e7993672c2e848fb4455a5::85f6cd243ed04c6fdf6866014b681fd2b8795291::34b084bac50429ae9e0cab31fd65525ae9b2c929::7c89d0df0ca7ab9dc13c30b4c329a07b5f6baf78::fcf130b535099c89476c4c6b1de3852dd5d0a011::9d8271ceedb7c2166b04f0a1e354388f96f92e6c::738f8ef2dd89bca54cf6750ef0e8c4704a33c6a2::6abac80cfe6a2cafe073e82a22069ac3246074bc::36ba51ef4c7b2ca396ce6c916ef69ab6813ff2b0::42ee2705785a79e807e0c4eb5b815ca9816e9d84::67a00d60bb8fe5a3e8becbf7cff9ce8d1d6cabe0::975ed87f924dd69a8623c6993238c2af6fa82938::3fb6df6683b4ca27a4e412cba2297842005b0a2b::0101f838f04470aa70528ad065dc005ac2e56bad::439b3f20f71fd7802efe409d2707c17bd82dc1ad::a26e71d87f1ea3bf750c16b77c16c28dada54131::e88d0cb94c11cd38149726b5047b9e180b901950::513ab999b3afd0e3a1f703fdfce03deda9e8edaa::7744d3a2ffe55cea8b1fd397408b31dad89e997d::7b57b68829b519f9d76d746a71ed8c5304224f33::6bf37abecce4faaf873ba83f48fe998c4f594adb::ceca7e40f7bedf429c6e98e0cebe29e5f17db71e::
https://api.github.com/repos/rails/rails,25511,jm-5-0-0-bp-1::5-0-0,0,merged,,This brings us up to date with backports to 5-0-0. r? @rafaelfranca,b55cc2428d9f88787fb7767fdfe468e968a0eb48::
https://api.github.com/repos/rails/rails,25510,jm-5-0-0-bp-1::master,0,closed,,This brings us up to date with backports to 5-0-stable. r? @rafaelfranca,3eb70d0e7c53ab9875835246c72a25cfb540fa40::6458610d0b95049bbc847cbc1039d6f5be8cc30c::473473d7f73a43b8d1e4e604327998c5250dff3c::067b290e2e9fca966ee7de963dd3e758dd968b02::026e73d70e57f11bbaf6f627d0f37acd0d88035b::4d7aba7edcd66836485e61da8b2b2c191ec2122c::617fc389d46ee2ff787c54117a2d4b91d1601012::0b15476880a54aa546891af916d3c27c91ed41e5::60cffd87129d587b2ce73a28107a3afca2a513cf::1672ec88c6ad10e7d2d8756129d7f581ef741cb2::0037ee72a58cbb5201818a8962e63eb83b8fc773::6b543166f7b0fd5712ffe831dad31d34f6de5dcd::a44497f6c9ef80830c44f6b495eca504e32c3bb5::044e35f873794f2e08696562f9bc901998c949da::31699017a56e6d83c060a7eb6d75f73cdabbcfd8::dd7d5b7c800b4f6d32747913fc7c8d00ce94f03a::0693ce5bec97796aa4267cbcbe716e308f61ab31::5cd436b28dae23f9027c5f82ce61795e178ace12::64018337e5b4496e34202a706d1d119a54837095::073137f4894f0d5be675a762a351b50328c0bf15::62053ea58c903879e172e3269d3d9efd709597b0::90c5e3de92622115d62b12eb287b8b3a489658da::f5710c56691f8f1b24658fbc531aaea5200a2cdf::0f7eb5f8e04ec41010fea9967333477899261b19::3f68565029fa20bdd7c60923e08ee74b20d3d111::3d01d00e348f66f0ec8a4314363cfce39fbde2c5::1cd28ff7cf8dff254e189a08f1c20faec0650f0c::2ee918e977f5b48bd2acf6fd2c6789f207392399::076f937dd7e8467076af094677286dde6e24415b::63f697666e53d2b408582ee1055d13502d0fb55f::57b2d7be1f0faeac592b57c32201adca0bed4fa1::95d3b33c9136bf5ffaf35e8694dee66af9cef85f::0d0b9f7332c6be3b6329062ec8201b8eeaed2075::a1443bc9dc4919b42ab3cc0fad9545f9da8fbaea::2a81f60a0a02959cf77de2315e84b39f4aaf5045::3e45dd988cad539fe2cbc79b505fde99a44472e8::ebe2dd9396e96ba6a397482586c3528a46290ae8::e11767ab23e054117f018851f973f0ab16a202f7::f14b663038abafed1f3b29d8454f9d3fcceef640::cb03f84967e3754337df37b55df65928eb90220c::41f47090a7cd95b3168081a1ee16aaae582f2ad3::c06651c2424e6804fbccb21a771fb483d1a94ebb::f79dec52630937334c4ab3f26990f476a478d203::dc03f944fb803745c9df26a6a534cf66e8abce52::1fb337680e40ca9ad1bd4ca3c8621b523fc810f5::9df4f3be1231f2768d066d213eef6adc73728bd0::441bffb92c2e4bbbab932d0fe96ec456b8da1fcc::66ebaad6e49bf940b6f93857783d343d1e53d23e::2db5a829df44a0ef03b7624e700738fb7c8a9492::61b074f40164f2c2d7db4f693ea599134568e9cd::5687ee057127aa022b3ca929d8b7a17f19393114::853b79220fca69d1a6c361b6317fc04ea96441e1::a690207700d92a1e24712c95114a2931d6197985::3a93c891cf0232ec12263d6de308ac8a0c8d7231::7122274d112f9a6826b3f7bd02b9f7bc6a42c6a0::6f81d5caaf5d2bad8f94712e519db2078c504cad::6a06392817b4b040fcc932d8fe8a62bd006ca025::ebb987237bc103ecf2133d57500433f3e083e4ff::00e0507982b0d7f9354f2b503a94b6ac63181361::acc8683bfea97cc60ef3e6e202b2492be5d531b5::ff4092894ee920e44a615179c20daf3cf318d604::0d94a713deb7278a8dadb268b889a24756f63423::45980d86e435887ef80a70c6c20a4b4fffc3a453::47a619177d8614c87537b77e79f95755641091eb::d4902bba1e90b78a8e9cbcec0b253e550c98c459::5387527dfbd62fb6039ef2f3f53f47c20b05d51d::8d1439a81a6d95eb3c8527f5145a4bf56498a30d::6326811a5ff296eaf63c597bbbfbe9f59bd77d5e::3efb4a87185d0ef99c181cd4cb5dba5bd315843c::3f57a91a64c8c0f02c903d3710f677dd5b16aaf3::9b02e14a00c7222fe19b7a9d11a9bbcd4d6cddb8::8b77387379aa2d40fb0c8db847e28567e392f3f0::25fc1f584def4c1bc36be805833194d8aee55b3a::850d15d5ea30414717ee660dc8e9bae8c1dffb40::f5b95abde1447b8af2e541ea37fd3adbcdf670f2::a2f9e8af25947072cd10bb5b84086be05872de3d::9c13b41997cd7d4f1cf2676455163424d6af8651::8c9204d7798a10b0b8fe8d92906eb64ab4c7999d::241fdaefc9fee3bfab384e2dbf5c295ce73d9149::2a71f0213cda482ed0951c751d0d54b092f25be0::a8e2fb5b275d75c7a12cabf2028f9ecb2a7d9c04::91f7779eda7789558e292f57ebdb51ab4c4cebd6::943319d076665257682cfa37f0e6159a0722bef8::bf60c040e812a8693158da711694a40ed5eeb900::f361b4778907dbf4f301587d9d67d212264c868a::1e272edc86b5a820b4d59e9d675a1a5d8245d133::1091d746c9fac4b056ad7597bdd37a07e6283bfd::9ef7cbe03ec22ab1000a907dfad0c53a23812339::c25334c1f06b83ffe6b6a98fb7935168a94fbc81::64025ec6a5d09c687d7eb28bef4756c9047bb867::50e0a6b209d1afe6c2bc3047208e14f13ac3b382::682fb9ef56281834ca133007d393a7f54e09c522::e57b9e56e99b1beaabf77a447ce7221bb8c9eaa9::b55cc2428d9f88787fb7767fdfe468e968a0eb48::
https://api.github.com/repos/rails/rails,25509,jm-5-0-stable-bp-1::5-0-stable,0,merged,,This brings us up to date with backports to `5-0-stable`. r? @rafaelfranca,9f574465b8fe78ae289e2a86231b7a6d49004b3f::
https://api.github.com/repos/rails/rails,25508,schneems/backport-evented-file-boot-at-check-time::5-0-stable,0,closed,,"Backport of https://github.com/rails/rails/pull/25302 Even though https://github.com/rails/rails/pull/25302 had a 5-0 milestone, it was never backported to the branch :( Having master not be the current pre-release target is error prone.",9472b97eee93aeefae1961871837deb1dc79177e::e7c5174b1ea49139c0dae2331a091770c2c25e19::42bcb0323d61012265d8b688980c91d239c90f5e::846f71bc572795e2664f9a4df3a8474bc27d8c62::4e6b76195244d9d91c7cbdf27ce9807eaef60a02::
https://api.github.com/repos/rails/rails,25479,4-2-stable::4-2-stable,0,merged,activesupport::docs::,@rafaelfranca Updates the changelog to reflect 4.2 backports from #25397 and #25356.,e8cd808ae97fc0a0c09b44d80bc2b195cdc44888::
https://api.github.com/repos/rails/rails,25464,fix-http-request::master,0,merged,docs::,I should have fixed it in earlier PR but just found it while going through guide again.. r? @kaspth This needs to be backported to 5-0-stable too.,59f56c3a6915e9c7bf38640f16c33aead467a2bf::
https://api.github.com/repos/rails/rails,25397,4-2-stable::4-2-stable,0,merged,activesupport::,"@rafaelfranca @sgrif @tenderlove Backport of #25341 to `4-2-stable`. Follow up to #25356. Includes the related bug @rafaelfranca fixed in 5e77a707f287798c5a683508919e01240d202800 backported as well. ## Problem As explained in the original issue, the call to `ActiveSupport::Logger#silence` is not correctly delegated to broadcasted loggers. This was fixed by implementing the `#silence` method for logger broadcasting. This, along with rewriting the tests, was done on `master`. Unfortunately, since on 4.2 in `reporting.rb` there are a number of `Kernel` patches, which includes aliasing the `Kernel#capture` method to `silence`: https://github.com/rails/rails/blob/806e816bb972296f7419a7fbe67cb8a8c0eab6b5/activesupport/lib/active_support/core_ext/kernel/reporting.rb#L108 This means the `respond_to?` checks break because it duck-types to a logger which supports `silence`, but actually calls out to an unrelated method. ## Solution It's nasty, but I also validate that the `silence` method is not on `Kernel`. 😞 I'm open to further suggestions. There's not much prescient for this kind of check. Up side is that this is only required in the backport as patch is deprecated and removed on master. If I'm going to refactor/reimplement logger broadcasting I'm not going to do it on the backport branch.",fc28a79697aa5ff5befd5ab2ec995de62c7da1c0::5e77a707f287798c5a683508919e01240d202800::33015969d1e585073709f7803515acf19e3b2d5f::
https://api.github.com/repos/rails/rails,25356,4-2-concurrent-logger::4-2-stable,0,merged,activesupport::,@rafaelfranca @sgrif Backports the work by @piotrj in #23616 on to `4-2-stable`. Needed as a prerequisite to backporting #25341. The work properly handles concurrency for loggers by changing their level through a `local_level`.,67f990cf3e72b7f964a21f2fe1a5434327399467::851f0ecd9ea803354754e42ce62ba3414d2eb1e1::
https://api.github.com/repos/rails/rails,25331,topic/fix-gid-strings::master,0,closed,activejob::stale::,"### Summary We've had issues where our jobs error on GlobalID deserialization, which enqueues a job to report the error to our exception tracker (Sentry). The problem occurs because the original arguments are included in exception report, which means the GlobalID that causes the issue is included. Sentry's gem knows that `_aj_globalid` needs to be mangled to prevent this from happening and works around this https://github.com/getsentry/raven-ruby/commit/a96d47babcb0df4d2bc7d80b3d40e98fcc7acf17 but because there is still a String that looks like a GlobalID the problem persists. I believe that we should be able to enqueue jobs with strings that look like GlobalIDs without triggering a deserialization attempt (that's why GLOBALID_KEY was introduced), and I think the code causing the issue is just a remnant. ### Other Information This issue is present in rails 4.2.6 (and earlier 4.2 releases) and should be backported.",17bde823dc34754df8f1eec1a4c9420daaccea64::
https://api.github.com/repos/rails/rails,25279,jm-add-backticks-1::master,0,merged,docs::,"[ci skip] I'm going to open backport PRs to move this to `5-0-0` and `5-0-stable` as well. --- EDIT: The 5.0 release notes are a bit out of date on `5-0-stable`, I'm assuming that needs a PR to be updated, and then this change can be backported. 😬",d2a69d319b3f8bc9591c470516d9315d7883c823::
https://api.github.com/repos/rails/rails,25232,4-2-unscoped-joins::4-2-stable,0,merged,activerecord::,This is a backport of https://github.com/rails/rails/pull/18109 to 4.2 branch. See also: https://github.com/rails/rails/pull/18109#issuecomment-222799358.,c55a5d6b16d18b028c3642caaf5815072630de40::ce271ce3f3aa80ba3ae1121f511f40773daa3fa1::
https://api.github.com/repos/rails/rails,25212,sg-backport-ff4986b917f6cc64398e2ba687f998fc52cf630c::4-2-stable,0,merged,,This is a backport of the fix for #25210 to 4.2,d6278aa78d77288828c400f2b92e7ebe3a570462::
https://api.github.com/repos/rails/rails,24965,arthurnn/conn_api::master,0,merged,activerecord::,"### Summary Move `establish_connection` to connection handler. This give us room to deprecate `establish_connection` on the AR::Base to use the one from the connection handler instead. ### Details As you know, now the connection handler is not coupled with the model anymore, so establish connection should not be a method in the model. With this API, you would do something like: ``` ActiveRecord::Base.connection_handler.establish_connection({database: 'foo'}, name: ""readonly"") class User < ActiveRecord::Base self.connection_specification_name = ""readonly"" end ActiveRecord::Base.connection_handler.establish_connection(:some_key_from_databaseyml, name: ""readonly"") ActiveRecord::Base.connection_handler.establish_connection(""URL://"", name: ""readonly"") ``` This is backwards compatible as far as I can tell, so it is safe to be backported to 5.0.0 ### Next steps (all still up to discussion) - Make AR internals use `ActiveRecord::Base.connection_handler.establish_connection` API - Deprecate `AR::Base.establish_connection` - Make ConnectionSpecification only work with a hash or a string. - Hash: when passing a full config - String: using a database url - Symbol: we wont need this anymore, this is used to point to a config from the databases.yml file (see next item) - Change database.yml file to the following: ``` production: primary: database: foo secondary: database: foo_readonly shard: database: shard1 ``` Like that, the railties AR initializer, can iterate over the ENV key, and create pools for each of the configs using the right name. cc @jeremy @tenderlove @rafaelfranca @matthewd also @jrafanie as we discussed that today. Think this error message is pretty confusing. What should users do if they hit this error? ::Rereading this, it comes off as needlessly verbose. `specification` is pretty abstract and it feels like we're pushing implementation to the users' eyeballs. Users should only have to think in terms of `connections` — I think we should shorten this to `self.connection_name = 'primary'`. ::Then we could also remove that pesky local variable `spec_name` 🤓 ::Could shorten this a bit by leaving `ConnectionAdapters` and `ActiveRecord` implicit and rely on relative constant lookups 😁 ::Why do we need to remove the connection? ::Ah, that was done in the old `establish_connection`. ::Think we should leave `name:` a required argument (and make `spec_or_config` optional, if I'm understanding the intent correctly). Also, I think `spec` and `config` are almost synonyms, which seems to suggest there's something we need to do here. Otherwise that ambiguity bubbles up to users. I'm not sure what that will look like, just saying this makes me a bit uneasy. ::We need to `resolve` here, because this method can receive a String, Symbol, or Hash(config). This is just for backwards compatibility, but eventually the idea is to deprecate this. ::Dig this 👍 ::",5167b8f7ffa66c8772c455916b8418844e3b4674::779ccf8a0e6a8bf7bb362c30dac4a340599ab113::028748945b7a3bb15555b90a58905190c601a15b::
https://api.github.com/repos/rails/rails,24824,fix-missing-helper-file-error-4-0-13::4-0-stable,0,closed,actionpack::,backport https://github.com/rails/rails/pull/24821 for rails 4.0,b8d4277b45dbea56200d93337e3e153cdc180dee::
https://api.github.com/repos/rails/rails,24823,fix-missing-helper-file-error-4-1::4-1-stable,0,closed,actionpack::needs work::,backport https://github.com/rails/rails/pull/24821 for rails 4.1,f634b6093296d2703c3a9f082f2258e98c684702::
https://api.github.com/repos/rails/rails,24822,fix-missing-helper-file-error-4-2::4-2-stable,0,closed,actionpack::needs work::,backport https://github.com/rails/rails/pull/24821 for rails 4.2,532ce086a877e57b1f70b66ca483d7f4854ee747::
https://api.github.com/repos/rails/rails,24821,fix-missing-helper-file-error-5-0::master,0,closed,actionpack::needs work::,"Fix for #18660 for rails 5 (based on master branch, assuming that's the right place for rails 5 fixes). I went ahead and made pr's for previous versions... not sure how you guys handle backporting fixes, if extra pr's is noise they can just be closed. However, backporting this fix is important either way. - 4.2 https://github.com/rails/rails/pull/24822 - 4.1 https://github.com/rails/rails/pull/24823 - 4.0 https://github.com/rails/rails/pull/24824",a2aa07d84dc06298ec806db2c4d273e558dafe70::20ec7481c42e8d191ea00fe26be5d147909627bb::
https://api.github.com/repos/rails/rails,24415,patch-1::master,0,closed,activesupport::needs feedback::,"When using MemoryStore, it is possible to manipulate data in cache through reference ``` Ruby irb(main):001:0> store = ActiveSupport::Cache::MemoryStore.new => <#ActiveSupport::Cache::MemoryStore entries=0, size=0, options={}> irb(main):002:0> store.write(""key"", ""value"") => true irb(main):003:0> store.read(""key"").object_id => 70092492456600 irb(main):004:0> store.read(""key"").object_id => 70092492456600 irb(main):005:0> a = store.read(""key"") => ""value"" irb(main):006:0> a.upcase! => ""VALUE"" irb(main):007:0> store.read(""key"") => ""VALUE"" ``` Please backport to 4.2.x branch",aceed3e541276ce593ab2c1a223c624021805c3e::c75b4a6bff3b4398c4c791ba4ce1453c786e7867::e261ca379fe31fe3edfe8413080bff3003179ff0::
https://api.github.com/repos/rails/rails,24308,4-2-stable::4-2-stable,0,merged,activerecord::,### Summary This change backports the fix to 4.2 stable that applies scale before precision when coercing floats to decimal. This was necessary to change manually due to changes from 4.2 to master that moved decimal logic from activerecord to active model. Fixes issue #24235 on 4-2-stable,f439c3f89566f8277c1442345a3eadd49c0c252f::
https://api.github.com/repos/rails/rails,24293,decode-json-with-indifferent-access::master,0,closed,activesupport::,"### Summary Ability to set ActiveSupport::JSON::Decoding.with_indifferent_access = true to convert all hashes of decoding result to ActiveSupport::HashWithIndifferentAccess and therefore, access them by string or symbol keys indifferently. This feature is extremely useful when you move your serialized data from text to json/jsonb column format in PostgreSQL and have symbol setters and getters all around the code. ### application.rb Can be set globally in config/application.rb ``` module YourApp class Application < Rails::Application ... ActiveSupport::JSON::Decoding.with_indifferent_access = true ... end end ``` ### Rails 4.2.x Please backport if possible. Need this feature in current project =)",2e116097478766b1cb211f2d9548a80c1ccec6a5::
https://api.github.com/repos/rails/rails,24197,backport-mysql57-support::4-1-stable,0,closed,MySQL::activerecord::,"### Summary This is a backport of #22383 and #22864, adding additional support for MySQL 5.7. ### Other Information I encountered an `ActiveRecord::StatementInvalid: Mysql2::Error` (in Rails 4.0.0), summarized by: http://stackoverflow.com/questions/32528773/mysql-5-5-to-5-7-you-cant-specify-target-table-for-update-in-from-clause-sa As far as I understand, the PRs above fixed the problem in Rails 4.2 and 5.0. I'm proposing to apply these changes to Rails 4.1. After several attempts at running `rake test:mysql`, `rake test:mysql2`, and `rake test:postgresql`, I've given up and thought it'd be best to ask for feedback before continuing.",f6a0f5461576ff1d2dd1c2433a0c50cfa08e480a::cf1c583df51028fcd80aafce0656c78b7cfd0810::5fa55af4866c8d7af94322a51af19e3c2c1d13ce::23a47d2f42590a1bb17fb64e7d7b34ae0012c27b::7f22cb356f830353ac3223f1ac5fd6894b05ede6::
https://api.github.com/repos/rails/rails,24157,backport-24150::4-2-stable,0,merged,activesupport::,"Fix a bug in `Marshal.load` that caused it to loop indefinitely when trying to autoload a constant that resolved to a different name. This could occur when marshalling an ActiveRecord 4.0 object (e.g. into memcached) and then trying to unmarshal it with Rails 4.2. The marshalled payload contains a reference to `ActiveRecord::ConnectionAdapters::Mysql2Adapter::Column`, which in Rails 4.2 resolves to `ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::Column`. This backports #24150 to 4-2-stable",c244dde4d4ac72af03f055a15cceeb91806e0a0c::
https://api.github.com/repos/rails/rails,23657,4-1-uniqueness-validator-pk-fix::4-1-stable,0,closed,activerecord::,"This is a backport from PR #23581 that fixes the issue reported on #23399 for Rails 4.1. > When changing the PK for a record which has a uniqueness validation on > some other attribute, Active Record should exclude itself from the > validation based on the PK value stored on the DB (id_was) instead of > its new value (id). r? @sgrif",1ad5e11871c1b9f4c50767746e950a987eb3eb8c::
https://api.github.com/repos/rails/rails,23656,4-2-uniqueness-validator-pk-fix::4-2-stable,0,closed,activerecord::,"This is a backport from PR #23581 that fixes the issue reported on #23399 for Rails 4.2. > When changing the PK for a record which has a uniqueness validation on > some other attribute, Active Record should exclude itself from the > validation based on the PK value stored on the DB (id_was) instead of > its new value (id).",3b85deb5ecd00f5e371b9d128fb0ec9ba2b953b3::
https://api.github.com/repos/rails/rails,23581,uniqueness-validator-pk-fix::master,0,merged,activerecord::,"When changing the PK for a record which has a uniqueness validation on some other attribute, Active Record should exclude itself from the validation based on the PK value stored on the DB (`id_was`) instead of its new value (`id`). This PR fixes the issue reported at #23399. I've included a simple test that fails with the current `master` branch. It should be noted that without this fix a PK update will never work on models that have a uniqueness validation. This fix applies to Rails 5.0, but I think it should be backported to other stable versions.",f1daa2be5278bee61dfa9a6dc111b556df677ad8::
https://api.github.com/repos/rails/rails,23045,fix-22235::4-2-stable,0,merged,actionpack::,This PR is a backport of #23035.,3870f2f4a19388fbba693e4423bdd996be9378ba::
https://api.github.com/repos/rails/rails,22864,add_columns_for_distinct_for_mysql57::4-2-stable,0,merged,,This PR is a backport of #22241.,5e9017099f7911b52a3848cda2434129952d1edb::692564c8c6cc014e4178ee6db514d0553d02a5d9::
https://api.github.com/repos/rails/rails,22383,mysql57_42stable::4-2-stable,0,merged,,This pull request backports #19359 and #21318 which fixes #21108 into 4-2-stable branch since there are some updates from users who use homebrew to install MySQL 5.7.,802f096a333b90a897f7bc5f974bea93de0e58da::8578155aa9bfd3858a3a2a45e6e3bd82777711d8::9450063697de4c2761bdf763a6cf4e014ba99c7f::
https://api.github.com/repos/rails/rails,22322,fix_route_proxy_performance::4-2-stable,0,merged,,This is a backport of #19007 from `master` to `4-2-stable`. It fixes #22320,70d033b45570bf7fe80f410bd31fdf50413724a6::063d046ec9cbbfa81970752cf91dac3ca4d2e3f3::
https://api.github.com/repos/rails/rails,22146,master::master,0,closed,,This is a followup on #22137 In addition to the described problem the proxy_wrappers.rb has to load deprecation therefore the extra commit. But for backporting in 4.2.5 only e1c7809 has to be cherry-picked.,e1c780914446920ecc837e2e544b7ed0088645cf::fe577b98860f50e7a48af897e594d6631df121df::
https://api.github.com/repos/rails/rails,21940,4-2-stable::4-2-stable,0,closed,activerecord::,"LIke @joallard in #20425, I also could use the functionality in #18228 in Rails 4.2. I rebased joallard's branch on the current 4-2-stable and also backported 112706a, which should fix the test failures that #20425 is seeing since it removes the `types` argument that isn't really needed. About to try this in our rails app while travis takes a look, will report back. I'll do my best to keep this up-to-date :) :heart: :heart: :heart: :heart:",ca3808f4368b7bcf19757bcb6a2f5f0811da5bfc::351c3593bb53057a2c16684ea047873c4a25a499::504a266abe14f3d6f7e0e4d4c7bf05e4cbda31a4::15b0b8fc88900efc5c33802bd2a94adf97688202::08100529a4ae03c6b5061e92cbe7e3140b24054b::68bc97bf4b9ace7e341ac9fffa590a3559277ba9::
https://api.github.com/repos/rails/rails,21924,invalid-params-encoding::4-2-stable,0,closed,,"Prior to this change, given a route: ``` get ':a' => ""foo#bar"" ``` If one pointed to http://example.com/%BE (param `a` has invalid encoding), a `BadRequest` would be raised with the following non-informative message: ``` ActionController::BadRequest ``` From now on, `ActionController::InvalidParameterEncoding` is raised instead and the message displayed is: ``` Invalid parameter encoding: hi => ""\xBE ``` Fixes #21923. Is not this the same thing that is being done in the new code but just with a different class? Why the different class is needed? ::Not exactly. The way [`BadRequest`](https://github.com/rails/rails/blob/4-2-stable/actionpack/lib/action_controller/metal/exceptions.rb#L5-L15) is designed, it acts as a wrapper for other exceptions. For example see it's intented usage [here](https://github.com/rails/rails/blob/4-2-stable/actionpack/lib/action_dispatch/http/request.rb#L302) and [here](https://github.com/rails/rails/blob/4-2-stable/actionpack/lib/action_dispatch/http/request.rb#L310). But in this case (ie. the removed line), it was used differently: By passing only the message as the `type` argument as we were doing, the actual message was lost, since the exception [ends up just calling `super()`](https://github.com/rails/rails/blob/4-2-stable/actionpack/lib/action_controller/metal/exceptions.rb#L9). Hence the non-informative message described in #21923. That said, I understand that this change breaks backwards compatibility since people may already be rescuing  `BadRequest` for encoding errors. So I see two options here: 1) close this PR and re-open it based on `master` 2) keep this PR open and adapt the `BadRequest` class it so that the same exception is raised but with the informative message. As I don't think this is urgent, I would go with (1). What do you think? ::@rafaelfranca I've updated my comment above, with some proposals. I believe this is something that we could and _should_ fix, at least in `master`. WDYT? ::There's definitely _something_ to be fixed; this line clearly thinks it's specifying a message, which is not actually the case. And yes, as the bot pointed out, we should be working against master -- any necessary backporting will be handled after that. As for the choice of how we actually solve the problem, I'm not sure... I'm hesitant to go with the code as proposed, partly because of the compatibility change you've already mentioned, but also because this addresses the ""exception can't be used 'normally' because it has magic / non-message parameters"" problem by introducing a new exception class which _also_ has magic / non-message parameters. Finally, I wonder whether we should really be revisiting the whole `original_exception` arrangement, everywhere it's used, given that we can now rely on `cause`. ::@matthewd Thanks for the insight. Agreed so I'll open a new PR soon. ::",744504f1236021571dd6045e048049de405fd761::
https://api.github.com/repos/rails/rails,21536,support-mysql2-0.4.0::master,0,merged,,"Broadens AR gem requirement from `~> 0.3.18` to `>= 0.3.18, < 0.5` Known failure on Ruby 2.3/trunk: brianmario/mysql2#671 Is the github reference required so that ruby-head tests pass? ::Err, this is the release version of 0.4.0, can you drop the git reference then? ::Could you backport this to prior Rails releases? ::",5da5e3772c32593ecf2f27b8865e81dcbe3af692::
https://api.github.com/repos/rails/rails,21403,mail-to-html-safe::master,0,closed,,"I added a test case to prevent regression caused by https://github.com/rails/rails/pull/21007 in Rails 4.2.4 with Ruby 2.0. For 4-2-stable, https://github.com/rails/rails/pull/21402 is necessary to pass this test case. I'll backport it to 4-1-stable too if it is merged.",bfc6eed31ce33b6f8968eee9f7ffa8f57cce6727::
https://api.github.com/repos/rails/rails,21402,ruby20-url-helper::4-2-stable,0,merged,,"Related to: https://github.com/rails/rails/pull/21007 As @aaa707 commented in https://github.com/rails/rails/pull/21007#issuecomment-135349891, `mail_to` helper crashes when `ActiveSupport::SafeBuffer` is given. It occurs with only Ruby 2.0. That's because `ERB::Util.url_encode` is not the same between Ruby 2.0 and above. https://github.com/ruby/ruby/commit/747b1a3188125a93be49d8cdd1781f768c191ba8 ``` rb 'a'.html_safe.gsub(/a/) do $& #=> nil end ``` Ruby 2.0's `ERB::Util.url_encode` uses `&$` and breaks it. So I changed the backport https://github.com/rails/rails/commit/0789e066f1194519c4f7c36533c8f02bd14968b2 to work well with Ruby 2.0.",253ba56f5639ffb5ebe98d01c3515604c756a96a::
https://api.github.com/repos/rails/rails,20672,4-2-stable-fix-header-modification-by-ssl::4-2-stable,0,merged,,`ActionDispatch::SSL` changes headers to `Hash`. So some headers will be broken if there are some middlewares on ActionDispatch::SSL and if it uses `Rack::Utils::HeaderHash`. This is a backport of #20559,2468b161a6ada171cceeddaf418b540eb98f2d55::
https://api.github.com/repos/rails/rails,20569,master::master,0,merged,,"If Mysql is not installed, running `rake db:structure:load` gives no output, implying success.  With this fix, the task will return an error either indicating that mysql does not exist, or that the the process responded with an error. This is a fix for the mysql_database_tasks and compliments #20468, which fixes postgres_database_tasks Could you check it out, if here should be just one dot? :) ::Ca we extract those into a general helper as we did in `PostgreSQLDatabaseTasks`? ``` ruby def run_cmd(cmd, args, action) fail run_cmd_error(cmd, args, action) unless Kernel.system(cmd, *args) end def run_cmd_error(cmd, args, action) msg = ""failed to execute:\n"" msg << ""#{cmd} #{args.join(' ')}\n\n"" msg << ""Please check the output above for any errors and make sure that `#{cmd}` is installed in your PATH and has proper permissions.\n\n"" msg end ``` ::Did anything in this section change or was it just reformatted? If it's just reformatting I'd rather keep it the way it's now. This will keep the patch focused on the actual change, won't mess with `git blame` and will make it easier to backport if need be. ::@senny sure we can.  What do you think about modifying run_cmd_error to differentiate command not found from a regular failure? ::OK, I'll remove this change ::",40664444eef2432fc564d8eecb647854bd06e5c3::
https://api.github.com/repos/rails/rails,20544,fix_utc_offset_for_time_attributes::master,0,merged,,"This is a fix for bug when you try assign a string representation of time with UTC offset specified to ActiveRecord's object attribute of `time` type. Example: ``` ruby Schedule.arrival = '12:00:00+03:00' Schedule.arrival # returns 2000-01-01 12:00:00 UTC but it should be 2000-01-01 09:00:00 UTC ``` Gist to reproduce: https://gist.github.com/Envek/3cd94d76f1ccd84b0253 Discovered on 4.2.0, so please also backport it.",0a0ffb64d88949db29c235637eeadeea3eeaf292::
https://api.github.com/repos/rails/rails,20527,add-message-to-assert::master,0,closed,,"This PR is probably unfinished. I just want to know if this is something that would be considered. I think that the `assert predicate, message` interface is less than ideal, for the very simple reason that it's the same interface as `assert_equal x, y`. I believe that interfaces should be designed to prevent programmers from making mistakes, especially as easy to oversee as these. This is a backport of a patch we made in our codebase on the [`assert`](https://github.com/rails/rails/compare/master...gmalette:add-message-to-assert#diff-cbef10f252bdfb6975e32c5b9c32a84bR88) method.  It replaces the 2nd parameter by an explicit `message` kwarg. When I applied the patch in our codebase, I found a lot `assert` that really wanted to be `assert_equal`, many of which caused failing tests. Rails fared better, and only had a [single occurence](https://github.com/rails/rails/compare/master...gmalette:add-message-to-assert#diff-f88fb76eaf514ad473e66c250b95b6c4R1031) of `assert` wanting to be an `assert_equal`. Well, I'm not sure if it was supposed to be or not; the test name isn't descriptive, and changing it to an `assert_equal` makes the test fail.",dfd80dce3cea0134d60eabe13f3f1661ed37631e::
https://api.github.com/repos/rails/rails,20425,4-2-stable::4-2-stable,0,closed,,"I couldn't get a Travis run on my repo, so here. #18228 ie Is it possible to backport 18228 to 4-2? Code fails there as `prepare_column_options` in 4.2 requires two arguments: `column` and `types`. Second argument must be supplied (I do not know what is it). ActiveRecord internals differs heavily between 4.2 and 5.0, so it wouldn't be easy to backport anything. But I need this fix too. ::Same thing here: `prepare_column_options` in 4.2 requires two arguments: `column` and `types`. ::",aa8d72879a54624133dd3ddb3c0874827ec136a2::
https://api.github.com/repos/rails/rails,20404,4-2-stable_bigint_as_limit_19_in_oracle::4-2-stable,0,merged,,This pull request requests to backport #20401 into `4-2-stable` branch.,e957b1a0e82b345e9fc83c15b645514ef5edc2f0::
https://api.github.com/repos/rails/rails,20349,backport-compact-4-2::4-2-stable,0,merged,,"Just following up on https://github.com/rails/rails/pull/19836 This seems like a regression, so can we get it backported to 4.2 as well?",2dc5566db500fa1a63b78d85e253ae7996577705::
https://api.github.com/repos/rails/rails,20348,backport-compact-4-1::4-1-stable,0,merged,,"Just following up on https://github.com/rails/rails/pull/19836 This seems like a regression, so can we get it backported to 4.1?",1b94d1ce71394b8a00f9620bbf0faec39130ff4f::
https://api.github.com/repos/rails/rails,20224,3-2-ruby-2-2-bcrypt::3-2-stable,0,closed,,"The `bcrypt-ruby` gem is incompatible with Ruby 2.2 due to a YAML serialization bug. [A fix has been made](https://github.com/codahale/bcrypt-ruby/issues/106), but only to the newer `bcrypt` gem at version 3.1.10. Rails switched to the `bcrypt` gem at 4.0.4 and it's currently set at version 3.1.7. This backports that change to Rails 3.2.",ea43516a29bf8fed6e98f50f4793da4d77a1bfe0::
https://api.github.com/repos/rails/rails,19818,generic_bug_report_template::master,0,merged,,"This template gives contributors a starting point to use when reporting bugs that does not involve Active Record or Action Pack. If the naming and template content is good enough, I can backport this to all the supported branches. cc @rafaelfranca @eileencodes @fxn @matthewd",ee43a67c2ca013945c7aa08350bdc01b6709436a::
https://api.github.com/repos/rails/rails,19758,remove-gzip-doc::master,0,merged,,"- https://github.com/rails/sprockets/commit/14b3b2eddac4699c64c051888e3801732b9a4418 - https://github.com/rails/sprockets/issues/26 --- I think this should be backported, since Rails 4.2 uses Sprockets 3.0, too.",f1c2937ce5c24954d1a1845a3945d1913d24b583::
https://api.github.com/repos/rails/rails,19662,fix/bind::master,0,merged,,"`Proc#bind` is removed with 4.1 release, see ""8.1 Removals"" in [guide](http://edgeguides.rubyonrails.org/4_1_release_notes.html). Can we backport this to 4-1-stable and 4-2-stable ?",1917719f003a2681b1f5ec00a54225457fcf0733::
https://api.github.com/repos/rails/rails,19502,assert-select-failure-output::master,0,merged,docs::,Adds documentation for substitutions and why Regexp substitions look different when assertion fails. As promised a while ago here: https://github.com/rails/rails/issues/19098#issuecomment-76277810 (@rafaelfranca said I could handle the 4.2 backport),c8ca20f7a0fc299cacf5c80e000dd56d4ceb7400::
https://api.github.com/repos/rails/rails,19433,fix_host_with_x_forwarded_host_header::master,0,merged,actionpack::,"Previously, an empty X_FORWARDED_HOST header would cause Actiondispatch::Http:URL.raw_host_with_port to return nil, causing Actiondispatch::Http:URL.host to raise a NoMethodError. I ran into this bug on 3.2, so it might make sense to backport this to `-stable` branches.",b49cac80de2d0245d8a704eebf555c54371b41d8::
https://api.github.com/repos/rails/rails,19431,head-routing::master,0,merged,actionpack::,"Fixes the issue described in #18764 - prevents Rack middleware from swallowing up HEAD requests that should have been matched by a higher-precedence `get` route, but still allows Rack middleware to respond to HEAD requests. Also needs to be backported to 4.2 and 4.1. An alternative solution, described by @jeremy [here](https://github.com/rails/rails/pull/18764#issuecomment-75864412) would be making `get` routes match GET & HEAD requests, rather than just GET. This could be done by adding `HEAD` into the `via` array [here](https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/routing/mapper.rb#L91), but changes the output of `rake routes` to show `GET|HEAD` for `get` routes. If there's a preference for the alternative solution, I'm happy to switch over to that.",34a52c6bce2f97398cef4790e49739ef8f865d11::
https://api.github.com/repos/rails/rails,19408,release-failed-activerecord-connections::4-2-stable,0,merged,,"This is a backport of the pull requests #18417 and #18478 (ActiveRecord: On reconnection failure, release only failed connetion). It would be great to see this come back to 4.2 :-)",1997f7bf0e5c0bfbf2245c6d795271fc502e2b33::
https://api.github.com/repos/rails/rails,19384,feature/activejob-priority::4-2-1,0,closed,activejob::,"The Active Job documentation [mentions](http://api.rubyonrails.org/classes/ActiveJob/QueueAdapters.html) that some backends allow setting priority per job. This PR adds support for setting job-level priorites to Active Job. - Similar to queue_name, the priority can be set on the class level and can be overridden per job. - This only brings support to job-based priorities, not queue-based priorities. (Though the same syntax could be used, with the backend checking that the same priority is always used per queue.) - The default priority for delayed_job is 0, for que 100. To keep backward-compatibility, the job priority is unset by default, but this can be overridden by setting default_priority. - Backends that don't support priorities will silently ignore any priority setting. Perhaps an exception could be thrown (like scheduled jobs with the inline backend), but as most backends will need to do that, I guess some refactoring is needed. Since this is my first contribution, I've kept it with this for now. - I hope it's ok to use the 4-2-1 branch, I'd be happy to port it to master when merged - but as I started development here it'd be double work to rebase on master and then backport later.",8c77aeb33befd6876c4f564ab8f53e3208d49065::
https://api.github.com/repos/rails/rails,19176,master::master,0,merged,,"Hey- this is a simple fix, but i think it should also get backported to the relevant stable branches in the 4.x series. I don't think it is relevant for 3.x. Isn't better to just assert the result of `schema_file`? Wdyt? :::+1: on checking the returned path. ::",e3a1bd3560128f7594f2131d53a6b8f216220873::
https://api.github.com/repos/rails/rails,19151,fix-levenshtein-distance::4-2-stable,0,merged,,This is a backport of #18395. I consider this a bug so I would like to merge this in to **4-2-stable** and **4-2-1**. Also feel tree to close this issue if you prefer to just cherry-pick 98d896e0aede716ecf3918d54dfc78bad80d2878. cc/ @rafaelfranca @schneems @shunsukeaida,9982138a65847cc3a0a4858181c3b087b854b7ac::
https://api.github.com/repos/rails/rails,18804,dont-blat-default-format-4-2::4-2-stable,0,merged,,This is a backport of #18627 that only fixes the issue for `:format` so as not to break existing behaviour. cc @pixeltrix,9789cce919d3c562a7c5d3206d89a0f88f74c90c::
https://api.github.com/repos/rails/rails,18803,dont-blat-default-format-4-1::4-1-stable,0,merged,,"This is a backport of #18627 that only fixes the issue for `:format` so as not to break existing behaviour. cc @pixeltrix @tekin sorry to be a pain, but any chance of you changing this to `do … end` block rather than `{…}` ::Sure, updated. ::",a2f7f54a33d9a200a27a5b9156c7022c5c94e972::
https://api.github.com/repos/rails/rails,18791,consistent-foreign-key-name-generation::master,0,merged,,"Following up on [a discussion](https://groups.google.com/forum/#!topic/rubyonrails-core/psnWNqZ4XWg) from the rubyonrails-core list. Rails 4.2 added support for foreign keys in database migrations. The names for those foreign keys are randomly generated, which means every developer who runs the migrations on their machine generates a conflicting `structure.sql`. This PR switches to a consistent algorithm for FK name generation, using a hash of the table and column names. I believe this change is non-breaking (migrations which people have already run with Rails 4.2 are unaffected), so can be backported into `4-2-stable`. I'm not sure on the process for that, but I'm happy to put in another PR against that branch if that's how it's done. Can these be changed to `assert_equal`? ::Sure can! Changed. ::",b8e1f202676b4788c56241b124c401beff9f4014::
https://api.github.com/repos/rails/rails,18764,master::master,0,merged,openacademy::,"In match_head_routes, deleted the routes in which request.request_method was empty (matches all HTTP verbs) when responding to a HEAD request. This prevents catch-all routes (such as Racks) from intercepting the HEAD request. Fixes #18698 I don't think that the responsibility of rejecting routes without a `request_method` should be handled by `match_head_routes`. [`AD::Journey::Route#matches`](https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/journey/route.rb#L93) should reject routes which does not have a `request_method` constraint. cc @pixeltrix WDYT? ::The problem comes because we are explicitly rejecting catch-all routes when doing a HEAD request. Since a head request is a special case of a GET request, we don't want to allow anything that doesn't explicitly accept HEAD requests. However, after the initial pass-through of the routes, and nothing is found, we fall back to allow GET routes (and catch-all routes) to respond. As a result, if we put the rejection in `matches?` the fallback becomes more difficult. ::@tgxworld I went through this with @tsun1215 at the Open Academy yesterday and I think it's probably the least invasive method of doing it at the moment that we can backport to 4-2-stable. I suspect that this block of code will be rewritten again before Rails 5.0 ships ::@tsun1215 can you reformat the test a bit to tidy it up: ``` ruby def test_head_fetch_with_mount_on_root draw do get '/home' => 'test#index' mount lambda { |env|  [404, {""Content-Type"" => ""text/html""}, [""Not Found""]] }, at: '/' end head '/home' assert_response :success head '/' assert_response :not_found end ``` ::`Fixes and issue` I think there is a typo here :smile: ::@pixeltrix @tsun1215 Ok :smile_cat: Could we perhaps delete the routes before matching them? ``` ruby routes.delete_if { |route| route.verb == // } head_routes = match_routes(routes, req) ``` Since we're going to reject them, we can do it earlier to avoid matching them. ::@tgxworld yep, I think that should be okay - @tsun1215 can you change the PR please. ::",b9c63b0aae7a7f9ddf32e155b11a51bd9c441857::
https://api.github.com/repos/rails/rails,18713,patch-1::3-2-stable,0,closed,,Fix warning: Comparable#== will no more rescue exceptions of #<=> in the next release. This is a backport from the current activerecord/fixtures.rb,15fbc9682438e22d7c3e9fa118bbcfa615f20ffa::
https://api.github.com/repos/rails/rails,18627,dont-blat-default-format::master,0,merged,actionpack::,The handling of positional arguments causes any default `:format` set in `default_url_options` to be lost when there is at least one positional argument other than format. can you use `1.9` Hash syntax? ::Sure! This test file is full of 1.8 syntax. Is it worth me updating it all in a separate commit? Same for route_set.tb. ::@tekin We decided to only change the hash notation within the patch diff itself. The reasoning behind it is that just changing the hash notation makes the git blame history harder to follow as well as changes harder to backport. that's why we still have a lot of hash rockets around but try to replace them within the PR-diffs. Hope that makes sense ;) ::Makes sense. Updated that one line to use `1.9` syntax. ::,db870f222e7ba4402590ee2f4143bcd40c3dbc56::
https://api.github.com/repos/rails/rails,18616,sanitize_docs_4-2::4-2-stable,0,closed,,"@rafaelfranca This is a backport of #18557 to `4-2-stable`. I'm not 100% sure of what the protocol is for backporting doc fixes, so if this isn't something typically done, feel free to close.  Thanks!",40db93774bd19c143f64af0167658a1792091196::d95df87de78114aeccedfd10b08f56b9e8bfde93::538bf300beb921298b43e6b61188fecdfdde8eb1::
https://api.github.com/repos/rails/rails,18530,3-2-stable::3-2-stable,0,closed,,"This is a backport from the 4.2 branch. This allows Rails users to install mail 2.6 which relaxes the mime-types dependency, which is a big win for a lot of people. Previously, the mail gem restricted mime-types to ~> 1.16 but now it has expanded to ["">= 1.16"", ""< 3""] And the mime-types maintainer will also be checking that 2.x releases don't break mail. See https://github.com/mikel/mail/pull/713 https://rubygems.org/gems/mail/versions/2.6.0 Conflicts: actionmailer/actionmailer.gemspec",e4f072bc68a309c64b9975b08b103b510278da37::
https://api.github.com/repos/rails/rails,18442,backport-13321-to-4.0::4-0-stable,0,closed,,"This pull request backports @mezis's SafeBuffer fix in #13321 to 4-0-stable. The SafeBuffer bug was pretty serious, and the fix is simple, so I think it's worth backporting.",97f570dd012cdd5552688161c56d4832edfa5be6::
https://api.github.com/repos/rails/rails,18306,rm-3-2-with-ruby-2-1-plus::3-2-stable,0,merged,,"trying to get the tests green as discussed in https://github.com/rails/rails/pull/18160 This will raise a Ruby warning without `()`, mind changing? ::Do we need to enforce this version on the Gemfile? I18n 0.7 should work fine on 3.2 with Ruby 1.9.3+, if it is not we may need to check why, did you get any error? ::It does work, but Ruby 1.8, and 1.9.2 test suite fails if we don't specify the version. ::They will, because the interpolation backport has been removed. We may need to bring that backport back entirely if we want that to happen (even though I18n 0.7 is officially not supporting such rubies anymore). ::Actually the problem is that the gem doesn't even install at those versions https://github.com/svenfuchs/i18n/blob/v0.7.0/i18n.gemspec#L21 ::Ah indeed, I forgot I had added that constraint. ::Sure. Why does this warn? ::An annoying: `warning: ambiguous first argument; put parentheses or a space even after '/' operator` ::This should only apply on < 1.9.3, so we're otherwise testing with the latest allowed by our gemspec. ::",8fd52705eda6a2cd7e9a8a5bc723fa094e359eb7::047b2a9fcf893287a01de621dc40d6b29e701747::7c8fb95495bd86859c6bd71ac082ef06a2b7ddb3::288bace615dde03f29707258e0456f454200322e::520762019aa4b35daa16c31d0bf3c49675e672f3::aa01162ffeba391329ab2b8559d9aa6d0182b74e::a51bb36fdb59bd0ecf8b462c98e90e30d80107c1::4d70f97af49ebcf316bc38883ec076603f610d84::e4a2396942d1479b254cee95a31a00a2853770bb::8945a12d17a5090010702a235103333d3abe69c9::afb4fb9ff7dfd205876313fa6b3e637e6040545f::79e45a8992f02772abc9f368f8c64567c888dad2::98dbc5e3cc248859b8c881dbcd228f8ad0743f21::d22e2383fe7dc963af128130336264ba2dfccbeb::2f558088acb2ab65ed4dcd87a8ef42d1b26a8035::3a30b12c774dfaa72acfe520e823374131631ea9::683f541d784e7aa15285c2eea5245d697c7120f7::bcbce4e9ffc2f5a2f86d3a977a0e07e2b2aab19e::
https://api.github.com/repos/rails/rails,18198,issue17105::master,0,closed,activerecord::,"Addresses #17015 and #16494. Reverts the majority of the changes from #15358 but retains the test coverage. TL;DR on the discussion in #17015: the fix in #15358 ensured that subclasses that redeclare associations get newly-defined autosave callbacks. Unfortunately, enabling `accepts_nested_attributes_for` can cause this redefinition within a single class, breaking the order of callbacks and causing records to be saved in the wrong order. This PR reinstates the method-definition check removed in #15358 but restricts it to only match definitions on the current class rather than inherited ones. Several other changes are included, mostly for symmetry and to prevent additional similar bugs: - the definition in the `reflection.has_one?` branch now uses `define_non_cyclic_method` to match the other branches of the conditional. It could be argued that two models who both `has_one` each other are probably incorrect DB design, but that still shouldn't produce infinite recursion. - similarly, the `method_defined?` check in the validation conditional (line 208) has been changed to match the check for `save_method` on line 182. I don't have a test case for this, but it would likely manifest in the same ""redefinition in subclasses"" sorts of situations that #15358 addressed. I've included the test written by @pranas and mentioned in https://github.com/rails/rails/issues/17015#issuecomment-67736744 as a separate commit as it accurately reflects the code's authorship. Let me know if I should squash, etc. 4.2.0 is also affected by this bug. Happy to backport this when it gets merged. /cc @tenderlove @sgrif",5d98f3213fbb0f4886b2ca2bb862d0efc67c7570::9b2b7ba324b0e880cefde0bc6cc50cde402d054b::
https://api.github.com/repos/rails/rails,18167,checkin_connection_leak::master,0,merged,,"NOTE: this is a severe app-crashing regression from 4.1.8 to 4.2.0. The fix should be trivial to backport to 4-2-stable. The code in `ConnectionPool#release` assumed that a single thread only ever holds a single connection, and thus that releasing a connection only requires the owning thread_id. There is a trivial counterexample to this assumption: code that checks out additional connections from the pool in the same thread. For instance: ``` connection_1 = ActiveRecord::Base.connection connection_2 = ActiveRecord::Base.connection_pool.checkout ActiveRecord::Base.connection_pool.checkin(connection_2) connection_3 = ActiveRecord::Base.connection ``` At this point, connection_1 has been removed from the `@reserved_connections` hash, causing a NEW connection to be returned as connection_3 and the loss of any tracking info on connection_1. As long as the thread in this example lives, connection_1 will be inaccessible and un-reapable. If this block of code runs more times than the size of the connection pool in a single thread, _every_ subsequent connection attempt will timeout, as all of the available connections have been leaked. Reverts parts of 9e457a8654fa89fe329719f88ae3679aefb21e56 and essentially all of 4367d2f05cbeda855820e25a08353d4b7b3457ac /cc @tenderlove @matthewd @sgrif",5e024070ab3766fada222053d1e0f1116aeb50a6::
https://api.github.com/repos/rails/rails,18071,backport_18052_4-2::4-2-stable,0,closed,,"This is a backport of #18052. The current implementation of `variants=` don't allow a resetting to nil, wich is the default value. This results in the following code smell: ``` ruby case request.user_agent when /iPhone/ request.variants = :phone when /iPad/ request.variants = :ipad end ``` With the ability to reset variants to nil, it could be: ``` ruby request.variants = case request.user_agent when /iPhone/ :phone when /iPad/ :ipad end ```",2ba994edc602b0eae5b1fed6a56c625561855afa::
https://api.github.com/repos/rails/rails,18022,url-helpers-optional-scopes::master,0,merged,,"I believe 84bf3a08150e9e10a29282a7a671a052f00bcd31 introduced a subtle bug with the way you can use URL helpers. As an example, if these are the routes: ``` ruby scope ""(/:product)"" do resources :users end ``` I am no longer able to call the URL helper with `product: nil`: ``` ruby user_path(1, product: nil) ``` Within `handle_positional_args`, we do this: ``` ruby result[param] = inner_options[param] || args.shift ``` `inner_options[param]` will return `nil` in this case, which will fall back to `args.shift`. Changing to `fetch` with a block that gets called as a fallback should correct this behavior. This should be included in `4-2-stable` as well, but I'll wait to issue a backport PR until this is accepted!",a842c5c12d4c1091c4e065cbdbc3adb58ce55bc9::
https://api.github.com/repos/rails/rails,17876,fix-tests-on-4-0-stable::4-0-stable,0,merged,,"Tests on `4-0-stable` are currently failing (for instance [on Travis](https://travis-ci.org/rails/rails/jobs/41723561)) because the time zone of Moscow/Russia has changed. This issue has already been fixed on `master`. Since code changes are still being made to `4-0-stable`, I suggest we backport these two commits from `master` to `4-0-stable`, so tests start passing again on the `4-0-stable` branch.",8fbe1fb9d76313b4df2a2a54f421ec6adc0cc9f2::97b1c0fe6cff7f98129f1f210d1c4028d3d05760::
https://api.github.com/repos/rails/rails,17739,bring_back_db_test_prepare::master,1,merged,activerecord::,"Closes #17171 Closes #15787 This reverts deprecations added in #13528. The task is brought back for two reasons: 1. Give plugins a way to hook into the test database initialization process 2. Give the user a way to force a test database synchronization While `test:prepare` is still a dependency of every test task, `db:test:prepare` no longer hooks into it. This means that `test:prepare` runs before the schema is synchronized. Plugins, which insert data can now hook into `db:test:prepare`. The automatic schema maintenance can't detect when a migration is rolled-back, modified and reapplied. In this case the user has to fall back to `db:test:prepare` to force the synchronization to happen. #### Context Since automatic schema maintenance has been shipped with `4.1` we need a backportable solution. This patch tries to address parts of the problems reported in #17171, #17170, #15787 We started to move away from `rake` as the primary mechanism to setup the testing environment. Some parts (like existing hooks) did not get the necessary attention. For `5.0` we can finish that transition and provide a sensible upgrade path for plugins. #### Discussion This patch brings the following shortcomings: - It doesn't restore the hooks as they were. `test:prepare` still runs before the schema was maintained. Plugins that rely on the schema need to switch to the `db:test:prepare` hook. - `maintain_test_schema!` now shells out to `bin/rake` to synchronize the schema. This adds the cost of loading the Rails environment twice when changes are detected. - We already started issuing deprecations in `4.1.` this might come as an unexpected change. #### TODO - [x] Write tests - [x] Adjust documentation - [x] Add CHANGELOG entry this was necessary to get `Rails.application.config.active_record.schema_format = :sql` inside an initializer working. I think it conflicts with other tests though. /cc @rafaelfranca :::+1: ::",9e9793b440c044b765f2d1f702feeb92aef2b139::5c4495538bb4e8808ce077f08ea6b809952daa44::
https://api.github.com/repos/rails/rails,17725,deprecate_use_route::master,0,merged,actionpack::engines::needs feedback::,"This is a continuation of #17453 Already in master: - [x] Guide is fixed via b7b9e92 and backported to 4-1-stable. It should [show up on edge guide](http://edgeguides.rubyonrails.org/engines.html#functional-tests) on the next rebuild. - [x] The engine-oriented test cases are added via 77a2764 to prevent regressions during the 4.2 series. In this pull request: - [x] Deprecated passing `use_route` in `process` in controller tests - [x] Deprecated passing an invalid route name to `Formatter#generate`, fixed a few internal test case that relied on that As far as I can tell, the `Formatter#generate` accepting invalid route names is a bug that's been around forever. As @huoxito pointed out, currently if you pass in _anything_ that is not `nil` as the first argument to `generate`, it will try to match against just about anything that is present on the routes table. As @pixeltrix has discovered in 1555a18, this leads to incorrect results, in particular when engines are involved. Unfortunately, this is actually why the `use_route` hack worked in the first place – the `mount Foo::Engine => '/foo'` entry in the dummy app does not actually generate a named route called ""foo"", so it appears that the only reason it works currently is because of this bug. So we basically documented a buggy behavior which means we can't just fix it. I added a separate deprecation for it and so we should be able to fix it in the next version. By the way, to answer @pixeltrix's question... From what I can tell `ActionController::TestCase` on its own actually work perfectly fine with engine controllers _without any special configuration_, overriding `@routes` or whatsoever. (As demonstrated in [this test case](https://github.com/rails/rails/commit/77a276411e717353bc562c04d62e144f4410e706#diff-279ac5c088a3ee7e9f954bbc10d1b773R772).) The reason it doesn't work out of the box in a generated engine is that the generated `test_helper` always [require the dummy application](https://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/plugin/templates/test/test_helper.rb#L4) and then [require the `test_help` file](https://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/plugin/templates/test/test_helper.rb#L11), which [defaults the `@routes` to `Rails.application.routes`](https://github.com/rails/rails/blob/master/railties/lib/rails/test_help.rb#L35). I suppose we should improve that situation... but that's out of the scope of this PR and I'm not sure if I'll have time to work on that anytime soon. If @huoxito or anyone else is interested please feel free to explore that further :smile: cc @tenderlove @pixeltrix @huoxito @radar for review :smile:",938d130c62b530d3445c9f06933cb113ff477fed::c23bb156fe29481c3c900e9a4bd3c1f84e71c6d0::8e73abbda8d3a55459bac728530606fdf69468f5::23b21f6182e36c05c6b2a240c0fb824ae828465e::
https://api.github.com/repos/rails/rails,17699,patch-10::4-1-stable,0,closed,,"faster vms, more ram, more cpu, faster boot times, better network opening this PR to test the new Travis VM setup (backported to the 4-1 branch) docs coming soon",ba0e827222c76ada4ba45ceb44a2c4881dec90d8::
https://api.github.com/repos/rails/rails,16899,3-2-backport-inflection-fix::3-2-stable,0,closed,,I just want to backport these commits to 3.2 since we need them in our live project.,16e9885e7a297b4bbddfcc5c1db46823dfe45c82::071b64035f8864f8a2f632b7748bd1c2cd346375::
https://api.github.com/repos/rails/rails,16887,bugfix-bad-request-from-public-exception-4-0-stable::4-0-stable,0,closed,,This is a backport of #16886.,4e7fe9cbd00850f5fc545e9dbd30512cc05d5fab::
https://api.github.com/repos/rails/rails,16872,4-0-stable-backport-16871::4-0-stable,0,closed,,This is a backport PR of #16871 to `4-0-stable`.,86ae533ad0fd29a95b09b1cdd2df5d0c97496915::
https://api.github.com/repos/rails/rails,16760,time-change-offset::master,0,closed,activesupport::,"This is a follow-up of #16758 and the branch is based on it. Fixes #16759. Doesn't this prevent you from setting `:sec` and `:usec` ? ::Being able to set `:usec` and `:nsec` doesn't really make sense or does it? Maybe they could be added together and checked that they are less than one second? ::Yep, will work on this later today to get it finished. Btw, do you think we should break this in 2 separate PRs? The first adding support for `:nsec` and the other fixing the issue when using `Time.new`? If so, I will fix the PR about the `:nsec` option first so we can merge it and then work on this too. ::I think we should fix the bug with `:usec` not raising an error first and not mix a new feature with a bug fix. Also the bug fix may be backported to 4-0-stable and 4-1-stable but not the `:nsec` feature. ::OK seems fair. I will update this PR then to fix the issue and then work on another one for the `:nsec` option. ::@pixeltrix No it doesn't. We should take into account only one of the two values (in case both are provided) and ignore the other one, right? Like so: ``` new_usec = new_nsec.to_r / 1000 if options[:nsec] > 0 # ignore :usec and only use :nsec # or the opposite... ``` Or should we add them together if both  `options[:usec]` and `options[:nsec]` are provided? Not sure. ::@pixeltrix I opened a 2nd PR (about the `:nspec` option): https://github.com/rails/rails/pull/16758 (it is based on the branch of the 1st PR). Sorry for the spam and thanks for the help! :bow: ::",ce622d8aa5882e88c91d4b7428e48250e5743f2f::17013aaf5114b769588c8dbd0db7b33076a54567::
https://api.github.com/repos/rails/rails,16693,form_for_doc_options_4-1::4-1-stable,0,merged,,"Don't know if backporting doc fixes is a thing, but here it is just in case.  Backport of https://github.com/rails/rails/pull/16647. /cc @rafaelfranca",a2d56580262d80924bb99627244011f50378ebe7::a0c4d5c2ae845c96625afe3e75e1a1afddbb9cfd::
https://api.github.com/repos/rails/rails,16632,fix_inverse_of_stack_level_too_deep::master,0,closed,activerecord::,"Fixed the stack level too deep upon saving a parent record with an associated child record where in the parent the child association is an `inverse_of` the parent. This is a revised fix based on both @Nerdman4U's #14030 and my #16166. This revision's goals are: 1. To properly fix the issue (which #16166 does but #14030 does not); 2. To make minimal impact to the existing ActiveRecord test suite (which #14030 does but #16166 does not). The minimal modification to the test suite causes the unpatched code base to fail on this test: `test_should_save_changed_child_objects_if_parent_is_saved`. This patch backports fine on `4-1-stable`. The gist provided in #16166 is still relevant and reproduces the problem. The gist below however, also ensures the fix is proper and doesn't break existing behaviour. ``` ruby source 'http://rubygems.org' gem 'rails', github: 'rails/rails' gem 'rack',  github: 'rack/rack' gem 'arel',  github: 'rails/arel' gem 'sqlite3' gem 'pry' ``` ``` ruby # uncomment for master require 'bundler' Bundler.setup(:default) # uncomment for releases # gem 'activerecord', '4.1.5' # gem 'activerecord', '4.0.9' require 'pry' require 'active_record' require ""minitest/autorun"" require 'minitest/pride' require 'logger' ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:') ActiveRecord::Base.logger = Logger.new(STDOUT) ActiveRecord::Schema.define do create_table :users, force: true do |t| t.integer :super_power_id end create_table :super_powers, force: true do |t| t.integer :power_id end create_table :powers, force: true do |t| t.string :name end end class User < ActiveRecord::Base belongs_to :super_power, autosave: true end class SuperPower < ActiveRecord::Base has_one    :user,  autosave: true belongs_to :power, autosave: true end class Power < ActiveRecord::Base has_one :super_power, autosave: true end class BugTest < MiniTest::Unit::TestCase def test_autosave power = Power.new(name: 'power') power.save! super_power = SuperPower.new(power: power) super_power.save! user = User.new(super_power: super_power) user.super_power.power.name = 'power2' user.save! assert_equal true, user.save! assert_equal 'power2', user.reload.super_power.power.name end end ``` cc @carlosantoniodasilva @rafaelfranca I think we need to also clear this flag. Otherwise once it's set it will be sticky, so such object will be marked as changed forever. This patch might fail the testcase at #16640: https://github.com/rails/rails/pull/16640/files#diff-e8c1d76e46a7594aaae7e4bda2ee4737R1020 ::",07a8304566eae6501590bebc9e8b1583c0c4ea7c::
https://api.github.com/repos/rails/rails,16535,patch-1::master,0,merged,railties::,"Let devs upgrading from older Rails take advantage of the LegacyKeyGenerator without needing a monkeypatch to use a blank secret_key_base This behavior may have been removed by accident.  See https://github.com/rails/rails/commit/484ff7d29e7a27216219cf5460bf675c38abf522 e.g. ``` ruby Rails::Application.class_eval do # the key_generator will then use ActiveSupport::LegacyKeyGenerator.new(config.secret_token) fail ""I'm sorry, Dave, there's no :validate_secret_key_config!"" unless instance_method(:validate_secret_key_config!) def validate_secret_key_config! #:nodoc: config.secret_token = secrets.secret_token if config.secret_token.blank? raise ""Missing `secret_token` for '#{Rails.env}' environment, set this value in `config/secrets.yml`"" end end end ``` @schneems This is more correct, to use secrets.secret_token instead of config.secret_token, no?  Otherwise they might diverge.  (If so, I should probably update the lib, tests, and docs that only use config.secret_token, as well ::This should probably be `secrets.secret_token, no?`  See https://github.com/bf4/rails/commit/f1cdcfe4ccf2c78e1dda88a31d1a443fca7c2dad cc @schneems ::oops, this is wrong.  it's in the 'Upgrading from Rails 3.2 to Rails 4.0' section.  We might also want to note here to use https://github.com/envato/rails_4_session_flash_backport/ in 3.2 and then in 4.x ``` ruby # Ensure cookies compatibility with Rails3 # Stay on the :marshal serializer till 4 is stable # Then we can switch to :hybrid, and eventually to :json Rails.application.configure do config.action_dispatch.cookies_serializer = :marshal end ``` ::What about `secret_token` can now accessed in `Rails.application.secrets.secret_token`` or similar wording. saving is not the correct word i think, ::Sync* ::I borrowed the language from https://github.com/rails/rails/blob/4-1-stable/railties/CHANGELOG.md `secret_key_base is now saved in Rails.application.secrets.secret_key_base and it fallbacks to the value of config.secret_key_base when it is not present in config/secrets.yml.`. Otherwise, I'll change it whatever is preferred. ::cc @zzak ::I just grepped the repo and you're right that the spelling `sync` is the one in use... I should have checked first. ::",db5f1a46f26ed2b8359d3dde3398dd1a8ca443d4::
https://api.github.com/repos/rails/rails,16435,after_commit_run_on_top_level_trans_master::master,0,merged,activerecord::,"related to #16432 . [fixes #16425] This is practically a backport of that fix, plus 1 commit to make it work. This is to ensure the same behaviour as 3.2 Hm, I just spend a few minutes reading this and I still wasn't 100% sure if these changes would actually result in the same behaviour in all cases.. this code is confusing enough as is, so personally I prefer to keep it more explicit here (and you still need `transaction.rollback` in the second rescue block anyway, so that just adds to the confusion imo), wdyt? ::changelog on top :wink: ::I had to change this as on the `commit` method (https://github.com/rails/rails/pull/16435/files#diff-52c8dd8e01c039c37b33b3fcbdfe406aL111) , the `current_transaction` on `transaction_manager` needs to be the parent already, so we need to pop the stack before calling it. ::done ::I can actually, pretty simply, explain this change: So there are 3 changes - Rollback method: It will pop the transaction and rollback afterwards. Thats ok because the ensure code will be just no-op, as the `error` var is set. - Commit method: it will also pop and call commit. If there is an error on that call, the `rescue` call will not pop anymore, as this had already pop the stack. - Remove `@stack.pop` in the end. As the rollback or the commit will pop the stack already, we should not pop it again. ::",0002954512364f2f69d28798f7a79aa8e27d7b6b::2e90fe736de73cfd89eed68b38e03eb6175314bc::
https://api.github.com/repos/rails/rails,16411,backport-param-changes::4-1-stable,0,merged,activesupport::,"When cherry-picking `active_support/core_ext/object/to_param` in 4.1.*, we still see an undefined method to_query for hash unless we also pull in `.../to_query`. This was resolved on master in c420a8da, so this is exclusively a backport of ""Move to_param to to_query, also Improve tests"" based on the Active Support Core Extensions guide's [Cherry-picking a Definition](http://guides.rubyonrails.org/active_support_core_extensions.html#cherry-picking-a-definition) section. We should remove this require. ::Done in eaf1aa06d37d29eac7e3f5115933dac683285ed6 ::",0dcd98d2ebee4082819334f9da7c8a7c169e518f::
https://api.github.com/repos/rails/rails,16410,backport-param-changes::master,0,closed,,"When cherry-picking `active_support/core_ext/object/to_param` in 4.1.*, we still see an undefined method to_query for hash unless we also pull in `.../to_query`. This was resolved on master in c420a8da, so this is exclusively a backport based on the Active Support Core Extensions guide's [Cherry-picking a Definition](http://guides.rubyonrails.org/active_support_core_extensions.html#cherry-picking-a-definition) section.",ba71deb1927717ac57f2eb88f268277e710b0046::39a607f826e385288c737716ef87ad226f282aee::6047c6baa2bc1ca28f80523b445569ea6953d490::00fd52bb0d1fe2201bc7bffae3d89493f4ae7612::945c44c5d8d48cab9c160f313bf6369410f1c62c::5f8b8c310efc38b1719f0802c93b74974b469b94::a1439bb8a1dc3d5368dd6bf47f699089140dfd4f::4988d347b23ff94a2666238a0223521e932dee77::b31b2fe78570b8766d9569d1bed8e0c5345c716f::4bdff5b36656196d977147d625eeb0a98d2f4842::2a72514d2ec068a8a4a1ba8f1ab33723d00b8774::87a2f02199d21a2aaa978efee8f9838cf96b25a2::c1d9c11cbe3d20f2c3daf4e646e5818f1126ffb2::8a067640e6fe222022dc77bb63d5da37ef75a189::36019329b015e570a58d9f34027c6e73edc36b77::c35e438620f2d56562251571377995359546393d::cfa53cc0fde7ca5a310673b4740ab908e8d5f38e::ab4f8ec10133b36f7c7048eee1fa0a735e685d6a::fda3653d3fa20faf00a84959e7f8f56e07847318::c20fe8004e3be336484e31748c13a854523c252c::1c7eec15a85f857cd6116a5257af735bd406bca0::24d82063bcc86a86eb8c8717d74c0c7340e209e6::906f339687d3cad3e523beb99d84496adbfd1341::98b56eda5d7ebc595b6768d53ee12ad6296b4066::099efc0c53edc02a252ef92ab1ba4b1ebdc5452f::4841ad3c56a19bb455a6ce836d48bef9cf26fb85::ea8603f932c1ae9b2ab5bb82049758165e4366db::d78368e53bf7aa790d941c94cb451f7764d06aea::88ee47d052790eefb28732a196b8243700ee9081::970ca2c18db3b00d50495a932fa892181221b8ec::9c05300e40fd0e3bfd1e2dad64f4a0b3d0ba291d::affa34b8f4afeeed04b0882d7cc92d8d500ad144::3b1ade1f31e553e3f000501dc668384568d737a8::529720df0193991c66350154e8bed5a59dbaacfe::e8a2db20651dee2965d56ab7315414c173eccc40::254e8e2c97b5df1dafd54cf8f305f7bad05f4a63::561811fb000e3b0d15fb311a88bcec9e35ec8623::cd9222a179f4c92704eaf4bfc13531c9606b574c::4214063a5cd52463631f90a27ddca6271d4968c9::e8f5a34053638afcacc76d00c802ea7c10090254::f100f296476dfbbc37802d10325c199f251f7cb2::19c2f392294a40aa915f9a47c207dbe8e471d111::007b1e6016c0e601e0c90cbffa7e29898bf82767::afb44f46c7b6a807ed17f504546256382c019fcc::7a599b54f771f4237948dbff7a3d3eaf4e0d7f1e::d22828663709c515562a3e6e55fc08af526452e7::7ab8fafed36b4eecbaeaaf841b0495461d7d3be5::d49f2b7a8ce938942cbb6db2404a37b8424abbf0::16ce285d146c35ec06d3895a0e7685ebc13cd5fb::fb2025350d4ba540716fb7f8690451de628e5440::12bbc5b2b4f709469620d81c276f4cf74c2de331::dc7f47d529c79ff9ca2636a674e3c83efe13ebda::23fb5306eeee621424040a8334211ef90ad4242a::b489dbf9e361c73397bd457edaae9fe3f0bc0479::741abc944b2466cb8c637e6499220979ca8df15f::3023363fff502487740bd0b83a3069320551ec96::b199a00aeafd445943ab8a88ea4233371a323481::bde50be377d92e0d80ecc5a630d39fe14d0986e9::6eee9e5368c4e8240b075cf38914bf7e0a986d7c::04dbecadc2971aafad09f981d441ee7ce590d34b::0ac16326d20e1ce8d0b3af363012b17a3c8b6086::28c63425ea88244850020f35e566cb48e5d7d291::bc67969b23657528bbaed684759ae34a46612bc7::31599eac2cc884501ba9feea08eaaa2fc9b84f2a::5fa23917157c63d6d0d196ac7c203641a346b032::756baf296b3cb3f7bc40d5843e259276695071ab::ffb702ca032af95753325544964b2bd348c75eb6::dc81805d954484e36f2d9c4f5bb6d0236b0dab7d::f58cc8eae93e0b29c59ade0bbe5f0a0b5e36263d::628e4c55fe5f31a094027cacdd264c39d79abeea::74b94de5e1cecfbd251f5ca9e3b9e4ab487f5264::656bc9a31d4e272df9bdb7d0d8895796f56bb0c1::d7b9eeaad73ba4f77d8fb1c4538af9d92a921fd0::41a8827e675ed75f1b019d9261e433a17787358b::748cc75705af6db3cca5e670c80e570fdb8c18c4::1822f952cd59aa410eabbac5f7040e2a32ab6095::f88d087f1574ce04fa6b08baaaca1f4ab9ae4a4b::116c23d1e6315e771ce97dcbef8a251f792576c9::cea55232dbcfa8fc5d4d8661747c404190adc047::6964b7d5655d3dd18d75b74abf44dc75cdd8c7fd::c8ddb617bd6a0b7566bbe96412e426443c4b782e::eed1e2568261172d99e9f3607cb379424f14f5b3::6f24aa29d6c2568cd0112d813fe18e519844d94c::9bfe0512dbd1304445d7afeb55a92a5ccbd7e10a::25a238706b0c351cd3d72d4325352d8cc6f3aa2a::1aef6ee6f14613e0df9cd54771cc82abb4252f9a::1df087fcd5b0594c40b936401df094f5a3db8f2b::3a00c6f54530d7d38415cd13ffb8339151307e13::f1c9af7bc6505fa3a29edcf5412203f268c4705b::e180249b937e32b2b871fd847e9016c6d48ed950::b6b65ff1faff7890670410dc53611244773b12ba::0f86846d6ae04a9193c0152966b527727335920c::47a60ea3fbbf22c09856a56823c6e110aeb983ac::928a0c65e0a2864cb249ae7c82e576113ae578cc::78169e1dbc2af3ccdf172a8a1892b488a85e379c::bb6861d4b74a34ac07be851ded2c53ec5a0d2ab9::8c169c4a445371d84b7fd1527c7ae49d714c3da9::605e25330910894ca05197a4f9f600bbc9a3870a::5657f5fb2cefdbc8e0f37c0aca6cd44f9c0f0c6c::f625f78a1f53895f340af9d8432788170f5477d1::8bcaa81ae70c5ba4a5fa5cf3fd4793c6a6f51f08::2922417b9aef1df192338c421ce821c02088db5b::eb92b6ceb23555e0da0739e9d9f78de6aa59e342::d40287d330ae1b70f26ded242399db3e20cfb0c7::7bc16e34ecdee39fe12ef2b73591dbc30f00233f::372f7a6128c5a806daf0e2e36932a0b06ab29886::7b912a02b7b386e14b5efc3453c18331f61aa065::5920d581172abbce5012e2471d4f3903c890e842::f83ca9a066f7010cca093cba902a12bbb335daa9::c9ff9d1e35abac3d9f326157934f9775feb8e05f::a8de5b312de5db11505d9f3073ccfcaeebd65b9e::e697e027cf46ac41ebf66e5230652d9697877ad2::45c5f4393eb1e81f4c1ee69e6988342e3a20f864::c2378611e24ba0fbf892e473a1b0a8e08ebb81b4::a432b367305a4b8285c74ba22a100c6c453b8136::64c7fa193fa16123b792c2ae464a5b152a3a128e::b2d915a84243f8ae6d320cf8457ab187698c1090::445423ddf95405b1ec9d8d10f9e74b1fc1e115f2::c2af3b6a22013f7c5c13a14d33c3328ca5b5aa95::315f51be28f9fdd4d27f117c505a5af8faf8c8f6::8cb48ab3e77b295729785baba139a92d87ff0b32::bc41bdabdc2dfb759e96a9884b068cf56b9b9280::fcb1afc245455130ca6d42db8760cc7b43b99d18::030ef7cdb7e4af7d0b2116462a03d7354c9c467d::569136bbd61d0f07c23086122a9754615f4dfb94::90c028bd5086ff94c666b74650ebd0332657616f::72e8b566b9f4ecbeaac23654fa439f11e6c1aa88::e8330c613ee3ae831a9980795375949839d248de::76a0b1028e312b6c3c00a50b4a09d68c23b5e713::7f46d2055c8e44d34f6e6cd5dadc8352e3ce0ec7::5e09ea06a640c0205f4c7db1f2b2205dcebd13de::96252c111478c38b7cffff9af4547d8199ecaf64::3d5a2019bcccc6fb01bee4811ca669f4383edb51::43862dd9959df157377d52950b1795bc104436d2::c3453658d316f4a37b9fe0cd3afa765f84057768::8ac5b94988f17d3a862631e363d3b8d8fc758625::3d2f340d65113d95d4ead7eccfa44e8f221d630c::10904667d5a9445131ecd18528d1f277b15bf587::a3216405e379fb944375a9d8dd9d6d81aa5c3d05::c8c58b1e73973929c46aec54f54ffa455547ca24::54c2d15d4963e3686b007920de1fef532f76883d::b0f221b4f3147f623664d7a3f52024642967b69d::6c6f335c68e5238e116d384092428b039d01ecb6::128ad1b2903fa7581732236699a5256a3cd780ff::96882f8bee007682105084b6b5e40bcd5350fab5::5655fce52c3b8f68580f643af0a8333c078a6efd::3576f95c89e7cc42c9bc3a8942e0db82e3411156::43d17bcde4ab150d469a4f6f7b1e72621f61a12b::839c124690cb38da0492956a538ad1fc19c05a73::89e494e7170be22459d9f45e363efe469d0212d9::e9c8d28eeac86c5c399e696e85475e658ae6c58f::f8ba3535d44482a1f0563c3448ffc0db9d7ca438::8c9dfe550c990b7f2bcba69be75047b82eeb7ae5::f244d8f53279efd755e7299418b408641baedc9c::3e1373a773085d5f19cb6a466ab2736cc1ca2713::72dc6d8c31067c6ae58e2832f2c44e019b2b954c::c7d816a9954702dc1aa6fdee7bc04b3bdbd50c09::68b1dadf8e6cb5c7f77edb025b8a1723952a067b::c6d8ccbaa33a0fb014b1a374124f9b480b776e7d::0ef8a244231c355cab7f4d032efed51ef5ddfe99::5a7b18700bc4f6646c3bf3a98ba6ae03925103b8::d043f918e7ad2c29f9464917fa9713cf419a53f1::4b128f945140d11830201921d1baa08f8f93f4cc::3ea9cae4287e222306027428676960dff08df14f::60d0aec7f97cfd0790f6d73f7a9ada16ee1245e7::24adefffbbd38ccdc239ead84f939f56202bea1c::c7d93fb58077c1f43967ad79f15f2ae4beec44dd::8133c0324176f8b51db9e14dbda81e61f623bbac::b1cae7351a0ed5a3b0057e1c881f236b5c2c71ef::a288afa3cf9e149fd997ab833e4b3b2f17a9e551::1772fb67128091131551931e53b10286dc61b311::cda64c834bb98a2213f57d57efc40afd6ca527ad::277be1e42b581b72ca3eb869deb32e372bc3bbc1::98237e5163ea093135936ae615cc80e213147a95::22e9a91189af2c4e6217a888e77f22a23d3247d1::c6a8e097046d9cd2b565664748bb180714103429::276a0e3fe6a01d297feba5f23f2856305fa0680d::0a2ddeadb18abfd76185e7ee0341cd3a6c6041f5::5006b63ae3609aee86c4dae603d8dfe80230b1b1::787454815b9b6a3a8283065d5e9036209902cec1::ffdc7abe28d15154e1e2e45f366bef9d6689eac9::e5220a6ef6c6a57f28b89b88d9dbfd076076d253::174bf4632381495bb5135ed66e22b71acf21f2bb::6413eb4b9c9425b1b3469f57320ef3f9edcd6e44::0769465cb8640d21d0c9153bb5501563ec3895b9::1a12beeba12d9eaac233e7d38b265b71a8623289::8f7651102daf4eda1d3020f345bd2730ee48915d::a44feedc8aaf861830b39b855b510fdefc395195::ae0d952fe40e2d4b7f897c263dd83066d98fe7d3::54720808b417d3379d3d10e3337f467f4c91ec1b::6ed0f63398ba7268c541f9b959f7a56b68584301::7caceee449c1a02ce86ce6586234a9c5653ecfea::4588b62e268f35fe253a65911150cd92f397da40::dde8d7bac5aa2a84af0b329f011c6f13d709fae0::abec22e01d90d0da2b717d2330928c71ed6fe634::890cfcf3775767464639aecbe6754607c0ed30dd::14f635a066fc728ff388760fa3559c0185460bdc::0690f6f3a47b8fddf60ac57da006f0b8bfa22e32::eeabe79328e6bbfb7faca98ccbfc5eca92cc2e60::31b788226d7b8d2215c68663e2d8d6d80eef29af::c8b84431748d6585edf56d35d8d6e5c9b301f5e0::64a2cbf50484033465add3a3f0eb6867e4849400::455678550a8af96f25b2e779d0c3e977d2c7b32e::31f674a2b1717ca8eb068c51c50d786b4a8a7619::27a0c137d00e774bf22050d4cfd952e9ab4362ac::dfa7a76de8c1f7af0ef28119f9ac3072057c665e::abb1c9b0c7280a145be01db3409ef723607aa0ec::5c2f77f0878d305a5a53915dd1963a915e7de184::7b6bab0d786fd09768c336771661f5c58dacc450::958be0e7cc2571b2f57ec62491dc4ded74d29424::7c4bfe1c954ef90acf4f790e46fcbbd07d85af3e::aefa69973b3e21042be9159bd5bc3a128666837f::59bf23cb0a7b4fab663d0c6bb42ca34e54e324e5::9bcf0f0d61dfa70de0cae14c95b2cc8304a541d7::3e88b9ed0e706906fb4aafe1ea85f990b4f42f48::2082bc7040a9d8d3132f8e90171995bd4ee53123::11365dc46ced97087a1546fcb34695c134e5dc44::49447a3d0fc86a0c73f5dfcebce74896e8f333a5::1ad84bf6aa5358e28656bd685fe8c5baff7253ff::b1e30b3da11d850368b34d62c5ecae9146229e32::1a9d267f905b4766b041f55ca2223f4790902a52::27f89ecf18f571b663730163d6a6b17604ff2e03::39a67ce474a16f0dbaf0b01bc8a69e64ae68fe54::1d94fa0de3fdc8d2dbc60aacdd168a4f2dea146e::86746d84ff9cf8faaf5040e71350f0798189b304::f699a69b401777cfd13d99967cb99216271d23c0::0dc6ebc6220b8f371e76b705e5bcdc57de0e0b6c::8ba374454cf38a8995439ddf2321aa661f2ff382::4c809df11074396ae6b95d88192b7b26f25947a3::695af7d32f5e38788177f746f23ff54e7d56845d::136cbcabc6dd14d4f199f8a1bb95764fb26deb22::5b1f2e9311236a0d824ead0d9e34edf3c9dedfed::5de6ef8fff7df27ec3d6043b3c6d1ea154f1dc5d::eca26254724a4aa2cb228a3d31cf8344cd32e42a::08e528d1bb0749422b3743c9743b8fd1a91d35a4::c5ab3508c7b740af4dac766e01a0e2819f66117b::9e5cab22a532491fd009697013b27e577fe9c7b3::2bba2e1255d9e82fb85e04a9052f1d9f157b1c3c::3e006d5076a393c827fba69bf72bc36b7abf921b::5d2b1e908461557c027d0c05edceefef7269fe86::e8709aef56d46c9b597af05ebd847309231a888c::42c5d814acc80ac433ff33f394181af28039b07d::a7da19acadf32fcaaddf707ac79d1fefb6a9c50d::e26c571b383a0bce47b0ed01437f8df721d4d3ec::818b5ec8bf6625c2ada4bd0ce00a4905989d7e34::a5535544004d48ee979117c77ee6e4fe4240f958::3ea18d68f7aed88dba31b5a130ccff25a62a794e::e741d4df09927fec808ed5ffbb143766ddb41196::999bed074e915216d97b4b1eef9e10df61cbd3b5::81037393605dd6bb8062d4e3c18d5c5de3869ba5::
https://api.github.com/repos/rails/rails,16277,accosiation_key_as_proc::master,0,closed,activerecord::,"Sometimes you need the power of eager loading with `includes` to avoid N+1 queries, but primary key for link is not just a column value. Current implementation forces us to write a method, which fetches relation for each item if key for fetching isn't simple value. I suggest to give a possibility to specify arbitrary key-values for loading with `includes`: - you define a proc which accepts an instance - this proc returns keys (ID's), one or many, of linked rows in another table - they will be fetched altogether if `includes` is used further I think, this is more flexible in comparison with just a column name anyway. Of course, joins becomes impossible for this case, and I raise in this case, but you can always specify multiple relations (one for join, another for include) if needed. P.S. The example given in tests I provide may look obscure, but imagine another use case: - you have a hierarchy of tags bound to to things - you need to fetch tags (flat) based on criteria - each tag should have a group of things that are linked either to this tag, or it's it parents (which id's are stored in ancestry). I'd like to provide this in tests but tags haven't neither parent_id nor ancestry, and I used Comment instead If you like this I will also submit a backport for 3.2 (for which I developed this actually :) )",036090f8a5dacfc24c1c77fc65d932e1de79d223::
https://api.github.com/repos/rails/rails,16181,ora972_faces_41::4-1-stable,0,merged,,This pull request backports #16167 to `4-1-stable`.,c5ab3508c7b740af4dac766e01a0e2819f66117b::
https://api.github.com/repos/rails/rails,16166,autosave_stack_level_too_deep::master,0,closed,,"As title suggests, when `autosave` is used in associations with `inverse_of:` set on both sides of the relationship, it throws a `SystemStackError: stack level too deep` error. This error happens on master, 4.1, 4.0 and 3.2. Let me know if you would like me to backport it to other branches (in case the commit can't be cherry-picked) once this master version is OK'ed. Minimum reproducable gist: ``` ruby source 'http://rubygems.org' gem 'rails', github: 'rails/rails' gem 'rack',  github: 'rack/rack' gem 'arel',  github: 'rails/arel' gem 'sqlite3' ``` ``` ruby # uncomment for master require 'bundler' Bundler.setup(:default) # uncomment for releases # gem 'activerecord', '4.1.4' # gem 'activerecord', '4.0.8' # gem 'activerecord', '3.2.19' require 'active_record' require ""minitest/autorun"" require 'minitest/pride' require 'logger' ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:') ActiveRecord::Base.logger = Logger.new(STDOUT) ActiveRecord::Schema.define do create_table :users, force: true do |t| t.integer :super_power_id end create_table :super_powers, force: true do |t| end end class User < ActiveRecord::Base belongs_to :super_power, autosave: true, inverse_of: :user end class SuperPower < ActiveRecord::Base has_one :user, autosave: true, inverse_of: :super_power end class BugTest < MiniTest::Unit::TestCase def test_autosave super_power = SuperPower.new super_power.save! user = User.new(super_power: super_power) user.save! assert_equal true, user.save! end end ``` I believe this also fixes #14030 - seems like it's the same issue, but this fix is a lot simpler. cc @tenderlove @rafaelfranca @zzak Not sure for exact reason, but I think `next` is discouraged, possibly due to performance issues. Consider changing this to `unless reflection.inverse_of && reflection.inverse_of.options[:autosave]` with following lines inside that block. ::Also, won't this mutually disable _both_ sides from autosaving, whereas only _one_ should be disabled? ::Thanks, I have just come up with a new reproducable gist so I'm looking into this. :) ::",d242583c71d26e2285884dacbe97c552e759255a::
https://api.github.com/repos/rails/rails,16127,fix_16111::master,0,merged,,"Fixes #16111. See it for more information. For example, if I use pgcrypto extension in PostgreSQL 9.4 beta 1, where uuid-ossp extension isn't available for moment of writing, and thus required to use a gen_random_uuid() method as a primary key default. In this case schema dumper wasn't able to correctly reconstruct create_table statement and lost primary key constraint on schema load. If I create migration in PostgreSQL 9.4 beta 1 as: ``` ruby enable_extension 'pgcrypto' create_table ""pg_uuids"", id: :uuid, default: ""gen_random_uuid()"", force: true do |t| t.string ""name"" t.uuid   ""other_uuid"", default: ""gen_random_uuid()"" end ``` Schema dumper currently dumps it as this: ``` ruby create_table ""pg_uuids"", id: false, force: true do |t| t.uuid   ""id"",         default: ""gen_random_uuid()"", null: false t.string ""name"" t.uuid   ""other_uuid"", default: ""gen_random_uuid()"" end ``` Instead of this: ``` ruby create_table ""pg_uuids"", id: :uuid, default: ""gen_random_uuid()"", force: true do |t| t.string ""name"" t.uuid   ""other_uuid"", default: ""gen_random_uuid()"" end ``` What about to also backport it to 4-1-stable? maybe it better to place it inside the test that use it ::I meant it own test , something like `def test_schema_dumper_for_uuid_primary_key_with_custom_default` then you can drop the function at the end of the test with the ensure block ::In this case it will look monstrous, as function must be defined before table creation: ``` ruby def test_schema_dumper_for_uuid_primary_key_with_custom_default # Create custom PostgreSQL function for generating UUIDs # to test dumping tables which columns have defaults with custom functions connection.execute <<-SQL CREATE OR REPLACE FUNCTION my_uuid_generator() RETURNS uuid AS $$ SELECT * FROM uuid_generate_v4() $$ LANGUAGE SQL VOLATILE; SQL # Create such a table with custom function as default value generator connection.create_table('pg_uuids_2', id: :uuid, default: 'my_uuid_generator()') do |t| t.string 'name' t.uuid 'other_uuid_2', default: 'my_uuid_generator()' end # Test it itself schema = StringIO.new ActiveRecord::SchemaDumper.dump(connection, schema) assert_match(/\bcreate_table ""pg_uuids_2"", id: :uuid, default: ""my_uuid_generator\(\)""/, schema.string) assert_match(/t\.uuid   ""other_uuid_2"", default: ""my_uuid_generator\(\)""/, schema.string) ensure drop_table 'pg_uuids_2' connection.execute 'DROP FUNCTION IF EXISTS my_uuid_generator();' end ``` So I personally would prefer to keep function and table creation/destroy in setup/teardown blocks. Will now extract testing in separate method. ::That a clean test that don't leak IMO. cc @sgrif , @senny ::I think it's fine in the setup here; it's a small enough test case anyway. This arrangement also seems to make it easier to contrast the behaviours between the two similar tests. Tests that do a bunch of setup/cleanup for themselves don't feel as consistent with our fixture-based testing style, IMHO. ::I'm also :+1: on setup here. ::",584fc8b33b66aa47b2ecabedbdca7c66f16653d7::
https://api.github.com/repos/rails/rails,15915,backport-av-raise-missing-translations::4-0-stable,0,merged,JRuby::actionview::,"If I recall correctly, it disappeared from `3-0` and was missing ever since, restored back in `4-1`. This PR backports @kassio's [commit](https://github.com/rails/rails/commit/433628a45c2f5dd04b115af1b5579dac75255c67) from `4-1` to `4-0`. Would be great if we could pack this in `4.0.6` release. /cc @tamird",2d3a3ff176c129882bb1a6a430c5ffeea57c129b::
https://api.github.com/repos/rails/rails,15910,fix-name-error-name-bug-4-0::4-0-stable,0,merged,,Backport of #15764 and #15902 to _4-0-stable_ branch. That was a Ruby breaking bug so It should be backported.,61a73c21d8bef2e54d06d7e5639bf5fc9079ba44::
https://api.github.com/repos/rails/rails,15909,fix-name-error-name-bug-4-1::4-1-stable,0,merged,,Backport of #15764 and #15902 to _4-1-stable_ branch. That was a Ruby breaking bug so It should be backported.,4588b62e268f35fe253a65911150cd92f397da40::
https://api.github.com/repos/rails/rails,15898,backport_11912::4-0-stable,0,merged,,"This should be backported to 4-0-stable IMO, but I guess it is to late to 4.0.6 , and as this is not a new regression I would not include it in 4.0.6 , We can merge in 4-0-stable and release this with 4.0.7 . [fixes #15896] review @rafaelfranca",703452cce2dbb70b7c63fe7fe758da641010c150::
https://api.github.com/repos/rails/rails,15805,allow-both-keys-to-be-symbols-or-strings-in-reflection-cache::master,0,closed,activerecord::,This fixes an issue where when #14675 was implemented or shortly we nuked the ability to accept symbols as strings. There were no failing tests because they were changed to accept strings instead of symbols. I added some regression tests that test both associations and the reflections cache accept both string and symbols as keys. :smile_cat: This caused tests that used symbols to fail (of course). After a lot of trial and error I found that `with_indifferent_access` seemed to be our only course of action. I know this is not ideal and it's not generally preferred. I'm open to other ideas. If accepted I have a branch ready for 4-1-stable as well to fix #15671 (additional work needed to be done and a simple backport wasn't going to work).,b38e9effd5e8e3037cf8b44373c2ae260f88cc7b::d887b896bb344026c52521a840eec3ef5ec37759::
https://api.github.com/repos/rails/rails,15753,fix-issue-15671-string-based-keys-dont-work-on-nested-associations::4-1-stable,0,closed,activerecord::,"This was fixed on master by #14675 but could not be backported because when the branch was made `_reflect_on_association` didn't exist so grabbing those changes would leave `_reflection_on_association` with the same issue. This fixes #15671 - where string based keys don't work on nested associations. could you normalize `name = name.to_s` at the beginning of this method and thus not have to worry about missing the casting in some lines? ::Because this is adding in something on master into 4-1-stable I don't want to refactor in this branch. I definitely will look into refactoring master though. ::Does the second `name` here need a `to_s` as well? ::Yup, good catch @matthewd :smile_cat: ::@arthurnn #15210 and #15300 disagree on this being a symbol vs string. Should we be changing this? If the point of the new `reflections` is to maintain the 4.0 interface, I guess we should stick with symbol... and do so in master as well. The stringification (of what is now `_reflections`) in #14675 was predicated on the fact that we could freely change it because it's internal. Alternatively, there's always HWIA... :confused: ::@matthewd @arthurnn I thought changing that was weird. But when I added that last `name.to_s` that I missed THAT test started failing which is what led me to look at master again. Perhaps that test and that last name should be switched back (all the tests pass in that case). If that works I'll re-push those changes and open a new one to fix master as well (tests pass there too with those updates). Let me know your preferences here. ::",b7830e57dd3932a294f940df0573a3fca709cc45::670cbd0d5ba7c00c49e0f926237cccb2a46d3cf2::
https://api.github.com/repos/rails/rails,15452,live-abort::master,0,merged,,".. even when the producer is blocked for a write. This is an alternative take on #15410. It still needs tests, and would need to look moderately different to be backported: lose `ignore_disconnect`, and make `ClientDisconnected` subclass `IOError` (and kill the comment explaining why it doesn't :wink:). Anyway, in my testing, it does seem to solve the problem, without repeatedly waking up the producer when it's blocked. /cc @tenderlove @njakobsen The first ""the"" should be ""that"" here, no ? ::",6a89850dfe1e8c8331fd8482525aa4b9b2530cad::
https://api.github.com/repos/rails/rails,15451,fix-regression-for-dup::4-1-stable,0,closed,activesupport::,"The PR #14518 just added the following regression to `HashWithIndifferentAccess#dup`: ``` ruby hash = ActiveSupport::HashWithIndifferentAccess.new({ a: { b: 'b' } }) dup  = hash.dup dup[:a][:c] = 'c' hash[:a][:c] #=> ""c"" # it was modifying the original hash too dup[:a][:c]  #=> ""c"" ``` Just reverting #14518 and backporting 03f35a27dc88335550ca0ab1d21e46948c9f5093 solves the problem. It now behaves as expected: ``` ruby hash = ActiveSupport::HashWithIndifferentAccess.new({ a: { b: 'b' } }) dup  = hash.dup dup[:a][:c] = 'c' hash[:a][:c] #=> nil # does not modify the original hash dup[:a][:c]  #=> ""c"" ``` Also I added a regression test (that shall be cherry-picked to master, maybe?). cc @rafaelfranca @robin850",bb8199ca2d60354be868a6131f7d0f1e7e8547f0::3d98020f9d156e97cf143546164667db58865528::3949b43e3b8a7533dd42f870ec47ef9eead1ba4c::
https://api.github.com/repos/rails/rails,15286,backport_14992::4-1-stable,0,closed,,"cc #14992 Was this backported? It should not ::@rafaelfranca This was the only conflict, do we not backport `CHANGELOG` entries? ::We do, but I think the code that changes the status of this rake command is not present at 4-1-stable. If it is we should remove since it is a change in behavior. ::Seems like it's just a bad merge. The original commit did not include this line https://github.com/fredwu/rails/commit/f045663dfc879b9516904255fb555f048c394b7b ::",31437f91f44eee7d5627525116cdd48d69b457f5::
https://api.github.com/repos/rails/rails,15090,fix_assert_redirected_to_41::4-1-stable,0,merged,,backport #15084 to fix regression added on 4.1.0 review @pixeltrix,b199a00aeafd445943ab8a88ea4233371a323481::
https://api.github.com/repos/rails/rails,14995,habtm_relation_size_calculation_fix-4-0-stable::4-0-stable,0,merged,,"HABTM should not include new records as part of #count_records as new records are already counted. This addresses #14914 for the 4-0-stable branch, and is a different approach to #14969 which addresses the same issue. cc @rafaelfranca @bigxiang P.S. A different fix for master which can be backported to 4-1-stable: #14992. This seems an unrelated change, can you create your test without it? ::It is actually related to one of the newly added test: ``` diff +  def test_habtm_collection_size_from_params +    devel = Developer.new({ +      projects_attributes: { +        '0' => {} +      } +    }) + +    assert_equal 1, devel.projects.size +  end ``` ::Yes, but you could build the developer record and the project record and associate them, wouldn't that work the same? ::Yes and no. The PR for master demonstrated  that building from params and from build are different. For 4.0 even the behaviour is the same, given the different API it'd still be a good idea to have the coverage IMO. On Thursday, May 8, 2014, Carlos Antonio da Silva notifications@github.com wrote: > In activerecord/test/models/developer.rb: > > > @@ -19,6 +19,8 @@ def find_most_recent > >      end > >    end > > -  accepts_nested_attributes_for :projects > > Yes, but you could build the developer record and the project record and > associate them, wouldn't that work the same? > > — > Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/pull/14995/files#r12407871 > . ## Regards, Fred Wu Web Developer and Designer http://playup.com/ http://fredwu.me/ http://twitter.com/fredwu http://www.linkedin.com/in/wufred http://github.com/fredwu ::Sorry, I still don't see the need for the nested attributes, if you are testing the count behavior. Does the behavior differ if you build the records and set them, and if you use nested attributes like that? If so, then I'd definitely agree with you that we will need coverage on that area, otherwise I am all about not adding extra code just for the sake of adding it. ::On 4.0 AFAIK the behaviour is the same (or the bug does not manifest to it), but on 4.1/master the behaviour differs. Personally I still believe it's worthwhile to have the extra test given 4.1/master has the regression, but I'll remove the nested attributes from this PR so we could move on. :) ::Done and force pushed. ::Please take a look at #14992 while I have you here. ;) That one actually does need the nested attributes test as it itself was the regression. ::",9d4e2ab2cf01cef4127dea2e443688f809f3f785::
https://api.github.com/repos/rails/rails,14992,habtm_relation_size_calculation_fix::master,0,merged,,"HABTM should fall back to using the normal CollectionAssociation's size calculation if the collection is not cached or loaded. This addresses both #14913 and #14914 for master. If I didn't break anything and if everyone's happy with the change, I will backport this to 4.1. cc @tenderlove @rafaelfranca @carlosantoniodasilva @senny P.S. This fix was done independently to #14969. A different fix for 4-0-stable: #14995.",f045663dfc879b9516904255fb555f048c394b7b::
https://api.github.com/repos/rails/rails,14910,cache-key-fix::master,0,closed,activesupport::,"[`retrieve_cache_key`](https://github.com/rails/rails/blob/ca20037899e55ddf734b727454a3180bebf82212/activesupport/lib/active_support/cache.rb#L91) handles the `to_a` case, but [`expanded_key`](https://github.com/rails/rails/blob/ca20037899e55ddf734b727454a3180bebf82212/activesupport/lib/active_support/cache.rb#L512) currently doesn't. This means if you pass an ActiveRecord::Relation into Rails.cache.write (at any depth), it doesn't properly extract the cache_key, instead just calling `to_param` on each object, which is (by default) just the ID, and therefore the key-based expiration is broken. This bug [breaks caching in jbuilder](https://github.com/rails/jbuilder/blob/788981134defbde34e94d32eea0c02178bb772a5/lib/jbuilder/jbuilder_template.rb#L53), among other things. Is there any reason we can't make a few small modification and just call `ActiveSupport::Cache.expand_cache_key` directly instead of duplicating this logic? This can be backported to 4.0.x, I'll wait for any feedback before doing that.",3de949d91cf15599de8f53f34f1e45b43f02cabe::
https://api.github.com/repos/rails/rails,14727,patch-17::master,0,merged,,"Hello, This is just a tiny patch that adds a changelog entry for #14546. Also I'm wondering if the mentioned pull request should be backported to the `4-1-stable` branch ? Have a nice day.",5d5beccc8ce0e844dca3ebac6e0ec8dd3fcc1b91::
https://api.github.com/repos/rails/rails,14668,source_option_with_string_value::master,0,merged,,"With the changes introduced by 16b70fddd4dc7e7fb7be108add88bae6e3c2509b it was expecting the value to be a Symbol, while it could also be a String value. The solution was call `to_sym` on the given `:source`. Fixes https://github.com/rails/rails/issues/14651 This PR should only be backported to `4-1-stable` can we do this inside `source_reflection_name` method? ::",a91e5ff2cbf2f8971ad0d2a80b2e22e63b1900f6::
https://api.github.com/repos/rails/rails,14581,4-1-stable-backport-14532::4-1-stable,0,closed,,"Since #14532 was a bug fix, backport it into `4-1-stable`.",0569bf70bffa836a25640ce577ddddd2e5913a22::038fe319abbac944bf05682c4872dfc45448b1da::
https://api.github.com/repos/rails/rails,14580,4-0-stable-backport-14532::4-0-stable,0,merged,,"Since #14532 was a bug fix, backport it into `4-0-stable`.",53a5f36762c238d17ced0d8b26b4cce60e2cb51a::48f106555a7123813ba5d0c1d3df0391fb764ea2::
https://api.github.com/repos/rails/rails,14569,sqlite_relative_deprecated::master,0,merged,activerecord::,"@rafaelfranca as discussed. I think. :smile: Was the deprecation warning implemented? I could not find in the diff ::For anyone else reading this: The PR contains two commits; the first introduces the deprecation while maintaining the historical behaviour, the second then removes the deprecation and changes to the new/desirable behaviour. Obviously, only the first one should be backported. ::",f846828dae77696daea3bafd91a25a62977be481::0a99fddc140d8aa54a8922e745624a250877658b::
https://api.github.com/repos/rails/rails,14348,use_teardown_helper_method_for_active_support_adapters::master,0,closed,,"Related to https://github.com/rails/rails/pull/14332#discussion_r10416015 This is considered a cosmetic change. Our [contribution guide](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html) states: > Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted. This is to preserve git history and make backporting easier. Can you undo that change? ::removing the superfluous require is fine but the quote change is the same as https://github.com/rails/rails/pull/14348/files#r10464016 ::Opps missed that :P Are removing blank lines fine? ::no need to use `teardown do` if `super` is already being called. ::same as https://github.com/rails/rails/pull/14348/files#r10464486 ::",0f6f54184005ea9ab2610bf75267b1ead3b1b5bd::
https://api.github.com/repos/rails/rails,14326,backport_14318::4-1-stable,0,merged,,backport https://github.com/rails/rails/pull/14318 to 4-1 . I am 95% that this fixed the mailer issue on travis. travis is now failing randomly for another reason: ``` 1) Error: MemCacheStoreTest#test_deserializes_unloaded_class: ArgumentError: key cannot be blank ``` So we should backport this to 4-1-stable. cc @pixeltrix,3ac2aeadb4aacbae3f6bc7a08c1841ccc2f468b1::
https://api.github.com/repos/rails/rails,14236,4-1-stable::4-1-stable,0,merged,,"@tenderlove asked me to backport @schneems to 4-1-stable, so this will make it into the next release.",43d096ee7bfa73a9f082f218c2b87f5fff310520::
https://api.github.com/repos/rails/rails,14210,bcrypt_gem_rename_4-0-stable::4-0-stable,0,merged,,"@carlosantoniodasilva This is the same as https://github.com/rails/rails/pull/14149, but backported to `4-0-stable` (that original PR was already pulled into `4-1-stable`). Without the backport, anyone on 4-0-stable will get an annoying post-install message: ``` ####################################################### The `bcrypt-ruby` gem has changed its name to just `bcrypt`. Instead of installing `bcrypt-ruby`, you should install `bcrypt`. Please update your dependencies accordingly. ####################################################### ``` No functionality is changed, so it should be safe to backport to save users the trouble.",085372ef7e4e75379700ebd2abf544900fd4b267::
https://api.github.com/repos/rails/rails,14179,14171_backport::4-1-stable,0,merged,,backport #14171 to 4.1 review @guilleiguaran,b2d19a539f542ee10da6414bdc5a3ee6ee2f90bd::
https://api.github.com/repos/rails/rails,14078,hstore_arrays_fix_4_0::4-0-stable,0,merged,,This backports #13512 to the `4-0-stable` branch.,d96d7e80c6e261fb8f2b9652dff62c72557ef22c::
https://api.github.com/repos/rails/rails,14072,patch-16::master,0,merged,,"Hello, this is just a tiny pull request that adds a changelog entry for #13981 and #14035. I don't know if I'm wrong with the proposed description and if it's enough so let me know if I should change anything. Also I think that we should backport this to 4-0-stable since the mentioned pull requests were too. Have a nice day.",0c63fbcdf131dddf696248498e87c0513b43daca::
https://api.github.com/repos/rails/rails,13955,4-0-stable::4-0-stable,0,closed,activemodel::,"This bug breaks Rails 3 behavior that is noticeable for upgrading apps. I think it should be backported into the next Rails 4.0 release. I have reapplied all changes onto 4-0-stable, all tests are passing. is this change necessary? If it is a presence validation why the if method is checking the presence too? ::This is a good question. Actually, I am able to remove this validation entirely without any tests failing. /cc @nettsundere @guilleiguaran ::These rules have quite a long an interesting history – we unwound some one these changes in #13772. At this point I'm not sure what's considered bugs/breaking changes for these rules anymore. Not sure about back-porting this to 4-0-stable. ::To answer your specific question – checking the existence for `password_confirmation` is probably not necessary for this validation, but `password.present?` is, otherwise you won't be able to save a record with an existing (digested) password due to password confirmation not being present. This is part of the reason why I don't think we should cherry pick a particular snapshot of this and backport that to address a particular problem. Multiple attempts has been made to fix different individual problems with these rules and most of them ended up causing other problems. Cherry picking one of these fixes is probably unsafe. ::Actually - nvm, they are both necessary – checking that `password_confirmation` is not nil fixes the particular bug you are referring to (when `password_confirmation` is nil it should not check for its presence). See, this stuff is hard :P ::O_o why not? Is not this the whole point of a presence validation? Sent using mobile Gmail On Feb 6, 2014 2:35 AM, ""Godfrey Chan"" notifications@github.com wrote: > In activemodel/lib/active_model/secure_password.rb: > > > ``` > >        validates_presence_of     :password, :on => :create > > ``` > > -          validates_presence_of     :password_confirmation, if: lambda { |m| m.password.present? } > > -          validates_presence_of     :password_confirmation, if: :should_confirm_password? > > Actually - nvm, they are both necessary - checking that > password_confirmation is not nil fixes the particular bug you are > referring to (when password_confirmation is nil it should not check for > its presence). > > See, this stuff is hard :P > > ## > > Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/pull/13955/files#r9489961 > . ::Thanks for your response. I'm very certain that this is a breaking change/bug. The previous and current documentation clearly states that password confirmation is an optional feature. > If you don't need the confirmation validation, just don't set any value to the password_confirmation attribute and the the validation will not be triggered. But it was broken in Rails 4.0. I think either that should be fixed or Rails documentation updated. ::@rafaelfranca Because the docs said so :p > If you don't need the confirmation validation, just don't set any value to the password_confirmation attribute and the validation will not be triggered. This allows you to have the option to require the password confirmation or not – if you have a password confirmation input, the form will send that field and you'll get an empty string, and this validation fires; if you don't that, don't include the input in the form, and it'll be `nil`, and the validation won't fire. This is not the right implementation though. When this behaviour was originally documented, it was handled by the  `validates_confirmation_of` rule (because the rule only fires when the confirmation is not nil). ::@semaperepelitsa I agree the behaviour is undesirable, I just don't know if cherry-picking this individual fix out from all the other ""fixes"" we applied since 3.2 is a good idea. ::To be clear, I am okay with fixing this individual issue on 4-0-stable, because it clearly disagrees with the docs – if there is a safe way to do it without accidentally introducing other bugs. I'm not sure if this (cherry picking the diffs out of that other PR directly) qualifies, because of the aforementioned history and complexity. It could be, I'm just unsure at this point, and I suggest that we need to proceed with caution. ::Sorry for the lack of updates! I am still pretty busy at the moment finishing some higher priority PRs (that blocks 4.1). I'll give this some more thoughts once that's out of the way and get back to you :) ::OK, thanks for looking into this! ::",41cb3b7ea4118615f9ef161d063cbefcac22c3e7::
https://api.github.com/repos/rails/rails,13921,fix-response-flatten-infinite-recursion::master,0,closed,actionpack::openacademy::,"This was causing problems for RSpec users (see [this comment](https://github.com/rspec/rspec-rails/issues/601#issuecomment-33885030)) since rspec-expecations has a place where it uses `Array#flatten` on an array containing objects passed to RSpec by users, and if that array contained a rails response, it would recurse infinitely. It would also be nice to backport this and get it in upcoming patch fixes in whatever other recent versions suffer from this problem. I traced the commits and seems like this is here to support custom splatting (`status, header, _ = a_response`), so  we can't just remove it. Looking at rspec/rspec-expectations#166 and rack/rack#419, it seems like the issue is that the return value of `to_ary` should not contain `self`. Is it possible to fix this in a similar fashion as https://github.com/rack/rack/commit/5b251a986962f3577e14c01a698fab9dd21383ba instead? ::cc @josevalim ::Hmm, would have been nice if there was a test showing the splat behavior, so that I knew `to_ary` wasn't needed.  The fact that removing it broke no tests suggested that no public APIs relied upon its presence.  Do you consider the custom splatting to be a public API given that there were no tests for it? If so, I can add a test for that and look into an alternate way to fix this.  I honestly expected to have to do a more complicated fix; removing `to_ary` was just the first attempt and then it happened to worked. ::",b5ca1bb6adfa6de3a8a268289b15ebcbaea852a0::ed6f1fa00bff67d122e58804e7e863bd3da2d81d::
https://api.github.com/repos/rails/rails,13862,4-0-stable::4-0-stable,0,closed,actionview::,Add a config to setup whether raise exception for missing translation or not. This is a [backport](https://github.com/rails/rails/pull/13832).,3484a1aaeb73837ae7cfa75f86c411ed1e94bed5::
https://api.github.com/repos/rails/rails,13836,issue-13830::master,0,closed,actionpack::,"Hello, This is just a little pull request that makes `#extract!` keep the `@permitted` value when calling on an `ActionController::Parameters` object. Previously, it was relying on its superclass' (i.e.`HashWithIndifferentAccess` which is inheriting from `Hash`). Let me know if you want me to do any backport to the strong_parameters repository. Fixes #13830. Have a nice day.",021969a953d2232d662c7fbc7e6d8209d59f02e9::
https://api.github.com/repos/rails/rails,13834,3-2-singleton_class::3-2-stable,0,closed,,This is a backport of https://github.com/rails/rails/pull/12532 to Rails 3.2 I think you forgot the `private` keyword. ::@frodsan it's still there. ::I was thinking in something like this: ``` ruby unless respond_to?(:singleton_class?) def singleton_class? ancestors.first != self end private :singleton_class? end ``` ::@frodsan but it's already marked as `private`: https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/core_ext/class/attribute.rb#L111 Do you want me to remove https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/core_ext/class/attribute.rb#L111 and add `private` as you've suggested? ::,643ef3b968e0d586dd6171d2d4e807f1569c4cad::
https://api.github.com/repos/rails/rails,13811,issue-13810::master,0,merged,,"This fixes an error which raises up when in a Rails app `config/routes.rb` is mounted a `Rails::Engine` with empty routes, f.e.: ##### Rails app `lib/my_engine.rb` ``` ruby class MyEngine < ::Rails::Engine ; end MyEngine.routes.draw do ; end ``` ##### Rails app `config/initializers/my_engine.rb` ``` ruby require 'my_engine' ``` ##### Rails app `config/routes.rb` ``` ruby Rails.application.routes.draw do mount MyEngine => 'my-engine' end ``` ##### Rails app `rake routes --trace` ``` $ rake routes --trace ** Invoke routes (first_time) ** Invoke environment (first_time) ** Execute environment ** Execute routes rake aborted! comparison of Fixnum with nil failed /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/actionpack-4.1.0.beta1/lib/action_dispatch/routing/inspector.rb:183:in `each' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/actionpack-4.1.0.beta1/lib/action_dispatch/routing/inspector.rb:183:in `max' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/actionpack-4.1.0.beta1/lib/action_dispatch/routing/inspector.rb:183:in `map' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/actionpack-4.1.0.beta1/lib/action_dispatch/routing/inspector.rb:183:in `draw_section' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/actionpack-4.1.0.beta1/lib/action_dispatch/routing/inspector.rb:163:in `section' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/actionpack-4.1.0.beta1/lib/action_dispatch/routing/inspector.rb:105:in `block in format' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/actionpack-4.1.0.beta1/lib/action_dispatch/routing/inspector.rb:103:in `each' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/actionpack-4.1.0.beta1/lib/action_dispatch/routing/inspector.rb:103:in `format' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/railties-4.1.0.beta1/lib/rails/tasks/routes.rake:6:in `block in <top (required)>' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/task.rb:236:in `call' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/task.rb:236:in `block in execute' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/task.rb:231:in `each' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/task.rb:231:in `execute' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/task.rb:175:in `block in invoke_with_call_chain' /.rbenv/versions/2.1.0/lib/ruby/2.1.0/monitor.rb:211:in `mon_synchronize' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/task.rb:168:in `invoke_with_call_chain' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/task.rb:161:in `invoke' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/application.rb:149:in `invoke_task' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/application.rb:106:in `block (2 levels) in top_level' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/application.rb:106:in `each' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/application.rb:106:in `block in top_level' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/application.rb:115:in `run_with_threads' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/application.rb:100:in `top_level' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/application.rb:78:in `block in run' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/application.rb:165:in `standard_exception_handling' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/lib/rake/application.rb:75:in `run' /.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/rake-10.1.1/bin/rake:33:in `<top (required)>' /.rbenv/versions/2.1.0/bin/rake:19:in `load' /.rbenv/versions/2.1.0/bin/rake:19:in `<main>' /.rbenv/versions/2.1.0/bin/ruby_executable_hooks:15:in `eval' /.rbenv/versions/2.1.0/bin/ruby_executable_hooks:15:in `<main>' Tasks: TOP => routes ``` Mind ending the sentences with `.`? ::I agree with @dmathieu that using `.max || 0` might be more intention revealing. ::Please remove extra space here. ::You can use 1.9 style hash: `as: ""blog""`. ::I wanted to do it, but then I noticed that it would be the only 1.9 style hash of ~20 occurrences in all the file... maybe is it better to replace them in the whole file? ::nitpick, but can you add a `.` at the end: ``` Fixes #13810. ``` ::@mdesantis we decided to migrate step by step to `1.9` hash syntax. We don't change whole files to preserve git history and keep it easy to backport. However when code is changed anyway we use the new syntax. :::ok_hand: I'll edit this too ::Oh that line too, ok ::",c1f8a0d61409b6c9fa16847b0ecf694cc4d4cecf::
https://api.github.com/repos/rails/rails,13617,error_var::master,0,merged,,"Pretty small, but it could cause :bomb: behaviour if not there. Also, need to backport to 4.0.0 review @guilleiguaran @rafaelfranca",f3748c886a609938549fb5bf6bbe7e3d12529952::
https://api.github.com/repos/rails/rails,13409,ca-mime-null-type::master,0,closed,,"TLDR: always return an object that responds to the query methods from request.format, and do not touch Mime::Type[] lookup to avoid bugs. _Please do not merge._ --- Long version: The initial issue was about being able to do checks like request.format.html? for request with an unknown format, where request.format would be nil. This is where the issue came from at first in #7837 and #8085 (merged in cba05887dc3b56a46a9fe2779b6b228880b49622), but the implementation went down the path of adding this to the mime type lookup logic. This unfortunately introduced subtle bugs, for instance in the merged commit [a test related to send_file had to be changed](https://github.com/rails/rails/commit/cba05887dc3b56a46a9fe2779b6b228880b49622#diff-00933fde66bed68a3d2ec7400b2c0b79L147) to accomodate the introduction of the NullType. Later another bug was found in #13064, related to the content-type being shown as `#<Mime::NullType:...>` for templates with localized extensions but no format included. This one was fixed in #13133, merged in 43962d6ec50f918c9970bd3cd4b6ee5c7f7426ed. Besides that, custom handlers were not receiving the proper template formats anymore when passing through the rendering process, because of the NullType addition. That was found while migrating an application from 3.2 to 4.0 that uses the Markerb gem (a custom handler that generates both text and html emails from a markdown template). --- This changes the implementation moving away from returning this null object from the mime lookup, and still fixes the initial issue where request.format.zomg? would raise an exception for unknown formats due to request.format being nil. It is worth noticing that [all tests](https://github.com/rails/rails/commit/cba05887dc3b56a46a9fe2779b6b228880b49622#diff-cd75c7c20db7e5ab5d2534f7f28227b8R594) that [were added](https://github.com/rails/rails/commit/43962d6ec50f918c9970bd3cd4b6ee5c7f7426ed#diff-38f248f3c2154919879939f3fd0dee42R38) by this ""feature"" have been kept and are working fine. If that's acceptable I'll backport to 4-0-stable accordingly.",ed60bbd26b90a4e915487ceeec1dd717e51a4dff::
https://api.github.com/repos/rails/rails,13168,format_localized_template_4_0_stable::4-0-stable,0,merged,,This PR is the backport of #13141. It fixes #13064 regression bug introduced by the #8085 Wrong indent ::,2c97d322f00bc9ff4d2ac165fa504102f6385f56::
https://api.github.com/repos/rails/rails,12759,backport-9675c7d::4-0-stable,0,merged,,"At @rafaelfranca's request, this backports commit 9675c7d into the 4-0-stable branch to fix #10995. All tests are passing. This is the first time I've ever attempted backporting; any feedback is greatly appreciated!",aabf209efa1f2008d8910b7ef97b190d21a9268f::
https://api.github.com/repos/rails/rails,12673,timed-thread-safety::master,0,closed,,"I've got similar to #12069 problem in my app. Here is a gist to reproduce (on jruby):  https://gist.github.com/etehtsea/7193889 If this really fixes the problem, I hope it will be backported to `4-0-stable` branch.",faa02e93fbfe5db13d842901d6c5985f2b24d8d6::
https://api.github.com/repos/rails/rails,12612,amo_validates_inclusion_of_time_range_error::master,0,merged,,"``` ruby validates_inclusion_of :created_at, 1.year.ago..Time.now ``` raises ``` TypeError: can't iterate from Time ``` since #10774 was merged. This PR fixes the regression. I think we'd better backport this to 4-0-stable before shipping 4.0.1 stable release.",68db6bc431fbff0b2291f1f60ccf974b4eece596::
https://api.github.com/repos/rails/rails,12410,fix-ip-spoof-errors::3-2-stable,0,merged,,"@pixeltrix @strzalek backported as requested. @tamird I don't think this line is meant to be here is it? ::apologies, fixed ::",85106decc41f1695ff6fe54452168237fd0f98d0::
https://api.github.com/repos/rails/rails,12359,inverse_on_callbacks::master,0,merged,,"### Problem When inserting a children object and the children element has a callback that call its parent, even having the `inverse_of`, it does an extra query to populate the parent object. ### Solution When insert the record, we need to load the inverse instance before calling save, so the callbacks will have access to it. review @rafaelfranca @carlosantoniodasilva Also I would :green_heart:  to have that backported to rails 3.2 if possible.",3af4ae82e587b12664626e7b22bc6cc21ebbca2e::25ada9b5411808c4ae8dc72ba99cc09fe10ff884::
https://api.github.com/repos/rails/rails,12188,master::master,0,merged,,"This had a pretty significant perf improvement, will run numbers tomorrow and add to the ticket, it changes semantics of @column_hash , nonetheless all the tests seem to pass. It avoids fairly significant repetitive copies of columns in a table on each instance. If this is found to be safe its a strong candidate for backport into 4.0. `column ||= self.class.column_types[name]` ::oops :) will fix ::There was a typo on the instance var call here, I fixed that on master and 4-0, lets keep an eye on travis now ;) ::sorry, totally my bad ::I think I know why that happened ... columns_hash vs. column_types we should make that consistent at least. column_types_hash and. column_types perhaps, maybe figure out a way of eliminating @columns_hash? ::",975c9c9d4498a4b4a00de713e932abe3299a4007::
https://api.github.com/repos/rails/rails,12185,join_dep::master,0,merged,,"Similar to: https://github.com/rails/rails/pull/12065 Reduce the allocations when extracting rows from a join dependency For a typical home page request at Discourse this reduced the objects allocated by 2000 and the memory allocated by 100k (analyzed using https://github.com/SamSaffron/memory_profiler ) This is extremely safe and can be backported to rails 4 , cc @tenderlove I wonder if this comment is better as just this final line. We can get the history via git. ::The rest of the comment is useful though. Would possibly be better to either link to the PR, or add the information into the commit message? Something like: ``` Reduce allocations when extracting AR models Replace inefficient idiomatic code as all the values are first copied in to an array only to construct the hash. This code is performance critical as it is called per row ``` ::You could also use something like: ``` ruby column_names_with_alias.each_with_object({}) do |(cn, an), hash| hash[cn]= row[an] end ``` which is more idiomatic but avoids the array allocations. ::@steveklabnik updated the comment to point back to the PR :) ::Would move `length` to a variable cause any perf impact? Also I believe Rails conventions are mostly not to use `do` with `while`, similer to not using `then` with `if`. Always great stuff @SamSaffron :+1: ::Please separate variables: `cn, an`. Just to understand, do they map to `column_name` and `alias_name` respectively? :::+1: for a better name. ::thanks, fixing that up. doing the length upfront has a very marginal perf improvement, however we are micro-optimising here so we might as well go the whole way ::agree, those names are problematic ::",14b23ee5fbe184187b33909411f3f28b953207d1::
https://api.github.com/repos/rails/rails,12124,fix_12115::master,0,closed,actionview::,"If we call `simple_format` method with sanitizing option, a single line feed (\n) is replaced with unexpected characters . ``` &lt;br /&gt; ``` I think we should backport  to 4-0-stable.",bfc75957d2d75571a2b78d21f31710eb88b6cf1b::
https://api.github.com/repos/rails/rails,11948,backport-11049-11051-4-0-stable::4-0-stable,0,merged,,"I've just run into this on my app, this backports @neerajdotname's fix into Rails 4.0.x. Related: #11049, #11051, #10509, #10566.",010bdec3ac4a77d81b711fd82533d6732f3e6630::9f1f89b0f372cb36a1d989cc1dd7bb2257578ec4::
https://api.github.com/repos/rails/rails,11940,thread_var_patch_freeze::master,0,merged,,"The Thread thread variable backport didn't freeze the locals hash. This overrides freeze to freeze locals, and then call super. https://github.com/rails/rails/issues/11831#issuecomment-22890710",dfb923e6e52d1fed768672b5b7e6277a599f136a::
https://api.github.com/repos/rails/rails,11925,ivar_rename_for_11831::master,0,closed,,"Rubinius uses @locals on Thread for their Fiber locals. Since Rubinius, unlike CRuby doesn't hide internal ivars, they can conflict with monkey patched ivars. This namespaces the backported ivar so it is not the same as Rubinius's name. See #11831 for context.",23689b8595f4aecc6ca89d77834a198118485107::
https://api.github.com/repos/rails/rails,11880,backport_arel_fix::4-0-stable,0,merged,,Closes #11870 This is a backport of d345ed40b5783ec2cb43f4434872ea5b2d57d203 and 77ba336080b4de15233f669bdeea5c9ac44a3941,83cc36d96387f833e5ecdae4a346720377b57877::
https://api.github.com/repos/rails/rails,11772,quiet_attribute_methods_reload::master,0,closed,,"https://github.com/rails/rails/issues/10507 Trace showing issue is occurring in model definition, as example: ``` #0:/path/to/rails/project/app/models/a_test_model.rb:18::-: class ATestModel < ActiveRecord::Base #0:/path/to/gems/kaminari-0.14.1/lib/kaminari/models/active_record_extension.rb:9:ActiveRecord::Base:>:         def inherited_with_kaminari(kls) #:nodoc: #0:/path/to/gems/kaminari-0.14.1/lib/kaminari/models/active_record_extension.rb:10:ActiveRecord::Base:-:           inherited_without_kaminari kls #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:94:ActiveRecord::Core::ClassMethods:>:       def inherited(child_class) #:nodoc: #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:95:ActiveRecord::Core::ClassMethods:-:         child_class.initialize_generated_modules #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:99:ActiveRecord::Core::ClassMethods:>:       def initialize_generated_modules #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:100:ActiveRecord::Core::ClassMethods:-:         @attribute_methods_mutex = Mutex.new #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:103:ActiveRecord::Core::ClassMethods:-:         generated_attribute_methods.const_set(:AttrNames, Module.new { #0:/path/to/gems/activemodel-4.0.0/lib/active_model/attribute_methods.rb:326:ActiveModel::AttributeMethods::ClassMethods:>:       def generated_attribute_methods #:nodoc: #0:/path/to/gems/activemodel-4.0.0/lib/active_model/attribute_methods.rb:327:ActiveModel::AttributeMethods::ClassMethods:-:         @generated_attribute_methods ||= Module.new.tap { |mod| include mod } #0:/path/to/gems/activemodel-4.0.0/lib/active_model/attribute_methods.rb:327:ActiveModel::AttributeMethods::ClassMethods:-:         @generated_attribute_methods ||= Module.new.tap { |mod| include mod } #0:/path/to/gems/activemodel-4.0.0/lib/active_model/attribute_methods.rb:328:ActiveModel::AttributeMethods::ClassMethods:<:       end #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:104:ActiveRecord::Core::ClassMethods:-:           def self.const_missing(name) #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:109:ActiveRecord::Core::ClassMethods:-:         generated_feature_methods #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:112:ActiveRecord::Core::ClassMethods:>:       def generated_feature_methods #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:117:ActiveRecord::Core::ClassMethods:-:         end #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:114:ActiveRecord::Core::ClassMethods:-:           mod = const_set(:GeneratedFeatureMethods, Module.new) #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:115:ActiveRecord::Core::ClassMethods:-:           include mod #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:116:ActiveRecord::Core::ClassMethods:-:           mod #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:118:ActiveRecord::Core::ClassMethods:<:       end #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:110:ActiveRecord::Core::ClassMethods:<:       end #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:96:ActiveRecord::Core::ClassMethods:-:         super #0:/path/to/bundler/gems/rails-observers-86bfe485dc39/lib/rails/observers/active_model/observing.rb:197:ActiveModel::Observing::ClassMethods:>:         def inherited(subclass) #:nodoc: #0:/path/to/bundler/gems/rails-observers-86bfe485dc39/lib/rails/observers/active_model/observing.rb:198:ActiveModel::Observing::ClassMethods:-:           super #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:94:ActiveRecord::Core::ClassMethods:>:       def inherited(child_class) #:nodoc: #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:95:ActiveRecord::Core::ClassMethods:-:         child_class.initialize_generated_modules #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:99:ActiveRecord::Core::ClassMethods:>:       def initialize_generated_modules #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:100:ActiveRecord::Core::ClassMethods:-:         @attribute_methods_mutex = Mutex.new #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:103:ActiveRecord::Core::ClassMethods:-:         generated_attribute_methods.const_set(:AttrNames, Module.new { #0:/path/to/gems/activemodel-4.0.0/lib/active_model/attribute_methods.rb:326:ActiveModel::AttributeMethods::ClassMethods:>:       def generated_attribute_methods #:nodoc: #0:/path/to/gems/activemodel-4.0.0/lib/active_model/attribute_methods.rb:327:ActiveModel::AttributeMethods::ClassMethods:-:         @generated_attribute_methods ||= Module.new.tap { |mod| include mod } #0:/path/to/gems/activemodel-4.0.0/lib/active_model/attribute_methods.rb:328:ActiveModel::AttributeMethods::ClassMethods:<:       end #0:/path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:104:ActiveRecord::Core::ClassMethods:-:           def self.const_missing(name) /path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:103: warning: already initialized constant #<Module:0x007fa772503f18>::AttrNames /path/to/gems/activerecord-4.0.0/lib/active_record/core.rb:103: warning: previous definition of AttrNames was here ``` May not be best fix. Open to other suggestions. Seems like should be backported to 4.0.x if accepted.",3c940a43c101a0ec0f9835f9f572da284c6c0e1d::
https://api.github.com/repos/rails/rails,11636,uppercase-nested-const-autoload-marking::master,0,merged,,"Constants autoloaded in all-caps nestings are not getting marked as such by `ActiveSupport::Dependencies`. As a result they're not reloaded after modification when `cache_classes` is disabled. A failing test case is included. This was because the originally requested constant name was not being passed to `#load_or_require`, so the expected location of the new constant had to be inferred from the path name using `String#camelize`. So if you autoloaded `HTML::SomeClass`, the watcher was told to look for new constants in `Html`, and none were found. I've fixed this by passing the qualified constant name to `#load_or_require`. This seemed to be the original intention behind the optional `const_path` argument to that method, which was previously unused. The full build passes on the rails-dev-box - any feedback would be greatly appreciated. I've left the commits separate for review but will squash them if it's okay to merge. Edit: this bug affects 3.2, 4.0 and master - assuming it's okay to merge, please can it be considered for backporting to the older branches?",b4a96686267c8bb261eca21c02acab9fd5f7ca96::
https://api.github.com/repos/rails/rails,11523,backport-4224::3-2-stable,0,closed,,This is a version of #4481 that backports the functional changes of #4224 while attempting to be minimally invasive.,0627a7fca2a18d73a3a7f1015dc719f9273e7a0a::
https://api.github.com/repos/rails/rails,11387,backport_714bb17::4-0-stable,0,merged,,"I wasn't sure on the backport policy for doc bugs, but someone reported this to the [rubyonrails-docs list](https://groups.google.com/d/msg/rubyonrails-docs/uxq-LqvHGKM/UAH75ocXC88J)",ada2253bb95abf4bf8097a05038a7d60e4b82512::
https://api.github.com/repos/rails/rails,11306,11288_remove_extra_queries_for_belongs_to_with_touch::master,0,merged,activerecord::,"For models with belongs to parent model with touch option on touch tries to update timestamps twice and select redundant select of parent model. Closes #11288 o.O seriously that this is the reason? =( ::Looks like this line was duplicated. ::This method was used originally in commit 8fccbc1 line 54. Then in 455d710 the logic was refactored by using `self.#{foreign_key}_changed?` and `self.#{foreign_key}_was` so this the same as `changed_attributes[foreign_key_field]`. But after your changes in dce398d in refactoring where by using `attribute_was(foreign_key_field)` was missed that was `changed_attributes.key?(foreign_key_field)` and this code return `false` if there is no changes. ::Thanks! ::And I found that again was reverted (because of  #10197) to old version with `changed_attributes.key?(foreign_key_field)` till 4b824b0 ::Just reviewed that issue, found comment: https://github.com/rails/rails/issues/10197#issuecomment-18447337 ::I have no idea why `attribute_was` returns the old value using send =(. Ok then. Can you also please send another pull to 4-0-stable branch, adding a changelog entry? Thanks. ::Thanks. I'll add entry to changelog, and create PR with backport to 4-0-stable today ::",1ecc3e83b6f62e2f6858c458231e3a49ef0bd916::
https://api.github.com/repos/rails/rails,11050,remove-rails-test-mention::master,0,merged,,"Hello, I've recently upgrade to Rails 4.0 and seen #9080 several months ago. Spontaneously, I run `rails test` but got : ``` Error: Command 'test' not recognized ... test        Running the test file (short-cut alias: ""t"") ``` This pull request removes the mention about this command in the rails command's help message and remove the ""t"" alias related to it. If you want, I can backport it to 4-0-0 and 4-0-0-stable as well ; let me know. Also I don't add any changelog entry but let me know if I should. Have a nice day.",47a9eea04ab88ef262119c56812e61b069a45e41::
https://api.github.com/repos/rails/rails,11038,backport/fix-11030-to-4-0-stable::4-0-stable,0,merged,,This PR backports #11030 to 4-0-stable.,30e882cfb30ece2e2c77110ae20cd4a009b0e8f6::
https://api.github.com/repos/rails/rails,11033,patch-1::3-2-stable,0,merged,,"Hello, I've seen #10871 but since docrails as moved from lifo/docrails to rails/docrails we have to ask for commit rights or submit patches directly to the rails repository so I've updated the instructions. If this get merged, if you want I can backport it to master (and 4.0.0-stable and 4.0.0). Have a nice day.",f3b84e2d9600abce51cd31f85fa173d688b3340e::
https://api.github.com/repos/rails/rails,10981,10958::4-0-stable,0,merged,,Cherry picking following commit did not work. https://github.com/rails/rails/commit/50823452f70341447a010df27dd514fd97bfe8a9 This commit is backport of the above commit for 4-0-stable.,b07420111a961fe16d41f26e3a70f5239f9a77de::
https://api.github.com/repos/rails/rails,10965,master::master,0,closed,,https://github.com/rails/rails/blob/ccf256d8dcc68d975bbf00780c3b4096f47e29d3/actionpack/lib/action_controller/metal/rendering.rb#L9 With a carefully crafted HTTP_ACCEPT  header request.formats will return [nil] causing the error. Much like https://github.com/rails/rails/issues/7774 NoMethodError: undefined method `ref' for nil:NilClass little of my Stacktrace [PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/actionpack-3.2.13/lib/action_controller/metal/rendering.rb:9:in `block in process_action` [PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/actionpack-3.2.13/lib/action_controller/metal/rendering.rb:9:in `map` [PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/actionpack-3.2.13/lib/action_controller/metal/rendering.rb:9:in `process_action` [PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/actionpack-3.2.13/lib/abstract_controller/callbacks.rb:18:in `block in process_action` [PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/activesupport-3.2.13/lib/active_support/callbacks.rb:469:in `_run__4125533832456839663__process_action__2284511760730381774__callbacks` [PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/activesupport-3.2.13/lib/active_support/callbacks.rb:405:in `__run_callback` [PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/activesupport-3.2.13/lib/active_support/callbacks.rb:385:in `_run_process_action_callbacks` [PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/activesupport-3.2.13/lib/active_support/callbacks.rb:81:in `run_callbacks` Could/Should be backported?,9f6655764f21e80cf8b43f7c000485fe15d8dd11::2caf460f46ba101054a0ffe00221966c6527a23c::a64561f3bd0795b1445d68d1fa04ed4746b22c7c::2e30706848c3c174baac1a1324d4805798f919e3::75b7b55994f3709d06ebc02f35fe7fa15effca09::
https://api.github.com/repos/rails/rails,10939,fix_transaction_issue_in_disable_ri::master,0,closed,PostgreSQL::,"PostgreSQL requires a `SAVEPOINT` and `ROLLBACK` to resume execution after a failed statement within a transaction.  Since normal testing is done with superuser privs, the `rescue` clauses in `PostgreSQLAdapter#disable_referential_integrity` weren't being tested in the context of a transaction. The `test/cases/adapters/postgresql/referential_integrity_test.rb` file was based on merging one of the PostgreSQL-specific test files with `test_disable_referential_integrity` from `test/cases/adapter_test.rb`.  The test `test_disable_referential_integrity_as_nonsuperuser_is_harmless_in_transaction` creates a temporary role to hold superuser privs and then relinquishes superuser privs for the current user before carrying out the actual test and then uses that temporary role to regain superuser privs. The code added to `PostgreSQLAdapter#disable_referential_integrity` creates `SAVEPOINT`s before attempting statements in the blocks with `rescue` clauses and then uses `ROLLBACK` in the `rescue` clauses.  Note that creating a `SAVEPOINT` isn't permitted if we're not in a transaction, thus the statement level `rescue` to handle that case and to assign a useful value to `in_transaction`.  The `SAVEPOINT`s are released when they are no longer needed to minimize any impact on resources. Note that it appears that the tests in `referential_integrity_test.rb` are being run in some sort of implicit transaction, but that there are a number of tests in the rest of the test suite that appear to run outside of transactions and that failed when the code didn't deal with the non-transaction scenario.  I'm not sure how to test for the non-transaction scenario explicitly in `referential_integrity_test.rb`, but there appears to be comprehensive coverage from the rest of the suite.  I left the explicit call to `transaction` in my test to ensure that if whatever creates the implicit transaction changes the test is still valid. Can you use the methods provided by the PostgresqlAdapter to create, release and rollback to savepoints? You can find them here: https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb#L222-L232 ::It's a bit confusing to have an Oracle reference in a test-case which is named `PostgresqlReferentialIntegrityTest`. Can you check wether this is necessary with PG so we can get rid of the comment in the parenthesis? ::As this should hit the `rescue` branch can we assert that `USER` `TRIGGERS` are disabled? Otherwise we don't have any coverage of the `rescue` code at all. ::After exploring the `(create|rollback_to|release)_savepoint` methods, I'm not entirely comfortable using them.  Those methods get called by the code for [`SavepointTransaction`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb#L181-L200), and based on what I'm seeing in those methods and [`current_savepoint_name`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L413-L415), I get the feeling that if I start using those methods I'll be messing with the savepoints used by the enclosing transaction if the call to `disable_referential_integrity` is made from within a nested transaction.  That would prevent the enclosing transaction from rolling back or committing, since I'd wipe out the savepoint it is using! But it turns out that all of the above is not, technically, the case.  First off, the savepoint created for a transaction gets created during the initialization for the `SavepointTransaction`, which is before it gets returned and assigned to `@transaction` for the connection.  So if I have a `SavepointTransaction` for which `#number` returns 2, the savepoint for it is `active_record_1`.  Which explains all that weird [`finishing?` and `number` code](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb#L84-L98). So we wouldn't stomp on the savepoints used by the enclosing transaction, but we could collide with the enclosed transaction if there is one created inside the yield block.  Except that we're very careful to release our savepoints before yielding, so we'll be fine.  So long as the approach above for naming the savepoints doesn't change.  Except that there's another caveat!  PostgreSQL doesn't entirely conform to the SQL Standard.  I found the following at http://www.postgresql.org/docs/9.2/static/sql-savepoint.html: > SQL requires a savepoint to be destroyed automatically when another savepoint with the same name is established. In PostgreSQL, the old savepoint is kept, though only the more recent one will be used when rolling back or releasing. (Releasing the newer savepoint with RELEASE SAVEPOINT will cause the older one to again become accessible to ROLLBACK TO SAVEPOINT and RELEASE SAVEPOINT.) Otherwise, SAVEPOINT is fully SQL conforming. So even if the `create_savepoint` created a savepoint with the same name as the one used by the enclosing nested transaction, we would still be safe as long as we released that savepoint before exiting our code, because then PostgreSQL would make the previous savepoint with the same name visible once again. I guess all I'm left with is this.  I had to do all this research through the code base and PostgreSQL's behavior to figure out how things actually behaved to realize that there are at least two levels of protection against all of things that worry me.  But that may not be immediately evident to anyone else looking at the code.  Right now, the only place in ActiveRecord that uses the `(create|rollback_to|release)_savepoint` methods is the `SavepointTransaction` code, and it seems to me from looking at the methods that they were created with that specific use in mind and no others (otherwise there would be ways to create savepoints with custom names or to use random names and return a savepoint object that the caller must hang on to for rolling back or releasing, or some other mechanism for keeping the savepoint names from colliding).  Personally, I would have placed the responsibility for naming the savepoints in the `SavepointTransaction` code and put the responsibility for creating/rolling back/releasing them (but not naming them) in the Adapter code.  That would makes it easy for others to reuse the code without having naming collisions. Side note: It appears that the savepoint created by a nested transaction persists if the transaction is rolled back.  It doesn't persist if the transaction succeeds.  The following doesn't throw an error: ``` @connection.transaction { raise ActiveRecord::Rollback } @connection.release_savepoint ``` If you use an empty block for the transaction, it does.  Successful transactions release their savepoints, whereas rolled back transactions roll back to theirs but leave them behind.  Maybe this is a good thing, but it does strike me as a tad unexpected. For whatever reason, I can't seem to find your comment on reusing the value of `in_transaction` in GitHub itself, but the above exploration also clued me into `open_transactions`, which seems to be a reliable method for determining if we are in a transaction (at least within a transaction known to ActiveRecord).  I'm modifying the code to use `open_transactions > 0` as a test for all of the savepoint code, including the initial creation of the savepoint.  The disadvantage to this approach is that the code will assume there's no transaction if the user manually creates a transaction by executing raw SQL (instead of by using the ActiveRecord support).  Am I safe in assuming that users manually creating transactions are asking for any trouble they get? ::Even though in the super user case the constraints won't get checked when they get re-enabled, my preference is to behave as if they did because in an ideal world they would.  The whole point of `disable_referential_integrity` is that you want to execute some steps that may introduce integrity violations during the intermediate steps, but as a whole they should result in a database that is never-the-less consistent.  PostgreSQL isn't going to validate that later case, but I still think the blocks we pass should behave as if it would.  Can I just pull the comment but leave the line that deletes the temporary record? ::I'll look into this.  Either I'll find a way to test the current state of the user triggers or I'll create a trigger and then verify that it isn't invoked (the later is more work, but also a more comprehensive test). ::I think `ensure` should stay. I communicates clearly that this code has to run no matter what happens. For example your `rescue` statement below does not catch all errors, which will lead to an inconsistent state: ``` irb(main):009:0> begin irb(main):010:1*   raise Interrupt irb(main):011:1> rescue => e irb(main):012:1> end Interrupt: Interrupt from (irb):10 from /Users/senny/.rbenv/versions/2.0.0-p247/bin/irb:12:in `<main>' ``` You would need to `rescue Exception => e` to catch everything but `ensure` in my opinion `ensure` is better suited for this scenario. ::I still think we should get rid of these helper methods if possible. See https://github.com/rails/rails/pull/10939#issuecomment-23920944 for context. This could look like: ``` ruby module ReferentialIntegrity SAVEPOINT_NAME = ""disable_referential_integrity"" def .... # ... create_savepoint(SAVEPOINT_NAME) # ... end end ``` However before we can replace this I need to go over it with Rafael to see if we can change the interface of `create_savepoint`. I'll keep you posted on the progress. ::Isn't this more of a documentation issue than a real test-case. In the end it would be great if it worked so I don't think we need a test-case to ensure that it does not work. What we need however is documentation that explains that it does not work as nonsuperuser. What do you think? ::I don't intend for those helper methods to exist by the time the code is ready to commit - they're just there to simplify things if the underlying code starts changing while we wait to inline.  I'm assuming, BTW, that none of this is going to get backported in 3.2.15 - it would be nice to see it, but I'm planning on authoring a comprehensive monkey-patch based on the 4.1.0 code that will work for both 4.0.0 and 3.2.14+. Something else just occurred to me while thinking about this.  How do we handle nested calls to `disable_referential_integrity`?  Currently we re-enable referential integrity too early (i.e. as part of the return from the most deeply nested call, rather than during the return from the outermost call)!  So I need to make the code behave properly in that scenario (as well as adding tests). ::The `test_disable_referential_integrity_as_.*_with_invalidated_transaction` tests verify that if the passed block invalidates the current transaction, our code successfully rolls back to a savepoint and is able to re-enable referential integrity. The `test_disable_referential_integrity_as_nonsuperuser_fails_.*` tests do serve more as documentation of the current behavior, but I'd prefer to leave them there until we fix things.  The long-term goal is to make it work as nonsuperuser for scenarios in which the foreign key is defined as deferrable, as discussed in way too much length in https://groups.google.com/forum/?fromgroups#!topic/rubyonrails-core/n82I-OXYyD4.  The conclusion I came to in that post is: > My suggestions are as follows: > - If the user has SUPERUSER, disable all triggers.  This ensures we can >   disable referential integrity even if the constraints weren't declared >   with DEFERRABLE, so long as the user has SUPERUSER. > - If the user doesn't have SUPERUSER, disable all user triggers and then >   use SET CONSTRAINTS ALL DEFERRED. >   - If the call was made from within a transaction, there is no need to >     create a nested transaction. >   - If the call was not made from within a transaction, create one >     before calling SET CONSTRAINTS ALL DEFERRED and yield to the block >     from within that transaction. Once we do that, the test suite can be modified to validate that the above behavior works. ::You're more correct than you knew!  The problem is that I'm using the `rescue` as a proxy for what I really care about.  What I need to know is, ""Am I in a transaction that has gone sour where a rollback is required in order to successfully issue SQL commands?"".  I was using the `rescue` as a proxy for that, when really it's only loosely correlated.  There are scenarios where the code might raise its own exception but the SQL connection is still functioning and no rollback is required.  There are scenarios where the code might trap the exception raised when an `execute` fails and then return with no exception to indicate that the connection requires a rollback before issuing commands. It's just that I couldn't figure out how to test for what I really care about, so I used the proxy.  I think I've figured it out, so I've modified the test suite to be sneaky in both directions and now I'll go experiment and see if I can make it 100% reliable! ::I wrote that last comment several hours ago and forgot to click the green button.  The answer is, ""Yes, I can test for what I care about rather than using an unreliable proxy."" I don't know how to tell if the SQL connection is ""poisoned"", but I can test for it by attempting to release the savepoint!  If I can successfully release the savepoint, then the connection isn't poisoned and the savepoint will be released (and I don't need it anymore because the block of code left the connection in a functioning state).  If I can't successfully release the savepoint, then I know the connection is poisoned, but since the savepoint didn't release I can rollback to it and then release it! ::",a67f6bc49c85da16e292e5fa2473d250389b239a::
https://api.github.com/repos/rails/rails,10836,fix_10789::master,0,closed,,"Closes #10789. Now `::Logger` hasn't `silence` method, because `::Logger` doesn't include `LoggerSilence`. This PR also should be backported to 4-0-stable. We need this silence call here, or the logs will be full of SQL results to check if there is pending migration. ::@rafaelfranca This PR comes from the discuss of https://github.com/rails/rails/issues/10789 . Should we do ::Logger includes ::LoggerSilence with threadsafty ? ::",d54a2c576beceed4b8a71a2cc1589a2d083f3dca::
https://api.github.com/repos/rails/rails,10798,fix-enable_extension-with-table_name_prefix::master,0,merged,activerecord::,"When using `ActiveRecord::Base.table_name_prefix` and/or `table_name_suffix`, extension names get the same treatment as table names when running migrations. This leads to migrations that try to call, for example, `enable_extension(""prefix_hstore_suffix"")` on the connection. This pull request fixes that and adds some tests for both `enable_extension` and `disable_extension` in migrations. I think it should also be backported to _4-0-stable_. I can send another pull request for the backport if needed.",40708c3670df44659235aade62f31c6c2a9af223::
https://api.github.com/repos/rails/rails,10785,10782_routes_inspector_deals_with_controller_regexp::master,0,merged,actionpack::,"Fixes #10782. Simple patch to make the `RoutesInspector` cope with regexp values for the `:controller` option. I think it's not necessary to add a changelog entry for this bug fix, even if we're going to backport it. :::scissors: ::",88e8e951a283823c8e84d6b7f2e13b5cb8974a72::
https://api.github.com/repos/rails/rails,10698,mt5::4-0-stable,0,closed,,This pull request backports minitest 5 to 4-0-stable. Needs `require: false` ::See https://github.com/rails/rails/pull/10675 ::,1e6ca26ecf8d3c9078f93af7ffb20ff31d20fc1a::f7783026d8853356bb6735062d04b14ac8074283::9f576bca04b954fa8dca33da9c669ac68ab91b4c::
https://api.github.com/repos/rails/rails,10681,3-2-stable-fix_association_auto_save::3-2-stable,0,merged,,"This is a backport of #10417 The issue: Per the comments in pull #3329, If you have a table with a unique field index, and you mark a record for destruction, and you build a new record with the same value as the unique field, then when you call save, a database level unique index error will be thrown. This happens because the record destruction happens after record creation. In this pull request, I moved the record destruction ahead of the record creation.",c2362461cdf9615d5704d6f2942921b84b854c3c::
https://api.github.com/repos/rails/rails,10646,fix_am_20130517::master,0,merged,actionmailer::,"According to https://travis-ci.org/rails/rails/jobs/7220308#L148, AM's testcase was break. I guess that AM's testcase was wrong. When we pass :transfer_encoding option, we should pass _encoded_ content. I guess this PR should be backported to 3-2-stable, 4-0-stable too. This should be US ASCII (7 bit) ::Do you mean `::Base64.encode64(""\312\213\254\232)b"".force_encoding(Encoding::ASCII))` ??? ::I think ""\312\213\254\232)b"" is binary and ::Base64.encode64(...) is us-ascii. Am I wrong :question: ::Right: the binary string is Base64-encoded, which results in us-ascii: ``` ruby >> Base64.encode64('foo'.force_encoding('binary')).encoding => #<Encoding:US-ASCII> ``` So you don't need to force its encoding. ::Not sure it needs a changelog entry though. ::",98849c71acb8623546a22898497baa4d9b435b12::
https://api.github.com/repos/rails/rails,10634,time_advance_gregorian::master,0,merged,,"If Time is assumed to represent a gregorian value (not conspicuously documented, but assumed by Time#to_date in Ruby > 1.8), Time#advance should return a value which is also gregorian. Currently, that is not invariably the case: ``` Time.utc(1582, 10, 15).advance(:days => -1) # => 1582-10-04 00:00:00 UTC ``` If a resulting Time object with implicit julian date is used in calculations with Time objects with implicit gregorian dates, hijinks ensue: ``` t = Time.utc(1582, 10, 15) distance_of_time_in_words(t - t.advance(:days => -1)) # => ""11 days"" ``` I'd be glad to backport this fix. In that case ActiveSupport's Time#to_date (for Ruby < 1.9) should also be amended to specify proleptic gregorian for consistent behavior with Ruby 1.9.",0c6ddbe7b0056cb5c17d6b483c0e5a7cbd596b97::
https://api.github.com/repos/rails/rails,10616,backport-distinct-distinct::3-2-stable,0,merged,,"To recap, the combination of a :uniq => true association and the #distinct call in #construct_limited_ids_condition combine to create invalid SQL, because we're explicitly selecting DISTINCT, and also sending #distinct on to AREL, via the relation#distinct_value. Where #6792 was the forever fix, this is the minimal fix. Instead of properly indicating the distinctness of the query through #uniq_value alone, we use the literal DISTINCT select statement produced by #distinct and set #uniq_value to always be falsey Happy to backport the full #6792 change, but have the sense this is a simpler intervention for the 3.2 line.",23c656c1bc113e5f198464ad29d72c5238bfd796::
https://api.github.com/repos/rails/rails,10578,lu/back_port_to_json_fix::3-2-stable,0,merged,,"This commit is a backport from https://github.com/rails/activeresource/pull/29. The ActiveResource's include_root_in_json option works in 3.1.x, but is broken for 3.2.x.",ec55866e398feb1a52701027ab86857b62622ab6::
https://api.github.com/repos/rails/rails,10487,activesupport_refactoring::master,0,closed,activesupport::,"can this be broken into multi line? its pretty hard to read. ``` ruby self[key] = if block && self_initial_value block.call(key, self_initial_value, new_value) else new_value end ``` ::i think `original_value` is a better name. ::yes you can...incorporating these changes ::I still think `elsif` would be cleaner here than having to do `else` and then an inner `if`. But I guess it's your call. ::It is much easier to read to me as compared to elsif... ::i think this is a given example of how Inflector can do things wrong. If Business case has been fixed, another example should be given; if this type of bug is no longer relevant in general, this entire snippet together with line 186 ::I think this one is less efficient than a separate `div` and `%` (because of the intermediate array). Could you check? ::I prefer the former ::Seems to me like even less readable than before :/ Can this become regular if case? ``` ruby if fill_with != false && modulo > 0 && length == division last_group << fill_with end ``` ::I prefer to do the assignment inside the if: ``` ruby if original_value.is_a?(Hash) && new_value.is_a?(Hash) self[key] = original_value.deep_merge(new_value, &block) elsif if block && original_value self[key] = block.call(key, original_value, new_value) else self[key] = new_value ``` This is easier to read and to know what if that else clause is refering :::+1: ::OK doing it... :+1: ::This looks much better to me...simple and yet compact... ::@rafaelfranca I guess you are right but I had done the benchmarking of both of them and here are the results...The divmod is slightly slower because of both operations which are done simultaneously... ``` user     system      total        real ``` Divmod          0.000000   0.000000   0.000000 (  0.001714) user     system      total        real regular job     0.010000   0.000000   0.010000 (  0.001681) Can we can keep the divmod one??? ::'radius'.classify  #=> ""radiu"" which is incorrect and it should be ""Radius"" ""feet"".classify => ""Foot"", it should be ""Feet"".. ""abacus"".classify => ""Abacu"", it should be ""Abacus"" I have found these three at the moment and would add them if I find more.. ::As far as I can tell, the point is not to add all you can find, but use one line an example to the comment which is there to illustrate this behaviour. If you fix the comment to be ""Business"" and not ""Busines"", it is either wrong or not useful anymore, and should either be reverted or replaced with one of the examples you gave. ::I am doing exactly that and I would also be mentioning this in the comment that in Rails 3.2.x series, it was ""busines"" and now it has been corrected to ""business""...Along with ""business"", I would also also write ""address"" as another example... ::@rafaelfranca done...:+1: ::Is this not going to be backported? ::I don't think so....we have to wait for an official word from someone in the Rails Core team... ::I'm not in the core team. This won't be backported, as it's not a bugfix. However, I don't think the documentation should mention what previously was. It gets invalid too quickly. This part should just be removed. It works, no need to mention it used not to. ::There are many people who have worked extensively with the older versions of Rails and would be aware of this shortcoming of Rails but when they that it is giving correct output in Rails 4, they would definitely consider this as a sign of improvement but we also need to make them aware about this shortcoming in the new guides also....what is the harm in adding this thing to the doc... ::The CHANGELOG files are there for that, not the doc. ::OK...would remove it...:+1: ::Therefore, you should add a changelog entry to replace it :smile: ::CHANGELOG's are only used if there is any change in public interface. If it is only refactoring, then no need of CHANGELOG entry acc. to me. ::I think giving some examples which are not working is fine. No need to give lengthy explanation like above. ::I think it's good to document current behavior, and if and older version was different then back port a doc patch On Thursday, May 16, 2013, प्रथमेश wrote: > In activesupport/lib/active_support/core_ext/string/inflections.rb: > > > @@ -183,9 +183,20 @@ def tableize > >    #   'egg_and_hams'.classify # => ""EggAndHam"" > >    #   'posts'.classify        # => ""Post"" > >    # > > -  # Singular names are not handled correctly. > > -  # > > -  #   'business'.classify # => ""Busines"" > > -  # Earlier in the Rails 3.2.x series, the some of the singular names were not handled correctly such as > > -  # for ""business"", ""address"" the classify function would return ""busines"" and ""addres"" respectively.. but now > > -  # this has been resolved and corrected in Rails 4 > > -  # > > -  #   'business'.classify     # => ""Business"" > > -  #   'address'.classify      # => ""Address"" > > -  # > > -  # Yet some singular names are not handled correctly and I guess we would work upon it to improve upon these shortcomings > > I think giving some examples which are not working is fine. No need to > give lengthy explanation like above. > > — > Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/pull/10487/files#r4252747 > . ::I prefer not. Former is clear to me ::I don't think so. This way is occulting the `each` ::Agree ::Please remove the trailing whitespace ::Remove this blank line ::This one too ::I think is better to have the full stop period here ::I have not checked the patch itself, just let me quickly comment here that these examples need indentation, and ""#=>"" a space as per the guidelines (see the replaced example and others around). ::",bf1244829e8d4fc05dd62492bbaed03d2b58a833::20fd1a3d3d7f1a46c2072b652c7afab3e4c8a0e5::ae27cc44ca6f8303a5bb6298ce056a51a6b5e5f8::
https://api.github.com/repos/rails/rails,10303,3-2-stable::3-2-stable,0,merged,activerecord::,"This is a backport of #10164, already merged into master. The problem is described in lengthy detail in issues #3002 and #5494.",c09829e03db611b46bb52e2054991222cf57bfbe::
https://api.github.com/repos/rails/rails,9996,master::master,0,merged,activerecord::,"Hi! I found following issue. When creating new association object with a block: ``` ruby parent.association.build do |child| child.parent.equal?(parent) # false end ``` The block the `child.parent` did not point to the same object. But when the object is created it points to same instance: ``` ruby child = parent.association.build child.parent.equal?(parent) # true ``` So this patch fixes it by setting inverse_of record right after object is build for the association. If the patch is right I'll add CHANGELOG entry and backport it to `3-2-stable` branch. Does calling this here mean that we can remove a similar call somewhere else? ::Don't think so. It happens when: - record is added to the collection (has_many) - record is replaced (has_one, belongs_to) - record is instantiated from db - preloading, joins and stuff I don't fully understand ::",448381593edf0b87e3afd4945bd13650a7483b17::
https://api.github.com/repos/rails/rails,9943,test_fix_for_74e59ea::3-2-stable,0,merged,,This fixes the backport PR #9899 causing test failures on 1.8.7.,dee5915aac009b6b6456a81ae7b8927866d0c240::
https://api.github.com/repos/rails/rails,9942,test_fix_for_74e59ea::master,0,closed,,This fixes the backport PR #9899 causing test failures on 1.8.7.,acc2aa4c60ea8ebbe8c1a8db17ff52493943867c::784a38698467dbc576e2c33319ef25c39d0bd104::6727ac6a6b7ee8b2cd4e173a9cff40b112c8285d::7d592ba3974321934db5d693273002bdd9668863::325669f0795a9148fd31f7f496a40dc8e114ef52::2aa70bd61a5c4a55dffa79fb6da9b8c8d6dd8b69::8ba3df046f977dddd4bc46248db2a1355bc0ed1e::5203b6dd50dd88904c57c001ed49c157b3afe536::8c938dddd22f16e2e15471a648aaa96be380c562::93366c7c913bf0883f140fa782d3e198593477be::d38c8caa48a732d41c7402a5e71deece4e313559::55a886b6e9bae1986a357626b08522a838aedb3e::e48dc194231830f42f179704596b88215f062c23::348870d5c53c94eb02135c04297c18be60bd3bb0::b366ec51efa14341cb568790c42b8c273d4f4d90::ea881ca85a1a9df3c25e2ee8668d98416a5c1acb::204109eac9708d615bd88d60b0b7e5d265941423::e5ee5a9d24f897bb8999bc6d3f47edc54917db99::970c10cee5a4051739922f8b3ed1e5f73e0d4fe1::f4dc7e3676a3a68d92772b5a466d54e430aa7b6a::33841a9db3e560ef062d36d14ea07f7d71dd65ab::f8452e8de786377ed89d777dabe7d82987f9b001::4d4e6e2f2be4f0c3ae2edb9ce56de0840a2abe60::2e4df2a2893ac95e86952df5ff82e500c19545d9::4179470f0116a08a1838c474ba5541bb33658c9d::ef727a65411913537b90d14eb73241795efbc478::3a9db0219fa2974f7178ff8e27245b72854e6665::229042fb73eb5a802d97768a59edb40ccda5c1fa::e842dbbdf74c1aec904a6325f1e5d84924b90e94::9a44cd1f44197d1c04c4543dd285d9146ddb44d0::6b9cb71b2fa0893139a87bee2bbd5293cd8c0487::8a1ba017c657353daebf13a1f30d1a028967dc36::665e11e53956269e81eacd5b0dfeebd4aef789b7::1506d4d9e4fcf7abb94574bf8d0d58672b04a736::756188b512ca11e24262a74856e3bc11b9b2dbc9::c147dd7ddd206f6c2d80d8957ee9fa575b00b13c::79456619cf527cd00474702f9d384b66209f20dd::80343f6f9017d2e5f11c4fd5776e3f501a126bb1::831aad2ee992771df377188abbca015dfa24183b::040ff5b472c5c90837c3913ce5bf144ad6bb3ac3::3aebe13b1b9c159e3598f49c104029c9bb89e0c5::9bc5e6517c409d1fa71ba704bbf514afdbc0831b::c75b5a88a82c79fdf95dfea4d72bf3c5a829930e::d9a048001f869a3252cb85477f775de9860d615f::d39d878d2b250636256ecf54473d365ffb62eb6d::54faddf2a8342466ad1c685ceac46509ae1f110f::3debd57a951492eebbe40d509b88530a95d75602::f64be7d0d825828098617e6b7c2645dda72d4c18::95fe9ef945a35f56fa1c3ef356aec4a3b868937c::d5cd97baa44fa66dc681041a213092b45c57c32f::43109ecb986470ef023a7e91beb9812718f000fe::746dbd89faf8197e6d6f35f6e428a024923116a2::48810a52dfba26cef127168af447a9620d4555c3::3d1a879f4cf9931a81477b63f9f999d52bac771c::e134e171c201e136ce28dc229cdc61944dc59cf2::45b17cee59ed856294c29e5127027a1d5afae7db::8313f3c5771bfaa3325446d2bbe29c405f8b22c4::11f5debcd5bbfaf51d2d2f24f2c5cee38f37fcdb::f55ef82321c33a308c64e54c66b45e4fff542efa::002dfba66490d289bac897d1ba886310a672e779::686307cd90cd2153f73bd60a3810411584d3f6d3::d564ee06a8430df809397a64e2d5f9d797be7106::7003b36ecfe6f04a87e913828ab0f8dde4e03ecb::3211eb17b999523d19d7e5e4431e0f1ac25a740f::18b9187b561639795279a5c9e1b6c2de8f1eab70::2c5e0adefeb1541cfc887a876d9e96329a70537d::0db9b13b700aef4c33c750d343cf98d055dd556b::7c62a752db77af1aec57ccd4822e87cd6fd633b6::688d52933a2e611175f3d41c016cf0ba71450b17::b1a501e6fb36e8dd16ceeaa2f9575e762a227a6d::79a98d82daf3614f7e17b1436005cf3b10e83557::48f9999fc3377f5e97513319313a70cf953fd617::fa0d434e1b74bd2d2504bf3c925f9ace4161b11d::823604ec1659109eedeb2db91de325d413c73452::da5e5c5f779355a2e99e63a90612cbeaeb0fc986::cfa4c640402f536da896b231506681fb3a96a0d4::63970dc7db273551f977483109dde936c8a7554f::9669aa7cf1c50964c4729fbd50a8776a1e815b44::fd990f24df87c0a445ea6a2a2df6fa8fbd3556b1::5f3b40e824cce3f6dcdfac63fa47bcd80d67dd5a::d3dcb4b9b26c1ea8b44ee8660af10683cd41e35f::a5013bb5af299db6bf97f67d4198220280717e80::626d0b157f5ccf8a42401e6a111432912331aa47::a3aca81b21f793e8869440e9e84ead80c2479e3d::431759614d84395faa713ebdfa8bd1cadc97183a::7ee76714abe4775db4bc44b052338e732d38e93b::97a4db91d69d1795fe9079027968f0c0453bd0a1::29d564add926307fea8cd3f77caf88d735e252a1::2a5d119b44b1099c939bbf71c99fec5883d05ef7::b6d49312920c0b3163064e44ca45871c68136b1c::0b9c4729059a8169f8ea3e9406b9ab23d651d701::8422864394938d2b059f189b7cd7d4616f3eb9ae::ae28f063e37e181a2ef9d348ec8f19c5240fbeb2::c7d6cfb1f6ec84340d0446206ba3b46f2de2bcfc::56fd56406c1c752bee91d9e5b3c04b6399f773df::8593e0f5627468720cbf7b327a2cc8bc06167d8a::d82b5db059bd824d6699936b567359d70d427e2a::1683afb0ae093999d7ca24b87181c4e0109f1f56::1337e9284c038de8f0ea8a2de0d03efa630ea057::8f8ae5f03ccc30daae278c397fb88f94216b5229::bf794bb36f3bd06e2e863cd6c6dfb6ceae116af2::6a0a5f30324571416174430cf41f3355635c3328::e8357935acde972fe42a1a3e0d8c969e518956ed::b4f189a162f4280b360dbc2a6635bbff6c6f09bc::04c2d2e2e4197a1564c33f09d3e52253d845925f::00e0b258eefab192a2012df9cf0680d214c89504::cbdfaf2e2982cea5bc416dbc8b77f2fb84a7c19e::54af52de3f1a874be0f083d662f4a3c64d200bc4::697f31cbe76539670b582b624cc3a3beb92eb362::d29235d2a4df94b6db7d3e45ab15a6799363384e::921a296a3390192a71abeec6d9a035cc6d1865c8::b00fe01d6e231c866509f9f99bbe1534527c7c58::638e24796013282735543823cb71e58c76819060::2f0ff7554dfc7c8b025822e5212065f256926734::060bb7250b963609a0d8a5d0559e36b99d2402c6::baeafb4914e044a7745c693fc4ba7501ca7c8b25::62f01bec76f7e47a5d1dd14b34f5105885de5378::9b9be489948c65a8c6aef7ac063f600da914750a::1dccd44a5c74f20b0406ecc8d39373226f73af35::f1efecfc3f009d7b25a0b72170914a2739cb3765::e0da95bd7e058d2b3199691484550b54c385d6ed::c0022f8d885d5cca8a7f7d3d64c60af1e04684ea::18ffe50581f41a4f24d791e42826c977276a0df3::d1904aff6f04bcca0ee3da4aae8477f2f30b7e85::f15581b1bab8fa042f4614f9b2709c3c580ad9d1::b63eb672ecd86bd2cbc674aa05ac8f7b33e43e81::4bb579a5f05788d10bc61920a68700591280ffb4::6996a0419c6802d1af9fde067025f6dd798c4dc7::ee3e3a90f31af5845849dc631ff301e79c95b28a::c5451777b038c5e48567f69256986ae42a2cde48::b9720355d05d61636396578a258c075fba2f854a::de83b017a90e9fe68da1359a97ac5b58b7c0f3fe::7f4975ffc618bc3125039c565507a385c1187183::01b63c7bc7be8cb155f72e20faeaf213b16f9d85::f7c845745313efc23e9020dea93b5fd9ca104568::3c5f631caa160c2e5f4ec3ee0b7536a474b7b98f::46b65ba274bea6f8d52926e4b243db28d6377fc0::587f563c40cfada296d6e8d6bbe3c4d7fc6ce93b::b4e053e867232e28c7b99b0d935161d1e4559ced::9be7f63db9063b004bc0645df1d49e23ee3ccae9::31436206d9fea09f6332d89e7863bc60e8db902f::a0d84227c2aa4f509abcfa81880dc1cd7cfa9d05::fdcd7c0f2ee264219c322e5cb8f880ca48e14d5f::a72dab0b6a16ef9e83e66c665b0f2b4364d90fb6::e55b0f6d42ee224513aa0a3e1552268b10e5d182::0c1558d32fe7f3198ef598ce552ea89a04ab7793::8f6fa345e5c865acefa063c3e2cd62553fa9f2eb::2647a3cabfb88ac0dac318207bf611b0b66d495f::fe4fce80f3ee80b089fca482f04788af0b9d4d17::9a0cdc68b5b0fc08e60069cb5512bf2ad6b2a76b::b59b72a5aeb799ddaa43dc7ed8ef8101a6c95896::45e9cac12ca99a51ef10e5ee423a6712818ae145::7cc26fd15e27c4a13705a844538bebfdd0461729::2a5f6d8fe6898f2570ba66382336d56894a43322::42d7927c22a2c219d6145d9375be65a04a83dce3::abf0c710210440e50b33b3e708b1e7e1dfbf9d65::979e198c14a95010aca17b6e640f386961360794::0190dcae3c7d4dba5d8b322c04236feea22fc0f9::5693d444686d84d403de5af5d3e23ffe8147001d::8598633cc1d5ea402f8b49b1f71cd92180cc1138::621b5b7f0e608bc916a66a6e046f11485317949c::2a12a04a54590d3a5f2abf4cd4eff3a7b1ee6ef4::e9d659224bb6610d726bd333a9425b4f8f5796ba::6df2db329889590d516fa12307a5dddda59068d1::0761bb029886bb6920a404ecf409013f83a44f58::905b7df1fac8332547b9eb7fc4d5b083c6fc1031::06eb872035a115852d92121c037e3c54a7a10f58::c90e24d08782d583286ccb21cc15f60fa9ed8367::55a1765942bc3d78ba5d449b5daf17a3c902e57c::ee291b9b41a959e557b7732100d1ec3f27aae4f8::1a88523f862738d4c270ab0134ed200c879d1f48::197b9f4d61260bea9e2a0a4883977e02164a0667::23434f6162304292e8c4e28f2744e2cce719b372::5ca59b02d1cc80f3463eef062ced079eb1b3998c::97df33d818602d452a0873e0affe0263ed3c2abb::6a65a8caf38fb7a46521ffbc66ea6f375a0add89::c27da1fbcc243613949c682c44f05fffa71519c4::a1f18d3d722430d83783763eebe25fb05e8ce55c::641a27d47baf4804e89d5a99ee6d843a75d868e6::3170d2b7689f2e7f63bac4a5dee050ca03005678::5e1d629ff66dc433aa50a10130e477060da13bf8::9756aa640f505df35fbd829b5d938c4ed4a26e1e::2e2f8c07d0ee9b209c35e41f69a44c50c501344a::d2b9862b247693af16ad00e56d4510ef460bcea7::98739cf45fbcf2bbaa53bdf23bf4aa0250eca1c7::1129cb31d73a9e291c179b85b3414119799046d2::0108eaf3c1f4a769343889d5ef3e69045437c9b7::927e649bc9dc5740285e4b4e9899421c2bbfefbe::939b896a06c0cff661076d0ca3fbe8c1d5552e83::d0f22a99f9f24d07990e02da55ed937c98d41e03::0df96475973cf94b178de1825d935f42a6bd642e::b5445247ad19ee0fb7f9a5ca31fd654cdaf6b005::51ae6f4bb19014dc081b75864cbede1d612c02d2::1b699fc8ad0eaf3503ec095413866ec5e4794162::ccf256d8dcc68d975bbf00780c3b4096f47e29d3::5d57b821d04eab3fd9b4bdf78254dc428d203be7::bb0007f70420445f140004587aa1228895ab6653::9bd5c86c3bdc70bf29be7f756d1dec2fdd4eaaf0::f01f03e96390fb493830337571de578241619d4f::075d0e2c3f7d5b3b121fb833fc774e41e9505962::3033dbed284c40678670fac232af9eefaf09a282::8f5c7509d6343d740e09364bef34ee984def0760::c8918c6972d122531a5ae750ae1b22ff7d539f10::348d693c6a846994f0f06ce307f23374101b25f6::a0c3c1e1f796c215685e4e4bcd3e8c9178936492::488699166c3558963fa82d4689a35f8c3fd93f47::ba910d76509158d531c637c4ab777beb8b20e53d::3d4d7420ae43a35ae01343ced6d7c685d0b667ee::ce755697fc926b7fa5c783a27ca814574045c961::9d5699a05ca625d531988d563d2eda7e4b290fed::1c2717d3f5a3ce0ea97f832d1d008e053ad47acd::f980289fd2c1b9073a94b5d49b780a49f5e2933c::ff3b9ca1308056b2c939ce77fbea1c4665f3619e::c0d06633f0eafd1ef8cf51b4913894d6c8c9b58f::99123ad12f71ce3e7fe70656810e53133665527c::f662a748a5d55159e1fae125a7b28695854141a2::491d6916c976c40bb8e0f0992f35d85ff7169d89::a4b55827721a5967299f3c1531afb3d6d81e4ac0::afcd01bf25c0d7742d07b10dd8a465cffef4b9fe::a8e7a009d22f787046954b9e043363940deca3da::91942219210bc68d09deea0801e54b9f7c187bc9::167b645a2a0e983cb681d94adbe17480c824e701::0e56c1de704370f3a2ef0cf9a2d945330b5653c7::ef5faeb4a5d0d3a49e4ac7dc378459cdba5a76b7::8aadc6f0f4316d96397ef07876b1c0f9ff7dcf6c::2cf38aebacaf78260848a54bfbb5bf5a9b627598::1b12d08a0f8489f0f3970f6d5e40ed119127c856::493c10ea2999557b15e5a1efd523e6c987803750::ca6a12d6e5a8e1034e8d472fb6652111e1314a70::2011cc64e1bdcc252b96b9637c6283efb9402013::517060ab59c383f912c1be838a6d36afb128288f::687e68d88f5e1a7bb6a2d876fbbc5b8c4571d853::be913c3964069fa9ff7c8a615e06705e3a6ec435::dc2bc388bc8c6c345337052bf0d60f5243d899d4::7e8a74d40125be9d8afc8571ab7e28c67662c484::2c8f34995378e4a18711cf5f947e8465227d3748::38d06478614adcf68a45947cb162c3152e2d7bb1::d1577cfe3d7f01f2876e3cbe682065012246697c::afe5880fa6e0aa805a9e70f460bdce9ba2bd369f::69599b63de927091faf1d804b6457f65014080d6::c8edd4fda45bbc7c99beaaf2d53f4de59c3fac54::ae2baab1aa278c065dc742a3ffe65c65a7b87dc9::845cc5c78d409a9cad589be09dda100f96544610::029dd435e4e13eb4c9490fc0d65f5f976bdffa0a::74e59ea8b674fac08a6ea4da03e58e29fc57a709::dbd26e92a7b943a57c2826a749ae25e3ce9e143c::55e295470303a6abcf152f24a1a8c7864dab5ef6::8bd56f0f7ad2b48a50f12c49d436a469fdbb7135::df37c91745a3fb241fafa23c03387e33eb82c74f::dee5915aac009b6b6456a81ae7b8927866d0c240::
https://api.github.com/repos/rails/rails,9768,do_not_freeze_number_helper_defaults::3-2-stable,0,merged,actionview::,"Closes #9767. The defaults are already non-frozen on master. I think it's safe to backport this change to 3-2-stable. I don't think that needs a changelog entry, can you remove it please? ::sure. ::",f662a748a5d55159e1fae125a7b28695854141a2::
https://api.github.com/repos/rails/rails,9616,multiple_select_name_double_square_brackets::master,0,merged,,"Fix incorrectly appended square brackets to a multiple select box, if an explicit name has been given and it already ends with ""[]"". Actually, I found this bug when upgrading from 3.2.12 to 3.2.13.rc2, so I'd like to backport this to 3-2-13. Formtastic is always providing an explicit name, and it already ends with ""[]"" for one-to-many associations (see [here](https://github.com/justinfrench/formtastic/blob/master/lib/formtastic/inputs/select_input.rb#L201)). Before: ``` ruby select(:category, [], {}, {:multiple => true, :name => ""post[category][]""}) # => <select name=""post[category][][]"" ...> ``` After: ``` ruby select(:category, [], {}, {:multiple => true, :name => ""post[category][]""}) # => <select name=""post[category][]"" ...> ``` Probable culprits are 175ba04c on master and 2a6f208e on 3-2-13. /cc @tenderlove would you like me to open a separate PR with a backport? Please use 1.9 hash style in the examples. Also the last hash doesn't need the brackets. ::Same here, use new style hash. ::",8e05a6f6380c6ddbef5a0620b30d19dbca7f2f15::
https://api.github.com/repos/rails/rails,9594,3-2-stable_prefix_suffix::3-2-stable,0,merged,activerecord::,"This pull request address a error at `3-2-stable` branch with Oracle database. because Oracle database identifier cannot be larger than 30 characters. This pull request is just for `3-2-stable` no cherry-pick for the master branch needed as its original fix made in #7689, which is created as a backport for `3-2-branch` only. In master branch, it must be tested in different way. ``` ruby $ ARCONN=oracle ruby -Itest test/cases/ar_schema_test.rb -n test_schema_define_with_table_prefix_and_suffix Using oracle with Identity Map off Run options: -n test_schema_define_with_table_prefix_and_suffix # Running tests: [1/1] ActiveRecordSchemaTest#test_schema_define_with_table_prefix_and_suffix-- create_table(:fruits) -> 0.0146s -- initialize_schema_migrations_table() = 0.05 s 1) Error: test_schema_define_with_table_prefix_and_suffix(ActiveRecordSchemaTest): ArgumentError: Index name '_pre_unique_schema_migrations_suf_' on table '_pre_schema_migrations_suf_' is too long; the limit is 30 characters /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_schema_statements.rb:151:in `add_index' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb:429:in `initialize_schema_migrations_table' /home/yahonda/git/rails/activerecord/lib/active_record/migration.rb:466:in `block in method_missing' /home/yahonda/git/rails/activerecord/lib/active_record/migration.rb:438:in `block in say_with_time' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/benchmark.rb:281:in `measure' /home/yahonda/git/rails/activerecord/lib/active_record/migration.rb:438:in `say_with_time' /home/yahonda/git/rails/activerecord/lib/active_record/migration.rb:458:in `method_missing' /home/yahonda/git/rails/activerecord/lib/active_record/migration.rb:334:in `method_missing' /home/yahonda/git/rails/activerecord/lib/active_record/schema.rb:53:in `define' test/cases/ar_schema_test.rb:52:in `perform_schema_define!' test/cases/ar_schema_test.rb:30:in `test_schema_define_with_table_prefix_and_suffix' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:1301:in `run' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit/testcase.rb:17:in `run' /home/yahonda/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:36:in `block in run' /home/yahonda/git/rails/activesupport/lib/active_support/callbacks.rb:425:in `_run__1571136118336013312__setup__1288503554465957031__callbacks' /home/yahonda/git/rails/activesupport/lib/active_support/callbacks.rb:405:in `__run_callback' /home/yahonda/git/rails/activesupport/lib/active_support/callbacks.rb:385:in `_run_setup_callbacks' /home/yahonda/git/rails/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks' /home/yahonda/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:35:in `run' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:919:in `block in _run_suite' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:912:in `map' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:912:in `_run_suite' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:657:in `block in _run_suites' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:655:in `each' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:655:in `_run_suites' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:867:in `_run_anything' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:1060:in `run_tests' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:1047:in `block in _run' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:1046:in `each' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:1046:in `_run' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:1035:in `run' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:21:in `run' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:774:in `run' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:366:in `block (2 levels) in autorun' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:27:in `run_once' /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:365:in `block in autorun' Finished tests in 0.087222s, 11.4650 tests/s, 0.0000 assertions/s. 1 tests, 0 assertions, 0 failures, 1 errors, 0 skips ruby -v: ruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-linux] $ ```",5d57b821d04eab3fd9b4bdf78254dc428d203be7::
https://api.github.com/repos/rails/rails,9576,backport_fix_explicitly_inheraitance_column_to_3_2_stable::3-2-stable,0,merged,activerecord::,This is backported from master (cdfcbc4). See pull request https://github.com/rails/rails/pull/5327 cc @tenderlove @jonleighton,55e295470303a6abcf152f24a1a8c7864dab5ef6::8bd56f0f7ad2b48a50f12c49d436a469fdbb7135::
https://api.github.com/repos/rails/rails,9485,backport-6755-to-3-2-stable::3-2-stable,0,merged,activerecord::,CSV fixture support was removed 1716da0720419. So I think this should be backported :smiley:,3170d2b7689f2e7f63bac4a5dee050ca03005678::
https://api.github.com/repos/rails/rails,9471,5837_32-stable::3-2-stable,0,merged,,"This pull request backports pull request #5837 to 3-2-stable to fix this error. ``` ruby $ ARCONN=oracle ruby -Itest test/cases/migration_test.rb -n 'test_rename_table_with_prefix_and_suffix' Using oracle with Identity Map off Run options: -n test_rename_table_with_prefix_and_suffix # Running tests: E Finished tests in 0.184196s, 5.4290 tests/s, 16.2870 assertions/s. 1) Error: test_rename_table_with_prefix_and_suffix(MigrationTest): ArgumentError: New sequence name 'prefix_awesome_things_suffix_seq' is too long; the limit is 30 characters /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_schema_statements.rb:105:in `rename_table' /home/yahonda/git/rails/activerecord/lib/active_record/migration.rb:466:in `block in method_missing' /home/yahonda/git/rails/activerecord/lib/active_record/migration.rb:438:in `block in say_with_time' 1 tests, 3 assertions, 0 failures, 1 errors, 0 skips $ ``` We are going to release new version of Oracle enhanced adapter, I need to test them with the latest 3-2-stable branch.",97df33d818602d452a0873e0affe0263ed3c2abb::
https://api.github.com/repos/rails/rails,9430,backport-7072-to-3-2-stable::3-2-stable,0,merged,activerecord::,I think #7072 is a bug. so it should be backported to 3-2-stable.,905b7df1fac8332547b9eb7fc4d5b083c6fc1031::
https://api.github.com/repos/rails/rails,9428,backport-9197::3-2-stable,0,closed,activerecord::,This is to backport #9197.,e7de5ad447de82d1f0a2e3fc6c1f69e0fc1e7f97::
https://api.github.com/repos/rails/rails,9406,3-2-stable-ruby-2::3-2-stable,1,merged,,"This PR is pretty much a bunch of backport commits since we already fixed a lot of stuff in `master`. This will making sure that you'll be able to use your Rails 3.2.x project with Ruby 2.0.0 that just came out today. All tests are green: https://travis-ci.org/rails/rails/builds/5027376 And yes, happy 20th birthday Ruby! ![credit: http://clintandelyse.blogspot.com/2009/09/happy-birthday-ruby.html](https://lh3.ggpht.com/_kYHP9FOYrMk/Sqki2JlGBaI/AAAAAAAAAiw/nPPkrFqylAQ/s400/IMG_1772.JPG)",fe4fce80f3ee80b089fca482f04788af0b9d4d17::9a0cdc68b5b0fc08e60069cb5512bf2ad6b2a76b::b59b72a5aeb799ddaa43dc7ed8ef8101a6c95896::45e9cac12ca99a51ef10e5ee423a6712818ae145::7cc26fd15e27c4a13705a844538bebfdd0461729::2a5f6d8fe6898f2570ba66382336d56894a43322::42d7927c22a2c219d6145d9375be65a04a83dce3::abf0c710210440e50b33b3e708b1e7e1dfbf9d65::979e198c14a95010aca17b6e640f386961360794::0190dcae3c7d4dba5d8b322c04236feea22fc0f9::5693d444686d84d403de5af5d3e23ffe8147001d::8598633cc1d5ea402f8b49b1f71cd92180cc1138::621b5b7f0e608bc916a66a6e046f11485317949c::2a12a04a54590d3a5f2abf4cd4eff3a7b1ee6ef4::
https://api.github.com/repos/rails/rails,9397,9201_duplicate_associations_with_natural_key::master,0,merged,,"This is only a test-case to prevent regressions for the issue #9201. I think we should include it in rails master where it's already fixed to make sure we don't run into the same problem again. I would be willing to backport the fix to 3-2-stable but I have no idea what commit actually fixed it. I tried to bisect but was with no luck because I could not get bundle to work on most commits (renamed gems, missing gems, etc...). Remove this blank line please ::",96c1cafd3ab6250875cc62034000ea83ae1587af::
https://api.github.com/repos/rails/rails,9388,9367_wrong_schema_after_remove_column::3-2-stable,0,merged,,"Backport #2312. Fixes #9367. I also added a test-case to make sure that renaming or removing a column preserves the primary key. While the backport already included a test for the sqlite adapter I wanted to make sure that we cover the new issue from #9367. Also the added test is not adapter specific so we can lock the behavior for all adapters. I would also like to submit another PR containing only the test-case to the master branch. While the issue is already fixed there I think we should add the new test-case. Does this table need to be dropped after the test? ::Remove extra space before column name. ::You don't need to use `merge!`, you can just set the value directly in both cases: ``` ruby options[:primary_key] = primary_key(from) if primary_key(from) != 'id' unless options[:primary_key] options[:id] = !columns(from).detect{|c| c.name == 'id'}.nil? && 'id' == primary_key(from).to_s) end ``` Or something like that. ::I guess we can leave the sentence in the same line :) ::Also, perhaps it's worth saying it's a `custom primary key`, wdyt? ::lazy me copied this straight from the original patch ;) I'll ping you when I updated everything. ::",8f6fa345e5c865acefa063c3e2cd62553fa9f2eb::
https://api.github.com/repos/rails/rails,9374,improved_match_shorthand_syntax::3-2-stable,0,merged,,This is a backport of #9361 to fix #7554.,a72dab0b6a16ef9e83e66c665b0f2b4364d90fb6::
https://api.github.com/repos/rails/rails,9278,backport-hmt-counter-cache-bug::3-2-stable,0,merged,,"This backport fixes issue #7630, a bug in `has_many_through` counter caches, in Rails 3.2 (the original commit was ea77ec2).",18ffe50581f41a4f24d791e42826c977276a0df3::
https://api.github.com/repos/rails/rails,9252,8423_hmt_preloading_bug::master,0,merged,,"this fixes #8423. The problematic area, was that the through_association-preloader eager-loaded the `has_many` association even when the there were additional conditions on the hmt association. This resulted that a subset of the `has_many` association was cached. After the patch AR only caches the `has_many` association when there are no additional conditions on the `has_many :through` association. If possible I'd like to submit a backport to `3-2-stable`.",4a4ff504590adfb516502ea332ad0608652b3519::
https://api.github.com/repos/rails/rails,9243,desc_id::master,0,closed,activerecord::,"This pull request address these 3 failures not catching `ActiveRecord::StatementInvalid` exceptions with Oracle. ``` ruby $ ARCONN=oracle ruby -Itest test/cases/relation/where_test.rb -n test_where_error Using oracle Run options: -n test_where_error --seed 37633 # Running tests: F Finished tests in 1.690807s, 0.5914 tests/s, 0.5914 assertions/s. 1) Failure: test_where_error(ActiveRecord::WhereTest) [test/cases/relation/where_test.rb:84]: [ActiveRecord::StatementInvalid] exception expected, not Class: <ActiveRecord::ConnectionAdapters::OracleEnhancedConnectionException> Message: <""\""DESC id\"" failed; does it exist?""> ---Backtrace--- /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_connection.rb:76:in `describe' /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_oci_connection.rb:213:in `rescue in describe' /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_oci_connection.rb:208:in `describe' /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:1105:in `columns_without_cache' /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:1096:in `columns' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:86:in `block in prepare_default_proc' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:90:in `yield' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:90:in `default' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:90:in `block in prepare_default_proc' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:46:in `yield' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:46:in `default' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:46:in `columns_hash' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:104:in `build' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:51:in `expand' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:17:in `block (2 levels) in build_from_hash' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:16:in `each' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:16:in `block in build_from_hash' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:6:in `each' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:6:in `build_from_hash' /home/yahonda/git/rails/activerecord/lib/active_record/relation/query_methods.rb:772:in `build_where' /home/yahonda/git/rails/activerecord/lib/active_record/relation/query_methods.rb:450:in `where!' /home/yahonda/git/rails/activerecord/lib/active_record/relation/query_methods.rb:438:in `where' /home/yahonda/git/rails/activerecord/lib/active_record/querying.rb:9:in `where' test/cases/relation/where_test.rb:85:in `block in test_where_error' --------------- 1 tests, 1 assertions, 1 failures, 0 errors, 0 skips ``` ``` ruby $ ARCONN=oracle ruby -Itest test/cases/finder_test.rb -n /test_find_by/ Using oracle Run options: -n /test_find_by/ --seed 760 # Running tests: ....F.................F.... Finished tests in 4.946353s, 5.4586 tests/s, 9.2998 assertions/s. 1) Failure: test_find_by_id_with_hash(FinderTest) [test/cases/finder_test.rb:19]: [ActiveRecord::StatementInvalid] exception expected, not Class: <ActiveRecord::ConnectionAdapters::OracleEnhancedConnectionException> Message: <""\""DESC id\"" failed; does it exist?""> ---Backtrace--- /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_connection.rb:76:in `describe' /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_oci_connection.rb:213:in `rescue in describe' /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_oci_connection.rb:208:in `describe' /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:1105:in `columns_without_cache' /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:1096:in `columns' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:86:in `block in prepare_default_proc' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:90:in `yield' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:90:in `default' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:90:in `block in prepare_default_proc' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:46:in `yield' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:46:in `default' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:46:in `columns_hash' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:104:in `build' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:51:in `expand' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:17:in `block (2 levels) in build_from_hash' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:16:in `each' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:16:in `block in build_from_hash' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:6:in `each' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:6:in `build_from_hash' /home/yahonda/git/rails/activerecord/lib/active_record/relation/query_methods.rb:772:in `build_where' /home/yahonda/git/rails/activerecord/lib/active_record/relation/query_methods.rb:450:in `where!' /home/yahonda/git/rails/activerecord/lib/active_record/relation/query_methods.rb:438:in `where' /home/yahonda/git/rails/activerecord/lib/active_record/relation/finder_methods.rb:48:in `find_by' /home/yahonda/git/rails/activerecord/lib/active_record/dynamic_matchers.rb:76:in `find_by_id' /home/yahonda/git/rails/activerecord/lib/active_record/dynamic_matchers.rb:20:in `method_missing' test/cases/finder_test.rb:20:in `block in test_find_by_id_with_hash' --------------- 2) Failure: test_find_by_title_and_id_with_hash(FinderTest) [test/cases/finder_test.rb:25]: [ActiveRecord::StatementInvalid] exception expected, not Class: <ActiveRecord::ConnectionAdapters::OracleEnhancedConnectionException> Message: <""\""DESC id\"" failed; does it exist?""> ---Backtrace--- /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_connection.rb:76:in `describe' /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_oci_connection.rb:213:in `rescue in describe' /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_oci_connection.rb:208:in `describe' /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:1105:in `columns_without_cache' /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:1096:in `columns' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:86:in `block in prepare_default_proc' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:90:in `yield' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:90:in `default' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:90:in `block in prepare_default_proc' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:46:in `yield' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:46:in `default' /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/schema_cache.rb:46:in `columns_hash' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:104:in `build' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:51:in `expand' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:17:in `block (2 levels) in build_from_hash' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:16:in `each' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:16:in `block in build_from_hash' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:6:in `each' /home/yahonda/git/rails/activerecord/lib/active_record/relation/predicate_builder.rb:6:in `build_from_hash' /home/yahonda/git/rails/activerecord/lib/active_record/relation/query_methods.rb:772:in `build_where' /home/yahonda/git/rails/activerecord/lib/active_record/relation/query_methods.rb:450:in `where!' /home/yahonda/git/rails/activerecord/lib/active_record/relation/query_methods.rb:438:in `where' /home/yahonda/git/rails/activerecord/lib/active_record/relation/finder_methods.rb:48:in `find_by' /home/yahonda/git/rails/activerecord/lib/active_record/dynamic_matchers.rb:76:in `find_by_title_and_id' /home/yahonda/git/rails/activerecord/lib/active_record/dynamic_matchers.rb:20:in `method_missing' test/cases/finder_test.rb:26:in `block in test_find_by_title_and_id_with_hash' --------------- 27 tests, 46 assertions, 2 failures, 0 errors, 0 skips $ ``` For other database adapters, this test already passes but expected `ActiveRecord::StatementInvalid` exception occurs within ActiveRecord::PredicateBuilder, not at genereated statements. Here is the example. - test code ``` ruby def test_where_error assert_raises(ActiveRecord::StatementInvalid) do Post.where(:id => { 'posts.author_id' => 10 }).first end end ``` - Tested with sqlite3 adapter current master branch ``` ruby $ ARCONN=sqlite3 ruby -Itest test/cases/relation/where_test.rb -n test_where_error Using sqlite3 Run options: -n test_where_error --seed 44190 # Running tests: [82, 91] in test/cases/relation/where_test.rb 82 83      def test_where_error 84        assert_raises(ActiveRecord::StatementInvalid) do 85          require 'debugger' 86          debugger => 87          Post.where(:id => { 'posts.author_id' => 10 }).first 88        end 89      end 90 91      def test_where_with_table_name test/cases/relation/where_test.rb:87 Post.where(:id => { 'posts.author_id' => 10 }).first (rdb:1) puts Post.where(:id => { 'posts.author_id' => 10 }).first.sql ActiveRecord::StatementInvalid Exception: Could not find table 'id' (rdb:1) ^C. ``` - Tested with sqlite3 adapter with this fix ``` ruby $ ARCONN=sqlite3 ruby -Itest test/cases/relation/where_test.rb -n test_where_error Using sqlite3 Run options: -n test_where_error --seed 40443 # Running tests: [82, 91] in test/cases/relation/where_test.rb 82 83      def test_where_error 84        assert_raises(ActiveRecord::StatementInvalid) do 85          require 'debugger' 86          debugger => 87          Post.where(:id => { 'posts.author_id' => 10 }).first 88        end 89      end 90 91      def test_where_with_table_name test/cases/relation/where_test.rb:87 Post.where(:id => { 'posts.author_id' => 10 }).first (rdb:1) puts Post.where(:id => { 'posts.author_id' => 10 }).first.sql ActiveRecord::StatementInvalid Exception: SQLite3::SQLException: no such column: id.posts.author_id: SELECT  ""posts"".* FROM ""posts""  WHERE ""id"".""posts.author_id"" = 10  ORDER BY ""posts"".""id"" ASC LIMIT 1 (rdb:1) ^C. ``` I think there's a mistake in this method, `columns_hash` is not correctly being used, as @tenderlove has fixed in d29235d2a4df94b6db7d3e45ab15a6799363384e for branch 3-2-stable. I'm going to forwardport his commit to master, @yahonda can you check it again with latest master then? Thanks! ::Thanks for the comment. I'll check and rebase it after your fix. ::Hm actually, I'll have to confirm this with @tenderlove, I have doubts :) ::@carlosantoniodasilva this is correct.  In master it's a method call, in 3-2-stable it's a hash. ::@tenderlove hmm.. I have backported one of your commits to 3-2 related to that, because there was a travis failure if I'm not wrong. [Here's the file in 3-2-stable](https://github.com/rails/rails/blob/3-2-stable/activerecord/lib/active_record/connection_adapters/schema_cache.rb#L44), and the last commit there is the backport. See any possible problem with that? ::",6d5d4a003fa5889590be02cc20c8660ca81735c0::
https://api.github.com/repos/rails/rails,9239,use_ruby_version_on_3_2::3-2-stable,0,merged,,It's not very practical to have different ignores for ruby-version configuration files on master and 3-2-stable. I suggest we also ignore `.ruby-version` on `3-2-stable` as we did on master. This is a combined backport of 36acc0a and 99bb2fd,baeafb4914e044a7745c693fc4ba7501ca7c8b25::
https://api.github.com/repos/rails/rails,9225,3-0-where-with-empty-hash::3-0-stable,0,closed,,This is a backport of pull #9220 to rails 3.0,2591b3f64650506b0a67289bb89806ef4b9792a2::
https://api.github.com/repos/rails/rails,9210,3-0-mysql-quote-numeric::3-0-stable,0,merged,activerecord::,This is a backport of pull #9207 to rails 3.0 Upstream pull request submitted to mysql2 to fix this test for the mysql2 adapter https://github.com/brianmario/mysql2/pull/351 ::,0fc58caf184c77cd741e92655f33e34f554b025b::b4be619650bd8c7b85735eb290bc0257094e3da0::
https://api.github.com/repos/rails/rails,9209,3-1-mysql-quote-numeric::3-1-stable,0,merged,activerecord::,This is a backport of pull #9207 to rails 3.1,26e13c3ca71cbc7859cc4c51e64f3981865985d8::
https://api.github.com/repos/rails/rails,9208,3-2-mysql-quote-numeric::3-2-stable,0,merged,activerecord::,This is a backport of pull #9207 to rails 3.2,04c2d2e2e4197a1564c33f09d3e52253d845925f::
https://api.github.com/repos/rails/rails,9173,backport_perftest_fix::3-2-stable,0,merged,activesupport::,"This is a backport of https://github.com/rails/rails-perftest/pull/2 to fix #4938. The rake task does now work but while testing I got problems with the `rails benchmarker` and `rails profiler` commands: ``` local-3-2-stable » rails profiler '10.times{""a string""}' /Users/senny/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/test/unit.rb:167:in `block in non_options': file not found: 10.times{""a string""} (ArgumentError) from /Users/senny/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/test/unit.rb:146:in `map!' from /Users/senny/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/test/unit.rb:146:in `non_options' from /Users/senny/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/test/unit.rb:207:in `non_options' from /Users/senny/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/test/unit.rb:52:in `process_args' from /Users/senny/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/minitest/unit.rb:891:in `_run' from /Users/senny/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/minitest/unit.rb:884:in `run' from /Users/senny/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/test/unit.rb:21:in `run' from /Users/senny/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/test/unit.rb:326:in `block (2 levels) in autorun' from /Users/senny/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/test/unit.rb:27:in `run_once' from /Users/senny/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/test/unit.rb:325:in `block in autorun' ``` I could fix this by clearing `ARGV` after the [""on-the-fly-test-case""](https://github.com/senny/rails/blob/backport_perftest_fix/railties/lib/rails/commands/benchmarker.rb#L32) is defined. This would be another hacky workaround though and I'm open for better ideas.",1db54d7d01ea36a9d8c0c6276d66d04a9a6c2fac::b47f8d035ec6a38a69eb5b3bdb1e27bb40e574c7::
https://api.github.com/repos/rails/rails,9043,backport_7536::3-2-stable,0,merged,activerecord::,Backport #7536 to fix #8968. Conflicts: ``` activerecord/CHANGELOG.md activerecord/lib/active_record/relation/calculations.rb ``` The code was slightly different than the one on master but I think its safe to apply this backport.,b6d49312920c0b3163064e44ca45871c68136b1c::
https://api.github.com/repos/rails/rails,9042,9034_float_0_0_is_always_dirty::master,0,merged,activerecord::,"This is a fix for the issue described in #9034 It treats `'0.0'` the same way as `'0'`. This makes sure that nullable numeric column don't get changed when you assign `'0.0'`. If it's ok, I'll backport that change, since the behavior was reported from `3.2.x` Wouldn't this break if value is equal to '0.00'? ::Maybe this could work better: ``` ruby numeric_value = Float(value) rescue nil numeric_value && numeric_value != 0 ``` ::@senny you missed your name here, no? ::I just submitted a dup patch, sorry (#9054).  Mine doesn't break for '0.00' though. ::Will fix that. thanks :) ::I think you're missing a backslash before the dot.  i.e.: ``` value !~ /\A0+(\.0+)?\z/ ``` ::good catch, thanks. It's fixed now. ::Perhaps we can use `assert_empty data.changes`? ::",4b7a33e1423c207b25da7e34d8ea45c71ba12298::
https://api.github.com/repos/rails/rails,8914,fix-header-bloat::master,0,merged,actionpack::,"After the Rails server ran for long enough, Chome started returning a `net::ERR_RESPONSE_HEADERS_TOO_BIG` error on every page load, and curl would error with `curl: (27) Avoided giant realloc for header (max is 102400)!`. A server restart would reset the headers and made the problem temporarily go away. Investigating showed that the same `IE=Edge,` headers were being appended on every request until finally the header size exceeded the 100k limit that browsers impose. This patch ensures that the IE=Edge and other header variables only get appended to the X-UA-Compatible header if they are not there already, and it makes the test pass that I modified to catch the problem. The commit that introduced this problem (d8c1404107501e131e4c7c653794768f5c461793, @nikitug) was applied to both master and 3-2-stable, so this fix should be backported to 3-2-stable as well. I wonder what the performance is on introducing a `split/each` in middleware. ::",7925884b5e03127b40f4fd8987b8be115a406c4a::
https://api.github.com/repos/rails/rails,8846,revert_5861::3-1-stable,0,merged,,"Revert #5861. Feature-detect which MultiJson API to use. Conflicts: activesupport/activesupport.gemspec This backports multi_json version depedency changes as applied. Rationale: #5861 Patch by sferik (cherry-picked) It is missing the header with the next Rails version (3.1.11) ::added (without date); I am kinda new to this, I would assume this would not create a new release and that it would be more than just this change, if that is not true I will add the current date? ::Yes, since 3.1.x only get security releases we don't know when will be the next release. ::",7b9bab6a96fcfcc85813bc1203f11235f21214fc::
https://api.github.com/repos/rails/rails,8838,8806_3-2-stable::3-2-stable,0,merged,activerecord::,"This pull request backports commit 77516a7 to `3-2-stable` branch. Conflict resolution: - Revert ruby 1.9 style hash to support ruby 1.8 - Do not include 8f59ffce into 3-2-stable This commit works with `ruby-1.9.3-p362` without any regressions. But it causes two `RuntimeError: ActiveRecord::Associations::Association` errors at `test_sqlite3` when tested with `ruby-1.8.7-p371`. - The full output https://gist.github.com/4490252. - A minimum testcase is https://gist.github.com/4490257 It's strange for me, Tested `3-2-stable` branch without my fix, a minimum testcase causes the same `RuntimeError: ActiveRecord::Associations::Association`.",3d1a879f4cf9931a81477b63f9f999d52bac771c::
https://api.github.com/repos/rails/rails,8763,backport-to-hide-warning::3-2-stable,0,merged,,backport 4f0f1b5. 1.9.3-p362 warned unused variables. this test failed because of this warning.,8a1ba017c657353daebf13a1f30d1a028967dc36::
https://api.github.com/repos/rails/rails,8665,8661_should_not_append_charset_if_already_present::3-2-stable,0,merged,,This is a backport of #8662 to fix #8661,55a886b6e9bae1986a357626b08522a838aedb3e::
https://api.github.com/repos/rails/rails,8558,backport_3489::3-2-stable,0,merged,,This is a backport of #8522 to fix #3489 Conflicts: ``` activerecord/CHANGELOG.md activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb activerecord/test/cases/migration/rename_column_test.rb ``` The files looked quite different on `rails/3-2-stable` but the affected line is exactly the same. Also the tests have a different format.,9f69d42860a56c585271484f49445f1b43dac357::
https://api.github.com/repos/rails/rails,8500,8492_migrations_crash_on_specific_path::master,0,merged,activerecord::,"The Regexp was to wide and matched folders named with numbers and the text 'rb' as a migration. This led to problems when you have a migration inside a subdirectory named eg. ""10_urban"". I added a test-case to reproduce the issue and made the Regexp more strict. I think this can be safely backported to `3-2-stable`. Fixes #8492 You forgot adding your name :smile: ::I know other examples look like this one, but since there's just one migration, perhaps it'd be good to just check for `migrations[0]` and call it a day? ::",349d4606004d20cb0ace1980bcb6d0af13f6b504::
https://api.github.com/repos/rails/rails,8477,backport_8448::3-2-stable,0,merged,,This is a backport of #8450 and it resolves the issue described in #8448 Conflicts: ``` actionmailer/CHANGELOG.md actionmailer/lib/action_mailer/base.rb ```,d1b9c5fd119a6098a51eb2c2f7b2f52e53b8c240::9b72c36783516f5ef8f2fac5f6f342a6a48d8d78::
https://api.github.com/repos/rails/rails,8450,8448_mailer_return_values::master,0,merged,actionmailer::,This issue was raised in #8448 and caused by an earlier PR #8048. Previously the return value form the mailer methods was used to determine if `mail()` was called. This led to bugs when `mail()` was not the last call in the mailer method. I re-introduced the `@mail_was_called` flag to check wether `mail()` was actually called. The return value of the mailer method is ignored. This needs a backport to `3-2-stable` where the flag `@mail_was_called` is already present. Since it is internal I think is better to call `@_mail_was_called` ::,ec3429a3d6da2250f360d629fa6300e46f3d53fb::
https://api.github.com/repos/rails/rails,8413,8403_backport::3-2-stable,0,merged,,This is a backport of #8403. It fixes the issue described in #3313 Conflicts: ``` activerecord/CHANGELOG.md activerecord/test/models/developer.rb ``` I had to make some modifications to the spec because the API changed in 4.0.,1b961765871eba76d50d463d3af6c3c5926f537a::
https://api.github.com/repos/rails/rails,8329,fix-send-data-disposition-with-symbols-master::master,0,merged,,"Added a #to_s and the test /cc @carlosantoniodasilva :) (Previously #8327 which is a ready to serve port for rals/3-2-stable) Use ruby 1.9 hash syntax ::Sorry, I thought about backporting so I didn't comment. ::Still need the hash syntax update? ::Not anymore, my bad, thanks. ::",5d8faa683e230e6af54ac7616f98f3ae088e7682::
https://api.github.com/repos/rails/rails,8321,backport_7997::3-2-stable,0,merged,,This is a backport of rails/rails#7997. remove this line. ::`merge!` here ::,1a876f622865979ea6415d913adface70716e458::
https://api.github.com/repos/rails/rails,8295,8265_backport::3-2-stable,0,merged,,This is a backport of #8291 Closes #8265 Conflicts: ``` activerecord/CHANGELOG.md activerecord/lib/active_record/associations/association.rb ```,d397a38c0268e61295e23f617e9bf70d905ea610::
https://api.github.com/repos/rails/rails,8262,8229_correct_bundler_require_in_engines::master,0,merged,engines::railties::,"If you generate a full engine, this will include rake tasks from your gem under the `app` namespace. For example if you have a dependency on `rspec-rails` in your engine's `gemspec`. You will get the task `app:spec` This is a fix for #8229 Trailing whitespace snuck into the CHANGELOG. I removed it in a separate commit to make backporting easier.",7cb0c8852b4196ab92cfb7cb1f08dc5ff8084bf4::a1fd9cd1a0ecd88517febf9c9d0ca85fd07ebe25::
https://api.github.com/repos/rails/rails,8227,backport_8139::3-2-stable,0,merged,,"The `plugin new` generator always adds the dummy app rake tasks, when a dummy app was created. Closes #8224 I had to backport the commit 00fbee5bbf7896d38ccf3a26d4b6f36f9a63f358 also. Otherwise the error from #6251 would popup. This line should be here ::I see. ::",00fbee5bbf7896d38ccf3a26d4b6f36f9a63f358::e69058c15389b7f88771a95c1637b2f306d0c02f::
https://api.github.com/repos/rails/rails,8209,backport_8176::3-2-stable,0,merged,,"This is a backport of #8176 to fix #7551 I had to modify the patch, since the code looks different on `3-2-stable` than on master. Effectively it does the exact same thing tough. Since `spawn` was not available I used `clone`. Also I had to use `pluck` with an Array (in the test case) because multiple arguments are not supported on `3-2-stable`",d3006f3503cd62510f669fcac84f8dc47c3b333c::
https://api.github.com/repos/rails/rails,8205,fix_6951-32::3-2-stable,0,merged,,"This is backport #8074. I send this PR, because 3.2.9 was released. Please see  #6951 for more details. /cc @rafaelfranca",fda90755301553e184f625f3ba27d34888dbfad4::
https://api.github.com/repos/rails/rails,8201,regression_test_on_ar_cache_key_precision::master,0,merged,,Issue #8195 was fixed in #6376. This test may be backported to `3-2-stable` as well as #6376.,ff2973a09a5b76473a62cc75e77851a5715d5a33::
https://api.github.com/repos/rails/rails,8199,backport_8182::3-2-stable,0,merged,,This is a backport of #8185 to fix #8182,be79632b96d6fe6b844c99561ce96f540e98cae0::
https://api.github.com/repos/rails/rails,8176,7551_pluck_with_select::master,0,merged,activerecord::,"I changed `#pluck` to spawn a new relation and then modify the `select_values` directly to ignore previously present `select` clauses. This patch simply ignores present `select` clauses. There was also trailing whitespace in the `CHANGELOG.md` (created a separate commit to remove it, so that it's easier to backport) This is a fix for #7551 The `ActiveRecord::Calculations` module has a couple of methods, which modify the `select_values` of a relation directly. I thought about a small refactoring to expose a method on `ActiveRecord::QueryMethods` to assign fields directly to `select_values` instead of concatenate them as `select` does. This could be named something like `#select_only` or `#force_select` (could also be implemented with a parameter to `select` like `:force => true` or `:override => true`. I wanted to submit this PR first though to ask wether this is necessary or not. You can indent this with four spaces to highlight correctly. ::OMG! how did a tab sneak into my commit... thanks for the hawk-eye! ::It still looks not indented in github, something weird? ::let me try to indent more. ::Double space here also :codestyle_nazi: ::",d5ac2801d9ba6eea0add944e13ba8f5c8754f117::663d9ef67003d3bec44295d29f3c254951202926::
https://api.github.com/repos/rails/rails,8149,backport_7842_to_rails_3_2_stable::3-2-stable,0,merged,,"this is a backport of #8115 to fix #7842 The problem was already fixed in master, the solution used for `3-2-stable` is different.",d12e75340996f174649ed584b062f46aa030e0dd::
https://api.github.com/repos/rails/rails,8134,yaml_fix_for_time_with_zone::2-3-stable,0,closed,,"Just ran into this one while working on a legacy Rails 2.3 site. Try `YAML.load(YAML.dump(t))` where `t` is an instance of `ActiveSupport::TimeWithZone`. Under Ruby 1.9.3, this fails with the following message: ``` NoMethodError: undefined method `period_for_utc' for nil:NilClass from /home/alex/Programming/Ruby/rails/activesupport/lib/active_support/time_with_zone.rb:58:in `period' from /home/alex/Programming/Ruby/rails/activesupport/lib/active_support/time_with_zone.rb:44:in `time' from /home/alex/Programming/Ruby/rails/activesupport/lib/active_support/time_with_zone.rb:304:in `respond_to?' from /home/alex/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/psych/visitors/to_ruby.rb:284:in `init_with' ``` The solution is to backport `TimeWithZone#encode_with` from Rails 3. Under Ruby 1.8.7, `YAML.dump` also fails, with a different message: ``` NoMethodError: private method `gsub' called for #<StringIO:0x7f16d2215a08> from ./activesupport/lib/active_support/time_with_zone.rb:145:in `to_yaml' ``` Under Syck, `YAML.dump` passes a `StringIO` to `to_yaml` (rather than the ""options"" Hash which the author of `TimeWithZone#to_yaml` seemed to expect). Naturally, `gsub` fails on the `StringIO` object. The solution is simply to convert it to a String first.",fb2fbbde8b74cbac50f54cd4931e2ea82c3a7754::92def2e4deb4d1a384ddba1f1e5b438cf4a67200::228e8fd3a242ecf91348dec587f76a49d5a67007::79a5f307270c4d4b1b732fda5fd001162246f07b::
https://api.github.com/repos/rails/rails,8133,yaml_fix_for_time_with_zone::master,0,closed,,"Just ran into this one while working on a legacy Rails 2.3 site. Try `YAML.load(YAML.dump(t))` where `t` is an instance of `ActiveSupport::TimeWithZone`. Under Ruby 1.9.3, this fails with the following message: ``` NoMethodError: undefined method `period_for_utc' for nil:NilClass from /home/alex/Programming/Ruby/rails/activesupport/lib/active_support/time_with_zone.rb:58:in `period' from /home/alex/Programming/Ruby/rails/activesupport/lib/active_support/time_with_zone.rb:44:in `time' from /home/alex/Programming/Ruby/rails/activesupport/lib/active_support/time_with_zone.rb:304:in `respond_to?' from /home/alex/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/psych/visitors/to_ruby.rb:284:in `init_with' ``` The solution is to backport `TimeWithZone#encode_with` from Rails 3. Under Ruby 1.8.7, `YAML.dump` also fails, with a different message: ``` NoMethodError: private method `gsub' called for #<StringIO:0x7f16d2215a08> from ./activesupport/lib/active_support/time_with_zone.rb:145:in `to_yaml' ``` Under Syck, `YAML.dump` passes a `StringIO` to `to_yaml` (rather than the ""options"" Hash which the author of `TimeWithZone#to_yaml` seemed to expect). Naturally, `gsub` fails on the `StringIO` object. The solution is simply to convert it to a String first.",aa401bd75a055a0bb12094128b01c8ce5fc2abe8::ce5af2fefe0e447669fa8b7031f07558bfc84f4a::dcf0f97514851face2dd24b1f39eabee413fcfc2::0d767fd24f9fd2a4824e7620bc645d1cdd70e983::04fa5af6a65d1d0e03d3c57d03a2fc8abd11909a::6dbc75fd7625c0248d269cc3127910cb4c888ed9::aeff1719ab9c4a0d1a9abd7a609ed8fb9646a0d8::f194d65f36be29971601664c880cb9b23ee2a95b::6d1344de5e6bcbd8de6ccd8cf2793fabe069102a::adcfb4e8bd886fe9d14a9b97afdb9182d8abdc95::f967b352d2abdb88b704266cdb06b53f7d8ab401::3616141fa2d2f35675d5962a1b329c8c51a5e9a3::555801c908851ea4d37f511397e049d21dcca9b5::eababa35cf5917c4ebd3f48cb29b9a2f6d1db404::77adb4bc2019e3a5b64ae8678310d176e30834d0::3c1bb40b6b0b611ba068c2e5375cbcc400c40507::8e679f1854f05c9352b47bd688d8604d981eae06::ad73a3aec4665d8a44060640e51075fd732c33a1::9ab11545235f939a58a81c0aa90c6782424f4410::7cbc546d39e7ba4e51d1f3cec80f454fdcd303ef::c4ef7bb2a0a2e2351f5ed2b1f98c9b40c441591e::6949d6f54f135da6331f8e31629e02961cf71b9b::8e7a64d09003720b333932f86f21eafdf99193bd::2de364636c06487faf48cbf9198bccd90a02eaf8::22b020db3ed3992b510b91d3fd423e510b9369e4::5d7ad7ba41c1c4298ad6467d63ee20e6c6acdbfd::0706bdce603897a869b9af753fddb81a9c9dc7ec::ddadcc7cf8332415ba48b66904ee6136b43dda6b::3568c5cee0f37f3302d739472be7477bee1b0d2a::3570f3e7f692e1d43e6be4d65bc6de986748cab8::e535b45c8661a29a04f46e1b8cc9af9fc59c6393::5d979de1a95bb6688d13781a7a42e04acdb3b9cb::ec017e158a0f006ac30bee94f81411a4d74a5227::5b1f4c51cea332e567b25dcb160cd1f983b46b43::74206aeff2b6a960612a820ec47e91ef9b778262::cd3d30d569958a0c3594711f2caf618d8b81249d::76608b13d214ff5018565dd51767f6a959a51efb::32b0b5f7b25a05179981d97d6b47aa4a1c683f2f::bb2327d9abdb03c7b6e15f30467c801058183ed2::94878c61a329891eb904ace5b06dbc50831869d8::a5696e36c6b49381e84184fcc2f164285a26a166::99bcce7ec1e7f59db3e6f1e1d3cd02e15eb59602::9d99e610be0da6e4b682ebb8cc410cdca1ca633a::25ec61330b08975ba01577cde5e59aea04e7926b::a637b5f4471be6b7284673fc7196308afb265e1d::d8f0a58dcb12de11ea62f286b831b1e758f66392::56bb5504dd1fc7314f1bd7a489ddaff973668be2::55e88eeee400294a4c41606bdbaf3284ff22f8f8::48fbe7b0d8fcecce200ea35f46a8716077e13aea::e53791f8c06cad94f69789143e442e9866f9dfe0::e3f14d12cdad03a2294c8f7d4e170bbaecefe098::ca5f5d97b9b4e24502583c2aa15b35142797e9f3::ab2d7c8b5d424da7b6d1e1d401e2a0a89d28753c::86f028799365dc670c9aeb3386eefb5fceafe433::b10bf834b77fa296b7c4a00908eb3696e785b9e3::3ff921a65ae3a1d288148c14b3be17bef1f6bca1::60e82a3ca2fe6058292db659c3411794888d1418::326188c25efa3721a7e2f68cea3534b3e2850fcf::f97da34b4f8a2f00d11e5b7d7847d46e3128e4ab::bd9ca9aed0b5ab3697a7ae27a53664f3118b132c::17b4fd25e4de8f05d40ccaa776e51636745aa8e8::9e08e196fa5c7183aec1f6dbeebe6bb7539e3c66::c66013e2c5dc77e9bfa06111fb8841b9b0e41ceb::50b7c0c104a87a9b650f4d257d986823cc34cf13::8e6a044b2b8baad14044bc615a0662f3510e54d5::d3da1a2c66ea68b88b6d99b252babf7ea2950aa1::6b0616d1b8c8a3333020e34b4a160e4ec37a8889::9d3bd87045d49b5758d75cfee871bfd5289191de::e5af56abfefe33cd5c4d0486ceaf6c1bf67cb490::4fef5af9c3632083285cbe52f9baacb64fe54ef6::4986d5ed04dba1480fe1f4a0368f099028404b20::50f3754525c61e3ea84a407eb571617f2f39d6fe::e8ba5265e0ce0aa25925ae0542ac4455f9f61719::a9032c885f1ff773b193be5bd902cb482ce0f626::aa449141b427bc5cc32650d6f5c9813e71b7d237::6a9e188c0c925634749478eb7cde43aead9b133f::f7e27bd078c9fa25c2786faf1c499c79155bbb3c::240f4e944cd90fca138aba8467456043952110cc::2ed893bdced9534d200dc2e916641ce6788a3b9c::9da7ff8842e5e6407872153b20586deaaad5be01::a815f0c5a3a873aefca76f459ce05ddde73080db::b1a97a49987ed146ba4daba901f764a47b05b236::5796a92433246e59ff56f59584d243d7d868c2b5::b760d699a867ac2e668272c7f7e80abe528aa519::3d6ed501870f2a790c2d0e288e0f294e8c5f7be3::ed8cabcec24113e5effe327a313ea9c1fed600e0::0f44d37d04063bdae12c48e85f34024775c6a9f9::b41c3ba154c2038ecc7b230693662257833869b8::e4accdec0c7a31a24e4d27d05677d20473997a42::1ac00a6844d7f22af3f19c9f1e0dde9ebda8b5a4::c7e875abdbc9ffb3162eebd7064a30e75e973337::08302d2febb7374c64eaa1b7b87b898b59468402::54a5088cd56d28303c1af204b9f632083ff6a3f5::5ed6a8447b1c9191feb431e1387f28abde7eba44::85b6d79d8a17fdef667770e31b44ac6647f8b584::e703fc101b09be4b3e34bb0cf81df4ae3d9f1694::da93d69bcb8c507a16503f883f67597338b5edeb::52c922fad1e7260a4af87409d04055af85df25f8::cbf36cf57c8ba89b5595dfb39b19e1c8ea4956a0::687d7f52c4a1d85666f1efc08ffa182e6dfeba57::a9c69f3bb01976115c5acbfab4967260f7f534d8::844da12ba6acfb71a691ba32901d7acf4cbe37b4::cc53229378665869fa94170079e0acd3e91d432a::7d2173ec5c68e10807da96f4bc8bc6ab1e89c167::09a23d22908813f4b572d8c676325a12c51cfa9a::549b2ad77c0c09fd9289372b83fc76fdf0dce35f::68bfd8a392a92e09fb8b870025227dbbda34fbb4::4a745ca67054f840a67b438277de6cf7ad6f4f15::f8f365346ec55ef388eaa43e30bd7629c375d274::05defcd63a8c60e30eaf040e73e7a4a8e95659ea::449cf50d858c9a1f7cc9fcae3ad02841da0440be::0e9190c902d075c70e2f54096ae55476ed47b6a3::56b35afbdd64a894e8efddda4651ef89ed7473b2::70af7efa16fa429f7bbc3acfc1c587c8655edf7e::80473e035a166d270a204aedaf01c2b80415b8e4::69c4e4ce65a509fdce60fc8de6d5d352a269cdff::d0d10f51d7b2edea94a00291d79cad769d8a6470::ac42e6951f0feb1a9890a3bbf5ebad87ebec08cc::78e4d88c7071c633ee1eb68f49b90719aa198eaa::fad166c15277c72b370c90e890d509d0f6c9af63::f8f4872fccbc6ba2b4970e4e9eab9ce7f0d19986::526f1e5f152e1568d3369a606fc1cdaecee894f8::67e18c523cbe55e21742ec631b90218f46c45513::bfbdeeae3080c89a0b27e42d684cbeb6206c6f60::ba9c469113d74a9c618ec6653ae153429533ac07::2d3bc99b0d4d75209445b8f352e0b51b0d18a4c0::0963774c0a6a58ba13ac0ff4763527ea7d994c0a::504f7cfbb3d6fab0f2bacaad48e0301ae0976782::046c900df27994d454b7f906caa0e4226bb42b6f::8298bef72eac980e5a5abab12a9539c0ae1b8ceb::257a29d3cca91913325a8bfef0f06b7ec6c4654b::7b6383f2631aac1b83c5efbf3ffbcb90d3961023::f57ca8772914810ae5049054b7a5b362cc1766d1::4ae48289534ae88786eef6f5cd1abce5ee2de49e::fb615cd7fd5eb81308edf095c00e576cddb0c7e7::c2d13a9a535c80e4ecad544510001865888d6d3e::99cdea7cbe69f7ea9ef82bdcf9502e47e9e4e07b::dec2c4f4e340b60e69e1a88cb6cf46c34c940244::a5d8c95a7c55f1756d944279f7f748af30b3c003::5b0f8390545d49d4c8a83f1992858a35566815d2::6f3896751ada1a37d819021cdf10d0242a3da813::ae63d5c90d40e0cb22e127b49c4d8020a3eb1228::a9ef2fd56c3f2a20e2b6e3f9b607efa0fc03271c::27651c1fad172f9648a9ae0e0269a4ee129206a1::8141f0894ecf869ee11f077e5b49e06669790632::12bbc34aca509aba5032e8cc8859ef0c0c845cca::15cafbe267385a0f22bfdb57e7be13e8b9b99af1::b154b97ea47701dc39b9583fe8247b18990c5fda::43e2bbe28e91711c34e38b4ca77023ac9d652936::7e79889d1cd7d9f1b924c3a8d67d2fd70db3fb64::d35a67bba3b9b108aff953c6d0221fbcc58c65a2::add3ccbca6ff583ac3034c09fcda4e04e2387aac::11361a9e795eea44f9b1253a4873d91c31c51fce::0fcb4302e1a1193b2a59dd76abb436b24c93e3ac::bdace5d6aa0fb9e2e29f914251e79e81b1d18b54::b2c91983dcb5e2a21ea2c0be28f86ad33b48f660::881712cf50097726ad49595a84353a4434e13dc1::56fdfeb26524168b18e63686f4fe77de26ec0e50::bac12fa5fc0bb25c7caab47451bffb6ec48c8bf3::6f17422ca7ce5c7ece14dfc8ed43e8cc0749b13b::b64d1fe637d16916c59e2ddec403d9c7cd54b0f8::a61a39ecd44153676cc56257bbe8bbdf9a727cf9::c6e33d30c1fe02e5729a269ab577967fb59a5e6c::597fb1da948b923e608324bc54b04af85b638619::383ea02e38101b7f54aeafb5cbe927273d00b25a::e8b84ab1b4dbc8399e61a938176301ea475bd985::a159fd0b8cda70140ef42990992da16797dcfd36::761c9cd5db4369d1611bded3439a92cadba2b470::8c049c6b204a13fb2d539d2b28a948d4c5feb78e::17f2fb44c0b0a836a961f02fc292ae90f06a67dc::f2990620d716146064d9d2f88ac487025d4b031a::7240e8af6a03ce018e848b9f5ad08590852f616d::9476d628a37a9a3c95dbe8ffe8f9b785593cbecc::dbbf2fd19c012f68865f797395fdb7191d00dc68::bc52d81306425f8d36b3e6ac767bda53fe06e3b1::515917f5d8678af6c57842ca5dfd7c18e67ff1fe::066518295032a8e3f3468737337b8c8299442867::1851596db5079fba95d4d93926a4db176940df7c::5a63df211d2a07c556720de688ede93fdf22efd0::9b78af95be01534b3f1a4187024d803313c0ee1f::96c19ff7cc1521b9f10ffb1004601d70b7025cba::fb526a0470d416712e142bb1aa9ed7be37da00e1::a448e746615cd3f29bf47c0e4a3b4abf2f0a844a::8beb84fa3308e842815dc89bb2aa24abed1014ff::f2e32e4fd7332d61324daaf33e99fd7f2e8e4c2a::96183e0f284bab27667e5a38fa6a1578eb029585::f5ed5c317e2280e41a9185c3000e7fbd1f7b3176::fdfc8e3b9c4905057677fd009f463a377be60b93::bdfddb09d7a87498a9733617d186378ab829dac5::36b91e34f493a52bece1193b85b01aa89a813061::df78de2bc805a75770f5c3f0d7d1c9b9c314fe85::0e52a609fd38856100ef5ab4ce8fe1207e417eca::25139ac92cea5b17791d71359bc3ae2a5d526652::44db47c63e669bdad74e4ac92a79fde13f6b839d::1681ede605251560c17728d71fe5ed7390dc291d::2826324e5681d242733b0549c5e149eeef84da12::e0eb8e9c65ededce64169948d4dd51b0079cdd10::0fee3592786da833bcfbe20afc3a9483118c3c12::84465a2cc1213fef5de944e63bca248fb1d0f5ef::6d916329b80a2dd68e22e8d9eb825617aaa94b97::92fd824480dde9d80f67a5d1619fe329e58bb8b4::10ec012f586eeb765896d0ee83846e52175e2667::08d94d3f7eafd99f16ea91359389c81be7ad3225::bc302f2aeca132becef9a5de98957dac81128f03::4f0c8ef9f1e68be88b22cce6a857e1a9b6434182::8378a44ff9ea2f60a92af6dc45ac87b47e279fce::b5cf2b4b82de877c07bb2cca02085d2b3ec195e0::a0c761dc6b3d840852be35af59b143e2016acf9d::cd0ecff00b43a245e26cc325b5dc2d30d2419045::c545331f9e3cd8eb1ee2fca266c98b7d62b92f3e::3afa5385c929acb9f7cb9801da32e06cb4af101b::7e0f60d2ed93297ff1cc2656fe1cc88d9b74bf49::abe97736b8316f1b714cac56c115c0779aa73217::7e86f9b4d2b7dfa974c10ae7e6d8ef90f3d77f06::b0c3d451a242b53c9992cafa9108d0df52b4f2f0::abc06a2f769e6e451462460610369ccddb45255d::6c42c142e2a41e6b9b05cfc2d7e1d316c38869c8::589ce09564ad227fb07294d401c459b0620c42a9::8ca8ac379d8a2d10f39fdef67db545732fe95309::b0be721dd95cdeead6b94447c1454cd7edabfa7a::9f7ff621bd62ade37b4ae4e608bdf24b7f7b1456::f424efe97f69910be2b93d33e2511ebf5b072a9a::d793a561210ba8101e9bce09cd6dea8a4f1c31cc::8d4ca9edc6add34073db7bef395e2270957f3660::01a9fbbcca6f5345fbf9522e28cda0ae17899f67::c20a4d18e36a13b5eea3155beba36bb582c0cc87::4c3725723f15fab0a424cb1318b82b460714b72f::3ad5fd18792ffe8fca18b465256d49e1e81452e2::79aa54d0c781ea518e09d62c48e70d2d5619fe33::a2a34133d8347d83c015b1889a774c718644e4d6::1aae5e70efff5c40b4ab6ca177af7894a9e1b5d2::b2d4142fb754730fb4ccae17c942b66a64cbfed2::b1c36b70883bdc134737299d46c858df4b872cab::8d02083f231b6d6f0cde891a68e4870108203605::78a1fda7c8dc5bcd87fe4b9f3843ead2caa356a8::b1329929785f7da090deff60c852ff4bacc67eed::bb99aa1149bb02f906d81bd471f6e422c48f5e1a::11dafeaa7533be26441a63618be93a03869c83a9::dea5a10f716b84a49e3d8fa44efbd3bf1ff1bfda::fb1588c5ff921da8c7910416c25ae496b5000207::6b46d655978ace0a6cfa6ad8b814d97c86a8830f::60f783d9cedb151230074c216b338267e288d72d::e0774e47302a907319ed974ccf59b8b54d32bbde::cd2136aed6350b2bc7e5c0f3f57dfd7f141f76e8::2eb197e72f8ea9a91399cd22a57b1d18774a23e4::27a508c91e04b619c8a1eb50ef115b226b21182c::8fff8f04107dbdab75faa2c48ccb7249810c17dc::2229a7e8e81a71da6379d2e67d870f6897469953::e8c05974e1a26859144e02fd26df174ffd25cd95::fb2fbbde8b74cbac50f54cd4931e2ea82c3a7754::
https://api.github.com/repos/rails/rails,8108,fix-multiple-and-index-in-instance-tag::master,0,merged,,"When you have an explicit index set, then when you build an input tag with :multiple => true, it doesn't add [] to the end of its name, although it should. We don't need this changelog entry since this feature was added on master only. ::Oh, OK, I'll remove it. So 4.0 is on a separate branch now? I'd like to get this in for Rails 4, since it's a bug fix. Should I backport it and make a separate pull request for that as well? ::4.0 is still master. Is this issue present on 3-2-stable as well? If so we will need the CHANGELOG entry. ::Yes it is present on all versions of Rails 3. OK I'll make a separate pull for 3-2-stable with a CHANGELOG entry, would that be enough? ::You don't need to. I'll merge this and cherry-pick with the CHANGELOG message that you added here. But we will need to wait the 3.2.9 release to backport it. Thanks ::",175ba04cf38134e156208c7e59808c40e8c25aa5::
https://api.github.com/repos/rails/rails,8078,serialized_attributes_before_type_cast::master,0,merged,activerecord::,"Public method `attributes_before_type_cast` used to return internal AR structure (ActiveRecord::AttributeMethods::Serialization::Attribute), patch fixes this. Now behaves like `read_attribute_before_type_cast` and returns unserialised values. Also it may need a backport to 3-2-stable. You can probably use `each_key` here and remove the `_` arg. ::New hash styles, please. ::@carlosantoniodasilva Maybe not here because this is fixing an issue and it will be easier to backport. ::Ok, make sense. ::Right, my bad :) ::new CHANGELOG entries go to the top of the file. ::",e7e59a75aad6c52b44cd97753b3dfce216833f1f::
https://api.github.com/repos/rails/rails,8073,fix_find_in_batches_start_option::master,0,merged,activerecord::,"Hi, Here is a fix for find_in_batches when Model#id is a string. In fact when calling find_in_batches (or find_each) without the start option it generates a wrong SQL statement: ``` Subscriber.find_each { |subscriber| ...  } # Generates SQL: # SELECT  ""subscribers"".* FROM ""subscribers""  WHERE (""subscribers"".""nick"" >= 0) ... ``` That statement is invalid with strict databases such as PostgreSQL, because it tries to compare a string against an integer. With more tolerant databases such as SQLite it's passing, but in fact it skips IDs starting with a lower character than '0'. Once accepted and merged, I plan to backport that fix in pull request #7987 for rails 3.2. cc @spastorino Wrong indent. ::This line is still bad indented. ::",a58cafeb3a86be46849de57481b6644094fb8165::
https://api.github.com/repos/rails/rails,8009,3-2-fix_database_url_support::3-2-stable,0,closed,activerecord::,"This is the backport for issue 7521. - added tests to confirm establish_connection uses DATABASE_URL and Rails.env correctly even when no arguments are passed in. - updated rake db tasks to support DATABASE_URL, and added tests to confirm correct behavior for these rake tasks.  (Removed establish_connection call from some tasks since in those cases the :environment task already made sure the function would be called) - updated Resolver so that when it resolves the database url, it removes hash values with empty strings from the config spec (e.g. to support connection to postgresql when no username is specified). - updated ResolverTest to use current_adapter? to check the type of the current adapter. (note: this backport is slightly different from master due to update to ResolverTest to make sure the tests get run when the adapter is mysql.) I think is better to use a different name instead use `()` ::Please change to ``` ruby { :env => Rails.env }.merge! options ``` ::Put a blank line above ::Can not we use? ``` ruby if options[:config] ``` ::Fix the indentation ::put a blank line bellow ::put a blank line above ::put a blank line above ::put a blank line above ::This should be in the Active Record CHANGELOG ::Yeah, even just `config = current_config` would be fine. ::",24553b01ac8af9d5727908343caacf8fb0311260::
https://api.github.com/repos/rails/rails,7989,backport_7969::3-2-stable,0,merged,,this is a backport of #7969.,1f73a53071dc50b3264decde7cc35e1b154695ec::
https://api.github.com/repos/rails/rails,7983,bug7950-squashed::3-2-stable,0,merged,activerecord::,"An unsaved parent that `has_many` children shouldn't say that its children include any child with a `nil` foreign key: ``` child = Child.create(parent_id: nil) Parent.new.children.include?(child) # => false ``` Adds a test and fixes it by backporting 4bc2ae0da1dd812aee759f6d13ad428354cd0e13. See #7950 for the original issue, and #7959 for an attempted fix (before I realised it was already fixed on master) and discussion of backporting. New CHANGELOG entries go to the top :) ::Thanks @frodsan, I've updated the pull request. ::We have commented code here. If it is not needed please remove ::",a3cf03ef99b2cfd811e0ca5cd31ef57976a9408b::b6a2baee830f464344b7cb82caaa528be1db7389::
https://api.github.com/repos/rails/rails,7937,7914-defaults-on-domains-and-multiple-schemas::master,0,merged,,"Please, read issue #7914 for details about the bug, and commit messages for details about the fix and changes. Let me know what branches you want me to backport the changes to. Thanks, Arturo",2da85edda36692c882ff25ccf7dbd038de2f771c::54b3f417411097f7404d15355858f56ad66e8294::40475cf3649af4a6d868299b1796b36358f90917::8fb841bddefbd2b7ad6b3d7b560111ef0d7fefda::
https://api.github.com/repos/rails/rails,7936,7914-defaults-on-domains-and-multiple-schemas::master,0,closed,activerecord::,"Please, read issue #7914 for details about the bug, and commit messages for details about the fix and changes. Let me know what branches you want me to backport the changes to. Thanks, Arturo Always put new CHANGELOG entries in the top ::",a61f5a7fb6d54036c985e559868b6b26e73fd265::74f2ea9988cc9a92fc2ba37db27d284ac89944ee::04bf0d79430f5d68639f623a6727cdbbb3d7d692::aa756114bf5f2e823855940b1465b35523da9684::
https://api.github.com/repos/rails/rails,7905,eager_autoload_3-2::3-2-stable,0,merged,,This backports #7161 and #7904.,de1b687239832f336b9453493701955ab4d6d6a2::2bed954c2d47f17e5690e5a98df2a5ba94ed8517::
https://api.github.com/repos/rails/rails,7866,rails3_stable_assets_speedup::3-2-stable,0,closed,asset pipeline::,"Please see the Rails 4 pull request on sprockets-rails for more information: https://github.com/rails/sprockets-rails/pull/21 This is a backport of the work for Rails 3.2. Please note that a new version of sprockets will need to be released with this commit: https://github.com/ndbroadbent/sprockets/commit/82cc1de7e2164c8e96052c612179bb397ccd9a39 (from my [rails3_assets_speedup](https://github.com/ndbroadbent/sprockets/tree/rails3_assets_speedup) branch) These changes have already been released as a gem called [turbo-sprockets-rails3](https://github.com/ndbroadbent/turbo-sprockets-rails3), and it's working well for many applications. 3-2-stable upgraded to Sprockets 2.2+ and switched to `env.each_logical_path(paths)` instead of handling `compile_path?` itself. ::This is now a very large, complex method. Possible to break it up into smaller, more digestible pieces? ::Breaking change? ::Is this new? ::Apps rely on `config.assets.digests` so changing it in our stable branch won't fly. How about keeping the existing manifest and introducing a new one alongside it? ::I don't see a default value for `config.assets.clean_after_precompile` set, so cleaning will happen by default. We keep old asset digests around so stale references to them still work (such as assets referenced from old emails) ::See comment above -- always cleaning before generating assets means we we're orphaning references to old assets. ::Why is this an issue? ::Ditto for comment above about `env.each_logical_path(paths)`, and the index handling has changed to use aliases. ::This feels.. dangerous :) ::This may change the file's encoding ::Ok, that sounds good, will create a separate manifest for source digests. Will keep the change in the Rails 4 PR though. I've updated the Rails helpers to use the `config.assets.digest_files` key, and this change hasn't caused any problems so far. I've also submitted a pull request to the `asset_sync` gem to support the new manifest format, as well as the old one. ::Sorry about that, wasn't meant to be in here.  I thought that was a useful feature at first, but didn't realize that old versions of assets might still be requested by cached pages, etc. I've since solved this problem within Capistrano, since invalidation depends on knowledge of previous releases: https://github.com/capistrano/capistrano/pull/281 So I've removed this 'cleaning' feature from the Rails 4 PR, as well as my gem, but forgot to remove it from this Rails 3 branch. ::Oh, right! I've rebased my sprockets patch onto Sprockets 2.2.1 as well as updating this pull request ::It works fine without it, but it just makes the `manifest.yml` file look really ugly, and bug reports become harder to debug. ::Ok, have split the asset processing part out into a separate `#process_assets` method that is called from `#compile` ::Sorry about that, it just seemed like a good thing to do, since those methods are only used internally. I've removed the `private` ::Updated ::IMO, it's not as dangerous as it might look. What it does is scan through the file looking for any strings that match `/-([0-9a-f]{32})\./`, for example: application**-15e3a26e343f4cee7500049e0de72b0a.**css (including leading `-` and trailing `.`) It then does a second check to make sure that digest is contained in the manifest, which means you can safely add references to a compiled file from a different application, and it won't be stripped. ::Have just tested with some Japanese characters, and didn't see any problems with encoding. ::Asset cleaning has been removed from the pull request, please see above ::Sorry about that, unneeded artifact from sprockets `2.6` ::",3fd15466e2be4f6bb55757e06d5d384f76db2779::
https://api.github.com/repos/rails/rails,7865,link_to_remote_3_2::3-2-stable,0,merged,,This is a backport of pull request #7864,380800e4a272db98f3dd267f82e0ce1e4d03f4b8::
https://api.github.com/repos/rails/rails,7864,link_to_remote_master::master,0,merged,,"The documentation for `UrlHelper#link_to` describes a :remote option, which can be set in either the `html_options` or `(url_)options` hashes. But the option is checked as a stringified key ('remote'), and only the `html_options` hash is stringified before this check takes place, so that :remote is ignored if passed in the other hash as a symbol. This problem exists on 3.2-stable, but an additional issue exists on master: Master passes the options hash to `UrlHelper#url_for` before consuming and deleting the :remote option. As a result, both the string and symbol forms are used for url-generation before they are used to set the data-remote attribute. This patch also addresses this issue. I pushed a 3-2 backport to `link_to_remote_3_2` in my repository, in case that's useful. Thanks! This call is not right. the call should be ``` ruby link_to(""Hello"", hash_for, :remote => true) ``` ::You are right this is supported too, but I don't think this test is asserting the behavior since it only doesn't stringify the keys when the html_options is not there. But in this case it is there. ::The test with 'remote' (as a String) also fails without the changes to UrlHelper, but only on the master branch. The test with :remote as a symbol fails on both master and 3-2-stable. Both tests pass on both branches with the included changes. ::",6caae0231c11ad89c1eeed3b0f8db8dfcb88c729::
https://api.github.com/repos/rails/rails,7786,3-2-stable::3-2-stable,0,merged,,This is a backport of commit rails/rails@8471edc6725aa905dc9f7b800438acb255b1512e (see pull request #6805) to 3.2-stable to allow testing with ActionDispatch::Http::UploadedFile since Rack::Test::UploadedFile and ActionDispatch::Http::UploadedFile don't share the same API. For further details see mentioned pull request,c53e5def08f7a289a92a8e5f79dcd7caa5c3a2fb::
https://api.github.com/repos/rails/rails,7755,3-1-stable-fix-mysql2-connection-adapter-loading::3-1-stable,0,closed,activerecord::,"Hi I'm using the relatively new --standalone feature/option of bundler so as to avoid extracting a part of my rails project into a separate project. My only requirement is to not have to load rails entirely: By creating a custom gemfile (subset of your typical gemfile) and executing: ``` bundle install --gemfile=Gemfile.my_subset --standalone ``` bundler will create a ruby script which requires all the gems in your gemfile subset using the original gems locations. e.g. : ``` path = File.expand_path('..', __FILE__) $:.unshift File.expand_path(""#{path}/../ruby/1.9.1/gems/rake-0.9.2.2/lib"") $:.unshift File.expand_path(""#{path}/../ruby/1.9.1/gems/multi_json-1.0.4/lib"") $:.unshift File.expand_path(""#{path}/../ruby/1.9.1/gems/activesupport-3.1.6/lib"") $:.unshift File.expand_path(""#{path}/../ruby/1.9.1/gems/builder-3.0.3/lib"") $:.unshift File.expand_path(""#{path}/../ruby/1.9.1/gems/i18n-0.6.0/lib"") $:.unshift File.expand_path(""#{path}/../ruby/1.9.1/gems/activemodel-3.1.6/lib"") $:.unshift File.expand_path(""#{path}/../ruby/1.9.1/gems/arel-2.2.3/lib"") $:.unshift File.expand_path(""#{path}/../ruby/1.9.1/gems/tzinfo-0.3.33/lib"") $:.unshift File.expand_path(""#{path}/../ruby/1.9.1/gems/activerecord-3.1.6/lib"") ... ``` This allows scripts to e.g. load just activerecord without setting up a separate gemfile. The issue here is that with this setup script, you aren't using bundler (to avoid loading rails and the gems in your typical gemfile.). Additionally, the gems the script requires are `expanded` gems and have not been installed via `gem install`. Activerecord connection adapters have this code: ``` gem 'mysql2', '~> 0.3.10' require 'mysql2' ``` This code assumes: - You're running the code within bundler (recommended) - You have the mysql2 gem installed as a gem in your system When using bundler standalone neither of these cases are true so the app breaks with: Please install the mysql2 adapter: `gem install activerecord-mysql2-adapter` (no such file to load -- active_record/connection_adapters/mysql2_adapter) because it hits the 'gem' call before it attempts to require 'mysql2' IMHO a better approach would be: ``` begin require 'mysql2' rescue LoadError gem 'mysql2', '~> 0.3.10' require 'mysql2' end ``` This code assumes you already have mysql2 on your load path somehow and only if it raises an exception do we attempt to issue the `gem` call. Is this reasonable? I've coded up the changes against 3-1-stable (which is what we're using in production) but I can easily backport it to master (elsewhere) if people see this as a good idea. I had the same test failures before and after my changes: https://gist.github.com/3782040 (I tested sqlite3 and mysql/2) Regards, Saimon Note: See issue https://github.com/rails/rails/issues/7753 for original discussion.",56645860837965b397bf4282e59c214a59fc0478::
https://api.github.com/repos/rails/rails,7718,fix_6962-32::3-2-stable,0,merged,activesupport::,This PR is backported to 3-2-stalbe about #7703. Please see #6962. AS::TWZ#strftime's behavior isn't equals to Time#strftime. It seems %:z and %::z format are ignored. /cc @rafaelfranca,4e715e33aff6274267446d8dcb63da7f60c683b6::
https://api.github.com/repos/rails/rails,7675,fair_conn_pool_backport::3-2-stable,0,merged,,"In master, @pmahoney's 02b2335563 causes contention for connections in the ConnectionPool to be fair (first-waiting, first-satisfied) which is important for reasonable behavior in a high-contention short-checkout scenario.  See also issue #6492 . I have been using a hacky local monkey patched backport of that patch in my rails 3.2.x app for several months now -- and it's performing admirably.  My app that had so much trouble in rails 3.2.x in the sorts of scenarios the patch is designed to fix -- now runs awesomely, as expected. So I think it's valuable to backport this to 3-2-stable. (A couple others have asked me about these issues in 3.2).  Which is what this pull request is. I manually prepared the backport -- master had enough other semantic and implementation diffs from 3-2-stable that it was a bit tricky to figure out the right way to do this (and this stuff is confusing). But I think I got it right. Note one significant difference in this backport patch from master:  3-2 still tries to rescue 'leaked' connections in #checkout, if no connections are available, `clear_stale_cached_connections!` is called. This behavior is still preserved with this backport in 3-2-stable, adding the `clear_stale_cached_connections!` check in the new `acquire_connection`. (When I forgot to do this, I indeed got failing tests in 3-2-stable `test_checkout_behaviour`, which passed again when I made sure `clear_stale_cached_connections!` still happened when required). I am relatively confident I've gotten everything right, although this stuff is admittedly quite tricky. @tenderlove, @rafaelfranca or anyone else with eyes on AR, appreciate feedback and/or merge, thanks! Remove this blank line ::Remove this blank line ::remove the assignment to `conn` because the variable is not used and will print a warning ::remove the assignment to `conn` because the variable is not used and will print a warning ::",0693e079708a52b777f2b7872b8e3d467b880a0d::
https://api.github.com/repos/rails/rails,7383,master::master,0,closed,PostgreSQL::activerecord::,"see http://stackoverflow.com/questions/8539207/activerecord-loads-binary-field-incorrectly-on-heroku-fine-on-osx https://gist.github.com/3382094 https://devcenter.heroku.com/articles/heroku-postgresql#troubleshooting to try to understand the issue this works around. essentially, under certain conditions, PGconn.unescape_bytea is returning bunk/different data.  this feature detects the situation and corrects it on the fly. Please, use 1.9 hash syntax here. Thanks. ::ditto. ::ditto. ::Let's not be so gung-ho with the 1.9 hash syntax.  If we commit everything with 1.9 hash syntax, it means that backporting becomes a PITA. ::Sounds good, maybe after 4.0 release. But I think there is no problem to encourage this with new features because they can't be backported. ::Encouraging it in new features is fine, but this is definitely a bug fix. :-) :::+1:  I'll be more careful henceforth. Thanks. ::No worries! :-D ::It would be helpful for this method to have a question mark at the end as it returns a boolean value. ``` symetric_bytea? ``` ::We can get rid of the nested conditional with an early return ``` ruby return unless value if symmetric_bytea? PGconn.unescape_bytea(value) else unhex_bytea(value) end ``` ::",aa254505c7e78e71a2f4e87b39e7a3999abc5b97::
https://api.github.com/repos/rails/rails,7380,fix-nomethoderror-on-non-attribute-equalities::master,0,merged,,"This is at best a band-aid for a more proper fix, since it won't truly handle the removal of the previous equality condition of these other nodes. I'm planning to put in some work on ARel toward supporting that goal. I'd like to also backport this fix to the 3.x merge code, unless there are objections. Related: rails/arel#130, ernie/squeel#153, ernie/squeel#156 Also, I added a test for the more typical equality condition, since I didn't see one for it yet. Maybe I missed it, since the PredicateBuilder does create equality nodes in stock AR with a hash, but the only one I noticed was using order and strings to test.",b127d86c1823d60a29191ecc3c21c97ee3ac502c::
https://api.github.com/repos/rails/rails,7371,fix_dup_validation_errors::master,0,merged,activerecord::,"Call super to nullify the reference to the original errors object in the dup'ed object (call ActiveModel::Validations#initialize_dup) I don't think we need to check for `defined?`, since Ruby 1.9 has `initialize_dup`, or not? ::Maybe it makes sense to marge into 3_2 as well? Then the defined? check would make more sense. ::In there it might be needed yeah, but here it's not. If the decision to backport happens, then the responsible can add it I think. ::Please squash your commits and remove this blank line, thanks! ::",fb665217723f7c4e9e96bb7658fc3048a1d64379::
https://api.github.com/repos/rails/rails,7316,backport_fix_session_store_options::3-2-stable,0,merged,,"It fixes #3047, #2483. @rafaelfranca I've backported two commits, first to support jar options on all stores and second to fix issue with re-streaming of cookie jar with the same value. Also I've found that one of the tests in the second commit was wrongly written, so I've corrected that as well. All tests pass.",058dc9a09680e9e2a5777c441b966a6f5e12cf82::bbe634e72cfbe9d66f08e0e22b0c718f136ae934::ca07bc0de7282cf95376a507a2a5e1dd3ac66481::2e04a343eb668fe73864156ed9f3c373d42a588c::
https://api.github.com/repos/rails/rails,7299,3-2-stable-store::3-2-stable,0,closed,activerecord::,"Hi guys, #4856 was committed to master, but never backported to 3-2-stable. I only realised when I upgraded Rails to the latest 3-2 version and it broke my app. I'd been using a patched version locally. My fail. The files that were updated on master haven't changed on 3-2-stable, so it should be very straightforward. Thanks, iHiD",2a6039a81027a4f0f3f9fc4d95b6bba7323af28d::1f330856a92ad3e652feda954aea17073f7151c9::
https://api.github.com/repos/rails/rails,7283,bump-sprockets::3-2-stable,0,merged,,Theres a ton of new bug fixes in the newer releases of sprockets. Rails is still locked to a really old version that I'm not backporting fixes for. Whatever regression 2.2+ caused needs to be addressed. This change still allows 2.1.x so people can just stay on the version they are now if its working for them. /cc @dhh,83e0c952d6823964ead68437c280583ac8a00ce4::
https://api.github.com/repos/rails/rails,6972,wrapped_keys_in_log_for_3_2::master,0,closed,,Missed backport for 3.2 related to #6050,20f398d19f0cc5e18dc674369356da1726ceb675::7d95b814583bfa0e8d77fb66da82a1d8af4cfb88::006de2577a978cd212f07df478b03053b1309c84::05bee990b4bd0ce3b02e75399c857e168f41edb6::7006e975ac29e48cb9645733df04b9841bb2c29d::434be0fd69a58cc744cd48c0d69440df1102b157::61d84e0e81b0ae65952d2e02fe97c50c122b943f::86559bebf29fb0ccbde642dcc12925a7037b1551::7dc83f78232a6dfcdd70292e831403933f57347b::beba8267c96a3dbc1f505ecc099dbf14db8dde4c::d6bbd337ef1b96ed246bccaaf6e8b15a7077b9aa::a782aa5a5c30ac471c97a99d12767b4bc2cd8d9d::b18603b8902378662db33bdc3cca7550fcd8c4d4::0df261a4d1557ef0c38d44fb7aa096c203ffaac5::b608cdd64c95d0d16eb98d86562e22f3b01be9e3::4075a394530da0c4a88507519f6e6f8b30073cf8::6cad40762321a1436d9c9c5a2175e832486d4613::6b8a3a0a5193df240367e5f4e7314a8a33d59ba0::9dc57fe9c4807fc0ad4b1590a931891d9faa3164::342b54a55a162e386687dc36ae6b65131a6391b5::3005f5834ef029c726904a812aedb1dd9657f13b::8fec5d7657fd177bda558c2f47998e20db407a38::a72fe84d00724ccb6d60f82ce90e36a8c0f1c1ae::e3069c64b2c5ddc7a5789b55b8efd4902d9e9729::2b2983d76fd11efc219273036a612f47cfaa5bfa::5fe88b11f11bb3b30bc23c57b36be4f027d915ba::df8457748ebbfa092c4c10aedda57aeef2f28776::580e767a8e12ee15ac367e6f89489e4ad6d863cc::02ca9151a043a4fefbb3f22edd05f0cd392fffaa::ebe994f83c717f8ef25dc54490e13bc0dd048188::4657dba60eebc0d7cea11ffd18aa70d7a3d00e45::7c7fb3a862651d87c4071e40a1799b973f626b11::0621ecb20bd76a3d294fbbed73e54fe81a3cb6d2::bfb25f9cae0a4021d86daf5c928d7e9a10bd30e3::b4ae94fb83132e7baed4cbe4146d8e63407fb060::5384bdb855f67621f055ae79a2655c03b767a5cc::145cc69524c43d24c257be30a7ea458a284d164f::efb054baa0e8e5a1ebebbfc307f69bf846ceee89::80a292cbd9d32ed87333b58b36618cfda8d4b95a::915879ccf0752d86e854d72aa0063b659e1aef71::7fb268d8dd203cb8e398f18d92d55037ba31cab0::6f383482654fe071faaf3bafbadde2eb5bc091fd::4d527387384cd1a27c2e079bbe1fd0f0505b8d17::b86e0be327bfd253056ba6a3afa85abdcf21db69::764e2de6b76823cbd867ce729a5a58ece3f86633::b12d03d66bdc7b5c212635e3477d87d5390fb66e::96fe0af1854fd0d0c91ab8a377d83fa3c4a33d75::ad4d4088c49be013c2248b1cf2ca92b074e8ac03::16a9a877288dabcfbeb00cfb681f7c19a8a1e8a3::5059c323b042574a07b45f761bacb2964241954b::ba48e230c607016b2c92679173e5e7603fa6204c::dd7e7b3719ab47c50e73f455d7a31f3db18afb42::cb242a9e4808af7a2aab19832846e2947e39e4a0::fa34acec20574699c2de19d97f9ae54f540fe69d::381f6e7c6844e67834245d4eb3bcd3ed04f27492::705a70fb59b396d0fef2bd1aa0fca3c83e258b16::9b777d5adb6e8765c38965bef934d8b1c4e2815b::b003ddf2aea1cec218604b62843faefef4b62a22::8f5079f190c849b2fb4de24739af742cc5a9e37b::f8dae865b5f33bd1846e93aa19dcdb52a5665461::f02e7dc9ab4822ad2dfd85a0747a398ee3132cb3::981055540c8a1fc66669cfef29b437083e2fb7d6::22a60728a9495ac75075d1d27a706ae7f2df2529::c2193c11ad215d3a2d7d35960630b3e1902a5082::a9fc8a986d32e6178923f163b65d38a1bd88f563::f3aaac46e6e5f4946831466f531a2a03791a3c8a::66e338aa98d8ccdbeb9ca261886edd1d0c9747b6::62f098dddf55a36e15c94a60b29c3c280b219cce::9d616ea360b439b9204c68748553ebb00ce7ef90::4b599611e4964adbdf7733831cb53de19d1f620f::5ecd14c5f16533d09c01007bf5d70f70a59c30e3::9cead4afbe7907914202c9bed780d0239a43baff::ccf80c2ec458586d3a7a534dcca5622ad6ff7ee3::41e7a2ae40f7a07aa98c64e8a37c226d0d9156ed::2f4696de6c469698a702db1e4a1e595ac5acb0df::3d0e7ad7360fa3019413b27f416586f04f531f99::62b74b1845633f9c0bdc27f6d51c2a17a14b4644::3f7ed52d3b0cdb31c355b142f9ac7526685a7049::8a5b51e1e603f659c18117869b83488658e9684f::e7d5ba37f07ee8ff9daa3d80a81c8afc0b7148cc::9ff97b0605aa5572eed3562ca4514f38dac88e6d::1aff7725c7a04cde202cca906208560a55409e6a::9199ddfb768f6aafd9903be693c7a2a5c79b4878::45886843891c6eeba92f8d79ef8ec34738507309::ec68258f19678d47acc6e5684c9dbc18a7382589::2506d4ad9e79532a0000ebd73baf0478db30f5c9::21141e777bdce8534e3755c8de7268324b3d8714::d47d6e7eda3aa3e6aa28d0c17ac6801234bb97d1::e9051e20aeb2c666db06b6217954737665878db7::b2f73c40b8a995ed685fc76f2df724b15ead16b6::007539d12d64764db3f7fd13f134804e233ac99d::396e383286ccc368b54e980e06a506d339843594::9a868a01b8449fe9bedaee3d4c946f8409b42417::2dfa8b5995d4f50df6f0080d4df634679cc44e30::e885b18fe9d20746fd0e5165815119bd2836cd60::8470fdb734552d9c3799521cd533330dd6962a98::9f4c4f6dd0e2bf9309956718abc4d1b0db5b8ab8::e3033e3b49cf0577221ca30e4d5507edd2802029::0f4359252fa08dfc30de21aca329cb27eddfaee5::4bbd05c90e5a62c0316307b3ca7c2262ed98b567::75e8e771255eb2e742caba4fc80955d6906f213e::616c91db0a41ee5018b57c1758a4f70ae463ec7e::2802ad0f72cd030efc3c4ec4f033389564609cec::b98d1e21635d8776de8893cc09bd86c71f6c78f0::855fabca669f1a57c70bfa7bfc396495018e4a5c::3b444eed71402cda92dae2d9d1c342253dd18f8c::8ad8f61b3f20af106798731144487de40facb25c::4dd4621f5bb5500092e635e80e1b1cb1d888b6ec::d64164645d435e22fdab8179481acb89827dfe68::879611f50c76f79258e5925de113d9f8f8a5b418::c5205041f65206a1490063b08915e7b2a2151a61::f7d01ecf753ab8db3ba1b0a10586590b0855a31a::0d73d6e7b6dd1900f105397460b777ef6c03d3b6::6ef9fda1a39f45e2d18aba4881f60a19589a2c77::565c1b0a0772ac6cf91c77e9285806f7b028614c::39b9c943b7ec5181c19461d319d8c610ea1bf941::fe9731ee674b8d7d7e06f81441fceb0499734493::68a454c2afcbfc1bd71c06e0a7d9cd48d5cf4412::b0f8355d2813c375bf9242071131e8c5a350bcf0::64e12ff109ad934939df317e532647c603f90520::36fdb728c63f9788c4c646a00c73933f59165789::39f9f02ab04973b213bef8c6f4c1a71043ed709d::f051071c00efdfe6444516104849cffd8885479b::5d6cca1d649d370cbb08b88c4af9008edd35b04b::56b86a377a9fa7d63a6fce1e5801c4910dfc703e::a5430024fd7e654d379b20373247033f68ec0a21::9ee85281bca899fc521200a087149d7c8c3940d9::d3715f65734a10eac228359b9073bbc5aa3ecdbb::ff3cddf8763e100947cdffe9c25716e93ccbac62::587de842581fa604564595c58019161f6acc4b1b::e663aa39aa8599f01cce2f61c68e8bea736fc186::356f2a6d8b3bb48b9c7d7508de932121d0e013bb::a9af9f10cb841ed1c2f51c7990cef76297b15e39::c90f3de6d3f0e1d12ad1884d89958cd12fb26f79::ba6d9350d93fc83fd86e636bc94f8b2ca6c79cce::81ad94e0ac199cbae6c7bdc0380b2c821c3c56a5::0e69705b0fc7501bada74b3ca023ae7f7b2b8592::4ababde21fbb18795e8d32f55c941ce5a206a6de::fe4dfdd64450662d882b47bf519d885edee453df::0813b45127c2dfc958482bba8fe1e3281866188d::12e5c727aea3975d2108a66571dc13a5b2a0e651::2f71d4063f17e25310939f81246ada0accff0342::f09ae8538f3625468ee175d5a4d9782e0d5ba415::624f801d27e946cae2244924e7f6a04565666036::c470001891990b067f9e76b5a5c0ae49be1a507f::bcfa013399fd2c5b5d25c38912cba3560de1cc57::9f1b689cd93f448e2194fda552037b77cd8ea794::b6727a1ed3ca35d4788f52f0bea49952a16cd41e::71f7917c553cdc9a0ee49e87af0efb7429759718::dff6db18840e2fd1dd3f3e4ef0ae7a9a3986d01d::4ce7f98c3b5bd16eb6c0b32ccd2ea51d72ddf825::4c8805d60e85e89852da9f1df1dd6f82bc2df957::ac465d5dd2220acba26947ed3c6d29c11287e333::9bbdceb34d33aa31567447e43b5fb5ea638e14fa::f8f6ad6ebc1602afa6af3c9cb297ea7896fb8b3a::d3e5d1c295365238412fc3aa2666d09ddb69bb1d::71827489e90f91da18ebac68c2d9e10379220a43::44aca7b29502995b3e2ed94f7288646f134ff612::febd65223e2b3a40755d23a734f6a77e04b97c88::d66fd081759af32e57baabf7888823cfd9bcebd0::4df968071436a4585c8e4694efecfabb02f1a806::7056079761eba049bbc6108946a1626fe169dbdf::b57fa0bf690b299ba4d8a0051bf06b9cecd3975a::8984bc2b7b11f52a04318c06b7c26000f82dd38c::ecd1722235d01f44f3fcef032145425cec92d9df::8d4f63a1a593928c1718e73043c8ca525440fb6b::b13d89ea9ee03467dc80a9ad29e3b10cece67b35::537ede912895d421b24acfcbc86daf08f8f22157::5b6b0df8c585326266275b2fb25cfdfce924fe9b::7544c7a9f290a3ea25099ae38d52795458391785::f550d4db96b406efc91f92a9c8ebdcda7d407bc9::43f0af4d39a5d8c1191fef589d947fc92a34f7d4::bebbdb5d4e27b2539b560cb3dafe84b1905636fc::510ef2be5396fb2cd8209b13e8b8ddac3f7e13a5::9f52d1526c816a35ec7bcc6e85f27b51d010dbae::fc092a9cba5fceec38358072e50e09250cf58840::634755410991419bab9048f81279bd6a48d7f6b4::f7cde3eb2231f31764739a9abdf2610dd2721fe8::3cba6eee66a4c25b93839ea6fd1da08d7780f2de::029936efbe7318e9146c22c6609e1571c7abb0c1::6b6c1de9f96d27af73371b1595c4b9ff76bb59bc::959fb8ea651fa6638aaa7caced20d921ca2ea5c1::68d3e1f42f7de671a07cf1eb9de577fa2f8c82f0::5b0a8916ea5a7c565aaf27964bf19a8f3bf5f558::fa352c46da1b89534f2ddb04a602b7d09c0f5872::7ad5f8b4b97c8165f8bf7e8b5d8328cb369a5855::8b1d475f9667e9ecc7478e8a01de912cca2a4497::dfb1ebe63d78703747a515cca53b044cd1a52e4b::0e4d16f78f0bb08fa1e8351be97f984f1a5e4f58::8475cddc986d9401f1d56c511f79032b5daed7c7::6e4a064256331f21b3b3107e2349f7e7adc6d8e6::01f8f29dc9420fa7ac5eff0e068dd639ef9d187a::f36fd0e09c94353f886776906d408b0a6fb5f815::6900a4ec3e5496c3b73ad6defdd17915f2fcfdc5::eaeebc28840b06008aa9aa0e238cdc2331278a10::e66c240a8f46eba1f7d0816c9d72e5cb89f997da::6cc941dedbc435efa65cce896e7c6bf5fa519e99::5dfb01e25b68b8d0b184c861405ba2789343302f::35c89a48037391a10de0d12aa094c988a576d900::dd286a4c735dac1db8c9262581c7f29c44d1f695::179276e2b6f6bd846690b4c0ab4399cf487357ba::9e6eb8b648acf38474e46c335782c65d65b1a185::bbec883edb350cc9f75beea183e335b91a11e242::c9f27e3a479e17cd94248c007e4f528026bc18f6::0391ae9a14af1a87ca435eb7777c73271e859ae0::22994b2d638738abce7dc7672c27a5e7171018e8::0ccdeeb6b589b486f9ffdfb56cbbf901ec955d88::cc2903da9f13c26ba3d94c149f31d4c53b94b2ed::38edea0c912f19b5c6a689465be71b29d9da101d::301974a44acb852a71a533e3e8fb9470314f5838::ceb8ec3eff84b430d3c5630bd1ff38d10c8aa209::ee4209a31eff868aff8d2c2f836e703256c4038e::b97e0a1127d45e25e4281d6c1b5fb9a57f0efea6::6522a127e549040d834196eea6eb2818e5051dba::32709ea41ed1ec2a89590e9bc6656c1ecd462d30::5dd2cfc8b4a89ec6321ebbb0e81cd50d58785b6f::8381d398cedf3e95fb073b8110d80f636cff449c::10cdbbc56bf31da3a2e030dfe9d399507348f54e::eed1cfe058abedecb4fc8c6ed5f1e52db5a105a3::966371adec28855fbc36e2e78b9c34e77c81c472::7f937914576c65a01f3a9528d1728720c6c400c5::e7d1849be176f456002b5d0de260e5235bd1eba7::b081f6b59fb3f15d12043072ad9b331ffd2bc56e::63bcfbb2386ac974a0087476a0c58634963a0be9::2109fd58040b79c272d7d6ef10a7b56d313dec57::a8e22aeadcf53a30893fbfbf6d446d504bd87b67::3b1ea3d896a6a1ebefdf3fcd461396ddbf8df230::4717c2ffc6c2416cfbf5fb560689606eadd3b3c6::52d09638dfc07413956846a6319b145511a15757::909a4a563ebbe0d642056451acf41b2e524b2a5e::ed93c86c5ddee83c9987f30b289c7c4bfb21b804::a556c7e25b135e08fd0707f0e2cb01100db65501::284ebf2a1c5eead05f4b24ffbe109db4837cce44::83451beb1a797c8bd54afa364c39cc28145db366::44b313bc4e3762da64dde7894548f81c595147de::ffcecf2fb284a32712c4e1aab65d0d11824c4b36::2363aafca4e4c4e92d0ffb5934bab323bf633d1c::94489a2570c2b922a820e5e150dc33711379ea52::40617c7e539b8b70469671619e3c1716edcfbf59::200e6a6332aea3afebb88791ffdab4d352004cd6::12ac97707997f11ebda9d7527aaff14d079a2460::f8f4ac91203506c94d547ee0ef530bd60faf97ed::3fccf6af7d389445089195c7c28d95e9bce40364::10e568577536460647f97dbcc5b9d1777937f5e8::48601c27b7942a18482bc817321a1ce9effece20::9e0b3fc7cfba43af55377488f991348e2de24515::b1e509ad7a8c8264544f10f4666705cd806b5408::dacc947296f41591bacb2b46c91d147df176f7c8::7faa620fd697fe7323487e893596bc761e8d8b33::ffdca21e4489967abcc709333c4835ee45059337::
https://api.github.com/repos/rails/rails,6752,fix_5680::master,0,merged,,"When using compute_source_path to determine the full path of an asset, if our source begins with '/', we don't want to include the directory. Examples are illustrative: ``` compute_source_path(""foo"", ""stylesheets"", ""css"") # => ""/Users/steve/src/my_app/public/stylesheets/foo.css"" compute_source_path(""/foo"", ""stylesheets"", ""css"") # => ""/Users/steve/src/my_app/public/foo.css"" ``` Before this patch, the second example would return the same as the first. Fixes #5680. If this is accepted, I will also backport to 3.2. I didn't get this test. If you use absolute path it will not generate the cached asset? ::See line 1307. ... the test may be bad, I'm not an expert at these tests. It fails without my code change and passes with it, though. ::Reading the issue I could undertand better. Thanks. ::Should not be `test_caching_stylesheet_include_tag_with_absolute_uri`? ::Yes. I'll fix that and push now. ::",afb053b4d388137830320ed8dd49a40dc29a962c::
https://api.github.com/repos/rails/rails,6670,3-2-stable::3-2-stable,0,closed,activemodel::,"See https://github.com/rails/rails/pull/6569 for master: https://github.com/rails/rails/pull/6671 This is a backport for 3-2-stable branch with exception changed to a deprecation warning. I only ran ActiveModel tests, so if you have bad test isolation you might have to fix some tests outside ActiveModel, if they use validates_format_of :)",9ce29c3a20efe6e97d83e7d03b070b58110fad00::
https://api.github.com/repos/rails/rails,6669,3-2-stable::3-2-stable,0,closed,,"See https://github.com/rails/rails/pull/6569 This is a backport for 3-2-stable branch with exception changed to a deprecation warning. I only ran ActiveModel tests, so if you have bad test isolation you might have to fix some tests outside ActiveModel, if they use validates_format_of :)",7def64a96840d439fdc29339cf5d1f4870605220::
https://api.github.com/repos/rails/rails,6664,3-2-stable::3-2-stable,0,closed,,"See https://github.com/rails/rails/pull/6569 This is a backport for 3-2-stable branch with exception changed to a deprecation warning. NOTE: The exception is changed into a warning in the second commit (and the two tests are also updated accordingly). I only ran ActiveModel tests, so if you have bad test isolation you might have to fix some tests outside ActiveModel, if they use validates_format_of :)",3c76156c865b9a90a86133988b17c9d6b6b1202a::06ca3c2acd54b7e296444fee163ad46ee1145410::8fbc328d01ca6cc600c1372dd39dd2faf652b1ad::4ba06019910b1a3772c67c01938ea11e9d102d71::02ba1764edfe5daba3939b7bd0f869bd4c4b5206::
https://api.github.com/repos/rails/rails,6649,logger_in_metal_3_2::3-2-stable,0,merged,actionpack::,Just backport that metal controller doesn't have logger method for 3.2 /cc @josevalim,3b1ea3d896a6a1ebefdf3fcd461396ddbf8df230::4717c2ffc6c2416cfbf5fb560689606eadd3b3c6::
https://api.github.com/repos/rails/rails,6642,3-2-activemodel-translation-patch::3-2-stable,0,merged,,This is a backport of b0e2fc84 to Rails 3.2. See #5843 and #3859 also.,029936efbe7318e9146c22c6609e1571c7abb0c1::
https://api.github.com/repos/rails/rails,6632,one_line_code_for_logger::master,0,merged,,"@josevalim I had to implement it in previous PR, but I don't know why I didn't do it ;) This can be replaced into one line code of course. And if I squash both commits, can it be backported on 3.2, 3.1 branches?",425608e761ff1b89490397982407b3cb44cd1d7e::
https://api.github.com/repos/rails/rails,6594,backport-cache-key-patch::3-2-stable,0,closed,,Backport of be623677 #5394 When I made that PR 3 months ago I wasn't sure what the procedure was regarding backports. I believe this should be backported as I don't believe anyone is using cache_key and expecting to get the encoded object id on instances of `ActiveRecord::Relation` for example. In that way I feel that it is more on the side of 'bugfix' vs change of behavior.,134eda795bd99fb89ec1d094c5cfe2a7cff64c94::
https://api.github.com/repos/rails/rails,6479,patch-9::master,0,closed,,backport PR,88413efe5d3306bfe6ec331a676adf914636cb11::cce708569326c345ce8843f15b08ec5443a27aa0::0e1ecb2e15ab8eaf5641e2ca9eb1c13bf5b304a0::66ec7e84c9710aea7397e9ad92e87063b857c9d5::9b80f8dbcdaca40f10d65570c67b5034bbb690fb::c4fbb21bacc387f76b13d8d16a7cd18282143a6e::104e200a5e60908be144e7bba5b90725f1a115e0::60d4dc1166ebfa1b33f900b57fff6ae0fd7f0244::564a655293b539d9ff27b764bfa16f4f4b731697::fb706c75fc2bd7227f60110d325848a383d05ed6::70b4ea9764ed6035eb531610c6957eb94fc13334::f169dab5c7de4f80587d618144ff0e3214b1c125::0019379e55b9ba2983a513dcee6297298547ef04::4448988b6206024941b33028e5627366f7869d2a::0e0be3546d327e9411e02b82d9692b38ae9d0240::871a0fc8e4c5357c2683a99532d7732f5935408c::680e5d24bb73b636b66d9ed36ac5744178679337::bcd91457a09a5224424bedfedae3eb191c75db8b::7f4bf0141ebed319ad001f7f07f50d6e7282e1dd::d5b9ea3fede57624e491483ff04b746080c7e6bb::9da2a10037a8fa873675118312663459e2f621e0::2b4a7ca4a1e44f03887e582ca1dfeed67eb748d1::110de0f0764eee59f378fbcf16e01c1757ffa617::a64b5dd6dcfcfb59481e9c4cc7be514cb82f92b6::968816aa25a2ad02443767f19b2b4830d1416133::d5e28c313b8113378f1024e312fc77e15f489063::f283194234669d2034653445ca018582dc382c0e::d9584284c242e9fa5fea28035bee85890c395f30::6824c5d1d303f5bbc5c5d390390204fcc0cd6ced::271bccbcef38397eed8d933c9413c9d6f824467f::4a96ab45aa1c8ef1a8d840d0587b1826fc5e3dbf::190101e154be6dd2725c771b09493f6c45c763b4::6cfd1c7726e7687de41f692968f8eb82ae998c43::991e3886a18a6e6bdd601aa8aea7472eb6183849::71d7610e81eb8821052ca7c689830b0ca84a496e::b869b8c00845a1c52b79c2df5f2b0a3aada04c5b::95905c50988dcfbb529f1d0f393fc111e300e7ea::fad08a6e58b04c3122c979b610bc38bcae1d7c69::15e2b5887f2185e01b8d92646a7f441b8c1c549e::5e61d0b6fb6638d4eccfc97fc6d710212c03c6bc::8742a978687aa86c0470d1899c67037e7607836b::fccacae7be258886fe21e50581958f23cabbb041::48fcd225e429a0bf4fa9da399e93936f50ec189e::8d9bc64808c85581cb762c2e95928e56f5a328e3::ad06ddd7318e024ecb75d49a973cf266cf63265f::22cc1e9f96249c980a7150552f38e5febd669855::bc070baca3111350c53c7d87457093eb7b891278::8467ea3051716371150b9e7fa55597d44675df87::3e7af4211b160a64dc867295bd21d53747f9bccf::14bfe83144786fbfb3aa1af9822ae4590228c001::3b05231002f9dde29d0ba174ae49b8fa582bac6b::4bfbdd1b67221422d8c715a71d9bad35c25e3797::25e5ad290af3d2761990708b234a257c26bad0c7::2aeabdc6e1bcd706b8873c797a8949999adf067f::2fc22bf156fc172957040d165afc9c9e36d96d71::fb495cd0c24f613a73b8009e37161f4c3d166b7a::ecddc65104ca113c3df3594ce957c12a5a6ddd00::2771b91db88922ae1bc875eddbce219c31aa7b1e::8ebc17f5c61bb1e46d97ced406e7f6b80c79acf8::2f9bd25a569d3f7f7c4dbde96b406eca1e2a29aa::5a44c701eeea76313806689332d10a4debe923b1::3add2ea56c0f0453d7f42dbb8269488d8c14e2c1::19392cf82728b3c8fb217af366b77caab88e43d7::59f19a95bb61b378f4c41f95135588f053efeb53::a6495af688df9e17cb2c01dd32748129709c984f::b3e3c50addc04d888c09cb4c56307d158c97f513::0ed8dea9aad83e64335cad039b2b5d1438a4ba11::557d788792b84e751de9c780f09cf952738a81bb::e54d9c1eb758d7f6f13f699e097c9f07a54d4970::a657a4b21c800e155e84b3b5d6a18ff0716c4da5::a13317d3090fd558a3ddce13853105ae5ca1968d::39d53504998630b09b35a5c8665e86dd0e8af050::3d0fde5edb5439470b70aa48ce6f35b11a35659a::9663fad8e23e5c4ee0e7c864deefd317f051b576::c314203d8755d211ec12fbb0d8d1b513a4bdeb39::3ba3125b24b532876c95c8d9d00c9b69faab5a60::3001728325d3bbde44f12a7b76dffdc0112dbed6::1b03f7fba74725ab0461a5322649254cc57b7c78::7ff32e2564b5eb96eb5bdf6cc4906afe52369026::2f3eb7aa95eac780c706cf5797cda0fee9e14b3a::9e4d1565ad311599318a8ad05f59a89ecf2f55d1::e2d90bf8f5b9124aecbe2ebb4776314a34f7321d::e9f2c67874a8b9a2f1fd4df068f8640bb266f139::8226dfce5ffdf6107a3a67f66ba7acea892f25e8::28f057c9d2a5122e8ce62337ce2e58c4b3b566da::caec63929fabe0368da71128c96e74c174791eb9::fc4bce15fda70b2b047ffb4a3b738375934f1f30::9a4d2b27c8865cfda7e3421500d71676fe542c62::c476a6be78c27a2e92e30f0e46c6dcbbbaabc419::b1b5d1804278d097cc703238e67b55bf55b00be9::247a50b6c338de2fc9b7e13bed9ed3b36c5fcf75::c2d3a43eca9952b1eb115719175a9457136e37d9::bc5ccd01796259cde6e5a00a954ae1b29b52b286::39a4f67b5d773078ae741803f78fe75f22563fb1::2cb29fabc1db7205b36d842f6bbb9b16ba84b2eb::1220b1615acd9ba873a8d8144a507019db80c67a::71c010d9964041fe6ddf0b34c04b47ced75e4f57::5e64538435e34b67537649ba677bfac441fa70d8::a6139b9d1c9069d7e58cd5e28807ab7b74ab271b::9ade5870023a427433737325005d47f600105a3a::047b979eae3e3c11d57b736e6952e11e5be1b273::80b1f9ea780ad75e982dc6779f3af16d09c77e54::bd804d757d97f1a908e40b82930fe12453a7f5c8::c39bd5f1ce8f3fca357278f0d8e0f9f9137d6dea::b490fd87f58a458e42bdc025c2dfc4033e605458::19d968958d48b59371b99bf91d419ec6f37e0452::eead13f16630de02b258782ee78bb908fdec94f2::edfcf47026e408276684237e9e3d49aa4cf3f755::56c663b1ea8a75ff3ae608a5d2eef113d0c336f1::64c269a7b047d9e9da97969d0cb1c499fdfa5396::e18e8969c169e721939d3061bfc4353c00e486ff::43e6f82ac2b986ea6514f4c9a3fc80f04484cab9::e93cff8979e54440951d8ff4527d217b53879e58::a8aa666f162fb07c0c08906583d459216c142f77::a33fe79430001a4b3f59ba8b3fb51ac1b1c2921c::6c0beb521bdfb3eca81f78a8faf8dfc59952192e::5d7ed7a056260c314d1b412a80707ab573e10b4c::3676af404d3c8ae869119f0ca093e0879a67c585::6631abd155e3f86ab73652adb493e49c6ec1f11c::b9f6798c21f4965d1a47d07410e4f802145fba03::553d9ea6dc35aba099d41815780b9c1b9eb99049::b0334dbe4705c855bd7fc1f2de1b7e0102d67b05::cb36585c27e77073c1bd6702cd828f1bf1d2ee35::773d21959e62234fdf84020fc6aa2ca08194850b::564d39ec70f04b2917a84f15afc3ddb0b60f6e3b::a173bb328b267fec2bdd9c9838ff9e2265bb02f6::e42c544920ed679f6b4ee21f77d5e1c2fd49d582::df6b1e231e4ca39945c9c4e8faff9a03ef4f2df1::f54d0cfb24b106388ca3d6eab9c4ce91c68122fe::e0b0da22f6213de54008ef7720e1b2e9ccea1f92::9d174585445c314c40ad91dcf95085933ac3e550::521c9aa6a85fdb4c6d43d2aeb1af7b4cae2a20f5::65a648be10148a8a616b28464763bd0e71635429::1f6360621a9b584683764346f92cf1126d03d3ad::11f65311a43b0231d08b7d7b5e00de3acb133d56::f45c372e434e95bf49e02ab9e1564f8f9fdcfa21::4c8a211e00c04a260e0a36422bb2f79abc901154::e0c03f8a2e727619c1eb1822d100d8c920d8bf12::fb4747bcf1659a94d76ac221d66ce44148ca7b49::3480d97b6c9f657ca1d0f11ac1e3e17baf84cdb2::b45dfc7278c19d0bbd4c36185edcc6f3b3ac6573::4f15f392601d4504fab850f3bf659c43f0cb51ec::0b377044fa17b72bc9394a4161c22f1b4686a7b8::0ebdef2c0bc7a87d23d637b3e330a5da32e5c8f3::c8ec8f78d3e26f4f179112b10be445748d93a3e4::d7d0c256655e362c4307de0be73c7e6b4b96637c::941a9d0cfbbae9101ec5f2b4a8ed5ed865661941::0195846e5836a0f4981bf6b5944313b0462d6381::b550eccc699f1df5796fa30cccf035a5135e905b::f2aa46b17c579d2b343b2cbbe99e8f6ca12cd0ac::59a64a826600b5451f7656012458ecc4f237dd92::8094d29d2b9116d22e1beece6dd2ae336be71697::cf0ea79087c6e43e8c9476a1951ba605490abbb3::15dcdf6cf2c384614b1e8c1a64d5c113cc6b4e65::3e00e4992940f88f278d444fb7f67d6919691ba4::9ef9f9884bf32f6b73c868887f125f1dd43f9ac6::c7f3429c2fcff729f9aff1ce36fe03f97a04b976::3a3344a456bf988c8b61d0a02a3296726b82c6d2::436415755563ca5048f6d96741fe9f83b8491c08::d93213f99fe20ca3d3c2faf53b2bdd790914ce5c::de178dfeec8afbe73b9ab456c0a0b3f998535287::45b7731838cf9f9033e531ea55cf4aea4a1cf51b::a8cfc997144233915d8daa372ad0a998f760cf2f::f863af968f5d436f8bf2937aee3bdcab69d3fb51::5c10a535a5193c4ff5fc381720a31f8faefb9577::9c2ff32851d3d42e419dd5393e237796ee905cf8::a748c600dddcc894adb0d8e427d7f2c7bc13528b::813e288807271e5b83c26c616aa8b70b39ec7fcf::78a4aea83e2fe5b2e544199d1af17bc5cbebcb42::378ce0e89c498e2844aef0b184c4fe8610d53b72::0dd7411c39328581c629f6358851ea104d6faa25::1000ada3638c2ed98d316a2e500ba6e9d1d8a5f8::87bbf4856774c7bd565af51138743b781116ceec::346973e3a3fcebb29848722e9b88f89cc1054520::984d03149080628ed3c628a12b90cbbb6b2bb50f::543b587c623ce5c14f7f581e0475a8af1d6feee4::e2c03bfdd5d9368d61e176d68d488a4ae0bb82eb::68ae66d0256f69d12b8660105a6376aea9d4386f::fd677351ce7642bdd7f448a43c5a189fded51376::394dd6fa93c3a019101ba42864a56c6c3f7fd0af::328ae5bb9b6cf2bda2ec9e5f4c1fd92c16be311f::6122924121f286e79a947cdf4abfe7ca8e78bbd6::b81c3f7d6a41488ba40f41b2b0ed9c32d83e0b39::2ba03098db0d2c2c6682e71f7c60266f9db6e215::4e72f59c5d1c570f043fc54a088f4db23029173e::de44773952fd9abbb5b57b99789cb0e80114e400::961b4a004230f078b99cfdf701d263fa6653cdb1::a03f0181a4f06ec18b41cbde0afd8ff2e944546f::ba2d85012088fd0db0fab98b2e512c77c83cbade::0e9910eaff34edd0b4c4dfa3bdd1d465b6bcf7a3::618300ec4adad2b0c8edd7122ce8e5172674c953::66a4beb0c9764238e1e8bed83aca88a397039bde::13ad87971cc16ebc5c286b484821e2cb0fc3e3b1::be8485e77dbc52823dc47ea9a32ec305fcee0895::9ebacf3bf5c8878f405db66a3f55ca1ffea90452::dea2e9cde697128c0f34751b9f4a3385cb8f324f::9effced47fff7cf78734bba64bc95735db29ba0a::0531e26daa01d619386bc8df9518a987a1295b87::289ae94b67ac26c6c3bd42cc743e122a38b3e17b::8fabf78708c09066c232fd1c941c4604bc04bb56::cc3fb2e1c51f16d2a67d56ea5b2dee95b309bc2a::36b6c52f9c5fe519c246320070c66bb1c3caaaff::51dcf85a8c4f26a18fefab6ebe842e042e8142d4::10c8e8df68e7d2fccfb3ac1435dec2f840869534::ad9a0e32e64b03b574c32848fd6052ff7d29611e::b7e45c3a816d943b0201bb5049d7dd12345e868d::ab05e2b52a228d4ab83dddcf9566b973a41d4581::ce650ee47852341ffdefed0f6b7417667895e3a2::7e03b9dc9bac6f1d18b2935bc221a4e3b3f4d26f::a048568b8dcc8ee9452d1973c3962718993e475e::91a9b2441783de118a2f9ec11b0aa3ae80133d91::d4c26c4650acb2a0d42d55743f56c400618c99a8::c67ff97ec3895db99bdb6b7cb3e8cc4e3cee0949::a97cf753a116749ed307546e72eba4c1d4c4361f::389d1c5b65568e316ac55aa6534e782648855b92::5b4082fddf3412aef6c085fbb2a13fd3bbc75f4e::e50ee96a0b37e7c5adfc555edd402ad04cc159f1::6adc41789017682306181e3db5b30337fe450bcc::67b6847e0976eeadc4eecb156cc1e06157223899::2935435d7058cf00da3989b0e60a28b1472509bd::c4f92646ea53152987dacf9732e3306657f038de::917fd1a03845f4eedaccbc338f9d7524e98d45ee::9435f5a479317458c558ae743b7d876dd5a5db20::9d6377ed731bafbe9d20ac7e950c1c135ab02f9f::eeb715add2a6e40cc7e55d213f6c21be917196fb::f1c6037aac9a26b5793e77cac9d9d241786469a6::f8f873a5d3bc6845574ebed6a78d1539c6e7ea34::61335d689a5afcd0a49a997e52e0d1eb6ca5ee50::d14319cb2eb054bede851dc4ec728e4128feada7::8645745d5fccfc4d83f768b04f6df7adc1eb4a99::a9fdefd2061dd7f9d71b28bb309f81f6b33c8e67::f748d36b4014418c48553836a56b4bec74e15e49::728a65d2dfba48408155a72310a13891ba638245::00726ea75ae3921fa9db5a16a6549fa19a24d984::9698312704017d634cebe48e9ca06042b3d549c5::3627cfab7e95b71732b55eb1381ce8c9741aaeb9::5790269af9583445f76a5c5580609afc1448bcdc::923ba31657252b49d8c9e9433974afd2719eb43e::caebe85ed2b37422139359b0e1cc84b03f4d06f6::289fe762d24c5045c389d09602fa4ea00b234d7d::4c9dec4f2b68a52edc3346ade2ca3be45e273c2e::e0362f71c43cd980a220ca59230900e3f8345cf3::29320dc27c14f9de74eb211b13f65df220f30eac::60272ae5a60f02eb92bf6a0aa52627ee9412e4e6::72dc7ae95e3dd3a6f42adb550b1e3a78572e8375::d44ffb2bd5c501ecf28e0f02cb75cfe39d0c0a38::f47a303c3940874b7e4fd4e3ae4f68b1efa5f0ac::51582feb0369ae33aedd1e5ce04bf892c2940a1b::e74e479529456be20e5ce9b0bd149937546e0e8e::15f1035e47549d6b3d3f3f4db1c59a58b477b4c5::
https://api.github.com/repos/rails/rails,6447,add_backporting_instructions_to_contrib_guides::master,0,merged,docs::,I was looking for instructions on backporting changes the other day and wasn't able to find it anywhere. I updated the contrib guides based on the disccusion in #6420 and #6215. This should be `git checkout...`. I think you(me too) are used to our aliases. ::Good catch! :) I'll wait for more feedback on the overall direction and fix it then. ::,c97fb889a6db6c661853ce0612791a26524e7c50::
https://api.github.com/repos/rails/rails,6445,3-2-stable_restore_frozen_state_on_rollback::3-2-stable,0,merged,,"This is a 3-2-stable backport for #6420 which was merged into master. Currently, when saving a frozen record, an exception would be thrown which causes a rollback. However, there is a bug in active record that ""defrost"" the record as a side effect: ``` >> t = Topic.new => #<Topic id: nil, ...> >> t.freeze => #<Topic id: nil, ...> >> t.save RuntimeError: can't modify a frozen Hash >> t.frozen? => false >> t.save => true ``` This patch fixes the bug by explictly restoring the frozen state on the attributes Hash after every rollback.",a5430024fd7e654d379b20373247033f68ec0a21::
https://api.github.com/repos/rails/rails,6427,resolver_concurrency_fix_backport-3-2::3-2-stable,0,closed,,This is a backport of the following for 3-2-stable: 685192bbcba7f887236ddf43ebb7d7dcf7409bd9 and 719b008f1dae30c5fb6d09a371ae8d949c867a0c,26160ec1de79259ece2127141812736012e329e0::56ea5dfdd4adf74f3565f5d97d8724c73515eace::
https://api.github.com/repos/rails/rails,6423,patch-2::3-2-stable,0,merged,,closes #6310 backported https://github.com/rails/sprockets-rails/pull/11 to 3-2-stable branch,39f9f02ab04973b213bef8c6f4c1a71043ed709d::
https://api.github.com/repos/rails/rails,6390,invalid-ruby18-syntax-in-habtm::3-2-stable,0,merged,,"@jonleighton I feel guilty even submitting a pull request this small, but it looks like a 1.8-incompatible syntax change made it into a backport from 4.0. :)",3b444eed71402cda92dae2d9d1c342253dd18f8c::
https://api.github.com/repos/rails/rails,6329,backport_dup_validation_3_2::3-2-stable,0,merged,,add a backport for initialize_dup,e885b18fe9d20746fd0e5165815119bd2836cd60::
https://api.github.com/repos/rails/rails,6250,dont_destroy_readonly_models::master,0,merged,activerecord::,"Rails allows to destroy models marked as read only. This pull request fixes that. I'm gonna backport this pull request to 3-2-stable, if this one get's accepted.",a8b370f5c2fed87001e363d18ce60a47c1748885::
https://api.github.com/repos/rails/rails,6170,feature-beginning_of_hour-for-3-2-stable::3-2-stable,0,merged,,Like it says on the tin.  This is a backport of the feature merged to master in pull request #6156 that adds `beginning_of_hour` and `end_of_hour` to activesupport  `Time` and `DateTime` calculations core extensions and associated test coverage.,145cc69524c43d24c257be30a7ea458a284d164f::
https://api.github.com/repos/rails/rails,6158,3-2-stable::3-2-stable,0,merged,,This commit is a backport from the guide in the master branch.,b4ae94fb83132e7baed4cbe4146d8e63407fb060::
https://api.github.com/repos/rails/rails,6060,master::master,0,merged,activesupport::,"I have to carry around some snippets 'cause I always use these methods (specially deep_symbolize_keys) when I use YAML files with custom app configuration. Some people I know also have their own versions, so I thought adding them to ActiveSupport was a good idea. Can we remove the parenthesis here in the hash access pls? ::Can we loop keys and values once? ::Woops! My bad. Doing it. ::Self is unnecessary here ::I think so. I did them separately to ease the understanding of what's going on, but it would be easy to do in one step. ::Sure. It's more a style thing. Should I remove it? ::Yes please. We had a pull requesting from @gazay merged yesterday only changing these style things on Active Support ::Ok, no problem. :) ::Ok, after further review, I can't change the own hash inside an each block (it throws an exception). I could copy the hash and do the conversions, then change self to reference the new hash or just keep iterating over keys and values separately. What do you think? ::Yes, I think it can be done similar to this #5939 ::Using each_with_object? ::Yes, sorry, I was from phone, can't write more Something like this: ``` ruby each_with_object({}) do |(key, value), hash| hash[key.to_s] = value.is_a?(Hash) ? value.deep_stringify_keys! : value end ``` It's the same as you described ::Instead of calling [] on self will be better to pass just value in the false part of ternary operator ::This would make a copy, right? If a use each_with_object(self) I'll have the same problem (modifying the object while iterating over it). I think I'm missing something... ::Yeah, way better. Missed that somehow. Thank you. ::Oh, I was wrong, sorry. My example will works fine with non-destructive version of this method https://github.com/rails/rails/pull/6060/files#L0R58. In ruby you can't change value of self, so you need to do something like this: ``` ruby def deep_stringify_keys! stringified = deep_stringify_keys self.clear.merge! stringified end ``` ::Yeah, that was what I thought at first. I'll think about a way to benchmark this and see which version is faster. Thanks! Also, I'm repeating the logic in every method instead of reusing it (like in your example) because sometimes people will undef some of these methods. I found one case while writing this code, so I decided to just repeat the key conversion code in every method. Maybe extracting that part to a private method and reusing it would be fine. ::By my benchmark test separate iteration is faster than my example about 1.5 times :) ::I've found similar results. The code that iterates over keys and then values takes ~6.4s to do deep_stringify_keys! 1 million times. The code that loops over keys and values at once copying the array and ""rebuilding"" self after takes ~8.9s. So, I think I'll leave the code as it is now. Anything else I can improve upon? ::I found better solution and only with one iteration: ``` ruby def deep_stringify_keys! keys.each do |key| val = delete(key) self[key.to_s] = val.is_a?(Hash) ? val.deep_stringify_keys! : val end self end ``` It faster then separate iteration ::Nice @gazay! It seems Ruby doesn't mind if you change the hash while iterating over the keys only. Good to know. :) I made a commit using this code for deep_stringify_keys! and deep_symbolize_keys!. ::I think you can comment about both `deep_symbolize_keys` and `deep_stringify_keys` :) ::Gee, I need to rest. :P ::why stringify here ? ::Silly mistake. It's correct on master, which uses a much improved code through transform_keys :) ::huh, thanks :) should I backport to `activesupport` the `deep_transform_keys` method that goes each `Array` value and transforms it for such hashes ``` ruby { :a => { :b => { :c => 3, :d => [ { :e => 4 }, { :f => 5 } ] } } } ``` useful for validation of hashes of model with has_many related models parsed from JSON ::I think that would be nice.  :) ::",a4bb195c91fa9bb25e136aa8850f3acafea0a597::
https://api.github.com/repos/rails/rails,6022,3-2-stable-record_tag_backport::3-2-stable,0,merged,,This is a backport of ba77ff3c1b583fdacf733404bbf4508042b45656 per request. cc @luismreis,7006e975ac29e48cb9645733df04b9841bb2c29d::
https://api.github.com/repos/rails/rails,5968,3-2-stable-backport::3-2-stable,0,merged,,This was a backport from `master`.,d95f3d3f73174e5fd946457ab376efbec744c9d5::
https://api.github.com/repos/rails/rails,5900,ar_mysql_pk_with_using_option::master,0,merged,,"Given the following MySQL table (you know we sometimes should unfortunately work on some legacy DB or non-Rails DB like this): ``` SQL``` CREATE TABLE `btree_pk_tables` ( `id` int(11) NOT NULL auto_increment, PRIMARY KEY  USING BTREE (`id`) ) ``` `BtreePkTable.primary_key` becomes `nil` because of Regexp bug. Attached a patch with test cases. Tested on MySQL 5.1, Ruby 1.9.3. Because this bug happens on current stable version of AR, I hope this to be backported to 3-2-stable branch. I confirmed that the Regexp works either on Ruby 1.9 and Ruby 1.8.7, so it should work.",851b816f56f6c918d88cbed56f50bffede4ed55a::
https://api.github.com/repos/rails/rails,5898,3-2-stable::3-2-stable,0,merged,,This reverts the revert of the fix for #5667 and backports the fix for the regression (#5718) described in #5667 to 3-2-stable.,13f1401a6cf0266a3b0a91b173f976db2d4e50f3::8491740ca5361ba9df20e1c8b906c709f5bfbc12::2c21a2f7eb9f8cc50a3e957784105e187f63d5f3::ebfa58abc895c0639211cb896a47b04e424322c8::
https://api.github.com/repos/rails/rails,5860,multi_json_upgrade_fix::master,0,merged,,Multi_json also upgraded. They have upgraded there API. This PR will fix build. Also need to backport in 3-2-stable I guess.,57baa0e97aa4b444706007fe5b9e9ecb5e462df5::
https://api.github.com/repos/rails/rails,5652,pick_frameworks::master,0,closed,railties::,"Rails is a modular framework, which means customization is likely in many (most?) cases. To make this easier, always generate in application.rb a commented-out list of built-in framework require statements, so it's trivially easy to strip an app down. I always forget what's included in ""rails/all"". This would mean I never have to poke around for it again. This could/should be backported into a 3.x update as well.",682a3ce4c8eebc5af73b5f46196795b32bd91e1e::
https://api.github.com/repos/rails/rails,5618,patch-1::3-2-stable,0,merged,,backport ddb5d2f756d9d2655a07791a3b62832efd588474 to 3-2-stable,fdcfc7521f0490aed74f372b90ef5e982b0f7e7a::
https://api.github.com/repos/rails/rails,5596,patch-3::3-2-stable,0,merged,,backport #5594,bd8a9701c27b4261e9d8dd84aebbde6ba784ed83::
https://api.github.com/repos/rails/rails,5537,fix_4399-32::3-2-stable,0,merged,,This PR is backporting #4399 to 3-2-stable. I think this fix isn't merged yet. Please see https://github.com/rails/rails/pull/4399. /cc @tenderlove,565bfb9cd49285ebaa170141b4996c22ba81de43::
https://api.github.com/repos/rails/rails,5312,fix_3927-31::3-1-stable,0,merged,,"This PR is cherry-picking 63cd9432265a32d222353b535d60333c2a6a5125 to backport to 3-1-stable . This is @jeremy's commit :) Since it seems that there is a demand, I send PR. If we preferred stability, please close this. Please see https://github.com/rails/rails/issues/3927 (last comments)",7cdfd910b7cdd398f8b54542c5a6a17966a5c8f3::
https://api.github.com/repos/rails/rails,5289,fix-through-associations::master,0,merged,,"This also need to be backported to 3-2-stable branch I'd suggest `ensure_mutable` for the name, because that's what we're really testing. Also wouldn't use a `!`, as the whole purpose of the method is to potentially raise an exception, so in that sense it is not surprising (also that's consistent with `ensure_not_nested`). ::I think you can probably just do this on the model directly, i.e. `SecureReader.mass_assignment_sanitizer = ...` ::I would put this in `reader.rb` rather than create a new file, as the directory is already pretty full, and this follows the pattern in other files where models sharing the same table name are in the same file. ::",e9bf0e3157fcc15f3520559a34bbfdd894dd8112::c9c7ee7710a637e1dd3c1d4be3960fe22f8ee3d1::
https://api.github.com/repos/rails/rails,5284,railties_seed_task::master,0,closed,,"... similar to railties:install:migrations. The use case here is we have a contacts engine, which provides all the CRM related stuff shared across applications. Certain seed data like countries needs to be provided by these engines. We can provide migrations no problem, but at the moment we are just having to run ""ruby /path/to/engine/db/seeds.rb""to load the seeds. This adds a rake task ""rake engine_name:seed"" (similar to ""rake engine_name:install:migrations""), to run seeds from any engine, and a corresponding ""rake railties:seed"", which uses the FROM environment variable to choose which railties to run seeds from. Would it be ok to backport this to 3.1 and 3.2 aswell? Let me know and I will send pull requests for those.",3d39e19b1d6a26d6edbb6f7eaa2a3acd4928b1ba::
https://api.github.com/repos/rails/rails,5153,first_finder_fix::master,0,merged,,"Hi, When you do a call to `first` the generated SQL is this: ``` ruby > User.first User Load (35.2ms)  SELECT ""users"".* FROM ""users"" LIMIT 1 ``` However, PostgreSQL changes the 'default order' of the records when you perform an update as you can observe in this example: ``` sql # CREATE TABLE users (id serial, name varchar(40)); # INSERT INTO users (name) VALUES ('John'); # INSERT INTO users (name) VALUES ('Michael'); # SELECT * FROM users; id |     name ----+--------------- 1 | John 2 | Michael # SELECT ""users"".* FROM ""users"" LIMIT 1; id | name ----+------ 1 | John # UPDATE users SET name = 'Modified John' WHERE id = 1; # SELECT * FROM users; id |     name ----+--------------- 2 | Michael 1 | Modified John # SELECT ""users"".* FROM ""users"" LIMIT 1; id |  name ----+--------- 2 | Michael ``` So I made a change so that all `first` calls gains a default order clause: ``` ruby > User.first User Load (3.1ms)  SELECT ""users"".* FROM ""users"" ORDER BY ""users"".""id"" ASC LIMIT 1 ``` If an order clause is already chained, nothing is added: ``` ruby > User.order(:name).first User Load (75.1ms)  SELECT ""users"".* FROM ""users"" ORDER BY name LIMIT 1 ``` I'm not particularly confortable changing the global behavior for a PostgreSQL specific fix but I think an adapter check wouldn't make sense in this area of the code. What do you think? If accepted I'd be happy to backport the fix to previous versions. Cheers! Can you use `to_a.first` in these cases? ::Can you check to see if there is a way to do this with ARel nodes?  I want to reduce the amount of raw SQL string concatenation we have. ::",07e5301e697d6a02ed3c079aba07c261d53c1846::489166e114ba3af54b1f2081027cd44078d32bbc::1379375f93c53d4c49fa8592b6117c3ade263f2e::66b9e4c857b5987a52f0442ae382ee18dc3dd30a::2bf65caf565c5923684953557594fc287c80c6ca::878db1f4ef842a7c6c406aefb4dd2e629b5f47af::
https://api.github.com/repos/rails/rails,5104,3-1-stable::3-1-stable,0,closed,,"Ignore the ""personal changes commit"" - this is backporting the fix applied to master this morning regarding tables with primary keys from nonstandard sequences. Can't figure out how to selectively exclude a commit...",5e8bc23eb8e013d3b224a7f1f558a43cba6fbdad::16310df127381982f05cee425bbdaffe59b94209::491fb099e747e57c2d4a522f3b45d7721212f8b4::
https://api.github.com/repos/rails/rails,5073,4918_backport::3-2-stable,0,merged,,It's probably important to backport #4918 to Rails 3.2 stable. /cc @josevalim @scottwb,dffd85a1922d4169311f98d7560564d4356f8631::
https://api.github.com/repos/rails/rails,5049,master::master,0,merged,,"There is an example in Rails documentation that suggests implementing assign_attributes method for ActiveModel interface, that by default sends option role with nil. Since mass_assignment_authorizer never is called without args, we can move the default value internally. This should be backported to Rails 3.2",d204918f9190afcf5f3f53adb957ca15aa644704::
https://api.github.com/repos/rails/rails,4786,patch-2::3-2-stable,0,merged,,backport of https://github.com/rails/rails/pull/4782,cfea67313525828960717be15b9b52918af33ba9::
https://api.github.com/repos/rails/rails,4579,add-js-runtime-to-gemfile::3-1-stable,0,merged,,This is a backport of 94bcdd60eaecd81 to 3-1-stable,bd5392c4aecb7d94b8ee1b20db857afddfefe4a8::
https://api.github.com/repos/rails/rails,4531,pessimistic_with_lock::master,0,merged,,"Add a `with_lock` method to ActiveRecord objects, which starts a transaction, locks the object (pessimistically) and yields to the block. The method takes one (optional) parameter and passes it to `lock!`. Before: ``` ruby class Order < ActiveRecord::Base def cancel! transaction do lock! # ... cancelling logic end end end ``` After: ``` ruby class Order < ActiveRecord::Base def cancel! with_lock do # ... cancelling logic end end end ``` This PR is a modification of #4503. @tenderlove, please merge and backport to 3-2-stable :).",7afbc89c37e56531c9ef4e34369e329aab1b21de::
https://api.github.com/repos/rails/rails,4503,accept_a_block_in_pessimistic_lock_master::master,0,closed,,This allows to shorten a typical idiom of calling the `lock!` method as first within a transaction: ``` ruby class Order < ActiveRecord::Base def cancel! transaction do lock! # ... cancelling logic end end end # becomes: class Order < ActiveRecord::Base def cancel! lock! do # ... cancelling logic end end end ``` @tenderlove this is the port of #4479 you asked for. Please backport to 3-2-stable as well.,5e28182d333f02a8f8a59e79e2d80f2f0cfed3c5::
https://api.github.com/repos/rails/rails,4492,3-2-stable::3-2-stable,0,merged,,"Since ActiveModel::Errors instance keeps all error messages as hash we should duplicate this object as well. Previously ActiveModel::Errors was a subclass of ActiveSupport::OrderedHash, which results in different behavior on dup, this may result in regression for people relying on it. Because Rails 3.2 stills supports Ruby 1.8.7 in order to properly fix this regression we need to backport #initialize_dup.",7021184f9cd385bc7f7c7bedf6ce871806b1981e::
https://api.github.com/repos/rails/rails,4474,fix-route-inspector-3-2-stable::3-2-stable,0,merged,,This is a backport of #4469 to 3-2-stable,666f9316ebaa13d594c6b66e095096c52d82e3f1::
https://api.github.com/repos/rails/rails,4418,read-and-write-attribute-aliases-3-1-stable::3-1-stable,0,merged,,"As requested by @spastorino, this is a backport of #4408 to 3-1-stable.",f22c36bc826827f937dc0b964a085f763f4f4d9e::cda5094abd605d8612b4b031cf870a2004938125::f707cda53c58e42e1a93bfe533ca3d460d5ff9c9::
https://api.github.com/repos/rails/rails,4021,3-1-scope-with-lambda-duplicates::3-1-stable,0,merged,,backport #4011 to 3-1-stable /cc @jonleighton,9f7fe5d38b5064dbca99638ebe3877398c444e06::
https://api.github.com/repos/rails/rails,3846,backport-load-and-require-fixes-to-3-0::3-0-stable,0,merged,,These fixes have been applied to master and 3-1-stable.  It would be nice to backport them for the next 3.0.x release as well. See #3845 for more details.,dea2e9cde697128c0f34751b9f4a3385cb8f324f::9effced47fff7cf78734bba64bc95735db29ba0a::0531e26daa01d619386bc8df9518a987a1295b87::289ae94b67ac26c6c3bd42cc743e122a38b3e17b::8fabf78708c09066c232fd1c941c4604bc04bb56::cc3fb2e1c51f16d2a67d56ea5b2dee95b309bc2a::
https://api.github.com/repos/rails/rails,3745,patch-1::2-3-stable,0,closed,,"I backported a Ruby 1.9.3 fix in MissingSourceFile from Rails master. In Ruby 1.9.3 a new error message was added when the LoadFile exception is thrown; this was fixed in Rails Master but not in 2-3-stable, rendering 2-3-stable unusable with Ruby 1.9.3 This is the specific line from master: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/load_error.rb#L6",6e20c3f895563280e6e8fb14ab9047d5064bbcf0::
https://api.github.com/repos/rails/rails,3705,3-1-stable-therubyrhino::3-1-stable,0,merged,,This is a backport of #3626,b710ceacc23f7b9650e9b7763ecf9f85e94fd4b0::8b8ff9834b451fd51999fd841d64511090f1a748::80b1d4d0c5958f0f7094395e39ab28c0b1d9f1d9::
https://api.github.com/repos/rails/rails,3373,securerandom-uuid::master,0,closed,,I just saw ada78066fdbc and I remembered that I backported it in a project some months ago,735a9ed6358b5b8d3d74cd140cad086bf5663029::
https://api.github.com/repos/rails/rails,3154,enhance_button_to_helper::master,0,closed,,"We may use data-type attribute to set Ajax request type for ""data-remote"" requests. (see [jquery-ujs wiki](https://github.com/rails/jquery-ujs/wiki/Unobtrusive-scripting-support-for-jQuery)) link_to helper has no problem, but button_to will add ""data-type"" to the wrong input tag and does not work: ``` <%= button_to ""foo"", ""/bar"", :remote => true, ""data-type"" => ""json"" %> <form method=""post"" action=""/bar"" data-remote=""true"" class=""button_to""><div><input data-type=""json"" type=""submit"" value=""foo"" />...</div></form> ``` The ""data-type"" should be in form tag with ""data-remote"" , not input tag. This patch result: ``` <form method=""post"" action=""/bar"" data-remote=""true"" data-type=""json"" class=""button_to""><div><input  type=""submit"" value=""foo"" />...</div></form> ``` It will be nice also backport to 3-1-stable branch.",09dc54a83a2e7a05b1345371c57cc5524875bced::
https://api.github.com/repos/rails/rails,2983,3-1-stable-hash-backported::3-1-stable,0,merged,,"This is the backported of #1296 to `3-1-stable`, as it was fixed in `master` but not on `v3.1.0`. I hit it hard when I upgraded my application to 3.1.0 and Ruby 1.9.2. @tenderlove and @josevalim, please merge this in before release `v3.1.1`. :heart: :heart: :heart:",981f0762a3199705cfb5accae6f2651e78b275c4::
https://api.github.com/repos/rails/rails,2939,url_for_fix_3_0::3-0-stable,0,merged,,This PR is a combination of this original PR... https://github.com/rails/rails/pull/2497 And a better fix from this commit... https://github.com/rails/rails/commit/8196c842b6f32271c23cba6b97918d32747018d8#actionpack/lib/action_dispatch/routing/url_for.rb This PR backports the fix to 3-0-stable using the cleaner solution.  This cleaner fix already exists in master and 3-1-stable.,45b7731838cf9f9033e531ea55cf4aea4a1cf51b::a8cfc997144233915d8daa372ad0a998f760cf2f::
https://api.github.com/repos/rails/rails,2874,3-1-stable-extractable_ordered_hash::3-1-stable,0,merged,,"Make `ActiveSupport::OrderedHash` extractable when using `Array#extract_options!` `ActiveSupport::OrderedHash` is actually a subclass of the hash, so it does make sense that it should be extractable from the array list. This is a backport of #2827 to `3-1-stable`",d1a27013fc6501a185b05a4d8d1bff52ab3c012d::
https://api.github.com/repos/rails/rails,2827,extractable_ordered_hash::master,0,merged,,"Make `ActiveSupport::OrderedHash` extractable when using `Array#extract_options!` `ActiveSupport::OrderedHash` is actually a subclass of the hash, so it does make sense that it should be extractable from the array list. I think this is a bug, so if there's a backport necessary please let me know. Thanks!",9984266c041e1079a09140f9307fc1ca13858988::
https://api.github.com/repos/rails/rails,2562,patch-1::2-3-stable,0,closed,,"rdoc/task fix backported from master, for us poor schmucks still on 2-3-stable.",7ed3ce0c77294a9f71035a02bdc1c9716a235c81::
https://api.github.com/repos/rails/rails,2499,assert_select_email_fix::master,0,merged,,Fix assert_select_email to work on non-multipart emails as well as converting the Mail::Body to a string to prevent errors. assert_select_email didn't work at all on emails that weren't multipart.  Emails with one text/html part were simply skipped and nothing was tested at all.  The original test for assert_select_email also didn't report any errors because it didn't perform any of the inner assert_select tests. assert_select_email now works on both single-part and multipart emails. This patch also fixes the body passed to the HTML::Document.new which expects a string.  The body is a Mail::Body class which threw this error if passed... ``` NoMethodError: undefined method `encoding_aware?' for <div><p>foo</p><p>bar</p></div>:Mail::Body ``` Converting the body to a string with to_s fixes that issue. Please backport to Rails 3-0 stable as well.,60d358b23348a14447d176fa51624ad5434eb575::
https://api.github.com/repos/rails/rails,2485,exists_fix::master,0,merged,,"fixes exists? on ActiveRecord classes to return false if passed nil (which may come from a missing URL param) Before: Topic.exists?(nil) => true After: Topic.exists?(nil) => false This is the behaviour that Rails 2.x had and should be how Rails 3.x works as well. Please backport to Rails 3-0 stable. I wonder if `return false if id.blank?` would be much better. ::No, because false.blank? => true, which would make Topic.exists? => false ::",d48dd18bb2a3d0c46708a9ee217909783b997cb2::
https://api.github.com/repos/rails/rails,2450,activesupport-gzip-1.8::master,0,merged,,This can be backported to 3-1-stable and 3-0-stable,aed9917094f0a618b440d0bacee3a33b30f7d951::
https://api.github.com/repos/rails/rails,2357,fix_3_0_to_3_1_migration_syntax_incompatibility::master,0,closed,,"Support backwards compatible interface for migration down/up with rails 3.0.x. Please see issue: #2348. If this looks good, I'll backport to 3-1-stable.",1525d9ac588171de31614af07ca11cdaaa401674::dff728b40fa8ec2ad00d595b21e66bed8b396d27::eae7baf93f4d88614654e9439f0c2d1f89778b1f::
https://api.github.com/repos/rails/rails,2260,3-1-stable::3-1-stable,0,merged,,addresses issue #1907 - any routes that follow a route with a constraints block are inheriting the previous route's constraints. note: backport for 3-1-stable for pull request here: https://github.com/rails/rails/pull/2245#issuecomment-1646998.,8a551086ecfd236f8ec0b41f368eadbdcfdb97cc::
https://api.github.com/repos/rails/rails,2203,3-1-stable::3-1-stable,0,merged,,backport from master fixes #713,e414d4fcf29a4b37b60ed9c94dba3a408d6eaa04::
https://api.github.com/repos/rails/rails,2070,3-1-stable::3-1-stable,0,merged,,Rack::Utils.escape(str) breaks when cookie value is nil. ``` NoMethodError: private method `gsub' called for nil:NilClass activesupport (3.1.0.rc4) lib/active_support/whiny_nil.rb:48:in `method_missing' rack (1.3.1) lib/rack/backports/uri/common.rb:24:in `encode_www_form_component' rack (1.3.1) lib/rack/utils.rb:23:in `escape' actionpack (3.1.0.rc4) lib/action_dispatch/testing/test_request.rb:86:in `escape_cookie' actionpack (3.1.0.rc4) lib/action_dispatch/testing/test_request.rb:81:in `write_cookies!' ```,
https://api.github.com/repos/rails/rails,1889,3-0-stable::3-0-stable,0,closed,,This grants access to the rails command without having to accept the full set of Rails-related frameworks depended upon by the rails gem. This is a simple backport to `3-0-stable` of @josevalim's recent patch (e3053ee753c3035e9d8337680212aba525c27376).,336c5e5d38ab7867e2ae2f25164d76a480238215::
https://api.github.com/repos/rails/rails,1874,config_include_all_helpers::3-0-stable,0,closed,,"Can we please backport #106 to 3-0-stable ? I have made the necessary changes for it to work on this branch, and all tests seem to run successfully. This will be very useful for the cases when clear_helpers do not work.",113239378a6e30cfc2ad2d5b30726695a7b7e24f::
https://api.github.com/repos/rails/rails,1844,cachesweeper-fix-3-1::3-1-stable,0,merged,,backport for #1798,a46d231c7933001d2c2b78a33686fd650c6c97df::2b72bb9846759577607daa34606ca1297626c33e::
https://api.github.com/repos/rails/rails,1834,cachesweeper-fix-3-0::3-0-stable,0,merged,,backport for #1798,8ebc17f5c61bb1e46d97ced406e7f6b80c79acf8::2f9bd25a569d3f7f7c4dbde96b406eca1e2a29aa::
https://api.github.com/repos/rails/rails,1568,3-0-stable-mailto::3-0-stable,0,merged,,"The fix in [cdf617e9aaf26f741bcae275ae675d9522d14496] was manipulating the test, and also _not_ fixing all the issues. I've backported my [9e2e24265510572a6574d38ba2af83fdf734ab54] and confirm that the tests passed.",f57c707f5f5234b4b150676cbe8f24d0176cf513::4b1309edfefb17de3e07ab96c2a8dec68d49da36::
https://api.github.com/repos/rails/rails,1547,safebuffer::master,0,merged,,"This contain fixes, with some cherry-picking from master and some backport from 3-1-stable. All the test passed.",07f2481e152502050f23834596efc76f4a208fc3::9e2e24265510572a6574d38ba2af83fdf734ab54::1bbc51e5a73a5f97565abae43f13f96209441bb8::
https://api.github.com/repos/rails/rails,1546,31safebuffer::3-1-stable,0,merged,,"This contain fixes, with some cherry-picking from master and some backport from 3-0-stable. All the test passed.",eb85169b9a9e4bff8cdf8dd0d0d8e3d9e156e747::509aa663601defc7c821c253d010605951e9d986::d1a74755b3e4f379b1427d9a858c174177678d03::719e05da06d68cb8c767f6f27cec3d069d10ab7a::
https://api.github.com/repos/rails/rails,142,add_missing_tests_for_subclassed_arrays::3-0-stable,0,closed,,This is a backport of tests from master for regression purposes.,5b4499e4fe536192e260af59fa100b02912156f5::
https://api.github.com/repos/rails/rails,141,add_missing_tests_for_subclassed_arrays::master,0,closed,,This is just a backport of tests from edge for regression purposes.,41e5e4a7bd8ecacbe1324ae79d47e5014f1ef6a7::70e4403e46ad536399c7df9f64aa257c5a45b801::5d9219b1b5782cd47926072f7a31492a9989ea49::4c3edae2bdefc7bdfabc298e7472d71f55cad692::13f10ac4ea0ac618abe4fd8c67374ec3130b41f7::86534a35f944e84319645784088efb411a4d600c::43b0fd79182f8e6851bb2605d188c68c44d7eaaf::ccc8d9ce54735e5ad29b354bb8b4ec97a6ce827a::dbc0023d6dbec2a0fb188880acd0dd5fd1ccf023::28f9d60f77c34c25d26ef6fdd6c54f0dce0c2641::7487767c31ff925e29e9820d966209ff045a87c2::c41d9813be0104a5ff68e3ec26a22900dbf2b5da::4369f132a6d9c0a4b674bc30eaffb42bb39c0b86::1540bf581605dbe10a372c40a0e85656df3b0b8e::65fdd284e1c1ed6b7c33b3afe60f7ae570f198ef::029c8ff46c76eff3091994f99462ed7f80e3b222::31b6a6a78b264f02a715b8c82937b27e8d495eb1::186e3c71f95316b94e728eb62b519d074d27cea3::fb4dc1a51217f24dd31714fbe1647c1d34ae1441::76efb921e3c45646af8f693ff1d79780c22f37db::89b073b3670fc5bc2f9f646fa8caadda2a44f356::19ff18ed26e28735ae920abc27ce11f69c9f9aff::bd944798a5732fcd59e6d0b1140ac15203f9b2be::fc69c64c84c424576204f0100df9a1bba3b29160::edafb494724db9feb03540293de3bdcd67b2cb96::e2266cfcbd74d24d5311521a386dc6ed5536d406::ed91716439c2f3472f5545884628d5ebb7c2f890::c7dd1e4df4faedb20a31ec616d0e4360fa53033d::69f7d39945a946dc284bac05fa7aff33159d4e80::34dc0301774dc50d23b09f66d05194c1632b9653::8279c0652533b0d87ac58e4cbe2e84047ce97e1b::0aca27d407a339683665dcbb2199a1337972bb5e::c9b273627a296aa70245a851a7ccd95df36d3b94::8d6eb9b3fb31ad8dd035dced2e699cb00c3c0ba2::9dd4db4962d3d84e6175798fe4d7d1b7cb7fd4c4::a27e80b1614473a182e345f4d233644acad18bd0::42ed7edc297b77642d8c778ebeddf09ec225fd3d::6fb2913ad468eb007876ba2beae4d1281257c14d::2bf085ff456cf9360c5ebaa05a3aadaedc1e6d97::882d2c87c383a9e22d54b838e800e733dff91ea1::b3b6c71a77c8f1465f76a2b2e503923f8ba24ae0::f9bd6d8e7e0b84f7bd32fc86122e980eb756ac61::161bd5262397263b03f09869f94c5fdb40eec607::217a7de5633d25e7b6edee96b5c0e050c42e3c80::1e37653e388ae6a43abe8e6abec0bfeb790bea73::65b6fb809073ec1b5ed5bd1ee6c97f76c75d7e80::a46b77728a62e143fdeb75d7e8149f068207e871::6eab52d507324378d4608a9b723a1a40bc6463ff::22f8253e58570f2d64b6253b952a88bf99dff3c1::a4aac92bafb81a4dc977fe3941a3ed344c4efcb7::044e23d1bed3e19691c714335d36224677a29c40::fdc591351e5a231c4da47a4b363e961ae89cc864::ab299c54a266a72a27b7b38e9f0896942bbe8a6a::1fd3ac6b5f3736abf2f9f401e4f5b2ccac8d7d2e::6da2a3e13cb280cf52337764d0a7c9fb2e55c164::cdf4055c885a3cbf48b194344381f19125f19660::3c12ab9d78ffe9bf48669f3306a036c44750b3ac::dd3afdd33b4dad56e58a46c8a6660379e3741e85::73680bb94c974cfe508514d8a2b4402d6abf771e::0d055de8b621a3619888471fab96518e2c0c0c95::54828a17034d6ffd3a5b203d1b4233c18e818030::a7d322307d9bc326a56ffa9b953444d0cc3d7efc::6b00e8e0f0f2a0f984817ca277142361b43ffc20::6e1410db89fc83a1603937a18774f728e713debd::55759a66f488872b875a0e6310982a845b5a95dd::eec0a789a20b500bce2169a55c7924d062075356::c0e7b7aec98b00cf6a4b048c27cf7bc3f5ee3892::ff69c801ba23003a874571c328a6d1ff3952b138::a1786cfe6b9368b20733bb8650d815e50d95b59b::be05561507603498c1b14cfe48f1b181f1af5099::ebac0f4f90a2e4136b982305735538794f3908f5::1e1711c914b3bc9928f87f3f5d95be5248b56f8a::255e47d72faef0150b23c181c6c17eaf958322a6::d2f3ef18a67696136b8de87f259d6e4b3109bb26::27f43cc5833de08c28771836794d59cc16232ffe::3565a2a993660b9de8e64230dbb91d7729ad67ff::28a0ee0f0c5c5fd902d71a87794d4a111a160c38::58eaceb2f6c3e45e7e80361cacf970377ae8587c::45aca62ffed9974d9ad70756e2cbd20023dad0f0::539e46d35d71b8486304bec1d75de814b3cf30af::30b3a14c2b24d25b38a259d582346b6402c12931::9332d2ee218a881e2c801c0857f6a0c4e0a28641::25467be1d326dcac534c3869d12fb4823501e6b8::55b13c532f8c1dbbe34695f356c62fe395274d59::1e2981fa6bd67089e4cae35d40fd1044f29cb6a6::4e2a981bdd162dfd52b15f34b4e45ba87726ff53::08e9d0d65b95835a9fa5c477f0c852801a224eff::7e903a3d3a661c6ed4164d6a563bcf54e4497db3::6e66d6100b1d1628fd602a77406401a90e661ea7::b7b28d522420c9679a1942fea7d736e459bf8357::9f795e1123ceea9d590df13beff802feee9a7905::0f63a8ad4231c9a57e04009b2afdb129b4d679b0::2b13f845a0f9abebaeb174ab6caaff2c5cee29b5::38246b3a1a18a62c9ede81cf9641081e4c189489::0fcd39acd41325ca67ab2ca0472fac133ca8ab00::86dba29562c8ff38b930bddbe593739ad12922a6::d16067db2fcdcf19596c3ecd8ca63307d022467d::bc3d77b7d5e7d67f8f84466fdcc09682a7a95747::592c7aed12694df3b4a5eea046043f4c6972c04f::b1f35774c221590e0c1c0ddbca2fa284c0e29509::6ee6bad630605b25bbda9e74d2aa0c334b89dc12::98156908c9946f677045c1bf775497426dcd19ae::555b184bfd201ce012e4968ed96f26f2d6f91553::f74d7e81003911d137b38a9c81b3a8126880b7de::d626e136a5eaa85608246454e997a5d2c9034a6e::f0cc3a1cf637d2edcb15a8cec23517733f7dd34f::c6eae7ab59572b6f5147136c5938b7ad9462a155::caca1a5a5a9611db20a67ffd3018b1cab52562ce::c657649fd4edbfd27830cb4e0f342a01bf413447::a6a50c204e82e3ea19f32085c1ae875538212597::723d3e22d5f318a62fd6cbcb9075a1835d09754f::1b80352f84422dd1c4853cf0207a356fcd58ce7a::536bbf9c4eed4f8ffc91c0a497c91f33b27abf3c::5483b35a84083d3385a4b54079010d99f1fd1750::de34a4df2135e522d9808bff5b7ea5ccd12ff38a::29a2e6149818c7facc8f59c0f215f3c64f85df18::7a334b303258ad8e942a4e480f79eee9e4da10f7::5b5d3e5266f610f4c8defb43ee095a033fed677a::78d782fa519f43c7de33aab2a496f4d5ab1fe702::fb661f3ea79955f1e1170a5d907b75f5e1acb3da::a571d4bcf364ac32ff1623b1747ba9d1def5e100::550ac573754e7d38474c8b44c0c4d57aa4810b10::abe28bf426ba1b22558f6778a828a6074b48185f::ab425296b8d8ede556db335e4fe62ca6c3f2d5e9::a82c27253d4a473e01b3115350e08096dcc1f1c9::9c6afa70dfb1fb7c2bdd7a908fad2fcc4badc3e8::2c4bab6e7b7c65f808908f057f3adcd6c2f6c8c8::62164e01196d95561e362dc1051737fd96d4e523::2d8c1046773166040b90cb3e7fdec99618a712a1::eb27d80383e58d2429e0e0f8a245e211af73345b::2f09a5a0d143404a45277edd154d40be663980cd::5c21c1ca62216cfeff43b04a0639a1fe72863f87::75015d1b5cae80826ef41add3c84d1dd51fee259::52e854e90025edfcf2c4665b81b17d3cd840f9d9::d321e78646e1ba0ad012900008421e0b05541b9d::a5e7d9f1e00ca6a0af6931f6a064e77004b4e3ff::9381eb3dc36c0a1b2a7917f40c7bc302f987095f::c42a7c65c0fb0a891626d673d6c65801e5dff224::873616c8e79d432d009a7c72a0276d86a40c2327::4808875bb79b33d97e8b40e9e4cb1206a295d8e8::6f6a24eaa821d02bb377b809ef58b17730193846::6f328094ef16f56025ca9a89341c6371510a9fd2::1c6effc8b16d777e202cbe9b6d0b3d7cc3e6c095::b05b8d9aa4bce5a7749b835cf79761b85feaa7d4::c793baaf0182efa6cca6d7ff0b35c7116feaf873::7da5f7587581e910ead9ab91724fbe062046053b::97e8bf6599827666025e42c06207539fba9ba276::8ff7cd91bf5985e334e0ebee6b15eacf37ef38ee::27ce3e26ffd705de6cdb599a6dc08229db41be4f::cbe64d01f559b4c2c0ffc463bb4da993550507dc::a99dc086fc7e3ccdb6fc1b6444dc3ab63e214382::08f6b4e94142912b6474998ee5a98dc258c0c208::cbea902c2f81dad1902320a6c5d6adbe5f244656::5969a847ed4b1a4fea7c81a8aa36277335a424d3::9dc463b178ad0d7314954a75be0f0e22b3e3bb5d::95ac8b08a068352ac28c0b51921c370701eb304f::ebc52a8fd40989d6e75ae87a6a6b0c50a92d04af::195d0b7744c968ec728487c1566da2d8423d60b5::78b480c2bd40dfc7a90166be5b86d9978d605abc::730480abf02ba06e5d60b73b3f766d5a0fbf0b6f::b6bcfcb826522771ecb085740c1c24896d0b9d91::a416766f58d595ace7314154bdd05a582997bf8d::04507acdb73e1cca49eb6857ad06c0ebbb7cf041::00fb5dc59d919a0060e9e77c1d482f1d1c7dc116::abc7e38651adbdc19ee87cb67aa0a4c48aadf447::7d334c492f2ace5cba5d480da8a51a5eed2af74e::36fd1a9d4017df21f72ac744949098187951fbf9::554e89f2cfee4879025257846b113e8934f7f48b::e6f2ef3a155edf15cf52b9e548160ca6881b2012::30d7a71bf0700c3a53ba59fa23893d0b843954e5::2b26ba64a58f3d27bb7b303bc954c64a26569170::198c126d738b68f2c82f245e028cfeb3154edac9::40f7246cdc6116f83248ee9a1bcbe65923f2f887::feab0b8ad5d52f8d79f79a05f5590ee5081bfdb6::4548c84e15393e3dd16601e95227961a59c39ead::9177e930fd1c9c0a8cc9eee5fcce63db2f7a6ec6::a86be8cb35deb99d9e6ae94ad82ba1f5e638efe8::741f7b500f0bd815f24ebb6e26aac138ec92c9ac::350818f2819fcbbd33192ed1a480d4776f1cbe45::ceb650a4a250ed39d80e1318db17ca94b6ece6a1::f7c85da521a9c37c3bf63c99eb8c1ee31c4fac9c::b181968aa74c35bf2ad28d840514561f307eaa21::e523adbdf54c5f42906d54bae23d1616f3b8501d::4e2f94732e199d551b45a5d2cb4b42ee010b16e9::f02c89f6c1733fa19c1e5974eae4253a1a5389fd::c3e8bf0b41d2d4ede37a3b41e5a329bc404dc56a::7174f147ecca6d1aef40df1659e884b0ac69e32c::202159680a1be654f785b97765ee109a4a35286d::488992fb6d89bf3ac5a0d77634cc3f40039803e9::1a7958d955e73002d711a955ce94c2a2b4a69922::f0d893d5181474e81c5a1c6068d7d29fa8acf649::85ced0fc1f15fe6153eefc43f75115ac9cc53837::2484b7e92b519306c72e0c538ead607f4e15a6e6::13a73026938df2006dfde5f4212de2fcb0dfa7b6::ee6b45acb3d0d9d87d1cfd07c9daf54675ef9be6::75faf54449a4dcbf3fc099648536dad95aa27ef6::97e9d8860b277e5ca9f4187c213ddd35d7f76e9b::6dcde27f3aeb499b0776b447cde82c5e50fc8ede::890d005d50ddca652ccb2239a1e1860a4c76517d::d67464a160bf2a5ef899a14cff93756aad374a6a::60744d22cbda1c90bae9d237dadb404e84d5d1d3::61f2d52d8a95ca89ebcb107848890c07b014750c::f33968ab7ad436af3100e82ad6fefb0836d4a521::d2003a20712691cd13a8ffc0fe82a9c13e775072::b4b6ffe1149a86794219fe9a978714d0cd67b953::ab880742deb1bb433be0ec2b45b606bfa32b7ea5::6103f8ff4bd586b6d512a5aa52e54e1b15c367d7::3a625262949635705087cb7f344896377745eb4f::9d933581ecb4cd8ef6acecae776629f040707bae::92668f68a7092acd31854252478cf859868e8601::f0029d0c05d0b92148803ab5dddad16c9f20c500::85a940f1a6ced6071ab7b95c7c4dabe5ad617295::72476b6c8e555eddecf04f96728bd9a4ffeaa29d::8aec8b88d480038b8190a18d0bf8902f8308ade2::44f33805f820b4abca0c4127d699e5db83bd2a64::eb683d795a2228354845b8b09688801c526fce9c::d3d23e25391e27b8b5c6c9e0a5a0b12743063f00::d575229ea43aac896d0e5ba11e1e3ac5ed1a2191::55a232a164d01ba9515d457b570d34849a17dd72::6276334da97fc992fa33283461aa4d26ba02eda6::51202a1aea80cbe12313bb925b204d54f01fb502::01c76d59e81df8cb6dd70d8d4d49610c7aab1537::37b9d02616368cc3eba99e9ab0b8ce4b259edec9::9254750223f1ff65a3dd70f3e0eefbf0f40f02c6::f5c15a481bb49b2408004470788167fafeaa472e::ee9fea67dd1d5ff18f506b61cb4cf1bc687ddc5e::8000719923d0f8f27a7ba8cb0318345bd2f0f432::f840d5c24b969a79fa7063e298b78ab4d0a7373d::7e0cc4344d503b4aec74f7740c87f1fc0c7d5dc5::6bf482ec59f529c1aa06ecb60f87f5f57dd3cc9f::8fdf5315abca6f020b8c705f6f5fc7a5b2259279::becb0082233e1e1a689b725af0c8db1635b9fe1f::463522afc5d2732388317265dd17258b76dea750::3392b56de75c63c46e9094fdcb8dbbfcf4ee0b4f::dfecb3f6f308c257d71f1f0db3875d5f17889e32::34ed401063c016acab7c64bf1b7d21c0cfa128c7::0a4296189944f890553d6f0a986fa675f0287bd7::acd716b06e4297b6604ef3f700d7b2a582a82225::d1b4f3ba9f099707aded7578a2af1d088694a680::0646c706e69eddc7e1ee213c65952967128aa545::177749b8bfdbdca7bd996d2370c306b23a88f338::f2fc81fe90f745bf063bde590076c1249e97f373::c09c8be3566f16a9c85f051c52952b71a75cb97e::d4cf6362072ad6d2fe6975db8e617d9f71e6f243::cad4f0030969476941ec62096b9c84070355b823::725817e53acbfea64d6133dfaefe1fc68bbaeb6b::053031b3cc2a788fd50be2db91dd35514c215d86::70dba7414b60a21797b7862b0edf89d2630e1897::bbb2252235e8f56777eb238a83d981876560357e::ce503498e8fc43cbc13a9bb5c92ff3d1b35f445c::
https://api.github.com/repos/rails/rails,116,mutex::master,0,closed,,"RubyGems < 1.4 loaded the thread library that provides mutex. RubyGems 1.4 will not do this, and this will cause even rake tasks to explode with: ``` uninitialized constant ActiveSupport::Dependencies::Mutex ``` This needs backporting to other releases, and i'd strongly recommend getting some point release fixes out soon so that when RubyGems 1.4 is released, all our users don't suffer for updating. Thanks.",ff049a78d6d79d854d17b669a8992c9a8dbd82c3::
