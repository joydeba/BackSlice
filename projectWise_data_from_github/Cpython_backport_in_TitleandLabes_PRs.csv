https://api.github.com/repos/python/cpython,25822,backport-c96cc08-3.9::3.9,0,merged,CLA signed::needs backport to 3.8::,"(cherry picked from commit c96cc089f60d2bf7e003c27413c3239ee9de2990) Co-authored-by: Erlend Egeberg Aasland <erlend.aasland@innova.no> <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-43434](https://bugs.python.org/issue43434) --> https://bugs.python.org/issue43434 <!-- /issue-number --> ::",31959fb7c59123148f55df621e5252633b5dfa6c::1cb36784b7d6557d5d059622f5bf5a04c3af8b1b::0b4e52a462d257f55c61c2eb366799a782d482d0::
https://api.github.com/repos/python/cpython,25787,patch-3::main,0,merged,CLA signed::needs backport to 3.10::skip issue::skip news::type-documentation::,"::```suggestion (Contributed by Dong-hee Na and Jeroen Demeyer in :issue:`43575`, :issue:`43287`, :issue:`41922`, :issue:`41873` and :issue:`41870`) ```::Thanks!::",e782a28ee40ab8f84b979668db74acc6de622c44::7c09a8dc80fe19f3abaed610794b58ef7c882076::
https://api.github.com/repos/python/cpython,25737,bpo-42800-3.9::3.9,0,merged,CLA signed::needs backport to 3.8::,"Accessing the following attributes will now fire PEP 578 style audit hooks as (object.__getattr__, obj, name): * PyTracebackObject: tb_frame * PyFrameObject: f_code * PyGenObject: gi_code, gi_frame * PyCoroObject: cr_code, cr_frame * PyAsyncGenObject: ag_code, ag_frame <!-- issue-number: [bpo-42800](https://bugs.python.org/issue42800) --> https://bugs.python.org/issue42800 <!-- /issue-number --> ::",d2a5d19dc2b2bec3ff743c6775bc89a697882766::17bcb948f5dd5c2d5a841d9df76114f7e848a299::88f60f29a728ba673731fcbfa19f233d83cfe4e8::
https://api.github.com/repos/python/cpython,25576,pip_21_1::master,0,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::,<!-- issue-number: [bpo-43930](https://bugs.python.org/issue43930) --> https://bugs.python.org/issue43930 <!-- /issue-number --> ::,78272a8a8b8fb8d0b67bdd545a4ae173d377118c::b2ea639d67ca312b7df22b7c7f842ac0e7642df8::
https://api.github.com/repos/python/cpython,25541,fix-issue-43917::master,0,closed,CLA not signed::awaiting review::needs backport to 3.9::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-43917](https://bugs.python.org/issue43917) --> https://bugs.python.org/issue43917 <!-- /issue-number --> ::",2964a3839d1b063087338a78937344241c1c3869::
https://api.github.com/repos/python/cpython,25448,bpo-43856/importlib-metadata-new::master,1,closed,:robot: automerge::CLA signed::awaiting core review::needs backport to 3.8::needs backport to 3.9::skip news::type-documentation::,<!-- issue-number: [bpo-43856](https://bugs.python.org/issue43856) --> https://bugs.python.org/issue43856 <!-- /issue-number --> Automerge-Triggered-By: GH:jaraco::,77a6cd6f7053d5ca96b14e3f6c55413290b29da7::
https://api.github.com/repos/python/cpython,25415,bpo-37741-importlib-metadata-docs-visible::master,1,merged,:robot: automerge::CLA signed::needs backport to 3.9::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-37741](https://bugs.python.org/issue37741) --> https://bugs.python.org/issue37741 <!-- /issue-number --> Automerge-Triggered-By: GH:jaraco::",aa67ee53322de02e81ca83f28d9ab99917a975f2::
https://api.github.com/repos/python/cpython,25350,enum-issue42248::master,0,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::,<!-- issue-number: [bpo-42248](https://bugs.python.org/issue42248) --> https://bugs.python.org/issue42248 <!-- /issue-number --> ::,4c26f4b2af7ea40ad84d4d4fe1fc055fe821e41c::
https://api.github.com/repos/python/cpython,25338,fix-popen-repr::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.9::type-bugfix::,"Removes the `list` call in the Popen `repr`. Current implementation: For cmd = `python --version`,  with `shell=True`. ```bash <Popen: returncode: None args: ['p', 'y', 't', 'h', 'o', 'n', ' ', '-', '-',...> ``` For `shell=False` and args=`['python', '--version']`, the output is correct: ```bash <Popen: returncode: None args: ['python', '--version']> ``` With the new changes the `repr`  yields: For cmd = `python --version`,  with `shell=True`: ```bash <Popen: returncode: None args: 'python --version'> ``` For `shell=False` and args=`['python', '--version']`, the output: ```bash <Popen: returncode: None args: ['python', '--version']> ``` <!-- issue-number: [bpo-43776](https://bugs.python.org/issue43776) --> https://bugs.python.org/issue43776 <!-- /issue-number --> Automerge-Triggered-By: GH:gpshead::sys.executable is unbounded length.  rather than rely on actually executing a child process for this test, a heavyweight behavior that this test doesn't actually care about, use a mock such as: ``` with unittest.mock.patch.object(subprocess.Popen, '_execute_child') as mock_exec_child: ``` to prevent actual execution from occurring and remove the complexity of orchestrating the child process via communicate and wait. do all testing with that mock setup.  no need for communicate() and no need for wait().  Just set self.returncode ourselves to see that the change shows up in the repr.  To include a test of the ... truncation code path, supply a long enough command in Popen args. Do self.assertEqual on actual static expected string values instead of constructing things via a clone of the code here called to_result. ::""Fix issue"" isn't specific.  Describe the behavior change so people can understand what is really new without going and opening the bug.  Wording more like this is nicer for the reader: ""When :class:`subprocess.Popen` args are provided as a string for ``shell=True`` use, the Popen instance repr now shows the right thing.""::",98e573a768aaccb9532a1849b9267ea86a7a8adf::9075d67f1c96704408863d23dc6ba6c1c52e2e66::3a97627828b8cb716593c5291584137bdfcab583::e0867c070ef95e768c5906232f275a70a64c8ef0::10401baa7a1b802548f84422673222069fbd2f22::793ab392c9a384bdfbad2721cb154e8b3b2f48c8::
https://api.github.com/repos/python/cpython,25326,break-autospec-of-mock::master,0,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::type-bugfix::,<!-- issue-number: [bpo-43478](https://bugs.python.org/issue43478) --> https://bugs.python.org/issue43478 <!-- /issue-number --> ::,d9a5bb7e6acc9a824c5f679fcb3b1c9128acb876::f07c578abe2d733cd66be326a371b377a3715162::6ac2d4db82871f51f350efc931d0f4cf53af5c39::aaaeb41292b71d64f63ffe6b08e143befe8d7a22::3b2dcdfc2dddc19cbb214e8362c7232a05962a57::
https://api.github.com/repos/python/cpython,25257,bpo-42999-3.9::3.9,0,merged,CLA signed::needs backport to 3.8::skip news::,<!-- issue-number: [bpo-42999](https://bugs.python.org/issue42999) --> https://bugs.python.org/issue42999 <!-- /issue-number --> ::,fee60e72394c6de8b5bdad42b24a1d9d2bbbe1f6::4a56776a6a643acdaf2548425cfea6aafa2f07b7::
https://api.github.com/repos/python/cpython,25251,cdnpurge::master,0,merged,CLA signed::OS-windows::needs backport to 3.8::skip issue::skip news::,::,95a4203b094bcaa488b639c30f73e662e86cb78d::
https://api.github.com/repos/python/cpython,25214,bpo-43745-3.9::3.9,0,merged,CLA signed::needs backport to 3.8::type-security::,"Earlier releases were mislabelled and included 1.1.1i again. The tag/directory name is updated to ensure that builds get the fresh bits. However, the openssl-bin-1.1.1k tag in the repository has been forcibly updated, so fresh builds will be fine even without this change. <!-- issue-number: [bpo-43745](https://bugs.python.org/issue43745) --> https://bugs.python.org/issue43745 <!-- /issue-number --> ::",24870c23069f8dbcad2f0e18b778637a11b6447b::
https://api.github.com/repos/python/cpython,25207,fix-extending-docs::master,0,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::type-documentation::,In the example code of the Extending Python with C/C++ documentation the pmodule variable (that stores the return value of PyImport_ImportModule) was never declared. This PR fixes the problem by declaring and initializing the pmodule variable. (This PR is for documentation version 3.10.) Issue URL:  https://bugs.python.org/issue43739 <!-- issue-number: [bpo-43739](https://bugs.python.org/issue43739) --> https://bugs.python.org/issue43739 <!-- /issue-number --> ::,d6d78a283c1c21946b917923437d136e4dd296ff::8deccfc0b72936d6c55ae1e38caf777d02b9a5c9::ce7daa36485f1afe3c56ff41df4287cb39f2c460::8b6ab5ee5d56633b194ad9656dd66433354eebd0::
https://api.github.com/repos/python/cpython,25187,tkinter-dialog-type::master,0,merged,CLA signed::needs backport to 3.8::type-enhancement::,"<!-- issue-number: [bpo-43655](https://bugs.python.org/issue43655) --> https://bugs.python.org/issue43655 <!-- /issue-number --> ::As explained on the issue, I don't want this dialog changed on mac.  I don't know what happens on Linux.::This needs to be imported::Good catch!::Done.::",545a3fdbf98b8c45f382e0324b01da1f67d92a6a::2d73fec750b88dd068635a7332d12e89394e96a0::be3e5c9a79c29d7f0f45a892f84964b3933a0d16::
https://api.github.com/repos/python/cpython,25173,json_decode_error::master,0,closed,CLA signed::awaiting core review::needs backport to 3.9::skip news::type-documentation::,"<!-- issue-number: [bpo-43340](https://bugs.python.org/issue43340) --> https://bugs.python.org/issue43340 <!-- /issue-number --> ::It should also be added for `loads()`. `UnicodeDecodeError` can only be raised for binary files. `loads()` for text never raise `UnicodeDecodeError`, and in case of `load()` for text file, `UnicodeDecodeError` and `OSError` can only be raised by the `read()` of the text file. There are many details, and without explaining them we will always get complqains about incomplete documentation, but adding all details will make the documentation too overloaded. We usually do not specify all exceptions which can be raised. Is there a good comromize?::Something like this? ```suggestion If the binary file does not contain UTF-8, UTF-16 or UTF-32 encoded data, a :exc:`UnicodeDecodeError` will be raised, and if the data is not a valid JSON document, a :exc:`JSONDecodeError` will be raised. ```::",5a6de0e4c7ba5ff9e4c73d2c939a1a76f01aa0cf::
https://api.github.com/repos/python/cpython,25045,xmlrpc-regression::master,0,closed,CLA signed::awaiting changes::needs backport to 3.9::,"Reinstate pre-3.9 behaviour where query parameters would be carried through in the path component. <!-- issue-number: [bpo-43433](https://bugs.python.org/issue43433) --> https://bugs.python.org/issue43433 <!-- /issue-number --> ::```suggestion self.__handler = p.path ```::```suggestion if not self.__handler: self.__handler = ""/RPC2"" ```::",f99ae03eb4aa2c6c036e65652616b13e37484d5e::
https://api.github.com/repos/python/cpython,25024,bpo-43631-openssl-1.1.1k::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.6::needs backport to 3.7::,- [x] Build OpenSSL 1.1.1k for macOS - [x] Build OpenSSL 1.1.1k for Windows I have also updated multissl tester and various CI configurations to use latest OpenSSL. The versions were all over the place. Signed-off-by: Christian Heimes <christian@python.org> <!-- issue-number: [bpo-43631](https://bugs.python.org/issue43631) --> https://bugs.python.org/issue43631 <!-- /issue-number --> Automerge-Triggered-By: GH:tiran::,041cd4ece66b5ba83244e3357420399d897a2b06::c14f4599d693cb8c2944c029fae8ab9ca1943542::
https://api.github.com/repos/python/cpython,24861,patch-2::master,0,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::skip news::type-documentation::,This cleanup makes no substantive changes. <!-- issue-number: [bpo-43494](https://bugs.python.org/issue43494) --> https://bugs.python.org/issue43494 <!-- /issue-number --> ::,be4066d598edbc4cd692e12d3cb314da25c0ee39::
https://api.github.com/repos/python/cpython,24838,ftplib_issue43285::master,0,merged,CLA signed::needs backport to 3.6::needs backport to 3.7::type-bugfix::type-security::,"The IPv4 address value returned from the server in response to the PASV command should not be trusted.  This prevents a malicious FTP server from using the response to probe IPv4 address and port combinations on the client network. Instead of using the returned address, we use the IP address we're already connected to.  This is the strategy other ftp clients adopted, and matches the only strategy available for the modern IPv6 EPSV command where the server response must return a port number and nothing else. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-43285](https://bugs.python.org/issue43285) --> https://bugs.python.org/issue43285 <!-- /issue-number --> ::I suggest the name ""trust_server_pasv_ipv4_addr"".::Done.  and I mention it in the NEWS entry.::",4b397c1b90df633187c6161615531437fe564f8c::6003e2f6672696e415bc5023ce7a47a4b03488bd::
https://api.github.com/repos/python/cpython,24703,patch-4::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.8::needs backport to 3.9::skip issue::skip news::stale::,"Missing multiply symbol added <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> Automerge-Triggered-By: GH:merwok::",694fa10f85962bad769092c3b83c451ee04a0678::
https://api.github.com/repos/python/cpython,24650,unicode_normalize_network::master,0,merged,CLA signed::needs backport to 3.8::skip news::type-tests::,This test is missing a requires network despite the fact that it uses `open_urlresource` which can cause failures on systems that aren't actually connected to the network. Converted from a bpo patch to a github pull request on behalf of Arkadiusz. <!-- issue-number: [bpo-43144](https://bugs.python.org/issue43144) --> https://bugs.python.org/issue43144 <!-- /issue-number --> ::,1a2becfa3e9d41227c07fa6c73e1008969df2921::
https://api.github.com/repos/python/cpython,24614,fix_importlib_test::master,0,merged,CLA signed::needs backport to 3.9::skip issue::skip news::type-tests::,Github rebase put the skip() method in the wrong place.  Fix it. <!-- issue-number: [bpo-43288](https://bugs.python.org/issue43288) --> https://bugs.python.org/issue43288 <!-- /issue-number --> ::,737c80776010eee740c8a2e3fe8f75b3bfc07154::
https://api.github.com/repos/python/cpython,24591,oldparser::3.9,0,merged,CLA signed::skip news::type-tests::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-43272](https://bugs.python.org/issue43272) --> https://bugs.python.org/issue43272 <!-- /issue-number --> ::",f6b70d8b4a91cb4aeb742b9851b5d1a67ab84cbd::
https://api.github.com/repos/python/cpython,24469,nonlocal::master,0,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::skip news::type-documentation::,"These 3 statements cannot be used at module scope -- nor in exec with one namespace. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-16781](https://bugs.python.org/issue16781) --> https://bugs.python.org/issue16781 <!-- /issue-number --> ::",6ac24323cb3c01496b9e9d29965bab5c7f792e6b::
https://api.github.com/repos/python/cpython,24462,subcontrary::master,0,merged,CLA signed::needs backport to 3.9::skip news::type-documentation::,<!-- issue-number: [bpo-43147](https://bugs.python.org/issue43147) --> https://bugs.python.org/issue43147 <!-- /issue-number --> ::,dbc89f8a3f4f9f35e128c9ee578999ce42285e83::9256c190adc2db4bb0a8a52fea95f164e3082679::
https://api.github.com/repos/python/cpython,24443,Mariatta-patch-1::master,1,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::skip issue::skip news::,"The `target-branch` field doesn't seem to support array. Since it defaults to the default branch anyway, we should just remove the `target-branch` field from the config. ::",a53821118bf4785ca8a49c328ad573099ac7c586::
https://api.github.com/repos/python/cpython,24420,bpo-43108::master,0,merged,CLA signed::needs backport to 3.7::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-43108](https://bugs.python.org/issue43108) --> https://bugs.python.org/issue43108 <!-- /issue-number --> ::",bad482df8772905544664b371267e0dcadab907a::
https://api.github.com/repos/python/cpython,24384,warnings::master,0,merged,CLA signed::needs backport to 3.9::skip news::,"This silences this warnings: Objects/codeobject.c:414:15: warning: writing 1 byte into a region of size 0 [-Wstringop-overflow=] 414 |     *lnotab++ = b; <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-40455](https://bugs.python.org/issue40455) --> https://bugs.python.org/issue40455 <!-- /issue-number --> ::",6f04e4b389c55dfedd2c00dbf8153f9759afdf71::
https://api.github.com/repos/python/cpython,24337,pydoc-getfile-validate::master,0,closed,CLA signed::awaiting core review::needs backport to 3.6::needs backport to 3.7::needs backport to 3.8::needs backport to 3.9::type-security::,"Route `/getfile?key=` no longer allows to get content of arbitrary file. It serves now only source files of Python modules available to pydoc. <!-- issue-number: [bpo-42988](https://bugs.python.org/issue42988) --> https://bugs.python.org/issue42988 <!-- /issue-number --> ::Maybe this code can be factorized with ModuleScanner.run()?::``pkgutil.walk_packages()`` can seemingly fail if a module has no ``__version__``. Eg. on my computer I get ``AttributeError`` for some weird packages: ```python Traceback (most recent call last): File ""<stdin>"", line 1, in <module> File ""......\lib\pkgutil.py"", line 92, in walk_packages __import__(info.name) File ""......\lib\site-packages\brotli_asgi\__init__.py"", line 12, in <module> brotli = import_brotli() File ""......\lib\site-packages\brotli_asgi\_import_resolver.py"", line 22, in import_brotli spec.loader.exec_module(brotli) File ""......\lib\site-packages\brotli.py"", line 12, in <module> __version__ = _brotli.__version__ AttributeError: module 'brotli._brotli' has no attribute '__version__' ``` Because: ```python >>> import brotli >>> brotli._brotli <module 'brotli._brotli' from '......\\lib\\site-packages\\brotli\\_brotli.cp38-win_amd64.pyd'> >>> brotli._brotli.__version__ Traceback (most recent call last): File ""<stdin>"", line 1, in <module> AttributeError: module 'brotli._brotli' has no attribute '__version__' ```::Thank you. Fixed.::Unfortunately it cannot. ModuleScanner.run() contains too much specific to its primary function: it only calls callback if key is not None and is found in module name or description. But it is a temporary solution. For 3.10 we can change API (pass not path, but a module name, so the loop will be unnecessary).::Hi, I've randomly opened this PR. I'd like to ask you to check this error message, it looks like unfinished.::",8afb67e672ee11f2736154870aa51971a20bfc02::e1c135376796a3143411789c5bdc69112dedf77c::54210669174e8bb017e0a465fb2ac10a4df8c5ff::cbc2b02344dcf038c0b925a5e898dae30137c14c::
https://api.github.com/repos/python/cpython,24312,test-curses::master,0,merged,CLA signed::needs backport to 3.8::skip news::type-tests::,<!-- issue-number: [bpo-43016](https://bugs.python.org/issue43016) --> https://bugs.python.org/issue43016 <!-- /issue-number --> ::,c3ed08f7ebad1050161c5fd784d0cf15b364b3a3::40655783312617c39533519e8da8f84d87875233::3de9f59cff09a78239e0a8ff109eee6cbb5baf37::1fe820c484f3e0ac781cc983a4806d54b6da12cd::
https://api.github.com/repos/python/cpython,24308,bacopy::master,0,closed,CLA signed::awaiting core review::needs backport to 3.8::needs backport to 3.9::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-42948](https://bugs.python.org/issue42948) --> https://bugs.python.org/issue42948 <!-- /issue-number --> ::```suggestion Document ``bytearray.copy()`` ```::Sorry if I'm being a pedant here. On first read I didn't immediately understand what the parenthesized sentence meant. After more thought, I'm guessing you were referring to the bytes object? ```suggestion Return a copy of the bytearray.  (Bytes objects are immutable and never need to be copied.) ```::I am trusting that you are correct and that linking from blurbs works.  This also need a period.::Thank you.  The doc should be clear to people who are not 20+ year veterans of Python ;-).  I left this open after CI passed to allow for random review.  I wish more newer contributors should do them.::",5925750a8f8972272780355a3bdc9fa369796137::afaf44bb3542b179dcb9d0c75689ba2dd7ec397f::ef556ddca50ef5cd8f6b1e08a426bde3077835c3::c02fb05716b8c4d4a82e0c393a9a19acb34bfb7e::
https://api.github.com/repos/python/cpython,24239,buffer::master,0,merged,CLA signed::needs backport to 3.6::needs backport to 3.7::needs backport to 3.8::needs backport to 3.9::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-42938](https://bugs.python.org/issue42938) --> https://bugs.python.org/issue42938 <!-- /issue-number --> ::",298cc0231a271b5d5c6d55273297b9541353ecc3::
https://api.github.com/repos/python/cpython,24237,bpo-42952-_ssl-new-key::master,0,closed,CLA signed::awaiting changes::needs backport to 3.8::needs backport to 3.9::stale::type-bugfix::,<!-- issue-number: [bpo-42952](https://bugs.python.org/issue42952) --> https://bugs.python.org/issue42952 <!-- /issue-number --> ::,cafbc60c181b9f634073d8b2cbbca5f64cc34e17::
https://api.github.com/repos/python/cpython,24236,patch-2::master,0,merged,:robot: automerge::needs backport to 3.8::needs backport to 3.9::skip issue::skip news::stale::,"fixed a minor glitch in the order of two words. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> Automerge-Triggered-By: GH:Mariatta::",148a4f59e000e878e28356e7d8a093ccf965581a::
https://api.github.com/repos/python/cpython,24160,consider_pow::master,0,closed,CLA signed::awaiting review::needs backport to 3.8::needs backport to 3.9::skip issue::skip news::stale::type-documentation::,The pow built-in is the only case where an operator is immediately available without having to import from operator. Mention it as it's probably what the user needs.::,edfea04a5568758d0c10b6b374f910096542147a::
https://api.github.com/repos/python/cpython,24127,bpo-41837-3.9::3.9,0,merged,CLA signed::needs backport to 3.8::type-security::,<!-- issue-number: [bpo-41837](https://bugs.python.org/issue41837) --> https://bugs.python.org/issue41837 <!-- /issue-number --> ::,3041c4531636c500e847a90444f181038f90d684::
https://api.github.com/repos/python/cpython,24015,bpo-40631-2::master,0,closed,CLA signed::awaiting core review::needs backport to 3.9::skip news::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-40631](https://bugs.python.org/issue40631) --> https://bugs.python.org/issue40631 <!-- /issue-number --> ::",6035080b3feda1dfe2ea999ad880b4b80f337d0c::
https://api.github.com/repos/python/cpython,24014,bpo-40631::master,0,closed,CLA signed::needs backport to 3.9::,"… <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-40631](https://bugs.python.org/issue40631) --> https://bugs.python.org/issue40631 <!-- /issue-number --> ::@lysnikolaou Do you remember why this was `expressions` and not `star_expressions`? I cannot see any edge case that makes this change incorrect but now I am curious.::I think that this was for consistency with 3.8. While 3.8 and 3.9 currently fail at parser level for `eval('*a')`, this patch fails at bytecode compiler level.::We could make that fail at the parser level if you want but not sure if is worth it because we would need to factor that into some rule and I don't know if we can reuse the rest. What's your opinion?::This patch makes `(*x), y` valid, but with multiple layers of parentheses `(((*x))), y` is still considered invalid.::Wouldn't leaving it as is work? The reason I'm pushing for the error to be in parser level is due to the quality of the error message. Here's an example: Without this patch: ``` ➜  cpython git:(bpo-40631) ✗ cat a.py a = [1, 2, 3] eval(''' *a''') ➜  cpython git:(bpo-40631) ✗ python a.py Traceback (most recent call last): File ""/home/lysnikolaou/repos/cpython/a.py"", line 2, in <module> eval(''' File ""<string>"", line 4 *a ^ SyntaxError: invalid syntax ``` With this patch: ``` ➜  cpython git:(bpo-40631) ✗ cat a.py a = [1, 2, 3] eval(''' *a''') ➜  cpython git:(bpo-40631) ✗ ./python a.py Traceback (most recent call last): File ""/home/lysnikolaou/repos/cpython/a.py"", line 2, in <module> eval(''' File ""<string>"", line 4 SyntaxError: can't use starred expression here ``` The first one makes a much better job of making clear what the error is I feel. But if it's too much effort and leaving it as is doesn't work, I'm okay with it.::I very much agree. I have closed the PR based on this discussion and Guido's request. Thanks for the examples and the comment.::",394c1328bef0dbc454c311be930f66230812ccab::
https://api.github.com/repos/python/cpython,24009,test-curses::master,0,merged,CLA signed::needs backport to 3.8::skip news::type-tests::,"If `__stdout__` is not attached to terminal, try to use `__stderr__` if it is attached to terminal, or open the terminal device, or use regular file as terminal, but some functions will be untested in the latter case. <!-- issue-number: [bpo-42789](https://bugs.python.org/issue42789) --> https://bugs.python.org/issue42789 <!-- /issue-number --> ::",f8bb38b589d4bfddbe8edff04fd75ed106ca1fc7::016d284061143cb20affd79e9438c7892507451e::
https://api.github.com/repos/python/cpython,24001,fix-shutil-move::master,0,merged,CLA signed::needs backport to 3.9::,"# [bpo-42782](https://bugs.python.org/issue42782): Fail fast for permission errors in shutil.move() <!-- issue-number: [bpo-42782](https://bugs.python.org/issue42782) --> https://bugs.python.org/issue42782 <!-- /issue-number --> `shutil.move` calls `shutil.copytree()`, then `shutil.rmtree()` (in that order). If the user does not have permission to delete the source directory, `copytree` succeeds but `rmtree` fails. The user sees an error (Permission Denied), but the destination directory is still created. The expected behavior should be a Permission Denied without the creation of the destination directory. To reproduce: ``` $ mkdir foo $ sudo chown root foo $ sudo touch foo/child $ python3 >>> import shutil >>> shutil.move('foo', 'bar') PermissionError $ ls foo child $ ls bar child ``` If `shutil.move()` encountered a permission error and failed, `bar/` should not have been created. This PR changes the `shutil.move` behavior to return an error before `shutil.copytree()` is called, preventing the creation of the destination directory on failure.::I'm not sure that this is the right list of permissions to check for and could potentially raise errors for move() operations that would have otherwise succeeded. I might be wrong, but I believe it's the parent directory's write permissions that matter. Perhaps another approach would be to put copytree() and rmtree() in try except blocks, then cleaning up and raising an error accordingly on catching a permission error.::f-strings are preferred in new code.::```suggestion Fail fast in :func:`shutil.move()` to avoid creating destination directories on ```::Thanks for the review - sorry, I should have clarified what this line does. Background: This check only runs when attempting to move directories, and OS move permissions are tied to the source directory, not its parent directory. The `elif os.path.isdir(src):` confirms that `src` is the directory being moved. * `not os.access(src, os.W_OK)` checks if `src` is write-enabled. We need this check not because we're writing to `src`, but because we need to delete it. Previously, if `src` was not write-enabled, `rmtree` would fail with a permission error. * `os.listdir(src)` checks if `src` is empty: this is important because if a user doesn't have write access to a directory, *but the directory is empty*, the directory can be removed by the user. Weird OS quirk, I know. So this check makes sure we *don't* raise an exception if the directory is empty (`os.listdir(src)  == []`), because `src` can still be removed with `rmtree` despite the lack of write permissions. I'm going to disagree with the try/except suggestion, since permission errors are easier to prevent than catch.::Ack, thanks for the flag. But the rest of this file still uses %-formatting for stderr, so I think it's better to maintain consistency. Can we leave f-string conversion for a separate PR?::Ah I see that this check happens when handling an `OSError` after first trying to rename the directory, which was the scenario I thought it might block. However, in that case, that's probably because the user does not have write access to the parent directory, so `copytree()` would throw a `PermissionError` before `rmtree()` is even run which means that the destination directory isn't created. I'm not able to reproduce the error with the commands you provided, perhaps you could provide additional context for the permissions on the parent directory?::yeah, this situation only occurs if the user has permission to the parent directory, but not the src directory - this means the user can mkdir and cp within parent (with copytree succeeding), but can't rm src. if the user doesn't have permission to the parent directory, you're correct that the operation would fail at copytree. here's the example where copy succeeds, but rm fails ``` [01/12/21 12:38:47] $ ls -haltR total 0 drwxr-xr-x@  3 wluk  staff    96B Jan 12 12:37 parent drwxr-xr-x@  3 wluk  staff    96B Jan 12 12:35 . drwxr-xr-x@ 39 wluk  staff   1.2K Jan 12 12:34 .. ./parent: total 0 drwxr-xr-x@ 3 root  staff    96B Jan 12 12:38 src drwxr-xr-x@ 3 wluk  staff    96B Jan 12 12:37 . drwxr-xr-x@ 3 wluk  staff    96B Jan 12 12:35 .. ./parent/src: total 0 drwxr-xr-x@ 3 root  staff    96B Jan 12 12:38 . -rw-r--r--  1 root  staff     0B Jan 12 12:38 child drwxr-xr-x@ 3 wluk  staff    96B Jan 12 12:37 .. ``` Running move(): ``` >>> shutil.move('src', 'dst') Traceback (most recent call last): File ""/usr/local/Cellar/python@3.9/3.9.1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/shutil.py"", line 806, in move os.rename(src, real_dst) PermissionError: [Errno 13] Permission denied: 'src' -> 'dst' During handling of the above exception, another exception occurred: Traceback (most recent call last): File ""<stdin>"", line 1, in <module> File ""/usr/local/Cellar/python@3.9/3.9.1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/shutil.py"", line 818, in move rmtree(src) File ""/usr/local/Cellar/python@3.9/3.9.1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/shutil.py"", line 718, in rmtree _rmtree_safe_fd(fd, path, onerror) File ""/usr/local/Cellar/python@3.9/3.9.1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/shutil.py"", line 675, in _rmtree_safe_fd onerror(os.unlink, fullname, sys.exc_info()) File ""/usr/local/Cellar/python@3.9/3.9.1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/shutil.py"", line 673, in _rmtree_safe_fd os.unlink(entry.name, dir_fd=topfd) PermissionError: [Errno 13] Permission denied: 'child' ``` End state: ``` [01/12/21 12:44:03] ~/.../2020/test $ ls -haltR total 0 drwxr-xr-x@  3 wluk  staff    96B Jan 12 12:43 . drwxr-xr-x@ 39 wluk  staff   1.2K Jan 12 12:43 .. drwxr-xr-x@  4 wluk  staff   128B Jan 12 12:43 parent ./parent: total 0 drwxr-xr-x@ 4 wluk  staff   128B Jan 12 12:43 . drwxr-xr-x@ 3 wluk  staff    96B Jan 12 12:43 .. drwxr-xr-x@ 3 wluk  staff    96B Jan 12 12:43 dst drwxr-xr-x@ 3 root  staff    96B Jan 12 12:38 src ./parent/dst: total 0 drwxr-xr-x@ 3 wluk  staff    96B Jan 12 12:43 . drwxr-xr-x@ 4 wluk  staff   128B Jan 12 12:43 .. -rw-r--r--  1 wluk  staff     0B Jan 12 12:38 child ./parent/src: total 0 drwxr-xr-x@ 4 wluk  staff   128B Jan 12 12:43 .. drwxr-xr-x@ 3 root  staff    96B Jan 12 12:38 . -rw-r--r--  1 root  staff     0B Jan 12 12:38 child ``` ::There are conflicting guidelines! Internal consistency in a module is preferred Don’t do unrelated changes in a PR Don’t do cosmetic changes only in a PR::Yes, I think I'll prefer internal consistency in this case, and stick with %-formatting.::Renaming a file in POSIX requires write access to the file's current parent directory and to the destination directory. When *renaming a directory*, the operation additionally requires write access to the renamed directory if, and only if, the current parent directory and the destination directory are different. This is because the "".."" entry in the renamed directory has to be modified to reference the new parent directory. Write access to the renamed directory is not required if the current parent directory and the destination directory are the same, because the "".."" entry does not have to be modified in this case. But just unlinking an empty directory, as opposed to renaming it, only requires write access to the parent directory. An exception is that a directory with the [i]mmutable attribute cannot be renamed or unlinked. There is no specific test for this in POSIX, except that the error code will probably be `EPERM` instead of `EACCES`. Linux has a `statx()` system call to check for the `STATX_ATTR_IMMUTABLE` attribute. Testing for write access on the renamed directory itself works indirectly because of course write access is also denied for an immutable directory. --- In Windows, renaming is implemented via `MoveFileExW()`, which requires synchronize, read-attributes, and delete access to the renamed file or directory. The last two can be provided directly by the security of the renamed file, or indirectly if its parent directory grants list-directory (i.e. read-data) and delete-child access. Synchronize access has to be granted directly by the renamed file. For the destination directory, a rename requires synchronize access plus either add-file (i.e. write-data) or add-subdirectory (i.e. append-data) access, respectively if a file or directory is being renamed into the destination. The analog to the Unix immutable attribute is the readonly attribute, except readonly only prevents modifying *data* streams in a file or directory (a directory can have named data streams) and deleting a file or empty directory. It doesn't prevent modifying metadata. It doesn't prevent getting delete access itself, so renaming is still possible. Also, it doesn't pertain to the *index* stream in a directory, i.e. it does not prevent obtaining add-file or add-subdirectory access to the destination directory. ::Thanks for the insight. However, this function (`shutil::move`) doesn't rename on the file system level; it leverages shutil's `copytree` and `rmtree` functions instead. This PR simply addresses the inability for `shutil::rmtree` to remove the source directory during the renaming process. This is a concern for both POSIX and Windows: `rmtree` cannot remove the source directory if the user lacks access to the source directory.::Yes, it's clear that checking for write access on `src` is about unlinking the *immediate* contents of `src`, but I wanted to clarify the permission-based reasons that can make the `os.rename()` call fail in `shutil.move()`. What troubled me was your claim that being able to unlink an empty directory without write access to it is a ""weird OS quirk"". That seems like a misunderstanding of POSIX filesystem permissions, for which the right to unlink a file or directory is controlled by the parent directory, unless the file is flagged [i]mmutable (e.g. via `chattr` in Linux). IMO, the quirk, which possibly leads to misunderstanding, is that write access to a directory is required in order to rename it to a new parent directory, which is explained by the need to modify its "".."" entry. Note that if `src` is a directory, write access to it doesn't imply `rmtree(src)` will succeed, since subdirectories in the tree may lack write access. It also has nothing to do with the success of `os.rmdir(src)` when it's empty, as the last operation of `rmtree(src)`. The latter depends on write access to the parent of `src`. Personally, I'd prefer for the fallback copy/delete behavior to be restricted to just `EXDEV` failures due to a cross-filesystem rename. If `os.rename()` (or rather, `os.replace()`) fails for another reason, I'd prefer to just let `move()` fail. Hopefully that catches most of the permission errors, such as the quirk in POSIX with needing write access to a directory in order to rename it to a new parent directory. Of course, for the `EXDEV` case, it depends on the order in which the system checks permissions compared to the cross-filesystem status. If the latter is checked first, then permissions may still be a problem. But what are we going to do for LBYL in the `EXDEV` case, recursively check all subdirectories in the entire `src` tree for write access? That's pushing TOCTOU to an extreme. --- For Windows, checking `os.access()` is currently pointless for a directory. This function does not actually implement an access check. It just checks the readonly file attribute of a non-directory file. Directories are excluded because the readonly attribute only prevents writing to a data stream, not an index stream, so it has nothing to do with adding and removing files and subdirectories. Also, the filesystem security model is very different in Windows. A directory can grant delete-child access to allow delete/rename access to its immediately contained files. But a file can also be individually granted delete/rename access. If we implemented `os.access()` for real, we could combine generic-write and delete-child access as POSIX-like `W_OK` access. But there would still be a fundamental difference that a file can be granted delete/rename access individually. Also, write access to a directory index is split into separate add-file and add-subdirectory rights. A directory might allow one and not the other, but we'd have to test for both with POSIX `W_OK` access. Thus lack of POSIX-like write access to a directory would not imply anything about whether deleting its files or subdirectories will fail, or whether adding files or subdirectories will be disallowed. ::Please add a test at https://github.com/python/cpython/blob/master/Lib/test/test_shutil.py to cover this scenario.::To repeat more succinctly, checking for write access on `src` is inadequate in POSIX because the caller may lack write access to subdirectories and the parent directory, and it's completely meaningless in Windows.::Appreciate the clarification. To address your concerns: 1. Thanks for clarifying the empty directory ""quirk"" with regards to parent permissions, and it's great that you brought up immutability as an exception. I've added an additional check for immutability in this PR, since it doesn't seem like `shutil` had previously acknowledged this possibility. 2. Going back, when I used the word ""quirk"", I meant it more as a shutil edge case than an actual OS concern. We need the `os.listdir(src)==False` check just because it's the only situation where a non-writable child directory can be deleted...which, you're right, of course is related to the parent's file data. Again, this is only a quirk because `rmtree` is being used as a renaming crutch. 3. `os.access(src, os.W_OK)==False` means that rmtree *will* fail (with the exception of (2)), and you're correct that that rmtree could also fail when subdirectories lack write access. However, the latter isn't a concern in this part of the code. The converse situation (`os.access(src, os.W_OK)==True` but with unknown `src` subdirectories) is already avoided since `os.rename()` would succeed above. The same logic applies for Windows. Even though the access check is different, the inability to remove *any* file implies an `rmtree` failure. Overall, I think we both agree that the fallback copy/delete behavior can be improved. The fact that all this cross-system file logic is being handled within an `except OSError` is concerning to me too. But 2-line PR is meant more as a bugfix :) I'd be happy to discuss some refactoring with you, but that's probably best left for another PR.::Ack, see my comment below.::Hi @winsonluk I looked a bit deeper, and I understand the theory in your PR, but I am unable to come out with a scenario that will reproduce the error in your original scenario. The parent permissions seem to satisfy the requirements. Here I tried creating the dir permissions as above. ``` $ ls -haltR .: total 12K drwxr-xr-x 3 senthil senthil 4.0K Jan 31 06:32 parent drwxr-xr-x 3 senthil senthil 4.0K Jan 31 06:29 . drwxr-xr-x 3 senthil senthil 4.0K Jan 31 06:28 .. ./parent: total 12K drwxr-xr-x 3 senthil senthil 4.0K Jan 31 06:32 . drwxr-xr-x 2 root    senthil 4.0K Jan 31 06:31 src drwxr-xr-x 3 senthil senthil 4.0K Jan 31 06:29 .. ./parent/src: total 8.0K drwxr-xr-x 3 senthil senthil 4.0K Jan 31 06:32 .. drwxr-xr-x 2 root    senthil 4.0K Jan 31 06:31 . -rw-r--r-- 1 root    root       0 Jan 31 06:31 child ``` And ``` $ cd parent/ $ ~/3.9/cpython/bin/python3 Python 3.9.0+ (heads/3.9:f22f874a66, Oct 22 2020, 10:26:55) [GCC 9.2.1 20191008] on linux Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import shutil >>> shutil.move('src', 'dst') 'dst' ``` Is it possible for you to share set of instructions (including chmod/chown instruction) that can help reproduce this issue to verify? FWIW, I used https://bugs.python.org/msg384023 and didn't see this scenario that you encountered.::@orsenthil Huh, good catch. I've been testing this on MacOS `darwin` machines (python3 installed with Homebrew). I just retried this on some spare `linux`, `freebsd`, and `win32` servers, and the file was moved successfully in all cases. This is probably a darwin-only bug, so it's only reproducible on MacOS.::> This is probably a darwin-only bug, so it's only reproducible on MacOS. I wonder if this is a MacOS bug. It's strange not to see this behavior in FreeBSD, Linux and Win32 and only in MacOS. And we are not even talking about Python implementation. The problem should be observable with Darwin's mv utility too.::I'm not sure if it's a bug or intentional, but I can confirm that Darwin's `mv` fails when other OS's succeed (e.g., `mv src dst`). So while this PR is necessary to mitigate Darwin's irregular behavior, it doesn't impact other operating systems.::Hello eryksun. https://stackoverflow.com/questions/4495767/create-a-directory-and-get-the-handle-by-issuing-one-irp A question about this. Can you show me an example of how to do so? I tried this myself with win32 APIs are it fails.::1. Is this `src` to `src` ? Shouldn't the  verification in line 816 be on `dst`? 2. A general question - if this applicable only to macos, should we need OS platform check? - I am not certain on this. ::1. `src` can't be moved to `dst` if: (`src` is not empty) && (user lacks write permission to `src`). So we're only checking the status of `src` here. 2. Good catch, the immutability check is applicable to all platforms, but the empty/permissions check is only applicable to darwin. I've added a `sys.platform == 'darwin'`.::",fe8f24ac0d1d2e103ded8dec21ab9ed06d0e4856::8826d00d05157cbb84975940bac55238a2184fd3::a231ca6428611f667911c2d31a4d6371a50b230c::ee8073d353b5b383458ecca1735ed9aa717fbe89::7c11a09a4b15a32d1c33e7f7d014eab32d8a65b2::1082d79c6955ec69ebfc5e17acdf4f8b1a60cf93::6326e7c6059bdd5abc55787f0143ab75f8ccd4ea::79d68017d22a8fd9fbd7b8ca227f176449f0cbfa::2567fb24054c11b3c94039617362e4c99d29c7d5::
https://api.github.com/repos/python/cpython,23874,curses-colors-pairs::master,0,merged,CLA signed::needs backport to 3.8::type-bugfix::,<!-- issue-number: [bpo-42681](https://bugs.python.org/issue42681) --> https://bugs.python.org/issue42681 <!-- /issue-number --> ::,ee82545234e20f91768d784bbfb154fc863c3300::7168d86fcce31066c4c8d1b2bb04ff7edafa95bf::d8e6a21b33a68b7161fb4fff7f5b14e35b41b85a::3ec8133b613ba08747e42830351e6089dfe9caa5::8d66cd2698a2538a1fde25f0d4f034aca90e3663::466533a6b4318b7c1051b69490b8b4ff2b3f7ace::a66ddfdb5711e24a24bb4a8114b48dae37c1922e::4a3329b4ac608af6e97089c393ecb4f9ba693883::2e8fba1a99aeb8182e6015dcc9714fe622a7afd4::b587d3150282c0a31e6205d81aa671877ad6cb1f::
https://api.github.com/repos/python/cpython,23842,statistics_mean_note::master,0,closed,CLA signed::awaiting core review::needs backport to 3.9::skip news::type-documentation::,<!-- issue-number: [bpo-23522](https://bugs.python.org/issue23522) --> https://bugs.python.org/issue23522 <!-- /issue-number --> ::,09ae3aa5b02cd1140f03a7707b017201376e72fa::
https://api.github.com/repos/python/cpython,23823,bpo-42670::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.8::skip news::type-documentation::,<!-- issue-number: [bpo-42670](https://bugs.python.org/issue42670) --> https://bugs.python.org/issue42670 <!-- /issue-number --> Automerge-Triggered-By: GH:Mariatta::,3211edbefe01a3d659cc3bbc91d7834d7042e337::
https://api.github.com/repos/python/cpython,23792,freeze_config_dir::master,0,merged,CLA signed::needs backport to 3.9::,"Fix freeze.py tool to use the prope config and library directories. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-42613](https://bugs.python.org/issue42613) --> https://bugs.python.org/issue42613 <!-- /issue-number --> ::",0c23039b10b1cfc807a1c737d56a44531e234443::
https://api.github.com/repos/python/cpython,23744,ast-validator-optimizer-recursion-error::master,0,merged,CLA signed::needs backport to 3.8::stale::type-bugfix::,"<!-- issue-number: [bpo-42609](https://bugs.python.org/issue42609) --> https://bugs.python.org/issue42609 <!-- /issue-number --> ::You probably want to pass this state to the `validate_constant`, since it is also recursive.::Do we really need to check this for every run? I feel like, it is more appropriate when activated only on debug builds. ::Added. Although in normal case, when compile from source, it is not needed, because constant tuples and frozen sets are created later, in `ast_opt.c`. It can play role only when we compile an AST tree, but in that case there may still be stack overflow in Python-to-C AST converter and in `_PyCode_ConstantKey()`.::Every run? No. But it costs nothing and helped to catch bugs. Symtable checks balance even in case of failure (res == 0). But supporting it have larger cost, larger chance of making error and is more difficult to test, so I omitted it.::I am not proposing to remove the check altogether, but I couldn't see the reasoning to keep it on the release builds. We have similar checks all over the code (such as `asserts()` or blocks guarded with `#if PY_DEBUG`) which helps us to catch bugs on the debug builds, and doesn't change anything on the end user's side. Ofc most of them have a certain cost, so I was just asking whether it would be suitable to guard this with `PY_DEBUG` or not, but since you said the cost is nothing, guess we can just leave it as is.::Could you not use Py_EnterRecursiveCall here instead?::I don't think this commented-out code should be added.::compile -> compiling::The PEP 7 style guide states that lines should be limited to 79 characters.::An f-string could be used.::C99 `//` comments can be used.::```suggestion ```::These declarations can be moved down (C99).::Empty line separates groups of fields.::The code is copied from `symtable.c`. It uses different recursion limit than in `Py_EnterRecursiveCall`. If we decide to use `Py_EnterRecursiveCall`, it can be done consistency in `symtable.c`, `ast.c` and `ast_opt.c`. But this is a different issue, for now it is simpler to just duplicate some code three times.::Yes, but it was just copied from `symtable.c`.::Yes, but this code already was here.::It is still a bug not fixed by this PR.::Thanks.::It is copied from `symtable.c` and `ast.c`. It is better to keep code the same in three places.::",8c5cb1eb933d495d8a3b925df6017aa65aea3160::8d3a7a24222d42b4d47e463afa48f2c9a27d0e0f::364d0d20f924071b749e5a889eca22628f4892a3::e0e64e2390b91fe8175fd0473b2a8e9ce19beb8e::8c53a01aca17c60acbe38197a4ef830c049a78f9::
https://api.github.com/repos/python/cpython,23605,fix_mangle_from_::master,0,closed,CLA signed::awaiting review::needs backport to 3.8::needs backport to 3.9::skip issue::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::",649b504acf1e2e8ac2453185eb7c84fdb45f5c43::
https://api.github.com/repos/python/cpython,23602,antocuni/improve-docs::master,0,merged,CLA signed::needs backport to 3.8::skip news::type-documentation::,"I think that none of these API calls can fail, but only few of them are documented as such. Add the sentence ""This function always succeeds"" (which is the same already used e.g. by PyNumber_Check) to all of them. <!-- issue-number: [bpo-42528](https://bugs.python.org/issue42528) --> https://bugs.python.org/issue42528 <!-- /issue-number --> ::",41c67d7c44436a7a646dc3691f468a1f52b7f137::
https://api.github.com/repos/python/cpython,23583,dependabot/github_actions/actions/upload-artifact-v2.2.1::master,1,merged,CLA signed::needs backport to 3.7::needs backport to 3.9::skip issue::skip news::,"Bumps [actions/upload-artifact](https://github.com/actions/upload-artifact) from v2.2.0 to v2.2.1. <details> <summary>Release notes</summary> <p><em>Sourced from <a href=""https://github.com/actions/upload-artifact/releases"">actions/upload-artifact's releases</a>.</em></p> <blockquote> <h2>v2.2.1</h2> <ul> <li>Update used actions/core package to the latest version</li> </ul> </blockquote> </details> <details> <summary>Commits</summary> <ul> <li><a href=""https://github.com/actions/upload-artifact/commit/726a6dcd0199f578459862705eed35cda05af50b""><code>726a6dc</code></a> Adding example of retention-days option. (<a href=""https://github-redirect.dependabot.com/actions/upload-artifact/issues/131"">#131</a>)</li> <li><a href=""https://github.com/actions/upload-artifact/commit/3db166e2eae9e41d58153ed148d7d8faddefdd0d""><code>3db166e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/actions/upload-artifact/issues/145"">#145</a> from actions/joshmgross/update-actions-core</li> <li><a href=""https://github.com/actions/upload-artifact/commit/d86048c66c5b62e8b57f1e5a40f086121540a8da""><code>d86048c</code></a> Update @actions/core license</li> <li><a href=""https://github.com/actions/upload-artifact/commit/328d69042a10e4f541f4c92ef686815bf78c8c12""><code>328d690</code></a> Update @actions/core to 1.2.6</li> <li>See full diff in <a href=""https://github.com/actions/upload-artifact/compare/v2.2.0...726a6dcd0199f578459862705eed35cda05af50b"">compare view</a></li> </ul> </details> <br /> Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end) --- <details> <summary>Dependabot commands and options</summary> <br /> You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) </details>::",c7c7954723f34a572b96ab61f134bf748c87791c::
https://api.github.com/repos/python/cpython,23582,dependabot/github_actions/actions/cache-v2.1.3::master,1,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::skip issue::skip news::,"Bumps [actions/cache](https://github.com/actions/cache) from v2.1.2 to v2.1.3. <details> <summary>Release notes</summary> <p><em>Sourced from <a href=""https://github.com/actions/cache/releases"">actions/cache's releases</a>.</em></p> <blockquote> <h2>v2.1.3</h2> <ul> <li>Upgrades <code>@actions/core</code> to v1.2.6 for <a href=""https://github.com/advisories/GHSA-mfwh-5m23-j46w"">CVE-2020-15228</a>. This action was not using the affected methods.</li> <li>Fix error handling in <code>uploadChunk</code> where 400-level errors were not being detected and handled correctly</li> </ul> </blockquote> </details> <details> <summary>Commits</summary> <ul> <li><a href=""https://github.com/actions/cache/commit/0781355a23dac32fd3bac414512f4b903437991a""><code>0781355</code></a> Upgrade @actions/cache to 1.0.4 (<a href=""https://github-redirect.dependabot.com/actions/cache/issues/451"">#451</a>)</li> <li><a href=""https://github.com/actions/cache/commit/22c64ac7729165b59327d9275351548a32cbd312""><code>22c64ac</code></a> Update @actions/core to 1.2.6 (<a href=""https://github-redirect.dependabot.com/actions/cache/issues/449"">#449</a>)</li> <li><a href=""https://github.com/actions/cache/commit/8819edf4767ca1eef30abb52c04026c00c4988f5""><code>8819edf</code></a> Update to @actions/cache 1.0.3 (<a href=""https://github-redirect.dependabot.com/actions/cache/issues/438"">#438</a>)</li> <li>See full diff in <a href=""https://github.com/actions/cache/compare/v2.1.2...0781355a23dac32fd3bac414512f4b903437991a"">compare view</a></li> </ul> </details> <br /> Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end) --- <details> <summary>Dependabot commands and options</summary> <br /> You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) </details>::",fa5fa133381ba98fe592493322f75838d84f0f0f::
https://api.github.com/repos/python/cpython,23427,bpo-34463::master,0,merged,CLA signed::needs backport to 3.8::type-bugfix::,"…taxError without lineno. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-34463](https://bugs.python.org/issue34463) --> https://bugs.python.org/issue34463 <!-- /issue-number --> ::Since `filename` is only used in the first ""if"" block, but `self.filename` is used later, I'd move its definition into the block, or just remove it and use `self.filename or ""<string>""` inline.::",e6e3958aae33b7022fdd6e0ff856eb5d747d81fa::738926e384770ec0ae77cc569e1f6b7e5de7ff07::6b4f10f4184abf9945935051522ed3e157ab2e1f::9e9c4cd258f7439572d859424aa9010304cfb375::
https://api.github.com/repos/python/cpython,23415,bpo-42415::master,0,closed,CLA signed::awaiting merge::needs backport to 3.9::type-bugfix::,<!-- issue-number: [bpo-42415](https://bugs.python.org/issue42415) --> https://bugs.python.org/issue42415 <!-- /issue-number --> ::,c4d6c8fc3c6e3b0e67de5e72194e49f7ff5b7618::
https://api.github.com/repos/python/cpython,23327,ifdefs::master,0,merged,CLA signed::needs backport to 3.8::skip issue::skip news::,"This silences this warning also for GCC and clang on Linux: ``` ~/github/python/master master* 1m 20s ❯ make -j -s CC='gcc -pthread' LDSHARED='gcc -pthread -shared    ' OPT='-g -Og -Wall'       _TCLTK_INCLUDES='' _TCLTK_LIBS=''       ./python -E ./setup.py -q build /home/pablogsal/github/python/master/Modules/_ctypes/callbacks.c: In function ‘_ctypes_alloc_callback’: /home/pablogsal/github/python/master/Modules/_ctypes/callbacks.c:437:9: warning: ‘ffi_prep_closure’ is deprecated: use ffi_prep_closure_loc instead [-Wdeprecated-declarations] 437 |         result = ffi_prep_closure(p->pcl_write, &p->cif, closure_fcn, p); |         ^~~~~~ In file included from /home/pablogsal/github/python/master/Modules/_ctypes/callbacks.c:6: /usr/include/ffi.h:334:1: note: declared here 334 | ffi_prep_closure (ffi_closure*, | ^~~~~~~~~~~~~~~~ The following modules found by detect_modules() in setup.py, have been built by the Makefile instead, as configured by the Setup files: _abc                  atexit                pwd time ```::",fe19af978c042098b6134a9dfa3a80eaf74bbb61::
https://api.github.com/repos/python/cpython,23301,bpo-41116::master,0,merged,:robot: automerge::CLA signed::OS-mac::needs backport to 3.8::,"On macOS system provided libraries are in a shared library cache and not at their usual location. This PR teaches distutils to search in the SDK, even if there was no ""-sysroot"" argument in the compiler flags. The logic is ported from setup.py. <!-- issue-number: [bpo-41116](https://bugs.python.org/issue41116) --> https://bugs.python.org/issue41116 <!-- /issue-number --> Automerge-Triggered-By: GH:ned-deily::",5a695bd4872e1a87d77455aac5b9171d0a1b7723::d4ec6bcf38781579f755457f6fe615b59cabe107::5a093fe3498ee8773c7cfe7992311559075de4b5::f48cf67f486b0b515d26fc939f575a5caadfd95e::
https://api.github.com/repos/python/cpython,23185,limited-doc-updates::master,0,closed,DO-NOT-MERGE::awaiting merge::needs backport to 3.8::needs backport to 3.9::skip news::type-documentation::,"Starting as a draft for now, as there are quite a few ways to go about this. I figured this first approach, while verbose, has the upside of leveraging functionality that has already been built into the documentation. Happy to expand to other functions if we think this is in the right direction <!-- issue-number: [bpo-29086](https://bugs.python.org/issue29086) --> https://bugs.python.org/issue29086 <!-- /issue-number -->::",a3b9c173ab9ba5f82e4ae3b41eb553c27468dcb6::1b7d971f3f36beeac622ab3fb1c65df6b7287155::
https://api.github.com/repos/python/cpython,22938,improve-asyncio-wait::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.8::,"# Improve asyncio.wait function The original code creates the futures set two times. We can create this set before, avoiding the second creation. This new behaviour [breaks the aiokafka library](https://github.com/aio-libs/aiokafka/pull/672), because it gives an iterator to that function, so the second iteration become empty. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> Automerge-Triggered-By: GH:1st1 <!-- issue-number: [bpo-42140](https://bugs.python.org/issue42140) --> https://bugs.python.org/issue42140 <!-- /issue-number --> ::@dutradda Sure, everything looks good to me except for this, which I don't understand (and I'm sure it's on me) – what different path is being taken here? Shouldn't one `run_until_complete(self.new_task(loop, foo()))` be enough to verify this patch works?::@jstasiak I was copied the first test and change it to use an iterator. But you are right and just one run is enough. I have removed the second run.::Oh, ok, LGTM now then!::",5decbf681615e44c4178d8db64852eb600637fea::d6b5564570c50f0406a80184490228596df65443::5155602ca45ea8567d3123c4870d1e221137aa2f::
https://api.github.com/repos/python/cpython,22760,bpo-42051::master,0,merged,CLA signed::needs backport to 3.6::type-security::,"plistlib uses ElementTree to parse XML files, and therefore is subject to a number of XML vulnerabilities.  Those can be avoided by rejecting entity declarations in XML plist files. Doing this is safe because Apple tools like plutil(1) also reject XML files with entity declarations. <!-- issue-number: [bpo-42051](https://bugs.python.org/issue42051) --> https://bugs.python.org/issue42051 <!-- /issue-number --> ::",300f0073f1d253502c02fd47793b4ae19c533058::
https://api.github.com/repos/python/cpython,22706,patch-1::master,0,merged,CLA signed::needs backport to 3.8::skip issue::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::",ea44d90474e7cacfd4e24541d40916751b358d01::
https://api.github.com/repos/python/cpython,22632,import-refcounts::master,0,merged,CLA signed::needs backport to 3.9::type-bugfix::,"<!-- issue-number: [bpo-41994](https://bugs.python.org/issue41994) --> https://bugs.python.org/issue41994 <!-- /issue-number --> ::```suggestion /* This check does not prevent an undefined behavior in the * following code, because the module can have references * to itself. */ ```::```suggestion /* Strictly speaking, this is undefined behafior, and * the above check can crash. */ ```::Maybe is overkill, but we could get a weakreference and check if is alive, but checking if the refcount is 0 can be actually misleading: if the deallocator does some arbitrary stuff, the memory can actually be used by pymalloc (or malloc for what is worth) and then it may anything (even another object with refcnt>0).::Good idea about weak ref. And I agree with your concern.::",25ba81950aad7b41b29ae07c0a19dc77b2f75cab::197b72067fec02357a7d59e3fecc998e9a18e06e::7734fd99397995b723608279562ac6f23761b13a::8f74153cd9c8fbfadfd759b1db4cb00a0c19ada6::c4868c5cebb47f5d5961cd312b52641b66676a86::3e8912402997ee1faf92073ac4d14d37ed119a84::03e405f5d6329ca87712ae95d15ff6d31a192467::c31124f0d884d60f88ed6649f2d218afd50fc187::c8daad64262148290d9960c2891f7a7aaef554b8::bc4ba0c07eb737026b6c04b42ef24ff031ee638f::
https://api.github.com/repos/python/cpython,22582,patch-1::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.8::skip issue::skip news::type-documentation::,"/af/of/s <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> Automerge-Triggered-By: @Mariatta::",6b27823c25259a7daaf2af8f7360a3760e35b8d8::
https://api.github.com/repos/python/cpython,22546,bpo41892_et_example::master,0,closed,CLA signed::awaiting core review::needs backport to 3.8::needs backport to 3.9::skip news::type-documentation::,Clarify that an example in the ElementTree docs explicitly avoids modifying an XML tree while iterating over it. <!-- issue-number: [bpo-41892](https://bugs.python.org/issue41892) --> https://bugs.python.org/issue41892 <!-- /issue-number --> ::,e99ada5df91385113c56a069c3fa4e1cce2451de::
https://api.github.com/repos/python/cpython,22503,backport-d4b9edd-3.9::3.9,0,merged,CLA signed::needs backport to 3.8::skip issue::skip news::type-documentation::,Automerge-Triggered-By: @gvanrossum (cherry picked from commit d4b9edd5052a2d9ae3d2be69975cc933afb37737) Co-authored-by: Andre Delfino <adelfino@gmail.com>::,96905ed51c478c36ebe441a3258bbab0199a96a9::
https://api.github.com/repos/python/cpython,22496,typo-fix::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.8::skip issue::skip news::,"Multiple typo fixes in code comments <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> Automerge-Triggered-By: @Mariatta::",5ae7a22e0099b18e54ecce87f88062d3ffb1b7bc::5d0838cba5f349bb20d5bbfe45257349708075f0::
https://api.github.com/repos/python/cpython,22495,Fix-typo::master,0,closed,:robot: automerge::CLA not signed::awaiting merge::needs backport to 3.8::needs backport to 3.9::skip issue::skip news::,"Correcting ""suppied"" to ""supplied"" <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> Automerge-Triggered-By: @Mariatta::",f562ede7488ada51f384e5d62322cb505bb5aa91::
https://api.github.com/repos/python/cpython,22412,bpo-41826::master,0,closed,CLA signed::awaiting review::needs backport to 3.9::skip news::,"Add casts to C code fragments used by test_peg_generator. <!-- issue-number: [bpo-41826](https://bugs.python.org/issue41826) --> https://bugs.python.org/issue41826 <!-- /issue-number --> ::The types in the rules need to be changed accordingly, for instance: ``` statements[asdl_seq]* ``` should become ``` statements[asdl_stmt_seq*] ``` Ideally, it should be no `asdl_seq` left::",
https://api.github.com/repos/python/cpython,22395,two-for-one-on-excepts::master,0,merged,CLA signed::needs backport to 3.8::type-bugfix::,"Pushes an artificial control ""block"" around the `except` part of a try-except. This ensures that the computed depth in the compiler matches the actual depth in the runtime. <!-- issue-number: [bpo-39934](https://bugs.python.org/issue39934) --> https://bugs.python.org/issue39934 <!-- /issue-number --> ::",300314b185e460cd891b6d7b566a38b43584deba::945e68f3d27348c595c15f7c44701e73eb54719a::
https://api.github.com/repos/python/cpython,22391,bpo-41840::master,0,merged,CLA signed::needs backport to 3.8::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-41840](https://bugs.python.org/issue41840) --> https://bugs.python.org/issue41840 <!-- /issue-number --> ::Please follow PEP 8.::Ditto. (It seems that there are other PEP 8 issues in this PR as well.)::Will do a PEP 8 pass before merging. Thanks for the review!::",19c3e737ecf6909c985c242b754f29d39bf059dd::
https://api.github.com/repos/python/cpython,22382,new39::master,0,merged,CLA signed::needs backport to 3.9::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-33822](https://bugs.python.org/issue33822) --> https://bugs.python.org/issue33822 <!-- /issue-number --> ::",f82599437ffd7dbab5495601d9f76b702a3d91a2::f13343251ba9e5d96eb4ad4e5ff5361d3fdb3743::
https://api.github.com/repos/python/cpython,22143,init_dump_ascii_wstr::master,0,closed,CLA signed::awaiting merge::needs backport to 3.8::needs backport to 3.9::skip issue::skip news::,"Fix GCC 9.3 (using -O3) warnings on x86: initconfig.c: In function ‘init_dump_ascii_wstr’: initconfig.c:2679:34: warning: format ‘%lc’ expects argument of type ‘wint_t’, but argument 2 has type ‘wchar_t’ {aka ‘long int’} 2679 |             PySys_WriteStderr(""%lc"", ch); initconfig.c:2682:38: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 2 has type ‘wchar_t’ {aka ‘long int’} 2682 |             PySys_WriteStderr(""\\x%02x"", ch); initconfig.c:2686:38: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 2 has type ‘wchar_t’ {aka ‘long int’} 2686 |             PySys_WriteStderr(""\\U%08x"", ch); initconfig.c:2690:38: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 2 has type ‘wchar_t’ {aka ‘long int’} 2690 |             PySys_WriteStderr(""\\u%04x"", ch); <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::",1a48b495b466616c9bedae6eaa471631f22009db::
https://api.github.com/repos/python/cpython,22124,fix_standalone_binary::master,0,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::skip issue::skip news::type-documentation::,"This fixes the obsolete URL for cx_Freeze, adds a mention to py2app, and shows the applications as a list.::Related to this question/answer, it looks like py2exe now supports Python 3, so this answer can be edited further.::Hmm, it's marked as beta, with no changes since 2014. Does that count as supporting Python 3?::https://pypi.org/project/py2exe/::@akuchling Could you take a look at my comments when you have some spare time? :)::Nevermind, on Oct 24 a new version came out. I'll update the PR as suggested :)::",1164cd9fb4917e1f337769fe36fa0e31c845aa22::
https://api.github.com/repos/python/cpython,22036,fix/error::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.8::,"@ammaraskar Fixed the f-string/str.format error description being wrong by adding a check to see if the previous token is an underscore character: ``` ... if (end-pos && READ_spec(pos) == ',') { if (format->thousands_separators == LT_UNDERSCORE_LOCALE) { invalid_comma_and_underscore(); return 0; } } ... ``` <!-- issue-number: [bpo-41681](https://bugs.python.org/issue41681) --> https://bugs.python.org/issue41681 <!-- /issue-number --> Automerge-Triggered-By: @ericvsmith::Same issue here with a regex.::Technically, because this is a regex, the '.' should be escaped. Although calling re.escape() is probably easiest. It's always bugged me that there's not a version of assertRaisesRegex that doesn't require a regex.::Sure. I will add them, and use `re.escape`::@ericvsmith  For testing the original error message, is it Okay to do something along the lines of ``` @unittest.expectedFailure def test_with_two_commas_in_format_specifier_for_old_error_msg(self): old_error_msg = re.escape(""Cannot specify both ',' and '_'."") with self.assertRaisesRegex(ValueError, old_error_msg): f'{1:,,}' ``` ?::Or ``` ... old_error_msg = ""Cannot specify both ',' and '_'."" with self.assertRaises(ValueError) as cm: f'{1:,,}' self.assertNotEqual(str(cm.exception), old_error_msg) ... ```::I meant testing that something like `f'{1:,_}'` actually raises the exception, and still does so after your change. Just for grins, you might want to test it both ways, so also `f'{1:_,}'`.::Ah, that. Sure. Sorry, i was confused :)::",dd86cd1d9299472f87414b3a627797b078c389ea::99610783d23095a0199f058a1fb74df530ab68b0::f61e641f48f1dbe6a9102e24d15063942c5b7616::9978eabde03c720753fa5fcbfde74d5b1bae6273::7da346e1be2b8ea6e0f1264335f29e8d726db59d::70d0923d6bb33bc00ced76a5fc003f46b05cfd52::504e1e60b0abff6d7b8e09432b62814d150829e6::d1052109986f80107b6d7f397ed5f14cd85f5240::33f1e53d856005b8315246987ef1f94b9e64de6e::
https://api.github.com/repos/python/cpython,22004,fix_casing::master,0,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::skip issue::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::Note: error is an alias for Error although Error is present in `__all__` too https://github.com/python/cpython/blob/2aabc3200bf03d2ec1aa987e1e20db704948111e/Lib/copy.py#L55-L57::@tirkarthi If ""error"" is a backward compatibility wart, we should be documenting Error instead, right?::I was under the impression that with that comment Python 2 only had error and not Error. But the same alias is present in Python 2 too. So I guess it predates something more than 2.7. I agree with the change over documenting Error. I will wait for another core dev opinion. The git blame is as below : ``` 227b1204681 (Fred Drake             2000-08-17 05:06:49 +0000  55) class Error(Exception): 88869f9787c (Tim Peters             2001-01-14 23:36:06 +0000  56)     pass 88869f9787c (Tim Peters             2001-01-14 23:36:06 +0000  57) error = Error   # backward compatibility ```::Documenting `Error` seems alright and seems more modern usage to me.  +1 with this change.::Given `Error` is exposed via  `__all__` interface, it is accurate to update the documentation to reflect that.::",aaf07ba1694424d3f8baac39eba633f4f29089cc::
https://api.github.com/repos/python/cpython,21973,check-ast-module-def_master::master,0,closed,CLA signed::awaiting merge::needs backport to 3.9::,"Hopefully #21961 will be OK, but if not: here is a relatively minimal fix for [bpo-41631](https://bugs.python.org/issue41631), which basically makes compiling to/from AST fail gracefully (with a proper exception rather than a NULL without exception) if the `_ast` module has been tampered with. For example, it looks like Mercurial's lazy-loading scheme replaces `_ast`with a proxy object; this will make AST unusable. The second commit deals with a hack in pegen's tests – please review the commits separately, and see comments. <!-- issue-number: [bpo-41631](https://bugs.python.org/issue41631) --> https://bugs.python.org/issue41631 <!-- /issue-number --> ::```suggestion # testing pegen requires generating C extension modules, which contains # a copy of the symbols defined in Python-ast.c and needs to be treated # as the _ast module. See ast_dump.py. ```::",08486b2423332cc20becde6f24359872685eb64a::2c36b77cd1a4f3908851c40ae8171fc2e65f3ace::be66256655114d353763a7b2ecd1f5e8d5581d5b::a95c6f73fa5daadfe882242261a697cf7f468058::
https://api.github.com/repos/python/cpython,21972,fix-double-slashes::master,0,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::,<!-- issue-number: [bpo-33660](https://bugs.python.org/issue33660) --> https://bugs.python.org/issue33660 <!-- /issue-number --> ::,c8fdff2e4276bebc2b1843a61151fdf16c2021a8::
https://api.github.com/repos/python/cpython,21860,backport-c818b15-3.9::3.9,0,merged,CLA signed::needs backport to 3.8::type-bugfix::,"Fix the repression introduced by the initial regression fix. (cherry picked from commit c818b15) <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-41520](https://bugs.python.org/issue41520) --> https://bugs.python.org/issue41520 <!-- /issue-number --> ::",64ee42c073e10a78ba9cd57095f4ab418bf745a8::9f1a0e7c200ca8c03a9cafa187cec28f5c426add::
https://api.github.com/repos/python/cpython,21648,bpo-41355::master,0,closed,CLA signed::awaiting core review::needs backport to 3.7::needs backport to 3.8::needs backport to 3.9::,<!-- issue-number: [bpo-41355](https://bugs.python.org/issue41355) --> https://bugs.python.org/issue41355 <!-- /issue-number --> ::,916139f92e2770386b1ea835c11bf074d5d27812::
https://api.github.com/repos/python/cpython,21574,master::master,0,merged,CLA signed::needs backport to 3.8::,"Here is how I reorganized the content previously in the ""Classes, functions, and decorators"" section: ``` # Special typing primitives Annotated Any Callable ClassVar Final ForwardRef Generic Literal NewType NoReturn Optional Protocol Type TypedDict TypeVar Union # Generic concrete collections ChainMap Counter DefaultDict Deque Dict FrozenSet List NamedTuple OrderedDict Set Tuple # Generic ABCs AbstractSet AsyncContextManager AsyncGenerator AsyncIterable AsyncIterator Awaitable ByteString Collection Container ContextManager Coroutine Generator Hashable io.IO io.BytesIO io.TextIO ItemsView Iterable Iterator KeysView Mapping MappingView MutableMapping MutableSequence MutableSet re.Pattern re.Match Sequence Sized ValuesView # Protocols Reversible SupportsAbs SupportsBytes SupportsComplex SupportsFloat SupportsIndex SupportsInt SupportsRound # Aliases and constants AnyStr Text TYPE_CHECKING # Functions and decorators cast final get_args get_origin get_type_hints no_type_check no_type_check_decorator overload runtime_checkable type_check_only ``` <!-- issue-number: [bpo-40979](https://bugs.python.org/issue40979) --> https://bugs.python.org/issue40979 <!-- /issue-number --> ::Hm, I really don't like opening with `Annotated`, which is a very specialized thing that few people will use or need to know about. Is there a way we can make the following order? This is roughly how I think of them in terms of importance/usefulness. - Tuple - Callable - Union - Optional - Type - Literal - ClassVar - Final - Annotated ::Could we change ""namespace"" into ""dictionary"" here? A namespace makes me think it is something like `SimpleNamespace`, which this isn't -- it really is a dict whose values have a different type per key value. (Only the definition looks like a namespace, because this is the cleanest syntax we could come up for declaring the value types without inventing new syntax.)::I wonder if this could be banned to a separate section of helpers, or perhaps grouped with `get_type_hints()`, since it is primarily of importance to that function. Unless everything else, this is not something a user would ever use unless they're writing their own version of `get_type_hints()`.::I wonder if TypeVar, Generic and Protocol could be placed together in a separate section titled something like ""Building generic types"". They are much more fundamental than NewType and TypedDict.::""These types are *also* in the ..."" (also below).::I'm not sure about this at all, but this makes me think that `AnyStr` is kind of lonely... Since we have a section on ""Asynchronous programming"" maybe we can also have a section on ""String types"" that combines `AnyStr` and `Text`? What do you think? OTOH maybe it's good they are separate because `AnyStr` is often misunderstood (e.g. in my experience with mypy users at Dropbox).::Unless `from __future__ import annotations` is used (PEP 563). (Also, in 3.10 that will be the default. But we shouldn't change this until that's actually implemented -- that's bpo-38605, GH-20434.)::I like that. Considering importance/usefulness, in my opinion `Union` and `Optional` would go before `Callable`. I agree with the rest of your ordering. Can we go with this ordering? 1. Tuple 1. Union 1. Optional 1. Callable 1. Type 1. Literal 1. ClassVar 1. Final 1. Annotated::Sure. The section could be titled **Introspection helpers** and go near the bottom of the page. Also, `get_args` and `get_origin` should be in the same section.  Do you agree?::I need to sleep over this.::Good point. That reminds me of another matter: most of the generic types in `typing` will be redundant as their pre-existing corresponding types support `[]` in Python 3.9. [PEP 585—Type Hinting Generics In Standard Collections](https://www.python.org/dev/peps/pep-0585/) describes a ""soft"" deprecation process over 5 years after the 3.9 release. I will think about how to add that information to the page.::Do it!::Good idea!::I moved `AnyStr` to section **Building generic types**  right after `TypeVar` in  and it seems the right context for it (previously it was alone in **Predefined type variable**). I agree that `AnyStr` and `Text` should be kept apart and I'm ok with the current placement of `Text` in section **Other concrete types** that includes `TextIO` and `Pattern`.::If you don't mind, I would prefer to land this PR first, then deal with the implications of PEP 585 and PEP 563 in a later PR (or two, since PEP 563 is still waiting for a PR). Especially the latter, since it won't apply to 3.9 (though a fair warning in 3.9 might still be useful).::I added a note about PEP 563 in the entry about `typing.TYPE_CHECKING`. Regarding the mass deprecation of PEP 585 I added a general note explaining the deprecation process to the top of section **Module Contents** and deprecation notes to each of the 37 affected types.::",30570c9832db9c1216aadb78d039a3c460d6a278::1ad12ccf3f73d94771bcbb77d924ed658f8c75de::c06142bc566f1b73c00b17a3a22f0216fa3628cf::7f5d48d803c7b8b37d367f3377116735e0a66a8c::7fb3d72ca53d8dd600f4dbf1f84ef7bc4019cfe8::b548112066c250da39b6316dd252e2102f944cde::d52afa8854982b40dc28e5d228d045614434e365::49d2a314e69b51a0c0c21875c12d23640dac24bb::bb07243dbbba074c549301223559e33a52290cf4::5d7c120c5e3f269adb2f1f92f8e7930b9ca74ce6::c7358d76453ba3a1cf417077d39eda20c015e534::5ab2f2fab4948327bbb08f213828998a614c1fe5::a7528e3015eae0c76ab772409faa3a9fbbc319d2::2e25885d243e660a6b5d398b18235ab6173d3af2::006238b9895270ce306eda05d9fd7f2b53c54df5::9c7b89c3ead73af672b689268154ed801fcfd717::4505bbb67274736c79f4dd087f3dc89162f9a469::cd6e8eab66814f3946c894feffcfbd960a868016::826340a376f0a25ffb6bfc588da342f11697cfcd::7273e95a192d4fb31c4dab03934f6243cb4da82f::
https://api.github.com/repos/python/cpython,21495,bpo-41304::master,0,merged,CLA signed::OS-windows::needs backport to 3.6::type-security::,<!-- issue-number: [bpo-41304](https://bugs.python.org/issue41304) --> https://bugs.python.org/issue41304 <!-- /issue-number --> ::,c92eb8616e86981c50f8fbeafa022b3a6647fdc7::
https://api.github.com/repos/python/cpython,21473,fix-issue-41295::master,0,closed,CLA signed::awaiting changes::needs backport to 3.8::needs backport to 3.9::,"The change introduced in [bpo-39960](https://bugs.python.org/issue39960), broke being able to override the `__setattr__` function unless it's done by the next class in the MRO. For example: ``` class Meta(type): def __setattr__(cls, key, value): type.__setattr__(cls, key, value) class OtherClass: pass class DefaultMeta(OtherClass, Meta): pass obj = DefaultMeta('A', (object,), {}) obj.test = True print(obj.test) ``` Would break as it would first check if `OtherClass` has a custom `__setattr__` and if not would raise error right away. This change goes through the whole MRO to find out if there's any class that overrides it before throwing error. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-41295](https://bugs.python.org/issue41295) --> https://bugs.python.org/issue41295 <!-- /issue-number --> ::This is correct only when `should_break = 1;` would be set before `should_break = 0;`. If you change base classes order, `1` could be set after setting `0`.::yep, my bad, fixing::I think you don't want to left this line::would a `should_break = 0 + should_break` be enough? or there's any better way of doing it? (I'm quite rusty in C)::Actually, just a break after should be enough (if we found at least one class that overrides the `__setattr__` we are good to go no matter what).::Unfortunately, I'm not sure what exactly this code is expected to check (I reported the bug, so I saw your PR). If you do  `should_break = 0 + should_break`, it will be the same as previously - if `should_break` get `1` any time, it will be left here. I think the easiest way to do what you try is to have two variables and check after for (one to mark possible break, second to mark 'we found another class in the MRO that overrides the tp_setattro'), but it doesn't look pretty to me.::Just updated the PR, so instead of iterating over the whole MRO and keeping track if we should break or not, I'm breaking not the first time that we find one class that has a custom `tp_setattro`, as if there's any class in the MRO that overrides it is good enough :)::You don't need to test this. The scenario is already covered by other tests. (And there is a typo, too.)::```suggestion def test_attribute_assignment_bpo41295(self): ```::I would move the test after `test_carloverre` (see line 4296).::""whose""::This is definitely not right. Special-casing types here (any type, really) will not help the general case.::",ecc3b8ad36b679429e5c3cd536b8af728b544e8b::
https://api.github.com/repos/python/cpython,21369,symtable_doc_strings::master,0,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::skip news::type-documentation::,"This PR does the following: + Documents i`s_annotated()` in the `symtable` module. + Adds docstrings to the functions that did not already have them. <!-- issue-number: [bpo-41224](https://bugs.python.org/issue41224) --> https://bugs.python.org/issue41224 <!-- /issue-number --> ::```suggestion """"""Return a name of a symbol. """""" ```::",b7f569b7a023331aac65be21365f512511ff96fd::d6acfc274ec38f6d253910dca55ff7e6c0975628::
https://api.github.com/repos/python/cpython,21302,bpo-41162-3.9::3.9,0,merged,CLA signed::needs backport to 3.8::,<!-- issue-number: [bpo-41162](https://bugs.python.org/issue41162) --> https://bugs.python.org/issue41162 <!-- /issue-number --> ::,4cca15ff32eb4b15a47476fea71a246cd115491e::
https://api.github.com/repos/python/cpython,21256,mac_lto_pgo::master,0,closed,CLA signed::awaiting core review::needs backport to 3.8::needs backport to 3.9::,"The script to build the macOS installer now configures Python with Link Time Optimization (LTO) and Profile-Guided Optimizatio (PGO). <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-41181](https://bugs.python.org/issue41181) --> https://bugs.python.org/issue41181 <!-- /issue-number --> ::Nits: Optimization::s/Profile-Guided Optimizatio/Profile-Guided Optimization/::Commit message could be updated too (same typo)::",d634a3286ec1b891cfd5c6754b705585133b9975::
https://api.github.com/repos/python/cpython,21181,deprecate-pyunicode::master,0,closed,CLA signed::awaiting core review::needs backport to 3.8::needs backport to 3.9::type-documentation::,"Py_UNICODE APIs except PEP 623 will be removed at Python 3.10. They are deprecated since Python 3.3, and they have `Py_DEPRECATED` since 3.6. <!-- issue-number: [bpo-41123](https://bugs.python.org/issue41123) --> https://bugs.python.org/issue41123 <!-- /issue-number --> ::",03371bd45a6b6cf78d3b43cbb5b5eed9b5560bd1::f4b0d4b3e017403ae648ec97318b528f1059689d::9209343368e0ee665583bff970996ffda2e863bd::a1c6344fc4b60d4ce5eed4bd5f2f30681e5042c4::
https://api.github.com/repos/python/cpython,21115,macos11-universal2::master,0,closed,CLA signed::OS-mac::awaiting core review::needs backport to 3.8::needs backport to 3.9::,"Add a new option to ""--with-universal-archs"": ""universal2"". This will build binaries supporting the arm64 and x86_64 architectures, in preparation for ""Apple Silicon"" systems. <!-- issue-number: [bpo-41090](https://bugs.python.org/issue41090) --> https://bugs.python.org/issue41090 <!-- /issue-number --> ::Is this change on purpose or bad merge?::A previous commit from another project left `configure` out of sync with ``configure.ac``.  While this corrects that, I'm pushing a separate PR (#21152 )  to fix it right away.::",b75df429dee1707412ecf44b6adae07caac060b9::
https://api.github.com/repos/python/cpython,21114,macos11-support-arm64::master,0,closed,CLA signed::OS-mac::awaiting core review::needs backport to 3.8::needs backport to 3.9::,"Apple introduced a new CPU architecture for macOS at WWDC2020 (marketing name ""Apple Silicon""), which is ""arm64"". This PR adds support for this new architecture to Mac/Tools/pythonw which is used in framework builds to launch the real python interpreter (hidden in an Python.app inside the framework) using the same architecture as it is currently using. <!-- issue-number: [bpo-41101](https://bugs.python.org/issue41101) --> https://bugs.python.org/issue41101 <!-- /issue-number --> ::",2add6fb11b0eddf459c2e79ec86376a8adb00cfc::
https://api.github.com/repos/python/cpython,21067,pydoc_select::master,0,closed,CLA signed::awaiting core review::needs backport to 3.8::needs backport to 3.9::skip news::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-31938](https://bugs.python.org/issue31938) --> https://bugs.python.org/issue31938 <!-- /issue-number --> ::",486e11db950c20ff53185b50bdf81f94373be636::
https://api.github.com/repos/python/cpython,21013,coverity_pathconfig::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.7::type-bugfix::,Reported by Coverity.  (CID 1457554 RETURN_LOCAL) path0 is assigned as a pointer to this right before it goes out of scope. <!-- issue-number: [bpo-41056](https://bugs.python.org/issue41056) --> https://bugs.python.org/issue41056 <!-- /issue-number --> Automerge-Triggered-By: @tiran::,46009118ae27917691c9cd3b5d41c47f716cbb86::0ac16e70289a757d0650bf57840ad14c2ae65c82::
https://api.github.com/repos/python/cpython,21003,zoneinfo_fix::master,0,closed,CLA signed::awaiting core review::needs backport to 3.9::skip issue::skip news::,"Signed-off-by: Christian Heimes <christian@python.org> <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::",2bc71ab7f5a2ed3f717538e247b9e935253cfc38::
https://api.github.com/repos/python/cpython,20999,document-richcompare-bool::master,0,closed,CLA signed::awaiting core review::needs backport to 3.8::needs backport to 3.9::type-documentation::,<!-- issue-number: [bpo-41049](https://bugs.python.org/issue41049) --> https://bugs.python.org/issue41049 <!-- /issue-number --> ::,1371aff9ab73b0fe80a970c55e100245d6516607::cf1a92d3503f78705bf12b9eae56124b6975afab::
https://api.github.com/repos/python/cpython,20994,glob-escape::master,0,merged,CLA signed::needs backport to 3.7::type-bugfix::,<!-- issue-number: [bpo-41043](https://bugs.python.org/issue41043) --> https://bugs.python.org/issue41043 <!-- /issue-number --> ::,927e4617356c746b933d25fc294d6d39a10c29c9::
https://api.github.com/repos/python/cpython,20991,test_modulefinder::master,0,merged,CLA signed::needs backport to 3.7::skip news::type-bugfix::,<!-- issue-number: [bpo-41040](https://bugs.python.org/issue41040) --> https://bugs.python.org/issue41040 <!-- /issue-number --> ::,1d0785c3543ebb58bea1f320fca2fadc76d27838::
https://api.github.com/repos/python/cpython,20755,backport-3231883-3.9::3.9,0,merged,CLA signed::skip issue::skip news::type-documentation::,(cherry picked from commit 323188360d61875bd68688ef41711bade298af50) Co-authored-by: Stefan Krah <skrah@bytereef.org>::,0e6f88e855b72fb52e65d671c251128d7eff2c2e::
https://api.github.com/repos/python/cpython,20754,master::master,0,merged,CLA signed::skip issue::skip news::type-documentation::,::,2f153620010256b7fb0bd6d51fc7e4c308cc5c1f::
https://api.github.com/repos/python/cpython,20753,bpo-21756/IDLE-parenmatch-multiline-closing::master,0,closed,CLA signed::DO-NOT-MERGE::awaiting core review::needs backport to 3.7::needs backport to 3.8::needs backport to 3.9::type-bugfix::,"<!-- issue-number: [bpo-21756](https://bugs.python.org/issue21756) --> https://bugs.python.org/issue21756 <!-- /issue-number --> ::Just a nit, but I prefer ```suggestion def __init__(self, editwin, index, *, end_at_eol=True): ``` for something like this.::This `else` is a bit unwieldy.  Since hyperparser has tests, maybe it can be restructured with a high confidence of correctness? ``` else: r = text.tag_prevrange(""console"", index) if r: startatindex = r[1] else: startatindex = ""1.0"" stopatindex = ""%d.end"" % lno if end_at_eol: stopatindex = ""%d.end"" % lno else: r = text.tag_nextrange(""console"", index) if r: stopatindex = text.index(r[0] + ""-1c"") else: stopatindex = ""end-1c"" ```::Do you think `wrap` or something like it would work instead of `end_at_eol`?  I had to stop and think about `end_at_eol` to comprehend its meaning.::Since you're changing this line, an f-string would make this more readable.::Yes, the name ""end_at_eol"" isn't great. I'm not sure ""wrap"" is clear enough though. Perhaps ""stop_at_line_end"" or ""multiline""?::Great suggestion! I'm still slowly chipping away at the deeply-ingrained ""IDLE supports very old Python versions"" rule in my mind...::I prefer one word or at most two (which don't necessarily need '_') rather than a phrase.   The docstring can explain the word.  In any case, the audience is only IDLE maintainers and there may never be more than one or two calls that change the current default.  'endline=True' is a possibility.::Definitely.::One 3.7.8 is out, we can consider using new-in-3.8 features such as '/' in signatures and ':='. ::So ""multiline""?::`endline`, `multiline`, `oneline`, `singleline`, `continuation`?::",0f1700d26e43240735a47a208c852cec7e79480b::843d18d47f93c3393a948fa408ba258a1ad9b3d0::
https://api.github.com/repos/python/cpython,20715,installer_use_cached_docs::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::skip issue::skip news::,"The macOS `build-installer` script now looks in its directory of source tarballs for a suitable html tarball of the same version. If found, it will unpack and use it rather than rebuilding the html format documentation set from the source repo. This is intended as a speedup for test builds of the installer. Files names must be in the same format as produced by the docs build for download, for example, `python-3.9.0b1-docs-html.tar.bz2`.::",e58530a3bf0d06d95c0d0a311b359676243fa2ff::95546857b1f3c0937f4afc30bccf68c598d5290e::
https://api.github.com/repos/python/cpython,20696,operator_precedence::master,0,closed,CLA signed::awaiting core review::needs backport to 3.9::skip news::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-40902](https://bugs.python.org/issue40902) --> https://bugs.python.org/issue40902 <!-- /issue-number --> ::",83337b3aedf25d3a51eca910b7536eaedbeeb576::9e25541c01111f2a6b144ef47f5f0c8197d76a4b::0366b968cecd29ff1d6012aa4c8a43cdcc3eef8f::2f979f94d9a192a6961c57c0971d2b3a4c249a2b::c51f1ad6c78060bc4b20c64c5e7e358712a0dbbd::d0e3ef58dc86c13077d92a3e0330a60a9b3321ff::8f1243745c42a91dfc1c1d10a38c605f0682381e::2372f5e02bd3e5a02ea7190252375f3f4e62cd8a::9398d8f59ca3bf9913da3a6e6c171ad728807805::1554dea1db567ff9a97f05e3eb918186acee77c6::0b6f84aa01b3b069cf33739aca26d508707f7ccc::8dd799be2abd8c029a9e1f832432b3bb8baf6e80::08e588bc41e2f18928dc2fbd6f1e827f2cadb838::882c74095bd0d34e226ee6b9a3bf6a3177ee9ba1::13de6ab48ecfcb8d69fc867f7d3303251f3c9398::10bc6204c6d2093d1fd8efe1ec0ad2bcf927ab32::5320f37c84d8b15239dd81ef4d84c02821027f25::fe2d89c3f3c6caa2f652050c8855bedd0c4db4a5::6fee838543146eae432f0938cb10b9899991a14a::
https://api.github.com/repos/python/cpython,20656,bpo-39791/refresh-importlib-metadata::master,1,closed,CLA signed::awaiting core review::needs backport to 3.8::needs backport to 3.9::,Refreshing importlib.metadata with 1.6.1 which uses `importlib.resources.files` in its tests should unblock the issues affecting GH-20576. <!-- issue-number: [bpo-39791](https://bugs.python.org/issue39791) --> https://bugs.python.org/issue39791 <!-- /issue-number --> ::,6c1e9c381576aaf5eaa14180e831ddce0e1d69e9::
https://api.github.com/repos/python/cpython,20646,codeop_test::3.8,0,merged,CLA signed::needs backport to 3.7::skip news::type-tests::,"A tiny sliver of a 3.9 PEG parser patch needed to backport the test added by #20486. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-40807](https://bugs.python.org/issue40807) --> https://bugs.python.org/issue40807 <!-- /issue-number --> ::",d30c52c739419ba1aa8713cef1add4c63a6c1d3a::
https://api.github.com/repos/python/cpython,20620,patch-3::master,0,merged,CLA signed::awaiting merge::needs backport to 3.8::skip issue::skip news::,"Add space after period. Current warning: InvalidTZPathWarning: Invalid paths specified in PYTHONTZPATH environment variable.Paths should be absolute but found the following relative paths: ... <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::I think you should just have added a space in the string here: `f""Invalid paths specified in PYTHONTZPATH ""` does not need to be an f-string as it contains no variable, also it splits the ""Invalid paths specified in PYTHONTZPATH environment variable."" message in two which will make it harder to grep for in the source code later if someone wants to find where it comes from.::good points, I've made the changes you've suggested.::",160ad06ab7e9421140e4fb73c5e6e0cff6797565::9038c4c196b9b60f4a1d91b764fb4bf6bdfdf34b::
https://api.github.com/repos/python/cpython,20549,bpo-40826::master,0,closed,CLA signed::awaiting core review::needs backport to 3.9::type-bugfix::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-40826](https://bugs.python.org/issue40826) --> https://bugs.python.org/issue40826 <!-- /issue-number --> ::",5f02174269f29c65010ddabeeca14ca2560075be::9524994d03c853607489bdeb96ecb37b0e4b444e::
https://api.github.com/repos/python/cpython,20546,issue40630-tracemalloc-reset-peak-adjust-for-3.9::master,0,merged,CLA signed::type-documentation::,"#20545 backports #20102 to 3.9, per https://github.com/python/cpython/pull/20102#issuecomment-632728791. This PR therefore updates the documentation on `master` to reflect this different version-added. <!-- issue-number: [bpo-40630](https://bugs.python.org/issue40630) --> https://bugs.python.org/issue40630 <!-- /issue-number --> ::",3eee54ef71268bda903e56280e2f96e89e9471dd::
https://api.github.com/repos/python/cpython,20536,csv-errors-in-iter::master,0,merged,CLA signed::needs backport to 3.6::needs backport to 3.7::type-bugfix::,"Unexpected errors in calling the `__iter__` method are no longer masked by `TypeError` in `csv.reader()`, `csv.writer.writerow()` and `csv.writer.writerows()`. <!-- issue-number: [bpo-26407](https://bugs.python.org/issue26407) --> https://bugs.python.org/issue26407 <!-- /issue-number --> ::Is it possible for `PyObject_GetIter(seq)` to return NULL without setting an exception? If so, we may want to consider checking `PyErr_Occurred()` before `PyErr_ExceptionMatches(PyExc_TypeError)`. ::It should not. If it happens due to a programming error, it will likely lead to a crash.::",1f863475d5b9e882d104c41089e492d55c1fc579::
https://api.github.com/repos/python/cpython,20491,bump_pip_setuptools::master,0,merged,CLA signed::needs backport to 3.7::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-38488](https://bugs.python.org/issue38488) --> https://bugs.python.org/issue38488 <!-- /issue-number --> ::",1761e1b219a9c5d0362bc002ebfdac5a9d86826e::0a90c28a4efa14cea8e3938a8e50584c3b8e6235::
https://api.github.com/repos/python/cpython,20275,timings39::3.9,0,closed,CLA signed::awaiting core review::needs backport to 3.9::skip issue::skip news::type-documentation::,::,93e4a3fa06554d32a1bd91ecba135a6536a75998::
https://api.github.com/repos/python/cpython,20251,jcgoble3-patch-1::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.7::needs backport to 3.8::skip issue::skip news::,Automerge-Triggered-By: @Mariatta::,72a79381a1f1902b8fbaf364a0e05e7b07c1d513::
https://api.github.com/repos/python/cpython,20231,gha-3.9::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::skip issue::skip news::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> For https://github.com/python/core-workflow/issues/369, no bpo-NNNN available. ~Also update to v2 actions where available.~ --> Moved to own PR:  https://github.com/python/cpython/pull/20232.::Can you please revert these changes and write a separated PR?::Same remark.::Done!::And new PR: https://github.com/python/cpython/pull/20232::",efc16da11ffec54fae9b9b19eb802d8d6747fd6b::
https://api.github.com/repos/python/cpython,20226,bpo-40667::master,0,closed,CLA signed::DO-NOT-MERGE::OS-windows::awaiting core review::needs backport to 3.9::,<!-- issue-number: [bpo-40667](https://bugs.python.org/issue40667) --> https://bugs.python.org/issue40667 <!-- /issue-number --> ::,505a937b6873ba2684c31084bfea818caa564267::
https://api.github.com/repos/python/cpython,20139,fix-issue-40651::master,0,merged,CLA signed::needs backport to 3.8::skip news::type-documentation::,"[bpo-40651](https://bugs.python.org/issue40651): Bugfix of the `LRU` implementation based on `OrderedDict` in the `collections` module documents. It didn't consider the calls to `__setitem__` method as usage. <!-- issue-number: [bpo-40651](https://bugs.python.org/issue40651) --> https://bugs.python.org/issue40651 <!-- /issue-number --> ::I think this part could be replaced by `self.popitem(last=False)` now.::Yes, you are right. It is cleaner to remove the oldest entry by `self.popitem(last=False)`. At the same time, It is working correctly. Do you suggest I update it in this pull request? Not sure about the conventions here. Normally we are only supposed to change the code directly related to the issue.::I don't know, I think `popitem()` was added in Python3 so this block of code needed to be compatible with Python 2 until this year. Let's wait for @rhettinger review, I can change it in another PR if he thinks it's needed.::",68761d4d9302d8910d184393853bb77fead73592::
https://api.github.com/repos/python/cpython,20038,7bit-cte::master,0,merged,CLA signed::needs backport to 3.8::,"RFC5322 in section 2.1.1 mandates that the line cannot be longer than 998 characters and should not be longer than 78 characters (excluding CRLF). When we use raw_data_manager (default for EmailPolicy, EmailMessage) it does the correct thing as long as the message contains characters outside of 7bit US-ASCII set - base64 or qp Content-Transfer-Encoding is applied if the lines would be too long without it. However if our message is limited the characters from the 7bit US-ASCII set no transfer encoding is applied, and such messages can easily go beyond 78 or even 998 characters. Let's fix the CTE heuristic so it doesn't care about 7bit vs 8bit. <!-- issue-number: [bpo-40597](https://bugs.python.org/issue40597) --> https://bugs.python.org/issue40597 <!-- /issue-number --> ::If text content lines are longer than policy.max_line_length, always use a content-encoding to make sure they are wrapped.::Done. I've also changed the commit title to be more like this. Thanks for the suggestion!::",97e200007d84cb6d3fc066f2dec43c9eb3aa3af4::
https://api.github.com/repos/python/cpython,19921,restore_celementtree::master,0,closed,CLA signed::awaiting core review::needs backport to 3.9::,"* Restore ``xml.etree.cElementTree`` * Schedule the module for removal in 3.10 * Add a ``PendingDeprecationWarning`` <!-- issue-number: [bpo-36543](https://bugs.python.org/issue36543) --> https://bugs.python.org/issue36543 <!-- /issue-number --> ::A typo in your own name? That's rare, I guess. ;-)::```suggestion ) del _warn ```::You wouldn't believe me :+1: ::Use more direct wording: * clearer * similar to that in xml.etree.elementtree.rst * fewer words = more readable ```suggestion 3.3 and will be removed in Python 3.10. ```::",2d920fe666598f28f6fa22798bf9117ccde065f0::99cd4efc9ea9dbc65ca4293336ca50b2b2e7b514::
https://api.github.com/repos/python/cpython,19896,fix-issue-29590::master,0,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::,"This fixes the following issue: When gen.throw() is called on a generator after a ""yield from"", the intermediate stack trace entries are lost. <!-- issue-number: [bpo-29590](https://bugs.python.org/issue29590) --> https://bugs.python.org/issue29590 <!-- /issue-number --> ::",75baa966a13e383e522c96cca1b120c68cceb8a0::8dda934a8ba71bc5e52c768694723f9d82ed5a66::
https://api.github.com/repos/python/cpython,19880,bpo40482::master,0,closed,CLA signed::DO-NOT-MERGE::awaiting core review::needs backport to 3.7::needs backport to 3.8::,"Signed-off-by: Christian Heimes <christian@python.org> <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-40482](https://bugs.python.org/issue40482) --> https://bugs.python.org/issue40482 <!-- /issue-number --> ::",89e241b725f98e59c6b448047e876db881937426::
https://api.github.com/repos/python/cpython,19847,master::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.8::needs backport to 3.9::skip news::,"Just a brief grammar fix. See also <https://bugs.python.org/issue40471>. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-40471](https://bugs.python.org/issue40471) --> https://bugs.python.org/issue40471 <!-- /issue-number --> Automerge-Triggered-By: @orsenthil::",932c0de071edf743725b6bb71ce54f102422b5c8::
https://api.github.com/repos/python/cpython,19819,idle-clipboard::master,0,closed,CLA signed::awaiting changes::needs backport to 3.7::needs backport to 3.8::,"<!-- issue-number: [bpo-40452](https://bugs.python.org/issue40452) --> https://bugs.python.org/issue40452 <!-- /issue-number --> ::Please limits lines to 79 chars.::I think a `with` statement should be used here.::Bare `except`s should not be used (https://bugs.python.org/issue15313 is for removing bare `except`s in IDLE).::I don't think three lines of comments are needed here.::```suggestion except (OSError, tkinter.TclError): ```::```suggestion from tkinter import TclError, messagebox as tkMessageBox ```::```suggestion # Avoid exceeding the pipe bufsize. ```::```suggestion # '.communicate' & '.__exit__' call '.wait'. ``` Put this after p.write.::```suggestion # 'TclError's are due to an empty clipboard. ``` Delete line, make other a proper sentence, as recommended in PEP 8.::Fixed, but next line was not.  I am fixing latter.::Fixed.::done::fixed::Done.::`shell=True` is not needed, I am deleting it.::I don't believe OSError is possible. In any case, we should try to write code that will not fail under anything like normal circumstances.  Deleting this.::I added it because, without it I found that a console window flashes temporarily (this may just be because I am on a slower computer and there also may be a better way of resolving it).::I saw flashes with one of my other experiments, but never with this.  A mute point for the moment.  Anything we do should be tried on multiple machines.::",1689456e4d62892faf8893143b433c71d12b9283::29e3f149727c5a693762feda758e0f0f64daf8b7::1d9967538323b20806a1eddf33df1e7cc4b2d687::03d1fafb0a46f9a9e2c3bfaad05218c29af4296d::724e9867ab7f5a2a1ad27b4f8c8a5afdf23d4265::bf861e18070b3281a8cbd7253667aacc4359e5b0::3380ee1d8f817d3a3bc674b90865484087f4412d::123d44e9dd020e2b8054b6199867da579f02d57b::588f2fe1ae39c42ad3031785c90c0806333bbb63::928e3a847669fda6ea600e56678a93461b952120::
https://api.github.com/repos/python/cpython,19746,null-inittab-copy::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.6::,"Otherwise we leave a dangling pointer to free'd memory. If we then initialize a new interpreter in the same process and call PyImport_ExtendInittab, we will (likely) crash when calling PyMem_RawRealloc(inittab_copy, ...) since the pointer address is bogus. <!-- issue-number: [bpo-40412](https://bugs.python.org/issue40412) --> https://bugs.python.org/issue40412 <!-- /issue-number --> Automerge-Triggered-By: @brettcannon::```suggestion Nullify inittab_copy during finalization, preventing future interpreter initializations in an embedded situation from crashing. Patch by Gregory Szorc. ```::",64fd2a6b5796d2bba2afe90656bd49b951c4f21b::7af7634dbed71b0b7f7070358d166f96f6f64dc8::3eea7db06876838940930b13dd9785d9c81d750a::
https://api.github.com/repos/python/cpython,19500,bpo-40214::master,0,closed,CLA signed::awaiting core review::needs backport to 3.8::skip news::type-tests::,<!-- issue-number: [bpo-40214](https://bugs.python.org/issue40214) --> https://bugs.python.org/issue40214 <!-- /issue-number --> ::,6af57f19dbd67ae96fa6feae9a248dabac6344d3::0ac1b0bc5b123bb5578e6e09fd322bce260490dd::6a262247253a1b5efbd1734770c9d6b99b7ec9f9::0f16b8ce65783f1d92ac71fb16dad9257618d62c::fce2f7f498fcc1ab2bfeb755f9734af1955c1187::6382b3644f08e2063a46389493477ee9dff60d07::8c77db1cf515b97d4b453b5807107ba9fae06b61::
https://api.github.com/repos/python/cpython,19369,bpo-40184::master,0,merged,CLA signed::needs backport to 3.8::skip news::,<!-- issue-number: [bpo-40184](https://bugs.python.org/issue40184) --> https://bugs.python.org/issue40184 <!-- /issue-number --> ::,c76c5d40b3c467d1341dcc94e84a39ad2121ae8d::
https://api.github.com/repos/python/cpython,19344,bpo_40077_refleaks::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::,<!-- issue-number: [bpo-40077](https://bugs.python.org/issue40077) --> https://bugs.python.org/issue40077 <!-- /issue-number --> ::,363fa0c3b31f1392cf54e40f356acaf9594f49bc::6e4179336ff9fcc7a03d3900e9a0d30f4275c7ee::37abea988a79e2b16c33d64d1aed2298f78a1d8a::
https://api.github.com/repos/python/cpython,19196,logging_fork::master,0,closed,CLA signed::DO-NOT-MERGE::awaiting core review::needs backport to 3.7::needs backport to 3.8::,"Fix a crash in the logging module after fork in the process process: reset the main logging lock. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-40091](https://bugs.python.org/issue40091) --> https://bugs.python.org/issue40091 <!-- /issue-number --> ::",163b1e32f24cefb4fe6663244404c5e60716245a::
https://api.github.com/repos/python/cpython,19133,master-alignment::master,0,closed,CLA signed::awaiting changes::needs backport to 3.8::,"``` In file included from /usr/include/python3.8/Python.h:147: In file included from /usr/include/python3.8/abstract.h:837: /usr/include/python3.8/cpython/abstract.h:91:11: error: cast from 'char *' to 'vectorcallfunc *' (aka 'struct _object *(**)(struct _object *, struct _object *const *, unsigned long, struct _object *)') increases required alignment from 1 to 8 [-Werror,-Wcast-align] ptr = (vectorcallfunc*)(((char *)callable) + offset); ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 1 error generated. ``` <!-- issue-number: [bpo-40052](https://bugs.python.org/issue40052) --> https://bugs.python.org/issue40052 <!-- /issue-number --> ::I don't think this is better. The correct, idiomatic solution is something like: ```c vectorcallfunc *ptr; memcpy(ptr, (char *) callable + offset, sizeof(ptr)); return *ptr; ```::Same comment here.::(also, note that any decent compiler will optimize the memcpy call away)::",e6f4de57ffd175870e513ffa387fa6e7eaaeaed2::
https://api.github.com/repos/python/cpython,19131,ps_doc_38972::master,0,merged,CLA signed::needs backport to 3.7::skip news::type-documentation::,… for venv activation Add proposed documentation for `venv` + Windows + Powershell. This change: - Adds details on `Set-ExecutionPolicy` to venv site documenation. - Also adds the same detail to the Activate.ps1 script itself as a `.Note`. You can see this if you use `Get-Help Activation.ps1 -Full`. <!-- issue-number: [bpo-38972](https://bugs.python.org/issue38972) --> https://bugs.python.org/issue38972 <!-- /issue-number --> ::Is there a more generic redirection link for this? Otherwise this is looks pinned to PowerShell 7 which will become obsolete at some point. ```suggestion <https:/go.microsoft.com/fwlink/?LinkID=135170>`_ ```::```suggestion For more information on Execution Policies: https:/go.microsoft.com/fwlink/?LinkID=135170 ```::```suggestion execution policy for the user. You can do this by issuing the following PowerShell ```::```suggestion command from a PowerShell command window: ```::```suggestion issuing the following PowerShell command: ```:::heavy_check_mark: :::heavy_check_mark: :::heavy_check_mark: :::heavy_check_mark: :::heavy_check_mark: ::,5cfb307f1672eaa91cfc16d0941d678f99eac3a7::fb3fb70f8c0af993041acab7b5765dcfa56e9600::74842aa4e0a7f870b296b9c2a2965c003cc30caf::8ac33d49b1a2e684d42ecd487fdddcf14fc22410::
https://api.github.com/repos/python/cpython,19114,random-tests::master,0,closed,CLA signed::awaiting core review::needs backport to 3.7::needs backport to 3.8::skip news::type-documentation::type-tests::,"<!-- issue-number: [bpo-40046](https://bugs.python.org/issue40046) --> https://bugs.python.org/issue40046 <!-- /issue-number --> ::```suggestion equivalent to ``choice(range(start, stop, step))``, but accepts also numbers ```::",6e9e44bb6962f81e2b1cde3d8ed3d955947a7619::6ab03bb826af0ebdc3055681b2ad789022c89592::
https://api.github.com/repos/python/cpython,19073,38377_multiprocessing-requires-dev_shm::master,0,closed,CLA signed::awaiting changes::needs backport to 3.8::needs backport to 3.9::type-tests::,"Skip test_get_event_loop_new_process on systems which don’t provide it (e.g., building environments of some Linux distributions). <!-- issue-number: [bpo-38377](https://bugs.python.org/issue38377) --> https://bugs.python.org/issue38377 <!-- /issue-number --> Automerge-Triggered-By: @pitrou::I'm not sure if /dev/shm should be hardcoded here. This check looks to be specific to Linux, no? Maybe use Arena._dir_candidates of multiprocessing.heap. I'm not sure what to do if _dir_candidates is empty (platforms other than Linux). I dislike that test_asyncio becomes tidely coupled to multiprocessing internals. Is there a function in multiprocessing somewhere to check if /dev/shm is required and usable?::Instead of that, why not skip if there is an environment variabled named e.g. `PYTHON_NO_DEV_SHM`?::@pitrou I would still hoped for some kind of magic, what @vstinner suggested. Any ideas?::I think it's more flexible to let you handle the magic in your build configuration. I don't think we want to handle all weird corner cases in our test suite.::OK, so the patch with ``unittest.skipIf('PYTHON_NO_DEV_SHM' in os.environ)`` would be accepted?::IMHO it should. I'll let @vstinner comment. (or perhaps `os.environ.get('PYTHON_NO_DEV_SHM') == '1'`)::I don't understand the relationship between asyncio, multiprocessing and /dev/shm.::IMHO we cannot support something that is not used for linux ""standard""? I am not an expert, but this sound like a specific distribution issue, and will be a little difficult (maybe) pay attention for all Linux distributions issues.::I don’t understand what’s your point. Do you think we should care less about Linux distributions, or what?::Hmm I think so, I saw some other projects that when the issues come from an specific distribution, that can be fixed simply with a patch on the distribution package, and don't try to skip (in this case the test) on the upstream. It's just an opinion :)::OK, this is just an opinion and not an action item.::nit-pick, you should also check ``sys.flags.ignore_environment`` here.::",7547cc6f9ac00b7b6fb9de3b2240e237f2fe8f94::f516474bb14de4f0c219e7a7635186638f8dcdcd::dcd12bfe2c4c80912b759dfcf236ccbd52aa6519::
https://api.github.com/repos/python/cpython,18921,bpo-39330::master,0,merged,CLA signed::needs backport to 3.7::skip news::,<!-- issue-number: [bpo-39930](https://bugs.python.org/issue39930) --> https://bugs.python.org/issue39930 <!-- /issue-number --> ::,cb437c5df0b7e54f36b8bac94cabf3ef91ccebeb::45fcf30c4bfbb66b6a3c85071f5861b63d5d9ef7::
https://api.github.com/repos/python/cpython,18715,decimal_doc_fix::master,0,merged,CLA signed::skip issue::skip news::type-documentation::,::,3106343937ae0805f16043e1d0a89b53e1455f5f::
https://api.github.com/repos/python/cpython,18704,master::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::skip issue::skip news::,::,cac795ec40121b3629b8b346a00837fc6c2fbd26::
https://api.github.com/repos/python/cpython,18680,disable_codecov_comments::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::skip news::,<!-- issue-number: [bpo-39704](https://bugs.python.org/issue39704) --> https://bugs.python.org/issue39704 <!-- /issue-number --> ::,e65b5a0b347535e36de5eda8818d77f2330cb502::
https://api.github.com/repos/python/cpython,18639,bpo-39693-tarfile-extractfile-documentation::master,0,merged,CLA signed::needs backport to 3.8::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-39693](https://bugs.python.org/issue39693) --> https://bugs.python.org/issue39693 <!-- /issue-number --> ::",d15d1cc902bb87f10abcde5dfc4e2c533c33806a::588f4c37d0ad0538ad7f00462d0617195574a839::986fdf83751809ec7769182626e0d7d7b8a410e9::f967ad5c0ff09c4bc1fab53629b190a4021c1c49::22ed7802aeef1e6485ce54fed1a9f37068886e22::ba28411bdc3bd79decf4f8d7912c3c4b4438390b::7697668d2f393908cf3165cacc06b4980b1265dc::80e7fb3fb12eb6c2800f6e0148696e78057db472::
https://api.github.com/repos/python/cpython,18550,bpo-39677::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> The semantics of MAKE_FUNCTION's operand has changed since Python 3.6, however the documentation kept its old name `argc`, however it now works the same way as other `flags` operands, hence now we change it to `flags`. <!-- issue-number: [bpo-39677](https://bugs.python.org/issue39677) --> https://bugs.python.org/issue39677 <!-- /issue-number --> ::```suggestion Changed operand name of **MAKE_FUNCTION** from *argc* to *flags* for module :mod:`dis` ```::I would keep this line as is.::I don't have an idea if this should be called `operand` or `argument`, but we shall keep consistent in the whole Python documentations. Just changed it according to your review. If you then think `argument` is not that proper just say something.::",b41005fafd2239fad0451c882a46b6027689f931::951357b77455e3083e5c1bf09d5b7722d05d62f5::032179db1ca25cf47b03963844732a283ad34dea::0f36b725b75a06f2b25e0401fafd864631f32fe0::
https://api.github.com/repos/python/cpython,18324,return::master,0,merged,CLA signed::needs backport to 3.7::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> I rewrapped the lines around my edit in another commit, to see just my wording change, select the first commit only. <!-- issue-number: [bpo-39534](https://bugs.python.org/issue39534) --> https://bugs.python.org/issue39534 <!-- /issue-number --> ::",47e9cfe36a042cde8675d4102b569cd1ebcd6df1::8d28654eb1890ca02d38edf9abfbe95b2e2ad38e::33a0fd39ac39205c3c7d673c06622214b9c01f6d::
https://api.github.com/repos/python/cpython,18206,bpo-39453-3.6::3.6,0,closed,CLA signed::awaiting review::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-39453](https://bugs.python.org/issue39453) --> https://bugs.python.org/issue39453 <!-- /issue-number --> ::",cf7cdaa264ce64245d5c752d4f356e2e703b9d9a::d5bf3e81cad4f4b7c3081966f1f07f27c2478db1::9d3e26d270ff28e5490dee8d99b3fe75adfbbd11::3bf6d7b9dc4ab702555358d7b342e327bbec4520::
https://api.github.com/repos/python/cpython,18197,backport_friendly_imports::master,0,merged,CLA signed::skip issue::skip news::,"I stopped short of putting comments at the top of each file explaining the import style, but I've tagged everyone I know of who's active in mock's development right now to ask if you can keep an eye out for `import foo; foo.bar` usage for things that aren't in Python 3.6+. `from foo import bar` makes it much easier to backport just what's necessary and stops patches failing to apply cleanly going forwards. @mariocj89 - tagging you too for reference :-)::",2388f9c92b183f39b37ac8db6dd010c9435d129e::db04db25b06290cc7ea890aaa8f033626771a338::2a29c5d38da936ccedd1d3602b844dec3a965ddc::
https://api.github.com/repos/python/cpython,18181,bpo-39453::master,0,merged,CLA signed::needs backport to 3.6::needs backport to 3.7::needs backport to 3.8::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-39453](https://bugs.python.org/issue39453) --> https://bugs.python.org/issue39453 <!-- /issue-number --> ::The compare code already has an early-out for an identity match.  No need to replicate that here.::I'm curious how much this affects or doesn't affect the search time for a long list.::@rhettinger AS-IS ```bash ./python.exe -m pyperf timeit ""l = [1] * 99999"" ""3 in l"" ..................... Mean +- std dev: 4.53 ms +- 0.22 m ``` TO-BE ```bash ./python.exe -m pyperf timeit ""l = [1] * 99999"" ""3 in l"" ..................... Mean +- std dev: 5.17 ms +- 0.21 ms ```::@rhettinger I expected this kind of performance improvement. https://bugs.python.org/issue39425 but no effect for this case since this is not the same scenario that only needs one single same object. Thanks for the review I've updated it :)::It describes the implementation, but says nothing to an average Python user. I would formulate the entry in terms of Python: ""Fixed possible crash in ``list.__contains__` when a list is changed during comparing items.""::Updated!::```suggestion # bpo-39453: list.__contains__ was not holding strong references ```::```suggestion Fixed a possible crash in :meth:`list.__contains__` when a list is changed during ```::",6514398776b02576420b1ba9a9a90e19ce2c5bb3::5ca2fe040e95209d00ddca7df2e8e9df91de6d10::d7e3e61cb7b91248d1773bc9e907f5e154fbb016::
https://api.github.com/repos/python/cpython,18158,fix-issue-39439-master::master,0,merged,CLA signed::needs backport to 3.7::,Honor the Python path when a virtualenv is active on Windows. <!-- issue-number: [bpo-39439](https://bugs.python.org/issue39439) --> https://bugs.python.org/issue39439 <!-- /issue-number --> ::,036a3f6093fe445e32da4ad10df2c781b24d5ebe::815ee6ac31466ccc007bcee3cc6e354f4553990c::
https://api.github.com/repos/python/cpython,18082,PyLong_AsLongLong-docs-long-long::master,0,merged,CLA signed::needs backport to 3.7::skip issue::skip news::type-documentation::,"In the docs for [PyLong_AsLongLong()](https://docs.python.org/3/c-api/long.html#c.PyLong_AsLongLong), it states that an Overflow exception will be raised if the value is out of range for a C-style `long` integer type.  I believe this should refer to `long long`, to align with the rest of the description of this function. The docs for the other functions in `Doc/c-api/long.rst` appear to be correct. This seems like a trivial docs change, but if I need to raise a bug issue for it, do let me know.::",b8a02470c31f8f8142eb79041e122d7925ac9171::
https://api.github.com/repos/python/cpython,18078,posix_unset_envvars::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::needs backport to 3.8::type-bugfix::,"Environment variables set by os.environ and os.putenv() are now cleared at exit. Python manages their memory which is released at exit. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-39395](https://bugs.python.org/issue39395) --> https://bugs.python.org/issue39395 <!-- /issue-number --> ::Given that you are already doing these fixes around this, `posix_putenv_garbage` should also be guarded by `HAVE_PUTENV` (check its initialization in the init function).::",82fee00f040fc9c97675ae64703e8cb49bcebcef::
https://api.github.com/repos/python/cpython,17974,fix-issue-39308::master,0,closed,CLA signed::awaiting merge::needs backport to 3.8::,<!-- issue-number: [bpo-39308](https://bugs.python.org/issue39308) --> https://bugs.python.org/issue39308 <!-- /issue-number --> Automerge-Triggered-By: @gvanrossum::Not quite sure if that's acceptable though.::,5fa79eb9b41cddfd6ee6cc965ee47ceee3059568::52853ecf0ffab6cc52770e734b15f9bdc98209b5::3b5ae68c81e5b041664ca863bbcad265415bce82::defa57c81aee935cd3909b910fb5a5edd5231579::
https://api.github.com/repos/python/cpython,17878,patch-1::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.6::needs backport to 3.7::needs backport to 3.8::skip news::type-documentation::,"Updated as Eric mentioned ""By default, the initial value starts at 1"" <!-- issue-number: [bpo-39234](https://bugs.python.org/issue39234) --> https://bugs.python.org/issue39234 <!-- /issue-number --> Automerge-Triggered-By: @ericvsmith::You're missing the trailing period. Sorry for all of the minor fixes.::no worries, added the ""."" thanks Eric::",d3ed9d3e4c721bd6195963096fc85807ff814a56::3f10a68e09ddb36a86c4615decd90bfcb170b445::7a28afc3373d449a2e7022e7b42709c191ab9221::5038e0425bd82f3c2f8d33e7fff610930abfb403::1226195dcc36824968d71625c558e9d9ebe6d076::
https://api.github.com/repos/python/cpython,17745,master::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.8::skip issue::skip news::type-documentation::,Automerge-Triggered-By: @csabella::,375b29a2e2c9e0a2eeb29d5f64cb916a28cf9eb3::
https://api.github.com/repos/python/cpython,17680,patch-6::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.7::skip issue::skip news::type-documentation::,"""HH"", ""MM"" and ""ffffff"" are enclosed with double back quotes, but ""SS"" is left being bare <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> Automerge-Triggered-By: @Mariatta::",e86673dcd35ff5716c157fcc607d10b51c6db1e8::
https://api.github.com/repos/python/cpython,17620,bpo-39040::master,0,merged,CLA signed::needs backport to 3.8::needs backport to 3.9::type-bugfix::,"In certain malformed content-disposition headers, parameter values are quoted and split as encoded words on two lines with extra whitespaces. This fixes the issue by removing the extra whitespace between the two encoded words. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-39040](https://bugs.python.org/issue39040) --> https://bugs.python.org/issue39040 <!-- /issue-number --> ::I'd prefer to not have a blank line here.::Or here.::'value' in the preceding test names is the value of the header.  The thing being tested here is the value of the parameter.  Confusing, I know :) Also, I suggest spelling out bw, which at least to my eyes isn't obvious: invalid_parameter_value_with_fws_between_ew"". Also, I suggest adding a test with an EW in the middle of regular tokens, to make sure white space that is *not* between EWs is handled correctly.  Your code should, but we want to guard against future breakage.::This isn't specific to the content-disposition header, it applies to any mime header, since in theory any mime header can have paramaters.  So, 'Fix parsing of invalid mime header parameters by...'.::Not quite.  We need a test with something like ""File =?utf-8?q?Name?= With Spaces.pdf"".  That should have spaces around Name...we want to make sure we aren't removing spaces around encoded words that *aren't* next to other encoded words.::Done.::I'm not seeing the changes?::You might be looking at the outdated diff, from a previous commit. There should be 4 commits in the PR, and your requested changes are in the last 2 commits.::",9da6ddfd98454f2c287d46396e3b1a2563ffd7a1::bf2cb76009d72869d9df6550b473b5818ceab311::004f37d7caf7cc0da0bb02062be391045cffba42::016ceb3ef00b3b940993d35d539ce63d68437d4f::
https://api.github.com/repos/python/cpython,17602,travis::master,0,merged,CLA signed::needs backport to 3.6::needs backport to 3.7::needs backport to 3.8::skip news::,I hope this makes Travis more stable. <!-- issue-number: [bpo-39035](https://bugs.python.org/issue39035) --> https://bugs.python.org/issue39035 <!-- /issue-number --> ::,541c602f954c6156ec5e4fdc3f7182e9d34611fe::
https://api.github.com/repos/python/cpython,17595,bpo37228-whatsnew::master,0,merged,CLA signed::needs backport to 3.6::needs backport to 3.7::needs backport to 3.8::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-37228](https://bugs.python.org/issue37228) --> https://bugs.python.org/issue37228 <!-- /issue-number --> ::",d9bb4c177732b49302274d356d6774ecf9b63382::
https://api.github.com/repos/python/cpython,17526,bpo-37404-fix::master,0,closed,CLA signed::awaiting core review::needs backport to 3.8::skip news::,"Fix check for ssl.SSLSocket for Python builds without ssl support. The check is now performed in debug module only so it does not slow down production mode. Fixes: https://bugs.python.org/issue39006 Signed-off-by: Christian Heimes <christian@python.org> <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-37404](https://bugs.python.org/issue37404) --> https://bugs.python.org/issue37404 <!-- /issue-number --> ::",dbad29a686d028881c3d8a0111849bc775740d6d::
https://api.github.com/repos/python/cpython,17518,master::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.7::needs backport to 3.8::,<!-- issue-number: [bpo-38091](https://bugs.python.org/issue38091) --> https://bugs.python.org/issue38091 <!-- /issue-number --> Automerge-Triggered-By: @brettcannon::```suggestion # has_deadlock(); the logic was itself sometimes deadlocking. ```::```suggestion Tweak import deadlock detection code to not deadlock itself. ```::,20595362170ee5511c2244e78c65e27d1b8da74b::ebf8933f45b9a59f845b8f43da774f02449070e7::091d2c973c777502fceb6ac62cea01f6168d4bdf::f3c2b292ae8fb06f6e95a99c73b2e41a33d2468b::1b2dbe4c3a3b9526d7868a09f914f5672e04ea96::9537ff83fa65312271ce4bc21685b3e7b567c71c::e284c35a729c2e7f83c2b0151867a652f2109637::
https://api.github.com/repos/python/cpython,17516,backport-109fc27-3.8::3.8,0,merged,CLA signed::needs backport to 3.7::,https://bugs.python.org/issue38673 (cherry picked from commit 109fc2792a490ee5cd8a423e17d415fbdedec5c8) Co-authored-by: Batuhan Taşkaya <47358913+isidentical@users.noreply.github.com> <!-- issue-number: [bpo-38673](https://bugs.python.org/issue38673) --> https://bugs.python.org/issue38673 <!-- /issue-number --> ::,b5c29921781e008f97bbc71ab35fa7b0554c9eca::
https://api.github.com/repos/python/cpython,17478,patch-2::3.8,0,closed,CLA signed::awaiting review::needs backport to 3.7::needs backport to 3.8::skip news::type-documentation::,"Currently the documentation for z#/y# says they take an int, which is not true with `PY_SSIZE_T_CLEAN`, as I learned from a segfault :) <!-- issue-number: [bpo-37465](https://bugs.python.org/issue37465) --> https://bugs.python.org/issue37465 <!-- /issue-number --> ::",5d61c58f433ab5323efd6a7926e2b8118c674f73::
https://api.github.com/repos/python/cpython,17441,bpo-36470-replace-for-default-init-vars::master,0,closed,CLA signed::awaiting change review::needs backport to 3.7::needs backport to 3.8::,"If a dataclass contain an InitVar, that InitVar must be specified in the call to replace(), unless it has a default value, in which case replace() should not raise a `ValueError` if the value was not specified in the call to replace(). <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-36470](https://bugs.python.org/issue36470) --> https://bugs.python.org/issue36470 <!-- /issue-number --> ::Can you make this a single paragraph? Maybe something simpler like ""Fix dataclasses with InitVars and replace(). Patch by Claudiu Popa.""::I find this test extremely confusing. I think most of the tests should be of the form `self.assertEqual(replace(c, y=4), C(1, 2, 3))`. In other words, all of the fields should be tested.::Remove the `print()` statement.::",2dca685a13c8824565554f612ab35d5d92531ff8::
https://api.github.com/repos/python/cpython,17359,fish-activation::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.6::needs backport to 3.7::needs backport to 3.8::type-documentation::,The previously documented use of `.` is considered deprecated (https://fishshell.com/docs/current/commands.html#source). <!-- issue-number: [bpo-38899](https://bugs.python.org/issue38899) --> https://bugs.python.org/issue38899 <!-- /issue-number --> Automerge-Triggered-By: @brettcannon::,078cc1b2a702a12b7590a15b957b72ba2743c62f::
https://api.github.com/repos/python/cpython,17328,patch-1::master,0,merged,CLA signed::needs backport to 3.8::skip issue::skip news::,In #15823 the pattern was changed from `libpython*.so*` to `*.so*` which matches a bit too greedily for some packagers.  For instance this trips up `debian/README.source`.  A more specific pattern fixes this issue. ::,52531d56eb294bcf6628290b992d4fd8e7cf8cd7::
https://api.github.com/repos/python/cpython,17294,bpo-38841::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.7::type-tests::,on platforms lacking a functional bind() for named unix domain sockets <!-- issue-number: [bpo-38841](https://bugs.python.org/issue38841) --> https://bugs.python.org/issue38841 <!-- /issue-number --> Automerge-Triggered-By: @asvetlov::,b75962f03d2db355d81a6e0a5e2a0d163260da3a::
https://api.github.com/repos/python/cpython,17251,patch-1::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::skip issue::skip news::type-documentation::,"`setattrofunc` [returns](/python/cpython/blob/master/Include/object.h#L161) `int`, not `PyObject *`.::",5da1f88c10b3076c629a269c45c6944006a4857a::
https://api.github.com/repos/python/cpython,17191,bpo-37083::master,0,closed,CLA signed::awaiting review::needs backport to 3.8::skip news::type-documentation::,<!-- issue-number: [bpo-37083](https://bugs.python.org/issue37083) --> https://bugs.python.org/issue37083 <!-- /issue-number --> ::,c55b3c56cc8429408e2f0d64292365b2f529a3dc::985c0f31cd7742fe8dabbcc19dd9ff4ec9706bcd::
https://api.github.com/repos/python/cpython,17034,bpo-38669::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::type-enhancement::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-38669](https://bugs.python.org/issue38669) --> https://bugs.python.org/issue38669 <!-- /issue-number --> ::This is a code path for `mock.patch` . `patch.object` passes a custom getter function which is just an identity function to return the target. The check should be done there. This would also need a test where a string passed to `patch.object` to assert `TypeError` being raised. I can't think of a usecase where someone wants to pass a string and patch it's method. I would wait for others since the doc is clear that an object is needed and if we need to be more strict.::That's the code that is raising an error in my case. Why would it raise the error otherwise?::I did! I passed a string instead of a class, because that's how you would usually patch a function or something else. You pass the string. Like `patch('module.function')`.  ::Can probably simplify this test by replacing the `test` function with ```python self.assertRaises(TypeError, patch.object, 'Something', 'do_something') ``` also, since this is just checking for an error condition, `class Something` can be be removed too.::I think that what @tirkarthi meant is that a user might want to pass an instance of str and patch a method of `str`. But that should probably not be a concern, as even if unlikely, the methods of `str` area all readonly: ``` >>> patch.object(""str_instance"", ""split"").start() Traceback (most recent call last): File ""<stdin>"", line 1, in <module> File ""/opt/bb/lib/python3.7/unittest/mock.py"", line 1450, in start result = self.__enter__() File ""/opt/bb/lib/python3.7/unittest/mock.py"", line 1410, in __enter__ setattr(self.target, self.attribute, new_attr) AttributeError: 'str' object attribute 'split' is read-only ```::target does not need to be a class, it can be an instance of a class, a module or anything else patcheable. Example: ``` >>> import sys >>> patch.object(sys, ""executable"").start() <MagicMock name='executable' id='720575940383700296'> >>> sys.executable <MagicMock name='executable' id='720575940383700296'> ``` I'd rather say something like: `raise TypeError(f""{target!r} must be the actual object to patch, not a `str`"")` That is ""more correct"" and tells the user what to do.::Unnecesary else, the previous if will raise and exit early.::I didn't know know string's attributes are already read-only. Thanks Mario for clarification.::Aah actually, Mario's comment about the message reminds me that we should probably check the message here. Could you use something like https://github.com/python/cpython/blob/fd5c414880b2e05720b9cf14ab0b0d7ae2b7d925/Lib/test/test_named_expressions.py#L17-L18 to make sure we get the expected message for the TypeError?::No need to insert whitespace here. ```suggestion ```::This can be a bit richer: ```suggestion Raise :exc:`TypeError` when patching a string with :meth:`unittest.mock.patch.object`. ```::This one's just personal taste, but I'd prefer to keep this string together (and especially avoid the unnecessary second f-string): ```py raise TypeError( f""{target!r} must be the actual object to be patched, not a str"" ) ```::Could you explain what's wrong with having two f-strings? To know for future.::I am not sure we are patching the string in this case. I'll leave it as you wrote it, I guess you know what you are talking about. But in my opinion we are not patching the string here. We are trying to patch an attribute of an object. It would be more clear to say that Raise :exc:`TypeError` when the target is a string in :meth:`unittest.mock.patch.object`. ::Fair enough – choose whichever you think is better!::My main gripe was that the second string didn't need to be an f-string (there was nothing to be formatted). It's purely a stylistic choice, it all compiles the same!::done::removed::[PEP 8](https://www.python.org/dev/peps/pep-0008/) states that all lines should be limited to 79 chars. Also, you shouldn't prefix a string with `f` if there are no replacement fields. I believe a variable should be used here (so that `'Something'` isn't hardcoded twice).::Agreed on not using `f`-strings here, but I think it's perfectly fine to repeat the use of `'Something'`. It's a fairly straight-forward test and adding in a variable for it doesn't provide much benefit.::Do you want me to remove that f string and use simple string?::",ac815cac8a1b39a3e6862b9035132639d9786147::2dbf0a5ea21d508a646376c1f997f05f616c4cba::92c73517aaf8ff8b352bd6c0826772a8f16e69eb::8d163131e37a522fbeb827cc08ee951a07f83cf2::726c5dfd7d90ca3e6f2987ab22e4c164bf8653a4::16c178b2da29cd70e1903f7d3abd3f7cfd52493a::f03482646282c4422c5fe4315f7761c3783be6cc::d0abbe01c5ad2eded4b029c7b40ed11860ffbbc3::
https://api.github.com/repos/python/cpython,16986,feature/libedit-compat::master,0,merged,CLA signed::needs backport to 3.7::,"If Python is used as a library by a binary linking to libedit, the linker resolves the rl_initialize symbol required by the readline module against libedit instead of libreadline, which leads to a segfault. Take advantage of the existing supporting code to have readline module being compatible with both situations. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-38634](https://bugs.python.org/issue38634) --> https://bugs.python.org/issue38634 <!-- /issue-number --> ::I guess you also ought to remove the ""On OSX"" part from the comment below (line 52, but github won't let me create a comment there).::@labath done.::Hum, even if the case occurs under very specific conditions, I suggest to simplify the NEWS entry. Something like: ``` The :mod:`readline` module now detects if Python is linked to libedit at runtime on all platforms. Previously, the check was only done on macOS. ```::Minor suggestion: ```suggestion * hence we use a runtime check to detect if the Python readlinke module is linked to libedit ```::",b547667415516d31d36b98f8bbdbe9572a15e17f::
https://api.github.com/repos/python/cpython,16847,bpo-38525::master,0,closed,CLA signed::awaiting core review::needs backport to 3.8::,This was a consequence of ``` commit f2a186712bfe726d54723eba37d80c7f0303a50b Author: Inada Naoki <songofacandy@gmail.com> Date:   Tue Mar 12 17:25:44 2019 +0900 [bpo-30040](https://bugs.python.org/issue30040): new empty dict uses key-sharing dict (GH-1080) Sizeof new empty dict becomes 72 bytes from 240 bytes (amd64). It is same size to empty dict created by dict.clear(). ``` and ``` commit 6531bf6309c8fda1954060a0fb5ea930b1efb656 Author: Rémi Lapeyre <remi.lapeyre@henki.fr> Date:   Tue Nov 6 01:38:54 2018 +0100 [bpo-33462](https://bugs.python.org/issue33462): Add __reversed__ to dict and dict views (GH-6827) ``` together. <!-- issue-number: [bpo-38525](https://bugs.python.org/issue38525) --> https://bugs.python.org/issue38525 <!-- /issue-number --> ::,1839235d220e29b58e2af755281dee43e9c4fcb4::
https://api.github.com/repos/python/cpython,16845,master::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.7::,"On Solaris, the regular ""grep"" command may be an old version that fails to search a binary file. We need to use the correct command (ggrep, in our case), which is found by the configure script earlier. <!-- issue-number: [bpo-38527](https://bugs.python.org/issue38527) --> https://bugs.python.org/issue38527 <!-- /issue-number --> Automerge-Triggered-By: @pablogsal::```suggestion Fix configure check on Solaris for ""float word ordering"": sometimes, the correct ""grep"" command was not being used. Patch by Arnon Yaari. ```::",47d66aad7eb95295186ce39a06f0fc419cb68dc3::6b4d4bae54c4545501834fc00ea41161909b391e::b4feaf5490e80bd54c3520d0ab23948ab34f8f5c::
https://api.github.com/repos/python/cpython,16787,bpo-38474::master,0,closed,CLA signed::awaiting review::needs backport to 3.7::needs backport to 3.8::skip news::,<!-- issue-number: [bpo-38474](https://bugs.python.org/issue38474) --> https://bugs.python.org/issue38474 <!-- /issue-number --> ::,aca74b6ccdf12e4361ceea67a2b7e4784bcd0601::
https://api.github.com/repos/python/cpython,16692,3.8-whatsnew-typos::master,0,merged,CLA signed::needs backport to 3.8::skip issue::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> Please add the `skip issue` and `skip news` labels. ::I think this should be: ```suggestion Python now uses the same ABI whether it's built-in release or debug mode. On ```::I think the original is correct. Compare: ""Python is built in release mode."" ::",f3204731a6d1a867b7fe22c16d51814379ab2da3::
https://api.github.com/repos/python/cpython,16621,akuchling-whatsnew-fixes::master,0,closed,CLA signed::awaiting merge::needs backport to 3.8::skip issue::skip news::type-documentation::,"I read through the 3.8 document and fixed various grammar issues.  Also, the library modules weren't quite in alphabetical order, and there was a duplicated idlelib/IDLE section (maybe a merging mishap?), so I rearranged them without making any other textual change in that commit.  This means the PR is likely easier to read if you go commit-by-commit instead of reading the entire diff.::```suggestion :class:`datetime` objects respectively from ISO year, week number, and weekday; ```::The end of this overly long line could be moved to the next line.::```suggestion Emulation, the :class:`Popen` constructor using :func:`os.posix_spawn` no longer raises an ```::Inconsistent change.  'module' is removed from xml.dom.mindom and added to xml.etree.::Done!::It reads best to me to take out the word ""module"" (Also, looking at it again, I noticed that :func:`write` should really be :meth:.  I'll fix that too.)::Done!::emits::preserves::The best spelling is actually Rolodà. Can we use Unicode for names at least?::No -- 'methods' is the plural subject, so it's ""methods X and Y now emit"".::Same thing here -- the subject is 'methods' again, so the sentence runs 'the X, Y, Z methods of U and V, now preserve"", since you'd write ""The methods now preserve ...""::",213254f0a98418628e55518ce474094139b1b971::99770711bc3f60bbba0b08c1b3985100809c4dd3::a05e4effa6f76d169791587829d4b3747d958bd4::4dcd77d2522a95df76ed8c4bf893f1077798fd52::7294545c59140213a3770312796f2f4e1cc3cd88::61889fcad12497050e215bbae6006ff14eeefaff::360f8fb4d151acff9358bc316cf31bec38dec889::
https://api.github.com/repos/python/cpython,16594,pyunicode_checkconsistency::master,0,closed,CLA signed::awaiting merge::needs backport to 3.8::skip news::,"_PyUnicode_CheckConsistency is now defined even without Py_DEBUG set, so get rid of the #define hack that was there to deal with calls in assert statements not explicitly guarded by Py_DEBUG. <!-- issue-number: [bpo-38376](https://bugs.python.org/issue38376) --> https://bugs.python.org/issue38376 <!-- /issue-number --> ::",84875bb814b894483ac53f98822935e83408a751::
https://api.github.com/repos/python/cpython,16558,issue38266::master,0,merged,CLA signed::needs backport to 3.8::,"Reverting the removal of  ``PyThreadState_DeleteCurrent()`` with documentation. <!-- issue-number: [bpo-38266](https://bugs.python.org/issue38266) --> https://bugs.python.org/issue38266 <!-- /issue-number --> ::If we start to ""expose"" this function, would it be possible to be less strict and call PyThreadState_Clear() in PyThreadState_DeleteCurrent()? It sems like calling PyThreadState_Clear() twice is safe.::I don't understand why do you remove this definition: it's still used, no?::The prototype must be: ```suggestion PyAPI_FUNC(void) PyThreadState_DeleteCurrent(void); ```::I prefer to keep _PyThreadState_DeleteCurrent() here. PyThreadState_DeleteCurrent() is only a public helper function, _PyThreadState_DeleteCurrent() is the real implementation.::ditto: keep _PyThreadState_DeleteCurrent()::Please add void to prevent accepting any argument: ```suggestion PyThreadState_DeleteCurrent(void) ```::I am now exposing PyThreadState_DeleteCurrent() instead of the internal  _PyThreadState_DeleteCurrent() I thought. what are you thinking?::I marked https://bugs.python.org/issue38266 as a release blocker, so the PyThreadState_Clear() question can definitely wait after 3.8.0: we can even revisit this in Python 3.9. Let's stick to adding back the function unmodified.::_PyThreadState_DeleteCurrent() has to stay, it's part of https://pythoncapi.readthedocs.io/runtime.html effort to avoid global variables.::nitpick: it seems like you removed a newline or something else. you may revert that.::",b680b9a26cffe3d8071ce0a19a3827d06b24bb2c::7649d8dc93b405a3b2d80ea994bc9ca09b5c5907::7acac6faec4f0a1bc36fcdd542f59d0c6f0b6eb9::0c1a14d6836b50a30bbe77f8bb72de44d3a2add9::c54ccac7a25b801da8c36ce45ddc89804ac81ce3::331040923a8256cfa8d7a8fc04372a44fa740d2e::
https://api.github.com/repos/python/cpython,16535,3.8-whatsnew::master,0,closed,CLA signed::awaiting review::needs backport to 3.8::skip issue::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> This PR is mostly focused on repairing broken Sphinx roles that weren't correctly generating links, but also adds a few new ones and shortens some of the longer ones using `~`. It also includes a few minor grammar corrections and improvements. For comparison, see https://docs.python.org/3.8/whatsnew/3.8.html and build the html locally from this PR. I've verified each of the Sphinx roles that I added locally to ensure the links were properly generated. Also, is there an easy way to add myself to Misc/ACKS just for 3.8 without opening a separate PR? I added in an entry for myself in 3.9 several months ago, but never did it for 3.8. I've had several merged PRs that were backported to 3.8. I was thinking that it might be possible to add it to the backport PR. ::This doesn't read well, probably insert ""An"" as the first word of the sentence.::""as a separate JSON object"" would be better::Move ""silently"" either before ""ignores"" or to the end of the sentence::I agree that the current version doesn't read well, but I would prefer changing ""object"" to ""objects"": ``` Asynchronous code objects marked with the :data:`inspect.CO_COROUTINE` flag may ``` Both options would be grammatically correct, it's fairly subjective. The main reason I'm leaning towards the plural here is because there can be multiple asynchronous code objects marked within the code being compiled, not just one.::Yes, that's better::This looks incorrect: things like `thesis` have plural form `theses`::I think there is a glossary item for dict viewe (can create a reference with the `term` role)::Oh you're correct. I was under the impression that it was `parenthesis` for a single pair of `()` and parentheses referred to multiple pairs of `()`. Apparently, parenthesis refers a single `(` and parentheses refers to a pair `()`. It seems like I was using the wrong form of the word all this time and hadn't noticed, good to know. (:::Yep, looks like there is one https://docs.python.org/3/glossary.html#term-dictionary-view. ```suggestion * :class:`dict` and :term:`dictionary view`s are now iterable in reversed insertion ```::Reverting this change. ```suggestion :keyword:`return` statements no longer requires enclosing parentheses. ```::Looks like that caused it to go over the 80 char limit at 83 chars. I'll adjust the wrapping. ::ReST trick: to avoid having bits dangling out of markup like the plural `s`, there is a way to control the display text separate from the reference: ```rst and :term:`dict views <dictionary view>` ```::Ah I see you found that! :slightly_smiling_face: ::Yep, I vaguely remember reading about it in http://docutils.sourceforge.net/rst.html and used it before for explicit links. So, I tried it out on my local copy of `3.8.rst`, did `make html`, and it worked! (:::",0407b7b7323ef47fd9f2f128b95d0cbc5a91fd22::30129c25c98d962b2768361aa22a2faba6a5fafc::2da2059de4f831054340d9293b3d89af26e2a8d2::a6abf444e50700016de20465aa1606ee35cc28f1::1abee7b36a0c41f7bdfa9f5e242d59bd60b0acc0::a018f9ad34e9062a5aef06ea9bccca0bec35330d::fd6fd07f1b2e6427e93c83086c15de7790a754f5::ad0c22c86d114f1c974963cb80c5915d7314af53::7e9c550dc1988170eb6a51ac8a744363854fd8c8::f101ad177dc51de165f327d8061ac5bac526b5ed::
https://api.github.com/repos/python/cpython,16530,regrtest_lock::master,0,closed,CLA signed::awaiting core review::needs backport to 3.7::needs backport to 3.8::skip news::,"* Add a RLock to TestWorkerProcess to make stop() reliable when regrtest is interrupted by CTRL+c: protect _popen and _killed attributes. * Fix _kill(): don't set _killed to True if _popen is None. * Fix TestWorkerProcess.__repr__(): start_time is only valid if _popen is not None. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-36670](https://bugs.python.org/issue36670) --> https://bugs.python.org/issue36670 <!-- /issue-number --> ::",ecfc734a4299b42aec1530406baf3d871feecdba::aae37a1c8745b35497127c43d8e87f7b52f403a7::
https://api.github.com/repos/python/cpython,16507,issue22377::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.7::needs backport to 3.8::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> This fixes the issue discussed in https://bugs.python.org/issue22377 and fixes it according to the comments made by Paul Ganssle @pganssle * It clarifies which values are acceptable in the table * It extends the note with a clearer information on the valid values <!-- issue-number: [bpo-22377](https://bugs.python.org/issue22377) --> https://bugs.python.org/issue22377 <!-- /issue-number --> Automerge-Triggered-By: @pganssle::Perhaps we should specify that this is for `strptime`? ""Note that `strptime` only accepts certain values for `%Z`: ...""::```suggestion Improves documentation of the values that :meth:`datetime.datetime.strptime` accepts for ``%Z``. Patch by Karl Dubost. ``` Added a bit more detail to the changelog here, and also added your name. If you don't want to be credited, feel free to omit the ""Patch by.."" portion.::Thanks good suggestion. ::thx::I think this wording would be better (the extra ""and"" is throwing me off here): ``` Note that ``strptime`` only accepts certain values for ``%Z``: any value in ``time.tzname`` for your machine's locale and the hard-coded values ``UTC`` and ``GMT``. So someone living in Japan may have ``JST``, ``UTC``, and ``GMT`` as valid values, but probably not ``EST``. ```::@pganssle no problem. Do you want me to rebase the pull request? with only one commit?::did you also scrap `It will return a ``ValueError`` for any invalid strings.` on purpose?::No, I just meant that there doesn't need to be any changes from ""It will return a ``ValueError`` for any invalid strings."" on.::OK I added it back. We are good to go. ::",08c3a1abf843d45109d2a6615144b5130e2769a3::19083a2db4dd14edc63e5acacc8a2376c71a81b9::408f1b7ed473ddfa2d362006930f34490f5e4150::82890ac6dd7eada32e36a37027cc1fba580951f1::9bd924259dba2a823367ec74a9ea44373047e4b8::
https://api.github.com/repos/python/cpython,16477,doc_object.__rpow__::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::skip issue::skip news::type-documentation::,"The parameter list of `object.__rpow__` should be the same as `object.__pow__`. As described in `typeobject.c`: ``` NBSLOT(""__pow__"", nb_power, slot_nb_power, wrap_ternaryfunc, ""__pow__($self, value, mod=None, /)\n--\n\nReturn pow(self, value, mod).""), NBSLOT(""__rpow__"", nb_power, slot_nb_power, wrap_ternaryfunc_r, ""__rpow__($self, value, mod=None, /)\n--\n\nReturn pow(value, self, mod).""), ```::",3fe56ec0e4df6c3b51be42e86df254562ce57671::
https://api.github.com/repos/python/cpython,16428,bpo-38275-fixup::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::skip news::type-tests::,Check presence of SSLContext.minimum_version to make tests pass with old versions of OpenSSL. Signed-off-by: Christian Heimes <christian@python.org> <!-- issue-number: [bpo-38275](https://bugs.python.org/issue38275) --> https://bugs.python.org/issue38275 <!-- /issue-number --> ::,34992cf4c6da7aaecb3acfa73ef06b0bebc3d16f::
https://api.github.com/repos/python/cpython,16420,documentationRepair::master,0,closed,CLA not signed::awaiting review::needs backport to 3.7::needs backport to 3.8::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` issue37883: Added a new method doc to Lock().locked() ``` # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [3.7 - 3.9] Added a new method doc to threading.Lock().locked() (GH-NNNN) ``` GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-37883](https://bugs.python.org/issue37883) --> https://bugs.python.org/issue37883 <!-- /issue-number --> ::```suggestion Return ``True`` when the lock is locked, ``False`` otherwise. ```::",d4017b28480f84f5979850e88b14b04d94d6e0d0::87cd99eaf5725e5ac69b5b035da2365c745708cf::dbfbf80bc580f0a8423c5081aa3fb491c51e8c7f::1886ae0a3ff2b81d95ae1fc36c5d2f81971eb11b::64c4c59c4d27c86fd3630a2ea49ae40ef2a39398::
https://api.github.com/repos/python/cpython,16382,bpo-38270-md5::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.7::type-tests::,Make it easier to run and test Python on systems with restrict crypto policies: * add requires_hashdigest to test.support to check if a hash digest algorithm is available and working * avoid MD5 in test_hmac * replace MD5 with SHA256 in test_tarfile * mark network tests that require MD5 for MD5-based digest auth or CRAM-MD5 <!-- issue-number: [bpo-38270](https://bugs.python.org/issue38270) --> https://bugs.python.org/issue38270 <!-- /issue-number --> Automerge-Triggered-By: @tiran Automerge-Triggered-By: @tiran::You may mention that some tests are updated to use SHA256 rather than MD5.::Done::,2c44f02ab3feb7c32c90c46b348e0329ac9a6b6f::539e24894fad195209c4ea4f04136ebcbd7ced6c::c0532c3ef04b419904dae96ab8a73e3267116dd3::0b213c3b417aadf96cb6a6bdd6a8984244d48e8b::0ad9fe20c9311301a146a0e63617bd528749f44c::
https://api.github.com/repos/python/cpython,16321,feature/38216-putrequest-hooks::master,0,closed,CLA signed::DO-NOT-MERGE::awaiting merge::needs backport to 3.6::needs backport to 3.7::needs backport to 3.8::,"This patch introduces a new semi-private hook for subclasses to override the validation and encoding behavior in `http.client.HTTPConnection.putrequest`, allowing select clients to customize the behavior and implement invalid requests as was possible prior to the patch in [bpo-30458](https://bugs.python.org/issue30458) (for control characters) and prior to Python 3.0 (for encoding). <!-- issue-number: [bpo-38216](https://bugs.python.org/issue38216) --> https://bugs.python.org/issue38216 <!-- /issue-number --> ::This little hanging thing looks weird. Maybe do smth like ```python pattern = client._contains_disallowed_url_pchar_re if match := pattern.search(url): ```::Or just ignore the line length _guideline_ for this one case.::it's fine as is.  using `m` as the name instead of `match` would've been my suggestion. ;)::Rather than requiring people to override the entire def _prepare_path method just to change the encoding it allows (which, as this example shows, means copy and pasting the first part of the implementation), how about making a `._prepare_path_encoding` attribute to the class that could be overridden.  it'd default to `'ascii'` but you would set it to `'utf-8'` in this subclass.  instead of overriding the method.::We can get rid of this comment now.  it was referring to the `.encode('ascii')` that is no longer below.::I considered this, but the proposed change that inspired this change wished to change the invocation of `encode('ascii')` to `encode('ascii', errors='surrogateescape')`, so that seemed like enough of a signal that one might wish to override the encoding process entirely.::Does it still make sense to use `self._prepare_path_encoding` so it's easier to override if that's what someone wants?::i suppose _prepare_path_encoding could be its own method in that case.  I wanted to avoid people needing to duplicate the control characters check for this situation.::",5cc856d4a7fa02de526cccf3bf04b4fe38b559ee::8246dbe59cb1c1f298b78b3b2cee7c4d9a3d098b::4ff5de4ee37bc433e5706ca3cea67266735f3335::a6435066042e0084c728f38329afbb158310aa9f::61a327c3551f72086782aa6b8c17b756e598ec8f::d1026119fd436e386f4c8219690e08160a271be9::020d549f1466d1490eb9c9b20edbf8c4f7ac5894::12ce9423056911a9e941042fd44e86acca465c59::f6a9eae36fa9ceb165a8095dc5235930c3294dc9::
https://api.github.com/repos/python/cpython,16309,asyncio-run-provisional::master,0,closed,CLA signed::awaiting review::expert-asyncio::needs backport to 3.7::needs backport to 3.8::skip issue::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> Based on recommendation from Andrew Svetlov, this removes the provisional note for ``asyncio.run()`` in the documentation page ``asyncio-task.rst``.::",14b337f3cce024e2f2ef55e411fee55a50de6017::3f10b0961a7a6b7c411a712c3cde94bbf8da1439::b89bbf861a9c4ab539d6197861e12643d3b8000a::
https://api.github.com/repos/python/cpython,16251,inputoutupt_improvements::master,0,merged,CLA signed::needs backport to 3.8::skip issue::skip news::type-documentation::,"Just two little improvements: typo and make clear that sprintf is a C function.::Within this context, the sentence is correct with or without the period since it's referring to an example, but I think your change is okay.::+1 on making this section more specific, any reader not familiar with C may not recognize that ``sprintf()`` is a C function. Particularly since this is in the tutorial, this should aim to be a new-user friendly as possible and not expect prior knowledge. As a minor grammar correction, the ""to"" is not needed and the ""a"" should remain. However, I noticed that the sentence seems to run on a bit excessively. The "", and"" part should be split into a second sentence. Additionally, the Sphinx role does not accomplish anything here. This can be seen by referring to the documentation (https://docs.python.org/3.9/tutorial/inputoutput.html#old-string-formatting), it provides no link. Therefore, it should be converted into inline code blocks. Here are the full changes that I would recommend: ``` It interprets the left argument much like a C ``sprintf()``-style format string to be applied to the right argument. Then, the string resulting from the formatting operation is returned. ``` Note: I did not include the word wrapping since I was just focusing on that individual sentence. ::More or less. Periods before an example always ends with a ""."" or with a "":"". Right? I chose the first one for no special reason.::@adorilson: > More or less. Periods before an example always ends with a ""."" or with a "":"". Right? Here are all of the correct ways to use examples within the Python docs (as far as I'm aware): ``` This can be done by simply passing the dict and using square brackets ``'[]'`` to access the keys:: ``` ``` This can be done by simply passing the dict and using square brackets ``'[]'`` to access the keys. For example:: ``` ``` This can be done by simply passing the dict and using square brackets ``'[]'`` to access the keys. :: ``` Those types of formatting corrections aren't worth their own PR, but it can be useful to touch up on them if you're working on a nearby area for something more significant (such as with this PR). The quote used in PEP 8, ""A foolish consistency is the hobgoblin of little minds"", would be applicable to changing a section *exclusively* to use the correct formatting conventions.::I'm accord this a lot > this should aim to be a new-user friendly as possible and not expect prior knowledge. What if we removed the sprintf mention? Something like this: `The % operator (modulo) can also be used for string formatting. Given ``string % values``, % conversion specifications in ``string`` are replaced with zero or more elements of ``values``. This is also known as interpolation operator. For example:` Additionally, this section already has a link to https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting.::@adorilson: > What if we removed the sprintf mention? Something like this: Hmm, this is an interesting idea. String interpolation is a far more universal concept across several languages, and is likely to be more relatable to users of other languages without requiring the prior knowledge. My suggestion would be to change: ``` This is also known as interpolation operator. ``` To this: ``` This operation is commonly known as string interpolation. ``` While ""interpolation operator"" is not incorrect, I've seen ""string interpolation"" mentioned far more commonly. See https://en.wikipedia.org/wiki/String_interpolation and https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated. In any search engine, using the query ``string interpolation <language>`` is pretty much guaranteed to find the correct results for any widely used programming language. Also as a more minor suggestion, I would recommend changing: ``` Given ``string % values``, % conversion specifications in ``string`` are replaced with zero or more elements of ``values``. ``` To this: ``` Given ``'string' % values``, instances of ``%`` in ``string`` are replaced with zero or more elements of ``values``. ``` I think this phrasing will make a bit more sense to readers and adds a bit of clarity with the formatting. Good idea overall though, I'm definitely on board with it myself. +1::Great. I will do this. But, I have a question. In my local branch, Do I must revert this commit or just add a new?::@adorilson: > In my local branch, Do I must revert this commit or just add a new? Either way works. Since this will all get squashed into a single commit when/if the PR is merged, the actual commit log within the PR branch doesn't matter much. I usually prefer to add commits so that I can revert back to it at a later point in time if needed, but it's up to personal preference. ::@aeros167 It's done. Thanks for suggestions. ::",b02c29200fddb7f68415badd4c87da07ced032d8::2b03f5e00bf5ff7b1b9cff4cd83510fddcb47101::b0dd895218dc9c5a9eedddfcd89bb8ec695be18c::
https://api.github.com/repos/python/cpython,16198,bbtest::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::type-tests::,"It no longer tries to create or access .idlerc or any files within. Users must run IDLE to discover problems with saving settings. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-38183](https://bugs.python.org/issue38183) --> https://bugs.python.org/issue38183 <!-- /issue-number --> ::",778fba1bc6a1bee1a46ca729096b418d62a8eddc::634ca2d07bd8f4b2b53de951123ad2cbb9ed6b50::d32b731ce5cac17a79387a3e47b720c0983b03aa::e8eab736b8d90d5b9c0cb51b0851d482368e8a90::0d97eba3d4c9d1ae4e19bd8f93fa29c9b0930c5d::41e76773acc1b8ac1bdb392d72efef8dff9bf74d::d8ae566f1141c14998aa44fd71cedefd24a12ada::
https://api.github.com/repos/python/cpython,16168,ccosscpython::master,0,merged,CLA signed::needs backport to 3.7::skip news::,"Spelling error in unittest.mock code Spelling correction in the unittest.mock library, ""return_calulator"" replaced with ""return_calculator"" in the `_set_return_value` method in `Lib/unittest/mock.py`. <!-- issue-number: [bpo-38100](https://bugs.python.org/issue38100) --> https://bugs.python.org/issue38100 <!-- /issue-number --> ::",2e0a922abecbcf50a955de2add7d7127af754169::
https://api.github.com/repos/python/cpython,16148,bpo-38164-polishing-asyncio-Streams-API::master,0,closed,CLA signed::awaiting core review::expert-asyncio::needs backport to 3.8::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-38164](https://bugs.python.org/issue38164) --> https://bugs.python.org/issue38164 <!-- /issue-number --> ::",1a801bd50dd4be9f0f901852eaca407b0cd4df01::
https://api.github.com/repos/python/cpython,16064,backport-8ed6503-3.8::3.8,1,merged,CLA signed::,* [bpo-38121](https://bugs.python.org/issue38121): Sync importlib.metadata with 0.22 backport (cherry picked from commit 8ed6503eca4e3ea4949479d8d7fd9ffd54f81038) Co-authored-by: Jason R. Coombs <jaraco@jaraco.com> <!-- issue-number: [bpo-38121](https://bugs.python.org/issue38121) --> https://bugs.python.org/issue38121 <!-- /issue-number --> ::,3e206f4e1858fd4093124c8780f5021574b51d9d::
https://api.github.com/repos/python/cpython,15993,feature/importlib-metadata-0.22::master,0,merged,CLA signed::,"<!-- issue-number: [bpo-38121](https://bugs.python.org/issue38121) --> https://bugs.python.org/issue38121 <!-- /issue-number --> ::This needs to `return` the result of this call, I've pushed a commit fixing it.::What is this?::This disables a workaround present in the importlib_metadata code for a bug in PyPy. I’ve coded it this way to avoid interacting with the code line itself to aid in merges.::Ah, that makes sense. Was just checking to see if this got checked in by accident.::",d3b76ca5aa8e01e2ae3a535a8ede9a414429efd7::c4c4e2ac74f6f27621e748b0f4aedfd2590a2761::17ece398082335f5e6560fd21fad693e6bb5a67a::
https://api.github.com/repos/python/cpython,15970,lnotab::master,0,closed,CLA signed::awaiting core review::needs backport to 3.8::type-bugfix::,"Fix [bpo-38115](https://bugs.python.org/issue38115), a bug in the peephole optimizer that caused lnotab to have invalid bytecode offsets when the optimizer got rid of the last line(s) of a function. Also fix a bug where the optimizer bails out of optimization but leaves the lnotab modified. This is a very old bug, but before 3.8 the optimizer is more likely to successfully optimize away the last line of a function. These don't change the *bytecode* that's generated, but they do change the *code objects* (the co_lnotab attribute), so though they theoretically affect Python 3.7 and earlier, we shouldn't backport this beyond 3.8. (Also, if you want to verify this manually, don't forget to touch the .py file or delete the .pyc file... not that I'm speaking of personal experience or anything.) <!-- issue-number: [bpo-38115](https://bugs.python.org/issue38115) --> https://bugs.python.org/issue38115 <!-- /issue-number --> ::",e95ddd6b82e0dec77ed4595fe8de90cb1242a35d::a64fc3ca90d3dd45455f5df5908857bcd5682ad4::d870d185f3d7e5228434d5f11679ca794fbcc9be::8b74c424ba4b2fabc938a20f2df5ad3d3455ff68::11433f2558adaa4e66c9dabdf5bcac3471720ff7::069b41806e95b12f902105517a0d9e25280f1604::
https://api.github.com/repos/python/cpython,15890,bpo35784::master,0,closed,CLA signed::DO-NOT-MERGE::awaiting merge::needs backport to 3.7::needs backport to 3.8::skip news::type-documentation::,"Updating documentation for hashlib.new(), including Doc/library/hashlib.rst and the docstring in Lib/hashlib.py. https://bugs.python.org/issue35784 <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-35784](https://bugs.python.org/issue35784) --> https://bugs.python.org/issue35784 <!-- /issue-number --> ::",13e11947e0fc6d86eb8c08942b838e294ee9403e::ead90c37e049131ad3fadf19c514782cd7dc023e::
https://api.github.com/repos/python/cpython,15862,bpo-37913-3.8::3.8,0,merged,CLA signed::needs backport to 3.7::skip news::type-documentation::,<!-- issue-number: [bpo-37913](https://bugs.python.org/issue37913) --> https://bugs.python.org/issue37913 <!-- /issue-number --> ::,538e2ab799514e87bfcdeedd8ecce4071ba019d7::
https://api.github.com/repos/python/cpython,15827,ci-coverage::master,0,closed,CLA signed::awaiting core review::needs backport to 3.7::needs backport to 3.8::,* Update VM names to use `*-latest` format * Make macOS tests optional and have a shorter timeout * Fix some test issues related to path casing::,24058b57859b7674676b5ca3cd0aae61f7565191::1065dc27c6beedfda37d1bd1565ed5cf2c451902::285868bce318bf8329fda9ce00a73abde4cfd9a7::e7e1620d04bc9ed77469fa379482bc7ef290333b::4aba3dd80b896d9d6dfe8a07f018ae8231906ecc::56fdef257b9af8cccfecf9b96c069289f35af3fe::fa82bfd60cceb5b2dd1b3b9039a110dd66505d06::7fcdd2b526c1e31b3758f67dadc3b8945afc115b::777d4fddf4cf1f929046579c1f58c51f3d4bac79::4639b161186a11617020fda90ced301a504ef0d2::
https://api.github.com/repos/python/cpython,15751,test_socket_discovery::master,0,closed,CLA signed::awaiting merge::needs backport to 3.8::skip news::type-tests::,Remove test_main() from test_socket: use setUpModule() with tearDownModule() and unittest.main() to discover automatically test cases. Reorder also imports. <!-- issue-number: [bpo-38063](https://bugs.python.org/issue38063) --> https://bugs.python.org/issue38063 <!-- /issue-number --> ::,a66bd5f26547f35471fa1bccd2066db4b09eeb06::
https://api.github.com/repos/python/cpython,15721,patch-1::master,0,closed,CLA signed::awaiting review::needs backport to 3.8::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> This breaks cross compiling because unexpected host header paths are added. <!-- issue-number: [bpo-38047](https://bugs.python.org/issue38047) --> https://bugs.python.org/issue38047 <!-- /issue-number --> ::",2638d0cf21c952290ac30b881f214074532f29ef::
https://api.github.com/repos/python/cpython,15701,ref_leak::master,0,closed,CLA signed::awaiting merge::needs backport to 3.8::type-bugfix::,"Only 3.8 and 3.9 branches are affected. <!-- issue-number: [bpo-38037](https://bugs.python.org/issue38037) --> https://bugs.python.org/issue38037 <!-- /issue-number --> ::Would you mind to add { ... } to the 3 modified if blocks?::I suggest: ```suggestion Fix reference counters in the :mod:`signal` module. ```::The  ``Py_INCREF()`` is needed because PyModule_AddObject() PyModule_AddObject leaves the reference counter unchanged as @vstinner said but IIRC, the ``Py_DECREF()`` was called outside the conditionals. Shouldn't we keep it there still?  [See this diff ](https://github.com/python/cpython/commit/9541bd321a94f13dc41163a5d7a1a847816fac84)::same here.::`PyModule_AddObject()` function only `Py_DECREF(o)` when the object is successfully added, see: https://github.com/python/cpython/blob/v3.8.0b4/Python/modsupport.c#L654 So it's correct to stay here, it balances the `Py_INCREF(o)` before `PyModule_AddObject()`. Other call sites also do it like this: https://github.com/python/cpython/blob/v3.8.0b4/Modules/_io/_iomodule.c#L678-L685 https://github.com/python/cpython/blob/v3.8.0b4/Modules/_asynciomodule.c#L3392-L3408 ::@nanjekyejoannah: Py_DECREF(IgnoreHandler); here is correct.::",3b768dbbb2a7965157f89404aa6c5fdcce3ffbc4::27beec8bf75c8e583aae947ec1ef422637ffd5e6::c3a436bb369c7535aa579473dfeb23a7fd06f950::a0f335c74c2e8a6544b75f30c1791d0a7c3d41a8::211fb1a0d44cecf2db3763f9f04a38df2b552846::1bebb4db87cdbcfb4c6558da0dd55961141ba041::
https://api.github.com/repos/python/cpython,15664,bpo-38022/idle-help-html-upgrade::master,0,merged,CLA signed::needs backport to 3.8::skip news::type-enhancement::,"This is done by making `HelpParser` properly handle the slightly different HTML. This required two changes: 1. Avoid additional empty lines for `<p>` tags inside list items (e.g. `<li>`). This is achieved by avoiding starting a new block of text for `<p>` tags if they come after an opening tag. 2. Avoid an extra empty line after `<pre>` tags. This is requried because `<pre>` tags need a newline at the end for them to be displayed properly. Achieved by adding only a single newline if the previous line is empty or entirely white-space. Also, note the removal of the `class_ != 'first'` check for `<p>` tags. This is because the new HTML output no longer includes ""first"" classes on tags. <!-- issue-number: [bpo-38022](https://bugs.python.org/issue38022) --> https://bugs.python.org/issue38022 <!-- /issue-number --> ::",0a0b96fc47f443439bfaa96cf7be1012d240faba::
https://api.github.com/repos/python/cpython,15662,fix-issue-38018::master,0,merged,CLA signed::needs backport to 3.8::type-tests::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-38018](https://bugs.python.org/issue38018) --> https://bugs.python.org/issue38018 <!-- /issue-number --> ::",7af3ca36a9dcc3cd84c9a2750f53bf5caff45d32::e56fcc581fcb749630eb056e9cc95df2f7f4f693::
https://api.github.com/repos/python/cpython,15628,issue37953_forwardref_equal::master,0,closed,CLA signed::awaiting core review::needs backport to 3.7::needs backport to 3.8::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-37953](https://bugs.python.org/issue37953) --> https://bugs.python.org/issue37953 <!-- /issue-number --> ::This whole bit can be sped up by just replacing it with: ```py return tuple(dict.fromkeys(params)) ```::Thanks, I will add some tests. By the way, `params` is a list, `tuple(dict.fromkeys(params))` seems not faster than `tuple(params)`, I think it would be better to keep `tuple(params)`: ![20190901004654](https://user-images.githubusercontent.com/7546325/64066889-084a9180-cc52-11e9-992b-2895e4a4474e.png) ::Sorry, I should have been clearer! I meant replacing this whole list + loop bit with that one line. `dict.fromkeys` is a nice shortcut to remove duplicates while preserving order.::Ah... I see now. You're trying to avoid the (broken) hashing. I don't know how I feel about that. I think hashing should be fixed rather than just sidestepped here, since it's so tied to equality. At this point I'm actually in favor of a hybrid approach: combining your fix for `__eq__` and the other PR #15400’s fix for `__hash__`. @gvanrossum and @ilevkivskyi, thoughts?::@hongweipeng you can revert your most recent commit (3676a50, “code review”). My comment was misguided!::TBH this looks like a hack. If at some point we would make sets ordered the same way as dicts are, it would be good to update the code, but currently I think I like the old way more.::",2b622f2c57f765c3f105bd7a56ca7d0612482b6e::45c3eb842393dff4c043d8f17f6536716ffa6bf4::ca1b8e35a035dbe6e3f8b2affd20c53cabdb3560::3676a50e7cfc364d5b8b77a85901696ceb393e14::
https://api.github.com/repos/python/cpython,15604,patch-1::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.8::skip issue::skip news::type-documentation::,"-`""""""` over `'''` -no blank line either before or after the docstring. -place the closing quotes on a line by themselves Automerge-Triggered-By: @gvanrossum::https://www.python.org/dev/peps/pep-0008/#maximum-line-length It said `For flowing long blocks of text with fewer structural restrictions (docstrings or comments), the line length should be limited to 72 characters.` It looks like a good time to update docstring to follow this limit.::same here::Changing the single quotes to double quotes and modifying the spacing are exclusively formatting changes, so this can be removed.::This change is good, ``FTP.__init__`` is a public method and didn't have a docstring previously.::Here's another example of something that's exclusively a formatting change.::Here's another example of something that's exclusively a formatting change.::@alanyee Please follow @aeros167 's feedback. I think that @aeros167  's feedback is the right way for this moment.::```suggestion Initialize host to localhost, port to standard ftp port. ```::```suggestion and user, passwd, acct (for login()). ```::",16a19267cfe24ba2ecd9256e41c5f79289db3980::737a260b98c6cd8435125a1f34922b539a442549::d97616c49a55457efb81b79bb3c116c157d96403::fee51e06b4560668a2f554d17c926f82bed503ea::d71f89d253b78409ecb4118c48f9a4a388417515::
https://api.github.com/repos/python/cpython,15541,pr-unicode-example::master,0,merged,CLA signed::needs backport to 3.7::skip issue::skip news::type-documentation::,"We had the character Ⅶ aka U+2166 ROMAN NUMERAL SEVEN, but the code point given is 2167 and it's next to 2168.  Adjust so the code point, character, and name all agree.  (This follows up on 77df9a157, which made the name match the character.) We also had a mixture of `;` and `:` for a delimiter. It doesn't really matter which, but it's good to be consistent. The actual Unicode database files use `;`, so go with that. ::",6c85bb0f2065cf2f18c892435ad50378f2bd5974::
https://api.github.com/repos/python/cpython,15493,issue37806-get_type_hints::master,0,closed,CLA signed::awaiting core review::needs backport to 3.8::type-bugfix::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-37806](https://bugs.python.org/issue37806) --> https://bugs.python.org/issue37806 <!-- /issue-number --> ::This news entry can be condensed onto one line, the max character width for reST is 80. Also, I would recommend adding a Sphinx role to link to the documentation for [typing.get_type_hints](https://docs.python.org/3/library/typing.html#typing.get_type_hints). This can still fit on one line (exactly 80 chars in total). ```suggestion Fix infinite recursion from :func:`typing.get_type_hints`. Patch by hongweipeng. ```::See comment above, this line can be condensed into the above line. ```suggestion ```::Ok,thanks.::",d09457b158254620ff1df0467070cb06e61d5961::b727c2a114d9ad840876070607f60203791cf557::
https://api.github.com/repos/python/cpython,15477,bpo-34679::master,0,closed,CLA signed::OS-windows::awaiting review::expert-asyncio::needs backport to 3.8::skip news::type-bugfix::,Adds a conditional to BaseProactorEventLoop.\_\_init\_\_() to only call set_wakeup_fd() if the current thread is the main thread. Fixes asyncio Windows (this error only occurs on Windows) ValueError (see bpo issue comments). <!-- issue-number: [bpo-34679](https://bugs.python.org/issue34679) --> https://bugs.python.org/issue34679 <!-- /issue-number --> ::,7fe03843a4f6f88d922a5f07056924ec187c778b::
https://api.github.com/repos/python/cpython,15474,idle-shell-sidebar::master,0,closed,CLA signed::DO-NOT-MERGE::awaiting change review::needs backport to 3.8::needs backport to 3.9::type-enhancement::,"This is a working implementation of a sidebar for IDLE's shell, removing the prompts from the main text widget (except for special prompts such as the one used by the debugger.) It works very well in my testing. __Please give this a try and let me know what you think!__ Currently known to be missing: 1. handling of left mouse button clicks/drags on the sidebar Notes on the implementation: * I mostly made each change in a separate commit to make reviewing easier. * This does *not* use the same base-class as the editor line-numbers sidebar, because it uses a canvas widget rather than a text widget. This is needed due to the shell soft-wrapping lines, causing lines to have varied height. Also, Squeezer inserts buttons into the shell's text window, and those lines have a different height as well. * This includes quite a bit of work to get the ""stdin"" tag applied consistently to user input, which was rather broken but not relied on for anything. (Actually, this fixes the ""recall"" functionality in some edge cases.) * Removing prompts from the text widget made knowing where each statement started impossible, but the sidebar needs to know this. This PR adds the ""console"" tag to the newline before each statement to overcome this. * Removing prompts has other side effects which needed to be addressed. For example, successive statements without output now create a single long range of input tagged ""stdin"", which required some changes to the `recall()` method. <!-- issue-number: [bpo-37903](https://bugs.python.org/issue37903) --> https://bugs.python.org/issue37903 <!-- /issue-number --> ::Unlike tab indents, these changes, in particular the movement of 'hit' retrieval don't seem even indirectly related to the sidebar.  I can't see the net changes as an improvement.  ::This confuses me. The name is misleading, as it should be 'get_hit_colors'.  It is a one-line function used only twice that for some reason singles out only one of the theme elements.  It is not a method (we need to discuss this point), and if it is be extracted, it should be a function defined in config after idleConf.::We do not routinely use assert.  Why here?  The lack of docstring and tests?  Bad design such that bad calls do not otherwise fail?  If filter is not a Delegator, would not filter.setdelegate fail?  If so, no check is needed here. The advice I have seen is that assert, which can be optimized away, should only be used to check internal logic.  I guess the question is where the boundary of internal for IDLE.  If we do use assert, we should make sure it will be executed during testing. ::Assert strikes me as an odd (confusing) way to end a loop.  More normal: ```suggestion while f is not after and f is not self.bottom: ``` followed after the loop by if f is self.bottom: raise ValueError(""after must be in the delegator chain"")::If editor needs the 'hit' colors, why not add it to self.color_config?::What would be the manual test of this change?::If I understand correctly, you moved the non-code colors from this ColorDelegator subclass to the Shell editor subclass because the colorizer does not use them and need not know about them.::It would be clearer to just add a line at the end: `            ""hit"": idleConf.GetHightlight(theme, ""hit""),::I skipped this block for now.::I believe the addition of 'stdin' tags has something to do with the background change I mentioned in point 3.  But I am not concerned about it now.::This is pretty useless.  PyShell is initialized with ``` self.sys_ps1 = sys.ps1 if hasattr(sys, 'ps1') else '>>> ' self.prompt_last_line = self.sys_ps1.split('\n')[-1] self.prompt = self.sys_ps1  # Changes when debug active ``` The only way I know to either reset or delete sys.ps1 and start IDLE in the same process is to do so in python code and then `import idlelib.idle`.  Under normal circumstances, self.sys_ps1 exists, is not '', and and after the following code, equals self.prompt and self.prompt_last_line. The new conditional will trigger once and clear the prompt to '' (or remove it from 'DEBUG ON\n'.   The conditional will never trigger again.  After it is cleared, the only possible 'prompt' within the text box is ""DEBUG ON\n"" .  (I don't think it should be a repeated prompt -- another issue.)  So we should remove sys_ps1.  Until we remove the debug prompt, we should just initialize self.prompt it to ''. self.prompt_last_line is more problematical.  It should be set to '' or better deleted, but it is used (only) in EditorWindow to indicate ""isinstance(self, PyShell)"" and affect backspace and HOME.  (The assumption is that it is never '' in Shell, but it will be if sys.ps1 ends with '\n'.)  The uses of prompt_last_line need to be reviewed to remove uses of the string as a string and replace it with a boolean where the indicator is still needed.  (I started on this.)::The docstrings violate pep8 and only 1 function is needed. ``` def get_lineno(text, idex='end-1c'): ""Return line number in text of idex, which default to the last line"" return int(float(text.index(idex)))::This or something like it would seem useful in pyshell too.  Yet another spinoff.::'extensions is not the right word anymore. I am stopping here for now.::@terryjreedy: >  It is not a method (we need to discuss this point), and if it is be extracted, it should be a function defined in config after idleConf. I'm not sure that I understand what you mean here. Do you mean that it shouldn't be a method? From my understanding, in the current implementation @taleinat is using, ``get_tag_colors`` would definitely be considered a method, as it contains a ``self`` parameter and is being used within the ``EditorWindow`` class. I don't mean to nitpick at all here, I was just a bit confused and wanted to make sure that I'm not misunderstanding what you meant. ::Note that PyShell extends this method. This is intended as a way for sub-classes to add tag coloring definitions, and PyShell uses it to define colorings for the ""console"", ""stdout"", ""stderr"" and ""stdin"" tags. In the existing codebase (before this PR), these (and ""hit"") were shoved into ColorDelegator, which had the unfortunate side-effect of ColorDelegator clearing these tags whenever it re-colorized a block of code. This is a bug, resulting from mixing tags used only for syntax highlighting (which can be safely cleared and set again later) with other tags. This PR needs this bug fixed to keep these tags in place, especially the ""console"" and ""stdin"" tags which it uses to recognize prompts and user inputs.::See my other comment, regarding `get_tag_colors()`, explaining this.::> We do not routinely use assert. Why here? ... I simply mirrored the existing use in `Percolator.insertfilter()`, to which this is very similar.::@terryjreedy: > 'extensions is not the right word anymore. Would the correct term here be ""derived class""? That seems to be the term used in https://docs.python.org/3.9/tutorial/classes.html, but there may a better word to use that would be more specific to this context. If ""extensions"" is no longer the correct term to use, the documentation for IDLE should probably be updated accordingly https://docs.python.org/3.9/library/idle.html?highlight=extensions. Unless the documentation is referring to something different from what the code comment is referring to. Also, minor grammar nit: ""that"" is more correct than ""which"" in this context. ```suggestion The base class for derived classes that require a sidebar. ```::See my other comment, regarding `get_tag_colors()`, explaining this.::Note that this mirrors the very similar piece of logic in `Percolator.removefilter()`. The assert isn't ending the loop. The code is kept simpler by assuming that `after` is in the percolator; this simply validates that. My understanding is that this is done in hope that this will catch bugs early enough in the development process. I agree, more generally, that Percolator should be made safer and better tested, or removed entirely in favor of refactoring to a less confusing design. However, given its current state, I believe that this change is in line with the ""status quo"".::See my other comment, regarding `get_tag_colors()`, explaining this. In a sentence, this is indeed proper separation of concerns, but more importantly this fixes a nasty bug.::In the shell, write some code, delete some of it, then undo the deletion. The ""stdin"" tag should be present on the restored input.::You mean overriding the parent class's method rather than extending it? Isn't that a recipe for future bugs in later changes to `EditorWindow` or other classes in the hierarchy?::Indeed, this is needed to support custom prompts, as currently used only by the debugger (and possibly by extensions). I was aiming to change as little as possible. The places where `prompt_last_line` is used are rather delicate, and changing them could requiring making other related changes... @terryjreedy, are you sure you want this as part of this PR?::I guess it's a matter of style, but IMO having `get_lineno()` return the last line number by default isn't an intuitive default behavior. It feels like favoring conciseness over clarity, which I usually try to avoid.::Indeed!::@terryjreedy: > The docstrings violate pep8 As far as I can tell, this would not be in violation of [PEP-257's section on one line docstrings](https://www.python.org/dev/peps/pep-0257/#one-line-docstrings) though. PEP-257 is main authority on docstrings. If anything, it indicates that triple quotes are preferable over single quotes: > Triple quotes are used even though the string fits on one line. This makes it easy to later expand it. ::I completely agree that colorizer should not delete tags that are needed but not restored by colorizer.  But I don't think that this ever happens with 'hit' as it is only used while modal dialogs are open.  So no fix is needed for 'hit' now. The irony of this discussion about the 'hit' (found) tag is that, on Windows at least, it is effectively unused by ReplaceDialog since hits are first tagged with the select tag so that the hit tag is ignored.  (At least on Windows, debugger uses it instead of the selection tag as Windows does not allow selections in inactive windows.  )  I think it should be used and visible in find, replace, and grep, but this is obviously another issue. As long as 'hit' is not used by pyshell, it has nothing to do with this issue and partially fixing it, but not really  fixing it, is a distraction.  So let's delete the 'hit' changes.  If we really fix 'hit', we might treat it separately, perhaps in searchbase, much as 'breakpoint' is.  The most we might do here is add a TODO comment here about moving it someday so that colorizer does not delete it, should that become possible. I should have suggested two weeks ago that the minimal coloring fixes that *are*needed for Shell be split off into a separate PR to be discussed and merged first.  Too late now, but it is a somewhat separate discussion.::A better answer, which I had forgotten, is that color_config sets text color options,  and only those, and 'hit' has nothing to do with them.  It has nothing to do with this issue.::@aeros167 The self parameter is not used, which means it could be removed.  It could be retained as a staticmethod but I don't believe in that (another discussion for another time. ::If we needed to do anything about 'hit' (which we don't), I would prefer to put one combined line where the two calls are.  PyShell does not use this method for the PyShell tags.  The super call in the PyShell code depends on a broken inheritance structure that I intend to change. ::See next response.::It is hard to review diffs to code that needs an overhaul.  So leave what you did until then.::The 'stdin' is a null tag that currently has no effect.  So its presence is invisible.  This patch appears to change the stdin background so that it is not longer the default text background which is the normal text background.  But I do not yet see how this happens.  This is the 'background glitch' I mentioned.::The parent class of PyShell should not have Editor-only specializations that have to be undone by subclasses.  Depending of this broken structure is also a recipe for future bugs ;-).  Anyway, this is a moot point if we leave 'hit' alone.::Setting self.prompt directly to '' is less change that setting it to '>>>' and then correcting it to ''.  Either way, the debugger will add and delete its notice. prompt_last_line is a separate issue.  Giving it a now incorrect value is what strikes me as dangerous.  Maybe it never matters, maybe it will in certain situations.::PEP-257 says that docstrings should begin with a command verb, usually 'Return', occasionally something else. `""Return x""` is common in the stdlib.  `""""""Return x""""""` takes 4 extra spaces, which might be needed, and to me is too heavy for a single line. `get_end_linenumber(text)` is only 5 chars shorter than `get_lineno(text, 'end-1c')`.  Hardly enough to justify a new function called 3 times.  How about adding `END =  'end-1c'` and making the calls  `get_lineno(text, END)`?::See `idlelib/config_extensions.def` for the meaning of 'extensions'.  Many IDLE features were once implemented as extensions but no longer.::Docstrings should not start with quotes-only on the first line.  Delete both and ```suggestion ""A base class for sidebars using Text."" ```::```suggestion root.withdraw() ``` Tests still pass without extra window.::'IDLE Convention', Test at end: ```suggestion class ShellSidebarTest(unittest.TestCase): ```::Except for assert methods, please stick with PEP8 and current IDLE convention for function names. ```suggestion def get_shellline_ycoords(self): ``` Etcetera::```suggestion # Block statements are not indented here because IDLE auto-indents. ``` PEP8 comments.::```suggestion """"""Test sidebar, coverage 84%"""""" ``` On my machine it was 91% today before patch.::Since this PR requires the removal of the shell tags from the colorizer's `tag_defs`, and the refactoring that entails, removing ""hit"" which obviously shouldn't be there was a simple and obvious fix. I'll revert it with a comment if you prefer. (I will mention that this will affect my PR replacing the search/replace dialogs with a toolbar: GH-9855).::Good catch!::Bah, sorry, silly mistake!::I hope to increase coverage before this is merged by adding more tests. So let's not make this change quite yet.::Done.::I've removed the `get_tag_colors()` method.::Good point.::This module currently consistently uses triple-quotes even for single-line doc-strings. I'd be happy to change that in a follow-up PR, but I think it's better to avoid making more widespread changes in this (already large) PR, and I wouldn't want to break the current consistency.::Fine.  We can leave this unresolved as a reminder.::Leave the triple quote if you prefer and space allows.  I am more concerned about an unneeded quarter-liner.::Start with verb, end line with period. ```suggestion """"""Handle <<squeeze-current-text>> pseudoevent. ``` Brackets could be left off.::I left a comment on your toolbar issue.  With the comment added and 'hit' left, we can resolve this for now.::Done.::I've updated this now that I'm done removing dead code and adding tests (now at 96%).::",7adb9add69ecfb217ffc301d937db65bf2a356fe::26bbaec0a50f70f8b641e5699c6984de8a1d2824::9076da5661c46bfe49617d643fbbbd97cfb236f0::cad2cd1496480d238ef92bd56dfa6ca5208d23df::4040e26c4c1e2b46c731b97d6625ee35b454ccfc::9b31031896964f5853d0f7d63ba83ac7bffc23c7::37a0db3c9c3981557e2bffff5146e0f14609c81b::c7668222b524d89c0f55a5db82969ea3dfbcdbad::50bd0820bc12c1477321859b27e8ab89e5afcd03::6f186f09c1325a1e2a0d3f0d2f8292f917c5c69d::f7f3de9964d65d0a59cfd3c46886e7a54a0774e1::e929ea763488418e60ba28af5964252ade5150c6::d04bfa31b4b867eef943d9b2efa0608fcf652b39::81f48522b8764636014c8bec6d96c6e9f5146678::46be85e1c26d7f93d14b4d3215842cc3d9b4b59b::1fc4bcbc998fef39163f7a1945ec347b882c45f6::6f1c9758a3029ab080d76667626d2f4001163050::083fedeea74774a1b3422b0824125eb7ac8f9d4f::4ad72a1cd94e9d6f985cfb5f99124cebfb17d35e::009e08d0493dd56657dc091a080aa19c2c3386f4::e524cceec38c60afd79c9d34a97f466c0571a555::3ea29865162ed5aacb82ee189c66c8ebbf3f8b3f::7f9182f7c15d52acc0721777e9e961f4efd61952::10aaf1d96dd59f136e5447ca82dcf7e3ef3cbe5f::7c919018b56ec0fc49eaf890fa071ffd6e6ab52b::50ca9c6b1e68f39ab6b83bae900c21d8d550ef19::23c218f93c865c648fec0aaf4bbb348fb7d6682c::6cef0a934e6012b08848eea8ca01c40bd4d9b875::a01813543f3d350d7d0f94e054008053206b22e0::525fe440dcc59c295f3875024716a55d2050c808::7b8913d4506699e3cf18f4f033372e2cf005b786::8c8d0c0ab5878af3cc1b71530e0a2e83e9dffe8e::7ecc84374a91b7f752992a94a023c51fdecf55eb::bedb1cb4511a0c342782ed6988e24124b590335f::eee045381231e8a3a5c4886f2a159440ad2e51ba::7afcb57faaa21f6e0f474ff31c512350026ef615::8a7dd607216826b275af204e2f6fb62b9151363a::6efb9685d2c483bda3cb95333be24670e92b6539::cc3792415760a72e2759a8913028ad3e7aee93b1::97576daf75a1146d3e09901f698faa0f571e4e5f::2aa4e1abe308c7e396b44f6ceba75140e3c6fddb::71f343eaa0555a04cde2ded75a7920f59b0205da::
https://api.github.com/repos/python/cpython,15428,issue37931-osx-environ-crash-fix::master,0,merged,CLA signed::needs backport to 3.7::,"On most platforms, the `environ` symbol is accessible everywhere. In a dylib on OSX, it's not easily accessible, you need to find it with _NSGetEnviron. The code was caching the *value* of environ. But a setenv can change the value, leaving garbage at the old value. Fix: don't cache the value of environ, just read it every time. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-37931](https://bugs.python.org/issue37931) --> https://bugs.python.org/issue37931 <!-- /issue-number --> ::It is possible to simplify the rest of the code by doing: `#define environ (*_NSGetEnviron())` Then the new block at line 1398 can be dropped entirely. ::See my previous comment. This block can be removed when using the \#define I mention there.::You should mention Benoît Hudson.::I prefer to see an explicit _NSGetEnviron() rather than macros black magic.::Neither option is obviously better. Just calling _NSGetEnviron does make it more explicit what's going on.::See resolved comments below. Victor prefers an explicit call to _NSGetEnvironment.::Given the other `#ifdef` handling around there I agree with Victor.::",da3d1d241e95fad11340c139ad0210c9fea60f00::4389ff429df01c92f15cc05339d6b74e9b6c1daa::0f98a44d619d7fee0c6d0a7bd73be222f1f3d8ef::
https://api.github.com/repos/python/cpython,15408,tutorial_shallow::master,0,closed,CLA signed::awaiting changes::needs backport to 3.8::skip news::type-documentation::,<pun intended> <!-- issue-number: [bpo-14112](https://bugs.python.org/issue14112) --> https://bugs.python.org/issue14112 <!-- /issue-number --> ::,618b81da9c3230042d417ea986d6d2b6285d18ec::
https://api.github.com/repos/python/cpython,15341,bpo-32793-smtplib-duplicated-debug::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.7::,_get_socket() already prints a debug message for the host and port. <!-- issue-number: [bpo-32793](https://bugs.python.org/issue32793) --> https://bugs.python.org/issue32793 <!-- /issue-number --> Automerge-Triggered-By: @maxking::,c93b7f9c73272dc5e52acc65840699454e044564::
https://api.github.com/repos/python/cpython,15230,revert-continue-inside-finally::master,0,closed,CLA signed::DO-NOT-MERGE::awaiting merge::needs backport to 3.8::type-bugfix::,This reverts commit fe2bbb1869b42222a3f331a3dfb8b304a19a5819. <!-- issue-number: [bpo-37830](https://bugs.python.org/issue37830) --> https://bugs.python.org/issue37830 <!-- /issue-number --> ::,5ff8da2777cc3e681e05f8fc2d52da193f95956a::81b7f32f9719f445d1d0238c67a44edddbafa1a2::
https://api.github.com/repos/python/cpython,15209,Fixed-typos::master,0,merged,CLA signed::needs backport to 3.7::skip issue::skip news::,"Found some more typos in various files. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::```suggestion representation is used, so ``/foo/bar/baz.py`` with an *optimization* of ```::```suggestion def test_nonexistent_remote_registry(self): ```::```suggestion def test_patch_propagates_exc_on_exit(self): ```::Thanks for the suggestions @epicfaace, ""Any other value’s string representation being used, so..."" This line is not very clear to me. I think there should be ""If"" at the beginning as well. Anyway, I would like to leave this as is if possible, and get the typo bits merged first.::Accept the suggestion as 'being' is effectively a typo.  With that change, the sentence is coherent, even if not optimal, whereas it it not now.::I verified with recursive grep that these are the only four instances of LOADLIBARYEX in any .c file or any .py file in lib or tools.  Note that the spelling is LOADLIBRARYEX_FN (with 2nd R) on line 51.::",cdfa0929b8b2e48e67ca5afe1eabb57bea7b85e2::636dfd74cf4851f3b03f13fa617bfaf77fbacdf9::88c048963b8479fe9471a6e86d89ebc54e8880d5::125cb190eea74b6cef0289b1fa507fd53f2f9a60::ffe562d7373406c84de2bd83d84e41f64473ab37::df2862f37aa34913206c10d734d718f7caa426bb::
https://api.github.com/repos/python/cpython,15198,patch-1::master,0,closed,CLA not signed::awaiting changes::needs backport to 3.7::needs backport to 3.8::skip issue::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::It this correct that pop() doesn't take any parameter. But remove(0) also doesn't seem right. Remove accepts the `value` to be removed, not index to be removed. Perhaps a better replacement is `remove(v)`. I'll wait for @rhettinger's feedback on this.::This paragraph is about `list`. `list.pop()` takes `index` parameter.::@sir-sigurd Ah, it looks that the PR author might not have realized the context. To avoid any further confusion, we could make it a little bit more explicit: ``` ``list.pop(0)`` and ``list.insert(0, v)`` operations which change both the size and ``` ::Hi @paulhoule. Thanks for taking the time to submit a PR. This paragraph of the documentation is comparing the deque's memory management behavior to a list's behavior when making a change in the contents of the data collection (specifically, if acting on the first element of the collection). Compared to a list, the advantage of a deque is memory efficiency. The deque avoids moving memory around by adding or removing data from typically the front or end of the collection. As a doubly linked list, adding or removing an item from a deque does not move any of the other elements in memory. Instead pointers to the prior or next element in the deque are updated. For a **list**, `pop()` is equivalent to `pop(-1)` to remove the last item in a list. `pop(0)` of a list would remove the first item in the list. Unlike a deque, removing an item from the first position on the list could cause movement of items stored in memory. [Reference to source code](https://github.com/python/cpython/blob/762f93ff2efd6b7ef0177cad57939c0ab2002eac/Modules/_collectionsmodule.c#L34) The original paragraph is trying to illustrate that adding a new element (`insert(0, v)`) or deleting an element (`pop(0)`) to the beginning of the list (index 0) can impact where elements are stored in memory. This differs from a deque since adding an item to the beginning of the collection or removing from the beginning (`popleft()`) does not move or shift the other elements in memory. `remove(0)` removes the value equal to the passed parameter in this case 0. `remove(0)` is a different concept since the documentation is illustrating a point about what happens when acting on the first element of a list or deque. To summarize, the documentation is technically accurate as written. If you would like to update the PR to clarify the concept more, please feel free to update your PR. Alternatively, please feel free to close the PR. Thanks! ::",6320966d810fb81b1a6132cd20c1604e42c61d75::
https://api.github.com/repos/python/cpython,15148,bpo_37775::master,0,merged,CLA signed::needs backport to 3.7::skip news::type-documentation::,"<!-- issue-number: [bpo-37775](https://bugs.python.org/issue37775) --> https://bugs.python.org/issue37775 <!-- /issue-number --> ::FWIW, these should probably also contain a `versionchanged` entry as done in https://github.com/python/cpython/commit/a6b3ec5b6d4f6387820fccc570eea08b9615620d#diff-ff4f9cbddd1c0a6371e3cc85fbea0785R80 This should be done for each of the methods whose signature is now changed, mentioning about the change and how default value is determined.::thanks for review, Done::It seems the `versionchanged` tag was to be added for this method as well.::ops, i forgot this line. Thanks, Sanyam :)::",36434c193146293b7d97b5f4237c09b6303d97f2::e190013f8a9104ac477df4d54dbde1416a55f99f::c22afa5abe17a8b86df733a53738a3f2b2da0f2d::
https://api.github.com/repos/python/cpython,15131,bpo-37757-targetscopeerror-for-iteration-variable-conflicts::master,0,merged,CLA signed::needs backport to 3.8::,"- drop TargetScopeError in favour of raising SyntaxError directly as per the updated PEP 572 - comprehension iteration variables are explicitly local, but named expression targets in comprehensions are nonlocal or global. Raise SyntaxError as specified in PEP 572 - named expression targets in the outermost iterable of a comprehension have an ambiguous target scope. Avoid resolving that question now by raising SyntaxError. PEP 572 originally required this only for cases where the bound name conflicts with the iteration variable in the comprehension, but CPython can't easily restrict the exception to that case (as it doesn't know the target variable names when visiting the outermost iterator expression) <!-- issue-number: [bpo-37757](https://bugs.python.org/issue37757) --> https://bugs.python.org/issue37757 <!-- /issue-number --> ::`msg` isn't used (probably a copy-paste relic since this test checks for successful use cases)::Removed! (and yep, it was indeed a copy-paste relic)::",8d2a921a094a94e191373c69460dac3a060ca003::cf0c6c72840469a1c2cf223ed002a0981ba264ba::c0f2b5bfa7f3b0318493a5d663ac59cf3f705df0::b3375276376814d12e03e4376d20d74e27a850f9::34f0c495c77fb9f7c847b422da66ec09115e92a0::b1c109e5a05075ef375e4a7864b7b725bc8608e1::1cf1ae8e5d87d84ce845f16a40252a8f8cc33244::40307d59f51b2623befe68b1a7d051537364fa75::532cf125f4d50f23fc4eb8dbda46ff5d0d7910c9::4ee6cc0f76d9a1bb06a2fffd6e5104596c6602b0::
https://api.github.com/repos/python/cpython,15099,patch-10::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::skip issue::skip news::type-documentation::,"This PR will apply the following changes to the [`io` module documentation](https://docs.python.org/3/library/io.html): - add the missing mention of the `TextIOBase` parent class to the `StringIO` class description; - make it clear that the `newline` parameter of the `StringIO` class works like that of the `TextIOWrapper` class *except* when writing to a stream with `newline=None`; - improve phrasing consistency.::```suggestion buffer streams that are readable, writable, and both readable and writable, respectively. ```::I think the original wording here sounds better. ```suggestion The :class:`TextIOBase` ABC, another subclass of :class:`IOBase`, deals with ```::```suggestion from strings.  :class:`TextIOWrapper`, which extends :class:`TextIOBase`, is a buffered text ```::We should still use ""attributes"" because we have ""these"" in front of ""data attributes and methods"". ```suggestion :class:`IOBase` provides these data attributes and methods: ```::I ```suggestion :class:`BufferedIOBase` provides these attributes and ```::```suggestion :class:`FileIO` provides these attributes in addition to those from ```::Can you link to the `seekable()` method here?::We may not need ""buffered"" here since we already have `BufferedIOBase`. ```suggestion A buffered text stream over a :class:`BufferedIOBase` binary stream. ```::```suggestion :class:`TextIOWrapper` provides these attributes and methods in ```::Does newline translation happen during reading? If so, it might be good to group together both things that happen during reading in one sentence and then the writing behavior in another sentence.::Alright.::Alright.::Alright.::Alright for the missing ""s"". But I think we should keep the word ""data"" before ""attributes"". Attributes can be either data attributes or function attributes with corresponding methods: https://docs.python.org/3.7/tutorial/classes.html#instance-objects::I think we should keep the word ""data"" before ""attributes"". Attributes can be either data attributes or function attributes with corresponding methods: https://docs.python.org/3.7/tutorial/classes.html#instance-objects::Well it feels awkward to use a method name as an adjective: ""a :meth:`seekable()` :class:`RawIOBase` raw binary stream"". (I haven't seen such examples in the documentation.)::Yes I understand, but I think it is better if we don't rely on the class name and use a consistent naming throughout the document.::Alright for the missing ""s"". But I think we should keep the word ""data"" before ""attributes"". Attributes can be either data attributes or function attributes with corresponding methods: https://docs.python.org/3.7/tutorial/classes.html#instance-objects::To me having three consistent sentences ""class A extends class B"" makes it easier to visualise the class hierarchy.::Yes universal newline translation happens during reading if the `newline` parameter is `None`. Since `TextIOWrapper` and `StringIO` treat the newline parameter the same way with an exception, let's simplify this paragraph even more. Updated, thanks.::Makes sense!::Ok, that makes sense. Is it clear enough to the reader that the adjective ""seekable"" means that the class returns True when calling `seekable()`? If so, we're good -- if not, perhaps it would be good to add a sentence clarifying that fact.::Okay, makes sense::Makes sense, thanks for linking to that.::Actually ""seekable"" was already used in the next paragraph, so I think we are safe.::```suggestion buffer raw byte streams that are readable, writable, and both readable and writable, respectively. ```::```suggestion (this functionality is done at a higher-level in buffered binary streams and text streams, described later ```::I think I prefer the original text for this change.::```suggestion A buffered binary stream providing higher-level access to a readable, sequential :class:`RawIOBase` ``` It is helpful to third party library and project maintainers to know which are intended to be higher level vs. lower level.::```suggestion A buffered binary stream providing higher-level access to a writeable, sequential :class:`RawIOBase` ```::```suggestion A buffered binary stream to a seekable, random access :class:`RawIOBase` raw binary stream. ```::```suggestion A buffered binary stream with two unidirectional :class:`RawIOBase` raw binary ```::```suggestion :class:`TextIOBase` and its parent, :class:`IOBase`: ```::Actually seekable = random access. And let's use your ""providing higher-level access to"" phrase here too.::Alright.::Alright.::Alright.::Let's use your ""providing higher-level access to"" phrase here too.::Well, we did not precise ""its parent"" in the other ""provides this [...] in addition to those from [...] and :class:`IOBase`"" sentences.::Alright.::The thing is that the phrasing was not consistent with the rest of the class descriptions.::",22138cec80b95d4ccef45b5eeea7d9861d76b5f7::cd51f81040e8b9190ce42f5c9610826a864ebc7a::e48a2154a0dcf64e236ad8cf7ef5a15b2545aecb::a2875002a044d915efd597a95057a3d12f4e515f::058c4130ef242552c2df7018d5da51831f695237::f699e0f4d25b7853d7ef3f0c81e6fd1d2b63b3d3::8faee39725a701211ad950626957e8b5b761b76a::f8235fde49637c82104e9b32f123953f674e6b06::9b82aa62448df77f929da32645438550f0106b6d::
https://api.github.com/repos/python/cpython,15075,bpo18049-fix::master,0,closed,CLA signed::awaiting core review::needs backport to 3.8::skip news::type-tests::,"A previous PR fixed and issue with recursion in threads on macOS and completely removed the platform guard. Removing this guard broke tests on AIX, therefore reintroducing a guard that only runs this test on macOS. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-18049](https://bugs.python.org/issue18049) --> https://bugs.python.org/issue18049 <!-- /issue-number --> ::",c0854abfc9612753557b1f75fbd214ea2391cd8e::
https://api.github.com/repos/python/cpython,15057,issue35943::master,0,merged,CLA signed::needs backport to 3.7::,"Added optimization to prevent `PyImport_GetModule()` from returning partially-initialized module. <!-- issue-number: [bpo-35943](https://bugs.python.org/issue35943) --> https://bugs.python.org/issue35943 <!-- /issue-number --> ::You need to return NULL in the case of error. And maybe call `remove_importlib_frames()`.::`spec` and `value` are leaked here.::Dead code.::It is hard to follow the changes when such large function is moved. I would move `PyImport_GetModule` instead.::Since the variable `value` is not used anymore, I would remove it: ```c if (import_ensure_initialized(tstate, mod, abs_name) < 0) { ```::I'd leave out this `return`, and let control flow continue naturally to the end of the function. That's the direct translation of how the corresponding code inside `PyImport_ImportModuleLevelObject` worked. The two decrefs after this (including the one that this `return` causes to be dead) then take care of freeing these. ::I'm looking back at what the `goto error` in the original context does, as a guide to what this error case should likely do. One is `remove_importlib_frames` -- great. A couple of other steps there don't appear to apply. But another one is `Py_XDECREF(mod);`. And in fact it does look like we should do that here. (If there hadn't been an error, we'd have returned `mod` to the caller -- which must mean the caller would own the reference, so it must be that we own the reference here. Which means if we return `NULL` and so *don't* pass the pointer on to some other code that will own the reference, it's up to us here to decref it away.) I think that's then all of it. ::Same thing @serhiy-storchaka suggested at the other call site.::Oh also: This NEWS entry (and the commit message) say ""optimization"", but the change is actually better than that! This changes the function's behavior, in a way that makes the API safer and makes it easier to avoid bugs when using it. So let's write the description to make that clear. :slightly_smiling_face: One good description might be: ``` The function :c:func:`PyImport_GetModule` now ensures any module it returns is fully initialized. ``` Also I think `C API` rather than `Library` would be the most helpful home for the NEWS entry. ::> > > `spec` and `value` are leaked here. I think removing this return will resolve this memory leak.::> > > I'm looking back at what the `goto error` in the original context does, as a guide to what this error case should likely do. > > One is `remove_importlib_frames` -- great. A couple of other steps there don't appear to apply. > > But another one is `Py_XDECREF(mod);`. And in fact it does look like we should do that here. (If there hadn't been an error, we'd have returned `mod` to the caller -- which must mean the caller would own the reference, so it must be that we own the reference here. Which means if we return `NULL` and so _don't_ pass the pointer on to some other code that will own the reference, it's up to us here to decref it away.) > > One is remove_importlib_frames -- great. A couple of other steps there don't appear to apply. Am also returning null following a review from @serhiy-storchaka above. no? ::I agree about  doing Py_XDECREF(mod). Thanks @gnprice .::`mod != NULL`, so you can use `Py_DECREF`.::Wrong indentation. Use 4 spaces in the C code.::Add please ""Patch by *your name*.""::`__spec__` should be aligned to `Optimization` (i.e. use 7 spaces).::```suggestion Patch by Joannah Nanjekye. ```::```suggestion PyObject *mod; ```::Please move both these statics to the top of the file (next to `CACHEDIR`) as globals.::`_PyModuleSpec_IsInitializing()` is a little too clever IMHO, so lets make things a little more obvious here: ```suggestion spec = _PyObject_GetAttrId(mod, &PyId___spec__); if (spec == NULL) { PyErr_Clear(); return 0; } ```::With my suggested changes above, you can drop this line. ```suggestion ```::```suggestion int busy = _PyModuleSpec_IsInitializing(spec); Py_DECREF(spec); if (busy) { ```::`spec` might be NULL. ```suggestion Py_XDECREF(spec); ``` (Also, with the suggested change above, you can drop this decref.)::It would be worth having a comment here making it clear that the point is to wait until the module is done importing.::FWIW, I always prefer to pass in as little as possible.  Here `PyThreadState` is quite broad, since we only need `PyInterpreterState.importlib`.  At the same time, for smaller code like this it can help to keep the common indirections in the function.  So I guess I'd leave it as-is. :)::What made you add this `remove_importlib_frames()` call?  (I'm sure it's correct, BTW.)::@serhiy-storchaka had requested it -- I think most likely because it's found in the corresponding `error:` path in `PyImport_ImportModuleLevelObject`. ::`_PyModuleSpec_IsInitializing()` does this. I do not see reason to duplicate code.::No, it can't be NULL here.::I think it would be better to make that as a separate change. This style where they're block-local is the way the existing code works, which keeps the diff simple. It's also the way that every use of `_Py_IDENTIFIER` in this file works. So I think the cleanest way to change the style would be to sweep through this whole file (or more) in one PR, separate from any substantive changes. ::I agree with @gnprice . To keep this diff simple, I have opened a separate [bpo issue](https://bugs.python.org/issue37872) to track this refactor. I will work on it If this PR is merged.::`_PyModuleSpec_IsInitializing()` was specially designed for convenience, so there is no need to check `spec` for `NULL`. You can save 4 lines of code.::```suggestion Py_XDECREF(spec); ```::This comment takes too much vertical space.::sounds good::",c374e0aff571df7366818e9421473314bb52ab4c::01fe07951ecb6ee94fd113ae732f3cd2662a6967::7d1f7ee45ca3b06614afe8bcbb2adfc45bb2819e::f2be697ab3179bcd934a1d62d9580ba259de6fc0::09258125d4075dcfea5e4ceb10d8390c0b42ecac::57a6231816ec337fb56784a57b83d19de3f1eb44::6c1c28e4eaffaf8abb138b22bec603c8bd6c8708::13f438ef4719ed455574a05a339375b00b212fb6::fc83ad39cc0d0a2e9c7b2c0ec95f5d50ca633fac::ff771e7fea799d0b8556746434f72343f0bbf3b9::57dbdf5ff154a399b2bff3706ec07c82d03b8c03::
https://api.github.com/repos/python/cpython,14976,bpo-29553-fix-format-usage::master,0,merged,CLA signed::needs backport to 3.8::,"Fix for https://bugs.python.org/issue29553 Recreation of https://github.com/python/cpython/pull/117, updated to current master <!-- issue-number: [bpo-29553](https://bugs.python.org/issue29553) --> https://bugs.python.org/issue29553 <!-- /issue-number --> ::",e62cd6af284447d79a74300afae1cc499025bdae::24242e750aa3531df3125e33df877d340ef48f7f::b96c8b0bb634f7f9cbd27b063d4be0b0f000875e::
https://api.github.com/repos/python/cpython,14959,bpo-17535/increase-line-numbers-margin::master,0,merged,CLA signed::needs backport to 3.7::skip news::type-enhancement::,"As suggested on the issue tracker, though I found that adding 2 pixels looks much nicer than adding just 1. <!-- issue-number: [bpo-17535](https://bugs.python.org/issue17535) --> https://bugs.python.org/issue17535 <!-- /issue-number --> ::```suggestion padx=4, pady=pady, ```::",ce80a56d59ad24bc1b0f0c8a7822e230e4466a8a::
https://api.github.com/repos/python/cpython,14942,2to3-zipfile::master,0,merged,CLA signed::needs backport to 3.8::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-37675](https://bugs.python.org/issue37675) --> https://bugs.python.org/issue37675 <!-- /issue-number --> ::",21a954457496a3cc03bedd7fec1fca1fbfe87ebd::
https://api.github.com/repos/python/cpython,14888,statistics_nits::master,0,merged,CLA signed::needs backport to 3.8::skip issue::skip news::,::,313718e4fdfcb43afdf2ef581d63e09974707d25::770e546882be6ae08f43fde6cba65fb939bae8b7::7043479d94b45cf06d655d5777392934aebc9c9c::ba9b81f981c00a60bafe98d56b2f75059a20ce44::c827884483627be57765825fb11753eab3319654::4385302648e5192328254e3e3b4faf1ed2bc239f::
https://api.github.com/repos/python/cpython,14887,suspicious::master,0,closed,CLA signed::DO-NOT-MERGE::awaiting core review::needs backport to 3.7::needs backport to 3.8::type-bugfix::type-tests::,"Remove obsolete line number. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-37644](https://bugs.python.org/issue37644) --> https://bugs.python.org/issue37644 <!-- /issue-number --> ::",5a1696da79a17bad413558168a7eacb196d0305c::a08f293f36d153d4f3d7ddcef519380eb0728abf::
https://api.github.com/repos/python/cpython,14844,fix-issue-16970::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.7::,"BPO -16970: Adding error message for invalid args Applied the patch argparse-v2 patch issue 16970, ran patch check and the test suite, test_argparse with 0 errors <!-- issue-number: [bpo-16970](https://bugs.python.org/issue16970) --> https://bugs.python.org/issue16970 <!-- /issue-number --> Automerge-Triggered-By: @gvanrossum::",a22fc0b8fa9f0c77930a6421665e5e5df9a2ee37::af94176bcf9ffc9265b813c634b3ca66cbd7a86e::2dd229ffc4db7192c2d69fa46695070e9dffc365::a99114133594a8b601193c5eb7012c14ab183e1c::ffd2d22fd042d2cc9451f5ae0880411acb82010f::
https://api.github.com/repos/python/cpython,14794,bpo-37461::master,0,merged,CLA signed::needs backport to 3.6::needs backport to 3.7::type-security::,Some crafted email header would cause the get_parameter method to run in an infinite loop causing a DoS attack surface when parsing those headers. This patch fixes that by making sure the DQUOTE character is handled to prevent going into an infinite loop. <!-- issue-number: [bpo-37461](https://bugs.python.org/issue37461) --> https://bugs.python.org/issue37461 <!-- /issue-number --> ::,b906a859f349aedcce66e138bfe62394f04e1cbb::23a1fbc1d7ef5fb4d19977a13787f6bb87635cda::cc4ed701d9f647485ca0452cc17affbd1030fde0::
https://api.github.com/repos/python/cpython,14789,tokenizer_realloc::master,0,closed,CLA signed::awaiting core review::needs backport to 3.8::,"Fix Python parser crash: when the tokenizer grows its internal buffer using REALLOC(), update also tok->multi_line_start. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-37603](https://bugs.python.org/issue37603) --> https://bugs.python.org/issue37603 <!-- /issue-number --> ::",6f0399c7eba00e33d54ed44f2ef08e83d1225da0::
https://api.github.com/repos/python/cpython,14729,bpo_37583::master,0,merged,CLA signed::needs backport to 3.7::skip news::,"<!-- issue-number: [bpo-37583](https://bugs.python.org/issue37583) --> https://bugs.python.org/issue37583 <!-- /issue-number --> ::This comment is wrong. The issue is specific to your VM config and it's unrelated to VMs in general. I suggest this comment instead: ``` # bpo-37583: The destination host cannot be reached ``` In the issue you wrote ""Looks it's a problem of security group."" maybe you can investigate to write a more accurate comment, but it's not required ;-)::Thanks, victor. Your comment is good enough:)::",61b929c8a6b6ef1fb006eb1243d50583a88d6130::a7864782c012d2e84e32d2bfe039f879d83caf87::
https://api.github.com/repos/python/cpython,14688,bpo21478-autospec::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::,"When autospecced object is passed to `attach_mock` the mock object is stored in the `mock` attribute that has `_mock_name` and `_mock_parent` set. For function types passed check for the mock attribute and clear name and parent of it so that `attach_mock` updates the child with correct name and parent in `_check_and_set_parent`. <!-- issue-number: [bpo-21478](https://bugs.python.org/issue21478) --> https://bugs.python.org/issue21478 <!-- /issue-number --> ::```suggestion something() ``` In my use case for attaching the child mock to the parent, I call the child mock directly instead of through the parent mock. The only reason I attach the child to a parent is so that I can check the order of calls to different functions, à la https://stackoverflow.com/a/27306920/2407644.::Thanks @iforapsy for the review. I have changed the test to ensure call as a child, standalone function call and mock object call are all recorded to both parent and the respective mock object so that all cases are covered.::Not sure we need this comment, but the text could do with some tweaking.::This feels like it should be a separate test.::Why are we calling `child` direct here?::If this is the way that we know an autospecced object is passed in, it feels like it should be abstracted out into a helper function with a sensible name, and used wherever else this pattern has cropped up.::I removed it since I feel bug report gives the relevant context. Feel free to suggest wording if I need to incorporate a code comment. Since I am not a native speaker sometimes my language might be little difficult to grasp.::Moved it to a separate test. Thanks.::I moved it to `_extract_mock` to avoid code duplication and added a code comment related to autospecced functions.::Sorry, I don't get the comment here. The foo function is attached as a `child` attribute so I am calling `parent.child` to ensure parent records the call. I am not getting the direct call part here.::Nice!::I guess I don't really understand the use case for `attach_mock` so happy to go with what you say.::",3a687d81258c422ea664959023e1999e2e282902::65233ab92830c016ca61a8ce3d005768caa2dfd1::f0f2e8b2815f7b45d60683caf70baae262d7bcb8::efe4cfe5a25cfab0ae59c886bb1867c1f5d5f092::cdd51921077eef167637c44491dfedc70e5eea9d::
https://api.github.com/repos/python/cpython,14607,bpo-18374-fix-col-offset-binop::master,0,merged,CLA signed::needs backport to 3.7::,"Nested BinOp instances (e.g. a+b+c) had a wrong col_offset for the second BinOp (e.g. 2 instead of 0 in the example). Fix it by using the correct st node to copy the line and col_offset from in ast.c. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-18374](https://bugs.python.org/issue18374) --> https://bugs.python.org/issue18374 <!-- /issue-number --> ::Oh, after merging this I noticed this block of asserts checks parent for `lineno` and `end_lineno`.::Same in this block, it should be `granchild_binop` in two asserts in this block. @cfbolz could you please make another PR with a fix?::",820053e9bb39f141e364e50c0e259653deb42e7c::
https://api.github.com/repos/python/cpython,14556,typo-fix::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.8::skip issue::skip news::type-bugfix::,* accross -> across * Extra space removed in comment::,3bd1058408ddc5f5d57050ab9868d5f2dba56caa::
https://api.github.com/repos/python/cpython,14480,bpo-37199-test-failures-no-IPv6::master,0,merged,CLA signed::needs backport to 3.7::,"<!-- issue-number: [bpo-37199](https://bugs.python.org/issue37199) --> https://bugs.python.org/issue37199 <!-- /issue-number --> ::I don't like this approach, because it's hard to see that the rest of the test is skipped. Please either split the test function into two or move the rest of the code into the ``if not supported.IPV6_ENABLED`` block.::Okay. I am willing to make such changes, but I would like to hear what @asvetlov thinks.::@ZackerySpytz please make a PR with changes suggested by @tiran My first reaction was opening the source code to make sure that the `return` doesn't make harm. On the other hand, I've committed the PR as is because you proposed a minimal possible diff.::Okay. I have created GH-14535.::",b05f2dc4cb0bebe7359fdb747729d4e832a3c395::
https://api.github.com/repos/python/cpython,14470,no-unreachable-code::master,0,merged,CLA signed::needs backport to 3.8::skip news::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-37437](https://bugs.python.org/issue37437) --> https://bugs.python.org/issue37437 <!-- /issue-number --> ::",eedc015884ebf0256819a9eaf44d54d2adcc25da::
https://api.github.com/repos/python/cpython,14391,subprocess_close_handle::master,0,closed,CLA signed::awaiting core review::needs backport to 3.7::needs backport to 3.8::,"On Windows, subprocess.Popen now closes the process handle when the process completes. Previously, it was only closed when the Popen object was destroyed. <!-- issue-number: [bpo-37410](https://bugs.python.org/issue37410) --> https://bugs.python.org/issue37410 <!-- /issue-number --> ::`__exit__` calls `wait`, which calls `_wait`, which does not call `_internal_poll`. This should be implemented in `_wait` first and foremost. It can also be implemented here, or modify `_internal_poll` to call `_wait(0)`.::Oh right, I forgot wait() and terminate(). It's now fixed. I don't want to bother with a timeout exception in _internal_poll(), so I didn't modify it to reuse wait().::",a2fe42073268e1944e2f34664393be0fc3461b93::9572818fa9104a99861de442ab1ed299039c60f6::0eb1d056398228433394e77051ec5261313a8f41::
https://api.github.com/repos/python/cpython,14356,issue37386::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::needs backport to 3.8::skip news::type-tests::,"Skip the test if `write()` fails with `errno.ENOSPC`: ""OSError: [Errno 28] No space left on device"". <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-37386](https://bugs.python.org/issue37386) --> https://bugs.python.org/issue37386 <!-- /issue-number --> ::Do this raise stop the test? Or it just print in the stdout!?::`raise` will re-raise the current exception, effectively stopping the single test. I added a line `raise RuntimeException` in the test body to test this behavior, this is the result: ``` ====================================================================== ERROR: test_large_file_ops (test.test_io.CIOTest) ---------------------------------------------------------------------- Traceback (most recent call last): File ""/home/gcappellotto/src/cpython/Lib/test/test_io.py"", line 608, in test_large_file_ops raise RuntimeError RuntimeError ====================================================================== ERROR: test_large_file_ops (test.test_io.PyIOTest) ---------------------------------------------------------------------- Traceback (most recent call last): File ""/home/gcappellotto/src/cpython/Lib/test/test_io.py"", line 608, in test_large_file_ops raise RuntimeError RuntimeError ---------------------------------------------------------------------- Ran 606 tests in 38.472s FAILED (errors=2, skipped=8) test test_io failed test_io failed in 38 sec 661 ms == Tests result: FAILURE == 1 test failed: test_io Total duration: 38 sec 714 ms Tests result: FAILURE ```::",9053d0120768737d8b0b8bd2f5111a94018ea288::
https://api.github.com/repos/python/cpython,13980,no-preadv2::master,0,merged,CLA signed::needs backport to 3.7::skip issue::skip news::type-tests::,"If preadv2 is not available, preadv will raise NotImplementedError. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::",d537aca13af476c8c32a98316057ff5182abf650::
https://api.github.com/repos/python/cpython,13946,fix_threads_join_2::master,0,closed,CLA signed::DO-NOT-MERGE::awaiting core review::needs backport to 3.7::needs backport to 3.8::type-tests::,"Fix test_threading.test_threads_join_2(): run the test into a subprocess, rather than in a subinterpreter, to avoid a race condition. <!-- issue-number: [bpo-36402](https://bugs.python.org/issue36402) --> https://bugs.python.org/issue36402 <!-- /issue-number --> ::",43dce09f6f99a7018594c89c15868ecad3b3e2d7::
https://api.github.com/repos/python/cpython,13783,bpo-34001-libressl::master,0,merged,CLA signed::needs backport to 3.7::type-tests::,<!-- issue-number: [bpo-34001](https://bugs.python.org/issue34001) --> https://bugs.python.org/issue34001 <!-- /issue-number --> ::,f0778a11f8a0b791767df7b2b417117bde953795::
https://api.github.com/repos/python/cpython,13632,36991-zipfile::master,0,merged,CLA signed::needs backport to 3.7::type-bugfix::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-36991](https://bugs.python.org/issue36991) --> https://bugs.python.org/issue36991 <!-- /issue-number --> ::",fd12a769df9951717d7b3a3a7e8f568cd8fc58ec::a8655449486abaab2dc05ccdf9102aaa908c8208::27f2fac32ff3cf00d2432ec8f80efcf51159ea9c::
https://api.github.com/repos/python/cpython,13560,runrun::master,0,merged,CLA signed::needs backport to 3.7::type-bugfix::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-37038](https://bugs.python.org/issue37038) --> https://bugs.python.org/issue37038 <!-- /issue-number --> ::",28e8d7bdcf8f44cf32033b3f352dbe30ea716590::5fb04ca1c98fe6fe40902a0a5501d79b17148205::
https://api.github.com/repos/python/cpython,13546,bpo-36379-__ipow__-c-modulo-param::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.7::,"If a type's __ipow__ method was implemented in C, attempting to use the *modulo* parameter would cause crashes. <!-- issue-number: [bpo-36379](https://bugs.python.org/issue36379) --> https://bugs.python.org/issue36379 <!-- /issue-number --> ::",18c00ff8fe819b1ab50ca6a6af50ba2a90c457bb::
https://api.github.com/repos/python/cpython,13523,local_file_news::master,0,merged,CLA signed::needs backport to 3.7::,<!-- issue-number: [bpo-35907](https://bugs.python.org/issue35907) --> https://bugs.python.org/issue35907 <!-- /issue-number --> ::,821cd21a38a70a80a81bf0e97773a65dc9222a0e::1cec5b3f89c46f09db6fe9da6a08f84eb3bd6dad::
https://api.github.com/repos/python/cpython,13471,backport-925af1d-3.7::3.7,0,merged,CLA signed::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-36965](https://bugs.python.org/issue36965) --> https://bugs.python.org/issue36965 <!-- /issue-number --> ::",83c14f7853d70a96416fdb7dc55df0cd5bd80feb::220fdec42bd105ceadc128617399df93d5dfebe6::160983fd3e72058bc32b2730c31068e5edef42e4::
https://api.github.com/repos/python/cpython,13339,bpo36567::master,0,merged,CLA signed::needs backport to 3.7::skip news::,"use `MANPAGES_URL` env variable for manpage references. If that variable not found, use debians manpage service. <!-- issue-number: [bpo-36567](https://bugs.python.org/issue36567) --> https://bugs.python.org/issue36567 <!-- /issue-number --> ::NEWS entry isn't needed for trivial PRs. I've set the ""skip news"" label.::I don't think this is something that needs to be customized via an environment variable. Setting its value directly should be enough IMO: ```py manpages_url = 'https://manpages.debian.org/{path}' ```::Nit: This comment can be dropped. The name of the setting is already self-descriptive.::Done::Done::Done::",5f2bf528a98697e53b5a87453c82514e6f4cafcd::4677495ae90fea8980703bca5b86302bdd0540dc::
https://api.github.com/repos/python/cpython,13313,swallow-unhandled-exception::master,0,merged,CLA signed::expert-asyncio::needs backport to 3.7::,"The PR fixes a message about an unhandled exception in a task when `writer.write()` is used without await but `writer.drain()` fails with an exception. <!-- issue-number: [bpo-36916](https://bugs.python.org/issue36916) --> https://bugs.python.org/issue36916 <!-- /issue-number --> ::Silently ignore exceptions looks like a bad idea. If the task failed, the exception should be at least logged.::We have a special case here. Basically, there are two ways to call `write()` now: 1. Legacy `writer.write(b'data')` 2. Recommended `await writer.write(b'data')` For the second case, an exception raised by nested `writer.drain()` call is propagated to user. The first case ignores the exception from nested `writer.drain()` call, allowing existing code to work in a backward compatible way. A subsequent call to `drain()` raises the exception again, like in the following snippet: ``` writer.write(b'data')  # exception is swallowed await writer.drain()  # previous exception is raised if any ``` Sorry for such a tricky code. Ideally, we should make `writer.write()` a coroutine from the very beginning. Proposed workaround is a strategy to keep backward compatibility and provide a smooth transition path.::> writer.write(b'data')  # exception is swallowed Again, this exception should be logged somehow. It's a bad practice to *silently* ignore exceptions and don't provide any way to the developer to see these exceptions. Can you try to write the exception? I only merged your PR only to attempt to fix https://bugs.python.org/issue36870::I'm trying to do exactly the opposite than your PR :-) Provide a way to get ignored exceptions: https://github.com/python/cpython/pull/13187 :-)::Well, it is not for suppressing an exception entirely, the exception is raised to the caller on `await writer.write()` if this form of call is used. It is for disabling the exception logging. We do similar things in asyncio somewhere.::",7d6adda6889ccf7393efab36a0e25c8cac37edc8::3e515f3cb6bc03c85606a80f5d3b671ebdd736aa::0be9d4318741d17b5f026aa1f97b8e41299fc338::
https://api.github.com/repos/python/cpython,13296,wimglenn-patch-1::master,0,merged,CLA signed::needs backport to 3.7::skip news::type-documentation::,"Recipe in https://docs.python.org/3/library/collections.html#ordereddict-examples-and-recipes This example seems to use `super()` unnecessarily. ~I didn't bother to create a bpo issue number because it seems a trivial docs change to me, but let me know if it's required.~ Please add skip news label. Cheers! <!-- issue-number: [bpo-36909](https://bugs.python.org/issue36909) --> https://bugs.python.org/issue36909 <!-- /issue-number --> ::",2de6fcd7675e0da2fceb4b35d0f036c90c7e2bc8::
https://api.github.com/repos/python/cpython,13212,fix-issue-24538::master,0,merged,CLA signed::needs backport to 3.7::,Implements solution recommend in https://bugs.python.org/issue24538#msg301493 <!-- issue-number: [bpo-24538](https://bugs.python.org/issue24538) --> https://bugs.python.org/issue24538 <!-- /issue-number --> ::,a99b0ca63d750d7c8bebf6cc7642a59de8ae99d2::
https://api.github.com/repos/python/cpython,13171,shutdown-race::master,0,merged,CLA signed::needs backport to 3.7::needs backport to 3.8::,<!-- issue-number: [bpo-31783](https://bugs.python.org/issue31783) --> https://bugs.python.org/issue31783 <!-- /issue-number --> ::,b4222fd0b89d7ad736e8401b97d936087c6aff67::e1f0027127dd434d432055c8095cc4aa1567231c::217a5ff30d1d252ef6b23280adbdabf5252c46da::c1e6922712742ce5cf39aeca86647224d7a0a4e4::
https://api.github.com/repos/python/cpython,13150,userlist-slice::master,0,closed,CLA signed::needs backport to 3.7::type-bugfix::,Patch by Dmitry Kazakov. <!-- issue-number: [bpo-27639](https://bugs.python.org/issue27639) --> https://bugs.python.org/issue27639 <!-- /issue-number --> ::Added also the test for extended slices (this does not work in Python 2).::,519ecda84e99bddafbd816e0602ee416fb7b9ce9::
https://api.github.com/repos/python/cpython,13110,cp65001::master,0,closed,CLA signed::awaiting core review::needs backport to 3.7::,Replace functools.partial() with lambda to reduce the number of imports at startup. Avoid the following imports at startup: - _collections - _functools - _heapq - _operator - collections - functools - heapq - itertools - keyword - operator - reprlib <!-- issue-number: [bpo-36778](https://bugs.python.org/issue36778) --> https://bugs.python.org/issue36778 <!-- /issue-number --> ::Could you please measure how much overhead it adds?::,f26d4c512ab4cb1d2e7ab185cd2ec5518ae3eff0::
https://api.github.com/repos/python/cpython,13088,bpo-36782::master,0,merged,CLA signed::needs backport to 3.7::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-36782](https://bugs.python.org/issue36782) --> https://bugs.python.org/issue36782 <!-- /issue-number --> ::Are these formatting changes deliberate? I know some editors will be somewhat aggressive with making formatting changes. I think it would be best to leave the original formatting intact, if only to make the diff easier to review.::Formatting nitpick: [PEP 7](https://www.python.org/dev/peps/pep-0007/#code-lay-out) says that for if statements, the curly brace goes on the line with the conditional. (The curly brace after the function definition *is* on its own line).::Forgot to mention in my review, you can add ""Patch by <yourname>."" here.::maybe you could write ```year, month, day = 1993, 8, 26```::and because I don't like the duplicated code, you could use that. ```python self.assertEqual(d, date(year, month, day)) ``` I think you could also compute one time the expected date. and because I like to be explicit... ```python def test_date_from_date(self): expected_date = date(1993, 8, 26) for macro in (0, 1): with self.subTest(macro=macro): new_date = _testcapi.get_date_fromdate(expected_date.year, expected_date.month, expected_date.day, macro) self.assertEqual(new_date, expected_date) ``` @pganssle ? ::@pganssle Could you help @SimiCode for the blurb entry? ```Add tests for the C-API wrapper of PyDate_FromDate ```? I am not a native speaker. or ```Add tests for PyDate_FromDate``` ::Talked to Edison in the room, he will have an updated blurb that I have looked at. The current one is grammatically fine but could be tightened up and could use RST directives.::And add a new line at end of file.::Fold is not taken into account in datetime or time equality, you also need to assert that `c_api_time.fold == exp_time.fold`.::See the `time_fromtimeandfold` comment - need to check the fold explicitly.::```suggestion Created tests for several C API functions in the datetime module, specifically:: ```::PEP 7 says ""no line should be longer than 79 characters"", so this and many other lines need to be broken. There are some rules on how to break them here: https://www.python.org/dev/peps/pep-0007/#code-lay-out::add the `fold` parameter to `self.subTest` method::ditto::Just Add tests for C API functions. you don't need to specify the names of all the tested functions. One or two lines for the description is fine.::`Patch by Edison Abahurire` is fine on the same line. no need to add a new blank line.::maybe too long, read PEP7 (https://www.python.org/dev/peps/pep-0007/)::see PEP7::just remove `::`::maybe this sentence `Add tests for several C API functions in the :mod:`datetime` module. Patch by Edison Abahurire`::remove the blank line::```c++ if (!PyArg_ParseTuple(args, ""iiiiiii|p"", &year, &month, &day, &hour, &minute, &second, &microsecond, &macro)) { return NULL; } ```::ditto, remove empty string and reformat your call to `PyArg_ParseTuple` from PEP7 (https://www.python.org/dev/peps/pep-0007/) Breaking long lines: if you can, break after commas in the outermost argument list. Always indent continuation lines appropriately, e.g.: in this case, ```c++ if (!PyArg_ParseTuple(args, ""iiiiiiii|p"", &year, &month, &day, &hour, &minute, &second, &microsecond, &fold, &macro)) { return NULL; } ```::same here::same here::same here::same here::same here::Breaking long lines: if you can, break after commas in the outermost argument list. Always indent continuation lines appropriately, e.g.:::just reformat, ```Breaking long lines: if you can, break after commas in the outermost argument list. Always indent continuation lines appropriately, e.g.:```::this curly brace has to be on the first column::I would prefer to make macro mandatory. Maybe it should be moved at the beginning, but I would prefer to get Paul's call on that.::Since these parameters are mandatory, there is no need to initialize them.::This comment looks useless to me, please remove it.::nitpick: I suggest this empty line ;-) It doesn't add any value in term of readability. My comments apply to all C functions below.::```suggestion int macro; ``` If we're making this required, it does not have to be initialized.::```suggestion int macro; ```::```suggestion int macro; ```::```suggestion int macro; ```::```suggestion int macro; ```::```suggestion int macro; ```::",d9945c2a11dd9d75e46955f32426ff269a94e24e::f1573d64ee2f7d80dabd4d26362ee56564da968e::0284ced9b5f789be81703a0481845854c341a429::8cca15f99e57da445511df2135608f8a0763f4d3::d9ecbf55f9b27e684f981a189d392da961c3a903::796711452a6041276babf3a12de6b722cc67103f::f6b3ab8474855ea9f9e7d79676977fa133807f14::3b2095df16225194bb23c40a0d748285bd34e390::f6d590fc5d0206b5955fa57402a3d388d9b92534::7598e26e268c213a6c55cb20bf11a73cd1f9d5a7::f9e6213cb2a9ca5014f281a6d2b371c93c219d0c::948b2ce3a74854ecabc1ef844ad5002c80ca3543::64b4ae2bbb03d118b8b4323b47e555174a39193f::2e8188c76515f58908baa91336e6afa69dd756e8::642e802e86c45136e1ac5a4e46e9c99bd88f2e37::a9ada008dcc3f2d624425213fa426832cff11610::f3b692e4bfc3bbf798536538efc08f020778fd4a::ddba9786da58491fe6791e97b3b4e553e9432f4c::64632de1669bced5573d387bbf938bf36897a7b8::501d26bdc15a5e77dc3c584282ee3b3d4b66c46f::9adbc3d20d16195983339a175c962b3b7780c3c3::237413a11e54f5e027de80122aece63b08e96850::dc6ac8e473f81eb38d86153f1e412d3a546963d0::d7b8a5ec45c18baa31434fc5e96b3c2dce6aec46::ce9e56d3a3097f87e6b752c45c40949999b6ca39::2f3f64e08318479bad1328bd5dbf433a2fc62a02::a8817d3bcbb886229b9dafd201d619e3c4a817e9::ab0308a065dbb7c4ceea217a4fa3b7ef6e3aab61::2781d2ed9b50293f6b0d52e460df7f62dd2ed52d::91fce0284accd3498ffef569c285cdf07142a488::5cb05e10817d81fe93a4526ae2b8a076f2f6781c::603953155916e63630db482f513a26a14d4a2e75::07924e64dec58e2713e739328175ca5a561ff000::59d4ba09da540cd82b36c5a651de3ff13217efab::0c0046852443987857f250ec4d4a00a78b43c131::1d4ebfcd4a47ea2ed9eb5c1f2195e85ef2690a82::40ebd42edc214ec3d72b4bb25d5820c350d25309::75cc9c0c34f53c80d2ece17ff0b4b7d5c9f03354::a9422a0d6cb34fd13febe731099745284ef71720::3397abe7e52190cddc258088985dcb9e775099ea::6df027ec193420655f811809a06bd5412728ca95::48f7e03ede26bc17123b077bb6b6eb1d49bb9f04::7e917535077f96744a811528bc030ea853c267a8::588d95a600068c4144db15a79eea3ea7d4f69035::eb3e060b08d59fca65d0fdcfab9cee7d2d4250fa::1e4db0725201e88204a86d030f1ab9eb53dedf05::a9c7623e056a3303d4675ae70f57b5db11ddf796::
https://api.github.com/repos/python/cpython,13071,fix-issue-35070::master,0,merged,CLA signed::needs backport to 3.7::,"The test_getgroups subtest fails when the current user running the test belongs to the maximum number supplemental groups. It fails because posix.getgrouplist() passes an array to the POSIX API function getgrouplist() that is too small. It uses NGROUPS_MAX to determine the size of the array that it passes to getgrouplist() to be filled with the user's GIDs. NGROUPS_MAX is defined by POSIX.1 as the maximum number of supplimental groups a user can belong to. The value has to be increased by one because getgrouplist() returns both the supplemental groups and the primary group, i.e. all of the groups the user belongs to. NGROUPS_MAX is defined as 16 on OS X systems, so the test fails when the user belongs to 16 supplemental groups because it passes an array with 16 elements to receive the GIDs, but getgrouplist() returns an error because it wants to return 17 GIDs (the primary plus 16 supplemntals). This problem most likely is not seen on Linux systems because they typically have a much higher limit for supplemental groups (e.g. 65,536 on Ubuntu 16.04.4). <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-35070](https://bugs.python.org/issue35070) --> https://bugs.python.org/issue35070 <!-- /issue-number --> ::Thanks for adding the blurb entry.  It's a bit too verbose, though.  It should only be one or two sentences and just needs to say something about preventing test_getgrouplist failures on macOS.  If anyone needs to find more detaill, they can refer to the code.  Also, this problem is not new to macOS 10.14; it only depends on how many groups the user is a member of.  So the test may pass on 10.14 and may fail on older systems.::`MAX_GROUPS` is also defined later in `posixmodule.c` in `os_getgroups_impl`.   Without also changing it, the fix here can cause a compile warning: ``` ../../source/Modules/posixmodule.c:6831:9: warning: 'MAX_GROUPS' macro redefined [-Wmacro-redefined] #define MAX_GROUPS NGROUPS_MAX ^ ../../source/Modules/posixmodule.c:6746:9: note: previous definition is here #define MAX_GROUPS (NGROUPS_MAX + 1) ^ ``` The simplest fix is to also change the latter definition to be `NGROUPS_MAX + 1.`::I have made the requested changes; please review again::",d1a1fbd09da55a1fefb55cc18339e76e384404de::811cb59ae8ba7c71ad20e6b8a28a6462696940e9::39aeb0d6e3ab7642cd8161f3d7911fbee22bbca2::
https://api.github.com/repos/python/cpython,12981,doc-code::master,0,merged,CLA signed::needs backport to 3.7::skip issue::skip news::type-documentation::,"The new markup is currently ignored by IDLE's tk doc display. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::",6e46dcfa379d91b9a89f51f2991861bc3cc869e4::
https://api.github.com/repos/python/cpython,12928,fix_gzip_typo::master,0,merged,CLA signed::needs backport to 3.7::skip issue::skip news::,Fix a small typo in gzip.py ::,0be885e286ef905448c32d86f64f80828ac1e90c::
https://api.github.com/repos/python/cpython,12766,bpo-36589-curses-update_lines_cols::master,0,merged,CLA signed::needs backport to 3.7::type-bugfix::,<!-- issue-number: [bpo-36589](https://bugs.python.org/issue36589) --> https://bugs.python.org/issue36589 <!-- /issue-number --> ::,a468845b098a3602abdc3e9f9e6ef4b7a8cfcc16::7cf068c06de97546133d4a33255456c32c06de8c::bf5c2287d33593be7390b1cd0e7973b6f3a619c3::
https://api.github.com/repos/python/cpython,12744,refleak_fix::master,0,merged,CLA signed::needs backport to 3.7::,"dash_R() now always fill ""deltas"" variables, not only for i >= nwarmup, to fill all caches earlier. Other changes: * Replace gc.collect() with support.gc_collect() * Move calls to read memory statistics from dash_R_cleanup() to dash_R() * Pass regrtest 'ns' to dash_R() * dash_R() is now more quiet with --quiet option (don't display progress). * Precompute the full range for ""for it in range(repcount):"" to ensure that the iteration doesn't allocate anything new. * dash_R() now is responsible to call warm_caches(). <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-36560](https://bugs.python.org/issue36560) --> https://bugs.python.org/issue36560 <!-- /issue-number --> ::",4341b6d8bac71a2a02437970f87cd2962bdcf4e8::
https://api.github.com/repos/python/cpython,12689,bpo36528::master,0,merged,CLA signed::needs backport to 3.8::skip news::,105 tests that were duplicates were removed. cc : @MakDon <!-- issue-number: [bpo-36528](https://bugs.python.org/issue36528) --> https://bugs.python.org/issue36528 <!-- /issue-number --> ::The comment in line 589 should be removed.::```suggestion ```::,bd7d9f57f1664b7cef19ba3ccf58628468f6d06b::503094dc9cef939af8f4067f3c11b601f45181ef::
https://api.github.com/repos/python/cpython,12687,bpo-9194-winreg-fixupMultiSZ-bounds::master,0,merged,CLA signed::OS-windows::needs backport to 3.7::skip news::,<!-- issue-number: [bpo-9194](https://bugs.python.org/issue9194) --> https://bugs.python.org/issue9194 <!-- /issue-number --> ::NEWS entry isn't needed for trivial fixes. I already set the 'skip news' label.::@berkerpeksag I've removed it.::,b6def9cebd7eb9c06c27dd786ea4e4281eb3b3ae::ba22b1295407c24a4fdefb0e55e8c32db6ef303b::
https://api.github.com/repos/python/cpython,12686,patch-1::master,0,merged,CLA signed::needs backport to 3.7::skip issue::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::",4c6d8be2c2087b3e3a3090b738dd089be6dda699::
https://api.github.com/repos/python/cpython,12666,issue36487::master,0,merged,CLA signed::needs backport to 3.8::type-documentation::,"I have added documentation to clarify on what the main interpreter is. <!-- issue-number: [bpo-36487](https://bugs.python.org/issue36487) --> https://bugs.python.org/issue36487 <!-- /issue-number --> ::This description of the main interpreter could be a bit more direct but the focus should remain within the context of subinterpreters.  For instance, there's no need here to mention any specific API related to the main interpreter.  Anyway, I've updated the BPO issue with a list of key points to cover. FWIW, I'm not sure whether it would be better to keep the main-related text small (e.g. one short paragraph) or to make it comprehensive (e.g. across multiple paragraphs).  If we go with that latter then it may make sense to have a separate section nearby for the main interpreter.::I think it makes sense to keep things minimal for now, and defer more comprehensive documentation to the resolution of the PEP for a Python level subinterpreter API.::@ncoghlan  I agree to this being a small paragraph for now most especially given the current structure of the docs. Though I also have to warn you that incorporating all the points @ericsnowcurrently suggests in the BPO will lead to a big paragraph.::For this first sentence: s/main/""main""/::s/signal and public calls handling/signal handling/::Drop ""can be taken over by a subinterpreter in the main thread"".::Also ""when the runtime"" (""the"" is currently missing) ```suggestion The ""main"" interpreter is the first one created when the runtime initializes. ```::There's an extra space after ""docs"" ```suggestion Make C-API docs clear about what the ""main"" interpreter is. ```::```suggestion The :c:func:`PyInterpreterState_Main` function returns a pointer to this main ```::```suggestion , is responsible for execution during runtime initialization ```::I still think this will be more clear if you drop `and public calls` from this sentence.::```suggestion The :c:func:`PyInterpreterState_Main` funtion returns a pointer to its state. ```::You can drop ""in the main thread"".  It doesn't add much helpful info in this context.::```suggestion Unlike sub-interpreters, the main interpreter has unique process-global responsibilities like ... ```::```suggestion handling.  It is also responsible for execution during runtime ```::```suggestion initialization, and is usually the active interpreter during runtime ```::It may be better to move this sentence to the end of the paragraph.::",8ed585636f22320d2adcbb68dac6c3c24efdf24e::0d4eb4d1b124f55376c5dfe0495493f91215a78e::8d86ce1bcbf0b4f9a337991093c5e434647cb84f::72fb60e75f99ebb450e321edd502466a5abac500::9416dbf0e6704d333a4628614a426c48845b8603::30a0ae20accb8c011fc7429bea22de00f212145c::b5b2716e11ac9bee51b1c2d288ac4e61e066f4e1::3e265629058de48b90b3910a7823c46f74ab0daa::ba97ef973fa6b5c13272f7f5a53ccc1171670b96::9c5de37c94bed6fff6d597850ffe033eb3c0e529::
https://api.github.com/repos/python/cpython,12622,C89_for_loops_pickle_bpo-36478::3.5,0,merged,CLA signed::,"<!-- issue-number: [bpo-36478](https://bugs.python.org/issue36478) --> https://bugs.python.org/issue36478 <!-- /issue-number --> ::Would you mind to elaborate the rationale to include ""gnu89"" C standard and GCC 4.8 version? For example: ""Fix compatibility with ISO C89 needed by ""gnu89"" standard of GCC 4.8: use C89 for loops in backported pickle patch. Patch by Anthony Sottile."" Modify also the commit message, just reuse the same text (without your name, which is already provided by Git).::done! thanks for the suggestion :)::",7df8f06ed03e0c11762eb491d4b53c9861583196::d7ca944146b5c6d3afb3aecc31e041306b7f0f87::
https://api.github.com/repos/python/cpython,12601,bpo-36459-double-free-tok_nextc::master,0,merged,CLA signed::needs backport to 3.7::type-bugfix::,Remove the PyMem_FREE() call added in cb90c89.  The buffer will be freed when PyTokenizer_Free() is called on the tokenizer state. <!-- issue-number: [bpo-36459](https://bugs.python.org/issue36459) --> https://bugs.python.org/issue36459 <!-- /issue-number --> ::,f675d895bf89bdb7a3ddb69f362707adbf06e6cb::
https://api.github.com/repos/python/cpython,12597,revert-10341-patch-7::master,1,merged,:robot: automerge::CLA signed::needs backport to 3.7::skip issue::skip news::type-documentation::,Reverts python/cpython#1034 which creates confusion with the '**' operator for __pow__::,ed2f21a5139a31d63b9948ecb1549d4e9f240516::
https://api.github.com/repos/python/cpython,12383,typo-in-_PyObject_FastCallDict-documentation::master,0,merged,CLA signed::needs backport to 3.7::skip news::,"**skip news** <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-36317](https://bugs.python.org/issue36317) --> https://bugs.python.org/issue36317 <!-- /issue-number --> ::",af0d77aeb8c95fef001a3c1c6d81f7a69da4877b::
https://api.github.com/repos/python/cpython,12287,bpo-36206_macos_process_time::master,0,closed,CLA signed::DO-NOT-MERGE::awaiting merge::needs backport to 3.7::skip news::type-tests::,"[bpo-36205](https://bugs.python.org/issue36205) documents a problem where `time.process_time` and `time.perf_counter` return very different values when built on macOS 10.11 or earlier.  Several time related functions were added to macOS at 10.12 including `clock_gettime`.  For older systems, timemodule.c falls back to using `getrusage`.  With Python 3.6.x, that fallbacks correctly but it appears that refactoring introduced with the implementation of PEP 564 ([bpo-31784](https://bugs.python.org/issue31784), #3989) broke that for 3.7.z. This initial PR just includes a potential test case to ensure process_time and perf_counter return similar results.  It can be used to reproduce the problem when building on newer versions of macOS (10.12+) by removing the `AC_CHECK_FUNCS(clock_gettime)` test in `configure.ac`: ``` diff --git a/configure.ac b/configure.ac index 73ee71c6d2..0c61a088d9 100644 --- a/configure.ac +++ b/configure.ac @@ -3853,15 +3853,6 @@ char *r = crypt_r("""", """", &d); []) ) -AC_CHECK_FUNCS(clock_gettime, [], [ -    AC_CHECK_LIB(rt, clock_gettime, [ -        LIBS=""$LIBS -lrt"" -        AC_DEFINE(HAVE_CLOCK_GETTIME, 1) -        AC_DEFINE(TIMEMODULE_LIB, [rt], -                  [Library needed by timemodule.c: librt may be needed for clock_gettime()]) -    ]) -]) - AC_CHECK_FUNCS(clock_getres, [], [ AC_CHECK_LIB(rt, clock_getres, [ AC_DEFINE(HAVE_CLOCK_GETRES, 1) ``` and running the test in this PR: ``` autoconf && ./configure -q && make -s && \ ./python.exe -m test test_time -m test_perf_counter_vs_process_time ``` <!-- issue-number: [bpo-36205](https://bugs.python.org/issue36205) --> https://bugs.python.org/issue36205 <!-- /issue-number --> ::",64938213f6bb04d2a852e32f5c256fe18418b396::
https://api.github.com/repos/python/cpython,12280,test_scrypt::master,0,closed,CLA signed::DO-NOT-MERGE::awaiting merge::needs backport to 3.7::,"Fix hashlib.scrypt(): pass the salt when validating arguments. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-36263](https://bugs.python.org/issue36263) --> https://bugs.python.org/issue36263 <!-- /issue-number --> ::",b8dc92b32bc87b127b1679f4b4a4f987d1e1d080::
https://api.github.com/repos/python/cpython,12184,akuchling-assertcountequal-docstring::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::skip issue::skip news::type-documentation::,"Fixes a sentence in a docstring that's missing a verb; also adds text to indicate what the lines of code mean.  (I initially wondered if it was intended to be an example usage.) I noticed this error in Python 3.5, but we probably don't need to backport it any further than 3.7.::Just a comment from a no-English-speaker:  Why don't write ```suggestion it verifies that this elements occur the same number of times. ``` Because, I think that you are talking about the ""elements"", so I think that would be better reference to that elements like `this elements`::`the` is ok with `elements` and because it's plural, maybe the correct article is `these` or `those`::ohh! yes! `those`. ::",1017abce8fa5db24ba7bcebbfbd70dd5ca3f601d::
https://api.github.com/repos/python/cpython,12100,bpo13096::2.7,0,merged,CLA signed::,Properly free the buf variable. <!-- issue-number: [bpo-13096](https://bugs.python.org/issue13096) --> https://bugs.python.org/issue13096 <!-- /issue-number --> ::,eb1258d4b3aea71bfdc06f71806d9693bb669617::f314e35bda8951f75d8c84db43bf6fa994e9b4ef::
https://api.github.com/repos/python/cpython,12092,openssl_110j::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::skip issue::skip news::type-tests::,"Also update multissl test script to use latest OpenSSL 1.0.2, 1.1.0, and 1.1.1, as well as latest LibreSSL 2.7 and 2.8. Signed-off-by: Christian Heimes <christian@python.org>::",ed847b3aeb064bda4a4dd6e5c879bc385df2ce54::
https://api.github.com/repos/python/cpython,12064,fix_pdb_stepping_in_bpo_36130::master,0,merged,CLA signed::needs backport to 3.7::,<!-- issue-number: [bpo-36130](https://bugs.python.org/issue36130) --> https://bugs.python.org/issue36130 <!-- /issue-number --> ::,b717f74863437e9f22756f65766727a91b7dbca7::
https://api.github.com/repos/python/cpython,12000,bpo35512::master,0,merged,CLA signed::needs backport to 3.7::,"String target provided to `patch.dict` can be reassigned after the decorator decorates the function. So resolve the target before function call to ensure the new reference is patched instead of patching the old reference stored in the constructor. <!-- issue-number: [bpo-35512](https://bugs.python.org/issue35512) --> https://bugs.python.org/issue35512 <!-- /issue-number --> ::I'd expect this `test()` call to be wrapped in a try/finally to put `support.target` back like it was, regardless of what happens in test.::Why not just: `self.assertEqual(support.target, {'foo': 'BAZ'})` ? (I guess the same goes for the assertions inside `test` too?)::Is the setting of `self.in_dict` on the line below still needed?::I think it's needed since it's self.dict is passed in https://github.com/python/cpython/pull/12000/files/f2abf2667ca660f11db62bb4038529ada8d52925#diff-ff75b1b83c21770847ade91fa5bb2525L1652 and other places in the class.::Yes, tests might use the variable in the future. Good catch. Thanks.::You could always add the following here, so be super sure: `self.assertEqual(support.target, {'foo': 'BAZ'})`::Sure, added with d7f5c11162a5b3809d8a5864ea359e904e14f671::",38f69302c299b1315a25dbf7795844e37cc557e0::2d5018f40444c95aee4e3fd7044c3116b9a0b050::f2abf2667ca660f11db62bb4038529ada8d52925::b06e17dc1b0100e249dbba4b58d723d6cf36fe36::d7f5c11162a5b3809d8a5864ea359e904e14f671::
https://api.github.com/repos/python/cpython,11988,fix-issue-36035::master,0,merged,CLA signed::needs backport to 3.6::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-36035](https://bugs.python.org/issue36035) --> https://bugs.python.org/issue36035 <!-- /issue-number --> ::",6f38797d6b3dd76ab797f2d31775c52e69bb0c0f::2ca80d30b81cbde9b548a53defc90c132bce9b3b::8974e89f995d5ba6572aa48277d4da5e92d01912::5828fa9ec970cc0f9c12d674f6c878c4a9950103::9f927ead0f2f3fa1416e89e5d124069c9c6bd27c::
https://api.github.com/repos/python/cpython,11847,fix-issue-20523::master,0,merged,CLA signed::needs backport to 3.7::,"Previously pdb checked the $HOME environmental variable to find the user .pdbrc. If $HOME is not set, the user .pdbrc would not be found. Change pdb to use `os.path.expanduser('~')` to determine the user's home directory. Thus, if $HOME is not set (as in tox or on Windows), os.path.expanduser('~') falls back on other techniques for locating the user's home directory. This follows pip's implementation for loading .piprc. Co-authored-by: Dan Lidral-Porter <dlp@aperiodic.org> <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-20523](https://bugs.python.org/issue20523) --> https://bugs.python.org/issue20523 <!-- /issue-number --> ::why do you test with '~' ? normally, you won't get the tilde but the full path. I have an other PR but you can check with my code and fix yours. https://github.com/python/cpython/pull/11855 ::`envHome != '~'` is true if `expanduser` succeeded in finding the full path.::yep, but in which case can you have '~' ? never::Your solution is cleaner. We took the approach of modifying the fewest lines. ::in fact, expanduser will replace `~` by the $HOME, $HOMEDRIVE, $HOMEPATH, etc... for Windows and unix-like, so normally, you won't get the `~`. my approach is different because I wait for an exception and sometimes, an exception is better than a condition.::You _could_ have `~` if the expansion fails (e.g. if it can't find anything resembling a home directory):  [""If the expansion fails or if the path does not begin with a tilde, the path is returned unchanged.""](https://docs.python.org/2/library/os.path.html#os.path.expanduser)::yep, it's possible. 1. use python3 for the documentation (https://docs.python.org/3/library/os.path.html#os.path.expanduser) 2. if you can't read the file you will get an exception, in this case, you will get OSError or Exception. ::Updated to use your cleaner solution ::I think to an other solution: ```python for path in (os.path.expanduser('~/.pdbrc'), '.pdbrc'): with contextlib.suppress(OSError), open(path) as rcFile: self.rcLines.extend(rcFile) ``` but I am not sure. need to test it.::",75c7c58fcff4697d51c4788e99927ec3e7b3e956::4dddb2fd44b6735c8a030eaca1f37e9c21b2982c::
https://api.github.com/repos/python/cpython,11828,slice_richcompare::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::,"Fix a crash in slice_richcompare(): ensure that the 2 temporary internal tuples used for the comparison are not tracked by the garbage collector, since they use borrowed references. The crash (or assertion error) occurred if a garbage collection occurred during slice_richcompare(), especially while calling PyObject_RichCompare(t1, t2, op). <!-- issue-number: [bpo-35961](https://bugs.python.org/issue35961) --> https://bugs.python.org/issue35961 <!-- /issue-number --> ::Does it makes sense to add a small comment here explaining why we untrack the tuples?::",a70b336aa737256854e930bf18aa89a8b34def70::
https://api.github.com/repos/python/cpython,11756,issue35859::master,0,closed,CLA signed::awaiting review::needs backport to 3.7::type-bugfix::,"Fix wrong capturing groups in rare cases, the span of capturing group may be lost when backtracking. These bugs exist since Python 2. * macro `MARK_PUSH(lastmark)` didn't protect `MARK 0` if it was the only available mark * jump `JUMP_MIN_UNTIL_3` needs `LASTMARK_SAVE()` and `MARK_PUSH()` * jump `JUMP_ASSERT_NOT`  needs `LASTMARK_SAVE()` and `MARK_PUSH()` Please read review guide in issue35859: <!-- issue-number: [bpo-35859](https://bugs.python.org/issue35859) --> https://bugs.python.org/issue35859 <!-- /issue-number --> ::Why `search()` is used instead of `match()` or `fullmatch()`? `ab|a` is equivalent to `ab?`. Is there a reason why use the former? If there is a difference, it is better to use `.b|a` instead, because `ab|a` can be transformed to `ab?` by the RE compiler in future versions.::`X{0,}?` is equivalent to `X*?`, so this test is redundant.::Nice catch, this PR doesn't fix the problem. ``` >>> re.match(r'(ab?)*?b', 'ab').groups() ('',) ``` The correct output should be: ``` >>> regex.match(r'(ab?)*?b', 'ab').groups() ('a',) ``` I will recheck the patch tomorrow.::@serhiy-storchaka > Why `search()` is used instead of `match()` or `fullmatch()`? > `ab|a` is equivalent to `ab?`. Is there a reason why use the former? ""Because it can be"". `(ab|a)*?b` is a reduced test case for a real regex I found during my research.::",54e0f71e1b85bbfe45c715216c5384bea45d2116::ddf7ac25c1425d5932bd2301f2b6befa1d8fc6d8::1a8891ead65622d4ab2e821f17107b042ef9db99::8bed8d95c0fe2e34cfe6d81bd8b43970a5f5b134::e5fb79008470e7c1df737721d0fa734c43bd1f54::
https://api.github.com/repos/python/cpython,11732,fix_35321_frozen_spec::master,0,merged,CLA signed::needs backport to 3.7::,"This fix correctly sets the spec origin to ""frozen"" for the _frozen_importlib module. Note that the origin was already correctly set in _frozen_importlib_external. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-35321](https://bugs.python.org/issue35321) --> https://bugs.python.org/issue35321 <!-- /issue-number --> ::",eb3dac66b4fe3c598536c05fa8173df2491315e1::7a2619ddd770aeec2b074c1f56e7f2e4f93ea9b2::
https://api.github.com/repos/python/cpython,11727,subprocess.run-arguments::master,0,merged,CLA signed::needs backport to 3.7::type-bugfix::,"I think we can skip news for this one. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-34886](https://bugs.python.org/issue34886) --> https://bugs.python.org/issue34886 <!-- /issue-number --> ::",6030d7dd896b2ebea091c5a96c23c7fb6db4c8c3::5655630a9a5f59f71f65e7534750033b84530c31::
https://api.github.com/repos/python/cpython,11593,memcpy_ppc64::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::,"Fix memoryview on 64-bit PowerPC for floats: workaround a GCC bug when a 64-bit double is casted to a 32-bit float followed by memcpy(). The memoryview pack_single() function is miscompiled by GCC 8.2.1 on PowerPC 64. Pseudo-code: void f (double d, char *target) { float f = d; __builtin_memcpy (target, &f, sizeof (f)); } When optimizations are enabled (-Og or -O1 at least), GCC rounds towards zero rather than rounding to nearest: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88892 Use the volatile keyword to prevent the optimization which uses the wrong rounding mode. <!-- issue-number: [bpo-35752](https://bugs.python.org/issue35752) --> https://bugs.python.org/issue35752 <!-- /issue-number --> ::",f8e92c73df8108be76dc89937eb0e85e7c4686fd::
https://api.github.com/repos/python/cpython,11576,mask-timeout-error::master,0,closed,CLA signed::awaiting merge::expert-asyncio::needs backport to 3.7::,"The exception is normal behavior, `ETIMEDOUT` can be set by NAT gateways and IP bridge hardware for example. <!-- issue-number: [bpo-34148](https://bugs.python.org/issue34148) --> https://bugs.python.org/issue34148 <!-- /issue-number --> ::",3df5d0f036f8ff77672bd1d4fd473f5ce816ac6c::
https://api.github.com/repos/python/cpython,11556,stray_quote::master,0,merged,CLA signed::needs backport to 3.7::skip issue::skip news::,(requesting [no-issue])::,eaa9c4d78eef6cc20104843db8c5c1bcc8c3c947::
https://api.github.com/repos/python/cpython,11508,test_ssl_min_ver::master,0,closed,CLA signed::awaiting changes::needs backport to 3.7::type-tests::,"test_ssl.test_min_max_version() no longer tests the default minimum_version: it depends on the OpenSSL configuration, it is not always equal to TLSVersion.MINIMUM_SUPPORTED. <!-- issue-number: [bpo-35045](https://bugs.python.org/issue35045) --> https://bugs.python.org/issue35045 <!-- /issue-number --> ::",28d5e03ae572e14b846e40ca9a8dd3538912618a::
https://api.github.com/repos/python/cpython,11461,test_asyncio_sendfile::master,0,merged,CLA signed::needs backport to 3.7::type-tests::,"test_asyncio/test_sendfile.py now resets the event loop policy using tearDownModule() as done in other tests, to prevent a warning when running tests on Windows. <!-- issue-number: [bpo-32710](https://bugs.python.org/issue32710) --> https://bugs.python.org/issue32710 <!-- /issue-number --> ::",0840f5a718378bc675fba9e9a09d19226bed8934::6807c0ec5833e57d96de1c1e1879cbb865b812ce::
https://api.github.com/repos/python/cpython,11409,rm-readme::2.7,0,merged,CLA signed::skip issue::skip news::type-documentation::,"Thanks to @ned-deily for pointing this out. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::",ab205e065d3577c9e9411db7c675633bebb0269a::
https://api.github.com/repos/python/cpython,11339,selfind::master,0,merged,CLA signed::needs backport to 3.7::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-35591](https://bugs.python.org/issue35591) --> https://bugs.python.org/issue35591 <!-- /issue-number --> ::",184b6d5c9147f0dd3b22fd783685491029fc775b::953ac16b30056833a77211015cb3af21b163352b::
https://api.github.com/repos/python/cpython,11338,bpo35602::master,0,merged,CLA signed::needs backport to 3.6::skip news::type-tests::,"<!-- issue-number: [bpo-35602](https://bugs.python.org/issue35602) --> https://bugs.python.org/issue35602 <!-- /issue-number --> ::Looks not robust and cumbersome. Better to not pass a transport but 1. Create a future in MyProto 2. Set the future to some value (`None` for example) in `proto.connection_made()` 3. Wait for the future after `loop.sock_connect()` call By this `prepare()` always return a connected server protocol, the change should eliminate race condition::Done in 1773bbd. Thanks for the suggestion! :)::",2a6ee9cc82a2a7ff740a1eb39328d652ea967ddc::1773bbde7aa239f0f79d2769395d359ca86505f5::
https://api.github.com/repos/python/cpython,11273,bpo21478::master,0,merged,CLA signed::needs backport to 3.7::,When a function is passed to `create_autospec` then a function object is returned where the mock is attached to the object with the attribute name `mock` . Set parent against the mock attribute so that calls to children are propagated to the parent. <!-- issue-number: [bpo-21478](https://bugs.python.org/issue21478) --> https://bugs.python.org/issue21478 <!-- /issue-number --> ::What was the outcome here before your fix?::`mock.mock_calls` would be an empty list though the `child` mock was called. It's a case where `create_autospec` returns a function object with mock attached to it in the `mock` attribute instead of a mock. ::,ea1faeba50c801027ba81258defe9f85f68111d5::
https://api.github.com/repos/python/cpython,11272,patch-1::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::skip issue::skip news::type-documentation::,"The section I propose to change implies that constant time means that all keys have to have different hash values--i.e. no collisions. This is not the case. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::Sooner or later, [someone will complain](https://stackoverflow.com/questions/9214353/hash-table-runtime-complexity-insert-search-and-delete) that the new docs are incorrect because dictionaries have O(n) worst case performance., so some sort of qualifier is still necessary.  We get O(1) performance in the typical case when the hash values are evenly distributed; however, it is easy to construct degenerate cases with a catastrophic pile-ups at a single value. Consider using the [wikipedia wording](https://en.wikipedia.org/wiki/Hash_table) where we mention both the average case and worst case.::",67ae21a5147c743f76a800fc50eff6519108ba8c::5e450438d6a9d43e707c55bb00c05f56f2484a7c::24c6e1c64d7b05b6682adb5f2e8a3eb5423da194::
https://api.github.com/repos/python/cpython,11219,profile_opt_ldflags::master,0,closed,CLA signed::DO-NOT-MERGE::awaiting merge::needs backport to 3.7::,"""make build_all_generate_profile"" doesn't add PGO_PROF_GEN_FLAG flags to LDFLAGS anymore. Remove also LDFLAGS=""$(LDFLAGS)"" from ""make profile-opt"". <!-- issue-number: [bpo-35499](https://bugs.python.org/issue35499) --> https://bugs.python.org/issue35499 <!-- /issue-number --> ::",2bb4f8ce66246e795b58715080bfc3f402f0e476::
https://api.github.com/repos/python/cpython,11216,fix-buffered-random-docs::master,0,merged,CLA signed::needs backport to 3.7::skip issue::skip news::type-documentation::,"The sentence, “It inherits BufferedReader and BufferedWriter, and further supports seek() and tell() functionality,” is misleading: it suggests that BufferedRandom is special in that it is seekable, whereas BufferedReader and BufferedWriter are not. However, this is not the case: assuming the underlying raw stream is seekable (which is equally a requirement of BufferedRandom), then BufferedReader and BufferedWriter *are* seekable. Remove the misleading sentence. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::",2b99f16e7a43160cf00ba7a44573035066d085f2::b2c003584975259bd0c4f325d84eb177f72a8af4::
https://api.github.com/repos/python/cpython,11206,htmlhelp-index-fix::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::needs backport to 3.7::type-documentation::,The Microsoft HTML Help Compiler creates broken CHM file if the index contains an entry for `'''` (triple single quote). <!-- issue-number: [bpo-35482](https://bugs.python.org/issue35482) --> https://bugs.python.org/issue35482 <!-- /issue-number --> ::,3334e8beceeb24732a260becaee68c9a02f38a12::
https://api.github.com/repos/python/cpython,11177,patch-1::master,0,merged,CLA signed::OS-windows::needs backport to 3.6::skip news::,"Adding an extra S to ""EXTERNAL_DIR"" (line 27). <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-34855](https://bugs.python.org/issue34855) --> https://bugs.python.org/issue34855 <!-- /issue-number --> ::",4e8ffb6113ef605d71d5960366b1dfca7affbedf::f26b5be04a1936c3715e5a976a0a83628ae161f7::286f2ff38f89f49d088e58ad3cbd44f1d288ae82::
https://api.github.com/repos/python/cpython,11048,bpo17185::master,0,merged,CLA signed::needs backport to 3.7::,"* Set `__signature__` that helps `inspect` module to detect the signature of the mock. <!-- issue-number: [bpo-17185](https://bugs.python.org/issue17185) --> https://bugs.python.org/issue17185 <!-- /issue-number --> Edit : Removed partial bug into a separate issue ::Let’s change all these asserts into ‘self.asserEquals’ it will give a better error report when the test fails.::Just a suggestion, to follow the way the code is written, what do you think about: If is partial: Pass Elif is a class: ...::Can you also validate the signature output for this one?::Can you use rst markup to reference inspect module? I think it is :module: just before the backtick. ::My bad. I didn't put much thought into refactoring the tests. I think you meant `assertEqual` since `assertEquals` is deprecated.::The signatures are different since `inspect` includes self and mock skips self as per the patch which I think is the correct way to approach partialmethods?::I wrote it this way initially but I will be simply adding `pass` or `func = func` like a no op inside the clause and adding `if not` this way seemed reasonable but I too felt while writing since it kind of seems to make the diff large indicating larger change as in skipping a lot of code. ``` if isinstance(func, functools.partial): pass elif isinstance(func, type) and not as_instance: # If it's a type and should be modelled as a type, use __init__. ```::Add :mod: that references inspect and verified it locally. Thanks 👍 ::Changed assert statement to use `assertEqual`. Thanks.::Please, cross reference with `functools.partial` and `functools.partialmethod` using rst markup.::Can we check also against a combination of `partial` and `partialmethod`?::As you wish, it was just a suggestion as that way it could read as each branch is a different type.::Sorry, by combination do you mean a `partialmethod` taking a `partial` function as an argument? An example would help here.::I have changed to the suggested branching. Yours looks more inline with the flow 👍  I think adding a comment on no-op would help. How about ""For partial objects use the underlying function signature instead of using constructor's signature as below""?::What's special about `functools.partial`? It's a bit scary to special case one particular type, when there may be other that behave like it. (also curious how this relates to my original bug report?)::Again, concerned about the special casing here...::Would be good to see some assertions about `mock_calls` here.::Please split this out into its own test case.::`mock_calls` assertions here too please.::Ideally, I'd prefer to see this split out into its own bug and PR. I'm much less certain about the situation with `partial`, could this be a bug on the partial side that needs fixing there instead? (are partials being created with an incorrect `__signature__` or is this something special about what Mock is doing?)::`functools.partial` with a signature of `(*args, **kwargs)` returns a partial object and thus when mock checks for signature it checks if it's an object and sets `func = func.__init__` which sets the partial function spec as that of the constructor instead of the function. So to skip this I check for func to be a `partial`. `inspect` can detect partial objects but since we set `func = func.__init__` it returns the constructor's signature. So this is a case with mock being incorrect with partial.::",ce36d179c55740c4e91df07e3764fe48a4dfb3cd::e73a54954ae441fd0afcf175c9e5eee51053aa3e::bf5289b318b952ad0e383a1c93f6627ee01b22ac::3b3f8054c87d6883e25862949b3dcdf935eb4b06::21bfc2c65d248a926b828c3687ae3507bdff862f::68bdf07d11dd982c7ebacabbbceef9e55500e40f::
https://api.github.com/repos/python/cpython,11039,fix-issue-31823::master,0,closed,CLA signed::awaiting changes::needs backport to 3.7::skip news::type-documentation::,``` [bpo-31823](https://bugs.python.org/issue31823): remove outdated changes from `subprocess.__init__` doc ``` <!-- issue-number: [bpo-31823](https://bugs.python.org/issue31823) --> https://bugs.python.org/issue31823 <!-- /issue-number --> ::,18b7d994f465c42e72bdd7dacbbbed1861858294::
https://api.github.com/repos/python/cpython,10973,pu/wraps-side-effect::master,0,merged,CLA signed::needs backport to 3.6::needs backport to 3.7::,"When a `Mock` instance was used to wrap an object, if `side_effect` is used in one of the mocks of it methods, don't call the original implementation and return the result of using the side effect the same way that it is done with return_value. This PR also includes a refactor via commit 1a28aab, as after the change the code became even harder to read. The refactor (as it now uses common code), also fixes the test case `test_customize_wrapped_object_with_side_effect_iterable_with_default`, as when adding the tests I realized that if a mock has a side effect that is an iterable and one of the values returns `DEFAULT`, it will default to `return_value` if present but not to the value in `wraps`, which is surprising given that if instead of an iterable it is a callable the behaviour is as expected to call `wraps`. Let me know if you want me to take this to a different PR and issue, as it might be worth properly explaining it. I can also get the fix without the refactor, but it'd get quite messy, basically copying the last lines into the iterator part of `side_effect`. <!-- issue-number: [[bpo-3533](https://bugs.python.org/issue3533)](https://bugs.python.org/issue35330) --> https://bugs.python.org/issue35330 <!-- /issue-number --> ::Why is this a mock? Is it important that `Real` has an `attribute` or could this just be: ``` class Real(object): pass ``` ?::preference -> precedence::That was indeed a bad *copy-paste*. 😞 .::",68e9ffb10a0399ba67f9a8d3cb9e911a12fdc5d0::acf3e6730a20fea7427c7a14ecb3f188a37eb6e0::08d129117841813ce1d459947419a0c46f8520a7::
https://api.github.com/repos/python/cpython,10852,bpo35378::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::needs backport to 3.7::skip news::type-bugfix::type-tests::,"Co-authored-by: tzickel <tzickel@users.noreply.github.com> This PR fixes a regression introduced in https://github.com/python/cpython/pull/8450 that manifests as a hanging process when using a `multiprocessing.pool.imap` or similar iterator objects without keeping a reference to the pool itself. <!-- issue-number: [bpo-35378](https://bugs.python.org/issue35378) --> https://bugs.python.org/issue35378 <!-- /issue-number --> ::Shouldn't we self._pool = None here as well ?::I don't think we can get here without _pool already being removed.::This was left from when I was testing against a race. Thanks for the catch!::You wrote ""This PR fixes a regression introduced in PR #8450"" which comes from https://bugs.python.org/issue34172. This issue is a reference cycle fix if I understand correctly, but here you create a new strong reference to the pool. I see a risk of creating *new* reference cycles. No? Before https://bugs.python.org/issue34172 fix, ApplyResult didn't hold a reference to the pool: you add a **new** reference. Maybe it's fine, but I'm just concerned that this PR might reintroduce a bug similar but different than  https://bugs.python.org/issue34172 I don't understand why you need to hold a strong reference to the pool.::We need to hold a reference to the pool because the regression is that the pool may be destroyed while one of its iterators is still alive if no references are left to the pool. In this case, iterating over the iterator of the pool hangs. The solution links the lifetime of the pool to the lifetime of the iterator (basically: keeping the pool alive while the iterator is alive). When the iterator is exhausted, the references to the pool are cleaned. The issue in #8450 is different, is a reference cycle between the Pool object, and the `self._worker_handler`  Thread object, which is more fundamental. In this case, the cycle needs to exist while the iterator is alive: all objects that depend on the pool need to make sure that the pool is alive while they are still in use (a non-consumed iterator...etc), otherwise hangs or inconsistent state can happen. This did not happen before #8450 because of the reference cycle between the Pool object and `self._worker_handler` prevented the pool to be destroyed. This PR makes sure to break the cycle when the pool objects are not needed anymore.::More long explanation available here: https://bugs.python.org/msg330996::Why the additional `cache` argument?::",4b4d921ffc835d69531ec3b4925ce6929fc88f5d::171dab0f805bbff681363ae910f0b733ad0b5a76::
https://api.github.com/repos/python/cpython,10519,mainconfig_copy::master,0,merged,CLA signed::needs backport to 3.7::skip news::,* Fix _PyMainInterpreterConfig_Copy(): copy install_signal_handlers * Add _PyMainInterpreterConfig_AsDict() * Add unit tests on the main interpreter configuration to test_embed.InitConfigTests * test.pythoninfo: log also main_config <!-- issue-number: [bpo-35233](https://bugs.python.org/issue35233) --> https://bugs.python.org/issue35233 <!-- /issue-number --> ::,bd918b2421873f920c41d0dadff552ee05eea8c7::6a87e1ec2b37a12169f663e9b97a9faa9bc99cea::
https://api.github.com/repos/python/cpython,10403,revert-9b6adac::master,0,merged,CLA signed::needs backport to 3.6::,"This reverts commit c64583b6d3e8516a8cd2b5f84fc1e300bfac2206 as it broke several Windows buildbots: Original PR: https://github.com/python/cpython/pull/10295 Broken buildbot links: https://buildbot.python.org/all/#/builders/32/builds/1707 https://buildbot.python.org/all/#/builders/113/builds/733 https://buildbot.python.org/all/#/builders/40/builds/1137 https://buildbot.python.org/all/#/builders/130/builds/420 https://buildbot.python.org/all/#/builders/3/builds/1634 Revert policy: https://discuss.python.org/t/policy-to-revert-commits-on-buildbot-failure/404/4 Custom run in the buildbot of this revert: https://buildbot.python.org/all/#/builders/22/builds/4 <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-32409](https://bugs.python.org/issue32409) --> https://bugs.python.org/issue32409 <!-- /issue-number --> ::",7308a801600ba975d7d119d2349b56407c361d7a::
https://api.github.com/repos/python/cpython,10372,patch-8::master,0,merged,CLA signed::awaiting review::needs backport to 3.6::needs backport to 3.7::skip issue::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::",d8432cb003bc8e88abbfcb98f325a3d846361229::
https://api.github.com/repos/python/cpython,10279,bpo-24303::master,0,closed,CLA not signed::awaiting merge::needs backport to 3.6::needs backport to 3.7::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-24303](https://bugs.python.org/issue24303) --> https://bugs.python.org/issue24303 <!-- /issue-number --> ::",5bb09f05b2e9ea617f72d027634a680755f9386a::
https://api.github.com/repos/python/cpython,10101,os_docstring::master,0,merged,CLA signed::needs backport to 3.6::needs backport to 3.7::,"<!-- issue-number: [bpo-29341](https://bugs.python.org/issue29341) --> https://bugs.python.org/issue29341 <!-- /issue-number --> ::I find this a bit confusing. I would rewrite so it says: ``` Clarify in the docstrings of :mod:`os` methods that path-like objects are also accepted as input parameters. ```::I think this needs an ""a"": `or **a** path-like object`? (The same for the rest of the methods)::Could you add a `.` at the end of this sentence?  :) `Path to be tested; can be string, bytes, or a path-like object.`::Sure! :)::For consistency with the use of the oxford comma (the comma before the ""or"") in other docstrings we should use it here as well: ```suggestion path can be specified as either str, bytes, or a path-like object.  If path ```::(If you apply this suggestion using GitHub, remember to regenerate the clinic file)::",b7a0287571503ae523b2f8fbd70d37ebe4b6c76d::975a0f85798c19a76fbe09dd132046e26498f302::e4b72c215e0a65209064acc1165f6457875374b0::e0d86deceb619a7c81fa2b0047df419ba76c7864::ff8b2ce0984fbd632374d0fd55e1243a6a823d95::ab4cf0c470276f69c42a5b4b88afba355d4919b7::ff2f999d65c88ee759f96bb360dd3f2d600a948e::b90402c522c2e00a3088f67eb05d0e12e5389b60::1e622047294b62a14a629b4fcf521cebe66cbd30::e74d94c694ec7dec546bdb7a3a6e09d99030ad6a::522f9de58b8ab4a42bcca4c36f265e1d64e8162f::
https://api.github.com/repos/python/cpython,10081,patch-2::master,0,closed,CLA signed::needs backport to 3.6::needs backport to 3.7::skip issue::skip news::,"Context.reduce() exists in cdecimal, but was not merged in cPython. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::",96acefa73864485f5d1a095096cead4772a2ba97::
https://api.github.com/repos/python/cpython,10043,fix-35046::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::skip news::,<!-- issue-number: [bpo-35046](https://bugs.python.org/issue35046) --> https://bugs.python.org/issue35046 <!-- /issue-number --> ::,81bc4cd802d52c361122d7f7c46dffef29ba937f::
https://api.github.com/repos/python/cpython,10040,timedelta-int-subclass3::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::needs backport to 3.7::skip news::type-bugfix::,Fixes assertion failures in _datetimemodule.c introduced in the previous fix ([bpo-31752](https://bugs.python.org/issue31752)). Convert microseconds to int before converting it to timedelta. <!-- issue-number: [bpo-35021](https://bugs.python.org/issue35021) --> https://bugs.python.org/issue35021 <!-- /issue-number --> ::I suggest adding comments as to why the order matters in these PyNumber_Multiply calls.::It does not matter. I just restored the order before bpo-31752.::,405773291c99e72ab13185d7c54f1642c01fe834::
https://api.github.com/repos/python/cpython,10011,bpo35031::master,0,merged,CLA signed::needs backport to 3.6::skip news::type-tests::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-35031](https://bugs.python.org/issue35031) --> https://bugs.python.org/issue35031 <!-- /issue-number --> ::Can we add a comment explaining this line?::Done in 93e66f6::Can we please restrict this to FreeBSD? @1st1 In the long run, we should have parametrized tests to test TLS 1.2 and TLS 1.3 behavior. The protocols behave differently on mulitple accounts. For client cert auth, we even need to have TLS 1.3 with and without PHA.::Done in f777fa5f2bd16ac8d60416eaa64eb9d2cf84ffac::",d462e4093e3134cc137f64d8ed1828227ab4aea4::93e66f6a94b421b576c7958e48146a67f4c89a33::f777fa5f2bd16ac8d60416eaa64eb9d2cf84ffac::
https://api.github.com/repos/python/cpython,10002,fixordereddict::2.7,0,closed,CLA signed::awaiting review::,"While this seems to fix the issue, it would be nice to have another set of eyes on it. Especially, pop and popitem were not backported (since the implementation seems to be different, but I might be wrong). Also would be nice if there was some sort of testing framework like numpy has for detecting leaks like this: https://github.com/requests/requests/issues/4553#issuecomment-431514753 <!-- issue-number: [bpo-35030](https://bugs.python.org/issue35030) --> https://bugs.python.org/issue35030 <!-- /issue-number --> ::",c1f704c53767eb18a58b664f4bc2932fd610afeb::
https://api.github.com/repos/python/cpython,9958,timedelta-int-subclass::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::needs backport to 3.7::skip news::type-bugfix::,The result of multiplication and division of an integer and an instance of integer subclass can be not exact integer. The type of the right operand takes precedence when it is a subclass of the type of the left operand. Use PyLong slots explicitly to get an exact integer. <!-- issue-number: [bpo-35021](https://bugs.python.org/issue35021) --> https://bugs.python.org/issue35021 <!-- /issue-number --> ::,cf0595448ab5fa37134b9045fcc9c7f220bc0206::
https://api.github.com/repos/python/cpython,9916,33947_dataclasses::master,0,merged,CLA signed::needs backport to 3.7::type-bugfix::,"<!-- issue-number: [bpo-33947](https://bugs.python.org/issue33947) --> https://bugs.python.org/issue33947 <!-- /issue-number --> ::This kind of shim is no longer needed.::I'd rather keep the same style import as above: just import the entire module, and use (for example) `functools.wraps` below. Then just insert the modules in the list above and get rid of the blank lines. Also: `reprlib` uses `_threading` to get to `get_indent`. Why not do the same here?::Please add a comment that this is using the logic from `reprlib`, and indicate we're duplicating the logic here to avoid importing `reprlib` when it might not be needed elsewhere.::I don't think this merits a docstring, since it's a function internal to this module. Please just make this a comment. That's what's done elsewhere in this module.::I suspect these lines are too long, but I haven't looked in a real editor yet. I'm not sure if it's worth the hassle to reflow this, or not. Maybe just introduce a temporary variable to hold the return value of `_create_fn`? ``` repr = _create_fn(... ) return _recursive_repr(repr) ```::Needs a space after the colon to be consistent with the rest of this module. This applies throughout the new tests.::Please add a test with 2 different classes that reference each other (so, `C` references `D` which references `C`). I guess we should also have a test with 3 classes, just for completeness.::The blurb should not reference the issue number. Please me this say ""dataclasses no longer raise RecursionError in `__repr__`"" (but without the backticks, which I added just to get this to display correctly in this comment).::This should be `f: ""D""`::And this should be `f: C`. Or, you can use quotes, but it's not longer a forward reference.::This should be `f: ""D""`::This should be `f: ""E""`::This should be `f: C`. Again, you can use quotes if you want to, for consistency.::Thanks for changing this. But I've been thinking about it, and I think I like `dataclasses now handle recursive repr's without raising RecursionError` better than the previous version. What do you think?::",c99a57dcd01a704d842ec46a585d5cb03f230d57::e5c636a0311b753050968ed3cf0245698ff3b06d::bc6357cc4d081d6f952f66e4b5fe58675c915e6d::
https://api.github.com/repos/python/cpython,9842,bytes-from-list2::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::needs backport to 3.7::type-bugfix::,Constructing bytes from mutating list could cause a crash. <!-- issue-number: [bpo-34973](https://bugs.python.org/issue34973) --> https://bugs.python.org/issue34973 <!-- /issue-number --> ::,a90e326a4a38cbcfb47b2e83d7e8965735c60fd3::
https://api.github.com/repos/python/cpython,9787,timeit-docs::master,0,merged,CLA signed::needs backport to 3.7::skip news::type-documentation::,"The timeit module has a feature that is documented, but seems so hard to spot in the docs that it is easily missed. This PR adds a small example to make this feature easier to spot. See python-ideas discussion: https://groups.google.com/forum/#!topic/python-ideas/0HzCEj0H9NM <!-- issue-number: [bpo-35138](https://bugs.python.org/issue35138) --> https://bugs.python.org/issue35138 <!-- /issue-number --> ::I think replacing :mod:\`timeit\` with :func:\`timeit.timeit\` would be better. Currently, it sounds like the timeit module accepts a callable.::> for the statement and setup parameters The name of the first parameter is actually *stmt*. Also, we mark parameter names as italic in the documentation. So, setup should be \*setup\*.::This behavior doesn't seem to be tested in https://github.com/python/cpython/blob/master/Lib/test/test_timeit.py It would be nice to add some tests, so we won't break it accidentally in the future.::Maybe ``` :func:`~timeit.timeit` ```? Or ``` :func:`.timeit` ``` if it works?::See also example at the bottom of this file: ```python print(timeit.timeit(""test()"", setup=""from __main__ import test"")) ``` It is much easier to pass just function: ```python print(timeit.timeit(test)) ```::Note that using a callable adds an overhead for calling a callable. It can be significant for simple testing code.::```:meth:`.timeit```  is used in other places in this file I see, so I'll use that I think.::@berkerpeksag bold. check.::@berkerpeksag isn't it tested? But what is `test_timeit_callable_stmt` doing then?::@serhiy-storchaka sure, but that wasn't the point of that example?::``` :meth:`.timeit` ``` refers to the Timer method inside the definition of the Timer class, while the examples above use the module-level function.::It is a bit silly to discuss complicated examples if there is a simpler way. You need to use more complex ways only when you can't just pass a callable. For example when you need to pass arguments to the tested function. Simpler way should be documented first, and more complex way should be shown for cases that can't be solved in simpler way.::I guess... but it's also hard to come up with complicated examples that are also meaningful. Ok, but how about this: ```python def test(x): """"""Stupid test function"""""" L = [i for i in range(x)] num_iterations = 100 if __name__ == '__main__': import timeit print(timeit.timeit(""test(num_iterations)"", setup=""from __main__ import *"")) ```::Oh ok. ::ping?::",adbbaba421e45fa288c9e74c4983a2e855e31e89::04165f919eae644beaa1bcfd900e8633171680d5::ef83cc7e87cfd3eabb6e4dfc5e348eaa8cb3896e::
https://api.github.com/repos/python/cpython,9700,master::master,0,merged,:robot: automerge::CLA signed::needs backport to 3.6::needs backport to 3.7::skip issue::skip news::type-documentation::,Make the encoding/encoders mention congruent.::,a515edf54969c673634dd2cc610e6d7286c8f3c2::
https://api.github.com/repos/python/cpython,9625,fixcorodocs3::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-34802](https://www.bugs.python.org/issue34802) --> https://bugs.python.org/issue34802 <!-- /issue-number --> ::",8bcb46364670b76c97afc3ebd33f2066886af984::
https://api.github.com/repos/python/cpython,9615,patch-1::master,0,closed,CLA signed::awaiting changes::needs backport to 3.7::type-bugfix::,"See https://bugs.python.org/issue27195 for details of the crash. Backport PRs will come after this one is approved. <!-- issue-number: [bpo-27195](https://www.bugs.python.org/issue27195) --> https://bugs.python.org/issue27195 <!-- /issue-number --> ::This test is repeated in 6 test classes: ``` test_minimal_buffer (test.test_memoryview.ArrayMemorySliceSliceTest) ... ok test_minimal_buffer (test.test_memoryview.ArrayMemorySliceTest) ... ok test_minimal_buffer (test.test_memoryview.ArrayMemoryviewTest) ... ok test_minimal_buffer (test.test_memoryview.BytesMemorySliceSliceTest) ... ok test_minimal_buffer (test.test_memoryview.BytesMemorySliceTest) ... ok test_minimal_buffer (test.test_memoryview.BytesMemoryviewTest) ... ok ``` Move it to more appropriate place, so that it will not be repeated. For example in OtherTest. Also, this test is not crashed on Python 3. Add a reference to the issue.::Please remove the empty line. Unfortunately multiparagraph news entries are not supported.::",7789bf79740d4a0b73744fc5bbee4f387ad2fe02::
https://api.github.com/repos/python/cpython,9579,3.10::master,0,merged,CLA signed::needs backport to 3.7::skip issue::skip news::,"As per https://mail.python.org/pipermail/python-committers/2018-September/006159.html <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::",5a6e932533beca9a707d94a7618d533a7e233606::
https://api.github.com/repos/python/cpython,9385,3.7::master,0,closed,CLA not signed::awaiting review::needs backport to 3.7::skip news::type-documentation::,"Method `gather` require to close parenthesis, but it is being closed twice. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-33649](https://www.bugs.python.org/issue33649) --> https://bugs.python.org/issue33649 <!-- /issue-number --> ::",22fb674fa4c8343c84c25d93f23a1d6315d0f4f5::8d6b6d1f1d76bf709317c316634d3000ce200864::ba10da137347b330da119e42ca5ceb401eb70432::c3bdea4c6ca8861e144802b8e319fe266941790f::df9f633f94e97fc43e0235cb2be076491ea7f67f::125371d2c617d886e1a15b8f940ce29124cdc79c::5cca6f9fbead1fae27c37204f345a9465cc88959::c87b1aabbd660d111afde326fbbd897fb689a7b8::bcea15a6110737aa87147222b108281bcb41866b::6b1b6e43856775ce7f4503548eb12d88641cbd31::151820e7a0ebe50b3d4fa64e22623c5470f1c56f::0a1db32949b4813e9ac04e672fcb5bc97072a428::020f5ab7170836b277ac8fef2ce7438ae0145caf::48d2aeb009f8e58b1efae00ee0e225951b58737e::9beed0c36f4ce990ded095575ba3124e2264dbbe::b89776fb1b000f73a62850bea78e5b3434bd7e9a::4ada0cff5315627eae8208adf0209b479f497b8d::08c1da71030e0d6019b3493e0ffaf060a6aa5d8e::cf21d0031dd84544d4108765553c2b03dfe726c5::c721472fb83d1f7c7606bcf33ba2d42d6127a764::3fc12f0e2ad9ba49243f5a43a8803018b2ff5904::5594f1dfbe214151b75405be042e9420a3649241::bbddd667a9087f5cfb9e8f9d81fb6d2f75465ba1::0a820a203032e3b1b9413afba45acd8f79f27f81::43c2fabb2fe7760be462e008b39169cf16c28b4c::bfa8a358e2cec40484c4655138ca3c6b10f8462a::892df9d15aae08d4033faeb34698e3c550c85854::6020d98beaf6b9945beb7560f9a1df361e0ba4dd::68833dcbd45d30a779907db56d8fe0bb9c88f49a::296e5720921f1837dfd09a16457ac5bba7cb1676::339e0c1296c61c9dbc1f8f880c5c668bf4007e5e::cede1e19bdfb8ddc3d9c0ab536643073f20e53f0::97c079c19a83881c88b56b95c545207f9ab51f6e::49abd307d222e6fe85b5175eed6b6f87fc656a8d::03ec4df67d6b4ce93a2da21db7c84dff8259953f::a7a6eac966dd52db1762c8f455c1e208df36feb4::25326dea8b907fdd2bf087baab3c31b617438f2e::7638eb892a50d101fe06342da180f0ab63a0b334::92ce6a64afcebd414def3b80b18b56448792a587::7cf7541aa4bcaab771bc0691f1ede993f601e379::81f85d09f4cc83fc35452afcca75baaf64831b22::c7b91d95d8890a4bafefa797f194a1ae3f0f0abb::14f58f0ff823ba71e3f21803c509d348626b6089::05a72f15f76301c505a91728f0818b421fddd290::ba1810e1ec8973e48128e17845b981d8894c0550::96bba049f4bd4d030a72326fd1a67586454f6e2c::635338248f967728f13b7bc4b9969aedff51eef6::4e166ffd29b675238ccd94964743f6cb206d2235::25b87d35675301a929982db6d37836666af4f715::519fc551d7778ac698033846bb052a12b7d491e2::220afffb683af1ba9e04c37535cfaa41348e9ebb::0b2716918345b2bff0bb5c36086d5de368125536::23a3297ff1076d91ca6d70caadf9606f1fee0776::6f7fd963a0ed6ff2fd0bf85cd40d2161b3487614::ec02c58f5a6fdb06b769f53255fcb5d393812160::973649342cee3869409f341ff0f0e3d2b1547c2a::89352b08aad447d046551fa0cd374becd7941c91::3cc505e950cee25dc7429fdf8c1787483605649e::21ed29ac290b10d31dcac947f9246ae4d8b94a86::0964aac446d1ddf9fb61ddeed3b8586f2a619d2e::7cbde0e09daba4259565738e48f141851287fe29::c6801b48a1964d87a77f1303e0c6ddf31f54259b::23355445625b8b41030dbda9decaf2f4aa7035a6::2be0124b820729eacc1288950b824e336bd3a4a6::83b449d754f4da3be107b508392ef5180f105c8b::8764a6ffda896af4586f07b55d7df916f86dd9b0::1e98d87961ec752a1623135f4d7e8a41820ae256::c3af73d580888b4d444264e79dce6ec0818522cd::78c54de575fd121d91749c2316fef1949d76fb07::0126b7d7356785b13ad0b3a735f56939148906f4::3dc8cdf56d056fb7722061ac3b3863e8a385b8de::6332de10c7ff703d7f9cef62969aa68e7d28d075::5753b13cb949b939b2b29cec5e2d646f9a30db44::990de2f4ca734ddaa196e2af64caafb9c77f29e0::ad4f64d58c020016bd438de0e863a0d31d0f0dac::6c89a9a4c7d1804e16038f9ee3a0b2efaa4bdee6::a0605182042c64762a4b8c9f3eccc3f0e300ae8c::399b47fdf6346d15579d363ddfd0661eb906699e::d5c75be55504fae1ff510eed66cddbd27bfbdbe2::a621f406402e05febb302cf31962e9d2d747d8f6::9ecbe3321f7bb3726017a053e583ca507d4453fc::47957dab94a4efa2fee61c9a8193f78300950769::3e4b68875917a4605b45918f9e3232730fed9399::172a81e42bc30da1bd4027db9cd3b6172469f7fe::d9fc795487f74531ea43760469cc215858d0d908::60586de02de074a33c015e5a013d85d0b17e7e61::0f9df886d6d1c6b239a2861a0ad0d56bb59e3922::50d78677899d315c17dc9a14d2f94a013046c71a::66ff9d270c0ff026c13667a4ca7e51ec7494fe62::34f59a7a7843d8e2c1922c830a99b5b7a022f4be::ffd6364745dbeb7269c0e4376b63bf76bc44bcc6::b4d71c91498da4ae3a5c6196b44f28a05076fb80::28dbfb2fd343f404d0e45cc185f01181e08c7ac5::39fcd9949832323b672f7ff05fd1498b8844a329::2a2a3f56f510844a5266f74f347a3fa3baee8ba2::e65ec491fbaa14db61a6559eb269733616b0e7f0::0c90d6f75931da4fec84d06c2efe9dd94bb96b77::e610c4f9984d50b45eb00e04c73c4208c0542a3b::416f3435c536c5197f5c6a23504955cf717df200::e39fb207f26f8007e95fcf120f5ff1cb7372791a::a1ff5f9031dc81b2c368def037fc0e88f5bc48b7::1c6df83e9318ab4ef8e32b805b8226b1324e1ffd::b481aeeff7ce7cb1a469d17214ca0d42610fea24::5799e5a84c78eac672e5f5f4f3fd2d903ba51a9d::7bd52a1564b0bace50d14b60aabc5010aaafda56::fac49762c53822c40f24dcb5ca4945cffdf40cd9::292030354aaf362113c64a402094fc928c8441e0::fe8f90aa3ca3f277cac634cdb96b829039225c6b::426135b6748c36ffcc346dbccf5be863776df52f::56410810d325973927068a8f5b18378f37da7e1b::ea8835fb302447da82f265a5bc0f785353100271::c614121224a5a81d958643471720645b1cb3166e::8fc21c80af73226de875886132e0c32a4ffb32c5::39c1253bd12d253d8d6d009a1ee1c3729c5ebde4::6b145085225d4b114b4422f6d3c6e859e75b97d7::7e0153e166cf3f3e1fa08131830f28c1cb83f731::393151e241e0c2b1826e3aefac0beb42e04e6ea8::32e58fc32188753d2a3604feacdf9540fe9515fb::6c140609770ba161a5bb8aa36ecef0d38e6642df::e3228a3f44e382b6cdd2b5e001b651347013a7d3::2275b773ebfacb94f6a9c81d6a8b9d54771a68e8::64336dc0a5907b04fe85a911cd1b8be9b663587e::962051eeb0ba486b8ffe4082779b4fa432e3dfb2::bf8e9d18dd75f58ce3b9761763ae10c0800b43d8::870247a57e84ccaa3f6a6ce955f4168632b967a8::05d89ef785ab3cb6dd28f10f312f68f8e6a163ce::eeece3cd331a1f57fabd55e026f2ea26bc43333c::0fd6f832a9c30404bf595a4af36e171d11fab024::2e4ae8f1b3147d7f0a461b4ffdde9bcc9e6a2083::0e1e8dbb0b99ec78f4567382428fdd46e2244d40::1e596d3a20a1a9d1ef15218ef33795bc9e651b7a::2011dd77b6bd6f02f54ceef9a80a22bd373b66e2::d1f0ccc7e65ef7abeab779f5d0aca2f18eb9b2a4::985dcd49cab44bba63ffebe413a9ef17b3da5fa7::3152bc36fd1a8ab349d6802e9b48dd88a35b3620::b8e7319d39bf44355bf60f9bbec07cfbbe56739d::042082692b7fab7361a8c9d0fb792532bb77e293::80a0ebaa8385988b1d2dbbbb71ed1f548fc32ad7::1f7d0470c26aa6fa2b924700f895cd6ee0a575fa::89b1654e0bc7bc69709dca86dd4c92eb7122ac7e::609c033f436a79fb54811514fa4cda83b4d2800d::1d3d688b9899085473c455dbfdb6acdaa6ee7b99::609062a23f018f4ffc180a88435d61f871165518::a59036365b304d43bba0f050fa9a7d76100e0ae1::d9e1abf8d36da19f074f16046c4a9b5fe54cc083::a8c749df59a088300b9b4cfde41423c020b78651::3e6020c4ddf7acea91efdae770320c6ce06b93db::c7f543520161b895796a571881da74e805d0b1eb::4973f767891e8eb14925a58313085e14cf6ea621::0dc75f04575a6bfb2b072f62e5233444aea23e89::7b0ed43af55c1e2844aa0ccd5e088b2ddd38dbdb::1f9621cb9b0d1f5c9d28e095db31d8c12e58c932::d5f017bbd65f37ac53fd3c6c439a53155eef2475::46af206ea4e9d67375559f8c584a996f70b7b7e5::80e9fedcf579537c5bc51ff3c9c18d14d9598564::6dc8f0543749a6cedb548ae3df76547edfd9a6b9::388bd4bd7622f6781260ed388f7c76b673adb0e1::42a1ca65d00ba59fe63cc65df0ff297a885e61b8::15dadacabf6a1c62e9920b6a42ff8936ea1830f8::d6725fcdd54cb3c72201eaa8841dd72d84f5f71d::2caf86ff6d72d625f86db78c6e90fdaf09e8f703::55b8c4bff8fad63474fdb39dd7af462991013b57::fa3fd4cb181120007aefc408366c0cef6fb62f9d::2cf33161f7cb4ca726c74fcfa2d6db27073953d8::e3f20828f6b7f59baa2d25437176ee32ae7700b0::65ef7425a32ee411d8047a4fad0fc6bb9ff733b1::98c49c6ab239875e35a3c271bc8fabde6c9be804::0b9ea4b211b24464c7d38f63e45e51c275c52dcd::9668d4e6af184b6c120b37c1a3c2f74999a2c98d::5df3658f2db1585607d41c25093a2a7d2a4de347::4da71814b327cb2ad47a01710360cd21ba636352::89c9043ee09d89c99f70e61d8fc0ba45e255b055::f6d70b8b1708382f09b008bd1cd8792e00b82afb::4c532da1209bd20ba07f18448134f32ace8c54f7::f4c865eda8f57dedaeaa16530ab6f1024bfb94de::84b0129b5e0a0e22aad22ae8db2e3833a228aa57::1e921236d7ecc77299d34380d6a2159e9db05a1a::7aa3eadca2a50ce651ce603d6100b05bb7106f1c::20a8392cec2967f15ae81633c1775645b3ca40da::e8ca8806a9f47b3bac4ae1c6b8a54c47d1aad8f3::5b17d7fccd8f0b4d5030b03924eb00904585ba31::2d3f2dc9f8376415a31a6de260ccbe6a86f2816d::f862f3abaed59b83763707ae529f0fe487961ba9::854b740910f20441b6a42c2047d5f0ad0451404e::18d7dff1bb6f5ca7060b0b2e2a2e74493619178f::73994077250bd70385cb8e7a92f24874129369d1::9835696ec4c57a9a30f1c11cfb4c5d3e121bf97c::77b92b15a5e5c84b91d3fd9d02f63db432fa8903::7a633ed79cfba2cfc0f80410ddcaeecadc2030e9::9c9ac9e69735a2854c2e0d41948385110b139abe::e9119a5de67d5525f3be957fda239143453513bd::d53f1cabe8837697df4acb70c9c6537461b5eeda::49020174305ca3dc90a811b03a05f44873297c61::c0d63bf73b35df374e6e66c08b0e297fb828d744::4d5d219a7ae1351e6f6e7c1c9845a499927d1219::011141f312f11b35ac163d9d52fe48e4bb61a814::f3d00ae3be27ede2fc834d9d2b0028c9ad39f492::037582eb7f4d61604ef2dcc72f896117588eeb3c::6df2005b3999e6087dc524bfdf27b0dc5896d172::9c4a63fc17efea31ad41f90d28825be37469e0e2::2110f78d92522499836a928d268704fdc5f7a037::2bc4eea8f6675b157adcaea4a59d982d58a5e7ae::c9ece5f4a961d4963ed42aefa934eb20f9a7222b::3235fac0d7d94ad6464a162261c18a424829d2e5::3e648f8371e342ccfa663ad77e82a538fcc8c9fb::e02ca4270ef258162215e345c23025bec27f9eb0::536e45accf8f05355dd943a6966b9968cdb15f5a::d289df13d376d69764884982c236dbc3879ad43c::e2b40f4ce954ea3d35a73541029b2253abd9d245::d8bc7a666b1309aa5669980e35e7429071f3f7d3::4007e4e207bb6cf934864a9012a14022474e36df::01ce535ba97b8a1e96853b3822ebca75ddcbebb3::cadb66e173ded86ebc85b54889db48f66e7af592::72c34cf6dd5fb206fe4d407ff603468af466fd2e::329ea4ef7cc3a907a64c6f0702fc93206b6744de::b608fcd444c00ff37a19d34e4eeadb1221fb6436::ec4d099b9f1951b08d1a53181c278173ff6a0cc1::0aef909d630ff40614cde0c58796a8bdf66c67eb::98344a4f2f09ddae295352ec54fae6388446eeaf::ea2fcd3db65b796ad3eda1619a903cefb1aa9363::90f7d455b7f4bd53d3af11cb951347c9c8230399::35c94c765bf46e93a0d84e39dbc6eaaba40b1f36::b2ff9a9f9298761985aa85aa3f42421ce6effb9e::1550b7311216082748ddcdc048ee0374ce004513::218b4bf47410ff8ab46b68461267fe10db18aee1::305056494d7e1debec3df268b8925725b0110293::b2a6aa32f34b6d77c15f175a9df7271a05519bf9::2b162941c0793e0dd5533ee3090901cba9d8cf7d::d0491cd7fd8a22093ab1ae54eee51fb0e7805c0d::a8f189f4571ca16e85d322cb45d1599526dbd9b4::c974051d737a25a4c2066d1bb2832286adb12dd9::bd979b2d2b30ff2bfa44bdbbaba9d7a30900102c::78aa3d8f5204bc856d7b2eb67288cf90c6a30660::ca2fa2841f8e3ce5213a0e8c0abc1d0fdc7d386b::b2ecb8b486d85d11ee7b523dfd2c76b2820bbe83::c83c375ed907bdd54361aa36ce76130360f323a4::51dbae867e82014f9af89662977e4981463c51e8::e3f6aa7fe48b91f4ff619b2a51d473249d620bcb::1d3078849381335008379e3de96d5a81d2131113::e2c0aea670d603b187733606a4601d77f355bc47::efdf316d23c2bc81f499c46faaba5e1b49509afa::f8e34eee74871b3343f6c3545bce41242ba378e8::1229664f30dd5fd4da32174a19258f8312464d45::b7f58d7f80f80f0e20cad84773f158a379a19280::a8a8cc71c7fc7585e15652ff7ab354665f787d5a::c63d81b3feaa008a6be4c7c83c324174e8d95c24::512d7101098b971837cbb406942215244f636547::144f1e2c6f4a24bd288c045986842c65cc289684::1f4ea580675d7b30d3906d78c500997d7d96995d::ca0820b62481c00cd625883ee8b39433d9b2a852::
https://api.github.com/repos/python/cpython,9247,benjamin-lchmod-fix::master,1,merged,CLA signed::needs backport to 3.6::skip news::,"A fix for 883702ebb8bbfa749ef0040d1b58d6222bf589ee. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-34652](https://www.bugs.python.org/issue34652) --> https://bugs.python.org/issue34652 <!-- /issue-number --> ::Apparently `AC_CHECK_FUNCS` defines `HAVE_*` preprocessor macro when a function is found, but `AC_CHECK_FUNC` does not. So `AC_CHECK_FUNC(lchmod)` should be changed to `AC_CHECK_FUNCS(lchmod)`. Then above deletion from `pyconfig.h.in` should disappear.::",264d7afe5508780adeea6a16f49c2ae98ad709d2::4b428b54824c8574168e1e332aa0f4632963fee8::
https://api.github.com/repos/python/cpython,9221,benjamin-regrtest-threadinfo::master,1,closed,CLA signed::awaiting merge::needs backport to 3.6::needs backport to 3.7::skip news::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-34647](https://www.bugs.python.org/issue34647) --> https://bugs.python.org/issue34647 <!-- /issue-number --> ::",09048c9331eb5840b5df841dae2ffb91d988dd04::46b1a8994b81f5ff70f59d9fc4bf89da6510aa90::
https://api.github.com/repos/python/cpython,9214,bpo-28994-atexitmodule-2.7::2.7,0,merged,CLA signed::skip news::type-bugfix::,"It was backported in 0cc43df05e36655220468953e838169966b94ebd. I believe the test added in that commit can stay, however. <!-- issue-number: [bpo-28994](https://www.bugs.python.org/issue28994) --> https://bugs.python.org/issue28994 <!-- /issue-number --> ::",c964eaacae425ef0d26debfa371dffc949daefdb::a14d7588d055105774c9e82c568c170678d65daa::
https://api.github.com/repos/python/cpython,9147,bpo-34536::master,0,merged,CLA signed::needs backport to 3.6::,raise ValueError if _missing_ returns invalid type <!-- issue-number: [bpo-34536](https://www.bugs.python.org/issue34536) --> https://bugs.python.org/issue34536 <!-- /issue-number --> ::,06537eb037a5d32e91682d481f010a3f4ff124d7::831d96935b6e6b02e20efc256143c929b4c712dd::4663a454df8358e41cf769d8df040a01cee5dbb4::962dc40392c94482f5423cc6d6477454e2b3b23e::
https://api.github.com/repos/python/cpython,9001,use-proper-python-casing::master,0,merged,CLA signed::needs backport to 3.6::skip issue::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::It may be worth to write zip as ZIP if it means the file format. This spelling is used in the zipfile documentation and some other places. But this is a separate issue or PR.::",e949eee17e1d5f7b197439ca360c0ee3d83dc035::14d24c82c41e94112d0b816909b6391f9cfe8cd4::bb212f46712684b08394046fdf0e41d78851e582::816ba941e46efc779f99e83df1c74d409a6be30a::
https://api.github.com/repos/python/cpython,8867,argv_utf8::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::skip news::,"[bpo-34170](https://www.bugs.python.org/issue34170), [bpo-34207](https://www.bugs.python.org/issue34207): Fix pymain_init_cmdline_argv() * Add _Py_DecodeUTF8() * pymain_init_cmdline_argv() now calls directly _Py_DecodeUTF8() if the UTF-8 mode is enabled Previously, pymain_init_cmdline_argv() always called Py_DecodeLocale() which depends on Py_UTF8Mode, whereas this variable is no longer modified when reading the current configuration.::",7cc220b28c4b20956a9ba758d183e035493e3736::
https://api.github.com/repos/python/cpython,8850,bpo-34454::master,0,closed,CLA signed::awaiting review::needs backport to 3.7::type-bugfix::,"The missing NULL check was reported by Svace static analyzer. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-34454](https://www.bugs.python.org/issue34454) --> https://bugs.python.org/issue34454 <!-- /issue-number --> ::I don't think this try/catch is the right solution here. We should fix the actual problem.::",e2dad4a4f7b94cd5a227752739007d4c3193f42b::
https://api.github.com/repos/python/cpython,8821,bpo26901::master,0,closed,CLA signed::awaiting changes::needs backport to 3.6::needs backport to 3.7::skip news::type-tests::,The argument clinic now only works correctly when a filename is provided as it relies now on `destination_buffers`. Notice that this patch only adapts the test suite to make it work with the last implementation of the argument clinic. I suggest that the next patch will be: 1) Run the argument clinic test suite as part of the CPython test suite so this does not happen again. 2) Modify the argument clinic to work without providing the filename. I prefer to have a working test suite before modifying the argument clinic itself. <!-- issue-number: [bpo-26901](https://www.bugs.python.org/issue26901) --> https://bugs.python.org/issue26901 <!-- /issue-number --> ::,a62840105c06604a4fbe5464d0adc1e97c515571::f264f842994f322507c71a12b6b2a9b378480f7e::
https://api.github.com/repos/python/cpython,8682,26515-multi-phase-initialization::master,0,closed,CLA signed::awaiting changes::needs backport to 3.7::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-26515](https://www.bugs.python.org/issue26515) --> https://bugs.python.org/issue26515 <!-- /issue-number --> ::Missing the leading `:` here (that appears to be what the CI error is complaining about)::With the modified example, this macro hasn't actually been referenced yet. Instead, the forward reference needs to explain that this list of slots will then be added to a `PyModuleDef` struct defining the module as a whole, which is described later.::This is a problem if the module is loaded more than once (for example, in multiple subinterpreters). In that case, `spam_exec` would be executed multiple times, each time calling `PyErr_NewException` and setting `SpamError` to the newly created error object. This pointer needs to be part of per-module state.::",351e087c029e58e853a849d98f423c0cdb0244b4::
https://api.github.com/repos/python/cpython,8681,bpo-34236-test_capi_backport_err::2.7,0,merged,CLA signed::skip news::type-tests::,This was backported by mistake in ef19fd2. <!-- issue-number: [bpo-34236](https://www.bugs.python.org/issue34236) --> https://bugs.python.org/issue34236 <!-- /issue-number --> ::,3a891c5d75d43f86752027f5c760e5266f4813c2::
https://api.github.com/repos/python/cpython,8666,34171-cover-cleanup::master,0,closed,CLA signed::awaiting core review::needs backport to 3.6::needs backport to 3.7::skip news::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: [bpo-34171](https://www.bugs.python.org/issue34171) --> https://bugs.python.org/issue34171 <!-- /issue-number --> ::",d40f993ccdca76c8a7ef6308c9a71cb3747b8a43::
https://api.github.com/repos/python/cpython,8636,doc-list-remove::master,0,merged,CLA signed::needs backport to 3.6::skip issue::skip news::type-documentation::,"I changed ""It is an error"" to ""It raises a `ValueError`"", as I found it more suitable and more consistent to the documentations of the other methods.::",16cea277115a6bd7609a24436c6d6cfc0563a251::
https://api.github.com/repos/python/cpython,8601,24564-shutil-xattr-einval::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::type-bugfix::,"https://bugs.python.org/issue24564 <!-- issue-number: [bpo-24564](https://bugs.python.org/issue24564) --> https://bugs.python.org/issue24564 <!-- /issue-number --> ::There is no benefit from using a set instead of a tuple. Building a set is more expensive than builtin a tuple. ```suggestion if e.errno not in (errno.ENOTSUP, errno.ENODATA, errno.EINVAL): ```::```suggestion if e.errno not in (errno.EPERM, errno.ENOTSUP, errno.ENODATA, ```::```suggestion errno.EINVAL): ```::",ce39c8d8b4661b468e17bc3978d6315f4ed37389::
https://api.github.com/repos/python/cpython,8528,bpo-34255::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::type-tests::,The title says it all: this patch uses a different way to locate the _testembed helper for test.test_embed to ensure that this tool can be found when building outside of the source directory. <!-- issue-number: [bpo-34255](https://www.bugs.python.org/issue34255) --> https://bugs.python.org/issue34255 <!-- /issue-number --> ::,bb414974dc55f39f7a380d54eeb13438ea18cf19::
https://api.github.com/repos/python/cpython,8419,revert-test_tkinter::2.7,0,merged,CLA signed::skip news::type-bugfix::type-tests::,<!-- issue-number: bpo-34189 --> https://bugs.python.org/issue34189 <!-- /issue-number --> ::,b89b203a24805bb674b5a1efe7e336fbb0ad87ce::
https://api.github.com/repos/python/cpython,8324,bpo-34134::master,0,merged,CLA signed::needs backport to 3.6::needs backport to 3.7::skip news::type-documentation::,"<!-- issue-number: [bpo-34134](https://bugs.python.org/issue34134) --> https://bugs.python.org/issue34134 <!-- /issue-number --> ::The right markup here would probably be `:meth:`, not `:func:`.::",19b445455c5a0626dafeca244a00f6af170f3111::
https://api.github.com/repos/python/cpython,8284,bpo-33668::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::type-bugfix::,"<!-- issue-number: [bpo-33668](https://bugs.python.org/issue33668) --> https://bugs.python.org/issue33668 <!-- /issue-number --> ::I suggest to move the above comment inside the `if` branch. Seems `:dd` is a typo of `Add`. This `if isclass(object):` can be merged with other `if isclass(object):` at the beginning of the function.::Is this still needed?::`travering` -> `traversing` And I would add ""only"" before ""traversing"". And maybe add a markup: ``` :func:`inspect.getmembers` ```.::I think it would be better to change the name (and perhaps the code) of the test. There is nothing specific for modules. Instead we need to test that the instance attribute `__bases__` doesn't break `inspect.getmembers()`.::Line longer than 79 chars; please fix the PR to follow PEP 8::The `types` module is already imported in `inspect.py`. Why another import?::There's no need to prepend the class to its MRO here: `(object,) + getmro(object)`; the class is always part of its own MRO: Try running: ```python class A: pass print(A.__mro__) ``` I suggest to try to fix this and see how that works out.::BTW, I remember leaving this kind of comment on almost all of your PRs. Please configure your editor to trim the whitespace and show you a ruler at 79 characters.::I'd split this test in two (they are testing different behaviours)::@1st1 I'm sorry, it always seems like I made a mistake.::Should not it iterate `mro` instead of `object.__bases__`? Or `_static_getmro(object)`?::Indeed, it should apparently use one of those.::Why not `self.assertIn('ham', attrs)`? Add also test for `inspect.getmembers(B)`.::@serhiy-storchaka Just checking `self.assertIn('ham', attrs)` does not fail when iterate `__bases__`.::",9461e298b5c070eb7e50e9a23c886682e2172646::
https://api.github.com/repos/python/cpython,8265,test_thread_time::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::skip news::,"These functional tests were too fragile: we already tolerate to only get a delta of 20 ms whereas the test runs a busy loop during 100 ms. The test failed on a buildbot because the delta was only 19 ms. Reducing the minimum delta would make the test meaningless, so remove it instead. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: bpo-33723 --> https://bugs.python.org/issue33723 <!-- /issue-number --> ::",29667d55e0d5a06f2a176e9a51fbf8e18fee5ee8::
https://api.github.com/repos/python/cpython,8242,err_clear::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::needs backport to 3.7::,"* bpo-34080, bpo-34084: err_free() now always releases 'text' memory allocated by PyObject_Malloc() to fix a memory leak on parsing error.  Previously, err->text was not released (by err_input()) on E_ERROR error. * Remove also ""with Barry as BDFL, use '<>' instead of '!='"" static string error message (previously set to err_ret->text) because in practice, err_ret->text is always set later. Add also an assertion to make sure that err_ret->text is only set once. * Replace old PyObject_MALLOC() and PyObject_FREE() aliases with PyObject_Malloc() and PyObject_Free() function calls. Co-Authored-By: Serhiy Storchaka <storchaka@gmail.com> Co-Authored-By: Xiang Zhang <angwerzx@126.com> <!-- issue-number: bpo-34080 --> https://bugs.python.org/issue34080 <!-- /issue-number --> ::PyObject_FREE is used in err_input.::I guess that you are asking me to replace PyObject_FREE with PyObject_Free(): done::`goto cleanup` is used even in branches when msg_obj is always NULL. Either replace them with `return`, or merge #8222.::I don't see anything wrong with calling Py_XDECREF(msg_obj) when msg_obj is NULL. It's a common try/finally-like pattern applied to the C language. Moreover, I wrote this PR to fix a real memory leak, not to cleanup the code. Don't hesitate to propose a new PR once the memory leak is fixed, if you want to clean up the code further. I prefer to write the shortest PR to be able to backport it to all branches.::",622453192f7c385e79a1560fdb7fa6e2899cdd64::fdf73c9036aad00b0ca5a309734cd2a62329bab8::
https://api.github.com/repos/python/cpython,8099,issue16968::master,0,closed,CLA signed::awaiting changes::needs backport to 3.7::skip news::type-tests::,"The old test_main function would cause any dangling threads or processes to be reaped silently rather than allowing regrtest to detect and warn about them.  Since the shutdown methods of the module should do all of the cleanup for us, we want to get those warnings if they don't. <!-- issue-number: bpo-16968 --> https://bugs.python.org/issue16968 <!-- /issue-number --> ::I don't think that this change is correct. If support.reap_children() is called ""too early"", since it uses a non-blocking waitpid(). The function should be called as late as possible, so after the context manager completes. Maybe it would deserve a comment.::LGTM :-)::Oh wait. You removed @test.support.reap_threads. Maybe it would help to add setUpModule() / tearDownModule() to call threading_setup() / threading_cleanup() (warning: the API is little bit special, search for examples in other tests). You may also call test.support.reap_children() in tearDownModule().::",02c632d624e0f63aea66a6c49e4f43045e06a3ac::96e51044f822fd255def743c50c9362b5cae2e5a::
https://api.github.com/repos/python/cpython,8037,bpo-34015::master,0,closed,CLA signed::awaiting review::needs backport to 3.6::needs backport to 3.7::skip news::type-documentation::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: bpo-34015 --> https://bugs.python.org/issue34015 <!-- /issue-number --> ::",8aede66e025bc5b4626b73819535b37e5354e120::174d6f82428c80f06cb406bb823bcb3ed65c4f2c::
https://api.github.com/repos/python/cpython,7916,bpo-33881::master,0,closed,CLA signed::awaiting changes::needs backport to 3.7::needs backport to 3.8::needs backport to 3.9::stale::,"I measured how it affected the performance by creating a dataclass with 10000 members. python.bat -m timeit -s ""from dataclasses import make_dataclass"" -s ""arg_list = [chr(k) * i for k in range(97, 123) for i in range(1, 500)]"" ""make_dataclass('a', arg_list)"" The performance didn't change, both before and after the changes it takes around 14.5s. <!-- issue-number: bpo-33881 --> https://bugs.python.org/issue33881 <!-- /issue-number --> ::",6319dda5b25f4cb61ff32cb25d868c3b6155520a::cf253fffbc7b6d6f7a8b234e3798db8bd1b781d1::f68cc5a5e59bcb39d84b32eb8e70977a84761231::e4f4e3998ac264a682652310187c04aa10a31360::
https://api.github.com/repos/python/cpython,7817,bpo-33783::master,0,merged,CLA signed::needs backport to 3.7::skip news::type-documentation::,"This should make it easier to spot the existence of this class <!-- issue-number: bpo-33783 --> https://bugs.python.org/issue33783 <!-- /issue-number --> ::We don't require a NEWS entry for small documentation patches.::Style nit: Please follow the existing style in `Doc/library/random.rst` and use 3-space indentation.::Other than berker's nits, this looks fine and is ready to apply.  I added backport tags as well.::I know, but then `bedevere/news`  mark the test as failing, in the all-PR view of GitHub the test appear as failing and then the PRs tends to not be reviewed... removed.::Oops, yes, nice catch. done, and vimrc updated accordingly to not do that again.::This wording suggests to me that the class is only useful as a base class for subclassing, whereas I think it's also useful to instantiate and use directly.::I would like to leave this information in the intro section. Please just make a stub entry for ``.. class:: Random([seed])`` with just a note that this class implements the default psuedo-random number generator.::Like So ? That feel a bit short, but I'll trust you.::Replace ""This class implement"" with ""Class that implements""::",8aa1750ed50aaea8dee893c7f2888a9b79730b61::7bdb23b7100c24202bf684fd282fea7647108e98::88419e36af9e486bd310bb97aebaaaae9b24157c::b3d0fd60d13268cabeae068890f6076925c57d14::
https://api.github.com/repos/python/cpython,7509,bpo-33802::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::skip news::,"In Python 3.6, defaults were not interpolated.   Interpolating defaults in 3.8 and 3.7 causes a regression.  I don't love this fix, but it seemed like the simplest thing possible to restore the old behavior. <!-- issue-number: bpo-33802 --> https://bugs.python.org/issue33802 <!-- /issue-number --> ::",fdfdf41e1915f40c167f4632ddfdeeb1813f5c1b::
https://api.github.com/repos/python/cpython,7486,fix_proactor::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::,Refactor Proactor's data receiving code path.  The idea is to always use `recv_into()` and to emulate the old `Protocol.data_received()` path. This way there is no read cancellation race or data loss in set_protocol() and there's no performance degradation for both `Protocol` and `BufferedProtocol`. This PR removes some outdated and now irrelevant proactor mock tests (most of the removed mocked tests have an alternative working test for BufferedProtocol). <!-- issue-number: bpo-33694 --> https://bugs.python.org/issue33694 <!-- /issue-number --> ::,8e40d2f2717e8d2b115c7306415ddc2cf7201f5a::
https://api.github.com/repos/python/cpython,7481,issue-33743::3.7,0,closed,CLA signed::awaiting merge::expert-asyncio::needs backport to 3.7::skip news::,`asyncio.Task.all_tasks()` is the deprecated function. Master already has the fix. <!-- issue-number: bpo-33743 --> https://bugs.python.org/issue33743 <!-- /issue-number --> ::,5224a2c6ca502728892721f68905107ca49752aa::
https://api.github.com/repos/python/cpython,7389,unittest_verbose::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::needs backport to 3.7::skip news::,"Skip TestBreak.testRegisterResult() when run in verbose mode. support._run_suite() uses TextTestRunner in verbose mode, but TextTestRunner.run() calls registerResult(result) which makes the test fail with ""odd object in result set"". <!-- issue-number: bpo-33746 --> https://bugs.python.org/issue33746 <!-- /issue-number --> ::",e0f1b4f4c29f7fe0537ddbe97bf67ce95e5aa370::c7fa7837ac6953a3dbe673982bdf13f89ec67cfb::
https://api.github.com/repos/python/cpython,7226,fixfork2::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::skip news::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: bpo-22087 --> https://bugs.python.org/issue22087 <!-- /issue-number --> ::",fa2a9a1862ae507b7ee1665348f5da0c95d91eaa::
https://api.github.com/repos/python/cpython,7210,fixci::master,0,merged,CLA signed::needs backport to 3.6::skip issue::skip news::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> ::",7001696faae7207c08c412c4d101e4193b08aec8::
https://api.github.com/repos/python/cpython,7209,fixgather::master,0,merged,CLA signed::needs backport to 3.6::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: bpo-32684 --> https://bugs.python.org/issue32684 <!-- /issue-number --> ::I don't follow why future cancellation should be propagated but if children are tasks nothing should be done.::See https://bugs.python.org/issue26923 and, specifically, `Task.cancel()`: if the task is done/cancelled, we don't raise `CancelledError`. Similarly for `gather()`, if all of its tasks are already done, we don't raise it. This seems to be a super rare edge case.::Got it.::",fce5d4f8d02065b4560801de07937ce93f942b8a::c2648852234c39a4aa323789e2a3d6f05e5bccb6::
https://api.github.com/repos/python/cpython,7161,fixcy::master,0,merged,CLA signed::needs backport to 3.6::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: bpo-33672 --> https://bugs.python.org/issue33672 <!-- /issue-number --> ::Do you have any insights into the conditions under which this can be observed? Is this a problem with older versions of Cython, or is there anything we can do to improve the situation?::Not sure about `__qualname__` and `__name__`, I got reports from uvloop users about this a couple of months ago.  `__code__` set to `None` should be easily reproducible with latest Cython -- ideally, `__code__` should either be set to a code-like object or not set at all.::I don't follow why not push all this logic into `format_helpers._format_callback`?::No need a nested function here, top-level private `_is_running` is enough.::From my perspective replacement `running` variable with explicit `return coro.cr_running` etc is more readable. BTW when `running` is not `bool`?::`format_callback` expects a Python function. This works on a coroutine object.  This whole function should be moved to `format_helpers.py` though, I just don't want to do this in 3.7::I want to group all these functions somehow -- this whole formatting code should probably be rewritten or simplified in 3.8::cr_running and gi_running should be bools or 0 or 1... So shouldn't be a problem.::Ok, got it.::",0bd51ce21d9acb6d388a7b57fe558130a32c60fb::9d2d9d3eb38f806a7535ec4ff6198fbf675364c8::
https://api.github.com/repos/python/cpython,7157,asyncio_tls::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::skip news::,"test_asyncio: Increase test_start_tls_server_1() client timeout from 5 seconds to 60 seconds, and server timeout from 10 to 120 seconds. The timeout is only used to check if the test hangs, but the 5 seconds limit is commonly reached on slow CIs like Travis CI and some buildbots. <!-- issue-number: bpo-32458 --> https://bugs.python.org/issue32458 <!-- /issue-number --> ::",8aa07d5bc3005516fa31e78029fa994b631f4704::895ed6ba6df8353cafdf4724b5c3e861af33bfa1::
https://api.github.com/repos/python/cpython,7098,uuid-create-freebsd::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::type-bugfix::,<!-- issue-number: bpo-32493 --> https://bugs.python.org/issue32493 <!-- /issue-number --> ::,3e3677eba50fceb5a205c07a0367819baf418411::
https://api.github.com/repos/python/cpython,7079,tls13-misc::master,0,merged,CLA signed::needs backport to 3.6::,"TLS 1.3 behaves slightly different than TLS 1.2. Session tickets and TLS client cert auth are now handled after the initialy handshake. Tests now either send/recv data to trigger session and client certs. Or tests ignore ConnectionResetError / BrokenPipeError on the server side to handle clients that force-close the socket fd. To test TLS 1.3, OpenSSL 1.1.1-pre7-dev (git master + OpenSSL PR https://github.com/openssl/openssl/pull/6340) is required. Signed-off-by: Christian Heimes <christian@python.org> <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: bpo-33618 --> https://bugs.python.org/issue33618 <!-- /issue-number --> ::sen*t*::",a526cc7c98059bf9f5edf07f06c4c68a026150fb::
https://api.github.com/repos/python/cpython,6902,importlib-resources-all::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::skip news::type-bugfix::,<!-- issue-number: bpo-33537 --> https://bugs.python.org/issue33537 <!-- /issue-number --> ::,734af170e16ab3bcefc15dbfc863dc3e78a810e0::
https://api.github.com/repos/python/cpython,6836,optimize-ensure-future::master,0,merged,CLA signed::needs backport to 3.6::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: bpo-33505 --> https://bugs.python.org/issue33505 <!-- /issue-number --> ::",321f9b8ccae0e494e5d3e57385535f91428b7fe6::
https://api.github.com/repos/python/cpython,6814,bpo-33503-use_pypi_org::master,0,merged,CLA signed::needs backport to 3.6::,"Because the new Warehouse has changed his domain, we have to update all the broken links to the new domain. <!-- issue-number: bpo-33503 --> https://bugs.python.org/issue33503 <!-- /issue-number --> ::",cd83cc8ca02a30d0038ab61437355005d31a09a5::0b59b5cc4196fac97fa89b7202d11a5762db136c::635fabf68556eb070ac922967189b5c662fabfbf::
https://api.github.com/repos/python/cpython,6800,alex-patch-1::master,1,merged,CLA signed::needs backport to 3.7::skip issue::skip news::,::,c3cac537b7ece1d652805646441d1d18edbecbd9::
https://api.github.com/repos/python/cpython,6786,eax/mdl/mdl_fix_template_fix::master,0,merged,CLA signed::needs backport to 3.6::skip news::,"skip news markdownlint is, as the name implies, a tool for linting markdown files. The current template has several warnings. Fix them. <!-- issue-number: bpo-33488 --> https://bugs.python.org/issue33488 <!-- /issue-number --> ::",e2197d4bc4e5bb1a9b49591732dd8a0d78e44144::
https://api.github.com/repos/python/cpython,6724,tkinter-merge-error::2.7,0,merged,CLA signed::type-bugfix::,This partially reverts commit e80a232f2cfdab584133d9779c83885c5f9f1ba6. Fixes #6326 regression. <!-- issue-number: bpo-33096 --> https://bugs.python.org/issue33096 <!-- /issue-number --> ::,6af2231df973dd2fa43d29528086d20eb90e35b5::
https://api.github.com/repos/python/cpython,6578,bpo33289::master,0,merged,CLA signed::needs backport to 3.8::type-bugfix::,"<!-- issue-number: bpo-33289 --> https://bugs.python.org/issue33289 <!-- /issue-number --> ::This docstring looks too verbose. And its style differs from the style of other docstrings too much. The docstring is just a brief reminder about what the function does. The module documentation can be more detailed.::This is not specific to `winfo_rgb()`. All methods that accept color values accept the same format. It is better to define it in the documentation than in the docstring of `winfo_rgb()`.::Add a test for a multiword color, e.g. `'dark slate blue'`.::It is not clear from what lower bits are taken. Use examples with not all bits set or reset, e.g. `'#123456789'`. And represent expected values as hexadecimals.::The input to a Python function must be a Python object, not a Tcl_Obj.  Adding ""print(type(result), result)"" here shows that the passed-in result is '' if [Cancel] or [X] is clicked else '#rrggbb' if [OK] is clicked.  (The default initial color is '#a0a0a0'.)  The docstring should say this, and the wrong (obsolete?) comment removed. I would remove 'or not str(result)' below and consider raising a TypeError if the dialog somehow started returning a non-string.  But this is up to Serhiy. ::The main thrust of this issue is to update tkinter.colorchooser.Chooser._fixresult for 3.x.  So at least that method should be tested, with a test the fails currently. Since _fixresult does not access 'self', this can be done by extracting it from the class.  We do not even need to embed it in a mock class (which I have done for the non-GUI functions of some IDLE dialog classes).  But it would help to wrap it in a partial function.  Untested addition (after the above): ``` def test__fixresult(self): root = self.root _fixresult = tkinter.colorchooser.Chooser._fixresult def fix(result): return _fixresult(None, root, result) self.assertEqual(fix(''), (None, None)) self.assertEqual(fix('#a0a0a0'), ((160, 160, 160), '#a0a0a0') ``` This completely covers _fixresult and with widget.winfo_rgb thoroughly tested, I think it is sufficient.  The second assertion fails now.::Tcl_Obj is the name of a Python object that wraps a Tcl's Tcl_Obj. Tkinter converts some Tcl objects to common Python types (int, str, tuple, etc), but can return a Tcl_Obj if Tcl uses a specialized type for some kind of objects. This can happen in every new version. The trick with 'or not str(result)' looks correct and may be necessary. The comment is correct and accurately describes the situation.::So I learn something new ;-)  The only documentation is one reference in tkinter.__init__: `_tkinter.Tcl_Obj`.  Perhaps `_tkinter` should be added here.  ::I had actually written this initially, but because it was a new program, missed it when doing the commit.  :-(  Sorry about that.::gc_collect is not used.::done (below)::Why `int('ffff', 16)` instead of just `0xffff`?::Use `assertEqual()`. And the same question about hexadecimals.::It is better to use non-zero digits. E.g. `'#123456789abc'`.::As in examples below, it is better to use different non-zero digits. E.g. `'#123'`.::Please use something more interesting than the sequence of `f`'s and `0`'s. And in other tests too.::```suggestion self.assertEqual(rgb('#dc143c'), (0xdcdc, 0x1414, 0x3c3c)) ```::```suggestion self.assertEqual(cc._fixresult(self.root, '#dc144c'), ((220, 20, 76), '#dc144c')) ```::```suggestion self.assertEqual(rgb('#4a3c8c'), (0x4a4a, 0x3c3c, 0x8c8c)) ```::```suggestion self.assertEqual(cc._fixresult(self.root, '#4a3c8c'), ((74, 60, 140), '#4a3c8c')) ```::I do not understand not only why they return 0x1010 on CI, but also why they return 0x1212 instead of 0x1231 and 0x1234 for 9- and 12-digit color  correspondingly on other platforms. Let make the test more boring to unblock the fix. ```suggestion # #RRRRGGGGBBBB self.assertEqual(rgb('#dcdc14143c3c'), (0xdcdc, 0x1414, 0x3c3c)) ```::```suggestion """"""Return a tuple of integer RGB values in range(65536) for color in this widget."""""" ```::```suggestion self.assertEqual(rgb('#dede14143939'), (0xdede, 0x1414, 0x3939)) ```::",324b39fb78d05bde8efd93abb252393c29e3d611::179d3a2024ac9794c3333fe5e26f83aa4b45be01::d936fe5ca6ae2cfd7d75950b8a35c111230e231a::e0c9cec8e2a5f45644762ba6fd7dc7973deec677::a740841183033fda1ed0178e39646e10e51ea343::968269944d3b2937eb7d36acbf927bf6041febf5::bd068c83c2c8516f4c6a7467fd93b3d276f008a7::e39e826546e6f6f66356948a6006d031eb398548::496199284ef170f29f8ccd3cd84f15d3d4fd5a13::d98349ed781ca4878b034ffd86075ff2dd218e72::d4651424fa4b713dd4959923ced29db8cef35542::5b325b3e5b24109cc9e70270a22d30fd91549a75::c092dbfa3af94a3ea22895c615d136d30f2acfdb::8dcbfa1369e8e8a0edb255a7544cd68faa5266f6::b968e028aa486fab56e96e4c9115123ef075f3fd::
https://api.github.com/repos/python/cpython,6549,backport-53f67d4-3.7::3.7,0,merged,CLA signed::needs backport to 3.6::skip news::type-bugfix::,(cherry picked from commit 53f67d401df40486fd0fb8fbcf9da725cd37290c) Co-authored-by: Gregory P. Smith <greg@krypto.org> <!-- issue-number: bpo-33312 --> https://bugs.python.org/issue33312 <!-- /issue-number --> ::,cfc8345e70ef3dc54df85dc972dc53d4cb7e28d8::
https://api.github.com/repos/python/cpython,6455,master::master,0,closed,CLA signed::awaiting review::needs backport to 3.7::skip news::type-documentation::,"Also make the callback docs more clear as to how data flows. Callbacks are executed in the main process. The callback input values are the return values of the called function, when that function exits, or an exception instance in error_callbacks if it is raised. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` bpo-NNNN: Summary of the changes made ``` Where: bpo-NNNN refers to the issue number in the https://bugs.python.org. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `master`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `master`. --> <!-- issue-number: bpo-33082 --> https://bugs.python.org/issue33082 <!-- /issue-number --> ::",6ab9b20d9926aa64cc497f05e3715e0e02b51a31::
https://api.github.com/repos/python/cpython,6428,test_poplib-hang::master,0,closed,CLA signed::awaiting change review::needs backport to 3.6::needs backport to 3.7::,"This fixes resource leaks in the test and reveals real errors. <!-- issue-number: bpo-33099 --> https://bugs.python.org/issue33099 <!-- /issue-number --> ::This should be try/finally.::try/finally::try/finally::Why did you add print_exc?::When `setUp()` succeeded, `tearDown()` do it. So this should be `except:`, not `finally:`.::Can `self.server.stop()` fail? Is it worth to rewrite the code as: ```python try: self.server.stop() finally: self.server = None raise ``` or ```python server = self.server self.server = None server.stop() raise ``` ?::I don't think we shouldn't complicate test code for non-real errors. It's not late to fix it after the possibility become real.::",331844afe124d66e790b5ea7843bccac12288390::844e994c0f5c375893edc101ffe1cbe24db99b03::ac1f6929c00092b6b77471789a2e93bdf4b5af78::f3e857d4c4a468e58c7645a61f94a5ed4643b297::ab6463fd7200c742c1a1ce4068a0292169e23112::
https://api.github.com/repos/python/cpython,6383,tempfile-choices::master,0,closed,CLA signed::awaiting review::needs backport to 3.7::skip news::,Using Random.choices instead of Random.choice in the tempfile._RandomNameSequence class makes the code more readable and faster. This commit also updates the docstring of the class. <!-- issue-number: bpo-33228 --> https://bugs.python.org/issue33228 <!-- /issue-number --> ::I don't think these kinds of trivial changes should be done.  There should be a preference for code stability.::,ff87f8bd52a5c4a8f79e1cf723c124f657c85fee::
https://api.github.com/repos/python/cpython,6204,reduce-docfix::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::skip news::type-documentation::,"The collection argument to `functools.reduce` need only be an iterable, not necessarily a sequence. <!-- issue-number: bpo-33130 --> https://bugs.python.org/issue33130 <!-- /issue-number --> ::",078cec9c1b95049f321f2150c31ca251b858ef39::c7cc51d84e2223acb3eb683f56c7e245a14b74b8::9663f3270ab6833b560867f43ee384d0a3363968::
https://api.github.com/repos/python/cpython,6106,distutils_maintainer::master,0,closed,CLA signed::awaiting review::needs backport to 3.6::needs backport to 3.7::type-bugfix::,"Per PEP 345, Author, Author-Email, Maintainer and Maintainer-Email are all optional fields, this patch implements reading and writing them properly into PKG-INFO. See bpo-33069 I think this should be backported to everything currently accepting bugfixes, i.e. 2.7, 3.6 and 3.7. If this can't be done automatically I can work up a backport. <!-- issue-number: bpo-33069 --> https://bugs.python.org/issue33069 <!-- /issue-number --> ::",26297b95f7bd4eac0cd90a872717b4e140c5c209::
https://api.github.com/repos/python/cpython,6102,bpo-30622-npn-36::3.6,0,merged,CLA signed::skip news::,Fix backport a79591cf of bpo-30622 to 3.6 branch. Signed-off-by: Christian Heimes <christian@python.org> <!-- issue-number: bpo-30622 --> https://bugs.python.org/issue30622 <!-- /issue-number --> ::,a22f77512a4591f0918ffa10b216231ca9486704::
https://api.github.com/repos/python/cpython,5614,bpo-19675::master,0,merged,CLA signed::needs backport to 3.6::needs backport to 3.7::,"Trying another implementation of https://github.com/python/cpython/pull/57, avoiding to terminate all processes of a pool if a single one is failing to fork during the normal execution of the pool. <!-- issue-number: bpo-19675 --> https://bugs.python.org/issue19675 <!-- /issue-number --> ::Simply `except Exception` sounds ok to me.::I don't think you need the process to be alive to join it.::Sounds OK, it does not make sense to avoid leaking process only on known exceptions, and we're not hiding it.::Look ok not to test it first.::Why not `assertRaises`?::",53c89fbec578aa4265c68ca29a7f56a3037e936c::a8b39244e1de7aec55d969a0035aeb46078b2b77::3bdbf79d6bc06e13c8465f4b838f3d8e40bd6659::f569cae4de8bba4cbf945d969150e061d7e6aeb2::7670d4a0309648ec48b64bc3d1471ef95362ea33::
https://api.github.com/repos/python/cpython,5503,miss-islington-backport-bbbcf86-3.7::3.7,0,merged,CLA signed::skip issue::,A manual backport is safer than #5498 because of the changes to importlib.h and importlib_external.h.::,f1f1d353217189bcd1ac4c7dc67d6b41dfc9692a::0094ca92423c04014c686561394120ca5527cf99::
https://api.github.com/repos/python/cpython,5253,bpo-32378-libressl-npn-2::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::type-bugfix::,"The ssl module now contains a workaround for missing NPN support in LibreSSL 2.6.1. Upstream has removed NPN without setting OPENSSL_NO_NEXTPROTONEG. Obsoletes PR #4930 See https://github.com/libressl-portable/portable/issues/368 <!-- issue-number: bpo-32378 --> https://bugs.python.org/issue32378 <!-- /issue-number --> ::This is not really a LibreSSL quirk - due to various history, no one can set OPENSSL_NO_NEXTPROTONEG without breaking multiple open source projects (each in different ways). As such, I would strongly recommend conditioning on the availability of TLSEXT_TYPE_next_proto_neg, rather than trying to map this to OPENSSL_NO_NEXTPROTONEG. If you wish to retain this approach, the comment above could at least be updated to explain why OPENSSL_NO_NEXTPROTONEG cannot be set via LibreSSL (or OpenSSL for that matter).::",d91d150e624030e905471b587112eeec9500551d::
https://api.github.com/repos/python/cpython,5187,frozenset_hash_improvement::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::,<!-- issue-number: bpo-26163 --> https://bugs.python.org/issue26163 <!-- /issue-number --> ::,dfd62d9cb665ef1617ce2457a260681b804311bf::102616f79a5a70e67e7b60432085aa9fe84d9666::1e53efea180ad5ccdec3d31e22dc3f4c0aebc49f::f2c5b0c34be093d2a0a09b6f7d32a01477d65444::3c2e33f7ea7ac6ce37b91b061e237a501d384fd0::
https://api.github.com/repos/python/cpython,5136,patch-1::master,0,closed,CLA signed::awaiting changes::needs backport to 3.6::skip issue::skip news::type-documentation::,::,70affdc116cf2cce82c40fbcdc867f434ba582bf::
https://api.github.com/repos/python/cpython,5034,benjamin-pat-comp::master,1,merged,CLA signed::needs backport to 3.6::skip news::,<!-- issue-number: bpo-24960 --> https://bugs.python.org/issue24960 <!-- /issue-number --> ::,f6c414e4fc3bbee086153ec9677d6b87d41f3c86::
https://api.github.com/repos/python/cpython,4938,bpo-32185-sni-ip::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::type-bugfix::,The SSL module no longer sends IP addresses in SNI TLS extension on platforms with OpenSSL 1.0.2+ or inet_pton. Signed-off-by: Christian Heimes <christian@python.org> <!-- issue-number: bpo-32185 --> https://bugs.python.org/issue32185 <!-- /issue-number --> ::,39e519eb3b17bcb3337dfc0b272b78ccd6de7a84::
https://api.github.com/repos/python/cpython,4930,bpo-32378-libressl-npn::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::,LibreSSL 2.6.1 broke NPN support. We can more or less safely skip the tests. NPN is deprecated and no longer used anyways. Signed-off-by: Christian Heimes <christian@python.org> <!-- issue-number: bpo-32378 --> https://bugs.python.org/issue32378 <!-- /issue-number --> ::,befdc05a19a057fd7fefdb2fc0dc612c1296d5fe::
https://api.github.com/repos/python/cpython,4805,fix-xp-toolset::master,0,merged,CLA signed::needs backport to 3.6::,"`_MSC_VER` is insufficient to detect this header's presence, it's also important to ensure the XP-compatible toolset is not in use. <!-- issue-number: bpo-32282 --> https://bugs.python.org/issue32282 <!-- /issue-number --> ::",a5e2444f0f4986ad0c88af66506c8843cd0aff80::c70f817ce52d647fb1191dfa873f116dcafd1f22::29a5e92b8a6f071ace1b32a4b897ec908de8cf53::329d4a850c62546d53a0d354a3e9e673f02ee4ad::
https://api.github.com/repos/python/cpython,4788,nt_slots::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::skip issue::skip news::type-documentation::,"::A subclass of ``NamedTuple`` can't (and don't need to) define ``__slots__``. Therefore, with this line added this example will raise: ``` AttributeError: Cannot overwrite NamedTuple attribute __slots__ ``` The reason is that this class syntax is mostly syntax sugar (for static type checkers), ``NamedTupleMeta.__new__`` simply calls ``collections.namedtuple`` and the latter already correctly sets ``__slots__``. For example: ```python class C(NamedTuple): x: int y: int assert C.__slots__ == () ``` Also ``NamedTuple`` (unlike dataclasses) doesn't store default values in class, but in ``__new__.__defaults__``. For example: ```python class C(NamedTuple): x: int y: int = 0 assert C.__new__.__defaults__ == (0,) ``` (In addition, ``NamedTupleMeta.__new__`` stores the necessary info in ``_field_types`` and ``_field_defaults`` class attributes of a newly created ``collections.namedtuple`` for simpler introspection.)::See my comment above. It is already said that subclassing ``NamedTuple`` is equivalent to calling ``collections.namedtuple``. Maybe we need to document that it is not just equivalent, but it is what actually happens at runtime?::",71dac36c2e814e7ae41e14f887489c9dde07d553::
https://api.github.com/repos/python/cpython,4765,fix-32212::master,0,merged,CLA signed::needs backport to 3.6::skip news::,… consistent with source. <!-- issue-number: bpo-32212 --> https://bugs.python.org/issue32212 <!-- /issue-number --> ::,23da0ee3ff0daf85255f535e8460dcc40fea1c09::
https://api.github.com/repos/python/cpython,4727,proper-configparser-encoding::master,0,closed,CLA not signed::awaiting changes::needs backport to 3.7::,"This simply adds the `encoding=""UTF-8""` argument and fixes the encoding problem when reading setup.cfg. <!-- issue-number: bpo-32223 --> https://bugs.python.org/issue32223 <!-- /issue-number --> ::",13b4c1b3c63d45f44fa607e1c46b956f127b4b76::
https://api.github.com/repos/python/cpython,4687,bpo-32205::master,0,closed,CLA signed::awaiting changes::needs backport to 3.6::,<!-- issue-number: bpo-32205 --> https://bugs.python.org/issue32205 <!-- /issue-number --> ::,5d00df745b622e1226101ed12d528c1162b7ae0c::
https://api.github.com/repos/python/cpython,4402,bpo-29406::master,0,closed,CLA signed::awaiting merge::expert-asyncio::needs backport to 3.7::type-bugfix::,"<!-- issue-number: bpo-29406 --> https://bugs.python.org/issue29406 <!-- /issue-number --> Supersedes #2269 ::typo::Good catch, thanks!::",9016eb58e51104c3836adb93a459b5716bc16f1d::bdfb6530ef91adbb81799409b34da37be845844a::a6b9cad2ace5ad3fb8500dcdbe0e326909074034::5b2ee640929d26ee6a197d2a31d44e8b6ca92a35::b0ccdcf04082ddcf674edac04898103b366617b0::
https://api.github.com/repos/python/cpython,4363,fixtest::master,0,merged,CLA signed::needs backport to 3.6::skip issue::skip news::,::,e481c8812dbd12ab4fcb8e362921018d57560ccd::
https://api.github.com/repos/python/cpython,4305,backport-4f469c0-2.7-fix::2.7,0,merged,CLA signed::skip news::type-bugfix::,<!-- issue-number: bpo-27666 --> https://bugs.python.org/issue27666 <!-- /issue-number --> ::,1e48c6339d35161f1ead9acf779b57702ac3da9e::
https://api.github.com/repos/python/cpython,4219,openbsd-select-compile-error::2.7,0,merged,CLA signed::skip news::type-bugfix::,<!-- issue-number: bpo-31893 --> https://bugs.python.org/issue31893 <!-- /issue-number --> ::,9d645d95b353f2bbbe952a6755692cdcb5e4c39d::
https://api.github.com/repos/python/cpython,4172,bpo-31114::master,0,closed,CLA signed::awaiting merge::needs backport to 3.7::type-bugfix::,<!-- issue-number: bpo-31114 --> https://bugs.python.org/issue31114 <!-- /issue-number --> ::,ffa5bff252ece21ceeb4bc2eb43b2b1b8fca72b8::3db327e4852e5945fad2cb8fc76d99e4ea98c623::daf086e579f00a5464bdc293c9c3dbf703a8dd1f::0d13dc946a4b2896c351317bfcf778d5f33479f2::
https://api.github.com/repos/python/cpython,3956,bpo31758-fix-refleaks::master,0,closed,CLA signed::awaiting core review::needs backport to 3.7::needs backport to 3.8::stale::type-bugfix::,"In addition, add a test to `test_xml_etree_c`, to make sure that the refleaks in ``__setstate__()`` are no more. <!-- issue-number: bpo-31758 --> https://bugs.python.org/issue31758 <!-- /issue-number --> ::Perhaps `PyObject_GetAttrString()`, `Py_XSETREF()` and `ignore_attribute_error()` can be combined in one function.::`Py_DECREF()` can cause executing arbitrary Python code. This can change the size of the `children` list. `PyList_GET_ITEM()` in the following loop can crash.::Ah, indeed. Then ISTM that we should try to write a helper function that would be used both here and by `element_ass_subscr()`. what do you think?::Maybe add ``@refcount_test``?::",9e6116af2b0f9a90c7920226d3a4988364243b2b::24a251b1efe1b5cdca8222e9ee59b2cbe6213f6c::eede715fbd3b220b5dd0497e07dbb0f2aac3971f::505294d59ca6db948824165a6f94f9e2ab76afa8::cb064924875791d1ed433c7d7820fc9576ee9849::d6d575e105b1d4094959f2ce39b00217eaaa0007::
https://api.github.com/repos/python/cpython,3788,bpo31608-fix-crash::master,0,merged,CLA signed::needs backport to 3.6::,"- in `_collectionsmodule.c`: add a check whether ``__new__()`` returned a deque. <!-- issue-number: bpo-31608 --> https://bugs.python.org/issue31608 <!-- /issue-number --> ::1) `PyObject_IsInstance()` can raise an exception. 2) Even if `PyObject_IsInstance()` returns 1, the result can have the binary layout different from dequeobject (because `__instancecheck__`), and the following concatenation or repeating will crash. Use `PyObject_TypeCheck()` instead.::Bad `__new__()` is not the only possible cause. The type can be an instance of a metaclass with overridden `__call__`.::Please restore 541-548 to their former state and limit the patch to just the issue at hand. ::This looks fine but it needs a test.::I think returning a list is more realistic example.::What about concatenation?::I would mention a copy.::The C changes are only to `deque_copy()`, so i thought that testing also the concatenation is redundant. Should i add it to the test anyway?::I think that mentioning the copy won't help much to a user that isn't familiar with the internal implementation. If you think that i should be more specific, i could mention that the crashes were in repetition and concatenation. What do you think?::",41cea9c7eab4288d0d3bd93e6a71abe0cad1ddde::57609f31fdf4e40d6e0b1ae3e50f5f4c6f312c77::2f34cb3131cdbd161d75b8152d2b2aba747482f5::a9c58065114b9a27df4b65250a5df05daccc6b2f::07bcc04cb74eb38f0c06f06547d7ef4023b3b3cd::2a690e8f209a2595e04cb916e8fd2498c81d8a54::5c56c76bd763dea96e6c670c5bd1e951b191d778::ce1cb63c9db8fcc1bfdc0768df00cd73d9b1fde2::
https://api.github.com/repos/python/cpython,3662,bpo-31453-debian-tls-fix::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::type-bugfix::type-security::,"**DO NOT MERGE** Undo Debian Unstable's patching for SSL_CTX. Allow all protocols with SSL_CTX_set_min_proto_version() again so they can be enabled and disabled with SSL_CTX_set_options(). The set_min_proto_version is not supported by Python, set_options is available as SSLContext.options. Signed-off-by: Christian Heimes <christian@python.org> <!-- issue-number: bpo-31453 --> https://bugs.python.org/issue31453 <!-- /issue-number --> ::",7f864ff57fcccbb9c6aa8b5de0c750d54360bea2::
https://api.github.com/repos/python/cpython,3571,bpo-31374-expat-warning::master,0,closed,CLA signed::awaiting change review::needs backport to 3.6::needs backport to 3.7::,"include expat_config.h first to avoid warning: ""_POSIX_C_SOURCE"" redefined Signed-off-by: Christian Heimes <christian@python.org> <!-- issue-number: bpo-31374 --> https://bugs.python.org/issue31374 <!-- /issue-number --> ::You may define AC_CONFIG_FILES([Modules/expat/expat_config.h]) here, to group things specific to Expat at the same place. It seems like AC_CONFIG_FILES() can be called multiple times.::This NEWS entry now seems to be outdated.::I prefer to keep all output files in one place::",b95f8039be94740cf3eec14901ed3b88be8a2709::4e626fb264a3463271dbeea527a7f44dabe3b0b6::
https://api.github.com/repos/python/cpython,3528,master::master,0,closed,CLA not signed::awaiting merge::needs backport to 3.6::skip issue::skip news::,Also see https://github.com/python/peps/pull/413::,f02d642fcbd3f945d9984d07818ef45d9d2d97d9::
https://api.github.com/repos/python/cpython,3508,bpo-16251::master,0,closed,CLA signed::awaiting core review::awaiting merge::needs backport to 3.6::,"This PR doesn't change the lookup to types as the issue's title on BPO suggests.  As Antoine and Raymond point out, there'd be significant danger of breaking existing code. Instead, we're doing the following: * introducing a new function in `copyreg` called `getcallable()` that mimics `getattr()` but swallows *all* exceptions (like `hasattr()` on Python 2) and does some basic callability tests; * switching all relevant usage of `hasattr()` and `getattr()` in `copy` and `copyreg` to use `getcallable()` instead. This fixes two common failure scenarios covered at length in bpo-16251, its duplicates, as well as on StackOverflow, etc.  Worth fixing IMHO. Funnily enough, the recursion limit exceeded scenario happened to work on Python 2 since `hasattr()` there swallowed the RecursionError. <!-- issue-number: bpo-16251 --> https://bugs.python.org/issue16251 <!-- /issue-number --> ::`self.proxied_object` here causes a non-obvious recursion back to `__getattr__` when the object is being recreated with `deepcopy` (which uses `Proxy.__new__` and then looks for the `__setstate__` method).::This returns `None` for `__getstate__` for example.::This dance was no longer needed. `types.CodeType` was only missing in `rexec` which was removed in Python 3.::",61706b0c1c0565bead10b6fcea5a271d77b0dc53::
https://api.github.com/repos/python/cpython,3179,patch-1::master,0,closed,CLA signed::awaiting changes::needs backport to 3.7::skip news::type-documentation::,"codeop.compile_command actually accepts symbol=""exec"" too <!-- issue-number: bpo-737999 --> https://bugs.python.org/issue737999 <!-- /issue-number --> ::",6e180723f7c5f1fac662fc143142cf76328894d2::ff70dceb0bcaad62242a4fb7c9f6843570b85eb1::5fbf68c4ce29686e992a020c48ebde4966110331::a0b6349dd1ee03c439d5dea1a79c45c6b9aef348::
https://api.github.com/repos/python/cpython,3117,backport-language-picker-27::2.7,0,merged,CLA signed::,Change the option for `Français` into `French` to be consistent with the other language selections that are already in English. (cherry picked from commit b616b972999cdd5fe54ef8a43c131a27ca538dee) <!-- issue-number: bpo-31149 --> https://bugs.python.org/issue31149 <!-- /issue-number --> ::,2f1c1b74cf8185185e59da14b80fdd7d76dbc9b1::
https://api.github.com/repos/python/cpython,3115,backport-language-picker::3.6,0,merged,CLA signed::skip news::,Change the option for `Français` into `French` to be consistent with the other language selections that are already in English. (cherry picked from commit b616b972999cdd5fe54ef8a43c131a27ca538dee) <!-- issue-number: bpo-31149 --> https://bugs.python.org/issue31149 <!-- /issue-number --> ::,66c253805159ea80acbc34efae2af0b4577ffe8d::
https://api.github.com/repos/python/cpython,3010,die-idna-die::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::,"Historically, our handling of international domain names (IDNs) in the ssl module has been very broken. The flow went like: 1. User passes server_hostname= to the SSLSocket/SSLObject constructor. This gets normalized to an A-label by using the PyArg_Parse ""et"" mode: bytes objects get passed through unchanged (assumed to already be A-labels); str objects get run through .encode(""idna"") to convert them into A-labels. 2. newPySSLSocket takes this A-label, and for some reason decodes it *back* to a U-label, and stores that as the object's server_hostname attribute. 3. Later, this U-label server_hostname attribute gets passed to match_hostname, to compare against the hostname seen in the certificate. But certificates contain A-labels, and match_hostname expects to be passed an A-label, so this doesn't work at all. This PR fixes the problem by removing the pointless decoding at step 2, so that internally we always use A-labels, which matches how internet protocols are designed in general: A-labels are used everywhere internally and on-the-wire, and U-labels are basically just for user interfaces. This also matches the general advice to handle encoding/decoding once at the edges, though for backwards-compatibility we continue to use 'str' objects to store A-labels, even though they're now always ASCII. Technically there is a minor compatibility break here: if a user examines the .server_hostname attribute of an ssl-wrapped socket, then previously they would have seen a U-label like ""pythön.org"", and now they'll see an A-label like ""xn--pythn-mua.org"". But this only affects non-ASCII domain names, which have never worked in the first place, so it seems unlikely that anyone is relying on the old behavior. This PR also adds an end-to-end test for IDN hostname validation. Previously there were no tests for this functionality. Fixes bpo-28414. <!-- issue-number: bpo-28414 --> https://bugs.python.org/issue28414 <!-- /issue-number --> ::I think this comment should explain this in terms of a-labels.::Is there a reason not to refer to these as IDNs?::Nit: Is there a reason to use `TLSv1` instead of `SSLv23` (lol)::ok, done::Just that IDN is pretty jargony and this is the end-user-oriented news text. I made it ""hostnames that contain non-ASCII characters (IDNs)"".::I don't know, I just made it match all the other tests around it (aka this is blatantly copy/paste code).::Let's have it be `PROTOCOL_TLS`, surely.::I can't speak to the CPython tests, but...it'd be really nice if this was four tests with common setup instead of one test.::Tell you what, you port CPython to pytest, and I'll write a parametrized test :-). (Though honestly I don't really see what difference it makes.)::We don't need a parametrised test: just have a method (or even a function!) that does all the setup and returns the wrapped socket. As to ""what difference it makes"", the answer is that it makes it easier to isolate a test failure. For example, if this test fails with an assertion error that says `Can't get peer certificate`, what hostname failed? All of them? The only way to know is to re-run the tests under pdb and wait until the error is hit. It also shadows failures: for example, if the test fails with one of the acceptable hostnames you don't know whether the functionality that fails on incorrect hostnames is still working, because that part of the test never runs. Regardless, I wouldn't block the patch on this because it's a prevalent pattern: it's just a bad one. :grin:::",de8cdfca08ac612a3437041f93b693a9b580d1a5::f49055d924c37ab6844f0280c2b5bf763c20fb8d::948bc687ecfacbafb7c2edc07acda82043aadd2a::
https://api.github.com/repos/python/cpython,2824,bpo_30940::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::type-documentation::,"<!-- issue-number: bpo-30940 --> https://bugs.python.org/issue30940 <!-- /issue-number --> ::Format `None` with fixed-width font instead of italic.::""if ndigits is omitted or None""::",182b47365b6dff35acf9ddeb5870b84574c257ce::b1063bd9ddaf57c96e67b0141752923af9d59c93::02496d42096f165b61ef498054478fdbf6cf9a53::f1f6a839f9ee3de060d5bc0bf546490e718da221::
https://api.github.com/repos/python/cpython,2632,trivial-typo-in-json-scanner::master,0,closed,CLA signed::awaiting review::needs backport to 3.6::type-bugfix::,"Should ""py_make_scanner"" return ""scan_once"" function rather than ""_scan_once""?::",b76d7b315a8a455a29b11494daacb7a6489c2c24::
https://api.github.com/repos/python/cpython,2544,email-invalid-content-transfer-encoding::master,0,closed,CLA signed::awaiting changes::needs backport to 3.7::type-bugfix::,"…nsfer-Encoding Parsing an email containing a multipart Content-Type, along with a Content-Transfer-Encoding containing an invalid (non-ASCII-decodable) byte will fail. email.feedparser.FeedParser._parsegen() gets the header and attempts to convert it to lowercase before comparing it with the accepted encodings, but as the header contains an invalid byte, it's returned as a Header object rather than a str. Cast the Content-Transfer-Encoding header to a str to avoid this. Found using the AFL fuzzer. Reported-by: Daniel Axtens <dja@axtens.net> Signed-off-by: Andrew Donnellan <andrew@donnellan.id.au>::",193eabe8c3b699249558a5ba69b2f394b45ec0c0::
https://api.github.com/repos/python/cpython,2518,fix-2.7-docs-links-to-list::2.7,0,merged,CLA not signed::type-documentation::,Fixing links in Python 2.7 docs as now docs have broken links to list(): https://docs.python.org/2.7/library/functions.html::,79d26ac0ae2f865569cec41f48ccc6699c5d77fd::
https://api.github.com/repos/python/cpython,2490,issue/race_debug_loop::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::type-bugfix::,If a process is schedule to run in the event loop with debug disabled and debug is then enabled before the process finishes it will result in a traceback: log_debug undefined.::,db4d4e4535f4467a94e4512dbe52eb0f050e473a::
https://api.github.com/repos/python/cpython,2438,regrtest_news35::3.5,0,merged,CLA signed::,::,5ae445035f82aadd080d207465ed207120181cd9::
https://api.github.com/repos/python/cpython,2398,regrtest_news27::2.7,0,merged,CLA signed::,"::If all items are full sentences, they should end with a period.::done::",6721c4dfbc8aa5fc031aba52699bc93124ee68a3::
https://api.github.com/repos/python/cpython,2282,master::master,0,closed,CLA signed::awaiting review::needs backport to 3.7::skip issue::skip news::type-documentation::,"Removed the words ""either calls it explicitly or"" from the explanation of `__getattribute__` in the [data model](https://docs.python.org/3/reference/datamodel.html) documentation: > Called unconditionally to implement attribute accesses for instances of the class. If the class also defines `__getattr__()`, the latter will not be called unless `__getattribute__()` ~~either calls it explicitly or~~ raises an `AttributeError`. This method should return the (computed) attribute value or raise an `AttributeError` exception. In order to avoid infinite recursion in this method, its implementation should always call the base class method with the same name to access any attributes it needs, for example, `object.__getattribute__(self, name)`. The documentation here is slightly wrong because `__getattribute__` should never call `__getattr__`. This confused me for a long time. Attributes are looked up in the following methods in this order: 1. `__get__` 2. `__getattribute__` 3. `__getattr__` Just like `__get__` does not call `__getattribute__`, `__getattribute__` does not call `__getattr__`. Instead, `__getattr__` is called iff `__getattribute__` raises an `AttributeError`. An example illustrating why `__getattr__` should not be called from `__getattribute__` is below: class A: def __getattribute__(self, name): try: return super().__getattribute__(name) except AttributeError: return self.__getattr__(name) def __getattr__(self, name): print(""Could not find attribute `{}`"".format(name)) raise AttributeError a = A() a.x` prints this to the console: Could not find attribute `x` Could not find attribute `x` Traceback (most recent call last): File ""attribute_errors.py"", line 14, in <module> a.x File ""attribute_errors.py"", line 10, in __getattr__ raise AttributeError AttributeError In this example, `__getattribute__` directly calls `__getattribute__` when `x` is not found in `A`. The `__getattr__` could not resolve the attribute lookup, so it (appropriately) raises an `AttributeError`. That means that `__getattribute__` indirectly raised an `AttributeError`, which triggers `__getattr__`. `__getattr__` therefore gets called twice, which is incorrect behavior. This PR just fixes the docs so that others won't get confused.::",cff6ee74a9af58693747b9b85521f9676ab57c19::
https://api.github.com/repos/python/cpython,2168,backport-1eb6c00-2.7::2.7,0,merged,CLA signed::,"Note 2.7 didn't suffer from this bug, so no actual fix was needed.::",aece2c7bc2594cf08e3988e184e18ef1aec02790::
https://api.github.com/repos/python/cpython,2162,fix-sigint::2.7,0,closed,CLA signed::awaiting review::needs backport to 3.6::needs backport to 3.7::type-bugfix::,"Instead of saving old_siginthandler which will always be SIG_DFL, just use the normal reset code. This means that SIGINT will *not* be reset to SIG_DFL if it had a custom C handler during initialization, since `func` will be `Py_None` then. I'm not sure if this is the intended behavior. But the prior behavior was broken, so it's an improvement. https://bugs.python.org/issue30654::",e2a2038ed4bfd8e4f42adcd6c501ae4f7ef4f82e::
https://api.github.com/repos/python/cpython,2142,master::master,0,closed,CLA signed::awaiting changes::needs backport to 3.7::type-bugfix::,This trivial commit fixes a few memory leaks in /PC/bdist_wininst/install.c::The memory pointed by the old value of `lines` is leaked if `realloc()` returns NULL. And seems `lines` is leaked in the code below.::,ec3e3fa6ad3f4cc9a988ad10799e6675b217830a::
https://api.github.com/repos/python/cpython,2141,lossless_png::master,0,closed,CLA signed::awaiting review::needs backport to 3.7::type-documentation::,https://bugs.python.org/issue30660::,e37bf7aa9ac6c77afc78df9396fbac9e941e21b2::ca2870c642a4ab3cb23f094c4dd760df51b2ccc8::114e814cbeebdeec76341b3a8e5318effddd5c2a::1717cfed9015ba16ba9b56b36381400e08e60c78::29130c97ae6c5d4b601daff427075c5d5c891d5b::d24818aa65b154e68f32ee4a9667c0ee016dee4a::7d0453e242f871e4d11c54b7363d5a671109e8d8::5eec0d56df85cdfdbbcb906d094318d40c14d7d9::
https://api.github.com/repos/python/cpython,2117,benjamin-backport-ssl-fix::3.6,1,merged,CLA signed::,::,98046b93107b8927de8c9cb8b2d38d654effe726::bfcda1247f3b6b1e0d212b7a546c0616b8369645::
https://api.github.com/repos/python/cpython,2098,pyshell36::3.6,0,merged,CLA signed::,::,aede49fc2bd4f29f800c8a9cc16157ded3470a70::
https://api.github.com/repos/python/cpython,1986,fix-issue-30566::master,0,closed,CLA signed::awaiting changes::needs backport to 3.7::needs backport to 3.8::type-bugfix::,"A bug in the punycode codec raises an IndexError when we attempt to decode the string ""xn--w&"". The fix is straightforward and obvious one-liner. Bug number:  bpo-30566 <!-- issue-number: bpo-30566 --> https://bugs.python.org/issue30566 <!-- /issue-number --> ::I'd rename `byt` to `puny`.::I'd rename this to `invalid_punycode_testcases`.::Style nit: We can drop this comment.::We couls use `self.subTest()` to make test failure messages clearer.::",312e4a5aec0ff6e0f02fb0ee71b7cfe9647f3685::
https://api.github.com/repos/python/cpython,1981,bpo-22898::master,0,closed,CLA signed::needs backport to 3.6::type-bugfix::,"…ni()::This is part of the public API, so ripping it out is a breaking change.::Doesn't removing this guard lead to stack overflow? See also #2035.::I thought this PR was removing PyExc_RecursionErrorInst, ripping it out sounds scary though and I am not sure it should be done then :-) Why is it part of the public API ?::No because the failed invocations of the functions that are followed by a 'goto finally' (i.e. PyObject_IsSubclass() and _PyErr_CreateException()) are all either protected themselves by a Py_EnterRecursiveCall() or they set a built-in exception that won't cause PyErr_NormalizeException() to recurse indefinitely when being normalized. #2035 does not fix bpo-22898 which is about the PyExc_RecursionErrorInst singleton keeping a reference to a traceback whose frames have locals that are finalized when interp->sysdict is NULL. ::For information, the PyExc_MemoryErrorInst singleton, **also a part of the public API then**, has been removed in 98e2b452975f13b13052aeb9d166ed8a3ef45063 when fixing bpo-5437, and it was removed for the same reasons that this PR is removing the PyExc_RecursionErrorInst singleton. ::To be doubly sure one could add the following guard here: ``` if (++tstate->recursion_depth > Py_GetRecursionLimit() + 50) { Py_FatalError(""Cannot recover from stack overflow.""); } ``` ::If this is a dead code this issue couldn't exist. Adding `Py_FatalError()` here will made the interpreter crashing earlier in the original reported example.::Then it should at least be documented in What's New as having been removed since while it is an internal implementation detail, it's name wasn't given a leading `_` to more significantly signal that it wasn't meant for use outside of Python itself.::This line means `PyExc_RecursionErrorInst` is part of the stable ABI and shouldn't be removed at all. See [PEP 384](https://www.python.org/dev/peps/pep-0384/) for more information about the stable ABI.::Or at least I think so.::Your statement is not correct: test_recursion_normalizing_exception in this PR is a reproducer of the original reported example (check the gdb backtrace when run on the current code in master) and it does not abort or segfaults after adding the above Py_FatalError() guard to the PR and still raises the same RecursionError at the same recursion level and prints the ResourceWarning. Are you aware that when tstate->overflowed is true a RecursionError is never raised ? ::I would have documented this removal in What's New just before the merge (to avoid merge conflicts) especially after you pointed out that it's part of the public API. ::If the point is that using PyExc_RecursionErrorInst is an implementation oversight that may break Python, surely it is a case where its removal from the stable API is allowed no ? IMO not removing it while not using it anymore in the CPython implementation looks worse. ::@pitrou you can also look at my comments above about this exact topic. Apparently we have done this in the past when we removed exception singletons. If we need final closure on this we can always ask on python-dev. And while you're right, @pitrou , that it might be part of the stable ABI (have to go through the header file to verify), apparently the stable ABI has been broken for some time.::> Apparently we have done this in the past when we removed exception singletons. Hmm, thank you, I stand corrected. I guess the dynamic linker doesn't mind a symbol isn't there if the symbol isn't actually used in the program linking with libpython. > apparently the stable ABI has been broken for some time. This is unfortunate but you're probably right.::I have other concern. This singleton may be needed. Otherwise it wouldn't be added at first case.::I think the singleton was necessary on Python 2, which didn't have the two-level recursion threshold. It may not be necessary anymore on Python 3.::If I remember correctly, the reason the singleton was added was to allow for a deeper recursion limit so that constructing the instance itself didn't eat into the recursion depth (IOW it could fail to construct the instance). @pitrou may be right about it not being necessary in Python 3, but I'm personally not sure.::",16acb864264cc99e6ac4ab894294685e45bbcac5::
https://api.github.com/repos/python/cpython,1939,issue28206::master,0,closed,CLA signed::awaiting changes::needs backport to 3.7::skip news::type-documentation::,"Document the 3 module level `IntEnum` classes in `signals`. See http://bugs.python.org/issue28206 <!-- issue-number: [bpo-28206](https://www.bugs.python.org/issue28206) --> https://bugs.python.org/issue28206 <!-- /issue-number --> ::I think ""respectively"" should be last word here: (as Handlers and Sigmasks respectively)::I think there's no need to duplicate the first example here. We can enhance it instead of adding another one: ```py import signal, os def handler(signum, frame): signame = signal.Signals(signum).name print(f'Signal handler called with signal {signame} ({signum})') raise OSError(""Couldn't open device!"") # Set the signal handler and a 5-second alarm signal.signal(signal.SIGALRM, handler) # An enum member can also be passed as first argument signal.signal(signal.Signals['SIGALRM'], handler) signal.alarm(5) # This open() may hang indefinitely fd = os.open('/dev/ttyS0', os.O_RDWR) signal.alarm(0)          # Disable the alarm ```::Also, it would be nice to document enums at the documentation: ```rst The signal module defines three enums: .. class:: Signals .. You may be able to use ``.. enum:: Signals`` instead. I don't know if it's supported now. Document it here. .. versionadded:: 3.5 ```::",20848521c77d6c097d3ee78eea5a0309b6f460e7::7927549b27bcabfaa138edbb354efbef0189fce0::97a67fd4f230c7064dff92995d6b5284904a2fa8::
https://api.github.com/repos/python/cpython,1937,master::master,0,closed,CLA signed::awaiting changes::needs backport to 3.6::needs backport to 3.7::type-documentation::,"Security concern: pending feedback on issue bpo-29535, here is an update of the documentation.  It should make it clear that not all ``datetime`` objects come with randomized hashes. <!-- issue-number: bpo-29535 --> https://bugs.python.org/issue29535 <!-- /issue-number --> ::",ae8cabe76f738212fd29ffd32fc0f6ee9996c642::
https://api.github.com/repos/python/cpython,1742,fix-issue-28340::2.7,0,closed,CLA signed::,"io.TextIOWrapper.tell() is unusably slow in Python 2.7.  This same problem was introduced in Python 3 and fixed in Python 3.3, and this is my attempt at backporting the fix to 2.7.  ::",6776d0228053103ba262963635f3eba5b76e6471::933bbe3fcf9a6fb33ea45d550dad3c2077562e23::ca7b013f7877ea444322f283d615f8b616f132f0::7790149c935953ad163c6d4fc3fea03809f0c7d4::
https://api.github.com/repos/python/cpython,1655,28647-u-option::master,0,closed,CLA signed::needs backport to 3.6::,* stdout and stderr are always opened in text mode * and they are line-buffered Initial patch by Gareth Rees.::,2a797ff8913da14a40c9a8bebc955184fbc98038::
https://api.github.com/repos/python/cpython,1541,regrtest_coverage_27::2.7,0,merged,CLA signed::,::,b0f09e8663c22524545e96c992b9ec93b6af7bac::75708c97dcb3a912b385dd6f6d81ef92cf022e1e::c6460cee3b6b5dd5a80049eec6656a62236f829f::
https://api.github.com/repos/python/cpython,1532,eintr_35::3.5,0,merged,CLA signed::,* bpo-30320: test_eintr now uses pthread_sigmask() (#1523) * test_eintr: Fix ResourceWarning warnings * test_eintr: remove unused import * bpo-25277: Add a watchdog to test_eintr::,6922a52e507f13bbabea7c2264e28d77dbb32162::1b6a7f2d2c23dd57f8753233bf58faa050aaad04::0e6b06107f4ebfcfb39326383c06afb4c61933a9::4c29a01b56eef917423ab2833bbceb78eb908a21::
https://api.github.com/repos/python/cpython,1347,backport-d1a1def-2.7::2.7,0,merged,CLA signed::type-tests::,(cherry picked from commit d1a1def7bf221b04dcf3fc3a67aa19aa2f622f83)::,4661a7022289b0ee35b045c899b53363b9e925d4::aa73f409e5f199fcb7d8e3effedc1cf0411a13a2::
https://api.github.com/repos/python/cpython,1272,property-cached-args-set-size-0::master,0,closed,CLA signed::awaiting changes::needs backport to 3.6::type-bugfix::,Apply an alternate patch from bpo-26811. <!-- issue-number: bpo-30156 --> https://bugs.python.org/issue30156 <!-- /issue-number --> ::,feedc86f86bf91e6ed96158943529e511ad49d12::a240af0447e2a1031d6ec6d52ee3094fb8d150ef::719d46ae79f96a74d4166097323a66c4492dc069::d2436a54bfe75084e80c9c983d009d68649cc380::
https://api.github.com/repos/python/cpython,1137,backport-30067-3.6::3.6,0,merged,CLA signed::type-bugfix::,Backporting #1134 to 3.6. I accidentally based this on master before in #1136.::,35f18bddd03b44abaf7f0b534d8c7c1403e42b1b::
https://api.github.com/repos/python/cpython,1136,backport-30067-3.6::master,0,closed,CLA signed::,Backporting #1134 to 3.6.::,c2328ec0f4ad45d84b3d96c2b3f80017ef30af52::89b1824e693419b20b6a9113e5293f1c1a78065f::308f789d00735e6707dbc5c8f60a1c8cf245fb4b::f66c81ff499fb431e56bc68f5e39c2f7b9fcb6a7::89ddffbe9dcb38b79f99563b0d4d594d1105a192::2d0c2286f8e19e5d6a45cf16f766382115431c2e::0230e64d2c976ab755c145e97bf86032e0fe3a53::9268855ba6e99bf595e75b75780cf29667371f45::db3deb98e969d3f43b169cd320abd46b21a10c6d::7d5587e687ba78563b0f026019e638800497e021::1e8cc88a48a049b064f786bb4b97ea60b70dc504::7224a049b88ed37c510861528147e0db54911bb7::02e3357e089f37c23d0f3d1ebee9aa3d7a1492a9::b300c660d34d2027d443098ea605a8e0eb51d383::d372cda5cd46712c4e59262ec1ab981773b20bff::0683d6889bd4430599d22e12e201b8e9c45be5a2::3337d33a4518f7ab8a7ab6c9a75b8b92ba348b27::b121d737fe60e56dac5a44535e02089c6c02613d::7970cd483346dfd7723da214fb27399ecc574095::a4afdfcf27c2fa53c60b65867765244361abb1fc::9a4577a4bb23888fed2cf192cf1a4c95ce5c26f8::ce552e2d5c4ff90218fb41847e8ffb1fd3ba3b2d::d9b3cdd137239a5913de2252c3ce269e35ac63d2::51a477c0d53b09d5e876c23288ad006ad64c1e97::e48fd93bbb36c6d80aa4eb6af09f58c69d8cf965::3ab24bdd47fdd9d45719ad49f93d3878d4442d7e::9b49133082ec23b67e84d2589e66d7810018e424::e9c0e5559bbadb164d7c57b5a47b5544746dcb89::b067a5eef7fdf69264d3578654996fc3755df4ea::3cc5817cfaf5663645f4ee447eaed603d2ad290a::55b82e10dc6b75b30a72fa56beb60eaf54a008d4::2197eac6104311472f200645bc844adb46444b10::f2beceb7e54fadc507137f86cbe9d74f7e5b8f7c::0a1b656d8ce3da14f8acf947477b8e998e68ef3b::f28db60179e59633a99fab27646d22d0bd5976a0::bea9d2f6488f01794098d9fd4710b98df1bd9472::814213bdf1b95a5d863311b61c671010291f1197::1a8dd944d4016593e78a7a6c3c635adee783abfd::b00232842c5dd0d41054a02a7800fc5f82a92beb::91c499f8f94b89c08686ac9e7c81ea1d89221cbc::fae59e1aa87ee9598d032e0bd697969a5784025f::5c7b8f423ab1de6221351036ac4e139861a2f4a6::7333d1760e12cf27bcf63265f72521892285c10a::1457984c003b1e461f8aab93bfc37fd8e42312d5::893e86e9d3c0caeb878ccb1120c7259e022f3b68::76995cab69d5ef83d31d8a5754cbad11be4038cb::deea29e61e61f0e216bff3f0ca008f5ee231793f::6b81003bdbd9375886bae54f876650bcdccfe6c7::c9131b61fa060a51ec181053cade9f0a7ee91e4f::7e4897a2fb91e49f131a42ed6de88b5185f7dea8::4b6c41768a15fc85e3069603ef89344bd97f79af::8aa1ad892ff3cf4d8881cdae0e95be1a5bad175e::bc10e6bd7b6b4a738ce327e31550048d3dd8d8bd::046041e23b3c7e0b4a08705e2792ef3e28d03384::53039ad3814a8918c5311f37bd654428b9843fcc::bb59d89ceeb1abfb4d73c7fc60b534e4464adf35::7accf2033d03025cc5324f8b9d22582bca3623e9::c4a786b8ad2a625594551ab3bc991a6831ba7688::d413aa7893fd8ac64693c22deb2c1eee1840dbd7::8458b2b4ef06805d65c9e253433727e60820992e::1b93ed4f3ea5a4ac9786f15870e9b2812ba87cb1::023532e558bb0c5bf60195aebbafe63a0bebd85e::b05d48e021bc9c0700939978ab1ba300e0407a0e::784ba7c8ad53638c94270011d55d2536ff0cd2dd::65bd0bdf3d285e3917d66c600c95cb0842e3b3be::a6e84933d204f807e0e81b6a2237193b2e8ab89a::01e5230ef0b28658cf7311be199363eda98808bd::dea5101ae101aefed14de98e6bb1658f4cae8712::13802a3b11eb5202b16e464cbfb85c144f8581ce::604faba1db724951ee440337099d111e3ecade49::2ef08d3be780457c444741b67e6181675b044be9::d8b72e4a0673c414120b029065dbe77055f12e82::b8f5d07158f171a18be4d42f9769d3c9c073e748::93692b1a7cfd70be2aed33d77da05518d3a41f51::2adc66848135be8e86ba08690a858737a65ae40d::c7ff163abf428d73d4054754db3c99d06487e3ad::21ce65aa67f0dc63002ab0a5fb21ef921cf5279e::9d07aceedabcdc9826489f8b9baffff056283bb3::1936ba93c900d47d0c8c915184ac2fa7773c952e::03f7cb060414b17d88cb406f3e09f26c902d8658::226af23e858e2914cf78dfa6fd441c7b90a4cc91::d3e1e9df724d97ab83113c2d5fa15179d1dcd560::793f822068335cff68f25304a915c726f3f3a599::95c50e5aed9e5683676e18349dd94b11901a66b3::5ddddb166d9979161624c17cce3bdc11e1d9f3b8::343d48379c31f31cb0bcc843c537990c4283703d::1d391f926b37484b8d4b326003a72c0084db19ec::5976b9a88b8510789ed6e1679cc3578f7b345eb1::cefca3d7b5ee3f8421c082ccf24758fcb641fb6c::e0fbe5feee4f9c00f09eb9659c2182183036261a::43571dde7b81f8426e01875c611d29274135355a::9619ec99470100969a95a86ed8d7a1fab6c27546::38136e2a581ada0382d9bd1df5b32678cbd94b9a::8192402e8a279acd48434e348fa09e4a48181b28::3405792b024e9c6b70c0d2355c55a23ac84e1e67::b414e349eb6a6140a81ccec249bae3abe939e836::e544b40faa5ab61b6aba691577d90b2b641f664d::4e1a065c20856a00d0fe88ce022b249170608058::df6d7b406f3d1b2e4e2014751bfa25574c4df222::e9effe6bb6b6dcbc9fb13e47811a251a84a807c5::130c4ec5fbeb0878b88ec6aa06e47c9672566c17::284a2ba140cf11216e9804573d8cea6674ab90d9::33d70d1721ed8a23d2744f33d5358657adccf4cd::23b26c4e206427a9e0a1d39240c17a049cf8c732::78ad039bcf1a8c494cbc8e18380cc30665869c3e::6a4b04cd337347d074ae0140fb13dca5bd4b11ef::666165fddf499e80d10a5d9263846ec4534f6a2a::eb65edd1029876a4a5bb70b009aeb914088ac749::7253aded71df8d4bf8684fc78d11c596079211b3::51b646a55a4a1c4d0df764c4404a062fbcc6b356::9cef253ae3251b22d2fbb475fcb7a28805b78c86::26d013e00f9d4adbcf3e084bbc890c799ff70407::68d29809405dc766966b2b973b8597212fbc3dbd::80dfbe30b734f14f76a4e25c7fa8fdb7bdd3936a::d9b0b8f63c3db38dc547e0c115e9060f13f2dbcf::faaa80fb9887950e7068a9506e3517bcd6562ac2::ff6f3716279e75b2519133a82b9de0c3601963d9::68c5e4c592495f1e0f4f60acb3483beb6aa87be1::4807fa8386f825d0c71192c59f7e33b99a94bebe::701f13ab930b62a634579951dc610f737f461135::16416c22f9b8d9e067506d3a98f661756c80389c::d7a8d32ce2d2b17ea9584759a281235ebfe81a89::b3536df9f8b041142f5e3bf6037c11be06eb7f59::df6f3f6f5743a061d6c3b939136a11ac170ae69e::7c6d6e056460753c916348feee0e4916a97d7c86::2f386254e2cf054cc7ee5103b54c1cf16d9fa979::4652d82a51e6530a4f820588a6209d3295963bdb::61a82a5fbf1a674b91764652ab70f5dbb9ba50f2::c60948464fb0ec116ea227f6bce8a4bb8fb75257::aac875fa2f03cab61ceeaa2621c4c5534c7bcfc2::fa448de97de85d242491d7ad259ade0732f05db8::99f8d33a94c8951fd6b2d5f079d20be698150993::7927abba3449e12d0ae3518b722fdfeb383b4039::388e2568fc919a177df2d2949b575c553aea84ac::faa2cc63e45bc7d7ffab84bebe5a9f4fe065bd96::53b2667dcf2a7d13af466a5fb91844f5125a920d::02c6fa573a0a7f417e21ad9e81bcff3ac61a9fa8::78add3309b53d68c2c5c118ec63f7485bbf93c9a::0dfd18a1e14e08b0d6459c2dd1898e5bb38020c5::9cd5e87bac51d7b901e3c36bf22728bb1693da59::3fce38c540681a736b7e5ca7611758f7bc159c9e::4ac01f0ff3e3c9c02f5cc8c55f2fbe4639808f5e::7c2081122c2a6b8ea27c3111da7f19f7824fe18a::948171bf999cf8b3e12048851041d2e04ae3a78c::46e81d3345b979f835740a228857906dca0f59c0::49fc153342f98e0d4ae5a96b88f3e91e4c5861d7::b044120f048571030552eefab8ba2329a9e76ceb::69eab3123ed1de4bed4b7dedecabe415f6139bb6::fca705d533970011e50b3f278aab81cead39b00d::da88596a19d2cad0e85a2b3c3290b5b1d97a793d::3d258b1eb453bcbc412d6b252f5bdceae0303f07::d1f566f6bddc67e9870eaa75ae477208b9a199be::6fad4090ec9a27f8572bb00661b9890f01fb62f7::fcd79ada4e4cf335372538b34c8eb89cf09f84b2::e9213d929d7b0075539e87416f6a6fb86c27454b::6efc812280b9303d37f51fbd061f7c31379fb72e::0acdea79cba3883c5e7035c7336fb0ce54435c03::07e6cbd7b9e5b6047a608cedd5cc9b20891a3972::75345c552d0889f4f63039d6063f371846c8f41f::360c49b9cf3c164fa1ee3228e1a68282d77c5e4e::8c18fbeed1c7721b67f1726a6e9c41acef823135::69c0db5050f623e8895b72dfe970392b1f9a0e2e::fe30339534c602af1123e1402e44a1463f91f2e5::677df6ecade6ff503d3c3c93cf157ed12fec9386::1688e64925967ba41df682211efaa8d066c4b3e2::f93b9948920018eb30ac678647c75d5e8e5ca458::af839fe2fef12dbbc8083fc7f01daee48a85a916::72c51136c6269112f4c37ef14f972c89b92c272c::c0f3e21a23356133c30926b6cdf3e0e70cbc8486::906118d8c68160ed4a3d15cec803d1ee57836517::ee51327a2329eb9c2bfbb6ea673cfab4299450b0::90eafdb1546604c0e9bc207723484b6816570cfe::cc3331fec8b7a61c3f06c097eac85bfa38490758::8c8785b2f8e4048cef350f89c686266f4519b67c::74bfcc314b188e1e8c90e442270e36d6510755ee::5dafaece67cb576ef96579fb5ddcbf62e0827b0d::8b82236952619c3838865ff535e5ce77b59b4a78::ceff32fb833e7be42508ffa73344e2e56865e54b::d2fc7824104172b47cdcea09d7ce699d5bfc2ba6::abc68484b2c523b500802cb8e8913531e0ff9a8d::bc2031470eac4b199692921b4e97730c85ceb678::08f9f71162dedeec51ad99bac1b26eb0ab014400::596506216104613591218c2896cdb49fa0b7e5bb::f01de61a8efea8319c65365898982f929d59a895::c4021af50526f488c0c280e7c7eaa83ef80ae1df::346dcd65e6b832a35b4cfc15b7309b51a38e9ca2::2609c9ee78c53d501914a5a90dbe094d9a8c3c97::da6ad2f780d187fbfdea330d1037766ae7bdb778::1b43a959fb1dd2e08dbf51bbc644df5ff2eb357e::a6b4e1902250d6f28ca6d083ce1c8d7e9b91974b::bf4bb2e43030661e568d5d4b046e8b9351cc164c::7b5b1379ac2c1e89ebf90b88b5d32457910e975e::599bb181036f724629a515317f0f39520950d51c::8d1f935945ca8cf3665315e0f82358fffe689353::4c75fbb485c0e42181aab95c2ae92c597915827c::0a17e584461b14ff65ec287048f53911dbb22222::7d5d13d8d003ae5b62bb8c9ef1d1f310eaabc506::efde51ad54c58353f25ff80c8d30dbee82ef33a3::4415b823a08163a8728d13ff06565efb12353fc0::a71a3ad54d14483cfaebd8e0fb96c97c798d9e32::90e3518225bafaff01469ed48c472ae7db5686f0::c4e557ed9933499e1c97644ea12ad77ba064e829::d184c20e359907e326696724a3395ce1d542f42e::cb1e002c07622e027e80a3843d27a623d1617430::ce92be1825c5ca1d3e6bff24598f3aa54c000b22::ba980e8ef01dfaf484defd6e7a19ea5375de1338::ed278448daa4afb78d1af57b0c179097477f9832::19d61b265fabed01ebfb8eae9855f2ee59ff591b::616d3eb7ef96f1a27bbff68fba6e5d229257d936::d0d575a6db8cb3b2a720be9f404af3d754da9a5d::c26b19d5c7aba51b50a4d7fb5f8291036cb9da24::af685f9050416da8050e0ec11a8dff9afd4130e7::4c116cb3b3ee38cae229f7e0df0cd2045fe73c27::a524d6307273e3920d410452ace89610c843f051::854ca174a92970d11d9b063af46e00d132832944::90eb7a9ff4ce38b5c4e3662bdd42a0ed513893a2::577fc04a7157f6e904cffd6a0e1ad83d3460acd6::28ddd3c905836907bf0c4df909067d3a054358c1::03066a05f5cdf96bc3bf15718f586877860f2d47::f0c416799b33742af36d7c6608b9a422615fb3d2::14944c62300f741488c2f28cb91ad1e3fef7343b::bc9025012fc5ae007283e9ef345dba0ba08cf2b9::bd1173f202f5a3990063d980368e7ad1edc9b5b5::9b409ff41ceb2d7ea7e8d25a7bbf5eb7d46625f3::97a40b7a5b2979fb17e1751c139fd4ba1ebd5276::84c2d75489a84174d8993aea292828662e35a50f::119d94ad37a99ecb0b8329467d04cd9d909e310e::936633282220768a6fec9bd6bb53ee9e3ec354df::04ac85394565a1cfbfae03b072ca82adc3a83d3b::c5c24cfaf9fe9a38f0901756cd797bd12524a8b7::2cdf087d1fd48f7d0f95b5a0b31b9a624fa84751::cbc46afa59dcc43c2c8c90ae7a0a0dc404325a89::413a8913aee255d0635e4ddbb9c343d9e5e76fea::d390bebd6afb57b75bdd3a015a0670d6c972a107::
https://api.github.com/repos/python/cpython,1135,backport-30067-3.5::3.5,0,merged,CLA signed::type-bugfix::,Backporting #1134 to 3.5.::,a67ede73b4904542dab70d3e6985e923b4e839c5::
https://api.github.com/repos/python/cpython,1052,fix_links_collection_docs::master,0,merged,CLA signed::needs backport to 3.6::skip issue::skip news::type-documentation::,"Fixes several link targets in [`library.collections.rst`](https://docs.python.org/library/collections.html). There are 3 remaining ""invalid"" links: - `list.append`, because there is no ""target"" for that method. There is something documented in [`tutorial/datastructures`](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists) but these are not valid link targets. - `defaultdict.get`, because it's not explicitly documented. Should it link to `dict.get`? - `OrderedDict.update`, because it's not explicitly documented. Should it link to `dict.update`?::Change also `:func:'most_common'` above to `:meth:'most_common'`.::Avoid using the same link multiple times in one paragraph. ` ``rotate()`` ` would look better.::What is changed here?::Shouldn't be added the paragraph ""In addition to supporting ..."" as for UserDict and UserList?::This phrase is outdated (remained from Python 2). Virtually any object (not just sequences) can be converted into a string using str(). However bytes is bad example, it emits a warning or an exception when converted to str.::Nothing. I originally changed it to `dict.update` but then I wasn't sure if that was what was intended and reverted it again. Just forgot to revert all of the change.::“The `*seq*`” is missing a noun. I would either write “`*Seq*` can . . .” or “The `*seq*` argument can . . .”. Changing the parameter name makes this problem worse. ::",bc1cb5a057c62f605bfede1e45b60a747eb6a791::6ae77ec603b8c6384d584c5ecb63dd476bc1ec11::40ac948bf7642668496050c7d47878df5ece71df::9b48be9537e7458309dbb4d85accf4a91148fdf5::e7d12ef9c3cd855a2cd617bc62c2e3642bfb0bc8::5957f98d63ecbc72f42aecebc3a687670bde3d54::
https://api.github.com/repos/python/cpython,995,doc_29981::master,0,closed,CLA signed::awaiting changes::needs backport to 3.7::needs backport to 3.8::needs backport to 3.9::type-documentation::,"::This is bad example. The result is just `{'foo'}`.::See an example in tutorial.::@serhiy-storchaka thanks for mention, change another example for set comprehension.::This is missing `}`::Typo: ``canb``.::Empty sets also can be created by using the constructor and set comprehension.::Maybe ""Using a dict comprehension""?::I think empty set can't created by set comprehension, `{}` return a dict, I'll add up the constructor.::`{x for x in ()}` We can't say that the set created by a set comprehension is non-empty until we have created it.::Great, I didn't thought that way to create a set before.::Another question, so `{}` is a dict comprehension, or a `dict` constructor?::``{}`` is a dict display.::""process all or part of the pair elements in a sequence"" makes no sense to me in this context.  Most likely you just want ""to process all or part of the items in a sequence"" as with the set comprehension. I think it would be good include a link to the reference documentation.::I think you mean ""generates the set of strings ``{'r', 'd'}``. I think it would be good to include a link to the reference documentation.::Given that you adding this paragraph in parallel to the way it is done in list and tuple, it would be best to put it at the beginning of the section, the way it is in list and tuple.  I would drop the example of creating the empty set via comprehension, it will just confuse the reader.  Please also reorder the sentences so that they are in an order parallel to that used in list and tuple (ie: the constructor sentence is last).  This is mostly a trivial style nit, but consistency is good :)::As above, I think this would be better at the start of the section, with the constructor sentence last.::I move this into class dict, not sure if you are saying this section. But it is now consistent with `list` and `tuple`.::Remove empty set comprehension ::fixed::fixed::fixed::Looks like you have a stray 'b' there at the end of the sentence.::Yes, I should self-check this one.::A list/set/dict comprehension processes the items in an iterable. If the entry for listcomp says 'sequence', it should be changed.  I also do not like the 'all or part of' phrase.  The iteration runs to completion.  If one wants to not run the iteration to completion, one must use an explicit for loop.  Perhaps the 'or part' refers to 'if' clauses.  But that is a form of processing.  If the iterable yields volatile items, they are gone.::Ditto::I would use 'Use' instead of 'Using' here and rest of list::'by several ways' is not idiomatic.  Either 'by several means' or 'in several ways'.  The latter is used below for dicts. ::I'm wondering if we should still advertise the use of `set([...])`. We replaced all instances of it with set literals in the stdlib. See http://bugs.python.org/issue22823 for details.::IMHO these examples are not for creating set literals. They demonstrate creating sets from iterables using the type constructor. Without these examples the user can though that `{x for x in iterable}` is the only way.::",9c783795d268b46a70150ca86a1ec675599b510b::f076f008f093125f33729f2a58bdd8db20562e3c::1337ee887572c1f54b9356414447a6c2cb31d567::d9e7c167f14d6094db02f240adf055a08b7e47b0::5e4cbfa735a76c4065296564cfdb0a3965cbe8c3::e9093654e55053e4873e4fe30f84b1e56d03aa42::073256a5f2398cc522169078d77c5bcc1245188a::
https://api.github.com/repos/python/cpython,987,patch-1::master,0,closed,:robot: automerge::CLA signed::awaiting merge::needs backport to 3.7::needs backport to 3.8::skip news::type-documentation::,"I am not sure when `TypeError` is the right choice. Definitely, most of the time I've seen it done, it causes trouble, and `NotImplemented` usually does something better. For example, see the work in https://bugs.python.org/issue8743 to get set to interoperate correctly with other set-like classes --- a problem caused by the use of `TypeError` instead of returning `NotImplemented` (e.g. https://hg.python.org/cpython/rev/3615cdb3b86d). This advice seems to conflict with the usual and expected behavior of objects from Python: e.g. `object().__lt__(1)` returns `NotImplemented` rather than raising `TypeError`, despite `<` not ""making sense"" for `object`. Similarly for file objects and other uncomparable classes. Even complex numbers only return `NotImplemented`! >>> 1j.__lt__(1j) NotImplemented OTOH, if this note should be kept, and this PR rejected, this section could use a decent explanation of the difference between ""undefined"" (should return `NotImplemented`) and ""nonsensical"" (should apparently raise `TypeError`). Perhaps a reference to an example from the stdlib. <!-- issue-number: [bpo-29986](https://bugs.python.org/issue29986) --> https://bugs.python.org/issue29986 <!-- /issue-number --> Automerge-Triggered-By: @tiran::Instead of removing this note, maybe you should change it say return `NotImplemented` instead.::Unfortunately that clashes with guidance provided on the issue. :) Maybe this can get hashed out there?::> Unfortunately that clashes with guidance provided on the issue The important thing is that the bad advice (`raise TypeError`) is removed. The consensus is to `return NotImplemented` in this case. How explicit you want to make that in the docs is bikeshedding territory. In other words: I'm totally fine with just removing that paragraph.::",e3085ad724454cbddf6b319868d6af557364e20a::c995fe118d0f754d1e2728cf95c76ec83c611dbd::52de6f92574bf8dccab7629b97bceba474f5b00e::
https://api.github.com/repos/python/cpython,981,asyncio-sslproto-finalize::master,0,merged,CLA signed::needs backport to 3.6::,"I'm using `Python 3.6` and `aiohttp 2.0.5`. Given this server: ```python import http.server import ssl addr = ('localhost', 8081) httpd = http.server.HTTPServer(addr, http.server.SimpleHTTPRequestHandler) httpd.socket = ssl.wrap_socket(httpd.socket, keyfile='server.key', certfile='server.cert', server_side=True) httpd.serve_forever() ``` and this client (that basically sends `get` requests to the above server): ```python import asyncio import aiohttp import resource last = 0 def handler(*_): global last mem = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1024 print('Variation:', mem - last) last = mem async def get(session): response = await session.request('get', 'https://0.0.0.0:8081') # https (ssl) print(response.status) response.close() async def main(loop): conn = aiohttp.TCPConnector(verify_ssl=False, enable_cleanup_closed=True) session = aiohttp.ClientSession(loop=loop, connector=conn) for x in range(500): await get(session) await asyncio.sleep(1, loop=loop) handler() session.close() if __name__ == '__main__': loop = asyncio.get_event_loop() loop.run_until_complete(main(loop)) ``` I have been able to reproduce the issue. In fact, every 6-7 `get` requests, I got a `Variation: 0.25` printed on my screen that indicates my client uses 0.25 more MB of memory (it just grows indefinitely, I tested it with 10000 requests). Using ipdb and objgraph led me to this graph where you can clearly see that there are some circular references between `SSLProtocol` and `_SSLPipe` objects: ![sslprot_backrefs](https://cloud.githubusercontent.com/assets/9290766/24620798/5394f5cc-189f-11e7-8027-c61ac927d36f.png) I know that since PEP 442 it shouldn't be a problem anymore, the python garbage collector doesn't care about the cycle and collect them anyway. But the interesting fact is that breaking this cycle (see my commit) actually fixes the memory leak in my client (no more `Variation: 0.25`, just always `Variation: 0.0`). My hypothesis is that circular references between `SSLProtocol` and `_SSLPipe` actually hide some circular references between some C objects (that define some `tp_dealloc` slots), that lead to these memory leaks.::",bc7b8d4d75462c0f9fb2e42dac17d2e3c709d67b::
https://api.github.com/repos/python/cpython,939,backport-b94d7fd-3.6::3.6,0,closed,CLA signed::,(cherry picked from commit b94d7fd4efa877d649cea9c8125c8869ffe0c32d)::,15c05af241aca29d5a49ec009720f1b69079b0dc::
https://api.github.com/repos/python/cpython,794,datetime-compat-unpickle::master,0,closed,CLA signed::awaiting review::needs backport to 3.6::needs backport to 3.7::type-bugfix::,"~errors='surrogateescape' should be used for successful decoding.~ encoding='latin1' should be used for successful decoding. <!-- issue-number: [bpo-22005](https://bugs.python.org/issue22005) --> https://bugs.python.org/issue22005 <!-- /issue-number --> ::I don't understand how the last condition works.   Is it supposed to allow str year with year[2] outside of 8-bit range? ::If the third byte is in the range 0x00-0x7f, it is decoded to the character in the range U+0000-U+007f. If it is in the range 0x80-0xff, it is decoded to the character in the range U+dc80-U+dcff. Hmm, but in the latter case `ord(year[2:3])&0xFF >= 0x80`, and that condition is false. `&0xFF` is not needed in this case. But '&0x7F' in other two cases are needed.::",caf031ef94707c853e80e386c84b92de57532060::6bd9b2f34242a5913ef9024d66737efb78921e8a::531c5f6e77fb59e04917f632e0e368e291d010b6::cb55d65e337ad8497199ac13e93703c6773e2d0c::f4c80ff768a7cd56e7522eb22994b6a7707c9ab7::447f137fc4df8faf7075d3a771158a01278b2632::985c9236d71f32e1ef780c0335a06362314fb635::66bf2c2849908a191ae089255b22240b02de2d08::46b28a0a8ad6e88cd8290c11b0ec7db346310d67::7d44e3aa068ebb4b63a5401e5bfd8f125ff7b6fd::1f45085f44dbf314f52383ea621a3514a1146a78::4e890c0e59915ef364e666533652635094f35bc3::
https://api.github.com/repos/python/cpython,742,fix-issue-22708::master,0,closed,CLA signed::awaiting changes::needs backport to 3.6::,"Original author of this patch demianbrecht@gmail.com HTTP/1.0 not supported CONNECT method, fix http version. Support for IDN. https://bugs.python.org/issue22708::Is there a reason to not use `b'CONNECT %s:%d HTTP/1.1\r\n'` instead? We already know that ""HTTP/1.1"", `dest.encode('idna')` and `client.HTTP_PORT` don't contain any non-ASCII chars so there is no need to encode it ASCII.::This comment is now redundant and can be removed, but I don't see a reason to remove the test itself.::",a9b201c1312fa5579b50f7fd75c2bef38db787d2::
https://api.github.com/repos/python/cpython,625,624_backport::3.6,0,merged,CLA signed::,support.unlink waits for the files to be removed before returning::,a461a11b838b5b1953ea5a7ab3e0de9ecc860a5d::
https://api.github.com/repos/python/cpython,623,backport_391::3.6,0,merged,CLA signed::,This fixes a consistent failure on AppVeyor introduced by GH-323 (bpo-28624).::,d94830746140b08c0f952ffea718767ce211d0ec::
https://api.github.com/repos/python/cpython,621,appveyor-skips-3.5::3.5,0,merged,CLA signed::,::,26fa19f74383b40dea9d7876c20a34547ca1bae7::
https://api.github.com/repos/python/cpython,620,appveyor-skips-3.6::3.6,0,merged,CLA signed::,::,88ca84a4b397e2dfa9f0d9ad31ec657b57533ea1::
https://api.github.com/repos/python/cpython,493,appveyor_2.7::2.7,0,closed,CLA signed::,::,9826527f7438f299df0965239a5590ba245a435e::
https://api.github.com/repos/python/cpython,492,appveyor_3.5::3.5,0,merged,CLA signed::,::,7fbbb8084561b758169da908b9c02f7870fe23bc::be52921cebdf61493fb9599d839f52b2a94a969b::
https://api.github.com/repos/python/cpython,491,appveyor_3.6::3.6,0,merged,CLA signed::,::,940c05393cbd9ac5947f272e3ba596d2ebe294ca::
https://api.github.com/repos/python/cpython,480,ssl-handshake-cancel::master,0,merged,CLA signed::expert-asyncio::needs backport to 3.6::,fixed ssl socket leak python/asyncio#487 KeepSafe/aiohttp#1679::Can the `waiter` here be in a resolved state without an exception set?  I.e. is `else` clause possible here?::2020 and I'm still seeing this issue when the site returns an invalid certificate. The handshake is aborted and the socket isn't released. I'm on Pyhton 3.6.8 with the latest asyncio and aiohttp. ::,225606cd363fc2daab0ee786cfd2324226ceb9a0::faa4b5c685057b085f89269b705fd421a2d6d5d9::47446a2e75aeebf75cee88fc4bb1f4fea722e0fc::
https://api.github.com/repos/python/cpython,409,3.6::master,0,merged,CLA signed::needs backport to 3.6::,"Some servers does not complete ssl shutdown procedure, which cause socket leak on asyncio side. ::I would rename this method to `_on_shutdown_timeout`.::To make the code more clear I would set `self._transport = None` in `_finalize` and `_fatal_error` methods.::done::done::little nit: I'd add a newline before this `if`.::Why is it 5 seconds? Is this some timeout value defined in some SSL RFC?::Should we also cleanup `_shutdown_timeout_handle` here?::Should `fatal_error` just call `finalize`?::I don't think that makes sense. ::added cleanup code for `_shutdown_timeout_handle`, it is possible to get here while handle still active::",b4eb6ae292ac50bbc8bd6d26e97fd59bff2e584c::31d625a1ac8bb80d6257117e891d74ace8a34f05::
https://api.github.com/repos/python/cpython,382,bpo28598_backport_2.7::2.7,0,closed,CLA signed::,Backport of #51 ::,9097de9e62f003bd038e4da6b36823a2d0b9853a::ee2754cb7dffc52e34c42eacb7cae495e166982e::
https://api.github.com/repos/python/cpython,144,docs-pymapping-check::master,0,closed,CLA signed::awaiting merge::needs backport to 3.6::type-documentation::,"As discussed below, in Python 3, PyMapping_Check(list) returns 1. This behavior is justified by a developer as consistent with Python 3's internals. It is however surprising to C-API users (speaking from experience) and because it deviates from collections.abc.Mapping. I think it is better to be vague than describe the implementation details. https://mail.python.org/pipermail/python-dev/2009-May/089445.html <!-- issue-number: bpo-5945 --> https://bugs.python.org/issue5945 <!-- /issue-number --> ::Use double space after sentence-ending period. The line is too long, wrap it at column 79. Make collections.abc.Mapping a reference.::I recommend using @serhiy-storchaka's suggested wording to move this PR forward. ~~The C-API mapping protocol is not equivalent to :class:`collections.abc.Mapping`, and also returns ``1`` for sequences that support slicing.  Use :c:func::`PyObject_IsInstance` instead.~~ `PyMapping_Check() also returns 1 for sequences that support slicing.`::",0c7abc14f52623616c24f9cc37f79b2aa206a9b8::be98854415d97981b1a1b5e1522c7579e6360646::463418bf67109248dbbfe534d7cec93558280cdd::
https://api.github.com/repos/python/cpython,95,bpo28598_backport_3.6::3.6,0,merged,CLA signed::,Backport of #51 ::,a2e081462b60e842e536c71b2836459b3222aedc::99b299b107c6eaf125fdf5d712da7c045e39dc96::
https://api.github.com/repos/python/cpython,93,3.5::3.5,0,closed,CLA signed::,Backport for #51 ::,
https://api.github.com/repos/python/cpython,92,bpo28598_backport_3.6::master,0,closed,CLA signed::,Backport for #51 ::,c2328ec0f4ad45d84b3d96c2b3f80017ef30af52::1a9708e8c60ad2ae1c65cd2a323d063fe949e726::
https://api.github.com/repos/python/cpython,50,backport-3.5-pr-47::3.5,1,merged,CLA signed::,"It took me quite a bit to figure out what this was referring to, since the given issue number is wrong, and the original commit message I found through git blame lists a different, also wrong issue number... see https://bugs.python.org/issue27122#msg279449 (cherry picked from commit af88e7eda4101f36e904771d3cf59a5f740b3b00)::",df948fd8300bcd2ddcfd18ddcb0f3d3e0e3b9498::
https://api.github.com/repos/python/cpython,48,backport-3.6-pr-47::3.6,1,merged,CLA signed::,"It took me quite a bit to figure out what this was referring to, since the given issue number is wrong, and the original commit message I found through git blame lists a different, also wrong issue number... see https://bugs.python.org/issue27122#msg279449(cherry picked from commit af88e7eda4101f36e904771d3cf59a5f740b3b00)::",79f292f1ba63c6e3128b8c855a727bef16dc7c54::
https://api.github.com/repos/python/cpython,44,bpo-news-support-2.7::2.7,0,merged,CLA signed::,"Change documentation's `Show Source` link to GitHub (2.7 branch) Render issue role as bpo-NNNN::Is there space between 'bpo-' and issue number?::No, there shouldn't be a space :sweat_smile: Thanks for the review :) Will fix soon.::",63b8f25db3738c98d2f16fc5ccd0184b24e45ea4::53201d622ffe7cd54a7dcab58c36dcfc112b74da::
https://api.github.com/repos/python/cpython,43,bpo-news-support-3.5::3.5,0,merged,CLA signed::,Change the url to 3.5 (cherry picked from commit 79ab8be05fb4ffb5c258d2ca49be5fc2d4880431) ::,73e29039eb83e987530f6b60b508361444075df0::
https://api.github.com/repos/python/cpython,42,bpo-news-support-3.6::3.6,0,merged,CLA signed::,cherry-picked from https://github.com/python/cpython/pull/1::,98cb83e9e98108efd7b2a17e90bb1f877b8121a3::a8d5b8f5855f60c53c4cf30d6e21a46ec9f79def::
https://api.github.com/repos/python/cpython,40,bpo29438/py35::3.5,0,merged,CLA signed::type-bugfix::,"::Why these lines are deleted?::In Python 3.5, PyDict_DelItem won't resize dict.  So `cached == dict->ma_keys` in most cases. One exception is callback called by weakref or `__del__` inserts some items to the dict and resize happened. In this case, `cached != CACHED_KEYS(tp)`, so `DK_DECREF(cached)` will be ""use-after-free"". In such case, the insertion from the callback would update `CACHED_KEYS(tp)` correctly. So clearing `CACHED_KEYS(tp)` doesn't make sense for most case. Even when the callback inserts items through `__dict__` (not regular attribute access), skipping `CACHED_KEYS(tp) = NULL` doesn't cause uncontrolled memory growth.  And it happens very rarely. So I think this code is not worth enough.::",af40edfc9c9386c845e7496c798cd0a1aab0a4e6::
https://api.github.com/repos/python/cpython,39,bpo29438/py36::3.6,0,merged,CLA signed::type-bugfix::,"::I'm not sure about ""bpo-"" in Misc/NEWS and commit message, but if this is correct the patch LGTM.::This was the first pull request. https://github.com/python/cpython/pull/1/files::",3a7f4827d6e67503ac096cafb85bf1281798b558::
https://api.github.com/repos/python/cpython,38,issue-28929-2.7::2.7,0,merged,CLA signed::type-enhancement::,Change the documentation's `Show Source` link on the left menu to GitHub source file.::,d4a44d423e5648dafa2954af51da1c258fa272db::
https://api.github.com/repos/python/cpython,37,issue-28928-3.6::3.6,0,merged,CLA signed::type-enhancement::,"Change the documentation's `Show Source` link on the left menu to GitHub source file. (cherry picked from commit 23bafa294c75c20cb85ae5d97d7571a3a0ad8dd3)::Should this updated when Python 3.7 is released? I think 2.7, 3.5, and 3.6 branch should not have this if statement. Or could we pass variable like `doc_source_url_prefix = ""https://github.com/python/cpython/blob/3.6/Doc/""` from conf?::Thanks for the review, @methane :) I removed the if statement as suggested. Branches 2.7, 3.5, and 3.6 don't have the if statement anymore.::",e978c26e31074e4fa1867bb0400b642223ec5fc2::424a1d7f1400278f5ee7d3584a2740e6ef1f6304::
https://api.github.com/repos/python/cpython,36,issue-28928-3.5::3.5,0,merged,CLA signed::type-enhancement::,Change the documentation's `Show Source` link on the left menu to GitHub source file. (cherry picked from commit 23bafa294c75c20cb85ae5d97d7571a3a0ad8dd3)::,7bf45662dec9e2f08282e91f6fe99a65fb8a2fec::0cebcb2ba3d3c0cf227f510af82b4f34e8ff81be::
https://api.github.com/repos/python/cpython,27,travis-27::2.7,0,merged,CLA signed::,"::s/3.5/2.7/::Since there is no `make venv` on 2.7, just do `pip install -U Sphinx` (or add a 'venv' target, but that's a bit weird since there is no 'venv' module in 2.7).::Along with the `make venv` change, remove `SPHINXBUILD` here.::This won't fly with 2.7, but I'm not sure what we can do instead to fix it.  On the other hand, do we care as much about coverage on 2.7?::",75ef63fa00e6cf4f55e37d387229e5dc617f4773::bfeb853c04a9887cc93743ddf0a8fc85a183f99d::25407b2dd352b378835cf58c1e2555a92689b0a7::dcad9c1b3359b4ee59a64e1fc2e89f90b5e9e6a5::
https://api.github.com/repos/python/cpython,26,travis-35::3.5,0,merged,CLA signed::,::,d49017e07d18e848e78814d4ae6802c35615f5fa::8cf78fb9b8d465c0d1e2264b8133da50a56855dd::a78efcb69c09e38a30c603c15d9713f4b30fa7ae::29f8a3b0daf02b019eb3b21209b8b05c1fdc4633::
https://api.github.com/repos/python/cpython,25,travis-36::3.6,0,merged,CLA signed::,::,1a5ff6a75668ba18d7c51b48a3706468876c2a88::8eaa1d0b411c7a5b233ffd0ae81f98b0fe064dfb::6475d73b5aa123163fc42bdd15bfc075ac441d92::1952adf141a9ce17d9b1cbc89654375b73cb7eae::
https://api.github.com/repos/python/cpython,23,bpo-29474-3.5::3.5,0,merged,CLA signed::,"There were some grammatical errors in weakref.WeakValueDictionary documentation. Same as https://github.com/python/cpython/pull/10, backported to 3.5 branch::",723fcd3ce608525a30e8d40e1ec0af0ebc016b1d::
https://api.github.com/repos/python/cpython,22,bpo-29474-3.6::3.6,0,merged,CLA signed::,"There were some grammatical errors in weakref.WeakValueDictionary documentation. Same as https://github.com/python/cpython/pull/10, backported to 3.6 branch::",3af0ada31053239bc2c22d237e8fdff841ef2cb1::
