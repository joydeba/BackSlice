https://api.github.com/repos/bitcoin/bitcoin,21489,202103-versionbits-fuzz-followups::master,0,merged,Needs backport (0.21)::Tests::,"Followups for #21380, shouldn't change coverage. Marking as draft to avoid introducing conflicts for the speedy trial PRs.https://github.com/bitcoin/bitcoin/pull/21380#discussion_r595114366 ;)::The way it currently is makes way more sense to me; I had a go the other way to see if it'd make better use of fuzz magic somehow, but it doesn't; so sticking with what I like.::",aa7f418fe32b3ec53285693a7731decd99be4528::
https://api.github.com/repos/bitcoin/bitcoin,21472,202103_bech32m_0.19::0.19,0,closed,Backport::,Backport of #20861 for 0.19. Also includes #21471.,2d0a8bc59aef8914b47666aa7c4aef8864760354::b51f67398ae46700e669db86b0173db355abc987::47d4601344289663d7b7a040fa77dc2df7ed1160::0dd36c6c61ecbc15e2a09e92e8a3dadba2e24d1b::
https://api.github.com/repos/bitcoin/bitcoin,21083,createtx-same-feerate::master,0,merged,Needs backport (0.21)::Wallet::,"During coin selection, there are various places where we need to have a feerate. We need the feerate for the transaction itself, the discard fee rate, and long term feerate. Fetching these each time we need them can lead to a race condition where two feerates that should be the same are actually different. One particular instance where this can happen is during the loop in `CreateTransactionInternal`. After inputs are chosen, the expected transaction fee is calculated using a newly fetched feerate. If `pick_new_inputs == false`, the loop will go again with the assumption that the fee for the transaction remains the same. However because the feerate is fetched again, it is possible that it actually isn't and this causes coin selection to fail. Instead of fetching the feerate each time it is needed, we fetch them all at once at the top of `CreateTransactionInternal`, store them in `CoinSelectionParams`, and use them where needed. While some of these fee rates probably don't need this caching, I've done it for consistency and the guarantee that they remain the same. Fixes #19229In commit ""wallet: Use existing feerate instead of getting a new one"" (81b6a6b12b46ee351a293ae4928e815c37f193d3) Review note: this assignment is equivalent to previous `GetMinimumFee` assignment because `GetMinimumFeeRate` is always assigned to `nFeeRateNeeded` line 2810, and `nFeeRateNeeded` is always assigned to `coin_selection_params.effective_fee` on line 2896 (thanks to `pick_new_inputs` spaghetti) and because `GetMinimumFee()` is just a wrapper for `GetMinimumFeeRate().GetFee()`::In commit ""wallet: Use existing feerate instead of getting a new one"" (81b6a6b12b46ee351a293ae4928e815c37f193d3) It appears there is a change behavior here. ""Fee estimation failed"" error will now take priority over ""insufficient funds"", ""Signing transaction failed"", and other errors. It would be good to mention this in the commit message or at least say that this isn't a pure refactoring like it might seem to be (could mention the pick new inputs race condition behavior change as well).::In commit ""wallet: Replace nFeeRateNeeded with effective_fee"" (befa7ef609c977e6baa609900cedf3d41da12e53) Review notes: It is safe to set `coin_selection_params.effective_fee` here, because there is no other code except `SelectCoins` called on line 2897 and the `nFeeRet >= nFeeNeeded` branch line 2959 below which ever read `effective_fee`, and both of these pieces of code come after the place where `effective_fee` was previously set on line 2896. Also, it is nice to see the unnecessary `nFeeRateNeeded` variable being removed. Would be good to mention this is a pure refactoring that doesn't change behavior in the commit description (same for the following 2 commits).::In commit ""wallet: Move long term feerate setting to CreateTransaction"" (d3191194a8ced53ae511551dce1321c0416d9e6d) In this commit and next commit, usage of SelectCoins is now more error prone because caller is responsible for setting `m_long_term_feerate` and `m_discard_feerate` variables in some cases (in other cases they are apparently never used), and there's not documentation about when to set them. Also these changes add to a proliferation of CoinSelectionParams constructor arguments can get easily confused together. A safer approach might be to make these `std::optional<CFeeRate>` members instead of `CFeeRate` members so the CoinSelectionParams constructor doesn't have to be involved with them at all. Then they can be directly set by name, and explicit errors will be triggered if they are ever accessed without being set. ::The constructor parameters are more to make the tests easier to implement.::Will update the commit message if I have to retouch.::Will update the commit message if I have to retouch.::I suggest not expanding the monster constructor here. Overall code readability seems to improve just assigning the new members after construction. (Also much cleaner to backport...)::See https://github.com/bitcoin/bitcoin/pull/21083#discussion_r579457178::re https://github.com/bitcoin/bitcoin/pull/21083/files#r584415074 and https://github.com/bitcoin/bitcoin/pull/21083#discussion_r579457178: I agree with @ryanofsky and @luke-jr that expanding this very large ctor signature makes the code less readable. Russ's suggestion of using std::optionals is good. Alternatively, I think these small changes would make things more readable: - add line breaks to the declaration and call sites, so there aren't 200+ column lines - add doxygen comments to the members so it's obvious what they're doing - use inline comments in the call sites: ```diff -CoinSelectionParams coin_selection_params(false, 0, 0, CFeeRate(0), CFeeRate(0), CFeeRate(0), 0, false); +CoinSelectionParams coin_selection_params(/* use_bnb= */ false, /* change_output_size= */ 0, +                                          /* change_spend_size= */ 0, /* effective_fee= */ CFeeRate(0), +                                          /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0), +                                          /* tx_noinputs_size= */ 0, /* avoid_partial= */ false); ``` c++20 will bring [designated initializers](https://en.cppreference.com/w/cpp/language/aggregate_initialization), which make initializing large structs like this much more readable. ::I've tried to make it more readable. However I also think that setting all of these things should be set in the constructor and that the current thing where we set all the parameters ad-hoc is not a good design.::Updated the commit message::Updated the commit message::It seems to me that `effective_fee` is a feerate, not a fee.::Since you're touching this, seems appropriate to have magic numbers like this be `static const`::`CFeeRate` default constructor gives it a 0, so this is not needed in the declaration ```suggestion CFeeRate m_long_term_feerate; CFeeRate m_discard_feerate; ```::Renamed to `m_effective_feerate`.::Changed to use the function we have to fetch the maximum confirmation target.::done::missed one üëÄ ```suggestion /* change_spend_size= */ 0, /* effective_feerate= */ CFeeRate(0), ```::Oops. Fixed.::Should perhaps all of these now start with `m_`?::üëç Good for followup?::They should, but that's an unrelated change. The newly added members use `m_`.::",1a6a0b0dfb90f9ebd4b86d7934c6aa5594974f5f::e2f429e6bbf7098f278c0247b954ecd3ba53cf37::448d04b931f86941903e855f831249ff5ec77485::bdd0c2934b7f389ffcfae3b602ee3ecee8581acd::f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3::
https://api.github.com/repos/bitcoin/bitcoin,20850,2101-21rc5::0.21,0,merged,Backport::,,3308718a6b41f09e9dd3c7caa9986cd6cb8f2eeb::
https://api.github.com/repos/bitcoin/bitcoin,20739,2012-19rc2::0.19,0,closed,Backport::,,bd943d195903edcb8a4464eeed22871326e42be8::
https://api.github.com/repos/bitcoin/bitcoin,20738,2012-20rc2::0.20,0,merged,Backport::,,bcb655d7d19de9997c5acb4b25a7bf59f4882851::d0c75abb288afdd295c4aa9d7e747f13d5926327::19bcf178485c7d2c353581e514582bd569c66c00::
https://api.github.com/repos/bitcoin/bitcoin,20669,2012-rc4::0.21,0,merged,Backport::,The remaining backports to get rc4 out. Currently only waiting on the macOS build fix.,8273ea3b8db1449b65cf369e541a1253c4490f45::e7b53d47218301790bfec44d50219561502922ad::249d61a382014c15025fe63025ac5f46d4721262::85dabd12494a0d82a8f5883cee1c1ff29fb81b27::e4440eb67b339fdacb2c1476f8f909a009c6a47f::84e8d5467fcec3b7c8ce950cd7a3e7e7b24452a3::0c1fa78af1c413c848359df76f4d55f819b9fad5::2c8482d0a279d07a814eaaae231c90d3d2058e55::e70ccb0bc4b695cd331aeda6d7aa405fa6d8f2e7::35a10e4ebc9da916c470d2a9e5b68c3cfc3efd02::ef7a155cf06bf54fff4ff9fda9b28207fcc9adfb::1fda7db64f0f30c23724f6db14f8a49d3975c716::b1c0f97483f01f8836e5d83e98c881e44018cde5::
https://api.github.com/repos/bitcoin/bitcoin,20612,2012-finalRc3Backports::0.21,0,merged,Backport::,,9e806887a8f9ef63431b28d7dfd0470aa663dd02::bead93547067e4b62b44fba335f1d4697119c2d7::06c84232b310e6196c814894537ad935d773fe98::0d3c140c4db051fb33c2935ad9536f0f4aa2a8c5::1caa32e3f2a74cd5700a4afe8ecf650f9020fb5c::ce13b99020df8d46a9b594add3c49e38d4601b42::61e316e66168be593fcc90b90217062fa9d993dc::96124a204193ed114ca9594df7d5151206990e91::48f8929aade118469cb0014e78a15b4e71fdd17d::f51e1cb2917bbd7b0966a7ad688e04fc3ce02ccf::48134a09adef3b5302cdd6e95500db404c9ac961::
https://api.github.com/repos/bitcoin/bitcoin,20510,backport-fee_rate-follow-ups::0.21,0,merged,Backport::,Github-Pull: #20426 Rebased-From: 1b3d7009280595108eb22ac1188bc4367804fc5d Github-Pull: #20426 Rebased-From: 3f1e10b2b1cd11f7112fbad6355464bd4adbbc5c Github-Pull: #20426 Rebased-From: 9f08780dd7946b63476e9736745131db8e7f4e93,54e1edcc2bca76f783170768e65bf0850b036b81::6e4969f76f58518d47ce2f2cdfc4e3ef1f2228bd::6313362553d91bddb75a43f62dffbec16065e4d6::
https://api.github.com/repos/bitcoin/bitcoin,20505,21_backport::0.21,0,merged,Backport::Build system::,Backports #20469 to the 0.21 branch.,01b647b1a20bbf1de2f5f4624c34b554ad3790f2::
https://api.github.com/repos/bitcoin/bitcoin,20490,2011-backportWalletUpgrade::0.21,0,merged,Backport::,Github-Pull: #20403 Rebased-From: c46c18b788cb0862aafbb116fd37936cbed6a431 Github-Pull: #20403 Rebased-From: 2498b04ce88696a3216fc38b7d393906b733e8b1 Github-Pull: #20403 Rebased-From: 99d56e357159c7154f69f28cb5587c5ca20d6594 Github-Pull: #20403 Rebased-From: ca8cd893bb56bf5d455154b0498b1f58f77d20ed,c46c18b788cb0862aafbb116fd37936cbed6a431::2498b04ce88696a3216fc38b7d393906b733e8b1::99d56e357159c7154f69f28cb5587c5ca20d6594::ca8cd893bb56bf5d455154b0498b1f58f77d20ed::
https://api.github.com/repos/bitcoin/bitcoin,20486,2011-testFixMempool::0.21,0,merged,Backport::,Github-Pull: #20456 Rebased-From: fa05d19bd6ba619bb3f9aabc05c439cd18d34544,fa05d19bd6ba619bb3f9aabc05c439cd18d34544::
https://api.github.com/repos/bitcoin/bitcoin,20485,2011-rpcWalletNoneType::0.21,0,merged,Backport::,Github-Pull: #20410 Rebased-From: fac4e136fa3d0fab7fde900a6be921313e16e7a6 Github-Pull: #20410 Rebased-From: fa69c2c78455fd0dc436018fece9ff7fc83a180d,fac4e136fa3d0fab7fde900a6be921313e16e7a6::fa69c2c78455fd0dc436018fece9ff7fc83a180d::
https://api.github.com/repos/bitcoin/bitcoin,20479,2020_11_qpainter_0_21::0.21,0,merged,Backport::GUI::,"Aplies a patch to Qt that fixes the non-determinism by modifying Qt. The source of the non-determinism is how LLVM 8 optimizes qt_intersect_spans when compiling. The particular optimization that seems to be causing the problems is that a temp variable is being added for spans->y. For some reason, when it does this, it chooses different instructions to use when making that variable. We bypass this problem by patching qt_intersect_spans to always make and use this local variable. Github-Pull: #20447 Rebased-From: 8f7d1b39efbe65ab2747c593cc3560d4a449a333 Tree-SHA512: 558da5c2bb0373e2a89f2c219170f802036e0e87cc8e808336b23d074152cb893007a440f46ec957156b0921355cd18502710f2d224f27bc26e934c50ebebc41",ab23a83400d5ad13137ce0f9697a51f0b70e9d29::
https://api.github.com/repos/bitcoin/bitcoin,20475,unloadwallet_namematch_pt1::0.21,0,merged,Backport::,Github-Pull: #20462 Rebased-From: b1f59d55d920d2b35269b474762f94fec87bfb16,b1f59d55d920d2b35269b474762f94fec87bfb16::
https://api.github.com/repos/bitcoin/bitcoin,20431,202011-test-taproot-signmany::0.21,0,merged,Backport::,Github-Pull: #20428 Rebased-From: 7ffac12545328cadd92a3caec4f1c6ca7c127493,7ffac12545328cadd92a3caec4f1c6ca7c127493::
https://api.github.com/repos/bitcoin/bitcoin,20080,201004-strip::master,0,merged,Needs backport (0.18)::Needs backport (0.19)::Utils/log/libs::,"Wallet names in `listwalletdir` RPC are correct now, even if the `-datadir` path has any number of trailing `/`. This PR is an alternative to #19933. Fixes #19928.This isn't in boost 1.47.0, which is our minimum required in older versions. Thus, it is ineligible for use in a bugfix.::Hmm, ``` $ git checkout v0.19.1 $ git grep -e 'fs::canonical' | wc -l 5 ```::lol, looks like #14146 was the culprit, released in v0.18.0. Might as well just call it a bug in the dependency docs at this point I guess. utACK::According to doc/dependencies.md, our minimum supported Boost version is 1.58 ?::@sipa that just changed in master (only).::This PR is also fixing a bug that's only in master AFAIK?::FWIW fs::canonical was introduced in Boost 1.48.::> This PR is also fixing a bug that's only in master AFAIK? Just tested `0.19.1`. It has that bug too.::Ah, my mistake.::nit, could add another case lile `+ ""/./""` to it's clear the result is canonical, not just without last `/`.::Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/20080#issuecomment-704794437).::nit: Can be written shorter ```suggestion result = result.parent_path(); ```::Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/20080#issuecomment-717499942).::",b19e88230f0e93e95e883e65376963cb9c36f606::ad5cef5dfdd5802fc187a52e74d940a52f420a51::
https://api.github.com/repos/bitcoin/bitcoin,19836,2008-rpcDeserTxsWitness::master,0,merged,Needs backport (0.18)::RPC/REST/ZMQ::,"Signing a transaction can only happen when the transaction has inputs. A transaction with inputs can always be deserialized as witness-transaction. If `try_no_witness` decoding is attempted, this will lead to rare intermittent failures. Fixes #18803",cccc7525697e7b8d99b545e34f0f504c78ffdb94::33330778230961cfbf2a24de36b5877e395cc596::
https://api.github.com/repos/bitcoin/bitcoin,18973,0_20_0rc2_final_backports::0.20,0,merged,Backport::,Backports the following PRs to the 0.20 branch: * https://github.com/bitcoin/bitcoin/pull/18578: gui: Fix leak in CoinControlDialog::updateView * https://github.com/bitcoin/bitcoin/pull/18808: [net processing] Drop unknown types in getdata * https://github.com/bitcoin/bitcoin/pull/18814: rpc: Relock wallet only if most recent callback * https://github.com/bitcoin/bitcoin/pull/18878: test: Add test for conflicted wallet tx notifications * https://github.com/bitcoin/bitcoin/pull/18894: gui: Fix manual coin control with multiple wallets loaded * https://github.com/bitcoin/bitcoin/pull/18742: miner: Avoid stack-use-after-return in validationinterface * https://github.com/bitcoin/bitcoin/pull/18962: net processing: Only send a getheaders for one block in an INV * https://github.com/bitcoin/bitcoin/pull/18975: test: Remove const to work around compiler error on xenial,315ae14f3f5c98ae4c4476e4bb260b9086c773a4::fb821731eb12906996bffdf4b3633d7fe47c85a7::1e73d7248a10863dc99a93f1db36d035c17f29d7::011532e380bb1a42eac9e79a17b35531f768becf::a3fe458a1e477cacd19e7e0edb8e7bb965067115::ca4dac48c5675af3fc53db6740a0b70fef622b0a::251e321ad7d9ddb938e8a07ddfbe90739f0bafdd::ed0afe8c1ff37926cc5bdcb0e8e4983e194e6d61::ff4dc2075031e9a49220cc27a270aeabe8954989::37a620748bd3578eda1c74daad8df8451d13b989::cc7d34465bbb0195d8bcd9143097840a2e9765f2::cf2a6e2a390ad18a616d7f2718688375f2576577::6161c94a6108ebddafe4e95c14bde4cdc3f8c01c::9a8fb4cf4ba472a5c3e1b9b71d31673f881a4896::245c862cfd4883ea91b53d766abb00a9c3c1ea5c::
https://api.github.com/repos/bitcoin/bitcoin,18218,futher-0-19-backports::0.19,0,merged,Backport::,"These are not blockers for the 0.19.1 release, as per [IRC discussion this morning](http://www.erisian.com.au/bitcoin-core-dev/log-2020-02-27.html#l-331), doesn't look like there will be an rc3. This PR can collect further backports for the 0.19 branch. Currently backports: * https://github.com/bitcoin/bitcoin/pull/18004 - build: don't embed a build-id when building libdmg-hfsplus * https://github.com/bitcoin/bitcoin/pull/18123 - gui: Fix race in WalletModel::pollBalanceChanged",1964561a3a5eacbb27139e9125859854c0e77437::48fef5ebae58b0730619182007218941bd339768::
https://api.github.com/repos/bitcoin/bitcoin,17988,0-19-1-final-backports::0.19,0,merged,Backport::,"We're about ready to do a [0.19.1 release](https://github.com/bitcoin/bitcoin/milestone/44); so I've opened this to collect the last remaining backports. If there's something that's been missed / or isn't tagged [""Needs backport (0.19)""](https://github.com/bitcoin/bitcoin/issues?q=is%3Aopen+label%3A%22Needs+backport+%280.19%29%22) that you think should be, please comment. Currently backports: * #17887 - bug-fix macos: give free bytes to F_PREALLOCATE * #17980 - test: add missing #include to fix compiler errors",c8ad23c52932cf33fac6e527ff18b5241ccceb04::daf2fff236f8ebb75c785b33d2dd6dcd3cf86112::
https://api.github.com/repos/bitcoin/bitcoin,17159,cdk/doc-backports::master,0,merged,Docs::,"See laanwj's comment in #17158 https://github.com/bitcoin/bitcoin/pull/17158#issuecomment-542627090 ```suggestion (e.g., a security issue) or on request. ```::```suggestion just request a ""Needs backport"" label for the original PR. ```::Could mention that the PR must be for a specific branch, not master. Also, a PR may be needed for each version where the backport makes sense. nit, drop ""wait for comments""?::`Each commit message of a backport ...`::commit hash of the respective merged commit?::Thank you. A nice one. I actually learned something. https://www.dailywritingtips.com/comma-after-i-e-and-e-g/::Done in 7c5ce792ef498598bd57780d42938139dbcd58e7 and will be squashed in the end.::Why a specific branch, not master? I understand that my development is done on a specific branch in my forked repo, but I ask for the Pull Request to master. ""wait for comments"" dropped in 1d9ffdd2432f9a89f77204505b221616cf74b704 and will be squashed in the end::Backports are done when something is already in master (that is the practice of Linux development, where git itself comes from; in contrary to what Android or other BSP developers tend to do - they add specific hardware patches to a stable branch, making master run away quickly and then they are unable to catch up so after the device is not sold anymore, one can hardly find a current kernel and Android build for it...)::Thanks. Fixed in 163fe28c54105fdde687cc49c51e635d6e483ccb and will be squashed later into the final commit.::> Why a specific branch, not master? I understand that my development is done on a specific branch in my forked repo, but I ask for the Pull Request to master. Commits are backported *from* the master branch *to* a specific branch, e.g., `0.18` or `0.19`; not *to* the master branch.::Fixed in 842aa85aa ...::@promag @hebasto OK, sorry. I totally misunderstood the comment.::@promag What do you think about 2aa9503ea ?::This should only ever be a PR number. ```suggestion Github-Pull: #<PR number> ```::```suggestion Rebased-From: <commit hash of the original commit> ```::```suggestion Also see the [backport.py script]( ```::Done. 57379c8a5::Aah, I just realized this ""Commit suggestion"" button :-) Will try it next time.::This is intended to be a new policy?::... unless a straightforward merge of the original branch is possible.::As far as I understood, we are just describing the commonly used, but yet uncodified process. Or is it something new @laanwj ?::Why would a straightforward merge of something which has different checksum in `master` branch not contain a pointer to the parent (original commit in `master`)? Please provide some `git` command line examples on how to find the equivalent commit in master, given a release commit. If possible and if I understand correctly. Thank you.::> This is intended to be a new policy? It's not a new policy, just what happens [in reality (when looking at bulk backports)](https://github.com/bitcoin/bitcoin/pulls?q=is%3Apr+label%3ABackport+is%3Aclosed). However if this is controversial just drop the sentence. ::Sometimes it's possible to base a new commit on a commit *before* the branch split (e.g. between `0.19` and `master`). If nothing conflicts in between, it can be a clean merge to both branches (unclean merges are rejected by the CI checks). This is quite rare, though, and I'm not sure mentioning it here is important. If you're enough of a git guru to do this, you don't need it mentioned here.::@laanwj I see. @luke-jr Was this ^^ what you meant? I still think that one commit has to be the first one (in linear time) and merged into `master`. Then any other cherry-pick, no matter if there were conflicts, should IMHO contain a reference to the original unless it is easy in git to find out the original (first) patch on which this ""backport"" is based...::Maybe mention that the `Needs backport (...)` labels are a tracking tool for maintainers and not meant as a TODO for the author of the PR. This has confused a few people.::Yes, no matter how they're represented in git, changes should still be merged first into master. This is to make absolutely sure that the future major release contains everything.::@laanwj see 4d47775c1::```diff diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md index d38e44c47..f36f29dcf 100644 --- a/CONTRIBUTING.md +++ b/CONTRIBUTING.md @@ -317,7 +317,9 @@ branches. If the backport is non-trivial, it may be appropriate to open an additional PR, to backport the change, only after the original PR has been merged. -Otherwise, backports will be done in batches by maintainers. +Otherwise, backports will be done in batches by maintainers and +the maintainers will use the proper `Needs backport (...)` labels +when needed (the original author does not need to worry). A backport should contain the following metadata in the commit body: ```::Right. My point was just if there is a better way to find ""parent"" (i.e. original upstream patch) but I found there is not because even in Linux kernel development (and I suppose they know how to use git given it was born there) they always write a comment in a backported patch: ``` commit <hash> upstream. ``` See [this backported patch](https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=9f8dd40c68c1) which is backport of [this original patch in master](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=3dd550a2d365) and the only difference between those two is the added comment: ```diff --- patchorig   2019-10-30 14:00:51.058777980 +0100 +++ backport    2019-10-30 14:00:30.865990235 +0100 @@ -1,9 +1,11 @@ -commit 3dd550a2d365 +commit 9f8dd40c68c1 Author: Alan Stern <stern@rowland.harvard.edu> Date:   Wed Sep 4 11:56:27 2019 -0400 USB: usbcore: Fix slab-out-of-bounds bug during device reset +    commit 3dd550a2d36596a1b0ee7955da3b611c031d3873 upstream. + The syzbot fuzzer provoked a slab-out-of-bounds error in the USB core: BUG: KASAN: slab-out-of-bounds in memcmp+0xa6/0xb0 lib/string.c:904 ``` So maybe I totally misunderstood @luke-jr and was solving some non-issue here, but I learned a lot. Thanks!::Yes, bugfixes are best when based immediately on top of the commit introducing the bug, in which case it is a clean merge to all affected branches. Sometimes that's not possible and a cherry-pick is needed instead, but when it is possible, it should be preferred. (Linux doesn't set a good example in this regard.)::Maybe just remove ""maintainers"" here?::https://github.com/carnhofdaki/bitcoin/commit/9e35eaeddbb46405e30c05de27ebdb7aa4e87fd1 ::",2a6bce482c13cff37c1af00231265de4656a454b::
https://api.github.com/repos/bitcoin/bitcoin,16351,backport_github_merge_improvements::0.18,0,closed,Backport::,"Recent improvements to the `github-merge.py` script in master, such as including review comments and displaying `ACK`s at sign-off time would be nice to have in the 0.18 branch. It also keeps the merge process the same for both branches.",93394898a469f87bf76de6459429f54aeebd4e60::5ff91d2bfd2fe61d1bca22d9bc1ef5e8f5e51ea3::d1a09cfdb2b0109b823899dcb4fec7f098f95eda::ed218a21a1bb7a083addac4eabe21da77052dd35::b58763ba0155ae1a73e3d4176fd59c48a4ac1a51::
https://api.github.com/repos/bitcoin/bitcoin,16342,201906-signrawerror-regression-018::0.18,0,merged,Backport::RPC/REST/ZMQ::,Backport of #16250 which fixes regression introduced in 0.18 in relation to signrawtransactionwithkey error handling (see #16249).,1dc357dabbd843da02d15316c55d63c566414069::
https://api.github.com/repos/bitcoin/bitcoin,16163,backport_stack_reuse_none_017::0.17,0,merged,Backport::,Backports: * [build with -fstack-reuse=none](https://github.com/bitcoin/bitcoin/pull/15983) * [Add test for GCC bug 90348](https://github.com/bitcoin/bitcoin/pull/15985) https://github.com/bitcoin/bitcoin/commit/b5a4abeca238a0fa37b34e35ca610dcfe7112c82 has been modified to replace the `setup_common.h` with `test_bitcoin.h` include.,05fb9f7fbb270638f8ff4990fe68037e1a52a85f::b5a4abeca238a0fa37b34e35ca610dcfe7112c82::
https://api.github.com/repos/bitcoin/bitcoin,15818,0.18-doc-backports::0.18,0,merged,Backport::Docs::,"Backports #15684, #15792, #15802,  #15809 to the `0.18` branch.",8f7cfb00964a9edfa6fc46c506dad4b9c24661bf::c69138a0d6b4878dfb01030861753738179ef0a4::9c572e3b2160f3a2b78847bbdc839b7be35dffd7::6d2448ca8e8bbf326730e79a7e1d959b4e81a76e::194226f6798e59cfd871db0335e078101b165043::a644780a2f7076d4705d4e0d3486c0df8424367d::
https://api.github.com/repos/bitcoin/bitcoin,15790,0.18::0.18,0,merged,Backport::RPC/REST/ZMQ::,Backports #15754 to the 0.18 branch #15754 added the help message for `getrpcinfo`,60d46219754692355aef719681a7d80ec38035bc::
https://api.github.com/repos/bitcoin/bitcoin,15691,1904-18B::0.18,0,merged,Backport::,Remaining backports for rc3,6355214fd70ce7b44739acb8d546aaaf243f90b3::bb60121da1eb3484ecf20c5d1130d9e2f6f8f8c8::50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0::a90db2f175f86b78d8edc5c03b7bb351c8f43e5e::ebf65666c26b7e2dff1b35b17d8fc466c3f347a6::ed0498af2827ccf033c9a7c4f46b82424e411083::59716ec395daaf914924fe5c1a4fbeb5d5031907::95faffed264cf54a3b3041db2471c10f5011aabe::
https://api.github.com/repos/bitcoin/bitcoin,15563,backport-15486-addrman-collisions::0.18,0,closed,Backport::P2P::,Backports #15486 to the 0.18 branch.,ceb5ab34b8aab1c506c301f1ccaa2268247680eb::78725b489394a8e05de43d166b6465c39fbe21dc::61248cd6dac539c9b65d75fa66cc74a56e9d1cc0::d6602c2018c35856c902c1add4bed9886ccec0d0::
https://api.github.com/repos/bitcoin/bitcoin,15445,20190219-backport-pr14409::0.17,0,closed,Backport::,Backports #14409 to the 0.17 branch. #14409 makes the blocks directory net-specific by definition.,75bee859004c26bf5648701721a68d65ba4c6586::8cdd72e7e8a86319b90ceada38d4ea9689a65ac4::
https://api.github.com/repos/bitcoin/bitcoin,14900,backport-14679::0.17,0,merged,Backport::Wallet::,,ae1b6756c96f78985e88fa5b0c68ccad90f5e259::
https://api.github.com/repos/bitcoin/bitcoin,14878,Mf1812-17Backports::0.17,0,merged,Backport::,"Ooff, we missed some backports that were tagged. Checked: * In 7a590d8 (clean cherry-pick): The test changes fail without the code changes",7a590d8390ef2158509c4fc08b84dac71f59e1fb::
https://api.github.com/repos/bitcoin/bitcoin,14852,Mf1811-walletBalanceTestBackport::0.17,0,merged,Tests::Wallet::,,67225e2fd7f1e62586aa7bb7bd2ce265e249f295::
https://api.github.com/repos/bitcoin/bitcoin,14851,change_crash_backport::0.17,0,merged,Backport::,backport of #14380,53dcf2b407f8a2b4ebe372a8f28b7ba073b9eda7::2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6::
https://api.github.com/repos/bitcoin/bitcoin,14780,201811_psbt_backports_0.17::0.17,0,merged,Backport::,"This is a backport of #14588, #14377, and #14197's test to 0.17.",a3fe125490978a684528c40fc9a15ccdfdf2c92a::cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3::a9eab081d5a31cec3138685fef21e428f833db03::70ee1f8709a54a9aeac004d8589faa08f665587a::39ece4fc2807b3442759d879985146ac0de9742d::ad94165db91c0416634459e18f173c5cd063dc55::db445d4e5a25ff13de014dbbf43bb99cde8b8769::ff56bb9b44387f7e20ae7de59087cf19ea216726::7bee41452bee4d10ab075999580853bdc3431e8b::
https://api.github.com/repos/bitcoin/bitcoin,14566,Mf1810-qaBackports::0.17,0,merged,Backport::,Just the test and doc changes from #14328 to prevent that one from piling up.,06544faff0164051d2654d6aabb86f555fd2e86b::b72fbabe17a8639ffab2ef02ff84d0ee66c30fae::7ff32a6b985054558851fc451879309a56753bdd::96dc93686237facede4b53e4962295ffd709c85e::73e538cf6a9df9a5ef57363e53fbeb01d1ade510::168efeaca6bbb9158f7731f5d72ae75b2320ca2c::24d796a6cc96ac351377355000bdb248b718bc7b::8bc1badadae684e218600fe1e9a05f726120aacb::86fadee9904198ca706d706a8545ee908e830dfa::f7adb32e383bbbdb473eb470e4a6872b582cac80::29899ecd366748c541be15a330f64ce68c948432::5f51fd6d5966a052addd7e91f74ec66cd5777b37::703a24418ccecd9e78d629808a1f8d6a8b410c77::9461f98c534ab64ae404085ffb309ec276e3c902::
https://api.github.com/repos/bitcoin/bitcoin,13644,Mf1804-16Backports::0.16,0,merged,Backport::,Some gui/doc/rpc/qa backports,c04a4a5ae97915fce1c35dff715e373b1290a169::79c4fff9edec13ca4685abde953a320840544869::cbdabef35e25d84206006b5dddbf6f8376157d5e::cf6feb783764bd37647548c4013a1dde605dcc54::2291774bd5a4cd7692db27de09728c98298db599::bf1f1501903a2a0df4ac5fd4b2bfe086ffe88773::cfc6f7413bfa486aed9811fcef177cd80568f2db::170b3099814c96c9af39fb2405502b0a85a33b5d::10621995edaa8237b5846f81a1d731648af4d017::e15e3a9ddd17e1d46b3548cd475bcd6b1795c378::ed82e7176d6f7c3e5f53363102dd1e7d558b1f92::6b9dc8ceaed597d9c539ba6b09c171b258b66ca3::b72c0bd4c9cf36163fdef6ce0c60970d112d1100::88d1a649a2e9cfa471fc00f8c853e53383eb4695::657dfc5bca2bd476d124f51f711e889f98f1e7d6::f78e7f6589eca50650ecd2010c41333b12f964b0::21dd5127a423f38712dcdcef4002e714e8276bd2::d9c563095d71055ff054d3a27e11a12d3d1ec92f::
https://api.github.com/repos/bitcoin/bitcoin,13574,0.15-backport-qt-archive::0.15,0,merged,Build system::,GitHub-Pull: #13544 Rebased-From: 2fca656,809df9e462760156b1d2c8d5f6c0358f51a87898::
https://api.github.com/repos/bitcoin/bitcoin,13317,Mf1805-016ForBackport::0.16,0,merged,Backport::,,c71e535aec5aaef04764238a94e456f2405adbb5::0948153ea62ff4921daef326da0fddb8425cd866::bb79aaf93af93d5f9f5097cff4fbb2791af86875::d6c3a08c482225b3742c9145a9cbfe60567f0c4f::d353dd121be0bf2a525e4bbea2b4ada2954d2b15::1fffc2b346b2d2e129db5c9f5cad00e820c85c45::0a000b9b73a7d7bb4086aeefc86841d0fc33e652::08334b73be031485a41e2c0647c2df1aa13c6316::
https://api.github.com/repos/bitcoin/bitcoin,13093,0-15-depends-qt-backport::0.15,0,merged,Backport::,Backports #11995 and #12946 so that qt (and all depends) can still be built on the 0.15 branch.,9bb1a1652318a1c5bb6ba8c9b3f10f75d9f252c7::93b9a61f12871889533d2eaa3d0cd9382b5ca44e::
https://api.github.com/repos/bitcoin/bitcoin,12637,backport-fix-version-typo::0.16,0,merged,Backport::Docs::,GitHub-Pull: #12556 Rebased-From: d16bfaa,e730b82b074a9994e8873cf83175b83820f012c1::
https://api.github.com/repos/bitcoin/bitcoin,12636,qt-fix-backport::0.16,0,merged,Backport::Build system::,GitHub-Pull: #11995 Rebased-From: 2b1f794,686cb86002075acfe4ec4228425d3db52b5e23f6::f3b8d85b4ba8945eb811851d83bbaef6a7583879::
https://api.github.com/repos/bitcoin/bitcoin,12032,boost-fix-multi-index::0.15,0,merged,Backport::,Backports @sdaftuar's fix (#11847) for compatibility with boost 1.66 to the 0.15.x branch. Fixes #12009,ad8393634a7b86a1da40f4d2533b16b69c0dd26c::
https://api.github.com/repos/bitcoin/bitcoin,10127,2017-03-backport-cnb-optimizations::0.14,0,merged,Backport::Mining::,Backport of #9959 to the 0.14 branch (conflicts were trivial),b5c3440b053217afda5f03ee97b3835f02fd5290::10028fb5551a210c71e63b065c53cb2a3dddba00::a296c6009ffc64e0409aad791449f9f7fc7ba794::
https://api.github.com/repos/bitcoin/bitcoin,10101,Mf1703-014backp::0.14,0,merged,Backport::,,4d8e66017f6d6498df53935bc9a754d4317a2293::ddc2dd16121b10da129d363530a365361435a849::e9611d10b67dd99bae83b32dedc9767b4c2e44d2::fc3d7db5800f1d821ac233909f38bd342e3fe503::142fbb2fec76adee001ffdabfe25ebc462560696::fa7555b16a4e279f8f04c06f76a315e4c194ad79::
https://api.github.com/repos/bitcoin/bitcoin,10013,2017-03-exit-with-addnode-13::0.14,0,merged,Backport::P2P::,See #9953.,d2548a4f9704b1f475b4068d2d1686cf3780f742::4e2502bb512c00fa76c59ed8c758c2a6781a7425::
https://api.github.com/repos/bitcoin/bitcoin,10006,backport-9955::0.14,0,merged,Backport::Mining::,"Backport of #9955 to the 0.14 branch (all conflicts were in `segwit.py`).extra parens so it's clear that & happens before !=::Note: This is a backport, so it is too late to fix style issues.::Feel free to fix style issues in a new PR against master, though.::",569596cc5148ef868350a9720013d38faf3e34ce::2cd2cd51f7ae954160d5422e105089ff1f598aa6::
https://api.github.com/repos/bitcoin/bitcoin,9382,backport9262::0.13,0,merged,Backport::,Refs #9262 Note this does not include the `src/bench/coin_selection.cpp` because that is a new feature in `master`.,bdd6d4c97df2052fe160f12ac507ec5946f91a07::f00066ac513774ba7fcad9e2054b209ffb2c23e8::4bf2bec18e5f3c613a0bf5c5fa78f6ec14dcc4f5::e1ff0dbe19c3e7df21206d22bb12c686cd130b4c::
https://api.github.com/repos/bitcoin/bitcoin,9357,backport-optimistic-cb::0.13,0,merged,Backport::,"Backport of #9352 to the 0.13 branch. Because in 0.13 we call MarkBlockAsReceived inside ProcessNewBlock(), this code is slightly different from the version in #9352 -- I put a comment that should explain everything.",4ced31325699dc308571010ce004376d2915cd7e::53b656f3558fe960d9328079ca18eb53418f2652::
https://api.github.com/repos/bitcoin/bitcoin,9347,Mf1612-013back::0.13,0,merged,Backport::RPC/REST/ZMQ::Wallet::,"Remaining wallet backports for 0.13.2 release Edit: Sorry for force pushing a few times. There were two conflicts, so would be nice if someone could look over the cherry-picks.Not sure if I solved this merge conflict correctly. `fLimitFree` should probably be `true` to backport the behavior how it is in master, otoh the other places in wallet.cpp don't apply the limit, so it should not be applied here for consistency either?::My view point is this doesn't matter.  I think its fine the way you did it, and more consistent with the rest of 0.13 code.  But I also think it would be no big deal if it was rate limited.  It happens every 20 mins anyway..  ::I believe this should be false like in the other cases of the wallet behavior. The ""free limiter"" this this flag controls there is really a p2p network feature, and shouldn't really apply to wallet transactions... and in 0.13.2 we won't have removed the relaying of non-fee transactions yet.::",0cc07f82f0d4043e93d8cea49356cd2bc5ffcb27::43bcfca48970b65d4eb215f20047bb99495f3727::a0f7ececfd096df398fc5e4aad07f1a43760afb4::35174a0280845e9583a3af1fcf57ee1f98238539::f5d606e5ab0b20881cc0d58d63e6db065c59b411::c365556185d89122a04344d2dc640cffc67f155c::49a612f347be150b03eb6ef8fa438d2b06e26993::
https://api.github.com/repos/bitcoin/bitcoin,9264,2016_12_backports_0_13::0.13,0,merged,Backport::,"This backports all the current merged ""backport needed"" pulls with milestone ""0.13.2"". Conflicts: - #9199 src/main.cpp, function MaybeSetPeerAsAnnouncingHeaderAndIDs: code was formulated differently - conflicts with #8085 53347f0cb99e514815e44a56439a4a10012238f8 `net: create generic functor accessors and move vNodes to CConnman` - #9189 src/main.cpp, function GenerateCoinbaseCommitment: trivial change/remove conflict - conflicts with #9125 1662b437b33b7ec5a1723f6ae6187d3bdd06f593 `Make CBlock::vtx a vector of shared_ptr<CTransaction>` - #9188 src/main.cpp, function ProcessMessage: trivial variable naming - conflicts with #8655 4731cab8fbff51a8178c85d572e2482040278616 `Do not shadow variables` @gmaxwell @sipa can you take a look at the backports of the above pulls and see if the conflicts were resolved in the right way.",d1b4da9259ded1776479ac97b30d8eaa6747ee71::094848baf01ae7f2ab8dbac4a625a8c956f2a760::da5a16b11dca8f61d75f92bb08f1dd19a7800158::99477c71c4cdb5127e0fd6e12f29507320432d9f::b96a8f7df23956cc4c41c414a01964c9cad54699::ca1fd7521e86b016f2aa92048a13a297bab3c074::3a3bcbf775840be34b27523bba9e5ab6321b4ffb::975ab1254eec5a191f22ba1d63863c00c88bdfcf::4a974b2837150097e20076e10edb24b65fb8e7f8::c134d9206d2629b479f4e0071ecafd9ec517ec04::40169dcda9f8e26090807a53b03d10ca22c6395c::12428b4d8a3dff3c32c909964536ed69f043f9d3::106da691a5b935289dfecb25ee4fe2f085cee77f::6f86b5364345b238a812c9dffca13fe9f11a0073::973ca1e4912e7ad85e0d06e9490c5939232de6a4::5bcb05d4e1304ac3582f1779a25693c0065c69e9::f85ee01303b3d5127a31285b2682fcae2f8df64d::f27596a7ec3c625c3b0f25d66fc1bc804c250e7f::08d1c90113efb51d4fb2fcea36171181a66aea36::5f3a12c97c25f811083679cd3f284059cf7ea54f::6fe3981ac8267f9f045b0d518399d943d3147268::f82c81b177dfb540c086ccccc39c030b8d9ca81f::3fffbf7ef0a224d10119551ed39cd3215001a46f::6d70a73968695ee34e15e31a79d889db6f53b734::ff423cc6b0323854b93810fa7a9a479a746f6d5d::dc46b10a087921343bb5a05d08393ece061d6303::c12f4e93b9be01ba2d6e96f0a851562549049686::e4bea4fb84dceab44f8a8de4f8b974ba8bb98529::e5ad693f91632219407b15137b8863223919849b::6f7841c4d490de01c2e458d45ba5cd1ac8ee97d5::0c09d9f00e39c4b1aee0fcb091fba068845b8edd::eebc699d3070c71365a0f3542e2f5f6eca3fd281::396c405e7b4911eea3eceecd001840ffa8c38e95::28d0f224fda3ec375c07aaa18f786ce18f674f29::ff55a2d22e3d93a9bfe7999277a7bffcf7f60f9d::b1e978cfd6de4e61659e019c52d9c4953b9791c1::87fbcede5ceb49fc24c3102c0f3cf81a68617ac6::387ec9d9635580fbbedc222126c5b1a68002d543::ecd7db57672d4f2dbc85ac03e571b795b0259298::58eab244fb9514b74e157b5dde9060cc8f3b77a8::a710a4304033eea581e463a5fb0502bdb8991aa1::21ccb9f2530af996fc0a58df418837a08b75781f::f26dab7e90cfb1733736c1dd63c507254de84a34::
https://api.github.com/repos/bitcoin/bitcoin,9259,cb-lock-13::0.13,0,closed,,"Backport of #9252 Not sure whether we need the second commit for this backport, which releases cs_main before doing headers processing?",1db2d8110214319113d782b7e977ad21127512e3::860cbff83d39a4030b179d29bedaadd3f1593730::
https://api.github.com/repos/bitcoin/bitcoin,9048,fix-invalid-cb-ban-0.13::0.13,0,merged,Backport::,"Backport of #9026 to 0.13.Wut? ::Oops, fixed. ::",82905069bfd763f16a63649eb51ed3a566bca2c5::015865ee9e5dd450ceb6cece489f924aaa1137e3::e8ef50ba51968da67a36c9fae6938d868b434da2::
https://api.github.com/repos/bitcoin/bitcoin,9011,2016_10_backports_conditional_rc3::0.13,0,merged,Backport::,backports for 0.13.2,9ef38758a69abfb6166099bf8dea1d69e258ae00::ce0d817b9b59baa243c3ac0844a654704872aa2f::1d048b917b83489f9e56d8fab522475544b98793::6d05fe115b07588f41631663ace2f3f14c3ed3d7::fa58e55cef9a901b433544338dccd562dbe461ee::2cfcca7ca6f4036845f8e845cb4b55bd4e07ed64::b16cdb71ff20ebf23372d116e9bb4bbe84d30fce::
https://api.github.com/repos/bitcoin/bitcoin,8916,2016_10_backports::0.13,0,merged,Backport::,"Remaining backports for 0.13.1. Trivial cherry-picks, except minor conflict in #8393: ``` error: could not apply 6aa28ab... Use cmpctblock type 2 for segwit-enabled transfer ``` This conflict is due to CConnMan changes. ``` Assertion failed: [6, 7, 8, 9, 10] != [0] ``` on travis ::Looks to be a bug in the test where the block manufactured in the test is of a too-low version, due to soft-fork activations in the regtest chain.  Only seems to manifest itself in the 0.13 branch because we hardcoded the soft-fork activation points in master to be at block heights that are slightly higher than the test, I believe. Quick fix would be to explicitly set the block versions generated in this test to be version 4, I think, haven't tried yet... ::",0027672c8075d063f376c8c84e1cce77d572d353::3e80ab7f2a338d1bb3d9321c13a18f1324130617::7ae624296000e714034d86891ffcd4a565f278fa::7a34a4614c3ac89ef31cb4854620e381d5df72ad::e47299a8f2ebc98644bb8d15a3222faac51875fd::61e282b62d7d4f0bca435c6e1b836d3b2c3a0874::611cc5096e5777502e18ba516d7a0eec93ac9c63::fe1975a9740f30f1a1152276d7f93f3ca9fa611d::890ac2563872f9b71b9863ad531c639e526df5d7::4bb9ce8a958f5a55d6a72330728b7fc3b5c820c0::cc6f55191a75dafa669fc6ee93ed86d860eb0d4a::bcf3806f4cb9dad1424c78f458b5398a927161e8::df5069bb0e56476fe3c0670922d9cdb678c40c29::9bb2a02f0dd8851a6dc413fd86ce0b51878b5007::540413d9958fd253d4bf99858db431164db275e1::821f3e67510b9ea0b5c7b79d162daf5f0f075462::b4b85279a906605bd2d98498f5b65f4991ebffa4::908fced29600514d5fff544e429fa40ebbc58733::4ec21e8a64f53f0fb4cef5ff26b6b3551dba70e6::fef7b468415e77e1876225988a177eed70418eb1::9777fe12722ddab7b1b17df11077d448c7a25006::
https://api.github.com/repos/bitcoin/bitcoin,8679,backports_0.13::0.13,0,merged,Backport::,This includes backports of #8520 #8540 #8282 #7579 #8624 #8604 #8291 #8524 #8612 #8651 #8606 #8594.,75f20652932361a176e72e2ba3477f4604810bb6::1db3352cc663f6a25a39813c763a2f6263f55e6d::2611ad79a5d53e2ce1535b342a9b72c2888a6c3f::f1c0d78b2d9cbd671413af98e7b081a3b71113ad::0e6d7535845f98a080078525c4e3f4f9dce0ec22::b09e13cb6f3ca3b478afc6dea161463247ac5146::32d75a7ffc718eff291978bc8c9406037e327c7e::a9874310c0f67c80a1f04854c5c9ed154e1bbf97::b8c79a057c48c871a5e48bdcdf600fbfe68f656b::2215c22a00116d210dcfd95d3369035a8d2fd6c2::bbf379b0552c357088e349dd6608730489696b80::ab295bb4be26939e4853b9d95a9938c5ed8afa57::
https://api.github.com/repos/bitcoin/bitcoin,8648,precompute_backport::0.13,0,closed,Backport::,applies cleanly This will be changed to ``` c struct PrecomputedTransactionData; ``` in the master soon (@sipa). ::In #8651 ::,403ced9fbd89235e514ae8b1b8335f4f9d69825d::055c1d6df80d67a221389e5014f76606a33f1e0d::991751f6752e776238ab683751f2ec403e4e3b4c::
https://api.github.com/repos/bitcoin/bitcoin,8646,reduceblocks_backport::0.13,0,closed,Backport::,"Applies cleanly. Arguably the increase of dbcache to 300mb created a startup time regression that this fixes. I think this is unambiguously safe, changing a default for a startup sanity check that the user could have been setting themselves.",7456a2a86f5edd6f757662c91eb584ce54f35d4b::
https://api.github.com/repos/bitcoin/bitcoin,8644,findnext_backport::0.13,0,closed,Backport::,Applied cleanly.,f0121f18e75f950cff4f1128cf78bc892fe0fe54::
https://api.github.com/repos/bitcoin/bitcoin,8643,2016/08/feeler_013::0.13,0,closed,Backport::P2P::,"Tests if addresses are online or offline by briefly connecting to them. These short lived connections are referred to as feeler connections. Feeler connections are designed to increase the number of fresh online addresses in tried by selecting and connecting to addresses in new. One feeler connection is attempted on average once every two minutes. This change was suggested as Countermeasure 4 in Eclipse Attacks on Bitcoin‚Äôs Peer-to-Peer Network, Ethan Heilman, Alison Kendler, Aviv Zohar, Sharon Goldberg. ePrint Archive Report 2015/263. March 2015. Backport for 0.13 from #8282",e8a7df8d43f63729daba02fa029a509640b796ba::
https://api.github.com/repos/bitcoin/bitcoin,8438,btc-13-sigops::0.13,0,merged,Backport::,"This submission includes the patch from #8365 to treat high-sigop transactions as larger instead of rejecting them, for 0.13.",3f65ba2b3bd6c4e269f8f89b16d386b443431693::
https://api.github.com/repos/bitcoin/bitcoin,8187,Mf1606-qaPy3Backport::0.12,0,merged,Backport::Tests::,Github-Pull: #7814 This also includes the other .12 backports but I expect travis to fail on this one. @laanwj can you try to look into backporting #7723 and a6666b2 if we want to switch to py3 in .12 as well?,28265655da658bf8351f038f7c51a48d8c80f7c0::
https://api.github.com/repos/bitcoin/bitcoin,8186,Mf1606-rpcBip9Backport::0.12,0,closed,Backport::RPC/REST/ZMQ::,"This breaks the interface but it was tagged with 'Needs backport' and I think it is useful. Other opinions? Nit: usually we call this category ""RPC low-level API changes"" https://github.com/bitcoin/bitcoin/blob/v0.12.0/doc/release-notes.md#rpc-low-level-api-changes ::",feaa4ded1c4bdb7555aadd3c40204d84ad63d81f::fab67c115a06a1c51bb1813a80eeebdaf539f239::
https://api.github.com/repos/bitcoin/bitcoin,8185,Mf1606-qaBackports::0.12,0,merged,Backport::Tests::,@laanwj This includes some commits from you of which one touches the src subfolder. So I leave it to you to merge those.,658307e8353f484f50fc3c5f2b01d903522da3b9::2d2b04543d81084ec307b43fc5c4b237bef5222c::4fd6008105a719796b51195a4ebaebc5763f283c::4ffd309b25596564a0cf51bddfcaebbba2d656e3::80b6bfaeaa42b983a6b6503f28a280bad6e9a73b::afbc000b0bcf98050d45781bc07a71f3afc7e764::3036282c7a69c20c4918ba29e221128e7afec8ff::ed2f0e3ac112ad8beb36dbcecbdd806201dc9ae8::d5a9de352c1dd11085442e293e22edaf4b2d4839::697ed8c8279a1ac915b71db06a03f9ed85b9f334::e0b1bbeae026859540c62247156b8839d556ee9a::7a8348994bb7b86a0445f8e333b3b1dc27252753::493b89e959f58939fd683cb0a6f1a58287543308::c0fe8b5c7df00f94cb7b4fd082edcd234530677a::dc38a53d56141b7d4cf5b88b91ce7363c7930d39::
https://api.github.com/repos/bitcoin/bitcoin,8001,Mf1605-012testbp::0.12,0,merged,Tests::,Replacement for #7854,87129b24e11769e002a363974f4109c796dbcad6::e3a9ce9c940482113e198d023556c8d8bc22aa87::
https://api.github.com/repos/bitcoin/bitcoin,7854,refactorscriptests_12::0.12,0,closed,Tests::,"Assuming #7818 gets merged, here is a backport to 0.12, to unify the framework across branches.",04325178f0ad88033856d76c212f31cb95024b24::19398b9467a083ab1da23c58e6c898ecfb6e19ad::c9a31324caf90a63d95a79c3f64d969847db22c1::6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221::1d96f5b4e1df7758328520a98172fa3f3e7e65e5::1bc3717c7e5b215602fe8eaef42a6356a8ae0656::bc178383487ebd5a829c7ed42e304fb21afb7ce5::0695ea1e8cde5b27ad769eb13fdec7c3ebac849a::
https://api.github.com/repos/bitcoin/bitcoin,7743,backports-for-0.11.3::0.11,0,merged,,These seem fairly important even for a softfork-deployment 0.11.3.,90de0e1c2fce3f419e5af8bdb3c543997300b37c::5c0b357bf67e38d94b32912ad3bd4023a726df7c::d626faa06e3258a11257109f13db0ec485943713::e979f09b6af68fff3740bd53e013cbcdcccde8e1::
https://api.github.com/repos/bitcoin/bitcoin,7431,permitrbf_rename::master,0,merged,Mempool::,"The purpose of supporting -replacebyfee=opt-in is so that future versions can also support things like -replacebyfee=fss or -replacebyfee=opt-in,fss (for First-Seen-Safe behaviour) `fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), ""opt-in"") != v.end())` (and avoid the foreach)? ::Yes that should be the same, as this is in `if(!fEnableReplacement)` so it can never be set to false by this. ::I'm not sure 'fee' is a good name. How would you then call non-opt in RBF? A straightforward name for the strategy would be `opt-in-rbf` or `opt-in-fee` ::",77b55a00ed4a3a3a22ec3e299539a1812a0bc605::d65dee961e39937e3e671c742ff8db32612ad9af::3b66e54457cdfe1f5ffda016d42c23fe848d539c::b922fbe063b46862aae6efb35074d1e010fe7006::
https://api.github.com/repos/bitcoin/bitcoin,7371,Mf1601-012Backports::0.12,0,merged,,Better no translation than no help message at all?,a74fa1f06b3c3f75afd9f54d85d1243c7df279a9::44438a192ac9700f0874f73225ec067334d2b62f::236686b8444a1d0533f9f9c598d4292217e2d31c::
https://api.github.com/repos/bitcoin/bitcoin,7353,patch-3::0.11,0,closed,Build system::,,6836e9ac87880dac12ff366eb64387b84ab80c65::
https://api.github.com/repos/bitcoin/bitcoin,7352,patch-2::0.12,0,closed,Build system::,backport for 0.12,66c84ca2b0f8ad4ef52d5d26bf674228fe5556d5::
https://api.github.com/repos/bitcoin/bitcoin,6750,recent-rejects-v0.11-backport::0.11,0,merged,P2P::Validation::,"Backport of #6498 to v0.11.x Rational: You can waste a lot of bandwidth w/o this patch, e.g. if min relay fee is set higher than normal to avoid a flood attack from crashing your node due to OOM; this is a fairly important anti-DoS protection. The patch set was cherry-picked perfectly w/ no merge issues as the relevant code hasn't changed from v0.11 to v0.12",2983fe048479c5365fde273ec6ef74377e222f19::25cf1220e64a418420ae030091882337046fb3cf::83671efe996f6ea695d051594acc7f5fb4c500fc::6eed52e05b697547105e7f6ab2419a3b1bf50189::ec9b6c33e813021948c53356173e313b43b03c13::5094a81d3b920283333623b49ac382d0b545642e::
https://api.github.com/repos/bitcoin/bitcoin,2289,201301_qimage_bits::master,0,merged,,(from debian patches) Image.constBits was introduced in Qt 4.7.  Should be ok here to use QImage.bits which allows linking against the Qt in Squeeze.,17121ec4fed58ec4a6f74c5ab4b4f9229619bd9a::
