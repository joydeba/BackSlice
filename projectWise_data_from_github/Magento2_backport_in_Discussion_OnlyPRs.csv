https://api.github.com/repos/magento/magento2,31636,patch-1::2.4-develop,0,merged,Area: Frontend::Auto-Tests: Not Required::Award: bug fix::Component: Captcha::Priority: P2::Progress: accept::QA: Added to Regression Scope::Release Line: 2.4::Severity: S2::Type: Bug Fix::,"When upgrading to 2.3.6 from 2.3.5-p2, a new CAPTCHA zone ""payment_processing_request"" is added. If a customer has an existing session (from 2.3.5-p2 or prior), and tries to access checkout with their existing session data, checkout will fail to load because the check to see if `captchaData[formId]` exists is not a valid function call. `_.isEmpty()` only returns a boolean value, so it cannot be enumerated like an array. Array access syntax has been moved in to the check, rather than outside it. <!--- Thank you for contributing to Magento. To help us process this pull request we recommend that you add the following information: - Summary of the pull request, - Issue(s) related to the changes made, - Manual testing scenarios Fields marked with (*) are required. Please don't remove the template. --> <!--- Please provide a general summary of the Pull Request in the Title above --> ### Description (*) This change allows a `_.isEmpty()` check in the `defaultCaptcha.js` file to complete successfully, resolving issues with the checkout failing to load or infinitely loading after upgrading. ### Related Pull Requests N/A ### Fixed Issues (if relevant) N/A - no reported issue for this yet? ### Manual testing scenarios (*) 1. Create an instance prior to 2.3.6 (eg: 2.3.5-p2) 2. Load the /checkout route in a valid way (eg: add to basket, create an account, click ""go to checkout"") 3. Observe the `captcha` key of the `mage-cache-storage` local storage key. There should **not** be an entry for `payment_processing_request` 4. Upgrade to 2.3.6 or another version that **does** include the fix introduced via [MC-36200](https://github.com/magento/magento2/commit/d31085aea48f151e0359ccc3c72d3585da3e96a1) 5. Load the `/checkout` route with the same session as before 6. Observe an infinite load on the checkout page and errors in the console along the lines of: ``` defaultCaptcha.js:60 Uncaught TypeError: Cannot read property 'timestamp' of undefined at UiClass.checkCustomerData (defaultCaptcha.js:60) at UiClass.<anonymous> (defaultCaptcha.js:43) at Function.each (jquery.js:382) at UiClass.initialize (defaultCaptcha.js:38) at UiClass.initialize (wrapper.js:109) at UiClass._super (wrapper.js:106) at UiClass.initialize (loginCaptcha.js:21) at UiClass.initialize (wrapper.js:109) at new UiClass (class.js:49) at Object.initComponent (layout.js:137) ``` 7. Apply patch 8. Attempt to load `/checkout` again 9. Observe checkout loads as expected ### Questions or comments I'm not sure if an issue is needed for this PR, but happy to make one if one is needed. This will also need to be backported to 2.3.6. ### Contribution checklist (*) - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds are green) ### Resolved issues: 1. [x] resolves magento/magento2#31641: Moving array access for CAPTCHA _.isEmpty check",36c031a6f303cfe21f735c1b4db953595cf2ade7::
https://api.github.com/repos/magento/magento2,29035,fix-for-issue-29034::2.4-develop,0,merged,Auto-Tests: Covered::Award: bug fix::Component: CmsUrlRewrite::Priority: P2::Progress: accept::QA: Added to Regression Scope::Release Line: 2.4::Severity: S1::,"### Description (*) All after plugins should always return a value, so other plugins which follow them in the stack get the correct input parameters instead of `null`. It appears that in [MC-18561](https://github.com/magento/magento2/commit/3696290a2e9c90ac48dca6c2020135a067f79538) this was forgotten and this can cause crashes when the sort order of default Magento modules are different then in a vanilla installation (which can happen after installing certain custom modules) See #29034 for more information The bug was introduced in Magento 2.3.4, so it makes sense if this PR is considered to be backported to 2.3 as well I have no interest in adding additional automatic tests for this and wouldn't even know how to approach this, so if this is required, somebody else will need to take care of this. Thanks! ### Related Pull Requests ### Fixed Issues (if relevant) 1. Fixes https://github.com/magento/magento2/issues/29034 ### Manual testing scenarios (*) See https://github.com/magento/magento2/issues/29034 ### Questions or comments Not sure if this is possible, but having a static analyser test to detect after plugins without return values could have prevented this mistake to have entered the code base ### Contribution checklist (*) - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds are green)",1a73d0ef24ac4fabfeb493f34414bdce20355f7f::87ce9e786b64dc737466197b640034b2e7de003f::39481a5bda95e36da22f9636335c178e46c781c5::
https://api.github.com/repos/magento/magento2,28331,backport/MC-31544::2.3,0,closed,Partner: Ampersand::Progress: pending review::partners-contribution::,### Description - Original issue: https://github.com/magento/magento2/issues/26882 The issue was resolved in `2.4-develop` https://github.com/magento/magento2/issues/26882#issuecomment-611523401 This backports https://github.com/magento/magento2/commit/1f4166bc94bc3143e30e1f66243391ccd8434f1f ### Contribution checklist (*) - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds are green),7bfae6c20ee8ae211350dd52a255902da8be3153::
https://api.github.com/repos/magento/magento2,26784,forward-port-pr-14344::2.4-develop,0,merged,Auto-Tests: Covered::Award: bug fix::Component: Catalog::Component: CatalogUrlRewrite::Progress: accept::Release Line: 2.4::,"(cherry picked from commit 63111ed399b2e058efc0bf1c7c5427299cb8c5fc) ### Description (*) This is a forward port of https://github.com/magento/magento2/pull/14344 to 2.4-develop This replaces https://github.com/magento/magento2/pull/20826 which is stuck because the author is no longer responding for a few months. Previous attempts at fixing this issue were done in https://github.com/magento/magento2/pull/7667 & https://github.com/magento/magento2/pull/22212 **FOR THE MAINTAINERS**: if this gets approved, can you please please please backport this to Magento 2.3, because the change is already in Magento 2.2, and by this PR also in 2.4, so it should also be part of 2.3, so we have consistent behavior over all these major Magento versions. ### Related Pull Requests - https://github.com/magento/magento2/pull/7667 - https://github.com/magento/magento2/pull/14344 - https://github.com/magento/magento2/pull/20826 - https://github.com/magento/magento2/pull/22212 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/4112: Wrong parent category url_key in URL 2. https://github.com/magento/magento2/issues/11615: URL Rewrites vs multiple storeviews - a never ending battle 3. https://github.com/magento/magento2/issues/11616: URL Rewrites vs multiple storeviews - too many rewrites are being generated 4. https://github.com/magento/magento2/issues/25124: Magento 2.3 Wrong product url for anchor categories for multiple storeviews 5. https://github.com/magento/magento2/issues/26393: Product category url rewrite missing storeview specific url_key 6. Probably some more ... ### Manual testing scenarios (*) 1. See steps to reproduce in https://github.com/magento/magento2/issues/11615 and https://github.com/magento/magento2/issues/11616 ### Contribution checklist (*) - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds are green) Hi @engcom-Echo. Could I ask you to rename the action group in order to follow the general naming rules, please? So we have `AssertStorefrontProductRewriteUrlSubCategoryActionGroup` in the result. Please, check the [technical guidelines](https://devdocs.magento.com/guides/v2.3/coding-standards/technical-guidelines.html) (part 11.3.5). Thank you.::Please, use the area prefix (Admin|Storefront) for this action group. If we have all action groups prefixed correctly, it's much easier to find and reuse an action group in the future. Thank you! ::Thank you::For what input should the result change? I see expectation attribute, but there's not context attribute.::",cb685d15b2b590bdb4d99a3d4ebe563037d0aa31::acb8642c44d1ecb60ad023c81f6541fa9ebae47d::97258e1a9ce97ad32971731eceac8fee32f66b74::6cf26dc19e2f80f0c2da445443d0b48a1974fc77::0b941218dcc86dcbd518f5400934e995ad1f2e3c::b0c0c59900b4ddf8d70cf2ae9c9ec12805d13908::28fa34531f4c7cd4bcad46500ba027b9b58ff297::bf514b0b435a75f5688f56f8e9465af9bb3284c1::
https://api.github.com/repos/magento/magento2,26713,product-import-fix-duplicate-images::2.4-develop,0,merged,Auto-Tests: Covered::Component: CatalogImportExport::Priority: P2::Progress: accept::QA: Added to Regression Scope::Release Line: 2.4::Severity: S2::,"### Description Built on top of https://github.com/magento/magento2/pull/21146 and https://github.com/magento/magento2/pull/21855. This PR adds image deletion so after import product will have images specified in the CSV. New images will be added, existing will not be duplicated and images not mentioned in the CSV will be removed. This PR has been created for 2.4-develop branch and when approved I'll create backport for 2.3 branch. ### Fixed Issues magento/magento2#14398: Images Not Replaced via CSV Import magento/magento2#21885: Product images are being duplicated on import ### Manual testing scenarios (*) 1. Import product CSV using Add/Update method multiple times 2. Check if image duplication happens or not Please, extract the new code to separate class instead of introducing the new public method. ::Should be private ::Please, add strict types ::Should be private::Please, add strict types ::Should be private::I would recommend wrapping the hash_file in a private function and create a private constant with the 'sha256' algorithm, we are using this 3 times on this PR.::We probably don't need to call the hash_file twice here, wouldn't be better to define something like $imageFilePath and then call the private method to hash the file just once.::If we need a comment to explain the intention it may worth creating a private method with a descriptive name.::I actually would recommend wrapping this `ifelse` within a function that returns a bool, and just use it on row 1786 instead of defining a variable.::```suggestion if (!$exists && isset($file['hash']) && $file['hash'] === $hash) { return $file['value']; } return $exists; ```::Can we simplify this?::",912b3f7737259d5977ce3fa64781a3280c712bfe::ffdb34112974d74aa2d72b5fd441641e85234ad3::eb8607c5ab62f10e519e20810da60a2755c34d58::e4812b842f300af4f45dd9d6ed3a6faaa2143a38::d03b223d33cc511b482f83c2666469c2e9c19e3f::d4931f79648bfd1677a861257697d5f8a57cecd6::f16a12f6bad4a60c50223ab6aab7bc924fc5e437::819fc7cfef122559826edbfd17ce397527461ae1::f16811c29421f34c9ae1b07d080b7ec0107c9757::bca6bf6db9f3eeca2f10c753c34a23b568307bdf::3da6f23f4fb20553580431bdcdbb35afb4551d7f::9b505ee45d9d40dd9b030f8ef88e64204a1b56d4::
https://api.github.com/repos/magento/magento2,23734,2.2-develop-galleryoptions::2.2-develop,0,closed,Area: Frontend::Component: Catalog::Release Line: 2.2::,"### Original PR (*) 1. magento/magento2#23733: [2.3] Provide fallback GalleryOptions class when argument missing from layout xml file ### Description (*) The main product gallery layout file ""catalog_product_view.xml"" in ""Magento_Catalog"" now requires the argument ""gallery_options"" to be injected to the instance of the ""\Magento\Catalog\Block\Product\View\Gallery"" class for the ""product.info.media.image"" block in order for the product page to be rendered correctly (This is a recent change). If this option is not present then the product page will just render the product image, and nothing else as the getGalleryOptions() call will just return null. This is not a problem in vanilla Magento, as the argument is present in the layout file, however third party module providers, or anyone instantiating an instance of the ""\Magento\Catalog\Block\Product\View\Gallery"" class, or inheriting from it now needs to inject this argument for the template to render correctly. This has broken backwards compatability with old third party modules code, who now need to update to inject this argument. This PR introduces code into the phtml template, that detects if the option is not injected, and falls back to hard coded ""\Magento\Catalog\Block\Product\View\GalleryOptions"" class. ### Fixed Issues (if relevant) 1. magento/magento2#23432: When viewing product only the image shows ### Manual testing scenarios (*) 1. Remove argument ""gallery_options"" from ""catalog_product_view.xml"" in Magento_Catalog module. 2. Clear cache 3. View product page (product that has an image) 4. Ensure product page renders correctly. ### Questions or comments See notes and discussion in Original PR where it is being discussed whether to implement this series of PR's or not. This backport should follow whatever the decision is for the 2.3 release line's PR. ### Contribution checklist (*) - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds are green)",955e1639428aca3f7de07f8f43af2e769c7782bc::
https://api.github.com/repos/magento/magento2,23121,23053-sendfriend-visibility-fix-2.2::2.2-develop,0,merged,Auto-Tests: Covered::Component: SendFriend::Progress: accept::Release Line: 2.2::,### Description (*) This is backport pull request. Sendfriend feature was verifying product status only. This could cause sending a link for enabled product invisible in catalog and/or search. ### Fixed Issues (if relevant) 1. magento/magento2#23053: Sendfriend works for products with visibility not visible individually ### Manual testing scenarios (*) Follow steps provided in #23053 ### Questions or comments ### Contribution checklist (*) - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds are green),8476c1ff550e0b0ff9213a11a84360559230f749::
https://api.github.com/repos/magento/magento2,22902,fix_for_22028_m22_backport::2.2-develop,0,merged,Component: Catalog::Progress: accept::Release Line: 2.2::,"### Description (*) It is backport pull request related to #22575 PR (on Magento 2.3) It is fix for issue #22028 In query for selecting ids to indexing after import products, I changed ""between"" into ""in"", Before change, when products were updated via csv file import in Admin panel, to indexing process were selected all products from range between the smallest and the biggest products id from csv file. When the ids were from wide range, it caused selecting a huge amount of data and attempt to inserting them to catalog_product_index_price_temp. If data amount was to big, it caused error After change, for indexing process are selected only products from csv file. Example: Before change, when we try to update two products with id 30 and 31, only two products were selected to indexing. When products have ids 30 and 50, it caused, that 21 products were selected to indexing (All products with ids between 30 and 50. After change, in both cases described above, only two products will be selected to indexing. ### Fixed Issues (if relevant) No related issues found. ### Manual testing scenarios (*) The same scenario can be applied to reproduce bug and check fix: 1. Prepare csv file to update products (2 products or more). (This csv should contain products with the lowest and the highest id - 1 and 6000) 2. In Admin panel go to: System->Import and choose Product and Add/Update 3. Upload file 4. Check Data 5. Import csv file (error should be displayed now) ### Contribution checklist (*) - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [x] All automated tests passed successfully (all builds on Travis CI are green)",1f3f984aef9233c19a566513dcd6f39dfa49b18b::
https://api.github.com/repos/magento/magento2,22282,github-2.2-15090::2.2-develop,0,merged,Component: Config::Partner: Mediotype::Progress: accept::Release Line: 2.2::partners-contribution::,"### Description (*) Running `bin/magento app:config:import` results in following error message when `admin/url/use_custom` is present and set `1` regardless of whether or not there is also a value specified for `admin/url/custom`: ``` davidalger:03:36 PM:/sites/github-15090.mage (github-15090) $ bin/magento app:config:import Processing configurations data from configuration file... Import failed: Please specify the admin custom URL. ``` ### Fixed Issues (if relevant) 1. #15090 (backport of #22281) ### Manual testing scenarios (*) 1. Install Magento locally 2. Add following to `env.php` ``` 'system' => [ 'default' => [ 'web' => [ 'unsecure' => [ 'base_url' => 'https://github-15090.mage.test/', 'base_link_url' => 'https://github-15090.mage.test/' ], 'secure' => [ 'base_url' => 'https://github-15090.mage.test/', 'base_link_url' => 'https://github-15090.mage.test/' ] ], 'admin' => [ 'url' => [ 'custom' => 'https://github-15090-admin.mage.test/', 'use_custom' => 1 ] ], ], 'websites' => [ 'admin' => [ 'web' => [ 'unsecure' => [ 'base_url' => 'https://github-15090-admin.mage.test/', 'base_link_url' => 'https://github-15090-admin.mage.test/' ], 'secure' => [ 'base_url' => 'https://github-15090-admin.mage.test/', 'base_link_url' => 'https://github-15090-admin.mage.test/' ] ] ] ] ] ``` 3. Run `bin/magento app:config:import` ### Expected Result ``` davidalger:03:38 PM:/sites/github-15090.mage (github-15090 *) $ bin/magento app:config:import Processing configurations data from configuration file... System config was processed ``` ### Contribution checklist (*) - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",e12eeaac9a1892bab43b8ab7083e03922da3b2ab::
https://api.github.com/repos/magento/magento2,22140,backport-pr-18067::2.2-develop,0,merged,Component: Config::Progress: accept::Release Line: 2.2::,"… replaced with actual values in the backend form fields. (cherry picked from commit a8f17290363aa157eb1ec77984b3df2201a97ea9) ### Description (*) This is a backport of https://github.com/magento/magento2/pull/18067 for Magento 2.2 ### Fixed Issues (if relevant) 1. #15972: Since Magento 2.2.1, certain variables in the configuration get resolved to their actual value ### Manual testing scenarios (*) 1. Setup a clean Magento from 2.2-develop branch 2. In the backend configuration go to: General > Web > Base URLs & Base URLs (Secure) 3. Enter `{{unsecure_base_url}}media/` in ""Base URL for User Media Files"" and `{{secure_base_url}}media/` in ""Secure Base URL for User Media Files"" 4. Save Config 5. Look at those two fields you just edited, they should remain unchanged ### Contribution checklist (*) - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",0b0fc92a7e650dec0c94d56e01f7106304a4f67c::
https://api.github.com/repos/magento/magento2,21719,feature/backport_22_fix_21692_incorrect_constructor::2.2-develop,0,merged,Component: Locale::Component: Sales::Progress: accept::Release Line: 2.2::,"### Original Pull Request https://github.com/magento/magento2/pull/21693 <!--- Thank you for contributing to Magento. To help us process this pull request we recommend that you add the following information: - Summary of the pull request, - Issue(s) related to the changes made, - Manual testing scenarios Fields marked with (*) are required. Please don't remove the template. --> <!--- Please provide a general summary of the Pull Request in the Title above --> ### Description (*) <!--- Please provide a description of the changes proposed in the pull request. Letting us know what has changed and why it needed changing will help us validate this pull request. --> This fixes issue #21692 - error is described there. This is backport for Magento 2.2. ### Fixed Issues (if relevant) 1. magento/magento2#21692: Incorrect constructor of Magento\Sales\Model\Order\Address\Validator ### Manual testing scenarios (*) <!--- Please provide a set of unambiguous steps to test the proposed code change. Giving us manual testing scenarios will help with the processing and validation process. --> 1. Add custom module with Cli Command and inject `Magento\Sales\Model\Order\Address\Validator` into its constructor 2. Run Magento installation from Cli 3. Verify if installation is finished with success ### Contribution checklist (*) - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [x] All automated tests passed successfully (all builds on Travis CI are green)",068eedf0b8fb069df8e8432e8b78d3a0dff33110::8a4cfa4eac8b5d18d1c9b30655dbacabce9d9d53::43cc9a4d3ab36e292382ca06c8256b47452cfed3::f77f54dac19e6d9853b0e34a4bda1b39fd62fd3c::cece0869efc4333abdd410f0482d0d6586a04ce8::67b1d0a12fea5f46073ca4e4133e5debd3bf6ede::
https://api.github.com/repos/magento/magento2,21550,bugfix/curl-adapater-ignores-http-version-22-backport::2.2-develop,0,merged,Component: HTTP::Partner: Mediotype::Progress: accept::Release Line: 2.2::partners-contribution::,"### Original Pull Request #21549 ### Description (*) The curl HTTP adapter currently does not respect the value of the `$http_ver` argument to the `write` method causing `\Magento\Framework\HTTP\ZendClient` to throw an exception causing a fatal error when making a request to an HTTP/2 capable server from a client server that has HTTP/2 curl libraries loaded. ``` Fatal error: Uncaught Zend_Http_Exception: Invalid header line detected in /Volumes/Server/sites/vaporbeast.vbst/vendor/magento/zendframework1/library/Zend/Http/Response.php on line 572 ``` ### Fixed Issues (if relevant) 1. #19845 (this was attempting to fix same thing, but was reverted in commit 55b8bf813f4 because it was done incorrectly) 2. #21251 (backport of #19845; should not be merged due to issues with original PR) ### Manual testing scenarios (*) Use `\Magento\Framework\HTTP\ZendClient` to make a request to an HTTP/2 capable endpoint from a system with HTTP/2 enabled curl libraries. Without this change in place, the client will fail to parse the response headers because the regex found in `\Zend_Http_Response::extractHeaders` is specifically expecting `HTTP 1.1` or `HTTP 1.0` in the response. To reproduce the issue, the following code snippet may be used: ``` $client = new \Magento\Framework\HTTP\ZendClient(); $client->setUri('https://davidalger.com/robots.txt'); $result = $client->request(); var_dump($result->getHeaders()); ``` ### Contribution checklist (*) - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",020ab5e1541d26050e5b0c4b88e4e99fc69746be::
https://api.github.com/repos/magento/magento2,21549,bugfix/curl-adapater-ignores-http-version::2.3-develop,0,merged,Award: bug fix::Component: HTTP::Partner: Mediotype::Progress: accept::Release Line: 2.3::partners-contribution::,"### Description (*) The curl HTTP adapter currently does not respect the value of the `$http_ver` argument to the `write` method causing `\Magento\Framework\HTTP\ZendClient` to throw an exception causing a fatal error when making a request to an HTTP/2 capable server from a client server that has HTTP/2 curl libraries loaded. ``` Fatal error: Uncaught Zend_Http_Exception: Invalid header line detected in /Volumes/Server/sites/vaporbeast.vbst/vendor/magento/zendframework1/library/Zend/Http/Response.php on line 572 ``` ### Fixed Issues (if relevant) 1. #19845 (this was attempting to fix same thing, but was reverted in commit 55b8bf813f4 because it was done incorrectly) 2. #21251 (backport of #19845; should not be merged due to issues with original PR) ### Manual testing scenarios (*) Use `\Magento\Framework\HTTP\ZendClient` to make a request to an HTTP/2 capable endpoint from a system with HTTP/2 enabled curl libraries. Without this change in place, the client will fail to parse the response headers because the regex found in `\Zend_Http_Response::extractHeaders` is specifically expecting `HTTP 1.1` or `HTTP 1.0` in the response. To reproduce the issue, the following code snippet may be used: ``` $client = new \Magento\Framework\HTTP\ZendClient(); $client->setUri('https://davidalger.com/robots.txt'); $result = $client->request(); var_dump($result->getHeaders()); ``` ### Contribution checklist (*) - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",b57dab0c754144cb94584523747bf2b40148d4c0::
https://api.github.com/repos/magento/magento2,21421,2.3-develop::2.3-develop,0,merged,Area: Frontend::Component: Swatches::Progress: accept::Release Line: 2.3::,"<!--- Thank you for contributing to Magento. To help us process this pull request we recommend that you add the following information: - Summary of the pull request, - Issue(s) related to the changes made, - Manual testing scenarios Fields marked with (*) are required. Please don't remove the template. --> <!--- Please provide a general summary of the Pull Request in the Title above --> ### Description (*) Updates swatches.css to add overflow:auto to the three swatch tables (text, dropdown & visual) to allow for scrolling if the amount of inputs exceeds the available space and increase the min width of inputs (150px) within the table for better usability. Intentionally left original input width (50px) as a fallback. ### Fixed Issues (if relevant) <!--- If relevant, please provide a list of fixed issues in the format magento/magento2#<issue_number>. There could be 1 or more issues linked here and it will help us find some more information about the reasoning behind this change. --> 1. magento/magento2#19932: Fix Swatch Overflow issue 2. magento/magento2#19933: [backport] Fix Swatch Overflow issue ### Manual testing scenarios (*) <!--- Please provide a set of unambiguous steps to test the proposed code change. Giving us manual testing scenarios will help with the processing and validation process. --> 1. Add multiple store view and languages to your store (Our store has 19 but you should be able to reach replicate the issue with less) 2. Open an attribute page within the Admin area to configure (Stores > Product > Any attribute). 3. Table inputs at the bottom for languages should be too small to to use effectively 4. If 3. isn't true add more store views, the more that are added the smaller the input fields get. ### Contribution checklist (*) - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [x] All automated tests passed successfully (all builds on Travis CI are green)",d78e69a120e135af038d9dd21a99ab708159d911::
https://api.github.com/repos/magento/magento2,21340,backport-pr-19505::2.2-develop,0,merged,Component: Checkout::Progress: accept::Release Line: 2.2::,"### Description (*) This is a backport of PR 19505 for Magento 2.2 See the description in #19505 for more details. ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/5021: ""Please specify a shipping method"" Exception 2. https://github.com/magento/magento2/issues/13902: Carrier codes with '_' (underscores) break several payment API's ### Manual testing scenarios (*) See the steps in #19505 for more details. ### Contribution checklist (*) - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",47aee60795ad6bd41f32d64adeb1b1b4f076fa15::8e19a732fd33619dac7c3390d9695739eac117cf::
https://api.github.com/repos/magento/magento2,21221,2.2-develop-PR-port-19631::2.2-develop,0,closed,Area: Design/Frontend::Partner: Krish TechnoLabs::Release Line: 2.2::partners-contribution::,"### Original Pull Request https://github.com/magento/magento2/pull/19631 <!--- Thank you for contributing to Magento. To help us process this pull request we recommend that you add the following information: - Summary of the pull request, - Issue(s) related to the changes made, - Manual testing scenarios Fields marked with (*) are required. Please don't remove the template. --> <!--- Please provide a general summary of the Pull Request in the Title above --> ### Description (*) <!--- Please provide a description of the changes proposed in the pull request. Letting us know what has changed and why it needed changing will help us validate this pull request. --> Checkbox alignment issue backend. ### Fixed Issues (if relevant) <!--- If relevant, please provide a list of fixed issues in the format magento/magento2#<issue_number>. There could be 1 or more issues linked here and it will help us find some more information about the reasoning behind this change. --> 1. magento/magento2#19630: Checkbox alignment issue backend. ### Manual testing scenarios (*) <!--- Please provide a set of unambiguous steps to test the proposed code change. Giving us manual testing scenarios will help with the processing and validation process. --> 1. Login into admin panel > System > Export > checkbox alignment issue ""Fields Enclosure"". ### Contribution checklist (*) - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green) Could you provide more information about this change, please? I'm not sure it should be included as a part of the backport. Correct me if I'm wrong. Thank you::",a8c0faf12c0d035b650e25ec0cb8259b88cc4d93::64a3ee353c7ec4a2ff4c812bbdcb32901b59617f::8445029d6f4f997623eb5382c44a7024ef68d452::
https://api.github.com/repos/magento/magento2,21081,backport-magetwo-95819::2.2-develop,0,merged,Component: Customer::Progress: accept::Release Line: 2.2::,### Description (*) This is a backport for commit https://github.com/magento/magento2/commit/679fc6166bae7f19e3cc382b10e4f578e4b17330. ### Manual testing scenarios (*) <!--- Please provide a set of unambiguous steps to test the proposed code change. Giving us manual testing scenarios will help with the processing and validation process. --> 1. Enable at least EAV cache. 2. Create 2 websites. 3. Set configuration `Customer Configuration -> Name and Address Options -> Show Tax/VAT Number` on one store to **Optional** and on the other store to **Required**. 4. Check if Tax/VAT field is optional on one store and required on the other. ### Contribution checklist (*) - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green),e0c8a8fb57ccb3ee954a1d4492c8d79060e779ec::
https://api.github.com/repos/magento/magento2,20566,2.2-develop#13675::2.2-develop,0,merged,Component: Customer::Partner: ISM eCompany::Progress: accept::Release Line: 2.2::partners-contribution::,issue https://github.com/magento/magento2/issues/13675 ### Description (*) #### Preconditions M 2.2.x M 2.3.x #### Steps to reproduce Login to admin and got to Store->configuration->Customer->Customer Configuration-> Name and Address Options Set Number of Lines in a Street Address to 3 and save in front end it display 3 street line Next click on Use system value and save it Clear cache Still its show 3 line for street in address #### Expected result it should display default street no that is two when you unset the value from Use system value #### Actual result it display last saved values instead of default value (i'e 2 ) ### Fixed Issues (if relevant) backport for https://github.com/magento/magento2/pull/20565 ### Manual testing scenarios (*) Login to admin and got to Store->configuration->Customer->Customer Configuration-> Name and Address Options Set Number of Lines in a Street Address to 3 and save in front end it display 3 street line Next click on Use system value and save it Clear cache Still its show 3 line for street in address ### Contribution checklist (*) - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green),ca9bb265526f1461ee8647ed9de8ad81d13e36ce::
https://api.github.com/repos/magento/magento2,19461,patch-1::2.2-develop,0,merged,Component: Catalog::Component: Checkout::Partner: H&O::Partner: Reach Digital::Release Line: 2.2::partners-contribution::,"### Description (*) Add missing translations, backport of https://github.com/magento/magento2/pull/18938 ### Fixed Issues (if relevant) 1. magento/magento2#18931: Product added to shopping cart / comparison list message not translated by default ### Manual testing scenarios (*) 1. Change language to non english. ### Contribution checklist (*) - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [x] All automated tests passed successfully (all builds on Travis CI are green)",3b521b0cf72426711d3cf22ed6cba139d7143101::
https://api.github.com/repos/magento/magento2,18809,2.2-develop-18387-catalog-images-resize::2.2-develop,0,merged,Component: Catalog::Component: Framework/DB::Partner: ISM eCompany::Progress: accept::Release Line: 2.2::partners-contribution::,"### Original pull request (https://github.com/magento/magento2/pull/18807) ### Description (#18387) Assumption from issue: >>""catalog:images:resize fails to process all images -> Possible underlying Magento/Framework/DB/Query/Generator issue"". However, there is a problem with total images count calculation select (distinct by image path is not used in `count(*)` ) - functionality by itself works correctly and process all images. ### Fixed Issues magento/magento2#18387: catalog:images:resize fails to process all images -> Possible underlying Magento/Framework/DB/Query/Generator issue 1. fixed `getCountAllProductImages` method that calculates total images count incorrectly; 2. covered `\Magento\Catalog\Model\ResourceModel\Product\Image` with unit tests; `UPD from 27.10.2018:` 3. Ranged selects always miss the last range - [backport] of https://github.com/magento/magento2/pull/12624 ### Manual testing scenarios #### Variant I 1. Magento 2.3-develop 2. Sample data deployed (in order to easily have several test images in store) ##### Expected result You do see total images count 801. ##### Actual result You do see total images count 3422. #### Variant II (synthetic case) 1. Magento 2.3-develop 2. Generate products iwth images: `php bin/magento setup:performance:generate-fixtures setup/performance-toolkit/profiles/ce/medium.xml` 3. apply the same image paths for all products - so images for product will become duplicated. For details check `catalog_product_entity_media_gallery` table. example SQL to do this: `create temporary table zzz as (select NULL as value_id, c.attribute_id, c.value, c.media_type, c.disabled from catalog_product_entity_media_gallery as c); insert into catalog_product_entity_media_gallery select * from zzz;` ##### Expected result Total images count will be equal to the value from `setup/performance-toolkit/profiles/ce/medium.xml` in `images-count` node ( 1000 ). ##### Actual result Total images count will be 2 times higher that their exact value. ### Contribution checklist (*) - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",f114f2aa61decaaecff02ebc6e2cabcc12569bd3::95eeb9f6a022b1195b838965f65486a503d57137::84590ded5ed62edede5a12a68d384433e51ce0f3::4653d3e007500133b1b55012b469fd782738c680::d2e53455f4a79a3dc71e9e267259bfabc799a577::2539a716f5d54c66c89f64965d6fb6762b6c90e8::76bd08924e7e0f8a3fb88b3990623e5872b10760::b81b5503a676778793eac3a321d59fd3741935ca::051d82db553171cd784f543747ccff926287605d::10a1a881e8c7cbf983b800fe6479127e159a86e2::
https://api.github.com/repos/magento/magento2,18737,GITHUB-18264::2.2-develop,0,merged,Component: Catalog::Progress: accept::Release Line: 2.2::,"### Description This PR is a backport of #17799 for the 2.2 branch. It fixes issue #18264 where the price indexer would generate unwanted results if a special price date is set, but the actual special price is omitted. ### Fixed Issues (if relevant) 1. magento/magento2#18264 ### Manual testing scenarios 1. Create some products with different prices. 2. Give them no special price (empty field), but give them a special price from date in the past and/or a special price to date in the future. 3. Run the price reindexer. 4. The products that have special price set to (empty field), are now set to the regular price as min_price, resulting in a correct working price sorting. ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",36a3c26bd7492f4638fe02085156d2510687a34a::
https://api.github.com/repos/magento/magento2,18591,patch-17865::2.2-develop,0,merged,Component: CatalogImportExport::Partner: Krish TechnoLabs::Progress: accept::Release Line: 2.2::partners-contribution::,"<!--- Thank you for contributing to Magento. To help us process this pull request we recommend that you add the following information: - Summary of the pull request, - Issue(s) related to the changes made, - Manual testing scenarios Fields marked with (*) are required. Please don't remove the template. --> <!--- Please provide a general summary of the Pull Request in the Title above --> ### Description (*) <!--- Please provide a description of the changes proposed in the pull request. Letting us know what has changed and why it needed changing will help us validate this pull request. --> Fix SKU limit in import new products ### Fixed Issues (if relevant) <!--- If relevant, please provide a list of fixed issues in the format magento/magento2#<issue_number>. There could be 1 or more issues linked here and it will help us find some more information about the reasoning behind this change. --> 1. magento/magento2#17865: import new products via csv: products are created with empty value when strings are too long ### Manual testing scenarios (*) <!--- Please provide a set of unambiguous steps to test the proposed code change. Giving us manual testing scenarios will help with the processing and validation process. --> N/A ### Contribution checklist (*) - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [x] All automated tests passed successfully (all builds on Travis CI are green) Backport for: https://github.com/magento/magento2/pull/18639You introduced the constant in the class marked with `@api` that is backward incompatible (https://devdocs.magento.com/guides/v2.3/contributor-guide/backward-compatible-development/). Additionally the size of `sku` column is 64, not 65. Please reimplement the solution.::> Also we want the fixes to be delivered to 2.3 and then backported to 2.2. Please create PR to 2.3 Hello, I have created a new pull request #18639 as per your suggestion based on 2.3 develop branch. Please kindly review it. ::Done. Thank you for urgent reaction :)::",e59dee011c199ec0f0fad819ca6be981db4778f1::a10f0749d9be91695cf3f3558f60744a23d9e12c::ad68105413c6375dbb48884b434a40bb17f72b25::
https://api.github.com/repos/magento/magento2,18567,fix-product-save-and-duplicate-infinite-loop::2.2-develop,0,closed,Component: Catalog::Progress: needs update::Release Line: 2.2::,"<!--- Thank you for contributing to Magento. To help us process this pull request we recommend that you add the following information: - Summary of the pull request, - Issue(s) related to the changes made, - Manual testing scenarios, --> <!--- Please provide a general summary of the Pull Request in the Title above --> This PR fixes infinite loop issue while using ""Save and Duplicate"" feature on product edit page in Admin panel. ### Description <!--- Please provide a description of the changes proposed in the pull request. Letting us know what has changed and why it needed changing will help us validate this pull request. --> Removing catching any of \Magento\Framework\Exception\AlreadyExistsException & \Magento\UrlRewrite\Model\Exception\UrlAlreadyExistsException exceptions prevents getting potential infinite loop, that causes the issues described in the related issue (see below). Getting infinite loop is caused by issue with incorrect product `URL Path` re-generation in Catalog URL Rewrite module (here is related PR: https://github.com/magento/magento2/pull/18566). ### Fixed Issues (if relevant) <!--- If relevant, please provide a list of fixed issues in the format magento/magento2#<issue_number>. There could be 1 or more issues linked here and it will help us find some more information about the reasoning behind this change. --> magento/magento2#18532: Module Catalog: product ""Save and Duplicate"" causes getting infinite loop. ### Manual testing scenarios <!--- Please provide a set of unambiguous steps to test the proposed code change. Giving us manual testing scenarios will help with the processing and validation process. --> Perform steps to reproduce from the PR https://github.com/magento/magento2/pull/18566. ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green) Such change is incorrect as new code tries to save duplicate only once - while the whole point of loop was in guaranteed saving of a duplicated product. @hostep suggestion makes perfect sense to me, please try to do a backport of this logic and check if it solves your problem.::@orlangur, the only thing, that the loop guarantees, that there will be infinite trials of saving the duplicated product. It doesn't guarantees that the duplicated product actually is saved at the second or third trial and so on. It means, that having any piece of code, that causes getting any of catched exceptions breaks your website. It could be not the Magento module, but having such loop makes an opportunity of having infinite loop and broken production, because someone didn't write the module in the right way.::I agree with @oleksii-lisovyi here, this do while loop can cause [major problems](https://github.com/magento/magento2/issues/9466), this should be solved in a better way then doing a potential infinite loop. Finding a unique url key should not be done by trying to save a product over and over again, this should be done separately somehow.::@oleksii-lisovyi @hostep > } catch (\Magento\Framework\Exception\AlreadyExistsException $e) { > } catch (\Magento\UrlRewrite\Model\Exception\UrlAlreadyExistsException $e) { Such exceptions are specific enough, if some third-party code throws them permanently - it really needs to be fixed. The problem mentioned is solved in 2.3 and loop is still there: https://github.com/magento/magento2/blob/50592b4fb359b1daba9de7b554c9c8afa1d8d160/app/code/Magento/Catalog/Model/Product/Copier.php#L92 > Finding a unique url key should not be done by trying to save a product over and over again, this should be done separately somehow. Please tell more about this ""somehow"". Main purpose of this code is to avoid race condition (when some URL Key we would use was added by somebody else). Otherwise we would just try the next free URL Key and it would work. And again, 2.2 should not live on its own, any backportable fix from 2.3 must be backported.::> Main purpose of this code is to avoid race condition Aha, I wasn't aware of the purpose of this code, but this makes sense indeed! Some inline comments might prove useful here. > Please tell more about this ""somehow"" If it's to avoid a race condition, then this will be pretty hard to do indeed. Can't we just show an error when a duplicate url key was detected and tell to user to retry or something like that?::@hostep why? This code simply works in 2.3 and I see no issue in it for 2.2::Because a save method can trigger things you don't want to trigger more than once. In the case of https://github.com/magento/magento2/issues/9466, calling save more than once copies the image files on the filesystem associated with the product more than once, even though by duplicating a product, you expect the image files to only be copied a single time. Just some wild idea: can we not first add a completely random unique bunch of characters (a hash if you will) as a url key to the duplicated product, then save the product, and then generate a more sensible url key using that do while loop and only save that on the product so only a single attribute gets changed?::@hostep if things are added more than once when calling `save`, they are not implemented well.::",a5e6d355e69164a5d69d918165902916e775b9bc::
https://api.github.com/repos/magento/magento2,18422,experius-2.2-patch-backport-18187::2.2-develop,0,merged,Component: Backend::Component: Bundle::Component: Config::Component: Deploy::Component: Paypal::Component: Sales::Component: Ui::Event: squashtoberfest::Partner: Experius::Progress: accept::Release Line: 2.2::partners-contribution::,"<!--- Thank you for contributing to Magento. To help us process this pull request we recommend that you add the following information: - Summary of the pull request, - Issue(s) related to the changes made, - Manual testing scenarios, --> <!--- Please provide a general summary of the Pull Request in the Title above --> ### Description <!--- Please provide a description of the changes proposed in the pull request. Letting us know what has changed and why it needed changing will help us validate this pull request. --> backport of PR #18187 Replace sort callbacks to spaceship operator. ### Fixed Issues (if relevant) <!--- If relevant, please provide a list of fixed issues in the format magento/magento2#<issue_number>. There could be 1 or more issues linked here and it will help us find some more information about the reasoning behind this change. --> N/A ### Manual testing scenarios <!--- Please provide a set of unambiguous steps to test the proposed code change. Giving us manual testing scenarios will help with the processing and validation process. --> N/A ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",a59736992e8d8e022158c17ffb8909f0117845d3::
https://api.github.com/repos/magento/magento2,18391,allow-browser-keyboard-navigation-on-product-detail-pages-for-2.2::2.2-develop,0,merged,Area: Lib/Frontend::Progress: accept::Release Line: 2.2::,"… pages, by fixing fotorama library to not change to a different image when pressing left or right arrow key in combination with certain modifier keys on your keyboard. (cherry picked from commit d134a232893490dc4e0d7e520d15eef9b36f23e0) ### Description This is a backport of https://github.com/magento/magento2/pull/18212 for Magento 2.2, see original PR for full description. Watch out, the minfied file is slightly different then in the 2.3 branch, it uses `eG.keyCode` instead of `e.keyCode`, be sure to review with care. I tested with minified JS enabled in production mode, to be sure it works fine and it does. ### Fixed Issues (if relevant) None that I could find. ### Manual testing scenarios See original PR ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",518b0bb91c9b55cfd6df240271d2151d041368f2::
https://api.github.com/repos/magento/magento2,18390,fix-for-issue-13156-for-2.2::2.2-develop,0,merged,Component: Eav::Progress: accept::Release Line: 2.2::,"…t needed. This avoids accidentally persisting the source model to the database when using multiselect attributes. (cherry picked from commit 477ca51d052464e862301d945c8bb3550b6fa829) ### Description This is a backport of #18244 for Magento 2.2, see original PR for full description. ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/13156: Updating attribute option data through API will set unwanted source_model on the attribute ### Manual testing scenarios See original PR ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",3e066db75e495f96d264bf1347b9fec01a44032e::
https://api.github.com/repos/magento/magento2,18389,fix-for-issue-17190-for-2.2::2.2-develop,0,merged,Component: Cron::Progress: accept::Release Line: 2.2::,"… related info, this reduces output in the system.log file. (cherry picked from commit a4f58c8806d93ff20f921e02785a78bda00adf46) ### Description This is a backport of https://github.com/magento/magento2/pull/18209 for Magento 2.2, see original PR for full description. ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/17190: system.log rapidly increasing after Magento CE 2.2.5 update (cron logs) ### Manual testing scenarios See original PR ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",a251a8d36ec2c10d175302cac3675e97990bce47::
https://api.github.com/repos/magento/magento2,18113,new-relic-15947-fixes::2.2-develop,0,merged,Cleanup::Component: NewRelicReporting::Progress: accept::Release Line: 2.2::,"### Description In #15947 were added small fixes, this PR just backporting them, just to have the same versions between two release lines ### Fixed Issues (if relevant) N/A ### Manual testing scenarios N/A ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",be7e142d220acc5d586559c2337c3a85e4f954ca::2a709c1b99c9585a313a6d9a5566e030c0e77400::63c51f409c5fd797a1e6a8edea36c8ea011cf9e2::3eec54648a52584ec0375b0a05832720626136b7::
https://api.github.com/repos/magento/magento2,18112,new-relic-15947-fixes::2.2-develop,1,closed,Component: NewRelicReporting::Release Line: 2.2::,"### Description In #15947 were added small fixes, this PR just backporting them, just to have the same versions between two release lines ### Fixed Issues (if relevant) N/A ### Manual testing scenarios N/A ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",be7e142d220acc5d586559c2337c3a85e4f954ca::2a709c1b99c9585a313a6d9a5566e030c0e77400::63c51f409c5fd797a1e6a8edea36c8ea011cf9e2::3eec54648a52584ec0375b0a05832720626136b7::
https://api.github.com/repos/magento/magento2,17674,17661-fix-category-image-overwrite::2.3-develop,0,closed,Component: Catalog::Partner: Guapa::Progress: needs update::Release Line: 2.3::partners-contribution::,"<!--- Please provide a general summary of the Pull Request in the Title above --> ### Description I've added a check to prevent saving a new category image over an already existing one. See: #17661 **Help wanted** _This fix introduces a new issue: the image file name is already set on the category model before the file is actually moved to it's final destination. A `@TODO` is added for this. Could you tell me how to handle this? I wanted to create a new event but I'm not quite sure if it's the way to go._ **Update 20-08-2018**: Fixed the incorrect attribute value ### Fixed Issues (if relevant) 1. magento/magento2#17661 ### Contribution checklist - [X] Pull request has a meaningful description of its purpose - [X] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green) It is the backward incompatible breaking change (which also is impossible to backport to Magento 2.2). Consider refactoring the code to eliminate it. Please refer to the guide https://devdocs.magento.com/guides/v2.2/contributor-guide/backward-compatible-development/::Sorry, I missed that this class is not marked with`@api`. So you can introduce a public method here::",66ff73cd7da95b4f455663a59fc9eba594f0baa7::ac3f98a4a7b01035fdb8303079fa143d13981502::55ea80e35d1146846482e8e063db764d2079e1ad::f4c4dba7e04be784b71c62756d2a1f0e0de709d6::0ba92016ffbbc3b10c449d3dbf129985499b9c82::1cb459db48942d4ab850cc89f7a1f47628bada1d::785e4f7cc19828cf0843a891fa34285ddabd12eb::
https://api.github.com/repos/magento/magento2,17627,fix-issue-16927-for-magento-23::2.3-develop,0,merged,Area: Frontend::Component: Swagger::Progress: accept::Release Line: 2.3::,"**Please: do not backport this PR to 2.2, the solution for 2.2 ~is different and~ already exists: https://github.com/magento/magento2/pull/17626** ### Description The Magento Swagger module contains already minified js files: - https://github.com/magento/magento2/blob/2.3-develop/app/code/Magento/Swagger/view/frontend/web/swagger-ui/js/swagger-ui-bundle.js - https://github.com/magento/magento2/blob/2.3-develop/app/code/Magento/Swagger/view/frontend/web/swagger-ui/js/swagger-ui-standalone-preset.js ~This PR marks them to not be minified again during static content deploy, because they get changed in a way that they are no longer valid JS.~ This PR renames them so they contain `.min` and reference them as such from the layout xml file as well. This way they don't get minified again in production mode when minification is enabled. I've already gone ahead and created a fix for Magento 2.2 as well ~, since the solution presented in here doesn't work on 2.2, this is due to https://github.com/magento/magento2/pull/13687 which only exists in 2.3~ PR for Magento 2.2: https://github.com/magento/magento2/pull/17626 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/16927: 2.2.5 Swagger: With JS minification enabled, the swagger-ui-bundle.js becomes corrupted ### Manual testing scenarios 1. Set up a clean Magento `2.3-develop` installation (using commit 05f9df76b9b) 2. Run: `bin/magento config:set dev/js/minify_files 1` 3. Run: `bin/magento deploy:mode:set production` 4. Go to: https://myinstallation.domain/swagger 5. See JS errors: `Uncaught SyntaxError: Invalid regular expression flag` & `Uncaught ReferenceError: SwaggerUIBundle is not defined` ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",6aeec4710d0decd5161bb3855e83540df81e6a14::
https://api.github.com/repos/magento/magento2,17619,backport-magetwo-60258::2.1-develop,0,closed,Component: Catalog::Release Line: 2.1::,"…he admin is not honored in the category when seen in the Frontend (cherry picked from commit a02b063ac43aceacc5e3aedc369253d217912aaf) (cherry picked from commit 3bd35a438727dc3445f9d17e9fce6d29898d22ce) Also increased setup_version from 2.1.4 to 2.1.4.1 ### Description This is a pretty complicated issue which not a lot of people will run into, but we did. This is an issue we've been having on a Magento 2.1 shop for almost 2 years now and this backport finally fixes it. This only happens when you have a database mysql replication setup in a master-master setup and you have the mysql variable `binlog_format` set to `ROW`. We had this problem using Percona versions 5.6.32 & 5.7.16, but probably every Mysql version is affected. So the actual issue: we have a whole lot of products and categories, we sort the products in the categories with the position field. But when reindexing the `catalog_category_product` indexer, we noticed that the resulting positions of products in a category in the table `catalog_category_product_index` ended up being incorrect and completely out of whack. Eventually we found out this was caused by the mysql setting `binlog_format` which was set to `ROW`, which is the recommended and default setting. We then switched this to `MIXED` which solved the problem. But since a few months, we've been running into a lot of DEADLOCKS which seem to happen out of the blue, and according to our hosting partner, it was caused by the `MIXED` setting. And they advised us to switch back to `ROW`. But then we had to first figure out a solution for the incorrect product positions in categories, and then we suddenly found the [MAGETWO-60258](https://github.com/magento/magento2/search?q=MAGETWO-60258&type=Commits) commits in the github history of Magento 2.2 which had an exact description of our problem. So we've patched that solution in our 2.1 shop and switched back to `ROW` and now the problem is gone. This has been running for a week now and the initial problem is fixed by this. Hence the backport, to help people who also run into this same problem with Magento 2.1. Also: if this PR isn't allowed for some reason, I hope the description in here helps people find a solution if they run into this same problem, because this was really hard to find for us. #### Further remarks I've changed the version of this migration from 2.1.4 to 2.1.4.1, since [2.1.4](https://github.com/magento/magento2/blob/2.1.14/app/code/Magento/Catalog/etc/module.xml#L9) is already used in Magento 2.1, and the same migration in Magento 2.2 is using version [2.1.5](https://github.com/magento/magento2/blob/2.2.5/app/code/Magento/Catalog/Setup/UpgradeSchema.php#L71) for this migration. I'm not sure if there is some kind of policy for using a specific version numbering schema when backporting database migrations, so feel free to tell me if this isn't correct. Since this drops and recreates a temporary table it shouldn't cause problems when going from Magento 2.1 to 2.2 later on. It will just do the exact same action again. Then just informational, the mysql table `catalog_category_product_index_tmp` format will change from: ```sql CREATE TABLE `catalog_category_product_index_tmp` ( `category_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Category ID', `product_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Product ID', `position` int(11) NOT NULL DEFAULT '0' COMMENT 'Position', `is_parent` smallint(5) unsigned NOT NULL DEFAULT '0' COMMENT 'Is Parent', `store_id` smallint(5) unsigned NOT NULL DEFAULT '0' COMMENT 'Store ID', `visibility` smallint(5) unsigned NOT NULL COMMENT 'Visibility', KEY `CAT_CTGR_PRD_IDX_TMP_PRD_ID_CTGR_ID_STORE_ID` (`product_id`,`category_id`,`store_id`) ) ENGINE=MEMORY DEFAULT CHARSET=utf8 COMMENT='Catalog Category Product Indexer Temp Table'; ``` to: ```sql CREATE TABLE `catalog_category_product_index_tmp` ( `category_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Category ID', `product_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Product ID', `position` int(11) NOT NULL DEFAULT '0' COMMENT 'Position', `is_parent` smallint(5) unsigned NOT NULL DEFAULT '0' COMMENT 'Is Parent', `store_id` smallint(5) unsigned NOT NULL DEFAULT '0' COMMENT 'Store ID', `visibility` smallint(5) unsigned NOT NULL COMMENT 'Visibility', PRIMARY KEY (`category_id`,`product_id`,`store_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Catalog Category Product Indexer temporary table'; ``` ### Fixed Issues (if relevant) None that I could find ### Manual testing scenarios 1. Magento 2.1.12 2. Mysql master-master replication setup with `binlog_format` set to `ROW` 3. Have a category with a whole lot of products where each has a different position inside the category 4. Reindex the `catalog_category_product` indexer 5. Notice that the product positions in the `catalog_category_product_index` don't follow the positions set in the backend of Magento and thus also the sort order of products on the frontend becomes incorrect. ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",a7f9b096830f6fa94419a800509b12d0ba056cef::
https://api.github.com/repos/magento/magento2,17056,2.3-develop-PR-port-16435::2.3-develop,0,merged,Partner: Basecom::Progress: accept::Release Line: 2.3::partners-contribution::,"### Original Pull Request https://github.com/magento/magento2/pull/16435 … the autoloader on a production environment the autoloader will find more classes in its classmap. This should result in fewer file_exists calls and might increase the performance a tiny bit. As @orlangur requested, this is a backport of #15438 for Magento 2.2 ### Description Hi! This PR was triggered by some discussions over here: https://github.com/davidalger/capistrano-magento2/issues/102 When you read the Magento [documentation](https://devdocs.magento.com/guides/v2.2/performance-best-practices/deployment-flow.html) around performance best practices for deploying to a production environment, you'll see something like this: > Run the following command to preprocess and compile DI: > `bin/magento setup:di:compile` > After compilation completes, we recommend running the following command: > `composer dump-autoload -o` > This command allows Composer to rebuild the mapping to project files so that they load faster. Since the docs mention you should dump the autoloader after certain php classes got autogenerated, you would assume that the autoloader classmap file (`vendor/composer/autoload_classmap.php`) should have a mapping of those generated classes. But that isn't the case right now. This PR fixes this. This should - in theory - increase the autoloading performance ever so slightly on production environments, since the autoloader wouldn't have to go searching for files on the filesystem but would already find them in the classmap and wouldn't have to perform `file_exists` calls for those generated classes. Watch out: 1) I haven't tested this out on a real project yet. This was only done after some debugging and tinkering and reading the `vendor/composer/ClassLoader.php` file and some research on the world wide web. 2) I'm not exactly sure if this should go into the `""psr-4""`or the `""psr-0""` or the `""classmap""` section of the `""autoload""` section in the `composer.json` file. It was already suggested to put it in the `classmap` section over here: https://github.com/magento/magento2/pull/9102 but I'm not sure after reading the [composer documentation](https://getcomposer.org/doc/04-schema.md#autoload)? It seems to work in all 3 sections while testing, but I've decided to put it in the already being used `""psr-0""` section for now. 3) If this gets approved, this change will also have to go into the meta package `magento/project-community-edition` of which the sources I can't seem to find on github (unless the `composer.json` file which comes with it is somehow build using the `composer.json` file of this project?) 4) If this gets approved, it wouldn't be a bad idea to put this in the release notes of whatever version this gets released in, since the `composer.json` file of already existing projects doesn't get updated automatically after upgrading to a newer version of Magento. 5) If this gets backported all the way down to Magento 2.1, the path should become `var/generation/` ### Fixed Issues (if relevant) None that I could find ### Manual testing scenarios 1. Install Magento using composer 2. Run `bin/magento setup:di:compile` 3. Run `composer dump-autoload -o` 4. Take a look at the file `vendor/composer/autoload_classmap.php` and see if you can find a mapping to a file inside `generated/code`, you won't find any 5. Change your `composer.json` as in this PR 6. Run `composer dump-autoload -o` 7. Take a look at the file `vendor/composer/autoload_classmap.php` and see if you can find a mapping to a file inside `generated/code`, you will find some references ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",6ba6abd9a3f6637191a38fd648ced20987254680::
https://api.github.com/repos/magento/magento2,17033,move-polifill-js-code-2.2::2.2-develop,0,closed,Area: Frontend::Area: Lib/Frontend::Component: Theme::Progress: reject::Release Line: 2.2::,"### Description I investigated issue described in https://github.com/magento/magento2/issues/16568 and found that we have 2 different polyfill implementaions for localStorage and sessionStorage: 1. Added to page html (https://github.com/magento/magento2/blob/2.2-develop/app/code/Magento/Theme/view/frontend/templates/js/polyfill.phtml) 2. As part of jquery.storageapi library  - https://github.com/magento/magento2/blob/2.2-develop/lib/web/jquery/jquery.storageapi.min.js These implementation are fully different. 1st one works good, but 2nd one adds strange behavior - adds separate cookie with `ls_` prefix in name for each item that should be stored in localstorage and `ss_<some_id>_` for session storage. As result - when customer goes through website - it will add new and new cookies (because of this strange `ss_<some_id>_` prefix). For some reasons sometimes, probably because of race conditions, we're having 2nd implementation used instead of 1st one. This PR moving 1st implementation into head section (before requirejs), so it will be loaded first for sure. Also it doing **partial** backport of https://github.com/magento/magento2/pull/14318 to `2.2-develop`  branch in order not to add backward incompatible changes. ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/16568: local/session storage is mismanaged, particularly when it doesn't exist 2. https://github.com/magento/magento2/issues/7931: Unable to send the cookie. Maximum number of cookies would be exceeded 3. https://github.com/magento/magento2/issues/17195: Unable to send the cookie. Maximum number of cookies would be exceeded ### Related Pull Requests 1. https://github.com/magento/magento2/pull/10516: Update Cookie Manager library to make max cookie number configurable 2. https://github.com/magento/magento2/pull/10961: Update cookie limit to 300 ### Manual testing scenarios 1. N/A ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",c9315dc4a744165f656bafa7c42d252aeea3b2c8::88c6795e0672a53fb7b42558997c37b6edbf6306::bc10dc7469ff51917e4d1ab0722694caed758965::33a7933fb3fad20b1bc98ed3a3dbc955fb98503e::c9f67f21b5c1aba7d9ac25135be349927da7c332::
https://api.github.com/repos/magento/magento2,17001,2.1-develop-PR-port-16435::2.1-develop,0,closed,Progress: reject::,"### Original Pull Request https://github.com/magento/magento2/pull/16435 … the autoloader on a production environment the autoloader will find more classes in its classmap. This should result in fewer file_exists calls and might increase the performance a tiny bit. As @orlangur requested, this is a backport of #15438 for Magento 2.2 ### Description Hi! This PR was triggered by some discussions over here: https://github.com/davidalger/capistrano-magento2/issues/102 When you read the Magento [documentation](https://devdocs.magento.com/guides/v2.2/performance-best-practices/deployment-flow.html) around performance best practices for deploying to a production environment, you'll see something like this: > Run the following command to preprocess and compile DI: > `bin/magento setup:di:compile` > After compilation completes, we recommend running the following command: > `composer dump-autoload -o` > This command allows Composer to rebuild the mapping to project files so that they load faster. Since the docs mention you should dump the autoloader after certain php classes got autogenerated, you would assume that the autoloader classmap file (`vendor/composer/autoload_classmap.php`) should have a mapping of those generated classes. But that isn't the case right now. This PR fixes this. This should - in theory - increase the autoloading performance ever so slightly on production environments, since the autoloader wouldn't have to go searching for files on the filesystem but would already find them in the classmap and wouldn't have to perform `file_exists` calls for those generated classes. Watch out: 1) I haven't tested this out on a real project yet. This was only done after some debugging and tinkering and reading the `vendor/composer/ClassLoader.php` file and some research on the world wide web. 2) I'm not exactly sure if this should go into the `""psr-4""`or the `""psr-0""` or the `""classmap""` section of the `""autoload""` section in the `composer.json` file. It was already suggested to put it in the `classmap` section over here: https://github.com/magento/magento2/pull/9102 but I'm not sure after reading the [composer documentation](https://getcomposer.org/doc/04-schema.md#autoload)? It seems to work in all 3 sections while testing, but I've decided to put it in the already being used `""psr-0""` section for now. 3) If this gets approved, this change will also have to go into the meta package `magento/project-community-edition` of which the sources I can't seem to find on github (unless the `composer.json` file which comes with it is somehow build using the `composer.json` file of this project?) 4) If this gets approved, it wouldn't be a bad idea to put this in the release notes of whatever version this gets released in, since the `composer.json` file of already existing projects doesn't get updated automatically after upgrading to a newer version of Magento. 5) If this gets backported all the way down to Magento 2.1, the path should become `var/generation/` ### Fixed Issues (if relevant) None that I could find ### Manual testing scenarios 1. Install Magento using composer 2. Run `bin/magento setup:di:compile` 3. Run `composer dump-autoload -o` 4. Take a look at the file `vendor/composer/autoload_classmap.php` and see if you can find a mapping to a file inside `generated/code`, you won't find any 5. Change your `composer.json` as in this PR 6. Run `composer dump-autoload -o` 7. Take a look at the file `vendor/composer/autoload_classmap.php` and see if you can find a mapping to a file inside `generated/code`, you will find some references ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",f67b66adab3c84e45df473bc6391d4c49559dbe8::
https://api.github.com/repos/magento/magento2,16999,2.3-develop-PR-port-16435::2.3-develop,0,closed,duplicate::,"### Original Pull Request https://github.com/magento/magento2/pull/16435 … the autoloader on a production environment the autoloader will find more classes in its classmap. This should result in fewer file_exists calls and might increase the performance a tiny bit. As @orlangur requested, this is a backport of #15438 for Magento 2.2 ### Description Hi! This PR was triggered by some discussions over here: https://github.com/davidalger/capistrano-magento2/issues/102 When you read the Magento [documentation](https://devdocs.magento.com/guides/v2.2/performance-best-practices/deployment-flow.html) around performance best practices for deploying to a production environment, you'll see something like this: > Run the following command to preprocess and compile DI: > `bin/magento setup:di:compile` > After compilation completes, we recommend running the following command: > `composer dump-autoload -o` > This command allows Composer to rebuild the mapping to project files so that they load faster. Since the docs mention you should dump the autoloader after certain php classes got autogenerated, you would assume that the autoloader classmap file (`vendor/composer/autoload_classmap.php`) should have a mapping of those generated classes. But that isn't the case right now. This PR fixes this. This should - in theory - increase the autoloading performance ever so slightly on production environments, since the autoloader wouldn't have to go searching for files on the filesystem but would already find them in the classmap and wouldn't have to perform `file_exists` calls for those generated classes. Watch out: 1) I haven't tested this out on a real project yet. This was only done after some debugging and tinkering and reading the `vendor/composer/ClassLoader.php` file and some research on the world wide web. 2) I'm not exactly sure if this should go into the `""psr-4""`or the `""psr-0""` or the `""classmap""` section of the `""autoload""` section in the `composer.json` file. It was already suggested to put it in the `classmap` section over here: https://github.com/magento/magento2/pull/9102 but I'm not sure after reading the [composer documentation](https://getcomposer.org/doc/04-schema.md#autoload)? It seems to work in all 3 sections while testing, but I've decided to put it in the already being used `""psr-0""` section for now. 3) If this gets approved, this change will also have to go into the meta package `magento/project-community-edition` of which the sources I can't seem to find on github (unless the `composer.json` file which comes with it is somehow build using the `composer.json` file of this project?) 4) If this gets approved, it wouldn't be a bad idea to put this in the release notes of whatever version this gets released in, since the `composer.json` file of already existing projects doesn't get updated automatically after upgrading to a newer version of Magento. 5) If this gets backported all the way down to Magento 2.1, the path should become `var/generation/` ### Fixed Issues (if relevant) None that I could find ### Manual testing scenarios 1. Install Magento using composer 2. Run `bin/magento setup:di:compile` 3. Run `composer dump-autoload -o` 4. Take a look at the file `vendor/composer/autoload_classmap.php` and see if you can find a mapping to a file inside `generated/code`, you won't find any 5. Change your `composer.json` as in this PR 6. Run `composer dump-autoload -o` 7. Take a look at the file `vendor/composer/autoload_classmap.php` and see if you can find a mapping to a file inside `generated/code`, you will find some references ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",bd72ec3bac4eda196c5b122767794a9bfd92714b::
https://api.github.com/repos/magento/magento2,16631,2.1-develop-PR-port-16333::2.1-develop,0,closed,Component: Framework/View::Progress: needs update::,"### Original Pull Request https://github.com/magento/magento2/pull/16333 <!--- Thank you for contributing to Magento. To help us process this pull request we recommend that you add the following information: - Summary of the pull request, - Issue(s) related to the changes made, - Manual testing scenarios, --> <!--- Please provide a general summary of the Pull Request in the Title above --> ### Description <!--- Please provide a description of the changes proposed in the pull request. Letting us know what has changed and why it needed changing will help us validate this pull request. --> Trying to backport https://github.com/magento/magento2/pull/11368 i've found that @phoenix128 fixed the same issue in https://github.com/magento/magento2/commit/1413d65946c2e3e076a0605d2e5c739e0b339d83 This pull request only add test coverage to metadata title ### Fixed Issues (if relevant) <!--- If relevant, please provide a list of fixed issues in the format magento/magento2#<issue_number>. There could be 1 or more issues linked here and it will help us find some more information about the reasoning behind this change. --> ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",c58c12ae765de51c840983dc4172670286377431::
https://api.github.com/repos/magento/magento2,16590,int-currency-format-2.2::2.2-develop,0,merged,Component: Framework/Locale::Progress: accept::Release Line: 2.2::,"<!--- Thank you for contributing to Magento. To help us process this pull request we recommend that you add the following information: - Summary of the pull request, - Issue(s) related to the changes made, - Manual testing scenarios, --> <!--- Please provide a general summary of the Pull Request in the Title above --> ### Description <!--- Please provide a description of the changes proposed in the pull request. Letting us know what has changed and why it needed changing will help us validate this pull request. --> This is backported magento/magento2#16588 and related to magento/magento2#15909. After correct fixes in magento/magento2#15909 (magento/magento2#15540) client-side formatting starts corrupt prices in currencies without minor units if price amount is less then number group size (usually equal to 3 numbers). ### Fixed Issues (if relevant) <!--- If relevant, please provide a list of fixed issues in the format magento/magento2#<issue_number>. There could be 1 or more issues linked here and it will help us find some more information about the reasoning behind this change. --> 1. magento/magento2#11717: Wrong price amount on a product page ### Manual testing scenarios <!--- Please provide a set of unambiguous steps to test the proposed code change. Giving us manual testing scenarios will help with the processing and validation process. --> STR: 1. Install Magento 2. Set USD as a base currency 3. Set JPY as display currency (it also should be enabled as available currency) 4. Add product with price 0.01 USD 5. Add currency rate as 110 JPY for 1 USD 6. Open product page AC: price 0,001 is displayed (wrongly added 0 to have group separator visible) ER: price 1 is displayed (no decimal part, no preceding 0) ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",e1db595425a207779a04ca83f36a60549f517ec5::
https://api.github.com/repos/magento/magento2,16550,2.1-braintree-backport::2.1-develop,0,merged,Component: Braintree::Progress: accept::Release Line: 2.1::,"### Description This PR as a backport for https://github.com/magento/magento2/pull/16458 Add missing `showInStore` attributes on Braintree configuration as there are some values that are changeable on store view (title, descriptors, merchant name override) and are not accessible from store view level due to the missing store view level permission for the containing group. Braintree configuration offers the possibility to change following fields on store view level: * Basic Braintree Settings => Title * PayPal through Braintree => Title * PayPal through Braintree => Override Merchant Name * Dynamic Descriptors => Name * Dynamic Descriptors => Phone * Dynamic Descriptors => URL All the fields are correctly shown in default config and on website level, but when changing to storeview, nothing is shown at all when expanding Braintree section. ### Fixed Issues (if relevant) - ### Manual testing scenarios 1. Go to Stores => Configuration => Sales => Payment Methods 2. Click ""Configure"" next to ""Braintree"" under ""Recommended Solutions"" 3. All groups are shown 4. Switch from ""Default Config"" to a random Store View 5. Repeat step 2 - no groups are shown After applying the PR, the above mentioned fields in their respective groups are shown. ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green) ### Original PR https://github.com/magento/magento2/pull/16458",6d79c64e90a84b81efb9f3c61aad649a79372171::
https://api.github.com/repos/magento/magento2,16435,optimize-composer-autoloader-a-bit-more-2.2::2.2-develop,0,merged,Release Line: 2.2::,"… the autoloader on a production environment the autoloader will find more classes in its classmap. This should result in fewer file_exists calls and might increase the performance a tiny bit. As @orlangur requested, this is a backport of #15438 for Magento 2.2 ### Description Hi! This PR was triggered by some discussions over here: https://github.com/davidalger/capistrano-magento2/issues/102 When you read the Magento [documentation](https://devdocs.magento.com/guides/v2.2/performance-best-practices/deployment-flow.html) around performance best practices for deploying to a production environment, you'll see something like this: > Run the following command to preprocess and compile DI: > `bin/magento setup:di:compile` > After compilation completes, we recommend running the following command: > `composer dump-autoload -o` > This command allows Composer to rebuild the mapping to project files so that they load faster. Since the docs mention you should dump the autoloader after certain php classes got autogenerated, you would assume that the autoloader classmap file (`vendor/composer/autoload_classmap.php`) should have a mapping of those generated classes. But that isn't the case right now. This PR fixes this. This should - in theory - increase the autoloading performance ever so slightly on production environments, since the autoloader wouldn't have to go searching for files on the filesystem but would already find them in the classmap and wouldn't have to perform `file_exists` calls for those generated classes. Watch out: 1) I haven't tested this out on a real project yet. This was only done after some debugging and tinkering and reading the `vendor/composer/ClassLoader.php` file and some research on the world wide web. 2) I'm not exactly sure if this should go into the `""psr-4""`or the `""psr-0""` or the `""classmap""` section of the `""autoload""` section in the `composer.json` file. It was already suggested to put it in the `classmap` section over here: https://github.com/magento/magento2/pull/9102 but I'm not sure after reading the [composer documentation](https://getcomposer.org/doc/04-schema.md#autoload)? It seems to work in all 3 sections while testing, but I've decided to put it in the already being used `""psr-0""` section for now. 3) If this gets approved, this change will also have to go into the meta package `magento/project-community-edition` of which the sources I can't seem to find on github (unless the `composer.json` file which comes with it is somehow build using the `composer.json` file of this project?) 4) If this gets approved, it wouldn't be a bad idea to put this in the release notes of whatever version this gets released in, since the `composer.json` file of already existing projects doesn't get updated automatically after upgrading to a newer version of Magento. 5) If this gets backported all the way down to Magento 2.1, the path should become `var/generation/` ### Fixed Issues (if relevant) None that I could find ### Manual testing scenarios 1. Install Magento using composer 2. Run `bin/magento setup:di:compile` 3. Run `composer dump-autoload -o` 4. Take a look at the file `vendor/composer/autoload_classmap.php` and see if you can find a mapping to a file inside `generated/code`, you won't find any 5. Change your `composer.json` as in this PR 6. Run `composer dump-autoload -o` 7. Take a look at the file `vendor/composer/autoload_classmap.php` and see if you can find a mapping to a file inside `generated/code`, you will find some references ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",1dd90a55ba3b9321fd09e6d4c66b6cd652e11650::
https://api.github.com/repos/magento/magento2,16396,fix-prepare-shipment-items-2.2::2.2-develop,0,closed,Component: Sales::Partner: MageSpecialist::Progress: accept::Progress: needs update::Release Line: 2.2::partners-contribution::,"<!--- Thank you for contributing to Magento. To help us process this pull request we recommend that you add the following information: - Summary of the pull request, - Issue(s) related to the changes made, - Manual testing scenarios, --> <!--- Please provide a general summary of the Pull Request in the Title above --> ### Description <!--- Please provide a description of the changes proposed in the pull request. Letting us know what has changed and why it needed changing will help us validate this pull request. --> Trying to fix the issue of [MSI #1335](https://github.com/magento-engcom/msi/issues/1335) we discovered a problem related to the deleted order items in the `prepareItems()` method inside the `ShipmentFactory` class. I've noticed that the range of deleted order items processed by the mentioned method was too wide because it's supposed to delete only virtual and bundle items with products not shipped separately. The previous condition checked wether the product was virtual or had a parentId and not separately shipped, but this check deleted also simple products related to configurables introducing an issue with shipments for configurable products. My proposed change would check if the product is virtual or bundle (not shipped seperately) to delete from processed items. This issue doesn't have any consequence in 2.2 and 2.3 because the method `getAllItems()` of entity shipment is never used inside the core modules; but it will affect the MSI classes related to the `SourceDeductionProcessor` where this method is used to cycle the shipment items. This is the backport of this PR https://github.com/magento/magento2/pull/16004 for the `2.3-develop` ### Fixed Issues (if relevant) <!--- If relevant, please provide a list of fixed issues in the format magento/magento2#<issue_number>. There could be 1 or more issues linked here and it will help us find some more information about the reasoning behind this change. --> Fixed: [MSI #1335](https://github.com/magento-engcom/msi/issues/1335) with PR [MSI#1394](https://github.com/magento-engcom/msi/pull/1394) ### Manual testing scenarios <!--- Please provide a set of unambiguous steps to test the proposed code change. Giving us manual testing scenarios will help with the processing and validation process. --> ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",e84b48b3917eb39cc45f5cc7d3c74f563c16cafa::
https://api.github.com/repos/magento/magento2,16333,backport-11368::2.2-develop,0,merged,Cleanup::Component: Framework/View::Partner: MageSpecialist::Progress: accept::Release Line: 2.2::partners-contribution::,"<!--- Thank you for contributing to Magento. To help us process this pull request we recommend that you add the following information: - Summary of the pull request, - Issue(s) related to the changes made, - Manual testing scenarios, --> <!--- Please provide a general summary of the Pull Request in the Title above --> ### Description <!--- Please provide a description of the changes proposed in the pull request. Letting us know what has changed and why it needed changing will help us validate this pull request. --> Trying to backport https://github.com/magento/magento2/pull/11368 i've found that @phoenix128 fixed the same issue in https://github.com/magento/magento2/commit/1413d65946c2e3e076a0605d2e5c739e0b339d83 This pull request only add test coverage to metadata title ### Fixed Issues (if relevant) <!--- If relevant, please provide a list of fixed issues in the format magento/magento2#<issue_number>. There could be 1 or more issues linked here and it will help us find some more information about the reasoning behind this change. --> ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",5a0795f8799173bdbf8bc99bf1cc846ff98ec3b7::
https://api.github.com/repos/magento/magento2,16169,backport-8035::2.1-develop,0,merged,Component: Sales::Progress: accept::Release Line: 2.1::,"<!--- Thank you for contributing to Magento. To help us process this pull request we recommend that you add the following information: - Summary of the pull request, - Issue(s) related to the changes made, - Manual testing scenarios, --> <!--- Please provide a general summary of the Pull Request in the Title above --> ### Description This is a backport fix of issue #8035 for Magento 2.1 - join extension attributes not added to orders within the Magento API ### Fixed Issues (if relevant) 1. magento/magento2#8035: Join extension attributes not added to order (fixed in 2.2 - this pull backports the fix to 2.1) ### Manual testing scenarios 1. Add extension attributes to the Magento\Sales\Api\Data\OrderInterface - that use a table join 2. Query the order listing to - confirming the extension_attributes appear alongside the order data ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [x] All automated tests passed successfully (all builds on Travis CI are green)",032c82d98b80e509ab8a63f93b6e169f37ce113d::27bdf61e7c94d7bda0586094ebeca31fa7a60cc7::
https://api.github.com/repos/magento/magento2,15776,2.1-customer-section-headers::2.1-develop,0,merged,Component: Customer::Partner: Atwix::Progress: accept::Release Line: 2.1::partners-contribution::,### Description Within a scope of MAGETWO-82057 there were additional headers added to the customer section load in order to avoid sensitive data caching. This PR contains the solution's backport for 2.1.x versions. Improvements from https://github.com/magento/magento2/pull/14176 are also included,07f4c535c0e9352be8462ec35c7c7ed09aaa1550::
https://api.github.com/repos/magento/magento2,15716,2.1-Fix-typos::2.1-develop,0,merged,Area: Frontend::Community Insider: Cream::Component: Sales::Component: Ui::Progress: accept::Release Line: 2.1::community-insider-contribution::,### Description Fixed the following typos: - Changed disply to display - Changed addtional to additional - Changed beging to begin This is a backport of PR https://github.com/magento/magento2/pull/15695,e0544c2c30a539241164cadf9610e722f4ee1695::
https://api.github.com/repos/magento/magento2,15715,2.2-Fix-typos::2.2-develop,0,merged,Area: Frontend::Cleanup::Community Insider: Cream::Component: Sales::Component: Setup::Component: Ui::Progress: accept::Release Line: 2.2::community-insider-contribution::,### Description Fixed the following typos: - Changed disply to display - Changed addtional to additional - Changed beging to begin This is a backport of PR #15695,899146a7a98fede4fc1fa96c17bed9fc560f65ac::
https://api.github.com/repos/magento/magento2,15522,2.1-unset-quote-recollect::2.1-develop,0,merged,Component: Quote::Partner: Atwix::Progress: accept::Release Line: 2.1::partners-contribution::,"Original PR: https://github.com/magento/magento2/pull/14719 ### Description In order to prevent collecting totals a few times without necessity, the trigger for recollecting totals should be set to 0 right after the recollecting. Also, backported fix from the 2.2 version. ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/9580 : Quote Attribute trigger_recollect causes a timeout",bddb976d9a13da3a2c40301e31791469a0e62669::
https://api.github.com/repos/magento/magento2,15438,optimize-composer-autoloader-a-bit-more::2.3-develop,0,closed,Progress: on hold::,"… the autoloader on a production environment the autoloader will find more classes in its classmap. This should result in fewer file_exists calls and might increase the performance a tiny bit. ### Description Hi! This PR was triggered by some discussions over here: https://github.com/davidalger/capistrano-magento2/issues/102 When you read the Magento [documentation](https://devdocs.magento.com/guides/v2.2/performance-best-practices/deployment-flow.html) around performance best practices for deploying to a production environment, you'll see something like this: > Run the following command to preprocess and compile DI: > `bin/magento setup:di:compile` > After compilation completes, we recommend running the following command: > `composer dump-autoload -o` > This command allows Composer to rebuild the mapping to project files so that they load faster. Since the docs mention you should dump the autoloader after certain php classes got autogenerated, you would assume that the autoloader classmap file (`vendor/composer/autoload_classmap.php`) should have a mapping of those generated classes. But that isn't the case right now. This PR fixes this. This should - in theory - increase the autoloading performance ever so slightly on production environments, since the autoloader wouldn't have to go searching for files on the filesystem but would already find them in the classmap and wouldn't have to perform `file_exists` calls for those generated classes. Watch out: 1) I haven't tested this out on a real project yet. This was only done after some debugging and tinkering and reading the `vendor/composer/ClassLoader.php` file and some research on the world wide web. 2) I'm not exactly sure if this should go into the `""psr-4""`or the `""psr-0""` or the `""classmap""` section of the `""autoload""` section in the `composer.json` file. It was already suggested to put it in the `classmap` section over here: https://github.com/magento/magento2/pull/9102 but I'm not sure after reading the [composer documentation](https://getcomposer.org/doc/04-schema.md#autoload)? It seems to work in all 3 sections while testing, but I've decided to put it in the already being used `""psr-0""` section for now. 3) If this gets approved, this change will also have to go into the meta package `magento/project-community-edition` of which the sources I can't seem to find on github (unless the `composer.json` file which comes with it is somehow build using the `composer.json` file of this project?) 4) If this gets approved, it wouldn't be a bad idea to put this in the release notes of whatever version this gets released in, since the `composer.json` file of already existing projects doesn't get updated automatically after upgrading to a newer version of Magento. 5) If this gets backported all the way down to Magento 2.1, the path should become `var/generation/` ### Fixed Issues (if relevant) None that I could find ### Manual testing scenarios 1. Install Magento using composer 2. Run `bin/magento setup:di:compile` 3. Run `composer dump-autoload -o` 4. Take a look at the file `vendor/composer/autoload_classmap.php` and see if you can find a mapping to a file inside `generated/code`, you won't find any 5. Change your `composer.json` as in this PR 6. Run `composer dump-autoload -o` 7. Take a look at the file `vendor/composer/autoload_classmap.php` and see if you can find a mapping to a file inside `generated/code`, you will find some references ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",468afe5e53e5c158a1f31ce8ba6c3c54f81335cf::
https://api.github.com/repos/magento/magento2,15254,experius-2.1-feature-category-assign-multiple-products::2.1-develop,0,closed,Progress: on hold::,…ality <!--- Provide a general summary of the Pull Request in the Title above --> backport of https://github.com/magento/magento2/pull/15027 ### Description <!--- Provide a description of the changes proposed in the pull request --> This features makes it easier to assign multiple products through the API so there only needs te be done one API call instead of for every single product. ### Manual testing scenarios <!--- Provide a set of unambiguous steps to test the proposed code change --> 1. Create several Products 2. Assign Multiple Products to a Category through a single API Request New API endpoints: ![image](https://user-images.githubusercontent.com/6040343/39678059-f6bb2df0-5185-11e8-85fb-230be72d8a68.png) ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green),f4b95aa8f49a67127c317c685e26acc3106ccc44::
https://api.github.com/repos/magento/magento2,14665,backport-pull-13802::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"**Original Pull Request** This is a backport of [ #13802](https://github.com/magento/magento2/pull/13802) for Magento 2.1 **Description** Fix showing product name with special chars in mini cart. This code was used in html template to show product name <a data-bind=""attr: {href: product_url}, text: product_name""></a> I replaced it with: <a data-bind=""attr: {href: product_url}, html: product_name""></a> **Fixed Issues (if relevant)** magento/magento2#13652: Issue in product title with special chars in mini cart **Manual testing scenarios** Create a product titled Fusion Backpack ™ Go to frontend, the product title comes up correctly as Fusion Backpack ™ then add it to cart Open the mini cart - product title should be display correctly as Fusion Backpack ™ **Contribution checklist** Pull request has a meaningful description of its purpose All commits are accompanied by meaningful commit messages All new or changed code is covered with unit/integration tests (if applicable) All automated tests passed successfully (all builds on Travis CI are green)",ac083d49e4e1541851685fef4147b329c5e53f17::
https://api.github.com/repos/magento/magento2,14349,backport-pr-10445::2.1-develop,0,merged,Event: distributed-cd::Progress: accept::Release Line: 2.1::,"Don't only replace \' but also \"" with ' and "" (cherry picked from commit a150d2485ec17687b83a444fa7ba4cac528e55f2) Concatenate JS translations before translating them This enables support for $.mage.__(""concatenating"" + ""strings""); (cherry picked from commit c79b583422d994433f613355cf2e2ffb22c8d4e1) +: put all regexes in cdata tags (cherry picked from commit f9304714d9ba0959150c09be3eeb7670a776d342) Prevent translation string lookup from breaking on \' or \"" with a negative lookbehind (cherry picked from commit 87d4ba475f46c86ab4473f2d66a6c9c5ccf4456c) Support $.mage.__('') as well as jQuery.mage.__('') (cherry picked from commit 5ae47df31fc186b60053e7318a1bcb5091902239) <!--- Provide a general summary of the Pull Request in the Title above --> ### Description This is a backport of https://github.com/magento/magento2/pull/10445 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/7403: JS Translation Regex leads to unexpected results and untranslatable strings ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",893e4f2f6b3e49a0b9c89fd312d79b98ae961daf::
https://api.github.com/repos/magento/magento2,14219,backport-pr-8772::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,magento/magento2#3882: - An XML comment node as parameter in widget.xml fails with fatal error - Fixed also for comments in containers node (cherry picked from commit 51da3d497fc78832a917120ccdf2292af4f82f3a) MAGETWO-65436: [GitHub][PR] magento/magento2#3882 magento/magento2#8772 (cherry picked from commit 03c9c20f75c1bb4f4e56a2f54c1c5b442cad5e62) <!--- Provide a general summary of the Pull Request in the Title above --> ### Description This is a backport of https://github.com/magento/magento2/pull/8772 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/3882: An XML comment node as parameter in widget.xml fails with fatal error 2. https://github.com/magento/magento2/pull/7439: Allow comments in widget.xml parameters ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green),80f1e92162fa26166a813ec1326e7c78887c6025::
https://api.github.com/repos/magento/magento2,14151,backport/2.1-fix-curl-json-post::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"This is a backport of 8373 (MAGETWO-64313) for Magento 2.1 that fixed issue #3489 ### Description Using \Magento\Framework\HTTP\Client\Curl doesn't support json posts, because it used only $this->curlOption(CURLOPT_POSTFIELDS, http_build_query($params)); ### Manual testing scenarios As explained in #8373 That functionality doesn't break backward compatibility will be very useful for most projects.",a676af86fe11a6bc1ecf4e46fe413afeef4ac14f::
https://api.github.com/repos/magento/magento2,14117,backport/2.1-MAGETWO-59258-zip-codes::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"This is a backport of MAGETWO-59258 for Magento 2.1 that fixed issue #6694 ### Description When trying to override module-directory/etc/zip_codes.xml from a local module, only the last code of a country gets included. ### Manual testing scenarios As explained in #6694 Please pay attention that current PR was created without tests from original task. Unfortunately integration tests were changed a lot.",4ddb33631c67f2f3e128eb87f0188d1d102a0ca2::
https://api.github.com/repos/magento/magento2,14115,backport/2.1-MAGETWO-71697-saving-address-with-empty-street::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,This is a backport of PR #10582 (MAGETWO-71697) for Magento 2.1 ### Description The changes affect address street data preparation to guarantee that street array will be converted to the string. ### Manual testing scenarios As explained in #10582,a50db9035d8c9cf89e127b30882e6fc6aef6ec88::
https://api.github.com/repos/magento/magento2,14098,backport/2.1-MAGETWO-64250-gallery-allowfullscreen::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,### Description This is a backport of issue MAGETWO-64250 for Magento 2.1 ### Fixed Issues (if relevant) #5808: Problem on mobile when catalog gallery allowfullscreen is false ### Manual testing scenarios As explained in #5808,ab695e07f14d2176f815371e5cadd33469815923::
https://api.github.com/repos/magento/magento2,14034,fix/backport-remove-not-used-template::2.3-develop,0,merged,Progress: accept::Release Line: 2.3::,"### Description Hello, This is a backport of the [#14030](https://github.com/magento/magento2/pull/14030) where not used template was deleted. ### Fixed Issues (if relevant) N/A ### Manual testing scenarios N/A ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",afd2daa7535de1a5075801c00d3b77cd784e7f1b::
https://api.github.com/repos/magento/magento2,14032,fix/backport-remove-not-used-variable-from-template::2.3-develop,0,merged,Progress: accept::Release Line: 2.3::,### Description This is the backport of [#14026](https://github.com/magento/magento2/pull/14026) where not used variable was removed from the tax template. ### Fixed Issues (if relevant) N/A ### Manual testing scenarios N/A ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green),312f57f3b97983157fd043da026bc76cd8f43f93::
https://api.github.com/repos/magento/magento2,13987,2.1-develop::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"<!--- Provide a general summary of the Pull Request in the Title above --> ### Description <!--- Provide a description of the changes proposed in the pull request --> This is backport of #13750 ### Fixed Issues (if relevant) <!--- Provide a list of fixed issues in the format magento/magento2#<issue_number>, if relevant  --> 1. magento/magento2#<issue_number>: Issue title 2. ... ### Manual testing scenarios <!--- Provide a set of unambiguous steps to test the proposed code change --> 1. ... 2. ... ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",4069f8d4e5b131f07b06c65ce0ec7320e02fc67d::d14ab70861480cbecbff0b806782ca316add6c58::dc6503df3b86f00cfca6f1b89cb58a8df136fddf::
https://api.github.com/repos/magento/magento2,13980,backport-pull-13777::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"### Description This is the backport of #13777 ### Fixed Issues (if relevant) <!--- Provide a list of fixed issues in the format magento/magento2#<issue_number>, if relevant  --> 1. magento/magento2#13315: I ""Payment Methods"" step looks bad on mobile ### Manual testing scenarios 1. Go to frontend, add some product to shopping cart on mobile (or in iphone emulation mode on chrome) 2. Go to Checkout, fill ""shipping"" step, click ""Next"" button 3. See ""Payment Methods"" block 4. Step title heading ""Payment Method"" should be correctly aligned with other elements in this section ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",17a707a15532897920beee2e9f074dd1e103ef55::
https://api.github.com/repos/magento/magento2,13977,backport-pr-10768-for-2.2::2.2-develop,0,merged,Progress: accept::Release Line: 2.2::,"…o's. (cherry picked from commit c4da890ed291ba5333a3871a4098d04ea58d255c) ### Description This is a backport of https://github.com/magento/magento2/pull/10768 for Magento 2.2 This was also fixed in Magento 2.1 in: https://github.com/magento/magento2/pull/10748 But due to the fact that the Magento 2.2 branch was closed for new changes at that time (because 2.2.0 was close to being released), this was somewhat forgotten, so here I'm trying to streamline the code in between [2.1](https://github.com/magento/magento2/blob/2.1.12/app/code/Magento/ProductVideo/view/adminhtml/web/js/get-video-information.js#L306), [2.2](https://github.com/magento/magento2/blob/2.2.3/app/code/Magento/ProductVideo/view/adminhtml/web/js/get-video-information.js#L305) and [2.3](https://github.com/magento/magento2/blob/786e0e6/app/code/Magento/ProductVideo/view/adminhtml/web/js/get-video-information.js#L305) ### Fixed Issues (if relevant) There currently isn't an issue, it's just streamlining the code. ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",156b0f33b9e469ed6fde82b2399f0e43e3366cdd::
https://api.github.com/repos/magento/magento2,13949,hotfix/fix-cli-namespace::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"### Description Fixes misnamed namespace in Magento\Cron\Observer\ProcessCronQueueObserver.php by lower-casing ""CLI"" Instantiating this class and running execute() will cause a php fatal error because it cannot find the class `Magento\Framework\Console\CLI`: ![image](https://user-images.githubusercontent.com/6549623/36955193-098ceb7a-1ff5-11e8-8290-b700f101639b.png) I think this wasn't backported to [v2.1.x](https://github.com/magento/magento2/blob/2.1-develop/app/code/Magento/Cron/Observer/ProcessCronQueueObserver.php#L12) yet. I see this fixed in [v2.2.x](https://github.com/magento/magento2/blob/2.2-develop/app/code/Magento/Cron/Observer/ProcessCronQueueObserver.php#L13) and [v2.3.x](https://github.com/magento/magento2/blob/2.3-develop/app/code/Magento/Cron/Observer/ProcessCronQueueObserver.php#L13). Couldn't find any open PRs for this either.",06bdc2b3b873c2d59d7dd4d27ecb4e4d16ed22a8::
https://api.github.com/repos/magento/magento2,13913,2.3-backgroundColor-param-type-fix::2.3-develop,0,closed,,"### Description `\Magento\Framework\Image::backgroundColor` is expecting `null|array` as valid parameter types. In `\Magento\Swatches\Helper\Media::setupImageProperties` a string `'#FFF'` is passed into `backgroundColor` which is not valid, and could cause issues depending on how the image adapter used decides to interpret this. The goal of this fix is to pass along the correct and expected type, which in this case is going to be an array of RGB values to produce the intended end result which is a white background. This can also be seen on `2.2-develop` and `2.1-develop`, which this can easily be backported to as needed. ### Fixed Issues (if relevant) ### Manual testing scenarios ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",ef0de42314ff01ca093c21973c5ff6db7218bc3c::7b2431f718a19a35ee7302364c95ba0def3121d8::40ddfd0a2ec7624e84989aeb3e235ab6e3cf842c::8e777dd1d9359be5e7c16deb74016fc9e7c0fcf6::
https://api.github.com/repos/magento/magento2,13896,2.1-develop::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"Backport MAGETWO-59112 to 2.1.x ### Description Backport MAGETWO-59112 to 2.1.x ### Fixed Issues (if relevant) Invoice Address formating Issue ### Manual testing scenarios <!--- Provide a set of unambiguous steps to test the proposed code change --> 1. ... 2. ... ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [x] All automated tests passed successfully (all builds on Travis CI are green) Please, remove 'stable: no' tag and try to run test with backported fix.::Please, remove 'stable: no' tag and try to run test with backported fix.::Please, remove 'stable: no' tag and try to run test with backported fix.::Please, unskip test and try to run it.::Please, unskip test and try to run it.::OK, let me try that.::",abd24022b9f24e40185db73fdbfc35b5daa6bdf3::b19a484947e7ae9b2bff0b94f0f650e5a6c3d56c::900b46a29b11919e695b97d91bc30029bd61bd5b::443818b1a4d6205817765c9234097e0aeba6dfbd::19cf917fe00b2a54ad70b92bdf27d477281fc5e4::2d37305726f7925a6aa9da702513fe72588bce87::0b9e7eaa6221abe14225ea1433a83eb795d75287::febee6ed2e5d1607cfb433af246c0a6f1bdfc474::1cafd7cb2b0762c831fc3b53479b955f378efb16::0e9764779aff438197d2ebbf9c53b600eb5c25b1::c790422191c3b1c2fb8a0cdabb931520d3faadf1::adb3020454356d90d15005b7d7c10a0a14dcd357::fefdabe324cff9d1e08003f5ce4e80ad1f7b27ee::71e9d15fda9d8415c3f47c73f3a19a1161e7e999::d19a25742983c14bfa3edc19e16e6868d53cc7d8::5d07e6e76ed0b9d5b62714caaa30ae4e95468612::
https://api.github.com/repos/magento/magento2,13849,BACKPORT-MAGETWO-70726::2.1-develop,0,closed,Release Line: 2.1::help wanted::,"<!--- Provide a general summary of the Pull Request in the Title above --> ### Description This is a backport of branch [MAGETWO-70726](https://github.com/magento/magento2/commit/e71416c23435e3f22dbd472a3510326c0f2dd14e) Fixes 404 issues when switching stores on sub-category level. ### Fixed Issues (if relevant) <!--- Provide a list of fixed issues in the format magento/magento2#<issue_number>, if relevant  --> 1. magento/magento2#5416:  Store View Language switch leads to 404 on some cases ### Manual testing scenarios <!--- Provide a set of unambiguous steps to test the proposed code change --> 1. Create two stores 2. Create categories with sub categories. 3. Make sure the url-keys are different on each category 4. Navigate to a sub category 5. Switch stores. ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",dc6326256bcb0ea1df9e28519b09e0ab6f800e27::a4a585654bd97fc7f40ab635da308def75b09c96::a378ed99784737f84f94d332fe52696f768974de::984dc0381e52e5befe0aa5fb41900fec1b8b7f6e::92e01df385131e5567d3caf688c596ffb4f17b5b::ed82cf73664398d18bb62b439192d5a90cefe445::ca89e081285b67e8373ab9fa270ca6ac5245d40a::
https://api.github.com/repos/magento/magento2,13687,proposition-to-change-minify-exclude-configurations::2.3-develop,0,merged,Progress: accept::Release Line: 2.3::,"### Description This is a first proposition at changing how the configuration value `minify_exclude` can be used. I have the feeling Magento's purpose of this configuration value was to be able to be used in multiple modules. But currently this is not possible, since it is a simple value in the xml config. Which means that when multiple modules define this configuration, the value of the last module in the sequence wil be used. I think Magento's purpose was to make this configuration mergeable, which it currently isn't. Concrete example, module A defines: ``` <config> <default> <dev> <js> <minify_exclude> /regex1/ </minify_exclude> </js> <css> <minify_exclude> /regex1/ </minify_exclude> </css> </dev> </default> </config> ``` and module B defines: ``` <config> <default> <dev> <js> <minify_exclude> /regex2/ </minify_exclude> </js> <css> <minify_exclude> /regex2/ </minify_exclude> </css> </dev> </default> </config> ``` Then the result of this should be that these values get merged, but now they are overwritten by one of the two modules and only `/regex1/` or `/regex2/` is used depending on which module is loaded as last. In practice, I've encountered modules which add a single line to this configuration, which then removes the default `/tiny_mce/` regex which in turn causes the wysiwyg fields in the backend to no longer work. This happens because the values of xml nodes are overwritten and not merged when identical nodes are encountered. The proposition here, is to add a bit more structure to the xml, and to define a node per value, where each node name should be unique as to allow them to be merged. The current solution to this problem which is circulating is a workaround and not very ""user friendly"" for developers to implement: https://magento.stackexchange.com/a/198480/2911 Some other remarks: - I created this PR against the `2.3-develop` branch as this introduces a backwards incompatible change and this PR should *not* be backported to an older version of Magento. - Is it somehow possible that these configuration values are stored in the database? If yes: then we should add an upgrade script as well, to change those database values to the new format. - If this gets accepted, this should be clearly noted in the release notes, so that developers are aware of this change - I'm pretty sure some tests will fail, and I'll do my best to fix them, but some help might be needed, and maybe some extra tests should be added to verify that the merging of this configuration actually works I'm open to remarks or other ideas to improve this! :) ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/11577: TinyMCE (WYSIWYG) doesn't work in admin when JS minify is enabled ### 3rd party modules which run against this problem: - https://github.com/Adyen/adyen-magento2/pull/213 - https://github.com/magespecialist/m2-MSP_ReCaptcha/issues/21 - https://github.com/Magenerds/PageDesigner/issues/17 - ... ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green) getValue returns string. Why don't you exploding this string like it was in original implementation? Looks like it's an error.::Hi @alexeya-ven `getValue` doesn't always return a string, the return value is being defined as [`mixed`](https://github.com/magento/magento2/blob/231709b/lib/internal/Magento/Framework/App/Config/ScopeConfigInterface.php#L27) In this case it returns an array instead of a string, because an extra level of nodes was added in the xml tree. So it's no longer a long string which could consist of multiple lines. But zero, one or multiple xml nodes instead. By then using `array_values`, I'm getting the contents of those xml nodes which gives us an array of strings again, like the initial implementation did (which used `explode`). The idea was to make this configuration mergeable so you can add multiple exclusions from different modules, which wasn't possible before, one module overwrote the configuration of another module. I hope this makes it a bit more clear?::",d1f1252ccbb8d1dc132e9596f30a2acb8994d35f::
https://api.github.com/repos/magento/magento2,13550,backport-magetwo-84006::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,…e to 'text/plain' #12310 (cherry picked from commit 2c3cd64b7b5aad670ca0eaac06112833a4a85437) ### Description This is a backport of https://github.com/magento/magento2/pull/12310 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/13214: Not a correct displaying for Robots.txt ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green),0553ebc06c8c1dadadb67ae08a29a922cfa5719d::
https://api.github.com/repos/magento/magento2,13549,backport-magetwo-80198::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"(cherry picked from commit b73d5130cd0e2ddd5d8fd5b5cf3d66f9b3d77fd4) ### Description This is a backport of https://github.com/magento/magento2/pull/10575 for Magento 2.1 Watch out: I wasn't able to port over the test introduced in the above commit, since the file `dev/tests/js/jasmine/tests/app/code/Magento/Ui/base/js/form/element/multiselect.test.js` doesn't exist in the `2.1-develop` branch. ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/10565: Magento ver. 2.1.8 New Product with Custom attribute set not working ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",d95e15c3f12edb77c39437f84187844ffa6b0fd8::
https://api.github.com/repos/magento/magento2,13548,backport-magetwo-71545::2.1-develop,0,closed,Progress: needs update::Release Line: 2.1::,…ontent-Type to Ajax responses in the Magento_UI module. #10521 (cherry picked from commit ddfc01e7ca9d2d6709acdd85aa9860543428172d) ### Description This is a backport of https://github.com/magento/magento2/pull/10521 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/pull/10521: Set correct Content-Type header for ajax responses in the Magento_UI module. 2. https://github.com/magento/up-for-grabs/issues/1: Newrelic Ignore Transaction ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green),4c45cd8074e92a3eac9b03fab2f05fa3637438fe::5257492de3565081bdebd11bfc4bb5e58d1648b9::
https://api.github.com/repos/magento/magento2,13546,backport-pr-8246::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,…t field in UI component form (cherry picked from commit ca9e33f6b136a1a808c3477a5a470faf0c0d9d2f) Use underscore to fetch selected values as array (cherry picked from commit 16170ce9b56835cf685abf493ad8d96da1038e80) ### Description This is a backport of https://github.com/magento/magento2/pull/8246 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/7723: Catalog rule contains-condition not saving multiple selection in 2.1.2 ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green),a1147258e9cd1ca30d39a42ae15f26c26c660189::
https://api.github.com/repos/magento/magento2,13545,backport-pr-5028::2.1-develop,0,merged,Release Line: 2.1::,…rint page (cherry picked from commit 702a6d6e634d2ba8430544b41815b4bbd488d55e) ### Description This is a backport of https://github.com/magento/magento2/pull/5028 for Magento 2.1 ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green),53d3ba2f9df07befcd1eb9301ee33c0c09b88879::
https://api.github.com/repos/magento/magento2,13543,backport-magetwo-69379::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,… make checkbox of agreements more unique #6207 #9717 (cherry picked from commit 14b9b9813c9a16c0c45505885503cfb71bc4eb8d) ### Description This is a backport of MAGETWO-69379 for Magento 2.1 (see https://github.com/magento/magento2/pull/9717) ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/6207: Checkbox IDs for Terms and Conditions should be unique in Checkout ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green),6ec9e2244f09ed67d14fee675f79aa8e93ef6b72::
https://api.github.com/repos/magento/magento2,13539,backport-pr-1895-attempt-3::2.1-develop,0,closed,Area: Frontend::Component: AdminNotification::Component: Backend::Component: Braintree::Component: Bundle::Release Line: 2.1::,"### Description This is a backport of https://github.com/magento/magento2/pull/1895 for Magento 2.1 I started with cherry picking this commit: https://github.com/magento/magento2/commit/a4341625abdf4321849b4c318abd20eece843856 (since it contains some extra fixes above the PR referenced above) and fixed a bunch of merge conflicts. Then ran the new static test introduced in the above commit, which revealed two more files which needed fixing, and fixed those two in a separate commit (curiously enough they were fixed in the initial PR by @davidalger, but were not included in the merge commit from @vrann) Please be very careful when reviewing this, a lot of files have changed! I'm not exactly sure about the changes in the `composer.json` files, but since they were included in the commit from @vrann, I also included them. ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/7273: Remember me template is not loaded from the original module 2. https://github.com/magento/magento2/issues/1287: setting target Module Name when generating a block 3. https://github.com/magento/magento2/pull/11004: fix for lost template when creating a preference for Magento\Checkout\Block\Cart\Item\Renderer ... ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",766edbfaff40808f9a830e664dc6b69f6df03466::29430138b17a94ecffdae16fad717616649e7b86::
https://api.github.com/repos/magento/magento2,13532,backport-pr-11169::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"…e when other language used (cherry picked from commit f9562f1530a83560c4621ca77b8f78ad482080e5) ### Description This is a backport of https://github.com/magento/magento2/pull/11169 for Magento 2.1 We saw the word `none` showing up on certain product detail pages in the frontend after upgrading from 2.1.9 to 2.1.11. Also when you change the admin label of a certain attribute to `none`, it would not show up on the frontend, while it should show up. This overrides the changes from https://github.com/magento/magento2/pull/10932 which were not good enough to fix the issue. ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/10738: Empty attribute label is displayed on product page when other language used. ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",00f29c07cb08921009297594758da79d0850f05a::
https://api.github.com/repos/magento/magento2,13437,Add-fallback-for-Product_links-position-attribute::2.3-develop,0,merged,Component: Catalog::Progress: accept::Release Line: 2.3::,<!--- Provide a general summary of the Pull Request in the Title above --> ### Description This is backport of https://github.com/magento/magento2/pull/12650 + https://github.com/magento/magento2/pull/13436 to 2.3-develop branch ### Fixed Issues (if relevant) N/A ### Manual testing scenarios See https://github.com/magento/magento2/pull/12650 ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green),e765098d6604474ead95006a1c24d1e376fb7452::d83c90a018cec1a45d07182a0374142f1358a8f7::
https://api.github.com/repos/magento/magento2,13417,backport/stock-status-filter-fix-for-configurable-products::2.3-develop,0,merged,Progress: accept::Release Line: 2.3::,### Description This is the backport of the [#12936](https://github.com/magento/magento2/pull/12936) where next issue was fixed: when a configurable product has 2 options and one of the values of this option is out-of-stock but enabled it will be visible as in stock and can be selected. It will not be added to cart but cause incorrect behaviour. ### Fixed Issues (if relevant) N/A ### Manual testing scenarios As explained in [#12936](https://github.com/magento/magento2/pull/12936) ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [x] All automated tests passed successfully (all builds on Travis CI are green),d9111b0cac5d197962b7a098b7111f62a2c779e9::
https://api.github.com/repos/magento/magento2,13020,2.1-Attribute-with-Catalog-Input-Type-for-Store-Owner::2.1-develop,0,merged,Community Insider: Cream::Fixed in 2.2.x::Fixed in 2.3.x::Progress: accept::Release Line: 2.1::Reproduced on 2.1.x::Reproduced on 2.2.x::Reproduced on 2.3.x::community-insider-contribution::,"### Backport This PR is a backport of the following PR: magento/magento2#12397 ### Description Attribute with ""Catalog Input Type for Store Owner"" equal ""Fixed Product Tax"" did not work correctly for multi-stores. ### Fixed Issues 1. magento/magento2#12393: Attribute with ""Catalog Input Type for Store Owner"" equal ""Fixed Product Tax"" for Multi-store ### Manual testing scenarios 1. Create two websites website1 (website_id = 1), website2 (website_id =2) 2. Create new product SKU=product1 and check for ""Product in Websites"" only website2. 3. Create new product attribute ""attribute1"" with ""Catalog Input Type for Store Owner"" equal ""Fixed Product Tax"". 4. Assign attribute1 to default attribute set. 5. Open product ""product1"" and find attribute1 and click the button ""add"" near ""attribute1"".",31c1939addaca256b33bd88f4c85fcfb7c5d9e3d::2502f849d17334bf7f8c673bb13acd30163a2748::
https://api.github.com/repos/magento/magento2,13019,2.2-Attribute-with-Catalog-Input-Type-for-Store-Owner::2.2-develop,0,merged,Community Insider: Cream::Fixed in 2.2.x::Fixed in 2.3.x::Progress: accept::Release Line: 2.2::Reproduced on 2.1.x::Reproduced on 2.2.x::Reproduced on 2.3.x::community-insider-contribution::,"### Backport This PR is a backport of the following PR: magento/magento2#12397 ### Description Attribute with ""Catalog Input Type for Store Owner"" equal ""Fixed Product Tax"" did not work correctly for multi-stores. ### Fixed Issues 1. magento/magento2#12393: Attribute with ""Catalog Input Type for Store Owner"" equal ""Fixed Product Tax"" for Multi-store ### Manual testing scenarios 1. Create two websites website1 (website_id = 1), website2 (website_id =2) 2. Create new product SKU=product1 and check for ""Product in Websites"" only website2. 3. Create new product attribute ""attribute1"" with ""Catalog Input Type for Store Owner"" equal ""Fixed Product Tax"". 4. Assign attribute1 to default attribute set. 5. Open product ""product1"" and find attribute1 and click the button ""add"" near ""attribute1"".",13546a71cd7169549d08546d56daca0859dc73cb::
https://api.github.com/repos/magento/magento2,13018,2.1-Attribute-with-Catalog-Input-Type-for-Store-Owner::2.1,0,closed,Community Insider: Cream::Fixed in 2.3.x::Reproduced on 2.1.x::Reproduced on 2.2.x::Reproduced on 2.3.x::community-insider-contribution::,"### Backport This PR is a backport of the following PR: magento/magento2#12397 ### Description Attribute with ""Catalog Input Type for Store Owner"" equal ""Fixed Product Tax"" did not work correctly for multi-stores. ### Fixed Issues 1. magento/magento2#12393: Attribute with ""Catalog Input Type for Store Owner"" equal ""Fixed Product Tax"" for Multi-store ### Manual testing scenarios 1. Create two websites website1 (website_id = 1), website2 (website_id =2) 2. Create new product SKU=product1 and check for ""Product in Websites"" only website2. 3. Create new product attribute ""attribute1"" with ""Catalog Input Type for Store Owner"" equal ""Fixed Product Tax"". 4. Assign attribute1 to default attribute set. 5. Open product ""product1"" and find attribute1 and click the button ""add"" near ""attribute1"".",4e24f7324a4e46e629b08275e613b08135061f68::9598f4a14f31c33289f97b15eedbf9e8cb395810::1ea5060882ce4d255673ac86f05d39fe7244737c::71ae63cb964adc50e356f9bb21282798f5e05b30::c0078bef6b1af1307879cada6525c600fff85722::b52f7c6e6efb7a46b50a290e768acdb5097f2243::9c72a0d9aca931e5c30df73f20369031e492167e::ffe97c1bae6c4d405124489c11bff8d5d28b2141::ef6a9a48a2115fbc45004b8595dfa4811fbab29d::7851e586159daa3c37a8b58baeed4f1cae58bcd4::137d92b4ccfd045c15036afdc87275bd2b1222aa::4b94bbcac5656f7684b3de65c5f4e68fe45660fc::121db85a260379a4e884f930104828438768e4b3::791f4876c4be9832632847099a4604ce6ac5bd8b::8cc2d144c91cf3acc8167ef5d1b494b7a1690fdb::7b0195686388da9125f6c082ac32bcd48ac8153e::caf209bcbd628c6c1d2382d16c71bd1cb1feb0cd::b292b8988e954a87f89dbddda8d583b9844e410d::cc95af3df21ee9a93819cbc3e1cd788828c455d5::356cd9b202bf10479d1298eccc5ae57b7f9231e9::262446caca18596afa081b2deec396c622b4d026::04c9cdb72a872b19b22524737d6e2c2aad099c5a::bb60ab8df9c6fa5fb00805a2511d49aa1b632452::2b56594127db15341afcbc6ce8fe4bf7a62a71b9::5d1ec8b792dce66dfa621802303f9753d6c21b33::b8f69cb6ed7962bdb9135eff1f7ec5345c4995be::5f3ef1bc5065edba95b041b11887a961fd3c8cdd::74e1d85d4f23802e05c94dde7daeef5b98c2d3aa::d7632e415d5b8602cc3ee1fad2045881f064749b::8933489a8abf912f59af2e0847611880a79c1f8b::1e066d9875e65af0899319df6188bd28c2ffdd3b::00814813a25d4f32a23f5a958d4cbb8a46dc6fac::ad8fed1342ef3af220733d6fc2f8707f5b506f63::9327ed528e84be21de449b7962082daa0caee7c0::436a4e6b9894305d5ae413f63eb8daf65c1b6c94::4dff9a3a2f314a202527aa625f415ac0438b875b::f9855e760f3446d3c6374560b815693fc4935c14::54559811282a40cb387998c9afe8a07c3c74081e::3a3119dd39520589b439c08c967358491a5b5484::429558b76cfc4ce5dc2e8fe79eea875e747e8412::0c7ccd4ada26ce65739ab6529e88f1c9de65fc15::6721a59dc8bf4a1a55bcd06f88d1565c1404d485::6cb95bf9884f5e17dcb47428903b0dde68cb108b::cedfb0c366105d344f46de5e8102b1523ac19cc7::5f622839f363a17af51f7de029dd8a1eae637431::a7a6838603ab0292efd7391266e5fdf1bfa93a55::536872747e48db058ed6a0be5ce8665e6f198424::f79d97e0c0f5c5bd581e6106316a121929575de3::598ecd52f76f12df127da49eca37250dc9f88c03::90de24095ed8a30f20456299b9ad4dc4e2ceb641::cfeae16d9fa220a643184c28ce44152995ea44e0::ed49c03ea2ab068ee0ec4dc646bb76a1f1652eab::13286b77c0bcd7052b276baaa0867624d747acd1::f90a91a9f82a26627f4bbf6f6de15764076f70f5::c6331d2409d50afeff5dd1e2209b4e8967aa0c59::b70104ed22c9e12bd80384cd8b8c999019d5a364::bf06306f4ec8d9ba2335860c91b9642586ce1351::764e6c58866244cf632cdb6ebc24de2c73de9391::bfd3bf6b8b83a5f2020ab67a4174709c8dbbb809::74ba7a0055af6c2053fd0e22052ff2777923c036::0cb522b272489da2fd8543576673bc0ee3e31d10::14b083d24893da829eca88ab3e10be8ef8aa196e::97575f98e0731cdd42030789f5839200e750b55c::fca05b2d82487b08ece299b6e69d46a4bc17c2f2::90ea1c01846c2314acf4a3443140b5be080717d9::d4d3f3dc8a2fdf6bbb8a1a04b3d75cdcaf54c990::db9ad08d1adc3936617f4c7d145f170f5bf184da::50031e8220793e78c94a8d337eb542e2d4379ee4::c6326ecfe1fef476566d15c91d02d93f1a810060::dede5aa6c171ea4e2707057ae42ca8dd9f94ab75::e693e018b19690474355ee67845bcfc1f3731b44::15885660a3d752bd6b7eb1b7473c13a09d2586d9::aa7458ccffd44a2415c73ca7c4d670e520db09b7::6c571036beec4aae03bbe780615a1b01333678bc::cd260e8c6f044b0838af5852e50b66e0123f8d3b::ab6940f704a8534a4655478e816f6a5819fddbf7::d7583cafff893c0e4d69b607f9cf9521a67ddc7b::5205d5386c1fd8907b006f20cbec500e66989967::b11d3a15928c42c5c864c7dbd1dcf468d5eec4d6::89bfc0c9faeac388eed9702beebff3bf6df9d6ff::6415e3d052c991d248f98a16b64028a52b4dbfb6::6829b27ee0a16a0f4947430924fe294a2202315c::fb747cfb9a5befe03c39dabc2fc42a4453a6e594::f6a8fedf9981ca8c13208ffafe6f15c9380d6d44::bc7f7be1cdbc23274f836fc1d893fe3c350c4e78::91061af1b6f2eaf2b41d16567a8fed1d6d490673::183e4d6b582d545217d9a0efd4e8fd59312df899::091345796a0a31d4b00ccb636028eedf712501a3::5e33bc7005af6d49d8175dc12af3bcef44916f9d::b5ff5c59183d30c206f350a70f0454aa234a3a3b::de95b3ec064ef08f398e1e8037cdc0766a46cbd2::81f8f6302d222d7cc48c4d5c31ce06e24eef341d::307542675019d7bbb80a23354ca995f79718dba3::08637b05f0adecc72d1abd1c9aacf143411b66e8::d37d0e2f34bc4aa7c892c690ccc55152961597bf::debd7bb467ca3ab4e8a669c5f7dfab182017f283::57389c2a260c243bcd90ea6736fc0b43a00e86e5::b783a6ba406d318b6d01427ed6cf32af3c56acc7::e3e6b7b07e437123bdc1dd888a2146a3390af0fd::b415547bce0e912d0d9540254b47dad00b1090b9::f528db52c589815f12a4a2587de223934d199ef6::49812be481eff1ab55fda0363e396b6ccc1156bd::0d1a0004845a1459c818d9edc70f1fdc1c5c31cd::bebeb53143b041a4cbab808ba4e2edcba9884087::bfbd9bebb47d44dfde135c409ba0fceb4846acc0::ed40d3985a4071fe2a94727c5bc98af7674eb236::90074e798940329b68cce1d5fd34f127c475d00d::75881f66700cc42a5f8c3ff80ea819705ba04cd6::b4c0754600264ec5277789ea7f522b5063123536::6a3aa8c6b7c15b812349e3468e4011cf59e806cc::c4cb2d64d8e31a4931456a55e01cb8e7f20a47e7::fd25a3d2081cb338c0052e5443b2b880cde2d5fc::acfceb8385e3090979599fa22ca05af3ab1e3dd9::5dbfa14f803df4ac0dbb74ff0e143386abaedb5d::b594f38f73d45aece3ccdd8814ba62668b3f9fe2::97b753c31f7c588fd34995c7b6fb845231743fdb::f6f351687eb366b644bccef21ec4c3cd9ecc0c57::f4dc65ba99c55a177915f640ac8946082f731d15::cd45716f76853077d9477a55fef294a4c3e326c3::8d362efe6e75c11aed64f9af66b336b717fac567::8af967935f996ad5a3f342a886ca5094e8edbbc1::378c1395a7ddbfc4ef830870bed7e9690ee3fa66::b0aa60adae8028a8684299e49f5609780717db6c::308dd991491db35c3999485df60b3f95617d2549::f78a040474a9c6216729aa605f4b0b7db66c6d08::a158a6bc87bc22c2a2797caf4e4267490bd7ec87::490c358111c460d106a37eb4c3f735b50b2878fe::c54e092dfe3710416b35f75d45a81f093aa8b3a4::fcf58a3e1199da860feae2a8e5320fc7af31eb77::95eaf878bb783a7984c9b52b169f6c37eb292237::44f95e4cffe0a1c0872a6e7962e38318cd1d7fdf::5158a78acb4b77238ceae6b9ca82333cd1479323::3f9d5155d73f42492ffda84bf6fbf0b3fd996489::14293ced9f525368ce0922a84a3e68d4878ec35d::477f536027c22606d1528a280da66ce72ac5b7ea::ff7e370002e4749fdf27b679dcb07db1682bbba4::4d0d81eb2b68150496c1781315f2ea996cb045a4::df3b30693d878d4557709545381c0b62eed507e8::68a3ed6a2955d85db8c8e07cf08747938e5d54ec::919000884361522df756afc7258760d22c0057bb::d34ee3038a3e6fe64f89916f913283a74b9b4980::5079c730687a8edbae8a01f97b334e83a659e528::b6ad2aa4fa0e9f109e0dce2456847be5946e91d6::57355ec3ff75dac9a00c34d84bc471217c0bc645::590b8a8cde9b1c6f558ee93aa424de1a77ce42e7::1a8770e0b5b8efc34c259c68be33a1f2433d9259::153bb81d07efdc5b0e1b8ffce21c34d8603b3a8f::30faf1660fed67abb885d10df8a27523c7649a95::e58d7ffaf0d91f8a22e58c4a9495df0e744d58b0::dffcce3661da877cd72d2b2ad18a44c590a4b8f3::59fe08cb4c1ed7f216deb81f3fccd0b87dfc8e22::06cdee604543487ff53d6113f24437f14f850b0e::7da1f9ec01df54e723f71423d54f1da83aef85a0::17450ffca89b9b84416b119cabb82f2ad7b30646::ca8ee57740c56bb014101b8af1bb3849c9d8733d::d906888962935c91c88a1cbdf2f2fd91c34091c4::2bcb68839894545bd9756d5f221fabd22a327c4d::ae9b691b4d46977c4b9d6f0f05a92fc1e4e3cf1d::5ecb9e734114357c1502b850b97160c287a8d658::373f32005abe95ac0bfd7aca33e4e1e4c3b8b5b7::80595986e1e9e2ee11af759632922777682f302c::d8ccc0f2d423f1dbe66a5360ae29b015822ced8b::0e620f773ec9982163c9b5339b16f49674a4787b::bbd03a4ba2d9944d4d37c735c6f76eae5e742646::4db049231c47551e1e229534ef02ea797d9b3071::e738316ff76d849a7f5f4f396345661c998a9349::48a4844af41828a3b125d84c153b22a4c02a056c::e0735e1e4549115bcc01c652491349ad1d8b7942::2e6357dfc410999b33186168cb276bd040e69264::6d56e1e43ed4e56eefdef3fe6bff9c77c134bd60::53d0dab6bc18b41958483a01c8d469e46453d6ee::31c1939addaca256b33bd88f4c85fcfb7c5d9e3d::
https://api.github.com/repos/magento/magento2,13015,2.2-The-quote-address-fields-length::2.2-develop,0,merged,Community Insider: Cream::Fixed in 2.2.x::Fixed in 2.3.x::Progress: accept::Release Line: 2.2::Reproduced on 2.1.x::Reproduced on 2.2.x::Reproduced on 2.3.x::community-insider-contribution::,### Backport This PR is a backport of magento/magento2#11286 ### Description The following fields length has been expanded in the quote_address database table: - telephone - fax - region - city ### Fixed Issues magento/magento2#10869: field lengths differ across many tables magento/magento2#10868: field lengths differ across many tables,6c16fcbc89fcdf285a346f38b6a5276cba20c9fc::
https://api.github.com/repos/magento/magento2,12976,2.3-Changed-constructor-typo-in-Javascript-class::2.3-develop,0,merged,Community Insider: Cream::Progress: accept::Release Line: 2.3::community-insider-contribution::,"Backport of magento/magento2#11933 Original PR: Changed variable with typo consturctor to constructor This was already solved in the 2.3 develop branch, but another commit with a typo was also in the given PR. This was not yet present in de 2.3 develop branch, so backported the original PR to the 2.3 develop branch.",556d6436e792b08ad9c6684e10ceed35c0dba41f::
https://api.github.com/repos/magento/magento2,12961,2.3-Fixed-double-space-typo::2.3-develop,0,merged,Community Insider: Cream::Progress: accept::Release Line: 2.3::community-insider-contribution::,"- Changed typo where a string to be translated used double space ""configure  your"" instead of ""configure your"". - Checked all files and changed the string everywhere to a single space. ### Backport This PR is a backport of: magento/magento2#11569",9749465d20943a9c2637d0132fd710c3c59abb00::
https://api.github.com/repos/magento/magento2,12959,2.1-htaccess-Options-override::2.1-develop,0,merged,Community Insider: Cream::Fixed in 2.1.x::Fixed in 2.2.x::Progress: accept::Release Line: 2.1::Reproduced on 2.1.x::Reproduced on 2.2.x::Reproduced on 2.3.x::community-insider-contribution::,"Fix for isse Fix #10812. The Apache documentation for the Options Directive mentions the following: _**Warning** Mixing Options with a + or - with those without is not valid syntax and is likely to cause unexpected results._ http://httpd.apache.org/docs/2.2/mod/core.html#options So occording to the documentation ""Options All -Indexes"" is not valid syntax. Removed the option ""All"" from the .htaccess file. This is the default option. We only want to make sure that the Indexes option is not present, so that Apache will not return a list of files in the directory. The ExecCGI option will be disabled by the .htaccess as well. The FollowSymLinks option will be set automatically when the mod_rewrite module is found. As far is I can see there is no need to set or unset the other options in the Options Directive, so it's safe to remove the option All from the .htaccess files. ### Backport This PR is a backport of: magento/magento2#11327",704960a6a1af41c95e9e1c90b11016426ab5d5b5::
https://api.github.com/repos/magento/magento2,12952,2.1-Fix-for-reverting-stock-twice-for-cancelled-orders::2.1-develop,0,merged,Community Insider: Cream::Component: Payment::Fixed in 2.1.x::Fixed in 2.2.x::Fixed in 2.3.x::Progress: accept::Release Line: 2.1::Reproduced on 2.1.x::Reproduced on 2.2.x::Reproduced on 2.3.x::bugfix::community-insider-contribution::,"### Description Fix for reverting stock twice for cancelled orders: - Removed cataloginventory event observer `restore_quote`, that increased the stock when rebuilding a quote. Reverting quote inventory should be responsibility either of `sales_model_service_quote_submit_failure` or `sales_order_item_cancel` events; ### Fixed Issues This is a backport to the 2.3 develop branch of the following PR: 1. magento/magento2#12668 ### Fixed Issues 1. magento/magento2#9969: Cancel order and restore quote methods increase stocks twice",bbe2f1a4b2ade0403760196c001d1b7156a5ddcb::b5b59be6fa3676a98d7777abfdc01c525ba587ce::
https://api.github.com/repos/magento/magento2,12949,2.3-Fix-for-reverting-stock-twice-for-cancelled-orders::2.3-develop,0,merged,Community Insider: Cream::Component: Payment::Fixed in 2.2.x::Fixed in 2.3.x::Progress: accept::Release Line: 2.3::Reproduced on 2.1.x::Reproduced on 2.2.x::Reproduced on 2.3.x::bugfix::community-insider-contribution::,"### Description Fix for reverting stock twice for cancelled orders: - Removed cataloginventory event observer `restore_quote`, that increased the stock when rebuilding a quote. Reverting quote inventory should be responsibility either of `sales_model_service_quote_submit_failure` or `sales_order_item_cancel` events; ### Fixed Issues This is a backport to the 2.3 develop branch of the following PR: 1. magento/magento2#12668 ### Fixed Issues 1. magento/magento2#9969: Cancel order and restore quote methods increase stocks twice",10550760af088f5325202e19e8a8371c8c5072a2::
https://api.github.com/repos/magento/magento2,12872,fix_2_3_issue_12533::2.3-develop,0,merged,Component: ImportExport::Fixed in 2.3.x::Progress: accept::Release Line: 2.3::Reproduced on 2.1.x::Reproduced on 2.2.x::Reproduced on 2.3.x::bugfix::,"Unable to import products with external jpeg images hosted on a CDN with dynamic URLs not ending with "".jpg"" or "".jpeg"", e.g. If accepted I'll create backport to 2.2 & 2.1. ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/12533 2. https://github.com/magento/magento2/issues/12455 3. https://github.com/magento-engcom/import-export-improvements/issues/57 4. https://github.com/magento/magento2/issues/5306 5. https://github.com/firegento/FireGento_FastSimpleImport2/issues/50 ### Manual testing scenarios Check all issues. My CSV in attachment. [products.csv.zip](https://github.com/magento/magento2/files/1584810/products.csv.zip) ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green) you could use the optional component parameter of parse_url here ``` $parsedUrl = parse_url($url, PHP_URL_PATH); if ($parsedUrl) { ```::True. I edited my code.::",8cdf04390e43184aef85a26855c40a9c0a33309e::53292d37074044e644eacdef9adfa79df5199662::
https://api.github.com/repos/magento/magento2,12853,fix_2_3_issue_12793::2.3-develop,0,merged,Component: ImportExport::Fixed in 2.3.x::Progress: accept::Release Line: 2.3::Reproduced on 2.2.x::Reproduced on 2.3.x::,"As of 2.2, group products no longer import properly. Using the sample data given on the system->import page, it will import the group product (the product type is correct), but no longer associate the simple products to the grouped product. This was confirmed working in 2.1.7, but looks to be broken in 2.2.1 and 2.2.2. I fixed this for 2.3. If accepted, I'll create backport for 2.2 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/12793 ### Manual testing scenarios 1. Import with sample data is not working ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",01013fa674409a0f62cc66ee2f041b76211915cb::b566ca72a5c3f5cf817ad9c6d0bc346bf2014556::
https://api.github.com/repos/magento/magento2,12805,backport-for-10650::2.1-develop,0,closed,Progress: needs update::Release Line: 2.1::Reproduced on 2.1.x::Reproduced on 2.2.x::Reproduced on 2.3.x::bugfix::,"### Description This is a backport to 2.1-develop for the fix from https://github.com/magento/magento2/commit/2992ee2cb9ca752ca8ac9666704d6f56c08d2474 ### Fixed Issues (if relevant) 1. magento/magento2#10650: Cron starts when it's already running ### Manual testing scenarios <!--- Provide a set of unambiguous steps to test the proposed code change --> 1. Create a cron that takes a while (for example, sleep 15 minutes) 2. Schedule it to run every 5 minutes 3. The other jobs should wait for the first job to complete, even though they are scheduled to run every 5 minutes. ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",6a1a94efdd4f84ae1db5a67c17b0a3709458cca5::
https://api.github.com/repos/magento/magento2,12735,2.2-develop#12193::2.2-develop,0,merged,Component: Search::Fixed in 2.3.x::Progress: accept::Release Line: 2.2::Reproduced on 2.1.x::Reproduced on 2.2.x::bugfix::,"### Description If you attempt to use the Search tool in the admin panel, and select ""XX in Products"" that appears, it brings you to the full catalog view, without narrowing down the list. This solution backports the one introduced in https://github.com/magento/magento2/pull/10089 ### Fixed Issues (if relevant) 1. magento/magento2#12193: Catalog not filtered by admin search bar 1. magento/magento2#7861: Using search in Admin panel, and choosing ""% in Products"" returns full catalog ### Steps to reproduce 1.  Log into backend with admin credentials 2. Click on the search in the top-right corner 3. Type something about name of products (""telephone"" for example) 4. Click on """"telephone"" in Products"" to search the word inside catalog ### Expected result 1. Catalog filtered in base of word typed in the search bar ### Actual result 1. Catalog not filtered ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",0666b27c6f3aed663992beb166ef97f5523c2355::f5d93c3e04ebf7ee8fd2537c7415ae3b11ba07a9::790ac311344350c33af6f6a697a8d5f8bfe478d8::
https://api.github.com/repos/magento/magento2,12723,github-specific-documents::2.2-develop,0,merged,Release Line: 2.2::,"Quote from GitHub: > A code of conduct defines standards for how to engage in a community. It signals an inclusive environment that respects all contributions. It also outlines procedures for addressing problems between members of your project's community. Document was recently published to the [Wiki](https://github.com/magento/magento2/wiki/Magento-Code-of-Conduct) of [magento/magento2](https://github.com/magento/magento2) repository, now adding it as an Markdown document to comply with the common practices. This PR backports commits from `2.3-develop`: * https://github.com/magento/magento2/pull/10237 * magento/magento2#10778",f69dd0fd83b067a84faddebd378837568866c4bc::104faf3cd9d4353cfa7f6dc86abb828eebc412cb::3d2e1eb5e9ddf20b6c4e78bedfea2d2403b62ff3::
https://api.github.com/repos/magento/magento2,12611,backport-pr4958::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::bugfix::,"Backport of https://github.com/magento/magento2/pull/4958 to 2.1 <!--- Provide a general summary of the Pull Request in the Title above --> ### Description <!--- Provide a description of the changes proposed in the pull request --> ### Fixed Issues (if relevant) <!--- Provide a list of fixed issues in the format magento/magento2#<issue_number>, if relevant  --> 1. magento/magento2#<issue_number>: Issue title 2. ... ### Manual testing scenarios <!--- Provide a set of unambiguous steps to test the proposed code change --> 1. ... 2. ... ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green) I reached out to the core team regarding using `@escapeNotVerified` in backports because it wasn't defined how to handle this. They asked us to not use `@escapeNotVerified` for new code, even in `2.1-develop` abd when other strings in the same template use the same technique because we know by now that this potentially unsecure. If you adjust your PR to escape the string (like in [2.2-develop](https://github.com/slackerzz/magento2/blob/2.2-develop/app/code/Magento/Newsletter/view/frontend/templates/subscribe.phtml#L13)) though, I can approve your PR!::",5158a78acb4b77238ceae6b9ca82333cd1479323::
https://api.github.com/repos/magento/magento2,12577,add-vis-status-filter-2.3::2.3-develop,0,merged,Progress: accept::Release Line: 2.3::,"<!--- Provide a general summary of the Pull Request in the Title above --> Add visibility and status filter to category product grid to be able to easier filter large amounts of products. Wading through thousands of 'Not visible individually' products is no fun. ### Description <!--- Provide a description of the changes proposed in the pull request --> Before: ![image](https://user-images.githubusercontent.com/431360/33663563-c9b5edf2-da90-11e7-9899-07d197b9c34b.png) After: ![image](https://user-images.githubusercontent.com/431360/33663041-a896f816-da8e-11e7-823a-74a27a531e41.png) & with filter applied; ![image](https://user-images.githubusercontent.com/431360/33663604-ef2100e0-da90-11e7-8f85-722c560e231c.png) ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green) This is a backport for 2.3 of https://github.com/magento/magento2/pull/12564, ping @adrian-martinez-interactiv4",67decd04340d13b1704c0ad7de04b0e64c48f80c::088fb209a99517e3bb26a9fb1c0df912ff7af164::
https://api.github.com/repos/magento/magento2,12576,add-vis-status-filter-2.1::2.1-develop,0,closed,Progress: needs update::Release Line: 2.1::,"<!--- Provide a general summary of the Pull Request in the Title above --> Add visibility and status filter to category product grid to be able to easier filter large amounts of products. Wading through thousands of 'Not visible individually' products is no fun. ### Description <!--- Provide a description of the changes proposed in the pull request --> Before: ![image](https://user-images.githubusercontent.com/431360/33663563-c9b5edf2-da90-11e7-9899-07d197b9c34b.png) After: ![image](https://user-images.githubusercontent.com/431360/33663041-a896f816-da8e-11e7-823a-74a27a531e41.png) & with filter applied; ![image](https://user-images.githubusercontent.com/431360/33663604-ef2100e0-da90-11e7-8f85-722c560e231c.png) ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green) This is a backport for 2.1 of https://github.com/magento/magento2/pull/12564, ping @adrian-martinez-interactiv4 Looks like it's mistake::@ihor-sviziev what's a mistake?::Just look at file contains. It looks like HTML::Uhh wow how did that get there. Ok I'll fix.::",f9c95788c38309097c3bc2dceb4b3c34fc563503::2fb0cb0fba8aca63e02f9f022cd20168fa8248a5::
https://api.github.com/repos/magento/magento2,12368,backport/8069-category-save-image-exception::2.1-develop,0,merged,Component: Catalog::Fixed in 2.1.x::Fixed in 2.2.x::Fixed in 2.3.x::Progress: accept::Release Line: 2.1::Reproduced on 2.1.x::Reproduced on 2.2.x::bugfix::,"### Description Exception triggered every time a category that has an image is saved. This PR is backport of #9904 ### Fixed Issues 1. magento/magento2#8069: Saving Category with existing image causes an exception ### Manual testing scenarios 1. Create a new category an add an image 2. Edit category and save, without change any attributes 3. Observer logs ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [x] All automated tests passed successfully (all builds on Travis CI are green)",5d1ec8b792dce66dfa621802303f9753d6c21b33::
https://api.github.com/repos/magento/magento2,12057,ISSUE-9961::2.2-develop,0,merged,Component: Catalog::Fixed in 2.2.x::Fixed in 2.3.x::Progress: accept::Release Line: 2.2::Reproduced on 2.1.x::Reproduced on 2.2.x::Reproduced on 2.3.x::bugfix::,"This is a backport for https://github.com/magento/magento2/pull/10619 ### Description Attributes with no value set should not display on storefront. ### Fixed Issues (if relevant) 1. magento/magento2#9961: Unused product attributes display with value N/A or NO on storefront. 2. magento/magento2#6634: Yes/No attribute value is not shown on a product details page ### Manual testing scenarios 1. Create a Custom Attribute,  set it's ""Catalog Input Type for Store Owner"" to ""Text Area"" ,  ""Visible on Catalog Pages on Storefront"" to ""Yes"". 2. Assign Custom Attribute to Default Attribute Set. 3. Create a Custom Product with Default Attribute Set, make it visible on Storefront, do not set any value to Custom Attribute. 4. Open Custom Product on Storefront - the Custom Attribute label and it's value should not be visible. 5. Edit the Custom Product, set any value to it's Custom Attribute. 6. Open Custom Product on Storefront - the Custom Attribute label and it's value should be visible. ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green) Can we get rid of such annotations?::Removed them.::This is weird logic. Why empty string should be transformed to `No`. Looks like this some obsolete workaround that should be removed. If this cause any issue then it definitely should be fixed in another way. Please remove this `elseif` logic as it has no sense.::I think we also should remove this code as there are a lot of complaints about such behavior. This code was ""dead"" for a long time so everyone expects that not used attribute is ignored on storefront. Please remove this `if`::Can we change system behavior in a way desired by Community without PO approval?::Most likely this was used to display boolean attributes with Yes/No values.::@orlangur Yes/No values at this point already handled in `\Magento\Eav\Model\Entity\Attribute\Frontend\AbstractFrontend::getValue`. And this is dangerous to substitute empty value with ""No"" as empty value may appear for different reasons (e.g. empty text field, dropdown without selected item, etc.). Magento should rid of such code, decrease coupling between different classes and do not base implementation on current execution flow but build reusable components with high cohesion so changes in one system part will not cause bugs in another.::Actually, behavior was changed when `instanceof Phrase` was added to `if` below. I can see that `__('N/A')` code was dead for a long time (including M1) so expectations in most Magento versions not used attributes are not displayed on a storefornt product page. Support also has multiple tickets to return previous behavior (not show N/A) back. ::Thanks, I wan't aware about M1, and yes, such useful behavior was introduced accidentally in scope of another bugfix.::This `if` formatting looks pretty strange, should it be on next line or `elseif`? For the sake of cleanup `===` use would be nice also.::Sure. should be `elseif`. Thanks::",c2a245037a3085c09d2e645b701affeca3b11ceb::a5c064a315dee782d961777a813a141d3712a017::3473c1c578f4c2c01ef410e303bca15e20789e37::b3cbda217eb9ee3703a86620356b75e405691246::
https://api.github.com/repos/magento/magento2,11739,backport-4396::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,This backports a removal of the hardcoding the array index of Magento_Backend::admin in the resources ACL tree Original commit 66d19602e9627b2c446dd5445ff62bfbc2eea2b6,c766c669ef797546bc5f50db74c94057f4eccab1::
https://api.github.com/repos/magento/magento2,11673,experius-2.2-patch-issue-7591::2.2-develop,0,merged,Component: Payment::Progress: accept::Release Line: 2.2::bug report::,"<!--- Provide a general summary of the Pull Request in the Title above --> backported  #11659 ### Description <!--- Provide a description of the changes proposed in the pull request --> There was a typo in the Paypal TestCase dev/tests/functional/tests/app/Magento/Paypal/Test/TestCase/OnePageCheckoutTest.xml ### Fixed Issues (if relevant) <!--- Provide a list of fixed issues in the format magento/magento2#<issue_number>, if relevant  --> 1. magento/magento2#7591: PayPal module, ""didgit"" misspelling ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",07273a7f730343b856b9d3d5d14dd052ec5029ff::
https://api.github.com/repos/magento/magento2,11662,FR#REMOVE-UNDEFINED-FIELDS-LIB-FOLDER::2.3-develop,0,merged,Award: special achievement::Progress: accept::Release Line: 2.3::,"Remove ""Undefined fields"" under lib folder ### Description This PR adds missing properties to class, and optimize / reorder imports, under lib folder. ### Fixed Issues (if relevant) None, improvement, since it's not really a problem, it makes no sense to backport it. ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [x] All automated tests passed successfully (all builds on Travis CI are green)",a5f9eaae36e5f45fc2277b6ce42c858976dd3c77::
https://api.github.com/repos/magento/magento2,11626,FR#CATALOGSEARCH-INDEX-REMOVE-UNNEEDED-SAVEHANDLER::2.3-develop,0,merged,Progress: accept::Release Line: 2.3::,"Remove unneeded, also mistyped, saveHandler from CatalogSearch indexer declaration. ### Description This PR removes unneeded from Magento/CatalogSearch/etc/indexer.xml: <img width=""940"" alt=""captura de pantalla 2017-10-22 a las 3 21 29"" src=""https://user-images.githubusercontent.com/17545750/31857194-3441dfc8-b6d8-11e7-8903-4e277e03ea69.png""> It's not used, and it is mistyped: no such class `Magento\CatalogSearch\Model\Indexer\IndexHandler` exists; it refers instead to `Magento\CatalogSearch\Model\Indexer\IndexerHandler`. Even it is mistyped, it works due to `Magento\CatalogSearch\Model\Indexer\IndexerHandlerFactory`handling the save handlers, and correct class name is injected into IndexerHandlerFactory via Magento/CatalogSearch/etc/di.xml: <img width=""756"" alt=""captura de pantalla 2017-10-22 a las 3 27 03"" src=""https://user-images.githubusercontent.com/17545750/31857219-061f63d0-b6d9-11e7-898f-7cd37a651758.png""> ### Fixed Issues (if relevant) None. This is a little improvement for this file, to remove that misleading saveHandler declaration, and since it's not really a problem, it makes no sense to backport it. ### Manual testing scenarios After removing that line, everything should work as before. ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All new or changed code is covered with unit/integration tests (if applicable) - [x] All automated tests passed successfully (all builds on Travis CI are green)",ef496a245b7ef94d2e6624747f13a06eb3e829c5::
https://api.github.com/repos/magento/magento2,11625,FR#THEME-INDEXER-DECLARE-DATA-CLASS-PROPERTY::2.3-develop,0,closed,Component: Config::Partner: Interactiv4::Progress: needs update::Release Line: 2.3::partners-contribution::,"Remove ""Undefined fields"" from app folder ### Description This PR adds missing properties to class, and optimize / reorder imports, under app folder. ### Fixed Issues (if relevant) None, improvement, since it's not really a problem, it makes no sense to backport it. ### Manual testing scenarios <img width=""720"" alt=""captura de pantalla 2017-10-22 a las 3 13 02"" src=""https://user-images.githubusercontent.com/17545750/31857180-84cea256-b6d7-11e7-8c9c-f9d66167d3cd.png""> ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",85bd65c93355220ec5dbbbd4aa8865d6751fe4ef::
https://api.github.com/repos/magento/magento2,11092,patch-9::develop,0,merged,Progress: accept::improvement::,"### Description This change covers an issue when block doesn't contain name attribute in layout file. As was discussed in https://github.com/magento/magento2/pull/10354#issuecomment-318606882 - need to covert missing block names issue with static test. ### Fixed Issues (if relevant) 1. N/A ### Related issues 1. https://github.com/magento/magento2/pull/10352: Add missing block name to allow block customisation 2. https://github.com/magento/magento2/pull/10354: Add missing block name to allow block customisation 3. https://github.com/magento/magento2/pull/10936: #10824 add name for order items grid default renderer block ### Manual testing scenarios 1. N/A ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [x] All automated tests passed successfully (all builds on Travis CI are green) - [x] All new or changed code is covered with unit/integration tests (if applicable) For now I didn't fixed all places, but we can see list of them in failed test. Will create backport PRs to 2.2, 2.1 if it's neededA bit confusing but changing existing name would be a BC break, right?::Copyright header should be static across all files and such comment should be placed in class PHPDoc. Feel free to not change this now as there are a lot of such occurrences in code, it needs to be enforced and fixed once for all codebase.::Not sure. As for me - this is not BC change because you hadn’t ability to customize these parts, now you will have. I don’t know any case what these changes could brake existing website::Could you fix them during merging this PR?::Note the line I commented on - after change names are `name=""content.tax_rule_edit""` and `name=""tax-rule-edit""` normally they should have been `name=""tax-rule-edit""` and `name=""tax-rule-edit-form""`::I don't think it's worth neither mine nor your additional commit, just keep in mind for future contributions and I hope to contribute such PHPCS sniff to make all copyright headers and class comments consistent.::@orlangur, @ihor-sviziev Changing a name of a block is A BiC so let's keep `tax-rule-edit` even if it not consistent with other names.::",117287fdede214f8954519f4e8ab3caa9e2026e0::b0f5a664fa03ee942cea4f4e64e16a840e8f27b1::e57ef725283c5696a133a5602308029c40a49069::
https://api.github.com/repos/magento/magento2,11075,simple-store-switch-double-store-fix-2.2::2.2-develop,0,closed,Progress: accept::Release Line: 2.2::,"when we get the current url of the store, oppurtinistically remove the ___store parameter. fixes #10908 the other issues related to parameters given to an url and being removed during store switching should be handled in another ticket backport for 2.2-develop from #11074 Signed-off-by: BlackEagle <ike.devolder@gmail.com> <!--- Provide a general summary of the Pull Request in the Title above --> ### Description <!--- Provide a description of the changes proposed in the pull request --> ### Fixed Issues (if relevant) <!--- Provide a list of fixed issues in the format magento/magento2#<issue_number>, if relevant  --> 1. magento/magento2#<issue_number>: Issue title 2. ... ### Manual testing scenarios <!--- Provide a set of unambiguous steps to test the proposed code change --> 1. ... 2. ... ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",c3ea1f55aa21ca14796118128a302d4f4b139450::0c0393d4ebe9dd216911c773e4e5d274f973d716::e9e29cb58e82378f786b4c886a4cb3b9cfb1822c::
https://api.github.com/repos/magento/magento2,11050,compilation-after-upgrade2.2::2.2-develop,0,merged,Release Line: 2.2::,"This is a backport of #11047 for the 2.2 branch <!--- Provide a general summary of the Pull Request in the Title above --> ### Description After running `setup:upgrade` command, the message ""Please rerun Magento compile command"" only shows up in production mode ### Fixed Issues (if relevant) 1. magento/magento2#11044: magento setup:upgrade prompts to run compilation, even in developer mode ### Manual testing scenarios <!--- Provide a set of unambiguous steps to test the proposed code change --> 1. run `bin/magento setup:upgrade` in developer or default mode ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",c3ea1f55aa21ca14796118128a302d4f4b139450::0c0393d4ebe9dd216911c773e4e5d274f973d716::68b56b9336c4840e065647501e3584399e4d7b6b::
https://api.github.com/repos/magento/magento2,11048,fix_wysiwyg::2.2-develop,0,merged,Release Line: 2.2::,"When adding images in CMS Pages / Blocks or Catalog and Category the path to the image is incorrect. When you insert image in 2.1.8, we get ```<p><img src=""{{media url=""wysiwyg/Hond.jpg""}}"" width=""1024"" height=""683"" /></p>``` when we insert image in 2.1.9 ```<p><img src=""http://local.magento/admin/cms/wysiwyg/directive/___directive/e3ttZWRpYSB1cmw9Ind5c2l3eWcvVmVsZC5qcGcifX0%2C/key/d3f89696a93152f6d352e5d5cb391180a27c8a7924d9fe3b583d3e9f03d00753/"" width=""959"" height=""1024"" /></p>``` The issue is also a problem in 2.2-develop. This fix is for 2.2-develop. Will create backport voor 2.1-develop branch. ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/10417 ### Manual testing scenarios 1. Go to CMS Pages. 2. Add image 3. Check the path (show/hide editor) ### Contribution checklist - [ ] Pull request has a meaningful description of its purpose - [ ] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",c3ea1f55aa21ca14796118128a302d4f4b139450::0c0393d4ebe9dd216911c773e4e5d274f973d716::62378774f239c2019e39bdd353c8c6c674b54fb1::202dd82fd30ed0241d862f4c9c43e8a04927c75c::
https://api.github.com/repos/magento/magento2,10934,patch-1::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,It's the backport of https://github.com/magento/magento2/commit/5228cf78543e27de4aebe79d003efc2e0af35922 to address issues reported in https://github.com/magento/magento2/issues/6081,09aa7fbcb3393a5a88d01f071e93030d8540c5c6::
https://api.github.com/repos/magento/magento2,10924,required-region-fix::2.1-develop,0,closed,Component: Customer::Fixed in 2.2.x::Progress: needs update::Release Line: 2.1::Reproduced on 2.1.x::bugfix::,"It's the backport of changes present on `develop` branch, to fix issues described in #9077 also on 2.1.x. Related commits and issues: - https://github.com/magento/magento2/commit/1b4ba9f9f071bfc539602fe2da399ad0a235b232 - https://github.com/magento/magento2/commit/4f2fa65f990edc196ca4314d6e0a5dbd832fbca6 - https://github.com/magento/magento2/issues/5279 - https://github.com/magento/magento2/issues/2946",4ad05570ca089b3a39807aa0b04d3e90cb183620::
https://api.github.com/repos/magento/magento2,10768,use-https-for-vimeo::develop,0,merged,Progress: accept::improvement::,"### Description Instead of using the current protocol being used by Magento (http or https), always go for https. Since Vimeo redirects all non-https traffic to https. See discussion with @orlangur in https://github.com/magento/magento2/pull/10748 This still happens in the fotorama library though: https://github.com/magento/magento2/blob/a232e0753026b081a83f1aa6fd47800da125a8c6/lib/web/fotorama/fotorama.js#L853-L858 Not sure if this needs to be changed as well? Watch out, I didn't test these changes, so please test before approving if possible :) Once this is in the `develop` branch and backported to Magento 2.2 by someone, I'll update https://github.com/magento/magento2/pull/10748 so this also gets into Magento 2.1 I don't want to have an awkward situation where this is merged in `develop` and `2.1` but not in `2.2` ### Fixed Issues (if relevant) None ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",c4da890ed291ba5333a3871a4098d04ea58d255c::
https://api.github.com/repos/magento/magento2,10753,backport-magetwo-52102::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,…ic content won't deploy without overriding at least one static content file #3754 (cherry picked from commit 6a9744dcd6d99cd65992374198df82fdb1eac758) ### Description This is a backport of MAGETWO-52102 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/3754: Must override at least one static content file or custom theme static content won't deploy 2. https://github.com/magento/magento2/issues/4725: Static files are not generated for custom theme 3. https://github.com/magento/magento2/issues/7569: Theme with no static files won't get deployed,c93b7179f6f18ac5b95e49900e50878851ef530d::
https://api.github.com/repos/magento/magento2,10751,backport-magetwo-52577::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"…w from Date and Design Active From is set when setting Special Price #4387 (cherry picked from commit a2d59ac0316b427ce79ea386675cda53dfa4bcb4) ### Description This is a backport of MAGETWO-52577 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/4387: News From Date and Design Active From is set when setting Special Price for product. 2. https://github.com/magento/magento2/issues/7448: Can't remove ""Set Product as New From"" value",12419571759c902779d93e9a85744854254d8eac::
https://api.github.com/repos/magento/magento2,10750,backport-pr-7794::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,…value for getProduct() in getPrice(). magento/magento2#7794 - Merge Pull Request magento/magento2#7794 from pbaylies/magento2:patch-2 (cherry picked from commit 67529688229608a682d049064ae292eb51c38292) ### Description This is a backport of https://github.com/magento/magento2/pull/7794 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/5519: Getting PHP Fatal Error on getPrice() 2. https://github.com/magento/magento2/issues/10206: Getting PHP Fatal Error on getPrice() Watch out @heldchen points out in https://github.com/magento/magento2/issues/10206#issuecomment-325627856 that there are other places where this problem can still occur.,ad0788892bbd50e8b60f95f3dddefe2ba6f5dee6::
https://api.github.com/repos/magento/magento2,10749,backport-pr-9713::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"cherry picked from commits: - a4daf56117493f62dad5a0d9decda75f3a67c4e2 - 058f287ce154ea4b0e81fca2132ec8aaf886121b ### Description - Backport of https://github.com/magento/magento2/pull/9713 for Magento 2.1 - Backport of https://github.com/magento/magento2/pull/9711 for Magento 2.1 I also took over the reformatting of that line introduced in https://github.com/magento/magento2/commit/391bf420018039738671a4fe788c0f0db9fc9c02 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/5596: Google Universal Analytics does not track when Cookie Restriction is enabled 2. https://github.com/magento/magento2/issues/6441: Google Analytics Tracking Code cached by Varnish if Cookie Restriction Settings are active 3. https://github.com/magento/magento2/issues/6455: Cookie Restriction Mode Overlay is cached by Varnish @bka: do you recommend to also include https://github.com/magento/magento2/pull/9711 in Magento 2.1, it seems like these two PR's are related? I only backported https://github.com/magento/magento2/pull/9713 for now, because it fixed a specific issue in our case, we didn't need https://github.com/magento/magento2/pull/9711 to fix our issue (we aren't using Varnish, that might explain it), but it might make sense to include both of these in Magento 2.1? *Update*: added backport for PR https://github.com/magento/magento2/pull/9711 and updated the issues list above with more issues involved with these fixes",dc79eb71df47a80fb5ffae516165f364aea3c89d::7a611cc9fd36415f3a5acff8e9a07300e18b624e::
https://api.github.com/repos/magento/magento2,10747,backport-magetwo-55900::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"…s on password strength #5509 #5883 #5861 (cherry picked from commit f67e5989f5efb36ca331e5cc28ee109961fcb99c) Not included validation messages from https://github.com/magento/magento2/commit/6ce2b5fcbddb5584a4bc3e454d90e2295da4f4ff (MAGETWO-42994) ### Description Backported MAGETWO-55900 for Magento 2.1 **Important**: there were 2 validation messages which got added by MAGETWO-42994 which got fixed by MAGETWO-55900, but I haven't included them in this PR, since MAGETWO-42994 hasn't been backported yet. See this commit: https://github.com/magento/magento2/commit/6ce2b5fcbddb5584a4bc3e454d90e2295da4f4ff (file `lib/web/mage/validation.js`) ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/4883: Not translated ""Please enter a valid email address (Ex: johndoe@domain.com)."" 2. https://github.com/magento/magento2/issues/5509: Translate messages on password strength 3. https://github.com/magento/magento2/issues/5820: js validation messages translation not working in customer account 4. https://github.com/magento/magento2/issues/5861: [Magento 2.1.0] Translation 5. https://github.com/magento/magento2/issues/5883: Untranslatable string ""Minimum length of this field must be equal..."" 6. https://github.com/magento/magento2/issues/5995: JS translation not working for some fields 7. https://github.com/magento/magento2/issues/6022: Translation Issue on Magento 2.1v 8. https://github.com/magento/magento2/issues/7525: Magento 2.1.0 Js Translations Not Working 9. https://github.com/magento/magento2/issues/9967: Some messages in Customer Account Create not translated I might have missed some though.",2c9d082dc4bf03920e30b703b1674b8ae8844257::
https://api.github.com/repos/magento/magento2,10282,allow-to-use-text-swatch-0::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"### Description When we're trying to put ""0"" value into product attribute options - we're getting following error: ```Admin is a required field in the each row```. This issue was already fixed in 2.2, but wasn't backported to 2.1. See https://github.com/magento/magento2/issues/9619 for more detailed description. ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/9619: Impossible to create Text Swatch 0 (Zero) 2. https://github.com/magento/magento2/pull/7701: Allows you to have 0 as a option 3. https://github.com/magento/magento2/issues/10266: Product Attributes - Size 0 ### Manual testing scenarios 1. Try to create product attribute text swatch with value ""0"" (zero) ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green)",2b46c8a3515525842d7ab1a85269960679a49714::bc8877a0d2ea0d9422e014a30a6f286a63515616::
https://api.github.com/repos/magento/magento2,10132,backport-magetwo-54243::2.1-develop,0,closed,Release Line: 2.1::,"### Description This is a backport of MAGETWO-54243 for Magento 2.1 See the commit message to see from which commits I cherry-picked this. ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/3860: Directive values are not quote-escaped 2. https://github.com/magento/magento2/issues/7661: Backend CMS Widgets: Umlauts and ""Catalog Products List""-Conditions fail to insert @KrystynaKabannyk mentioned that this was planned for Magento 2.1.9, so if this PR can speed this up, then I'm happy to do so :)",60d4fefa76e299d7527a25acac9f1d397a4f2e80::7bb01e3c9a974fffde2f70abf1fd0a2bf2a9f9e9::
https://api.github.com/repos/magento/magento2,10131,backport-magetwo-57796-and-66885::2.1-develop,0,closed,Release Line: 2.1::,"### Description This fixes an issue in the tinymce editor when editing a wysiwyg field on the product edit form pages, where inserted images would get an incorrect url. (not sure if this also fixes the same issue on the category edit form, didn't test this) I've included MAGETWO-66885 because MAGETWO-57796 introduced a new bug: https://github.com/magento/magento2/issues/9452 See the commit messages to see from which commits I cherry-picked this. Be aware, some of these issues mention MAGETWO-59690 as the internal ticket number for backporting this to 2.1, if this has already been done, you can close this PR. ### Fixed Issues (not 100% sure about all these, and I might have missed some) 1. https://github.com/magento/magento2/issues/6138: inserted image in product description got broken on front end 2. https://github.com/magento/magento2/issues/6088: inserted image in product description got broken on front end 3. https://github.com/magento/magento2/issues/7306: Images in Product description disappear 4. https://github.com/magento/magento2/issues/7215: Dynamic Media URLs in Products not working properly 5. https://github.com/magento/magento2/issues/7393: images added with WYSIWYG in category description are uploaded into admin-directory 6. https://github.com/magento/magento2/issues/7618: WYSIWYG is not working and removes images in product 7. https://github.com/magento/magento2/issues/9292: Wysiwyg editor image upload not working in magento 2 8. https://github.com/magento/magento2/issues/5444: Magento CE 2.1 Catalog Admin Page cannot parse media url in html content 9. https://github.com/magento/magento2/issues/6851: Using the WYSIWYG removes URL in the description 10. https://github.com/magento/magento2/pull/10131: Image link broken on product Description and short description part. (Completely offtopic: is there any way for the community to know what you guys already backported to 2.1? Why aren't you using the 2.1-develop branch for this? It looks like only community contributions go to that branch. It would be highly appreciated if we could see what Magento is backporting themselves, that would help out tremendously.)",15ec17e099ae16011e20282e828ff223a4fd10f4::3c14085e196c07792b9b45698811cb68fcb4ec06::
https://api.github.com/repos/magento/magento2,10011,backport-7279-to-2_1::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,### Description This backports #7279 to 2.1.  The version number comparison in the upgrade script and the module.xml vary slightly to allow for other updates to potentially be backported.  As this change is non-destructive there should be no issue with a store upgrading from 2.1.x to 2.2 and having these updates run again.,7b7b9ff54ea59fefdd542b4e08bf97434e8843d7::03da56ee61cd6d0e5cb529b2a1b6c5902eec0ce3::b84e648e3e663ff9185f02fa0217ebf355e3c7a3::
https://api.github.com/repos/magento/magento2,9858,fix-images-resize-memleak::2.1-develop,0,closed,Progress: reject::Release Line: 2.1::,"<!--- Provide a general summary of the Pull Request in the Title above --> ### Description We have large catalog with many products and 2Gb memory limit is not enough to resize all of the images. I've removed storing loaded products inside identity map and it helps a lot. ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [ ] All automated tests passed successfully (all builds on Travis CI are green) it is not allowed change @api interfaces in patch releases. Unfortunately, we can not accept this change.::this method is out of RepositoryInterface, so we can not call it directly. As a workaround, we can check if method_exists and call it. In this case the fix will be BC::I will try backport another implementation from develop brahcn.::",b65f8e432fa6b1fe5f39c731e0a6071e9eac6623::
https://api.github.com/repos/magento/magento2,9776,fix/7959-oldprice-swatchrenderer::2.1-develop,0,merged,Release Line: 2.1::,"This PR backports commit [269c215](https://github.com/magento/magento2/commit/269c2154db82e2c3a19f8ba9a36e9b249a745998) (originally for -develop) for 2.1-develop and issue #7959. ### Description Check and verify if 'result' is defined or not before oldPrice is fetched from it. ### Fixed Issues (if relevant) 1. magento/magento2#7959: JS error on product page Cannot read property 'oldPrice' of undefined ### Manual testing scenarios 1. Follow the list of steps at the issue that is resolved here. Two things about this:' 1. Always use strict `!==` comparison rather than loose `!=` comparison, since the coercion rules of the latter can be surprising. 2. Under what circumstances would `result` not exist? Can we eliminate that circumstance?::I wonder why these questions weren't raised when the original fix 269c215 was implemented yet they slow down backporting. Maybe @aholovan could provide the insights you're looking for? P.S. To quote some guy reporting an issue here on GitHub, ""It's unbelievable the effort you guys go to, to avoid fixing the issue.""::typeof always returns a string so it's not necessary or standard practice to use strict comparison ::Thanks @OZZlE , you are right about unnecessary strict comparison. @zetlen, 'result' is undefined before all of the swatches are selected. It was the issue as with oldPrice and also with tierPrices. (how to reproduce is described in #8923 pull request)::@aholovan Thanks for the background. Making the `result` always present is a good idea, but it seems to be out of scope for this PR. @korostii I look at a fairly random sample of pull requests; my schedule doesn't allow me to review every single one. I didn't notice that this was a backport, so that's on me! As for strict comparison, it really is a standard practice in all cases. Linters in standard configuration will complain. But it's all right; in a later project, we'll use an automated tool to change all of these loose comparisons to strict ones. So I will approve this!::",8e435155f61d0c14c113658ffff797b784788c5c::
https://api.github.com/repos/magento/magento2,9655,backport-magetwo-69152::2.1-develop,0,merged,Release Line: 2.1::,"…he TinyMCE editor for selections of images and hr elements, because this workaround now causes problems in Google Chrome version 58. (cherry picked from commit 4d10f05c4d015e59e6628bd58782a811b61b13a6) ### Description This is a backport of issue MAGETWO-69152 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/9518: Chrome version 58 causes problems with selections in the tinymce editor Reference to the commit on the develop branch: 4d10f05c4d015e59e6628bd58782a811b61b13a6 ### Discussion Be aware, this is a slightly different commit then the original one, because on the develop branch we have this commit which was applied: https://github.com/magento/magento2/commit/ead58ef5e87fbccfe62b49f5e432a4d59e7eadeb, but it isn't applied on the 2.1-develop branch, so there were conflicts in the minified files, please review this again, because I didn't actually test it. Also: I believe this bug is pretty important to be fixed in Magento 2.0.x as well, are you guys taking care of that? Also: The same is true for Magento 1.x, can you guys try to communicate this to the M1 support people and try to get it included in the next release of Magento 1.x, and maybe even create a SUPEE-patch for this. Since not every Magento 1 shop will be running on the latest version. For example, we currently maintain around 60 Magento 1 shops which aren't on the very last version (ranging between 1.7.0.2 and 1.9.1.0) Thanks!",27675cd55044b50d9d1a964f6b0f1f01c89dd2ba::
https://api.github.com/repos/magento/magento2,9590,backport-magetwo-53010::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::bugfix::,"### Description This is a backport of issue MAGETWO-53010 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/5352: Magento 2.1 email logo image function does not work 2. https://github.com/magento/magento2/issues/5633: Magento 2.1 fails to load email_logo.png 3. https://github.com/magento/magento2/issues/5916: Magento 2.1 transactional email uploaded logo not showing in admin. 4. https://github.com/magento/magento2/issues/6275: Transactional Email Logo Not Getting Updated 5. https://github.com/magento/magento2/issues/6420: New order email header logo not showing correctly v2.1 6. https://github.com/magento/magento2/issues/6502: Can't save Logo Image to Transactional Emails 7. https://github.com/magento/magento2/issues/7853: Transactional email logo wrong location 8. https://github.com/magento/magento2/issues/7985: Logo email 9. https://github.com/magento/magento2/issues/8489: Magento 2.1.4 - Asking Why Email Logo Never been fixed on all Magento releases 10. https://github.com/magento/magento2/issues/8728: Transactional Emails Logo 11. https://github.com/magento/magento2/issues/8961: email logo error 12. https://github.com/magento/magento2/issues/9118: transactional email 13. https://github.com/magento/magento2/issues/8626: Magento 2.1.2 - 2.1.4 email logo image function does not work Wow, it took me longer to compile a list of all the issues then to actually create the backport :p And I probably even forgot some... Reference to the commits on the develop branch: - 23103c03c527fe1ed3e1a3be691436818b7963fe - cb603ff3d9af3c1fc4375c588a6593e8f8dc40d3",0dfaf62664661323c753026af92b6d5c6c6fb73a::
https://api.github.com/repos/magento/magento2,9571,backport-magetwo-59512::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::bugfix::,"### Description This is a backport of issue MAGETWO-59512 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/6866: Products in wishlist show $0.00 price Reference to the commits on the develop branch: - c7d18bdfc6efb5ba8b5f1e362027ed8a1e962966 - 42dbe3f6d38df400da843231c7986b872b3f6584 - 199456abdea4c98f616092a44810b8b3e201d31e - c0ec13410e582acbf5680048cca67c98615372cd ### Discussion I first cherry-picked the 4 commits above and then rebased and squashed them (this is the first time I've used rebasing, so if something isn't right, please let me know!)",0453a2b5a2f5b6e16de8885c43ab57c147c3d218::
https://api.github.com/repos/magento/magento2,9540,fix-new-chrome-58-issue-with-selection-of-images-in-tinymce::develop,0,merged,,"…tions of images and hr elements, because this workaround now causes problems in Google Chrome version 58. ### Description This PR attempts to solve a new bug which popped up by upgrading Google Chrome to version 58. In the TinyMCE editor, we can no longer select images (or widgets, which are represented by an image), so we can no longer edit images (or widgets) using the TinyMCE editor. See https://github.com/magento/magento2/issues/9518 for more detailed info with links to a bunch of external sources. ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/9518: Chrome version 58 causes problems with selections in the TinyMCE editor ### Manual testing scenarios 1. Start editing a CMS page in the backend of Magento using Google Chrome version 58 2. Make sure you have a CMS page which contains an image and/or a widget 3. Try to select the image or the widget, by clicking it 4. You won't succeed, because a JS error is being thrown: `Failed to execute 'setBaseAndExtent' on 'Selection': There is no child at offset 1.` ### Contribution checklist - [x] Pull request has a meaningful description of its purpose - [x] All commits are accompanied by meaningful commit messages - [ ] All new or changed code is covered with unit/integration tests (if applicable) - [x] All automated tests passed successfully (all builds on Travis CI are green) ### Discussion I only briefly tested these changes, only on Chrome 58 and Safari 10.1, so it would be highly appreciated if someone else can test all browsers which Magento supports and see if this doesn't break any other browser. I applied the changes to all tiny_mce scripts I could find, although I think only the `tiny_mce_src.js` one is used in the backend of Magento. But since you bundle all the other scripts in Magento, It could be possible that someone is using another script, so I assumed this should be fixed in all the tiny_mce scripts. Also: the minified tiny_mce scripts were manually edited, I don't know the command which was being used to generate the minified scripts, so please double check that my manual edits are ok. Since this bug will probably popup with a lot of shopowners in the near future, this fix should get a bit of a higher priority and should also get backported to Magento versions 2.1 and 2.0 as soon as possible. If this PR is accepted, I can create a backport for version 2.1, but not sure how backporting to 2.0 is supposed to work?",4d10f05c4d015e59e6628bd58782a811b61b13a6::
https://api.github.com/repos/magento/magento2,9500,backport-magetwo-54798::2.1-develop,0,merged,Release Line: 2.1::,### Description This is a backport of issue MAGETWO-54798 for Magento 2.1 ### Fixed Issues (if relevant) 1. MAGETWO-54798 Reference to commit on the develop branch: https://github.com/magento/magento2/commit/6f7444ab62824bb002cff0686925c5dfa18ab146,7667589f4bd2ef7963eced0d2f3ab4cede70a668::
https://api.github.com/repos/magento/magento2,9499,backport-magetwo-57675::2.1-develop,0,merged,Release Line: 2.1::,### Description This is a backport of issue MAGETWO-57675 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/4828: Show/hide Editor not working sometimes 2. https://github.com/magento/magento2/issues/6222: [2.1.0] Sometimes WYSIWYG editor does not show. 3. https://github.com/magento/magento2/issues/6815: wysiwyg Editor problem Reference to commit on the develop branch: https://github.com/magento/magento2/commit/3524943ac6544ee969480536ef6f0cd1a29b0b56,6b07d07c65ef972457b856081a63e222e7cd69d3::
https://api.github.com/repos/magento/magento2,9365,backport-magetwo-60351::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"…ent methods on checkout page #4868 ### Description This is a backport of issue MAGETWO-60351 for Magento 2.1 ### Fixed Issues (if relevant) 1. Partly https://github.com/magento/magento2/issues/4868: Checkout page very large and quite slow. Reference to commits on the develop branch: https://github.com/magento/magento2/commit/398b91532a3abdfd29c9d02749e41ac40b20a611 & https://github.com/magento/magento2/commit/79f392c4f1cf43675acc09fcc80ac248a40e1635 & https://github.com/magento/magento2/commit/0644f24c7d658a23733c51f670c1f6931be39a6f ### Discussion Together with the [backport of MAGETWO-59685](https://github.com/magento/magento2/pull/9364), this significantly speeds up the checkout process, even up to multiple seconds. This is due to the json data structure being outputted on the checkout containing way too many elements then necessary, which makes the client side processing of this json take a very long time (sometimes up to 10 seconds). In a concrete example of one of our webshops, this reduced the json structure from 175867 lines to 4003 lines. MAGETWO-60351 in particular fixes not outputting payment methods which your webshop isn't using. Update copyright.::Same problem with copyright.::Same problem with copyright.::Same problem with copyright.::",c41743d409ad75f6ef02da2f06162046a69cdc28::
https://api.github.com/repos/magento/magento2,9364,backport-magetwo-59685::2.1-develop,0,merged,Progress: accept::Release Line: 2.1::,"…due to pulling in JSON config, remove unneeded region definitions from the checkout page. #6997 #4868 ### Description This is a backport of issue MAGETWO-59685 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/6997: Remove unneeded region definitions from the /checkout page. 2. Partly https://github.com/magento/magento2/issues/4868: Checkout page very large and quite slow. Reference to commit on the develop branch: https://github.com/magento/magento2/commit/6a5ece2f27934b2ddf7a939617c12507d264ee90 ### Discussion Together with the [backport of MAGETWO-60351](https://github.com/magento/magento2/pull/9365), this significantly speeds up the checkout process, even up to multiple seconds. This is due to the json data structure being outputted on the checkout containing way too many elements then necessary, which makes the client side processing of this json take a very long time (sometimes up to 10 seconds). In a concrete example of one of our webshops, this reduced the json structure from 175867 lines to 4003 lines. MAGETWO-59685 in particular fixes not outputting country and region data for countries to which the webshop isn't selling. Update copyright like in current 2.1-develop.::Same problem with copyright.::",ee060289d03863f632341554015a41b1b75b0c4a::
https://api.github.com/repos/magento/magento2,9333,backport-magetwo-52850::2.1-develop,0,merged,Release Line: 2.1::bugfix::,### Description This is a backport of issue MAGETWO-52850 for Magento 2.1 ### Fixed Issues (if relevant) 1. https://github.com/magento/magento2/issues/4232: UTF-8 special character issue in widgets 2. MAGETWO-52850 Reference to commit on the develop branch: https://github.com/magento/magento2/commit/54df23a2cddd92d6961dfda3b80e480c6d7c822e,ccb70bfc4f8b9cf2de6560bb0dab2b7070f26814::
https://api.github.com/repos/magento/magento2,9332,backport-magetwo-54401::2.1-develop,0,merged,Release Line: 2.1::bugfix::,"### Description This is a backport of issue MAGETWO-54401 for Magento 2.1 ### Fixed Issues (if relevant) 1. MAGETWO-54401 References to commits on the develop branch: https://github.com/magento/magento2/commit/c08792b0f20c5da496ef17bb631792ce57318caa & https://github.com/magento/magento2/commit/04a020a2e1db9f38378473733d65925b18dbdd15 & https://github.com/magento/magento2/commit/753c9cec2f4bcad231779d8252088744b7ab4865 ### Discussion I saw @okorshenko mentioning that the community can now suggest backporting certain issues for Magento 2.1 by sending PR's to the `2.1-develop` branch. So this is my first attempt at one. I have around 10 others ready, which we backported ourselves manually over the last couple of months, so if this one goes good, I'll try to send PR's for the others as well.",5bab5e93df0b021245c8f3591c5ba4363cfef6ef::
https://api.github.com/repos/magento/magento2,5372,fix-filesystem-permission-issues::develop,0,merged,Component: ImportExport::improvement::,"When you have configured some strict filesystem permissions to only allow the minimum required write access to the magento application there are some issues for example: we have an existing robots.txt that is writable, but the parent directory is writable. When you create a sitemap and have the option checked to automatically add it to the robots.txt file, everything goes south. Because the assertWritable checks if the parent directory is writable which is totally not nescessary because the file is writable. Additionally there were some inconsistencies in the filesystem directory stuff. And as an extra there is an extra check to avoid concatinating the absolute basepath with a path that is already absolute. (this could for example cause basepath='/var/www/website', path='/var/www/website/robots.txt' if you pass in both to get the aboslute path the result would be '/var/www/website/var/www/website/robots.txt' which was not the goal, now it wil properly return '/var/www/website/robots.txt') It would be nice to have these fixes backported to 2.0 and 2.1 because we have this sort of issues in our production environments at the moment.",6cd28e8c05dbabe887a33b02bdfde710805d65e6::abbb03e84ad6f004a3a670b1f8208ba36084fb0d::
https://api.github.com/repos/magento/magento2,995,prevent-warning::develop,0,merged,Progress: accept::bug report::,This exists also in Magento 1. A backport would be nice.,b368f6a45880dd2f0a7019203f6d7d000e44232d::
https://api.github.com/repos/magento/magento2,580,master::master,0,closed,,"In Cron/Model/Observer the tryLockJob method gets called on the model but the same model is later saved in the main method call. Unfortunately in the memory of the model is still the old status stored so it gets then overwritten and the job is no longer locked and gets triggered multiple times. This is also a Magento 1 problem, I'm looking forward to a backport, as we have to fix this in every single instance. :(",7fc03ac954f112af3bb97b9e37860da401a94189::4678e584c389e96ca4f5e899a883bdeb32621ea0::
