https://api.github.com/repos/JuliaLang/julia,40252,tb/merge_nonconst_globals::master,1,merged,backport 1.6::gpu::regression::,"https://github.com/JuliaLang/julia/pull/36260 introduced a change in `jl_merge_modules`, now requiring const-ness of global variable declarations: https://github.com/JuliaLang/julia/blob/40267bb03d9a6fa3406d84ed3a932e1f55b3cb4d/src/jitlayers.cpp#L947-L948 Meanwhile, in GPU land we don't really have proper globals (suggestions on how to implement those are appreciated, but with NVPTX we can't use LLVM's JITs), so we use functions emitting `weak` GVs to emulate globals like such: ```julia @eval @inline exception_flag() = Base.llvmcall( $(""""""@exception_flag = weak externally_initialized global i$(WORD_SIZE) 0 define i64 @entry() #0 { %ptr = load i$(WORD_SIZE), i$(WORD_SIZE)* @exception_flag, align 8 ret i$(WORD_SIZE) %ptr } attributes #0 = { alwaysinline } """""", ""entry""), Ptr{Cvoid}, Tuple{}) ``` We can have multiple calls to these kind of functions, emitting duplicate globals, which LLVM's IRMover happily links together when we finish emitting a function: https://github.com/JuliaLang/julia/blob/40267bb03d9a6fa3406d84ed3a932e1f55b3cb4d/src/codegen.cpp#L7380-L7387 However, when the calls originate from different methods, `jl_compile_workqueue` ends up calling `jl_merge_modules` which doesn't support linking these together, triggering the assertion at the top of this issue instead. Solutions that come to mind: - relax the assertion (this PR): I assume this would be the simplest change, especially wrt. backporting for 1.6.1 - switch `jl_merge_modules` over to LLVM's IRMover, although there's probably a reason we aren't already doing that (@vtjnash?) - emit globals differently: suggestions welcome. I do realize that the assertion is specific to how Base Julia emits LLVM global variables, but it'd be nice to get existing code working again, and I'm happy to work on a better fix after that.",d0ab30b78a2c551f033e3eefc1ada6169b985297::
https://api.github.com/repos/JuliaLang/julia,40208,kc/toml_parse_fix::master,1,merged,TOML::backport 1.6::bugfix::,,eb96dd07f0482f399e95d3081ef71527d76c89d4::54c4bd08cc0d92acbf415800eb90e310553f146d::8899ab2a4025149483c4d7747661be90f3addbd6::
https://api.github.com/repos/JuliaLang/julia,40203,kc/markdown_line_rendering::master,1,merged,backport 1.6::bugfix::markdown::,"Fixes https://github.com/JuliaLang/julia/issues/37232 Fixes https://github.com/JuliaDebug/Debugger.jl/issues/287 Before, the `wrapped_lines` put things on different lines onto the same line: ```jl julia> using Markdown julia> md = @md_str """""" Misc:\\ - `o`: open the current line in an editor\\ """"""; julia> str = sprint(io->Markdown.terminline(io, md.content[end].content)) ""Misc:\n- o: open the current line in an editor\n"" julia> Markdown.wrapped_lines(stdout, str) 1-element Vector{AbstractString}: ""Misc: - o: open the current line in an editor"" ``` Now: ```jl 2-element Vector{String}: ""Misc:"" ""- o: open the current line in an editor"" ```",f6692582c26fd8d8f01df997e8f3f8a60ed2e6a7::
https://api.github.com/repos/JuliaLang/julia,40181,fe/readme::master,1,merged,backport 1.6::,,c6d5c406974268c6f402ce036da4c0d70b849fd0::
https://api.github.com/repos/JuliaLang/julia,40176,sf/arm32_trampoline_fix::master,1,merged,arm::backport 1.6::,"We copy-pasted the wrong macro here, should have used `CNAMEADDR()` not `CNAME()`.  This causes segfaults on armv7l processors by trying to read from an incorrect address when loading the trampoline target address value. Fixes https://github.com/JuliaLang/julia/issues/39293",09528a74868f454a942d2d164535d23a80eb91be::
https://api.github.com/repos/JuliaLang/julia,40174,pa/sparseti::master,0,merged,backport 1.6::bugfix::linear algebra::sparse::,Closes #40171,fc6cc650ca1ccb8067eb2cc9871f7785ac72fc8b::4dbe8421c493831038102d080a6d2b16a06b86f2::
https://api.github.com/repos/JuliaLang/julia,40163,patch-1::master,0,merged,backport 1.6::merge me::,"Should fix #40004.  Have the uninstall key to be ""{#AppNameLong}_is1"" where AppNameLong contains the Julia version to prevent Windows from overwriting the uninstall information for different Julia versions. Inno Setup documentation about the AppId https://jrsoftware.org/ishelp/topic_setup_appid.htm copied here for convenience > ### [Setup]: AppId > > #### Default value: AppName > #### Description: > > The value of AppId is stored inside uninstall log files (unins???.dat), and is checked by subsequent installations to determine whether it may append to a particular existing uninstall log. Setup will only append to an uninstall log if the AppId of the existing uninstall log is the same as the current installation's AppId. For a practical example, say you have two installations -- one entitled My Program and the other entitled My Program 1.1 Update. To get My Program 1.1 Update to append to My Program's uninstall log, you would have to set AppId to the same value in both installations. > > AppId also determines the actual name of the Uninstall registry key, to which Inno Setup tacks on ""_is1"" at the end. (Therefore, if AppId is ""MyProgram"", the key will be named ""MyProgram_is1"".) Pre-1.3 versions of Inno Setup based the key name on the value of AppVerName. > > AppId is a not used for display anywhere, so feel free to make it as cryptic as you desire. The value may include constants. > > If you use a {code:..} constant to allow your user to customize AppId, you do not need to return the real value until just before the installation starts: if necessary you may return an empty or generic value at earlier times. If not empty, this value will only be used to attempt to restore previous install settings (like the settings stored by [Setup] section directive UsePreviousAppDir). If empty, it isn't used for anything. > > The length of AppId with all constants evaluated should never exceed 127 characters. > > #### Example: > > `AppId=MyProgram` closes https://github.com/JuliaLang/julia/issues/36933```suggestion #define AppId DirName OR #define AppId AppName + ""-"" + AppVersion ``` to avoid the space in the reg key? I think that might make it easier to parse if in the future we add an auto-uninstaller. ::You'll need to delete one of the two options.::",7b60ed47532f3fa1821e6e9f2a6f3d95e9365709::5370517aee9d7cbeff0999c99848ad6cc43d809f::0861925a250d3304df2a1ed1d8fd44f70ce218d2::
https://api.github.com/repos/JuliaLang/julia,40161,cv/git-cred-helper-store-fix::master,1,merged,backport 1.0::backport 1.5::backport 1.6::bugfix::libgit2::,"If a Julia user was setup to use [git credential helpers](https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage) then Julia was supposed to interact with the credential helpers such that if a user was prompted for credentials those credentials would be send to the helper and stored appropriately. Due to this bug a user would be repeated asked for credentials which is annoying. Unfortunately, only if a user had used `git` or another tool that properly interacted with the helpers would the prompts be avoided. Essentially Julia was interacting with the helpers in a read-only mode. This is a long standing issue that was introduced in: https://github.com/JuliaLang/julia/commit/8abc616fb0#diff-c023d2e7a114f660901703fc5bec91bcff1215f598f6126561a050defeced5d1R31.",744ea1ed0b0ac6277d630021fd22fc2e7b6ade46::cc7108a4656b4e8297e039a1c258890b8621bb49::
https://api.github.com/repos/JuliaLang/julia,40150,backports-release-1.6::release-1.6,1,merged,,"Backported PRs: - [x] #39802 - Add explanation about top-level compilation to timing macros - [x] #40109 - document thread safety for RNGs - [x] #40003 - Fix a couple of likely typos in deps/p7zip.mk and deps/pcre.mk. - [x] #40075 - Revert ""add 'ᵀ postfix operator for transpose (#38062)"" - [x] #40062 - Prevent PCRE from needing a rebuild/reconf. Non-merged PRs with backport label: - [ ] #40095 - fix #40050, handling fields that are pointers due to subtype circularity - [ ] #40038 - Allow the conversion of AbstractUnitRanges to OrdinalRanges - [ ] #39544 - fix definition of open I/O to Process - [ ] #38981 - Fix #38491: fix an abspath() edge case on Windows - [ ] #38405 - Make Distributed.jl `Worker` struct thread-safe.",9c452e71535e4185f0c8b633b69ba97f6b3d32a3::981d57362d002e1409ebbc0bb6817dfa46d6e32c::8448050c5d0362b1b06f34aac05fd4a913942a0d::2e9532bb99106cc59993bc5519d1c505c1e78980::60e70d84fbadeea9d03af1d1552c27aa11d6204f::45b1b152ffa94cf442531f9dae0e076e1009097f::
https://api.github.com/repos/JuliaLang/julia,40095,jb/fix40050::master,1,merged,backport 1.6::bugfix::,"Hopefully this works as kind of a quick fix. It would be nice to do better, maybe by computing layouts more lazily, but that would be more involved. fix #40050",42b9c6ca8d323b9902a22d25b4cd437c69c039ac::
https://api.github.com/repos/JuliaLang/julia,40029,backports-release-1.6::release-1.6,1,merged,,"This one should go out quickly because RC2 is kinda broken on Windows. Backported PRs: - [x] #39570 - fix bug in `let` when a global var is both shadowed and used in an RHS - [x] #39801 - llvm-alloc-opt: handle dead code better - [x] #39893 - Canonicalize IR to disallow mutable GlobalRef in value position - [x] #39889 - Faster dot product for sparse matrices and dense vectors - [x] #39916 - fix #39895, crash from deserialized closure using the shared method table - [x] #39930 - Restore StackOverflow error message for repeated frames - [x] #40026 - fix typo in symlink - [x] #39540 - fix internal IR corruption from use of a global - [x] #40045 - Allow startup despite `p7zip` not being found - [x] #40047 - fix #39862, error in inference when trying to apply a non-type Need manual backport: - [ ] #39891 - Add new LLVM patches for Aarch64 issues Non-merged PRs with backport label: - [ ] #39544 - fix definition of open I/O to Process - [ ] #38981 - Fix #38491: fix an abspath() edge case on Windows - [ ] #38405 - Make Distributed.jl `Worker` struct thread-safe.",27fe288aaaba8b628e4de9ee87f4241f17002235::8cef2f9234f9da70f9d329cd2ef52fa411157206::e93da57cc80338ca474680ebd84090de2a2a5b7b::7a4413b36363f6e027bb9657eb351e40f3ec1a31::f20b49afccac0998d91b1ff990cf6772b1d1638f::ca85bb36c1a5ea29b95b56877fc850a554de0292::da99aa3b56ae79770748bd8746c482c7418940aa::572836ad82ae4b0ef792930f9772cc0dfddb8823::046e2cfb44fa35643c04d9f02e7af2dea20d9860::845a52b2eef57339413af7a588144eba52b57545::
https://api.github.com/repos/JuliaLang/julia,39978,aa/backport-filewatching::release-1.6,1,merged,,This backports Keno's FileWatching fix to the `release-1.6` branch in hopes of fixing the x64 Linux failure in https://github.com/JuliaLang/julia/pull/39977. cc @KristofferC,fd604713e8f3ed336e96f386ca3c400a42d9df9c::
https://api.github.com/repos/JuliaLang/julia,39891,kf/aarch64llvmpatch::master,1,merged,backport 1.6::,Fixes #39818 Fixes #39820 Fixes #39823ah nice! I have been using `git format-patch -1 --no-prefix` but this is cleaner::,3f5e5b1f18480e18941d6c4b0bfd6054d6c4d5b3::
https://api.github.com/repos/JuliaLang/julia,39870,sv-onefive-getmore::release-1.5,1,merged,,Building from the present release-1.5 full source tarball fails in environments without network access for lack zlib (and p7zip downstream I imagine). This pull request backports the commit that fixed that issue on master to release-1.5. Much thanks to @staticfloat for helping sort this out! :),f3d8d38ae70d353180721fcc4b8cff9fe8f0df9e::
https://api.github.com/repos/JuliaLang/julia,39840,osxunwind-osx-only::release-1.5,1,merged,,"[The buildbots are unhappy with `release-1.5`](https://build.julialang.org/#/builders/34/builds/1069/steps/15/logs/stdio) for lack of [this commit](https://github.com/JuliaLang/julia/commit/3df8f6442861b194db77801cff3a0efb53100d2b). This pull request backports said commit to `release-1.5`. Much thanks to @staticfloat and @ararslan for sorting this out! :)It's been a while since I've Makefile'd. Does this redefine the `getall` target or does it add the new prerequisite to the existing target?::The latter::Neato, TIL.::",cf4a62693d5861fce4c425aa2c27f2787797397f::
https://api.github.com/repos/JuliaLang/julia,39785,backport_39784::backports-release-1.6,0,closed,,"This backports #39784 to 1.6, adding an item to NEWS.md.",87ee9c3e1a5bcefcc32a17f62bfeafeff8a1cb1a::61a82616a851266803f3483932030984e93761fd::
https://api.github.com/repos/JuliaLang/julia,39784,news_for_39589::master,0,merged,,"As noted in https://github.com/JuliaLang/julia/issues/39589#issuecomment-776389595, it could be good to mention this change in NEWS/HISTORY. This adds a HISTORY.md item. I will also make a PR backporting this to the 1.6 NEWS.md file. Edit: backport PR: #39785How about this?  It's a little tricky to _both_ keep with the style of the NEWS (leading with the new behavior) and also lead with the bugfix (which — by definition — leads with the old behavior).  Here's a shot at walking down the middle: ```suggestion * In `LinearIndices(::Tuple)` and `CartesianIndices(::Tuple)`, integers (as opposed to ranges of integers) in the argument tuple now consistently describe 1-based ranges, e.g, `CartesianIndices((3, 1:3))` is equivalent to `CartesianIndices((1:3, 1:3))`. This is how tuples of integers have always been documented to work, but a bug had caused erroneous behaviors with heterogeneous tuples containing both integers and ranges ([#37829], [#37928]). ```::I like it.::",7cd3b374b36be71af7b3d83eaa6b73485b910434::06529611efdd0a46450ce63676eeb7c71b966fa9::
https://api.github.com/repos/JuliaLang/julia,39772,libgit2_32bit::master,0,merged,ci::upstream::,This backports libgit2 patch to fix zlib stream handling. xref: https://github.com/libgit2/libgit2/pull/5740 Fixes #39617 **Edit:** See #39791 for checksum error,619232059505a9a968433fe656716f6b1361261d::
https://api.github.com/repos/JuliaLang/julia,39664,tb/return_method::master,1,merged,,"Mimicking `jl_new_method_uninit`. Tiny feature that might benefit the GPU stack, so marking for backport unless there's objections.",27ce2b328c751a137c05be7985832629f7b3cfd9::
https://api.github.com/repos/JuliaLang/julia,39614,backports-release-1.6::release-1.6,1,merged,,"Backported PRs: - [x] #38997 - fixed a bug in the build system - [x] #39525 - fix #39521, obvious_subtype issue with `Type{}` and diagonal - [x] #39115 - remove Core._apply Builtin - [x] #39142 - fix some compiler warnings - [x] #39227 - Fix a compiler warning - [x] #39525 - fix #39521, obvious_subtype issue with `Type{}` and diagonal - [x] #39539 - Add missing imports to SuiteSparse tests - [x] #39543 - [cli/trampolines] Clean up definitions, fix win32 exporting issue - [x] #39560 - Improve first/last docstrings - [x] #39557 - use sparse multiplication for sparse arrays time BitMatrix and BitVector and wrappers - [x] #39567 - [build] Fix out-of-tree `stringreplace` invocations - [x] #39522 - Do not print delimiters twice in show(::OffsetMatrix) for matrices with certain shifted axes - [x] #39553 - Fix misunwind during Profile test under rr - [x] #39491 - [file] Fix relative symlinks to directories on Windows - [x] #39570 - fix bug in `let` when a global var is both shadowed and used in an RHS - [x] #39572 - [loading] Search in Sys.STDLIB if name/uuid is known. - [x] #39591 - [p7zip_jll] Set `LIBPATH` and `LIBPATH_list` at init-time - [x] #39610 - special/exp.jl: fix broken jldoctest block - [x] #39615 - Update Downloads.jl - [x] #39604 - expand use of egal for testing type equality - [x] #39602 - fix #39600: broadcast fusion broken for comparison - [x] #39621 - Lock cfunction trampoline cache and freelist accesses. - [x] #39667 - Use lower limit on number of threads in cmdlineargs test - [x] #39671 - Add several compat notes for Julia 1.6 - [x] #39623 - avoid excessive renaming in subtype of intersection result - [x] #39608 - Fix for infinite loop when passing 0d array to setindex of n-dim arrays - [x] #39712 - Add Half precision ppc patch and codesign LLVM binaries - [x] #39668 - UnitRange{Int} -> unitrange - [x] #39726 - avoid corrupting String on conversion of StringVector to String - [x] #39737 - Fix typo in BitVector constructor - [x] #39689 - Protect handle_message from Integer subtype invalidation - [x] #39745 - codegen: define return_roots in normalized form - [x] #39747 - codegen: guard phi node loads of invalid inputs - [x] #39636 - Change Windows CRT func to be considered as libjulia func - [x] #39744 - fix type uniquing (caching) in incremental deserializer - [x] #39728 - ensure to show the whole type, even if the proper subset matched an alias - [x] #39772 - [libgit2] Fix zlib stream abandonment causing clone error on 32-bit systems - [x] #39809 - make copy correctly handle 0-dimensional SubArray - [x] #39778 - jl_egal_types: don't reject equivalence just for gensyms - [x] #39790 - LinearAlgebra._generic_matmul! : Avoid division by zero for tile_size. - [x] #39833 - Update Downloads.jl to fix download hanging, fixes #39789. - [x] #39821 - fix #39804, ABI handling of structs with String references - [x] #39854 - cmdlineargs test: on 32-bit systems, impose a constant upper limit on the number of threads - [x] #39839 - [BugReporting] pass `ARGS` through properly Non-merged PRs with backport label: - [x] #39875 - fix #39698 by disabling the unnecessary Vararg var bounds error - [ ] #39801 - llvm-alloc-opt: handle dead code better - [ ] #39785 - Backport #39784 to 1.6 - [ ] #39544 - fix definition of open I/O to Process - [ ] #39540 - fix internal IR corruption from use of a global - [ ] #39378 - Restore StackOverflow error message for repeated frames - [ ] #38981 - Fix #38491: fix an abspath() edge case on Windows - [ ] #38405 - Make Distributed.jl `Worker` struct thread-safe.",d48bc9a61aebf68b1cbbf65890204c25d9f99a80::8ea14b068a8764fc2b83234ff6d324fd08f3f45e::cb191811a8513778a756598cef190956c905b477::28e8adcce2cd0cfa8936a2f629dd870961f8b011::62400b58751dae0070bfc6ae74b48d0029c5610e::6ebd6128f123353f8dd3fc0d5421e35b6dafe44f::42b064c2ae60d702cd16fd7a65649990732dfd27::d330214abc6aab3b1372ee5324c46675edd9550a::29209368e56f04eb368eaee26238f36a78c4ffce::dcd618bbecb8b6c0c1b6c4505a9c88359ec0a79d::4558f476e3133e6e45d65c726edc5a2d72da590e::0f7dbf7c40e22e4971cdd647f1b5c4c167c5f9ff::27f3ae728eae6fca454836c42956a8b406ecd912::4ad0ffdb2476ef1c9e9f5553d4ca191ea56927a6::8a03167f92d73573a15cd2722f7acb8d2695014d::c74bc146f4c98b20160e2549f828cb0fe8fad794::2e322bebcb6b7c041e4663c2868ccc53e603005a::20b967a1aaf1314de596e4d98ee7ec4a623b5205::56a3fb71f2a54a4deeaf765b7a318b72897f6891::5f6094a6e2f715ad93b282b3010125f0a1e17852::5fcecb402e6a907b2ff954c5cca8443136d8d94a::4266e6d651f39670aa7d6cb24f2088be5febdf06::8e316dcacfbf488e0b936fcaee9476782216325b::7ce2441cbc32bda2ca7dc2189e3657ee90ca43d4::d37a8d4e8f2d76924cb46e94931e03fa7c3417f7::295995aa07fd27b8dccf883bff11ac0c1dfc9f3b::999e12d50e7e014191bac340b6898a53c1066526::502bb3878895aa5922a65804abf79fdd95fa8be6::7fb0434d9dc2629416a567790b2af0d5030bdf27::684587d83e9a6e5cd6901d8e6ed174322935d3f7::de9832c5683d5a588d3f5bd684507751bd28f135::194e774be82b4b637779af360b78eb6e0ac65913::fe155d82de5777b7c33bb7aed97d61982f59b8b7::ae95fcc6b05ef519ec9086cf8a6717641e572c85::73f1cd3bda33bd17f54ab2c183f90f1468d916dc::24ed37ff800b24448e282e853119d0d71a681d93::65dbb778bcad178a8266dbc014dc12e0ea986dfb::171f7e6c099ba6633ad7ef462d44745ae5d71820::df40b3502c30b3edcbeca83351fec027adb0046c::8456a426023b58062aa72874d8777b26d22c3ddc::dcc2a2df14f6aea9f458b75b26b5d8ca6068f550::df057a1e46a96f2fa378d0b797febd9508b29c0e::f6a471c64d9e1fde6c1ef64c0472c52aad73ea66::cc4f2363129b1bf07b08c9d416ba7bf06537b248::ddf944072a234d59407d02b0dd7fb7138ec0dffd::97383c6b680297b45660816a42630ad11bb6ba84::4161f4a0888300aca3e41e46a60c0980bcfe66f6::cc14111fae98bd964b8f480b404fa0c7e10dbbd5::bf093a1ea9a2c0add9fcda5fb3daaef190c1835d::fef4add3cb34f9a6bf3413a89daa0bfeb90e9973::859577b102c75702585b07f002e75464385df042::d06bab00016d5d372af876e2b56bddc2adbec97c::1e206302cb6393301a27be391772436f3d7791b2::f731fbbedd8d5f59ee56c1573845acef130b0f92::
https://api.github.com/repos/JuliaLang/julia,39591,mg/p7zip-libpath::master,0,merged,,"Fix #39154, take 2 (or 3?).  Ref: https://github.com/docker-library/julia/pull/51#issuecomment-776297077 Should be backported to `release-1.6`As far as I could see, most JLLs do something like https://github.com/JuliaLang/julia/blob/5d7e13f0dec118f86df2cf3d8999549cd47c32c2/stdlib/LibGit2_jll/src/LibGit2_jll.jl#L33-L34 because they're libraries, and only need to add to the libpath the directory they're in.  However, 7zip is in a different directory, the best I could do was to try both `joinpath(Sys.BINDIR, Base.LIBDIR, ""julia"")` and `joinpath(Sys.BINDIR, Base.LIBDIR)`, is there a better way to find the directory where libstdc++ is?::",2da8c98287d7fa0318949a2558b392b3f8803626::
https://api.github.com/repos/JuliaLang/julia,39548,backports-release-1.6::release-1.6,1,merged,,,1dacf6686fbea3519d4b042a1abd53c5b7153077::
https://api.github.com/repos/JuliaLang/julia,39519,compatformat::master,0,merged,,Some compat notes in `REPL.TerminalMenus` were not formatted correctly. This should be backported to 1.6.,5d4ae92430b8c6821066d4c8392586add94ad8d3::
https://api.github.com/repos/JuliaLang/julia,39503,reinterpret_reshape_compat::master,0,merged,,"The method with `reshape` as first argument was added for Julia 1.6, this PR adds the usual note to the docstring. This should be backported.",c2820e0c662b4f11b139eb865dbdaa2c694ea2bb::
https://api.github.com/repos/JuliaLang/julia,39495,backports-release-1.6::release-1.6,1,merged,,Is this the only one? I guess the other platforms need to be updated too?::,62fe04c81e68889d6de9fa8225c2d9e2c14912d6::edb5a5dcc0a61675f0d19654dcbb3585fb08face::81329da85fcc956ae2c463aa5547841bff86c6e8::
https://api.github.com/repos/JuliaLang/julia,39488,backports-release-1.6::release-1.6,1,merged,,Missed https://github.com/JuliaLang/julia/pull/39404,28a6984d53e9eb73331d1d606266b002d0c94adb::
https://api.github.com/repos/JuliaLang/julia,39480,backports-release-1.6::release-1.6,1,merged,,"A few more stragglers Backported PRs: - [x] #39185 - Fix broadcast error when eltype is inconsistent with getindex - [x] #39422 - render Regex and SubstitionString correctly for repr - [x] #39459 - 🤖 Bump the Downloads stdlib from 64368fb to 0d798cf Need manual backport: - [ ] #39115 - remove Core._apply Builtin - [ ] #39142 - fix some compiler warnings Non-merged PRs with backport label: - [ ] #39446 - fix #39426, at-which not working with `..` function - [ ] #39390 - Set -fno-gnu-unique for building LLVM - [ ] #39378 - Restore StackOverflow error message for repeated frames - [ ] #38981 - Fix #38491: fix an abspath() edge case on Windows - [ ] #38405 - Make Distributed.jl `Worker` struct thread-safe.",44a392d926321194669497c6b9619bd81d9a8fa4::1c2248636cec1c048753f9768e718ea46ae1450b::7df31ad84b62371ea3e573defedc87599fc6683d::
https://api.github.com/repos/JuliaLang/julia,39429,jn/speccache_array_bug::master,1,merged,bugfix::,"Noticed this bug (which was moved in cc1623ba6c3, but originally introduced in 4c4e0788465) while exploring code internals Those were backported, so this needs to be also.",29f2e85aae9be22e744002b5965cfa1a0568212f::
https://api.github.com/repos/JuliaLang/julia,39402,mh/fix_38971::backports-release-1.6,1,closed,bugfix::inference::,"Fixes #38971. Alternatively, we could just backport the relevant part of #38136, but that would loose some precision for the non-const part compared to 1.5 (inferring as a vararg tuple even tough the type that as being asserted to is non-vararg), while this patch maintains it. Note: PR against backports-release-1.6.~~release-1.6. Or should this be against the backports branch?~~I'm not 100% sure this is safe, as type intersection might be imprecise. Maybe instead substitute `tr = widev` if `!(tr <: Tuple)`?::",5c5e25546953f6376663bbb5a7609a7bf3d9c932::
https://api.github.com/repos/JuliaLang/julia,39372,patch-1::master,0,merged,backport 1.5::backport 1.6::doc::merge me::,"Changed ""assymmetry"" to ""asymmetry"".",1bf0f2a9a817a342edc1313e12afcd14f57ff37f::
https://api.github.com/repos/JuliaLang/julia,39366,jn/compacttypealias::master,1,merged,bugfix::,"There were some cases where the `where` clause we print would be incorrect in some way. This alters the printing to prefer the compact form of where (with {}`), and ensures it prints the environments correctly.Should this change be removed for the backport to 1.6?::Yes, this commit can be ignored for the backport::",2684eac97f8cfe443f306db180f5e209ab8c1edc::48ad01d89508f878ce27d76800c77dba6ac501e4::b6df6c260f01ae23b5bdbff49b2693c6d6433510::ee816ef4f27c7e1eb531083fcb57933d1e5af1e5::
https://api.github.com/repos/JuliaLang/julia,39356,nhd-backports-release-1.5-manual::backports-release-1.5,0,merged,,Perform some manual backports for https://github.com/JuliaLang/julia/pull/39351 - Backport #38679 into release-1.5,4f70156cb81413d841aa53a90da72a6e1ce8e52c::
https://api.github.com/repos/JuliaLang/julia,39351,backports-release-1.5::release-1.5,1,merged,,"Backported PRs: - [x] ~#36396 - fix showing methods with unicode gensymed variable names~ (in 1.5.3) - [x] ~#37236 - Add INNO_ARGS makefile var for signtool~ (in 1.5.3) - [x] ~#37407 - Bump libuv to latest commit~ (in 1.5.3) - [x] ~#37562 - Revert ""Improve typesubtract for tuples (#35600)""~ (in 1.5.3) - [x] ~#37769 - Fix `getfield_tfunc` for `PartialStruct` with `Vararg`~ (in 1.5.3) - [x] #38002 - Fix tall qr multiplication - [x] #38399 - Fix segfault in static_show, by using correct `vt` instead of `typeof(v)` - [x] #38551 - update to utf8proc 2.6 - [x] #38900 - update to utf8proc 2.6.1 - [x] #38270 - added automatic keyword assignment support to test macro - [x] #39265 - aotcompile: avoid cache lookup when disallowed - [x] #38487 - threads: avoid deadlock from recursive lock acquire (https://github.com/JuliaLang/julia/pull/38753) - [x] ~#37594 - dump: ensure Array eltype layout is initialized early~ (in 1.5.3) - [x] #38679 - Report the top of the exception stack when there's no handler. - [x] #37645 - fix fields description of Module type - [x] #38402 - fix #38386, macro defining empty function with escaped name - [x] ~#36821 - Fix function call to rec_backtrace_ctx when using USE_SYSTEM_LIBUNWIND=1~ (alt in 1.5.3) - [x] ~#37101 - make Profile more thread/signal-safe~ (in 1.5.3) - [x] #37557 - Fix === and objectid of object with potentially undef inline immutable field - [x] #37891 - fix #37880, overflow in shift amount range check in codegen - [x] #37896 - fix #37872, avoid cycles in codegen for `===` - [x] #37243 - code coverage fixes - [x] #39038 - [libuv] Bump to include `DELETE` win ACL patch' - [x] #39153 - improve performance of disabling finalizers in locks - [x] #39336 - fix failing `enable_finalizers` test TODO: - [x] FreeBSD build failure - [x] Turn https://github.com/JuliaCI/julia-buildbot/blob/master/commands/rr_capture.jl into a Noop - [ ] @Sacha0 - i also did this backport, here (oops, we collided. I'm happy to drop that now that you've done it 😊): https://github.com/JuliaLang/julia/compare/backports-release-1.5...NHDaly:nhd-backports-release-1.5-manual And i wasn't sure whether to pull over the `isa Type` change as well. Technically that was added in https://github.com/JuliaLang/julia/commit/dcc0696971a100dbc63f90b8789632631dd1bfef, as part of (#36596), so i wasn't sure whether to backport it as well. Supposedly it's just a code cleanup, but i'm not sure if it holds in isolation from the rest of the commit. I think the closest transformation keeping in spirit of the change we're backporting from (#37645) would be just to drop the `Module` part, since that's all they did in the original PR? Like this, perhaps?: ```suggestion if s0 == Type{Union{}} || isa(s0, Conditional) ``` PROBABLY fine either way, but since i see you made a different decision than I made when attempting the manual bisect, I wanted to just bring this up! :)::To see the diff standalone, it's the change i made: https://github.com/JuliaLang/julia/commit/cc099114749a53490d7903dc122dd813609ea569#diff-94ffb7fc1a419bb8439ae0ecbb4a3b5460d193e53c96bb97b50e283fdbc16a85L932-R932::I wondered the same, but err'd to adding the `isa Type` guard as `== Type{Union{}}` cannot be true unless the guard is true, and if the latter is true then the former must be true as well, so this transformation should be functionally identical modulo some additional safety with the guard (against `== Type{Union{}}` throwing something for non-`Type` `s0`s)? Either way is fine by me though :).::",fd3af72f6c83774132496731cf9353d302772499::fd30588d6c03b533c0f990379a770ffe72e8af27::65f39a71689a03cda7eab845948269861be1d29d::8dbf7983ccb39fb127fa1a17970ca418f536e982::ae8c3a0280fdb7d8cdc2cc319f66db872d116b3a::4f70156cb81413d841aa53a90da72a6e1ce8e52c::24a46378b04554f44105c1c03c94ceea7a2e6cee::d179f48542fb7bd1645d29bce30f23f82a2e669f::94af03efa11d25b9709d022648b63634c5870581::b9ba10a77e4fbdefe020ff114e504be94ee398c6::a4ac1f98a991cbb1d157fe0d22ab60185afbcd25::9fc38b868194e4f4dc3ad8148a80de35b569486b::7b05f4281aaf9fb58662d55dfba4c092768a08a6::8684c3d0fb0d40b33830c6e0f36d95782d5427a3::1c3326fc35b05136037f854a26f168d37e41cd55::cb75d49c60c7df040079300c41fb2176d136435e::c39f8c51d4dfb5e00e91ec13e537f1798c6b8de3::81c044a7b85fe0a86e83594344beea63b6d8f1d4::
https://api.github.com/repos/JuliaLang/julia,39287,ib/bump_pkg_16::backports-release-1.6,0,closed,,Adds - New precomp during Pkg.test https://github.com/JuliaLang/Pkg.jl/pull/2343 - Consistent alignment of status printing https://github.com/JuliaLang/Pkg.jl/pull/2342,d95cacb37b424467a3ad9264c5700cd7907e51bf::
https://api.github.com/repos/JuliaLang/julia,39256,jb/compacttypealias::master,1,merged,display and printing::,"I just noticed that the ""compact"" output for type aliases is currently much less compact: ``` julia> show(IOContext(stdout,:compact=>false), MIME""text/plain""(), Matrix) Array{T, 2} where T julia> show(IOContext(stdout,:compact=>true), MIME""text/plain""(), Matrix) Matrix{T} where T (alias for Array{T, 2} where T) ``` after: ``` julia> show(IOContext(stdout,:compact=>false), MIME""text/plain""(), Matrix) Matrix{T} where T (alias for Array{T, 2} where T) julia> show(IOContext(stdout,:compact=>true), MIME""text/plain""(), Matrix) Matrix{T} where T ``` This is new functionality in 1.6 so I would consider backporting this frankly.why can't you do `show(io, x)` here since `compact` is already `false` in this branch? Or just `print(io, "" (alias for "", x, ')')`?::```suggestion if make_typealias(properx) !== nothing || (unwrap_unionall(x) isa Union && x <: make_typealiases(properx)[2]) ``` Otherwise you also get this other funny bug: ``` julia> @eval Base const VKD5{T} = Dict{T, Integer}; @eval Base export VKD5; VKD5 VKD5{T} where T (alias for Dict{T, Integer} where T) julia> @eval Base const VKD4{T, Integer} = Dict{T}; @eval Base export VKD4; VKD4 VKD4{T, V} where V where T (alias for Dict{T, V} where V where T) julia> VKD5 Dict{T, Integer} where T (alias for Dict{T, Integer} where T) ```::Hm, seems there's already other problems with this PR (see doctests), so I'll fix that in a separate PR instead.::",0db987728dd001423f05aeb2bf0650beeeefbd45::
https://api.github.com/repos/JuliaLang/julia,39253,teh/invs_show_Test::master,1,merged,,These shouldn't be backported since there are other recent changes to the same functions.,680a052c29f80236a8e40e929012122be4c3c75a::
https://api.github.com/repos/JuliaLang/julia,39239,mh/Vararg-no-type::master,0,merged,,"I used the term ""special value"" as that is used a few lines above. Perhaps this could be backported to 1.6, to avoid confusion there, too?```suggestion The special value `Vararg{T,N}` (when used as the last parameter of a tuple type) corresponds to exactly `N` elements of type `T`.  `NTuple{N,T}` is a convenient ```::",d1698ae390ebcbbce69c52ff4e76354f643e372e::
https://api.github.com/repos/JuliaLang/julia,39226,mh/backport-missing-fix-to-release-1.6::backports-release-1.6,0,merged,,"When backporting PR #38938, one commit was omitted, which means that issue #38925 still affects the release-1.6 branch. This PR backports the missing commit. CC @KristofferC Fixes #38925",e5e1327b9957a36dbb385efe31efd7623bcac585::
https://api.github.com/repos/JuliaLang/julia,39216,cv/openblas-0.3.13::master,1,merged,backport 1.6::external dependencies::linear algebra::,Fixes https://github.com/JuliaLang/julia/issues/39201. Requires https://github.com/JuliaPackaging/Yggdrasil/pull/2385. ~~Possibly this PR also should include the `neoverse-generic-kernels.patch` used with the BinaryBuilder version.~~ (the additional patches are for GCC and don't apply here),b63dc10baa7aee22a3b84b6249548cc35bcb806c::914c56172c73b7bd5bebfa72e4a3b51edce2deb3::647dc90c1009884589b72842d664dcc3ff9eb94d::2af8d00333944d962014998623db140c374ebc4f::e06ca245ad2096b4ccf316a1fc0b07a236aa0b1c::
https://api.github.com/repos/JuliaLang/julia,39160,backports-release-1.6::release-1.6,1,merged,release::,"- [x] #38830 - fix erroneous code path within `show_sym` - [x] #38938 - Fix symbol trampolines for OSX and export `jl_n_threads` - [x] #39101 - Fixes so that test suite can run in more tightly sandboxed environment - [x] #39149 - fix count(::BitArray; dims) - [x] #39140 - gf: avoid adding cache entries wider than the original method - [x] #39155 - Fix `p7zip_jll` environment setup - [x] #38876 - [WIP] Speed up dense-sparse matmul - [x] #39215 - fix return type for `jl_uncompress_argnames` - [x] #39210 - [Artifacts]: Support `using Pkg.Artifacts` with LazyArtifacts - [x] #39251 - Fix binaryplatforms `union` invalidation - [x] #39246 - staticdata: fix unreferenced data assertion - [x] #39236 - codegen: mostly fix uses of undefined PhiNodes - [x] #39262 - fix #39259, leave `Main.ARGS` unresolved on startup - [x] #39152 - Fix macos codesign workflow - [x] #39274 - Use arch-independent magic number as start seed for Preferences hash - [x] #39265 - aotcompile: avoid cache lookup when disallowed - [x] #39252 - Prevent TOML invalidation by pirates of `T[elements...]` - [x] #39237 - fix #39218, bug in subtyping fast path for tuples with repeated elements - [x] #39153 - improve performance of disabling finalizers in locks - [x] #39319 - Rebase: Performance regression of scalar randn() between Julia 1.4 and 1.5 - [x] #39292 - Force-specialize on `T` in `cat_similar` - [x] #39153 - improve performance of disabling finalizers in locks - [x] #39294 - Improve inferability of shape::Dims for cat - [x] #39316 - Preserve input type for unaliascopy(::ReinterpretArray) - [x] #39321 - make `extrema` with dims inferrable - [x] #39315 - Only create legal int types during alloc opt - [x] #39336 - fix failing `enable_finalizers` test - [x] #39131 - MbedTLS source build fixes - [x] #39333 - Fix performance regression in broadcasting with CartesianIndices - [x] #39221 - fix some issues with inference Conditionals - [x] #39247 - Follow up #39221 - [x] #38820 - inference: stop re-converging worlds after optimization - [x] #38871 - rm unnecessary `widenconst_bestguess` call - [x] #39116 - Improve inference SCC '[limited]' code computation - [x] #39275 -  Prepend build_bindir to LLVM_CONFIG_PATH_FIX rather than append - [x] #39324 -  LibGit2: patch to pass hostkey & port to host verify callback - [x] #39279 - Correct mbedtls-cmake-findpy.patch whitespace. - [x] #39364 - libgit2: fix for broken SSH host callback - [x] #39375 - inference: SCC handling missing for return_type_tfunc - [x] #39343 - gf: invalidate when adding new methods - [x] #39073 - Add basic docs for (Lazy)Artifacts stdlibs - [x] #39211 - Add libldl to SuiteSparse libs - [x] #39212 - Copy libgomp as part of CSL build - [x] #39366 - bugfixes for showing type aliases - [x] #39387 - Don't touch gvars when compiling for an external back-end. - [x] #39398 - [LLVM] Replace patch for half FP on Power8 - [x] #39408 - fix #39405, saving modules with renamed imports - [x] #39414 - implement with fewer afoldl methods - [x] #39393 - fix #39379, use first∘LinearIndices instead of 1 - [x] #39445 - 🤖 Bump the Downloads stdlib from 9d841d9 to 4e55241 - [x] #39429 - remove bad method specialization from cache - [x] #39256 - make compact type alias output more compact Need manual backport: - [ ] #39115 - remove Core._apply Builtin - [ ] #39142 - fix some compiler warnings Non-merged PRs with backport label: - [ ] #39446 - fix #39426, at-which not working with `..` function - [ ] #39390 - Set -fno-gnu-unique for building LLVM - [ ] #39378 - Restore StackOverflow error message for repeated frames - [ ] #39185 - Fix broadcast error when eltype is inconsistent with getindex - [ ] #38981 - Fix #38491: fix an abspath() edge case on Windows - [ ] #38405 - Make Distributed.jl `Worker` struct thread-safe.",7be973129cc75fa8cfed6f458be418a09835d635::f3eabcd2eb8307b41b5d8247503f213a59cf50ee::cae992f9a7f900b720eabb5f6d921f873d93cce7::db13dcccd7226fb4ef2c19c38b11413e1f432e30::7657c36a2896af1604628ed5eac4663c35197b4a::684156d9a2a23dfd670dd55bc3e6a5b8189b6a11::07a3c9e9063962346545734c92c47e7bd1bd9185::56ff37a58365ef5a888c4cbdfebb6a57144f6488::452fd949a32a115864e641158a89d534c88220ec::4d96149afd186b16d14700d634851468edecda30::8c7e6070976ec4a8d5813512924745ff315c3571::3a8fc6319e6e75d47849d71fd8f99075c5ec0a33::fbb68c34ff9ebdcfef9f1130db9733e240ef9d9a::582b1e8e5acb63d8cd0f11dddcbb7cef524cf7b6::ddcffdea43d6ec4f161935a9255579d67edecf80::5264d86269c61b6183549ee68129b0d5a42d8dec::b20a60f29a434856ce52cd7f81859597262de955::c7b5b47ba98f97cb25b52ec7ba7195bf83b8f82a::1b266d6b12ca66601a918186e9a54f8e31951d70::7e2e822c4bed01f6ef43aeb5a32126289051b92f::fa6e44bb4031a7d179692c2f500ccc3579633c3d::55cd5ef6d08cccb2b7e42aab8a6df95acbc4975d::476209e3540819e377146c931ec114aad867918c::15008b18ee703244513277ec3408614bf9ad05fc::8714f1b38832eb133af190c3748eda43973cc94f::b004ef31e8e659241acb8b99e4ed62d8b4167121::969cb57a19614cfaf6f7fe2a1390441f998bdd2a::908eea7f58560d34be260f145ca715131340e297::51653b4a7cb21ed8224caeea9661e3fa3f46c621::987c521f6e1645834fa2a22d37f2621cf8ca27dc::9ed54c96121a224020dc2bda661eb55753258dab::7b848f8c7adb1275045561eaceee172a23250460::9b79f5e3b78ecb9d7bf7bdf58184de35404bf4fb::f873e56b1073527308f2c6b5dc8bc1662de2c65f::99069e705191328d58be53e99cb7143e9df3bb76::4ccfd6d6e9cdd9a15e8b3ddd88c6671b0335b046::a7a9fe5721eb9080380cf13c4404cee1cbecf004::fdf9ea2ac872ea02bc2910020f8b26fab5d37548::4904312bff24e8661b4429be0c3d5661e51ac209::e8d527e15c8a6e60227d6f2c67e656d3ea8f8dfe::4c081891e5fa9ca97a49f7124c68fec6c8a9d054::9719e6e523f649832420d38759938573e592911e::14ba71b9861e0e01703541910bf63502be3e91dd::3c3e2e344b0c922f574f54826f90e589bea0a579::a1c8ec8fa4a61bc95478479c2d9f60486c0c5224::ba1f4cf98d5d20cd08c127bcf08fcf1f99d7f8c9::f28385ccd081659a0a1c6d7548f42f435feceabf::8bcc60f7ab4a9cf7f6b9494a88a84baf953b1e7c::d9306d4b9b1afc820278bdd725af62c20c7b19aa::83d77fc325f2a8db63949aed383de41130f15277::2a2f49795602d15961ffdab0da24bbb46c07c868::bc49839ad04b2b300c9a1fece267b44e7dfbe530::2845d87d0a53676a9ce2fbfd2b4bc86d4671da62::38b3048f70944de7a2501b0a10d0ec8a706fd1d1::7d1533dbf4da2a1b8121180974bc26acd9d1ae9b::336ebb7f3211580cf10e406b6f362cc15d017af5::3f30e423912c0f11f5f1c2054ac16dbff3f5c4a8::2e524c9e90add1bfcfea80a52cd0d2c0ccd2238d::0d75f03b4a87e15793c2dbd35a38cba348bfd28d::f5be2e5570f2fcfb8f7712d9d1fe2da6b0e81df9::ba575cade32dc52e5976869f36c7a35cc7f6180b::d5d50f3cdf08902307b92d63ed52dc57f3079e0d::5ba2d9c4679bf82ee5ffab2e0fd851fc4b4f2f87::e8e1765967fc5906147d251cc44ef94fce8c5cc1::a5d3675e1e4ffe923e4879cbebf8130c44143b96::bfae07c8448d7252d7ad3c64a6cc7a15a5a6582d::d0b97ea75ce9b7b00415e20fd02e2dfb7847d1e2::fa66cb34bd95b8f46603d06bee0b3a51a306c40c::aeca6f18a6f74bae6a9d4828cf313fe71f073ba2::52fbe7fe0c04ed6d5a22084ce6f2fdcf21e20c8f::5d0a7dc06608e34c3c77dab81eec746aff07b97b::0fa7ab9c6e1d9993bee834f1b76cfd454cff31be::8a2dc271767f1dff4203d6c3677056b348f43fad::84ee166f1379211f5796d3e2f1c52f1b701fe066::afa7544b10468bd2389097a2b764f275645196bd::0348505dc57c34cb12ff87a7542ce5c2dfe07e13::8b7c13310ee40302fe4a479cf6c338c53e84b2bd::4aaeaf727b92eb255edc8f2def6065503b8cb00e::0e90f6c210c08a9b64593fefb8cb8da933016068::
https://api.github.com/repos/JuliaLang/julia,39106,im/gcc11_master::vc/ppc_llvmpatches,0,closed,,"GCC 11 has changed header dependencies again, so the build of LLVM fails because `<limits>` wasn't being included when it should be. This is already fixed upstream in LLVM 12. I have gone ahead and told it to apply the patch for the most recent few LLVM versions because the same patch is supposed to work on all of them (the patches to fix the Fedora LLVM builds are the same for LLVM 9, 10 and 11). This should be backported to 1.6 so it can be built with GCC 11 and LLVM 11 not from binary builder.",628b7acbb51da9886d7c1d33fd96b32a5316b37d::974e6ecc56d2502706e71bfed094f208d7f960b9::1dc380411545627d7e8af51b87d1bafaceade194::e2f40737c5b3456f04519ba78a8114f878811717::ee66728d22506482df7ee2a52db47702c1671637::1a333a9b7719ffd0cf1d7063af1f63d25c7aeb61::383db9262e286d147e922e45309a58510bd97dcf::ee6f6f1caf06f78c130c37ca8791a97aed0116ef::3931b225430d4165cc3603ad3c2919ca4e28fdfa::f5c8e985fe8e8c0c2a1f98179515427dcf5d321e::
https://api.github.com/repos/JuliaLang/julia,39097,mp/documenter-0.26.1::master,0,merged,doc::,"Includes JuliaDocs/Documenter.jl#1497, which should make sure that the documentation doesn't have funky permissions when `make install`ed. If that's fine, it would also be good to backport this to 1.6.",9c0c184cc3483d59f7a213099c025fa8f9698214::
https://api.github.com/repos/JuliaLang/julia,39038,sf/libuv_delete::master,1,merged,backport 1.5::,"This bump to LibUV adds an important permission to files which should allow them to be deleted more reliably when created in ""system""-like locations such as `C:\`.",9d5371672ce87d94655438085e0fe698f910d2d8::
https://api.github.com/repos/JuliaLang/julia,39032,dpa/docs-for-julia-num-threads-env-var::master,1,merged,doc::multithreading::,"This adds docs and news for #38952 Also, the docs had a statement that is now outdated by https://github.com/JuliaLang/julia/pull/36778, so I have removed it.The change to this paragraph should be backported to 1.6.::Sounds good. I'll make a PR to `release-1.6` to fix just the part of the paragraph that applies to 1.6.::Here's the PR for 1.6: https://github.com/JuliaLang/julia/pull/39118::",d9e2a35f9cbd2bba2b64e2a131a4399baacccfff::530347c15f2a57a1e99f9a1d3e9d2c4ce0f68aed::664897fcccd2ba32c4430b6935f5d782b0c2549c::
https://api.github.com/repos/JuliaLang/julia,38981,fix38491::master,0,merged,backport 1.6::merge me::windows::,"Fixes #38491.I think there's some opportunity to minimize code duplication, as follows. This also handles looking at ENV when necessary, matching my observations of how `realpath` would handle these paths. ```suggestion if !isabspath(a) cwd = pwd() a_drive, a_nodrive = splitdrive(a) if a_drive != """" && lowercase(splitdrive(cwd)[1]) != lowercase(a_drive) cwd = get(ENV, ""="" * a_drive, nothing) # check DOS directory if cwd === nothing || !endswith(cwd, '\\') || !isabspath(cwd) cwd = a_drive * path_separator end a = joinpath(cwd, a_nodrive) else a = joinpath(cwd, a) end end return normpath(a) ```::```suggestion @testset ""issue #38491"" begin withenv(""=X:"" => nothing, ""=Y:"" => nothing) do ```::```suggestion end; end ```::```suggestion drive = (pwd_drive == ""X:"") ? ""Y:"" : ""X:"" ``` optional style nit: this is a somewhat more canonical form::Why do we have to bother with DOS directories? :: It would also be good to avoid   accessing environment variables, unless necessary. ::@vtjnash  I just rereviewed your suggested changes.  I like the proposed updates, as they consolidate the code and is more readable. My only concern, do we really need to bother with the DOS checks (at a quick search I couldn't find a reference on them)? If they are not necessary, I think it would be good to remove them as it would avoid any issues checking environment variables with, e.g., race conditions etc. ``` cwd = get(ENV, ""="" * a_drive, nothing) # check DOS directory if cwd === nothing || !endswith(cwd, '\\') || !isabspath(cwd) cwd = a_drive * path_separator end ```::We could assume `cwd = nothing` there (nothing in ENV). It won't match the Win32 system behavior, but it wouldn't necessarily be wrong either, since we don't claim that this function does.::```suggestion cwd = a_drive * path_separator a = joinpath(cwd, a_nodrive) ```::",1d5c34f6aa04a25fcfc524db13a179a277b524d9::d580960f8c49a9a050942a685de5dbeec857ce86::2bca0e9411abd56395a2b9e425f7c7d37e960b0e::b37e29057e643e21760afbd0231d275c10694e86::
https://api.github.com/repos/JuliaLang/julia,38969,sv-tarball-stdlib-art-bp::backports-release-1.6,1,merged,,Title says it all :). Best!,033b878fba93d4f14ce890fc7a285b16c2563b49::
https://api.github.com/repos/JuliaLang/julia,38968,sv-mbedtls-cmake-findpy-bp::backports-release-1.6,1,merged,,Title says it all :). Best!,88ea2a17272dd9ba770da8e0e3ba644e7b174704::
https://api.github.com/repos/JuliaLang/julia,38955,show_sym::backports-release-1.6,0,closed,,"fix erroneous code path within `show_sym` currently, `show_sym` can recur into `show(::IO, String)`, but it's a bit ""erroneous"" since `is_syntactic_operator(::String)` is not defined. --- The original PR ( #38830 ) is merged into master but not into backports-release-1.6. The following will cause a similar error as reported in the original PR: ```julia julia> :(@..{1,2,3}) :(#= REPL[XX]:1 =# @Error showing value of type Expr: ERROR: MethodError: no method matching is_syntactic_operator(::String) Closest candidates are: is_syntactic_operator(::Symbol) at show.jl:1221 Stacktrace: [1] is_valid_identifier @ ./show.jl:1399 [inlined] [2] show_sym(io::IOContext{Base.TTY}, sym::String; allow_macroname::Bool) @ Base ./show.jl:1438 [3] show_sym @ ./show.jl:1438 [inlined] [4] show_sym(io::IOContext{Base.TTY}, sym::Symbol; allow_macroname::Bool) @ Base ./show.jl:1442 : <snipped> ```",134b3d9fcceaebde20bdb7a044429c5f5bdb012e::
https://api.github.com/repos/JuliaLang/julia,38949,backports-release-1.6::release-1.6,1,merged,,"Backported PRs. - [x] #38804 - Switch back to LLVM ORC v2, take two - [x] #38899 - fix #38888, pessimistic sparam inference with concrete upper bound - [x] #38954 - minor inferrability tweak for `manifest_deps_get` - [x] #38950 - Repair jl_init. - [x] #38960 - [Artifacts] Note the platform we're looking for in our error message - [x] #38975 - Assert that _artifact_str returns a String - [x] #38958 - Construct constant LLVMPtr correctly - [x] #38980 - Fix trampoline on PPC - [x] #38496 - Update the AST docs on `nothing` `:method` expressions - [x] #38800 - [loader] Must invalidate `.o` files when `VERSION` changes - [x] #38962 - Source tarballs should contain `StdlibArtifacts.toml` files - [x] #38933 - Carry MBedTLS patch that works around CMake 3.18.2 bug. - [x] #38942 - win: Set correct folder permissions after folder creation - [x] #38938 - Fix symbol trampolines for OSX and export `jl_n_threads` - [x] #39038 - [libuv] Bump to include `DELETE` win ACL patch - [x] #39097 - Bump Documenter to 0.26.1 - [x] #39009  - Improve consistency of SONAME usage, fix debug installation - [x] #37741 - Fixes for non-Int based lengths - [x] #39052  - Various fixes to trampolines for embedding on Windows - [x] #35539 - Test suite tweaks for rr - [x] #37723 -  Fix cross-compilation of libjulia - [x] #38915 - Measure compile time only when using time macros pt.2: handling when code under test throws - [x] #39112 - fix Meta.partially_inline! again Non-merged PRs with backport label: - [ ] #38981 - Fix #38491: fix an abspath() edge case on Windows - [ ] #38775 - [Make] remove BINARYBUILDER_LLVM_ASSERTS and use LLVM_ASSERTIONS instead - [ ] #38405 - Make Distributed.jl `Worker` struct thread-safe.",06171f60fc52c987fba190284cdca856c8db0ee5::264d8556f2c3be31b2692625a333333640724b1f::c678cefd71eb6a4d6bda813ae4f88cf3899b7f92::0372159ce597b97219884ed11bf4347416310159::715eb606cc0996f4d3e70889222bca02235465b2::f676019fc39b5be252710e027e522ac3755ce8f0::e550e87614d1dfd4f7c0cc680162a7d4f9e9958b::a67b6627b45d678e306ee92162248146bee020b4::f190c5320317638f74add112fe3860821df21942::947580295c9f86455230b20f2076aae5e7cebe0d::f42b28e38449c648808abbc6ace9fc114d06241e::8d41bf719d342f42c5c43ce37065a0e3f0b21d6f::14a646cbc145abab4939a91fd9f8352a98fbb183::30ce7dabff8fe6583e3e3a1c7eff7eb08babbb49::d73f866fdd6f3f8b8818fe85892dfd22f080bf17::a881030479fac36cd0ebf546cb7cf8c501833b65::dd7d025c9bdb3828dd88937cc201509faec6cc1b::8984d132e1a069bfb3eca15caa40d776fcfd3b68::3be9b23e5d09ab94283f4be2030b0b0a32f3eee4::22a907b8c68b3fb13aaace88abadfdf459252305::ac9c2038aa7a7ddda3c6bf44d4ac6df9c10b6131::c32c7960b7bb6b4fc1bb41714950e8d1937f7514::b2484a79dc244e1dc01e9d03b07d208ed1ca9f92::ea9d2bb4d5b5486c9a48c2cba291bb2b1bc1bb8b::7d6594d1730e8d4d8d0e2af3aa186252a2d63bab::c9928505af55f8564490b8358cb9cf48e6c6d74c::bacbb97765ab910998193056f9addb5fee8baf2d::3b809f71fef5ba0ede5ed1a3f31182c45c95a684::b4f2c6666cd53bf5263179f4eeac1eeeb9b442ce::616cb5deae7a792fecd4fb23269d3bd220a06b6e::eb1efe5242557e1c2d9d13de7925da8130b28ab9::b6590d45450b3844464f397701b22b61bc34b8c5::f452173e2082f760cd778db820168e021769ac7c::0d21397d64daaf6fcb2587f5498847629f21e5b9::2ed26a04de5453ffad91b61563c10683b2850036::c70397e7d1e9ec9974711467c6075255be5515cd::c8029bb9358a4d532854c3761f84e726132ed6ba::327f29858fd69333127a2de9c781e5a9c6b37661::55154b30e88c9ac3eb810c06e59774960aefe2d9::f34a4d8d4e387a43000d4225a65d7d67852043f8::
https://api.github.com/repos/JuliaLang/julia,38900,sgj/utf8proc2.6.1::master,1,merged,bugfix::unicode::upstream::,"Fixes a crashing bug, albeit in the unexported, undocumented method `Base.Unicode.isgraphemebreak(::Char, ::Char)`. Should be backported to 1.6.  Should also be backported to 1.5 if #38551 is backported.",0fea0f5ccbfa010d9c271446bbfb493b51b673d5::
https://api.github.com/repos/JuliaLang/julia,38826,mp/documenter-0.26::master,0,merged,doc::,"Brings [a few enhancements](https://github.com/JuliaDocs/Documenter.jl/blob/master/CHANGELOG.md#version-v0260). Also, removes the dependency on DocumenterLaTeX, as the PDF/LaTeX backend is again provided by Documenter directly. While it's a few days late to the party, I am hoping this could be backported to 1.6 as well, so that we could use this version of Documenter for the 1.6 docs. cc @ianshmean",2f5e6bb08a70ae0222322cef71c3bb24921962b1::
https://api.github.com/repos/JuliaLang/julia,38795,backports-release-1.6::release-1.6,1,merged,release::,"Backported PRs: - [x] #38776 - Bump CSL version - [x] #38786 - 🤖 Bump the Tar stdlib from 0ba9683 to ac4d442 - [x] #38796 - [LibCURL]: Reconcile BB and from-source configuration of LibCURL. - [x] #38807 - Simple test for filter for IdDicts - [x] #38809 - 🤖 Bump the NetworkOptions stdlib from 3d8a45c to a251de1 - [x] #38816 - 🤖 Bump the Downloads stdlib from 02e77ae to a6e4926 - [x] #38821 - Do not return disconnected IdDict from Docs.meta - [x] #38797 - Converge JLL APIs a bit more - [x] #38826 - Bump Documenter to 0.26.0 - [x] #38784 - Add isdefined check `count_const_size` - [x] #38389 - Avoid allocation in ldiv! with QR - [x] #38801 - Fix duplicated ldiv! method in qr.jl - [x] #38798 - [LLVM] add patch for miscompilation with setjmp on PPC - [x] #38853 - Commit checksums for libosxunwind - [x] #38831 - improve inferrabilities within TOML module - [x] #38853 - Commit checksums for libosxunwind - [x] #38855 - Use DEPOT_PATH instead of HOME in cmdlineargs test - [x] #38836 - Adjust calling convention of LAPACK functions - [x] #38866 - Use https for blog post link in faq doc section - [x] #38863 - [Mmap] Skip ReadOnlyMemoryError test on PowerPC - [x] #38798 - [LLVM] add patch for miscompilation with setjmp on PPC - [x] #38874 - [OpenBLAS_jll] use normalized ppc arch - [x] #38850 - [PPC] relax fastmath test - [x] #38875 - [Artifacts] Test c_simple on ppc - [x] #38882 - Don't clobber rax in x86_64 trampoline - [x] #38883 -  Don't override target passed on command-line with target from sysimg for processor_fallback - [x] #38827 - LibGit2: improve error when CA root cert can't be set - [x] #38887 - fix #38837, inference regression in tuple `map` - [x] #38885 - Measure compile time only when using time macros - [x] #38898 - fix #38897, docstring for .op= - [x] #38900 - update to utf8proc 2.6.1 - [x] #38842 - Add section regarding Pkg mode to REPL docs - [x] #38913 - Correct pcre2-cet-flags.patch whitespace. - [x] #38904 - fix #34170, assertion failure with obvious_subtype - [x] #38810 - fix #38423, another stack overflow in method definition - [x] #38839 - win: skip bad paths in dllist - [x] #38886 - Execute `backtrace` once before testing formatting - [x] #38829 - Restore the version information for libjulia.dylib - [x] #38917 - Update non-BB dsfmt build to match with the BB one. - [x] #38906 - Reduce latency of Revise.revise() - [x] #38918 - Document the need for disabling BB if building without network access - [x] #38923 - Improve position of MKL.jl mention in build documentation - [x] #38935 - Remove useless nghttp2_jll import from LibGit2_jll - [x] #38852 - Mark ccall to git_libgit2_opts as variadic - [x] #38910 - Remove stale WinRPM, Vagrant, Appveyor CI files and update build instructions on Windows - [x] #38921 - improve (restore) performance of fieldname by moving out error paths in separate functions - [x] #38934 - [LLVM] Add patches and update binaries Non-merged PRs with backport label: - [ ] #38933 - Carry MBedTLS patch that works around CMake 3.18.2 bug. - [ ] #38915 - Measure compile time only when using time macros pt.2: handling when code under test throws - [ ] #38899 - fix #38888, pessimistic sparam inference with concrete upper bound - [ ] #38775 - [Make] remove BINARYBUILDER_LLVM_ASSERTS and use LLVM_ASSERTIONS instead - [ ] #38405 - Make Distributed.jl `Worker` struct thread-safe. - [ ] #37741  - Fixes for non-Int based lengths",e5b8e5d0e772ee734f623c6d3342287fd85897bb::5c5c7a39b3ed63c7970a49724d18c5bff3d6641f::9f73f05bfb2e0ec1d1d766fdbaa201ca4c3d772e::29a1fdff1ad753eaeb4d111a9dfd32d42211a266::d045b7737c5c0bd021305a0b63c16b341665e5e5::441e6009549c21aa4343508847e16cb925eae2c1::2684803f2cbd4c3f1d5a739b0b218cc52395c2a8::a15d4c89e7f93935b02089b928f3156077951301::c9c8ffd470a823bebc0dfb50f145cbd09af03b2d::fbd4fc3c5a315d647f458d4a6f68df505e47739f::40af668dd33cfba05ca41832bac8cd963e1d4ab0::d5088f7de12975372a74882e76fddcf578ab5d77::1e377ca92b7fb9a173b47fbeb126dfb6ef08709b::f8349fad801ae3c3c5159b73a896fa50ffb98016::624409dc6f76df79c442506c687e414d8de1e4a4::d47689a61e822e565672a1f921b9bd8d803cf594::bb7938d36fde998e73f0f74b9ffba8e0571b3a46::6e2c9bc609a7fd43a44b54652868555eca37c043::63f99af3dc2d0d162f60d5fd16d616621dd59f76::10cbdded149541f053d781ecb423e0ece9d29548::f3b6ccf7380d90f5a19cc6893db78bcb312004ee::ce0a7baea127ba643ea4926c033ddc5931881b75::f543e2642d8291e7bd187d6fa1b6f68158c93c1e::10f699e08ee33ae535649e08aa157c7e0d4a662e::fd94b4ec66e0d24c371ac47f566ead303638ae7c::b3f56c2390bf5134186db142103b65591cac4b5a::8e71a81c3cab10c53798dae4cb46fbb82e906249::e910291ef4bb0ab05a75cda89bef1ffff02700f8::e9c954f68c2709c9f8129243495930e32e26a45d::3ba80c6fbf9732a6868d61274969bfe6329f9847::3b18f1abe84be9c255d39110595e3f92e442fd29::22fa5a120025cbbb40d3e3c86fd74caedfc28477::96d177f62672de4636b3c6da7fe90c2c6366154a::40a10ecbc4a2ffa9de85f1992f24c77c1106818d::64838d20eac652a125d2361b0046ea9f22c2f284::f69cd74c6d3210f15aafb3f2a2a44051eaa639f0::6e76513e1d47083e29a602737db28064f7031271::ba0a0f5583104b78961389e3f610240d3882c9e9::ca49517baecd4efd1b6e5dc77e45d1ee3b4ea92e::8b9967616ae0621df6f14924ec8c75037d0e2ac2::3210ac82413e34f7ad0f13add80b05d2c1505d2c::0fb64a207e5e62bddef937502e7d4cf967913a02::1f7d1bc2dff3086a6044c8d27130fa84aff6b481::73f557d75c674f8f79e77a51af572642b5e1c0bf::7784c2aedb2f00ad8acb235f1a250958c813324e::6f780f3e7ebcf05d454feee89a597a08be4ed3a3::5b317d55c66b3bbaa545286715537493a0d6a690::2d4f1db49967392a934fb2801fadb9fad7a59e39::f90e2f3febf7e8cbbb5af99b59ead8678134855f::7eb2d30c5b8631b3b5a6943f9ec0b66ead519e2f::c6873219db724cfe3104c93cdb355bc4549b4af1::9687355633817e14236937aeca3a703cfefcc253::54c27e4f74b3f58182410472e95158c9389fb699::241efd8628049db0ae9f6299471cc927e3fdc548::5221f8843be1bf318d84bbff4a554d31665593f3::25ee10069402f56b6f0a7f1278bb3f0f3720ab01::4db29fe1ce4515cc19b0ccc780bc40aee60444e1::
https://api.github.com/repos/JuliaLang/julia,38701,BumpStdlibs/Pkg-2b947759::master,0,closed,,Stdlib: Pkg Branch: release-1.6 Old commit: 51595f95 New commit: 2b947759 ``` $ git log --oneline 51595f95..2b947759 2b947759 Merge pull request #2263 from JuliaLang/backports-release-1.6 619485a3 comment out resolver test with julia_version (#2262) 6100cfe3 Precomp: Missing fix from #2251 (Work around precompiling packages with no `version` entry) (#2261) 84a74183 fix paths to stdlibs being put into test manifest again (#2259) 6a21f6e3 Use Sys.isexecutable() to calculate git hashes (#2253) ```,0832cfab4be2cafd5233746b5bfcdd9635866ff6::
https://api.github.com/repos/JuliaLang/julia,38678,kc/pkg_16_2::master,1,merged,,Fixes https://github.com/JuliaLang/julia/issues/38654,577812cb7dd64574e30557299afa853705e50379::
https://api.github.com/repos/JuliaLang/julia,38669,BumpStdlibs/Pkg-51595f95::master,0,closed,,"This pull request bumps Pkg to `51595f95`, which is currently the latest commit on the `release-1.6` branch. ``` $ git log --pretty=oneline --abbrev=commit 87d336454a7ad960cf42bbb782d4c38dcd1e1124^..51595f958ddd326643a8b1b8902a3c47964d8cb4 51595f958ddd326643a8b1b8902a3c47964d8cb4 Don't do autoprecomp after Pkg.dev [fixed] (#2235) (#2257) 67fc36789b9dbcfdfc51d7bcfbec8d7859426114 Merge pull request #2255 from JuliaLang/backports-release-1.6 94ebf9db816bf291793a2b517d3f31c7724c17c4 check for fancy print availability in Platformengines (#2256) a734e1d17ad5f2200d343cb03884675213247487 update github action files to be against release-1.6 83cbe5fc73fddd8134fa8d42b699249dc3383701 Work around precompiling packages with no `version` entry (#2251) c97afbdcb29ffa1b8fac5f5485c157d8ea0cf2e7 PlatformEngines: fix last case of passing header as string (#2250) 1cb7baf3446cf6b72793202f4ea38dc951959677 Use repo_source when cloning. (#2249) bbd5a7fb26cd6237f1d2a9e058ba5f74e6854753 CI: Re-enable testing on Pkg server (#2243) 176cf562a2ebdaa46c64d71517ec33c9da37708e Remove bad Artifacts test (#2242) 08934a47058bb808135be21599a8402c6a17e87f Codecov: use the official Codecov GitHub Action (#2229) 94627d66c175ddb81e34c7160fdd156f66da5827 AppVeyor: temporarily disable submitting to Codecov (#2227) 64d7a90ea559b6125df11b56422946e1da96dc28 GitHub actions (#2224) 27cb0ebf26bc47e2a952363b74bba16945538b0f Allow `7z` selection to pick something up off of the PATH (#2210) 87d336454a7ad960cf42bbb782d4c38dcd1e1124 Merge pull request #2189 from JuliaLang/kc/backports c616bccdba2d7da16d2fe3edadca9ce74f3b5d02 clean up progress bars usage (#2190) 928c57b59b6b64e7083e8781a2ec3b037c1b92f0 remove duplicated tests and move registry into place instead of copying (#2186) 0f05d39a539fe82c703361ea29efb61fdb6acce1 Windows: prefer git cloning registries (close #2014) (#2175) 1c3df0726034064b274f80cc462ab18ef45dd6cf Auto-precompilation: Remove tip, add env var note to pkg repl help (#2172) ```",60c4bae3d2322e8d84fc77d2f512e8dcf3d25532::
https://api.github.com/repos/JuliaLang/julia,38655,kc/pkg_16::master,1,merged,,https://github.com/JuliaLang/Pkg.jl/pull/2255,be6da0be8d0256945c35ae71e9f233cd68835aa3::
https://api.github.com/repos/JuliaLang/julia,38551,utf8proc2.6::master,1,merged,unicode::,"Fixes #37680. Also allows us to address #36618 in a future PR. Marking as ""backport 1.5"" since this fixes a bug in Julia 1.5 without changing anything else (all other old functionality of utf8proc is unchanged, as is the Unicode version).  (We can't backport easily to Julia ≤ 1.4, in contrast, because it would change the Unicode version — we'd have to fork a new branch of utf8proc to backport the underlying fix.)",16aeed56e4b3ceed9287df0ebd5cdc16d2aedf82::12bb258fd0d3f424114b4fa3a26def497e4716d9::
https://api.github.com/repos/JuliaLang/julia,38356,mp/fix-isidentifier-docs::master,0,merged,,"Currently, we end up with a literal `\0` character in the docstring. This was introduced in #38197 and is breaking PDF builds (it shouldn't, really, but that's a separate Documenter issue). Would be good to get this merged before #38076, or this will have to be backported to the 1.6 branch.",468ced4fa9d97fe48680f3fd68349dc9c86a7366::
https://api.github.com/repos/JuliaLang/julia,38183,nhd-backport-38049::backports-release-1.5,0,merged,,Backport #38049 to julia v1.5.3. ---- Applied to backports PR: https://github.com/JuliaLang/julia/pull/38122,f6d7b5acd0e559d5be6a4e6752451abbaa990f4d::
https://api.github.com/repos/JuliaLang/julia,38159,sf/backport_prepare_for_deletion::backports-release-1.5,1,merged,,This backports https://github.com/JuliaLang/julia/commit/a3430e7ec1d6c2cc883b7e5079c1a0e096f2eb66 to Julia 1.5.3 X-ref: https://github.com/JuliaLang/Pkg.jl/pull/2162This seems like backporting a feature......::I'd argue it's closer to a bugfix for `mktempdir()`.  :P::,bca2df231e25f9770b1aad425467b85db01642c7::
https://api.github.com/repos/JuliaLang/julia,38122,backports-release-1.5::release-1.5,1,merged,release::,"Backported PRs: - [x] #36396 - fix showing methods with unicode gensymed variable names - [x] #37236 - Add INNO_ARGS makefile var for signtool - [x] #37613 - increase `RELOC_TAG_OFFSET` to handle larger system images - [x] #37562 - Revert ""Improve typesubtract for tuples (#35600)"" - [x] #37407 - Bump libuv to latest commit - [x] #37594 - dump: ensure Array eltype layout is initialized early - [x] #36821 - Fix function call to rec_backtrace_ctx when using USE_SYSTEM_LIBUNWIND=1 - [x] #37002 - win32: fix in_stackwalk mutex - [x] #37101 - make Profile more thread/signal-safe - [x] #37769 - Fix `getfield_tfunc` for `PartialStruct` with `Vararg - [x] #38049 - Make `static_show()` print valid identifiers Need manual backport: - [ ] #37557 - Fix === and objectid of object with potentially undef inline immutable field - [ ] #37645 - fix fields description of Module type - [ ] #37891 - fix #37880, overflow in shift amount range check in codegen Contains multiple commits, manual intervention needed: - [ ] #37243 - code coverage fixes",1bb263110100aa2f56de4544f8e88d6f1e57aaa5::b32702dd30d6af0aebfd3f247d94f8f19b77e7a5::7c7e8b6c2375c541582eea64f67ff587b090a591::489ae0a56ea002a90ed5345a84905fee78a7d825::a84f7cf03750cde306d4454a5349c676274c4412::628e8cbb6c3b41cdf1dcef908e9bf9d50e7314b2::cf8b9ec3239cb5d79f374dbe74949b6c5646e828::9bc7391cdf79b02be64909d647f6199e319402da::45e9c2235c046392c4d68dd556a9e54b1d9b678a::44571d7545891f797ee634fd7da55de010e1c238::6967e264e8cbadee932f27da9807f4f9d33de0af::bb83a29193e79500a4dc7b0a0897eea60e6cdbc6::58cd4b887cc63584d399c553694cfbd355b0c852::37c10969be5c401f778d3ce00b234ba598736826::0305b7c1f84ea68d654d2f2f86b545e6a85470ef::
https://api.github.com/repos/JuliaLang/julia,38053,parent::master,0,merged,backport 1.6::doc::,[skip ci],520a03e96ef99903c5e37eedbf601ae8765c6f35::
https://api.github.com/repos/JuliaLang/julia,38041,range::master,0,merged,,"Mathematically a range is uniquely determined by three out of four of `start`, `step`, `stop`, `length`. Furthermore if one assumes step=1 any combination of two others macthematically suffices to specify a range. With this PR the `range` function reflects this. Any combination of three (two non step) arguments will be accepted. For instance now you can do: ```julia julia> range(stop=10, step=1, length=2) 9:1:10 ``` On master only a somewhat random subset of three (two non step) arguments will be accepted. ## PR Features * Non breaking * More ergonomic * Easier docsThe docs say that specifying all four arguments is allowed if they are consistent. So this test contradicts the docs.::This test arguably contradicts the docs. It is documented that step will default to `1` so this specifies a unique range.::```suggestion to be one. If all arguments are integers, a [`UnitRange`](@ref) will be returned. ``` Haven't tried with the PR, but currently: ``` julia> range(1, stop=2.0) isa UnitRange false ```::Yes in my view this contradicts the docs and thus is a bug.::Oh I see, I misread the method. This is a nontrivial change, does anything else in Base make non-integer `UnitRange`s? ::In this PR in the end `range_start_stop(1, 2.0) = start:stop` will be called. So `1:2.0 = 1:1.0:2.0` will be returned. I was confused and thought `1:2.0` would give a unit range. So your suggestion aligns docs with actual behaviour. I guess you are right that non Interger unit ranges are an exotic thing, which we should probably not introduce here.::I haven't reviewed all the methods, but this one certainly gives you non-integer UnitRanges: ``` julia> range_start_length(a::Real,          len::Integer) = UnitRange{typeof(a)}(a, oftype(a, a+len-1)) range_start_length (generic function with 1 method) julia> range_start_length(1.5, 10) |> typeof UnitRange{Float64} julia> range_start_length(pi, 10) |> typeof ERROR: MethodError: no method matching Irrational{:π}(::Float64) ```::Mhh I get ```julia julia> range(1.5, length=10) |> typeof StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}} julia> Base.range_start_length(1.5, 10) |> typeof StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}} julia> @which Base.range_start_length(1.5, 10) range_start_length(a::AbstractFloat, len::Integer) in Base at range.jl:137 ``` And `pi` indeed errors.::`pi` also errors on master.::Indeed. that looks like a bug. But catching the `start=1.5` with a *more* specific method `range_start_length(a::AbstractFloat, len::Integer) = range_start_step_length(a, oftype(a, 1), len)`, and UnitRange as the fallback, strikes me as a bad idea. For example: ``` julia> range_start_length(1//3, 10) |> typeof UnitRange{Rational{Int64}} ``` Although surprisingly master does do that too: ``` julia> range(1//3, length=10) |> typeof UnitRange{Rational{Int64}} julia> range(1//3, length=10, step=1) |> typeof StepRangeLen{Rational{Int64}, Rational{Int64}, Int64} julia> (1//3):3 |> typeof UnitRange{Rational{Int64}} ``` I've no idea if this is a bug or intended behaviour. What's the argument for avoiding UnitRange{Float64} which doesn't apply to UnitRange{Rational}? ::Yeah, I had similar thoughts, when I saw this. These tricky `range_start_length` methods are copied from master in this PR. If somebody knows what is intentional and what is by accident here, that would be great. Otherwise, I would prefer to just mimic behaviour of master here and address UnitRange and pi etc in a separate issue/PR. ::On top of that on master we have the following interesting behavior: ```julia julia> range(1,stop=100) 1:100 julia> range(1,100) ERROR: ArgumentError: At least one of `length` or `step` must be specified ```::Ref. https://github.com/JuliaLang/julia/pull/28708#issuecomment-420034562 and the discussion following it.::I meant to say, I agree that leaving these behaviours as they are for now sounds like a sensible choice. ::Ah, thanks a lot. While I don't favor the design I understand the reasoning and will disallow `range(1, 100)`.::I decided to keep the behaviour of master here. Since it may be a controversial feature.::There is no method for `range(1, 5; stop=4)` so this is a little bit misleading. ```suggestion range(start, stop; length, step) range(start; length, stop, step) range(;start, length, stop, step) ```::```suggestion Neither `step` nor `length` was provided. To fix this do one of the following: ``` Grammarly says that we should use `was` here lol::Can we backport this PR to 1.6 branch? Otherwise, the compat info needs an update.::I would love to have this in 1.6. ::1 as a default start value sounds like a good idea. Should be a separate PR however. I really don t want to delay this one further.::```suggestion @testset ""range construction"" begin ``` Spelling::```suggestion to be one. If both arguments are of type [`Integer`](@ref), a [`UnitRange`](@ref) will be returned. ``` > * Call `range` with two of `start`, `stop`, `length`. In this case `step` will be assumed to be one. If all arguments are integers, a [`UnitRange`](@ref) will be returned. ```julia julia> t = (2.0,5) (2.0, 5) julia> isinteger.(t) (true, true) julia> range_start_length(t...) 2.0:1.0:6.0 julia> range_stop_length(t...) -2.0:1.0:2.0 julia> range_start_stop(t...) 2.0:1.0:5.0 julia> range_start_length(t...) isa UnitRange false julia> range_stop_length(t...) isa UnitRange false julia> range_start_stop(t...) isa UnitRange false julia> range_start_stop(BigInt.(t)...) isa UnitRange true julia> range_start_length(BigInt.(t)...) isa UnitRange true julia> range_stop_length(BigInt.(t)...) isa UnitRange true julia> range_start_stop(UInt8.(t)...) isa UnitRange true julia> range_start_length(UInt8.(t)...) isa UnitRange true julia> range_stop_length(UInt8.(t)...) isa UnitRange true ```::Just some documentation editing. Sorry to be that guy. If we eventually use `Base.OneTo` we might want to say `AbstractUnitRange`, but that's for another PR.::I think it is clear that the `UnitRange` comment does not apply to the first bullet point at the moment. I'll just document that here in case someone looks this up later. ```julia julia> t = (1,1,3) (1, 1, 3) julia> isa.(t,Integer) (true, true, true) julia> range_start_step_length(t...) 1:1:3 julia> range_start_step_length(t...) isa UnitRange false ``` If we really wanted this to produce a UnitRange, then maybe should consider using `Val` for `step`. I'm not sure if that is worth it.::```suggestion Construct a specialized array with evenly spaced elements and optimized storage (an [`AbstractRange`](@ref)) from the arguments. ```::```suggestion Both `start`  and `stop` may be specified as either a positional or keyword arguments. If both are specified as positional arguments, one of `step` or `length` must also be provided. ``` Boy this is a funny special case.  I understand why you did it this way (backwards compatibility) but we may want to flag it for changing in the future.::Unfortunately, this is a little too featureful for a backport.::I would lean towards the simpler: `If all arguments are Integers`.  No need to overly cross-ref — just capitalize it.::Could we use `@eval` in a for loop here? This just seems a bit hard to maintain.::I think it looks cool :stuck_out_tongue: ::It could use some comments. I think `@eval` would make it more complicated. There are four options and `4^2 == 16` lines. 16 lines with a non-trivial mapping seems pretty manageable to me. We need to make it easier to read, not less. How about something like this: ```julia # range( ) _range(start::Nothing, step::Nothing, stop::Nothing, len::Nothing) = range_error(start, step, stop, len) # range(; length ) _range(start::Nothing, step::Nothing, stop::Nothing, len::Any    ) = range_error(start, step, stop, len) # range(; stop ) _range(start::Nothing, step::Nothing, stop::Any    , len::Nothing) = range_error(start, step, stop, len) # range(; stop, length ) _range(start::Nothing, step::Nothing, stop::Any    , len::Any    ) = range_stop_length(stop, len) ::It looks very self-documenting to my eyes with a clear pattern.::It is navigable to me, but I need to parse it to find the correct line. I'm happy with how it is though.::I put some thought into how to write down this dispatch mechanic. I also considered using `@eval` but decided the above table is the most readable and easy to maintain.::> My suggestion is that we use `===` to compare to similar `(:)`, colon, based syntax in situations where we expect them to perform similarly. Comparable output to `(:)` for similar input is a fairly minimal contract for this method. > > ```julia >         r = 4:9 >         @test range(start=first(r),               stop=last(r)                  ) === r >         @test range(start=first(r),                             length=length(r)) === r >         @test range(start=first(r),               stop=last(r), length=length(r))  == r # Does not produce a `UnitRange` >         @test range(                              stop=last(r), length=length(r)) === r > ``` @mkitti This is pretty close to your suggestion, looks good to you? ::Yes. I think you were already doing it. I was just pointing out that you are actually already checking for type `UnitRange` by using `===`. A discussion for another day might be if `length == stop - start + 1` and both `start` and `stop` are `Integer`, then maybe we should produce a `UnitRange`. It might be as simple as adding a ternary operator. ```julia range_start_stop_length(start::T, stop::T, len::Integer) where {T<:Integer} = len == stop - start + 1 ? range_start_stop(start, stop) : _linspace(float(T), start, stop, len) ``` The type stability implications might be problematic there though since the above function could either return a `UnitRange` or a `StepRangeLen`::",62e629f85dd7af388c5703fd316d67a342c71362::208eaf03cffe3957a4995c6bbf3bfa20b3776295::8d5c3ba318f8e4f4ffbb612e42723fd007cf10e1::a5ef9054a942aa13cdd02f5e0a5db88e2b1b22dd::50734fd283e19b8d193f48f638c291699998ac72::3796650de3b8d83e973aa0355cd5a51cc3f87cf4::cc25cf3b9b294af5c40ca33e31d2b2150feffe1c::8c327e964108d1bb702d368af69433bed1063572::519ef3663a47ce1773d3396d0225b395010075ff::87e8faf224cc239354e38d84ebcf6e01dfcbfebf::7712b4cafc85c0696d0abd2ac04c3072cbe2c551::083a4f6dd04ee34f0f8f9092a25f4312dd899e37::1097661f56ccc69baa011c90b562b9ee51b77ca9::ba32fef76968cb31b4078012c22c245c4476736d::6a0e25ebd2e1aa11e52e3ed9a607bc64feec5998::7500cdd619a2d29e66053cbfce08080c4ec6acad::0c5fc366dee596f98bda7670b2102224b9e75d8a::307d59bcfd5b7f1ead0652c26ccfcd37c2b0e2da::65898ed0fb4648816fb55d3a2743061efc42f9b1::01f6cccedfc1255f414ea2c73a96574428402484::
https://api.github.com/repos/JuliaLang/julia,37896,jb/fix37872::master,1,merged,backport 1.5::bugfix::codegen::,"fix #37872The old implementation avoids this by calling `emit_box_compare` for pointer fields so I think a better fix to make sure there's no regression is to do the check in `emit_bits_compare` on `fldty` instead when the field is a pointer.::```suggestion answer = ctx.builder.CreateAnd(answer,  emit_box_compare(ctx, fld1, fld2, nullcheck1, nullcheck2)); ```::ooooooops::",57e2ac9da97747b574180c4846998cb0b1411bd7::
https://api.github.com/repos/JuliaLang/julia,37891,jb/fix37880::master,1,merged,backport 1.5::bugfix::codegen::,fix #37880,b160df6e64e3f0c587cbe475aa98809f54f889f8::
https://api.github.com/repos/JuliaLang/julia,37849,kf/opaque_closures::master,1,closed,,"This is the end result of the design process in #31253. # Overview This PR implements a new kind of closure, called an `opaque closure`. It is designed to be complimenatry to the existing closure mechanism and makes some different trade offs. The motivation for this mechanism comes primarily from closure-based AD tools, but I'm expecting it will find other use cases as well. From the end user perspective, opaque closures basically behave like regular closures, expect that they are introduced by adding the `@opaque` macro (not part of this PR, but will be added after). In front of the existing closure. In particular, all scoping, capture, etc. rules are identical. For such user written closures, the primary difference is in the performance characteristics. In particular: 1) Passing an opaque closure to a high order function will specialize on the argument and return types of the closure, but not on the closure identity. (This also means that the opaque closure will not be eligible for inlining into the higher order function, unless the inliner can see both the definition and the call site). 2) The optimizer is allowed to modify the capture environment of the opaque closure (e.g. dropping unused captures, or reducing `Box`ed values back to value captures). The `opaque` part of the naming comes from the notion that semantically, nothing is supposed to inspect either the code or the capture environment of the opaque closure, since the optimizer is allowed to choose any value for these that preserves the behavior of calling the opaque closure itself. # Motivation ## Optimization across closure boundaries Consider the following situation (type annotations are inference results, not type asserts) ``` function foo() a = expensive_but_effect_free()::Any b = something()::Float64 ()->isa(b, Float64) ? return nothing : return a end ``` now, the traditional closure mechanism will lower this to: ``` struct ###{T, S} a::T b::S end (x::###{T,S}) = isa(x.b, Float64) ? return nothing : return x.a function foo() a = expensive_but_effect_free()::Any b = something()::Float64 new(a, b) end ``` the problem with this is apparent: Even though (after inference), we know that `a` is unused in the closure (and thus would be able to delete the expensive call were it not for the capture), we may not delete it, simply because we need to satisfy the full capture list of the closure. Ideally, we would like to have a mechanism where the optimizer may modify the capture list of a closure in response to information it discovers. ## Closures from Casette transforms Compiler passes like Zygote would like to generate new closures from untyped IR (i.e. after the frontend runs) (and in the future potentially typed IR also). We currently do not have a great mechanism to support this. This provides a very straightforward implementation of this feature, as opaque closures may be inserted at any point during the compilation process (unlike types, which may only be inserted by the frontend). # Mechanism The primary concept introduced by this PR is the `OpaqueClosure{A<:Tuple, R}` type, constructed, by the new `Core._opaque_closure` builtin, with the following signature: ``` _opaque_closure(argt::Type{<:Tuple}, lb::Type, ub::Type, source::CodeInfo, captures...) Create a new OpaqueClosure taking arguments specified by the types `argt`. When called, this opaque closure will execute the source specified in `source`. The `lb` and `ub` arguments constrain the return type of the opaque closure. In particular, any return value of type `Core.OpaqueClosure{argt, R} where lb<:R<:ub` is semantically valid. If the optimizer runs, it may replace `R` by the narrowest possible type inference was able to determine. To guarantee a particular value of `R`, set lb===ub. ``` Captures are available to the CodeInfo as `getfield` from Slot 1 (referenced by position). # Examples I think the easiest way to understand opaque closures is look through a few examples. These make use of the `@opaque` macro which isn't implemented yet, but makes understanding the semantics easier. Some of these examples, in currently available syntax can be seen in test/opaque_closure.jl ``` oc_trivial() = @opaque ()::Any->1 @show oc_trivial() # ()::Any->◌ @show oc_trivial()() # 1 oc_inf() = @opaque ()->1 # Int return type is inferred @show oc_inf() # ()::Int->◌ @show oc_inf()() # 1 function local_call(b::Int) f = @opaque (a::Int)->a + b f(2) end oc_capture_opt(A) = @opaque (B::typeof(A))->ndims(A)*B @show oc_capture_opt([1; 2]) # (::Vector{Int},)::Vector{Int}->◌ @show sizeof(oc_capture_opt([1; 2]).env) # 0 @show oc_capture_opt([1 2])([3 4]) # [6 8] ```Would it be reasonable to add this into `tmerge` such that: `tmerge(::NotFound, x) = x` ::Why does the style change from annoating on right (old line 113 and 114) to annotating inline? ```suggestion nothing, # parent false, # has_opaque_closures ```::```suggestion caller.linfo !== nothing || return # don't add backedges to opaque closures ```::Is it work adding documentairy helper functions ``` is_toplevel(::InferenceState) is_opaque_closure(::InferenceState) ```::Would it add clarity to define a new singleton to use a signal something is a OpaqueClosure, rather than using `Nothing` for this? Or is using `nothing` a sitatution that in theory could occur more widely than just for OpaqueClosures? Or from another direction, should there be a `OpaqueClosureOptimizationState` that doens't have this field? I am guessing not but am interested ::It seems like everything below here should be a seperate function. (Or rather a collection of seperate methods). Is the reason it isn't to do with compilation costs?::this again makes me this we should use a different marker than `nothing` to indicate that this is a opaque closure. ::should this be either: ```suggestion # Otherwise: refuse to inline OpaqueClosures we can't see, to preserve the ``` or: ```suggestion # Refuse to inline OpaqueClosures we can't see, to preserve the ``` Or am i not understanding what is going on here?::```suggestion lbt = Union{} ```::```suggestion # If we don't need to track specializations, just infer this here right now. ``` Julia's line limit is 92 character so this fits on one line::I think this could be defined in boot.jl.::```suggestion // OpaqueClosure ```::When are each of these cases used?::tmerge is very hot and this isn't technically part of the lattice, but rather a sentinel value only used in a few places. It used to be in tmerge, but @vtjnash moved it out a few months ago.::Yeah, that might be cleaner, but honestly this whole thing needs a refactor, but that's for another PR.::No, this could be refactored.::There are MethodInstances for opaque closures at this stage, inlining just doesn't support that yet.::This comment seems to have gotten lost.::`code` is generic. `CodeInfo` is used by the frontend and in the optimized representation if the argument types are uniquely determined during inference. The optimizer inserts a `Method` for this if it needs to potentially specialize the opaque closure on the argument types passed later.::For the moment yes, but I'm anticipating giving these special layout to make the fields truly invisible and let LLVM resize them for the capture list, which wouldn't be available from boot.jl.::Seems like a few methods still need type annotations in the Core.Compiler module. I don't want to mark each case. Aside: also seems like this particular one might be unused? but github might just be hiding the right file diff::nit: line length (github is acting unwilling to show me the whole line)::```suggestion # Go through the function, performing simple inlining (e.g. replacing call by constants ```::```suggestion nothing end ```::This code probably should probably now be moved to C (where `jl_apply_generic` is) as the invoke handler for objects of this type, where we can better deal with race-conditions and updating the pointer after reoptimization and calling convention changes and such (and hopefully optimizations too). I think that'll actually even make the `typeassert` disappear into the dynamic dispatch caching operation on the previous line.::```suggestion """""" @opaque macro docstring goes here """""" ```::`A` might not have `.parameters`, in general?::```suggestion return esc(Expr(:opaque_closure, ex)) ``` nit: this is actually slightly simpler IR (though a non-functional change), since we'll immediately elide the macro-scope/escape pair during macroexpand instead of waiting for lowering::```suggestion return Any[Pair{CodeInfo,Any}(code, code.rettype)] ```::style nit: ```suggestion } else { ```::This should be a separate PR, and can land immediately. Since it's just for clang-sa, probably doesn't need to be backported? ```suggestion JL_CPPALLOCA(frame, sizeof(*frame)+(((n)+1) * sizeof(jl_value_t*)));               \ ((void**)&frame[1])[0] = NULL;                                                    \ memset(&((void**)&frame[1])[1], 0, (n)*sizeof(jl_value_t*));                      \ _JL_GC_PUSHARGS(&((void**)&frame[1])[1], n); ```::inlining?::bump: this should be in C::Because it's an IR form, this comment is false now: there is a method definition step (it lowers simultaneously with the parent container), so this code should be removable now?::I think we need to avoid allocating these at runtime, and instead make them singly computed once and stored in the source IR (of the parent). We have analysis passes that assume they can enumerate all methods (as accessible for a given world). The `Method` type is thus expected to be uniquely identified by the `.sig` field, as we identify and cache them by that value (particularly as such in dump.c). I think we can extend that to be identified as a particular child of a particular parent Method? Though we'll have to figure out a way to handle `@generated` functions that return these (since allocating a distinguishable object like Method isn't pure, it shouldn't be legal, but obviously this operation needs to be allowed). On the other hand, seems like this is only used as a placeholder to make it possible to trick some methods into thinking they have caches and stable gc-roots (that this doesn't actually correctly provide). Possibly we instead we need alternative entry point functions that can manipulate the caches for these more directly?::I think this is the CodeExtractor Util, not the coroutine support that we would need?::The source should be added to the workqueue for delayed processing (rather than immediate recursion)::`(sizeof(jl_value_t*) * nargs) - 4` is a weird size to pick::this should be a verifier error, prevent reaching here ever, so it is likely more appropriate to assert here: ```suggestion assert(nargs >= 4 && ""Not enough arguments in new_opaque_closure""); ```::Seem to be missing some typeasserts, present in `jl_new_opaque_closure`, and not found here on arg_t and lb/ub?::seems possibly excessively complex, when `argv[0]` is required to be an actual literal? ```suggestion jl_value_t *argt = args[0]; jl_value_t *ub = args[2]; jl_value_t *source = args[3]; ```::`specTypes` could be any type of Type. Use `jl_first_argument_datatype` to determine if they're is a representative identifying parameter.::The second `jl_tparam0` also isn't (necessarily) a datatype, and the nparams doesn't necessarily correspond to the number of fields (because of Vararg{N}). You'd done most of the work for that fix, do you remember if we had an accessor already?::```suggestion } else { ```::argType looks like it is specTypes[0] here, but slottypes[0] in analysis above::Encountering a live `jl_opaque_closure_type` should also be an error (like Task), since it may capture impossible state data (world-age and validity)::nparams != nfields::```suggestion } else { ```::```suggestion jl_perm_symsvec(4, ""env"", ""source"", ""invoke"", ""specptr""), ``` nit: same names as CodeInstance?::```suggestion Base.show_tuple_as_call(io, def.name, sig; demangle=true, argnames) ```::nit: ```suggestion function code_typed_opaque_closure(closure::Core.OpaqueClosure, @nospecialize(types=Tuple); ```::```suggestion mi = Core.Compiler.specialize_method(clos.ci::Method, signature_type(clos.env, types), Core.svec()) ```::```suggestion return Any[Pair{CodeInfo,Any}(code, ty)] ```::separate PR?::```suggestion ccall(:jl_is_in_pure_context, Bool, ()) && error(""code reflection cannot be used from generated functions"") ```::> world age of their creation Seems to currently be missing in implementation?::This statement is only weakly true for `⊑` (and thus actually false in general), as it asserts that all OpaqueClosures are distinguishable only by type (while they actually have identity via the env and fptr fields).::I think we've currently tried to avoid putting non-Core objects in the cache here, as it can break (badly) if a second copy of inference gets loaded::This likely does not do what you want: ``` julia> Type{false ? Int : <:Float64} ERROR: ArgumentError: <:: too few arguments (expected 2) Stacktrace: [1] top-level scope @ REPL[3]:1 ``` missing tests?::```suggestion t = lbt == ubt ? t{ubt} : t{T} where lbt<:T<:ubt ``` Rationale: if ub <: lb (strictly, due to !ub_exact), then `t{T}` is Union{}, so we know that ub == lb But seems like `lb` is potentially useless, as why would we expect to want to enforce that the value is not concrete, and thus that the OpaqueClosure cannot be constructed?::```suggestion nargs = length(ea) - 1 ```::```suggestion # TODO: We could hoist code here (to where?) ```::generally a bad idea to iterate `stmt` directly: since those can be anything, it can force allocating many new tuple types and the getindex code to dispatch and handle them (thus, therefore, usually better to return a `Instruction`, which also encodes the idx for you to help manage in-place updates) ```suggestion for (_, stmt) in compact ```::```suggestion elseif any(x -> x[] === Argument(1), userefs(stmt)) fill!(uses, true) break end ```::```suggestion if stmt.args[2] === Argument(1) ``` (particularly because type of stmt.args[2] is unknown, this might otherwise be a MethodError)::would this ever appear as `getfield_opaque_env`, or was this guaranteed to run first?::```suggestion function lift_arg(@nospecialize lifted) ```::separate PR?::separate PR? (I thought fall-through was intentional)::DRY style: values should not be recomputed unnecessarily (and long lines often split by introducing named intermediates) ```suggestion if isa(callee, SSAValue) callee_inst = ir.stmts[callee.id][:inst] if isexpr(callee_inst, :new_opaque_closure) && length(callee_inst.args) >= 5 idx = callee_inst.args[4] if isa(idx, OpaqueClosureIdx) ir′ = ir.opaques[idx.n]::IRCode todo = InliningTodo(nothing, ResolvedInliningSpec(ir′, linear_inline_eligible(ir′)), true)) push!(todo, idx => todo) return nothing end end ```::Why `>= 5`? That should have a comment. (We know that `length(callee_inst.args) >= 4` is guaranteed by the IR validator, so we don't need to assert that anywhere else)::```suggestion nothing end ```::```suggestion source = calltype.ci if isa(source, OptimizationState) ... ``` (same nit: avoiding recomputing values)::Why do we not use the inferred type `widenconst(calltype)`?::```suggestion stmt′.args[1] = GlobalRef(Core, :getfield_opaque_env) ```::style nit: ```suggestion isempty(ir.stmts) && return ir ``` Is this actually legal IR? I though it had to contain `:return`, at least::types on these?::```suggestion ```::```suggestion nothing end ```::```suggestion ``` (appears to be dead code)::Should this be a TODO XXX? I'd assume that OpaqueClosures do have edges (ie. can call functions), so we need to be able to propagate those back to their caller::How did bestguess manage to get initialized to the wrong value? (I'm not sure why we even have it anymore, instead of using Union{}, but seems like ⊑ still has the code to handle it, for some reason that I don't remember from #36596 dcc0696971a100dbc63f90b8789632631dd1bfef, also)::I thought the major benefit of `OpaqueClosure` is that you don't have to aggressively specialize on the value. This seems to be doing precisely the opposite, and aggressively forcing repeated inference on any user of them.::This code effectively claims that an OpaqueClosure cannot call itself. However, that would seem to imply it cannot be passed as an argument, as otherwise we can build a y-combinator with it and invalidate this claim. It also implies that it can't call any recursive function that could call it (also a faulty assumption, for the same reason). I think that implies we need the majority of the same logic as abstract_call_method here. Probably by refactoring some helper functions? Since we don't optimize much yet anyways, I'd suggested that currently it should treat all opaque objects as potential derivatives of the same template.::```suggestion function abstract_call_opaque_closure(interp::AbstractInterpreter, closure::PartialOpaque, argtypes::Vector{Any}, sv::InferenceState) ```::Not all subtypes of Tuple have `.parameters` (maybe use `fieldtype`?)::```suggestion ``` seems dead?::The implication in `finish` is that inference is already done, since otherwise we might still have an unresolved cycle that must be converged first before we can annotate the correct (sufficiently wide) types. Thus, this is not a point in the graph where it is valid to look to look at IPO information.::coroutine support would allow llvm passes to optimize the capture list. We could write our own version of it, but I think the existing one would work fine.::Yes, it's not quite a real `Method`, since it doesn't get inserted in the global method list either and also shouldn't really appear in any `.sig` key-ed caches, since the `.sig` field has a different meaning for these methods. I think this needs to be part of a larger refactor of what it means to be a method, since I would also like to have alternative method tables for offload targets. However, for the purposes of this PR, I would like to keep this as is and keep iterating. I can disallow these methods in dump.c for now until we figure out a better way to deal with them.::> `argv[0]` is required to be an actual literal? I don't want to make that restriction in general.::I'm not convinced that's a good idea. We should never recurse into type inference here and it does not have an independent identity by which we could refer to it.::",a74e6982b79afbe8ec910926edc5c09e0dcd759c::f860f8b5fb7bde19a2fd81631ed7563cfe7830fd::be57eafffe20e85e412efaf1adf273e823c0e899::2ccaa2b12ab5d29695cf8fc67af09d1102b8ebac::61d9ba94d218e4aa282c90b21a216fef2ee33e08::c129e342c375e72326a6cfad758f088fec843ceb::190f4e973a83974b01bc7f904f2f374023932c54::147502bf241efd800beba7a70191b6c9d6693695::4b884a58e4b0e7cf4893424f43b5a31afd6bd927::6f97ef0b0066f17e05cb7a3ae003fdcfeceb5377::b40a7bd715ccacedf778663c314c6a3cd1165dd6::59981956115333131d3a21397c2871b8d5ef119b::
https://api.github.com/repos/JuliaLang/julia,37828,kf/clangsa10::master,1,merged,,"It failed assertions that we didn't notice, because we don't generally build clang with assertions on CI. Also, backport a patch we have in Ygg, but not locally.I'm surprised it doesn't warn the static inline method isn't defined by the end of the scope, but doesn't seem to?::No, this is explicitly fine. You can define a static inline in a header, it's just an error if you use it without providing a definition.::",98380a70e2621123b41668fb15559982a86f167d::b2a84cad821e7181b0dea714be2357e44d6895ef::
https://api.github.com/repos/JuliaLang/julia,37557,yyc/codegen/cmp::master,1,merged,backport 1.5::codegen::,"An undef field should always be treated equal to another undef field of the same type since there's no other way for the user to tell the difference between these. These could previously cause inconsistent comparison results or crashes. * Mark these types as `haspadding` so that they'll not hit the `memcmp` fast path. * Make sure `jl_egal` and `jl_object_id_` doesn't read bits fields in undef inline immutable field * Use `emit_getfield_knownidx` in `emit_bits_compare` so that the check can be done more easily Handle union fields of the same type in `emit_f_isa` to avoid regression. * Allow input to `emit_f_isa` to be NULL and lazily emit NULL check if necessary ```suggestion if (arg1.TIndex && arg2.TIndex && jl_egal(arg1.typ, arg2.typ) && ```::I assume so is the assert in the callee.::",ba2f681de4b7fa1de04032bdf2309f126ac4ab96::
https://api.github.com/repos/JuliaLang/julia,37284,yyc/codegen/meta::master,1,merged,,* `julia.typeof` is a pure function of the pointer itself within the lifetime of the object so it can be treated as readnone until we expose write to the type tag (during allocation) to LLVM. * The TBAA metadata can be applied to all functions that access only argument memory or inaccessible memory. Mark it on `memcmp` as well. ---- Note that the TBAA on `memcmp` currently doesn't do anything on linux and freebsd due to an LLVM bug. Ref https://reviews.llvm.org/D86837. A backportable version of the patch for LLVM 10 is available at https://github.com/archlinuxcn/repo/blob/443b0112e68ad95189a75a5d4324f4fb61b68714/archlinuxcn/llvm-julia/0001-Backportable-version-of-D86837.patch,c812c91318027bf68910f700dde1f058964ebd64::
https://api.github.com/repos/JuliaLang/julia,37243,jn/36462+36825::master,1,merged,backport 1.5::,,42a1d348553bd052807361cc44c2dd6a46884e87::8aaf971a35399e239c54311e37476f66b0916ba6::
https://api.github.com/repos/JuliaLang/julia,37210,backports-release-1.5::release-1.5,1,merged,release::,"Backported PRs: - [x] #36810 - Define `OrderStyle` for `Union{}` - [x] #37130 - Fix string interpolation into Markdown.Table and Markdown.List - [x] #37178 - fix #37126, spurious soft scope warning on hidden name - [x] #37181 - fix #37134, error with macro returning `x::T -> y` - [x] #37204 - fix #37199, indexing for 1-d views with offset ranges - [x] #37315 - reset ACTIVE_PROJECT when building docs - [x] #37357 - Mark that ismutable requires julia 1.5 - [x] #37385 - Make sure to build clangsa before running clangsa self tests - [x] #37296 - Allow packages to force depwarns - [x] #37404 - fix #37401, displaying `Enum` in the repl - [x] #37149 - fix ccall of strlen - [x] #37114 - Improve optimizations on NULL pointer check - [x] #37365 - inference: fix precision regression - [x] #37308 - fix #37282, printing juxtaposition of 0 confusion with hex,bin,oct literals - [x] #37386 - fix a possible segfault during static compilation - [x] #37394 - Build `julia_version.h` before running `clangsa` - [x] #37285 - Only emit incoming values for the phi when needed - [x] #37319 - codegen: phic/upsilon nodes can be set to undefined - [x] #37388 - Fix use of CreateAlignedStore - [x] #37443 - Fix `getfield_tfunc` for constant `TypeName` - [x] #37444 - Specialize _memory_offset on number of arguments. - [x] #37261 - Fix type-equality involving `Type{Union{}}` - [x] #37207 - Prune egal types when forming a `Union` - [x] #37472  - Fix memory leak in umfpack_numeric! - [x] #37534 - fix ""invalid assignment location"" macro hygiene regression - [x] #37511 - Fix getfield of potentially undef inline immutable field - [x] bump Pkg to 1.5.2 Contains multiple commits, manual intervention needed: - [ ] #37243 - code coverage fixes Non-merged PRs with backport label: - [ ] #36821 - Fix function call to rec_backtrace_ctx when using USE_SYSTEM_LIBUNWIND=1 ```suggestion @test code[1] === Core.Compiler.ReturnNode(QuoteNode(:Int32)) ```::```suggestion @test code[end] === Core.Compiler.ReturnNode() ```::",7764caf2aa85afe3d5e4f8cde450d113a32ba48c::a82ce87ec29eba2c62d3d1351538580f65b1b30c::2e803503af3d6cbad7f6fd4b51857bd98a69b573::c7dfcf6d17803a51a5062b216ef5c18b362c68e5::96cfb7e45a4b16280f9977f6cd6996292b726784::2fef8fc8ab7d865d856c68236b61884f821da112::764df9d16aed6b088ca4b59f295ae0309d3f8268::657c29c5a8f4a77a1b0600f2b2eaaefabec2b3ec::1efe7b7a446ea83c6be675d3fb93ebbc52b2ee01::29a880b506c89f8b09d2808a0ac694887f918ef2::3751599c73ca948bdf73428ef242ed03cd1914ff::1b1c443d4de5d75fcda44de816b3065bd64fd01f::f5adf3d264fd654fcf4c7d77ad441cc58dc542ed::dc57047614901dd57ac2eb09063739b3ecfe8d57::fc5df59083b145294a5a0af191c37b393d0c870b::31f3c01d0ddda348097ac4435efb4c1bee087921::d5b8d7efe5c5955728eb636fac5448db5271a1a9::2e95df40e1fd82f463356d775a1f3515d13451f1::23b061f32686ba4cdc537d49ecfae6ac75d79570::f2e48f812558e8aca910bd0a9530eebc78541ad1::2961707a1282f7e3b6819409b4d60101ce9e5302::5c96408139f1f4d386fbf8b6588fdf45622bddf6::72d0e51dc4643ba4bc72e004f15f0dc24b19ff73::bcc6a8774ced9fd457126d71dcf1df4e1b1b030f::9f1d1fa693a911563a89a4ff592cb48e729faed5::8cb458c6dcd8e067a3bd430b006efb0dfde56cf9::765e1b305c07f4939f041070bbe771c5131ca0c4::b8b7267ef3436b3df955198298b6c5dc7c61b391::
https://api.github.com/repos/JuliaLang/julia,37172,yyc/sigint_safepoint::master,1,merged,,"Despite (or as stated in) the name, it is a safepoint. A GC on another thread will always run no matter what kind of safepoint get triggered. This is technically a bug fix but triggering it requires calling the running the parser in a multithread setting so I bet no one will actually hit this even if it's not backported....",bba4e033767b14f6491d7f0a73bf28b95d3246d6::
https://api.github.com/repos/JuliaLang/julia,37149,yyc/symbol::master,1,merged,,* Require the symbol to fit in ssize_t This is the limit we have on arrays and I don't think anyone is using symbols that is as long as half the full address space. * Remove some unnecessary embeded NUL byte checks when constructing symbols Almost all use of `jl_symbol_n` have the caller checked for embedded NUL byte already. This technically introduces a C API/ABI breakage but it shouldn't matter on all platforms we support. * Fix ccall of `strlen`. ------------------------ The change to `base/secretbuffer.jl` should be backported. None of the others should. It's funny that the only bug that can cause silent error that I found is in security related code = = ...........,1bea9fa980885cb8197eb609e5c0dc4a1b8923b2::
https://api.github.com/repos/JuliaLang/julia,37114,yyc/codegen/nonnull::master,1,merged,,"Mark more functions and calls as non-null and use inbounds gep instead of integer arithmetics so that LLVM can more easily infer the non-null-ness of pointers. (Partially revert 2bb430e383809dcf5f73605a65f408c7e5bd22d6) Also add inline optimization for `ccall` on `jl_symbol_name` and makes sure the return value is treated as non-null by LLVM.backport?::Oh yeah, this line of change is in principle a bug fix..... (commit was from a week ago and I've forgot about that...............)::Yeah, I think I missed the second half of the langref documentation for this attribute. (for arguments, it means that it doesn't alias any mutable memory, but for return values, it also means the pointer itself is unique à la malloc)::",9688c969b4137d1864d3e24d3a7dd8951324b940::
https://api.github.com/repos/JuliaLang/julia,36899,backports-release-1.5::release-1.5,1,merged,release::,"Backported PRs: - [x] #36254 - docs: Fix indentation on !!! warn section - [x] #36734 - fix stackoverflow in circshift!(x, y, (1.0,)) - [x] #36835 - Update Mozilla CA certificate store to latest (07-22-2020) for libgit2 SSL. - [x] #36416 - Make compilecache atomic - [x] #36638 - Pass force=true option to rename in case of loading failure in compilecache - [x] #36502 - Update X86 feature and CPU detection - [x] #36819  - Fix compact float printing when output contains exactly 6 digits - [x] #36485 -  Update ARM feature and CPU detection (supersedes #36464) - [x] #36831 - A few processor detection/features tweaks - [x] #36850 - Fix allunique(::StepRangeLen) - [x] #36858 - test: fix textual output for precompile - [x] #36914 - REPL: fix confusion between function name and local variable - [x] #36956 - Fix #36955 - [x] #36776 - update MPFR to v4.1.0 - [x] #36705 - Strip non-integral address space from datalayout after GC lowering - [x] #36959 - Fix replace(::String, count=1) with empty pattern (issue #36953) - [x] #36996 - fix #36869, incorrect intersection with `Union` in supertype - [x] #36859 - Better deployment of rc docs - [x] #36975 - Improve inferrability of generic matrix-vector multiplication - [x] #36983 - Include new Documenter footer: ""Powered by Documenter.jl and the Julia Programming Language"" - [x] #36697  - build: make libunwind linked dynamically - [x] #37069 - Add `get-task-allow` entitlement to allow debuggers to attach to codesigned Julia - [x] #37105 - workaround for #35800, inference issue in `mapreduce` - [x] - Update Pkg Non-merged PRs with backport label: - [ ] #36821 - Fix function call to rec_backtrace_ctx when using USE_SYSTEM_LIBUNWIND=1",56fd9a2998b2d0c72e593739edd91337a1c983c9::33767f50d404a7ae84c50984a42fd217b75382e9::5bacb9fad99f47e696a748564e31de1dce172124::dd0b34ec4261d95176f4b0fa46041c43db0fdf38::a8250a8a8c11b663624ae3b3030af84764e5ecb8::529e87eb43779ee18ac5288ceaacc3cd2a77a4bd::f55743648a4678d170c67b5b65126b5e76a39df9::9ef24c2b0f31454e7ebb32b5716d74969f79680f::50dcb1d62f7edc60b233b441d7eff06654afe174::8df108fbfa889eb532845921928562f7e22ce5b5::39599ca891590d36bd53dfab9a664b6ef0978ef6::9d2e8f2ffdcd9c7ded22915eb040585e364cffbb::3bc052d91386833e543db07f4524105aa4613440::fe17de98687d4fe83a6f69e780531866d1acfadb::f82ca0955efacb18769e9c3ede27353f1ac21f56::9477413aef64a9a14cb5239633abeaf4ee6fbcb6::495caa21a64784073529ac64f26557ef7171756f::27408bcf6c8fe9f8156885f8a39088acb65f1620::1f2b5f48c99fc53008a14c5a1bcd0d5872a6dbab::46bb46eb8a0a152dcdb61425ca4be612b00ae56f::d01af8deefdb9363b24e63c316739cd36bd1cf73::f05062f3ff99217c27549334259e0f2611741676::d37f70ef5b3548cfa09bf5d530522f6fef3746cf::4725e50ede46a154e76759d40d88d8950085e749::b3921e235d7477be50694e1c46241f586e189fe0::fbab4983f0dc0ca7f0ed4f5a9fab1214248cd43e::c8cd8a296fd1571f39f3c3a66619954122431305::a19778600c9c53cf5c3ddf61d1f5d57c8f836d4a::
https://api.github.com/repos/JuliaLang/julia,36850,alluniquefix::master,0,merged,arrays::backport 1.0::bugfix::,Fixes #36849.,4d215e4b55238c9cd5815b9bdac493a723560d14::
https://api.github.com/repos/JuliaLang/julia,36841,master::master,0,merged,backport 1.0::linear algebra::,"I have added a dimension check for the specific multiplication of diagonal matrix and vector, which was missing as reported by #36746.This method needs the same treatment -- can you add that too?::Sure, I pushed another commit::I don't think that Diagonal*Diagonal needs it. It falls back to the element wise product of vectors which has a dimensionality check.::It seems that a single-element vector behaves as a scalar when doing the element-wise product: ``` julia> randn(1) .* randn(5) 5-element Vector{Float64}: -0.09149628486880286 -0.20889567435214648 0.09612350337701256 0.08092068173428073 0.06652421890696196 ```::Ah, nice catch.::",08cc47d41d3b0318da48f58e7aeec2eac78843d9::3b7393e4bf22bc010eb1114cafc75ca9cfb6edbe::
https://api.github.com/repos/JuliaLang/julia,36838,jc/cat_shape::master,0,merged,,"This brings a faster `cat` for arrays, especially for large ones ```julia julia> s = [rand((0.0,1.0), 2,5,100) for _ = 1:5]; # before julia> @btime cat(s...; dims=3); 13.694 μs (83 allocations: 42.39 KiB) # after julia> @btime cat(s...; dims=3); 10.816 μs (49 allocations: 41.19 KiB) julia> s = [rand((0.0,1.0), 2,5,100) for _ = 1:5000]; # before julia> @btime cat(s...; dims=3); 751.367 ms (12552030 allocations: 803.21 MiB) # after julia> @btime cat(s...; dims=3); 12.766 ms (30044 allocations: 40.10 MiB) ``` Similar results can be observed for `hcat` and `vcat`. This also fixes #36750, would be nice to get this backported. It is worth to note that there is actually a much slower workaround to #36750 ```julia julia> s = [rand((0.0,1.0), 2,5,100) for _ = 1:5000]; julia> @btime reduce((x,y)->cat(x,y, dims=3), s); 5.377 s (144963 allocations: 11.78 GiB) ``` and this is widely used in Flux community, e.g., https://github.com/FluxML/model-zoo/blob/4bf84760b370f264eadc7b19f6fb2070dd689bee/vision/dcgan_mnist/dcgan_mnist.jl#L27 cc: @cossio I think it would probably be even better/simpler just to write a loop.::",a6bb8d000e235a784d5648c6c4718f6fb41428b3::9fefd9c3bf1f6a41d36d7c2ba060ec31a4b0d907::75642bc8a970e4ed654826389520053a00852acb::a223b0cad504171ab7b97e4f3805141c30d374c9::
https://api.github.com/repos/JuliaLang/julia,36835,libgit2-cacert-july-2020::master,0,merged,backport 1.0::,"@staticfloat The [curl project](https://curl.haxx.se/docs/caextract.html) has updated the Mozilla CA certificate store earlier last week (07/22/2020). This update coincides with CA certificate list changes to [Mozilla NSS 3.54](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.54_release_notes). 4 CA certificates were added: - Microsoft ECC Root Certificate Authority 2017 - Microsoft RSA Root Certificate Authority 2017 - e-Szigno Root CA 2017 - certSIGN Root CA G2 4 CA certificates were removed: - Verisign Class 3 Public Primary Certification Authority - G3 - AddTrust External Root - Staat der Nederlanden Root CA - G2 - LuxTrust Global Root 2 In addition, the curl project specifies that the CA certificate store file was changed on 06/24/2019 with 138 certificates from the previous 138 certificates in January 2020. However, using the `diff` tool generated the following output: ```diff --- cacert-2020-01-01.pem	2020-07-28 07:04:58.284267941 -0400 +++ cacert-2020-06-24.pem	2020-07-28 07:04:31.343974510 -0400 @@ -1,7 +1,7 @@ ## ## Bundle of CA Root Certificates ## -## Certificate data from Mozilla as of: Wed Jan  1 04:12:10 2020 GMT +## Certificate data from Mozilla as of: Wed Jun 24 03:12:10 2020 GMT ## ## This is a bundle of X.509 certificates of public Certificate Authorities ## (CA). These were automatically extracted from Mozilla's root certificates @@ -13,8 +13,8 @@ ## an Apache+mod_ssl webserver for SSL client authentication. ## Just configure this file as the SSLCACertificateFile. ## -## Conversion done with mk-ca-bundle.pl version 1.27. -## SHA256: f3bdcd74612952da8476a9d4147f50b29ad0710b7dd95b4c8690500209986d70 +## Conversion done with mk-ca-bundle.pl version 1.28. +## SHA256: 5796295533cad5a648a20a115b0894dc9b318c41501796e7158e824c323f11c3 ## ```",0f537cd02c81b931c9deef5c53e0bc31f26427ff::
https://api.github.com/repos/JuliaLang/julia,36757,mb/36753::master,1,merged,bugfix::,"Followup to #36739 (and currently built atop it), this restores the `pointer(::SubArray{<:Any,<:Any,<:Array,<:Tuple{Vararg{RangeIndex}}}, ::Tuple)` method that was removed in #36405. It does so, however, as a deprecated method, with the actual method being implemented on `pointer(::SubArray{...}, ::CartesianIndex)`. The rationale here is because the `::Tuple` method was undocumented and only supported on that one _highly_ specific `SubArray` type. I am keeping this patch as minimal as possible for backporting; in the future I aim to support `Vararg{CartesianIndex, Integer}` locations to make this more `getindex`-y and move farther away from the conflation with memory offsets.",bd09c59710b489bd402059fc36dc9ba478ffc2e9::
https://api.github.com/repos/JuliaLang/julia,36755,backports-release-1.5::release-1.5,1,merged,,Includes: #36738 #36727 #36725 #36715 #36657 #36650 #36641 #36610 #36679 #36739 #36757 #36763 #36785 #36781,01881afb689168a149fd4636c0abd4a1e3845639::73da74eddbc31d195018f10009de63dbde642e00::8ac1a3aa6aff19cf09c41d0701bcd4c3c6919a7f::cfcffae3cfbb5da1cf985cd248ff1a97f2404e5e::b0c6e2b8bde09746ca781569e008fb5516b9c112::2567aaf5ad9b731d6a7b40f85363caad71ebe015::4a2830a548af3398c5b7088cd51deac92f78e35b::e326256a19412e85e1f7ed9a7bf8519f0a6a59ac::eae3216416453b53631afa6c803591cf2c5ae5b3::b16a987238310433d99ad34922e5e546afc4dc9b::81b53a787370d1d6b273f576f4b8677131268330::eccf77683b56bed051d28d75f0714513e16c76f9::9b37634dc3c1cb657fa9c32c9823877c770c9112::76659169cc5b778c1a1cba90a04117cebeb58257::d24e088da4035565bccf397022a7d4beea8865c8::bb0800bee8e2a990dd4d8b8b2570f6dfd2c8fb76::75de80b0d013be195a7e84463eeb22eb0e2190f3::76c232bd4413bd0dc7fd1d17f99defe886475d81::e0555db89eed56db0f93b55e31ac2811acac2da6::98df0d5ad3d4aa96825b22660e35551e74c40a33::445545455c3cc8e00b2990da3a06822d1e773b06::
https://api.github.com/repos/JuliaLang/julia,36543,doq::master,0,merged,backport 1.0::bugfix::dates::,"`dayofquarter()` is off by one for leap years when `month > 3`. Before: ```julia julia> dayofquarter(Date(2019,4,1)) 1 julia> dayofquarter(Date(2020,4,1)) 2 ``` After: ```julia julia> dayofquarter(Date(2019,4,1)) 1 julia> dayofquarter(Date(2020,4,1)) 1 ```",805523b440f9877bc9cb143ea95ae00df610abb5::
https://api.github.com/repos/JuliaLang/julia,36502,yyc/x86::master,1,merged,,First three commits assumes LLVM >= 5.0 Last two commits assumes LLVM >= 7.0 (really 8.0 but nothing was needed from 8.0) At least the first commit should be backported to all versions that supports LLVM 8.0 ref https://github.com/JuliaLang/julia/issues/35215#issuecomment-631496751 ```suggestion // This can happen with virtualization. ```::Ooops....::,6fd5b82b2fb704346871579be15dc4ab2459de79::8f6fe5dd360a696174cce15cab8179a26cd07f6c::9f83eaf5c61a17daf494b60bcfd82be7277fdf4b::9ad9daa20af45aa5789e3418a2d8446fe33bc1ff::87c609a8a92330b4cd4e0fdc81ee77c20e1a3c6d::
https://api.github.com/repos/JuliaLang/julia,36435,ed/fix-ir-36422::master,0,merged,bugfix::,"Fix https://github.com/JuliaLang/julia/issues/36422 using @vtjnash's diff Should get backportedWhy is this in a new process? So it doesn't segfault the worker if it fails?::We do have many tests that will just segfault the worker if they ""fail"", so I think it would be fine without the external process, but I don't care much either way.::Yes, that's why. I saw this method used above, so I thought it would be desired. If I should change it I certainly can.::",c8ccfd91d43f179f7dae61c6e4717171b61d57ea::
https://api.github.com/repos/JuliaLang/julia,36428,backports-release-1.5::release-1.5,1,merged,release::,"Backported PRs: - [x] #36233 - Fix: rem2pi for negative values greater than 2pi - [x] #36312 - Remove NEWS.md from the PDF of the manual - [x] #36333 - Add Release Notes back to the html version of the documentation - [x] #36397 - Check axes in Array(::AbstractArray) (fixes #36220) - [x] #36359 - deleteat!(::BitVector, inds) : check bounds for the first passed index - [x] #36405 - Fix pointer to no longer assume contiguity - [x] #36091 - Add passthrough of non-Markdown docs in document trimming Non-merged PRs with backport label: - [ ] #36173 - REPL prefix search: add ^x ""pass through"" key - [ ] #35929 - Remove unnecessary restriction to `StridedVecOrMat`",fc6370957e287301b006692e44374e8affc48e20::ec9b512be871533b6cf964d4f1258a07768c5001::db957043811846f2e925d2510ca8b4f72a401072::62f49b7e9cc35ea17a5faf1df7f9fe757cb4ba58::9b3bebe3524d7e8dcdb8b2b3ece07c557d1158cc::0ce98dbc86675ffc1fcbac8b89f59630483a260e::593033da6a552ed0552af6ed22873853b4abe82e::f5c972cd253ec68a28df34e4648e4428073f97be::
https://api.github.com/repos/JuliaLang/julia,36370,master::master,0,merged,,These errors are also present in 1.5 beta. So maybe this is backportable. If you don't mind please backport also the docs for takewhile and dropwhile for 1.4. They were merged in 1.4 but their docs were present only in 1.5.,8fef02da0eb612bd69ea4a10808d74a282173daf::27c33f6cfdc614e16eddbef3349448d31e990e6c::82b0e8d8a6146a70f8c3706631a2b24200f8f229::0ee2403bbc3b3be276a0c9af1b7f1c6ae38dd8f4::f5b9496c86ff883bcf8701671f9f1d9d4edea0aa::040916efea157fe4b7c398b942596f1c9e05e3c4::
https://api.github.com/repos/JuliaLang/julia,36279,rationalbinarypromotion::master,0,merged,rationals::,"Fix #36277 I think this is a bugfix (see issue) that needs backporting to the 1.5 branch.This should probably either use `===` for checking equality or check the return type explicitly. Otherwise the return type is still allowed to differ as long as equality by `==` holds.::I also prepared a fix for this and used the following tests: ```julia inttypes = [Int8, Int16, Int32, Int64, Int128, BigInt, UInt8, UInt16, UInt32, UInt64, UInt128] for T in inttypes, S in inttypes @test typeof(one(Rational{T}) * one(S)) == typeof(one(S) * one(Rational{T})) == promote_type(Rational{T}, S) end ``` Note that these tests don’t include `*(::Rational, ::Rational)`, since I only restored pre-1.5 behavior in my fix (https://github.com/JuliaLang/julia/commit/844c99303bd720444a2506bf9b7ccd7a147aa0f9).::@simeonschaub You are right, thanks for pointing this out. I added your tests @sostock (and others, including the case of `*(::Rational, ::Rational)`) in the last commit, thanks!::",75d648c3ba108cc099337874c6d05852b0a55f10::147c9bc98a07a4a01d25db0afe9c9e389a5411b4::
https://api.github.com/repos/JuliaLang/julia,36233,rem2piTestCases::master,0,merged,backport 1.0::bugfix::maths::,"Fix for #36232 We just need to pass absolute value to `rem_pio2_kernel`. The function `rem2pi(x::Float64, ::RoundingMode{:ToZero})` gives wrong answer for negative numbers. The tests cases were limited so it was missed. ``` julia> rem2pi(Float64(-8), RoundToZero) -4.566370614359173 # wrong answer julia> rem2pi(BigFloat(-8), RoundToZero) # correct answer -1.716814692820413523074713233440994231605661201249788358050110815384367187427604 ``` Answer for rem2pi(8, RoundToZero) should be `-8 - 2pi*round(-8/(2π),RoundToZero)` which evaluates to -1.7168146928204138 The answer for rem2pi(Float64(-8), RoundToZero)  & rem2pi(BigFloat(-8), RoundToZero) are different because the definition for BigFloat fn is different. https://github.com/JuliaLang/julia/blob/38f2c594c49cec46d38be6dd614a5592582a3016/base/mpfr.jl#L713 https://github.com/JuliaLang/julia/blob/38f2c594c49cec46d38be6dd614a5592582a3016/base/math.jl#L1000",3d554d5046b5e50cdbf756fae06a6d070c877db5::e3c3a74596cd6d722ddd9c92b45253c49b7dae1d::
https://api.github.com/repos/JuliaLang/julia,36162,kc/bump_stdlibs::master,1,merged,stdlib::,Since these are getting bumped on the 1.5 backport branch it makes sense to put the most recent stuff on master as well.,9cb419335f30bcf44f7dcb074acec8de8bb29f3e::4b7e36a77bce95311c7f71b9da43fac54a66c90f::
https://api.github.com/repos/JuliaLang/julia,36113,twiceprecisionzero::master,0,merged,,Fixes #36080 (and thus should be backported to 1.5).,85931076eefdd2638aaa4c0702cb962b84d73cdb::
https://api.github.com/repos/JuliaLang/julia,36098,backports-release-1.5::release-1.5,1,merged,release::,"Backported PRs: - [x] #35232 - LibGit2: add resolve_url to RemoteCallbacksStruct for LibGit2 0.99.0 - [x] #36033 - fix #36031: Printf bug for BigInt - [x] #36061 - Update armv7l `-d16` -> `+d32` feature change for LLVM 9+ - [x] #36070 - rename pop!(vector, idx, [default]) to popat! - [x] #36046 - Fix a bug with break/continue/return in at-testset begin end - [x] #36076 - clarify `show` doc strings - [x] #36096 - Revert ""Use norm instead of abs in generic lu factorization (#34575)"" - [x] #36117 - fix #36116, diff(::AbstractRange) returns an Array - [x] #36122 - fix #36108, printing invalid numeric juxtapositions - [x] #36126 - Fix mkpath error handling - [x] #36121 - fix #36104, assign global name during type definitions - [x] #36113 - Fix zero(::Type{TwicePrecision}) for dimensionful quantities - [x] #36074 - Fix equality for one-element ranges - [x] #36143 - fix ImmutableDict(pairs...) constructor - [x] #36115 - inference: ignore badly behaving generated functions - [x] #36059 - Rename AddrSpacePtr - [x] #36152 - Mark Tuples with Bottom among their parameters as cacheable - [x] #36187 - Allow non-Function callables to be used in count(f, itr) - [x] #36273 - fix #36272: Error with optional argument in anonymous function defined in macro - [x] #35281 - Fix Broadcasting of Bidiagonal - [x] #36279 - Promote on Rational binary operations - [x] #36305 - Remove `init` from `count!` docstring - [x] #36231 - deleteat! : check bounds for the first passed index - [x] #36336 - Switch `httpbin` tests over to JuliaLang-hosted `httpbin` mock server - [x] #35976 - more precise inference of `splatnew` Non-merged PRs with backport label: - [ ] #35929 - Remove unnecessary restriction to `StridedVecOrMat`",a7c4fd383852e5465988037f95ab438aae277857::91216bfdc96c51c343e9d9522f434407a32aec48::53f039332e2acc29b3f1d80066a2ffb9f1a608cb::5e85387d8ead42ab2418b5cfff8fd6ddff2052f0::d01886d2d58abf52cefbb27dfb17b8dd6936bb52::c7476afb9c816e8bdb76f506e7b5cafc9eea0c52::99adb513b0391b1504c603de6415ab1091439c5b::3ccc9166f9107e424a1e46290b7087e73b39d9a6::88b689b10bd0d30cf9b2a78a61f5cfefd87bf91b::539eab5e162b8052870b405a80065f075a8194cb::633046e65b764a6f922bdd667bff6097a1eafdb3::360f5cc553835d4564d188decd3a17b8cd477040::fdd45476b4e9a037f183880ea54fc837d4727bd1::5c236b4f06523662769328d9d371b05be364251f::60bab00ea1440e6fafa9922b306b7d956ea0aede::2f8eb20812848bfa78c0d4d109a32ba170e1781c::62ea26d235a65dea3c31b9ef547119d8afb9b6ec::cf26388cf561929386be261f1bb29cd4d5c906dc::bf34e0a1241e3f36b283539cef734614af09498a::e4b83af8cfc9583d33e76d385e9073832d462c22::3854131c82192ce45db13187e61f3314b75ddf23::ea15599fde9be8e41982e10c123cd5db1339ffab::6c65ec84f939c272d005d1352f891a4af7336a5b::8dec8f10bd76518ae0bdc84eded25ce76139221e::ee413108f89a5fd4576167ea1fa97ea851d63db4::1cf4720ef76a83a1d93bdbe0cf0b4af3e206377b::e2cfc6f80b62a1b655f543d280ac5f8ca2b7ba95::d3bc87f4623a57fe0b3c97a560d4a8a54845e307::3e5174f6ea2ec3ed7e1c0db673d95ff9bdca9a29::
https://api.github.com/repos/JuliaLang/julia,36091,trimdocs_text::master,0,merged,bugfix::docsystem::,"The new extended docs feature added in #34226 defined how to trim [Julia's standard] Markdown docs. This breaks the docs retrieved in `PyPlot` since it just forwards through the original Python docs as plain-text (wrapped in `Base.Docs.Text`), and there's no appropriate `trimdocs()` method for that case. There is a fallback definition of the internal `_trimdocs()`, though, so it appears the restriction to specifically `trimdocs(::Markdown.MD, ::Bool)` may have been a mistake, and loosening the type on the first argument fixes the issue. I've tested this fix on master, but it should be noted that the new v1.5 beta throws the same error when using PyPlot, so this PR should probably be backported (if accepted). ```julia julia> using PyPlot help?> plot search: plot plot3D plotfile plot_date plot_trisurf plot_surface plot_wireframe triplot subplot boxplot ERROR: MethodError: no method matching trimdocs(::Text{PyPlot.var""#1#2""{Tuple{PyPlot.LazyHelp}}}, ::Bool) Closest candidates are: trimdocs(::Markdown.MD, ::Bool) at /home/justin/devel/ext/julia/usr/share/julia/stdlib/v1.6/REPL/src/docview.jl:111 Stacktrace: [1] top-level scope at /home/justin/devel/ext/julia/usr/share/julia/stdlib/v1.6/REPL/src/docview.jl:366 julia> using REPL; Revise.track(REPL) help?> plot search: plot plot3D plotfile plot_date plot_trisurf plot_surface plot_wireframe triplot subplot boxplot subplots matplotlib subplot_tool subplot2grid subplots_adjust get_plot_commands stackplot eventplot Plot y versus x as lines and/or markers. Call signatures:: plot([x], y, [fmt], *, data=None, **kwargs) plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs) [...] ```Since `md` is not a `Markdown.MD` anymore, it's a bit misleading to name it `md`.  Also, `if trimmed` block expect `md` to be a `Markdown.MD`.  You wouldn't hit that block since `trimmed` would be always `false` for non-`Markdown.MD` object.  But it is not immediately obvious.  So, somebody might try to refactor this to the one before the patch.  I think a cleaner approach would be to add ```julia trimdocs(doc, brief::Bool) = doc ``` instead. ::I actually had something similar on my first pass, but changed it to be the absolute minimal change (in the hope that simple is easier to pass muster). I'd be happy to change more, though, if that's preferred.::Minimal does not mean maintainable.  The current patch has the problems I mentioned.  I think adding an extra method is cleaner. ::Sure — that's why I pinged Tim to ask about original intent. The fallback `_trimdocs` was obviously meant to serve that purpose, so I can just change that to be a level higher in the call chain. Commit incoming.::Don't we still need this? `Markdown.MD` can have non-`Markdown.MD` content.::Oh, can it? I didn't actually run this code — just made the ""obvious"" (bad assumption...) change. I'm not familiar with the Markdown data structures.::> The fallback `_trimdocs` was obviously meant to serve that purpose I'm not sure. It'd imagine that Tim would have tested it if so. It could just be an implementation detail for handling recursion. ::Yup, you're right. Fixed.::You're right. Following comment was relevant. I'd assumed all Markdown-parsed content was an `MD` type, but there are more types.::",b0b87221c755cb8779f1313d9b3dded1382643c9::
https://api.github.com/repos/JuliaLang/julia,36074,one_element_ranges::master,0,merged,,"#32348 made zero-element ranges compare equal, but some types of *one-element* ranges do still not compare equal if their `step` is different (cf. https://github.com/JuliaLang/julia/issues/29421#issuecomment-635838603, thanks to @ti-s for pointing this out). This PR fixes that. As discussed in #29421, this should be backported to 1.5. Should this be mentioned in the NEWS.md/HISTORY.md item for #32348?",73858763671d84d87c8007b6228ef67c0ff61d15::
https://api.github.com/repos/JuliaLang/julia,36070,rf/popat::master,1,merged,arrays::,"Cf. discussion at #35513. Compared to `splice!`, `popat!` admits a default, and can be faster (e.g. 40% faster). When backported, I will make a PR to the 1.5 branch to update the NEWS.Might be a good idea to also add a sentence on what the optional `default` argument does.::Good catch thanks!::",afab8962d4598103de686b5e632546e1bd6693d3::1eaea36514b1c498db66bb2221a8629a9310de66::
https://api.github.com/repos/JuliaLang/julia,36064,mh/ptls-accessors::master,0,merged,,"In code which may be compiled against one Julia version but then gets loaded in another (e.g. due to an update), it is problematic to directly access members of jl_ptls_t, as this structure frequently changes between Julia versions The accessor function `jl_get_current_task` and `jl_get_root_task` avoid this. Note that macros `jl_current_task` and `jl_root_task` exist, but since those are compiled into the code which includes `julia.h`, they do not deal with the situation described above. No alternatives seem to exist for `jl_get_safe_restore` and `jl_set_safe_restore`. Motivation: the integration of [GAP](https://www.gap-system.org) with Julia by changing GAP to use the Julia GC so far works quite well (see also [GAP.jl](https://github.com/oscar-system/GAP.jl)) but unfortunately GAP has to be recompiled when the Julia version changes. This is because GAP kernel code expects the GC to perform stack scanning; and for that it needs to know whether the current task is the root task, and also to catch hard errors (segfaults) triggered by reading beyond the bounds of a stack into a guard page. (Note that we try very hard to *not* run into this, *but* for the main thread, this apparently cannot be avoided 100%). To cope with this, we need to recompile GAP against every new Julia version; unfortunately an upgrade to Julia does not necessarily trigger updates to installed packages, so this is trick to get right. See also https://github.com/JuliaPackaging/BinaryBuilder.jl/issues/511 A lot of this could be sidestepped if were able to make a `GAP_jll`. Alas, there are several stumbling stones... This PR tries to remove several of them.  We need ... - `safe_restore` to catch exceptions caused by access to guard pages; - the `root_task` to check whether the current task is the root task (so an API to test whether a given task is the root task, a la `jl_is_roottask(task *t)` or even `jl_is_currenttask_root` or so would be sufficient to our needs; - the `current_task`so that we can e.g. call `jl_task_stack_buffer` on it. I am completely open to changes here; e.g. better names, better places where to put the new code, etc.; perhaps you also have alternate ideas how to structure this. If this ever gets merged (after revisions etc.), can I request that this be backported to 1.5? Then we'd only have to make two GAP_jll: one for Julia 1.3 and 1.4 (no TLS layout between them), and one for 1.5+. (that said, wI'll survive if it doesn't get into 1.5 anymore, of course) If there are any questions, @rbehrends and me will try our best to address them.",8a86044fc0b5baa7e00b2081557ff6201a431e0d::
https://api.github.com/repos/JuliaLang/julia,36059,tb/llvmptr::master,1,merged,codegen::gpu::,"This PR started as a rework of AddrSpacePtr, [adding support for it to `pointerset` and `pointerref`](https://github.com/JuliaLang/julia/commit/60cddd7e82523f17ace4071065521a212a897da4), but while doing so I realized that (1) it isn't a good fit for Base (e.g. what to do at run-time with non-generic address spaces), and (2) AddrSpacePtr doesn't accurately reflect what this type does: These pointers are lowered to IR in a way that more closely resembles the underlying LLVM pointers: ```julia julia> foo(x) = x foo (generic function with 1 method) julia> @code_llvm foo(C_NULL) ;  @ REPL[1]:1 within `foo' define i64 @julia_foo_726(i64) { top: ret i64 %0 } julia> @code_llvm foo(reinterpret(Core.LLVMPtr{Nothing,0}, C_NULL)) ;  @ REPL[1]:1 within `foo' define i8* @julia_foo_817(i8*) { top: ret i8* %0 } ``` i.e. more than just adding address space information, so it seems better to call it `LLVMPtr`. I also considered [lowering them to non-opaque types](https://github.com/JuliaLang/julia/commit/7f67ef0997d1be13df4a44d5ff69910fdc63a545), i.e. `i64*` in the above example, but LLVM itself seems to be moving away from that it seems better not do. (Linked changes don't fully work) PR also adds an ugly error when using invalid address space typevars -- no way to cleanly emit an error from there. Open question: [add support for `pointerset`/`pointerref` with `LLVMPtr`s](https://github.com/JuliaLang/julia/commit/60cddd7e82523f17ace4071065521a212a897da4), or keep these intrinsics in e.g. LLVM.jl? They currently live in CUDA.jl: https://github.com/JuliaGPU/CUDA.jl/blob/3af3e3104cc7baae2408598220395eff078e3f28/src/device/pointer.jl#L114-L180 Marked for backport so that we don't have the old name in any release. cc @thomasfaingnaert",968ccfc2409eeb7cdf1debf6e8061bfd2bb470f4::a6354d9898ea213dfec0085408eac7538c0708f3::
https://api.github.com/repos/JuliaLang/julia,36046,pop_testset::master,0,merged,backport 1.0::bugfix::testsystem::,fix #32937 fix #36045,581702e2e5a0116189edf3915ffe1edb083115e5::
https://api.github.com/repos/JuliaLang/julia,36033,printf_bug_bigint::master,0,merged,,"These were omitted during testing and weren't valid anymore. Should probably be backported as this is a bugfix. close #36031```suggestion p = pointer(digits,2) ```::probably a good idea to use the same naming convention as elsewhere ```suggestion len,pt,neg = decode_dec(x, digits) d == n && return (len,pt,neg) ```::```suggestion ccall(:memset, Ptr{Cvoid}, (Ptr{Cvoid}, Cint, Csize_t), pointer(digits, pt+1), '0', n - pt) ```::```suggestion return (len,pt,neg) ```::```suggestion _, _, neg = decode_dec(round(BigInt,x/big(10)^(d-n)), digits) return (n, d, neg) ```::",00b36b1ddb4d421149fa34b7f69582207264cf53::0f307e393cc5e1a98c20c3c5b81472bef1859aaa::
https://api.github.com/repos/JuliaLang/julia,35979,mg/bump-zlib::master,0,merged,build::,"For reference, this is the corresponding PR to Yggdrasil: https://github.com/JuliaPackaging/Yggdrasil/pull/1051.  Not sure whether I need to update some build commands in case one wants to build zlib from source. See for example https://github.com/JuliaIO/CodecZlib.jl/issues/53 about the poor performance of current build. Given the important performance boost, it may be worth to backport this to older releases.I'm not entirely sure this is correct, so please triple check what I did :slightly_smiling_face: ::Won't be checked by CI - but I tried it out manually and looks good.::Thanks!::",3865e875733fd2c7e7bba6fb71dbd65caa8e081d::89bb96c8e661984db51eef12d0c02fe9fbeea7f1::
https://api.github.com/repos/JuliaLang/julia,35871,foldl-ImmutableDict::master,0,merged,bugfix::,"Currently, the behavior of `Dict(pairs...)` and `Base.ImmutableDict(pairs...)` are different: julia> Dict(:a => 1, :a => 2)[:a] 2 julia> Base.ImmutableDict(:a => 1, :a => 2)[:a] 1 This PR fixes the latter to return 2. cc @simeonschaub As I think this is a bug fix and this feature did not exist in 1.4, I add the backport label.",34a24d10572da97e498ec46b25eedaae7e09ac28::
https://api.github.com/repos/JuliaLang/julia,35825,backports-release-1.4::release-1.4,1,merged,,"Backported PRs: - [x] #35080 - Fix MacOS Notarization - [x] #35378 - precompile: avoid a potential crash when adding methods - [x] #35363 - add null check for module-default-defs - [x] #35545 - implement LibuvStream interface for BufferStream - [x] #35579 - Add a fast path for returning """" from repeat(str, 0) - [x] #35555 - exclude types with free variables from `type_morespecific` - [x] #35590 - fix buggy rand(RandomDevice(), Bool) - [x] #35695 - Fix dropped bytes when bulk reading from uv streams with oversized bufs - [x] #35728 - Fix and test PCRE error message getter. - [x] #35758 - Have matrix square root account for Rii=Rjj=0 to prevent NaN values - [x] #35479 - fix #35134, regression in printing nested quote Exprs - [x] Bump Pkg version Need manual backport: - [ ] #34935 - [WIP] Bump SuiteSparse to 5.4.0+6 Non-merged PRs with backport label: - [ ] #35232 - LibGit2: add resolve_url to RemoteCallbacksStruct for LibGit2 0.99.0",889de01b24ae619107183f072cbe136998570dae::d04036f479064219c485cc8ed9fb5fff364a7cf9::fe434067f08c056483085aac6ac5aef31a2f8606::3be9f109ac597854fb0cbd246f1fff545cae424a::75c7c600ced9cc7006b74eb3c55e1881d1bc2328::9651235ad7dd325bdcc672d94694a221cabc3598::e76bf144f6977247b90aeab5e2bdbedb5f780f9e::0203e947a4b13d7a6a92f5a849a2c7e506d9002d::36d26003543e015bfb10ed22af336bd98bd91d0d::8b3a4a2df52e3bc53d6fc6c74c88287e906dd4ad::c9b9b8c2167e7f0c5de9dc51ee92414c37187608::c0b1a0caac4a5dc52425d0d63e91aca96a2d971e::
https://api.github.com/repos/JuliaLang/julia,35758,matrix-sqrt::master,0,merged,backport 1.0::bugfix::linear algebra::,"# Description Tries to Fix #35058 Add a check when `R[i,i]` and `R[j,j]` is 0 to not call `sylvester(0,0,-r)` # Testing ``` julia> sqrt(A*B*A') 4×4 Array{Complex{Float64},2}: 0.307265+0.0im     0.0455076+0.0im   2.29019e-16+0.0im  -2.01045e-16+0.0im 0.0455076+0.0im      0.209085+0.0im  -2.37063e-16+0.0im  -7.04933e-17+0.0im 2.29019e-16+0.0im  -2.37063e-16+0.0im   5.33599e-31+0.0im  -9.53187e-32+0.0im -2.01045e-16+0.0im  -7.04933e-17+0.0im  -9.53187e-32+0.0im   1.39738e-31+0.0im ``` Where previously it returned ``` julia> sqrt(A*B*A') 4×4 Array{Complex{Float64},2}: NaN+NaN*im  NaN+NaN*im  NaN+NaN*im  NaN+NaN*im NaN+NaN*im  NaN+NaN*im  NaN+NaN*im  NaN+NaN*im NaN+NaN*im  NaN+NaN*im  NaN+NaN*im  NaN+NaN*im NaN+NaN*im  NaN+NaN*im  NaN+NaN*im  NaN+NaN*im ```extra space before `&&`::Isn't `R[i,j]` already zero?::Better ```jl @test C^2 ≈ A*B*A' ``` which will also fail if there are NaN values in `C`.::updated in 573d006::removed in 573d006::yes you're right, fixed the ifelse in 573d006::Would be clearer to combine all of the `if` statements: ```jl if !(iszero(r) || (iszero(R[i,i]) && iszero(R[j,j]))) R[i,j] = sylvester(R[i,i],R[j,j],-r) end ```::I would declare these as locals with a `let` statement, and compactify the matrices a bit. ```jl # Issue #35058 let A = [0.9999999999999998 4.649058915617843e-16 -1.3149405273715513e-16 9.9959579317056e-17; -8.326672684688674e-16 1.0000000000000004 2.9280733590254494e-16 -2.9993900031619594e-16; 9.43689570931383e-16 -1.339206523454095e-15 1.0000000000000007 -8.550505126287743e-16; -6.245004513516506e-16 -2.0122792321330962e-16 1.183061278035052e-16 1.0000000000000002], B = [0.09648289218436859 0.023497875751503007 0.0 0.0; 0.023497875751503007 0.045787575150300804 0.0 0.0; 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0] @test sqrt(A*B*A')^2 ≈ A*B*A' end ```::changed to this in faa95fd::addressed in faa95fd::",e9f88f915de88027259b697032e3c89c50dd44fe::a83b58b5f64ea7fb95ce0d95891cca028fcedbc8::0e60c5b95b1db19b19eda9a4f76996365c364ae9::573d006a573229db07405d37ea70eceffeb36012::faa95fdae08d4fd84e4067869e7028ce506064b2::
https://api.github.com/repos/JuliaLang/julia,35590,rf/fix-randomdevice-bool::master,1,merged,RNG::backport 1.0::embarrassing-bugfix::,"The tests might seem overkill for this particular bug, but I was writing them for #33721, so they will still be useful. An alternative fix might be to define `read(s::IO, ::Type{Bool}) = read(s, UInt8) % Bool` instead of `read(s, UInt8) != 0`. Both definitions coincide if `Bool`s are stored in ""canonical binary representation"", and the definition of `read` seems to leave the result unspecified for non-canonical `Bool`.",2093e8715cca22e6b41f19276db69d5c9d1999e5::
https://api.github.com/repos/JuliaLang/julia,35579,aa/string-fault::master,1,merged,backport 1.0::bugfix::strings::,"Currently the case where `r == 0` falls through the same logic as every other non-negative value of `r` (aside from 1). This works for signed integers. However, this does not work for unsigned integers: in the loop where we unsafely fill in the output string, we're looping from 0 to `r - 1`, which for unsigned integers wraps around and causes us to request the address of the output string at a location that is well beyond what was allocated. To get around this, we can just fast-path `r == 0` to return the empty string. Fixes #35578.",77ced8e2092067a47ee49d2d432aa6016e645b97::
https://api.github.com/repos/JuliaLang/julia,35545,vc/bstream::master,1,merged,bugfix::,"It is noted as a non-OS stream, but has also been a subtype of LibuvStream since forever. #32309 did not add the `readerror` field. It might be better to decouple `BufferStream` from the `LibuvStream` interface, but I decided to be conservative. Are changes in the type-hierarchy backportable?",2f9e5d605c553b5ad1c5ad4553d92a82b9169d7e::
https://api.github.com/repos/JuliaLang/julia,35435,rf/backport-35274::backports-release-1.4.1,1,merged,,cc @KristofferC,429457db94cf933c3c6fa1337449e03c15a2df40::
https://api.github.com/repos/JuliaLang/julia,35383,sf/version_unicode_data::master,1,merged,backport 1.0::,We've been downloading multiple different versions of `UnicodeData.txt` across different branches and trying to keep a consistent checksum.,e2a40cae34eee9bf8a661f6cdccf10510dfe04d2::
https://api.github.com/repos/JuliaLang/julia,35356,sf/fix_unicode_checksum::master,1,merged,backport 1.0::,"Upstream has apparently modified this file as of March 30th 2020, which is annoying as it has broken all older builds of Julia attempting to download and check this file.",81f9c74b30c0d61fc3b0cd22ec3351cef2b142cb::
https://api.github.com/repos/JuliaLang/julia,35300,vc/llvm8_pflege::master,1,merged,external dependencies::,in preparation for backport to 1.4 Corresponding Yggdrasil PR https://github.com/JuliaPackaging/Yggdrasil/pull/658,d20184f90e8ddacb40222154714bc6140eaaa4a3::
https://api.github.com/repos/JuliaLang/julia,35298,teh/collectto::master,1,merged,backport 1.0::,The final argument of `copyto!` is a count; subtracting 1 from the current index works only if indexing starts at 1. This also explicitly uses `LinearIndices` just as occurs in [upstream callers](https://github.com/JuliaLang/julia/blob/b637cb786a644979f6ad2752e11206d08c8ce683/base/array.jl#L686).,1da24809378ab7c849f59c09270769e24d15a7b4::7a63269c56d96736acefa3606cbe8bd397757a58::
https://api.github.com/repos/JuliaLang/julia,35244,rf/issubset-empty-range::master,1,merged,backport 1.0::bugfix::collections::,,162818412cec8fc17994c7b85f659b22d19635b4::
https://api.github.com/repos/JuliaLang/julia,35229,backports-release-1.4.1::release-1.4,1,merged,release::,"Backported PRs: - [x] #34760 - Add AddrSpacePtr type - [x] #34906 - Fix regression in inlining of invoke - [x] #34872 - Fix inverse of SVD of complex matrix (#34866) - [x] #34986 - Sockets: fix return value of getpeername/getsockname - [x] #34989 - Rebase of #28526 on master: Sparse cholesky solve with sparse RHS - [x] #35006 - walkdir: avoid symlink loops when `follow_symlinks == false` - [x] #35064 - Support git credential helper resetting - [x] #35136 - fix bug in t-function for `>:` - [x] #35144 - speed up llvmcall unique name generation - [x] #35184 - add compat annotation for map!(f, values(dict)) (from #31223) - [x] #35192 - Remove outdated paragraph from deepcopy docstring - [x] #35202 - fix #35201, syntax error with named splatting inside function call - [x] #35227 - Bump Documenter to 0.24.7 - [x] #35244 - fix #35225, issubset on empty ranges - [x] #35180 - Linux: Remove `--nodetach` option for `xsel` copy. - [x] #35310 - fix #35295, typo in change to `clipboard` on linux - [x] #35356 - Update `UnicodeData` checksum - [x] #35298 - Fix offset when widening collections - [x] #35315 - fix method errors printing for missing - [x] #35309 - fix #35305, need escaping when printing string macro calls - [x] #35239 - fix a bug preventing inlining of getindex of const globals - [x] #35300 - [LLVM8] add patches for D75072 and D65174 - [x] #35394 - fix #35391, macro hygiene bug in gc_preserve - [x] #35387 - [LateGCLowering] Fix skipped Select lifting - [x] #35435 - [backport #35274] fix #35272, searchsorted(3:-1:1, 2.5, rev=true) Need manual backport: - [ ] #34935 - [WIP] Bump SuiteSparse to 5.4.0+6 Non-merged PRs with backport label: - [ ] #35232 - LibGit2: add resolve_url to RemoteCallbacksStruct for LibGit2 0.99.0 `@ccall` is not  in 1.4.::Oops, let's drop that commit then. Good catch.::",de3914efb85f05f99985d8a2ff1cb262aa0e91a7::ec8f59cdd0b4beaf809ef53aef88c8b601d267a3::1d13caa424c150aa11f9698aee2301ec567acfe5::4e11ce967b677e54c72b2baa0977e29120c33a40::5cf6725eb19d4461b6141d269353e9af2b798d21::f1593e1db479e90033e2ce96e31cf2333ea85413::71fcb9a819fe6ac4c6c8453c8a7ed3d904b743d2::0e24a7f30c0af9ac0470c3a0d1b0d0c0911ec226::9dbe7e85f46dd98422b45785a9d1d5ab9b904edc::7ccda0e87fc63a799c9aff99f3b628f013a3e721::23e85274b64e337e2b150b0a2f86616d498049ec::e54a0deafc7308222af96b574ff186f39c557c10::8f1218adf230dfdd721a69ef6ad1d86f67368bea::c6673aea311581d09355e8e72525f8c1acb0a809::9131e12f1589b5fff6dcdae31303db8766e459dd::b4be5f2078a5bf27336d9a83ce46db6a5d9b3c39::7538e1581d509c94111331c5d177b82a61e45aea::1156956e32d834aeba0df1075afa53ae465f43a3::bc6fa8fc02dd0bdbbd1cfc751573a42d8c79d53e::f73a14c213f55208728d1a983498ca42bd77f290::625be9ec52eeb15ccf6c0aae56bc282fce09c722::bc6adcdad7cac9080afe223a6294876e4bfb8795::069f137eeeaaacdf591a5c575ca267b836f1e6e3::6c08ec4603e7cfe471f463da5bc14f25cb3c437c::d455bdab9145e96a8f8203a8c89582a6fb181606::61d70cb33ce206aae977389d649391a306ece3c4::48ee62c3a6ea74859061687528687feaf427e647::c53191a824c0804c9c9aa9dbcaec26ed8653c5db::8f46c770ab978e886652a2b21b754cf0a15aa5b4::7e5ee119054c3ff0b5624c9f9fb00a65ac3c5ea1::7f5adffb5a059dbf3c082b1b375ac6bb1f9f98b7::6d635d79677572ca81f074922b9c5d805eefcc7b::44fa722a2732f5fb99357c5ae613fa3b185555b6::7bd73b6b40fe610fbe8b365d8a6cceff11c0b922::
https://api.github.com/repos/JuliaLang/julia,35120,sf/release-1.4_llvm_bump::backports-release-1.4,1,merged,,"This rebuilds and upgrades the LLVM tarballs on 1.4, backporting some naming changes and such from 1.5, but functionally should be identical.",30187bb8addfcc528916d3601bd42d0ae78b211f::3c8a91e5727537c14fbb6d9b7d1cae378d0700e7::4f718ae46432e3745aeb3030202b10fc01b188b1::
https://api.github.com/repos/JuliaLang/julia,34986,jn/getpeername-failed-fail::master,1,merged,I/O::backport 1.0::,"I don't really know what triggers this, I just saw it happen on https://build.julialang.org/#/builders/69/builds/8634/steps/3/logs/stdio",43988a7a2d945d186a6b9d719b1817c8b3a710d9::
https://api.github.com/repos/JuliaLang/julia,34777,jps/processor-arm-musl::master,0,merged,arm::backport 1.5::build::musl::,"Can you change this name to `USE_DYN_GETAUXVAL`, so it's clear it's our variable and not affecting the headers? Otherwise, LGTM.::I'm just moving around the preprocessor statements, not adding new variables. I'm not actually sure what that variable does :smile:::It just defines later for us whether we've got the sys/auxv header, so that we can link against `getauxval` directly, or should try to get it dynamically.::Sorry about the delay! The change has been made :slightly_smiling_face: ::",529bdd14beca889a801cd18d77960d6747985f89::985a82e9909b6e1839911578c81277f7c0c2edc1::ac2ed9b8b26fc19af0609ff76735903a031becbb::
https://api.github.com/repos/JuliaLang/julia,34770,teh/oa92::master,1,merged,backport 1.0::,"**BACKPORTING NOTE**: consensus is to backport the first commit but not the second. The `reduced_indices` and `reduced_indices0` methods *sometimes* assert that the return axes type is the same as the input. Consequently, the implementation of `reduced_index` had better return a range of the same type as the input. This corrects the error in https://github.com/JuliaArrays/OffsetArrays.jl/issues/92. I'll put a workaround in OffsetArrays.jl too. The second commit consistently asserts type-equality in `reduced_indices`. This is a bit more aggressive, and if we backport it's possible we should backport the first but not the second. The potential problem is that it makes these methods more fragile in cases where `reduced_index` is broken. IMO, this is a good thing because it increases the odds that errors will be caught early. Moreover, it ensures that the return type is inferrable in cases where the reduction is over the first dimension but constant-propagation fails to detect this. However, for the LTS release this should be tested for trouble.Should we backport this without these assertions?  That is, I think this patch is good for master (and perhaps even back porting to 1.4) but I don't think we should _add_ assertions in a back port — especially not for a backport to 1.0.::",eda4131859229c7d9de4461e154a73bb89a6b783::55dab67dcd0c1034622e63227fa54961ff783905::
https://api.github.com/repos/JuliaLang/julia,34732,no-reverse-tuple::master,0,merged,,"In https://github.com/JuliaLang/julia/pull/34691#issuecomment-584912856, @JeffBezanson was pointing out that it is desirable to have good support for large tuples: > Large tuples do exist, and we'd like to support them better if possible. So it's really not obvious to me that `zip` should be eager for tuples. _If_ we follow this principle, I think it's ideal if none of the iterator transformation APIs from `Iterators` special-case `Tuple`s.  So I suggest to revert #33235 (making `Iterators.reverse(::Tuple)` eager) and solve the original problem differently.  I think it's a safe option anyway as it makes this part of the API identical to the latest released version (1.3). (Side note: `pairs` already supports `NamedTuple` and `Tuple` for some times so I guess it's not desirable to remove it.) Requesting a tag: `backport 1.4`",9f3605b806c0e1e6087740e962af86d19db3f975::
https://api.github.com/repos/JuliaLang/julia,34644,mh/backport-gc-extensions::release-1.0,0,closed,,"This PR backports PR #28368 and #32088 by @rbehrends to the `release-1.0` branch. The first PR contains extensions for the Julia GC to make used by the [OSCAR project](https://oscar.computeralgebra.de) (CC @wbhart @fieker) resp. the [GAP.jl](https://github.com/oscar-system/GAP.jl) package which integrates [GAP](https://www.gap-system.org) and Julia. We realize that this might be controversial, and fully expect a discussion about this, but we wanted to at least try to get this in, as it would be really nice if people could use OSCAR with the Julia LTS releases. I just discovered the rules for patch releases posted at https://discourse.julialang.org/t/proposed-release-process-and-schedule/15623, and those say that patch releases "" ... should only contain bug fixes, low-risk performance improvements, and documentation updates"". That does not fit with this PR (it adds an internal feature!), so perhaps that already is enough for you to reject it.... :-(. Anyway, I figured it can't hurt to at least try and ask... To this end, note that this PR here is a super quick backport, which has ZERO testing right now -- of course that ought to change, but I before I waste time on that, I wanted to find out whether there is any chance at all for this being merged. If there is, we'll go over it carefully and test extensively. Also, I'd be happy to squash this down into a single commit, or do anything else you may require for backports.",68fcb4a5efe13e1a010b30dced46b26eafb2a9f3::c3625069e6529b836363a094921e8a51bce14f1e::32ec0b18d83e03ff9709e0552d078c7fe1b2d2a2::63ea27c9c8856a9f9c50b4446394843edb7c4789::16cbb14cca4a69f77ee560e32e9f3dd4bcb343df::c0943e6603132ef2b9959a9ab69288e5f77ac404::3026736ff65e74a870e84b611997bc8b62d77594::d8dd6a0116cc6304c6aec6126bedbc1d825e03a5::8b2b3079b767c3899bcd4eeb6d0a1fecea259ae6::151dc7d7de48479d5fb98228fb66a98109c205b6::b3b418678c47f884268b20a969246346fe4400c2::436e3debbd965365a3441fb3fa7ddfb595800d83::4d1fed0c3fb629fad2678ce7e17bb19cebf42b77::c8914269a1b2b83603c273e676d961c12d91b635::f2d5db19a0b741fb432db692dfd27bf3cbcc2daa::10e28d69bead52fbe445ee2bcabf99898a26555b::
https://api.github.com/repos/JuliaLang/julia,34546,an/suitesparsethreads::master,1,merged,backport 1.0::bugfix::linear algebra::multithreading::sparse::,By storing an instance of the `cholmod_common` struct per thread. We might be able to utilize a similar approach to support `Int32` indices. Fixes #34500,65ca43c5308e7ab3bea0f78040e160151032f086::
https://api.github.com/repos/JuliaLang/julia,34461,backports-release-1.4::release-1.4,1,merged,,Backported PRs: - [x] #34336 - revert breaking change to GC.gc() - [x] #34401 - Clean-up the GC.gc interface. - [x] #34442 - base/libc.jl: fix crash when run before epoch - [x] #34389 - ASAN fixes - [x] #34397 - mark `inbounds` and `loopinfo` as quoted during lowering Non-merged PRs with backport label: - [ ] #34402 - Make testall target work with JULIA_BUILD_MODE=debug again. - [ ] #34391 - track-allocation: charge entry cost to caller,7ef63281c8d69b2ef45392acf4d70ef4ea10249f::8683bfc026ea011ed73f3849148baa139fd060f1::1596175f1e7d3db84aa31f2b5808628f0ca11e46::f39772adf321f896bc933054c938d51d8d27c392::fe8aeb83b34acff417b7192eb676a2e727f207e0::adb7c7ef2e213a7da869b4bdc513de301aa2c29a::
https://api.github.com/repos/JuliaLang/julia,34319,libgit2-cacert-january-2020::master,0,merged,backport 1.0::,"@staticfloat The [curl project](https://curl.haxx.se/docs/caextract.html) has updated the Mozilla CA certificate store earlier last week (01/01/2020). This update coincides with CA certificate list changes to [Mozilla NSS 3.48](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.48_release_notes). The following CA certificate was added: - Entrust Root Certification Authority - G4 Cert The curl project specifies that the CA certificate store file was changed on 11/27/2019 with 137 certificates from the previous 137 certificates in October 2019. A quick check using the `diff` tool (`diff -u cacert-2019-10-16.pem cacert-2019-11-27.pem`) generated the following output: ```diff --- cacert-2019-10-16.pem	2019-10-20 09:35:38.271642200 -0400 +++ cacert-2019-11-27.pem	2019-12-03 10:18:41.532003300 -0500 @@ -1,7 +1,7 @@ ## ## Bundle of CA Root Certificates ## -## Certificate data from Mozilla as of: Wed Oct 16 03:12:09 2019 GMT +## Certificate data from Mozilla as of: Wed Nov 27 04:12:10 2019 GMT ## ## This is a bundle of X.509 certificates of public Certificate Authorities ## (CA). These were automatically extracted from Mozilla's root certificates @@ -14,7 +14,7 @@ ## Just configure this file as the SSLCACertificateFile. ## ## Conversion done with mk-ca-bundle.pl version 1.27. -## SHA256: c979c6f35714a0fedb17d9e5ba37adecbbc91a8faf4186b4e23d6f9ca44fd6cb +## SHA256: 607309057d0ec70f8e4e97b03906bafb2fcebb24cd37b5e8293e681ae26ceae0 ## ``` The only lines that changed between CA certificate file revisions were comments.",6ee291290ca5fb82688a063aea0577b2210d5a9d::
https://api.github.com/repos/JuliaLang/julia,34257,vs/sprandn::master,1,merged,backport 1.0::doc::sparse::,Fix #31283,8a4edc42f0ecc407792f99b4fdb0faabae294c74::
https://api.github.com/repos/JuliaLang/julia,34146,cjf/macro-show-fix-backport::release-1.3,1,closed,bugfix::display and printing::,@KristofferC here's a backport of #34081 which was conflicted.,bdd918a591ece2b7816f96e84e9470a55be2168e::
https://api.github.com/repos/JuliaLang/julia,34106,teh/fix33977::master,1,merged,backport 1.0::,"Fixes #33977 I've tested that `÷2` is as fast as a shift locally, but let's see what nanosoldier says: @nanosoldier `runbenchmarks(ALL, vs="":master"")` 😱 ::Should I add a comment? :smiling_imp: It's actually pretty simple: `div` rounds down; if both are odd and have the same sign, you need to bump the result by one in the proper direction.::Statistics uses `a/2 + b/2` for this. Maybe better for avoiding overflow.::",fe7006d2cc0a95a5facc3cd4ce0013071b0c19a5::
https://api.github.com/repos/JuliaLang/julia,34012,vc/llvm8wasm::master,1,merged,,Still needed for LLVM 8.,9d35462b3ce8b3d0a7ab8e7ac5c750c9c242f11b::
https://api.github.com/repos/JuliaLang/julia,34011,backports-release-1.0::release-1.0,1,closed,DO NOT MERGE::needs nanosoldier run::needs pkgeval::,"Backported PRs: - [x] #30918 - add more explanation to doc strings for show, print, string, repr - [x] #31061 - Fix incorrect sign of atanh(complex(x,y)) if x == -1 - [x] #31670 - inference: fix fieldtype tfunc design - [x] #32100 - Error with `fixup-libgfortran.sh` when spaces in PATH - [x] #33080 - fix #33020, check axes for broadcasted assignment from tuples - [x] #33150 - Fix which behavior when passed an empty string - [x] #33228 - macOS codesigning: only attempt if `$MACOS_CODESIGN_IDENTITY` is set - [x] #32327 - bug fixes in matrix log - [x] #33106 - Update Mozilla CA certificate store to latest (08-28-2019) for libgit2 SSL. - [x] #33825 - remove gc-token from WeakKeyDict - [x] #33890 - Fix colon-reshaping of OffsetVector - [x] #33926 - BUGFIX avoid silent overflow in `lcm` least common multiple function - [x] #33966 - SuiteSparse files moved - [x] #34257 - Update sprandn in docs. - [x] #34986 - Sockets: fix return value of getpeername/getsockname - [x] #35356 - Update `UnicodeData` checksum Need manual backport: - [ ] #30700 - fix #30633, use `repr` to show arbitrary objects in error messages - [ ] #30929 - add undef to printing of empty arrays - [ ] #31405 - inference: fix typeof-tfunc impl - [ ] #31446 - Fix issue 31252 - remote globals not being updated in some cases - [ ] #31464 - Accept both Cvoid and Ptr{Void} return type in ccall(:memcpy) - [ ] #32088 - Prevent the GC task callback from segfaulting. - [ ] #32062 - Ensure Main.eval and Main.include exist in embedded julia - [ ] #32108 - BunchKauffman: correct permutation for rook pivoting (fixes #32080) - [ ] #32161 - Fix unsigned wrap around in lpad/rpad/string allocation - [ ] #31064 - Fix accidental recursion in jl_concrete_subtype - [ ] #32326 - fix #32325, struct plus outer ctor inside `let` - [ ] #32321 - codegen,gc-lowering: post fixup tbaa information - [ ] #32476 - fix #32467, parsing macro on `for` inside `do` inside call - [ ] #30952 - Fix #30944, ranges with non-IEEEFloat types - [ ] #32830 - Fix type of Upsilon nodes during SSA construction - [ ] #32979 - Fix AbstractQ conversion to different-typed matrix - [ ] #33284 - malloc wrappers: ensure thread-safe - [ ] #33283 - Array fixes for non-power-of-2 sized elements - [ ] #33713 - fix #33675, unpredictable `summarysize` on isbitsunion arrays - [ ] #33706 - codegen: avoid bad tbaa paths - [ ] #33889 - Use `cache.julialang.org` to download `busybox.exe` at test time - [ ] #34005 - fix #33974, wrong integer types used in `jl_array_sizehint` - [ ] #34106 - Use safer computation of midpoint in sorting (fixes #33977) - [ ] #34319 - Update Mozilla CA certificate store to latest (01-01-2020) for libgit2 SSL. - [ ] #34546 - Make SuiteSparse wrapper thread safe. - [ ] #35244 - fix #35225, issubset on empty ranges - [ ] #35383 - Version `UnicodeData.txt` filename Contains multiple commits, manual intervention needed: - [ ] #29721 - fixes for the runtime (interpreted intrinsics) - [ ] #31585 - codegen: fix bug with String egal test - [ ] #32826 - fix #32550: issetequal with duplicate values - [ ] #32895 - bugfixes in Libc.rand for Windows - [ ] #33617 - Update Mozilla CA certificate store to latest (10-16-2019) for libgit2 SSL. - [ ] #33745 - Force `patchelf` to use 64KB page size on aarch64/powerpc64le - [ ] #33809 - Fix findfirst with decreasing step range - [ ] #33942 - Fix a small number of invalid unsafe code [round 2] - [ ] #34770 - Convert range type in `reduced_index` - [ ] #35298 - Fix offset when widening collections Non-merged PRs with backport label: - [ ] #30973 - Workaround #28126, support SIMDing broadcast in more cases - [ ] #30431 - Build: fix output directory when specified with O= - [ ] #30357 - workaround for F_DUPFD_CLOEXEC on Linux kernel <2.6.24 before it existed",e8ae5f7b11e2ac1e18892b375024ac8ce762454d::a38cbc8b300cbd5d650703f796cfef9d2df619b4::f7279ba20f6b94c63dd2e5a72f8b31c6ae70fce1::db0bc605cb5f41f2cb408c13bf0f6ae9395d0dd8::ea009f6208c7eeb200071930c2b465721cc4093d::0c4a2482d71bb69bd0120eff2e52a3a2c6a0bfe0::90c626d7216eae2be1ea4ec0b881b2139f68123d::3b334e1aeaca9ea7c818ba98e06e2e29c954c6b1::7c806f443cbf182c6e7127b678e0eedaffa157a2::3afabc0bf22c2d32762848853d4d4011d56eb275::e19e36d92602f6ba5b54d2318550ef4cc583239a::9aa2307ae6f8bfa44d0c9c82030186c2c44c9166::3457d4ca30999311b9a07c3af5d1adaca917ddd3::2c574886650353fd1ea8da95f62ba49816356548::962ae27199ae7f22a3710c0afd31f993d1fbdb5f::
https://api.github.com/repos/JuliaLang/julia,34005,jb/fix33974::master,1,merged,arrays::backport 1.0::bugfix::,fix #33974 I used `@test_skip` here since they use a lot of memory. But if it's ok to allocate several GB I can enable them.,b1cd75a20de8e1b7b16238188a633bd68c5738e8::
https://api.github.com/repos/JuliaLang/julia,33979,backports-release-1.3::release-1.3,1,merged,release::,"Backported PRs: - [x] #33889 - Use `cache.julialang.org` to download `busybox.exe` at test time - [x] #33706 - codegen: avoid bad tbaa paths - [x] #33848 - fix #33841, regression in let-bound function with kwargs - [x] #33942 - Fix a small number of invalid unsafe code [round 2] - [x] #33745 - Force `patchelf` to use 64KB page size on aarch64/powerpc64le - [x] #33617 - Update Mozilla CA certificate store to latest (10-16-2019) for libgit2 SSL. - [x] #33992 - fix #33987, some varargs not recognized in kwarg lowering - [x] #34005 - fix #33974, wrong integer types used in `jl_array_sizehint` - [x] #33890 - Fix colon-reshaping of OffsetVector - [x] #33848 - fix #33841, regression in let-bound function with kwargs - [x] #34062 - ccall: report static compile-time load issues correctly - [x] #33926 - BUGFIX avoid silent overflow in `lcm` least common multiple function - [x] #33983 - Fix #32980 - [x] #34096 - tweak test for calling unknown libraries in --output-o mode - [x] #34065 - add another tuple subtyping fast path Need manual backport: - [ ] #34081 - fix #34080, regression in printing qualified macro calls Contains multiple commits, manual intervention needed: - [ ] #33617 - Update Mozilla CA certificate store to latest (10-16-2019) for libgit2 SSL. Non-merged PRs with backport label: - [ ] #33785 - Use UUID's to generate random tempname on Windows",1ab02c649232230b9f1fb04e8210873572d75069::a706c27d68f9dde7ea51bd5fb67a55c90da0cf1d::51591e48065c2c82b9713e5b7cb1b308fbebdc49::efae1fb4714a97c434b0325c424a0dd018ee4d5f::bbec89acbfb51fb69b77b5a0bff4de18dca20e7f::f0668b69d62f4fe4f9f3cb2320ee38790f3b9bc3::4a0f790980d15235d2679497067a353ca271c3d7::6bb9d279fbb7742c5043b3bbb9df8aa90f42c382::3bb7ce4b3bc70f6a50925c67cefb6b2e8a3dadb7::dac742d8bd08f08cf23b8b5b3123b5e85e8a700f::955417f37843f39337928cc223bb12ad0f3bcb77::aee26cf525c9f301e1a8ee7c9cdf31a93b6d686e::78615011ec61ec0043c34afadaec5cd4862424b9::cf96e137ac70f6470151566f29f39c976d827ea9::404aaa1354cdd21068106ecacbbd0f1d595b07e5::be009f1b7c0e4f69cdc5e31ee4f8a1049c0cc381::480d867a4abf53e6b02786c3ce7381de9f167401::5e0653407f34b5a5e71b27d0259ab2a9c3b2057f::
https://api.github.com/repos/JuliaLang/julia,33966,patch-22::master,0,merged,backport 1.0::sparse::,[skip ci],87c7fac55672be961d59ad249893a3496f1ebc09::df53ccffcbc33d81710f4ce496ddbb3c585eb568::
https://api.github.com/repos/JuliaLang/julia,33953,nl/_str_sizehint::master,1,merged,,"CategoricalArrays will stop overloading this soon and this kind of hack is only appropriate for a backport anyway. @Keno At https://github.com/JuliaLang/julia/pull/33757/files#r341886873 you mentioned there was some duplication, but I don't where. Was the PR changed after that comment?",954435f346f628ae4d7c8c354a3bd3adc0c014ee::
https://api.github.com/repos/JuliaLang/julia,33942,jn/33899::master,1,merged,I/O::backport 1.0::bugfix::embarrassing-bugfix::,"I'm not quite sure why these weren't caught in the original PR, but basically all the same as those. fixes #33899",e1086fec3e1ec7b1e168143fd89d2723633e8ce8::60ec5f3700253f942ff9178e36828fe01ca9cf20::
https://api.github.com/repos/JuliaLang/julia,33926,krc/lcmcheckedwide::master,0,merged,backport 1.0::,"Solves #33911 . Define new functions `checked_lcm` and `widelcm` analogously to `checked_mul` and `widemul`. The behaviour of `lcm` is not changed, and the user can switch to the appropriate variant at his own discretion. I think you can revert the changes to this file now.::done::",17f2b42119961b1e0ee7cf101b19e9ec6a29a87f::faf72c42428588062deef7555bb28897cd9b4f54::bc9b7952cbbbc8d0623c28fece36885234d77bf7::b79a24cdc867551cf3bacdfafbcdc59d5b033aa6::bf179ae40bfe5ddf522fd110e824c41e0b14b5c0::c7ba83a4de7d406de18739317ba4534a06af914e::ade34f64c6093fc68510c5218a14f194b8a4f840::
https://api.github.com/repos/JuliaLang/julia,33890,teh/fix33614::master,1,merged,backport 1.0::bugfix::,Fixes #33614,a21f096214ea2300d96677b3985afe03b6376854::43b3395e9861aea8e57fd96ee400153335f38f6e::
https://api.github.com/repos/JuliaLang/julia,33889,sf/busybox_cached::master,1,merged,backport 1.0::,"This should hopefully fix the issues we've been having with downloading `busybox.exe` on the windows buildbots recently; I believe those IP addresses may have been blacklisted, as we successfully connect to the `frippery.org` server, but get an `HTTP 403` on 3/4 of the windows buildbots.  By using our own caching server we are better netizens both by not hitting someone else's server a bunch, but also by keeping our CI traffic datacenter-local!",9235f4500fd4c5780f09a2197315ac7c8fa98ad2::
https://api.github.com/repos/JuliaLang/julia,33825,jn/hps/wkdfix::master,1,merged,backport 1.0::bugfix::,"This was a hold-over from the old iteration protocol, which needed to maintain state between `done` and `next`. The `iteration` function of `Dict` has since been re-written to be safe for concurrent deletions. Replaces: #33756 Co-Authored-By: @swissr",ff0876db7eeb554e3bada8a1e2a5861db00ba0b7::
https://api.github.com/repos/JuliaLang/julia,33809,fix_33808::master,0,merged,backport 1.0::,"Fixes #33808 `findfirst` assumed increasing step size for `StepRange`.maybe add a test where the range is empty, now that this is specifically addressed in the code?::",bd26f670dda4aff690e2fd6d178316cf2dd0de30::1d54c123b4d0c692f4dc56d3b487a96757ab68a6::
https://api.github.com/repos/JuliaLang/julia,33795,jb/fix33789::master,1,closed,types and dispatch::,"This is an unfortunate case where methods are ambiguous, but intersection is not precise enough to determine exactly why. In such a case it's arguably nicer to just pick a method than to give a frustrating error telling you to define a method that already exists. I suppose another option is to detect that when printing the error, and issue an apology instead of a useless suggestion :) This is a possible fix; will need review from @vtjnash. We do have the option of doing nothing here though, since this seems to be a real ambiguity. fix #33789. Should be backported to 1.3 if deemed OK.",6b3e372d964a8858f4fe1dbd7510ebb5ac4650e1::
https://api.github.com/repos/JuliaLang/julia,33776,nhdaly-interpreter-typedef-lock::master,0,closed,,"As far as I can tell, this doesn't much affect parallel performance, and prevents this exception from triggering if you attempt to define new functions from multiple threads: ``` ERROR: TaskFailedException: cannot eval a new struct type definition while defining another type ``` I'm opening this as a draft PR to provide an easier short-term fix for #33183, one that can be easily backported to `v1.3` (as an alternative to https://github.com/JuliaLang/julia/pull/33553) EDIT: Oops, dammit, I used the wrong github account again... >.<",40304b5ab61d4c6ff1bf812bf84ada83dbf0b548::3c3e60040b2b2c258b915f2325bd26402cff7e77::0830f8a2bf3d4222baca1bda3582f77b24e5630d::
https://api.github.com/repos/JuliaLang/julia,33745,sf/patchelf_alignment::master,1,merged,arm::backport 1.0::build::power::,"This fixes problems with binaries on these two platforms that often use these large page sizes. This probably needs some tweaking, we'll see what CI says.  This isn't going to fix everything, we need to [pass the same flags within BinaryBuilder](https://github.com/JuliaPackaging/BinaryBuilder.jl/commit/cce4f8fdbb16425d245ab87a50f60d1a16d04948), then rebuild the world so that Julia can work on AArch64.",5ceed9216e7ad9d101579338f7841474f3bb9e41::ffb3ed0e746b82b9aa62654680646ae5c6506829::
https://api.github.com/repos/JuliaLang/julia,33713,jb/fix33675::master,1,merged,backport 1.0::bugfix::,fix #33675,62ac172f2bcfc2c43218c3839016960b36a27a94::
https://api.github.com/repos/JuliaLang/julia,33706,jn/33590::master,1,merged,backport 1.0::bugfix::codegen::,This avoids cases where getMostGenericTBAA could return broken answers. fix #33590,39aec3b113dfbaa66eabe7fc6442607d2022945d::
https://api.github.com/repos/JuliaLang/julia,33630,backports-release-1.3::release-1.3,1,merged,release::,"Backported PRs: - [x] #33106 - Update Mozilla CA certificate store to latest (08-28-2019) for libgit2 SSL. - [x] #33592 - Install `7z.dll` to `libexec` instead of `bin`. - [x] #33283 - Array fixes for non-power-of-2 sized elements - [x] #33524 -  fix #32678, error due to Ptr constant in `_reformat_bt` - [x] #33713 - fix #33675, unpredictable `summarysize` on isbitsunion arrays - [x] #33746 - Distributed: fix warning generated by test - [x] #33757 - help load time regression in #33615 - [x] #33764 - use `===` for comparison to `nothing` and Symbols - [x] #33779 - more latency improvements for #33615 - [x] #33825 - remove gc-token from WeakKeyDict - [x] #33809 - Fix findfirst with decreasing step range - [x] #33777 - Add LIBEXECDIR relative folder constant Need manual backport: - [ ] #33706 - codegen: avoid bad tbaa paths Contains multiple commits, manual intervention needed: - [ ] #33617 - Update Mozilla CA certificate store to latest (10-16-2019) for libgit2 SSL. - [ ] #33532 - Error overhaul - [ ] #33745 - Force `patchelf` to use 64KB page size on aarch64/powerpc64le - [ ] #33848 - fix #33841, regression in let-bound function with kwargs Non-merged PRs with backport label: - [ ] #33839 - fix #33338, race condition in triggering method compilation - [ ] #33741 - RFC: for the release, change tempfile cleanup default back to false",60f87111c47e14907d1bff07982e12a1942ae248::6b1e7be587d37f5d43290f8efece295d4b03c194::3d9ea36f4f0d2bbbdbe985742a692089c7aec84f::d222939181d9ac0b61acaac5eff7b8f02370c33d::82ac5286faeecb77829c4d7f0c678140aafda421::27b28da6dcbe821de58c39f2f8e33fecc4c59897::c7f5ae3e688b2fe44ebdb36b063b81d1a0599ea7::aabaa122afa4c7ee4dc645039485e9c08b541b4f::58a8c4ae006303f03a352cc4aabcf0f43253a587::3d45ff890787dd426424de8bdf3a09ec78e03bbd::cdbd38c0ec61db2a29a383f9dd5e8cac670241a2::78b7402605e7cb14858b70c66463e20a792bd8a4::040a7b1a32f6801bcac8efa400c35fbaefce9fa3::32d94a1a0aab14b534c24719e8ab77a7011ed305::70b6f08817486349913f89bd725a31616ba49781::
https://api.github.com/repos/JuliaLang/julia,33617,libgit2-cacert-october-2019::master,0,merged,backport 1.0::priority::security::,"@staticfloat The [curl project](https://curl.haxx.se/docs/caextract.html) has updated the Mozilla CA certificate store earlier last week (10/16/2019). This update coincides with CA certificate list changes to [Mozilla NSS 3.46](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.46_release_notes). 2 CA certificates were removed: - Certplus Class 2 Primary CA - Deutsche Telekom Root CA 2 Although my pull request (#33106) from August was approved, the commits within that pull request were not merged upstream. So I decided to merge the commits from the previous pull request into this pull request to prevent merge conflicts in the event both pull requests are merged upstream.",d0298c7238b776d401fa0ca6ff84f9b0ea35f4a7::1ec7022946658177507f0db5a29b3b39297f406c::58651bb99f9f94c11186f4faff16f05d2cee3c2e::
https://api.github.com/repos/JuliaLang/julia,33431,aa/fix-fbsd-7z::master,1,merged,bugfix::build::freebsd::,Adds a patch from the FreeBSD Ports Collection to fix #33430. I've applied the patch conditional on FreeBSD but it seems like it could be fine to apply to the others. Marking for backport to 1.3 since the change that broke this was also marked for 1.3.,35a0c0d86b9ad8064126c883e0dc7a55e5257b57::
https://api.github.com/repos/JuliaLang/julia,33284,jn/jlmalloc-threads::master,1,merged,backport 1.0::bugfix::multithreading::,"Better align the API of the jl_ wrappers for malloc/realloc/free with the libc namesakes, including being safe to use on threads. fix #33223",5e038cdd7bdb78e9815f30651028d1084601e0f7::
https://api.github.com/repos/JuliaLang/julia,33283,jb/nonpow2elt::master,1,merged,arrays::backport 1.0::bugfix::,"Before: ``` julia> primitive type TypeWith24Bits 24 end julia> x = Core.Intrinsics.trunc_int(TypeWith24Bits, 0x112233); a = [x,x]; julia> Core.arrayset(true, a, x, 2) 2-element Array{TypeWith24Bits,1}: TypeWith24Bits(0x112233) TypeWith24Bits(0x111122) ``` After: works. Fixes https://github.com/JuliaComputing/JuliaDB.jl/issues/287#issuecomment-507281028`a[2] = x`, or are you intentionally trying to avoid this being compiled (could use a comment)? Can you add a test for `a = [(x, x), (x, x)]` also? Might be good to use something other than `x` here also, so that the mutation here is observable.::OK. Yes, I was trying to avoid the compiled form since I believe it does the right thing.::",6c13b63f8822ca0a97d231272d26302271478aa5::
https://api.github.com/repos/JuliaLang/julia,33228,sf/parameterized_codesigning::master,1,merged,backport 1.0::build::mac::,This has the following advantages: * It allows our buildbots to pass in which code signing identity they want to use (rather than having the identity hash hardcoded in our build system) * It stops blindly attempting to codesign on random user's machines * It causes codesign failure to stop the build,1ddcd231297396e1f7826c9f944bc152fc2a07cc::
https://api.github.com/repos/JuliaLang/julia,33216,npr/doc-print-nothing-allowed::master,0,merged,doc::,- tiny docs update following https://github.com/JuliaLang/julia/pull/32148 - `nothing` can be printed in v1.3 -- can this be backported? :),d4292e155ebfde2912a09b8d1044bcdc7407b790::
https://api.github.com/repos/JuliaLang/julia,33150,fix-which::master,0,merged,backport 1.0::,"Currently when passed an argument that is the empty string Sys.which() returns the path of a directory. For example: ``` julia> Sys.which("""") ""/usr/local/sbin"" ``` This is not correct since the empty string is not a valid path component on any OS of which I am aware. This PR fixes this issue so that Sys.which("""") returns nothing in accord with its documentation.Let's nip things like `"" ""` in the bud as well; do `isempty(strip(program_name))`::Let's test `isnothing(Base.Sys.which("" ""))` as well::So it turns out that this already works with the current code (at least on Linux). The reason is that ```isexecutable(""/usr/bin/ "") == false``` while ```isexecutable(""/usr/bin/"") == true```. It makes sense to add the test though.::In that case, I think it makes more sense to change `isexecutable()` to `isfile() && isexecutable()`.  What do you think?::Yes, I agree that makes sense. I think we might as well keep the early exit for an empty string though.  There's no point in searching a bunch of directories for something they can't possibly contain. ::While """" isn't a valid file name, "" "" is perfectly legal (if a bit insane) as an executable name.::Yep, though I think it's OK to include a test for that because the odds of there being such a file on a test system is very low. There are currently no other tests for Sys.which and in general it's a bit complicated to write them because it would require controlling environment variables as well as the filesystem.  However testing that Sys.which("" "") == nothing is easy and almost certain to be right.::FWIW, it's not so hard to make bulletproof tests for this: ``` mktempdir() do temp_dir my_bin = joinpath(temp_dir, ""my_bin"") touch(my_bin) chmod(my_bin, 0o755) withenv(""PATH"" => temp_dir) do @test abspath(Sys.which(""my_bin"")) == abspath(my_bin) @test Sys.which("" "") == nothing @test Sys.which("""") == nothing end end ``` Something like that should work, modulo `chmod()` issues on Windows.  (E.g. don't try to do test creating non-executable files on windows.... everything is executable on windows from Julia's perspective ;) )::We already have tests for that (in test/spawn.jl), we just need tests for the new code (empty string case).::Great.  Good to merge from my perspective then.::@vtjnash I'm not clear on why the tests are there.  I thought the convention was that functions in base/foo.jl were tested in test/foo.jl. But since that's where the other which tests are I should probably move the new ones into test/spawn.jl which will also allow using the existing testing framework to ensure that the blank filename test is correct.::I'm a bit late to the party, but should we also test that when there actually is an executable named ` ` in the path we can find it?::There are existing tests for that.  I just added a test for a blank string and made sure that the tests that should return nothing are independent of what's on the filesystem.::",b47d0b0b6894eb3bea31dff8b31254a0f4123a16::76bf01f6565dbf24ee12d43874199a1872022cad::2c8ba62c0b89e817bc73afe58da9efec0ea52029::31e7d7aab3fc3f6afbf5ad77834f1b0c4b6158b3::0198ad917e7d8612cd5ae3356fb9115febfe2eac::a264f017549ae1214656415498fd92b2f4b3061f::
https://api.github.com/repos/JuliaLang/julia,33106,libgit2-cacert-august-2019::master,0,merged,backport 1.0::priority::,@staticfloat The [curl project](https://curl.haxx.se/docs/caextract.html) has updated the Mozilla CA certificate store earlier today (08/28/2019). This update coincides with CA certificate list changes to [Mozilla NSS 3.45](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.45_release_notes). 1 CA certificate was removed: - Certinomis - Root CA,6797cb37963939b727797a8e5e216caa7a088374::
https://api.github.com/repos/JuliaLang/julia,33096,sf/new_gmp_mpfr::master,1,merged,,"This incorporates GMP and MPFR, built using the new BB, that should have better performance attributes (GCC no longer defaulting to ancient processor variants), getting us back our bigfloat performance. Closes #31759 Eligible for backporting wherever we think it might be helpful (1.3 for sure, 1.2 possibly?) On my linux64 machine, comparing three builds of julia: * `julia-release-1.2`: builds GMP/MPFR from-source to dodge this issue * `julia-master`: triggers the slowdown * `./julia`: contains this fix ``` $ cat test.jl using BenchmarkTools a = 5.0 b = big""5.0"" @btime $a + $b $ for JULIA in julia-release-1.2 julia-master ./julia; do echo $JULIA; $JULIA test.jl; done julia-release-1.2 103.815 ns (2 allocations: 112 bytes) julia-master 190.769 ns (2 allocations: 112 bytes) ./julia 107.202 ns (2 allocations: 112 bytes) ```",c2d13724b016cb1091dcef21ff84a3055c63f155::
https://api.github.com/repos/JuliaLang/julia,33080,mb/33020::master,1,merged,backport 1.0::broadcast::,"We avoid computing axes for tuples -- which is a valuable optimization -- but when we explicitly construct a tuple broadcast with axes pre-set (for, e.g., broadcasted assignment), we need to check that those axes are compatible with the ones inside the broadcasted expression before accepting them. This should cleanly backport into all releases (I only checked against 1.0 and master, but if those two work, then I'd imagine 1.2 and 1.3 to work as well).",502e1c058a48633b45ce662870ee0ab8ab3b83c0::6a9621a2285050765707141a04c5881de54fef3d::
https://api.github.com/repos/JuliaLang/julia,33075,backports-release-1.0::release-1.0,1,merged,release::,"Backported PRs: - [x] #28819 - avoid file ownership requirement in touch - [x] #30059 - Fix Makefile not removing  debug julia lib on windows - [x] #29916 - Add Float16 comparisons - [x] #29331 - stdlib/SparseArrays: fix scalar setindex! for vector eltype - [x] #30066 - proper diagonal in copytri! (fix #30055) - [x] #30989 - fix #14574, `cp` on files >2GB - [x] #31099 - avoid assertion due to overflow if Num is negative - [x] #31871 - Recover meta nodes in replace_code_newstyle - [x] #31933 - Unconditionally append lib/julia to rpath, fixes #31903. - [x] #31946 - Fix for optind in getopt on musl libc. - [x] #32033 - Update Mozilla CA certificate store to latest (05-15-2019) for libgit2 SSL. - [x] #32040 - fix `isa` fast path for typevars with lower bounds - [x] #31484 - Show correct Dates.format documentation - [x] #32097 - Amend matrix * vector specialization for strided arrays - [x] #32124 - Add a test for PR 32097 - [x] #32144 - Fully qualify at-everywhere, fixes #28966. - [x] #32219 - fix LibGit2 test: unknown repo now returns error instead of EAUTH - [x] #32162 - relax some Diagonal tests from #31443 - [x] #32255 - readdlm(bytearray) shouldn't modify bytearray - [x] #31499 - fixes for getindex tab-completion - [x] #32104 - bugfix for ldiv!(D::Diagonal, B::StridedVecOrMat) and tests - [x] #32351 - Fix tryparse for invalid Chars - [x] #32383 - Add missing test dependency on Random to Statistics - [x] #32375 -  Fix -Symmetric for Bool or JuMP.VariableRef - [x] #32356 - codegen,tbaa: fix array isassigned tbaa information - [x] #32431 - Fix Distributed.head_and_tail - [x] #32457 - bug fixed in read_to_buffer - [x] #32605 - Fix #32579 - Issue in typeconstraint accumulation - [x] #32271 - [Statistics] fix type determination in corm - [x] #32593 - fix generic ldiv! for CholeskyPivoted - [x] #32694 - Implement isdiag(::Bidiagonal), add tests - [x] #32756 - fix test for sparse matrix assignment - [x] #30972 - another improvement to closure analysis precision - [x] #32139 - fix #32121, macro hygiene bug in named tuples - [x] #32268 - Allow both EAUTH and ERROR for bad URL test in LibGit2 tests. Need manual backport: - [ ] #30700 - fix #30633, use `repr` to show arbitrary objects in error messages - [ ] #31446 - Fix issue 31252 - remote globals not being updated in some cases - [ ] #31464 - Accept both Cvoid and Ptr{Void} return type in ccall(:memcpy) - [ ] #32088 - Prevent the GC task callback from segfaulting. - [ ] #32062 - Ensure Main.eval and Main.include exist in embedded julia - [ ] #32108 - BunchKauffman: correct permutation for rook pivoting (fixes #32080) - [ ] #32161 - Fix unsigned wrap around in lpad/rpad/string allocation - [ ] #31064 - Fix accidental recursion in jl_concrete_subtype - [ ] #32326 - fix #32325, struct plus outer ctor inside `let` - [ ] #32321 - codegen,gc-lowering: post fixup tbaa information - [ ] #32476 - fix #32467, parsing macro on `for` inside `do` inside call - [ ] #32830 - Fix type of Upsilon nodes during SSA construction - [ ] #32979 - Fix AbstractQ conversion to different-typed matrix Contains multiple commits, manual intervention needed: - [ ] #31585 - codegen: fix bug with String egal test - [ ] #31670 - inference: fix fieldtype tfunc design - [ ] #32826 - fix #32550: issetequal with duplicate values Non-merged PRs with backport label: - [ ] #32895 - bugfixes in Libc.rand for Windows - [ ] #32327 - bug fixes in matrix log - [ ] #30431 - Build: fix output directory when specified with O= - [ ] #30357 - workaround for F_DUPFD_CLOEXEC on Linux kernel <2.6.24 before it existed",1788b075ee1bbac5357ace3d290e87ebf559f4eb::da925f3f734c34ddd5d4b1f715792e75d5a7ad8d::21dc4aab66878a41e9e77f28aaa30f9ce77da2eb::2df447cb65181a3546d39131d6c52ab6f3bee735::5e6e52eed06229dd51eefca55cde37ecb92bc990::636fe965ac95a71648e8dd03f2799df88749f480::04ff9e5620eb1747fa8bd2da7a83cd4db2580f8e::6b4cb65ed14dc5bb2c4e1ab505e67071905e2846::0a06275e1bfab05a8dcba4659fcb64cd4e05349b::dbbf35c93584eb9cdd47bb352aa2fb5ee3657d75::c1cfdcb6e3306f0b86afff636c235cc57a645af0::06a7801841b3eaef9578b3e20d2be741173be185::e6b07035a1f0907b1c398d30ffc23000ebe5c87c::3510c41dd954dbf01e1b93599cc17affdf40e04e::0b76f21c49ff7a9367737ba5132b94c6ee955a2f::9faf3cfb4351c425ad5fc0e0148d364d7cc0903e::97d6c9db8be4ef12627c8323878e28ae54aa7cf9::297bb6845617c0a01d3597c6342a98c5a23564b7::60b1fea46a2900ae2ad589165ca88a789da008b2::c6d0356dca34504ca4c41b51f5fb6dbcb2eb9993::5497aec51439ec4c7db515ef2648a8cf624a875a::ee96a1c7564b190bc91fe144e0643ca98f5b41b3::95f4f69de2aac48da45feb8cc2fabbb13578582c::31227f9a4ca8ed54905d51a7c5260f37e4c6bed9::d99e79ff90003aea25a75c9e81a6db4b10d53e6c::100505183323ec5bafc3682a9f6b76a3fcaaedfc::be954d4dc5fb5ce1fe6e38854dfc885b3ee8e590::4dc49d86f748c2a19aa3b3745906fe6572bd4d8e::36ba4f3decbc54cb2f165ae71f6cbab871fc81fc::375fc8bc718827ef5b5c4b4667a19bc104a655f4::736f10a7c4c0093b84a03e9e8af685c346d07034::4b759a1a3c0d1aee078f710786f12e8c4faa9934::7ea72226d605554d4d5590ec32b745dd1fff5ed2::f056e29b99935cc8fbec2271c02d03e27d13c08f::5c8d8f6321bc283684009ad56f624c2ff7b0c51e::944f84c9636370fba593d918864998ff0b4b1c4f::b717256107e8920305916810f0bc949904053f5b::
https://api.github.com/repos/JuliaLang/julia,33073,backports-release-1.2::release-1.2,1,closed,DO NOT MERGE::needs nanosoldier run::needs pkgeval::release::,"Backported PRs: - [x] #32823 - Upgrade `doc/make.jl` to introspect branch/tag names from git info - [x] #32979 - Fix AbstractQ conversion to different-typed matrix - [x] #32993 - docs: prepend v to tag string - [x] #33006 - improve precompilation coverage - [x] #32830 - Fix type of Upsilon nodes during SSA construction - [x] #32826 - fix #32550: issetequal with duplicate values Non-merged PRs with backport label: - [ ] #33031 - fix #32903, regression in Ctrl-C after adding io locks - [ ] #32895 - bugfixes in Libc.rand for Windows - [ ] #32327 - bug fixes in matrix log",035e224d54cc31a075fa316055dd37bafaf42184::fd574c1bab4dae3489b0ab2d2faab94100e5d7d3::92a21ef0d4b56f470cb2370e7e9e0383a5eaafc5::664c009bf21630ab05ffc29e7434c1c4cee9353a::f5ddfb177f2486d822ef4ac7a595f337ee6aa480::2c0ba60cb72af458bc27569036869545f25aa079::db69a762b32c8bc1775b7f52f5ae46b7c3fdd416::03c9c729614d1caf4b9cceeac6452aca99a766b6::
https://api.github.com/repos/JuliaLang/julia,33006,kc/moar_precompile::master,1,merged,latency::precompile::,"- move the place where `--trace-compile` outputs precompile statement to a location that catches more cases (it now sits next to where SnoopCompile outputs statements) - tweak the REPL code to be more amenable to precompilation in light of #28808 - instead of trying to encode all the rules where the precompile emitter fails (#28808) just try to precompile and do nothing if it fails. With this, startup time is back to normal and the time to prompt (measured with the patch in https://github.com/JuliaLang/julia/issues/32971#issue-482685346) is significantly improved, although not yet completely back to 1.1 levels: ### 1.1 ``` Generating precompile statements... 1082 generated in 179.581295 seconds (overhead 141.594243 seconds) ./julia -e ''  0.14s user 0.09s system 107% cpu 0.211 total ./julia  0.42s user 0.16s system 191% cpu 0.302 total ``` ### 1.2 ``` Generating precompile statements... 863 generated in 130.453900 seconds (overhead 100.843763 seconds) ./julia -e ''  0.18s user 0.09s system 124% cpu 0.222 total ./julia  1.09s user 0.19s system 138% cpu 0.929 total ``` ### PR ``` Generating precompile statements... 4087 generated in 130.619177 seconds (overhead  98.529712 seconds) ./julia -e ''  0.13s user 0.08s system 105% cpu 0.208 total ./julia  0.60s user 0.18s system 186% cpu 0.419 total ``` Probably good enough to say that it fixes #32971 after being backportedCould be left in at `@debug` level?::`@nospecialize`? Just asserting that it's an `Any` doesn't prevent the compiler from trying to specialize it. Same for the one below.::I think this takes care of that: https://github.com/JuliaLang/julia/blob/5e75cfe24ac65400b8faa2972c0ac8f8b1faa9dd/stdlib/REPL/src/REPL.jl#L50::",91288f2948aa119d7e938ed23fb0f7ba9f30f2de::
https://api.github.com/repos/JuliaLang/julia,32993,patch-2::master,0,merged,,To make sure that `TRAVIS_TAG` is e.g. `v1.3.0` and not just `1.3.0`. It would be good to backport this to 1.3 too. cc @staticfloat,630b43c3f1d4a3e5fa9021849d90f76b623d7fa9::
https://api.github.com/repos/JuliaLang/julia,32979,qr_matrix_conversion::master,0,merged,backport 1.0::linear algebra::,"In current julia master ```julia T = Float32 Matrix{T}(qr(randn(real(T), 3, 3)).Q) ``` succeeds, but an `AbstractQ` to `Matrix` conversion also changing type, e.g. ```julia T = ComplexF32 Matrix{T}(qr(randn(real(T), 3, 3)).Q) ``` fails. This PR adds an extra explicit conversion of the matrix type to avoid this problem.",fac82f37259194b656b0e185c5f664f05c6f6651::
https://api.github.com/repos/JuliaLang/julia,32973,backports-release-1.3::release-1.3,1,merged,,"Backported PRs: - [x] #32102 - Disable BB `GMP` and `MPFR`, to fix performance regressions - [x] #32961 - Add missing `seed!(::_GLOBAL_RNG)` method - [x] #32975 - Bump Pkg version. - [x] #32979 - Fix AbstractQ conversion to different-typed matrix - [x] #32993 - docs: prepend v to tag string - [x] #33007 - fix some broadcast patterns to avoid allocations - [x] #33002 - Clarify the behavior of rand/randn for complex types - [x] #32806 - Bump libgit2 to 0.28.2 - [x] #32948 - Disallow var syntax in string interpolation - [x] #33022 - Add missing checksums for libgit2 0.28 - [x] #33042 - Fix incorrect use of `isimmutable` - [x] #32989 - Use pivoting as the default in LU regardless of the element type. - [x] #33009 - improve performance of setindex! on IdDict - [x] #33051 - Fix LU doctest broken by #32989. - [x] #33006 - improve precompilation coverage - [x] #33031 - fix #32903, regression in Ctrl-C after adding io locks - [x] #33079 - fix performance regression in broadcasting in some cases - [x] #32823 - Upgrade `doc/make.jl` to introspect branch/tag names from git info - [x] #33032 - Update unwind BB binaries to include binaries for musl libc. - [x] #33034 - fix #32970, at-threads disabled after a loop errors - [x] #33083 - error instead of widening index types in sparse - [x] #33084 - Fix Float16 conversion from large Float32s - [x] #33080 - fix #33020, check axes for broadcasted assignment from tuples - [x] #33108 - Workaround for performance penalty of splatting a number - [x] #33084 - Fix Float16 conversion from large Float32s - [x] #33089 - Bump libssh2 to `v1.9.0`, use MbedTLS on all platforms - [x] #33123 - ccall: fix vararg count computation - [x] #33150 - Fix which behavior when passed an empty string - [x] #33145 - fix #33135, wrong scope resolution with conflicting sparams and let vars - [x] #33116 - Replace realpath implementation with libuv - [x] #33172 - RNG: fix Sampler selection for GLOBAL_RNG - [x] #33159 - Fix `assert_havelock(::ReentrantLock)` to assert that the _current-task_ has the lock. - [x] #33173 - Factor-out logic to determine the path of the precompilation cache file. - [x] #33180 - Bump Pkg for 1.3.0-rc2. - [x] #33187 - Normalize index to CartesianIndex in _modify! Non-merged PRs with backport label: - [ ] #33096 - Update GMP and MPFR builds to use better compiler flags",91ffdca1dc7408567bb405fb522b36ee5e843abf::1a19ae846d5935433d00b7460e084c3a83145647::b0d635e9370abb53566b1bedd72e20812022d1c0::2a1ab32fa8b308be872774315307ad26eb07fc95::f482cb49b5b88755622abd1b898b5b0b9b09cbae::222fa905c77b5e42d62e4edcf9c6166d52aae473::e38bc7ea7b67713ced427f58435fd0fe5c825132::f6e60ea04d0d87c96be8c642060eda1ba69a2c26::438632ef90df6cb8e1800262018e0c12ec73b972::add5c786e1db02a55deb5d390ef69a3ab3c9d409::0d5848c05f97e8197cb3e8d4f8befb5e7f2c29d7::0905f7cc7bbe5ed5b62843b9e16f26d2da35ed96::aac65c279827007465fd2edf33a2ca1cf5964167::d7187e491929d4b3a0a01cbd548ef1bb462aff84::41bd2341e2257e83b0f8e41e35d4ea1b1dec5137::8e66361cb333702670bfbd82c4469fca7b1e831c::27a12c8f62435050f7eec188334b1d291c05b1b5::c0c8038ae29fa743ef3b084b69c17453a250bc93::dbcc3dd2793ef6f06ffe84e6680672ea8d5268a4::9f3973375d5196acd43e8d6e9fddddcdb354e4a2::f69b05704a1bd720e995386f5fa0344386e4a643::8e092f71fd6ee08f0ca09387c0f13c14904eda51::eac42ce15dc9f85852ac7800c0f3b47065a876b7::5f214ab0a54ca7c39d3ebba5128e32f0558644d6::8c51a52a7f9f66e77afe02cf3b4553cb2df7ebf5::46d0822d15236bb02e4ca0598435ffaf14262a47::1d43fb6372c032b64ad16fa75e34545f01c11d36::2410981511ed89cda5059de69125d6abbccae07d::1eacbee29fb6f97a9da45fb4c742f38a993738c9::3e543a2aa81f0f91d5b385bef74d230f19d94439::13bb8ccac4e26a649e12e774f5a6758dbd349129::8f662b5c94a918617be18e3726dbc126eadca4d6::a5539a02adac90aee7130a7eb26e6dd33658dcb1::c63f70f4122b5bfd210896832a22dc15e84bb693::965fc11391a3950273c879dfef87c70901018a43::e69ce0f9ddf1ced74ae6a85c6e998cfeca1f8c45::
https://api.github.com/repos/JuliaLang/julia,32895,sgj/crand::master,1,merged,RNG::backport 1.0::bugfix::,"Fixes a bug noted by @mschauer in https://github.com/JuliaLang/julia/issues/32894#issuecomment-521284511, which seems to originate in #24874 by @rfourquet, where the code used a `/ 2^32` expression that overflows on 32-bit machines.  This PR uses `* 2.0^-32` instead, which constant folds and is exact in `Float64`. Also fixes another problem in the same code on Windows — the code assumed that `RAND_MAX` is at least `2^16-1`, which seems to be true on supported Unix systems (GNU and BSD), but [on Windows](https://docs.microsoft.com/en-us/previous-versions/398ax69y(v%3Dvs.140)) it is `2^15-1` so we need a third `rand` call to get 32 bits of randomness (or ""randomness""). Use `ldexp`?::`@code_native g(UInt32(3))` reports an enormous amount of code for `g(x) = ldexp(Float64(x), -32)` for some reason… (`ldexp(x, n)` only currently supports floating-point `x`.)::I think `ldexp` is probably slower here here because it doesn't seem to constant-propagate the exponent?::",fc58c84371c6c5cb84305cce7d66370ff198e3e1::bfae1dd4783c9b217ff8b2360d7d809ab66a7143::
https://api.github.com/repos/JuliaLang/julia,32830,kf/32820::master,1,merged,backport 1.0::bugfix::optimizer::,Fixes #32820,0e740d05149bc8fecde5372029dfcdc4b5807f3a::
https://api.github.com/repos/JuliaLang/julia,32826,sk/issetequal::master,1,merged,backport 1.0::,"- add tests that set ops fail for non-sets (#32550) - issubset(l, r::AbstractSet): optimize early exit case - reorganize definitions in base/abstractsets.jl",971d18b6e1ef45d6d63887345f209b1d61a21caf::e4456d0e66b7f1db138b86fb84a29845937326e9::a1350402142bffc9e346f48711943721a5ff2b0e::
https://api.github.com/repos/JuliaLang/julia,32756,dk/fixsparsetest::master,0,merged,sparse::,"This ""test"" was introduced in #30405, but (i) it doesn't test anything, and (ii) what was written returns false. Judging from #30006, I guess what was supposed to be tested is assignment to previous zero elements, not comparison. Anyway, please feel free to change to whatever is more meaningful. Edit: those patches were backported, so this may apply here as well?",b1f1e1d83468634278c3e8e4335c813053626416::
https://api.github.com/repos/JuliaLang/julia,32592,backports-1.2.0::release-1.2,1,merged,,"Backported PRs: - [x] #32007 - Sparse matrix: fix fast implementation of findnext and findprev for cartesian coordinates - [x] #32476 - fix #32467, parsing macro on `for` inside `do` inside call - [x] #32509 - fix #32488, type intersection regression - [x] #32605 - Fix #32579 - Issue in typeconstraint accumulation - [x] #32623 - fix #32620, crash when assigning to static parameter - [x] #31698 - Fix some vararg-related subtyping issues - [x] #32590 - fix #32582, type intersection bug in unions - [x] #32321 - codegen,gc-lowering: post fixup tbaa information - [x] #32271 - [Statistics] fix type determination in corm - [x] #32145 - fix bug in block renaming for dead code elimination - [x] #32731 - fix #32703, bad ambiguity error Need manual backport: - [x] #32038 - Update Julia logos, removing rings, round 2 - [x] #32054 - Update Windows icon and NSIS banner Non-merged PRs with backport label: - [ ] #32327 - bug fixes in matrix log",8dd88f30008d429b953f0036ab939d09f3450e2b::aa79ae491be3312deaee500d96f8cf8317cb7116::52838478aabe93120a0152ec5da733c9d8f0c39a::b6c2a59e840f3188d673b485404b80217d7a8b37::65d9ffa34ad91d956b2dc189f3e3162eb1981f6f::3759bae575ede31120d614cb60d72e08b3f7ca0b::c9dd5650e55108b2168bdf233e2b936144c01576::f05906a843932b73669961ee9ec7297d4d73a702::7745dbd1c209d99e6a7eda15603ed8666f379e37::e1820dbcb502170f2e7c0483affea0d70acb19ba::de3ea083bf5eb3b16e652fd9abb5763096ffd1dc::2d8f4db7a27d1bad67e603469502b5ecc79f589c::a4104fb551537cc9bda8bb349f4e6e252be2b5cf::a5d351d5dda6596260085bcbaf1570700909665c::429893cf1db89304c5c0c9249d2fe73285b1a4da::e2437b72c1452d113d8f58fdbcc2b73dd859b55e::74312a076417eb3ec2ae8488740cd883f0885914::5f4a5673731b69abb492916d946732870bd56531::c5c054b5e0678f6f7829e8e5c989eef58a313f38::7cfd2b4c084ee55256d65030dcd309d82428b3d4::7fad4d455ed96a2104fcc211afc80a20a87d086a::42b6e6831c2e1c1152d38209664a3d34dc0828aa::7168d323b444cce5a4503ed408c40a7551c73fa7::072abb1132f5dcc24163609d687e4393102d7f0c::6d9dc084fe0c0ea31d41f2faa72b95a173bbf6f1::bd375ac513839e00d4353779f79cef609df44f67::
https://api.github.com/repos/JuliaLang/julia,32518,vc/nvptx_no_patches::master,1,merged,codegen::gpu::,"Currently CUDAnative produces invalid NVPTX assembly on LLVM 8.0. During the development of 8.0 a lot of progress was made to enable debug information for the NVPTX target, but in the release version it is turned off due to various bugs, my PR in #32496 backports from LLVM trunk/9.0 various fixes and the commit that enables debug-information. This PR configurates the debug- information emission to be compatible with the NVPTX target, this is necessary even without the full-support enabled. As an example in the NVPTX IR for https://github.com/JuliaGPU/CUDAnative.jl/issues/428#issuecomment-507849310 we can see in https://gist.github.com/vchuravy/e83018007ef4ab1c7927e89f2a58e9c6#file-ptxcall_kernel_95-ptx-L404-L453 the emission of Label for GNU pubnames, even though everything else is commented out (and yes they disabled emission by commenting it out)... So this PR is necessary even if we decide not to go with #32496. This might be fine for `g1` also for CPUs. I have to admit I don't quite understand what this option entails and I wanted to avoid introducing a regression in debuginfo quality for CPUs::",46f8365889817f5ebf87df27c5555c4a0f564b35::acc2b99ab866914210701f78f7ecbae76ad61c90::
https://api.github.com/repos/JuliaLang/julia,32496,vc/nvptxdi::master,1,closed,external dependencies::gpu::,"This backports patches from LLVM 9 enabling us to emit debuginfo for NVPTX on LLVM 8 and is one way to fix https://github.com/JuliaGPU/CUDAnative.jl/issues/428 @Keno  do you remember what this TODO is about? You added it in 2012 30aed865b713a546d2d2eb44b88b43aa1c27e1ed::Yes, i think it was about switching the identifier from C89 to Julia::",e47e4a0d568715b62ea38adeda1282045b93c99d::
https://api.github.com/repos/JuliaLang/julia,32476,jb/fix32467::master,1,merged,backport 1.0::bugfix::parser::,fix #32467,58fb9b7b6e0a95700faeaa199cca156f7caf11e4::
https://api.github.com/repos/JuliaLang/julia,32469,kf/emscriptenlongjmp::master,1,merged,wasm::,A couple of small backports from kf/wasm3. Trying to reduce the delta between that branch and master. See individual commits.,acacde42de798829aca7633e387dffb0e15d6618::6589e63589faaa80a77906d17c08491ccb9f5541::da5a38409075beb122633b1ad1535130709a7c5f::
https://api.github.com/repos/JuliaLang/julia,32431,mp/head-and-tail::master,0,merged,parallel::stdlib::,"The last `return` statement is currently referring to a non-existent `s` variable. Also fix the related doctest, even though it does not get tested at the moment. The same bug is also present in 1.0.4, 1.1.1 and 1.2.0-rc1, so it should also be backported? X-ref: #32376",4c345680d9ea55273b534d70d3a846f17b807dd3::6f3bcc38a4ebac955301d6ac72001ffd44f1fc20::
https://api.github.com/repos/JuliaLang/julia,32400,kf/llvmconfigpatch::master,1,merged,,"This is an LLVM 6.0/7.0 backport of a patch that changes which flags llvm-config passes. This shouldn't matter much for most uses cases, but it's useful for two reasons: 1) It makes the behavior of llvm-config consistent between all the LLVM versions we support, making it easier for find any problems with our Makefile. 2) It prevents any flags meant for LLVM only from creeping into the build of our .cpp files (there isn't usually a need for this, but I needed to be able to do this when trying to target wasm)",bc06a36cfbefc6fc966fcd528cc7909e61bdc84c::
https://api.github.com/repos/JuliaLang/julia,32383,aa/stats-random::master,1,merged,statistics::,"Statistics uses Random in its tests but doesn't declare it as a test dependency in its Project.toml. Because of this, Statistics fails in the PkgEval 1.2.0-rc2 run. (But oddly enough not for 1.1.1.) Backporting this should fix that. I'm also marking it for backport to 1.0, because the issue exists there, PkgEval just doesn't seem to complain about it for 1.0.",b549fd94494b2426a368df9cd9b2f6495baccf7b::
https://api.github.com/repos/JuliaLang/julia,32362,dk/matmuldiag::master,0,merged,linear algebra::,"Fixes #31325. This is a continuation of #31400, which got stalled. Closes #31400. The following benchmarks tell pretty much everything about which specialized methods were missing and hence falling back to generic matmuls. ```julia # before the PR julia> using LinearAlgebra, BenchmarkTools, Test julia> A = rand(100, 100); julia> B = similar(A); julia> D = Diagonal(rand(100)); julia> for transformA in (identity, adjoint, transpose), transformD in (identity, Adjoint, Transpose) @btime mul!($(copy(B)), $(transformA(A)), $(transformD(D))) @btime mul!($(copy(B)), $(transformD(D)), $(transformA(A))) end 791.282 μs (6 allocations: 336 bytes) 2.169 μs (0 allocations: 0 bytes) 809.140 μs (6 allocations: 336 bytes) 2.300 μs (0 allocations: 0 bytes) 809.392 μs (6 allocations: 336 bytes) 2.166 μs (0 allocations: 0 bytes) 906.218 μs (0 allocations: 0 bytes) 810.070 μs (6 allocations: 336 bytes) 796.803 μs (6 allocations: 336 bytes) 790.676 μs (6 allocations: 336 bytes) 796.903 μs (6 allocations: 336 bytes) 791.014 μs (6 allocations: 336 bytes) 905.247 μs (0 allocations: 0 bytes) 810.338 μs (6 allocations: 336 bytes) 796.873 μs (6 allocations: 336 bytes) 790.946 μs (6 allocations: 336 bytes) 796.773 μs (6 allocations: 336 bytes) 790.640 μs (6 allocations: 336 bytes) # with this PR julia> for transformA in (identity, adjoint, transpose), transformD in (identity, Adjoint, Transpose) @btime mul!($(copy(B)), $(transformA(A)), $(transformD(D))) @btime mul!($(copy(B)), $(transformD(D)), $(transformA(A))) end 1.982 μs (2 allocations: 96 bytes) 2.238 μs (0 allocations: 0 bytes) 1.954 μs (0 allocations: 0 bytes) 2.145 μs (0 allocations: 0 bytes) 1.971 μs (0 allocations: 0 bytes) 2.133 μs (0 allocations: 0 bytes) 21.606 μs (2 allocations: 96 bytes) 22.907 μs (0 allocations: 0 bytes) 21.615 μs (3 allocations: 112 bytes) 22.823 μs (1 allocation: 16 bytes) 21.529 μs (2 allocations: 96 bytes) 22.920 μs (0 allocations: 0 bytes) 21.543 μs (2 allocations: 96 bytes) 22.940 μs (0 allocations: 0 bytes) 21.546 μs (3 allocations: 112 bytes) 23.016 μs (1 allocation: 16 bytes) 21.588 μs (2 allocations: 96 bytes) 22.967 μs (0 allocations: 0 bytes) ``` I know I keep asking the same question in (almost) all of my PRs: this is a pure performance improvement, all methods (as per the code above) have been working correctly before, so this might be worth backporting?",3b7508daa08cdf3829964d10b3eb5d46a1816ca1::03e5cbb8dffc4a8c12e062616f54dda8bf5747ad::
https://api.github.com/repos/JuliaLang/julia,32327,sgj/logfix::master,1,merged,backport 1.0::bugfix::linear algebra::,Fixes #32313,fa16d7899899a41a4c6309ffe6269afa0772f993::db1cd3513bc4aabe0c57502e53bf9160e298673f::
https://api.github.com/repos/JuliaLang/julia,32326,jb/fix32325::master,1,merged,backport 1.0::bugfix::lowering::,"Fixes #32325. It's a bit ambiguous whether the function definition is meant to be a local variable, but if you replace `struct` with `abstract type` or `primitive type` the function is taken to be a constructor, so this just makes `struct` work the same way. That is almost certainly the intended/more useful behavior.",f30356861b35d6ed797e5a8056b5bbb8b322b958::
https://api.github.com/repos/JuliaLang/julia,32321,jn/32215::master,1,merged,backport 1.0::,"fix #32215 unfortunately, while LLVM has a pass for exactly this purpose (RewriteStatepointsForGC::stripNonValidData), C++ access rules prohibit us from using it and would require us to be named ""coreclr"" to avoid an assertion error :/ See also https://reviews.llvm.org/D33756 for a more detailed explanation of the problem here.",7e79017bee110d3b78e43a5210997f5d4b2d9403::
https://api.github.com/repos/JuliaLang/julia,32270,backports-1.2.0-rc2::release-1.2,1,merged,release::,"Backported PRs: - [x] #31933 - Unconditionally append lib/julia to rpath, fixes #31903. - [x] #31946 - Fix for optind in getopt on musl libc. - [x] #32072 - Two fixes to win32 cross compilation - [x] #32139 - fix #32121, macro hygiene bug in named tuples - [x] #32144 - Fully qualify at-everywhere, fixes #28966. - [x] #32161 - Fix unsigned wrap around in lpad/rpad/string allocation - [x] #32192 - Bump OpenBLAS BB tarballs to `v0.3.5-2`, to fix FreeBSD - [x] #32219 - fix LibGit2 test: unknown repo now returns error instead of EAUTH - [x] #32260 - Remove internal sort from `getipaddrs` - [x] #32041 - RFC: use `AbstractMatrix` as the eltype of `Symmetric` for array of arrays - [x] #32255 - readdlm(bytearray) shouldn't modify bytearray - [x] #32266 - Remove copy(::SubArray) definition from SparseArrays, fixes #32213. - [x] #32169 - fix build with JULIA_ENABLE_THREADING==0 - [x] #32281 - Bump Pkg to v1.2.0-rc2. - [x] #31499 - fixes for getindex tab-completion - [x] #32326 - fix #32325, struct plus outer ctor inside `let` - [x] #32351 - Fix tryparse for invalid Chars - [x] #32383 - Add missing test dependency on Random to Statistics - [x] #32375 -  Fix -Symmetric for Bool or JuMP.VariableRef - [x] #32356 - codegen,tbaa: fix array isassigned tbaa information - [x] #32431 - Fix Distributed.head_and_tail - [x] #32425 - fix #32386, type intersection bug in var bounds - [x] #32428 - fix #30653, call `malloc_trim` sometimes - [x] #32412 - Prevent download on windows picking up rogue curl executable - [x] #32464 - fix the fix for #32121, more named tuple macro hygiene - [x] #32457 - bug fixed in read_to_buffer - [x] #32494 - fix #32465, inference of splatting unionall NamedTuple types - [x] #32512  - fix #32499, regression in struct expr in assignment rhs #32512 Non-merged PRs with backport label: - [ ] #32512 - fix #32499, regression in struct expr in assignment rhs - [ ] #32327 - bug fixes in matrix log - [ ] #32271 - [Statistics] fix type determination in corm - [ ] #32145 - fix bug in block renaming for dead code elimination",9959fa54617b343106fa4c0dfc3ce9fc6c8ad753::b9914687ffe87efabae47ac1fb5ed8ba5b6193ee::d2e2ea9ecacfbc47ead4d9ba63aec63502851092::28c2b0d1467ff9eccc005ddbeb07cfa857ace1f2::5d88b7469b17da4c7cb29e673caeaf77d9c12c0b::5a1a36182b210e4f1bbb36be294ba42c3bc408a1::9ce9000fc7cd45bdcfb8b5de84af667f46c3f34f::83e7363a0541cf4f4335df872453d429347731e9::05960a5756986a7d6dc1b9ff6fdda01cfd038e47::12fd2de47e410cb06b7268764713f6894bc75474::6e7afe684e8d04f4116d08dcfce98306358a25ed::cdb12d3c78fcf0922cb242bb7b9237b529161045::c47f050bd2d71a15f696a9e7d149ec6287b13ddc::5579bc69363a46b27ed1bea819b90f570915a20b::685a9e39effdef86a5dd4153af481b0c796466fb::43b3695b03409cbbd8df05c525713e6dc652d725::05e78d5db9e693474cb27dbf7f5c7526c8816afc::4a1602380170b18b485f7d0e445ba0b941f5d0d4::89f73ab75e7498521f12c78917eac3d382211101::4551b30d63b41da7192b5213f1ec9e5b52293d1d::257c6ce2fc8b08d10743565a4fb676e6bd7342fc::3546c6326a400def1f7d9d7afabf483999856cd4::dd985106e802933a9898add7a12cb2c9497e56a5::0ba8caaf15cad206cfa8099df661271247e0458c::525d4e93d022c2a7136ff075080a73dae3c291f4::44a224c045af9f21bb71c91d8558452519d5b405::435510c0d4be88dda491af65dd1c76e75f306781::dfad4e6bb3ee8195bfdfdd3d8595c1a22904f458::81fc0a18f6c8e71f327db81fcb9b1c2ae1b0445a::b92c6ed6fc50728f75a5df0252e1ba0dc7ee59fb::bd9f411ea5dad0b27e61ffafcfe5c911503b90c1::2e72bca97eac66b8dfe010cdf548a183866ece89::
https://api.github.com/repos/JuliaLang/julia,32263,jb/backports-1.0.5::release-1.0,1,closed,DO NOT MERGE::release::,,51495d3294f37f906d23e43d4b699311012d1b36::9834bfadaffe81bf9f91ef7ee689f954f602c1cd::77162f9bf9ffdadd2203177650d5bbfc12386a3b::1197b353a82e74f0c3b5414968839f640eed7277::50f7de12a89009af0ffceb4e8cb1b01dd4771739::d128ca108d828682f4cde6601bafcbaca9e164b0::c85b608c25d1c7085d92a0ae5ef57884e491f10c::3674d54b1e1a25fea67edb253bf0b95ccfecca39::238ccf620c976f6923abe1bd322783e3d99a18cb::7419f09d7281f574e689483ad189e4d9c5dabf68::
https://api.github.com/repos/JuliaLang/julia,32248,jb/1.0closures::release-1.0,1,closed,lowering::,"This backports #30972 to 1.0. I've received requests to backport this, since it makes a very big dent in closure performance problems (#15276). It's especially important for `@threads`, which introduces a non-obvious closure that can totally tank performance --- easily orders of magnitude. In those cases it's basically a ""performance bug"". This code has been in use for 4 months and seems to be very solid. It has not needed any fixes in that time.",db76c218c59e75fa41c303110dc9c074c36e847c::
https://api.github.com/repos/JuliaLang/julia,32162,dk/relaxdiagtests::master,0,merged,,"See https://github.com/JuliaLang/julia/pull/31443#issuecomment-496279144 As in the comment by @nalimilan, the current tests seem to fail on some architectures only, including Julia v1.0.4, so this should be backported once agreed on.",5c204a5ecc6fb84216f543a3784c8445fc3ab2fd::
https://api.github.com/repos/JuliaLang/julia,32161,cjf/fix-alloc-string-len-overflow::master,1,merged,backport 1.0::bugfix::,Fixes #32160,3fceaa0b05f5fbc2f458b29aef77a854febf0cd0::
https://api.github.com/repos/JuliaLang/julia,32124,aa/test-32097::master,1,merged,linear algebra::test::,"This example reproduces the issue observed in issue #32092 on Julia 1.1 that was fixed by PR #32097. Marking for backport for all of the same versions as #32097, as this adds tests for that PR that were not included in the PR itself.",6aa6b2b1e8fbb2ac35531bb8ed5b468775de3a78::
https://api.github.com/repos/JuliaLang/julia,32122,mb/28866::master,1,merged,arrays::minor change::,"This is a simple workaround for the handful of elementwise operations that are defined on arrays _without_ the need for explicit broadcast but use broadcasting (with an extra shape check) in their implementation. These were the only affected cases I could find. This is restoring the intended behavior, and matches the behavior of Julia pre-0.7.  It is a fairly impactful change, though, so even though I'd call it a bugfix we probably want to be conservative in our backporting.",30702a902590ac6af01c25e7bd435331f21c335d::0e3f1a478ee86672c08b5f2c682f6a722e525e41::648316906f389a385abff9313b8812b62854fdd3::
https://api.github.com/repos/JuliaLang/julia,32108,teh/fix_32080::master,1,merged,backport 1.0::bugfix::linear algebra::,Ref #32080. Thanks to @RalphAS and @stevengj.,7b921cf991add51d37957814f1b2e2519bdbee3a::
https://api.github.com/repos/JuliaLang/julia,32100,cv/quote-path::master,1,merged,backport 1.0::build::,"When compiling [`master`](https://github.com/JuliaLang/julia/commit/bf916970501145743e642ea6ed3d8dd8ed36204f) the `fixup-libgfortran.sh` fails to execute if the provided `PATH` contains a space. Issue was introduced in: https://github.com/JuliaLang/julia/pull/29522 The error which is ignored looks like: ``` /Users/omus/Development/Julia/latest/contrib/install.sh 755 /Users/omus/Development/Julia/latest/contrib/julia-config.jl /Users/omus/Development/Julia/latest/usr/share/julia/ PATH=/Users/omus/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Applications/Sublime Text.app/Contents/SharedSupport/bin:/usr/local/opt/git/share/git-core/contrib/diff-highlight:/Users/omus/Development/Julia/latest/usr/tools /Users/omus/Development/Julia/latest/contrib/fixup-libgfortran.sh --verbose /Users/omus/Development/Julia/latest/usr/lib /bin/sh: Text.app/Contents/SharedSupport/bin:/usr/local/opt/git/share/git-core/contrib/diff-highlight:/Users/omus/Development/Julia/latest/usr/tools: No such file or directory make: [/Users/omus/Development/Julia/latest/usr/lib/libgfortran*.dylib*] Error 127 (ignored) ``` When compiling the SparseArrays stdlib then compilation would fail with: ``` error during bootstrap: LoadError(""sysimg.jl"", 16, LoadError(""/Users/omus/Development/Julia/latest/usr/share/julia/stdlib/v1.3/SuiteSparse/src/SuiteSparse.jl"", 24, LoadError(""/Users/omus/Development/Julia/latest/usr/share/julia/stdlib/v1.3/SuiteSparse/src/umfpack.jl"", 66, ErrorException(""error compiling top-level scope: could not load library \""libsuitesparse_wrapper\""\ndlopen(libsuitesparse_wrapper.dylib, 1): Library not loaded: @rpath/libgfortran.5.dylib\n  Referenced from: /Users/omus/Development/Julia/latest/usr/lib/./libopenblas64_.0.3.5.dylib\n  Reason: image not found"")))) rec_backtrace at /Users/omus/Development/Julia/latest/src/stackwalk.c:94 record_backtrace at /Users/omus/Development/Julia/latest/src/task.c:217 jl_throw at /Users/omus/Development/Julia/latest/src/task.c:443 jl_rethrow_with_add at /Users/omus/Development/Julia/latest/src/codegen.cpp:793 jl_compile_linfo at /Users/omus/Development/Julia/latest/src/codegen.cpp:1207 jl_compile_method_internal at /Users/omus/Development/Julia/latest/src/gf.c:1778 _jl_invoke at /Users/omus/Development/Julia/latest/src/gf.c:2048 [inlined] jl_invoke at /Users/omus/Development/Julia/latest/src/gf.c:2056 jl_toplevel_eval_flex at /Users/omus/Development/Julia/latest/src/toplevel.c:808 jl_eval_module_expr at /Users/omus/Development/Julia/latest/src/toplevel.c:181 jl_toplevel_eval_flex at /Users/omus/Development/Julia/latest/src/toplevel.c:640 jl_parse_eval_all at /Users/omus/Development/Julia/latest/src/ast.c:873 jl_load at /Users/omus/Development/Julia/latest/src/toplevel.c:878 [inlined] jl_load_ at /Users/omus/Development/Julia/latest/src/toplevel.c:885 include at ./boot.jl:328 [inlined] include_relative at ./loading.jl:1094 include at ./Base.jl:31 [inlined] include at /Users/omus/Development/Julia/latest/usr/share/julia/stdlib/v1.3/SuiteSparse/src/SuiteSparse.jl:3 jl_apply at /Users/omus/Development/Julia/latest/src/./julia.h:1624 [inlined] do_call at /Users/omus/Development/Julia/latest/src/interpreter.c:328 eval_stmt_value at /Users/omus/Development/Julia/latest/src/interpreter.c:368 [inlined] eval_body at /Users/omus/Development/Julia/latest/src/interpreter.c:764 jl_interpret_toplevel_thunk_callback at /Users/omus/Development/Julia/latest/src/interpreter.c:892 Interpreter frame (ip: 2) Core.CodeInfo(code=Array{Any, (7,)}[ Expr(:call, Base.getproperty, :Base, :(:USE_GPL_LIBS)), Expr(:gotoifnot, SSAValue(1), 7), Expr(:call, :include, ""umfpack.jl""), Expr(:call, :include, ""cholmod.jl""), Expr(:call, :include, ""spqr.jl""), Expr(:call, :include, ""deprecated.jl""), Expr(:return, nothing)], codelocs=Array{Int32, (7,)}[1, 1, 2, 3, 4, 5, 5], ssavaluetypes=7, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (5,)}[ Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""/Users/omus/Development/Julia/latest/usr/share/julia/stdlib/v1.3/SuiteSparse/src/SuiteSparse.jl""), line=24, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""/Users/omus/Development/Julia/latest/usr/share/julia/stdlib/v1.3/SuiteSparse/src/SuiteSparse.jl""), line=25, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""/Users/omus/Development/Julia/latest/usr/share/julia/stdlib/v1.3/SuiteSparse/src/SuiteSparse.jl""), line=26, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""/Users/omus/Development/Julia/latest/usr/share/julia/stdlib/v1.3/SuiteSparse/src/SuiteSparse.jl""), line=27, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""/Users/omus/Development/Julia/latest/usr/share/julia/stdlib/v1.3/SuiteSparse/src/SuiteSparse.jl""), line=28, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, min_world=1, max_world=-1, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)jl_interpret_toplevel_thunk at /Users/omus/Development/Julia/latest/src/interpreter.c:901 jl_toplevel_eval_flex at /Users/omus/Development/Julia/latest/src/toplevel.c:814 jl_eval_module_expr at /Users/omus/Development/Julia/latest/src/toplevel.c:181 jl_toplevel_eval_flex at /Users/omus/Development/Julia/latest/src/toplevel.c:640 jl_parse_eval_all at /Users/omus/Development/Julia/latest/src/ast.c:873 jl_load at /Users/omus/Development/Julia/latest/src/toplevel.c:878 [inlined] jl_load_ at /Users/omus/Development/Julia/latest/src/toplevel.c:885 include at ./boot.jl:328 [inlined] include_relative at ./loading.jl:1094 _require at ./loading.jl:1042 require at ./loading.jl:911 require at ./loading.jl:906 jl_apply at /Users/omus/Development/Julia/latest/src/./julia.h:1624 [inlined] do_call at /Users/omus/Development/Julia/latest/src/interpreter.c:328 eval_body at /Users/omus/Development/Julia/latest/src/interpreter.c:641 jl_interpret_toplevel_thunk_callback at /Users/omus/Development/Julia/latest/src/interpreter.c:892 Interpreter frame (ip: 40) Core.CodeInfo(code=Array{Any, (88,)}[ Expr(:call, Base.getproperty, :Base, :(:is_primary_base_module)), Expr(:gotoifnot, SSAValue(1), 88), <newvar #<3>>, <newvar #<8>>, Core.SlotNumber(id=4) = Expr(:call, Base.vect, :(:Base64), :(:CRC32c), :(:SHA), :(:FileWatching), :(:Unicode), :(:Mmap), :(:Serialization), :(:Libdl), :(:Markdown), :(:LibGit2), :(:Logging), :(:Sockets), :(:Printf), :(:Profile), :(:Dates), :(:DelimitedFiles), :(:Random), :(:UUIDs), :(:Future), :(:LinearAlgebra), :(:SparseArrays), :(:SuiteSparse), :(:Distributed), :(:SharedArrays), :(:Pkg), :(:Test), :(:REPL), :(:Statistics)), Expr(:call, Base.broadcasted, :string, Core.SlotNumber(id=4)), Expr(:call, Base.broadcasted, :textwidth, SSAValue(6)), Expr(:call, Base.materialize, SSAValue(7)), Core.SlotNumber(id=5) = Expr(:call, :maximum, SSAValue(8)), Expr(:thunk, Core.CodeInfo(code=Array{Any, (5,)}[ Expr(:global, Symbol(""##1#2"")), Expr(:const, Symbol(""##1#2"")), Expr(:call, Core.TypeVar, :(:maxlen), Core.Any), Expr(:struct_type, Symbol(""##1#2""), Expr(:call, Core.svec, SSAValue(3)), Expr(:call, Core.svec, :(:maxlen)), Core.Function, Expr(:call, Core.svec, SSAValue(3)), false, 1), Expr(:return, nothing)], codelocs=Array{Int32, (5,)}[1, 1, 1, 1, 1], ssavaluetypes=5, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (1,)}[Core.LineInfoNode(method=Symbol(""top-level scope""), file=:none, line=0, inlined_at=0)], slotnames=Array{Symbol, (0,)}[], slotflags=Array{UInt8, (0,)}[], slottypes=nothing, rettype=Any, parent=nothing, min_world=1, max_world=-1, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)), Expr(:call, Core.svec, Symbol(""##1#2""), Core.Any, Core.Any), Expr(:call, Core.svec), Expr(:call, Core.svec, SSAValue(11), SSAValue(12)), Expr(:method, false, SSAValue(13), Core.CodeInfo(code=Array{Any, (14,)}[ Expr(:call, Main.string, Core.SlotNumber(id=2)), Expr(:call, Main.:(*), SSAValue(1), ""  ""), Expr(:call, Core.getfield, Core.SlotNumber(id=1), :(:maxlen)), Expr(:call, Main.:(+), SSAValue(3), 3), Expr(:call, Main.rpad, SSAValue(2), SSAValue(4), ""─""), Expr(:call, Main.print, SSAValue(5)), Expr(:call, Base.getproperty, Main.Base, :(:time_print)), Expr(:call, Core.apply_type, Base.Val, 9), Expr(:call, SSAValue(8)), Expr(:call, Base.literal_pow, Main.:(^), 10, SSAValue(9)), Expr(:call, Main.:(*), Core.SlotNumber(id=3), SSAValue(10)), Expr(:call, SSAValue(7), SSAValue(11)), Expr(:call, Main.println), Expr(:return, SSAValue(13))], codelocs=Array{Int32, (14,)}[1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3], ssavaluetypes=14, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (3,)}[ Core.LineInfoNode(method=Symbol(""#1""), file=Symbol(""sysimg.jl""), line=54, inlined_at=0), Core.LineInfoNode(method=Symbol(""#1""), file=Symbol(""sysimg.jl""), line=54, inlined_at=0), Core.LineInfoNode(method=Symbol(""#1""), file=Symbol(""sysimg.jl""), line=54, inlined_at=0)], slotnames=Array{Symbol, (3,)}[ Symbol(""#self#""), :mod, :t], slotflags=Array{UInt8, (3,)}[0x00, 0x08, 0x08], slottypes=nothing, rettype=Any, parent=nothing, min_world=1, max_world=-1, inferred=false, inlineable=false, propagate_inbounds=false, pure=false)), Symbol(""##1#2""), Expr(:call, Core.typeof, Core.SlotNumber(id=5)), Expr(:call, Core.apply_type, SSAValue(15), SSAValue(16)), Core.SlotNumber(id=1) = Expr(:new, SSAValue(17), Core.SlotNumber(id=5)), Core.SlotNumber(id=6) = Core.SlotNumber(id=1), Expr(:call, Base.getproperty, :Base, :(:end_base_include)), Expr(:call, Base.gejl_interpret_toplevel_thunk at /Users/omus/Development/Julia/latest/src/interpreter.c:901 jl_toplevel_eval_flex at /Users/omus/Development/Julia/latest/src/toplevel.c:814 jl_parse_eval_all at /Users/omus/Development/Julia/latest/src/ast.c:873 jl_load at /Users/omus/Development/Julia/latest/src/toplevel.c:878 exec_program at /Users/omus/Development/Julia/latest/usr/bin/julia (unknown line) true_main at /Users/omus/Development/Julia/latest/usr/bin/julia (unknown line) main at /Users/omus/Development/Julia/latest/usr/bin/julia (unknown line) tproperty, :Base, :(:start_base_include)), Expr(:call, :-, SSAValue(20), SSAValue(21)), Expr(:call, Core.apply_type, Base.Val, -9), Expr(:call, SSAValue(23)), Expr(:call, Base.literal_pow, :^, 10, SSAValue(24)), Expr(:call, :*, SSAValue(22), SSAValue(25)), Expr(:call, Core.SlotNumber(id=6), :Base, SSAValue(26)), Expr(:call, Base.getproperty, :Base, :(:_track_dependencies)), Expr(:call, Base.setindex!, SSAValue(28), true), Core.SlotNumber(id=2) = Expr(:call, Base.time_ns), Core.SlotNumber(id=4), Core.SlotNumber(id=7) = Expr(:call, Base.iterate, SSAValue(31)), Expr(:call, Core.:(===), Core.SlotNumber(id=7), nothing), Expr(:call, Base.not_int, SSAValue(33)), Expr(:gotoifnot, SSAValue(34), 51), Core.SlotNumber(id=7), Core.SlotNumber(id=9) = Expr(:call, Core.getfield, SSAValue(36), 1), Expr(:call, Core.getfield, SSAValue(36), 2), Core.SlotNumber(id=10) = Expr(:call, Base.time_ns), Expr(:call, Base.getproperty, :Base, :(:require)), Core.SlotNumber(id=11) = Expr(:call, SSAValue(40), :Base, Core.SlotNumber(id=9)), Expr(:call, Base.time_ns), Expr(:call, Base.:(-), SSAValue(42), Core.SlotNumber(id=10)), Core.SlotNumber(id=12) = Expr(:call, Base.:(/), SSAValue(43), 1e+09), Expr(:call, Core.SlotNumber(id=6), Core.SlotNumber(id=9), Core.SlotNumber(id=12)), Core.SlotNumber(id=7) = Expr(:call, Base.iterate, SSAValue(31), SSAValue(38)), Expr(:call, Core.:(===), Core.SlotNumber(id=7), nothing), Expr(:call, Base.not_int, SSAValue(47)), Expr(:gotoifnot, SSAValue(48), 51), goto 36, Core.SlotNumber(id=3) = nothing, Expr(:call, Base.time_ns), Expr(:call, Base.:(-), SSAValue(52), Core.SlotNumber(id=2)), Expr(:call, Base.:(/), SSAValue(53), 1e+09), Expr(:call, Base.getproperty, :Base, :(:tot_time_stdlib)), Expr(:call, Base.setindex!, SSAValue(55), SSAValue(54)), Expr(:call, Base.getproperty, :Base, :(:_require_dependencies)), Core.SlotNumber(id=8) = Expr(:call, Base.iterate, SSAValue(57)), Expr(:call, Core.:(===), Core.SlotNumber(id=8), nothing), Expr(:call, Base.not_int, SSAValue(59)), Expr(:gotoifnot, SSAValue(60), 81), Core.SlotNumber(id=8), Core.SlotNumber(id=13) = Expr(:call, Core.getfield, SSAValue(62), 1), Expr(:call, Core.getfield, SSAValue(62), 2), Expr(:call, Base.getindex, Core.SlotNumber(id=13), 3), Expr(:call, :==, SSAValue(65), 0), Expr(:gotoifnot, SSAValue(66), 70), goto 76, goto 71, false, Expr(:call, Base.getproperty, :Base, :(:_included_files)), Core.SlotNumber(id=13), Expr(:call, ::, 1, 2), Expr(:call, Base.getindex, SSAValue(72), SSAValue(73)), Expr(:call, :push!, SSAValue(71), SSAValue(74)), Core.SlotNumber(id=8) = Expr(:call, Base.iterate, SSAValue(57), SSAValue(64)), Expr(:call, Core.:(===), Core.SlotNumber(id=8), nothing), Expr(:call, Base.not_int, SSAValue(77)), Expr(:gotoifnot, SSAValue(78), 81), goto 62, Expr(:call, Base.getproperty, :Base, :(:_require_dependencies)), Expr(:call, :empty!, SSAValue(81)), Expr(:call, Base.getproperty, :Base, :(:_track_dependencies)), Expr(:call, Base.setindex!, SSAValue(83), false), Expr(:call, Base.getproperty, :Base, :(:tot_time_stdlib)), Expr(:call, Base.getindex, SSAValue(85)), Expr(:call, Core.SlotNumber(id=6), ""Stdlibs total"", SSAValue(86)), Expr(:return, nothing)], codelocs=Array{Int32, (88,)}[1, 1, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 9, 10, 10, 10, 10, 10, 10, 10, 10, 12, 13, 13, 14, 14, 11, 15, 10, 10, 10, 10, 10, 10, 16, 16, 8, 8, 8, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22], ssavaluetypes=88, ssaflags=Array{UInt8, (0,)}[], method_for_inference_limit_heuristics=nothing, linetable=Array{Any, (22,)}[ Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=16, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=18, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=20, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=52, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=54, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=55, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=57, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=58, inlined_at=0), Core.LineInfoNode(method=Symbol(""macro expansion""), file=Symbol(""util.jl""), line=212, inlined_at=8), Core.LineInfoNode(method=Symbol(""macro expansion""), file=Symbol(""util.jl""), line=213, inlined_at=8), Core.LineInfoNode(method=Symbol(""macro expansion""), file=Symbol(""sysimg.jl""), line=59, inlined_at=10), Core.LineInfoNode(method=Symbol(""macro expansion""), file=Symbol(""util.jl""), line=212, inlined_at=11), Core.LineInfoNode(method=Symbol(""macro expansion""), file=Symbol(""util.jl""), line=213, inlined_at=11), Core.LineInfoNode(method=Symbol(""macro expansion""), file=Symbol(""util.jl""), line=214, inlined_at=11), Core.LineInfoNode(method=Symbol(""macro expansion""), file=Symbol(""sysimg.jl""), line=60, inlined_at=10), Core.LineInfoNode(method=Symbol(""macro expansion""), file=Symbol(""util.jl""), line=214, inlined_at=8), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=62, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=63, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=64, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=66, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=67, inlined_at=0), Core.LineInfoNode(method=Symbol(""top-level scope""), file=Symbol(""sysimg.jl""), line=69, inlined_at=0)], slotnames=Array{Symbol, (13,)}[ Symbol(""#1""), :t0, :val, :stdlibs, :maxlen, :print_time, Symbol(""""), Symbol(""""), :stdlib, :t0, :val, :tt, :dep], slotflags=Array{UInt8, (13,)}[0x18, 0x18, 0x18, 0x18, 0x18, 0x58, 0x08, 0x08, 0x18, 0x18, 0x18, 0x18, 0x18], slottypes=nothing, rettype=Any, parent=nothing, min_world=1, max_world=-1, inferred=false, inlineable=false, propagate_inbounds=false, pure=false) *** This error might be fixed by running `make clean`. If the error persists, try `make cleanall`. *** make[1]: *** [/Users/omus/Development/Julia/latest/usr/lib/julia/sys.ji] Error 1 make: *** [julia-sysimg-ji] Error 2 ```",d3a45ee675c3a49609356fd97e1879a17ae1bc7f::
https://api.github.com/repos/JuliaLang/julia,32097,aa/no-convert-promote_op::master,1,merged,bugfix::linear algebra::,"This method entirely duplicates the one below it with the exception that it also does a `convert` on one of the inputs with the result of `promote_op`, which doesn't make a whole lot of sense in some cases. By virtue of calling `mul!`, strided arrays that go through the abstract array method will still hit the same optimized methods that use BLAS. Fixes #32092. It would be great if this change could be backported, since it fixes an issue in private code that occurs on every version >= 1.1.0. Help coming up with a minimal test case for this would be much appreciated as well.",545d9f55224589160822c4857b551be6751a2f2a::
https://api.github.com/repos/JuliaLang/julia,32088,rb/gc-callback-nullptr::master,0,merged,GC::backport 1.0::,"It is possible when marking task objects in the GC for the associated jl_ptls_t reference to be NULL. To determine whether a task is a root task, we therefore also have to check if that reference is valid. This is a fix for a bug in the old ""GC Extensions"" [changes added last year](https://github.com/JuliaLang/julia/pull/28368) that did not manifest until now, because it was triggered by a combination of unusual circumstances. It should be fairly straightforward, as it only adds a missing null pointer check.",028ac0746af8df0b260da4cfd74eac77e2eb2abd::
https://api.github.com/repos/JuliaLang/julia,32062,cjf/fix-embedded-main-include::master,1,merged,backport 1.0::bugfix::embedding::,"These two functions need to be added to Main as part of `jl_init()`, but only when Base is present to avoid bootstrap issues. Fixes #28825 Obviously `__preinit_threads__` is a weirdly named function to be moving this to, but this part of the init stage seems to be appropriate (ie, right after `jl_add_standard_imports(jl_main_module)`). Renaming/cleanup suggestions welcome.Looks like windows CI can't find this file from here.::Ah, appveyor.yml is running the embedding test with a different working directory. I pushed a tweak to make that consistent.::",0791d3621beb197b94a33de0758dede419983b6c::
https://api.github.com/repos/JuliaLang/julia,31925,sf/backport-1.1.1-gmpfixes::backport-1.1.1,1,closed,external dependencies::freebsd::,@ararslan Let's see if these extra backports fix FreeBSD CI.,85a51fbf5a0e25ace311d94f111fd54e66b973a3::
https://api.github.com/repos/JuliaLang/julia,31849,jn/llvm-up::master,1,merged,,"~~A couple have not yet been updated, but this is a start towards updating the patch list~~ Only one is missing now for LLVM 8. LLVM 7 is complete. ~~Also, this currently fails an offsetarray test.~~ tracked this down to bad TBAA information and fixed it Needs nanosoldier, and Keno suggested it should have a PkgEval run too.This one turns out to not be required anymore because the issue got fixed upstream::```suggestion $(eval $(call LLVM_PATCH,llvm-D57118-powerpc)) # remove for 9.0 ```::```suggestion ```::Keno backported that in #28809::cc: @maleadt ::",bd95f03c461d575615f7fb09a92e926407f94597::a7fdfdb1be0ec56f5c4f2d526b4658facc7dea29::
https://api.github.com/repos/JuliaLang/julia,31776,sf/libssh2_backport_1.1::backport-1.1.1,1,merged,external dependencies::security::,(cherry picked from commit d5e365cfe275479c4eacd2fc14402f396b50bcf7),5e6cb142c82328121b390176e68995f60661f23b::
https://api.github.com/repos/JuliaLang/julia,31775,sf/libssh2_backport_1.0::backport-1.0.4,1,merged,external dependencies::security::,X-ref: https://github.com/JuliaLang/julia/pull/31745,c9de44dc8597b92be17d2059b600353415fff4c6::
https://api.github.com/repos/JuliaLang/julia,31727,backports-release-1.2::release-1.2,1,closed,DO NOT MERGE::release::,"Backported PRs: - [x] #31668 - add a missing `free` in subtyping - [x] #31669 - fix #31496, type intersection bug in restoring environment - [x] #31671 - dispatch: fix incorrect signature narrowing for U{Type, S} - [x] #31673 - channels: remove WeakRef from Condition - [x] #31692 - edit 1.2 release notes - [x] #31689 - fix #31686, segfault on invalid cmdline option - [x] #31688 - Fix doctest from utf8proc update. - [x] #31615 - fix parse(ComplexF64, ""inf"") - [x] #31708 - fix a missing GC root in type intersection - [x] #31709 - fix #31702, thread sitting in event loop outside thread region - [x] #31694 - Simplify llvm.dbg.declare for pointer arguments - [x] #31680 - fix #31663, long inference time printing large tree structure - [x] #31749 - Bump Pkg to 1.2.0-alpha.2. - [x] #31745 - Upgrade libssh2 to v1.8.2 - [x] #31670 - inference: fix fieldtype tfunc design - [x] #31747 - fix #31703, type intersection bug with chains of vars in invariant position - [x] #31762 - fix #31760, regression in Dict `iterate` - [x] #31734 - inference: accelerate type-limits under wide-recursion - [x] #31763 - fix #31758: out of bounds write in sparse broadcast - [x] #31446 - Fix issue 31252 - remote globals not being updated in some cases - [x] #31773 - precompile: permit saving code (regression) - [x] #31733 - more fixes to I/O and threading - [x] #31799 - fix droptol! docstrings - [x] #31814 - Improve IO read performance. - [x] #31812 - fix incorrect error path in `schedule` - [x] #31848 - fix #31803, covariance handling in `fieldtype_tfunc` - [x] #31871 - Recover meta nodes in replace_code_newstyle - [x] #31881 - Ensure syntax error locations appear in backtraces - [x] #31883 - fix compilation of check_top_bit - [x] #31963 - Revert ""Don't use jl_rethrow_other for LoadError/InitError"" (fix #31830) - [x] #31697 - always run on original process stack in ALWAYS_COPY_STACKS mode - [x] #31967 - fix #31965, bug in interpreter stacktraces and `jl_code_requires_compiler` - [x] #31687 - Fix regressed compilation of uncached code. - [x] #31489 - Experimental support for aliasscopes - [x] #31931 - Fix pop_exception lowering for try-break-finally (#31766) - [x] #31464 - Accept both Cvoid and Ptr{Void} return type in ccall(:memcpy) - [x] #31981 - synchronize FileWatching - [x] #31996 - Don't attempt to const prop call cycles - [x] #31960 - fix #31899, type intersection involving Int in upper bound - [x] #31997 - fix #31993, intersection of `Type{Vec}` and `Type{<:Vec{T}}` - [x] #31693 - fix potential stack overflow in Profile.jl - [x] #31893 - Prevent stack overflow in Profile - [x] #32001 - bugfix in Hermitian + complex*I - [x] #32033 - Update Mozilla CA certificate store to latest (05-15-2019) for libgit2 SSL. - [x] #32036 - restore previous exports from Base.Threads - [x] #32028 - fix serializer for compat with 1.0 for saved functions - [x] #32040 - fix `isa` fast path for typevars with lower bounds - [x] #32043 - move export of `Event` from Base back to Threads - [x] #32052 - fix #32046, Error test result from test_logs - [x] #32053 - Add Base64 to Serialization test deps - [x] #31678 - fix #31674, error when storing nonzeros into structural zeros with .= - [x] #32088 - Prevent the GC task callback from segfaulting. - [x] #32108 - BunchKauffman: correct permutation for rook pivoting (fixes #32080) - [x] #31391 - put back broadcast behavior with repeated indices, changed by #31300 - [x] #32109 - work around #32087 by polling for I/O on windows inside thread loops - [x] #32097 - Amend matrix * vector specialization for strided arrays - [x] #31725 - Automatically disable `USE_BINARYBUILDER_xxx` when `USE_SYSTEM_xxx` is set Non-merged PRs with backport label: - [ ] #32124 - Add a test for PR 32097",10a843ff3781591fdaf7bc498f27d89324abbcb7::f3e5612a950c78070761f98c7647d6cc595720b9::5c61d3a83058060cc062b7ce4cbe6583ef891e24::95e2a54eaf5061cf0fcf50ccbd748bcad08151d8::414b46d5797fcd91a782f7a8f0042ee184ee6011::4a6b3c5a4dc8bf449f23a17178d1042fd5e1cabf::e3150fcae32c97095ac1ec5a24494160afa4e5d4::05993a4741e90f4b5bbba008304efd3954b414cf::0e5e1ea841eb5d9bc15afa84dff44040897f0bbd::a28450da0f7692c9c9aae55078fb06b461c273f4::21fc367842266627dfaf357870980e0319837716::eb5059bf6ef3332f72371d45afb36aa223a238b8::568e920b4a87c54accad4a0479bd529513b9b513::9d41ffcb50a3483a591acc1246733ad360ab2e49::dd32213d09b377ebe35f13933e3637ece1fc056e::e1d23bcb52005ab6af645741ecdb80a33f449dac::9115c82a905dfbaf83c08ac64c2423a78bf58c06::2534ac585f5a52cc2880a13651b1e2d2ecca8350::b0187e827aed8cf27c9658198f505932d2bb4035::3d42798146cafd1e1df46a296d4737f11525008e::28f483ccdd47abba36d15276cb923faab628505f::c33075c8369c93452eab317b308a3041e4ae1987::9289be59847227d98e5f895ee843f24fcdb2be1f::580d2f889a9c983c86941bf4e416cce930a3c1f0::9501bd2a2e43b1394540cd1faa4c41efb8807a7a::300e7396d53ea766a39aa7913cd44b74dfe2667d::eae30d6c034f7b9ffd72762a7b4cbba5b4a97ddd::6d01613cca82ca8f2fc5b6da89ac1838e197c202::68fc64a6abd26de754eedd5962de55408c987697::7d0baabcc9dcfa2c9cc824273b7b91bad3528233::c3dc4ce4db3bad7f00020ed30a1c3b840e837bba::b6494e3588381597a206aa5d409661eb34c4fe6f::a4d5aa1adc796fe281a4d3ca8f2b9ec9e664705e::3ba3cb8663014129bad4b71d7ea6a2094c98e16e::a1266e035e0805d818007ba522476c811d06daa5::695c3acbc4099f79d860405e0615efd6e42a9e50::7c09900755231a4d91f5ccbc30e9654673274d18::339911fc69d8cfa80401e4f0680b72f7dd8ffbaa::1d7c1fac81d806d6a4621e57fa7a4c57507dba58::37dbfc1604317bcde6e7414b7197a912653893fe::cce06d65234f31cc25a7e2b53e55ca8a8917a8f0::2c2b3445d20c1c196ae1243fcabf274c95f42721::508ce893737db4cef7faf8860a053950a00b7b7c::3a0e1d001c07b5e7a37e9764999d83140da00de6::413901f27f689d53bfc1cfa9cbc758da590824a7::8653aedddd56bc0b5b31799d4eadf26ac39885f8::e3de220fa22f06d44fb7e2b3ba9f090696fbfd84::dac41b4805b90274d8fb9e8e0559c44b4bd2027e::4574af8e044b0ccecc2020483a309d4877267fe2::9fa5ea8f916cb4d1434e9657880c6aad79e48ab1::37153847e2c8c01b54e24cfbe2edc823c2d51de2::84ca0c0a15c655b971730695deb75c57dc9cb910::fcc28a79b496cfeaef643e6d7ceedd14a0aaa63d::a89634bb1f3542cbe40ab58539eb1dac3c87cfc3::291109b7de64598d99180fed6e7595e4fd7bbe49::efcc509a69d2dac80829c06966f786281fa62403::13bcc067517e55ce56d7a4817dd8bd0be0e7a54d::f254c2e02f0c8ebfc43e071727109d8be88db672::861f7a2a8926211dd126df660849e2cfef96d48e::b19fcbc3b35dfafbdae1357bd185f18026cb64d5::1b72e970621e4e77e7d8acb1c277e6d4d9c9bbba::ae8fc049842b7f049e1915f4b63caa84bb766c07::b4ff1564a6b10208bae69f4222aae4494f238321::ad5e60ad56ce724fab3d37dd5ef7764e1a7a6e13::e5dfde8b973e35035c615fee0c1f72ba8ea06b62::5180ffe3c4a0e8e99549d1e65d29f076df362b98::52e9e4c23640c2d2fd663f90397d91f918384eae::d85d093d96a96137eadb9bf731c5922cfc0ea059::e6280f555dda8116721b18eb8c7f1fc52895257f::754605da1cb8c0aafb0d0fb358d1a42900a93132::84854b171b7af0ebaabbd63bccdaddbaa1248660::
https://api.github.com/repos/JuliaLang/julia,31698,kf/varargsubtype::master,1,merged,types and dispatch::,"This is a backport from (a local version of) #31681. Turns out the same subtyping issues I addressed there exist on master, but we just tend to not see those types a whole lot. I think `UNBOUND` is computed incorrectly for subtyping's use (iirc, it was introduced for gf.c's heuristic type signature limiting), since it doesn't count number of uses. Consider `Tuple{Vararg{NTuple{N}, N} where N}`. To be conservative, just consider `jl_is_long` vs `jl_is_typevar` in this fast-path.::```suggestion @testintersect(Type{NTuple{N,E}} where E where N, Type{NTuple{N,E} where N} where E, Union{}) ```::maybe put this comment on the previous line, so be clearer that it's a comment and not deadcode?::```suggestion } else { ``` (everywhere)::What the problem with that case? If the RHS is not a vararg, then if we have a unionall here it can't possibly be a subtype.::vnpx seems like an odd (too long) mash of letters, since it appears to actually be the number of required (non-var) parameters (nfx for ""n fields/fixed of x"")::I don't know. I just don't trust this code to do any counting of TypeVar uses.::Can use `Base._va_typename` here.::(Core.Compiler.) `_va_typename`, but yes::",8c03f4b1388a6e5a4ee8c8027c9177283ca9e73d::fe7c2c29be7cc09ed993d3ca04435bda3a0a8230::be96d71b7a2e2f9ee36a9dc6c39ac16a09e3ccba::7f7159849f8b29be96b2b9e11ebbd72acd707e21::dae66972ef381771eb9a1abb79e675e23e5ecbbc::ced439c75ab07a833a7d4d5618c51b06910644f5::9f4e95ad4d2991a4126d3b15eba3b7085bcf21dc::552d056a0e58a711a846c5fe706ee1d147bc8003::55704234208d6cf5b868d37c4107820d201b4a85::f25c35e52efaa819dd89f6ad9aaec5e1b713c9d9::161aacf1ec702cf47b4e00553270f95e56d11fc6::e056490f4bf0d0a0d2d63053652d96577b0da44e::a3db5f6a4fb8291977fb7df1f50caacdd7f84f00::
https://api.github.com/repos/JuliaLang/julia,31691,tb/temp_mdnode::release-1.1,1,merged,bugfix::codegen::,"This has been fixed on master, but might be interesting to backport to 1.1 or even 1.0 depending on our plans for those branches. Fixes debug code emission with CUDAnative.jl, but the underlying problem is significant. Fixes https://github.com/JuliaGPU/CUDAnative.jl/issues/344```suggestion TempMDTuple temp_n = MDNode::getTemporary(Lh->getContext(), None); ```::Sure, I wanted to keep the diff minimal but that's better.::This does not seem equivalent. I reverted the change.::",0afa9a3acc0c57d71d719d204d19478fc885d5ea::
https://api.github.com/repos/JuliaLang/julia,31670,jn/31666::master,1,merged,backport 1.0::bugfix::inference::,"fix #31666 and add some tests for nothrow computationIs `exact` enough here? What about types that are `==`, but not `===`?::for `Const` I mean. I do agree that we can at least say `Type{ft}` with this condition.::This is overly conservative --- for example `fieldtype(Union{Int,Tuple{Any}}, 1)` doesn't throw.::Ah, OK, I need to start propagating the ""exact"" flag from instanceof_tfunc then::Good point. I think `Const` is actually almost always the wrong answer here::",1c831fc5cd3147670562bc94158e748a8b6df41c::0961751df27b31055bef587fbca47c48bc575caf::
https://api.github.com/repos/JuliaLang/julia,31615,sgj/parseinf::master,1,merged,bugfix::complex::,"I noticed that the parsing code in #24713 was getting confused by the `i` in `""inf""` when parsing a purely real infinity.  This PR fixes that and adds some more tests for floating-point values. Probably could be backported?",65f94b35e37ec6dc268bcdc4fbabecef0c14ce45::c36e70b2ac257379669bd946e2cceb9a3ccbe095::
https://api.github.com/repos/JuliaLang/julia,31585,jn/31583::master,1,merged,backport 1.0::bugfix::,"Note that String is pretty much the only case we have where `==` is actually faster than `===`. We could perhaps consider importing the code for `==` into codegen, if we consider that to be an important consideration.",318e1874ba2220c93b8e9faa135fc6f93623c6f8::bd6964830a8449e77bd2a0ab4b42beff1ea601b4::
https://api.github.com/repos/JuliaLang/julia,31533,vc/cfg_simplify::master,1,merged,,"This backports the CFG simplifaction backend from the XLA backend. It is not used by the pipeline, XLA and tools Cthulhu.jl want to use it to present simpler IR to either humans or subsequent passes.@Keno should this assert be re-enabled?::It'd probably be correct to require this to be zero in both rename arrays, but I'm not entirely sure.::used Typed comprehension to avoid potential performance issues from making a closure::",f62a4b3f948f0559c6212b935ed5688abe2f8a8a::
https://api.github.com/repos/JuliaLang/julia,31531,vc/snca_worklist::master,1,merged,,"Backend's that perform aggressive inlining (e.g TPU/GPU) can produce larger functions than normal Julia, which sometimes can trigger a stack-overflow in domtree construction. As an example see https://github.com/vchuravy/GPUifyLoops.jl/issues/46#issue-426696489 This backports a commit from kf/tpu3 which switches from a recursive function to a worklist. The assoicated test-case fails on master, but finishes with these changes.```suggestion ```::```suggestion snca_compress!(state, ancestors, u, last_linked) ```::",dbc30ffac5e7faf98986763ab1715f4ce4c7bac6::413109323b2a54b661f62549d0f9aec8e7faeb1d::bdba237381c0621df61bb4aba838891667b59085::
https://api.github.com/repos/JuliaLang/julia,31464,kf/memcpyrt::master,1,merged,backport 1.0::,"POSIX specifies that memcpy returns its first argument, which is a bit of a useless feature (e.g. the llvm intrinsic just returns `void`). Nevertheless, since we're intercepting the ccall here, we should allow it. For convenience, still allow the Cvoid return though. Fixes #31073",7ca4bc5574e821ce2b33c411cb1c8fe1eb781d5b::
https://api.github.com/repos/JuliaLang/julia,31446,amitm/31252::master,1,merged,backport 1.0::bugfix::parallel::,Fixes issue #31252 .,fb17eeb2c2174b6effde34e1513e1536bf353f57::
https://api.github.com/repos/JuliaLang/julia,31443,dk/fix_mul!_diag::master,0,merged,bugfix::linear algebra::,"* there is no `*mul!` with vectors * ~~order of multiplication~~ * removed todo note, since that has been resolved alreadyDoes this change the behavior? Was this previously non-recursive?::For `Number` eltypes this does not change behaviour, since `transpose` doesn't do anything to them. For block matrices, this is a bugfix. It makes this `Transpose` line consistent with the `Adjoint` line 552 above. Both these are now also covered by tests, testing `Complex` numbers (where the adjoint boils down to conjugation on the element level) and 2x2 matrices (where both `adjoint` and `transpose` have an effect).::Here's why I call this a bugfix and think it's worthy of a backport: ```julia julia> A = reshape([[1 2; 3 4], zeros(Int,2,2), zeros(Int, 2, 2), [5 6; 7 8]], 2, 2) 2×2 Array{Array{Int64,2},2}: [1 2; 3 4]  [0 0; 0 0] [0 0; 0 0]  [5 6; 7 8] julia> adjoint(1:2) * A 1×2 Adjoint{Adjoint{Int64,Array{Int64,2}},Array{Array{Int64,2},1}}: [1 2; 3 4]  [10 12; 14 16] julia> transpose(1:2) * A 1×2 Transpose{Transpose{Int64,Array{Int64,2}},Array{Array{Int64,2},1}}: [1 2; 3 4]  [10 12; 14 16] julia> adjoint(1:2) * Diagonal(A) 1×2 Adjoint{Adjoint{Int64,Array{Int64,2}},Array{Array{Int64,2},1}}: [1 2; 3 4]  [10 12; 14 16] julia> transpose(1:2) * Diagonal(A) 1×2 Transpose{Transpose{Int64,Array{Int64,2}},Array{Array{Int64,2},1}}: [1 3; 2 4]  [10 14; 12 16] ```::`permutedims` here will allocate a new array since it is not lazy like `transpose`, right? Can that be avoided?::Ah, good point. The typical answer would be `PermutedDimsArray`, but it doesn't support permuting non-existent dimensions.  I think a `reshape(D.diag, 1, :)` is the easiest solution.::AFAICT, `permutedims(::AbstractVector)` does exactly that (that's also what the docstring says): https://github.com/JuliaLang/julia/blob/d60503a00edfa19d6b13f8aba8ff3e0e4cdf9ae0/base/permuteddimsarray.jl#L178 It's the more generic `AbstractArray` method that allocates. And `D.diag` is guaranteed to be an `AbstractVector` by the `Diagonal{T,V}` parameter.::",ca1b5551aee65587732e2780e27f7c5d4178f006::a7b7a6e02b6e2938051eed61d39f1d56263b660c::5d1bcc827be6a4122e9112c03984191903e6922b::fc1f32b4d7472781ba1101dc1c39e613437a6df4::2fcfd2ea108c350cf5851a59b2e9383c7c9fa04d::562412e7fb03ca9b4fd009c6fd27575703728c3f::e215f891df04885b67e17d1ab126ddb43a04cbe9::
https://api.github.com/repos/JuliaLang/julia,31405,jn/typeof-tfunc::master,1,merged,backport 1.0::bugfix::,,3fe9c99a98e779e0df4b4fedd3f9401950aa3b6b::
https://api.github.com/repos/JuliaLang/julia,31290,maxprobefix::master,0,merged,,"Maxprobe is the maximal actual offset between hashindex and actual index. When we rehash for other reasons than overfull, then not resetting `maxprobe` defies the point. This is in principle superseded by [https://github.com/JuliaLang/julia/pull/31291](https://github.com/JuliaLang/julia/pull/31291), but here stand-alone and ready for backport (since this is arguably unintendend / a bug).",8ec112c0c84b2c2fd73cb789580c686f80179e3d::d89804796943765119e63f07e964a70ca57a2443::
https://api.github.com/repos/JuliaLang/julia,31187,mh/fix_sparse_unary::master,1,merged,bugfix::sparse::,"Ref. https://github.com/JuliaLang/julia/issues/30662#issuecomment-467436621. I chose to keep the extra elements in `nzval`, just not apply `-` or `conj` to them, respectively. This should be minimally invasive and hence safe for backporting. In the future, we might consider instead dropping extra entries in these functions.There is a `nzvalview` function you can use.::",4ba892ac0a11c602ca855a8869aa7f4bee4d20c8::
https://api.github.com/repos/JuliaLang/julia,31064,kf/31062::master,1,merged,backport 1.0::bugfix::,"jl_concrete_subtype was recursing into the vararg element of a tuple, which I don't think is correct (because it could be zero-length and thus be constructible even if the element type is not). Fix that and as a bonus get we are now able to get rid of the previous condition that (accidentally) special cased tuples to have that behavior. Fixes #31062",abd48cd675b8a1951e4133c5949f88030458b2ef::
https://api.github.com/repos/JuliaLang/julia,31061,fix_atanh::master,0,merged,backport 1.0::bugfix::maths::,"In the case that x==-1, we have to flip the sign of ξ. Fixes the problem noticed in #31054. Update: The current Julia implementation was mistranscribed from the reference: The multiplication with the sign of x is missing (see [#31061 (comment)](https://github.com/JuliaLang/julia/pull/31061#issuecomment-463653341)). This PR currently adds that multiplication, fixing both the original sign issue and the problems (DomainError) near `z=-1+0im`.```suggestion ξ = copysign(log(sqrt(sqrt(4+y*y))/sqrt(ym)), x) ```::Test all four combinations?: ```suggestion @test tanh(atanh(complex(1.0,1.0))) == complex(1.0,1.0) @test tanh(atanh(complex(1.0,-1.0))) == complex(1.0,-1.0) @test tanh(atanh(complex(-1.0,1.0))) == complex(-1.0,1.0) @test tanh(atanh(complex(-1.0,-1.0))) == complex(-1.0,-1.0) ```::one(T)?::",c445183d0d6a16ad0c17df835a72a424db4a9c80::d987fed2a821e4847fe55eba10c8893afb8e753a::b30bf57782b1c823cd035340ef25af824c9d3209::a2f09987e06a9abb43cd4be68d8c002a80609c21::2149a68f95cb366335dee882cb2a7ffb9b53ae9b::aa1c3489b2fbbcbe7d1c056bdf7147b2d61059c7::e3598fef26f2c37ee3e54fe899dcdebceb130e90::f8eacdb94d4033fe0baf2b0f0c015cced51b9dd1::f9cef28305352a33b32b8a4f6c02b156ed16c473::e4f0326b2621f0051fbf96b1469cf558b89e8acc::
https://api.github.com/repos/JuliaLang/julia,31039,backport-1.1.1::release-1.1,1,merged,release::,"Backported PRs: - [x] #30554 - llvm: fix target triple - [x] #30564 - fix `lambda-optimize-vars!` with complex assignment RHSs - [x] #30600 - fix typo in string search api docs - [x] #30644 - fix #30643, correctly propagate iterator traits through Stateful - [x] #30655 - SHA,tests: cleanup tempdir - [x] #30697 - some documentation improvements - [x] #30689 - improve docstring of SparseMatrixCSC - [x] #30678 - fix typo in devdocs/sysimg.md - [x] #30717 - Singleton Types H4 -> H3 - [x] #30716 - fix #30499, document behavior of `return` at top level - [x] #30747 - fix #28647, add doc string for `Symbol` - [x] #30745 - Add kw_str for = - [x] #30754 - Handle :error and :invalid expressions gracefully in REPL helpmode - [x] #30761 - Fix RemoteChannel example in parallel-computing.md - [x] #30798 - fix #30792, static param constraints between positional and kw args - [x] #30804 - fix `at-everywhere using` in Distributed stdlib - [x] #30821 - Fix signature of git_libgit2_opts - [x] #30736 - Document indexing by different numbers of indices - [x] #30884 - isapprox() doc mentioned deprecated 'vecnorm' - [x] #30895 - Fallback for copying views into sparse matrices - [x] #30930 - fix #30911, bug in `deepcopy` of `UnionAll` - [x] #30880 - fix #30679, call correct method for `invoke` calls in `jl_invoke` fallback - [x] #31047 - fix #29936, precompile should not assume UnionAlls have stable addresses - [x] #31041 - bump MPFR to 4.0.2 - [x] #30398 - Fix enumerate documentation - [x] #31312 - allow chop to take an empty string - [x] #30296 - Fix 29545: Implement unaliascopy for ReinterpretArray - [x] #31258 - fix undef var in conversion in rounding modes in MPFR - [x] #30569 - Improve REPL completions - [x] #31642 - Fix show_vector for long offset arrays with :limit=true - [x] #31187 - Fix `-`, `conj`, and `conj!` for sparse matrices with invalid entries  in `nzval` - [x] #31615 - fix parse(ComplexF64, ""inf"") - [x] #31443 - minor fixes in multiplication with Diagonals - [x] #31029 - Update Mozilla CA certificate store to latest (01-23-2019) for libgit2 SSL. - [x] #31405 - inference: fix typeof-tfunc impl - [x] #31699 - fix #31418, don't Const-prop unitialized structs Non-merged PRs with backport label: - [ ] #31464 - Accept both Cvoid and Ptr{Void} return type in ccall(:memcpy) - [ ] #31064 - Fix accidental recursion in jl_concrete_subtype - [ ] #30357 - workaround for F_DUPFD_CLOEXEC on Linux kernel <2.6.24 before it existed",ccc4dde63680510200905c5cb4fa3c8bfc72287f::b087c5c900115dafcde688ab13a29f6d001e6864::93f8202304a45c3112dea830df85e1eebee69555::a22e16119da1b82830ceef4df3b5f501a9bc01b5::a38494d3ab612fde4c616fa0b2f75628f7ae4094::3207490aa1d634f1a31b7c0ffbd0d06eb489028e::a7f50dc039fc951a90a77084babee121ac72a901::475fe22230d0393cd574255374cc03767696d130::6bc6e9ad8b9611947db6b1c5a8c26c70e20bca63::21617e899139f7a0a68557c44dcd15d3b2497846::75f441793b774d74a9b6855f12651b1fbc398b73::9a8f5d9ba68e7040e01fcb4cacca0051dad4264f::4728b66b433f586e873ee8f5d8ee0a84c9161f72::d309c4b60e2bf3502f5dfca563e6391e175eb99b::8d8b0f2682c6a9f88dbdbf52ff7cbf7a18b29973::ac67169bf738582628365a264b6fe42e882bbc91::f11d75357be1087238e1ed8b6e4f297372303572::cee72823eb69bb0a11d24441e1e181df6da0d46a::80512003455eed284fc56e000c33ca34421a1b69::2fcf9872f663e1594bc8895663afa30216672d98::1f87b5e68fcae1ea11b74a1483ef5edb9bb3471b::8f1b9d36d8c7244c7f899533afb82516b886548d::294bdd774b85336da5df2f65f96e6fe1a17f937c::e53719904ccf2c3d99331b060c29b85a42ce7f30::6e7a4c854b2de1c6db1596fb8db0a03a8cfee397::97d86aa0e44e5ba9db30db0ae44802219d93eaab::14eb3f18f5e5f784540c7cde949fc223ab5510c9::2f93b5eaa316234b32ce6736f5219122085875d7::ef16e8ef2f770e76337335e302601a2008ba6e5f::4b99196425bd3477ba9504de64bdaf0c3ba4886a::349e59e06b9ef562f0de4fa66b8f2d82b53e505d::f04b2db661d02116e7202a901e0b4eae61df3dfd::ec2a819b329de992f4864e4e3868362972840aaf::3045a66053256ab2e69eb1089f2b9a1e6c84039e::5449250b3a4dd28f518441355850887817cb8ab4::53ff56c2e72bde090c9f2649096e28d58be7b319::ca789a9f96b3dde66cc05231df96644df4e0e065::bf854e112123d8e9a82bca298dbcf14c6a5ae12d::21b640b94eb1911a2f2e8bd70f641d0cfed70b8f::0bc6c5db482056478a928f67198748b1aa54126e::
https://api.github.com/repos/JuliaLang/julia,30954,backport-1.0.4::release-1.0,1,merged,release::,"Backported PRs: - [x] #30324 - Use `JL_AArch64_crc` instead of `HWCAP_CRC32` - [x] #30315 - fix bug with max_values in union! - [x] #30376 - Fix reinterpret for 0-dimensional arrays - [x] #30369 - stacktrace: prevent OOB-error in sysimage lookup - [x] #30405 - Fix #30006, getindex accessing fields that might not exist - [x] #30396 - fix #30394, an unsoundness in ml_matches - [x] #30319 - generalize sparse matrix slicing to integer types - [x] #30425 - Add custom deserialize method for UmfpackLU to avoid memory leak - [x] #30564 - fix `lambda-optimize-vars!` with complex assignment RHSs - [x] #30576 - Avoid having a singular matrix in deserialization test for umfpack - [x] #30598 - Fix use counts for mutable struct SROA - [x] #30655 - SHA,tests: cleanup tempdir - [x] #30754 - Handle :error and :invalid expressions gracefully in REPL helpmode - [x] #30773 - update macOS icons to be less transparent - [x] #30798 - fix #30792, static param constraints between positional and kw args - [x] #30804 - fix `at-everywhere using` in Distributed stdlib - [x] #30930 - fix #30911, bug in `deepcopy` of `UnionAll` - [x] #31047 - fix #29936, precompile should not assume UnionAlls have stable addresses - [x] #31041 - bump MPFR to 4.0.2 - [x] #31312 - allow chop to take an empty string - [x] #30296 - Fix 29545: Implement unaliascopy for ReinterpretArray - [x] #31586 - build: LDFLAGS needed for FreeBSD build - [x] #30569 - Improve REPL completions - [x] #31642 - Fix show_vector for long offset arrays with :limit=true - [x] #31691 - Don't modify existing MDNodes in SIMDloop pass. - [x] #30554 - llvm: fix target triple - [x] #30599 - Use XCode 8.3 for macOS on Travis - [x] #31745 - Upgrade libssh2 to v1.8.2 - [x] #31615 - fix parse(ComplexF64, ""inf"") - [x] #31443 - minor fixes in multiplication with Diagonals - [x] #31763 - fix #31758: out of bounds write in sparse broadcast - [x] #31187 - Fix `-`, `conj`, and `conj!` for sparse matrices with invalid entries  in `nzval` - [x] #31029 - Update Mozilla CA certificate store to latest (01-23-2019) for libgit2 SSL. - [x] #31405 - inference: fix typeof-tfunc impl - [x] #30880 - fix #30679, call correct method for `invoke` calls in `jl_invoke` fallback Non-merged PRs with backport label: - [ ] #31464 - Accept both Cvoid and Ptr{Void} return type in ccall(:memcpy) - [ ] #31064 - Fix accidental recursion in jl_concrete_subtype - [ ] #30431 - Build: fix output directory when specified with O= - [ ] #30357 - workaround for F_DUPFD_CLOEXEC on Linux kernel <2.6.24 before it existed",97add1c3d519e4bec8cd22bf296710930bb46ccd::9d63c0f23c9f978c7f2e79212016dcd2b598f2cf::7e8d9b2c347a1f15662e0997a817b2fafe884f28::0073e42fbcef6bbb4bfde72dfcd93917de8b6f5e::4148b76322977e185233d5c3b4b353ee06d1e2c5::bca2f420ad3a1331622a44872fd8f4b5fa96a366::7786f7856c6eb3b1b986208d5b3dbe13fd4b8bff::2dc20f78af2bb5137087855d01188ffaa389bf3a::b6b74132a8c311be54c7d0ee2ccf03fd29cb5451::083bc82ce33baffbbcbce9c1eb22562046cd9cc1::48f6ea7b2d33589cbdddcedb5b4bb4b3c216018c::f9dddf847083738703a09f2de87955321e31588b::f24bf8b4711bada49ce53ce2635d214a433d47be::ceccebd99b64b0b1472dc2eb36cc9b6b7f0506f1::347bca30d9e8b1c717ec7e2f77da1a9514e0c217::af03147f5d4f7476ed127c3619b0f01882a657c8::92ecdfdbbccff971be8e1996406adbc636654df6::63414f7038b11a8316c5e8b9b84e46de9d774304::fd1f1876097eba651e786275561ffd9078f00082::8ec20f467a2db7efa34cc63f5440301ce2d55bf9::54a71f6e2b8f152f023936372d1dba4b0251e82f::2cb487a5f319407bd564c82c93fce06ba58a218e::0b651e0b7708ac0ba4c48b26b5f7609032731f67::65a22aa428cc75a8f768b789be684bd97ee33e54::fc773de17a9e982b9f0d64ad6a13898d890e313b::a8758c48ef20da1501e52dfc1ec9c55c5c3176a6::ce6b3cb3d26b69cf017bbbd9ed1cdb14c594abb1::9072796d618be118efa38c4ede54c4375263d9d8::707fdda67e87a3498e4440c5d9e055311747461f::5313c54faea44f33c10d308d76d97ecc8ceaa088::ec0cf975711160e36b88beeec834e2dc5203c67b::7fb55412bb3133be0f9c2b77c55213d1ee37f656::1d7087db99e86036674a087bdf2cf21d80e97cf7::07279a357d2aef44c63ccf00cf360e38c920179e::a92bfbed6b29c826cbd3c0e12c46af9bb353ab9d::639de07d4307cb7785b8fb2fcfb08e7e1b926298::fa220625b77d0ca7492b94ee901831299d82f7fe::11b8f5991afc81c123d21d8b9ec115dd321ebea7::c1e182432708049cfc7a8588bf43e8c6d5d45c6c::ef22206b0a4b811d247879a28ffccede2bcd1ffa::e5de4590bf35ced32c45d207e0bca9e2b3faebbd::
https://api.github.com/repos/JuliaLang/julia,30952,ranges::master,0,merged,backport 1.0::,"This pull request adds a fallback for the creation of a range (using the `range` function) where `start` and `step` promote to an `AbstractFloat` that is not one of `Float16`, `Float32` or `Float64`. See  the explanation in #30944: the IEEE types are caught in `twiceprecision.jl`, but other floating point types are never caught leading to a stack overflow. I've added tests that would trigger a stack overflow without the fix, and which also test the promotion of `start` and `step` to a joined type (which seems like it wasn't tested before). I'm not sure about these tests, and in fact not about the fix either: the code in `range.jl` looks like it carefully sidesteps many issues I'm not aware of, so I may well have missed something... Since a promotion rule is present in the code, but the fallback isn't, it seems that it was at least at one point intended.",e3d1d1b6d60050f852f676705e8018e040fea60c::
https://api.github.com/repos/JuliaLang/julia,30929,sb/empty-matrix-repr::master,1,merged,backport 1.0::display and printing::,fixes #30927.,5c1f7406be4fb783599b55609920e680972eb18d::
https://api.github.com/repos/JuliaLang/julia,30918,jb/stringreprdoc::master,1,merged,backport 1.0::doc::,,14d08a67dfee752a2e778b214771a294058ebdad::
https://api.github.com/repos/JuliaLang/julia,30895,mkb/copy_subarray_backport::master,0,merged,performance::sparse::,"This is a more specialized version of https://github.com/JuliaLang/julia/pull/30889, requested for backporting.",83dcac78ae70a95a501ecb75b099d434c1373c9c::1509be0a7eb7dd46baa76a15ed3ddd785044cdfd::3c70fc634622d515fa49d49c1f5447b7789f5bef::a8197c8afa598db64876c78b553aab6877fe2b77::
https://api.github.com/repos/JuliaLang/julia,30787,teh/fix_tfunc::master,1,merged,inference::,"While working on an interpreter (https://github.com/JuliaDebug/ASTInterpreter2.jl/pull/37) I noticed that `fptoui` and `fptosi` only support the 2-argument form: ```julia julia> f(x) = Base.fptoui(x) f (generic function with 1 method) julia> f(3.0) ERROR: error compiling f: intrinsic #55 fptoui: wrong number of arguments Stacktrace: [1] top-level scope at REPL[2]:1 ``` However, the 1-argument form is still present in inference's `tfunc` tables. I'm going to mark this for backporting since that behavior seems present even on 0.7. But this is very low priority, I am not aware of anything other than https://github.com/JuliaDebug/ASTInterpreter2.jl/pull/37 that needs this (and there I have a workaround).",e33b8d196085995faf94baf7eebb8f673d104c78::
https://api.github.com/repos/JuliaLang/julia,30700,jb/fix30633::master,1,merged,backport 1.0::display and printing::error handling::,,6f7993137808602291e5066e0800d190daba2dcb::
https://api.github.com/repos/JuliaLang/julia,30665,patch-24::master,0,closed,,"This is kind of my first Julia PR (my other PRs have only been very trivial), and I'm not sure if this function is used much (I was looking into the more general issue); and if the 22% faster speed is important enough to backport to 1.1 and even 1.0.4 but as the change is a small one feel free. Before, factorial had a call and three checks/taken assembly branches (at least on 0.5 where I was first testing on) before looking up in the table, and now only one not-taken branch and no call and on the fast path (on 1.2 at least, more on 0.5): ``` julia> @code_native factorial_lookup(3, _fact_table64, 34) .text ; ┌ @ REPL[200]:2 within `factorial_lookup' pushq	%rax cmpq	$16, %rdi jae	L16 ; │ @ REPL[200]:5 within `factorial_lookup' ; │┌ @ array.jl:728 within `getindex' movq	(%rsi), %rax movq	(%rax,%rdi,8), %rax ; │└ ; │ @ REPL[200]:6 within `factorial_lookup' popq	%rcx retq ; │ @ REPL[200]:3 within `factorial_lookup' L16: movabsq	$julia_factorial_lookup_helper_12541, %rax callq	*%rax popq	%rcx retq nop ; └ ``` So I achieved my objective, <s>*should* be faster, didn't time,</s> maybe this doesn't matter much, but with *cumprod* the table generation is also simpler and backportable to 0.5 (undef blocked that before). I didn't count bytes for the generated machine code (is there away; from Julia?) and since it's inlined, it may matter? Rest is stuff that doesn't need reading, just want to make sure BigInt (and BigFloat still works) and also that assemly of non-common types are also ok: I did have: factorial(n::BigInt) = factorial_lookup_helper(n, _fact_table128, 34) originally in the PR, to bypass the inlining. It turned out to be not needed it seems and wrong to have it in anyway. julia> factorial(BigInt(34)) 295232799039604140847618609643520000000 It seems this is all backportable to 1.0 (and even to 0.5; while assembly is not as tight there, but still better) while I got this different error on 0.5 compared to 1.2 for the old outdated code: julia> factorial(BigInt(35)) ERROR: MethodError: Cannot `convert` an object of type String to an object of type OverflowError This may have arisen from a call to the constructor OverflowError(...), since type constructors fall back to convert methods. in factorial_lookup_helper(::BigInt, ::Array{UInt128,1}, ::Int64) at ./REPL[3]:3 in factorial(::BigInt) at ./REPL[13]:1 I was also toying with a fast-path for BigInt, seem not needed: ``` @noinline function factorial_lookup(n::BigInt, table, lim) if 0 <= n < 32 @inbounds f = table[n+1] return oftype(n, f) else return factorial_lookup_helper(n, table, lim) end end ```",3d55a81c5ed085c2ea5a5b0b59d1bd7b0487049c::88ef680d60fc61252489ef81032e7d153eeb7c6a::f328a2a737ebf45b69b5420c6246a5592b57e080::
https://api.github.com/repos/JuliaLang/julia,30650,jr/backport-1.0.4::backport-1.0.4,1,closed,,Had to do a bit of git sleuthing to find some previous changes that #30385 depended on that hadn't yet been backported. I'm opening this PR against `backport-1.0.4` instead of committing directly to that branch just to make sure I don't screw anything up 😛,5976159c75cb5c75b4aac11f3a7336a7f9191cfa::14a970a3612eeb3623337e9dcf0041f5d121f31b::026c3a9fd6f6c61c33bdb86a78141a515669df0e::c5e49a5169a6891bc0ffcb4aedbfd6a9b6a981bf::1e27e69b2e99dc8d713c73f549838aeb9623a3ab::ae4221f1410a4cfcf2f6e667df93c695fbf469d8::fd10828627237319700b4de025bc4eae9bd54d4a::96992869855d5fc39dcbe3243dec0885ac5b17d1::c4c6654c4bc88afad104df4d9db2296e5822adc9::c2a63dc33f70207c2426a31f515e8cf7ca7f62f7::9c3ba192550d17b4a64ced986664d0789d187355::92f8d7e9e7377664222b82f73e151ea4f92f8736::17d485b0800641c1ea5a69e638fdaac5eee961d5::
https://api.github.com/repos/JuliaLang/julia,30607,backport-1.1.0::release-1.1,1,merged,,"Backported PRs: - [x] #30483 - make inference of `_apply` match the implementation more closely - [x] #30470 - use type inference world in `return_type` - [x] #30599 - Use XCode 8.3 for macOS on Travis - [x] #30598 - Fix use counts for mutable struct SROA - [x] #30566 - some latency hacks - [x] #30601 - Fix #29983 - [x] #30666 - Force specialization of the SubArray boundserror method. - [x] #30497 - Add BB downloading for OpenBLAS - [x] #30535 - Fix `bb-install` naming conventions, add hashes Need manual backport: - [ ] #30560 - Remove duplicate NEWS entry Non-merged PRs with backport label: - [ ] #30431 - Build: fix output directory when specified with O= - [ ] #30403 - Include @​propagate_inbounds docstring in documentation - [ ] #30398 - Fix enumerate documentation - [ ] #30367 - move generate_precompile to Base so that it is bundled in downloads - [ ] #30357 - workaround for F_DUPFD_CLOEXEC on Linux kernel <2.6.24 before it existedI think you still need to create the `build-configured` file though; so just remove the `perl` invocation::Alright,  thanks.::",41c0c2f42d8beb8d1e893a4bfb21d0cfae8b9b07::879f7c23ac53d168f7bf13f62f2542f65b783b5c::d8e69b84273dfa7765c2f64f38a43dd3d6437149::91fe9c3059e1c1a46a4e50c985af76c7c4f005e5::bf0e21237083ebf3fcf8cf1b14b92c49024b6575::2f8fb89f065dd6b1dd4d268fc15b667ebf7dd0cb::cec7e7bc616b7c2816cf26982f3b8a6cc57a596a::17f29780d8d08dd8ae20a441d847e50965a94b0a::1a2134d87d135f23a17a3fe3a090951d8b7d4bd8::a5f63ff816598bb0fc0d4923f2146d65047f4b2e::05a8951398d94708e3f4b6917da3dca5b2383eb2::
https://api.github.com/repos/JuliaLang/julia,30536,backport-1.0.4::release-1.0,1,closed,DO NOT MERGE::,"Backported PRs: - [x] #30120 - Fix method ambiguities in SparseArrays - [x] #30164 - Use only safe axis types for Broadcast.combine_axes - [x] #30304 - fix #30303, escaping $ when showing Symbols - [x] #30324 - Use `JL_AArch64_crc` instead of `HWCAP_CRC32` - [x] #30156 - `@inbounds` annotations for filter - [x] #30340 - Expand and fix documentation of BitArray - [x] #30339 - Documenter updates for future pdf deployment - [x] #30315 - fix bug with max_values in union! - [x] #30331 - Force specialization on the type argument of `_similar_for` - [x] #30347 - added doc for AbstractChannel - [x] #30330 - Copying editing in ""Environment variables"" docs - [x] #30163 - [SparseArrays] Respect order of mul in (l)mul!(::Diagonal,::Sparse) - [x] #30376 - Fix reinterpret for 0-dimensional arrays - [x] #30369 - stacktrace: prevent OOB-error in sysimage lookup - [x] #30415 - Fix #20409: rank for sparse matrices. - [x] #30405 - Fix #30006, getindex accessing fields that might not exist - [x] #30416 - Fixed sparse cholesky to return Vector - [x] #30372 - spmatmul sparse matrix multiplication - performance improvements - [x] #30396 - fix #30394, an unsoundness in ml_matches - [x] #30319 - generalize sparse matrix slicing to integer types - [x] #30439 - Fix mention of Base.worker_timeout() in manual - [x] #30507 - Use _setindex! to fix DimensionMismatch in sparse assignment, Fixes #28963 - [x] #30516 - Fixed sprand for dimensions of unusual integer type - [x] #30471 - faster mapfoldl for tuples - [x] #30172 - cluster manager fixes - [x] #30425 - Add custom deserialize method for UmfpackLU to avoid memory leak - [x] #30480 - Fix performance of broadcast and collect with Union{T, Missing} - [x] #30458 - gf: fix jl_isa_compileable_sig again - [x] #30564 - fix `lambda-optimize-vars!` with complex assignment RHSs - [x] #30576 - Avoid having a singular matrix in deserialization test for umfpack - [x] #30599 - Use XCode 8.3 for macOS on Travis - [x] #30600 - fix typo in string search api docs - [x] #30615 - Ensure to call jl_islayout_inline() even in the case @aasert is deactivated - [x] #30317 - faster circshift! for SparseMatrixCSC - [x] #30644 - fix #30643, correctly propagate iterator traits through Stateful - [x] #30601 - Fix #29983 - [x] #30682 - string doc clarifications - [x] #30554 - llvm: fix target triple - [x] #30598 - Fix use counts for mutable struct SROA Need manual backport: - [ ] #30098 - inference: add missing limit-cycle poisoning - [ ] #30251 - codegen,coverage: handle inlining info - [ ] #30385 - attempt to refine return type when it could be improved via PartialTuple - [ ] #30483 - make inference of `_apply` match the implementation more closely - [ ] #30470 - use type inference world in `return_type` Contains multiple commits, manual intervention needed: - [ ] #30497 - Add BB downloading for OpenBLAS - [ ] #30535 - Fix `bb-install` naming conventions, add hashes Non-merged PRs with backport label: - [ ] #30622 - Dev-doc updates for the SSAIR section - [ ] #30569 - Improve REPL completions - [ ] #30431 - Build: fix output directory when specified with O= - [ ] #30403 - Include @​propagate_inbounds docstring in documentation - [ ] #30398 - Fix enumerate documentation - [ ] #30357 - workaround for F_DUPFD_CLOEXEC on Linux kernel <2.6.24 before it existed - [ ] #30296 - Fix 29545: Implement unaliascopy for ReinterpretArray",160054e33c386c3da391eeb41ccf9227b6c5b46d::d9a35922540d428ad7ba36f71fc97787c0b81711::7df523a581886e888d49d9e1b15e8bbe2cd919fd::52bf7b923db2496c64cf145c57ae87be9f65ad74::2cadff30d6bf47b658b6b0802d0ad8023d45652e::e7187f6d0fc8b935482851b5a73444ca27298537::f4cd4030080fb64b824993fd2b34171464ceadc3::e2aebba4c4bb047b2d1eb781d33a0fc357623f52::43d99bb846b812a13c55ba63f72a5a75f44ea00c::43d1d9c94e1f00a02e8cbeb031ad5f65c3149d30::96f82b508a1dec7e9b86464268f8d91c4476e290::33f48cdb1637762257dcbef3cf480daf5b04a6d1::0ab6919c327de2a8de8cdef24d465f7fa0db99d8::3c9592d1917d19db0dc79c6339b7cb4418de4cac::834503f69cba4363e91cfc675e6052869fd1b01b::ded25d37be2c18f98b81be2ab726923359d5970d::0195be052975b85a988692e5801fbf052b5db58c::2d1c9259f76324429b527ef2a2f0d8092bf0e000::aede02488b04d24d70e69c1616e7edfe43f2ad6f::e4a7db2680171f113381742c8252e0b7cb83d662::fb28ab4162c185c445cac02657d88c13561bb196::7a7f552e902cba4bfafc4caf47cf1ccabd5e0031::e3af2c12e943cf85bd92ae15259f270f80a8c0e0::7d63456fb3b3b5061b01cf91f0aa56bf3ee671d7::8c2ef2571d4fe975e1b831c7005be6e186f0e635::7542c72da25199f3cbf075b62ea05d7110cd4579::bb23a90ae951ab55c94befcf93d8768350e61c55::7bbc99ab5ac989c9b3cc88bc5937c4f7f2716f22::0bd12d026620764157dc304e8c8782d751eaa344::d7ad4bd05ff33766cd3564b50204f812502a1079::dc6994dd1ac083174db98563dfaf08320eaac3fd::90ba684520ae8f9bb1b556eec242ce450d1c06fa::d839fe0bb9e92bdd05864a18cd171098e845d791::8ee59bc3430de10b86a5c5ce0e2d553be0bc90d0::543cf244caa3baa8fa0924d2067b83d119dc1d11::ba9d9814a2749c8a19d63290669168b873c8aab9::28ca40c352de6baae3dd0c57d4b073453c19ea76::cb77cc335db739c1ec394d5e8f8e9a1f4a43d24b::bac93503b16bfaa6b2de82f9b281f4391c6ac211::da5d637adc93d98ba7078165e97ad545b030abef::f487cf33d519b1debb07bd6fff553e1a3be5e6db::
https://api.github.com/repos/JuliaLang/julia,30485,nl/inference::master,1,merged,broadcast::forgetmenot::minor change::missing data::needs news::performance::,"Inference is not able to detect the element type automatically, but we can do it manually since we know `promote_typejoin` is used for widening. Fixes #28382. The same changes should be applied to `map`.This is probably very wrong and @vtjnash will find lots of issues with this, but at least it should get the ball rolling.::This is a *minor change* which I think can be considered as a bug fix, in the sense that before this PR the element type when the input is empty will never be observed when the array isn't empty (we can only ever observe `Int`, `Bool` or `Integer`). I could change the PR to preserve the existing behavior if we want (e.g. for backports).::Oh that's interesting.  Yeah, here's the current behaviors: ``` julia> eltype(broadcast(f17314, Int[])) Union{Bool, Int64} julia> eltype(broadcast(f17314, Int[1])) Int64 julia> eltype(broadcast(f17314, Int[-1])) Bool julia> eltype(broadcast(f17314, Int[1,-1])) Integer ``` The reason for using inference here in the first place is to preserve the performance in the non-empty case.  Adding a _fourth_ possible return type defeats such a purpose, so I'm in support of this change.::Exactly - we either need to change the last to match the first, or the first to match the last. This PR seems the least breaking, and suitable for v1.x. If we ever wanted to consider the other way around maybe that should be a v2.0 change?::I can at least offer that this function doesn't seem to contain anything that has bitten me before.::To follow that up, if anyone overloads `_promote_typejoin` (they might if they want to introduce a `Nothing` or `Missing` style of type that naturally forms a `Union` with other types - otherwise we have to consider these two as ""blessed"" types) or `typejoin` (they shouldn't do this) then you may get in trouble here.::@vtjnash Bump. I need your input to make progress on this.::`promote_typejoin` is designed to be not-pure, so this is invalid::Yes, but what would be a correct approach? :-)::OK, I think I've found a correct approach: since `promote_typejoin` doesn't apply recursively inside tuples, we can split the part operation on tuple types into a separate method which is `@pure` since it only calls `typejoin`, and a non-pure part which is correctly inferred even without `@pure`.::```suggestion c[i] = i == lf && Core.Compiler.isvarargtype(pi) ? Vararg{ci, N} : ci ``` The Vararg parameter needs to be extracted from `pi` also::```suggestion lf = lr ``` (`full_va_len` has no applicability here, since it's the number of fields, but you want to iterate over `p`)::```suggestion @pure function typejoin_union_tuple(T::Type) p = (unwrap_unionall(T)::DataType).parameters ``` (accessing `.parameters` of `Type{T}` is always bad practice, since the `typeof` isn't stable)::all branches should have the same `return` structure (all or none)::```suggestion # The typeassert gives inference a helping hand on the element type and dimensionality # (work-around for #28382) return copyto_nonleaf!(dest, bc′, iter, state, 1)::(dest isa AbstractArray ? AbstractArray{<:ElType, ndims(dest)} : Any) ```::```suggestion p = (Base.unwrap_unionall(T)::DataType).parameters ```::but might also be a `::Union` (for which both elements are Tuple), since `promote_typejoin_union` doesn't handle this case (of UnionAll wrappers)::```suggestion @pure function typejoin_union_tuple(T::Type) ``` Don't force the compiler to specialize methods (and it's more concise to write)::```suggestion N = (Base.unwrap_unionall(pi)::DataType).parameters[2] ```::Sorry, not sure what I need to change here. :-)::The type-assert—it's either a Union or DataType here::Got it. I've pushed a fix.::Union doesn't have a `parameters` field—you need to call typejoin_union_tuple on the separate halves::Mmm, can you suggest a change directly? I'm afraid I'm doomed to get it wrong.::```suggestion u = Base.unwrap_unionall(T) u isa Union && return typejoin( typejoin_union_tuple(rewrap_unionall(u.a, T)), typejoin_union_tuple(rewrap_unionall(u.b, T))) p = (u::DataType).parameters ```::```suggestion ci = typejoin(rewrap_unionall(U.a, T), rewrap_unionall(U.b, T)) ```::```suggestion return rewrap_unionall(Tuple{c...}, T) ```::Thanks!::```suggestion ElType′ = ElType <: Type ? Type : ElType ```::```suggestion c[i] = Base.rewrap_unionall(Vararg{ci, N}, pi) ```::@JeffBezanson is it okay that we're re-wrapping both these and the result in the same T?::Hmm, right, we've hit something like this before (#36407). For example `Tuple{T, T, Ref{T}} where T`. If you rewrap `Ref{T}` then the outer `T` loses its invariant occurrence, making the other two Ts diagonal. So this can potentially give too narrow a type.::I think `typejoin` tolerates types with free variables (at least, it calls itself recursively that way), so the fix is probably just to not call `rewrap` until the top level.::In concrete terms, what should I do? :-D::Replace this line with ``` ci = typejoin(U.a, U.b) ``` ::#39618 seems to fix these tests. @nalimilan Could that mean that this workaround might not even be needed anymore? Or does it maybe just fix this particular example?::Ah then it's great! Actually all the work I did in this PR had not effect for now due to this inference failure (a regression due to changes to reduce compile time introduced since 1.5). So if you can replace these `@test_broken` with `@test` then it's perfect!::Ah, cool. Thanks for checking!::",d487b1d3f41c5530b030d96db226ef91d9d6d312::3f1a1f1951a47e2611ef34f89a05705a0f86fda3::8a1e65f11b4ffda70358ef8e4cac8fc95f3c6895::999f17fe0fe3f9f5be1d6b0bb96bbc7e654a33b5::707e0fda92b5dc86b5c911370223ba77e3959de0::f32e2a382b7585ac231bd049c2e9cf24b26f867b::1da52df1618b9e451d597d7f537548dcdeecf1f6::d5767ab98678644eb944a2cdb75a5cf60b9b85eb::a59f36469d2f5577a99d7842459980053c8ccf7f::d7721a0e9b20c2a67bd8ac86a1fd3af8f3356971::42d1020e52837f8bdd0c897e0089bcb0fab4a2fe::56d37ff7c35b4afd6a3f8d1a448e88e0b9674802::5b55e0632c4e0bded32b6635a89d92dd697f5e03::0c78029cdf199d6d9ddc24b6543bb0bafdf562ec::
https://api.github.com/repos/JuliaLang/julia,30428,aa/freebsd-errorshow-broken::master,1,merged,freebsd::test::,"These two specific errorshow tests work on FreeBSD debug builds, like what we run on CI, but they fail with regular FreeBSD builds. The buildbots that upload nightly binaries ensure that the tests pass prior to uploading, and the fact that this doesn't pass on regular builds is what's keeping us from having FreeBSD nightly binaries. See issue #30233 for background on this issue. We may want to consider backporting this to 1.0 and 1.1.Oh, I guess this doesn't properly reflect what the CI system is using; this branch is being hit on CI but the tests work there, so `@test_broken` fails.::Another option is just to disable these tests entirely on FreeBSD. If what I wrote on #30233 is right, the tests only work due to a libunwind heuristic. So it seems like changing *any* compilation option on FreeBSD could potentially make these tests fail.::Yeah, unfortunately that might be the best we can do for now. I was hoping to be able to use `@test_broken` because it provides a bit more visibility to the issue in some sense, but it doesn't look like that's really possible to do reliably.::",78eee768170b0c8bec33e549925a601681487eef::
https://api.github.com/repos/JuliaLang/julia,30309,backport-1.1.0::release-1.1,1,merged,,"Backported PRs: - [x] #30297 - Some more compat annotations - [x] #30304 - fix #30303, escaping $ when showing Symbols - [x] #30059 - Fix Makefile not removing  debug julia lib on windows - [x] #30311 - Add LinearAlgebra as test dependency to Distributed. - [x] #30253 - src/task.c: Use `b` instead of `br` instruction on armv7l - [x] #30286 - Make `unique(f, itr)` and `unique!(f, itr)` faster - [x] #30316 - Unexport catch_stack - [x] #30324 - Use `JL_AArch64_crc` instead of `HWCAP_CRC32` - [x] #30302 - NEWS edits for 1.1 - [x] #30156 - `@inbounds` annotations for filter - [x] #30340 - Expand and fix documentation of BitArray - [x] #30228 - oneunit of sparse matrix should return sparse matrix - [x] #30342 - Upgrade Pkg to version 1.1. - [x] #30108 - adding == for structured matrices (split off of #29724) - [x] #30339 - Documenter updates for future pdf deployment - [x] #29998 - Adding rtol and atol for pinv and nullspace - [x] #30194 - use non Pkg for workflow tips - [x] #30315 - fix bug with max_values in union! - [x] #30331 - Force specialization on the type argument of `_similar_for` - [x] #30351 - Allow dotted binary tilde - [x] #30361 - Add compat annotation for NaN handling in (l|r)mul! - [x] #30347 - added doc for AbstractChannel - [x] #30057 - Update references to Base.SparseArrays - [x] #30350 - codegen: disable Bool optimization for maybe-undef fields - [x] #30360 - fix #30346, specificity issue with DynamicPolynomials - [x] #30330 - Copying editing in ""Environment variables"" docs - [x] #29916 - Add Float16 comparisons - [x] #30373 - improve printf performance by passing digit buffer around - [x] #30353 - fix #30335, regression in intersection of unions of typevars - [x] #30378 - Upgrade to Pkg 1.1.1. - [x] #30376 - Fix reinterpret for 0-dimensional arrays - [x] #30369 - stacktrace: prevent OOB-error in sysimage lookup - [x] #30405 - Fix #30006, getindex accessing fields that might not exist - [x] #30396 - fix #30394, an unsoundness in ml_matches - [x] #30266 - Try implementing N-dimensional indexing for fast linear SubArrays - [x] #29946 - loading: work on simplifications (and some corrections) of docs - [x] #30420 - fix #30124, broadcast regression due to removed pure annotation - [x] #30385 - attempt to refine return type when it could be improved via PartialTuple - [x] #30384 - make `ndigits` more generic - [x] #30449 - Add link to the pdf version of the documentation to the html pages - [x] #30319 - generalize sparse matrix slicing to integer types - [x] #30439 - Fix mention of Base.worker_timeout() in manual - [x] #30459 - Only use llvm-config for library selection with USE_SYSTEM_LLVM - [x] #30519 - Add Dates as a test dependency to SparseArrays. - [x] #30521 - Bump Pkg to 1.1.2. Non-merged PRs with backport label: - [ ] #30483 - make inference of `_apply` match the implementation more closely - [ ] #30458 - gf: fix jl_isa_compileable_sig again - [ ] #30431 - Build: fix output directory when specified with O= - [ ] #30403 - Include @​propagate_inbounds docstring in documentation - [ ] #30398 - Fix enumerate documentation - [ ] #30367 - move generate_precompile to Base so that it is bundled in downloads - [ ] #30357 - workaround for F_DUPFD_CLOEXEC on Linux kernel <2.6.24 before it existed",797a24d4b37e97376d9d42c5605ae80e6a88c43b::36b60b71b7c991b20033228ab6e942eb1b3fe3a2::1af3b187f5d0b450cce13f2eb325762a13b7f56b::1fc30b5a651e528d4052eb688573f5df27c2a167::ae331181ace6bcd5764ebf4ab303da8d0c8d2055::7fd07d9bef5d3bc393ab184442dbf74c3eab8405::c9baf5c537fa69b742ab6b0fe3a785bbfe26817d::0f8c505f36c196923e76d0b0f76fd80f122ffebc::7b52bed2126c5c3b2af1cd3a0432c4e1105ba5e0::5fca9de703aed43d5521c227eb23109ae2c65b31::ca1b40e6bf9b9a3ea84c57a7e3725395138853ec::2be2ebf1194216585ce925883bd87466ef3da1db::76ce618647d30df8ceee72b05805dfae4dd1472f::acbb3cc22381525611eca91b24199e1ad2e81401::cef11677997f8d7385db669e3e5bb197edefcdc1::4ca783786fcfe9909697198ddc60101b25336c57::adadb3112596cf22fef969b25678517b4c718e16::5ccafa93767cb9cc3d2cec62cfa219adbffbb936::485ed6592b0cf7a96aac37800d1dfaab81157edc::7a26d7b966f28a589ec20b47cd29bfb449736756::7b9c0e814d7b092e647707ad5301d6e1bfac896a::a2dcfe6a6bde28214dc0488a67b1101e9d835511::a9c886a1603e2a49b6ccf7f56ae1453754ab675c::28d9ec2725e594161d9851108396a5afc1b60ad1::f4d8ce1e73acd2f88c613abb4c98650528a92a38::9cb1b0e28bcb044ef357b0bae8c1c7f5b0e8e412::98e83f65b16e36eaf29467aff4bf65d0edbb706a::7cbac0716a9f532247639c8fc87421935a52be94::e8c818f627d4e30c2a06161fd4cbfae6c623649f::47bd2ba6f23141c807aceb22340e5ace31818359::0d9fee88b5f61d1eabcc9dce566233c27d0b7663::c045cbea973ea4aeab0cfbb41dac1d54b0c176c9::2348c7b26b6288d1de7a21b99047fd1c298fbf9d::7b9b3e3fe903ed75228d8886b4580f56ebbfeec4::3d8942d9c492e336cf31f76238691dae6c4726ac::5b766bb9f47ebfdd360f518233cc21b7d5c83c30::64db937433fb853a3ce2854be5a3fec72d334efd::c379fb0cf707ef10cc8487b1bcf886936070b6d6::898bf8f00f9286d34016b804d358a830aea54b9e::9a40122f42fae7e510980a5301dd5223bf0548ee::3c086d61c45c3b83b1a25227069e45852d0114c6::235bdc7e330871d3252eeca33f773eba28246f2d::5125952483612999c96be81e8efc7351d22c2a92::3381093865e8a4e178bb9c963f7544bcf5c200b6::4e97adfe2437bb31ae24605d224f8a82ed2fc026::949d8e3cb1c25264f46b945e8282571635d5ba61::7cd0d2052b581b39c0eb44435f2bad2c96dd01db::
https://api.github.com/repos/JuliaLang/julia,30262,sf/the_backported_gfortran_conspiracy::release-1.0,1,merged,build::,"This is a backport of #29522 and #30135 to `release-1.0`, as requested [here](https://github.com/JuliaLang/julia/pull/29522#issuecomment-444000770).",33aaf2cea87ec73e08362bb567e9aaf18bb02ecc::65281caf24f62893cf8f891479d692c790bb41b0::
https://api.github.com/repos/JuliaLang/julia,30160,jb/fix30114::master,1,merged,bugfix::minor change::types and dispatch::,"After this, transitivity holds for all `convert` methods. Fortunately, this leaves all existing specificity and ambiguity tests passing, so this is potentially backportable if PkgEval agrees. Unfortunately, there are more transitivity failures in other functions (that I will soon address in another PR), and so far the fix for them seems to unavoidably change ambiguities. Fixes #30114.",39d40edd641273a2fbe89dca93f4ee83fe40508a::
https://api.github.com/repos/JuliaLang/julia,30117,sk/check_new_version::master,1,merged,,"Don't squash these three commits: 1. Removes an incorrectly used (my fault) `@assert` and just relaxes the restriction: don't require the first argument to be sorted—just sort it if necessary instead. 2. Fixes a corner case where the new version number is less than all existing versions, which caused and out-of-bounds exception previously. 3. Don't allow `0.0.0` as an initial version. The first two commits can be backported, the last one probably shouldn't since it might break something, even though this isn't a public API.Couldn't this just be `issorted(existing) || sort!(existing)`?::Perhaps an `ArgumentError`, since this is a condition pertaining directly to the arguments of the function?::Perhaps but aren't all of the errors to this function argument errors? In other words how is this error different than the other ones this function throws? We could change them all to `ArgumentErrors`.::Right, I meant to write `existing = sort(existing)` so as not to mutate the argument.::Yeah, I just figured if we're adding a new error condition, it would make sense to use a typed error. I would be in favor of making the other errors typed as well.::You know what, I've changed my mind—this is not an argument error: an argument error would indicate that someone is using the function incorrectly, but the entire purpose of this function is to check if a version is valid or not. So this error does not indicate that the person is using the function incorrectly, but rather indicates that the version is not a valid version. Arguably, it should be reframed as a predicate but using an error is more convenient. The other case to be made is that whatever code calls this may want to throw an argument error...::Okay ¯\\\_(ツ)\_/¯::",3f234c98802abded10f308797eb44452241f6142::344dcec6ba6486aaa1191c493f412acd376bb127::b10759563b2c2061355c0e853a45d91e0300881a::56fd5f1750e412253336d6d131843ed7cf011543::
https://api.github.com/repos/JuliaLang/julia,30070,backport_29986::release-1.0,0,closed,,"Backports #29986 to fix https://github.com/JuliaLang/julia/issues/30067. As declared in https://github.com/JuliaLang/julia/issues/30067#issuecomment-439678595, this PR was confirmed to fix the bug on master. I have also checked that the bug is fixed on this branch (i.e. applying the fix on the `release-1.0` branch also fixes the bug). Feel free to close this PR if you prefer to do all backports in one PR as done for v1.0.1 and v1.0.2. I just opened the PR as I am currently affected by this bug and having it fixed on the `release-1.0` branch would be convenient but it is not critical. Closes #30067",4e9cd492e6f31a3bfe85e77e7590e3090bc9361c::
https://api.github.com/repos/JuliaLang/julia,30016,fe/latex::master,1,merged,bugfix::stdlib::,"I split this into two commits; the first one can safely be backported, and the other one just removes the old method. No other Markdown components can be `show(io, ""text/latex"", x)` directly so I think it is safe to remove this one.",b2eebe34ad528c32bba37da6c92f7873cf9bfb6f::7d943cb864dbf9c66167dc4fb1beddf20df7bb70::
https://api.github.com/repos/JuliaLang/julia,30010,backport-1.0.3::release-1.0,1,merged,,"Backported PRs: - [x] #29296 - stdlib/SparseArrays: add rmul! and lmul! of sparse matrix with Diagonal - [x] #29865 - Avoid slow fallback Matrix constructor when converting Q from QR, - [x] #29899 - Fix minor typo in print_range docs - [x] #29892 - avoid expensive runtime div in parse for common bases - [x] #29715 - Fix #29713 (ldiv! overwrites arguments) - [x] #29910 - Update old reference to Base.REPL - [x] #29902 - Make median! type stable for small float types - [x] #29925 - Avoid reading inactive rowvals when computing the rank of a QRSparse - [x] #29738 - Prepend a version number too in source tarballs - [x] #29948 - Add missing devdoc pages to make.jl - [x] #29933 - Add missing backslashes in LaTeX syntax in the document of binomial function - [x] #29803 - Use SYSTEMROOT env variable for powershell detection - [x] #29961 - Add backticks around som JL_* words in the manual - [x] #29898 - deploy docs to JuliaLang/docs.julialang.org - [x] #29990 - mkpath should always return the path (fix #29989) - [x] #29994 - file creation tests: check path existence before & after - [x] #29888 - Faster findall for bitarrays - [x] #30012 - Use at-DIR instead of Sys.BINDIR to find UnicodeData.txt in doc build. - [x] #30000 - Include stdlib tarballs in light-source-dist. - [x] #30029 - Move Markdown docs to the Markdown stdlib - [x] #30015 - Added note to highlight that some variables can't be set in `startup.jl` - [x] #29986 - fix #29955, intersection bugs involving triangular constraints - [x] #30033 - Work around a llvm-config bug by creating a versioned symlink to libLLVM - [x] #30036 - Make generated code for rational constructor and gcd slightly smaller - [x] #30011 - Fix backtrace line numbers following macros - [x] #30051 - fix #30048, lowering gc_preserve of closure variables - [x] #29921 - Update the Regex section of strings.md. - [x] #29167 - Update arrays.md for element-wise assignment - [x] #29700 - Fix RoundNearestTiesAway - [x] #30045 - fix #30030, assignment expr as named tuple element value - [x] #30074 - Make `broadcast_axes` inferrable even if axes are of different types - [x] #29976 - Clarify the role of pivoting in QR factorization - [x] #30106 - Update typo in julia-syntax.scm - [x] #30111 - Install `ccache` on OSX Travis - [x] #30085 - Put boxed arguments in llvmcall into the correct addrspace - [x] #30112 - Fix deadlock caused by REPL blinking - [x] #30130 - varinfo() has been moved to `InteractiveUtils` - [x] #30146 - Fix indexing with Union{} array - [x] #30075 - stdlib-git: improve integration with git-external - [x] #30147 - document tab completion for dictionary keys - [x] #30128 - [AllocOpt] Track deleted instructions - [x] #30195 - Fix issue with Git Credential Manager for Windows - [x] #30049 - Two documentation updates - [x] #30209 - fix typo in `clipboard.jl` - [x] #29158 - Initializer the union selector of undefined upsilon nodes - [x] #30224 - Remove incorrect return in load_path_expand - [x] #30231 - Update libosxunwind to v0.0.5 - [x] #30237 - doc: fix typo for named regex capture group - [x] #30221 - speed up (de)serialization of Base bits types in abstract containers - [x] #30261 - fix formatting in bullets for simdloop - [x] #30254 - fix #30234, don't resolve bindings when tab-completing `using` - [x] #30265 - fix #30122, bad type intersection involving NTuple and Vararg - [x] #30113 - avoid jl_arrayunset in dicts with bitstypes; add some more @inbounds - [x] #30016 - fix #29995: latex printing of Markdown.HorizontalRule - [x] #30289 - Create new sparse matrix for R factor in sparse least square solve - [x] #29962 - `isdeprecated` should not resolve binding Need manual backport: - [ ] #30242 - Add C-linkage to gc extensions for correct compiling in C++ - [ ] #30251 - codegen,coverage: handle inlining info Contains multiple commits, manual intervention needed: - [ ] #29721 - fixes for the runtime (interpreted intrinsics) - [ ] #30120 - Fix method ambiguities in SparseArrays Non-merged PRs with backport label: - [ ] #30163 - [SparseArrays] Respect order of mul in (l)mul!(::Diagonal,::Sparse)",dff0f819e866dccadc0eebe8105b6ae66c19f7cf::f3f79510d4eae32316e082c0f337766deab8bf94::de8c2606f2ba70eb61bf37d074bd64cb378f146b::3d45b69f10f88767b17040904d8483addb4412cd::8e88a688181e949f8aafab915d8f85c2d4f36e96::fc5df2632b03866e60dcd3b43146a7ffb1801668::1ef201a0798bd99a402a52ef13660cb1856cdf4a::cd62dc8703e829eed690a0566778b1227bb0bb3a::861c9db1e63254c52751991acb0a6a67941d1efc::e5862cea00008bdfc7f5fedf5c6962f9b803a1ca::6c4827fed28fadfa29458a50e9ff761fefd682c1::cfcae776f9f43402a061993c216e18e4474764db::9ae15302641a1110fffdf6456e6a986a2169e873::2d4ef039b395e902d43169e7d4ceaeb256283b9e::f501a26c021e62815bfd980345eb25acca55c155::fc9cb3eda4ef6edb2b3de5b1bd68dd3a2b675363::cb9ff82e30ad0492f87901d3d62022f150253442::3bcd3f8b7eacd11fe422842e6c6d49313d500e09::3af42db737693b8df4d0a721dd1276a9f57590fb::59d5de043f6152a8da09edadc439866884b79961::9855dc8407f57f0117a082e34a5b8c66d218f207::841539a22d7a63fec8f3440dbf93a6632701bc1f::49b839fd3517e60f0aa7af4c4d56b1f3f6c18ee1::29f13f3e2e6e6d51ffb25dbb9bf3739327986257::1475f70dbd4632b40c5cd89424da53c9f0a8dd35::78b71376ae7c5a24ec26848fa719c59a850ed866::4751af00f4fcafe32e1a5a3006fadc277c9faf91::8e8c93fd00573101e7ed0f4287198d61c8cc6781::33a5d6a2d96a47319611099acaf728e843006003::ef19ed2596acd7976d8a6a0e96cba2b5269035e3::040ede89cfe2a6aeebef4482840c146ac8ca6bfc::0ec67e756a269dbab19b3364072aff1a7e1c927c::3890b9719a5541ece2b391b016fff95747a27c2d::e7eeb0596bdd5aa7010d0d954bb32f17421d1693::a9f87539f457d3e5c3c333b834e2bc33b9505a9d::4d7321185302929bb323afa576468b406e60009c::14b3aafcbd0533f1ac760de0bb47a0cbdea570d8::a9d68f43f4b25b122dace358ec3b15f1eee6998c::5166c26f2872fc2cb177fb89eaa88ae14b944028::91eaae504574827c74db243128f3f59ad6670220::29749f2adc5b0c99a5c5b92bb5418dc23f0705da::5a773a5d18186b940e08811491e7b1aeb5ed722f::8302431998a6b7e787843430b21f50bb009a617e::866490873b1f292dd21245c6d043982ca339585b::fd1e60f7bb2696bb4daf605ab845f828b1008b48::459bd3e58dbb3d046fb02beea8869cb3a2a47095::711dce0979fb3b87131bc2347837e6539b2e05b0::58d22f0447aeea999cf578e127a5c9a7df129553::6682281e1bbc02c857005b174a14cd519c449b09::5b67f8cb1317aa87f04c46a9f1f7287961085975::34fd056e586517e04dfb497f4c27acacd95b22a9::65227b6fa030aa7fbcf94322d2b55c7f4ed4e067::8f2eb31252c1c22466ea5982d8a2e81936f2b37d::393cd598dd1b6296b3f21ee122a4050eccdc44fb::d4e5c5d7186966d2cba30b055dc746388a89d034::c5371af2220a083f1582b9f185dce7e674b62a18::3164cfb0f0927a54ad2689adcb9e91043d423e70::6505797df3425511de2a012c4578fae78c9a776f::19d7763d48a3394925eef5d4dbf12d5b0a22168f::9894c94d711ded00e78726b94c8a81caae5e8268::db48467c87973a5060cb7bcd63d876060e003fd3::751e98170e4d82f0741ffcd8c3d6ec0d4b3000bf::23dc84bb16423ad5329d5d8e2b2f3fd2bd579ff6::1e037433868a6bf93f81396b1688d10a1341c3cb::83afc97a1e46a6fcf9ad32b88f795f89843321af::22d6ba1a4e9a7e6c9d0fb119177ba8a9bdaa1430::800c0b7a0d9b66f809191c9ff1112bfb8188f112::457d8c82fe5062fba9d6478dae9c8a710f978a5d::
https://api.github.com/repos/JuliaLang/julia,29986,jb/fix29955::master,1,merged,bugfix::types and dispatch::,"So far I feel this fix is pretty safe, so likely a candidate for backporting. We'll see what the tests say. @nanosoldier `runbenchmarks(ALL, vs = "":master"")`",898486d2b326f32231e2d49d545c7a57866ba6d8::
https://api.github.com/repos/JuliaLang/julia,29953,tb/hotfix::master,1,closed,bugfix::priority::,"Proposed hotfix for https://github.com/JuliaGPU/CUDAnative.jl/issues/278, easy to backport. `print_to_string` is a very common function; even though in the case of GPU code it typically doesn't get emitted or optimized away, after https://github.com/JuliaLang/julia/pull/28876 it requires recursion which is GPU incompatible. Unless of course there's a easy fix for https://github.com/JuliaLang/julia/issues/29952.",64131c4e6def3bc4e0f0d2de551963e2f2a7856b::54367d5c67d98f18182dbb28f834ac3637146b55::
https://api.github.com/repos/JuliaLang/julia,29742,jb/jq/fix29480::master,1,merged,bugfix::dates::,"While this changes hash values, it fixes a case where `hash` lacked the correctness property, so can probably be backported? Picked from #29509",32f26ef48edb027a5472f2400eb3b20cd65e25e2::
https://api.github.com/repos/JuliaLang/julia,29721,jn/interpret-intrinsics::master,1,merged,backport 1.0::bugfix::,"closes #29379This seems strictly less informative than the previous text.::Yes, but it's an error message—how much do we want to care?::If we don't care then why change it at all?::This isn't the text that you would usually see. That's text was emitted at https://github.com/JuliaLang/julia/pull/29721/files#diff-7a4c9160e84426f92c6790c4e8b14efaL2432::> but it's an error message—how much do we want to care? This is a terrible attitude. The quality of error messages is one of the primary things that makes people feel that a programming language is ""helpful"". For example, Elm gets rave reviews for the quality of the error messages. Similarly, in the past few years there's been a huge push to improve Rust's error messages with the very visible effect that what is still a fairly hard-to-learn language is considered to be much more usable than it once was. If the other place where this message can be emitted from has a worse version of this message, then can we please change them both to be the better message instead of to the worse one?::Yes, yes, I strongly agree with that. But everything has a cost. On balance, this didn't seem like a place where knowing the type name was particularly useful information (especially since we routinely haven't been giving it, and nobody seems to have noticed).::",9707410bfa00980fe3cf51b0491d195d078711fd::500d669e84cad3ce8d1af90e79c9390396a464c7::abc6654ce57673efe2eda3d57f6bf62cfd1ba630::386a8c24924ce63efccddb8238fcdc7871bcb18d::
https://api.github.com/repos/JuliaLang/julia,29585,errstring_scope::master,0,closed,,"There were a lot of discussions about scoping rules of top-level loops confusing new users. One of the simplest improvements, especially for backporting into 1.0.2, is to have a more verbose error string. Here, I made up a more informative one that will surely need discussion or triage and probably need modification as well. If the errror-string gets changed, then a lot of tests and docs will need to change as well, in order to reflect the new REPL output. Since this is in many places, I'd prefer to grep and modify only once, and hence deferred the actual work for this trivial change. Meaning: Tests will fail and this PR is intentionally incomplete. Now: ``` julia> x ERROR: UndefVarError: x not defined (consider https://docs.julialang.org/en/v1/manual/variables-and-scoping/) ``` Relevant issue: [https://github.com/JuliaLang/julia/issues/28789](https://github.com/JuliaLang/julia/issues/28789) and [https://discourse.julialang.org/t/another-possible-solution-to-the-global-scope-debacle/15894](https://discourse.julialang.org/t/another-possible-solution-to-the-global-scope-debacle/15894)",95e0b7678e9bd02e212a65382753591db518850f::
https://api.github.com/repos/JuliaLang/julia,29469,fe/fix29392::master,1,merged,linear algebra::minor change::,"Changes the output type of some operations so not sure we can backport this...I imagine I'm missing something obvious: Why not preserve the structural information? :)::Are we trying to make `Symmetric`/`Hermitian` full fledged abstract arrays? I feel like that can never be complete, there will always be something that does not return a `Symmetric`. Personally I just consider them dispatch wrappers, and same with `Adjoint`/`Transpose`, but I guess I am alone in this thinking. Anyway, I guess this change was not necessary and maybe it is better to make `::Number * ::SymOrHerm` preserve the structural property?::> I feel like that can never be complete There are a finite number of operations defined in Base, so this can't be true. We're still in the phase where we're encountering things we missed all the time, but it's getting less and less over time and will eventually be none. If it's still a common problem in a couple of minor versions (say 1.3 or so) then, we can consider if it's just not working, but it seems premature to declare failure at this point.::",4837cf9d2e8d3425532cbea3b3693fa5238888da::
https://api.github.com/repos/JuliaLang/julia,29444,backport_102::release-1.0,1,merged,DO NOT MERGE::,"Backported PRs: - [x] #29210 - correct the docs of `Nothing` - [x] #29205 - fix digits(n::Unsigned) with neg base for `n > typemax(n)÷2` - [x] #29188 - Make `using LinearAlgebra` explicit - [x] #29192 - fix reinterpret(Char, ::UInt32) for ""unnatural"" values (fix #29181) - [x] #29233 - fix awkward phrasing in parallel-computing.md - [x] #29230 - Base.TCPServer --> Sockets.TCPServer - [x] #29279 - Changed one identifier in one example - [x] #29245 - Minor cleanup of noteworthy differences - [x] #29229 - Improve description of Julia keywords - [x] #29232 - fix minor typo in parallel-computing.md - [x] #29299 - Fix a typo in docs - [x] #29319 - typo fix in parallel-computing.md - [x] #29322 - fix #29306, teach effect_free that GotoIfNot with non-Bool can throw - [x] #29332 - Improve noteworthy differences from R on ismissing - [x] #29301 - Minor docs correction for maxintfloat. - [x] #29314 - fix bug in parsing extended colon-like operators - [x] #29354 - Add missing test dependencies to SparseArrays Project.toml - [x] #29351 - Some misisng paren and xrefs - [x] #29349 - Backticks and xrefs - [x] #29352 - avoid conversion from Char to String to Symbol in some LinearAlgebra routines - [x] #29338 - Minor English fixes - [x] #29246 - Fix: Complex SubArray times real Matrix - [x] #29346 - fix #29326, return type lowering interfering with closure optimization - [x] #29258 - always obey inline declarations if the calling signature is concrete - [x] #29217 - fix crash when interpreting optimized top-level expressions - [x] #29391 - Minor English fixes/improvements - [x] #29398 - Remove docstring relicts of findlast/findprev with a regex - [x] #29416 - doc: fix not-true-anymore example with promote_rule - [x] #29415 - improve findnext/findprev docstring for strings - [x] #29380 - fix #29208, incorrect `Union{}` result from type intersection - [x] #29414 - fix `sizeof(str::AbstractString)` docstring - [x] #29401 - Change from parametric T signature to Int32 in _ldexp_exp - [x] #29419 - fix #20872, handle UnionAll types in `which` - [x] #29431 - Fix sentence fragment - [x] #29325 - check return from jl_restore_incremental correctly - [x] #29376 - Some improvements to variables and scoping manual - [x] #29374 - If stdio is not available, be permissive and do not exit - [x] #29281 - Improved English and egs - [x] #29475 - fix #29454: better example for mutable struct - [x] #29463 - tiny formatting fix on docs - [x] #29486 - Two small build system improvements - [x] #29470 - Upgrade to new Documenter - [x] #29502 - Correct language in documentation - [x] #29487 - fix #29468, bug in intersection of different-length vararg tuples - [x] #29465 - Fix #29451: parse(Int, s::AbstractString) when ncodeunits(s) > lastindex(s) - [x] #29497 - Add --project option to man page - [x] #29336 - English fixes - [x] #29337 - Minor English fixes - [x] #29412 - REPL: really fix #29347, searching a string not in history - [x] #29373 - REPL: make paste work in search mode - [x] #29482 - initdefs: Typo - [x] #29413 - REPL: show ""failed"" when i-search fails, like in readline - [x] #29519 - [ci skip] Remove mention of Julia version - [x] #29521 - [ci skip] Fix a typo in doc - [x] #29543 - Update performance-tips.md - [x] #29485 - Escape jl_atexit_hook first _ - [x] #29548 - flatten empty tuple - fix #29112 - [x] #29570 - basedocs: add 'See also' for `getproperty` and `setproperty!` - [x] #29561 - Fixing abs for Rational{<:Unsigned} - [x] #29573 - Fix quantile doctest formatting - [x] #29627 - Fix a typo: replacing 'temporarly' for 'temporarily' - [x] #29591 - Document Dates.value - [x] #29641 - fix an indent of Mmap.mmap - [x] #29386 - Workaround subarray test failure due to associativity. - [x] #29648 - Fix typo in arrays.md - [x] #29646 - fix #29644: getproperty of Tridiagonal{SparseVector} - [x] #29609 - improve performance for ascii(::String) - [x] #29663 - fix #29662: missing import from Base.Printf to Printf stdlib. - [x] #29557 - propgate inbounds to substring and use it in split - [x] #29667 - Use a stable inverse for Tridiagonal and SymTridiagonal - [x] #29677 - Don't splat a number in ReshapedArray - [x] #29689 - Adjust doc test for \ to avoid rounding - [x] #29680 - add inbounds to some more substrings - [x] #29712 - fix #29711: triu! for m > n - [x] #29604 - Fix jldoctest example in mapreduce(...) - [x] #29457 - Uniform scaling cat with zero dimensions - [x] #29682 - improve performance for sorting columns in sparse matrix (thereby improving sparse matmul) - [x] #29731 - Mention that the `=` part of `--project` is optional. Add to regular Julia docs as well. - [x] #29725 - Fix bug in nullspace when the matrix is empty - [x] #29732 - convert Integer in Cholesky constructors to BlasInt - [x] #29742 - Fix hashing of Dates.Time. Fixes #29480 - [x] #29763 - punctuation error - [x] #29696 - improve performance for sparse matrix vector indexing - [x] #29722 - fix #29718, union field alignment - [x] #29746 - speed up logical indexing by bitarray - [x] #29780 - adding _small_enough for diagonal so that fill! works - [x] #29797 - Fix for the markdown table in getting-started.md - [x] #29793 - clarify pinv documentation - [x] #29789 - Created an actual table [Manual,Scope of Variables] - [x] #29703 - make tables on Interfaces pages more consistent - [x] #29760 - Fix out-of-tree build of docs, fix #29757. - [x] #29615 - Download Pkg from GitHub releases. - [x] #29830 - Use Documenter release instead of master. - [x] #29834 - Fix CInt to Cint in docs - [x] #29633 - help type inference for logical indexing - [x] #29837 - Make pinv work for Adjoint - [x] #29844 - fix reinterpret error message string - [x] #29786 - Reduce allocation in flatten - [x] #29770 - Use `require(pkgid, ...)` instead of relative require - [x] #29539 - fix #29528, specificity transitivity error in DiffEqBase - [x] #29765 - fix eval world updates - [x] #29838 - egal_tfunc bugfix - [x] #29878 - Reinstate statically computed log event ids - [x] #29908 - Fix isvalid for 3-byte overlong encoded UTF-8 sequences Non-merged PRs with backport label: - [ ] #29738 - Prepend a version number too in source tarballs - [ ] #29721 - fixes for the runtime (interpreted intrinsics) - [ ] #29167 - Update arrays.md for element-wise assignment - [ ] #29158 - Initializer the union selector of undefined upsilon nodes",7a30fbdb076f2208c99465a7809c012e5e77ce51::bba596f4f9563595ae434ca17a56f60302387241::f664f26c097ef559e8d3b8b41b8c6ef64a15ad81::a7584a8158a9308404e5c8e19c416387f6db1fca::038b9bb811f0c87e7f8ca6b9f3946ede6cd8a8c5::9cadb4bc4e5123dd3c8330d711623ca1f8c11b52::20b3cb5309bcccd2c667f3e792b10668e77bbbb1::6c82eef083d08f8c715bc5fded99fa4c23f01c8b::c5f3adc129a933782385f97be06f593bdc70f882::829a976947d38ff839e994806489207c85898b96::08d8221d4020570cc5db8b6f66c863907e28edec::e931f980561e6b6a4415361023faa95a92a57509::10d8327cf70c2d972a67683f7ec83894f0b69db3::fbd841e156e53b38eda61575d07b54d6d5cead81::639032c80aa95ba03d23aede81e2929252d3599b::d0710c7ab750520a31066b17867dd66e6ee3778a::ea3716956965a26900d4eedd234d0e8cc6117ed5::c5b32ae0b1f1ed4f18b1093a722fa73f59c68449::5addb28f2b18c041bc8e6827cf38563d0d819897::69e8fc6fcb0cd9e5669cc5332012c6ffbb4b61a5::2f9e2791e202e6d61da2314f2435f0bcf05b273b::80747f6d1894e9aa1b9c8ba11e5457d6db450d8c::d67c205d5f6925713596aa6a593465d2859ea034::b029b7b00684600dd0192e1ca5606e5a00476ced::63384f38452aa86404a2c6071164cbe85c0f6378::8cc913618f6830acc338c023d1710e551110bbb4::87ef6857624827182a2b5f91435d9cea55b2df43::9e77dbc4890b373584f43c6dc03db4d242126003::2493934d9bc10c30dd6083cc222c3920dfbf0d82::bcc39e2ee9370c379c098b772b441854cf109d16::4778a40723a71d72b383f81f9c7cef47d97fd472::9a9c4badc52d2e09e10615ab4967d9f57e80a774::a866a5b4382bf8fe61da862eeccfca28536cad76::af50a7ebb5f4595adfc5eaf2e44a44c63efbb669::5653c98f63414fc06a98a2e7064938170f120e66::50588bcca267241768497a1e1eb06488750c3b66::f362fb5a9e27e8b85e0165075fc3afdb43ef27ca::80a9530c5c6e7f4f5e9f8e726db2750caccd7889::aebc33b0530a3cc0076d8abeea987ebf1324465d::b226b2e753c85cf6bc0ca1da15b212d5d1c19a81::3cfe9ce36b86d48eb554827843b878d91d6edbe5::0e0e62977e7b64236b6a0a971172f3b1e425dd54::f35593f1b1730f46c4450dc824ce527177cb26e0::798b4de9c070e246d3e7d4b39951f49dd0b9f374::4bff8d68949c5ec0120cb585d15dffb0b8265233::e62e48d99b8d8d162c0265edee1c13261377335c::a027a6cdebfa9c067784f40a6086e6b82fb1d7fb::516dde69989443081627750d4b483c74b2b1ee6c::130af138324a171cbd8a0388c089749a430e5ae0::e2143191ea4c9834eb613e4396ce2b86e25cf089::d75ebb5849789b8513392cb0471ea2f83fdcab5e::28265d9def2000975f7320a50e9193b5eba80132::1a96057698d6274e8f877ee2ae15250efe88c84d::58a651b5ab6aa6c384687728a8730bab1b666d8d::2fe2da372829304b0bc924053c5fe41bc02e1367::765a4c3a4092a3f2a2e3621bb77c7091f4053fc1::9b7f28b82ee4cb1262c7b32e07d0efd8ca124c2f::d41f77cb30c34c583b6fdbf409a2da309517abb7::b46c362a655b87cd7f9f35fd1d1d6ad4164c0750::1123f0a5f28f6a6b3cfdd43712b852ecec277bb5::c88e33b371f05f62175e11f337575e48949c2dd4::e7aef946b214c6e2a5b87fb30aba6d1a5afe769d::f1d4dde3434836c38e66126a6acbb8f0a8f38219::0b44f6e4f1b49e85fda1a393e6ee7d18e0734278::d2238ec4e9853dda84c610f544dbaf113debeeb9::fff684c8f72a38a2d732d238e973eac4d1b4804a::84ed14bec296aab792143404ed8288dbc278bdbf::4a967982ecef2da40bd17564ec26303f58f1c834::a97d40c367523e81fb2f5953931b4ef47f0b3608::03ecf8195bf73201056abb1ae0bfded442d37e97::9b2d636a285e7f5f088a31dd06c27c8b43a40eb2::e5e3a49cf8541e50acda0e788dc52ad490622098::8b1c3cac73cd40845ffa9280bc07796cb6d69214::975d690e6629d4327d1f37b9e3dde36a809fa6f1::75e7d05539ebb65d742cc7c5afbb2a3adcd8c125::d00e3434281e3ab1d2aabe200ec257c9d53be032::f7eeed461e1e98acb409ed2caeadadc786490611::6da9a6c722de2c870be4a9e99a06ddb61eacc35d::82ae7e3878d84df56d19c7e76b1d50e2f694b17b::ba3c39ba05428a9fd34f0807926e8edf27142aa8::ebbaf5d0525fda5d8edf5c1bd582b5b9ee0eb0f8::116b09179bfdece47af6d608cbd5a959e0a07b36::29c1eb2d0bd1dd847404b6ff5d430cc61a9745b9::62ae72985f13f3963ae1161f8d9753fc174db07d::20a72644e11a1cfdf6397cc7cd4e25ccecad149f::7d1875b36a3c78ce2cd3feed103000fcf7d293c2::7bfe65ad600f28d3df3b69502d64a8b2f539f3a3::307f920759e8715f2ba68098701632462b75fbed::8ace044da8e65364653896dd3629ed980676ab30::1e298f751894d8e5e3bc3d534fe8712c38cf7ae6::5864e7e0aeac119a36fe4f80a993c4057d6031f5::17a45cca6cb5219de9173fff8721c7cc86dc935c::df5618bcd36a21900a3aaa71acba409756e71220::13b3983680f6d43b866bf182cd1edfc821a83c65::3dcb8b2d4385c704dca1c997fa84eed112e38b56::8647b966ab6f1a1421ad192ee3777a4952b315e1::d58ee9f9f872892373034696a22f34ed9e37f14d::e0120582e2a61f701dfd11650c2913538768faba::14be38f51f344a4ed03c2d0f14c4436926fb30e5::6b118127052c81e719dfb61197ab66fdc591e3e2::87d94ea57f9edb64bf64046479573411512a2c8d::31234c14890c8385b94132525b7a4f9656e05d2a::3df1997a1e2a884546c2fe4fa1a8688382096fb4::bb6a9af8315452ab43ba4b95418bc6777b9c2159::086197929e87954cab3306b52b70934ff56e0c99::f0badf923088e2bae967caef3733df957e50999f::facd000c9ac250e28fb9f9d591e34a78d45bd143::52c67fac23bcf72c7487c188f54394be17e1d213::8ae1d48672e0c37e4cca2abaa7d6c9e4cf9f32a1::
https://api.github.com/repos/JuliaLang/julia,29442,teh/oneunit_cartindex::master,1,merged,backport 1.0::,"Ideally we should deprecate `one(::CartesianIndex)`, but I am uncertain about the strategy for deprecations in 1.x. I tried to set it up so that it will be easy to do when the time comes, but I can change this given feedback.",27a45f5836f1c2565263d7d41c780d71e9cf504b::1e2bed42a859dcb05a7ebcec3c1a4ddc783b9bfe::
https://api.github.com/repos/JuliaLang/julia,29364,kc/fix_backport::master,1,merged,packages::,"adds a missing (important) backport, this was supposed to be in 1.0.?::Precompile function got changed, this is no longer applicable.::",eb968114a6225e93b91ab8321abb6b458dccebb3::5829a4051aeb534251c940d95cbc87f7eb961884::
https://api.github.com/repos/JuliaLang/julia,28886,embedding_dl::master,0,closed,,"This is a first attempt to document and test code for embedding with dynamic loading of `libjulia`, as I requested myself in #28826. Please point out any misconceptions I may have about how this ought to work and in particular if it is unsafe with respect to memory management or in any other way. Known things that need more work: - [ ] Bikeshed the naming of files. `embeddingdl` is not great and really only a placeholder for something better. - [x] Test on Windows. It is based off code that works on both Linux and Windows, but I don't have the infrastructure in place to test Julia on Windows. - [x] Add documentation for Mac. I have neither knowledge nor any access to that platform. - [ ] Flesh out the usage examples.The part above looks (almost?) exactly like `@testset ""embedding example""` and could be factored out into a function.::Why did this need to be added to `embedding.c`?::Is it possible to load without `RTLD_GLOBAL`?::A comment which links back to the markdown documentation would be good here. That way people who only read the source code will see the larger picture. A very brief self contained overview (just a few lines) would be welcome too.::All this looks like useful infrastructure which could potentially go in julia.h. That might be easier for users than having them keep all this code up to date in their own projects. Roughly speaking, something like the following pattern (in julia.h): ```C #ifndef JL_DLOPEN_INTERFACE // Normal content of julia.h #else // Insert code for loading function pointers and masquerading, etc. #endif ``` Then the embedded users can simply ```C #define JL_DLOPEN_INTERFACE #define JL_DLOPEN_DEFINE_INTERFACE // To guard definition of p_jl_init and any other required static vars so it's done only once if the user plugin has multiple source files #include <julia.h> // Rest of the code below generally like the non-dlopen version (if with some restrictions) ```::I *think* this is safe from a GC rooting perspective. But it's worth a comment that `p` must be used immediately; either as you do below, or via a `strcpy` to a buffer managed on the C side.::Might be nice to also do some version checking here (`jl_ver_major`, at least?). Though I don't know whether the embedding API has any ABI guarentees yet?::Will be fixed in #32062, but still required for anyone targeting 1.0, unless that's backported.::Very good question. I don't see that myself now. Backing it out and see if it still passes CI is probably probably the best option.::Agreed, a comment could be useful. The construction is also discussed in the last posts of https://discourse.julialang.org/t/julia-exceptions-in-c/18387/8.::Any particular advantage to having it in `julia.h` rather than in a separate file? I actually found it helpful not having to include `julia.h` as that gave me conflicts with some qt header file.::Only that `julia.h` is currently the place where the public interface is defined. The idea of defining the symbol `JL_DLOPEN_INTERFACE` is that it would strip julia.h down to almost nothing so you shouldn't have any conflicts with other libraries such as Qt. Do you remember what the conflicts were?::To clarify what I mean about ABI guarantees — those would define how closely we must match `jl_ver_major` / `jl_ver_minor` / `jl_ver_patch` in order to further use the `libjuila` that we are `dlopen`ing.::Keno comments on slack that ""there are no stability guarantees on libjulia"". So naively we should check for a match of `JULIA_VERSION_MAJOR == jl_ver_major()` and the same for `jl_ver_minor` at least. Maybe also `jl_ver_patch` though I hazard a guess that a plugin based on the functions in jlapi.c is likely to keep working between patch versions. All of this can be put into an inline `jl_check_version()` function.::This is now merged, so you should be able to remove this.::No, that was too long ago now.::",3463fe01f475ac6c2a5b6a35e6d6649b5474ee49::c83a0d4e8757a138e9de7999be6634ff5f6aee10::b09b7faa69cf7a86d5b96ca416a30e2b12eb8574::7d6bcd10b7eb971371eb00f890ce95a8609b5f19::b048aa3bcfae7557b585f5362a6102bfdc36e3ac::ce8620a7a3e8100c1303be86b4c776fed8b4658d::fee921e6673f2f03d093f49dbbf8e2f93a64c49d::bec120347f3b3bbb0bc40a1402f548ed44dd26e4::d7b5d17f2861dd09d91c6f07f322ff5869fdb7e8::1c175f1c6db774ca09bca691635dd3bd20c88f21::
https://api.github.com/repos/JuliaLang/julia,28764,kc/backports_1.0.1::release-1.0,1,merged,,"- [x] #28548 - Documentation introduction fixed for 1.0 - [x] #28520 - Autogenerate documented REPL banner - [x] #28578 - update link to ConEmu terminal - [x] #28568 - Fix vec of adjoint vector - [x] #28592 - fix #28576, parsing `?` at end of input in conditional expression - [x] #28620 - Fix #28619, logabsdet for singular matrices - [x] #28476 - Doc IndexLinear and IndexCartesian - [x] #28594 - Fix typo in doc - [x] #28586 - fix various `printstyled` calls - [x] #28609 - fix print docstring - [x] #28555 - fixes issue 28553, improves error message for missing packages - [x] #28642 - Keep parametric information when constructing a SparseMatrixCSC from … - [x] #28616 - stop specializing on argument types of `display` - [x] #28660 - Docs on REPL: Change quit() to exit() - [x] #28657 - Fix input args in rem_pio2_kernel doc string - [x] #28663 - remove redundant text in a docstring - [x] #28664 - fix typo in a docstring - [x] #28661 - improve performance for number to string conversion functions - [x] #28621 - Fix throw_complex_domainerror error message for log[1p] - [x] #28655 - fix #28641, passing typevars to `<:` in typejoin and tuplemerge - [x] #28656 - fix #28499, calling `cluster_cookie` before cluster starts - [x] #28659 - fix #28597, error for empty arrays with some negative dim sizes - [x] #28670 - fix performance in printf - [x] #28684 - LinearAlgebra remove unused export - [x] #28649 - Complete uuids - [x] #28635 - Fix issue #28624 - [x] #28699 - add a code quote to a word - [x] #28677 - smarter order of checks in jl_types_equal - [x] #28693 - fix some exported undefined variables and test this does not happen - [x] #28702 - Use code font for `jl_value_t` in h2 - [x] #28694 - fix REPL completions not always being unique - [x] #28707 - Fix reinterpret performance - [x] #28514 - Doc sorting algos - [x] #28732 - Carry LLVM patch to fix incorrect codegen - [x] #28719 - Misc doc improvements - [x] #28742 - Fix missing GC root in interpreter.c - [x] #28747 - Fix missing gc root in jl_cglobal - [x] #28556 - add document on JULIA_PROJECT environment variable - [x] #28754 - Update style-guide.md - [x] #28751 - Fix three missing gc roots in subtyping - [x] #28733 - Example for parentindices - [x] #28653 - Add doctest example for broadcast! - [x] #28644 - Remove mention of `reload` from the docs; fix #28572 - [x] #28727 - fix shuffle! on empty arrays - [x] #28769 - Update Enums.jl - [x] #28757 - fix description of kwargs... - [x] #28748 - added documentation for read command methods - [x] #28731 - fix two typos in Scope of Variables docs - [x] #28744 - Update integers-and-floating-point-numbers.md - [x] #28749 - Resolve all method ambiguities in LinearAlgebra - [x] #28787 - improve performance of parse - [x] #28816 - Run ambiguity test inside a clean process - [x] #28792 - doc: change the canonical url to v1 instead of stable. - [x] #28810 - Update info about `versioninfo` in devdocs - [x] #28703 - add `Regex` documentation - [x] #28832 - Added seekstart to getpass in base/util.jl (#28828) - [x] #28780 - make cmp with BigInt return in [-1, 0, 1] - [x] #28800 - @schedule is deprecated, the code is no longer valid in 1.0 - [x] #28706 - fix #28593, macro hygiene problems in type definitions - [x] #28855 - Fix doc/help references to bit-rotted variables x and v - [x] #28625 - absolutify --project path - [x] #28847 - Remove bounds checks in iterate(::Tuple) - [x] #28651 - Support parallelizing over collections that have non-Int lengths - [x] #28875 - fix doccing call overload without named argument - [x] #28877 - Fix note tag in the documentation - [x] #28817 - improve docstring of pathof - [x] #28871 - issubset aces Discrete Math but flunks Topology - [x] #28876 - improve performance for string(...) - [x] #28873 - Compare Symbols and Chars more efficiently in Cholesky - [x] #28939 - Fix typo in accumulate docstring - [x] #28950 - removed outdated paragraph on automatic broadcasting for binary operators - [x] #28944 - doc: Fix call to round for Julia 1.0 - [x] #28952 - Getting Started: Capitalize ""CPU"" for consistency - [x] #28959 - fix typo in `?@specialize` - [x] #28918 - Cross reference hasmethod with applicable in docs - [x] #28936 - Fix spelling of kernel in html id - [x] #28997 - doc/faq: move question to correct section - [x] #28927 - Docs for logging: write to file - [x] #29015 - Vector lowering improvments in GC placement - [x] #28910 - doc: fix accumulate examples not using the init keyword - [x] #29023 - docstring: CartesianIndices and LinearIndices constructors require tuple of ranges [ci skip] - [x] #29017 - Fix out of bounds write in array deserialization - [x] #28682 - Fix download agent search relying on throwing of Sys.which(). Update t #28157 - [x] #28951 - fix #28915, identity conversion to union of tuple types - [x] #28954 - fixed regression in sparse of adjoint of sparse (#28948) - [x] #28822 - Update Pkg - [x] #29045 - Fix dispatch of SparseMatrixCSC*Diagonal multiplication - [x] #29043 - fix #28900, macro hygiene bug inside keyword arg values - [x] #29044 - fix #28991, error when adding default defs to constructed module Exprs - [x] #29063 -  Fix typo on file.jl - [x] #29049 - Fix typo in mapreduce docstring - [x] #28882 - fix #28833, crash in macros returning certain top-level forms - [x] #29060 - work around a splatting penalty in twiceprecision - [x] #29010 - Add local to for outer description - [x] #28711 - stronger warnings about changing constants in help and docs - [x] #29070 - fix #29064, bug in field name same as struct type name - [x] #29072 - fix #25955, hygiene of arg name of function defined by type - [x] #29091 - Documentation `mynorm` should not divide by n - [x] #29084 - fix logic in `getfield_nothrow` to allow removing more getfields - [x] #29086 - fix #29083, not eliminating kwfunc due to logic error in builtin_nothrow - [x] #29094 - doc/interface: correct signature of `size` - [x] #29099 - This comma confused me. Remove it - [x] #29097 - Avoid duplicated ""=value"" in Enum errors. - [x] #28916 - delete_method: remove method from any pre-existing ambiguities - [x] #29011 - Some more examples/formatting/xrefs for Distributed docs - [x] #29122 - Solving Issue #29101 - [x] #29121 - LibGit2: only call shutdown once [fix #28306] - [x] #29048 - RFC: Iterate over smaller set for setdiff[!](a,b) - [x] #29119 - Fix some signatures and add examples for Random docs - [x] #29133 - fix perf regression from not specializing on iterate on tuples - [x] #29116 - fix perf in exp(::Matrix) (for smallish matrices) - [x] #29050 - Tried to fix the English of the first few paras - [x] #29137 - Some xrefs and examples for Distiributed - [x] #29104 - doc: fix usage of NTuple{T} - [x] #29112 - Allow `Iterators.flatten` for empty tuple - [x] #29139 - fix #22592, specificity of union compared to a subtype of it - [x] #29148 - ndigits with negative base: error out instead of giving incorrect result - [x] #29164 - Fixing a few typos - [x] #29159 - fix #25474, support more forms in edit, which, etc. macros - [x] #29150 - Xrefs and a few examples for math stuff - [x] #29184 - Add `undef` to Vector allocations - [x] #29186 - fix #28481, faster reading of primitive types from IOStream and IOBuffer - [x] #29075 - fix #29036, large slowdown in DelimitedFiles - [x] #29154 - fix #29145, error for `new{}` with incomplete type - [x] #29194 - fix #29175, invalid lowered IR from repeating code for declared types - [x] #29056 - Improve support for constructing zero-step float ranges - [x] #29248 - Pkg update Non-merged PRs with backport label: - [ ] #29217 - fix crash when interpreting optimized top-level expressions - [ ] #29191 - Add docstring to compiler opt --project - [ ] #29167 - Update arrays.md for element-wise assignment - [ ] #29158 - Initializer the union selector of undefined upsilon nodes - [ ] #29134 - fix #29059, unnecessary warning in precompile for `eval` in `__init__` - [ ] #29019 - Update strings.md - [ ] #28860 - fire package_loading callback at every require - [ ] #28759 - Bump MbedTLS to 2.12.0 - [ ] #28466 - Document `CMD`-object customization",d40a6b1f963ea8b6f35dc43d71565262eaa81da3::4e1178c77e06b24ab31380e7d4f18a808e31dc66::44dedda3c44d6c920bf2bd1a4e4950488cfaeb9a::c4c4199f962c3f05bc51a6382829eaa22a3b5b84::7da396b7faac1b8b98013c7aa4d4341564bdbdd9::3ba7d6610f9e2fd81d28bc7b703435846110f2f6::5cc92a76865fd2be6c11a1535477f8858be3fb62::25ed51e13f71bdaf61a993cd416ff6b7d13f63fa::1d651adaf8a1ef23d39fff04856aa959e970f61d::6ef9630507d640220ef733d02faa7baa7cc91814::2417246291d165806b018aba074262f1b895722c::ffa7047265b8a3306afff35e73c5245a8ccee154::ecc1300c2b616a698cb38f51687c1a37b6ad4893::cd654a3dde92cf624ca907b8f10218782786f01e::c097ec3006a23894902a73f2186fceb793106e7d::5da38de474e5c0dfadb583dd644a2e58aac6224c::ef041dc30570a70a9d095659ec7d51ec2444cc74::1169109ebe997d983d1b1e309a5d06af385d1e8c::881d197320dfbade01299020b9d34eb65d46ad62::6abac45b97b49eb42626c914a7a9b2b91ea4436c::bd1ae7deb3eef46adf796b54dacf8ca8f07c02b6::72f54d3ab6a05200acae091543d2f7e177308432::b843f9ea6f0b34ad3e57d3dac024e31afcf78a24::a80df297e467d43eff41a964e6a006a6ff978913::1834ed48409f3af2be63ab68e186f29d717d75b4::a95f0680bb5756e590d64d753eb36d67d5b3c5d0::fa8f0e6cce088c591973f03c914d4262db1913a8::18ab3a4812f07e8f6ae7ba80b3d33a01d2fa43cf::ca151cc35c0300b2912c9ff6c99f84f8738f3b76::a4bdb8b4f3c78628f47a4fe11670072149d9c3ba::abc36a7b7aa7d7b75f53ca9b5fdb1465b88c08c5::b24e624818bb910c0629a974c46638477afc36e5::ff8361ac9e2de549e43d776bf785e2c4848f7818::f22e4fc53e7a4357356dc67647206a8a71e77aa9::02db5952c0cb26f00f038812e0a329fd462857af::a871cb637ae3cb3d5a13806d92b5a2172a80bd98::a39334b1fbdf67b880225a5d0cf9e5ba3d283bb0::5c6d9f4ad94fa5ea5eb4d422226fb47b733740de::238dbcfbfe1967041008562af74000a64889c7a6::6770dd1d09e373c32537318947de832eb4fbd5a7::0e190025c065785ab9d070c0044ed27835292e92::877495abcb148c57915f4a45752c20c14bffba83::68d4536e90e352db445de182786628f250c05b4d::64e3ec32210c4bde8a904661dafed5f939b17a21::79a7efd587cf27084d26bcae21c50e642b3567c9::2747c9cb71ede6a09b76a7e0dd59e8d15ebe3737::bfd465bc4626e1abd75ad72c6f012e4c941d764c::fe7fda36a323016d8a9fe6e373154a6349949bc2::c0980d10427b24fe4ed45d06614f10a774ba8ed3::271441b6c89c55e9bf637ba3e4f0bf574cce3f20::e49de7c7f8496d1b996dd2ab47fcaaf9fb90617a::a8850d051c7c950934ec3cbbff9150938dec3086::93bce58e933006be8248b2a756ee6790618cd615::d4020433d9ee095d8cb68f15e5fa290e78697248::2a447e73f66cee31df4383e81686d5d444c5e2c1::a41626c17db0e75f165d59e13acad9f4ad60a765::bd573ba995f7bdabafb9512d202b1d4147bb0bd0::8b90fadc68d2e27cd2a96f13d6603dfbac53cd44::58f6dacbc679f54b0a5ee8871c29d2bbb3b2372a::a1e78c1bd737ef10cb06675ffc40f18f0d52d1b4::75b052f1091993753a7886f97a647b051c58ff3a::de44505b43a07067cd7af343c8529d8aaeec5858::e727600a1c368f3c438d884df108ff1a0760cf74::19e0a354e1e8828686ed80f602457694dabe68b7::f7a1099ca3da56c950b6f5d2b6c39f6e95cafefd::66c438bfab542da4e2e0ba56507ca88537788184::7248d44de0300d6652fbb142f7bd2d2f22aef44f::30f03c6feb5fe5ea3cb8c4de889ef41df54d6b00::e76071d72e9ba2ffff4741210c9710fbcac69da9::67ee2733ae48f1a90dbc63c153ad3dfb2ae344f8::eda9f051c1a60b2d9c3bb1c4990e1fd7de01ae0a::255171e87b435f9d61d3cb28f90804573d369753::664ea94333102f5a06bbf7d408bea16154b1753d::8791fc1cdbf88a8354cf95e330d6b03ef3321709::51f6390197e5cdcef41c18aa4aca26293fe11298::a16b7f40347cf4b423b9c33ebebfcad13840c35f::eefe789ce2bda5db101b7656f31976943c31e118::718b5608792036a2f7705d1b21bd90334b495f1d::d610b848f178190a51ad20688d41316ec517f18d::cb7900e45200b35ae2c349ebcc3588651997e9d2::3f4435ccd5a981ab43d17f8a55c430fb881e4bf5::629164ab060952fa25ce72315c70f5f3c9f049c0::71a65f15dae75f051a769f2ee5a8152cde739a5e::139974a540327f598c12f804af559391dd78bf26::d6e43e25ff7ca57ff85342243fd072e51ae303d5::8078c1b39ad73173e63d764e1b249468524a9e37::def8356a136050cfab315448850c0690257a19bb::e35fe835e72da2adb0e5921b869ab96222eeecad::e99894f23202c5f735b133007a1cf05cc45197fe::8398ea68c0c358d65d32367e8795d486fcf020dc::3d29983b04e6400fe931ef2bed281657b6df86d2::6cd963b6688c11ebe7a655c13886ab3a9aa3817b::713fcef6acc18db5c42a6fe706abd4e2d6b1b2bc::80227fd2474384f87211e43dd65c25ed47e32c94::1cc648a729a90ddc3150a69f8a7e4a454448cbbf::97bbabd94789f006c2b9b4bfbc8cf33127a0abbc::e818a3fd23fc71d2499892d8d218ce031d1957cc::200b8137929ecdcbc36124cf9015d27d3926d7f9::bb395493044bd8803452d19155b8279f7025fb74::394d05656f4bcd255c61f8d316e0a8a1457dd2e1::90b1bdb00653c84ab8d8aed8276c6f9e945936a9::7f4ed908ac97e07c326a55a1f8ba9787d046372f::bcae2f2c15aff1b47b05e8f636fb846c07de1895::fec46bc868446fabccaeeaccfbaad8fc44f5ee6b::7f88b2c359cbae618ee922df4951ec6ac8ccb0c0::8f816dbd496756300b7b5328652edf08cb0a631c::4137472f4a955485a19038ef9f793fe042b738e7::8729c6380407dc8ae6a09bbc6525c74c39e62b87::5279e48afb2a174b42e75a1e700b6c62c7884926::f5bf3317f04b907343f48412dc8a9a8bc43358a9::f928df4c2d16a1e4f90707047d88eb9ad822ac0f::f160e4e5c314d1a71e38ec29c944e63a184663b2::f7bbec5491e46de01e33320efbdb3e0e06fe9c9f::059e36dd430b934d446aafaa455e1c8b56dcc072::780e74a29e7de2b8f758b941dac51089c465c611::8c5384316241248b32a5f5eef73811c9ab23dd19::f8895099c80d74b73aa0f456b33f203b079e71a1::718cb82c3468ad4fd70b1c79fb48bfe78863d19e::8edfd15e47e135fe33b807ab5b98fbc67ada2a01::e76410006b211722b451bc1a5a174b97dc67aa4d::c306dbc0ffcd204e82e5b5d8e4480fd05b5b7606::e9093a12ae98708ac46147d83292d59ea37e8a41::af420c6f31692bf949475997c2122b33d8c9cde3::d3096d8a822fbd4eb6338f3c8f622b43dcf0f41b::fd06f0574b047ba556e7ba3b299756b6b9248a88::447103c345e05d6fa9037d025ee87724a1137083::a2de5273fa5d318d88e57bf7ecc2e7f815d1c5c5::b86b4353f16da56dfbd72c2af733f5a7e67c07e7::843cfe8e56069aa20fc6ff26ac0cf19f7627ba9d::76cc5337252b571a3891bd0e77ccddc31ae1e06f::7834046e414d3606f5c3b70267eb08d61a88bac2::35e9ad46843d0ec905c480655d4479530e59a2a1::1ccc25f04d8ce8c1305ffa0eaeb455fe1eafa909::04643c313a576aa4dc2363ff8bba173662ffe111::9ee3f881b396302897b40f6987027d40478739ca::21388f9a468d86f85bd84cd40aa95161f024e157::df76714c3f69ca312bb44ab5e98987453a3001eb::b5e2c2ff2f563140fa707674ec0789e03951b170::5ac0cdc5b40611fe27da38ec3f7f3b042c38ec7f::a031553902986858c9257a72633294b3706fab55::811862924df6c1911e0956b56f24f7a8ba931f9f::e174444c8a9898ad654080a18785de6a928a7e0b::499fb01ebd9b0fafa7978c6818d410b8763af99b::b57c1f110d3d723f2c365ec8319036afb412ecfc::3212800fe9a05b8dad93def8f66097b400262ac0::f95275462e4b6448c55df35647caf75475f3a721::6c2eb8ac24371faf0e2d7ea41743bd6a915d200a::65278e4c0cdbdf857d8b5dd66ea2029946067d98::6b715cd79fb37b0977242f38d4f03763c1c28f3e::974f7093fb09ec7d991ad65070078f92f8486028::3793ebaa52bc57b06154b91cfc65804c6a10babf::86e6f430c84d618730a220501bf149532fd1fc36::e267492e461f54152aaea56910905a925c0fe6f4::64eee0473f641e254baf964d3392c5062694fe8d::5b3ea04f3de075645e92e95a52be1701f73e743c::a92abd2aecd20bb81e6fd7390e8b4ce9476c4a21::1a82cf6ae905847d0530b73660fdd949c30ab0ef::08b1586b0ca1faf17b29d5fc8fe65f419dc9d102::15a25ff38c8f20291b55188b14fc556ebc79f6cd::f039d97288478bb851eab1328709608dfc77cc47::98e50a8023f4dea0168168c70f63ff69c3170008::4ffd2a839d1ed3b0f19def777f1103e116cb3cca::15c443b3daca0757320c450756fc256b43efe2a8::997bddb8d50303dc87b640111b62f91d5386daff::93c3abd4104f56614f077cff82ae0fe4a2730adb::1aaf6f021e00db0c62e970df6b15102baabf7596::
https://api.github.com/repos/JuliaLang/julia,28759,nl/mbedtls::master,1,closed,external dependencies::,"Version 2.6.0 has a security issue, see https://tls.mbed.org/tech-updates/security-advisories/mbedtls-security-advisory-2018-02. Another option would be to move to the long-term supported version, 2.7.5. This would have the advantage that we will be able to backport security fixes in the future without risking to break anything.",77c6701ef5562252a5a3638db424a706b19c7189::b1b1d5528677dfd4ccb38ce7b9f124be93b4a43f::347f74125e5d9889487d77a63cfc3f4f3cc291ea::
https://api.github.com/repos/JuliaLang/julia,28620,jrg/logabsdet-singular::master,1,merged,bugfix::linear algebra::,"Fixes #28619. Of course, the ""backport pending"" labels are my opinion; feel free to adjust as necessary.",6b214514956339dd105855c2458b733b128a99f9::
https://api.github.com/repos/JuliaLang/julia,28508,aa/more-0.7-backports::release-0.7,1,merged,,,13d295cdf03844dfc9dc3c97b78c25b95650c72f::26e2ee41e7bb210446b6d9418bd267f1f7897b19::717832f67759f6881b19bc3ecd2e685127ea2dbe::b426525beb7eb18e9da39402e57fa76c29105846::e8aa6a165c33734890aa111ca1347da0607d8bc9::60a6485886afdff73eed95b3daa10f82f5917c63::
https://api.github.com/repos/JuliaLang/julia,28378,aa/wan-point-ohhhh-dev::master,1,merged,,"Now that we've branched for 0.7, any change that should be applied for RC2 should have the ""backport pending 0.7"" label. And with this, master is the initial development version for Julia v1.0.",60d48bf8b0498c1b155e38c841f40a3e856f48e9::f5e17e83bc9b8aefeea2bc0c2a968e0b5133083c::
https://api.github.com/repos/JuliaLang/julia,28105,fix/gc-segfault-0.6-backport::release-0.6,0,closed,,"This is a backport of #27020 to the release-0.6 branch There are cases (eg: when __gmpz_init is called from python via PyCall in a secondary thread) where ptls->safepoint is NULL when maybe_collect is called, and *ptls->safepoint causes a NULL pointer dereference and a segfault.  This change fixes that case. Included test in test/threads.jl that will reproduce this issue. See #27020 for backtrace and more details",3dd5e062003ae9e0287473f827b51e54ad217029::
https://api.github.com/repos/JuliaLang/julia,27921,patch-1::aa/backports-0.6.4,0,closed,needs tests::,for issue [#27848](https://github.com/JuliaLang/julia/issues/27848),be29d6e0f41818d6cfa89d0815cc418aaf06c66b::
https://api.github.com/repos/JuliaLang/julia,27739,jn/release-0.6-26982::aa/backports-0.6.4,1,merged,,"Commit from @vtjnash. > some lookup functions (most notably, jl_get_specialization1) > were bypassing the initial cache lookup, > resulting in repeatedly trying to re-cache them, > and wasting a small amount memory > > also remove some fast-path code for threading race conditions: > the benefit is too negligible to be worth the extra code maintenance > > (cherry-pick of e36ad5c5151d13a97a51d2ddb5ac1c50555c5595, PR #26982)",4fc783aa9eeb7e0a39d16a1dbc511d5e4a4a56c8::
https://api.github.com/repos/JuliaLang/julia,27621,aa/backports-0.6.4::release-0.6,1,merged,,"Still to do: - [x] ~~#27549 @JeffBezanson~~ Not relevant to 0.6 - [x] #26982 @vtjnash (see #27739) - [ ] #26514: This was omitted from 0.6.3 because it broke Revise, but hopefully someone can figure out how to either fix Revise or backport this in a non-breaking way. Help with either is welcome.",a6f9c6a5297e1ba8adddbed182738966ec075e40::79b32587ca9af7d3f8894e42d9ce8f05603d3fb4::93b0f7c1f7bf654d2cb8965d043c890ab8ff7c63::049cb5932451cd67da183544f68b51112bfbb16b::96c075a41991e9754e4ab5983afd95df17e32dde::161216ae862a299374ddaeed97bff326b8c20096::df1c1c939bf1c582cf040b5ad235933242aeacfb::24c36747cf90470f01c915188198e01b9f4a5468::532f31ecbfa1afd3a8b3113c41d6dd28e3677b47::37bb40d6a34b1c98a7552bf2adb3caca2137cb9b::7e4fa52f520078a94ca0287111d810e9fd3b7df9::156b0d7325fe737a52ac7546b042b2fd581993b9::
https://api.github.com/repos/JuliaLang/julia,27351,jr/typeinvalidationfix::master,1,merged,bugfix::types and dispatch::,"I still need to add a test, but fixes https://github.com/jrevels/Cassette.jl/issues/44 and thus resolves a bunch of the world age problems that I thought we'd need #27073 to fix. With this fix, we might not need #27073 to block an initial Cassette release (though eventually we should still probably refactor the world age mechanism such that #27073 is correctly implementable). We should probably backport this once it's ready. All credit to @vtjnash as usual.approxify is not a word unless you live in silicon valley.::I didn't write that comment, it's a good ol' fashioned jamesonism EDIT: just to clarify, I stand by `approxify` in all of its linguistic glory::",a849dedb1560a856d65cfd89180003ebc76ed140::6f990183c099763e4c3635ec0b3d07791ff545a7::d895350f23c9bd6a92f854cf5b96d051c19cd2ed::2cea47cb29fdffa76ac71d742175caf21ab8df89::
https://api.github.com/repos/JuliaLang/julia,27271,aa/testing-0.6::release-0.6,1,closed,,"Sorry for using AppVeyor for this, but I don't have access to Windows locally and building from scratch on AppVeyor from my fork would time out the build since there's no cache. FreeBSD CI has been skipped and I'll cancel Travis and Circle manually to avoid adding to those queues unnecessarily. Basically, the deal is that we keep getting a permissions error (`EPERM`) from `unlink` when running the distributed tests on 64-bit Windows. This has been happening on my backports branch for 0.6.3, but the error was first seen on #26897, which initially targeted `release-0.6` rather than `aa/backports-0.6.3`. That PR didn't touch anything filesystem-related, which suggests that the issue may already exist on the release branch. Thus I'm opening this PR against the release branch to test that theory. The change here is non-functional, but seriously, **do not merge this**.",e4006c6a415885b17ca4fa288d69f36f0136e47e::
https://api.github.com/repos/JuliaLang/julia,27108,mb/backportfor27072::aa/backports-0.6.3,1,merged,,"This is a PR into @ararslan's backports branch to fix #27072 on release-0.6.  It's a minimal cherry-pick of  4f1b479, which includes a number of much larger refactors.  I've manually added a commit to ensure this fixes the behavior we saw in #27072.",1b562d8fab6c0ee8fc4b120905d4281660dedaf4::ee8c0c6c5d89203376e474bb407234a68ab0dc2f::
https://api.github.com/repos/JuliaLang/julia,26917,stevengj-patch-3::master,1,merged,bugfix::unicode::,"This contains a bug fix for a serious normalization error (JuliaLang/utf8proc#128), so I would recommend backporting to all releases that we still support which use utf8proc 2.0 or later.",0aa7e49bdf1163dcae64487f938debfd8e4c6130::690a18eeedaca070130c18c7d67b479005de5d2e::c9696bd42bc0f708571eda154d7f2c14676796df::
https://api.github.com/repos/JuliaLang/julia,26915,aa/backports-0.6.3::release-0.6,1,merged,,"Still to do: - [x] #26839: Needs more careful application to the release branch, since the changes make use of changes that were not backported. @vtjnash - [x] #26888: Needs to be merged to master first - [x] #26902: Needs to be merged to master first - [x] #26897: PR up against release-0.6 - [x] #26917: Needs to be merged to master first Next steps: - [x] Nanosoldier - [x] PackageEvaluator Omitted: * CircleCI configuration, also omitted from 0.6.1 and 0.6.2. * ~~Changes to allow building on FreeBSD, also omitted from 0.6.1 and 0.6.2. I tried backporting them this time but wasn't able to get things working, so unless someone has a vested interest in first-class FreeBSD support for 0.6.3, I'll leave them out of this release as well.~~ 0.6.3 will have FreeBSD support.",a321e6b88289b9dc728044b298004b05f196f9af::860627f6df1e2e616fe53738eca6e7fbf201e2b2::fe2410a5d5ed747f5cde4565c3f7685649f510bc::539423e37a85ccedda48410312b05d9fb68fd604::f96b7abde4c705fa45e5a254d6df2f1e2d9a7ae4::bafff12d2d7acc9a9c7dd4518af1d1bb1e87cefa::f50b1ce82f513f36e2cf187173c9675bd1e75a21::1e59581744f9769d3e96d5c16f14ac0695362f1f::01a1dda02ea094cef2f4eabbe2246a61484e0364::c66a23f488859170658fbf190ec26c451b147ded::7f2876f5830ba301976a382f225ea4d23d241db8::04f788b1904d0070dd0bae271c8341dffdadf63d::076ae8f19059fe433b8fe8d4576db32f25f382ac::8fc364e83c59fba24d1cd7fdbc6328e1aa9d4ed5::fe59a2b2be242e1bfd94390dc51b7cfec6b97a29::4bfabb607b02bf0175f6042ad14cc09eaf80778c::199a204615abe90e356763242bde3df65391dd69::8fc030bb238f4bdcc062e0780061227841759403::c6a77bfa69d9f5fb2384cc428411ac6a3dbafb9b::177677d88533f5b8b3f14071d90c0cc6d0324c6a::4174f0a409938802d63a88881e9da12ff113cc1d::a83339562317ebb949a38c72beb6fea9e34d8154::3d27e2d1b13440e2b50a167963e0da4a6278beba::4530b55e96a9b43b470db94162b930e8881f51e8::51da3b578c1ef6fdd9ff896f02b01f1f7cda305a::e231870b7bbbd2398cb7b2b972a6ce7dd13d89fa::1b9900b35221df61243aea1ae60a9d16094f195d::ed27c3dea6ac546165c3cc6d427dafdcf600c492::828ea76a42cf6fc7993d98a681047b4bffdc7f02::47623977d7dd9617e240838dc55f757884797e4a::6e2e0e0dd59aa2cc2de2038266d3cec39520151d::4c243bfbe0407ced5b4355082ce8758da7dfed6d::1fea0bb5a86bff5acdaba72d95943b04fc419bed::9ef691676a3e47ff7b78411f307fbce69e029f93::7a836d157f69acad91cb36b797639d007fda3165::72c3e62ba2fbab5a7572269abe706217eb93c7e2::a286fe10b7cf8fe85a7e7209efad3b1d0b4b5c32::6c065b65f843ad9aabb436c9d6ee97ccac872160::3308f1f343d1e281b84f75a0fdb25168cacc4f37::57f742a9c0854bc5b2370aa8e7b5b56e0e74a82a::ec77c3db7176a1a0c28f93ae623872941d3e7cac::2583e047072c35e724e80fa35d6a987437522f61::
https://api.github.com/repos/JuliaLang/julia,26831,uniregex::master,0,merged,bugfix::unicode::,"Fixes #26829, fixes #26199. To backport to 0.6 (or earlier versions … this bug has been around for a while), replace `endof` with `sizeof` in the [corresponding line of `regex.jl`](https://github.com/JuliaLang/julia/blob/93168a68268a2023c0da5f14e75ccb807cc4fc35/base/regex.jl#L338).",3b643b01c73af03fa606e6e1879d871e2f9ddc54::
https://api.github.com/repos/JuliaLang/julia,26392,anj/spqr2::master,1,merged,backport 1.0::bugfix::linear algebra::sparse::,"Fixes #26367Seems easier to define this as: ```jl size(Q::Union{QRCompactWYQ,QRPackedQ}, dim::Integer) = size(getfield(Q, :factors), dim == 2 ? 1 : dim) ```::Also needs a test for the `QRCompactWYQ` case?::Are there cases possible, where Q is not a square? So ``` size(A::AbstractQ, dim::Integer) = 0 < dim ? (dim <= 2 ? size(getfield(A, :factors), 1) : 1) : throw(BoundsError()) ``` was correct in my opinion. The definition of `Matrix` could make use of `size` in this way: ``` Matrix(Q::AbstractQ{T}) where {T} = lmul!(Q, Matrix{T}(I, size(Q, 1), size(Q, 2))) ``` The changes in `SuiteSparse` are not needed in this case. ::Line 530 now produces a runtime error in the dense case. Also test case is missing to reveal that.::It's unclear what ""Line 530 now produces a runtime error in the dense case."" means. If you have a specific example that fails then please post it.::Regarding your first comment then Steve's version gives the same result as yours and mine. Steve's just reuses as much of `size(Matrix)` as possible which is nicer that my two if statements.::The problem in line 530 is, that `T` in `Matrx{T}` is not defined: ``` julia> A = [1 2 1 1 1 1 ; 1 2 0 1 1 1; 1 2 0 1 1 1; 0 0 0 0 0 0]; julia> F = qrfact((Float64.(A)), Val(true)) QRPivoted{Float64,Array{Float64,2}} Q factor: 4×4 LinearAlgebra.QRPackedQ{Float64,Array{Float64,2}}: -0.57735   0.816497  -8.75605e-17  0.0 -0.57735  -0.408248  -0.707107     0.0 -0.57735  -0.408248   0.707107     0.0 0.0       0.0        0.0          1.0 R factor: 4×6 Array{Float64,2}: -3.4641  -0.57735   -1.73205  -1.73205  -1.73205  -1.73205 0.0      0.816497   0.0       0.0       0.0       0.0 0.0      0.0        0.0       0.0       0.0       0.0 0.0      0.0        0.0       0.0       0.0       0.0 permutation: 6-element Array{Int64,1}: 2 3 1 4 5 6 julia> Matrix(F.Q) ERROR: UndefVarError: T not defined Stacktrace: [1] Array{T,2} where T(::LinearAlgebra.QRPackedQ{Float64,Array{Float64,2}}) at /home/julia/julia/usr/share/julia/site/v0.7/LinearAlgebra/src/qr.jl:530 [2] top-level scope julia> VERSION v""0.7.0-DEV.4516"" julia> versioninfo() Julia Version 0.7.0-DEV.4516 Commit 1886be7a83 (2018-03-09 14:38 UTC) Platform Info: OS: Linux (x86_64-redhat-linux) CPU: Intel(R) Core(TM) i7-3610QM CPU @ 2.30GHz WORD_SIZE: 64 LIBM: libopenlibm LLVM: libLLVM-3.9.1 (ORCJIT, ivybridge) Environment: ```::Thanks. > Also test case is missing to reveal that. The tests did reveal this though.::That case should already be covered by the tests in LinearAlgebra::",6eac6787a19c927efdae8be51d39cfa915960fbb::667a72d15da11818b4c06316481b9a5a4baa4b89::
https://api.github.com/repos/JuliaLang/julia,26272,vc/ppc_ctr::master,1,merged,external dependencies::power::,fixes #26249,f7bf6b00752ee76bfab79f0268557d01e85617dc::
https://api.github.com/repos/JuliaLang/julia,26213,vc/fixup_soverpath40::master,1,merged,external dependencies::,noticed that the patch for #25597 also needed to be applied to LLVM 4.0,348b67ff5afdb5522317385bf5371f92ee9466af::
https://api.github.com/repos/JuliaLang/julia,25794,tb/llvm_capi_fixes::master,1,merged,,"This backports D26392 to LLVM 3.9, fixing nullpointer dereferences in the C API. `llvm-api.cpp` already contained a partial fix, but I was still running into issues with CUDAnative so decided to backport the proper fix instead. ref https://github.com/JuliaGPU/CUDAnative.jl/pull/151 (triggers the additional nullptr deref)",37eca7e8e33c4c50c11f078e2ebc4a098a0fe6d4::37370efb33ae84eeb0cb4f0f6426a27bcf512b96::
https://api.github.com/repos/JuliaLang/julia,24975,aa/backport-curl::release-0.6,1,merged,,"This is a backport of PR #24261 to the release-0.6 branch. I observed a pthread-related failure when building curl on release-0.6 on the buildbots, so I figured this patch might be necessary.",aaed34c51c5b131d95a825de969c0009fc71d510::
https://api.github.com/repos/JuliaLang/julia,24904,cb/resolvefix::master,1,merged,bugfix::packages::,"The third commit fixes the assertion error which popped up in METADATA: https://github.com/JuliaLang/METADATA.jl/pull/12306 The first two are general improvements; the graph gets simplified much more, and the sanity check is also made more robust. It's also faster, as checking METADATA went from 60s to 45s on my laptop. All commits together should generally help considerably with the issues which have popped up in METADATA recently. They should also be quite straightforward to backport. I have other improvements in mind, but I will do them in Pkg3 (once I have ported this there, and started harmonizing the codes, cc @StefanKarpinski, @KristofferC)",9b000594732df19ad02d034d8fe5749cb74992b7::114e82e22c686a75b78615f9c707a6f49d4516cd::450c8c4edaa1e996aab46f9c954f10de75b4399b::208f633d4b5d820b202291541ab73ba1cd3f89f9::
https://api.github.com/repos/JuliaLang/julia,24747,teh/linspace_inference::master,1,merged,collections::inference::,Ref https://discourse.julialang.org/t/type-inference-on-linspace-fails-when-given-float32-arguments-on-0-6-1/7281 **Not** backportable to 0.6.,6f8a7d3f25e4add9f761f0ee214d6997226a8b09::
https://api.github.com/repos/JuliaLang/julia,24682,tb/llvm_api::master,1,merged,,"After having let users struggle with source builds of Julia in order to run LLVM.jl -> CUDAnative.jl -> CuArrays.jl, I think the easiest short-term solution is to internalize the LLVM C API extensions and build them together with Julia (these were hard to build because of a missing `llvm-config`, C++ ABI compatibility issues, etc). Because even with BinDeps2, it doesn't seem like building against the Julia build tree is going to be easy to support, and it also doesn't fix the problem for people who run `make install` (`llvm-config` isn't installed) or use an external package manager. Putting these API extensions in the Julia repo restricts our ability to iterate freely on LLVM.jl, but I guess that's the price to pay. Besides, the set of extensions has been relatively stable, and future extensions might be considered backportable in order to get them out there more quickly. Most of these extensions should find their way upstream at some point, but I haven't got the time|motivation for that (esp. with us sticking to 3.9 which would then require additional patches to be backported etc). Rust has a similar set of extensions: https://github.com/rust-lang/rust/tree/master/src/rustllvm Ref https://github.com/maleadt/LLVM.jl/pull/68 TODO: - [x] format the code - [x] make sure it builds with other supported LLVM versions: tested with 3.9, 4.0, 5.0",dae58835eafe7686c3d2fcfae43626676656b8f5::348e2b327d5f17723c8f7ad3b0d4639c5c979eda::3b9a029c0fb6a6b51ebb1841926eda2f3c020ceb::0656b5b8222cf6451a7792674f2de4e93a1732f7::
https://api.github.com/repos/JuliaLang/julia,24519,aa/backports-0.6.2::release-0.6,1,merged,,"since we're backporting this commit, we should make sure to also backport the follow-on fixes to it: https://github.com/JuliaLang/julia/pull/24537, https://github.com/JuliaLang/julia/pull/24575, and bceb764ba3c884bf791ef9a8e2c3144af496a069::",cbdc2242d9118d883d3c4904f83893eb8b65f450::b63c98c844a1242f3020eeaa02c49d4ccd770b6e::0379efaa35d8c2fa5b8efddee081caa440993a78::67ea744c717c3e1f9c10bf32caf2602a733de643::614547f02fe8ca1814d5ebf29eab440c8d064e04::b1f399cd7eebbaafcb9b1135e6641e6b262e1c2f::2f409e6d6c29cb30061814619ca52f96413913e3::4ba27b924ee83dcd1a29f5385c8c432fc4a68dd3::fab29e9170cf1e5cb8dd6ba716355271b55b6ec4::d8ae4be0fce730aeae2b8ff5653bb377e236b554::c7a63d971370dbada16d6e004ed51c343f2f9966::83234e8b50cf375a5183efd85c3dd8f3b933c8e8::10392dc8a37c078111c76ce298b58c3d45f08675::cbfa82eddbffe1cc07b5dc7f8860536850d0dbf4::0b2c53bc81584ae3d471576148bf8f2bf69c4e80::2500378cf47ea152dea59993b1b8bc82830a4e8f::5a3cbdc069a974f6cba4a520c6ca25b10e645ed8::f2841b5dd93ead15637cc1445549ac206a40864e::ee355384a0b7bdf326e33efb6b126438ba97cfff::c26b271be0c8b63e992494e1bb5ca827008a97cc::a10d6f7ff2f0fdc51711c603d7b6257e44f7a36c::5cd144ffa328fdd4cd9e983b616c7205f9bb4f51::d05e152b18628184823bd07497a9f53464333d74::b13ae0fe1c9399a506a19da334fe5db6cbefd431::30b3625fa9733a59e0fc886bb0f397fd024908b5::d4683016c1222a92f80df28329c66e77369712dc::298421fa0a8fb37fdeb32239ed504cf13aa5e015::03638e3468abdc63b27b0c025239fb79ef0e71aa::b109dfedbcce99898e77ca67596b88a999eee9aa::c4d489802f0811dbed1a6de157dfde9026d504c3::ed6b7f9ddbfe0a3d7b6b9b7ddd192e43af11b03b::d6acac2b8449ab8d93f8f420398c39a6f2e31e2e::d6fd53c9019502e2cf6240ee97ab3477cd417d31::06623d7d27264e487839d9ad4770f36a999fcffd::0ba49ca89ab528da62b511b5a017225cf9f52e00::d2ee1a7b73e3681294911efb691d5796d983586f::c10fea82431c46ec872cccc42b49862e39b104a4::7809470083a9d047df1a730bba095703c24a085c::c59edf9db79e12f1e03204e1b4e95dcf85490a7d::0f12eacaa1f8510f0aca838d4dbbd98fbae30566::7d0840ce4824127b65a41dc9f61a0d4e93f8b48b::efba001b9159b617ae2dd260b69496bc2556c8dc::3522df129cf4ab870eb0fef6f6eb6f975f7e59a5::6736f45eb1b270642ed12e0f6ec1b71f491b59d5::
https://api.github.com/repos/JuliaLang/julia,24484,fix22355::release-0.6,0,closed,,"As found out in [this comment](https://github.com/JuliaLang/julia/issues/22355#issuecomment-320861845), backporting the commit of this PR fixes the issue #22355 The issue can be easily reproduced with the method explained in [this comment](https://github.com/JuliaLang/julia/issues/22355#issuecomment-320586238). I checked the latest version of the release-0.6 branch and the issue was still present. When applying the commit of this PR, it disappears.",6de79b02f7a37a527949cd478d7d1131b3cb97b1::
https://api.github.com/repos/JuliaLang/julia,24401,aa/releases-diy::master,1,merged,doc::,"This PR adds a large section in DISTRIBUTING.md to document in great detail how to make point releases. This is basically a more wordy version of the notes I was taking while making 0.6.1.There seems to be an inconsistency here: either it should read ""we ... our"" or ""you ... your"". Or perhaps better: > To do this, awaken the Nanosoldier from his robotic slumber using a comment on the backporting pull request::you shouldn't publicly post the password to a certificate::... 😐 whoops::perhaps I'm stating the obvious here, but that password should now be changed on the image as well as here.::Yes, both have been changed.::",c5c69cb82b839503c6a90ffa2503cba90b0786e9::
https://api.github.com/repos/JuliaLang/julia,24265,aa/revert::release-0.6,1,merged,bugfix::,Reverts commit 4aa8d72bcdf162de33d663f4519b4d30d8d374a2. This change was causing SIGABRT in certain cases of ambiguous method definitions or serialization.,d7f0924dde83ab2e5f088c4390538092307a26a0::
https://api.github.com/repos/JuliaLang/julia,24075,jb/fix12806::master,1,merged,bugfix::lowering::,"This is easiest to handle during linearization. The approach is to keep some state describing the currently active try-finally block, and have `return` and `break` update that state to tell the finally block what to do after executing. This could also be extended pretty easily to handle arbitrary `goto`s. Some test cases shamelessly stolen from #13660. It's not totally clear whether this should be backported, since it could subtly change the behavior of a program.",32a7376f5e1f45752d5281ca2f38b3aa11c4c69d::
https://api.github.com/repos/JuliaLang/julia,24025,jn/libgit2-gc-bugs::master,1,merged,bugfix::libgit2::,"I don't think this can be backported unless this non-kwarg method is preserved.::I doubt it matters much, but we just leave this part out of the backport::Then I guess the backport would have to be a separate PR against release-0.6 rather than a cherry pick from this commit?::Also, fixing this bug requires changing the struct layout (and thus access), which is even more significantly breaking than this method. But like Keno pointed out, the GC was also completely different, so I can probably make a much more conservative fix there that assumes specific missing optimizations.::",1bbfdc6a2bd26f019a3c2cfaea6ab3f2fbd0057f::
https://api.github.com/repos/JuliaLang/julia,23723,mb/trailing-zeros::aa/backports-0.6,1,merged,arrays::bugfix::,"This fixes issue #23629 for 0.6. It is done independently from the fix for master (in #23628) due to all the deprecation changes. Cc @ararslan.  This should presumably be re-targeted to your backports PR branch, but I wanted to make sure tests passed independently first.",8ea10d3432bfe0b15e6c2c2a07209632d829f964::
https://api.github.com/repos/JuliaLang/julia,23686,teh/offsetlinindex::master,1,merged,,"Fixes https://github.com/JuliaArrays/OffsetArrays.jl/issues/27 For the backport, change `AbstractRange` to `Range`.",afd56a6cec47fbb52777cecaf897fd80739631fb::
https://api.github.com/repos/JuliaLang/julia,23683,jn/release0.6-isa_tfunc_bugfix::release-0.6,1,merged,,"previously, isa_tfunc(DataType, Type{...}) might return Const(false) (cherry picked from commit cd959a25e0eebcda0406573def0ec401caacde15, PR #22779)",873152bd774b6a185f0e0852ffa40f7d1f4409e2::
https://api.github.com/repos/JuliaLang/julia,23670,aa/backports-0.6::release-0.6,1,merged,,"This is my first time doing this, so it's probably an enormous mess.This must be the cause of the repeat regression, @pabloferz ::This is a necessary fix, it's meant for the case when `A[c]` is itself an array. I can think of a way of trying to preserve the speed for the cases when `A[c]` is not an array, but I don't know what would be the action to take with regards to the backport.::https://github.com/JuliaLang/julia/pull/24022::",88fa433bdf8330f5670c99c9d67629cd2ef25a7d::e4dc00cacd2f9cd4663c25878bfb687564ce968a::d02d7343867461308d3b2a87d15467227ab8822d::c1fe105db7be7049ffd55fa33d5e20e164abe6b1::a50154e36641fe929c8f974ad762630655cf18be::152f81405e796280b62beb7e1616e78cc8ab13d3::8b3ec359d084da6e86ba716c385717bd62e968a8::4aa8d72bcdf162de33d663f4519b4d30d8d374a2::b8cf285645016f62768bc5afdcb19cae6301f695::718828b9c050e70ca59281d9c5aae06d071809d0::acba61a2a50b822e097d8dc2f78d079d5a991c76::29cc5b0424cc4ffbca2b30ddd6bef0f9adc7d969::3e6545e761a5ec24df82917a2d177dd0ddf22c20::ca44bb37b579fa22a83281b87d83091bf53f512a::9e76e657736a5f1b8125c98fb247bbd6836dd71b::34e485c591cbbabd2c1a0cda8f4127cb007613c2::2389523c52dd8a67096c6318bd8b270b5ed0fcb7::96ddec8f4bad8860a710ac14018d981d1688566f::464079a84674e444fac98c591f9f123cb50bbcdf::e205c0f566c8d3b63db90ad2813236357aef88e9::21dcfec061746bfe8933c92b0d1759d47e988c55::cdb53359d8064441c051be2ac5735e391945c2f1::7bbc17cb5d89ae472a75358889742276c0bb4960::8ff738e0c2313b2a8be80ace07b87ed858638d2a::2a1b86e99f5801a14e8463a08eb248afbd3c3caf::60c1351b382e02744b7975a1810c407043f52217::5ac4706b66063b50a88675798f925872d6eea4b5::50c3588c7a6d4abd3c9005de61de350ee6ac7c0e::e8ed71232b38a34635c0f84492b75872b622e305::78831902cc412e298c5fcc94dae1e4382c8e7cd0::b51fce7a43d705e0c6e3df280a7e1473fb813bc5::eb8cbce05ea450260f2d4b9d81b95450259342d9::7da0638ec1208c2437392a1a70985e1619d67bec::bb81ca38a117164283aba0df5f95e88278fdcacc::585f387700a34d98940fccd4a6619adb89e0f15d::875bfceddf8f922e748d118c3213ad03bc0f0359::656813da2ce44d24148649babe897be56d2ac4ee::46e68a9ee4322c9e8f011bfafd752a125f20c653::b2feda0dc4266994b69406cd739e8ba8cc1a927a::015cf6d9d78c59d7f01cc3495e0fb19e9d60c2eb::48e850efcd67de7e48b8f4918f91b056ff902f0a::524ec4abb0b42be1f5f3329242908dd22b69920d::5496bb28add44209b0a6ac56bc3dbaeb0d09a7cb::7347c57a77cc196560177e62390f637d86f65727::a5d70fe11ed6b4c7c79445a9bf8bfd61a58cefd4::46e176d76a8594af1f704c7e0bb7c5bfdc0578f7::fb082ccd3a8d8b7ac3cb7deedc78867b3898c634::20558e12f57f28a85f7656aab0d29d2474b43bf6::856e413f3e42d4884985c540d7fcf5f724b2b401::776be41c26c46d4201c89f33d0d8bece13b4df8f::7994c640c14adbd4f696468f4bc8925560a29285::c1cbc9855bbb76bf3986998ded925d5e635e4fe0::25d23e41061245932b3f7bee3e14a025adb16005::9db7fd942a0a33ff246d72d797554c848b8a7f27::5961643ae835e8a6fe63cc9739887c9c8c12d9d4::bd8ca6305b3364436d6a99676b7a2df15f2db0dd::2a18f3383e436f507c80e5d1df79bc8725cf05ce::2548c22d8dad7ad3531160fcfda1d3e0c038e18b::f01ad7f954b62fe2cb87e853b17c5bae75411920::9950d82fc67fd07b34be025b027b84697821f9e9::b5adafb224f390fa403cbbbcec96120957bbd0dd::d79a2ef8fa4954019321ba6c79de420b57ccfcb7::9c5f8e31c2537f0aa7f78c36d6e8483997e22c17::262de92e24bd292b9018ba567fa7cfd6ded500f8::2f580779f511a7e0d8e7cb450cdfe79627495a3a::dcf7ff337fda11e43c085e2b9af7bdc7f1464e51::21ba42ef2a16941eac8b510c58388d3c4a813acd::bd22138c369e0abc5d481727685f562b71bf2cc9::dc839597735d5ee68fdd9c4d70e524954d677d99::01c61bbe7def730a47e083bc05baf831b1aea165::2f64bb0186a2ced6efb75daca2d66b4ca593246e::17c4a243444785f1d97377194a2586f9340ff104::bb2a918f59b0a1cdd69044233775dec1584465bf::98158c10185bdee6b5bf431b9c0930c44cd91492::8e610d5f5caa5bc52ba041b9e777a67a950748dc::2780edb84ac175c70dbab869b8d60ac621802539::1aea74e97d55950d87ad08b912e44c23ae15805b::2fe7cb97307605b7eebb913eea1b81f99bb0e552::815a962f066fd4c1d24162a3ba8d0b0a6a3d1a16::5b8476959c6702a6e4fc9b1d055391d3204f4a5f::2c2f577283c3cec86aea8c4394d012eaf72cf3e7::269db8efd673b52da5b654fd7756057baa226a8c::7861fe817db6eac617fd46861c6501b44f4e287b::65405cc41ae3a169ecd31b7d7f070e1c4ba2aa16::9b348ff635a1e59203236c83d3f287ce44439c56::44a6ad3bc1ceed98bba967760ffdd14123cea659::1a1ef7ac9c1b06eff10f5a2a83e6e48b22c770de::f65127745b9a0e2aa8729048a45cae8cf7d461fc::
https://api.github.com/repos/JuliaLang/julia,23363,yyc/build/cpu_target::master,1,merged,build::,In order to allow special characters. This is a simple backport from https://github.com/JuliaLang/julia/pull/21849,916bdaaabce8fe48d6fc2cb28907004e47245c8d::
https://api.github.com/repos/JuliaLang/julia,23353,yyc/typeinf/new-type::master,1,merged,,"* Fix effect_free for `Expr(:new)` Check if the type being constructed is leaftype and check if all fields are correctly typed. The expression could throw an error otherwise. * Fix functions used by interpreter and codegen to check field types This is another backport from https://github.com/JuliaLang/julia/pull/23240 where the better optimization causes the test a few lines above the new ones to fail.... I think it might be unclear that these tests are even valid syntax. It's not a valid AST construct (cannot be produced by the parser), so I think it could be considered an accident that lowering accepts this.::maybe should use `instanceof_tfunc(typ)` instead? That'll handle `Type{T}` also::`&& !iskindtype(typ)`::This is a valid AST that can be produced by the parser. I just use this syntax to avoid having to define a convert. ```julia julia> struct A end julia> struct B a::A function B(x) new(x) return end end julia> Base.convert(::Type{A}, x::Int) = x julia> B(1) julia> @code_lowered B(1) CodeInfo(:(begin nothing #= line 5 =# return end)) ``` ::Yes, it seems that the front-end ignores `new` expressions that it didn't place in value position. The parser shouldn't be directly generating `Expr(:new)` however.::Looks like the line https://github.com/JuliaLang/julia/blob/db88dd1e906085c14d1cb9f0376c26f0fcf109c8/src/julia-syntax.scm#L3481 should just be deleted.::Added this but can this actually happen?::",306fef7a5b2fbd10c31aa292ac2e423cdd452164::
https://api.github.com/repos/JuliaLang/julia,23352,yyc/codegen/memcpy::master,0,merged,,"* Create emit_memcpy wrapper. * Simplify handling of `jl_cgval_t` on the caller side * Do some optimizations to avoid emitting memcpy for simple types. These can cause LLVM (e.g. SROA) to emit unnecessary bitcast's that interfere with other optimizations. This is backported from https://github.com/JuliaLang/julia/pull/23240 where I saw a vectorization regression due to excess `bitcast` in the loop generated by `sroa` and `instcombine`. Not sure how this can be triggered otherwise. 1-2 cache lines seems to big. Wouldn't 8-16 bytes make more sense?::Code of this form is why > These can cause LLVM (e.g. SROA) to emit unnecessary bitcast's that interfere with other optimizations. happens. The desired type of the slot (float<N> or int<N>) should be an argument to this function, which should also help make the logic much simpler here.::1 cache line at most? This is just the max vector size we need to deal with atm.::AFAICT it happens because of the pointer bitcast to `i8*`. That's why bitcasts are removed on the caller side. On the caller side, after the bitcast to `i8*` is removed, the desired types are already in the type of the pointer.::",249d629d11e29dff1a03cbb3ff0cfb266d15bd6a::
https://api.github.com/repos/JuliaLang/julia,23348,teh/fix23300::master,1,merged,,"This is a backportable fix, can rebase https://github.com/JuliaLang/julia/pull/23194 on top of this after it merges.",1c2e689dd476e507fca2e468c1de82e88cfc0808::
https://api.github.com/repos/JuliaLang/julia,23241,yyc/fixup::master,1,merged,,See commit messages for detail. Most of these are backported from https://github.com/JuliaLang/julia/pull/23240,61d3c50d4c29a429abf52293f0dcc4d9bd35532f::cfe3fa7834bd99c861b53d19a0a1b12528fd713f::34a606fc5b892b817d25b09cfa4ed7412aa3c552::8f8c951c907841c2711ea1c941b7606834417294::
https://api.github.com/repos/JuliaLang/julia,23056,jn/isdef-tvar::master,1,merged,bugfix::,"I assume `jl_is_typevar` should never be true now, but will be in the near future?::yeah::why give this output a variable name at all?::this is actually a backport from another PR that'll need the variable::",cff4f5531ff564c76897f2b0e8f73ecfbf495bd4::
https://api.github.com/repos/JuliaLang/julia,22527,fe/where-deprecated::master,0,merged,,"I think it would be nice to show the new syntax in the deprecation warnings. This is mainly for backporting purposes (since the 0.6 deprecations will be removed soon enough), only 0.6 deprecations are touched so this applies cleanly to the `release-0.6` branch. Feel free to change target branch. Master: ```julia julia> v = rand(3); map!(sin, v); WARNING: map!{F}(f::F, A::AbstractArray) is deprecated, use map!(f, A, A) instead. Stacktrace: [...] ``` PR: ```julia julia> v = rand(3); map!(sin, v); WARNING: map!(f::F, A::AbstractArray) where F is deprecated, use map!(f, A, A) instead. Stacktrace: [...] ```",c1f46458774a096a4070c8aa678f82df49a16e22::
https://api.github.com/repos/JuliaLang/julia,22451,yyc/codegen/no-pic::master,1,merged,codegen::,"It was added in 7723bd20b599af78ac975dbc7173f2e5effd0af9 to make TLS access work. We have since changed how we do that and shouldn't need anything special from LLVM anymore. This was useful to expose (and be affected by) LLVM bugs though (i.e. https://reviews.llvm.org/D34409) Running tests locally (well, actually remotely) to see if this exposes new llvm bugs. Ideally we should backport either this or https://reviews.llvm.org/D34409 to 0.6 but seems that people don't really run julia in an environment that allocate data and code section far away so maybe we can wait until someone report an issue.... since this defaults to `PIC_` on many platforms, shouldn't this be forced off to static here instead? ::Thought about it but couldn't find what's the default... I can try it.::Seems to work ;-p::",a312d8713d81041965e2325ab3e2afc36ccb7a3f::
https://api.github.com/repos/JuliaLang/julia,22398,tk/backports-0.6.0::release-0.6,1,merged,,"- [x] pkgeval - [x] @nanosoldier `runbenchmarks(ALL, vs = "":release-0.6"")` vs rc3 - [x] fix appveyor - [ ] build:dog: #jlbuild !nuke ``` Base.runtests() Base.runtests(""pkg libgit2-online download"") ```",306d2ad8a781c63068647b93262dd4192a462537::440799c98ba51ce0ba48175accb04218d93c67dd::f9aaacc5e63a70e5a90a23ab7773aebc83bbc7a3::7d1ece47489dbaf3568ab15258fcdd914db61fa0::25d8c3a00948a90a582cfa918b5660f6426870f5::716cf0291b9ead63fa23ef17e05a3f8cb1f60056::e8e417b7d3488358eeb63164ae341cc0196d02ce::06dd3e0d02404c406c7c5be32e6a88b3591243c9::e11880e9f9df3a645831f91fdb53cb4dfb93bd84::91d83c30a7a5108ed2cc133777c110f528fa852b::3fb6535b382953bd1e775ac6ed2ac15f9ee2820c::97fb5b1b57d3e98f98142fb121e7d3258e73afb6::b629d03515d0b4c2f0be393ddef749f6a118b92b::3f02ae4a7dee235016a888687872770611772f4e::2c2cc86978d10cc8505aec25346a5dc75d0c1257::b48343278dde51831cab3b9626efacb2771d3437::82c25d9b9151f27bf56659a6371d90a58c3b6e66::7e8c0d32ea8b26ff98d3b21c6b63ec842ce3c65a::23043ce5fc391a234a09e91d6842bbbe96ab6aa6::4e442ec2fda0bc0c8a9b4332a4f57133fa57a641::436e16619a65a3abc5d57e78b4412b93cfb08c36::26e47d4397aa0d38787b372617a885d10647c101::6d0de374897c525ad6daae9e93ab9ec73c3d2bd8::5f8df4354b393d694601976a4a7f286db22c8b7d::afaf174e7bddd6e8d6e51192287a259b6d1baf74::a93d4a49946ef227d1c7cc36432fd615facaedff::eafaae7a3a6724940dc24e652fc2aeff0a207ec9::722bcae4528dffbfea788f0ef00e5ad00d0935b4::fe65eb478205dcdc9870bcf51de180533c4d84c8::4a9354209a21557e05cb41584bba09fd5607eabb::4e067736db2324a2070342fdb727a8771248fb4f::
https://api.github.com/repos/JuliaLang/julia,22386,jb/release-0.6-specificity::tk/backports-0.6.0,1,merged,,"Currently, if you do `using ColorVectorSpace` on a debug build of release-0.6 you get an assertion failure. This is a backport of #22162 that fixes the problem.",7d1ece47489dbaf3568ab15258fcdd914db61fa0::25d8c3a00948a90a582cfa918b5660f6426870f5::
https://api.github.com/repos/JuliaLang/julia,22306,jn/improve-static::master,1,merged,,"if this is linux-specific and not needed elsewhere, would be worth mentioning that::It's up to us (well, and sometimes the platform ABI) where we decide to implement it.::Sure, it being linux-specific is only reflective of the current situation, will not necessarily always be the case. We should update documentation when the documented code changes in relevant ways, as usual.::Of course. The point of this being an opaque macro though is that you can just blindly use it and depend on it doing the right thing. Almost worth including this in v0.6 backports just for that convenience, but since this commit is only about ergonomics, it's not essential.::So ... we ~un-exported~ removed jl_init by default without even a NEWS entry? ![image](https://user-images.githubusercontent.com/327706/27045703-c44570e2-4f6f-11e7-89c3-dedcbd87662f.png) ::Would be nice if we could use a different mechanism for this check.::This is rather annoying when you dynamically load libjulia.so and don't know whether to call jl_init or jl_init__threading to initialize Julia.::",37395031a782292d926da6eeef7d44cd77c32183::
https://api.github.com/repos/JuliaLang/julia,22301,fixspvecvcat::master,0,merged,bugfix::sparse::,"Fixes the first part of #22225. Best! (Probably should be backported alongside #22299: #22299 fixes the second part of #22225, but makes the bug in the first part of #22225 worse (wrong result type -> stack overflow). This pull request fixes the stack overflow.)",8b1bd5ae33b682fbf800a23e3fc3ab8107bd5286::
https://api.github.com/repos/JuliaLang/julia,22205,yyc/build/llvm-xmm::master,1,merged,upstream::,This fixes a bug in the patch that fixes #19976 causing encoding error on 32bit x86 and segfault when AVX/AVX2 is enabled. Ref LLVM bug report https://bugs.llvm.org//show_bug.cgi?id=29010 LLVM commit https://github.com/llvm-mirror/llvm/commit/83260f239481dfb40d325cf35005c20eeb767b6c Also ref where I saw this issue in https://github.com/JuliaLang/julia/pull/21849#issuecomment-305950641 Should be backported to 0.6 since the bad patch is included in the 0.6 branch. Win32 LLVM binary will need a rebuild. (AppVeyor didn't hit this issue in https://github.com/JuliaLang/julia/pull/21849 since it doesn't support AVX2).,5a424741f5bdfe8993989bd9e05b384820228f72::
https://api.github.com/repos/JuliaLang/julia,22199,tk/backports-0.6.0-rc3::release-0.6,1,merged,,"- [x] @nanosoldier `runbenchmarks(ALL, vs = "":release-0.6"")` vs rc2 - [x] build:dog: - [x] pkgeval",1508d44243712a217360e0d0a4e882ff6c36edda::9f699bac2d12bbedc3bfca92e336f22abb298efa::5c1a88c203a57f7ab7211a525a7b87484d7898c9::758c817d4488b13a99add6a0fc8c570890bc3470::fb3cdff80dadfa64caa8148be372506dc72cb42c::effa3bb1e6ef17947fdc7936258213dce180bb8f::2ec983d7651549a1029440c860db1dc027fa9680::2b4d7fe2be18a8546dd3a7d79b8b32477c2f1924::2d9d5d30e4085b1c137199002c4994e3bf2c1c9e::dda1373680a15dab34744ca4fad1981034ac0f86::787bf7b60be63577b8deac3ca5a05ccaba6459a3::6b1f2574e1feeb3ba4ba50c0a5c929fc5f217820::0b1e4eff8ada1818d3d1590d11129d8c8382e86b::544694ab9cce817465f38e35a00e14e90f1de63a::a8c6e6d5138edaf550b871ed44f5b1d852873057::8d66dbd0ee71ba6fe5d0746ad01de238f2ee3527::76125023d622fe73582954139d605b3a496981d7::cb78b63f7cd32b33d721c383f612df42da816e57::acf0c7c3c676591a277c7d7aa591302cce5fc141::9129a3c4060686b3b1866f12b98f419f832d7f1b::6b7f68bf9caa0004191536b59fefe1a007051c2c::aea6a50a7ef5dfd22c42866944fb868f118786dc::57ea815cbe3a76d19a76660efbc07b3f8ce25259::9851e7962310ec371804b1f9c8d9609e94ae9bf8::8479b7b47250530219c5a2db4530442c27a191c6::f9fb392ba5ac36e86dce17dabdbda2e4ad1cd5c5::eda7690a684cc9d0352dd47fa98b45375509ccb2::8520a55814ac865818fbbc9bf1114bf61d93c795::da8185829c87a1506677a5c5ca0df7e0c73c703e::a4f54e811284fc843778f4dfcc94c05a49494a75::0750dde6e2fa6135e3396d64577625f1b2014f47::c133bd9618ca88a772ca92eb72cbae06052a9b19::2ad58d4bd59e58516ff2d81362b463f4fc3bba02::f33534cab14f06f5023759b31eda62c79f7c9ff7::a3bd7ad5dd59d892b6a9bff7ef9b499793372594::1267d7531cef50dae92d074ff632b254321982ad::24a8eefa8a69f8ce11600c93c3d4f5dcfa1ff0a2::78696ae635beaad917e26f01288ffc742d8955dc::50d53bb1261058c0683d1aaf420a8f3bea650c35::40ac20bdaad7fba890ffbad47ed12cd0e94fdb20::f8b85191799d07e9551499eb3c827e8a4f353bfa::01e89146bd05634b7e34e460c80db037e06ff106::88bf391f538785c5ef9903c4f2ce1b44c0f23249::9dc9c074c459cfbe6f20874398dabd3882fe15b2::969505e4f836448ec3db13985751396298d85ef3::7cac84229cc72153a90b230b95e67e19361c2e46::bc9c8a87738ebe31add17e63707c96a372613a7e::456198f87d6bf8ab271d3c55744b41da3f0e8f51::e7aaab00cc4f644d4b7a0dd90ed6adc2bc0d810a::53ffb9b409867e6606d7c5815916b980b0ff302d::1fa6c1c31d6e1b24ea0b6c664c719c08b8af0d1f::a2473d8dd253a767f2385466efeb888db482a2e0::d1428c81d822536b933aa6fe650efec6f4035565::3d762e7279c9677cff15b92aef570fc23431882f::2b177596df0d4a9b2d9b0fb854097ef64709922d::9e8f3ae7a1687d5a884ba25fac4080dca0e260f9::e6ffb7eee68cf57012bfcaf0ffd17f1cd4d76b8d::6e677297757e2d64436d24dee23960f46c25a671::5dc6c0300028f442993ede3d6f3af74de2f928bc::39d24bb9871dfc5facbb32ce330efa12775c7938::f25461311a15f9ffb7e3a4de64b9075ec7a70b34::85c0c2e56bf84de413063d3d1aec32c0c5af3446::b98fdd5d3aca881e6f85af8f1fc3cdaeac3b3857::341364f4a32acc74cf1a0f89180a782fbc122283::8b5a8443ba1c0a511dfd298fdee4b4e431f93045::ac35d0ff5372f56c474c1435b0dd73641b9a94a8::56b68d9d1aab338d6308ffd3d72c4c86742b275b::567488c718bd630eb944957ad34974913d2e8c93::afb642e01d38afd73479c0e251d623d94ca521bc::8cd6ad2258a798061e5b61fb38264617825be303::7c0a1b7c2523e823e8812d0edec2246fb213b5be::917f80e4c7ef7132dcd99acda770e39c52b92384::73b5504ad43463d65044a77ce1686dc517cbebc2::
https://api.github.com/repos/JuliaLang/julia,22143,jn/21653::master,1,merged,,"ref #21653 (backport is a bit different, so I've made a separate branch with a similar fix for the old inference aab78090ada753154e7b9901b140e6b12c9374b7)",6698ac40cc9023e55bdd14b817bf9177a23fe087::
https://api.github.com/repos/JuliaLang/julia,22118,bja/fixextrema::master,0,merged,,title says it all. is it too late to backport this to 0.6?unnecessary space after opening paren::,4a470cb174f8083acb79843261b1aab20d2fdf99::
https://api.github.com/repos/JuliaLang/julia,22083,kc/fix_21241::master,1,merged,performance::,Closes #21241 (checked that performance is fixed). Don't have time to do a full BaseBenchmarks.jl test right now but tentatively putting a backport label.,29e88d308c310fa8c9fac2b708fa583dc4537b05::
https://api.github.com/repos/JuliaLang/julia,21888,kf/gcroots::master,1,merged,codegen::performance::,"Item 1/2 on my 1.0 must have list: This is a principled rewrite of our GC root placement pass to occur late in the pass pipeline rather than early as well as produce a more optimal placement of GC roots. Additionally, it will allow us to perform much more general transformations at the LLVM stage, because we no longer have to worry about potentially introducing unrooted values, etc.  It also allows the LLVM optimizer itself to do significantly more aggressive optimizations in the presence of boxed objects. Currently this is written again LLVM 5.0 and does use features that are new to that release, as well as the following LLVM patches: https://reviews.llvm.org/D32593 https://reviews.llvm.org/D33110 https://reviews.llvm.org/D33129 https://reviews.llvm.org/D33179 I do think however that I can backport this to 4.0, albeit inserted closer the start of the pipeline. That wouldn't give quite as much benefit, but it should be equivalent or slightly better to what we have right now. I have focused on correctness over compile time performance in the implementation here and I know the algorithm is not optimal (it's fair to say it's pretty naive). Additionally, there is a significant number of follow on optimizations, as well as codegen cleanup that is yet to be done. However, this is already a pretty big change, so I'm saving those for after this is merged. Design notes are in the devdocs, implementation notes as code comments in the placement pass. There's also tests for all the tricky corner cases I found. Fixes #20981 Fixes #15369 Supersedes #21158 I think for performance we will want to do: ```c #ifndef NDEBUG newroot->setName(""gcroot""); #endif ```::LLVM37+ syntax here, but elsewhere you seem to be maintaining LLVM33 support. Seems like the PR should just be consistent about dropping support?::this isn't callee-rooted (and the creation of `varg2` could allocate)::This isn't callee-rooted unless `boxed` tells you that it was::alignment here seems odd. seems like this could fit on the one line::are we actually confident that this can't break your gc-invariants and end up trying to run that pass on external code that it wasn't supposed to try to run on?::could we write this as `addOptimizationPasses(&PM, /* -O */0)`, and make the `jl_options.opt_level` option to that function explicit?::""avoid confusing machine instruction selection""?::Probably.::That's fine, the pass will still keep it live at any safepoint that it's life *across*. It just won't put it in a gc root if a safepoint terminates the live interval.::Same comment as above. The placement pass figures it out. The callee rooted annotation is just to annotate that the only thing you're allowed to do with it is pass it to a function that callee roots.::Yes. It only looks at our address spaces. If external code uses our address spaces, it needs to follow our invariants.::Yes.::Incomplete sentence?::yes, should have `is in a gc slot` ;).::Would it make any sense for `pointer_from_objref` to return a pointer in a GC-aware address space? Would that allow LLVM to automatically make code using such pointers safe(r)?::No, the whole point of that function is to escape the GC.::This escape semantic would also be required so that we can stack allocate `RefValue{bitstype}` in ccall.::Same incomplete sentence.::I don't think ""address space"" is one word::Well the llvm annotation is `addrspace`, so I should probably just write that.::addrspace::serves::these should be up to two uses, right? (the value and the slot)::I'm wondering if we should call these `J0` - `J2`, to avoid committing to an exact number (in case we want / need to alter it later). Any thoughts on that?::I understand that the llvm type now has a special addrspace to identify it, but still seems like it would be nice to track and use a separate boolean instead::file indentation seems wonky (LLVM-formatted 😛)::seems sort of dependent on `builder` using the default (unparameterized) folder. Maybe use `ConstantExpr::getAddrSpaceCast(C, T_prjlvalue)` instead?::maybe leave a comment that this element type reference can be deleted when LLVM deletes element types?::this isn't callee rooted (except for the case where it gets passed to `jltypeassert_func`)::jl_subtype doesn't root its argument::should be `.V` still?::same here?::reminder to delete this dead code::reminder to delete::OK, but type-assert also doesn't root this, so it does need to be rooted at the call safepoint by the caller / codegen::Well, they are named in the code. I guess I should use those names here::yes, will add a separate bullet point::Fair enough.::`load(gcroot) != boxed(slot)` in general. in particular, slot could represent a gep (getfield) or bitcast.::missing space after `+`::I included not-a-safepoint in the definition of callee rooted for now because it's the same for all practical purposes. In a follow on commit, I plan to make that notion explicit. At that point, I'll clean this up.::Same reason as above.::Since you need to end up with a boxed value, I don't this they would ever disagree here.::remove::change block to `addOptimizationPasses(&PM, jl_generating_output() ? 0 : jl_options.opt_level)` ::line indent off on this bracket?::described::rest::""....want to determine the ordering of any of the following activities:"" correct?::optimally::~to~::`&& indexValid(0u)` ?::this appears to be depending on the pointer element type::should we worry about using a macro for this attribute for MSVC support?::dependence on pointer element type here too::`IncomingBB`::why is `AddrSpaceCastInst` a safepoint? (also `SelectInst` for that matter)::``` S.LiveIfLiveOut[idx] &= BBS.LiveOut; S.LiveSets[idx] |= S.LiveIfLiveOut[idx] ```::might be worth making Neighbors a reference at the start rather than making a copy here?::optimal::might be worth keeping this as a BitVector during this for-loop to make it cheap to do uniquing here (and only need to iterate it once)?::explicitly or-ing::`S.BBStates[&BB]` should be cached above here rather than recomputing it repeated (log N) in the inner loop::I don't think this loop has any positive effect (but could lead to the need for an extra stack spill?). I think you can just get rid of it and root the def directly.::use `NewCall = CallInst::Create(CI, None, CI)` instead (handles copying a few attributes that this code is missing, and should be more future-proof)::missing `&` (or use auto?) to avoid copying this probably could use `unsigned Idx = std::binary_search(AllNums.begin(), AllNums.end(), Num)` for conciseness also::can write this `Colors.resize(S.MaxPtrNumber + 1, -1)`::I think it might be good to move this malloc outside the while loop and just reset its size here (`UsedColors.reset().resize(MaxAssignedColor + 2)`)::actually, looking at the gc-root pass, seems like it might be better to go back to this being an obvious CallInst::yes::Well, it could check the store type for every phi, or it could do something better. I think it's fine for now.::It's not a safepoint, but I do treat it as a potential def here. In the future, I want to be a be more aggressive and not number these, but for now this is safer.::the concern is that the element type is probably meaningless this late in codegen and just been randomly generated by some earlier pass::`LiveIfLiveOut` is not a BitVector::also, since it's assumed below, might be good to test that it (the eltype) is `T_prjlvalue` instead of being any `isSpecialPtr`::I'm not confident that LLVM will always store Val using type `T_pprjlvalue`::The Phi node isn't really a gc-use. I think you can drop this function - it seems you're already walking through the phi nodes when you reach the actual use site (CallInst with jlcall_api in the LocalScan)?::I think you're right that it's been subsumed by that code. Let me make the change and find out.::nice, this reads better without the numbers too::drop me (before merging)::IncombingBB::missing type for arg2::4 space::4 space::4 space::4 space::4 space::4 space::4 space::4 space::4 space::4 space::4 space::4 space::4 space::4 space::indentation::indentation::I think it'll be better to just do `MTI->setCalledFunction(TheFn); setArgOperand(0, Dest); setArgOperand(1, Src);`. That way, there's fewer things that need to be moved over to get wrong / outdated. http://llvm.org/docs/doxygen/html/classllvm_1_1CallInst.html#a61f747edd1ca001427e02e02a320b709::I think this clone mutation may be clearer / simpler if expressed as `NewGEP->mutateType(PointerType::getUnqual(cast<PointerType>(GEP->getType())->getElementType(), 0))`::If you're putting an addrspace on this, there should be one on the BitCast below too, otherwise the BitCast inst would be attempting to change AddrSpace also.::In practice the adddrspace is always 0 (on non-gpu targets anyway), so it's fine, but sure, I'll add the addrspace to the bitcast as well.::After merging that is. Otherwise, by the time we're through the CI queue again I'll have to rebase yet again.::there is the::an LLVM pass late in the pipeline::not allowed to do what?::address spaces (used as 2 words in the rest of this paragraph)::others::CalleeRooted::capitalize Julia since referring to the language, not the command line executable::to attempt to use::4 space::4 space::always opt level 3 here?::verifies::""casting to they decayed as first"" doesn't read clearly, what's this trying to say?::vertices::inference or interference?::Short circuit to avoid having to deal specially with ?::4 space::close paren has no matching open paren::indices::indices ... simultaneously::interference::preceding::only place where ... at a safepoint or only places where ... at safepoints::backpropagating::simultaneously::simultaneously::simultaneously::no comma after is::is inserted::do not dominate::in order to be able to do this,::oh yeah still an extra b in there::",7227007ce277b7418a836177a50c4ffba96d5fd0::3a9fa438ecf205c4669579f6817a2b1201506a3d::cff6a5c398a1a21f5d244b4b9b57754bc64805d8::eefbde75326d88b5c19e05310bc2d091f93f72c6::226bca3409e5b2d9400dbfba69a263a3907d9806::b2d0caf09c0be32d2cf2467d603827e80701a96a::b0a162c5f94580a654d01190affd770582e11170::
https://api.github.com/repos/JuliaLang/julia,21878,tk/backports-0.6.0-rc2::release-0.6,1,merged,,"- [x] pkgeval - [x] @nanosoldier `runbenchmarks(ALL, vs = ""@6bdb3950bdf64152"")` vs 0.6.0-rc1",7593289b5e4a7f5b72bdd7c0fbb9741cc4e5b697::e585dc8cf20b0c8e7d171456765c5cf139c1415d::dbf2a1eb335bf8a93fcf1c5a13f9fa3f7a4a59be::b05b8c91cc527afd717a7cfa86b917084f542d65::24591459370a428308d9b3222a463436718e1718::d3a25b9e590353e163a45edbb1c3a94f37298709::9a4737654da50d8968be0626be7021227aa5b3d2::886f20f64ad64c768f105513460b750bfc5831dd::fd590b0df189a9f24d6071553e25e01f80a9aaaa::de4ccaf05bb989d2e44d506f46608e88d83c357e::700159811fb9f56e4f9cc8f33959333a447f49f5::5cc688177061d157176b9514422b737f116d5e2e::ecae3a726f5e75a8d972c5fc4674e2cc6046772a::19ed3498ef9e2a6755222202df7ff389b32b2f75::e2e21c55a04ef13bb33ed51fb79523ba0de16f3d::205bf779fd299bfec04b3a663d1bbdc626e5b62e::2cfe3b1b7ba4727b082e635596bd5d1f0913e1e4::7b2875391d6586e37d5b53300a73700d3ebc9493::54d68e8b8a2162fa4aa12ed5321db44e28a1aa3e::c15639a819566f16aaf583c1006e6eb9e16c6af1::e83527ed8985d584ca729a72710de1737a73d4aa::3cb69eafad37c02b77bf812d20f614d2b4125ec0::55bb92789815775c5909a66db2cda6387f09803b::a461fb511408b700b41785fdf6f43fe7e361cd26::2b09f779c59bfcb90064d10bc2bc1c1921394676::844ef37ed4b92cda7ca03079de4fb0fcff399c73::b523b1e190a85505c6a23a0b42acedcf26dd42c5::0f1aa847937751287d52af612d5b3bd00d2390ab::0222855e36f99cfb8d9d17bbdda2c52d59b72efa::2a929449621b65fedc4453997f91cd7bf7345570::5c5f9a0caabe5ddf893e22e365198735f2ccc50c::bf4cf71cf1ecc0d5c3d9285241f6f6b1c1b200ec::208087048190287bec6adec6b9855296f646b234::56800375f76b437588916e1f300d7acfdd011cba::f8985590df2d5ffff5ea7deb1aedd428e481f472::8832b7603fe5f09269abfeae41dacc316b7fb6e8::1c6287670b9c8ab2441a990f262c1fae5badc23a::e88a1199e623bf5d8b624b80fe3b76cf918f6b14::694e69da9d1da809d156709ff750794953559eb8::7b0d528b5cdfd22bc036ddcae84810f358392ab4::04398a2880c1796808eeba9a0cec306828b11720::dcac2b23a7eb074d8df2817ce7a3e0849cde7d5e::2c07a43e6df24e4e335d10199aed90f932cb8f9b::65cc820958b0bdb0771041c371f829d30274efd1::95dfeb5a156393513afdfbcb78cb032719a5748d::6ffccfa42f926c14aa95aa0540badedcaf18b15f::c7e4da6ab5cf039fde7ca7a95b4b35bed14e8892::784c47eb48bea528ff7dc0cfb3f440b929f3325b::c360038380ad33307862346ca6932f8741d51882::a43bee5f44759bf784abe91752b324d24b538e71::72cf3fe1ef9f82a547d53bf1ef6c15549df0a92e::f2fcc035d144c9584bfee6fe46a037bb68d3a1ee::21d0cbe3ae21d7b3dac4c070ff5a8aaba0fae393::5f7c9bad8ebd58cc88bc85f27d3dfeb60d26994d::6cf7892561121132a9b21250c336a7e2f1269db7::22aec09c796f35e982400c9a79000d70a7562e79::d13f3e9e9d8b4cda8536800b1c9d28e473eb45d8::91d0f09e768550980d5b68c30137fb8da125e86c::d552789619f3f2c6f9043bc1707d6e9cb03e10ef::d818788033e81e9991ad19fec9db2b1ad6096de4::ecde5bb580c0ec76b43de2a565a1f452a9dda008::3b4a1a3326ee585b0f12a426aa67c9fc3a67d427::d19cd5e194ec4deec9333f9e582e7454ca397cc9::92c95c0ba7fefd57c48e363fb3bf7ce57977c96c::be5689f9e34b6e229008a4fe61e49bfd24fec7e8::94f73eba8cfd97a9d5987ef98e09b6318b41d8d4::8654afdad264c67d1f221c38fc22f18dc5a7445d::4feba43b32463ec1842debf7d1e2c6f070502ff8::ecae6e8c16aacbedda7d4e4b686a6a35c1a1b7a4::e6f1f3480e3414acb141452b0a41faef035aeacd::5f9a9bba64711d9076adfab653210c452802239a::f445c6a163470596b14dfb6560d6f1afce97d6d4::a42d4d9745195e89ab60048757f3f1e12e926390::9564404a05286481552d3fb0f14fe03864efc51b::09d3b2600506f30356d27e47f0efb7349c0389f5::a9d418eba943162e13046b4eddb09bf0dd6c0da9::be004c1bfebb585932c78c8922b06bde049fb2cb::
https://api.github.com/repos/JuliaLang/julia,21866,mp/julia-repl::master,0,merged,docsystem::,"Use `julia-repl` to highlight REPL blocks in the manual, which makes them consistent with doctest blocks. Requires Documenter v0.10.1, which is why it's currently based on #21846. I also came across a number of REPL blocks that seemed like they could be turned into doctests as well, and a few other small things. However, I guess there might have been a good reason why some of them were not enabled, so I'd be happy to drop some or all of those commits if need be. I think it would be good to get this backported to 0.6 as well, at least the first commit. It seems that there's only one tiny conflict, so it shouldn't be a big problem. Example build: http://mortenpi.eu/julia/julia-repl/index.htmlThis change would also require a small bugfix in Documenter (JuliaDocs/Documenter.jl#484).::doctest candidate? (also the next one in this file)::doctest candidate? in case the error message changes I suppose::doctest too for the error message?::we may want to change this example to a non-deprecated package::doctestable?::could doctest the error::doctest for the error?::this, and the next in this file's diff, should also be testable?::could we put the series in this file in a common named doctest set?::Documenter can't handle syntax errors as far as I can tell (at the moment, should probably be fixed).::Ah my mistake then. Is there a tracking issue?::There is now: JuliaDocs/Documenter.jl#487 Also, the same applies to the invalid UTF-8 example in `manual/strings.md`.::In principle this should be doable, but it's a bit more work. I'd leave this for another day.::Ideally we'd doctest a lot more in this file, but we'd need a way to run ordinary code within doctests. A named `@example` block sharing scope with doctests could be a way maybe, but Documenter doesn't support that at the moment afaict.::This can't be a doctest at the moment since Documenter thinks that the first line of output is a comment that should be ignored (JuliaDocs/Documenter.jl#483).::did I comment on this one or miss it, seems doctestable?::",014c5d59cdb1c91b64ed5d51165d09b952e28f96::f67d4fdfe91f10789a1cee034230578a629514f3::b710de95c4a6a7d3773d62c63384373de9d78e29::c90c17f194ea7d3908daa099054eb83277939f54::6e08c1883811706b952ce5d26371f388bc2eeeb0::6e5c55dd733489afab03ce49ee170643f5ef5255::96b65f1ef7a2335a93e77efa39b432e8c428b54c::814a8a1954e9ff88b760741a9068e2ca2946e9bc::a64bcf8e6553423620d39a22a9fc1dc41027a00e::d9063cb8d4daf69a9b30356c2a6f896bf538c9a7::1d20519c02616755b71028e3e7f43f865ae83986::
https://api.github.com/repos/JuliaLang/julia,21862,tk/fix-dep-displaysize::master,1,merged,MS-DOS::,"missed from #12807, only happens when running in mintty also run NEWS-update, just so the 0.7 diff doesn't show up for other news PR's that should be backported (this one should not since #12807 is 0.7-only)",233435bb395b958d05808d62ccebb22bef71e98c::80c42adedb5f2b8597b07b8e59d6d1b37e5e1b9f::
https://api.github.com/repos/JuliaLang/julia,21842,news18754::master,0,merged,,"Ref. #21475. Best!I don't think these have code meanings, should maybe just be not capitalized::this part of the diff shouldn't be backported::Removed quoting and capitalization. Thanks!::Good catch! I stripped this line from the diff here and elsewhere. I will strip this line from any future commits as well. Thanks!::oh they exist in Core, but are very sparsely documented in the devdocs::Quoting and capitalization restored. How now? :)::pretty sure the module name is plural::Fixed. Thanks!::",001d40f81ac521b3bdeb799037672544decbc5b8::
https://api.github.com/repos/JuliaLang/julia,21831,yyc/align::master,1,merged,arm::breaking::,"The first commit is a bug fix that fixes a LLVM undefined behavior which actually cause segfault on ARM and is the one that should be backported. The second commit is to reflect this semantic requirement in the julia API so that we won't have this kind of bug in the future especially since we've actually had [this kind of bug in the test before](https://github.com/JuliaLang/julia/pull/14551)... It is in principle possible to loosen the alignment check in `reinterpret` on the pointer though that make this kind of bug much harder to catch/reason about. We should ideally also run PkgEval on it to identify buggy packages. `return Core.Intrinsics.pointerref(p64, #=1 based=# idx, #=align (constant)=# 1)`::and then can call this `unsafe_load_unaligned`, and just define it the same as `unsafe_load`::Cool.::Sure. I was actually going to just call it inline....::Actually I didn't realize that `unsafe_load` uses `align 1` so I'll just use that......................::Ah right – I forgot that I originally didn't trust users / C libraries to declare types exactly correct :P (and then the align attribute was added because the GPU folks complained that it was being too pessimistic)::aligned to %u bytes?::should this be larger than 2 on 32 bit?::No. The original size is `2 * ns128 * sizeof(Int) ÷ sizeof(FP128align) == 2 * sizeof(FP128align) ÷ sizeof(Int) * sizeof(Int) ÷ sizeof(FP128align) == 2`::Sure...::makes sense – we want to allocate this with the larger alignment (FP128align), but fill it with the smaller alignment (Int)::would be clearer imo (and in the other instance below)::As the last location of `dsfmt::Vector{UInt64}` below is overwritten, isn't it enough to copy `(nval-2)*sizeof(Int32)` in the `memcpy` here? Of course nothing wrong either.::",99286f9588f7f0e8f3c7cd4abf198f7ff0521fc9::c011b64fd3fc306137f09c0f3257e9c1c89b4a92::
https://api.github.com/repos/JuliaLang/julia,21818,amitm/reuseportfix::master,1,merged,,"Closes https://github.com/JuliaLang/julia/issues/19893 . `ci skip` till https://github.com/JuliaLang/julia/pull/21799 is merged. This commit should backport cleanly. Will add another commit that uses `getsockname` everywhere once https://github.com/JuliaLang/julia/issues/21801 is closed.could we avoid starting the function with an empty line? it's not the usual formatting style::When testing this PR, i.e., reusing client port numbers, our current strategy for workers to start listening for a free port starting from 9009 caused a major slowdown in `addprocs` when it was part of a repeated `addprocs(x); run tests....; rmprocs(workers)` cycle - as the test script indeed does.  I suspect it was because the new workers listened on the same ports (starting from 9009), but setup of new connections with the same client port were being delayed, as TCP connections to previous workers (now in a TIME_WAIT state) still existed. And new connections with the same (clienthostport,serverhostport) tuple had to wait till the system cleaned them up (OSX in my case). I changed the worker listening port selection logic to select a free ephemeral port and the slowdown disappeared. While that works, I am uncomfortable using ephemeral ports for workers to listen on as firewalling policies may disallow incoming connections to the ephemeral port range. However, the current strategy of listening on a free port starting from 9009 is also not ideal when we have many workers on a node. For example, the 100th worker in an `addprocs(100)` will try and fail in listening on every port between 9009 and 9108 before succeeding to listen on 9109. Looking for suggestions to work around this issue.::why is this done as a try/catch rather than printing this message where we threw it 6 lines above and then returning from there::I think you can call the `_ex` version unconditionally, and just select between `AF_INET = 2` and `AF_UNSPEC = 0` (that's what libuv will do internally anyways)::Maybe we can suggest that someone who needs that will write a UPnP package that automates the firewall configuration step? Although I think that the typical usage of this cluster code is intended to be in a closed environment where all of the devices are on the same side of the firewall (whether virtually or physically).::should throw a more specific exception type if possible::",0394f47f455defd5758dc7031266a0eb0adebc57::22720368896f99c7385f3955fcd25c51718feeba::fa8c4d2ac0c895de3c3d36924409b44ab6b3f2dd::
https://api.github.com/repos/JuliaLang/julia,21727,patch-1::master,0,merged,arm::,"cc @ViralBShah The 0.5.1 build instructions are slightly more involved than those for 0.6 beta since the former's build system does not include configuration for ARMv8 (7191bde57a5ce87343c74496a597b4a8185f0ce2). No doubt it is possible to avoid the use of system libraries in 0.5.1 by manually overriding the particular build options, but since the release of 0.6 is pending it seems unnecessary to flesh this out further. Indeed, it may be preferable to remove the 0.5.1 build instructions all together (since this document will relate to master). Please let me know your preference. Thanks to all the work that has been put into ARM support, Julia runs well on this platform. It is particularly encouraging that various CUDA related packages run out of the box on the embedded Pascal GPU, supporting its intended use as an embedded platform for vision & machine learning. There is a space in the end of this sentence which fails `make check-whitespace` on master now which failed the build on both Travis and AV for this PR....::This should not be included and should be in the 0.5.1 version instead.::This should not be necessary.::This can be removed when a new openlibm is tagged.::Also, both of the PR's (https://github.com/JuliaLang/julia/pull/18100 and https://github.com/JuliaLang/julia/pull/19022) that fixes generic build are already marked for backport. And IIUC @staticfloat have already tested / needed them to build the generic ARM binary on the buildog. I've also just marked https://github.com/JuliaLang/julia/pull/21447 as backport pending 0.5 since that should make it only necessary to set `MARCH=armv8-a` to work around openlibm bug (fixed by https://github.com/JuliaLang/openlibm/pull/151). ::I took the liberty of pushing a commit directly to master to fix this, as it's terribly annoying for anybody having automated checks enabled (can't even commit something locally...).::Without setting `JULIA_CPU_TARGET`, I find that `0.6.0-pre.beta.0` repeatedly warns: `'+v8-a' is not a recognized feature for this target (ignoring feature)`::https://github.com/JuliaLang/julia/pull/21447 was not in the beta - try release-0.6 branch::Cheers, will do.::",32b01575633d1667271bd3b5751b33c748ae454c::
https://api.github.com/repos/JuliaLang/julia,21708,sf/backport_19022::release-0.5,1,closed,,"This backports some fixes for ARMv7 support.  It makes it easier for Julia to autodetect the proper version, and fixes the binaries so that they can run on ARM processors that don't have NEON support.  If I download the [beta 0.5.2 binary (6accda38c4)](https://s3.amazonaws.com/julianightlies/bin/linux/arm/0.5/julia-0.5.2-6accda38c4-linuxarm.tar.gz) from [this thread](https://github.com/JuliaLang/julia/pull/21684#issuecomment-299331305) and try to run it on a scaleway server with no NEON support, it `SIGILL`'s.  With this change, we can compile with `JULIA_CPU_TYPE=generic` (which is what the buildbots are doing anyway) and it works okay.",32078e73447ee85379ddd8cd5497cee7dca17206::9ea753409af44cf1e3799e0b73e000c088f03fb6::ea990333106386acd838bf00e0db324943f82373::
https://api.github.com/repos/JuliaLang/julia,21697,fix_ntuple_val::master,0,merged,breaking::bugfix::error handling::,"`ntuple(i -> i, -1)` returns an empty `Tuple{}`, but `ntuple(i -> i, Val{-1})` sends Julia (both 0.5 and 0.6) into an endless type inference(?) loop consuming CPU and memory (I didn't dare to wait until the end). The fix is to return an empty tuple immediately. Probably should be backported to 0.5 and 0.6.Maybe `ArgumentError`? A quick search through base suggests `DomainError` is mostly used when the value is out of domain for mathematical functions (e.g. `sqrt`, `log` etc)::I would change it to `ArgumentError` if there would be more thumbs up than for `DomainError` (yours is counted) :)::I'd leave the check over `_ntuple` so the branch gets delayed after the small cases.::`DomainError` changed into `ArgumentError`. I'd leave the `n` check where it is, because it's much cleaner than burying it inside another routine. Anyway, in performance-sensitive context one should use `Val{N}` alternative.::Seconding @pabloferz's recommendation. Using the `Val{N}` methods is not always possible, and `ntuple`'s performance is important. Best!::I would be surprised if LLVM did not just hoist the branch to the end, but this change can't hurt.::I've benchmarked the early and the late `n` check variants with ```julia @benchmark ntuple(identity, n) setup=(n = rand(0:10)) ``` The late one (inside `_ntuple()`) was 1ns (~10%) faster, so I've updated the PR.::I imagine this branch is handled at compile time where `N` is known at compile time?::Yes, that's the theory. That's also what I see with `@code_llvm ntuple(identity, Val{-1})`::And also I hope with e.g. `@code_llvm ntuple(identity, Val{1})`? :)::Sure. Actually, for each `0<=N<=15` there's explicit `ntuple(identity, Val{N})` method. The check for `N<0` is in a generic method. In fact, `ntuple(f, Val{N})` is substantially slower for `N>=16`. On the 11 days old master (b838f2eec6) ``` julia> @benchmark ntuple(identity, Val{15}) BenchmarkTools.Trial: memory estimate:  0 bytes allocs estimate:  0 -------------- minimum time:     3.365 ns (0.00% GC) median time:      3.379 ns (0.00% GC) mean time:        3.400 ns (0.00% GC) maximum time:     16.001 ns (0.00% GC) -------------- samples:          10000 evals/sample:     1000 julia> @benchmark ntuple(identity, Val{16}) BenchmarkTools.Trial: memory estimate:  288 bytes allocs estimate:  2 -------------- minimum time:     418.864 ns (0.00% GC) median time:      423.166 ns (0.00% GC) mean time:        448.653 ns (2.32% GC) maximum time:     6.745 μs (87.57% GC) -------------- samples:          10000 evals/sample:     199 ``` Few nanoseconds could be explained by `Base.@_inline_meta` absence, but not hundreds.::> Sure. Actually, for each 0<=N<=15 there's explicit ntuple(identity, Val{N}) method. The check for N<0 is in a generic method. Ah, right! Wonseok's recent change. Thanks for reminding me. For `@code_llvm ntuple(identity, Val{16})` then :).::Following up --- the branch gets handled at compile time for e.g. `@code_llvm ntuple(identity, Val{16})`? Assuming that holds (and perhaps even if it doesn't, if the marginal cost of the branch is low) the present incarnation lgtm! :)::Yes, apparently, LLVM understands that the check is a constant expression and eliminates it. The nanosoldier regressions look like noise to me given their high variation between the runs.::",2b4bb1ad966f1a7b72a5a439c31453e325d968a1::fc90413e4045b2649195328890cd736ff84b6fbe::
https://api.github.com/repos/JuliaLang/julia,21695,glp/remote_loading::master,0,merged,modules::parallel::,Fix Issue #19960 Replace PR #21647 Is it OK to suggest some more labels? `backport pending 0.5` `backport pending 0.6` `bugfix`,10c07464ee56bb853c5148302314bc9c95f5a4e1::
https://api.github.com/repos/JuliaLang/julia,21694,tk/backports-0.6.0-rc1::release-0.6,1,merged,,"will run pkgeval here, make sure we aren't introducing any regressions relative to beta (5d609ec44c3f3c2a3bc40d47e0979ebbf1ba5d29 is a non-backport commit, for this reason)",8b5a2e7c088c74efdcf1a64faa73c5d7fa655629::a31ac053d5d59e2bf82a741fde268377210beeb3::e45bb727549594bf8a1c9e9cfd83d16a7bb4d54c::f71c09913ea05f40a77ac16f5f8459d07ad72930::a482cc2d46209cbddc5ef20dd69ceb540ebb8586::be46bc8f5ad21f7718c7c2cf819fa9d8c33d987b::e40c972067a0689ed306d683c8909195a960acf4::b63ab724a4cb3d41aa707f9ef22bae0cf084cd36::5d609ec44c3f3c2a3bc40d47e0979ebbf1ba5d29::5602e9e7f571441675409487399d2d94ddfee9b2::0a21816973eef396daa4ffbab1a518f4d432d962::dbd6628f662f5e2e8b2ae8da59692e62fa876f1d::7e19aa3bad2b74e0eb7d14ee48f6f9188a4fdbd6::
https://api.github.com/repos/JuliaLang/julia,21685,backport_mapreduce_fix::tk/backports-0.5.2,0,merged,,"Backport #19325 and #21167 to 0.5 branch (I hope it's not too late for #21684): - fix `mapreduce_impl()` for 1-element ranges - avoid `@inbounds` propagating into user-specified `f` - the backport doesn't include the changes of `mapreduce(f, min/max)` behaviour introduced in 0.6",613a24499b5287d4f0f8310557603868776ed22d::a334c0012af06a69a131e749a59ce09b80495622::
https://api.github.com/repos/JuliaLang/julia,21684,tk/backports-0.5.2::release-0.5,1,merged,,,7d2d2111d300800b236bbc500fbb00a2eb089a0b::4d418458a736b6d1fcf569e84f347cd6237902d0::9127ccaebfc561de0227850aef07903991496165::aa3907c5734b1a0292678c2b3c8ed77e8c18f40b::8a4e1be6ce822069489ca68730318a19817285fb::c250310783151f0fafd4a199ef7cb9365dd84a94::e9fc37aefa00a1bf0680c1fc1677bdf9b01c1a21::70e5b5667771e644bf5b52c402526eb2bb532979::5c1972bce74df223a286e1674ae710a46c670770::633993f5cbdb1e1238639542006853330c8da4b2::32e26e19c0d436fc8c42d81c784e2a5b279ebfde::b004efaa3c2d704b0056b2dd3bbea8d67d66efe4::ea015b89f6d14c49136cd0d97bc1b233676b63a8::b044f745b10ff75b58e04f0f1daf89e3fa41ccad::0f9d4409f9bb8554ae52455e74dbae5decc60724::468974c4c2a4b4a64ed28d4edc887f7c37fb9c55::8619307ca94e5a30f5be0a3aaeabf6f64f5a6e7a::4be8a3f4ba4ae6f370a6b0375e4165895e315139::5fc644a714055c45f289bd4f1b3159a6b485c230::39cd805589d02016191b4b3b7c8407d01aaf624a::a67663635d55d54377243f9b43456e97ed1b3322::2a5dd2a2f5c5f34e89229cd4b4ef9b0700072676::b428e47971a0e5aabbdab41b90c4472778aecb6c::d13cb5fe6b8fc0d5d942726d85e584bd06d62512::b54c343dc6c2a4b3562af89b9350a074115c895b::f907b5716805013fcd65b1720d1ff940e11ed815::f7c3d0ffe0724483e141f0123fcac4a2c69e5ea8::e556deee3b4e54b41f52ef298c00d6a000534e5d::a0a2cda13a139ee1d50c09bd7466f74eb8a8e6ce::ec79250be50fd319d4b7481817d0a6cd967bbc9e::c1b8f9a2af1571e61fe80f85cdf32646bff8799d::957041e97dc2822e28be08870851590bb72cc13c::c686385015400b77a1f48fdd9e6c4da6ed22157e::2745f8f96ed5fa3c817a7c2b861af67b33dd6e38::88ab8437af8228270560316d192d6dfc2491c82c::416fd0ced4101f9bd3dbe297d67ca026204086da::ea795ec72b949a359876a64b82fb809781c8e400::0d5acbaa602eec2b1b4a9f4ed8c647d324ea85f5::742160cf3b8519f6645f849f0380c5d9271ba77c::eeafeb047e1b79b4c59e415db71ffa5aeea1ac33::3e86b46e1437fdc2055651c5769a09d61bc21ea6::302f8cb2a2f01f89b55a53fbe7267c832a075606::14523c22e23356ad13061cd37df045cbe7ff01b9::bb726dba188e3256144d1fc6ea77261957f6a000::009bf9955224683fbd45e90d6a632078a6ceb23b::98441925f9733a1b972f661240e19d201d871da0::c282224834a04d8d8487d8f0dec585e9cad6d56f::f797f92465e59893ae8f51ac1a6dd30605b26cf2::31130a7437a7cc81871499cc8e95e25b4cd46d04::754ae078cfa0eb48d0bb33389a70f464c97fbc49::357286e14073b4efa45134a02d649b342a0eaeb2::e6f48c31ae458e5b5e3cb30d41f205edcc08f04d::87746274eb249a7e81c04437f37e9d9999636f34::613a24499b5287d4f0f8310557603868776ed22d::a334c0012af06a69a131e749a59ce09b80495622::98479af54034aa813f03f24a93b5760d22f48db6::e1c9a4b522ce75f8c742cb4255e66ab8adebd5cc::a36d4afa3776d22ae237615433826f37ad335671::8b8a274ef8a9904d2f04207889b74f6f89c07aa4::4504215ca7abdfdaaa1b7a958be9ade11e23ef61::86bdc39714d7bd4c92161debc4fb2fb0367fcb74::3a873fea5ceaf234317e084d9967d61db69c8519::6accda38c4f5d2783580b46db0254838fc928bc6::87448f2f882e1dd91e141d6657a21b7c5b0bedde::
https://api.github.com/repos/JuliaLang/julia,21575,tk/profile-ser-test::master,1,merged,test::,"xref #21025 which is fixed on master, and a one-character fix on release-0.5, but should be tested on both brancheswhen backporting I think the `UInt64` may need to be changed to `UInt` for this to pass on 32-bit::",829c4380c97817096236b40ac4bb1054857cf37a::
https://api.github.com/repos/JuliaLang/julia,21263,kf/tuplecodegen::master,1,merged,codegen::collections::performance::,"E.g.: ``` mutable struct foo x::Int end mutable struct bar tup::NTuple{N, foo} where N end function f(b::bar) sum = 0 for i = 1:2 @inbounds sum += b.tup[i].x end sum end global x = bar((foo(1),foo(2))) @benchmark f(x::bar) ``` Before: ``` julia> @benchmark f(x::bar) BenchmarkTools.Trial: memory estimate:  0 bytes allocs estimate:  0 -------------- minimum time:     27.124 ns (0.00% GC) median time:      28.771 ns (0.00% GC) mean time:        29.864 ns (0.00% GC) maximum time:     116.762 ns (0.00% GC) -------------- samples:          10000 evals/sample:     995 ``` After: ``` BenchmarkTools.Trial: memory estimate:  0 bytes allocs estimate:  0 -------------- minimum time:     10.531 ns (0.00% GC) median time:      10.559 ns (0.00% GC) mean time:        10.610 ns (0.00% GC) maximum time:     122.751 ns (0.00% GC) -------------- samples:          10000 evals/sample:     999 time tolerance:   5.00% memory tolerance: 1.00% ```I think there are two users (`emit_getfield_knownidx` and `emit_pointerref`) that need to be updated. (Or just add the argument at the end?)::Quite right of course. I backported this change from another branch where that function has a couple extra arguments. Fixed.::this is not a well-formed type query (it can't be, since we've lost the UA bounds on `t` earlier)::`emit_typeof_boxed`::@JeffBezanson Since I know `t0` is a leaf type here, can I just use simple pointer equality?::Yes.::the same type, right? ""elements are the same"" sounds like it might mean value::Yes, it's worded a bit awkwardly, but it's `are the same [type] and a leaf type`. I can update the comment.::that's better thanks::",a761f1096392f05044c74f6febc358b9bda71d73::ed985953010e025c96acbebe4ecdee1f8776681d::
https://api.github.com/repos/JuliaLang/julia,21251,teh/non1::master,1,merged,arrays::,"The `endof` change is worthy of @nanosoldier `runbenchmarks(ALL, vs = :master)`.This will allow things like `A[1:end]` for offset arrays, but that's not tested. Is that intended?  Of course `A[end, 1]` will still error with a missing size.::Ideally we'd want `A[begin:end]` but of course that would need parser support. I frankly don't remember the exact context this came up in. If nothing else, this will prevent a genuine bug once we decide to allow `length` and `size` again for offset arrays. (Officially we said that would happen in 0.6, but I wonder if it's still a little early. Gotta finish https://github.com/JuliaLang/julialang.github.com/pull/498 so they get more use...)::Yup, it's the right definition, just checking if you were willing to incrementally begin allowing `end` expressions.::Since I think `end` has an unambiguous meaning, I think it makes sense. Unless you see a problem I don't.::any backporting concern that these don't have the `@inline_meta` on release-0.5 ?::It should be fine to add them, I'd think.::I would rather leave them out when it comes to backporting this specific PR. Looks like they were added in https://github.com/JuliaLang/julia/pull/20079 which is a larger breaking PR that's not a backport candidate. But if just this piece on its own has performance advantages and doesn't break anything, someone who wants it can propose it independently against release-0.5 (or at the moment, tk/backports-0.5.2)::That's fine too.::",4776d9ad5539f2b509c2c6622dcedc88e7e18b14::
https://api.github.com/repos/JuliaLang/julia,21087,test_broken-finish-test-0.5::tk/backports-0.5.2,0,merged,,"Fixes #21008 Also grab the associated test case from #21086 (@tkelman - is that the right thing?  Do you want test cases backported along with minimal fixes?)If you shouldn't get here, then shouldn't you make it cause a test failure if you do get there?::the result of the try catch is saved to a variable and its type is tested below::Yes.  I can't remember exactly what I was thinking here, but it probably amounted to something like ""`@test typeof(ts) == blah` is clearer than an `@test false` inside the catch"".::Makes sense. Thanks for the explanation.::",9127ccaebfc561de0227850aef07903991496165::aa3907c5734b1a0292678c2b3c8ed77e8c18f40b::
https://api.github.com/repos/JuliaLang/julia,21067,teh/arith_promotion::master,1,closed,maths::performance::,"Reference: #21065. The main reason to introduce this is so that it can be backported to 0.5; perhaps on 0.6 there can be a deeper solution. I could re-file this explicitly against `release-0.5` if that's preferable.Are these changes necessary in addition to the inlining of `promote`?::Yes, I really don't like having to expand these like this – it's very ugly and we've never had to do so before.::Certainly much less important with #21069. The main problem is that as we implement more abstractions, the inlining heuristics sometimes seem to fail to realize how simple something really is. I don't think we can exclude the possibility that we're noticing problems that we didn't notice before.::",047adf16861745b634664ee49a1eb9b5729caafe::6bcd592dce57cb90825392a986e8b467dfffe10c::
https://api.github.com/repos/JuliaLang/julia,20858,sf/openblas_cross_compile_patch::master,1,merged,build::external dependencies::,Supersedes https://github.com/JuliaLang/julia/pull/20831 with just backporting the patch from OpenBLAS `develop`.,1ec7c66318c0c315863fa7531974096877633424::e7d583cc85133f0d8c19ca218903abe13f1a3a0b::
https://api.github.com/repos/JuliaLang/julia,20825,sh/backport-18583::tk/backports-0.5.1,1,merged,,Hope I'm doing this right.,c577b62a8986b89c986246951672a20bac00f09d::
https://api.github.com/repos/JuliaLang/julia,20789,tb/backport-20150::tk/backports-0.5.1,1,merged,testsystem::,"Ref #20150, cherry-picked from b7c850ea2d3b24673403b59c0d5b43ddd7b5a2a6 Reason for backport: after [converting CUDAdrv.jl to using testsets](https://github.com/JuliaGPU/CUDAdrv.jl/commit/99e16acf02de6a2d1170665afde0cb211458eddf), some finalizers [weren't being called anymore](https://ci.maleadt.net/buildbot/julia/builders/CUDAdrv.jl%3A%20Julia%200.5%20%28x86-64%29/builds/70/steps/test/logs/stdio), but only on 0.5. Repro: ```julia using Base.Test type Foo whatever    # prevent singleton object function Foo() obj = new(nothing) finalizer(obj, finalize) return obj end end finalized = false function finalize(obj::Foo) global finalized finalized = true end @testset ""dummy"" begin dummy = Foo() @test_throws MethodError sin(dummy) end try throw(nothing) end gc() @assert finalized ``` This is semi important to me, because for CUDAdrv.jl (any other GPU packages too) finalizers are responsible for freeing GPU memory, and without this backport we can't test whether that works reliably. cc @KristofferC",fbff50423cc90f47905a88ded7ee3f0c879c4fb2::
https://api.github.com/repos/JuliaLang/julia,20736,tk/backports-0.5.1::release-0.5,1,merged,,"this is way overdue, ~~and still in progress making my way through the list of pending backports~~ will run pkgeval and nanosoldier here when ready",0cc35585d23bf117d737c4891d44bde304501869::03f5df7693def3ff32fcf099cae604e1e49cda78::c1c297340ccda3697cbc64a88a66173a258e4591::883b55a532fc53bba3e1e78743cf079e25bc9254::62563b8116c8eaed89721fe7d205b2095a3f06c0::bbd1d29f3d94d6d6bc71e10beb18b921bfdeee77::3f963664a18c1a906d362b754b9ce48ec645786d::b62b934e041fa46f19661976f5204e1861fe40d0::417aed3485537e0f415321016b5ee278f5123c11::a97fbdaae5066cad3447579a8e2a04808651b8cb::1bbc846f6ff710def11e976c518e9b047779f02a::92b16b81a96b3f9f4a80959fdb09954d2e5bbbb9::0633cc7aa0c87f0423a84c0ebf3b00259a10f178::8015177d939c0f082c06225b47192c386a1585d1::f32c0ed6b8c060b4012f8957bc9d52d1761eac4b::6956c0c9fb8049f4297bc853febb9fccfb972126::a84fdaffeb5d11d011a0a36f3181192198ebd4a9::dabaa2aae8956aa60978e4ee129fc0a13d1f7aa9::87a79cf2ab8b65266c670bb89653ac22a9dbe48c::7c4d4b84011802d1443c67751b363c683c6a6faa::c5a68975742cf18ad41d64455c38e68802de9831::496b7787517e231a2396ef927ba894cbc1f2adde::6b987c088feacf9d854eb8e73d2af8c933bc9fce::c8b42f37e91802604d24ec842d0f5d4637226899::3b51150cab30909c2df8581d859a91e01465a9c3::5e18ffcc8ae79c3b3d544c2c606c09cc540533be::02d00d0a51d1993dbb32f2d62cdb7a1a4e1250dd::0320521a052ef8230390098d6b4b62c18e90231d::d410cecbf60f206b282d2c98e7d68a7d8e21e075::c330c1284b56f1f64c81bafe723d0178c087e056::731ed27ea843c210ec9f6331964f8eb83b701ab4::10ded495635c9b413838935d801d42521e4cfbd8::3bb4cf376a7d6f992f855560c67d2354f1bb5341::059f1e84e1dd3dc3b80754c5e5f30291eff59d48::12c1af3b95ff1e0488339c65fe2c2efdb77a83de::c378dee654f9907df7339faf620df5f91f5b8ad2::55125539f5e39af512156ed0d03b8dcf2abd7b57::ea37c3c35eb3fe6bbaa0962a048c6b26e11e5ac7::8accd2a5da8d35189cc81f7e3530d5da9c22ea8c::81b201a24742226486e4f19b8c4f05e0f04137f3::42a5af07f25a65dae5eb90ea08093eb474cf0f4e::086126b1340b49ec3ac2634f790beabe8f812ea6::525904e521db838c576f0446f8da5d15cff6a202::24b64a3b625c2ae84df3802112423760ec9475d2::c427de0feede554e93caf0369cea3b1b48a8ea96::e776d78deafb3a5341233f1f77157a44628d940a::fabf35ee3b0b07b3ba39d2d8204493bd229d6610::f4f3486e2207a4ff8bf6dd492f38e36d3c6bbe53::3d2b8a55770a8d720c8e5f3f8df3c63c4bba8328::7676605573ccfbeebe138ef7187956a7dba1ac05::98b8321bd75ebb43a26502cf170f13b644b6f954::87503c9174a0278c030019bd096e53f357ea537b::07395f4ad47b373742ec13b0867f82c396712137::d56fb3b5b3a6b07946a4efd6866793565bc75f1e::b730778bd92fd4c531c382555d7889a0131fa940::226bb8a77e71218e671521d6f869804c1166fee4::d4f3964d5ea19a0ac6660062c1691e08b2db21be::6906d7dc3a688836b9b6ac6f99cf60be9f5038dd::7c49b4aa99083cee2c3d9a1522fb83d9e2b826bb::3053b589b74676a228303895c4edc81bf9b22aac::399a1b703a37c23079139b8583a8b5c5211ab33a::835ede6ccfb85618dc2fe1b167ec0855b91addd2::eafaf13b1c0717cb294e2ecea675c3d05f0ddfa4::a7c6c6ec81000a9a0b606ebe2e8c18ecac396488::7c280a4e0912d2623b579c7c9b2a1e4207165d25::15399799d4bb6ee908a021aab68d31565b06623c::4dbe24538823ab0268885c0cb3a2bac9e3e7cd7f::ac5725c4dc9997b9e2faa4c0dff67198d866519e::14a1232e62f1f02eacb5223a8dd3d099aec8af6f::7da02da4ba35119a4640f017ab8bc82daad64312::43e73f2a8a74688e84c48af3ce4a5246f56e3f37::d943b0bb3f23bbd1f228c05f92d6ef6f9699873a::4db2e252dd0d465a34dc49e8061a9009fda129fc::afad4707b3b9a4a097527a3cd7c66c25d9e77cf9::76249b197089f55339da31fe59632ac974a49718::35f7fcba69db9fd4dd30efbd44f4cb417fcf8da3::df8a99755f380bca28e338de35b2aa73d9fa1547::5c9edd0ba2308e2216eeb6837c652e626854ebbc::b9a5d3200bccb7fb524b774d55276c8e3a02ad84::419653f5947652fc3e2933577ff734b7bd2a9a66::47f6e508e4be0fd39295cf93e474cb64eca2817f::49e13003b8d60a7e32ba9e9bfbd4baad1e019001::fbff50423cc90f47905a88ded7ee3f0c879c4fb2::c577b62a8986b89c986246951672a20bac00f09d::68070380e44f4dff1240eafa17a379fa0334c30b::260b1f8b69ae002d79f6482bfbaed71130c1fe3b::1f16e63d2b633d86eb2e4d21c16e6ed95c9a3e08::5766dbc41d362823a00c4d27cf79e7a531724f86::f5f4ab018ae39fb0376b4831e52fb89fff107b92::27df04b5bec57ac5222773d93d7266c06b1472c3::060016ae6423c967b82f7b72a8683b67ae1b0fd7::eac77de5512d90238ac3a04fc892057cc1284758::5986d0ec74de1b42fee5af74590cb72ce6b2b6c6::9d6b6405591244bc7bed3f4b673a9a0dfa3e5736::78a11328f95f44d6f8edbc261845ab5820aa2fd3::ea8b6238ab14239a601cd2ab1b343d85adf2f401::cea08182875e5095778d9de7301029593b1f76c9::4efacb69a4da0bdb4742b10885220f49595d4adf::1cf504da58de9bd083bbcdd9e79facb03b103650::70515e99fc97a0f258048e066702e71ab06833f0::73052e60933f07441b4787d4fcd0a60336d6c252::9fcfcdad09f417c9ba6c42cbc41a15674a8ba1a3::0e97a9128acbe7c404be23fb99c76091952d3b15::fe93beeee81a7c89c2972f1dfc7dde4788ab0285::1512ae0a555cf5d2445d7cdbe1add5a955b8554c::bd26938ce64dcf23df56a12e1cfb0fa8b88e4818::49d0d4838dac3263d1de55ff2fe15712e89f0ecf::0b120b12e845b6e46cda96bc03827be2e84071aa::b8677968c26c7b30ae6dba8295f454aca1f1a3bd::40143f08bb4468443716b79ba09c93e2abe40cdb::53538e7111f386900f9f141af9ea7f3257e8c07a::957c10c41b0bb6bbaf20a8654186ef85482ec5e6::a3982a73e33213d4368926bc0bbcd60320a4fc32::dea17b4dc923f4a1e082741ec689951e4b31168b::22dad18664897239131756778b706ea924fe41e9::98025cc191d9888e1f779b2d0472b0c31d831b99::3d23f4f2c0ea3378577a90f6e1d1e997f7f36d16::e8ff2068118af1f1318e5df26df338446b44ab15::0f39ffe4a1d1bdcd61981240e39d0e5a9d7a0db5::649714d21e8975678198049fa1a28ad78e2970c8::b08227b24619737d0e5966e3863268267ecb9ad5::7f1e1a056a355731ced24e519774d11444d8c356::b386767fd8b44df4da518218a89ed075cb4d4bc8::a8fbf31094a769ffd01da0253695ea61c4dfb727::fa145633dceb49864343c1e88343742abbc89161::bee5dce6d099f9f74d602c8759f9f5458d843b6c::23aef0c0e7d628960d7fc29ea2fb5ab78042dcaa::2f0a10de6e998355001f86d3c71bdfabebfd9e4e::0cc7d79d93cfea534e585aa13327b4751257c1d5::
https://api.github.com/repos/JuliaLang/julia,20583,tk/backport-19196::release-0.5,1,merged,,"fixes e.g. `MethodError: no method matching reduced_dims(::Tuple{Base.OneTo{Int64},Base.OneTo{Int64}}, ::Int64)` on `Pkg.test(""BlackBoxOptim"")` cc @timholy",a36a5ad42bcabb87dc10c619fbd3e0df1a0d1597::c0d4bc8e7239e14fe7f08aeab4ce381f4390feb0::
https://api.github.com/repos/JuliaLang/julia,20483,jn/release-0.5-pipe-ulimit::release-0.5,1,merged,build::test::,"to try making travis happiershould put the definition of this type under the `if LibGit2.version() >= v""0.25.0""` as well, it shouldn't be added to the module unless you're building in a non-default configuration and absolutely need it::It's not an API issue. I'm just attempting to roughly match whatever we have on master, not actually redesign that commit.::release-0.5 shouldn't match what's on master, it should remain close to 0.5.0. just change msys_build.sh to download 0.5-latest and you won't need to touch libgit2 at all::I don't think semver cares about internal names. This is non-breaking at the API level to keep this slightly closer to master. ::I don't want to be defining an unused type in the default build configuration.::",7fad97ff29731a57c8ee76b5c1ee296b328c39d5::8c59447296f08378659993bee979ee21afac2a2a::5bf5a7431e7877bede15b9ad23c89075c85f954a::8dcd331f960f59d7ffb9bb392c2b7d0f006b33fc::b8740400de428fca6fecb225f5de9def4aeee272::b39d11421459a5339b1dd830375daaef730872fb::0111175ff78f6810b639349c8ba85d0b74b0c551::d50b0c995280e856f6ffe10cc9a2a41110b13d5d::0946a75aa6ca2d7e8be2d6e2c9087bfb9900c5f2::f1a32342452c293e11a3c1f65d17fab4293b5ab9::d7ecb1b0967361c9f64fa78cfb9171599b8e4062::5ad11562b0aab5906aa5da3fe19adda323ad99f2::d679cf785febd7423be545fce0f38a1f71107dff::
https://api.github.com/repos/JuliaLang/julia,20481,vc/update_comment::master,1,merged,build::,Before I forget that the patch got backported to `release-40`. I did run `make check-whitespace` locally.,0e08d4700179a477903d07e5e6c56bc103cde8b0::
https://api.github.com/repos/JuliaLang/julia,20480,cb/propagatereqs::master,1,merged,packages::,"This adds a pre-pruning step in which requirements are propagated along the dependency graph, keeping a backtrace of the process. The logic is explained [here](https://github.com/JuliaLang/julia/blob/41f9d6b3301d65a291870a096ce56e941599a4a7/base/pkg/query.jl#L266-L269): if all allowed versions of a required package require some other package, then compute the union of all the allowed versions for that other package, and treat that as a new requirement. At the end, versions outside the allowed ranges are pruned. This has two benefits: 1. It makes things easier for the solver, by simplifying the graph and reducing the number of versions 2. It should detect most common problems with requirements that introduce implicit contradictions, and (since it keeps track of the process) it provides a useful error message to fix the situation. Take for example the second issue reported in #20313. The previous code used to produce this: ``` julia> Pkg.pin(""ColorTypes"",v""0.3.0"") ### the error message below is blaming the wrong package!!! INFO: Creating ColorTypes branch pinned.a846a532.tmp ERROR: unsatisfiable package requirements detected: no feasible version could be found for package: ImageRegistration ``` (the solver detected a problem, but the error message was unhelpful and actually misleading.) With this PR the problem is detected before invoking the solver, and it produces this instead: ``` julia> Pkg.pin(""ColorTypes"", v""0.3.0"") INFO: Package ColorTypes: checking out existing branch pinned.a846a532.tmp ERROR: Unsatisfiable requirements detected for package FixedPointNumbers: ├─version range [0.3.0,∞) required by package ColorTypes, whose only allowed version is 0.3.0: │ └─version 0.3.0 set by fixed requirement (package is checked out, dirty or pinned) ├─version range [0.0.0-,∞) required by package ImageRegistration, whose allowed version range is [0.0.0-,∞): │ └─version range [0.0.0-,∞) set by an explicit requirement └─version range [0.0.0-,0.3.0) required by package Images, whose allowed version range is [0.0.0-,∞): └─version range [0.0.0-,∞) required by package ImageRegistration, whose allowed version range is [0.0.0-,∞): └─[see above for ImageRegistration backtrace] The intersection of the requirements is empty. ``` cc @tkelman I suppose that in the future some of this code could be reused and be relevant for addressing #13340 too. Edit: I have also just changed the error message in case of failure of the solver, to at least improve the situation in cases like the one of #20313. Now it prints something like this: ``` ERROR: resolve is unable to satisfy package requirements. The problem was detected when trying to find a feasible version for package X. However, this only means that package X is involved in an unsatifiable or difficult dependency relation, and the root of the problem may be elsewhere. ``` I'm getting ``` ERROR: LoadError: LoadError: ArgumentError: argument to Flatten must contain at least one iterator in start at .\iterator.jl:599 in grow_to! at .\array.jl:357 in intersect at .\pkg\types.jl:44 in push! at .\pkg\types.jl:182 in requirements at .\pkg\query.jl:34 in resolve at .\pkg\entry.jl:476 ``` when I try to backport this to release-0.5 - the old version with `vec` should be equivalent right?::Yes it's equivalent, this was just removing an outdated band-aid. Sorry, maybe next time I should put such things in a separate commit.::It's already fairly granular. Also note that I had to adjust an assert to avoid anonymous type parameter syntax, I think https://github.com/JuliaLang/julia/commit/f907b5716805013fcd65b1720d1ff940e11ed815#diff-cac60f612c90efb7c227b01575fb8e15R214 should be equivalent::Yep, that should work fine too.::",8d27c72cc19238e4e849c9cc36cbf908459aaa63::d47f6e86a2f1ab7dedebb2b1ca43a366b35fb18c::d054d36fcc39f3a62b8bbb4a25e109dccafc87f7::ef78539f466627bdd673ed7c01fd7be0d9d641c7::df791619e82370033477f4608171d69cf08c1729::cbf984243cd2a199b302383be247cfde3522f8bc::1edbe3ede3fb6ad423999e7d3df6fcf5b7a4bf7b::
https://api.github.com/repos/JuliaLang/julia,20428,amitm/split_multi_2::master,1,merged,,"Title says it all. No user facing changes. Should merge it in sooner than later. Will make it easier to backport any bugfixes once 0.6 is released.un-exporting this one? I won't miss it much, but others might::if not extending, would be better to do `using` for these::should Parallel be later then? what depends on it?::Good catch. Will correct. ::OK.::I remember trying to do so and ran into some cross dependencies the last time around. Will check again if I can prune this list somewhat, else I'll just let it be for now.  ::The dependency was loading.jl which has now been moved too.::",90cfa09173b1fd874110d76cda6287c86459f643::eb74f9dc91e2293ef5acab8e5088b79fceeb5f86::
https://api.github.com/repos/JuliaLang/julia,20247,viewsfix::master,0,merged,bugfix::,"This fixes several problems in the `@view` and `@views` (#20164) macros: * `@view` had a hygiene bug, because it used the symbol `Base` in the caller's scope. * `@view A[1:end]` evaluated `A` twice, which is a problem e.g. if `A` is an expression with side effects.  Similarly for `@views`. * `@views x[i] += y` evaluated `x` and `i` twice, again a problem. * `@views x[i[j]] = y` did not use `maybeview` for `i[j]` The `@view` fixes (the first commit) should probably be backported to 0.5. (I used a workaround for #20241 here: just escaping the whole expression, with interpolated values as needed so that symbols are evaluated in the correct scope.)",f225d82e48e71300c624333c0c481bdcac494304::7aa23e0e53d66975575ffddc926844a7522c64d0::
https://api.github.com/repos/JuliaLang/julia,20063,sf/ifunc_fix::release-0.5,1,merged,arm::build::,"I think this is a good candidate for eventual backporting, it fixes compilation of `release-0.5` on ARM with newer compilers",d75967b96773992520937aedbc029cf1c8319b0f::
https://api.github.com/repos/JuliaLang/julia,19983,teh/linspace-0.5::release-0.5,1,closed,,"#18777 is failing at either build or test time on 32 bit, in ways that do not seem entirely deterministic. There are at least 2 hypotheses: - the PR is broken - the PR exposes a bug in the compiler This is an attempt to distinguish these (since I don't have access to 32-bit, I'm relying on CI). It's not a perfect test, but if it passes when backported to 0.5, that increases the likelihood that it's a compiler bug.",2c3f6af8a9619b52c0773e9de80e270936e6ca8f::
https://api.github.com/repos/JuliaLang/julia,19869,yyc/typeinf/fast_cmp::master,1,merged,inference::performance::,See the test cases. Tentatively add backport label since this should be non-breaking (the test will probably have some trivial conflicts),c56d59b28d7601d4f86a716cde4be7c69e28f385::
https://api.github.com/repos/JuliaLang/julia,19551,tk/llvmpatches-3.9.1::master,1,merged,build::,does not look like the rest were backported,d342efb349870b8aa0a6c26a42c2561e05af9363::
https://api.github.com/repos/JuliaLang/julia,19545,sh/fast_date_parsing::master,1,merged,dates::performance::,"This PR builds on @simonbyrne's #18000 and makes the (120x :laughing:) speed up available for custom date formats. It also re-does the DateFormat type to be sufficiently parameterized so that an efficient parsing function can be ""generated"". This also incidentally makes it easier to add new features to the parser. before: ```julia julia> @benchmark DateTime(""2010-10-10T10:10:10.10"") BenchmarkTools.Trial: memory estimate:  3.11 kb allocs estimate:  85 -------------- minimum time:     20.125 μs (0.00% GC) median time:      21.233 μs (0.00% GC) mean time:        21.818 μs (1.38% GC) maximum time:     3.128 ms (96.19% GC) -------------- samples:          10000 evals/sample:     1 time tolerance:   5.00% memory tolerance: 1.00% ``` after: ```julia julia> @benchmark DateTime(""2010-10-10T10:10:10.10"") BenchmarkTools.Trial: memory estimate:  0.00 bytes allocs estimate:  0 -------------- minimum time:     164.320 ns (0.00% GC) median time:      168.183 ns (0.00% GC) mean time:        168.666 ns (0.00% GC) maximum time:     291.389 ns (0.00% GC) -------------- samples:          10000 evals/sample:     750 time tolerance:   5.00% memory tolerance: 1.00% ``` Also works fast for custom date format strings. ```julia julia> @benchmark DateTime(""01-01-2010X53:23:12"", dateformat""dd-mm-YXS:M:H"") BenchmarkTools.Trial: memory estimate:  0.00 bytes allocs estimate:  0 -------------- minimum time:     148.979 ns (0.00% GC) median time:      151.564 ns (0.00% GC) mean time:        153.853 ns (0.00% GC) maximum time:     327.571 ns (0.00% GC) -------------- samples:          10000 evals/sample:     818 time tolerance:   5.00% memory tolerance: 1.00% ``` fixes #15888, #13644 supersedes #18000 @vtjnash do you know of a way to make this not generated, but still get the same performance?::bad rebase here::should be added to the manual index if exported::How do I do this?::comment no longer applies?::What's the advantage of having this duplicate constructor versus: ```julia DateTime(t::NTuple{7,Int}) = DateTime(t[1], t[2], t[3], t[4], t[5], t[6], t[7]) ```::Current implementation will run into issues with integer overflow on 32-bit systems::If you want to indicate `null` here you want `false`::There was a cost to splatting so I added this, forgot to remove / define one with the other. Was going to do this, thanks! The tests are failing on 32 bit machines because of overflow. I modified this method to convert the input tuple to Int32s but wasn't able to reproduce the failure. I'm wondering how tests passed in the previous implementation if the constructor is the problem. Do you have an idea of where exactly it breaks?::fixed, added a test::Or just `DateTime(t...)`::why not `T(tup...)`?::Yes, this was a 0.6 change, so may give different results than 0.5::I fixed changed this in a later commit. this review business is a bit confusing. Thanks for reviewing!::I strongly recommend against baking `lang` into a type parameter. This will actually make the API more awkward to extend than presenting it to the user as a dict.::I know the classic way of doing it in a static language (hardcoding a jump table / switch / vtable), but afaik there isn't really a good way to express that optimization in Julia right now (other than by doing a generated function like this). fwiw, since this only uses `@nexpr`, it appears to be a completely valid generated function.::Okay. I can make this type hold two dictionaries.::We may want to think about how this can be generalised to other locale-based print functions (e.g. decimal separators), though that may be better in a different PR.::see contributing.md::If you meant I need to add this to the manual, I have. I was wondering if there's some kind of list I need to update when you said ""manual index""::not talking about doc/manual, talking about doc/stdlib for the docstring. yes there is a list, again see contributing.md::Ah, okay. Will do.::@vtjnash Are these changes to the generated function fine by you?::This is what I was trying to avoid by having the number of times a token is repeated and fixwidth in the type parameters - you could just dispatch on the format object's `typeof`. This is fine too, and probably better.::I mostly included this custom parser to demonstrate how fast we can make parsing. Exceptions that occur with this custom parser will be rather generic in compared to what you get when using `tryparse_internal`. That said this parser is faster and should work as intended.::It's not very flexible (you won't be able to provide new definitions for these functions, such as `slot_defaults `), but I think it's valid. However, I don't think `NTuple{N}` is valid (here and elsewhere), since with https://github.com/JuliaLang/julia/pull/18457 that will mean ""a tuple with N elements of the *same* type""::I assume that will also be an issue for `@ntuple`?::I'd add another space at the `1 :d` so it doesn't look like a symbol if you're reading quickly::this doesn't follow the docstring conventions, probably better as a comment since the intended public API is by the functions which don't set the fields directly, right?::it's not immediately obvious that `Nullable{Int64}(nothing)` returns `Nullable{Int64}()`, might be more explicit just spelling out the cases ```jl if val == 0 return Nullable{Int64}(), i else return Nullable{Int64}(val), i end ```::what do the inputs to this mean, what does it return? none of the implementations of this method make sense at all without any comments::comments please. what's this doing?::what is `default_fields` doing?::this is still a major issue, isn't it? edit: meaning the NTuple issue in the previous discussion at this line::could also use some comments on what this reorder_args business is doing::same comment as above about `Nullable{T}(nothing)`::does this duplicate the null check?::not much need to have this use `i` instead of `j` is there? given the rest of the lines that look like this are `@goto done`, this one is different with `@goto error` so may as well also be different with `j > end_pos`, then don't need the `i = j`::under-indented (same below with `dayabbr`)::so the new parsing is more permissive of partial matches? should that be mentioned in news or somewhere else?::is this breaking then, or was allowing comments before unintentional? can that capability be recreated now with a fancier date format if someone needs it?::was not being picky about the leading slash a bug or intentional before?::Should be removed from the docstring. Was needed in an earlier revision of this PR.::Very true. I originally did this so I could remove the millisecond chunk without having to modify that check. I'm fine with your suggestion.::Possibly unintentional. I believe the original implementation just ignored the remainder of a string when had collected all the slots indicated by the format.::Personally, I think removal of comments should probably happen as a pre-processing step if it is needed.::There was a special case in the original code that said: if the first slot is succeeded by a delimiter then the first slot and the delimiter is required. Before PR ```julia julia> Dates.Date(""1"", ""y-m-d"") ERROR: ArgumentError: Delimiter mismatch. Couldn't find first delimiter, ""-"", in date string in parse(::String, ::Base.Dates.DateFormat) at ./dates/io.jl:169 in Date(::String, ::String) at ./dates/io.jl:277 julia> Dates.Date(""1-"", ""y-m-d"") 0001-01-01 julia>  Dates.Date(""1"", ""ymd"") 0001-01-01 ``` After PR: ```julia julia> Dates.Date(""1"", ""y-m-d"") 0001-01-01 julia> Dates.Date(""1-"", ""y-m-d"") 0001-01-01 julia> Dates.Date(""1"", ""ymd"")  # Note: currently there is a bug with this. 0001-01-01 ``` ::Also, the original code was inconsistent with this rule as it trimmed whitespace automatically: Before PR: ```julia julia> Dates.Date(""1 "", ""y m d"")  # Delimiter removed when removing whitespace ERROR: ArgumentError: Delimiter mismatch. Couldn't find first delimiter, "" "", in date string in parse(::String, ::Base.Dates.DateFormat) at ./dates/io.jl:169 in Date(::String, ::String) at ./dates/io.jl:277 ```::Thanks for the answers here - sounds reasonable. The behavior changes make this not a backport candidate though.::We have some options if people want this functionality in 0.5. The simplest would be to backport the dispatch for custom parsers which would allow us to get the performance improvement for ISO 8601 formatted strings.::Why is this bad usage? Also, this could be `nfields`::This allocates and is slower...?::~I preferred to keep minimal logic in the `@generated` function as it makes it easier to understand...~::I agree that it should be a pre-processing step. I think we should merge this now and then open a PR against 0.5 branch with changes that make it possible to backport this.::My guess is it was an artefact of how it was implemented. @quinnj ::@omus why would it be an issue for `@ntuple`? It's a macro which writes N expressions in a tuple literal afaict...::Ah I see now, I just saw Jameson's comment above.::@vtjnash any other way to facilitate the compiler figuring out the length of the tuple? I presume that uncertainty is why it needs to box this tuple?::Oh never mind, I know that idx is always `NTuple{N,Int}`::this was right before::shouldn't have excess lines between a docstring and what it's attached to::y, not num? latter isn't defined here (does this cause a test failure? if not, needs coverage)::We should be able to switch `idx` back to an `NTuple` to avoid the length call.::@shashi I forgot to address this comment. Can you take care of it?::@shashi it would only be an issue if `@ntuple` was forced to return an `NTuple`. Since it returns a `Tuple` we should be fine.::looking through Jeff's PR, you just need to replace `NTuple{N}` with `NTuple{N, Any}` to keep it working::Done.::Do we know why this is the case? (i.e. keep exception generation in a separate function helps with performance)::Is there a version that provides a default `DateFormat` for `parse`?::We definitely need to combine this with broader efforts to improve integer parsing in Base in general; it's not ideal to have separate implementations in various places. I think this is fine for now, but I know last time I looked at the integer parsing code, there was a lot of low-hanging fruit.::Ah, here's the default I was looking for.::Probably should mention the days of week here too.::Should be ""`dateformat""""` string macro""::Maybe expand the for-loop here for readability?::Love the new `DateFormat` printing, great improvement!::I'm fine with going w/ this now, but it'd be nice to support it if possible.::I don't remember the specifics at this point. I'm fine throwing an ArgumentError here though.::As w/ months, the french don't capitalize days of the week, so it'd be a bit better to do: ```julia [""lundi"", ""mardi"", ""mercredi"", ""jeudi"", ""vendredi"", ""samedi"", ""dimanche""], [""lun"", ""mar"", ""mer"", ""jeu"", ""ven"", ""sam"", ""dim""] ```::Use lowercase versions mentioned above.::I'm sure this is probably one of the biggest sources of performance gain; hurray for dispatch!::Probably could avoid the extra indexing copy here if desired.::Same here; there's probably a more efficient way to avoid the indexing copy.::Should we add a `Z` here? I think RFC1123 allows having GMT at the end of it's datetime string. (comment should have been included in original review, but github went down....:( )::I'm unsure why this is the case. My best guess is that the string interpolation is done even when the exception does not need to be created.::Actually this isn't a default it's a specialized parser for dealing with the ISO8601 DateFormat.::Yeah, I plan to include that in a later PR. Will remove this then.::Would creating a substring avoid a copy?::I think that would work; in Feather, I resorted to always writing a `view` of the underlying bytes, but a Substring should work too.::Yeah, you're right.::Currently we don't have parsing for time zones in Base do we?::Time zone parsing is in https://github.com/JuliaTime/TimeZones.jl::So it works by looking at `Delim{'Z'}`? When someone is not using TimeZones, Base parses till before Z and everything keeps working? Kinda feels like a hack, but if it works... Feel free to push this change if you see it makes sense.::@omus @quinnj is it okay if we always use `""YYYY-mm-dd\THH:MM:SS.s""` here? This type instability adds to the printing slow down. Users wanting to ignore milliseconds can specify `dateformat""YYYY-mm-dd\THH:MM:SS""`::Fine by me.::Oh, wait. this is not really a problem... ::Glad it's not a problem. If we were to change this I think I would prefer `""YYYY-mm-dd\THH:MM:SS.sss""`::Should probably save `endof(str)` before the if.::are milliseconds in a DateTime only ever a single digit?::No, `s` stands for any number of digits e.g. `s` gives `.5` or `.05` or `.005` while `.sss` would give `.500`, `.050`.::so is the 26 a minimum?::do you want to delete the now-duplicate one at line 46 then?::No it's usually 23 chars, I added 3 more bytes to keep this going fast even when the year is `-10000` ;) I'm not sure if this really matters, doesn't julia allocate the buffer backing an array in multiples of 16 bytes or something?::Oh, yes, I should overlooked that when resolving merge conflicts.::Not sure. As long as this is just a rough-guess buffer preallocation and things work fine if the actual output is longer or shorter then I'll just go with whatever the benchmarks say.::First word in a sentence should be capitalized::",87200601e4efcc98d6d448e2579eae1ef7358537::a081b5c1bbacb230209ea9ef539fe530943fc481::8afc3769ed4a2a5da42013414f204a0c096c6674::baaffca2e59ba8acb2f702a37f7bd90c7b7486df::25cc4c12c1dab411044389f45714d0107ba4d46b::5595211045c703b8188be3a22409f559f9389fd0::996d35b37a15469c499274c6f4f84ff042d6bb41::53cab497499184f96f1424f7abc3f2dd0b9ad61b::991ac401bd6d3d4c3444a80f06cf11005a0c8710::113cfa102e2aaef56fefde20c265f793d46b25f1::0c1963262e94e8aceae8c9be45055d411176496f::3f5bbce575576b9cb053dd51aa557a4e5e7753f1::dc1907bafc199cbfedf4abc759ee5bd2a81afcb4::0d7ec95c51cde24ea78bf8773ba2927cbbdd67f7::6dcf840d20f604db3bb7721dcd2b2d80c71c1d29::e008926745d737156e3a9e34d44adeb00cd7827d::69b2697c6ba5e73e34aa8a442199397134d16ccf::03f552fcf3cc33ed0400ad2b0d85637e0e12be81::ffbdc79ce87eaf9e74aedd3435513c50ab2ce603::2d69fb5c31343d7ad3d94de51759e996bdc2f4ad::01ac919ee12116fa4f410f39e64effc29ea53298::ddf2be6a33d05c27b2a98244f1db5f2b3700a182::2a86b7573bd7ddb3c80810cedd8862bdb784028e::
https://api.github.com/repos/JuliaLang/julia,19445,spj/fixcmp::master,0,merged,strings::,"This was spotted by Scott on Gitter. The first commit is a candidate for backport, the second is just an enhancement.",4a0798478c6dc9bbe3ba14f996060448efd8bcb1::3262a295c1442c6b8686dcb9ac44c92711e5290c::
https://api.github.com/repos/JuliaLang/julia,19437,yyc/gc/stk-ub::master,1,merged,GC::,This does no really fix a bug but should make embedding in scripting languages a little easier. Copying only part of the stack should be less problematic than copying stack frames that do not expect it so I think we could support that. Bottom line is that I don't really like this but this shouldn't introduce any new segfault. Doing a stack switch with an stack address higher than `stackbase` can probably still do sth weird (it'll request a unreasonably big buffer to old the stack for example). This fixes https://github.com/JuliaPy/pyjulia/issues/71 for me and will likely fix https://github.com/JuliaLang/julia/issues/19401 although I have no way to verify the second one. Apparently people are hitting this as early as 0.3 but I'm not sure how backportable this actually this.....,e701cbede61349d31116a39b801c24c809d6e2ff::
https://api.github.com/repos/JuliaLang/julia,19388,jn/backports265.5::master,1,merged,,this is a backport of additional fixes I had made to avoid segfaults on my #265-fix branch (#17057),f827d1793cc765159f3ff19cc094fac44001770d::355cc0b99c5df55f5c6b416a5199821feb9ed8e7::d60d0c49f166d30be9ef1c6e760887d0688c4052::544735035e8043b17425160474f2322fc9b93a54::
https://api.github.com/repos/JuliaLang/julia,19387,pz/typestablecat::master,0,merged,potential benchmark::,"This is a rewriting of the some of the array concatenation methods to make them type stable. The PR adds a type stable version of `cat` (`cat{n}(::Type{Val{n}}, X...)`) while preserving the existing API (which cannot be made inferable, but should be just a bit faster than before anyway). Fixes #13665,  #19038 and #19304 NOTE: I believe the first three commits could be backported to 0.5.While you're at it, could you choose the return type based on all input types (https://github.com/JuliaLang/julia/issues/2326)? Or do you think it should go into another PR?::I'd like to handle that somehow, but I'd say that it would have to be addressed elsewhere. For one I have some ideas that would require the new sub-typing algorithm in place.::Out of curiosity, why replace the comprehensions with `map`s? Generate `Tuple`s rather than `Vector`s? Would `SparseMatrixCSC` suffice in place of `x -> SparseMatrixCSC(issparse(x) ? x : sparse(x))`? Best!::> Out of curiosity, why replace the comprehensions with maps? Generate Tuples rather than Vectors? Just to avoid the allocation from creating the array, although it shouldn't make much of a difference. > Would SparseMatrixCSC suffice in place of x -> SparseMatrixCSC(issparse(x) ? x : sparse(x))? `SparseMatrixCSC([1])` is not the same as `SparseMatrixCSC(sparse([1]))`. Actually, the first one fails.::I'm confused, don't both `map` and the comprehension allocate the same number of arrays?::`map` returns a tuple for tuple inputs, while a comprehension creates an array.::Is just for avoiding the array that holds the arrays. But as I said, it should make much of a difference and I can change it back if you think its better.::Your modifications look great to me --- thank you for the explanations!::Wouldn't putting `T <: Number` first be better to avoid computing the `countnz` part when possible?::Good call. Changed.::",31df9271e81d0bc9e50adede48fd785e2b91412f::70a54ea5bffc705cc9054d61b954f05078590dfa::240bc2ddf6b0502ca91cda68f4e76776e1d26a20::524cb5fc47c0bd3d0c301bd7482bfe61422754fb::
https://api.github.com/repos/JuliaLang/julia,19335,jn/19333::master,1,merged,,"fix #19333 (note for backporting: I think the `all-vars` variable was simply `vars` in release-0.5, but that otherwise the code is fairly similar)",95dbbda2fdb7d5afcd30e1e8f9cc2c3e064b5850::
https://api.github.com/repos/JuliaLang/julia,19103,teh/reduced_indices::master,1,merged,deprecation::,This may also make backporting to julia-0.5 safer. Ref https://github.com/JuliaLang/julia/pull/19100#issuecomment-256087668.,4d47670d03f2884f29c581603d2b12541a2ba9e1::a089121c7c30f786f8b5e02a8f8298762eb59a2b::
https://api.github.com/repos/JuliaLang/julia,19020,cb/bitmisc::master,1,merged,test::,"This batch includes a bugfix (the bug was never reported, but it's potentially harmful) to `read!(f, ::BitArray)`, plus a lot of changes in `test/bitarray.jl` which make them more consistent overall, fix some issues which had accumulated over time, and cuts the test time roughly in half (by trimming the most time-consuming tests). Assuming it goes through, this could all be backported to 0.5. previous version of this test was also checking equality of the bitarrays to one another, not just their sizes ::Yes, but that check was wrong, since the `BitArray` constructor is supposed to produce uninitialized data. It was only working because in the previous version of the tests the size was small enough (it used to be 10, BitArrays of length up to 64 are initialized to all falses, but that is incidental and not part of the specs; now it's 260 and if you try to check for equality it will most likely fail). ::Ah, interesting. What's the reason for zero initializing only when sizes are small enough to fit in a single chunk? ::The reason is this: the BitArray spec [says](https://github.com/JuliaLang/julia/blob/0faf8ce200103839577171d28a4d1545fa827336/base/bitarray.jl#L6) that everything in the last chunk beyond the last used bit must be set to zero; when initializing a (supposedly uninitalized) BitArray, this is simply implemented by [zeroing the whole last chunk](https://github.com/JuliaLang/julia/blob/0faf8ce200103839577171d28a4d1545fa827336/base/bitarray.jl#L21) because it's quicker than masking. Thus a BitArray with a single chunk will be set to zero. ::",358a774585d87466d84fd53d301a84d564c4db87::55e165445cfe740bc8bea1464a313c74b4466793::1d3b346ce507f5f5deb3e7e94b779157318d883a::b9b044bb54a463fc349f24c8a8b956cfca2e274c::b413a7aabd07771f25d48ebc0d0d4f6a004fbc68::59404ddba9462f95f9a9cf1f6c5feb306ce8c8a2::b97db5dca02558925e719974db497c91b34dd58f::
https://api.github.com/repos/JuliaLang/julia,18995,cb/fix_unicode_table::master,1,merged,doc::unicode::,"The table at http://docs.julialang.org/en/release-0.5/manual/unicode-input/ has been out of sync for a while. This fixes it. It should also help rendering combining characters, making them visible (it works in the github renderer and on my machine, hopefully it should also work in readthedocs). If everything's ok this could be backported to 0.5.",f3e2c6b3e88950995d09f5e452e1047bff06d2da::
https://api.github.com/repos/JuliaLang/julia,18812,vc/power_backports::release-0.5,1,merged,help wanted::power::,"This backports the necessary fixes to enable threading on Power. ``` _ _       _ _(_)_     |  A fresh approach to technical computing (_)     | (_) (_)    |  Documentation: http://docs.julialang.org _ _   _| |_  __ _   |  Type ""?help"" for help. | | | | | | |/ _` |  | | | |_| | | | (_| |  |  Version 0.5.1-pre+11 (2016-10-06 06:20 UTC) _/ |\__'_|_|_|\__'_|  |  vc/power_backports/077b605* (fork: 9 commits, 16 days) |__/                   |  powerpc64le-unknown-linux-gnu julia> make -C test threads make: Entering directory `/home/valentin/julia/test' JULIA test/threads * threads              Warning: threaded loop executed in order in   4.33 seconds, maxrss  248.31 MB SUCCESS ```",b542d5b1eba9160ab36ff0d80608c10895b960f8::1c78aca39aa7094116476c135bc0d1d233aa0f26::a586b9088a7a731ed271578c399ce25987491147::a29d60f8a71879495184489bcc97f78c840ad4a2::42eebb2e22b9f169d733dab273949573f71cbf21::e8f6bf27f3e6cdff355d8c26ac39528af55379e2::99d05392d2ac7693607c7d8ba8bcbb27a79618b5::f96624e40863928d0493a5a2ed99b30a0629ee3f::077b605a18341f6929fd8f74fdc194e0b8a72c55::
https://api.github.com/repos/JuliaLang/julia,18811,jn/backports265.2::master,1,merged,,trying to cut down on the diff a bit & bugfixes on the wrong branch,6876dd77f3e5c719221a6dd65224e08ccfd6f97f::4c666027d4ce9a23a443a08976641a0cf07896c5::b4d49e5616d58cf9e39bd87bd4fd845969c54625::
https://api.github.com/repos/JuliaLang/julia,18679,jn/backports265.1::master,1,merged,,"Fixes some method definition orderings, and other `@generated` functions, that will be broken by PR #17057 should this 10 be given a name? ::this causes a method overwrite warning, why is it needed? ::""too closely"" don't end a sentence with "", however."" - just delete that ::why the rewording from ""compile-time cost"" to ""overhead"" ? is this not strictly a compile time difference? ::different quoted expressions ::it's just a random round-ish number ::for the same reason the other method overwrite warning happens in searchsorted ::no, it's adds overhead in many places ::any horizon for not needing that? ::The one in this case might not be needed --- calling a kwarg function with no keyword arguments is fast. The problem in searchsorted was that computing the keyword arg default values required dynamic dispatch. ::True, the problem in this case is actually just that lowering won't apply `@pure` to the kwargs functions, and that's quite fixable. ::add a TODO comment saying to fix pure for kwargs so the no-kwargs method can be deleted then? ::original issue should be corrected by 3f2213f4e74ed3070045da139f659694b7c071a8 now ::But this is not pure.  This is mentioned way later, but coming after the new point ""4."" this is just odd.  Maybe state that doing `println` is ok? ::To go with the later ""they""s, start with ""4. Generated functions must not..."" ::""was defined _before_ the definition of the generated function."" ::As `@mauro3` suggested in https://github.com/JuliaLang/julia/pull/18679/files#r80905058, perhaps also mention the issues immediately alongside the corresponding examples? ::for -> of (""now that we have a better understanding of how generated functions work""). ::`println` isn't OK, it's just a convenient function for showing how they work (and along the way demonstrating why it isn't OK) ::rst, so double backticks ::Just FYI, this change doesn't fix the ASAN issue I mentioned. ::",469031eedb205add9b7a7e28acdf56a45143a0fb::d5baf6a614712a67ac2456e3a89ac3e1aefc4982::8e39436155fcf3bb8088dd61908f51a86d7b7fd3::d8ea82ebf6e507a53b86e8d50e88a5400264bba4::785adcae18a5e89007a666205ce3f9c24d0502cc::39d36991dc9596bd0b2b7aaad78077464d67f89e::f64fa84d6b7887d88bf19bace0e0e9076379fcac::f299848202f84587cb437105fe03165ba250a288::d7902754ca24943ad3976a9f678fa054ed07ad12::
https://api.github.com/repos/JuliaLang/julia,18658,tk/libgit2-mbedtls::master,1,merged,build::libgit2::linux::,"This carries the patch from https://github.com/libgit2/libgit2/pull/3462 in order to fix #10763, and close #17471. It seems libgit2 maintainers are reluctant to merge this patch upstream, but maybe we can change their mind eventually. This is a much more maintainable approach than re-implementing a pure Julia TLS stack which is what #17471 was suggesting, and no one is actively working on right now. Would only be backported to release-0.5 after being tested on master for some time. It fixes an as-yet-unreported issue with our generic Linux binaries where our bundled copy of libgit2 links against libgssapi_krb5.so.2 and a bunch of other things that we don't ship. We've just been getting lucky that most Linux systems happen to have those same libraries installed already. The issue is reproducible if you try to download and run the generic Linux binaries in an Ubuntu docker container that has installed wget and nothing else beyond the base image. Dropping our use of openssl from the build system should fix that, and it's an improvement in several other ways. Since the buildbots run on a very old CentOS, their copy of openssl is old and heavily patched. Assigning @Keno for review.",e7fbf2af28dcb6f2446f7dc6111989a1cdab1ccd::48f0f5ab4ed60099d1e2e94839967fd00cb38a8b::64df291cda789aa49fb459099bce6b45842cfae1::cae06f56e25434a9baf282c2b09c890998c2d803::69cdabe7f086e67e2680cc6c6f0ee81bfff4ab85::f241e23db214f008baef80bf6bcf75a6c7efe5f9::
https://api.github.com/repos/JuliaLang/julia,18605,jn/generated-detect-18577::master,1,merged,,"this would have detected #18577 before it was merged added by @JeffBezanson in https://github.com/JuliaLang/julia/commit/b43c5e0fba738a188f2b5396ef7a9c51a8dbc3ee - presumably this was needed for something? I hate to backport new restrictions, even if it's just an earlier error on code that may be invalid. Will have to see how many packages are actually doing this. What's allowed in generated functions is starting to become a pretty restrictive subset of the language, and I don't think people have been aware of that or writing them that way. ::At some point, we likely may want to reintroduce this, but right now it gets handled incorrectly by the runtime system and will likely require not-backportable changes to fix. > What's allowed in generated functions is starting to become a pretty restrictive subset of the language It's not ""starting to become"" because it's really not a new restriction, it's just better at enforcing correctness up-front now. On the other hand, the fix for #265 _will_ add significant new restrictions to them, although it shouldn't affect anyone who's been fully observant of their definition. > and I don't think people have been aware of that or writing them that way. That's too bad, but the manual does repeat several times that ""you should /never/ write a generated function with side effects"" [emphasis original] http://docs.julialang.org/en/latest/manual/metaprogramming/#generated-functions (unfortunately interspersed with various buggy examples). I can repeat it a few more times, but I consider it better just to enforce the restrictions. ::can we please fix and elaborate on the docs while we're at it then? Most people likely don't think of using closures or comprehensions as having side effects in this way. ::mixed into the same PR or on its own? ::either, as long as it gets done promptly. considering this is newly enforced, it should probably be documented here though. ::Yes, it's not reasonable to consider a generated function with a closure to have side effects --- the side effects there are in our implementation, not in the user's code. For backporting, it doesn't matter how ""new restriction"" is defined. All that matters is whether code can break. ::Yes, I wouldn't have made this an error if that code wasn't already broken, so that this was just adding a clearer error than ""segfault"", corruption of precompiled files, or other errors in which method gets called. I look forward to having anonymous functions again, so that they are uniquely defined by content rather than by name. ::",b4fc653b72d1d011e91023acb8028a39e6305f79::
https://api.github.com/repos/JuliaLang/julia,18594,sgl/master/darwinframework::master,0,merged,build::mac::,"This PR adds a make target for creating a Darwin framework bundle and adds support where needed in base. On OS X, Python is often built and distributed as a framework. I believe Ruby and Perl have also seen similar treatment.  This PR adds a similar option for Julia. For embedding support in a mac app, the framework bundle is very convenient.  A framework bundle can be versioned, allowing simultaneous installation of 0.6, 0.7 etc.  (The Python Apple ships is all in one bundle with multiple versions)  OS X knows how to handle framework bundles natively, including installation and upgrades. how much of these things can we have only under contrib/mac? ::same here, can this go under contrib/mac? ::note the comment at the top of `Makefile` > Third-party code that is not controlled by Pkg should be installed into prefix/share/julia/site/VERSDIR (not prefix/share/julia/VERSDIR/site ... so that prefix/share/julia/VERSDIR can be overwritten without touching third-party code). ::just do an `if` or short-circuit instead of ternary? ::not `joinpath` ? ::I think failure here is intentionally being ignored ::use spaces for shell scripts - either 2 or 4 as long as you're consistent within the file ::should this file be merged with the conventional `julia-config.jl`, perhaps have its changed behavior enabled with a framework flag? ::(maybe rebased after we merge #18522 since that would likely cause a conflict) ::I think many if not all of these `framework_*` and `apple_codesign_*` variables could be under contrib/mac.  No problem. ::Right, so I would do something like Library/Julia/site/VERSDIR instead then?  Or are you suggesting stick to prefix/share/julia as the base directory structure over the os x standard of [~]/Library/Julia? ::I seem to recall having issues using `joinpath` here.  IIRC, during sysimg generation, `joinpath` is not defined yet when libdl.jl is included and so sysimg generation fails. ::Yeah I remember seeing the comment above the line. I did this for my testing purposes so that I would not miss any potential problems. I will revert this. ::I based this on the conventional `julia-config.jl` so it  could be merged back no problem.  I added a `Base.DARWIN_FRAMEWORK` boolean that could be checked in `julia-config.jl` to alter behavior. ::right, just the ordering of site vs version I think should be consistent ::adding a boolean like that and having so much changed behavior isn't my favorite thing for this, it's going to be a bit error prone for every package author to potentially have to take this into account when considering where things are located ::The changes in the main Makefile could all probably go under a separate contrib/mac Makefile. ::In `base/Makefile`, where `build_h.jl` is generated, I added 1 or 2 variables to base: 1. `Base.DARWIN_FRAMEWORK` (boolean: true if packaged as framework, else false) 2. `Base.DARWIN_FRAMEWORK_NAME` (string: allows packager to rename the framework e.g. JuliaGPL.framework or JuliaDebug.framework). In my limited testing I have not had issues with packages that assume things about the julia installation, but it seems very likely that some patches do indeed make assumptions.   For example, assuming the traditional Unix hierarchy structure (bin,lib,share, etc.) instead of a framework structure.  For example, within Julia itself, there are assumptions that the shared library is named `libjulia[-debug].*`, whereas for my framework target the shared library takes the name contained in the string `Base.DARWIN_FRAMEWORK_NAME`. (see changes to `test/libdl.jl`) I see the `DARWIN_FRAMEWORK` and `DARWIN_FRAMEWORK_NAME` variables as similar in purpose to the `SYSCONFDIR`, `DATAROOTDIR`, `DOCDIR`, `LIBDIR`, and `INCLUDEDIR` variables.  Package authors should already be using those variables as necessary. ::the rest of those aren't OS specific though ::After a quick grep of my changes, the two `DARWIN_FRAMEWORK` variables are only used in base to modify: 1. `LOAD_PATH` points to `[~]/Library/DARWIN_FRAMEWORK_NAME/site/version`. 2. `DL_LOAD_PATH` points to `[~]/Library/DARWIN_FRAMEWORK_NAME/lib`. 3. The shared library name is `DARWIN_FRAMEWORK_NAME` instead of `libjulia[-debug].*`. The first two points could be made to not depend on the `DARWIN_FRAMEWORK_NAME` and instead always point at `Library/Julia` on macOS, perhaps even when not building as a framework. The third point could be made OS agnostic by adding a single variable to `build_h.jl` that names `libjulia`.  This would benefit and simplify other places in the code where the library name is constructed by appending `-debug` for debug builds.  Package authors could be recommended to always rely on `julia-config.jl` output if they must build and link against Julia for some reason. ::that sounds preferable. why do we need the flexibility to name libjulia something different here (aside from the -debug difference)? external embedding consumers who want to do something like that are going to be fairly rare, I would think? ::If we have `Julia.framework`, then the actual shared library must be named `Julia` (no lib prefix and no suffix or extension.  So unless the framework is named `libjulia.framework` (which is unconventional naming for a framework), I think there should be a mechanism for determining the name of the Julia shared library. ::I will add that besides the three select locations in Julia outlined above, I do not foresee regular users or package authors needing to ever know about or use the `Base. DARWIN_FRAMEWORK` boolean variable. ::that's an odd restriction. people other than apple package cross platform projects this way? or do they make a bunch of .dylib symlinks with the conventional name general code would expect to use? getting rid of this boolean in favor of more general solutions seems better to me. ::It is possible to do symlinks to a traditional unix hierarchy, but the Apple code signing documentation hints that this may break in the future.  In my experience with code signing over the last several years, each new OS version has become more strict on the code signing rules.  Beyond code signing concerns, sandboxing (whether the App Sandbox or not) is strict about the layout of code and resources and code identifiers. Other cross platform projects that choose to offer a framework target mostly fall back on a symlink to unix hier approach, but I believe that Apple's documentation and my experience with code signing and sandbox strongly suggest following Apple's recommendations for framework layout. If `julia-config.jl` knows how to handle frameworks, then general use code can rely on its output to compile and link against a Julia framework.  Cmake knows how to transparently handle frameworks as well. ::add the symlinks until it actually becomes a problem, but build the tooling in a generic way that doesn't have to rely on them? if we introduce a variable for the name of libjulia (which seems much less framework specific to me, so useful to add) then I still suspect many people would miss using it. ::1. I have a use case right now where the symlinks break things.  (I'm working on a sandboxed mac app that embeds Julia.) 2. It seems to me that if a user knows about INCLUDEDIR, DATAROOTDIR, etc. then the user would know about JULIALIBNAME (if it's called that).  Or if the user knows to append -debug, then JULIALIBNAME would not be much of a stretch to find and use. ::how common is that? if we built with symlinks by default but you deleted them manually would that work for your use case? I think a lot of users and package authors aren't dealing with INCLUDEDIR etc correctly yet either. Bikesheddy, but JULIALIBNAME or LIBJULIANAME? ::I think I have a compromise for the unix hier embedded in a framework with symlinks.  I will test this as soon as I get a chance.  Instead of symlinks from framework locations into the usr/{bin,lib,include,...} directories, have the symlinks go the other way where unix directories {bin,lib,include,...} are symlinks to the locations in the framework bundle.  See below for the idea: ``` Julia.framework └── Versions ├── 0.5 │   ├── Documentation │   │   ├── ... │   ├── Frameworks │   │   ├── libamd.dylib │   │   ├── libarpack.2.dylib │   │   ├── libarpack.dylib -> libarpack.2.dylib │   │   ├── ... │   ├── Headers │   │   ├── Julia.h │   │   └── julia │   │       ├── ... │   ├── Helpers │   │   └── julia │   ├── Julia │   ├── Modules │   │   └── module.modulemap │   ├── Resources │   │   ├── Info.plist │   │   ├── LICENSE.md │   │   ├── julia │   │   │   ├── base │   │   │   │   ├── ... │   ├── include -> Headers │   ├── bin -> Helpers │   ├── lib │   │   ├── libjulia.dylib -> ../Julia │   │   └── julia -> ../Frameworks │   ├── share -> Resources │   └── _CodeSignature │       └── CodeResources └── Current -> 0.5 ``` ::yeah that's the direction i was thinking, for the dylib at least. may as well do the rest too? ::If you get the sandbox working, could you make a simplified example that we can use as a test to make sure we don't break anything in future? ::Seems like an odd folder choice – I think `~/Library/Application Support/Julia` would be a more standard path prefix?::I chose a top-level Library directory to match Apple's own uses (see `[~]/Library/{Perl,Ruby,Python}`. The App Support sub-directory would be appropriate for files specific to the repl/ui (e.g. `Library/Application Support/Julia/.julia_history`, although I doubt anyone would want to move `.julia_history` out of `$HOME`)::would rather not change this naming, would mess with the buildbots::are you sure we don't need these?::`MACOSX_DEPLOYMENT_TARGET` is the env var picked up by all the macOS tooling so it's best to export it. could do `export MACOSX_DEPLOYMENT_TARGET= MACOSX_VERSION_MIN` so that buildbots aren't touched but the `MACOSX_DEPLOYMENT_TARGET` var is still set::can this reuse the install target instead of copying it?::changing the default here would be very disruptive for existing users::I agree it would be disruptive.  Perhaps a one-time migration could be added? For example, if the `Library/Julia` directory doesn't exist, create it and move any existing v0.7 stuff from `.julia` and print a notice to the user to manually cp/mv anything that's not versioned from `.julia`.::I am not 100% sure, but I haven't had any issues without them. Here's my analysis: * `-ldl` is not needed for the Libdl module. * `-w` suppresses linker warning messages. It couldn't hurt to see these right? * CoreFoundation/Services are not explicitly used anywhere based on my audit of the code.::There were enough differences between the install target and the framework target that it was easier to make a new target.  In `Make.inc`, the bin/lib/docdir etc. are set to their equivalent framework directories, but that's mainly so that the `_rel` vars are correctly recorded in `build_h.jl`.   Running make install would not generate a correct framework structure and the result of make install would need to be corrected in several ways to yield a proper framework. Also, a previous review suggested moving the framework target out of the main Makefile and under `contrib/mac`, making integration with and modifications to the install target more difficult.::right but it's not good to have this much code copy-pasted, reusing whatever is common and only having to maintain the framework-specific changes here would be preferable::I don't think you need this anymore; we're not going to backport this, so `JULIA_MAJOR_VERSION` will never be zero.::I'm thinking it's probably cleaner just to use `$(JULIA_COMMIT)` here; we already mimick a bunch of this logic immediately above, and this line won't play well with `make NO_GIT=1`.::Why are you explicitly copying `base` and `test` here?  The `cp -R -L $(build_datarootdir)/julia/* $(DESTDIR)$(datarootdir)/julia` line should do this automatically.::Why are you disabling `rpath` fixing here?::This doesn't seem necessary to me; why not just leave it to call `jl_is_debugbuild`, then return `""julia""`?::This file is going to be removed (see https://github.com/JuliaLang/julia/pull/30225) in favor of just using `PackageCompiler.jl`, so I suggest just dropping these changes.::Why do you need to delete all the rpaths?::nice::For out of tree builds, `$(build_datarootdir)/julia` contains two symlinks: base and test. The problem is that the `base` symlink points at the `base` directory in the build tree e.g. `build/usr/share/julia/base -> build/base`.  The effect is that `cp -R -L` only copies the six or so build-time generated files in `build/base` and misses all of the files in `$JULIAHOME/base`.  This chunk is intended to fix that.::The rpath is fixed instead in the framework Makefile.::For debug builds, I rename `julia-debug` to `julia`.  Of course I didn't leave myself a comment as to why it may have been necessary to rename it.  And now I don't see any reason why a debug version of the framework would need `julia-debug` to be renamed to `julia`.::In that case I think dropping these changes is fine. Agreed.::The rpaths need to change due to the different layout of a framework. It's easier to delete all rpaths and set only the correct needed rpaths.  Otherwise, the non-framework incorrect rpaths need to be precisely known before they can be removed.::I refactored the code and now BUNDLE_DEBUG_LIBS=1 causes julia-debug (effectively linked to libjulia-debug) to be included in the framework.::Do you have any idea why `codesign` fails?  Can you post the error here?::Some systems don't use `bash` as their make shell; we can't use the `{base,test}` expansion here.  :(::IMO, since a lot is shared between these four cases, it would be cleaner to do something like: ``` if [ $(DARWIN_FRAMEWORK) == 1 ]; then \ RELEASE_TARGET=$(DESTDIR)$(libdir)/libjulia.$(SHLIB_EXT); \ DEBUG_TARGET=$(DESTDIR)$(libdir)/libjulia-debug.$(SHLIB_EXT); \ else RELEASE_TARGET=$(DESTDIR)$(prefix)/$(framework_dylib); \ DEBUG_TARRGET=$(DESTDIR)$(prefix)/$(framework_dylib)_debug; \ fi; \ $(call stringreplace,$${RELEASE_TARGET},sys.$(SHLIB_EXT)$$,$(private_libdir_rel)/sys.$(SHLIB_EXT)); \ if [ $(BUNDLE_DEBUG_LIBS) == 1 ]; then \ $(call stringreplace,$${DEBUG_TARGET},sys-debug.$(SHLIB_EXT)$$,$(private_libdir_rel)/sys-debug.$(SHLIB_EXT)); \ fi; ``` Same overall code length, but less duplication.::I know this was designed with MacOS in mind, but we may end up wanting to use this in other places, since it's useful.  Best to have this live in `contrib/delete-all-rpaths.sh`, and use `/bin/sh` instead of `bash`.::I know this was designed with MacOS in mind, but we may end up wanting to use this in other places, since it's useful.  Best to have this live in `contrib/delete-all-rpaths.sh`, and use `/bin/sh` instead of `bash`.::I know this was designed with MacOS in mind, but we may end up wanting to use this in other places, since it's useful.  Best to have this live in `contrib/delete-all-rpaths.sh`, and use `/bin/sh` instead of `bash`.::I think codesign identifies a framework bundle structure and thus restricts the directory structure per the strict bundle structure style for codesigning.  I found that only one executable/library at the top must be named like `Name.framework/Versions/A/Name` and everything else under `Name.framework/Versions/A` must be symlinks and directories.  Thus `Name_debug` is rejected by codesigning.  Here's the error: ``` codesign -s ""-"" -v /Users/*/Documents/julia.noindex/buildmaster/julia-72c6281832/Julia.framework/Versions/1.2 /Users/*/Documents/julia.noindex/buildmaster/julia-72c6281832/Julia.framework/Versions/1.2: code object is not signed at all In subcomponent: /Users/*/Documents/julia.noindex/buildmaster/julia-72c6281832/Julia.framework/Versions/1.2/Julia_debug ``` Update: I thought I tried this, but it turns out if `Julia_debug` is separately and explicitly signed before signing the whole framework, then `Julia_debug` doesn't need to be moved and symlinked.  Update pushed.  ::Good point. Thanks.::",30a3ab72fbcf12e2926d8a9b29182a08ad085d46::d0799d28cb4a6f105b6cf2e8623d15b8331748d9::c765c83b6d1b4f220e277ba2bdd526e18290a2ae::650ec3a25f3928594b10e04fb9c7134cb2efe1ec::9d45ec33ff913769914ae68a2b482482a606bcc1::3a241cd2287765f461236a49243d8d6e3103bceb::dbc1f5d53291706ea7999644b2921c14f69fb812::d5f08302c0651923ee9d3236c47bf6438dc31b2b::de91d6659c9dcaf70649023d8458b3da6c0a57ae::bff7d052406ad778b6f77236a85b314d1a3e5cc3::a223207d5cb84fa398688488bb3f6d1f79f76ae7::3c463b1b5009c01c3d182157419d28cda3920cd1::be3de05b3255881ecad40a303231828411dc222c::7e5856f6f83dfcd92ec403a4515c26ca275b4785::888a53e31995bb7af0996863be3f70fa58ef0e2c::392e29c5c7d2748550b1b2501dd01a925496557e::a34aa510d9b1382d3fe4521749ecf05fe9ccf4a9::3c46d3cee663bdc6ce02a1cb50a08b095550f7b2::928831ec6fd51bb8d6fa6601d7c38391be89f4bb::1844b007bd4235c6f1a1218d0dc955a40c1cc89e::9b0ea740a732d651c50dad64c1c3e77668c54b1a::da1ff87b21a144dcef0858b3299acdf067417edc::877c58564d21f69d80f320caf3293b78a2ab999b::
https://api.github.com/repos/JuliaLang/julia,18591,jn/codeinfo-2::master,1,merged,,"this breaks up the typeinf_edge function into its subcomponents, allowing callers to exercise only the pieces they care about rather than returning all possible values the caller might care about in a Tuple also fixes missing test-and-lock-and-test for threaded inference (backporting from https://github.com/JuliaLang/julia/pull/17057 WIP) the logic flow is a bit tough to follow, add more comments here? ::is there a missing word here? ""special tfunc and ___ meaning they"" ? ::Maybe easier to read as ``` julia isa(inf, CodeInfo) || return code.rettype if (inf::CodeInfo).inferred return code.rettype end ``` ::agree, it would be ::agreed 3. I'm not sure why Github doesn't hide the comments anymore after the code is changed. ::",07914b7b30fbf83a5ab9c067b6e2141c619a9897::03cff8b750fd4873343e0320f66042c960629d26::
https://api.github.com/repos/JuliaLang/julia,18557,vc/power_atomic::master,1,merged,power::,This backports a fix for #18555. The patch does not apply cleanly to LLVM 3.8 so I bumped the required version for Power support. I will try and nominate this patch as a backport to 3.9.1. cc: @ViralBShah,9926ef7b49cb89cc1c8225a016749bd5f1dbf926::c0eedf06c6a5290fafd02b1c77ead98af5250e36::f8cd8675c1b73c345dc4aeb96625723695b1b4ad::af13585e9d4cc7ebcf2cbe466b8fe41e4fbac7ba::2f4cb25cb6616390180721aa1cc92e243a17e8b8::e01eb548edc595bb428273fd3e370cfc8672f398::bbca3b4156ae634956741cd973a2ac6a3e883974::c38d1f8b77bfc030c0fd6015639277143380847c::
https://api.github.com/repos/JuliaLang/julia,18546,tk/backports-0.5.0::release-0.5,1,merged,,"closes #17418 will run pkgeval, and @nanosoldier `runbenchmarks(ALL, vs = "":release-0.5"")`",b90f1a2b38604ea38b65ff0e82822cf56e0ade8a::cfbb42f67a1ac2fce0507f649c7376b8ef46538d::1666d7c232a6c68afd254eaef9365f46880caabc::9ac7312efd9cf62425ebe1e9f45b04bb2588e659::aa1b84020ab113ac147033e7a9024e03def66de1::3b7d29a3cb5234d4f17163b77354c5b694dcb026::8af23c3473121d644efc4ebfe6caefdab5d82408::4a681b7d914c46f52db565c3c4b4733b9054267f::21e0998952671689d9e84be6a760fa351a609355::68ad8d806757f5b737fadce7e03078ddcafddff9::a0fc08da9f0f11d499b192c9fc88a80de133f40a::ff6cf2cd61ee24bcac33fac6979fa7211e8bf458::b6ff8a6a4598a0a353e340ff2b20bc7fc5d31510::6d33adca2c4f5578a536f590a72ba6ba6650a2b7::99df77082e658b31e031652e9cb482421ce0c187::69550921d0bac55c7c1e34764e2ed7ae09a3aea6::2b4c0405170f670ac1f5d736e34f45743532393b::4de501d76d2e56c6ec9b1b24896dddbab856437a::de37d5d5b52283f32d4640e4442ca46f530568b4::b7be1c055d6f165ba6ac86b7a47f217912d57a8b::682a397b7092685fb260824b131ac47bd31f55d9::a62e15bacbab8313862a1f79dc0c56368ae04a1d::cf6395f3621893ee88f88c6c167ec8a16c2fba90::b9ec73c89f97f0a8e8242297329dae4ceb22e055::7919b44b4fb40b08b79f21caacbfe8320e154482::d62d212abc1dfed7eda125fea350609fd25b1001::fb96ca7c6680f1ce312015a87289c0642ab4e342::8ee99a54ee4c55ef6a261ebb113ebf77dd094eb4::aad30468c21caca84ef58f94821d43d3ce133f80::15096f04a6d521c76a535ee642a745b40f5085de::58e163cad4a803df07443669f5b8bb50b45d0a62::feb57e6109b739cd8dc7e9d3345d8b262526595c::
https://api.github.com/repos/JuliaLang/julia,18478,tk/backports-0.4.7::release-0.4,1,merged,,"@nanosoldier `runbenchmarks(ALL, vs = ""@2e358ce975029ec97aba5994c17d4a2169c3b085"")` vs v0.4.6 will also run pkgeval (32 bit linux travis hit an intermittent failure due to a fixed-on-0.5 race condition during bootstrap, log backed up to https://gist.github.com/caa5dcd3cfd4af0081c79b6648926e1c and restarted)",b63bd3392c2bfa8d76760902ed7113df989a3c72::634204e7dc36156836ef0d282a58ad07df753409::e30c796fba9c1943278ca3b08090ed01e753d8d3::46b080e664513f686efb27770cbad9ef584c4f6b::aba3de2da4d1a303f39931dc8ef485bbd08de0d3::f03f44d7b4e5bc0eef344104350535edd3a79f78::c68c9c031e044d2b9463b0688de57d4131da4b55::3461e860da95bb7caec19a52e2537710d300ac37::6e239ac91a9f68bfafc5e3d8d28a60c0a421e69e::9348c2afdec87d05376663ffd160b8e0179304e4::9290c4662a25fef471b7f2e9570507c60e0757d6::9d6006cbda8ca6f9538db61af0fdddc3c86c6f60::d45443f189d3f15ad5fa185948c5987cbfd493a2::7cb9cda07fd4b32bb130f7c7ae1be7ca999696dd::e14fe8e1069ed95942b0b291bb4f2169daade495::bf25dcda4074e4b8881ca10a438b22976fdc3e47::46ab18abfc07f101a7db773b9532493d5f8c2e2c::9c6e8bd02565d9e77525369962f02c91b59a5170::740fe85cc4891c5f53e9210644ec7f5ebd99c505::25339241f90db2e84e8b478a67a2d981aa2a4e5b::cf87b561caaf931ceffe6b206829ebe92281b647::7b2bcd448986df9af3bdc626ec5c11f68cd48e22::93dbee31b00cb472374bb11a28ff712e2a2019e2::58eb3b31fc580628378c6f329c3d429ce8a7fb4e::b11e4794569e7496d535f98b5b619bc05ae7c02a::bf118b77ce11a3abe7e1fd777245794b2cc36684::08358b0dbc7e7157c086cf43b69509bec17f9b89::d1cae506ebd14a2363e6fdb2863c3539424e7abe::a0dc8e709b718f7230f44b5526f1794ff19e2321::7da826f83f1d04e61f7ee0e1bbd8a9e09f5309fa::ac54480d5c087f94a2a7f9210c275e447a678482::3db409f7cfcb0d202a6237cd8073e96b0644594d::4247e814b21d02790802484fd9aa105f1e590d67::9b7d308a032172a4fb2043ae15576ed3e586db67::d25162d4bdaa72ee7a560551a9c54c3f4555c46b::015eec092698b67c63db07fcbe84540ac78f81a1::a5bc279118e1ac17cb35bfe3752c6885b432d43a::bff701147f910c9451ba8a0b1ea3fc4da8c4a826::e770e922b919495c8cf866fe488b14ce4e0a8914::6975bd8e93309f1230925df0d1fde84a19baef29::
https://api.github.com/repos/JuliaLang/julia,18468,yyc/invoke/broadcast::master,0,merged,,"This was actually the last motivation for https://github.com/JuliaLang/julia/pull/18444 and would not really be necessary after it's merged. Nevertheless, there's no need to go through `invoke` since the method it's invoking is actually much shorter than the `invoke` call itself..... This should also benefit 0.5 since the invoke inlining won't be backported. @stevengj",4fa3d3ec0d4306eda9b4ffe45146509584030af4::
https://api.github.com/repos/JuliaLang/julia,18364,cumsum_fixes::master,0,merged,breaking::maths::,"This fixes #18336 and #18363 — there were an embarrassing number of problems with `cumsum` and `cumprod` for corner cases.  (My fault, I think, since I wrote this routine back in #4039.) The breaking change is that `cumsum(v)` now uses `similar(v, rcum_promote_type(+, eltype(v)))` rather than the broken `_cumsum_type(v)` function, where `rcum_promote_type` is a new function that calls `promote_op` for numbers but which leaves most other types alone.   I don't think this should change any working cases for `cumsum` of numeric types, but it might break some unusual user-defined types in which `+` produces a different type. (The user can still control the result type manually by passing an array to `cumsum!`, however.) Best would be to have `n = length(li)` since that's guaranteed to work even if `v` has non-1 indices. ::Doesn't `length(v)` return the number of elements in the array regardless?  Or is `length(v)` equivalent to `last(linearindices(v))`?  The latter would seem odd to me. ::Ah, I see that the `length` documentation says it returns ""For ordered, indexable collections, the maximum index i for which getindex(collection, i) is valid."" Okay, changed it to `length(li)` as you suggest.   It still seems strange to me. (Note also that this `cumsum` method is only for `AbstractVector`, and the `length` documentation says that it ""Returns the number of elements in A."" for any `AbstractArray`.) ::http://docs.julialang.org/en/latest/devdocs/offset-arrays/#background Though if this isn't to be backported, then perhaps you could just stick with the original, since the situation with `length` is just for 0.5. However, packages probably haven't started preparing for 0.6 yet, so they may not support `length` yet for unconventional arrays. ::Should this be an `DimensionMismatch` and include a helpful message about the nature of the problem? ::I think the definition/documentation for `length` should be revisited. It makes more sense to me for it to always return an element count, and have nothing to do with indices. The docs should say ""returns the number of elements generated by an iterator"". ::ok ::Great. Test needs to change too. ::whoops, right. ::I think you can do ``` julia rcum_promote_type{T}(op, ::Type{T}) = promote_eltype_op(op, T) rcum_promote_type{T}(op, ::Type{Array{T,N}) = Array{rcum_promote_type(op, T), N} ``` without specializing for `<:Number` ::`promote_eltype_op` gives the wrong answers for non-`Number` arguments too.  e.g. it gives `Base.promote_eltype_op(+, Range{Int}) --> Int` when I want `Range{Int}`. ::Yeah, that's why I left the second definition. Maybe some day, if we get triangular dispatch or something like it, that will be easier. EDIT: I see that for `Range` that won't work unless we also have something like triangular dispatch. ::",a0f30e6601f35d5edde89fc7a5d7aecf175eb9e8::4263ffb6718bc1d71467f5b5f13f91b7e753093a::4fca7c1e1faadabbf4634c9c7e4931efb6a1e79c::deef68d3e2df44ff778bd4a41551da6535ad96e0::1980212ece58bb5198a81c65ff18b6d6bad53f1a::6821c022d04faedd8e7418b9bae86143d315eb2f::f3b745f3564d89e38b6be2685723cc8493757873::e4a09882b2b3753e169e257dd1a47a004a773362::fc6643ece48824e955b5676dc4ee09af4d0306fe::9ed4912d90c16c283a1edbd00d68cf3606180e55::
https://api.github.com/repos/JuliaLang/julia,18262,nl/convert::master,1,merged,linear algebra::types and dispatch::,Conversion to Vector and Matrix without element type was not supported. This notably affected ReshapedArrays. I hit this while trying to convert a `NullableArray` to a `Matrix`. This should probably be backported.,588e41475ce529decc0163ec58cd0a8878e56d99::
https://api.github.com/repos/JuliaLang/julia,18230,jn/release-0.4-cache-compile-dep-tracking::release-0.4,1,merged,,backport #18150,355445a8da6e7b3f01e41f8ee6a4fcf1660ed428::917accecae39bea4aa132442a25b35eb115b785d::
https://api.github.com/repos/JuliaLang/julia,18171,tb/bump_14173-1::master,1,merged,test::,"One of my ASAN CI builds all of a sudden allocated 21056 bytes on this test, so tweaking the thresholds yet again... @tkelman: this happened on a routine build after #18169 got merged, so attaching the backport label.",8e96740236ae6da65f94335bd17139bd2f7884ab::
https://api.github.com/repos/JuliaLang/julia,18169,tb/backport-asan::tk/backports-0.5.0-rc3,1,merged,,"@tkelman: as requested, ref https://github.com/JuliaLang/julia/commit/467e18120d71f999b2b0528126dcc7d084bad84c#commitcomment-18714901",bfa4e6200f5ba019984aa13deeb3c518a7e21d2d::fa24dff5812644d0f2acdd72e9899866f915359b::51d38f57aa68c9c35a520dbcaf570eb15ca6934e::be350f2bf8b0329a2ccacfaf0db6b8495546c6f7::727daa6e0ad2d52e83b8da1447068187e193e689::f3566be11da0cb16d8b8a2cadb554dc8445896aa::
https://api.github.com/repos/JuliaLang/julia,18165,teh/redirect::master,1,merged,I/O::,"In particular, these simplify the process of safely testing for warnings, as exhibited in the tests: ``` julia open(filename, ""w"") do f redirect_stderr(f) do warn(""hello"") end end @test contains(readstring(filename), ""WARNING: hello"") ``` I assume this counts as a new feature and can't be backported? If so, perhaps I will add this to Compat. (If not, please add the ""backport-pending"" label.)",d0b901bb69bc38443ef97ad4bf17604d1a50c890::
https://api.github.com/repos/JuliaLang/julia,18156,tk/backports-0.5.0-rc3::release-0.5,1,merged,,"@nanosoldier `runbenchmarks(ALL, vs = ""@0350e5769b43f56c4c570741b0f5b2edf9399dc7"")` (vs rc2 tag) will be running pkgeval here to check for any regressions",4160a8a2485ed59c9d55e94784beda0e88252e62::b9d7579f62490fa358d8aeacf5c4ba7fd73bdccd::19b4222e473f62ba2524e5c25f159cb3cc81c8cc::4364deda7d8f709b8ed4fd15b8f6de40feddcaa5::65aa0b05b281f0b085e831d8ee0c217c1f4d896e::56623061dad10df82d9317c74b3e75aca553ad81::9a6f03584dca103a5fd586bb6ac2c60bee388050::a36da57dbd46dc423c06ea1cbfc21f8984ca1908::05197a51fa015dfcbec05ddba9f2e2e2a2945150::14a5744fcbbcb90e83cb42550c014e2244bd4100::df5286a8b317d7e33b3a2da21d6a3720c4ee56fe::6dd9e814a0f5d5f2d40ecf7c54b93743e2ce59cc::dcea839384bbcb5484736aa5134b6d604cab1cad::721c6b7125b2aa72cf468678a352d54f14d6b088::0c4397da2c519324d15a7194b5799fb18bc84814::a062d65659bb696fedab29306a9f07b14fff8ae8::5cea4568263fcc7937b4dcfb1e954446730de57c::b68e76043846b8612194a46adfc82d2645d5927f::e8db99420f258c9bc1c550b6320ee43f036e419a::6def1e690b1433273a881af5a8706152f9a0d136::6538aad0b82735cf8435fbfdf7a8bd5131c7db83::ede72312f4a052049f520570c4ec6cee6aa48389::e1fab8366d026b533d0c3fb2af07555290f4bb4a::39c7c7faffa86318d93f74afa14abe5fdee28071::9d56d578c61a7f58e9379e43179aa80d56f92a82::ff6d640bd11ca7997e45d9f9db29e5517b06f9e1::1d3d115a79b9002e72164b576a7bb697ce10666b::aeb04aeb1b9214529247fb417e0e2a44c7007c01::5381a438997f7950c929e4e0b2af4f0b5b3d1e28::a0ead964518b19a6f894b3ff26dabb6018fcf9f1::14854d7e2f02bc13526a39300cd5aa4c5eb3fbae::9a6e884f9f1bcee065fdb2705a687d521f2e4aa6::cd44917d5777400093141e70e9e320bbb574d622::1d566a977d730a027e3a7c1a53f3eb57958c22c9::20673d9caa4e40219d516435404dcd3f059251dd::bc19ea404ecc726e32cf95d8acf105cf19fca88d::c308b91bbcb50f189d5d3af4768f83e91f5905d6::1c255479e33d9489ac76eac19c7babaf3c3d4514::c144c184766b682acfdc9f6adde631c8dba22f83::0136e4f72a6649c64d64ecb0e9faa0741ce237c8::18aa36ebd4d13cad347f9068ff57167a7e9c9e73::109a43fd53953c5e28fc055f9ea46d3877356897::c2a20e10577eacb828f1fb65d28d6ff214a15ed0::5562759698c6c3012c5c0e154b86e98e0f360e61::7c3adf77fb37e076945a56d4015ac024e348c120::27fadb44be87148d1519046d061e880e5f4af479::1aa11750c693ac9e6e4eedc112f2b9b784b364f5::42a32623b64362f89c82e165987ccb8527c213f1::bc7f384cb3e465ec80014d154b1c70dae6a61885::0388e37bb462a4b0ddf1e3e34ba930c2b39181ae::a3e144e57f3f7a378585861cc4f0016813f5725d::96ef8f23430f1683b77518a4c37b37b08ff7abfd::e5f7f5cf344968bc17378e27d212a9d405fe7ced::9a89ff9b81294efdc97348e768a4f5e0bed6db03::32610e288bf9f534ac3eaa4d9fa2bfff495fa048::caac5818d22f010d57b6f4e8cfd5996360469807::c776bbc74b73c9df546b11284ca230cdb3e0e878::2cb13f31ed36bd062e7ef246a1bb13dfe4c50ac5::190064fd9b446a8c6a34c424bf7b282e1d32e0d8::beeb6c051709c1c0291a219cead3dd474c2b24a1::25be0c160dc0a12e70b08a8224c348282ea61568::dd604d2cbad3ebe45786d3f0fd0eea659429bb34::e313fc9d3b0a63308f97dff05b77fdb63db97f15::cb1e04d191555c88dc13986d6f51898e942b4337::ddddd4dac3fc437ca3473d4758ec1bb262c6b405::24c98c2c1351046856ac1cbe7fe4a1fbb3d0cf44::edcd7f905e4c2876ca5a608e92e2af73f0cd1183::95acc0f0d492430f6e69493c8d043dc2438311e7::a48ce1697af849548a2c2c0e065635e357401ac2::e7d3848d3bed27b9ea62210cff40d0feeeec57a2::f703e65f5e442a7b221c1289f7c9eeca4a695293::5920a4710ea1da3b13b337eadf1e54ce89b1e662::738f5caf5056f219b22967f1826906576d4ca652::01c76ea366710dd5dba36f13b966a0cae8af7022::22a73dd4c2e1e9cf6260190776e683342f04e938::962a2cc2555c4408ea5e1e36d5fe1cf54a98682f::6d0aa14594b83ffd500a4dadac52f048a249891f::51aadfec4f0dd51e986608ef9057674c3d07f573::ac9627ce208d61b45ec880debb2696d41bdef7eb::6dfbbfd4608a96095d1191a9a540d8bd7810372c::a61909d5af2c95ac5cd2411bdd43ee49d95e216d::fd5bfed331634e244bb77364cd4d48cd87939c8b::ca5c823bb34fd4dbd511aa8b022f5b52d177fe06::bd679a346bbb79925c8f6b7f05ca31e83616057b::782cf362d31a0aeac9f0d02cf79b7deab1096373::09f7005d48e3390333cfd2d381b6b34aa5a5bece::1fb052e34e004e4251a67e7005176c2d31aeac0d::3239e25acbe5fc6877be4990eb94308c5dd3cf51::add64d9e4a53a59df8df93b0290bf6b2e43904cb::293f63ac2dab274152f9b929236d5e092e8e5d09::e576c87fdb04eb00ba20a14e7ec28b5de86775b1::d0a632b50be3d20cf863340f6c1c7ab0ae6d41f1::6da641f35796f51078085859064052e4c0f05262::f5ed7678ffa3abfd835ec6513aab1fbfd534d7d3::bfa4e6200f5ba019984aa13deeb3c518a7e21d2d::fa24dff5812644d0f2acdd72e9899866f915359b::51d38f57aa68c9c35a520dbcaf570eb15ca6934e::be350f2bf8b0329a2ccacfaf0db6b8495546c6f7::727daa6e0ad2d52e83b8da1447068187e193e689::f3566be11da0cb16d8b8a2cadb554dc8445896aa::d8f5ea946a72d18ed779b9f8aba2e996e226a485::9e1dbfd0dc2c6014b4a7f5872ffe7423b63a65b2::2082241a539d092f65b0ed218af911302d488fff::458c832428c6b79084f9b4e02ebe0905eb560b84::55a5b12f0dcac086b6fafa6d6273a0c45ffa483f::38bec84842d52a5e5b06fc83f3b1d1249b80b165::285ef3e64a8b3e122a379556ec38dd0c10944a74::a6a7fd2c6286ba44c1dde54a7ec76210e3407f17::69a605bad0d0e0be00eb545a14e1385a732533e4::fafdc7b8a3d365f03325f8fbb145e4ccf883c85e::d45bcaeb76c2693834520f8f39785903ab85efd3::f06e0f1271dddaeeaf4f8782f8d5ea0a971f9b75::2406ed91a2f0ab9e81b21f30eba769816b7d4553::fe17200dc305e6b1e1b0e2ea54135e7f04bb4d40::e5b833266c3d17d82c00584bd235fa773d9a4905::
https://api.github.com/repos/JuliaLang/julia,18150,jn/cache-compile-dep-tracking::master,1,merged,,"This implements the dependency tracking for compilecache that I was envisioning from the beginning. The idea here is to not only fix #18069 (the first commit), but also to make sure the situation seen on JuliaBox can't happen. Instead, it will prefer using a stale cache over replacing it with one that can't be loaded into the current session. In a different (new) session, it will rebuild the whole cache as normal. For example, after this PR, the following works, whereas in the existing design, loading FixedPointNumbers would require first calling `reload(:Compat)`: ``` julia> using Compat shell> touch ~/.julia/v0.6/Compat/src/Compat.jl julia> using FixedPointNumbers # needs Compat ``` its ::this wasn't exported, but renaming it will break AWSLambda.jl ::better error? if this goes wrong it'll be a pain to debug ::I also changed what it does, since Base doesn't need this functionality. I can put back `cache_dependencies` with some tests and just not export it since looking at AWSLambda.jl, it looks like it was using it correctly. ::or an Exception ? ::source file from? ::it needs to not be breaking if it's going to be backported ::this still isn't enough information to be a useful error message. the value that occurred? which cache file was being processed? ::this still works and documentation of it shouldn't be removed ::the rounding isn't a margin ::any time ::anytime, adv., adj., and int. View as: Outline |Full entryKeywords: On |OffQuotations: Show all |Hide all Pronunciation:  Brit.    /ˈɛnɪtʌɪm/ , U.S.  /ˈɛniˌtaɪm/ Forms:  See any adj., pron., n., and adv.   and time n., int., and conj. Frequency (in current use): Origin: Formed within English, by compounding. Etymons: any adj., time n. Etymology: < any adj. + time n. Compare sometime adv. and one time adv. Often written as two words. (Word division in Middle English examples frequently reflects editorial choices of modern editors of texts, rather than the practice of the manuscripts.) Compare adverbial use of the dative singular of the corresponding noun phrase in Old English, with both elements inflected for case and number: OE   Wulfstan Institutes of Polity (Corpus Cambr. 201) 134   Nagan læwede men freolstidum ne fæstentidum þurh hæmedþingc wifes gemanan, þe ma þe heahhades menn þæt þing agon ænigum timan. (Show Less) A. adv. 1. a. Esp. with reference to a future event: at any point in time; (following a negative) ever. a1375   William of Palerne (1867) l. 5148   Þat sche wold miswerche wrongli any time. a1425   Wyclif Sel. Eng. Wks. (1871) II. 137   No jogelyng ne falseheed was ony tyme in Crist. a1425   Rule St. Benet (Lansd.) (1902) 1 (MED),   Þat he..be not greuyd ony tyme be our euyl dedis. c1450  (▸c1350)    Alexander & Dindimus (Bodl.) (1929) l. 484 (MED),   Whan þe watur wiþ þe wind þe wawus up casteth, And þouh hit turne any time to tempest of windus, Hit ne awecheþ no wawe nor no watur rereth. a1538   A. Abell Roit or Quheill of Tyme f. 72v, in Dict. Older Sc. Tongue at Ony-time,   That nane suld dispair of the mercy of God onytyme. 1577   H. I. tr. H. Bullinger 50 Godlie Serm. II. To King sig. Aa.ij,   God..cannot any time either erre, or conceiue any false opinions or repugning counsells. 1650   T. Venner Treat. Tobacco in Via Recta (rev. ed.) 415   Tobacco any way, or any time used, is most pernicious unto dry melan-cholerick bodies. 1799   J. Robertson Gen. View Agric. Perth 433   If..the lease be forfeited or adjudged any time before the last years of the contract. 1859   ‘G. Eliot’ Adam Bede I. i. xiii. 251   It was as if she had been wooed by a river-god, who might any time take her to his wondrous halls below a watery heaven. 1932   W. Faulkner Light in August xv. 341   If you want to get to Jefferson anytime soon, you'd better go to town and hire a car. 1979   Observer 10 June 33/5   Suddenly you are in the Slide Area. No stopping any time. 2010   N.Y. Rev. Bks. 29 Apr. 29/3   Prospects for meaningful reforms anytime soon are surely limited. (Hide quotations) Categories » b. Followed by this or these and an expression of time: for the whole of the specified length of time up to the present. Cf. this pron. and adj. 5f, these pron. and adj. 3e. Now rare (arch. or regional in later use). ?1589   T. Nashe Almond for Parrat sig. D3,   You think that no man dare touch you, because you haue plaid the scuruie scolde anie time these twentie yeeres. 1592   G. Harvey Foure Lett. iii. 29   The poore Tennement of his Purse..hath bene the Diuels Dauncing schoole, anie time this halfe yeare. 1673   R. Leigh Transposer Rehears'd 39   This is a Plot..this has been a brewing any time this Thirty years. 1732   H. Baker & J. Miller tr. Molière Blunderer i. v. 23 in Sel. Comedies III   A Brace of Hundred Pieces that have been due any time this two long Years. 1879   H. James in Scribner's Monthly Dec. 209/2   He had been in love with Angela Vivian any time these three years. 1916   A. Lowell Men, Women & Ghosts 279   ‘I'll marry yer as soon As I c'n raise the money.’ ‘You've said that any time these five year, But you don't do nothin'.’ 1955   F. Debenham Nyasaland 106,   I imagine that they could have retired to comfort and ease in England any time these last twenty years. 1989   S. Raven Blood of My Bone (2001) ii. 78   ‘When were you in a Greek prison, Julian?’..‘Any time these last fifteen years.’ (Hide quotations) 1. In relative use: whenever, if ever. 1822   London Mag. Sept. 240   Here's my brother Felix can give me the breadth of my back five times out of four, any time he likes. 1873   Trollope Eustace Diamonds II. lii. 335   If I found I didn't like him, I'd leave him even after the altar. I'd leave him any time I found I didn't like him. 1915   P. G. Wodehouse Psmith, Journalist iv. 26   Any time you're in bad. Glad to be of service. 1976   National Observer (U.S.) 14 Aug. 4/1   The iron rule of business dictates staying open anytime there's a decent chance to turn a profit. 2011   D. Young Mastering Nikon D7000 iv. 219   Anytime you want to take pictures without a memory card, you'll need to select this setting. (Hide quotations) B. adj. (attrib.). That can take place, be used, etc., at any time. 1870   A. Thackeray Let. Nov. in Lett. A. T. Ritchie (1924) viii. 143,   I did like your last letter. It was like a real anytime talk with you. 1904   Kingdom Jan. 1/1   Would it not be a good thing to meet the devil on his own ground and have an any time church? 1966   G. N. Leech Eng. in Advertising xv. 139   The any-time cereal. 2001   N.Y. Times 17 May g6/2   It is an anytime, anyplace solution. (Hide quotations) C. int. Categories » Orig. U.S. Used as a response to an expression of thanks. Cf. you are (or you're) welcome at welcome adj. 3d. 1961   Hartford (Connecticut) Courant 16 July 14 a/1   ‘Okay, thank you.’ ‘Any time.’ 1985   M. Gagnon Inner Ring 37   ‘Thanks for the advice, Deirdre.’ ‘Any time,’ I said. 2001   M. Blake 24 Karat Schmooze xxv. 283   Reece said, ‘Cheers for seeing me right last night.’ ‘Anytime.’ (Hide quotations) ↑↓ Back to top ""anytime, adv., adj., and int."" OED Online. Oxford University Press, June 2016. Web. 22 August 2016. ::none of those uses apply here ::in what way? ::It doesn't have anything to do with Modules, so it doesn't belong in the module docs, and it's already described in more useful detail in the devdocs where it belongs. ::no ::""no"" what? more words please. ::it checks if the time exactly matches, or if the time exactly matches the rounded value. that's stricter than a margin would imply ::already fixed ::accommodate has 2 m's, and should spell out mtime otherwise it's jargon ::In modern usage, ""anytime"" is considered rather informal. - https://books.google.com/ngrams/graph?content=anytime%2Cany+time&year_start=1800&year_end=2000&corpus=15&smoothing=3&share=&direct_url=t1%3B%2Canytime%3B%2Cc0%3B.t1%3B%2Cany%20time%3B%2Cc0 -  https://www.grammarly.com/handbook/grammar/adjectives-and-adverbs/14/anytime-vs-any-time/ When you have a choice between a spelling that will look ""sloppy"" to a large fraction of readers and a spelling that is universally considered correct, it's best to choose the latter unless you are actively trying for an informal feel. ::Seriously, please explain yourself using full sentences. If this assertion ever happens in practice due to some bug or corruption somewhere, it will make life much easier if the error indicates as much as possible about where it is, what it's trying to do, and why it failed. Otherwise I anticipate having a really nasty time debugging issues like this while trying to deploy something for a customer on a tight deadline. ::Assertion failures are not really intended for end users.   And developers would end up just grepping for the string in the source code anyway, so a terse message is probably fine. ::A terse message and grepping in the source code won't help a developer who encounters the error understand what's going on and what caused the problem. I do things with precompiled ji files often that lead me to believe I (or an end user) will have a high chance of encountering this at some point. I would like to not have to swear at Jameson (or swear at Keno, if Gallium can't help) when it happens. ::The file would have to be corrupted in a very very specific way (since the earlier portion of the header would have to remain valid) for you to encounter this, so I seriously doubt there is a ""high chance"" of that.  (If there _is_ a high chance of such corruption, then this should be an exception and not an assertion.) Assertions are a separate universe from normal error messages.  You want to sprinkle asserts liberally throughout the source code to help find bugs, but there is not much point in making very verbose error messages for them — any assertion failure is pretty much guaranteed to require you to dig through the source code and debug, because it is an error by the programmer and not an error by the user.  In most cases, it is reasonable to just write `@assert condition` and write no explicit error message at all. ::Good point, the earlier errors in this function should also have more information if at all possible. > Assertions are a separate universe from normal error messages. I get that they're not intended to be user-friendly, but given > any assertion failure is pretty much guaranteed to require you to dig through the source code and debug, because it is an error by the programmer and not an error by the user I don't understand why you want to leave landmines with so little information for yourself if you're bothering to check something at all. If you have any doubt that you might be wrong and it might ever fail, why the resistance to leaving more breadcrumbs to help future you out and have an easier time of the digging and debugging? Especially if something only happens rarely or on a specific remote system reported by a user where you can't immediately reproduce or launch a debugger. ::And in terms of what I'm doing, I am specifically modifying the .ji file headers. If this were an assertion somewhere else I'd be a lot less worried about it. ::Last time I had this argument about assertions (https://github.com/JuliaLang/julia/pull/17459#discussion_r71439534 to be specific) it failed a few days later (https://github.com/JuliaLang/PkgDev.jl/issues/48#issuecomment-236054874) and it would've been more useful if the error had said something about what went in to the condition that failed. Why is less information better? ::rst, needs double backticks ::loaded ::It seems this is not really about assertions, but instead a claim that some condition thought to be impossible is in fact possible, and an important failure mode that needs diagnostics. The question is, would it have come up if this assertion had not been written at all? People should be free to add as many assertions as possible, the more the merrier, without drawing fire about some assertion needing a better message. Otherwise you're just discouraging writing assertions. But if there is some independent reason to believe this is an important failure mode, then it's reasonable to ask for better diagnostics. ::That's fair, but couldn't we also just write assertions with useful messages (unless there's a bad performance hit or other good reason not to do so)? In a perfect world we'd just have rr recording at all times and a full reproducible dump occur at every error, messages be damned. But we don't live there yet. We're shipping a product to customers in which the build process involves careful modifications of the cache file headers - so I'm paying attention to anything related that might cause that process to fail. The modifications we're making could easily be susceptible to off-by-one bugs, or mishandling of unicode paths, that kind of thing. More eyes reviewing that always appreciated. If the assertion hadn't been written, then I don't know what the consequence would be of this particular error condition passing through unchecked. Would it be better or worse than the assertion failing without printing any helpful state about why it failed (or what file caused it to fail)? ::Jameson, this is deeply frustrating. Why is it not possible to be more detailed here if this fails? ::As Jeff and Steven explained, this is not itself an error, an assert is a detection that something else previously was wrong. There is no value here in what the local values were. This is just trying to halt the process before it does any further damage, as it has no idea why it went wrong (those cases were already tested for and return more detailed messages). ::I'm going to hold you to that ""no value"" when it happens and we need to find out why and fix it. can ""EOF while reading cache header"" at least say which header it was trying to read? ::How about the following proposal. Can we write a detailed .ji file integrity checker, with as much diagnostic info as possible? Or a diagnostic mode that could be opt in? It could be done here or elsewhere, but if elsewhere it would need to be kept up to date. For the normal path where we don't expect people to be modifying ji files, leave as is. ::",94ce57dd28e939ee0805766ae2809980a6a00067::5abccb645185804f60244971230200c0f922772e::0df6e61051e9ed689b2755e003b015950d68dd0b::5276a4d21d0a5dabf0da74e277192e5e3030feef::
https://api.github.com/repos/JuliaLang/julia,18122,broadcast-identity::master,0,merged,bug::,"As pointed out by @shashi in dcjones/Gadfly.jl#864, the `.=` lowering was incorrectly lowering `x .= y` to `broadcast!(identity, x, y)`, when in fact it should have used `Base.identity`.  This let to a confusing error in Gadfly, which defines a local variable named `identity`. @tkelman, can this be backported to 0.5.0?",10ed160f59fb043fab27d212feac4b5b7254e3bc::
https://api.github.com/repos/JuliaLang/julia,18087,jn/linfo-reflect::master,1,merged,codegen::,jl_get_llvmf was left in so that this can be backported to v0.5 without altering the C api (in case it was used in a package) also correct / add error handling and proper locks export needs to match in header ::,6625c037166d52e7dfe99a3e2ec9824098745e48::
https://api.github.com/repos/JuliaLang/julia,18063,jn/freebsd::master,1,merged,,"- [x] add libuv patch shouldn't be a backtick ::I thought `curl` wasn't installed by default on FreeBSD? I could have sworn I had to `pkg install curl` on my VM, but I could be mistaken. ::Sneaky :wink: ::Oh, nvm, we list `curl` as a prereq for building anyway. Should probably specify that FreeBSD requires `curl` as opposed to `wget` or `fetch` then. ::Why can we not build curl? ::i thought i was having trouble building on of the dependencies (one of the test files was missing one of its headers), but it's working now, so not sure. ::This change and the other 2 sections in `jl_call_in_ctx` do not backport cleanly to release-0.5 since #17727 was not backported. Okay to just not change `jl_call_in_ctx` at all there? ::If this code doesn't exist here, there shouldn't be anything to fix ::",6a62d300313a80ff0d435481e861e06ff32a5890::d3951aa192e72f4086ca5e2e87a035940228272d::
https://api.github.com/repos/JuliaLang/julia,18041,ksh/docamputation::master,1,merged,doc::,"I'm sorry this is so huge. Once I started, I couldn't stop. Doctests passed locally. which way is ""down""? ::calling this a ""convert"" is a bit misleading? ::what does ""goes over the positions in the broadcast"" mean? ::at the indices in `A` ? that's where the result gets stored, right? ::worth noting here that the order shouldn't be relied upon as it depends on hash values? ::don't need the square brackets if julia syntax for default values is being used ::this could use elaboration / examples ::Probably simpler to put the docs that have OS-specific definitions after the `if` blocks using the same syntax that was being used in the helpdb. Same with the other ones further down. That would avoid having to always check whether all the duplicates get updated when changes are made to one of them. ::Fixed in latest. Anything else I should look after? ::There's a couple more duplicated `@doc`s that can get the same treatment as `cd`, but other than that I didn't notice anything else out of place. ::I'm still double-checking this, so may be good to wait for another set of eyes since backporting this might allow migration of the manual to be done in an automated way on both master and 0.5. ::> good to wait for another set of eyes Yes, definitely. > might allow migration of the manual to be done in an automated way on both master and 0.5. At the moment the translation scripts I'm using do seem to work fine against `master` and `0.5`, though keeping things in sync as much as possible would be greatly appreciated. ::Duplicate `redirect_stdout` signatures here. ::There's two near duplicate `readbytes!` docstrings. The other one is in `base/io.jl`. Should be condensed into a single docstring. ::IIRC we split these recently because of the `all` kwarg. ::Missing a `:` after `:obj`. ::Nice catch! ::5x5 ::We usually use the terminology ""throw"" for errors more often than ""raise,"" don't we? ::Is this one not in the rst any more though? looks like the line `See ``read`` for a description of the ``all`` option.` is being deleted? ::should reference `io` somehow, c.f. the near-dupe docstring you deleted from io-network.rst ``` Print elements of ``items`` to ``io`` with ``delim`` between them. If ``last`` is specified, it is used as the final delimiter instead of ``delim``\ . ``` ::is the ""`stream` [if given] must be a TTY, a `Pipe` or a `TCPSocket`"" restriction from the deleted docstring accurate? ::to `io`, only the default output stream if `io` not given ::prefix not described in body of docstring ::what does backlog do? ::does `A` get inherited from the previous test or something? ::this isn't really a diagonal matrix if `k` is nonzero ::and `tol` does ? defaults to? ::I honestly have no idea. ::Probably, I'll return it. ::Yes but I shouldn't rely on that happening. If you read this in isolation it'd be confusing. ::Looks like the last time this function was modified was in 2013, by @Keno in a96e16e5c386918dc701a333e5abfeb45501fdc6. Want to be a hero and doc what this does? ::It's how many connections can be pending (not having called accept) before the server starts dropping them on the floor. ::It's back now ::we should maybe say in a few words on the next line what `pmod` means? ::`mean` instead of `m` here? ::Should probably cross-reference `sort!` for the keyword arguments that are shared? And describe the ones that aren't, I think just `initialized`. ::See `sort!`, right? ::Doesn't `pmod` here just mean the `modulus` symbol? ::Yes, it does: http://docs.julialang.org/en/latest/stdlib/math/?highlight=invmod#Base.invmod ::oh. that may read a little funny in a basic repl that doesn't render the latex? ::Doesn't render in my OSX terminal. But I think the `modulo` earlier in the docstring is enough of a hint. ::what delimiters? (`lstrip`) ::~~not yet addressed (`join`)~~ nevermind yes it was, below ::`string` is redundant here (in `chop` docstring) ::(in `ind2chr`) - how does `s` matter here? ::(`expand` docstring) or a cross-reference to somewhere in devdocs maybe? ::(`cp` docstring) why are _src_ and _dest_ italic instead of code ? ::does this execute `mktemp` during bootstrap? ::Probably bc this docstring is old as heck! ::If `s` isn't a bytestring, you need this, right @StefanKarpinski? What's the best way to phrase this? ::(`readlink` docstring) is ""the value of a symbolic link"" unambiguous? maybe worth rewording to say something like ""the target location a symbolic link points to"" ? ::(`methodswith` docstring) what does `meths` do? ::`lcm` - maybe rearrange the function definition to use the longer multiline form so this comment about the ""explicit a==0 test"" is closer to the corresponding code? ::No idea. @vtjnash? ::`unsafe_write` docstring - should code highlight `ref`, and maybe also `IO` ::(`isposdef!` docstring) ""in the process"" ::no, it doesn't actually execute any statements ::`rank` docstring - it's not really summing the singular values themselves, it's counting the number of them that have magnitude greater than `tol` ::`trace` docstring - expand a bit with the definition? ::`inv` docstring - expand with at least the definition, maybe also a few words on how we calculate it? ::`require` docstring - ""Loads a source file"" ::`compilecache` docstring: is this cross-reference wrong? the help for `require` doesn't seem to mention what precompiled cache files are ::`precision` docstring, is attached to the signature for `precision(x::BigFloat)` but the docstring content is describing the `precision(::Type{BigFloat})` signature right below ::`randjump` - tough to digest as one giant sentence, would be clearer if split up a bit ::Pinging @vtjnash again... ::Maybe should be ``` Creates a [precompiled cache file](:ref:`man-modules-initialization-precompilation`) for a module. ``` ::@stevengj I was advised I could ask you as well for some phrasing advice here. ::You could add ""with respect to the string `s`"" at the end? ::Sounds good. Here we go! ::@vtjnash again 😆 ::(`info` docstring) spell out `kwarg` ? ::Maybe just added a cross reference to code_lowered and the corresponding dev-doc for the content and structure of lowered code? ::http://docs.julialang.org/en/release-0.4/devdocs/ast ::",86f3f7df8d5af2ccc8b15d49a125409f2ced515b::07c2cd907d62da51178c0c5bb10536106de7cff2::b4c6f59acc8bdd6228f516e4052655126a8f3486::
https://api.github.com/repos/JuliaLang/julia,18028,add_contains_for_regex::master,0,closed,collections::design::search & find::speculative::strings::,"This PR defines `contains` with a regex search pattern. Besides the new method I have also widen the signature of the original method to include `Char` as: `contains(haystack::AbstractString, needle::Union{AbstractString, Char})`. Besides the additions to `contains`, I have: -  Moved the docs for the functions in `search` inline -  Moved the test for `search(::String, ::Regex)` from  `test/strings/search` to `test/regex.jl` as the method is defined in `regex.jl`. -  Added methods to `contains` and test for the methods plus additional tests for `contains` in general as it seemed not to be tested directly anywhere. -  Fixed an reference to ASCII and UTF8 string. It would be good to backport this to 0.5.1 as it increases test coverage and fixes docs. The additional methods for `contains` are probably not to be viewed as a ""new"" feature? Why not just call `ismatch(re, haystack)`? ::Couldn't you just use `AbstractString` instead of the `Union` type? ::",ab8834d7361f537eb1c4b9062cd409721eedfe4f::7776d8ee105f195a002ecb51eefdb5b9dfdd7302::a82aa83855a624859da912faffcfa4e7bce9dd6e::7a7f290482e9833a7754bb68b01d0380aa533a58::
https://api.github.com/repos/JuliaLang/julia,18018,patch-1::master,0,merged,I/O::doc::,Update to add type annotation otherwise we get ``` ERROR: MethodError: no method matching display(::MyType) ``` Should also be backported to v0.5,177e797c79f89b52a0134bbb881dfd0a8c81a767::
https://api.github.com/repos/JuliaLang/julia,18012,fix_17956::master,0,merged,bugfix::deprecation::,"This fixes #17956 and add tests for the bug. The bug was introduced in 103db50aa6c67d8e732e8e2bd7f5743bae17e369 cc: @StefanKarpinski PR commits changes: 1. Move `env.jl` test to it own file in `test` 2. Fix #17956 3. Deprecate `delete!(ENV, k ,def)` as it is inherently type unstable and no other associative type implement the method. 4. Move docs for `withenv` inline The deprecation of `delete!(ENV, k ,def)` should not be backported, but the rest of the commits should. should we be even more specific and check for `""$k1 => $k1""` (maybe with some whitespace padding as needed)? ::I have updated it to: ``` @test contains(s, ""$k1=$k1"") @test contains(s, ""$k2=$k2"") ``` ::",30afe08b5d4af597588551e132c67a51974557a4::b1e82163e259305ed989b005a736f941bf183f5a::d0b06a30f3486e3e48ce11abe618815bbd11901f::bb7272ed6556ec19ffc606eb195b0bcf65bfa503::319cae5641b4dec8af9697d568313577caf95fbf::
https://api.github.com/repos/JuliaLang/julia,17960,tk/backports-0.5.0-rc2::release-0.5,1,merged,,"A few things aren't here yet. The curl build still needs a bit more work on master and might have to wait until rc3, and the SSH tests are disabled here with a commit that we'll hopefully be able to revert at some point, since they're causing issues on the buildbots.",762a2a99fce0b5799a067ef597310cd9296b24fc::c7cc66f1f6d25d47cc97c5b6d75dcb54fc71c754::7306033603e6cfdc0f09e001f5bffc005d3b73d9::c573b7b5fd623202ab7a1b6215dd49cb984d8952::3d91b01c0d8ecde9bf2a1c3e6e6643925f2ad888::48f726730dc9eef4f1f2695d67a0411b4fe5dd95::0e7933d0f51c216a0bbb155fcc0583e419e38cfe::aee17b6dcfbc6ae2544160ee7bc537be26228273::730c0a3f2f69be1f937b4ba5a8cdafc13016909f::1debda49e660ef19c98e69ae66ae3b33e07bf7fa::bee5a347bb0f01aa154589fd8521e07c29606e36::3d980ca2db5a984cc093f0d628d96c8cec3bdf08::631ff0088bf41875d7a2433fbf189d5eaab48d84::d594e10032e19045cc6191b92a0943a29816f348::0bbe0276807780dc964e5e43a1c5b52525ce5a29::df8dcf3fc0634019e083ba2b85fe081fd08cc914::a403819e0a4781ad3c87e23d34cae90752a26058::630b862c0004b5d82365f92724f119b6e74358d2::ea617ec8595ca678f3f69f9182fe33d2da7d4094::775c34e36c9392f1947d9ced0ae413709f3e53b6::6903268ddb51b85ec737bc0e89b3df0607784e8d::b9982cdb77d595c4819ce7d4c1d258f3445bcc46::907db9f78e37b4eac43736efa47e38699aef77fd::203c34d6c4dc3eec0489620ade8094d6da9a376d::bb4053856a9e747de157cbc58807f1a7b73603ef::87f160cd98796c8504527488d90a4a96a63739eb::eb2f488e1ebab9fe65853bac8940e49c3f14ce14::8f06a6cc73844eb56ff219080ae810e973189707::7a5e180d1c7f6a24d5016c06b1f84caa0c5e6843::5b1edb5eaaa705447a2b5ca391511a2a50017c9d::91a3c42021911240589ed3b36ec936df2ccfd9c5::87565d3a889caa5a80a0ff29adfbbde9f30f78f2::df978c3f45a922c01eb780691e81496cde331ed3::d09dafbf986552627eb0dbd045204dca9481879b::7b5782bddc993343b2ae2263ae5632fdc05b23fa::96af21a548347c934f61e821ceb41687ecd8079d::0a8b9a24b7901b7a7a4e6e7ccf58518682ad5a5e::3d9c3d180f79f40f7c0aff951e0f5c75776a15f8::25c23b721573ac0a1c26dd2d782c4ecf8f3f6b02::7db1cd9bec043f9c21ab273901daa0b6c6337dbd::b6737487d626c2f2465eb35c55adf001c73b158f::d5a51e983e2e54e4d50fe768eb4c2224d4b67635::c0936b721e6c19888edfde4839cfc588a09b34b7::66b8bfedf05d068c5d81e3adf6002c970c7ecee9::8a1cf9b88ae178a250efd9afb1beedd5943881e7::d02d911dad6f818fd5dc0440a950e384ef20349c::4adaeee81cb31d56d0b2bbc3417802f0eb41ef3f::43d9f068073ef4723e1f08d16a33ca6c69aa53dc::9e896c9f68367e834e32eeb632da2b86a4e93775::fe1c733f181a9b21d2431b3ef034350455649746::3f2a09dcf8e60a3dd07440d9f2c5a625741c3281::9bc9a479de067ad94d8c014d70852a6b75413260::916d894f8cc535f9c9463633825368e8b3089779::45c90ef0a67917873c3cd96f630da2e479035aa4::c0bf5731c2e173bcfdf5a351321d3125a836968f::b6372abb2cf08faac4259a60cb0fc200672bc4a9::d986e8f89a2b30d07d5368eacfb7faddfe0e2d5a::f54dec2732d2ebe422cd02d649bd315f6866710d::1c7c90553f738ac72f912dca32bf90c4adbc5742::1662aaeb51fbb250cc600cb0b3f67e2c2baa0da7::a4ee378376872b34108e7ce8f83f32897f1d5ed9::203a8f01274636e8cf2c8538c0a1447990b0d61c::032db5fdcbac08c3d5b7eac792bbb3248d63b3dc::b3fd7955a87ac9c93bcb1e35675e40659a6d46b1::b39e59dccdd9e80f87d84f2a491c3ec77c745cf1::1c5cdfee91473bc5733479b578d975f1f1eb2044::d992f3dd10602ef52d8c297ebb7c7396a579c963::b311b03479ac8c3d1e636f9b538468ee5063464b::1bd4fbbff1da27d1c7c6118cbb8ee022e11330b5::058dcea24c53f1bd747618c5aae86a0752eefbf5::c3cd268558a3e54ddbf25037b2116e8b45f21253::03cf9272360a1410c3d48cfb2fb387e5b9c93663::826f27b101086ea220689a1691ef6553b5c72a4e::aa59b4201e702ff6bacbf77d1e140bc4588741b9::84ad7c720cb0aaaecb226388eb9c00a5a2ba2041::799af802daa5ae14713ae3f85ca8a4fab5b1d875::a228a7aa6a9a16ac1d2ec53fa0aae5ab9070b208::0eabf45486b2cf5f59939b51433b5669ce4ab11d::dccf0cca11d7dbdc1dbb365db6bce4acc7f71ed9::688c3d6639f86bfcb2626317b7e547c21a021e3e::
https://api.github.com/repos/JuliaLang/julia,17864,vs/openlibm-0.5.2::master,1,merged,,"Bump openlibm in order to potentially fix https://github.com/JuliaLang/julia/issues/17751. Upon merging, we can test the new nightlies, and if all good, we can backport.",03e92621aa93431ea78aa0d511427dce032035bf::
https://api.github.com/repos/JuliaLang/julia,17862,tk/linkcheck::master,1,merged,doc::docsystem::,"Upgrades to a newer sphinx to deal with getting some latin-1 back from valgrind's docs, and ignores the other remaining 2 problematic ones - the kde bug page is returning empty, and https://www.appveyor.com is returning 403: Forbidden. cc @FeodorFitsner any idea why it would do that using the Sphinx doc generator's link-checking feature? All but ~~the last commit~~ https://github.com/JuliaLang/julia/pull/17862/commits/5f95c4f5f2faf3ae0665da1609a2f8aae87becd5 should be backported to release-0.5. (and some version of the first 3 should be backported to release-0.4)",c3ca3dc3a34d1fc09a4962110168aeb00d8ab3e4::99c8ea0f2ff857fabcc1a1852bf39302b5257af6::b824da4732f7e711ced3b63b1de146fc95f3121b::25764d1fd7c41b77258842a10655e8e3213b789d::5f95c4f5f2faf3ae0665da1609a2f8aae87becd5::fa7f995c0a17e527e1d4f44f7c1b96077e26224e::
https://api.github.com/repos/JuliaLang/julia,17861,teh/circshift::master,1,merged,potential benchmark::,"On the benchmark in #17581, this is about 6x faster. On large vectors, this is also about 25% faster than the truly inplace 1d implementation of `circshift!` in #16032. Fixes #16032, fixes #17581. With regards to backporting to 0.5, perhaps the only question is whether we should export `circshift!` (if we're serious about ""feature freeze""). The docs should probably note that `dest` should not alias `src`. ::Fixed. ::The last time I tried this (in 1d), it was faster to do the out-of-place `circshift` directly.  The in-place variant requires an extra pass over the array. ::Oh, nevermind, I see that `circshift!` is not actually in-place, because you pass both the source and destination arrays. ::`map(Int, (shiftamt...,))`?   There doesn't seem much point in using `Integer` here. ::> extra pass 2 extra passes, actually, since the truly inplace version needs two passes and then there's the copy for the original array. > There doesn't seem much point in using Integer here. I was just keeping consistency with the previous version, but I'm happy to change it---perhaps as part of a final resolution to the inconsistencies noted in #17567? ::The function can still accept Integer, but there seems no point in passing Integer when casting to Int should be fine. So this seems independent of #17567 ::",60660b5dc663ee8c6f1501cc96c847ba64b14f5c::
https://api.github.com/repos/JuliaLang/julia,17826,aa/llvm_version_macro::master,0,merged,,"Fixes #9860. As noted in the linked issue, the names `LLVM37`, `LLVM34`, etc. aren't immediately descriptive because they don't refer to specific versions but rather to ranges of versions. This implements the proposed fix of having a single `LLVM_VERSION` macro that holds the LLVM version as a two-digit number and instead of checking whether `LLVMxx` is defined, we check whether `LLVM_VERSION >= xx`. Similarly, checking whether `LLVMxx` is _not_ defined equates to `LLVM_VERSION < xx`. This works locally, so fingers crossed that it works everywhere else... Constructing `LLVM_VERSION` can be done more succinctly as ``` c #define CONCAT(a, b) a ## b #define GETVERS(maj, min) CONCAT(maj, min) #define LLVM_VERSION GETVERS(LLVM_VERSION_MAJOR, LLVM_VERSION_MINOR) ``` But as @yuyichao noted, this is the kind of thing that one gets stabbed for if put into production. ::I think thse bounds are wrong. E.g. after switching to `100`, this should be `30300` ::This should be removed. ::And I think we should use a `JL_` prefix. This name is too close to what LLVM might decide to define some day. ::You mean the comment or the check for whether the version is defined? ::The check of whether the version is defined. The comment is great! ::This is still not addressed yet. ::Is the `defined(JL_LLVM_VERSION)` needed here? ::No, that's not needed. I'll take it out. ::IMHO, we shouldn't check if `JL_LLVM_VERSION` is defined. This can catch errors of missing include earlier rather than silently ignoring the error. ::`#if JL_LLVM_VERSION >= 30700 && JL_LLVM_VERSION < 30800` ::`#if JL_LLVM_VERSION != 30300 && JL_LLVM_VERSION < 30701` ::`#elif` ::So dropping (source code) support for 3.4-3.6? (after effectively dropped it for a long time). ::how would the old version of this ever happen? ::this path is hardcoded and wrong, we don't really support 3.4 or 3.5 anyway ::and 3.7.0 ? ::The function is also declared in `jitlayers.cpp`. Doing it here might have some issue due to missing type declaration/missing headers. ::@tkelman If 3.8 is the lowest version. So it's at least 3.8 and not 3.7 or lower. ::Should I bump the error check to say that anything less than 3.6 isn't supported? Currently it only does that for <3.3. ::@yuyichao Should the function declaration here be removed then? ::The condition is actually `USE_ORCJIT && JL_LLVM_VERSION <= 30800` (roughly 3.7 <= llvm_ver < 3.8). It is better to remove the declaration in `jitlayers.cpp` instead and keep this one with the condition fixed. ::The new check below is already doing that so the error message should be updated too ::I don't see how that condition is equivalent to what's currently there. Or are you proposing a change? ::The condition there before was `false`, the current condition is wrong. The correct one is in `jitlayers.cpp` and is the same with the one I gave above. ::I think @vtjnash meant that we are supporting LLVM 3.3 and >= 3.7.1. ::At least that's what we currently support (although LLVM 3.3 doesn't pass all tests anymore IIRC). We'll probably drop 3.3 support and require at least LLVM 3.7.1 (or even LLVM 3.8?) during the 0.6 cycle but that should probably be another PR (since this PR is already pretty big as it is now.) ::Looks like it fails if I remove the part in jitlayers.cpp. ::Move to `jitlayers.h` ::we support 3.3 at least for building against it. because of the backporting issues this PR will cause, ideally it wouldn't change any behavior and I could backport it. in a separate PR we could remove all 3.3 support and a lot of these ifdefs ::`defined(LLVM38) && !defined(LLVM37)` would never happen since `LLVM37` meant ""3.7 or newer"" ::Which is why I said, > The condition there before was false This was added before the JIT and codegen are split and therefore before `jitlayers.h` exists. This is needed only by `jitlayers.cpp`, which doesn't include `codegen_internal.h`, for LLVM 3.7.x which is why it should be moved to `jitlayers.h`. ::since the old version of this could never be true, probably best to just delete these few lines ::I think @yuyichao specifically requested this change: https://github.com/JuliaLang/julia/pull/17826#discussion_r73792427 ::This should in principle still be a range since LLVM 3.5.1 does exist. Not sure if it actually matters though since we might not compile there anyway.... ::Fixed, thanks! ::",038abd2354fe1d63617b91a31ad95995546a8624::
https://api.github.com/repos/JuliaLang/julia,17727,yyc/signals/safer-exit::master,1,merged,,"- Add more `try`-`catch` and sigatomic for top-level code/new tasks So that we don't need to run `jl_exit` in strange (signal handler) context due to missing exception handler. - Implement `jl_call_in_ctx` on unix. Use it to make sure that `jl_rethrow` and `jl_exit` are running on the right thread and right stack when an exception/exit is caused by a signal. Fix #17706 Tested locally on Linux x86/x64/aarch64/arm and Mac (windows sigint handling seems to be really unreliable in general). According to musl source code, it should work there too. Implementation on platforms that I don't have access to (FreeBSD, PowerPC) is left as an exercise for people who do. =) This uses assembly to set the register values instead of using sigreturn since it doesn't work reliably on Mac and may not work in the future due to mitigation of [sigreturn oriented programming](https://en.wikipedia.org/wiki/Sigreturn-oriented_programming). (Just like all other low level features that we want to use that is blocked by security fixes....) The final implementation is on the edge of what I'm happy to merge during feature freeze/backport after branching so I'll let others decide when this should be merge and whether it should be backported to 0.5 branch. tkelman's going to complain that MSVC doesn't support the `asm` keyword ::Well, this is in ...-**unix**.c, I'll be happy to learn how to write this in msvc compatible way when we support using MSVC to build for unix =) ::sets? ::can work against us ::multiple ::on `mach`, we re-use the signal stack for the rethrow call. should we eventually do that here too? ::Set `sp` to the top of the signal stack and `jmp` to the function? ::it does `jl_call_in_ctx` with `sp` set to the top of the signal stack (`ptls2->signal_stack + sig_stack_size`), to preserve call to sigreturn (and in the `mach` case, to get back to the right `tid`) ::Sure, Just need quite a bit of signal stack space for this to be reliable. ::aborts `sleep` and other syscalls ::same as? ::happens when one of the finalizers ::at an unfortunate ::",08465b43ae48b3fdd9664d370b1aaca5b15290fa::03c3c7004bec19eadb5b5dee70183d63ca765eec::
https://api.github.com/repos/JuliaLang/julia,17371,cb/dbldashparsing::master,1,merged,,"This just passes through the `--` arguments from the command line after the first one (which is used as an argument separator). Previously, passing more than one `--` raised an error, which seems overprotective: after all, consider that you could even have a file called `--` in the filesystem, if you're really into that sort of things... So this fixes #17366, and it seems conceptually more correct to me (provided I didn't screw up, I'm not familiar with this code and command line parsing may have been assuming the previous behaviour for some reason, but I did not find any hint that it was). I think this should also be backported, if it gets in.",36fccefebbf5f540eef6939595bcd3bce331f72c::
https://api.github.com/repos/JuliaLang/julia,17106,doctests::master,0,merged,docsystem::test::,"Updates the doctests to be compliant with Julia 0.5-dev. This PR is based off of the work done in #15753. Doctests currently have 14 remaining failures that can be categorized as: - ~~Regression for display of tuples of arrays (#17087)~~ - ~~Regression for display of `macroexpand` (#17090)~~ - ~~`dump` function no longer prints trailing newline (#17202 / [julia-dev forum post](https://groups.google.com/forum/#!topic/julia-dev/uHpfvBkClTc))~~ - Regression for `jl_` printing (#17107) Requires that JuliaLang/JuliaDoc#23 be merged. (DONE) same comment as before, doesn't the doctest system already do some pruning of backtraces and wouldn't this be exactly the kind of thing to add to it? ::The doctest system was doing some pruning before but it seemed to only work for entire lines. The ellipsis works much better for us as sometimes we append extra information to the end of a line such as `(repeats 2 times)`: ``` ERROR: ArgumentError: indices must be unique and sorted in deleteat!(::Array{Int64,1}, ::Tuple{Int64,Int64}) at ./array.jl:571 in eval(::Module, ::Any) at ./boot.jl:231 (repeats 2 times) in _start() at ./client.jl:359 ``` ::makes sense, but the `eval(::Module, ::Any)` part isn't really useful information - would it work if we put the ellipsis at the end of the previous line? ::I am ok with doing that change. I didn't do that as the original stack traces included `eval(::Module, ::Any)`. @tkelman just to confirm: You want me to removing the `eval(::Module, ::Any)` from all (almost all) stack traces in the manual? ::What do you mean by ""original stack traces"" ? Like what you get at the REPL or from running this code in a script (they'll look slightly different)? I think we already have the doctest system cutting out the pieces that appear in every single backtrace, 0.5 just adds a new such line. Since it's mostly noise I think it would be better not to add it. But would like to hear other opinions on the matter too. ::> What do you mean by ""original stack traces"" ? I meant what existed in the manual prior to this PR ::Before this PR I'm seeing a handful, but quite a bit fewer than this PR is adding: ``` $ git grep -n 'in eval' base/test.jl:914: in eval(::Module, ::Any) at ./boot.jl:226 doc/manual/mathematical-operations.rst:388:     in eval at ./boot.jl:263 doc/manual/mathematical-operations.rst:396:     in eval at ./boot.jl:263 doc/manual/mathematical-operations.rst:401:     in eval at ./boot.jl:263 doc/manual/mathematical-operations.rst:416:     in eval at ./boot.jl:263 doc/stdlib/test.rst:283:        in eval(::Module, ::Any) at ./boot.jl:226 test/core.jl:336:@test_throws ErrorException eval(:(abstract Qux2_{T} <: Sup2b_{Qux2_{Int}, T})) # wrapped in eval to avoid #16793 ``` ::I stand corrected. It turns out that ce62f34 added in the eval line which I've been ignoring in my diffs. I'll remove those lines and probably most of the ellipsis as well. ::is Variables output no longer being included in `@code_warntype` intentional? ::It was intentional. I can add it back if it is preferred. The blank line was being an issue and I felt that the variable listing didn't add anything to the example. ::~~where are these `leaky`, `bad-leaky`, etc documented?~~ nevermind these are just labels 5e1512d60134c8bc9cf4d85dc61dcc80706b0b26 ::oh right I see the `...` now, I guess it's alright to leave it out ::I guess this wasn't outputting anything? ::so this runs as a doctest, checks the output matches but doesn't include the output in the rendered docs? ::hm I guess this was a little nicer in the old format? is this a change in `dump` ? ::I might take this out right before release and see how annoying it gets while backporting fixes ::maybe rephrase ""if transiently"" to ""albeit transiently"" ? ::bisected to 3405d263194 so I guess it was intentional - the new output isn't quite as nice, but it says ""`dump` should not be overloaded"" in NEWS so I guess we're stuck with it ::Correct. The original doctest was failing since creating the macro now was outputting: ``` @sayhello (macro with 1 method) ``` Using `testcode` and `testoutput` allowed me to keep the example tested while keeping the documentation the same. Note we did lose the `julia>` prompt. ::I changed this to a code block as Julia interprets `function bar(x, y) ...` as a function call to `bar` which raises an exception. ::I agree the output isn't as nice. Would it be worth opening an issue to confirm the changes to String output was intentional? ::Fair enough. If we do want to require doctests to pass for PRs I think this particular doctest is going to be the main issue. ::might get closed with a ""yes,"" maybe a comment on that dump pr to start with? ::~~strange, I think it's been passing on release-0.4?~~ nevermind, was modified by 694180180fa4a88eb2bfc30cc4235c723e7e5558 ::I decided to just make an issue as GitHub comments are hard to search for #17392 ::",4934db5d7750e7fecd6e1eb9f3afbcc83d13d35f::4d6c1e49a08c111835e483a33f6a61cae59565d9::590b4be516ba9034fd7b5b731bf2fa96eacdbba8::138c1643e724d2bf67d322f9d39615c89918f079::f83c3aeb1b213eae65aa46a089cee3783c6fbee0::1e4ef7c70159f02880a8165f75c5cb3501834b88::460892462d2ccd7c6e59574ddbdfd571f4575745::89be24f7b142265d3644d49bfa1e0340c5ab8bf2::e3be3364e6ed37904b572d01fb3b214a6bc9325a::6beed51fdc72b105753e04d7f663aa4d671dcb47::5154886fc33481a0a2f04fa450c2e3972cc5fc90::2b98cd10ffd105bd86642645248b28854612c0ce::af68241d94660bad7e7a8cc4605c344864d4e03f::de2ca2a8b6db8310bba73bc2777429c98d90e5dc::5e1512d60134c8bc9cf4d85dc61dcc80706b0b26::9b95de2897b93ce30ba7bfcec3ba3c53e5fe033d::6b8dcc4db862fbcba9039990ea758dd89e6065d4::53d3b0cc199369c494abae860e74a2743be84104::868ee5be3adac0e1c7cc1d23cd2817ea539c79e3::5e7fce96109ce4d9802e53409634c6a7b5ea82e2::1a74e6d6248df839ca234f6ce6c35a5df54d9c51::4d29b86a96e55ab5165c73bc3a01302c5f336a5f::
https://api.github.com/repos/JuliaLang/julia,17002,cv/date-doc-fix::master,0,merged,dates::doc::,I noticed the day parameter `d` was missing from the docstring. Probably should be backported.,803c5f2f637594fa56c19e178d375e880d87489f::
https://api.github.com/repos/JuliaLang/julia,16992,cv/backport-edit-dir::tk/backports-0.4.6,0,merged,,Clean backport-able version of #13500.,8a7fc704a8947d243502a5cfb78015848c2b838c::816bf181d4223fe51222867ec691594e08bf953a::67fe80b0f55354789e9d95a29d7ca149dafbba76::a4e56253195f3bdbc6af2e3fd5419a57cce61c10::
https://api.github.com/repos/JuliaLang/julia,16991,cv/backport-pkg-build-fix::tk/backports-0.4.6,0,merged,,A Julia 0.4 compatible version of #16584. The original PR didn't backport cleanly to 0.4 as `PkgError` was missing and in the tests `readstring` was used.,d5fc7b744302405c95ca409c35e13943f671f5b6::210c59ed6805fab1bdeacc24de2c4b8d295de405::
https://api.github.com/repos/JuliaLang/julia,16990,cv/backports-dateformat-docs::tk/backports-0.4.6,0,merged,,The original PR didn't backport cleanly as `base/docs/helpdb/Dates.jl` didn't exist on 0.4 and Markdown tables were not supported. is this supposed to be data? ::H ... Minute ? ::I clearly messed up my Markdown-to-RST conversion. Thanks for catching this. ::The original PR did switch it from function to data. Worth noting that all those functions do have docstrings attached. ::,3be0d25c9871e3ce17d872e306f97ddc543d6664::
https://api.github.com/repos/JuliaLang/julia,16980,tk/backports-0.4.6::release-0.4,1,merged,,"This is way overdue, primarily because of code signing issues with the windows binaries, ref https://groups.google.com/forum/#!topic/julia-dev/YipJ-uRF-5Q. That issue is still not resolved, but I'm preparing this in the hopes that we can resolve it soon. Worst case we'll put out unsigned binaries that trigger security warnings if need be. ~~Still have a few more commits left to get in here, once it's ready as far as I'm concerned~~ I'll run PkgEval as usual. Speak up if you have bug fixes, doc revisions, simple test additions, or similar that haven't been tagged with the backport pending label yet.",00c1ac387d1eea9c20163537df2ef414c9aef391::e0aa3c4a5c8fbfc014616e4b06aab9760a1db0b8::632e0873574a04b3b3e734f53feec53814826d31::c47090d4bba7415e9b628fd92efee6f446d241a5::a935100e75f604b664ec6a7c64a6cffb94909d2c::3430e5559785135e2b5b6322bfa59c199a4f8b72::606386769e5563788a704407ba809be700329b70::51d8a18eeac20f5c244b23e69ce6e152b530f92d::f9f3726ed8be109fd95c49329b8790bca73b1b43::555d956e53d8871b980efb1269a481216c286acd::85931919f9e8833a6a516197a4beb42b76a9d9d6::80bad000e6eff75e37370377ff8c408ef10f09ce::3846eb4d1d2c5b1db013dd4e577ac845c31343b1::6829f889e32b69658a1a07f14b34bb17364eba46::4cd3271b7fab06eb822ad0938c8db3a4d3cb0713::7ededdc4615088b3c176a0ba8384800483891daf::76083b434aff8198a20fde2afd45aacebf9835d7::6a1fa45a145298682b674ecae1d6b4caf5eaf094::96614fd52d89c0e08c074fd0d737cfed533c96af::e80d56fe79b24f962911d0065d348e6de65514af::3884d7c3ac0ef9ee0a2ace377c55a0c2d18fa3bf::dd1a8f03365c47db0b27496f4e8386312a0ba239::21d7d1842baa530177d1cac547749ab3f5ef5e69::cfd00f569c549f720ca2216beaf10851185dfb27::718e54301eb13d8dba839a11a48718c1d1307b03::eb9ff323cf86909b687283a1a60a32493d967933::668dd1af9345596b51b76fe02a1f464d0fe6ef2f::081c049d282a2ea0c049a6e6d532cd60148232bf::7d5483617e48459b00a6a43cc6624c1333bc369d::8a7fc704a8947d243502a5cfb78015848c2b838c::816bf181d4223fe51222867ec691594e08bf953a::67fe80b0f55354789e9d95a29d7ca149dafbba76::a4e56253195f3bdbc6af2e3fd5419a57cce61c10::3be0d25c9871e3ce17d872e306f97ddc543d6664::d5fc7b744302405c95ca409c35e13943f671f5b6::210c59ed6805fab1bdeacc24de2c4b8d295de405::fd88b57c56845947ebf7f0f93cbe9928d5802dae::67a589285ee10f52a269d4f6d60e4fe21f125228::2c7288e5ecf238cab62e88c7bb02d18b8fe1e05e::03db8fcf597e59472337cddf87f2f4a5c2e623a5::c7c8b0f1d3fdacd40f1fd959f9dfeab644ea5a2a::794245ba9fbf07a9fa811ee41aac115968571f23::ef7b1dd77aa780aea01d89050e1cecf9ddddd672::
https://api.github.com/repos/JuliaLang/julia,16597,0.4.5-patched::release-0.4,1,merged,,fixes https://github.com/stevengj/PyCall.jl/issues/87 (cherry picked from commit 098a0cc42254c53f1b1d819bea224c3dd6291e04) backport of #16442,73fe4b19cc41bf9fb0dd3c3def646e30b62347b9::
https://api.github.com/repos/JuliaLang/julia,16584,pkg-build-fix::master,0,merged,packages::,"Fixes #15948 I think since `PkgError` doesn't exist on release-0.4, backporting this won't quite work ::Would backporting `PkgError` be a reasonable fix? ::I introduced `PkgError` into 0.4 as the fix. See #16991 ::",36d57fe9102df4c0b5bfac2d4a67c11d5b6d8ace::cbf924219f0f62e5b3bbb5696cfa8835c8f18f94::
https://api.github.com/repos/JuliaLang/julia,16503,yyc/llvm38::master,1,merged,,"This is due to a LLVM bug which sets the wrong alignment on a scalar load unpacked from an aligned aggregate load. This is very similar to the issue in https://github.com/JuliaLang/julia/pull/15417#issuecomment-213264771 although the transformation is somehow visible in `code_llvm` and not only `code_native` so more tests are needed on windows (all tests passes on linux for me with this patch). The bug was introduced by http://reviews.llvm.org/D17158 which was applied on 3.8 branch in https://github.com/llvm-mirror/llvm/commit/7a0ec464f16e761602ac9c4e1f610029c0346745. This is fixed on the LLVM master in https://github.com/llvm-mirror/llvm/commit/7aec7512923b9fdf5bb67782fe8c4f4249168a45 5 days after but was not backported.... touches the same file as `llvm-D14260.patch`, should have a dependency to avoid a race condition ::Done ::",2c394f49e5720a4cd731838d0237edd4890261d5::
https://api.github.com/repos/JuliaLang/julia,16423,amitm/cookie::master,1,merged,,"This closes #16334. It does the following. - On every new connection initiated, first a 16-byte cookie is sent, followed by a 16-byte version string - cookie and version are read directly off the IO object (`deserialize` is not called). - On the receiving side, the cookie is verified, the remote version recorded and ~~a empty cookie followed by~~ the local version is sent back. - On every incoming (only) connection, the cookie is verified before any call to `deserialize` - The version information is currently not used. It is being put in place to support serialization or communication protocol changes in the midst of a major release. This has snuck in into this PR. Assume it is correct. ::If printing error messages in the CI logs is a major issue, I can move these tests under `JULIA_TESTFULL`, though I would prefer not to. ::we can't make them quiet? ::They print to STDERR in the workers. In case of a real bug, we would want to see STDERR output in the logs. ::Could you make the message shorter? `NOTE: The following '...' indicates normal operation` is used in a few other places. ::Nevermind. The messages look pretty ugly in the CI logs. Will change text and move test under `JULIA_TESTFULL`. ::Wrap these at more like 80-92 chars. Either ""data read from the stream"" or quote `stream` as code to correspond with the input argument. ::spacing not aligned with anything in particular? ::How picky are we being here? different patch versions of the same minor version should probably be mostly compatible unless we change the serialization format (which usually shouldn't happen in a backport), right? ::All versions with the same major version (for major ver 0, all versions with the same minor version) must be compatible. Being aware of the remote version helps us implement bug/security fixes that need changes in the serialization / messaging protocol. For incompatible versions we will print a nice error message. Currently it is moot since versions 0.4 and below will probably just segfault out. Applicable for versions 0.5 and later. ::incompatible ::wrap some of these long lines ::""an all-to-all"" ""specified"" ::",1d99afd09f75813ca1f5019ca005377254ebfc52::
https://api.github.com/repos/JuliaLang/julia,16382,kms/libgit2-rebase-fix-test::master,1,merged,,"Right now, `LibGit2.rebase!` gives ``` julia julia> LibGit2.rebase!(repo, ""master"") ERROR: GitError(Code:ERROR, Class:Invalid, Invalid version 0 on git_checkout_options) [inlined code] from ./libgit2/error.jl:98 in #GitRebase#73(::Nullable{Base.LibGit2.GitAnnotated}, ::Base.LibGit2.RebaseOptions, ::Type{T}, ::Base.LibGit2.GitRepo, ::Base.LibGit2.GitAnnotated, ::Base.LibGit2.GitAnnotated) at ./libgit2/rebase.jl:7 in (::Base.LibGit2.##120#122{Base.LibGit2.GitRepo,String})(::Base.LibGit2.GitReference) at ./libgit2.jl:429 in with(::Base.LibGit2.##120#122{Base.LibGit2.GitRepo,String}, ::Base.LibGit2.GitReference) at ./libgit2/types.jl:613 in rebase!(::Base.LibGit2.GitRepo, ::String) at ./libgit2.jl:413 in eval(::Module, ::Any) at ./boot.jl:226 ``` [`checkout_opts::CheckoutOptions` is the last member of `RebaseOptions`](https://github.com/JuliaLang/julia/blob/5d52f0273d3ba8130da22af52083a71924b0c059/base/libgit2/types.jl#L450-L456). Digging into this, I found that [`MergeOptions`](https://github.com/JuliaLang/julia/blob/5d52f0273d3ba8130da22af52083a71924b0c059/base/libgit2/types.jl#L360-L368) seems to be missing a couple of members from [`git_merge_options`](https://github.com/libgit2/libgit2/blob/c148533024319689fca016f7c452d556265bb13f/include/git2/merge.h#L238-L290), which would cause a misalignment of the members of `RebaseOptions` when passed to libgit2. Unfortunately, the error is still there even after this change, so either I didn't do this right, or there seems to be some other reason for the error. I don't know when I'll have time to work on this again, so any help in finishing it up would be appreciated. Cc: @nalimilan @wildart @tkelman would it maybe make sense to wait to set this until as late as possible, only for the part of the test that needs it? ::Okay. ::presumably they won't backport a new field in a point release? so 0.25.0 will be the first to have this? ::",220301d508a925ec980e931cb52469236b3dcd86::ac52edbc55b32f496d2ed476ac4db92004df31fa::1b994b4234663492411cb2066c5b3711d1f51a76::93a25e0ef8e2137ee70ba54522e82654facf3fdd::
https://api.github.com/repos/JuliaLang/julia,16362,sf/soversioned::master,1,merged,build::,"@nalimilan Do you know if we should be setting `-Wl,-soname=libjulia.so` or `-Wl,-soname=libjulia.so.0.1`? Closes https://github.com/JuliaLang/julia/issues/8038 To be more preciseI would say `Increase SOMINOR with every minor release, and SOMAJOR with every major (ABI-breaking) release (and reset SOMINOR to 0)` ::any way of making this a little more automatic, or harder to forget? ::A solution I find natural, and which works well with semantic versioning, it to have SOMAJOR equal to the major Julia version, and SOMINOR to the minor version. The parallel between SOVERSION and the official version makes things clearer. Until 1.0, SOMAJOR would be equal to `0.$minorversion` and SOMINOR to `$patchversion`. ::that would be easy to automate, and I know there are other libraries that do that, but I think I've also read that tying API version numbers to soname ABI version numbers is actually wrong. I'm not sure what the downsides would be though. ::https://autotools.io/libtool/version.html and http://plan99.net/~mike/writing-shared-libraries.html discuss library version in some detail ::Indeed, the second link explicitly says ""The software version of your library should match the interface version."". That matches the semantic versioning contract. ::I don't think you can make the major version a decimal like that, so I'm opting instead to set the major version number to `Y` in Julia's `X.Y.Z` version number.  Once we hit 1.0, we'll add `W` to the major soversion, where `W` is the number of major releases before 1.0, so that we continue to count up with major releases. ::I think you can perfectly do that, that's even the solution required by Fedora when upstream does not set a SONAME: use SOMAJOR=0.X until upstream ships a release with SOMAJOR = 1. See https://fedoraproject.org/wiki/Packaging:Guidelines?rd=Packaging/Guidelines#Downstream_.so_name_versioning ::we should only be using tagged releases ::So what is the meaning of `OPENLIBM_BRANCH`?  Would `OPENLIBM_TAG` be more appropriate? ::Possibly. I can't really read what the git externals makefile macros are doing. It's only used in one or two minor places. More saying for the sake of making release tags for packagers to be aware of as opposed to picking some random commit hash. Also note the VERSION and SONAME look out of date on master of both openlibm and openspecfun. We need a better way of enforcing that those get updated for releases. ::> Possibly. I can't really read what the git externals makefile macros are doing. I think that @vtjnash is the only person who understands this git externals business. Maybe @Keno as well. ::I think I understand it.  The confusing part is that with `git`, a branch name and a tag name are often interchangeable.  I've tagged new releases of `openlibm` and `openspecfun`, and pushed a new commit with those tag names in the `_BRANCH` variables. ::I think the technical name would have been `_TREEISH`, but branch seemed a bit clearer. the only real requirement is that the desired sha1 value will always be locatable in the history of tree-ish. @StefanKarpinski they're just simple string interpolation macros ::The VERSION and soversion are still out of date on the commits you just tagged. ::it's allowed to, but in practice we're being stricter than semver ::also need to update the checksum files, though maybe it's better if you split out the openlibm/openspecfun bumps into an adopted version of #15212, separate from the libjulia soname changes ::Yes, at this point I agree. ::I'd like to remove this line as it's a bit misleading, but I can do it myself later if needed edit: actually my eyes are going bad, the only thing I'd change is getting rid of the ""major"" ::Well, what I'm going for there is that with the `Major.Minor.Patch` standard, `Major` is incremented for large backwards-incompatible changes, `Minor` is incremented for large backwards-compatible changes, and `Patch` is used for small backwards-compatible changes.  Because before `v1.0.0` all the meanings shift down by one decimal place, that means that this line should hopefully be accurate in explaining that the difference between `v0.4.0` and `v0.4.1` is a `Minor` bump, not a `Patch` bump. ::Yeah, I think that's mostly covered by the semver spec? In practice we haven't been backporting ""major"" changes, for some definition of major. ::Sure, I trust your judgement.  I'm not married to this comment appearing as-is.  Modify as you like.  :) ::",98fe2ad1e0c03fa734c5684826660d829299e72d::72a140a54665833327a6d707bac8ff20a01c4e04::5b1d62612acde5bbc6163af5acf5d1720068cc5f::3b924836a1aa8bf6e45355e33cf5d08dd66ff203::a5b8735bf7bd6ddf8d3bb92fd425c7b8e9b0cef3::fc345d4a908e9b2f29370606d372e1ce780ebdee::6f1c4246cd0379e09429af11e80869569331e5e2::
https://api.github.com/repos/JuliaLang/julia,16242,patch-1::master,0,closed,doc::,"I was really confused when attempting to use SharedArrays the first time because of this minor distinction between Types and Immutables which are effectively structs. The document is wrong here, it should be [`isbits`](http://julia.readthedocs.io/en/latest/stdlib/base/?highlight=isbits#Base.isbits) not `bitstype`. Also, I believe you are using the markdown syntax instead of rst cross reference and you are linking the 0.4 doc here. ::@Skylion007, to clarify, the wording should be something along the lines of `Note: only objects where ""isbits(obj) == true"" are supported`. Then link to `docs.julialang.org/en/latest/...` instead of release-0.4. We can the backport the docs change to 0.4. ::",ca5b9fba71e007ad68a40706dc7ab5dc2e9d4ab4::
https://api.github.com/repos/JuliaLang/julia,16233,include_nul::master,0,merged,bug::,"This fixes a bug I noticed in #16218, in which `include(""foo.jl\0"")` would erroneously succeed if `""foo.jl""` existed, because the filename would be silently truncated at the NUL char (similar to #10991). I did an audit of the other functions in `src/*.h`, and I couldn't find any other problems of this kind. Maybe just call Core.include directly here? Otherwise, include_from_node1 is confusing the tests. ::Okay. ::On release-0.4, `jl-parse-file` is used inside `jl_start_parsing_file` which does not take the `len` as input. Could you propose a backported version, preferably w.r.t. `tk/backports-0.4.6` if you want to get this in? ::FWIW, these functions should not take a length argument since they really don't support anything other than NUL terminated strings.... ::bump again, would need assistance to resolve the conflict if you want this on release-0.4 ::",caf87d0d548bda1ef62143bdd4512489fdd1e1b3::45620ec90c6c462298cbf2fb74874b95c32526e6::
https://api.github.com/repos/JuliaLang/julia,16080,nullable-promotion::master,0,merged,,"I noticed that these promotion methods were missing for `Nullable` types when working with the following code: ``` julia julia> using NullableArrays julia> NullableArray([DateTime(2016)]) - NullableArray([DateTime(2015)]) ERROR: MethodError: Cannot `convert` an object of type Base.Dates.Millisecond to an object of type DateTime This may have arisen from a call to the constructor DateTime(...), since type constructors fall back to convert methods. Closest candidates are: convert(::Type{DateTime}, ::Date) convert{R<:Real}(::Type{DateTime}, ::R<:Real) convert{T}(::Type{T}, ::T) ... [inlined code] from ./nullable.jl:40 in -(::NullableArrays.NullableArray{DateTime,1}, ::NullableArrays.NullableArray{DateTime,1}) at ./arraymath.jl:85 in eval(::Module, ::Any) at ./boot.jl:236 ``` These changes should be backported to 0.4. The `promote_op` test will need to be updated to work on 0.4 and 0.5. `promote_type` is tested above now, so you could as well remove the loop and simply copy the line for a few types. Would make sense to put it right below the `promote_type` block. Also, it would be good to test the actual behaviour, i.e addition, subtraction, etc. of nullables. ::Ok, I'll update this. What operations should I be testing? Just addition and subtraction? ::Actually, I guess you should test all of them in a loop similar to the one used to define the methods. Else some code won't be covered at all. ::Actually testing arithmetic operations isn't possible in Base of course until we define arithmetic operations there. Could you simply apply the changes I suggested in my first comment then? I think we can merge this soon since we all agree that it's needed. ::Since it's used only once and isn't related to nullables in general, better write `Base.Dates.Milliseconds` once below instead of importing. ::Ok, will do. I was trying to keep the line under 92 characters. ::I see. Adding a line break should be OK too. Anyway, not a big deal either way. ::I think it reads best if it is all on one line. I'll remove the import and just go over the 92 character guideline. ::",e1fadf8b496c1d3f32ad0f619274d5de695dfba8::
https://api.github.com/repos/JuliaLang/julia,15883,nl/ggsvd3::release-0.4,1,merged,,"Incorrectly backported in e3f3f72. Similar patterns in the file use Array instead of Ref in 0.4. Fixes https://github.com/JuliaLang/julia/issues/15733. Strictly speaking I guess `k` and `l` were okay using `Ref` since none of the macros were referring to them, and it might look a little more natural below to use `k[1]` instead of `k[]` now if it's going to be an `Array`, but for now it's the same. ::Yes, they were fine, but I realized all other calls used an array, so better be consistent. But indeed I could have changed `[]` to `[1]` too. ::",9377f241b3a6880d4be94ddeb3c97ad4beaa0872::
https://api.github.com/repos/JuliaLang/julia,15859,jn/win64dwarf::master,1,merged,windows::,"afaict, this is how other platforms treat this flag. and it makes the dwarf4 info correct without seeming to corrupt anything else. (the IsPCRel case is never triggered, the useful change is switching from the invalid relocation type `IMAGE_REL_AMD64_ADDR32` to `IMAGE_REL_AMD64_SECREL` for `FK_Data_4`) this backported cleanly to 3.7.1? that's super awesome ::except on osx where patch is pickier, PR incoming - let me know if the adjusted version works on 3.8 too ::",664f8b77a1345755bfec026e10b27a17dd9abf35::
https://api.github.com/repos/JuliaLang/julia,15753,vc/fixup_docs::master,0,closed,,"Due to backtrace and printing changes most of the doctests are currently failing. Remaining issues are: ### Changed syntax errors ``` File ""manual/variables.rst"", line 131, in default Failed example: try = ""No"" Expected: ERROR: syntax: unexpected ""="" Got: ERROR: syntax: unhandled expr (error #<julia: ""unexpected ""="""">) in eval(::Module, ::Any) at ./boot.jl:237 ``` ### Method overwritten ``` File ""manual/stacktraces.rst"", line 173, in default Failed example: @noinline parent() = child() Expected: parent (generic function with 1 method) Got: WARNING: Method definition parent() in module Main at none:1 overwritten at none:1. parent (generic function with 1 method) ``` ### Changed Unit-range printing ``` File ""manual/arrays.rst"", line 312, in default Failed example: searchsorted(a, 3) Expected: 3:2 Got: 0-element UnitRange{Int64} ``` ### Inf in Tuple printing ``` Failed example: (typemin(Float16),typemax(Float16)) Expected: (-Inf16,Inf16) Got: (-Inf,Inf) ``` ## Todo - [x] Decide if unitrange is a regression (if not reformulate example) - [x] Are syntax error a regression? (They seem to be less readable than before.) - [x] Enable doctests on travis - [x] Fix doctests in stdlib - [x] Fix doctests in devdocs - [x] What to do with method overwritten errors (They are clutter and don't add to the examples, on the other hand renaming the methods is excessive) what happened here? ::was the tuple not displaying correctly? ::what caused this? it's a Float64 field ::This one makes sense, since the value of an assignment is always the original value ::I think somehow the function we use to show a tuple changed. ``` jl julia> show(Inf16) Inf16 julia> print(Inf16) Inf ``` IIRC this also affects the precision of floating point numbers in tuple. (there should be at least one other broken doctest due to this) ::https://github.com/JuliaLang/julia/commit/fff2b9aa811549186ec39e71cc4f6331203e2119 should the `in_env` be `false` if the `:tvar_env` context is not found? ::In Julia v0.4 ``` julia> a = foo.qux = 2 2.0 julia> typeof(a) Float64 ``` In v0.5 ``` julia> a = foo.qux = 2 2 julia> typeof(a) Int64 ``` ::The call sequence that happens is: ``` writemime(STDOUT, MIME""text/plain""(), (Inf16, Inf16))) writemime(io::IO, ::MIME""text/plain"", x) =  showcompact(io, x) showcompact(io, x) = show(IOContext(STDOUT, :limit_output => true), (Inf16, Inf16)) show(io::IO, t::Tuple) = show_delim_array(io, t, '(', ',', ')', true) ``` `show_delim_array` finally calls `show(io, x)`, but `io = IOContext(STDOUT, :limit_output => true)` and that calls `showcompact(io, x)`, witch calls `Base.showcompact(io::IO, x::Float16) = _show(io, x, PRECISION, 5, false)`, where the `false` signifies that the number should be printed non-typed. Now the question is if it is the right behaviour for `showcompact` to drop the type information. ::I believe this is a bug on 0.4 https://github.com/JuliaLang/julia/issues/14691 . It's a breaking change so I'm not sure if it should be backported. ::I believe this is https://github.com/JuliaLang/julia/issues/14684 ::who should we be asking that question? ::https://github.com/JuliaLang/julia/pull/16221 ::I feel like the doctest system should be pruning this line ::",cb8aa0b4972a4aed55e2b9a85320f47664f94ae3::cd3797ed816f1f76723701f8e5f7535f340678ff::1892f74c7e0dd142846769528f7241b7c355feda::d9495c7af867b93b4cf5b79494ceea04902525a1::83ef854c91ea5ccd5def87a5e76149b672abfecf::78f6d706efdc738278a834d48585f658c8308940::c03e6e03344a10aa0de7424a82790ba169051888::35a31bbdc9eddbbf916d1ba6bd7b794fc353cf45::
https://api.github.com/repos/JuliaLang/julia,15651,fix_escape_char_bug::master,0,merged,,"Fix so escaped chars is ignored when looking for start of a brace in method completion. The PR do also prohibit `bslash_completions` from trying to complete on escape characters in strings. As this is a bug fix this should be backported to 0.4. i think there needs to be a check for `!done(next(r, i))` before this ::I have adjusted the PR to follow your comment. The current use of the function ensures a bounds errror wouldn't occur, but I have added the `done` condition to make the function safe. ::",06643cc188f8bfa05790e29c470675ec1bc2cfef::
https://api.github.com/repos/JuliaLang/julia,15638,tk/armabi0.4::release-0.4,1,merged,arm::,"Backporting #14194 again, but this time in a way that should build correctly on release-0.4.",0b2c097c6b8c0bcbda39c676c55e79c0eba3d3ac::80e9940c68e423e09052a760f8cb2d858bc85169::ecef11454475c0e17f77924ff8dda6aca99a59b7::5d87cadbfb916edda4d0dd17dbaa46eb6d85eec4::
https://api.github.com/repos/JuliaLang/julia,15549,nl/lapack3.6::release-0.4,1,merged,linear algebra::,"Fedora started shipping OpenBLAS 0.2.16 without deprecated LAPACK symbols, which made the Julia build fail. So I figured it would be a good idea to backport this. I've also included the fix to check for NaNs, which looks really like a bug fix. Cc: @andreasnoack",411dcecf8b5ca88e5b60842fdf2b4ed51c4ba7cd::e3f3f7233964ecf88edd1862add2077df8ad3bd6::
https://api.github.com/repos/JuliaLang/julia,15538,tk/headers0.4::release-0.4,1,merged,,backport of 611aa277b3d9023d50fffafdc7a31c869cc35e33,e5e774b6201e7296a2388e07baa469d38ca2ea74::
https://api.github.com/repos/JuliaLang/julia,15520,tk/headers::master,1,merged,build::,"(0.4-backported version is at e5e774b6201e7296a2388e07baa469d38ca2ea74, I anticipate seeing a dupe of this issue soon if we don't fix it first)",611aa277b3d9023d50fffafdc7a31c869cc35e33::
https://api.github.com/repos/JuliaLang/julia,15499,dates-slots-Y-docs::master,0,merged,dates::,Documents the new slot character 'Y' introduced in #15224. Was purposefully not added to #15334 to ensure that the PR could be backported.,946ac291e23d26ac55bd8be28d1272fed1d3bb43::
https://api.github.com/repos/JuliaLang/julia,15441,amitm/backport_finalizeshmem::release-0.4,1,merged,,- document use of finalizers to release remote references early. - make remote ref finalizers  robust to multiple invocations.,44cb771d689921e411692cdb32d4ffdcaec8ad43::
https://api.github.com/repos/JuliaLang/julia,15429,yyc/gc/array-owner-0.4::release-0.4,1,merged,GC::codegen::,This is the backport of https://github.com/JuliaLang/julia/pull/15413.,d3ccbd256e858d9c976064c34c9f20f7d68f0d42::
https://api.github.com/repos/JuliaLang/julia,15413,yyc/gc/array-owner::master,1,merged,GC::codegen::,"When inference failed to infer the array dimensions. I don't know if this path can actually be triggered in real code (that doesn't call `Base.arrayset` directly) but since we have the logic there to handle this case, this should be handled correctly.... I'd also like to kill this branch in the fast path soon.... Add backport label although the backported version might need to be tweaked due to the codegen changes.",d28c2656f4091455f7a1e6b95a90da7c938cf8a4::
https://api.github.com/repos/JuliaLang/julia,15385,tk/backports-0.4.4::release-0.4,1,merged,,"If you'd like to nominate anything that doesn't already have the label go ahead and leave a comment here - especially doc-only or test-only changes are usually fair game. TODO's: - [x] https://github.com/JuliaLang/julia/pull/12429 plus fixes to satisfy sphinx - [ ] https://github.com/JuliaLang/julia/pull/14659 borderline, behavior change - [ ] https://github.com/JuliaLang/julia/pull/14625 also a bit of a behavior change - [ ] https://github.com/JuliaLang/julia/pull/14194 needs to be done carefully to work on old llvm / pre-codegen-rewrite - [x] https://github.com/JuliaLang/julia/pull/15285 need to test whether this works properly with winrpm on release-0.4 (edit: it didn't, see 36089d7713a4f21988369f7e0b22da46f74d403d for temporary workaround) - [ ] https://github.com/JuliaLang/julia/pull/14902 need help with resolving conflicts - [x] https://github.com/JuliaLang/julia/issues/13818 and https://github.com/JuliaLang/julia/issues/13851, possibly could be fixed by backporting the non-breaking part of #13491 but needs to be done carefully - [x] pkgeval",397a781e2d98a22196570391c412a85a47a4f558::d8e25374ac161b371bdc14d5d2d8ea414093ce29::132cb2093588193a56a38952466e0ca43c6a1d97::fa6802d467f33cdc486c201140458911a5cd8991::235fde2e65948cf8df742c2aef3d1ef243a26c81::a437ee9d5873cc1a3329c2644809c0d98e068f1e::9e625f6b3b47c1439e4370f8a75e1174e23159b9::884d2d09f64c167f9c183792601338a3a7a02b36::221e865c4b35d079cfe793e46ba53f5f894e2b2d::2ff37c91c85291341861afd1a453702bb555b550::131a2df183f5464089bc6a53f931857b67418274::148dd779bc9e4943efb6d77825b6082d2bca1ee4::d776ca8ffa25c01764f7420bbe8087f38cc52958::3602b5b7e2eead1ed72a9349551959a88b88a736::66326621d8ef6dfd35aa98b04a717d81de0a019e::f5a38dc36b50406b643394907a88dab2794641ad::d21e9b08bbc095c059b01b9d87bc3f73e0cfe60c::1a706c42e39b0f684dbaf34a7ff61be128435e5b::d214e1cb892c45c7c2e625932be74abdc6bfb266::fd33166c827df738ad6d6aa22762b5505de42d17::119c9bf549a9f9f55c521f5dff81423e19474bdd::9f70f69253204e11ba1380710bc4a81f27b2372b::d7dd76412c9187f6bd91fca3b0632f3fea7d5a7d::910baf8376f2e0bf8f1a4f0ee70e819dd666d6e8::64da48a7123fc159e3f8b1eb2a14709e423775f0::a06f8a580a620a874edb47d63a6aaad037859ecf::83e6732b4221b7d84860ce20be7030f9ac800cb7::b5cd49c1868c4dd269430a6a096a0ee63f6761ec::1a020b06c37d4b88628180144b9abe7c26d08be8::2940a3dca6e1701dd8165e782f7e9e79661b5b9f::129d6463a006d2d9103ce01b7c6f11e5de1dbfe3::4cd482f94672fac24c6c3657940030a98c1c4b6c::8f58a9884759ade0e8a495425a0fbd358ebf2a97::99422341456a50916307fa4b65e6a7df2c45bfba::1727c0f0bd69f3f0390ca0760967e6b3108bf774::62b7e07ff905cb66b9af98bf7b729997065e3847::3770c617b060f467d7c48d102fe258f15392d42a::722463bdb92783e59c69d98a77ec9f751e08c1c0::a86f33c19d0ce04a77044f4c4140e2449fe6119c::675305c635ff07e74316c78e6dfbaf6796d45e04::4e6cf74a04186e3790708c0a7f967ce98a208501::c747915693d137f06f9bc6f2c686e7970c9d0765::c53b24fb51a4412e4881b779a893e7d210dd2186::1d274002e59962a62d9132f6da22b77dafe3da23::ca4f7f336878793777a1b3e188b5543b86ca8561::bc5ea278d7cebbeb64820efe7d2daec48d272278::05b1aedc3aa1e49e91f6cbc6e066d9fceb0ba7e6::93e38d8aaca361ef610a0e262aefc59d577c216f::e4bd7997af27291e52e794fc0b83dea73516b7a3::36089d7713a4f21988369f7e0b22da46f74d403d::84c1be48e253d2e5bb044744bf37d83c51568b9c::e5701a5e3a9094756843e342819150fd627d77a8::a5ba47abeb278dba5fd620f720e102a8aeca1e5e::647cb78d45f864ad30297cef2792ab8fd935903e::7d85e102b98a203c91d32174d6f8cb46b9bad6fd::6fffa590023778100f902832ae0f1384a08dc54b::d4d015664fa1a42285d206791a7bf2dd788f4f4e::fe33ecccd206052edcd3e7e733d091ed843e2641::
https://api.github.com/repos/JuliaLang/julia,15366,tk/backport-travisfix::release-0.4,1,merged,,"This is a backport of ~~#14583~~ https://github.com/JuliaLang/julia/pull/15249 - 0.4.4 is way overdue, apologies if anyone was waiting on it. Need to start here to get travis to behave, will be preparing another backport rollup PR shortly.",d484fa6a526774e8d286eafc51f7e906280f4a39::3de0834ede7d2ec7f1124b7114db21f7dc010f35::6c78a2c7182609f5e96ed06ec26ea229d948bbd4::
https://api.github.com/repos/JuliaLang/julia,15318,yyc/gc/table-realloc::master,1,merged,GC::,"This is the second GC (usage) bug discovered while investigating https://github.com/JuliaLang/julia/issues/15271. This has a higher chance to be the real cause since I can see how some recent change can put a higher pressure on the ObjectIdDict rehashing... (OTOH, it seems to be as old as 2011/2010 and I'm surprised that no one have hit it before.....) @tkelman ~~backport 0.4 might need to remove the `dump.c` part.~~ (the change in `dump.c` is only a comment now so it should be easy to backport.) Let me know if it is not straight foward when doing the backport. @colbec If you can try to see if this fixes the issue.",27faae47a6b17c5c1c4ee6b0ea25cb5845fc008d::
https://api.github.com/repos/JuliaLang/julia,15300,jn/typeinfq::master,1,merged,,"This changes type inference to use a queue. Benefits thereof include: 1) Much faster (inference.ji ran in over 90s –> now runs is less than 30s) 2) Much less stack (old version used ~3-10GB. new version uses < 1GB) 3) Fewer bugs (fixes #9770) 4) works with very-linear-mode 5) described in a detailed blog post (http://juliacomputing.com/blog/2016/04/04/inference-convergence.html) 6) likely can be backport to v0.4 without breaking changes TODO: - [x] squash commits - [x] merge VarInfo and InferenceState? why is this necessary? ::Are these replaced by the new bootstrapping code at the end of inference.jl? ::yes ::I recently made the exact same change to the signature of `typeinf` on jb/linear. That's encouraging :) ::having a parameter that was always `true` has confused me for quite some time ::`Array{T,2}` ::`Array{T,3}` ::`Array{T}` ::is this needed here? ::Why are these here? Does inference use them? ::yes ::",8f4238a3d5d1c066cf679c2b8485a930be2476ce::f67203c6d4f0c55c65b39bdc5f159b3bbee1002c::af8143127a9ac0adcd60bde1b9e370a31cd8f182::638211647dc17644f05caec4830921e220c31585::24276a5226a33ce4af21cb3448c835713bab2c52::79b08ca5db3711a8e32a8e7cbdeb51502c064c20::53b02a69f7f9cc303551ead74f109cc964e639ab::
https://api.github.com/repos/JuliaLang/julia,15222,yyc/array-grow-beg-undef::master,1,merged,,"For ptrarray, always make sure ~~the memory before the offset and~~ the memory grown at the beginning are zerod. This was caught in a rr run of the subarray test and for some reason that might be related to https://github.com/JuliaLang/julia/issues/15044, the convert in [`_growat_beg!`](https://github.com/JuliaLang/julia/blob/bd7adbf247cc9436761ff7e4727378e64362b63b/base/array.jl#L330) was using a `jl_apply_generic` and therefore allocating. Some `grow_beg` and `del_beg` sequence have left some invalid content in the buffer which causes the GC to segfault. Tests will come later. Tentatively add backport 0.4 label.",99ce885cf847d05c136e4d7be0cc3018e9daf66b::
https://api.github.com/repos/JuliaLang/julia,15025,teh/union_inference_0.4::release-0.4,1,merged,,"Ref #15024, CC @tkelman. Note this is against `release-0.4`.",ad7f6ca2163749482b3eedab018427ceb5077e57::
https://api.github.com/repos/JuliaLang/julia,14891,pr_make::master,0,merged,build::,"This PR contains a bunch of commits which should improve some less-used building scenario's, such as dynamically linking against LLVM, while using CMake, or when using Address Sanitizer, etc. I've also added some comments to document currently-broken scenario's which aren't trivial to fix (or even detect) given the current Makefile infrastructure. These changes shouldn't break anything, except maybe for dropping `--enable-shared`/`-DLLVM_BUILD_LLVM_DYLIB:BOOL=ON` when configuring LLVM with `LLVM_USE_SHLIB=0`. I did so because building `libLLVM.so` failed in [some circumstances](https://llvm.org/bugs/show_bug.cgi?id=23649); arguably one also shouldn't rely on Julia compiling (but not using) certain libraries unless when specifically asked to do so. Fix https://github.com/JuliaLang/julia/issues/14921 Maybe turn this into an actual warning/error when incompatible options are passed? ::If you want to be future-proof, you could also check for `LLVM_VER >= 3.9` (in addition to `svn`). ::Version checks in Makefiles are reasonably hard to do properly and in a portable manner... ::This is a good candidate for an error indeed (I didn't consider it because most other broken scenario's are LLVM version dependent, which is hard to check for). ::Sigh... Here's an easy way: turn around the `ifeq`, and check whether `LLVM_VER` is in 3.3, 3.4, 3.5, 3.6, 3.7 or 3.8 (you can use `subst` to remove the `.0`, `.1` or `.2` minor release numbers). ::there are other generators aside from just these two ::I based myself on the current handling of `CMAKE_GENERATOR` for LLVM (from `deps/Makefile`): ``` make # For now this is LLVM specific, but I expect it won't be in the future ifneq ($(LLVM_USE_CMAKE),) ifeq ($(CMAKE_GENERATOR),Ninja) CMAKE_GENERATOR_COMMAND := -G Ninja else ifeq ($(CMAKE_GENERATOR),make) CMAKE_GENERATOR_COMMAND := -G ""Unix Makefiles"" else $(error Unknown CMake generator '$(CMAKE_GENERATOR)'. Options are 'Ninja' and 'make') endif endif ``` ::In the case I added, the fallback scenario could just use `cmake --build`, so I'll fix that. Not sure why the test shown above only allows make or Ninja (@keno?). ::it was all keno tested ::Why the sigh? I know how to do a plain version comparison, but it's not what I would've liked to upstream. Anyway, I've updated the PR. ::The sigh wasn't against you, it was against the fact that build tools we use in 2016 do not support such elementary operations as version comparisons... :-) ::Oh yeah, I fully agree with you there! Let's pray for some progress on #11754 :-) (although CMake has its own set of problems too...) ::at some point in the distant past, iirc, the combination of shared and static was required for building llvm on win64 (a032934d). it might be good to check that this doesn't break that target configuration ::OK, I'll set up a Win64 dev env and see whether nothing broke. ::Tested on win64 with and without `USE_LLVM_SHLIB`, no regressions. ::@maleadt which build environments did this error apply to? Could we backport a patch? Then again we might just upgrade to 3.8 very soon after it gets released. I'm testing now to see whether or not this is also an issue on Windows. ::Only tested on my local linux64 system, where it failed. Looking at the [commit](https://github.com/llvm-mirror/llvm/commit/cd9aae70e988dbd80af933bc144f1c8df431a0e9#diff-54d61d59bfb4db9f734809b8aff1dd11) where it got removed, I'd assume it would be an issue on Windows too. ::",ce081980a9fcca80808407598687cf2498787a4a::6dc24f29a4c67d1a2b8c68e9d3b8a6aee5cc2d00::1bca0eaab43adf1e9e1331bde1e81afc997048b4::dc305855bfd1fee3db7d79bc45f74d541671fa8f::7cc26938f09be9c24dd6d4c2f3cb904ec1d51caa::ef5ab4502ad9b198b632848b12ba60a0b972e241::d8d02ca1e103cd87c5ca5776e6429ffe89069fc6::6310948f711600d566efd41c33df09c8774347d9::b58c5e537449e432cbd7854adac1484e05592a67::735d8406e2539472565a2602f1a3362442d8cb46::2a189f3d0beddcd449a1dce116c738804ed320cf::b0394549dcbd1e0e9c1b3f6416082bc11501e427::
https://api.github.com/repos/JuliaLang/julia,14829,nl/gcc6::release-0.4,1,merged,,"Backport of 63f3edf300e9fea39a1932ee2e8f1655c845361f to release-0.4. This allows building with GCC 6.0. GCC 6.0 has just entered Fedora rawhide, and it seems smart enough to detect empty structs with variable-size arrays despite of the tricks used in the code. This is a manual backport, but I'm not actually sure this doesn't introduce any ABI breakage. At https://github.com/JuliaLang/julia/pull/13945#issuecomment-155913304, @yuyichao said it didn't, but I'd like him to confirm this. There's still the API break, though, so that's not ideal for embedding. A simpler work-around would be a better solution, if at all possible.",3d73e183de559c576c99b0a966a12bfc152577cc::
https://api.github.com/repos/JuliaLang/julia,14618,teh/backport_14293::tk/backports-0.4.3,1,merged,,"(cherry picked from commit 709c867291ef0b4b6637cbad1c4ec9093bbed99d) This is a backport of #14293 that doesn't rely on #13803. It loses the ability to do `A*B`, but it works with `A_mul_B!(C, A, B)`. CC @tkelman, note this is against your tk/backports-0.4.3 branch. In retrospect, in the tests I realize I should have (for mathematical obviousness) named `RootInt` something like `PureImaginary`, as a more familiar example of a type of number where `!isa(::T * ::T, ::T)` and for which the conversion to `T` cannot be defined.",b37abd3dfafe625d988559b252b0dbb751dbe0b6::e472c5afb79799b0b44fa345d325d7955c8f0401::
https://api.github.com/repos/JuliaLang/julia,14611,tk/backports-0.4.3::release-0.4,1,merged,,"Just starting on the already-labeled pending backports. Will run PkgEval once I finish putting more of them here. If there's anything that doesn't yet have the backport pending label on it that you think would be a good candidate, please point it out with a comment here. Not yet here, but considering them: - [ ] #13803 - [x] #14372 - [x] #14293",93235e85a4b1e9f5d9507a137695143128953d9b::69df85a728af4c3c4989dc233d651cc9c0797591::727d41ae4fc28d1c1401c204621424a4d9d6d601::b06c4aeca9d6cff09232ddfa547f0c383d70ffb2::b901098a3be2acaab7811b23a301c45dd51162cc::1e7853d8f181eaa2d0debc1614f20e56b6618a20::b2a1ebaa967507b80dbde4594281e944fcbfcaa7::6e406210916ec243e861b781caeae876f12e74bd::d78cd3db67b8d8731618c440af90a162dd0e031b::4cd00d136ba02843eb15bc8df277ab572247a35d::93ccda0515a70c90384678f55d30a064de817399::cf1aac9a5407cd5c4de444fc1f822b9b1e795eba::300031917b66a733260e1c94d1dc4437f70aff11::bb2475c859f28cf38424ff1de7ebc8d5bbcd040d::02af545126a9a21a5667302c750372d7a02c4fe6::2fcdcbeb0b9a9c98722cdffe4119c85834991441::3d0a0e0113dff3379022b64a7d4bf22e4b69cb22::275231a74f81800ff0e436c52a1076abb70111fb::e91da1a9f4af8663dc5f06e8ce7b4678b7a29281::ad4ec582dbcb3042b075c1bc97a1203ff7f49d08::407e0722a84488b7ec3e2dbbc5b7e8002debd264::85ae4f852e9bae9534401a013e23bdc9a0d22229::ef55dd64600a43884c83a8cfb8e1a1c610b594c1::693a9d9e365439c255e0b37d8141594f5c0a2961::1232380d0ce2e4b27170f47a2cee7dd43829bab2::b2154331c9f2c84789151229a38271a297251625::152e3e38f7a406142ff5f73115fc11caa62c3314::20af3ead643544924e09059565cf865239ee86ee::11196a0c0971fd097716c0cc3f1c14f15533cb38::90b948aefd24f91a58b1fe794a6945cc391ea780::86d5543ad98156636c19f70658b0de1b0097db2c::0aeffc425cc25ff68caf22ee85bd2e758b93e096::f12b49ca14c7e970b51fe14d22edff8d38ab80b0::147db98a43bc9481d0ebbb68f11f91a02ea24ad8::d2fc2c0f7e223e8d69bade8f827b7edb8900a56d::34af337cf338b0f410be639a379b28f0ef3bde8e::5518051ea2772713a2efd995695d8ccb23c13850::2c365af0b28a260a57cfdd8dc0d162d778ec4b2c::27cbbfd7aec2a3d6cba7bc2eaa9a808b86096356::58b22c21e06f7332761dbdac511054fac8275ee6::2875a58394b0fc3e24cc1c5ee0c0fb9768320e8e::90c39a0002857b8279ea169e37fd9e5184453df4::36567e94ce3da5884dc25914edc76851aeceefe4::b90f488ee9033f31c335dad985ab3b8c7b80f087::b4f7de3a23837e2ff23595685da5bafe44bbf01d::b37abd3dfafe625d988559b252b0dbb751dbe0b6::e472c5afb79799b0b44fa345d325d7955c8f0401::bc35739b369b647f62f9199e6a42cd6c12c0a599::6b59785e452cc496af989a4a035536d80ae93489::a416435a78055f584a3b000def2bbace27022403::62fcf2210b53a67e2d745fc5f7beb6ce6e3b2474::961c8f52759f7ed01631b6d13cf2b1a4e7429ae5::
https://api.github.com/repos/JuliaLang/julia,14590,yyc/dep-off_t::master,1,merged,,"See #14555 for explaination, bottom line is that these could be wrong for libc functions and are unreliable for external libraries. Also fixes the types in libgit2, which is what the backport pending label is for. (The second commit shouldn't be backported). The second commit also change the windows `jl_lseek` to use `_lseeki64` since we are using 64bit file offset everywhere now. I found the function on MSDN for VC2003~VS2015 so I hope it's MSVC compatible.... @tkelman Close #14555 c.c. @vtjnash",9e773f95c2db1d203ea8fdeabab251afb15ab171::8f080e6e3a76270fbf04b9506a55f600cce2bc6c::
https://api.github.com/repos/JuliaLang/julia,14413,sb/quantile::master,1,merged,performance::,"This improves the performance of `quantile` by reducing allocations and using a partial sort. I see a 3x improvement for large cases. It should be mostly non-breaking, but it does slightly change the behaviour of values outside the interval `[0,1]` (the previous version was a bit more lax), but I don't think this should prevent backporting. line breaks and should be sure the rst sig is consistent, and rerun genstdlib ::Ah, right. I haven't edited the docs since the a-doc-alypse. ::#14378 moved almost completely away from `doc""""""`. Latex is now denoted by double backticks. ::Ah, good to know. Fixed. ::hopefully no one was using this? only public code on github I can find that isn't a julia fork is StatsBase's own copy, so should be okay ::It wasn't exported, so I think it is safe to remove. ::on master yes, but not necessarily for a backport ::",f6ad90e42b9e69886f407476b0ade0680f165198::
https://api.github.com/repos/JuliaLang/julia,14372,teh/scale::master,1,merged,,"Trivial, but making it a PR rather than a push so I can apply the backport tag. (The added tests fail on 0.4.) I also noticed that `Diagonal` has some restrictive methods (e.g., for `*`), but I was a bit concerned that generalizing them would cause ambiguity warnings for every package-defined AbstractMatrix type out there.",2c534376fd940350a62631acc1a55ce314ea6ef1::
https://api.github.com/repos/JuliaLang/julia,14369,fixrecompile::master,0,merged,precompile::,"Fixes #14368, by always calling `Base.compilecache` when creating new cache files (including when recompiling), so that new cache files are always put in the same place (`Base.LOAD_CACHE_PATH[1]`). Should probably be backported because this is causing problems on JuliaBox. I hope this is enough for slow or highly-loaded systems? Would it be better to do a polling file watcher or something similar? ::This still isn't very future-proof. Needs improvement before I'd be comfortable backporting this. We shouldn't be making assumptions about how long distro buildbots, limited-resource VM's, or small embedded processors are going to take to do codegen here. ::`recompile_stale` is synchronous, so the length of time to do the codegen is not relevant---it only returns when the compilation process is done. `sleep(2)` is only there for paranoia about reading a file on the filesystem that was created by another process which has just completed. ::Ah, sorry about that, my mistake on what the `sleep` was for. Could've used a comment to that effect. ::",06de426da40463a15d2dfeb51f226ac9700a54c4::
https://api.github.com/repos/JuliaLang/julia,14363,reproducible_builds::master,0,merged,,This commit is a first step towards building Julia reproducibly. https://reproducible.debian.net/rb-pkg/unstable/amd64/julia.html Please mark this commit for backporting to release-0.4.,f64ca7e5805b1d220838dc2a8bf37284857aaeb2::
https://api.github.com/repos/JuliaLang/julia,14293,teh/matmul_types::master,1,merged,bug::linear algebra::,"I've been playing around with number types whose product is a real number but for which I cannot define a conversion to Reals. This fixes a bug in our algorithm for matrix multiplication. ``` jl julia> immutable RootInt i::Int end julia> import Base: * julia> (*)(x::RootInt, y::RootInt) = x.i*y.i * (generic function with 143 methods) julia> a = [RootInt(3)] 1-element Array{RootInt,1}: RootInt(3) julia> C = [0] 1-element Array{Int64,1}: 0 julia> A_mul_Bt!(C, a, a) ERROR: MethodError: `convert` has no method matching convert(::Type{Int64}, ::RootInt) This may have arisen from a call to the constructor Int64(...), since type constructors fall back to convert methods. Closest candidates are: call{T}(::Type{T}, ::Any) convert(::Type{Int64}, ::Int8) convert(::Type{Int64}, ::UInt8) ... in copy_transpose! at abstractarray.jl:383 in copy_transpose! at linalg/matmul.jl:355 in generic_matmatmul! at linalg/matmul.jl:465 in A_mul_Bt! at linalg/matmul.jl:168 in eval at ./boot.jl:263 ``` ~~put these in a `let` or give them issue-number-specific names~~ nevermind guess it isn't necessary here, the same file is already using these names above ::~~I wonder how this passed without defining `zero(::Type{RootInt})` ?~~ oh right this also depends on #13803 ::If you want to backport this, we could add that method (for use by the test). ::without the `promote_op` changes I don't think this will work? ::#14618 ::",709c867291ef0b4b6637cbad1c4ec9093bbed99d::
https://api.github.com/repos/JuliaLang/julia,14272,kf/modulecoalescing::master,1,merged,codegen::,"This is somewhat of a rewrite of the way we use MCJIT + a move to ORC JIT to avoid a) some runtime overhead related to MCJIT not reusing the pass manager and b) the memory overhead of MCJIT requiring you to hold onto the LLVM IR, both of which will not be fixed upstream, because they are fixed in the C API. The new ORC based jit is in jitlayers.cpp, but the intention is that both the old jit and MCJIT continue working for now. As a result the code is slightly more messy than it should be in a number places because there are now three possible JITs that could run over it. There are two core aspects of this rewrite: 1) Attempting to combine multiple functions into a single module in order to reduce per-module overhead in the compiler. The primary difficulty here is that sometimes we need to compile functions while we're in the middle of IRgening another function (most notably in inference and in staged functions). As a result, we cannot simply have just one module into which everything gets emitted, because that way LLVM would attempt to generate code for a partially IRgened function, which is not what we want. Instead what this IR does is to temporarily put all functions into a global module (technically they could be parentless, but some of LLVM's APIs don't like dealing with parentless functions), which then get reparented to a single active module as soon as all function in a given call cycle are complete. 2) Being more aggressive about freeing memory at all stages of using LLVM. This includes freeing the IR module, as soon as the native code is generated and freeing the native code as soon as it's moved to the executable pages (both of which we were holding on to). The one caveat to this is that there is an additional copy of the native code for the debugger (for the debug sections, in the future I will make sure that copy does not include the actual generated code). Our backtracing code now shares that copy for reading DWARF information. I have two more patches pending upstream (1 accepted but not landed, one pending review) before this will actually work with an unmodified copy of LLVM, but I expect to be able to land them shortly. Once that's done, I'll create a backported version for LLVM 3.7.1, which we can then officially activate in a separate pull request. As I mentioned, this should run on all three JITs, so the transition should be relatively smooth. The idea is to run on ORC JIT for LLVM 3.8 and LLVM 3.7.1 with patches, MCJIT on LLVM 3.5+ without patches (this will have some of the known performance problems) where distributions refuse to ship our patches and the old JIT on LLVM 3.3. I'm anticipating keeping the 3.3 JIT around for at least a little while longer in case we encounter any major issues (e.g. in packages) after switching people over, but hopefully we'll be able to remove support for it soon. I imagine the most like scenario is that we wait for the release of 0.5/LLVM 3.8 and go full ORC jit on master, at which point we'll be able to delete quite a bit of code. indentation ::add this to the lists in `LICENSE.md` and `contrib/add_license_to_files.jl` ::what was the issue with this test? ::It only accidentally worked on llvm 3.5, because we were using a module per function call. On this branch, everything gets parsed into a global module, so if ceil was previously declared this does not actually throw an error. A lot of this is really a limitation of the LLVM IR parsing API, so I'm planning to redo this properly, potentially with some LLVM API changes, at which point there will be more logical and complete error messages here, but that is out of the scope of this PR. ::there's a use of this in `threading.c` that needs updating ::replace the tab with spaces here ::doxygen? ::indent ::bump, still needed to not break threading build ::`prepare_call`? or do distros not care about llvm34-36 anymore ::ianal, but i this doesn't sound like a valid license, and it doesn't sound like a good situation for this file. i would prefer that any content you add that requires a special license to be placed in a separate file. fwiw, i used Kaleidoscope tutorial as the reference for learning how to write an OrcJIT, but the actual implementation of JuliaOJIT I believe should be considered as MIT licensed like the rest of codegen ::this could just be a warning (not that it would ever trigger) ::missing { } braces here (Julia-style not llvm-style :) ::i'm not sure if i understand clearly why this is unfortunate, but since it is currently in a `vector<unique_ptr<...>>` that will be destroyed as soon as this function returns, taking ownership would presumably mean calling `Object.release()` here ::i vaguely feel like you meant `SavedObjects` to be `std::vector<std::unique_ptr<OwningBinary<ObjectFile>>>` so that it was managing the object lifetime (although we don't actually implement deletion at this time) ::`PM.run` reuse is known to be broken on LLVM 3.8.1. for distros, we should probably handle that case ::this todo was from the tutorial toy implementation. we should perhaps print an error and the IR, then abort? ::i think this PR subsumes my comment here, with its implementation of module coalescing ::in the FunctionMover, I thought you indicated this search may be expensive and `O(n)` in the number of modules that have been emitted. If so, and if you're still looking for places where performance is potentially being lost, this may be one place to consider. ::is it worth returning the stub from `active_module`? it looks like the FunctionMover has a quasi-dependency on this ::bump again. ::it seems there should also be a comment about why we aren't able to use the IRBuilder functions for these ::The plan is to not use ORC on 3.7.1 (without patches) and continue to use MCJIT there. ::Can't hurt. ::ok ::The memory buffer itself is owned by https://github.com/llvm-mirror/llvm/blob/813f44a29fd0fd140127023222d0633e23783bcc/include/llvm/ExecutionEngine/Orc/IRCompileLayer.h#L70, for which we do not have a reference. ::I was under the impression that OwningBinary already manages the lifetime. Why would the extra indirection through unique_ptr help? ::Perhaps, but it works fine for now, so I'll reserve potential performance improvements for post-merge with careful profiling. ::Actually, wouldn't printing a warning most likely allocate, defeating the purpose of this? ::I think it might still be reasonable to change the way we do bootstrapping once we get rid of MCJIT ::Yes, I think that's not a bad idea. ::Actually, probably just fix this in the FunctionMover directly, since this has little to do with the ExecutionEngine ::Thinking again, I don't think there's actually any case any more where we need to look in any module other than the source module (during bootstrap that will always be the shadow module), so probably just ifdef out this check in ORCJIT mode. ::possibly, but that's the problem with virtual address space limits (`ulimit -v`) ::Fair point. ::ah, good point (although, to be pedantic, at this point in the code, it is actually owned by https://github.com/llvm-mirror/llvm/blob/813f44a29fd0fd140127023222d0633e23783bcc/include/llvm/ExecutionEngine/Orc/IRCompileLayer.h#L66, for which we also don't have a reference) ::oops, you're right, it wouldn't. i was thinking OwningBinary was a pointer and forgetting that it is already a value type. ::This was meant to be addressed by the `// ------------------------ TEMPORARILY COPIED FROM LLVM -----------------` `//-------------------` markers. ::",caf3c74426696d43101d9607b1a2cd3a5e05bc0f::3a1d2f7e5e936aede75518820fc5e186ee66ac61::10e98029fdb610c5db46fdbd7800d2e16651c586::7e0629a1d8cc6f2cbc9858c1b91c787087e64172::9fe0f2d3a91ce9e0a99cc90d8eed4e9286e5fba7::
https://api.github.com/repos/JuliaLang/julia,14259,reverse_release-0.4::release-0.4,0,merged,,"The same as PR  #14246  which is added a ""backport pending 0.4"" label",d0f16d48cfd3f84dddf9d39e4fcc252b552ff97a::
https://api.github.com/repos/JuliaLang/julia,14202,backports-0.4.2::release-0.4,0,closed,,This backports commit 4e6d502 to allow compiling Julia 0.4.2 (#14186) with LLVM 3.8.,088cb093b14c20162cd659ce976a5043e0927f12::
https://api.github.com/repos/JuliaLang/julia,14186,tk/backports-0.4.2::release-0.4,1,merged,,"cc @viralbshah ~~still working on this, putting up my progress so far~~ more or less ready I think, running PkgEval now",488fb5a5978589fec4e703203d333f27b859a4aa::b8a6d771042add982a6a8739994c6f7dba2f4461::e1a37492ff1053b114f8cb1fc2d135d25e3669a1::617db6b7625acebb22361c63ab1d898fa3f1e1bc::d8b91c6e42d6fa5aaec0f7c302539545db6fd354::a85dd9f9d99bc159bf3d714c7a2f03916d6a6960::f02e71dd2d97a5b7875b25f86056a5ed02d9d9d7::931cfbed4366ad160a5f0a7bab0f7220535d6490::18000c73f43c3368e3d503279a1b72c969985915::d2c63f4263fff109a00c120b6dfbe2a36f8afeae::81a214f70324140cf88794c0a416a94a3a9045ad::6e7268733e3e5de9543e82138b3125aae72af7ed::5efe36c326bced3a704bb729f9590dcc0399c2f0::d460c68316ecf427954dfb96a11829a480c68105::08d9c7f022c768cce0b1bb6398c8138da10b7eb7::ebe11ae74c90f40c1d0a8277c8bcb64ce8c6d335::6d2b7664652de2c4bf053a892a64b7a4795e1a9a::9ee16ff35852f7d64f2652167411e9307e6a1419::fc193543cb986405b991e2700630d36991390d86::1b6b76198a9c9ca58a00a1aede7d4e71672d6944::53706c3e30991d418a241b9d8145584fa1abb4a4::e880b3bdc188e44ae3801dd2ae095946b3be5cb6::cc31d44afe5e713c8b72c92a0b9a94a191984a65::80724ac1ef04e3da7f2d55aa9fe14c0048f7346b::cd06a1fffb039e19da55052d095f5207be75fe68::4affae3adaa01f3500c2012714ac493a4620278c::5b48286996e36bec7324c497cee7d73b31bd3065::11cb84906e657621141b0a0eb45efbf447985a1d::2df6a670779b030fe69564f62444d02f9366ca76::15bf60d40e37fb9ff490d24990ffc9733a29edde::a534db044ad196f3e249fcf879233653da03e9e7::cb2aa46c794c5338178e8753f929d8cbb9ec0b1d::bb90989b504edd9a25f0fbe466a6270ef8ad7c10::2ceec969c38dad2a2902963761af1fa79bb44026::0e5231f725f71399be8723f689aab53c7281006f::3f76dc2b9a8c1cb810864832a6c3f55e7f63b66d::8623f56dd6a5cfb9629836c4240f9cc24e869b60::6f5177cc7b120e9a3edd6f95c6819c4bdce2d0ab::f40a6111f5bc2973abab58f416d8ef270317efec::8662eec429924df77340510556f69db62ae77895::b411724abfa051993e76a302e73a24ff440ff409::51aefcd2e7f3f09455a71bdf3ea7b266d8ae92e6::0958a89ff015bcb9defffa4095cdf6938514ccb3::d4977944704af9191c55c635e3e1a2b5b0f27bec::6462964cc89d953344fda021e28614765077b5d5::231dd4a7faaf44a3c79613eeb601bdc1ba786ade::8d7683e4e96e5f7921ac625bce114d93e8224f0b::1896a57626fadf99a26fc76f0904405492a6c0e8::eccf2316ec689d81bf26dbfbf0d7a1341bebfa5d::6d5a8598fb0d8d0f284376f74ab8a00d5f4178df::0445b3a23614028167d1c71aa532bee22b770876::92ad0611123b72eb88bf25e2782ad14ebdc1e8ff::90584a9ee01ea5c661d3e035e9d7b306139a9431::7704a2a6200019f578856d32bfa43e9543b09786::75c791c64f2fa6c2227002f357e9532442bcd2ca::7afe152793ce2160b54a9db73cfc8f28ad9f1564::f44129f1f807cdf85632145dcf4f6b218faccd7f::a384f8ef21b93abf2df90ad7be3b2e3e19c7018b::38d462589649b459fad3b50d799445f92523f76e::ac98b71e294a4a462fb4f9a85a138a9553c89d4a::735fcbfffab9fb3b39f3fafe4b59223cafba796b::a308e191629f7ab808372069cf588aa97ad69752::13b6b3aa52ccdca19ae7fd23f88751c4e3adc387::5e8effe7763e90b2007175dd21cc15d39fdac4ad::040435b3d5d45a3ac268f0f2f72b63c5aa838cf4::89594489a893acd2bef54be9a305b67c019c200b::cc14a34c65214eed837e9bc51339540d32000cf5::adf54faf126a97c7e67a3604e07eb9eb737090b1::95368ee47e1b4ef011f23027270156862e0b4ac0::5603ced10e5c72eee39f4fb98291d7abe5122129::084a9adf534d5569f08273a5de41caaf543838bc::06c9fe39da094c5c80d534ae8abf1700734708f4::13a68a051e24f54b5680476531c973bad6720f41::dcf67a1b9a104af7d07456538da90bd58aea833d::b3dd88b73139fb957a01ee94c6af2c8d574f00e1::38be33e9c36a836917022f665a0d2bc74fe69546::456f38d43367b47019483344b6f7bb5baeb1d393::bf4eeab288275058dce0658fd45f50e66371f029::8b3c67bc46a093ba50472ec527a677794a3481d0::1085429aef0f1acff0021da1bac7234af822bad7::2cba7572f78ff001d17de5bace20d5364e872271::4d20f125618d099642bdba863ca7848072bc6306::4c33ac6aa66f70c413d20d4ad005c6521bf36ac4::7c7c66f5f050aa1a741740f15565cae6f5df2c94::64f167f3ff81c5beca1c04d001d878469e01a9ba::cbebbb71b58531c6aa00906188363886955acaa0::89386b47c0d27a86cc3c3db82f309039fbef29b0::b8382ea4a9cd32ea7f2245b77c71a57de60c0d4a::af1cd90c33fc40777ed3f0cd501ec21b78b77e71::084c906305f91862ba8867ecb82623d59069fcdd::906288e320330ccb90531b14a5b8730b49182c42::b938804443a1333f3c2b5d5d698f12f7f3974854::74a3188bc0916141dc4d62bb49f5d70b0aa5531e::783c2de7b5119b7ac2aa8630a187879214893a55::10defac13af8d4ab5b0d9beebcb66da5678a914e::fa54d2290aa85f29f78b1a859b88bc04c2ceb902::3202b54f8fdacc086db43518bdb88505dbdc84be::9f8ec24adba6a8360ad4d0a7e0e10d22b9941db7::74dcb330dd76ecad44739dac36229616d71ce557::f9d049bd226f0f754c33dbdc16f51779cf45b449::0a268e7deb791c72bdff5fd90e1f020da074ea67::09b44c2abf9ad7a23766b5916aaedbae6831aa74::bea4d83a67565eafb9b19e98c4bc2835f86cb3d9::d0af15f7249aac0ce4e937e23cf93eef28f62fdf::c49006707ff5707186ee8259e57be9af7dffe6eb::652d1de4aec0ecf19375b1fc412399097936180e::
https://api.github.com/repos/JuliaLang/julia,14049,warn_to_index::master,0,merged,doc::,"It seems that 99% of the real-world usages of floating-point indexes (deprecated in #10458) arise because people are using `/` for integer division when they really want `÷`, but the latter is not very intuitive or discoverable. See also the [julia-users discussion](https://groups.google.com/d/msg/julia-users/sEUvnjvtryI/tH9RHJENMIQJ). This simply includes a suggestion to replace `i/j` with `i÷j` in the deprecation warning.  Probably should be backported to 0.4.",d2ad66c18af9face68d33ba06ee2a5d44ab6e367::
https://api.github.com/repos/JuliaLang/julia,14048,release-0.4::release-0.4,0,merged,,This backports two commits that fix the backtrace test using LLVM 3.6 and 3.7.,74a40e352d47627c46ed0a66ddfb8afe6cbe9073::ea6bbcaa110ce00b204b6742359a461fc0361d27::
https://api.github.com/repos/JuliaLang/julia,13973,teh/docpkgs::master,1,merged,doc::packages::,"This is in addition to, not a replacement of, the detailed description. Hopefully having something brief will lower the barrier to contributions. It's possible that some of these `Pkg` need to become `PkgDev`; really I wrote this for 0.4, and we might want to backport this first and then I'll make changes for 0.5.",47d4569e8a8372ca03c557f19c43a09f33f271e4::
https://api.github.com/repos/JuliaLang/julia,13951,yyc/triple::master,1,merged,,I don't know how to check but apparently it is included/backported to LLVM 3.7 since I'm seeing this warning on LLVM 3.7.,3e192e2c2d5487465c659333cf99e1b793f347b4::
https://api.github.com/repos/JuliaLang/julia,13837,yyc/doc-fix::master,1,merged,doc::,"Also update `genstdlib.jl` to print out the file name in the missing doc warning. Ref https://github.com/JuliaLang/julia/commit/e08d9797156ceef2ff86032a26be39fa2fa70ca5 https://github.com/JuliaLang/julia/commit/77b2527fd91878d69d69908b60c29d977d2f8e92 https://github.com/JuliaLang/julia/commit/ce21e42b58577670c2ab81da26b53fef51ac8a00 https://github.com/JuliaLang/julia/commit/62027cd50a1f67b5a81be4c1ecf4a829d278e589 Mark as WIP because the doc for the new `qr` method is refering an unexported `qr!` function. Waiting for @jiahao to decide whether it should be exported. If it should be kept unexported, we need to update the rst doc so that it can find `qr!` function in the right module. (or at least export it from `LinAlg` module). @tkelman This (and the corresponding rst update) is the only one could be backported to 0.4. ::@StefanKarpinski This is updated automatically by the script so I assume it's valid. Just to let you know in case it's not. ::mutates ::done ::",41c29b5982e5fc22dd9105be401500cd8aa35515::
https://api.github.com/repos/JuliaLang/julia,13834,tk/backports-0.4.1::release-0.4,1,merged,,:steam_locomotive:,0b472307d91d6befdee29a9e75716439ee67c8b1::192e140b8aec7fed0f3685ecf76589560dd122b8::b792604fbf99eb1094fd721af21177ff962f2ebc::8115bcd803aba6fe46923b07b7c7be67ffff7de8::b5ea3e12e1ffe2319c30fb180bf1933df06a3676::600f647405db76c21b5cae670bc270187a1d799f::63de70ab29addf5a9212deef5edee45044edaf22::efdcbf5661b531ee5dd0da89e0d88a16ca87f22e::33e117970801f797b2de6eb6ffd01d693d570e55::78d57013c0ffccc09946ab8da689e739d6859ba6::3b83b4b73936410b0b7972f0f36b3eb6215e97e2::6e02d3c800639942e516cfe891722a58437cd798::a80e901796033bf4444ff7273e49138c7766bd7a::61bd76363f02c627d7d764dbee00a0ca7a7d7749::f26ba6c6e4b599ea70292b4e9b2061d40fc08ee2::20edc62f4b0cdb1c02950e232dbf423dd0a12343::6b074d0eabe633a47a9f3430d0712eb060325bac::925ca743ca3ec7d3f842cba415244a704d291efe::6446a16264b43b21c5aaad33f5d130af3c80191c::fbe97b145866c9f7e04ce61ba43a9c56b920612c::68bae30a9421fbc433c16388245fa9a00df59c09::930d63d39fce59ac14d3339fc307b3920273d0e1::df0647e62987fde546aabd59134321f5219a7636::083a4ca3ea59b9464f4c733deeb0b0a82237be05::144fc26b3f1e7189f6fbbecf6d19b41207c1b4a1::656f3b2735644c15aa1a89bb583100fbfc302b33::76379cb3c428caf4814556bbb0018ad9f6a63b1e::085a98501759b95569563ce46cf9360f4030b57a::57ab2f6621c0f1ad68ad4453c10d173eb7e6410d::94f2a50a0d9f94ae1db501f814887a51c66273d7::664639755861bd04aa1f9878d77c01ab83eefdba::fb728f012a9c4c88f7ac586c7d9afefff6fdeb03::f51d239935b654ce461b0eb4996349ee6ffd69e9::1083a968950ddde58477a6549503fe8234779d29::3087de3c16ebf48d278ab4101608a7c74c33ef34::86d67f80ad505ec74356197660917d0d13dadf98::1f8a9ae616c07bdfc16318c821fb997554ea59ec::05a53d2c1f63cad9101a2a7ef6a45fe13b5a2348::6a02f0a3cbb32f1666089471cf64335cbf5d4ef7::d44e492256e381aa43f297918ea77f62ec863702::fce7beba598e50bb2e14905d276569d94537769a::66f21983fd80708a99dc74eccc929a7ca8e06055::be94078e0012dcd67f692320e61216e57c21807f::52306908f7a197b977e8b77caa246e547dea5a91::5de699bc6a68e0141bf157d6b4a092b4b6c81d4f::d91a6d3410ee21af9ca56e55bfe4b4c40b7d46b8::b6b590d38266fa7953209890f87e5de3e5396fe2::2b8a82741e7ff95083fe20fe2812d93be665c71d::f8b8457d596927fd9fbd933bbb5d45c0e6b1ac1b::d5e154c8d9a050fcf2c3c351fa6275f7dd3b0291::4b5626da90a661468844833829d2924fd761960d::70018be2da560a75fb0712fef3f74c8db7a439bd::4bebc9c6b9f1fe3eac373ab941db9dfa37770790::a3f7c1fb6069c1814eaaa8f250c6ecd07ce53750::1fc2d8e95c9dc1c516a376feeb66399e50a27381::8962141ce66bff8a31c5c73df82fbfc5ed535a85::fc584674bc34c0b75988bd611a81210bf64ad969::cc0760088678b410a6a472200aaff5d4c6b74d87::ecd449d76d32adfdb1e75aec3371f1e4a1525158::dc304293df428d9ede817f7a5ddc449186e17426::a80edbd802040655d9d7d8993d328a8e6c37cd1e::c2838ec3cfdbdba2e82f2f69e14fbd089cea441a::c86fd111c0ba937ae0084562e68fb194eb47479e::c671ba3ce76ca5f388718fb1a7cf1bf015bf0400::f975d61bc8741bb7f55c63af67bce4aa44a7abdc::25ab1445c679ecdebbffa8c3c0fc029023fb0b7f::b067510a20029b8d3ff5a9e1fbe01af585049ab2::5b0385d052b08cb78b8a81ce726eeb6577bc798f::974bf15bbb3e66278d3d71ac74ae19dd19859940::0e883ce605ce658c3277baa57ea9495fe3b85b42::18a5a8812814b2177aefb750137e97126e934baa::bf64d500148fad8880c4bd2dd2b4aace2fbec1d3::4550dd66f7e89762967f5b3fcb5c161ef7ccf9de::e57343606a0945ec7ea5c814012c7214e6a3e963::6c2b4ef3860bb0fba401963d392b669a1d588f77::116a6cee2bed8405f0bb5828f6e187ad3160c605::8b243ec682402e1a594dd39e075d361b059969ff::00db0ff5d790d4ed9f3325895bc7574b7e7d43a7::696771222ab137e892be1250ce5a0ac76b6abdf1::30c5d8c3fdf6829040632114c3152f38de1a4571::fa24a05f7f3421874dfd4bf1ac077a7cfdec3491::db51f983432df1468e9c0dd15bf7dbabc3bd0050::ded13809d194f2ef2e2696d512904545aa605fc9::d52cf62c794266bba9a40a29db298373c55cc83b::4f9cbaaf86dba9aa253c6d8737d313df5396aef3::6fa0f6eb4e1fe0f3110d0bda4e55e442839e0dc8::04f3d15665a0cf4f442fd2fe4bd5c10c62de61a6::c57eb1412437426b3540427b3c703d791e38180c::d01197518a41d2b81e72b5e5f388274826de99ad::61230f20a7674bd76fdd1242cf8be540e893b0e1::5f45e8c316b2380bdb43c34523a114db0c7af0da::cc07e6e38a79a2809357945a66f90ab32c7e1674::d651e4663cc96cbd570b0ba2796d3c751484f32b::dfc19042c117f5579814816ccc9efe4a24036e05::d9ff642a3fd5640b18b35a4821d4fa9991014b11::385ec5af8a9683268a3947bd78549b2b4ac3d653::
https://api.github.com/repos/JuliaLang/julia,13808,tk/bumpdeps::master,1,merged,,"bumping openblas fixes #12907 so should be backported if it doesn't cause any issues. MPFR and suitesparse don't fix anything specific as far as I can tell so we can leave them alone on release-0.4, but may as well use latest on master.",d73a8996215060f1851918050b8d28a9ddd8ee5e::bd040da82aff9d87a5c90e4fbaae346817c02af3::
https://api.github.com/repos/JuliaLang/julia,13803,teh/more_promote_op::master,1,merged,,"This makes it easier to support these operations on AbstractArrays with generic eltypes. Any idea why this didn't need to be `Base.MulFun` or explicitly imported in `base/sparse.jl` ? On release-0.4 this causes a test failure unless it's qualified ``` ERROR: LoadError: On worker 4: LoadError: test error in expression: full(factorize(A)) ≈ full(factorize(SymTridiagonal(d,e))) UndefVarError: MulFun not defined [inlined code] from sparse/sparsematrix.jl:1026 in full at linalg/ldlt.jl:82 in anonymous at test.jl:90 in do_test at test.jl:50 [inlined code] from /home/tkelman/Julia/julia-0.4/test/linalg/dense.jl:123 in anonymous at no file:0 [inlined code] from essentials.jl:112 in include_string at loading.jl:266 in include_from_node1 at ./loading.jl:307 [inlined code] from util.jl:179 in runtests at /home/tkelman/Julia/julia-0.4/test/testdefs.jl:7 in anonymous at multi.jl:908 in run_work_thunk at multi.jl:646 [inlined code] from multi.jl:908 in anonymous at task.jl:63 while loading /home/tkelman/Julia/julia-0.4/test/linalg/dense.jl, in expression starting on line 37 while loading /home/tkelman/Julia/julia-0.4/test/runtests.jl, in expression starting on line 13 From worker 4:       * linalg/dense ``` which makes me wonder whether that test or the underlying code paths have changed, or if this line is missing coverage on master? ::It should definitely be added to the `using` statements in sparse.jl. Do you want to add that, or should I? The error is really bizarre: according to https://codecov.io/github/JuliaLang/julia/base/sparse/sparsematrix.jl?ref=9eb74d4730961f52b37ccb8cfdea3b21455e7365#l-976, that line is well-covered. ::I'm changing this line to `Base.MulFun` in the backport. I'm not sure what's going on with master here but I'm moving on to other backports so not thinking too much about it right this second. ::",82f9a210aad41d81636b82618ac7f8923ade6c79::
https://api.github.com/repos/JuliaLang/julia,13778,anj/arpack::master,1,merged,linear algebra::,"Fixes #13709 and #13768 this is technically breaking and iffy to backport ::Yes. That's true. We could backport the promotion commit only, or assume that nobody relies on the internals of `ARPACKException` which is probably a safe assumption. They are thrown very rarely because we capture most of the errors with checks before calling ARPACK. ::we should just define `float(T)`, or `AbstractFloat(T)` as suggested in #13445.  I hate this kind of `typeof` construction. `float(T::Type) = typeof(float(zero(T)))` would be a decent fallback. ::",e9cabd35d4b9a24391c4d72ee515e4d136f43191::fa006bcd3dad533ab1b789fed6e7a042b172c622::
https://api.github.com/repos/JuliaLang/julia,13765,kf/backportllvm-0.4::release-0.4,1,merged,,"This is a backported version of some of the more recent LLVM 3.8 API changes, as well as the initialization bug found by @mdcfrancis. With this people should be able to build Cxx.jl against 0.4(.1 when that's released).",6e9da44b2f556b171c57230c3a2b05851b4e8fe0::c95e572a6d5f9e52ba5ff3070568de0f5535b5db::21896a5bf6aa73e0c628000c4dea8bbe0ebdba8a::285166e567a885eedf78a693d2b71c72cfd6531d::
https://api.github.com/repos/JuliaLang/julia,13718,tk/backports-0.3.12::release-0.3,1,merged,,"Been a while since 0.3.11, we had a bunch of 0.4.0 release candidates to worry about. Since there are a few commits already on release-0.3 that haven't been released, and a few more tagged for ""backport pending 0.3,"" figured we should probably do one last tag. I'll build test binaries from this branch and run PkgEval to compare with 0.3.11, make sure there are no regressions at least in automatically tested code. If anyone identifies any regression between 0.3.x and 0.3.12 at any point in the future we can put out an 0.3.13 to fix it if we need to. Please do check my backporting work. The only PR with the ""backport pending 0.3"" label that isn't yet included here is #12645, cc @timholy and see my recent comment there. I did just remove that label from #12934 and #12607 due to cherry-picking conflicts, but could be convinced otherwise if someone feels strongly.",2b5649aab4c8bea071271558ccede73687b0a985::4c2e29797729fd0b7b6d7c1247a6a41e20ff721d::ebcc06f1be3a7135f66954e076aa7793d16ecddc::f3323b65e423f0450807f38d4ced841d3afebada::610fd61873083a035fe379184b83e91ba8affdb3::fb032d893bcebafaf6a67b7cecaef6290436caa0::8837f5ac5890f7ec198bfc51a4269320cdd287da::f05085651142f4570fa09d6c36c655c116aca3fd::
https://api.github.com/repos/JuliaLang/julia,13637,sl/findminmax!::master,0,merged,,"Also added tests/docs for those functions and exported them @tkelman the bug was here. the `initarray!` function expects one of the `Functor`s, not a number of type `R`. This should be backported ::Thanks. I don't think I'll export it on 0.4.x, so will qualify it in the tests. ::",2bf78187ad150b9eb6c6c6fd3fbd10fad3368e74::
https://api.github.com/repos/JuliaLang/julia,13509,tk/wingit::master,1,merged,windows::,"from upgrade to Git 2.x (#13494), causing failure of spawn test on appveyor also remove busybox since Git 2.x makes it unnecessary edit: to be backported along with 09c9a195add174e1f7f141703caf8a74fed6f1d6",c18d2716626efe4f599dce3ee8ba79369d006d1f::
https://api.github.com/repos/JuliaLang/julia,13461,yyc/setindex-return::master,1,merged,performance::,"This is a workaround to avoid the generation of a GC frame store when `unsafe_setindex!` is called directly. The problem seems to be that the type inference is not able to figure out the exit point of `@inbounds return ...`. (Or more precisely, the second return is never reachable and the result is not used anyway....) ``` julia julia> Base.code_typed(Base.unsafe_setindex!, Tuple{Matrix{Float64}, Float64, Int}) 1-element Array{Any,1}: :($(Expr(:lambda, Any[:A,:x,:i1,:(I::Real...)], Any[Any[Any[:A,Array{Float64,2},0],Any[:x,Float64,0],Any[:i1,Int64,0],Any[:I,Tuple{},0]],Any[],Any[],Any[:T]], :(begin  # array.jl, line 306: $(Expr(:boundscheck, false)) return (Base.arrayset)(A::Array{Float64,2},x::Float64,i1::Int64)::Array{Float64,2} return $(Expr(:boundscheck, :(Base.pop))) end::Array{Float64,2})))) ``` The code above generates a pointer local variable and disables SIMD. There are many fixes/optimizations that we can do to avoid the store in the loop at multiple levels but I think this workaround should be the safest to backport to 0.4 with minimum side effect _(**not** necessarily 0.4.0)_. This is an alternative solution to what's in https://github.com/JuliaLang/julia/pull/13459. It seems that `A[:] = 0.` still generates one allocation while `fill!` doesn't so #13459 might still be good to have (or we should find why is `A[:] = 0.` allocate and fix that in general). (edit: It's the splatting panelty, see https://github.com/JuliaLang/julia/pull/13461#issuecomment-145694521) ``` julia julia> @time fill!(A, 0.); 0.008700 seconds (4 allocations: 160 bytes) julia> @time A[:] = 0.; 0.008251 seconds (5 allocations: 176 bytes) ```",bb247cfef7e4fd920c04398262684790d9de17da::
https://api.github.com/repos/JuliaLang/julia,13437,anj/amb::master,1,merged,,Fixes #13430. I decided to revert the last cleanup of the triangular multiplications and solves and redo them here to make backporting easier. There is something wrong with the 64 bit AppVeyor build right now so this one should be ready for merging.,e4582bc77d687af783fdb92887c009843363897c::127ee86b89de9e968e1f90cf43483b1368dd3d6c::
https://api.github.com/repos/JuliaLang/julia,13407,rename_openblas::master,0,merged,,"As discussed in #8734, since we rename the openblas symbols (we add a `64_` suffix), we also need to rename the library in order to avoid conflicts.  This renames it to add a ~~`_64_`~~ `64_` suffix to `libopenblas`. I'm hoping to get this changed upstream in openblas (xianyi/OpenBLAS#656), but I want to get this interim patch in Julia in the meantime, as this is a critical bugfix for me — I'm getting a ton of people on Linux who can't use PyPlot (stevengj/PyPlot.jl#140) or other numpy-based stuff (stevengj/PyCall.jl#65) due to conflicting `libopenblas.so` libraries.  There is a workaround with `LD_PRELOAD`, but it is awkward and daunting for new users. (@tkelman, any chance of backporting this fix to 0.4?)",b0bc951f301ebeaeede9faf6b7199ffdfcb09bc2::
https://api.github.com/repos/JuliaLang/julia,13357,tk/backports5::release-0.4,1,merged,,"hopefully final, anyway",bb744fd14f01223961b0d2c74229a0ce001872e5::82e3ac81d6779240a4b00c384953c4d72299d6ab::4a9f00c65e4ec9fa1ed32bf0c615512f69be7bb5::6ec9c2258196cab2915a258c4ac3762bb002bdc3::cbac18e6036737191a0002bca30a5734c2b0f18a::ad00e480266950729a858b062a2fe3dd364532dd::009c368f9fbf4d5f3aacc85cce3b2afca6b8cc83::e97c0f86be39ae069f5b852cbd5c458638768fa8::90732c41c6ba04f4fe43ff7c96bd06ee9f7416e3::13b75de59adaa3daf43f4227fd8c1b7b34b0d0c4::035c10ddbcb6485279863817ff3accd8af7ac460::1128b7e4d5f306966a89942ba6b66edc6ec96937::00fb151c7c05dd544f540f38c6b13773a1f703af::58d4516e5c913120e4cc3fda15c86b84c6af72e0::64c53234a1f006e372b8364b12e0524575cbd748::3b72a695b043b9968e2d80674de3c2a4d79a058e::26388f087a0d221b210f0958d600493a5fc641ad::2d0238719ff309e5bdf8e885ceb4469a491cd7b7::06ec851db49788a92032f7b274d07e87f6404604::c66b2943e1982a209a8c14b17fee07b85c1085cf::0e156e3ec37c0f3aa7dadac54297ad77072e5f31::0f09590490420a78e5d4e50e1e145fc17332c678::a1766aa28302072ab3b05f2b04c175034d02aa38::d3536a390012de2e1f93608becd3741db058a304::3cdc2c662fe3a368d4a9c2407984f69213e16dd0::457071cce8e499c47e7374ea98a63e5d3befbdf7::fef1fb825c7d0775c0d659fbf046f3b1a4fa9783::ce93cfe975f2e5da9be61e496bbac981e0ad1f65::259b2a31bf209a7c633e49b5742238da59e86374::440c8c714052051d164bbc424a26317dceab03d5::1f3a6b713479a54f0ac1a9841dea78b8e9d6e22c::6be2c571a4f8e03cbc0587072a48caeb319332fa::020adbb7561ba91da3c4f250bed13a8ccdbfa838::4fe4fb5c44a2ef546e00f19e67426c2be1f9322f::5f8ff74ac8221c51943fbb8f0d168f8365a42d83::ccb7934e9ee4d38ab78cc5756bf781ce8bed70ba::af573abd92872822215d5ff0f98d04b6f599849c::1acbba289854a3568dd6c47dba69f46e0deeda03::19316816f9dbdc9bb7a8389299651ffae95a87d7::778c5d9055bdc8d4dc61af89050b8b3ee41bd57d::3b45467d89a6a1d1af11a2d831de396c2a9546fb::00579f76bcd61a63119d44fd14c9edf55efdacd1::125509a6687591c9dd4ea0e4dc2845b364b0b5d3::1b4308f87304de576fc058d643ce2b8176ea6691::
https://api.github.com/repos/JuliaLang/julia,13289,tk/backports4::release-0.4,1,merged,,Anything other than #13269 left that's release-blocking?,48cf35e97a20491fb1bdc1949c0f5a0e142fe684::25b4c0f5b9fb2a528c1a93df8c5e2e82a9958ce8::798f59d64d7ec6e3e1aa4f7efad03567df9ceba4::674af6c73aabdcd97cad833b290c3266c3f245f4::675920c21687303291a3b2e2bdac5bdc7d26e864::09f56aa7e7592d1d386b4e4482c8304a2807ca67::f0bc6ddc39dd4cfa5035161a1266ff9892342f49::1bfceb0c38e1a41bf9c5886cbb992334eec33df9::6f8fe41ac3384eb696b2a7cb5e6ef545570570a3::5e4098b04d94bde4ea2997c20e81c3811f2887a9::a27a9aef8d3ec0079bc10427f9c2cbe55a2f6cbd::0cb06e4922f7dcf96bcb9b3d7fd1f28864ff04a6::d57d91561835f69142e604cd0bbb8e06ebef155f::6b88ebec00ac1ac6d8804d919ecd2c51bd671d9e::3be2e00db34d23f5347202555ff308eed326fae2::73a718923f340c98c67df0d15bcbbe6c420e05cc::6916dc216ed41f2893961b4823f32644cb3bff17::14fb0a7177c387afc8cc3df77f368613eb3b9b38::ad4a9615d6d5e9dc8a17ce243033520e7f0e1e9d::ae847dc3b947c306f0422bb168d539efb4472f01::65557497111ec7431aec097ec72ab7891f2bee63::297862195d74b2ef586776656fda6b9742176557::0dcde3b49b435e525c7a29be824f5befccb79206::09db424478eae0104abffaa8141fc57059ba4ef9::71dde8b6583489d4cdfe65689440f6f6bcf8b612::b05849f42d8d7e65a51564395f36e9c6caeed0f4::80e9af6f498d191fc26729682720127251716490::0b09c8acf448a3c8b70054d180c8cbcd9536a8a4::035d559015ea2deadf1e03694ce1f6dccb4d6c86::
https://api.github.com/repos/JuliaLang/julia,13203,teh/more_eachindex::master,1,merged,,"I wrote an `AbstractArray` type that throws an error for linear indexing, and in the course of kicking the tires discovered a number of places where we assume linear indexing (but shouldn't). This PR fixes those places I've found so far. This could probably be backported to 0.4, with one risky exception which I'll highlight below. Please discuss. For fun: my new `AbstractArray` type indexes each dimension from `-n:n`. By overloading `eachindex`, I was able to get surprisingly good results. From the remaining problems, unquestionably the most important next step is to define `eachindex(A, d)` with default value `1:size(A,d)`. I am likely to play around with this in the near future. This (and its `findmin` companion) is the breaking change, because for `LinearSlow` arrays the returned index will be a `CartesianIndex`. For 0.5 this is probably the way to go. Assuming we don't want to change it for 0.4, a backport-worthy solution would be to increment a counter in the loop and return that instead. ::Heck, `sub2ind` is fairly fast.  `iterstate(x::CartesianIndex) = sub2ind(x)`?  It'll probably still be a net gain for linear slow arrays. ::`iterstate`'s main role is to strip out the `CartesianRange` from the `state` variable, returning just the `CartesianIndex`. (It's been long enough that I now forget why we put it in the `state` variable, but I didn't take the time to remind myself.) ::Ah, right.  I had forgotten about the more complicated state, as well.  I think it's for special casing 0-dimensional iterations.  `sub2ind(iterstate())`, then, yes? ::Looks like `Base._sub2ind(i[1].stop.I, i[2].I)` works. ::",7bcc9471ef1988fabf7b7cb66aef9fd57ac7af1c::108d72457f5c68ba6c6bab311690250c525f2f7b::761e20198ed7bfd39c32ee4ed293e852ebf6e686::
https://api.github.com/repos/JuliaLang/julia,13182,tk/backports3::release-0.4,1,merged,,"Will run PackageEvaluator on this, at the time of writing this is everything that looks ready / necessary for RC2.",0dd43a7483cd676e61d82cdae5e67ebe7f181eb5::02a885db549252d6767bd23afc5343501fdbca6e::abba461c1c098841e9064079a694cd04f5c6df5e::2b69ef6662aadda2dd26f2e37168fa4f05559153::dcd7ffc119760c0d542d3f042320f1864ee8cc60::fc83771daeb699108cf01eb1597752aac33fc8ef::fcc4eb7fbd38517e946c1a4878135418324e4fe8::a6cf1d3b0575dfc51d19de9491736674b20d026a::73e132cbd9b759a42d9a93514243dc439658215c::a89c40c59f0ac84d9afe03cfd5af9ea57211c630::f7e35900b63ce46675f28f59905f80e6ab54a2c1::79ffcb6ab9437750225408b8a93d18a31f645a26::18d15076197af8254a6f6aef97d9516a95f41ab4::2ad9701ac94b3fd58b0ae73dd1e822b568cdbf0b::35969652e9df480650fe6064eddb273a7cda73b4::2b71231c83dd3c31148978a03b1f471e8233aa29::0c3dd7709cfec915803a805b13b05d2ff703836b::f972e6ae54213d5b1257249d5a592acb60dfadbd::efe88f37e6b56330af52f20ff27156a99c945549::abcc5fbb4b866a9923e90b24d84a62193a74b90f::da6e9faf5727005490a5c4ff5fd4517d363b8d2a::6457fd3e24fafe65284be7200104a42073c06fa0::1c584eafb90e95a2ab4d8e5c071f660b5cd8939c::df6db8bf95146778bbfddf78b4a68df7c27b4cee::
https://api.github.com/repos/JuliaLang/julia,13170,jn/git-externals-head-test::master,1,closed,,"I think this should be more robust against failures where the folder gets created by git, but not initialized (due to network issues or interruption). (do not backport this; it depends on the jn/makefile_o changes to add srccache/ since it is dropping compatibility with old existing .gitmodules)",049ed7b1ef8ed0d24876add5c9da4aee730d6a53::
https://api.github.com/repos/JuliaLang/julia,13159,s/backport-md-fix::release-0.4,1,merged,docsystem::,am I doing it right?,edf33373f45c568f45e3572291f9d5784e5340ed::
https://api.github.com/repos/JuliaLang/julia,13147,yyc/type_size-api::master,1,merged,,"This is the part of #11888 that breaks the C api (but not julia API). We need this (or maybe part of this) before 0.4 final if we want any part of #11888 to be backported to the 0.4 series. We should only use `jl_` as a prefix, not `_jl_`. ::I'd give this a name that looks more temporary, like `DEFINE_FIELD_ACCESSORS`. ::Julia.h is public so it should still be prefixed even if later undefed to reduce the chance of colliding with defines from embedding projects ::maybe steal a few bits from the `alignment` field (which should never need to be larger than a byte) instead of adding another 32-bit word here? ::Good idea. ::I'll do this after waiting to see if the AppVeyor failure is repeatable. ::Done ::C++ doesn't like this unknown union ::I guess this union can just be removed since the members are all zero sized. ::it's not valid to have an unsized field that is not at the end of the struct, if that's what you are thinking ::zero-sized arrays are a GCC-extension anyways (https://msdn.microsoft.com/en-us/library/79wf64bc.aspx). ISO C99 requires that you don't specify the size (https://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html) ::",f4ffde64fe950d5ec102817e2fa84219f872c349::1d963c55c8e08e92d568efe85de0dd9ae9082405::12fa893179e140a6d50f6bcc3f8d78d843993985::2b00b5ef7cf362627873fec80afa504a69c33791::a0a1946fa9c7b26737dd5e7f0a83808e015518b6::
https://api.github.com/repos/JuliaLang/julia,13107,tk/backport-rollup2::release-0.4,1,merged,,"~~The fact that we're backporting almost everything might be a sign that we branched too early, but whatever.~~ Will run packageevaluator here too just for kicks.",9212f3d4290716bbde07ac78c4e305e279634a9b::acacc1af1521ddeb94543ca209a07e73be90685c::3b43bd856b4d132d7aacba59ae2e1e0b181fb958::3c02d6bdb2dc9a1afb7053980ff0d77c28c05259::03925135b75c5c2f3b1c2aaa543aac272f03baf0::07e0370796341551241cc0dec1f5fae31f222812::b9ee208d2810941068add3c1f14ad9704241f168::08d9abb1a3b70005b8167d60a2167497253e0400::0b1fc453a0c34672da2295ea4f6eaeb9febaf0d3::20fa35313bcf99a26ebd828f49245e1856bc1132::a8499dfb58c306d9fe557ff9fed3c90164876e9c::f2dc24e3768fabd92d05b53a8ef348353ebec27a::c7bd4eee22dfaea052b1241a33104a086a24588b::0473ed04f68087c47c7b67aa51d58c0bd3110122::ebc24e8b8e1f9fe9d7988d63fc4c1cf74ec8a63b::5369837fd6950d523dedbd59dc13946651afcb55::ed90cb2fa33b121ca5412b3215f7229c7356aa0a::58a18eb6f60eb254d43c749233fdcb67f50414fc::40b7a447d0449b42ad30e6d2baeae3c04b81718b::1ec808d4fac44e2ed40ce30affd1eb1b4731da6e::a265f490d634b0293e369c633df69817f0363c1b::4fad1d9d26de13a8ba1cea0c5dabb895342e3210::5fd1844fb57a157add6a6a220fb1566a568cad83::737ae231aae3ae82a4bbd5fb7758f69b64c903f1::cfb437af4eacb9b2dfd0f7f3365f97e20bb7ddcb::e994ac943114cb89e56e208e945855cae43171f4::27b5d9af268b837a0c9c09ea991fa04da7de5b7c::1a817e6ff777c5bd0e97bd06030740606b871adf::06c10cb6bbae5492882658308841ac77e73ad49d::f6e6a0ebe621734d9eca479ef145608146c8c144::d4701378cdc990fd73837b9e272017553c72866f::
https://api.github.com/repos/JuliaLang/julia,13072,tk/backport-rollup::release-0.4,1,merged,,"Doing this in one PR to consolidate CI - I also want to try running PackageEvaluator on binaries built from this branch, so don't merge until I see how that goes (we shouldn't need to do an RC2 for at least a few more days).",c0be97e75393dd9cb038347fe55f42f22458edda::fe8d92fdbc7a1ffff5fa0c815347f7c37f55affb::4d6ca2f0041b54ddb6a68d9a0111a7595b1e5774::89a7b9573a4fefb737c0d367128a0a40f50257d4::43cccbcb795df344a9fe0e9c4298bdbedb160fa5::d35b1bf8bd4580aa79f0accd55a1269307e65a08::624e558c05932430e2006fed5bac8e61f7b0e8d6::f35a6ff316ea51236ff7f1f6c5c1a13cdc583d24::476c0201a7820ba9dfb32e4aadc20dd3d14dfaa6::efe89d33a585b7e67cd6688605d0d7c05b4e561b::4a701f5da6a5a99c658334e257c312c3e5aa9b00::bf70cbc73c81f08a05d3bd6efa2da73b0d05f852::b614a228ec78d48515bdc2e0858b537421306cbe::2fcb985bdb80973288a44545e77b2ba36021a04c::70650826c2d899d7a51858c0c108af37f0709a5b::cf2002a1c7d49e695f6b4010ecae33c27cbd8cee::b121d8a657834489c9f26d2868a69c140e54c117::c984eb79b00fa35847933dccc8e8d3c001e83938::988595b131441b90336048b3119c8f539c28c565::fa209a733bac02f252bb7181ad022c33aef45de1::baa9bdaedb266a520c94bc2b1d19b5a2edcb7dbd::984522e875c5e5cbd81502b9c341e4010c41745a::52ea0046e5878454b02e54d14802e768a075c8ac::9d5044624f059842d0cfcca64b3b69ca986eb926::b23b11a370954d20ac17872afd2a4c2689c35341::
https://api.github.com/repos/JuliaLang/julia,13000,nl/choldmod::master,1,merged,sparse::,"The check introduced in #10362 is actually too strict, as ABI break only happen with mismatches in the major version. Warning on minor version differences means distributions cannot update SuiteSparse without rebuiling Julia (#12841). Also fix the incorrect wording introuced in 25eb444: this message corresponds to the case where the version is different, not necessarily older. CC: @andreasnoack BTW, I don't understand why this line is here. `version_array` is declared `const` above, and already set during compilation using the very same call. Since it's supposed to hold the version used when building Julia, resetting it on init doesn't make any sense to me. Should I remove it? ::Doesn't this verify ony `x` (not `x` and `y`) in a `x.y.z` version number as @andreasnoack suggested in https://github.com/JuliaLang/julia/pull/10362#issuecomment-135881222. I don't know what policy COLMOD has for breaking changes, but I'd recommend verifying before loosening the requirement too much. ::`version_array` ends up with the linked version of CHOLMOD if possible and `tmp` has the version at build time. Therefore, I think we could just have ``` jl tmp = copy(version_array) ``` instead of ``` jl tmp = Array(Cint, 3) ccall((:jl_cholmod_version, :libsuitesparse_wrapper), Cint, (Ptr{Cint},), tmp) ``` but I think there is a problem with `version` which should be updated at run time. I think we need these definitions at compile time, but I'm not completely sure, so it might be that they can just be defined in the `__init__` function. ::I'm not sure that the versioning policy in SuiteSaprse has been strict enough that testing only the major version is enough (though I initially thought that). E.g. the version number function for CHOLMOD was introduced in 2.1.0. I briefly looked at the changelog where I saw that ``` so although it is a major version number change for CHOLMOD it is not for the other libraries even though the API for providing custom memory allocation function has changed. March 26, 2014: SuiteSparse version 4.3.0 MAJOR UPDATE: first release of CHOLMOD GPU acceleration minor update: modified all packages to use SuiteSparse_config for malloc/calloc/realloc/free, printf, hypot, and divcomplex function pointers. * AMD 2.4.0: changed malloc/printf pointers to use SuiteSparse_config * CAMD 2.4.0: changed malloc/printf pointers to use SuiteSparse_config * CCOLAMD 2.9.0: changed malloc/printf pointers to use SuiteSparse_config * CHOLMOD 3.0.0: MAJOR UPDATE to GPU acceleration.  Released at GTC 2014. * COLAMD 2.9.0: changed malloc/printf pointers to use SuiteSparse_config * CSparse 3.1.3: minor update to UFget * CXSparse 3.1.3: minor update to UFget * KLU 1.3.0: changed malloc/printf pointers to use SuiteSparse_config * LDL 2.2.0: changed malloc/printf pointers to use SuiteSparse_config * RBio 2.2.0: changed malloc/printf pointers to use SuiteSparse_config * SPQR 1.3.2: changed malloc/printf pointers to use SuiteSparse_config * UMFPACK 5.7.0: changed malloc/printf pointers to use SuiteSparse_config * MATLAB_Tools: added stats to UFcollection, revised commends in SFMULT, minor update to spok ``` ::Ah, forgot to say I had checked the changelog before making this PR. I think we need to separate two things, which are basically what every sane library versioning policy follows: 1) Julia cannot use a different cholmod major version than the one it was built with because of ABI compatibility 2) Julia also has a minimum version requirement: it needs at least the first version in which all the used functions are present 1) is basically what the linker gives you automatically in C code (requiring the major SOVERSION). This is what this PR does. 2) is what is always handled separately by `configure` scripts, by package managers, or manually in Makefiles: just check that the version is above the minimum; most C programs don't check anything on their own though, and will just crash when they encounter an undefined symbol. Of course we can do better than that. I can add another commit in which I check that the version is beyond a minimum. I can also have a look to find out what version that corresponds to. ::> Of course we can do better than that. I can add another commit in which I check that the version is beyond a minimum. I can also have a look to find out what version that corresponds to. That would be great. ::OK, I've made some tests, and I wasn't able to get the tests to pass with anything below SuiteSparse 4.2.0. With 4.1.0 I get this error (after rebuilding suitesparse-wrapper and the Julia image): ``` * sparse               /home/milan/Dev/julia/usr/bin/julia: symbol lookup error: /home/milan/Dev/julia/usr/bin/../lib/libcholmod.so: undefined symbol: dpotrf_ ``` This symbol is present in liblapack and can be resolved from Julia, so I'm not sure what's going on. If there's any chance this might work somewhere, I can try to get past it, else we can decide to stick to that. It includes libcholmod 2.1.1 (the second release with `cholmod_version()`), which means we would really be able to detect when the version is too old. I've also discovered that the version check didn't even work below 4.1.0. With libcholmod < 2.1.0, i.e. when   `cholmod_version()` does not exist, `Libdl.dlsym` raised an error, while the code expected it to return `C_NULL`. That's a typical case of a rare code path that we supposedly care about but nobody tested. I've changed it to `try`/`catch`. Does the logic in the new commit sound correct to you? ::Could we just say ""binaries from www.julialang.org"" without mentioning the OS here? MSYS2 may eventually have a Julia package where this could also apply. ::Sure, will fix when the PR is ready. ::Fixed in the new version. ::these should be spaces, not tabs ::Ah, I hate editors when they don't respect the existing style of a file. I've pushed a fix on master, should I also push it on release-0.4 to ease future backports? ::just did d523ddea70ee9ad8c34fb4968d9b6140bdc12370 ::",9ad1ebe4d4fad9bb42d30dac506e0dec1f56dc74::4c25109326e45a5db05ea2b27be0d1d3739b1b2a::
https://api.github.com/repos/JuliaLang/julia,12692,zaf/fix12534::release-0.3,0,merged,,"backport from 0.4.0 of unitrange_last, fixes #12534 added tests",f3139e934dc7e244566b97ba80e6cb31319ca49d::
https://api.github.com/repos/JuliaLang/julia,12645,teh/super_typevars::master,1,merged,types and dispatch::,"This fixes #12636. If acceptable and it doesn't cause problems for packages, I'd like to propose to backport the same fix to julia-0.3.",4e40ad358ed67a5a38600904ff40cc36cbeeb835::
https://api.github.com/repos/JuliaLang/julia,12516,teh/profile_printing::master,1,merged,,"CC @vtjnash I think there are entries for this in stdlib and helpdb too, right? ::Probably, but I'm not going to worry about that until the doc stuff settles out. ::I don't know what you mean by settles out. It's in an unfortunate state right now and other than better clarifications of how the current state is supposed to work I don't think it's going to change dramatically before 0.4, we just have to cope as best we can. Or decide to revert the conversion again since it's clearly confusing everyone. ::I just figure folks are busy, and it's a hard problem. I'm confident it will be sorted out soon enough. ::Bump. Just got confused by the lack of maxdepth documentation at the repl. ::Already done, see #14532. Maybe needs a backport tag, though. ::oh right, memory fail. will see how conflict-messy the backport is for 0.4.3, which I should get started on soon ::",68446af3c0d081b7020ead999863591f481904cd::
https://api.github.com/repos/JuliaLang/julia,12463,jn/makefile_o::master,1,merged,build::,"this implements out-of-tree builds (without requiring cmake :smile:) inspired by the linux kernel kbuild system, this uses `make O=` to setup a target directory. it then creates dummy makefiles in the out-of-tree build directories so that the user can more easily do incremental build work. the user can place independent `Make.user` files in each build tree to override the global Make.user file in the toplevel source directory. additionally, it moves all source-file related content into deps/srccache for easier tracking (and build sharing). Well, this is a bit that is necessary in the cmake port for proper out-of-tree build as well. I'm currently adding this capability using a fallback path (which can be removed with stringreplace on the binary) in `jl_load` (the main advantage being not having to change anything in the julia code). I'm at least interested in which way people prefer. ::Why not think about populating these lists of constants in some other way? There's some really godawfully messy perl going on in the makefiles right now to generate these, no one would miss those lines if they went away. ::the openlibm path strikes me as though it would be broken in a NO_GIT build - do we need it? ::only on windows, IIRC ::Oh, whoops, I added that in #6230. So only with MSVC I think, which I believe is broken in a NO_GIT build. Possibly for reasons other than this too. ::last I checked this has issues with parallel make ::we may need to look into that further than. this change was already done for llvm and was being done here to be consistent across all cmake usage in the Makefile. it is in support of the following comment: ~~https://github.com/JuliaLang/julia/pull/12463/files#diff-3ba529ae517f6b57803af0502f52a40bR57~~ edit: corrected link is https://github.com/JuliaLang/julia/blob/e26c451f4919be7f1d7e6f6779045b2588f4427d/deps/Makefile#L57 ::That link doesn't actually point anywhere for me. Using this form can help a bit if you're using different generators like ninja, but you know what would help with that even more? Using cmake for as much of our build as possible. gmake doesn't know that `$(CMAKE) --build` will usually be a recursive make call. ::that's a somewhat faulty argument. I could just as well say that changing the build rules for libgit2 to make (which would be much easier than the reverse) would fix the issue with recursion here. ::Sure, but there's a PR open that gets much of the way towards building Julia with cmake, I know of no such work to make generic cross-platform gnu makefiles for libgit2. We don't need to use the same generator for all cmake dependencies, at the moment it makes sense to me to always use the makefile generator for libgit2 since we're very rarely building it incrementally. Keno builds LLVM incrementally fairly often I imagine. ::i would rather stick with the minimal change (this) in this PR, but can certainly entertain other ideas for implementation in a separate PR. the most logical change would probably to change this to a ccall to a method that has a big case statement to pick the right answer for the input string. ::I still don't get what is going on here, or why some of these need `vcat` and `.data`. Let's not rush this with ugly confusing code. ::some of these are early enough that strings are defined yet, so they need `vcat` and `.data`. it should be possible to make that more opaque in a future PR, but that would take a bit more restructuring and is unrelated to this PR. (this change, or something equivalent also needs to go in to make the cmake build work, so it isn't wasted work) ::In the spirit of ""this does too many things at once,"" how about taking out the llvm-config-host change since it's not at all necessary or interdependent on out-of-tree builds. I get that you're trying to work towards arm cross, but one thing at a time. ::https://github.com/JuliaLang/julia/commit/a6bb699c3d017b7a25826d6ed07f508c5076d99c#commitcomment-12605919 ::i saw. they are appended to the end of PATH, so there's really no reason not to try to use them (if for some reason the others don't exist) ::if we don't absolutely need to append to path it's better to leave it alone (link is for my own reference, not yours, since github is better about keeping around comments left from ""Files changed"" after rebases than those left on individual commits) ::lets try to avoid unfamiliar jargon in error messages, shell metacharacter is not terminology that most people are going to recognize ::we may be able to just delete this line entirely. i don't think it is getting used anywhere anymore. ::fortunately, there's google, which is quite happy to give you a list of these characters (this list is still missing a few like `<` `>` and `\n`, but i think this'll suffice since it doesn't actually seem to have bit anyone yet) ::sure but if you can explain what the problem is in simple words without forcing someone to go to google, then just do the obvious version ::No, considering the only dll in either `build_libdir` or `build_private_libdir` is sys.dll I highly doubt these are doing anything. The addition of 7zip here is also quite old, and unpleasantly hardcoded - https://github.com/JuliaLang/julia/commit/c2323fbd25718707a4b9e2318d83ac16689da04b. Cygwin/msys2 git can act up if your path gets too long, so would be good to drop this. ::Let's delete this line. ::spaces here, not tabs ::this probably breaks `build_sysimg.jl` ::0.5. If we backport this it won't be for a month or so. ::it shouldn't ::",6e3c589b521a09b5c97c6a62b2499a9196dd41d5::df4a918cdd07576b687dae3f66aa15bb5b4b51eb::16d38127293b7ae2635ef7cc9e8e7aebcd1b978f::8dc87440475e4fb891b2d8178013c32d63b6f429::0e8b9c5e133d75823b944d6af9072ddc5ed1d8b5::bd764883fe655fa49bc6f994e91078ae4b258724::922c89dbc3f2b1167d62fb01a46ae1b1cffbe578::2bd1d66d03e3fe728387035d2be8185a168b1d06::17474b7e8ca46514378bc2431cbe40b0ae86aa92::178de58e45ed8918ac34f2b4bf39559b0122cf9d::b4507f23ec75b7e0efbbd51cbd7234bd029d1020::11a82f956fd38f500a4e2b11d409601301c84547::ffae404e46787d0afd813c64e4f09fbc85898dcb::05c573eef036908810de3c9c1e4441806d15873b::72d3f2299e852b9dd05dbcfa2e052ce2f2dd97ea::57505511393bc3e49bbc917105c74e1cea298e31::ffdedd34e3df977aee978154a1979b61c9f877c4::f7f119e6e59f67df16dcd856a23eb70c5af89eb5::3875ec6ad9627ebe7c888f3034e9c6d7810c7f93::5e530b495f2d7268443531cba426f3136fd595d6::7545aa9d07b678351de81cf297f9c325087923f7::0c491e58cb9469941e1e2353e895b903abc786d4::1fbf962f9409a677113c92322ed170dec78c35a4::15129c292c6e63dfd8ad7f71a1c51106bbc5e4b7::d7a0950cc4f27ac7bb88e0c48d4345a65a2938c0::eb23feda0879e73a20bdd27aa0b1fa7a173a3215::67b050649e9547227ff8754aa8f18219b8db346f::171d7fba1ab1de2a1f59c44d9b91f90fd605c854::285539887db1771cf3e21a59202f619baa98b842::c7253e6f4360dcd9cf8edae89a36c9c37a3a4643::dea2fa65cfeae50280ad99e1e058a69550be3553::1565377be0fde1186a12a60909821b161d5e7501::cc0d9fe47ebeca296b1b446a9981088bf4810487::130083ff0fc6b3290e0bf0868272ccd89df4d725::c7bd711779424ab02837f9062333dd0972626c8b::ea5c2b9693397d08a15f19653cb6199e6f54e1eb::bd22c1eb7ffca360350fbe7552453abc274cebdc::
https://api.github.com/repos/JuliaLang/julia,12258,tk/backportwin64::release-0.3,1,merged,windows::,"give this a few days for people to test it on master, no rush here",6cb45ef99fca7a6a30e6fc992c1da9b19fc11417::4ac97632900004a4234c5b22be67ebe0567db8a9::b0c410a4a1fa95bf21cdc55eab55f9e68250facc::2be4dced5ec7bb33736b6949d25005940b7efe5e::945f4f9d253b8e13ab91c69816afe7b68ff1ba48::f15d6eb6a2766a2a06e336b6a348c82039c56095::
https://api.github.com/repos/JuliaLang/julia,11928,kms/backport_11876_fix::release-0.3,1,merged,,don't print an extra newline to stdout when exiting with an error when we quit on EPIPE this caused us to throw another error (cherry picked from 34ec37d949b899fb4a3adc01aec3c78dbeb1acfc) **Note that this is a PR against release-0.3.**,224c44c11962e404c0d5e23b0dc3e1f0149a82da::
https://api.github.com/repos/JuliaLang/julia,11886,nl/mcjit::release-0.3,1,merged,,The backport included a call to a function that did not exist on 0.3. I'm using this to build the Fedora package. CC: @tkelman,7a0e95cd1838b0ae52c0d4f7740efcba389d2e07::
https://api.github.com/repos/JuliaLang/julia,11786,yyc/fix-11772-backport::release-0.3,1,merged,,This should be pure bug fixing and non-breaking. This is the first time I do a backport PR so hopefully I've got it right ....................,a4b5c0e58a9c14d9b29e582369867fde12353d9c::
https://api.github.com/repos/JuliaLang/julia,11494,anj/herkbp::release-0.3,1,merged,,This should backport the fix to the `herk` methods without breaking anything on 0.3. If the scalar inputs have non-zero imaginary parts then a conversion error will be thrown.,26fdf4ecaa6303a6b5c1018408c37db34a31fbd4::
https://api.github.com/repos/JuliaLang/julia,11401,spj/fixtime::master,0,merged,doc::,"Previously, `@allocated` used a trick to not show allocations caused by compilation, but the `@time*` macros did not.  This corrects that oversight.  (could be backported to 0.3.x as well)",d0476f25162075519b0144a3c0e4366dc0f17591::
https://api.github.com/repos/JuliaLang/julia,11344,cb/backport_fast_publish::release-0.3,1,merged,packages::performance::,"This is a PR against the release-0.3 branch, to backport the changes which sped up `Pkg.publish`, i.e. #10323, #10396 and #10417. It's a fairly large and not quite trivial batch of changes, but the sluggishness of the publishing process on 0.3 is such that this speed up may well be considered a bug fix. Also, it's been on 0.4 without problems for a while now. Everything seems to work as it should on my machine (about 4s to check the whole metadata...), so unless there are CI surprises or objections I'll merge this in a while.",441f3f27c2794fbe4a9a765a690d34621ae826aa::69910fcd2ad3086c99c633fcb231fd659c554ef1::476d326577a33b89298590237ee2003497ca2671::69ccb34547a626ced32ee1ca2872f2c9a063c778::cd63f274706f4c455f91a9d02d63791777d0b8cf::d26b61768f5ad196292341f90ea942eab3c8671e::1dfb72fc41120d3cc2a817cf69b184d2cc90a87f::
https://api.github.com/repos/JuliaLang/julia,11147,fix11117::release-0.3,1,merged,,"It's croaking [here](https://github.com/JuliaLang/julia/blob/79599ada444fcc63cb08aed64b4ff6a415bb4d29/src/interpreter.c#L260). We backported 97381df5 (fix for #9773) which gives the nice error message, but didn't remove the related assert, which was removed in 2604610c5. I think this is safe to remove, but I don't have a 0.3 build handy. cc @tkelman",222207feae3dc21f21202408771328b0fff7c670::
https://api.github.com/repos/JuliaLang/julia,11019,tk/backport-10991::release-0.3,1,merged,,@stevengj can you check that I resolved the conflicts correctly for release-0.3 here? Also want to let this run through CI.,b192bf0e2f0a0c5b232c3352c6e996e5f11053f2::517db08a0aaf6a488dd8be866bd70f0088d9e414::4bcefc074de3176c4ae730d4e8edf3184025c458::8eafd0758999d85686710b0122f63e388abcb18d::
https://api.github.com/repos/JuliaLang/julia,9911,valgrind-doc::master,0,merged,,"Here is some documentation for using Valgrind with Julia.  With regards to the ""target architecture mismatch"" error, I decided to describe the status quo rather than attempt to disable the check when `RUNNING_ON_VALGRIND` is true (as suggested by @Keno).  This can always be changed once the current pull request is merged.  (I figured it may be helpful to describe the status quo in case this documentation is e.g. backported to the `release-0.3` branch.)",354c730642346300c8eb5819b99e5d5e5aff729c::bfebd260ea749b882f07aec56f9dba639b18c335::
https://api.github.com/repos/JuliaLang/julia,9833,backport9735::release-0.3,0,merged,,"This backports the bugfix in #9735.  This is my first backport, and I think I did it correctly, but let me know if anything is amiss.  I manually fixed 0.4-only syntax (s/Int/int, removed BoundsError args) and removed unrelated tests from findprev from commit 37040f70a9267b7b38d59793fb01fff97c6c5e9f. Cc @tkelman",a8d1ebfb230b36a260109957c52e67dacf8360a0::
https://api.github.com/repos/JuliaLang/julia,9702,teh/reducedim_init::master,1,merged,,"This was a bit tricky to debug because we have several different branches depending on array size & type. Hopefully these new tests cover all the cases. Presumably, this needs @juliabackports (this existed even before the previous commit to touch this line, 99193d97a2e18f02f7f6212ad9ac9348b7959ad1).",f5e119ac18f19f476d061489cafafe8570fecc2b::
https://api.github.com/repos/JuliaLang/julia,9266,jn/init_opt_cleanup::master,1,merged,,"this attempts to be more consistent and centralized about initializing julia paths (build_path, image_file, julia_home). this is in an attempt to make embedding julia easier. also, it should help with spawning child processes (by providing more reliable access to the parameters, without dependence of the working directory) 1. moves all configuration options into jl_compileropts 2. computes the abspath/realpath of file paths in the config to avoid issues with chdir causing files to end up in the wrong location @tkelman @ihnorton @staticfloat Is this change related? ::What's the reason for this change? ::In that case, shouldn't this whole loop be removed? But I don't understand what changed here. ::This causes lots of redefinition warnings on linux. ::removing stuff that wasn't used ::i guess that should be `#ifndef PATH_MAX` ::i changed from putting NULL's in the `jl_module_init_order` table (which don't appear to be checked for later, so they would cause a segfault), to asserting that everything in the module init order list has been serialized (which I believe should be true by construction) ::Ok, then the comment above should definitely be changed. ::I moved this line to be with the rest of the signal handlers (https://github.com/JuliaLang/julia/pull/9266/files#diff-885908120835b66f90958a39baeb2018R1073). i think that should be more consistent with what these functions are intended to do (and hence falls in line with ""cleanup of julia init"") ::`C_NULL` undefined, trying to write Julia in C? ::trying to move code from path.jl to c, yes ::agreed. looks like the comment didn't transfer when I backported this from https://github.com/JuliaLang/julia/pull/8745 annoyingly, this assert can get correctly triggered by `Gtk.jl`, since the module initializers are getting called in the incorrect order / at the incorrect time, given the following code: file `A.jl`: ``` julia module A __init__() = println(""init A"") end ``` file `B.jl`: ``` julia module B module C __init__() = println(""init B"") end require(""A"") # this causes B.C.__init__() to get invoked before A.__init__() end # B.C.__init__() should have been called here ``` ::Why does the init order problem lead to one of the modules not getting serialized? ::oh right, i copied this code to `jl_save_new_module`, and that's actually where it failed, not this one. when trying to serialize `A`, it discovers `B.C.__init__` is in the list to be called also it's not directly related, it just made me realize that the `__init__` call order can end up getting out of sequence ::This should probably be `#if (defined(_CPU_X86_64_) || defined(_CPU_X86_)) && !defined(_MSC_VER)` since inline assembly doesn't appear to be supported in MSVC for 64 bit Also note the appveyor failure with mingw64, I'll see if I can reproduce that locally when I get a chance. ::that's incredibly annoying. at some point, someone will have to copy the ASM instructions to a MASM file, but for now, that's why I left the option here (plus I don't have an ARM computer to test on) ::Is this supposed to detect whether `image_file` is a relative path? Doesn't seem like it would work on windows. ::I would think C API clients would prefer C strings to julia strings. ::C clients can access `jl_compileropts` directly ::good point. to be fair, though, that means this logic has never worked correctly on windows ::This should eventually be replaced by #8372. ::I'm concerned about whether this changes the behavior of `jl_init_with_image`. It used to always interpret its second argument as relative to the first. ::Specifically, the `abspath` call below seems to interpret it relative to the CWD instead. ::Might as well git rid of this while you're at it? ::my intent was for this interface to replace & close #8372, with specific accessor methods for each element of interest ::will do. the diff in that other issue was actually against this branch, i just didn't want to include it if it wasn't correct (something about Jeff not wanting to have too many different changes happening in the same PR...) ::yes, the behavior before was that it would check the CWD, then check relative to the JULIA_HOME directory. I am changing this so that if the user types a path, it is assumed to always be exactly where they typed it otherwise, I find it too ambiguous when i type `mv usr/lib/julia/sys.* .; ./usr/bin/julia-debug -J sys.ji` to have julia searching for sys.ji rather than accepting it as the exact path ::This PR already entirely replaces the relevant code so it's kind of moot. ::The command line interface and `jl_init_with_image` are not the same thing. `jl_init_with_image` called `jl_locate_sysimg` which simply joined the paths together, not using the CWD. The purpose of calling `jl_init_with_image` is to specify an image path that may be unrelated to the CWD or the main application's path. ::ah, fair point. part of my goal here was to reduce code duplication between `ui/repl.c` and `src/jlapi.c`. was that an actual intended use case? it seems strange to me that you would know the name of the file but not the location. i thought that was just a hack that was previously necessary to support `JL_SYSTEM_IMAGE_PATH`. However, I've now baked support directly into libjulia for that. i could add a flag back to `julia_init(...)` that specifies whether to look relative to the cwd or julia_home. ::Yes, the current behavior was intended. Actually it would be better and simpler to also allow absolute paths for everything. I think the following cases are useful: ``` jl_init_with_image(julia_home_abs_path, image_abs_path); jl_init_with_image(NULL, image_abs_path); // if I don't know where julia is installed, but I want sys-foo.ji from within that install jl_init_with_image(NULL, image_rel_path); ``` That last case happens if somebody builds julia plus a couple images, and then distributes the whole directory to several people who put it in different places. ::I think the jlapi calls should be fairly low-level, and should not use the CWD at all. It would even be ok if you had to call `jl_find_libjulia`, and manually construct an absolute path from a relative image path if that's what you need. ::the conditional in line 809 is redundant with the conditional on the next line anyways, i can just delete it ::it seemed like the default expectation is that if the user gives a relative path, the expectation is that it is relative to cwd. that was also the old behavior in the repl, I just reduced the amount of code duplication and variation by calling abspath on all inputs so that they wouldn't be affected if the cwd changes later in the program execution.  the primary expectation is definitely that the user will construct an absolute path if they want anything special. I think a `julia_init(...)` parameter indicating whether the user wants the relative path interpreted with respect to the cwd, julia_home, or (in the future) libjulia would be appropriate for this ::When julia is used embedded, I just don't think the CWD is very relevant. We don't have that behavior now, and nobody has asked for it. It would be simplest just to take absolute paths. The only other feature that's needed is the ability to automatically determine `julia_home` first, so paths can be constructed from it. ::Could you add a comment that describes what this function does? And that it operates by reading and writing `jl_compileropts`. ::This should be factored into an `is_absolute_path` function. ::",50691212bcebaf1e540fe0371b61be199e4ad761::54affdb3f37e8d02c9d6e1806229c4933890a094::c37f371c1ea26b0e2a7614a8536d94330546ee18::8203538c7f621000cf8fc8fa1509c50c2b83a8dd::e2cb463f89ed52aabfc7cb487b5daf2d13dd3e4b::9da3b57d9f10affa6039d58860e426f2b96be33d::dc8c12addcae4a162b319119295820a14842fb5b::
https://api.github.com/repos/JuliaLang/julia,9253,Backport_#9227::release-0.3,0,closed,,"I have backported #9227 ""Fix path completion when UTF8 char is occurring before match characters."" to 0.3.3 @stevengj",26d46ecfb44cd41097209dd96dc5e452ddb311d1::
https://api.github.com/repos/JuliaLang/julia,9173,tk/backport-appveyor::release-0.3,1,merged,,"the MSVC parts of the script probably won't work on release-0.3, but that's okay we don't really need them to",91fa026a2cedcd67e4506563ef8aef2f39ca7734::efa2291758060081f87b2d54cc6539af3bd3707f::900e673decf8b571541961375758e5c332792487::ffa1ffc6cf2122b9808eea351a1658ceacb26fc4::
https://api.github.com/repos/JuliaLang/julia,9161,bitstypes::release-0.3,1,merged,,This backports b429303dd6824299801fcd6ded7a23c12794d72a. Any reason not to do this?,1c2799699bee432b0f5db5a6f6df603f9c31c8bb::
https://api.github.com/repos/JuliaLang/julia,9055,shell_completion_fix_back_port::release-0.3,0,merged,,@nolta I have prepared a backport of #8995,3197b59e7832c8ca5231fc680e348bd2d3838ebc::
https://api.github.com/repos/JuliaLang/julia,9050,tk/backport-8734::release-0.3,1,merged,,"As far as I can tell this fixed #4923, and aside from a couple of Mac build issues (I've squashed the fixes for those into d297ffb70afce4df9bc865a5664733627bb12e69, and I can squash even further if anyone would prefer that) this seems to be working fairly well on master. Ref #9045",066825ebb3d450ccd1315122d1fd0e473f91798e::12797dbc365a9fc192cfd92bfae0c2836544fb44::bd9b63a9c183a672e962c680b6ce71e7bc181b03::d297ffb70afce4df9bc865a5664733627bb12e69::8243c5b816dd79ff740255edd6af2c9e9cb011ef::
https://api.github.com/repos/JuliaLang/julia,8821,teh/vecmat::release-0.3,1,merged,,"Since the second commit is relatively new, it wouldn't be crazy to let this sit a few days before merging. I'll follow whatever course is suggested by @ivarne, master of all backporting.",a3b380ba19132ffbd7b2655616939d1597005b21::e0224de74bfd7c8720527cc25eadc69f7c584664::
https://api.github.com/repos/JuliaLang/julia,8748,backport_of_#8725::release-0.3,0,merged,,This is a backport of #8725. @nalimilan would you check it works as you suggested in #8725?,c8695e27dc635ca80bb4338871ca5378526d517c::
https://api.github.com/repos/JuliaLang/julia,8558,teh/dict_empty::master,1,closed,,"I don't know the internal `Dict` code well, but AFAICT these allocations are completely unnecessary---if `slot[i]` is 0, it doesn't seem to matter what's in `keys[i]` or `vals[i]`. I have an application where these accounted for 90% of the runtime, hence my interest in eliminating them. If desired, I can backport to 0.3.",131b5c5d79cb3d4bf20805f93b9c4a4cecc99c5d::
https://api.github.com/repos/JuliaLang/julia,8436,release-0.3::release-0.3,0,merged,,- L42: import `BlasReal` and `BlasComplex` - L143: for `dot`: `BlasFloat` to `BlasReal` - BLAS `dot` only applies to real numbers - L148: for `dotc`: `BlasFloat` to `BlasComplex` - BLAS `dotc` only applies to complex numbers - L153: for `dotu`: `BlasFloat` to `BlasComplex` - BLAS `dotu` only applies to complex numbers - L238: remove line in `iamax` - `x` is not an input variable - cannot compute length of a pointer - L308: fix computation of length of output vector in `gbmv`,1776836ffd3f5817142b0b88477398601f05ac38::
https://api.github.com/repos/JuliaLang/julia,8379,tk/datarootdir::master,1,merged,,"fixes #8368 @nalimilan Is this really needed? `$(datarootdir)` should always been set when calling `make`: if it's not overriden, it has a default value equivalent to what you are using. ::Even better would be to store this as a relative path. The same could be done with SYSCONFDIR. This would allow changing prefix without recompiling anything (which is sometimes useful, and recommended by the GNU guidelines). See have this is done here: https://github.com/JuliaLang/julia/blob/master/Make.inc#L317 ::I was going based on the example where `SYSCONFDIR` gets used here https://github.com/JuliaLang/julia/blob/15424e37d941e166206803ed6de8f31a44c48027/base/client.jl#L322 Unfortunately prefix is usually empty while `base/Makefile` is getting executed, since the default setting for prefix is here https://github.com/JuliaLang/julia/blob/15424e37d941e166206803ed6de8f31a44c48027/Makefile#L214 in the top-level Makefile, rather than in Make.inc. So in a normal default source build, `Base.SYSCONFDIR` is currently `/etc` which isn't so useful. ::relative to what, `bindir`? ::Yeah, since this will be used from the `julia` executable. ::Ah, interesting. Better move this to `Make.inc`, and make `Base.SYSCONFDIR` relative, so that there's only one place where the default is hardcoded. All this machinery is already complex enough. :-) ::Agreed with @nalimilan ::Yes, exactly.  `contrib/relative_path.sh` is your friend here. :) ::Was more hesitant to mess around with `prefix` or `SYSCONFDIR`, that seems more likely to potentially break things. Who knows what's relying on the current behavior... ::If there is a time to break things in order to get it to work right, it's now. On Sep 16, 2014 8:45 PM, ""Tony Kelman"" notifications@github.com wrote: > In base/interactiveutil.jl: > > > @@ -372,9 +372,13 @@ function runtests(tests = [""all""], numcores = iceil(CPU_CORES/2)) > >      end > >      ENV2 = copy(ENV) > >      ENV2[""JULIA_CPU_CORES""] = ""$numcores"" > > -    runtestsjl = joinpath(Base.DATAROOTDIR, ""julia"", ""test"", ""runtests.jl"") > > -    if isempty(Base.DATAROOTDIR) || !isfile(runtestsjl) > > Was more hesitant to mess around with prefix or SYSCONFDIR, that seems > more likely to potentially break things. Who knows what's relying on the > current behavior... > > — > Reply to this email directly or view it on GitHub > https://github.com/JuliaLang/julia/pull/8379/files#r17644511. ::Fair. I'll play with it, see how it looks. Was trying to keep the backporting considerations in mind here. ::",6f896703e4306af5e71859dc21ed5a0f2d1dc81c::3f4d2fca89d4c105c1c949fd8582776f3d214126::
https://api.github.com/repos/JuliaLang/julia,8336,tk/suitesparse-4.3.1::master,1,merged,,"Tim Davis moved from Florida to Texas A&M, so some of the SuiteSparse links are now dead, others are redirecting. The first commit here can be safely backported to release-0.3, I believe, but probably better not to backport the second. There were some undefined symbols on Windows unless I rearranged the shared-library linking a bit. Would appreciate someone testing on Mac. Passes tests for me on Win32, Win64, and Linux x64.",8b5aed0156352de6ff2186bc8d4bf930a39e6da2::d09ffcb371625e10677f144b8e0612dd960c2adf::
https://api.github.com/repos/JuliaLang/julia,8150,backports2::release-0.3,0,merged,,"- Fixing Mac Travis and changing the IRC notifications - Small Windows build fixes for LLVM 3.5 and `make cleanall` - Suppressing a noisy `which` - Backporting @ihnorton's fix for the Windows uninstaller @staticfloat or others, look good?",ef69c86c79fa0c176f7d1edc982450462be4c1f7::00e4740deca6d5cbd72d5aa78c70d5e3d5c4a254::a9f37b64ef4325da5203007e0d183ed3512c8cc3::33c1369140106a798918e2c827a07ec77b92f77c::4787345da8d03fbb8ffb050d8e9276a022f911e3::71cf832623622584224c119a54e096b770a8eb19::320c6d5048339b83a98fb41263576a66a5a639de::b3d6815b7eefbb09829bdf9cacf35518ea4617c7::bb17911f013e59102d7054aeb1ab76811c669ca5::9e6b228fb0ece349f5cfcd84f4c5651a1c0d94e5::9355e9e11ad2d6920cb27b7248a01c9e8a0f46d6::6fde7df7be6b1cd638004922ef0a2587a1387fab::
https://api.github.com/repos/JuliaLang/julia,7313,jb/instcombine_patch::master,1,merged,,,9d49959ae99379ad7dc652cc0cd8ec496ec38006::c4386f17183ea6684f31c32c6c3b4d742d4663d3::
https://api.github.com/repos/JuliaLang/julia,6271,adr/slpvector::master,0,merged,,"[Updated 2014-Nov-25] This pull request enables implicit vectorization of tuple math idioms when -O is on the Julia command line. The changes comprise: - Add -O command-line option (per @ViralBShah's suggestion). - Add LLVM's [BasicAliasAnalysis](http://llvm.org/docs/AliasAnalysis.html#the-basicaa-pass) and [SLPVectorizer](http://llvm.org/docs/Vectorizers.html#the-slp-vectorizer) to the pass list when -O is present. - Add `InstructionCombiningPass` to clean up after `SLPVectorizer`.  Without the cleanup, the code is horrible. - Add a patch that makes LLVM 3.3's  `SLPVectorizer` work for tuply idioms of interest. The changes to LLVM 3.3 were backported from recent changes developed by me that are now part of  LLVM 3.5.  The patch includes backported LLVM unit tests. - Move position of  LoopVectorizer in the pass list to match its positions in Clang 3.3 and 3.5. - For LLVM 3.3, it now comes after `LoopUnrollPass` instead of before. - For LLVM 3.5, it now comes almost last. - When using LLVM 3.5, add a followup ""InstructionCombiningPass"".  Without the cleanup, the code is horrible. For background, see Issue #5857 and in particular my [comment](https://github.com/JuliaLang/julia/issues/5857#issuecomment-35784676).  Here is an example of what the enhanced SLPVectorizer can do: ``` $ cat foo.jl function add( a::NTuple{4,Float32}, b::NTuple{4,Float32} ) (a[1]+b[1],a[2]+b[2],a[3]+b[3],a[4]+b[4]) end function mul( a::NTuple{4,Float32}, b::NTuple{4,Float32} ) (a[1]*b[1],a[2]*b[2],a[3]*b[3],a[4]*b[4]) end function madd( a::NTuple{4,Float32}, b::NTuple{4,Float32}, c::NTuple{4,Float32} ) add(mul(a,b),c) end t = NTuple{4,Float32} code_llvm(madd,(t,t,t)) $ julia -O foo.jl define <4 x float> @""julia_madd;63815""(<4 x float>, <4 x float>, <4 x float>) { top: %3 = fmul <4 x float> %0, %1, !dbg !45 %4 = fadd <4 x float> %3, %2, !dbg !45 ret <4 x float> %4, !dbg !45 } ``` Without the patch, the LLVM code for `madd` is [lengthy scalar stuff](https://gist.github.com/ArchRobison/9793916#file-gistfile1-txt). Impact on compilation time using -O using LLVM 3.3 is significant, but hardly noticeable withLLVM 3.5.  I measured compilation overhead using: ``` cd base; time -p ../julia sysimg.jl ``` Here's a table of compilation times (in seconds).  ""Baseline"" is Julia without the PR. |  | LLVM 3.3 | LLVM 3.3 | LLVM 3.3 | LLVM 3.5 | LLVM 3.5 | LLVM 3.5 | | --- | --- | --- | --- | --- | --- | --- | |  | Baseline | PR | PR -O | Baseline | PR | PR -O | | Run 1 | 46.40 | 46.83 | 67.65 | 53.74 | 51.57 | 53.33 | | Run 2 | 46.50 | 46.56 | 67.63 | 51.94 | 51.70 | 53.13 | | Run 3 | 46.40 | 47.06 | 67.13 | 52.32 | 51.80 | 52.80 | | Run 4 | 46.32 | 46.24 | 68.28 | 52.31 | 51.83 | 52.84 | | Run 5 | 47.12 | 46.53 | 67.79 | 52.43 | 51.51 | 53.01 | | MEAN | 46.55 | 46.64 | 67.70 | 52.55 | 51.68 | 53.02 | | % w.r.t. baseline | 0.00% | 0.21% | 45.43% | 0.00% | -1.65% | 0.90% | | STDEV/MEAN | 0.70% | 0.67% | 0.61% | 1.32% | 0.27% | 0.41% |",3bdda3750efc4ebf8ce7eda8a0888ffef3851605::
https://api.github.com/repos/JuliaLang/julia,6205,patch-5::master,0,merged,,"It would be nice if these happened automatically, but absent a test running framework, I guess we need it. ::I think it it nice to have them explicitly. This way you can simply type `julia test/runtests.jl` and it should work. ::Minor issue - this line uses `Pkg.test()` which won't exist until #6191 is merged. ::Ah, right. Sorry for the premature merging. ::New packages after this will fail on `juliareleases` until `0.2` dies, because `Pkg.test(""$pkg"")` is a feature, and will not be backported to the `0.2.x` branch. ::Is that true @ivarne `Pkg.test` is only mentioned in the travis config which also includes the steps to install the latest version of julia ::I think what he means is that the travis script downloads nightly and release, but is doomed to fail on the release as long as ""juliarealeases"" points to 0.2 - which is another month or so. ::@IainNZ Yes! ::it does that now! sorry missed that appologies @ivarne ::",30483fecb0bb0da74a3f445722a8bc8e33160674::52353f7d9bb7b88a4faeaa65f475858351caef03::
https://api.github.com/repos/JuliaLang/julia,6047,release-0.2::release-0.2,0,merged,,This backports fixes for #4763 and #6036.,ca4a9ccc61b8bf0d1ba823e606c62c48d57449b8::2a9b53ed1268ebecfa0729ace11d7fd01c37fce3::
https://api.github.com/repos/JuliaLang/julia,3813,sf/perfcodespeed::master,1,merged,,"# Summary: - Change webhook notification URLs to julia.mit.edu (Linux) and criid.ee.washington.edu (OSX) - Add `codespeed` target to test/perf/Makefile, which will run perfsuite and upload result to hardcoded codespeed installation location - Note that `make codespeed` will attempt to `Pkg.add()` the packages `JSON` and `Curl` if not already installed. - ~~Exclude `sort` subtests for now, see https://github.com/JuliaLang/julia/commit/453b4efc30bfdabf8a1db33a496ef5972afc9812~~ - Annotate all @time macro calls with an extra ""Description"" field, used to populate the codespeed database for the first time - ~~Again, exclude the `sort` tests for now, as this integration with codespeed will have to wait.  For now, empty descriptions~~ - Until extra build-time information is provided, expect environment variables such as JULIA_FLAVOR, JULIA_BRANCH, and JULIA_COMMIT_DATE on the command line when `make codespeed` is invoked. This might be my biggest pull request yet, but I seem to have finally gotten things to the point where they're uploading to codespeed regularly.  I know it doesn't look like it due to the lack of history, but that's because I recently purged the memory of the codespeed installation. Comments and critiques are welcome!  Once this gets merged, `master` will start to automagically get tracked; it fails right now due to the lack of the `codespeed` target in `test/perf/Makefile`.  I'm not sure if we ever want to backport this to `release-0.1`, perhaps this should be a 0.2+ thing.  :) # Next on my TODO list: - Build scaffolding around C code to create a ""baseline"" in codespeed to compare against - Enjoy the pretty graphs, and make sure the build process is all toughened up (Only time will tell, now). - Something I'm surely forgetting, but can't seem to put my finger on right now.....",25c30ff8cec5da15afc5c7c199b76713b5faf9aa::
