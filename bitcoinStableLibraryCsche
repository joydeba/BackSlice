{"msvc-autogen.py": {"libraries": ["re", "argparse", "shutil.copyfile", "os"], "function_names": ["parse_makefile", "main", "set_properties", "find_between", "parse_config_into_btc_config"], "function_calls": ["parse_makefile", "len", "dict", "copyfile", "main", "enumerate", "set_properties", "find_between", "parse_config_into_btc_config", "open"], "class_names": [], "class_method_calls": ["c.startswith", "line.split", "item.split", "os.listdir", "config_info.append", "line.startswith", "line.replace", "lib_sources.items", "source.replace", "template_file.readlines", "lib.replace", "file.read", "parser.parse_args", "btc_config.writelines", "re.search", "args.toolset", "s.index", "parser.add_argument", "vcxproj_in_file.read", "argparse.ArgumentParser", "source.endswith", "os.path", "vcxproj_file.write", "source.startswith", "line.endswith"]}, "circular-dependencies.py": {"libraries": ["typing.Set", "typing.Dict", "typing.List", "re", "sys"], "function_names": ["module_name"], "function_calls": ["len", "sorted", "set", "dict", "any", "print", "module_name", "open"], "class_names": [], "class_method_calls": ["sys.argv", "match.group", "closure.keys", "path.startswith", "path.endswith", "re.compile", "RE.match", "sys.exit", "deps.keys", "files.keys"]}, "clang-format-diff.py": {"libraries": ["argparse", "difflib", "subprocess", "io", "re", "sys"], "function_names": ["main"], "function_calls": ["len", "int", "main", "print", "str", "open"], "class_names": [], "class_method_calls": ["re.match", "difflib.unified_diff", "args.verbose", "args.regex", "sys.exit", "args.sort_includes", "p.returncode", "match.group", "sys.stdout", "io.StringIO", "args.i", "lines_by_file.setdefault", "lines_by_file.items", "parser.parse_args", "subprocess.PIPE", "re.search", "command.append", "command.extend", "sys.stdin", "subprocess.Popen", "parser.add_argument", "re.IGNORECASE", "f.readlines", "args.iregex", "argparse.ArgumentParser", "args.p", "p.communicate"]}, "copyright_header.py": {"libraries": ["os", "fnmatch", "datetime", "subprocess", "re", "sys"], "function_names": ["exec_report", "write_file_lines", "get_header_lines", "parse_year_range", "print_file_action_message", "file_has_without_c_style_copyright_for_holder", "insert_cpp_header", "call_git_log", "year_range_to_str", "get_cpp_header_lines_to_insert", "update_updatable_copyright", "call_git_ls", "get_filenames_to_examine", "get_count_of_copyrights_of_any_style_any_holder", "file_has_year_list_style_copyright_for_holder", "print_filenames", "file_has_dominant_style_copyright_for_holder", "read_file", "applies_to_file", "insert_cmd", "get_script_header_lines_to_insert", "file_already_has_core_copyright", "compile_copyright_regex", "read_file_lines", "file_has_hashbang", "get_most_recent_git_change_year", "call_git_toplevel", "get_git_change_years", "print_report", "exec_update_header_year", "gather_file_info", "get_updatable_copyright_line", "create_updated_copyright_line", "insert_script_header", "get_git_change_year_range", "exec_insert_header", "update_cmd", "report_cmd"], "function_calls": ["exec_report", "write_file_lines", "range", "sorted", "get_header_lines", "print", "parse_year_range", "max", "print_file_action_message", "len", "file_has_without_c_style_copyright_for_holder", "insert_cpp_header", "call_git_log", "year_range_to_str", "get_cpp_header_lines_to_insert", "update_updatable_copyright", "call_git_ls", "get_filenames_to_examine", "get_count_of_copyrights_of_any_style_any_holder", "file_has_year_list_style_copyright_for_holder", "open", "print_filenames", "file_has_dominant_style_copyright_for_holder", "read_file", "applies_to_file", "insert_cmd", "get_script_header_lines_to_insert", "file_already_has_core_copyright", "compile_copyright_regex", "reversed", "read_file_lines", "file_has_hashbang", "get_most_recent_git_change_year", "call_git_toplevel", "get_git_change_years", "print_report", "exec_update_header_year", "gather_file_info", "get_updatable_copyright_line", "min", "create_updated_copyright_line", "insert_script_header", "get_git_change_year_range", "exec_insert_header", "update_cmd", "report_cmd"], "class_names": [], "class_method_calls": ["line.split", "re.compile", "f.write", "out.decode", "sys.exit", "fnmatch.translate", "EXCLUDE_COMPILED.match", "sys.argv", "year_range.split", "UPDATEABLE_LINE_COMPILED.search", "header.split", "holder_name.replace", "subprocess.check_output", "datetime.date", "filename.startswith", "f.readlines", "file_lines.insert", "os.path", "after_copyright.split", "ANY_COPYRIGHT_COMPILED.findall", "INCLUDE_COMPILED.match"]}, "gen-manpages.py": {"libraries": ["sys", "tempfile", "subprocess", "os"], "function_names": [], "function_calls": ["any", "print"], "class_names": [], "class_method_calls": ["subprocess.run", "versions.append", "tempfile.NamedTemporaryFile", "subprocess.PIPE", "verstr.endswith", "sys.stderr", "footer.flush", "verstr.split", "footer.write", "r.stdout", "os.path", "os.getenv", "sys.exit", "verstr.startswith", "footer.name"]}, "security-check.py": {"libraries": ["lief", "typing.List", "sys"], "function_names": ["check_PE_HIGH_ENTROPY_VA", "check_ELF_Canary", "check_MACHO_NOUNDEFS", "check_PE_DYNAMIC_BASE", "check_PE_RELOC_SECTION", "check_PE_control_flow", "check_ELF_separate_code", "check_ELF_control_flow", "check_MACHO_Canary", "check_NX", "check_MACHO_control_flow", "check_ELF_RELRO", "check_PE_Canary", "check_PIE", "check_MACHO_LAZY_BINDINGS"], "function_calls": ["int", "print", "func"], "class_names": [], "class_method_calls": ["binary.has_symbol", "lief.parse", "segment.sections", "binary.format", "segment.flags", "sys.exit", "binary.has_nx", "binary.concrete", "sys.argv", "lief.ELF", "failed.append", "section.name", "lief.ARCHITECTURES", "binary.header", "binary.abstract", "binary.has_relocations", "binary.optional_header", "binary.get_symbol", "flags_per_section.items", "binary.get_content_from_virtual_address", "binary.get", "binary.dyld_info", "flags.value", "binary.section_from_rva", "lief.EXE_FORMATS", "binary.get_function_address", "binary.entrypoint", "binary.is_pie", "segment.type", "binary.segments", "lief.PE", "lief.MachO", "lief.Binary"]}, "symbol-check.py": {"libraries": ["typing.Dict", "lief", "typing.List", "sys"], "function_names": ["check_ELF_interpreter", "check_exported_symbols", "check_MACHO_libraries", "check_MACHO_min_os", "check_PE_libraries", "check_imported_symbols", "check_MACHO_sdk", "check_PE_subsystem_version", "check_version", "check_ELF_libraries"], "function_calls": ["tuple", "int", "print", "isinstance", "func", "check_version"], "class_names": [], "class_method_calls": ["binary.imported_symbols", "version.rpartition", "binary.name", "lief.parse", "binary.format", "dylib.name", "version.symbol_version_auxiliary", "binary.concrete", "sys.exit", "symbol.exported", "binary.build_version", "sys.argv", "lief.ELF", "failed.append", "binary.dynamic_symbols", "binary.header", "lief.ENDIANNESS", "binary.abstract", "binary.libraries", "binary.optional_header", "symbol.symbol_version", "ver.split", "symbol.name", "lief.EXE_FORMATS", "symbol.imported", "symbol.has_version", "version.has_auxiliary_version"]}, "test-security-check.py": {"libraries": ["utils.determine_wellknown_cmd", "os", "unittest", "subprocess", "typing.List", "lief"], "function_names": ["call_security_check", "get_arch", "write_testcode", "test_ELF", "clean_files", "test_PE", "test_MACHO"], "function_calls": ["call_security_check", "get_arch", "determine_wellknown_cmd", "write_testcode", "open", "clean_files", "filter"], "class_names": ["TestSecurityChecks"], "class_method_calls": ["self.assertEqual", "unittest.TestCase", "subprocess.run", "p.stdout", "p.returncode", "os.remove", "subprocess.PIPE", "lief.parse", "lief.ARCHITECTURES", "os.path", "f.write", "os.environ", "unittest.main", "binary.abstract"]}, "test-symbol-check.py": {"libraries": ["utils.determine_wellknown_cmd", "os", "unittest", "subprocess", "typing.List"], "function_names": ["get_machine", "call_symbol_check", "test_ELF", "test_PE", "test_MACHO"], "function_calls": ["determine_wellknown_cmd", "open", "call_symbol_check", "filter"], "class_names": ["TestSymbolChecks"], "class_method_calls": ["self.assertEqual", "unittest.TestCase", "subprocess.run", "p.stdout", "p.returncode", "os.remove", "subprocess.PIPE", "os.path", "f.write", "os.environ", "unittest.main"]}, "utils.py": {"libraries": ["shutil", "os", "typing.List", "sys"], "function_names": ["determine_wellknown_cmd"], "function_calls": [], "class_names": [], "class_method_calls": ["shutil.which", "maybe_env.split", "os.getenv", "sys.exit"]}, "filter-lcov.py": {"libraries": ["argparse"], "function_names": [], "function_calls": ["open"], "class_names": [], "class_method_calls": ["args.pattern", "parser.add_argument", "parser.parse_args", "argparse.ArgumentParser", "wf.write", "args.tracefile", "line.startswith", "args.outfile"]}, "linearize-data.py": {"libraries": ["collections.namedtuple", "struct", "os", "glob", "datetime", "hashlib", "os.path", "re", "time", "sys"], "function_names": ["__init__", "fetchBlock", "run", "inFileName", "calc_hash_str", "getFirstBlockFileId", "copyOneBlock", "get_block_hashes", "get_blk_dt", "writeBlock", "mkblockmap"], "function_calls": ["len", "BlockDataCopier", "calc_hash_str", "int", "print", "min", "getFirstBlockFileId", "enumerate", "get_block_hashes", "str", "get_blk_dt", "mkblockmap", "BlockExtent", "open", "namedtuple"], "class_names": ["BlockDataCopier"], "class_method_calls": ["bytes.fromhex", "glob.glob", "dt.year", "self.timestampSplit", "blkDate.strftime", "self.outFname", "os.SEEK_CUR", "self.highTS", "self.settings", "self.lastDate", "self.inF", "self.writeBlock", "f.read", "self.outF", "sys.exit", "extent.blkhdr", "datetime.datetime", "extent.inhdr", "sys.argv", "hashlib.sha256", "blkindex.append", "self.copyOneBlock", "self.blockExtents", "struct.unpack", "self.blkCountIn", "extent.size", "self.fetchBlock", "self.outOfOrderSize", "self.fileOutput", "self.blkindex", "self.blkmap", "self.outFn", "time.time", "self.inFn", "self.blkCountOut", "line.rstrip", "re.search", "m.group", "dt.month", "self.hash_str", "extent.offset", "self.outsz", "self.outOfOrderData", "self.setFileTime", "os.utime", "os.path", "extent.fn", "self.maxOutSz", "self.inFileName", "f.seek"]}, "linearize-hashes.py": {"libraries": ["http.client.HTTPConnection", "json", "os", "os.path", "base64", "re", "sys"], "function_names": ["__init__", "get_rpc_cookie", "get_block_hashes", "response_is_error", "execute", "build_request"], "function_calls": ["range", "len", "HTTPConnection", "get_rpc_cookie", "BitcoinRPC", "int", "min", "print", "get_block_hashes", "enumerate", "open"], "class_names": ["BitcoinRPC"], "class_method_calls": ["bytes.fromhex", "rpc.response_is_error", "self.conn", "combined.split", "batch.append", "resp.read", "sys.exit", "json.loads", "f.readline", "sys.argv", "sys.stderr", "base64.b64encode", "rpc.build_request", "re.search", "m.group", "authpair.encode", "self.authhdr", "json.dumps", "os.path", "rpc.execute"]}, "message-capture-parser.py": {"libraries": ["test_framework.p2p.MESSAGEMAP", "json", "io.BytesIO", "os", "typing.Any", "argparse", "typing.List", "typing.Optional", "shutil", "pathlib.Path", "test_framework.messages.ser_uint256", "sys"], "function_names": ["__init__", "process_file", "to_jsonable", "main", "set_progress", "update"], "function_calls": ["sum", "process_file", "to_jsonable", "int", "main", "print", "str", "all", "Path", "ProgressBar", "getattr", "isinstance", "hasattr", "ser_uint256", "open", "BytesIO"], "class_names": ["ProgressBar"], "class_method_calls": ["messages.append", "argparse.RawTextHelpFormatter", "f_in.read", "os.SEEK_END", "obj.hex", "f_in.tell", "msg_ser.read", "progress_bar.set_progress", "sys.argv", "sys.stdout", "sys.stderr", "sys.path", "int.from_bytes", "self.running", "msgtype_tmp.isprintable", "capture.stat", "parser.parse_args", "args.no_progress_bar", "msgtype.decode", "messages.sort", "args.output", "msg.deserialize", "f_out.write", "msg_ser.seek", "args.capturepaths", "f_in.seek", "parser.add_argument", "obj.__slots__", "os.SEEK_SET", "argparse.ArgumentParser", "Path.cwd", "json.dumps", "self.total", "self.set_progress", "os.path", "progress_bar.update", "shutil.get_terminal_size", "capture.stem", "obj.__dict__", "tmp_header.read"]}, "asmap.py": {"libraries": ["typing.Tuple", "typing.Iterable", "ipaddress", "typing.Callable", "typing.Union", "unittest", "typing.Dict", "enum.Enum", "copy", "typing.List", "functools.total_ordering", "typing.Optional", "typing.overload", "random"], "function_names": ["from_random", "_from_binnode", "lookup", "_to_entries_flat", "decode", "_to_binnode", "_to_entries_minimal", "__init__", "encode_size", "test_asmap_roundtrips", "net_to_prefix", "prefix_to_net", "extends", "diff", "to_binary", "update", "from_binary", "__copy__", "test_patching", "make_default", "__eq__", "__str__", "_set_trie", "to_entries", "recurse", "make_end", "entry_key", "__deepcopy__", "test_ipv4_prefix_roundtrips", "update_multi", "make_branch", "can_encode", "test_ipv6_prefix_roundtrips", "candidate", "encode", "__lt__", "make_leaf"], "function_calls": ["range", "sorted", "bytes", "set", "_Instruction", "ValueError", "len", "net_to_prefix", "prefix_to_net", "all", "enumerate", "func", "sum", "recurse", "ASMap", "_VarLenCoder", "isinstance", "_BinNode", "list", "candidate", "bool"], "class_names": ["_Instruction", "ASMap", "TestASMap", "_VarLenCoder", "_BinNode"], "class_method_calls": ["self.size", "asmap3.extends", "_CODER_INS.decode", "arg2.size", "left.get", "_BinNode.make_default", "bits.extend", "ret.append", "entries.sort", "spec_path.append", "ins.value", "node1.arg1", "asmap.diff", "int.from_bytes", "masked_bits.to_bytes", "req._trie", "self.ins", "_Instruction.RETURN", "self.arg2", "self._minval", "ipaddress.IPv6Network", "self._to_entries_minimal", "unittest.main", "right.get", "self._to_binnode", "node.ins", "self.assertEqual", "_CODER_MATCH.decode", "leaves.append", "self.assertTrue", "random.shuffle", "prefix.pop", "_CODER_ASN.decode", "_BinNode.make_end", "_Instruction.JUMP", "asmap2.extends", "asmap.to_binary", "enc.size", "ipaddress.IPv4Network", "cand.size", "random.random", "ASMap.from_binary", "prefix.append", "asmap.extends", "patched.lookup", "_Instruction.END", "asmap.lookup", "_CODER_INS.encode", "other._trie", "_BinNode.make_leaf", "_CODER_ASN.encode_size", "node0.arg2", "unittest.TestCase", "ret.items", "node1.ins", "node.clear", "copy.deepcopy", "node0.ins", "node.append", "self._clsbits", "random.getrandbits", "patched.extends", "_CODER_JUMP.encode_size", "_CODER_ASN.can_encode", "_CODER_ASN.encode", "node.arg1", "binnode.ins", "_BinNode.make_branch", "self._trie", "arg1.size", "node0.arg1", "node1.arg2", "self.__copy__", "net.network_address", "self._to_entries_flat", "ASMap._from_binnode", "node.arg2", "_Instruction.DEFAULT", "patched.update", "_CODER_JUMP.decode", "_Instruction.MATCH", "random.randrange", "_CODER_MATCH.encode_size", "leaf.append", "ret._set_trie", "leaves.pop", "ret.extend", "_CODER_JUMP.encode", "_CODER_INS.encode_size", "self._maxval", "net.prefixlen", "_CODER_MATCH.encode", "copy.copy", "ASMap.from_random", "asmap.to_entries", "self.update", "sub.ins", "self.arg1"]}, "generate-seeds.py": {"libraries": ["struct", "os", "base64.b32decode", "enum.Enum", "re", "sys"], "function_names": ["bip155_serialize", "main", "parse_spec", "name_to_bip155", "process_nodes", "ser_compact_size"], "function_calls": ["len", "bip155_serialize", "bytes", "int", "main", "print", "parse_spec", "enumerate", "name_to_bip155", "b32decode", "open", "ValueError", "process_nodes", "ser_compact_size"], "class_names": ["BIP155Network"], "class_method_calls": ["re.match", "line.find", "sys.exit", "BIP155Network.IPV4", "sys.argv", "sys.stdout", "match.group", "s.partition", "sys.stderr", "g.write", "BIP155Network.TORV2", "BIP155Network.I2P", "BIP155Network.CJDNS", "addr.split", "BIP155Network.IPV6", "addr.endswith", "BIP155Network.TORV3", "struct.pack", "line.strip", "os.path", "s.count"]}, "makeseeds.py": {"libraries": ["collections", "ipaddress", "asmap.net_to_prefix", "argparse", "typing.Union", "typing.Dict", "typing.List", "asmap.ASMap", "re", "sys"], "function_names": ["filtermultiport", "main", "parseline", "ip_stats", "dedup", "filterbyasn", "parse_args"], "function_calls": ["len", "list", "range", "filtermultiport", "net_to_prefix", "int", "main", "print", "enumerate", "parseline", "float", "ip_stats", "dedup", "filterbyasn", "open", "parse_args"], "class_names": [], "class_method_calls": ["line.split", "f.read", "re.compile", "argparser.parse_args", "args.asmap", "line.startswith", "PATTERN_IPV6.match", "sys.stderr", "result.append", "collections.defaultdict", "PATTERN_ONION.match", "args.seeds", "PATTERN_AGENT.match", "ips.sort", "ASMap.from_binary", "result.extend", "m.group", "hist.items", "asmap.lookup", "argparser.add_argument", "PATTERN_IPV4.match", "ipaddress.ip_network", "f.readlines", "argparse.ArgumentParser", "d.values"]}, "getcoins.py": {"libraries": ["requests", "xml.etree.ElementTree", "argparse", "subprocess", "io", "sys"], "function_names": ["__init__", "getpixel", "print_image", "bitcoin_cli"], "function_calls": ["range", "SystemExit", "tuple", "chr", "print_image", "int", "print", "bitcoin_cli", "input", "PPMImage", "ValueError"], "class_names": ["PPMImage"], "class_method_calls": ["self.size", "subprocess.run", "res.content", "f.read", "sys.exc_info", "line.append", "img.getpixel", "session.get", "res.status_code", "img.size", "f.readline", "self._grid", "args.imagemagick", "args.amount", "parser.parse_args", "args.addr", "args.bitcoin_cli_args", "line.rstrip", "subprocess.CalledProcessError", "rv.stdout", "subprocess.check_output", "requests.exceptions", "args.cmd", "parser.add_argument", "io.BytesIO", "svg.attrib", "res.raise_for_status", "argparse.ArgumentParser", "session.post", "xml.etree", "args.captcha", "args.faucet", "res.text", "args.password", "requests.Session"]}, "gen_key_io_test_vectors.py": {"libraries": ["test_framework.script.OP_HASH160", "test_framework.segwit_addr.Encoding", "test_framework.script.OP_1", "itertools.islice", "test_framework.script.OP_EQUALVERIFY", "test_framework.address.byte_to_base58", "random", "test_framework.address.b58chars", "test_framework.script.OP_DUP", "test_framework.script.OP_2", "test_framework.script.OP_EQUAL", "test_framework.segwit_addr.convertbits", "test_framework.script.OP_0", "test_framework.segwit_addr.bech32_encode", "test_framework.segwit_addr.decode_segwit_address", "test_framework.script.OP_CHECKSIG", "json", "test_framework.address.base58_to_byte", "os", "test_framework.script.OP_3", "test_framework.script.OP_16", "test_framework.segwit_addr.CHARSET", "sys"], "function_names": ["gen_invalid_vectors", "gen_valid_bech32_vector", "is_valid", "is_valid_bech32", "gen_invalid_bech32_vector", "gen_valid_base58_vector", "gen_invalid_base58_vector", "gen_valid_vectors", "randbool", "rand_bytes"], "function_calls": ["range", "set", "bytes", "valid_vector_generator", "is_valid_bech32", "max", "uiter", "len", "islice", "convertbits", "decode_segwit_address", "randbool", "rand_bytes", "bytearray", "byte_to_base58", "invalid_vector_generator", "list", "base58_to_byte", "int", "is_valid", "zip", "bech32_encode"], "class_names": [], "class_method_calls": ["rv.swapcase", "payload.hex", "random.expovariate", "json.dump", "data.append", "sys.argv", "sys.stdout", "sys.path", "random.randrange", "random.getrandbits", "random.choice", "random.random", "result.startswith", "result.endswith", "Encoding.BECH32", "random.randint", "random.seed", "os.path", "Encoding.BECH32M", "CHARSET.replace"]}, "log_raw_p2p_msgs.py": {"libraries": ["bcc.BPF", "bcc.USDT", "sys"], "function_names": ["print_message", "main", "handle_outbound", "handle_inbound"], "function_calls": ["print_message", "len", "USDT", "BPF", "bytes", "main", "print", "str", "exit"], "class_names": [], "class_method_calls": ["event.msg", "sys.argv", "bitcoind_with_usdts.enable_probe", "event.msg_size", "event.peer_addr", "event.peer_id", "event.peer_conn_type", "bpf.perf_buffer_poll", "event.msg_type"]}, "log_utxocache_flush.py": {"libraries": ["bcc.BPF", "bcc.USDT", "ctypes", "sys"], "function_names": ["handle_flush", "print_event", "main"], "function_calls": ["len", "USDT", "BPF", "print_event", "main", "print", "str", "exit"], "class_names": ["Data"], "class_method_calls": ["sys.argv", "event.coins_count", "ctypes.c_uint32", "ctypes.c_uint64", "bitcoind_with_usdts.enable_probe", "ctypes.cast", "event.mode", "event.duration", "event.is_flush_for_prune", "event.coins_mem_usage", "b.perf_buffer_poll", "ctypes.Structure", "ctypes.POINTER", "ctypes.c_bool"]}, "mempool_monitor.py": {"libraries": ["datetime.datetime", "bcc.BPF", "bcc.USDT", "datetime.timezone", "curses", "sys"], "function_names": ["render", "_update_event_rate", "handle_removed", "main", "_update_event_log", "handle_rejected", "handle_replaced", "__init__", "_update_event_count", "loop", "handle_added", "calculate_metrics", "get_timestamp", "_init_event_count_win", "create_win", "_init_event_rate_win", "_init_event_log_win", "parse_event", "_init_info_win", "_init_windows", "timestamp_age"], "function_calls": ["len", "USDT", "BPF", "bytes", "main", "print", "str", "min", "enumerate", "Dashboard", "NotImplementedError", "get_timestamp", "exit"], "class_names": ["Dashboard"], "class_method_calls": ["screen.nodelay", "self._update_event_count", "data.reason", "self._init_info_win", "row_format.format", "data.hash", "data.replaced_entry_time", "win.idlok", "curses.wrapper", "self._timestamps", "self._update_event_log", "win_box.derwin", "sys.argv", "Dashboard.parse_event", "curses.A_UNDERLINE", "w.refresh", "win_box.refresh", "self._screen", "events.append", "curses.A_NORMAL", "dashboard.render", "data.replacement_vsize", "data.replaced_hash", "ts_dt.strftime", "win.scrollok", "bpf.perf_buffer_poll", "win.refresh", "self._init_event_count_win", "header.format", "w.addstr", "ts_dt.timestamp", "events.clear", "curses.A_BOLD", "data.vsize", "data.replaced_vsize", "data.replacement_hash", "timezone.utc", "datetime.now", "self.calculate_metrics", "Dashboard.create_win", "Dashboard.EVENT_WIN_HEIGHT", "curses.A_REVERSE", "Dashboard.INFO_WIN_HEIGHT", "self._update_event_rate", "self._init_event_rate_win", "self._event_log_win_box", "win.addstr", "self._info_win", "Dashboard.timestamp_age", "bitcoind_with_usdts.enable_probe", "self._init_event_log_win", "data.fee", "data.replacement_fee", "self._event_history", "self._time_started", "data.replaced_fee", "self._event_log_win", "self._event_rate_win", "self._event_count_win", "curses.newwin", "win.box", "self._init_windows", "data.entry_time", "curses.curs_set"]}, "p2p_monitor.py": {"libraries": ["bcc.BPF", "bcc.USDT", "curses.wrapper", "curses", "curses.panel", "sys"], "function_names": ["__init__", "render", "add_message", "handle_inbound", "loop", "main", "handle_outbound"], "function_calls": ["len", "list", "USDT", "BPF", "bytes", "sorted", "render", "dict", "wrapper", "main", "print", "str", "enumerate", "Message", "exit", "ord", "Peer"], "class_names": ["Peer", "Message"], "class_method_calls": ["self.size", "screen.nodelay", "peer.last_messages", "info_window.border", "self.total_outbound_msgs", "curses.panel", "self.total_outbound_bytes", "peer.total_inbound_bytes", "self.inbound", "peers.keys", "screen.erase", "event.peer_addr", "msg.msg_type", "message.inbound", "sys.argv", "self.total_inbound_bytes", "curses.A_UNDERLINE", "peer.id", "info_panel.window", "curses.KEY_DOWN", "msg.inbound", "curses.A_NORMAL", "peer.total_inbound_msgs", "self.address", "bpf.perf_buffer_poll", "self.msg_type", "peer.total_outbound_msgs", "msg.size", "screen.refresh", "peer.total_outbound_bytes", "win.border", "curses.A_BOLD", "info_window.addstr", "info_panel.hide", "event.peer_id", "event.peer_conn_type", "curses.LINES", "info_panel.hidden", "event.msg_type", "panel.new_panel", "peer.connection_type", "bitcoind_with_usdts.enable_probe", "screen.getch", "curses.KEY_UP", "info_panel.show", "message.size", "event.msg_size", "self.total_inbound_msgs", "self.id", "self.connection_type", "win.erase", "peer.address", "curses.newwin", "info_window.erase", "curses.A_REVERSE", "screen.addstr", "self.last_messages"]}, "test.py": {"libraries": ["pathlib.Path", "subprocess", "json", "sys"], "function_names": ["run_verify", "expect_code", "main", "print_process_failure"], "function_calls": ["main", "print", "print_process_failure", "run_verify", "expect_code"], "class_names": [], "class_method_calls": ["subprocess.run", "subprocess.PIPE", "Path.cwd", "completed.stdout", "subprocess.CompletedProcess", "maybe_here.exists", "completed.stderr", "completed.returncode", "sys.exit", "_220.stdout", "json.loads"]}, "verify.py": {"libraries": ["enum", "hashlib.sha256", "json", "urllib.error", "os", "pathlib.PurePath", "textwrap", "argparse", "difflib", "tempfile", "logging", "pathlib.Path", "subprocess", "urllib.request", "shutil", "re", "typing", "sys"], "function_names": ["set_up_logger", "main", "parse_version_string", "verify_with_gpg", "check_multisig", "get_files_from_hosts_and_compare", "line_begins_with", "download_lines_with_urllib", "__init__", "__bool__", "verify_shasums_signature", "bool_from_env", "download_with_wget", "indent", "cleanup", "files_are_equal", "parse_sums_file", "remove_files", "verify_published_handler", "parse_gpg_result", "join_url", "verify_binary_hashes", "__repr__", "prompt_yn", "verify_binaries_handler"], "function_calls": ["set", "set_up_logger", "main", "print", "parse_version_string", "input", "verify_with_gpg", "check_multisig", "get_files_from_hosts_and_compare", "line_begins_with", "ValueError", "RuntimeError", "len", "SigData", "enumerate", "Path", "verify_shasums_signature", "open", "bool_from_env", "sha256", "download_with_wget", "indent", "cleanup", "files_are_equal", "parse_sums_file", "PurePath", "parse_gpg_result", "join_url", "dict", "int", "str", "any", "verify_binary_hashes", "prompt_yn"], "class_names": ["ReturnCode", "SigData"], "class_method_calls": ["subparsers.add_parser", "difflib.unified_diff", "files_to_hash.append", "self.trusted", "unsig.key", "log.addHandler", "ReturnCode.SUCCESS", "args.keyserver", "args.min_good_sigs", "tempfile.gettempdir", "shutil.rmtree", "enum.IntEnum", "bin_parser.set_defaults", "textwrap.indent", "ReturnCode.FILE_MISSING_FROM_ONE_HOST", "raw.lower", "got_files.append", "parser.add_argument", "file1.read", "f1.readlines", "args.import_keys", "file_path.exists", "args.quiet", "logging.StreamHandler", "log.critical", "ReturnCode.FILE_GET_FAILED", "binary_file.read", "logging.Logger", "self.name", "sig.status", "curr_sigdata.name", "pub_parser.add_argument", "os.chdir", "os.remove", "curr_sigdata.key", "t.Dict", "f2.readlines", "self.key", "subprocess.STDOUT", "ReturnCode.BAD_VERSION", "bin_parser.add_argument", "log.setLevel", "urllib.error", "binary_to_basename.items", "missing_files.append", "host.rstrip", "t.Tuple", "args.sums_file", "args.sums_sig_file", "path.lstrip", "curr_sigdata.trusted", "curr_sigdata.status", "logging.DEBUG", "log.info", "sys.exit", "ReturnCode.NO_BINARIES_MATCH", "args.require_all_hosts", "logging.Formatter", "ReturnCode.INTEGRITY_FAILURE", "sys.stderr", "status_file.name", "logging.INFO", "file2.read", "ReturnCode.NOT_ENOUGH_GOOD_SIGS", "sig.name", "args.version", "curr_sigs.append", "urllib.request", "result.returncode", "log.warning", "result.stdout", "sums_file_path.parent", "self.status", "ReturnCode.FILES_NOT_EQUAL", "tempfile.NamedTemporaryFile", "parser.add_subparsers", "json.dumps", "os.environ", "logging.WARNING", "sig.trusted", "args.json", "output.splitlines", "subprocess.run", "re.match", "version_str.split", "offending_files.append", "Path.home", "args.verbose", "line.split", "sig.key", "log.debug", "version_base.split", "os.makedirs", "pub_parser.set_defaults", "ran.returncode", "args.cleanup", "ReturnCode.BINARY_DOWNLOAD_FAILED", "unsig.name", "status_file.read", "re.Match", "parser.parse_args", "subprocess.PIPE", "args.func", "log.error", "args.trusted_keys", "console.setLevel", "argparse.Namespace", "logging.getLogger", "console.setFormatter", "argparse.ArgumentParser", "t.List", "line.strip", "t.Optional", "args.binary"]}, "verify-commits.py": {"libraries": ["os", "argparse", "hashlib", "logging", "subprocess", "time", "sys"], "function_names": ["tree_sha512sum", "main"], "function_calls": ["len", "int", "main", "print", "min", "IOError", "float", "open", "tree_sha512sum"], "class_names": [], "class_method_calls": ["overall.update", "subprocess.run", "intern.update", "subprocess.call", "line.split", "logging.DEBUG", "f.read", "args.commit", "p.wait", "sys.exit", "line.startswith", "overall.hexdigest", "args.verify_tree", "sys.stderr", "args.clean_merge", "hashlib.sha512", "line.index", "e.returncode", "parser.parse_args", "subprocess.PIPE", "time.time", "dig.encode", "intern.hexdigest", "subprocess.CalledProcessError", "files.sort", "subprocess.check_output", "p.stdin", "subprocess.Popen", "parser.add_argument", "p.stdout", "logging.getLogger", "files.append", "argparse.ArgumentParser", "os.path", "check_root_older_res.returncode", "os.environ", "logging.debug", "verify_res.stderr", "os.getenv"]}, "zmq_sub.py": {"libraries": ["struct", "zmq", "asyncio", "signal", "zmq.asyncio", "sys"], "function_names": ["__init__", "stop", "start"], "function_calls": ["len", "ZMQHandler", "chr", "print", "str"], "class_names": ["ZMQHandler"], "class_method_calls": ["self.zmqContext", "signal.SIGINT", "daemon.start", "asyncio.ensure_future", "self.loop", "body.hex", "self.zmqSubSocket", "zmq.asyncio", "sys.version_info", "struct.unpack", "asyncio.get_event_loop", "zmq.RCVHWM", "zmq.SUBSCRIBE", "sys.exit", "zmq.SUB", "self.stop", "self.handle"]}, "extract_strings_qt.py": {"libraries": ["subprocess.Popen", "subprocess.PIPE", "os", "operator", "sys"], "function_names": ["parse_po"], "function_calls": ["open", "Popen", "print", "parse_po"], "class_names": [], "class_method_calls": ["sys.argv", "messages.append", "sys.stderr", "text.split", "messages.sort", "line.rstrip", "f.write", "f.close", "out.decode", "msgid.append", "child.communicate", "os.getenv", "line.startswith", "sys.exit", "operator.itemgetter", "msgstr.append"]}, "rpcauth.py": {"libraries": ["argparse.ArgumentParser", "secrets.token_urlsafe", "secrets.token_hex", "getpass.getpass", "hmac"], "function_names": ["password_to_hmac", "generate_salt", "main", "generate_password"], "function_calls": ["ArgumentParser", "getpass", "password_to_hmac", "main", "print", "generate_password", "token_hex", "token_urlsafe", "generate_salt"], "class_names": [], "class_method_calls": ["hmac.new", "parser.add_argument", "parser.parse_args", "m.hexdigest", "salt.encode", "password.encode", "args.password", "args.username"]}, ".ycm_extra_conf.py": {"libraries": ["os"], "function_names": ["MakeRelativePathsInFlagsAbsolute", "DirectoryOfThisScript", "FindNearest", "FlagsForClangComplete", "FlagsForFile"], "function_calls": ["len", "MakeRelativePathsInFlagsAbsolute", "DirectoryOfThisScript", "FindNearest", "FlagsForClangComplete", "open"], "class_names": [], "class_method_calls": ["flag.startswith", "os.path", "new_flags.append"]}, "pyminisketch.py": {"libraries": ["random", "unittest"], "function_names": ["mul2", "decode", "construct_data", "poly_frobeniusmod", "sqr", "test", "poly_monic", "poly_gcd", "__init__", "add", "deserialize", "poly_find_roots", "inv", "poly_tracemod", "mul", "berlekamp_massey", "serialize", "poly_divmod", "field_size_capacity_test", "field_size_test", "clone", "poly_sqr", "serialized_size", "merge", "rec_split"], "function_calls": ["range", "sorted", "set", "poly_frobeniusmod", "poly_monic", "len", "poly_gcd", "poly_find_roots", "poly_tracemod", "enumerate", "Minisketch", "berlekamp_massey", "GF2Ops", "poly_divmod", "reversed", "list", "poly_sqr", "min", "rec_split"], "class_names": ["TestPolyFindRoots", "Minisketch", "TestMinisketch", "GF2Ops", "TestGF2Ops"], "class_method_calls": ["self.assertEqual", "unittest.TestCase", "self.field_size", "ret.gf", "val.to_bytes", "random.shuffle", "gf.mul2", "gf.inv", "sample.append", "sketch_b.add", "current.extend", "out.append", "other.field_size", "self.capacity", "other.capacity", "sketch_combined.merge", "int.from_bytes", "random.randrange", "sketch_b_received.deserialize", "self.construct_data", "gf.sqr", "sketch_a.add", "self.mul2", "val.pop", "sketch_combined.decode", "sketch_a.clone", "self.field_size_test", "r1.bit_length", "ret.odd_syndromes", "self.odd_syndromes", "gf.field_size", "gf.mul", "sketch_b.serialize", "r2.bit_length", "self.serialized_size", "other.odd_syndromes", "self.gf", "self.mul", "self.field_size_capacity_test", "self._modulus", "unittest.main"]}, "tests_wycheproof_generate.py": {"libraries": ["hashlib", "sys", "json", "urllib.request"], "function_names": ["to_c_array"], "function_calls": ["len", "range", "print", "str", "zip", "to_c_array", "open", "ValueError"], "class_names": [], "class_method_calls": ["cache_public_keys.keys", "cache_msgs.keys", "sys.argv", "json.load"]}, "combine_logs.py": {"libraries": ["collections.namedtuple", "itertools", "pathlib", "heapq", "os", "argparse", "tempfile", "collections.defaultdict", "re", "jinja2", "sys"], "function_names": ["find_latest_test_dir", "main", "print_node_warnings", "print_logs_plain", "get_log_events", "join_tmp", "read_logs", "print_logs_html", "is_valid_test_tmpdir"], "function_calls": ["len", "find_latest_test_dir", "main", "print", "print_logs_html", "next", "max", "print_logs_plain", "print_node_warnings", "join_tmp", "defaultdict", "open", "get_log_events", "read_logs", "namedtuple", "LogEvent", "is_valid_test_tmpdir"], "class_names": [], "class_method_calls": ["jinja2.FileSystemLoader", "argparse.RawTextHelpFormatter", "re.compile", "os.access", "os.listdir", "sys.exit", "warnings.append", "sys.stderr", "line.replace", "tempfile.gettempdir", "event.source", "args.testdir", "timestamp.replace", "heapq.merge", "time_match.group", "path.as_posix", "parser.parse_args", "TIMESTAMP_PATTERN.match", "re.search", "itertools.count", "os.walk", "args.html", "event.rstrip", "args.color", "pathlib.Path", "event.event", "parser.add_argument", "files.append", "argparse.ArgumentParser", "os.path", "event._asdict", "os.R_OK", "basename.startswith", "jinja2.Environment"]}, "create_cache.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework"], "function_names": ["run_test", "set_test_params", "setup_network"], "function_calls": ["CreateCache"], "class_names": ["CreateCache"], "class_method_calls": ["self.num_nodes"]}, "__init__.py": {"libraries": [], "function_names": [], "function_calls": [], "class_names": [], "class_method_calls": []}, "invalid_txs.py": {"libraries": ["test_framework.script.OP_AND", "test_framework.script.OP_DIV", "test_framework.script.OP_2MUL", "test_framework.script.OP_RIGHT", "test_framework.messages.CTxIn", "test_framework.script.OP_RSHIFT", "test_framework.blocktools.MAX_BLOCK_SIGOPS", "test_framework.script.OP_RETURN", "test_framework.script.OP_OR", "test_framework.script_util.MIN_PADDING", "test_framework.script.OP_MOD", "test_framework.messages.CTxOut", "test_framework.script.OP_CAT", "test_framework.script.CScript", "test_framework.script.OP_2DIV", "test_framework.messages.MAX_MONEY", "test_framework.blocktools.create_tx_with_script", "test_framework.script.OP_INVERT", "test_framework.script.OP_LEFT", "test_framework.script.OP_MUL", "test_framework.script.OP_0", "test_framework.script.OP_SUBSTR", "test_framework.script.OP_LSHIFT", "test_framework.script.OP_CHECKSIG", "test_framework.messages.COutPoint", "test_framework.script_util.script_to_p2sh_script", "test_framework.script_util.MIN_STANDARD_TX_NONWITNESS_SIZE", "test_framework.messages.SEQUENCE_FINAL", "typing.Optional", "test_framework.messages.CTransaction", "test_framework.script.OP_XOR", "abc"], "function_names": ["__init__", "iter_all_templates", "get_tx", "getDisabledOpcodeTemplate"], "function_calls": ["sum", "len", "getDisabledOpcodeTemplate", "CScript", "str", "COutPoint", "CTransaction", "CTxOut", "script_to_p2sh_script", "CTxIn", "type", "create_tx_with_script"], "class_names": ["SizeTooSmall", "DuplicateInput", "NonexistentInput", "TooManySigops", "CreateNegative", "BadTxTemplate", "CreateTooLarge", "PrevoutNullInput", "CreateSumTooLarge", "SpendTooMuch", "OutputMissing", "InputMissing", "InvalidOPIFConstruction", "BadInputOutpointIndex"], "class_method_calls": ["self.valid_txin", "spend_block.vtx", "tx.serialize_without_witness", "abc.ABCMeta", "tx.vout", "BadTxTemplate.__subclasses__", "vin.scriptSig", "abc.abstractmethod", "self.spend_tx", "tx.calc_sha256", "o.nValue", "tx.vin", "self.spend_avail"]}, "example_test.py": {"libraries": ["test_framework.blocktools.create_coinbase", "test_framework.p2p.msg_getdata", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.util.assert_equal", "test_framework.p2p.p2p_lock", "test_framework.p2p.P2PInterface", "test_framework.messages.CInv", "collections.defaultdict", "test_framework.p2p.msg_block", "test_framework.messages.MSG_BLOCK"], "function_names": ["__init__", "on_block", "custom_method", "skip_test_if_missing_module", "add_options", "on_inv", "set_test_params", "custom_function", "setup_network", "run_test"], "function_calls": ["ExampleTest", "range", "list", "create_coinbase", "sorted", "int", "CInv", "assert_equal", "msg_getdata", "custom_function", "defaultdict", "msg_block", "BaseNode", "create_block", "super"], "class_names": ["ExampleTest", "BaseNode"], "class_method_calls": ["peer_receiving.send_message", "self.num_nodes", "peer_receiving.block_receive_map", "self.skip_if_no_wallet", "self.log", "self.add_wallet_options", "self.connect_nodes", "blocks.append", "self.generate", "getdata_request.inv", "self.extra_args", "self.custom_method", "message.block", "self.setup_clean_chain", "peer_messaging.send_message", "block.solve", "self.block_time", "self.block_receive_map", "self.sync_all", "block.sha256", "self.tip", "self.nodes", "peer_receiving.wait_until", "self.setup_nodes"]}, "feature_abortnode.py": {"libraries": ["test_framework.util.get_datadir_path", "test_framework.test_framework.BitcoinTestFramework", "os"], "function_names": ["run_test", "set_test_params", "setup_network"], "function_calls": ["AbortNodeTest", "get_datadir_path"], "class_names": ["AbortNodeTest"], "class_method_calls": ["self.options", "self.generate", "self.no_op", "self.num_nodes", "os.path", "self.nodes", "self.chain", "os.unlink", "self.log", "self.connect_nodes", "self.setup_nodes", "self.setup_clean_chain"]}, "feature_addrman.py": {"libraries": ["struct", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "test_framework.messages.hash256", "test_framework.p2p.MAGIC_BYTES", "test_framework.test_node.ErrorMatch", "re", "test_framework.messages.ser_uint256"], "function_names": ["run_test", "write_addrman", "set_test_params", "serialize_addrman"], "function_calls": ["range", "len", "AddrmanTest", "hash256", "assert_equal", "init_error", "write_addrman", "serialize_addrman", "ser_uint256", "open"], "class_names": ["AddrmanTest"], "class_method_calls": ["re.escape", "os.remove", "struct.pack", "self.num_nodes", "os.path", "f.write", "self.nodes", "self.chain", "self.start_node", "self.config", "ErrorMatch.FULL_REGEX", "self.log", "self.stop_node"]}, "feature_anchors.py": {"libraries": ["test_framework.p2p.P2PInterface", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.check_node_connections", "os"], "function_names": ["run_test", "set_test_params"], "function_calls": ["range", "AnchorsTest", "int", "check_node_connections", "P2PInterface", "open", "hex"], "class_names": ["AnchorsTest"], "class_method_calls": ["block_relay_nodes_port.append", "self.num_nodes", "inbound_nodes_port.append", "os.path", "self.nodes", "self.start_node", "file_handler.read", "self.log", "self.disable_autoconnect", "self.stop_node"]}, "feature_asmap.py": {"libraries": ["shutil", "test_framework.test_framework.BitcoinTestFramework", "os"], "function_names": ["test_empty_asmap", "expected_messages", "set_test_params", "test_asmap_with_absolute_path", "test_default_asmap", "test_asmap_with_relative_path", "test_asmap_interaction_with_addrman_containing_entries", "test_default_asmap_with_missing_file", "run_test", "test_without_asmap_arg", "fill_addrman"], "function_calls": ["open", "expected_messages", "AsmapTest"], "class_names": ["AsmapTest"], "class_method_calls": ["self.test_empty_asmap", "self.num_nodes", "self.default_asmap", "f.write", "self.fill_addrman", "self.log", "self.node", "shutil.copyfile", "self.datadir", "self.asmap_raw", "os.remove", "self.test_without_asmap_arg", "self.test_asmap_with_relative_path", "self.test_asmap_interaction_with_addrman_containing_entries", "self.chain", "self.test_default_asmap_with_missing_file", "self.test_default_asmap", "self.start_node", "self.stop_node", "os.path", "self.nodes", "self.restart_node", "self.test_asmap_with_absolute_path", "self.extra_args"]}, "feature_assumevalid.py": {"libraries": ["test_framework.blocktools.create_coinbase", "test_framework.messages.msg_block", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.messages.COutPoint", "test_framework.key.ECKey", "test_framework.util.assert_equal", "test_framework.messages.CBlockHeader", "test_framework.script.OP_TRUE", "test_framework.messages.CTxOut", "test_framework.script.CScript", "test_framework.p2p.P2PInterface", "test_framework.messages.CTxIn", "test_framework.messages.CTransaction", "test_framework.blocktools.COINBASE_MATURITY", "test_framework.messages.msg_headers"], "function_names": ["set_test_params", "send_blocks_until_disconnected", "setup_network", "run_test", "send_header_for_blocks"], "function_calls": ["range", "len", "create_coinbase", "hex", "CScript", "int", "msg_headers", "COutPoint", "CBlockHeader", "CTransaction", "assert_equal", "CTxOut", "AssumeValidTest", "create_block", "msg_block", "CTxIn", "BaseNode", "ECKey"], "class_names": ["BaseNode", "AssumeValidTest"], "class_method_calls": ["self.num_nodes", "p2p_conn.send_message", "p2p2.send_header_for_blocks", "block102.solve", "headers_message.headers", "p2p1.send_message", "self.rpc_timeout", "self.blocks", "tx.vout", "self.send_message", "self.add_nodes", "tx.vin", "self.setup_clean_chain", "p2p1.sync_with_ping", "p2p_conn.is_connected", "coinbase_key.get_pubkey", "block.solve", "self.block_time", "self.start_node", "self.send_blocks_until_disconnected", "block.sha256", "coinbase_key.generate", "p2p1.send_header_for_blocks", "self.block1", "self.wait_until", "self.tip", "tx.calc_sha256", "self.nodes", "block102.sha256", "p2p0.send_header_for_blocks"]}, "feature_bind_extra.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.p2p_port", "test_framework.test_framework.SkipTest", "test_framework.netutil.get_bind_addrs", "test_framework.netutil.addr_to_hex", "test_framework.util.rpc_port", "sys"], "function_names": ["run_test", "set_test_params", "setup_network"], "function_calls": ["range", "list", "len", "set", "BindExtraTest", "addr_to_hex", "assert_equal", "map", "get_bind_addrs", "rpc_port", "p2p_port", "SkipTest", "filter"], "class_names": ["BindExtraTest"], "class_method_calls": ["self.stop_node", "self.num_nodes", "self.bind_to_localhost_only", "sys.platform", "self.add_nodes", "self.start_node", "self.nodes", "self.log", "self.setup_clean_chain", "self.extra_args", "self.expected"]}, "feature_bind_port_discover.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.test_framework.SkipTest"], "function_names": ["run_test", "add_options", "skip_test_if_missing_module", "set_test_params"], "function_calls": ["assert_equal", "len", "SkipTest", "BindPortDiscoverTest"], "class_names": ["BindPortDiscoverTest"], "class_method_calls": ["self.options", "parser.add_argument", "self.num_nodes", "self.bind_to_localhost_only", "self.nodes", "self.log", "self.extra_args", "self.setup_clean_chain"]}, "feature_bind_port_externalip.py": {"libraries": ["test_framework.util.p2p_port", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.test_framework.SkipTest"], "function_names": ["run_test", "add_options", "skip_test_if_missing_module", "set_test_params"], "function_calls": ["len", "list", "range", "assert_equal", "map", "BindPortExternalIPTest", "p2p_port", "SkipTest"], "class_names": ["BindPortExternalIPTest"], "class_method_calls": ["self.options", "parser.add_argument", "self.num_nodes", "self.bind_to_localhost_only", "self.nodes", "self.log", "self.extra_args", "self.setup_clean_chain"]}, "feature_bip68_sequence.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.tx_from_hex", "test_framework.messages.COIN", "test_framework.blocktools.add_witness_commitment", "test_framework.messages.CTxIn", "random", "time", "test_framework.blocktools.create_block", "test_framework.messages.CTxInWitness", "test_framework.util.assert_greater_than", "test_framework.blocktools.NORMAL_GBT_REQUEST_PARAMS", "test_framework.messages.CTxOut", "test_framework.script.CScript", "test_framework.blocktools.script_to_p2wsh_script", "test_framework.util.softfork_active", "test_framework.util.assert_equal", "test_framework.script.OP_TRUE", "test_framework.messages.COutPoint", "test_framework.util.assert_raises_rpc_error", "test_framework.messages.CTransaction", "test_framework.wallet.MiniWallet"], "function_names": ["activateCSV", "set_test_params", "test_disable_flag", "add_options", "test_sequence_lock_confirmed_inputs", "test_bip68_not_consensus", "test_nonzero_locks", "test_sequence_lock_unconfirmed_inputs", "run_test", "test_version2_relay", "get_median_time_past"], "function_calls": ["range", "BIP68Test", "assert_greater_than", "COutPoint", "CTransaction", "CTxInWitness", "len", "script_to_p2wsh_script", "CScript", "test_nonzero_locks", "create_block", "tx_from_hex", "MiniWallet", "assert_equal", "CTxOut", "softfork_active", "add_witness_commitment", "int", "assert_raises_rpc_error", "CTxIn"], "class_names": ["BIP68Test"], "class_method_calls": ["tx5.hash", "tx3.rehash", "tx2.hash", "self.num_nodes", "tx3.wit", "random.shuffle", "tx1.serialize", "self.test_bip68_not_consensus", "tx3.serialize", "tx.rehash", "block.hash", "self.sync_blocks", "self.log", "self.add_wallet_options", "tx2.serialize", "tx3.vin", "orig_tx.sha256", "self.wallet", "self.generate", "tx3.vout", "self.activateCSV", "tx.vout", "self.get_median_time_past", "tx4.hash", "tx2.nVersion", "tx.vin", "self.test_sequence_lock_unconfirmed_inputs", "tx1.vout", "tx5.vin", "tx1.rehash", "mini_wallet.create_self_transfer", "node.getrawmempool", "block.serialize", "orig_tx.vout", "block.solve", "time.time", "self.test_sequence_lock_confirmed_inputs", "tx.serialize", "tx2.rehash", "tx2.sha256", "mini_wallet.sendrawtransaction", "orig_tx.hash", "tx1.vin", "tx1.sha256", "tx5.serialize", "random.randint", "block.sha256", "tx.nVersion", "mini_wallet.rescan_utxos", "tx2.vout", "tx3.nVersion", "tx3.hash", "self.no_op", "tx.wit", "tx2.vin", "tx5.vout", "self.relayfee", "self.nodes", "self.test_version2_relay", "tx2.wit", "self.extra_args", "self.test_disable_flag"]}, "feature_block.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.script.OP_ENDIF", "test_framework.key.ECKey", "test_framework.script.OP_INVALIDOPCODE", "test_framework.messages.COIN", "test_framework.messages.CTxIn", "test_framework.blocktools.MAX_BLOCK_SIGOPS", "time", "test_framework.script.OP_RETURN", "struct", "test_framework.messages.CBlock", "test_framework.blocktools.create_block", "test_framework.script.OP_FALSE", "test_framework.script.LegacySignatureHash", "test_framework.script.MAX_SCRIPT_ELEMENT_SIZE", "test_framework.util.assert_greater_than", "test_framework.script.OP_2DUP", "data.invalid_txs", "test_framework.p2p.P2PDataStore", "test_framework.blocktools.get_legacy_sigopcount_block", "test_framework.messages.CTxOut", "test_framework.script.OP_CHECKMULTISIGVERIFY", "copy", "test_framework.script.CScript", "test_framework.blocktools.create_tx_with_script", "test_framework.messages.uint256_from_compact", "test_framework.messages.MAX_BLOCK_WEIGHT", "test_framework.script.OP_ELSE", "test_framework.util.assert_equal", "test_framework.script.OP_TRUE", "test_framework.script.OP_CHECKSIGVERIFY", "test_framework.messages.uint256_from_str", "test_framework.script.OP_CHECKSIG", "test_framework.blocktools.create_coinbase", "test_framework.script.OP_IF", "test_framework.messages.COutPoint", "test_framework.script_util.script_to_p2sh_script", "test_framework.messages.SEQUENCE_FINAL", "test_framework.script.SIGHASH_ALL", "test_framework.script.OP_DROP", "test_framework.messages.CTransaction", "test_framework.script.OP_CHECKMULTISIG"], "function_names": ["add_transactions_to_block", "reconnect_p2p", "set_test_params", "send_blocks", "initialize", "serialize", "normal_serialize", "create_and_sign_transaction", "next_block", "move_tip", "update_block", "sign_tx", "get_spendable_output", "create_tx", "save_spendable_output", "run_test", "bootstrap_p2p"], "function_calls": ["range", "CBrokenBlock", "bytes", "assert_greater_than", "COutPoint", "FullBlockTest", "CTransaction", "ECKey", "create_tx_with_script", "len", "CScript", "LegacySignatureHash", "get_legacy_sigopcount_block", "TxTemplate", "uint256_from_compact", "uint256_from_str", "create_block", "bytearray", "create_coinbase", "assert_equal", "CTxOut", "script_to_p2sh_script", "super", "P2PDataStore", "int", "str", "CBlock", "CTxIn"], "class_names": ["CBrokenBlock", "FullBlockTest"], "class_method_calls": ["self.create_tx", "b69.sha256", "b30.vtx", "b44.nBits", "b56p2.vtx", "tx79.hash", "b45.nBits", "b39.get_weight", "blocks2.append", "self.sign_tx", "b46.nTime", "blocks.append", "b24.get_weight", "b64a.vtx", "b46.hashMerkleRoot", "b_cb34.calc_merkle_root", "badtx.rehash", "tx_new.get_weight", "b47.rehash", "b63.vtx", "b45.nTime", "b48.nTime", "b48p.hash", "template.get_tx", "coinbase.vout", "self.setup_clean_chain", "tx1.rehash", "b64a.get_weight", "TxTemplate.__name__", "b45.solve", "b50.solve", "b_cb34.solve", "b_dup_2.vtx", "b47.nBits", "self.spendable_outputs", "tx_new.vout", "b48.solve", "block.sha256", "tx2.vout", "b45.vtx", "tx4.vout", "b44.sha256", "tx_last.vout", "self.next_block", "template.block_reject_reason", "b71.vtx", "b45.calc_merkle_root", "self.extra_args", "b37.vtx", "self.add_transactions_to_block", "b44.nTime", "b26.vtx", "b3.vtx", "self.genesis_hash", "b45.hashMerkleRoot", "coinbase.rehash", "b44.vtx", "node.getbestblockhash", "self.coinbase_pubkey", "tx3.vout", "b50.nBits", "self.move_tip", "self.coinbase_key", "b72.vtx", "tx1.vout", "b_cb34.hashMerkleRoot", "node.disconnect_p2ps", "tx_new.rehash", "b23.get_weight", "duplicate_tx.sha256", "b35.nTime", "b61.vtx", "b49.hashMerkleRoot", "b47.nNonce", "self.hashMerkleRoot", "block.calc_merkle_root", "tx78.hash", "b64a.normal_serialize", "b40.vtx", "self.send_blocks", "b64a.initialize", "b28.vtx", "tx2.vin", "base_block.vtx", "self.tip", "self.nodes", "b44.calc_merkle_root", "b52.vtx", "tx.sha256", "b44.hashPrevBlock", "self.calc_merkle_root", "self.num_nodes", "b46.solve", "self.create_and_sign_transaction", "b49.solve", "b13.hash", "tx.rehash", "copy.deepcopy", "invalid_txs.InputMissing", "block.vtx", "b46.nBits", "spend_tx.vout", "self.helper_peer", "b64a.hash", "tx.vin", "b47.sha256", "b71.sha256", "b.vtx", "b64.get_weight", "template.valid_in_block", "new_txs.append", "self.update_block", "b54.nTime", "b56.hash", "self.bootstrap_p2p", "invalid_txs.iter_all_templates", "struct.pack", "b39.vtx", "b64.hash", "tx.calc_sha256", "b45.hashPrevBlock", "b54.solve", "node.invalidateblock", "b.get_weight", "tx.serialize_with_witness", "bogus_tx.sha256", "b_dup_cb.vtx", "template.reject_reason", "duplicate_tx.hash", "tx1.calc_sha256", "self.log", "out.append", "b64.vtx", "spend.vout", "block.hashMerkleRoot", "b57p2.hash", "b44.hashMerkleRoot", "b45.sha256", "b23.vtx", "b46.vtx", "self.blocks", "tx.serialize_without_witness", "node.setmocktime", "tx.vout", "self.reconnect_p2p", "b_cb34.vtx", "b56.vtx", "b46.sha256", "duplicate_tx.serialize", "b72.sha256", "self.save_spendable_output", "block.solve", "time.time", "tx2.rehash", "b48.sha256", "b44.solve", "b46.hashPrevBlock", "self.block_heights", "tx.nLockTime", "b55.nTime", "b56p2.hash", "self.get_spendable_output", "b57.hash", "self.vtx"]}, "feature_blocksdir.py": {"libraries": ["shutil", "test_framework.test_framework.BitcoinTestFramework", "test_framework.test_framework.initialize_datadir", "os"], "function_names": ["run_test", "set_test_params"], "function_calls": ["initialize_datadir", "BlocksdirTest"], "class_names": ["BlocksdirTest"], "class_method_calls": ["self.generatetoaddress", "self.options", "self.num_nodes", "os.mkdir", "os.path", "self.nodes", "self.chain", "self.start_node", "self.log", "self.setup_clean_chain", "shutil.rmtree", "self.stop_node"]}, "feature_cltv.py": {"libraries": ["test_framework.blocktools.create_coinbase", "test_framework.blocktools.TIME_GENESIS_BLOCK", "test_framework.messages.msg_block", "test_framework.blocktools.create_block", "test_framework.script.OP_CHECKLOCKTIMEVERIFY", "test_framework.script.CScriptNum", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.messages.SEQUENCE_FINAL", "test_framework.script.OP_1NEGATE", "test_framework.script.CScript", "test_framework.p2p.P2PInterface", "test_framework.script.OP_DROP", "test_framework.messages.CTransaction", "test_framework.wallet.MiniWallet", "test_framework.wallet.MiniWalletMode"], "function_names": ["test_cltv_info", "set_test_params", "cltv_modify_tx", "cltv_invalidate", "cltv_validate", "run_test"], "function_calls": ["range", "len", "list", "create_coinbase", "BIP65Test", "cltv_modify_tx", "CScript", "int", "CScriptNum", "MiniWallet", "assert_equal", "cltv_invalidate", "CTransaction", "P2PInterface", "cltv_validate", "create_block", "msg_block"], "class_names": ["BIP65Test"], "class_method_calls": ["block.nVersion", "self.num_nodes", "tx.rehash", "block.hash", "spendtx.getwtxid", "self.log", "block.vtx", "block.hashMerkleRoot", "self.rpc_timeout", "self.generate", "peer.send_and_ping", "self.test_cltv_info", "invalid_cltv_txs.append", "tx.vin", "self.setup_clean_chain", "block.solve", "MiniWalletMode.RAW_OP_TRUE", "block.calc_merkle_root", "peer.sync_with_ping", "block.sha256", "tx.nLockTime", "self.nodes", "spendtx.hash", "wallet.create_self_transfer", "self.extra_args", "spendtx.serialize"]}, "feature_coinstatsindex.py": {"libraries": ["test_framework.wallet.MiniWallet", "test_framework.blocktools.create_coinbase", "test_framework.script.OP_FALSE", "test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.blocktools.create_block", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.wallet.getnewdestination", "test_framework.messages.CTxOut", "test_framework.messages.COIN", "test_framework.script.CScript", "test_framework.blocktools.COINBASE_MATURITY", "test_framework.script.OP_RETURN"], "function_names": ["block_sanity_check", "set_test_params", "_test_reorg_index", "_test_coin_stats_index", "_test_use_index_option", "run_test", "_test_index_rejects_hash_serialized"], "function_calls": ["create_coinbase", "CoinStatsIndexTest", "Decimal", "CScript", "getnewdestination", "int", "MiniWallet", "assert_equal", "CTxOut", "assert_raises_rpc_error", "create_block"], "class_names": ["CoinStatsIndexTest"], "class_method_calls": ["self._test_reorg_index", "cb.vout", "self._test_index_rejects_hash_serialized", "self.num_nodes", "self._test_use_index_option", "self.log", "tx2.serialize", "index_node.gettxoutsetinfo", "self.connect_nodes", "self.wallet", "self.generate", "res3.pop", "res1.pop", "self._test_coin_stats_index", "cb.rehash", "self.setup_clean_chain", "block.serialize", "index_node.invalidateblock", "block.solve", "index_node.getblockhash", "index_node.reconsiderblock", "self.sync_all", "res2.pop", "self.block_sanity_check", "self.stop_node", "self.generatetoaddress", "tx2.vout", "self.no_op", "node.gettxoutsetinfo", "self.supports_cli", "self.nodes", "self.restart_node", "self.extra_args"]}, "feature_config_args.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "time", "test_framework.util", "os"], "function_names": ["set_test_params", "add_options", "test_networkactive", "test_args_log", "test_log_buffer", "test_config_file_parser", "test_connect_with_seednode", "run_test", "test_invalid_command_line_options", "test_seed_peers"], "function_calls": ["open", "int", "ConfArgsTest"], "class_names": ["ConfArgsTest"], "class_method_calls": ["self.options", "self.num_nodes", "f.read", "f.write", "self.log", "self.test_connect_with_seednode", "self.test_config_file_parser", "self.add_wallet_options", "self.test_invalid_command_line_options", "os.linesep", "self.test_networkactive", "self.chain", "self.setup_clean_chain", "self.wallet_names", "time.time", "os.mkdir", "conf.write", "self.start_node", "self.test_seed_peers", "self.stop_node", "self.is_wallet_compiled", "self.test_log_buffer", "self.test_args_log", "os.path", "util.write_config", "self.supports_cli", "self.nodes", "self.restart_node", "self.disable_autoconnect", "arg.startswith", "util.assert_equal"]}, "feature_csv_activation.py": {"libraries": ["test_framework.wallet.MiniWallet", "test_framework.blocktools.create_coinbase", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.util.softfork_active", "test_framework.script.OP_CHECKSEQUENCEVERIFY", "test_framework.util.assert_equal", "test_framework.wallet.MiniWalletMode", "test_framework.p2p.P2PDataStore", "test_framework.script.OP_DROP", "test_framework.script.CScript", "itertools.product", "time"], "function_names": ["generate_blocks", "create_test_block", "set_test_params", "send_blocks", "create_bip112txs", "send_generic_input_tx", "create_self_transfer_from_utxo", "create_bip112emptystack", "create_bip112special", "create_bip68txs", "all_rlt_txs", "relative_locktime", "run_test"], "function_calls": ["BIP68_112_113Test", "range", "len", "product", "create_coinbase", "list", "CScript", "P2PDataStore", "int", "enumerate", "MiniWallet", "assert_equal", "all_rlt_txs", "create_block", "relative_locktime", "softfork_active"], "class_names": ["BIP68_112_113Test"], "class_method_calls": ["bip113tx_v1.nLockTime", "self.num_nodes", "self.miniwallet", "tx.rehash", "txs.append", "self.coinbase_blocks", "bip113tx_v1.nVersion", "self.create_test_block", "self.tipheight", "self.send_generic_input_tx", "self.log", "self.generate", "self.helper_peer", "self.create_bip68txs", "inputs.append", "tx.vin", "self.last_block_time", "self.setup_clean_chain", "self.create_self_transfer_from_utxo", "self.create_bip112txs", "bip68inputs.append", "block.solve", "bip113tx_v2.vin", "time.time", "bip113tx_v2.nVersion", "success_txs.extend", "bip112diverseinputs.append", "block.sha256", "tx.nVersion", "bip113tx_v2.nLockTime", "self.send_blocks", "time_txs.append", "input_tx.rehash", "self.generate_blocks", "self.create_bip112emptystack", "test_blocks.append", "bip113tx_v1.vin", "self.tip", "self.supports_cli", "bip68success_txs.extend", "self.nodes", "self.create_bip112special", "MiniWalletMode.RAW_P2PK", "bip112basicinputs.append", "self.extra_args", "success_txs.append", "coinbases.pop"]}, "feature_dbcrash.py": {"libraries": ["errno", "test_framework.wallet.MiniWallet", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "http.client", "test_framework.wallet.getnewdestination", "test_framework.messages.COIN", "time", "test_framework.blocktools.COINBASE_MATURITY", "random"], "function_names": ["sync_node3blocks", "set_test_params", "restart_node", "submit_block_catch_error", "setup_network", "verify_utxo_hash", "run_test", "generate_small_transactions"], "function_calls": ["range", "len", "sum", "getnewdestination", "int", "min", "ChainstateWriteCrashTest", "MiniWallet", "assert_equal", "AssertionError"], "class_names": ["ChainstateWriteCrashTest"], "class_method_calls": ["self.sync_node3blocks", "self.num_nodes", "http.client", "random.shuffle", "e.errno", "self.node1_args", "block_hashes.extend", "self.log", "self.verify_utxo_hash", "self.wait_for_node_exit", "self.rpc_timeout", "self.base_args", "blocks.append", "self.submit_block_catch_error", "self.wallet", "self.generate", "self.crashed_on_restart", "self.node3_args", "utxo_list.extend", "self.add_nodes", "errno.EPIPE", "self.node0_args", "time.time", "random.random", "block_hashes_to_sync.append", "self.generate_small_transactions", "self.start_node", "self.node2_args", "random.randint", "errno.ECONNRESET", "time.sleep", "self.generatetoaddress", "self.no_op", "self.restart_counts", "utxo_list.pop", "self.supports_cli", "self.nodes", "self.restart_node", "errno.ECONNREFUSED", "self.extra_args", "self.start_nodes"]}, "feature_dersig.py": {"libraries": ["test_framework.blocktools.create_coinbase", "test_framework.messages.msg_block", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.util.assert_equal", "test_framework.p2p.P2PInterface", "test_framework.script.CScript", "test_framework.wallet.MiniWallet", "test_framework.wallet.MiniWalletMode"], "function_names": ["set_test_params", "test_dersig_info", "create_tx", "run_test", "unDERify"], "function_calls": ["len", "create_coinbase", "CScript", "int", "BIP66Test", "MiniWallet", "assert_equal", "P2PInterface", "create_block", "msg_block", "unDERify"], "class_names": ["BIP66Test"], "class_method_calls": ["block.nVersion", "self.create_tx", "self.num_nodes", "self.miniwallet", "block.hash", "spendtx.getwtxid", "self.log", "block.vtx", "self.test_dersig_info", "block.hashMerkleRoot", "self.rpc_timeout", "newscript.append", "self.generate", "peer.send_and_ping", "tx.vin", "self.setup_clean_chain", "block.solve", "self.coinbase_txids", "block.calc_merkle_root", "peer.sync_with_ping", "block.sha256", "spendtx.rehash", "self.nodes", "spendtx.hash", "MiniWalletMode.RAW_P2PK", "self.extra_args", "spendtx.serialize"]}, "feature_dirsymlinks.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "os"], "function_names": ["rename_and_link", "run_test", "set_test_params"], "function_calls": ["rename_and_link", "SymlinkTest"], "class_names": ["SymlinkTest"], "class_method_calls": ["self.num_nodes", "os.path", "self.nodes", "self.start_node", "os.symlink", "os.rename", "self.stop_node"]}, "feature_discover.py": {"libraries": ["socket", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["test_local_addresses", "set_test_params", "is_valid_ipv6_address", "is_valid_ipv4_address", "validate_addresses", "run_test"], "function_calls": ["len", "list", "DiscoverTest", "is_valid_ipv6_address", "is_valid_ipv4_address", "assert_equal"], "class_names": ["DiscoverTest"], "class_method_calls": ["socket.inet_pton", "socket.AF_INET6", "socket.inet_aton", "self.validate_addresses", "self.num_nodes", "self.bind_to_localhost_only", "socket.error", "self.test_local_addresses", "self.nodes", "self.restart_node", "self.log", "self.setup_clean_chain"]}, "feature_fee_estimation.py": {"libraries": ["test_framework.wallet.MiniWallet", "test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_greater_than_or_equal", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_greater_than", "test_framework.messages.COIN", "copy.deepcopy", "test_framework.util.satoshi_round", "random", "time"], "function_names": ["check_smart_estimates", "test_estimate_dat_is_flushed_periodically", "set_test_params", "initial_split", "make_tx", "sanity_check_rbf_estimates", "check_raw_estimates", "check_estimates", "sanity_check_estimates_range", "test_feerate_mempoolminfee", "test_old_fee_estimate_file", "small_txpuzzle_randfee", "transact_and_mine", "setup_network", "test_acceptstalefeeestimates_option", "run_test"], "function_calls": ["check_smart_estimates", "range", "assert_greater_than", "max", "float", "small_txpuzzle_randfee", "satoshi_round", "RuntimeError", "len", "enumerate", "open", "MiniWallet", "assert_equal", "assert_greater_than_or_equal", "EstimateFeeTest", "deepcopy", "Decimal", "int", "make_tx", "min", "check_raw_estimates", "check_estimates", "AssertionError", "assert_raises_rpc_error"], "class_names": ["EstimateFeeTest"], "class_method_calls": ["node.estimatesmartfee", "self.transact_and_mine", "self.num_nodes", "node.decoderawtransaction", "batch_reqs.append", "random.shuffle", "node.sendrawtransaction", "tx.rehash", "self.test_old_fee_estimate_file", "txs.append", "self.log", "node.batch", "utxos_to_respend.append", "self.connect_nodes", "miner.prioritisetransaction", "self.sanity_check_estimates_range", "self.wallet", "self.generate", "self.test_estimate_dat_is_flushed_periodically", "os.remove", "random.randrange", "tx.vout", "mining_node.getblock", "self.add_nodes", "self.chain", "self.sync_mempools", "self.confutxo", "self.test_acceptstalefeeestimates_option", "node.getrawmempool", "tx.hash", "self.memutxo", "from_node.sendrawtransaction", "time.time", "tx.serialize", "conflist.pop", "self.initial_split", "newmem.append", "self.start_node", "self.sync_all", "utxos_to_spend.append", "self.sanity_check_rbf_estimates", "txids_to_replace.append", "node.getmempoolinfo", "random.randint", "wallet.create_self_transfer_multi", "unconflist.append", "self.stop_node", "n.batch", "unconflist.pop", "tx.get_vsize", "self.no_op", "utxos_to_respend.pop", "os.utime", "os.path", "self.nodes", "self.restart_node", "self.test_feerate_mempoolminfee", "node.estimaterawfee", "wallet.create_self_transfer", "utxos.pop", "self.extra_args", "self.fees_per_kb"]}, "feature_filelock.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "os", "string", "test_framework.test_node.ErrorMatch", "random"], "function_names": ["set_test_params", "add_options", "setup_network", "run_test", "check_wallet_filelock"], "function_calls": ["range", "FilelockTest", "check_wallet_filelock"], "class_names": ["FilelockTest"], "class_method_calls": ["string.ascii_lowercase", "self.num_nodes", "self.is_wallet_compiled", "random.choice", "os.path", "self.add_nodes", "self.chain", "self.is_sqlite_compiled", "self.nodes", "self.config", "self.log", "ErrorMatch.PARTIAL_REGEX", "self.is_bdb_compiled", "self.add_wallet_options", "self.setup_clean_chain"]}, "feature_help.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["get_node_output", "run_test", "set_test_params", "setup_network"], "function_calls": ["assert_equal", "HelpTest"], "class_names": ["HelpTest"], "class_method_calls": ["self.get_node_output", "self.num_nodes", "self.add_nodes", "self.nodes", "self.log", "self.setup_clean_chain"]}, "feature_includeconf.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "os"], "function_names": ["setup_chain", "run_test", "set_test_params"], "function_calls": ["IncludeConfTest", "open", "super"], "class_names": ["IncludeConfTest"], "class_method_calls": ["self.options", "os.remove", "subversion.endswith", "self.num_nodes", "os.path", "f.write", "self.nodes", "self.start_node", "self.log", "self.stop_node"]}, "feature_index_prune.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_greater_than", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["restart_without_indices", "set_test_params", "reconnect_nodes", "sync_index", "mine_batches", "run_test"], "function_calls": ["range", "len", "FeatureIndexPruneTest", "assert_greater_than", "enumerate", "assert_equal", "assert_raises_rpc_error"], "class_names": ["FeatureIndexPruneTest"], "class_method_calls": ["self.generate", "self.stop_node", "node.assert_debug_log", "self.num_nodes", "self.restart_without_indices", "node.gettxoutsetinfo", "node.getblockfilter", "self.wait_until", "self.sync_index", "self.mine_batches", "self.nodes", "node.pruneblockchain", "self.sync_blocks", "self.restart_node", "self.reconnect_nodes", "self.log", "self.extra_args", "self.connect_nodes"]}, "feature_init.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "test_framework.test_framework.SkipTest", "test_framework.test_node.ErrorMatch", "pathlib.Path"], "function_names": ["check_clean_start", "set_test_params", "add_options", "sigterm_node", "run_test"], "function_calls": ["check_clean_start", "list", "sigterm_node", "str", "assert_equal", "Path", "InitStressTest", "SkipTest"], "class_names": ["InitStressTest"], "class_method_calls": ["files_to_disturb.items", "self.num_nodes", "os.name", "node.process", "self.log", "self.add_wallet_options", "node.chain_path", "node.wait_for_rpc_connection", "node.getblockcount", "lines_to_terminate_after.append", "self.setup_clean_chain", "node.start", "target_file.rename", "ErrorMatch.PARTIAL_REGEX", "self.is_wallet_compiled", "self.stop_node", "node.wait_for_debug_log", "self.nodes", "node.assert_start_raises_init_error"]}, "feature_loadblock.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "tempfile", "subprocess", "urllib", "test_framework.blocktools.COINBASE_MATURITY", "sys"], "function_names": ["run_test", "set_test_params"], "function_calls": ["assert_equal", "open", "LoadblockTest"], "class_names": ["LoadblockTest"], "class_method_calls": ["subprocess.run", "self.options", "self.num_nodes", "cfg.write", "node_url.password", "self.log", "self.generate", "node_url.username", "self.chain", "self.config", "urllib.parse", "node_url.port", "sys.executable", "self.setup_clean_chain", "hash_list.name", "self.no_op", "tempfile.NamedTemporaryFile", "os.path", "self.supports_cli", "self.nodes", "self.restart_node", "node_url.hostname"]}, "feature_logging.py": {"libraries": ["test_framework.test_node.ErrorMatch", "test_framework.test_framework.BitcoinTestFramework", "os"], "function_names": ["run_test", "relative_log_path", "set_test_params"], "function_calls": ["LoggingTest"], "class_names": ["LoggingTest"], "class_method_calls": ["self.options", "os.devnull", "self.stop_node", "self.num_nodes", "os.mkdir", "os.path", "self.nodes", "self.chain", "self.start_node", "self.restart_node", "os.unlink", "ErrorMatch.FULL_REGEX", "self.relative_log_path", "self.setup_clean_chain"]}, "feature_maxtipage.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "time", "test_framework.util.assert_equal"], "function_names": ["test_maxtipage", "run_test", "set_test_params"], "function_calls": ["max", "assert_equal", "int", "MaxTipAgeTest"], "class_names": ["MaxTipAgeTest"], "class_method_calls": ["self.generate", "self.num_nodes", "node_miner.setmocktime", "time.time", "self.test_maxtipage", "self.nodes", "self.restart_node", "self.log", "self.connect_nodes", "node_ibd.setmocktime", "node_ibd.getblockchaininfo", "self.setup_clean_chain"]}, "feature_maxuploadtarget.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.mine_large_block", "test_framework.p2p.P2PInterface", "test_framework.messages.CInv", "collections.defaultdict", "test_framework.messages.msg_getdata", "test_framework.messages.MSG_BLOCK", "test_framework.wallet.MiniWallet", "time"], "function_names": ["__init__", "on_block", "set_test_params", "on_inv", "run_test"], "function_calls": ["range", "len", "int", "CInv", "MaxUploadTest", "MiniWallet", "assert_equal", "TestP2PConn", "msg_getdata", "defaultdict", "super", "mine_large_block"], "class_names": ["TestP2PConn", "MaxUploadTest"], "class_method_calls": ["self.wallet", "self.generate", "peer.send_and_ping", "self.stop_node", "self.num_nodes", "p2p_conns.append", "time.time", "peer.block_receive_map", "getdata_request.inv", "self.supports_cli", "self.block_receive_map", "self.nodes", "self.restart_node", "message.block", "self.log", "self.extra_args", "self.setup_clean_chain"]}, "feature_minchainwork.py": {"libraries": ["test_framework.p2p.msg_getheaders", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.p2p.P2PInterface", "time"], "function_names": ["run_test", "set_test_params", "setup_network"], "function_calls": ["range", "len", "int", "msg_getheaders", "assert_equal", "P2PInterface", "MinimumChainWorkTest"], "class_names": ["MinimumChainWorkTest"], "class_method_calls": ["self.num_nodes", "self.log", "msg.hashstop", "self.connect_nodes", "self.generate", "peer.send_and_ping", "self.extra_args", "self.setup_clean_chain", "msg.locator", "time.time", "self.sync_all", "self.stop_node", "time.sleep", "n.getblockcount", "self.no_op", "self.node_min_work", "peer.last_message", "self.nodes", "self.setup_nodes"]}, "feature_notifications.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "test_framework.descriptors.descsum_create", "test_framework.address.ADDRESS_BCRT1_UNSPENDABLE"], "function_names": ["set_test_params", "add_options", "expect_wallet_notify", "notify_outputname", "setup_network", "run_test"], "function_calls": ["range", "list", "sorted", "len", "chr", "notify_outputname", "str", "enumerate", "NotificationsTest", "assert_equal", "descsum_create", "map", "super", "open"], "class_names": ["NotificationsTest"], "class_method_calls": ["self.expect_wallet_notify", "self.options", "self.walletnotify_dir", "self.num_nodes", "self.shutdownnotify_file", "f.read", "self.disable_syscall_sandbox", "self.sync_blocks", "os.listdir", "self.default_wallet_name", "self.log", "self.add_wallet_options", "self.shutdownnotify_dir", "self.connect_nodes", "self.wallet", "os.remove", "self.sync_mempools", "self.blocknotify_dir", "self.setup_clean_chain", "self.wallet_names", "os.mkdir", "self.alertnotify_dir", "self.is_wallet_compiled", "self.generatetoaddress", "self.disconnect_nodes", "self.no_op", "self.wait_until", "os.path", "self.nodes", "self.stop_nodes", "os.name", "self.extra_args"]}, "feature_nulldummy.py": {"libraries": ["test_framework.script.OP_0", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.messages.tx_from_hex", "test_framework.util.assert_equal", "test_framework.address.address_to_scriptpubkey", "test_framework.script.OP_TRUE", "test_framework.util.assert_raises_rpc_error", "test_framework.wallet.getnewdestination", "test_framework.key.ECKey", "test_framework.blocktools.NORMAL_GBT_REQUEST_PARAMS", "test_framework.wallet_util.bytes_to_wif", "test_framework.blocktools.add_witness_commitment", "test_framework.messages.CTransaction", "test_framework.blocktools.COINBASE_MATURITY", "time"], "function_names": ["invalidate_nulldummy_tx", "create_transaction", "set_test_params", "block_submit", "run_test"], "function_calls": ["NULLDUMMYTest", "invalidate_nulldummy_tx", "bytes", "tx_from_hex", "getnewdestination", "int", "assert_equal", "bytes_to_wif", "CTransaction", "address_to_scriptpubkey", "assert_raises_rpc_error", "create_block", "ECKey", "add_witness_commitment"], "class_names": ["NULLDUMMYTest"], "class_method_calls": ["self.num_nodes", "node.getblocktemplate", "tx.rehash", "block.hash", "self.wit_ms_address", "self.coinbase_blocks", "self.create_transaction", "self.log", "eckey.get_pubkey", "test5tx.serialize_with_witness", "self.privkey", "self.generate", "node.getbestblockhash", "self.lastblockheight", "self.lastblockhash", "test2tx.serialize_with_witness", "tx.vin", "coinbase_txid.append", "self.setup_clean_chain", "block.serialize", "eckey.get_bytes", "test1txs.append", "block.solve", "time.time", "self.block_submit", "i.serialize_with_witness", "self.ms_address", "test4tx.serialize_with_witness", "node.submitblock", "test5tx.wit", "self.nodes", "self.lastblocktime", "test2tx.hash", "self.pubkey", "test6txs.append", "self.extra_args", "eckey.generate"]}, "feature_posix_fs_permissions.py": {"libraries": ["stat", "test_framework.test_framework.BitcoinTestFramework", "os"], "function_names": ["skip_test_if_missing_module", "set_test_params", "check_file_permissions", "check_directory_permissions", "run_test"], "function_calls": ["PosixFsPermissionsTest"], "class_names": ["PosixFsPermissionsTest"], "class_method_calls": ["stat.S_IXUSR", "self.check_directory_permissions", "os.lstat", "stat.S_IWUSR", "self.num_nodes", "stat.S_IRUSR", "os.path", "self.nodes", "self.chain", "stat.filemode", "stat.S_IFDIR", "self.log", "self.setup_clean_chain", "stat.S_IFREG", "self.skip_if_platform_not_posix", "self.stop_node", "self.check_file_permissions"]}, "feature_presegwit_node_upgrade.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.softfork_active", "test_framework.util.assert_equal", "os"], "function_names": ["run_test", "set_test_params"], "function_calls": ["assert_equal", "SegwitUpgradeTest", "softfork_active"], "class_names": ["SegwitUpgradeTest"], "class_method_calls": ["node.getblockcount", "self.generate", "self.stop_node", "self.num_nodes", "self.nodes", "self.start_node", "self.log", "node.assert_start_raises_init_error", "self.extra_args", "self.setup_clean_chain", "os.linesep"]}, "feature_proxy.py": {"libraries": ["test_framework.socks5.Socks5Configuration", "test_framework.socks5.AddressType", "test_framework.socks5.Socks5Command", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.p2p_port", "test_framework.socks5.Socks5Server", "test_framework.netutil.test_ipv6_local", "socket"], "function_names": ["set_test_params", "networks_dict", "network_test", "setup_nodes", "run_test", "node_test"], "function_calls": ["len", "set", "Socks5Configuration", "test_ipv6_local", "ProxyTest", "networks_dict", "assert_equal", "Socks5Server", "isinstance", "frozenset", "p2p_port"], "class_names": ["ProxyTest"], "class_method_calls": ["AddressType.DOMAINNAME", "self.num_nodes", "n4.keys", "n2.keys", "n1.keys", "self.i2p_sam", "self.log", "nodes_network_info.append", "self.network_test", "cmd.atyp", "self.serv1", "socket.AF_INET6", "rv.append", "node.getpeerinfo", "self.add_nodes", "self.conf2", "self.conf3", "self.setup_clean_chain", "self.node_test", "n3.keys", "self.conf1", "node.getnetworkinfo", "self.serv2", "self.start_node", "self.have_ipv6", "cmd.port", "cmd.username", "node.addnode", "self.stop_node", "self.serv3", "n0.keys", "x.username", "self.nodes", "cmd.password", "x.password", "self.start_nodes", "cmd.addr"]}, "feature_pruning.py": {"libraries": ["test_framework.blocktools.create_coinbase", "test_framework.blocktools.MIN_BLOCKS_TO_KEEP", "test_framework.blocktools.create_block", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_greater_than", "test_framework.script.CScript", "test_framework.script.OP_NOP", "test_framework.script.OP_RETURN"], "function_names": ["calc_usage", "reorg_test", "setup_nodes", "add_options", "create_chain_with_staleblocks", "test_scanblocks_pruned", "create_big_chain", "set_test_params", "height", "reorg_back", "wallet_test", "setup_network", "has_block", "run_test", "test_invalid_command_line_options", "test_height_min", "mine_large_blocks", "prune", "manual_test"], "function_calls": ["range", "sum", "calc_usage", "len", "assert_raises_rpc_error", "create_coinbase", "mine_large_blocks", "CScript", "height", "int", "assert_greater_than", "prune", "max", "assert_equal", "has_block", "create_block", "PruneTest"], "class_names": ["PruneTest"], "class_method_calls": ["bytes.fromhex", "self.reorg_test", "self.prunedir", "self.num_nodes", "mine_large_blocks.nTime", "self.sync_blocks", "os.listdir", "self.log", "self.add_wallet_options", "self.rpc_timeout", "self.connect_nodes", "self.test_invalid_command_line_options", "node.getblockhash", "node.getblockcount", "self.generate", "node.getbestblockhash", "self.mainchainhash2", "self.mainchainheight", "node.pruneblockchain", "self.add_nodes", "self.full_node_default_args", "self.chain", "self.setup_clean_chain", "node.getblockchaininfo", "mine_large_blocks.__dict__", "block.serialize", "self.test_scanblocks_pruned", "self.test_height_min", "self.manual_test", "block.solve", "self.setup_nodes", "self.create_big_chain", "self.wallet_test", "node.scanblocks", "self.start_node", "self.forkheight", "self.forkhash", "node.getblockheader", "block.sha256", "self.is_wallet_compiled", "self.stop_node", "self.disconnect_nodes", "self.no_op", "false_positive_spk.hex", "node.submitblock", "self.create_chain_with_staleblocks", "self.import_deterministic_coinbase_privkeys", "node.getblock", "self.wait_until", "os.path", "self.supports_cli", "self.nodes", "self.restart_node", "self.extra_args", "self.start_nodes", "self.reorg_back"]}, "feature_rbf.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.messages.MAX_BIP125_RBF_SEQUENCE", "test_framework.util.assert_raises_rpc_error", "test_framework.messages.SEQUENCE_FINAL", "test_framework.address.ADDRESS_BCRT1_UNSPENDABLE", "test_framework.messages.COIN", "test_framework.wallet.MiniWallet"], "function_names": ["test_too_many_replacements_with_default_mempool_params", "test_doublespend_tree", "test_doublespend_chain", "test_fullrbf", "add_options", "test_spends_of_conflicting_outputs", "test_new_unconfirmed_inputs", "test_simple_doublespend", "test_replacement_relay_fee", "set_test_params", "test_no_inherited_signaling", "test_rpc", "branch", "run_test", "test_replacement_feeperkb", "test_prioritised_transactions", "test_opt_in", "make_utxo", "test_too_many_replacements"], "function_calls": ["len", "list", "range", "Decimal", "int", "branch", "MiniWallet", "assert_equal", "ReplaceByFeeTest", "assert_raises_rpc_error"], "class_names": ["ReplaceByFeeTest"], "class_method_calls": ["wallet.get_utxo", "self.test_replacement_feeperkb", "self.num_nodes", "self.is_specified_wallet_compiled", "self.test_too_many_replacements", "self.log", "wallet.send_self_transfer_multi", "self.add_wallet_options", "self.test_too_many_replacements_with_default_mempool_params", "self.test_fullrbf", "self.wallet", "self.test_doublespend_chain", "self.generate", "wallet.send_self_transfer", "double_tx.vin", "tx.vout", "normal_node.getmempoolentry", "self.test_prioritised_transactions", "self.test_rpc", "dbl_tx.vout", "node.getrawmempool", "self.test_opt_in", "tx.serialize", "self.init_wallet", "self.test_doublespend_tree", "self.test_spends_of_conflicting_outputs", "dbl_tx.serialize", "double_tx.serialize", "self.test_simple_doublespend", "wallet.create_self_transfer_multi", "self.test_no_inherited_signaling", "chain_txids.append", "root_utxos.append", "self.supports_cli", "self.nodes", "normal_node.sendrawtransaction", "self.restart_node", "self.make_utxo", "self.extra_args", "self.test_new_unconfirmed_inputs", "self.test_replacement_relay_fee"]}, "feature_reindex.py": {"libraries": ["test_framework.p2p.MAGIC_BYTES", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os"], "function_names": ["out_of_order", "set_test_params", "reindex", "find_block", "run_test"], "function_calls": ["assert_equal", "open", "find_block", "ReindexTest"], "class_names": ["ReindexTest"], "class_method_calls": ["self.generatetoaddress", "self.out_of_order", "b.find", "self.num_nodes", "bf.read", "bf.seek", "os.path", "self.nodes", "self.stop_nodes", "self.log", "self.reindex", "self.start_nodes", "self.setup_clean_chain", "bf.write"]}, "feature_remove_pruned_files_on_startup.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "os"], "function_names": ["mine_batches", "run_test", "set_test_params"], "function_calls": ["FeatureRemovePrunedFilesOnStartupTest", "range"], "class_names": ["FeatureRemovePrunedFilesOnStartupTest"], "class_method_calls": ["fd2.close", "self.generate", "self.num_nodes", "os.name", "self.mine_batches", "fd1.close", "os.path", "os.open", "self.nodes", "self.sync_blocks", "os.O_RDONLY", "self.restart_node", "os.fdopen", "self.extra_args"]}, "feature_segwit.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.tx_from_hex", "test_framework.util.try_rpc", "test_framework.address.script_to_p2sh", "test_framework.script_util.key_to_p2wpkh_script", "test_framework.address.key_to_p2pkh", "test_framework.messages.COIN", "test_framework.messages.CTxIn", "test_framework.script.OP_1", "test_framework.wallet_util.get_generate_key", "test_framework.script_util.script_to_p2wsh_script", "decimal.Decimal", "test_framework.script_util.key_to_p2pkh_script", "test_framework.util.assert_is_hex_string", "test_framework.messages.CTxOut", "test_framework.script_util.key_to_p2pk_script", "test_framework.address.program_to_witness", "test_framework.script.CScript", "test_framework.util.assert_greater_than_or_equal", "test_framework.util.assert_equal", "test_framework.descriptors.descsum_create", "test_framework.script.OP_TRUE", "test_framework.script_util.keys_to_multisig_script", "test_framework.blocktools.send_to_witness", "test_framework.script.OP_0", "test_framework.messages.COutPoint", "test_framework.address.script_to_p2sh_p2wsh", "test_framework.script_util.script_to_p2sh_script", "test_framework.util.assert_raises_rpc_error", "test_framework.blocktools.witness_script", "test_framework.address.script_to_p2wsh", "test_framework.script.OP_DROP", "test_framework.messages.CTransaction"], "function_names": ["getutxo", "skip_test_if_missing_module", "set_test_params", "add_options", "p2pkh_address_to_script", "success_mine", "find_spendable_utxo", "fail_accept", "mine_and_test_listunspent", "setup_network", "p2sh_address_to_script", "run_test", "create_and_mine_tx_from_txids"], "function_calls": ["range", "key_to_p2pkh_script", "get_generate_key", "COutPoint", "key_to_p2pk_script", "CTransaction", "len", "key_to_p2pkh", "script_to_p2wsh_script", "CScript", "find_spendable_utxo", "all", "descsum_create", "getutxo", "key_to_p2wpkh_script", "program_to_witness", "tx_from_hex", "send_to_witness", "script_to_p2wsh", "assert_equal", "try_rpc", "CTxOut", "assert_greater_than_or_equal", "script_to_p2sh_script", "super", "witness_script", "SegWitTest", "Decimal", "int", "keys_to_multisig_script", "script_to_p2sh", "AssertionError", "script_to_p2sh_p2wsh", "assert_raises_rpc_error", "assert_is_hex_string", "CTxIn"], "class_names": ["SegWitTest"], "class_method_calls": ["bytes.fromhex", "self.options", "tx1.get_weight", "unseen_anytime.extend", "wit_ids.append", "self.num_nodes", "solvable_after_importaddress.append", "spendable_after_importaddress.extend", "p2pk.hex", "op1.hex", "tx.rehash", "self.skip_if_no_wallet", "self.sync_blocks", "tx1.calc_sha256", "compressed_solvable_address.append", "self.log", "txtmp.vout", "self.add_wallet_options", "tx.get_weight", "self.p2pkh_address_to_script", "self.connect_nodes", "self.rpc_timeout", "spendable_anytime.extend", "key.privkey", "self.generate", "self.create_and_mine_tx_from_txids", "tx.serialize_without_witness", "tx.vout", "spendable_txid.append", "p2pkh.hex", "self.fail_accept", "tx.vin", "bare.hex", "self.setup_clean_chain", "tx1.get_vsize", "p2sh_ids.append", "node.listunspent", "solvable_after_importaddress.extend", "solvable_anytime.extend", "unsolvable_after_importaddress.append", "key.pubkey", "tx.serialize", "self.success_mine", "key.p2wpkh_addr", "self.sync_all", "self.mine_and_test_listunspent", "key.p2sh_p2wpkh_addr", "self.stop_node", "solvable_txid.append", "uncompressed_solvable_address.append", "self.p2sh_address_to_script", "tx.get_vsize", "p2wshop1.hex", "tx.wit", "uncompressed_spendable_address.append", "node.getblock", "premature_witaddress.append", "tx.calc_sha256", "unsolvablep2pkh.hex", "self.nodes", "compressed_spendable_address.append", "self.restart_node", "self.pubkey", "unsolvablep2wshp2pkh.hex", "importlist.append", "unseen_anytime.append", "self.extra_args"]}, "feature_settings.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "json", "test_framework.util.assert_equal", "test_framework.test_node.ErrorMatch", "pathlib.Path"], "function_names": ["run_test", "set_test_params"], "function_calls": ["assert_equal", "Path", "SettingsTest"], "class_names": ["SettingsTest"], "class_method_calls": ["self.wallet_names", "altsettings.open", "conf.open", "self.stop_node", "node.assert_debug_log", "self.num_nodes", "node.datadir", "conf.write", "self.nodes", "self.chain", "self.start_node", "ErrorMatch.PARTIAL_REGEX", "json.load", "settings.open", "node.assert_start_raises_init_error", "fp.write", "json.dump", "self.setup_clean_chain"]}, "feature_shutdown.py": {"libraries": ["test_framework.util.get_rpc_proxy", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "threading.Thread"], "function_names": ["set_test_params", "run_test", "test_long_call"], "function_calls": ["len", "get_rpc_proxy", "ShutdownTest", "assert_equal", "Thread"], "class_names": ["ShutdownTest"], "class_method_calls": ["node.getblockcount", "self.stop_node", "self.num_nodes", "node.waitfornewblock", "self.wait_until", "self.supports_cli", "self.nodes", "self.setup_clean_chain"]}, "feature_signet.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal"], "function_names": ["run_test", "set_test_params", "setup_network"], "function_calls": ["assert_equal", "SignetBasicTest", "Decimal"], "class_names": ["SignetBasicTest"], "class_method_calls": ["self.generate", "self.no_op", "self.num_nodes", "self.setup_nodes", "self.nodes", "self.chain", "self.restart_node", "self.log", "self.connect_nodes", "self.extra_args", "self.setup_clean_chain"]}, "feature_startupnotify.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os"], "function_names": ["get_count", "run_test", "set_test_params"], "function_calls": ["open", "assert_equal", "StartupNotifyTest", "get_count"], "class_names": ["StartupNotifyTest"], "class_method_calls": ["self.options", "self.num_nodes", "f.read", "os.path", "self.wait_until", "self.disable_syscall_sandbox", "self.nodes", "self.restart_node", "file_content.count", "self.log"]}, "feature_syscall_sandbox.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.test_framework.SkipTest"], "function_names": ["run_test", "skip_test_if_missing_module", "set_test_params"], "function_calls": ["SkipTest", "SyscallSandboxTest"], "class_names": ["SyscallSandboxTest"], "class_method_calls": ["self.num_nodes", "self.is_syscall_sandbox_compiled", "self.disable_syscall_sandbox", "self.nodes", "self.log"]}, "feature_taproot.py": {"libraries": ["test_framework.key.compute_xonly_pubkey", "test_framework.blocktools.add_witness_commitment", "test_framework.blocktools.COINBASE_MATURITY", "random", "test_framework.blocktools.create_block", "test_framework.script.SIGHASH_SINGLE", "test_framework.script.BIP341_sha_sequences", "test_framework.script.OP_2DUP", "test_framework.script.OP_SWAP", "test_framework.script.OP_DUP", "test_framework.script.OP_2DROP", "test_framework.blocktools.WITNESS_SCALE_FACTOR", "test_framework.script.BIP341_sha_scriptpubkeys", "test_framework.script.OP_7", "test_framework.script.OP_ELSE", "test_framework.util.assert_equal", "test_framework.script.TaprootSignatureMsg", "test_framework.script.OP_NOT", "test_framework.script.OP_NOTIF", "test_framework.script.LEAF_VERSION_TAPSCRIPT", "test_framework.key.generate_privkey", "test_framework.script.OP_9", "test_framework.blocktools.create_coinbase", "test_framework.script_util.script_to_p2sh_script", "test_framework.script.OP_12", "test_framework.script.OP_3", "test_framework.script.OP_DROP", "test_framework.script.taproot_construct", "test_framework.script.SIGHASH_ANYONECANPAY", "test_framework.script.OP_1", "test_framework.script.BIP341_sha_prevouts", "test_framework.script.is_op_success", "test_framework.messages.CTxInWitness", "test_framework.script.MAX_SCRIPT_ELEMENT_SIZE", "test_framework.script.SegwitV0SignatureMsg", "test_framework.script.OP_CHECKSIGADD", "test_framework.util.random_bytes", "test_framework.script.OP_NOP", "test_framework.key.tweak_add_privkey", "test_framework.script.OP_IF", "test_framework.messages.COutPoint", "os", "test_framework.util.assert_raises_rpc_error", "test_framework.messages.SEQUENCE_FINAL", "test_framework.script.BIP341_sha_amounts", "test_framework.script.OP_16", "test_framework.script.OP_ENDIF", "test_framework.messages.tx_from_hex", "test_framework.script.CScriptNum", "test_framework.script.CScriptOp", "test_framework.script_util.script_to_p2wsh_script", "test_framework.script_util.key_to_p2pkh_script", "test_framework.script.OP_PUSHDATA1", "test_framework.script_util.key_to_p2pk_script", "test_framework.script.OP_VERIFY", "test_framework.script.OP_2", "test_framework.script.OP_6", "test_framework.script.LOCKTIME_THRESHOLD", "test_framework.script.OP_11", "test_framework.script.OP_CHECKSIGVERIFY", "test_framework.script.SIGHASH_NONE", "test_framework.script.TaggedHash", "test_framework.script.SIGHASH_ALL", "test_framework.script.OP_8", "test_framework.messages.CTransaction", "test_framework.script.OP_CHECKMULTISIG", "test_framework.script.hash256", "test_framework.script.OP_5", "test_framework.test_framework.BitcoinTestFramework", "test_framework.key.ECKey", "test_framework.script.OP_CODESEPARATOR", "test_framework.script_util.key_to_p2wpkh_script", "test_framework.key.SECP256K1", "test_framework.script.ANNEX_TAG", "test_framework.messages.CTxIn", "test_framework.script.OP_EQUALVERIFY", "test_framework.script.OP_RETURN", "test_framework.script.BIP341_sha_outputs", "test_framework.script.OP_CHECKMULTISIGVERIFY", "test_framework.messages.CTxOut", "test_framework.address.program_to_witness", "test_framework.script.CScript", "test_framework.script.OP_EQUAL", "collections.namedtuple", "collections.OrderedDict", "test_framework.blocktools.MAX_BLOCK_SIGOPS_WEIGHT", "test_framework.script.OP_0", "test_framework.script.OP_4", "test_framework.script.OP_10", "test_framework.script.LegacySignatureMsg", "test_framework.script.OP_CHECKSIG", "json", "test_framework.script.SIGHASH_DEFAULT", "test_framework.key.sign_schnorr", "test_framework.address.hash160", "hashlib", "test_framework.script_util.keyhash_to_p2pkh_script"], "function_names": ["default_key_tweaked", "default_inputs_keypath", "block_submit", "default_leafversion", "make_spender", "to_script", "byte_popper", "init_blockinfo", "default_script_taproot", "default_sign", "default_bytes_hashtype", "add_options", "add_spender", "default_hashtype", "default_pubkey_internal", "spenders_taproot_nonstandard", "dump_json_test", "spend", "override", "default_merklebranch", "default_hashtype_actual", "default_witness_witv0", "default_witness", "default_negflag", "skip_test_if_missing_module", "set_test_params", "default_witness_taproot", "zero_appender", "gen_test_vectors", "bitflipper", "dump_witness", "default_tapleaf", "random_checksig_style", "sat_fn", "default_scriptsig", "run_test", "getter", "deep_eval", "test_spenders", "flatten", "default_sighash", "default_controlblock", "default_sigmsg", "default_signature", "big_spend_inputs", "default_tweak", "get", "pr", "mutate", "fn", "predict_sigops_ratio", "spenders_taproot_active"], "function_calls": ["key_to_p2pkh_script", "print", "COutPoint", "byte_popper", "enumerate", "TaprootTest", "sum", "create_coinbase", "default_negflag", "tx_from_hex", "reversed", "getter", "Spender", "get", "generate_privkey", "fn", "BIP341_sha_scriptpubkeys", "CTxIn", "taproot_construct", "TaprootSignatureMsg", "random_bytes", "sorted", "key_to_p2pk_script", "CTransaction", "max", "CScriptNum", "spend", "override", "default_merklebranch", "open", "Final", "callable", "script_to_p2sh_script", "flatten", "dict", "default_controlblock", "min", "assert_raises_rpc_error", "range", "UTXOData", "bytes", "OrderedDict", "CScriptOp", "CTxInWitness", "expr", "namedtuple", "ECKey", "len", "CScript", "spenders_taproot_nonstandard", "hash256", "dump_json_test", "TaggedHash", "program_to_witness", "dump_witness", "assert_equal", "CTxOut", "isinstance", "random_checksig_style", "spk_mutate_pre_p2sh", "list", "BIP341_sha_prevouts", "make_spender", "to_script", "BIP341_sha_outputs", "script_to_p2wsh_script", "add_spender", "BIP341_sha_amounts", "all", "create_block", "hash160", "sign_schnorr", "key_to_p2wpkh_script", "zero_appender", "keyhash_to_p2pkh_script", "bitflipper", "SegwitV0SignatureMsg", "compute_xonly_pubkey", "add_witness_commitment", "deep_eval", "LegacySignatureMsg", "is_op_success", "int", "tweak_add_privkey", "BIP341_sha_sequences", "pr", "predict_sigops_ratio", "spenders_taproot_active"], "class_names": ["TaprootTest"], "class_method_calls": ["dump.encode", "prv.set", "utxos_spent.append", "utxo.spender", "self.skip_if_no_wallet", "fund_tx.rehash", "SEED.to_bytes", "host_pubkeys.append", "spender.is_standard", "ret.append", "mismatching_utxos.append", "hashlib.sha256", "int.from_bytes", "fund_tx.serialize", "expected.setdefault", "coinbase.vout", "self.setup_clean_chain", "node.getnewaddress", "coinbase.sha256", "normal_utxos.append", "tap_spks.append", "eckey1.get_pubkey", "random.randint", "block.sha256", "tx.nVersion", "parser.add_argument", "tx_test.setdefault", "node.getblock", "fund_tx.sha256", "self.lastblocktime", "self.extra_args", "coinbase.vin", "self.gen_test_vectors", "random.shuffle", "f.write", "tap.tweak", "node.sendrawtransaction", "self.add_wallet_options", "coinbase.rehash", "node.getbestblockhash", "mismatching_utxos.pop", "self.lastblockhash", "fund_tx.vout", "node.getaddressinfo", "intermediary.setdefault", "tx.hash", "coinbase.nLockTime", "self.init_blockinfo", "self.test_spenders", "tap.leaves", "x.output", "unspents.sort", "CScriptNum.encode", "spenders.append", "node.submitblock", "input_utxos.append", "scripts.append", "hashlib.sha1", "self.tip", "self.nodes", "spk_tests.append", "tx.sha256", "key.sign_ecdsa", "txn.append", "bytes.fromhex", "eckey1.set", "self.options", "self.num_nodes", "expr.value", "tx.rehash", "block.hash", "fields.append", "test_case.setdefault", "tests.setdefault", "global_given.setdefault", "precomputed.keys", "self.lastblockheight", "big_choices.append", "random.getrandbits", "inputs.append", "tx.vin", "fund_tx.vin", "utxo.outpoint", "block.serialize", "node.listunspent", "self.block_submit", "tap.scriptPubKey", "sigmsg.count", "test_list.append", "node.getmempoolentry", "tap.internal_pubkey", "tx.wit", "i.to_bytes", "tap.output_pubkey", "json.dumps", "normal_utxos.pop", "os.environ", "keypath_tests.append", "eckey2.set", "coinbase.hash", "x.hex", "self.log", "prv.get_pubkey", "os.makedirs", "self.generate", "random.randrange", "old_spks.append", "tx.vout", "node.signrawtransactionwithwallet", "host_spks.append", "tap.merkle_root", "block.solve", "random.choice", "SECP256K1.is_x_coord", "tx.serialize", "coinbase.nVersion", "input_data.append", "utxo.output", "CScriptOp.encode_op_n", "sigmsg.hex", "utxodata.spender", "spender.comment", "tx.nLockTime", "block.rehash"]}, "feature_txindex_compatibility.py": {"libraries": ["shutil", "test_framework.test_framework.BitcoinTestFramework", "test_framework.wallet.MiniWallet", "os"], "function_names": ["run_test", "skip_test_if_missing_module", "set_test_params", "setup_network"], "function_calls": ["MiniWallet", "TxindexCompatibilityTest"], "class_names": ["TxindexCompatibilityTest"], "class_method_calls": ["self.skip_if_no_previous_releases", "self.generate", "self.num_nodes", "mini_wallet.send_self_transfer", "os.path", "shutil.copytree", "self.add_nodes", "self.chain", "self.start_node", "self.nodes", "self.stop_nodes", "self.log", "mini_wallet.get_utxo", "shutil.rmtree", "self.extra_args", "self.start_nodes", "self.connect_nodes", "os.linesep"]}, "feature_uacomment.py": {"libraries": ["test_framework.test_node.ErrorMatch", "re", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["run_test", "set_test_params"], "function_calls": ["assert_equal", "UacommentTest"], "class_names": ["UacommentTest"], "class_method_calls": ["re.escape", "self.num_nodes", "self.nodes", "self.restart_node", "ErrorMatch.FULL_REGEX", "self.log", "self.setup_clean_chain", "self.stop_node"]}, "feature_unsupported_utxo_db.py": {"libraries": ["shutil", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["run_test", "skip_test_if_missing_module", "set_test_params", "setup_network"], "function_calls": ["assert_equal", "UnsupportedUtxoDbTest"], "class_names": ["UnsupportedUtxoDbTest"], "class_method_calls": ["self.skip_if_no_previous_releases", "self.generate", "self.no_op", "self.num_nodes", "shutil.copytree", "self.add_nodes", "self.start_node", "self.nodes", "self.stop_nodes", "self.log", "self.setup_clean_chain"]}, "feature_utxo_set_hash.py": {"libraries": ["struct", "test_framework.messages.CBlock", "test_framework.messages.COutPoint", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.muhash.MuHash3072", "test_framework.messages.from_hex", "test_framework.wallet.MiniWallet"], "function_names": ["test_muhash_implementation", "run_test", "set_test_params"], "function_calls": ["UTXOSetHashTest", "list", "from_hex", "int", "COutPoint", "CBlock", "enumerate", "MiniWallet", "assert_equal", "map", "MuHash3072"], "class_names": ["UTXOSetHashTest"], "class_method_calls": ["self.num_nodes", "tx.rehash", "self.log", "block.vtx", "muhash.digest", "node.getblockhash", "blocks.append", "self.generate", "node.setmocktime", "tx.vout", "muhash.insert", "tx.vin", "self.test_muhash_implementation", "self.setup_clean_chain", "node.getblockheader", "wallet.get_address", "tx_out.serialize", "struct.pack", "node.gettxoutsetinfo", "node.getblock", "self.generateblock", "self.nodes", "blocks.pop", "wallet.send_self_transfer"]}, "feature_versionbits_warning.py": {"libraries": ["test_framework.blocktools.create_coinbase", "test_framework.messages.msg_block", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "os", "test_framework.p2p.P2PInterface", "re"], "function_names": ["set_test_params", "send_blocks_with_version", "setup_network", "versionbits_in_alert_file", "run_test"], "function_calls": ["range", "create_coinbase", "int", "P2PInterface", "create_block", "open", "msg_block", "VersionBitsWarningTest"], "class_names": ["VersionBitsWarningTest"], "class_method_calls": ["self.alert_filename", "self.options", "node.getmininginfo", "self.num_nodes", "f.read", "re.compile", "self.disable_syscall_sandbox", "VB_PATTERN.match", "node.get_deterministic_priv_key", "self.log", "node.add_p2p_connection", "self.send_blocks_with_version", "self.extra_args", "VB_PATTERN.search", "self.setup_clean_chain", "node.getblockchaininfo", "block.solve", "node.getnetworkinfo", "peer.sync_with_ping", "block.sha256", "self.generatetoaddress", "peer.send_message", "self.versionbits_in_alert_file", "self.wait_until", "os.path", "self.nodes", "self.restart_node", "self.setup_nodes"]}, "interface_bitcoin_cli.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_greater_than_or_equal", "test_framework.util.assert_equal", "test_framework.util.assert_raises_process_error", "test_framework.util.assert_raises_rpc_error", "test_framework.util.get_auth_cookie", "re", "test_framework.blocktools.COINBASE_MATURITY", "time"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "run_test", "cli_get_info_string_to_dict"], "function_calls": ["len", "range", "TestBitcoinCli", "assert_raises_process_error", "set", "Decimal", "get_auth_cookie", "int", "zip", "assert_equal", "assert_greater_than_or_equal", "assert_raises_rpc_error", "cli_get_info_string_to_dict"], "class_names": ["TestBitcoinCli"], "class_method_calls": ["w2.encryptwallet", "wallet.strip", "self.num_nodes", "self.is_specified_wallet_compiled", "line.split", "re.compile", "self.default_wallet_name", "self.log", "self.add_wallet_options", "key.strip", "self.rpc_timeout", "self.generate", "value.strip", "w2.getnewaddress", "cli_get_info_string.splitlines", "self.chain", "self.config", "self.setup_clean_chain", "self.skip_if_no_cli", "time.time", "ansi_escape.sub", "generate.keys", "self.stop_node", "self.import_deterministic_coinbase_privkeys", "w1.walletpassphrase", "w3.getnewaddress", "w1.sendtoaddress", "self.nodes", "balance.strip", "self.restart_node", "w2.walletpassphrase"]}, "interface_http.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "http.client", "test_framework.util.str_to_b64str", "urllib.parse"], "function_names": ["run_test", "set_test_params", "setup_network"], "function_calls": ["assert_equal", "str_to_b64str", "HTTPBasicsTest"], "class_names": ["HTTPBasicsTest"], "class_method_calls": ["urlNode1.port", "self.num_nodes", "http.client", "url.hostname", "conn.sock", "urlNode1.password", "conn.close", "conn.connect", "urlNode1.hostname", "conn.getresponse", "urllib.parse", "url.port", "out1.status", "urlNode2.hostname", "url.username", "url.password", "conn.request", "urlNode2.port", "urlNode2.username", "urlNode2.password", "self.supports_cli", "self.nodes", "urlNode1.username", "self.setup_nodes"]}, "interface_rest.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "json", "test_framework.util.assert_equal", "test_framework.util.assert_greater_than_or_equal", "http.client", "test_framework.wallet.getnewdestination", "test_framework.util.assert_greater_than", "enum.Enum", "test_framework.messages.COIN", "urllib.parse", "test_framework.messages.BLOCK_HEADER_SIZE", "typing", "test_framework.wallet.MiniWallet"], "function_names": ["run_test", "filter_output_indices_by_value", "set_test_params", "test_rest_request"], "function_calls": ["range", "len", "set", "bytes", "Decimal", "getnewdestination", "int", "assert_greater_than", "enumerate", "MiniWallet", "assert_equal", "RESTTest", "assert_greater_than_or_equal", "filter_output_indices_by_value"], "class_names": ["ReqType", "RetType", "RESTTest"], "class_method_calls": ["bytes.fromhex", "RetType.OBJ", "self.num_nodes", "http.client", "args.append", "response.read", "typing.Dict", "resp.read", "txs.append", "ReqType.HEX", "self.test_rest_request", "self.log", "response_hex.read", "json.loads", "response.getheader", "RetType.BYTES", "self.wallet", "self.generate", "ReqType.JSON", "response_bytes.hex", "int.from_bytes", "resp.status", "conn.getresponse", "self.url", "ReqType.BIN", "urllib.parse", "response_header.getheader", "resp_hex.read", "typing.Union", "response_header.read", "self.sync_all", "hex_response.getheader", "conn.request", "n.to_bytes", "typing.Any", "response_header_hex.read", "self.wait_until", "self.supports_cli", "RetType.JSON", "self.nodes", "response_hex.getheader", "req_type.name", "response_header_hex.getheader", "self.extra_args"]}, "interface_rpc.py": {"libraries": ["test_framework.authproxy.JSONRPCException", "test_framework.util.assert_greater_than_or_equal", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "subprocess", "threading.Thread"], "function_names": ["set_test_params", "test_work_queue_getblock", "test_work_queue_exceeded", "test_http_status_codes", "expect_http_status", "test_getrpcinfo", "run_test", "test_batch_request"], "function_calls": ["range", "len", "fcn", "assert_equal", "expect_http_status", "Thread", "RPCInterfaceTest", "AssertionError", "assert_greater_than_or_equal"], "class_names": ["RPCInterfaceTest"], "class_method_calls": ["self.num_nodes", "self.log", "got_exceeded_error.append", "self.test_work_queue_exceeded", "self.test_batch_request", "node.cli", "threads.append", "t.join", "self.chain", "self.test_getrpcinfo", "self.setup_clean_chain", "self.test_http_status_codes", "subprocess.CalledProcessError", "t.start", "exc.error", "os.path", "self.supports_cli", "self.nodes", "self.restart_node", "e.output", "exc.http_status"]}, "interface_usdt_coinselection.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "bcc.BPF", "test_framework.util.assert_greater_than", "bcc.USDT"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "get_tracepoints", "determine_selection_from_usdt", "run_test"], "function_calls": ["range", "len", "USDT", "BPF", "CoinSelectionTracepointTest", "assert_greater_than", "assert_equal", "assert_raises_rpc_error"], "class_names": ["CoinSelectionTracepointTest"], "class_method_calls": ["self.skip_if_no_python_bcc", "event.type", "wallet.sendtoaddress", "self.num_nodes", "event.waste", "self.skip_if_no_wallet", "event.algo", "self.default_wallet_name", "self.skip_if_platform_not_linux", "self.log", "self.add_wallet_options", "event.wallet_name", "self.generate", "self.determine_selection_from_usdt", "event.success", "events.append", "wallet.getnewaddress", "self.setup_clean_chain", "event.change_pos", "self.skip_if_no_bpf_permissions", "self.skip_if_no_bitcoind_tracepoints", "wallet.setwalletflag", "event.use_aps", "sc_events.append", "ctx.enable_probe", "self.get_tracepoints", "self.bpf", "self.nodes"]}, "interface_usdt_mempool.py": {"libraries": ["test_framework.wallet.MiniWallet", "test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "bcc.BPF", "test_framework.p2p.P2PDataStore", "test_framework.messages.DEFAULT_MEMPOOL_EXPIRY_HOURS", "test_framework.messages.COIN", "bcc.USDT", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["handle_removed_event", "skip_test_if_missing_module", "set_test_params", "added_test", "handle_rejected_event", "handle_added_event", "rejected_test", "removed_test", "handle_replaced_event", "replaced_test", "run_test"], "function_calls": ["USDT", "BPF", "bytes", "Decimal", "P2PDataStore", "MiniWallet", "assert_equal", "MempoolTracepointTest"], "class_names": ["MempoolTracepointTest"], "class_method_calls": ["self.skip_if_no_python_bcc", "self.added_test", "event.entry_time", "self.num_nodes", "event.replacement_fee", "node.process", "event.fee", "self.skip_if_platform_not_linux", "self.log", "event.replaced_fee", "event.reason", "self.wallet", "self.generate", "event.replaced_hash", "bpf.cleanup", "node.setmocktime", "node.add_p2p_connection", "self.replaced_test", "self.removed_test", "self.rejected_test", "bpf.perf_buffer_poll", "event.replaced_entry_time", "self.setup_clean_chain", "event.vsize", "node.p2ps", "self.skip_if_no_bpf_permissions", "self.skip_if_no_bitcoind_tracepoints", "event.replacement_hash", "node.getmempoolentry", "event.hash", "ctx.enable_probe", "self.nodes", "event.replacement_vsize", "event.replaced_vsize"]}, "interface_usdt_net.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "io.BytesIO", "ctypes", "test_framework.util.assert_equal", "bcc.BPF", "test_framework.messages.msg_version", "test_framework.p2p.P2PInterface", "bcc.USDT"], "function_names": ["check_p2p_message", "skip_test_if_missing_module", "set_test_params", "handle_inbound", "__repr__", "run_test", "handle_outbound"], "function_calls": ["msg_version", "NetTracepointTest", "check_p2p_message", "USDT", "BPF", "bytes", "assert_equal", "P2PInterface", "BytesIO"], "class_names": ["NetTracepointTest", "P2PMessage"], "class_method_calls": ["ctypes.c_ubyte", "self.skip_if_no_python_bcc", "event.msg", "self.num_nodes", "self.peer_addr", "event.peer_addr", "self.skip_if_platform_not_linux", "self.log", "self.peer_id", "self.peer_conn_type", "bpf.cleanup", "ctypes.Structure", "bpf.perf_buffer_poll", "self.msg_type", "ctypes.c_char", "ctypes.c_uint64", "self.skip_if_no_bpf_permissions", "self.skip_if_no_bitcoind_tracepoints", "ctypes.cast", "msg.deserialize", "event.peer_id", "event.peer_conn_type", "ctx.enable_probe", "event.msg_size", "self.nodes", "ctypes.POINTER", "self.msg_size", "event.msg_type"]}, "interface_usdt_utxocache.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "ctypes", "bcc.BPF", "test_framework.messages.COIN", "bcc.USDT", "test_framework.wallet.MiniWallet"], "function_names": ["test_flush", "test_uncache", "skip_test_if_missing_module", "set_test_params", "handle_utxocache_add", "handle_utxocache_spent", "handle_utxocache_flush", "__repr__", "run_test", "test_add_spent", "handle_utxocache_uncache"], "function_calls": ["len", "list", "USDT", "BPF", "bytes", "int", "UTXOCacheTracepointTest", "enumerate", "MiniWallet", "assert_equal"], "class_names": ["UTXOCacheFlush", "UTXOCacheTracepointTest", "UTXOCacheChange"], "class_method_calls": ["ctypes.c_ubyte", "self.skip_if_no_python_bcc", "self.duration", "self.size", "event.txid", "self.num_nodes", "event.for_prune", "event.value", "event.duration", "event.mode", "expected_flushes.remove", "self.value", "self.skip_if_platform_not_linux", "self.log", "ctypes.c_int64", "expected_utxocache_spents.append", "expected_utxocache_adds.append", "event.height", "self.wallet", "self.generate", "self.memory", "self.test_uncache", "bpf.cleanup", "ctypes.Structure", "self.for_prune", "expected_flushes.append", "bpf.perf_buffer_poll", "self.setup_clean_chain", "ctypes.c_uint64", "self.is_coinbase", "self.mode", "self.skip_if_no_bpf_permissions", "self.skip_if_no_bitcoind_tracepoints", "ctypes.cast", "self.index", "self.start_node", "event.size", "invalid_tx.serialize", "self.test_add_spent", "event.index", "expected_utxocache_adds.pop", "expected_utxocache_spents.pop", "self.test_flush", "self.stop_node", "event.is_coinbase", "ctx.enable_probe", "ctypes.c_uint32", "self.txid", "invalid_tx.vin", "self.nodes", "event.memory", "ctypes.POINTER", "self.height", "ctypes.c_bool", "self.extra_args"]}, "interface_usdt_validation.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "ctypes", "bcc.BPF", "test_framework.address.ADDRESS_BCRT1_UNSPENDABLE", "bcc.USDT"], "function_names": ["skip_test_if_missing_module", "set_test_params", "handle_blockconnected", "__repr__", "run_test"], "function_calls": ["len", "USDT", "BPF", "bytes", "dict", "ValidationTracepointTest", "assert_equal"], "class_names": ["ValidationTracepointTest", "Block"], "class_method_calls": ["ctypes.c_ubyte", "self.skip_if_no_python_bcc", "self.duration", "self.num_nodes", "self.hash", "event.inputs", "event.duration", "self.transactions", "self.skip_if_platform_not_linux", "self.log", "ctypes.c_int64", "event.height", "event.transactions", "bpf.cleanup", "ctypes.Structure", "self.inputs", "bpf.perf_buffer_poll", "ctypes.c_int", "ctypes.c_uint64", "self.skip_if_no_bpf_permissions", "self.skip_if_no_bitcoind_tracepoints", "ctypes.cast", "event.hash", "ctx.enable_probe", "self.generatetoaddress", "self.nodes", "ctypes.POINTER", "self.sigops", "self.height", "event.sigops"]}, "interface_zmq.py": {"libraries": ["test_framework.blocktools.create_coinbase", "struct", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.messages.tx_from_hex", "test_framework.util.assert_equal", "zmq", "test_framework.util.assert_raises_rpc_error", "test_framework.util.p2p_port", "test_framework.messages.hash256", "test_framework.address.ADDRESS_BCRT1_UNSPENDABLE", "test_framework.netutil.test_ipv6_local", "test_framework.blocktools.add_witness_commitment", "test_framework.address.ADDRESS_BCRT1_P2WSH_OP_TRUE", "test_framework.wallet.MiniWallet", "time.sleep"], "function_names": ["__init__", "receive_sequence", "test_basic", "test_sequence", "skip_test_if_missing_module", "set_test_params", "receive", "test_reorg", "test_ipv6", "hash256_reversed", "caused_notification", "test_mempool_sync", "setup_zmq_test", "run_test", "test_multiple_interfaces", "_receive_from_publisher_and_check"], "function_calls": ["range", "set", "chr", "p2p_port", "len", "test_ipv6_local", "hash256_reversed", "enumerate", "hash256", "create_block", "ZMQTest", "create_coinbase", "tx_from_hex", "MiniWallet", "assert_equal", "sleep", "add_witness_commitment", "Exception", "int", "ZMQTestSetupBlock", "ZMQSubscriber", "assert_raises_rpc_error", "type"], "class_names": ["ZMQTest", "ZMQSubscriber", "ZMQTestSetupBlock"], "class_method_calls": ["self.socket", "self.sequence", "socket.setsockopt", "self.num_nodes", "self.test_reorg", "self.sync_blocks", "txs.append", "self.skip_if_no_py3_zmq", "self.log", "self.tx_hash", "test_framework.no_op", "self.connect_nodes", "rawtx.receive", "self.test_basic", "self.wallet", "zmq.SUB", "subscribers.append", "mempool_view.remove", "self.test_mempool_sync", "struct.unpack", "self.raw_tx", "zmq.SUBSCRIBE", "tx.hash", "block.serialize", "self.ctx", "seq.receive_sequence", "block.solve", "mempool_view.add", "more_tx.append", "zmq.error", "test_framework.generate", "hashtx.receive", "self.test_multiple_interfaces", "txid.hex", "sub.receive", "self.sync_all", "self.zmq_port_base", "self.raw_block", "zmq.RCVTIMEO", "block.sha256", "rawblock.receive", "self.block_hash", "self.generatetoaddress", "self.disconnect_nodes", "test_block.caused_notification", "self.no_op", "self.skip_if_no_bitcoind_zmq", "self.test_sequence", "hashblock.receive", "zmq.IPV6", "self.topic", "node.getblock", "topic.encode", "tx.calc_sha256", "zmq.Context", "self.nodes", "self.test_ipv6", "sub.socket", "self.restart_node", "self.setup_zmq_test", "self._receive_from_publisher_and_check", "self.extra_args"]}, "mempool_accept.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.tx_from_hex", "test_framework.key.ECKey", "test_framework.script.OP_HASH160", "test_framework.messages.MAX_BIP125_RBF_SEQUENCE", "test_framework.messages.COIN", "test_framework.messages.CTxIn", "copy.deepcopy", "test_framework.script.OP_RETURN", "test_framework.script_util.script_to_p2wsh_script", "decimal.Decimal", "test_framework.script_util.MIN_PADDING", "test_framework.messages.CTxInWitness", "test_framework.util.assert_greater_than", "test_framework.messages.CTxOut", "test_framework.script.CScript", "test_framework.messages.MAX_MONEY", "test_framework.messages.MAX_BLOCK_WEIGHT", "test_framework.util.assert_equal", "test_framework.script.OP_TRUE", "test_framework.script_util.keys_to_multisig_script", "test_framework.script.OP_0", "math", "test_framework.messages.COutPoint", "test_framework.script_util.script_to_p2sh_script", "test_framework.script_util.MIN_STANDARD_TX_NONWITNESS_SIZE", "test_framework.script_util.DUMMY_MIN_OP_RETURN_SCRIPT", "test_framework.util.assert_raises_rpc_error", "test_framework.messages.SEQUENCE_FINAL", "test_framework.messages.CTransaction", "test_framework.wallet.MiniWallet"], "function_names": ["run_test", "check_mempool_result", "set_test_params"], "function_calls": ["assert_greater_than", "COutPoint", "CTransaction", "CTxInWitness", "ECKey", "len", "script_to_p2wsh_script", "CScript", "tx_from_hex", "MiniWallet", "assert_equal", "CTxOut", "script_to_p2sh_script", "MempoolAcceptanceTest", "deepcopy", "Decimal", "int", "keys_to_multisig_script", "assert_raises_rpc_error", "CTxIn"], "class_names": ["MempoolAcceptanceTest"], "class_method_calls": ["self.num_nodes", "node.decoderawtransaction", "node.sendrawtransaction", "tx.rehash", "self.log", "node.getblockcount", "self.mempool_size", "key.get_pubkey", "self.wallet", "self.generate", "tx.serialize_without_witness", "tx.vout", "tx.vin", "self.check_mempool_result", "tx.serialize", "key.generate", "node.getrawtransaction", "output_p2sh_burn.serialize", "r.pop", "node.getmempoolinfo", "tx.nVersion", "tx.get_vsize", "tx.wit", "tx.nLockTime", "self.supports_cli", "self.nodes", "math.ceil", "self.extra_args", "node.testmempoolaccept"]}, "mempool_accept_wtxid.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.script.OP_ENDIF", "test_framework.script.OP_HASH160", "test_framework.p2p.P2PTxInvStore", "test_framework.messages.COIN", "test_framework.messages.CTxIn", "copy.deepcopy", "test_framework.messages.CTxInWitness", "test_framework.messages.CTxOut", "test_framework.script.CScript", "test_framework.script.OP_EQUAL", "test_framework.script.hash160", "test_framework.script.OP_ELSE", "test_framework.util.assert_equal", "test_framework.script.OP_TRUE", "test_framework.messages.sha256", "test_framework.script.OP_0", "test_framework.script.OP_IF", "test_framework.messages.COutPoint", "test_framework.messages.CTransaction"], "function_names": ["run_test", "set_test_params"], "function_calls": ["deepcopy", "sha256", "CScript", "P2PTxInvStore", "int", "COutPoint", "assert_equal", "CTransaction", "CTxInWitness", "CTxOut", "MempoolWtxidTest", "CTxIn", "hash160"], "class_names": ["MempoolWtxidTest"], "class_method_calls": ["parent.vout", "self.num_nodes", "child_two.rehash", "child_two.serialize", "node.sendrawtransaction", "node.get_deterministic_priv_key", "self.log", "child_one.rehash", "self.generate", "child_one.vin", "child_one.getwtxid", "parent.serialize", "node.add_p2p_connection", "peer_wtxid_relay_2.wait_for_broadcast", "child_two.wit", "self.setup_clean_chain", "parent.rehash", "parent.vin", "peer_wtxid_relay.wait_for_broadcast", "node.getmempoolentry", "node.getmempoolinfo", "child_two.getwtxid", "node.getblock", "node.signrawtransactionwithkey", "self.nodes", "child_one.serialize", "child_one.wit", "child_one.vout", "node.testmempoolaccept"]}, "mempool_compatibility.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "os", "test_framework.blocktools.COINBASE_MATURITY", "test_framework.wallet.MiniWallet", "test_framework.wallet.MiniWalletMode"], "function_names": ["run_test", "skip_test_if_missing_module", "set_test_params", "setup_network"], "function_calls": ["MiniWallet", "MempoolCompatibilityTest"], "class_names": ["MempoolCompatibilityTest"], "class_method_calls": ["new_node.getmempoolentry", "self.num_nodes", "self.sync_blocks", "self.log", "old_node.getmempoolinfo", "self.connect_nodes", "self.skip_if_no_previous_releases", "old_node.datadir", "self.generate", "self.add_nodes", "self.chain", "new_node.datadir", "self.start_node", "new_wallet.send_self_transfer", "os.rename", "self.stop_node", "self.no_op", "old_node.getrawmempool", "os.path", "self.nodes", "MiniWalletMode.RAW_P2PK", "new_node.getrawmempool", "self.start_nodes"]}, "mempool_datacarrier.py": {"libraries": ["test_framework.test_node.TestNode", "test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.MAX_OP_RETURN_RELAY", "test_framework.util.assert_raises_rpc_error", "test_framework.messages.CTxOut", "test_framework.util.random_bytes", "test_framework.script.CScript", "test_framework.wallet.MiniWallet", "test_framework.script.OP_RETURN"], "function_names": ["run_test", "test_null_data_transaction", "set_test_params"], "function_calls": ["random_bytes", "DataCarrierTest", "CScript", "MiniWallet", "CTxOut", "assert_raises_rpc_error"], "class_names": ["DataCarrierTest"], "class_method_calls": ["tx.get_vsize", "self.wallet", "self.test_null_data_transaction", "self.num_nodes", "tx.serialize", "tx.vout", "self.nodes", "tx.rehash", "self.log", "self.extra_args", "node.getrawmempool"]}, "mempool_dust.py": {"libraries": ["test_framework.script_util.program_to_witness_script", "test_framework.test_framework.BitcoinTestFramework", "test_framework.key.ECKey", "test_framework.script_util.key_to_p2wpkh_script", "test_framework.messages.COIN", "test_framework.script.OP_RETURN", "test_framework.script_util.script_to_p2wsh_script", "test_framework.util.get_fee", "decimal.Decimal", "test_framework.script_util.key_to_p2pkh_script", "test_framework.script_util.output_key_to_p2tr_script", "test_framework.messages.CTxOut", "test_framework.script_util.key_to_p2pk_script", "test_framework.script.CScript", "test_framework.test_node.TestNode", "test_framework.util.assert_equal", "test_framework.script.OP_TRUE", "test_framework.script_util.keys_to_multisig_script", "test_framework.script_util.script_to_p2sh_script", "test_framework.wallet.MiniWallet"], "function_names": ["run_test", "test_dust_output", "set_test_params"], "function_calls": ["len", "key_to_p2pkh_script", "key_to_p2wpkh_script", "script_to_p2wsh_script", "CScript", "Decimal", "int", "get_fee", "output_key_to_p2tr_script", "keys_to_multisig_script", "MiniWallet", "assert_equal", "key_to_p2pk_script", "DustRelayFeeTest", "CTxOut", "script_to_p2sh_script", "program_to_witness_script", "ECKey"], "class_names": ["DustRelayFeeTest"], "class_method_calls": ["output_script.IsWitnessProgram", "key.get_pubkey", "self.wallet", "self.generate", "self.num_nodes", "tx.serialize", "key.generate", "tx.vout", "self.nodes", "self.test_dust_output", "self.restart_node", "self.log", "node.testmempoolaccept"]}, "mempool_expiry.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "datetime.timedelta", "test_framework.messages.DEFAULT_MEMPOOL_EXPIRY_HOURS", "test_framework.wallet.MiniWallet"], "function_names": ["test_transaction_expiry", "run_test", "set_test_params"], "function_calls": ["int", "timedelta", "MiniWallet", "assert_equal", "MempoolExpiryTest", "assert_raises_rpc_error"], "class_names": ["MempoolExpiryTest"], "class_method_calls": ["self.wallet", "self.num_nodes", "node.setmocktime", "node.getmempoolentry", "self.nodes", "self.restart_node", "self.log", "self.test_transaction_expiry"]}, "mempool_limit.py": {"libraries": ["test_framework.wallet.MiniWallet", "test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_greater_than", "test_framework.util.create_lots_of_big_transactions", "test_framework.util.gen_return_txouts", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["run_test", "set_test_params"], "function_calls": ["range", "len", "create_lots_of_big_transactions", "Decimal", "assert_greater_than", "MiniWallet", "assert_equal", "MempoolLimitTest", "gen_return_txouts", "assert_raises_rpc_error"], "class_names": ["MempoolLimitTest"], "class_method_calls": ["self.generate", "miniwallet.send_self_transfer", "self.stop_node", "self.num_nodes", "node.getnetworkinfo", "self.supports_cli", "self.nodes", "self.log", "node.getmempoolinfo", "self.extra_args", "node.getrawmempool", "self.setup_clean_chain"]}, "mempool_package_limits.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.blocktools.COINBASE_MATURITY", "test_framework.messages.WITNESS_SCALE_FACTOR", "test_framework.wallet.MiniWallet"], "function_names": ["test_anc_count_limits", "set_test_params", "test_anc_count_limits_bushy", "test_chain_limits_helper", "test_anc_size_limits", "test_desc_count_limits", "test_desc_count_limits_2", "func_wrapper", "check_package_limits", "test_chain_limits", "test_desc_size_limits", "run_test", "test_anc_count_limits_2"], "function_calls": ["range", "len", "all", "MiniWallet", "assert_equal", "MempoolPackageLimitsTest", "func"], "class_names": ["MempoolPackageLimitsTest"], "class_method_calls": ["self.num_nodes", "self.test_desc_count_limits_2", "self.test_anc_count_limits_bushy", "self.log", "package_hex.append", "self.test_desc_count_limits", "self.test_anc_count_limits_2", "self.wallet", "self.generate", "self.test_desc_size_limits", "parent_utxos.append", "self.setup_clean_chain", "pc_grandparent_utxos.append", "self.test_anc_count_limits", "pc_parent_utxos.append", "node.getmempoolinfo", "self.test_anc_size_limits", "self.test_chain_limits", "chain_hex.append", "self.test_chain_limits_helper", "self.nodes", "self.restart_node", "node.testmempoolaccept"]}, "mempool_package_onemore.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.messages.DEFAULT_ANCESTOR_LIMIT", "test_framework.wallet.MiniWallet"], "function_names": ["chain_tx", "run_test", "set_test_params"], "function_calls": ["range", "len", "MiniWallet", "assert_equal", "MempoolPackagesTest", "assert_raises_rpc_error"], "class_names": ["MempoolPackagesTest"], "class_method_calls": ["self.wallet", "self.num_nodes", "replacable_tx.vout", "replacable_tx.serialize", "self.nodes", "self.extra_args", "self.chain_tx", "chain.append"]}, "mempool_packages.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.messages.DEFAULT_DESCENDANT_LIMIT", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.p2p.P2PTxInvStore", "test_framework.messages.COIN", "test_framework.messages.DEFAULT_ANCESTOR_LIMIT", "test_framework.wallet.MiniWallet"], "function_names": ["set_test_params", "run_test", "add_options"], "function_calls": ["range", "len", "sum", "set", "sorted", "P2PTxInvStore", "Decimal", "enumerate", "MiniWallet", "assert_equal", "next", "reversed", "MempoolPackagesTest", "assert_raises_rpc_error"], "class_names": ["MempoolPackagesTest"], "class_method_calls": ["self.num_nodes", "self.is_specified_wallet_compiled", "descendants.append", "v_ancestors.keys", "self.sync_blocks", "self.add_wallet_options", "v_descendants.keys", "self.wallet", "self.generate", "peer_inv_store.wait_for_broadcast", "tx_children.append", "self.sync_mempools", "ancestors.remove", "transaction_package.extend", "chain.append", "chain.index", "self.wait_until", "self.nodes", "transaction_package.pop", "self.extra_args"]}, "mempool_persist.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_greater_than_or_equal", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "test_framework.p2p.P2PTxInvStore", "test_framework.wallet.MiniWallet", "time"], "function_names": ["set_test_params", "run_test", "add_options", "test_persist_unbroadcast"], "function_calls": ["range", "len", "sum", "P2PTxInvStore", "Decimal", "int", "MempoolPersistTest", "MiniWallet", "assert_equal", "assert_greater_than_or_equal", "assert_raises_rpc_error"], "class_names": ["MempoolPersistTest"], "class_method_calls": ["self.num_nodes", "node0.mockscheduler", "conn.get_invs", "self.test_persist_unbroadcast", "self.log", "self.add_wallet_options", "self.generate", "os.remove", "node0.getpeerinfo", "node0.p2ps", "os.rmdir", "self.chain", "self.mini_wallet", "wallet_watch.getbalance", "node0.add_p2p_connection", "time.time", "os.mkdir", "self.start_node", "self.sync_all", "os.rename", "self.disconnect_nodes", "self.no_op", "self.wait_until", "os.path", "self.nodes", "self.is_sqlite_compiled", "self.restart_node", "self.stop_nodes", "self.extra_args", "wallet_watch.importdescriptors"]}, "mempool_reorg.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework", "test_framework.wallet.MiniWallet", "test_framework.util.assert_equal"], "function_names": ["run_test", "set_test_params"], "function_calls": ["range", "set", "MiniWallet", "assert_equal", "MempoolCoinbaseTest", "assert_raises_rpc_error"], "class_names": ["MempoolCoinbaseTest"], "class_method_calls": ["wallet.get_utxo", "self.generate", "wallet.sendrawtransaction", "self.num_nodes", "self.nodes", "self.sync_all", "self.log", "wallet.create_self_transfer", "node.invalidateblock", "self.extra_args"]}, "mempool_resurrect.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.wallet.MiniWallet", "test_framework.util.assert_equal"], "function_names": ["run_test", "set_test_params"], "function_calls": ["range", "set", "MiniWallet", "assert_equal", "MempoolCoinbaseTest"], "class_names": ["MempoolCoinbaseTest"], "class_method_calls": ["self.generate", "self.num_nodes", "node.getblock", "self.nodes", "blocks.extend", "node.invalidateblock", "wallet.send_self_transfer", "node.getrawmempool"]}, "mempool_sigoplimit.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.script.OP_ENDIF", "test_framework.messages.tx_from_hex", "test_framework.messages.CTxIn", "test_framework.script.OP_RETURN", "test_framework.script.OP_FALSE", "test_framework.script_util.script_to_p2wsh_script", "test_framework.messages.CTxInWitness", "test_framework.util.assert_greater_than", "test_framework.messages.CTxOut", "test_framework.messages.WITNESS_SCALE_FACTOR", "test_framework.script.CScript", "test_framework.util.assert_greater_than_or_equal", "test_framework.util.assert_equal", "test_framework.script.OP_TRUE", "test_framework.script.OP_CHECKSIG", "test_framework.script.OP_IF", "test_framework.messages.COutPoint", "test_framework.messages.CTransaction", "math.ceil", "test_framework.wallet.MiniWallet", "test_framework.script.OP_CHECKMULTISIG"], "function_names": ["test_sigops_limit", "run_test", "set_test_params", "create_p2wsh_spending_tx"], "function_calls": ["bytes", "script_to_p2wsh_script", "tx_from_hex", "CScript", "int", "assert_greater_than", "COutPoint", "MiniWallet", "CTransaction", "assert_equal", "CTxInWitness", "ceil", "CTxOut", "BytesPerSigOpTest", "assert_greater_than_or_equal", "CTxIn"], "class_names": ["BytesPerSigOpTest"], "class_method_calls": ["tx.get_vsize", "self.wallet", "self.generate", "tx.wit", "self.num_nodes", "tx.serialize", "parent_tx.rehash", "self.create_p2wsh_spending_tx", "tx.vout", "tx.rehash", "self.nodes", "self.test_sigops_limit", "self.restart_node", "tx.vin", "self.log", "self.extra_args", "parent_tx.get_vsize"]}, "mempool_spend_coinbase.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework", "test_framework.wallet.MiniWallet", "test_framework.util.assert_equal"], "function_names": ["run_test", "set_test_params"], "function_calls": ["set", "MiniWallet", "assert_equal", "coinbase_txid", "MempoolSpendCoinbaseTest", "assert_raises_rpc_error"], "class_names": ["MempoolSpendCoinbaseTest"], "class_method_calls": ["wallet.get_utxo", "self.generate", "self.num_nodes", "self.nodes", "wallet.create_self_transfer", "wallet.send_self_transfer"]}, "mempool_unbroadcast.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.p2p.P2PTxInvStore", "test_framework.wallet.MiniWallet", "time"], "function_names": ["test_txn_removal", "test_broadcast", "set_test_params", "add_options", "run_test"], "function_calls": ["len", "P2PTxInvStore", "MiniWallet", "assert_equal", "MempoolUnbroadcastTest"], "class_names": ["MempoolUnbroadcastTest"], "class_method_calls": ["node.sendtoaddress", "self.num_nodes", "conn.get_invs", "node.sendrawtransaction", "self.log", "self.add_wallet_options", "self.connect_nodes", "self.test_broadcast", "self.wallet", "self.generate", "node.add_p2p_connection", "self.sync_mempools", "node.getnewaddress", "node.disconnect_p2ps", "node.mockscheduler", "self.test_txn_removal", "node.getmempoolentry", "self.is_wallet_compiled", "time.sleep", "self.disconnect_nodes", "self.no_op", "node.assert_debug_log", "self.import_deterministic_coinbase_privkeys", "self.nodes", "self.restart_node"]}, "mempool_updatefromblock.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "math.ceil", "test_framework.wallet.MiniWallet", "time"], "function_names": ["run_test", "transaction_graph_test", "set_test_params"], "function_calls": ["range", "sum", "len", "enumerate", "MiniWallet", "assert_equal", "ceil", "MempoolUpdateFromBlockTest"], "class_names": ["MempoolUpdateFromBlockTest"], "class_method_calls": ["wallet.get_utxo", "self.generate", "self.num_nodes", "time.time", "tx_size.append", "tx_id.append", "self.nodes", "inputs.append", "self.log", "wallet.send_self_transfer_multi", "self.transaction_graph_test", "self.extra_args"]}, "mining_basic.py": {"libraries": ["test_framework.wallet.MiniWallet", "test_framework.blocktools.create_coinbase", "test_framework.blocktools.TIME_GENESIS_BLOCK", "test_framework.messages.CBlock", "decimal.Decimal", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.messages.CBlockHeader", "test_framework.util.assert_raises_rpc_error", "test_framework.blocktools.NORMAL_GBT_REQUEST_PARAMS", "test_framework.blocktools.get_witness_script", "test_framework.p2p.P2PDataStore", "copy", "test_framework.messages.BLOCK_HEADER_SIZE", "test_framework.messages.ser_uint256"], "function_names": ["assert_submitblock", "set_test_params", "chain_tip", "mine_chain", "run_test", "assert_template"], "function_calls": ["range", "assert_submitblock", "create_coinbase", "ser_uint256", "Decimal", "P2PDataStore", "int", "chain_tip", "CBlock", "CBlockHeader", "MiniWallet", "assert_equal", "bytearray", "MiningTest", "super", "assert_raises_rpc_error", "assert_template", "get_witness_script"], "class_names": ["MiningTest"], "class_method_calls": ["block.nVersion", "node.getmininginfo", "bad_block_sn.hex", "bad_block.vtx", "bad_tx.vin", "self.num_nodes", "node.getblocktemplate", "block.hashPrevBlock", "node.submitheader", "block.hash", "node.get_deterministic_priv_key", "copy.deepcopy", "block.vtx", "self.log", "block.hashMerkleRoot", "self.connect_nodes", "CBlock.get_merkle_root", "peer.send_blocks_and_test", "bad_block.hashMerkleRoot", "bad_block_root.serialize", "self.wallet", "self.generate", "bad_block_lock.serialize", "node.add_p2p_connection", "bad_block.nTime", "self.chain", "bad_block2.solve", "block.nNonce", "bad_block_time.nTime", "block.nBits", "bad_block.hashPrevBlock", "bad_block.nBits", "self.setup_clean_chain", "coinbase_tx.rehash", "block.serialize", "bad_block_lock.sha256", "bad_block_root.hashMerkleRoot", "block.solve", "bad_block_lock.calc_merkle_root", "bad_block2.hashPrevBlock", "script.hex", "block.nTime", "bad_block_lock.hashMerkleRoot", "bad_block_time.solve", "self.mine_chain", "block.calc_merkle_root", "bad_block_lock.solve", "self.generatetoaddress", "self.no_op", "node.submitblock", "bad_tx.rehash", "coinbase_tx.vin", "node.getchaintips", "self.supports_cli", "self.nodes", "bad_block_root.solve", "self.restart_node", "bad_block_lock.vtx", "bad_block_root.hash", "peer.wait_for_getheaders", "bad_block.serialize"]}, "mining_getblocktemplate_longpoll.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.get_rpc_proxy", "threading", "test_framework.wallet.MiniWallet", "random"], "function_names": ["__init__", "run", "run_test", "set_test_params"], "function_calls": ["get_rpc_proxy", "GetBlockTemplateLPTest", "LongpollThread", "MiniWallet"], "class_names": ["GetBlockTemplateLPTest", "LongpollThread"], "class_method_calls": ["threading.Thread", "self.generate", "self.num_nodes", "thr.join", "node.getblocktemplate", "node.coverage_dir", "random.choice", "self.miniwallet", "node.url", "self.supports_cli", "thr.start", "thr.is_alive", "self.nodes", "self.log", "self.node", "self.longpollid"]}, "mining_prioritisetransaction.py": {"libraries": ["test_framework.messages.MAX_BLOCK_WEIGHT", "decimal.Decimal", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.messages.COIN", "test_framework.util.create_lots_of_big_transactions", "test_framework.util.gen_return_txouts", "test_framework.wallet.MiniWallet", "time"], "function_names": ["run_test", "set_test_params", "test_diamond"], "function_calls": ["range", "len", "create_lots_of_big_transactions", "Decimal", "int", "PrioritiseTransactionTest", "MiniWallet", "assert_equal", "gen_return_txouts", "assert_raises_rpc_error"], "class_names": ["PrioritiseTransactionTest"], "class_method_calls": ["self.wallet", "self.generate", "self.no_op", "self.num_nodes", "time.time", "txids.append", "self.relayfee", "self.test_diamond", "self.supports_cli", "self.txouts", "self.nodes", "self.restart_node", "self.log", "self.extra_args"]}, "invalid_signer.py": {"libraries": ["argparse", "sys", "json", "os"], "function_names": ["getdescriptors", "perform_pre_checks", "enumerate"], "function_calls": ["int", "open", "perform_pre_checks"], "class_names": [], "class_method_calls": ["subparsers.add_parser", "f.read", "sys.exit", "sys.argv", "sys.stdout", "parser.parse_args", "parser_getdescriptors.add_argument", "args.func", "os.getcwd", "args.account", "parser_getdescriptors.set_defaults", "sys.stdin", "parser.add_argument", "parser.add_subparsers", "argparse.ArgumentParser", "json.dumps", "os.path", "subparsers.required", "buffer.rstrip", "parser_enumerate.set_defaults"]}, "multi_signers.py": {"libraries": ["argparse", "json", "sys"], "function_names": ["enumerate"], "function_calls": [], "class_names": [], "class_method_calls": ["subparsers.add_parser", "sys.argv", "parser.parse_args", "sys.stdout", "parser.add_subparsers", "argparse.ArgumentParser", "args.func", "json.dumps", "subparsers.required", "buffer.rstrip", "sys.stdin", "parser_enumerate.set_defaults"]}, "signer.py": {"libraries": ["argparse", "sys", "json", "os"], "function_names": ["signtx", "getdescriptors", "perform_pre_checks", "displayaddress", "enumerate"], "function_calls": ["int", "open", "perform_pre_checks"], "class_names": [], "class_method_calls": ["subparsers.add_parser", "f.read", "sys.exit", "parser_signtx.add_argument", "sys.argv", "sys.stdout", "parser_displayaddress.add_argument", "args.desc", "parser.parse_args", "parser_getdescriptors.add_argument", "args.func", "os.getcwd", "args.account", "parser_getdescriptors.set_defaults", "sys.stdin", "parser_signtx.set_defaults", "parser.add_argument", "args.fingerprint", "args.psbt", "parser.add_subparsers", "argparse.ArgumentParser", "json.dumps", "os.path", "subparsers.required", "buffer.rstrip", "parser_displayaddress.set_defaults", "parser_enumerate.set_defaults"]}, "p2p_add_connections.py": {"libraries": ["test_framework.p2p.P2PInterface", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.check_node_connections", "test_framework.util.assert_equal"], "function_names": ["on_version", "run_test", "set_test_params", "setup_network"], "function_calls": ["range", "check_node_connections", "assert_equal", "P2PAddConnections", "P2PInterface", "P2PFeelerReceiver"], "class_names": ["P2PAddConnections", "P2PFeelerReceiver"], "class_method_calls": ["self.num_nodes", "self.nodes", "self.restart_node", "feeler_conn.message_count", "self.log", "self.setup_nodes", "feeler_conn.last_message", "feeler_conn.is_connected"]}, "p2p_addr_relay.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.msg_addr", "test_framework.util.assert_greater_than_or_equal", "test_framework.messages.msg_getaddr", "test_framework.util.assert_equal", "test_framework.messages.msg_verack", "test_framework.util.assert_greater_than", "test_framework.p2p.p2p_lock", "test_framework.p2p.P2P_SERVICES", "test_framework.messages.CAddress", "test_framework.p2p.P2PInterface", "random", "time"], "function_names": ["sum_addr_messages", "relay_tests", "increment_tokens", "__init__", "on_version", "getaddr_received", "destination_rotates_more_than_once_over_several_days_test", "get_nodes_that_received_addr", "on_addr", "tokens", "set_test_params", "setup_addr_msg", "rate_limit_tests", "run_test", "getaddr_tests", "send_addr_msg", "blocksonly_mode_tests", "send_addrs_and_test_rate_limiting", "addr_received", "on_getaddr", "inbound_blackhole_tests", "destination_rotates_once_in_24_hours_test", "oversized_addr_test"], "function_calls": ["sum", "range", "msg_verack", "msg_addr", "len", "int", "assert_greater_than", "CAddress", "min", "AssertionError", "AddrTest", "assert_equal", "msg_getaddr", "max", "P2PInterface", "AddrReceiver", "assert_greater_than_or_equal", "super"], "class_names": ["AddrTest", "AddrReceiver"], "class_method_calls": ["self.mocktime", "receiver_peer.num_ipv4_received", "block_relay_peer.getaddr_received", "source.send_and_ping", "self.num_nodes", "receivers.append", "blackhole_peer.send_and_ping", "addr.port", "self.getaddr_tests", "self.send_addr_msg", "full_outbound_peer.send_and_ping", "self.num_ipv4_received", "self.blocksonly_mode_tests", "self.log", "peer.tokens", "self.oversized_addr_test", "self.test_addr_contents", "receiver_peer.sync_with_ping", "peer.increment_tokens", "self.addr_receivers", "inbound_peer.sync_with_ping", "self.send_getaddr", "self.rate_limit_tests", "inbound_peer.send_and_ping", "full_outbound_peer.num_ipv4_received", "peer.send_and_ping", "random.randrange", "msgs_dict.items", "self.send_message", "self.message_count", "block_relay_peer.sync_with_ping", "inbound_peer.wait_until", "self.setup_addr_msg", "self.inbound_blackhole_tests", "addr.nServices", "time.time", "blackhole_peer.num_ipv4_received", "addr.ip", "blackhole_peer.sync_with_ping", "full_outbound_peer.getaddr_received", "block_relay_peer.num_ipv4_received", "inbound_peer.addr_received", "addr_receiver.num_ipv4_received", "self.get_nodes_that_received_addr", "self.destination_rotates_more_than_once_over_several_days_test", "message.addrs", "self.sum_addr_messages", "self.msg", "self.send_addrs_and_test_rate_limiting", "block_relay_peer.send_and_ping", "full_outbound_peer.sync_with_ping", "self.relay_tests", "self.counter", "peer.sync_send_with_ping", "node.addr_received", "msg.addrs", "addr.time", "r.num_ipv4_received", "self._tokens", "self.nodes", "self.restart_node", "addrs.append", "self.destination_rotates_once_in_24_hours_test", "addr_source.send_and_ping", "self.extra_args", "inbound_peer.num_ipv4_received"]}, "p2p_addrfetch.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.msg_addr", "test_framework.util.assert_equal", "test_framework.p2p.p2p_lock", "test_framework.p2p.P2P_SERVICES", "test_framework.p2p.P2PInterface", "test_framework.messages.CAddress", "time"], "function_names": ["run_test", "set_test_params", "assert_getpeerinfo"], "function_calls": ["range", "len", "msg_addr", "int", "CAddress", "assert_equal", "P2PInterface", "P2PAddrFetch"], "class_names": ["P2PAddrFetch"], "class_method_calls": ["peer.message_count", "peer.sync_send_with_ping", "peer.send_and_ping", "time.time", "self.num_nodes", "msg.addrs", "peer.send_message", "peer.wait_for_disconnect", "node.setmocktime", "ADDR.time", "self.nodes", "ADDR.port", "node.add_outbound_p2p_connection", "self.log", "ADDR.nServices", "ADDR.ip", "self.assert_getpeerinfo", "self.setup_clean_chain"]}, "p2p_addrv2_relay.py": {"libraries": ["test_framework.messages.msg_addrv2", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.p2p.P2P_SERVICES", "test_framework.p2p.P2PInterface", "test_framework.messages.CAddress", "time"], "function_names": ["__init__", "on_addrv2", "set_test_params", "wait_for_addrv2", "run_test"], "function_calls": ["range", "len", "set", "msg_addrv2", "int", "CAddress", "AddrTest", "assert_equal", "P2PInterface", "AddrReceiver", "super"], "class_names": ["AddrTest", "AddrReceiver"], "class_method_calls": ["self.num_nodes", "addr.port", "self.log", "addr.net", "self.setup_clean_chain", "addr.nServices", "addr.ip", "time.time", "self.last_message", "addr_receiver.addrv2_received_and_checked", "addr.NET_I2P", "message.addrs", "self.addrv2_received_and_checked", "addr_receiver.wait_for_addrv2", "addr.time", "msg.addrs", "self.wait_until", "self.nodes", "ADDRS.append", "addr_source.send_and_ping", "self.extra_args"]}, "p2p_block_sync.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework"], "function_names": ["run_test", "set_test_params", "setup_network"], "function_calls": ["BlockSyncTest"], "class_names": ["BlockSyncTest"], "class_method_calls": ["self.generate", "self.num_nodes", "self.nodes", "self.log", "self.connect_nodes", "self.setup_nodes", "self.setup_clean_chain"]}, "p2p_blockfilters.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.msg_getcfcheckpt", "test_framework.util.assert_equal", "test_framework.messages.ser_uint256", "test_framework.messages.hash256", "test_framework.messages.FILTER_TYPE_BASIC", "test_framework.p2p.P2PInterface", "test_framework.messages.msg_getcfilters", "test_framework.messages.NODE_COMPACT_FILTERS", "test_framework.messages.uint256_from_str", "test_framework.messages.msg_getcfheaders"], "function_names": ["__init__", "set_test_params", "on_cfilter", "pop_cfilters", "compute_last_header", "run_test"], "function_calls": ["len", "range", "FiltersClient", "msg_getcfilters", "int", "uint256_from_str", "compute_last_header", "zip", "assert_equal", "msg_getcfheaders", "hash256", "P2PInterface", "msg_getcfcheckpt", "ser_uint256", "super", "CompactFiltersTest"], "class_names": ["FiltersClient", "CompactFiltersTest"], "class_method_calls": ["request.stop_hash", "response.prev_header", "self.num_nodes", "peer_0.wait_for_disconnect", "self.sync_blocks", "self.log", "response.hashes", "self.connect_nodes", "self.rpc_timeout", "peer_0.pop_cfilters", "self.generate", "peer_0.send_message", "peer_0.last_message", "cfilter.filter_type", "peer_0.send_and_ping", "self.setup_clean_chain", "response.filter_type", "peer_1.wait_for_disconnect", "self.cfilters", "peer_1.nServices", "cfilter.filter_data", "self.stop_node", "self.disconnect_nodes", "self.no_op", "peer_1.send_message", "cfilter.block_hash", "self.nodes", "peer_0.nServices", "response.stop_hash", "response.headers", "request.filter_type", "self.extra_args"]}, "p2p_blocksonly.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.messages.msg_tx", "test_framework.messages.MSG_WTX", "test_framework.p2p.P2PTxInvStore", "test_framework.p2p.P2PInterface", "test_framework.messages.CInv", "test_framework.messages.msg_inv", "test_framework.wallet.MiniWallet", "time"], "function_names": ["blocks_relay_conn_tests", "check_p2p_inv_violation", "blocksonly_mode_tests", "set_test_params", "check_p2p_tx_violation", "run_test"], "function_calls": ["msg_inv", "P2PTxInvStore", "int", "P2PBlocksOnly", "CInv", "MiniWallet", "assert_equal", "P2PInterface", "msg_tx"], "class_names": ["P2PBlocksOnly"], "class_method_calls": ["self.num_nodes", "first_peer.relay", "peer.wait_for_disconnect", "conn.get_invs", "self.check_p2p_inv_violation", "self.miniwallet", "conn.sync_send_with_ping", "self.log", "self.check_p2p_tx_violation", "self.blocksonly_mode_tests", "self.generate", "second_peer.wait_for_tx", "tx_relay_peer.wait_for_tx", "self.blocks_relay_conn_tests", "time.time", "first_peer.is_connected", "first_peer.send_message", "peer.send_message", "self.nodes", "self.restart_node", "self.extra_args"]}, "p2p_compactblocks.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.tx_from_hex", "test_framework.messages.msg_blocktxn", "test_framework.messages.msg_tx", "test_framework.blocktools.add_witness_commitment", "test_framework.messages.CTxIn", "test_framework.messages.PrefilledTransaction", "test_framework.messages.MSG_BLOCK", "test_framework.blocktools.COINBASE_MATURITY", "random", "test_framework.messages.msg_no_witness_blocktxn", "test_framework.messages.CBlock", "test_framework.messages.msg_sendheaders", "test_framework.blocktools.create_block", "test_framework.messages.CTxInWitness", "test_framework.messages.CBlockHeader", "test_framework.messages.msg_getblocktxn", "test_framework.messages.msg_no_witness_block", "test_framework.p2p.p2p_lock", "test_framework.blocktools.NORMAL_GBT_REQUEST_PARAMS", "test_framework.messages.CTxOut", "test_framework.p2p.P2PInterface", "test_framework.messages.HeaderAndShortIDs", "test_framework.messages.from_hex", "test_framework.messages.calculate_shortid", "test_framework.messages.msg_inv", "test_framework.script.CScript", "test_framework.messages.MSG_CMPCT_BLOCK", "test_framework.messages.BlockTransactionsRequest", "test_framework.messages.MSG_WITNESS_FLAG", "test_framework.util.softfork_active", "test_framework.util.assert_equal", "test_framework.script.OP_TRUE", "test_framework.messages.msg_sendcmpct", "test_framework.messages.BlockTransactions", "test_framework.messages.msg_headers", "test_framework.wallet.MiniWallet", "test_framework.messages.msg_block", "test_framework.messages.COutPoint", "test_framework.messages.P2PHeaderAndShortIDs", "test_framework.messages.msg_cmpctblock", "test_framework.messages.msg_getheaders", "test_framework.script.OP_DROP", "test_framework.messages.CInv", "test_framework.messages.CTransaction", "test_framework.messages.msg_getdata", "test_framework.messages.ser_uint256"], "function_names": ["test_invalid_cmpctblock_message", "test_compactblock_reconstruction_stalling_peer", "build_block_with_transactions", "__init__", "clear_getblocktxn", "announce_cmpct_block", "on_headers", "test_incorrect_blocktxn_response", "test_getblocktxn_response", "on_cmpctblock", "received_hash", "make_utxos", "check_announcement_of_new_block", "test_low_work_compactblocks", "get_headers", "check_compactblock_construction_from_block", "received_block_announcement", "test_end_to_end_block_relay", "assert_highbandwidth_states", "request_headers_and_sync", "set_test_params", "on_sendcmpct", "clear_block_announcement", "test_compactblocks_not_at_tip", "test_sendcmpct", "build_block_on_tip", "wait_for_block_announcement", "test_highbandwidth_mode_states_via_getpeerinfo", "run_test", "send_header_for_blocks", "test_invalid_tx_in_compactblock", "on_inv", "send_await_disconnect", "test_compactblock_requests", "request_cb_announcements", "test_getblocktxn_requests", "test_compactblock_reconstruction_parallel_reconstruction", "test_tip_after_message", "test_compactblock_construction", "received_sendcmpct", "test_getblocktxn_handler"], "function_calls": ["range", "from_hex", "set", "sorted", "BlockTransactionsRequest", "COutPoint", "CTransaction", "CTxInWitness", "msg_tx", "HeaderAndShortIDs", "msg_no_witness_blocktxn", "msg_block", "PrefilledTransaction", "len", "msg_no_witness_block", "announce_cmpct_block", "msg_sendheaders", "predicate", "CScript", "CInv", "P2PHeaderAndShortIDs", "msg_getheaders", "test_getblocktxn_response", "msg_getdata", "check_announcement_of_new_block", "create_block", "ser_uint256", "assert_highbandwidth_states", "msg_inv", "tx_from_hex", "msg_headers", "CBlockHeader", "MiniWallet", "assert_equal", "CTxOut", "msg_cmpctblock", "super", "calculate_shortid", "softfork_active", "add_witness_commitment", "msg_sendcmpct", "int", "CompactBlocksTest", "msg_blocktxn", "CBlock", "BlockTransactions", "test_tip_after_message", "TestP2PConn", "CTxIn", "msg_getblocktxn"], "class_names": ["TestP2PConn", "CompactBlocksTest"], "class_method_calls": ["block.hashPrevBlock", "self.test_end_to_end_block_relay", "inbound_peer.clear_getblocktxn", "cmpct_block.header", "test_node.send_header_for_blocks", "peer.send_and_ping", "self.test_compactblocks_not_at_tip", "node.getpeerinfo", "peer.get_headers", "self.send_message", "inbound_peer.last_message", "self.last_sendcmpct", "self.onemore_inbound_node", "cmpct_block.initialize_from_block", "node.getrawmempool", "self.setup_clean_chain", "self.test_incorrect_blocktxn_response", "delivery_peer.send_message", "block2.sha256", "comp_block.initialize_from_block", "peer.block_announced", "self.test_sendcmpct", "random.randint", "x.hash", "block.sha256", "bad_peer.send_message", "self.check_compactblock_construction_from_block", "node.getblock", "self.wait_until", "node.getchaintips", "self.make_utxos", "header_and_shortids.header", "outbound_peer.send_and_ping", "self.extra_args", "self.get_headers", "cmpct_block.prefilled_txn_length", "header_and_shortids.prefilled_txn", "self.utxos", "block2.hashMerkleRoot", "block2.solve", "self.test_compactblock_reconstruction_stalling_peer", "delivery_peer.clear_getblocktxn", "test_node.wait_until", "headers_message.headers", "node.getblockcount", "node.getbestblockhash", "self.test_invalid_tx_in_compactblock", "block2.calc_merkle_root", "test_node.send_message", "self.test_compactblock_construction", "self.test_compactblock_reconstruction_parallel_reconstruction", "outbound_peer.clear_getblocktxn", "comp_block.shortids", "x.type", "tx.hash", "self.test_compactblock_requests", "delivery_peer.last_message", "block.calc_merkle_root", "msg.block_txn_request", "self.build_block_on_tip", "test_node.wait_for_block_announcement", "self.additional_segwit_node", "l.wait_until", "node.submitblock", "peer.last_message", "self.nodes", "outbound_peer.last_message", "self.block_announced", "tx.sha256", "l.clear_block_announcement", "self.num_nodes", "x.sha256", "cmpct_block.prefilled_txn", "tx.rehash", "block.hash", "x.calc_sha256", "block.vtx", "cmpct_block.use_witness", "msg.hashstop", "new_blocks.append", "comp_block.nonce", "test_node.received_block_announcement", "inbound_peer.send_and_ping", "self.received_block_announcement", "tx.vin", "self.test_highbandwidth_mode_states_via_getpeerinfo", "header_and_shortids.get_siphash_keys", "block.serialize", "compact_block.to_p2p", "test_node.wait_for_getdata", "comp_block.get_siphash_keys", "random.sample", "self.segwit_node", "self.wait_for_disconnect", "tx.wit", "msg_bt.block_transactions", "peer.clear_getblocktxn", "tx.calc_sha256", "test_node.request_headers_and_sync", "self.test_invalid_cmpctblock_message", "self.outbound_node", "msg.block_transactions", "peer.clear_block_announcement", "test_node.clear_block_announcement", "test_node.last_message", "node.getblocktemplate", "self.clear_block_announcement", "test_node.send_and_ping", "self.test_low_work_compactblocks", "cmpct_block.to_p2p", "self.log", "entry.index", "self.build_block_with_transactions", "block.hashMerkleRoot", "hb_test_node.send_and_ping", "node.getblockhash", "self.announced_blockhashes", "self.wallet", "self.generate", "self.request_cb_announcements", "block2.vtx", "delivery_peer.send_and_ping", "tx.vout", "self.test_getblocktxn_handler", "comp_block.to_p2p", "msg.locator", "peer.wait_for_block_announcement", "delivery_peer.sync_with_ping", "block.solve", "test_node.last_sendcmpct", "header_and_shortids.shortids", "self.last_message", "self.test_getblocktxn_requests", "entry.tx", "test_node.sync_with_ping", "bad_peer.wait_for_disconnect", "node.assert_debug_log", "block.rehash", "l.last_message", "p.last_message", "stalling_peer.send_and_ping", "comp_block.header"]}, "p2p_compactblocks_blocksonly.py": {"libraries": ["test_framework.messages.MSG_WITNESS_FLAG", "test_framework.messages.CBlock", "test_framework.messages.msg_block", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.messages.CBlockHeader", "test_framework.messages.msg_sendcmpct", "test_framework.p2p.P2PInterface", "test_framework.messages.CInv", "test_framework.messages.from_hex", "test_framework.messages.msg_headers", "test_framework.messages.MSG_CMPCT_BLOCK", "test_framework.messages.MSG_BLOCK", "test_framework.messages.msg_getdata"], "function_names": ["set_test_params", "build_block_on_tip", "setup_network", "test_for_cmpctblock", "run_test"], "function_calls": ["from_hex", "msg_sendcmpct", "P2PCompactBlocksBlocksOnly", "int", "msg_headers", "CBlock", "CInv", "CBlockHeader", "assert_equal", "msg_getdata", "P2PInterface", "test_for_cmpctblock", "msg_block"], "class_names": ["P2PCompactBlocksBlocksOnly"], "class_method_calls": ["p2p_conn_high_bw.sync_send_with_ping", "block0.serialize", "p2p_conn_high_bw.send_and_ping", "self.num_nodes", "p2p_conn_high_bw.wait_until", "self.log", "p2p_conn_blocksonly.send_message", "block1.serialize", "block1.sha256", "self.generate", "p2p_conn_high_bw.send_message", "p2p_conn_low_bw.last_message", "self.extra_args", "block2.serialize", "block0.sha256", "node.getblockchaininfo", "p2p_conn_blocksonly.last_message", "self.sync_all", "p2p_conn_low_bw.send_and_ping", "p2p_conn_blocksonly.send_and_ping", "p2p_conn_blocksonly.sync_send_with_ping", "p2p_conn_high_bw.last_message", "p2p_conn_blocksonly.message_count", "block.sha256", "self.build_block_on_tip", "self.no_op", "p2p_conn_blocksonly.wait_until", "p2p_conn_high_bw.message_count", "block.rehash", "conn.send_and_ping", "self.nodes", "self.setup_nodes", "p2p_conn_low_bw.sync_with_ping", "conn.message_count"]}, "p2p_compactblocks_hb.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["set_test_params", "relay_block_through", "setup_network", "peer_info", "run_test"], "function_calls": ["sum", "assert_equal", "CompactBlocksConnectionTest", "range"], "class_names": ["CompactBlocksConnectionTest"], "class_method_calls": ["self.disconnect_nodes", "self.generate", "self.num_nodes", "self.nodes", "self.peer_info", "self.sync_all", "self.log", "self.connect_nodes", "self.relay_block_through", "self.setup_nodes", "self.setup_clean_chain"]}, "p2p_disconnect_ban.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework", "time", "test_framework.util.assert_equal"], "function_names": ["run_test", "set_test_params"], "function_calls": ["len", "int", "assert_equal", "DisconnectBanTest", "assert_raises_rpc_error"], "class_names": ["DisconnectBanTest"], "class_method_calls": ["self.num_nodes", "time.time", "self.wait_until", "self.supports_cli", "self.nodes", "self.restart_node", "self.log", "self.connect_nodes"]}, "p2p_dns_seeds.py": {"libraries": ["itertools", "test_framework.p2p.P2PInterface", "test_framework.test_framework.BitcoinTestFramework"], "function_names": ["existing_block_relay_connections_test", "set_test_params", "wait_time_tests", "init_arg_tests", "existing_outbound_connections_test", "run_test", "force_dns_test"], "function_calls": ["P2PDNSSeeds", "range", "P2PInterface", "len"], "class_names": ["P2PDNSSeeds"], "class_method_calls": ["self.wait_time_tests", "self.num_nodes", "self.force_dns_test", "self.init_arg_tests", "itertools.count", "self.nodes", "self.start_node", "self.existing_block_relay_connections_test", "self.restart_node", "self.log", "self.existing_outbound_connections_test", "self.extra_args", "self.setup_clean_chain"]}, "p2p_dos_header_tree.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "os", "test_framework.messages.CBlockHeader", "test_framework.p2p.P2PInterface", "test_framework.p2p.msg_headers", "test_framework.messages.from_hex"], "function_names": ["run_test", "add_options", "set_test_params"], "function_calls": ["len", "from_hex", "msg_headers", "CBlockHeader", "P2PInterface", "RejectLowDifficultyHeadersTest", "open"], "class_names": ["RejectLowDifficultyHeadersTest"], "class_method_calls": ["self.options", "self.headers_fork", "l.startswith", "self.num_nodes", "self.headers_file_path", "peer_before_checkpoint.send_and_ping", "self.log", "peer_checkpoint.send_message", "self.headers", "peer_checkpoint.send_and_ping", "peer_no_checkpoint.send_and_ping", "headers_data.readlines", "self.chain", "l.strip", "self.setup_clean_chain", "peer_checkpoint.wait_for_disconnect", "parser.add_argument", "os.path", "self.nodes", "self.restart_node", "self.extra_args"]}, "p2p_eviction.py": {"libraries": ["test_framework.blocktools.create_coinbase", "test_framework.messages.msg_pong", "test_framework.blocktools.create_block", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.messages.msg_tx", "test_framework.p2p.P2PDataStore", "test_framework.p2p.P2PInterface", "test_framework.wallet.MiniWallet", "time"], "function_names": ["run_test", "set_test_params", "on_ping"], "function_calls": ["range", "msg_pong", "set", "sorted", "len", "SlowP2PInterface", "create_coinbase", "int", "P2PEvict", "MiniWallet", "assert_equal", "SlowP2PDataStore", "P2PInterface", "create_block", "msg_tx"], "class_names": ["SlowP2PDataStore", "P2PEvict", "SlowP2PInterface"], "class_method_calls": ["evicted_peers.append", "self.num_nodes", "self.log", "txpeer.send_message", "node.getblockcount", "fastpeer.last_message", "self.wallet", "node.getbestblockhash", "txpeer.sync_with_ping", "node.getpeerinfo", "message.nonce", "node.add_p2p_connection", "self.send_message", "block_peer.send_blocks_and_test", "block.solve", "node.p2ps", "pings.items", "time.sleep", "node.getblock", "self.wait_until", "self.nodes", "protected_peers.add", "block_peer.sync_with_ping", "self.extra_args"]}, "p2p_feefilter.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.p2p.p2p_lock", "test_framework.messages.MSG_WTX", "test_framework.p2p.P2PInterface", "test_framework.messages.MSG_TX", "test_framework.messages.msg_feefilter", "test_framework.wallet.MiniWallet"], "function_names": ["__init__", "set_test_params", "on_inv", "test_feefilter_blocksonly", "on_feefilter", "assert_feefilter_received", "wait_for_invs_to_match", "test_feefilter_forcerelay", "test_feefilter", "run_test", "clear_invs"], "function_calls": ["range", "sorted", "FeefilterConn", "Decimal", "FeeFilterTest", "MiniWallet", "assert_equal", "TestP2PConn", "msg_feefilter", "super"], "class_names": ["FeeFilterTest", "TestP2PConn", "FeefilterConn"], "class_method_calls": ["i.hash", "invs_expected.sort", "self.num_nodes", "self.log", "feefilter_peer.sync_with_ping", "self.test_feefilter_forcerelay", "self.connect_nodes", "miniwallet.send_self_transfer", "message.inv", "self.extra_args", "self.test_feefilter", "self.sync_mempools", "feefilter_peer.assert_feefilter_received", "conn.wait_for_invs_to_match", "i.type", "self.test_feefilter_blocksonly", "self.feefilter_received", "self.wait_until", "self.txinvs", "self.nodes", "conn.send_and_ping", "self.restart_node", "conn.clear_invs"]}, "p2p_filter.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.COIN", "test_framework.messages.MSG_BLOCK", "test_framework.script.MAX_SCRIPT_ELEMENT_SIZE", "test_framework.messages.MAX_BLOOM_FILTER_SIZE", "test_framework.p2p.p2p_lock", "test_framework.messages.MAX_BLOOM_HASH_FUNCS", "test_framework.p2p.P2PInterface", "test_framework.wallet.getnewdestination", "test_framework.messages.msg_filterclear", "test_framework.p2p.P2P_SUBVERSION", "test_framework.messages.msg_mempool", "test_framework.p2p.P2P_VERSION", "test_framework.messages.msg_filteradd", "test_framework.messages.msg_version", "test_framework.p2p.P2P_SERVICES", "test_framework.messages.msg_filterload", "test_framework.messages.CInv", "test_framework.messages.MSG_FILTERED_BLOCK", "test_framework.messages.msg_getdata", "test_framework.wallet.MiniWallet"], "function_names": ["__init__", "merkleblock_received", "set_test_params", "on_inv", "test_msg_mempool", "on_tx", "tx_received", "test_frelay_false", "test_size_limits", "test_filter", "on_merkleblock", "run_test", "generatetoscriptpubkey"], "function_calls": ["msg_version", "len", "range", "msg_mempool", "msg_filteradd", "getnewdestination", "msg_filterload", "int", "CInv", "FilterTest", "MiniWallet", "msg_filterclear", "P2PBloomFilter", "msg_getdata", "super"], "class_names": ["P2PBloomFilter", "FilterTest"], "class_method_calls": ["bytes.fromhex", "i.hash", "self._merkleblock_received", "filter_peer.send_and_ping", "filter_peer.watch_script_pubkey", "self.num_nodes", "self.test_filter", "filter_peer.send_message", "self.log", "tx_received.setter", "self.wallet", "self.generate", "message.inv", "filter_peer.merkleblock_received", "filter_peer.wait_for_tx", "scriptpubkey.hex", "filter_peer.wait_for_inv", "self.send_message", "filter_peer_without_nrelay.send_message", "self.generatetoscriptpubkey", "filter_peer.sync_send_with_ping", "self.test_size_limits", "filter_peer.tx_received", "filter_peer.sync_with_ping", "version_without_fRelay.nServices", "i.type", "filter_peer_without_nrelay.wait_for_verack", "self.generatetodescriptor", "version_without_fRelay.strSubVer", "self.test_msg_mempool", "self._tx_received", "version_without_fRelay.nVersion", "filter_peer.watch_filter_init", "version_without_fRelay.relay", "self.nodes", "filter_peer.wait_for_merkleblock", "want.inv", "merkleblock_received.setter", "self.extra_args", "self.test_frelay_false"]}, "p2p_fingerprint.py": {"libraries": ["test_framework.p2p.msg_getheaders", "test_framework.blocktools.create_coinbase", "test_framework.p2p.msg_getdata", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.util.assert_equal", "test_framework.p2p.p2p_lock", "test_framework.p2p.P2PInterface", "test_framework.messages.CInv", "test_framework.p2p.msg_headers", "test_framework.p2p.msg_block", "test_framework.messages.MSG_BLOCK", "time"], "function_names": ["send_header_request", "send_block_request", "set_test_params", "build_chain", "run_test"], "function_calls": ["P2PFingerprintTest", "range", "len", "create_coinbase", "int", "msg_headers", "CInv", "msg_getheaders", "assert_equal", "msg_getdata", "P2PInterface", "msg_block", "create_block", "hex"], "class_names": ["P2PFingerprintTest"], "class_method_calls": ["node0.last_message", "self.num_nodes", "node0.wait_for_block", "x.sha256", "block.hash", "node0.send_message", "node0.wait_for_header", "self.send_header_request", "msg.hashstop", "self.send_block_request", "blocks.append", "node0.send_and_ping", "node.send_message", "msg.inv", "node0.sync_with_ping", "self.setup_clean_chain", "node0.wait_for_getdata", "block.solve", "time.time", "self.build_chain", "self.generatetoaddress", "self.nodes"]}, "p2p_getaddr_caching.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.msg_getaddr", "test_framework.util.assert_equal", "test_framework.util.p2p_port", "test_framework.p2p.p2p_lock", "test_framework.p2p.P2PInterface", "time"], "function_names": ["__init__", "set_test_params", "get_received_addrs", "addr_received", "on_addr", "run_test"], "function_calls": ["range", "len", "set", "int", "AddrTest", "msg_getaddr", "assert_equal", "AddrReceiver", "super", "p2p_port"], "class_names": ["AddrTest", "AddrReceiver"], "class_method_calls": ["addr_receiver_onion2.get_received_addrs", "self.num_nodes", "addr_receiver_onion1.send_and_ping", "addr_receiver_onion2.addr_received", "self.log", "addr_receiver_local.get_received_addrs", "self.onion_port2", "addr_receiver_onion1.addr_received", "self.onion_port1", "addr_receiver_local.wait_until", "addr.ip", "time.time", "addr_receiver_onion1.wait_until", "addr_receiver_onion2.wait_until", "addr_receiver_onion1.get_received_addrs", "message.addrs", "addr_receiver_local.send_and_ping", "addr_receiver_onion2.send_and_ping", "addr_receiver_local.addr_received", "self.received_addrs", "self.nodes", "self.extra_args"]}, "p2p_getdata.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.p2p.P2PInterface", "test_framework.messages.CInv", "collections.defaultdict", "test_framework.messages.msg_getdata"], "function_names": ["__init__", "on_block", "run_test", "set_test_params"], "function_calls": ["int", "CInv", "P2PStoreBlock", "msg_getdata", "defaultdict", "super", "GetdataTest"], "class_names": ["GetdataTest", "P2PStoreBlock"], "class_method_calls": ["invalid_getdata.inv", "good_getdata.inv", "p2p_block_store.blocks", "self.num_nodes", "self.blocks", "p2p_block_store.wait_until", "self.nodes", "p2p_block_store.send_and_ping", "self.log", "message.block"]}, "p2p_headers_sync_with_minchainwork.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.util.assert_equal", "test_framework.blocktools.NORMAL_GBT_REQUEST_PARAMS", "test_framework.p2p.P2PInterface", "test_framework.messages.msg_headers"], "function_names": ["set_test_params", "test_peerinfo_includes_headers_presync_height", "check_node3_chaintips", "run_test", "test_chains_sync_when_long_enough", "test_large_reorgs_can_succeed", "setup_network", "disconnect_all", "reconnect_all"], "function_calls": ["range", "len", "int", "msg_headers", "check_node3_chaintips", "assert_equal", "P2PInterface", "RejectLowDifficultyHeadersTest", "create_block"], "class_names": ["RejectLowDifficultyHeadersTest"], "class_method_calls": ["self.num_nodes", "node.getblocktemplate", "self.sync_blocks", "self.log", "self.test_large_reorgs_can_succeed", "new_blocks.append", "self.rpc_timeout", "self.connect_nodes", "node.getblockhash", "self.generate", "node.getpeerinfo", "self.extra_args", "self.reconnect_all", "self.setup_clean_chain", "self.test_chains_sync_when_long_enough", "self.disconnect_all", "block.solve", "self.test_peerinfo_includes_headers_presync_height", "self.sync_all", "block.sha256", "self.disconnect_nodes", "self.no_op", "node.getchaintips", "p2p.send_and_ping", "self.nodes", "self.setup_nodes"]}, "p2p_i2p_ports.py": {"libraries": ["re", "test_framework.test_framework.BitcoinTestFramework"], "function_names": ["run_test", "set_test_params"], "function_calls": ["I2PPorts", "str", "AssertionError"], "class_names": ["I2PPorts"], "class_method_calls": ["node.assert_debug_log", "self.num_nodes", "re.search", "self.nodes", "self.log", "self.extra_args", "node.addnode"]}, "p2p_i2p_sessions.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework"], "function_names": ["run_test", "set_test_params"], "function_calls": ["I2PSessions"], "class_names": ["I2PSessions"], "class_method_calls": ["node0.addnode", "self.num_nodes", "self.nodes", "node1.addnode", "self.log", "node1.assert_debug_log", "self.extra_args", "node0.assert_debug_log"]}, "p2p_ibd_stalling.py": {"libraries": ["test_framework.blocktools.create_coinbase", "test_framework.messages.MSG_TYPE_MASK", "test_framework.blocktools.create_block", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.p2p.P2PDataStore", "test_framework.p2p.msg_headers", "test_framework.p2p.msg_block", "test_framework.messages.MSG_BLOCK", "test_framework.p2p.CBlockHeader", "time"], "function_names": ["__init__", "on_getheaders", "set_test_params", "total_bytes_recv_for_blocks", "all_sync_send_with_ping", "on_getdata", "run_test", "is_block_requested"], "function_calls": ["range", "sum", "create_coinbase", "int", "msg_headers", "P2PIBDStallingTest", "CBlockHeader", "assert_equal", "P2PStaller", "msg_block", "super", "create_block"], "class_names": ["P2PIBDStallingTest", "P2PStaller"], "class_method_calls": ["self.mocktime", "x.is_connected", "inv.hash", "p.sync_send_with_ping", "self.num_nodes", "node.add_outbound_p2p_connection", "self.log", "headers_message.headers", "self.stall_block", "node.getblockcount", "blocks.append", "node.getbestblockhash", "message.inv", "node.setmocktime", "self.send_message", "p.getdata_requests", "p.is_connected", "inv.type", "self.setup_clean_chain", "self.getdata_requests", "self.block_store", "node.p2ps", "time.time", "self.all_sync_send_with_ping", "node.assert_debug_log", "peers.append", "node.getblock", "self.is_block_requested", "self.wait_until", "self.nodes", "p.send_message", "node.num_test_p2p_connections", "self.total_bytes_recv_for_blocks"]}, "p2p_ibd_txrelay.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.messages.msg_tx", "test_framework.p2p.p2p_lock", "test_framework.p2p.P2PDataStore", "test_framework.messages.MSG_WTX", "test_framework.p2p.P2PInterface", "test_framework.messages.COIN", "test_framework.messages.CInv", "test_framework.messages.from_hex", "test_framework.messages.CTransaction", "test_framework.messages.msg_inv", "test_framework.p2p.NONPREF_PEER_TX_DELAY", "time"], "function_names": ["run_test", "set_test_params"], "function_calls": ["msg_inv", "from_hex", "Decimal", "P2PDataStore", "int", "all", "CInv", "P2PIBDTxRelayTest", "CTransaction", "P2PInterface", "msg_tx"], "class_names": ["P2PIBDTxRelayTest"], "class_method_calls": ["peer_inver.getdata_requests", "self.generate", "peer_inver.sync_send_with_ping", "self.num_nodes", "time.time", "node.getpeerinfo", "self.wait_until", "peer_txer.send_and_ping", "self.nodes", "self.log", "peer_inver.send_and_ping", "self.extra_args", "self.setup_clean_chain", "node.getblockchaininfo"]}, "p2p_initial_headers_sync.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.p2p.p2p_lock", "test_framework.p2p.P2PInterface", "test_framework.messages.CInv", "test_framework.messages.msg_inv", "test_framework.messages.msg_headers", "test_framework.messages.MSG_BLOCK", "random"], "function_names": ["run_test", "announce_random_block", "set_test_params"], "function_calls": ["msg_inv", "msg_headers", "CInv", "assert_equal", "P2PInterface", "HeadersSyncTest"], "class_names": ["HeadersSyncTest"], "class_method_calls": ["self.num_nodes", "p.send_and_ping", "p.last_message", "peer1.wait_for_getheaders", "peer1.last_message", "random.randrange", "peer1.send_message", "peer2.last_message", "self.nodes", "p.send_message", "p.sync_with_ping", "peer3.last_message", "self.log", "expected_peer.wait_for_getheaders", "self.announce_random_block", "self.setup_clean_chain"]}, "p2p_invalid_block.py": {"libraries": ["test_framework.blocktools.create_coinbase", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.util.assert_equal", "test_framework.script.OP_TRUE", "test_framework.blocktools.MAX_FUTURE_BLOCK_TIME", "test_framework.p2p.P2PDataStore", "copy", "test_framework.messages.COIN", "test_framework.blocktools.create_tx_with_script", "time"], "function_names": ["run_test", "set_test_params"], "function_calls": ["create_coinbase", "bytes", "P2PDataStore", "int", "InvalidBlockRequestTest", "assert_equal", "create_block", "create_tx_with_script"], "class_names": ["InvalidBlockRequestTest"], "class_method_calls": ["tx3.rehash", "self.num_nodes", "block2.solve", "block2.hashMerkleRoot", "node.get_deterministic_priv_key", "copy.deepcopy", "self.log", "block2_dup.hashMerkleRoot", "tx3.vin", "peer.send_blocks_and_test", "node.getbestblockhash", "block2.vtx", "block2_orig.vtx", "block2.rehash", "block2.calc_merkle_root", "node.setmocktime", "node.add_p2p_connection", "block2_dup.calc_merkle_root", "block2_dup.vtx", "self.setup_clean_chain", "block.solve", "block2_dup.solve", "time.time", "block2.sha256", "block1.vtx", "block4.solve", "block.sha256", "self.generatetoaddress", "node.getblock", "self.nodes", "block3.solve", "block2_orig.hash", "self.extra_args"]}, "p2p_invalid_locator.py": {"libraries": ["test_framework.messages.msg_getblocks", "test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.MAX_LOCATOR_SZ", "test_framework.messages.msg_getheaders", "test_framework.p2p.P2PInterface"], "function_names": ["run_test", "set_test_params"], "function_calls": ["range", "InvalidLocatorTest", "int", "msg_getblocks", "msg_getheaders", "P2PInterface", "type"], "class_names": ["InvalidLocatorTest"], "class_method_calls": ["self.generatetoaddress", "node.getblockcount", "msg.locator", "within_max_peer.send_message", "exceed_max_peer.wait_for_disconnect", "node.disconnect_p2ps", "within_max_peer.wait_for_block", "node.getbestblockhash", "self.num_nodes", "node.add_p2p_connection", "within_max_peer.wait_for_header", "self.nodes", "node.get_deterministic_priv_key", "self.log", "exceed_max_peer.send_message", "node.getblockhash"]}, "p2p_invalid_messages.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.MAX_HEADERS_RESULTS", "time", "struct", "test_framework.messages.ser_string", "test_framework.messages.CBlockHeader", "test_framework.p2p.P2PDataStore", "test_framework.p2p.P2PInterface", "test_framework.messages.from_hex", "test_framework.messages.msg_inv", "test_framework.messages.MAX_PROTOCOL_MESSAGE_LENGTH", "test_framework.util.assert_equal", "test_framework.messages.msg_ping", "test_framework.messages.MSG_TX", "test_framework.messages.msg_headers", "test_framework.messages.MAX_INV_SIZE", "test_framework.messages.msg_version", "test_framework.messages.CInv", "test_framework.messages.msg_getdata"], "function_names": ["test_addrv2_unrecognized_network", "test_checksum", "test_magic_bytes", "test_addrv2_too_long_address", "__init__", "test_addrv2", "test_addrv2_no_addresses", "test_invalid_pow_headers_msg", "test_resource_exhaustion", "test_msgtype", "serialize", "test_oversized_msg", "set_test_params", "test_oversized_inv_msg", "test_duplicate_version_msg", "test_size", "run_test", "wait_for_sendaddrv2", "test_oversized_headers_msg", "test_addrv2_empty", "test_buffer", "__repr__", "test_oversized_getdata_msg"], "function_calls": ["range", "from_hex", "len", "InvalidMessagesTest", "CInv", "ser_string", "msg_getdata", "SenderOfAddrV2", "msg_unrecognized", "msg_version", "msg_inv", "msg_headers", "CBlockHeader", "assert_equal", "isinstance", "P2PDataStore", "int", "P2PInterface", "msg_ping"], "class_names": ["msg_unrecognized", "InvalidMessagesTest", "SenderOfAddrV2"], "class_method_calls": ["self.test_oversized_msg", "self.test_addrv2", "bytes.fromhex", "self.num_nodes", "peer.wait_for_disconnect", "self.test_addrv2_too_long_address", "blockheader.nBits", "self.msgtype", "blockheader_tip.nBits", "self.log", "self.str_data", "conn.wait_for_sendaddrv2", "self.test_oversized_getdata_msg", "str_data.encode", "conn.wait_for_disconnect", "peer.send_and_ping", "conn.is_connected", "conn.sync_with_ping", "blockheader.hashPrevBlock", "self.test_msgtype", "self.test_oversized_inv_msg", "node.add_p2p_connection", "blockheader.hash", "self.setup_clean_chain", "blockheader.nNonce", "conn2.sync_with_ping", "self.test_magic_bytes", "blockheader.rehash", "node.disconnect_p2ps", "self.test_duplicate_version_msg", "time.time", "self.last_message", "self.test_addrv2_no_addresses", "self.test_addrv2_empty", "msg.msgtype", "msg.serialize", "self.test_oversized_headers_msg", "conn.send_raw_message", "self.test_buffer", "self.test_resource_exhaustion", "conn.build_message", "conn.send_message", "node.assert_debug_log", "struct.pack", "self.test_checksum", "peer.send_message", "self.wait_until", "blockheader.nTime", "conn2.is_connected", "self.nodes", "self.test_addrv2_unrecognized_network", "conn.send_and_ping", "msg_at_size.serialize", "self.test_invalid_pow_headers_msg", "self.extra_args", "self.test_size"]}, "p2p_invalid_tx.py": {"libraries": ["test_framework.blocktools.create_coinbase", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.messages.COutPoint", "test_framework.util.assert_equal", "test_framework.p2p.P2PDataStore", "test_framework.messages.CTxOut", "test_framework.messages.COIN", "test_framework.messages.CTxIn", "test_framework.messages.CTransaction", "data.invalid_txs"], "function_names": ["reconnect_p2p", "run_test", "bootstrap_p2p", "set_test_params"], "function_calls": ["range", "len", "create_coinbase", "set", "InvalidTxRequestTest", "P2PDataStore", "int", "BadTxTemplate", "COutPoint", "assert_equal", "CTransaction", "CTxOut", "create_block", "CTxIn"], "class_names": ["InvalidTxRequestTest"], "class_method_calls": ["tx_orphan_1.sha256", "self.num_nodes", "tx_orphan_1.calc_sha256", "template.reject_reason", "tx_withhold.sha256", "block_B.solve", "self.log", "tx_withhold_until_block_A.sha256", "rejected_parent.hash", "tx_withhold_until_block_B.vin", "block_A.solve", "tx_orphan_include_by_block_B.calc_sha256", "node.getblockcount", "rejected_parent.vin", "node.getbestblockhash", "tx_orphan_include_by_block_A.vin", "tx_orphan_include_by_block_B.vout", "node.getpeerinfo", "tx_orphan_2_invalid.sha256", "self.reconnect_p2p", "tx_orphan_2_invalid.vout", "tx_orphan_conflict_by_block_B.vin", "template.get_tx", "tx_orphan_2_no_fee.vin", "tx_orphan_1.vin", "tx_orphan_2_valid.vout", "block_B.calc_merkle_root", "self.setup_clean_chain", "tx_orphan_conflict_by_block_B.vout", "tx_orphan_2_valid.calc_sha256", "node.getrawmempool", "tx_orphan_2_invalid.vin", "block_B.vtx", "block.solve", "node.p2ps", "tx_withhold_until_block_A.vout", "tx_orphan_include_by_block_B.vin", "block1.vtx", "tx_withhold.vin", "BadTxTemplate.__name__", "tx_withhold.calc_sha256", "tx_orphan_include_by_block_A.vout", "tx_orphan_include_by_block_A.calc_sha256", "self.bootstrap_p2p", "block_A.calc_merkle_root", "tx_withhold_until_block_B.vout", "node.getmempoolinfo", "block_A.hashMerkleRoot", "tx_withhold.vout", "tx_withhold_until_block_A.vin", "self.generatetoaddress", "invalid_txs.iter_all_templates", "block_B.hashMerkleRoot", "template.expect_disconnect", "node.assert_debug_log", "tx_orphan_2_invalid.calc_sha256", "tx_withhold_until_block_B.calc_sha256", "self.wait_until", "tx_withhold_until_block_B.sha256", "self.nodes", "tx_orphan_1.vout", "rejected_parent.rehash", "tx_withhold_until_block_A.calc_sha256", "tx_orphan_2_no_fee.vout", "t.hash", "block_A.vtx", "tx_orphan_conflict_by_block_B.calc_sha256", "self.extra_args", "tx_orphan_2_valid.vin", "rejected_parent.vout"]}, "p2p_leak.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_greater_than_or_equal", "test_framework.messages.msg_getaddr", "test_framework.util.assert_equal", "test_framework.messages.msg_version", "test_framework.p2p.P2P_SUBVERSION", "test_framework.p2p.P2P_SERVICES", "test_framework.p2p.P2PInterface", "test_framework.messages.msg_ping", "time", "test_framework.p2p.P2P_VERSION_RELAY"], "function_names": ["on_block", "on_sendaddrv2", "create_old_version", "on_feefilter", "on_ping", "__init__", "on_version", "on_pong", "on_mempool", "on_headers", "on_cmpctblock", "on_getblocks", "on_getblocktxn", "on_open", "on_addr", "on_blocktxn", "on_getheaders", "on_wtxidrelay", "set_test_params", "on_sendcmpct", "on_getdata", "run_test", "on_verack", "on_inv", "on_tx", "on_getaddr", "bad_message", "on_sendheaders"], "function_calls": ["msg_version", "print", "P2PLeakTest", "P2PVersionStore", "assert_equal", "msg_getaddr", "LazyPeer", "P2PInterface", "msg_ping", "assert_greater_than_or_equal", "super", "NoVerackIdlePeer"], "class_names": ["LazyPeer", "P2PLeakTest", "P2PVersionStore", "NoVerackIdlePeer"], "class_method_calls": ["no_verack_idle_peer.wait_until", "self.ever_connected", "ver.nStartingHeight", "self.num_nodes", "pre_wtxidrelay_peer.version_received", "old_version_msg.nServices", "self.version_received", "no_version_idle_peer.got_wtxidrelay", "no_version_idle_peer.got_sendaddrv2", "pre_wtxidrelay_peer.got_wtxidrelay", "self.log", "p2p_old_peer.wait_for_disconnect", "self.bad_message", "pre_wtxidrelay_peer.got_sendaddrv2", "no_version_idle_peer.unexpected_msg", "ver.relay", "pre_wtxidrelay_peer.wait_for_verack", "ver.addrFrom", "no_verack_idle_peer.is_connected", "self.generate", "self.got_sendaddrv2", "no_version_idle_peer.is_connected", "pre_wtxidrelay_peer.is_connected", "p2p_old_peer.send_message", "self.unexpected_msg", "self.send_message", "pre_wtxidrelay_peer.unexpected_msg", "old_version_msg.nVersion", "no_verack_idle_peer.wait_for_verack", "pre_wtxidrelay_peer.send_message", "old_version_msg.strSubVer", "time.time", "pre_wtxidrelay_peer.wait_until", "old_version_msg.relay", "no_verack_idle_peer.got_wtxidrelay", "self.create_old_version", "no_verack_idle_peer.version_received", "time.sleep", "no_version_idle_peer.wait_until", "no_verack_idle_peer.unexpected_msg", "no_version_idle_peer.ever_connected", "ver.nTime", "p2p_version_store.version_received", "self.nodes", "no_verack_idle_peer.got_sendaddrv2", "self.got_wtxidrelay", "message.msgtype", "self.extra_args"]}, "p2p_leak_tx.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.p2p.p2p_lock", "test_framework.p2p.P2PDataStore", "test_framework.messages.CInv", "test_framework.messages.MSG_TX", "test_framework.messages.msg_getdata", "test_framework.wallet.MiniWallet"], "function_names": ["run_test", "set_test_params", "on_inv"], "function_calls": ["range", "P2PLeakTxTest", "int", "CInv", "MiniWallet", "assert_equal", "msg_getdata", "P2PNode"], "class_names": ["P2PNode", "P2PLeakTxTest"], "class_method_calls": ["want_tx.inv", "miniwallet.send_self_transfer", "inv.hash", "self.num_nodes", "inbound_peer.send_and_ping", "self.nodes", "self.log", "inbound_peer.last_message"]}, "p2p_message_capture.py": {"libraries": ["test_framework.p2p.MESSAGEMAP", "test_framework.test_framework.BitcoinTestFramework", "io.BytesIO", "test_framework.util.assert_equal", "os", "glob", "test_framework.p2p.P2PDataStore"], "function_names": ["run_test", "set_test_params", "mini_parser"], "function_calls": ["len", "P2PDataStore", "mini_parser", "assert_equal", "open", "BytesIO", "MessageCaptureTest"], "class_names": ["MessageCaptureTest"], "class_method_calls": ["glob.glob", "self.num_nodes", "int.from_bytes", "f_in.read", "os.path", "os.fstat", "self.nodes", "f_in.fileno", "self.extra_args", "self.setup_clean_chain", "tmp_header.read"]}, "p2p_mutated_blocks.py": {"libraries": ["test_framework.wallet.MiniWallet", "test_framework.messages.msg_block", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.messages.msg_blocktxn", "test_framework.util.assert_equal", "test_framework.messages.BlockTransactions", "test_framework.blocktools.NORMAL_GBT_REQUEST_PARAMS", "test_framework.messages.msg_cmpctblock", "test_framework.p2p.P2PInterface", "test_framework.messages.HeaderAndShortIDs", "test_framework.blocktools.add_witness_commitment", "copy", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["self_transfer_requested", "run_test", "set_test_params"], "function_calls": ["range", "len", "msg_blocktxn", "BlockTransactions", "MiniWallet", "assert_equal", "P2PInterface", "msg_cmpctblock", "MutatedBlocksTest", "msg_block", "create_block", "HeaderAndShortIDs", "add_witness_commitment"], "class_names": ["MutatedBlocksTest"], "class_method_calls": ["self.num_nodes", "block_txn.block_transactions", "block.hash", "honest_relayer.last_message", "copy.deepcopy", "block_missing_prev.solve", "self.wallet", "self.generate", "honest_relayer.send_message", "honest_relayer.send_and_ping", "cmpctblock.to_p2p", "self.setup_clean_chain", "get_block_txn.block_txn_request", "block.solve", "honest_relayer.wait_until", "attacker.send_message", "block_missing_prev.hashPrevBlock", "block.sha256", "cmpctblock.initialize_from_block", "self.nodes", "mutated_block.vtx", "self.extra_args", "attacker.wait_for_disconnect"]}, "p2p_nobloomfilter_messages.py": {"libraries": ["test_framework.messages.msg_filteradd", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.messages.msg_filterclear", "test_framework.p2p.P2PInterface", "test_framework.messages.msg_filterload", "test_framework.messages.msg_mempool"], "function_names": ["run_test", "test_message_causes_disconnect", "set_test_params"], "function_calls": ["msg_filteradd", "msg_mempool", "msg_filterload", "assert_equal", "msg_filterclear", "P2PInterface", "P2PNoBloomFilterMessages"], "class_names": ["P2PNoBloomFilterMessages"], "class_method_calls": ["self.test_message_causes_disconnect", "self.num_nodes", "peer.send_message", "peer.wait_for_disconnect", "self.nodes", "self.log", "self.extra_args", "self.setup_clean_chain"]}, "p2p_node_network_limited.py": {"libraries": ["test_framework.messages.NODE_WITNESS", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.messages.NODE_NETWORK_LIMITED", "test_framework.messages.msg_verack", "test_framework.p2p.P2PInterface", "test_framework.messages.CInv", "test_framework.messages.msg_getdata", "test_framework.messages.MSG_BLOCK"], "function_names": ["wait_for_addr", "set_test_params", "on_inv", "disconnect_all", "on_addr", "setup_network", "send_getdata_for_block", "run_test"], "function_calls": ["msg_verack", "NodeNetworkLimitedTest", "int", "CInv", "P2PIgnoreInv", "assert_equal", "msg_getdata"], "class_names": ["P2PIgnoreInv", "NodeNetworkLimitedTest"], "class_method_calls": ["self.num_nodes", "self.sync_blocks", "self.log", "self.connect_nodes", "self.generate", "node1.firstAddrnServices", "getdata_request.inv", "self.send_message", "node1.send_message", "self.add_nodes", "node1.wait_for_addr", "self.setup_clean_chain", "node.nServices", "self.disconnect_all", "node.wait_for_block", "self.last_message", "message.addrs", "self.disconnect_nodes", "self.no_op", "node.send_getdata_for_block", "self.firstAddrnServices", "self.wait_until", "node.wait_for_disconnect", "self.nodes", "self.extra_args", "self.start_nodes"]}, "p2p_permissions.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.p2p_port", "test_framework.messages.SEQUENCE_FINAL", "test_framework.p2p.P2PDataStore", "test_framework.test_node.ErrorMatch", "test_framework.wallet.MiniWallet"], "function_names": ["checkpermission", "run_test", "set_test_params", "check_tx_relay"], "function_calls": ["len", "P2PDataStore", "MiniWallet", "assert_equal", "P2PPermissionsTests", "AssertionError", "p2p_port"], "class_names": ["P2PPermissionsTests"], "class_method_calls": ["self.checkpermission", "self.wallet", "self.num_nodes", "p2p_rebroadcast_wallet.send_txs_and_test", "self.wait_until", "tx.vout", "tx.rehash", "self.nodes", "self.restart_node", "self.log", "self.connect_nodes", "ErrorMatch.PARTIAL_REGEX", "self.check_tx_relay", "self.stop_node"]}, "p2p_ping.py": {"libraries": ["test_framework.messages.msg_pong", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.p2p.P2PInterface", "time"], "function_names": ["set_test_params", "mock_forward", "run_test", "check_peer_info", "serialize", "on_ping"], "function_calls": ["msg_pong_corrupt", "msg_pong", "int", "assert_equal", "PingPongTest", "NodeNoPong"], "class_names": ["msg_pong_corrupt", "PingPongTest", "NodeNoPong"], "class_method_calls": ["self.mock_forward", "no_pong_node.wait_for_disconnect", "no_pong_node.send_and_ping", "self.num_nodes", "no_pong_node.last_message", "time.time", "self.mock_time", "no_pong_node.wait_until", "stats.pop", "self.nodes", "self.log", "no_pong_node.sync_with_ping", "self.check_peer_info", "self.extra_args", "self.setup_clean_chain"]}, "p2p_segwit.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.script.OP_ENDIF", "test_framework.key.ECKey", "test_framework.script.CScriptNum", "test_framework.messages.MAX_BIP125_RBF_SEQUENCE", "test_framework.messages.msg_tx", "test_framework.script.CScriptOp", "test_framework.script.SIGHASH_ANYONECANPAY", "test_framework.script_util.key_to_p2wpkh_script", "test_framework.blocktools.WITNESS_COMMITMENT_HEADER", "test_framework.blocktools.add_witness_commitment", "test_framework.messages.CTxIn", "test_framework.messages.ser_vector", "test_framework.script.OP_1", "test_framework.messages.NODE_NETWORK", "test_framework.messages.MSG_BLOCK", "random", "time", "test_framework.script.OP_RETURN", "struct", "test_framework.script.LegacySignatureHash", "decimal.Decimal", "test_framework.blocktools.create_block", "test_framework.messages.CTxInWitness", "test_framework.script.MAX_SCRIPT_ELEMENT_SIZE", "test_framework.messages.CBlockHeader", "test_framework.script.SIGHASH_SINGLE", "test_framework.script_util.script_to_p2wsh_script", "test_framework.messages.msg_no_witness_block", "test_framework.p2p.p2p_lock", "test_framework.messages.CTxOut", "test_framework.messages.MSG_WTX", "test_framework.p2p.P2PInterface", "test_framework.script_util.key_to_p2pk_script", "test_framework.messages.msg_inv", "test_framework.script.CScript", "test_framework.script.OP_2DROP", "test_framework.script.OP_2", "test_framework.messages.MSG_WITNESS_FLAG", "test_framework.messages.MAX_BLOCK_WEIGHT", "test_framework.script.hash160", "test_framework.script.OP_ELSE", "test_framework.util.assert_equal", "test_framework.util.softfork_active", "test_framework.script.OP_TRUE", "test_framework.messages.sha256", "test_framework.messages.CTxWitness", "test_framework.messages.MSG_TX", "test_framework.messages.msg_headers", "test_framework.script.OP_0", "test_framework.script.SIGHASH_NONE", "test_framework.wallet.MiniWallet", "test_framework.script.OP_CHECKSIG", "test_framework.blocktools.create_coinbase", "test_framework.messages.NODE_WITNESS", "test_framework.messages.msg_block", "test_framework.messages.COutPoint", "test_framework.script.OP_IF", "test_framework.script_util.script_to_p2sh_script", "test_framework.util.assert_raises_rpc_error", "test_framework.messages.msg_no_witness_tx", "test_framework.p2p.P2P_SERVICES", "test_framework.script.SegwitV0SignatureHash", "test_framework.script.SIGHASH_ALL", "test_framework.script.OP_DROP", "test_framework.script_util.keyhash_to_p2pkh_script", "test_framework.messages.CInv", "test_framework.messages.CTransaction", "test_framework.script.OP_16", "test_framework.messages.msg_getdata", "test_framework.messages.ser_uint256", "test_framework.script.OP_CHECKMULTISIG", "test_framework.messages.MSG_WITNESS_TX"], "function_names": ["test_p2sh_witness", "test_max_witness_script_length", "test_max_witness_push_length", "subtest", "received_wtxidrelay", "func_wrapper", "test_tx_relay_after_segwit_activation", "test_extra_witness_data", "test_witness_commitments", "test_non_witness_transaction", "__init__", "test_witness_sigops", "test_witness_input_length", "test_witness_block_size", "test_block_malleability", "test_segwit_versions", "test_standardness_v0", "advance_to_segwit_active", "test_signature_version_1", "sign_p2pk_witness_input", "test_unnecessary_witness_before_segwit_activation", "serialize", "on_wtxidrelay", "set_test_params", "test_superfluous_witness", "serialize_with_bogus_witness", "on_getdata", "test_non_standard_witness", "test_uncompressed_pubkey", "run_test", "request_block", "update_witness_block_with_transactions", "test_wtxid_relay", "serialize_with_witness", "test_non_standard_witness_blinding", "test_premature_coinbase_witness_spend", "on_inv", "test_submit_block", "test_block_relay", "announce_block_and_wait_for_getdata", "test_witness_tx_relay_before_segwit_activation", "test_witness_block", "announce_tx_and_wait_for_getdata", "test_v0_outputs_arent_spendable", "test_transaction_acceptance", "build_next_block"], "function_calls": ["range", "set", "chr", "CScriptOp", "COutPoint", "key_to_p2pk_script", "CTransaction", "CTxInWitness", "msg_no_witness_tx", "msg_tx", "msg_block", "ECKey", "BrokenCTransaction", "len", "script_to_p2wsh_script", "msg_no_witness_block", "CScript", "LegacySignatureHash", "CScriptNum", "SegwitV0SignatureHash", "CInv", "msg_getdata", "msg_bogus_tx", "create_block", "sign_p2pk_witness_input", "ser_uint256", "sha256", "func", "hash160", "sum", "msg_inv", "create_coinbase", "key_to_p2wpkh_script", "keyhash_to_p2pkh_script", "msg_headers", "CBlockHeader", "serialize_with_bogus_witness", "MiniWallet", "assert_equal", "UTXO", "CTxOut", "script_to_p2sh_script", "super", "softfork_active", "add_witness_commitment", "CTxWitness", "SegWitTest", "list", "Decimal", "int", "min", "test_witness_block", "TestP2PConn", "ser_vector", "assert_raises_rpc_error", "CTxIn", "test_transaction_acceptance"], "class_names": ["SegWitTest", "UTXO", "TestP2PConn", "msg_bogus_tx", "BrokenCTransaction"], "class_method_calls": ["parent_tx.vout", "utxo.sha256", "self.nValue", "tx3.vin", "self.std_wtx_node", "p2sh_tx.wit", "self.update_witness_block_with_transactions", "self.build_next_block", "self.test_unnecessary_witness_before_segwit_activation", "tx3.getwtxid", "self.nLockTime", "self.send_message", "self.n", "p2sh_p2wsh_tx.rehash", "node.getrawmempool", "self.setup_clean_chain", "tx3.serialize_with_witness", "self.test_max_witness_push_length", "self.test_tx_relay_after_segwit_activation", "self.test_extra_witness_data", "block.get_weight", "tx3.get_vsize", "self.getdataset", "spend_tx.vin", "self.test_v0_outputs_arent_spendable", "random.randint", "p2wsh_txs.append", "block.sha256", "time.sleep", "tx.nVersion", "tx2.vout", "prev_utxo.n", "tx4.vout", "self.test_wtxid_relay", "p2wsh_tx.wit", "block_2.solve", "temp_utxo.append", "self.test_block_relay", "self.test_witness_sigops", "tx2.wit", "block_2.vtx", "self.extra_args", "child_tx.wit", "witness_script.hex", "self.lastgetdata", "func.__name__", "self.wait_for_getheaders", "block2.solve", "self.test_signature_version_1", "block_4.vtx", "random.shuffle", "self.test_uncompressed_pubkey", "tx3.calc_sha256", "x.invalidateblock", "self.test_non_standard_witness", "self.wit", "tx2.calc_sha256", "prev_utxo.sha256", "block_3.hashMerkleRoot", "node.getbestblockhash", "tx3.vout", "child_tx.vin", "self.vout", "self.vin", "spend_tx.wit", "self.utxo", "self.test_node", "tx.hash", "p2wsh_tx.rehash", "parent_tx.sha256", "self.wtxidrelay", "self.test_witness_tx_relay_before_segwit_activation", "temp_utxos.append", "block4.solve", "tx4.sha256", "spend_tx.hash", "self.sha256", "self.tx_node", "tx2.vin", "scripts.append", "self.wait_for_getdata", "self.nodes", "self.test_non_witness_transaction", "self.nVersion", "self.test_witness_block_size", "key.sign_ecdsa", "tx.sha256", "block4.sha256", "self.segwit_active", "bytes.fromhex", "p2sh_tx.rehash", "temp_utxos.pop", "inv.hash", "p2sh_tx.vout", "self.num_nodes", "p2sh_tx.vin", "non_wit_block.serialize", "tx3.wit", "tx4.wit", "self.old_node", "block_4.hashMerkleRoot", "self.advance_to_segwit_active", "tx.rehash", "block.hash", "i.nValue", "utxo.n", "block.vtx", "prev_utxo.nValue", "self.test_non_standard_witness_blinding", "p2sh_p2wsh_tx.vout", "self.wait_for_block", "spend_tx.vout", "message.inv", "parent_tx.vin", "self.test_standardness_v0", "tx.vin", "p2sh_p2wsh_tx.wit", "tx_to.rehash", "tx5.vin", "self.test_max_witness_script_length", "block.serialize", "tx3.sha256", "p2sh_txs.append", "tx2.sha256", "self.tx", "utxo.nValue", "self.test_witness_input_length", "block_4.solve", "spend_tx.rehash", "spend_tx.sha256", "self.test_block_malleability", "tx.wit", "struct.pack", "block_3.solve", "tx5.vout", "tx.calc_sha256", "p2p.send_and_ping", "self.supports_cli", "block_3.calc_merkle_root", "msg.headers", "tx5.rehash", "p2wsh_scripts.append", "tx3.rehash", "tx2.hash", "child_tx.rehash", "tx_to.wit", "parent_tx.rehash", "self.sync_blocks", "p2sh_p2wsh_tx.vin", "block_3.vtx", "self.log", "self.test_segwit_versions", "tx4.vin", "block_4.hash", "self.test_p2sh_witness", "i.n", "key.get_pubkey", "self.wallet", "self.generate", "self.wtx_node", "tx3.get_weight", "tx.vout", "self.test_witness_commitments", "self.test_superfluous_witness", "self.last_wtxidrelay", "self.sync_mempools", "wit_block.serialize", "self.std_node", "block_4.calc_merkle_root", "p2wsh_tx.vin", "block.solve", "key.generate", "tx5.sha256", "block_2.serialize", "tx2.rehash", "self.last_message", "p2wsh_tx.vout", "child_tx.vout", "tx3.hash", "block4.vtx", "node.assert_debug_log", "p2sh_tx.sha256", "block1.solve", "tx.nLockTime", "block.rehash", "self.test_premature_coinbase_witness_spend", "block_2.hash", "i.sha256", "self.test_submit_block", "temp_utxo.pop"]}, "p2p_sendheaders.py": {"libraries": ["test_framework.p2p.msg_getheaders", "test_framework.blocktools.create_coinbase", "test_framework.p2p.msg_getdata", "test_framework.p2p.msg_sendheaders", "test_framework.blocktools.create_block", "test_framework.p2p.msg_inv", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.p2p.p2p_lock", "test_framework.p2p.NODE_WITNESS", "test_framework.p2p.P2PInterface", "test_framework.messages.CInv", "test_framework.p2p.msg_headers", "test_framework.p2p.msg_getblocks", "test_framework.p2p.MSG_BLOCK", "test_framework.p2p.msg_block", "test_framework.p2p.CBlockHeader"], "function_names": ["__init__", "send_get_data", "set_test_params", "send_block_inv", "on_inv", "mine_blocks", "test_null_locators", "check_last_inv_announcement", "clear_block_announcements", "on_headers", "send_get_headers", "mine_reorg", "test_nonnull_locators", "run_test", "wait_for_block_announcement", "send_getblocks", "check_last_headers_announcement", "send_header_for_blocks"], "function_calls": ["msg_inv", "len", "range", "create_coinbase", "SendHeadersTest", "msg_sendheaders", "int", "msg_getblocks", "msg_headers", "CInv", "CBlockHeader", "msg_getheaders", "assert_equal", "msg_getdata", "create_block", "msg_block", "super", "BaseNode"], "class_names": ["BaseNode", "SendHeadersTest"], "class_method_calls": ["inv_node.send_header_for_blocks", "test_node.clear_block_announcements", "test_node.wait_for_disconnect", "new_block.sha256", "self.num_nodes", "x.sha256", "test_node.send_block_inv", "test_node.send_and_ping", "test_node.check_last_inv_announcement", "block.hash", "x.calc_sha256", "inv_node.wait_until", "self.log", "headers_message.headers", "msg.hashstop", "self.mine_blocks", "test_node.send_get_headers", "test_node.send_header_for_blocks", "blocks.append", "self.test_null_locators", "message.inv", "inv_node.send_block_inv", "test_node.send_message", "self.send_message", "x.wait_for_block_announcement", "msg.inv", "self.test_nonnull_locators", "inv_node.send_message", "test_node.send_get_data", "self.setup_clean_chain", "msg.locator", "inv_node.check_last_inv_announcement", "message.headers", "block.solve", "test_node.send_getblocks", "test_node.block_announced", "test_node.check_last_headers_announcement", "test_node.wait_for_getdata", "self.last_message", "self.mine_reorg", "self.last_blockhash_announced", "inv_node.sync_with_ping", "x.clear_block_announcements", "new_block.solve", "test_node.wait_for_block", "inv_node.clear_block_announcements", "inv_node.last_message", "x.hash", "self.generatetoaddress", "test_node.sync_with_ping", "inv_node.block_announced", "self.wait_until", "self.recent_headers_announced", "self.nodes", "self.block_announced", "test_node.wait_for_getheaders", "getblocks_message.locator", "test_node.last_message"]}, "p2p_sendtxrcncl.py": {"libraries": ["test_framework.p2p.P2P_VERSION", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.messages.msg_sendtxrcncl", "test_framework.messages.msg_version", "test_framework.messages.msg_verack", "test_framework.p2p.P2P_SERVICES", "test_framework.p2p.P2P_SUBVERSION", "test_framework.messages.msg_wtxidrelay", "test_framework.p2p.P2PInterface", "test_framework.messages.NODE_BLOOM"], "function_names": ["__init__", "on_version", "set_test_params", "on_message", "create_sendtxrcncl_msg", "on_sendtxrcncl", "run_test"], "function_calls": ["msg_version", "SendTxRcnclTest", "msg_verack", "msg_wtxidrelay", "msg_sendtxrcncl", "create_sendtxrcncl_msg", "SendTxrcnclReceiver", "enumerate", "assert_equal", "P2PInterface", "super", "PeerNoVerack", "P2PFeelerReceiver", "PeerTrackMsgOrder"], "class_names": ["SendTxRcnclTest", "SendTxrcnclReceiver", "PeerNoVerack", "P2PFeelerReceiver", "PeerTrackMsgOrder"], "class_method_calls": ["self.num_nodes", "peer.messages", "peer.wait_for_disconnect", "no_txrelay_version_msg.strSubVer", "old_version_msg.nServices", "pre_wtxid_version_msg.relay", "self.log", "sendtxrcncl_msg.salt", "peer.nServices", "self.send_message", "no_txrelay_version_msg.nVersion", "old_version_msg.nVersion", "peer.sendtxrcncl_msg_received", "no_txrelay_version_msg.nServices", "sendtxrcncl_higher_version.version", "old_version_msg.strSubVer", "self.wtxidrelay", "sendtxrcncl_msg.version", "old_version_msg.relay", "pre_wtxid_version_msg.strSubVer", "sendtxrcncl_low_version.version", "self.sendtxrcncl_msg_received", "msg.msgtype", "message.nVersion", "peer.send_message", "self.messages", "self.nodes", "peer.wait_for_verack", "self.restart_node", "pre_wtxid_version_msg.nVersion", "self.extra_args", "pre_wtxid_version_msg.nServices", "no_txrelay_version_msg.relay"]}, "p2p_timeouts.py": {"libraries": ["test_framework.p2p.P2PInterface", "test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.msg_ping", "time"], "function_names": ["on_version", "mock_forward", "run_test", "set_test_params"], "function_calls": ["TimeoutsTest", "TestP2PConn", "int", "msg_ping"], "class_names": ["TestP2PConn", "TimeoutsTest"], "class_method_calls": ["no_version_node.wait_for_disconnect", "self.mock_forward", "no_verack_node.send_message", "no_verack_node.wait_for_disconnect", "no_verack_node.wait_for_verack", "no_send_node.wait_for_disconnect", "no_send_node.is_connected", "self.num_nodes", "time.time", "self.mock_time", "no_verack_node.is_connected", "self.nodes", "no_verack_node.last_message", "self.stop_nodes", "no_version_node.is_connected", "no_version_node.send_message", "self.extra_args", "self.setup_clean_chain"]}, "p2p_tx_download.py": {"libraries": ["test_framework.messages.MSG_TYPE_MASK", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.messages.msg_notfound", "test_framework.p2p.p2p_lock", "test_framework.messages.MSG_WTX", "test_framework.p2p.P2PInterface", "test_framework.messages.CInv", "test_framework.messages.msg_inv", "test_framework.messages.MSG_TX", "test_framework.wallet.MiniWallet", "time"], "function_names": ["__init__", "test_notfound_fallback", "test_tx_requests", "test_large_inv_batch", "set_test_params", "getdata_found", "test_in_flight_max", "test_disconnect_fallback", "test_inv_block", "test_spurious_notfound", "on_getdata", "test_txid_inv_delay", "test_preferred_inv", "test_expiry_fallback", "run_test"], "function_calls": ["msg_inv", "range", "len", "getdata_found", "sum", "TxDownloadTest", "int", "any", "CInv", "MiniWallet", "assert_equal", "TestP2PConn", "msg_notfound", "super", "test"], "class_names": ["TestP2PConn", "TxDownloadTest"], "class_method_calls": ["self.num_nodes", "peer_fallback.wait_until", "self.test_preferred_inv", "self.test_large_inv_batch", "self.test_disconnect_fallback", "self.log", "self.connect_nodes", "peer_fallback.tx_getdata_count", "self.wallet", "message.inv", "p.send_and_ping", "self.test_spurious_notfound", "node.add_p2p_connection", "p.sync_with_ping", "peer.wait_until", "self.sync_mempools", "p.wait_until", "self.test_tx_requests", "peer2.wait_until", "p.tx_getdata_count", "peer1.tx_getdata_count", "time.time", "self.test_in_flight_max", "self.test_txid_inv_delay", "self.test_notfound_fallback", "peer.sync_with_ping", "i.type", "self.tx_getdata_count", "self.test_expiry_fallback", "peer.tx_getdata_count", "self.test_inv_block", "peer_notfound.send_and_ping", "peer.send_message", "outstanding_peer_index.remove", "self.wait_until", "self.nodes", "p.send_message", "self.peers", "self.restart_node", "peer_disconnect.wait_for_disconnect", "self.stop_nodes", "p.last_message", "peer_disconnect.peer_disconnect", "self.start_nodes"]}, "p2p_tx_privacy.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.msg_tx", "test_framework.messages.msg_verack", "test_framework.messages.msg_wtxidrelay", "test_framework.messages.MSG_WTX", "test_framework.p2p.P2PInterface", "test_framework.messages.CInv", "test_framework.wallet.MiniWallet"], "function_names": ["__init__", "on_version", "set_test_params", "on_inv", "wait_for_inv_match", "run_test"], "function_calls": ["P2PTxSpy", "len", "msg_verack", "msg_wtxidrelay", "TxPrivacyTest", "CInv", "MiniWallet", "P2PInterface", "super", "msg_tx"], "class_names": ["P2PTxSpy", "TxPrivacyTest"], "class_method_calls": ["self.wallet", "message.inv", "self.num_nodes", "tx_originator.send_and_ping", "self.wait_until", "self.send_message", "self.nodes", "self.all_invs", "spy.wait_for_verack", "spy.send_and_ping", "tx2.calc_sha256", "spy.wait_for_inv_match"]}, "p2p_unrequested_blocks.py": {"libraries": ["test_framework.blocktools.create_coinbase", "test_framework.messages.msg_block", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.util.assert_equal", "test_framework.messages.CBlockHeader", "test_framework.util.assert_raises_rpc_error", "test_framework.p2p.p2p_lock", "test_framework.p2p.P2PInterface", "test_framework.messages.CInv", "test_framework.messages.msg_inv", "test_framework.messages.msg_headers", "test_framework.messages.MSG_BLOCK", "test_framework.blocktools.create_tx_with_script", "time"], "function_names": ["run_test", "set_test_params", "check_hash_in_chaintips", "setup_network"], "function_calls": ["range", "msg_inv", "create_coinbase", "assert_raises_rpc_error", "int", "msg_headers", "CBlockHeader", "CInv", "assert_equal", "AcceptBlockTest", "P2PInterface", "create_block", "msg_block", "create_tx_with_script"], "class_names": ["AcceptBlockTest"], "class_method_calls": ["test_node.wait_for_disconnect", "block_291.solve", "block_289f.nTime", "self.num_nodes", "block_290f.nTime", "test_node.send_and_ping", "block_h3.hash", "n.getbestblockhash", "block_289f.sha256", "block_292.sha256", "self.sync_blocks", "block_h2f.sha256", "self.log", "headers_message.headers", "block_290f.solve", "block_290f.vtx", "self.check_hash_in_chaintips", "self.connect_nodes", "all_blocks.append", "block_292.solve", "self.generate", "block_h3.solve", "test_node.last_message", "block_292.hash", "test_node.send_message", "self.extra_args", "block_293.solve", "block_h2f.hash", "self.setup_clean_chain", "tip.nTime", "block_h3.sha256", "blocks_h2.append", "next_block.solve", "time.time", "block_292.nTime", "block_h2f.solve", "block_290f.sha256", "block_291.nTime", "block_h1f.hash", "x.hash", "block_h1f.solve", "test_node.sync_with_ping", "block_291.sha256", "getdata.inv", "self.no_op", "block_289f.solve", "block_291.hash", "tip.sha256", "node.getchaintips", "self.nodes", "block_289f.hash", "block_290f.hash", "block_h2f.nTime", "block_h1f.sha256", "self.setup_nodes", "min_work_node.send_and_ping"]}, "rpc_bind.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.get_rpc_proxy", "test_framework.util.assert_raises_rpc_error", "test_framework.netutil.test_ipv6_local", "test_framework.test_framework.SkipTest", "test_framework.util.rpc_url", "test_framework.netutil.get_bind_addrs", "test_framework.netutil.all_interfaces", "test_framework.netutil.addr_to_hex", "test_framework.util.rpc_port", "sys"], "function_names": ["_run_loopback_tests", "run_bind_test", "add_options", "set_test_params", "run_allowip_test", "setup_network", "run_test", "_run_nonloopback_tests"], "function_calls": ["sum", "set", "all_interfaces", "test_ipv6_local", "get_rpc_proxy", "RPCBindTest", "str", "addr_to_hex", "rpc_url", "assert_equal", "get_bind_addrs", "AssertionError", "rpc_port", "assert_raises_rpc_error", "SkipTest"], "class_names": ["RPCBindTest"], "class_method_calls": ["self.options", "self.num_nodes", "self.log", "self.non_loopback_ip", "self._run_loopback_tests", "self.bind_to_localhost_only", "self.add_nodes", "self.chain", "self.defaultport", "self._run_nonloopback_tests", "sys.platform", "self.setup_clean_chain", "self.run_allowip_test", "node.getnetworkinfo", "self.start_node", "self.run_bind_test", "parser.add_argument", "self.supports_cli", "self.nodes", "self.stop_nodes", "self.start_nodes"]}, "rpc_blockchain.py": {"libraries": ["test_framework.script.hash256", "test_framework.test_framework.BitcoinTestFramework", "http.client", "textwrap", "test_framework.util.get_datadir_path", "decimal.Decimal", "test_framework.blocktools.create_block", "test_framework.messages.CBlockHeader", "test_framework.util.assert_greater_than", "test_framework.util.assert_is_hex_string", "test_framework.p2p.P2PInterface", "subprocess", "test_framework.messages.from_hex", "test_framework.util.assert_greater_than_or_equal", "test_framework.util.assert_equal", "test_framework.blocktools.MAX_FUTURE_BLOCK_TIME", "test_framework.util.assert_raises", "test_framework.util.assert_is_hash_string", "test_framework.blocktools.create_coinbase", "test_framework.blocktools.TIME_GENESIS_BLOCK", "test_framework.messages.msg_block", "os", "test_framework.util.assert_raises_rpc_error", "test_framework.wallet.MiniWallet"], "function_names": ["_test_stopatheight", "_test_waitforblockheight", "_test_gettxoutsetinfo", "_test_getchaintxstats", "_test_getblock", "_test_getdeploymentinfo", "_test_max_future_block_time", "assert_vin_contains_prevout", "_test_prune_disk_space", "_test_getdifficulty", "assert_waitforheight", "set_test_params", "_test_getnetworkhashps", "mine_chain", "check_signalling_deploymentinfo_result", "assert_hexblock_hashes", "assert_fee_not_in_block", "run_test", "_test_getblockchaininfo", "_test_y2106", "solve_and_send_block", "assert_fee_in_block", "move_block_file", "assert_vin_does_not_contain_prevout", "_test_getblockheader"], "function_calls": ["range", "from_hex", "sorted", "set", "assert_greater_than", "abs", "msg_block", "len", "assert_vin_contains_prevout", "round", "BlockchainTest", "assert_waitforheight", "hash256", "create_block", "get_datadir_path", "create_coinbase", "CBlockHeader", "MiniWallet", "assert_equal", "assert_is_hash_string", "assert_hexblock_hashes", "assert_fee_not_in_block", "isinstance", "assert_greater_than_or_equal", "solve_and_send_block", "Decimal", "assert_fee_in_block", "move_block_file", "int", "assert_vin_does_not_contain_prevout", "assert_raises", "P2PInterface", "assert_raises_rpc_error", "assert_is_hex_string"], "class_names": ["BlockchainTest"], "class_method_calls": ["bytes.fromhex", "self.options", "self._test_getdifficulty", "self._test_getblockheader", "self.num_nodes", "http.client", "self._test_getblockchaininfo", "self.log", "node.getblockhash", "os.linesep", "self.wallet", "self.generate", "node.getbestblockhash", "self._test_getchaintxstats", "self._test_gettxoutsetinfo", "peer.send_and_ping", "self._test_getnetworkhashps", "node.add_p2p_connection", "header.hash", "self.chain", "self._test_max_future_block_time", "self._test_y2106", "textwrap.dedent", "self.setup_clean_chain", "self._test_prune_disk_space", "self._test_getblock", "subprocess.TimeoutExpired", "b1.sha256", "self.start_node", "res.keys", "self.mine_chain", "node.getblockheader", "os.rename", "self.stop_node", "self.generatetoaddress", "self.no_op", "b2.hash", "self.check_signalling_deploymentinfo_result", "node.gettxoutsetinfo", "node.getblock", "b.solve", "os.path", "self._test_getdeploymentinfo", "node.reconsiderblock", "self.supports_cli", "self._test_waitforblockheight", "self.nodes", "self.restart_node", "self._test_stopatheight", "b1.nTime", "node.invalidateblock", "header.calc_sha256", "node.waitforblockheight"]}, "rpc_createmultisig.py": {"libraries": ["itertools", "test_framework.authproxy.JSONRPCException", "test_framework.wallet.MiniWallet", "test_framework.test_framework.BitcoinTestFramework", "json", "test_framework.key.ECKey", "test_framework.address.address_to_scriptpubkey", "os", "test_framework.descriptors.descsum_create", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_equal", "test_framework.wallet.getnewdestination", "test_framework.wallet_util.bytes_to_wif", "test_framework.descriptors.drop_origins", "test_framework.key.ECPubKey", "decimal", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["set_test_params", "add_options", "get_keys", "do_multisig", "check_addmultisigaddress_errors", "checkbalances", "run_test"], "function_calls": ["range", "len", "drop_origins", "getnewdestination", "ECPubKey", "dict", "descsum_create", "MiniWallet", "assert_equal", "RpcCreateMultiSigTest", "bytes_to_wif", "assert_raises_rpc_error", "open", "address_to_scriptpubkey", "ECKey"], "class_names": ["RpcCreateMultiSigTest"], "class_method_calls": ["bytes.fromhex", "self.options", "self.check_addmultisigaddress_errors", "node1.getbalance", "pk_obj.get_bytes", "self.num_nodes", "wmulti.unloadwallet", "self.nsigs", "self.output_type", "self.get_keys", "node1.loadwallet", "self.log", "node2.getnewaddress", "self.add_wallet_options", "node2.createrawtransaction", "node0.get_wallet_rpc", "self.pub", "self.wallet", "pk_obj.compressed", "self.generate", "node0.sendrawtransaction", "decimal.Decimal", "node0.getblockchaininfo", "k.is_compressed", "itertools.permutations", "node2.createmultisig", "self.priv", "self.setup_clean_chain", "k.get_bytes", "node1.createwallet", "node2.getbalance", "node0.getbalance", "self.moved", "self.nkeys", "json.load", "node2.signrawtransactionwithkey", "self.is_bdb_compiled", "wmulti0.addmultisigaddress", "node0.getblock", "self.do_multisig", "wmulti.addmultisigaddress", "node0.getrawtransaction", "k.generate", "node1.get_wallet_rpc", "node0.createwallet", "self.import_deterministic_coinbase_privkeys", "self.final", "node1.listwallets", "k.get_pubkey", "e.error", "os.path", "self.supports_cli", "self.nodes", "pk_obj.set", "node0.createmultisig", "self.checkbalances"]}, "rpc_decodescript.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "json", "test_framework.messages.tx_from_hex", "test_framework.util.assert_equal", "os", "test_framework.messages.sha256"], "function_names": ["set_test_params", "decodescript_miniscript", "decodescript_datadriven_tests", "decodescript_script_pub_key", "decodescript_script_sig", "decoderawtransaction_asm_sighashtype", "run_test"], "function_calls": ["tx_from_hex", "DecodeScriptTest", "assert_equal", "open", "sha256"], "class_names": ["DecodeScriptTest"], "class_method_calls": ["bytes.fromhex", "self.decodescript_datadriven_tests", "self.decodescript_script_pub_key", "self.num_nodes", "txSave.serialize", "os.path", "self.nodes", "json.load", "self.log", "txSave.vin", "self.decodescript_script_sig", "self.decodescript_miniscript", "self.setup_clean_chain", "self.decoderawtransaction_asm_sighashtype"]}, "rpc_deprecated.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework"], "function_names": ["run_test", "set_test_params"], "function_calls": ["DeprecatedRpcTest"], "class_names": ["DeprecatedRpcTest"], "class_method_calls": ["self.num_nodes", "self.log", "self.extra_args", "self.setup_clean_chain"]}, "rpc_deriveaddresses.py": {"libraries": ["test_framework.descriptors.descsum_create", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error"], "function_names": ["run_test", "set_test_params"], "function_calls": ["assert_equal", "assert_raises_rpc_error", "DeriveaddressesTest", "descsum_create"], "class_names": ["DeriveaddressesTest"], "class_method_calls": ["self.num_nodes", "self.nodes"]}, "rpc_dumptxoutset.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "hashlib", "pathlib.Path", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["run_test", "set_test_params"], "function_calls": ["str", "assert_equal", "Path", "assert_raises_rpc_error", "open", "DumptxoutsetTest"], "class_names": ["DumptxoutsetTest"], "class_method_calls": ["node.dumptxoutset", "hashlib.sha256", "self.generate", "self.num_nodes", "node.datadir", "f.read", "node.setmocktime", "self.nodes", "self.chain", "node.getblockheader", "expected_path.is_file", "self.setup_clean_chain", "node.getblockhash"]}, "rpc_estimatefee.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework"], "function_names": ["run_test", "set_test_params"], "function_calls": ["assert_raises_rpc_error", "EstimateFeeTest"], "class_names": ["EstimateFeeTest"], "class_method_calls": ["self.num_nodes", "self.nodes"]}, "rpc_generate.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework", "test_framework.wallet.MiniWallet", "test_framework.util.assert_equal"], "function_names": ["set_test_params", "test_generateblock", "test_generatetoaddress", "test_generate", "run_test"], "function_calls": ["range", "len", "MiniWallet", "assert_equal", "RPCGenerateTest", "assert_raises_rpc_error"], "class_names": ["RPCGenerateTest"], "class_method_calls": ["self.generatetoaddress", "self.test_generateblock", "node.getbestblockhash", "miniwallet.send_self_transfer", "node.submitblock", "self.num_nodes", "node.getblock", "self.generateblock", "self.test_generate", "self.nodes", "miniwallet.get_address", "miniwallet.get_utxo", "node.getrawtransaction", "self.log", "self.test_generatetoaddress", "miniwallet.create_self_transfer"]}, "rpc_getblockfilter.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_is_hex_string", "test_framework.util.assert_equal"], "function_names": ["run_test", "set_test_params"], "function_calls": ["range", "assert_equal", "assert_raises_rpc_error", "assert_is_hex_string", "GetBlockFilterTest"], "class_names": ["GetBlockFilterTest"], "class_method_calls": ["self.disconnect_nodes", "self.generate", "self.no_op", "self.num_nodes", "self.nodes", "self.sync_blocks", "self.restart_node", "self.connect_nodes", "self.extra_args", "self.setup_clean_chain"]}, "rpc_getblockfrompeer.py": {"libraries": ["test_framework.authproxy.JSONRPCException", "test_framework.messages.CBlock", "test_framework.messages.NODE_WITNESS", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.p2p.P2P_SERVICES", "test_framework.p2p.P2PInterface", "test_framework.messages.from_hex", "test_framework.messages.msg_headers"], "function_names": ["run_test", "set_test_params", "check_for_block", "setup_network"], "function_calls": ["len", "from_hex", "msg_headers", "CBlock", "assert_equal", "next", "P2PInterface", "GetBlockFromPeerTest", "assert_raises_rpc_error", "filter"], "class_names": ["GetBlockFromPeerTest"], "class_method_calls": ["pruned_node.getblockfrompeer", "self.generate", "self.no_op", "self.num_nodes", "self.setup_nodes", "pruned_node.getpeerinfo", "self.check_for_block", "pruned_node.getblock", "self.wait_until", "self.nodes", "self.sync_blocks", "self.restart_node", "node1_interface.send_and_ping", "self.log", "pruned_node.pruneblockchain", "self.extra_args", "self.connect_nodes"]}, "rpc_getblockstats.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "json", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["set_test_params", "add_options", "load_test_data", "get_stats", "generate_test_data", "run_test"], "function_calls": ["range", "list", "set", "int", "assert_equal", "GetblockstatsTest", "assert_raises_rpc_error", "open"], "class_names": ["GetblockstatsTest"], "class_method_calls": ["self.options", "self.expected_stats", "self.num_nodes", "stats.keys", "self.log", "json.dump", "blocks.append", "result.keys", "self.generate", "self.setup_clean_chain", "json.load", "self.load_test_data", "self.sync_all", "self.max_stat_pos", "parser.add_argument", "self.get_stats", "os.path", "self.supports_cli", "self.nodes", "self.generate_test_data", "self.start_height"]}, "rpc_getchaintips.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["run_test", "set_test_params"], "function_calls": ["assert_equal", "GetChainTipsTest", "len"], "class_names": ["GetChainTipsTest"], "class_method_calls": ["self.generate", "self.num_nodes", "self.join_network", "self.nodes", "self.sync_all", "self.split_network"]}, "rpc_getdescriptorinfo.py": {"libraries": ["test_framework.descriptors.descsum_create", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error"], "function_names": ["run_test", "test_desc", "set_test_params"], "function_calls": ["DescriptorTest", "assert_equal", "assert_raises_rpc_error", "descsum_create"], "class_names": ["DescriptorTest"], "class_method_calls": ["self.wallet_names", "self.test_desc", "self.num_nodes", "self.nodes", "self.extra_args"]}, "rpc_help.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "collections.defaultdict", "re"], "function_names": ["dump_help", "wallet_help", "set_test_params", "add_options", "test_categories", "process_mapping", "parse_string", "run_test", "test_client_conversion_table"], "function_calls": ["list", "sorted", "set", "HelpRpcTest", "tuple", "any", "AssertionError", "all", "int", "process_mapping", "zip", "assert_equal", "parse_string", "defaultdict", "assert_raises_rpc_error", "open"], "class_names": ["HelpRpcTest"], "class_method_calls": ["self.options", "node.help", "self.num_nodes", "line.split", "f.write", "line.startswith", "self.add_wallet_options", "self.wallet_help", "self.dump_help", "converts_by_argname.items", "self.test_categories", "self.config", "self.is_external_signer_compiled", "self.test_client_conversion_table", "line.rstrip", "os.mkdir", "re.search", "m.group", "self.is_wallet_compiled", "os.path", "self.supports_cli", "self.nodes", "self.is_zmq_compiled", "self.restart_node", "components.append", "cmds.append"]}, "rpc_invalid_address_message.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["set_test_params", "add_options", "test_validateaddress", "check_valid", "run_test", "test_getaddressinfo", "check_invalid"], "function_calls": ["range", "list", "InvalidAddressErrorMessageTest", "assert_equal", "assert_raises_rpc_error"], "class_names": ["InvalidAddressErrorMessageTest"], "class_method_calls": ["self.num_nodes", "self.is_wallet_compiled", "self.test_getaddressinfo", "node.validateaddress", "self.init_wallet", "self.nodes", "node.getaddressinfo", "self.check_invalid", "self.add_wallet_options", "self.test_validateaddress", "self.check_valid", "self.setup_clean_chain"]}, "rpc_invalidateblock.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.address.ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["run_test", "set_test_params", "setup_network"], "function_calls": ["assert_equal", "assert_raises_rpc_error", "InvalidateTest"], "class_names": ["InvalidateTest"], "class_method_calls": ["self.generatetodescriptor", "self.generate", "self.no_op", "self.num_nodes", "self.wait_until", "self.nodes", "self.sync_blocks", "self.log", "self.connect_nodes", "self.setup_nodes", "self.setup_clean_chain"]}, "rpc_mempool_info.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework", "test_framework.wallet.MiniWallet", "test_framework.util.assert_equal"], "function_names": ["run_test", "create_tx", "set_test_params"], "function_calls": ["len", "RPCMempoolInfoTest", "MiniWallet", "assert_equal", "create_tx", "assert_raises_rpc_error"], "class_names": ["RPCMempoolInfoTest"], "class_method_calls": ["self.num_nodes", "self.nodes", "self.wallet", "self.log"]}, "rpc_misc.py": {"libraries": ["test_framework.authproxy.JSONRPCException", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_greater_than_or_equal", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "xml.etree.ElementTree", "test_framework.util.assert_greater_than"], "function_names": ["run_test", "set_test_params"], "function_calls": ["list", "sorted", "assert_greater_than", "RpcMiscTest", "all", "assert_equal", "assert_greater_than_or_equal", "assert_raises_rpc_error"], "class_names": ["RpcMiscTest"], "class_method_calls": ["node.echo", "self.num_nodes", "node.getmemoryinfo", "tree.tag", "self.wait_until", "node.echoipc", "self.supports_cli", "self.nodes", "self.restart_node", "self.log", "node.logging", "ET.fromstring", "node.getindexinfo"]}, "rpc_named_arguments.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["run_test", "set_test_params"], "function_calls": ["assert_equal", "assert_raises_rpc_error", "NamedArgumentTest"], "class_names": ["NamedArgumentTest"], "class_method_calls": ["node.help", "node.echo", "self.num_nodes", "node.getblock", "self.supports_cli", "self.nodes", "h.startswith", "node.getblockhash"]}, "rpc_net.py": {"libraries": ["test_framework.wallet.MiniWallet", "test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.util.p2p_port", "test_framework.util.assert_greater_than", "test_framework.p2p.P2P_SERVICES", "test_framework.util.assert_approx", "test_framework.p2p.P2PInterface", "test_framework.messages", "itertools.product", "time"], "function_names": ["test_connection_count", "test_addpeeraddress", "set_test_params", "test_getnodeaddresses", "test_service_flags", "test_getnetworkinfo", "test_getpeerinfo", "assert_net_servicesnames", "test_getaddednodeinfo", "run_test", "test_getnettotals"], "function_calls": ["product", "range", "len", "NetTest", "assert_approx", "Decimal", "int", "assert_greater_than", "peer_after", "MiniWallet", "assert_equal", "next", "P2PInterface", "getattr", "assert_raises_rpc_error", "assert_net_servicesnames", "p2p_port"], "class_names": ["NetTest"], "class_method_calls": ["imported_addrs.append", "self.test_getnodeaddresses", "node.help", "self.test_getnetworkinfo", "self.num_nodes", "self.test_getnettotals", "no_version_peer.peer_disconnect", "x.getpeerinfo", "self.log", "self.connect_nodes", "self.wallet", "self.test_service_flags", "self.generate", "node.addpeeraddress", "test_framework.messages", "self.test_connection_count", "time.time", "node.getnetworkinfo", "self.sync_all", "n.getnetworkinfo", "self.test_addpeeraddress", "node.getnodeaddresses", "node.assert_debug_log", "self.test_getaddednodeinfo", "peer_info.pop", "self.wait_until", "self.supports_cli", "self.nodes", "self.test_getpeerinfo", "self.restart_node", "self.extra_args"]}, "rpc_packages.py": {"libraries": ["test_framework.wallet.MiniWallet", "test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.messages.tx_from_hex", "test_framework.util.assert_equal", "test_framework.wallet.COIN", "test_framework.messages.MAX_BIP125_RBF_SEQUENCE", "test_framework.util.assert_raises_rpc_error", "test_framework.wallet.DEFAULT_FEE", "test_framework.p2p.P2PTxInvStore", "test_framework.util.assert_fee_amount", "test_framework.blocktools.COINBASE_MATURITY", "random"], "function_names": ["test_independent", "test_multiple_children", "assert_equal_package_results", "set_test_params", "assert_testres_equal", "test_conflicting", "test_rbf", "test_submitpackage", "test_submit_child_with_parents", "test_multiple_parents", "test_submit_cpfp", "run_test", "test_chain"], "function_calls": ["range", "list", "set", "len", "P2PTxInvStore", "tx_from_hex", "Decimal", "RPCPackagesTest", "int", "all", "MiniWallet", "assert_equal", "assert_fee_amount", "assert_raises_rpc_error"], "class_names": ["RPCPackagesTest"], "class_method_calls": ["self.test_multiple_parents", "self.test_chain", "self.num_nodes", "random.shuffle", "tx.getwtxid", "node.createrawtransaction", "tx_bad_sig.getwtxid", "node.sendrawtransaction", "tx.rehash", "node.get_deterministic_priv_key", "self.independent_txns_hex", "self.log", "package_hex.append", "self.wallet", "self.generate", "presubmitted_wtxids.add", "self.test_submit_cpfp", "package_txns.append", "peer.wait_for_broadcast", "node.add_p2p_connection", "tx_bad_sig.rehash", "self.test_rbf", "self.test_multiple_children", "parent_coins.append", "self.setup_clean_chain", "testres_single.append", "self.independent_txns_testres_blank", "node.submitpackage", "random.choice", "self.test_submitpackage", "node.getmempoolentry", "self.test_independent", "node.prioritisetransaction", "self.assert_testres_equal", "self.test_submit_child_with_parents", "self.assert_equal_package_results", "self.generatetoaddress", "tx.get_vsize", "node.getblock", "self.nodes", "self.test_conflicting", "node.testmempoolaccept", "self.extra_args", "self.independent_txns_testres"]}, "rpc_preciousblock.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["node_sync_via_rpc", "set_test_params", "unidirectional_node_sync_via_rpc", "setup_network", "run_test"], "function_calls": ["len", "node_sync_via_rpc", "PreciousTest", "unidirectional_node_sync_via_rpc", "assert_equal"], "class_names": ["PreciousTest"], "class_method_calls": ["node_src.getblockheader", "blocks_to_copy.append", "node_dest.submitblock", "self.generate", "self.no_op", "node_src.getbestblockhash", "self.num_nodes", "self.setup_nodes", "node_dest.getblock", "self.supports_cli", "self.nodes", "self.sync_blocks", "blocks_to_copy.reverse", "self.log", "self.connect_nodes", "node_src.getblock", "self.setup_clean_chain"]}, "rpc_psbt.py": {"libraries": ["test_framework.psbt.PSBTMap", "test_framework.test_framework.BitcoinTestFramework", "test_framework.key.ECKey", "test_framework.messages.MAX_BIP125_RBF_SEQUENCE", "test_framework.key.H_POINT", "test_framework.util.find_vout_for_address", "test_framework.messages.CTxIn", "test_framework.psbt.PSBT_IN_HASH256", "itertools.product", "test_framework.psbt.PSBT_IN_WITNESS_UTXO", "decimal.Decimal", "test_framework.psbt.PSBT_IN_RIPEMD160", "test_framework.psbt.PSBT_IN_HASH160", "test_framework.util.assert_greater_than", "test_framework.messages.CTxOut", "test_framework.messages.WITNESS_SCALE_FACTOR", "test_framework.util.random_bytes", "test_framework.psbt.PSBT_OUT_TAP_TREE", "test_framework.script.CScript", "test_framework.util.find_output", "test_framework.util.assert_greater_than_or_equal", "test_framework.psbt.PSBT_IN_SHA256", "test_framework.util.assert_equal", "test_framework.descriptors.descsum_create", "test_framework.script.OP_TRUE", "test_framework.psbt.PSBT", "test_framework.wallet_util.bytes_to_wif", "test_framework.psbt.PSBT_GLOBAL_UNSIGNED_TX", "test_framework.psbt.PSBT_IN_NON_WITNESS_UTXO", "test_framework.messages.COutPoint", "json", "os", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_approx", "test_framework.messages.CTransaction", "test_framework.messages.ser_compact_size"], "function_names": ["test_utxo_conversion", "skip_test_if_missing_module", "set_test_params", "add_options", "test_input_confs_control", "assert_change_type", "test_psbt_input_keys", "run_test"], "function_calls": ["random_bytes", "range", "assert_approx", "set", "bytes", "find_output", "assert_greater_than", "COutPoint", "CTransaction", "bytes_to_wif", "test_psbt_input_keys", "ECKey", "ser_compact_size", "len", "find_vout_for_address", "CScript", "enumerate", "descsum_create", "PSBTMap", "open", "product", "sum", "PSBT", "assert_equal", "PSBTTest", "CTxOut", "assert_greater_than_or_equal", "Decimal", "int", "zip", "assert_raises_rpc_error", "CTxIn"], "class_names": ["PSBTTest"], "class_method_calls": ["parsed_psbt.make_blank", "psbt_new.i", "self.skip_if_no_wallet", "self.default_wallet_name", "self.test_input_confs_control", "self.connect_nodes", "wunsafe.walletcreatefundedpsbt", "online_node.gettxout", "wallet.importdescriptors", "watchonly.importdescriptors", "wonline.walletprocesspsbt", "PSBT.from_base64", "psbt_new.to_base64", "psbt.o", "os.path", "self.extra_args", "self.test_utxo_conversion", "wmulti.unloadwallet", "psbt.g", "self.add_wallet_options", "wallet.walletprocesspsbt", "offline_node.walletprocesspsbt", "hash.hex", "wunsafe.getnewaddress", "eckey.get_bytes", "online_node.get_wallet_rpc", "wonline.listunspent", "self.sync_all", "mining_node.finalizepsbt", "wmulti.addmultisigaddress", "psbt.i", "wrpc.importprivkey", "wallet.finalizepsbt", "self.nodes", "bytes.fromhex", "self.options", "mining_node.sendrawtransaction", "wallet.walletcreatefundedpsbt", "self.num_nodes", "wallet.unloadwallet", "args.append", "wallet.importmulti", "wmulti.importaddress", "mining_wallet.sendtoaddress", "online_node.createwallet", "watchonly.sendall", "wallet.getnewaddress", "tx.vin", "psbt_input.keys", "acs_prevout.serialize", "psbt.to_base64", "watchonly.importmulti", "preimage.hex", "self.disconnect_nodes", "online_node.converttopsbt", "self.supports_cli", "parsed_psbt.o", "mining_node.decodepsbt", "wallet.sendtoaddress", "eckey.get_pubkey", "self.log", "wonline.importaddress", "wmulti.walletcreatefundedpsbt", "self.generate", "w2.getnewaddress", "parsed_psbt.to_base64", "tx.vout", "offline_node.getnewaddress", "self.sync_mempools", "wonline.createrawtransaction", "mining_node.get_wallet_rpc", "wonline.unloadwallet", "tx.serialize", "json.load", "wonline.gettransaction", "self.assert_change_type", "wrpc.walletprocesspsbt", "eckey.generate"]}, "rpc_rawtransaction.py": {"libraries": ["test_framework.wallet.MiniWallet", "test_framework.script.OP_FALSE", "test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.messages.tx_from_hex", "test_framework.util.assert_equal", "test_framework.script.OP_INVALIDOPCODE", "test_framework.messages.MAX_BIP125_RBF_SEQUENCE", "test_framework.util.assert_raises_rpc_error", "test_framework.wallet.getnewdestination", "test_framework.util.assert_greater_than", "test_framework.messages.CTxOut", "test_framework.script.CScript", "collections.OrderedDict", "test_framework.messages.COIN", "test_framework.messages.CTransaction", "itertools.product", "test_framework.script.OP_RETURN"], "function_names": ["__init__", "sendrawtransaction_testmempoolaccept_tests", "createrawtransaction_tests", "items", "add_options", "set_test_params", "sendrawtransaction_tests", "transaction_version_number_tests", "getrawtransaction_verbosity_tests", "decoderawtransaction_tests", "getrawtransaction_tests", "raw_multisig_transaction_legacy_tests", "setup_network", "run_test"], "function_calls": ["set", "OrderedDict", "multidict", "assert_greater_than", "CTransaction", "len", "getnewdestination", "CScript", "product", "tx_from_hex", "RawTransactionsTest", "MiniWallet", "assert_equal", "CTxOut", "isinstance", "super", "Decimal", "int", "next", "AssertionError", "assert_raises_rpc_error"], "class_names": ["multidict", "RawTransactionsTest"], "class_method_calls": ["self.options", "self.num_nodes", "self.raw_multisig_transaction_legacy_tests", "self.is_specified_wallet_compiled", "self.getrawtransaction_verbosity_tests", "args.append", "node.sendrawtransaction", "self.log", "self.add_wallet_options", "self.getrawtransaction_tests", "self.connect_nodes", "self.wallet", "self.generate", "tx.vout", "gottx.keys", "prevout.keys", "script_pub_key.keys", "tx.serialize", "self.sendrawtransaction_testmempoolaccept_tests", "self.transaction_version_number_tests", "self.sync_all", "self.decoderawtransaction_tests", "self.sendrawtransaction_tests", "self.createrawtransaction_tests", "tx.nVersion", "self.import_deterministic_coinbase_privkeys", "self.x", "self.supports_cli", "self.nodes", "dict.__init__", "self.extra_args", "node.testmempoolaccept"]}, "rpc_scanblocks.py": {"libraries": ["test_framework.blockfilter.bip158_basic_element_hash", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.address.address_to_scriptpubkey", "test_framework.util.assert_raises_rpc_error", "test_framework.wallet.getnewdestination", "test_framework.blockfilter.bip158_relevant_scriptpubkeys", "test_framework.messages.COIN", "test_framework.wallet.MiniWallet"], "function_names": ["run_test", "set_test_params"], "function_calls": ["len", "list", "getnewdestination", "bip158_relevant_scriptpubkeys", "all", "bip158_basic_element_hash", "MiniWallet", "assert_equal", "assert_raises_rpc_error", "ScanblocksTest", "address_to_scriptpubkey"], "class_names": ["ScanblocksTest"], "class_method_calls": ["bytes.fromhex", "self.generate", "false_positive_spk.hex", "self.num_nodes", "genesis_coinbase_spk.hex", "self.wait_until", "node.scanblocks", "self.nodes", "wallet.send_to", "node.getblockheader", "self.extra_args", "node.getindexinfo", "node.getblockhash"]}, "rpc_scantxoutset.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.address.address_to_scriptpubkey", "test_framework.util.assert_raises_rpc_error", "test_framework.wallet.getnewdestination", "test_framework.messages.COIN", "test_framework.wallet.MiniWallet"], "function_names": ["descriptors", "run_test", "set_test_params", "sendtodestination"], "function_calls": ["sum", "sorted", "Decimal", "getnewdestination", "int", "MiniWallet", "assert_equal", "descriptors", "ScantxoutsetTest", "isinstance", "assert_raises_rpc_error", "address_to_scriptpubkey"], "class_names": ["ScantxoutsetTest"], "class_method_calls": ["self.generate", "self.wallet", "self.sendtodestination", "self.num_nodes", "pubk1.hex", "pubk2.hex", "self.nodes", "pubk3.hex", "self.log"]}, "rpc_setban.py": {"libraries": ["test_framework.util.p2p_port", "test_framework.test_framework.BitcoinTestFramework"], "function_names": ["run_test", "set_test_params", "is_banned"], "function_calls": ["any", "p2p_port", "SetBanTests", "str"], "class_names": ["SetBanTests"], "class_method_calls": ["self.num_nodes", "self.is_banned", "node.listbanned", "node.setban", "self.nodes", "self.restart_node", "self.log", "self.connect_nodes", "self.extra_args", "self.setup_clean_chain"]}, "rpc_signer.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "platform"], "function_names": ["set_mock_result", "skip_test_if_missing_module", "set_test_params", "clear_mock_result", "mock_signer_path", "run_test"], "function_calls": ["assert_equal", "assert_raises_rpc_error", "open", "RPCSignerTest"], "class_names": ["RPCSignerTest"], "class_method_calls": ["self.skip_if_no_external_signer", "os.remove", "self.clear_mock_result", "self.num_nodes", "node.cwd", "self.mock_signer_path", "self.set_mock_result", "os.path", "self.disable_syscall_sandbox", "f.write", "self.nodes", "self.log", "self.extra_args", "platform.system"]}, "rpc_signmessagewithprivkey.py": {"libraries": ["test_framework.descriptors.descsum_create", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error"], "function_names": ["run_test", "addresses_from_privkey", "set_test_params"], "function_calls": ["assert_equal", "assert_raises_rpc_error", "SignMessagesWithPrivTest", "descsum_create"], "class_names": ["SignMessagesWithPrivTest"], "class_method_calls": ["self.num_nodes", "self.nodes", "self.addresses_from_privkey", "self.log", "self.setup_clean_chain"]}, "rpc_signrawtransactionwithkey.py": {"libraries": ["test_framework.script_util.script_to_p2sh_p2wsh_script", "test_framework.script_util.script_to_p2wsh_script", "test_framework.test_framework.BitcoinTestFramework", "test_framework.script_util.key_to_p2pkh_script", "decimal.Decimal", "test_framework.key.ECKey", "test_framework.address.address_to_scriptpubkey", "test_framework.util.assert_equal", "test_framework.wallet.getnewdestination", "test_framework.address.script_to_p2sh", "test_framework.util.find_vout_for_address", "test_framework.script_util.key_to_p2pk_script", "test_framework.wallet_util.bytes_to_wif", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["successful_signing_test", "set_test_params", "witness_script_test", "send_to_address", "verify_txn_with_witness_script", "run_test"], "function_calls": ["script_to_p2wsh_script", "key_to_p2pkh_script", "find_vout_for_address", "Decimal", "getnewdestination", "script_to_p2sh", "key_to_p2pk_script", "assert_equal", "bytes_to_wif", "script_to_p2sh_p2wsh_script", "address_to_scriptpubkey", "SignRawTransactionWithKeyTest", "ECKey"], "class_names": ["SignRawTransactionWithKeyTest"], "class_method_calls": ["self.block_hash", "eckey.get_bytes", "self.blk_idx", "self.generate", "self.num_nodes", "self.send_to_address", "self.successful_signing_test", "self.verify_txn_with_witness_script", "self.nodes", "eckey.get_pubkey", "self.log", "self.witness_script_test", "eckey.generate", "self.setup_clean_chain"]}, "rpc_txoutproof.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.messages.CMerkleBlock", "test_framework.messages.from_hex", "test_framework.wallet.MiniWallet"], "function_names": ["run_test", "set_test_params"], "function_calls": ["from_hex", "sorted", "MerkleBlockTest", "CMerkleBlock", "MiniWallet", "assert_equal", "assert_raises_rpc_error"], "class_names": ["MerkleBlockTest"], "class_method_calls": ["tweaked_proof.header", "tweaked_proof.txn", "self.generate", "miniwallet.send_self_transfer", "self.num_nodes", "tweaked_proof.serialize", "self.nodes", "miniwallet.get_utxo", "txlist.append", "self.extra_args", "n.verifytxoutproof"]}, "rpc_uptime.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework", "time"], "function_names": ["run_test", "_test_uptime", "set_test_params", "_test_negative_time"], "function_calls": ["assert_raises_rpc_error", "int", "UptimeTest"], "class_names": ["UptimeTest"], "class_method_calls": ["self._test_negative_time", "self.num_nodes", "time.time", "self.nodes", "self._test_uptime", "self.setup_clean_chain"]}, "rpc_users.py": {"libraries": ["random.SystemRandom", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "http.client", "test_framework.util.get_datadir_path", "string", "configparser", "subprocess", "test_framework.util.str_to_b64str", "urllib.parse", "sys"], "function_names": ["set_test_params", "test_auth", "call_with_auth", "setup_chain", "run_test"], "function_calls": ["range", "get_datadir_path", "assert_equal", "str_to_b64str", "call_with_auth", "super", "open", "SystemRandom", "HTTPBasicsTest"], "class_names": ["HTTPBasicsTest"], "class_method_calls": ["self.options", "self.num_nodes", "http.client", "self.user", "f.write", "url.hostname", "self.log", "self.rtpassword", "conn.close", "conn.connect", "config.read_file", "conn.getresponse", "self.chain", "configparser.ConfigParser", "urllib.parse", "url.port", "sys.executable", "self.test_auth", "subprocess.PIPE", "url.username", "os.mkdir", "url.password", "string.ascii_letters", "node.url", "self.stop_node", "string.digits", "subprocess.Popen", "self.rpcpassword", "conn.request", "self.password", "p.stdout", "self.rpcuser", "os.path", "self.supports_cli", "self.nodes", "self.restart_node", "self.rt2password"]}, "rpc_validateaddress.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["set_test_params", "test_validateaddress", "check_valid", "run_test", "check_invalid"], "function_calls": ["assert_equal", "ValidateAddressMainTest"], "class_names": ["ValidateAddressMainTest"], "class_method_calls": ["self.num_nodes", "self.extra_args", "self.nodes", "self.chain", "self.check_invalid", "self.test_validateaddress", "self.check_valid", "self.setup_clean_chain"]}, "rpc_whitelist.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "http.client", "test_framework.util.get_datadir_path", "test_framework.util.str_to_b64str", "urllib.parse"], "function_names": ["run_test", "setup_chain", "rpccall", "set_test_params"], "function_calls": ["RPCWhitelistTest", "len", "rpccall", "get_datadir_path", "assert_equal", "str_to_b64str", "super", "open"], "class_names": ["RPCWhitelistTest"], "class_method_calls": ["self.options", "self.num_nodes", "http.client", "permissions.pop", "f.write", "url.hostname", "self.log", "conn.close", "conn.connect", "conn.getresponse", "self.strange_users", "urllib.parse", "url.port", "self.never_allowed", "node.url", "conn.request", "self.users", "os.path", "self.nodes"]}, "address.py": {"libraries": ["test_framework.script_util.program_to_witness_script", "test_framework.segwit_addr.decode_segwit_address", "script.OP_0", "test_framework.segwit_addr.encode_segwit_address", "script.OP_TRUE", "unittest", "script.taproot_construct", "test_framework.script_util.scripthash_to_p2sh_script", "test_framework.script_util.keyhash_to_p2pkh_script", "script.hash256", "script.hash160", "util.assert_equal", "enum", "script.sha256", "script.CScript"], "function_names": ["test_bech32_decode", "key_to_p2wpkh", "address_to_scriptpubkey", "key_to_p2pkh", "create_deterministic_address_bcrt1_p2tr_op_true", "keyhash_to_p2pkh", "output_key_to_p2tr", "program_to_witness", "script_to_p2wsh", "byte_to_base58", "check_script", "test_base58encodedecode", "key_to_p2sh_p2wpkh", "check_base58", "base58_to_byte", "scripthash_to_p2sh", "script_to_p2sh", "check_bech32_decode", "bech32_to_bytes", "check_key", "script_to_p2sh_p2wsh"], "function_calls": ["bytes", "ValueError", "len", "decode_segwit_address", "CScript", "hash256", "keyhash_to_p2pkh", "hash160", "sha256", "bytearray", "output_key_to_p2tr", "program_to_witness", "keyhash_to_p2pkh_script", "byte_to_base58", "assert_equal", "check_script", "program_to_witness_script", "check_base58", "base58_to_byte", "scripthash_to_p2sh_script", "scripthash_to_p2sh", "int", "script_to_p2sh", "check_bech32_decode", "bech32_to_bytes", "check_key", "encode_segwit_address", "taproot_construct", "type"], "class_names": ["AddressType", "TestFrameworkScript"], "class_method_calls": ["bytes.fromhex", "unittest.TestCase", "self.assertEqual", "n.to_bytes", "n.bit_length", "int.from_bytes", "b58chars.index", "enum.Enum", "address.split"]}, "authproxy.py": {"libraries": ["json", "socket", "http.client", "logging", "base64", "urllib.parse", "http.HTTPStatus", "decimal", "time"], "function_names": ["__init__", "__truediv__", "batch", "get_request", "__call__", "__getattr__", "EncodeDecimal", "_set_conn", "_request", "_get_response"], "function_calls": ["list", "TypeError", "dict", "AuthServiceProxy", "JSONRPCException", "str", "min", "repr", "isinstance", "super"], "class_names": ["JSONRPCException", "AuthServiceProxy"], "class_method_calls": ["self.__conn", "http.client", "HTTPStatus.OK", "self.__service_url", "name.endswith", "log.debug", "postdata.encode", "json.loads", "decimal.Decimal", "http_response.reason", "connection.timeout", "base64.b64encode", "socket.timeout", "self._request", "urllib.parse", "http_response.status", "time.time", "self.http_status", "self.error", "self._get_response", "http_response.getheader", "self.__url", "http_response.read", "self.ensure_ascii", "logging.getLogger", "self.__auth_header", "name.startswith", "json.dumps", "self._service_name", "self.get_request", "AuthServiceProxy.__id_count", "self._set_conn", "self.timeout"]}, "bdb.py": {"libraries": ["struct"], "function_names": ["dump_leaf_page", "extract_kv_pairs", "dump_bdb_kv", "dump_meta_page"], "function_calls": ["range", "len", "extract_kv_pairs", "dump_leaf_page", "enumerate", "dump_meta_page", "open"], "class_names": [], "class_method_calls": ["iv.hex", "f.read", "struct.unpack", "uid.hex", "chksum.hex", "pages.append"]}, "blockfilter.py": {"libraries": ["siphash.siphash"], "function_names": ["bip158_relevant_scriptpubkeys", "bip158_basic_element_hash"], "function_calls": ["set", "siphash"], "class_names": [], "class_method_calls": ["bytes.fromhex", "node.getblock", "int.from_bytes", "spks.add"]}, "blocktools.py": {"libraries": ["script_util.keys_to_multisig_script", "script.CScriptOp", "unittest", "address.script_to_p2wsh", "time", "messages.CTxIn", "script_util.key_to_p2wpkh_script", "struct", "script.OP_1", "script.CScriptNum", "messages.SEQUENCE_FINAL", "script.OP_TRUE", "messages.ser_uint256", "address.script_to_p2sh_p2wsh", "script_util.script_to_p2wsh_script", "script.OP_RETURN", "script.CScript", "util.assert_equal", "messages.CBlock", "address.key_to_p2wpkh", "script_util.key_to_p2pk_script", "messages.uint256_from_str", "messages.CTxInWitness", "messages.CTxOut", "messages.tx_from_hex", "messages.COIN", "address.address_to_scriptpubkey", "messages.hash256", "messages.COutPoint", "messages.CTransaction", "address.key_to_p2sh_p2wpkh"], "function_names": ["create_coinbase", "create_tx_with_script", "script_BIP34_coinbase_height", "create_witness_tx", "get_legacy_sigopcount_block", "send_to_witness", "get_legacy_sigopcount_tx", "test_create_coinbase", "create_block", "witness_script", "get_witness_script", "add_witness_commitment"], "function_calls": ["key_to_p2wpkh", "get_legacy_sigopcount_tx", "COutPoint", "key_to_p2pk_script", "CTransaction", "CTxInWitness", "address_to_scriptpubkey", "len", "script_to_p2wsh_script", "script_BIP34_coinbase_height", "CScript", "CScriptNum", "hash256", "ser_uint256", "uint256_from_str", "create_coinbase", "key_to_p2wpkh_script", "tx_from_hex", "script_to_p2wsh", "assert_equal", "CTxOut", "key_to_p2sh_p2wpkh", "hasattr", "witness_script", "get_witness_script", "create_witness_tx", "int", "CBlock", "keys_to_multisig_script", "script_to_p2sh_p2wsh", "CTxIn"], "class_names": ["TestFrameworkBlockTools"], "class_method_calls": ["bytes.fromhex", "unittest.TestCase", "block.nVersion", "tmpl.get", "block.hashPrevBlock", "node.createrawtransaction", "node.sendrawtransaction", "coinbaseoutput2.scriptPubKey", "block.calc_witness_merkle_root", "block.vtx", "coinbaseoutput.scriptPubKey", "j.scriptSig", "block.hashMerkleRoot", "CScriptNum.decode", "tx.vout", "struct.unpack", "coinbaseoutput2.nValue", "node.signrawtransactionwithwallet", "i.scriptPubKey", "tx.vin", "block.nBits", "coinbase.calc_sha256", "coinbase.vout", "time.time", "tx.serialize", "block.nTime", "CScriptOp.encode_op_n", "prevtx.vout", "block.calc_merkle_root", "coinbase_tx.vin", "block.rehash", "tx.calc_sha256", "coinbaseoutput.nValue", "pkscript.hex", "coinbase.vin", "block.calc_sha256", "prevtx.sha256"]}, "coverage.py": {"libraries": ["authproxy.AuthServiceProxy", "os"], "function_names": ["__init__", "__truediv__", "_log_call", "write_all_rpc_commands", "get_request", "__getattr__", "__call__", "get_filename"], "function_calls": ["list", "set", "str", "AuthServiceProxyWrapper", "getattr", "isinstance", "open", "type"], "class_names": ["AuthServiceProxyWrapper"], "class_method_calls": ["self.coverage_logfile", "node.help", "os.getpid", "f.writelines", "line.split", "line.strip", "commands.add", "self.rpc_url", "os.path", "f.write", "line.startswith", "self._log_call", "self.auth_service_proxy_instance"]}, "descriptors.py": {"libraries": ["re"], "function_names": ["drop_origins", "descsum_check", "descsum_polymod", "descsum_create", "descsum_expand"], "function_calls": ["range", "len", "all", "descsum_polymod", "descsum_create", "descsum_expand"], "class_names": [], "class_method_calls": ["INPUT_CHARSET.find", "re.sub", "symbols.append", "desc.index", "CHECKSUM_CHARSET.find", "groups.append"]}, "key.py": {"libraries": ["os", "hashlib", "unittest", "hmac", "util.modinv", "random", "csv"], "function_names": ["set", "get_bytes", "test_schnorr_testvectors", "double", "lift_x", "rfc6979_nonce", "__init__", "add", "mul", "is_x_coord", "is_compressed", "modsqrt", "jacobi_symbol", "tweak_add_pubkey", "on_curve", "TaggedHash", "sign_ecdsa", "sign_schnorr", "negate", "verify_schnorr", "verify_ecdsa", "add_mixed", "get_pubkey", "compute_xonly_pubkey", "test_schnorr", "generate", "affine", "tweak_add_privkey", "is_valid", "has_even_y", "generate_privkey"], "function_calls": ["range", "bytes", "rfc6979_nonce", "pow", "NotImplementedError", "len", "ECPubKey", "modsqrt", "jacobi_symbol", "open", "EllipticCurve", "TaggedHash", "sign_schnorr", "modinv", "verify_schnorr", "compute_xonly_pubkey", "list", "int", "next", "generate_privkey"], "class_names": ["TestFrameworkKey", "ECPubKey", "EllipticCurve", "ECKey"], "class_method_calls": ["bytes.fromhex", "unittest.TestCase", "hmac.new", "SECP256K1.lift_x", "x.to_bytes", "self.assertEqual", "self.secret", "self.assertTrue", "r.bit_length", "self.double", "SECP256K1.affine", "self.set", "hashlib.sha256", "s.bit_length", "keys.items", "int.from_bytes", "self.valid", "random.randrange", "self.p", "ret.valid", "self.fail", "self.add", "SECP256K1.has_even_y", "SECP256K1.is_x_coord", "SECP256K1.negate", "SECP256K1.mul", "tag.encode", "sig.hex", "self.affine", "v.to_bytes", "SECP256K1.on_curve", "self.add_mixed", "r.to_bytes", "self.assertFalse", "pubkey_actual.hex", "ret.p", "os.path", "self.compressed", "self.a", "s.to_bytes", "sig_actual.hex", "csv.reader", "ret.compressed", "pubkey.hex", "self.b"]}, "messages.py": {"libraries": ["struct", "io.BytesIO", "test_framework.util.assert_equal", "test_framework.siphash.siphash256", "base64.b32decode", "hashlib", "copy", "time", "socket", "random", "math", "base64.b32encode"], "function_names": ["ser_uint256_vector", "from_hex", "deser_uint256_vector", "set_null", "get_weight", "get_merkle_root", "deser_vector", "calc_merkle_root", "calc_witness_merkle_root", "ser_compact_size", "__init__", "deserialize", "initialize_from_block", "to_p2p", "is_null", "hash256", "ser_string", "calc_sha256", "uint256_from_compact", "uint256_from_str", "ser_uint256", "serialize", "rehash", "sha256", "from_binary", "deser_uint256", "tx_from_hex", "__eq__", "deser_compact_size", "deser_string_vector", "serialize_v2", "serialize_without_witness", "deserialize_v2", "to_absolute", "calculate_shortid", "getwtxid", "serialize_with_witness", "from_absolute", "solve", "is_valid", "ser_vector", "__repr__", "ser_string_vector", "get_siphash_keys", "get_vsize", "deser_string"], "function_calls": ["range", "from_hex", "ser_uint256_vector", "bytes", "deser_uint256_vector", "siphash256", "BlockTransactionsRequest", "COutPoint", "CMerkleBlock", "CTransaction", "CTxInWitness", "b32encode", "deser_vector", "c", "BytesIO", "b32decode", "PrefilledTransaction", "ser_compact_size", "P2PHeaderAndShortWitnessIDs", "len", "CBlockLocator", "P2PHeaderAndShortIDs", "ser_string", "hash256", "uint256_from_compact", "getattr", "ser_uint256", "uint256_from_str", "sha256", "bytearray", "deser_uint256", "CScriptWitness", "deser_compact_size", "deser_string_vector", "CAddress", "CBlockHeader", "assert_equal", "isinstance", "super", "calculate_shortid", "cls", "CTxWitness", "CPartialMerkleTree", "int", "min", "repr", "CBlock", "BlockTransactions", "ser_vector", "ser_string_vector", "deser_string"], "class_names": ["msg_addr", "msg_mempool", "msg_filterload", "msg_getblocks", "BlockTransactionsRequest", "COutPoint", "CMerkleBlock", "CTxInWitness", "CTransaction", "msg_filterclear", "msg_getcfcheckpt", "msg_no_witness_tx", "msg_tx", "HeaderAndShortIDs", "msg_block", "msg_no_witness_blocktxn", "PrefilledTransaction", "P2PHeaderAndShortWitnessIDs", "msg_no_witness_block", "msg_getcfilters", "msg_sendheaders", "CBlockLocator", "CInv", "P2PHeaderAndShortIDs", "msg_getheaders", "msg_getaddr", "msg_merkleblock", "msg_getdata", "msg_version", "msg_inv", "msg_verack", "CScriptWitness", "msg_wtxidrelay", "CAddress", "msg_headers", "CBlockHeader", "msg_cfilter", "CTxOut", "msg_cmpctblock", "msg_feefilter", "msg_cfheaders", "CTxWitness", "msg_pong", "msg_filteradd", "msg_sendcmpct", "CPartialMerkleTree", "msg_addrv2", "msg_sendaddrv2", "msg_sendtxrcncl", "msg_blocktxn", "CBlock", "BlockTransactions", "msg_getcfheaders", "msg_generic", "msg_ping", "msg_notfound", "msg_cfcheckpt", "CTxIn", "msg_getblocktxn"], "class_method_calls": ["self.nSequence", "self.shortids_length", "self.inv", "f.read", "self.vBits", "ret.shortids_length", "self.transactions", "self.time", "self.nValue", "self.typemap", "time.ctime", "self.vtxinwit", "hashlib.sha256", "self.nHashFuncs", "self.txn", "self.nLockTime", "self.n", "header.nVersion", "header.hash", "self.prefilled_txn", "other.hash", "x.is_null", "self.rehash", "self.hashstop", "self.addrTo", "self.serialize_without_witness", "self.prev_header", "x.serialize", "header.nBits", "self.vec", "x.tx", "self.net", "tx.nVersion", "self.nTweak", "self.shortids", "self.salt", "t.deserialize", "header.nNonce", "tout.nValue", "self.stack", "self.nServices", "self.get_weight", "self.msgtype", "self.get_merkle_root", "self.wit", "self.headers", "hashes.append", "p2pheaders_and_shortids.prefilled_txn", "self.vout", "stream.read", "other.type", "self.merkleblock", "self.data", "self.nNonce", "self.filter_data", "self.use_witness", "self.prevout", "self.ADDRV2_ADDRESS_LENGTH", "self.vin", "tx.hash", "self.nonce", "self.announce", "self.block", "self.index", "r.append", "self.feerate", "self.hashMerkleRoot", "self.NET_I2P", "obj.deserialize", "header.sha256", "self.sha256", "self.scriptWitness", "self.nBits", "self.nVersion", "self.block_transactions", "tx.sha256", "self.serialize_with_witness", "math.ceil", "self.set_null", "self.nTime", "bytes.fromhex", "self.calc_merkle_root", "other.time", "self.hash", "p2pheaders_and_shortids.nonce", "self.stop_hash", "copy.deepcopy", "block.vtx", "self.indexes", "header.hashPrevBlock", "self.port", "random.getrandbits", "self.type", "p2pheaders_and_shortids.shortids", "self.get_siphash_keys", "self.prefilled_txn_length", "tx.vin", "self.scriptSig", "ret.prefilled_txn", "self.blockhash", "header.nTime", "p2pheaders_and_shortids.header", "i.serialize", "self.hashPrevBlock", "self.tx", "other.nServices", "self.addrs", "self.addrFrom", "x.index", "socket.inet_aton", "tx.wit", "struct.pack", "self.header", "self.filter_type", "absolute_indexes.append", "self.hashes", "tx.calc_sha256", "self.ip", "self.block_txn_request", "self.NET_IPV4", "self.version", "self.ADDRV2_NET_NAME", "ret.prefilled_txn_length", "other.net", "x.hex", "self.strSubVer", "self.nFlags", "ret.header", "self.locator", "newhashes.append", "tx.vout", "struct.unpack", "self.I2P_PAD", "other.ip", "self.nStartingHeight", "ret.nonce", "self.scriptPubKey", "time.time", "self.header_and_shortids", "ret.shortids", "tx.is_valid", "socket.inet_ntoa", "self.relay", "header.hashMerkleRoot", "self.block_hash", "self.nTransactions", "self.vHash", "tx.nLockTime", "self.serialize", "other.port", "struct.error", "self.vHave", "self.calc_sha256", "self.vtx", "self.start_height"]}, "muhash.py": {"libraries": ["hashlib", "util.modinv", "unittest"], "function_names": ["__init__", "chacha20_32_to_384", "digest", "rot32", "test_muhash", "test_chacha20", "chacha20_doubleround", "data_to_num3072", "remove", "chacha_check", "insert"], "function_calls": ["range", "chacha20_32_to_384", "bytes", "rot32", "modinv", "chacha20_doubleround", "data_to_num3072", "MuHash3072", "chacha_check", "bytearray"], "class_names": ["MuHash3072", "TestFrameworkMuhash"], "class_method_calls": ["self.assertEqual", "unittest.TestCase", "self.MODULUS", "hashlib.sha256", "val.to_bytes", "int.from_bytes", "muhash.digest", "muhash.remove", "muhash.insert", "self.denominator", "init.copy", "self.numerator", "out.extend"]}, "netutil.py": {"libraries": ["array", "struct", "fcntl", "os", "socket", "sys"], "function_names": ["test_ipv6_local", "addr_to_hex", "_convert_ip_port", "get_bind_addrs", "get_socket_inodes", "all_interfaces", "netstat", "_remove_empty"], "function_calls": ["range", "len", "int", "enumerate", "_convert_ip_port", "get_socket_inodes", "open", "_remove_empty", "netstat", "bytearray", "ValueError"], "class_names": [], "class_method_calls": ["bytes.fromhex", "line.split", "socket.error", "os.listdir", "array.array", "socket.AF_INET6", "inodes.append", "array.split", "target.startswith", "result.append", "struct.unpack", "content.pop", "bind_addrs.append", "socket.AF_INET", "s.connect", "addr.split", "fcntl.ioctl", "socket.socket", "s.fileno", "sys.maxsize", "socket.inet_ntoa", "f.readlines", "struct.pack", "socket.SOCK_DGRAM", "os.path", "names.tobytes", "os.readlink", "names.buffer_info"]}, "p2p.py": {"libraries": ["test_framework.messages.msg_pong", "test_framework.messages.msg_addr", "test_framework.messages.msg_blocktxn", "test_framework.messages.msg_getaddr", "test_framework.messages.msg_tx", "test_framework.messages.msg_verack", "logging", "test_framework.messages.msg_feefilter", "test_framework.messages.MAX_HEADERS_RESULTS", "test_framework.messages.NODE_NETWORK", "test_framework.messages.MSG_BLOCK", "struct", "test_framework.messages.msg_sendheaders", "asyncio", "test_framework.messages.MSG_TYPE_MASK", "test_framework.messages.CBlockHeader", "test_framework.messages.msg_getblocktxn", "test_framework.messages.msg_notfound", "test_framework.messages.MSG_WTX", "collections.defaultdict", "test_framework.messages.msg_inv", "test_framework.messages.msg_getcfheaders", "test_framework.messages.msg_getblocks", "test_framework.messages.msg_sendtxrcncl", "test_framework.util.p2p_port", "test_framework.messages.msg_filterclear", "test_framework.messages.msg_sendcmpct", "threading", "test_framework.messages.msg_merkleblock", "test_framework.messages.sha256", "test_framework.util.MAX_NODES", "test_framework.messages.msg_cfcheckpt", "test_framework.messages.msg_ping", "test_framework.messages.msg_headers", "test_framework.messages.MSG_TX", "test_framework.messages.msg_mempool", "test_framework.messages.NODE_WITNESS", "test_framework.messages.msg_block", "test_framework.messages.msg_addrv2", "test_framework.messages.msg_cfheaders", "io.BytesIO", "test_framework.messages.msg_filteradd", "test_framework.messages.msg_getcfcheckpt", "test_framework.messages.msg_version", "test_framework.messages.msg_wtxidrelay", "test_framework.messages.msg_cfilter", "test_framework.messages.msg_cmpctblock", "test_framework.messages.msg_getheaders", "test_framework.messages.msg_filterload", "test_framework.messages.msg_sendaddrv2", "test_framework.util.wait_until_helper", "test_framework.messages.msg_getcfilters", "test_framework.messages.msg_getdata", "sys"], "function_names": ["on_block", "wait_for_getdata", "wait_for_getheaders", "peer_connect_send_version", "on_cfilter", "wait_for_disconnect", "on_sendaddrv2", "on_feefilter", "is_connected", "connection_lost", "wait_for_broadcast", "wait_for_header", "maybe_write", "on_ping", "__init__", "on_version", "wait_for_block", "_log_message", "on_message", "on_pong", "on_mempool", "data_received", "on_filterclear", "on_headers", "peer_protocol", "on_cmpctblock", "on_getblocks", "on_getblocktxn", "on_open", "send_txs_and_test", "send_message", "on_merkleblock", "_on_data", "on_addr", "get_invs", "wait_until", "on_blocktxn", "on_getheaders", "run", "on_wtxidrelay", "close", "on_close", "on_sendcmpct", "wait_for_connect", "peer_connect", "on_cfcheckpt", "peer_disconnect", "on_filterload", "on_filteradd", "on_getdata", "listen", "build_message", "peer_accept_connection", "send_blocks_and_test", "test_function", "on_addrv2", "on_verack", "sync_with_ping", "on_inv", "on_notfound", "on_tx", "peer_connect_helper", "wait_for_merkleblock", "wait_for_verack", "connection_made", "on_cfheaders", "wait_for_inv", "on_getaddr", "sync_send_with_ping", "send_raw_message", "on_sendtxrcncl", "send_and_ping", "wait_for_tx", "on_sendheaders"], "function_calls": ["set", "print", "wait_until_helper", "NotImplementedError", "BytesIO", "ValueError", "p2p_port", "msg_tx", "msg_block", "len", "msg_getaddr", "msg_getdata", "getattr", "callback", "hex", "sha256", "test_function_in", "msg_version", "msg_verack", "msg_wtxidrelay", "msg_headers", "CBlockHeader", "IOError", "defaultdict", "super", "msg_pong", "list", "msg_sendaddrv2", "int", "repr", "msg_ping"], "class_names": ["P2PConnection", "P2PTxInvStore", "P2PDataStore", "P2PInterface", "NetworkThread"], "class_method_calls": ["asyncio.Protocol", "self.tx_invs_received", "self.join", "asyncio.WindowsSelectorEventLoopPolicy", "vt.relay", "message.nonce", "self.last_block_hash", "self.send_message", "sys.platform", "node.getrawmempool", "self.support_addrv2", "cls.create_listen_server", "self.ping_counter", "self.build_message", "x.hash", "block.sha256", "last_filtered_block.merkleblock", "self.on_close", "self.wait_until", "t.deserialize", "self._transport", "self.send_raw_message", "self.nServices", "self.on_connection_send_msg", "self.peer_connect_send_version", "asyncio.set_event_loop_policy", "node.getbestblockhash", "message.relay", "last_data.inv", "vt.addrFrom", "inv.type", "self._on_data", "tx.hash", "self.wtxidrelay", "vt.nServices", "headers_list.append", "prev_block_header.sha256", "self.dstport", "cls.protos", "message.msgtype", "tx.sha256", "vt.strSubVer", "logger.warning", "i.hash", "inv.hash", "sys.exc_info", "threading.Thread", "self.on_open", "message.inv", "self.message_count", "loop.create_task", "cls.network_event_loop", "self.recvbuf", "NetworkThread.network_event_loop", "i.type", "message.nVersion", "self.wait_for_disconnect", "struct.pack", "NetworkThread.protos", "self.is_connected", "vt.addrTo", "self.on_message", "message.serialize", "vt.nVersion", "loop.create_connection", "loop.call_soon_threadsafe", "NetworkThread.listeners", "self._log_message", "cls.listeners", "threading.Lock", "self.dstaddr", "struct.unpack", "logger.debug", "self.magic_bytes", "locator.vHave", "asyncio.new_event_loop", "message.hashstop", "self.getdata_requests", "last_headers.headers", "self.block_store", "self.last_message", "message.nServices", "logger.exception", "self.timeout_factor", "self.relay", "self.tx_store", "logging.getLogger", "node.assert_debug_log", "self.sync_with_ping", "self.peer_connect_helper", "self.network_event_loop", "want.inv", "message.locator", "NetworkThread.listen"]}, "psbt.py": {"libraries": ["messages.ser_compact_size", "messages.deser_string", "messages.CTransaction", "base64", "messages.from_binary"], "function_names": ["__init__", "deserialize", "from_base64", "to_base64", "make_blank", "serialize"], "function_calls": ["from_binary", "len", "bytes", "all", "PSBTMap", "isinstance", "deser_string", "ser_compact_size"], "class_names": ["PSBT", "PSBTMap"], "class_method_calls": ["self.i", "base64.b64decode", "base64.b64encode", "x.serialize", "self.o", "self.map", "self.tx", "f.read", "tx.vout", "self.serialize", "tx.vin", "m.map", "self.g"]}, "ripemd160.py": {"libraries": ["unittest"], "function_names": ["rol", "test_ripemd160", "compress", "ripemd160", "fi"], "function_calls": ["range", "len", "rol", "compress", "ripemd160", "fi"], "class_names": ["TestFrameworkKey"], "class_method_calls": ["self.assertEqual", "unittest.TestCase", "int.from_bytes"]}, "script.py": {"libraries": ["collections.namedtuple", "struct", "messages.hash256", "key.compute_xonly_pubkey", "ripemd160.ripemd160", "key.TaggedHash", "messages.uint256_from_str", "messages.CTxOut", "unittest", "typing.Dict", "messages.ser_uint256", "typing.List", "messages.CTransaction", "messages.ser_string", "messages.sha256", "key.tweak_add_pubkey"], "function_names": ["test_cscriptnum_encoding", "BIP341_sha_prevouts", "decode", "join", "BIP341_sha_outputs", "__init__", "_repr", "decode_op_n", "bn2vch", "LegacySignatureHash", "BIP341_sha_amounts", "__coerce_instance", "raw_iter", "SegwitV0SignatureHash", "__add__", "coerce_iterable", "is_small_int", "hash160", "IsWitnessProgram", "__str__", "SegwitV0SignatureMsg", "FindAndDelete", "TaprootSignatureHash", "GetSigOpCount", "__iter__", "taproot_tree_helper", "LegacySignatureMsg", "is_op_success", "__new__", "encode_op_n", "encode", "BIP341_sha_sequences", "__repr__", "test_bn2vch", "BIP341_sha_scriptpubkeys", "taproot_construct", "TaprootSignatureMsg", "encode_op_pushdata"], "function_calls": ["range", "BIP341_sha_prevouts", "bytes", "CScriptOp", "TaprootLeafInfo", "CTransaction", "abs", "ValueError", "ripemd160", "namedtuple", "BIP341_sha_outputs", "CScriptTruncatedPushDataError", "len", "_repr", "iter", "bn2vch", "CScript", "BIP341_sha_amounts", "CScriptNum", "enumerate", "ser_string", "hash256", "tweak_add_pubkey", "coerce_iterable", "ser_uint256", "uint256_from_str", "sha256", "bytearray", "TaggedHash", "callable", "CTxOut", "SegwitV0SignatureMsg", "isinstance", "super", "FindAndDelete", "compute_xonly_pubkey", "taproot_tree_helper", "CScriptInvalidError", "LegacySignatureMsg", "TaprootInfo", "dict", "int", "repr", "next", "BIP341_sha_sequences", "BIP341_sha_scriptpubkeys", "TaprootSignatureMsg"], "class_names": ["CScriptTruncatedPushDataError", "CScriptInvalidError", "CScript", "CScriptOp", "CScriptNum", "TestFrameworkScript"], "class_method_calls": ["self.assertEqual", "unittest.TestCase", "other.value", "txTo.vout", "txin.scriptSig", "txtmp.vin", "self.value", "txtmp.vout", "u.nValue", "i.nSequence", "CScriptNum.decode", "opcode.is_small_int", "CScriptOp.encode_op_pushdata", "txTo.nVersion", "i.prevout", "self.data", "v.bit_length", "err.data", "opcode.decode_op_n", "txTo.nLockTime", "script.raw_iter", "r.append", "CScriptOp.encode_op_n", "u.scriptPubKey", "_opcode_instances.append", "txtmp.serialize_without_witness", "self.raw_iter", "CScriptNum.encode", "o.hex", "struct.pack", "o.serialize", "txTo.vin", "cls.__coerce_instance", "OPCODE_NAMES.update", "ops.append", "encoded_v.to_bytes", "obj.value"]}, "script_util.py": {"libraries": ["test_framework.script.hash160", "test_framework.script.sha256", "test_framework.script.OP_HASH160", "test_framework.script.CScriptOp", "test_framework.script.CScript", "test_framework.script.OP_DUP", "test_framework.script.OP_0", "test_framework.script.OP_EQUALVERIFY", "test_framework.script.OP_EQUAL", "test_framework.script.OP_CHECKMULTISIG", "test_framework.script.OP_RETURN", "test_framework.script.OP_CHECKSIG"], "function_names": ["scripthash_to_p2sh_script", "key_to_p2pkh_script", "script_to_p2wsh_script", "key_to_p2wpkh_script", "keyhash_to_p2pkh_script", "key_to_p2sh_p2wpkh_script", "output_key_to_p2tr_script", "keys_to_multisig_script", "key_to_p2pk_script", "check_script", "check_key", "script_to_p2sh_p2wsh_script", "script_to_p2sh_script", "program_to_witness_script"], "function_calls": ["len", "scripthash_to_p2sh_script", "sha256", "CScript", "keyhash_to_p2pkh_script", "check_script", "check_key", "isinstance", "script_to_p2sh_script", "program_to_witness_script", "hash160"], "class_names": [], "class_method_calls": ["CScriptOp.encode_op_n", "bytes.fromhex"]}, "segwit_addr.py": {"libraries": ["enum.Enum", "unittest"], "function_names": ["bech32_hrp_expand", "convertbits", "test_python_bech32", "test_segwit_encode_decode", "decode_segwit_address", "bech32_decode", "bech32_create_checksum", "bech32_encode", "encode_segwit_address", "bech32_verify_checksum", "bech32_polymod"], "function_calls": ["bech32_hrp_expand", "range", "len", "convertbits", "test_python_bech32", "decode_segwit_address", "any", "all", "bech32_decode", "bech32_create_checksum", "bech32_encode", "encode_segwit_address", "bech32_verify_checksum", "ord", "bech32_polymod"], "class_names": ["Encoding", "TestFrameworkScript"], "class_method_calls": ["ret.append", "unittest.TestCase", "CHARSET.find", "self.assertEqual", "bech.lower", "bech.rfind", "bech.upper", "Encoding.BECH32M", "Encoding.BECH32"]}, "siphash.py": {"libraries": [], "function_names": ["siphash256", "rotl64", "siphash_round", "siphash"], "function_calls": ["type", "rotl64", "siphash_round", "siphash"], "class_names": [], "class_method_calls": ["num.to_bytes"]}, "socks5.py": {"libraries": ["socket", "logging", "queue", "threading"], "function_names": ["__init__", "run", "recvall", "start", "stop", "__repr__", "handle"], "function_calls": ["len", "Socks5Command", "str", "Socks5Connection", "recvall", "IOError", "bytearray"], "class_names": ["Socks5Configuration", "Socks5Command", "Socks5Connection", "AddressType", "Socks5Server", "Command"], "class_method_calls": ["self.conn", "AddressType.DOMAINNAME", "self.thread", "s.recv", "self.unauth", "conf.addr", "thread.start", "threading.Thread", "rv.extend", "self.conf", "self.atyp", "self.running", "self.port", "queue.Queue", "logger.info", "conn.handle", "socket.AF_INET", "s.connect", "socket.socket", "self.s", "socket.SOL_SOCKET", "logger.exception", "self.queue", "self.username", "self.addr", "self.af", "conf.af", "logging.getLogger", "self.auth", "self.password", "self.serv", "socket.SO_REUSEADDR", "thread.daemon", "AddressType.IPV6", "self.run", "self.cmd", "s.close", "Command.CONNECT", "AddressType.IPV4"]}, "test_framework.py": {"libraries": ["util.p2p_port", "zmq", "tempfile", "logging", "util.MAX_NODES", "configparser", "enum.Enum", "address.create_deterministic_address_bcrt1_p2tr_op_true", "random", "time", "test_node.TestNode", "util.PortSeed", "util.get_datadir_path", "sqlite3", "p2p.NetworkThread", "subprocess", "typing.List", "authproxy.JSONRPCException", "util.assert_equal", "argparse", "pdb", "shutil", "util.check_json_precision", "bcc", "os", "platform", "util.wait_until_helper", "util.initialize_datadir", "re", "sys"], "function_names": ["skip_if_platform_not_posix", "main", "skip_if_no_previous_releases", "is_bdb_compiled", "skip_if_no_bpf_permissions", "is_specified_wallet_compiled", "setup_nodes", "sync_all", "skip_if_no_bitcoind_tracepoints", "skip_if_no_cli", "get_peer_ids", "no_op", "is_wallet_compiled", "generatetodescriptor", "skip_if_no_py3_zmq", "skip_if_no_bitcoin_util", "__init__", "is_zmq_compiled", "skip_if_platform_not_linux", "is_usdt_compiled", "add_options", "skip_if_no_py_sqlite3", "_initialize_chain", "cache_path", "sync_mempools", "skip_if_no_bitcoind_zmq", "setup", "sync_blocks", "generateblock", "wait_until", "_initialize_chain_clean", "skip_if_no_wallet_tool", "import_deterministic_coinbase_privkeys", "stop_nodes", "skip_test_if_missing_module", "set_test_params", "skip_if_no_bdb", "is_cli_compiled", "is_bitcoin_util_compiled", "start_nodes", "start_node", "add_nodes", "init_wallet", "is_syscall_sandbox_compiled", "skip_if_no_sqlite", "setup_network", "shutdown", "split_network", "join_network", "run_test", "_start_logging", "has_previous_releases", "is_wallet_tool_compiled", "is_sqlite_compiled", "disconnect_nodes_helper", "skip_if_no_python_bcc", "is_external_signer_compiled", "restart_node", "disconnect_nodes", "__new__", "stop_node", "wait_for_node_exit", "generate", "skip_if_no_external_signer", "skip_if_no_wallet", "get_bin_from_version", "generatetoaddress", "setup_chain", "connect_nodes", "add_wallet_options", "parse_args"], "function_calls": ["range", "set", "TypeError", "print", "wait_until_helper", "get_peer_ids", "p2p_port", "len", "all", "create_deterministic_address_bcrt1_p2tr_op_true", "enumerate", "cache_path", "check_json_precision", "sync_fun", "open", "NetworkThread", "sum", "get_datadir_path", "TestNode", "assert_equal", "initialize_datadir", "disconnect_nodes_helper", "hasattr", "super", "list", "int", "str", "get_bin_from_version", "AssertionError", "bool", "SkipTest"], "class_names": ["BitcoinTestFramework", "BitcoinTestMetaClass", "SkipTest", "TestStatus"], "class_method_calls": ["generator.generatetoaddress", "rpc_handler.setLevel", "self.message", "self.disable_syscall_sandbox", "x.getpeerinfo", "self.default_wallet_name", "self.is_bitcoin_util_compiled", "self.has_previous_releases", "platform.system", "self.connect_nodes", "r.getrawmempool", "ch.setLevel", "os.getpid", "self.bind_to_localhost_only", "shutil.rmtree", "self.setup_clean_chain", "rpc_logger.handlers", "self.wallet_names", "node.start", "node_b.index", "self.is_wallet_tool_compiled", "self.is_cli_compiled", "self.start_node", "sys.maxsize", "os.geteuid", "self.is_wallet_compiled", "time.sleep", "parser.add_argument", "group.add_argument", "formatter.converter", "logging.FileHandler", "self.wait_until", "os.path", "shutil.copytree", "self.is_zmq_compiled", "best_hash.count", "node_a.disconnectnode", "test_node_i.version_is_at_least", "logging.StreamHandler", "self.extra_args", "node.stop_node", "self.shutdown", "cache_node.wait_for_rpc_connection", "h.close", "pdb.set_trace", "sys.stdout", "os.remove", "TestNode.PRIV_KEYS", "n.submitblock", "n.getblockchaininfo", "result.append", "self.add_nodes", "self._initialize_chain", "rpc_logger.setLevel", "self.add_options", "TestStatus.SKIPPED", "e.message", "to_connection.getpeerinfo", "self.setup", "self.sync_all", "self.success", "self._initialize_chain_clean", "self.skip_if_no_bdb", "h.flush", "self.import_deterministic_coinbase_privkeys", "e.error", "self.nodes", "fh.setFormatter", "self.skip_test_if_missing_module", "rpc_logger.addHandler", "tempfile.mkdtemp", "self.options", "self.set_test_params", "self.num_nodes", "logging.DEBUG", "time.gmtime", "node.rpc", "sys.exit", "logging.Formatter", "self._requires_wallet", "pool.count", "self.chain", "self.config", "configparser.ConfigParser", "generator.generate", "n.importprivkey", "cache_node.setmocktime", "coverage.write_all_rpc_commands", "generator.generateblock", "self.is_external_signer_compiled", "self.disable_autoconnect", "self.skip_if_no_cli", "self.setup_network", "fh.setLevel", "from_connection.addnode", "PortSeed.n", "subprocess.CalledProcessError", "os.getcwd", "cache_node.getblockchaininfo", "self.is_bdb_compiled", "self.is_usdt_compiled", "self.disconnect_nodes", "self.no_op", "os.pathsep", "self.wallet_data_filename", "self.skip_if_no_sqlite", "self.is_syscall_sandbox_compiled", "self.supports_cli", "os.environ", "self.stop_nodes", "os.getenv", "TestStatus.PASSED", "self.setup_nodes", "self.setup_chain", "self.run_test", "n.createwallet", "node_a.index", "re.sub", "rpc_logger.removeHandler", "x.getbestblockhash", "self.sync_blocks", "os.listdir", "self.log", "parser.add_mutually_exclusive_group", "self.network_thread", "self.rpc_timeout", "node.wait_for_rpc_connection", "os.makedirs", "self.generate", "random.randrange", "config.read_file", "os.rmdir", "n.get_deterministic_priv_key", "self.sync_mempools", "ch.setFormatter", "test_node_i.replace_in_config", "node.cleanup_on_exit", "parser.parse_args", "time.time", "self.init_wallet", "TestStatus.FAILED", "k.address", "r.syncwithvalidationinterfacequeue", "random.seed", "self.stop_node", "from_connection.getpeerinfo", "self.generatetoaddress", "logging.getLogger", "argparse.ArgumentParser", "cache_node.getblockheader", "generator.generatetodescriptor", "self._start_logging", "node.wait_until_stopped", "self.is_sqlite_compiled", "cache_node.getbestblockhash", "self.parse_args", "os.name", "e.output", "self.start_nodes"]}, "test_node.py": {"libraries": ["util.p2p_port", "collections", "shlex", "http.client", "tempfile", "logging", "util.MAX_NODES", "enum.Enum", "util.get_rpc_proxy", "time", "errno", "subprocess", "authproxy.JSONRPCException", "util.append_config", "urllib.parse", "contextlib", "util.assert_equal", "util.get_auth_cookie", "util.EncodeDecimal", "util.delete_cookie_file", "util.rpc_url", "pathlib.Path", "json", "os", "descriptors.descsum_create", "p2p.P2P_SUBVERSION", "util.wait_until_helper", "decimal", "re", "sys"], "function_names": ["batch", "get_deterministic_priv_key", "wait_for_cookie_credentials", "_stop_perf", "get_request", "get_wallet_rpc", "profile_with_perf", "__call__", "version_is_at_least", "num_test_p2p_connections", "generatetodescriptor", "add_outbound_p2p_connection", "createwallet_passthrough", "__init__", "add_p2p_connection", "debug_log_bytes", "disconnect_p2ps", "_node_msg", "replace_in_config", "addmultisigaddress", "is_node_stopped", "__del__", "generateblock", "_raise_assertion_error", "debug_log_path", "arg_to_cli", "importprivkey", "assert_start_raises_init_error", "test_success", "createwallet", "wait_until_stopped", "assert_debug_log", "chain_path", "wait_for_rpc_connection", "_start_perf", "wait_for_debug_log", "generate", "stop_node", "start", "send_cli", "__getattr__", "importaddress", "generatetoaddress", "addconnection_callback", "importpubkey"], "function_calls": ["range", "JSONRPCException", "print", "wait_until_helper", "p2p_port", "len", "get_auth_cookie", "descsum_create", "rpc_url", "Path", "getattr", "open", "RPCOverloadWrapper", "AddressKeyPair", "arg_to_cli", "tuple", "get_rpc_proxy", "TestNodeCLI", "delete_cookie_file", "assert_equal", "isinstance", "request", "append_config", "test_success", "FailedToStartError", "self", "dict", "int", "str", "AssertionError", "TestNodeCLIAttr"], "class_names": ["TestNodeCLI", "TestNode", "ErrorMatch", "TestNodeCLIAttr", "RPCOverloadWrapper", "FailedToStartError"], "class_method_calls": ["reqs.append", "subprocess.call", "conf.read", "self.process", "self.rpchost", "decimal.Decimal", "kwargs.items", "self.url", "self.use_cli", "sys.platform", "self.perf_subprocesses", "self.stderr_dir", "self.wait_until_stopped", "self.stderr", "self.debug_log_bytes", "time.sleep", "subprocess.Popen", "process.communicate", "self.cleanup_on_exit", "os.path", "subp.stderr", "errno.ECONNREFUSED", "self.version_is_at_least", "self.extra_args", "self.importdescriptors", "decimal.InvalidOperation", "dl.read", "p2p_conn.wait_until", "self.createmultisig", "e.errno", "self.chain_path", "contextlib.contextmanager", "rpc.getmempoolinfo", "json.loads", "self.datadir", "p2p_conn.sync_with_ping", "self.p2ps", "self._stop_perf", "self.running", "self._raise_assertion_error", "self.command", "log.decode", "p2p_conn.wait_for_connect", "self.is_cli", "dl.tell", "p2p_conn.is_connected", "cli.input", "p.peer_disconnect", "log_stderr.seek", "self.index", "self.debug_log_path", "p2p_conn.message_count", "dl.seek", "subp.args", "self.num_test_p2p_connections", "e.error", "re.fullmatch", "results.append", "conf_data.replace", "errno.ETIMEDOUT", "self.options", "self.bitcoinconf", "self._start_perf", "match.groups", "self.PRIV_KEYS", "self.cli", "self.getwalletinfo", "self.input", "p2p_conn.wait_for_verack", "log.splitlines", "self.binary", "shlex.quote", "self.chain", "subprocess.DEVNULL", "subprocess.TimeoutExpired", "self.descriptors", "subp.wait", "re.search", "subprocess.CalledProcessError", "conf.write", "self.addconnection", "ErrorMatch.PARTIAL_REGEX", "re.MULTILINE", "subp.terminate", "tempfile.NamedTemporaryFile", "self.args", "json.dumps", "os.environ", "self.getpeerinfo", "os.getenv", "self.cwd", "self.p2p_conn_index", "re.match", "json.JSONDecodeError", "http.client", "self.version", "cli_stdout.rstrip", "ErrorMatch.FULL_REGEX", "self.log", "self._node_msg", "self.rpc", "rpc.getblockcount", "self.rpc_timeout", "re.escape", "self.get_deterministic_priv_key", "process.poll", "self.stdout", "urllib.parse", "collections.namedtuple", "subprocess.PIPE", "time.time", "log_stderr.read", "cli.options", "ErrorMatch.FULL_TEXT", "self.stop", "self.timeout_factor", "self.stdout_dir", "self.start", "self.is_node_stopped", "self.generatetoaddress", "p2p_conn.peer_accept_connection", "logging.getLogger", "self.rpc_connected", "self.start_perf", "self.__getattr__", "p2p_conn.peer_connect", "self.coverage_dir"]}, "test_shell.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework"], "function_names": ["set_test_params", "add_options", "__new__", "reset", "__setattr__", "__getattr__", "shutdown", "setup", "run_test"], "function_calls": ["setattr", "print", "KeyError", "getattr", "hasattr", "super"], "class_names": ["__TestShell", "TestShell"], "class_method_calls": ["self.options", "self.num_nodes", "kwargs.items", "TestShell.instance", "self.running", "self.instance", "self.add_wallet_options", "TestShell.__TestShell"]}, "util.py": {"libraries": ["typing.Callable", "authproxy.AuthServiceProxy", "logging", "inspect", "unittest", "random", "time", "decimal.ROUND_DOWN", "decimal.Decimal", "base64.b64encode", "authproxy.JSONRPCException", "script.OP_RETURN", "script.CScript", "messages.CTxOut", "subprocess.CalledProcessError", "json", "os", "hashlib", "typing.Optional", "re"], "function_names": ["random_bytes", "assert_approx", "get_fee", "assert_greater_than", "check_node_connections", "find_output", "EncodeDecimal", "assert_fee_amount", "wait_until_helper", "satoshi_round", "gen_return_txouts", "p2p_port", "count_bytes", "assert_raises_process_error", "find_vout_for_address", "get_auth_cookie", "rpc_url", "check_json_precision", "rpc_port", "test_modinv", "sha256sum_file", "get_datadir_path", "modinv", "get_rpc_proxy", "delete_cookie_file", "assert_equal", "assert_is_hash_string", "try_rpc", "str_to_b64str", "initialize_datadir", "write_config", "assert_greater_than_or_equal", "mine_large_block", "softfork_active", "append_config", "set_node_times", "create_lots_of_big_transactions", "assert_array_result", "assert_raises", "ceildiv", "assert_raises_message", "assert_raises_rpc_error", "assert_is_hex_string"], "function_calls": ["range", "bytes", "TypeError", "get_fee", "fun", "pow", "float", "gen_return_txouts", "ValueError", "RuntimeError", "p2p_port", "len", "get_auth_cookie", "b64encode", "predicate", "CScript", "rpc_port", "open", "assert_raises_message", "sum", "get_datadir_path", "modinv", "AuthServiceProxy", "assert_equal", "try_rpc", "CTxOut", "isinstance", "create_lots_of_big_transactions", "Decimal", "int", "any", "str", "repr", "ceildiv", "AssertionError", "write_config", "type"], "class_names": ["PortSeed", "TestFrameworkUtil"], "class_method_calls": ["self.assertEqual", "unittest.TestCase", "re.match", "coverage.AuthServiceProxyWrapper", "h.digest", "line.split", "f.read", "coverage.get_filename", "inspect.getsource", "f.write", "node.sendrawtransaction", "h.update", "line.startswith", "os.makedirs", "json.loads", "hashlib.sha256", "os.remove", "node.setmocktime", "logger.error", "rpchost.split", "random.getrandbits", "tx.vout", "logger.debug", "utxos.pop", "to_match.items", "txout.serialize", "e.returncode", "time.time", "tx.serialize", "test_framework.generate", "PortSeed.n", "node.getnetworkinfo", "userpass.split", "node.getrawtransaction", "string.encode", "time.sleep", "logging.getLogger", "bytearray.fromhex", "node.getdeploymentinfo", "json.dumps", "e.error", "os.path", "os.getenv", "mini_wallet.create_self_transfer", "e.output", "expected.items", "txids.append", "node.testmempoolaccept"]}, "wallet.py": {"libraries": ["test_framework.key.ECKey", "test_framework.address.address_to_scriptpubkey", "test_framework.script.taproot_construct", "test_framework.key.compute_xonly_pubkey", "test_framework.script_util.key_to_p2wpkh_script", "enum.Enum", "test_framework.address.key_to_p2pkh", "test_framework.messages.COIN", "test_framework.messages.CTxIn", "copy.deepcopy", "test_framework.blocktools.COINBASE_MATURITY", "test_framework.script.OP_RETURN", "test_framework.address.create_deterministic_address_bcrt1_p2tr_op_true", "test_framework.script.LegacySignatureHash", "decimal.Decimal", "test_framework.script_util.key_to_p2pkh_script", "test_framework.messages.CTxInWitness", "test_framework.messages.CTxOut", "test_framework.script_util.key_to_p2pk_script", "typing.List", "test_framework.script.CScript", "test_framework.script.OP_NOP", "test_framework.util.assert_greater_than_or_equal", "test_framework.util.assert_equal", "test_framework.descriptors.descsum_create", "test_framework.script.OP_TRUE", "test_framework.address.key_to_p2sh_p2wpkh", "test_framework.address.key_to_p2wpkh", "test_framework.script.LEAF_VERSION_TAPSCRIPT", "test_framework.messages.COutPoint", "typing.Any", "test_framework.script_util.key_to_p2sh_p2wpkh_script", "test_framework.address.output_key_to_p2tr", "test_framework.script.SIGHASH_ALL", "typing.Optional", "test_framework.messages.CTransaction"], "function_names": ["send_to", "create_self_transfer_chain", "get_balance", "sign_tx", "_bulk_tx", "send_self_transfer", "send_self_transfer_multi", "send_self_transfer_chain", "get_utxo", "rescan_utxos", "__init__", "get_scriptPubKey", "get_utxos", "sendrawtransaction", "getnewdestination", "get_address", "create_self_transfer", "create_self_transfer_multi", "get_descriptor", "_create_utxo", "generate", "scan_tx", "scan_txs"], "function_calls": ["range", "sorted", "bytes", "key_to_p2pkh_script", "key_to_p2wpkh", "COutPoint", "key_to_p2pk_script", "CTransaction", "CTxInWitness", "address_to_scriptpubkey", "ECKey", "len", "key_to_p2pkh", "CScript", "LegacySignatureHash", "create_deterministic_address_bcrt1_p2tr_op_true", "descsum_create", "bytearray", "sum", "output_key_to_p2tr", "key_to_p2wpkh_script", "key_to_p2sh_p2wpkh_script", "assert_equal", "CTxOut", "key_to_p2sh_p2wpkh", "reversed", "isinstance", "assert_greater_than_or_equal", "compute_xonly_pubkey", "filter", "list", "deepcopy", "Decimal", "int", "zip", "next", "CTxIn", "taproot_construct", "type"], "class_names": ["MiniWallet", "MiniWalletMode"], "class_method_calls": ["i.scriptWitness", "tx.getwtxid", "self.sendrawtransaction", "self._priv_key", "from_node.decoderawtransaction", "tx.rehash", "self._create_utxo", "tx.get_weight", "self.get_descriptor", "self._bulk_tx", "pub_key.get_bytes", "self._address", "self.sign_tx", "key.get_pubkey", "self._utxos", "self.create_self_transfer", "self._scriptPubKey", "tx.vout", "self._mode", "tx.vin", "MiniWalletMode.ADDRESS_OP_TRUE", "chain.append", "from_node.sendrawtransaction", "tx.serialize", "self._test_node", "key.generate", "tx.pop", "tap.scriptPubKey", "self.create_self_transfer_chain", "MiniWalletMode.RAW_OP_TRUE", "key.get_bytes", "self._internal_key", "i.scriptSig", "mempool.items", "self.rescan_utxos", "tx.wit", "tap.output_pubkey", "self.create_self_transfer_multi", "tx.nLockTime", "self.get_utxo", "MiniWalletMode.RAW_P2PK", "self.scan_tx"]}, "wallet_util.py": {"libraries": ["collections.namedtuple", "test_framework.script_util.script_to_p2wsh_script", "test_framework.script_util.key_to_p2pkh_script", "test_framework.address.script_to_p2sh_p2wsh", "test_framework.key.ECKey", "test_framework.script_util.script_to_p2sh_script", "test_framework.address.key_to_p2sh_p2wpkh", "test_framework.address.script_to_p2sh", "test_framework.script_util.keys_to_multisig_script", "test_framework.script_util.key_to_p2wpkh_script", "test_framework.address.script_to_p2wsh", "test_framework.address.key_to_p2pkh", "test_framework.address.key_to_p2wpkh", "test_framework.address.byte_to_base58"], "function_names": ["get_multisig", "get_generate_key", "test_address", "get_key", "bytes_to_wif", "generate_wif_key"], "function_calls": ["range", "key_to_p2wpkh", "key_to_p2pkh_script", "bytes_to_wif", "namedtuple", "ECKey", "key_to_p2pkh", "script_to_p2wsh_script", "Key", "key_to_p2wpkh_script", "script_to_p2wsh", "byte_to_base58", "key_to_p2sh_p2wpkh", "script_to_p2sh_script", "Multisig", "keys_to_multisig_script", "script_to_p2sh", "AssertionError", "script_to_p2sh_p2wsh"], "class_names": [], "class_method_calls": ["k.generate", "eckey.get_bytes", "witness_script.hex", "kwargs.items", "k.is_compressed", "pubkeys.append", "addr_info.keys", "node.getaddressinfo", "node.getnewaddress", "addrs.append", "eckey.get_pubkey", "script_code.hex", "node.dumpprivkey", "k.get_bytes", "eckey.generate"]}, "test_runner.py": {"libraries": ["pprint", "json", "os", "argparse", "difflib", "logging", "configparser", "subprocess", "sys"], "function_names": ["parse_output", "main", "bctest", "bctester"], "function_calls": ["parse_output", "dict", "bctest", "bctester", "main", "NotImplementedError", "open"], "class_names": [], "class_method_calls": ["bytes.fromhex", "args.verbose", "logging.DEBUG", "logging.ERROR", "f.read", "outputData.splitlines", "sys.exit", "config.optionxform", "json.loads", "config.read_file", "config.items", "pprint.pformat", "configparser.ConfigParser", "proc.communicate", "difflib.context_diff", "logging.error", "parser.parse_args", "subprocess.PIPE", "a.strip", "logging.basicConfig", "subprocess.Popen", "parser.add_argument", "failed_testcases.append", "argparse.ArgumentParser", "proc.returncode", "os.path", "logging.info"]}, "tool_signet_miner.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.key.ECKey", "test_framework.util.assert_equal", "os.path", "test_framework.script_util.key_to_p2wpkh_script", "subprocess", "test_framework.wallet_util.bytes_to_wif", "time", "sys"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["key_to_p2wpkh_script", "int", "assert_equal", "bytes_to_wif", "SignetMinerTest", "ECKey"], "class_names": ["SignetMinerTest"], "class_method_calls": ["subprocess.run", "self.options", "self.num_nodes", "self.skip_if_no_wallet", "self.add_wallet_options", "node.getblockcount", "node.cli", "node.importprivkey", "challenge.hex", "self.chain", "privkey.set", "self.config", "sys.executable", "self.setup_clean_chain", "node.getnewaddress", "self.skip_if_no_cli", "self.skip_if_no_bitcoin_util", "time.time", "subprocess.STDOUT", "privkey.get_pubkey", "os.path", "self.nodes", "self.extra_args"]}, "tool_wallet.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "textwrap", "hashlib", "subprocess", "collections.OrderedDict", "stat"], "function_names": ["assert_tool_output", "test_dump_createfromdump", "assert_is_sqlite", "write_dump", "bitcoin_wallet_process", "test_tool_wallet_info_after_transaction", "wallet_timestamp", "get_expected_info_output", "add_options", "assert_raises_tool_error", "read_dump", "wallet_permissions", "test_tool_wallet_info", "skip_test_if_missing_module", "set_test_params", "wallet_shasum", "log_wallet_timestamp_comparison", "test_invalid_tool_commands_and_args", "assert_dump", "assert_is_bdb", "run_test", "test_tool_wallet_create_on_existing_wallet", "test_chainless_conflicts", "test_getwalletinfo_on_different_wallet", "test_salvage", "do_tool_createfromdump"], "function_calls": ["len", "list", "iter", "OrderedDict", "oct", "ToolWalletTest", "assert_equal", "memoryview", "open", "bytearray"], "class_names": ["ToolWalletTest"], "class_method_calls": ["wallet.sendrawtransaction", "f.read", "self.skip_if_no_wallet", "self.default_wallet_name", "h.update", "self.write_dump", "wallet.signrawtransactionwithwallet", "self.wallet_path", "def_wallet.sendtoaddress", "self.setup_clean_chain", "stat.S_IRUSR", "self.start_node", "self.skip_if_no_wallet_tool", "wallet.gettransaction", "e.items", "self.test_tool_wallet_info", "subprocess.Popen", "f.readinto", "os.path", "self.wallet_permissions", "f.write", "self.add_wallet_options", "orig_dump.copy", "self.wallet_shasum", "row.split", "self.test_getwalletinfo_on_different_wallet", "p.poll", "stderr.strip", "self.test_invalid_tool_commands_and_args", "self.assert_is_bdb", "os.lstat", "self.assert_tool_output", "hashlib.sha1", "self.nodes", "self.bitcoin_wallet_process", "self.read_dump", "bytes.fromhex", "self.options", "self.num_nodes", "args.append", "self.assert_raises_tool_error", "self.wallet_timestamp", "received.copy", "default_args.append", "self.get_expected_info_output", "wallet.getnewaddress", "self.chain", "self.config", "self.test_dump_createfromdump", "self.test_chainless_conflicts", "dump_data.copy", "self.is_bdb_compiled", "wallet.send", "self.wallet_data_filename", "expected.copy", "p.communicate", "self.restart_node", "f.seek", "stat.S_IWUSR", "wallet.sendtoaddress", "self.log", "self.test_tool_wallet_info_after_transaction", "self.rpc_timeout", "self.generate", "row.strip", "self.test_tool_wallet_create_on_existing_wallet", "self.log_wallet_timestamp_comparison", "dump.items", "textwrap.dedent", "subprocess.PIPE", "self.assert_is_sqlite", "self.test_salvage", "h.hexdigest", "self.do_tool_createfromdump", "self.stop_node", "self.is_sqlite_compiled", "os.chmod"]}, "wallet_abandonconflict.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["len", "Decimal", "assert_equal", "next", "AbandonConflictTest", "assert_raises_rpc_error"], "class_names": ["AbandonConflictTest"], "class_method_calls": ["self.num_nodes", "alice.createrawtransaction", "args.append", "self.skip_if_no_wallet", "bob.getnewaddress", "self.default_wallet_name", "self.log", "self.add_wallet_options", "alice.listsinceblock", "alice.abandontransaction", "alice.sendtoaddress", "self.connect_nodes", "bob.gettransaction", "self.generate", "alice.gettransaction", "alice.getbalance", "inputs.append", "self.sync_mempools", "alice.getbalances", "bob.listtransactions", "double_spend.keys", "alice.listunspent", "alice.listtransactions", "self.disconnect_nodes", "self.nodes", "alice.getnewaddress", "self.restart_node", "self.extra_args", "alice.signrawtransactionwithwallet"]}, "wallet_address_types.py": {"libraries": ["itertools", "test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.descriptors.descsum_create", "test_framework.descriptors.descsum_check", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_greater_than", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "test_address", "test_change_output_type", "test_desc", "setup_network", "get_balances", "run_test"], "function_calls": ["range", "len", "Decimal", "descsum_check", "assert_greater_than", "descsum_create", "enumerate", "assert_equal", "AddressTypeTest", "assert_raises_rpc_error"], "class_names": ["AddressTypeTest"], "class_method_calls": ["self.options", "self.get_balances", "self.num_nodes", "args.append", "self.skip_if_no_wallet", "self.log", "self.add_wallet_options", "itertools.product", "info.get", "self.connect_nodes", "dict.fromkeys", "self.generate", "self.extra_args", "self.test_change_output_type", "self.sync_mempools", "self.test_desc", "self.sync_all", "do_multisigs.append", "self.supports_cli", "self.test_address", "self.nodes", "self.setup_nodes"]}, "wallet_avoid_mixing_output_types.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "random", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["is_bech32m_address", "skip_test_if_missing_module", "add_options", "set_test_params", "is_bech32_address", "is_legacy_address", "generate_payment_values", "make_payment", "is_same_type", "is_p2sh_segwit_address", "run_test"], "function_calls": ["is_bech32m_address", "sum", "range", "sorted", "is_bech32_address", "is_legacy_address", "generate_payment_values", "zip", "AddressInputTypeGrouping", "is_same_type", "is_p2sh_segwit_address"], "class_names": ["AddressInputTypeGrouping"], "class_method_calls": ["B.sendtoaddress", "self.num_nodes", "B.getnewaddress", "self.skip_if_no_wallet", "self.log", "self.add_wallet_options", "self.generate", "self.make_payment", "inputs.append", "node.getaddressinfo", "self.setup_clean_chain", "random.choice", "A.getnewaddress", "node.getrawtransaction", "random.sample", "random.randint", "self.skip_if_no_sqlite", "A.sendtoaddress", "self.nodes", "self.extra_args"]}, "wallet_avoidreuse.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.address.address_to_scriptpubkey", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_approx"], "function_names": ["test_immutable", "skip_test_if_missing_module", "add_options", "set_test_params", "count_unspent", "test_persistence", "test_all_destination_groups_are_used", "assert_unspent", "assert_balances", "test_change_remains_change", "test_sending_from_reused_address_fails", "test_sending_from_reused_address_without_avoid_reuse", "test_getbalances_used", "run_test", "reset_balance", "test_full_destination_group_is_preferred"], "function_calls": ["range", "assert_approx", "len", "count_unspent", "assert_unspent", "assert_balances", "assert_equal", "AvoidReuseTest", "assert_raises_rpc_error", "address_to_scriptpubkey", "reset_balance"], "class_names": ["AvoidReuseTest"], "class_method_calls": ["self.test_getbalances_used", "self.options", "self.test_sending_from_reused_address_fails", "node.sendtoaddress", "self.num_nodes", "mine.items", "self.test_immutable", "node.getbalance", "self.skip_if_no_wallet", "self.log", "self.test_sending_from_reused_address_without_avoid_reuse", "self.add_wallet_options", "self.connect_nodes", "node.getbalances", "self.generate", "node.getaddressinfo", "node.getnewaddress", "node.listunspent", "self.test_all_destination_groups_are_used", "self.test_change_remains_change", "self.test_full_destination_group_is_preferred", "node.listtransactions", "w.unloadwallet", "self.test_persistence", "self.nodes", "self.restart_node", "logical_tx.get", "w.getwalletinfo", "w.setwalletflag", "self.extra_args"]}, "wallet_backup.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "shutil", "random.randint", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["restore_invalid_wallet", "skip_test_if_missing_module", "set_test_params", "add_options", "start_three", "restore_wallet_existent_name", "init_three", "stop_three", "do_one_round", "one_send", "run_test", "setup_network", "restore_nonexistent_wallet", "erase_three"], "function_calls": ["range", "list", "Decimal", "randint", "assert_equal", "assert_raises_rpc_error", "open", "WalletBackupTest"], "class_names": ["WalletBackupTest"], "class_method_calls": ["self.options", "self.num_nodes", "self.skip_if_no_wallet", "self.stop_three", "node.restorewallet", "self.default_wallet_name", "self.log", "self.sync_blocks", "self.add_wallet_options", "self.connect_nodes", "self.rpc_timeout", "self.generate", "res2_rpc.getbalance", "os.remove", "self.init_three", "node.datadir", "self.erase_three", "self.extra_args", "self.restore_wallet_existent_name", "self.chain", "res1_rpc.getbalance", "self.sync_mempools", "shutil.rmtree", "self.restore_invalid_wallet", "self.setup_clean_chain", "self.restore_nonexistent_wallet", "self.init_wallet", "self.start_node", "self.sync_all", "self.start_three", "self.stop_node", "self.wallet_data_filename", "self.do_one_round", "self.one_send", "os.path", "self.nodes", "res0_rpc.getbalance", "self.setup_nodes"]}, "wallet_backwards_compatibility.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "test_framework.descriptors.descsum_create", "test_framework.util.assert_raises_rpc_error", "shutil", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "nodes_wallet_dir", "setup_nodes", "run_test"], "function_calls": ["len", "int", "descsum_create", "assert_equal", "hasattr", "assert_raises_rpc_error", "BackwardsCompatibilityTest"], "class_names": ["BackwardsCompatibilityTest"], "class_method_calls": ["self.options", "node_master.sendtoaddress", "node_v16.datadir", "self.num_nodes", "node_miner.sendtoaddress", "node_master.unloadwallet", "node.loadwallet", "self.skip_if_no_wallet", "os.listdir", "self.default_wallet_name", "self.log", "node_v16.get_wallet_rpc", "node.get_wallet_rpc", "self.add_wallet_options", "wallet.rpc", "node_master.loadwallet", "shutil.copyfile", "self.skip_if_no_previous_releases", "self.generate", "node.version", "os.remove", "node.datadir", "wallet.listtransactions", "wallet.getnewaddress", "self.add_nodes", "node_master.createwallet", "self.sync_mempools", "shutil.rmtree", "self.setup_clean_chain", "self.wallet_names", "wallet.getwalletinfo", "node_v17.index", "node_master.bumpfee", "node_v16.getblockchaininfo", "self.nodes_wallet_dir", "node_v18.get_wallet_rpc", "wallet.validateaddress", "node_v17.loadwallet", "node_miner.getnewaddress", "node_v19.rpc", "self.start_node", "wallet.getaddressinfo", "self.is_bdb_compiled", "node_v19.get_wallet_rpc", "node_v19.datadir", "node_v19.unloadwallet", "self.stop_node", "self.generatetoaddress", "node_v17.assert_start_raises_init_error", "node_master.datadir", "self.import_deterministic_coinbase_privkeys", "node_master.get_wallet_rpc", "node_master.abandontransaction", "os.path", "node_v17.unloadwallet", "shutil.copytree", "self.nodes", "self.restart_node", "node_v17.get_wallet_rpc", "node_v19.loadwallet", "node_v18.rpc", "node_master.getnetworkinfo", "node_v17.rpc", "node_v16.index", "self.extra_args", "self.start_nodes", "node_v17.datadir"]}, "wallet_balance.py": {"libraries": ["struct", "test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.address.ADDRESS_BCRT1_UNSPENDABLE", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["create_transactions", "skip_test_if_missing_module", "set_test_params", "add_options", "run_test", "test_balances"], "function_calls": ["create_transactions", "range", "sum", "len", "Decimal", "WalletTest", "assert_equal", "max", "assert_raises_rpc_error", "test_balances"], "class_names": ["WalletTest"], "class_method_calls": ["self.options", "self.num_nodes", "args.append", "node.createrawtransaction", "self.skip_if_no_wallet", "txs.append", "self.sync_blocks", "self.default_wallet_name", "self.log", "self.add_wallet_options", "self.connect_nodes", "self.generate", "tx_orig.replace", "inputs.append", "node.signrawtransactionwithwallet", "node.getrawchangeaddress", "self.setup_clean_chain", "node.listunspent", "self.sync_all", "self.generatetoaddress", "self.no_op", "struct.pack", "self.nodes", "self.restart_node", "self.extra_args"]}, "wallet_basic.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.descriptors.descsum_create", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_array_result", "test_framework.util.find_vout_for_address", "itertools.product", "test_framework.util.assert_fee_amount", "test_framework.blocktools.COINBASE_MATURITY", "test_framework.wallet_util.test_address"], "function_names": ["check_fee_amount", "skip_test_if_missing_module", "set_test_params", "add_options", "run_test", "setup_network", "get_vsize"], "function_calls": ["product", "range", "len", "set", "Decimal", "find_vout_for_address", "test_address", "WalletTest", "str", "assert_array_result", "descsum_create", "assert_equal", "next", "assert_fee_amount", "frozenset", "assert_raises_rpc_error"], "class_names": ["WalletTest"], "class_method_calls": ["self.get_vsize", "self.options", "self.num_nodes", "self.skip_if_no_wallet", "self.sync_blocks", "self.default_wallet_name", "self.log", "txid_list.append", "self.add_wallet_options", "zeroconf_wallet.getbalances", "zeroconf_wallet.sendall", "self.connect_nodes", "self.generate", "self.extra_args", "inputs.append", "self.sync_mempools", "self.setup_clean_chain", "zeroconf_wallet.listunspent", "self.start_node", "self.sync_all", "self.stop_node", "self.generatetoaddress", "wo_wallet.listunspent", "self.no_op", "zeroconf_wallet.sendtoaddress", "self.check_fee_amount", "self.wait_until", "zeroconf_wallet.getnewaddress", "self.supports_cli", "self.nodes", "txns_to_send.append", "self.restart_node", "self.stop_nodes", "default_wallet.sendtoaddress", "wo_wallet.importdescriptors", "self.setup_nodes"]}, "wallet_bumpfee.py": {"libraries": ["test_framework.wallet.MiniWallet", "test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.get_fee", "test_framework.util.assert_equal", "test_framework.messages.MAX_BIP125_RBF_SEQUENCE", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_greater_than", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["test_segwit_bumpfee_succeeds", "test_bumpfee_with_descendant_fails", "test_invalid_parameters", "finish_psbtbumpfee", "test_change_script_match", "clear_mempool", "test_maxtxfee_fails", "test_no_more_inputs_fails", "test_notmine_bumpfee", "add_options", "test_small_output_with_feerate_succeeds", "test_rebumping", "test_rebumping_not_replaceable", "test_nonrbf_bumpfee_fails", "test_bumpfee_with_abandoned_descendant_succeeds", "test_bumpfee_metadata", "test_bumpfee_already_spent", "skip_test_if_missing_module", "set_test_params", "test_unconfirmed_not_spendable", "test_feerate_checks_replaced_outputs", "test_dust_to_fee", "test_watchonly_psbt", "run_test", "test_locked_wallet_fails", "test_settxfee", "spend_one_input", "get_change_address", "test_simple_bumpfee_succeeds"], "function_calls": ["test_segwit_bumpfee_succeeds", "range", "test_bumpfee_with_descendant_fails", "get_fee", "assert_greater_than", "finish_psbtbumpfee", "max", "test_change_script_match", "test_maxtxfee_fails", "abs", "test_no_more_inputs_fails", "BumpFeeTest", "len", "test_notmine_bumpfee", "test_small_output_with_feerate_succeeds", "test_rebumping", "test_rebumping_not_replaceable", "test_nonrbf_bumpfee_fails", "test_bumpfee_with_abandoned_descendant_succeeds", "test_bumpfee_metadata", "test_bumpfee_already_spent", "sum", "test_unconfirmed_not_spendable", "test_feerate_checks_replaced_outputs", "MiniWallet", "assert_equal", "test_dust_to_fee", "test_watchonly_psbt", "test_locked_wallet_fails", "test_settxfee", "list", "Decimal", "dict", "int", "test_simple_bumpfee_succeeds", "str", "spend_one_input", "next", "get_change_address", "AssertionError", "assert_raises_rpc_error"], "class_names": ["BumpFeeTest"], "class_method_calls": ["peer_node.sendtoaddress", "watcher.listunspent", "self.skip_if_no_wallet", "rbf_node.get_wallet_rpc", "watcher.decodepsbt", "self.connect_nodes", "watcher.getnewaddress", "peer_node.bumpfee", "watcher.gettransaction", "rbf_node.walletpassphrase", "watcher.psbtbumpfee", "node.getrawchangeaddress", "rbf_node.signrawtransactionwithwallet", "peer_node.getrawmempool", "self.setup_clean_chain", "watcher.importdescriptors", "rbf_node.getdescriptorinfo", "signer.walletprocesspsbt", "rbf_node.createrawtransaction", "miniwallet.get_address", "self.clear_mempool", "rbf_node.getnewaddress", "watcher.bumpfee", "rbf_node.getmempoolentry", "rbf_node.psbtbumpfee", "self.generateblock", "self.extra_args", "watcher.importmulti", "watcher.finalizepsbt", "node.createrawtransaction", "outputs.append", "node.sendrawtransaction", "rbf_node.unloadwallet", "self.add_wallet_options", "peer_node.signrawtransactionwithwallet", "self.test_invalid_parameters", "peer_node.getnewaddress", "rbf_node.testmempoolaccept", "peer_node.sendmany", "self.sync_all", "rbf_node.walletlock", "rbf_node.getrawtransaction", "self.nodes", "rbf_node.send", "self.options", "rbf_node.sendall", "self.num_nodes", "watcher.walletcreatefundedpsbt", "rbf_node.settxfee", "miniwallet.send_self_transfer", "node.listunspent", "peer_node.walletprocesspsbt", "rbf_node.walletprocesspsbt", "watcher.sendrawtransaction", "rbf_node.sendrawtransaction", "self.no_op", "rbf_node.getmempoolinfo", "self.restart_node", "signer.importdescriptors", "rbf_node.abandontransaction", "miniwallet.scan_tx", "self.log", "rbf_node.bumpfee", "signer.importmulti", "self.generate", "rbf_node.getbalance", "rbf_node.getaddressinfo", "signer.getwalletinfo", "node.signrawtransactionwithwallet", "rbf_node.listunspent", "self.sync_mempools", "rbf_node.finalizepsbt", "rbf_node.gettransaction", "rbf_node.invalidateblock", "rbf_node.sendtoaddress", "watcher.getwalletinfo", "self.generatetoaddress", "rbf_node.getrawmempool", "rbf_node.createwallet", "rbf_node.getrawchangeaddress"]}, "wallet_change_address.py": {"libraries": ["re", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.COINBASE_MATURITY", "test_framework.util.assert_equal"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "assert_change_index", "assert_change_pos", "run_test"], "function_calls": ["range", "int", "enumerate", "assert_equal", "WalletChangeAddressTest"], "class_names": ["WalletChangeAddressTest"], "class_method_calls": ["self.assert_change_index", "self.generate", "w2.getnewaddress", "self.num_nodes", "self.assert_change_pos", "node.getrawtransaction", "self.nodes", "self.skip_if_no_wallet", "node.getaddressinfo", "re.findall", "w1.send", "w2.send", "wallet.getaddressinfo", "self.log", "self.add_wallet_options", "w1.getnewaddress", "self.extra_args", "self.setup_clean_chain"]}, "wallet_coinbase_category.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_array_result"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "assert_category", "run_test"], "function_calls": ["CoinbaseCategoryTest", "assert_array_result"], "class_names": ["CoinbaseCategoryTest"], "class_method_calls": ["self.generatetoaddress", "self.generate", "self.num_nodes", "self.nodes", "self.skip_if_no_wallet", "self.add_wallet_options", "self.assert_category", "self.setup_clean_chain"]}, "wallet_create_tx.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.blocktools.TIME_GENESIS_BLOCK", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["test_anti_fee_sniping", "skip_test_if_missing_module", "set_test_params", "add_options", "test_create_too_long_mempool_chain", "run_test", "test_tx_size_too_large"], "function_calls": ["assert_equal", "CreateTxWalletTest", "assert_raises_rpc_error", "range"], "class_names": ["CreateTxWalletTest"], "class_method_calls": ["self.test_create_too_long_mempool_chain", "self.generate", "self.test_tx_size_too_large", "self.num_nodes", "test_wallet.unloadwallet", "test_wallet.send", "self.nodes", "self.skip_if_no_wallet", "df_wallet.send", "self.restart_node", "self.test_anti_fee_sniping", "self.default_wallet_name", "self.log", "test_wallet.getnewaddress", "self.add_wallet_options", "self.setup_clean_chain"]}, "wallet_createwallet.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.key.ECKey", "test_framework.descriptors.descsum_create", "test_framework.util.assert_raises_rpc_error", "test_framework.wallet_util.generate_wif_key", "test_framework.wallet_util.bytes_to_wif", "test_framework.address.key_to_p2wpkh"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["key_to_p2wpkh", "descsum_create", "assert_equal", "bytes_to_wif", "generate_wif_key", "CreateWalletTest", "assert_raises_rpc_error", "ECKey"], "class_names": ["CreateWalletTest"], "class_method_calls": ["self.options", "w5.encryptwallet", "self.num_nodes", "w6.getwalletinfo", "w6.getnewaddress", "w6.walletpassphrase", "w4.encryptwallet", "w1.getrawchangeaddress", "self.skip_if_no_wallet", "w2.getrawchangeaddress", "w3.importdescriptors", "node.get_wallet_rpc", "self.log", "eckey.get_pubkey", "self.add_wallet_options", "w1.getnewaddress", "w0.getnewaddress", "w4.walletpassphrase", "w4.getnewaddress", "w3.getwalletinfo", "wblank.walletpassphrase", "self.generate", "w1.importprivkey", "w2.getnewaddress", "wblank.getnewaddress", "w3.sethdseed", "w0.getaddressinfo", "w4.getwalletinfo", "wblank.getrawchangeaddress", "w1.importpubkey", "w3.getrawchangeaddress", "eckey.get_bytes", "w2.importpubkey", "w4.importdescriptors", "w1.importmulti", "w8.getwalletinfo", "w4.getrawchangeaddress", "w6.signmessage", "self.is_bdb_compiled", "w5.getwalletinfo", "wblank.signmessage", "w5.getrawchangeaddress", "w4.sethdseed", "w3.getnewaddress", "w5.getnewaddress", "self.nodes", "w3.importprivkey", "w1.importdescriptors", "w7.walletpassphrase", "w6.keypoolrefill", "self.restart_node", "self.extra_args", "eckey.generate"]}, "wallet_crosschain.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework", "os"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "setup_network", "run_test"], "function_calls": ["assert_raises_rpc_error", "WalletCrossChain"], "class_names": ["WalletCrossChain"], "class_method_calls": ["self.options", "self.num_nodes", "os.path", "self.add_nodes", "self.skip_if_no_wallet", "self.nodes", "self.stop_nodes", "self.log", "self.add_wallet_options", "self.start_nodes", "self.setup_clean_chain"]}, "wallet_descriptor.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "sqlite3", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["range", "len", "assert_equal", "assert_raises_rpc_error", "WalletDescriptorTest"], "class_names": ["WalletDescriptorTest"], "class_method_calls": ["self.skip_if_no_py_sqlite3", "nopriv_rpc.getnewaddress", "self.num_nodes", "desc.index", "self.skip_if_no_wallet", "send_wrpc.encryptwallet", "self.log", "send_wrpc.walletpassphrase", "self.add_wallet_options", "recv_wrpc.getnewaddress", "send_wrpc.importdescriptors", "exp_rpc.getrawchangeaddress", "recv_wrpc.rpc", "blank_rpc.getnewaddress", "enc_rpc.getnewaddress", "imp_rpc.getrawchangeaddress", "self.chain", "send_wrpc.sendtoaddress", "send_wrpc.walletlock", "send_wrpc.getnewaddress", "self.setup_clean_chain", "self.wallet_names", "imp_rpc.getnewaddress", "conn.execute", "self.is_bdb_compiled", "imp_rpc.importdescriptors", "send_wrpc.getaddressinfo", "sqlite3.connect", "self.generatetoaddress", "self.skip_if_no_sqlite", "self.wallet_data_filename", "os.path", "self.nodes", "exp_rpc.getnewaddress", "exp_rpc.getaddressinfo", "self.extra_args"]}, "wallet_disable.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework"], "function_names": ["run_test", "set_test_params"], "function_calls": ["assert_raises_rpc_error", "DisableWalletTest"], "class_names": ["DisableWalletTest"], "class_method_calls": ["self.wallet_names", "self.num_nodes", "self.nodes", "self.extra_args", "self.setup_clean_chain"]}, "wallet_dump.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "datetime", "time"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "read_dump", "setup_network", "run_test"], "function_calls": ["range", "read_dump", "int", "WalletDumpTest", "assert_equal", "next", "assert_raises_rpc_error", "open"], "class_names": ["WalletDumpTest"], "class_method_calls": ["self.num_nodes", "addr_keypath.split", "c.startswith", "line.split", "datetime.timezone", "w3.sendtoaddress", "self.skip_if_no_wallet", "self.log", "self.add_wallet_options", "w3.dumpwallet", "self.rpc_timeout", "datetime.datetime", "self.generate", "self.add_nodes", "key_date_label.split", "addr.rstrip", "found_comments.append", "addr.split", "time.time", "comment.split", "w3.getnewaddress", "addr_keypath.rstrip", "w3.unloadwallet", "line.strip", "os.path", "addr.startswith", "self.nodes", "w3.importprivkey", "self.restart_node", "addrs.append", "self.extra_args", "self.start_nodes"]}, "wallet_encryption.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework", "time", "test_framework.util.assert_equal"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["assert_equal", "assert_raises_rpc_error", "int", "WalletEncryptionTest"], "class_names": ["WalletEncryptionTest"], "class_method_calls": ["self.num_nodes", "time.time", "passphrase_with_nulls.partition", "self.nodes", "self.skip_if_no_wallet", "self.log", "self.add_wallet_options", "self.setup_clean_chain", "time.sleep"]}, "wallet_fallbackfee.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["assert_raises_rpc_error", "WalletRBFTest"], "class_names": ["WalletRBFTest"], "class_method_calls": ["self.generate", "self.num_nodes", "self.nodes", "self.skip_if_no_wallet", "self.restart_node", "self.add_wallet_options", "self.setup_clean_chain"]}, "wallet_fast_rescan.py": {"libraries": ["test_framework.wallet_util.get_generate_key", "test_framework.test_node.TestNode", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.address.address_to_scriptpubkey", "test_framework.descriptors.descsum_create", "os", "typing.List", "test_framework.wallet.MiniWallet"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "get_wallet_txids", "run_test"], "function_calls": ["range", "len", "sorted", "get_generate_key", "print", "descsum_create", "MiniWallet", "assert_equal", "WalletFastRescanTest", "address_to_scriptpubkey"], "class_names": ["WalletFastRescanTest"], "class_method_calls": ["bytes.fromhex", "fixed_key.p2wpkh_addr", "self.num_nodes", "w.deriveaddresses", "self.skip_if_no_wallet", "wallet.send_to", "node.restorewallet", "node.get_wallet_rpc", "self.get_wallet_txids", "self.log", "self.add_wallet_options", "fixed_key.p2wpkh_script", "w.backupwallet", "self.generate", "node.datadir", "w.listtransactions", "node.createwallet", "fixed_key.privkey", "w.listdescriptors", "self.skip_if_no_sqlite", "node.assert_debug_log", "os.path", "self.nodes", "w.importdescriptors", "self.restart_node", "self.extra_args"]}, "wallet_fundrawtransaction.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_greater_than_or_equal", "test_framework.key.ECKey", "test_framework.util.assert_equal", "test_framework.descriptors.descsum_create", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_greater_than", "test_framework.util.assert_approx", "test_framework.util.find_vout_for_address", "test_framework.messages.COIN", "test_framework.util.count_bytes", "test_framework.wallet_util.bytes_to_wif", "test_framework.util.assert_fee_amount", "math.ceil", "itertools.product"], "function_names": ["test_option_subtract_fee_from_outputs", "test_address_reuse", "do_fund_send", "test_coin_selection", "test_spend_2of2", "test_feerate_rounding", "test_all_watched_funds", "test_change", "test_22670", "test_preset_inputs_selection", "test_fee_p2sh", "add_options", "test_no_change", "test_subtract_fee_with_presets", "test_op_return", "test_include_unsafe", "test_change_position", "test_locked_wallet", "test_two_vin_two_vout", "test_simple", "test_simple_two_coins", "lock_outputs_type", "test_fee_p2pkh", "test_weight_calculation", "skip_test_if_missing_module", "set_test_params", "test_two_vin", "test_watchonly", "test_fee_p2pkh_multi_out", "get_unspent", "test_simple_two_outputs", "setup_network", "test_many_inputs_send", "run_test", "test_fee_4of5", "test_change_type", "unlock_utxos", "test_input_confs_control", "test_invalid_option", "test_many_inputs_fee", "test_invalid_change_address", "test_transaction_too_large", "test_invalid_input", "test_external_inputs", "test_add_inputs_default_value", "test_valid_change_address", "test_option_feerate"], "function_calls": ["range", "assert_approx", "do_fund_send", "assert_greater_than", "bytes_to_wif", "ceil", "assert_fee_amount", "ECKey", "count_bytes", "len", "find_vout_for_address", "all", "enumerate", "descsum_create", "product", "sum", "get_unspent", "RawTransactionsTest", "assert_equal", "assert_greater_than_or_equal", "Decimal", "int", "str", "zip", "AssertionError", "assert_raises_rpc_error"], "class_names": ["RawTransactionsTest"], "class_method_calls": ["self.test_many_inputs_send", "self.test_no_change_fee", "funds.sendtoaddress", "self.test_fee_p2pkh", "self.test_simple", "w2.getrawchangeaddress", "self.skip_if_no_wallet", "wwatch.importdescriptors", "self.default_wallet_name", "recipient.fundrawtransaction", "self.test_input_confs_control", "self.test_address_reuse", "self.connect_nodes", "self.test_external_inputs", "result.keys", "self.test_fee_4of5", "wallet.signrawtransactionwithwallet", "wwatch.importmulti", "wallet.createrawtransaction", "self.test_change", "self.test_change_type", "w2.finalizepsbt", "wallet.lockunspent", "self.setup_clean_chain", "node.getnewaddress", "self.unlock_utxos", "to_lock.append", "self.test_watchonly", "self.test_include_unsafe", "self.test_spend_2of2", "w.getnewaddress", "self.extra_args", "self.test_feerate_rounding", "wwatch.signrawtransactionwithwallet", "recipient.createrawtransaction", "tester.testmempoolaccept", "wmulti.unloadwallet", "wwatch.unloadwallet", "node.createrawtransaction", "self.test_two_vin_two_vout", "wallet.sendmany", "self.add_wallet_options", "self.test_all_watched_funds", "self.test_invalid_input", "recipient.keypoolrefill", "eckey.get_bytes", "self.fee_tolerance", "node.fundrawtransaction", "w.createrawtransaction", "self.test_subtract_fee_with_presets", "self.lock_outputs_type", "self.test_22670", "self.watchonly_vout", "wmulti.addmultisigaddress", "self.test_invalid_option", "self.test_valid_change_address", "self.test_change_position", "self.nodes", "wallet.fundrawtransaction", "self.options", "wallet.walletcreatefundedpsbt", "tester.decoderawtransaction", "self.test_fee_p2sh", "tester.fundrawtransaction", "self.num_nodes", "self.test_coin_selection", "wallet.unloadwallet", "self.test_option_feerate", "w.fundrawtransaction", "tester.signrawtransactionwithwallet", "w2.walletprocesspsbt", "self.test_fee_p2pkh_multi_out", "wmulti.importaddress", "self.watchonly_amount", "wallet.listunspent", "recipient.getnewaddress", "wallet.getnewaddress", "inputs.append", "self.watchonly_txid", "self.min_relay_tx_fee", "self.test_simple_two_coins", "self.test_locked_wallet", "w3.getrawchangeaddress", "self.test_op_return", "self.test_preset_inputs_selection", "wallet.testmempoolaccept", "funds.getnewaddress", "wwatch.fundrawtransaction", "wallet.send", "to_keep.append", "self.test_simple_two_outputs", "wallet.decoderawtransaction", "self.test_no_change", "self.no_op", "self.restart_node", "self.test_weight_calculation", "self.setup_nodes", "wwatch.importpubkey", "wallet.sendtoaddress", "self.log", "wmulti.walletcreatefundedpsbt", "self.rpc_timeout", "self.test_two_vin", "self.generate", "self.test_many_inputs_fee", "self.test_option_subtract_fee_from_outputs", "self.sync_mempools", "self.test_invalid_change_address", "self.test_transaction_too_large", "node.settxfee", "tester.getnewaddress", "tester.createrawtransaction", "eckey.generate", "self.test_add_inputs_default_value"]}, "wallet_groups.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.tx_from_hex", "test_framework.util.assert_equal", "test_framework.util.assert_approx", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["range", "assert_approx", "len", "tx_from_hex", "assert_equal", "WalletGroupTest"], "class_names": ["WalletGroupTest"], "class_method_calls": ["self.generate", "v.sort", "self.num_nodes", "tx.serialize", "args.append", "tx.vout", "self.nodes", "self.skip_if_no_wallet", "self.sync_all", "tx.vin", "self.connect_nodes", "self.setup_clean_chain", "self.add_wallet_options", "self.log", "self.extra_args", "self.rpc_timeout", "values.sort"]}, "wallet_hd.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "shutil", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["range", "len", "WalletHDTest", "str", "assert_equal", "assert_raises_rpc_error"], "class_names": ["WalletHDTest"], "class_method_calls": ["self.options", "origin_rpc.gettransaction", "self.num_nodes", "restore_rpc.gettransaction", "args.append", "origin_rpc.getnewaddress", "self.skip_if_no_wallet", "origin_rpc.sendrawtransaction", "self.default_wallet_name", "self.log", "self.add_wallet_options", "self.connect_nodes", "shutil.copyfile", "self.generate", "restore_rpc.sethdseed", "restore2_rpc.rescanblockchain", "self.chain", "origin_rpc.getaddressinfo", "shutil.rmtree", "self.setup_clean_chain", "restore2_rpc.getaddressinfo", "restore2_rpc.gettransaction", "self.start_node", "self.sync_all", "origin_rpc.sethdseed", "self.stop_node", "restore_rpc.rescanblockchain", "restore_rpc.unloadwallet", "self.wallet_data_filename", "restore_rpc.getaddressinfo", "restore2_rpc.sethdseed", "os.path", "self.supports_cli", "self.nodes", "self.restart_node", "self.extra_args"]}, "wallet_implicitsegwit.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.address"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "send_a_to_b", "key_to_address", "run_test", "check_implicit_transactions"], "function_calls": ["send_a_to_b", "key_to_address", "tuple", "ImplicitSegwitTest", "check_implicit_transactions"], "class_names": ["ImplicitSegwitTest"], "class_method_calls": ["address.key_to_p2wpkh", "self.num_nodes", "receive_node.getaddressinfo", "send_node.sendtoaddress", "implicit_node.listtransactions", "self.supports_cli", "self.skip_if_no_wallet", "self.restart_node", "self.sync_all", "self.log", "receive_node.getnewaddress", "self.nodes", "self.add_wallet_options", "address.key_to_p2sh_p2wpkh", "address.key_to_p2pkh"]}, "wallet_import_rescan.py": {"libraries": ["itertools", "test_framework.test_framework.BitcoinTestFramework", "collections", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.address.AddressType", "test_framework.util.set_node_times", "enum", "random"], "function_names": ["skip_test_if_missing_module", "add_options", "set_test_params", "do_import", "setup_network", "get_rand_amount", "run_test", "check"], "function_calls": ["range", "len", "ImportNode", "set_node_times", "Decimal", "round", "str", "enumerate", "assert_equal", "ImportRescanTest", "get_rand_amount", "Variant"], "class_names": ["ImportRescanTest", "Variant"], "class_method_calls": ["Data.pub", "variant.expected_txs", "variant.expected_balance", "self.num_nodes", "self.expected_balance", "Rescan.late_timestamp", "enum.Enum", "self.skip_if_no_wallet", "self.rescan", "variant.timestamp", "last_variants.append", "self.log", "self.label", "self.add_wallet_options", "itertools.product", "AddressType.p2sh_segwit", "self.rpc_timeout", "self.node", "AddressType.bech32", "self.connect_nodes", "variant.check", "variant.do_import", "self.generate", "variant.node", "variant.prune", "self.address_type", "Rescan.yes", "self.add_nodes", "self.address", "self.data", "self.expected_txs", "Call.multiscript", "self.sync_mempools", "variant.address_type", "variant.initial_amount", "collections.namedtuple", "variant.key", "self.key", "Call.single", "variant.sent_txid", "self.sync_all", "variant.rescan", "Data.priv", "IMPORT_NODES.index", "variant.address", "request.update", "self.call", "random.uniform", "self.import_deterministic_coinbase_privkeys", "last_variants.clear", "Call.multiaddress", "variant.label", "var.timestamp", "variant.sent_amount", "variant.confirmation_height", "variant.initial_txid", "self.supports_cli", "var.confirmation_height", "self.nodes", "import_node.prune", "self.stop_nodes", "Data.address", "self.extra_args", "self.start_nodes"]}, "wallet_import_with_label.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.wallet_util.test_address"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["ImportWithLabel", "test_address"], "class_names": ["ImportWithLabel"], "class_method_calls": ["self.num_nodes", "self.nodes", "self.skip_if_no_wallet", "self.stop_nodes", "self.log", "self.add_wallet_options", "self.setup_clean_chain"]}, "wallet_importdescriptors.py": {"libraries": ["test_framework.wallet_util.get_generate_key", "test_framework.authproxy.JSONRPCException", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.descriptors.descsum_create", "test_framework.util.assert_raises_rpc_error", "concurrent.futures", "test_framework.util.find_vout_for_address", "test_framework.blocktools.COINBASE_MATURITY", "test_framework.wallet_util.test_address"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "test_importdesc", "run_test"], "function_calls": ["ImportDescriptorsTest", "len", "sorted", "get_generate_key", "find_vout_for_address", "test_address", "enumerate", "descsum_create", "assert_equal", "assert_raises_rpc_error"], "class_names": ["ImportDescriptorsTest"], "class_method_calls": ["encrypted_wallet.getbalance", "key.p2pkh_addr", "wmulti_pub.getrawchangeaddress", "self.num_nodes", "wpriv.getnewaddress", "wmulti_priv_big.importdescriptors", "wmulti_priv3.importdescriptors", "args.append", "importing.result", "wmulti_priv2.importdescriptors", "w1.getrawchangeaddress", "self.skip_if_no_wallet", "wmulti_priv_big.getnewaddress", "wmulti_pub.getbalance", "wmulti_priv.getwalletinfo", "self.log", "self.add_wallet_options", "w0.getnewaddress", "w1.getnewaddress", "w1.getaddressinfo", "wmulti_priv.getnewaddress", "w1.keypoolrefill", "wmulti_priv_big.sendtoaddress", "multi_priv_big.importdescriptors", "temp_wallet.getnewaddress", "wmulti_priv2.signrawtransactionwithwallet", "w1.getwalletinfo", "self.generate", "key1.p2pkh_addr", "w1.sendrawtransaction", "multi_priv_big.getnewaddress", "self.extra_args", "wmulti_priv3.signrawtransactionwithwallet", "self.setup_clean_chain", "self.wallet_names", "wpriv.createrawtransaction", "wmulti_priv.gettransaction", "key.pubkey", "concurrent.futures", "wmulti_pub.unloadwallet", "wmulti_priv.sendtoaddress", "multi_priv_big.gettransaction", "wpriv.signrawtransactionwithwallet", "self.sync_all", "wmulti_pub.getnewaddress", "encrypted_wallet.importdescriptors", "key.p2sh_p2wpkh_addr", "self.generatetoaddress", "w1.unloadwallet", "wmulti_priv.getrawchangeaddress", "wmulti_priv1.importdescriptors", "wmulti_priv1.signrawtransactionwithwallet", "self.skip_if_no_sqlite", "self.test_importdesc", "temp_wallet.importdescriptors", "encrypted_wallet.walletpassphrase", "w0.sendtoaddress", "wmulti_pub.listunspent", "e.error", "self.nodes", "temp_wallet.getbalance", "multi_priv_big.sendtoaddress", "wpriv.getwalletinfo", "key2.pubkey", "wmulti_priv_big.gettransaction", "wrpc.importdescriptors", "wmulti_priv.getbalance", "wmulti_pub.getwalletinfo", "wpriv.getrawchangeaddress", "key1.pubkey", "thread.submit"]}, "wallet_importmulti.py": {"libraries": ["test_framework.wallet_util.test_address", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.wallet_util.get_multisig", "test_framework.descriptors.descsum_create", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_greater_than", "test_framework.wallet_util.get_key", "test_framework.script.CScript", "test_framework.blocktools.COINBASE_MATURITY", "test_framework.script.OP_NOP"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "test_importmulti", "setup_network", "run_test"], "function_calls": ["range", "sorted", "get_multisig", "CScript", "test_address", "assert_greater_than", "ImportMultiTest", "descsum_create", "assert_equal", "get_key", "assert_raises_rpc_error"], "class_names": ["ImportMultiTest"], "class_method_calls": ["key.p2pkh_addr", "self.num_nodes", "key.p2sh_p2wpkh_redeem_script", "self.skip_if_no_wallet", "multisig.p2wsh_addr", "self.default_wallet_name", "self.log", "multisig.privkeys", "self.add_wallet_options", "wrpc.getwalletinfo", "key.privkey", "self.generate", "multisig.p2sh_p2wsh_addr", "key1.p2pkh_addr", "self.extra_args", "multisig.p2wsh_script", "self.setup_clean_chain", "key.pubkey", "key1.pubkey", "key.p2wpkh_addr", "key.p2sh_p2wpkh_addr", "self.no_op", "self.nodes", "self.test_importmulti", "self.stop_nodes", "key.p2pkh_script", "multisig.p2sh_addr", "wrpc.importmulti", "wrpc.getnewaddress", "wrpc.getrawchangeaddress", "key2.pubkey", "self.setup_nodes", "self.start_nodes", "multisig.redeem_script"]}, "wallet_importprunedfunds.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.key.ECKey", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.messages.CMerkleBlock", "test_framework.wallet_util.bytes_to_wif", "test_framework.messages.from_hex", "test_framework.address.key_to_p2wpkh", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["from_hex", "ImportPrunedFundsTest", "key_to_p2wpkh", "Decimal", "CMerkleBlock", "assert_equal", "bytes_to_wif", "assert_raises_rpc_error", "ECKey"], "class_names": ["ImportPrunedFundsTest"], "class_method_calls": ["self.options", "self.num_nodes", "w1.removeprunedfunds", "wwatch.importaddress", "self.skip_if_no_wallet", "eckey.get_pubkey", "self.default_wallet_name", "self.log", "self.add_wallet_options", "mb.serialize", "w1.getaddressinfo", "self.generate", "w1.importprivkey", "w1.listtransactions", "wwatch.getaddressinfo", "wwatch.importprunedfunds", "self.setup_clean_chain", "eckey.get_bytes", "mb.header", "w1.importprunedfunds", "self.sync_all", "wwatch.removeprunedfunds", "wwatch.listtransactions", "self.nodes", "w1.getbalance", "eckey.generate"]}, "wallet_inactive_hdchains.py": {"libraries": ["test_framework.wallet_util.get_generate_key", "test_framework.authproxy.JSONRPCException", "test_framework.test_framework.BitcoinTestFramework", "os", "shutil", "time"], "function_names": ["test_basic", "skip_test_if_missing_module", "set_test_params", "add_options", "test_without_upgraded_keymeta", "setup_nodes", "test_encrypted_wallet", "run_test", "do_inactive_test", "prepare_wallets"], "function_calls": ["InactiveHDChainsTest", "range", "get_generate_key"], "class_names": ["InactiveHDChainsTest"], "class_method_calls": ["self.num_nodes", "test_wallet.sethdseed", "test_wallet.walletpassphrase", "self.skip_if_no_wallet", "self.default_wallet_name", "self.log", "self.add_wallet_options", "default.sendtoaddress", "self.skip_if_no_previous_releases", "self.test_basic", "self.generate", "self.test_without_upgraded_keymeta", "base_wallet.getnewaddress", "test_wallet.unloadwallet", "self.add_nodes", "seed.privkey", "test_wallet.encryptwallet", "self.setup_clean_chain", "self.do_inactive_test", "self.prepare_wallets", "self.init_wallet", "self.skip_if_no_bdb", "self.test_encrypted_wallet", "time.sleep", "test_wallet.getaddressinfo", "test_wallet.gettransaction", "os.path", "shutil.copytree", "self.nodes", "base_wallet.sethdseed", "self.extra_args", "self.start_nodes"]}, "wallet_keypool.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "time"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["range", "len", "set", "KeyPoolTest", "Decimal", "int", "str", "assert_equal", "assert_raises_rpc_error"], "class_names": ["KeyPoolTest"], "class_method_calls": ["self.options", "w2.importmulti", "self.num_nodes", "w2.walletcreatefundedpsbt", "self.skip_if_no_wallet", "self.default_wallet_name", "self.add_wallet_options", "w1.getaddressinfo", "self.generate", "start_keypath.rsplit", "start_change_keypath.rsplit", "time.sleep", "w2.importdescriptors", "w1.walletpassphrase", "w2.keypoolrefill", "w1.sendtoaddress", "addr.add", "self.nodes", "w2.listunspent", "addr.pop"]}, "wallet_keypool_topup.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "shutil", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["assert_equal", "range", "KeypoolRestoreTest", "enumerate"], "class_names": ["KeypoolRestoreTest"], "class_method_calls": ["self.options", "self.generate", "self.stop_node", "self.wallet_data_filename", "self.num_nodes", "self.connect_nodes", "os.path", "self.nodes", "self.skip_if_no_wallet", "self.chain", "self.start_node", "self.default_wallet_name", "self.log", "shutil.copyfile", "self.sync_all", "self.add_wallet_options", "self.extra_args", "self.setup_clean_chain"]}, "wallet_labels.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "collections.defaultdict", "test_framework.blocktools.COINBASE_MATURITY", "test_framework.wallet_util.test_address"], "function_names": ["invalid_label_name_test", "__init__", "add_receive_address", "skip_test_if_missing_module", "set_test_params", "add_options", "change_label", "add_address", "run_test", "verify"], "function_calls": ["len", "range", "set", "sorted", "test_address", "enumerate", "assert_equal", "change_label", "defaultdict", "Label", "assert_raises_rpc_error", "WalletLabelsTest"], "class_names": ["WalletLabelsTest", "Label"], "class_method_calls": ["label.verify", "self.options", "node.getreceivedbylabel", "node.sendtoaddress", "self.num_nodes", "label.add_address", "node.getbalance", "self.name", "self.skip_if_no_wallet", "node.get_wallet_rpc", "node.sendmany", "self.log", "wallet_watch_only.getaddressesbylabel", "self.add_wallet_options", "self.receive_address", "node.importaddress", "to_label.addresses", "node.getblockhash", "node.getaddressesbylabel", "self.generate", "self.addresses", "rpc_calls.extend", "label.purpose", "node.listlabels", "node.listaddressgroupings", "old_label.addresses", "node.getaddressinfo", "node.importmulti", "label.name", "label.add_receive_address", "label.addresses", "node.importprivkey", "addresses.append", "node.dumpprivkey", "node.getnewaddress", "self.setup_clean_chain", "new_label.add_address", "node.createwallet", "node.listunspent", "node.addmultisigaddress", "new_label.verify", "linked_addresses.add", "new_label.name", "self.invalid_label_name_test", "node.setlabel", "self.purpose", "self.generatetoaddress", "old_label.verify", "wallet_watch_only.importaddress", "self.add_address", "node.importpubkey", "node.listsinceblock", "self.nodes", "wallet_watch_only.getreceivedbylabel", "node.getreceivedbyaddress", "node.importdescriptors"]}, "wallet_listdescriptors.py": {"libraries": ["test_framework.blocktools.TIME_GENESIS_BLOCK", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.descriptors.descsum_create", "test_framework.util.assert_raises_rpc_error"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "init_wallet", "run_test"], "function_calls": ["len", "sorted", "descsum_create", "assert_equal", "ListDescriptorsTest", "assert_raises_rpc_error"], "class_names": ["ListDescriptorsTest"], "class_method_calls": ["node.listdescriptors", "node.createwallet", "self.skip_if_no_sqlite", "self.num_nodes", "wallet.importdescriptors", "wallet.walletpassphrase", "wallet.listdescriptors", "watch_only_wallet.importdescriptors", "self.nodes", "self.skip_if_no_wallet", "wallet.encryptwallet", "node.get_deterministic_priv_key", "node.get_wallet_rpc", "self.log", "self.is_bdb_compiled", "self.add_wallet_options", "watch_only_wallet.listdescriptors"]}, "wallet_listreceivedby.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_array_result", "test_framework.blocktools.COINBASE_MATURITY", "test_framework.wallet_util.test_address"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["len", "Decimal", "test_address", "ReceivedByTest", "assert_array_result", "assert_equal", "assert_raises_rpc_error"], "class_names": ["ReceivedByTest"], "class_method_calls": ["self.generatetoaddress", "self.skip_if_no_cli", "self.generate", "self.num_nodes", "node.listreceivedbyaddress", "self.nodes", "self.skip_if_no_wallet", "node.getaddressinfo", "self.sync_all", "self.log", "self.add_wallet_options", "self.extra_args"]}, "wallet_listsinceblock.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.key.ECKey", "test_framework.util.assert_equal", "test_framework.descriptors.descsum_create", "test_framework.messages.MAX_BIP125_RBF_SEQUENCE", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_array_result", "test_framework.wallet_util.bytes_to_wif", "test_framework.address.key_to_p2wpkh", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["test_double_send", "test_no_blockhash", "skip_test_if_missing_module", "set_test_params", "add_options", "test_targetconfirmations", "test_double_spend", "test_reorg", "test_invalid_blockhash", "test_desc", "test_send_to_self", "test_op_return", "test_label", "double_spends_filtered", "run_test"], "function_calls": ["len", "key_to_p2wpkh", "Decimal", "dict", "any", "all", "assert_array_result", "descsum_create", "assert_equal", "next", "bytes_to_wif", "float", "assert_raises_rpc_error", "ListSinceBlockTest", "ECKey"], "class_names": ["ListSinceBlockTest"], "class_method_calls": ["spending_node.bumpfee", "self.options", "self.num_nodes", "wo_wallet.listsinceblock", "self.test_reorg", "self.skip_if_no_wallet", "eckey.get_pubkey", "self.log", "self.add_wallet_options", "self.connect_nodes", "self.double_spends_filtered", "self.generate", "spending_node.getblockhash", "self.test_no_blockhash", "self.join_network", "self.test_targetconfirmations", "self.test_op_return", "self.setup_clean_chain", "eckey.get_bytes", "self.test_desc", "spending_node.createrawtransaction", "spending_node.sendrawtransaction", "self.test_double_send", "spending_node.listsinceblock", "self.sync_all", "self.split_network", "self.test_double_spend", "self.no_op", "spending_node.getnewaddress", "self.test_send_to_self", "self.test_label", "spending_node.getblockcount", "spending_node.gettransaction", "self.nodes", "spending_node.signrawtransactionwithwallet", "spending_node.listunspent", "wo_wallet.importdescriptors", "self.test_invalid_blockhash", "self.extra_args", "eckey.generate", "spending_node.getrawchangeaddress"]}, "wallet_listtransactions.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.messages.tx_from_hex", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_array_result", "test_framework.messages.COIN", "shutil"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "get_unconfirmed_utxo_entry", "run_invalid_parameters_test", "test_op_return", "run_rbf_opt_in_test", "is_opt_in", "normalize_list", "run_test", "run_externally_generated_address_test"], "function_calls": ["len", "tx_from_hex", "Decimal", "get_unconfirmed_utxo_entry", "int", "assert_array_result", "assert_equal", "is_opt_in", "normalize_list", "assert_raises_rpc_error", "ListTransactionsTest"], "class_names": ["ListTransactionsTest"], "class_method_calls": ["self.options", "n.listsinceblock", "self.num_nodes", "self.skip_if_no_wallet", "self.default_wallet_name", "self.log", "self.add_wallet_options", "self.run_rbf_opt_in_test", "self.connect_nodes", "shutil.copyfile", "tx3_modified.serialize", "self.generate", "self.chain", "self.sync_mempools", "self.test_op_return", "node.listunspent", "n.gettransaction", "tx.pop", "node.getrawtransaction", "tx3_b.vout", "self.sync_all", "self.run_invalid_parameters_test", "tx3_modified.vin", "self.run_externally_generated_address_test", "os.path", "self.nodes", "self.stop_nodes", "tx3_b.serialize", "self.extra_args", "self.start_nodes", "txs.sort"]}, "wallet_migration.py": {"libraries": ["test_framework.wallet_util.get_generate_key", "test_framework.script_util.script_to_p2wsh_script", "test_framework.test_framework.BitcoinTestFramework", "test_framework.script_util.key_to_p2pkh_script", "test_framework.script_util.script_to_p2sh_script", "test_framework.util.assert_equal", "os", "test_framework.descriptors.descsum_create", "test_framework.util.assert_raises_rpc_error", "test_framework.address.script_to_p2sh", "test_framework.messages.CTxOut", "test_framework.util.find_vout_for_address", "test_framework.messages.COIN", "test_framework.messages.CTransaction", "random"], "function_names": ["test_unloaded_by_path", "test_no_privkeys", "assert_is_sqlite", "create_legacy_wallet", "test_other_watchonly", "test_migrate_raw_p2sh", "send_to_script", "add_options", "check_address", "check", "test_conflict_txs", "test_basic", "skip_test_if_missing_module", "set_test_params", "test_encrypted", "test_unloaded", "run_test", "assert_addr_info_equal", "test_multisig", "assert_list_txs_equal", "test_addressbook", "test_pk_coinbases"], "function_calls": ["range", "send_to_script", "len", "key_to_p2pkh_script", "script_to_p2wsh_script", "find_vout_for_address", "get_generate_key", "WalletMigrationTest", "descsum_create", "script_to_p2sh", "assert_equal", "next", "CTransaction", "script_to_p2sh_script", "CTxOut", "assert_raises_rpc_error", "open", "check"], "class_names": ["WalletMigrationTest"], "class_method_calls": ["basic2.getbalance", "wallet.importpubkey", "wallet.sendrawtransaction", "df_wallet.getnewaddress", "f.read", "df_wallet.signrawtransactionwithwallet", "basic1.sendtoaddress", "df_wallet.sendrawtransaction", "wallet.getrawchangeaddress", "self.skip_if_no_wallet", "self.default_wallet_name", "watchonly.listtransactions", "default.sendtoaddress", "multisig1.getwalletinfo", "wallet.signrawtransactionwithwallet", "def_wallet.sendtoaddress", "ms1_solvable.getwalletinfo", "basic0.getnewaddress", "self.setup_clean_chain", "watchonly0.getwalletinfo", "basic2.sethdseed", "default.getaddressinfo", "multisig0.getwalletinfo", "wallet.listlabels", "wallet.gettransaction", "random.randint", "self.test_no_privkeys", "imports0.getwalletinfo", "self.test_encrypted", "os.path", "ms1_watchonly.getwalletinfo", "self.assert_list_txs_equal", "basic2_seed.privkey", "self.extra_args", "multisig1.gettransaction", "multisig1.getnewaddress", "ms1_watchonly.getaddressinfo", "self.test_pk_coinbases", "watchonly.listlabels", "self.add_wallet_options", "wallet_wo.getaddressesbylabel", "wallet.rpc", "ms1_solvable.getaddressinfo", "multisig0.getnewaddress", "self.test_basic", "script_sh_pkh.hex", "basic0.getaddressinfo", "self.test_migrate_raw_p2sh", "basic1.getnewaddress", "wallet.getbalances", "imports0.importaddress", "basic1.getwalletinfo", "ms1_watchonly.getbalance", "wallet.getwalletinfo", "self.test_multisig", "watchonly0.importmulti", "self.skip_if_no_bdb", "self.check_address", "watchonly1.migratewallet", "wallet.setlabel", "basic2.getwalletinfo", "df_wallet.fundrawtransaction", "basic1.getbalance", "wallet.encryptwallet", "self.nodes", "basic0.migratewallet", "watchonly.gettransaction", "self.create_legacy_wallet", "basic0.getrawchangeaddress", "basic2_seed.p2wpkh_addr", "script_pkh.hex", "watchonly.getbalance", "bytes.fromhex", "multisig0.addmultisigaddress", "self.num_nodes", "wallet.unloadwallet", "ms1_solvable.getbalance", "imports0.setlabel", "default.getnewaddress", "wallet_wo.listdescriptors", "basic2_seed.p2pkh_addr", "imports0.getnewaddress", "wallet_wo.getbalances", "imports0.migratewallet", "basic2.migratewallet", "multisig1.migratewallet", "wallet.getnewaddress", "basic2_seed.p2sh_p2wpkh_addr", "imports0.listtransactions", "imports0.gettransaction", "basic0.listdescriptors", "watchonly1.importmulti", "basic2.listtransactions", "multisig0.getaddressinfo", "self.test_addressbook", "wallet.getaddressinfo", "basic1.migratewallet", "wallet.send", "multisig0.migratewallet", "self.assert_addr_info_equal", "df_wallet.getaddressinfo", "default.sendall", "self.skip_if_no_sqlite", "self.wallet_data_filename", "watchonly1.getnewaddress", "wallet.importaddress", "self.supports_cli", "self.restart_node", "multisig1.getbalance", "wallet.sendtoaddress", "watchonly1.getwalletinfo", "script_wsh_pkh.hex", "watchonly0.migratewallet", "self.test_other_watchonly", "multisig1.addmultisigaddress", "self.log", "self.test_unloaded_by_path", "watchonly.getwalletinfo", "basic1.listtransactions", "imports0.getbalance", "self.generate", "ms1_watchonly.gettransaction", "tx.vout", "basic0.getwalletinfo", "multisig1.getbalances", "df_wallet.sendtoaddress", "self.test_unloaded", "self.test_conflict_txs", "multisig1.listtransactions", "self.assert_is_sqlite", "tx.serialize", "wallet.migratewallet", "multisig1.getaddressinfo", "imports0.getbalances", "ms1_solvable.listtransactions", "wallet.addmultisigaddress", "multisig1.importaddress"]}, "wallet_miniscript.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.psbt.PSBT_IN_SHA256", "test_framework.util.assert_equal", "test_framework.descriptors.descsum_create", "test_framework.psbt.PSBT"], "function_names": ["watchonly_test", "skip_test_if_missing_module", "set_test_params", "add_options", "signing_test", "run_test"], "function_calls": ["assert_equal", "WalletMiniscriptTest", "len", "descsum_create"], "class_names": ["WalletMiniscriptTest"], "class_method_calls": ["bytes.fromhex", "self.num_nodes", "sha256_preimages.items", "self.watchonly_test", "ms.get", "self.skip_if_no_wallet", "self.default_wallet_name", "self.log", "self.add_wallet_options", "PSBT_IN_SHA256.to_bytes", "self.ms_sig_wallet", "psbt.to_base64", "PSBT.from_base64", "self.signing_test", "psbt.i", "self.skip_if_no_sqlite", "self.funder", "self.ms_wo_wallet", "self.wait_until", "self.nodes"]}, "wallet_multisig_descriptor_psbt.py": {"libraries": ["test_framework.util.assert_approx", "test_framework.test_framework.BitcoinTestFramework", "test_framework.address.base58_to_byte", "test_framework.util.assert_equal"], "function_names": ["_check_psbt", "skip_test_if_missing_module", "set_test_params", "add_options", "participants_create_multisigs", "run_test", "_get_xpub"], "function_calls": ["range", "assert_approx", "list", "len", "base58_to_byte", "WalletMultisigDescriptorPSBTTest", "all", "enumerate", "assert_equal", "next", "float", "filter"], "class_names": ["WalletMultisigDescriptorPSBTTest"], "class_method_calls": ["multisig.getaddressinfo", "self.num_nodes", "self.name", "self.skip_if_no_wallet", "node.get_wallet_rpc", "self.log", "self.add_wallet_options", "self.generate", "psbts.append", "participant.getbalance", "multisig.getnewaddress", "coordinator_wallet.sendtoaddress", "signing_wallet.walletprocesspsbt", "self.M", "self.setup_clean_chain", "self.wallet_names", "self._check_psbt", "node.createwallet", "self.participants_create_multisigs", "multisig.getrawchangeaddress", "wallet.listdescriptors", "multisig.decodepsbt", "multisig.importdescriptors", "self.generatetoaddress", "coordinator_wallet.getnewaddress", "self.skip_if_no_sqlite", "self.N", "multisig.getdescriptorinfo", "coordinator_wallet.combinepsbt", "self.nodes", "coordinator_wallet.finalizepsbt", "coordinator_wallet.sendrawtransaction", "self._get_xpub", "self.extra_args"]}, "wallet_multiwallet.py": {"libraries": ["test_framework.authproxy.JSONRPCException", "test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "test_framework.util.get_rpc_proxy", "sys", "test_framework.test_node.ErrorMatch", "shutil", "stat", "test_framework.blocktools.COINBASE_MATURITY", "time", "threading.Thread"], "function_names": ["wallet_file", "skip_test_if_missing_module", "add_options", "set_test_params", "test_load_unload", "run_test"], "function_calls": ["range", "wallet_file", "sorted", "set", "Decimal", "get_rpc_proxy", "MultiWalletTest", "data_dir", "zip", "assert_equal", "Thread", "wallet_dir", "map", "wallet", "assert_raises_rpc_error", "open"], "class_names": ["MultiWalletTest"], "class_method_calls": ["w9.getwalletinfo", "self.skip_if_no_wallet", "self.default_wallet_name", "shutil.copyfile", "shutil.rmtree", "w.replace", "sys.platform", "self.setup_clean_chain", "stat.S_IRUSR", "to_load.append", "self.start_node", "os.symlink", "os.rename", "node.url", "time.sleep", "parser.add_argument", "os.path", "w1.getbalance", "self.extra_args", "node.loadwallet", "node.getwalletinfo", "self.add_wallet_options", "in_wallet_dir.append", "node.cli", "node.datadir", "rpc.getnewaddress", "wallet_bad.getwalletinfo", "rpc.backupwallet", "wallet.getwalletinfo", "node.listwallets", "node.unloadwallet", "e.error", "self.nodes", "self.options", "w2.encryptwallet", "self.num_nodes", "node.get_wallet_rpc", "w10.getwalletinfo", "w4.getnewaddress", "w1.batch", "rpc.getaddressinfo", "threads.append", "t.join", "w1.getblockchaininfo", "self.chain", "to_create.append", "w2.getbalance", "os.unlink", "self.config", "stat.S_IXUSR", "t.start", "ErrorMatch.PARTIAL_REGEX", "self.no_op", "self.wallet_data_filename", "w2.settxfee", "w3.getnewaddress", "w1.sendtoaddress", "self.restart_node", "self.stop_nodes", "w2.walletpassphrase", "w3.getbalance", "w2.getwalletinfo", "stat.S_IWUSR", "ErrorMatch.FULL_REGEX", "self.log", "w1.getnewaddress", "w1.getwalletinfo", "self.rpc_timeout", "w4.getbalance", "w2.getnewaddress", "node.coverage_dir", "w2.unloadwallet", "node.createwallet", "os.mkdir", "self.stop_node", "self.generatetoaddress", "w5.getwalletinfo", "w1.unloadwallet", "w5.getnewaddress", "os.chmod"]}, "wallet_orphanedreward.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["OrphanedBlockRewardTest", "assert_equal"], "class_names": ["OrphanedBlockRewardTest"], "class_method_calls": ["self.generate", "self.num_nodes", "self.nodes", "self.skip_if_no_wallet", "self.sync_blocks", "self.default_wallet_name", "self.sync_mempools", "self.add_wallet_options", "self.setup_clean_chain"]}, "wallet_pruning.py": {"libraries": ["test_framework.blocktools.create_coinbase", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "test_framework.script.OP_TRUE", "test_framework.script.CScript", "test_framework.blocktools.COINBASE_MATURITY", "test_framework.script.OP_RETURN"], "function_names": ["test_wallet_import_pruned_with_missing_blocks", "skip_test_if_missing_module", "set_test_params", "add_options", "mine_large_blocks", "get_birthheight", "create_wallet", "test_wallet_import_pruned", "has_block", "run_test"], "function_calls": ["range", "create_coinbase", "CScript", "int", "WalletPruningTest", "assert_equal", "max", "assert_raises_rpc_error", "open", "create_block"], "class_names": ["WalletPruningTest"], "class_method_calls": ["i.setmocktime", "self.num_nodes", "line.split", "self.skip_if_no_wallet", "self.log", "line.startswith", "self.add_wallet_options", "self.generate", "node.getbestblockhash", "self.chain", "self.has_block", "self.create_wallet", "self.mine_large_blocks", "self.setup_clean_chain", "self.wallet_names", "block.serialize", "self.test_wallet_import_pruned_with_missing_blocks", "block.solve", "i.running", "self.get_birthheight", "self.sync_all", "node.getblockheader", "self.test_wallet_import_pruned", "self.skip_if_no_bdb", "block.sha256", "self.generatetoaddress", "self.no_op", "node.submitblock", "os.path", "self.nodes", "self.extra_args", "self.nTime"]}, "wallet_reorgsrestore.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "os", "shutil"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["assert_equal", "next", "ReorgsRestoreTest", "Decimal"], "class_names": ["ReorgsRestoreTest"], "class_method_calls": ["self.disconnect_nodes", "self.generate", "self.stop_node", "self.no_op", "self.wallet_data_filename", "self.num_nodes", "os.path", "inputs.append", "self.skip_if_no_wallet", "self.sync_blocks", "self.restart_node", "self.start_node", "self.nodes", "shutil.copyfile", "self.chain", "self.add_wallet_options", "self.default_wallet_name", "self.connect_nodes"]}, "wallet_resendwallettransactions.py": {"libraries": ["test_framework.blocktools.create_coinbase", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.create_block", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.p2p.P2PTxInvStore", "test_framework.messages.DEFAULT_MEMPOOL_EXPIRY_HOURS", "time"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["create_coinbase", "assert_raises_rpc_error", "P2PTxInvStore", "int", "assert_equal", "ResendWalletTransactionsTest", "create_block"], "class_names": ["ResendWalletTransactionsTest"], "class_method_calls": ["node.removeprunedfunds", "self.num_nodes", "node.syncwithvalidationinterfacequeue", "self.skip_if_no_wallet", "self.log", "self.add_wallet_options", "node.getblockcount", "node.getbestblockhash", "node.setmocktime", "node.add_p2p_connection", "node.getnewaddress", "block.serialize", "peer_second.get_invs", "node.listunspent", "block.solve", "time.time", "node.bumpfee", "node.mockscheduler", "node.getmempoolentry", "peer_second.wait_for_broadcast", "node.assert_debug_log", "node.submitblock", "node.listreceivedbyaddress", "self.nodes", "peer_first.wait_for_broadcast", "node.send"]}, "wallet_send.py": {"libraries": ["test_framework.authproxy.JSONRPCException", "test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.key.ECKey", "test_framework.util.assert_equal", "test_framework.descriptors.descsum_create", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_greater_than", "test_framework.messages.ser_compact_size", "test_framework.messages.WITNESS_SCALE_FACTOR", "test_framework.wallet_util.bytes_to_wif", "test_framework.util.count_bytes", "test_framework.util.assert_fee_amount", "itertools.product", "decimal.getcontext"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "test_send", "run_test"], "function_calls": ["count_bytes", "range", "product", "len", "sum", "WalletSendTest", "Decimal", "assert_greater_than", "descsum_create", "enumerate", "assert_equal", "bytes_to_wif", "getcontext", "next", "assert_fee_amount", "assert_raises_rpc_error", "ECKey", "ser_compact_size"], "class_names": ["WalletSendTest"], "class_method_calls": ["self.options", "ext_wallet.walletprocesspsbt", "self.num_nodes", "w0.listlockunspent", "w2.getrawchangeaddress", "self.skip_if_no_wallet", "w3.importdescriptors", "ext_fund.importdescriptors", "self.default_wallet_name", "w2.walletprocesspsbt", "self.log", "options.keys", "w0.getnewaddress", "self.add_wallet_options", "w1.getnewaddress", "w0.send", "w2.sethdseed", "from_wallet.getwalletinfo", "from_wallet.testmempoolaccept", "self.generate", "w2.getnewaddress", "self.test_send", "w2.getaddressinfo", "self.sync_mempools", "from_wallet.getbalances", "ext_fund.listunspent", "eckey.get_bytes", "to_wallet.getnewaddress", "ext_fund.walletprocesspsbt", "w4.importmulti", "from_wallet.getrawtransaction", "to_wallet.getbalances", "ext_fund.importmulti", "ext_fund.getaddressinfo", "ext_wallet.getnewaddress", "ext_wallet.send", "w3.importmulti", "w2.importdescriptors", "from_wallet.gettransaction", "w0.sendtoaddress", "self.nodes", "from_wallet.send", "self.extra_args", "eckey.generate", "w0.listunspent"]}, "wallet_sendall.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_greater_than", "decimal.getcontext"], "function_names": ["sendall_and_spend", "sendall_fails_on_low_fee", "sendall_with_minconf", "assert_tx_has_output", "sendall_specific_inputs", "sendall_invalid_amounts", "sendall_with_send_max", "gen_and_clean", "test_cleanup", "add_options", "sendall_watchonly_specific_inputs", "sendall_fails_with_transaction_too_large", "test_sendall_success", "assert_tx_has_outputs", "sendall_with_maxconf", "skip_test_if_missing_module", "set_test_params", "cleanup", "sendall_fails_on_high_fee", "sendall_split", "sendall_two_utxos", "sendall_fails_on_specific_inputs_with_send_max", "sendall_fails_on_no_address", "run_test", "sendall_negative_effective_value", "sendall_fails_on_missing_input", "sendall_duplicate_recipient", "wrapper", "assert_balance_swept_completely", "sendall_invalid_recipient_addresses", "add_utxos"], "function_calls": ["sum", "len", "SendallTest", "range", "Decimal", "assert_greater_than", "getcontext", "assert_equal", "AssertionError", "assert_raises_rpc_error", "func"], "class_names": ["SendallTest"], "class_method_calls": ["self.options", "dust_wallet.getbalances", "self.num_nodes", "self.recipient", "self.assert_tx_has_output", "self.split_target", "self.skip_if_no_wallet", "self.test_sendall_success", "self.default_wallet_name", "self.log", "self.add_wallet_options", "dust_wallet.unloadwallet", "self.remainder_target", "self.sendall_invalid_amounts", "self.assert_balance_swept_completely", "self.sendall_negative_effective_value", "self.wallet", "self.generate", "self.sendall_fails_on_specific_inputs_with_send_max", "self.sendall_fails_on_low_fee", "watchonly.sendall", "self.def_wallet", "self.sendall_and_spend", "self.add_utxos", "self.sendall_fails_on_no_address", "self.setup_clean_chain", "self.assert_tx_has_outputs", "watchonly.importdescriptors", "self.test_cleanup", "self.sendall_duplicate_recipient", "self.sendall_split", "self.sendall_with_minconf", "self.sendall_with_maxconf", "dust_wallet.getnewaddress", "self.sendall_invalid_recipient_addresses", "self.sendall_fails_on_high_fee", "self.sendall_specific_inputs", "self.sendall_fails_on_missing_input", "watchonly.importmulti", "self.sendall_fails_with_transaction_too_large", "self.gen_and_clean", "self.sendall_watchonly_specific_inputs", "self.nodes", "dust_wallet.sendall", "self.sendall_with_send_max", "self.sendall_two_utxos"]}, "wallet_signer.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "os", "test_framework.util.assert_raises_rpc_error", "platform", "test_framework.util.assert_greater_than"], "function_names": ["test_multiple_signers", "set_mock_result", "skip_test_if_missing_module", "add_options", "set_test_params", "mock_multi_signers_path", "mock_invalid_signer_path", "test_valid_signer", "test_invalid_signer", "clear_mock_result", "mock_signer_path", "run_test"], "function_calls": ["assert_greater_than", "assert_equal", "WalletSignerTest", "assert_raises_rpc_error", "open"], "class_names": ["WalletSignerTest"], "class_method_calls": ["hww.sendall", "mock_wallet.finalizepsbt", "self.num_nodes", "f.write", "self.disable_syscall_sandbox", "self.skip_if_no_wallet", "hww.bumpfee", "self.log", "self.add_wallet_options", "mock_wallet.walletprocesspsbt", "not_hww.setwalletflag", "platform.system", "mock_wallet.psbtbumpfee", "self.test_valid_signer", "self.generate", "self.clear_mock_result", "os.remove", "node.cwd", "self.set_mock_result", "hww.send", "hww.getwalletinfo", "hww.getrawchangeaddress", "mock_wallet.walletcreatefundedpsbt", "self.skip_if_no_external_signer", "self.test_invalid_signer", "self.mock_signer_path", "self.mock_multi_signers_path", "mock_wallet.importdescriptors", "hww.getaddressinfo", "self.is_bdb_compiled", "self.test_multiple_signers", "hww.testmempoolaccept", "mock_wallet.getwalletinfo", "mock_wallet.testmempoolaccept", "hww.walletdisplayaddress", "os.path", "not_hww.getwalletinfo", "self.mock_invalid_signer_path", "self.nodes", "self.restart_node", "hww.sendrawtransaction", "self.extra_args", "hww.getnewaddress"]}, "wallet_signmessagewithaddress.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["assert_raises_rpc_error", "SignMessagesWithAddressTest"], "class_names": ["SignMessagesWithAddressTest"], "class_method_calls": ["self.num_nodes", "self.nodes", "self.skip_if_no_wallet", "self.log", "self.add_wallet_options", "self.extra_args", "self.setup_clean_chain"]}, "wallet_signrawtransactionwithwallet.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.script.OP_CHECKLOCKTIMEVERIFY", "test_framework.messages.tx_from_hex", "test_framework.util.assert_equal", "test_framework.messages.CTxInWitness", "test_framework.util.assert_raises_rpc_error", "test_framework.script.OP_CHECKSEQUENCEVERIFY", "test_framework.script.OP_TRUE", "decimal.Decimal", "test_framework.util.find_vout_for_address", "test_framework.address.script_to_p2wsh", "test_framework.script.OP_DROP", "test_framework.script.CScript", "test_framework.blocktools.COINBASE_MATURITY", "decimal.getcontext"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "test_signing_with_missing_prevtx_info", "script_verification_error_test", "test_signing_with_cltv", "test_signing_with_csv", "test_with_lock_outputs", "run_test", "test_fully_signed_tx", "OP_1NEGATE_test"], "function_calls": ["len", "SignRawTransactionWithWalletTest", "find_vout_for_address", "CScript", "tx_from_hex", "Decimal", "dict", "script_to_p2wsh", "enumerate", "getcontext", "assert_equal", "CTxInWitness", "assert_raises_rpc_error"], "class_names": ["SignRawTransactionWithWalletTest"], "class_method_calls": ["self.test_fully_signed_tx", "self.generate", "self.script_verification_error_test", "self.num_nodes", "ctx.wit", "self.test_signing_with_csv", "self.OP_1NEGATE_test", "self.test_signing_with_cltv", "self.nodes", "self.skip_if_no_wallet", "self.log", "ctx.serialize_with_witness", "self.add_wallet_options", "self.test_signing_with_missing_prevtx_info", "self.test_with_lock_outputs", "self.setup_clean_chain"]}, "wallet_simulaterawtx.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "test_framework.util.assert_approx", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "setup_network", "run_test"], "function_calls": ["assert_approx", "Decimal", "SimulateTxTest", "assert_equal", "assert_raises_rpc_error"], "class_names": ["SimulateTxTest"], "class_method_calls": ["w0.getbalance", "w0.signrawtransactionwithwallet", "self.num_nodes", "node.decoderawtransaction", "node.createrawtransaction", "node.sendrawtransaction", "self.skip_if_no_wallet", "node.get_wallet_rpc", "self.add_wallet_options", "w1.getnewaddress", "w0.getnewaddress", "w1.getaddressinfo", "self.generate", "w1.simulaterawtransaction", "w1.getbalance", "self.setup_clean_chain", "w0.fundrawtransaction", "node.createwallet", "w2.importpubkey", "w0.simulaterawtransaction", "self.sync_all", "self.generatetoaddress", "self.no_op", "self.nodes", "w2.simulaterawtransaction", "self.setup_nodes"]}, "wallet_startup.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "setup_nodes", "run_test"], "function_calls": ["assert_equal", "set", "WalletStartupTest"], "class_names": ["WalletStartupTest"], "class_method_calls": ["self.num_nodes", "self.supports_cli", "self.skip_if_no_wallet", "self.add_nodes", "self.restart_node", "self.nodes", "self.log", "self.add_wallet_options", "self.start_nodes", "self.setup_clean_chain"]}, "wallet_taproot.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "uuid", "test_framework.descriptors.descsum_create", "test_framework.script.taproot_construct", "test_framework.script.OP_CHECKSIGADD", "test_framework.segwit_addr.encode_segwit_address", "test_framework.address.output_key_to_p2tr", "test_framework.key.H_POINT", "test_framework.script.OP_NUMEQUAL", "test_framework.script.MAX_PUBKEYS_PER_MULTI_A", "test_framework.script.CScript", "random", "test_framework.script.OP_CHECKSIG"], "function_names": ["make_addr", "skip_test_if_missing_module", "add_options", "key", "compute_taproot_address", "pk", "set_test_params", "do_test_addr", "do_test_psbt", "do_test_sendtoaddress", "do_test", "multi_a", "init_wallet", "setup_network", "make_desc", "run_test", "compute_raw_taproot_address"], "function_calls": ["range", "len", "output_key_to_p2tr", "key", "compute_taproot_address", "CScript", "WalletTaprootTest", "int", "Decimal", "pk", "descsum_create", "treefn", "assert_equal", "multi_a", "isinstance", "encode_segwit_address", "compute_raw_taproot_address", "taproot_construct"], "class_names": ["WalletTaprootTest"], "class_method_calls": ["bytes.fromhex", "addr_gen.getnewaddress", "addr_gen.importdescriptors", "self.num_nodes", "self.make_desc", "key_only_wallet.importdescriptors", "desc_a.startswith", "self.do_test_sendtoaddress", "args.append", "self.skip_if_no_wallet", "rpc_online.getnewaddress", "psbt_online.getnewaddress", "self.do_test_psbt", "self.log", "psbt_offline.importdescriptors", "self.add_wallet_options", "desc.startswith", "uuid.uuid4", "psbt_online.unloadwallet", "self.do_test", "wallet.walletprocesspsbt", "rpc_online.sendall", "rpc_online.unloadwallet", "random.randrange", "xkeys.sort", "self.extra_args", "pattern.startswith", "wallet.decodepsbt", "psbt_online.importdescriptors", "self.setup_clean_chain", "psbt_offline.walletprocesspsbt", "rpc_online.importdescriptors", "psbt_online.gettransaction", "psbt_online.walletcreatefundedpsbt", "pattern.replace", "pubs_tr_enabled.importdescriptors", "pubs_tr_enabled.unloadwallet", "rpc_online.sendtoaddress", "self.boring", "random.sample", "rpc_online.getbalance", "pat.replace", "psbt_online.getbalance", "privs_tr_enabled.unloadwallet", "self.generatetoaddress", "psbt_online.sendall", "self.no_op", "self.skip_if_no_sqlite", "addr_gen.unloadwallet", "addr_gen.getaddressinfo", "self.supports_cli", "self.do_test_addr", "self.nodes", "rpc_online.gettransaction", "privs_tr_enabled.importdescriptors", "self.setup_nodes", "psbt_offline.unloadwallet", "self.make_addr"]}, "wallet_timelock.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["WalletLocktimeTest", "assert_equal"], "class_names": ["WalletLocktimeTest"], "class_method_calls": ["node.getbalances", "node.listreceivedbylabel", "node.getreceivedbylabel", "self.generate", "node.listunspent", "node.getbestblockhash", "self.num_nodes", "node.listreceivedbyaddress", "node.setmocktime", "self.nodes", "self.skip_if_no_wallet", "node.send", "node.getreceivedbyaddress", "node.getblockheader", "self.add_wallet_options", "self.log", "node.getnewaddress"]}, "wallet_transactiontime_rescan.py": {"libraries": ["test_framework.wallet_util.get_generate_key", "test_framework.authproxy.JSONRPCException", "test_framework.test_framework.BitcoinTestFramework", "test_framework.util.assert_equal", "test_framework.util.assert_raises_rpc_error", "concurrent.futures", "test_framework.util.set_node_times", "test_framework.blocktools.COINBASE_MATURITY", "time"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["len", "range", "set_node_times", "get_generate_key", "int", "assert_equal", "TransactionTimeRescanTest", "assert_raises_rpc_error"], "class_names": ["TransactionTimeRescanTest"], "class_method_calls": ["self.options", "encrypted_wallet.getbalance", "self.num_nodes", "restorenode.createwallet", "miner_wallet.sendtoaddress", "self.skip_if_no_wallet", "self.log", "self.add_wallet_options", "temp_wallet.getnewaddress", "restorenode.get_wallet_rpc", "restorewo_wallet.rescanblockchain", "restorewo_wallet.getbalance", "minernode.assert_debug_log", "minernode.cli", "minernode.get_wallet_rpc", "encrypted_wallet.rescanblockchain", "self.setup_clean_chain", "miner_wallet.getnewaddress", "time.time", "concurrent.futures", "enc_wallet.rescanblockchain", "self.sync_all", "minernode.createwallet", "usernode.getnewaddress", "self.generatetoaddress", "minernode.getblockcount", "encrypted_wallet.walletpassphrase", "usernode.createwallet", "wo_wallet.listtransactions", "wo_wallet.getbalance", "restorewo_wallet.importaddress", "usernode.get_wallet_rpc", "restorewo_wallet.listtransactions", "temp_wallet.sethdseed", "encrypted_wallet.sethdseed", "self.nodes", "temp_wallet.getbalance", "rescanning.result", "e.error", "self.extra_args", "wo_wallet.importaddress", "thread.submit"]}, "wallet_txn_clone.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.tx_from_hex", "test_framework.util.assert_equal", "test_framework.util.find_vout_for_address", "test_framework.messages.COIN"], "function_names": ["skip_test_if_missing_module", "add_options", "set_test_params", "spend_txid", "setup_network", "run_test"], "function_calls": ["range", "TxnMallTest", "find_vout_for_address", "tx_from_hex", "assert_equal", "super"], "class_names": ["TxnMallTest"], "class_method_calls": ["self.options", "parser.add_argument", "self.disconnect_nodes", "self.generate", "self.no_op", "self.num_nodes", "self.supports_cli", "self.skip_if_no_wallet", "self.nodes", "self.sync_blocks", "clone_tx.vout", "self.add_wallet_options", "clone_tx.serialize", "self.spend_txid", "self.connect_nodes"]}, "wallet_txn_doublespend.py": {"libraries": ["test_framework.test_framework.BitcoinTestFramework", "decimal.Decimal", "test_framework.util.assert_equal", "test_framework.util.find_vout_for_address", "test_framework.util.find_output"], "function_names": ["skip_test_if_missing_module", "add_options", "set_test_params", "spend_txid", "setup_network", "run_test"], "function_calls": ["range", "TxnMallTest", "find_vout_for_address", "Decimal", "find_output", "assert_equal", "super"], "class_names": ["TxnMallTest"], "class_method_calls": ["self.options", "parser.add_argument", "self.disconnect_nodes", "self.generate", "self.no_op", "self.num_nodes", "n.getblockchaininfo", "self.supports_cli", "self.skip_if_no_wallet", "self.nodes", "self.sync_blocks", "self.add_wallet_options", "self.spend_txid", "self.connect_nodes"]}, "wallet_upgradewallet.py": {"libraries": ["struct", "test_framework.test_framework.BitcoinTestFramework", "test_framework.messages.deser_string", "io.BytesIO", "test_framework.util.assert_equal", "os", "test_framework.messages.deser_compact_size", "test_framework.util.sha256sum_file", "test_framework.util.assert_is_hex_string", "test_framework.bdb.dump_bdb_kv", "shutil", "test_framework.blocktools.COINBASE_MATURITY"], "function_names": ["skip_test_if_missing_module", "set_test_params", "add_options", "copy_non_hd", "test_upgradewallet_error", "test_upgradewallet", "copy_split_hd", "copy_v16", "setup_nodes", "dumb_sync_blocks", "setup_network", "run_test", "deser_keymeta"], "function_calls": ["range", "len", "assert_is_hex_string", "copy_non_hd", "deser_compact_size", "int", "copy_split_hd", "copy_v16", "assert_equal", "bytearray", "dump_bdb_kv", "UpgradeWalletTest", "BytesIO", "bool", "deser_keymeta", "deser_string", "sha256sum_file"], "class_names": ["UpgradeWalletTest"], "class_method_calls": ["v16_3_node.datadir", "self.num_nodes", "wallet.unloadwallet", "f.read", "wallet.getbalance", "v15_2_node.datadir", "self.skip_if_no_wallet", "self.test_upgradewallet", "wallet.getrawchangeaddress", "self.default_wallet_name", "self.log", "path.append", "built_path.append", "self.add_wallet_options", "seed_id.reverse", "node_master.loadwallet", "self.skip_if_no_previous_releases", "v16_3_wallet.getnewaddress", "seed_id.hex", "self.test_upgradewallet_error", "k.startswith", "wallet.getnewaddress", "struct.unpack", "self.add_nodes", "self.extra_args", "self.dumb_sync_blocks", "shutil.rmtree", "self.setup_clean_chain", "v16_3_node.get_wallet_rpc", "self.wallet_names", "wallet.getwalletinfo", "node_from.getblockcount", "v16_3_wallet.getbalance", "v16_3_node.submitblock", "new_kp_str.decode", "os.mkdir", "wallet.upgradewallet", "self.start_node", "shutil.copy", "wallet.getaddressinfo", "node_from.getblock", "self.is_bdb_compiled", "old_kvs.items", "self.skip_if_no_bdb", "self.stop_node", "self.generatetoaddress", "node_master.datadir", "self.wallet_data_filename", "self.import_deterministic_coinbase_privkeys", "v16_3_node.getblockcount", "node_master.get_wallet_rpc", "os.path", "node_from.getblockhash", "self.nodes", "self.is_sqlite_compiled", "self.restart_node", "self.stop_nodes", "self.setup_nodes", "self.start_nodes"]}, "wallet_watchonly.py": {"libraries": ["test_framework.util.assert_raises_rpc_error", "test_framework.test_framework.BitcoinTestFramework", "test_framework.blocktools.COINBASE_MATURITY", "test_framework.util.assert_equal"], "function_names": ["set_test_params", "run_test", "skip_test_if_missing_module", "add_options"], "function_calls": ["assert_equal", "CreateWalletWatchonlyTest", "assert_raises_rpc_error", "len"], "class_names": ["CreateWalletWatchonlyTest"], "class_method_calls": ["self.num_nodes", "def_wallet.getaddressinfo", "wo_wallet.sendmany", "wo_wallet.listsinceblock", "self.skip_if_no_wallet", "node.get_wallet_rpc", "self.log", "self.add_wallet_options", "wo_wallet.sendtoaddress", "self.generate", "wo_wallet.gettransaction", "def_wallet.sendtoaddress", "wo_wallet.walletcreatefundedpsbt", "wo_wallet.createrawtransaction", "wo_wallet.listreceivedbylabel", "self.generatetoaddress", "wo_wallet.importpubkey", "wo_wallet.listreceivedbyaddress", "wo_wallet.listtransactions", "wo_wallet.getbalance", "self.nodes", "wo_wallet.fundrawtransaction", "def_wallet.getnewaddress"]}, "get_previous_releases.py": {"libraries": ["os", "argparse", "hashlib", "subprocess", "fnmatch.fnmatch", "contextlib", "shutil", "re", "pathlib.Path", "sys"], "function_names": ["download_binary", "build_release", "main", "check_host", "pushd"], "function_calls": ["sorted", "set", "fnmatch", "build_release", "download_binary", "main", "print", "check_host", "Path", "pushd", "open"], "class_names": [], "class_method_calls": ["subprocess.run", "args.platform", "hasher.hexdigest", "re.compile", "contextlib.contextmanager", "os.listdir", "argparse.ArgumentDefaultsHelpFormatter", "sys.exit", "afile.read", "hashlib.sha256", "os.chdir", "match.group", "args.config_flags", "args.tags", "hasher.update", "args.remove_dir", "cmd.split", "platforms.items", "shutil.rmtree", "args.depends", "subprocess.DEVNULL", "parser.parse_args", "subprocess.PIPE", "re.search", "args.host", "os.getcwd", "header.decode", "subprocess.check_output", "SHA256_SUMS.values", "args.target_dir", "subprocess.Popen", "args.download_binary", "parser.add_argument", "argparse.ArgumentParser", "os.environ"]}, "all-lint.py": {"libraries": ["subprocess.run", "pathlib.Path", "glob.glob", "sys.executable"], "function_names": [], "function_calls": ["run", "glob", "print", "Path", "exit"], "class_names": [], "class_method_calls": ["lint.split", "result.returncode"]}, "check-doc.py": {"libraries": ["subprocess.check_output", "re"], "function_names": ["lint_missing_argument_documentation", "main", "lint_missing_hidden_wallet_args"], "function_calls": ["len", "set", "lint_missing_argument_documentation", "main", "print", "lint_missing_hidden_wallet_args", "check_output"], "class_names": [], "class_method_calls": ["args_docd.difference", "args_used.difference", "re.compile", "re.findall", "wallet_args.difference"]}, "lint-assertions.py": {"libraries": ["subprocess", "sys"], "function_names": ["git_grep", "main"], "function_calls": ["git_grep", "main", "print"], "class_names": [], "class_method_calls": ["subprocess.check_output", "ex1.returncode", "subprocess.CalledProcessError", "sys.exit"]}, "lint-circular-dependencies.py": {"libraries": ["sys", "re", "subprocess", "os"], "function_names": ["main"], "function_calls": ["main", "print"], "class_names": [], "class_method_calls": ["subprocess.run", "os.chdir", "subprocess.PIPE", "circular_dependencies.append", "re.sub", "sys.stderr", "sys.exit", "subprocess.check_output", "dependencies_output.stdout", "sys.executable"]}, "lint-files.py": {"libraries": ["os", "typing.Dict", "typing.NoReturn", "typing.Optional", "subprocess.check_output", "re", "sys"], "function_names": ["__init__", "check_shebang_file_permissions", "main", "check_source_filenames", "check_all_filenames", "check_all_file_permissions", "get_git_file_metadata", "full_extension", "extension"], "function_calls": ["check_shebang_file_permissions", "int", "main", "str", "FileMeta", "print", "repr", "check_source_filenames", "check_all_filenames", "check_all_file_permissions", "check_output", "get_git_file_metadata", "open"], "class_names": ["FileMeta"], "class_method_calls": ["re.match", "f.read", "re.compile", "filename_regex.match", "sys.exit", "file_meta.permissions", "self.file_path", "files.items", "f.readline", "os.chdir", "meta.split", "shebang.startswith", "file_meta.full_extension", "files.keys", "ALLOWED_EXECUTABLE_SHEBANG.keys", "file_meta.extension", "re.search", "x.decode", "meta.file_path", "self.permissions", "re.IGNORECASE", "filename.split", "os.extsep", "filename_exception_regex.match", "os.path", "file_spec.split"]}, "lint-format-strings.py": {"libraries": ["re", "subprocess", "sys"], "function_names": ["get_matching_files", "check_doctest", "main"], "function_calls": ["main", "check_doctest", "print", "get_matching_files"], "class_names": [], "class_method_calls": ["subprocess.run", "e.returncode", "s.split", "subprocess.STDOUT", "re.search", "subprocess.CalledProcessError", "matching_files_filtered.sort", "run_lint_args.extend", "matching_files_filtered.append", "sys.exit", "subprocess.check_output", "e.output", "sys.executable"]}, "lint-git-commit-check.py": {"libraries": ["subprocess.check_output", "argparse", "sys", "os"], "function_names": ["main", "parse_args"], "function_calls": ["len", "main", "print", "check_output", "parse_args"], "class_names": [], "class_method_calls": ["args.prev_commits", "parser.add_argument", "sys.argv", "parser.parse_args", "argparse.ArgumentParser", "os.getenv", "sys.exit"]}, "lint-include-guards.py": {"libraries": ["subprocess.check_output", "re", "typing.List", "sys"], "function_names": ["_get_header_file_lst", "main", "_get_header_id"], "function_calls": ["_get_header_file_lst", "len", "any", "main", "print", "_get_header_id", "check_output", "open"], "class_names": [], "class_method_calls": ["f.readlines", "header_file.split", "header_id_base.upper", "re.findall", "header_id_base.replace", "sys.exit"]}, "lint-includes.py": {"libraries": ["os", "subprocess.CalledProcessError", "subprocess.check_output", "re", "sys"], "function_names": ["find_extra_boosts", "find_duplicate_includes", "get_toplevel", "find_included_cpps", "main", "list_files_by_suffix", "find_quote_syntax_inclusions"], "function_calls": ["list", "set", "find_extra_boosts", "find_included_cpps", "get_toplevel", "main", "find_duplicate_includes", "print", "check_output", "list_files_by_suffix", "open", "find_quote_syntax_inclusions"], "class_names": [], "class_method_calls": ["re.match", "e.returncode", "os.chdir", "file.endswith", "filtered_included_boost_set.difference", "line.rstrip", "duplicates.add", "exclusion_set.add", "re.findall", "sys.exit", "tempset.add", "filtered_included_boost_set.add"]}, "lint-locale-dependence.py": {"libraries": ["subprocess.check_output", "re", "subprocess.CalledProcessError", "sys"], "function_names": ["main", "find_locale_dependent_function_uses"], "function_calls": ["list", "find_locale_dependent_function_uses", "main", "print", "check_output"], "class_names": [], "class_method_calls": ["sys.argv", "e.returncode", "re.search", "sys.exit"]}, "lint-logs.py": {"libraries": ["subprocess.check_output", "re", "sys"], "function_names": ["main"], "function_calls": ["main", "print", "check_output"], "class_names": [], "class_method_calls": ["re.search", "sys.exit"]}, "lint-python-dead-code.py": {"libraries": ["subprocess.check_output", "subprocess.STDOUT", "subprocess.CalledProcessError"], "function_names": ["check_vulture_install", "main"], "function_calls": ["check_vulture_install", "main", "print", "check_output", "exit"], "class_names": [], "class_method_calls": ["e.output"]}, "lint-python-mutable-default-parameters.py": {"libraries": ["subprocess", "sys"], "function_names": ["main", "example"], "function_calls": ["len", "main", "print", "example"], "class_names": [], "class_method_calls": ["subprocess.run", "output.stdout", "subprocess.PIPE", "sys.exit"]}, "lint-python-utf8-encoding.py": {"libraries": ["subprocess.check_output", "re", "subprocess.CalledProcessError", "sys"], "function_names": ["check_checked_outputs", "get_exclude_args", "check_fileopens", "main"], "function_calls": ["list", "main", "print", "check_fileopens", "check_checked_outputs", "check_output", "get_exclude_args"], "class_names": [], "class_method_calls": ["e.returncode", "re.search", "sys.exit"]}, "lint-python.py": {"libraries": ["sys", "subprocess", "pkg_resources", "os"], "function_names": ["main", "check_dependencies"], "function_calls": ["len", "main", "print", "check_dependencies", "exit"], "class_names": [], "class_method_calls": ["subprocess.check_call", "sys.argv", "subprocess.CalledProcessError", "os.environ", "os.getenv", "subprocess.check_output", "pkg.key", "pkg_resources.working_set"]}, "lint-shell-locale.py": {"libraries": ["re", "subprocess", "sys"], "function_names": ["get_shell_files_list", "main"], "function_calls": ["open", "get_shell_files_list", "main", "print"], "class_names": [], "class_method_calls": ["e.returncode", "subprocess.STDOUT", "re.search", "re.compile", "subprocess.CalledProcessError", "re.findall", "e.output", "file_obj.read", "sys.exit", "subprocess.check_output", "re.MULTILINE"]}, "lint-shell.py": {"libraries": ["re", "subprocess", "sys"], "function_names": ["get_files", "main", "check_shellcheck_install"], "function_calls": ["list", "main", "print", "check_shellcheck_install", "get_files", "filter"], "class_names": [], "class_method_calls": ["subprocess.check_call", "subprocess.run", "subprocess.DEVNULL", "reg.match", "subprocess.PIPE", "subprocess.CalledProcessError", "re.compile", "output.stdout", "sys.exit", "shellcheck_cmd.extend", "shellcheck_cmd.append"]}, "lint-spelling.py": {"libraries": ["subprocess.check_output", "subprocess.STDOUT", "subprocess.CalledProcessError"], "function_names": ["main", "check_codespell_install"], "function_calls": ["main", "print", "check_output", "exit", "check_codespell_install"], "class_names": [], "class_method_calls": ["e.output"]}, "lint-submodule.py": {"libraries": ["subprocess", "sys"], "function_names": ["main"], "function_calls": ["main", "print"], "class_names": [], "class_method_calls": ["subprocess.check_output", "sys.exit"]}, "lint-tests.py": {"libraries": ["re", "subprocess", "sys"], "function_names": ["check_unique_test_names", "grep_boost_fixture_test_suite", "get_duplicates", "main", "check_matching_test_names"], "function_calls": ["len", "list", "set", "sorted", "check_unique_test_names", "grep_boost_fixture_test_suite", "get_duplicates", "main", "print", "check_matching_test_names"], "class_names": [], "class_method_calls": ["dupes.add", "x.group", "re.search", "seen.add", "sys.exit", "subprocess.check_output"]}, "lint-whitespace.py": {"libraries": ["os", "argparse", "subprocess.check_output", "re", "sys"], "function_names": ["get_diff", "report_diff", "main", "parse_args"], "function_calls": ["len", "report_diff", "main", "print", "check_output", "get_diff", "parse_args"], "class_names": [], "class_method_calls": ["args.prev_commits", "parser.add_argument", "re.match", "tab_selection.append", "parser.parse_args", "sys.argv", "argparse.ArgumentParser", "i.startswith", "whitespace_selection.append", "os.getenv", "sys.exit"]}, "run-lint-format-strings.py": {"libraries": ["argparse", "re", "sys"], "function_names": ["normalize", "parse_function_call_and_arguments", "parse_string_content", "main", "escape", "unescape", "parse_function_calls", "count_format_specifiers"], "function_calls": ["len", "normalize", "main", "parse_function_call_and_arguments", "parse_string_content", "escape", "enumerate", "unescape", "print", "parse_function_calls", "open", "count_format_specifiers", "type"], "class_names": [], "class_method_calls": ["re.sub", "f.read", "f.name", "ESCAPE_MAP.items", "format_string.replace", "sys.exit", "args.file", "parts.append", "parser.parse_args", "re.findall", "source_code.split", "args.function_name", "parser.add_argument", "s.replace", "argparse.ArgumentParser", "args.skip_arguments", "line.strip", "s.strip", "remaining.startswith", "parts.pop"]}, "rpcauth-test.py": {"libraries": ["os", "importlib", "configparser", "unittest", "hmac", "re", "sys"], "function_names": ["setUp", "test_check_password_hmac", "test_generate_password", "test_generate_salt"], "function_calls": ["range", "open", "len"], "class_names": ["TestRPCAuth"], "class_method_calls": ["self.assertEqual", "unittest.TestCase", "hmac.new", "r.fullmatch", "m.hexdigest", "importlib.import_module", "sys.path", "self.assertTrue", "config.read_file", "re.compile", "os.path", "self.rpcauth", "salt.encode", "unittest.main", "configparser.ConfigParser", "os.sep", "password.encode"]}}