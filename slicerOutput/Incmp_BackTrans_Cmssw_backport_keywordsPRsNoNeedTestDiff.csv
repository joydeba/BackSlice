"tauGenJetsForNano = tauGenJets.clone(
    GenParticles = ""finalGenParticles"",
    includeNeutrinos = False
)
tauGenJetsSelectorAllHadronsForNano = tauGenJetsSelectorAllHadrons.clone(
    src = ""tauGenJetsForNano""
)
    src = cms.InputTag(""tauGenJetsSelectorAllHadronsForNano""),
"
-------------------------------------------------------------------------
"tauGenJets.GenParticles = ""finalGenParticles""
tauGenJets.includeNeutrinos = False

tauGenJetsSelectorAllHadrons.src = ""tauGenJets""
src = cms.InputTag(""tauGenJetsSelectorAllHadrons"")"
-------------------------------------------------------------------------
"tauGenJetsForNano = tauGenJets.clone(
    GenParticles = ""finalGenParticles"",
    includeNeutrinos = False
)
(run2_nanoAOD_106Xv1 & ~run2_nanoAOD_devel).toModify(tauGenJetsForNano, GenParticles = ""prunedGenParticles"")
tauGenJetsSelectorAllHadronsForNano = tauGenJetsSelectorAllHadrons.clone(
    src = ""tauGenJetsForNano""
)
    src = cms.InputTag(""tauGenJetsSelectorAllHadronsForNano""),
"
-------------------------------------------------------------------------
"Recom
PRs: 33522, 33525"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '113X_mcRun1_design_v2',
'run1_mc'           :   '113X_mcRun1_realistic_v2',
'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v2',
'run1_mc_pa'        :   '113X_mcRun1_pA_v2',
"
-------------------------------------------------------------------------
"'run1_design'       :   '113X_mcRun1_design_v2',
    'run1_mc'           :   '113X_mcRun1_realistic_v2',
    'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v2',
    'run1_mc_pa'        :   '113X_mcRun1_pA_v2',"
-------------------------------------------------------------------------
"'run1_design'       :   '112X_mcRun1_design_v2',
'run1_mc'           :   '112X_mcRun1_realistic_v2',
'run1_mc_hi'        :   '112X_mcRun1_HeavyIon_v2',
'run1_mc_pa'        :   '112X_mcRun1_pA_v3',
"
-------------------------------------------------------------------------
"Recom
PRs: 33142, 33158"
-------------------------------------------------------------------------
=========================================================================
"'phase2_realistic'         : '113X_mcRun4_realistic_v6'
"
-------------------------------------------------------------------------
"# GlobalTag for MC production with realistic conditions for Phase2
    'phase2_realistic'         : '113X_mcRun4_realistic_v6'"
-------------------------------------------------------------------------
"'phase2_realistic'         : '112X_mcRun4_realistic_v7'
"
-------------------------------------------------------------------------
"Recom
PRs: 33142, 33158"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '113X_mc2017_design_v4',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v4',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '113X_upgrade2018_design_v4',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v4',
'phase1_2018_realistic_rd' :  '113X_upgrade2018_realistic_RD_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v4',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v4',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v4',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v4',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v7', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v6',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v5',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v5', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v5', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '113X_mc2017_design_v4',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v4',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '113X_upgrade2018_design_v4',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v4',
'phase1_2018_realistic_HI' :  '113X_upgrade2018_realistic_HI_v4',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v4',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v4',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v4',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v7', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v6',
'phase1_2021_realistic_HI' : '113X_mcRun3_2021_realistic_HI_v5',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v5', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v5', # GT containing realistic conditions for Phase1 2024"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '112X_mc2017_design_v4',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v6',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v6',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v6',
'phase1_2018_design'       :  '112X_upgrade2018_design_v6',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v9',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v9',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v9',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v9',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v9',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v14', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v17', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v17',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v17',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v17', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v17', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 32959, 33011"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '113X_mc2017_design_v2',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '113X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v2',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v3',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '113X_mcRun4_realistic_v2'
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '113X_mc2017_design_v2',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '113X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v2',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v3',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '113X_mcRun4_realistic_v2'"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '111X_mc2017_design_v3',
'phase1_2017_realistic'    :  '111X_mc2017_realistic_v3',
'phase1_2017_cosmics'      :  '111X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '111X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '111X_upgrade2018_design_v3',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v3',
'phase1_2018_realistic_hi' :  '111X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v3',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v3',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v3',
'phase1_2021_design'       : '111X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v8', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v8',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v10',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v7', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v7', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '111X_mcRun4_realistic_T15_v3'
"
-------------------------------------------------------------------------
"Recom
PRs: 32513, 32533"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2017_design'       :  '113X_mc2017_design_v2',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '113X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v2',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v3',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '113X_mcRun4_realistic_v2'
"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '113X_mc2017_design_v2',
'phase1_2017_realistic'    :  '113X_mc2017_realistic_v2',
'phase1_2017_cosmics'      :  '113X_mc2017cosmics_realistic_deco_v2',
'phase1_2017_cosmics_peak' :  '113X_mc2017cosmics_realistic_peak_v2',
'phase1_2018_design'       :  '113X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '113X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '113X_upgrade2018_realistic_HI_v2',
'phase1_2018_realistic_HEfail' :  '113X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :  '113X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :  '113X_upgrade2018cosmics_realistic_peak_v2',
'phase1_2021_design'       : '113X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '113X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '113X_mcRun3_2021cosmics_realistic_deco_v3',
'phase1_2021_realistic_hi' : '113X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '113X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '113X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '113X_mcRun4_realistic_v2'"
-------------------------------------------------------------------------
"'phase1_2017_design'       :  '112X_mc2017_design_v2',
'phase1_2017_realistic'    :  '112X_mc2017_realistic_v4',
'phase1_2017_cosmics'      :  '112X_mc2017cosmics_realistic_deco_v4',
'phase1_2017_cosmics_peak' :  '112X_mc2017cosmics_realistic_peak_v4',
'phase1_2018_design'       :  '112X_upgrade2018_design_v4',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v7',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v7',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v7',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v7',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v7',
'phase1_2021_design'       : '112X_mcRun3_2021_design_v12', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v14', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v14',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v14',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v14', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v14', # GT containing realistic conditions for Phase1 2024
'phase2_realistic'         : '112X_mcRun4_realistic_v5'
"
-------------------------------------------------------------------------
"Recom
PRs: 32513, 32532"
-------------------------------------------------------------------------
=========================================================================
"'run1_design'       :   '113X_mcRun1_design_v1',
'run1_mc'           :   '113X_mcRun1_realistic_v1',
'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v1',
'run1_mc_pa'        :   '113X_mcRun1_pA_v1',
'run2_mc_50ns'      :   '113X_mcRun2_startup_v1',
'run2_mc_l1stage1'  :   '113X_mcRun2_asymptotic_l1stage1_v1',
'run2_design'       :   '113X_mcRun2_design_v1',
"
-------------------------------------------------------------------------
"# GlobalTag for MC production with perfectly aligned and calibrated detector for Run1
    'run1_design'       :   '113X_mcRun1_design_v1',
    # GlobalTag for MC production (pp collisions) with realistic alignment and calibrations for Run1
    'run1_mc'           :   '113X_mcRun1_realistic_v1',
    # GlobalTag for MC production (Heavy Ions collisions) with realistic alignment and calibrations for Run1
    'run1_mc_hi'        :   '113X_mcRun1_HeavyIon_v1',
    # GlobalTag for MC production (p-Pb collisions) with realistic alignment and calibrations for Run1
    'run1_mc_pa'        :   '113X_mcRun1_pA_v1',
    # GlobalTag for MC production with pessimistic alignment and calibrations for Run2
    'run2_mc_50ns'      :   '113X_mcRun2_startup_v1',
    # GlobalTag for MC production (L1 Trigger Stage1) with starup-like alignment and calibrations for Run2, L1 trigger in Stage1 mode
    'run2_mc_l1stage1'  :   '113X_mcRun2_asymptotic_l1stage1_v1',
    # GlobalTag for MC production with perfectly aligned and calibrated detector for Run2
    'run2_design'       :   '113X_mcRun2_design_v1',"
-------------------------------------------------------------------------
"'run1_design'       :   '106X_mcRun1_design_v4',
'run1_mc'           :   '106X_mcRun1_realistic_v4',
'run1_mc_hi'        :   '106X_mcRun1_HeavyIon_v4',
'run1_mc_pa'        :   '106X_mcRun1_pA_v4',
'run2_mc_50ns'      :   '106X_mcRun2_startup_v5',
'run2_mc_l1stage1'  :   '106X_mcRun2_asymptotic_l1stage1_v5',
'run2_design'       :   '106X_mcRun2_design_v8',
'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v10',
'run2_mc'           :   '106X_mcRun2_asymptotic_v16',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_asymptotic_deco_v3',
'run2_mc_hi'        :   '106X_mcRun2_HeavyIon_v5',
'run2_mc_pa'        :   '106X_mcRun2_pA_v6',
'run1_data'         :   '106X_dataRun2_v33',
'run2_data'         :   '106X_dataRun2_v33',
'run2_data_relval'  :   '106X_dataRun2_relval_v31',
'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v14',
'run2_data_promptlike'    : '106X_dataRun2_PromptLike_v15',
'run2_data_promptlike_hi' : '106X_dataRun2_PromptLike_HI_v15',
"
-------------------------------------------------------------------------
"Recom
PRs: 32421, 32435"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v6',
'run2_data'         :   '112X_dataRun2_v6',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v6',
'run2_data_relval'  :   '112X_dataRun2_relval_v6',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v30',
        'run2_data'         :   '106X_dataRun2_v30',
        'run2_data_promptlike_HEfail' : '106X_dataRun2_PromptLike_HEfail_v13',
        'run2_data_relval'  :   '106X_dataRun2_relval_v28',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v31',
'run2_data'         :   '106X_dataRun2_v31',
'run2_data_relval'  :   '106X_dataRun2_relval_v29',
"
-------------------------------------------------------------------------
"Recom
PRs: 32169, 32170"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v5',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v5',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v5',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v5',
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v12', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v12',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v12', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v12', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v5',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v5',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v5',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v5',
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v12', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v12',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v12', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v12', # GT containing realistic conditions for Phase1 2024"
-------------------------------------------------------------------------
"'phase1_2018_realistic'    :  '106X_upgrade2018_realistic_v13',
'phase1_2018_realistic_HEfail' :  '106X_upgrade2018_realistic_HEfail_v14',
'phase1_2018_cosmics'      :   '106X_upgrade2018cosmics_realistic_deco_v11',
'phase1_2018_cosmics_peak' :   '106X_upgrade2018cosmics_realistic_peak_v11',
"
-------------------------------------------------------------------------
"Recom
PRs: 32169, 32170"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v2',
'run2_data'         :   '112X_dataRun2_v2',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '112X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v29',
'run2_data'         :   '106X_dataRun2_v29',
'run2_data_HEfail'  :   '106X_dataRun2_HEfail_v13',
'run2_data_relval'  :   '106X_dataRun2_relval_v27',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v30',
'run2_data'         :   '106X_dataRun2_v30',
'run2_data_relval'  :   '106X_dataRun2_relval_v28',
"
-------------------------------------------------------------------------
"Recom
PRs: 30478, 32120"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v4',
'run2_data'         :   '112X_dataRun2_v4',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '112X_dataRun2_relval_v4',
"
-------------------------------------------------------------------------
"'run1_data'         :   '112X_dataRun2_v4',
'run2_data'         :   '112X_dataRun2_v4',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '112X_dataRun2_relval_v4',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v29',
'run2_data'         :   '106X_dataRun2_v29',
'run2_data_relval'  :   '106X_dataRun2_relval_v27',
"
-------------------------------------------------------------------------
"Recom
PRs: 31635, 31702"
-------------------------------------------------------------------------
=========================================================================
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '
"
-------------------------------------------------------------------------
"def findXrdDir(theDirRecord):

    elements = theDirRecord.split(' ')
    if len(elements) > 1:
        return elements[-1].rstrip('\n').split('/')[-1]
    else:
        return None"
-------------------------------------------------------------------------
"defaultEOSlistCommand = 'xrdfs root://eoscms.cern.ch ls '
defaultEOSmkdirCommand = 'xrdfs root://eoscms.cern.ch mkdir '
defaultEOSfeCommand = 'xrdfs root://eoscms.cern.ch stat -q IsReadable '
    if len(elements):
"
-------------------------------------------------------------------------
"Recom
PRs: 31553, 31587"
-------------------------------------------------------------------------
=========================================================================
"# TkAlMap inFile=tree.root compAl=UL2018 refAl=StartGeom savePNG=True TkVersion=phase1 outDir=./test_plots/tanh colPal=2
range_str = ''
plottedDifferences = [""dx"",""dy"",""dz"",""dr"",""rdphi"",""dalpha"",""dbeta"",""dgamma""]
for diff in plottedDifferences:
    range_str = diff'_range=['str(repMap[diff'_min'])','str(repMap[diff'_max'])'];'
repMap[""runComparisonScripts""] = \
    (""mkdir -p .oO[datadir]Oo./.oO[name]Oo.""
     "".Comparison_common""name""_Images/TkAlMapPlots\n"")
repMap[""runComparisonScripts""] = \
    (""python .oO[Alignment/OfflineValidation]Oo./python/runGCPTkAlMap.py -b "" 
     ""inFile=.oO[name]Oo..Comparison_common""name"".root ""
     ""refAl=\"".oO[reference]Oo.\"" "" 
     ""compAl=\"".oO[alignmentName]Oo.\"" ""
     ""savePNG=True ""
     ""TkVersion=\""phase0\"" ""
     ""colPal=2 ""
     ""defRanges=\""""range_str""\"" ""
     ""outDir=.oO[datadir]Oo./.oO[name]Oo..Comparison_common""name""_Images/TkAlMapPlots\n"")
     #""outDir=.oO[name]Oo..""name""_TkMapPlots ""
     #""useDefaultRanges=.oO[useDefaultRange]Oo. ""range_str""\n"")
# Copy root file for check
repMap[""runComparisonScripts""] = \
    (""cp .oO[name]Oo..Comparison_common""name"".root ""
     "".oO[datadir]Oo./.oO[name]Oo..Comparison_common""name""_Images/TkAlMapPlots/GCP.root\n"")
#repMap[""runComparisonScripts""] = \
#    (""cp .oO[alignmentName]Oo.ROOTGeometry.root ""
#     "".oO[datadir]Oo./.oO[name]Oo..Comparison_common""name""_Images/TkAlMapPlots/comparedGeometry.root\n"")
"
-------------------------------------------------------------------------
"plottedDifferences = [""dx"",""dy"",""dz"",""dr"",""rdphi"",""dalpha"",""dbeta"",""dgamma""]
range_str = ''
for diff in plottedDifferences:
    range_str += diff + '_range=[' + str(repMap[diff + '_min']) + ',' + str(repMap[diff + '_max']) + '];'

repMap[""runComparisonScripts""] = ""mkdir -p .oO[datadir]Oo./.oO[name]Oo..Comparison_common"" + name + ""_Images/TkAlMapPlots\n""

repMap[""runComparisonScripts""] = (""python .oO[Alignment/OfflineValidation]Oo./python/runGCPTkAlMap.py -b "" 
                                  ""inFile=.oO[name]Oo..Comparison_common"" + name + "".root ""
                                  ""refAl=\"".oO[reference]Oo.\"" "" 
                                  ""compAl=\"".oO[alignmentName]Oo.\"" ""
                                  ""savePNG=True ""
                                  ""TkVersion=\""phase0\"" ""
                                  ""colPal=2 ""
                                  ""defRanges=\"""" + range_str + ""\"" ""
                                  ""outDir=.oO[datadir]Oo./.oO[name]Oo..Comparison_common"" + name + ""_Images/TkAlMapPlots\n"")

repMap[""runComparisonScripts""] = (""cp .oO[name]Oo..Comparison_common"" + name + "".root ""
                                  "".oO[datadir]Oo./.oO[name]Oo..Comparison_common"" + name + ""_Images/TkAlMapPlots/GCP.root\n"")"
-------------------------------------------------------------------------
"# TkAlMap inFile=tree.root compAl=UL2018 refAl=StartGeom savePNG=True TkVersion=phase1 outDir=./test_plots/tanh colPal=2
range_str = ''
plottedDifferences = [""dx"",""dy"",""dz"",""dr"",""rdphi"",""dalpha"",""dbeta"",""dgamma""]
for diff in plottedDifferences:
    range_str = diff'_range=['str(repMap[diff'_min'])','str(repMap[diff'_max'])'];'
repMap[""runComparisonScripts""] = \
    (""rfmkdir -p .oO[datadir]Oo./.oO[name]Oo.""
     "".Comparison_common""name""_Images/TkAlMapPlots\n"")
repMap[""runComparisonScripts""] = \
    (""python .oO[Alignment/OfflineValidation]Oo./python/runGCPTkAlMap.py -b "" 
     ""inFile=.oO[name]Oo..Comparison_common""name"".root ""
     ""refAl=\"".oO[reference]Oo.\"" "" 
     ""compAl=\"".oO[alignmentName]Oo.\"" ""
     ""savePNG=True ""
     ""TkVersion=\""phase0\"" ""
     ""colPal=2 ""
     ""defRanges=\""""range_str""\"" ""
     ""outDir=.oO[datadir]Oo./.oO[name]Oo..Comparison_common""name""_Images/TkAlMapPlots\n"")
     #""outDir=.oO[name]Oo..""name""_TkMapPlots ""
     #""useDefaultRanges=.oO[useDefaultRange]Oo. ""range_str""\n"")
# Copy root file for check
repMap[""runComparisonScripts""] = \
    (""rfcp .oO[name]Oo..Comparison_common""name"".root ""
     "".oO[datadir]Oo./.oO[name]Oo..Comparison_common""name""_Images/TkAlMapPlots/GCP.root\n"")
#repMap[""runComparisonScripts""] = \
#    (""cp .oO[alignmentName]Oo.ROOTGeometry.root ""
#     "".oO[datadir]Oo./.oO[name]Oo..Comparison_common""name""_Images/TkAlMapPlots/comparedGeometry.root\n"")
"
-------------------------------------------------------------------------
"Recom
PRs: 31376, 31284"
-------------------------------------------------------------------------
=========================================================================
"""name""  : ""JetPuppi"",
""doc""   : ""AK4 PF Puppi jets with JECs applied, after basic selection (pt > 2)"",  
""ptcut"" : ""pt > 2"",      
""doQGL"" : True,
""doPUIDVar"": True,
""doBTag"": True,
""name""  : ""JetPF"",
""doc""   : ""AK4 PF jets with JECs applied, after basic selection (pt > 2)"",
""ptcut"" : ""pt > 2"",   
k4calo"" : {
""name"": ""JetCalo"",
""doc"" : ""AK4 Calo jets with JECs applied"",
""name""  : ""FatJetCHS"",
""doc""   : ""AK8 PF CHS jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100""    
k8pf"" : {
""name""  : ""FatJetPF"",
""doc""   : ""AK8 PF jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100"", 
ETVARS = cms.PSet(P4Vars,
onstituents   = jetTable.variables.nConstituents,
TVARS = cms.PSet(P4Vars,
wFactor       = jetTable.variables.rawFactor,
ea            = jetTable.variables.area,
HEF           = jetTable.variables.chHEF,
HEF           = jetTable.variables.neHEF,
EmEF          = jetTable.variables.chEmEF,
EmEF          = jetTable.variables.neEmEF,
EF            = jetTable.variables.muEF,
HEF           = Var(""HFHadronEnergyFraction()"",float,doc = ""hadronic energy fraction in HF"",precision = 6),
EmEF          = Var(""HFEMEnergyFraction()"",float,doc = ""electromagnetic energy fraction in HF"",precision = 6),
uons          = jetTable.variables.nMuons,
lectrons      = jetTable.variables.nElectrons,
onstituents   = jetTable.variables.nConstituents,
onstChHads    = Var(""chargedHadronMultiplicity()"",int,doc=""number of charged hadrons in the jet""),
onstNeuHads   = Var(""neutralHadronMultiplicity()"",int,doc=""number of neutral hadrons in the jet""),
onstHFHads    = Var(""HFHadronMultiplicity()"", int,doc=""number of HF hadrons in the jet""),
onstHFEMs     = Var(""HFEMMultiplicity()"",int,doc=""number of HF EMs in the jet""),
onstMuons     = Var(""muonMultiplicity()"",int,doc=""number of muons in the jet""),
onstElecs     = Var(""electronMultiplicity()"",int,doc=""number of electrons in the jet""),
onstPhotons   = Var(""photonMultiplicity()"",int,doc=""number of photons in the jet""),
VARS = cms.PSet(
Id_dR2Mean    = Var(""userFloat('puId_dR2Mean')"",float,doc=""pT^2-weighted average square distance of jet constituents from the jet axis (PileUp ID BDT input variable)"", precision= 6),
Id_majW       = Var(""userFloat('puId_majW')"",float,doc=""major axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_minW       = Var(""userFloat('puId_minW')"",float,doc=""minor axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac01     = Var(""userFloat('puId_frac01')"",float,doc=""fraction of constituents' pT contained within dR <0.1 (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac02     = Var(""userFloat('puId_frac02')"",float,doc=""fraction of constituents' pT contained within 0.1< dR <0.2 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac03     = Var(""userFloat('puId_frac03')"",float,doc=""fraction of constituents' pT contained within 0.2< dR <0.3 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac04     = Var(""userFloat('puId_frac04')"",float,doc=""fraction of constituents' pT contained within 0.3< dR <0.4 (PileUp ID BDT input variable)"", precision= 6) ,
Id_ptD        = Var(""userFloat('puId_ptD')"",float,doc=""pT-weighted average pT of constituents (PileUp ID BDT input variable)"", precision= 6) ,
Id_beta       = Var(""userFloat('puId_beta')"",float,doc=""fraction of pT of charged constituents associated to PV (PileUp ID BDT input variable)"", precision= 6) ,
Id_pull       = Var(""userFloat('puId_pull')"",float,doc=""magnitude of pull vector (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetR       = Var(""userFloat('puId_jetR')"",float,doc=""fraction of jet pT carried by the leading constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetRchg    = Var(""userFloat('puId_jetRchg')"",float,doc=""fraction of jet pT carried by the leading charged constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_nCharged   = Var(""userInt('puId_nCharged')"",int,doc=""number of charged constituents (PileUp ID BDT input variable)""),
ARS = cms.PSet(
l_axis2       =  Var(""userFloat('qgl_axis2')"",float,doc=""ellipse minor jet axis (Quark vs Gluon likelihood input variable)"", precision= 6),
l_ptD         =  Var(""userFloat('qgl_ptD')"",float,doc=""pT-weighted average pT of constituents (Quark vs Gluon likelihood input variable)"", precision= 6),
l_mult        =  Var(""userInt('qgl_mult')"", int,doc=""PF candidates multiplicity (Quark vs Gluon likelihood input variable)""),
VARS = cms.PSet(
agCMVA  = jetTable.variables.btagCMVA,
agDeepB = jetTable.variables.btagDeepB,
agCSVV2 = jetTable.variables.btagCSVV2,
agDeepC = jetTable.variables.btagDeepC,
JETVARS = cms.PSet(
agDeepFlavB   = jetTable.variables.btagDeepFlavB,
agDeepFlavC   = jetTable.variables.btagDeepFlavC,
agDeepFlavG   = Var(""bDiscriminator('pfDeepFlavourJetTags:probg')"",float,doc=""DeepFlavour gluon tag raw score"",precision=10),
agDeepFlavUDS = Var(""bDiscriminator('pfDeepFlavourJetTags:probuds')"",float,doc=""DeepFlavour uds tag raw score"",precision=10)
JETVARS = cms.PSet(P4Vars,
f       = Var(""emEnergyFraction()"", float, doc = ""electromagnetic energy fraction"", precision = 10),
***************************************
co Jets related functions
***************************************
AddJetID(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
tup modules to calculate PF jet ID 
PUPPIJet = True if ""Puppi"" in jetName else False
oseJetId = ""looseJetId{}"".format(jetName)
tattr(proc, looseJetId, proc.looseJetId.clone(
  src = jetSrc,
  filterParams=proc.looseJetId.filterParams.clone(
    version =""WINTER16""
  ),
ghtJetId = ""tightJetId{}"".format(jetName)
tattr(proc, tightJetId, proc.tightJetId.clone(
  src = jetSrc,
  filterParams=proc.tightJetId.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),
)
ghtJetIdLepVeto = ""tightJetIdLepVeto{}"".format(jetName)
tattr(proc, tightJetIdLepVeto, proc.tightJetIdLepVeto.clone(
  src = jetSrc,
  filterParams=proc.tightJetIdLepVeto.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),
n2_jme_2016.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER16"" )
n2_jme_2016.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER16"" )
n2_jme_2017.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))
n2_jme_2017.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))
Save variables as userInts in each jet
tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc, patJetWithUserData).userInts.tightId = cms.InputTag(tightJetId)
tattr(proc, patJetWithUserData).userInts.tightIdLepVeto = cms.InputTag(tightJetIdLepVeto)
n2_jme_2016.toModify(getattr(proc, patJetWithUserData).userInts, looseId = cms.InputTag(looseJetId))
Specfiy variables in the jetTable to save in NanoAOD
tattr(proc, jetTableName).variables.jetId = Var(""userInt('tightId')*24*userInt('tightIdLepVeto')"",int,doc=""Jet ID flags bit1 is loose (always false in 2017 since it does not exist), bit2 is tight, bit3 is tightLepVeto"")
n2_jme_2016.toModify(getattr(proc, jetTableName).variables, jetId = Var(""userInt('tightIdLepVeto')*4userInt('tightId')*2userInt('looseId')"",int, doc=""Jet ID flags bit1 is loose, bit2 is tight, bit3 is tightLepVeto""))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, tightJetId))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, tightJetId))1, getattr(proc, tightJetIdLepVeto))
tattr(proc,""_""jetSequenceName""_2016"", getattr(proc,jetSequenceName).copy())
tattr(proc,""_""jetSequenceName""_2016"").insert(getattr(proc, ""_""jetSequenceName""_2016"").index(getattr(proc, tightJetId)), getattr(proc, looseJetId))
n2_jme_2016.toReplaceWith(getattr(proc,jetSequenceName), getattr(proc, ""_""jetSequenceName""_2016""))
turn proc
AddPileUpJetIDVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
""
tup modules to calculate pileup jet ID input variables for PF jet
""
Calculate pileup jet ID variables
JetIdVarsCalculator = ""puJetIdCalculator{}"".format(jetName) 
tattr(proc, puJetIdVarsCalculator, pileupJetIdCalculator.clone(
  jets = jetSrc,
  vertexes  = ""offlineSlimmedPrimaryVertices"",
  inputIsCorrected = True,
  applyJec  = False,
  usePuppi = True if ""Puppi"" in jetName else False
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, puJetIdVarsCalculator))
JetIDVar = ""puJetIDVar{}"".format(jetName)
tattr(proc, puJetIDVar, cms.EDProducer(""PileupJetIDVarProducer"",
  srcJet = cms.InputTag(jetSrc),    
  srcPileupJetId = cms.InputTag(puJetIdVarsCalculator)
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, puJetIdVarsCalculator))1, getattr(proc, puJetIDVar))
Save variables as userFloats and userInts for each jet
tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc,patJetWithUserData).userFloats.puId_dR2Mean  = cms.InputTag(""{}:dR2Mean"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_majW     = cms.InputTag(""{}:majW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_minW     = cms.InputTag(""{}:minW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac01   = cms.InputTag(""{}:frac01"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac02   = cms.InputTag(""{}:frac02"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac03   = cms.InputTag(""{}:frac03"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac04   = cms.InputTag(""{}:frac04"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_ptD      = cms.InputTag(""{}:ptD"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_beta     = cms.InputTag(""{}:beta"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_pull     = cms.InputTag(""{}:pull"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetR     = cms.InputTag(""{}:jetR"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetRchg  = cms.InputTag(""{}:jetRchg"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userInts.puId_nCharged   = cms.InputTag(""{}:nCharged"".format(puJetIDVar))
Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.puId_dR2Mean  = PUIDVARS.puId_dR2Mean 
tattr(proc,jetTableName).variables.puId_majW     = PUIDVARS.puId_majW    
tattr(proc,jetTableName).variables.puId_minW     = PUIDVARS.puId_minW    
tattr(proc,jetTableName).variables.puId_frac01   = PUIDVARS.puId_frac01  
tattr(proc,jetTableName).variables.puId_frac02   = PUIDVARS.puId_frac02  
tattr(proc,jetTableName).variables.puId_frac03   = PUIDVARS.puId_frac03  
tattr(proc,jetTableName).variables.puId_frac04   = PUIDVARS.puId_frac04  
tattr(proc,jetTableName).variables.puId_ptD      = PUIDVARS.puId_ptD      
tattr(proc,jetTableName).variables.puId_beta     = PUIDVARS.puId_beta    
tattr(proc,jetTableName).variables.puId_pull     = PUIDVARS.puId_pull     
tattr(proc,jetTableName).variables.puId_jetR     = PUIDVARS.puId_jetR    
tattr(proc,jetTableName).variables.puId_jetRchg  = PUIDVARS.puId_jetRchg 
tattr(proc,jetTableName).variables.puId_nCharged = PUIDVARS.puId_nCharged 
turn proc
AddQGLTaggerVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName="""", calculateQGLVars=False):
""
hedule the QGTagger module to calculate input variables to the QG likelihood 
""
LTagger=""qgtagger{}"".format(jetName)
tJetWithUserData=""{}WithUserData"".format(jetSrc)
 calculateQGLVars:
setattr(proc, QGLTagger, qgtagger.clone(
    srcJets=jetSrc
  )
)
Save variables as userFloats and userInts for each jet
tattr(proc,patJetWithUserData).userFloats.qgl_axis2 = cms.InputTag(QGLTagger"":axis2"")
tattr(proc,patJetWithUserData).userFloats.qgl_ptD   = cms.InputTag(QGLTagger"":ptD"")
tattr(proc,patJetWithUserData).userInts.qgl_mult    = cms.InputTag(QGLTagger"":mult"")
Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.qgl_axis2 =  QGLVARS.qgl_axis2
tattr(proc,jetTableName).variables.qgl_ptD   =  QGLVARS.qgl_ptD
tattr(proc,jetTableName).variables.qgl_mult  =  QGLVARS.qgl_mult
 calculateQGLVars:
getattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, QGLTagger))
turn proc
AddBTaggingScores(proc, jetTableName=""""):
""
ore b-tagging scores from various algortihm
""
tattr(proc, jetTableName).variables.btagCMVA      = jetTable.variables.btagCMVA
tattr(proc, jetTableName).variables.btagDeepB     = jetTable.variables.btagDeepB
tattr(proc, jetTableName).variables.btagCSVV2     = jetTable.variables.btagCSVV2
tattr(proc, jetTableName).variables.btagDeepC     = jetTable.variables.btagDeepC
tattr(proc, jetTableName).variables.btagDeepFlavB = jetTable.variables.btagDeepFlavB
tattr(proc, jetTableName).variables.btagDeepFlavC = jetTable.variables.btagDeepFlavC
turn proc
AddDeepJetGluonLQuarkScores(proc, jetTableName=""""):
""
ore DeepJet raw score in jetTable for gluon and light quark
""
tattr(proc, jetTableName).variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
tattr(proc, jetTableName).variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS
turn proc
AddNewPatJets(proc, recoJetInfo, runOnMC):
""
d patJet into custom nanoAOD
""
tName = recoJetInfo.jetUpper
yload = recoJetInfo.jetCorrPayload 
PF    = recoJetInfo.doPF
Calo  = recoJetInfo.doCalo
 recoJetInfo.inputCollection != """":
patJetFinalColl = recoJetInfo.inputCollection
se: 
patJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)
 doCalo:
patJetFinalColl = ""selectedPatJets{}"".format(jetName)
noInfoForJet = nanoInfo_recojets[recoJetInfo.jet]
tTablePrefix = nanoInfoForJet[""name""]
tTableDoc    = nanoInfoForJet[""doc""]
cut          = nanoInfoForJet[""ptcut""] if ""ptcut"" in nanoInfoForJet else """"
PUIDVar      = nanoInfoForJet[""doPUIDVar""] if ""doPUIDVar"" in nanoInfoForJet else False
QGL          = nanoInfoForJet[""doQGL""] if ""doQGL"" in nanoInfoForJet else False
BTag         = nanoInfoForJet[""doBTag""] if ""doBTag"" in nanoInfoForJet else False
vePatJets(proc, 
jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, doPF, doCalo, 
ptcut=ptcut, doPUIDVar=doPUIDVar, doQGL=doQGL, doBTag=doBTag, runOnMC=runOnMC
turn proc
SavePatJets(proc, jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, 
            doPF, doCalo, ptcut="""", doPUIDVar=False, doQGL=False, doBTag=False, runOnMC=False):
""
hedule modules for a given patJet collection and save its variables into custom NanoAOD
""
Setup jet correction factors
tCorrFactors = ""jetCorrFactorsNano{}"".format(jetName)
tattr(proc, jetCorrFactors, jetCorrFactorsNano.clone(
  src = patJetFinalColl,
  payload = payload,
)
Update jets
cJets = ""updatedJets{}"".format(jetName)
tattr(proc, srcJets, updatedJets.clone(
  jetSource = patJetFinalColl,
  jetCorrFactorsSource=[jetCorrFactors],
)
Setup UserDataEmbedder
cJetsWithUserData = ""updatedJets{}WithUserData"".format(jetName)
tattr(proc, srcJetsWithUserData, cms.EDProducer(""PATJetUserDataEmbedder"",
  src = cms.InputTag(srcJets),
  userFloats = cms.PSet(),    
  userInts = cms.PSet(),
)
Filter jets with pt cut
nalJetsForTable = ""finalJets{}"".format(jetName)
tattr(proc, finalJetsForTable, finalJets.clone(
  src = srcJetsWithUserData,
  cut = ptcut
)
Save jets in table
bleContent = PFJETVARS
 doCalo:
tableContent =  CALOJETVARS
tTable = ""jet{}Table"".format(jetName)
tattr(proc,jetTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = cms.string(""""), # Don't specify cuts here
  name = cms.string(jetTablePrefix),
  doc  = cms.string(jetTableDoc),
  singleton = cms.bool(False), # the number of entries is variable
  extension = cms.bool(False), # this is the main table for the jets
  variables = cms.PSet(tableContent)
)
tattr(proc,jetTable).variables.pt.precision=10
Save MC-only jet variables in table
tMCTable = ""jet{}MCTable"".format(jetName)
tattr(proc, jetMCTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = getattr(proc,jetTable).cut,
  name = cms.string(jetTablePrefix),
  singleton = cms.bool(False),
  extension = cms.bool(True), # this is an extension table
  variables = cms.PSet(
    partonFlavour = Var(""partonFlavour()"", int, doc=""flavour from parton matching""),
    hadronFlavour = Var(""hadronFlavour()"", int, doc=""flavour from hadron ghost clustering""),
    genJetIdx = Var(""?genJetFwdRef().backRef().isNonnull()?genJetFwdRef().backRef().key():-1"", int, doc=""index of matched gen jet""),
  )
)
Define the jet modules sequence first
tSequenceName = ""jet{}Sequence"".format(jetName)
tattr(proc, jetSequenceName, cms.Sequence(
  getattr(proc,jetCorrFactors)
  getattr(proc,srcJets)
  getattr(proc,srcJetsWithUserData)
  getattr(proc,finalJetsForTable)
)
Define the jet table sequences 
tTableSequenceName = ""jet{}TablesSequence"".format(jetName)
tattr(proc, jetTableSequenceName, cms.Sequence(getattr(proc,jetTable)))
tTableSequenceMCName = ""jet{}MCTablesSequence"".format(jetName)
tattr(proc, jetTableSequenceMCName, cms.Sequence(getattr(proc,jetMCTable)))
 runOnMC:
proc.nanoSequenceMC = getattr(proc,jetSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceMCName)
se:
proc.nanoSequence = getattr(proc,jetSequenceName)
proc.nanoSequence = getattr(proc,jetTableSequenceName)
Schedule plugins to calculate Jet ID, PileUp Jet ID input variables, and Quark-Gluon Likehood input variables.
 doPF:
proc = AddJetID(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doPUIDVar:
  proc = AddPileUpJetIDVars(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doQGL:
  proc = AddQGLTaggerVars(proc,jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName, calculateQGLVars=True)
Save b-tagging algorithm scores. Should only be done for jet collection with b-tagging 
calculated when reclustered or collection saved with b-tagging info in MiniAOD
 doBTag:
AddBTaggingScores(proc,jetTableName=jetTable)
AddDeepJetGluonLQuarkScores(proc,jetTableName=jetTable)
turn proc
ReclusterAK4CHSJets(proc, recoJA, runOnMC):
""
cluster AK4 CHS jets and replace slimmedJets
at is used as default to save AK4 CHS jets 
 NanoAODs.  
""
int(""custom_jme_cff::ReclusterAK4CHSJets: Recluster AK4 PF CHS jets"")
Recluster AK4 CHS jets
g = { 
""jet"" : ""ak4pfchs"",   
""inputCollection"" : """",                 
""genJetsCollection"": ""AK4GenJetsNoNu"",
""bTagDiscriminators"": bTagDiscriminatorsForAK4
coJetInfo = recoJA.addRecoJetCollection(proc, **cfg) 
tName = recoJetInfo.jetUpper
tJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)
Change the input jet source for jetCorrFactorsNano 
and updatedJets
oc.jetCorrFactorsNano.src=patJetFinalColl
oc.updatedJets.jetSource=patJetFinalColl
Change pt cut
oc.finalJets.cut = ""pt > 2""
oc.simpleCleanerTable.jetSel = ""pt > 10"" # Change this from 15 -> 10 
Add variables 
oc.jetTable.variables.hfHEF         = PFJETVARS.hfHEF
oc.jetTable.variables.hfEmEF        = PFJETVARS.hfEmEF
oc.jetTable.variables.nConstChHads  = PFJETVARS.nConstChHads
oc.jetTable.variables.nConstNeuHads = PFJETVARS.nConstNeuHads
oc.jetTable.variables.nConstHFHads  = PFJETVARS.nConstHFHads
oc.jetTable.variables.nConstHFEMs   = PFJETVARS.nConstHFEMs
oc.jetTable.variables.nConstMuons   = PFJETVARS.nConstMuons
oc.jetTable.variables.nConstElecs   = PFJETVARS.nConstElecs
oc.jetTable.variables.nConstPhotons = PFJETVARS.nConstPhotons
oc.jetTable.doc = cms.string(""AK4 PF CHS Jets with JECs applied, after basic selection (pt > 2)"")
Setup pileup jet ID with 80X training.
leupJetId80X = ""pileupJetId80X""
tattr(proc, pileupJetId80X, pileupJetId.clone(
  jets=""updatedJets"",
  algos=cms.VPSet(_chsalgos_81x),
  inputIsCorrected=True,
  applyJec=False,
  vertexes=""offlineSlimmedPrimaryVertices""
)
oc.jetSequence.insert(proc.jetSequence.index(proc.pileupJetId94X), getattr(proc, pileupJetId80X)) 
oc.updatedJetsWithUserData.userInts.puId80XfullId = cms.InputTag('pileupJetId80X:fullId')
n2_jme_2016.toModify(proc.updatedJetsWithUserData.userFloats, puId80XDisc = cms.InputTag(""pileupJetId80X:fullDiscriminant""))
oc.jetTable.variables.puId = Var(""userInt('puId80XfullId')"", int, doc=""Pilup ID flags with 80X (2016) training"")
n2_jme_2016.toModify(proc.jetTable.variables, puIdDisc = Var(""userFloat('puId80XDisc')"",float,doc=""Pilup ID discriminant with 80X (2016) training"",precision=10))
oc = AddPileUpJetIDVars(proc, 
jetName="""", 
jetSrc=""updatedJets"", 
jetTableName=""jetTable"",
jetSequenceName=""jetSequence""
Save variables as userFloats and userInts in each jet
oc.updatedJetsWithUserData.userFloats.qgl_axis2 = cms.InputTag(""qgtagger:axis2"")
oc.updatedJetsWithUserData.userFloats.qgl_ptD   = cms.InputTag(""qgtagger:ptD"")
oc.updatedJetsWithUserData.userInts.qgl_mult    = cms.InputTag(""qgtagger:mult"")
Specfiy variables in the jetTable to save in NanoAOD
oc.jetTable.variables.qgl_axis2 =  QGLVARS.qgl_axis2
oc.jetTable.variables.qgl_ptD   =  QGLVARS.qgl_ptD
oc.jetTable.variables.qgl_mult  =  QGLVARS.qgl_mult
Save DeepJet raw score for gluon and light quarks
oc.jetTable.variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
oc.jetTable.variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS
turn proc
AddVariablesForAK8PuppiJets(proc):
""
d more variables for AK8 PFPUPPI jets
""
 These variables are not stored for AK8PFCHS (slimmedJetsAK8)
 in MiniAOD if their pt < 170 GeV. Hence the conditional fill.
oc.fatJetTable.variables.chHEF  = Var(""?isPFJet()?chargedHadronEnergyFraction():-1"", float, doc=""charged Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neHEF  = Var(""?isPFJet()?neutralHadronEnergyFraction():-1"", float, doc=""neutral Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.chEmEF = Var(""?isPFJet()?chargedEmEnergyFraction():-1"", float, doc=""charged Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neEmEF = Var(""?isPFJet()?neutralEmEnergyFraction():-1"", float, doc=""neutral Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.muEF   = Var(""?isPFJet()?muonEnergyFraction():-1"", float, doc=""muon Energy Fraction"", precision = 6)
oc.fatJetTable.variables.hfHEF  = Var(""?isPFJet()?HFHadronEnergyFraction():-1"", float, doc=""energy fraction in forward hadronic calorimeter"", precision = 6)
oc.fatJetTable.variables.hfEmEF = Var(""?isPFJet()?HFEMEnergyFraction():-1"", float, doc=""energy fraction in forward EM calorimeter"", precision = 6)
oc.fatJetTable.variables.nConstChHads   = Var(""?isPFJet()?chargedHadronMultiplicity():-1"",int, doc=""number of charged hadrons in the jet"")
oc.fatJetTable.variables.nConstNeuHads  = Var(""?isPFJet()?neutralHadronMultiplicity():-1"",int, doc=""number of neutral hadrons in the jet"")
oc.fatJetTable.variables.nConstHFHads   = Var(""?isPFJet()?HFHadronMultiplicity():-1"", int, doc=""number of HF Hadrons in the jet"")
oc.fatJetTable.variables.nConstHFEMs    = Var(""?isPFJet()?HFEMMultiplicity():-1"", int, doc=""number of HF EMs in the jet"")
oc.fatJetTable.variables.nConstMuons    = Var(""?isPFJet()?muonMultiplicity():-1"", int, doc=""number of muons in the jet"")
oc.fatJetTable.variables.nConstElecs    = Var(""?isPFJet()?electronMultiplicity():-1"", int, doc=""number of electrons in the jet"")
oc.fatJetTable.variables.nConstPhotons  = Var(""?isPFJet()?photonMultiplicity():-1"", int, doc=""number of photons in the jet"")
turn proc
***************************************
n Jets related functions
***************************************
AddNewGenJets(proc, genJetInfo):
""
d genJet into custom nanoAOD
""
nJetName         = genJetInfo.jetUpper
nJetAlgo         = genJetInfo.jetAlgo
nJetSize         = genJetInfo.jetSize
nJetSizeNr       = genJetInfo.jetSizeNr
nJetFinalColl    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")
nJetTablePrefix  = nanoInfo_genjets[genJetInfo.jet][""name""]
nJetTableDoc     = nanoInfo_genjets[genJetInfo.jet][""doc""]
veGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False)
turn proc
SaveGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False):
""
hedule modules for a given genJet collection and save its variables into custom NanoAOD
""
nJetTableThisJet = ""jet{}Table"".format(genJetName)
tattr(proc, genJetTableThisJet, genJetTable.clone(
  src       = genJetFinalColl,
  cut       = ""pt > 1"",
  name      = genJetTablePrefix,
  doc       = genJetTableDoc,
  variables = GENJETVARS
)
nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = getattr(proc,genJetTableThisJet).src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)
nJetFlavourTableThisJet = ""genJet{}FlavourTable"".format(genJetName)
tattr(proc, genJetFlavourTableThisJet, genJetFlavourTable.clone(
  name            = getattr(proc,genJetTableThisJet).name,
  src             = getattr(proc,genJetTableThisJet).src,
  cut             = getattr(proc,genJetTableThisJet).cut,
  jetFlavourInfos = genJetFlavourAssociationThisJet,
)
nJetSequenceName = ""genJet{}Sequence"".format(genJetName)
tattr(proc, genJetSequenceName, cms.Sequence(
  getattr(proc,genJetTableThisJet)
  getattr(proc,genJetFlavourAssociationThisJet)
  getattr(proc,genJetFlavourTableThisJet)
)
oc.nanoSequenceMC.insert(proc.nanoSequenceMC.index(proc.jetMC)1, getattr(proc,genJetSequenceName)) 
turn proc
ReclusterAK4GenJets(proc, genJA):
""
cluster AK4 Gen jets and replace 
immedGenJets that is used as default 
 save AK4 Gen jets in NanoAODs. 
""
int(""custom_jme_cff::ReclusterAK4GenJets: Recluster AK4 Gen jets"")
Recluster AK4 Gen jet
g = { 
""jet"" : ""ak4gen"",   
nJetInfo = genJA.addGenJetCollection(proc, **cfg)
nJetName            = genJetInfo.jetUpper
nJetAlgo            = genJetInfo.jetAlgo
nJetSize            = genJetInfo.jetSize
nJetSizeNr          = genJetInfo.jetSizeNr
lectedPatGenJets    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")
Change jet source to the newly clustered jet collection. Set very low pt cut for jets 
to be stored in the GenJet Table
oc.genJetTable.src = selectedPatGenJets
oc.genJetTable.cut = ""pt > 1""
oc.genJetTable.doc  =""AK4 Gen jets (made with visible genparticles)""
nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = proc.genJetTable.src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)
oc.jetMC.insert(proc.jetMC.index(proc.genJetFlavourTable), getattr(proc, genJetFlavourAssociationThisJet)) 
turn proc
AddVariablesForAK4GenJets(proc):
oc.genJetTable.variables.nConstituents = GENJETVARS.nConstituents
turn proc
AddVariablesForAK8GenJets(proc):
oc.genJetAK8Table.variables.nConstituents = GENJETVARS.nConstituents
turn proc
========================================================================
sc. functions
========================================================================
RemoveAllJetPtCuts(proc):
""
move default pt cuts for all jets set in jets_cff.py 
""
oc.finalJets.cut             = """" # 15 -> 10
oc.finalJetsAK8.cut          = """" # 170 -> 170
oc.genJetTable.cut           = """" # 10 -> 8
oc.genJetFlavourTable.cut    = """" # 10 -> 8
oc.genJetAK8Table.cut        = """" # 100 -> 80
oc.genJetAK8FlavourTable.cut = """" # 100 -> 80
turn proc
========================================================================
STOMIZATION function
========================================================================
PrepJMECustomNanoAOD(process,runOnMC):
##########################################################################
Remove all default jet pt cuts from jets_cff.py
##########################################################################
ocess = RemoveAllJetPtCuts(process)
#########################################################################
Gen-level jets related functions. Only for MC.
#########################################################################
nJA = GenJetAdder()
 runOnMC:
############################################################################
# Save additional variables for AK8 GEN jets
############################################################################
process = AddVariablesForAK8GenJets(process)
###########################################################################
# Recluster AK4 GEN jets
###########################################################################
process = ReclusterAK4GenJets(process, genJA)
process = AddVariablesForAK4GenJets(process)
###########################################################################
# Add additional GEN jets to NanoAOD
###########################################################################
for jetConfig in config_genjets:
  cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
  genJetInfo = genJA.addGenJetCollection(process, **cfg)
  AddNewGenJets(process, genJetInfo)
#########################################################################
Reco-level jets related functions. For both MC and data.
#########################################################################
#########################################################################
Save additional variables for AK8Puppi jets
#########################################################################
ocess = AddVariablesForAK8PuppiJets(process)
#########################################################################
Recluster AK4 CHS jets and replace ""slimmedJets""
#########################################################################
ocess = ReclusterAK4CHSJets(process, recoJA, runOnMC)
#########################################################################
Add additional Reco jets to NanoAOD
#########################################################################
cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
AddNewPatJets(process, recoJetInfo, runOnMC)
"
-------------------------------------------------------------------------
"def AddVariablesForAK8PuppiJets(proc):
    # Save additional variables for AK8PFPUPPI jets
    # These variables are not stored for AK8PFCHS (slimmedJetsAK8)
    # in MiniAOD if their pt < 170 GeV. Hence the conditional fill.
    proc.fatJetTable.variables.chHEF  = Var(""?isPFJet()?chargedHadronEnergyFraction():-1"", float, doc=""charged Hadron Energy Fraction"", precision=6)
    proc.fatJetTable.variables.neHEF  = Var(""?isPFJet()?neutralHadronEnergyFraction():-1"", float, doc=""neutral Hadron Energy Fraction"", precision=6)
    proc.fatJetTable.variables.chEmEF = Var(""?isPFJet()?chargedEmEnergyFraction():-1"", float, doc=""charged Electromagnetic Energy Fraction"", precision=6)
    proc.fatJetTable.variables.neEmEF = Var(""?isPFJet()?neutralEmEnergyFraction():-1"", float, doc=""neutral Electromagnetic Energy Fraction"", precision=6)
    proc.fatJetTable.variables.muEF   = Var(""?isPFJet()?muonEnergyFraction():-1"", float, doc=""muon Energy Fraction"", precision=6)
    proc.fatJetTable.variables.HFHEF  = Var(""?isPFJet()?HFHadronEnergyFraction():-1"", float, doc=""energy fraction in forward hadronic calorimeter"", precision=6)
    proc.fatJetTable.variables.HFEMEF = Var(""?isPFJet()?HFEMEnergyFraction():-1"", float, doc=""energy fraction in forward EM calorimeter"", precision=6)
    proc.fatJetTable.variables.nConstChHads   = Var(""?isPFJet()?chargedHadronMultiplicity():-1"", int, doc=""number of charged hadrons in the jet"")
    proc.fatJetTable.variables.nConstNeuHads  = Var(""?isPFJet()?neutralHadronMultiplicity():-1"", int, doc=""number of neutral hadrons in the jet"")
    proc.fatJetTable.variables.nConstHFHads   = Var(""?isPFJet()?HFHadronMultiplicity():-1"", int, doc=""number of HF Hadrons in the jet"")
    proc.fatJetTable.variables.nConstHFEMs    = Var(""?isPFJet()?HFEMMultiplicity():-1"", int, doc=""number of HF EMs in the jet"")
    proc.fatJetTable.variables.nConstMuons    = Var(""?isPFJet()?muonMultiplicity():-1"", int, doc=""number of muons in the jet"")
    proc.fatJetTable.variables.nConstElecs    = Var(""?isPFJet()?electronMultiplicity():-1"", int, doc=""number of electrons in the jet"")
    proc.fatJetTable.variables.nConstPhotons  = Var(""?isPFJet()?photonMultiplicity():-1"", int, doc=""number of photons in the jet"")
    return proc"
-------------------------------------------------------------------------
"""name""  : ""JetPuppi"",
""doc""   : ""AK4 PF Puppi jets with JECs applied, after basic selection (pt > 2)"",  
""ptcut"" : ""pt > 2"",      
""doQGL"" : True,
""doPUIDVar"": True,
""doBTag"": True,
""name""  : ""JetPF"",
""doc""   : ""AK4 PF jets with JECs applied, after basic selection (pt > 2)"",
""ptcut"" : ""pt > 2"",   
k4calo"" : {
""name"": ""JetCalo"",
""doc"" : ""AK4 Calo jets with JECs applied"",
""name""  : ""FatJetCHS"",
""doc""   : ""AK8 PF CHS jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100""    
k8pf"" : {
""name""  : ""FatJetPF"",
""doc""   : ""AK8 PF jets with JECs applied, after basic selection (pt > 100)"", 
""ptcut"" : ""pt > 100"", 
ETVARS = cms.PSet(P4Vars,
onstituents   = jetTable.variables.nConstituents,
TVARS = cms.PSet(P4Vars,
wFactor       = jetTable.variables.rawFactor,
ea            = jetTable.variables.area,
HEF           = jetTable.variables.chHEF,
HEF           = jetTable.variables.neHEF,
EmEF          = jetTable.variables.chEmEF,
EmEF          = jetTable.variables.neEmEF,
EF            = jetTable.variables.muEF,
HEF           = Var(""HFHadronEnergyFraction()"",float,doc = ""hadronic energy fraction in HF"",precision = 6),
EmEF          = Var(""HFEMEnergyFraction()"",float,doc = ""electromagnetic energy fraction in HF"",precision = 6),
uons          = jetTable.variables.nMuons,
lectrons      = jetTable.variables.nElectrons,
onstituents   = jetTable.variables.nConstituents,
onstChHads    = Var(""chargedHadronMultiplicity()"",int,doc=""number of charged hadrons in the jet""),
onstNeuHads   = Var(""neutralHadronMultiplicity()"",int,doc=""number of neutral hadrons in the jet""),
onstHFHads    = Var(""HFHadronMultiplicity()"", int,doc=""number of HF hadrons in the jet""),
onstHFEMs     = Var(""HFEMMultiplicity()"",int,doc=""number of HF EMs in the jet""),
onstMuons     = Var(""muonMultiplicity()"",int,doc=""number of muons in the jet""),
onstElecs     = Var(""electronMultiplicity()"",int,doc=""number of electrons in the jet""),
onstPhotons   = Var(""photonMultiplicity()"",int,doc=""number of photons in the jet""),
VARS = cms.PSet(
Id_dR2Mean    = Var(""userFloat('puId_dR2Mean')"",float,doc=""pT^2-weighted average square distance of jet constituents from the jet axis (PileUp ID BDT input variable)"", precision= 6),
Id_majW       = Var(""userFloat('puId_majW')"",float,doc=""major axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_minW       = Var(""userFloat('puId_minW')"",float,doc=""minor axis of jet ellipsoid in eta-phi plane (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac01     = Var(""userFloat('puId_frac01')"",float,doc=""fraction of constituents' pT contained within dR <0.1 (PileUp ID BDT input variable)"", precision= 6)  ,
Id_frac02     = Var(""userFloat('puId_frac02')"",float,doc=""fraction of constituents' pT contained within 0.1< dR <0.2 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac03     = Var(""userFloat('puId_frac03')"",float,doc=""fraction of constituents' pT contained within 0.2< dR <0.3 (PileUp ID BDT input variable)"", precision= 6) ,
Id_frac04     = Var(""userFloat('puId_frac04')"",float,doc=""fraction of constituents' pT contained within 0.3< dR <0.4 (PileUp ID BDT input variable)"", precision= 6) ,
Id_ptD        = Var(""userFloat('puId_ptD')"",float,doc=""pT-weighted average pT of constituents (PileUp ID BDT input variable)"", precision= 6) ,
Id_beta       = Var(""userFloat('puId_beta')"",float,doc=""fraction of pT of charged constituents associated to PV (PileUp ID BDT input variable)"", precision= 6) ,
Id_pull       = Var(""userFloat('puId_pull')"",float,doc=""magnitude of pull vector (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetR       = Var(""userFloat('puId_jetR')"",float,doc=""fraction of jet pT carried by the leading constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_jetRchg    = Var(""userFloat('puId_jetRchg')"",float,doc=""fraction of jet pT carried by the leading charged constituent (PileUp ID BDT input variable)"", precision= 6) ,
Id_nCharged   = Var(""userInt('puId_nCharged')"",int,doc=""number of charged constituents (PileUp ID BDT input variable)""),
ARS = cms.PSet(
l_axis2       =  Var(""userFloat('qgl_axis2')"",float,doc=""ellipse minor jet axis (Quark vs Gluon likelihood input variable)"", precision= 6),
l_ptD         =  Var(""userFloat('qgl_ptD')"",float,doc=""pT-weighted average pT of constituents (Quark vs Gluon likelihood input variable)"", precision= 6),
l_mult        =  Var(""userInt('qgl_mult')"", int,doc=""PF candidates multiplicity (Quark vs Gluon likelihood input variable)""),
VARS = cms.PSet(
agCMVA  = jetTable.variables.btagCMVA,
agDeepB = jetTable.variables.btagDeepB,
agCSVV2 = jetTable.variables.btagCSVV2,
agDeepC = jetTable.variables.btagDeepC,
JETVARS = cms.PSet(
agDeepFlavB   = jetTable.variables.btagDeepFlavB,
agDeepFlavC   = jetTable.variables.btagDeepFlavC,
agDeepFlavG   = Var(""bDiscriminator('pfDeepFlavourJetTags:probg')"",float,doc=""DeepFlavour gluon tag raw score"",precision=10),
agDeepFlavUDS = Var(""bDiscriminator('pfDeepFlavourJetTags:probuds')"",float,doc=""DeepFlavour uds tag raw score"",precision=10)
JETVARS = cms.PSet(P4Vars,
f       = Var(""emEnergyFraction()"", float, doc = ""electromagnetic energy fraction"", precision = 10),
***************************************
co Jets related functions
***************************************
AddJetID(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
tup modules to calculate PF jet ID 
PUPPIJet = True if ""Puppi"" in jetName else False
oseJetId = ""looseJetId{}"".format(jetName)
tattr(proc, looseJetId, proc.looseJetId.clone(
  src = jetSrc,
  filterParams=proc.looseJetId.filterParams.clone(
    version =""WINTER16""
  ),
ghtJetId = ""tightJetId{}"".format(jetName)
tattr(proc, tightJetId, proc.tightJetId.clone(
  src = jetSrc,
  filterParams=proc.tightJetId.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),
ghtJetIdLepVeto = ""tightJetIdLepVeto{}"".format(jetName)
tattr(proc, tightJetIdLepVeto, proc.tightJetIdLepVeto.clone(
  src = jetSrc,
  filterParams=proc.tightJetIdLepVeto.filterParams.clone(
    version = ""SUMMER18{}"".format(""PUPPI"" if isPUPPIJet else """")
  ),
)
n2_jme_2016.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER16"" )
n2_jme_2016.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER16"" )
n2_jme_2017.toModify(getattr(proc, tightJetId) .filterParams,        version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))
n2_jme_2017.toModify(getattr(proc, tightJetIdLepVeto) .filterParams, version = ""WINTER17{}"".format(""PUPPI"" if isPUPPIJet else """"))
Save variables as userInts in each jet
tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc, patJetWithUserData).userInts.tightId = cms.InputTag(tightJetId)
tattr(proc, patJetWithUserData).userInts.tightIdLepVeto = cms.InputTag(tightJetIdLepVeto)
n2_jme_2016.toModify(getattr(proc, patJetWithUserData).userInts, looseId = cms.InputTag(looseJetId))
Specfiy variables in the jetTable to save in NanoAOD
tattr(proc, jetTableName).variables.jetId = Var(""userInt('tightId')*24*userInt('tightIdLepVeto')"",int,doc=""Jet ID flags bit1 is loose (always false in 2017 since it does not exist), bit2 is tight, bit3 is tightLepVeto"")
n2_jme_2016.toModify(getattr(proc, jetTableName).variables, jetId = Var(""userInt('tightIdLepVeto')*4userInt('tightId')*2userInt('looseId')"",int, doc=""Jet ID flags bit1 is loose, bit2 is tight, bit3 is tightLepVeto""))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, tightJetId))
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, tightJetId))1, getattr(proc, tightJetIdLepVeto))
tattr(proc,""_""jetSequenceName""_2016"", getattr(proc,jetSequenceName).copy())
tattr(proc,""_""jetSequenceName""_2016"").insert(getattr(proc, ""_""jetSequenceName""_2016"").index(getattr(proc, tightJetId)), getattr(proc, looseJetId))
n2_jme_2016.toReplaceWith(getattr(proc,jetSequenceName), getattr(proc, ""_""jetSequenceName""_2016""))
turn proc
AddPileUpJetIDVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName=""""):
""
tup modules to calculate pileup jet ID input variables for PF jet
""
Calculate pileup jet ID variables
JetIdVarsCalculator = ""puJetIdCalculator{}"".format(jetName) 
tattr(proc, puJetIdVarsCalculator, pileupJetIdCalculator.clone(
  jets = jetSrc,
  vertexes  = ""offlineSlimmedPrimaryVertices"",
  inputIsCorrected = True,
  applyJec  = False,
  usePuppi = True if ""Puppi"" in jetName else False
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, puJetIdVarsCalculator))
JetIDVar = ""puJetIDVar{}"".format(jetName)
tattr(proc, puJetIDVar, cms.EDProducer(""PileupJetIDVarProducer"",
  srcJet = cms.InputTag(jetSrc),    
  srcPileupJetId = cms.InputTag(puJetIdVarsCalculator)
)
tattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, puJetIdVarsCalculator))1, getattr(proc, puJetIDVar))
Save variables as userFloats and userInts for each jet
tJetWithUserData = ""{}WithUserData"".format(jetSrc)
tattr(proc,patJetWithUserData).userFloats.puId_dR2Mean  = cms.InputTag(""{}:dR2Mean"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_majW     = cms.InputTag(""{}:majW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_minW     = cms.InputTag(""{}:minW"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac01   = cms.InputTag(""{}:frac01"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac02   = cms.InputTag(""{}:frac02"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac03   = cms.InputTag(""{}:frac03"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_frac04   = cms.InputTag(""{}:frac04"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_ptD      = cms.InputTag(""{}:ptD"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_beta     = cms.InputTag(""{}:beta"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_pull     = cms.InputTag(""{}:pull"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetR     = cms.InputTag(""{}:jetR"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userFloats.puId_jetRchg  = cms.InputTag(""{}:jetRchg"".format(puJetIDVar))
tattr(proc,patJetWithUserData).userInts.puId_nCharged   = cms.InputTag(""{}:nCharged"".format(puJetIDVar))
Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.puId_dR2Mean  = PUIDVARS.puId_dR2Mean 
tattr(proc,jetTableName).variables.puId_majW     = PUIDVARS.puId_majW    
tattr(proc,jetTableName).variables.puId_minW     = PUIDVARS.puId_minW    
tattr(proc,jetTableName).variables.puId_frac01   = PUIDVARS.puId_frac01  
tattr(proc,jetTableName).variables.puId_frac02   = PUIDVARS.puId_frac02  
tattr(proc,jetTableName).variables.puId_frac03   = PUIDVARS.puId_frac03  
tattr(proc,jetTableName).variables.puId_frac04   = PUIDVARS.puId_frac04  
tattr(proc,jetTableName).variables.puId_ptD      = PUIDVARS.puId_ptD      
tattr(proc,jetTableName).variables.puId_beta     = PUIDVARS.puId_beta    
tattr(proc,jetTableName).variables.puId_pull     = PUIDVARS.puId_pull     
tattr(proc,jetTableName).variables.puId_jetR     = PUIDVARS.puId_jetR    
tattr(proc,jetTableName).variables.puId_jetRchg  = PUIDVARS.puId_jetRchg 
tattr(proc,jetTableName).variables.puId_nCharged = PUIDVARS.puId_nCharged 
turn proc
AddQGLTaggerVars(proc, jetName="""", jetSrc="""", jetTableName="""", jetSequenceName="""", calculateQGLVars=False):
""
hedule the QGTagger module to calculate input variables to the QG likelihood 
""
LTagger=""qgtagger{}"".format(jetName)
tJetWithUserData=""{}WithUserData"".format(jetSrc)
 calculateQGLVars:
setattr(proc, QGLTagger, qgtagger.clone(
    srcJets=jetSrc
  )
)
Save variables as userFloats and userInts for each jet
tattr(proc,patJetWithUserData).userFloats.qgl_axis2 = cms.InputTag(QGLTagger"":axis2"")
tattr(proc,patJetWithUserData).userFloats.qgl_ptD   = cms.InputTag(QGLTagger"":ptD"")
tattr(proc,patJetWithUserData).userInts.qgl_mult    = cms.InputTag(QGLTagger"":mult"")
Specfiy variables in the jet table to save in NanoAOD
tattr(proc,jetTableName).variables.qgl_axis2 =  QGLVARS.qgl_axis2
tattr(proc,jetTableName).variables.qgl_ptD   =  QGLVARS.qgl_ptD
tattr(proc,jetTableName).variables.qgl_mult  =  QGLVARS.qgl_mult
 calculateQGLVars:
getattr(proc,jetSequenceName).insert(getattr(proc,jetSequenceName).index(getattr(proc, jetSrc))1, getattr(proc, QGLTagger))
turn proc
AddBTaggingScores(proc, jetTableName=""""):
""
ore b-tagging scores from various algortihm
""
tattr(proc, jetTableName).variables.btagCMVA      = jetTable.variables.btagCMVA
tattr(proc, jetTableName).variables.btagDeepB     = jetTable.variables.btagDeepB
tattr(proc, jetTableName).variables.btagCSVV2     = jetTable.variables.btagCSVV2
tattr(proc, jetTableName).variables.btagDeepC     = jetTable.variables.btagDeepC
tattr(proc, jetTableName).variables.btagDeepFlavB = jetTable.variables.btagDeepFlavB
tattr(proc, jetTableName).variables.btagDeepFlavC = jetTable.variables.btagDeepFlavC
turn proc
AddDeepJetGluonLQuarkScores(proc, jetTableName=""""):
""
ore DeepJet raw score in jetTable for gluon and light quark
""
tattr(proc, jetTableName).variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
tattr(proc, jetTableName).variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS
turn proc
AddNewPatJets(proc, recoJetInfo, runOnMC):
""
d patJet into custom nanoAOD
""
tName = recoJetInfo.jetUpper
yload = recoJetInfo.jetCorrPayload 
PF    = recoJetInfo.doPF
Calo  = recoJetInfo.doCalo
 recoJetInfo.inputCollection != """":
patJetFinalColl = recoJetInfo.inputCollection
se: 
patJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)
 doCalo:
patJetFinalColl = ""selectedPatJets{}"".format(jetName)
noInfoForJet = nanoInfo_recojets[recoJetInfo.jet]
tTablePrefix = nanoInfoForJet[""name""]
tTableDoc    = nanoInfoForJet[""doc""]
cut          = nanoInfoForJet[""ptcut""] if ""ptcut"" in nanoInfoForJet else """"
PUIDVar      = nanoInfoForJet[""doPUIDVar""] if ""doPUIDVar"" in nanoInfoForJet else False
QGL          = nanoInfoForJet[""doQGL""] if ""doQGL"" in nanoInfoForJet else False
BTag         = nanoInfoForJet[""doBTag""] if ""doBTag"" in nanoInfoForJet else False
vePatJets(proc, 
jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, doPF, doCalo, 
ptcut=ptcut, doPUIDVar=doPUIDVar, doQGL=doQGL, doBTag=doBTag, runOnMC=runOnMC
turn proc
SavePatJets(proc, jetName, payload, patJetFinalColl, jetTablePrefix, jetTableDoc, 
            doPF, doCalo, ptcut="""", doPUIDVar=False, doQGL=False, doBTag=False, runOnMC=False):
""
hedule modules for a given patJet collection and save its variables into custom NanoAOD
""
Setup jet correction factors
tCorrFactors = ""jetCorrFactorsNano{}"".format(jetName)
tattr(proc, jetCorrFactors, jetCorrFactorsNano.clone(
  src = patJetFinalColl,
  payload = payload,
)
Update jets
cJets = ""updatedJets{}"".format(jetName)
tattr(proc, srcJets, updatedJets.clone(
  jetSource = patJetFinalColl,
  jetCorrFactorsSource=[jetCorrFactors],
)
Setup UserDataEmbedder
cJetsWithUserData = ""updatedJets{}WithUserData"".format(jetName)
tattr(proc, srcJetsWithUserData, cms.EDProducer(""PATJetUserDataEmbedder"",
  src = cms.InputTag(srcJets),
  userFloats = cms.PSet(),    
  userInts = cms.PSet(),
)
Filter jets with pt cut
nalJetsForTable = ""finalJets{}"".format(jetName)
tattr(proc, finalJetsForTable, finalJets.clone(
  src = srcJetsWithUserData,
  cut = ptcut
)
Save jets in table
bleContent = PFJETVARS
 doCalo:
tableContent =  CALOJETVARS
tTable = ""jet{}Table"".format(jetName)
tattr(proc,jetTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = cms.string(""""), # Don't specify cuts here
  name = cms.string(jetTablePrefix),
  doc  = cms.string(jetTableDoc),
  singleton = cms.bool(False), # the number of entries is variable
  extension = cms.bool(False), # this is the main table for the jets
  variables = cms.PSet(tableContent)
)
tattr(proc,jetTable).variables.pt.precision=10
Save MC-only jet variables in table
tMCTable = ""jet{}MCTable"".format(jetName)
tattr(proc, jetMCTable, cms.EDProducer(""SimpleCandidateFlatTableProducer"",
  src = cms.InputTag(finalJetsForTable),
  cut = getattr(proc,jetTable).cut,
  name = cms.string(jetTablePrefix),
  singleton = cms.bool(False),
  extension = cms.bool(True), # this is an extension table
  variables = cms.PSet(
    partonFlavour = Var(""partonFlavour()"", int, doc=""flavour from parton matching""),
    hadronFlavour = Var(""hadronFlavour()"", int, doc=""flavour from hadron ghost clustering""),
    genJetIdx = Var(""?genJetFwdRef().backRef().isNonnull()?genJetFwdRef().backRef().key():-1"", int, doc=""index of matched gen jet""),
  )
)
Define the jet modules sequence first
tSequenceName = ""jet{}Sequence"".format(jetName)
tattr(proc, jetSequenceName, cms.Sequence(
  getattr(proc,jetCorrFactors)
  getattr(proc,srcJets)
  getattr(proc,srcJetsWithUserData)
  getattr(proc,finalJetsForTable)
)
Define the jet table sequences 
tTableSequenceName = ""jet{}TablesSequence"".format(jetName)
tattr(proc, jetTableSequenceName, cms.Sequence(getattr(proc,jetTable)))
tTableSequenceMCName = ""jet{}MCTablesSequence"".format(jetName)
tattr(proc, jetTableSequenceMCName, cms.Sequence(getattr(proc,jetMCTable)))
 runOnMC:
proc.nanoSequenceMC = getattr(proc,jetSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceName)
proc.nanoSequenceMC = getattr(proc,jetTableSequenceMCName)
se:
proc.nanoSequence = getattr(proc,jetSequenceName)
proc.nanoSequence = getattr(proc,jetTableSequenceName)
Schedule plugins to calculate Jet ID, PileUp Jet ID input variables, and Quark-Gluon Likehood input variables.
 doPF:
proc = AddJetID(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doPUIDVar:
  proc = AddPileUpJetIDVars(proc, jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName)
if doQGL:
  proc = AddQGLTaggerVars(proc,jetName=jetName, jetSrc=srcJets, jetTableName=jetTable, jetSequenceName=jetSequenceName, calculateQGLVars=True)
Save b-tagging algorithm scores. Should only be done for jet collection with b-tagging 
calculated when reclustered or collection saved with b-tagging info in MiniAOD
 doBTag:
AddBTaggingScores(proc,jetTableName=jetTable)
AddDeepJetGluonLQuarkScores(proc,jetTableName=jetTable)
turn proc
ReclusterAK4CHSJets(proc, recoJA, runOnMC):
""
cluster AK4 CHS jets and replace slimmedJets
at is used as default to save AK4 CHS jets 
 NanoAODs.  
""
int(""custom_jme_cff::ReclusterAK4CHSJets: Recluster AK4 PF CHS jets"")
Recluster AK4 CHS jets
g = { 
""jet"" : ""ak4pfchs"",   
""inputCollection"" : """",                 
""genJetsCollection"": ""AK4GenJetsNoNu"",
""bTagDiscriminators"": bTagDiscriminatorsForAK4
coJetInfo = recoJA.addRecoJetCollection(proc, **cfg) 
tName = recoJetInfo.jetUpper
tJetFinalColl = ""selectedUpdatedPatJets{}Final"".format(jetName)
Change the input jet source for jetCorrFactorsNano 
and updatedJets
oc.jetCorrFactorsNano.src=patJetFinalColl
oc.updatedJets.jetSource=patJetFinalColl
Change pt cut
oc.finalJets.cut = ""pt > 2""
oc.simpleCleanerTable.jetSel = ""pt > 10"" # Change this from 15 -> 10 
Add variables 
oc.jetTable.variables.hfHEF         = PFJETVARS.hfHEF
oc.jetTable.variables.hfEmEF        = PFJETVARS.hfEmEF
oc.jetTable.variables.nConstChHads  = PFJETVARS.nConstChHads
oc.jetTable.variables.nConstNeuHads = PFJETVARS.nConstNeuHads
oc.jetTable.variables.nConstHFHads  = PFJETVARS.nConstHFHads
oc.jetTable.variables.nConstHFEMs   = PFJETVARS.nConstHFEMs
oc.jetTable.variables.nConstMuons   = PFJETVARS.nConstMuons
oc.jetTable.variables.nConstElecs   = PFJETVARS.nConstElecs
oc.jetTable.variables.nConstPhotons = PFJETVARS.nConstPhotons
oc.jetTable.doc = cms.string(""AK4 PF CHS Jets with JECs applied, after basic selection (pt > 2)"")
Setup pileup jet ID with 80X training.
pileupJetId80X = ""pileupJetId80X""
setattr(proc, pileupJetId80X, pileupJetId.clone(
    jets=""updatedJets"",
    algos=cms.VPSet(_chsalgos_81x),
    inputIsCorrected=True,
    applyJec=False,
    vertexes=""offlineSlimmedPrimaryVertices""
  )
)
proc.jetSequence.insert(proc.jetSequence.index(proc.pileupJetId94X), getattr(proc, pileupJetId80X)) 
proc.updatedJetsWithUserData.userInts.puId80XfullId = cms.InputTag('pileupJetId80X:fullId')
run2_jme_2016.toModify(proc.updatedJetsWithUserData.userFloats, puId80XDisc = cms.InputTag(""pileupJetId80X:fullDiscriminant""))
proc.jetTable.variables.puId = Var(""userInt('puId80XfullId')"", int, doc=""Pilup ID flags with 80X (2016) training"")
run2_jme_2016.toModify(proc.jetTable.variables, puIdDisc = Var(""userFloat('puId80XDisc')"",float,doc=""Pilup ID discriminant with 80X (2016) training"",precision=10))
oc = AddPileUpJetIDVars(proc, 
jetName="""", 
jetSrc=""updatedJets"", 
jetTableName=""jetTable"",
jetSequenceName=""jetSequence""
Add variables for quark guon likelihood tagger studies.
Save variables as userFloats and userInts in each jet
oc.updatedJetsWithUserData.userFloats.qgl_axis2 = cms.InputTag(""qgtagger:axis2"")
oc.updatedJetsWithUserData.userFloats.qgl_ptD   = cms.InputTag(""qgtagger:ptD"")
oc.updatedJetsWithUserData.userInts.qgl_mult    = cms.InputTag(""qgtagger:mult"")
Specfiy variables in the jetTable to save in NanoAOD
oc.jetTable.variables.qgl_axis2 =  QGLVARS.qgl_axis2
oc.jetTable.variables.qgl_ptD   =  QGLVARS.qgl_ptD
oc.jetTable.variables.qgl_mult  =  QGLVARS.qgl_mult
Save DeepJet raw score for gluon and light quarks
oc.jetTable.variables.btagDeepFlavG   = DEEPJETVARS.btagDeepFlavG  
oc.jetTable.variables.btagDeepFlavUDS = DEEPJETVARS.btagDeepFlavUDS
turn proc
AddVariablesForAK8PuppiJets(proc):
""
d more variables for AK8 PFPUPPI jets
""
 These variables are not stored for AK8PFCHS (slimmedJetsAK8)
 in MiniAOD if their pt < 170 GeV. Hence the conditional fill.
oc.fatJetTable.variables.chHEF  = Var(""?isPFJet()?chargedHadronEnergyFraction():-1"", float, doc=""charged Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neHEF  = Var(""?isPFJet()?neutralHadronEnergyFraction():-1"", float, doc=""neutral Hadron Energy Fraction"", precision = 6)
oc.fatJetTable.variables.chEmEF = Var(""?isPFJet()?chargedEmEnergyFraction():-1"", float, doc=""charged Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.neEmEF = Var(""?isPFJet()?neutralEmEnergyFraction():-1"", float, doc=""neutral Electromagnetic Energy Fraction"", precision = 6)
oc.fatJetTable.variables.muEF   = Var(""?isPFJet()?muonEnergyFraction():-1"", float, doc=""muon Energy Fraction"", precision = 6)
oc.fatJetTable.variables.hfHEF  = Var(""?isPFJet()?HFHadronEnergyFraction():-1"", float, doc=""energy fraction in forward hadronic calorimeter"", precision = 6)
oc.fatJetTable.variables.hfEmEF = Var(""?isPFJet()?HFEMEnergyFraction():-1"", float, doc=""energy fraction in forward EM calorimeter"", precision = 6)
oc.fatJetTable.variables.nConstChHads   = Var(""?isPFJet()?chargedHadronMultiplicity():-1"",int, doc=""number of charged hadrons in the jet"")
oc.fatJetTable.variables.nConstNeuHads  = Var(""?isPFJet()?neutralHadronMultiplicity():-1"",int, doc=""number of neutral hadrons in the jet"")
oc.fatJetTable.variables.nConstHFHads   = Var(""?isPFJet()?HFHadronMultiplicity():-1"", int, doc=""number of HF Hadrons in the jet"")
oc.fatJetTable.variables.nConstHFEMs    = Var(""?isPFJet()?HFEMMultiplicity():-1"", int, doc=""number of HF EMs in the jet"")
oc.fatJetTable.variables.nConstMuons    = Var(""?isPFJet()?muonMultiplicity():-1"", int, doc=""number of muons in the jet"")
oc.fatJetTable.variables.nConstElecs    = Var(""?isPFJet()?electronMultiplicity():-1"", int, doc=""number of electrons in the jet"")
oc.fatJetTable.variables.nConstPhotons  = Var(""?isPFJet()?photonMultiplicity():-1"", int, doc=""number of photons in the jet"")
turn proc
***************************************
n Jets related functions
***************************************
AddNewGenJets(proc, genJetInfo):
""
d genJet into custom nanoAOD
""
nJetName         = genJetInfo.jetUpper
nJetAlgo         = genJetInfo.jetAlgo
nJetSize         = genJetInfo.jetSize
nJetSizeNr       = genJetInfo.jetSizeNr
nJetFinalColl    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")
nJetTablePrefix  = nanoInfo_genjets[genJetInfo.jet][""name""]
nJetTableDoc     = nanoInfo_genjets[genJetInfo.jet][""doc""]
veGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False)
turn proc
SaveGenJets(proc, genJetName, genJetAlgo, genJetSizeNr, genJetFinalColl, genJetTablePrefix, genJetTableDoc, runOnMC=False):
""
hedule modules for a given genJet collection and save its variables into custom NanoAOD
""
nJetTableThisJet = ""jet{}Table"".format(genJetName)
tattr(proc, genJetTableThisJet, genJetTable.clone(
  src       = genJetFinalColl,
  cut       = ""pt > 1"",
  name      = genJetTablePrefix,
  doc       = genJetTableDoc,
  variables = GENJETVARS
)
nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = getattr(proc,genJetTableThisJet).src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)
nJetFlavourTableThisJet = ""genJet{}FlavourTable"".format(genJetName)
tattr(proc, genJetFlavourTableThisJet, genJetFlavourTable.clone(
  name            = getattr(proc,genJetTableThisJet).name,
  src             = getattr(proc,genJetTableThisJet).src,
  cut             = getattr(proc,genJetTableThisJet).cut,
  jetFlavourInfos = genJetFlavourAssociationThisJet,
)
nJetSequenceName = ""genJet{}Sequence"".format(genJetName)
tattr(proc, genJetSequenceName, cms.Sequence(
  getattr(proc,genJetTableThisJet)
  getattr(proc,genJetFlavourAssociationThisJet)
  getattr(proc,genJetFlavourTableThisJet)
)
oc.nanoSequenceMC.insert(proc.nanoSequenceMC.index(proc.jetMC)1, getattr(proc,genJetSequenceName)) 
turn proc
ReclusterAK4GenJets(proc, genJA):
""
cluster AK4 Gen jets and replace 
immedGenJets that is used as default 
 save AK4 Gen jets in NanoAODs. 
""
int(""custom_jme_cff::ReclusterAK4GenJets: Recluster AK4 Gen jets"")
Recluster AK4 Gen jet
g = { 
""jet"" : ""ak4gen"",   
nJetInfo = genJA.addGenJetCollection(proc, **cfg)
nJetName            = genJetInfo.jetUpper
nJetAlgo            = genJetInfo.jetAlgo
nJetSize            = genJetInfo.jetSize
nJetSizeNr          = genJetInfo.jetSizeNr
lectedPatGenJets    = ""{}{}{}"".format(genJetAlgo.upper(), genJetSize, ""GenJetsNoNu"")
Change jet source to the newly clustered jet collection. Set very low pt cut for jets 
to be stored in the GenJet Table
oc.genJetTable.src = selectedPatGenJets
oc.genJetTable.cut = ""pt > 1""
oc.genJetTable.doc  =""AK4 Gen jets (made with visible genparticles)""
nJetFlavourAssociationThisJet = ""genJet{}FlavourAssociation"".format(genJetName)
tattr(proc, genJetFlavourAssociationThisJet, genJetFlavourAssociation.clone(
  jets           = proc.genJetTable.src,
  jetAlgorithm   = supportedJetAlgos[genJetAlgo],
  rParam         = genJetSizeNr,
)
oc.jetMC.insert(proc.jetMC.index(proc.genJetFlavourTable), getattr(proc, genJetFlavourAssociationThisJet)) 
turn proc
AddVariablesForAK4GenJets(proc):
oc.genJetTable.variables.nConstituents = GENJETVARS.nConstituents
turn proc
AddVariablesForAK8GenJets(proc):
oc.genJetAK8Table.variables.nConstituents = GENJETVARS.nConstituents
turn proc
========================================================================
sc. functions
========================================================================
RemoveAllJetPtCuts(proc):
""
move default pt cuts for all jets set in jets_cff.py 
""
oc.finalJets.cut             = """" # 15 -> 10
oc.finalJetsAK8.cut          = """" # 170 -> 170
oc.genJetTable.cut           = """" # 10 -> 8
oc.genJetFlavourTable.cut    = """" # 10 -> 8
oc.genJetAK8Table.cut        = """" # 100 -> 80
oc.genJetAK8FlavourTable.cut = """" # 100 -> 80
turn proc
========================================================================
STOMIZATION function
========================================================================
PrepJMECustomNanoAOD(process,runOnMC):
##########################################################################
Remove all default jet pt cuts from jets_cff.py
##########################################################################
ocess = RemoveAllJetPtCuts(process)
#########################################################################
Gen-level jets related functions. Only for MC.
#########################################################################
nJA = GenJetAdder()
 runOnMC:
############################################################################
# Save additional variables for AK8 GEN jets
############################################################################
process = AddVariablesForAK8GenJets(process)
###########################################################################
# Recluster AK4 GEN jets
###########################################################################
process = ReclusterAK4GenJets(process, genJA)
process = AddVariablesForAK4GenJets(process)
###########################################################################
# Add additional GEN jets to NanoAOD
###########################################################################
for jetConfig in config_genjets:
  cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
  genJetInfo = genJA.addGenJetCollection(process, **cfg)
  AddNewGenJets(process, genJetInfo)
#########################################################################
Reco-level jets related functions. For both MC and data.
#########################################################################
#########################################################################
Save additional variables for AK8Puppi jets
#########################################################################
ocess = AddVariablesForAK8PuppiJets(process)
#########################################################################
Recluster AK4 CHS jets and replace ""slimmedJets""
#########################################################################
ocess = ReclusterAK4CHSJets(process, recoJA, runOnMC)
#########################################################################
Add additional Reco jets to NanoAOD
#########################################################################
cfg = { k : v for k, v in jetConfig.items() if k != ""enabled""}
AddNewPatJets(process, recoJetInfo, runOnMC)
turn process
turn process
turn process
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"self.addProcessAndTask(proc, pfCand, puppi.clone(
    candName = self.pfLabel,
"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, pfCand, puppi.clone(
    candName = reco_jet.pfLabel,"
-------------------------------------------------------------------------
"self.addProcessAndTask(proc, pfCand, puppi.clone(
    candName = self.pfLabel,
    clonePackedCands = True,
    useExistingWeights = True,
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"jetCollection = '{}Collection'.format(jetUpper)
#
# Cluster new jet
#
if recoJetInfo.jetPUMethod == ""chs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCHS.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""puppi"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsPuppi.clone(
      src = self.pfLabel,
      srcWeights = pfCand
    )
  )
elif recoJetInfo.jetPUMethod == ""sk"":
  self.addProcessAndTask(proc, pfCand, ak4PFJetsSK.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""cs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCS.clone(
    src = pfCand,
  )
)
else:
  self.addProcessAndTask(proc, jetCollection, ak4PFJets.clone(
    src = pfCand,
getattr(proc, jetCollection).jetAlgorithm = supportedJetAlgos[recoJetInfo.jetAlgo]
getattr(proc, jetCollection).rParam = recoJetInfo.jetSizeNr
============================================
Make patJet collection
============================================
Jet correction 
"
-------------------------------------------------------------------------
"if recoJetInfo.jetPUMethod == ""chs"":
            jetCollection = '{}Collection'.format(jetUpper)
            self.addProcessAndTask(proc, jetCollection, ak4PFJetsCHS.clone(
                src = pfCand,
            ))
        elif recoJetInfo.jetPUMethod == ""puppi"":
            jetCollection = '{}Collection'.format(jetUpper)
            self.addProcessAndTask(proc, jetCollection, ak4PFJetsPuppi.clone(
                src = cms.InputTag(self.pfLabel),
                srcWeights = pfCand
            ))
        elif recoJetInfo.jetPUMethod == ""sk"":
            self.addProcessAndTask(proc, pfCand, ak4PFJetsSK.clone(
                src = pfCand,
            ))
        elif recoJetInfo.jetPUMethod == ""cs"":
            jetCollection = '{}Collection'.format(jetUpper)
            self.addProcessAndTask(proc, jetCollection, ak4PFJetsCS.clone(
                src = pfCand
            ))
        else:
            jetCollection = '{}Collection'.format(jetUpper)
            self.addProcessAndTask(proc, jetCollection, ak4PFJets.clone(
                src = pfCand
            ))

        getattr(proc, jetCollection).jetAlgorithm = supportedJetAlgos[recoJetInfo.jetAlgo]
        getattr(proc, jetCollection).rParam = recoJetInfo.jetSizeNr"
-------------------------------------------------------------------------
"jetCollection = '{}Collection'.format(jetUpper)
#
# Cluster new jet
#
if recoJetInfo.jetPUMethod == ""chs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCHS.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""puppi"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsPuppi.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""sk"":
  self.addProcessAndTask(proc, pfCand, ak4PFJetsSK.clone(
      src = pfCand,
    )
  )
elif recoJetInfo.jetPUMethod == ""cs"":
  self.addProcessAndTask(proc, jetCollection, ak4PFJetsCS.clone(
    src = pfCand,
  )
)
else:
  self.addProcessAndTask(proc, jetCollection, ak4PFJets.clone(
    src = pfCand,
getattr(proc, jetCollection).jetAlgorithm = supportedJetAlgos[recoJetInfo.jetAlgo]
getattr(proc, jetCollection).rParam = recoJetInfo.jetSizeNr
============================================
Make patJet collection
============================================
Jet correction 
"
-------------------------------------------------------------------------
"Recom
PRs: 30674, 31124"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2018_design'       :  '112X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v3',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v3',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v3',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v3',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v3',
"
-------------------------------------------------------------------------
"'phase1_2018_design'       :  '112X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '112X_upgrade2018_realistic_v3',
'phase1_2018_realistic_hi' :  '112X_upgrade2018_realistic_HI_v3',
'phase1_2018_realistic_HEfail' :  '112X_upgrade2018_realistic_HEfail_v3',
'phase1_2018_cosmics'      :  '112X_upgrade2018cosmics_realistic_deco_v3',
'phase1_2018_cosmics_peak' :  '112X_upgrade2018cosmics_realistic_peak_v3',"
-------------------------------------------------------------------------
"'phase1_2018_design'       :  '111X_upgrade2018_design_v2',
'phase1_2018_realistic'    :  '111X_upgrade2018_realistic_v2',
'phase1_2018_realistic_hi' :  '111X_upgrade2018_realistic_HI_v1',
'phase1_2018_realistic_HEfail' :  '111X_upgrade2018_realistic_HEfail_v2',
'phase1_2018_cosmics'      :   '111X_upgrade2018cosmics_realistic_deco_v2',
'phase1_2018_cosmics_peak' :   '111X_upgrade2018cosmics_realistic_peak_v2',
"
-------------------------------------------------------------------------
"Recom
PRs: 31050, 31119"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '112X_dataRun2_v3',
'run2_data'         :   '112X_dataRun2_v3',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '112X_dataRun2_relval_v3',
"
-------------------------------------------------------------------------
"'run1_data'         :   '112X_dataRun2_v3',
'run2_data'         :   '112X_dataRun2_v3',
'run2_data_HEfail'  :   '112X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '112X_dataRun2_relval_v3',"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v4',
'run2_data'         :   '111X_dataRun2_v4',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v4',
'run2_data_relval'  :   '111X_dataRun2_relval_v4',
"
-------------------------------------------------------------------------
"Recom
PRs: 30984, 31017"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v5', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v5',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v5',
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v5', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v5',
'phase1_2021_realistic_hi' : '112X_mcRun3_2021_realistic_HI_v5',"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v7', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v7', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v7',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v9',
"
-------------------------------------------------------------------------
"Recom
PRs: 30907, 30993"
-------------------------------------------------------------------------
=========================================================================
"#lastLumiFile = cms.untracked.string('last_lumi.txt'),
lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"# lastLumiFile = cms.untracked.string('last_lumi.txt'),
# lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),"
-------------------------------------------------------------------------
"lastLumiFile = cms.untracked.string('last_lumi.txt'),
#lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"Recom
PRs: 30690, 30696"
-------------------------------------------------------------------------
=========================================================================
"#lastLumiFile = cms.untracked.string('last_lumi.txt'),
lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"#lastLumiFile = cms.untracked.string('last_lumi.txt'),
#lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),"
-------------------------------------------------------------------------
"lastLumiFile = cms.untracked.string('last_lumi.txt'),
#lastLumiUrl = cms.untracked.string('http://ru-c2e14-11-01.cms:11100/urn:xdaq-application:lid=52/getLatestLumiSection'),
"
-------------------------------------------------------------------------
"Recom
PRs: 30690, 30696"
-------------------------------------------------------------------------
=========================================================================
"'pfMassIndependentDeepDoubleBvLV2JetTags:probQCD', 
'pfMassIndependentDeepDoubleBvLV2JetTags:probHbb',
'pfMassIndependentDeepDoubleCvLV2JetTags:probQCD',
'pfMassIndependentDeepDoubleCvLV2JetTags:probHcc',
'pfMassIndependentDeepDoubleCvBV2JetTags:probHbb',
'pfMassIndependentDeepDoubleCvBV2JetTags:probHcc',
re/relval/CMSSW_10_3_0_pre2/RelValTTbar_13/MINIAODSIM/PU25ns_103X_upgrade2018_realistic_v2-v1/20000/85820ACA-657B-BC44-AC74-AACD6D54B348.root'
72164088-CB67-E811-9D0D-008CFA197AC4.root',
ss.maxEvents.input = 1000
"
-------------------------------------------------------------------------
"# ChargeTagging
supportedBtagDiscr['pfMassIndependentDeepDoubleBvLJetTags:probQCD'] = [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
supportedBtagDiscr['pfMassIndependentDeepDoubleBvLJetTags:probHbb'] = [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
supportedBtagDiscr['pfMassIndependentDeepDoubleCvLJetTags:probQCD'] = [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
supportedBtagDiscr['pfMassIndependentDeepDoubleCvLJetTags:probHcc'] = [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
supportedBtagDiscr['pfMassIndependentDeepDoubleCvBJetTags:probHbb'] = [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]
supportedBtagDiscr['pfMassIndependentDeepDoubleCvBJetTags:probHcc'] = [[""pfDeepDoubleXTagInfos""], ['pfBoostedDoubleSVAK8TagInfos', ""pfImpactParameterAK8TagInfos"", 'pfInclusiveSecondaryVertexFinderAK8TagInfos']]"
-------------------------------------------------------------------------
"'pfMassIndependentDeepDoubleBvLV2JetTags:probQCD', 
'pfMassIndependentDeepDoubleBvLV2JetTags:probHbb',
'pfMassIndependentDeepDoubleCvLV2JetTags:probQCD',
'pfMassIndependentDeepDoubleCvLV2JetTags:probHcc',
'pfMassIndependentDeepDoubleCvBV2JetTags:probHbb',
'pfMassIndependentDeepDoubleCvBV2JetTags:probHcc',
re/relval/CMSSW_10_3_0_pre2/RelValTTbar_13/MINIAODSIM/PU25ns_103X_upgrade2018_realistic_v2-v1/20000/85820ACA-657B-BC44-AC74-AACD6D54B348.root'
e/mc/RunIIFall17MiniAODv2/GluGluHToCC_M125_13TeV_powheg_pythia8/MINIAODSIM/PU2017_12Apr2018_94X_mc2017_realistic_v14-v2/30000/72164088-CB67-E811-9D0D-008CFA197AC4.root',
s.maxEvents.input = 10000
"
-------------------------------------------------------------------------
"Recom
PRs: 30016, 30542"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v2',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v7',
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v9',
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v6',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v9',
'phase1_2024_realistic'    : '112X_mcRun3_2023_realistic_v10',"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '110X_mcRun3_2021_design_v8', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '110X_mcRun3_2021_realistic_v10', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '110X_mcRun3_2021cosmics_realistic_deco_v7',
'phase1_2023_realistic'    : '110X_mcRun3_2023_realistic_v10', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '110X_mcRun3_2024_realistic_v10', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 30221, 30300"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v3',
'run2_mc'           :   '106X_mcRun2_asymptotic_v9',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v6',"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '106X_mcRun2_asymptotic_preVFP_v8',
'run2_mc'           :   '106X_mcRun2_asymptotic_v13',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v7',
"
-------------------------------------------------------------------------
"Recom
PRs: 30151, 30287"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v2', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v2', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v2',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v2',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v2', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v2', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v5', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v5',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v6',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v5', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v5', # GT containing realistic conditions for Phase1 2024"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v6', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v6', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v6',
'phase1_2021_realistic_hi' : '111X_mcRun3_2021_realistic_HI_v7',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v6', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v6', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 30221, 30267"
-------------------------------------------------------------------------
=========================================================================
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v1', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v1', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v1',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v1',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v1', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v1', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '112X_mcRun3_2021_design_v1', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '112X_mcRun3_2021_realistic_v1', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '112X_mcRun3_2021cosmics_realistic_deco_v1',
'phase1_2021_realistic_hi' :  '112X_mcRun3_2021_realistic_HI_v1',
'phase1_2023_realistic'    : '112X_mcRun3_2023_realistic_v1', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '112X_mcRun3_2024_realistic_v1' # GT containing realistic conditions for Phase1 2024"
-------------------------------------------------------------------------
"'phase1_2021_design'       : '111X_mcRun3_2021_design_v5', # GT containing design conditions for Phase1 2021
'phase1_2021_realistic'    : '111X_mcRun3_2021_realistic_v5', # GT containing realistic conditions for Phase1 2021
'phase1_2021_cosmics'      : '111X_mcRun3_2021cosmics_realistic_deco_v5',
'phase1_2021_realistic_hi' :  '111X_mcRun3_2021_realistic_HI_v6',
'phase1_2023_realistic'    : '111X_mcRun3_2023_realistic_v5', # GT containing realistic conditions for Phase1 2023
'phase1_2024_realistic'    : '111X_mcRun3_2024_realistic_v5', # GT containing realistic conditions for Phase1 2024
"
-------------------------------------------------------------------------
"Recom
PRs: 30195, 30233"
-------------------------------------------------------------------------
=========================================================================
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',
"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '111X_mcRun2_asymptotic_preVFP_v1',
'run2_mc'           :   '111X_mcRun2_asymptotic_v1',
'run2_mc_cosmics'   :   '111X_mcRun2cosmics_startup_deco_v1',"
-------------------------------------------------------------------------
"'run2_mc_pre_vfp'   :   '110X_mcRun2_asymptotic_preVFP_v7',
'run2_mc'           :   '110X_mcRun2_asymptotic_v9',
'run2_mc_cosmics'   :   '110X_mcRun2cosmics_startup_deco_v8',
"
-------------------------------------------------------------------------
"Recom
PRs: 30151, 30203"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v3',
'run2_data'         :   '111X_dataRun2_v3',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '111X_dataRun2_relval_v3',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v28',
        'run2_data'         :   '106X_dataRun2_v28',
        'run2_data_HEfail'  :   '106X_dataRun2_HEfail_v13',
        'run2_data_relval'  :   '106X_dataRun2_relval_v26',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v28',
'run2_data'         :   '106X_dataRun2_v28',
'run2_data_relval'  :   '106X_dataRun2_relval_v26',
"
-------------------------------------------------------------------------
"Recom
PRs: 29629, 30132"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v3',
'run2_data'         :   '111X_dataRun2_v3',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '111X_dataRun2_relval_v3',
"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v13',
'run2_data'         :   '110X_dataRun2_v13',
'run2_data_HEfail'  :   '110X_dataRun2_HEfail_v3',
'run2_data_relval'  :   '110X_dataRun2_relval_v13',"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v13',
'run2_data'         :   '110X_dataRun2_v13',
'run2_data_relval'  :   '110X_dataRun2_relval_v13',
"
-------------------------------------------------------------------------
"Recom
PRs: 29629, 30131"
-------------------------------------------------------------------------
=========================================================================
"runMetCorAndUncFromMiniAOD(process,isData=(not runOnMC),metType=""Puppi"",postfix=""Puppi"",jetFlavor=""AK4PFPuppi"",recoMetFromPFCs=True)
"
-------------------------------------------------------------------------
"runMetCorAndUncFromMiniAOD(process,isData=False,metType=""Puppi"",postfix=""Puppi"",jetFlavor=""AK4PFPuppi"",recoMetFromPFCs=True)"
-------------------------------------------------------------------------
"runMetCorAndUncFromMiniAOD(process,isData=(not runOnMC),metType=""Puppi"",postfix=""Puppi"",jetFlavor=""AK4PFPuppi"",recoMetFromPFCs=True,pfCandColl=cms.InputTag(""puppiForMET""))
"
-------------------------------------------------------------------------
"Recom
PRs: 30017, 30019"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v2',
'run2_data'         :   '111X_dataRun2_v2',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '111X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v2',
        'run2_data'         :   '111X_dataRun2_v2',
        'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v2',
        'run2_data_relval'  :   '111X_dataRun2_relval_v2',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v27',
'run2_data'         :   '106X_dataRun2_v27',
'run2_data_relval'  :   '106X_dataRun2_relval_v25',
"
-------------------------------------------------------------------------
"Recom
PRs: 29023, 29029"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v2',
'run2_data'         :   '111X_dataRun2_v2',
'run2_data_HEfail'  :   '111X_dataRun2_HEfail_v2',
'run2_data_relval'  :   '111X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v11',
'run2_data'         :   '111X_dataRun2_v11',
'run2_data_HEfail'  :   '111X_dataRun2_PromptLike_HEfail_v9',
'run2_data_relval'  :   '111X_dataRun2_relval_v11',"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v12',
'run2_data'         :   '110X_dataRun2_v12',
'run2_data_relval'  :   '110X_dataRun2_relval_v12',
"
-------------------------------------------------------------------------
"Recom
PRs: 29023, 29028"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v1',
'run2_data'         :   '111X_dataRun2_v1',
'run2_data_HEfail' : '111X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '111X_dataRun2_relval_v1',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v1',
'run2_data'         :   '111X_dataRun2_v1',
'run2_data_promptlike_HEfail' : '111X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '111X_dataRun2_relval_v1',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v26',
'run2_data'         :   '106X_dataRun2_v26',
'run2_data_relval'  :   '106X_dataRun2_relval_v24',
"
-------------------------------------------------------------------------
"Recom
PRs: 28981, 28990"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '111X_dataRun2_v1',
'run2_data'         :   '111X_dataRun2_v1',
'run2_data_HEfail' : '111X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '111X_dataRun2_relval_v1',
"
-------------------------------------------------------------------------
"'run1_data'         :   '111X_dataRun2_v1',
'run2_data'         :   '111X_dataRun2_v1',
'run2_data_promptlike_HEfail' : '111X_dataRun2_HEfail_v1',
'run2_data_relval'  :   '111X_dataRun2_relval_v1',"
-------------------------------------------------------------------------
"'run1_data'         :   '110X_dataRun2_v11',
'run2_data'         :   '110X_dataRun2_v11',
'run2_data_relval'  :   '110X_dataRun2_relval_v11',
"
-------------------------------------------------------------------------
"Recom
PRs: 28981, 28982"
-------------------------------------------------------------------------
=========================================================================
"for ps in process.cscSegments.algo_psets[4].algo_psets: ps.enlarge = True   
return process
"
-------------------------------------------------------------------------
"for ps in process.cscSegments.algo_psets[4].algo_psets: 
      ps.enlarge = True
return process"
-------------------------------------------------------------------------
"for ps in process.cscSegments.algo_psets[4].algo_psets: ps.enlarge = True
"
-------------------------------------------------------------------------
"Recom
PRs: 28979, 28953"
-------------------------------------------------------------------------
=========================================================================
"fastSim.toReplaceWith(trackingGlobalRecoTask, cms.Task(doAlldEdXEstimatorsTask, trackExtrapolator))
"
-------------------------------------------------------------------------
"fastSim.toReplaceWith(cms.Sequence(ckftracks_fast), cms.Task(doAlldEdXEstimators, trackExtrapolator))"
-------------------------------------------------------------------------
"fastSim.toReplaceWith(trackingGlobalReco,cms.Sequence(doAlldEdXEstimators*trackExtrapolator))
"
-------------------------------------------------------------------------
"Recom
PRs: 28257, 28259"
-------------------------------------------------------------------------
=========================================================================
"fastSim.toReplaceWith(doAlldEdXEstimatorsTask, cms.Task(dedxHarmonic2, dedxPixelHarmonic2))
"
-------------------------------------------------------------------------
"fastSim.replaceWith(cms.Task(dedxHarmonic2, dedxPixelHarmonic2))"
-------------------------------------------------------------------------
"fastSim.toReplaceWith(doAlldEdXEstimators, cms.Sequence(dedxHarmonic2  dedxPixelHarmonic2))
"
-------------------------------------------------------------------------
"Recom
PRs: 28257, 28259"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '110X_dataRun2_v4',
'run2_data'         :   '110X_dataRun2_v4',
'run2_data_relval'  :   '110X_dataRun2_relval_v4',
"
-------------------------------------------------------------------------
"### NEW KEYS ###
    # GlobalTag for Run1 data reprocessing
    'run1_data'         :    '110X_dataRun2_v18',
    # GlobalTag for Run2 data reprocessing
    'run2_data'         :    '110X_dataRun2_v18',
    # GlobalTag for Run2 data relvals: allows customization to run with fixed L1 menu
    'run2_data_relval'  :    '110X_dataRun2_relval_v17',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v20',
'run2_data'         :   '106X_dataRun2_v20',
'run2_data_relval'  :   '106X_dataRun2_relval_v19',
"
-------------------------------------------------------------------------
"Recom
PRs: 27733, 27734"
-------------------------------------------------------------------------
=========================================================================
"'run2_design'       :   '110X_mcRun2_design_v2',
'run2_mc'           :   '110X_mcRun2_asymptotic_v2',
'run2_mc_cosmics'   :   '110X_mcRun2cosmics_startup_deco_v2',
'run2_mc_pa'        :   '110X_mcRun2_pA_v2',
"
-------------------------------------------------------------------------
"'run2_design'       :   '110X_mcRun2_design_v5',
'run2_mc'           :   '110X_mcRun2_asymptotic_v5',
'run2_mc_cosmics'   :   '110X_mcRun2cosmics_startup_deco_v3',
'run2_mc_pa'        :   '110X_mcRun2_pA_v4',"
-------------------------------------------------------------------------
"'run2_design'       :   '106X_mcRun2_design_v6',
'run2_mc'           :   '106X_mcRun2_asymptotic_v6',
'run2_mc_cosmics'   :   '106X_mcRun2cosmics_startup_deco_v3',
'run2_mc_pa'        :   '106X_mcRun2_pA_v5',
"
-------------------------------------------------------------------------
"Recom
PRs: 27600, 27606"
-------------------------------------------------------------------------
=========================================================================
"'run1_data'         :   '110X_dataRun2_v2',
'run2_data'         :   '110X_dataRun2_v2',
'run2_data_relval'  :   '110X_dataRun2_relval_v2',
"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v17',
'run2_data'         :   '106X_dataRun2_v17',
'run2_data_relval'  :   '106X_dataRun2_relval_v16',"
-------------------------------------------------------------------------
"'run1_data'         :   '106X_dataRun2_v18',
'run2_data'         :   '106X_dataRun2_v18',
'run2_data_relval'  :   '106X_dataRun2_relval_v17',
"
-------------------------------------------------------------------------
"Recom
PRs: 27604, 27605"
-------------------------------------------------------------------------
=========================================================================
"import FWCore.ParameterSet.Config as cms
herwig7CommonMergingSettingsBlock = cms.PSet(
    hw_common_merging_settings = cms.vstring(
            'read snippets/PPCollider.in', 
            'cd /Herwig/EventHandlers', 
            'library FxFx.so', 
            'create Herwig::FxFxEventHandler theLesHouchesHandler', 
            'cd /Herwig/EventHandlers', 
            'library FxFx.so', 
            'create Herwig::FxFxFileReader theLHReader', 
            'cd /Herwig/Shower', 
            'library FxFxHandler.so', 
            'create Herwig::FxFxHandler FxFxHandler', 
            'set /Herwig/Shower/FxFxHandler:ShowerModel /Herwig/Shower/ShowerModel', 
            'set /Herwig/Shower/FxFxHandler:SplittingGenerator /Herwig/Shower/SplittingGenerator', 
            'cd /Herwig/EventHandlers', 
            'create ThePEG::Cuts   /Herwig/Cuts/NoCuts', 
            'cd /Herwig/EventHandlers', 
            'insert theLesHouchesHandler:FxFxReaders[0] theLHReader', 
            'set theLesHouchesHandler:WeightOption VarNegWeight', 
            'set theLesHouchesHandler:PartonExtractor /Herwig/Partons/PPExtractor', 
            'set theLesHouchesHandler:CascadeHandler /Herwig/Shower/FxFxHandler', 
            'set theLesHouchesHandler:HadronizationHandler /Herwig/Hadronization/ClusterHadHandler', 
            'set theLesHouchesHandler:DecayHandler /Herwig/Decays/DecayHandler', 
            'set /Herwig/Shower/ShowerHandler:MaxPtIsMuF Yes', 
            'set /Herwig/Shower/ShowerHandler:RestrictPhasespace Yes', 
            'set /Herwig/Shower/PartnerFinder:PartnerMethod Random', 
            'set /Herwig/Shower/PartnerFinder:ScaleChoice Partner', 
            'cd /Herwig/EventHandlers', 
            'set theLHReader:AllowedToReOpen No',
            'set theLHReader:WeightWarnings    false', 
            'set theLHReader:FileName cmsgrid_final.lhe', 
            'set theLHReader:MomentumTreatment      RescaleEnergy', 
            'set theLHReader:Cuts  /Herwig/Cuts/NoCuts', 
            'cd /Herwig/Generators', 
            'set EventGenerator:EventHandler  /Herwig/EventHandlers/theLesHouchesHandler',  
            'set EventGenerator:PrintEvent     1', 
            'set EventGenerator:MaxErrors      10000', 
            'cd /Herwig/Shower', 
            'set /Herwig/Shower/FxFxHandler:MPIHandler  /Herwig/UnderlyingEvent/MPIHandler', 
            'set /Herwig/Shower/FxFxHandler:RemDecayer  /Herwig/Partons/RemnantDecayer', 
            'set /Herwig/Shower/FxFxHandler:ShowerAlpha  AlphaQCD', 
            'set FxFxHandler:HeavyQVeto Yes', 
            'set FxFxHandler:HardProcessDetection Automatic', 
            'set FxFxHandler:ihrd        3', 
            'set FxFxHandler:njetsmax      4', 
            'set FxFxHandler:drjmin      0', 
            'cd /Herwig/Shower', 
            'set FxFxHandler:VetoIsTurnedOff VetoingIsOn', 
            'set FxFxHandler:MergeMode TreeMG5', 
            'set FxFxHandler:ETClus 20*GeV', 
            'set FxFxHandler:RClus 1.0', 
            'set FxFxHandler:EtaClusMax 5', 
            'set FxFxHandler:RClusFactor 1.5'
    )
)
"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms

herwig7CommonMergingSettingsBlock = cms.PSet(
    hw_common_merging_settings = cms.vstring(
        'read snippets/PPCollider.in',
        'cd /Herwig/EventHandlers',
        'library FxFx.so',
        'create Herwig::FxFxEventHandler theLesHouchesHandler',
        'library FxFx.so',
        'create Herwig::FxFxFileReader theLHReader',
        'library FxFxHandler.so',
        'create Herwig::FxFxHandler FxFxHandler',
        'set /Herwig/Shower/FxFxHandler:ShowerModel /Herwig/Shower/ShowerModel',
        'set /Herwig/Shower/FxFxHandler:SplittingGenerator /Herwig/Shower/SplittingGenerator',
        'create ThePEG::Cuts /Herwig/Cuts/NoCuts',
        'insert theLesHouchesHandler:FxFxReaders[0] theLHReader',
        'set theLesHouchesHandler:WeightOption VarNegWeight',
        'set theLesHouchesHandler:PartonExtractor /Herwig/Partons/PPExtractor',
        'set theLesHouchesHandler:CascadeHandler /Herwig/Shower/FxFxHandler',
        'set theLesHouchesHandler:HadronizationHandler /Herwig/Hadronization/ClusterHadHandler',
        'set theLesHouchesHandler:DecayHandler /Herwig/Decays/DecayHandler',
        'set /Herwig/Shower/ShowerHandler:MaxPtIsMuF Yes',
        'set /Herwig/Shower/ShowerHandler:RestrictPhasespace Yes',
        'set /Herwig/Shower/PartnerFinder:PartnerMethod Random',
        'set /Herwig/Shower/PartnerFinder:ScaleChoice Partner',
        'set theLHReader:AllowedToReOpen No',
        'set theLHReader:WeightWarnings false',
        'set theLHReader:FileName cmsgrid_final.lhe',
        'set theLHReader:MomentumTreatment RescaleEnergy',
        'set theLHReader:Cuts /Herwig/Cuts/NoCuts',
        'set EventGenerator:EventHandler /Herwig/EventHandlers/theLesHouchesHandler',
        'set EventGenerator:PrintEvent 1',
        'set EventGenerator:MaxErrors 10000',
        'set /Herwig/Shower/FxFxHandler:MPIHandler /Herwig/UnderlyingEvent/MPIHandler',
        'set /Herwig/Shower/FxFxHandler:RemDecayer /Herwig/Partons/RemnantDecayer',
        'set /Herwig/Shower/FxFxHandler:ShowerAlpha AlphaQCD',
        'set FxFxHandler:HeavyQVeto Yes',
        'set FxFxHandler:HardProcessDetection Automatic',
        'set FxFxHandler:ihrd 3',
        'set FxFxHandler:njetsmax 4',
        'set FxFxHandler:drjmin 0',
        'set FxFxHandler:VetoIsTurnedOff VetoingIsOn',
        'set FxFxHandler:MergeMode TreeMG5',
        'set FxFxHandler:ETClus 20*GeV',
        'set FxFxHandler:RClus 1.0',
        'set FxFxHandler:EtaClusMax 5',
        'set FxFxHandler:RClusFactor 1.5'
    )
)"
-------------------------------------------------------------------------
"import FWCore.ParameterSet.Config as cms
herwig7CommonMergingSettingsBlock = cms.PSet(
    hw_common_merging_settings = cms.vstring(
            'read snippets/PPCollider.in', 
            'cd /Herwig/EventHandlers', 
            'library FxFx.so', 
            'create Herwig::FxFxEventHandler theLesHouchesHandler', 
            'cd /Herwig/EventHandlers', 
            'library FxFx.so', 
            'create Herwig::FxFxFileReader theLHReader', 
            'cd /Herwig/Shower', 
            'library FxFxHandler.so', 
            'create Herwig::FxFxHandler FxFxHandler', 
            'set /Herwig/Shower/FxFxHandler:ShowerModel /Herwig/Shower/ShowerModel', 
            'set /Herwig/Shower/FxFxHandler:SplittingGenerator /Herwig/Shower/SplittingGenerator', 
            'cd /Herwig/EventHandlers', 
            'create ThePEG::Cuts   /Herwig/Cuts/NoCuts', 
            'cd /Herwig/EventHandlers', 
            'insert theLesHouchesHandler:FxFxReaders[0] theLHReader', 
            'set theLesHouchesHandler:WeightOption VarNegWeight', 
            'set theLesHouchesHandler:PartonExtractor /Herwig/Partons/PPExtractor', 
            'set theLesHouchesHandler:CascadeHandler /Herwig/Shower/FxFxHandler', 
            'set theLesHouchesHandler:HadronizationHandler /Herwig/Hadronization/ClusterHadHandler', 
            'set theLesHouchesHandler:DecayHandler /Herwig/Decays/DecayHandler', 
            'set /Herwig/Shower/ShowerHandler:MaxPtIsMuF Yes', 
            'set /Herwig/Shower/ShowerHandler:RestrictPhasespace Yes', 
            'set /Herwig/Shower/PartnerFinder:PartnerMethod Random', 
            'set /Herwig/Shower/PartnerFinder:ScaleChoice Partner', 
            'cd /Herwig/EventHandlers', 
            'set theLHReader:AllowedToReOpen No',
            'set theLHReader:WeightWarnings    false', 
            'set theLHReader:FileName cmsgrid_final.lhe', 
            'set theLHReader:MomentumTreatment      RescaleEnergy', 
            'set theLHReader:Cuts  /Herwig/Cuts/NoCuts', 
            'cd /Herwig/Generators', 
            'set EventGenerator:EventHandler  /Herwig/EventHandlers/theLesHouchesHandler', 
            'set EventGenerator:NumberOfEvents 100000000', 
            'set EventGenerator:PrintEvent     1', 
            'set EventGenerator:MaxErrors      10000', 
            'cd /Herwig/Shower', 
            'set /Herwig/Shower/FxFxHandler:MPIHandler  /Herwig/UnderlyingEvent/MPIHandler', 
            'set /Herwig/Shower/FxFxHandler:RemDecayer  /Herwig/Partons/RemnantDecayer', 
            'set /Herwig/Shower/FxFxHandler:ShowerAlpha  AlphaQCD', 
            'set FxFxHandler:HeavyQVeto Yes', 
            'set FxFxHandler:HardProcessDetection Automatic', 
            'set FxFxHandler:ihrd        3', 
            'set FxFxHandler:njetsmax      4', 
            'set FxFxHandler:drjmin      0', 
            'cd /Herwig/Shower', 
            'set FxFxHandler:VetoIsTurnedOff VetoingIsOn', 
            'set FxFxHandler:MergeMode TreeMG5', 
            'set FxFxHandler:ETClus 20*GeV', 
            'set FxFxHandler:RClus 1.0', 
            'set FxFxHandler:EtaClusMax 5', 
            'set FxFxHandler:RClusFactor 1.5'
    )
)
"
-------------------------------------------------------------------------
"Recom
PRs: 26122, 26124"
-------------------------------------------------------------------------
=========================================================================
"# GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
'run2_data_promptlike_HEfail' : '103X_dataRun2_PromptLike_HEfail_v3',
"
-------------------------------------------------------------------------
"# GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
    'run2_data_promptlike_HEfail' : '103X_dataRun2_PromptLike_HEfail_v3',"
-------------------------------------------------------------------------
"# GlobalTag for Run2 data 2018B relvals only: HEM-15-16 fail
'run2_data_promptlike_HEfail' : '102X_dataRun2_PromptLike_HEfail_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"# GlobalTag for MC production with realistic conditions for full Phase1 2018 detector: HEM-15-16 fail
'phase1_2018_realistic_HEfail'    : '103X_upgrade2018_realistic_HEfail_v1',
"
-------------------------------------------------------------------------
"'phase1_2018_realistic_HEfail'    : '103X_upgrade2018_realistic_HEfail_v1',"
-------------------------------------------------------------------------
"# GlobalTag for MC production with realistic conditions for full Phase1 2018 detector: HEM-15-16 fail
'phase1_2018_realistic_HEfail'    : '102X_upgrade2018_realistic_v12HEfail_v1',
"
-------------------------------------------------------------------------
"Recom
PRs: 24493, 24550"
-------------------------------------------------------------------------
=========================================================================
"OnlyHardProcessBHadrons = cms.bool(False),
taggingMode               = cms.bool(False)
"
-------------------------------------------------------------------------
"OnlyHardProcessBHadrons = cms.bool(False),
        taggingMode = cms.bool(False)"
-------------------------------------------------------------------------
"OnlyHardProcessBHadrons = cms.bool(False),
taggingMode             = cms.bool(False)
"
-------------------------------------------------------------------------
"Recom
PRs: 21743, 23167"
-------------------------------------------------------------------------
=========================================================================
"Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
     DoubleMu33NoFiltersNoVtxDisplaced_monitoring
     DoubleMu40NoFiltersNoVtxDisplaced_monitoring
     Mu43NoFiltersNoVtx_Photon43_CaloIdL_monitoring
     Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring
     Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring
     Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring
     Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring
     Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring
     Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring
"
-------------------------------------------------------------------------
"Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")

Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")"
-------------------------------------------------------------------------
"Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg/')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 38')
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_v*"")
Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.eleSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring = hltMuonmonitoring.clone()
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.FolderName = cms.string('HLT/EXO/Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg/')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nmuons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.nelectrons = cms.uint32(1)
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.muonSelection = cms.string('pt > 43')
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.numGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_v*"")
Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring.denGenericTriggerEventPSet.hltPaths = cms.vstring(""HLT_PFMET120_PFMHT120_IDTight_v*"",""HLT_PFMETTypeOne120_PFMHT120_IDTight_v*"",""HLT_MonoCentralPFJet80_PFMETNoMu120_PFMHTNoMu120_IDTight_v*"")
     DoubleMu43NoFiltersNoVtx_monitoring
     DoubleMu33NoFiltersNoVtxDisplaced_monitoring
     DoubleMu40NoFiltersNoVtxDisplaced_monitoring
     Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_monitoring
     Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_monitoring
     Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_MuLeg_monitoring
     Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_MuLeg_monitoring
     Mu38NoFiltersNoVtxDisplaced_Photon38_CaloIdL_EleLeg_monitoring
     Mu43NoFiltersNoVtxDisplaced_Photon43_CaloIdL_EleLeg_monitoring
"
-------------------------------------------------------------------------
"Recom
PRs: 22808, 22869"
-------------------------------------------------------------------------
=========================================================================
"process = customiseFor22001(process)
    
"
-------------------------------------------------------------------------
process = customiseFor21664_forMahiOn(process)
-------------------------------------------------------------------------
"process = customiseFor22001(process)
"
-------------------------------------------------------------------------
"Recom
PRs: 22001, 22002"
-------------------------------------------------------------------------
=========================================================================
"RAWMINIAODEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
"
-------------------------------------------------------------------------
"RAWMINIAODEventContent.outputCommands.extend(L1TriggerAOD.outputCommands)
RAWMINIAODEventContent.outputCommands.extend(HLTriggerAOD.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(L1TriggerAOD.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(HLTriggerAOD.outputCommands)"
-------------------------------------------------------------------------
"RAWMINIAODEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(L1TriggerRAW.outputCommands)
RAWMINIAODSIMEventContent.outputCommands.extend(HLTriggerRAW.outputCommands)
RAWMINIAODEventContent.outputCommands.extend(cms.untracked.vstring(
    'keep FEDRawDataCollection_rawDataCollector_*_*',
    'keep FEDRawDataCollection_source_*_*'
))
RAWMINIAODSIMEventContent.outputCommands.extend(cms.untracked.vstring(
    'keep FEDRawDataCollection_rawDataCollector_*_*',
    'keep FEDRawDataCollection_source_*_*'
))
"
-------------------------------------------------------------------------
"Recom
PRs: 19846, 19847"
-------------------------------------------------------------------------
=========================================================================
"diMuonHistos.etaBin = cms.int32(70) #dimuonhistograms mass, bin   
diMuonHistos.etaBBin = cms.int32(70)    
diMuonHistos.etaEBin = cms.int32(70)    
diMuonHistos.LowMassMin = cms.double(2.0)   
diMuonHistos.LowMassMax = cms.double(14.0)    
diMuonHistos.HighMassMin = cms.double(55.0)   
diMuonHistos.HighMassMax = cms.double(125.0)
"
-------------------------------------------------------------------------
"diMuonHistos.etaBin = cms.int32(70) #dimuonhistograms mass, bin
diMuonHistos.etaBBin = cms.int32(70)
diMuonHistos.etaEBin = cms.int32(70)
diMuonHistos.LowMassMin = cms.double(2.0)
diMuonHistos.LowMassMax = cms.double(14.0)
diMuonHistos.HighMassMin = cms.double(55.0)
diMuonHistos.HighMassMax = cms.double(125.0)"
-------------------------------------------------------------------------
"diMuonHistos.etaBin = cms.int32(70) #dimuonhistograms mass, bin   
diMuonHistos.etaBBin = cms.int32(70)    
diMuonHistos.etaEBin = cms.int32(70)    
diMuonHistos.etaBinLM = cms.int32(12)   
diMuonHistos.etaBBinLM = cms.int32(12)    
diMuonHistos.etaEBinLM = cms.int32(12)    
diMuonHistos.LowMassMin = cms.double(2.0)   
diMuonHistos.LowMassMax = cms.double(14.0)    
diMuonHistos.HighMassMin = cms.double(55.0)   
diMuonHistos.HighMassMax = cms.double(125.0)
"
-------------------------------------------------------------------------
"Recom
PRs: 16288, 16289"
-------------------------------------------------------------------------
=========================================================================
