"# Also ensure unload works during walletpassphrase timeout
w2.encryptwallet('test')
w2.walletpassphrase('test', 1)
time.sleep(1.1)
"
-------------------------------------------------------------------------
"# Also ensure unload works during walletpassphrase timeout
w2.encryptwallet('test')
w2.walletpassphrase('test', 1)
time.sleep(1.1)"
-------------------------------------------------------------------------
"# Also ensure unload works during walletpassphrase timeout
wallets = node.listwallets()
w2.encryptwallet('test')
self.restart_node(0, ['-wallet={}'.format(wallet) for wallet in wallets])
w1 = node.get_wallet_rpc(wallet_names[0])
w2 = node.get_wallet_rpc(wallet_names[1])
w2.walletpassphrase('test', 1)
time.sleep(1.1)
"
-------------------------------------------------------------------------
"Recom
PRs: 14453, 14880"
-------------------------------------------------------------------------
=========================================================================
"# Check transactions for duplicate inputs
self.log.info(""Test duplicate input block."")
block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])
block2_orig.vtx[2].rehash()
block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()
block2_orig.rehash()
block2_orig.solve()
node.p2p.send_blocks_and_test([block2_orig], node, success=False, request_block=False, reject_reason='bad-txns-inputs-duplicate')
"
-------------------------------------------------------------------------
"# Check transactions for duplicate inputs
self.log.info(""Test duplicate input block."")
block2.vtx[2].vin.append(block2.vtx[2].vin[0])
block2.vtx[2].rehash()
block2.hashMerkleRoot = block2.calc_merkle_root()
block2.rehash()
block2.solve()
node.p2p.send_blocks_and_test([block2], node, False, False, 16, b'bad-txns-inputs-duplicate')"
-------------------------------------------------------------------------
"# Check transactions for duplicate inputs
self.log.info(""Test duplicate input block."")
block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])
block2_orig.vtx[2].rehash()
block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()
block2_orig.rehash()
block2_orig.solve()
node.p2p.send_blocks_and_test([block2_orig], node, success=False, request_block=False, reject_reason=b'bad-txns-inputs-duplicate')
"
-------------------------------------------------------------------------
"Recom
PRs: 14247, 14248"
-------------------------------------------------------------------------
=========================================================================
"from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, hash160, OP_TRUE
from test_framework.mininode import ToHex, FromHex, COIN
"
-------------------------------------------------------------------------
"from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG
from test_framework.mininode import ToHex, FromHex, COIN
from test_framework.util import hash160, OP_TRUE"
-------------------------------------------------------------------------
"from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE
from test_framework.mininode import ToHex, FromHex, COIN
"
-------------------------------------------------------------------------
"Recom
PRs: 9955, 10006"
-------------------------------------------------------------------------
=========================================================================
