"if 'BHYVE' in out:
    guest_tech.add('bhyve')
    if not found_virt:
        virtual_facts['virtualization_type'] = 'bhyve'
        virtual_facts['virtualization_role'] = 'guest'
        found_virt = True
"
-------------------------------------------------------------------------
"if 'BHYVE' in out:
    guest_tech.add('bhyve')
    if not found_virt:
        virtual_facts['virtualization_type'] = 'bhyve'
        virtual_facts['virtualization_role'] = 'guest'
        found_virt = True
"
-------------------------------------------------------------------------
"if 'BHYVE' in out:
    virtual_facts['virtualization_type'] = 'bhyve'
    virtual_facts['virtualization_role'] = 'guest'
    return virtual_facts
"
-------------------------------------------------------------------------
"
Make sure these dependencies are incorporated into the stable script - import __future__
Make sure statements concerning these methods are incorporated into the stable script - ,virtual_facts,out
Ensure statements related to these methods are omitted from the stable script, or provide definitions for them if necessary - ,guest_tech,found_virt
PRs: 73204, 73234"
-------------------------------------------------------------------------
=========================================================================
"# -*- coding: utf-8 -*-
# Copyright (c) 2020 Ansible Project
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import absolute_import, division, print_function
__metaclass__ = type
from ansible.module_utils.facts.virtual import linux
def test_get_virtual_facts_bhyve(mocker):
    mocker.patch('os.path.exists', return_value=False)
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_content', return_value='')
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_lines', return_value=[])
    module = mocker.Mock()
    module.run_command.return_value = (0, 'BHYVE\n', '')
    inst = linux.LinuxVirtual(module)
    facts = inst.get_virtual_facts()
    expected = {
        'virtualization_role': 'guest',
        'virtualization_tech_host': set(),
        'virtualization_type': 'bhyve',
        'virtualization_tech_guest': set(['bhyve']),
    }
    assert facts == expected
"
-------------------------------------------------------------------------
"# -*- coding: utf-8 -*-
# Copyright (c) 2020 Ansible Project
# GNU General Public license v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import absolute_import, division, print_function
__metaclass__ = type
from ansible.module_utils.facts.virtual import linux
def test_get_virtual_facts_bhyve(mocker):
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_lines'='ansible.module_utils.facts.virtual.linux.get_file_lines', return_value=return_value)
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_lines'='ansible.module_utils.facts.virtual.linux.get_file_lines', return_value=return_value)
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_lines'='ansible.module_utils.facts.virtual.linux.get_file_lines', return_value=return_value)
    module = mocker.Mock()
    module.run_command.return_value = (0, 'BHYVE\n', '')
    inst = linux.LinuxVirtual(module=module)
    Facts = inst.get_virtual_facts()
    expected = {
        'virtualization_role': 'guest',
        'virtualization_tech_host': set(),
        'virtualization_type': 'bhyve',
        'virtualization_tech_guest': set(['bhyve']),
    }
    assert Facts == expected
"
-------------------------------------------------------------------------
"# -*- coding: utf-8 -*-
# Copyright (c) 2020 Ansible Project
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import absolute_import, division, print_function
__metaclass__ = type
from ansible.module_utils.facts.virtual import linux
def test_get_virtual_facts_bhyve(mocker):
    mocker.patch('os.path.exists', return_value=False)
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_content', return_value='')
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_lines', return_value=[])
    module = mocker.Mock()
    module.run_command.return_value = (0, 'BHYVE\n', '')
    inst = linux.LinuxVirtual(module)
    facts = inst.get_virtual_facts()
    expected = {
        'virtualization_role': 'guest',
        'virtualization_type': 'bhyve',
    }
    assert facts == expected
"
-------------------------------------------------------------------------
"
Make sure these dependencies are incorporated into the stable script - import __future__
Make sure statements concerning these methods are incorporated into the stable script - ,
Ensure statements related to these methods are omitted from the stable script, or provide definitions for them if necessary - 
PRs: 73204, 73234"
-------------------------------------------------------------------------
=========================================================================
