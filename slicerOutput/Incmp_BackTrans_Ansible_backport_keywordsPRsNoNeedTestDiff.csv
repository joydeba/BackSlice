"# -*- coding: utf-8 -*-
#
# documentation build configuration file, created by
# sphinx-quickstart on Sat Sep 27 13:23:22 2008-2009.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# The contents of this file are pickled, so don't put values in the namespace
# that aren't pickleable (module imports are okay, they're removed
# automatically).
#
# All configuration values have a default value; values that are commented out
# serve to show the default value.
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type
import sys
import os
# pip install sphinx_rtd_theme
# import sphinx_rtd_theme
# html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
# If your extensions are in another directory, add it here. If the directory
# is relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
# sys.path.append(os.path.abspath('some/directory'))
#
sys.path.insert(0, os.path.join('ansible', 'lib'))
sys.path.append(os.path.abspath(os.path.join('..', '_extensions')))
# We want sphinx to document the ansible modules contained in this repository,
# not those that may happen to be installed in the version
# of Python used to run sphinx.  When sphinx loads in order to document,
# the repository version needs to be the one that is loaded:
sys.path.insert(0, os.path.abspath(os.path.join('..', '..', '..', 'lib')))
VERSION = 'devel'
AUTHOR = 'Ansible, Inc'
# General configuration
# ---------------------
# Add any Sphinx extension module names here, as strings.
# They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
# TEST: 'sphinxcontrib.fulltoc'
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.intersphinx', 'pygments_lexer', 'notfound.extension']
# Later on, add 'sphinx.ext.viewcode' to the list if you want to have
# colorized code generated too for references.
# Add any paths that contain templates here, relative to this directory.
templates_path = ['.templates']
# The suffix of source filenames.
source_suffix = '.rst'
# The master toctree document.
master_doc = 'index'
# General substitutions.
project = 'Ansible'
copyright = ""2021 Red Hat, Inc.""
# The default replacements for |version| and |release|, also used in various
# other places throughout the built documents.
#
# The short X.Y version.
version = VERSION
# The full version, including alpha/beta/rc tags.
release = VERSION
# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
today_fmt = '%B %d, %Y'
# List of documents that shouldn't be included in the build.
# unused_docs = []
# List of directories, relative to source directories, that shouldn't be
# searched for source files.
# exclude_dirs = []
# A list of glob-style patterns that should be excluded when looking
# for source files.
exclude_patterns = [
    '2.10_index.rst',
    'ansible_index.rst',
    'core_index.rst',
    'porting_guides/core_porting_guides.rst',
    'porting_guides/porting_guide_base_2.10.rst',
    'porting_guides/porting_guide_core_2.11.rst',
    'roadmap/index.rst',
    'roadmap/ansible_base_roadmap_index.rst',
    'roadmap/ROADMAP_2_10.rst',
    'roadmap/ROADMAP_2_11.rst'
]
# The reST default role (used for this markup: `text`) to use for all
# documents.
# default_role = None
# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True
# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True
# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False
# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'
highlight_language = 'YAMLJinja'
# Substitutions, variables, entities, & shortcuts for text which do not need to link to anything.
# For titles which should be a link, use the intersphinx anchors set at the index, chapter, and section levels, such as  qi_start_:
# |br| is useful for formatting fields inside of tables
# |_| is a nonbreaking space; similarly useful inside of tables
rst_epilog = """"""
.. |br| raw:: html
   <br>
.. |_| unicode:: 0xA0
    :trim:
""""""
# Options for HTML output
# -----------------------
html_theme_path = ['../_themes']
html_theme = 'sphinx_rtd_theme'
html_short_title = 'Ansible Documentation'
html_show_sphinx = False
html_theme_options = {
    'canonical_url': ""https://docs.ansible.com/ansible/latest/"",
    'vcs_pageview_mode': 'edit'
}
html_context = {
    'display_github': 'True',
    'github_user': 'ansible',
    'github_repo': 'ansible',
    'github_version': 'devel/docs/docsite/rst/',
    'github_module_version': 'devel/lib/ansible/modules/',
    'github_root_dir': 'devel/lib/ansible',
    'github_cli_version': 'devel/lib/ansible/cli/',
    'current_version': version,
    'latest_version': '2.10',
    # list specifically out of order to make latest work
    'available_versions': ('latest', '2.9', '2.9_ja', '2.8', 'devel'),
    'css_files': ('_static/ansible.css',  # overrides to the standard theme
                  ),
}
# The style sheet to use for HTML and HTML Help pages. A file of that name
# must exist either in Sphinx' static/ path, or in one of the custom paths
# given in html_static_path.
# html_style = 'solar.css'
# The name for this set of Sphinx documents.  If None, it defaults to
# ""<project> v<release> documentation"".
html_title = 'Ansible Documentation'
# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = None
# The name of an image file (within the static path) to place at the top of
# the sidebar.
# html_logo =
# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
# html_favicon = 'favicon.ico'
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named ""default.css"" will overwrite the builtin ""default.css"".
html_static_path = ['../_static']
# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y'
# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True
# Custom sidebar templates, maps document names to template names.
# html_sidebars = {}
# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = {}
# If false, no module index is generated.
# html_use_modindex = True
# If false, no index is generated.
# html_use_index = True
# If true, the index is split into individual pages for each letter.
# html_split_index = False
# If true, the reST sources are included in the HTML build as _sources/<name>.
html_copy_source = False
# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = 'https://docs.ansible.com/ansible/latest'
# If nonempty, this is the file name suffix for HTML files (e.g. "".xhtml"").
# html_file_suffix = ''
# Output file base name for HTML help builder.
htmlhelp_basename = 'Poseidodoc'
# Configuration for sphinx-notfound-pages
# with no 'notfound_template' and no 'notfound_context' set,
# the extension builds 404.rst into a location-agnostic 404 page
#
# default is `en` - using this for the sub-site:
notfound_default_language = ""ansible""
# default is `latest`:
# setting explicitly - docsite serves up /ansible/latest/404.html
# so keep this set to `latest` even on the `devel` branch
# then no maintenance is needed when we branch a new stable_x.x
notfound_default_version = ""latest""
# makes default setting explicit:
notfound_no_urls_prefix = False
# Options for LaTeX output
# ------------------------
# The paper size ('letter' or 'a4').
# latex_paper_size = 'letter'
# The font size ('10pt', '11pt' or '12pt').
# latex_font_size = '10pt'
# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, document class
# [howto/manual]).
latex_documents = [
    ('index', 'ansible.tex', 'Ansible 2.2 Documentation', AUTHOR, 'manual'),
]
# The name of an image file (relative to this directory) to place at the top of
# the title page.
# latex_logo = None
# For ""manual"" documents, if this is true, then toplevel headings are parts,
# not chapters.
# latex_use_parts = False
# Additional stuff for the LaTeX preamble.
# latex_preamble = ''
# Documents to append as an appendix to all manuals.
# latex_appendices = []
# If false, no module index is generated.
# latex_use_modindex = True
autoclass_content = 'both'
# Note:  Our strategy for intersphinx mappings is to have the upstream build location as the
# canonical source and then cached copies of the mapping stored locally in case someone is building
# when disconnected from the internet.  We then have a script to update the cached copies.
#
# Because of that, each entry in this mapping should have this format:
#   name: ('http://UPSTREAM_URL', (None, 'path/to/local/cache.inv'))
#
# The update script depends on this format so deviating from this (for instance, adding a third
# location for the mappning to live) will confuse it.
intersphinx_mapping = {'python': ('https://docs.python.org/2/', (None, '../python2.inv')),
                       'python3': ('https://docs.python.org/3/', (None, '../python3.inv')),
                       'jinja2': ('http://jinja.palletsprojects.com/', (None, '../jinja2.inv')),
                       'ansible_2_10': ('https://docs.ansible.com/ansible/2.10/', (None, '../ansible_2_10.inv')),
                       'ansible_2_9': ('https://docs.ansible.com/ansible/2.9/', (None, '../ansible_2_9.inv')),
                       'ansible_2_8': ('https://docs.ansible.com/ansible/2.8/', (None, '../ansible_2_8.inv')),
                       'ansible_2_7': ('https://docs.ansible.com/ansible/2.7/', (None, '../ansible_2_7.inv')),
                       'ansible_2_6': ('https://docs.ansible.com/ansible/2.6/', (None, '../ansible_2_6.inv')),
                       'ansible_2_5': ('https://docs.ansible.com/ansible/2.5/', (None, '../ansible_2_5.inv')),
                       }
# linckchecker settings
linkcheck_ignore = [
    r'http://irc\.freenode\.net',
]
linkcheck_workers = 25
# linkcheck_anchors = False
"
-------------------------------------------------------------------------
"# -*- coding: utf-8 -*-
#
# documentation build configuration file, created by
# sphinx-quickstart on Sat Sep 27 13:23:22 2008-2009.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# The contents of this file are pickled, so don't put values in the namespace
# that aren't pickleable (module imports are okay, they're removed
# automatically).
#
# All configuration values have a default value; values that are commented out
# serve to show the default value.
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type
import sys
import os

sys.path.insert(0, os.path.join('ansible-core', 'lib'))
sys.path.append(os.path.abspath(os.path.join('..', '_extensions')))
sys.path.insert(0, os.path.abspath(os.path.join('..', '..', '..', 'lib')))
VERSION = 'stable-2.10'
AUTHOR = 'Ansible, Inc'
# General configuration
# ---------------------
# Add any Sphinx extension module names here, as strings.
# They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
# TEST: 'sphinxcontrib.fulltoc'
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.intersphinx', 'pygments_lexer', 'notfound.extension']
# Later on, add 'sphinx.ext.viewcode' to the list if you want to have
# colorized code generated too for references.
# Add any paths that contain templates here, relative to this directory.
templates_path = ['.templates']
# The suffix of source filenames.
source_suffix = '.rst'
# The master toctree document.
master_doc = 'index'
# General substitutions.
project = 'Ansible'
copyright = ""2021 Red Hat, Inc.""
# The default replacements for |version| and |release|, also used in various
# other places throughout the built documents.
#
# The short X.Y version.
version = VERSION
# The full version, including alpha/beta/rc tags.
release = VERSION
# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
today_fmt = '%B %d, %Y'
# List of documents that shouldn't be included in the build.
# unused_docs = []
# List of directories, relative to source directories, that shouldn't be
# searched for source files.
# exclude_dirs = []
# A list of glob-style patterns that should be excluded when looking
# for source files.
exclude_patterns = [
    '2.10_index.rst',
    'ansible_index.rst',
    'core_index.rst',
    'porting_guides/core_porting_guides.rst',
    'porting_guides/porting_guide_base_2.10.rst',
    'porting_guides/porting_guide_core_2.11.rst',
    'roadmap/index.rst',
    'roadmap/ansible_base_roadmap_index.rst',
    'roadmap/ROADMAP_2_10.rst',
    'roadmap/ROADMAP_2_11.rst'
]
# The reST default role (used for this markup: `text`) to use for all
# documents.
# default_role = None
# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True
# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True
# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False
# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'
highlight_language = 'YAMLJinja'
# Substitutions, variables, entities, & shortcuts for text which do not need to link to anything.
# For titles which should be a link, use the intersphinx anchors set at the index, chapter, and section levels, such as  qi_start_:
# |br| is useful for formatting fields inside of tables
# |_| is a nonbreaking space; similarly useful inside of tables
rst_epilog = """"""
.. |br| raw:: html
   <br>
.. |_| unicode:: 0xA0
    :trim:
""""""
# Options for HTML output
# -----------------------
html_theme_path = ['../_themes']
html_theme = 'sphinx_rtd_theme'
html_short_title = 'Ansible Documentation'
html_show_sphinx = False
html_theme_options = {
    'canonical_url': ""https://docs.ansible.com/ansible/latest/"",
    'vcs_pageview_mode': 'edit'
}
html_context = {
    'display_github': 'True',
    'github_user': 'ansible',
    'github_repo': 'ansible',
    'github_version': 'devel/docs/docsite/rst/',
    'github_module_version': 'devel/lib/ansible/modules/',
    'github_root_dir': 'devel/lib/ansible',
    'github_cli_version': 'devel/lib/ansible/cli/',
    'current_version': version,
    'latest_version': '2.10',
    # list specifically out of order to make latest work
    'available_versions': ('latest', '2.9', '2.9_ja', '2.8', 'devel'),
    'css_files': ('_static/ansible.css',  # overrides to the standard theme
                  ),
}
# The style sheet to use for HTML and HTML Help pages. A file of that name
# must exist either in Sphinx' static/ path, or in one of the custom paths
# given in html_static_path.
# html_style = 'solar.css'
# The name for this set of Sphinx documents.  If None, it defaults to
# ""<project> v<release> documentation"".
html_title = 'Ansible Documentation'
# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = None
# The name of an image file (within the static path) to place at the top of
# the sidebar.
# html_logo =
# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
# html_favicon = 'favicon.ico'
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named ""default.css"" will overwrite the builtin ""default.css"".
html_static_path = ['../_static']
# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y'
# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True
# Custom sidebar templates, maps document names to template names.
# html_sidebars = {}
# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = {}
# If false, no module index is generated.
# html_use_modindex = True
# If false, no index is generated.
# html_use_index = True
# If true, the index is split into individual pages for each letter.
# html_split_index = False
# If true, the reST sources are included in the HTML build as _sources/<name>.
html_copy_source = False
# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = 'https://docs.ansible.com/ansible/latest'
# If nonempty, this is the file name suffix for HTML files (e.g. "".xhtml"").
# html_file_suffix = ''
# Output file base name for HTML help builder.
htmlhelp_basename = 'Poseidodoc'
# Configuration for sphinx-notfound-pages
# with no 'notfound_template' and no 'notfound_context' set,
# the extension builds 404.rst into a location-agnostic 404 page
#
# default is `en` - using this for the sub-site:
notfound_default_language = ""ansible""
# default is `latest`:
# setting explicitly - docsite serves up /ansible/latest/404.html
# so keep this set to `latest` even on the `devel` branch
# then no maintenance is needed when we branch a new stable_x.x
notfound_default_version = ""latest""
# makes default setting explicit:
notfound_no_urls_prefix = False
# Options for LaTeX output
# ------------------------
# The paper size ('letter' or 'a4').
# latex_paper_size = 'letter'
# The font size ('10pt', '11pt' or '12pt').
# latex_font_size = '10pt'
# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, document class
# [howto/manual]).
latex_documents = [
    ('index', 'ansible.tex', 'Ansible 2.2 Documentation', AUTHOR, 'manual'),
]
# The name of an image file (relative to this directory) to place at the top of
# the title page.
# latex_logo = None
# For ""manual"" documents, if this is true, then toplevel headings are parts,
# not chapters.
# latex_use_parts = False
# Additional stuff for the LaTeX preamble.
# latex_preamble = ''
# Documents to append as an appendix to all manuals.
# latex_appendices = []
# If false, no module index is generated.
# latex_use_modindex = True
autoclass_content = 'both'
# Note:  Our strategy for intersphinx mappings is to have the upstream build location as the
# canonical source and then cached copies of the mapping stored locally in case someone is building
# when disconnected from the internet.  We then have a script to update the cached copies.
#
# Because of that, each entry in this mapping should have this format:
#   name: ('http://UPSTREAM_URL', (None, 'path/to/local/cache.inv'))
#
# The update script depends on this format so deviating from this (for instance, adding a third
# location for the mappning to live) will confuse it.
intersphinx_mapping = {'python': ('https://docs.python.org/2/', (None, '../python2.inv')),
                       'python3': ('https://docs.python.org/3/', (None, '../python3.inv')),
                       'jinja2': ('http://jinja.palletsprojects.com/', (None, '../jinja2.inv')),
                       'ansible_2_10': ('https://docs.ansible.com/ansible/2.10/', (None, '../ansible_2_10.inv')),
                       'ansible_2_9': ('https://docs.ansible.com/ansible/2.9/', (None, '../ansible_2_9.inv')),
                       'ansible_2_8': ('https://docs.ansible.com/ansible/2.8/', (None, '../ansible_2_8.inv')),
                       'ansible_2_7': ('https://docs.ansible.com/ansible/2.7/', (None, '../ansible_2_7.inv')),
                       'ansible_2_6': ('https://docs.ansible.com/ansible/2.6/', (None, '../ansible_2_6.inv')),
                       'ansible_2_5': ('https://docs.ansible.com/ansible/2.5/', (None, '../ansible_2_5.inv')),
                       }
# linckchecker settings
linkcheck_ignore = [
    r'http://irc\.freenode\.net',
]
linkcheck_workers = 25
# linkcheck_anchors = False"
-------------------------------------------------------------------------
"# -*- coding: utf-8 -*-
#
# documentation build configuration file, created by
# sphinx-quickstart on Sat Sep 27 13:23:22 2008-2009.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# The contents of this file are pickled, so don't put values in the namespace
# that aren't pickleable (module imports are okay, they're removed
# automatically).
#
# All configuration values have a default value; values that are commented out
# serve to show the default value.
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type
import sys
import os
# pip install sphinx_rtd_theme
# import sphinx_rtd_theme
# html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
# If your extensions are in another directory, add it here. If the directory
# is relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
# sys.path.append(os.path.abspath('some/directory'))
#
sys.path.insert(0, os.path.join('ansible', 'lib'))
sys.path.append(os.path.abspath(os.path.join('..', '_extensions')))
# We want sphinx to document the ansible modules contained in this repository,
# not those that may happen to be installed in the version
# of Python used to run sphinx.  When sphinx loads in order to document,
# the repository version needs to be the one that is loaded:
sys.path.insert(0, os.path.abspath(os.path.join('..', '..', '..', 'lib')))
VERSION = '3'
AUTHOR = 'Ansible, Inc'
# General configuration
# ---------------------
# Add any Sphinx extension module names here, as strings.
# They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
# TEST: 'sphinxcontrib.fulltoc'
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.intersphinx', 'pygments_lexer', 'notfound.extension']
# Later on, add 'sphinx.ext.viewcode' to the list if you want to have
# colorized code generated too for references.
# Add any paths that contain templates here, relative to this directory.
templates_path = ['.templates']
# The suffix of source filenames.
source_suffix = '.rst'
# The master toctree document.
master_doc = 'index'
# General substitutions.
project = 'Ansible'
copyright = ""2021 Red Hat, Inc.""
# The default replacements for |version| and |release|, also used in various
# other places throughout the built documents.
#
# The short X.Y version.
version = VERSION
# The full version, including alpha/beta/rc tags.
release = VERSION
# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
today_fmt = '%B %d, %Y'
# List of documents that shouldn't be included in the build.
# unused_docs = []
# List of directories, relative to source directories, that shouldn't be
# searched for source files.
# exclude_dirs = []
# A list of glob-style patterns that should be excluded when looking
# for source files.
exclude_patterns = [
    '2.10_index.rst',
    'ansible_index.rst',
    'core_index.rst',
    'porting_guides/core_porting_guides.rst',
    'porting_guides/porting_guide_base_2.10.rst',
    'porting_guides/porting_guide_core_2.11.rst',
    'roadmap/index.rst',
    'roadmap/ansible_base_roadmap_index.rst',
    'roadmap/ROADMAP_2_10.rst',
    'roadmap/ROADMAP_2_11.rst'
]
# The reST default role (used for this markup: `text`) to use for all
# documents.
# default_role = None
# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True
# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True
# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False
# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'
highlight_language = 'YAMLJinja'
# Substitutions, variables, entities, & shortcuts for text which do not need to link to anything.
# For titles which should be a link, use the intersphinx anchors set at the index, chapter, and section levels, such as  qi_start_:
# |br| is useful for formatting fields inside of tables
# |_| is a nonbreaking space; similarly useful inside of tables
rst_epilog = """"""
.. |br| raw:: html
   <br>
.. |_| unicode:: 0xA0
    :trim:
""""""
# Options for HTML output
# -----------------------
html_theme_path = ['../_themes']
html_theme = 'sphinx_rtd_theme'
html_short_title = 'Ansible Documentation'
html_show_sphinx = False
html_theme_options = {
    'canonical_url': ""https://docs.ansible.com/ansible/latest/"",
    'vcs_pageview_mode': 'edit'
}
html_context = {
    'display_github': 'True',
    'github_user': 'ansible',
    'github_repo': 'ansible',
    'github_version': 'devel/docs/docsite/rst/',
    'github_module_version': 'devel/lib/ansible/modules/',
    'github_root_dir': 'devel/lib/ansible',
    'github_cli_version': 'devel/lib/ansible/cli/',
    'current_version': version,
    'latest_version': '3',
    # list specifically out of order to make latest work
    'available_versions': ('latest', '2.10', '2.9', '2.9_ja', '2.8', 'devel'),
    'css_files': ('_static/ansible.css',  # overrides to the standard theme
                  ),
}
# The style sheet to use for HTML and HTML Help pages. A file of that name
# must exist either in Sphinx' static/ path, or in one of the custom paths
# given in html_static_path.
# html_style = 'solar.css'
# The name for this set of Sphinx documents.  If None, it defaults to
# ""<project> v<release> documentation"".
html_title = 'Ansible Documentation'
# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = None
# The name of an image file (within the static path) to place at the top of
# the sidebar.
# html_logo =
# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
# html_favicon = 'favicon.ico'
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named ""default.css"" will overwrite the builtin ""default.css"".
html_static_path = ['../_static']
# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y'
# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True
# Custom sidebar templates, maps document names to template names.
# html_sidebars = {}
# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = {}
# If false, no module index is generated.
# html_use_modindex = True
# If false, no index is generated.
# html_use_index = True
# If true, the index is split into individual pages for each letter.
# html_split_index = False
# If true, the reST sources are included in the HTML build as _sources/<name>.
html_copy_source = False
# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = 'https://docs.ansible.com/ansible/latest'
# If nonempty, this is the file name suffix for HTML files (e.g. "".xhtml"").
# html_file_suffix = ''
# Output file base name for HTML help builder.
htmlhelp_basename = 'Poseidodoc'
# Configuration for sphinx-notfound-pages
# with no 'notfound_template' and no 'notfound_context' set,
# the extension builds 404.rst into a location-agnostic 404 page
#
# default is `en` - using this for the sub-site:
notfound_default_language = ""ansible""
# default is `latest`:
# setting explicitly - docsite serves up /ansible/latest/404.html
# so keep this set to `latest` even on the `devel` branch
# then no maintenance is needed when we branch a new stable_x.x
notfound_default_version = ""latest""
# makes default setting explicit:
notfound_no_urls_prefix = False
# Options for LaTeX output
# ------------------------
# The paper size ('letter' or 'a4').
# latex_paper_size = 'letter'
# The font size ('10pt', '11pt' or '12pt').
# latex_font_size = '10pt'
# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, document class
# [howto/manual]).
latex_documents = [
    ('index', 'ansible.tex', 'Ansible 2.2 Documentation', AUTHOR, 'manual'),
]
# The name of an image file (relative to this directory) to place at the top of
# the title page.
# latex_logo = None
# For ""manual"" documents, if this is true, then toplevel headings are parts,
# not chapters.
# latex_use_parts = False
# Additional stuff for the LaTeX preamble.
# latex_preamble = ''
# Documents to append as an appendix to all manuals.
# latex_appendices = []
# If false, no module index is generated.
# latex_use_modindex = True
autoclass_content = 'both'
# Note:  Our strategy for intersphinx mappings is to have the upstream build location as the
# canonical source and then cached copies of the mapping stored locally in case someone is building
# when disconnected from the internet.  We then have a script to update the cached copies.
#
# Because of that, each entry in this mapping should have this format:
#   name: ('http://UPSTREAM_URL', (None, 'path/to/local/cache.inv'))
#
# The update script depends on this format so deviating from this (for instance, adding a third
# location for the mappning to live) will confuse it.
intersphinx_mapping = {'python': ('https://docs.python.org/2/', (None, '../python2.inv')),
                       'python3': ('https://docs.python.org/3/', (None, '../python3.inv')),
                       'jinja2': ('http://jinja.palletsprojects.com/', (None, '../jinja2.inv')),
                       'ansible_2_10': ('https://docs.ansible.com/ansible/2.10/', (None, '../ansible_2_10.inv')),
                       'ansible_2_9': ('https://docs.ansible.com/ansible/2.9/', (None, '../ansible_2_9.inv')),
                       'ansible_2_8': ('https://docs.ansible.com/ansible/2.8/', (None, '../ansible_2_8.inv')),
                       'ansible_2_7': ('https://docs.ansible.com/ansible/2.7/', (None, '../ansible_2_7.inv')),
                       'ansible_2_6': ('https://docs.ansible.com/ansible/2.6/', (None, '../ansible_2_6.inv')),
                       'ansible_2_5': ('https://docs.ansible.com/ansible/2.5/', (None, '../ansible_2_5.inv')),
                       }
# linckchecker settings
linkcheck_ignore = [
    r'http://irc\.freenode\.net',
]
linkcheck_workers = 25
# linkcheck_anchors = False
"
-------------------------------------------------------------------------
"Recom
PRs: 73616, 73637"
-------------------------------------------------------------------------
=========================================================================
"'EulerOS', 'openEuler', 'AlmaLinux'],
"
-------------------------------------------------------------------------
"['EulerOS', 'openEuler', 'AlmaLinux']"
-------------------------------------------------------------------------
"'OEL', 'Amazon', 'Virtuozzo', 'XenServer', 'Alibaba',
'AlmaLinux'],
"
-------------------------------------------------------------------------
"Recom
PRs: 73541, 73544"
-------------------------------------------------------------------------
=========================================================================
"if 'BHYVE' in out:
    guest_tech.add('bhyve')
    if not found_virt:
        virtual_facts['virtualization_type'] = 'bhyve'
        virtual_facts['virtualization_role'] = 'guest'
        found_virt = True
"
-------------------------------------------------------------------------
"if 'bhyve' in out:
    guest_tech.add('bhyve')
    if not found_virt:
        virtual_facts['virtualization_type'] = 'bhyve'
        virtual_facts['virtualization_role'] = 'guest'
        found_virt = True"
-------------------------------------------------------------------------
"if 'BHYVE' in out:
    virtual_facts['virtualization_type'] = 'bhyve'
    virtual_facts['virtualization_role'] = 'guest'
    return virtual_facts
"
-------------------------------------------------------------------------
"Recom
PRs: 73204, 73234"
-------------------------------------------------------------------------
=========================================================================
"# -*- coding: utf-8 -*-
# Copyright (c) 2020 Ansible Project
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import absolute_import, division, print_function
__metaclass__ = type
from ansible.module_utils.facts.virtual import linux
def test_get_virtual_facts_bhyve(mocker):
    mocker.patch('os.path.exists', return_value=False)
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_content', return_value='')
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_lines', return_value=[])
    module = mocker.Mock()
    module.run_command.return_value = (0, 'BHYVE\n', '')
    inst = linux.LinuxVirtual(module)
    facts = inst.get_virtual_facts()
    expected = {
        'virtualization_role': 'guest',
        'virtualization_tech_host': set(),
        'virtualization_type': 'bhyve',
        'virtualization_tech_guest': set(['bhyve']),
    }
    assert facts == expected
"
-------------------------------------------------------------------------
"mocker.patch('os.path.exists', return_value=False)
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_content', return_value='')
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_lines', return_value=[])

    module = mocker.Mock()
    module.run_command.return_value = (0, 'BHYVE\n', '')
    inst = LinuxVirtual(module)

    facts = inst.get_virtual_facts()
    expected = {
        'virtualization_role': 'guest',
        'virtualization_type': 'bhyve',
    }

    assert facts == expected"
-------------------------------------------------------------------------
"# -*- coding: utf-8 -*-
# Copyright (c) 2020 Ansible Project
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import absolute_import, division, print_function
__metaclass__ = type
from ansible.module_utils.facts.virtual import linux
def test_get_virtual_facts_bhyve(mocker):
    mocker.patch('os.path.exists', return_value=False)
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_content', return_value='')
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_lines', return_value=[])
    module = mocker.Mock()
    module.run_command.return_value = (0, 'BHYVE\n', '')
    inst = linux.LinuxVirtual(module)
    facts = inst.get_virtual_facts()
    expected = {
        'virtualization_role': 'guest',
        'virtualization_type': 'bhyve',
    }
    assert facts == expected
"
-------------------------------------------------------------------------
"Recom
PRs: 73204, 73234"
-------------------------------------------------------------------------
=========================================================================
"if 'BHYVE' in out:
    guest_tech.add('bhyve')
    if not found_virt:
        virtual_facts['virtualization_type'] = 'bhyve'
        virtual_facts['virtualization_role'] = 'guest'
        found_virt = True
"
-------------------------------------------------------------------------
"if 'bhyve' in out:
    guest_tech.add('bhyve')
    if not found_virt:
        virtual['virtualization_type'] = 'bhyve'
        virtual['virtualization_role'] = 'guest'
        found_virt = True"
-------------------------------------------------------------------------
"if 'BHYVE' in out:
    virtual_facts['virtualization_type'] = 'bhyve'
    virtual_facts['virtualization_role'] = 'guest'
    return virtual_facts
"
-------------------------------------------------------------------------
"Recom
PRs: 73204, 73233"
-------------------------------------------------------------------------
=========================================================================
"# -*- coding: utf-8 -*-
# Copyright (c) 2020 Ansible Project
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import absolute_import, division, print_function
__metaclass__ = type
from ansible.module_utils.facts.virtual import linux
def test_get_virtual_facts_bhyve(mocker):
    mocker.patch('os.path.exists', return_value=False)
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_content', return_value='')
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_lines', return_value=[])
    module = mocker.Mock()
    module.run_command.return_value = (0, 'BHYVE\n', '')
    inst = linux.LinuxVirtual(module)
    facts = inst.get_virtual_facts()
    expected = {
        'virtualization_role': 'guest',
        'virtualization_tech_host': set(),
        'virtualization_type': 'bhyve',
        'virtualization_tech_guest': set(['bhyve']),
    }
    assert facts == expected
"
-------------------------------------------------------------------------
"from ansible.module_utils.facts.virtual import linux

def test_get_virtual_facts_bhyve(mocker):
    mocker.patch('os.path.exists', return_value=False)
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_content', return_value='')
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_lines', return_value=[])

    module = mocker.Mock()
    module.run_command.return_value = (0, 'BHYVE\n', '')

    inst = linux.LinuxVirtual(module)
    facts = inst.get_virtual_facts()

    expected = {
        'virtualization_role': 'guest',
        'virtualization_type': 'bhyve',
    }

    assert facts == expected"
-------------------------------------------------------------------------
"# -*- coding: utf-8 -*-
# Copyright (c) 2020 Ansible Project
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import absolute_import, division, print_function
__metaclass__ = type
from ansible.module_utils.facts.virtual import linux
def test_get_virtual_facts_bhyve(mocker):
    mocker.patch('os.path.exists', return_value=False)
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_content', return_value='')
    mocker.patch('ansible.module_utils.facts.virtual.linux.get_file_lines', return_value=[])
    module = mocker.Mock()
    module.run_command.return_value = (0, 'BHYVE\n', '')
    inst = linux.LinuxVirtual(module)
    facts = inst.get_virtual_facts()
    expected = {
        'virtualization_role': 'guest',
        'virtualization_type': 'bhyve',
    }
    assert facts == expected
"
-------------------------------------------------------------------------
"Recom
PRs: 73204, 73233"
-------------------------------------------------------------------------
=========================================================================
"import sys
"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native
import os
from ansible.vars.reserved import warn_if_reserved
from ansible.playbook.block import Block
import tempfile
import traceback
from ansible.vars.hostvars import HostVars
import ansible.template
from ansible.executor.task_result import TaskResult
import ansible
import ansible.utils.multiprocessing
from ansible.utils.helpers import pct_to_int
from ansible.plugins.loader import module_loader
from ansible.plugins.callback import CallbackBase
from ansible.executor.stats import AggregateStats
from ansible.executor.play_iterator import PlayIterator
from ansible.module_utils.six import string_types
from __future__ import division
from ansible.utils.collection_loader import AnsibleCollectionRef
from ansible.utils.display import Display
from ansible.errors import AnsibleError
from ansible.playbook.play_context import PlayContext"
-------------------------------------------------------------------------
"import sys
import time
"
-------------------------------------------------------------------------
"Recom
PRs: 72604, 72609"
-------------------------------------------------------------------------
=========================================================================
"(rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
return (rc, out, err)
(rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-M', self.name, add_group])
"
-------------------------------------------------------------------------
"(rc, out, err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), user.name])
return (rc, out, err)
(rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-M', user.name, add_group])"
-------------------------------------------------------------------------
"(rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72340"
-------------------------------------------------------------------------
=========================================================================
"def post_process_whens(result, task, templar):
    cond = None
    if task.changed_when:
        cond = Conditional(loader=templar._loader)
        cond.when = task.changed_when
        result['changed'] = cond.evaluate_conditional(templar, templar.available_variables)
    if task.failed_when:
        if cond is None:
            cond = Conditional(loader=templar._loader)
        cond.when = task.failed_when
        failed_when_result = cond.evaluate_conditional(templar, templar.available_variables)
        result['failed_when_result'] = result['failed'] = failed_when_result
"
-------------------------------------------------------------------------
"def post_process_whens(result, task, templar):
    cond = None
    if task.check_mode:
        cond = Conditional(loader=templar._loader)
        cond.when = task.check_mode
        result['checked'] = cond.evaluate_conditional(templar, templar.shared_vars)
    if task.rescue:
        if cond is None:
            cond = Conditional(loader=templar._loader)
        cond.when = task.rescue
        rescue_result = cond.evaluate_conditional(templar, templar.shared_vars)
        result['rescue_result'] = result['rescued'] = rescue_result"
-------------------------------------------------------------------------
"_sentinel = StrategySentinel()
"
-------------------------------------------------------------------------
"Recom
PRs: 70919, 72118"
-------------------------------------------------------------------------
=========================================================================
"# Validate GPG. This is NOT done in dnf.Base (it's done in the
# upstream CLI subclass of dnf.Base)
if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True
        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg)
"
-------------------------------------------------------------------------
"if not self.disable_gpg_check:
    for package in self.dnf_base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.dnf_base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.dnf_base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True
        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg)"
-------------------------------------------------------------------------
"# Validate GPG. This is NOT done in dnf.Base (it's done in the
# upstream CLI subclass of dnf.Base)
if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True
        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg=msg)
"
-------------------------------------------------------------------------
"Recom
PRs: 71537, 71541"
-------------------------------------------------------------------------
=========================================================================
"# Validate GPG. This is NOT done in dnf.Base (it's done in the
# upstream CLI subclass of dnf.Base)
if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True
        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg)
"
-------------------------------------------------------------------------
"if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == dnf.const.GPG_SIG_OK:
            continue
        elif gpgres == dnf.const.GPG_SIG_ERR_MISSING_KEY or gpgres == dnf.const.GPG_SIG_ERR_NO_PUBKEY:
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:
            fail = True
        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg)"
-------------------------------------------------------------------------
"# Validate GPG. This is NOT done in dnf.Base (it's done in the
# upstream CLI subclass of dnf.Base)
if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True
        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg=msg)
"
-------------------------------------------------------------------------
"Recom
PRs: 71537, 71540"
-------------------------------------------------------------------------
=========================================================================
"# Remove paths so we do not warn about creating with default permissions
# since we are calling this method on the path and setting the specified mode.
try:
    self._created_files.remove(path)
except KeyError:
    pass
"
-------------------------------------------------------------------------
"try:
    self._existing_files.remove(file_path)
except KeyError:
    pass"
-------------------------------------------------------------------------
"if mode is None:
    return changed
"
-------------------------------------------------------------------------
"Recom
PRs: 71260, 71514"
-------------------------------------------------------------------------
=========================================================================
"_DEFAULT_PERM = 0o0600       # default file permission bits
"
-------------------------------------------------------------------------
_DEFAULT_PERM = 0o0600  # default file permission for the module_utils library
-------------------------------------------------------------------------
"_DEFAULT_PERM = 0o0666       # default file permission bits
"
-------------------------------------------------------------------------
"Recom
PRs: 71260, 71514"
-------------------------------------------------------------------------
=========================================================================
"stat1.st_mode = 0o0600
"
-------------------------------------------------------------------------
mocks['stat1'].st_mode = 0o0600
-------------------------------------------------------------------------
"stat1.st_mode = 0o0644
"
-------------------------------------------------------------------------
"Recom
PRs: 71260, 71514"
-------------------------------------------------------------------------
=========================================================================
"assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/dest', basic.DEFAULT_PERM & ~0o022)]
"
-------------------------------------------------------------------------
"assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/dest', module_utils.DEFAULT_PERM & ~0o022)]"
-------------------------------------------------------------------------
"assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/dest', basic.DEFAULT_PERM & ~18)]
"
-------------------------------------------------------------------------
"Recom
PRs: 71260, 71514"
-------------------------------------------------------------------------
=========================================================================
"assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/src', basic.DEFAULT_PERM & ~0o022)]
"
-------------------------------------------------------------------------
"# Ensure that the correct permissions are set
    assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/src', module_utils.DEFAULT_PERM & ~0o022)]"
-------------------------------------------------------------------------
"assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/src', basic.DEFAULT_PERM & ~18)]
"
-------------------------------------------------------------------------
"Recom
PRs: 71260, 71514"
-------------------------------------------------------------------------
=========================================================================
"assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/src', basic.DEFAULT_PERM & ~0o022)]
"
-------------------------------------------------------------------------
"assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/src', module_utils.basic.DEFAULT_PERM & ~0o022)]"
-------------------------------------------------------------------------
"assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/src', basic.DEFAULT_PERM & ~18)]
"
-------------------------------------------------------------------------
"Recom
PRs: 71260, 71514"
-------------------------------------------------------------------------
=========================================================================
"# assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/src', basic.DEFAULT_PERM & ~0o022)]
"
-------------------------------------------------------------------------
"expected_chmod_call = mocker.call('/path/to/src', basic.DEFAULT_PERM & ~0o022)
    assert atomic_mocks['chmod'].call_args_list == [expected_chmod_call]"
-------------------------------------------------------------------------
"# assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/src', basic.DEFAULT_PERM & ~18)]
"
-------------------------------------------------------------------------
"Recom
PRs: 71260, 71514"
-------------------------------------------------------------------------
=========================================================================
"assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/dest', basic.DEFAULT_PERM & ~0o022)]
"
-------------------------------------------------------------------------
"assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/dest', module_utils.basic.DEFAULT_PERM & ~0o022)]"
-------------------------------------------------------------------------
"assert atomic_mocks['chmod'].call_args_list == [mocker.call(b'/path/to/dest', basic.DEFAULT_PERM & ~18)]
"
-------------------------------------------------------------------------
"Recom
PRs: 71260, 71514"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.blockinfile
- module: ansible.builtin.copy
- module: ansible.builtin.file
- module: ansible.builtin.replace
- module: ansible.builtin.template
- module: ansible.windows.win_lineinfile
"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_text, to_bytes
from ansible.errors import AnsibleFileNotFound
import os
import glob

modules = [
    LookupBase().get_basedir(),
    LookupBase().find_file_in_search_path(),
    found_paths.append(),
    ret.extend(),
    os.path,
    glob.glob()
]"
-------------------------------------------------------------------------
"- module: ansible.builtin.blockinfile
- module: ansible.builtin.copy
- module: ansible.builtin.file
- module: ansible.builtin.replace
- module: ansible.builtin.template
- module: community.windows.win_lineinfile
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.authorized_key
- module: ansible.builtin.group
- module: ansible.windows.win_user
"
-------------------------------------------------------------------------
"from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils._text import to_text
from ansible.errors import AnsibleError, AnsibleFileNotFound

def process_module(module):
    try:
        # Your code logic here
        # E.g., ansible.builtin.authorized_key, ansible.builtin.group, ansible.windows.win_user
        pass
    except Exception as e:
        module.fail_json(msg=str(e))

def run_module():
    module_args = dict(
        # Define module arguments here
    )

    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )

    process_module(module)

def main():
    run_module()

if __name__ == '__main__':
    main()"
-------------------------------------------------------------------------
"- module: ansible.posix.authorized_key
- module: ansible.builtin.group
- module: ansible.windows.win_user
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.wait_for
- module: ansible.windows.win_wait_for
- module: ansible.windows.win_wait_for_process
"
-------------------------------------------------------------------------
"from ansible.module_utils.basic import AnsibleModule
from ansible.errors import AnsibleError, AnsibleFileNotFound

def custom_wait_for(module):
    try:
        # Implement custom logic here
        pass
    except Exception as e:
        raise AnsibleError(str(e))

def run_module():
    module_args = dict(
        # Define module arguments here
    )

    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )

    result = custom_wait_for(module)

    module.exit_json(**result)

def main():
    run_module()

if __name__ == '__main__':
    main()"
-------------------------------------------------------------------------
"- module: ansible.builtin.wait_for
- module: ansible.windows.win_wait_for
- module: community.windows.win_wait_for_process
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- If you wish to update an existing repository definition use M(ansible.builtin.ini_file) instead.
"
-------------------------------------------------------------------------
# If you wish to update an existing repository definition use LookupModule(ansible.builtin.ini_file) instead.
-------------------------------------------------------------------------
"- If you wish to update an existing repository definition use M(community.general.ini_file) instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.common.collections import is_sequence, Mapping
def _fail_on_undefined(data):
    """"""Recursively find an undefined value in a nested data structure
    and properly raise the undefined exception.
    """"""
    if isinstance(data, Mapping):
        for value in data.values():
            _fail_on_undefined(value)
    elif is_sequence(data):
        for item in data:
            _fail_on_undefined(item)
    else:
        if isinstance(data, StrictUndefined):
            # To actually raise the undefined exception we need to
            # access the undefined object otherwise the exception would
            # be raised on the next access which might not be properly
            # handled.
            # See https://github.com/ansible/ansible/issues/52158
            # and StrictUndefined implementation in upstream Jinja2.
            str(data)
    return data
    https://github.com/pallets/jinja/blob/master/src/jinja2/nativetypes.py
    """"""
        out = _fail_on_undefined(head[0])
        out = u''.join([to_text(_fail_on_undefined(v)) for v in nodes])
"
-------------------------------------------------------------------------
"from ansible.module_utils.common.collections import is_sequence, Mapping

def _fail_on_undefined(data):
    """"""Recursively find an undefined value in a nested data structure
    and properly raise the undefined exception.
    """"""
    if isinstance(data, Mapping):
        for value in data.values():
            _fail_on_undefined(value)
    elif is_sequence(data):
        for item in data:
            _fail_on_undefined(item)
    else:
        if isinstance(data, StrictUndefined):
            # To actually raise the undefined exception we need to
            # access the undefined object otherwise the exception would
            # be raised on the next access which might not be properly
            # handled.
            # See https://github.com/ansible/ansible/issues/52158
            # and StrictUndefined implementation in upstream Jinja2.
            str(data)
    return data

def _resolve_nested_undefined(nodes):
    head = list(islice(nodes, 2))

    if not head:
        return None

    if len(head) == 1:
        out = head[0]

        if isinstance(out, AnsibleVaultEncryptedUnicode):
            return out.data
        
        if isinstance(out, StrictUndefined):
            str(out)

        if isinstance(out, NativeJinjaText):
            return out
    else:
        if isinstance(nodes, types.GeneratorType):
            nodes = chain(head, nodes)
        out = u''.join([to_text(_fail_on_undefined(v)) for v in nodes])

    try:
        out = literal_eval(out)
        if PY2:
            out = container_to_text(out)
        return out
    except (ValueError, SyntaxError, MemoryError):
        return out"
-------------------------------------------------------------------------
"from ansible.module_utils.common.collections import is_sequence, Mapping
"
-------------------------------------------------------------------------
"Recom
PRs: 68432, 71105"
-------------------------------------------------------------------------
=========================================================================
"# `distutils` must be imported after `setuptools` or it will cause explosions
# with `setuptools >=48.0.0, <49.1`.
# Refs:
# * https://github.com/ansible/ansible/issues/70456
# * https://github.com/pypa/setuptools/issues/2230
# * https://github.com/pypa/setuptools/commit/bd110264
from distutils.command.build_scripts import build_scripts as BuildScripts
from distutils.command.sdist import sdist as SDist
"
-------------------------------------------------------------------------
"# Required Dependencies: collections, setuptools.command.install_lib, json, __future__, os, re, sys, warnings, setuptools, setuptools.command.build_py, setuptools.command.install_scripts, ansible.release, os.path

# Import necessary libraries
from setuptools import setup
from setuptools import find_packages

# `distutils` must be imported after `setuptools` or it will cause explosions
# with `setuptools >=48.0.0, <49.1`.
# Refs:
# * https://github.com/ansible/ansible/issues/70456
# * https://github.com/pypa/setuptools/issues/2230
# * https://github.com/pypa/setuptools/commit/bd110264
from distutils.command.build_scripts import build_scripts as BuildScripts
from distutils.command.sdist import sdist as SDist

# Include the adapted code snippet into the target method
# Ensure to integrate with the existing code in the target method."
-------------------------------------------------------------------------
"# `distutils` must be imported after `setuptools` or it will cause explosions
# with `setuptools >=48.0.0, <49.1`.
# Refs:
# * https://github.com/ansible/ansible/issues/70456
# * https://github.com/pypa/setuptools/issues/2230
# * https://github.com/pypa/setuptools/commit/bd110264
from distutils.command.build_scripts import build_scripts as BuildScripts
from distutils.command.sdist import sdist as SDist
def find_package_info(*file_paths):
    try:
        with open(os.path.join(*file_paths), 'r') as f:
            info_file = f.read()
    except Exception:
        raise RuntimeError(""Unable to find package info."")
    # The version line must have the form
    # __version__ = 'ver'
    version_match = re.search(r""^__version__ = ['\""]([^'\""]*)['\""]"",
                              info_file, re.M)
    author_match = re.search(r""^__author__ = ['\""]([^'\""]*)['\""]"",
                             info_file, re.M)
    if version_match and author_match:
        return version_match.group(1), author_match.group(1)
    raise RuntimeError(""Unable to find package info."")
def _validate_install_ansible_base():
    """"""Validate that we can install ansible-base. Currently this only
    cares about upgrading to ansible-base from ansible<2.10
    """"""
    if os.getenv('ANSIBLE_SKIP_CONFLICT_CHECK', '') not in ('', '0'):
        return
    # Save these for later restoring things to pre invocation
    sys_modules = sys.modules.copy()
    sys_modules_keys = set(sys_modules)
    # Make sure `lib` isn't in `sys.path` that could confuse this
    sys_path = sys.path[:]
    abspath = os.path.abspath
    sys.path[:] = [p for p in sys.path if abspath(p) != abspath('lib')]
    try:
        from ansible.release import __version__
    except ImportError:
        pass
    else:
        version_tuple = tuple(int(v) for v in __version__.split('.')[:2])
        if version_tuple < (2, 10):
            stars = '*' * 76
            raise RuntimeError(
                '''
    %s
    Cannot install ansible-base with a pre-existing ansible==%s
    installation.
    Installing ansible-base with ansible-2.9 or older currently installed with
    pip is known to cause problems. Please uninstall ansible and install the new
    version:
        pip uninstall ansible
        pip install ansible-base
    If you want to skip the conflict checks and manually resolve any issues
    afterwards, set the ANSIBLE_SKIP_CONFLICT_CHECK environment variable:
        ANSIBLE_SKIP_CONFLICT_CHECK=1 pip install ansible-base
    %s
                ''' % (stars, __version__, stars)
            )
    finally:
        sys.path[:] = sys_path
        for key in sys_modules_keys.symmetric_difference(sys.modules):
            sys.modules.pop(key, None)
        sys.modules.update(sys_modules)
_validate_install_ansible_base()
"
-------------------------------------------------------------------------
"Recom
PRs: 70525, 70760"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.common.text.converters import container_to_text, to_native
from ansible.module_utils.six import string_types, PY2
"
-------------------------------------------------------------------------
"from ansible.module_utils.common.text.converters import container_to_text
from ansible.module_utils.six import string_types, PY2"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native
from ansible.module_utils.common.text.converters import container_to_text
from ansible.module_utils.six import string_types, PY2
"
-------------------------------------------------------------------------
"Recom
PRs: 68576, 69626"
-------------------------------------------------------------------------
=========================================================================
"finally:
    self._clean_up()
"
-------------------------------------------------------------------------
self.clear_dataloader_temp_files()
-------------------------------------------------------------------------
"# NOTE: this works due to fork, if switching to threads this should change to per thread storage of temp files
# clear var to ensure we only delete files for this child
self._loader._tempfiles = set()
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68470"
-------------------------------------------------------------------------
=========================================================================
"def get_fingerprint(path, passphrase=None, content=None, backend='pyopenssl'):
    privatekey = load_privatekey(path, passphrase=passphrase, content=content, check_passphrase=False, backend=backend)
    if backend == 'pyopenssl':
            publickey = crypto.dump_publickey(crypto.FILETYPE_ASN1, privatekey)
            # If PyOpenSSL < 16.0 crypto.dump_publickey() will fail.
            try:
                bio = crypto._new_mem_buf()
                rc = crypto._lib.i2d_PUBKEY_bio(bio, privatekey._pkey)
                if rc != 1:
                    crypto._raise_current_error()
                publickey = crypto._bio_to_string(bio)
            except AttributeError:
                # By doing this we prevent the code from raising an error
                # yet we return no value in the fingerprint hash.
                return None
    elif backend == 'cryptography':
        publickey = privatekey.public_key().public_bytes(
            serialization.Encoding.DER,
            serialization.PublicFormat.SubjectPublicKeyInfo
        )
"
-------------------------------------------------------------------------
"def get_fingerprint(path, passphrase=None, content=None, backend='pyopenssl'):
    privatekey = crypto_utils.load_privatekey(path, passphrase=passphrase, content=content, check_passphrase=False, backend=backend)

    if backend == 'pyopenssl':
        try:
            publickey = OpenSSL.crypto.dump_publickey(OpenSSL.crypto.FILETYPE_ASN1, privatekey)
        except AttributeError:
            return None
    elif backend == 'cryptography':
        publickey = privatekey.public_key().public_bytes(
            crypto_serialization.Encoding.DER,
            crypto_serialization.PublicFormat.SubjectPublicKeyInfo
        )"
-------------------------------------------------------------------------
"def get_fingerprint(path, passphrase=None, backend='pyopenssl'):
    privatekey = load_privatekey(path, passphrase, check_passphrase=False, backend=backend)
    if backend == 'pyopenssl':
            publickey = crypto.dump_publickey(crypto.FILETYPE_ASN1, privatekey)
            # If PyOpenSSL < 16.0 crypto.dump_publickey() will fail.
            try:
                bio = crypto._new_mem_buf()
                rc = crypto._lib.i2d_PUBKEY_bio(bio, privatekey._pkey)
                if rc != 1:
                    crypto._raise_current_error()
                publickey = crypto._bio_to_string(bio)
            except AttributeError:
                # By doing this we prevent the code from raising an error
                # yet we return no value in the fingerprint hash.
                return None
    elif backend == 'cryptography':
        publickey = privatekey.public_key().public_bytes(
            serialization.Encoding.DER,
            serialization.PublicFormat.SubjectPublicKeyInfo
        )
"
-------------------------------------------------------------------------
"Recom
PRs: 67036, 67039"
-------------------------------------------------------------------------
=========================================================================
"'CREATE ROLE', 'DROP ROLE', 'APPLICATION_PASSWORD_ADMIN',
'AUDIT_ADMIN', 'BACKUP_ADMIN', 'BINLOG_ADMIN',
'BINLOG_ENCRYPTION_ADMIN', 'CLONE_ADMIN', 'CONNECTION_ADMIN',
'ENCRYPTION_KEY_ADMIN', 'FIREWALL_ADMIN', 'FIREWALL_USER',
'GROUP_REPLICATION_ADMIN', 'INNODB_REDO_LOG_ARCHIVE',
'NDB_STORED_USER', 'PERSIST_RO_VARIABLES_ADMIN',
'REPLICATION_APPLIER', 'REPLICATION_SLAVE_ADMIN',
'RESOURCE_GROUP_ADMIN', 'RESOURCE_GROUP_USER',
'ROLE_ADMIN', 'SESSION_VARIABLES_ADMIN', 'SET_USER_ID',
'SYSTEM_USER', 'SYSTEM_VARIABLES_ADMIN', 'SYSTEM_USER',
'TABLE_ENCRYPTION_ADMIN', 'VERSION_TOKEN_ADMIN',
'XA_RECOVER_ADMIN', 'LOAD FROM S3', 'SELECT INTO S3'))
"
-------------------------------------------------------------------------
"'''
privileges = [
    'CREATE ROLE',
    'DROP ROLE',
    'APPLICATION_PASSWORD_ADMIN',
    'AUDIT_ADMIN',
    'BACKUP_ADMIN',
    'BINLOG_ADMIN',
    'BINLOG_ENCRYPTION_ADMIN',
    'CLONE_ADMIN',
    'CONNECTION_ADMIN',
    'ENCRYPTION_KEY_ADMIN',
    'FIREWALL_ADMIN',
    'FIREWALL_USER',
    'GROUP_REPLICATION_ADMIN',
    'INNODB_REDO_LOG_ARCHIVE',
    'NDB_STORED_USER',
    'PERSIST_RO_VARIABLES_ADMIN',
    'REPLICATION_APPLIER',
    'REPLICATION_SLAVE_ADMIN',
    'RESOURCE_GROUP_ADMIN',
    'RESOURCE_GROUP_USER',
    'ROLE_ADMIN',
    'SESSION_VARIABLES_ADMIN',
    'SET_USER_ID',
    'SYSTEM_USER',
    'SYSTEM_VARIABLES_ADMIN',
    'SYSTEM_USER',
    'TABLE_ENCRYPTION_ADMIN',
    'VERSION_TOKEN_ADMIN',
    'XA_RECOVER_ADMIN',
    'LOAD FROM S3',
    'SELECT INTO S3'
]
'''"
-------------------------------------------------------------------------
"'CREATE ROLE', 'DROP ROLE', 'APPLICATION_PASSWORD_ADMIN',
'AUDIT_ADMIN', 'BACKUP_ADMIN', 'BINLOG_ADMIN',
'BINLOG_ENCRYPTION_ADMIN', 'CONNECTION_ADMIN',
'ENCRYPTION_KEY_ADMIN', 'FIREWALL_ADMIN', 'FIREWALL_USER',
'GROUP_REPLICATION_ADMIN', 'PERSIST_RO_VARIABLES_ADMIN',
'REPLICATION_SLAVE_ADMIN', 'RESOURCE_GROUP_ADMIN', 'RESOURCE_GROUP_USER',
'ROLE_ADMIN', 'SESSION_VARIABLES_ADMIN', 'SET_USER_ID',
'SYSTEM_VARIABLES_ADMIN', 'VERSION_TOKEN_ADMIN', 'XA_RECOVER_ADMIN'))
"
-------------------------------------------------------------------------
"Recom
PRs: 66995, 66999"
-------------------------------------------------------------------------
=========================================================================
"restart_policy = host_config.get('RestartPolicy') or dict()
"
-------------------------------------------------------------------------
result = self.host_config.get('RestartPolicy') or dict()
-------------------------------------------------------------------------
"restart_policy=restart_policy.get('Name')
"
-------------------------------------------------------------------------
"Recom
PRs: 66192, 66221"
-------------------------------------------------------------------------
=========================================================================
"if not container.exists or container.removing:
    if container.removing:
        self.log('Found container in removal phase')
    else:
        self.log('No container found')
    if container.removing:
        # Wait for container to be removed before trying to create it
        self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"if not Container.exists or Container.removing:
            if Container.removing:
                self.log('Found container in removal phase')
            else:
                self.log('No container found')
            if Container.removing:
                # Wait for container to be removed before trying to create it
                self.wait_for_state(Container.Id, wait_states=['removing'], accept_removal=True)"
-------------------------------------------------------------------------
"if not container.exists or container.removing:
    if container.removing:
        self.log('Found container in removal phase')
    else:
        self.log('No container found')
    if container.removing and not self.check_mode:
        # Wait for container to be removed before trying to create it
        self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66118"
-------------------------------------------------------------------------
=========================================================================
"self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)"
-------------------------------------------------------------------------
"if not self.check_mode:
    self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66118"
-------------------------------------------------------------------------
=========================================================================
"if not container.exists or container.removing:
    if container.removing:
        self.log('Found container in removal phase')
    else:
        self.log('No container found')
    if container.removing:
        # Wait for container to be removed before trying to create it
        self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"# If container does not exist or is currently being removed
        if not container.exists or container.removing:
            if container.removing:
                self.log('Found container in removal phase')
                # Wait for container to be removed before trying to create it
                self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
            else:
                self.log('No container found')"
-------------------------------------------------------------------------
"if not container.exists or container.removing:
    if container.removing:
        self.log('Found container in removal phase')
    else:
        self.log('No container found')
    if container.removing and not self.check_mode:
        # Wait for container to be removed before trying to create it
        self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66117"
-------------------------------------------------------------------------
=========================================================================
"self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"self.wait_for_state(container.raw['Id'], wait_states=['removing'], condition='removed')"
-------------------------------------------------------------------------
"if not self.check_mode:
    self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66117"
-------------------------------------------------------------------------
=========================================================================
"@property
    if self._yum_base:
        return self._yum_base
    else:
        # Only init once
        self._yum_base = yum.YumBase()
        self._yum_base.preconf.debuglevel = 0
        self._yum_base.preconf.errorlevel = 0
        self._yum_base.preconf.plugins = True
        self._yum_base.preconf.enabled_plugins = self.enable_plugin
        self._yum_base.preconf.disabled_plugins = self.disable_plugin
        if self.releasever:
            self._yum_base.preconf.releasever = self.releasever
        if self.installroot != '/':
            # do not setup installroot by default, because of error
            # CRITICAL:yum.cli:Config Error: Error accessing file for config file:////etc/yum.conf
            # in old yum version (like in CentOS 6.6)
            self._yum_base.preconf.root = self.installroot
            self._yum_base.conf.installroot = self.installroot
        if self.conf_file and os.path.exists(self.conf_file):
            self._yum_base.preconf.fn = self.conf_file
        if os.geteuid() != 0:
            if hasattr(self._yum_base, 'setCacheDir'):
                self._yum_base.setCacheDir()
            else:
                cachedir = yum.misc.getCacheDir()
                self._yum_base.repos.setCacheDir(cachedir)
                self._yum_base.conf.cache = 0
        if self.disable_excludes:
            self._yum_base.conf.disable_excludes = self.disable_excludes
        # A sideeffect of accessing conf is that the configuration is
        # loaded and plugins are discovered
        self.yum_base.conf
        try:
            self._enablerepos_with_error_checking(self._yum_base)
            for rid in self.disablerepo:
                self.yum_base.repos.disableRepo(rid)
        except Exception as e:
            self.module.fail_json(msg=""Failure talking to yum: %s"" % to_native(e))
    return self._yum_base
"
-------------------------------------------------------------------------
"@property
    def _get_yum_base(self):
        if self._yum_base:
            return self._yum_base
        else:
            # Only init once
            self._yum_base = yum.YumBase()
            self._yum_base.preconf.debuglevel = 0
            self._yum_base.preconf.errorlevel = 0
            self._yum_base.preconf.plugins = True
            self._yum_base.preconf.enabled_plugins = self.enable_plugin
            self._yum_base.preconf.disabled_plugins = self.disable_plugin
            if self.releasever:
                self._yum_base.preconf.releasever = self.releasever
            if self.installroot != '/':
                # do not setup installroot by default, because of error
                # CRITICAL:yum.cli:Config Error: Error accessing file for config file:////etc/yum.conf
                # in old yum version (like in CentOS 6.6)
                self._yum_base.preconf.root = self.installroot
                self._yum_base.conf.installroot = self.installroot
            if self.conf_file and os.path.exists(self.conf_file):
                self._yum_base.preconf.fn = self.conf_file
            if os.geteuid() != 0:
                if hasattr(self._yum_base, 'setCacheDir'):
                    self._yum_base.setCacheDir()
                else:
                    cachedir = yum.misc.getCacheDir()
                    self._yum_base.repos.setCacheDir(cachedir)
                    self._yum_base.conf.cache = 0
            if self.disable_excludes:
                self._yum_base.conf.disable_excludes = self.disable_excludes
            # A sideeffect of accessing conf is that the configuration is
            # loaded and plugins are discovered
            self._yum_base.conf
            try:
                self._enablerepos_with_error_checking(self._yum_base)
                for rid in self.disablerepo:
                    self._yum_base.repos.disableRepo(rid)
            except Exception as e:
                self.module.fail_json(msg=""Failure talking to yum: %s"" % to_native(e))
            return self._yum_base"
-------------------------------------------------------------------------
"def _enablerepos_with_error_checking(self, yumbase):
    # NOTE: This seems unintuitive, but it mirrors yum's CLI bahavior
    if len(self.enablerepo) == 1:
        try:
            yumbase.repos.enableRepo(self.enablerepo[0])
        except yum.Errors.YumBaseError as e:
            if u'repository not found' in to_text(e):
                self.module.fail_json(msg=""Repository %s not found."" % self.enablerepo[0])
            else:
                raise e
    else:
        for rid in self.enablerepo:
            try:
                yumbase.repos.enableRepo(rid)
            except yum.Errors.YumBaseError as e:
                if u'repository not found' in to_text(e):
                    self.module.warn(""Repository %s not found."" % rid)
                else:
                    raise e
@property
    if self._yum_base:
        return self._yum_base
    else:
        # Only init once
        self._yum_base = yum.YumBase()
        self._yum_base.preconf.debuglevel = 0
        self._yum_base.preconf.errorlevel = 0
        self._yum_base.preconf.plugins = True
        self._yum_base.preconf.enabled_plugins = self.enable_plugin
        self._yum_base.preconf.disabled_plugins = self.disable_plugin
        if self.releasever:
            self._yum_base.preconf.releasever = self.releasever
        if self.installroot != '/':
            # do not setup installroot by default, because of error
            # CRITICAL:yum.cli:Config Error: Error accessing file for config file:////etc/yum.conf
            # in old yum version (like in CentOS 6.6)
            self._yum_base.preconf.root = self.installroot
            self._yum_base.conf.installroot = self.installroot
        if self.conf_file and os.path.exists(self.conf_file):
            self._yum_base.preconf.fn = self.conf_file
        if os.geteuid() != 0:
            if hasattr(self._yum_base, 'setCacheDir'):
                self._yum_base.setCacheDir()
            else:
                cachedir = yum.misc.getCacheDir()
                self._yum_base.repos.setCacheDir(cachedir)
                self._yum_base.conf.cache = 0
        if self.disable_excludes:
            self._yum_base.conf.disable_excludes = self.disable_excludes
        # A sideeffect of accessing conf is that the configuration is
        # loaded and plugins are discovered
        self.yum_base.conf
        try:
            self._enablerepos_with_error_checking(self._yum_base)
            for rid in self.disablerepo:
                self.yum_base.repos.disableRepo(rid)
        except Exception as e:
            self.module.fail_json(msg=""Failure talking to yum: %s"" % to_native(e))
    return self._yum_base
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"e, m, _ = self.yum_base.rpmdb.matchPackageNames([pkgspec])
    pkgs.extend(self.yum_base.returnInstalledPackagesByDep(pkgspec))
"
-------------------------------------------------------------------------
"e, m, _ = self.yum_base.rpmdb.matchPackageNames([pkgspec])
pkgs.extend(self.yum_base.returnInstalledPackagesByDep(pkgspec))"
-------------------------------------------------------------------------
"groups_list = self.yum_base.doGroupLists(return_evgrps=True)
groups_list = self.yum_base.doGroupLists()
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"e, m, _ = self.yum_base.pkgSack.matchPackageNames([pkgspec])
    pkgs.extend(self.yum_base.returnPackagesByDep(pkgspec))
"
-------------------------------------------------------------------------
"my = self.yum_base()
        e, m, _ = my.pkgSack.matchPackageNames([pkgspec])
        pkgs.extend(my.returnPackagesByDep(pkgspec))"
-------------------------------------------------------------------------
"e, m, _ = self.yum_base.rpmdb.matchPackageNames([pkgspec])
    pkgs.extend(self.yum_base.returnInstalledPackagesByDep(pkgspec))
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"pkgs = self.yum_base.returnPackagesByDep(pkgspec)  \
    self.yum_base.returnInstalledPackagesByDep(pkgspec)
    e, m, _ = self.yum_base.pkgSack.matchPackageNames([pkgspec])
updates = self.yum_base.doPackageLists(pkgnarrow='updates').updates
"
-------------------------------------------------------------------------
"pkgs = self.module.yum_base.returnPackagesByDep(pkgspec)
e, m, _ = self.module.yum_base.matchPackageNames([pkgspec])
updates = self.module.yum_base.doPackageLists(pkgnarrow='updates').updates"
-------------------------------------------------------------------------
"self._yum_base = None
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"pkgs = self.yum_base.returnPackagesByDep(req_spec)  \
    self.yum_base.returnInstalledPackagesByDep(req_spec)
, _ = self.yum_base.pkgSack.matchPackageNames([req_spec])
, _ = self.yum_base.rpmdb.matchPackageNames([req_spec])
"
-------------------------------------------------------------------------
"pkgs = self.yum_base.return_packages_by_dep(req_spec)
installed_pkgs = self.yum_base.return_installed_packages_by_dep(req_spec)
_, _ = self.yum_base.pkgSack.match_package_names([req_spec])
_, _ = self.yum_base.rpmdb.match_package_names([req_spec])"
-------------------------------------------------------------------------
"pkgs = self.yum_base.returnPackagesByDep(req_spec)  \
    self.yum_base.returnInstalledPackagesByDep(req_spec)
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"os.environ[item  ""_proxy""] = self.yum_base.conf.proxy
"
-------------------------------------------------------------------------
"os.environ[""_proxy""] = self.yum_base.conf.proxy"
-------------------------------------------------------------------------
"self._yum_base = None
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"self._yum_base = None  # previous YumBase package index is now invalid
"
-------------------------------------------------------------------------
self._yum_base_new = None  # previous YumBase package index is now invalid
-------------------------------------------------------------------------
"self._yum_base = None
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"try: self.yum_base.repos.disableRepo(disablerepo)
try: self.yum_base.repos.enableRepo(enablerepo)
"
-------------------------------------------------------------------------
"try:
    self.yum_base.repos.disable(disablerepo)
except Exception as e:
    pass

try:
    self.yum_base.repos.enable(enablerepo)
except Exception as e:
    pass"
-------------------------------------------------------------------------
"self._yum_base = None  # previous YumBase package index is now invalid
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"current_repos = self.yum_base.repos.repos.keys()
        new_repos = self.yum_base.repos.repos.keys()
                rid = self.yum_base.repos.getRepo(i)
"
-------------------------------------------------------------------------
"current_repos = self.yum_base.repos.listEnabled()
new_repos = self.yum_base.repos.listEnabled()
rid = self.yum_base.repos.getRepo(i)"
-------------------------------------------------------------------------
"try: self.yum_base.repos.disableRepo(disablerepo)
try: self.yum_base.repos.enableRepo(enablerepo)
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"yum_plugins = self.yum_base.plugins._plugins
"
-------------------------------------------------------------------------
yum_plugins = self.yum_base.plugins._plugins
-------------------------------------------------------------------------
"pkgs = self.yum_base.returnPackagesByDep(pkgspec)  \
    self.yum_base.returnInstalledPackagesByDep(pkgspec)
    e, m, _ = self.yum_base.pkgSack.matchPackageNames([pkgspec])
updates = self.yum_base.doPackageLists(pkgnarrow='updates').updates
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"elif current_condition['Field'] == condition['Field'] and current_condition['Values'] == condition['Values']:
"
-------------------------------------------------------------------------
elif current_condition['Field'] == condition['Field'] and current_condition['Values'] == condition['Values']:
-------------------------------------------------------------------------
"elif current_condition['Field'] == condition['Field'] and sorted(current_condition['Values']) == sorted(condition['Values']):
"
-------------------------------------------------------------------------
"Recom
PRs: 65021, 65212"
-------------------------------------------------------------------------
=========================================================================
"feed_ca_cert:
      The ca_cert alias will be removed in Ansible 2.14.
  aliases: [ importer_ssl_ca_cert, ca_cert ]
feed_client_cert:
  version_added: ""2.10""
"
-------------------------------------------------------------------------
"# Required dependencies: json, __future__, os, time, ansible.module_utils.urls, ansible.module_utils.basic

# Definition of variables
feed_ca_cert:
  The ca_cert alias will be removed in Ansible 2.14.
aliases: [ importer_ssl_ca_cert, ca_cert ]

# Declaration with version_added
feed_client_cert:
  version_added: ""2.10"""
-------------------------------------------------------------------------
"feed_ca_cert:
      The ca_cert alias will be removed in Ansible 2.14.
  aliases: [ importer_ssl_ca_cert, ca_cert ]
feed_client_cert:
  version_added: ""2.9.2""
"
-------------------------------------------------------------------------
"Recom
PRs: 59522, 65014"
-------------------------------------------------------------------------
=========================================================================
"- If not specified the default value will come from client_cert. Which will
  change in Ansible 2.14.
_client_key:
rsion_added: ""2.10""
- If not specified the default value will come from client_key. Which will
  change in Ansible 2.14.
"
-------------------------------------------------------------------------
"version_added: ""2.10""
+           aliases = [ 'importer_ssl_ca_cert', 'ca_cert']"
-------------------------------------------------------------------------
"- If not specified the default value will come from client_cert. Which will
  change in Ansible 2.14.
_client_key:
rsion_added: ""2.9.2""
- If not specified the default value will come from client_key. Which will
  change in Ansible 2.14.
"
-------------------------------------------------------------------------
"Recom
PRs: 59522, 65014"
-------------------------------------------------------------------------
=========================================================================
"importer_ssl_ca_cert = module.params['feed_ca_cert']
importer_ssl_client_cert = module.params['feed_client_cert']
if importer_ssl_client_cert is None and module.params['client_cert'] is not None:
    importer_ssl_client_cert = module.params['client_cert']
    module.deprecate((""To specify client certificates to be used with the repo to sync, and not for communication with pulp.io, use the new options ""
                      ""`feed_client_cert` and `feed_client_key` (available since Ansible 2.10). Until Ansible 2.14, the default value for ""
                      ""`feed_client_cert` will be taken from `client_cert` if only the latter is specified""), version=""2.14"")
importer_ssl_client_key = module.params['feed_client_key']
if importer_ssl_client_key is None and module.params['client_key'] is not None:
    importer_ssl_client_key = module.params['client_key']
    module.deprecate(""In Ansible 2.10 `feed_client_key` option was added. Until 2.14 the default value will come from client_key option"", version=""2.14"")
"
-------------------------------------------------------------------------
"importer_ssl_ca_cert = module.params['importer_ssl_ca_cert']
importer_ssl_client_cert = module.params['importer_ssl_client_cert']
if importer_ssl_client_cert is None and module.params['client_cert'] is not None:
    importer_ssl_client_cert = module.params['client_cert']
    module.deprecate((""To specify client certificates to be used with the repository to sync, and not for communication with pulp.io, use the new options ""
                      ""`feed_client_cert` and `feed_client_key` (available since Ansible 2.10). Until Ansible 2.14, the default value for ""
                      ""`feed_client_cert` will be taken from `client_cert` if only the latter is specified""), version=""2.14"")
importer_ssl_client_key = module.params['importer_ssl_client_key']
if importer_ssl_client_key is None and module.params['client_key'] is not None:
    importer_ssl_client_key = module.params['client_key']
    module.deprecate(""In Ansible 2.10 `feed_client_key` option was added. Until 2.14 the default value will come from client_key option"", version=""2.14"")"
-------------------------------------------------------------------------
"importer_ssl_ca_cert = module.params['feed_ca_cert']
importer_ssl_client_cert = module.params['feed_client_cert']
if importer_ssl_client_cert is None and module.params['client_cert'] is not None:
    importer_ssl_client_cert = module.params['client_cert']
    module.deprecate(""To specify client certificates to be used with the repo to sync, and not for communication with the ""
                     ""Pulp instance, use the new options `feed_client_cert` and `feed_client_key` (available since ""
                     ""Ansible 2.9.2). Until Ansible 2.14, the default value for `feed_client_cert` will be taken from ""
                     ""`client_cert` if only the latter is specified"", version=""2.14"")
importer_ssl_client_key = module.params['feed_client_key']
if importer_ssl_client_key is None and module.params['client_key'] is not None:
    importer_ssl_client_key = module.params['client_key']
    module.deprecate(""In Ansible 2.9.2 `feed_client_key` option was added. Until 2.14 the default value will come from client_key option"", version=""2.14"")
"
-------------------------------------------------------------------------
"Recom
PRs: 59522, 65014"
-------------------------------------------------------------------------
=========================================================================
"rc=rc,
out=out, err=err,  # Deprecated
stdout=out, stderr=err)
"
-------------------------------------------------------------------------
"stdout=out,
            stderr=err, # Deprecated"
-------------------------------------------------------------------------
"rc=rc,
out=out, err=err,
stdout=out, stderr=err)
"
-------------------------------------------------------------------------
"Recom
PRs: 63467, 64120"
-------------------------------------------------------------------------
=========================================================================
"short_description: Gathers information for virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
short_description: Gathers information for virtual machines running on Citrix Hypervisor/XenServer host or pool
-------------------------------------------------------------------------
"short_description: Gathers facts for virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63816"
-------------------------------------------------------------------------
=========================================================================
"- ""The only allowed value according to L(RFC 2986,https://tools.ietf.org/html/rfc2986#section-4.1)
   is 1.""
- This option will no longer accept unsupported values from Ansible 2.14 on.
"
-------------------------------------------------------------------------
"# The only allowed value according to RFC 2986 (https://tools.ietf.org/html/rfc2986#section-4.1) is 1.
# This option will no longer accept unsupported values from Ansible 2.14 onwards."
-------------------------------------------------------------------------
"- ""The only allowed value according to L(RFC 2986,https://tools.ietf.org/html/rfc2986#section-4.1)
   is 1.""
"
-------------------------------------------------------------------------
"Recom
PRs: 63432, 63675"
-------------------------------------------------------------------------
=========================================================================
"- ""The only allowed value according to L(RFC 2986,https://tools.ietf.org/html/rfc2986#section-4.1)
   is 1.""
- This option will no longer accept unsupported values from Ansible 2.14 on.
"
-------------------------------------------------------------------------
"# The only allowed value according to RFC 2986 (https://tools.ietf.org/html/rfc2986#section-4.1) is 1.
        # This option will no longer accept unsupported values from Ansible 2.14 on."
-------------------------------------------------------------------------
"- ""The only allowed value according to L(RFC 2986,https://tools.ietf.org/html/rfc2986#section-4.1)
   is 1.""
"
-------------------------------------------------------------------------
"Recom
PRs: 63432, 63674"
-------------------------------------------------------------------------
=========================================================================
"- If not set, the value will be remain the same if container exists and will be inherited
  from the host machine if it is (re-)created.
Specification for mounts to be added to the container. More powerful alternative to I(volumes).
"
-------------------------------------------------------------------------
"if not var_set:
    # The value will remain the same if the container exists and will be inherited
    # from the host machine if it is (re-)created.
    # Specification for mounts to be added to the container. More powerful alternative to docker_volumes."
-------------------------------------------------------------------------
"not attached. This module with I(networks: {name: other}) will create a container
C(docker run --network) and will *not* add the default network if I(networks) is
specified. If I(networks) is not specified, the default network will be attached.""
Note that docker CLI also sets I(network_mode) to the name of the first network
explicitly have to set I(network_mode) to the name of the first network you're
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"- Dictionary of options specific to the chosen volume_driver. See
  L(here,https://docs.docker.com/storage/volumes/#use-a-volume-driver) for details.
- ""The size for the tmpfs mount in bytes in format <number>[<unit>].""
   C(T) (tebibyte), or C(P) (pebibyte).""
"
-------------------------------------------------------------------------
"""Dictionary of options specific to the chosen {{ volume_driver }}. See [Use a volume driver](https://docs.docker.com/storage/volumes/#use-a-volume-driver) for details."",
     ""The size for the tmpfs mount in bytes in format <number>[<unit>]. Can be specified as {{ t }} (tebibyte), or {{ P }} (pebibyte)."""
-------------------------------------------------------------------------
"- ""Memory soft limit in format C(<number>[<unit>]). Number is a positive integer.
- ""Total memory limit (memory  swap) in format C(<number>[<unit>]).
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"- ""*Note:* images are only pulled when specified by name. If the image is specified
  as a image ID (hash), it cannot be pulled.""
- Remove the container from ALL networks not included in I(networks) parameter.
- Any default networks such as C(bridge), if not found in I(networks), will be removed as well.
"
-------------------------------------------------------------------------
"# Remove the container from all networks not included in the `networks` parameter
# Any default networks such as `bridge`, if not found in `networks`, will be removed as well."
-------------------------------------------------------------------------
"- ""Memory soft limit in format C(<number>[<unit>]). Number is a positive integer.
- ""Total memory limit (memory  swap) in format C(<number>[<unit>]).
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"- ""Size of C(/dev/shm) in format C(<number>[<unit>]). Number is positive integer.
- Omitting the unit defaults to bytes. If you omit the size entirely, Docker daemon uses C(64M).
- List of security options in the form of C(""label:user:User"").
- 'C(absent) - A container matching the specified name will be stopped and removed. Use I(force_kill) to kill the container
   rather than stopping it. Use I(keep_volumes) to retain volumes associated with the removed container.'
- 'C(present) - Asserts the existence of a container matching the name and any provided configuration parameters. If no
  with the requested config.'
- 'C(started) - Asserts that the container is first C(present), and then if the container is not running moves it to a running
  state. Use I(restart) to force a matching container to be stopped and restarted.'
- 'C(stopped) - Asserts that the container is first C(present), and then if the container is running moves it to a stopped
  state.'
- To control what will be taken into account when comparing configuration, see the I(comparisons) option. To avoid that the
  image version will be taken into account, you can also use the I(ignore_image) option.
- Use the I(recreate) option to always force re-creation of a matching container, even if it is running.
- If the container should be killed instead of stopped in case it needs to be stopped for recreation, or because I(state) is
  C(stopped), please use the I(force_kill) option. Use I(keep_volumes) to retain volumes associated with a removed container.
- Use I(keep_volumes) to retain volumes associated with a removed container.
"
-------------------------------------------------------------------------
"Size of C(/dev/shm) in format C(<positive_integer>[<unit>]). Number is positive integer.
Omitting the unit defaults to bytes. If you omit the size entirely, Docker daemon uses C(64M).
List of security options in the form of C(""label:user:User"").
'C(absent) - A container matching the specified name will be stopped and removed. Use I(force_kill) to kill the container
   rather than stopping it. Use I(keep_volumes) to retain volumes associated with the removed container.'
'C(present) - Asserts the existence of a container matching the name and any provided configuration parameters. If no
  with the requested config.'
'C(started) - Asserts that the container is first C(present), and then if the container is not running moves it to a running
  state. Use I(restart) to force a matching container to be stopped and restarted.'
'C(stopped) - Asserts that the container is first C(present), and then if the container is running moves it to a stopped
  state.'
To control what will be taken into account when comparing configuration, see the I(comparisons) option. To avoid that the
image version will be taken into account, you can also use the I(ignore_image) option.
Use the I(recreate) option to always force re-creation of a matching container, even if it is running.
If the container should be killed instead of stopped in case it needs to be stopped for recreation, or because I(state) is
C(stopped), please use the I(force_kill) option. Use I(keep_volumes) to retain volumes associated with a removed container.
Use I(keep_volumes) to retain volumes associated with a removed container."
-------------------------------------------------------------------------
"- List of container names or IDs to get volumes from.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"- ""List of ulimit options. A ulimit is specified as C(nofile:262144:262144).""
"
-------------------------------------------------------------------------
"ulimits_list = ""List of options for ulimits. A ulimit is specified as C(nofile:262144:262144)."""
-------------------------------------------------------------------------
"- ""Kernel memory limit in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"- ""*Note:* C(state=build) is DEPRECATED and will be removed in Ansible 2.11. Specifying C(build) will behave the
"
-------------------------------------------------------------------------
# Note: state='build' is DEPRECATED and will be removed in Ansible 2.11. Specifying 'build' will behave the
-------------------------------------------------------------------------
"- If I(name) parameter format is I(name:tag), then tag value from I(name) will take precedence.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"- ""Service memory reservation in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
# Service memory reservation in format C(<number>[<unit>]). Number is a positive integer.
-------------------------------------------------------------------------
"- ""Service memory limit in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"n_url = self.api_server
if self.api_server == 'https://galaxy.ansible.com' or self.api_server == 'https://galaxy.ansible.com/':
    n_url = 'https://galaxy.ansible.com/api/'
try:
    data = self._call_galaxy(n_url, method='GET', error_context_msg=error_context_msg)
except (AnsibleError, GalaxyError, ValueError, KeyError):
    # Either the URL doesnt exist, or other error. Or the URL exists, but isn't a galaxy API
    # root (not JSON, no 'available_versions') so try appending '/api/'
    n_url = _urljoin(n_url, '/api/')
    # let exceptions here bubble up
    data = self._call_galaxy(n_url, method='GET', error_context_msg=error_context_msg)
    if 'available_versions' not in data:
        raise AnsibleError(""Tried to find galaxy API root at %s but no 'available_versions' are available on %s""
                           % (n_url, self.api_server))
available_versions = data.get('available_versions', {u'v1': u'v1/'})
    available_versions[u'v2'] = u'v2/'
"
-------------------------------------------------------------------------
"n_url = self.api_server
if self.api_server == 'https://galaxy.ansible.com' or self.api_server == 'https://galaxy.ansible.com/':
    n_url = 'https://galaxy.ansible.com/api/'
try:
    data = self._call_galaxy(n_url, method='GET', error_context_msg=error_context_msg)
except (ansible.errors.AnsibleError, ansible.galaxy.api.GalaxyError, ValueError, KeyError):
    # Either the URL doesnt exist, or other error. Or the URL exists, but isn't a galaxy API
    # root (not JSON, no 'available_versions') so try appending '/api/'
    n_url = ansible.module_utils._text._urljoin(n_url, '/api/')
    # let exceptions here bubble up
    data = self._call_galaxy(n_url, method='GET', error_context_msg=error_context_msg)
    if 'available_versions' not in data:
        raise ansible.errors.AnsibleError(""Tried to find galaxy API root at %s but no 'available_versions' are available on %s""
                           % (n_url, self.api_server))
available_versions = data.get('available_versions', {u'v1': u'v1/'})
available_versions[u'v2'] = u'v2/'"
-------------------------------------------------------------------------
"n_url = self.api_server
if self.api_server == 'https://galaxy.ansible.com' or self.api_server == 'https://galaxy.ansible.com/':
    n_url = 'https://galaxy.ansible.com/api/'
try:
    data = self._call_galaxy(n_url, method='GET', error_context_msg=error_context_msg)
except (AnsibleError, GalaxyError, ValueError, KeyError):
    # Either the URL doesnt exist, or other error. Or the URL exists, but isn't a galaxy API
    # root (not JSON, no 'available_versions') so try appending '/api/'
    n_url = _urljoin(n_url, '/api/')
    # let exceptions here bubble up
    data = self._call_galaxy(n_url, method='GET', error_context_msg=error_context_msg)
    if 'available_versions' not in data:
        raise AnsibleError(""Tried to find galaxy API root at %s but no 'available_versions' are available on %s""
                           % (n_url, self.api_server))
    # Update api_server to point to the ""real"" API root, which in this case
    # was the configured url  '/api/' appended.
    self.api_server = n_url
available_versions = data.get('available_versions', {u'v1': u'v1/'})
    available_versions[u'v2'] = u'v2/'
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"pkg['vital'] = bool(int(pkg['vital']))
"
-------------------------------------------------------------------------
pkg['vital'] = bool(int(pkg['vital']))
-------------------------------------------------------------------------
"pkg['automatic'] = bool(int(pkg['automatic']))
"
-------------------------------------------------------------------------
"Recom
PRs: 62766, 62825"
-------------------------------------------------------------------------
=========================================================================
"# This is a helper class to sort the changes in a valid order
# ""Greater than"" means a change has to happen after another one.
# As an example, let's say self is daily (key == 1) and other is weekly (key == 2)
class ChangeHelper:
    def __init__(self, old, new):
        self.key = new.key
        self.old = old
        self.new = new
    def __gt__(self, other):
        if self.key < other.key:
            # You cannot disable daily if weekly is enabled, so later
            if self.new.enabled < other.old.enabled:
                return True
            # Enabling daily is OK if weekly is disabled
            elif self.new.enabled > other.old.enabled:
                return False
            # Otherwise, decreasing the daily level below the current weekly level has to be done later
            else:
                return self.new.level < other.old.level
        else:
            return not (self.old > self.new)
"
-------------------------------------------------------------------------
"from __future__ import absolute_import, division, print_function
from ansible.module_utils import _text, vmware, basic

class ChangeHelper:
    def __init__(self, old, new):
        self.key = new.key
        self.old = old
        self.new = new

class VmwareVcenterStatistics(ChangeHelper):
    def __init__(self, module):
        super(VmwareVcenterStatistics, self).__init__(module)

        if not self.is_vcenter():
            self.module.fail_json(msg=""You have to connect to a vCenter server!"")"
-------------------------------------------------------------------------
"# This is a helper class to sort the changes in a valid order
# ""Greater than"" means a change has to happen after another one.
# As an example, let's say self is daily (key == 1) and other is weekly (key == 2)
class ChangeHelper:
    def __init__(self, old, new):
        self.key = new.key
        self.old = old
        self.new = new
    def __eq__(self, other):
        return ((self.key, self.new.enabled, self.new.level) ==
                (other.key, other.new.enabled, other.new.level))
    def __gt__(self, other):
        if self.key < other.key:
            # You cannot disable daily if weekly is enabled, so later
            if self.new.enabled < other.old.enabled:
                return True
            # Enabling daily is OK if weekly is disabled
            elif self.new.enabled > other.old.enabled:
                return False
            # Otherwise, decreasing the daily level below the current weekly level has to be done later
            else:
                return self.new.level < other.old.level
        else:
            return not (other > self)
    def __ge__(self, other):
        return (self > other) or (self == other)
    def __lt__(self, other):
        return not (self >= other)
    def __le__(self, other):
        return not (self > other)
"
-------------------------------------------------------------------------
"Recom
PRs: 61345, 62088"
-------------------------------------------------------------------------
=========================================================================
"- To create a disabled account on OpenBSD, set this to C('*************').
"
-------------------------------------------------------------------------
"# To create a disabled account on OpenBSD, set this to C('*************')."
-------------------------------------------------------------------------
"- To create a disabled account on OpenBSD, set this to C('*************').
- See U(https://docs.ansible.com/ansible/faq.html#how-do-i-generate-encrypted-passwords-for-the-user-module)
"
-------------------------------------------------------------------------
"Recom
PRs: 54893, 61791"
-------------------------------------------------------------------------
=========================================================================
"if module.params.get('permission') and not module.params.get('ignore_nonexistent_bucket'):
    # Wait for the bucket to exist before setting ACLs
    s3.get_waiter('bucket_exists').wait(Bucket=bucket)
"
-------------------------------------------------------------------------
"if module.params.get('permission') and not module.params.get('ignore_nonexistent_bucket'):
        # Wait for the bucket to exist before setting ACLs
        waiter = s3.get_waiter('bucket_exists')
        waiter.wait(Bucket=bucket)"
-------------------------------------------------------------------------
"if module.params.get('permission'):
"
-------------------------------------------------------------------------
"Recom
PRs: 61735, 61769"
-------------------------------------------------------------------------
=========================================================================
"if module.params.get('permission') and not module.params.get('ignore_nonexistent_bucket'):
    # Wait for the bucket to exist before setting ACLs
    s3.get_waiter('bucket_exists').wait(Bucket=bucket)
"
-------------------------------------------------------------------------
"if module.params.get('permission') and not module.params.get('ignore_nonexistent_bucket'):
        # Wait for the bucket to exist before setting ACLs
        waiter = s3.get_waiter('bucket_exists')
        waiter.wait(Bucket=bucket)"
-------------------------------------------------------------------------
"if module.params.get('permission'):
    # Wait for the bucket to exist before setting ACLs
    s3.get_waiter('bucket_exists').wait(Bucket=bucket)
"
-------------------------------------------------------------------------
"Recom
PRs: 61735, 61768"
-------------------------------------------------------------------------
=========================================================================
"cluster = self.param('template_cluster') if self.param('template_cluster') else self.param('cluster')
    search='name=%s and cluster=%s' % (self.param('template'), cluster)
if not templates:
    templates = templates_service.list(
        search='name=%s' % self.param('template')
    )
"
-------------------------------------------------------------------------
"cluster = self.param('template_cluster') if self.param('template_cluster') else self.param('cluster')
search='name=%s and cluster=%s' % (self.param('template'), cluster)
if not templates:
    templates = templates_service.list(
        search=search
    )"
-------------------------------------------------------------------------
"""Template with name '%s' and version '%s' in data center '%s' was not found'"" % (
    data_center.name
"
-------------------------------------------------------------------------
"Recom
PRs: 59378, 60478"
-------------------------------------------------------------------------
=========================================================================
"- ""Port mirroring, QoS and network filters are not supported on passthrough profiles.""
"
-------------------------------------------------------------------------
"# Define the error message
error_msg = 'Port mirroring, QoS and network filters are not supported on passthrough profiles.'"
-------------------------------------------------------------------------
"- ""When enabled and C(migratable) not specified then C(migratable) is enabled.""
- ""Port mirroring, QoS and network filters are not supported on passthrough profiles.""
"
-------------------------------------------------------------------------
"Recom
PRs: 59727, 60198"
-------------------------------------------------------------------------
=========================================================================
"pass_through = getattr(entity.pass_through.mode, 'name', None)
    self._get_network_filter_id() == getattr(entity.network_filter, 'id', None) and
    self._get_qos_id() == getattr(entity.qos, 'id', None) and
    equal(self.param('pass_through'), pass_through.lower() if pass_through else None) and
"
-------------------------------------------------------------------------
"pass_through = getattr(entity.pass_through.mode, 'name', None)
self._get_network_filter_id() == getattr(entity.network_filter, 'id', None) and
self._get_qos_id() == getattr(entity.qos, 'id', None) and
equal(self.param('qos'), get_id_by_name(qoss_service, self.param('qos'))) and
equal(self.param('pass_through'), pass_through.lower() if pass_through else None) and"
-------------------------------------------------------------------------
"pass_through = getattr(entity.pass_through.mode, 'name', None)
    # The reason why we can't use equal method, is we get None from _get_network_filter_id or _get_qos_id method, when passing empty string.
    # And when first param of equal method is None it retruns true.
    self._get_network_filter_id() == getattr(entity.network_filter, 'id', None) and
    self._get_qos_id() == getattr(entity.qos, 'id', None) and
    equal(self.param('pass_through'), pass_through.lower() if pass_through else None) and
"
-------------------------------------------------------------------------
"Recom
PRs: 59727, 60198"
-------------------------------------------------------------------------
=========================================================================
"if module.params['api']:
        user_token['user_api'] = array.create_api_token(module.params['name'])['api_token']
"
-------------------------------------------------------------------------
"if module.params['api']:
    user_token['user_api'] = purefa.create_api_token(module.params['name'])['api_token']"
-------------------------------------------------------------------------
"if module.params['api']:
        user_token['user_api'] = array.create_api_token(module.params['name'])['api_token']
        # Added for 2.8.2: Not breaking user's playbooks in minor releases.
        user_token['api_token'] = user_token['user_api']
"
-------------------------------------------------------------------------
"Recom
PRs: 57588, 58544"
-------------------------------------------------------------------------
=========================================================================
"if module.params['api']:
        user_token['user_api'] = array.create_api_token(module.params['name'])['api_token']
"
-------------------------------------------------------------------------
"if module.params['api']:
    user_token['user_api'] = get_system(module).create_api_token(module.params['name'])['api_token']"
-------------------------------------------------------------------------
"if module.params['api']:
        user_token['user_api'] = array.create_api_token(module.params['name'])['api_token']
        # Added for 2.8.2: Not breaking user's playbooks in minor releases.
        user_token['api_token'] = user_token['user_api']
"
-------------------------------------------------------------------------
"Recom
PRs: 57588, 58544"
-------------------------------------------------------------------------
=========================================================================
"- Has no effect when C(local) is C(True)
- Has no effect when C(local) is C(True)
"
-------------------------------------------------------------------------
"# Omit -A and -G options in local mode since luseradd does not support these
if self._supports_local_mode and self._is_local:
    args.pop('append', None)
    args.pop('groups', None)"
-------------------------------------------------------------------------
"- Mutually exclusive with C(local)
- Mutually exclusive with C(local)
"
-------------------------------------------------------------------------
"Recom
PRs: 55401, 58480"
-------------------------------------------------------------------------
=========================================================================
"if groups_need_mod and not self.local:
"
-------------------------------------------------------------------------
if stable.groups_need_mod and not self.local:
-------------------------------------------------------------------------
"if self.groups is not None and not self.local and len(self.groups):
"
-------------------------------------------------------------------------
"Recom
PRs: 55401, 58480"
-------------------------------------------------------------------------
=========================================================================
"#
# (c) 2019 Red Hat Inc.
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type
from os import path
import json
from mock import MagicMock, call
from units.compat import unittest
from ansible.plugins.cliconf import ios
FIXTURE_DIR = b'%s/fixtures/ios' % (
    path.dirname(path.abspath(__file__)).encode('utf-8')
)
def _connection_side_effect(*args, **kwargs):
    try:
        if args:
            value = args[0]
        else:
            value = kwargs.get('command')
        fixture_path = path.abspath(
            b'%s/%s' % (FIXTURE_DIR, b'_'.join(value.split(b' ')))
        )
        with open(fixture_path, 'rb') as file_desc:
            return file_desc.read()
    except (OSError, IOError):
        if args:
            value = args[0]
            return value
        elif kwargs.get('command'):
            value = kwargs.get('command')
            return value
        return 'Nope'
class TestPluginCLIConfIOS(unittest.TestCase):
    """""" Test class for IOS CLI Conf Methods
    """"""
    def setUp(self):
        self._mock_connection = MagicMock()
        self._mock_connection.send.side_effect = _connection_side_effect
        self._cliconf = ios.Cliconf(self._mock_connection)
        self.maxDiff = None
    def tearDown(self):
        pass
    def test_get_device_info(self):
        """""" Test get_device_info
        """"""
        device_info = self._cliconf.get_device_info()
        mock_device_info = {'network_os': 'ios',
                            'network_os_model': 'CSR1000V',
                            'network_os_version': '16.06.01',
                            'network_os_hostname': 'an-csr-01',
                            'network_os_image': 'bootflash:packages.conf'
                            }
        self.assertEqual(device_info, mock_device_info)
    def test_get_capabilities(self):
        """""" Test get_capabilities
        """"""
        capabilities = json.loads(self._cliconf.get_capabilities())
        mock_capabilities = {
            'network_api': 'cliconf',
            'rpc': [
                'get_config',
                'edit_config',
                'get_capabilities',
                'get',
                'enable_response_logging',
                'disable_response_logging',
                'edit_banner',
                'get_diff',
                'run_commands',
                'get_defaults_flag'
            ],
            'device_operations': {
                'supports_diff_replace': True,
                'supports_commit': False,
                'supports_rollback': False,
                'supports_defaults': True,
                'supports_onbox_diff': False,
                'supports_commit_comment': False,
                'supports_multiline_delimiter': True,
                'supports_diff_match': True,
                'supports_diff_ignore_lines': True,
                'supports_generate_diff': True,
                'supports_replace': False
            },
            'device_info': {
                'network_os_hostname': 'an-csr-01',
                'network_os_image': 'bootflash:packages.conf',
                'network_os_model': 'CSR1000V',
                'network_os_version': '16.06.01',
                'network_os': 'ios'
            },
            'format': ['text'],
            'diff_match': ['line', 'strict', 'exact', 'none'],
            'diff_replace': ['line', 'block'],
            'output': []
        }
        self.assertEqual(
            mock_capabilities,
            capabilities
        )
"
-------------------------------------------------------------------------
"from __future__ import (absolute_import, division, print_function)
from os import path
import json
from mock import MagicMock, call
from units.compat import unittest
from ansible.plugins.cliconf import ios

def _connection_side_effect(*args, **kwargs):
    try:
        if args:
            value = args[0]
        else:
            value = kwargs.get('command')
        fixture_path = path.abspath(
            b'%s/%s' % (FIXTURE_DIR, b'_'.join(value.split(b' ')))
        )
        with open(fixture_path, 'rb') as file_desc:
            return file_desc.read()
    except (OSError, IOError):
        if args:
            value = args[0]
            return value
        elif kwargs.get('command'):
            value = kwargs.get('command')
            return value
        return 'Nope'

class TestPluginCLIConfIOS(unittest.TestCase):
    def setUp(self):
        self._mock_connection = MagicMock()
        self._mock_connection.send.side_effect = _connection_side_effect
        self._cliconf = ios.Cliconf(self._mock_connection)
        self.maxDiff = None

    def tearDown(self):
        pass

    def test_get_device_info(self):
        device_info = self._cliconf.get_device_info()
        mock_device_info = {'network_os': 'ios',
                            'network_os_model': 'CSR1000V',
                            'network_os_version': '16.06.01',
                            'network_os_hostname': 'an-csr-01',
                            'network_os_image': 'bootflash:packages.conf'
                            }
        self.assertEqual(device_info, mock_device_info)

    def test_get_capabilities(self):
        capabilities = json.loads(self._cliconf.get_capabilities())
        mock_capabilities = {
            'network_api': 'cliconf',
            'rpc': [
                'get_config',
                'edit_config',
                'get_capabilities',
                'get',
                'enable_response_logging',
                'disable_response_logging',
                'edit_banner',
                'get_diff',
                'run_commands',
                'get_defaults_flag'
            ],
            'device_operations': {
                'supports_diff_replace': True,
                'supports_commit': False,
                'supports_rollback': False,
                'supports_defaults': True,
                'supports_onbox_diff': False,
                'supports_commit_comment': False,
                'supports_multiline_delimiter': True,
                'supports_diff_match': True,
                'supports_diff_ignore_lines': True,
                'supports_generate_diff': True,
                'supports_replace': False
            },
            'device_info': {
                'network_os_hostname': 'an-csr-01',
                'network_os_image': 'bootflash:packages.conf',
                'network_os_model': 'CSR1000V',
                'network_os_version': '16.06.01',
                'network_os': 'ios'
            },
            'format': ['text'],
            'diff_match': ['line', 'strict', 'exact', 'none'],
            'diff_replace': ['line', 'block'],
            'output': []
        }
        self.assertEqual(
            mock_capabilities,
            capabilities
        )"
-------------------------------------------------------------------------
"#
# (c) 2019 Red Hat Inc.
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type
from os import path
import json
from mock import MagicMock, call
from units.compat import unittest
from ansible.plugins.cliconf import ios
from ansible.module_utils._text import to_bytes
b_FIXTURE_DIR = b'%s/fixtures/ios' % (
    to_bytes(path.dirname(path.abspath(__file__)), errors='surrogate_or_strict')
)
def _connection_side_effect(*args, **kwargs):
    try:
        if args:
            value = args[0]
        else:
            value = kwargs.get('command')
        fixture_path = path.abspath(
            b'%s/%s' % (b_FIXTURE_DIR, b'_'.join(value.split(b' ')))
        )
        with open(fixture_path, 'rb') as file_desc:
            return file_desc.read()
    except (OSError, IOError):
        if args:
            value = args[0]
            return value
        elif kwargs.get('command'):
            value = kwargs.get('command')
            return value
        return 'Nope'
class TestPluginCLIConfIOS(unittest.TestCase):
    """""" Test class for IOS CLI Conf Methods
    """"""
    def setUp(self):
        self._mock_connection = MagicMock()
        self._mock_connection.send.side_effect = _connection_side_effect
        self._cliconf = ios.Cliconf(self._mock_connection)
        self.maxDiff = None
    def tearDown(self):
        pass
    def test_get_device_info(self):
        """""" Test get_device_info
        """"""
        device_info = self._cliconf.get_device_info()
        mock_device_info = {'network_os': 'ios',
                            'network_os_model': 'CSR1000V',
                            'network_os_version': '16.06.01',
                            'network_os_hostname': 'an-csr-01',
                            'network_os_image': 'bootflash:packages.conf'
                            }
        self.assertEqual(device_info, mock_device_info)
    def test_get_capabilities(self):
        """""" Test get_capabilities
        """"""
        capabilities = json.loads(self._cliconf.get_capabilities())
        mock_capabilities = {
            'network_api': 'cliconf',
            'rpc': [
                'get_config',
                'edit_config',
                'get_capabilities',
                'get',
                'enable_response_logging',
                'disable_response_logging',
                'edit_banner',
                'get_diff',
                'run_commands',
                'get_defaults_flag'
            ],
            'device_operations': {
                'supports_diff_replace': True,
                'supports_commit': False,
                'supports_rollback': False,
                'supports_defaults': True,
                'supports_onbox_diff': False,
                'supports_commit_comment': False,
                'supports_multiline_delimiter': True,
                'supports_diff_match': True,
                'supports_diff_ignore_lines': True,
                'supports_generate_diff': True,
                'supports_replace': False
            },
            'device_info': {
                'network_os_hostname': 'an-csr-01',
                'network_os_image': 'bootflash:packages.conf',
                'network_os_model': 'CSR1000V',
                'network_os_version': '16.06.01',
                'network_os': 'ios'
            },
            'format': ['text'],
            'diff_match': ['line', 'strict', 'exact', 'none'],
            'diff_replace': ['line', 'block'],
            'output': []
        }
        self.assertEqual(
            mock_capabilities,
            capabilities
        )
"
-------------------------------------------------------------------------
"Recom
PRs: 58159, 58174"
-------------------------------------------------------------------------
=========================================================================
"#   when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
#   when: sample_com_challenge == 'changed'
-------------------------------------------------------------------------
"when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
"Recom
PRs: 57557, 57568"
-------------------------------------------------------------------------
=========================================================================
"def ensure_required_libs(module):
    if not HAS_PSYCOPG2:
        module.fail_json(msg=missing_required_lib('psycopg2'))
    if module.params.get('ca_cert') and LooseVersion(psycopg2.__version__) < LooseVersion('2.4.3'):
        module.fail_json(msg='psycopg2 must be at least 2.4.3 in order to use the ca_cert parameter')
def connect_to_db(module, autocommit=False, fail_on_conn=True, warn_db_default=True):
    ensure_required_libs(module)
    # To use defaults values, keyword arguments must be absent, so
    # check which values are empty and don't include in the **kw
    # dictionary
    params_map = {
        ""login_host"": ""host"",
        ""login_user"": ""user"",
        ""login_password"": ""password"",
        ""port"": ""port"",
        ""ssl_mode"": ""sslmode"",
        ""ca_cert"": ""sslrootcert""
    }
    # Might be different in the modules:
    if module.params.get('db'):
        params_map['db'] = 'database'
    elif module.params.get('database'):
        params_map['database'] = 'database'
    elif module.params.get('login_db'):
        params_map['login_db'] = 'database'
    else:
        if warn_db_default:
            module.warn('Database name has not been passed, '
                        'used default database to connect to.')
    kw = dict((params_map[k], v) for (k, v) in iteritems(module.params)
              if k in params_map and v != '' and v is not None)
    # If a login_unix_socket is specified, incorporate it here.
    is_localhost = ""host"" not in kw or kw[""host""] is None or kw[""host""] == ""localhost""
    if is_localhost and module.params[""login_unix_socket""] != """":
        kw[""host""] = module.params[""login_unix_socket""]
"
-------------------------------------------------------------------------
"def connect_to_db(module, autocommit=False, fail_on_conn=True, warn_db_default=True):
    if not HAS_PSYCOPG2:
        module.fail_json(msg=missing_required_lib('psycopg2'))
    if module.params.get('ca_cert') and LooseVersion(psycopg2.__version__) < LooseVersion('2.4.3'):
        module.fail_json(msg='psycopg2 must be at least 2.4.3 in order to use the ca_cert parameter')

    params_mapping = {
        ""login_host"": ""host"",
        ""login_user"": ""user"",
        ""login_password"": ""password"",
        ""port"": ""port"",
        ""ssl_mode"": ""sslmode"",
        ""ca_cert"": ""sslrootcert""
    }

    if module.params.get('db'):
        params_mapping['db'] = 'database'
    elif module.params.get('database'):
        params_mapping['database'] = 'database'
    elif module.params.get('login_db'):
        params_mapping['login_db'] = 'database'
    else:
        if warn_db_default:
            module.warn('Database name has not been passed, '
                        'used default database to connect to.')

    kw = dict((params_mapping[k], v) for (k, v) in ansible.module_utils.six.iteritems(module.params)
              if k in params_mapping and v != '' and v is not None)

    is_localhost = ""host"" not in kw or kw[""host""] is None or kw[""host""] == ""localhost""
    if is_localhost and module.params[""login_unix_socket""] != """":
        kw[""host""] = module.params[""login_unix_socket""]"
-------------------------------------------------------------------------
"def ensure_required_libs(module):
    if not HAS_PSYCOPG2:
        module.fail_json(msg=missing_required_lib('psycopg2'))
    if module.params.get('ca_cert') and LooseVersion(psycopg2.__version__) < LooseVersion('2.4.3'):
        module.fail_json(msg='psycopg2 must be at least 2.4.3 in order to use the ca_cert parameter')
def connect_to_db(module, conn_params, autocommit=False, fail_on_conn=True):
    """"""Connect to a PostgreSQL database.
    Return psycopg2 connection object.
    Args:
        module (AnsibleModule) -- object of ansible.module_utils.basic.AnsibleModule class
        conn_params (dict) -- dictionary with connection parameters
    Kwargs:
        autocommit (bool) -- commit automatically (default False)
        fail_on_conn (bool) -- fail if connection failed or just warn and return None (default True)
    """"""
    ensure_required_libs(module)
        db_connection = psycopg2.connect(**conn_params)
        # Switch role, if specified:
        cursor = db_connection.cursor(cursor_factory=DictCursor)
        if module.params.get('session_role'):
            try:
                cursor.execute('SET ROLE %s' % module.params['session_role'])
            except Exception as e:
                module.fail_json(msg=""Could not switch role: %s"" % to_native(e))
        cursor.close()
        if fail_on_conn:
            module.fail_json(msg=""unable to connect to database: %s"" % to_native(e))
        else:
            module.warn(""PostgreSQL server is unavailable: %s"" % to_native(e))
            db_connection = None
        if fail_on_conn:
            module.fail_json(msg=""unable to connect to database: %s"" % to_native(e))
        else:
            module.warn(""PostgreSQL server is unavailable: %s"" % to_native(e))
            db_connection = None
def get_conn_params(module, params_dict, warn_db_default=True):
    """"""Get connection parameters from the passed dictionary.
    Return a dictionary with parameters to connect to PostgreSQL server.
    Args:
        module (AnsibleModule) -- object of ansible.module_utils.basic.AnsibleModule class
        params_dict (dict) -- dictionary with variables
    Kwargs:
        warn_db_default (bool) -- warn that the default DB is used (default True)
    """"""
    # To use defaults values, keyword arguments must be absent, so
    # check which values are empty and don't include in the return dictionary
    params_map = {
        ""login_host"": ""host"",
        ""login_user"": ""user"",
        ""login_password"": ""password"",
        ""port"": ""port"",
        ""ssl_mode"": ""sslmode"",
        ""ca_cert"": ""sslrootcert""
    }
    # Might be different in the modules:
    if params_dict.get('db'):
        params_map['db'] = 'database'
    elif params_dict.get('database'):
        params_map['database'] = 'database'
    elif params_dict.get('login_db'):
        params_map['login_db'] = 'database'
    else:
        if warn_db_default:
            module.warn('Database name has not been passed, '
                        'used default database to connect to.')
    kw = dict((params_map[k], v) for (k, v) in iteritems(params_dict)
              if k in params_map and v != '' and v is not None)
    # If a login_unix_socket is specified, incorporate it here.
    is_localhost = ""host"" not in kw or kw[""host""] is None or kw[""host""] == ""localhost""
    if is_localhost and params_dict[""login_unix_socket""] != """":
        kw[""host""] = params_dict[""login_unix_socket""]
    return kw
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
"
-------------------------------------------------------------------------
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
from ansible.module_utils.basic import AnsibleModule"
-------------------------------------------------------------------------
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
 ansible.module_utils.postgres import (
connect_to_db,
get_conn_params,
postgres_common_argument_spec,
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"db_conn = ansible.module_utils.postgres.connect_to_db(module, autocommit=True)
cursor = db_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params)
db_connection = connect_to_db(module, conn_params, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
"
-------------------------------------------------------------------------
"from ansible.module_utils.basic import AnsibleModule
from psycopg2.extras import DictCursor"
-------------------------------------------------------------------------
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
 ansible.module_utils.postgres import connect_to_db, get_conn_params, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"db_connection = connect_to_db(module, autocommit=True)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params)
db_connection = connect_to_db(module, conn_params, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"# Library information from Stable: psycopg2, psycopg2.extras.DictCursor, ansible.module_utils.postgres.connect_to_db, ansible.module_utils.postgres.postgres_common_argument_spec

# Integrate into the target method:
from psycopg2.extras import DictCursor
from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec"
-------------------------------------------------------------------------
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.postgres import connect_to_db, get_conn_params, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"def __init__(self, module):
    self.session_role = self.module.params.get('session_role')
        self.db_conn = connect_to_db(self.module, warn_db_default=False)
        self.cursor = self.db_conn.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"def __init__(self):
    self.session_role = self.module.params.get('session_role')
    self.db_conn = connect_to_db(self.module, warn_db_default=False)
    self.cursor = self.db_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)"
-------------------------------------------------------------------------
"def __init__(self, module):
    self.session_role = self.module.params.get('session_role')
    conn_params = get_conn_params(self.module, self.module.params, warn_db_default=False)
    self.db_conn = connect_to_db(self.module, conn_params)
    return self.db_conn.cursor(cursor_factory=DictCursor)
    self.module.params['database'] = dbname
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.basic import AnsibleModule
"
-------------------------------------------------------------------------
From ansible.module_utils.basic import AnsibleModule
-------------------------------------------------------------------------
"from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.postgres import (
    connect_to_db,
    get_conn_params,
    postgres_common_argument_spec,
)
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, autocommit=False)
cursor = db_connection.cursor()
"
-------------------------------------------------------------------------
"# Required dependencies: ansible.module_utils.postgres.connect_to_db

# Integrate into the target method
db_connection = connect_to_db(module, autocommit=False)
cursor = db_connection.cursor()"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params)
db_connection = connect_to_db(module, conn_params, autocommit=False)
cursor = db_connection.cursor()
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
"
-------------------------------------------------------------------------
"# psycopg2 is checked by connect_to_db()
from ansible.module_utils.postgres import connect_to_db
from ansible.module_utils.basic import AnsibleModule
from psycopg2.extras import DictCursor"
-------------------------------------------------------------------------
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
 ansible.module_utils.postgres import connect_to_db, get_conn_params, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"    db_connection = connect_to_db(module, autocommit=False)
    cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"db_connection = ansible.module_utils.postgres.connect_to_db(module, autocommit=False)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)"
-------------------------------------------------------------------------
"    conn_params = get_conn_params(module, module.params)
    db_connection = connect_to_db(module, conn_params, autocommit=False)
    cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
""""""
If you want to add handling of a new type of database objects:
1. Add a specific method for this like self.__set_db_owner(), etc.
2. Add a condition with a check of ownership for new type objects to self.__is_owner()
3. Add a condition with invocation of the specific method to self.set_owner()
4. Add the information to the module documentation
That's all.
""""""
"
-------------------------------------------------------------------------
"# Required dependencies: psycopg2, ansible.module_utils.database.SQLParseError, ansible.module_utils.postgres.postgres_common_argument_spec, BeautifulSoup

from psycopg2.extras import DictCursor
from ansible.module_utils.postgres import connect_to_db
from ansible.module_utils.basic import AnsibleModule

""""""
If you want to add handling of a new type of database objects:
1. Add a specific method for this like self.__set_db_owner(), etc.
2. Add a condition with a check of ownership for new type objects to self.__is_owner()
3. Add a condition with invocation of the specific method to self.set_owner()
4. Add the information to the module documentation
That's all.
"""""""
-------------------------------------------------------------------------
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
 ansible.module_utils.postgres import connect_to_db, get_conn_params, postgres_common_argument_spec
""""""
If you want to add handling of a new type of database objects:
1. Add a specific method for this like self.__set_db_owner(), etc.
2. Add a condition with a check of ownership for new type objects to self.__is_owner()
3. Add a condition with invocation of the specific method to self.set_owner()
4. Add the information to the module documentation
That's all.
""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"    db_connection = connect_to_db(module, autocommit=False)
    cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"db_connection = postgress.connect_to_db(module, autocommit=False)
    cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)"
-------------------------------------------------------------------------
"    conn_params = get_conn_params(module, module.params)
    db_connection = connect_to_db(module, conn_params, autocommit=False)
    cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"# Library information from Stable: psycopg2.extras.DictCursor, ansible.module_utils.postgres.connect_to_db, ansible.module_utils.postgres.postgres_common_argument_spec

from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
from psycopg2.extras import DictCursor"
-------------------------------------------------------------------------
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.postgres import connect_to_db, get_conn_params, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, fail_on_conn=False)
if db_connection is not None:
    cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"# Required dependencies: psycopg2, ansible.module_utils.postgres.connect_to_db, psycopg2.extras.DictCursor

# Integrate into target method
db_connection = connect_to_db(module, fail_on_conn=False)
if db_connection is not None:
    cursor = db_connection.cursor(cursor_factory=DictCursor)"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params)
db_connection = connect_to_db(module, conn_params, fail_on_conn=False)
if db_connection is not None:
    cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"from psycopg2 import ProgrammingError as Psycopg2ProgrammingError
from psycopg2.extras import DictCursor
# it is needed for checking 'no result to fetch' in main(),
# psycopg2 availability will be checked by connect_to_db() into
# ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
"
-------------------------------------------------------------------------
"from psycopg2 import ProgrammingError as psycopg2.ProgrammingError
from psycopg2.extras import DictCursor
# it is needed for checking 'no result to fetch' in main(),
# psycopg2 availability will be checked by connect_to_db() into
# ansible.module_utils.postgres
import ansible.module_utils.basic as ansible_module_utils_basic"
-------------------------------------------------------------------------
"from psycopg2 import ProgrammingError as Psycopg2ProgrammingError
from psycopg2.extras import DictCursor
# it is needed for checking 'no result to fetch' in main(),
# psycopg2 availability will be checked by connect_to_db() into
# ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
 ansible.module_utils.postgres import connect_to_db, get_conn_params, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, autocommit=False)
cursor = db_connection.cursor(cursor_factory=DictCursor)
if module.params.get(""positional_args""):
elif module.params.get(""named_args""):
"
-------------------------------------------------------------------------
"db_connection = connect_to_db(module, autocommit=False)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)

if ""positional_args"" in module.params:
    # Include statements related to positional_args
elif ""named_args"" in module.params:
    # Include statements related to named_args"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params)
db_connection = connect_to_db(module, conn_params, autocommit=False)
cursor = db_connection.cursor(cursor_factory=DictCursor)
if module.params.get(""positional_args""):
elif module.params.get(""named_args""):
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
"
-------------------------------------------------------------------------
"# Required dependencies: psycopg2, psycopg2.extras, ansible.module_utils.postgres, ansible.module_utils.basic

from ansible.module_utils.postgres import connect_to_db
from psycopg2.extras import DictCursor
from ansible.module_utils.basic import AnsibleModule"
-------------------------------------------------------------------------
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
 ansible.module_utils.postgres import (
connect_to_db,
get_conn_params,
postgres_common_argument_spec,
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"# Required dependencies:
import ansible.module_utils.database
import ansible.module_utils.postgres
import psycopg2.extras

db_connection = ansible.module_utils.postgres.connect_to_db(module, autocommit=True)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params)
db_connection = connect_to_db(module, conn_params, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"try:
    from psycopg2.extras import DictCursor
except Exception:
    # psycopg2 is checked by connect_to_db()
    # from ansible.module_utils.postgres
    pass
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
PG_REQ_VER = 90400
"
-------------------------------------------------------------------------
"try:
    from psycopg2.extras import DictCursor
except Exception:
    pass

from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec"
-------------------------------------------------------------------------
"try:
    from psycopg2.extras import DictCursor
except Exception:
    # psycopg2 is checked by connect_to_db()
    # from ansible.module_utils.postgres
    pass
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.postgres import connect_to_db, get_conn_params, postgres_common_argument_spec
PG_REQ_VER = 90400
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, autocommit=True, warn_db_default=False)
cursor = db_connection.cursor(cursor_factory=DictCursor)
kw = {}
ver = db_connection.server_version
"
-------------------------------------------------------------------------
"# Required dependencies: psycopg2.extras, psycopg2, ansible.module_utils.database, ansible.module_utils.postgres.connect_to_db

# Integrate into the target method
db_connection = connect_to_db(module, autocommit=True, warn_db_default=False)
cursor = db_connection.cursor(cursor_factory=DictCursor)
kw = {}
ver = db_connection.server_version"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params, warn_db_default=False)
db_connection = connect_to_db(module, conn_params, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)
kw = {}
ver = db_connection.server_version
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"db_conn_params = get_conn_params(module.params)
db_connection = connect_to_db(db_conn_params, autocommit=True)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)"
-------------------------------------------------------------------------
"db_connection = connect_to_db(module, conn_params, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
 ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
from psycopg2.extras import DictCursor"
-------------------------------------------------------------------------
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
 ansible.module_utils.postgres import connect_to_db, get_conn_params, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"# Required dependencies: ansible.module_utils.postgres.connect_to_db, psycopg2.extras.DictCursor
db_connection = connect_to_db(module, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params)
db_connection = connect_to_db(module, conn_params, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import psycopg2, connect_to_db
from ansible.module_utils.basic import AnsibleModule"
-------------------------------------------------------------------------
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
 ansible.module_utils.postgres import connect_to_db, get_conn_params, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, autocommit=False)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"# Connect to the database
db_connection = connect_to_db(module, autocommit=False)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params)
db_connection = connect_to_db(module, conn_params, autocommit=False)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"from psycopg2 import __version__ as PSYCOPG2_VERSION
from psycopg2.extras import DictCursor
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT as AUTOCOMMIT
from psycopg2.extensions import ISOLATION_LEVEL_READ_COMMITTED as READ_COMMITTED
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
"
-------------------------------------------------------------------------
"import psycopg2
from psycopg2.extras import DictCursor
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT as AUTOCOMMIT, ISOLATION_LEVEL_READ_COMMITTED as READ_COMMITTED
from ansible.module_utils.basic import AnsibleModule"
-------------------------------------------------------------------------
"from psycopg2 import __version__ as PSYCOPG2_VERSION
from psycopg2.extras import DictCursor
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT as AUTOCOMMIT
from psycopg2.extensions import ISOLATION_LEVEL_READ_COMMITTED as READ_COMMITTED
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
 ansible.module_utils.postgres import connect_to_db, get_conn_params, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)
    if PSYCOPG2_VERSION >= '2.4.2':
        db_connection.set_isolation_level(READ_COMMITTED)
"
-------------------------------------------------------------------------
"kw = dict()
kw['autocommit'] = True
db_connection = connect_to_db(module, **kw)
cursor = db_connection.cursor(cursor_factory=DictCursor)

if psycopg2.__version__ >= '2.4.2':
    db_connection.set_isolation_level(READ_COMMITTED)"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params)
db_connection = connect_to_db(module, conn_params, autocommit=True)
cursor = db_connection.cursor(cursor_factory=DictCursor)
    if PSYCOPG2_VERSION >= '2.4.2':
        db_connection.set_isolation_level(READ_COMMITTED)
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
 ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
from psycopg2.extras import DictCursor"
-------------------------------------------------------------------------
"from psycopg2.extras import DictCursor
# psycopg2 is checked by connect_to_db()
# from ansible.module_utils.postgres
pass
 ansible.module_utils.basic import AnsibleModule
 ansible.module_utils.postgres import (
connect_to_db,
get_conn_params,
postgres_common_argument_spec,
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"if module.params['db'] == '' and module.params[""priv""] is not None:
privs = parse_privs(module.params[""priv""], module.params[""db""])
db_connection = connect_to_db(module, warn_db_default=False)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"if module.params['db'] == '' and module.params[""priv""] is not None:
        priv_set = parse_privs(module.params[""priv""], module.params[""db""])
        db_connection = ansible.module_utils.postgres.connect_to_db(module, warn_db_default=False)
        cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)"
-------------------------------------------------------------------------
"if module.params['db'] == '' and module.params[""priv""] is not None:
privs = parse_privs(module.params[""priv""], module.params[""db""])
conn_params = get_conn_params(module, module.params, warn_db_default=False)
db_connection = connect_to_db(module, conn_params)
cursor = db_connection.cursor(cursor_factory=DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55799, 57473"
-------------------------------------------------------------------------
=========================================================================
"if client.module.params['build'].get(build_option, default_value) != default_value:
"
-------------------------------------------------------------------------
"if client.module.params['build'].get(build_option, default_value) != default_value:
    pass"
-------------------------------------------------------------------------
"if client.module.params['build'].get(build_option, default_value) != default_value:
client.fail('If ""source"" is set to ""build"", the ""build.path"" option must be specified.')
"
-------------------------------------------------------------------------
"Recom
PRs: 56610, 57085"
-------------------------------------------------------------------------
=========================================================================
"if to_text(out, errors='surrogate_then_replace').strip().endswith('#'):
"
-------------------------------------------------------------------------
"if _text.to_text(out, errors='surrogate_then_replace').strip().endswith('#'):"
-------------------------------------------------------------------------
"        if to_text(out, errors='surrogate_then_replace').strip().endswith('#'):
            conn.send_command('exit discard')
"
-------------------------------------------------------------------------
"Recom
PRs: 56389, 56401"
-------------------------------------------------------------------------
=========================================================================
"if to_text(out, errors='surrogate_then_replace').strip().endswith('#'):
"
-------------------------------------------------------------------------
"re.sub(r'\n\s*#\s*', '', ansible.module_utils._text.to_text(out, errors='surrogate_then_replace').strip()).endswith('#')"
-------------------------------------------------------------------------
"if to_text(out, errors='surrogate_then_replace').strip().endswith('#'):
    conn.send_command('exit discard')
"
-------------------------------------------------------------------------
"Recom
PRs: 56389, 56399"
-------------------------------------------------------------------------
=========================================================================
"p = subprocess.Popen(
    local_cmd,
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE,
)
if self.become and self.become.expect_prompt() and sudoable:
    display.debug(""handling privilege escalation"")
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) | os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) | os.O_NONBLOCK)
    selector = selectors.DefaultSelector()
    selector.register(p.stdout, selectors.EVENT_READ)
    selector.register(p.stderr, selectors.EVENT_READ)
    become_output = b''
    try:
        while not self.become.check_success(become_output) and not self.become.check_password_prompt(become_output):
            events = selector.select(self._play_context.timeout)
            if not events:
                stdout, stderr = p.communicate()
                raise AnsibleError('timeout waiting for privilege escalation password prompt:\n'  to_native(become_output))
            for key, event in events:
                if key.fileobj == p.stdout:
                    chunk = p.stdout.read()
                    break
                elif key.fileobj == p.stderr:
                    chunk = p.stderr.read()
            if not chunk:
                stdout, stderr = p.communicate()
                raise AnsibleError('privilege output closed while waiting for password prompt:\n'  to_native(become_output))
            become_output = chunk
    finally:
        selector.close()
    if not self.become.check_success(become_output):
        p.stdin.write(to_bytes(self._play_context.become_pass, errors='surrogate_or_strict')  b'\n')
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) & ~os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) & ~os.O_NONBLOCK)
display.debug(""getting output with communicate()"")
display.debug(""done communicating"")
display.debug(""done with docker.exec_command()"")
"
-------------------------------------------------------------------------
"p = subprocess.Popen(
    local_cmd,
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE,
)
if self.__main__ and self.__main__.expect_prompt() and sudoable:
    display.debug(""handling privilege escalation"")
    import ansible.compat.selectors
    ansible.compat.selectors.F_SETFL(p.stdout, ansible.compat.selectors.F_SETFL, ansible.compat.selectors.F_SETFL(p.stdout, ansible.compat.selectors.F_GETFL) | os.O_NONBLOCK)
    ansible.compat.selectors.F_SETFL(p.stderr, ansible.compat.selectors.F_SETFL, ansible.compat.selectors.F_SETFL(p.stderr, ansible.compat.selectors.F_GETFL) | os.O_NONBLOCK)
    selector = ansible.compat.selectors.DefaultSelector()
    selector.register(p.stdout, ansible.compat.selectors.EVENT_READ)
    selector.register(p.stderr, ansible.compat.selectors.EVENT_READ)
    become_output = b''
    try:
        while not self.__main__.check_success(become_output) and not self.__main__.check_password_prompt(become_output):
            events = selector.select(ansible.plugins.connection._play_context.timeout)
            if not events:
                stdout, stderr = p.communicate()
                raise ansible.errors.AnsibleError('timeout waiting for privilege escalation password prompt:\n'  ansible.module_utils._text.to_native(become_output))
            for key, event in events:
                if key.fileobj == p.stdout:
                    chunk = p.stdout.read()
                    break
                elif key.fileobj == p.stderr:
                    chunk = p.stderr.read()
            if not chunk:
                stdout, stderr = p.communicate()
                raise ansible.errors.AnsibleError('privilege output closed while waiting for password prompt:\n'  ansible.module_utils._text.to_native(become_output))
            become_output = chunk
    finally:
        selector.close()
    if not self.__main__.check_success(become_output):
        p.stdin.write(ansible.module_utils._text.to_bytes(self.ansible.plugins.connection._play_context.become_pass, errors='surrogate_or_strict') + b'\n')
    ansible.compat.selectors.F_SETFL(p.stdout, ansible.compat.selectors.F_SETFL, ansible.compat.selectors.F_SETFL(p.stdout, ansible.compat.selectors.F_GETFL) & ~os.O_NONBLOCK)
    ansible.compat.selectors.F_SETFL(p.stderr, ansible.compat.selectors.F_SETFL, ansible.compat.selectors.F_SETFL(p.stderr, ansible.compat.selectors.F_GETFL) & ~os.O_NONBLOCK)
display.debug(""getting output with communicate()"")
display.debug(""done communicating"")
display.debug(""done with docker.exec_command()"")"
-------------------------------------------------------------------------
"p = subprocess.Popen(
    local_cmd,
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE,
)
if self._play_context.prompt and sudoable:
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) | os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) | os.O_NONBLOCK)
    selector = selectors.DefaultSelector()
    selector.register(p.stdout, selectors.EVENT_READ)
    selector.register(p.stderr, selectors.EVENT_READ)
    become_output = b''
    try:
        while not self.check_become_success(become_output) and not self.check_password_prompt(become_output):
            events = selector.select(self._play_context.timeout)
            if not events:
                stdout, stderr = p.communicate()
                raise AnsibleError('timeout waiting for privilege escalation password prompt:\n'  to_native(become_output))
            for key, event in events:
                if key.fileobj == p.stdout:
                    chunk = p.stdout.read()
                elif key.fileobj == p.stderr:
                    chunk = p.stderr.read()
            if not chunk:
                stdout, stderr = p.communicate()
                raise AnsibleError('privilege output closed while waiting for password prompt:\n'  to_native(become_output))
            become_output = chunk
    finally:
        selector.close()
    if not self.check_become_success(become_output):
        p.stdin.write(to_bytes(self._play_context.become_pass, errors='surrogate_or_strict')  b'\n')
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) & ~os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) & ~os.O_NONBLOCK)
display.debug(""getting output with communicate()"")
display.debug(""done communicating"")
display.debug(""done with docker.exec_command()"")
"
-------------------------------------------------------------------------
"Recom
PRs: 55816, 56278"
-------------------------------------------------------------------------
=========================================================================
"- Seconds to wait before reboot. Passed as a parameter to the reboot command.
- Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
- This timeout is evaluated separately for both reboot verification and test command success so the
"
-------------------------------------------------------------------------
"self.reboot_delay = None
    self.post_reboot_delay = None
    
    if self.params.get('reboot_delay'):
        self.reboot_delay = int(self.params['reboot_delay'])
    
    if self.params.get('post_reboot_delay'):
        self.post_reboot_delay = int(self.params['post_reboot_delay'])"
-------------------------------------------------------------------------
"- Seconds to wait before reboot. Passed as a parameter to the reboot command.
- On Linux, macOS and OpenBSD, this is converted to minutes and rounded down. If less than 60, it will be set to 0.
- On Solaris and FreeBSD, this will be seconds.
- Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
- This timeout is evaluated separately for both reboot verification and test command success so the
"
-------------------------------------------------------------------------
"Recom
PRs: 55934, 55959"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_native
from ansible.module_utils.basic import missing_required_lib
    HAS_NCCLIENT = True
    NCCLIENT_IMP_ERR = None
except (ImportError, AttributeError) as err:  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
    NCCLIENT_IMP_ERR = err
"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native
from ansible.plugins.netconf import ensure_ncclient
from ansible.errors import AnsibleConnectionFailure

HAS_NCCLIENT = True
NCCLIENT_IMP_ERR = None
except AnsibleConnectionFailure as err:  
    HAS_NCCLIENT = False
    NCCLIENT_IMP_ERR = err"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native
    HAS_NCCLIENT = True
    NCCLIENT_IMP_ERR = None
except (ImportError, AttributeError) as err:  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
    NCCLIENT_IMP_ERR = err
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"def ensure_ncclient(func):
    @wraps(func)
    def wrapped(self, *args, **kwargs):
        if not HAS_NCCLIENT:
            raise AnsibleError(""%s: %s"" % (missing_required_lib('ncclient'), to_native(NCCLIENT_IMP_ERR)))
        return func(self, *args, **kwargs)
    return wrapped
"
-------------------------------------------------------------------------
"def ensure_ncclient(func):
    @wraps(func)
    def wrapped(self, *args, **kwargs):
        from ansible.errors import AnsibleError
        from ansible.module_utils._text import to_native
        from ansible.plugins.netconf import ensure_ncclient
        if not HAS_NCCLIENT:
            raise AnsibleError(""%s: %s"" % (missing_required_lib('ncclient'), to_native(NCCLIENT_IMP_ERR)))
        return func(self, *args, **kwargs)
    return wrapped"
-------------------------------------------------------------------------
"def ensure_ncclient(func):
    @wraps(func)
    def wrapped(self, *args, **kwargs):
        if not HAS_NCCLIENT:
            raise AnsibleError(""Package ncclient is not installed: %s. Please install it with `pip install ncclient`"" % to_native(NCCLIENT_IMP_ERR))
        return func(self, *args, **kwargs)
    return wrapped
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
    HAS_NCCLIENT = True
except (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
    @ensure_ncclient
    @ensure_ncclient
"
-------------------------------------------------------------------------
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected
from ansible.plugins.netconf import ensure_ncclient
from ansible.plugins.netconf import ensure_ncclient
from ansible.plugins.netconf import ensure_ncclient
from ncclient.operations import RPCError
from ncclient.transport.errors import AuthenticationError

HAS_NCCLIENT = True
except (ImportError, AttributeError):  
    HAS_NCCLIENT = False

def target_method():
    # Your target method implementation here"
-------------------------------------------------------------------------
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
    HAS_NCCLIENT = True
except (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
    from ncclient.xml_ import to_xml
    HAS_NCCLIENT = True
except (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_ncclient
from ncclient.xml_ import to_xml
from ansible.plugins.netconf import ensure_ncclient
HAS_NCCLIENT = True
except (ImportError, AttributeError):  
    HAS_NCCLIENT = False"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
from ansible.plugins.netconf import ensure_ncclient
-------------------------------------------------------------------------
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
    from ncclient.xml_ import to_xml
    HAS_NCCLIENT = True
except (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_text, to_native
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
    HAS_NCCLIENT = True
except (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
    @ensure_ncclient
"
-------------------------------------------------------------------------
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_ncclient
from ansible.module_utils._text import to_text, to_native
from ncclient.transport.errors import SSHUnknownHostError
from ncclient import manager
import re

def guess_network_os(obj):
    try:
        m = manager.connect(
            host=obj._play_context.remote_addr,
            port=obj._play_context.port or 830,
            username=obj._play_context.remote_user,
            password=obj._play_context.password,
            key_filename=obj.key_filename,
            hostkey_verify=obj.get_option('host_key_checking'),
            look_for_keys=obj.get_option('look_for_keys'),
            allow_agent=obj._play_context.allow_agent,
            timeout=obj._play_context.timeout
        )
    except SSHUnknownHostError as exc:
        raise AnsibleConnectionFailure(str(exc))

    guessed_os = None
    for c in m.server_capabilities:
        if re.search('urn:nokia.com:sros:ns:yang:sr', c):
            guessed_os = 'sros'

    m.close_session()
    return guessed_os"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
from ansible.plugins.netconf import ensure_ncclient
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_text
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
    HAS_NCCLIENT = True
except (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
    @ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_text, to_native
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_ncclient
    from ncclient.xml_ import to_ele
    HAS_NCCLIENT = True
except (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_text, to_native
from ansible.plugins.netconf import ensure_ncclient
from ansible.errors import AnsibleConnectionFailure
from ncclient.xml_ import to_ele
HAS_NCCLIENT = True
except (ImportError, AnsibleConnectionFailure):  
    HAS_NCCLIENT = False"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
from ansible.plugins.netconf import ensure_ncclient
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_text
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_ncclient
    from ncclient.xml_ import to_ele
    HAS_NCCLIENT = True
except (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"indices = [match.start('subsection'), match.end('subsection')]
"
-------------------------------------------------------------------------
"indices = [match.start('subsection'), match.end('subsection')]"
-------------------------------------------------------------------------
"pattern = u'%s(?P<subsection>.*?)%s' % (params['after'], params['before'])
"
-------------------------------------------------------------------------
"Recom
PRs: 31452, 54408"
-------------------------------------------------------------------------
=========================================================================
"result = (contents[:indices[0]]  result[0]  contents[indices[1]:], result[1])
"
-------------------------------------------------------------------------
"result = (contents[:indices[0]] + result[0] + contents[indices[1]:], result[1])"
-------------------------------------------------------------------------
"pattern = u'%s(?P<subsection>.*?)%s' % (params['after'], params['before'])
"
-------------------------------------------------------------------------
"Recom
PRs: 31452, 54408"
-------------------------------------------------------------------------
=========================================================================
"crypto_utils.write_file(module, result)
"
-------------------------------------------------------------------------
"ansible.module_utils._text.write_file(module, result)"
-------------------------------------------------------------------------
"result = crypto.dump_certificate_request(crypto.FILETYPE_PEM, self.request)
crypto_utils.write_file(module, result)
"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"crypto_utils.write_file(
    module,
    self.pkcs12.export(self.passphrase, self.iter_size, self.maciter_size),
    0o600
)
"
-------------------------------------------------------------------------
"crypto_utils.write_file(
    module,
    self.pkcs12.export(self.passphrase, self.iter_size, self.maciter_size),
    384  # decimal representation of octal 0o600
)"
-------------------------------------------------------------------------
"crypto_utils.write_file(
    module,
    self.pkcs12.export(self.passphrase, self.iter_size, self.maciter_size),
    0o600
)
    with open(self.src, 'rb') as pkcs12_fh:
        pkcs12_content = pkcs12_fh.read()
    p12 = crypto.load_pkcs12(pkcs12_content,
    crypto_utils.write_file(module, b'%s%s' % (pkey, crt))
"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"crypto_utils.write_file(module, privatekey_data, 0o600)
self.changed = True
"
-------------------------------------------------------------------------
"crypto_utils.write_file(module, privatekey_data, 0o600)
self.changed = True"
-------------------------------------------------------------------------
"if module.params['mode'] is None:
    module.params['mode'] = '0600'
"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"def dump(self, check_mode=False):
    # Use only for absent
    result = {
        'changed': self.changed,
        'filename': self.path,
        'privatekey': self.privatekey_path,
        'csr': self.csr_path
    }
    return result
"
-------------------------------------------------------------------------
"def dump(self, check_mode=False):
    # Use only for absent
    result = {
        'changed': self.changed,
        'filename': self.path,
        'privatekey': self.privatekey_path,
        'csr': self.csr_path
    }

    if check_mode:
        now = datetime.datetime.utcnow()
        ten = now.replace(now.year + 10)
        result.update({
            'notBefore': self.notBefore if self.notBefore else now.strftime(""%Y%m%d%H%M%SZ""),
            'notAfter': self.notAfter if self.notAfter else ten.strftime(""%Y%m%d%H%M%SZ""),
            'serial_number': self.serial_number,
        })
    else:
        result.update({
            'notBefore': self.cert.get_notBefore(),
            'notAfter': self.cert.get_notAfter(),
            'serial_number': self.cert.get_serial_number(),
        })

    return result"
-------------------------------------------------------------------------
"class CertificateAbsent(Certificate):
    def __init__(self, module):
        super(CertificateAbsent, self).__init__(module)
    def generate(self, module):
        pass
    def dump(self, check_mode=False):
        # Use only for absent
        result = {
            'changed': self.changed,
            'filename': self.path,
            'privatekey': self.privatekey_path,
            'csr': self.csr_path
        }
        return result
"
-------------------------------------------------------------------------
"Recom
PRs: 54298, 54348"
-------------------------------------------------------------------------
=========================================================================
"ret = []
rn ret.get('all_parameters')
"
-------------------------------------------------------------------------
"facts = []
        ret = self._get_json(url)
        return ret.get('all_parameters')"
-------------------------------------------------------------------------
"return {}
rn ret.get('all_parameters')
"
-------------------------------------------------------------------------
"Recom
PRs: 51034, 54101"
-------------------------------------------------------------------------
=========================================================================
"if self.token:
    # Adds the session token to all commands if we're logged in.
    args = [to_bytes('--session=')  self.token]
"
-------------------------------------------------------------------------
"def _run(self, args, expected_rc=0, command_input=None, ignore_errors=False):
    # Adds the session token to all commands if we're logged in.
    if self.token:
        args = [self.cli_path, to_bytes('--session=' + self.token)] + args
    command = args
    p = Popen(command, stdout=PIPE, stderr=PIPE, stdin=PIPE)
    out, err = p.communicate(input=command_input)
    rc = p.wait()
    if not ignore_errors and rc != expected_rc:
        raise AnsibleModuleError(to_native(err))
    return rc, out, err"
-------------------------------------------------------------------------
"self.token = None
if self.token:
    # Adds the session token to all commands if we're logged in.
    args = [to_bytes('--session=')  self.token]
"
-------------------------------------------------------------------------
"Recom
PRs: 51953, 53657"
-------------------------------------------------------------------------
=========================================================================
"return {'document': document[1].strip()}
"
-------------------------------------------------------------------------
return {'document': document[1].strip()}
-------------------------------------------------------------------------
"self.token = None
if self.token:
    # Adds the session token to all commands if we're logged in.
    args = [to_bytes('--session=')  self.token]
"
-------------------------------------------------------------------------
"Recom
PRs: 51953, 53657"
-------------------------------------------------------------------------
=========================================================================
"status_down = self.client.check_if_swarm_node_is_down(node_id=self.node_id, repeat_check=5)
"
-------------------------------------------------------------------------
"status_down = self.client.check_node_status(node_id=self.node_id, repeat_check=5)"
-------------------------------------------------------------------------
"node_info = self.client.inspect_node(node_id=self.node_id)
"
-------------------------------------------------------------------------
"Recom
PRs: 53503, 53557"
-------------------------------------------------------------------------
=========================================================================
"self.client.remove_node(node_id=self.node_id, force=self.force)
"
-------------------------------------------------------------------------
"self.client.remove_node(node_id=self.node_id, force=self.force)"
-------------------------------------------------------------------------
"if _x > 0:
    sleep(5)
"
-------------------------------------------------------------------------
"Recom
PRs: 53503, 53557"
-------------------------------------------------------------------------
=========================================================================
"# -*- coding: utf-8 -*-
# Copyright (c) 2019 Ansible Project
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import absolute_import, division, print_function
__metaclass__ = type
from units.compat.mock import Mock
from ansible.module_utils.facts.system.distribution import DistributionFiles
def mock_module():
    mock_module = Mock()
    mock_module.params = {'gather_subset': ['all'],
                          'gather_timeout': 5,
                          'filter': '*'}
    mock_module.get_bin_path = Mock(return_value=None)
    return mock_module
def test_parse_distribution_file_clear_linux():
    test_input = {
        'name': 'Clearlinux',
        'data': 'NAME=""Clear Linux OS""\nVERSION=1\nID=clear-linux-os\nID_LIKE=clear-linux-os\nVERSION_ID=28120\nPRETTY_NAME=""Clear Linux OS""\nANSI_COLOR=""1;35""'
                '\nHOME_URL=""https://clearlinux.org""\nSUPPORT_URL=""https://clearlinux.org""\nBUG_REPORT_URL=""mailto:dev@lists.clearlinux.org""',
        'path': '/usr/lib/os-release',
        'collected_facts': None,
    }
    result = (
        True,
        {
            'distribution': 'Clear Linux OS',
            'distribution_major_version': '28120',
            'distribution_release': 'clear-linux-os',
            'distribution_version': '28120'
        }
    )
    distribution = DistributionFiles(module=mock_module())
    assert result == distribution.parse_distribution_file_ClearLinux(**test_input)
def test_parse_distribution_file_clear_linux_no_match():
    # Test against data from Linux Mint and CoreOS to ensure we do not get a reported
    # match from parse_distribution_file_ClearLinux()
    scenarios = [
        {
            # CoreOS
            'case': {
                'name': 'Clearlinux',
                'data': 'NAME=""Container Linux by CoreOS""\nID=coreos\nVERSION=1911.5.0\nVERSION_ID=1911.5.0\nBUILD_ID=2018-12-15-2317\nPRETTY_NAME=""Container L'
                        'inux by CoreOS 1911.5.0 (Rhyolite)""\nANSI_COLOR=""38;5;75""\nHOME_URL=""https://coreos.com/""\nBUG_REPORT_URL=""https://issues.coreos.com""'
                        '\nCOREOS_BOARD=""amd64-usr""',
                'path': '/usr/lib/os-release',
                'collected_facts': None,
            },
            'result': (False, {}),
        },
        {
            # Linux Mint
            'case': {
                'name': 'Clearlinux',
                'data': 'NAME=""Linux Mint""\nVERSION=""19.1 (Tessa)""\nID=linuxmint\nID_LIKE=ubuntu\nPRETTY_NAME=""Linux Mint 19.1""\nVERSION_ID=""19.1""\nHOME_URL=""h'
                        'ttps://www.linuxmint.com/""\nSUPPORT_URL=""https://forums.ubuntu.com/""\nBUG_REPORT_URL=""http://linuxmint-troubleshooting-guide.readthedo'
                        'cs.io/en/latest/""\nPRIVACY_POLICY_URL=""https://www.linuxmint.com/""\nVERSION_CODENAME=tessa\nUBUNTU_CODENAME=bionic',
                'path': '/usr/lib/os-release',
                'collected_facts': None,
            },
            'result': (False, {}),
        },
    ]
    distribution = DistributionFiles(module=mock_module())
    for scenario in scenarios:
        assert scenario['result'] == distribution.parse_distribution_file_ClearLinux(**scenario['case'])
"
-------------------------------------------------------------------------
"from ansible.compat.tests.mock import Mock
from ansible.module_utils.facts.system.distribution import DistributionFiles

def mock_module():
    mock_module = Mock()
    mock_module.params = {'gather_subset': ['all'],
                          'gather_timeout': 5,
                          'filter': '*'}
    mock_module.get_bin_path.return_value = None
    return mock_module

# Add test_parse_distribution_file_clear_linux below
# Add test_parse_distribution_file_clear_linux_no_match below

# Add the following to the target method where it integrates with the existing code:
distribution = DistributionFiles(module=mock_module())
assert result == distribution.parse_distribution_file_ClearLinux(**test_input)
for scenario in scenarios:
    assert scenario['result'] == distribution.parse_distribution_file_ClearLinux(**scenario['case'])"
-------------------------------------------------------------------------
"# -*- coding: utf-8 -*-
# Copyright (c) 2019 Ansible Project
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import absolute_import, division, print_function
__metaclass__ = type
from ansible.compat.tests.mock import Mock
from ansible.module_utils.facts.system.distribution import DistributionFiles
def mock_module():
    mock_module = Mock()
    mock_module.params = {'gather_subset': ['all'],
                          'gather_timeout': 5,
                          'filter': '*'}
    mock_module.get_bin_path = Mock(return_value=None)
    return mock_module
def test_parse_distribution_file_clear_linux():
    test_input = {
        'name': 'Clearlinux',
        'data': 'NAME=""Clear Linux OS""\nVERSION=1\nID=clear-linux-os\nID_LIKE=clear-linux-os\nVERSION_ID=28120\nPRETTY_NAME=""Clear Linux OS""\nANSI_COLOR=""1;35""'
                '\nHOME_URL=""https://clearlinux.org""\nSUPPORT_URL=""https://clearlinux.org""\nBUG_REPORT_URL=""mailto:dev@lists.clearlinux.org""',
        'path': '/usr/lib/os-release',
        'collected_facts': None,
    }
    result = (
        True,
        {
            'distribution': 'Clear Linux OS',
            'distribution_major_version': '28120',
            'distribution_release': 'clear-linux-os',
            'distribution_version': '28120'
        }
    )
    distribution = DistributionFiles(module=mock_module())
    assert result == distribution.parse_distribution_file_ClearLinux(**test_input)
def test_parse_distribution_file_clear_linux_no_match():
    # Test against data from Linux Mint and CoreOS to ensure we do not get a reported
    # match from parse_distribution_file_ClearLinux()
    scenarios = [
        {
            # CoreOS
            'case': {
                'name': 'Clearlinux',
                'data': 'NAME=""Container Linux by CoreOS""\nID=coreos\nVERSION=1911.5.0\nVERSION_ID=1911.5.0\nBUILD_ID=2018-12-15-2317\nPRETTY_NAME=""Container L'
                        'inux by CoreOS 1911.5.0 (Rhyolite)""\nANSI_COLOR=""38;5;75""\nHOME_URL=""https://coreos.com/""\nBUG_REPORT_URL=""https://issues.coreos.com""'
                        '\nCOREOS_BOARD=""amd64-usr""',
                'path': '/usr/lib/os-release',
                'collected_facts': None,
            },
            'result': (False, {}),
        },
        {
            # Linux Mint
            'case': {
                'name': 'Clearlinux',
                'data': 'NAME=""Linux Mint""\nVERSION=""19.1 (Tessa)""\nID=linuxmint\nID_LIKE=ubuntu\nPRETTY_NAME=""Linux Mint 19.1""\nVERSION_ID=""19.1""\nHOME_URL=""h'
                        'ttps://www.linuxmint.com/""\nSUPPORT_URL=""https://forums.ubuntu.com/""\nBUG_REPORT_URL=""http://linuxmint-troubleshooting-guide.readthedo'
                        'cs.io/en/latest/""\nPRIVACY_POLICY_URL=""https://www.linuxmint.com/""\nVERSION_CODENAME=tessa\nUBUNTU_CODENAME=bionic',
                'path': '/usr/lib/os-release',
                'collected_facts': None,
            },
            'result': (False, {}),
        },
    ]
    distribution = DistributionFiles(module=mock_module())
    for scenario in scenarios:
        assert scenario['result'] == distribution.parse_distribution_file_ClearLinux(**scenario['case'])
"
-------------------------------------------------------------------------
"Recom
PRs: 53298, 53541"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.six import string_types, integer_types
"
-------------------------------------------------------------------------
"from ansible.module_utils.six.moves import string_types, integer_types"
-------------------------------------------------------------------------
"from ansible.module_utils.six import string_types, integer_types
    # Simple type=int with a large value (will be of type long under Python 2)
    ({'arg': {'type': 'int'}}, {'arg': 18765432109876543210}, 18765432109876543210),
    # Simple type=list, elements=int
    ({'arg': {'type': 'list', 'elements': 'int'}}, {'arg': [42, 32]}, [42, 32]),
"
-------------------------------------------------------------------------
"Recom
PRs: 53289, 53329"
-------------------------------------------------------------------------
=========================================================================
"if argspec['arg']['type'] == 'int':
    type_ = integer_types
else:
    type_ = getattr(builtins, argspec['arg']['type'])
"
-------------------------------------------------------------------------
"if argspec['arg']['type'] == 'int':
    type_ = int
else:
    type_ = getattr(builtins, argspec['arg']['type'])"
-------------------------------------------------------------------------
"@pytest.mark.parametrize('stdin', [{'arg': 42}, {'arg': 18765432109876543210}], indirect=['stdin'])
    assert isinstance(am.params['arg'], integer_types)
"
-------------------------------------------------------------------------
"Recom
PRs: 53289, 53329"
-------------------------------------------------------------------------
=========================================================================
"- This is only used by the C(selfsigned) provider.
"
-------------------------------------------------------------------------
This is only used by the `C(SelfSignedCertificate)` provider.
-------------------------------------------------------------------------
"- This is only used by the C(assertonly) provider.
"
-------------------------------------------------------------------------
"Recom
PRs: 53208, 53283"
-------------------------------------------------------------------------
=========================================================================
"if module.check_mode:
    if os.path.exists(tmpsrc):
        os.remove(tmpsrc)
    result['changed'] = ('checksum_dest' not in result or
                         result['checksum_src'] != result['checksum_dest'])
    module.exit_json(msg=info.get('msg', ''), **result)
"
-------------------------------------------------------------------------
"if module.check_mode:
    if os.path.exists(tmpsrc):
        os.remove(tmpsrc)
    changed = ('checksum_dest' not in res_args or
               res_args['checksum_src'] != res_args['checksum_dest'])
    res_args['changed'] = changed
    module.exit_json(msg=info.get('msg', ''), **res_args)"
-------------------------------------------------------------------------
"if module.check_mode:
    if os.path.exists(tmpsrc):
        os.remove(tmpsrc)
    changed = (checksum_dest is None or
               checksum_src != checksum_dest)
    res_args = dict(url=url, changed=changed, dest=dest, src=tmpsrc,
                    checksum_dest=checksum_dest, checksum_src=checksum_src,
                    msg=info.get('msg', ''))
    module.exit_json(**res_args)
"
-------------------------------------------------------------------------
"Recom
PRs: 53070, 53172"
-------------------------------------------------------------------------
=========================================================================
"- name: Add a new VLAN pool range
  aci_encap_pool_range:
    pool_allocation_mode: static
    range_name: anstest
    range_start: 20
    range_end: 40
    allocation_mode: inherit
- name: Remove a VLAN pool range
  aci_encap_pool_range:
    pool_allocation_mode: static
    range_name: anstest
    range_start: 20
    range_end: 40
  aci_encap_pool_range:
    pool_allocation_mode: static
    range_name: anstest
    range_start: 20
    range_end: 50
- name: Query a VLAN pool for ranges by range_name
  aci_encap_pool_range:
    host: apic
    username: admin
    password: SomeSecretPassword
    pool_type: vlan
    range_name: anstest
    state: query
  delegate_to: localhost
  register: query_result
- name: Query a VLAN pool for ranges by range_start
  aci_encap_pool_range:
    host: apic
    username: admin
    password: SomeSecretPassword
    pool_type: vlan
    range_start: 20
    state: query
  delegate_to: localhost
  register: query_result
- name: Query a VLAN pool for ranges by range_start and range_end
  aci_encap_pool_range:
    range_start: 20
    range_end: 40
- name: Query all VLAN pool ranges
  aci_encap_pool_range:
"
-------------------------------------------------------------------------
"argument_spec.update(dict(
        pool_allocation_mode=dict(type='str', required=True),
        range_name=dict(type='str', required=False),
        range_start=dict(type='int', required=False),
        range_end=dict(type='int', required=False),
        allocation_mode=dict(type='str', required=False, default='inherit'),
        host=dict(type='str'),
        username=dict(type='str'),
        password=dict(type='str', no_log=True),
        pool_type=dict(type='str', required=False),
        state=dict(type='str', required=False),
        delegate_to=dict(type='str'),
        register=dict(type='str')
    ))
    
    aci = ACIModule()
    
    if module.params['state'] == 'query':
        if module.params['range_name']:
            result = aci.get_existing('vlan', module.params['range_name'])
        elif module.params['range_start']:
            result = aci.get_existing('vlan', module.params['range_start'])
            if module.params['range_end']:
                result = aci.get_existing('vlan', module.params['range_start'], module.params['range_end'])
        else:
            result = aci.get_existing('vlan')
    else:
        if module.params['range_end']:
            aci.delete_config('vlan', module.params['range_name'], module.params['range_start'], module.params['range_end'])
        else:
            aci.post_config('vlan', module.params['range_name'], module.params['range_start'], module.params['range_end'])
    
    aci.exit_json(changed=True, ansible_facts={})"
-------------------------------------------------------------------------
"- name: Add a new VLAN pool range
  aci_encap_pool_range:
    pool_allocation_mode: static
    range_name: anstest
    range_start: 20
    range_end: 40
    allocation_mode: inherit
- name: Remove a VLAN pool range
  aci_encap_pool_range:
    pool_allocation_mode: static
    range_name: anstest
    range_start: 20
    range_end: 40
- name: Query a VLAN range
  aci_encap_pool_range:
    pool_allocation_mode: static
    range_name: anstest
    range_start: 20
    range_end: 50
- name: Query a VLAN pool for ranges by range_name
  aci_encap_pool_range:
    host: apic
    username: admin
    password: SomeSecretPassword
    pool_type: vlan
    range_name: anstest
    state: query
  delegate_to: localhost
  register: query_result
- name: Query a VLAN pool for ranges by range_start
  aci_encap_pool_range:
    host: apic
    username: admin
    password: SomeSecretPassword
    pool_type: vlan
    range_start: 20
    state: query
  delegate_to: localhost
  register: query_result
- name: Query a VLAN pool for ranges by range_start and range_end
  aci_encap_pool_range:
    range_start: 20
    range_end: 40
- name: Query all VLAN pool ranges
  aci_encap_pool_range:
"
-------------------------------------------------------------------------
"Recom
PRs: 52958, 52965"
-------------------------------------------------------------------------
=========================================================================
"- name: Add a new VLAN pool range
  aci_encap_pool_range:
    pool_allocation_mode: static
    range_name: anstest
    range_start: 20
    range_end: 40
    allocation_mode: inherit
- name: Remove a VLAN pool range
  aci_encap_pool_range:
    pool_allocation_mode: static
    range_name: anstest
    range_start: 20
    range_end: 40
  aci_encap_pool_range:
    pool_allocation_mode: static
    range_name: anstest
    range_start: 20
    range_end: 50
- name: Query a VLAN pool for ranges by range_name
  aci_encap_pool_range:
    host: apic
    username: admin
    password: SomeSecretPassword
    pool_type: vlan
    range_name: anstest
    state: query
  delegate_to: localhost
  register: query_result
- name: Query a VLAN pool for ranges by range_start
  aci_encap_pool_range:
    host: apic
    username: admin
    password: SomeSecretPassword
    pool_type: vlan
    range_start: 20
    state: query
  delegate_to: localhost
  register: query_result
- name: Query a VLAN pool for ranges by range_start and range_end
  aci_encap_pool_range:
    range_start: 20
    range_end: 40
- name: Query all VLAN pool ranges
  aci_encap_pool_range:
"
-------------------------------------------------------------------------
"aci.construct_url()
    aci.payload()
    aci.get_diff()
    module.fail_json()
    aci.get_existing()
    aci.delete_config()
    aci.exit_json()
    aci.post_config()
  
    argument_spec = aci_argument_spec()
    argument_spec.update(
        dict(
            pool_allocation_mode=dict(type='str', required=True),
            range_name=dict(type='str', required=True),
            range_start=dict(type='int', required=True),
            range_end=dict(type='int', required=True),
            allocation_mode=dict(type='str', default='inherit'),
            host=dict(type='str'),
            username=dict(type='str'),
            password=dict(type='str', no_log=True),
            pool_type=dict(type='str', default='vlan'),
            state=dict(type='str', default='present')
        )
    )
  
    params = module.params

    aci_encap_pool_range = ACIModule(argument_spec, params)
    result = aci_encap_pool_range.main()"
-------------------------------------------------------------------------
"- name: Add a new VLAN pool range
  aci_encap_pool_range:
    pool_allocation_mode: static
    range_name: anstest
    range_start: 20
    range_end: 40
    allocation_mode: inherit
- name: Remove a VLAN pool range
  aci_encap_pool_range:
    pool_allocation_mode: static
    range_name: anstest
    range_start: 20
    range_end: 40
- name: Query a VLAN range
  aci_encap_pool_range:
    pool_allocation_mode: static
    range_name: anstest
    range_start: 20
    range_end: 50
- name: Query a VLAN pool for ranges by range_name
  aci_encap_pool_range:
    host: apic
    username: admin
    password: SomeSecretPassword
    pool_type: vlan
    range_name: anstest
    state: query
  delegate_to: localhost
  register: query_result
- name: Query a VLAN pool for ranges by range_start
  aci_encap_pool_range:
    host: apic
    username: admin
    password: SomeSecretPassword
    pool_type: vlan
    range_start: 20
    state: query
  delegate_to: localhost
  register: query_result
- name: Query a VLAN pool for ranges by range_start and range_end
  aci_encap_pool_range:
    range_start: 20
    range_end: 40
- name: Query all VLAN pool ranges
  aci_encap_pool_range:
"
-------------------------------------------------------------------------
"Recom
PRs: 52958, 52963"
-------------------------------------------------------------------------
=========================================================================
"return self._module.from_json(to_text(resp.read()))
"
-------------------------------------------------------------------------
return self._module.from_json(json.loads(resp.read()))
-------------------------------------------------------------------------
"return self._module.from_json(to_text(resp.read(), errors='surrogate_or_strict'))
"
-------------------------------------------------------------------------
"Recom
PRs: 52822, 52915"
-------------------------------------------------------------------------
=========================================================================
"return self._module.from_json(to_text(resp.read()))
"
-------------------------------------------------------------------------
return JSONModule.from_json(to_text(response.read()))
-------------------------------------------------------------------------
"return self._module.from_json(to_text(resp.read(), errors='surrogate_or_strict'))
"
-------------------------------------------------------------------------
"Recom
PRs: 52822, 52915"
-------------------------------------------------------------------------
=========================================================================
"'size': locale.atof(parts[1]),
"
-------------------------------------------------------------------------
"'size': float(parts[1]),"
-------------------------------------------------------------------------
"'size': float(parts[1]),
"
-------------------------------------------------------------------------
"Recom
PRs: 36811, 52836"
-------------------------------------------------------------------------
=========================================================================
"'size': locale.atof(parts[1]),
'free': locale.atof(parts[2]),
'ext_size': locale.atof(parts[3])
"
-------------------------------------------------------------------------
"'size': locale.atof(parts[1]),
'free': locale.atof(parts[2]),
'ext_size': locale.atof(parts[3]),"
-------------------------------------------------------------------------
"'size': float(parts[1]),
'free': float(parts[2]),
'ext_size': float(parts[3])
"
-------------------------------------------------------------------------
"Recom
PRs: 36811, 52836"
-------------------------------------------------------------------------
=========================================================================
"locale.atof(size)
"
-------------------------------------------------------------------------
"# Determine if the ""--yes"" option should be used
version_found = get_lvm_version(module)
if version_found is None:
    module.fail_json(msg=""Failed to get LVM version number"")
version_yesopt = mkversion(2, 2, 99)  # First LVM with the ""--yes"" option
if version_found >= version_yesopt:
    yesopt = ""--yes""
else:
    yesopt = """"

vg = module.params['vg']
lv = module.params['lv']
size = module.params['size']
# Convert size to float
try:
    size = float(size)
except ValueError:
    module.fail_json(msg=""Bad size specification of '%s'"" % size)
opts = module.params['opts']
state = module.params['state']
force = module.boolean(module.params['force'])
shrink = module.boolean(module.params['shrink'])
active = module.boolean(module.params['active'])
resizefs = module.boolean(module.params['resizefs'])
thinpool = module.params['thinpool']
size_opt = 'L'
size_unit = 'm'
snapshot = module.params['snapshot']
pvs = module.params['pvs']

if pvs is None:
    pvs = """"
else:
    pvs = pvs.replace("","", "" "")

if opts is None:
    opts = """"

# Add --test option when running in check-mode
if module.check_mode:
    test_opt = ' --test'
else:
    test_opt = ''

if size:
    # LVCREATE(8) -l --extents option with percentage
    if '%' in size:
        size_parts = size.split('%', 1)
        size_percent = int(size_parts[0])
        if size_percent > 100:
            module.fail_json(msg=""Size percentage cannot be larger than 100%"")
        size_whole = size_parts[1]
        if size_whole == 'ORIGIN':
            module.fail_json(msg=""Snapshot Volumes are not supported"")
        elif size_whole not in ['VG', 'PVS', 'FREE']:
            module.fail_json(msg=""Specify extents as a percentage of VG|PVS|FREE"")
        size_opt = 'l'
        size_unit = ''

    if '%' not in size:
        # LVCREATE(8) -L --size option unit
        if size[-1].lower() in 'bskmgtpe':
            size_unit = size[-1].lower()
            size = size[0:-1]

        try:
            float(size)
            if not size[0].isdigit():
                raise ValueError()
        except ValueError:
            module.fail_json(msg=""Bad size specification of '%s'"" % size)

# when no unit, megabytes by default
if size_opt == 'l':
    unit = 'm'
else:
    unit = size_unit

# Get information on volume group requested
vgs_cmd = module.get_bin_path(""vgs"", required=True)
rc, current_vgs, err = module.run_command(
    ""%s --noheadings -o vg_name,size,free,vg_extent_size --units %s --separator ';' %s"" % (vgs_cmd, unit, vg))

if rc != 0:
    if state == 'absent':
        module.exit_json(changed=False, stdout=""Volume group %s does not exist."" % vg)
    else:
        module.fail_json(msg=""Volume group %s does not exist."" % vg, rc=rc, err=err)

vgs = parse_vgs(current_vgs)
this_vg = vgs[0]

# Get information on logical volume requested
lvs_cmd = module.get_bin_path(""lvs"", required=True)
rc, current_lvs, err = module.run_command(
    ""%s -a --noheadings --nosuffix -o lv_name,size,lv_attr --units %s --separator ';' %s"" % (lvs_cmd, unit, vg))"
-------------------------------------------------------------------------
"""%s --noheadings --nosuffix -o vg_name,size,free,vg_extent_size --units %s --separator ';' %s"" % (vgs_cmd, unit, vg))
"
-------------------------------------------------------------------------
"Recom
PRs: 36811, 52836"
-------------------------------------------------------------------------
=========================================================================
"if locale.atof(size) > this_lv['size']:
elif shrink and locale.atof(size) < this_lv['size']:
    if locale.atof(size) == 0:
"
-------------------------------------------------------------------------
"import locale

    if locale.atof(size) > this_lv['size']:
        tool = AnsibleModule.get_bin_path(""lvextend"", required=True)
    elif shrink and locale.atof(size) < this_lv['size']:
        if locale.atof(size) == 0:"
-------------------------------------------------------------------------
"if float(size) > this_lv['size']:
elif shrink and float(size) < this_lv['size']:
    if float(size) == 0:
"
-------------------------------------------------------------------------
"Recom
PRs: 36811, 52836"
-------------------------------------------------------------------------
=========================================================================
"res = re.match(""""""GRANT (.) ON (.) TO (['`""]).*\\3@(['`""]).*\\4( IDENTIFIED BY PASSWORD (['`""]).\5)? ?(.*)"""""", grant[0])
if ""WITH GRANT OPTION"" in res.group(7):
if ""REQUIRE SSL"" in res.group(7):
"
-------------------------------------------------------------------------
"res = re.match(""GRANT (.+) ON (.+) TO \[''`]\.*@[''`]\.*( IDENTIFIED BY PASSWORD \[''`]\.\'')? ?(.*)"", grant[0])
if ""WITH GRANT OPTION"" in res.group(7):
if ""REQUIRE SSL"" in res.group(7):"
-------------------------------------------------------------------------
"res = re.match(""""""GRANT (.) ON (.) TO (['`""]).*\\3@(['`""]).*\\4( IDENTIFIED BY PASSWORD (['`""]).\\6)? ?(.*)"""""", grant[0])
if ""WITH GRANT OPTION"" in res.group(7):
if ""REQUIRE SSL"" in res.group(7):
"
-------------------------------------------------------------------------
"Recom
PRs: 40092, 51910"
-------------------------------------------------------------------------
=========================================================================
"res = re.match(""""""GRANT (.) ON (.) TO (['`""]).*\\3@(['`""]).*\\4( IDENTIFIED BY PASSWORD (['`""]).\5)? ?(.*)"""""", grant[0])
if ""WITH GRANT OPTION"" in res.group(7):
if ""REQUIRE SSL"" in res.group(7):
"
-------------------------------------------------------------------------
"output = {}
cursor.execute(""SHOW GRANTS FOR %s@%s"", (user, host))
grants = cursor.fetchall()

def pick(x):
    if x == 'ALL PRIVILEGES':
        return 'ALL'
    else:
        return x

for grant in grants:
    res = re.match(""GRANT (.+) ON (.+) TO (['`']).*\\3@(['`']).*\\4( IDENTIFIED BY PASSWORD (['`']).\5)? ?(.*)"", grant[0])
    if res is None:
        raise InvalidPrivsError('unable to parse the MySQL grant string: %s' % grant[0])
    privileges = res.group(1).split("", "")
    privileges = [pick(x) for x in privileges]
    if ""WITH GRANT OPTION"" in res.group(7):
        privileges.append('GRANT')
    if ""REQUIRE SSL"" in res.group(7):
        privileges.append('REQUIRESSL')
    db = res.group(2)
    output[db] = privileges
return output"
-------------------------------------------------------------------------
"res = re.match(""""""GRANT (.) ON (.) TO (['`""]).*\\3@(['`""]).*\\4( IDENTIFIED BY PASSWORD (['`""]).\\6)? ?(.*)"""""", grant[0])
if ""WITH GRANT OPTION"" in res.group(7):
if ""REQUIRE SSL"" in res.group(7):
"
-------------------------------------------------------------------------
"Recom
PRs: 40092, 51909"
-------------------------------------------------------------------------
=========================================================================
"from ansible.errors import (
    AnsibleAuthenticationFailure,
    AnsibleConnectionFailure,
    AnsibleError,
    AnsibleFileNotFound,
)
"
-------------------------------------------------------------------------
"from ansible.errors import (
    AnsibleConnectionFailure,
)"
-------------------------------------------------------------------------
"from ansible.errors import (
    AnsibleAuthenticationFailure,
    AnsibleConnectionFailure,
    AnsibleError,
    AnsibleFileNotFound,
)
from ansible.module_utils._text import to_bytes, to_native, to_text
"
-------------------------------------------------------------------------
"Recom
PRs: 50776, 51235"
-------------------------------------------------------------------------
=========================================================================
"if not differences.empty and self.parameters.force:
"
-------------------------------------------------------------------------
if not self.diff.empty and self.parameters.force:
-------------------------------------------------------------------------
"if differences and self.parameters.force:
"
-------------------------------------------------------------------------
"Recom
PRs: 50663, 50821"
-------------------------------------------------------------------------
=========================================================================
"if not differences.empty and self.parameters.force:
"
-------------------------------------------------------------------------
if not docker_errors.empty and self.parameters.force:
-------------------------------------------------------------------------
"if differences and self.parameters.force:
"
-------------------------------------------------------------------------
"Recom
PRs: 50663, 50820"
-------------------------------------------------------------------------
=========================================================================
"display.debug(""{action}: {desc} fail '{err}', retrying in {sleep:.4} seconds..."".format(
    action=self._task.action,
    desc=action_desc,
    err=error,
    sleep=fail_sleep))
utException('Timed out waiting for {desc} (timeout={timeout})'.format(desc=action_desc, timeout=reboot_timeout))
ot(self, task_vars, distribution):
mand = self.get_shutdown_command(task_vars, distribution)
mand_args = self.get_shutdown_command_args(distribution)
nd = '{0} {1}'.format(shutdown_command, shutdown_command_args)
vvv(""{action}: rebooting server..."".format(action=self._task.action))
debug(""{action}: rebooting server with command '{command}'"".format(action=self._task.action, command=reboot_command))
esult = self._low_level_execute_command(reboot_command, sudoable=self.DEFAULT_SUDOABLE)
debug('{action}: AnsibleConnectionFailure caught and handled: {error}'.format(action=self._task.action, error=to_native(e)))
"
-------------------------------------------------------------------------
"self._display.debug(""{action}: {desc} fail '{err}', retrying in {sleep:.4f} seconds..."".format(
    action=self._task.action,
    desc=action_desc,
    err=error,
    sleep=fail_sleep))
raise Exception('Timed out waiting for {desc} (timeout={timeout})'.format(desc=action_desc, timeout=reboot_timeout))
shutdown_command = self.get_shutdown_command(task_vars, distribution)
shutdown_command_args = self.get_shutdown_command_args(distribution)
command = '{0} {1}'.format(shutdown_command, shutdown_command_args)
self._display.vvv(""{action}: rebooting server..."".format(action=self._task.action))
self._display.debug(""{action}: rebooting server with command '{command}'"".format(action=self._task.action, command=reboot_command))
result = self._low_level_execute_command(command, sudoable=self.DEFAULT_SUDOABLE)
self._display.debug('{action}: AnsibleConnectionFailure caught and handled: {error}'.format(action=self._task.action, error=to_native(e)))"
-------------------------------------------------------------------------
"msg = 'Test command failed: {err} {out}'.format(
    err=to_native(command_result['stderr']),
    out=to_native(command_result['stdout']))
raise RuntimeError(msg)
lay.vvv(""{action}: system sucessfully rebooted"".format(action=self._task.action))
ntil_success_or_timeout(self, action, reboot_timeout, action_desc, distribution, action_kwargs=None):
ction_kwargs is None:
action_kwargs = {}
    action(distribution=distribution, **action_kwargs)
        display.debug('{action}: {desc} success'.format(action=self._task.action, desc=action_desc))
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"result['msg'] = ""Reboot command failed. Error was {stdout}, {stderr}"".format(
    stdout=to_native(reboot_result['stdout'].strip()),
    stderr=to_native(reboot_result['stderr'].strip()))
date_reboot(self, distribution, original_connection_timeout=None, action_kwargs=None):
lay.vvv('{action}: validating reboot'.format(action=self._task.action))
self.do_until_success_or_timeout(
    action=self.check_boot_time,
    action_desc=""last boot time check"",
    reboot_timeout=reboot_timeout,
    distribution=distribution,
    action_kwargs=action_kwargs)
if connect_timeout and original_connection_timeout:
        display.debug(""{action}: setting connect_timeout back to original value of {value}"".format(
            action=self._task.action,
            value=original_connection_timeout))
        self._connection.set_option(""connection_timeout"", original_connection_timeout)
        display.debug(""{action}: failed to reset connection_timeout back to default: {error}"".format(action=self._task.action, error=to_text(e)))
self.do_until_success_or_timeout(
    action=self.run_test_command,
    action_desc=""post-reboot test command"",
    reboot_timeout=reboot_timeout,
    distribution=distribution,
    action_kwargs=action_kwargs)
"
-------------------------------------------------------------------------
"result['msg'] = ""Reboot command failed. Error was {stdout}, {stderr}"".format(
    stdout=_text.to_native(reboot_result['stdout'].strip()),
    stderr=_text.to_native(reboot_result['stderr'].strip()))
utils.display.vvv('{action}: validating reboot'.format(action=self._task.action))
self.do_until_success_or_timeout(
    action=self.check_boot_time,
    action_desc=""last boot time check"",
    reboot_timeout=reboot_timeout,
    distribution=distribution,
    action_kwargs=action_kwargs)
if connect_timeout and original_connection_timeout:
    utils.display.debug(""{action}: setting connect_timeout back to original value of {value}"".format(
        action=self._task.action,
        value=original_connection_timeout))
    self._connection.set_option(""connection_timeout"", original_connection_timeout)
self.do_until_success_or_timeout(
    action=self.run_test_command,
    action_desc=""post-reboot test command"",
    reboot_timeout=reboot_timeout,
    distribution=distribution,
    action_kwargs=action_kwargs)"
-------------------------------------------------------------------------
"current_boot_time = self.get_system_boot_time(distribution)
en(current_boot_time) == 0 or current_boot_time == previous_boot_time:
raise ValueError(""boot time has not changed"")
test_command(self, distribution, **kwargs):
_command = self._task.args.get('test_command', self._get_value_from_facts('TEST_COMMANDS', distribution, 'DEFAULT_TEST_COMMAND'))
lay.vvv(""{action}: attempting post-reboot test command"".format(action=self._task.action))
lay.debug(""{action}: attempting post-reboot test command '{command}'"".format(action=self._task.action, command=test_command))
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"return {'changed': False, 'elapsed': 0, 'rebooted': False, 'failed': True, 'msg': msg}
return {'changed': True, 'elapsed': 0, 'rebooted': True}
task_vars = {}
"
-------------------------------------------------------------------------
"return {'changed': False, 'elapsed': 0, 'rebooted': False, 'failed': True, 'msg': msg}
return {'changed': True, 'elapsed': 0, 'rebooted': True, 'failed': False, 'msg': ''}
setup_task_vars = {}"
-------------------------------------------------------------------------
"current_boot_time = self.get_system_boot_time(distribution)
en(current_boot_time) == 0 or current_boot_time == previous_boot_time:
raise ValueError(""boot time has not changed"")
test_command(self, distribution, **kwargs):
_command = self._task.args.get('test_command', self._get_value_from_facts('TEST_COMMANDS', distribution, 'DEFAULT_TEST_COMMAND'))
lay.vvv(""{action}: attempting post-reboot test command"".format(action=self._task.action))
lay.debug(""{action}: attempting post-reboot test command '{command}'"".format(action=self._task.action, command=test_command))
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"distribution = self.get_distribution(task_vars)
    previous_boot_time = self.get_system_boot_time(distribution)
# Get the original connection_timeout option var so it can be reset after
original_connection_timeout = None
try:
    original_connection_timeout = self._connection.get_option('connection_timeout')
    display.debug(""{action}: saving original connect_timeout of {timeout}"".format(action=self._task.action, timeout=original_connection_timeout))
except AnsibleError:
    display.debug(""{action}: connect_timeout connection option has not been set"".format(action=self._task.action))
reboot_result = self.perform_reboot(task_vars, distribution)
"
-------------------------------------------------------------------------
"distribution = self.get_distribution(task_vars)
previous_boot_time = self.get_system_boot_time(distribution)

# Get the original connection_timeout option var so it can be reset after
original_connection_timeout = None
try:
    original_connection_timeout = self._connection.get_option('connection_timeout')
    display.debug(""{action}: saving original connection_timeout of {timeout}"".format(action=self._task.action, timeout=original_connection_timeout))
except AnsibleError:
    display.debug(""{action}: connection_timeout connection option has not been set"".format(action=self._task.action))

result = self.perform_reboot()"
-------------------------------------------------------------------------
"return {'changed': False, 'elapsed': 0, 'rebooted': False, 'failed': True, 'msg': msg}
return {'changed': True, 'elapsed': 0, 'rebooted': True}
task_vars = {}
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"if self.post_reboot_delay != 0:
    display.debug(""{action}: waiting an additional {delay} seconds"".format(action=self._task.action, delay=self.post_reboot_delay))
    display.vvv(""{action}: waiting an additional {delay} seconds"".format(action=self._task.action, delay=self.post_reboot_delay))
    time.sleep(self.post_reboot_delay)
result = self.validate_reboot(distribution, original_connection_timeout, action_kwargs={'previous_boot_time': previous_boot_time})
"
-------------------------------------------------------------------------
"if self.post_reboot_delay != 0:
    self._display.debug(""{action}: waiting an additional {delay} seconds"".format(action=self._task.action, delay=self.post_reboot_delay))
    self._display.vvv(""{action}: waiting an additional {delay} seconds"".format(action=self._task.action, delay=self.post_reboot_delay))
    time.sleep(self.post_reboot_delay)
result = self._validate_reboot(distribution, original_connection_timeout, action_kwargs={'previous_boot_time': previous_boot_time})"
-------------------------------------------------------------------------
"distribution = self.get_distribution(task_vars)
    previous_boot_time = self.get_system_boot_time(distribution)
# Get the original connection_timeout option var so it can be reset after
original_connection_timeout = None
try:
    original_connection_timeout = self._connection.get_option('connection_timeout')
    display.debug(""{action}: saving original connect_timeout of {timeout}"".format(action=self._task.action, timeout=original_connection_timeout))
except AnsibleError:
    display.debug(""{action}: connect_timeout connection option has not been set"".format(action=self._task.action))
reboot_result = self.perform_reboot(task_vars, distribution)
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"if len(split_fields) == 2 and split_fields[0:2] == ['iam', 'info_instanceprofilearn']:
    new_fields[self._prefix % ""iam-instance-profile-role""] = value.split('/')[1]
"
-------------------------------------------------------------------------
"if len(fields) == 2 and fields[:2] == ['iam', 'info_instanceprofilearn']:
    data[self._prefix % ""iam_instance_profile_role""] = value.split('/')[1]"
-------------------------------------------------------------------------
"# Parse out the IAM role name (which is _not_ the same as the instance profile name)
if len(split_fields) == 3 and split_fields[0:2] == ['iam', 'security-credentials'] and ':' not in split_fields[2]:
    new_fields[self._prefix % ""iam-instance-profile-role""] = split_fields[2]
"
-------------------------------------------------------------------------
"Recom
PRs: 45534, 49428"
-------------------------------------------------------------------------
=========================================================================
"if len(split_fields) == 2 and split_fields[0:2] == ['iam', 'info_instanceprofilearn']:
    new_fields[self._prefix % ""iam-instance-profile-role""] = value.split('/')[1]
"
-------------------------------------------------------------------------
"if len(fields) == 2 and fields[0:2] == ['iam', 'info_instanceprofilearn']:
    data[new_fields[self._prefix % ""iam_instance_profile_role""]] = value.split('/')[1]"
-------------------------------------------------------------------------
"# Parse out the IAM role name (which is _not_ the same as the instance profile name)
if len(split_fields) == 3 and split_fields[0:2] == ['iam', 'security-credentials'] and ':' not in split_fields[2]:
    new_fields[self._prefix % ""iam-instance-profile-role""] = split_fields[2]
"
-------------------------------------------------------------------------
"Recom
PRs: 45534, 49427"
-------------------------------------------------------------------------
=========================================================================
"#     value: ""{{ sample_com_challenge.challenge_data['sample.com']['dns-01'].resource_value | regex_replace('^(.*)$', '\""\\1\""') }}""
"
-------------------------------------------------------------------------
"value: ""{{ acme_challenge_data['sample.com']['dns-01'].resource_value | regex_replace('^(.*)$', '\""\\1\""') }}"""
-------------------------------------------------------------------------
"#     state: present
#     value: ""{{ sample_com_challenge.challenge_data['sample.com']['dns-01'].resource_value | regex_replace('^(.*)$', '\""\\1\""') }}""
"
-------------------------------------------------------------------------
"Recom
PRs: 49031, 49082"
-------------------------------------------------------------------------
=========================================================================
"#     value: ""{{ item.value | map('regex_replace', '^(.*)$', '\""\\1\""' ) | list }}""
"
-------------------------------------------------------------------------
"#     value: ""{{ item.value | map('regex_replace', '^(.*)$', '\""\\1\""' ) | list }}"""
-------------------------------------------------------------------------
"#     state: present
#     value: ""{{ item.value | map('regex_replace', '^(.*)$', '\""\\1\""' ) | list }}""
"
-------------------------------------------------------------------------
"Recom
PRs: 49031, 49082"
-------------------------------------------------------------------------
=========================================================================
"# Copyright (c) 2018 Cisco and/or its affiliates.
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#
from __future__ import absolute_import
import copy
import json
import unittest
import pytest
from units.compat import mock
from ansible.module_utils.network.ftd.common import FtdServerError, HTTPMethod, ResponseParams, FtdConfigurationError
from ansible.module_utils.network.ftd.configuration import DUPLICATE_NAME_ERROR_MESSAGE, UNPROCESSABLE_ENTITY_STATUS, \
    MULTIPLE_DUPLICATES_FOUND_ERROR, BaseConfigurationResource, FtdInvalidOperationNameError, QueryParams
from ansible.module_utils.network.ftd.fdm_swagger_client import ValidationError
ADD_RESPONSE = {'status': 'Object added'}
EDIT_RESPONSE = {'status': 'Object edited'}
DELETE_RESPONSE = {'status': 'Object deleted'}
GET_BY_FILTER_RESPONSE = [{'name': 'foo', 'description': 'bar'}]
ARBITRARY_RESPONSE = {'status': 'Arbitrary request sent'}
class TestUpsertOperationUnitTests(unittest.TestCase):
    def setUp(self):
        conn = mock.MagicMock()
        self._resource = BaseConfigurationResource(conn)
    def test_get_operation_name(self):
        operation_a = mock.MagicMock()
        operation_b = mock.MagicMock()
        def checker_wrapper(expected_object):
            def checker(obj, *args, **kwargs):
                return obj == expected_object
            return checker
        operations = {
            operation_a: ""spec"",
            operation_b: ""spec""
        }
        assert operation_a == self._resource._get_operation_name(checker_wrapper(operation_a), operations)
        assert operation_b == self._resource._get_operation_name(checker_wrapper(operation_b), operations)
        self.assertRaises(
            FtdConfigurationError,
            self._resource._get_operation_name, checker_wrapper(None), operations
        )
    @mock.patch.object(BaseConfigurationResource, ""_get_operation_name"")
    @mock.patch.object(BaseConfigurationResource, ""add_object"")
    def test_add_upserted_object(self, add_object_mock, get_operation_mock):
        model_operations = mock.MagicMock()
        params = mock.MagicMock()
        add_op_name = get_operation_mock.return_value
        assert add_object_mock.return_value == self._resource._add_upserted_object(model_operations, params)
        get_operation_mock.assert_called_once_with(
            self._resource._operation_checker.is_add_operation,
            model_operations)
        add_object_mock.assert_called_once_with(add_op_name, params)
    @mock.patch.object(BaseConfigurationResource, ""_get_operation_name"")
    @mock.patch.object(BaseConfigurationResource, ""edit_object"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration.copy_identity_properties"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._set_default"")
    def test_edit_upserted_object(self, _set_default_mock, copy_properties_mock, edit_object_mock, get_operation_mock):
        model_operations = mock.MagicMock()
        existing_object = mock.MagicMock()
        params = {
            'path_params': {},
            'data': {}
        }
        result = self._resource._edit_upserted_object(model_operations, existing_object, params)
        assert result == edit_object_mock.return_value
        _set_default_mock.assert_has_calls([
            mock.call(params, 'path_params', {}),
            mock.call(params, 'data', {})
        ])
        get_operation_mock.assert_called_once_with(
            self._resource._operation_checker.is_edit_operation,
            model_operations
        )
        copy_properties_mock.assert_called_once_with(
            existing_object,
            params['data']
        )
        edit_object_mock.assert_called_once_with(
            get_operation_mock.return_value,
            params
        )
    @mock.patch.object(BaseConfigurationResource, ""get_operation_specs_by_model_name"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration.OperationChecker.is_upsert_operation_supported"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._extract_model_from_upsert_operation"")
    def test_is_upsert_operation_supported(self, extract_model_mock, is_upsert_supported_mock, get_operation_spec_mock):
        op_name = mock.MagicMock()
        result = self._resource.is_upsert_operation_supported(op_name)
        assert result == is_upsert_supported_mock.return_value
        extract_model_mock.assert_called_once_with(op_name)
        get_operation_spec_mock.assert_called_once_with(extract_model_mock.return_value)
        is_upsert_supported_mock.assert_called_once_with(get_operation_spec_mock.return_value)
    @mock.patch.object(BaseConfigurationResource, ""is_upsert_operation_supported"")
    @mock.patch.object(BaseConfigurationResource, ""get_operation_specs_by_model_name"")
    @mock.patch.object(BaseConfigurationResource, ""_add_upserted_object"")
    @mock.patch.object(BaseConfigurationResource, ""_edit_upserted_object"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._extract_model_from_upsert_operation"")
    def test_upsert_object_succesfully_added(self, extract_model_mock, edit_mock, add_mock, get_operation_mock,
                                             is_upsert_supported_mock):
        op_name = mock.MagicMock()
        params = mock.MagicMock()
        is_upsert_supported_mock.return_value = True
        result = self._resource.upsert_object(op_name, params)
        assert result == add_mock.return_value
        is_upsert_supported_mock.assert_called_once_with(op_name)
        extract_model_mock.assert_called_once_with(op_name)
        get_operation_mock.assert_called_once_with(extract_model_mock.return_value)
        add_mock.assert_called_once_with(get_operation_mock.return_value, params)
        edit_mock.assert_not_called()
    @mock.patch.object(BaseConfigurationResource, ""is_upsert_operation_supported"")
    @mock.patch.object(BaseConfigurationResource, ""get_operation_specs_by_model_name"")
    @mock.patch.object(BaseConfigurationResource, ""_add_upserted_object"")
    @mock.patch.object(BaseConfigurationResource, ""_edit_upserted_object"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._extract_model_from_upsert_operation"")
    def test_upsert_object_succesfully_edited(self, extract_model_mock, edit_mock, add_mock, get_operation_mock,
                                              is_upsert_supported_mock):
        op_name = mock.MagicMock()
        params = mock.MagicMock()
        is_upsert_supported_mock.return_value = True
        error = FtdConfigurationError(""Obj duplication error"")
        error.obj = mock.MagicMock()
        add_mock.side_effect = error
        result = self._resource.upsert_object(op_name, params)
        assert result == edit_mock.return_value
        is_upsert_supported_mock.assert_called_once_with(op_name)
        extract_model_mock.assert_called_once_with(op_name)
        get_operation_mock.assert_called_once_with(extract_model_mock.return_value)
        add_mock.assert_called_once_with(get_operation_mock.return_value, params)
        edit_mock.assert_called_once_with(get_operation_mock.return_value, error.obj, params)
    @mock.patch.object(BaseConfigurationResource, ""is_upsert_operation_supported"")
    @mock.patch.object(BaseConfigurationResource, ""get_operation_specs_by_model_name"")
    @mock.patch.object(BaseConfigurationResource, ""_add_upserted_object"")
    @mock.patch.object(BaseConfigurationResource, ""_edit_upserted_object"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._extract_model_from_upsert_operation"")
    def test_upsert_object_not_supported(self, extract_model_mock, edit_mock, add_mock, get_operation_mock,
                                         is_upsert_supported_mock):
        op_name = mock.MagicMock()
        params = mock.MagicMock()
        is_upsert_supported_mock.return_value = False
        self.assertRaises(
            FtdInvalidOperationNameError,
            self._resource.upsert_object, op_name, params
        )
        is_upsert_supported_mock.assert_called_once_with(op_name)
        extract_model_mock.assert_not_called()
        get_operation_mock.assert_not_called()
        add_mock.assert_not_called()
        edit_mock.assert_not_called()
    @mock.patch.object(BaseConfigurationResource, ""is_upsert_operation_supported"")
    @mock.patch.object(BaseConfigurationResource, ""get_operation_specs_by_model_name"")
    @mock.patch.object(BaseConfigurationResource, ""_add_upserted_object"")
    @mock.patch.object(BaseConfigurationResource, ""_edit_upserted_object"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._extract_model_from_upsert_operation"")
    def test_upsert_object_neither_added_nor_edited(self, extract_model_mock, edit_mock, add_mock, get_operation_mock,
                                                    is_upsert_supported_mock):
        op_name = mock.MagicMock()
        params = mock.MagicMock()
        is_upsert_supported_mock.return_value = True
        error = FtdConfigurationError(""Obj duplication error"")
        error.obj = mock.MagicMock()
        add_mock.side_effect = error
        edit_mock.side_effect = FtdConfigurationError(""Some object edit error"")
        self.assertRaises(
            FtdConfigurationError,
            self._resource.upsert_object, op_name, params
        )
        is_upsert_supported_mock.assert_called_once_with(op_name)
        extract_model_mock.assert_called_once_with(op_name)
        get_operation_mock.assert_called_once_with(extract_model_mock.return_value)
        add_mock.assert_called_once_with(get_operation_mock.return_value, params)
        edit_mock.assert_called_once_with(get_operation_mock.return_value, error.obj, params)
    @mock.patch.object(BaseConfigurationResource, ""is_upsert_operation_supported"")
    @mock.patch.object(BaseConfigurationResource, ""get_operation_specs_by_model_name"")
    @mock.patch.object(BaseConfigurationResource, ""_add_upserted_object"")
    @mock.patch.object(BaseConfigurationResource, ""_edit_upserted_object"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._extract_model_from_upsert_operation"")
    def test_upsert_object_with_fatal_error_during_add(self, extract_model_mock, edit_mock, add_mock,
                                                       get_operation_mock, is_upsert_supported_mock):
        op_name = mock.MagicMock()
        params = mock.MagicMock()
        is_upsert_supported_mock.return_value = True
        error = FtdConfigurationError(""Obj duplication error"")
        add_mock.side_effect = error
        self.assertRaises(
            FtdConfigurationError,
            self._resource.upsert_object, op_name, params
        )
        is_upsert_supported_mock.assert_called_once_with(op_name)
        extract_model_mock.assert_called_once_with(op_name)
        get_operation_mock.assert_called_once_with(extract_model_mock.return_value)
        add_mock.assert_called_once_with(get_operation_mock.return_value, params)
        edit_mock.assert_not_called()
# functional tests below
class TestUpsertOperationFunctionalTests(object):
    @pytest.fixture(autouse=True)
    def connection_mock(self, mocker):
        connection_class_mock = mocker.patch('ansible.modules.network.ftd.ftd_configuration.Connection')
        connection_instance = connection_class_mock.return_value
        connection_instance.validate_data.return_value = True, None
        connection_instance.validate_query_params.return_value = True, None
        connection_instance.validate_path_params.return_value = True, None
        return connection_instance
    def test_module_should_create_object_when_upsert_operation_and_object_does_not_exist(self, connection_mock):
        url = '/test'
        operations = {
            'getObjectList': {
                'method': HTTPMethod.GET,
                'url': url,
                'modelName': 'Object',
                'returnMultipleItems': True},
            'addObject': {
                'method': HTTPMethod.POST,
                'modelName': 'Object',
                'url': url},
            'editObject': {
                'method': HTTPMethod.PUT,
                'modelName': 'Object',
                'url': '/test/{objId}'},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': '/test/{objId}',
                'returnMultipleItems': False
            }
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        connection_mock.send_request.return_value = {
            ResponseParams.SUCCESS: True,
            ResponseParams.RESPONSE: ADD_RESPONSE
        }
        params = {
            'operation': 'upsertObject',
            'data': {'id': '123', 'name': 'testObject', 'type': 'object'},
            'path_params': {'objId': '123'},
            'register_as': 'test_var'
        }
        result = self._resource_execute_operation(params, connection=connection_mock)
        connection_mock.send_request.assert_called_once_with(url_path=url,
                                                             http_method=HTTPMethod.POST,
                                                             path_params=params['path_params'],
                                                             query_params={},
                                                             body_params=params['data'])
        assert ADD_RESPONSE == result
    # test when object exists but with different fields(except id)
    def test_module_should_update_object_when_upsert_operation_and_object_exists(self, connection_mock):
        url = '/test'
        obj_id = '456'
        version = 'test_version'
        url_with_id_templ = '{0}/{1}'.format(url, '{objId}')
        new_value = '0000'
        old_value = '1111'
        params = {
            'operation': 'upsertObject',
            'data': {'name': 'testObject', 'value': new_value, 'type': 'object'},
            'register_as': 'test_var'
        }
        def request_handler(url_path=None, http_method=None, body_params=None, path_params=None, query_params=None):
            if http_method == HTTPMethod.POST:
                assert url_path == url
                assert body_params == params['data']
                assert query_params == {}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: False,
                    ResponseParams.RESPONSE: DUPLICATE_NAME_ERROR_MESSAGE,
                    ResponseParams.STATUS_CODE: UNPROCESSABLE_ENTITY_STATUS
                }
            elif http_method == HTTPMethod.GET:
                is_get_list_req = url_path == url
                is_get_req = url_path == url_with_id_templ
                assert is_get_req or is_get_list_req
                if is_get_list_req:
                    assert body_params == {}
                    assert query_params == {QueryParams.FILTER: 'name:testObject', 'limit': 10, 'offset': 0}
                    assert path_params == {}
                elif is_get_req:
                    assert body_params == {}
                    assert query_params == {}
                    assert path_params == {'objId': obj_id}
                return {
                    ResponseParams.SUCCESS: True,
                    ResponseParams.RESPONSE: {
                        'items': [
                            {'name': 'testObject', 'value': old_value, 'type': 'object', 'id': obj_id,
                             'version': version}
                        ]
                    }
                }
            elif http_method == HTTPMethod.PUT:
                assert url_path == url_with_id_templ
                return {
                    ResponseParams.SUCCESS: True,
                    ResponseParams.RESPONSE: body_params
                }
            else:
                assert False
        operations = {
            'getObjectList': {'method': HTTPMethod.GET, 'url': url, 'modelName': 'Object', 'returnMultipleItems': True},
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': url},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': url_with_id_templ},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': url_with_id_templ,
                'returnMultipleItems': False}
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        connection_mock.send_request = request_handler
        expected_val = {'name': 'testObject', 'value': new_value, 'type': 'object', 'id': obj_id, 'version': version}
        result = self._resource_execute_operation(params, connection=connection_mock)
        assert expected_val == result
    # test when object exists and all fields have the same value
    def test_module_should_not_update_object_when_upsert_operation_and_object_exists_with_the_same_fields(
            self, connection_mock):
        url = '/test'
        url_with_id_templ = '{0}/{1}'.format(url, '{objId}')
        params = {
            'operation': 'upsertObject',
            'data': {'name': 'testObject', 'value': '3333', 'type': 'object'},
            'register_as': 'test_var'
        }
        expected_val = copy.deepcopy(params['data'])
        expected_val['version'] = 'test_version'
        expected_val['id'] = 'test_id'
        def request_handler(url_path=None, http_method=None, body_params=None, path_params=None, query_params=None):
            if http_method == HTTPMethod.POST:
                assert url_path == url
                assert body_params == params['data']
                assert query_params == {}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: False,
                    ResponseParams.RESPONSE: DUPLICATE_NAME_ERROR_MESSAGE,
                    ResponseParams.STATUS_CODE: UNPROCESSABLE_ENTITY_STATUS
                }
            elif http_method == HTTPMethod.GET:
                assert url_path == url
                assert body_params == {}
                assert query_params == {QueryParams.FILTER: 'name:testObject', 'limit': 10, 'offset': 0}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: True,
                    ResponseParams.RESPONSE: {
                        'items': [expected_val]
                    }
                }
            else:
                assert False
        operations = {
            'getObjectList': {'method': HTTPMethod.GET, 'modelName': 'Object', 'url': url, 'returnMultipleItems': True},
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': url},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': url_with_id_templ},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': url_with_id_templ,
                'returnMultipleItems': False}
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        connection_mock.send_request = request_handler
        result = self._resource_execute_operation(params, connection=connection_mock)
        assert expected_val == result
    def test_module_should_fail_when_upsert_operation_is_not_supported(self, connection_mock):
        connection_mock.get_operation_specs_by_model_name.return_value = {
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': '/test'},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': '/test/{objId}'},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': '/test/{objId}',
                'returnMultipleItems': False}
        }
        operation_name = 'upsertObject'
        params = {
            'operation': operation_name,
            'data': {'id': '123', 'name': 'testObject', 'type': 'object'},
            'path_params': {'objId': '123'},
            'register_as': 'test_var'
        }
        result = self._resource_execute_operation_with_expected_failure(
            expected_exception_class=FtdInvalidOperationNameError,
            params=params, connection=connection_mock)
        connection_mock.send_request.assert_not_called()
        assert operation_name == result.operation_name
    # when create operation raised FtdConfigurationError exception without id and version
    def test_module_should_fail_when_upsert_operation_and_failed_create_without_id_and_version(self, connection_mock):
        url = '/test'
        url_with_id_templ = '{0}/{1}'.format(url, '{objId}')
        params = {
            'operation': 'upsertObject',
            'data': {'name': 'testObject', 'value': '3333', 'type': 'object'},
            'register_as': 'test_var'
        }
        def request_handler(url_path=None, http_method=None, body_params=None, path_params=None, query_params=None):
            if http_method == HTTPMethod.POST:
                assert url_path == url
                assert body_params == params['data']
                assert query_params == {}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: False,
                    ResponseParams.RESPONSE: DUPLICATE_NAME_ERROR_MESSAGE,
                    ResponseParams.STATUS_CODE: UNPROCESSABLE_ENTITY_STATUS
                }
            elif http_method == HTTPMethod.GET:
                assert url_path == url
                assert body_params == {}
                assert query_params == {QueryParams.FILTER: 'name:testObject', 'limit': 10, 'offset': 0}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: True,
                    ResponseParams.RESPONSE: {
                        'items': []
                    }
                }
            else:
                assert False
        operations = {
            'getObjectList': {'method': HTTPMethod.GET, 'modelName': 'Object', 'url': url, 'returnMultipleItems': True},
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': url},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': url_with_id_templ},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': url_with_id_templ,
                'returnMultipleItems': False}
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        connection_mock.send_request = request_handler
        result = self._resource_execute_operation_with_expected_failure(
            expected_exception_class=FtdServerError,
            params=params, connection=connection_mock)
        assert result.code == 422
        assert result.response == 'Validation failed due to a duplicate name'
    def test_module_should_fail_when_upsert_operation_and_failed_update_operation(self, connection_mock):
        url = '/test'
        obj_id = '456'
        version = 'test_version'
        url_with_id_templ = '{0}/{1}'.format(url, '{objId}')
        error_code = 404
        new_value = '0000'
        old_value = '1111'
        params = {
            'operation': 'upsertObject',
            'data': {'name': 'testObject', 'value': new_value, 'type': 'object'},
            'register_as': 'test_var'
        }
        error_msg = 'test error'
        def request_handler(url_path=None, http_method=None, body_params=None, path_params=None, query_params=None):
            if http_method == HTTPMethod.POST:
                assert url_path == url
                assert body_params == params['data']
                assert query_params == {}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: False,
                    ResponseParams.RESPONSE: DUPLICATE_NAME_ERROR_MESSAGE,
                    ResponseParams.STATUS_CODE: UNPROCESSABLE_ENTITY_STATUS
                }
            elif http_method == HTTPMethod.GET:
                is_get_list_req = url_path == url
                is_get_req = url_path == url_with_id_templ
                assert is_get_req or is_get_list_req
                if is_get_list_req:
                    assert body_params == {}
                    assert query_params == {QueryParams.FILTER: 'name:testObject', 'limit': 10, 'offset': 0}
                elif is_get_req:
                    assert body_params == {}
                    assert query_params == {}
                    assert path_params == {'objId': obj_id}
                return {
                    ResponseParams.SUCCESS: True,
                    ResponseParams.RESPONSE: {
                        'items': [
                            {'name': 'testObject', 'value': old_value, 'type': 'object', 'id': obj_id,
                             'version': version}
                        ]
                    }
                }
            elif http_method == HTTPMethod.PUT:
                assert url_path == url_with_id_templ
                raise FtdServerError(error_msg, error_code)
            else:
                assert False
        operations = {
            'getObjectList': {'method': HTTPMethod.GET, 'modelName': 'Object', 'url': url, 'returnMultipleItems': True},
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': url},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': url_with_id_templ},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': url_with_id_templ,
                'returnMultipleItems': False}
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        connection_mock.send_request = request_handler
        result = self._resource_execute_operation_with_expected_failure(
            expected_exception_class=FtdServerError,
            params=params, connection=connection_mock)
        assert result.code == error_code
        assert result.response == error_msg
    def test_module_should_fail_when_upsert_operation_and_invalid_data_for_create_operation(self, connection_mock):
        new_value = '0000'
        params = {
            'operation': 'upsertObject',
            'data': {'name': 'testObject', 'value': new_value, 'type': 'object'},
            'register_as': 'test_var'
        }
        connection_mock.send_request.assert_not_called()
        operations = {
            'getObjectList': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': 'sd',
                'returnMultipleItems': True},
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': 'sdf'},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': 'sadf'},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': 'sdfs',
                'returnMultipleItems': False}
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        report = {
            'required': ['objects[0].type'],
            'invalid_type': [
                {
                    'path': 'objects[3].id',
                    'expected_type': 'string',
                    'actually_value': 1
                }
            ]
        }
        connection_mock.validate_data.return_value = (False, json.dumps(report, sort_keys=True, indent=4))
        key = 'Invalid data provided'
        result = self._resource_execute_operation_with_expected_failure(
            expected_exception_class=ValidationError,
            params=params, connection=connection_mock)
        assert len(result.args) == 1
        assert key in result.args[0]
        assert json.loads(result.args[0][key]) == {
            'invalid_type': [{'actually_value': 1, 'expected_type': 'string', 'path': 'objects[3].id'}],
            'required': ['objects[0].type']
        }
    def test_module_should_fail_when_upsert_operation_and_few_objects_found_by_filter(self, connection_mock):
        url = '/test'
        url_with_id_templ = '{0}/{1}'.format(url, '{objId}')
        sample_obj = {'name': 'testObject', 'value': '3333', 'type': 'object'}
        params = {
            'operation': 'upsertObject',
            'data': sample_obj,
            'register_as': 'test_var'
        }
        def request_handler(url_path=None, http_method=None, body_params=None, path_params=None, query_params=None):
            if http_method == HTTPMethod.POST:
                assert url_path == url
                assert body_params == params['data']
                assert query_params == {}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: False,
                    ResponseParams.RESPONSE: DUPLICATE_NAME_ERROR_MESSAGE,
                    ResponseParams.STATUS_CODE: UNPROCESSABLE_ENTITY_STATUS
                }
            elif http_method == HTTPMethod.GET:
                assert url_path == url
                assert body_params == {}
                assert query_params == {QueryParams.FILTER: 'name:testObject', 'limit': 10, 'offset': 0}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: True,
                    ResponseParams.RESPONSE: {
                        'items': [sample_obj, sample_obj]
                    }
                }
            else:
                assert False
        operations = {
            'getObjectList': {'method': HTTPMethod.GET, 'modelName': 'Object', 'url': url, 'returnMultipleItems': True},
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': url},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': url_with_id_templ},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': url_with_id_templ,
                'returnMultipleItems': False}
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        connection_mock.send_request = request_handler
        result = self._resource_execute_operation_with_expected_failure(
            expected_exception_class=FtdConfigurationError,
            params=params, connection=connection_mock)
        assert result.msg is MULTIPLE_DUPLICATES_FOUND_ERROR
        assert result.obj is None
    @staticmethod
    def _resource_execute_operation(params, connection):
        resource = BaseConfigurationResource(connection)
        op_name = params['operation']
        resp = resource.execute_operation(op_name, params)
        return resp
    def _resource_execute_operation_with_expected_failure(self, expected_exception_class, params, connection):
        with pytest.raises(expected_exception_class) as ex:
            self._resource_execute_operation(params, connection)
        # 'ex' here is the instance of '_pytest._code.code.ExceptionInfo' but not <expected_exception_class>
        # actual instance of <expected_exception_class> is in the value attribute of 'ex'. That's why we should return
        # 'ex.value' here, so it can be checked in a test later.
        return ex.value
"
-------------------------------------------------------------------------
"from __future__ import absolute_import
import copy
import json
import unittest
import pytest
import os
from ansible.module_utils.six.moves.urllib.error import HTTPError
from ansible.compat.tests import unittest, mock
from ansible.errors import AnsibleError
from ansible.module_utils.network.ftd.common import FtdServerError, HTTPMethod, ResponseParams, FtdConfigurationError, ValidationError
from ansible.module_utils.network.ftd.configuration import DUPLICATE_NAME_ERROR_MESSAGE, UNPROCESSABLE_ENTITY_STATUS, QueryParams, BaseConfigurationResource, FtdInvalidOperationNameError
from ansible.module_utils.network.ftd.fdm_swagger_client import ValidationError

ADD_RESPONSE = {'status': 'Object added'}
EDIT_RESPONSE = {'status': 'Object edited'}
DELETE_RESPONSE = {'status': 'Object deleted'}
GET_BY_FILTER_RESPONSE = [{'name': 'foo', 'description': 'bar'}]
ARBITRARY_RESPONSE = {'status': 'Arbitrary request sent'}

class TestUpsertOperationUnitTests(unittest.TestCase):
    def setUp(self):
        conn = mock.MagicMock()
        self._resource = BaseConfigurationResource(conn)

    def test_get_operation_name(self):
        operation_a = mock.MagicMock()
        operation_b = mock.MagicMock()

        def checker_wrapper(expected_object):
            def checker(obj, *args, **kwargs):
                return obj == expected_object
            return checker

        operations = {
            operation_a: ""spec"",
            operation_b: ""spec""
        }

        assert operation_a == self._resource._get_operation_name(checker_wrapper(operation_a), operations)
        assert operation_b == self._resource._get_operation_name(checker_wrapper(operation_b), operations)

        self.assertRaises(
            FtdConfigurationError,
            self._resource._get_operation_name, checker_wrapper(None), operations
        )

    @mock.patch.object(BaseConfigurationResource, ""_get_operation_name"")
    @mock.patch.object(BaseConfigurationResource, ""add_object"")
    def test_add_upserted_object(self, add_object_mock, get_operation_mock):
        model_operations = mock.MagicMock()
        params = mock.MagicMock()
        add_op_name = get_operation_mock.return_value

        assert add_object_mock.return_value == self._resource._add_upserted_object(model_operations, params)
        get_operation_mock.assert_called_once_with(
            self._resource._operation_checker.is_add_operation,
            model_operations
        )
        add_object_mock.assert_called_once_with(add_op_name, params)

    @mock.patch.object(BaseConfigurationResource, ""_get_operation_name"")
    @mock.patch.object(BaseConfigurationResource, ""edit_object"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration.copy_identity_properties"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._set_default"")
    def test_edit_upserted_object(self, _set_default_mock, copy_properties_mock, edit_object_mock, get_operation_mock):
        model_operations = mock.MagicMock()
        existing_object = mock.MagicMock()
        params = {
            'path_params': {},
            'data': {}
        }

        result = self._resource._edit_upserted_object(model_operations, existing_object, params)
        assert result == edit_object_mock.return_value

        _set_default_mock.assert_has_calls([
            mock.call(params, 'path_params', {}),
            mock.call(params, 'data', {})
        ])
        get_operation_mock.assert_called_once_with(
            self._resource._operation_checker.is_edit_operation,
            model_operations
        )
        copy_properties_mock.assert_called_once_with(
            existing_object,
            params['data']
        )
        edit_object_mock.assert_called_once_with(
            get_operation_mock.return_value,
            params
        )

    ...

# Functional tests below
class TestUpsertOperationFunctionalTests(object):
    ...

    def test_module_should_fail_when_upsert_operation_and_invalid_data_for_create_operation(self, connection_mock):
        new_value = '0000'
        params = {
            'operation': 'upsertObject',
            'data': {'name': 'testObject', 'value': new_value, 'type': 'object'},
            'register_as': 'test_var'
        }

        connection_mock.send_request.assert_not_called()

        operations = {
            'getObjectList': {'method': HTTPMethod.GET, 'modelName': 'Object', 'url': 'sd', 'returnMultipleItems': True},
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': 'sdf'},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': 'sadf'},
            'otherObjectOperation': {'method': HTTPMethod.GET, 'modelName': 'Object', 'url': 'sdfs', 'returnMultipleItems': False}
        }

        def get_operation_spec(name):
            return operations[name]

        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations

        report = {
            'required': ['objects[0].type'],
            'invalid_type': [
                {
                    'path': 'objects[3].id',
                    'expected_type': 'string',
                    'actually_value': 1
                }
            ]
        }

        connection_mock.validate_data.return_value = (False, json.dumps(report, sort_keys=True, indent=4))

        key = 'Invalid data provided'
        result = self._resource_execute_operation_with_expected_failure(expected_exception_class=ValidationError, params=params, connection=connection_mock)

        assert len(result.args) == 1
        assert key in result.args[0]
        assert json.loads(result.args[0][key]) == {
            'invalid_type': [{'actually_value': 1, 'expected_type': 'string', 'path': 'objects[3].id'}],
            'required': ['objects[0].type']
        }

    ..."
-------------------------------------------------------------------------
"# Copyright (c) 2018 Cisco and/or its affiliates.
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#
from __future__ import absolute_import
import copy
import json
import unittest
import pytest
from ansible.compat.tests import mock
from ansible.module_utils.network.ftd.common import FtdServerError, HTTPMethod, ResponseParams, FtdConfigurationError
from ansible.module_utils.network.ftd.configuration import DUPLICATE_NAME_ERROR_MESSAGE, UNPROCESSABLE_ENTITY_STATUS, \
    MULTIPLE_DUPLICATES_FOUND_ERROR, BaseConfigurationResource, FtdInvalidOperationNameError, QueryParams
from ansible.module_utils.network.ftd.fdm_swagger_client import ValidationError
ADD_RESPONSE = {'status': 'Object added'}
EDIT_RESPONSE = {'status': 'Object edited'}
DELETE_RESPONSE = {'status': 'Object deleted'}
GET_BY_FILTER_RESPONSE = [{'name': 'foo', 'description': 'bar'}]
ARBITRARY_RESPONSE = {'status': 'Arbitrary request sent'}
class TestUpsertOperationUnitTests(unittest.TestCase):
    def setUp(self):
        conn = mock.MagicMock()
        self._resource = BaseConfigurationResource(conn)
    def test_get_operation_name(self):
        operation_a = mock.MagicMock()
        operation_b = mock.MagicMock()
        def checker_wrapper(expected_object):
            def checker(obj, *args, **kwargs):
                return obj == expected_object
            return checker
        operations = {
            operation_a: ""spec"",
            operation_b: ""spec""
        }
        assert operation_a == self._resource._get_operation_name(checker_wrapper(operation_a), operations)
        assert operation_b == self._resource._get_operation_name(checker_wrapper(operation_b), operations)
        self.assertRaises(
            FtdConfigurationError,
            self._resource._get_operation_name, checker_wrapper(None), operations
        )
    @mock.patch.object(BaseConfigurationResource, ""_get_operation_name"")
    @mock.patch.object(BaseConfigurationResource, ""add_object"")
    def test_add_upserted_object(self, add_object_mock, get_operation_mock):
        model_operations = mock.MagicMock()
        params = mock.MagicMock()
        add_op_name = get_operation_mock.return_value
        assert add_object_mock.return_value == self._resource._add_upserted_object(model_operations, params)
        get_operation_mock.assert_called_once_with(
            self._resource._operation_checker.is_add_operation,
            model_operations)
        add_object_mock.assert_called_once_with(add_op_name, params)
    @mock.patch.object(BaseConfigurationResource, ""_get_operation_name"")
    @mock.patch.object(BaseConfigurationResource, ""edit_object"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration.copy_identity_properties"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._set_default"")
    def test_edit_upserted_object(self, _set_default_mock, copy_properties_mock, edit_object_mock, get_operation_mock):
        model_operations = mock.MagicMock()
        existing_object = mock.MagicMock()
        params = {
            'path_params': {},
            'data': {}
        }
        result = self._resource._edit_upserted_object(model_operations, existing_object, params)
        assert result == edit_object_mock.return_value
        _set_default_mock.assert_has_calls([
            mock.call(params, 'path_params', {}),
            mock.call(params, 'data', {})
        ])
        get_operation_mock.assert_called_once_with(
            self._resource._operation_checker.is_edit_operation,
            model_operations
        )
        copy_properties_mock.assert_called_once_with(
            existing_object,
            params['data']
        )
        edit_object_mock.assert_called_once_with(
            get_operation_mock.return_value,
            params
        )
    @mock.patch.object(BaseConfigurationResource, ""get_operation_specs_by_model_name"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration.OperationChecker.is_upsert_operation_supported"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._extract_model_from_upsert_operation"")
    def test_is_upsert_operation_supported(self, extract_model_mock, is_upsert_supported_mock, get_operation_spec_mock):
        op_name = mock.MagicMock()
        result = self._resource.is_upsert_operation_supported(op_name)
        assert result == is_upsert_supported_mock.return_value
        extract_model_mock.assert_called_once_with(op_name)
        get_operation_spec_mock.assert_called_once_with(extract_model_mock.return_value)
        is_upsert_supported_mock.assert_called_once_with(get_operation_spec_mock.return_value)
    @mock.patch.object(BaseConfigurationResource, ""is_upsert_operation_supported"")
    @mock.patch.object(BaseConfigurationResource, ""get_operation_specs_by_model_name"")
    @mock.patch.object(BaseConfigurationResource, ""_add_upserted_object"")
    @mock.patch.object(BaseConfigurationResource, ""_edit_upserted_object"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._extract_model_from_upsert_operation"")
    def test_upsert_object_succesfully_added(self, extract_model_mock, edit_mock, add_mock, get_operation_mock,
                                             is_upsert_supported_mock):
        op_name = mock.MagicMock()
        params = mock.MagicMock()
        is_upsert_supported_mock.return_value = True
        result = self._resource.upsert_object(op_name, params)
        assert result == add_mock.return_value
        is_upsert_supported_mock.assert_called_once_with(op_name)
        extract_model_mock.assert_called_once_with(op_name)
        get_operation_mock.assert_called_once_with(extract_model_mock.return_value)
        add_mock.assert_called_once_with(get_operation_mock.return_value, params)
        edit_mock.assert_not_called()
    @mock.patch.object(BaseConfigurationResource, ""is_upsert_operation_supported"")
    @mock.patch.object(BaseConfigurationResource, ""get_operation_specs_by_model_name"")
    @mock.patch.object(BaseConfigurationResource, ""_add_upserted_object"")
    @mock.patch.object(BaseConfigurationResource, ""_edit_upserted_object"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._extract_model_from_upsert_operation"")
    def test_upsert_object_succesfully_edited(self, extract_model_mock, edit_mock, add_mock, get_operation_mock,
                                              is_upsert_supported_mock):
        op_name = mock.MagicMock()
        params = mock.MagicMock()
        is_upsert_supported_mock.return_value = True
        error = FtdConfigurationError(""Obj duplication error"")
        error.obj = mock.MagicMock()
        add_mock.side_effect = error
        result = self._resource.upsert_object(op_name, params)
        assert result == edit_mock.return_value
        is_upsert_supported_mock.assert_called_once_with(op_name)
        extract_model_mock.assert_called_once_with(op_name)
        get_operation_mock.assert_called_once_with(extract_model_mock.return_value)
        add_mock.assert_called_once_with(get_operation_mock.return_value, params)
        edit_mock.assert_called_once_with(get_operation_mock.return_value, error.obj, params)
    @mock.patch.object(BaseConfigurationResource, ""is_upsert_operation_supported"")
    @mock.patch.object(BaseConfigurationResource, ""get_operation_specs_by_model_name"")
    @mock.patch.object(BaseConfigurationResource, ""_add_upserted_object"")
    @mock.patch.object(BaseConfigurationResource, ""_edit_upserted_object"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._extract_model_from_upsert_operation"")
    def test_upsert_object_not_supported(self, extract_model_mock, edit_mock, add_mock, get_operation_mock,
                                         is_upsert_supported_mock):
        op_name = mock.MagicMock()
        params = mock.MagicMock()
        is_upsert_supported_mock.return_value = False
        self.assertRaises(
            FtdInvalidOperationNameError,
            self._resource.upsert_object, op_name, params
        )
        is_upsert_supported_mock.assert_called_once_with(op_name)
        extract_model_mock.assert_not_called()
        get_operation_mock.assert_not_called()
        add_mock.assert_not_called()
        edit_mock.assert_not_called()
    @mock.patch.object(BaseConfigurationResource, ""is_upsert_operation_supported"")
    @mock.patch.object(BaseConfigurationResource, ""get_operation_specs_by_model_name"")
    @mock.patch.object(BaseConfigurationResource, ""_add_upserted_object"")
    @mock.patch.object(BaseConfigurationResource, ""_edit_upserted_object"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._extract_model_from_upsert_operation"")
    def test_upsert_object_neither_added_nor_edited(self, extract_model_mock, edit_mock, add_mock, get_operation_mock,
                                                    is_upsert_supported_mock):
        op_name = mock.MagicMock()
        params = mock.MagicMock()
        is_upsert_supported_mock.return_value = True
        error = FtdConfigurationError(""Obj duplication error"")
        error.obj = mock.MagicMock()
        add_mock.side_effect = error
        edit_mock.side_effect = FtdConfigurationError(""Some object edit error"")
        self.assertRaises(
            FtdConfigurationError,
            self._resource.upsert_object, op_name, params
        )
        is_upsert_supported_mock.assert_called_once_with(op_name)
        extract_model_mock.assert_called_once_with(op_name)
        get_operation_mock.assert_called_once_with(extract_model_mock.return_value)
        add_mock.assert_called_once_with(get_operation_mock.return_value, params)
        edit_mock.assert_called_once_with(get_operation_mock.return_value, error.obj, params)
    @mock.patch.object(BaseConfigurationResource, ""is_upsert_operation_supported"")
    @mock.patch.object(BaseConfigurationResource, ""get_operation_specs_by_model_name"")
    @mock.patch.object(BaseConfigurationResource, ""_add_upserted_object"")
    @mock.patch.object(BaseConfigurationResource, ""_edit_upserted_object"")
    @mock.patch(""ansible.module_utils.network.ftd.configuration._extract_model_from_upsert_operation"")
    def test_upsert_object_with_fatal_error_during_add(self, extract_model_mock, edit_mock, add_mock,
                                                       get_operation_mock, is_upsert_supported_mock):
        op_name = mock.MagicMock()
        params = mock.MagicMock()
        is_upsert_supported_mock.return_value = True
        error = FtdConfigurationError(""Obj duplication error"")
        add_mock.side_effect = error
        self.assertRaises(
            FtdConfigurationError,
            self._resource.upsert_object, op_name, params
        )
        is_upsert_supported_mock.assert_called_once_with(op_name)
        extract_model_mock.assert_called_once_with(op_name)
        get_operation_mock.assert_called_once_with(extract_model_mock.return_value)
        add_mock.assert_called_once_with(get_operation_mock.return_value, params)
        edit_mock.assert_not_called()
# functional tests below
class TestUpsertOperationFunctionalTests(object):
    @pytest.fixture(autouse=True)
    def connection_mock(self, mocker):
        connection_class_mock = mocker.patch('ansible.modules.network.ftd.ftd_configuration.Connection')
        connection_instance = connection_class_mock.return_value
        connection_instance.validate_data.return_value = True, None
        connection_instance.validate_query_params.return_value = True, None
        connection_instance.validate_path_params.return_value = True, None
        return connection_instance
    def test_module_should_create_object_when_upsert_operation_and_object_does_not_exist(self, connection_mock):
        url = '/test'
        operations = {
            'getObjectList': {
                'method': HTTPMethod.GET,
                'url': url,
                'modelName': 'Object',
                'returnMultipleItems': True},
            'addObject': {
                'method': HTTPMethod.POST,
                'modelName': 'Object',
                'url': url},
            'editObject': {
                'method': HTTPMethod.PUT,
                'modelName': 'Object',
                'url': '/test/{objId}'},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': '/test/{objId}',
                'returnMultipleItems': False
            }
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        connection_mock.send_request.return_value = {
            ResponseParams.SUCCESS: True,
            ResponseParams.RESPONSE: ADD_RESPONSE
        }
        params = {
            'operation': 'upsertObject',
            'data': {'id': '123', 'name': 'testObject', 'type': 'object'},
            'path_params': {'objId': '123'},
            'register_as': 'test_var'
        }
        result = self._resource_execute_operation(params, connection=connection_mock)
        connection_mock.send_request.assert_called_once_with(url_path=url,
                                                             http_method=HTTPMethod.POST,
                                                             path_params=params['path_params'],
                                                             query_params={},
                                                             body_params=params['data'])
        assert ADD_RESPONSE == result
    # test when object exists but with different fields(except id)
    def test_module_should_update_object_when_upsert_operation_and_object_exists(self, connection_mock):
        url = '/test'
        obj_id = '456'
        version = 'test_version'
        url_with_id_templ = '{0}/{1}'.format(url, '{objId}')
        new_value = '0000'
        old_value = '1111'
        params = {
            'operation': 'upsertObject',
            'data': {'name': 'testObject', 'value': new_value, 'type': 'object'},
            'register_as': 'test_var'
        }
        def request_handler(url_path=None, http_method=None, body_params=None, path_params=None, query_params=None):
            if http_method == HTTPMethod.POST:
                assert url_path == url
                assert body_params == params['data']
                assert query_params == {}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: False,
                    ResponseParams.RESPONSE: DUPLICATE_NAME_ERROR_MESSAGE,
                    ResponseParams.STATUS_CODE: UNPROCESSABLE_ENTITY_STATUS
                }
            elif http_method == HTTPMethod.GET:
                is_get_list_req = url_path == url
                is_get_req = url_path == url_with_id_templ
                assert is_get_req or is_get_list_req
                if is_get_list_req:
                    assert body_params == {}
                    assert query_params == {QueryParams.FILTER: 'name:testObject', 'limit': 10, 'offset': 0}
                    assert path_params == {}
                elif is_get_req:
                    assert body_params == {}
                    assert query_params == {}
                    assert path_params == {'objId': obj_id}
                return {
                    ResponseParams.SUCCESS: True,
                    ResponseParams.RESPONSE: {
                        'items': [
                            {'name': 'testObject', 'value': old_value, 'type': 'object', 'id': obj_id,
                             'version': version}
                        ]
                    }
                }
            elif http_method == HTTPMethod.PUT:
                assert url_path == url_with_id_templ
                return {
                    ResponseParams.SUCCESS: True,
                    ResponseParams.RESPONSE: body_params
                }
            else:
                assert False
        operations = {
            'getObjectList': {'method': HTTPMethod.GET, 'url': url, 'modelName': 'Object', 'returnMultipleItems': True},
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': url},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': url_with_id_templ},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': url_with_id_templ,
                'returnMultipleItems': False}
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        connection_mock.send_request = request_handler
        expected_val = {'name': 'testObject', 'value': new_value, 'type': 'object', 'id': obj_id, 'version': version}
        result = self._resource_execute_operation(params, connection=connection_mock)
        assert expected_val == result
    # test when object exists and all fields have the same value
    def test_module_should_not_update_object_when_upsert_operation_and_object_exists_with_the_same_fields(
            self, connection_mock):
        url = '/test'
        url_with_id_templ = '{0}/{1}'.format(url, '{objId}')
        params = {
            'operation': 'upsertObject',
            'data': {'name': 'testObject', 'value': '3333', 'type': 'object'},
            'register_as': 'test_var'
        }
        expected_val = copy.deepcopy(params['data'])
        expected_val['version'] = 'test_version'
        expected_val['id'] = 'test_id'
        def request_handler(url_path=None, http_method=None, body_params=None, path_params=None, query_params=None):
            if http_method == HTTPMethod.POST:
                assert url_path == url
                assert body_params == params['data']
                assert query_params == {}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: False,
                    ResponseParams.RESPONSE: DUPLICATE_NAME_ERROR_MESSAGE,
                    ResponseParams.STATUS_CODE: UNPROCESSABLE_ENTITY_STATUS
                }
            elif http_method == HTTPMethod.GET:
                assert url_path == url
                assert body_params == {}
                assert query_params == {QueryParams.FILTER: 'name:testObject', 'limit': 10, 'offset': 0}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: True,
                    ResponseParams.RESPONSE: {
                        'items': [expected_val]
                    }
                }
            else:
                assert False
        operations = {
            'getObjectList': {'method': HTTPMethod.GET, 'modelName': 'Object', 'url': url, 'returnMultipleItems': True},
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': url},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': url_with_id_templ},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': url_with_id_templ,
                'returnMultipleItems': False}
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        connection_mock.send_request = request_handler
        result = self._resource_execute_operation(params, connection=connection_mock)
        assert expected_val == result
    def test_module_should_fail_when_upsert_operation_is_not_supported(self, connection_mock):
        connection_mock.get_operation_specs_by_model_name.return_value = {
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': '/test'},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': '/test/{objId}'},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': '/test/{objId}',
                'returnMultipleItems': False}
        }
        operation_name = 'upsertObject'
        params = {
            'operation': operation_name,
            'data': {'id': '123', 'name': 'testObject', 'type': 'object'},
            'path_params': {'objId': '123'},
            'register_as': 'test_var'
        }
        result = self._resource_execute_operation_with_expected_failure(
            expected_exception_class=FtdInvalidOperationNameError,
            params=params, connection=connection_mock)
        connection_mock.send_request.assert_not_called()
        assert operation_name == result.operation_name
    # when create operation raised FtdConfigurationError exception without id and version
    def test_module_should_fail_when_upsert_operation_and_failed_create_without_id_and_version(self, connection_mock):
        url = '/test'
        url_with_id_templ = '{0}/{1}'.format(url, '{objId}')
        params = {
            'operation': 'upsertObject',
            'data': {'name': 'testObject', 'value': '3333', 'type': 'object'},
            'register_as': 'test_var'
        }
        def request_handler(url_path=None, http_method=None, body_params=None, path_params=None, query_params=None):
            if http_method == HTTPMethod.POST:
                assert url_path == url
                assert body_params == params['data']
                assert query_params == {}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: False,
                    ResponseParams.RESPONSE: DUPLICATE_NAME_ERROR_MESSAGE,
                    ResponseParams.STATUS_CODE: UNPROCESSABLE_ENTITY_STATUS
                }
            elif http_method == HTTPMethod.GET:
                assert url_path == url
                assert body_params == {}
                assert query_params == {QueryParams.FILTER: 'name:testObject', 'limit': 10, 'offset': 0}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: True,
                    ResponseParams.RESPONSE: {
                        'items': []
                    }
                }
            else:
                assert False
        operations = {
            'getObjectList': {'method': HTTPMethod.GET, 'modelName': 'Object', 'url': url, 'returnMultipleItems': True},
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': url},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': url_with_id_templ},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': url_with_id_templ,
                'returnMultipleItems': False}
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        connection_mock.send_request = request_handler
        result = self._resource_execute_operation_with_expected_failure(
            expected_exception_class=FtdServerError,
            params=params, connection=connection_mock)
        assert result.code == 422
        assert result.response == 'Validation failed due to a duplicate name'
    def test_module_should_fail_when_upsert_operation_and_failed_update_operation(self, connection_mock):
        url = '/test'
        obj_id = '456'
        version = 'test_version'
        url_with_id_templ = '{0}/{1}'.format(url, '{objId}')
        error_code = 404
        new_value = '0000'
        old_value = '1111'
        params = {
            'operation': 'upsertObject',
            'data': {'name': 'testObject', 'value': new_value, 'type': 'object'},
            'register_as': 'test_var'
        }
        error_msg = 'test error'
        def request_handler(url_path=None, http_method=None, body_params=None, path_params=None, query_params=None):
            if http_method == HTTPMethod.POST:
                assert url_path == url
                assert body_params == params['data']
                assert query_params == {}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: False,
                    ResponseParams.RESPONSE: DUPLICATE_NAME_ERROR_MESSAGE,
                    ResponseParams.STATUS_CODE: UNPROCESSABLE_ENTITY_STATUS
                }
            elif http_method == HTTPMethod.GET:
                is_get_list_req = url_path == url
                is_get_req = url_path == url_with_id_templ
                assert is_get_req or is_get_list_req
                if is_get_list_req:
                    assert body_params == {}
                    assert query_params == {QueryParams.FILTER: 'name:testObject', 'limit': 10, 'offset': 0}
                elif is_get_req:
                    assert body_params == {}
                    assert query_params == {}
                    assert path_params == {'objId': obj_id}
                return {
                    ResponseParams.SUCCESS: True,
                    ResponseParams.RESPONSE: {
                        'items': [
                            {'name': 'testObject', 'value': old_value, 'type': 'object', 'id': obj_id,
                             'version': version}
                        ]
                    }
                }
            elif http_method == HTTPMethod.PUT:
                assert url_path == url_with_id_templ
                raise FtdServerError(error_msg, error_code)
            else:
                assert False
        operations = {
            'getObjectList': {'method': HTTPMethod.GET, 'modelName': 'Object', 'url': url, 'returnMultipleItems': True},
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': url},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': url_with_id_templ},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': url_with_id_templ,
                'returnMultipleItems': False}
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        connection_mock.send_request = request_handler
        result = self._resource_execute_operation_with_expected_failure(
            expected_exception_class=FtdServerError,
            params=params, connection=connection_mock)
        assert result.code == error_code
        assert result.response == error_msg
    def test_module_should_fail_when_upsert_operation_and_invalid_data_for_create_operation(self, connection_mock):
        new_value = '0000'
        params = {
            'operation': 'upsertObject',
            'data': {'name': 'testObject', 'value': new_value, 'type': 'object'},
            'register_as': 'test_var'
        }
        connection_mock.send_request.assert_not_called()
        operations = {
            'getObjectList': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': 'sd',
                'returnMultipleItems': True},
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': 'sdf'},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': 'sadf'},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': 'sdfs',
                'returnMultipleItems': False}
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        report = {
            'required': ['objects[0].type'],
            'invalid_type': [
                {
                    'path': 'objects[3].id',
                    'expected_type': 'string',
                    'actually_value': 1
                }
            ]
        }
        connection_mock.validate_data.return_value = (False, json.dumps(report, sort_keys=True, indent=4))
        key = 'Invalid data provided'
        result = self._resource_execute_operation_with_expected_failure(
            expected_exception_class=ValidationError,
            params=params, connection=connection_mock)
        assert len(result.args) == 1
        assert key in result.args[0]
        assert json.loads(result.args[0][key]) == {
            'invalid_type': [{'actually_value': 1, 'expected_type': 'string', 'path': 'objects[3].id'}],
            'required': ['objects[0].type']
        }
    def test_module_should_fail_when_upsert_operation_and_few_objects_found_by_filter(self, connection_mock):
        url = '/test'
        url_with_id_templ = '{0}/{1}'.format(url, '{objId}')
        sample_obj = {'name': 'testObject', 'value': '3333', 'type': 'object'}
        params = {
            'operation': 'upsertObject',
            'data': sample_obj,
            'register_as': 'test_var'
        }
        def request_handler(url_path=None, http_method=None, body_params=None, path_params=None, query_params=None):
            if http_method == HTTPMethod.POST:
                assert url_path == url
                assert body_params == params['data']
                assert query_params == {}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: False,
                    ResponseParams.RESPONSE: DUPLICATE_NAME_ERROR_MESSAGE,
                    ResponseParams.STATUS_CODE: UNPROCESSABLE_ENTITY_STATUS
                }
            elif http_method == HTTPMethod.GET:
                assert url_path == url
                assert body_params == {}
                assert query_params == {QueryParams.FILTER: 'name:testObject', 'limit': 10, 'offset': 0}
                assert path_params == {}
                return {
                    ResponseParams.SUCCESS: True,
                    ResponseParams.RESPONSE: {
                        'items': [sample_obj, sample_obj]
                    }
                }
            else:
                assert False
        operations = {
            'getObjectList': {'method': HTTPMethod.GET, 'modelName': 'Object', 'url': url, 'returnMultipleItems': True},
            'addObject': {'method': HTTPMethod.POST, 'modelName': 'Object', 'url': url},
            'editObject': {'method': HTTPMethod.PUT, 'modelName': 'Object', 'url': url_with_id_templ},
            'otherObjectOperation': {
                'method': HTTPMethod.GET,
                'modelName': 'Object',
                'url': url_with_id_templ,
                'returnMultipleItems': False}
        }
        def get_operation_spec(name):
            return operations[name]
        connection_mock.get_operation_spec = get_operation_spec
        connection_mock.get_operation_specs_by_model_name.return_value = operations
        connection_mock.send_request = request_handler
        result = self._resource_execute_operation_with_expected_failure(
            expected_exception_class=FtdConfigurationError,
            params=params, connection=connection_mock)
        assert result.msg is MULTIPLE_DUPLICATES_FOUND_ERROR
        assert result.obj is None
    @staticmethod
    def _resource_execute_operation(params, connection):
        resource = BaseConfigurationResource(connection)
        op_name = params['operation']
        resp = resource.execute_operation(op_name, params)
        return resp
    def _resource_execute_operation_with_expected_failure(self, expected_exception_class, params, connection):
        with pytest.raises(expected_exception_class) as ex:
            self._resource_execute_operation(params, connection)
        # 'ex' here is the instance of '_pytest._code.code.ExceptionInfo' but not <expected_exception_class>
        # actual instance of <expected_exception_class> is in the value attribute of 'ex'. That's why we should return
        # 'ex.value' here, so it can be checked in a test later.
        return ex.value
"
-------------------------------------------------------------------------
"Recom
PRs: 47747, 48982"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.six import BytesIO, StringIO
"
-------------------------------------------------------------------------
"from ansible.module_utils.six import BytesIO, StringIO"
-------------------------------------------------------------------------
"def test_login_raises_exception_when_http_error(self):
    self.connection_mock.send.side_effect = HTTPError('http://testhost.com', 400, '', {},
                                                      StringIO('{""message"": ""Failed to authenticate user""}'))
    with self.assertRaises(ConnectionError) as res:
        self.ftd_plugin.login('foo', 'bar')
    assert 'Failed to authenticate user' in str(res.exception)
"
-------------------------------------------------------------------------
"Recom
PRs: 47747, 48982"
-------------------------------------------------------------------------
=========================================================================
"def test_login_raises_exception_when_http_error(self):
    self.connection_mock.send.side_effect = HTTPError('http://testhost.com', 400, '', {},
                                                      StringIO('{""message"": ""Failed to authenticate user""}'))
    with self.assertRaises(ConnectionError) as res:
        self.ftd_plugin.login('foo', 'bar')
    assert 'Failed to authenticate user' in str(res.exception)
"
-------------------------------------------------------------------------
"def test_login_raises_exception_when_http_error(self):
    self.connection_mock.send.side_effect = ansible.module_utils.six.moves.urllib.error.HTTPError('http://testhost.com', 400, '', {},
                                                      StringIO('{""message"": ""Failed to authenticate user""}'))
    with self.assertRaises(ansible.errors.ConnectionError) as res:
        self.ftd_plugin.login('foo', 'bar')
    assert 'Failed to authenticate user' in str(res.exception)"
-------------------------------------------------------------------------
"def test_handle_httperror_should_not_retry_when_ignoring_http_errors(self):
    self.ftd_plugin._ignore_http_errors = True
    assert not self.ftd_plugin.handle_httperror(HTTPError('http://testhost.com', 401, '', {}, None))
"
-------------------------------------------------------------------------
"Recom
PRs: 47747, 48982"
-------------------------------------------------------------------------
=========================================================================
"def test_handle_httperror_should_not_retry_when_ignoring_http_errors(self):
    self.ftd_plugin._ignore_http_errors = True
    assert not self.ftd_plugin.handle_httperror(HTTPError('http://testhost.com', 401, '', {}, None))
"
-------------------------------------------------------------------------
"def test_handle_httperror_should_not_retry_when_ignoring_http_errors(self):
        self.httpapi_plugin._ignore_http_errors = True
        assert not self.httpapi_plugin.handle_httperror(HTTPError('http://testhost.com', 401, '', {}, None))"
-------------------------------------------------------------------------
"@patch.object(FdmSwaggerParser, 'parse_spec')
def test_get_model_spec(self, parse_spec_mock):
    self.connection_mock.send.return_value = self._connection_response(None)
    operation1 = {'modelName': 'TestModel'}
    op_model_name_is_none = {'modelName': None}
    op_without_model_name = {'url': 'testUrl'}
    parse_spec_mock.return_value = {
        SpecProp.MODEL_OPERATIONS: {
            'TestModel': {
                'testOp1': operation1,
                'testOp2': 'spec2'
            },
            'TestModel2': {
                'testOp10': 'spec10',
                'testOp20': 'spec20'
            }
        },
        SpecProp.OPERATIONS: {
            'testOp1': operation1,
            'testOp10': {
                'modelName': 'TestModel2'
            },
            'testOpWithoutModelName': op_without_model_name,
            'testOpModelNameIsNone': op_model_name_is_none
        }
    }
    assert {'testOp1': operation1, 'testOp2': 'spec2'} == self.ftd_plugin.get_operation_specs_by_model_name(
        'TestModel')
    assert None is self.ftd_plugin.get_operation_specs_by_model_name(
        'testOpModelNameIsNone')
    assert None is self.ftd_plugin.get_operation_specs_by_model_name(
        'testOpWithoutModelName')
    assert self.ftd_plugin.get_operation_specs_by_model_name('nonExistingOperation') is None
"
-------------------------------------------------------------------------
"Recom
PRs: 47747, 48982"
-------------------------------------------------------------------------
=========================================================================
"device_dict['Rate'] = human_to_bytes(device_dict['Rate'])
"
-------------------------------------------------------------------------
device_dict['Rate'] = _text.to_bytes(device_dict['Rate'])
-------------------------------------------------------------------------
"if network.get('aliases'):
    if not compare_generic(network['aliases'], connected_networks[network['name']].get('Aliases'), 'allow_more_present', 'set'):
        diff = True
if network.get('links'):
    if not compare_generic(expected_links, connected_networks[network['name']].get('Links'), 'allow_more_present', 'set'):
        diff = True
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"if network.get('aliases'):
    if not compare_generic(network['aliases'], connected_networks[network['name']].get('Aliases'), 'allow_more_present', 'set'):
        diff = True
if network.get('links'):
    if not compare_generic(expected_links, connected_networks[network['name']].get('Links'), 'allow_more_present', 'set'):
        diff = True
"
-------------------------------------------------------------------------
"if network.get('aliases'):
    if not ansible.parsing.utils.addresses.parse_address(network['aliases']) == ansible.parsing.utils.addresses.parse_address(connected_networks[network['name']].get('Aliases')):
        diff = True
if network.get('Links'):
    if not ansible._text.to_native(expected_links) == ansible.parsing.utils.addresses.parse_address(connected_networks[network['name']].get('Links')):
        diff = True"
-------------------------------------------------------------------------
"container_limits=dict(type='dict', options=dict(
    memory=dict(type='int'),
    memswap=dict(type='int'),
    cpushares=dict(type='int'),
    cpusetcpus=dict(type='str'),
)),
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"container_limits=dict(type='dict', options=dict(
    memory=dict(type='int'),
    memswap=dict(type='int'),
    cpushares=dict(type='int'),
    cpusetcpus=dict(type='str'),
)),
"
-------------------------------------------------------------------------
"container_limits=dict(type='dict', options=dict(
    mem_limit=dict(type='int'),
    memswap_limit=dict(type='int'),
    cpu_shares=dict(type='int'),
    cpuset_cpus=dict(type='str'),
)),"
-------------------------------------------------------------------------
"name=dict(type='list', elements='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"name=dict(type='list', elements='str'),
"
-------------------------------------------------------------------------
"argument_spec = dict(
    name=dict(type='str'),
    state=dict(type='str', choices=['present', 'join', 'absent', 'remove', 'inspect'], default='present'),
    force=dict(type='bool', default=False),
    listen_addr=dict(type='str', default='0.0.0.0:2377'),
    remote_addrs=dict(type='list'),
    join_token=dict(type='str'),
    snapshot_interval=dict(type='int'),
    task_history_retention_limit=dict(type='int'),
    keep_old_snapshots=dict(type='int'),
    log_entries_for_slow_followers=dict(type='int'),
    heartbeat_tick=dict(type='int'),
    election_tick=dict(type='int'),
    dispatcher_heartbeat_period=dict(type='int'),
    node_cert_expiry=dict(type='int'),
    labels=dict(type='dict'),
    signing_ca_cert=dict(type='str'),
    signing_ca_key=dict(type='str'),
    ca_force_rotate=dict(type='int'),
    autolock_managers=dict(type='bool'),
    node_id=dict(type='str'),
    rotate_worker_token=dict(type='bool', default=False),
    rotate_manager_token=dict(type='bool', default=False)
)"
-------------------------------------------------------------------------
"connected=dict(type='list', default=[], aliases=['containers'], elements='str'),
ipam_driver=dict(type='str'),
ipam_options=dict(type='dict', default={}, options=dict(
    subnet=dict(type='str'),
    iprange=dict(type='str'),
    gateway=dict(type='str'),
    aux_addresses=dict(type='dict'),
)),
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"if (self.parameters.ipam_options['subnet'] or self.parameters.ipam_options['iprange'] or
        self.parameters.ipam_options['gateway'] or self.parameters.ipam_options['aux_addresses']):
"
-------------------------------------------------------------------------
"if (self.get_option('ipam_options')['subnet'] or self.get_option('ipam_options')['iprange'] or
    self.get_option('ipam_options')['gateway'] or self.get_option('ipam_options')['aux_addresses']):"
-------------------------------------------------------------------------
"files=dict(type='list', elements='path'),
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"files=dict(type='list', elements='path'),
"
-------------------------------------------------------------------------
"files=dict(type='list', elements='str')"
-------------------------------------------------------------------------
"services=dict(type='list', elements='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"services=dict(type='list', elements='str'),
"
-------------------------------------------------------------------------
"services=dict(type='list', elements='str'),"
-------------------------------------------------------------------------
"remote_addrs=dict(type='list', elements='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"rule_match = RULE_REGEX.search(line)
rule_args = parse_module_arguments(rule_match.group('args'))
return cls(rule_match.group('rule_type'), rule_match.group('control'), rule_match.group('path'), rule_args)
"
-------------------------------------------------------------------------
"rule_match = re.compile(RULE_REGEX).search(line)
rule_args = parse_module_arguments(rule_match.group('args'))
return PamdRule(rule_match.group('rule_type'), rule_match.group('control'), rule_match.group('path'), rule_args)"
-------------------------------------------------------------------------
"valid_simple_controls = ['required', 'requisite', 'sufficient', 'optional', 'include', 'substack', 'definitive']
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"if self.rule_type not in VALID_TYPES:
"
-------------------------------------------------------------------------
if self.rule_type not in PamdRule.VALID_TYPES:
-------------------------------------------------------------------------
"rule_match = RULE_REGEX.search(line)
rule_args = parse_module_arguments(rule_match.group('args'))
return cls(rule_match.group('rule_type'), rule_match.group('control'), rule_match.group('path'), rule_args)
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"new_args = parse_module_arguments(new_args)
changes = 0
    rule_changed = False
        if(current_rule.rule_type != new_type):
            rule_changed = True
            current_rule.rule_type = new_type
        if(current_rule.rule_control != new_control):
            rule_changed = True
            current_rule.rule_control = new_control
        if(current_rule.rule_path != new_path):
            rule_changed = True
            current_rule.rule_path = new_path
        if(current_rule.rule_args != new_args):
            rule_changed = True
            current_rule.rule_args = new_args
    if rule_changed:
        changes = 1
return changes
changes = 0
"
-------------------------------------------------------------------------
"new_args = PamdRule.parse_module_arguments(new_args)
rule_changed = False
if self.rule_type != new_type:
    rule_changed = True
    self.rule_type = new_type
if self.rule_control != new_control:
    rule_changed = True
    self.rule_control = new_control
if self.rule_path != new_path:
    rule_changed = True
    self.rule_path = new_path
if self.rule_args != new_args:
    rule_changed = True
    self.rule_args = new_args
if rule_changed:
    changes = 1
return changes"
-------------------------------------------------------------------------
"if self.rule_type not in VALID_TYPES:
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"changes = 1
"
-------------------------------------------------------------------------
"if not self.is_valid():
    return False, ""Rule is not valid "" + self.line
return True, ""Rule is valid "" + self.line"
-------------------------------------------------------------------------
"new_args = parse_module_arguments(new_args)
changes = 0
    rule_changed = False
        if(current_rule.rule_type != new_type):
            rule_changed = True
            current_rule.rule_type = new_type
        if(current_rule.rule_control != new_control):
            rule_changed = True
            current_rule.rule_control = new_control
        if(current_rule.rule_path != new_path):
            rule_changed = True
            current_rule.rule_path = new_path
        if(current_rule.rule_args != new_args):
            rule_changed = True
            current_rule.rule_args = new_args
    if rule_changed:
        changes = 1
return changes
changes = 0
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"changes = 1
hanges
= 0
"
-------------------------------------------------------------------------
"# There are two cases to consider.
# 1. The new rule doesn't exist before the existing rule
# 2. The new rule exists

for current_rule in rules_to_find:
    # Create a new rule
    new_r = PamdRule(new_type, new_control, new_path, new_args)
    # First we'll get the previous rule.
    prev_r = current_rule.prev

    # Next we may have to loop backwards if the previous line is a comment.  If it
    # is, we'll get the previous ""rule's"" previous.
    while prev_r is not None and isinstance(prev_r, PamdComment):
        prev_r = prev_r.prev
    # Next we'll see if the previous rule matches what we are trying to insert.
    if prev_r is not None and not prev_r.matches(new_type, new_control, new_path):
        # First set the original previous rule's next to the new_r
        prev_r.next = new_r
        # Second, set the new_r's previous to the original previous
        new_r.prev = prev_r
        # Third, set the new rule's next to the current rule
        new_r.next = current_rule
        # Fourth, set the current rule's previous to the new_r
        current_rule.prev = new_r

        chnges = 1

    # Handle the case where it is the first rule in the list.
    elif prev_r is None:
        # This is the case where the current rule is not only the first rule
        # but the first line as well.  So we set the head to the new_r
        if current_rule.prev is None:
            self._head = new_r
        # This case would occur if the previous line was a comment.
        else:
            current_rule.prev.next = new_r
        new_r.prev = current_rule.prev
        new_r.next = current_rule
        current_rule.prev = new_r
        chnges = 1

return chnges"
-------------------------------------------------------------------------
"changes = 1
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"changes = 1
"
-------------------------------------------------------------------------
changes = target_changes(1)
-------------------------------------------------------------------------
"changes = 1
hanges
= 0
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"choices=VALID_TYPES),
    choices=VALID_TYPES),
"
-------------------------------------------------------------------------
"new_types = VALID_TYPES
        if valid_types:
            new_types = set(valid_types)
        new_types.add(None)
        self.new_types = new_types"
-------------------------------------------------------------------------
"changes = 1
hanges
= 0
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"changes = 0
"
-------------------------------------------------------------------------
changes = 0
-------------------------------------------------------------------------
"choices=VALID_TYPES),
    choices=VALID_TYPES),
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"if [arg for arg in parse_module_arguments(module.params['module_arguments']) if arg.startswith(""["")]:
    module.fail_json(msg=""Unable to process bracketed '[' complex arguments with 'args_present'. Please use 'updated'."")
"
-------------------------------------------------------------------------
"if [arg for arg in self.parse_module_arguments(self.get('module_arguments')) if arg.startswith(""["")]:
    self.fail_json(msg=""Unable to process bracketed '[' complex arguments with 'args_present'. Please use 'updated'."")"
-------------------------------------------------------------------------
"changes = 0
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"result = dict(
    changed=(changes > 0),
    change_count=changes,
    backupdest='',
)
if not module.check_mode and result['changed']:
        result['backupdest'] = module.backup_local(fname)
"
-------------------------------------------------------------------------
"result = dict(
            changed=(self.changes > 0),
            change_count=self.changes,
            backupdest='',
        )
        if not self.module.check_mode and result['changed']:
            result['backupdest'] = self.module.backup_local(self.fname)"
-------------------------------------------------------------------------
"if [arg for arg in parse_module_arguments(module.params['module_arguments']) if arg.startswith(""["")]:
    module.fail_json(msg=""Unable to process bracketed '[' complex arguments with 'args_present'. Please use 'updated'."")
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"stop_timeout='stop_timeout',
healthcheck='healthcheck',
elf.client.docker_py_version < LooseVersion('3.0'):
# cpu_shares and volume_driver moved to create_host_config in > 3
"
-------------------------------------------------------------------------
"if compare_version(elf.client.api_version, '3.0') < 0:
    stop_timeout='stop_timeout',
    healthcheck='healthcheck',"
-------------------------------------------------------------------------
"if self.client.option_minimal_versions[value]['supported']:
    result[key] = getattr(self, value)
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"if self.client.option_minimal_versions[value]['supported']:
    result[key] = getattr(self, value)
"
-------------------------------------------------------------------------
"if self.client.docker_option_minimal_versions[value]['supported']:
    result[key] = getattr(self, value)"
-------------------------------------------------------------------------
"if self.client.docker_py_version < LooseVersion('3.0'):
    # cpu_shares and volume_driver moved to create_host_config in > 3
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"init='init',
uts_mode='uts',
runtime='runtime',
auto_remove='auto_remove',
device_read_bps='device_read_bps',
device_write_bps='device_write_bps',
device_read_iops='device_read_iops',
device_write_iops='device_write_iops',
elf.client.docker_py_version >= LooseVersion('1.9') and self.client.docker_api_version >= LooseVersion('1.22'):
# blkio_weight can always be updated, but can only be set on creation
# when docker-py and docker API are new enough
elf.client.docker_py_version >= LooseVersion('3.0'):
    if self.client.option_minimal_versions[value]['supported']:
        params[key] = getattr(self, value)
"
-------------------------------------------------------------------------
"init='init',
uts_mode='uts',
runtime='runtime',
auto_remove='auto_remove',
blkio_weight='blkio_weight',
device_read_bps='device_read_bps',
device_write_bps='device_write_bps',
device_read_iops='device_read_iops',
device_write_iops='device_write_iops',
ansible.module_utils.docker_common.client.docker_py_version >= distutils.version.LooseVersion('1.9') and ansible.module_utils.docker_common.client.docker_api_version >= docker.types.LooseVersion('1.22'):
    # blkio_weight can always be updated, but can only be set on creation
    # when docker-py and docker API are new enough
    if ansible.module_utils.docker_common.client.docker_py_version >= distutils.version.LooseVersion('3.0'):
        if ansible.module_utils.docker_common.client.option_minimal_versions[value]['supported']:
            params[key] = getattr(self, value)"
-------------------------------------------------------------------------
"if self.client.docker_py_version < LooseVersion('3.0'):
    # cpu_shares and volume_driver moved to create_host_config in > 3
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"# Options which don't make sense without their accompanying option
if self.parameters.client.option_minimal_versions['auto_remove']['supported']:
    # auto_remove is only supported in docker>=2; unfortunately it has a default
    # value, that's why we have to jump through the hoops here
if self.parameters.client.option_minimal_versions['stop_timeout']['supported']:
    # stop_timeout is only supported in docker>=2.1. Note that stop_timeout
    # has a hybrid role, in that it used to be something only used for stopping
    # containers, and is now also used as a container property. That's why
    # it needs special handling here.
if self.parameters.client.docker_api_version < LooseVersion('1.22'):
    # For docker API < 1.22, update_container() is not supported. Thus
    # we need to handle all limits which are usually handled by
    # update_container() as configuration changes which require a container
    # restart.
    config_mapping.update(dict(
        blkio_weight=host_config.get('BlkioWeight'),
        cpu_period=host_config.get('CpuPeriod'),
        cpu_quota=host_config.get('CpuQuota'),
        cpu_shares=host_config.get('CpuShares'),
        cpuset_cpus=host_config.get('CpusetCpus'),
        cpuset_mems=host_config.get('CpusetMems'),
        kernel_memory=host_config.get(""KernelMemory""),
        memory=host_config.get('Memory'),
        memory_reservation=host_config.get('MemoryReservation'),
        memory_swap=host_config.get('MemorySwap'),
    ))
"
-------------------------------------------------------------------------
"if docker.utils.types.version_gte(self.parameters.client.version, ""2.0""):
    if self.parameters.client.option_minimal_versions['auto_remove']['supported']:
        # auto_remove is only supported in docker>=2; unfortunately it has a default
        # value, that's why we have to jump through the hoops here

    if self.parameters.client.option_minimal_versions['stop_timeout']['supported']:
        # stop_timeout is only supported in docker>=2.1. Note that stop_timeout
        # has a hybrid role, in that it used to be something only used for stopping
        # containers, and is now also used as a container property. That's why
        # it needs special handling here

if docker.types.version_lt(self.parameters.client.docker_api_version, '1.22'):
    # For docker API < 1.22, update_container() is not supported. Thus
    # we need to handle all limits which are usually handled by
    # update_container() as configuration changes which require a container
    # restart
    config_mapping.update(dict(
        blkio_weight=host_config.get('BlkioWeight'),
        cpu_period=host_config.get('CpuPeriod'),
        cpu_quota=host_config.get('CpuQuota'),
        cpu_shares=host_config.get('CpuShares'),
        cpuset_cpus=host_config.get('CpusetCpus'),
        cpuset_mems=host_config.get('CpusetMems'),
        kernel_memory=host_config.get(""KernelMemory""),
        memory=host_config.get('Memory'),
        memory_reservation=host_config.get('MemoryReservation'),
        memory_swap=host_config.get('MemorySwap'),
    ))"
-------------------------------------------------------------------------
"volume_driver=host_config.get('VolumeDriver'),
tions which don't make sense without their accompanying option
elf.parameters.client.option_minimal_versions['auto_remove']['supported']:
# auto_remove is only supported in docker>=2; unfortunately it has a default
# value, that's why we have to jump through the hoops here
elf.parameters.client.docker_api_version < LooseVersion('1.22'):
# For docker API < 1.22, update_container() is not supported. Thus
# we need to handle all limits which are usually handled by
# update_container() as configuration changes which require a container
# restart.
config_mapping.update(dict(
    blkio_weight=host_config.get('BlkioWeight'),
    cpu_period=host_config.get('CpuPeriod'),
    cpu_quota=host_config.get('CpuQuota'),
    cpu_shares=host_config.get('CpuShares'),
    cpuset_cpus=host_config.get('CpusetCpus'),
    cpuset_mems=host_config.get('CpusetMems'),
    kernel_memory=host_config.get(""KernelMemory""),
    memory=host_config.get('Memory'),
    memory_reservation=host_config.get('MemoryReservation'),
    memory_swap=host_config.get('MemorySwap'),
))
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"if client.module.params.get('restart_retries') is not None and not client.module.params.get('restart_policy'):
"
-------------------------------------------------------------------------
if module.params.get('restart_retries') is not None and not module.params.get('restart_policy'):
-------------------------------------------------------------------------
"# A list of module options which are not docker container properties
__NON_CONTAINER_PROPERTY_OPTIONS = (
    'docker_host', 'tls_hostname', 'api_version', 'timeout', 'cacert_path', 'cert_path',
    'key_path', 'ssl_version', 'tls', 'tls_verify', 'debug', 'env_file', 'force_kill',
    'keep_volumes', 'ignore_image', 'name', 'pull', 'purge_networks', 'recreate',
    'restart', 'state', 'stop_timeout', 'trust_image_content', 'networks', 'cleanup',
    'kill_signal', 'output_logs', 'paused'
)
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"if self.client.docker_py_version >= LooseVersion('3.0'):
"
-------------------------------------------------------------------------
if self.client.api_version >= distutils.version.LooseVersion('3.0'):
-------------------------------------------------------------------------
"if client.module.params.get('restart_retries') is not None and not client.module.params.get('restart_policy'):
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"# A list of module options which are not docker container properties
__NON_CONTAINER_PROPERTY_OPTIONS = (
    'docker_host', 'tls_hostname', 'api_version', 'timeout', 'cacert_path', 'cert_path',
    'key_path', 'ssl_version', 'tls', 'tls_verify', 'debug', 'env_file', 'force_kill',
    'keep_volumes', 'ignore_image', 'name', 'pull', 'purge_networks', 'recreate',
    'restart', 'state', 'trust_image_content', 'networks', 'cleanup', 'kill_signal',
    'output_logs', 'paused'
)
"
-------------------------------------------------------------------------
"# A list of module options which are not docker container properties
NON_CONTAINER_PROPERTY_OPTIONS = (
    'docker_host', 'tls_hostname', 'api_version', 'timeout', 'cacert_path', 'cert_path',
    'key_path', 'ssl_version', 'tls', 'tls_verify', 'debug', 'env_file', 'force_kill',
    'keep_volumes', 'ignore_image', 'name', 'pull', 'purge_networks', 'recreate',
    'restart', 'state', 'trust_image_content', 'networks', 'cleanup', 'kill_signal',
    'output_logs', 'paused'
)"
-------------------------------------------------------------------------
"if client.module.params.get('restart_retries') is not None and not client.module.params.get('restart_policy'):
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"self.directory = ACMEDirectory(module, self)
"
-------------------------------------------------------------------------
"self.directory = ACMEDirectoryFragment(module, self)"
-------------------------------------------------------------------------
"if payload is None:
    payload64 = ''
else:
    payload64 = nopad_b64(self.module.jsonify(payload).encode('utf8'))
"
-------------------------------------------------------------------------
"Recom
PRs: 45051, 48043"
-------------------------------------------------------------------------
=========================================================================
"def send_signed_request(self, url, payload, key_data=None, jws_header=None, parse_json_result=True):
"
-------------------------------------------------------------------------
"def send_signed_request(self, url, payload, key_data=None, jws_header=None, parse_json_result=True):
    from __future__ import division, print_function, absolute_import
    
    # Your code here"
-------------------------------------------------------------------------
"if payload is None:
    payload64 = ''
else:
    payload64 = nopad_b64(self.module.jsonify(payload).encode('utf8'))
"
-------------------------------------------------------------------------
"Recom
PRs: 45051, 48043"
-------------------------------------------------------------------------
=========================================================================
"if self.module.check_mode:
    self.module.debug('In check mode, would have run: ""%s""' % cmd)
    return (0, '', '')
master_in_fd, slave_in_fd = pty.openpty()
master_out_fd, slave_out_fd = pty.openpty()
master_err_fd, slave_err_fd = pty.openpty()
env = os.environ.copy()
env['LC_ALL'] = 'C'
try:
    p = subprocess.Popen([to_bytes(c) for c in cmd],
                         stdin=slave_in_fd,
                         stdout=slave_out_fd,
                         stderr=slave_err_fd,
                         preexec_fn=os.setsid,
                         env=env)
    out_buffer = b''
    err_buffer = b''
    while p.poll() is None:
        r, w, e = select.select([master_out_fd, master_err_fd], [], [], 1)
        first_prompt = b'Enter passphrase (empty for no passphrase):'
        second_prompt = b'Enter same passphrase again'
        prompt = first_prompt
        for fd in r:
            if fd == master_out_fd:
                chunk = os.read(master_out_fd, 10240)
                out_buffer = chunk
                if prompt in out_buffer:
                    os.write(master_in_fd, self.ssh_passphrase  b'\r')
                    prompt = second_prompt
            else:
                chunk = os.read(master_err_fd, 10240)
                err_buffer = chunk
                if prompt in err_buffer:
                    os.write(master_in_fd, self.ssh_passphrase  b'\r')
                    prompt = second_prompt
            if b'Overwrite (y/n)?' in out_buffer or b'Overwrite (y/n)?' in err_buffer:
                # This created between us checking for existence and now
                return (None, 'Key already exists', '')
    rc = p.returncode
    out = to_native(out_buffer)
    err = to_native(err_buffer)
except OSError as e:
    return (1, '', to_native(e))
cmd.append('-N')
(rc, out, err) = self.execute_command(cmd)
"
-------------------------------------------------------------------------
"if self.module.check_mode:
    self.module.debug('In check mode, would have run: ""%s""' % cmd)
    return (0, '', '')

master_in_fd, slave_in_fd = pty.openpty()
master_out_fd, slave_out_fd = pty.openpty()
master_err_fd, slave_err_fd = pty.openpty()

env = os.environ.copy()
env['LC_ALL'] = 'C'

try:
    p = subprocess.Popen([to_bytes(c) for c in cmd],
                         stdin=slave_in_fd,
                         stdout=slave_out_fd,
                         stderr=slave_err_fd,
                         preexec_fn=os.setsid,
                         env=env)
    
    out_buffer = b''
    err_buffer = b''

    while p.poll() is None:
        r, _, _ = select.select([master_out_fd, master_err_fd], [], [], 1)
        
        first_prompt = b'Enter passphrase (empty for no passphrase):'
        second_prompt = b'Enter same passphrase again'
        prompt = first_prompt
        
        for fd in r:
            if fd == master_out_fd:
                chunk = os.read(master_out_fd, 10240)
                out_buffer += chunk
                if prompt in out_buffer:
                    os.write(master_in_fd, ssh_key_passphrase.encode() + b'\r')
                    prompt = second_prompt
            else:
                chunk = os.read(master_err_fd, 10240)
                err_buffer += chunk
                if prompt in err_buffer:
                    os.write(master_in_fd, ssh_key_passphrase.encode() + b'\r')
                    prompt = second_prompt
                    
            if b'Overwrite (y/n)?' in out_buffer or b'Overwrite (y/n)?' in err_buffer:
                # This created between us checking for existence and now
                return (None, 'Key already exists', '')
                
    rc = p.returncode
    out = to_native(out_buffer)
    err = to_native(err_buffer)
    
except OSError as e:
    return (1, '', to_native(e))

cmd.append('-N')
(rc, out, err) = self.execute_command(cmd)"
-------------------------------------------------------------------------
"if self.module.check_mode:
    self.module.debug('In check mode, would have run: ""%s""' % cmd)
    return (0, '', '')
master_in_fd, slave_in_fd = pty.openpty()
master_out_fd, slave_out_fd = pty.openpty()
master_err_fd, slave_err_fd = pty.openpty()
env = os.environ.copy()
env['LC_ALL'] = 'C'
try:
    p = subprocess.Popen([to_bytes(c) for c in cmd],
                         stdin=slave_in_fd,
                         stdout=slave_out_fd,
                         stderr=slave_err_fd,
                         preexec_fn=os.setsid,
                         env=env)
    out_buffer = b''
    err_buffer = b''
    while p.poll() is None:
        r, w, e = select.select([master_out_fd, master_err_fd], [], [], 1)
        first_prompt = b'Enter passphrase (empty for no passphrase):'
        second_prompt = b'Enter same passphrase again'
        prompt = first_prompt
        for fd in r:
            if fd == master_out_fd:
                chunk = os.read(master_out_fd, 10240)
                out_buffer = chunk
                if prompt in out_buffer:
                    os.write(master_in_fd, to_bytes(self.ssh_passphrase, errors='strict')  b'\r')
                    prompt = second_prompt
            else:
                chunk = os.read(master_err_fd, 10240)
                err_buffer = chunk
                if prompt in err_buffer:
                    os.write(master_in_fd, to_bytes(self.ssh_passphrase, errors='strict')  b'\r')
                    prompt = second_prompt
            if b'Overwrite (y/n)?' in out_buffer or b'Overwrite (y/n)?' in err_buffer:
                # The key was created between us checking for existence and now
                return (None, 'Key already exists', '')
    rc = p.returncode
    out = to_native(out_buffer)
    err = to_native(err_buffer)
except OSError as e:
    return (1, '', to_native(e))
cmd.append('-N')
(rc, out, err) = self.execute_command(cmd)
"
-------------------------------------------------------------------------
"Recom
PRs: 47436, 47487"
-------------------------------------------------------------------------
=========================================================================
"if self.parameters.auto_remove:
    output = ""Cannot retrieve result as auto_remove is enabled""
        self.client.module.warn('Cannot output_logs if auto_remove is enabled!')
    config = self.client.inspect_container(container_id)
    logging_driver = config['HostConfig']['LogConfig']['Type']
    if logging_driver == 'json-file' or logging_driver == 'journald':
        output = self.client.logs(container_id, stdout=True, stderr=True, stream=False, timestamps=False)
        if self.parameters.output_logs:
            self._output_logs(msg=output)
    else:
        output = ""Result logged using `%s` driver"" % logging_driver
    self.container_remove(container_id, force=True, ignore_failure=self.parameters.auto_remove)
"
-------------------------------------------------------------------------
"if self.auto_remove:
    output = ""Cannot retrieve result as auto_remove is enabled""
    self.module.warn('Cannot output_logs if auto_remove is enabled!')
    config = self.client.inspect_container(container.Id)
    log_config = docker.types.LogConfig(**config['HostConfig']['LogConfig'])
    logging_driver = log_config.type
    if logging_driver == 'json-file' or logging_driver == 'journald':
        output = self.client.logs(container.Id, stdout=True, stderr=True, stream=False, timestamps=False)
        if self.output_logs:
            self._output_logs(msg=output)
    else:
        output = ""Result logged using `%s` driver"" % logging_driver
    self.container_remove(container.Id, force=True, ignore_failure=self.auto_remove)"
-------------------------------------------------------------------------
"def container_remove(self, container_id, link=False, force=False):
"
-------------------------------------------------------------------------
"Recom
PRs: 47396, 47484"
-------------------------------------------------------------------------
=========================================================================
"def container_remove(self, container_id, link=False, force=False, ignore_failure=False):
"
-------------------------------------------------------------------------
"def container_remove(self, container_id, link=False, force=False):
        volume_state = (not self.keep_volumes)
        self.log(""remove container container:%s v:%s link:%s force%s"" % (container_id, volume_state, link, force))
        self.results['actions'].append(dict(removed=container_id, volume_state=volume_state, link=link, force=force))
        self.results['changed'] = True
        response = None
        if not self.check_mode:
            try:
                response = self.client.remove_container(container_id, v=volume_state, link=link, force=force)
            except DockerException as exc:
                self.fail(""Error removing container %s: %s"" % (container_id, str(exc)))
        return response"
-------------------------------------------------------------------------
"self.container_remove(container_id, force=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 47396, 47484"
-------------------------------------------------------------------------
=========================================================================
"if not ignore_failure:
    self.fail(""Error removing container %s: %s"" % (container_id, str(exc)))
"
-------------------------------------------------------------------------
"if not self.ignore_failure:
    self.fail(""Error removing container %s: %s"" % (container_id, str(exc))"
-------------------------------------------------------------------------
"def container_remove(self, container_id, link=False, force=False):
"
-------------------------------------------------------------------------
"Recom
PRs: 47396, 47484"
-------------------------------------------------------------------------
=========================================================================
"try:
    if secure != 'never':
        try:
            smtp = smtplib.SMTP_SSL(timeout=timeout)
            code, smtpmessage = smtp.connect(host, port=port)
            secure_state = True
        except ssl.SSLError as e:
            if secure == 'always':
                                           (host, port, to_native(e)), exception=traceback.format_exc())
    if not secure_state:
        smtp = smtplib.SMTP(timeout=timeout)
except smtplib.SMTPException as e:
    module.fail_json(rc=1, msg='Unable to Connect %s:%s: %s' % (host, port, to_native(e)), exception=traceback.format_exc())
if int(code) > 0:
    if not secure_state and secure in ('starttls', 'try'):
"
-------------------------------------------------------------------------
"try:
    if secure != 'never':
        try:
            smtp = smtplib.SMTP_SSL(timeout=timeout)
            code, smtpmessage = smtp.connect(host, port=port)
            secure_state = True
        except ssl.SSLError as e:
            if secure == 'always':
                module.fail_json(rc=1, msg='Unable to start an encrypted session to %s:%s: %s' %
                                 (host, port, to_native(e)), exception=traceback.format_exc())
except smtplib.SMTPException as e:
    module.fail_json(rc=1, msg='Unable to Connect %s:%s: %s' % (host, port, to_native(e)), exception=traceback.format_exc())

if int(code) > 0:
    if not secure_state and secure in ('starttls', 'try'):"
-------------------------------------------------------------------------
"except:
    pass
"
-------------------------------------------------------------------------
"Recom
PRs: 37098, 47019"
-------------------------------------------------------------------------
=========================================================================
"working_dir=config.get('WorkingDir'),
publish_all_ports=host_config.get('PublishAllPorts'),
"
-------------------------------------------------------------------------
"working_dir=config.get('working_dir'),
publish_all_ports=host_config.get('publish_all_ports'),"
-------------------------------------------------------------------------
"self.parameters_map['expected_ports'] = 'expected_ports'
"
-------------------------------------------------------------------------
"Recom
PRs: 46594, 46640"
-------------------------------------------------------------------------
=========================================================================
"# version comparison. Otherwise we handle this depending on whether
# the container already runs or not; in the former case, in case the
# container needs to be restarted, we use the existing container's
# image ID.
image = self._get_image()
self.log(image, pretty_print=True)
if not container.exists:
    # New container
    self.log('No container found')
    if not self.parameters.image:
        self.fail('Cannot create container when image is not specified!')
    new_container = self.container_create(self.parameters.image, self.parameters.create_parameters)
    if new_container:
        container = new_container
else:
    # Existing container
    different, differences = container.has_different_configuration(image)
    image_different = False
    if self.parameters.comparisons['image']['comparison'] == 'strict':
        image_different = self._image_is_different(image, container)
    if image_different or different or self.parameters.recreate:
        self.diff['differences'] = differences
        if image_different:
            self.diff['image_different'] = True
        self.log(""differences"")
        self.log(differences, pretty_print=True)
        image_to_use = self.parameters.image
        if not image_to_use and container and container.Image:
            image_to_use = container.Image
        if not image_to_use:
            self.fail('Cannot recreate container when image is not specified or cannot be extracted from current container!')
        if container.running:
            self.container_stop(container.Id)
        self.container_remove(container.Id)
        new_container = self.container_create(image_to_use, self.parameters.create_parameters)
"
-------------------------------------------------------------------------
"image = self._get_image()
self.log(image, pretty_print=True)
if not container.running:
    # New container
    self.log('No container found')
    if not self.parameters.image:
        self.fail('Cannot create container when image is not specified!')
    new_container = self.ContainerManager.create(self.parameters.image, self.parameters.create_parameters)
    if new_container:
        container = new_container
else:
    # Existing container
    different, differences = container.has_different_configuration(image)
    image_different = False
    if self.parameters.comparisons['image']['comparison'] == 'strict':
        image_different = self._image_is_different(image, container)
    if image_different or different or self.parameters.recreate:
        self.DifferenceTracker['differences'] = differences
        if image_different:
            self.DifferenceTracker['image_different'] = True
        self.log(""differences"")
        self.log(differences, pretty_print=True)
        image_to_use = self.parameters.image
        if not image_to_use and container and container.raw['Image']:
            image_to_use = container.raw['Image']
        if not image_to_use:
            self.fail('Cannot recreate container when image is not specified or cannot be extracted from current container!')
        if self.container_running(container.raw):
            self.container_stop(container.Id)
        self.container_remove(container.Id)
        new_container = self.ContainerManager.create(image_to_use, self.parameters.create_parameters)"
-------------------------------------------------------------------------
"        # If the image parameter was passed then we need to deal with the image
        # version comparison. Otherwise we handle this depending on whether
        # the container already runs or not; in the former case, in case the
        # container needs to be restarted, we use the existing container's
        # image ID.
            if not self.parameters.image:
                self.fail('Cannot create container when image is not specified!')
"
-------------------------------------------------------------------------
"Recom
PRs: 46322, 46576"
-------------------------------------------------------------------------
=========================================================================
"- On macOS, this module uses C(dscl) to create, modify, and delete accounts. C(dseditgroup) is used to
  modify group membership. Accounts are hidden from the login window by modifying
  C(/Library/Preferences/com.apple.loginwindow.plist).
- On FreeBSD, this module uses C(pw useradd) and C(chpass) to create, C(pw usermod) and C(chpass) to modify,
  C(pw userdel) remove, C(pw lock) to lock, and C(pw unlock) to unlock accounts.
- On all other platforms, this module uses C(useradd) to create, C(usermod) to modify, and
  C(userdel) to remove accounts.
"
-------------------------------------------------------------------------
"if platform.system() == 'Darwin':
            # On macOS, use dscl to create, modify, and delete accounts
            # Use dseditgroup to modify group membership
            # Modify /Library/Preferences/com.apple.loginwindow.plist to hide accounts from the login window
        elif platform.system() == 'FreeBSD':
            # On FreeBSD, use pw useradd and chpass to create accounts
            # Use pw usermod and chpass to modify accounts
            # Use pw userdel to remove accounts
            # Use pw lock to lock accounts, and pw unlock to unlock accounts
        else:
            # On all other platforms, use useradd to create accounts
            # Use usermod to modify accounts
            # Use userdel to remove accounts"
-------------------------------------------------------------------------
"- On SunOS platforms, the shadow file is backed up automatically since this module edits it directly.
  On other platforms, the shadow file is backed up by the underlying tools used by this module.
- On macOS, this module uses C(dscl) to create, modify, and delete accounts. C(dseditgroup) is used to
  modify group membership. Accounts are hidden from the login window by modifying
  C(/Library/Preferences/com.apple.loginwindow.plist).
- On FreeBSD, this module uses C(pw useradd) and C(chpass) to create, C(pw usermod) and C(chpass) to modify,
  C(pw userdel) remove, C(pw lock) to lock, and C(pw unlock) to unlock accounts.
- On all other platforms, this module uses C(useradd) to create, C(usermod) to modify, and
  C(userdel) to remove accounts.
"
-------------------------------------------------------------------------
"Recom
PRs: 46455, 46512"
-------------------------------------------------------------------------
=========================================================================
"- On Linux, macOS and OpenBSD, this is converted to minutes and rounded down. If less than 60, it will be set to 0.
"
-------------------------------------------------------------------------
"has_python_36 = self.check_systemd_boot_time()
	if has_python_36 and not do_force and reboot_timeout:
		self.configured_reboot_timeout = reboot_timeout
	else:
		# Set to a minimum of 60 seconds
		if not reboot_timeout:
			self.configured_reboot_timeout = 60
		else:
			self.configured_reboot_timeout = max(0, int(reboot_timeout/60))
	self._current_timeout = self.configured_reboot_timeout"
-------------------------------------------------------------------------
"- On Linux, macOS, and OpenBSD this is converted to minutes and rounded down. If less than 60, it will be set to 0.
- On Solaris and FreeBSD this will be seconds.
"
-------------------------------------------------------------------------
"Recom
PRs: 46147, 46289"
-------------------------------------------------------------------------
=========================================================================
"if len(split_fields) == 3 and split_fields[0:2] == ['iam', 'security-credentials']:
"
-------------------------------------------------------------------------
"if len(new_fieldsitems) == 3 and new_fieldsitems[0:2] == ['iam', 'security-credentials']:"
-------------------------------------------------------------------------
"if len(split_fields) == 2 and split_fields[0:2] == ['iam', 'info_instanceprofilearn']:
    new_fields[self._prefix % ""iam-instance-profile-role""] = value.split('/')[1]
"
-------------------------------------------------------------------------
"Recom
PRs: 38664, 46077"
-------------------------------------------------------------------------
=========================================================================
"if len(split_fields) == 3 and split_fields[0:2] == ['iam', 'security-credentials']:
"
-------------------------------------------------------------------------
"if len(raw_subfields.split) == 3 and raw_subfields.split[0:2] == ['iam', 'security-credentials']:"
-------------------------------------------------------------------------
"if len(split_fields) == 2 and split_fields[0:2] == ['iam', 'info_instanceprofilearn']:
    new_fields[self._prefix % ""iam-instance-profile-role""] = value.split('/')[1]
"
-------------------------------------------------------------------------
"Recom
PRs: 38664, 46076"
-------------------------------------------------------------------------
=========================================================================
"self.comparisons = client.comparisons
if self.groups:
    # In case integers are passed as groups, we need to convert them to
    # strings as docker internally treats them as strings.
    self.groups = [str(g) for g in self.groups]
"
-------------------------------------------------------------------------
"self.comparisons = client.comparisons
if self.groups:
    # In case integers are passed as groups, we need to convert them to
    # strings as docker internally treats them as strings.
    self.groups = [str(gr) for gr in self.groups]"
-------------------------------------------------------------------------
"if self.client.HAS_UTS_MODE_OPT:
    host_config_params['uts_mode'] = 'uts'
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"cap_drop=host_config.get('CapDrop'),
"
-------------------------------------------------------------------------
cap_drop = self._get_host_config().get('CapDrop')
-------------------------------------------------------------------------
"self.parameters_map = dict()
self.parameters_map['expected_links'] = 'links'
self.parameters_map['expected_ports'] = 'published_ports'
self.parameters_map['expected_exposed'] = 'exposed_ports'
self.parameters_map['expected_volumes'] = 'volumes'
self.parameters_map['expected_ulimits'] = 'ulimits'
self.parameters_map['expected_sysctls'] = 'sysctls'
self.parameters_map['expected_etc_hosts'] = 'etc_hosts'
self.parameters_map['expected_env'] = 'env'
self.parameters_map['expected_entrypoint'] = 'entrypoint'
self.parameters_map['expected_binds'] = 'volumes'
self.parameters_map['expected_cmd'] = 'command'
self.parameters_map['expected_devices'] = 'devices'
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"compare = self.parameters.client.comparisons[self.parameters_map.get(key, key)]
self.log('check differences %s %s vs %s (%s)' % (key, getattr(self.parameters, key), str(value), compare))
    match = self._compare(getattr(self.parameters, key), value, compare)
"
-------------------------------------------------------------------------
"compare = self.parameters.client.comparisons[self.parameters_map.get(key, key)]
self.log('check differences %s %s vs %s (%s)' % (key, getattr(self.parameters, key), str(value), compare))
match = self._compare(getattr(self.parameters, key), value, compare)"
-------------------------------------------------------------------------
"if self.parameters.client.HAS_BLKIO_WEIGHT_OPT:
    # blkio_weight is only supported in docker>=1.9
    config_mapping['blkio_weight'] = host_config.get('BlkioWeight')
if self.parameters.client.HAS_CPUSET_MEMS_OPT:
    # cpuset_mems is only supported in docker>=2.3
    config_mapping['cpuset_mems'] = host_config.get('CpusetMems')
    if getattr(self.parameters, key, None):
        compare = self.parameters.client.comparisons[self.parameters_map.get(key, key)]
        match = self._compare(getattr(self.parameters, key), value, compare)
        if not match:
            # no match. record the differences
            item = dict()
            item[key] = dict(
                parameter=getattr(self.parameters, key),
                container=value
            )
            differences.append(item)
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"if self.parameters.client.HAS_BLKIO_WEIGHT_OPT:
    # blkio_weight is only supported in docker>=1.9
    config_mapping['blkio_weight'] = host_config.get('BlkioWeight')
if self.parameters.client.HAS_CPUSET_MEMS_OPT:
    # cpuset_mems is only supported in docker>=2.3
    config_mapping['cpuset_mems'] = host_config.get('CpusetMems')
    if getattr(self.parameters, key, None):
        compare = self.parameters.client.comparisons[self.parameters_map.get(key, key)]
        match = self._compare(getattr(self.parameters, key), value, compare)
        if not match:
            # no match. record the differences
            item = dict()
            item[key] = dict(
                parameter=getattr(self.parameters, key),
                container=value
            )
            differences.append(item)
"
-------------------------------------------------------------------------
"if distutils.version.LooseVersion(self.docker_py_version) >= distutils.version.LooseVersion('1.9') and self.parameters.client.HAS_BLKIO_WEIGHT_OPT:
    # blkio_weight is only supported in docker>=1.9
    config_mapping['blkio_weight'] = host_config.get('BlkioWeight')
if distutils.version.LooseVersion(self.docker_py_version) >= distutils.version.LooseVersion('2.3') and self.parameters.client.HAS_CPUSET_MEMS_OPT:
    # cpuset_mems is only supported in docker>=2.3
    config_mapping['cpuset_mems'] = host_config.get('CpusetMems')
    key = 'some_key'  # Choose the appropriate key
    if hasattr(self.parameters, key):
        if key in self.parameters.client.comparisons:
            compare = self.parameters.client.comparisons[key]
            value = getattr(self.parameters, key)
            match = self._compare(value, compare)
            if not match:
                # no match. record the differences
                item = {key: {'parameter': value, 'container': value}}
                differences.append(item)"
-------------------------------------------------------------------------
"def _compare_dict_allow_more_present(self, av, bv):
    '''
    Compare two dictionaries for whether every entry of the first is in the second.
    '''
    for key, value in av.items():
        if key not in bv:
            return False
        if bv[key] != value:
            return False
    return True
def _compare(self, a, b, compare):
    '''
    Compare values a and b as described in compare.
    '''
    method = compare['comparison']
    if method == 'ignore':
        return True
    # If a or b is None:
    if a is None or b is None:
        # If both are None: equality
        if a == b:
            return True
        # Otherwise, not equal for values, and equal
        # if the other is empty for set/list/dict
        if compare['type'] == 'value':
            return False
        return len(b if a is None else a) == 0
    # Do proper comparison (both objects not None)
    if compare['type'] == 'value':
        return a == b
    elif compare['type'] == 'list':
        if method == 'strict':
            return a == b
        else:
            set_a = set(a)
            set_b = set(b)
            return set_b >= set_a
    elif compare['type'] == 'dict':
        if method == 'strict':
            return a == b
        else:
            return self._compare_dict_allow_more_present(a, b)
    elif compare['type'] == 'set':
        set_a = set(a)
        set_b = set(b)
        if method == 'strict':
            return set_a == set_b
        else:
            return set_b >= set_a
    elif compare['type'] == 'set(dict)':
        for av in a:
            found = False
            for bv in b:
                if self._compare_dict_allow_more_present(av, bv):
                    found = True
                    break
            if not found:
                return False
        if method == 'strict':
            # If we would know that both a and b do not contain duplicates,
            # we could simply compare len(a) to len(b) to finish this test.
            # We can assume that b has no duplicates (as it is returned by
            # docker), but we don't know for a.
            for bv in b:
                found = False
                for av in a:
                    if self._compare_dict_allow_more_present(av, bv):
                        found = True
                        break
                if not found:
                    return False
        return True
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"if self.parameters.comparisons['image']['comparison'] == 'strict':
"
-------------------------------------------------------------------------
if self.parameters.comparisons['image']['comparison'] == docker_version['strict']:
-------------------------------------------------------------------------
"def _setup_comparisons(self):
    comparisons = {}
    comp_aliases = {}
    # Put in defaults
    explicit_types = dict(
        command='list',
        devices='set(dict)',
        dns_search_domains='list',
        dns_servers='list',
        env='set',
        entrypoint='list',
        etc_hosts='set',
        ulimits='set(dict)',
    )
    for option, data in self.module.argument_spec.items():
        # Ignore options which aren't used as container properties
        if option in ('docker_host', 'tls_hostname', 'api_version', 'timeout', 'cacert_path', 'cert_path',
                      'key_path', 'ssl_version', 'tls', 'tls_verify', 'debug', 'env_file', 'force_kill',
                      'keep_volumes', 'ignore_image', 'name', 'pull', 'purge_networks', 'recreate',
                      'restart', 'state', 'stop_timeout', 'trust_image_content', 'networks'):
            continue
        # Determine option type
        if option in explicit_types:
            type = explicit_types[option]
        elif data['type'] == 'list':
            type = 'set'
        elif data['type'] == 'dict':
            type = 'dict'
        else:
            type = 'value'
        # Determine comparison type
        if type in ('list', 'value'):
            comparison = 'strict'
        else:
            comparison = 'allow_more_present'
        comparisons[option] = dict(type=type, comparison=comparison, name=option)
        # Keep track of aliases
        comp_aliases[option] = option
        for alias in data.get('aliases', []):
            comp_aliases[alias] = option
    # Process legacy ignore options
    if self.module.params['ignore_image']:
        comparisons['image']['comparison'] = 'ignore'
    self.comparisons = comparisons
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"def _setup_comparisons(self):
    comparisons = {}
    comp_aliases = {}
    # Put in defaults
    explicit_types = dict(
        command='list',
        devices='set(dict)',
        dns_search_domains='list',
        dns_servers='list',
        env='set',
        entrypoint='list',
        etc_hosts='set',
        ulimits='set(dict)',
    )
    for option, data in self.module.argument_spec.items():
        # Ignore options which aren't used as container properties
        if option in ('docker_host', 'tls_hostname', 'api_version', 'timeout', 'cacert_path', 'cert_path',
                      'key_path', 'ssl_version', 'tls', 'tls_verify', 'debug', 'env_file', 'force_kill',
                      'keep_volumes', 'ignore_image', 'name', 'pull', 'purge_networks', 'recreate',
                      'restart', 'state', 'stop_timeout', 'trust_image_content', 'networks'):
            continue
        # Determine option type
        if option in explicit_types:
            type = explicit_types[option]
        elif data['type'] == 'list':
            type = 'set'
        elif data['type'] == 'dict':
            type = 'dict'
        else:
            type = 'value'
        # Determine comparison type
        if type in ('list', 'value'):
            comparison = 'strict'
        else:
            comparison = 'allow_more_present'
        comparisons[option] = dict(type=type, comparison=comparison, name=option)
        # Keep track of aliases
        comp_aliases[option] = option
        for alias in data.get('aliases', []):
            comp_aliases[alias] = option
    # Process legacy ignore options
    if self.module.params['ignore_image']:
        comparisons['image']['comparison'] = 'ignore'
    self.comparisons = comparisons
"
-------------------------------------------------------------------------
"def _setup_comparisons(self):
    comparisons = {}
    comp_aliases = {}
    # Put in defaults
    explicit_types = dict(
        command='list',
        devices='set(dict)',
        dns_search_domains='list',
        dns_servers='list',
        env='set',
        entrypoint='list',
        etc_hosts='set',
        ulimits='set(dict)',
    )
    for option, data in self.argument_spec.items():
        # Ignore options which aren't used as container properties
        if option in ('docker_host', 'tls_hostname', 'api_version', 'timeout', 'cacert_path', 'cert_path',
                      'key_path', 'ssl_version', 'tls', 'tls_verify', 'debug', 'env_file', 'force_kill',
                      'keep_volumes', 'ignore_image', 'name', 'pull', 'purge_networks', 'recreate',
                      'restart', 'state', 'stop_timeout', 'trust_image_content', 'networks'):
            continue
        # Determine option type
        if option in explicit_types:
            type = explicit_types[option]
        elif data['type'] == 'list':
            type = 'set'
        elif data['type'] == 'dict':
            type = 'dict'
        else:
            type = 'value'
        # Determine comparison type
        if type in ('list', 'value'):
            comparison = 'strict'
        else:
            comparison = 'allow_more_present'
        comparisons[option] = dict(type=type, comparison=comparison, name=option)
        # Keep track of aliases
        comp_aliases[option] = option
        for alias in data.get('aliases', []):
            comp_aliases[alias] = option
    # Process legacy ignore options
    if self.params['ignore_image']:
        comparisons['image']['comparison'] = 'ignore'
    self.comparisons = comparisons"
-------------------------------------------------------------------------
"if self.parameters.comparisons['image']['comparison'] == 'strict':
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"if vpc_id:
    vpc_wins = dict((group['GroupName'], group) for group in all_groups if group['VpcId'] == vpc_id)
    groups.update(vpc_wins)
"
-------------------------------------------------------------------------
"if vpc_id:
    vpc_wins = dict((group['GroupName'], group) for group in all_groups if group['VpcId'] == vpc_id)
    groups.update(vpc_wins)"
-------------------------------------------------------------------------
"if vpc_id:
    vpc_wins = dict((group['GroupName'], group) for group in all_groups if group.get('VpcId') and group['VpcId'] == vpc_id)
    groups.update(vpc_wins)
"
-------------------------------------------------------------------------
"Recom
PRs: 45787, 45815"
-------------------------------------------------------------------------
=========================================================================
"if checksum != destination_checksum:
    checksum_mismatch = True
t forcing redownload, unless checksum does not match
ot force and not checksum_mismatch:
# Not forcing redownload, unless checksum does not match
# allow file attribute changes
module.params['path'] = dest
file_args = module.load_file_common_arguments(module.params)
file_args['path'] = dest
result['changed'] = module.set_fs_attributes_if_different(file_args, False)
if result['changed']:
    module.exit_json(msg=""file already exists but file attributes changed"", **result)
module.exit_json(msg=""file already exists"", **result)
"
-------------------------------------------------------------------------
"if not force and checksum != destination_checksum:
    # Not forcing redownload, unless checksum does not match
    # allow file attribute changes
    module.params['path'] = dest
    file_args = module.load_file_common_arguments(module.params)
    file_args['path'] = dest
    changed = module.set_fs_attributes_if_different(file_args, False)
    
    if changed:
        module.exit_json(msg=""file already exists but file attributes changed"", dest=dest, url=url, changed=changed)
    
    module.exit_json(msg=""file already exists"", dest=dest, url=url, changed=changed)"
-------------------------------------------------------------------------
"if checksum != destination_checksum:
    checksum_mismatch = True
t forcing redownload, unless checksum does not match
ot force and not checksum_mismatch:
# Not forcing redownload, unless checksum does not match
# allow file attribute changes
module.params['path'] = dest
file_args = module.load_file_common_arguments(module.params)
file_args['path'] = dest
changed = module.set_fs_attributes_if_different(file_args, False)
if changed:
    module.exit_json(msg=""file already exists but file attributes changed"", dest=dest, url=url, changed=changed)
module.exit_json(msg=""file already exists"", dest=dest, url=url, changed=changed)
"
-------------------------------------------------------------------------
"Recom
PRs: 45495, 45565"
-------------------------------------------------------------------------
=========================================================================
"args = module.params['arguments']
cmd = ""%s %s %s"" % (script, doit, """" if args is None else args)
"
-------------------------------------------------------------------------
"args = get_sysv_script(module.params['args'])
cmd = ""%s %s %s"" % (script, doit, """" if args is None else args)"
-------------------------------------------------------------------------
"if enabled is not None and enabled != runlevel_status[""enabled""]:
"
-------------------------------------------------------------------------
"Recom
PRs: 42786, 43831"
-------------------------------------------------------------------------
=========================================================================
"err = '\n'
"
-------------------------------------------------------------------------
err = os.linesep
-------------------------------------------------------------------------
"err = to_native(stderr or """")
if err and not err.endswith('\n'):
    err = '\n'
"
-------------------------------------------------------------------------
"Recom
PRs: 39019, 39430"
-------------------------------------------------------------------------
=========================================================================
"- ""To use this module, it has to be executed twice. Either as two
   different tasks in the same run or during two runs. Note that the output
   of the first run needs to be recorded and passed to the second run as the
   module argument C(data).""
   U(https://tools.ietf.org/html/draft-ietf-acme-acme-09#section-8).
   Also, consider the examples provided for this module.""
"
-------------------------------------------------------------------------
"# To use this module, it has to be executed twice. Either as two
# different tasks in the same run or during two runs. Note that the output
# of the first run needs to be recorded and passed to the second run as the
# module argument data (refer to https://tools.ietf.org/html/draft-ietf-acme-acme-09#section-8).
# Also, consider the examples provided for this module."
-------------------------------------------------------------------------
"- ""To use this module, it has to be executed twice. Either as two
   different tasks in the same run or during two runs. Note that the output
   of the first run needs to be recorded and passed to the second run as the
   module argument C(data).""
"
-------------------------------------------------------------------------
"Recom
PRs: 38135, 38160"
-------------------------------------------------------------------------
=========================================================================
"https://tools.ietf.org/html/draft-ietf-acme-acme-10#section-6.2
"
-------------------------------------------------------------------------
"import textwrap
import base64
from ansible.module_utils import basic as ansible_basic
from ansible.module_utils import urls as ansible_urls
import json
import binascii
import os
import re
import hashlib
import shutil
import time
import traceback
import copy
import datetime
import locale
import tempfile

def target_method():
    # Adapted code based on stable version information

    # Define the stable version library information
    import textwrap
    import base64
    from ansible.module_utils import basic as ansible_basic
    from ansible.module_utils import urls as ansible_urls
    import json
    import binascii
    import os
    import re
    import hashlib
    import shutil
    import time
    import ansible.module_utils._text
    import ansible.module_utils.urls
    import tempfile
    import traceback
    import copy
    import datetime
    import locale

    try:
        import six
    except ImportError:
        from ansible.module_utils.six.moves import urllib_parse as urllib

    # Functionality related to the stable version
    try:
        from acme import messages
        from acme import challenges
        from acme import crypto_util
        from acme import errors
        from acme import jose
        from acme import messages2
        from acme import proof_of_possession
        from acme import util as acme_util
        from acme.client import Client
        from acme import messages3
    except ImportError:
        Client = None

    # Utilize the stable version information within the target method
    wrapped_text = textwrap.dedent(""""""
        This is a stable version based on draft-ietf-acme-acme-10.
        Please refer to the stable documentation for more details.
    """""")
    print(wrapped_text)

    # Ensure functionality within the target method
    # Add or update code here based on the requirements of the target method"
-------------------------------------------------------------------------
"headers = {
    'Content-Type': 'application/josejson',
}
resp, info = fetch_url(self.module, url, data=data, headers=headers, method='POST')
"
-------------------------------------------------------------------------
"Recom
PRs: 37165, 37190"
-------------------------------------------------------------------------
=========================================================================
"# Copyright (c) 2018 Matt Martz <matt@sivel.net>
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# -*- coding: utf-8 -*-
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type
import pytest
from ansible.executor.module_common import modify_module
from ansible.module_utils.six import PY2
from test_module_common import templar
FAKE_OLD_MODULE = b'''#!/usr/bin/python
import sys
print('{""result"": ""%s""}' % sys.executable)
'''
@pytest.fixture
def fake_old_module_open(mocker):
    m = mocker.mock_open(read_data=FAKE_OLD_MODULE)
    if PY2:
        mocker.patch('__builtin__.open', m)
    else:
        mocker.patch('builtins.open', m)
def test_shebang(fake_old_module_open):
    (data, style, shebang) = modify_module('fake_module', 'fake_path', {})
    assert shebang == '#!/usr/bin/python'
def test_shebang_task_vars(fake_old_module_open, templar):
    task_vars = {
        'ansible_python_interpreter': '/usr/bin/python3'
    }
    (data, style, shebang) = modify_module('fake_module', 'fake_path', {}, task_vars=task_vars, templar=templar)
    assert shebang == '#!/usr/bin/python3'
"
-------------------------------------------------------------------------
"import pytest
from ansible.executor.module_common import modify_module
from ansible.module_utils.six import PY2
from test_module_common import templar

FAKE_OLD_MODULE = b'''#!/usr/bin/python
import sys
print('{""result"": ""%s""}' % sys.executable)
'''

def fake_old_module_open(mocker):
    m = mocker.mock_open(read_data=FAKE_OLD_MODULE)
    if PY2:
        mocker.patch('__builtin__.open', m)
    else:
        mocker.patch('builtins.open', m)

    # Backported fix for stable-2.4
    fake_old_module_open(mocker)

def test_shebang(fake_old_module_open):
    (data, style, shebang) = modify_module('fake_module', 'fake_path', {})
    assert shebang == '#!/usr/bin/python'

def test_shebang_task_vars(fake_old_module_open, templar):
    task_vars = {
        'ansible_python_interpreter': '/usr/bin/python3'
    }
    (data, style, shebang) = modify_module('fake_module', 'fake_path', {}, task_vars=task_vars, templar=templar)
    assert shebang == '#!/usr/bin/python3'"
-------------------------------------------------------------------------
"# Copyright (c) 2018 Matt Martz <matt@sivel.net>
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# -*- coding: utf-8 -*-
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type
import pytest
from ansible.executor.module_common import modify_module
from ansible.module_utils.six import PY2
FAKE_OLD_MODULE = b'''#!/usr/bin/python
import sys
print('{""result"": ""%s""}' % sys.executable)
'''
@pytest.fixture
def fake_old_module_open(mocker):
    m = mocker.mock_open(read_data=FAKE_OLD_MODULE)
    if PY2:
        mocker.patch('__builtin__.open', m)
    else:
        mocker.patch('builtins.open', m)
def test_shebang(fake_old_module_open):
    (data, style, shebang) = modify_module('fake_module', 'fake_path', {})
    assert shebang == '#!/usr/bin/python'
def test_shebang_task_vars(fake_old_module_open):
    task_vars = {
        'ansible_python_interpreter': '/usr/bin/python3'
    }
    (data, style, shebang) = modify_module('fake_module', 'fake_path', {}, task_vars=task_vars)
    assert shebang == '#!/usr/bin/python3'
"
-------------------------------------------------------------------------
"Recom
PRs: 36602, 36607"
-------------------------------------------------------------------------
=========================================================================
"new_ir = self._copy_included_file(included_file)
new_blocks, handler_blocks = new_ir.get_block_list(
"
-------------------------------------------------------------------------
"new_included_file = self._copy_included_file(included_file)
new_blocks, handler_blocks = new_included_file.get_block_list()"
-------------------------------------------------------------------------
"new_ir = self._copy_included_file(included_file)
"
-------------------------------------------------------------------------
"Recom
PRs: 36470, 36526"
-------------------------------------------------------------------------
=========================================================================
"part['size'] = bytes_to_human((float(part['sectors']) * 512.0))
"
-------------------------------------------------------------------------
part['size'] = convert_bytes_to_human((float(part['sectors']) * 512.0))
-------------------------------------------------------------------------
"part['size'] = self.module.pretty_bytes((float(part['sectors']) * 512.0))
"
-------------------------------------------------------------------------
"Recom
PRs: 34475, 34645"
-------------------------------------------------------------------------
=========================================================================
"d['size'] = bytes_to_human(float(d['sectors']) * 512.0)
"
-------------------------------------------------------------------------
d['size'] = _text.bytes_to_human(float(d['sectors']) * 512.0)
-------------------------------------------------------------------------
"d['size'] = self.module.pretty_bytes(float(d['sectors']) * 512.0)
"
-------------------------------------------------------------------------
"Recom
PRs: 34475, 34645"
-------------------------------------------------------------------------
=========================================================================
"if moid in ['group-d1', 'ha-folder-root']:
"
-------------------------------------------------------------------------
"if moid in ['group-d1', 'ha-folder-root']:"
-------------------------------------------------------------------------
"try:
    moid = thisobj._moId
except AttributeError:
    moid = None
if moid in ['group-d1', 'ha-folder-root']:
"
-------------------------------------------------------------------------
"Recom
PRs: 31133, 32671"
-------------------------------------------------------------------------
=========================================================================
"if not no_password_changes and (password is not None or role_attr_flags != '' or expires is not None):
"
-------------------------------------------------------------------------
if not no_password_changes and (password is not None or role_attr_flags != '' or expires is not None):
-------------------------------------------------------------------------
"if not no_password_changes and (password is not None or role_attr_flags != ''):
"
-------------------------------------------------------------------------
"Recom
PRs: 26539, 26541"
-------------------------------------------------------------------------
=========================================================================
"if expires is not None:
    cursor.execute(""SELECT %s::timestamptz;"", (expires,))
    expires_with_tz = cursor.fetchone()[0]
    expires_changing = expires_with_tz != current_role_attrs.get('rolvaliduntil')
else:
    expires_changing = False
"
-------------------------------------------------------------------------
"if expires is not None:
            cursor.execute(""SELECT %s::timestamptz;"", (expires,))
            expires_with_tz = cursor.fetchone()[0]
            expires_changing = expires_with_tz != current_role_attrs.get('rolvaliduntil')
        else:
            expires_changing = False"
-------------------------------------------------------------------------
"expires_changing = (expires is not None and expires == current_role_attrs['rolvaliduntil'])
"
-------------------------------------------------------------------------
"Recom
PRs: 26539, 26541"
-------------------------------------------------------------------------
=========================================================================
