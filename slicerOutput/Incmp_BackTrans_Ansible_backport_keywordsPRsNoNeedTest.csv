"units_dir = os.path.join(data_context().content.unit_path, 'plugins', 'connection')
        'units': units_dir,
units_path = os.path.join(units_dir, 'test_%s.py' % name)
"
-------------------------------------------------------------------------
"```python
units_dir = os.path.join(data_context().content.unit_path, 'plugins', 'connection')
        'units': units_dir,
if units_path not in self.units_paths:
    units_path = None
```"
-------------------------------------------------------------------------
"units_dir = os.path.join(data_context().content.unit_path, 'plugins', 'connection')
        'units': units_dir,
units_path = os.path.join(units_dir, 'test_%s.py' % name)
"
-------------------------------------------------------------------------
"Recom
PRs: 73877, 73889"
-------------------------------------------------------------------------
=========================================================================
"units_dir = os.path.join(data_context().content.unit_path, 'plugins', 'inventory')
units_path = os.path.join(units_dir, 'test_%s.py' % name)
"
-------------------------------------------------------------------------
"```python
import os
from data import data_context

units_dir = os.path.join(data_context().content.unit_path, 'plugins', 'inventory')
units_path = os.path.join(units_dir, 'test_%s.py' % name)
```"
-------------------------------------------------------------------------
"units_dir = os.path.join(data_context().content.unit_path, 'plugins', 'inventory')
units_path = os.path.join(units_dir, 'test_%s.py' % name)
"
-------------------------------------------------------------------------
"Recom
PRs: 73877, 73889"
-------------------------------------------------------------------------
=========================================================================
"units_dir = os.path.join(data_context().content.unit_path, 'plugins', 'connection')
        'units': units_dir,
units_path = os.path.join(units_dir, 'test_%s.py' % name)
"
-------------------------------------------------------------------------
"```python
import os

units_dir = os.path.join(data_context().content.unit_path, 'plugins', 'connection')
'units': units_dir,
units_path = os.path.join(units_dir, 'test_%s.py' % name)
```"
-------------------------------------------------------------------------
"units_dir = os.path.join(data_context().content.unit_path, 'plugins', 'connection')
        'units': units_dir,
units_path = os.path.join(units_dir, 'test_%s.py' % name)
"
-------------------------------------------------------------------------
"Recom
PRs: 73877, 73888"
-------------------------------------------------------------------------
=========================================================================
"units_dir = os.path.join(data_context().content.unit_path, 'plugins', 'inventory')
units_path = os.path.join(units_dir, 'test_%s.py' % name)
"
-------------------------------------------------------------------------
"```python
import os

units_dir = os.path.join(data_context().content.unit_path, 'plugins', 'inventory')
units_path = os.path.join(units_dir, 'test_%s.py' % name)
```"
-------------------------------------------------------------------------
"units_dir = os.path.join(data_context().content.unit_path, 'plugins', 'inventory')
units_path = os.path.join(units_dir, 'test_%s.py' % name)
"
-------------------------------------------------------------------------
"Recom
PRs: 73877, 73888"
-------------------------------------------------------------------------
=========================================================================
"# Empty the list used by os.walk to avoid traversing deeper unnecessarily
del(dirs[:])
"
-------------------------------------------------------------------------
"```python
# Empty the list used by os.walk to avoid traversing deeper unnecessarily
dirs.clear()
```"
-------------------------------------------------------------------------
"# Empty the list used by os.walk to avoid traversing deeper unnecessarily
del(dirs[:])
"
-------------------------------------------------------------------------
"Recom
PRs: 73718, 73808"
-------------------------------------------------------------------------
=========================================================================
"out, err = '', ''

"
-------------------------------------------------------------------------
"out, err = '', ''"
-------------------------------------------------------------------------
"out, err = '', ''

"
-------------------------------------------------------------------------
"Recom
PRs: 66322, 73803"
-------------------------------------------------------------------------
=========================================================================
"class AlmaLinuxHostname(Hostname):
platform = 'Linux'
distribution = 'Almalinux'
strategy_class = SystemdStrategy


"
-------------------------------------------------------------------------
"```python
class AlmaLinuxHostname(Hostname):
    platform = 'Linux'
    distribution = 'Almalinux'
    strategy_class = SystemdStrategy
```"
-------------------------------------------------------------------------
"class AlmaLinuxHostname(Hostname):
platform = 'Linux'
distribution = 'Almalinux'
strategy_class = SystemdStrategy


"
-------------------------------------------------------------------------
"Recom
PRs: 73619, 73649"
-------------------------------------------------------------------------
=========================================================================
"class AlmaLinuxHostname(Hostname):
platform = 'Linux'
distribution = 'Almalinux'
strategy_class = SystemdStrategy


"
-------------------------------------------------------------------------
"class AlmaLinuxHostname(Hostname):
    platform = 'Linux'
    distribution = 'Almalinux'
    strategy_class = SystemdStrategy"
-------------------------------------------------------------------------
"class AlmaLinuxHostname(Hostname):
platform = 'Linux'
distribution = 'Almalinux'
strategy_class = SystemdStrategy


"
-------------------------------------------------------------------------
"Recom
PRs: 73619, 73648"
-------------------------------------------------------------------------
=========================================================================
"VERSION = '2.10'
"
-------------------------------------------------------------------------
VERSION = '3.0.0'
-------------------------------------------------------------------------
"copyright = ""2021 Red Hat, Inc.""
"
-------------------------------------------------------------------------
"Recom
PRs: 73616, 73637"
-------------------------------------------------------------------------
=========================================================================
"copyright = ""2021 Red Hat, Inc.""
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='html_short_title', ctx=Store())], value=Constant(value='Ansible Core Documentation'))
- Assign(targets=[Name(id='copyright', ctx=Store())], value=Constant(value='2021 Red Hat, Inc.'))"
-------------------------------------------------------------------------
"exclude_patterns = [
'2.10_index.rst',
'ansible_index.rst',
'core_index.rst',
'porting_guides/core_porting_guides',

"
-------------------------------------------------------------------------
"Recom
PRs: 73616, 73637"
-------------------------------------------------------------------------
=========================================================================
"exclude_patterns = [
'2.10_index.rst',
'ansible_index.rst',
'core_index.rst',
'porting_guides/core_porting_guides',

"
-------------------------------------------------------------------------
"```python
exclude_patterns = [
    'index.rst',
    'galaxy',
    'network',
    'scenario_guides',
    'ansible_index.rst'
]
```"
-------------------------------------------------------------------------
"# -*- coding: utf-8 -*-
#
# documentation build configuration file, created by
# sphinx-quickstart on Sat Sep 27 13:23:22 2008-2009.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# The contents of this file are pickled, so don't put values in the namespace
# that aren't pickleable (module imports are okay, they're removed
# automatically).
#
# All configuration values have a default value; values that are commented out
# serve to show the default value.

from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

import sys
import os

# pip install sphinx_rtd_theme
# import sphinx_rtd_theme
# html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# If your extensions are in another directory, add it here. If the directory
# is relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
# sys.path.append(os.path.abspath('some/directory'))
#
sys.path.insert(0, os.path.join('ansible', 'lib'))
sys.path.append(os.path.abspath(os.path.join('..', '_extensions')))

# We want sphinx to document the ansible modules contained in this repository,
# not those that may happen to be installed in the version
# of Python used to run sphinx.  When sphinx loads in order to document,
# the repository version needs to be the one that is loaded:
sys.path.insert(0, os.path.abspath(os.path.join('..', '..', '..', 'lib')))

VERSION = '3'
AUTHOR = 'Ansible, Inc'


# General configuration
# ---------------------

# Add any Sphinx extension module names here, as strings.
# They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
# TEST: 'sphinxcontrib.fulltoc'
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.intersphinx', 'pygments_lexer', 'notfound.extension']

# Later on, add 'sphinx.ext.viewcode' to the list if you want to have
# colorized code generated too for references.


# Add any paths that contain templates here, relative to this directory.
templates_path = ['.templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General substitutions.
project = 'Ansible'
copyright = ""2021 Red Hat, Inc.""

# The default replacements for |version| and |release|, also used in various
# other places throughout the built documents.
#
# The short X.Y version.
version = VERSION
# The full version, including alpha/beta/rc tags.
release = VERSION

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
today_fmt = '%B %d, %Y'

# List of documents that shouldn't be included in the build.
# unused_docs = []

# List of directories, relative to source directories, that shouldn't be
# searched for source files.
# exclude_dirs = []

# A list of glob-style patterns that should be excluded when looking
# for source files.
exclude_patterns = [
'2.10_index.rst',
'ansible_index.rst',
'core_index.rst',
'porting_guides/core_porting_guides.rst',
'porting_guides/porting_guide_base_2.10.rst',
'porting_guides/porting_guide_core_2.11.rst',
'roadmap/index.rst',
'roadmap/ansible_base_roadmap_index.rst',
'roadmap/ROADMAP_2_10.rst',
'roadmap/ROADMAP_2_11.rst'


e reST default role (used for this markup: `text`) to use for all
cuments.
fault_role = None

 true, '()' will be appended to :func: etc. cross-reference text.
d_function_parentheses = True

 true, the current module name will be prepended to all description
it titles (such as .. function::).
d_module_names = True

 true, sectionauthor and moduleauthor directives will be shown in the
tput. They are ignored by default.
ow_authors = False

e name of the Pygments (syntax highlighting) style to use.
ents_style = 'sphinx'

light_language = 'YAMLJinja'

bstitutions, variables, entities, & shortcuts for text which do not need to link to anything.
r titles which should be a link, use the intersphinx anchors set at the index, chapter, and section levels, such as  qi_start_:
r| is useful for formatting fields inside of tables
| is a nonbreaking space; similarly useful inside of tables
epilog = """"""
br| raw:: html

br>
_| unicode:: 0xA0
:trim:



tions for HTML output
---------------------

_theme_path = ['../_themes']
_theme = 'sphinx_rtd_theme'
_short_title = 'Ansible Documentation'
_show_sphinx = False

_theme_options = {
'canonical_url': ""https://docs.ansible.com/ansible/latest/"",
'vcs_pageview_mode': 'edit'


_context = {
'display_github': 'True',
'github_user': 'ansible',
'github_repo': 'ansible',
'github_version': 'devel/docs/docsite/rst/',
'github_module_version': 'devel/lib/ansible/modules/',
'github_root_dir': 'devel/lib/ansible',
'github_cli_version': 'devel/lib/ansible/cli/',
'current_version': version,
'latest_version': '3',
# list specifically out of order to make latest work
'available_versions': ('latest', '2.10', '2.9', '2.9_ja', '2.8', 'devel'),
'css_files': ('_static/ansible.css',  # overrides to the standard theme
              ),


e style sheet to use for HTML and HTML Help pages. A file of that name
st exist either in Sphinx' static/ path, or in one of the custom paths
ven in html_static_path.
ml_style = 'solar.css'

e name for this set of Sphinx documents.  If None, it defaults to
project> v<release> documentation"".
_title = 'Ansible Documentation'

shorter title for the navigation bar.  Default is the same as html_title.
ml_short_title = None

e name of an image file (within the static path) to place at the top of
e sidebar.
ml_logo =

e name of an image file (within the static path) to use as favicon of the
cs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
xels large.
ml_favicon = 'favicon.ico'

d any paths that contain custom static files (such as style sheets) here,
lative to this directory. They are copied after the builtin static files,
 a file named ""default.css"" will overwrite the builtin ""default.css"".
_static_path = ['../_static']

 not '', a 'Last updated on:' timestamp is inserted at every page bottom,
ing the given strftime format.
_last_updated_fmt = '%b %d, %Y'

 true, SmartyPants will be used to convert quotes and dashes to
pographically correct entities.
ml_use_smartypants = True

stom sidebar templates, maps document names to template names.
ml_sidebars = {}

ditional templates that should be rendered to pages, maps page names to
mplate names.
ml_additional_pages = {}

 false, no module index is generated.
ml_use_modindex = True

 false, no index is generated.
ml_use_index = True

 true, the index is split into individual pages for each letter.
ml_split_index = False

 true, the reST sources are included in the HTML build as _sources/<name>.
_copy_source = False

 true, an OpenSearch description file will be output, and all pages will
ntain a <link> tag referring to it.  The value of this option must be the
se URL from which the finished HTML is served.
ml_use_opensearch = 'https://docs.ansible.com/ansible/latest'

 nonempty, this is the file name suffix for HTML files (e.g. "".xhtml"").
ml_file_suffix = ''

tput file base name for HTML help builder.
help_basename = 'Poseidodoc'

nfiguration for sphinx-notfound-pages
th no 'notfound_template' and no 'notfound_context' set,
e extension builds 404.rst into a location-agnostic 404 page

fault is `en` - using this for the sub-site:
ound_default_language = ""ansible""
fault is `latest`:
tting explicitly - docsite serves up /ansible/latest/404.html
 keep this set to `latest` even on the `devel` branch
en no maintenance is needed when we branch a new stable_x.x
ound_default_version = ""latest""
kes default setting explicit:
ound_no_urls_prefix = False

tions for LaTeX output
----------------------

e paper size ('letter' or 'a4').
tex_paper_size = 'letter'

e font size ('10pt', '11pt' or '12pt').
tex_font_size = '10pt'

ouping the document tree into LaTeX files. List of tuples
ource start file, target name, title, author, document class
owto/manual]).
x_documents = [
('index', 'ansible.tex', 'Ansible 2.2 Documentation', AUTHOR, 'manual'),


e name of an image file (relative to this directory) to place at the top of
e title page.
tex_logo = None

r ""manual"" documents, if this is true, then toplevel headings are parts,
t chapters.
tex_use_parts = False

ditional stuff for the LaTeX preamble.
tex_preamble = ''

cuments to append as an appendix to all manuals.
tex_appendices = []

 false, no module index is generated.
tex_use_modindex = True

class_content = 'both'

te:  Our strategy for intersphinx mappings is to have the upstream build location as the
nonical source and then cached copies of the mapping stored locally in case someone is building
en disconnected from the internet.  We then have a script to update the cached copies.

cause of that, each entry in this mapping should have this format:
name: ('http://UPSTREAM_URL', (None, 'path/to/local/cache.inv'))

e update script depends on this format so deviating from this (for instance, adding a third
cation for the mappning to live) will confuse it.
rsphinx_mapping = {'python': ('https://docs.python.org/2/', (None, '../python2.inv')),
                   'python3': ('https://docs.python.org/3/', (None, '../python3.inv')),
                   'jinja2': ('http://jinja.palletsprojects.com/', (None, '../jinja2.inv')),
                   'ansible_2_10': ('https://docs.ansible.com/ansible/2.10/', (None, '../ansible_2_10.inv')),
                   'ansible_2_9': ('https://docs.ansible.com/ansible/2.9/', (None, '../ansible_2_9.inv')),
                   'ansible_2_8': ('https://docs.ansible.com/ansible/2.8/', (None, '../ansible_2_8.inv')),
                   'ansible_2_7': ('https://docs.ansible.com/ansible/2.7/', (None, '../ansible_2_7.inv')),
                   'ansible_2_6': ('https://docs.ansible.com/ansible/2.6/', (None, '../ansible_2_6.inv')),
                   'ansible_2_5': ('https://docs.ansible.com/ansible/2.5/', (None, '../ansible_2_5.inv')),
                   }

nckchecker settings
check_ignore = [
r'http://irc\.freenode\.net',

check_workers = 25
nkcheck_anchors = False
"
-------------------------------------------------------------------------
"Recom
PRs: 73616, 73637"
-------------------------------------------------------------------------
=========================================================================
"'EulerOS', 'openEuler', 'AlmaLinux'],
"
-------------------------------------------------------------------------
"OS_FAMILY_MAP = {'RedHat': ['RedHat', 'Fedora', 'CentOS', 'Scientific', 'SLC',
                                 'Ascendos', 'CloudLinux', 'PSBM', 'OracleLinux', 'OVS',
                                 'OEL', 'Amazon', 'Virtuozzo', 'XenServer', 'Alibaba', 'EulerOS', 'openEuler',
                      'Debian': ['Debian', 'Ubuntu', 'Raspbian', 'Neon', 'KDE neon',
                                 'Linux Mint', 'SteamOS', 'Devuan', 'Kali', 'Cumulus Linux',
                                 'Pop!_OS', 'Parrot', 'Pardus GNU/Linux', 'AlmaLinux'],"
-------------------------------------------------------------------------
"'OEL', 'Amazon', 'Virtuozzo', 'XenServer', 'Alibaba',
'AlmaLinux'],
"
-------------------------------------------------------------------------
"Recom
PRs: 73541, 73544"
-------------------------------------------------------------------------
=========================================================================
"'EulerOS', 'openEuler', 'AlmaLinux'],
"
-------------------------------------------------------------------------
"OS_FAMILY_MAP = {'RedHat': ['RedHat', 'Fedora', 'CentOS', 'Scientific', 'SLC',
                                 'Ascendos', 'CloudLinux', 'PSBM', 'OracleLinux', 'OVS',
                                 'OEL', 'Amazon', 'Virtuozzo', 'XenServer', 'Alibaba', 'AlmaLinux',
                      'Debian': ['Debian', 'Ubuntu', 'Raspbian', 'Neon', 'KDE neon',
                                 'Linux Mint', 'SteamOS', 'Devuan', 'Kali', 'Cumulus Linux',
                                 'Pop!_OS', 'Parrot', 'Pardus GNU/Linux', 'EulerOS', 'openEuler']}"
-------------------------------------------------------------------------
"'EulerOS', 'openEuler', 'AlmaLinux'],
"
-------------------------------------------------------------------------
"Recom
PRs: 73541, 73543"
-------------------------------------------------------------------------
=========================================================================
"if all([
    key not in self._cache,
    key not in self._retrieved,
    self._plugin_name != 'memory',
    self._plugin.contains(key),
]):
    load = True
"
-------------------------------------------------------------------------
"```python
if all([
    key not in self._cache,
    key not in self._retrieved,
    self._plugin_name != 'memory',
    self._plugin.contains(key),
]):
    load = True
```"
-------------------------------------------------------------------------
"if all([
    key not in self._cache,
    key not in self._retrieved,
    self._plugin_name != 'memory',
    self._plugin.contains(key),
]):
    load = True
"
-------------------------------------------------------------------------
"Recom
PRs: 72840, 73444"
-------------------------------------------------------------------------
=========================================================================
"if all([
    key not in self._cache,
    key not in self._retrieved,
    self._plugin_name != 'memory',
    self._plugin.contains(key),
]):
    load = True
"
-------------------------------------------------------------------------
"```python
if all([
    key not in self._cache,
    key not in self._retrieved,
    self._plugin_name != 'memory',
    self._plugin.contains(key),
]):
    load = True
```"
-------------------------------------------------------------------------
"if all([
    key not in self._cache,
    key not in self._retrieved,
    self._plugin_name != 'memory',
    self._plugin.contains(key),
]):
    load = True
"
-------------------------------------------------------------------------
"Recom
PRs: 72840, 73443"
-------------------------------------------------------------------------
=========================================================================
"# In case of a YAML loading error, PyYAML will report the very last line
# as the location of the error. Avoid an index error here in order to
# return a helpful message.
file_length = len(lines)
if line_number >= file_length:
    line_number = file_length - 1

# If target_line contains only whitespace, move backwards until
# actual code is found. If there are several empty lines after target_line,
# the error lines would just be blank, which is not very helpful.
while not target_line.strip():
    line_number -= 1
    target_line = lines[line_number]

"
-------------------------------------------------------------------------
"```python
file_length = len(lines)
if line_number >= file_length:
    line_number = file_length - 1

while not target_line.strip():
    line_number -= 1
    target_line = lines[line_number]
```"
-------------------------------------------------------------------------
"# In case of a YAML loading error, PyYAML will report the very last line
# as the location of the error. Avoid an index error here in order to
# return a helpful message.
file_length = len(lines)
if line_number >= file_length:
    line_number = file_length - 1

# If target_line contains only whitespace, move backwards until
# actual code is found. If there are several empty lines after target_line,
# the error lines would just be blank, which is not very helpful.
while not target_line.strip():
    line_number -= 1
    target_line = lines[line_number]

"
-------------------------------------------------------------------------
"Recom
PRs: 73241, 73297"
-------------------------------------------------------------------------
=========================================================================
"with patch('ansible.errors.to_text', side_effect=IndexError('Raised intentionally')):
    # raise an IndexError
    self.obj.ansible_pos = ('foo.yml', 2, 1)
    e = AnsibleError(self.message, self.obj)
    self.assertEqual(
        e.message,
        (""This is the error message\n\nThe error appears to be in 'foo.yml': line 2, column 1, but may\nbe elsewhere in the file depending on ""
         ""the exact syntax problem.\n\n(specified line no longer in file, maybe it changed?)"")
    )
"
-------------------------------------------------------------------------
"```python
with patch('ansible.errors.to_text', side_effect=IndexError('Raised intentionally')):
    # raise an IndexError
    self.obj.ansible_pos = ('foo.yml', 2, 1)
    e = AnsibleError(self.message, self.obj)
    self.assertEqual(
        e.message,
        (""This is the error message\n\nThe error appears to be in 'foo.yml': line 2, column 1, but may\nbe elsewhere in the file depending on ""
         ""the exact syntax problem.\n\n(specified line no longer in file, maybe it changed?)"")
    )
```"
-------------------------------------------------------------------------
"with patch('ansible.errors.to_text', side_effect=IndexError('Raised intentionally')):
    # raise an IndexError
    self.obj.ansible_pos = ('foo.yml', 2, 1)
    e = AnsibleError(self.message, self.obj)
    self.assertEqual(
        e.message,
        (""This is the error message\n\nThe error appears to be in 'foo.yml': line 2, column 1, but may\nbe elsewhere in the file depending on ""
         ""the exact syntax problem.\n\n(specified line no longer in file, maybe it changed?)"")
    )
"
-------------------------------------------------------------------------
"Recom
PRs: 73241, 73297"
-------------------------------------------------------------------------
=========================================================================
"
def test_get_error_lines_error_in_last_line(self):
    m = mock_open()
    m.return_value.readlines.return_value = ['this is line 1\n', 'this is line 2\n', 'this is line 3\n']

    with patch('{0}.open'.format(BUILTINS), m):
        # If the error occurs in the last line of the file, use the correct index to get the line
        # and avoid the IndexError
        self.obj.ansible_pos = ('foo.yml', 4, 1)
        e = AnsibleError(self.message, self.obj)
        self.assertEqual(
            e.message,
            (""This is the error message\n\nThe error appears to be in 'foo.yml': line 4, column 1, but may\nbe elsewhere in the file depending on ""
             ""the exact syntax problem.\n\nThe offending line appears to be:\n\nthis is line 2\nthis is line 3\n^ here\n"")
        )

def test_get_error_lines_error_empty_lines_around_error(self):
    """"""Test that trailing whitespace after the error is removed""""""
    m = mock_open()
    m.return_value.readlines.return_value = ['this is line 1\n', 'this is line 2\n', 'this is line 3\n', '  \n', '   \n', ' ']

    with patch('{0}.open'.format(BUILTINS), m):
        self.obj.ansible_pos = ('foo.yml', 5, 1)
        e = AnsibleError(self.message, self.obj)
        self.assertEqual(
            e.message,
            (""This is the error message\n\nThe error appears to be in 'foo.yml': line 5, column 1, but may\nbe elsewhere in the file depending on ""
             ""the exact syntax problem.\n\nThe offending line appears to be:\n\nthis is line 2\nthis is line 3\n^ here\n"")
        )
"
-------------------------------------------------------------------------
"```python
from units.compat import mock, mock_open, BUILTINS
from ansible.errors import AnsibleError

def test_get_error_lines_error_in_last_line(self):
    m = mock_open()
    m.return_value.readlines.return_value = ['this is line 1\n', 'this is line 2\n', 'this is the line with the emoji 🙁\n']

    with mock.patch('{0}.open'.format(BUILTINS), m):
        # If the error occurs in the last line of the file, use the correct index to get the line
        # and avoid the IndexError
        self.obj.ansible_pos = ('foo.yml', 3, 1)  # Corrected index from 4 to 3
        e = AnsibleError(self.message, self.obj)
        self.assertEqual(
            e.message,
            (""This is the error message\n\nThe error appears to be in 'foo.yml': line 3, column 1, but may\nbe elsewhere in the file depending on ""
             ""the exact syntax problem.\n\nThe offending line appears to be:\n\nthis is line 2\nthis is the line with the emoji 🙁\n^ here\n"")
        )

def test_get_error_lines_error_empty_lines_around_error(self):
    """"""Test that trailing whitespace after the error is removed""""""
    m = mock_open()
    m.return_value.readlines.return_value = ['this is line 1\n', 'this is line 2\n', 'this is line 3\n', '  \n', '   \n', ' ']

    with mock.patch('{0}.open'.format(BUILTINS), m):
        self.obj.ansible_pos = ('foo.yml', 4, 1)  # Corrected index from 5 to 4
        e = AnsibleError(self.message, self.obj)
        self.assertEqual(
            e.message,
            (""This is the error message\n\nThe error appears to be in 'foo.yml': line 4, column 1, but may\nbe elsewhere in the file depending on ""
             ""the exact syntax problem.\n\nThe offending line appears to be:\n\nthis is line 2\nthis is line 3\n^ here\n"")
        )
```"
-------------------------------------------------------------------------
"
def test_get_error_lines_error_in_last_line(self):
    m = mock_open()
    m.return_value.readlines.return_value = ['this is line 1\n', 'this is line 2\n', 'this is line 3\n']

    with patch('{0}.open'.format(BUILTINS), m):
        # If the error occurs in the last line of the file, use the correct index to get the line
        # and avoid the IndexError
        self.obj.ansible_pos = ('foo.yml', 4, 1)
        e = AnsibleError(self.message, self.obj)
        self.assertEqual(
            e.message,
            (""This is the error message\n\nThe error appears to be in 'foo.yml': line 4, column 1, but may\nbe elsewhere in the file depending on ""
             ""the exact syntax problem.\n\nThe offending line appears to be:\n\nthis is line 2\nthis is line 3\n^ here\n"")
        )

def test_get_error_lines_error_empty_lines_around_error(self):
    """"""Test that trailing whitespace after the error is removed""""""
    m = mock_open()
    m.return_value.readlines.return_value = ['this is line 1\n', 'this is line 2\n', 'this is line 3\n', '  \n', '   \n', ' ']

    with patch('{0}.open'.format(BUILTINS), m):
        self.obj.ansible_pos = ('foo.yml', 5, 1)
        e = AnsibleError(self.message, self.obj)
        self.assertEqual(
            e.message,
            (""This is the error message\n\nThe error appears to be in 'foo.yml': line 5, column 1, but may\nbe elsewhere in the file depending on ""
             ""the exact syntax problem.\n\nThe offending line appears to be:\n\nthis is line 2\nthis is line 3\n^ here\n"")
        )
"
-------------------------------------------------------------------------
"Recom
PRs: 73241, 73297"
-------------------------------------------------------------------------
=========================================================================
"# In case of a YAML loading error, PyYAML will report the very last line
# as the location of the error. Avoid an index error here in order to
# return a helpful message.
file_length = len(lines)
if line_number >= file_length:
    line_number = file_length - 1

# If target_line contains only whitespace, move backwards until
# actual code is found. If there are several empty lines after target_line,
# the error lines would just be blank, which is not very helpful.
while not target_line.strip():
    line_number -= 1
    target_line = lines[line_number]

"
-------------------------------------------------------------------------
"```python
file_length = len(lines)
if line_number >= file_length:
    line_number = file_length - 1

while not target_line.strip():
    line_number -= 1
    if line_number < 0:
        break  # Avoid negative index error
    target_line = lines[line_number]
```"
-------------------------------------------------------------------------
"# In case of a YAML loading error, PyYAML will report the very last line
# as the location of the error. Avoid an index error here in order to
# return a helpful message.
file_length = len(lines)
if line_number >= file_length:
    line_number = file_length - 1

# If target_line contains only whitespace, move backwards until
# actual code is found. If there are several empty lines after target_line,
# the error lines would just be blank, which is not very helpful.
while not target_line.strip():
    line_number -= 1
    target_line = lines[line_number]

"
-------------------------------------------------------------------------
"Recom
PRs: 73241, 73296"
-------------------------------------------------------------------------
=========================================================================
"with patch('ansible.errors.to_text', side_effect=IndexError('Raised intentionally')):
    # raise an IndexError
    self.obj.ansible_pos = ('foo.yml', 2, 1)
    e = AnsibleError(self.message, self.obj)
    self.assertEqual(
        e.message,
        (""This is the error message\n\nThe error appears to be in 'foo.yml': line 2, column 1, but may\nbe elsewhere in the file depending on ""
         ""the exact syntax problem.\n\n(specified line no longer in file, maybe it changed?)"")
    )
"
-------------------------------------------------------------------------
"```python
with patch('ansible.errors.to_text', side_effect=IndexError('Raised intentionally')):
    # raise an IndexError
    self.obj.ansible_pos = ('foo.yml', 2, 1)
    e = AnsibleError(self.message, self.obj)
    with self.assertRaises(IndexError):
        self.assertEqual(
            e.message,
            (""This is the error message\n\nThe error appears to be in 'foo.yml': line 2, column 1, but may\nbe elsewhere in the file depending on ""
             ""the exact syntax problem.\n\n(specified line no longer in file, maybe it changed?)"")
        )
```"
-------------------------------------------------------------------------
"with patch('ansible.errors.to_text', side_effect=IndexError('Raised intentionally')):
    # raise an IndexError
    self.obj.ansible_pos = ('foo.yml', 2, 1)
    e = AnsibleError(self.message, self.obj)
    self.assertEqual(
        e.message,
        (""This is the error message\n\nThe error appears to be in 'foo.yml': line 2, column 1, but may\nbe elsewhere in the file depending on ""
         ""the exact syntax problem.\n\n(specified line no longer in file, maybe it changed?)"")
    )
"
-------------------------------------------------------------------------
"Recom
PRs: 73241, 73296"
-------------------------------------------------------------------------
=========================================================================
"
def test_get_error_lines_error_in_last_line(self):
    m = mock_open()
    m.return_value.readlines.return_value = ['this is line 1\n', 'this is line 2\n', 'this is line 3\n']

    with patch('{0}.open'.format(BUILTINS), m):
        # If the error occurs in the last line of the file, use the correct index to get the line
        # and avoid the IndexError
        self.obj.ansible_pos = ('foo.yml', 4, 1)
        e = AnsibleError(self.message, self.obj)
        self.assertEqual(
            e.message,
            (""This is the error message\n\nThe error appears to be in 'foo.yml': line 4, column 1, but may\nbe elsewhere in the file depending on ""
             ""the exact syntax problem.\n\nThe offending line appears to be:\n\nthis is line 2\nthis is line 3\n^ here\n"")
        )

def test_get_error_lines_error_empty_lines_around_error(self):
    """"""Test that trailing whitespace after the error is removed""""""
    m = mock_open()
    m.return_value.readlines.return_value = ['this is line 1\n', 'this is line 2\n', 'this is line 3\n', '  \n', '   \n', ' ']

    with patch('{0}.open'.format(BUILTINS), m):
        self.obj.ansible_pos = ('foo.yml', 5, 1)
        e = AnsibleError(self.message, self.obj)
        self.assertEqual(
            e.message,
            (""This is the error message\n\nThe error appears to be in 'foo.yml': line 5, column 1, but may\nbe elsewhere in the file depending on ""
             ""the exact syntax problem.\n\nThe offending line appears to be:\n\nthis is line 2\nthis is line 3\n^ here\n"")
        )
"
-------------------------------------------------------------------------
"```python
def test_get_error_lines_error_in_last_line(self):
    m = units.compat.mock.mock_open()
    m.return_value.readlines.return_value = ['this is line 1\n', 'this is line 2\n', 'this is line 3\n']

    with units.compat.mock.patch('{0}.open'.format(units.compat.builtins.BUILTINS), m):
        # If the error occurs in the last line of the file, use the correct index to get the line
        # and avoid the IndexError
        self.obj.ansible_pos = ('foo.yml', 4, 1)
        e = ansible.errors.AnsibleError(self.message, self.obj)
        self.assertEqual(
            e.message,
            (""This is the error message\n\nThe error appears to be in 'foo.yml': line 4, column 1, but may\nbe elsewhere in the file depending on ""
             ""the exact syntax problem.\n\nThe offending line appears to be:\n\nthis is line 2\nthis is line 3\n^ here\n"")
        )

def test_get_error_lines_error_empty_lines_around_error(self):
    """"""Test that trailing whitespace after the error is removed""""""
    m = units.compat.mock.mock_open()
    m.return_value.readlines.return_value = ['this is line 1\n', 'this is line 2\n', 'this is line 3\n', '  \n', '   \n', ' ']

    with units.compat.mock.patch('{0}.open'.format(units.compat.builtins.BUILTINS), m):
        self.obj.ansible_pos = ('foo.yml', 5, 1)
        e = ansible.errors.AnsibleError(self.message, self.obj)
        self.assertEqual(
            e.message,
            (""This is the error message\n\nThe error appears to be in 'foo.yml': line 5, column 1, but may\nbe elsewhere in the file depending on ""
             ""the exact syntax problem.\n\nThe offending line appears to be:\n\nthis is line 2\nthis is line 3\n^ here\n"")
        )
```"
-------------------------------------------------------------------------
"
def test_get_error_lines_error_in_last_line(self):
    m = mock_open()
    m.return_value.readlines.return_value = ['this is line 1\n', 'this is line 2\n', 'this is line 3\n']

    with patch('{0}.open'.format(BUILTINS), m):
        # If the error occurs in the last line of the file, use the correct index to get the line
        # and avoid the IndexError
        self.obj.ansible_pos = ('foo.yml', 4, 1)
        e = AnsibleError(self.message, self.obj)
        self.assertEqual(
            e.message,
            (""This is the error message\n\nThe error appears to be in 'foo.yml': line 4, column 1, but may\nbe elsewhere in the file depending on ""
             ""the exact syntax problem.\n\nThe offending line appears to be:\n\nthis is line 2\nthis is line 3\n^ here\n"")
        )

def test_get_error_lines_error_empty_lines_around_error(self):
    """"""Test that trailing whitespace after the error is removed""""""
    m = mock_open()
    m.return_value.readlines.return_value = ['this is line 1\n', 'this is line 2\n', 'this is line 3\n', '  \n', '   \n', ' ']

    with patch('{0}.open'.format(BUILTINS), m):
        self.obj.ansible_pos = ('foo.yml', 5, 1)
        e = AnsibleError(self.message, self.obj)
        self.assertEqual(
            e.message,
            (""This is the error message\n\nThe error appears to be in 'foo.yml': line 5, column 1, but may\nbe elsewhere in the file depending on ""
             ""the exact syntax problem.\n\nThe offending line appears to be:\n\nthis is line 2\nthis is line 3\n^ here\n"")
        )
"
-------------------------------------------------------------------------
"Recom
PRs: 73241, 73296"
-------------------------------------------------------------------------
=========================================================================
"# The `or ''` instead of using `.get(..., '')` makes sure that even if the user explicitly
# sets `warning_text` to `~` (None) or `false`, we still get an empty string.
warning_text = deprecation.get('warning_text', None) or ''
warning_text = '{0} has been deprecated.{1}{2}'.format(name, ' ' if warning_text else '', warning_text)
"
-------------------------------------------------------------------------
"```python
warning_text = deprecation.get('warning_text', None) or ''
warning_text = '{0} has been deprecated.{1}{2}'.format(name, ' ' if warning_text else '', warning_text)
```"
-------------------------------------------------------------------------
"# The `or ''` instead of using `.get(..., '')` makes sure that even if the user explicitly
# sets `warning_text` to `~` (None) or `false`, we still get an empty string.
warning_text = deprecation.get('warning_text', None) or ''
warning_text = '{0} has been deprecated.{1}{2}'.format(name, ' ' if warning_text else '', warning_text)
"
-------------------------------------------------------------------------
"Recom
PRs: 73059, 73237"
-------------------------------------------------------------------------
=========================================================================
"warning_text = tombstone.get('warning_text') or ''
warning_text = '{0} has been removed.{1}{2}'.format(fq_name, ' ' if warning_text else '', warning_text)
"
-------------------------------------------------------------------------
"```python
warning_text = tombstone.get('warning_text') or ''
warning_text = '{0} has been removed.{1}{2}'.format(fq_name, ' ' if warning_text else '', warning_text)
```"
-------------------------------------------------------------------------
"warning_text = tombstone.get('warning_text') or ''
warning_text = '{0} has been removed.{1}{2}'.format(fq_name, ' ' if warning_text else '', warning_text)
"
-------------------------------------------------------------------------
"Recom
PRs: 73059, 73237"
-------------------------------------------------------------------------
=========================================================================
"if 'BHYVE' in out:
    guest_tech.add('bhyve')
    if not found_virt:
        virtual_facts['virtualization_type'] = 'bhyve'
        virtual_facts['virtualization_role'] = 'guest'
        found_virt = True

"
-------------------------------------------------------------------------
"if 'BHYVE' in out:
    guest_tech.add('bhyve')
    if not found_virt:
        virtual_facts['virtualization_type'] = 'bhyve'
        virtual_facts['virtualization_role'] = 'guest'
        found_virt = True"
-------------------------------------------------------------------------
"if 'BHYVE' in out:
    virtual_facts['virtualization_type'] = 'bhyve'
    virtual_facts['virtualization_role'] = 'guest'
    return virtual_facts

"
-------------------------------------------------------------------------
"Recom
PRs: 73204, 73234"
-------------------------------------------------------------------------
=========================================================================
"if 'BHYVE' in out:
    guest_tech.add('bhyve')
    if not found_virt:
        virtual_facts['virtualization_type'] = 'bhyve'
        virtual_facts['virtualization_role'] = 'guest'
        found_virt = True

"
-------------------------------------------------------------------------
"if 'BHYVE' in out:
    guest_tech.add('bhyve')
    if not found_virt:
        virtual_facts['virtualization_type'] = 'bhyve'
        virtual_facts['virtualization_role'] = 'guest'
        found_virt = True"
-------------------------------------------------------------------------
"if 'BHYVE' in out:
    virtual_facts['virtualization_type'] = 'bhyve'
    virtual_facts['virtualization_role'] = 'guest'
    return virtual_facts

"
-------------------------------------------------------------------------
"Recom
PRs: 73204, 73233"
-------------------------------------------------------------------------
=========================================================================
"if seconds is None:
    display.warning(""Not waiting for response to prompt as stdin is not interactive"")
"
-------------------------------------------------------------------------
"```python
if seconds is None:
    display.warning(""Not waiting for response to prompt as stdin is not interactive"")
```"
-------------------------------------------------------------------------
"if seconds is None:
    display.warning(""Not waiting for response to prompt as stdin is not interactive"")
"
-------------------------------------------------------------------------
"Recom
PRs: 73182, 73231"
-------------------------------------------------------------------------
=========================================================================
"if seconds is None:
    display.warning(""Not waiting for response to prompt as stdin is not interactive"")
"
-------------------------------------------------------------------------
"```python
if seconds is None:
    display.warning(""Not waiting for response to prompt as stdin is not interactive"")
```"
-------------------------------------------------------------------------
"if seconds is None:
    display.warning(""Not waiting for response to prompt as stdin is not interactive"")
"
-------------------------------------------------------------------------
"Recom
PRs: 73182, 73230"
-------------------------------------------------------------------------
=========================================================================
"- Lock the password (C(usermod -L), C(usermod -U), C(pw lock)).
- Implementation differs by platform. This option does not always mean the user cannot login using other methods.
- This option does not disable the user, only lock the password.
- This must be set to C(False) in order to unlock a currently locked password. The absence of this parameter will not unlock a password.
"
-------------------------------------------------------------------------
"```yaml
options:
  version_added: ""1.9""
  password_lock:
    description:
      - Lock the password (C(usermod -L), C(usermod -U), C(pw lock)).
      - Implementation differs by platform. This option does not always mean the user cannot login using other methods.
      - This option does not disable the user, only lock the password.
      - This must be set to C(False) in order to unlock a currently locked password. The absence of this parameter will not unlock a password.
    type: bool
    version_added: ""2.6""
```"
-------------------------------------------------------------------------
"- Lock the password (C(usermod -L), C(usermod -U), C(pw lock)).
- Implementation differs by platform. This option does not always mean the user cannot login using other methods.
- This option does not disable the user, only lock the password.
- This must be set to C(False) in order to unlock a currently locked password. The absence of this parameter will not unlock a password.
"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73178"
-------------------------------------------------------------------------
=========================================================================
"if self.password_lock:
    cmd.append('!%s' % self.password)
else:
    cmd.append(self.password)
"
-------------------------------------------------------------------------
"```python
if self.password_lock:
    cmd.append('!%s' % self.password)
else:
    cmd.append(self.password)
```"
-------------------------------------------------------------------------
"if self.password_lock:
    cmd.append('!%s' % self.password)
else:
    cmd.append(self.password)
"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73178"
-------------------------------------------------------------------------
=========================================================================
"if self.update_password == 'always' and self.password is not None and info[1].lstrip('!') != self.password.lstrip('!'):
    # Remove options that are mutually exclusive with -p
    cmd = [c for c in cmd if c not in ['-U', '-L']]
    if self.password_lock:
        # Lock the account and set the hash in a single command
        cmd.append('!%s' % self.password)
    else:
        cmd.append(self.password)
"
-------------------------------------------------------------------------
"```python
if self.update_password == 'always' and self.password is not None and info[1].lstrip('!') != self.password.lstrip('!'):
    cmd = [c for c in cmd if c not in ['-U', '-L']]
    if self.password_lock:
        cmd.append('!%s' % self.password)
    else:
        cmd.append(self.password)
```"
-------------------------------------------------------------------------
"if self.update_password == 'always' and self.password is not None and info[1].lstrip('!') != self.password.lstrip('!'):
    # Remove options that are mutually exclusive with -p
    cmd = [c for c in cmd if c not in ['-U', '-L']]
    if self.password_lock:
        # Lock the account and set the hash in a single command
        cmd.append('!%s' % self.password)
    else:
        cmd.append(self.password)
"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73178"
-------------------------------------------------------------------------
=========================================================================
"def _handle_lock(self):
    info = self.user_info()
    if self.password_lock and not info[1].startswith('*LOCKED*'):
        cmd = [
            self.module.get_bin_path('pw', True),
            'lock',
            self.name
        ]
        if self.uid is not None and info[2] != int(self.uid):
            cmd.append('-u')
            cmd.append(self.uid)
        return self.execute_command(cmd)
    elif self.password_lock is False and info[1].startswith('*LOCKED*'):
        cmd = [
            self.module.get_bin_path('pw', True),
            'unlock',
            self.name
        ]
        if self.uid is not None and info[2] != int(self.uid):
            cmd.append('-u')
            cmd.append(self.uid)
        return self.execute_command(cmd)

    return (None, '', '')

"
-------------------------------------------------------------------------
"```python
def _handle_lock(self):
    info = self.user_info()
    if self.password_lock and not info[1].startswith('*LOCKED*'):
        cmd = [
            self.module.get_bin_path('pw', True),
            'lock',
            self.name
        ]
        if self.uid is not None and info[2] != int(self.uid):
            cmd.append('-u')
            cmd.append(self.uid)
        return self.execute_command(cmd)
    elif not self.password_lock and info[1].startswith('*LOCKED*'):
        cmd = [
            self.module.get_bin_path('pw', True),
            'unlock',
            self.name
        ]
        if self.uid is not None and info[2] != int(self.uid):
            cmd.append('-u')
            cmd.append(self.uid)
        return self.execute_command(cmd)

    return (None, '', '')
```"
-------------------------------------------------------------------------
"def _handle_lock(self):
    info = self.user_info()
    if self.password_lock and not info[1].startswith('*LOCKED*'):
        cmd = [
            self.module.get_bin_path('pw', True),
            'lock',
            self.name
        ]
        if self.uid is not None and info[2] != int(self.uid):
            cmd.append('-u')
            cmd.append(self.uid)
        return self.execute_command(cmd)
    elif self.password_lock is False and info[1].startswith('*LOCKED*'):
        cmd = [
            self.module.get_bin_path('pw', True),
            'unlock',
            self.name
        ]
        if self.uid is not None and info[2] != int(self.uid):
            cmd.append('-u')
            cmd.append(self.uid)
        return self.execute_command(cmd)

    return (None, '', '')

"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73178"
-------------------------------------------------------------------------
=========================================================================
"
"
-------------------------------------------------------------------------
"```python
import os
import __future__
import select
import ansible.module_utils
import re
import math
import time
import shutil
import pty
import spwd
import calendar
import socket
import pwd
import grp
import subprocess
import ansible.module_utils._text
import ansible.module_utils.basic
import errno

class FreeBsdUser(User):
    # system cannot be handled currently - should we error if its requested?
    # create the user
    (rc, out, err) = self.execute_command(cmd)
    if rc is not None and rc != 0:
        self.module.fail_json(name=self.name, msg=err, rc=rc)
```"
-------------------------------------------------------------------------
"
"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73178"
-------------------------------------------------------------------------
=========================================================================
"_rc, _out, _err = self.execute_command(cmd)
if rc is None:
    rc = _rc
out = _out
err = _err

 have to lock/unlock the password in a distinct command
 _out, _err = self._handle_lock()
c is None:
rc = _rc
= _out
= _err
"
-------------------------------------------------------------------------
"```python
_rc, _out, _err = self.execute_command(cmd)
if _rc is None:
    _rc = _rc
out = _out
err = _err

_out, _err = self._handle_lock()
if _rc is None:
    _rc = _rc
out = _out
err = _err
```"
-------------------------------------------------------------------------
"_rc, _out, _err = self.execute_command(cmd)
if rc is None:
    rc = _rc
out = _out
err = _err

 have to lock/unlock the password in a distinct command
 _out, _err = self._handle_lock()
c is None:
rc = _rc
= _out
= _err
"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73178"
-------------------------------------------------------------------------
=========================================================================
"(rc, out, err) = (None, '', '')

    (rc, _out, _err) = self.execute_command(cmd)
    out = _out
    err = _err

if self.update_password == 'always' and self.password is not None and info[1].lstrip('*LOCKED*') != self.password.lstrip('*LOCKED*'):
    _rc, _out, _err = self.execute_command(cmd)
    if rc is None:
        rc = _rc
    out = _out
    err = _err
_rc, _out, _err = self._handle_lock()
if rc is None:
    rc = _rc
out = _out
err = _err

"
-------------------------------------------------------------------------
"```python
(rc, out, err) = (None, '', '')

(rc, _out, _err) = self.execute_command(cmd)
out = _out
err = _err

if self.update_password == 'always' and self.password is not None and info[1].lstrip('*LOCKED*') != self.password.lstrip('*LOCKED*'):
    _rc, _out, _err = self.execute_command(cmd)
    if rc is None:
        rc = _rc
    out = _out
    err = _err

_rc, _out, _err = self._handle_lock()
if rc is None:
    rc = _rc
out = _out
err = _err
```"
-------------------------------------------------------------------------
"(rc, out, err) = (None, '', '')

    (rc, _out, _err) = self.execute_command(cmd)
    out = _out
    err = _err

if self.update_password == 'always' and self.password is not None and info[1].lstrip('*LOCKED*') != self.password.lstrip('*LOCKED*'):
    _rc, _out, _err = self.execute_command(cmd)
    if rc is None:
        rc = _rc
    out = _out
    err = _err
_rc, _out, _err = self._handle_lock()
if rc is None:
    rc = _rc
out = _out
err = _err

"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73178"
-------------------------------------------------------------------------
=========================================================================
"- Lock the password (C(usermod -L), C(usermod -U), C(pw lock)).
- Implementation differs by platform. This option does not always mean the user cannot login using other methods.
- This option does not disable the user, only lock the password.
- This must be set to C(False) in order to unlock a currently locked password. The absence of this parameter will not unlock a password.
"
-------------------------------------------------------------------------
"```yaml
options:
  version_added: ""1.9""
  password_lock:
    description:
      - Lock the password (C(usermod -L), C(usermod -U), C(pw lock)).
      - Implementation differs by platform. This option does not always mean the user cannot login using other methods.
      - This option does not disable the user, only lock the password.
      - This must be set to C(False) in order to unlock a currently locked password. The absence of this parameter will not unlock a password.
    type: bool
    version_added: ""2.6""
```"
-------------------------------------------------------------------------
"- Lock the password (C(usermod -L), C(usermod -U), C(pw lock)).
- Implementation differs by platform. This option does not always mean the user cannot login using other methods.
- This option does not disable the user, only lock the password.
- This must be set to C(False) in order to unlock a currently locked password. The absence of this parameter will not unlock a password.
"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73177"
-------------------------------------------------------------------------
=========================================================================
"if self.password_lock:
    cmd.append('!%s' % self.password)
else:
    cmd.append(self.password)
"
-------------------------------------------------------------------------
"```python
if self.password_lock:
    cmd.append('!%s' % self.password)
else:
    cmd.append(self.password)
```"
-------------------------------------------------------------------------
"if self.password_lock:
    cmd.append('!%s' % self.password)
else:
    cmd.append(self.password)
"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73177"
-------------------------------------------------------------------------
=========================================================================
"if self.update_password == 'always' and self.password is not None and info[1].lstrip('!') != self.password.lstrip('!'):
    # Remove options that are mutually exclusive with -p
    cmd = [c for c in cmd if c not in ['-U', '-L']]
    if self.password_lock:
        # Lock the account and set the hash in a single command
        cmd.append('!%s' % self.password)
    else:
        cmd.append(self.password)
"
-------------------------------------------------------------------------
"```python
if self.update_password == 'always' and self.password is not None and info[1].lstrip('!') != self.password.lstrip('!'):
    # Remove options that are mutually exclusive with -p
    cmd = [c for c in cmd if c not in ['-U', '-L']]
    if self.password_lock:
        cmd.append('!%s' % self.password)  # Lock the account and set the hash in a single command
    else:
        cmd.append(self.password)
```"
-------------------------------------------------------------------------
"if self.update_password == 'always' and self.password is not None and info[1].lstrip('!') != self.password.lstrip('!'):
    # Remove options that are mutually exclusive with -p
    cmd = [c for c in cmd if c not in ['-U', '-L']]
    if self.password_lock:
        # Lock the account and set the hash in a single command
        cmd.append('!%s' % self.password)
    else:
        cmd.append(self.password)
"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73177"
-------------------------------------------------------------------------
=========================================================================
"def _handle_lock(self):
    info = self.user_info()
    if self.password_lock and not info[1].startswith('*LOCKED*'):
        cmd = [
            self.module.get_bin_path('pw', True),
            'lock',
            self.name
        ]
        if self.uid is not None and info[2] != int(self.uid):
            cmd.append('-u')
            cmd.append(self.uid)
        return self.execute_command(cmd)
    elif self.password_lock is False and info[1].startswith('*LOCKED*'):
        cmd = [
            self.module.get_bin_path('pw', True),
            'unlock',
            self.name
        ]
        if self.uid is not None and info[2] != int(self.uid):
            cmd.append('-u')
            cmd.append(self.uid)
        return self.execute_command(cmd)

    return (None, '', '')

"
-------------------------------------------------------------------------
"```python
def _handle_lock(self):
    info = self.user_info()
    if self.password_lock and not info[1].startswith('*LOCKED*'):
        cmd = [
            self.module.get_bin_path('pw', True),
            'lock',
            self.name
        ]
        if self.uid is not None and info[2] != int(self.uid):
            cmd.append('-u')
            cmd.append(str(self.uid))
        return self.execute_command(cmd)
    elif not self.password_lock and info[1].startswith('*LOCKED*'):
        cmd = [
            self.module.get_bin_path('pw', True),
            'unlock',
            self.name
        ]
        if self.uid is not None and info[2] != int(self.uid):
            cmd.append('-u')
            cmd.append(str(self.uid))
        return self.execute_command(cmd)

    return None, '', ''
```"
-------------------------------------------------------------------------
"def _handle_lock(self):
    info = self.user_info()
    if self.password_lock and not info[1].startswith('*LOCKED*'):
        cmd = [
            self.module.get_bin_path('pw', True),
            'lock',
            self.name
        ]
        if self.uid is not None and info[2] != int(self.uid):
            cmd.append('-u')
            cmd.append(self.uid)
        return self.execute_command(cmd)
    elif self.password_lock is False and info[1].startswith('*LOCKED*'):
        cmd = [
            self.module.get_bin_path('pw', True),
            'unlock',
            self.name
        ]
        if self.uid is not None and info[2] != int(self.uid):
            cmd.append('-u')
            cmd.append(self.uid)
        return self.execute_command(cmd)

    return (None, '', '')

"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73177"
-------------------------------------------------------------------------
=========================================================================
"
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.basic import *
import errno
from ansible.module_utils.common.sys_info import FreeBsdUser
import spwd
import pty
import time
import select
import math
import ansible.module_utils._text
from __future__ import *
import ansible.module_utils
import socket
import pwd
import os
import re
import shutil
import grp
import subprocess

class FreeBsdUser(User):
    # system cannot be handled currently - should we error if its requested?
    # create the user
    (rc, out, err) = self.execute_command(cmd)
    if rc is not None and rc != 0:
        self.module.fail_json(name=self.name, msg=err, rc=rc)
```"
-------------------------------------------------------------------------
"
"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73177"
-------------------------------------------------------------------------
=========================================================================
"_rc, _out, _err = self.execute_command(cmd)
if rc is None:
    rc = _rc
out = _out
err = _err

 have to lock/unlock the password in a distinct command
 _out, _err = self._handle_lock()
c is None:
rc = _rc
= _out
= _err
"
-------------------------------------------------------------------------
"```python
_rc, _out, _err = self.execute_command(cmd)
if _rc is None:
    _rc = _rc
out = _out
err = _err

_out, _err = self._handle_lock()
if _rc is None:
    _rc = _rc
out = _out
err = _err
```"
-------------------------------------------------------------------------
"_rc, _out, _err = self.execute_command(cmd)
if rc is None:
    rc = _rc
out = _out
err = _err

 have to lock/unlock the password in a distinct command
 _out, _err = self._handle_lock()
c is None:
rc = _rc
= _out
= _err
"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73177"
-------------------------------------------------------------------------
=========================================================================
"(rc, out, err) = (None, '', '')

    (rc, _out, _err) = self.execute_command(cmd)
    out = _out
    err = _err

if self.update_password == 'always' and self.password is not None and info[1].lstrip('*LOCKED*') != self.password.lstrip('*LOCKED*'):
    _rc, _out, _err = self.execute_command(cmd)
    if rc is None:
        rc = _rc
    out = _out
    err = _err
_rc, _out, _err = self._handle_lock()
if rc is None:
    rc = _rc
out = _out
err = _err

"
-------------------------------------------------------------------------
"(rc, out, err) = (None, '', '')

(rc, _out, _err) = self.execute_command(cmd)
out = _out
err = _err

if self.update_password == 'always' and self.password is not None and info[1].lstrip('*LOCKED*') != self.password.lstrip('*LOCKED*'):
    _rc, _out, _err = self.execute_command(cmd)
    if rc is None:
        rc = _rc
    out = _out
    err = _err

_rc, _out, _err = self._handle_lock()
if rc is None:
    rc = _rc
out = _out
err = _err"
-------------------------------------------------------------------------
"(rc, out, err) = (None, '', '')

    (rc, _out, _err) = self.execute_command(cmd)
    out = _out
    err = _err

if self.update_password == 'always' and self.password is not None and info[1].lstrip('*LOCKED*') != self.password.lstrip('*LOCKED*'):
    _rc, _out, _err = self.execute_command(cmd)
    if rc is None:
        rc = _rc
    out = _out
    err = _err
_rc, _out, _err = self._handle_lock()
if rc is None:
    rc = _rc
out = _out
err = _err

"
-------------------------------------------------------------------------
"Recom
PRs: 73016, 73177"
-------------------------------------------------------------------------
=========================================================================
"# Sometimes apt tasks fail because apt is locked by an autoupdate or by a race condition on a thread.
# To check for a lock file before executing, and keep trying until the lock file is released:
- name: Install packages only when the apt process is not locked
apt:
  name: foo
  state: present
register: apt_action
retries: 100
until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)


"
-------------------------------------------------------------------------
"```python
- name: Install packages only when the apt process is not locked
  apt:
    name: foo
    state: present
  register: apt_action
  retries: 100
  until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)
```"
-------------------------------------------------------------------------
"# Sometimes apt tasks fail because apt is locked by an autoupdate or by a race condition on a thread.
# To check for a lock file before executing, and keep trying until the lock file is released:
- name: Install packages only when the apt process is not locked
apt:
  name: foo
  state: present
register: apt_action
retries: 100
until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)


"
-------------------------------------------------------------------------
"Recom
PRs: 73079, 73165"
-------------------------------------------------------------------------
=========================================================================
"self.vars = combine_vars(self.vars, {key: value})
"
-------------------------------------------------------------------------
"from ansible.inventory.group import combine_vars
__future__
import ansible.utils.vars
import ansible.module_utils.common._collections_compat

self.vars = combine_vars(self.vars, {key: value})"
-------------------------------------------------------------------------
"self.vars = combine_vars(self.vars, {key: value})
"
-------------------------------------------------------------------------
"Recom
PRs: 72979, 73147"
-------------------------------------------------------------------------
=========================================================================
"self.vars = combine_vars(self.vars, {key: value})
"
-------------------------------------------------------------------------
"```python
from ansible.inventory.group import combine_vars

self.vars = combine_vars(self.vars, {key: value})
```"
-------------------------------------------------------------------------
"self.vars = combine_vars(self.vars, {key: value})
"
-------------------------------------------------------------------------
"Recom
PRs: 72979, 73147"
-------------------------------------------------------------------------
=========================================================================
"self.vars = combine_vars(self.vars, {key: value})
"
-------------------------------------------------------------------------
"self.vars = ansible.utils.vars.combine_vars(self.vars, {key: value})"
-------------------------------------------------------------------------
"self.vars = combine_vars(self.vars, {key: value})
"
-------------------------------------------------------------------------
"Recom
PRs: 72979, 73146"
-------------------------------------------------------------------------
=========================================================================
"self.vars = combine_vars(self.vars, {key: value})
"
-------------------------------------------------------------------------
"from ansible.inventory.group import combine_vars

self.vars = combine_vars(self.vars, {key: value})"
-------------------------------------------------------------------------
"self.vars = combine_vars(self.vars, {key: value})
"
-------------------------------------------------------------------------
"Recom
PRs: 72979, 73146"
-------------------------------------------------------------------------
=========================================================================
"

if to_bytes(path_mount_point) == to_bytes(mount_point):
"
-------------------------------------------------------------------------
"```python
if isinstance(path_mount_point, _text._text) and path_mount_point == mount_point:
```"
-------------------------------------------------------------------------
"

if to_bytes(path_mount_point) == to_bytes(mount_point):
"
-------------------------------------------------------------------------
"Recom
PRs: 70439, 73130"
-------------------------------------------------------------------------
=========================================================================
"

if to_bytes(path_mount_point) == to_bytes(mount_point):
"
-------------------------------------------------------------------------
"```
if ansible.module_utils.six.text_type(path_mount_point) == ansible.module_utils.six.text_type(mount_point):
No need to provide extra information.
```"
-------------------------------------------------------------------------
"

if to_bytes(path_mount_point) == to_bytes(mount_point):
"
-------------------------------------------------------------------------
"Recom
PRs: 70439, 73129"
-------------------------------------------------------------------------
=========================================================================
"vars_copy[self._task.register] = result = wrap_var(result)
"
-------------------------------------------------------------------------
"```python
vars_copy[self._task.register] = result = ansible.utils.unsafe_proxy.wrap_var(result)
```"
-------------------------------------------------------------------------
"vars_copy[self._task.register] = result = wrap_var(result)
"
-------------------------------------------------------------------------
"Recom
PRs: 65918, 73044"
-------------------------------------------------------------------------
=========================================================================
"vars_copy[self._task.register] = result = wrap_var(result)
"
-------------------------------------------------------------------------
"```python
vars_copy[self._task.register] = result = ansible.module_utils.six.wrap_var(result)
```"
-------------------------------------------------------------------------
"vars_copy[self._task.register] = result = wrap_var(result)
"
-------------------------------------------------------------------------
"Recom
PRs: 65918, 73044"
-------------------------------------------------------------------------
=========================================================================
"variables[self._task.register] = result = wrap_var(result)
"
-------------------------------------------------------------------------
"```python
variables[self._task.register] = result = wrap_var(result)
```"
-------------------------------------------------------------------------
"variables[self._task.register] = result = wrap_var(result)
"
-------------------------------------------------------------------------
"Recom
PRs: 65918, 73044"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.common.collections import is_sequence
"
-------------------------------------------------------------------------
from ansible.module_utils.common._collections_compat import Sequence
-------------------------------------------------------------------------
"from ansible.module_utils.common.collections import is_sequence
"
-------------------------------------------------------------------------
"Recom
PRs: 65918, 73044"
-------------------------------------------------------------------------
=========================================================================
"elif is_sequence(variable):
"
-------------------------------------------------------------------------
"```python
elif is_sequence(variable):
```"
-------------------------------------------------------------------------
"elif is_sequence(variable):
"
-------------------------------------------------------------------------
"Recom
PRs: 65918, 73044"
-------------------------------------------------------------------------
=========================================================================
"elif isinstance(variable, Mapping):
"
-------------------------------------------------------------------------
"```python
elif isinstance(variable, (Mapping, dict)):
```"
-------------------------------------------------------------------------
"elif isinstance(variable, Mapping):
"
-------------------------------------------------------------------------
"Recom
PRs: 65918, 73044"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.common._collections_compat import Mapping, Set
from ansible.module_utils.common.collections import is_sequence
"
-------------------------------------------------------------------------
"from ansible.module_utils.common._collections_compat import Mapping, Set
from __future__ import (absolute_import, division, print_function)
from ansible.module_utils.six import string_types, binary_type, text_type
from ansible.module_utils.common.collections import is_sequence
__metaclass__ = type"
-------------------------------------------------------------------------
"from ansible.module_utils.common._collections_compat import Mapping, Set
from ansible.module_utils.common.collections import is_sequence
"
-------------------------------------------------------------------------
"Recom
PRs: 65918, 73044"
-------------------------------------------------------------------------
=========================================================================
"return dict((wrap_var(k), wrap_var(item)) for k, item in v.items())
_wrap_sequence(v):
""""""Wraps a sequence with unsafe, not meant for strings, primarily
``tuple`` and ``list``
""""""
v_type = type(v)
return v_type(wrap_var(item) for item in v)
return set(wrap_var(item) for item in v)
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.six import string_types
from ansible.utils.unsafe_proxy import wrap_var

def wrap_dict(v):
    return {wrap_var(k): wrap_var(item) for k, item in v.items()}

def _wrap_sequence(v):
    """"""
    Wraps a sequence with unsafe, not meant for strings, primarily
    tuple and list
    """"""
    v_type = type(v)
    if v_type in string_types:
        return v
    elif v_type == dict:
        return wrap_dict(v)
    elif v_type == set:
        return set(wrap_var(item) for item in v)
    else:
        return v_type(wrap_var(item) for item in v)
```"
-------------------------------------------------------------------------
"return dict((wrap_var(k), wrap_var(item)) for k, item in v.items())
_wrap_sequence(v):
""""""Wraps a sequence with unsafe, not meant for strings, primarily
``tuple`` and ``list``
""""""
v_type = type(v)
return v_type(wrap_var(item) for item in v)
return set(wrap_var(item) for item in v)
"
-------------------------------------------------------------------------
"Recom
PRs: 65918, 73044"
-------------------------------------------------------------------------
=========================================================================
"elif is_sequence(v):
    v = _wrap_sequence(v)
"
-------------------------------------------------------------------------
"```python
def wrap_var(v):
    if isinstance(v, Mapping):
        v = _wrap_dict(v)
    elif isinstance(v, Set):
        v = _wrap_set(v)
    elif is_sequence(v):
        v = _wrap_sequence(v)
    elif isinstance(v, binary_type):
        v = AnsibleUnsafeBytes(v)
    elif isinstance(v, text_type):
```"
-------------------------------------------------------------------------
"elif is_sequence(v):
    v = _wrap_sequence(v)
"
-------------------------------------------------------------------------
"Recom
PRs: 65918, 73044"
-------------------------------------------------------------------------
=========================================================================
"assert isinstance(wrap_var(('foo',))[0], AnsibleUnsafe)


test_wrap_var_tuple_None():
assert wrap_var((None,))[0] is None
assert not isinstance(wrap_var((None,))[0], AnsibleUnsafe)
"
-------------------------------------------------------------------------
"```python
def test_wrap_var_tuple_None():
    assert wrap_var((None,))[0] is None
    assert not isinstance(wrap_var((None,))[0], AnsibleUnsafe)
```"
-------------------------------------------------------------------------
"assert isinstance(wrap_var(('foo',))[0], AnsibleUnsafe)


test_wrap_var_tuple_None():
assert wrap_var((None,))[0] is None
assert not isinstance(wrap_var((None,))[0], AnsibleUnsafe)
"
-------------------------------------------------------------------------
"Recom
PRs: 65918, 73044"
-------------------------------------------------------------------------
=========================================================================
"def test_wrap_var_no_ref():
thing = {
    'foo': {
        'bar': 'baz'
    },
    'bar': ['baz', 'qux'],
    'baz': ('qux',),
    'none': None,
    'text': 'text',
}
wrapped_thing = wrap_var(thing)
thing is not wrapped_thing
thing['foo'] is not wrapped_thing['foo']
thing['bar'][0] is not wrapped_thing['bar'][0]
thing['baz'][0] is not wrapped_thing['baz'][0]
thing['none'] is not wrapped_thing['none']
thing['text'] is not wrapped_thing['text']


"
-------------------------------------------------------------------------
"```python
def test_wrap_var_no_ref():
    thing = {
        'foo': {
            'bar': 'baz'
        },
        'bar': ['baz', 'qux'],
        'baz': ('qux',),
        'none': None,
        'text': 'text',
    }
    wrapped_thing = wrap_var(thing)
    assert thing is not wrapped_thing
    assert thing['foo'] is not wrapped_thing['foo']
    assert thing['bar'][0] is not wrapped_thing['bar'][0]
    assert thing['baz'][0] is not wrapped_thing['baz'][0]
    assert thing['none'] is not wrapped_thing['none']
    assert thing['text'] is not wrapped_thing['text']
```"
-------------------------------------------------------------------------
"def test_wrap_var_no_ref():
thing = {
    'foo': {
        'bar': 'baz'
    },
    'bar': ['baz', 'qux'],
    'baz': ('qux',),
    'none': None,
    'text': 'text',
}
wrapped_thing = wrap_var(thing)
thing is not wrapped_thing
thing['foo'] is not wrapped_thing['foo']
thing['bar'][0] is not wrapped_thing['bar'][0]
thing['baz'][0] is not wrapped_thing['baz'][0]
thing['none'] is not wrapped_thing['none']
thing['text'] is not wrapped_thing['text']


"
-------------------------------------------------------------------------
"Recom
PRs: 65918, 73044"
-------------------------------------------------------------------------
=========================================================================
"- name: Set variables on an imported playbook
import_playbook: otherplays.yml
vars:
  service: httpd
"
-------------------------------------------------------------------------
"- name: Set variables on an imported playbook
  import_playbook: otherplays.yml
  vars:
    service: httpd"
-------------------------------------------------------------------------
"- name: Set variables on an imported playbook
import_playbook: otherplays.yml
vars:
  service: httpd
"
-------------------------------------------------------------------------
"Recom
PRs: 72987, 73015"
-------------------------------------------------------------------------
=========================================================================
"display.deprecated(""Additional parameters in import_playbook statements are deprecated. ""
                   ""Use 'vars' instead. See 'import_playbook' documentation for examples."", version='2.14')
"
-------------------------------------------------------------------------
"```python
display.deprecated(""Additional parameters in import_playbook statements are deprecated. ""
                   ""Use 'vars' instead. See 'import_playbook' documentation for examples."", version='2.14')
```"
-------------------------------------------------------------------------
"display.deprecated(""Additional parameters in import_playbook statements are deprecated. ""
                   ""Use 'vars' instead. See 'import_playbook' documentation for examples."", version='2.14')
"
-------------------------------------------------------------------------
"Recom
PRs: 72987, 73015"
-------------------------------------------------------------------------
=========================================================================
"elif self.collection_name is not None:
"
-------------------------------------------------------------------------
"```python
elif self.collection_name:
```"
-------------------------------------------------------------------------
"elif self.collection_name is not None:
"
-------------------------------------------------------------------------
"Recom
PRs: 72987, 73015"
-------------------------------------------------------------------------
=========================================================================
"unit_base, sep, suffix = unit.partition('@')
unit_search = '{unit_base}{sep}'.format(unit_base=unit_base, sep=sep)
(rc, out, err) = module.run_command(""{systemctl} list-unit-files '{unit_search}*'"".format(systemctl=systemctl, unit_search=unit_search))
is_systemd = unit_search in out
"
-------------------------------------------------------------------------
"```python
unit_base, sep, suffix = unit.partition('@')
unit_search = '{unit_base}{sep}'.format(unit_base=unit_base, sep=sep)
(rc, out, err) = module.run_command(""{systemctl} list-unit-files '{unit_search}*'"".format(systemctl=systemctl, unit_search=unit_search))
is_systemd = unit_search in out
```"
-------------------------------------------------------------------------
"unit_base, sep, suffix = unit.partition('@')
unit_search = '{unit_base}{sep}'.format(unit_base=unit_base, sep=sep)
(rc, out, err) = module.run_command(""{systemctl} list-unit-files '{unit_search}*'"".format(systemctl=systemctl, unit_search=unit_search))
is_systemd = unit_search in out
"
-------------------------------------------------------------------------
"Recom
PRs: 72985, 73014"
-------------------------------------------------------------------------
=========================================================================
"unit_base, sep, suffix = unit.partition('@')
unit_search = '{unit_base}{sep}'.format(unit_base=unit_base, sep=sep)
(rc, out, err) = module.run_command(""{systemctl} list-unit-files '{unit_search}*'"".format(systemctl=systemctl, unit_search=unit_search))
is_systemd = unit_search in out
"
-------------------------------------------------------------------------
"```python
unit_base, sep, suffix = unit.partition('@')
unit_search = '{unit_base}{sep}'.format(unit_base=unit_base, sep=sep)
(rc, out, err) = module.run_command(""{systemctl} list-unit-files '{unit_search}*'"".format(systemctl=systemctl, unit_search=unit_search))
is_systemd = unit_search in out
```"
-------------------------------------------------------------------------
"unit_base, sep, suffix = unit.partition('@')
unit_search = '{unit_base}{sep}'.format(unit_base=unit_base, sep=sep)
(rc, out, err) = module.run_command(""{systemctl} list-unit-files '{unit_search}*'"".format(systemctl=systemctl, unit_search=unit_search))
is_systemd = unit_search in out
"
-------------------------------------------------------------------------
"Recom
PRs: 72985, 73013"
-------------------------------------------------------------------------
=========================================================================
"if self._role and self.name:
"
-------------------------------------------------------------------------
"```python
from jinja2.exceptions import UndefinedError
from ansible.template import Templar
from collections import deque
from ansible.module_utils.six.moves import queue
from ansible.utils.display import Display
from ansible.module_utils.connection import Connection
import sys
from ansible.playbook.helpers import TaskInclude, Handler, Include
import time
from ansible.executor.process.worker import WorkerProcess
from ansible.playbook.included_file import IncludedFile
from ansible.module_utils._text import to_text
from __future__ import (absolute_import, division, print_function)

class Task(Base, Conditional, Taggable, CollectionSearch):
    if self._role and self.name:
        role_name = self._role.get_name(include_role_fqcn=include_role_fqcn)
        return ""%s : %s"" % (role_name, self.name)
    elif self.name:
        return self.name
```"
-------------------------------------------------------------------------
"if self._role and self.name:
"
-------------------------------------------------------------------------
"Recom
PRs: 72511, 72919"
-------------------------------------------------------------------------
=========================================================================
"term_results = [to_text(g, errors='surrogate_or_strict') for g in globbed if os.path.isfile(g)]
if term_results:
    ret.extend(term_results)
"
-------------------------------------------------------------------------
"```python
term_results = [ansible.module_utils._text.to_text(g, errors='surrogate_or_strict') for g in globbed if os.path.isfile(g)]
if term_results:
    ret.extend(term_results)
```"
-------------------------------------------------------------------------
"term_results = [to_text(g, errors='surrogate_or_strict') for g in globbed if os.path.isfile(g)]
if term_results:
    ret.extend(term_results)
"
-------------------------------------------------------------------------
"Recom
PRs: 72879, 72904"
-------------------------------------------------------------------------
=========================================================================
"display.deprecated(""%s option, %s%s"" % (name, why, alt),
"
-------------------------------------------------------------------------
"```python
display.deprecated(""%s option, %s%s"" % (name, why, alt))
```"
-------------------------------------------------------------------------
"display.deprecated(""%s option, %s%s"" % (name, why, alt),
"
-------------------------------------------------------------------------
"Recom
PRs: 72697, 72871"
-------------------------------------------------------------------------
=========================================================================
"def _add_base_defs_deprecations(base_defs):
'''Add deprecation source 'ansible.builtin' to deprecations in base.yml'''
def process(entry):
    if 'deprecated' in entry:
        entry['deprecated']['collection_name'] = 'ansible.builtin'

for dummy, data in base_defs.items():
    process(data)
    for section in ('ini', 'env', 'vars'):
        if section in data:
            for entry in data[section]:
                process(entry)


"
-------------------------------------------------------------------------
"```python
def _add_base_defs_deprecations(base_defs):
    '''Add deprecation source 'ansible.builtin' to deprecations in base.yml'''
    def process(entry):
        if 'deprecated' in entry:
            entry['deprecated']['collection_name'] = 'ansible.builtin'

    for dummy, data in base_defs.items():
        process(data)
        for section in ('ini', 'env', 'vars'):
            if section in data:
                for entry in data[section]:
                    process(entry)
```"
-------------------------------------------------------------------------
"def _add_base_defs_deprecations(base_defs):
'''Add deprecation source 'ansible.builtin' to deprecations in base.yml'''
def process(entry):
    if 'deprecated' in entry:
        entry['deprecated']['collection_name'] = 'ansible.builtin'

for dummy, data in base_defs.items():
    process(data)
    for section in ('ini', 'env', 'vars'):
        if section in data:
            for entry in data[section]:
                process(entry)


"
-------------------------------------------------------------------------
"Recom
PRs: 72697, 72871"
-------------------------------------------------------------------------
=========================================================================
"_add_base_defs_deprecations(self._base_defs)
"
-------------------------------------------------------------------------
"```python
_deprecations_check(self._base_defs)
```"
-------------------------------------------------------------------------
"_add_base_defs_deprecations(self._base_defs)
"
-------------------------------------------------------------------------
"Recom
PRs: 72697, 72871"
-------------------------------------------------------------------------
=========================================================================
"to_text,
"
-------------------------------------------------------------------------
"```python
from .encoding import (
    to_bytes,
    to_text,
)

from .io import (
```"
-------------------------------------------------------------------------
"yield TestTarget(to_text(file_path), module_path, prefix, path, symlink)
"
-------------------------------------------------------------------------
"Recom
PRs: 72623, 72866"
-------------------------------------------------------------------------
=========================================================================
"to_text,
"
-------------------------------------------------------------------------
"```python
from .encoding import (
    to_bytes,
)
```"
-------------------------------------------------------------------------
"to_text,
"
-------------------------------------------------------------------------
"Recom
PRs: 72623, 72865"
-------------------------------------------------------------------------
=========================================================================
"yield DirectoryTarget(to_text(sorted(matched_directories, key=len)[0]), target.modules)
"
-------------------------------------------------------------------------
"```python
from typing import Iterable
import os
import io
from __future__ import annotations
from collections import abc
import re
import encoding
import data
import itertools
import util

def filter_targets(targets: Iterable[TCompletionTarget]):
    if directories and matched_directories:
        yield DirectoryTarget(to_text(sorted(matched_directories, key=len)[0]), target.modules)
    else:
        yield target
```"
-------------------------------------------------------------------------
"yield DirectoryTarget(to_text(sorted(matched_directories, key=len)[0]), target.modules)
"
-------------------------------------------------------------------------
"Recom
PRs: 72623, 72865"
-------------------------------------------------------------------------
=========================================================================
"yield IntegrationTarget(to_text(path), modules, prefixes)
"
-------------------------------------------------------------------------
"yield IntegrationTarget(os.path.sep.join(path_tuple), modules, load_integration_prefixes())"
-------------------------------------------------------------------------
"yield IntegrationTarget(to_text(path), modules, prefixes)
"
-------------------------------------------------------------------------
"Recom
PRs: 72623, 72865"
-------------------------------------------------------------------------
=========================================================================
"yield TestTarget(to_text(file_path), module_path, prefix, path, symlink)
"
-------------------------------------------------------------------------
"```python
yield TestTarget(file_path, module_path, prefix, path, symlink)
```"
-------------------------------------------------------------------------
"yield TestTarget(to_text(file_path), module_path, prefix, path, symlink)
"
-------------------------------------------------------------------------
"Recom
PRs: 72623, 72865"
-------------------------------------------------------------------------
=========================================================================
"if os.path.islink(b_path) and e.errno in (
    errno.EACCES,  # can't access symlink in sticky directory (stat)
    errno.EPERM,  # can't set mode on symbolic links (chmod)
    errno.EROFS,  # can't set mode on read-only filesystem
):
"
-------------------------------------------------------------------------
"```python
if os.path.islink(b_path) and e.errno in (
    errno.EACCES,  # can't access symlink in sticky directory (stat)
    errno.EPERM,  # can't set mode on symbolic links (chmod)
    errno.EROFS,  # can't set mode on read-only filesystem
):
```"
-------------------------------------------------------------------------
"if os.path.islink(b_path) and e.errno in (
    errno.EACCES,  # can't access symlink in sticky directory (stat)
    errno.EPERM,  # can't set mode on symbolic links (chmod)
    errno.EROFS,  # can't set mode on read-only filesystem
):
"
-------------------------------------------------------------------------
"Recom
PRs: 45198, 72863"
-------------------------------------------------------------------------
=========================================================================
"if os.path.islink(b_path) and e.errno in (
    errno.EACCES,  # can't access symlink in sticky directory (stat)
    errno.EPERM,  # can't set mode on symbolic links (chmod)
    errno.EROFS,  # can't set mode on read-only filesystem
):
"
-------------------------------------------------------------------------
"```python
if os.path.islink(b_path) and e.errno in (
    errno.EACCES,  # can't access symlink in sticky directory (stat)
    errno.EPERM,  # can't set mode on symbolic links (chmod)
    errno.EROFS,  # can't set mode on read-only filesystem
):
```"
-------------------------------------------------------------------------
"if os.path.islink(b_path) and e.errno in (
    errno.EACCES,  # can't access symlink in sticky directory (stat)
    errno.EPERM,  # can't set mode on symbolic links (chmod)
    errno.EROFS,  # can't set mode on read-only filesystem
):
"
-------------------------------------------------------------------------
"Recom
PRs: 45198, 72862"
-------------------------------------------------------------------------
=========================================================================
"interface = dict(v4={}, v6={})

if netstat_path:
    rc, out, err = self.module.run_command([netstat_path, '-nr'])
    lines = out.splitlines()
    for line in lines:
        words = line.split()
        if len(words) > 1 and words[0] == 'default':
            if '.' in words[1]:
                interface['v4']['gateway'] = words[1]
                interface['v4']['interface'] = words[5]
            elif ':' in words[1]:
                interface['v6']['gateway'] = words[1]
                interface['v6']['interface'] = words[5]
"
-------------------------------------------------------------------------
"```python
interface = {'v4': {}, 'v6': {}}

rc, out, err = self.module.run_command([netstat_path, '-nr'])
lines = out.splitlines()
for line in lines:
    words = line.split()
    if len(words) > 1 and words[0] == 'default':
        if '.' in words[1]:
            interface['v4']['gateway'] = words[1]
            interface['v4']['interface'] = words[5]
        elif ':' in words[1]:
            interface['v6']['gateway'] = words[1]
            interface['v6']['interface'] = words[5]
```"
-------------------------------------------------------------------------
"interface = dict(v4={}, v6={})

if netstat_path:
    rc, out, err = self.module.run_command([netstat_path, '-nr'])
    lines = out.splitlines()
    for line in lines:
        words = line.split()
        if len(words) > 1 and words[0] == 'default':
            if '.' in words[1]:
                interface['v4']['gateway'] = words[1]
                interface['v4']['interface'] = words[5]
            elif ':' in words[1]:
                interface['v6']['gateway'] = words[1]
                interface['v6']['interface'] = words[5]
"
-------------------------------------------------------------------------
"Recom
PRs: 72516, 72714"
-------------------------------------------------------------------------
=========================================================================
"expand_user_and_vars=True, pass_fds=None, before_communicate_callback=None, ignore_invalid_cwd=True):
"
-------------------------------------------------------------------------
"class AnsibleModule(object):
 
    def run_command(self, args, check_rc=False, close_fds=True, executable=None, data=None, binary_data=False, path_prefix=None, cwd=None,
                     use_unsafe_shell=False, prompt_regex=None, environ_update=None, umask=None, encoding='utf-8', errors='surrogate_or_strict',
                     expand_user_and_vars=True, pass_fds=None, before_communicate_callback=None, ignore_invalid_cwd=True):
        '''
        Execute a command, returns rc, stdout, and stderr.
        '''"
-------------------------------------------------------------------------
"expand_user_and_vars=True, pass_fds=None, before_communicate_callback=None, ignore_invalid_cwd=True):
"
-------------------------------------------------------------------------
"Recom
PRs: 72390, 72690"
-------------------------------------------------------------------------
=========================================================================
":kw ignore_invalid_cwd: This flag indicates whether an invalid ``cwd``
    (non-existent or not a directory) should be ignored or should raise
    an exception.
"
-------------------------------------------------------------------------
"```python
        # make sure we're in the right working directory
        if cwd and os.path.isdir(cwd):
            cwd = to_bytes(os.path.abspath(os.path.expanduser(cwd)), errors='surrogate_or_strict')
            kwargs['cwd'] = cwd
            try:
                os.chdir(cwd)
            except (OSError, IOError) as e:
                self.fail_json(rc=e.errno, msg=""Could not open %s, %s"" % (cwd, to_native(e)),
                               exception=traceback.format_exc())
        
        ignore_invalid_cwd = kwargs.pop('ignore_invalid_cwd', False)

        if cwd and not ignore_invalid_cwd:
            if not os.path.exists(cwd) or not os.path.isdir(cwd):
                raise ValueError(""Invalid cwd specified"")

        old_umask = None
``` "
-------------------------------------------------------------------------
":kw ignore_invalid_cwd: This flag indicates whether an invalid ``cwd``
    (non-existent or not a directory) should be ignored or should raise
    an exception.
"
-------------------------------------------------------------------------
"Recom
PRs: 72390, 72690"
-------------------------------------------------------------------------
=========================================================================
"if cwd:
    if os.path.isdir(cwd):
        cwd = to_bytes(os.path.abspath(os.path.expanduser(cwd)), errors='surrogate_or_strict')
        kwargs['cwd'] = cwd
        try:
            os.chdir(cwd)
        except (OSError, IOError) as e:
            self.fail_json(rc=e.errno, msg=""Could not chdir to %s, %s"" % (cwd, to_native(e)),
                           exception=traceback.format_exc())
    elif not ignore_invalid_cwd:
        self.fail_json(msg=""Provided cwd is not a valid directory: %s"" % cwd)
"
-------------------------------------------------------------------------
"```python
if cwd:
    if os.path.isdir(cwd):
        cwd = to_bytes(os.path.abspath(os.path.expanduser(cwd)), errors='surrogate_or_strict')
        kwargs['cwd'] = cwd
        try:
            os.chdir(cwd)
        except (OSError, IOError) as e:
            self.fail_json(rc=e.errno, msg=""Could not chdir to %s, %s"" % (cwd, to_native(e)),
                           exception=traceback.format_exc())
    elif not ignore_invalid_cwd:
        self.fail_json(msg=""Provided cwd is not a valid directory: %s"" % cwd)
```"
-------------------------------------------------------------------------
"if cwd:
    if os.path.isdir(cwd):
        cwd = to_bytes(os.path.abspath(os.path.expanduser(cwd)), errors='surrogate_or_strict')
        kwargs['cwd'] = cwd
        try:
            os.chdir(cwd)
        except (OSError, IOError) as e:
            self.fail_json(rc=e.errno, msg=""Could not chdir to %s, %s"" % (cwd, to_native(e)),
                           exception=traceback.format_exc())
    elif not ignore_invalid_cwd:
        self.fail_json(msg=""Provided cwd is not a valid directory: %s"" % cwd)
"
-------------------------------------------------------------------------
"Recom
PRs: 72390, 72690"
-------------------------------------------------------------------------
=========================================================================
"@pytest.mark.parametrize('stdin', [{}], indirect=['stdin'])
def test_cwd_not_a_dir_noignore(self, rc_am):
    rc_am._os.getcwd.return_value = '/old'
    rc_am._os.path.isdir.side_effect = lambda d: d != '/not-a-dir'
    with pytest.raises(SystemExit):
        rc_am.run_command('/bin/ls', cwd='/not-a-dir', ignore_invalid_cwd=False)
    assert rc_am.fail_json.called

"
-------------------------------------------------------------------------
"```python
@pytest.mark.parametrize('stdin', [{}], indirect=['stdin'])
def test_cwd_not_a_dir_noignore(self, rc_am):
    rc_am._os.getcwd.return_value = '/old'
    rc_am._os.path.isdir.side_effect = lambda d: d != '/not-a-dir'
    with pytest.raises(SystemExit):
        rc_am.run_command('/bin/ls', cwd='/not-a-dir', ignore_invalid_cwd=False)
    assert rc_am.fail_json.called
```"
-------------------------------------------------------------------------
"@pytest.mark.parametrize('stdin', [{}], indirect=['stdin'])
def test_cwd_not_a_dir_noignore(self, rc_am):
    rc_am._os.getcwd.return_value = '/old'
    rc_am._os.path.isdir.side_effect = lambda d: d != '/not-a-dir'
    with pytest.raises(SystemExit):
        rc_am.run_command('/bin/ls', cwd='/not-a-dir', ignore_invalid_cwd=False)
    assert rc_am.fail_json.called

"
-------------------------------------------------------------------------
"Recom
PRs: 72390, 72690"
-------------------------------------------------------------------------
=========================================================================
"import sys
"
-------------------------------------------------------------------------
"```python
import sys
```"
-------------------------------------------------------------------------
"# A bug exists in Python 2.6 that causes an exception to be raised during
# interpreter shutdown. This is only an issue in our CI testing but we
# hit it frequently enough to add a small sleep to avoid the issue.
# This can be removed once we have split controller available in CI.
#
# Further information:
#     Issue: https://bugs.python.org/issue4106
#     Fix:   https://hg.python.org/cpython/rev/d316315a8781
#
try:
    if (2, 6) == (sys.version_info[0:2]):
        time.sleep(0.0001)
except (IndexError, AttributeError):
    # In case there is an issue getting the version info, don't raise an Exception
    pass

"
-------------------------------------------------------------------------
"Recom
PRs: 72604, 72610"
-------------------------------------------------------------------------
=========================================================================
"import sys
"
-------------------------------------------------------------------------
"from __future__ import (absolute_import, print_function)
__metaclass__ = type

import os
import tempfile
import threading
import time
import sys"
-------------------------------------------------------------------------
"import sys
import time
"
-------------------------------------------------------------------------
"Recom
PRs: 72604, 72609"
-------------------------------------------------------------------------
=========================================================================
"# A bug exists in Python 2.6 that causes an exception to be raised during
# interpreter shutdown. This is only an issue in our CI testing but we
# hit it frequently enough to add a small sleep to avoid the issue.
# This can be removed once we have split controller available in CI.
#
# Further information:
#     Issue: https://bugs.python.org/issue4106
#     Fix:   https://hg.python.org/cpython/rev/d316315a8781
#
try:
    if (2, 6) == (sys.version_info[0:2]):
        time.sleep(0.0001)
except (IndexError, AttributeError):
    # In case there is an issue getting the version info, don't raise an Exception
    pass

"
-------------------------------------------------------------------------
"```python
try:
    if (2, 6) == (sys.version_info[0:2]):
        time.sleep(0.0001)
except (IndexError, AttributeError):
    pass
```"
-------------------------------------------------------------------------
"# A bug exists in Python 2.6 that causes an exception to be raised during
# interpreter shutdown. This is only an issue in our CI testing but we
# hit it frequently enough to add a small sleep to avoid the issue.
# This can be removed once we have split controller available in CI.
#
# Further information:
#     Issue: https://bugs.python.org/issue4106
#     Fix:   https://hg.python.org/cpython/rev/d316315a8781
#
try:
    if (2, 6) == (sys.version_info[0:2]):
        time.sleep(0.0001)
except (IndexError, AttributeError):
    # In case there is an issue getting the version info, don't raise an Exception
    pass

"
-------------------------------------------------------------------------
"Recom
PRs: 72604, 72609"
-------------------------------------------------------------------------
=========================================================================
"import sys
"
-------------------------------------------------------------------------
"```python
import sys
```"
-------------------------------------------------------------------------
"import sys
"
-------------------------------------------------------------------------
"Recom
PRs: 72604, 72608"
-------------------------------------------------------------------------
=========================================================================
"# A bug exists in Python 2.6 that causes an exception to be raised during
# interpreter shutdown. This is only an issue in our CI testing but we
# hit it frequently enough to add a small sleep to avoid the issue.
# This can be removed once we have split controller available in CI.
#
# Further information:
#     Issue: https://bugs.python.org/issue4106
#     Fix:   https://hg.python.org/cpython/rev/d316315a8781
#
try:
    if (2, 6) == (sys.version_info[0:2]):
        time.sleep(0.0001)
except (IndexError, AttributeError):
    # In case there is an issue getting the version info, don't raise an Exception
    pass

"
-------------------------------------------------------------------------
"```python
try:
    if (2, 6) == (sys.version_info[0:2]):
        time.sleep(0.0001)
except (IndexError, AttributeError):
    pass
```"
-------------------------------------------------------------------------
"# A bug exists in Python 2.6 that causes an exception to be raised during
# interpreter shutdown. This is only an issue in our CI testing but we
# hit it frequently enough to add a small sleep to avoid the issue.
# This can be removed once we have split controller available in CI.
#
# Further information:
#     Issue: https://bugs.python.org/issue4106
#     Fix:   https://hg.python.org/cpython/rev/d316315a8781
#
try:
    if (2, 6) == (sys.version_info[0:2]):
        time.sleep(0.0001)
except (IndexError, AttributeError):
    # In case there is an issue getting the version info, don't raise an Exception
    pass

"
-------------------------------------------------------------------------
"Recom
PRs: 72604, 72608"
-------------------------------------------------------------------------
=========================================================================
"from os import (
getpgrp,
isatty,
tcgetpgrp,

"
-------------------------------------------------------------------------
"```python
from os import getpgrp, isatty, tcgetpgrp
```"
-------------------------------------------------------------------------
"from os import (
getpgrp,
isatty,
tcgetpgrp,

"
-------------------------------------------------------------------------
"Recom
PRs: 72065, 72606"
-------------------------------------------------------------------------
=========================================================================
"def is_interactive(fd=None):
if fd is None:
    return False

if isatty(fd):
    # Compare the current process group to the process group associated
    # with terminal of the given file descriptor to determine if the process
    # is running in the background.
    return getpgrp() == tcgetpgrp(fd)
else:
    return False


"
-------------------------------------------------------------------------
"```python
def is_interactive(fd=None):
    if fd is None:
        return False

    if os.isatty(fd):
        # Compare the current process group to the process group associated
        # with terminal of the given file descriptor to determine if the process
        # is running in the background.
        return os.getpgrp() == termios.tcgetpgrp(fd)
    else:
        return False
```"
-------------------------------------------------------------------------
"def is_interactive(fd=None):
if fd is None:
    return False

if isatty(fd):
    # Compare the current process group to the process group associated
    # with terminal of the given file descriptor to determine if the process
    # is running in the background.
    return getpgrp() == tcgetpgrp(fd)
else:
    return False


"
-------------------------------------------------------------------------
"Recom
PRs: 72065, 72606"
-------------------------------------------------------------------------
=========================================================================
"# AttributeError: someone is using a null file descriptor as stdin on windoze
ractive = is_interactive(stdin_fd)
nteractive:
# grab actual CtrlC sequence
try:
    intr = termios.tcgetattr(stdin_fd)[6][termios.VINTR]
except Exception:
    # unsupported/not present, use default
    intr = b'\x03'  # value for CtrlC

# get backspace sequences
try:
    backspace = termios.tcgetattr(stdin_fd)[6][termios.VERASE]
except Exception:
    backspace = [b'\x7f', b'\x08']

old_settings = termios.tcgetattr(stdin_fd)
tty.setraw(stdin_fd)

# Only set stdout to raw mode if it is a TTY. This is needed when redirecting
# stdout to a file since a file cannot be set to raw mode.
if isatty(stdout_fd):
    tty.setraw(stdout_fd)
# Only echo input if no timeout is specified
if not seconds and echo:
    new_settings = termios.tcgetattr(stdin_fd)
    new_settings[3] = new_settings[3] | termios.ECHO
    termios.tcsetattr(stdin_fd, termios.TCSANOW, new_settings)

# flush the buffer to make sure no previous key presses
# are read in below
termios.tcflush(stdin, termios.TCIFLUSH)
if not interactive:
    display.warning(""Not waiting for response to prompt as stdin is not interactive"")
    if seconds is not None:
        # Give the signal handler enough time to timeout
        time.sleep(seconds  1)
    break
    key_pressed = stdin.read(1)

    if key_pressed == intr:  # value for CtrlC
        clear_line(stdout)
        raise KeyboardInterrupt

    # read key presses and act accordingly
    if key_pressed in (b'\r', b'\n'):
        clear_line(stdout)
        break
    elif key_pressed in backspace:
        # delete a character if backspace is pressed
        result['user_input'] = result['user_input'][:-1]
        clear_line(stdout)
        if echo:
            stdout.write(result['user_input'])
        stdout.flush()
    else:
        result['user_input'] = key_pressed
"
-------------------------------------------------------------------------
"```python
interactive = is_interactive(stdin_fd)

if interactive:
    # grab actual CtrlC sequence
    try:
        intr = termios.tcgetattr(stdin_fd)[6][termios.VINTR]
    except Exception:
        # unsupported/not present, use default
        intr = b'\x03'  # value for CtrlC

    # get backspace sequences
    try:
        backspace = termios.tcgetattr(stdin_fd)[6][termios.VERASE]
    except Exception:
        backspace = [b'\x7f', b'\x08']

    old_settings = termios.tcgetattr(stdin_fd)
    tty.setraw(stdin_fd)

if isatty(stdout_fd):
    tty.setraw(stdout_fd)

if not seconds and echo:
    new_settings = termios.tcgetattr(stdin_fd)
    new_settings[3] = new_settings[3] | termios.ECHO
    termios.tcsetattr(stdin_fd, termios.TCSANOW, new_settings)

termios.tcflush(stdin_fd, termios.TCIFLUSH)

if not interactive:
    display.warning(""Not waiting for response to prompt as stdin is not interactive"")
    if seconds is not None:
        # Give the signal handler enough time to timeout
        time.sleep(seconds - 1)

    key_pressed = stdin.read(1)

    if key_pressed == intr:  # value for CtrlC
        clear_line(stdout)
        raise KeyboardInterrupt

    if key_pressed in (b'\r', b'\n'):
        clear_line(stdout)
        break
    elif key_pressed in backspace:
        # delete a character if backspace is pressed
        result['user_input'] = result['user_input'][:-1]
        clear_line(stdout)
        if echo:
            stdout.write(result['user_input'])
        stdout.flush()
    else:
        result['user_input'] = key_pressed
```"
-------------------------------------------------------------------------
"# AttributeError: someone is using a null file descriptor as stdin on windoze
ractive = is_interactive(stdin_fd)
nteractive:
# grab actual CtrlC sequence
try:
    intr = termios.tcgetattr(stdin_fd)[6][termios.VINTR]
except Exception:
    # unsupported/not present, use default
    intr = b'\x03'  # value for CtrlC

# get backspace sequences
try:
    backspace = termios.tcgetattr(stdin_fd)[6][termios.VERASE]
except Exception:
    backspace = [b'\x7f', b'\x08']

old_settings = termios.tcgetattr(stdin_fd)
tty.setraw(stdin_fd)

# Only set stdout to raw mode if it is a TTY. This is needed when redirecting
# stdout to a file since a file cannot be set to raw mode.
if isatty(stdout_fd):
    tty.setraw(stdout_fd)
# Only echo input if no timeout is specified
if not seconds and echo:
    new_settings = termios.tcgetattr(stdin_fd)
    new_settings[3] = new_settings[3] | termios.ECHO
    termios.tcsetattr(stdin_fd, termios.TCSANOW, new_settings)

# flush the buffer to make sure no previous key presses
# are read in below
termios.tcflush(stdin, termios.TCIFLUSH)
if not interactive:
    display.warning(""Not waiting for response to prompt as stdin is not interactive"")
    if seconds is not None:
        # Give the signal handler enough time to timeout
        time.sleep(seconds  1)
    break
    key_pressed = stdin.read(1)

    if key_pressed == intr:  # value for CtrlC
        clear_line(stdout)
        raise KeyboardInterrupt

    # read key presses and act accordingly
    if key_pressed in (b'\r', b'\n'):
        clear_line(stdout)
        break
    elif key_pressed in backspace:
        # delete a character if backspace is pressed
        result['user_input'] = result['user_input'][:-1]
        clear_line(stdout)
        if echo:
            stdout.write(result['user_input'])
        stdout.flush()
    else:
        result['user_input'] = key_pressed
"
-------------------------------------------------------------------------
"Recom
PRs: 72065, 72606"
-------------------------------------------------------------------------
=========================================================================
"from os import (
getpgrp,
isatty,
tcgetpgrp,

"
-------------------------------------------------------------------------
"```python
from os import getpgrp, isatty, tcgetpgrp
```"
-------------------------------------------------------------------------
"from os import (
getpgrp,
isatty,
tcgetpgrp,

"
-------------------------------------------------------------------------
"Recom
PRs: 72065, 72605"
-------------------------------------------------------------------------
=========================================================================
"def is_interactive(fd=None):
if fd is None:
    return False

if isatty(fd):
    # Compare the current process group to the process group associated
    # with terminal of the given file descriptor to determine if the process
    # is running in the background.
    return getpgrp() == tcgetpgrp(fd)
else:
    return False


"
-------------------------------------------------------------------------
"```python
import os
import termios

def is_interactive(fd=None):
    if fd is None:
        return False
    
    if os.isatty(fd):
        # Compare the current process group to the process group associated
        # with terminal of the given file descriptor to determine if the process
        # is running in the background.
        return os.getpgrp() == termios.tcgetpgrp(fd)
    else:
        return False
```"
-------------------------------------------------------------------------
"def is_interactive(fd=None):
if fd is None:
    return False

if isatty(fd):
    # Compare the current process group to the process group associated
    # with terminal of the given file descriptor to determine if the process
    # is running in the background.
    return getpgrp() == tcgetpgrp(fd)
else:
    return False


"
-------------------------------------------------------------------------
"Recom
PRs: 72065, 72605"
-------------------------------------------------------------------------
=========================================================================
"# AttributeError: someone is using a null file descriptor as stdin on windoze
ractive = is_interactive(stdin_fd)
nteractive:
# grab actual CtrlC sequence
try:
    intr = termios.tcgetattr(stdin_fd)[6][termios.VINTR]
except Exception:
    # unsupported/not present, use default
    intr = b'\x03'  # value for CtrlC

# get backspace sequences
try:
    backspace = termios.tcgetattr(stdin_fd)[6][termios.VERASE]
except Exception:
    backspace = [b'\x7f', b'\x08']

old_settings = termios.tcgetattr(stdin_fd)
tty.setraw(stdin_fd)

# Only set stdout to raw mode if it is a TTY. This is needed when redirecting
# stdout to a file since a file cannot be set to raw mode.
if isatty(stdout_fd):
    tty.setraw(stdout_fd)
# Only echo input if no timeout is specified
if not seconds and echo:
    new_settings = termios.tcgetattr(stdin_fd)
    new_settings[3] = new_settings[3] | termios.ECHO
    termios.tcsetattr(stdin_fd, termios.TCSANOW, new_settings)

# flush the buffer to make sure no previous key presses
# are read in below
termios.tcflush(stdin, termios.TCIFLUSH)
if not interactive:
    display.warning(""Not waiting for response to prompt as stdin is not interactive"")
    if seconds is not None:
        # Give the signal handler enough time to timeout
        time.sleep(seconds  1)
    break
    key_pressed = stdin.read(1)

    if key_pressed == intr:  # value for CtrlC
        clear_line(stdout)
        raise KeyboardInterrupt

    # read key presses and act accordingly
    if key_pressed in (b'\r', b'\n'):
        clear_line(stdout)
        break
    elif key_pressed in backspace:
        # delete a character if backspace is pressed
        result['user_input'] = result['user_input'][:-1]
        clear_line(stdout)
        if echo:
            stdout.write(result['user_input'])
        stdout.flush()
    else:
        result['user_input'] = key_pressed
"
-------------------------------------------------------------------------
"```python
try:
    intr = termios.tcgetattr(stdin_fd)[6][termios.VINTR]
except Exception:
    # unsupported/not present, use default
    intr = b'\x03'  # value for CtrlC

# get backspace sequences
try:
    backspace = termios.tcgetattr(stdin_fd)[6][termios.VERASE]
except Exception:
    backspace = [b'\x7f', b'\x08']

old_settings = termios.tcgetattr(stdin_fd)
tty.setraw(stdin_fd)

# Only set stdout to raw mode if it is a TTY. This is needed when redirecting
# stdout to a file since a file cannot be set to raw mode.
if os.isatty(stdout_fd):
    tty.setraw(stdout_fd)

# Only echo input if no timeout is specified
if not seconds and echo:
    new_settings = termios.tcgetattr(stdin_fd)
    new_settings[3] = new_settings[3] | termios.ECHO
    termios.tcsetattr(stdin_fd, termios.TCSANOW, new_settings)

# flush the buffer to make sure no previous key presses
# are read in below
termios.tcflush(stdin_fd, termios.TCIFLUSH)

if not interactive:
    display.warning(""Not waiting for response to prompt as stdin is not interactive"")
    if seconds is not None:
        # Give the signal handler enough time to timeout
        time.sleep(seconds - 1)
    break

key_pressed = os.read(stdin_fd, 1)

if key_pressed == intr:  # value for CtrlC
    clear_line(stdout)
    raise KeyboardInterrupt

# read key presses and act accordingly
if key_pressed in (b'\r', b'\n'):
    clear_line(stdout)
    break
elif key_pressed in backspace:
    # delete a character if backspace is pressed
    result['user_input'] = result['user_input'][:-1]
    clear_line(stdout)
    if echo:
        stdout.write(result['user_input'])
    stdout.flush()
else:
    result['user_input'] = key_pressed
```"
-------------------------------------------------------------------------
"# AttributeError: someone is using a null file descriptor as stdin on windoze
ractive = is_interactive(stdin_fd)
nteractive:
# grab actual CtrlC sequence
try:
    intr = termios.tcgetattr(stdin_fd)[6][termios.VINTR]
except Exception:
    # unsupported/not present, use default
    intr = b'\x03'  # value for CtrlC

# get backspace sequences
try:
    backspace = termios.tcgetattr(stdin_fd)[6][termios.VERASE]
except Exception:
    backspace = [b'\x7f', b'\x08']

old_settings = termios.tcgetattr(stdin_fd)
tty.setraw(stdin_fd)

# Only set stdout to raw mode if it is a TTY. This is needed when redirecting
# stdout to a file since a file cannot be set to raw mode.
if isatty(stdout_fd):
    tty.setraw(stdout_fd)
# Only echo input if no timeout is specified
if not seconds and echo:
    new_settings = termios.tcgetattr(stdin_fd)
    new_settings[3] = new_settings[3] | termios.ECHO
    termios.tcsetattr(stdin_fd, termios.TCSANOW, new_settings)

# flush the buffer to make sure no previous key presses
# are read in below
termios.tcflush(stdin, termios.TCIFLUSH)
if not interactive:
    display.warning(""Not waiting for response to prompt as stdin is not interactive"")
    if seconds is not None:
        # Give the signal handler enough time to timeout
        time.sleep(seconds  1)
    break
    key_pressed = stdin.read(1)

    if key_pressed == intr:  # value for CtrlC
        clear_line(stdout)
        raise KeyboardInterrupt

    # read key presses and act accordingly
    if key_pressed in (b'\r', b'\n'):
        clear_line(stdout)
        break
    elif key_pressed in backspace:
        # delete a character if backspace is pressed
        result['user_input'] = result['user_input'][:-1]
        clear_line(stdout)
        if echo:
            stdout.write(result['user_input'])
        stdout.flush()
    else:
        result['user_input'] = key_pressed
"
-------------------------------------------------------------------------
"Recom
PRs: 72065, 72605"
-------------------------------------------------------------------------
=========================================================================
"append_match(rule, params['comment'], 'comment')
append_param(rule, params['comment'], '--comment', False)
"
-------------------------------------------------------------------------
"```python
append_match(rule, params['comment'], 'comment')
append_param(rule, params['comment'], '--comment', False)
```"
-------------------------------------------------------------------------
"append_match(rule, params['comment'], 'comment')
append_param(rule, params['comment'], '--comment', False)
"
-------------------------------------------------------------------------
"Recom
PRs: 71496, 72551"
-------------------------------------------------------------------------
=========================================================================
"
def test_comment_position_at_end(self):
    """"""Test flush without parameters""""""
    set_module_args({
        'chain': 'INPUT',
        'jump': 'ACCEPT',
        'action': 'insert',
        'ctstate': ['NEW'],
        'comment': 'this is a comment',
        '_ansible_check_mode': True,
    })

    commands_results = [
        (0, '', ''),
    ]

    with patch.object(basic.AnsibleModule, 'run_command') as run_command:
        run_command.side_effect = commands_results
        with self.assertRaises(AnsibleExitJson) as result:
            iptables.main()
            self.assertTrue(result.exception.args[0]['changed'])

    self.assertEqual(run_command.call_count, 1)
    self.assertEqual(run_command.call_args_list[0][0][0], [
        '/sbin/iptables',
        '-t',
        'filter',
        '-C',
        'INPUT',
        '-j',
        'ACCEPT',
        '-m',
        'conntrack',
        '--ctstate',
        'NEW',
        '-m',
        'comment',
        '--comment',
        'this is a comment'
    ])
    self.assertEqual(run_command.call_args[0][0][14], 'this is a comment')
"
-------------------------------------------------------------------------
"```python
def test_comment_position_at_end(self):
    set_module_args({
        'chain': 'INPUT',
        'jump': 'ACCEPT',
        'action': 'insert',
        'ctstate': ['NEW'],
        'comment': 'this is a comment',
        '_ansible_check_mode': True,
    })

    commands_results = [
        (0, '', ''),
    ]

    with patch.object(units.modules.utils.AnsibleModule, 'run_command') as run_command:
        run_command.side_effect = commands_results
        with self.assertRaises(units.modules.utils.AnsibleExitJson) as result:
            iptables.main()
            self.assertTrue(result.exception.args[0]['changed'])

    self.assertEqual(run_command.call_count, 1)
    self.assertEqual(run_command.call_args_list[0][0][0], [
        '/sbin/iptables',
        '-t',
        'filter',
        '-C',
        'INPUT',
        '-j',
        'ACCEPT',
        '-m',
        'conntrack',
        '--ctstate',
        'NEW',
        '-m',
        'comment',
        '--comment',
        'this is a comment'
    ])
    self.assertEqual(run_command.call_args[0][0][14], 'this is a comment')
```"
-------------------------------------------------------------------------
"
def test_comment_position_at_end(self):
    """"""Test flush without parameters""""""
    set_module_args({
        'chain': 'INPUT',
        'jump': 'ACCEPT',
        'action': 'insert',
        'ctstate': ['NEW'],
        'comment': 'this is a comment',
        '_ansible_check_mode': True,
    })

    commands_results = [
        (0, '', ''),
    ]

    with patch.object(basic.AnsibleModule, 'run_command') as run_command:
        run_command.side_effect = commands_results
        with self.assertRaises(AnsibleExitJson) as result:
            iptables.main()
            self.assertTrue(result.exception.args[0]['changed'])

    self.assertEqual(run_command.call_count, 1)
    self.assertEqual(run_command.call_args_list[0][0][0], [
        '/sbin/iptables',
        '-t',
        'filter',
        '-C',
        'INPUT',
        '-j',
        'ACCEPT',
        '-m',
        'conntrack',
        '--ctstate',
        'NEW',
        '-m',
        'comment',
        '--comment',
        'this is a comment'
    ])
    self.assertEqual(run_command.call_args[0][0][14], 'this is a comment')
"
-------------------------------------------------------------------------
"Recom
PRs: 71496, 72551"
-------------------------------------------------------------------------
=========================================================================
"append_match(rule, params['comment'], 'comment')
append_param(rule, params['comment'], '--comment', False)
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, print_function
from units.compat.mock import patch
from ansible.module_utils.basic import *
from ansible.modules import iptables
from units.modules.utils import *

def construct_rule(params):
    rule = iptables.rule(
        params['comment'],
        append_match(rule, params['comment'], 'comment'),
        append_param(rule, params['comment'], '--comment', False),
        params['icmp_type'],
        ICMP_TYPE_OPTIONS[params['ip_version']],
        False)
    return rule
```"
-------------------------------------------------------------------------
"append_match(rule, params['comment'], 'comment')
append_param(rule, params['comment'], '--comment', False)
"
-------------------------------------------------------------------------
"Recom
PRs: 71496, 72548"
-------------------------------------------------------------------------
=========================================================================
"
def test_comment_position_at_end(self):
    """"""Test flush without parameters""""""
    set_module_args({
        'chain': 'INPUT',
        'jump': 'ACCEPT',
        'action': 'insert',
        'ctstate': ['NEW'],
        'comment': 'this is a comment',
        '_ansible_check_mode': True,
    })

    commands_results = [
        (0, '', ''),
    ]

    with patch.object(basic.AnsibleModule, 'run_command') as run_command:
        run_command.side_effect = commands_results
        with self.assertRaises(AnsibleExitJson) as result:
            iptables.main()
            self.assertTrue(result.exception.args[0]['changed'])

    self.assertEqual(run_command.call_count, 1)
    self.assertEqual(run_command.call_args_list[0][0][0], [
        '/sbin/iptables',
        '-t',
        'filter',
        '-C',
        'INPUT',
        '-j',
        'ACCEPT',
        '-m',
        'conntrack',
        '--ctstate',
        'NEW',
        '-m',
        'comment',
        '--comment',
        'this is a comment'
    ])
    self.assertEqual(run_command.call_args[0][0][14], 'this is a comment')
"
-------------------------------------------------------------------------
"```python
    def test_comment_position_at_end(self):
        set_module_args({
            'chain': 'INPUT',
            'jump': 'ACCEPT',
            'action': 'insert',
            'ctstate': ['NEW'],
            'comment': 'this is a comment',
            '_ansible_check_mode': True,
        })

        commands_results = [
            (0, '', ''),
        ]

        with patch.object(basic.AnsibleModule, 'run_command') as run_command:
            run_command.side_effect = commands_results
            with self.assertRaises(AnsibleExitJson) as result:
                iptables.main()
                self.assertTrue(result.exception.args[0]['changed'])

        self.assertEqual(run_command.call_count, 1)
        self.assertEqual(run_command.call_args_list[0][0][0], [
            '/sbin/iptables',
            '-t',
            'filter',
            '-A',
            'INPUT',
            '-j',
            'ACCEPT',
            '-m',
            'conntrack',
            '--ctstate',
            'NEW',
            '-m',
            'comment',
            '--comment',
            'this is a comment'
        ])
        self.assertEqual(run_command.call_args[0][0][14], 'this is a comment')
```"
-------------------------------------------------------------------------
"
def test_comment_position_at_end(self):
    """"""Test flush without parameters""""""
    set_module_args({
        'chain': 'INPUT',
        'jump': 'ACCEPT',
        'action': 'insert',
        'ctstate': ['NEW'],
        'comment': 'this is a comment',
        '_ansible_check_mode': True,
    })

    commands_results = [
        (0, '', ''),
    ]

    with patch.object(basic.AnsibleModule, 'run_command') as run_command:
        run_command.side_effect = commands_results
        with self.assertRaises(AnsibleExitJson) as result:
            iptables.main()
            self.assertTrue(result.exception.args[0]['changed'])

    self.assertEqual(run_command.call_count, 1)
    self.assertEqual(run_command.call_args_list[0][0][0], [
        '/sbin/iptables',
        '-t',
        'filter',
        '-C',
        'INPUT',
        '-j',
        'ACCEPT',
        '-m',
        'conntrack',
        '--ctstate',
        'NEW',
        '-m',
        'comment',
        '--comment',
        'this is a comment'
    ])
    self.assertEqual(run_command.call_args[0][0][14], 'this is a comment')
"
-------------------------------------------------------------------------
"Recom
PRs: 71496, 72548"
-------------------------------------------------------------------------
=========================================================================
"- Note that, similar to ``dnf upgrade-minimal``, this filter applies to dependencies as well.
- Note that, similar to ``dnf upgrade-minimal``, this filter applies to dependencies as well.
"
-------------------------------------------------------------------------
"- Note that, similar to ``dnf upgrade-minimal``, this filter applies to dependencies as well.
- Note that, similar to ``dnf upgrade-minimal``, this filter applies to dependencies as well."
-------------------------------------------------------------------------
"- Note that, similar to ``dnf upgrade-minimal``, this filter applies to dependencies as well.
- Note that, similar to ``dnf upgrade-minimal``, this filter applies to dependencies as well.
"
-------------------------------------------------------------------------
"Recom
PRs: 72483, 72501"
-------------------------------------------------------------------------
=========================================================================
"filters.append(base.sack.query().upgrades().filter(**key))
filters.append(base.sack.query().upgrades().filter(**key))
"
-------------------------------------------------------------------------
"```python
filters.append(base.sack.query().upgrades().filter(**key))
filters.append(base.sack.query().upgrades().filter(**key))
```"
-------------------------------------------------------------------------
"filters.append(base.sack.query().upgrades().filter(**key))
filters.append(base.sack.query().upgrades().filter(**key))
"
-------------------------------------------------------------------------
"Recom
PRs: 72483, 72501"
-------------------------------------------------------------------------
=========================================================================
"- Note that, similar to ``dnf upgrade-minimal``, this filter applies to dependencies as well.
- Note that, similar to ``dnf upgrade-minimal``, this filter applies to dependencies as well.
"
-------------------------------------------------------------------------
"Update the code snippet to include the additional information provided:

```python
# Note that, similar to `dnf upgrade-minimal`, this filter applies to dependencies as well.
```"
-------------------------------------------------------------------------
"- Note that, similar to ``dnf upgrade-minimal``, this filter applies to dependencies as well.
- Note that, similar to ``dnf upgrade-minimal``, this filter applies to dependencies as well.
"
-------------------------------------------------------------------------
"Recom
PRs: 72483, 72500"
-------------------------------------------------------------------------
=========================================================================
"filters.append(base.sack.query().upgrades().filter(**key))
filters.append(base.sack.query().upgrades().filter(**key))
"
-------------------------------------------------------------------------
"```python
filters.append(base.sack.query().upgrades().filter(**key))
```"
-------------------------------------------------------------------------
"filters.append(base.sack.query().upgrades().filter(**key))
filters.append(base.sack.query().upgrades().filter(**key))
"
-------------------------------------------------------------------------
"Recom
PRs: 72483, 72500"
-------------------------------------------------------------------------
=========================================================================
"'docker': ['community.general', 'community.docker'],
'k8s': ['community.kubernetes', 'community.general', 'community.kubevirt', 'community.okd', 'kubernetes.core'],
"
-------------------------------------------------------------------------
"'docker': ['community.general', 'community.docker', 'community.kubernetes'],
'k8s': ['community.kubernetes', 'community.general', 'community.kubevirt', 'community.okd', 'kubernetes.core']"
-------------------------------------------------------------------------
"'docker': ['community.general', 'community.docker'],
'k8s': ['community.kubernetes', 'community.general', 'community.kubevirt', 'community.okd', 'kubernetes.core'],
"
-------------------------------------------------------------------------
"Recom
PRs: 72428, 72496"
-------------------------------------------------------------------------
=========================================================================
"filename = os.path.basename(path)
dummy, ext = os.path.splitext(filename)

"
-------------------------------------------------------------------------
"filename = os.path.basename(path)
dummy, ext = os.path.splitext(filename)"
-------------------------------------------------------------------------
"filename = os.path.basename(path)
dummy, ext = os.path.splitext(filename)

"
-------------------------------------------------------------------------
"Recom
PRs: 72353, 72443"
-------------------------------------------------------------------------
=========================================================================
"if '/' not in path:
    if path in (
            '.gitignore',
            'COPYING',
            'LICENSE',
            'Makefile',
    ):
        return minimal

    if ext in (
            '.in',
            '.md',
            '.rst',
            '.toml',
            '.txt',
    ):
        return minimal

"
-------------------------------------------------------------------------
"```python
if '/' not in path:
    if path in (
            '.gitignore',
            'COPYING',
            'LICENSE',
            'Makefile',
    ):
        return minimal

    if ext in (
            '.in',
            '.md',
            '.rst',
            '.toml',
            '.txt',
    ):
        return minimal
```"
-------------------------------------------------------------------------
"if '/' not in path:
    if path in (
            '.gitignore',
            'COPYING',
            'LICENSE',
            'Makefile',
    ):
        return minimal

    if ext in (
            '.in',
            '.md',
            '.rst',
            '.toml',
            '.txt',
    ):
        return minimal

"
-------------------------------------------------------------------------
"Recom
PRs: 72353, 72443"
-------------------------------------------------------------------------
=========================================================================
"filename = os.path.basename(path)
dummy, ext = os.path.splitext(filename)

"
-------------------------------------------------------------------------
"```python
filename = os.path.basename(path)
dummy, ext = os.path.splitext(filename)
```"
-------------------------------------------------------------------------
"filename = os.path.basename(path)
dummy, ext = os.path.splitext(filename)

"
-------------------------------------------------------------------------
"Recom
PRs: 72353, 72442"
-------------------------------------------------------------------------
=========================================================================
"if '/' not in path:
    if path in (
            '.gitignore',
            'COPYING',
            'LICENSE',
            'Makefile',
    ):
        return minimal

    if ext in (
            '.in',
            '.md',
            '.rst',
            '.toml',
            '.txt',
    ):
        return minimal

"
-------------------------------------------------------------------------
"```python
if '/' not in path:
    if path in (
            '.gitignore',
            'COPYING',
            'LICENSE',
            'Makefile',
    ):
        return minimal

    if ext in (
            '.in',
            '.md',
            '.rst',
            '.toml',
            '.txt',
    ):
        return minimal
```"
-------------------------------------------------------------------------
"if '/' not in path:
    if path in (
            '.gitignore',
            'COPYING',
            'LICENSE',
            'Makefile',
    ):
        return minimal

    if ext in (
            '.in',
            '.md',
            '.rst',
            '.toml',
            '.txt',
    ):
        return minimal

"
-------------------------------------------------------------------------
"Recom
PRs: 72353, 72442"
-------------------------------------------------------------------------
=========================================================================
"plugin_docs[plugin] = DocCLI._combine_plugin_doc(plugin, plugin_type, doc, plainexamples, returndocs, metadata)
"
-------------------------------------------------------------------------
"```python
plugin_docs[plugin] = DocCLI._combine_plugin_doc(plugin, plugin_type, doc, plainexamples, returndocs, metadata)
```"
-------------------------------------------------------------------------
"plugin_docs[plugin] = DocCLI._combine_plugin_doc(plugin, plugin_type, doc, plainexamples, returndocs, metadata)
"
-------------------------------------------------------------------------
"Recom
PRs: 72359, 72416"
-------------------------------------------------------------------------
=========================================================================
"@staticmethod
def _combine_plugin_doc(plugin, plugin_type, doc, plainexamples, returndocs, metadata):
    # generate extra data
    if plugin_type == 'module':
        # is there corresponding action plugin?
        if plugin in action_loader:
            doc['has_action'] = True
        else:
            doc['has_action'] = False

    # return everything as one dictionary
    return {'doc': doc, 'examples': plainexamples, 'return': returndocs, 'metadata': metadata}

"
-------------------------------------------------------------------------
"```python
@staticmethod
def _combine_plugin_doc(plugin, plugin_type, doc, plainexamples, returndocs, metadata):
    if plugin_type == 'module':
        if plugin in action_loader:
            doc['has_action'] = True
        else:
            doc['has_action'] = False

    return {'doc': doc, 'examples': plainexamples, 'return': returndocs, 'metadata': metadata}
```"
-------------------------------------------------------------------------
"def _combine_plugin_doc(plugin, plugin_type, doc, plainexamples, returndocs, metadata):
            doc['has_action'] = True
            doc['has_action'] = False

    # return everything as one dictionary
    return {'doc': doc, 'examples': plainexamples, 'return': returndocs, 'metadata': metadata}
@staticmethod
def format_plugin_doc(plugin, plugin_type, doc, plainexamples, returndocs, metadata):
    # assign from other sections
    doc['plainexamples'] = plainexamples
    doc['returndocs'] = returndocs
    doc['metadata'] = metadata
"
-------------------------------------------------------------------------
"Recom
PRs: 72359, 72416"
-------------------------------------------------------------------------
=========================================================================
"plugin_docs[plugin] = DocCLI._combine_plugin_doc(plugin, plugin_type, doc, plainexamples, returndocs, metadata)
"
-------------------------------------------------------------------------
"```python
plugin_docs[plugin] = DocCLI._combine_plugin_doc(plugin, plugin_type, doc, plainexamples, returndocs, metadata)
```"
-------------------------------------------------------------------------
"plugin_docs[plugin] = DocCLI._combine_plugin_doc(plugin, plugin_type, doc, plainexamples, returndocs, metadata)
"
-------------------------------------------------------------------------
"Recom
PRs: 72359, 72414"
-------------------------------------------------------------------------
=========================================================================
"@staticmethod
def _combine_plugin_doc(plugin, plugin_type, doc, plainexamples, returndocs, metadata):
    # generate extra data
    if plugin_type == 'module':
        # is there corresponding action plugin?
        if plugin in action_loader:
            doc['has_action'] = True
        else:
            doc['has_action'] = False

    # return everything as one dictionary
    return {'doc': doc, 'examples': plainexamples, 'return': returndocs, 'metadata': metadata}

"
-------------------------------------------------------------------------
"```python
@staticmethod
def _combine_plugin_doc(plugin, plugin_type, doc, plainexamples, returndocs, metadata):
    if plugin_type == 'module':
        if plugin in action_loader:
            doc['has_action'] = True
        else:
            doc['has_action'] = False

    return {'doc': doc, 'examples': plainexamples, 'return': returndocs, 'metadata': metadata}
```"
-------------------------------------------------------------------------
"@staticmethod
def _combine_plugin_doc(plugin, plugin_type, doc, plainexamples, returndocs, metadata):
    # generate extra data
    if plugin_type == 'module':
        # is there corresponding action plugin?
        if plugin in action_loader:
            doc['has_action'] = True
        else:
            doc['has_action'] = False

    # return everything as one dictionary
    return {'doc': doc, 'examples': plainexamples, 'return': returndocs, 'metadata': metadata}

"
-------------------------------------------------------------------------
"Recom
PRs: 72359, 72414"
-------------------------------------------------------------------------
=========================================================================
"if doc.pop('has_action', False):
"
-------------------------------------------------------------------------
"if doc.pop('has_action', False):"
-------------------------------------------------------------------------
"if doc.pop('has_action', False):
"
-------------------------------------------------------------------------
"Recom
PRs: 72359, 72414"
-------------------------------------------------------------------------
=========================================================================
"try:
    if hasattr(p, 'get_connections'):
        connections = p.get_connections(kind='inet')
    else:
        connections = p.connections(kind='inet')
except psutil.Error:
    # Process is Zombie or other error state
    continue
"
-------------------------------------------------------------------------
"```python
try:
    if hasattr(p, 'get_connections'):
        connections = p.get_connections(kind='inet')
    else:
        connections = p.connections(kind='inet')
except psutil.Error:
    # Process is Zombie or other error state
    continue
```"
-------------------------------------------------------------------------
"try:
    if hasattr(p, 'get_connections'):
        connections = p.get_connections(kind='inet')
    else:
        connections = p.connections(kind='inet')
except psutil.Error:
    # Process is Zombie or other error state
    continue
"
-------------------------------------------------------------------------
"Recom
PRs: 72401, 72407"
-------------------------------------------------------------------------
=========================================================================
"try:
    if hasattr(p, 'get_connections'):
        connections = p.get_connections(kind='inet')
    else:
        connections = p.connections(kind='inet')
except psutil.Error:
    # Process is Zombie or other error state
    continue
"
-------------------------------------------------------------------------
"try:
    if hasattr(p, 'get_connections'):
        connections = p.get_connections(kind='inet')
    else:
        connections = p.connections(kind='inet')
except psutil.Error:
    # Process is Zombie or other error state
    continue"
-------------------------------------------------------------------------
"try:
    if hasattr(p, 'get_connections'):
        connections = p.get_connections(kind='inet')
    else:
        connections = p.connections(kind='inet')
except psutil.Error:
    # Process is Zombie or other error state
    continue
"
-------------------------------------------------------------------------
"Recom
PRs: 72401, 72406"
-------------------------------------------------------------------------
=========================================================================
"# for ping kwargs == {'argument_spec':{'data':{'type':'str','default':'pong'}}, 'supports_check_mode':True}
if 'argument_spec' in fake.kwargs:
else:
    argument_spec = fake.args[0]
# If add_file_common_args is truish, add options from FILE_COMMON_ARGUMENTS when not present.
# This is the only modification to argument_spec done by AnsibleModule itself, and which is
# not caught by setup_env's AnsibleModule replacement
if fake.kwargs.get('add_file_common_args'):
    for k, v in FILE_COMMON_ARGUMENTS.items():
        if k not in argument_spec:
            argument_spec[k] = v
return argument_spec, fake.args, fake.kwargs
"
-------------------------------------------------------------------------
"```python
if 'argument_spec' in fake.kwargs:
    argument_spec = fake.kwargs['argument_spec']
else:
    argument_spec = fake.args[0]

# If add_file_common_args is truish, add options from FILE_COMMON_ARGUMENTS when not present.
# This is the only modification to argument_spec done by AnsibleModule itself, and which is
# not caught by setup_env's AnsibleModule replacement
if fake.kwargs.get('add_file_common_args'):
    for k, v in FILE_COMMON_ARGUMENTS.items():
        if k not in argument_spec:
            argument_spec[k] = v

return argument_spec, (), fake.args
```"
-------------------------------------------------------------------------
"# for ping kwargs == {'argument_spec':{'data':{'type':'str','default':'pong'}}, 'supports_check_mode':True}
if 'argument_spec' in fake.kwargs:
else:
    argument_spec = fake.args[0]
# If add_file_common_args is truish, add options from FILE_COMMON_ARGUMENTS when not present.
# This is the only modification to argument_spec done by AnsibleModule itself, and which is
# not caught by setup_env's AnsibleModule replacement
if fake.kwargs.get('add_file_common_args'):
    for k, v in FILE_COMMON_ARGUMENTS.items():
        if k not in argument_spec:
            argument_spec[k] = v
return argument_spec, fake.args, fake.kwargs
"
-------------------------------------------------------------------------
"Recom
PRs: 72334, 72361"
-------------------------------------------------------------------------
=========================================================================
"# Ensure there is a line separator before the block of lines to be inserted
if n0 > 0:
    if not lines[n0 - 1].endswith(b(os.linesep)):
        lines[n0 - 1] = b(os.linesep)
lines[n0:n0] = blocklines
"
-------------------------------------------------------------------------
"```python
if n0 > 0:
    if not lines[n0 - 1].endswith(b(os.linesep)):
        lines[n0 - 1] = b(os.linesep)
lines[n0:n0] = blocklines
```"
-------------------------------------------------------------------------
"# Ensure there is a line separator before the block of lines to be inserted
if n0 > 0:
    if not lines[n0 - 1].endswith(b(os.linesep)):
        lines[n0 - 1] = b(os.linesep)
lines[n0:n0] = blocklines
"
-------------------------------------------------------------------------
"Recom
PRs: 72350, 72360"
-------------------------------------------------------------------------
=========================================================================
"
# Workaround for https://github.com/ansible/ansible/issues/71528
elif err and rc == 1 and 'Failed to parse bus message' in err:
    result['status'] = parse_systemctl_show(to_native(out).split('\n'))

    (rc, out, err) = module.run_command(""{systemctl} list-units '{unit}*'"".format(systemctl=systemctl, unit=unit))
    is_systemd = unit in out

    (rc, out, err) = module.run_command(""{systemctl} is-active '{unit}'"".format(systemctl=systemctl, unit=unit))
    result['status']['ActiveState'] = out.rstrip('\n')

"
-------------------------------------------------------------------------
"```python
# Workaround for https://github.com/ansible/ansible/issues/71528
elif err and rc == 1 and 'Failed to parse bus message' in err:
    result['status'] = parse_systemctl_show(to_native(out).split('\n'))

    (rc, out, err) = module.run_command(""{systemctl} list-units '{unit}*'"".format(systemctl=systemctl, unit=unit))
    is_systemd = unit in out

    (rc, out, err) = module.run_command(""{systemctl} is-active '{unit}'"".format(systemctl=systemctl, unit=unit))
    result['status']['ActiveState'] = out.rstrip('\n')
```"
-------------------------------------------------------------------------
"
# Workaround for https://github.com/ansible/ansible/issues/71528
elif err and rc == 1 and 'Failed to parse bus message' in err:
    result['status'] = parse_systemctl_show(to_native(out).split('\n'))

    unit, sep, suffix = unit.partition('@')
    unit_search = '{unit}{sep}*'.format(unit=unit, sep=sep)
    (rc, out, err) = module.run_command(""{systemctl} list-unit-files '{unit_search}'"".format(systemctl=systemctl, unit_search=unit_search))
    is_systemd = unit in out

    (rc, out, err) = module.run_command(""{systemctl} is-active '{unit}'"".format(systemctl=systemctl, unit=unit))
    result['status']['ActiveState'] = out.rstrip('\n')

"
-------------------------------------------------------------------------
"Recom
PRs: 72337, 72348"
-------------------------------------------------------------------------
=========================================================================
"
# Workaround for https://github.com/ansible/ansible/issues/71528
elif err and rc == 1 and 'Failed to parse bus message' in err:
    result['status'] = parse_systemctl_show(to_native(out).split('\n'))

    (rc, out, err) = module.run_command(""{systemctl} list-units '{unit}*'"".format(systemctl=systemctl, unit=unit))
    is_systemd = unit in out

    (rc, out, err) = module.run_command(""{systemctl} is-active '{unit}'"".format(systemctl=systemctl, unit=unit))
    result['status']['ActiveState'] = out.rstrip('\n')

"
-------------------------------------------------------------------------
"```python
elif err and rc == 1 and 'Failed to parse bus message' in err:
    result['status'] = parse_systemctl_show(to_native(out).split('\n'))

    (rc, out, err) = module.run_command(""{systemctl} list-units '{unit}*'"".format(systemctl=systemctl, unit=unit))
    is_systemd = unit in out

    (rc, out, err) = module.run_command(""{systemctl} is-active '{unit}'"".format(systemctl=systemctl, unit=unit))
    result['status']['ActiveState'] = out.rstrip('\n')
```"
-------------------------------------------------------------------------
"
# Workaround for https://github.com/ansible/ansible/issues/71528
elif err and rc == 1 and 'Failed to parse bus message' in err:
    result['status'] = parse_systemctl_show(to_native(out).split('\n'))

    unit, sep, suffix = unit.partition('@')
    unit_search = '{unit}{sep}*'.format(unit=unit, sep=sep)
    (rc, out, err) = module.run_command(""{systemctl} list-unit-files '{unit_search}'"".format(systemctl=systemctl, unit_search=unit_search))
    is_systemd = unit in out

    (rc, out, err) = module.run_command(""{systemctl} is-active '{unit}'"".format(systemctl=systemctl, unit=unit))
    result['status']['ActiveState'] = out.rstrip('\n')

"
-------------------------------------------------------------------------
"Recom
PRs: 72337, 72347"
-------------------------------------------------------------------------
=========================================================================
"(rc, out, err) = self.execute_command(cmd)
    return (rc, out, err)
"
-------------------------------------------------------------------------
"```python
return self.execute_command(cmd)
``` "
-------------------------------------------------------------------------
"(rc, out, err) = self.execute_command(cmd)
    return (rc, out, err)
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72340"
-------------------------------------------------------------------------
=========================================================================
"(rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
return (rc, out, err)
(rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-M', self.name, add_group])
"
-------------------------------------------------------------------------
"```python
(rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
return (rc, out, err)
(rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-M', self.name, add_group])
```"
-------------------------------------------------------------------------
"(rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72340"
-------------------------------------------------------------------------
=========================================================================
"(rc, out, err) = (None, '', '')
    (rc, out, err) = self.execute_command(cmd)
    return (rc, out, err)
    (rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
    return (rc, out, err)
    (rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-M', self.name, add_group])
    (rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-m', self.name, del_group])
"
-------------------------------------------------------------------------
"```python
(rc, out, err) = (None, '', '')
(rc, out, err) = self.execute_command(cmd)
return (rc, out, err)
(rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
return (rc, _out, _err)
(rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-M', self.name, add_group])
(rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-m', self.name, del_group])
```"
-------------------------------------------------------------------------
"(rc, out, err) = (None, '', '')
    (rc, out, err) = self.execute_command(cmd)
    return (rc, out, err)
    (rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72340"
-------------------------------------------------------------------------
=========================================================================
"(_rc, _out, _err) = self.__modify_group(remove, 'delete')
, _out, _err) = self.__modify_group(add, 'add')
rc, out, err, changed)
"
-------------------------------------------------------------------------
"```python
(_rc, _out, _err) = self.__modify_group(remove, 'delete')
(_rc, _out, _err) = self.__modify_group(add, 'add')
rc, out, err, changed
```"
-------------------------------------------------------------------------
"(_rc, _out, _err) = self.__modify_group(remove, 'delete')
, _out, _err) = self.__modify_group(add, 'add')
rc, out, err, changed)
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72340"
-------------------------------------------------------------------------
=========================================================================
"(rc, out, err) = self.execute_command(cmd)
"
-------------------------------------------------------------------------
"(rc, out, err) = self.execute_command(cmd)"
-------------------------------------------------------------------------
"(rc, out, err) = self.execute_command(cmd)
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72340"
-------------------------------------------------------------------------
=========================================================================
"(rc, _out, _err) = self.execute_command(cmd)
    return (rc, _out, _err)
t, _err) = self._change_user_password()
"
-------------------------------------------------------------------------
"```python
return self.execute_command(cmd)
return self._change_user_password()
```"
-------------------------------------------------------------------------
"(rc, _out, _err) = self.execute_command(cmd)
    return (rc, _out, _err)
t, _err) = self._change_user_password()
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72340"
-------------------------------------------------------------------------
=========================================================================
"return (rc, out, err)
"
-------------------------------------------------------------------------
"```python
return (rc, out, err)
```"
-------------------------------------------------------------------------
"return (rc, out, err)
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72340"
-------------------------------------------------------------------------
=========================================================================
"(rc, _out, _err) = self.execute_command(cmd)
"
-------------------------------------------------------------------------
"```python
(rc, _out, _err) = self.execute_command(cmd)
```"
-------------------------------------------------------------------------
"(rc, _out, _err) = self.execute_command(cmd)
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72340"
-------------------------------------------------------------------------
=========================================================================
"(rc, _out, _err) = self._change_user_password()
"
-------------------------------------------------------------------------
"(rc, _out, _err) = self._change_user_password()"
-------------------------------------------------------------------------
"(rc, _out, _err) = self._change_user_password()
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72340"
-------------------------------------------------------------------------
=========================================================================
"(rc, out, err) = self.execute_command(cmd)
    return (rc, out, err)
"
-------------------------------------------------------------------------
"```python
return self.execute_command(cmd)
```"
-------------------------------------------------------------------------
"(rc, out, err) = self.execute_command(cmd)
    return (rc, out, err)
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72300"
-------------------------------------------------------------------------
=========================================================================
"(rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
return (rc, out, err)
(rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-M', self.name, add_group])
"
-------------------------------------------------------------------------
"```python
(rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
return (rc, _out, _err)

(rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-M', self.name, add_group])
return (rc, _out, _err)
```"
-------------------------------------------------------------------------
"(rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
return (rc, out, err)
(rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-M', self.name, add_group])
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72300"
-------------------------------------------------------------------------
=========================================================================
"(rc, out, err) = (None, '', '')
    (rc, out, err) = self.execute_command(cmd)
    return (rc, out, err)
    (rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
    return (rc, out, err)
    (rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-M', self.name, add_group])
    (rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-m', self.name, del_group])
"
-------------------------------------------------------------------------
"```python
(rc, out, err) = (None, '', '')
(rc, out, err) = self.execute_command(cmd)
return (rc, out, err)
(rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
return (rc, _out, _err)
(rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-M', self.name, add_group])
(rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-m', self.name, del_group])
```"
-------------------------------------------------------------------------
"(rc, out, err) = (None, '', '')
    (rc, out, err) = self.execute_command(cmd)
    return (rc, out, err)
    (rc, _out, _err) = self.execute_command([lchage_cmd, '-E', to_native(lexpires), self.name])
    return (rc, out, err)
    (rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-M', self.name, add_group])
    (rc, _out, _err) = self.execute_command([lgroupmod_cmd, '-m', self.name, del_group])
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72300"
-------------------------------------------------------------------------
=========================================================================
"(_rc, _out, _err) = self.__modify_group(remove, 'delete')
, _out, _err) = self.__modify_group(add, 'add')
rc, out, err, changed)
"
-------------------------------------------------------------------------
"```python
(_rc, _out, _err) = self.__modify_group(remove, 'delete')
(_rc, _out, _err) = self.__modify_group(add, 'add')
rc, out, err, changed
```"
-------------------------------------------------------------------------
"(_rc, _out, _err) = self.__modify_group(remove, 'delete')
, _out, _err) = self.__modify_group(add, 'add')
rc, out, err, changed)
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72300"
-------------------------------------------------------------------------
=========================================================================
"(rc, out, err) = self.execute_command(cmd)
"
-------------------------------------------------------------------------
"(rc, out, err) = self.execute_command(cmd)"
-------------------------------------------------------------------------
"(rc, out, err) = self.execute_command(cmd)
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72300"
-------------------------------------------------------------------------
=========================================================================
"(rc, _out, _err) = self.execute_command(cmd)
    return (rc, _out, _err)
t, _err) = self._change_user_password()
"
-------------------------------------------------------------------------
"(rc, _out, _err) = self.execute_command(cmd)
return (rc, _out, _err)
(rc, _err) = self._change_user_password()"
-------------------------------------------------------------------------
"(rc, _out, _err) = self.execute_command(cmd)
    return (rc, _out, _err)
t, _err) = self._change_user_password()
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72300"
-------------------------------------------------------------------------
=========================================================================
"return (rc, out, err)
"
-------------------------------------------------------------------------
"```python
class DarwinUser(User):
    return (rc, out, err)
```"
-------------------------------------------------------------------------
"return (rc, out, err)
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72300"
-------------------------------------------------------------------------
=========================================================================
"(rc, _out, _err) = self.execute_command(cmd)
"
-------------------------------------------------------------------------
"```python
(rc, _out, _err) = self.execute_command(cmd)
```"
-------------------------------------------------------------------------
"(rc, _out, _err) = self.execute_command(cmd)
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72300"
-------------------------------------------------------------------------
=========================================================================
"(rc, _out, _err) = self._change_user_password()
"
-------------------------------------------------------------------------
"(rc, _out, _err) = self._change_user_password()"
-------------------------------------------------------------------------
"(rc, _out, _err) = self._change_user_password()
"
-------------------------------------------------------------------------
"Recom
PRs: 72088, 72300"
-------------------------------------------------------------------------
=========================================================================
"from ansible.playbook.conditional import Conditional
"
-------------------------------------------------------------------------
from ansible.playbook.conditional import Conditional
-------------------------------------------------------------------------
"from ansible.playbook.conditional import Conditional
"
-------------------------------------------------------------------------
"Recom
PRs: 70919, 72118"
-------------------------------------------------------------------------
=========================================================================
"def post_process_whens(result, task, templar):

cond = None
if task.changed_when:
    cond = Conditional(loader=templar._loader)
    cond.when = task.changed_when
    result['changed'] = cond.evaluate_conditional(templar, templar.available_variables)

if task.failed_when:
    if cond is None:
        cond = Conditional(loader=templar._loader)
    cond.when = task.failed_when
    failed_when_result = cond.evaluate_conditional(templar, templar.available_variables)
    result['failed_when_result'] = result['failed'] = failed_when_result


"
-------------------------------------------------------------------------
"```python
def post_process_whens(result, task, templar):
    cond = None
    if task.changed_when:
        cond = Conditional(loader=templar._loader)
        cond.when = task.changed_when
        result['changed'] = cond.evaluate_conditional(templar, templar.available_variables)

    if task.failed_when:
        if cond is None:
            cond = Conditional(loader=templar._loader)
        cond.when = task.failed_when
        failed_when_result = cond.evaluate_conditional(templar, templar.available_variables)
        result['failed_when_result'] = result['failed'] = failed_when_result
```"
-------------------------------------------------------------------------
"_sentinel = StrategySentinel()


"
-------------------------------------------------------------------------
"Recom
PRs: 70919, 72118"
-------------------------------------------------------------------------
=========================================================================
"post_process_whens(result_item, original_task, handler_templar)
post_process_whens(result_item, original_task, handler_templar)
"
-------------------------------------------------------------------------
"```python
import jinja2.exceptions
import ansible.template
import collections
import ansible.module_utils.six
import ansible.utils.display
import ansible.module_utils.connection
import sys
import ansible.playbook.helpers
import time
import ansible.executor.process.worker
import ansible.inventory.host
import ansible.module_utils._text
import ansible.playbook.included_file
import __future__
import ansible.utils.vars
import ansible.playbook.task_include
import multiprocessing
import ansible.module_utils.six.moves
import ansible.plugins
import ansible.playbook.handler
import os
import ansible.executor
import ansible
import cmd
import pprint
import ansible.errors
import ansible.vars.clean
import threading
import functools
import ansible.executor.task_result

class StrategyBase:
    # this task added a new host (add_host module)
    new_host_info = result_item.get('add_host', dict())
    self._add_host(new_host_info, result_item)

    elif 'add_group' in result_item:
        # this task added a new group (group_by module)
        self._add_group(original_host, result_item)

    if 'ansible_facts' in result_item:
        # if delegated fact and we are delegating facts, we need to change target host for them
        post_process_whens(result_item, original_task, handler_templar)
```  "
-------------------------------------------------------------------------
"def post_process_whens(result, task, templar):
cond = None
if task.changed_when:
    cond = Conditional(loader=templar._loader)
    cond.when = task.changed_when
    result['changed'] = cond.evaluate_conditional(templar, templar.available_variables)

if task.failed_when:
    if cond is None:
        cond = Conditional(loader=templar._loader)
    cond.when = task.failed_when
    failed_when_result = cond.evaluate_conditional(templar, templar.available_variables)
    result['failed_when_result'] = result['failed'] = failed_when_result
"
-------------------------------------------------------------------------
"Recom
PRs: 70919, 72118"
-------------------------------------------------------------------------
=========================================================================
"collection_name = 'removed_from_collection' if top_level else 'collection_name'
    callback(deprecation, 'removed_in', collection_name)
    callback(deprecation, 'removed_at_date', collection_name)
    callback(deprecation, 'version', collection_name)
"
-------------------------------------------------------------------------
"```python
collection_name = 'removed_from_collection' if top_level else 'collection_name'
callback(deprecation, 'removed_in', collection_name)
callback(deprecation, 'removed_at_date', collection_name)
callback(deprecation, 'version', collection_name)
```"
-------------------------------------------------------------------------
"collection_name = 'removed_from_collection' if top_level else 'collection_name'
    callback(deprecation, 'removed_in', collection_name)
    callback(deprecation, 'removed_at_date', collection_name)
    callback(deprecation, 'version', collection_name)
"
-------------------------------------------------------------------------
"Recom
PRs: 71735, 72081"
-------------------------------------------------------------------------
=========================================================================
"if isinstance(option.get('deprecated'), MutableMapping):
    process_deprecation(option['deprecated'])
"
-------------------------------------------------------------------------
"```python
import pytest
from __future__ import absolute_import, print_function
import ansible.utils.plugin_docs
import copy

def _process_versions_and_dates(fragment, is_module, return_docs, callback):
    process_option_specifiers(option['ini'])
    if isinstance(option.get('vars'), list):
        process_option_specifiers(option['vars'])
    if isinstance(option.get('suboptions'), MutableMapping):
        process_options(option['suboptions'])
    if isinstance(option.get('deprecated'), MutableMapping):
        process_deprecation(option['deprecated'])
```"
-------------------------------------------------------------------------
"if isinstance(option.get('deprecated'), MutableMapping):
    process_deprecation(option['deprecated'])
"
-------------------------------------------------------------------------
"Recom
PRs: 71735, 72081"
-------------------------------------------------------------------------
=========================================================================
"text = DocCLI.get_man_text(doc, collection_name, plugin_type)
"
-------------------------------------------------------------------------
"```python
text = DocCLI.get_man_text(doc, collection_name, plugin_type)
```"
-------------------------------------------------------------------------
"text = DocCLI.get_man_text(doc, collection_name, plugin_type)
"
-------------------------------------------------------------------------
"Recom
PRs: 71966, 71984"
-------------------------------------------------------------------------
=========================================================================
"def get_man_text(doc, collection_name='', plugin_type=''):
"
-------------------------------------------------------------------------
"```python
def get_man_text(doc, collection_name='', plugin_type=''):
    text.append('')
```"
-------------------------------------------------------------------------
"def get_man_text(doc, collection_name='', plugin_type=''):
"
-------------------------------------------------------------------------
"Recom
PRs: 71966, 71984"
-------------------------------------------------------------------------
=========================================================================
"plugin_name = doc.get(context.CLIARGS['type'], doc.get('name')) or doc.get('plugin_type') or plugin_type
"
-------------------------------------------------------------------------
"```python
plugin_name = doc.get(context.CLIARGS['type'], doc.get('name')) or doc.get('plugin_type') or plugin_type or ansible.plugins.loader.get_plugin_name()
```"
-------------------------------------------------------------------------
"plugin_name = doc.get(context.CLIARGS['type'], doc.get('name')) or doc.get('plugin_type') or plugin_type
"
-------------------------------------------------------------------------
"Recom
PRs: 71966, 71984"
-------------------------------------------------------------------------
=========================================================================
"elif platform.system() == 'Darwin':
"
-------------------------------------------------------------------------
"```python
elif platform.system() == 'Darwin':
```"
-------------------------------------------------------------------------
"elif platform.system() == 'Darwin':
"
-------------------------------------------------------------------------
"Recom
PRs: 71841, 71954"
-------------------------------------------------------------------------
=========================================================================
"if 'rc' in component:
    ver_split.append(int(component.split('rc')[0]))
if 'b' in component:
    ver_split.append(int(component.split('b')[0]))
continue
"
-------------------------------------------------------------------------
"```python
def is_ansible_base(version):
     ver_split = []
     for component in version.split('.'):
         if 'rc' in component:
             ver_split.append(int(component.split('rc')[0]))
         if 'b' in component:
             ver_split.append(int(component.split('b')[0]))
         continue
     return tuple(ver_split) >= (2, 10, 0)
```"
-------------------------------------------------------------------------
"if 'rc' in component:
    ver_split.append(int(component.split('rc')[0]))
if 'b' in component:
    ver_split.append(int(component.split('b')[0]))
continue
"
-------------------------------------------------------------------------
"Recom
PRs: 71008, 71893"
-------------------------------------------------------------------------
=========================================================================
"# The task_keys 'timeout' attr is the task's timeout, not the connection timeout.
# The connection timeout is threaded through the play_context for now.
task_keys['timeout'] = self._play_context.timeout

"
-------------------------------------------------------------------------
"```python
# The task_keys 'timeout' attr is the task's timeout, not the connection timeout.
# The connection timeout is threaded through the play_context for now.
task_keys['timeout'] = self._play_context.timeout
```"
-------------------------------------------------------------------------
"# The task_keys 'timeout' attr is the task's timeout, not the connection timeout.
# The connection timeout is threaded through the play_context for now.
task_keys['timeout'] = self._play_context.timeout

"
-------------------------------------------------------------------------
"Recom
PRs: 71722, 71785"
-------------------------------------------------------------------------
=========================================================================
"code_obj = self.get_code(fullname)
if code_obj is not None:  # things like NS packages that can't have code on disk will return None
    exec(code_obj, module.__dict__)
"
-------------------------------------------------------------------------
"```python
code_obj = self.get_code(fullname)
if code_obj is not None:  
    exec(code_obj, module.__dict__)
```"
-------------------------------------------------------------------------
"code_obj = self.get_code(fullname)
if code_obj is not None:  # things like NS packages that can't have code on disk will return None
    exec(code_obj, module.__dict__)
"
-------------------------------------------------------------------------
"Recom
PRs: 71727, 71748"
-------------------------------------------------------------------------
=========================================================================
"
# for things like synthetic modules that really have no source on disk, don't return a code object at all
# vs things like an empty package init (which has an empty string source on disk)
if source_code is None:
    return None
"
-------------------------------------------------------------------------
"```python
# for things like synthetic modules that really have no source on disk, don't return a code object at all
# vs things like an empty package init (which has an empty string source on disk)
if source_code is None:
    return None
```"
-------------------------------------------------------------------------
"
# for things like synthetic modules that really have no source on disk, don't return a code object at all
# vs things like an empty package init (which has an empty string source on disk)
if source_code is None:
    return None
"
-------------------------------------------------------------------------
"Recom
PRs: 71727, 71748"
-------------------------------------------------------------------------
=========================================================================
"def test_empty_vs_no_code():
finder = get_default_finder()
reset_collections_loader_state(finder)

from ansible_collections.testns import testcoll  # synthetic package with no code on disk
from ansible_collections.testns.testcoll.plugins import module_utils  # real package with empty code file

# ensure synthetic packages have no code object at all (prevent bogus coverage entries)
assert testcoll.__loader__.get_source(testcoll.__name__) is None
assert testcoll.__loader__.get_code(testcoll.__name__) is None

# ensure empty package inits do have a code object
assert module_utils.__loader__.get_source(module_utils.__name__) == b''
assert module_utils.__loader__.get_code(module_utils.__name__) is not None


"
-------------------------------------------------------------------------
"```python
def test_empty_vs_no_code():
    finder = get_default_finder()
    reset_collections_loader_state(finder)

    from ansible_collections.testns import testcoll  # synthetic package with no code on disk
    from ansible_collections.testns.testcoll.plugins import module_utils  # real package with empty code file

    # ensure synthetic packages have no code object at all (prevent bogus coverage entries)
    assert testcoll.__loader__.get_source(testcoll.__name__) is None
    assert testcoll.__loader__.get_code(testcoll.__name__) is None

    # ensure empty package inits do have a code object
    assert module_utils.__loader__.get_source(module_utils.__name__) == b''
    assert module_utils.__loader__.get_code(module_utils.__name__) is not None
```"
-------------------------------------------------------------------------
"def test_empty_vs_no_code():
finder = get_default_finder()
reset_collections_loader_state(finder)

from ansible_collections.testns import testcoll  # synthetic package with no code on disk
from ansible_collections.testns.testcoll.plugins import module_utils  # real package with empty code file

# ensure synthetic packages have no code object at all (prevent bogus coverage entries)
assert testcoll.__loader__.get_source(testcoll.__name__) is None
assert testcoll.__loader__.get_code(testcoll.__name__) is None

# ensure empty package inits do have a code object
assert module_utils.__loader__.get_source(module_utils.__name__) == b''
assert module_utils.__loader__.get_code(module_utils.__name__) is not None


"
-------------------------------------------------------------------------
"Recom
PRs: 71727, 71748"
-------------------------------------------------------------------------
=========================================================================
"remote_endpoint=None,
"
-------------------------------------------------------------------------
"def add_environments(parser, isolated_delegation=True):
             remote_provider=None,
             remote_aws_region=None,
             remote_terminate=None,
             python_interpreter=None,
             remote_endpoint=None,"
-------------------------------------------------------------------------
"remote_endpoint=None,
"
-------------------------------------------------------------------------
"Recom
PRs: 71446, 71578"
-------------------------------------------------------------------------
=========================================================================
"cmd = ['python', '-m', 'coverage.__main__', command, '--rcfile', COVERAGE_CONFIG_PATH]  cmd
"
-------------------------------------------------------------------------
"```python
cmd = ['python', '-m', 'coverage.__main__', command, '--rcfile', COVERAGE_CONFIG_PATH]
```"
-------------------------------------------------------------------------
"cmd = ['python', '-m', 'coverage.__main__', command, '--rcfile', COVERAGE_CONFIG_PATH]  cmd
"
-------------------------------------------------------------------------
"Recom
PRs: 71446, 71578"
-------------------------------------------------------------------------
=========================================================================
"help='remote stage to use: prod, dev',
default='prod').completer = complete_remote_stage
"
-------------------------------------------------------------------------
"```python
remote.add_argument('--remote-stage',
                    metavar='STAGE',
                    help='remote stage to use: prod, dev',
                    default='prod'
                   ).completer = complete_remote_stage
```"
-------------------------------------------------------------------------
"help='remote stage to use: prod, dev',
default='prod').completer = complete_remote_stage
"
-------------------------------------------------------------------------
"Recom
PRs: 71413, 71572"
-------------------------------------------------------------------------
=========================================================================
"remote.add_argument('--remote-endpoint',
                    metavar='ENDPOINT',
                    help='remote provisioning endpoint to use (default: auto)',
                    default=None)

"
-------------------------------------------------------------------------
"```python
remote.add_argument('--remote-endpoint',
                    metavar='ENDPOINT',
                    help='remote provisioning endpoint to use (default: auto)',
                    default=None)
```"
-------------------------------------------------------------------------
"remote.add_argument('--remote-endpoint',
                    metavar='ENDPOINT',
                    help='remote provisioning endpoint to use (default: auto)',
                    default=None)

"
-------------------------------------------------------------------------
"Recom
PRs: 71413, 71572"
-------------------------------------------------------------------------
=========================================================================
"# noinspection PyUnusedLocal
def complete_remote_stage(prefix, parsed_args, **_):  # pylint: disable=unused-argument
""""""
:type prefix: unicode
:type parsed_args: any
:rtype: list[str]
""""""
return [stage for stage in ('prod', 'dev') if stage.startswith(prefix)]


"
-------------------------------------------------------------------------
"```python
def complete_remote_stage(prefix, parsed_args, **_):  
    """"""
    :type prefix: unicode
    :type parsed_args: any
    :rtype: list[str]
    """"""
    return [stage for stage in ('prod', 'dev') if stage.startswith(prefix)]
```"
-------------------------------------------------------------------------
"# noinspection PyUnusedLocal
def complete_remote_stage(prefix, parsed_args, **_):  # pylint: disable=unused-argument
""""""
:type prefix: unicode
:type parsed_args: any
:rtype: list[str]
""""""
return [stage for stage in ('prod', 'dev') if stage.startswith(prefix)]


"
-------------------------------------------------------------------------
"Recom
PRs: 71413, 71572"
-------------------------------------------------------------------------
=========================================================================
"self.remote_endpoint = args.remote_endpoint  # type: t.Optional[str]
"
-------------------------------------------------------------------------
self.remote_endpoint = args.remote_endpoint  # type: t.Optional[str]
-------------------------------------------------------------------------
"self.remote_endpoint = args.remote_endpoint  # type: t.Optional[str]
"
-------------------------------------------------------------------------
"Recom
PRs: 71413, 71572"
-------------------------------------------------------------------------
=========================================================================
"'us-east-1': 'https://ansible-core-ci.testing.ansible.com',
"
-------------------------------------------------------------------------
"```python
from .data import (
)
 
AWS_ENDPOINTS = {
    'us-east-1': 'https://ansible-core-ci.testing.ansible.com',
}
```"
-------------------------------------------------------------------------
"'us-east-1': 'https://ansible-core-ci.testing.ansible.com',
"
-------------------------------------------------------------------------
"Recom
PRs: 71413, 71572"
-------------------------------------------------------------------------
=========================================================================
"display.warning('The --remote-aws-region option is obsolete and will be removed in a future version of ansible-test.')
"
-------------------------------------------------------------------------
"```python
import display

display.warning('The --remote-aws-region option is obsolete and will be removed in a future version of ansible-test.')
```"
-------------------------------------------------------------------------
"display.warning('The --remote-aws-region option is obsolete and will be removed in a future version of ansible-test.')
"
-------------------------------------------------------------------------
"Recom
PRs: 71413, 71572"
-------------------------------------------------------------------------
=========================================================================
"
if self.args.remote_endpoint:
    self.endpoints = (self.args.remote_endpoint,)
else:
    self.endpoints = (AWS_ENDPOINTS[region],)

"
-------------------------------------------------------------------------
"```python
if self.args.remote_endpoint:
    self.endpoints = (self.args.remote_endpoint,)
else:
    self.endpoints = (AWS_ENDPOINTS[self.region],)
```"
-------------------------------------------------------------------------
"
if self.args.remote_endpoint:
    self.endpoints = (self.args.remote_endpoint,)
else:
    self.endpoints = (AWS_ENDPOINTS[region],)

"
-------------------------------------------------------------------------
"Recom
PRs: 71413, 71572"
-------------------------------------------------------------------------
=========================================================================
"if self.args.remote_endpoint:
    self.endpoints = (self.args.remote_endpoint,)
else:
    self.endpoints = self._get_parallels_endpoints()
    self.max_threshold = 6
"
-------------------------------------------------------------------------
"```python
if self.args.remote_endpoint:
    self.endpoints = (self.args.remote_endpoint,)
    self.max_threshold = 6
else:
    self.endpoints = self._get_parallels_endpoints()
    self.max_threshold = 6
```"
-------------------------------------------------------------------------
"if self.args.remote_endpoint:
    self.endpoints = (self.args.remote_endpoint,)
else:
    self.endpoints = self._get_parallels_endpoints()
    self.max_threshold = 6
"
-------------------------------------------------------------------------
"Recom
PRs: 71413, 71572"
-------------------------------------------------------------------------
=========================================================================
"response = client.get('https://ansible-ci-files.s3.amazonaws.com/ansible-test/parallels-endpoints.txt')
"
-------------------------------------------------------------------------
"```python
response = client.get('https://ansible-ci-files.s3.amazonaws.com/ansible-test/parallels-endpoints.txt')
```"
-------------------------------------------------------------------------
"response = client.get('https://ansible-ci-files.s3.amazonaws.com/ansible-test/parallels-endpoints.txt')
"
-------------------------------------------------------------------------
"Recom
PRs: 71413, 71572"
-------------------------------------------------------------------------
=========================================================================
"return '%s/%s/%s/%s' % (self.endpoint, self.stage, self.provider, self.instance_id)
"
-------------------------------------------------------------------------
"```python
return f'{self.endpoint}/{self.stage}/{self.provider}/{self.instance_id}'
```"
-------------------------------------------------------------------------
"return '%s/%s/%s/%s' % (self.endpoint, self.stage, self.provider, self.instance_id)
"
-------------------------------------------------------------------------
"Recom
PRs: 71413, 71572"
-------------------------------------------------------------------------
=========================================================================
"- This setting affects packages installed from a repository as well as
  ""local"" packages installed from the filesystem or a URL.
"
-------------------------------------------------------------------------
- This setting affects packages installed from a repository as well as local packages installed from the filesystem or a URL.
-------------------------------------------------------------------------
"- This setting affects packages installed from a repository as well as
  ""local"" packages installed from the filesystem or a URL.
"
-------------------------------------------------------------------------
"Recom
PRs: 71537, 71541"
-------------------------------------------------------------------------
=========================================================================
"# Validate GPG. This is NOT done in dnf.Base (it's done in the
# upstream CLI subclass of dnf.Base)
if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True

        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg)

"
-------------------------------------------------------------------------
"```python
# Validate GPG. This is NOT done in dnf.Base (it's done in the
# upstream CLI subclass of dnf.Base)
if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True

        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg)
```"
-------------------------------------------------------------------------
"# Validate GPG. This is NOT done in dnf.Base (it's done in the
# upstream CLI subclass of dnf.Base)
if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True

        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg=msg)

"
-------------------------------------------------------------------------
"Recom
PRs: 71537, 71541"
-------------------------------------------------------------------------
=========================================================================
"- This setting affects packages installed from a repository as well as
  ""local"" packages installed from the filesystem or a URL.
"
-------------------------------------------------------------------------
"This setting affects packages installed from a repository as well as
  ""local"" packages installed from the filesystem or a URL."
-------------------------------------------------------------------------
"- This setting affects packages installed from a repository as well as
  ""local"" packages installed from the filesystem or a URL.
"
-------------------------------------------------------------------------
"Recom
PRs: 71537, 71540"
-------------------------------------------------------------------------
=========================================================================
"# Validate GPG. This is NOT done in dnf.Base (it's done in the
# upstream CLI subclass of dnf.Base)
if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True

        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg)

"
-------------------------------------------------------------------------
"```python
# Validate GPG. This is NOT done in DnfModule (it's done in the
# upstream CLI subclass of dnf.Base)
if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True

        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg)
```"
-------------------------------------------------------------------------
"# Validate GPG. This is NOT done in dnf.Base (it's done in the
# upstream CLI subclass of dnf.Base)
if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True

        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg=msg)

"
-------------------------------------------------------------------------
"Recom
PRs: 71537, 71540"
-------------------------------------------------------------------------
=========================================================================
"- This setting affects packages installed from a repository as well as
  ""local"" packages installed from the filesystem or a URL.
"
-------------------------------------------------------------------------
"This setting affects packages installed from a repository as well as ""local"" packages installed from the filesystem or a URL."
-------------------------------------------------------------------------
"- This setting affects packages installed from a repository as well as
  ""local"" packages installed from the filesystem or a URL.
"
-------------------------------------------------------------------------
"Recom
PRs: 71537, 71539"
-------------------------------------------------------------------------
=========================================================================
"# Validate GPG. This is NOT done in dnf.Base (it's done in the
# upstream CLI subclass of dnf.Base)
if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True

        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg)

"
-------------------------------------------------------------------------
"```python
# Validate GPG. This is NOT done in dnf.Base (it's done in the
# upstream CLI subclass of dnf.Base)
import dnf.exceptions

if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True

        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg)
```"
-------------------------------------------------------------------------
"# Validate GPG. This is NOT done in dnf.Base (it's done in the
# upstream CLI subclass of dnf.Base)
if not self.disable_gpg_check:
    for package in self.base.transaction.install_set:
        fail = False
        gpgres, gpgerr = self.base._sig_check_pkg(package)
        if gpgres == 0:  # validated successfully
            continue
        elif gpgres == 1:  # validation failed, install cert?
            try:
                self.base._get_key_for_package(package)
            except dnf.exceptions.Error as e:
                fail = True
        else:  # fatal error
            fail = True

        if fail:
            msg = 'Failed to validate GPG signature for {0}'.format(package)
            self.module.fail_json(msg)

"
-------------------------------------------------------------------------
"Recom
PRs: 71537, 71539"
-------------------------------------------------------------------------
=========================================================================
"self._created_files = set()

    self._uses_common_file_args = True
"
-------------------------------------------------------------------------
"self._created_files = set()

self._uses_common_file_args = True"
-------------------------------------------------------------------------
"if mode is None:
    return changed

"
-------------------------------------------------------------------------
"Recom
PRs: 71260, 71514"
-------------------------------------------------------------------------
=========================================================================
"# Remove paths so we do not warn about creating with default permissions
# since we are calling this method on the path and setting the specified mode.
try:
    self._created_files.remove(path)
except KeyError:
    pass

"
-------------------------------------------------------------------------
"```python
try:
    self._created_files.remove(path)
except KeyError:
    pass
```"
-------------------------------------------------------------------------
"_DEFAULT_PERM = 0o0666       # default file permission bits
"
-------------------------------------------------------------------------
"Recom
PRs: 71260, 71514"
-------------------------------------------------------------------------
=========================================================================
"_DEFAULT_PERM = 0o0600       # default file permission bits
"
-------------------------------------------------------------------------
_DEFAULT_PERM = 0o0600       # default file permission bits
-------------------------------------------------------------------------
"stat1.st_mode = 0o0644
"
-------------------------------------------------------------------------
"Recom
PRs: 71260, 71514"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.group_by
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.group_by
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.group_by
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.copy
- module: ansible.builtin.template
- module: ansible.windows.win_copy
"
-------------------------------------------------------------------------
"```yaml
options:
  type: str
  version_added: '2.0'
seealso:
author:
  - Stephen Fromm (@sfromm)
extends_documentation_fragment:
  - backport
  - module
  - core_review
  - net_tools
  - inventory
  - support:core
  - m:unarchive
  - include_role
  - docs
  - packaging
  - system
  - utilities
  - files
  - commands
  - affects_2.10
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.copy
- module: ansible.builtin.template
- module: ansible.windows.win_copy
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.debug
- module: ansible.builtin.fail
- module: ansible.builtin.meta
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.debug
- module: ansible.builtin.fail
- module: ansible.builtin.meta
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.debug
- module: ansible.builtin.fail
- module: ansible.builtin.meta
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"Use the M(ansible.builtin.shell) module if you need these features.
For Windows targets, use the M(ansible.windows.win_command) module instead.
"
-------------------------------------------------------------------------
"```yaml
options:
  free_form:
    description: ""Use the M(ansible.builtin.shell) module if you need these features.
                   For Windows targets, use the M(ansible.windows.win_command) module instead.""
```"
-------------------------------------------------------------------------
"Use the M(ansible.builtin.shell) module if you need these features.
For Windows targets, use the M(ansible.windows.win_command) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"-  If you want to run a command through the shell (say you are using C(<), C(>), C(|), etc), you actually want the M(ansible.builtin.shell) module instead.
-  The C(executable) parameter is removed since version 2.4. If you have a need for this parameter, use the M(ansible.builtin.shell) module instead.
-  For Windows targets, use the M(ansible.windows.win_command) module instead.
-  For rebooting systems, use the M(ansible.builtin.reboot) or M(ansible.windows.win_reboot) module.
dule: ansible.builtin.raw
dule: ansible.builtin.script
dule: ansible.builtin.shell
dule: ansible.windows.win_command
"
-------------------------------------------------------------------------
"```yaml
options:
  type: bool
  default: yes
notes:
  - ""Parsing shell metacharacters can lead to unexpected commands being executed if quoting is not done correctly so it is more secure to
     use the M(ansible.builtin.shell) module when possible.""
  - ""C(creates), C(removes), and C(chdir) can be specified after the command. For instance, if you only want to run a command if a certain file does not exist, use this.""
  - ""Check mode is supported when passing C(creates) or C(removes). If running in check mode and either of these are specified, the module will
     check for the existence of the file and report the correct changed status. If these are not supplied, the task will be skipped.""
seealso:
author:
  - Ansible Core Team
  - Michael DeHaan
```"
-------------------------------------------------------------------------
"-  If you want to run a command through the shell (say you are using C(<), C(>), C(|), etc), you actually want the M(ansible.builtin.shell) module instead.
-  The C(executable) parameter is removed since version 2.4. If you have a need for this parameter, use the M(ansible.builtin.shell) module instead.
-  For Windows targets, use the M(ansible.windows.win_command) module instead.
-  For rebooting systems, use the M(ansible.builtin.reboot) or M(ansible.windows.win_reboot) module.
dule: ansible.builtin.raw
dule: ansible.builtin.script
dule: ansible.builtin.shell
dule: ansible.windows.win_command
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- Use the M(ansible.builtin.fetch) module to copy files from remote locations to the local box.
- If you need variable interpolation in copied files, use the M(ansible.builtin.template) module.
  Using a variable in the C(content) field will result in unpredictable output.
- For Windows targets, use the M(ansible.windows.win_copy) module instead.
"
-------------------------------------------------------------------------
"```yaml
- name: Use the ansible.builtin.fetch module to copy files from remote locations to the local box
  ansible.builtin.fetch:
    src: /path/to/remote/file
    dest: /path/to/local/file

- name: Use the ansible.builtin.template module for variable interpolation in copied files
  ansible.builtin.template:
    src: /path/to/template/file
    dest: /path/to/output/file

- name: Use the ansible.windows.win_copy module for Windows targets
  ansible.windows.win_copy:
    src: C:\path\to\remote\file
    dest: C:\path\to\local\file
```"
-------------------------------------------------------------------------
"- Use the M(ansible.builtin.fetch) module to copy files from remote locations to the local box.
- If you need variable interpolation in copied files, use the M(ansible.builtin.template) module.
  Using a variable in the C(content) field will result in unpredictable output.
- For Windows targets, use the M(ansible.windows.win_copy) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For advanced formatting or if C(content) contains a variable, use the
  M(ansible.builtin.template) module.
"
-------------------------------------------------------------------------
"```yaml
- For advanced formatting or if C(content) contains a variable, use the
  M(ansible.builtin.template) module.
```"
-------------------------------------------------------------------------
"- For advanced formatting or if C(content) contains a variable, use the
  M(ansible.builtin.template) module.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- The M(ansible.builtin.copy) module recursively copy facility does not scale to lots (>hundreds) of files.
- module: ansible.builtin.assemble
- module: ansible.builtin.fetch
- module: ansible.builtin.file
- module: ansible.builtin.template
- module: ansible.posix.synchronize
- module: ansible.windows.win_copy
"
-------------------------------------------------------------------------
"```python
import os
import __future__
import ansible.module_utils._text
import ansible.errors
import ansible.plugins.lookup
import glob

# The M(ansible.builtin.copy) module recursively copy facility does not scale to lots (>hundreds) of files.
```"
-------------------------------------------------------------------------
"- The M(ansible.builtin.copy) module recursively copy facility does not scale to lots (>hundreds) of files.
- module: ansible.builtin.assemble
- module: ansible.builtin.fetch
- module: ansible.builtin.file
- module: ansible.builtin.template
- module: ansible.posix.synchronize
- module: ansible.windows.win_copy
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.assert
- module: ansible.builtin.fail
"
-------------------------------------------------------------------------
"```yaml
- ansible.builtin.assert
- ansible.builtin.fail
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.assert
- module: ansible.builtin.fail
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- The M(ansible.builtin.expect) module is designed for simple scenarios.
  For more complex needs, consider the use of expect code with the M(ansible.builtin.shell)
  or M(ansible.builtin.script) modules. (An example is part of the M(ansible.builtin.shell) module documentation)
module: ansible.builtin.script
module: ansible.builtin.shell
"
-------------------------------------------------------------------------
"```python
'''
module: ansible.builtin.script
module: ansible.builtin.shell
'''
```"
-------------------------------------------------------------------------
"- The M(ansible.builtin.expect) module is designed for simple scenarios.
  For more complex needs, consider the use of expect code with the M(ansible.builtin.shell)
  or M(ansible.builtin.script) modules. (An example is part of the M(ansible.builtin.shell) module documentation)
module: ansible.builtin.script
module: ansible.builtin.shell
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.assert
- module: ansible.builtin.debug
- module: ansible.builtin.meta
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.assert
- module: ansible.builtin.debug
- module: ansible.builtin.meta
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.assert
- module: ansible.builtin.debug
- module: ansible.builtin.meta
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- This module works like M(ansible.builtin.copy), but in reverse.
"
-------------------------------------------------------------------------
"```python
DOCUMENTATION = r'''
module: fetch
short_description: Fetch files from remote nodes
description:
- It works like M(ansible.builtin.copy), but in reverse. Files are fetched from remote machines and stored locally in a file tree, organized by hostname.
- Files that already exist at I(dest) will be overwritten if they are different than the I(src).
- This module is also supported for Windows targets.
Required dependency: os, __future__, ansible.module_utils._text, ansible.errors, ansible.plugins.lookup, glob, 
Original metadata: Backport/2.10/70530
--##### SUMMARY

Backports #70530 and #71340. Adds and updates FQCNs within inter-module `M()` references in the module docs.

Also effectively backports #70658, since the change made there is the basis of later changes.

##### ISSUE TYPE
- Docs Pull Request

##### COMPONENT NAME
docs.ansible.com
backport, module, core_review, net_tools, inventory, support:core, m:unarchive, include_role, docs, packaging, system, utilities, files, commands, affects_2.10

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: os, ansible.errors.AnsibleFileNotFound, ansible.module_utils._text.to_text, __future__.absolute_import, __future__.print_function, ansible.module_utils._text.to_bytes, ansible.plugins.lookup.LookupBase, glob, __future__.division
Function name information from Stable: run
Function call information from Stable: to_text, to_bytes
Class name information from Stable: LookupModule
Class method call information from Stable: glob.glob, self.get_basedir, ret.extend, self.find_file_in_search_path, found_paths.append, os.path
Target file: division, __metaclass__, COPYING, ret, module_utils, debug, fileglob, for, isfile, Ansible, local, get_basedir, given, License, _list, is, Patterns, matches, system, no, name, DOCUMENTATION, term_file, mode, all, kwargs, fooapp, class, dir, Python, GNU, item, variables, or, ansible, short_description, match, wantlist, the, dwimmed_path, to, General, version_added, else, recursively, by, commas, module, path, file, to_text, AnsibleFileNotFound, LookupBase, glob, paths, For, extend, _text, def, LookupModule, remote, Michael, break, __future__, node, on, terms, with_fileglob, dehaan, list, It, over, that, Project, find, absolute_import, to_bytes, EXAMPLES, read, gnu, s, c, owner, _terms, None, ansible_search_path, from, org, matching, lookup, michael, dirname, a, Matches, self, pass, iterate, empty, txt, run, copy, gmail, type, errors, string, pattern, against, root, single, etc, os, in, print_function, append, surrogate_or_strict, src, licenses, calls, gpl, instead, found_paths, options, www, v3, required, Display, Public, Returns, com, author, True, not, just, an, notes, library, are, dest, return, basename, term, non, joined, find_file_in_search_path, msg, plugins, DeHaan, import, only, To, C, join, p, files, use, if, Copy, see, Matching, true, my, https, g, description, each, and, playbooks, M, of, supported, so, directory, RETURN, controller, globbed
'''
```"
-------------------------------------------------------------------------
"- This module works like M(ansible.builtin.copy), but in reverse.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- When running fetch with C(become), the M(ansible.builtin.slurp) module will also be
"
-------------------------------------------------------------------------
"When running fetch with `become`, the `ansible.builtin.slurp` module will also be."
-------------------------------------------------------------------------
"- When running fetch with C(become), the M(ansible.builtin.slurp) module will also be
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.copy
- module: ansible.builtin.slurp
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.copy
- module: ansible.builtin.slurp
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.copy
- module: ansible.builtin.slurp
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- Many other modules support the same options as the C(file) module - including M(ansible.builtin.copy),
M(ansible.builtin.template), and M(ansible.builtin.assemble).
For Windows targets, use the M(ansible.windows.win_file) module instead.
"
-------------------------------------------------------------------------
"- Many other modules support the same options as the `file` module - including `ansible.builtin.copy`, `ansible.builtin.template`, and `ansible.builtin.assemble`.
For Windows targets, use the `ansible.windows.win_file` module instead."
-------------------------------------------------------------------------
"- Many other modules support the same options as the C(file) module - including M(ansible.builtin.copy),
M(ansible.builtin.template), and M(ansible.builtin.assemble).
For Windows targets, use the M(ansible.windows.win_file) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"see the C(touch) value or the M(ansible.builtin.copy) or M(ansible.builtin.template) module if you want that behavior.
"
-------------------------------------------------------------------------
"Adapted code snippet:

See the C(touch) value or the M(ansible.builtin.copy) or M(ansible.builtin.template) module if you want that behavior."
-------------------------------------------------------------------------
"see the C(touch) value or the M(ansible.builtin.copy) or M(ansible.builtin.template) module if you want that behavior.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.assemble
- module: ansible.builtin.copy
- module: ansible.builtin.stat
- module: ansible.builtin.template
- module: ansible.windows.win_file
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.assemble
- module: ansible.builtin.copy
- module: ansible.builtin.stat
- module: ansible.builtin.template
- module: ansible.windows.win_file
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.assemble
- module: ansible.builtin.copy
- module: ansible.builtin.stat
- module: ansible.builtin.template
- module: ansible.windows.win_file
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For Windows targets, use the M(ansible.windows.win_find) module instead.
"
-------------------------------------------------------------------------
"```yaml
version_added: ""2.0""
short_description: Return a list of files based on specific criteria
description:
    - Return a list of files based on specific criteria. Multiple criteria are AND'd together.
    - For Windows targets, use the M(ansible.windows.win_find) module instead.
options:
    age:
        description:
Required dependency: os, __future__, ansible.module_utils._text, ansible.errors, ansible.plugins.lookup, glob, ansible.windows.win_find
Original metadata: Backport/2.10/70530
```"
-------------------------------------------------------------------------
"- For Windows targets, use the M(ansible.windows.win_find) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.windows.win_find
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.windows.win_find
  options:
    type: int
    version_added: ""2.6""
  seealso: |
    '''
```"
-------------------------------------------------------------------------
"- module: ansible.windows.win_find
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- This module takes care of executing the configured facts modules, the default is to use the M(ansible.builtin.setup) module.
"
-------------------------------------------------------------------------
"```yaml
gather_facts:
  version_added: 2.8
  short_description: Gathers facts about remote hosts
  description:
    - This module is automatically called by playbooks to gather useful variables about remote hosts that can be used in playbooks.
    - It can also be executed directly by C(/usr/bin/ansible) to check what variables are available to a host.
    - Ansible provides many I(facts) about the system, automatically.
  options:
    facts_module:
      description: Name of the facts module to execute
      default: ansible.builtin.setup
```"
-------------------------------------------------------------------------
"- This module takes care of executing the configured facts modules, the default is to use the M(ansible.builtin.setup) module.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For Windows targets, use the M(ansible.windows.win_get_url) module instead.
"
-------------------------------------------------------------------------
"```yaml
- For Windows targets, use the M(ansible.windows.win_get_url) module instead.
```"
-------------------------------------------------------------------------
"- For Windows targets, use the M(ansible.windows.win_get_url) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For Windows targets, use the M(ansible.windows.win_get_url) module instead.
ule: ansible.builtin.uri
ule: ansible.windows.win_get_url
"
-------------------------------------------------------------------------
"```yaml
options:
  extends_documentation_fragment:
    - files
notes:
seealso:
author:
  - Jan-Piet Mens (@jpmens)
'''

Required dependency: os, __future__, ansible.module_utils._text, ansible.errors, ansible.plugins.lookup, glob, ansible.windows.win_get_url
Original metadata: Backport/2.10/70530
--##### SUMMARY

Backports #70530 and #71340. Adds and updates FQCNs within inter-module `M()` references in the module docs.

For Windows targets, use the `ansible.windows.win_get_url` module instead of `ansible.builtin.uri`.

Also effectively backports #70658, since the change made there is the basis of later changes.

##### ISSUE TYPE
- Docs Pull Request

##### COMPONENT NAME
docs.ansible.com
backport, module, core_review, net_tools, inventory, support:core, m:unarchive, include_role, docs, packaging, system, utilities, files, commands, affects_2.10
```"
-------------------------------------------------------------------------
"- For Windows targets, use the M(ansible.windows.win_get_url) module instead.
ule: ansible.builtin.uri
ule: ansible.windows.win_get_url
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For Windows targets, use the M(ansible.windows.win_group) module instead.
"
-------------------------------------------------------------------------
"```yaml
- name: Manage presence of groups on a host.
  hosts: all
  tasks:
    - name: Ensure group ""developers"" exists
      group:
        name: developers
        state: present
      when: ansible_system == ""Linux""

    - name: Ensure group ""developers"" exists on Windows
      ansible.windows.win_group:
        name: developers
        state: present
      when: ansible_system == ""Windows""
```"
-------------------------------------------------------------------------
"- For Windows targets, use the M(ansible.windows.win_group) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.user
- module: ansible.windows.win_group
"
-------------------------------------------------------------------------
"```yaml
options:
  default: no
  version_added: ""2.8""
seealso:
author:
  - Stephen Fromm (@sfromm)
dependencies:
  - os
  - __future__
  - ansible.module_utils._text
  - ansible.errors
  - ansible.plugins.lookup
  - glob
hunks:
  - module: ansible.builtin.user
  - module: ansible.windows.win_group
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.user
- module: ansible.windows.win_group
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.add_host
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.add_host
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.add_host
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.import_role
- module: ansible.builtin.import_tasks
- module: ansible.builtin.include_role
- module: ansible.builtin.include_tasks
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.import_role
- module: ansible.builtin.import_tasks
- module: ansible.builtin.include_role
- module: ansible.builtin.include_tasks
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.import_role
- module: ansible.builtin.import_tasks
- module: ansible.builtin.include_role
- module: ansible.builtin.include_tasks
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"you want the opposite behavior, use M(ansible.builtin.include_role) instead.
"
-------------------------------------------------------------------------
"```yaml
- name: Include a role using M(ansible.builtin.include_role) instead of the C(roles) keyword
  include_role:
    name: my_role
```"
-------------------------------------------------------------------------
"you want the opposite behavior, use M(ansible.builtin.include_role) instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"M(ansible.builtin.import_role) task.
Unlike M(ansible.builtin.include_role) variable exposure is not configurable, and will always be exposed.
dule: ansible.builtin.import_playbook
dule: ansible.builtin.import_tasks
dule: ansible.builtin.include_role
dule: ansible.builtin.include_tasks
"
-------------------------------------------------------------------------
"```python
- name: Import a role
  import_role:
    name: myrole
```
"
-------------------------------------------------------------------------
"M(ansible.builtin.import_role) task.
Unlike M(ansible.builtin.include_role) variable exposure is not configurable, and will always be exposed.
dule: ansible.builtin.import_playbook
dule: ansible.builtin.import_tasks
dule: ansible.builtin.include_role
dule: ansible.builtin.include_tasks
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- If you need any of those to apply, use M(ansible.builtin.include_tasks) instead.
le: ansible.builtin.import_playbook
le: ansible.builtin.import_role
le: ansible.builtin.include_role
le: ansible.builtin.include_tasks
"
-------------------------------------------------------------------------
"```yaml
Current context: options:
     description:
       - The name of the imported file is specified directly without any other option.
       - Most keywords, including loops and conditionals, only applied to the imported tasks, not to this statement itself.
 notes:
   - This is a core feature of Ansible, rather than a module, and cannot be overridden like a module.
 seealso:
 - ref: playbooks_reuse_includes
   description: More information related to including and importing playbooks, roles and tasks.
 '''
Required dependency: os, __future__, ansible.module_utils._text, ansible.errors, ansible.plugins.lookup, glob,
                ansible.builtin.include_tasks
Original metadata: Backport/2.10/70530
--##### SUMMARY

Backports #70530 and #71340. Adds and updates FQCNs within inter-module `M()` references in the module docs.

Also effectively backports #70658, since the change made there is the basis of later changes.

##### ISSUE TYPE
- Docs Pull Request

##### COMPONENT NAME
docs.ansible.com
backport, module, core_review, net_tools, inventory, support:core, m:unarchive, include_role, docs, packaging, system, utilities, files, commands, affects_2.10

Functional set for the hunk:
Compilation set for the hunk:
Library information from Stable: os, ansible.errors.AnsibleFileNotFound, ansible.module_utils._text.to_text, __future__.absolute_import, __future__.print_function, ansible.module_utils._text.to_bytes, ansible.plugins.lookup.LookupBase, glob, ansible.builtin.include_tasks
Function name information from Stable: run
Function call information from Stable: to_text, to_bytes
Class name information from Stable: LookupModule
Class method call information from Stable: glob.glob, self.get_basedir, ret.extend, self.find_file_in_search_path, found_paths.append, os.path
Target file: division, __metaclass__, COPYING, ret, module_utils, debug, fileglob, for, isfile, Ansible, local, get_basedir, given, License, _list, is, Patterns, matches, system, no, name, DOCUMENTATION, term_file, mode, all, kwargs, fooapp, class, dir, Python, GNU, item, variables, or, ansible, short_description, match, wantlist, the, dwimmed_path, to, General, version_added, else, recursively, by, commas, module, path, file, to_text, AnsibleFileNotFound, LookupBase, glob, paths, For, extend, _text, def, LookupModule, remote, Michael, break, __future__, node, on, terms, with_fileglob, dehaan, list, It, over, that, Project, find, absolute_import, to_bytes, EXAMPLES, read, gnu, s, c, owner, _terms, None, ansible_search_path, from, org, matching, lookup, michael, dirname, a, Matches, self, pass, iterate, empty, txt, run, copy, gmail, type, errors, string, pattern, against, root, single, etc, os, in, print_function, append, surrogate_or_strict, src, licenses, calls, gpl, instead, found_paths, options, www, v3, required, Display, Public, Returns, com, author, True, not, just, an, notes, library, are, dest, return, basename, term, non, joined, find_file_in_search_path, msg, plugins, DeHaan, import, only, To, C, join, p, files, use, if, Copy, see, Matching, true, my, https, g, description, each, and, playbooks, M, of, supported, so, directory, RETURN, controller, globbed
```"
-------------------------------------------------------------------------
"- If you need any of those to apply, use M(ansible.builtin.include_tasks) instead.
le: ansible.builtin.import_playbook
le: ansible.builtin.import_role
le: ansible.builtin.include_role
le: ansible.builtin.include_tasks
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"in an effort to clarify behaviours we are moving to a new set modules (M(ansible.builtin.include_tasks),
M(ansible.builtin.include_role), M(ansible.builtin.import_playbook), M(ansible.builtin.import_tasks))
dule: ansible.builtin.import_playbook
dule: ansible.builtin.import_role
dule: ansible.builtin.import_tasks
dule: ansible.builtin.include_role
dule: ansible.builtin.include_tasks
"
-------------------------------------------------------------------------
"options:
  notes:
    - This is a core feature of Ansible, rather than a module, and cannot be overridden like a module.
    - Include has some unintuitive behaviours depending on if it is running in a static or dynamic in play or in playbook context,
      that have well established and clear behaviours.
    - B(This module will still be supported for some time but we are looking at deprecating it in the near future.)
    - In an effort to clarify behaviors, we are moving to a new set of modules: M(ansible.builtin.include_tasks),
      M(ansible.builtin.include_role), M(ansible.builtin.import_playbook), M(ansible.builtin.import_tasks)
  seealso:
    - ref: playbooks_reuse_includes
      description: More information related to including and importing playbooks, roles and tasks."
-------------------------------------------------------------------------
"in an effort to clarify behaviours we are moving to a new set modules (M(ansible.builtin.include_tasks),
M(ansible.builtin.include_role), M(ansible.builtin.import_playbook), M(ansible.builtin.import_tasks))
dule: ansible.builtin.import_playbook
dule: ansible.builtin.import_role
dule: ansible.builtin.import_tasks
dule: ansible.builtin.include_role
dule: ansible.builtin.include_tasks
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- To apply keywords to the tasks within the role, pass them using the C(apply) option or use M(ansible.builtin.import_role) instead.
"
-------------------------------------------------------------------------
"To apply keywords to the tasks within the role, pass them using the `apply` option or use `ansible.builtin.import_role` instead."
-------------------------------------------------------------------------
"- To apply keywords to the tasks within the role, pass them using the C(apply) option or use M(ansible.builtin.import_role) instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- After Ansible 2.4, you can use M(ansible.builtin.import_role) for C(static) behaviour and this action for C(dynamic) one.
module: ansible.builtin.import_playbook
module: ansible.builtin.import_role
module: ansible.builtin.import_tasks
module: ansible.builtin.include_tasks
"
-------------------------------------------------------------------------
"'''
module: ansible.builtin.import_playbook
module: ansible.builtin.import_role
module: ansible.builtin.import_tasks
module: ansible.builtin.include_tasks

- After Ansible 2.4, you can use `ansible.builtin.import_role` for static behavior and `ansible.builtin.import_tasks` for dynamic behavior.
'''"
-------------------------------------------------------------------------
"- After Ansible 2.4, you can use M(ansible.builtin.import_role) for C(static) behaviour and this action for C(dynamic) one.
module: ansible.builtin.import_playbook
module: ansible.builtin.import_role
module: ansible.builtin.import_tasks
module: ansible.builtin.include_tasks
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- Unlike M(ansible.builtin.import_tasks), most keywords, including loop, with_items, and conditionals, apply to this statement.
- The do until loop is not supported on M(ansible.builtin.include_tasks).
"
-------------------------------------------------------------------------
"```python
- Unlike `M(ansible.builtin.import_tasks)`, most keywords, including `loop`, `with_items`, and conditionals, apply to this statement.
- The `do until` loop is not supported on `M(ansible.builtin.include_tasks)`.
```"
-------------------------------------------------------------------------
"- Unlike M(ansible.builtin.import_tasks), most keywords, including loop, with_items, and conditionals, apply to this statement.
- The do until loop is not supported on M(ansible.builtin.include_tasks).
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.import_playbook
- module: ansible.builtin.import_role
- module: ansible.builtin.import_tasks
- module: ansible.builtin.include_role
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.ansible.builtin.import_playbook
- module: ansible.builtin.ansible.builtin.import_role
- module: ansible.builtin.ansible.builtin.import_tasks
- module: ansible.builtin.ansible.builtin.include_role
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.import_playbook
- module: ansible.builtin.import_role
- module: ansible.builtin.import_tasks
- module: ansible.builtin.include_role
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.set_fact
"
-------------------------------------------------------------------------
"```yaml
- name: Set a fact
  ansible.builtin.set_fact:
    fact_name: ""my_fact""
    value: ""my_value""
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.set_fact
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"This is useful if you're going to want to use the M(ansible.builtin.git) module over ssh, for example.
If you have a very large number of host keys to manage, you will find the M(ansible.builtin.template) module more useful.
"
-------------------------------------------------------------------------
"- This is useful if you're going to want to use the C(known_hosts) module over ssh, for example.
- If you have a very large number of host keys to manage, you will find the C(template) module more useful."
-------------------------------------------------------------------------
"This is useful if you're going to want to use the M(ansible.builtin.git) module over ssh, for example.
If you have a very large number of host keys to manage, you will find the M(ansible.builtin.template) module more useful.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- See the M(ansible.builtin.replace) module if you want to change multiple, similar lines
  or check M(ansible.builtin.blockinfile) if you want to insert/update/remove a block of lines in a file.
  For other cases, see the M(ansible.builtin.copy) or M(ansible.builtin.template) modules.
"
-------------------------------------------------------------------------
"- See the `M(ansible.builtin.replace)` module if you want to change multiple, similar lines
  or check `M(ansible.builtin.blockinfile)` if you want to insert/update/remove a block of lines in a file.
  For other cases, see the `M(ansible.builtin.copy)` or `M(ansible.builtin.template)` modules."
-------------------------------------------------------------------------
"- See the M(ansible.builtin.replace) module if you want to change multiple, similar lines
  or check M(ansible.builtin.blockinfile) if you want to insert/update/remove a block of lines in a file.
  For other cases, see the M(ansible.builtin.copy) or M(ansible.builtin.template) modules.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- All arguments accepted by the M(ansible.builtin.file) module also work here.
"
-------------------------------------------------------------------------
All arguments accepted by the `M(ansible.builtin.file)` module also work here.
-------------------------------------------------------------------------
"- All arguments accepted by the M(ansible.builtin.file) module also work here.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.blockinfile
- module: ansible.builtin.copy
- module: ansible.builtin.file
- module: ansible.builtin.replace
- module: ansible.builtin.template
- module: ansible.windows.win_lineinfile
"
-------------------------------------------------------------------------
"- module: ansible.builtin.blockinfile
- module: ansible.builtin.copy
- module: ansible.builtin.file
- module: ansible.builtin.replace
- module: ansible.builtin.template
- module: ansible.windows.win_lineinfile"
-------------------------------------------------------------------------
"- module: ansible.builtin.blockinfile
- module: ansible.builtin.copy
- module: ansible.builtin.file
- module: ansible.builtin.replace
- module: ansible.builtin.template
- module: community.windows.win_lineinfile
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"This is mainly useful when additional hosts are created and users wish to use them instead of using the M(ansible.builtin.add_host) module.
"
-------------------------------------------------------------------------
"This is mainly useful when additional hosts are created, and users wish to use them instead of using the ```ansible.builtin.add_host``` module."
-------------------------------------------------------------------------
"This is mainly useful when additional hosts are created and users wish to use them instead of using the M(ansible.builtin.add_host) module.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- C(clear_facts) will remove the persistent facts from M(ansible.builtin.set_fact) using C(cacheable=True),
dule: ansible.builtin.assert
dule: ansible.builtin.fail
"
-------------------------------------------------------------------------
"```yaml
options:
     required: true
 notes:
     - C(clear_facts) will remove the persistent facts from M(ansible.builtin.set_fact) using C(cacheable=True).
     - Module: ansible.builtin.assert
     - Module: ansible.builtin.fail
```"
-------------------------------------------------------------------------
"- C(clear_facts) will remove the persistent facts from M(ansible.builtin.set_fact) using C(cacheable=True),
dule: ansible.builtin.assert
dule: ansible.builtin.fail
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For Windows targets, use the M(ansible.windows.win_package) module instead.
"
-------------------------------------------------------------------------
"```python
- For Windows targets, use the M(ansible.windows.win_package) module instead.
```"
-------------------------------------------------------------------------
"- For Windows targets, use the M(ansible.windows.win_package) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For Windows targets, use the M(ansible.windows.win_package) module instead.
"
-------------------------------------------------------------------------
"'''
 EXAMPLES = '''
 - name: Install ntpdate
  win_package:
    name: ntpdate
    state: present
'''"
-------------------------------------------------------------------------
"- For Windows targets, use the M(ansible.windows.win_package) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- To pause/wait/sleep per host, use the M(ansible.builtin.wait_for) module.
"
-------------------------------------------------------------------------
"To pause/wait/sleep per host, use the `ansible.builtin.wait_for` module."
-------------------------------------------------------------------------
"- To pause/wait/sleep per host, use the M(ansible.builtin.wait_for) module.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For Windows targets, use the M(ansible.windows.win_ping) module instead.
- For Network targets, use the M(ansible.netcommon.net_ping) module instead.
"
-------------------------------------------------------------------------
"```yaml
- For Windows targets, use the M(ansible.windows.win_ping) module instead.
- For Network targets, use the M(ansible.netcommon.net_ping) module instead.
```"
-------------------------------------------------------------------------
"- For Windows targets, use the M(ansible.windows.win_ping) module instead.
- For Network targets, use the M(ansible.netcommon.net_ping) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.netcommon.net_ping
- module: ansible.windows.win_ping
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.netcommon.net_ping
  options:
    type: str
    default: pong

- module: ansible.windows.win_ping
  options:
    type: str
    default: pong
```"
-------------------------------------------------------------------------
"- module: ansible.netcommon.net_ping
- module: ansible.windows.win_ping
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"the M(ansible.builtin.shell) or M(ansible.builtin.command) module is much more appropriate.
the M(ansible.builtin.script) module.
etter to use the M(ansible.builtin.command) or M(ansible.builtin.shell) modules instead.
e: ansible.builtin.command
e: ansible.builtin.shell
e: ansible.windows.win_command
e: ansible.windows.win_shell
"
-------------------------------------------------------------------------
"- It is better to use the M(ansible.builtin.command) or M(ansible.builtin.shell) modules instead.
- e: ansible.builtin.command
- e: ansible.builtin.shell
- e: ansible.windows.win_command
- e: ansible.windows.win_shell
- No need to provide extra information."
-------------------------------------------------------------------------
"the M(ansible.builtin.shell) or M(ansible.builtin.command) module is much more appropriate.
the M(ansible.builtin.script) module.
etter to use the M(ansible.builtin.command) or M(ansible.builtin.shell) modules instead.
e: ansible.builtin.command
e: ansible.builtin.shell
e: ansible.windows.win_command
e: ansible.windows.win_shell
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For Windows targets, use the M(ansible.windows.win_reboot) module instead.
"
-------------------------------------------------------------------------
"```yaml
- name: Reboot a machine, wait for it to go down, come back up, and respond to commands
  win_reboot:
    pre_reboot_delay: 
```"
-------------------------------------------------------------------------
"- For Windows targets, use the M(ansible.windows.win_reboot) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.windows.win_reboot
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.windows.win_reboot
```"
-------------------------------------------------------------------------
"- module: ansible.windows.win_reboot
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- All arguments accepted by the M(ansible.builtin.file) module also work here.
"
-------------------------------------------------------------------------
"Adapt the code snippet as follows:
```yaml
options:
  default: no
  others:
    description:
      type: str
  encoding:
    description:
```
"
-------------------------------------------------------------------------
"- All arguments accepted by the M(ansible.builtin.file) module also work here.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- This module does not require python on the remote system, much like the M(ansible.builtin.raw) module.
"
-------------------------------------------------------------------------
"```yaml
description:
  - This module does not require python on the remote system, much like the M(ansible.builtin.raw) module.
options:
  free_form:
```"
-------------------------------------------------------------------------
"- This module does not require python on the remote system, much like the M(ansible.builtin.raw) module.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.shell
- module: ansible.windows.win_shell
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.shell
- module: ansible.windows.win_shell
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.shell
- module: ansible.windows.win_shell
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For Windows targets, use the M(ansible.windows.win_service) module instead.
"
-------------------------------------------------------------------------
"```yaml
short_description: Manage services
description:
  - Controls services on remote hosts. Supported init systems include BSD init,
    OpenRC, SysV, Solaris SMF, systemd, upstart.
  - For Windows targets, use the M(ansible.windows.win_service) module instead.
options:
  name:
    description:
```"
-------------------------------------------------------------------------
"- For Windows targets, use the M(ansible.windows.win_service) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.windows.win_service
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.windows.win_service
```"
-------------------------------------------------------------------------
"- module: ansible.windows.win_service
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.include_vars
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.include_vars
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.include_vars
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"remote systems. (See also M(community.general.facter) and M(community.general.ohai).)
"
-------------------------------------------------------------------------
"Update the given code snippet as follows:

```python
remote systems. (See also C(community.general.facter) and C(community.general.ohai).)
```"
-------------------------------------------------------------------------
"remote systems. (See also M(community.general.facter) and M(community.general.ohai).)
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- It is almost exactly like the M(ansible.builtin.command) module but runs
- For Windows targets, use the M(ansible.windows.win_shell) module instead.
"
-------------------------------------------------------------------------
"```yaml
short_description: Execute shell commands on targets
description:
    - It is almost exactly like the M(ansible.builtin.command) module but runs
    - For Windows targets, use the M(ansible.windows.win_shell) module instead.
version_added: ""0.2""
options:
    free_form: 
```"
-------------------------------------------------------------------------
"- It is almost exactly like the M(ansible.builtin.command) module but runs
- For Windows targets, use the M(ansible.windows.win_shell) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"better to use the M(ansible.builtin.command) module instead. Best practices
when writing playbooks will follow the trend of using M(ansible.builtin.command)
unless the M(ansible.builtin.shell) module is explicitly required. When running ad-hoc
commands, use your best judgement.
"
-------------------------------------------------------------------------
"```python
options:
  version_added: ""2.8""
  notes:
    - When writing playbooks, it is recommended to use the M(ansible.builtin.command) module instead of M(ansible.builtin.shell) unless explicitly needed. Use M(ansible.builtin.command) for better practices in playbook writing. When running ad-hoc commands, use your best judgement.
```"
-------------------------------------------------------------------------
"better to use the M(ansible.builtin.command) module instead. Best practices
when writing playbooks will follow the trend of using M(ansible.builtin.command)
unless the M(ansible.builtin.shell) module is explicitly required. When running ad-hoc
commands, use your best judgement.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"the M(ansible.builtin.script) module possibly together with the M(ansible.builtin.template) module.
For rebooting systems, use the M(ansible.builtin.reboot) or M(ansible.windows.win_reboot) module.
dule: ansible.builtin.command
dule: ansible.builtin.raw
dule: ansible.builtin.script
dule: ansible.windows.win_shell
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils._text import to_text
from ansible.errors import AnsibleError, AnsibleFileNotFound
from ansible.plugins.lookup import LookupBase

import os
import glob
```"
-------------------------------------------------------------------------
"the M(ansible.builtin.script) module possibly together with the M(ansible.builtin.template) module.
For rebooting systems, use the M(ansible.builtin.reboot) or M(ansible.windows.win_reboot) module.
dule: ansible.builtin.command
dule: ansible.builtin.raw
dule: ansible.builtin.script
dule: ansible.windows.win_shell
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- This module works like M(ansible.builtin.fetch). It is used for fetching a base64-
"
-------------------------------------------------------------------------
"```yaml
description:
    - This module works like M(ansible.builtin.fetch). It is used for fetching a base64-encoded blob containing the data in a remote file.
```"
-------------------------------------------------------------------------
"- This module works like M(ansible.builtin.fetch). It is used for fetching a base64-
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- This module returns an 'in memory' base64 encoded version of the file, take
  into account that this will require at least twice the RAM as the original file size.
odule: ansible.builtin.fetch
"
-------------------------------------------------------------------------
"```yaml
---
- name: Ensure the in memory base64 encoded version of the file is returned
  ansible.builtin.fetch:
    src: /path/to/file
    dest: /path/to/destination
    flat: yes
    base64: yes
  vars:
    ansible_python_interpreter: ""{{ ansible_playbook_python }}""
```"
-------------------------------------------------------------------------
"- This module returns an 'in memory' base64 encoded version of the file, take
  into account that this will require at least twice the RAM as the original file size.
odule: ansible.builtin.fetch
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For Windows targets, use the M(ansible.windows.win_stat) module instead.
"
-------------------------------------------------------------------------
"```yaml
Current context: version_added: ""1.3""
 short_description: Retrieve file or file system status
 description:
      - Retrieves facts for a file similar to the Linux/Unix 'stat' command.
 options:
   path:
     description:

- For Windows targets, use the M(ansible.windows.win_stat) module instead.
```"
-------------------------------------------------------------------------
"- For Windows targets, use the M(ansible.windows.win_stat) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.file
- module: ansible.windows.win_stat
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.file
  options:
    aliases: [ attr, attributes ]
    version_added: ""2.3""
    seealso:
      - ansible.windows.win_stat
  author: Bruce Pennypacker (@bpennypacker)
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.file
- module: ansible.windows.win_stat
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"you need to use M(ansible.builtin.file) module.
For Windows targets, use the M(ansible.windows.win_tempfile) module instead.
"
-------------------------------------------------------------------------
"```yaml
short_description: Creates temporary files and directories
description:
  - The C(tempfile) module creates temporary files and directories. C(mktemp) command takes different parameters on various systems, this module helps
    to avoid troubles related to that. Files/directories created by module are accessible only by creator. In case you need to make them world-accessible
options:
  state:
    description:

required_dependency: os, __future__, ansible.module_utils._text, ansible.errors, ansible.plugins.lookup, glob

functional_set:
  - M(ansible.builtin.file)
  - M(ansible.windows.win_tempfile)
```  "
-------------------------------------------------------------------------
"you need to use M(ansible.builtin.file) module.
For Windows targets, use the M(ansible.windows.win_tempfile) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.file
- module: ansible.windows.win_tempfile
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.file
  options:
    type: str
    default: """"
  seealso:
  author:
    - Krzysztof Magosa (@krzysztof-magosa)

- module: ansible.windows.win_tempfile
  options:
    type: str
    default: """"
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.file
- module: ansible.windows.win_tempfile
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.copy
- module: ansible.windows.win_copy
- module: ansible.windows.win_template
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.copy
- module: ansible.windows.win_copy
- module: ansible.windows.win_template
```"
-------------------------------------------------------------------------
"- For Windows you can use M(ansible.windows.win_template) which uses '\\r\\n' as C(newline_sequence) by default.
- module: ansible.builtin.copy
- module: ansible.windows.win_copy
- module: ansible.windows.win_template
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- If checksum validation is desired, use M(ansible.builtin.get_url) or M(ansible.builtin.uri) instead to fetch the file and set C(remote_src=yes).
- For Windows targets, use the M(community.windows.win_unzip) module instead.
   simple cases, for full download support use the M(ansible.builtin.get_url) module.
"
-------------------------------------------------------------------------
"```yaml
- If checksum validation is desired, use M(ansible.builtin.get_url) or M(ansible.builtin.uri) instead to fetch the file and set C(remote_src=yes).
- For Windows targets, use the M(community.windows.win_unzip) module instead.
- For simple cases, for full download support use the M(ansible.builtin.get_url) module.
```"
-------------------------------------------------------------------------
"- If checksum validation is desired, use M(ansible.builtin.get_url) or M(ansible.builtin.uri) instead to fetch the file and set C(remote_src=yes).
- For Windows targets, use the M(community.windows.win_unzip) module instead.
   simple cases, for full download support use the M(ansible.builtin.get_url) module.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: community.general.archive
- module: community.general.iso_extract
- module: community.windows.win_unzip
"
-------------------------------------------------------------------------
"```python
- module: community.general.archive
- module: community.general.iso_extract
- module: community.windows.win_unzip
```"
-------------------------------------------------------------------------
"- module: community.general.archive
- module: community.general.iso_extract
- module: community.windows.win_unzip
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For Windows targets, use the M(ansible.windows.win_uri) module instead.
"
-------------------------------------------------------------------------
"For Windows targets, use the `M(ansible.windows.win_uri)` module instead."
-------------------------------------------------------------------------
"- For Windows targets, use the M(ansible.windows.win_uri) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For Windows targets, use the M(ansible.windows.win_uri) module instead.
module: ansible.builtin.get_url
module: ansible.windows.win_uri
"
-------------------------------------------------------------------------
"```yaml
options:
 notes:
   - The dependency on httplib2 was removed in Ansible 2.1.
   - The module returns all the HTTP headers in lower-case.
   - For Windows targets, use the M(ansible.windows.win_uri) module instead.
 seealso:
 author:
 - Romeo Theriault (@romeotheriault)
 extends_documentation_fragment: files
Required dependency: os, __future__, ansible.module_utils._text, ansible.errors, ansible.plugins.lookup, glob
Original metadata: Backport/2.10/70530
--##### SUMMARY

Backports #70530 and #71340. Adds and updates FQCNs within inter-module `M()` references in the module docs.

Also effectively backports #70658, since the change made there is the basis of later changes.

##### ISSUE TYPE
- Docs Pull Request

##### COMPONENT NAME
docs.ansible.com
backport, module, core_review, net_tools, inventory, support:core, m:unarchive, include_role, docs, packaging, system, utilities, files, commands, affects_2.10
```"
-------------------------------------------------------------------------
"- For Windows targets, use the M(ansible.windows.win_uri) module instead.
module: ansible.builtin.get_url
module: ansible.windows.win_uri
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- For Windows targets, use the M(ansible.windows.win_user) module instead.
"
-------------------------------------------------------------------------
"For Windows targets, use the M(ansible.windows.win_user) module instead."
-------------------------------------------------------------------------
"- For Windows targets, use the M(ansible.windows.win_user) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.authorized_key
- module: ansible.builtin.group
- module: ansible.windows.win_user
"
-------------------------------------------------------------------------
"```yaml
- module: ansible.builtin.user
- module: ansible.builtin.group
- module: ansible.windows.win_user
```"
-------------------------------------------------------------------------
"- module: ansible.posix.authorized_key
- module: ansible.builtin.group
- module: ansible.windows.win_user
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- It is also useful when starting guests with the M(community.libvirt.virt) module and needing to pause until they are ready.
- For Windows targets, use the M(ansible.windows.win_wait_for) module instead.
"
-------------------------------------------------------------------------
"- It is also useful when starting guests with the `community.libvirt.virt` module and needing to pause until they are ready.
- For Windows targets, use the `ansible.windows.win_wait_for` module instead."
-------------------------------------------------------------------------
"- It is also useful when starting guests with the M(community.libvirt.virt) module and needing to pause until they are ready.
- For Windows targets, use the M(ansible.windows.win_wait_for) module instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.wait_for_connection
- module: ansible.windows.win_wait_for
- module: community.windows.win_wait_for_process
"
-------------------------------------------------------------------------
"```python
- module: ansible.builtin.wait_for_connection
- module: ansible.windows.win_wait_for
- module: community.windows.win_wait_for_process
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.wait_for_connection
- module: ansible.windows.win_wait_for
- module: community.windows.win_wait_for_process
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- module: ansible.builtin.wait_for
- module: ansible.windows.win_wait_for
- module: ansible.windows.win_wait_for_process
"
-------------------------------------------------------------------------
"```
- module: ansible.builtin.wait_for
- module: ansible.windows.win_wait_for
- module: ansible.windows.win_wait_for_process
```"
-------------------------------------------------------------------------
"- module: ansible.builtin.wait_for
- module: ansible.windows.win_wait_for
- module: community.windows.win_wait_for_process
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- This module only works on Python 2. If you require Python 3 support see the M(ansible.builtin.dnf) module.
"
-------------------------------------------------------------------------
"```yaml
description:
  - This module only works on Python 2. If you require Python 3 support see the M(ansible.builtin.dnf) module.
```"
-------------------------------------------------------------------------
"- This module only works on Python 2. If you require Python 3 support see the M(ansible.builtin.dnf) module.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"- If you wish to update an existing repository definition use M(ansible.builtin.ini_file) instead.
"
-------------------------------------------------------------------------
"- If you wish to update an existing repository definition, use `M(ansible.builtin.ini_file)` instead."
-------------------------------------------------------------------------
"- If you wish to update an existing repository definition use M(community.general.ini_file) instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"To iterate a list of files on a remote node, use the M(ansible.builtin.find) module.
"
-------------------------------------------------------------------------
"```python
from ansible.plugins.lookup import LookupBase
from ansible.errors import AnsibleFileNotFound
from ansible.module_utils._text import to_text
import glob
import os

DOCUMENTATION = """"""
     notes:
       - Patterns are only supported on files, not directory/paths.
       - Matching is against local system files on the Ansible controller.
       - Returns a string list of paths joined by commas, or an empty list if no files match. For a 'true list' pass C(wantlist=True) to the lookup.
 """"""

# To iterate a list of files on a remote node, use the M(ansible.builtin.find) module.

# Required dependency: os, __future__, ansible.module_utils._text, ansible.errors, ansible.plugins.lookup, glob
```"
-------------------------------------------------------------------------
"To iterate a list of files on a remote node, use the M(ansible.builtin.find) module.
"
-------------------------------------------------------------------------
"Recom
PRs: 70530, 71380"
-------------------------------------------------------------------------
=========================================================================
"# The top-level conditions should only compare meta_action
"
-------------------------------------------------------------------------
"```python
   if meta_action == 'noop':
```"
-------------------------------------------------------------------------
"# The top-level conditions should only compare meta_action
"
-------------------------------------------------------------------------
"Recom
PRs: 71311, 71359"
-------------------------------------------------------------------------
=========================================================================
"elif meta_action == 'refresh_inventory':
"
-------------------------------------------------------------------------
"```python
elif meta_action == 'refresh_inventory':
```"
-------------------------------------------------------------------------
"elif meta_action == 'refresh_inventory':
"
-------------------------------------------------------------------------
"Recom
PRs: 71311, 71359"
-------------------------------------------------------------------------
=========================================================================
"# The top-level conditions should only compare meta_action
"
-------------------------------------------------------------------------
"```
class StrategyBase:
    skipped = False
    msg = ''
    if meta_action == 'noop':
        # FIXME: issue a callback for the noop here?
        if task.when:
```"
-------------------------------------------------------------------------
"# The top-level conditions should only compare meta_action
"
-------------------------------------------------------------------------
"Recom
PRs: 71311, 71358"
-------------------------------------------------------------------------
=========================================================================
"elif meta_action == 'refresh_inventory':
"
-------------------------------------------------------------------------
"```python
elif meta_action == 'refresh_inventory':
    self._inventory.refresh_inventory()
```"
-------------------------------------------------------------------------
"elif meta_action == 'refresh_inventory':
"
-------------------------------------------------------------------------
"Recom
PRs: 71311, 71358"
-------------------------------------------------------------------------
=========================================================================
"from distutils.version import LooseVersion
"
-------------------------------------------------------------------------
"from ansible.module_utils.basic import AnsibleModule, missing_required_lib
from __future__ import absolute_import"
-------------------------------------------------------------------------
"from distutils.version import LooseVersion
"
-------------------------------------------------------------------------
"Recom
PRs: 65392, 71288"
-------------------------------------------------------------------------
=========================================================================
"self._zbx_api_version = zbx.api_version()[:5]
"
-------------------------------------------------------------------------
self._zbx_api_version = zbx.api_version()[:5]
-------------------------------------------------------------------------
"self._zbx_api_version = zbx.api_version()[:5]
"
-------------------------------------------------------------------------
"Recom
PRs: 65392, 71288"
-------------------------------------------------------------------------
=========================================================================
"if LooseVersion(self._zbx_api_version) <= LooseVersion('4.4.0'):
    if host['inventory']:
        if int(host['inventory']['inventory_mode']) != self.inventory_mode_numeric(inventory_mode):
            return True
    elif inventory_mode != 'disabled':
        return True
else:
    if int(host['inventory_mode']) != self.inventory_mode_numeric(inventory_mode):
"
-------------------------------------------------------------------------
"```python
from future import absolute_import
import copy
import traceback

if LooseVersion(self._zbx_api_version) <= LooseVersion('4.4.0'):
    if host['inventory']:
        if int(host['inventory']['inventory_mode']) != self.inventory_mode_numeric(inventory_mode):
            return True
    elif inventory_mode != 'disabled':
        return True
else:
    if inventory_zabbix:
        proposed_inventory = copy.deepcopy(host['inventory'])
```"
-------------------------------------------------------------------------
"if LooseVersion(self._zbx_api_version) <= LooseVersion('4.4.0'):
    if host['inventory']:
        if int(host['inventory']['inventory_mode']) != self.inventory_mode_numeric(inventory_mode):
            return True
    elif inventory_mode != 'disabled':
        return True
else:
    if int(host['inventory_mode']) != self.inventory_mode_numeric(inventory_mode):
"
-------------------------------------------------------------------------
"Recom
PRs: 65392, 71288"
-------------------------------------------------------------------------
=========================================================================
"self.lines = self.n_existing.splitlines()
"
-------------------------------------------------------------------------
self.lines = self.n_existing.splitlines()
-------------------------------------------------------------------------
"self.lines = self.n_existing.splitlines()
"
-------------------------------------------------------------------------
"Recom
PRs: 71207, 71244"
-------------------------------------------------------------------------
=========================================================================
"self.lines = self.n_existing.splitlines()
"
-------------------------------------------------------------------------
"```python
self.lines = self.n_existing.splitlines()
```"
-------------------------------------------------------------------------
"self.lines = self.n_existing.splitlines()
"
-------------------------------------------------------------------------
"Recom
PRs: 71207, 71243"
-------------------------------------------------------------------------
=========================================================================
"self.image = 'quay.io/ansible/acme-test-container:2.0.0'
"
-------------------------------------------------------------------------
self.image = 'quay.io/ansible/acme-test-container:2.0.0'
-------------------------------------------------------------------------
"self.image = 'quay.io/ansible/acme-test-container:2.0.0'
"
-------------------------------------------------------------------------
"Recom
PRs: 71097, 71166"
-------------------------------------------------------------------------
=========================================================================
"self.image = 'quay.io/ansible/acme-test-container:2.0.0'
"
-------------------------------------------------------------------------
"```python
self.image = 'quay.io/ansible/acme-test-container:2.0.0'
```"
-------------------------------------------------------------------------
"self.image = 'quay.io/ansible/acme-test-container:2.0.0'
"
-------------------------------------------------------------------------
"Recom
PRs: 71097, 71165"
-------------------------------------------------------------------------
=========================================================================
"try:
from rpmfluff import SimpleRpmBuild
from rpmfluff import YumRepoBuild
pt ImportError:
from rpmfluff.rpmbuild import SimpleRpmBuild
from rpmfluff.yumrepobuild import YumRepoBuild


from rpmfluff import can_use_rpm_weak_deps
pt ImportError:
try:
    from rpmfluff.utils import can_use_rpm_weak_deps
except ImportError:
    can_use_rpm_weak_deps = None
"
-------------------------------------------------------------------------
"```python
import sys
from collections import namedtuple
try:
    from rpmfluff import SimpleRpmBuild
    from rpmfluff import YumRepoBuild
except ImportError:
    from rpmfluff.rpmbuild import SimpleRpmBuild
    from rpmfluff.yumrepobuild import YumRepoBuild

try:
    from rpmfluff import can_use_rpm_weak_deps
except ImportError:
    try:
        from rpmfluff.utils import can_use_rpm_weak_deps
    except ImportError:
        can_use_rpm_weak_deps = None

RPM = namedtuple('RPM', ['name', 'version', 'release', 'epoch', 'recommends'])
```"
-------------------------------------------------------------------------
"pkg = SimpleRpmBuild(spec.name, spec.version, spec.release, [arch])
    if not can_use_rpm_weak_deps or not can_use_rpm_weak_deps():
"
-------------------------------------------------------------------------
"Recom
PRs: 71155, 71161"
-------------------------------------------------------------------------
=========================================================================
"pkg = SimpleRpmBuild(spec.name, spec.version, spec.release, [arch])
    if not can_use_rpm_weak_deps or not can_use_rpm_weak_deps():
"
-------------------------------------------------------------------------
"```python
pkg = rpmfluff.SimpleRpmBuild(spec.name, spec.version, spec.release, [arch])
if not rpmfluff.utils.can_use_rpm_weak_deps or not rpmfluff.utils.can_use_rpm_weak_deps():
```"
-------------------------------------------------------------------------
"repo = YumRepoBuild(pkgs)
"
-------------------------------------------------------------------------
"Recom
PRs: 71155, 71161"
-------------------------------------------------------------------------
=========================================================================
"try:
from rpmfluff import SimpleRpmBuild
from rpmfluff import YumRepoBuild
pt ImportError:
from rpmfluff.rpmbuild import SimpleRpmBuild
from rpmfluff.yumrepobuild import YumRepoBuild


from rpmfluff import can_use_rpm_weak_deps
pt ImportError:
try:
    from rpmfluff.utils import can_use_rpm_weak_deps
except ImportError:
    can_use_rpm_weak_deps = None
"
-------------------------------------------------------------------------
"try:
    from rpmfluff import SimpleRpmBuild
    from rpmfluff import YumRepoBuild
except ImportError:
    from rpmfluff.rpmbuild import SimpleRpmBuild
    from rpmfluff.yumrepobuild import YumRepoBuild

try:
    from rpmfluff import can_use_rpm_weak_deps
except ImportError:
    try:
        from rpmfluff.utils import can_use_rpm_weak_deps
    except ImportError:
        can_use_rpm_weak_deps = None"
-------------------------------------------------------------------------
"pkg = SimpleRpmBuild(spec.name, spec.version, spec.release, [arch])
    if not can_use_rpm_weak_deps or not can_use_rpm_weak_deps():
"
-------------------------------------------------------------------------
"Recom
PRs: 71155, 71160"
-------------------------------------------------------------------------
=========================================================================
"pkg = SimpleRpmBuild(spec.name, spec.version, spec.release, [arch])
    if not can_use_rpm_weak_deps or not can_use_rpm_weak_deps():
"
-------------------------------------------------------------------------
"```python
pkg = SimpleRpmBuild(spec.name, spec.version, spec.release, [arch])
if not can_use_rpm_weak_deps or not can_use_rpm_weak_deps():
```"
-------------------------------------------------------------------------
"repo = YumRepoBuild(pkgs)
"
-------------------------------------------------------------------------
"Recom
PRs: 71155, 71160"
-------------------------------------------------------------------------
=========================================================================
"try:
from rpmfluff import SimpleRpmBuild
from rpmfluff import YumRepoBuild
pt ImportError:
from rpmfluff.rpmbuild import SimpleRpmBuild
from rpmfluff.yumrepobuild import YumRepoBuild


from rpmfluff import can_use_rpm_weak_deps
pt ImportError:
try:
    from rpmfluff.utils import can_use_rpm_weak_deps
except ImportError:
    can_use_rpm_weak_deps = None
"
-------------------------------------------------------------------------
"```python
try:
    from rpmfluff import SimpleRpmBuild
    from rpmfluff import YumRepoBuild
except ImportError:
    from rpmfluff.rpmbuild import SimpleRpmBuild
    from rpmfluff.yumrepobuild import YumRepoBuild

try:
    from rpmfluff import can_use_rpm_weak_deps
except ImportError:
    try:
        from rpmfluff.utils import can_use_rpm_weak_deps
    except ImportError:
        can_use_rpm_weak_deps = None
```"
-------------------------------------------------------------------------
"pkg = SimpleRpmBuild(spec.name, spec.version, spec.release, [arch])
    if not can_use_rpm_weak_deps or not can_use_rpm_weak_deps():
"
-------------------------------------------------------------------------
"Recom
PRs: 71155, 71159"
-------------------------------------------------------------------------
=========================================================================
"pkg = SimpleRpmBuild(spec.name, spec.version, spec.release, [arch])
    if not can_use_rpm_weak_deps or not can_use_rpm_weak_deps():
"
-------------------------------------------------------------------------
"pkg = SimpleRpmBuild(spec.name, spec.version, spec.release, [arch])
if not rpmfluff.utils.can_use_rpm_weak_deps or not rpmfluff.utils.can_use_rpm_weak_deps():"
-------------------------------------------------------------------------
"repo = YumRepoBuild(pkgs)
"
-------------------------------------------------------------------------
"Recom
PRs: 71155, 71159"
-------------------------------------------------------------------------
=========================================================================
"if path in ('changelogs/fragments/.keep', 'changelogs/fragments/.gitkeep'):
    continue

print('%s:%d:%d: file must not be a dotfile' % (path, 0, 0))
"
-------------------------------------------------------------------------
"```python
if path in ('changelogs/fragments/.keep', 'changelogs/fragments/.gitkeep'):
    continue

print('%s:%d:%d: file must not be a dotfile' % (path, 0, 0))
```"
-------------------------------------------------------------------------
"if path in ('changelogs/fragments/.keep', 'changelogs/fragments/.gitkeep'):
    continue

print('%s:%d:%d: file must not be a dotfile' % (path, 0, 0))
"
-------------------------------------------------------------------------
"Recom
PRs: 70909, 71135"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.common.text.converters import to_bytes, to_native
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.common.text.converters import to_bytes, to_native
```"
-------------------------------------------------------------------------
"from ansible.module_utils.common.text.converters import to_bytes, to_native
"
-------------------------------------------------------------------------
"Recom
PRs: 70426, 71134"
-------------------------------------------------------------------------
=========================================================================
"self.n_existing = ''
        self.b_cron_file = to_bytes(cron_file, errors='surrogate_or_strict')
        self.b_cron_file = os.path.join(b'/etc/cron.d', to_bytes(cron_file, errors='surrogate_or_strict'))
"
-------------------------------------------------------------------------
"self.n_existing = b''
self.b_cron_file = os.path.join(b'/etc/cron.d', to_bytes(cron_file, errors='surrogate_or_strict'))"
-------------------------------------------------------------------------
"self.n_existing = ''
        self.b_cron_file = to_bytes(cron_file, errors='surrogate_or_strict')
        self.b_cron_file = os.path.join(b'/etc/cron.d', to_bytes(cron_file, errors='surrogate_or_strict'))
"
-------------------------------------------------------------------------
"Recom
PRs: 70426, 71134"
-------------------------------------------------------------------------
=========================================================================
"f = open(self.b_cron_file, 'rb')
self.n_existing = to_native(f.read(), errors='surrogate_or_strict')
"
-------------------------------------------------------------------------
"```python
f = open(self.b_cron_file, 'rb')
self.n_existing = to_native(f.read(), errors='surrogate_or_strict')
```"
-------------------------------------------------------------------------
"f = open(self.b_cron_file, 'rb')
self.n_existing = to_native(f.read(), errors='surrogate_or_strict')
"
-------------------------------------------------------------------------
"Recom
PRs: 70426, 71134"
-------------------------------------------------------------------------
=========================================================================
"self.n_existing = out
"
-------------------------------------------------------------------------
self.n_existing = out.splitlines()
-------------------------------------------------------------------------
"self.n_existing = out
"
-------------------------------------------------------------------------
"Recom
PRs: 70426, 71134"
-------------------------------------------------------------------------
=========================================================================
"self.n_existing = re.sub(pattern, '', self.n_existing, 1)
"
-------------------------------------------------------------------------
"self.n_existing = re.sub(pattern, '', self.n_existing, count=1)"
-------------------------------------------------------------------------
"self.n_existing = re.sub(pattern, '', self.n_existing, 1)
"
-------------------------------------------------------------------------
"Recom
PRs: 70426, 71134"
-------------------------------------------------------------------------
=========================================================================
"fileh = open(backup_file, 'wb')
fileh = open(self.b_cron_file, 'wb')
fileh = os.fdopen(filed, 'wb')
h.write(to_bytes(self.render()))
"
-------------------------------------------------------------------------
"```python
fileh = open(backup_file, 'wb')
fileh = open(self.b_cron_file, 'wb')
fileh = os.fdopen(filed, 'wb')
h.write(to_bytes(self.render()))
```"
-------------------------------------------------------------------------
"fileh = open(backup_file, 'wb')
fileh = open(self.b_cron_file, 'wb')
fileh = os.fdopen(filed, 'wb')
h.write(to_bytes(self.render()))
"
-------------------------------------------------------------------------
"Recom
PRs: 70426, 71134"
-------------------------------------------------------------------------
=========================================================================
"diff['before'] = crontab.n_existing
"
-------------------------------------------------------------------------
"```python
def main():

    if module._diff:
        diff = dict()
        if crontab.cron_file:
            diff['before'] = crontab.n_existing
        else:
```"
-------------------------------------------------------------------------
"diff['before'] = crontab.n_existing
"
-------------------------------------------------------------------------
"Recom
PRs: 70426, 71134"
-------------------------------------------------------------------------
=========================================================================
"if not changed and crontab.n_existing != '':
    if not (crontab.n_existing.endswith('\r') or crontab.n_existing.endswith('\n')):
"
-------------------------------------------------------------------------
"```python
if changed or crontab.n_existing == '' or (not crontab.n_existing.endswith('\r') and not crontab.n_existing.endswith('\n')):
```"
-------------------------------------------------------------------------
"if not changed and crontab.n_existing != '':
    if not (crontab.n_existing.endswith('\r') or crontab.n_existing.endswith('\n')):
"
-------------------------------------------------------------------------
"Recom
PRs: 70426, 71134"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.common.collections import is_sequence, Mapping
def _fail_on_undefined(data):
""""""Recursively find an undefined value in a nested data structure
and properly raise the undefined exception.
""""""
if isinstance(data, Mapping):
    for value in data.values():
        _fail_on_undefined(value)
elif is_sequence(data):
    for item in data:
        _fail_on_undefined(item)
else:
    if isinstance(data, StrictUndefined):
        # To actually raise the undefined exception we need to
        # access the undefined object otherwise the exception would
        # be raised on the next access which might not be properly
        # handled.
        # See https://github.com/ansible/ansible/issues/52158
        # and StrictUndefined implementation in upstream Jinja2.
        str(data)

return data


https://github.com/pallets/jinja/blob/master/src/jinja2/nativetypes.py
""""""
    out = _fail_on_undefined(head[0])
    out = u''.join([to_text(_fail_on_undefined(v)) for v in nodes])
"
-------------------------------------------------------------------------
"```python
import types
from jinja2.runtime import StrictUndefined
from ansible.module_utils._text import to_text
from ansible.module_utils.common.text.converters import container_to_text
from ansible.module_utils.six import PY2
from ansible.parsing.yaml.objects import AnsibleVaultEncryptedUnicode
from ansible.module_utils.common.collections import is_sequence, Mapping


def _fail_on_undefined(data):
    """"""Recursively find an undefined value in a nested data structure
    and properly raise the undefined exception.
    """"""
    if isinstance(data, Mapping):
        for value in data.values():
            _fail_on_undefined(value)
    elif is_sequence(data):
        for item in data:
            _fail_on_undefined(item)
    else:
        if isinstance(data, StrictUndefined):
            # To actually raise the undefined exception we need to
            # access the undefined object otherwise the exception would
            # be raised on the next access which might not be properly
            # handled.
            # See https://github.com/ansible/ansible/issues/52158
            # and StrictUndefined implementation in upstream Jinja2.
            str(data)
    return data


head = list(islice(nodes, 2))

if not head:
    return None

out = _fail_on_undefined(head[0])
out = u''.join([to_text(_fail_on_undefined(v)) for v in nodes])
```"
-------------------------------------------------------------------------
"from ansible.module_utils.common.collections import is_sequence, Mapping
"
-------------------------------------------------------------------------
"Recom
PRs: 68432, 71105"
-------------------------------------------------------------------------
=========================================================================
"# NOTE: do not add to this. This should be made a generic function for action plugins.
# This should also use the same argspec as the module instead of keeping it in sync.
"
-------------------------------------------------------------------------
"```python
import os
from __future__ import absolute_import
import ansible
from ansible.module_utils.parsing.convert_bool import convert_bool
import tempfile
from ansible.utils.hashing import hash
import ansible.errors
import stat
import os.path
import ansible.plugins.action
import traceback
import json
from ansible.module_utils._text import to_text
from ansible.module_utils.basic import AnsibleError

class ActionModule(ActionBase):
    def _sanitize_copy_invocation_secrets(self, result):
        if 'invocation' not in result:
            if self._play_context.no_log:
                result['invocation'] = ""CENSORED: no_log is set""
```"
-------------------------------------------------------------------------
"# NOTE: do not add to this. This should be made a generic function for action plugins.
# This should also use the same argspec as the module instead of keeping it in sync.
"
-------------------------------------------------------------------------
"Recom
PRs: 71033, 71069"
-------------------------------------------------------------------------
=========================================================================
"if isinstance(result['invocation'], dict):
    if 'content' in result['invocation']:
        result['invocation']['content'] = 'CENSORED: content is a no_log parameter'
    if result['invocation'].get('module_args', {}).get('content') is not None:
        result['invocation']['module_args']['content'] = 'VALUE_SPECIFIED_IN_NO_LOG_PARAMETER'
"
-------------------------------------------------------------------------
"```python
if isinstance(result['invocation'], dict):
    if 'content' in result['invocation']:
        result['invocation']['content'] = 'CENSORED: content is a no_log parameter'
    if result['invocation'].get('module_args', {}).get('content') is not None:
        result['invocation']['module_args']['content'] = 'VALUE_SPECIFIED_IN_NO_LOG_PARAMETER'
```"
-------------------------------------------------------------------------
"if isinstance(result['invocation'], dict):
    if 'content' in result['invocation']:
        result['invocation']['content'] = 'CENSORED: content is a no_log parameter'
    if result['invocation'].get('module_args', {}).get('content') is not None:
        result['invocation']['module_args']['content'] = 'VALUE_SPECIFIED_IN_NO_LOG_PARAMETER'
"
-------------------------------------------------------------------------
"Recom
PRs: 71033, 71069"
-------------------------------------------------------------------------
=========================================================================
"# NOTE: do not add to this. This should be made a generic function for action plugins.
# This should also use the same argspec as the module instead of keeping it in sync.
"
-------------------------------------------------------------------------
"```python
import os
import __future__
import ansible
import ansible.module_utils.parsing.convert_bool
import tempfile
import ansible.utils.hashing
import ansible.errors
import stat
import os.path
import ansible.plugins.action
import traceback
import json
import ansible.module_utils._text
import ansible.module_utils.basic

class ActionModule(ActionBase):
    # NOTE: do not add to this. This should be made a generic function for action plugins.
    # This should also use the same argspec as the module instead of keeping it in sync.
    if 'invocation' not in result:
        if self._play_context.no_log:
            result['invocation'] = ""CENSORED: no_log is set""
```"
-------------------------------------------------------------------------
"# NOTE: do not add to this. This should be made a generic function for action plugins.
# This should also use the same argspec as the module instead of keeping it in sync.
"
-------------------------------------------------------------------------
"Recom
PRs: 71033, 71068"
-------------------------------------------------------------------------
=========================================================================
"if isinstance(result['invocation'], dict):
    if 'content' in result['invocation']:
        result['invocation']['content'] = 'CENSORED: content is a no_log parameter'
    if result['invocation'].get('module_args', {}).get('content') is not None:
        result['invocation']['module_args']['content'] = 'VALUE_SPECIFIED_IN_NO_LOG_PARAMETER'
"
-------------------------------------------------------------------------
"if isinstance(result['invocation'], dict):
    if 'content' in result['invocation']:
        result['invocation']['content'] = 'CENSORED: content is a no_log parameter'
    if result['invocation'].get('module_args', {}).get('content') is not None:
        result['invocation']['module_args']['content'] = 'VALUE_SPECIFIED_IN_NO_LOG_PARAMETER'"
-------------------------------------------------------------------------
"if isinstance(result['invocation'], dict):
    if 'content' in result['invocation']:
        result['invocation']['content'] = 'CENSORED: content is a no_log parameter'
    if result['invocation'].get('module_args', {}).get('content') is not None:
        result['invocation']['module_args']['content'] = 'VALUE_SPECIFIED_IN_NO_LOG_PARAMETER'
"
-------------------------------------------------------------------------
"Recom
PRs: 71033, 71068"
-------------------------------------------------------------------------
=========================================================================
"# NOTE: do not add to this. This should be made a generic function for action plugins.
# This should also use the same argspec as the module instead of keeping it in sync.
"
-------------------------------------------------------------------------
"```python
import os
import __future__
import ansible
import ansible.module_utils.parsing.convert_bool
import tempfile
import ansible.utils.hashing
import ansible.errors
import stat
import os.path
import ansible.plugins.action
import traceback
import json
import ansible.module_utils._text
import ansible.module_utils.basic

class ActionModule(ActionBase):
    # NOTE: do not add to this. This should be made a generic function for action plugins.
    # This should also use the same argspec as the module instead of keeping it in sync.
    def generic_function(self):
        if 'invocation' not in result:
            if self._play_context.no_log:
                result['invocation'] = ""CENSORED: no_log is set""
```"
-------------------------------------------------------------------------
"# NOTE: do not add to this. This should be made a generic function for action plugins.
# This should also use the same argspec as the module instead of keeping it in sync.
"
-------------------------------------------------------------------------
"Recom
PRs: 71033, 71067"
-------------------------------------------------------------------------
=========================================================================
"if isinstance(result['invocation'], dict):
    if 'content' in result['invocation']:
        result['invocation']['content'] = 'CENSORED: content is a no_log parameter'
    if result['invocation'].get('module_args', {}).get('content') is not None:
        result['invocation']['module_args']['content'] = 'VALUE_SPECIFIED_IN_NO_LOG_PARAMETER'
"
-------------------------------------------------------------------------
"```python
if isinstance(result['invocation'], dict):
    if 'content' in result['invocation']:
        result['invocation']['content'] = 'CENSORED: content is a no_log parameter'
    if result['invocation'].get('module_args', {}).get('content') is not None:
        result['invocation']['module_args']['content'] = 'VALUE_SPECIFIED_IN_NO_LOG_PARAMETER'
```"
-------------------------------------------------------------------------
"if isinstance(result['invocation'], dict):
    if 'content' in result['invocation']:
        result['invocation']['content'] = 'CENSORED: content is a no_log parameter'
    if result['invocation'].get('module_args', {}).get('content') is not None:
        result['invocation']['module_args']['content'] = 'VALUE_SPECIFIED_IN_NO_LOG_PARAMETER'
"
-------------------------------------------------------------------------
"Recom
PRs: 71033, 71067"
-------------------------------------------------------------------------
=========================================================================
"if words[2] == 'brd':
    broadcast = words[3]
"
-------------------------------------------------------------------------
"```python
if len(words) > 3 and words[2] == 'brd':
    broadcast = words[3]
```"
-------------------------------------------------------------------------
"if words[2] == 'brd':
    broadcast = words[3]
"
-------------------------------------------------------------------------
"Recom
PRs: 64528, 71065"
-------------------------------------------------------------------------
=========================================================================
"if words[2] == 'brd':
    broadcast = words[3]
"
-------------------------------------------------------------------------
"```python
if len(words) > 3 and words[2] == 'brd':
    broadcast = words[3]
```"
-------------------------------------------------------------------------
"if words[2] == 'brd':
    broadcast = words[3]
"
-------------------------------------------------------------------------
"Recom
PRs: 64528, 71064"
-------------------------------------------------------------------------
=========================================================================
"if run_uid != 0 and (fut_group != run_group or fut_gid != run_gid) and fut_gid not in groups:
"
-------------------------------------------------------------------------
"```python
if run_uid != 0 and (fut_group != run_group or fut_gid != run_gid) and fut_gid not in groups:
```"
-------------------------------------------------------------------------
"if run_uid != 0 and (fut_group != run_group or fut_gid != run_gid) and fut_gid not in groups:
"
-------------------------------------------------------------------------
"Recom
PRs: 65666, 71002"
-------------------------------------------------------------------------
=========================================================================
"if run_uid != 0 and (fut_group != run_group or fut_gid != run_gid) and fut_gid not in groups:
"
-------------------------------------------------------------------------
"```python
if run_uid != 0 and (fut_group != run_group or fut_gid != run_gid) and fut_gid not in groups:
```"
-------------------------------------------------------------------------
"if run_uid != 0 and (fut_group != run_group or fut_gid != run_gid) and fut_gid not in groups:
"
-------------------------------------------------------------------------
"Recom
PRs: 65666, 71001"
-------------------------------------------------------------------------
=========================================================================
"return collection_output
"
-------------------------------------------------------------------------
"```python
return collection_output
```"
-------------------------------------------------------------------------
"return collection_output
"
-------------------------------------------------------------------------
"Recom
PRs: 70524, 71000"
-------------------------------------------------------------------------
=========================================================================
"
if requirement.api is None and requirement.b_path and os.path.isfile(requirement.b_path):
    shutil.copy(requirement.b_path, to_bytes(dest_path, errors='surrogate_or_strict'))
elif requirement.api is None and requirement.b_path:
    temp_path = to_text(b_temp_path, errors='surrogate_or_string')
    scm_build_path = os.path.join(temp_path, 'tmp_build-%s' % collection_filename)
    os.makedirs(to_bytes(scm_build_path, errors='surrogate_or_strict'), mode=0o0755)
    temp_download_path = build_collection(os.path.join(temp_path, name), scm_build_path, True)
    shutil.move(to_bytes(temp_download_path, errors='surrogate_or_strict'), to_bytes(dest_path, errors='surrogate_or_strict'))
else:
    b_temp_download_path = requirement.download(b_temp_path)
    shutil.move(b_temp_download_path, to_bytes(dest_path, errors='surrogate_or_strict'))

"
-------------------------------------------------------------------------
"if requirement.api is None and requirement.b_path and os.path.isfile(requirement.b_path):
    shutil.copy(requirement.b_path, to_bytes(dest_path, errors='surrogate_or_strict'))
elif requirement.api is None and requirement.b_path:
    temp_path = to_text(b_temp_path, errors='surrogate_or_string')
    scm_build_path = os.path.join(temp_path, 'tmp_build-%s' % collection_filename)
    os.makedirs(to_bytes(scm_build_path, errors='surrogate_or_strict'), mode=0o0755)
    temp_download_path = build_collection(os.path.join(temp_path, name), scm_build_path, True)
    shutil.move(to_bytes(temp_download_path, errors='surrogate_or_strict'), to_bytes(dest_path, errors='surrogate_or_strict'))
else:
    b_temp_download_path = requirement.download(b_temp_path)
    shutil.move(b_temp_download_path, to_bytes(dest_path, errors='surrogate_or_strict'))"
-------------------------------------------------------------------------
"
if requirement.api is None and requirement.b_path and os.path.isfile(requirement.b_path):
    shutil.copy(requirement.b_path, to_bytes(dest_path, errors='surrogate_or_strict'))
elif requirement.api is None and requirement.b_path:
    temp_path = to_text(b_temp_path, errors='surrogate_or_string')
    scm_build_path = os.path.join(temp_path, 'tmp_build-%s' % collection_filename)
    os.makedirs(to_bytes(scm_build_path, errors='surrogate_or_strict'), mode=0o0755)
    temp_download_path = build_collection(os.path.join(temp_path, name), scm_build_path, True)
    shutil.move(to_bytes(temp_download_path, errors='surrogate_or_strict'), to_bytes(dest_path, errors='surrogate_or_strict'))
else:
    b_temp_download_path = requirement.download(b_temp_path)
    shutil.move(b_temp_download_path, to_bytes(dest_path, errors='surrogate_or_strict'))

"
-------------------------------------------------------------------------
"Recom
PRs: 70524, 71000"
-------------------------------------------------------------------------
=========================================================================
"# TODO: play context has logic to update the connection for 'smart'
# (really paramiko), eventually this should move to task object itself.
"
-------------------------------------------------------------------------
"```python
# TODO: play context has logic to update the connection for 'smart'
# (really paramiko), eventually this should move to task object itself.
```"
-------------------------------------------------------------------------
"# TODO: play context has logic to update the connection for 'smart'
# (really paramiko), eventually this should move to task object itself.
"
-------------------------------------------------------------------------
"Recom
PRs: 70736, 70999"
-------------------------------------------------------------------------
=========================================================================
"check_mode_markers:
  name: Show markers when running in check mode
  description:
  - Toggle to control displaying markers when running in check mode.
  - ""The markers are C(DRY RUN) at the beggining and ending of playbook execution (when calling C(ansible-playbook --check))
  and C(CHECK MODE) as a suffix at every play and task that is run in check mode.""
  type: bool
  default: no
  version_added: '2.9'
  env:
    - name: ANSIBLE_CHECK_MODE_MARKERS
  ini:
    - key: check_mode_markers
      section: defaults
"
-------------------------------------------------------------------------
"```python
class ModuleDocFragment(object):
    - key: show_per_host_start
      section: defaults
    version_added: '2.9'
    '''
Required dependency: __future__,
Original metadata: [Backport/2.10/70228] default_callback: Move 'check_mode_markers' in doc_fragments (#70228)
--Callback plugin dense, yaml, and debug implement 'check_mode_markers'
so moving documentation to default callback doc_fragments.
```"
-------------------------------------------------------------------------
"check_mode_markers:
  name: Show markers when running in check mode
  description:
  - Toggle to control displaying markers when running in check mode.
  - ""The markers are C(DRY RUN) at the beggining and ending of playbook execution (when calling C(ansible-playbook --check))
  and C(CHECK MODE) as a suffix at every play and task that is run in check mode.""
  type: bool
  default: no
  version_added: '2.9'
  env:
    - name: ANSIBLE_CHECK_MODE_MARKERS
  ini:
    - key: check_mode_markers
      section: defaults
"
-------------------------------------------------------------------------
"Recom
PRs: 70228, 70989"
-------------------------------------------------------------------------
=========================================================================
"if mode is None:
    return changed

"
-------------------------------------------------------------------------
"```python
if mode is None:
    return changed
```"
-------------------------------------------------------------------------
"if mode is None:
    return changed

"
-------------------------------------------------------------------------
"Recom
PRs: 70976, 70985"
-------------------------------------------------------------------------
=========================================================================
"str(version_added_raw or '0.0'),
ion_added = version_added_raw or '0.0'
elf._is_new_module() or version_added != 'historical':
# already reported during schema validation, except:
if version_added == 'historical':
    self.reporter.error(
        path=self.object_path,
        code='module-invalid-version-added',
        msg='version_added is not a valid version number: %r. Error: %s' % (version_added, e)
    )
"
-------------------------------------------------------------------------
"```python
str(version_added_raw or '0.0'),
version_added = version_added_raw or '0.0'
self._is_new_module() or version_added != 'historical':
# already reported during schema validation, except:
if version_added == 'historical':
    self.reporter.error(
        path=self.object_path,
        code='module-invalid-version-added',
        msg='version_added is not a valid version number: %r. Error: %s' % (version_added, e)
    )
```"
-------------------------------------------------------------------------
"str(version_added_raw or '0.0'),
ion_added = version_added_raw or '0.0'
elf._is_new_module() or version_added != 'historical':
# already reported during schema validation, except:
if version_added == 'historical':
    self.reporter.error(
        path=self.object_path,
        code='module-invalid-version-added',
        msg='version_added is not a valid version number: %r. Error: %s' % (version_added, e)
    )
"
-------------------------------------------------------------------------
"Recom
PRs: 70869, 70947"
-------------------------------------------------------------------------
=========================================================================
"# already reported during schema validation
"
-------------------------------------------------------------------------
"```python
             except ValueError as e:
                 continue

             if collection_name != self.collection_name:
                 return
```"
-------------------------------------------------------------------------
"# already reported during schema validation
"
-------------------------------------------------------------------------
"Recom
PRs: 70869, 70947"
-------------------------------------------------------------------------
=========================================================================
"from functools import partial
"
-------------------------------------------------------------------------
from functools import partial
-------------------------------------------------------------------------
"from functools import partial
"
-------------------------------------------------------------------------
"Recom
PRs: 70869, 70947"
-------------------------------------------------------------------------
=========================================================================
"def version_added(v, error_code='version-added-invalid', accept_historical=False):
"
-------------------------------------------------------------------------
"```python
def version_added(v):
    if 'version_added' in v:
        version_added = v.get('version_added')
        if isinstance(version_added, string_types):
```"
-------------------------------------------------------------------------
"def version_added(v, error_code='version-added-invalid', accept_historical=False):
"
-------------------------------------------------------------------------
"Recom
PRs: 70869, 70947"
-------------------------------------------------------------------------
=========================================================================
"if version_added == 'historical' and accept_historical:
    return v
"
-------------------------------------------------------------------------
"```python
if v.get('version_added') == 'historical' and accept_historical:
    return v
```"
-------------------------------------------------------------------------
"if version_added == 'historical' and accept_historical:
    return v
"
-------------------------------------------------------------------------
"Recom
PRs: 70869, 70947"
-------------------------------------------------------------------------
=========================================================================
"error_code=error_code)
"
-------------------------------------------------------------------------
"```python
error_code = error_code
```"
-------------------------------------------------------------------------
"error_code=error_code)
"
-------------------------------------------------------------------------
"Recom
PRs: 70869, 70947"
-------------------------------------------------------------------------
=========================================================================
"error_code=error_code)
"
-------------------------------------------------------------------------
"if 'error_code' in v:
    error_code = v['error_code']
else:
    error_code = None"
-------------------------------------------------------------------------
"error_code=error_code)
"
-------------------------------------------------------------------------
"Recom
PRs: 70869, 70947"
-------------------------------------------------------------------------
=========================================================================
"}, partial(version_added, error_code='option-invalid-version-added')),
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.common.collections import Schema
from ansible.module_utils.common.text import string_types
from __future__ import absolute_import

def list_dict_option_schema(for_collection):
    option_version_added = Schema(
        All({
            'suboptions': Any(None, *[{str_type: Self} for str_type in string_types]),
        }),
        partial(version_added, error_code='option-invalid-version-added')
    )
```"
-------------------------------------------------------------------------
"}, partial(version_added, error_code='option-invalid-version-added')),
"
-------------------------------------------------------------------------
"Recom
PRs: 70869, 70947"
-------------------------------------------------------------------------
=========================================================================
"Schema(partial(version_added, error_code='option-invalid-version-added')),
"
-------------------------------------------------------------------------
"Schema(partial(version_added, error_code='option-invalid-version-added'))"
-------------------------------------------------------------------------
"Schema(partial(version_added, error_code='option-invalid-version-added')),
"
-------------------------------------------------------------------------
"Recom
PRs: 70869, 70947"
-------------------------------------------------------------------------
=========================================================================
"Schema({any_string_types: partial(version_added, error_code='option-invalid-version-added')}),
"
-------------------------------------------------------------------------
"Schema({any_string_types: partial(version_added, error_code='option-invalid-version-added')})"
-------------------------------------------------------------------------
"Schema({any_string_types: partial(version_added, error_code='option-invalid-version-added')}),
"
-------------------------------------------------------------------------
"Recom
PRs: 70869, 70947"
-------------------------------------------------------------------------
=========================================================================
"All(
    Schema(
        doc_schema_dict,
        extra=PREVENT_EXTRA
    ),
    partial(version_added, error_code='module-invalid-version-added', accept_historical=not for_collection),
)
"
-------------------------------------------------------------------------
"```python
All(
    Schema(
        doc_schema_dict,
        extra=PREVENT_EXTRA
    ),
    partial(version_added, error_code='module-invalid-version-added', accept_historical=not for_collection),
)
```  "
-------------------------------------------------------------------------
"All(
    Schema(
        doc_schema_dict,
        extra=PREVENT_EXTRA
    ),
    partial(version_added, error_code='module-invalid-version-added', accept_historical=not for_collection),
)
"
-------------------------------------------------------------------------
"Recom
PRs: 70869, 70947"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_bytes, to_native, to_text
"
-------------------------------------------------------------------------
"```python
# import module snippets
from ansible.module_utils._text import to_bytes, to_native, to_text
from ansible.module_utils.basic import AnsibleModule

 
def write_changes(module, b_lines, dest):
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes, to_native, to_text
"
-------------------------------------------------------------------------
"Recom
PRs: 70846, 70945"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg='Error creating %s (%s)' % (to_text(b_destpath), to_text(e)))
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg='Error creating %s (%s)' % (ansible.module_utils._text.to_text(b_destpath), ansible.module_utils._text.to_text(e)))
```"
-------------------------------------------------------------------------
"module.fail_json(msg='Error creating %s (%s)' % (to_text(b_destpath), to_text(e)))
"
-------------------------------------------------------------------------
"Recom
PRs: 70846, 70945"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_bytes, to_native, to_text
"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes, to_native, to_text"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes, to_native, to_text
"
-------------------------------------------------------------------------
"Recom
PRs: 70846, 70944"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg='Error creating %s (%s)' % (to_text(b_destpath), to_text(e)))
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg='Error creating %s (%s)' % (ansible.module_utils._text.to_text(b_destpath), ansible.module_utils._text.to_text(e)))
```"
-------------------------------------------------------------------------
"module.fail_json(msg='Error creating %s (%s)' % (to_text(b_destpath), to_text(e)))
"
-------------------------------------------------------------------------
"Recom
PRs: 70846, 70944"
-------------------------------------------------------------------------
=========================================================================
"'void': '-r {delay_min} ""{message}""',
"
-------------------------------------------------------------------------
"    'void': '-r {delay_min} ""{message}""',"
-------------------------------------------------------------------------
"'void': '-r {delay_min} ""{message}""',
"
-------------------------------------------------------------------------
"Recom
PRs: 70704, 70917"
-------------------------------------------------------------------------
=========================================================================
"'void': '-r {delay_min} ""{message}""',
"
-------------------------------------------------------------------------
"SHUTDOWN_COMMAND_ARGS = {
    'void': '-r {delay_min} ""{message}""',
}"
-------------------------------------------------------------------------
"'void': '-r {delay_min} ""{message}""',
"
-------------------------------------------------------------------------
"Recom
PRs: 70704, 70916"
-------------------------------------------------------------------------
=========================================================================
"if value is None:
    return value  # let schema checks handle
    if not isinstance(line, string_types):
        continue  # let schema checks handle
return value

"
-------------------------------------------------------------------------
"```python
if value is None:
    return value  # let schema checks handle
    if not isinstance(line, string_types):
        continue  # let schema checks handle
return value
```  "
-------------------------------------------------------------------------
"if value is None:
    return value  # let schema checks handle
    if not isinstance(line, string_types):
        continue  # let schema checks handle
return value

"
-------------------------------------------------------------------------
"Recom
PRs: 70507, 70873"
-------------------------------------------------------------------------
=========================================================================
"# Instantiate our ResultsCollector for handling results as
# they come in. Ansible expects this to be one of its main
# display outlets.
callback = ResultsCollector()

# Instantiate task queue manager, which takes care of forking
# and setting up all objects to iterate over host list and tasks.
# IMPORTANT: This also adds library dirs paths to the module loader
# IMPORTANT: and so it must be initialized before calling `Play.load()`.
tqm = TaskQueueManager(
    inventory=inventory,
    variable_manager=variable_manager,
    loader=loader,
    passwords=passwords,
    stdout_callback=callback,
)

"
-------------------------------------------------------------------------
"```python
# Instantiate our ResultsCollector for handling results as
# they come in. Ansible expects this to be one of its main
# display outlets.
callback = ResultsCollector()

# Instantiate task queue manager, which takes care of forking
# and setting up all objects to iterate over host list and tasks.
# IMPORTANT: This also adds library dirs paths to the module loader
# IMPORTANT: and so it must be initialized before calling `Play.load()`.
tqm = TaskQueueManager(
    inventory=inventory,
    variable_manager=variable_manager,
    loader=loader,
    passwords=passwords,
    stdout_callback=callback,
)
```"
-------------------------------------------------------------------------
"loader = DataLoader()  # Takes care of finding and reading yaml, json and ini files
passwords = dict(vault_pass='secret')
# Instantiate our ResultsCollectorJSONCallback for handling results as they come in. Ansible expects this to be one of its main display outlets
results_callback = ResultsCollectorJSONCallback()
# create inventory, use path to host config file as source or hosts in a comma separated string

# variable manager takes care of merging all the different sources to give you a unified view of variables available in each context
# instantiate task queue manager, which takes care of forking and setting up all objects to iterate over host list and tasks
"
-------------------------------------------------------------------------
"Recom
PRs: 70842, 70851"
-------------------------------------------------------------------------
=========================================================================
"# Instantiate our ResultsCollector for handling results as
# they come in. Ansible expects this to be one of its main
# display outlets.
callback = ResultsCollector()

# Instantiate task queue manager, which takes care of forking
# and setting up all objects to iterate over host list and tasks.
# IMPORTANT: This also adds library dirs paths to the module loader
# IMPORTANT: and so it must be initialized before calling `Play.load()`.
tqm = TaskQueueManager(
    inventory=inventory,
    variable_manager=variable_manager,
    loader=loader,
    passwords=passwords,
    stdout_callback=callback,
)

"
-------------------------------------------------------------------------
"```python
# Instantiate our ResultsCollector for handling results as
# they come in. Ansible expects this to be one of its main
# display outlets.
callback = ResultsCollector()

# Instantiate task queue manager, which takes care of forking
# and setting up all objects to iterate over host list and tasks.
# IMPORTANT: This also adds library dirs paths to the module loader
# IMPORTANT: and so it must be initialized before calling `Play.load()`.
tqm = TaskQueueManager(
    inventory=inventory,
    variable_manager=variable_manager,
    loader=loader,
    passwords=passwords,
    stdout_callback=callback,
)
```"
-------------------------------------------------------------------------
"loader = DataLoader()  # Takes care of finding and reading yaml, json and ini files
passwords = dict(vault_pass='secret')
# Instantiate our ResultsCollectorJSONCallback for handling results as they come in. Ansible expects this to be one of its main display outlets
results_callback = ResultsCollectorJSONCallback()
# create inventory, use path to host config file as source or hosts in a comma separated string

# variable manager takes care of merging all the different sources to give you a unified view of variables available in each context
# instantiate task queue manager, which takes care of forking and setting up all objects to iterate over host list and tasks
"
-------------------------------------------------------------------------
"Recom
PRs: 70445, 70850"
-------------------------------------------------------------------------
=========================================================================
"# use ansible.legacy.normal to allow (historic) local action_plugins/ override without collections search
handler_name = 'ansible.legacy.normal'
"
-------------------------------------------------------------------------
"# use ansible.legacy.normal to allow (historic) local action_plugins/ override without collections search
handler_name = 'ansible.legacy.normal'"
-------------------------------------------------------------------------
"# use ansible.legacy.normal to allow (historic) local action_plugins/ override without collections search
handler_name = 'ansible.legacy.normal'
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"split_module_name = module_name.split('.')
collection_name = '.'.join(split_module_name[0:2]) if len(split_module_name) > 2 else ''
leaf_module_name = resource_from_fqcr(module_name)

"
-------------------------------------------------------------------------
"```python
split_module_name = module_name.split('.')
collection_name = '.'.join(split_module_name[0:2]) if len(split_module_name) > 2 else ''
leaf_module_name = resource_from_fqcr(module_name)
```"
-------------------------------------------------------------------------
"split_module_name = module_name.split('.')
collection_name = '.'.join(split_module_name[0:2]) if len(split_module_name) > 2 else ''
leaf_module_name = resource_from_fqcr(module_name)

"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"rewrite_collection_names = ['ansible.builtin', 'ansible.legacy', '']
# NB: we only rewrite the module if it's not being called by the user (eg, an action calling something else)
# and if it's unqualified or FQ to a builtin
if leaf_module_name in ('stat', 'file', 'copy', 'ping') and \
        collection_name in rewrite_collection_names and self._task.action != module_name:
    module_name = '%s.win_%s' % (win_collection, leaf_module_name)
elif leaf_module_name == 'async_status' and collection_name in rewrite_collection_names:
    module_name = '%s.%s' % (win_collection, leaf_module_name)

# TODO: move this tweak down to the modules, not extensible here
if leaf_module_name in ['win_stat', 'win_file', 'win_copy', 'slurp'] and module_args and \
"
-------------------------------------------------------------------------
"```python
# Rewrite Collection Names
rewrite_collection_names = ['ansible.builtin', 'ansible.legacy', '']
# NB: we only rewrite the module if it's not being called by the user (eg, an action calling something else)
# and if it's unqualified or FQ to a builtin
if leaf_module_name in ('stat', 'file', 'copy', 'ping') and \
        collection_name in rewrite_collection_names and self._task.action != module_name:
    module_name = '%s.win_%s' % (win_collection, leaf_module_name)
elif leaf_module_name == 'async_status' and collection_name in rewrite_collection_names:
    module_name = '%s.%s' % (win_collection, leaf_module_name)

# To-Do Comment
# TODO: move this tweak down to the modules, not extensible here
if leaf_module_name in ['win_stat', 'win_file', 'win_copy', 'slurp'] and module_args and \
```"
-------------------------------------------------------------------------
"rewrite_collection_names = ['ansible.builtin', 'ansible.legacy', '']
# NB: we only rewrite the module if it's not being called by the user (eg, an action calling something else)
# and if it's unqualified or FQ to a builtin
if leaf_module_name in ('stat', 'file', 'copy', 'ping') and \
        collection_name in rewrite_collection_names and self._task.action != module_name:
    module_name = '%s.win_%s' % (win_collection, leaf_module_name)
elif leaf_module_name == 'async_status' and collection_name in rewrite_collection_names:
    module_name = '%s.%s' % (win_collection, leaf_module_name)

# TODO: move this tweak down to the modules, not extensible here
if leaf_module_name in ['win_stat', 'win_file', 'win_copy', 'slurp'] and module_args and \
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"mystat = self._execute_module(module_name='ansible.legacy.stat', module_args=module_args, task_vars=all_vars,
"
-------------------------------------------------------------------------
"mystat = self._execute_module(module_name='ansible.legacy.stat', module_args=module_args, task_vars=all_vars)"
-------------------------------------------------------------------------
"mystat = self._execute_module(module_name='ansible.legacy.stat', module_args=module_args, task_vars=all_vars,
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"(async_module_style, shebang, async_module_data, async_module_path) = self._configure_module(
    module_name='ansible.legacy.async_wrapper', module_args=dict(), task_vars=task_vars)
"
-------------------------------------------------------------------------
"```python
(async_module_style, shebang, async_module_data, async_module_path) = self._configure_module(
    module_name='ansible.legacy.async_wrapper', module_args=dict(), task_vars=task_vars)
```"
-------------------------------------------------------------------------
"(async_module_style, shebang, async_module_data, async_module_path) = self._configure_module(
    module_name='ansible.legacy.async_wrapper', module_args=dict(), task_vars=task_vars)
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"peek_result = self._execute_module(
    module_name='ansible.legacy.file', module_args=dict(path=destination, _diff_peek=True),
    task_vars=task_vars, persist_files=True)
"
-------------------------------------------------------------------------
"```python
peek_result = self._execute_module(
    module_name='ansible.legacy.file', module_args=dict(path=destination, _diff_peek=True),
    task_vars=task_vars, persist_files=True)
```"
-------------------------------------------------------------------------
"peek_result = self._execute_module(
    module_name='ansible.legacy.file', module_args=dict(path=destination, _diff_peek=True),
    task_vars=task_vars, persist_files=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"dest_result = self._execute_module(
    module_name='ansible.legacy.slurp', module_args=dict(path=destination),
    task_vars=task_vars, persist_files=True)
"
-------------------------------------------------------------------------
"```python
dest_result = self._execute_module(
    module_name='ansible.legacy.slurp', module_args={'path': destination},
    task_vars=task_vars, persist_files=True)
```"
-------------------------------------------------------------------------
"dest_result = self._execute_module(
    module_name='ansible.legacy.slurp', module_args=dict(path=destination),
    task_vars=task_vars, persist_files=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"# call assemble via ansible.legacy to allow library/ overrides of the module without collection search
result.update(self._execute_module(module_name='ansible.legacy.assemble', task_vars=task_vars))
"
-------------------------------------------------------------------------
"```python
# call assemble via ansible.legacy to allow library/ overrides of the module without collection search
result.update(self._execute_module(module_name='ansible.legacy.assemble', task_vars=task_vars))
```"
-------------------------------------------------------------------------
"# call assemble via ansible.legacy to allow library/ overrides of the module without collection search
result.update(self._execute_module(module_name='ansible.legacy.assemble', task_vars=task_vars))
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"res = self._execute_module(module_name='ansible.legacy.copy', module_args=new_module_args, task_vars=task_vars)
result.update(self._execute_module(module_name='ansible.legacy.file', module_args=new_module_args, task_vars=task_vars))
"
-------------------------------------------------------------------------
"```python
res = self._execute_module(module_name='ansible.legacy.copy', module_args=new_module_args, task_vars=task_vars)
result.update(self._execute_module(module_name='ansible.legacy.file', module_args=new_module_args, task_vars=task_vars))
```"
-------------------------------------------------------------------------
"res = self._execute_module(module_name='ansible.legacy.copy', module_args=new_module_args, task_vars=task_vars)
result.update(self._execute_module(module_name='ansible.legacy.file', module_args=new_module_args, task_vars=task_vars))
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"status = self._execute_module(module_name='ansible.legacy.async_status', task_vars=task_vars,
"
-------------------------------------------------------------------------
"```python
status = self._execute_module(module_name='ansible.legacy.async_status', task_vars=task_vars,
```"
-------------------------------------------------------------------------
"status = self._execute_module(module_name='ansible.legacy.async_status', task_vars=task_vars,
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"# explicitly call `ansible.legacy.command` for backcompat to allow library/ override of `command` while not allowing
# collections search for an unqualified `command` module
results = merge_hash(results, self._execute_module(module_name='ansible.legacy.command', task_vars=task_vars, wrap_async=wrap_async))
"
-------------------------------------------------------------------------
"```python
results = merge_hash(results, self._execute_module(module_name='ansible.legacy.command', task_vars=task_vars, wrap_async=wrap_async))
```  "
-------------------------------------------------------------------------
"# explicitly call `ansible.legacy.command` for backcompat to allow library/ override of `command` while not allowing
# collections search for an unqualified `command` module
results = merge_hash(results, self._execute_module(module_name='ansible.legacy.command', task_vars=task_vars, wrap_async=wrap_async))
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"module_return = self._execute_module(module_name='ansible.legacy.copy', module_args=new_module_args, task_vars=task_vars)
"
-------------------------------------------------------------------------
"```python
module_return = self._execute_module(module_name='copy', module_args=new_module_args, task_vars=task_vars)
```"
-------------------------------------------------------------------------
"module_return = self._execute_module(module_name='ansible.legacy.copy', module_args=new_module_args, task_vars=task_vars)
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"module_return = self._execute_module(module_name='ansible.legacy.file', module_args=new_module_args, task_vars=task_vars)
"
-------------------------------------------------------------------------
"```python
module_return = self._execute_module(module_name='ansible.file', module_args=new_module_args, task_vars=task_vars)
```"
-------------------------------------------------------------------------
"module_return = self._execute_module(module_name='ansible.legacy.file', module_args=new_module_args, task_vars=task_vars)
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"result.update(self._execute_module(module_name='ansible.legacy.copy', task_vars=task_vars))
"
-------------------------------------------------------------------------
"result.update(self._execute_module(module_name='ansible.plugins.action.copy', task_vars=task_vars))"
-------------------------------------------------------------------------
"result.update(self._execute_module(module_name='ansible.legacy.copy', task_vars=task_vars))
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"module_return = self._execute_module(module_name='ansible.legacy.file', module_args=new_module_args, task_vars=task_vars)
"
-------------------------------------------------------------------------
"module_return = self._execute_module(module_name='ansible.plugins.action.gather_facts', module_args=new_module_args, task_vars=task_vars)"
-------------------------------------------------------------------------
"module_return = self._execute_module(module_name='ansible.legacy.file', module_args=new_module_args, task_vars=task_vars)
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"module_return = self._execute_module(module_name='ansible.legacy.file', module_args=new_module_args, task_vars=task_vars)
"
-------------------------------------------------------------------------
"```python
module_return = self._execute_module(module_name='ansible.legacy.file', module_args=new_module_args, task_vars=task_vars, units_compat=False, ansible_template=False, __future__=False, units_compat_mock=False, ansible_playbook_task=False, units_mock_loader=False, ansible=False, ansible_plugins_action_gather_facts=False, ansible_executor_module_common=False)
```"
-------------------------------------------------------------------------
"module_return = self._execute_module(module_name='ansible.legacy.file', module_args=new_module_args, task_vars=task_vars)
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"slurpres = self._execute_module(module_name='ansible.legacy.slurp', module_args=dict(src=source), task_vars=task_vars)
"
-------------------------------------------------------------------------
"slurpres = self._execute_module(module_name='ansible.legacy.slurp', module_args=dict(src=source), task_vars=task_vars)"
-------------------------------------------------------------------------
"slurpres = self._execute_module(module_name='ansible.legacy.slurp', module_args=dict(src=source), task_vars=task_vars)
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"if fact_module not in ['ansible.legacy.setup', 'ansible.builtin.setup', 'setup']:
"
-------------------------------------------------------------------------
"```python
if fact_module not in ['ansible.legacy.setup', 'ansible.builtin.setup', 'setup']:
```"
-------------------------------------------------------------------------
"if fact_module not in ['ansible.legacy.setup', 'ansible.builtin.setup', 'setup']:
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"modules.extend([connection_map.get(network_os or self._connection._load_name, 'ansible.legacy.setup')])
"
-------------------------------------------------------------------------
"```python
modules.extend([connection_map.get(network_os or self._connection._load_name, 'ansible.legacy.setup')])
```"
-------------------------------------------------------------------------
"modules.extend([connection_map.get(network_os or self._connection._load_name, 'ansible.legacy.setup')])
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"res = self._execute_module(module_name='ansible.legacy.async_status', module_args=poll_args, task_vars=task_vars, wrap_async=False)
"
-------------------------------------------------------------------------
"```python
res = self._execute_module(module_name='ansible.legacy.async_status', module_args=poll_args, task_vars=task_vars)
```"
-------------------------------------------------------------------------
"res = self._execute_module(module_name='ansible.legacy.async_status', module_args=poll_args, task_vars=task_vars, wrap_async=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"# FIXME: is this still accurate with gather_facts etc, or does it need support for FQ and other names?
"
-------------------------------------------------------------------------
"# TODO: Check if this is still accurate with gather_facts etc, or if it requires support for FQ and other names."
-------------------------------------------------------------------------
"# FIXME: is this still accurate with gather_facts etc, or does it need support for FQ and other names?
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"BUILTIN_PKG_MGR_MODULES = set(['apk', 'apt', 'dnf', 'homebrew', 'installp', 'macports', 'opkg', 'portage', 'pacman',
                               'pkg5', 'pkgin', 'pkgng', 'sorcery', 'svr4pkg', 'swdepot', 'swupd', 'urpmi', 'xbps', 'yum', 'zypper'])

"
-------------------------------------------------------------------------
"BUILTIN_PKG_MGR_MODULES = set(['apk', 'apt', 'dnf', 'homebrew', 'installp', 'macports', 'opkg', 'portage', 'pacman',
                               'pkg5', 'pkgin', 'pkgng', 'sorcery', 'svr4pkg', 'swdepot', 'swupd', 'urpmi', 'xbps', 'yum', 'zypper'])"
-------------------------------------------------------------------------
"BUILTIN_PKG_MGR_MODULES = set(['apk', 'apt', 'dnf', 'homebrew', 'installp', 'macports', 'opkg', 'portage', 'pacman',
                               'pkg5', 'pkgin', 'pkgng', 'sorcery', 'svr4pkg', 'swdepot', 'swupd', 'urpmi', 'xbps', 'yum', 'zypper'])

"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"facts = self._execute_module(
    module_name='ansible.legacy.setup',
    module_args=dict(filter='ansible_pkg_mgr', gather_subset='!all'),
    task_vars=task_vars)
if not self._shared_loader_obj.module_loader.has_plugin(module):
"
-------------------------------------------------------------------------
"```python
facts = self._execute_module(
    module_name='ansible.legacy.setup',
    module_args=dict(filter='ansible_pkg_mgr', gather_subset='!all'),
    task_vars=task_vars)
if not self._shared_loader_obj.module_loader.has_plugin(module):
```"
-------------------------------------------------------------------------
"facts = self._execute_module(
    module_name='ansible.legacy.setup',
    module_args=dict(filter='ansible_pkg_mgr', gather_subset='!all'),
    task_vars=task_vars)
if not self._shared_loader_obj.module_loader.has_plugin(module):
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"if module in self.BUILTIN_PKG_MGR_MODULES:
    # prefix with ansible.legacy to eliminate external collisions while still allowing library/ override
    module = 'ansible.legacy.'  module

"
-------------------------------------------------------------------------
"```python
if module in self.BUILTIN_PKG_MGR_MODULES:
    # prefix with ansible.legacy to eliminate external collisions while still allowing library/ override
    module = 'ansible.legacy.' + module
```"
-------------------------------------------------------------------------
"if module in self.BUILTIN_PKG_MGR_MODULES:
    # prefix with ansible.legacy to eliminate external collisions while still allowing library/ override
    module = 'ansible.legacy.'  module

"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"# FIXME: only execute the module if we don't already have the facts we need
    module_name='ansible.legacy.setup',
"
-------------------------------------------------------------------------
"# FIXME: only execute the module if we don't already have the facts we need
module_name = 'ansible.legacy.setup'"
-------------------------------------------------------------------------
"# FIXME: only execute the module if we don't already have the facts we need
    module_name='ansible.legacy.setup',
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"# prevent collection search by calling with ansible.legacy (still allows library/ override of find)
module_name='ansible.legacy.find',
"
-------------------------------------------------------------------------
"module_name='ansible.legacy.find',"
-------------------------------------------------------------------------
"# prevent collection search by calling with ansible.legacy (still allows library/ override of find)
module_name='ansible.legacy.find',
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"# HACK: list of unqualified service manager names that are/were built-in, we'll prefix these with `ansible.legacy` to
# avoid collisions with collections search
BUILTIN_SVC_MGR_MODULES = set(['openwrt_init', 'service', 'systemd', 'sysvinit'])

"
-------------------------------------------------------------------------
"```python
BUILTIN_SVC_MGR_MODULES = set(['ansible.legacy.openwrt_init', 'ansible.legacy.service', 'ansible.legacy.systemd', 'ansible.legacy.sysvinit'])
```"
-------------------------------------------------------------------------
"# HACK: list of unqualified service manager names that are/were built-in, we'll prefix these with `ansible.legacy` to
# avoid collisions with collections search
BUILTIN_SVC_MGR_MODULES = set(['openwrt_init', 'service', 'systemd', 'sysvinit'])

"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"facts = self._execute_module(
    module_name='ansible.legacy.setup',
    module_args=dict(gather_subset='!all', filter='ansible_service_mgr'), task_vars=task_vars)
ot module or module == 'auto' or not self._shared_loader_obj.module_loader.has_plugin(module):
module = 'ansible.legacy.service'
"
-------------------------------------------------------------------------
"```python
if module == 'auto':
    self._display.debug(""Facts %s"" % facts)
    module = facts.get('ansible_facts', {}).get('ansible_service_mgr', 'auto')
if module != 'auto' and module == 'auto' or not self._shared_loader_obj.module_loader.has_plugin(module):
    module = 'ansible.legacy.service'
```"
-------------------------------------------------------------------------
"facts = self._execute_module(
    module_name='ansible.legacy.setup',
    module_args=dict(gather_subset='!all', filter='ansible_service_mgr'), task_vars=task_vars)
ot module or module == 'auto' or not self._shared_loader_obj.module_loader.has_plugin(module):
module = 'ansible.legacy.service'
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"# collection prefix known internal modules to avoid collisions from collections search, while still allowing library/ overrides
if module in self.BUILTIN_SVC_MGR_MODULES:
    module = 'ansible.legacy.'  module

"
-------------------------------------------------------------------------
"```python
# collection prefix known internal modules to avoid collisions from collections search, while still allowing library/ overrides
if module in self.BUILTIN_SVC_MGR_MODULES:
    module = 'ansible.legacy.' + module
```"
-------------------------------------------------------------------------
"# collection prefix known internal modules to avoid collisions from collections search, while still allowing library/ overrides
if module in self.BUILTIN_SVC_MGR_MODULES:
    module = 'ansible.legacy.'  module

"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"# Shell module is implemented via command with a special arg
"
-------------------------------------------------------------------------
"```python
class ActionModule(ActionBase):
     def run(self, tmp=None, task_vars=None):
         del tmp  # tmp no longer has any effect
 
         self._task.args['_uses_shell'] = True
 
         command_action = self._shared_loader_obj.action_loader.get('ansible.builtin.command',
```"
-------------------------------------------------------------------------
"# Shell module is implemented via command with a special arg
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"# call with ansible.legacy prefix to eliminate collisions with collections while still allowing local override
copy_action = self._shared_loader_obj.action_loader.get('ansible.legacy.copy',
"
-------------------------------------------------------------------------
"```python
# call with ansible.legacy prefix to eliminate collisions with collections while still allowing local override
copy_action = self._shared_loader_obj.action_loader.get('ansible.legacy.copy')
```"
-------------------------------------------------------------------------
"# call with ansible.legacy prefix to eliminate collisions with collections while still allowing local override
copy_action = self._shared_loader_obj.action_loader.get('ansible.legacy.copy',
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"# execute the unarchive module now, with the updated args (using ansible.legacy prefix to eliminate collections
# collisions with local override
result.update(self._execute_module(module_name='ansible.legacy.unarchive', module_args=new_module_args, task_vars=task_vars))
"
-------------------------------------------------------------------------
"```python
result.update(self._execute_module(module_name='ansible.legacy.unarchive', module_args=new_module_args, task_vars=task_vars))
```"
-------------------------------------------------------------------------
"# execute the unarchive module now, with the updated args (using ansible.legacy prefix to eliminate collections
# collisions with local override
result.update(self._execute_module(module_name='ansible.legacy.unarchive', module_args=new_module_args, task_vars=task_vars))
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"# call with ansible.legacy prefix to prevent collections collisions while allowing local override
raise _AnsibleActionDone(result=self._execute_module(module_name='ansible.legacy.uri',
                                                     task_vars=task_vars, wrap_async=self._task.async_val))
"
-------------------------------------------------------------------------
"```python
raise _AnsibleActionDone(result=self._execute_module(module_name='ansible.legacy.uri',
                                                     task_vars=task_vars, wrap_async=self._task.async_val))
```"
-------------------------------------------------------------------------
"# call with ansible.legacy prefix to prevent collections collisions while allowing local override
raise _AnsibleActionDone(result=self._execute_module(module_name='ansible.legacy.uri',
                                                     task_vars=task_vars, wrap_async=self._task.async_val))
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"# call with ansible.legacy prefix to prevent collections collisions while allowing local override
result.update(self._execute_module('ansible.legacy.uri', module_args=new_module_args, task_vars=task_vars, wrap_async=self._task.async_val))
"
-------------------------------------------------------------------------
"result.update(self._execute_module('ansible.legacy.uri', module_args=new_module_args, task_vars=task_vars, wrap_async=self._task.async_val))"
-------------------------------------------------------------------------
"# call with ansible.legacy prefix to prevent collections collisions while allowing local override
result.update(self._execute_module('ansible.legacy.uri', module_args=new_module_args, task_vars=task_vars, wrap_async=self._task.async_val))
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"ping_result = self._execute_module(module_name='ansible.legacy.ping', module_args=dict(), task_vars=task_vars)
"
-------------------------------------------------------------------------
"```python
# Test module output
ping_result = self._execute_module(module_name='ansible.legacy.ping', module_args=dict(), task_vars=task_vars)
```"
-------------------------------------------------------------------------
"ping_result = self._execute_module(module_name='ansible.legacy.ping', module_args=dict(), task_vars=task_vars)
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"facts = self._execute_module(
    module_name=""ansible.legacy.setup"", module_args=dict(filter=""ansible_pkg_mgr"", gather_subset=""!all""),
    task_vars=task_vars)
"
-------------------------------------------------------------------------
"```python
facts = self._execute_module(
    module_name=""ansible.legacy.setup"", 
    module_args=dict(filter=""ansible_pkg_mgr"", gather_subset=""!all""),
    task_vars=task_vars
)
```"
-------------------------------------------------------------------------
"facts = self._execute_module(
    module_name=""ansible.legacy.setup"", module_args=dict(filter=""ansible_pkg_mgr"", gather_subset=""!all""),
    task_vars=task_vars)
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"# eliminate collisions with collections search while still allowing local override
module = 'ansible.legacy.'  module

if not self._shared_loader_obj.module_loader.has_plugin(module):
"
-------------------------------------------------------------------------
"```python
# eliminate collisions with collections search while still allowing local override
module = 'ansible.legacy.' + module

if not self._shared_loader_obj.module_loader.has_plugin(module):
```"
-------------------------------------------------------------------------
"# eliminate collisions with collections search while still allowing local override
module = 'ansible.legacy.'  module

if not self._shared_loader_obj.module_loader.has_plugin(module):
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"result.update(self._execute_module(
    module_name=module, module_args=new_module_args, task_vars=task_vars, wrap_async=self._task.async_val))
"
-------------------------------------------------------------------------
"```python
result.update(self._execute_module(
    module_name=module, module_args=new_module_args, task_vars=task_vars))
```"
-------------------------------------------------------------------------
"result.update(self._execute_module(
    module_name=module, module_args=new_module_args, task_vars=task_vars, wrap_async=self._task.async_val))
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"'ansible.legacy.normal', task=te._task, connection=mock_connection,
"
-------------------------------------------------------------------------
"ansible.legacy.normal', task=te._task, connection=mock_connection"
-------------------------------------------------------------------------
"'ansible.legacy.normal', task=te._task, connection=mock_connection,
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"self.assertEqual(facts_modules, ['ansible.legacy.ios_facts'])
"
-------------------------------------------------------------------------
"```python
self.assertEqual(facts_modules, ['ansible.legacy.ios_facts'])
```"
-------------------------------------------------------------------------
"self.assertEqual(facts_modules, ['ansible.legacy.ios_facts'])
"
-------------------------------------------------------------------------
"Recom
PRs: 70818, 70840"
-------------------------------------------------------------------------
=========================================================================
"self._created_files = set()

    self._uses_common_file_args = True
"
-------------------------------------------------------------------------
"```python
self._created_files = set()

self._uses_common_file_args = True
```"
-------------------------------------------------------------------------
"self._created_files = set()

    self._uses_common_file_args = True
"
-------------------------------------------------------------------------
"Recom
PRs: 70221, 70824"
-------------------------------------------------------------------------
=========================================================================
"# Remove paths so we do not warn about creating with default permissions
# since we are calling this method on the path and setting the specified mode.
try:
    self._created_files.remove(path)
except KeyError:
    pass

"
-------------------------------------------------------------------------
"```python
try:
    self._created_files.remove(path)
except KeyError:
    pass
```"
-------------------------------------------------------------------------
"# Remove paths so we do not warn about creating with default permissions
# since we are calling this method on the path and setting the specified mode.
try:
    self._created_files.remove(path)
except KeyError:
    pass

"
-------------------------------------------------------------------------
"Recom
PRs: 70221, 70824"
-------------------------------------------------------------------------
=========================================================================
"def add_atomic_move_warnings(self):
    for path in sorted(self._created_files):
        self.warn(""File '{0}' created with default permissions '{1:o}'. The previous default was '666'. ""
                  ""Specify 'mode' to avoid this warning."".format(to_native(path), DEFAULT_PERM))

"
-------------------------------------------------------------------------
"```python
def add_atomic_move_warnings(self):
    for path in sorted(self._created_files):
        self.warn(""File '{0}' created with default permissions '{1:o}'. The previous default was '666'. ""
                  ""Specify 'mode' to avoid this warning."".format(to_native(path), DEFAULT_PERM))
```"
-------------------------------------------------------------------------
"def add_atomic_move_warnings(self):
    for path in sorted(self._created_files):
        self.warn(""File '{0}' created with default permissions '{1:o}'. The previous default was '666'. ""
                  ""Specify 'mode' to avoid this warning."".format(to_native(path), DEFAULT_PERM))

"
-------------------------------------------------------------------------
"Recom
PRs: 70221, 70824"
-------------------------------------------------------------------------
=========================================================================
"self.add_atomic_move_warnings()
"
-------------------------------------------------------------------------
self.add_atomic_move_warnings()
-------------------------------------------------------------------------
"self.add_atomic_move_warnings()
"
-------------------------------------------------------------------------
"Recom
PRs: 70221, 70824"
-------------------------------------------------------------------------
=========================================================================
"display_messages(self.connection)

"
-------------------------------------------------------------------------
"```python
from ansible.utils.display import Display

class ConnectionProcess(object):
    resp = self.srv.handle_request(data)
    signal.alarm(0)

    if log_messages:
        Display().display(""jsonrpc response: %s"" % resp, log_only=True)
```"
-------------------------------------------------------------------------
"display_messages(self.connection)

"
-------------------------------------------------------------------------
"Recom
PRs: 68496, 68562"
-------------------------------------------------------------------------
=========================================================================
"display_messages(self.connection)
"
-------------------------------------------------------------------------
`ansible.utils.display.display_messages(self.connection)`
-------------------------------------------------------------------------
"display_messages(self.connection)
"
-------------------------------------------------------------------------
"Recom
PRs: 68496, 68562"
-------------------------------------------------------------------------
=========================================================================
"def display_messages(connection):
# This should be handled elsewhere, but if this is the last task, nothing will
# come back to collect the messages. So now each task will dump its own messages
# to stdout before logging the response message. This may make some other
# pop_messages calls redundant.
for level, message in connection.pop_messages():
    if connection.get_option('persistent_log_messages') and level == ""log"":
        display.display(message, log_only=True)
    else:
        # These should be keyed by valid method names, but
        # fail gracefully just in case.
        display_method = getattr(display, level, None)
        if display_method:
            display_method(message)
        else:
            display.display((level, message))


"
-------------------------------------------------------------------------
"```python
def display_messages(display, connection):
    # This should be handled elsewhere, but if this is the last task, nothing will
    # come back to collect the messages. So now each task will dump its own messages
    # to stdout before logging the response message. This may make some other
    # pop_messages calls redundant.
    for level, message in connection.pop_messages():
        if connection.get_option('persistent_log_messages') and level == ""log"":
            display.display(message, log_only=True)
        else:
            # These should be keyed by valid method names, but
            # fail gracefully just in case.
            display_method = getattr(display, level, None)
            if display_method:
                display_method(message)
            else:
                display.display((level, message))
```  "
-------------------------------------------------------------------------
"def display_messages(connection):
# This should be handled elsewhere, but if this is the last task, nothing will
# come back to collect the messages. So now each task will dump its own messages
# to stdout before logging the response message. This may make some other
# pop_messages calls redundant.
for level, message in connection.pop_messages():
    if connection.get_option('persistent_log_messages') and level == ""log"":
        display.display(message, log_only=True)
    else:
        # These should be keyed by valid method names, but
        # fail gracefully just in case.
        display_method = getattr(display, level, None)
        if display_method:
            display_method(message)
        else:
            display.display((level, message))


"
-------------------------------------------------------------------------
"Recom
PRs: 68496, 68562"
-------------------------------------------------------------------------
=========================================================================
"
has_newline = msg.endswith(u'\n')
if has_newline:
    msg2 = msg[:-1]
if has_newline or newline:
    msg2 = msg2  u'\n'

"
-------------------------------------------------------------------------
"from __future__ import absolute_import, division, print_function

import pytest
from ansible.utils.display import Display

class Display(with_metaclass(Singleton, object)):
    nocolor = msg
    
    has_newline = msg.endswith(u'\n')
    if has_newline:
        msg2 = msg[:-1]
    if has_newline or newline:
        msg2 = msg2 + u'\n'
    
    if not log_only:
        pass
    else:
        msg2 = msg
    
    if color:
        msg2 = stringc(msg2, color)
        
    msg2 = to_bytes(msg2, encoding=self._output_encoding(stderr=stderr))
    if sys.version_info >= (3,):
        # Convert back to text string on python3"
-------------------------------------------------------------------------
"
has_newline = msg.endswith(u'\n')
if has_newline:
    msg2 = msg[:-1]
if has_newline or newline:
    msg2 = msg2  u'\n'

"
-------------------------------------------------------------------------
"Recom
PRs: 68517, 68520"
-------------------------------------------------------------------------
=========================================================================
"assert err == '\x1b[1;35m{0}\x1b[0m\n'.format(expected_warning_message.rstrip('\n'))
"
-------------------------------------------------------------------------
"```python
assert err == ansible.utils.display.Display().colorize('WARNING', expected_warning_message.rstrip('\n'))
```"
-------------------------------------------------------------------------
"assert err == '\x1b[1;35m{0}\x1b[0m\n'.format(expected_warning_message.rstrip('\n'))
"
-------------------------------------------------------------------------
"Recom
PRs: 68517, 68520"
-------------------------------------------------------------------------
=========================================================================
"# NOTE: this works due to fork, if switching to threads this should change to per thread storage of temp files
# clear var to ensure we only delete files for this child
self._loader._tempfiles = set()

"
-------------------------------------------------------------------------
"```python
# clear var to ensure we only delete files for this child
self._loader._tempfiles = set()
```"
-------------------------------------------------------------------------
"# NOTE: this works due to fork, if switching to threads this should change to per thread storage of temp files
# clear var to ensure we only delete files for this child
self._loader._tempfiles = set()

"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68470"
-------------------------------------------------------------------------
=========================================================================
"finally:
    self._clean_up()
"
-------------------------------------------------------------------------
"finally:
    self._clean_up()"
-------------------------------------------------------------------------
"finally:
    self._clean_up()
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68470"
-------------------------------------------------------------------------
=========================================================================
"
def _clean_up(self):
    # NOTE: see note in init about forks
    # ensure we cleanup all temp files for this worker
    self._loader.cleanup_all_tmp_files()
"
-------------------------------------------------------------------------
"```python
    def _clean_up(self):
        self._loader.cleanup_all_tmp_files()
```"
-------------------------------------------------------------------------
"
def _clean_up(self):
    # NOTE: see note in init about forks
    # ensure we cleanup all temp files for this worker
    self._loader.cleanup_all_tmp_files()
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68470"
-------------------------------------------------------------------------
=========================================================================
"

# NOTE: not effective with forks as the main copy does not get updated.
# avoids rereading files

# NOTE: not thread safe, also issues with forks not returning data to main proc
#       so they need to be cleaned independantly. See WorkerProcess for example.
# used to keep track of temp files for cleaning
"
-------------------------------------------------------------------------
"```python
class DataLoader:
    '''
 
    def __init__(self):
        self._basedir = '.'
        self._FILE_CACHE = dict()
        self._tempfiles = set()
 
        # NOTE: not effective with forks as the main copy does not get updated.
        # avoids rereading files

        # NOTE: not thread safe, also issues with forks not returning data to main proc
        #       so they need to be cleaned independently. See WorkerProcess for example.
        # used to keep track of temp files for cleaning
    '''
```"
-------------------------------------------------------------------------
"

# NOTE: not effective with forks as the main copy does not get updated.
# avoids rereading files

# NOTE: not thread safe, also issues with forks not returning data to main proc
#       so they need to be cleaned independantly. See WorkerProcess for example.
# used to keep track of temp files for cleaning
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68470"
-------------------------------------------------------------------------
=========================================================================
"fd, content_tempfile = tempfile.mkstemp(dir=C.DEFAULT_LOCAL_TMP)
"
-------------------------------------------------------------------------
"```python
import tempfile

# Updated code snippet
fd, content_tempfile = tempfile.mkstemp(dir=C.DEFAULT_LOCAL_TMP)
```"
-------------------------------------------------------------------------
"fd, content_tempfile = tempfile.mkstemp(dir=C.DEFAULT_LOCAL_TMP)
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68470"
-------------------------------------------------------------------------
=========================================================================
"""""""
Removes all temporary files that DataLoader has created
NOTE: not thread safe, forks also need special handling see __init__ for details.
""""""
"
-------------------------------------------------------------------------
"```python
class DataLoader:
    self._tempfiles.remove(file_path)

def cleanup_all_tmp_files(self):
    for f in self._tempfiles:
        try:
            self.cleanup_tmp_file(f)
```"
-------------------------------------------------------------------------
"""""""
Removes all temporary files that DataLoader has created
NOTE: not thread safe, forks also need special handling see __init__ for details.
""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68470"
-------------------------------------------------------------------------
=========================================================================
"fd, tmp_path = tempfile.mkstemp(suffix=ext, dir=C.DEFAULT_LOCAL_TMP)
"
-------------------------------------------------------------------------
"```python
tmp_path, fd = tempfile.mkstemp(suffix=ext, dir=C.DEFAULT_LOCAL_TMP)
```"
-------------------------------------------------------------------------
"fd, tmp_path = tempfile.mkstemp(suffix=ext, dir=C.DEFAULT_LOCAL_TMP)
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68470"
-------------------------------------------------------------------------
=========================================================================
"# NOTE: this works due to fork, if switching to threads this should change to per thread storage of temp files
# clear var to ensure we only delete files for this child
self._loader._tempfiles = set()

"
-------------------------------------------------------------------------
"```python
self._loader._tempfiles = set()
```"
-------------------------------------------------------------------------
"# NOTE: this works due to fork, if switching to threads this should change to per thread storage of temp files
# clear var to ensure we only delete files for this child
self._loader._tempfiles = set()

"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68469"
-------------------------------------------------------------------------
=========================================================================
"finally:
    self._clean_up()
"
-------------------------------------------------------------------------
"```
try:
    self._clean_up()
finally:
    display.debug(""WORKER PROCESS EXITING"")
```"
-------------------------------------------------------------------------
"finally:
    self._clean_up()
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68469"
-------------------------------------------------------------------------
=========================================================================
"
def _clean_up(self):
    # NOTE: see note in init about forks
    # ensure we cleanup all temp files for this worker
    self._loader.cleanup_all_tmp_files()
"
-------------------------------------------------------------------------
"```python
def _clean_up(self):
    self._loader.cleanup_all_tmp_files()
```"
-------------------------------------------------------------------------
"
def _clean_up(self):
    # NOTE: see note in init about forks
    # ensure we cleanup all temp files for this worker
    self._loader.cleanup_all_tmp_files()
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68469"
-------------------------------------------------------------------------
=========================================================================
"

# NOTE: not effective with forks as the main copy does not get updated.
# avoids rereading files

# NOTE: not thread safe, also issues with forks not returning data to main proc
#       so they need to be cleaned independantly. See WorkerProcess for example.
# used to keep track of temp files for cleaning
"
-------------------------------------------------------------------------
"```python
# NOTE: not effective with forks as the main copy does not get updated.
# avoids rereading files

# NOTE: not thread safe, also issues with forks not returning data to main proc
# so they need to be cleaned independently. See WorkerProcess for example.
# used to keep track of temp files for cleaning
```"
-------------------------------------------------------------------------
"

# NOTE: not effective with forks as the main copy does not get updated.
# avoids rereading files

# NOTE: not thread safe, also issues with forks not returning data to main proc
#       so they need to be cleaned independantly. See WorkerProcess for example.
# used to keep track of temp files for cleaning
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68469"
-------------------------------------------------------------------------
=========================================================================
"fd, content_tempfile = tempfile.mkstemp(dir=C.DEFAULT_LOCAL_TMP)
"
-------------------------------------------------------------------------
"```python
content_tempfile, fd = tempfile.mkstemp(dir=C.DEFAULT_LOCAL_TMP)
```"
-------------------------------------------------------------------------
"fd, content_tempfile = tempfile.mkstemp(dir=C.DEFAULT_LOCAL_TMP)
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68469"
-------------------------------------------------------------------------
=========================================================================
"""""""
Removes all temporary files that DataLoader has created
NOTE: not thread safe, forks also need special handling see __init__ for details.
""""""
"
-------------------------------------------------------------------------
"```
class DataLoader:
     self._tempfiles.remove(file_path)

     def cleanup_all_tmp_files(self):
         for f in self._tempfiles:
             try:
                 self.cleanup_tmp_file(f)
```"
-------------------------------------------------------------------------
"""""""
Removes all temporary files that DataLoader has created
NOTE: not thread safe, forks also need special handling see __init__ for details.
""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68469"
-------------------------------------------------------------------------
=========================================================================
"fd, tmp_path = tempfile.mkstemp(suffix=ext, dir=C.DEFAULT_LOCAL_TMP)
"
-------------------------------------------------------------------------
"```python
tmp_fd, tmp_path = tempfile.mkstemp(suffix=ext, dir=C.DEFAULT_LOCAL_TMP)
```"
-------------------------------------------------------------------------
"fd, tmp_path = tempfile.mkstemp(suffix=ext, dir=C.DEFAULT_LOCAL_TMP)
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68469"
-------------------------------------------------------------------------
=========================================================================
"# NOTE: this works due to fork, if switching to threads this should change to per thread storage of temp files
# clear var to ensure we only delete files for this child
self._loader._tempfiles = set()

"
-------------------------------------------------------------------------
"```python
# clear var to ensure we only delete files for this child
self._loader._tempfiles = set()
```"
-------------------------------------------------------------------------
"# NOTE: this works due to fork, if switching to threads this should change to per thread storage of temp files
# clear var to ensure we only delete files for this child
self._loader._tempfiles = set()

"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68468"
-------------------------------------------------------------------------
=========================================================================
"finally:
    self._clean_up()
"
-------------------------------------------------------------------------
"```python
    finally:
        self._clean_up()
```"
-------------------------------------------------------------------------
"finally:
    self._clean_up()
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68468"
-------------------------------------------------------------------------
=========================================================================
"
def _clean_up(self):
    # NOTE: see note in init about forks
    # ensure we cleanup all temp files for this worker
    self._loader.cleanup_all_tmp_files()
"
-------------------------------------------------------------------------
"```python
def _clean_up(self):
    self._loader.cleanup_all_tmp_files()
```"
-------------------------------------------------------------------------
"
def _clean_up(self):
    # NOTE: see note in init about forks
    # ensure we cleanup all temp files for this worker
    self._loader.cleanup_all_tmp_files()
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68468"
-------------------------------------------------------------------------
=========================================================================
"

# NOTE: not effective with forks as the main copy does not get updated.
# avoids rereading files

# NOTE: not thread safe, also issues with forks not returning data to main proc
#       so they need to be cleaned independantly. See WorkerProcess for example.
# used to keep track of temp files for cleaning
"
-------------------------------------------------------------------------
"```python
# NOTE: not effective with forks as the main copy does not get updated.
# avoids rereading files

# NOTE: not thread safe, also issues with forks not returning data to main proc
#       so they need to be cleaned independently.
# used to keep track of temp files for cleaning
```"
-------------------------------------------------------------------------
"

# NOTE: not effective with forks as the main copy does not get updated.
# avoids rereading files

# NOTE: not thread safe, also issues with forks not returning data to main proc
#       so they need to be cleaned independantly. See WorkerProcess for example.
# used to keep track of temp files for cleaning
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68468"
-------------------------------------------------------------------------
=========================================================================
"fd, content_tempfile = tempfile.mkstemp(dir=C.DEFAULT_LOCAL_TMP)
"
-------------------------------------------------------------------------
"import os
class DataLoader:

    def _create_content_tempfile(self, content):
        ''' Create a tempfile containing defined content '''
        fd, content_tempfile = tempfile.mkstemp(dir=C.DEFAULT_LOCAL_TMP)
        f = os.fdopen(fd, 'wb')
        content = to_bytes(content)
        try:"
-------------------------------------------------------------------------
"fd, content_tempfile = tempfile.mkstemp(dir=C.DEFAULT_LOCAL_TMP)
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68468"
-------------------------------------------------------------------------
=========================================================================
"""""""
Removes all temporary files that DataLoader has created
NOTE: not thread safe, forks also need special handling see __init__ for details.
""""""
"
-------------------------------------------------------------------------
"""""""Removes all temporary files that DataLoader has created."""""""
-------------------------------------------------------------------------
"""""""
Removes all temporary files that DataLoader has created
NOTE: not thread safe, forks also need special handling see __init__ for details.
""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68468"
-------------------------------------------------------------------------
=========================================================================
"fd, tmp_path = tempfile.mkstemp(suffix=ext, dir=C.DEFAULT_LOCAL_TMP)
"
-------------------------------------------------------------------------
"```python
fd, tmp_path = tempfile.mkstemp(suffix=ext, dir=C.DEFAULT_LOCAL_TMP)
```"
-------------------------------------------------------------------------
"fd, tmp_path = tempfile.mkstemp(suffix=ext, dir=C.DEFAULT_LOCAL_TMP)
"
-------------------------------------------------------------------------
"Recom
PRs: 68433, 68468"
-------------------------------------------------------------------------
=========================================================================
"self._tqm.load_callbacks()
"
-------------------------------------------------------------------------
"import ansible.plugins.callback
from __future__ import absolute_import

self._tqm.load_callbacks()"
-------------------------------------------------------------------------
"self._tqm.load_callbacks()
"
-------------------------------------------------------------------------
"Recom
PRs: 67673, 68420"
-------------------------------------------------------------------------
=========================================================================
"try:
    h = f(source)
except ValueError:
    # This can happen for hash algorithms not supported in FIPS mode
    # (https://github.com/ansible/ansible/issues/67213)
    continue
"
-------------------------------------------------------------------------
"```python
try:
    h = f(source)
except ValueError:
    continue
```"
-------------------------------------------------------------------------
"try:
    h = f(source)
except ValueError:
    # This can happen for hash algorithms not supported in FIPS mode
    # (https://github.com/ansible/ansible/issues/67213)
    continue
"
-------------------------------------------------------------------------
"Recom
PRs: 67515, 67971"
-------------------------------------------------------------------------
=========================================================================
"and the L(TLS-ALPN-01 specification,https://www.rfc-editor.org/rfc/rfc8737.html#section-3).
the L(RFC 8738,https://www.rfc-editor.org/rfc/rfc8738.html).""
"
-------------------------------------------------------------------------
"Add the necessary information based on the provided instruction:

```python
description:
       It is I(not) the responsibility of this module to perform these steps.""
    - ""For details on how to fulfill these challenges, you might have to read through
       L(the main ACME specification, https://tools.ietf.org/html/rfc8555#section-8) 
       and the L(TLS-ALPN-01 specification, https://www.rfc-editor.org/rfc/rfc8737.html#section-3).
       Also, consider the examples provided for this module.""
    - ""The module includes experimental support for IP identifiers according to
 notes:
    - ""At least one of C(dest) and C(fullchain_dest) must be specified.""
    - ""This module includes basic account management functionality.
Required dependency: __future__, ansible.module_utils.acme, json, ansible.module_utils._text, ansible.module_utils.basic, 
Original metadata: [2.9] acme_* modules: adjust documentation to reference RFCs 8737 and 8738 instead of the drafts
```
"
-------------------------------------------------------------------------
"and the L(TLS-ALPN-01 specification,https://www.rfc-editor.org/rfc/rfc8737.html#section-3).
the L(RFC 8738,https://www.rfc-editor.org/rfc/rfc8738.html).""
"
-------------------------------------------------------------------------
"Recom
PRs: 67881, 67882"
-------------------------------------------------------------------------
=========================================================================
"description: The specification of the C(tls-alpn-01) challenge (RFC 8737).
link: https://www.rfc-editor.org/rfc/rfc8737.html-05
"
-------------------------------------------------------------------------
"```yaml
seealso:
  description: The specification of the C(tls-alpn-01) challenge (RFC 8737).
  link: https://www.rfc-editor.org/rfc/rfc8737.html-05
```"
-------------------------------------------------------------------------
"description: The specification of the C(tls-alpn-01) challenge (RFC 8737).
link: https://www.rfc-editor.org/rfc/rfc8737.html-05
"
-------------------------------------------------------------------------
"Recom
PRs: 67881, 67882"
-------------------------------------------------------------------------
=========================================================================
"U(https://www.rfc-editor.org/rfc/rfc8737.html#section-3)
"
-------------------------------------------------------------------------
"I'm sorry, but the provided code snippet does not contain the text to be adapted. Could you please provide the specific code snippet or text that you would like to adapt?"
-------------------------------------------------------------------------
"U(https://www.rfc-editor.org/rfc/rfc8737.html#section-3)
"
-------------------------------------------------------------------------
"Recom
PRs: 67881, 67882"
-------------------------------------------------------------------------
=========================================================================
"# https://www.rfc-editor.org/rfc/rfc8737.html#section-3
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.acme
import json
import ansible.module_utils._text
import ansible.module_utils.basic

class ACMEClient(object):
    record = (resource + identifier[1:]) if identifier.startswith('*.') else (resource + '.' + identifier)
    data[challenge_type] = {'resource': resource, 'resource_value': value, 'record': record}
    elif challenge_type == 'tls-alpn-01':
        if identifier_type == 'ip':
            # IPv4/IPv6 address: use reverse mapping (RFC1034, RFC3596)
            resource = compat_ipaddress.ip_address(identifier).reverse_pointer
```"
-------------------------------------------------------------------------
"# https://www.rfc-editor.org/rfc/rfc8737.html#section-3
"
-------------------------------------------------------------------------
"Recom
PRs: 67881, 67882"
-------------------------------------------------------------------------
=========================================================================
"description: The specification of the C(tls-alpn-01) challenge (RFC 8737).
link: https://www.rfc-editor.org/rfc/rfc8737.html
"
-------------------------------------------------------------------------
"description:
    - ""The specification of the TLS-ALPN-01 challenge (RFC 8737).""
seealso:
    - link: https://www.rfc-editor.org/rfc/rfc8737.html"
-------------------------------------------------------------------------
"description: The specification of the C(tls-alpn-01) challenge (RFC 8737).
link: https://www.rfc-editor.org/rfc/rfc8737.html
"
-------------------------------------------------------------------------
"Recom
PRs: 67881, 67882"
-------------------------------------------------------------------------
=========================================================================
"description: The specification of the C(tls-alpn-01) challenge (RFC 8737).
link: https://www.rfc-editor.org/rfc/rfc8737.html
"
-------------------------------------------------------------------------
"description: The specification of the C(tls-alpn-01) challenge (RFC 8737).
link: https://www.rfc-editor.org/rfc/rfc8737.html"
-------------------------------------------------------------------------
"description: The specification of the C(tls-alpn-01) challenge (RFC 8737).
link: https://www.rfc-editor.org/rfc/rfc8737.html
"
-------------------------------------------------------------------------
"Recom
PRs: 67881, 67882"
-------------------------------------------------------------------------
=========================================================================
"register: set
"
-------------------------------------------------------------------------
register: set
-------------------------------------------------------------------------
"register: set
"
-------------------------------------------------------------------------
"Recom
PRs: 67859, 67880"
-------------------------------------------------------------------------
=========================================================================
"register: set
"
-------------------------------------------------------------------------
register: set
-------------------------------------------------------------------------
"register: set
"
-------------------------------------------------------------------------
"Recom
PRs: 67859, 67879"
-------------------------------------------------------------------------
=========================================================================
"# Windows uses Powershell modules
if getattr(self._shell, ""_IS_WINDOWS"", False):
    self.module_implementation_preferences = ('.ps1', '.exe', '')

"
-------------------------------------------------------------------------
"```python
# Windows uses Powershell modules
if getattr(self._shell, ""_IS_WINDOWS"", False):
    self.module_implementation_preferences = ('.ps1', '.exe', '')
```"
-------------------------------------------------------------------------
"# Windows uses Powershell modules
if getattr(self._shell, ""_IS_WINDOWS"", False):
    self.module_implementation_preferences = ('.ps1', '.exe', '')

"
-------------------------------------------------------------------------
"Recom
PRs: 67832, 67872"
-------------------------------------------------------------------------
=========================================================================
"if isinstance(value, (string_types, AnsibleVaultEncryptedUnicode)):
 isinstance(value, (string_types, AnsibleVaultEncryptedUnicode)):
"
-------------------------------------------------------------------------
"```python
if isinstance(value, (string_types, AnsibleVaultEncryptedUnicode)):
```"
-------------------------------------------------------------------------
"if isinstance(value, (string_types, AnsibleVaultEncryptedUnicode)):
 isinstance(value, (string_types, AnsibleVaultEncryptedUnicode)):
"
-------------------------------------------------------------------------
"Recom
PRs: 67492, 67741"
-------------------------------------------------------------------------
=========================================================================
"
@pytest.mark.parametrize(""value_type"", (""str"", ""string"", None))
def test_ensure_type_with_vaulted_str(self, value_type):
    class MockVault:
        def decrypt(self, value):
            return value

    vault_var = AnsibleVaultEncryptedUnicode(b""vault text"")
    vault_var.vault = MockVault()

    actual_value = ensure_type(vault_var, value_type)
    assert actual_value == ""vault text""
"
-------------------------------------------------------------------------
"```python
import os
import pytest
from ansible.module_utils.six import AnsibleVaultEncryptedUnicode
from ansible.config.manager import TestConfigManager
from ansible.errors import AnsibleError
from ansible.parsing.yaml.objects import objects

@pytest.mark.parametrize(""value_type"", (""str"", ""string"", None))
def test_ensure_type_with_vaulted_str():
    class MockVault:
        def decrypt(self, value):
            return value

    vault_var = AnsibleVaultEncryptedUnicode(b""vault text"")
    vault_var.vault = MockVault()

    test_config_manager = TestConfigManager()
    actual_value, actual_origin = test_config_manager._loop_entries({'name': vault_var}, [{'name': 'name'}])
    assert actual_value == ""vault text""
    assert actual_origin == ""name""
```  "
-------------------------------------------------------------------------
"
@pytest.mark.parametrize(""value_type"", (""str"", ""string"", None))
def test_ensure_type_with_vaulted_str(self, value_type):
    class MockVault:
        def decrypt(self, value):
            return value

    vault_var = AnsibleVaultEncryptedUnicode(b""vault text"")
    vault_var.vault = MockVault()

    actual_value = ensure_type(vault_var, value_type)
    assert actual_value == ""vault text""
"
-------------------------------------------------------------------------
"Recom
PRs: 67492, 67741"
-------------------------------------------------------------------------
=========================================================================
"merged_commands = self.set_commands(w, have, True)
for k in w.copy():
"
-------------------------------------------------------------------------
"```python
merged_commands = self.set_commands(w, have, True)
for k in w.copy():
```"
-------------------------------------------------------------------------
"merged_commands = self.set_commands(w, have, True)
for k in w.copy():
"
-------------------------------------------------------------------------
"Recom
PRs: 66517, 67703"
-------------------------------------------------------------------------
=========================================================================
"commands.extend(self.set_commands(flatten_dict(w), have, True))
"
-------------------------------------------------------------------------
"```python
commands.extend(self.set_commands(flatten_dict(w), have, True))
```"
-------------------------------------------------------------------------
"commands.extend(self.set_commands(flatten_dict(w), have, True))
"
-------------------------------------------------------------------------
"Recom
PRs: 66517, 67703"
-------------------------------------------------------------------------
=========================================================================
"def add_commands(self, d, vlan_exists=False):
"
-------------------------------------------------------------------------
"```python
def add_commands(self, d, vlan_exists=False):
```"
-------------------------------------------------------------------------
"def add_commands(self, d, vlan_exists=False):
"
-------------------------------------------------------------------------
"Recom
PRs: 66517, 67703"
-------------------------------------------------------------------------
=========================================================================
"if vlan_exists:
    commands.append(cmd  'trunk allowed vlan add '  str(d['allowed_vlans']))
else:
    commands.append(cmd  'trunk allowed vlan '  str(d['allowed_vlans']))
commands(self, w, have, replace=False):
_tobe_added = []
if diff and not replace:
    if ""allowed_vlans"" in diff.keys() and diff[""allowed_vlans""]:
        vlan_tobe_added = diff[""allowed_vlans""].split(',')
        vlan_list = vlan_tobe_added[:]
        have_vlans = obj_in_have[""allowed_vlans""].split(',')
        for w_vlans in vlan_list:
            if w_vlans in have_vlans:
                vlan_tobe_added.pop(vlan_tobe_added.index(w_vlans))
        if vlan_tobe_added:
            diff.update({""allowed_vlans"": ','.join(vlan_tobe_added)})
            commands = self.add_commands(diff, True)
        return commands
"
-------------------------------------------------------------------------
"```python
if vlan_exists:
    commands.append(cmd + 'trunk allowed vlan add ' + str(d['allowed_vlans']))
else:
    commands.append(cmd + 'trunk allowed vlan ' + str(d['allowed_vlans']))

_tobe_added = []
if diff and not replace:
    if ""allowed_vlans"" in diff.keys() and diff[""allowed_vlans""]:
        vlan_tobe_added = diff[""allowed_vlans""].split(',')
        vlan_list = vlan_tobe_added[:]
        have_vlans = obj_in_have[""allowed_vlans""].split(',')
        for w_vlans in vlan_list:
            if w_vlans in have_vlans:
                vlan_tobe_added.remove(w_vlans)
        if vlan_tobe_added:
            diff.update({""allowed_vlans"": ','.join(vlan_tobe_added)})
            commands = self.add_commands(diff, True)
        return commands
```"
-------------------------------------------------------------------------
"if vlan_exists:
    commands.append(cmd  'trunk allowed vlan add '  str(d['allowed_vlans']))
else:
    commands.append(cmd  'trunk allowed vlan '  str(d['allowed_vlans']))
commands(self, w, have, replace=False):
_tobe_added = []
if diff and not replace:
    if ""allowed_vlans"" in diff.keys() and diff[""allowed_vlans""]:
        vlan_tobe_added = diff[""allowed_vlans""].split(',')
        vlan_list = vlan_tobe_added[:]
        have_vlans = obj_in_have[""allowed_vlans""].split(',')
        for w_vlans in vlan_list:
            if w_vlans in have_vlans:
                vlan_tobe_added.pop(vlan_tobe_added.index(w_vlans))
        if vlan_tobe_added:
            diff.update({""allowed_vlans"": ','.join(vlan_tobe_added)})
            commands = self.add_commands(diff, True)
        return commands
"
-------------------------------------------------------------------------
"Recom
PRs: 66517, 67703"
-------------------------------------------------------------------------
=========================================================================
"- ""The index of this NUMA node.""
ired: True
- ""Memory size of the NUMA node in MiB.""
ired: True
- ""List of VM CPU cores indexes to be included in this NUMA node.""
: list
ired: True
- ""List of physical NUMA node indexes to pin this virtual NUMA node to.""
: list
"
-------------------------------------------------------------------------
"```yaml
options:
  suboptions:
    index:
      description: ""The index of this NUMA node.""
      required: true
    memory:
      description: ""Memory size of the NUMA node in MiB.""
      required: true
    cores:
      description: ""List of VM CPU cores indexes to be included in this NUMA node.""
      type: list
      required: true
    numa_node_pins:
      description: ""List of physical NUMA node indexes to pin this virtual NUMA node to.""
      type: list
      required: true
  version_added: ""2.6""
rng_device:
  description: """"
```"
-------------------------------------------------------------------------
"- ""The index of this NUMA node.""
ired: True
- ""Memory size of the NUMA node in MiB.""
ired: True
- ""List of VM CPU cores indexes to be included in this NUMA node.""
: list
ired: True
- ""List of physical NUMA node indexes to pin this virtual NUMA node to.""
: list
"
-------------------------------------------------------------------------
"Recom
PRs: 67611, 67700"
-------------------------------------------------------------------------
=========================================================================
"def __get_numa_serialized(self, numa):
    return sorted([(x.index,
                    [y.index for y in x.cpu.cores] if x.cpu else [],
                    x.memory,
                    [y.index for y in x.numa_node_pins] if x.numa_node_pins else []
                    ) for x in numa], key=lambda x: x[0])

    existed_numa_nodes = numa_nodes_service.list()
        for current_numa_node in sorted(existed_numa_nodes, reverse=True, key=lambda x: x.index):
"
-------------------------------------------------------------------------
"```python
def __get_numa_serialized(self, numa):
    return sorted([(x.index,
                    [y.index for y in x.cpu.cores] if x.cpu else [],
                    x.memory,
                    [y.index for y in x.numa_node_pins] if x.numa_node_pins else []
                    ) for x in numa], key=lambda x: x[0])

existed_numa_nodes = numa_nodes_service.list()
for current_numa_node in sorted(existed_numa_nodes, reverse=True, key=lambda x: x.index):
```"
-------------------------------------------------------------------------
"def __get_numa_serialized(self, numa):
    return sorted([(x.index,
                    [y.index for y in x.cpu.cores] if x.cpu else [],
                    x.memory,
                    [y.index for y in x.numa_node_pins] if x.numa_node_pins else []
                    ) for x in numa], key=lambda x: x[0])

    existed_numa_nodes = numa_nodes_service.list()
        for current_numa_node in sorted(existed_numa_nodes, reverse=True, key=lambda x: x.index):
"
-------------------------------------------------------------------------
"Recom
PRs: 67611, 67700"
-------------------------------------------------------------------------
=========================================================================
"return self.__get_numa_serialized(numa_nodes_service.list()) != self.__get_numa_serialized(existed_numa_nodes)
"
-------------------------------------------------------------------------
"```python
return self.__get_numa_serialized(numa_nodes_service.list()) != self.__get_numa_serialized(existed_numa_nodes)
```"
-------------------------------------------------------------------------
"return self.__get_numa_serialized(numa_nodes_service.list()) != self.__get_numa_serialized(existed_numa_nodes)
"
-------------------------------------------------------------------------
"Recom
PRs: 67611, 67700"
-------------------------------------------------------------------------
=========================================================================
"if not path.endswith(os.path.join(os.path.sep, self.name)):
else:
    # Look for a meta/main.ya?ml inside the potential role dir in case
    #  the role name is the same as parent directory of the role.
    #
    # Example:
    #   ./roles/testing/testing/meta/main.yml
    for meta_main in self.META_MAIN:
        if os.path.exists(os.path.join(path, name, meta_main)):
            path = os.path.join(path, self.name)
            break
"
-------------------------------------------------------------------------
"if not path.endswith(os.path.join(os.path.sep, self.name)):
    # Look for a meta/main.ya?ml inside the potential role dir in case
    # the role name is the same as the parent directory of the role.
    #
    # Example:
    #   ./roles/testing/testing/meta/main.yml
    for meta_main in self.META_MAIN:
        if os.path.exists(os.path.join(path, self.name, meta_main)):
            path = os.path.join(path, self.name)
            break
"
-------------------------------------------------------------------------
"if not path.endswith(os.path.join(os.path.sep, self.name)):
else:
    # Look for a meta/main.ya?ml inside the potential role dir in case
    #  the role name is the same as parent directory of the role.
    #
    # Example:
    #   ./roles/testing/testing/meta/main.yml
    for meta_main in self.META_MAIN:
        if os.path.exists(os.path.join(path, name, meta_main)):
            path = os.path.join(path, self.name)
            break
"
-------------------------------------------------------------------------
"Recom
PRs: 67391, 67619"
-------------------------------------------------------------------------
=========================================================================
"if not self._metadata:
    if len(self.versions) > 1:
        return {}
    self._get_metadata()
dependencies = self._metadata.dependencies

if dependencies is None:
    return {}

return dependencies
"
-------------------------------------------------------------------------
"```python
if not self._metadata:
    if len(self.versions) > 1:
        return {}
    self._get_metadata()

dependencies = self._metadata.dependencies

if dependencies is None:
    return {}

return dependencies
```"
-------------------------------------------------------------------------
"if not self._metadata:
    if len(self.versions) > 1:
        return {}
    self._get_metadata()
dependencies = self._metadata.dependencies

if dependencies is None:
    return {}

return dependencies
"
-------------------------------------------------------------------------
"Recom
PRs: 67575, 67618"
-------------------------------------------------------------------------
=========================================================================
"assert actual.dependencies == {}
"
-------------------------------------------------------------------------
"assert actual.dependencies == set(['io', 'ansible.cli.galaxy', 'tarfile', 'ansible.module_utils.six.moves.urllib.error', 'ansible.utils.display', 'json', 'ansible.module_utils._text', 'copy', '__future__', 'yaml', 'os', 'ansible.galaxy', 'units.compat.mock', 'pytest', 'ansible', 're', 'ansible.errors', 'shutil', 'ansible.utils'])"
-------------------------------------------------------------------------
"assert actual.dependencies == {}
"
-------------------------------------------------------------------------
"Recom
PRs: 67575, 67618"
-------------------------------------------------------------------------
=========================================================================
"assert actual.dependencies == {}
"
-------------------------------------------------------------------------
"```python
assert actual.dependencies == {}
```"
-------------------------------------------------------------------------
"assert actual.dependencies == {}
"
-------------------------------------------------------------------------
"Recom
PRs: 67575, 67618"
-------------------------------------------------------------------------
=========================================================================
"assert actual.dependencies == {}
"
-------------------------------------------------------------------------
"assert actual.dependencies == set(['io', 'ansible.cli.galaxy', 'tarfile', 'ansible.module_utils.six.moves.urllib.error', 'ansible.utils.display', 'json', 'ansible.module_utils._text', 'copy', '__future__', 'yaml', 'os', 'ansible.galaxy', 'units.compat.mock', 'pytest', 'ansible', 're', 'ansible.errors', 'shutil', 'ansible.utils'])"
-------------------------------------------------------------------------
"assert actual.dependencies == {}
"
-------------------------------------------------------------------------
"Recom
PRs: 67575, 67618"
-------------------------------------------------------------------------
=========================================================================
"assert actual.dependencies == {}
"
-------------------------------------------------------------------------
"```python
assert actual.dependencies == {}
```"
-------------------------------------------------------------------------
"assert actual.dependencies == {}
"
-------------------------------------------------------------------------
"Recom
PRs: 67575, 67618"
-------------------------------------------------------------------------
=========================================================================
"if cache and only_one:
"
-------------------------------------------------------------------------
"```python
if cache and only_one:
    self._cached_result[sha1_hash] = result
```"
-------------------------------------------------------------------------
"if cache and only_one:
"
-------------------------------------------------------------------------
"Recom
PRs: 67429, 67602"
-------------------------------------------------------------------------
=========================================================================
"U(https://www.postgresql.org/docs/current/view-pg-replication-slots.html).
"
-------------------------------------------------------------------------
U(https://www.postgresql.org/docs/current/view-pg-replication-slots.html)
-------------------------------------------------------------------------
"U(https://www.postgresql.org/docs/current/view-pg-replication-slots.html).
"
-------------------------------------------------------------------------
"Recom
PRs: 67517, 67522"
-------------------------------------------------------------------------
=========================================================================
"U(https://www.postgresql.org/docs/current/view-pg-replication-slots.html).
"
-------------------------------------------------------------------------
"```python
            https://www.postgresql.org/docs/current/view-pg-replication-slots.html
```  "
-------------------------------------------------------------------------
"U(https://www.postgresql.org/docs/current/view-pg-replication-slots.html).
"
-------------------------------------------------------------------------
"Recom
PRs: 67517, 67521"
-------------------------------------------------------------------------
=========================================================================
"try:
    h = f(source)
except ValueError:
    # This can happen for hash algorithms not supported in FIPS mode
    # (https://github.com/ansible/ansible/issues/67213)
    continue
"
-------------------------------------------------------------------------
"```python
try:
    pubkey_digest = h(source)
except ValueError:
    continue
```"
-------------------------------------------------------------------------
"try:
    h = f(source)
except ValueError:
    # This can happen for hash algorithms not supported in FIPS mode
    # (https://github.com/ansible/ansible/issues/67213)
    continue
"
-------------------------------------------------------------------------
"Recom
PRs: 67515, 67519"
-------------------------------------------------------------------------
=========================================================================
"- ""Storage domain name where disk should be created.""
"
-------------------------------------------------------------------------
"options:
    - Note that this option isn't idempotent as it's not currently possible to change sparseness of the disk via API.
storage_domain:
    description: ""Storage domain name where disk should be created."""
-------------------------------------------------------------------------
"- ""Storage domain name where disk should be created.""
"
-------------------------------------------------------------------------
"Recom
PRs: 67454, 67518"
-------------------------------------------------------------------------
=========================================================================
"self.results['ansible_facts'] = dict(
    azure_resourcegroups=result
)
"
-------------------------------------------------------------------------
"```python
self.results['ansible_facts'] = dict(
    azure_resourcegroups=result
)
```"
-------------------------------------------------------------------------
"self.results['ansible_facts'] = dict(
    azure_resourcegroups=result
)
"
-------------------------------------------------------------------------
"Recom
PRs: 66729, 67479"
-------------------------------------------------------------------------
=========================================================================
"# Write config; make sure it has permissions 0x600
content = json.dumps(self._config, indent=4, sort_keys=True).encode('utf-8')
f = os.open(self._config_path, os.O_WRONLY | os.O_CREAT | os.O_TRUNC, 0o600)
try:
    os.write(f, content)
finally:
    os.close(f)
"
-------------------------------------------------------------------------
"```python
content = json.dumps(self._config, indent=4, sort_keys=True).encode('utf-8')
f = os.open(self._config_path, os.O_WRONLY | os.O_CREAT | os.O_TRUNC, 0o600)
try:
    os.write(f, content)
finally:
    os.close(f)
```"
-------------------------------------------------------------------------
"# Write config; make sure it has permissions 0x600
content = json.dumps(config, indent=5, sort_keys=True).encode('utf-8')
f = os.open(path, os.O_WRONLY | os.O_CREAT | os.O_TRUNC, 0o600)
try:
    os.write(f, content)
finally:
    os.close(f)
"
-------------------------------------------------------------------------
"Recom
PRs: 67353, 67441"
-------------------------------------------------------------------------
=========================================================================
"no_log = arg_opts.get('no_log', None)
# try to proactively capture password/passphrase fields
if no_log is None and PASSWORD_MATCH.search(param):
elif self.boolean(no_log):
    log_args[param] = 'NOT_LOGGING_PARAMETER'
"
-------------------------------------------------------------------------
"```python
no_log = arg_opts.get('no_log', None)
# try to proactively capture password/passphrase fields
if no_log is None and PASSWORD_MATCH.search(param):
    log_args[param] = 'NOT_LOGGING_PARAMETER'
elif self.boolean(no_log):
    log_args[param] = 'NOT_LOGGING_PARAMETER'
```"
-------------------------------------------------------------------------
"no_log = arg_opts.get('no_log', None)
# try to proactively capture password/passphrase fields
if no_log is None and PASSWORD_MATCH.search(param):
elif self.boolean(no_log):
    log_args[param] = 'NOT_LOGGING_PARAMETER'
"
-------------------------------------------------------------------------
"Recom
PRs: 64733, 67439"
-------------------------------------------------------------------------
=========================================================================
"

@pytest.mark.parametrize(""stdin"", [{""arg_pass"": ""testing""}], indirect=[""stdin""])
def test_no_log_true(stdin, capfd):
""""""Explicitly mask an argument (no_log=True).""""""
arg_spec = {
    ""arg_pass"": {""no_log"": True}
}
am = basic.AnsibleModule(arg_spec)
# no_log=True is picked up by both am._log_invocation and list_no_log_values
# (called by am._handle_no_log_values). As a result, we can check for the
# value in am.no_log_values.
assert ""testing"" in am.no_log_values


est.mark.parametrize(""stdin"", [{""arg_pass"": ""testing""}], indirect=[""stdin""])
test_no_log_false(stdin, capfd):
""""""Explicitly log and display an argument (no_log=False).""""""
arg_spec = {
    ""arg_pass"": {""no_log"": False}
}
am = basic.AnsibleModule(arg_spec)
assert ""testing"" not in am.no_log_values and not am._warnings


est.mark.parametrize(""stdin"", [{""arg_pass"": ""testing""}], indirect=[""stdin""])
test_no_log_none(stdin, capfd):
""""""Allow Ansible to make the decision by matching the argument name
against PASSWORD_MATCH.""""""
arg_spec = {
    ""arg_pass"": {}
}
am = basic.AnsibleModule(arg_spec)
# Omitting no_log is only picked up by _log_invocation, so the value never
# makes it into am.no_log_values. Instead we can check for the warning
# emitted by am._log_invocation.
assert len(am._warnings) > 0
"
-------------------------------------------------------------------------
"```python
import os
from unittest import mock
import pytest
import ansible.module_utils.basic as basic

@pytest.mark.parametrize(""stdin"", [{""arg_pass"": ""testing""}], indirect=[""stdin""])
def test_no_log_true(stdin, capfd):
    """"""Explicitly mask an argument (no_log=True).""""""
    arg_spec = {
        ""arg_pass"": {""no_log"": True}
    }
    am = basic.AnsibleModule(arg_spec)
    # no_log=True is picked up by both am._log_invocation and list_no_log_values
    # (called by am._handle_no_log_values). As a result, we can check for the
    # value in am.no_log_values.
    assert ""testing"" in am.no_log_values

@pytest.mark.parametrize(""stdin"", [{""arg_pass"": ""testing""}], indirect=[""stdin""])
def test_no_log_false(stdin, capfd):
    """"""Explicitly log and display an argument (no_log=False).""""""
    arg_spec = {
        ""arg_pass"": {""no_log"": False}
    }
    am = basic.AnsibleModule(arg_spec)
    assert ""testing"" not in am.no_log_values and not am._warnings

@pytest.mark.parametrize(""stdin"", [{""arg_pass"": ""testing""}], indirect=[""stdin""])
def test_no_log_none(stdin, capfd):
    """"""Allow Ansible to make the decision by matching the argument name
    against PASSWORD_MATCH.""""""
    arg_spec = {
        ""arg_pass"": {}
    }
    am = basic.AnsibleModule(arg_spec)
    # Omitting no_log is only picked up by _log_invocation, so the value never
    # makes it into am.no_log_values. Instead we can check for the warning
    # emitted by am._log_invocation.
    assert len(am._warnings) > 0
```"
-------------------------------------------------------------------------
"

@pytest.mark.parametrize(""stdin"", [{""arg_pass"": ""testing""}], indirect=[""stdin""])
def test_no_log_true(stdin, capfd):
""""""Explicitly mask an argument (no_log=True).""""""
arg_spec = {
    ""arg_pass"": {""no_log"": True}
}
am = basic.AnsibleModule(arg_spec)
# no_log=True is picked up by both am._log_invocation and list_no_log_values
# (called by am._handle_no_log_values). As a result, we can check for the
# value in am.no_log_values.
assert ""testing"" in am.no_log_values


est.mark.parametrize(""stdin"", [{""arg_pass"": ""testing""}], indirect=[""stdin""])
test_no_log_false(stdin, capfd):
""""""Explicitly log and display an argument (no_log=False).""""""
arg_spec = {
    ""arg_pass"": {""no_log"": False}
}
am = basic.AnsibleModule(arg_spec)
assert ""testing"" not in am.no_log_values and not am._warnings


est.mark.parametrize(""stdin"", [{""arg_pass"": ""testing""}], indirect=[""stdin""])
test_no_log_none(stdin, capfd):
""""""Allow Ansible to make the decision by matching the argument name
against PASSWORD_MATCH.""""""
arg_spec = {
    ""arg_pass"": {}
}
am = basic.AnsibleModule(arg_spec)
# Omitting no_log is only picked up by _log_invocation, so the value never
# makes it into am.no_log_values. Instead we can check for the warning
# emitted by am._log_invocation.
assert len(am._warnings) > 0
"
-------------------------------------------------------------------------
"Recom
PRs: 64733, 67439"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_native, to_text
"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native, to_text"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native, to_text
"
-------------------------------------------------------------------------
"Recom
PRs: 67312, 67394"
-------------------------------------------------------------------------
=========================================================================
"ipaddress.ip_address(to_text(ip_address))
"
-------------------------------------------------------------------------
"```python
ipaddress.ip_address(_text.to_text(ip_address))
```"
-------------------------------------------------------------------------
"ipaddress.ip_address(to_text(ip_address))
"
-------------------------------------------------------------------------
"Recom
PRs: 67312, 67394"
-------------------------------------------------------------------------
=========================================================================
"for key in to_remove:
    if key in to_set.keys():
        continue
    commands.append(""no {0}"".format(key))

"
-------------------------------------------------------------------------
"```python
to_remove_keys = to_remove.keys()
for key in to_remove_keys:
    if key in to_set.keys():
        continue
    commands.append(""no {0}"".format(key))
```"
-------------------------------------------------------------------------
"for key in to_remove:
    if key in to_set.keys():
        continue
    commands.append(""no {0}"".format(key))

"
-------------------------------------------------------------------------
"Recom
PRs: 67318, 67346"
-------------------------------------------------------------------------
=========================================================================
"vlan_id=10,
name=""tenreplaced"",
 = ['vlan 10', 'name tenreplaced', 'state suspend']
"
-------------------------------------------------------------------------
"```python
vlan_id=10,
name=""tenreplaced"",
config=[dict(
    state=""suspend""
)], state=""replaced""
```"
-------------------------------------------------------------------------
"#
# (c) 2019, Ansible by Red Hat, inc
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
#

from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

from units.compat.mock import patch
from ansible.modules.network.eos import eos_vlans
from units.modules.utils import set_module_args
from .eos_module import TestEosModule, load_fixture


class TestEosVlansModule(TestEosModule):
module = eos_vlans

def setUp(self):
    super(TestEosVlansModule, self).setUp()

    self.mock_get_config = patch('ansible.module_utils.network.common.network.Config.get_config')
    self.get_config = self.mock_get_config.start()

    self.mock_load_config = patch('ansible.module_utils.network.common.network.Config.load_config')
    self.load_config = self.mock_load_config.start()

    self.mock_get_resource_connection_config = patch('ansible.module_utils.network.common.cfg.base.get_resource_connection')
    self.get_resource_connection_config = self.mock_get_resource_connection_config.start()

    self.mock_get_resource_connection_facts = patch('ansible.module_utils.network.common.facts.facts.get_resource_connection')
    self.get_resource_connection_facts = self.mock_get_resource_connection_facts.start()

    self.mock_edit_config = patch('ansible.module_utils.network.eos.providers.providers.CliProvider.edit_config')
    self.edit_config = self.mock_edit_config.start()

    self.mock_execute_show_command = patch('ansible.module_utils.network.eos.config.vlans.vlans.Vlans.get_vlans_facts')
    self.execute_show_command = self.mock_execute_show_command.start()

def tearDown(self):
    super(TestEosVlansModule, self).tearDown()
    self.mock_get_resource_connection_config.stop()
    self.mock_get_resource_connection_facts.stop()
    self.mock_edit_config.stop()
    self.mock_get_config.stop()
    self.mock_load_config.stop()
    self.mock_execute_show_command.stop()

def load_fixtures(self, commands=None, transport='cli'):
    file_cmd = load_fixture('eos_vlan_config.cfg').split()
    file_cmd_dict = {}
    for i in range(0, len(file_cmd), 2):
        if file_cmd[i] == 'vlan_id':
            y = int(file_cmd[i  1])
        else:
            y = file_cmd[i  1]
        file_cmd_dict.update({file_cmd[i]: y})
    self.execute_show_command.return_value = [file_cmd_dict]

def test_eos_vlan_default(self):
    self.execute_show_command.return_value = []
    set_module_args(dict(
        config=[dict(
            vlan_id=30,
            name=""thirty""
        )]
    ))
    commands = ['vlan 30', 'name thirty']
    self.execute_module(changed=True, commands=commands)

def test_eos_vlan_default_idempotent(self):
    self.execute_show_command.return_value = load_fixture('eos_vlan_config.cfg')
    set_module_args(dict(
        config=[dict(
            vlan_id=10,
            name=""ten""
        )]
    ))
    self.execute_module(changed=False, commands=[])

def test_eos_vlan_merged(self):
    self.execute_show_command.return_value = []
    set_module_args(dict(
        config=[dict(
            vlan_id=30,
            name=""thirty""
        )], state=""merged""
    ))
    commands = ['vlan 30', 'name thirty']
    self.execute_module(changed=True, commands=commands)

def test_eos_vlan_merged_idempotent(self):
    self.execute_show_command.return_value = load_fixture('eos_vlan_config.cfg')
    set_module_args(dict(
        config=[dict(
            vlan_id=10,
            name=""ten""
        )], state=""merged""
    ))
    self.execute_module(changed=False, commands=[])

def test_eos_vlan_replaced(self):
    self.execute_show_command.return_value = []
    set_module_args(dict(
        config=[dict(
            vlan_id=10,
            name=""tenreplaced"",
            state=""suspend""
        )], state=""replaced""
    ))
    commands = ['vlan 10', 'name tenreplaced', 'state suspend']
    self.execute_module(changed=True, commands=commands)

def test_eos_vlan_replaced_idempotent(self):
    self.execute_show_command.return_value = load_fixture('eos_vlan_config.cfg')
    set_module_args(dict(
        config=[dict(
            vlan_id=10,
            name=""ten""
        )], state=""replaced""
    ))
    self.execute_module(changed=False, commands=[])

def test_eos_vlan_overridden(self):
    self.execute_show_command.return_value = []
    set_module_args(dict(
        config=[dict(
            vlan_id=30,
            name=""thirty"",
            state=""suspend""
        )], state=""overridden""
    ))
    commands = ['no vlan 10', 'vlan 30', 'name thirty', 'state suspend']
    self.execute_module(changed=True, commands=commands)

def test_eos_vlan_overridden_idempotent(self):
    self.execute_show_command.return_value = load_fixture('eos_vlan_config.cfg')
    set_module_args(dict(
        config=[dict(
            vlan_id=10,
            name=""ten""
        )], state=""overridden""
    ))
    self.execute_module(changed=False, commands=[])

def test_eos_vlan_deleted(self):
    set_module_args(dict(
        config=[dict(
            vlan_id=10,
            name=""ten"",
        )], state=""deleted""
    ))
    commands = ['no vlan 10']
    self.execute_module(changed=True, commands=commands)

def test_eos_vlan_id_datatype(self):
    set_module_args(dict(
        config=[dict(
            vlan_id=""thirty""
        )]
    ))
    result = self.execute_module(failed=True)
    self.assertIn(""we were unable to convert to int"", result['msg'])

def test_eos_vlan_state_datatype(self):
    set_module_args(dict(
        config=[dict(
            vlan_id=30,
            state=10
        )]
    ))
    result = self.execute_module(failed=True)
    self.assertIn(""value of state must be one of: active, suspend"", result['msg'])
"
-------------------------------------------------------------------------
"Recom
PRs: 67318, 67346"
-------------------------------------------------------------------------
=========================================================================
"conf = list(filter(None, conf.split(' ')))
"
-------------------------------------------------------------------------
"```python
conf = list(filter(None, conf[0].split(' ')))
```"
-------------------------------------------------------------------------
"conf = list(filter(None, conf.split(' ')))
"
-------------------------------------------------------------------------
"Recom
PRs: 64633, 67336"
-------------------------------------------------------------------------
=========================================================================
"conf = list(filter(None, conf.split(' ')))
"
-------------------------------------------------------------------------
"conf = list(filter(None, conf.split(' ')))"
-------------------------------------------------------------------------
"conf = list(filter(None, conf.split(' ')))
"
-------------------------------------------------------------------------
"Recom
PRs: 64633, 67336"
-------------------------------------------------------------------------
=========================================================================
"eos_vlans:
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.network.eos.config.vlans.vlans import Vlans
from ansible.module_utils.basic import AnsibleModule

def main():
    module = AnsibleModule(
        argument_spec=dict(
            vlan_id=dict(type='int', required=True)
        ),
        supports_check_mode=True
    )

    vlan_id = module.params['vlan_id']

    vlans = Vlans(module)
    changed = vlans.delete_vlan(vlan_id)

    module.exit_json(changed=changed)

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"eos_vlans:
"
-------------------------------------------------------------------------
"Recom
PRs: 66131, 67335"
-------------------------------------------------------------------------
=========================================================================
"eos_vlans:
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 #    name twenty
 
 - name: Merge given VLAN attributes with device configuration
     config:
       - vlan_id: 20
         state: suspend
"""""""
-------------------------------------------------------------------------
"eos_vlans:
"
-------------------------------------------------------------------------
"Recom
PRs: 66131, 67335"
-------------------------------------------------------------------------
=========================================================================
"eos_vlans:
"
-------------------------------------------------------------------------
"```python
EXAMPLES = """"""
 #    name twenty
 
 - name: Override device configuration of all VLANs with provided configuration
     config:
       - vlan_id: 20
         state: suspend
Required dependency: ansible.module_utils.network.eos.argspec.vlans.vlans, __future__, ansible.module_utils.basic, ansible.module_utils.network.eos.config.vlans.vlans, 
Original metadata: [stable-2.9] Fix eos_vlans docs
--wording in examples changed ios to eos (#66131)wrong module was used in examples: should be eos_vlans not ios_vlans(cherry picked from commit 506e2da0ff0088aa5287850a238289b82a98b0f7)Add changelog for eos_vlans docs fix##### SUMMARYBackport of https://github.com/ansible/ansible/pull/66131##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Bugfix Pull Request##### COMPONENT NAMEeos_vlans.py
backport, networking, module, core_review, stale_ci, support:community, support:network, bug, affects_2.9, backport_verified
""""""
```"
-------------------------------------------------------------------------
"eos_vlans:
"
-------------------------------------------------------------------------
"Recom
PRs: 66131, 67335"
-------------------------------------------------------------------------
=========================================================================
"eos_vlans:
"
-------------------------------------------------------------------------
"```python
# name twenty

- name: Replace all attributes of specified VLANs with provided configuration
  eos_vlans:
    vlan_id: 20
    state: suspend
```"
-------------------------------------------------------------------------
"eos_vlans:
"
-------------------------------------------------------------------------
"Recom
PRs: 66131, 67335"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.six.moves import shlex_quote
"
-------------------------------------------------------------------------
from ansible.module_utils.six.moves import shlex_quote
-------------------------------------------------------------------------
"from ansible.module_utils.six.moves import shlex_quote
"
-------------------------------------------------------------------------
"Recom
PRs: 66929, 67241"
-------------------------------------------------------------------------
=========================================================================
"return '%s %s %s' % (become, flags, shlex_quote(self._build_success_command(cmd, shell)))
"
-------------------------------------------------------------------------
"```python
return '{} {} {}'.format(become, flags, ansible.module_utils.six.moves.shlex_quote(self._build_success_command(cmd, shell)))
```"
-------------------------------------------------------------------------
"return '%s %s %s' % (become, flags, shlex_quote(self._build_success_command(cmd, shell)))
"
-------------------------------------------------------------------------
"Recom
PRs: 66929, 67241"
-------------------------------------------------------------------------
=========================================================================
"update_password=dict(type='str', default='always', choices=['always', 'on_create'], no_log=False),
password_lock=dict(type='bool', no_log=False),
"
-------------------------------------------------------------------------
"```python
update_password=dict(type='str', default='always', choices=['always', 'on_create']),
password_lock=dict(type='bool', no_log=False),
```"
-------------------------------------------------------------------------
"update_password=dict(type='str', default='always', choices=['always', 'on_create'], no_log=False),
password_lock=dict(type='bool', no_log=False),
"
-------------------------------------------------------------------------
"Recom
PRs: 66219, 67209"
-------------------------------------------------------------------------
=========================================================================
"if module._name == 'aws_az_facts':
    module.deprecate(""The 'aws_az_facts' module has been renamed to 'aws_az_info'"", version='2.14')
"
-------------------------------------------------------------------------
"```python
if module._name == 'aws_az_facts':
    module.deprecate(""The 'aws_az_facts' module has been renamed to 'aws_az_info'"", version='2.14')
```"
-------------------------------------------------------------------------
"if module._name == 'aws_az_facts':
    module.deprecate(""The 'aws_az_facts' module has been renamed to 'aws_az_info'"", version='2.14')
"
-------------------------------------------------------------------------
"Recom
PRs: 67188, 67208"
-------------------------------------------------------------------------
=========================================================================
"import os
"
-------------------------------------------------------------------------
"```python
import os
```"
-------------------------------------------------------------------------
"# The grp module does not distinguish between local and directory accounts.
# It's output cannot be used to determine whether or not a group exists locally.
# It returns True if the group exists locally or in the directory, so instead
# look in the local GROUP file for an existing account.
if self.local:
    if not os.path.exists(self.GROUPFILE):
        self.module.fail_json(msg=""'local: true' specified but unable to find local group file {0} to parse."".format(self.GROUPFILE))

    exists = False
    name_test = '{0}:'.format(self.name)
    with open(self.GROUPFILE, 'rb') as f:
        reversed_lines = f.readlines()[::-1]
        for line in reversed_lines:
            if line.startswith(to_bytes(name_test)):
                exists = True
                break

    if not exists:
        self.module.warn(
            ""'local: true' specified and group was not found in {file}. ""
            ""The local group may already exist if the local group database exists somewhere other than {file}."".format(file=self.GROUPFILE))

    return exists

else:
    try:
        if grp.getgrnam(self.name):
            return True
    except KeyError:
        return False
"
-------------------------------------------------------------------------
"Recom
PRs: 59772, 67176"
-------------------------------------------------------------------------
=========================================================================
"- ""When task with same description has already finished and you rerun taks it will create new job.""
"
-------------------------------------------------------------------------
"```yaml
options:
  description:
    description: ""When task with same description has already finished and you rerun taks it will create new job.""
    required: true
  state:
    description:
```"
-------------------------------------------------------------------------
"- ""When task with same description has already finished and you rerun taks it will create new job.""
"
-------------------------------------------------------------------------
"Recom
PRs: 66810, 67076"
-------------------------------------------------------------------------
=========================================================================
"if job is None or job.status in [otypes.JobStatus.FINISHED, otypes.JobStatus.FAILED]:
"
-------------------------------------------------------------------------
"if not job or job.status in [otypes.JobStatus.FINISHED, otypes.JobStatus.FAILED]:"
-------------------------------------------------------------------------
"if job is None or job.status in [otypes.JobStatus.FINISHED, otypes.JobStatus.FAILED]:
"
-------------------------------------------------------------------------
"Recom
PRs: 66810, 67076"
-------------------------------------------------------------------------
=========================================================================
"def process_options(module, options, full_key=None):
if full_key is None:
    full_key = []
        # Make sure that ""full key"" is contained
        full_key_k = full_key  [k]
        v['full_key'] = full_key_k

"
-------------------------------------------------------------------------
"```python
def process_options(module, options, full_key=None):
    if full_key is None:
        full_key = []
        # Make sure that ""full key"" is contained
        full_key_k = full_key[k]
        v['full_key'] = full_key_k
```"
-------------------------------------------------------------------------
"def process_options(module, options, full_key=None):
if full_key is None:
    full_key = []
        # Make sure that ""full key"" is contained
        full_key_k = full_key  [k]
        v['full_key'] = full_key_k

"
-------------------------------------------------------------------------
"Recom
PRs: 66895, 67057"
-------------------------------------------------------------------------
=========================================================================
"process_options(module, v['suboptions'], full_key=full_key_k)
process_options(module, v['suboptions'][0], full_key=full_key_k)
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.common.collections import is_sequence
from jinja2.filters import html_escape
from ansible.module_utils.common.collections import is_sequence
from ansible.module_utils.six import string_types
from copy import copy
from datetime import datetime
from __future__ import absolute_import
import warnings
import os
import distutils.version
import re
import pprint
from ansible.errors import AnsibleError
import ansible.utils.display as display
import sys
import json
import ansible.module_utils._text as _text

def process_options(module, v['suboptions'], full_key=full_key_k)
    if is_sequence(v['suboptions']):
        for item in v['suboptions']:
            process_options(module, item, full_key=full_key_k)
    else:
        process_options(module, v['suboptions'], full_key=full_key_k)
```"
-------------------------------------------------------------------------
"process_options(module, v['suboptions'], full_key=full_key_k)
process_options(module, v['suboptions'][0], full_key=full_key_k)
"
-------------------------------------------------------------------------
"Recom
PRs: 66895, 67057"
-------------------------------------------------------------------------
=========================================================================
"def process_returndocs(returndocs, full_key=None):
if full_key is None:
    full_key = []

if returndocs:
    for (k, v) in iteritems(returndocs):
        # Make sure that ""full key"" is contained
        full_key_k = full_key  [k]
        v['full_key'] = full_key_k

        # Process suboptions
        suboptions = v.get('contains')
        if suboptions:
            if isinstance(suboptions, dict):
                process_returndocs(suboptions, full_key=full_key_k)
            elif is_sequence(suboptions):
                process_returndocs(suboptions[0], full_key=full_key_k)


"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.common.collections import is_sequence
from ansible.module_utils.six import iteritems

def process_returndocs(returndocs, full_key=None):
    if full_key is None:
        full_key = []

    if returndocs:
        for (k, v) in iteritems(returndocs):
            # Make sure that ""full key"" is contained
            full_key_k = full_key + [k]
            v['full_key'] = full_key_k

            # Process suboptions
            suboptions = v.get('contains')
            if suboptions:
                if isinstance(suboptions, dict):
                    process_returndocs(suboptions, full_key=full_key_k)
                elif is_sequence(suboptions):
                    process_returndocs(suboptions[0], full_key=full_key_k)
```"
-------------------------------------------------------------------------
"def process_returndocs(returndocs, full_key=None):
if full_key is None:
    full_key = []

if returndocs:
    for (k, v) in iteritems(returndocs):
        # Make sure that ""full key"" is contained
        full_key_k = full_key  [k]
        v['full_key'] = full_key_k

        # Process suboptions
        suboptions = v.get('contains')
        if suboptions:
            if isinstance(suboptions, dict):
                process_returndocs(suboptions, full_key=full_key_k)
            elif is_sequence(suboptions):
                process_returndocs(suboptions[0], full_key=full_key_k)


"
-------------------------------------------------------------------------
"Recom
PRs: 66895, 67057"
-------------------------------------------------------------------------
=========================================================================
"process_returndocs(doc['returndocs'])
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.common.collections import process_returndocs

process_returndocs(doc['returndocs'])
```"
-------------------------------------------------------------------------
"process_returndocs(doc['returndocs'])
"
-------------------------------------------------------------------------
"Recom
PRs: 66895, 67057"
-------------------------------------------------------------------------
=========================================================================
"if self.disable_healthcheck:
    # Make sure image's health check is overridden
    result['healthcheck'] = {'test': ['NONE']}

"
-------------------------------------------------------------------------
"```python
if self.disable_healthcheck:
    result['healthcheck'] = {'test': ['NONE']}
```"
-------------------------------------------------------------------------
"if self.disable_healthcheck:
    # Make sure image's health check is overridden
    result['healthcheck'] = {'test': ['NONE']}

"
-------------------------------------------------------------------------
"Recom
PRs: 66599, 67056"
-------------------------------------------------------------------------
=========================================================================
"if self.healthcheck_disabled:
    if old_publish.healthcheck is None:
        return False
    if old_publish.healthcheck.get('test') == ['NONE']:
        return False
"
-------------------------------------------------------------------------
"```python
if self.healthcheck_disabled:
    if old_publish.healthcheck is None or old_publish.healthcheck.get('test') == ['NONE']:
        return False
```"
-------------------------------------------------------------------------
"if self.healthcheck_disabled:
    if old_publish.healthcheck is None:
        return False
    if old_publish.healthcheck.get('test') == ['NONE']:
        return False
"
-------------------------------------------------------------------------
"Recom
PRs: 66599, 67056"
-------------------------------------------------------------------------
=========================================================================
"elif self.healthcheck_disabled:
    container_spec_args['healthcheck'] = types.Healthcheck(test=['NONE'])
"
-------------------------------------------------------------------------
"```python
if self.healthcheck_disabled:
    container_spec_args['healthcheck'] = types.Healthcheck(test=['NONE'])
```"
-------------------------------------------------------------------------
"elif self.healthcheck_disabled:
    container_spec_args['healthcheck'] = types.Healthcheck(test=['NONE'])
"
-------------------------------------------------------------------------
"Recom
PRs: 66599, 67056"
-------------------------------------------------------------------------
=========================================================================
"def get_fingerprint(path, passphrase=None, content=None, backend='pyopenssl'):
privatekey = load_privatekey(path, passphrase=passphrase, content=content, check_passphrase=False, backend=backend)

if backend == 'pyopenssl':
        publickey = crypto.dump_publickey(crypto.FILETYPE_ASN1, privatekey)
        # If PyOpenSSL < 16.0 crypto.dump_publickey() will fail.
        try:
            bio = crypto._new_mem_buf()
            rc = crypto._lib.i2d_PUBKEY_bio(bio, privatekey._pkey)
            if rc != 1:
                crypto._raise_current_error()
            publickey = crypto._bio_to_string(bio)
        except AttributeError:
            # By doing this we prevent the code from raising an error
            # yet we return no value in the fingerprint hash.
            return None
elif backend == 'cryptography':
    publickey = privatekey.public_key().public_bytes(
        serialization.Encoding.DER,
        serialization.PublicFormat.SubjectPublicKeyInfo
    )

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.crypto import load_privatekey
from cryptography.hazmat.primitives import serialization
from OpenSSL import crypto

def get_fingerprint(path, passphrase=None, content=None, backend='pyopenssl'):
    privatekey = load_privatekey(path, passphrase=passphrase, content=content, check_passphrase=False, backend=backend)

    if backend == 'pyopenssl':
        publickey = crypto.dump_publickey(crypto.FILETYPE_ASN1, privatekey)
        try:
            bio = crypto._new_mem_buf()
            rc = crypto._lib.i2d_PUBKEY_bio(bio, privatekey._pkey)
            if rc != 1:
                crypto._raise_current_error()
            publickey = crypto._bio_to_string(bio)
        except AttributeError:
            return None
    elif backend == 'cryptography':
        publickey = privatekey.public_key().public_bytes(
            serialization.Encoding.DER,
            serialization.PublicFormat.SubjectPublicKeyInfo
        )

    return publickey
```"
-------------------------------------------------------------------------
"def get_fingerprint(path, passphrase=None, backend='pyopenssl'):
privatekey = load_privatekey(path, passphrase, check_passphrase=False, backend=backend)

if backend == 'pyopenssl':
        publickey = crypto.dump_publickey(crypto.FILETYPE_ASN1, privatekey)
        # If PyOpenSSL < 16.0 crypto.dump_publickey() will fail.
        try:
            bio = crypto._new_mem_buf()
            rc = crypto._lib.i2d_PUBKEY_bio(bio, privatekey._pkey)
            if rc != 1:
                crypto._raise_current_error()
            publickey = crypto._bio_to_string(bio)
        except AttributeError:
            # By doing this we prevent the code from raising an error
            # yet we return no value in the fingerprint hash.
            return None
elif backend == 'cryptography':
    publickey = privatekey.public_key().public_bytes(
        serialization.Encoding.DER,
        serialization.PublicFormat.SubjectPublicKeyInfo
    )

"
-------------------------------------------------------------------------
"Recom
PRs: 67036, 67039"
-------------------------------------------------------------------------
=========================================================================
"passphrase=self.privatekey_passphrase,
backend=self.backend,
"
-------------------------------------------------------------------------
"```python
passphrase=self.privatekey_passphrase,
backend=self.backend,
```"
-------------------------------------------------------------------------
"passphrase=self.privatekey_passphrase,
backend=self.backend,
"
-------------------------------------------------------------------------
"Recom
PRs: 67036, 67039"
-------------------------------------------------------------------------
=========================================================================
"# As we pass `--needed` to pacman returns a single line of ` there is nothing to do` if no change is performed.
# The check for > 3 is here because we pick the 4th line in normal operation.
if len(stdout.split('\n')) > 3:
    data = stdout.split('\n')[3].split(' ')[2:]
    data = [i for i in data if i != '']
    for i, pkg in enumerate(data):
        data[i] = re.sub('-[0-9].*$', '', data[i].split('/')[-1])
        if module._diff:
            diff['after'] = ""%s\n"" % pkg

    install_c = len(to_install_repos)
"
-------------------------------------------------------------------------
"```python
if len(stdout.split('\n')) > 3:
    data = stdout.split('\n')[3].split(' ')[2:]
    data = [i for i in data if i != '']
    for i, pkg in enumerate(data):
        data[i] = re.sub('-[0-9].*$', '', data[i].split('/')[-1])
        if module._diff:
            diff['after'] = ""%s\n"" % pkg

    install_c = len(to_install_repos)
```"
-------------------------------------------------------------------------
"# As we pass `--needed` to pacman returns a single line of ` there is nothing to do` if no change is performed.
# The check for > 3 is here because we pick the 4th line in normal operation.
if len(stdout.split('\n')) > 3:
    data = stdout.split('\n')[3].split(' ')[2:]
    data = [i for i in data if i != '']
    for i, pkg in enumerate(data):
        data[i] = re.sub('-[0-9].*$', '', data[i].split('/')[-1])
        if module._diff:
            diff['after'] = ""%s\n"" % pkg

    install_c = len(to_install_repos)
"
-------------------------------------------------------------------------
"Recom
PRs: 65750, 67011"
-------------------------------------------------------------------------
=========================================================================
"# As we pass `--needed` to pacman returns a single line of ` there is nothing to do` if no change is performed.
# The check for > 3 is here because we pick the 4th line in normal operation.
if len(stdout.split('\n')) > 3:
    data = stdout.split('\n')[3].split(' ')[2:]
    data = [i for i in data if i != '']
    for i, pkg in enumerate(data):
        data[i] = re.sub('-[0-9].*$', '', data[i].split('/')[-1])
        if module._diff:
            diff['after'] = ""%s\n"" % pkg

    install_c = len(to_install_files)
"
-------------------------------------------------------------------------
"```python
if len(stdout.split('\n')) > 3:
    data = stdout.split('\n')[3].split(' ')[2:]
    data = [i for i in data if i != '']
    for i, pkg in enumerate(data):
        data[i] = re.sub('-[0-9].*$', '', data[i].split('/')[-1])
        if module._diff:
            diff['after'] = ""%s\n"" % pkg

    install_c = len(to_install_files)
```"
-------------------------------------------------------------------------
"# As we pass `--needed` to pacman returns a single line of ` there is nothing to do` if no change is performed.
# The check for > 3 is here because we pick the 4th line in normal operation.
if len(stdout.split('\n')) > 3:
    data = stdout.split('\n')[3].split(' ')[2:]
    data = [i for i in data if i != '']
    for i, pkg in enumerate(data):
        data[i] = re.sub('-[0-9].*$', '', data[i].split('/')[-1])
        if module._diff:
            diff['after'] = ""%s\n"" % pkg

    install_c = len(to_install_files)
"
-------------------------------------------------------------------------
"Recom
PRs: 65750, 67011"
-------------------------------------------------------------------------
=========================================================================
"if (len(identifier_fragments) - 1) > _MYSQL_IDENTIFIER_TO_DOT_LEVEL[id_type]:
"
-------------------------------------------------------------------------
if (len(identifier_fragments) - 1) > _MYSQL_IDENTIFIER_TO_DOT_LEVEL[id_type]:
-------------------------------------------------------------------------
"if (len(identifier_fragments) - 1) > _MYSQL_IDENTIFIER_TO_DOT_LEVEL[id_type]:
"
-------------------------------------------------------------------------
"Recom
PRs: 66806, 67007"
-------------------------------------------------------------------------
=========================================================================
"if match('^[0-9a-z_.]$', mysqlvar) is None:
"
-------------------------------------------------------------------------
"```python
import re

if re.match('^[0-9a-z_.]*$', mysqlvar) is None:
```"
-------------------------------------------------------------------------
"if match('^[0-9a-z_.]$', mysqlvar) is None:
"
-------------------------------------------------------------------------
"Recom
PRs: 66806, 67007"
-------------------------------------------------------------------------
=========================================================================
"- name: MySQL provided privileges reference
description: Complete reference of the MySQL provided privileges documentation.
link: https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html
"
-------------------------------------------------------------------------
"```yaml
seealso:
  - name: MySQL provided privileges reference
    description: Complete reference of the MySQL provided privileges documentation.
    link: https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html
```"
-------------------------------------------------------------------------
"- name: MySQL provided privileges reference
description: Complete reference of the MySQL provided privileges documentation.
link: https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html
"
-------------------------------------------------------------------------
"Recom
PRs: 66995, 66999"
-------------------------------------------------------------------------
=========================================================================
"'CREATE ROLE', 'DROP ROLE', 'APPLICATION_PASSWORD_ADMIN',
'AUDIT_ADMIN', 'BACKUP_ADMIN', 'BINLOG_ADMIN',
'BINLOG_ENCRYPTION_ADMIN', 'CLONE_ADMIN', 'CONNECTION_ADMIN',
'ENCRYPTION_KEY_ADMIN', 'FIREWALL_ADMIN', 'FIREWALL_USER',
'GROUP_REPLICATION_ADMIN', 'INNODB_REDO_LOG_ARCHIVE',
'NDB_STORED_USER', 'PERSIST_RO_VARIABLES_ADMIN',
'REPLICATION_APPLIER', 'REPLICATION_SLAVE_ADMIN',
'RESOURCE_GROUP_ADMIN', 'RESOURCE_GROUP_USER',
'ROLE_ADMIN', 'SESSION_VARIABLES_ADMIN', 'SET_USER_ID',
'SYSTEM_USER', 'SYSTEM_VARIABLES_ADMIN', 'SYSTEM_USER',
'TABLE_ENCRYPTION_ADMIN', 'VERSION_TOKEN_ADMIN',
'XA_RECOVER_ADMIN', 'LOAD FROM S3', 'SELECT INTO S3'))
"
-------------------------------------------------------------------------
"```python
VALID_PRIVS = frozenset(('CREATE_ROLE', 'DROP_ROLE', 'APPLICATION_PASSWORD_ADMIN',
                        'AUDIT_ADMIN', 'BACKUP_ADMIN', 'BINLOG_ADMIN',
                        'BINLOG_ENCRYPTION_ADMIN', 'CLONE_ADMIN', 'CONNECTION_ADMIN',
                        'ENCRYPTION_KEY_ADMIN', 'FIREWALL_ADMIN', 'FIREWALL_USER',
                        'GROUP_REPLICATION_ADMIN', 'INNODB_REDO_LOG_ARCHIVE',
                        'NDB_STORED_USER', 'PERSIST_RO_VARIABLES_ADMIN',
                        'REPLICATION_APPLIER', 'REPLICATION_SLAVE_ADMIN',
                        'RESOURCE_GROUP_ADMIN', 'RESOURCE_GROUP_USER',
                        'ROLE_ADMIN', 'SESSION_VARIABLES_ADMIN', 'SET_USER_ID',
                        'SYSTEM_USER', 'SYSTEM_VARIABLES_ADMIN', 'SYSTEM_USER',
                        'TABLE_ENCRYPTION_ADMIN', 'VERSION_TOKEN_ADMIN',
                        'XA_RECOVER_ADMIN', 'LOAD FROM S3', 'SELECT INTO S3'))
```"
-------------------------------------------------------------------------
"'CREATE ROLE', 'DROP ROLE', 'APPLICATION_PASSWORD_ADMIN',
'AUDIT_ADMIN', 'BACKUP_ADMIN', 'BINLOG_ADMIN',
'BINLOG_ENCRYPTION_ADMIN', 'CONNECTION_ADMIN',
'ENCRYPTION_KEY_ADMIN', 'FIREWALL_ADMIN', 'FIREWALL_USER',
'GROUP_REPLICATION_ADMIN', 'PERSIST_RO_VARIABLES_ADMIN',
'REPLICATION_SLAVE_ADMIN', 'RESOURCE_GROUP_ADMIN', 'RESOURCE_GROUP_USER',
'ROLE_ADMIN', 'SESSION_VARIABLES_ADMIN', 'SET_USER_ID',
'SYSTEM_VARIABLES_ADMIN', 'VERSION_TOKEN_ADMIN', 'XA_RECOVER_ADMIN'))
"
-------------------------------------------------------------------------
"Recom
PRs: 66995, 66999"
-------------------------------------------------------------------------
=========================================================================
"- name: MySQL provided privileges reference
description: Complete reference of the MySQL provided privileges documentation.
link: https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html
"
-------------------------------------------------------------------------
"```yaml
seealso:
  - name: MySQL provided privileges reference
    description: Complete reference of the MySQL provided privileges documentation.
    link: https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html
```"
-------------------------------------------------------------------------
"- name: MySQL provided privileges reference
description: Complete reference of the MySQL provided privileges documentation.
link: https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html
"
-------------------------------------------------------------------------
"Recom
PRs: 66995, 66998"
-------------------------------------------------------------------------
=========================================================================
"'CREATE ROLE', 'DROP ROLE', 'APPLICATION_PASSWORD_ADMIN',
'AUDIT_ADMIN', 'BACKUP_ADMIN', 'BINLOG_ADMIN',
'BINLOG_ENCRYPTION_ADMIN', 'CLONE_ADMIN', 'CONNECTION_ADMIN',
'ENCRYPTION_KEY_ADMIN', 'FIREWALL_ADMIN', 'FIREWALL_USER',
'GROUP_REPLICATION_ADMIN', 'INNODB_REDO_LOG_ARCHIVE',
'NDB_STORED_USER', 'PERSIST_RO_VARIABLES_ADMIN',
'REPLICATION_APPLIER', 'REPLICATION_SLAVE_ADMIN',
'RESOURCE_GROUP_ADMIN', 'RESOURCE_GROUP_USER',
'ROLE_ADMIN', 'SESSION_VARIABLES_ADMIN', 'SET_USER_ID',
'SYSTEM_USER', 'SYSTEM_VARIABLES_ADMIN', 'SYSTEM_USER',
'TABLE_ENCRYPTION_ADMIN', 'VERSION_TOKEN_ADMIN',
'XA_RECOVER_ADMIN', 'LOAD FROM S3', 'SELECT INTO S3'))
"
-------------------------------------------------------------------------
"VALID_PRIVS = frozenset(('CREATE ROLE', 'DROP ROLE', 'APPLICATION_PASSWORD_ADMIN', 'AUDIT_ADMIN', 'BACKUP_ADMIN', 'BINLOG_ADMIN', 'BINLOG_ENCRYPTION_ADMIN', 'CLONE_ADMIN', 'CONNECTION_ADMIN', 'ENCRYPTION_KEY_ADMIN', 'FIREWALL_ADMIN', 'FIREWALL_USER', 'GROUP_REPLICATION_ADMIN', 'INNODB_REDO_LOG_ARCHIVE', 'NDB_STORED_USER', 'PERSIST_RO_VARIABLES_ADMIN', 'REPLICATION_APPLIER', 'REPLICATION_SLAVE_ADMIN', 'RESOURCE_GROUP_ADMIN', 'RESOURCE_GROUP_USER', 'ROLE_ADMIN', 'SESSION_VARIABLES_ADMIN', 'SET_USER_ID', 'SYSTEM_USER', 'SYSTEM_VARIABLES_ADMIN', 'SYSTEM_USER', 'TABLE_ENCRYPTION_ADMIN', 'VERSION_TOKEN_ADMIN', 'XA_RECOVER_ADMIN', 'LOAD FROM S3', 'SELECT INTO S3'))"
-------------------------------------------------------------------------
"'CREATE ROLE', 'DROP ROLE', 'APPLICATION_PASSWORD_ADMIN',
'AUDIT_ADMIN', 'BACKUP_ADMIN', 'BINLOG_ADMIN',
'BINLOG_ENCRYPTION_ADMIN', 'CLONE_ADMIN', 'CONNECTION_ADMIN',
'ENCRYPTION_KEY_ADMIN', 'FIREWALL_ADMIN', 'FIREWALL_USER',
'GROUP_REPLICATION_ADMIN', 'INNODB_REDO_LOG_ARCHIVE',
'NDB_STORED_USER', 'PERSIST_RO_VARIABLES_ADMIN',
'REPLICATION_APPLIER', 'REPLICATION_SLAVE_ADMIN',
'RESOURCE_GROUP_ADMIN', 'RESOURCE_GROUP_USER',
'ROLE_ADMIN', 'SESSION_VARIABLES_ADMIN', 'SET_USER_ID',
'SYSTEM_USER', 'SYSTEM_VARIABLES_ADMIN', 'SYSTEM_USER',
'TABLE_ENCRYPTION_ADMIN', 'VERSION_TOKEN_ADMIN',
'XA_RECOVER_ADMIN', 'LOAD FROM S3', 'SELECT INTO S3'))
"
-------------------------------------------------------------------------
"Recom
PRs: 66995, 66998"
-------------------------------------------------------------------------
=========================================================================
"if hasattr(self._task._ds, '_data_source'):
    current_dir = (
        ""/"".join(self._task._ds._data_source.split('/')[:-1])
    )
    self.source_dir = path.join(current_dir, self.source_dir)
"
-------------------------------------------------------------------------
"```python
if hasattr(self._task._ds, '_data_source'):
    current_dir = (
        ""/"".join(self._task._ds._data_source.split('/')[:-1])
    )
    self.source_dir = path.join(current_dir, self.source_dir)
```"
-------------------------------------------------------------------------
"if hasattr(self._task._ds, '_data_source'):
    current_dir = (
        ""/"".join(self._task._ds._data_source.split('/')[:-1])
    )
    self.source_dir = path.join(current_dir, self.source_dir)
"
-------------------------------------------------------------------------
"Recom
PRs: 66581, 66910"
-------------------------------------------------------------------------
=========================================================================
"# There must be double quotes around name, because some oVirt resources it's possible to create then with space in name.
search=' and '.join('{0}=""{1}""'.format(k, v) for k, v in kwargs.items()),
"
-------------------------------------------------------------------------
"```python
# There must be double quotes around name, because some oVirt resources it's possible to create then with space in name.
search=' and '.join('{0}=""{1}""'.format(k, v) for k, v in kwargs.items())
```"
-------------------------------------------------------------------------
"# There must be double quotes around name, because some oVirt resources it's possible to create then with space in name.
search=' and '.join('{0}=""{1}""'.format(k, v) for k, v in kwargs.items()),
"
-------------------------------------------------------------------------
"Recom
PRs: 59184, 66890"
-------------------------------------------------------------------------
=========================================================================
"# There must be double quotes around name, because some oVirt resources it's possible to create then with space in name.
search='name=""{name}""'.format(name=name)
"
-------------------------------------------------------------------------
"```python
search = 'name=""{name}""'.format(name=name)
```"
-------------------------------------------------------------------------
"# There must be double quotes around name, because some oVirt resources it's possible to create then with space in name.
search='name=""{name}""'.format(name=name)
"
-------------------------------------------------------------------------
"Recom
PRs: 59184, 66890"
-------------------------------------------------------------------------
=========================================================================
"if self.param('external_provider'):
    ons_service = self._connection.system_service().openstack_network_providers_service()
    on_service = ons_service.provider_service(get_id_by_name(ons_service, self.param('external_provider')))
"
-------------------------------------------------------------------------
"```python
if self.param('external_provider'):
    ons_service = self._connection.system_service().openstack_network_providers_service()
    on_service = ons_service.provider_service(get_id_by_name(ons_service, self.param('external_provider')))
```"
-------------------------------------------------------------------------
"if self.param('external_provider'):
    ons_service = self._connection.system_service().openstack_network_providers_service()
    on_service = ons_service.provider_service(get_id_by_name(ons_service, self.param('external_provider')))
"
-------------------------------------------------------------------------
"Recom
PRs: 66859, 66886"
-------------------------------------------------------------------------
=========================================================================
"# Determine the ""rewind point"" of the worker list. This means we start
# iterating over the list of workers until the end of the list is found.
# Normally, that is simply the length of the workers list (as determined
# by the forks or serial setting), however a task/block/play may ""throttle""
# that limit down.
rewind_point = len(self._workers)
if throttle > 0 and self.ALLOW_BASE_THROTTLING:
    if task.run_once:
        display.debug(""Ignoring 'throttle' as 'run_once' is also set for '%s'"" % task.get_name())
    else:
        if throttle <= rewind_point:
            display.debug(""task: %s, throttle: %d"" % (task.get_name(), throttle))
            rewind_point = throttle

    if self._cur_worker >= rewind_point:
        self._cur_worker = 0

"
-------------------------------------------------------------------------
"```python
rewind_point = len(self._workers)
if throttle > 0 and self.ALLOW_BASE_THROTTLING:
    if task.run_once:
        display.debug(""Ignoring 'throttle' as 'run_once' is also set for '%s'"" % task.get_name())
    else:
        if throttle <= rewind_point:
            display.debug(""task: %s, throttle: %d"" % (task.get_name(), throttle))
            rewind_point = throttle

    if self._cur_worker >= rewind_point:
        self._cur_worker = 0
```"
-------------------------------------------------------------------------
"# Determine the ""rewind point"" of the worker list. This means we start
# iterating over the list of workers until the end of the list is found.
# Normally, that is simply the length of the workers list (as determined
# by the forks or serial setting), however a task/block/play may ""throttle""
# that limit down.
rewind_point = len(self._workers)
if throttle > 0 and self.ALLOW_BASE_THROTTLING:
    if task.run_once:
        display.debug(""Ignoring 'throttle' as 'run_once' is also set for '%s'"" % task.get_name())
    else:
        if throttle <= rewind_point:
            display.debug(""task: %s, throttle: %d"" % (task.get_name(), throttle))
            rewind_point = throttle

    if self._cur_worker >= rewind_point:
        self._cur_worker = 0

"
-------------------------------------------------------------------------
"Recom
PRs: 65422, 66805"
-------------------------------------------------------------------------
=========================================================================
"time.sleep(1.5)
"
-------------------------------------------------------------------------
"import time
time.sleep(1.5)"
-------------------------------------------------------------------------
"time.sleep(1.5)
"
-------------------------------------------------------------------------
"Recom
PRs: 65422, 66805"
-------------------------------------------------------------------------
=========================================================================
"mock_task.throttle = 0
"
-------------------------------------------------------------------------
"```python
mock_task.throttle = 0
```"
-------------------------------------------------------------------------
"mock_task.throttle = 0
"
-------------------------------------------------------------------------
"Recom
PRs: 65422, 66805"
-------------------------------------------------------------------------
=========================================================================
"self.prev = None
self.next = None
"
-------------------------------------------------------------------------
"```python
self.prev = None
self.next = None
```"
-------------------------------------------------------------------------
"self.prev = None
self.next = None
"
-------------------------------------------------------------------------
"Recom
PRs: 66398, 66776"
-------------------------------------------------------------------------
=========================================================================
"if current_line.next is not None:
    current_line.next.prev = current_line.prev
"
-------------------------------------------------------------------------
"if current_line.next is not None:
    current_line.next.prev = current_line.prev"
-------------------------------------------------------------------------
"if current_line.next is not None:
    current_line.next.prev = current_line.prev
"
-------------------------------------------------------------------------
"Recom
PRs: 66398, 66776"
-------------------------------------------------------------------------
=========================================================================
"self.no_header_system_auth_string = """"""auth       required pam_env.so
   sufficient pam_unix.so nullok try_first_pass
   requisite pam_succeed_if.so uid
   required pam_deny.so


"
-------------------------------------------------------------------------
"```python
self.no_header_system_auth_string = """"""
auth       required pam_env.so
   sufficient pam_unix.so nullok try_first_pass
   requisite pam_succeed_if.so uid
   required pam_deny.so
""""""
```"
-------------------------------------------------------------------------
"self.no_header_system_auth_string = """"""auth       required pam_env.so
   sufficient pam_unix.so nullok try_first_pass
   requisite pam_succeed_if.so uid
   required pam_deny.so


"
-------------------------------------------------------------------------
"Recom
PRs: 66398, 66776"
-------------------------------------------------------------------------
=========================================================================
"
def test_remove_first_rule(self):
    no_header_service = PamdService(self.no_header_system_auth_string)
    self.assertTrue(no_header_service.remove('auth', 'required', 'pam_env.so'))
    test_rule = PamdRule('auth', 'required', 'pam_env.so')
    self.assertNotIn(str(test_rule), str(no_header_service))

def test_remove_last_rule(self):
    self.assertTrue(self.pamd.remove('session', 'required', 'pam_unix.so'))
    test_rule = PamdRule('session', 'required', 'pam_unix.so')
    self.assertNotIn(str(test_rule), str(self.pamd))
"
-------------------------------------------------------------------------
"def test_remove_first_rule(self):
    no_header_service = PamdService(self.no_header_system_auth_string)
    self.assertTrue(no_header_service.remove('auth', 'required', 'pam_env.so'))
    test_rule = PamdRule('auth', 'required', 'pam_env.so')
    self.assertNotIn(str(test_rule), str(no_header_service))

def test_remove_last_rule(self):
    self.assertFalse(self.pamd.remove('session', 'required', 'pam_unix.so'))
    test_rule = PamdRule('session', 'required', 'pam_unix.so')
    self.assertNotIn(str(test_rule), str(self.pamd))"
-------------------------------------------------------------------------
"
def test_remove_first_rule(self):
    no_header_service = PamdService(self.no_header_system_auth_string)
    self.assertTrue(no_header_service.remove('auth', 'required', 'pam_env.so'))
    test_rule = PamdRule('auth', 'required', 'pam_env.so')
    self.assertNotIn(str(test_rule), str(no_header_service))

def test_remove_last_rule(self):
    self.assertTrue(self.pamd.remove('session', 'required', 'pam_unix.so'))
    test_rule = PamdRule('session', 'required', 'pam_unix.so')
    self.assertNotIn(str(test_rule), str(self.pamd))
"
-------------------------------------------------------------------------
"Recom
PRs: 66398, 66776"
-------------------------------------------------------------------------
=========================================================================
"if color:
    msg2 = stringc(msg2, color)

"
-------------------------------------------------------------------------
"```python
if color:
    msg2 = stringc(msg2, color=color)
```"
-------------------------------------------------------------------------
"if color:
    msg2 = stringc(msg2, color)

"
-------------------------------------------------------------------------
"Recom
PRs: 65199, 66768"
-------------------------------------------------------------------------
=========================================================================
"""""""
ios_config:
  lines: ""{{ macro_lines }}""
  parents: ""macro name {{ macro_name }}""
  after: '@'
  match: line
  replace: block
""""""
self.check_edit_config_capability(operations, candidate, commit, replace, comment)
    self.send_command('config terminal')
    time.sleep(0.1)
    # first item: macro command
    commands = (candidate.pop(0)  '\n')
    multiline_delimiter = candidate.pop(-1)
        commands = (' '  line  '\n')
    commands = (multiline_delimiter  '\n')
    obj = {'command': commands, 'sendonly': True}
    results.append(self.send_command(**obj))
    requests.append(commands)
    time.sleep(0.1)
"
-------------------------------------------------------------------------
"```python
ios_config:
  lines: ""{{ macro_lines }}""
  parents: ""macro name {{ macro_name }}""
  after: '@'
  match: line
  replace: block
""""""
self.check_edit_config_capability(operations, candidate, commit, replace, comment)
self.send_command('config terminal')
time.sleep(0.1)
# first item: macro command
commands = (candidate.pop(0) + '\n')
multiline_delimiter = candidate.pop(-1)
commands = (' '.join(candidate) + '\n')
commands += (multiline_delimiter + '\n')
obj = {'command': commands, 'sendonly': True}
results.append(self.send_command(**obj))
requests.append(commands)
time.sleep(0.1)
```"
-------------------------------------------------------------------------
"""""""
ios_config:
  lines: ""{{ macro_lines }}""
  parents: ""macro name {{ macro_name }}""
  after: '@'
  match: line
  replace: block
""""""
self.check_edit_config_capability(operations, candidate, commit, replace, comment)
    self.send_command('config terminal')
    time.sleep(0.1)
    # first item: macro command
    commands = (candidate.pop(0)  '\n')
    multiline_delimiter = candidate.pop(-1)
        commands = (' '  line  '\n')
    commands = (multiline_delimiter  '\n')
    obj = {'command': commands, 'sendonly': True}
    results.append(self.send_command(**obj))
    requests.append(commands)
    time.sleep(0.1)
"
-------------------------------------------------------------------------
"Recom
PRs: 55220, 66757"
-------------------------------------------------------------------------
=========================================================================
"if file_requirements is None:
"
-------------------------------------------------------------------------
"```python
if file_requirements is None:
    raise AnsibleError(""No requirements found in file '%s'"" % to_native(requirements_file))
```"
-------------------------------------------------------------------------
"if file_requirements is None:
"
-------------------------------------------------------------------------
"Recom
PRs: 66726, 66752"
-------------------------------------------------------------------------
=========================================================================
"test_key_dict = dict()
elif k == 'ipv6' and value.lower() != have.get(k)[0].get(key).lower():
    # as multiple IPV6 address can be configured on same
    # interface, for replace state in place update will
    # actually create new entry, which isn't as expected
    # for replace state, so in case of IPV6 address
    # every time 1st delete the existing IPV6 config and
    # then apply the new change
    dict_val = have.get(k)[0].get(key)
    test_key_dict.update({key: dict_val})
test_key_dict = dict()
elif k == 'ipv6' and value.lower() != have.get(k)[0].get(key).lower():
    dict_val = have.get(k)[0].get(key)
    test_key_dict.update({key: dict_val})
"
-------------------------------------------------------------------------
"def dict_to_set(sample_dict):
 def filter_dict_having_none_value(want, have):
     # Generate dict with have dict value which is None in want dict
     test_dict = dict()
     name = want.get('name')
     if name:
         test_dict['name'] = name
     diff_ip = False
     for k, v in iteritems(want):
         if isinstance(v, dict):
             for key, value in iteritems(v):
                 if value is None:
                     dict_val = have.get(k).get(key)
                     test_key_dict.update({key: dict_val})
                 if k == 'ipv6' and value.lower() != have.get(k)[0].get(key).lower():
                     dict_val = have.get(k)[0].get(key)
                     test_key_dict.update({key: dict_val})
                 test_dict.update({k: test_key_dict})
         if isinstance(v, list):
             for key, value in iteritems(v[0]):
                 if value is None:
                     dict_val = have.get(k).get(key)
                     test_key_dict.update({key: dict_val})
                 if k == 'ipv6' and value.lower() != have.get(k)[0].get(key).lower():
                     dict_val = have.get(k)[0].get(key)
                     test_key_dict.update({key: dict_val})
                 test_dict.update({k: test_key_dict})
             # below conditions checks are added to check if
             # secondary IP is configured, if yes then delete

Required dependency: ansible.module_utils.six, __future__, ansible.module_utils.network.common.utils,"
-------------------------------------------------------------------------
"test_key_dict = dict()
elif k == 'ipv6' and value.lower() != have.get(k)[0].get(key).lower():
    # as multiple IPV6 address can be configured on same
    # interface, for replace state in place update will
    # actually create new entry, which isn't as expected
    # for replace state, so in case of IPV6 address
    # every time 1st delete the existing IPV6 config and
    # then apply the new change
    dict_val = have.get(k)[0].get(key)
    test_key_dict.update({key: dict_val})
test_key_dict = dict()
elif k == 'ipv6' and value.lower() != have.get(k)[0].get(key).lower():
    dict_val = have.get(k)[0].get(key)
    test_key_dict.update({key: dict_val})
"
-------------------------------------------------------------------------
"Recom
PRs: 66654, 66680"
-------------------------------------------------------------------------
=========================================================================
"getval: path (?P<name>(\\S|"".*""))( depth (?P<depth>\\S))?( query-condition (?P<query_condition>\\S))?( filter-condition (?P<filter_condition>\\S))?$
"
-------------------------------------------------------------------------
"```yaml
setval: path {name} depth {depth} query-condition {query_condition} filter-condition {filter_condition}
```"
-------------------------------------------------------------------------
"getval: path (?P<name>(\\S|"".*""))( depth (?P<depth>\\S))?( query-condition (?P<query_condition>\\S))?( filter-condition (?P<filter_condition>\\S))?$
"
-------------------------------------------------------------------------
"Recom
PRs: 66439, 66677"
-------------------------------------------------------------------------
=========================================================================
"def test_tms_sensorgroup_quotes_merged_idempotent_n9k(self):
    # Assumes feature telemetry is enabled
    # TMS sensorgroup config is present with quotes in NX-API path.
    self.execute_show_command.return_value = load_fixture('nxos_telemetry', 'N9K_SGs.cfg')
    self.get_platform_shortname.return_value = 'N9K'
    args = build_args([
        {'id': '2',
         'data_source': 'NX-API',
         'path': {'name': '""show mac address-table count""', 'depth': 2},
         },
        {'id': '3',
         'data_source': 'NX-API',
         'path': {'name': '""show interface ethernet1/1-52""'},
         },
        {'id': '1',
         'path': {'name': 'sys/procsys', 'depth': 1},
         },
    ], 'sensor_groups')
    set_module_args(args, ignore_provider_arg)
    self.execute_module(changed=False)

"
-------------------------------------------------------------------------
"```python
def test_tms_sensorgroup_quotes_merged_idempotent_n9k(self):
    self.execute_show_command.return_value = load_fixture('nxos_telemetry', 'N9K_SGs.cfg')
    self.get_platform_shortname.return_value = 'N9K'
    args = build_args([
        {'id': '2',
         'data_source': 'NX-API',
         'path': {'name': '""show mac address-table count""', 'depth': 2},
         },
        {'id': '3',
         'data_source': 'NX-API',
         'path': {'name': '""show interface ethernet1/1-52""'},
         },
        {'id': '1',
         'path': {'name': 'sys/procsys', 'depth': 1},
         },
    ], 'sensor_groups')
    set_module_args(args, ignore_provider_arg)
    self.execute_module(changed=False)
```  "
-------------------------------------------------------------------------
"def test_tms_sensorgroup_quotes_merged_idempotent_n9k(self):
    # Assumes feature telemetry is enabled
    # TMS sensorgroup config is present with quotes in NX-API path.
    self.execute_show_command.return_value = load_fixture('nxos_telemetry', 'N9K_SGs.cfg')
    self.get_platform_shortname.return_value = 'N9K'
    args = build_args([
        {'id': '2',
         'data_source': 'NX-API',
         'path': {'name': '""show mac address-table count""', 'depth': 2},
         },
        {'id': '3',
         'data_source': 'NX-API',
         'path': {'name': '""show interface ethernet1/1-52""'},
         },
        {'id': '1',
         'path': {'name': 'sys/procsys', 'depth': 1},
         },
    ], 'sensor_groups')
    set_module_args(args, ignore_provider_arg)
    self.execute_module(changed=False)

"
-------------------------------------------------------------------------
"Recom
PRs: 66439, 66677"
-------------------------------------------------------------------------
=========================================================================
":kw pass_fds: When running on Python 3 this argument
    to an underlying ``Popen`` constructor. On Python 2, this will
    set ``close_fds`` to False.
"
-------------------------------------------------------------------------
"```python
kw = {'pass_fds': ansible.module_utils._text.pass_fds}
```"
-------------------------------------------------------------------------
":kw pass_fds: When running on Python 3 this argument
    to an underlying ``Popen`` constructor. On Python 2, this will
    set ``close_fds`` to False.
"
-------------------------------------------------------------------------
"Recom
PRs: 66542, 66661"
-------------------------------------------------------------------------
=========================================================================
"elif PY2 and pass_fds:
    kwargs['close_fds'] = False
"
-------------------------------------------------------------------------
"```python
elif PY2 and pass_fds:
    kwargs['close_fds'] = False
```"
-------------------------------------------------------------------------
"elif PY2 and pass_fds:
    kwargs['close_fds'] = False
"
-------------------------------------------------------------------------
"Recom
PRs: 66542, 66661"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.six import PY2
"
-------------------------------------------------------------------------
"from ansible.module_utils.six import PY2, BytesIO"
-------------------------------------------------------------------------
"from ansible.module_utils.six import PY2
"
-------------------------------------------------------------------------
"Recom
PRs: 66542, 66661"
-------------------------------------------------------------------------
=========================================================================
"

@pytest.mark.parametrize('stdin', [{}], indirect=['stdin'])
def test_run_command_fds(mocker, rc_am):
subprocess_mock = mocker.patch('ansible.module_utils.basic.subprocess')
subprocess_mock.Popen.side_effect = AssertionError

try:
    rc_am.run_command('synchronize', pass_fds=(101, 42))
except SystemExit:
    pass

if PY2:
    assert subprocess_mock.Popen.call_args[1]['close_fds'] is False
    assert 'pass_fds' not in subprocess_mock.Popen.call_args[1]

else:
    assert subprocess_mock.Popen.call_args[1]['pass_fds'] == (101, 42)
    assert subprocess_mock.Popen.call_args[1]['close_fds'] is True
"
-------------------------------------------------------------------------
"```python
import io
import __future__
import pytest
import itertools
import ansible.module_utils._text
import errno

class TestRunCommandOutput:
    # bytes because it's returning native strings
    assert stdout == to_native(u'Žarn§')
    assert stderr == to_native(u'لرئيسية')
    
@pytest.mark.parametrize('stdin', [{}], indirect=['stdin'])
def test_run_command_fds(mocker, rc_am):
    subprocess_mock = mocker.patch('ansible.module_utils.basic.subprocess')
    subprocess_mock.Popen.side_effect = AssertionError

    try:
        rc_am.run_command('synchronize', pass_fds=(101, 42))
    except SystemExit:
        pass

    if PY2:
        assert subprocess_mock.Popen.call_args[1]['close_fds'] is False
        assert 'pass_fds' not in subprocess_mock.Popen.call_args[1]
    else:
        assert subprocess_mock.Popen.call_args[1]['pass_fds'] == (101, 42)
        assert subprocess_mock.Popen.call_args[1]['close_fds'] is True
```"
-------------------------------------------------------------------------
"

@pytest.mark.parametrize('stdin', [{}], indirect=['stdin'])
def test_run_command_fds(mocker, rc_am):
subprocess_mock = mocker.patch('ansible.module_utils.basic.subprocess')
subprocess_mock.Popen.side_effect = AssertionError

try:
    rc_am.run_command('synchronize', pass_fds=(101, 42))
except SystemExit:
    pass

if PY2:
    assert subprocess_mock.Popen.call_args[1]['close_fds'] is False
    assert 'pass_fds' not in subprocess_mock.Popen.call_args[1]

else:
    assert subprocess_mock.Popen.call_args[1]['pass_fds'] == (101, 42)
    assert subprocess_mock.Popen.call_args[1]['close_fds'] is True
"
-------------------------------------------------------------------------
"Recom
PRs: 66542, 66661"
-------------------------------------------------------------------------
=========================================================================
"
- name: Import external ova VM
ovirt_vm:
  cluster: mycluster
  name: myvm
  host: myhost
  timeout: 1800
  poll_interval: 30
  kvm:
    name: myvm
    url: ova:///path/myvm.ova
    storage_domain: mystorage
"
-------------------------------------------------------------------------
"```yaml
- name: Import external ova VM
  ovirt_vm:
    cluster: mycluster
    name: myvm
    host: myhost
    timeout: 1800
    poll_interval: 30
    kvm:
      name: myvm
      url: ova:///path/myvm.ova
      storage_domain: mystorage
  vars:
    EXAMPLES: |
      snapshot_name: myvm_snap
      name: myvm_clone
      state: present
```  "
-------------------------------------------------------------------------
"
- name: Import external ova VM
ovirt_vm:
  cluster: mycluster
  name: myvm
  host: myhost
  timeout: 1800
  poll_interval: 30
  kvm:
    name: myvm
    url: ova:///path/myvm.ova
    storage_domain: mystorage
"
-------------------------------------------------------------------------
"Recom
PRs: 66652, 66653"
-------------------------------------------------------------------------
=========================================================================
"import xml.etree.ElementTree as ET
"
-------------------------------------------------------------------------
"```python
import xml.etree.ElementTree as ET
```"
-------------------------------------------------------------------------
"import xml.etree.ElementTree as ET
"
-------------------------------------------------------------------------
"Recom
PRs: 54958, 66642"
-------------------------------------------------------------------------
=========================================================================
"return ET.tostring(ET.fromstring(xml_str)).decode('ascii')
"
-------------------------------------------------------------------------
"```python
def job_config_to_string(xml_str):
    return ET.tostring(ET.fromstring(xml_str)).decode('ascii')
```"
-------------------------------------------------------------------------
"return ET.tostring(ET.fromstring(xml_str)).decode('ascii')
"
-------------------------------------------------------------------------
"Recom
PRs: 54958, 66642"
-------------------------------------------------------------------------
=========================================================================
"def _enablerepos_with_error_checking(self):
            self.yum_base.repos.enableRepo(self.enablerepo[0])
"
-------------------------------------------------------------------------
"```python
def _enablerepos_with_error_checking(self):
    self.yum_base.repos.enableRepo(self.enablerepo[0])
```"
-------------------------------------------------------------------------
"def _enablerepos_with_error_checking(self):
            self.yum_base.repos.enableRepo(self.enablerepo[0])
"
-------------------------------------------------------------------------
"Recom
PRs: 66557, 66640"
-------------------------------------------------------------------------
=========================================================================
"self.yum_base.repos.enableRepo(rid)
"
-------------------------------------------------------------------------
self.yum_base.repos.enableRepo(rid)
-------------------------------------------------------------------------
"self.yum_base.repos.enableRepo(rid)
"
-------------------------------------------------------------------------
"Recom
PRs: 66557, 66640"
-------------------------------------------------------------------------
=========================================================================
"
self._enablerepos_with_error_checking()

"
-------------------------------------------------------------------------
"```python
self._enablerepos_with_error_checking()
```"
-------------------------------------------------------------------------
"
self._enablerepos_with_error_checking()

"
-------------------------------------------------------------------------
"Recom
PRs: 66557, 66640"
-------------------------------------------------------------------------
=========================================================================
"""cp"", [in_path, self._container_id  "":""  out_path], use_container_id=False

if 'cannot copy into running rootless container with pause set' in to_native(stderr):
    rc, stdout, stderr = self._podman(
        ""cp"", [""--pause=false"", in_path, self._container_id  "":""  out_path], use_container_id=False
    )
    if rc != 0:
        raise AnsibleError(
            ""Failed to copy file from %s to %s in container %s\n%s"" % (
                in_path, out_path, self._container_id, stderr)
        )
"
-------------------------------------------------------------------------
"```python
real_in_path = in_path
real_out_path = out_path
cmd_args = [""cp"", [real_in_path, self._container_id + "":"" + real_out_path], use_container_id=False]

if 'cannot copy into running rootless container with pause set' in to_native(stderr):
    rc, stdout, stderr = self._podman(
        ""cp"", [""--pause=false"", real_in_path, self._container_id + "":"" + real_out_path], use_container_id=False
    )
    if rc != 0:
        raise AnsibleError(
            ""Failed to copy file from %s to %s in container %s\n%s"" % (
                real_in_path, real_out_path, self._container_id, stderr)
        )
```"
-------------------------------------------------------------------------
"""cp"", [in_path, self._container_id  "":""  out_path], use_container_id=False

if 'cannot copy into running rootless container with pause set' in to_native(stderr):
    rc, stdout, stderr = self._podman(
        ""cp"", [""--pause=false"", in_path, self._container_id  "":""  out_path], use_container_id=False
    )
    if rc != 0:
        raise AnsibleError(
            ""Failed to copy file from %s to %s in container %s\n%s"" % (
                in_path, out_path, self._container_id, stderr)
        )
"
-------------------------------------------------------------------------
"Recom
PRs: 66583, 66588"
-------------------------------------------------------------------------
=========================================================================
"_diff_peek=dict(type='bool'),  # Internal use only, for internal checks in the action plugins
"
-------------------------------------------------------------------------
"_diff_peek=dict(type='bool')  # Internal use only, for internal checks in the action plugins"
-------------------------------------------------------------------------
"_diff_peek=dict(type='bool'),  # Internal use only, for internal checks in the action plugins
"
-------------------------------------------------------------------------
"Recom
PRs: 60428, 66587"
-------------------------------------------------------------------------
=========================================================================
"if peek_result.get('failed', False):
    display.warning(u""Failed to get diff between '%s' and '%s': %s"" % (os.path.basename(source), destination, to_text(peek_result.get(u'msg', u''))))
    return diff

if peek_result.get('rc', 0) == 0:
"
-------------------------------------------------------------------------
"```python
if peek_result.get('failed', False):
    display.warning(u""Failed to get diff between '%s' and '%s': %s"" % (os.path.basename(source), destination, to_text(peek_result.get(u'msg', u'')))
    return diff

if peek_result.get('rc', 0) == 0:
```"
-------------------------------------------------------------------------
"if peek_result.get('failed', False):
    display.warning(u""Failed to get diff between '%s' and '%s': %s"" % (os.path.basename(source), destination, to_text(peek_result.get(u'msg', u''))))
    return diff

if peek_result.get('rc', 0) == 0:
"
-------------------------------------------------------------------------
"Recom
PRs: 60428, 66587"
-------------------------------------------------------------------------
=========================================================================
"if is_newer_version_installed:
    if self.allow_downgrade:
        # dnf only does allow_downgrade, we have to handle this ourselves
        # because it allows a possibility for non-idempotent transactions
        # on a system's package set (pending the yum repo has many old
        # NVRs indexed)
        if upgrade:
            if is_installed:
                self.base.upgrade(pkg_spec)
            else:
                self.base.install(pkg_spec)
    else:  # Nothing to do, report back
        pass
elif is_installed:  # An potentially older (or same) version is installed
        self.base.upgrade(pkg_spec)
    else:  # Nothing to do, report back
        pass
else:  # The package is not installed, simply install it
    self.base.install(pkg_spec)
return {'failed': False, 'msg': '', 'failure': '', 'rc': 0}
"
-------------------------------------------------------------------------
"```python
if is_newer_version_installed:
    if self.allow_downgrade:
        if upgrade:
            if is_installed:
                self.base.upgrade(pkg_spec)
            else:
                self.base.install(pkg_spec)
    else:
        pass
elif is_installed:
    self.base.upgrade(pkg_spec)
else:
    self.base.install(pkg_spec)
return {'failed': False, 'msg': '', 'failure': '', 'rc': 0}
```"
-------------------------------------------------------------------------
"if is_newer_version_installed:
    if self.allow_downgrade:
        # dnf only does allow_downgrade, we have to handle this ourselves
        # because it allows a possibility for non-idempotent transactions
        # on a system's package set (pending the yum repo has many old
        # NVRs indexed)
        if upgrade:
            if is_installed:
                self.base.upgrade(pkg_spec)
            else:
                self.base.install(pkg_spec)
    else:  # Nothing to do, report back
        pass
elif is_installed:  # An potentially older (or same) version is installed
        self.base.upgrade(pkg_spec)
    else:  # Nothing to do, report back
        pass
else:  # The package is not installed, simply install it
    self.base.install(pkg_spec)
return {'failed': False, 'msg': '', 'failure': '', 'rc': 0}
"
-------------------------------------------------------------------------
"Recom
PRs: 66209, 66578"
-------------------------------------------------------------------------
=========================================================================
"if install_result['msg']:
    failure_response['msg'] = install_result['msg']
if install_result['msg']:
    response['results'].append(install_result['msg'])
"
-------------------------------------------------------------------------
"if install_result['msg']:
    failure_response['msg'] = install_result['msg']
    response['results'].append(install_result['msg'])"
-------------------------------------------------------------------------
"if install_result['msg']:
    failure_response['msg'] = install_result['msg']
if install_result['msg']:
    response['results'].append(install_result['msg'])
"
-------------------------------------------------------------------------
"Recom
PRs: 66209, 66578"
-------------------------------------------------------------------------
=========================================================================
"if install_result['msg']:
    failure_response['msg'] = install_result['msg']
if install_result['msg']:
    response['results'].append(install_result['msg'])
"
-------------------------------------------------------------------------
"if install_result['msg']:
    failure_response['msg'] = install_result['msg']
    response['results'].append(install_result['msg'])"
-------------------------------------------------------------------------
"if install_result['msg']:
    failure_response['msg'] = install_result['msg']
if install_result['msg']:
    response['results'].append(install_result['msg'])
"
-------------------------------------------------------------------------
"Recom
PRs: 66209, 66578"
-------------------------------------------------------------------------
=========================================================================
"- Make sure the user has been authorized to execute commands terminal length 0, terminal width 512 and terminal exec prompt no-timestamp.
"
-------------------------------------------------------------------------
"```python
# Make sure the user has been authorized to execute commands terminal length 0, terminal width 512 and terminal exec prompt no-timestamp
M(iosxr_config)
  authorize: yes
  lines:
    - terminal length 0
    - terminal width 512
    - terminal exec prompt no-timestamp
```"
-------------------------------------------------------------------------
"- Make sure the user has been authorized to execute commands terminal length 0, terminal width 512 and terminal exec prompt no-timestamp.
"
-------------------------------------------------------------------------
"Recom
PRs: 65969, 66493"
-------------------------------------------------------------------------
=========================================================================
"if purge:
    state = ""absent""
else:
    state = w['state']
"
-------------------------------------------------------------------------
"```python
if purge:
    state = ""absent""
else:
    state = w['state']
```"
-------------------------------------------------------------------------
"if purge:
    state = ""absent""
else:
    state = w['state']
"
-------------------------------------------------------------------------
"Recom
PRs: 66004, 66367"
-------------------------------------------------------------------------
=========================================================================
"if name:
    name = name.strip()
    if name == 'default':
        module.fail_json(msg='cannot use default as name of a VRF')
    elif len(name) > 32:
        module.fail_json(msg='VRF name exceeded max length of 32', name=name)
    else:
        return name
"
-------------------------------------------------------------------------
"```python
if name:
    name = name.strip()
    if name == 'default':
        module.fail_json(msg='cannot use default as name of a VRF')
    elif len(name) > 32:
        module.fail_json(msg='VRF name exceeded max length of 32', name=name)
    else:
        return name
```"
-------------------------------------------------------------------------
"if name:
    name = name.strip()
    if name == 'default':
        module.fail_json(msg='cannot use default as name of a VRF')
    elif len(name) > 32:
        module.fail_json(msg='VRF name exceeded max length of 32', name=name)
    else:
        return name
"
-------------------------------------------------------------------------
"Recom
PRs: 66004, 66367"
-------------------------------------------------------------------------
=========================================================================
"if key == 'password':
    commands.append(""no password"")
else:
    existing_value = existing_commands.get(key)
    commands.append('no {0} {1}'.format(key, existing_value))
"
-------------------------------------------------------------------------
"```python
if key == 'password':
    commands.append(""no password"")
else:
    existing_value = existing_commands.get(key)
    commands.append('no {0} {1}'.format(key, existing_value))
```"
-------------------------------------------------------------------------
"if key == 'password':
    commands.append(""no password"")
else:
    existing_value = existing_commands.get(key)
    commands.append('no {0} {1}'.format(key, existing_value))
"
-------------------------------------------------------------------------
"Recom
PRs: 65909, 66338"
-------------------------------------------------------------------------
=========================================================================
"enabled_streams = self.base._moduleContainer.getEnabledStream(nsv.name)
if enabled_streams:
    if nsv.stream:
        if nsv.stream in enabled_streams:
            return True     # The provided stream was found
        else:
            return False    # The provided stream was not found
    else:
        return True         # No stream provided, but module found
"
-------------------------------------------------------------------------
"```python
enabled_streams = self.base._moduleContainer.getEnabledStream(nsv.name)
if enabled_streams:
    if nsv.stream:
        if nsv.stream in enabled_streams:
            return True
        else:
            return False
    else:
        return True
return False
```"
-------------------------------------------------------------------------
"enabled_streams = self.base._moduleContainer.getEnabledStream(nsv.name)
if enabled_streams:
    if nsv.stream:
        if nsv.stream in enabled_streams:
            return True     # The provided stream was found
        else:
            return False    # The provided stream was not found
    else:
        return True         # No stream provided, but module found
"
-------------------------------------------------------------------------
"Recom
PRs: 63819, 66309"
-------------------------------------------------------------------------
=========================================================================
"re.compile(br""\[[\w\.]\@[\w\s\-\.]\] ?> ?$""),
"
-------------------------------------------------------------------------
"```python
import re

re.compile(br""\[[\w\.]\@[\w\s\-\.]\] ?> ?$"")
```"
-------------------------------------------------------------------------
"re.compile(br""\[[\w\.]\@[\w\s\-\.]\] ?> ?$""),
"
-------------------------------------------------------------------------
"Recom
PRs: 65905, 66293"
-------------------------------------------------------------------------
=========================================================================
"'-d', self.b_delimiter]
"
-------------------------------------------------------------------------
"Replace the line '-d', self.b_delimiter] with __future__.absolute_import __future__.print_function, ansible.module_utils._text.to_text, ansible.errors.AnsibleError, subprocess.Popen, ansible.module_utils._text.to_native, ansible.plugins.lookup, subprocess.Popen, b_credential = b"""" in the given code snippet."
-------------------------------------------------------------------------
"'-d', self.b_delimiter]
"
-------------------------------------------------------------------------
"Recom
PRs: 66268, 66283"
-------------------------------------------------------------------------
=========================================================================
"url_paths = [self.api_server, api_path, 'collections', namespace, name, 'versions', version, '/']
"
-------------------------------------------------------------------------
"url_paths = [self.api_server, api_path, 'collections', namespace, name, 'versions', version]"
-------------------------------------------------------------------------
"url_paths = [self.api_server, api_path, 'collections', namespace, name, 'versions', version, '/']
"
-------------------------------------------------------------------------
"Recom
PRs: 63294, 66282"
-------------------------------------------------------------------------
=========================================================================
"n_url = _urljoin(self.api_server, api_path, 'collections', namespace, name, 'versions', '/')
"
-------------------------------------------------------------------------
"n_url = _urljoin(self.api_server, api_path, 'collections', namespace, name, 'versions')"
-------------------------------------------------------------------------
"n_url = _urljoin(self.api_server, api_path, 'collections', namespace, name, 'versions', '/')
"
-------------------------------------------------------------------------
"Recom
PRs: 63294, 66282"
-------------------------------------------------------------------------
=========================================================================
"assert mock_open.mock_calls[0][1][0] == '%s%s/collections/namespace/collection/versions/%s/' \
"
-------------------------------------------------------------------------
assert mock_open.mock_calls[0][1][0] == '%s%s/collections/namespace/collection/versions/%s/' \
-------------------------------------------------------------------------
"assert mock_open.mock_calls[0][1][0] == '%s%s/collections/namespace/collection/versions/%s/' \
"
-------------------------------------------------------------------------
"Recom
PRs: 63294, 66282"
-------------------------------------------------------------------------
=========================================================================
"'versions/' % api_version
"
-------------------------------------------------------------------------
'versions/' % api_version
-------------------------------------------------------------------------
"'versions/' % api_version
"
-------------------------------------------------------------------------
"Recom
PRs: 63294, 66282"
-------------------------------------------------------------------------
=========================================================================
"'versions/' % api_version
"
-------------------------------------------------------------------------
'versions/?page=2' % api_version
-------------------------------------------------------------------------
"'versions/' % api_version
"
-------------------------------------------------------------------------
"Recom
PRs: 63294, 66282"
-------------------------------------------------------------------------
=========================================================================
"output = re.search(r'\^C(.*?)\^C', out, re.S).group(1).strip()
"
-------------------------------------------------------------------------
"```python
output = re.search(r'\^C(.*?)\^C', out, re.S).group(1).strip()
```"
-------------------------------------------------------------------------
"output = re.search(r'\^C(.*?)\^C', out, re.S).group(1).strip()
"
-------------------------------------------------------------------------
"Recom
PRs: 63092, 66274"
-------------------------------------------------------------------------
=========================================================================
"

class TestIosBannerIos12Module(TestIosBannerModule):

def load_fixtures(self, commands):
    show_banner_return_value = (1, '', None)
    show_running_config_return_value = \
        (0, load_fixture('ios_banner_show_running_config_ios12.txt').strip(), None)
    self.exec_command.side_effect = [show_banner_return_value,
                                     show_running_config_return_value]

def test_ios_banner_nochange(self):
    banner_text = load_fixture('ios_banner_show_banner.txt').strip()
    set_module_args(dict(banner='exec', text=banner_text))
    self.execute_module()
"
-------------------------------------------------------------------------
"```python
class TestIosBannerIos12Module(TestIosBannerModule):

    def load_fixtures(self, commands):
        show_banner_return_value = (1, '', None)
        show_running_config_return_value = \
                (0, load_fixture('ios_banner_show_running_config_ios12.txt').strip(), None)
        self.exec_command.side_effect = [show_banner_return_value, show_running_config_return_value]

    def test_ios_banner_nochange(self):
        banner_text = load_fixture('ios_banner_show_banner.txt').strip()
        set_module_args(dict(banner='exec', text=banner_text))
        self.execute_module()
```"
-------------------------------------------------------------------------
"

class TestIosBannerIos12Module(TestIosBannerModule):

def load_fixtures(self, commands):
    show_banner_return_value = (1, '', None)
    show_running_config_return_value = \
        (0, load_fixture('ios_banner_show_running_config_ios12.txt').strip(), None)
    self.exec_command.side_effect = [show_banner_return_value,
                                     show_running_config_return_value]

def test_ios_banner_nochange(self):
    banner_text = load_fixture('ios_banner_show_banner.txt').strip()
    set_module_args(dict(banner='exec', text=banner_text))
    self.execute_module()
"
-------------------------------------------------------------------------
"Recom
PRs: 63092, 66274"
-------------------------------------------------------------------------
=========================================================================
"restart_policy='restart_policy',
    if key == 'restart_policy' and self.client.option_minimal_versions[value]['supported']:
        restart_policy = dict(Name=self.restart_policy,
                              MaximumRetryCount=self.restart_retries)
        result[key] = restart_policy
    elif self.client.option_minimal_versions[value]['supported']:
"
-------------------------------------------------------------------------
"import os
import docker.utils.types
import __future__
import distutils.version
import docker.errors
import docker.types
import ansible.module_utils.docker.common
import docker
import shlex
import re
import traceback
import ansible.module_utils.six
import ansible.module_utils.common.text.formatters

class TaskParameters(DockerBaseClass):
    mem_reservation = 'memory_reservation'
    memswap_limit = 'memory_swap'
    kernel_memory = 'kernel_memory'

    def update_parameters(self, update_parameters):
        result = dict()
        for key, value in update_parameters.items():
            if getattr(self, value, None) is not None:
                result[key] = getattr(self, value)
        return result"
-------------------------------------------------------------------------
"restart_policy='restart_policy',
    if key == 'restart_policy' and self.client.option_minimal_versions[value]['supported']:
        restart_policy = dict(Name=self.restart_policy,
                              MaximumRetryCount=self.restart_retries)
        result[key] = restart_policy
    elif self.client.option_minimal_versions[value]['supported']:
"
-------------------------------------------------------------------------
"Recom
PRs: 66192, 66222"
-------------------------------------------------------------------------
=========================================================================
"restart_policy = host_config.get('RestartPolicy', dict())

# Options which don't make sense without their accompanying option
if self.parameters.restart_policy:
    config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')

"
-------------------------------------------------------------------------
"```python
restart_policy = host_config.get('RestartPolicy', dict())

# Options which don't make sense without their accompanying option
if self.parameters.restart_policy:
    config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')
```"
-------------------------------------------------------------------------
"restart_policy = host_config.get('RestartPolicy', dict())

# Options which don't make sense without their accompanying option
if self.parameters.restart_policy:
    config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')

"
-------------------------------------------------------------------------
"Recom
PRs: 66192, 66222"
-------------------------------------------------------------------------
=========================================================================
"restart_policy=restart_policy.get('Name')
"
-------------------------------------------------------------------------
"```python
restart_policy = restart_policy.get('Name')
```"
-------------------------------------------------------------------------
"restart_policy=restart_policy.get('Name')
"
-------------------------------------------------------------------------
"Recom
PRs: 66192, 66222"
-------------------------------------------------------------------------
=========================================================================
"restart_policy = host_config.get('RestartPolicy') or dict()

"
-------------------------------------------------------------------------
"```python
restart_policy = host_config.get('RestartPolicy') or dict()
```"
-------------------------------------------------------------------------
"restart_policy = host_config.get('RestartPolicy') or dict()

"
-------------------------------------------------------------------------
"Recom
PRs: 66192, 66222"
-------------------------------------------------------------------------
=========================================================================
"restart_policy=restart_policy.get('Name')
tions which don't make sense without their accompanying option
elf.parameters.restart_policy:
config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')

"
-------------------------------------------------------------------------
"```python
restart_policy_name = restart_policy.get('Name')
if restart_policy_name:
    config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')
```"
-------------------------------------------------------------------------
"restart_policy=restart_policy.get('Name')
tions which don't make sense without their accompanying option
elf.parameters.restart_policy:
config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')

"
-------------------------------------------------------------------------
"Recom
PRs: 66192, 66222"
-------------------------------------------------------------------------
=========================================================================
"restart_policy='restart_policy',
    if key == 'restart_policy' and self.client.option_minimal_versions[value]['supported']:
        restart_policy = dict(Name=self.restart_policy,
                              MaximumRetryCount=self.restart_retries)
        result[key] = restart_policy
    elif self.client.option_minimal_versions[value]['supported']:
"
-------------------------------------------------------------------------
"```python
restart_policy='restart_policy',
for key, value in update_parameters.items():
    if key == 'restart_policy' and self.client.option_minimal_versions[value]['supported']:
        restart_policy = dict(Name=self.restart_policy,
                              MaximumRetryCount=self.restart_retries)
        result[key] = restart_policy
    elif self.client.option_minimal_versions[value]['supported']:
```"
-------------------------------------------------------------------------
"restart_policy='restart_policy',
    if key == 'restart_policy' and self.client.option_minimal_versions[value]['supported']:
        restart_policy = dict(Name=self.restart_policy,
                              MaximumRetryCount=self.restart_retries)
        result[key] = restart_policy
    elif self.client.option_minimal_versions[value]['supported']:
"
-------------------------------------------------------------------------
"Recom
PRs: 66192, 66221"
-------------------------------------------------------------------------
=========================================================================
"restart_policy = host_config.get('RestartPolicy', dict())

# Options which don't make sense without their accompanying option
if self.parameters.restart_policy:
    config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')

"
-------------------------------------------------------------------------
"```python
restart_policy = host_config.get('RestartPolicy', dict())

# Options which don't make sense without their accompanying option
if self.parameters.restart_policy:
    config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')
```"
-------------------------------------------------------------------------
"restart_policy = host_config.get('RestartPolicy', dict())

# Options which don't make sense without their accompanying option
if self.parameters.restart_policy:
    config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')

"
-------------------------------------------------------------------------
"Recom
PRs: 66192, 66221"
-------------------------------------------------------------------------
=========================================================================
"restart_policy=restart_policy.get('Name')
"
-------------------------------------------------------------------------
"```python
restart_policy=restart_policy.get('Name')
```"
-------------------------------------------------------------------------
"restart_policy=restart_policy.get('Name')
"
-------------------------------------------------------------------------
"Recom
PRs: 66192, 66221"
-------------------------------------------------------------------------
=========================================================================
"restart_policy = host_config.get('RestartPolicy') or dict()

"
-------------------------------------------------------------------------
"```python
restart_policy = host_config.get('RestartPolicy') or dict()
```"
-------------------------------------------------------------------------
"restart_policy = host_config.get('RestartPolicy') or dict()

"
-------------------------------------------------------------------------
"Recom
PRs: 66192, 66221"
-------------------------------------------------------------------------
=========================================================================
"restart_policy=restart_policy.get('Name')
tions which don't make sense without their accompanying option
elf.parameters.restart_policy:
config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')

"
-------------------------------------------------------------------------
"```python
restart_policy_name = restart_policy.get('Name')

if self.parameters.restart_policy:
    config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')
```"
-------------------------------------------------------------------------
"restart_policy=restart_policy.get('Name')
tions which don't make sense without their accompanying option
elf.parameters.restart_policy:
config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')

"
-------------------------------------------------------------------------
"Recom
PRs: 66192, 66221"
-------------------------------------------------------------------------
=========================================================================
"def get_container_by_id(self, container_id):
    try:
        self.log(""Inspecting container Id %s"" % container_id)
        result = self.inspect_container(container=container_id)
        self.log(""Completed container inspection"")
        return result
    except NotFound as dummy:
        return None
    except Exception as exc:
        self.fail(""Error inspecting container: %s"" % exc)

"
-------------------------------------------------------------------------
"```python
def get_container_by_id(self, container_id):
    try:
        self.log(""Inspecting container Id %s"" % container_id)
        result = self.inspect_container(container=container_id)
        self.log(""Completed container inspection"")
        return result
    except NotFound as dummy:
        return None
    except Exception as exc:
        msg = 'Error inspecting container: %s' % exc
        self.fail(msg)
```"
-------------------------------------------------------------------------
"def get_container_by_id(self, container_id):
    try:
        self.log(""Inspecting container Id %s"" % container_id)
        result = self.inspect_container(container=container_id)
        self.log(""Completed container inspection"")
        return result
    except NotFound as dummy:
        return None
    except Exception as exc:
        self.fail(""Error inspecting container: %s"" % exc)

"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66118"
-------------------------------------------------------------------------
=========================================================================
"if result is None:
    return None
return self.get_container_by_id(result['Id'])
"
-------------------------------------------------------------------------
"Modify the code snippet as follows:

```python
if result is None:
    return None
return self.get_container_by_id(result['Id'])
```"
-------------------------------------------------------------------------
"if result is None:
    return None
return self.get_container_by_id(result['Id'])
"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66118"
-------------------------------------------------------------------------
=========================================================================
"from time import sleep
"
-------------------------------------------------------------------------
from time import sleep
-------------------------------------------------------------------------
"from time import sleep
"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66118"
-------------------------------------------------------------------------
=========================================================================
"@property
def removing(self):
    if self.container and self.container.get('State'):
        return self.container['State'].get('Status') == 'removing'
    return False

"
-------------------------------------------------------------------------
"```python
@property
def removing(self):
    if self.container and self.container.get('State'):
        return self.container['State'].get('Status') == 'removing'
    return False
```"
-------------------------------------------------------------------------
"@property
def removing(self):
    if self.container and self.container.get('State'):
        return self.container['State'].get('Status') == 'removing'
    return False

"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66118"
-------------------------------------------------------------------------
=========================================================================
"def wait_for_state(self, container_id, complete_states=None, wait_states=None, accept_removal=False):
    delay = 1.0
    while True:
        # Inspect container
        result = self.client.get_container_by_id(container_id)
        if result is None:
            if accept_removal:
                return
            msg = 'Encontered vanished container while waiting for container {0}'
            self.fail(msg.format(container_id))
        # Check container state
        state = result.get('State', {}).get('Status')
        if complete_states is not None and state in complete_states:
            return
        if wait_states is not None and state not in wait_states:
            msg = 'Encontered unexpected state ""{1}"" while waiting for container {0}'
            self.fail(msg.format(container_id, state))
        # Wait
        sleep(delay)
        # Exponential backoff, but never wait longer than 10 seconds
        # (1.1**24 < 10, 1.1**25 > 10, so it will take 25 iterations
        #  until the maximal 10 seconds delay is reached. By then, the
        #  code will have slept for ~1.5 minutes.)
        delay = min(delay * 1.1, 10)

"
-------------------------------------------------------------------------
"```python
import time

def wait_for_state(self, container_id, complete_states=None, wait_states=None, accept_removal=False):
    delay = 1.0
    while True:
        # Inspect container
        result = self.client.get_container_by_id(container_id)
        if result is None:
            if accept_removal:
                return
            msg = 'Encountered vanished container while waiting for container {0}'
            self.fail(msg.format(container_id))
        # Check container state
        state = result.get('State', {}).get('Status')
        if complete_states is not None and state in complete_states:
            return
        if wait_states is not None and state not in wait_states:
            msg = 'Encountered unexpected state ""{1}"" while waiting for container {0}'
            self.fail(msg.format(container_id, state))
        # Wait
        time.sleep(delay)
        # Exponential backoff, but never wait longer than 10 seconds
        # (1.1**24 < 10, 1.1**25 > 10, so it will take 25 iterations
        # until the maximal 10 seconds delay is reached. By then, the
        # code will have slept for ~1.5 minutes.)
        delay = min(delay * 1.1, 10)
```  "
-------------------------------------------------------------------------
"def wait_for_state(self, container_id, complete_states=None, wait_states=None, accept_removal=False):
    delay = 1.0
    while True:
        # Inspect container
        result = self.client.get_container_by_id(container_id)
        if result is None:
            if accept_removal:
                return
            msg = 'Encontered vanished container while waiting for container {0}'
            self.fail(msg.format(container_id))
        # Check container state
        state = result.get('State', {}).get('Status')
        if complete_states is not None and state in complete_states:
            return
        if wait_states is not None and state not in wait_states:
            msg = 'Encontered unexpected state ""{1}"" while waiting for container {0}'
            self.fail(msg.format(container_id, state))
        # Wait
        sleep(delay)
        # Exponential backoff, but never wait longer than 10 seconds
        # (1.1**24 < 10, 1.1**25 > 10, so it will take 25 iterations
        #  until the maximal 10 seconds delay is reached. By then, the
        #  code will have slept for ~1.5 minutes.)
        delay = min(delay * 1.1, 10)

"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66118"
-------------------------------------------------------------------------
=========================================================================
"if not container.exists or container.removing:
    if container.removing:
        self.log('Found container in removal phase')
    else:
        self.log('No container found')
    if container.removing:
        # Wait for container to be removed before trying to create it
        self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"```python
if not container.exists or container.removing:
    if container.removing:
        self.log('Found container in removal phase')
    else:
        self.log('No container found')
    if container.removing:
        # Wait for container to be removed before trying to create it
        self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
```"
-------------------------------------------------------------------------
"if not container.exists or container.removing:
    if container.removing:
        self.log('Found container in removal phase')
    else:
        self.log('No container found')
    if container.removing and not self.check_mode:
        # Wait for container to be removed before trying to create it
        self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66118"
-------------------------------------------------------------------------
=========================================================================
"self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)"
-------------------------------------------------------------------------
"if not self.check_mode:
    self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66118"
-------------------------------------------------------------------------
=========================================================================
"def get_container_by_id(self, container_id):
    try:
        self.log(""Inspecting container Id %s"" % container_id)
        result = self.inspect_container(container=container_id)
        self.log(""Completed container inspection"")
        return result
    except NotFound as dummy:
        return None
    except Exception as exc:
        self.fail(""Error inspecting container: %s"" % exc)

"
-------------------------------------------------------------------------
"def get_container_by_id(self, container_id):
    try:
        self.log(""Inspecting container Id %s"" % container_id)
        result = self.inspect_container(container=container_id)
        self.log(""Completed container inspection"")
        return result
    except NotFound as dummy:
        return None
    except Exception as exc:
        self.fail(""Error inspecting container: %s"" % exc)"
-------------------------------------------------------------------------
"def get_container_by_id(self, container_id):
    try:
        self.log(""Inspecting container Id %s"" % container_id)
        result = self.inspect_container(container=container_id)
        self.log(""Completed container inspection"")
        return result
    except NotFound as dummy:
        return None
    except Exception as exc:
        self.fail(""Error inspecting container: %s"" % exc)

"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66117"
-------------------------------------------------------------------------
=========================================================================
"if result is None:
    return None
return self.get_container_by_id(result['Id'])
"
-------------------------------------------------------------------------
"```python
if result is None:
    return None
return self.get_container_by_id(result['Id'])
```"
-------------------------------------------------------------------------
"if result is None:
    return None
return self.get_container_by_id(result['Id'])
"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66117"
-------------------------------------------------------------------------
=========================================================================
"from time import sleep
"
-------------------------------------------------------------------------
"Adapted code snippet:
```python
from time import sleep
```"
-------------------------------------------------------------------------
"from time import sleep
"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66117"
-------------------------------------------------------------------------
=========================================================================
"@property
def removing(self):
    if self.container and self.container.get('State'):
        return self.container['State'].get('Status') == 'removing'
    return False

"
-------------------------------------------------------------------------
"```python
@property
def removing(self):
    if self.container and self.container.get('State'):
        return self.container['State'].get('Status') == 'removing'
    return False
```"
-------------------------------------------------------------------------
"@property
def removing(self):
    if self.container and self.container.get('State'):
        return self.container['State'].get('Status') == 'removing'
    return False

"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66117"
-------------------------------------------------------------------------
=========================================================================
"def wait_for_state(self, container_id, complete_states=None, wait_states=None, accept_removal=False):
    delay = 1.0
    while True:
        # Inspect container
        result = self.client.get_container_by_id(container_id)
        if result is None:
            if accept_removal:
                return
            msg = 'Encontered vanished container while waiting for container {0}'
            self.fail(msg.format(container_id))
        # Check container state
        state = result.get('State', {}).get('Status')
        if complete_states is not None and state in complete_states:
            return
        if wait_states is not None and state not in wait_states:
            msg = 'Encontered unexpected state ""{1}"" while waiting for container {0}'
            self.fail(msg.format(container_id, state))
        # Wait
        sleep(delay)
        # Exponential backoff, but never wait longer than 10 seconds
        # (1.1**24 < 10, 1.1**25 > 10, so it will take 25 iterations
        #  until the maximal 10 seconds delay is reached. By then, the
        #  code will have slept for ~1.5 minutes.)
        delay = min(delay * 1.1, 10)

"
-------------------------------------------------------------------------
"```python
import time

def wait_for_state(self, container_id, complete_states=None, wait_states=None, accept_removal=False):
    delay = 1.0
    while True:
        # Inspect container
        result = self.client.get_container_by_id(container_id)
        if result is None:
            if accept_removal:
                return
            msg = 'Encontered vanished container while waiting for container {0}'
            self.fail(msg.format(container_id))
        # Check container state
        state = result.get('State', {}).get('Status')
        if complete_states is not None and state in complete_states:
            return
        if wait_states is not None and state not in wait_states:
            msg = 'Encontered unexpected state ""{1}"" while waiting for container {0}'
            self.fail(msg.format(container_id, state))
        # Wait
        time.sleep(delay)
        # Exponential backoff, but never wait longer than 10 seconds
        # (1.1**24 < 10, 1.1**25 > 10, so it will take 25 iterations
        #  until the maximal 10 seconds delay is reached. By then, the
        #  code will have slept for ~1.5 minutes.)
        delay = min(delay * 1.1, 10)
```"
-------------------------------------------------------------------------
"def wait_for_state(self, container_id, complete_states=None, wait_states=None, accept_removal=False):
    delay = 1.0
    while True:
        # Inspect container
        result = self.client.get_container_by_id(container_id)
        if result is None:
            if accept_removal:
                return
            msg = 'Encontered vanished container while waiting for container {0}'
            self.fail(msg.format(container_id))
        # Check container state
        state = result.get('State', {}).get('Status')
        if complete_states is not None and state in complete_states:
            return
        if wait_states is not None and state not in wait_states:
            msg = 'Encontered unexpected state ""{1}"" while waiting for container {0}'
            self.fail(msg.format(container_id, state))
        # Wait
        sleep(delay)
        # Exponential backoff, but never wait longer than 10 seconds
        # (1.1**24 < 10, 1.1**25 > 10, so it will take 25 iterations
        #  until the maximal 10 seconds delay is reached. By then, the
        #  code will have slept for ~1.5 minutes.)
        delay = min(delay * 1.1, 10)

"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66117"
-------------------------------------------------------------------------
=========================================================================
"if not container.exists or container.removing:
    if container.removing:
        self.log('Found container in removal phase')
    else:
        self.log('No container found')
    if container.removing:
        # Wait for container to be removed before trying to create it
        self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"```python
if not (container.exists or container.removing):
    self.log('No container found')
elif container.removing:
    self.log('Found container in removal phase')
    self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
```"
-------------------------------------------------------------------------
"if not container.exists or container.removing:
    if container.removing:
        self.log('Found container in removal phase')
    else:
        self.log('No container found')
    if container.removing and not self.check_mode:
        # Wait for container to be removed before trying to create it
        self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66117"
-------------------------------------------------------------------------
=========================================================================
"self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)"
-------------------------------------------------------------------------
"if not self.check_mode:
    self.wait_for_state(container.Id, wait_states=['removing'], accept_removal=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 65854, 66117"
-------------------------------------------------------------------------
=========================================================================
"def validate_cidr(cidr):
""""""Validate CIDR. Return IP version of a CIDR string on success.
"
-------------------------------------------------------------------------
"```python
import re

CIDR_IPV4 = re.compile(r'^([0-9]{1,3}\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$')
CIDR_IPV6 = re.compile(r'^[0-9a-fA-F:]+/([0-9]|[1-9][0-9]|1[0-2][0-9])$')

def validate_cidr(cidr):
    """"""Validate CIDR. Return IP version of a CIDR string on success.""""""    
```"
-------------------------------------------------------------------------
"def validate_cidr(cidr):
""""""Validate CIDR. Return IP version of a CIDR string on success.
"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66116"
-------------------------------------------------------------------------
=========================================================================
"""""""Normalizes IPAM config keys returned by Docker API to match Ansible keys.
"
-------------------------------------------------------------------------
"```python
def normalize_ipam_config_key(key):
    """"""
    Normalizes IPAM config keys returned by Docker API to match Ansible keys.
    :param key: Docker API key
    :type key: str
    """"""
```"
-------------------------------------------------------------------------
"""""""Normalizes IPAM config keys returned by Docker API to match Ansible keys.
"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66116"
-------------------------------------------------------------------------
=========================================================================
"def dicts_are_essentially_equal(a, b):
""""""Make sure that a is a subset of b, where None entries of a are ignored.""""""
for k, v in a.items():
    if v is None:
        continue
    if b.get(k) != v:
        return False
return True


"
-------------------------------------------------------------------------
"```python
def dicts_are_essentially_equal(a, b):
    """"""Make sure that a is a subset of b, where None entries of a are ignored.""""""
    for k, v in a.items():
        if v is None:
            continue
        if b.get(k) != v:
            return False
    return True
```"
-------------------------------------------------------------------------
"def dicts_are_essentially_equal(a, b):
""""""Make sure that a is a subset of b, where None entries of a are ignored.""""""
for k, v in a.items():
    if v is None:
        continue
    if b.get(k) != v:
        return False
return True


"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66116"
-------------------------------------------------------------------------
=========================================================================
"if self.parameters.ipam_config:
    try:
        for ipam_config in self.parameters.ipam_config:
            validate_cidr(ipam_config['subnet'])
    except ValueError as e:
        self.client.fail(str(e))

"
-------------------------------------------------------------------------
"```python
if self.parameters.ipam_config:
    try:
        for ipam_config in self.parameters.ipam_config:
            validate_cidr(ipam_config['subnet'])
    except ValueError as e:
        self.client.fail(str(e))
```"
-------------------------------------------------------------------------
"if self.parameters.ipam_config:
    try:
        for ipam_config in self.parameters.ipam_config:
            validate_cidr(ipam_config['subnet'])
    except ValueError as e:
        self.client.fail(str(e))

"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66116"
-------------------------------------------------------------------------
=========================================================================
"# Put network's IPAM config into the same format as module's IPAM config
net_ipam_configs = []
for net_ipam_config in net['IPAM']['Config']:
    config = dict()
    for k, v in net_ipam_config.items():
        config[normalize_ipam_config_key(k)] = v
    net_ipam_configs.append(config)
# Compare lists of dicts as sets of dicts
    for net_ipam_config in net_ipam_configs:
        if dicts_are_essentially_equal(ipam_config, net_ipam_config):
            net_config = net_ipam_config
            break
        if value != net_config.get(key):
                            active=net_config.get(key))
"
-------------------------------------------------------------------------
"```python
net_ipam_configs = []
for net_ipam_config in net.get('IPAM', {}).get('Config', []):
    config = dict()
    for k, v in net_ipam_config.items():
        config[normalize_ipam_config_key(k)] = v
    net_ipam_configs.append(config)

for net_ipam_config in net_ipam_configs:
    if set(ipam_config.items()) == set(net_ipam_config.items()):
        net_config = net_ipam_config
        break

if value != net_config.get(key):
    differences.add('ipam_config[%s].%s' % (idx, key),
                    parameter=value,
                    active=net_config.get(key))
```"
-------------------------------------------------------------------------
"# Put network's IPAM config into the same format as module's IPAM config
net_ipam_configs = []
for net_ipam_config in net['IPAM']['Config']:
    config = dict()
    for k, v in net_ipam_config.items():
        config[normalize_ipam_config_key(k)] = v
    net_ipam_configs.append(config)
# Compare lists of dicts as sets of dicts
    for net_ipam_config in net_ipam_configs:
        if dicts_are_essentially_equal(ipam_config, net_ipam_config):
            net_config = net_ipam_config
            break
        if value != net_config.get(key):
                            active=net_config.get(key))
"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66116"
-------------------------------------------------------------------------
=========================================================================
"from ansible.modules.cloud.docker.docker_network import validate_cidr
"
-------------------------------------------------------------------------
from ansible.modules.cloud.docker.docker_network import validate_cidr
-------------------------------------------------------------------------
"def test_validate_cidr_positives(cidr, expected):
assert validate_cidr(cidr) == expected
"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66116"
-------------------------------------------------------------------------
=========================================================================
"def test_validate_cidr_positives(cidr, expected):
assert validate_cidr(cidr) == expected
"
-------------------------------------------------------------------------
"```python
def test_validate_cidr_positives(cidr, expected):
    assert validate_cidr(cidr) == expected
```"
-------------------------------------------------------------------------
"def test_validate_cidr_negatives(cidr):
validate_cidr(cidr)
"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66116"
-------------------------------------------------------------------------
=========================================================================
"def validate_cidr(cidr):
""""""Validate CIDR. Return IP version of a CIDR string on success.
"
-------------------------------------------------------------------------
"```python
import re

def validate_cidr(cidr):
    CIDR_IPV4 = re.compile(r'^([0-9]{1,3}\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$')
    CIDR_IPV6 = re.compile(r'^[0-9a-fA-F:]+/([0-9]|[1-9][0-9]|1[0-2][0-9])$')
    
    # Validation logic here
    
    return IP_version
```"
-------------------------------------------------------------------------
"def validate_cidr(cidr):
""""""Validate CIDR. Return IP version of a CIDR string on success.
"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66115"
-------------------------------------------------------------------------
=========================================================================
"""""""Normalizes IPAM config keys returned by Docker API to match Ansible keys.
"
-------------------------------------------------------------------------
"```python
def normalize_ipam_config_key(key):
    """"""
    Normalizes IPAM config keys returned by Docker API to match Ansible keys.
    :param key: Docker API key
    :type key: str
    """"""
```"
-------------------------------------------------------------------------
"""""""Normalizes IPAM config keys returned by Docker API to match Ansible keys.
"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66115"
-------------------------------------------------------------------------
=========================================================================
"def dicts_are_essentially_equal(a, b):
""""""Make sure that a is a subset of b, where None entries of a are ignored.""""""
for k, v in a.items():
    if v is None:
        continue
    if b.get(k) != v:
        return False
return True


"
-------------------------------------------------------------------------
"```python
def dicts_are_essentially_equal(a, b):
    """"""Make sure that a is a subset of b, where None entries of a are ignored.""""""
    for k, v in a.items():
        if v is None:
            continue
        if b.get(k) != v:
            return False
    return True
```"
-------------------------------------------------------------------------
"def dicts_are_essentially_equal(a, b):
""""""Make sure that a is a subset of b, where None entries of a are ignored.""""""
for k, v in a.items():
    if v is None:
        continue
    if b.get(k) != v:
        return False
return True


"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66115"
-------------------------------------------------------------------------
=========================================================================
"if self.parameters.ipam_config:
    try:
        for ipam_config in self.parameters.ipam_config:
            validate_cidr(ipam_config['subnet'])
    except ValueError as e:
        self.client.fail(str(e))

"
-------------------------------------------------------------------------
"if self.parameters.ipam_config:
    try:
        for ipam_config in self.parameters.ipam_config:
            validate_cidr(ipam_config['subnet'])
    except ValueError as e:
        self.client.fail(str(e))"
-------------------------------------------------------------------------
"if self.parameters.ipam_config:
    try:
        for ipam_config in self.parameters.ipam_config:
            validate_cidr(ipam_config['subnet'])
    except ValueError as e:
        self.client.fail(str(e))

"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66115"
-------------------------------------------------------------------------
=========================================================================
"# Put network's IPAM config into the same format as module's IPAM config
net_ipam_configs = []
for net_ipam_config in net['IPAM']['Config']:
    config = dict()
    for k, v in net_ipam_config.items():
        config[normalize_ipam_config_key(k)] = v
    net_ipam_configs.append(config)
# Compare lists of dicts as sets of dicts
    for net_ipam_config in net_ipam_configs:
        if dicts_are_essentially_equal(ipam_config, net_ipam_config):
            net_config = net_ipam_config
            break
        if value != net_config.get(key):
                            active=net_config.get(key))
"
-------------------------------------------------------------------------
"```python
# Put network's IPAM config into the same format as module's IPAM config
net_ipam_configs = []

for net_ipam_config in net.get('IPAM', {}).get('Config', []):
    config = dict()
    for k, v in net_ipam_config.items():
        config[normalize_ipam_config_key(k)] = v
    net_ipam_configs.append(config)

# Compare lists of dicts as sets of dicts
for net_ipam_config in net_ipam_configs:
    if dicts_are_essentially_equal(ipam_config, net_ipam_config):
        net_config = net_ipam_config
        break
    if value != net_config.get(key):
        differences.add('ipam_config[%s].%s' % (idx, key),
                         parameter=value,
                         active=net_config.get(key))
```"
-------------------------------------------------------------------------
"# Put network's IPAM config into the same format as module's IPAM config
net_ipam_configs = []
for net_ipam_config in net['IPAM']['Config']:
    config = dict()
    for k, v in net_ipam_config.items():
        config[normalize_ipam_config_key(k)] = v
    net_ipam_configs.append(config)
# Compare lists of dicts as sets of dicts
    for net_ipam_config in net_ipam_configs:
        if dicts_are_essentially_equal(ipam_config, net_ipam_config):
            net_config = net_ipam_config
            break
        if value != net_config.get(key):
                            active=net_config.get(key))
"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66115"
-------------------------------------------------------------------------
=========================================================================
"from ansible.modules.cloud.docker.docker_network import validate_cidr
"
-------------------------------------------------------------------------
from ansible.modules.cloud.docker.docker_network import validate_cidr
-------------------------------------------------------------------------
"from ansible.modules.cloud.docker.docker_network import validate_cidr
"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66115"
-------------------------------------------------------------------------
=========================================================================
"def test_validate_cidr_positives(cidr, expected):
assert validate_cidr(cidr) == expected
"
-------------------------------------------------------------------------
"```python
def test_validate_cidr_positives(cidr, expected):
    assert validate_cidr(cidr) == expected
```"
-------------------------------------------------------------------------
"def test_validate_cidr_positives(cidr, expected):
assert validate_cidr(cidr) == expected
"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66115"
-------------------------------------------------------------------------
=========================================================================
"def test_validate_cidr_negatives(cidr):
validate_cidr(cidr)
"
-------------------------------------------------------------------------
"```python
import pytest
from ansible.modules.cloud.docker.docker_network import validate_cidr

@pytest.mark.parametrize('cidr', [
    '192.168.0.1/asd',
    'fdd1:ac8c:0557:7ce2::',
])
def test_validate_cidr_negatives(cidr):
    with pytest.raises(ValueError) as e:
        validate_cidr(cidr)
        assert '""{0}"" is not a valid CIDR'.format(cidr) == str(e.value)
```"
-------------------------------------------------------------------------
"def test_validate_cidr_negatives(cidr):
validate_cidr(cidr)
"
-------------------------------------------------------------------------
"Recom
PRs: 65839, 66115"
-------------------------------------------------------------------------
=========================================================================
"- ""Service memory limit in format C(<number>[<unit>]). Number is a positive integer.
- C(0) equals no limit.
- Corresponds to the C(--limit-memory) option of C(docker service create).
"
-------------------------------------------------------------------------
"```python
"""""" 
Service memory limit in format C(<number>[<unit>]). Number is a positive float.
- C(0) equals no limit.
- Corresponds to the C(--limit-memory) option of C(docker service create).
""""""
```"
-------------------------------------------------------------------------
"- ""Service memory limit in format C(<number>[<unit>]). Number is a positive integer.
- C(0) equals no limit.
- Corresponds to the C(--limit-memory) option of C(docker service create).
"
-------------------------------------------------------------------------
"Recom
PRs: 66078, 66113"
-------------------------------------------------------------------------
=========================================================================
"- ""Service memory limit in format C(<number>[<unit>]). Number is a positive integer.
- C(0) equals no limit.
- Corresponds to the C(--limit-memory) option of C(docker service create).
"
-------------------------------------------------------------------------
"```python
Service memory limit in format C(<number>[<unit>]). Number is a positive float.
- C(0) equals no limit.
- Corresponds to the C(--limit-memory) option of C(docker service create).
```"
-------------------------------------------------------------------------
"- ""Service memory limit in format C(<number>[<unit>]). Number is a positive integer.
- C(0) equals no limit.
- Corresponds to the C(--limit-memory) option of C(docker service create).
"
-------------------------------------------------------------------------
"Recom
PRs: 66078, 66112"
-------------------------------------------------------------------------
=========================================================================
"- ""At first it tries to import the network when not found it will create network in external provider.""
"
-------------------------------------------------------------------------
"""At first, it attempts to import the network; if not found, it will create the network in the external provider."""
-------------------------------------------------------------------------
"- ""At first it tries to import the network when not found it will create network in external provider.""
"
-------------------------------------------------------------------------
"Recom
PRs: 65701, 66053"
-------------------------------------------------------------------------
=========================================================================
"def build_entity(self):
"
-------------------------------------------------------------------------
"def build_entity(self):
    ons_service = self._connection.system_service().openstack_network_providers_service()
    on_service = ons_service.provider_service(get_id_by_name(ons_service, self.param('external_provider')))
    return otypes.Network(
        name=self._module.params['name'],
        comment=self._module.params['comment'],"
-------------------------------------------------------------------------
"def build_entity(self):
"
-------------------------------------------------------------------------
"Recom
PRs: 65701, 66053"
-------------------------------------------------------------------------
=========================================================================
"external_provider=otypes.OpenStackNetworkProvider(id=on_service.get().id)
if self.param('external_provider') else None,
"
-------------------------------------------------------------------------
"external_provider=(
                 otypes.OpenStackNetworkProvider(id=on_service.get().id)
             ) if self.param('external_provider') else None,"
-------------------------------------------------------------------------
"external_provider=otypes.OpenStackNetworkProvider(id=on_service.get().id)
if self.param('external_provider') else None,
"
-------------------------------------------------------------------------
"Recom
PRs: 65701, 66053"
-------------------------------------------------------------------------
=========================================================================
"imported = False
if module.params.get('external_provider') and module.params.get('name') not in [net.name for net in networks_service.list()]:
    # Try to import network
    ons_service = connection.system_service().openstack_network_providers_service()
    on_service = ons_service.provider_service(get_id_by_name(ons_service, module.params.get('external_provider')))
    on_networks_service = on_service.networks_service()
    if module.params.get('name') in [net.name for net in on_networks_service.list()]:
        network_service = on_networks_service.network_service(get_id_by_name(on_networks_service, module.params.get('name')))
        network_service.import_(data_center=otypes.DataCenter(name=module.params.get('data_center')))
        imported = True

ret = networks_module.create(search_params=search_params)
ret['changed'] = ret['changed'] or imported
"
-------------------------------------------------------------------------
"```python
imported = False
if module.params.get('external_provider') and module.params.get('name') not in [net.name for net in networks_service.list()]:
    # Try to import network
    ons_service = connection.system_service().openstack_network_providers_service()
    on_service = ons_service.provider_service(get_id_by_name(ons_service, module.params.get('external_provider')))
    on_networks_service = on_service.networks_service()
    if module.params.get('name') in [net.name for net in on_networks_service.list()]:
        network_service = on_networks_service.network_service(get_id_by_name(on_networks_service, module.params.get('name')))
        network_service.import_(data_center=otypes.DataCenter(name=module.params.get('data_center')))
        imported = True

ret = networks_module.create(search_params=search_params)
ret['changed'] = ret['changed'] or imported
```"
-------------------------------------------------------------------------
"imported = False
if module.params.get('external_provider') and module.params.get('name') not in [net.name for net in networks_service.list()]:
    # Try to import network
    ons_service = connection.system_service().openstack_network_providers_service()
    on_service = ons_service.provider_service(get_id_by_name(ons_service, module.params.get('external_provider')))
    on_networks_service = on_service.networks_service()
    if module.params.get('name') in [net.name for net in on_networks_service.list()]:
        network_service = on_networks_service.network_service(get_id_by_name(on_networks_service, module.params.get('name')))
        network_service.import_(data_center=otypes.DataCenter(name=module.params.get('data_center')))
        imported = True

ret = networks_module.create(search_params=search_params)
ret['changed'] = ret['changed'] or imported
"
-------------------------------------------------------------------------
"Recom
PRs: 65701, 66053"
-------------------------------------------------------------------------
=========================================================================
"if any([os.path.isfile(project_path  ""/""  plan_file), os.path.isfile(plan_file)]):
"
-------------------------------------------------------------------------
"if any([os.path.isfile(os.path.join(project_path, plan_file)), os.path.isfile(plan_file)]): "
-------------------------------------------------------------------------
"if any([os.path.isfile(project_path  ""/""  plan_file), os.path.isfile(plan_file)]):
"
-------------------------------------------------------------------------
"Recom
PRs: 58812, 66017"
-------------------------------------------------------------------------
=========================================================================
"module.warn(""Failed to list Terraform workspaces:\r\n{0}"".format(err))
"
-------------------------------------------------------------------------
"```python
module.warn(""Failed to list Terraform workspaces:\r\n{0}"".format(err))
```"
-------------------------------------------------------------------------
"module.warn(""Failed to list Terraform workspaces:\r\n{0}"".format(err))
"
-------------------------------------------------------------------------
"Recom
PRs: 65044, 66016"
-------------------------------------------------------------------------
=========================================================================
"if self.update_password == 'always' and self.password is not None and info[1] != self.password:
    cmd = [self.module.get_bin_path('chpasswd', True)]
    cmd.append('--encrypted')
    data = '{name}:{password}'.format(name=self.name, password=self.password)
    rc, out, err = self.execute_command(cmd, data=data)
    if rc is not None and rc != 0:
        self.module.fail_json(name=self.name, msg=err, rc=rc)
"
-------------------------------------------------------------------------
"```python
if self.update_password == 'always' and self.password is not None and info[1] != self.password:
    import os
    import select
    import shutil
    import spwd
    import pwd
    import subprocess
    
    cmd = [self.module.get_bin_path('chpasswd', True)]
    cmd.append('--encrypted')
    data = '{name}:{password}'.format(name=self.name, password=self.password)
    
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate(input=data.encode('utf-8'))
    
    rc = p.returncode
    if rc != 0:
        self.module.fail_json(name=self.name, msg=err.decode('utf-8'), rc=rc)
```"
-------------------------------------------------------------------------
"if self.update_password == 'always' and self.password is not None and info[1] != self.password:
    cmd = [self.module.get_bin_path('chpasswd', True)]
    cmd.append('--encrypted')
    data = '{name}:{password}'.format(name=self.name, password=self.password)
    rc, out, err = self.execute_command(cmd, data=data)
    if rc is not None and rc != 0:
        self.module.fail_json(name=self.name, msg=err, rc=rc)
"
-------------------------------------------------------------------------
"Recom
PRs: 65977, 66001"
-------------------------------------------------------------------------
=========================================================================
"if self.update_password == 'always' and self.password is not None and info[1] != self.password:
    cmd = [self.module.get_bin_path('chpasswd', True)]
    cmd.append('--encrypted')
    data = '{name}:{password}'.format(name=self.name, password=self.password)
    rc, out, err = self.execute_command(cmd, data=data)
    if rc is not None and rc != 0:
        self.module.fail_json(name=self.name, msg=err, rc=rc)
"
-------------------------------------------------------------------------
"import os
import __future__
import select
import ansible.module_utils as module_utils
import re
import time
import shutil
import pty
import spwd
import calendar
import socket
import pwd
import grp
import subprocess
import ansible.module_utils._text
import ansible.module_utils.basic
import errno

if self.update_password == 'always' and self.password is not None and info[1] != self.password:
    cmd = [module_utils.get_bin_path('chpasswd', True)]
    cmd.append('--encrypted')
    data = '{name}:{password}'.format(name=self.name, password=self.password)
    rc, out, err = execute_command(cmd, data=data)
    if rc is not None and rc != 0:
        module_utils.fail_json(name=self.name, msg=err, rc=rc)"
-------------------------------------------------------------------------
"if self.update_password == 'always' and self.password is not None and info[1] != self.password:
    cmd = [self.module.get_bin_path('chpasswd', True)]
    cmd.append('--encrypted')
    data = '{name}:{password}'.format(name=self.name, password=self.password)
    rc, out, err = self.execute_command(cmd, data=data)
    if rc is not None and rc != 0:
        self.module.fail_json(name=self.name, msg=err, rc=rc)
"
-------------------------------------------------------------------------
"Recom
PRs: 65977, 66000"
-------------------------------------------------------------------------
=========================================================================
"- Please note that the module only makes sure that these containers are connected to the network,
  but does not care about connection options. If you rely on specific IP addresses etc., use the
  M(docker_container) module to ensure your containers are correctly connected to this network.
"
-------------------------------------------------------------------------
"```python
# Please note that the module only makes sure that these containers are connected to the network,
# but does not care about connection options. If you rely on specific IP addresses etc., use the
# M(docker_container) module to ensure your containers are correctly connected to this network.
```"
-------------------------------------------------------------------------
"- Please note that the module only makes sure that these containers are connected to the network,
  but does not care about connection options. If you rely on specific IP addresses etc., use the
  M(docker_container) module to ensure your containers are correctly connected to this network.
"
-------------------------------------------------------------------------
"Recom
PRs: 65840, 65965"
-------------------------------------------------------------------------
=========================================================================
"notes:
- When network options are changed, the module disconnects all containers from the network, deletes the network, and re-creates the network.
  It does not try to reconnect containers, except the ones listed in (I(connected), and even for these, it does not consider specific
  connection options like fixed IP addresses or MAC addresses. If you need more control over how the containers are connected to the
  network, loop the M(docker_container) module to loop over your containers to make sure they are connected properly.
- The module does not support Docker Swarm, i.e. it will not try to disconnect or reconnect services. If services are connected to the
  network, deleting the network will fail. When network options are changed, the network has to be deleted and recreated, so this will
  fail as well.

"
-------------------------------------------------------------------------
"```python
# When network options are changed, the module disconnects all containers from the network,
# deletes the network, and re-creates the network. It does not try to reconnect containers,
# except the ones listed in (I(connected), and even for these, it does not consider specific
# connection options like fixed IP addresses or MAC addresses. If you need more control over
# how the containers are connected to the network, loop the M(docker_container) module to loop
# over your containers to make sure they are connected properly.
#
# The module does not support Docker Swarm, i.e. it will not try to disconnect or reconnect
# services. If services are connected to the network, deleting the network will fail. When
# network options are changed, the network has to be deleted and recreated, so this will fail
# as well.
```"
-------------------------------------------------------------------------
"notes:
- When network options are changed, the module disconnects all containers from the network, deletes the network, and re-creates the network.
  It does not try to reconnect containers, except the ones listed in (I(connected), and even for these, it does not consider specific
  connection options like fixed IP addresses or MAC addresses. If you need more control over how the containers are connected to the
  network, loop the M(docker_container) module to loop over your containers to make sure they are connected properly.
- The module does not support Docker Swarm, i.e. it will not try to disconnect or reconnect services. If services are connected to the
  network, deleting the network will fail. When network options are changed, the network has to be deleted and recreated, so this will
  fail as well.

"
-------------------------------------------------------------------------
"Recom
PRs: 65840, 65965"
-------------------------------------------------------------------------
=========================================================================
"- Please note that the module only makes sure that these containers are connected to the network,
  but does not care about connection options. If you rely on specific IP addresses etc., use the
  M(docker_container) module to ensure your containers are correctly connected to this network.
"
-------------------------------------------------------------------------
"```python
# Please note that the module only makes sure that these containers are connected to the network,
# but does not care about connection options. If you rely on specific IP addresses etc., use the
# docker_container module to ensure your containers are correctly connected to this network.
```"
-------------------------------------------------------------------------
"- Please note that the module only makes sure that these containers are connected to the network,
  but does not care about connection options. If you rely on specific IP addresses etc., use the
  M(docker_container) module to ensure your containers are correctly connected to this network.
"
-------------------------------------------------------------------------
"Recom
PRs: 65840, 65964"
-------------------------------------------------------------------------
=========================================================================
"notes:
- When network options are changed, the module disconnects all containers from the network, deletes the network, and re-creates the network.
  It does not try to reconnect containers, except the ones listed in (I(connected), and even for these, it does not consider specific
  connection options like fixed IP addresses or MAC addresses. If you need more control over how the containers are connected to the
  network, loop the M(docker_container) module to loop over your containers to make sure they are connected properly.
- The module does not support Docker Swarm, i.e. it will not try to disconnect or reconnect services. If services are connected to the
  network, deleting the network will fail. When network options are changed, the network has to be deleted and recreated, so this will
  fail as well.

"
-------------------------------------------------------------------------
"```python
- name: ensure docker network is created
  ansible.docker.docker_network:
    name: my_network
    state: present
    driver: bridge
    ipam_options:
      driver: default
    connected:
      - container1
      - container2
    state_change: recreate
```"
-------------------------------------------------------------------------
"notes:
- When network options are changed, the module disconnects all containers from the network, deletes the network, and re-creates the network.
  It does not try to reconnect containers, except the ones listed in (I(connected), and even for these, it does not consider specific
  connection options like fixed IP addresses or MAC addresses. If you need more control over how the containers are connected to the
  network, loop the M(docker_container) module to loop over your containers to make sure they are connected properly.
- The module does not support Docker Swarm, i.e. it will not try to disconnect or reconnect services. If services are connected to the
  network, deleting the network will fail. When network options are changed, the network has to be deleted and recreated, so this will
  fail as well.

"
-------------------------------------------------------------------------
"Recom
PRs: 65840, 65964"
-------------------------------------------------------------------------
=========================================================================
"#
# The expected sort order is paths in the order in 'ret' with paths ending in '/windows' at the end,
# also in the original order they were found in 'ret'.
# The .sort() method is guaranteed to be stable, so original order is preserved.
ret.sort(key=lambda p: p.endswith('/windows'))
self._paths = ret
return ret
"
-------------------------------------------------------------------------
"```python
ret.sort(key=lambda p: (not p.endswith('/windows'), ret.index(p)))
self._paths = ret
return ret
```"
-------------------------------------------------------------------------
"#
# The expected sort order is paths in the order in 'ret' with paths ending in '/windows' at the end,
# also in the original order they were found in 'ret'.
# The .sort() method is guaranteed to be stable, so original order is preserved.
ret.sort(key=lambda p: p.endswith('/windows'))
self._paths = ret
return ret
"
-------------------------------------------------------------------------
"Recom
PRs: 65776, 65883"
-------------------------------------------------------------------------
=========================================================================
"""""""Search builtin paths to find a plugin. No external paths are searched,
meaning plugins inside roles inside collections will be ignored.
""""""

"
-------------------------------------------------------------------------
"```python
import os

class PluginLoader:
    def _find_fq_plugin(self, fq_name, extension):
        plugin_type = AnsibleCollectionRef.legacy_plugin_dir_to_plugin_type(self.subdir)

        acr = AnsibleCollectionRef.from_fqcr(fq_name, plugin_type)

        # Search builtin paths to find a plugin. No external paths are searched,
        # meaning plugins inside roles inside collections will be ignored.
        # Add necessary code here to implement the search logic
```"
-------------------------------------------------------------------------
"""""""Search builtin paths to find a plugin. No external paths are searched,
meaning plugins inside roles inside collections will be ignored.
""""""

"
-------------------------------------------------------------------------
"Recom
PRs: 65776, 65883"
-------------------------------------------------------------------------
=========================================================================
"# 'ansible.legacy' refers to the plugin finding behavior used before collections existed.
# They need to search 'library' and the various '*_plugins' directories in order to find the file.
# 'ansible.builtin' should be handled here. This means only internal, or builtin, paths are searched.
"
-------------------------------------------------------------------------
"```python
class PluginLoader:
    try:
        # HACK: refactor this properly
        if candidate_name.startswith('ansible.legacy'):
            full_name = name
            p = self._find_plugin_legacy(name.replace('ansible.legacy.', '', 1), ignore_deprecated, check_aliases, suffix)
        elif candidate_name.startswith('ansible.builtin'):  # Handle 'ansible.builtin'
            full_name, p = self._find_internal_plugin(candidate_name, suffix)
        else:
            full_name, p = self._find_fq_plugin(candidate_name, suffix)
        if p:
            return full_name, p
```"
-------------------------------------------------------------------------
"# 'ansible.legacy' refers to the plugin finding behavior used before collections existed.
# They need to search 'library' and the various '*_plugins' directories in order to find the file.
# 'ansible.builtin' should be handled here. This means only internal, or builtin, paths are searched.
"
-------------------------------------------------------------------------
"Recom
PRs: 65776, 65883"
-------------------------------------------------------------------------
=========================================================================
"""""""Search library and various *_plugins paths in order to find the file.
This was behavior prior to the existence of collections.
""""""
"
-------------------------------------------------------------------------
Find the file by searching the library and various *_plugins paths to mimic the behavior before the introduction of collections.
-------------------------------------------------------------------------
"""""""Search library and various *_plugins paths in order to find the file.
This was behavior prior to the existence of collections.
""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 65776, 65883"
-------------------------------------------------------------------------
=========================================================================
"
# HACK: Put Windows modules at the end of the list. This makes collection_loader behave
# the same way as plugin loader, preventing '.ps1' from modules being selected before '.py'
# modules simply because '.ps1' files may be above '.py' files in the flat_files list.
#
# The expected sort order is paths in the order they were in 'flat_files'
# with paths ending in '/windows' at the end, also in the original order they were
# in 'flat_files'. The .sort() method is guaranteed to be stable, so original order is preserved.
flat_files.sort(key=lambda p: p[0].endswith('/windows'))
"
-------------------------------------------------------------------------
"```python
# Sort 'flat_files' to put Windows modules at the end of the list while preserving the original order
flat_files.sort(key=lambda p: p[0].endswith('/windows'))
```"
-------------------------------------------------------------------------
"
# HACK: Put Windows modules at the end of the list. This makes collection_loader behave
# the same way as plugin loader, preventing '.ps1' from modules being selected before '.py'
# modules simply because '.ps1' files may be above '.py' files in the flat_files list.
#
# The expected sort order is paths in the order they were in 'flat_files'
# with paths ending in '/windows' at the end, also in the original order they were
# in 'flat_files'. The .sort() method is guaranteed to be stable, so original order is preserved.
flat_files.sort(key=lambda p: p[0].endswith('/windows'))
"
-------------------------------------------------------------------------
"Recom
PRs: 65776, 65883"
-------------------------------------------------------------------------
=========================================================================
"""AND sequence_name = %(name)s ""
""AND sequence_schema = %(schema)s"")
c_sql(self, query,
      query_params={'name': self.name, 'schema': self.schema},
      add_to_executed=False)
"
-------------------------------------------------------------------------
"```python
query.append(""AND sequence_name = %(name)s AND sequence_schema = %(schema)s"")
c_sql(self, query, query_params={'name': self.name, 'schema': self.schema}, add_to_executed=False)
```"
-------------------------------------------------------------------------
"""AND sequence_name = %(name)s ""
""AND sequence_schema = %(schema)s"")
c_sql(self, query,
      query_params={'name': self.name, 'schema': self.schema},
      add_to_executed=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 65787, 65863"
-------------------------------------------------------------------------
=========================================================================
"if self._is_new:
    if self.param('template'):
        clusters_service = self._connection.system_service().clusters_service()
        cluster = search_by_name(clusters_service, self.param('cluster'))
        data_center = self._connection.follow_link(cluster.data_center)
        templates = templates_service.list(
            search='name=%s and datacenter=%s' % (self.param('template'), data_center.name)
        if self.param('template_version'):
            templates = [
                t for t in templates
                if t.version.version_number == self.param('template_version')
            ]
        if not templates:
            raise ValueError(
                ""Template with name '%s' and version '%s' in data center '%s' was not found'"" % (
                    self.param('template'),
                    self.param('template_version'),
                    data_center.name
                )
            )
        template = sorted(templates, key=lambda t: t.version.version_number, reverse=True)[0]
    else:
        # If template isn't specified and VM is about to be created specify default template:
        template = templates_service.template_service('00000000-0000-0000-0000-000000000000').get()
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.ovirt import search_by_name
import traceback
from ansible.module_utils.basic import AnsibleModule
from ovirtsdk4.types import Template

if self._is_new:
    if self.param('template'):
        clusters_service = self._connection.system_service().clusters_service()
        cluster = search_by_name(clusters_service, self.param('cluster'))
        data_center = self._connection.follow_link(cluster.data_center)
        templates = self._connection.system_service().templates_service().list(
            search='name=%s and datacenter=%s' % (self.param('template'), data_center.name)
        if self.param('template_version'):
            templates = [
                t for t in templates
                if t.version.version_number == self.param('template_version')
            ]
        if not templates:
            raise ValueError(
                ""Template with name '%s' and version '%s' in data center '%s' was not found'"" % (
                    self.param('template'),
                    self.param('template_version'),
                    data_center.name
                )
            )
        template = sorted(templates, key=lambda t: t.version.version_number, reverse=True)[0]
    else:
        # If template isn't specified and VM is about to be created specify default template:
        template = self._connection.system_service().templates_service().template_service('00000000-0000-0000-0000-000000000000').get()
```"
-------------------------------------------------------------------------
"if self._is_new:
    if self.param('template'):
        clusters_service = self._connection.system_service().clusters_service()
        cluster = search_by_name(clusters_service, self.param('cluster'))
        data_center = self._connection.follow_link(cluster.data_center)
        templates = templates_service.list(
            search='name=%s and datacenter=%s' % (self.param('template'), data_center.name)
        if self.param('template_version'):
            templates = [
                t for t in templates
                if t.version.version_number == self.param('template_version')
            ]
        if not templates:
            raise ValueError(
                ""Template with name '%s' and version '%s' in data center '%s' was not found'"" % (
                    self.param('template'),
                    self.param('template_version'),
                    data_center.name
                )
            )
        template = sorted(templates, key=lambda t: t.version.version_number, reverse=True)[0]
    else:
        # If template isn't specified and VM is about to be created specify default template:
        template = templates_service.template_service('00000000-0000-0000-0000-000000000000').get()
"
-------------------------------------------------------------------------
"Recom
PRs: 65317, 65702"
-------------------------------------------------------------------------
=========================================================================
"""WHERE schema_name = %(schema)s"")
ecute(query, {'schema': schema})
""WHERE schema_name = %(schema)s"")
ecute(query, {'schema': schema})
"
-------------------------------------------------------------------------
"```python
from __future__ import print_function
import psycopg2.extras
from ansible.module_utils.database import pg_quote_identifier
import traceback
from ansible.module_utils._text import to_native
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.postgres import connect_to_db

def set_owner(cursor, schema, owner):
    def get_schema_info(cursor, schema):
        query = (""SELECT schema_owner AS owner ""
                 ""FROM information_schema.schemata ""
                 ""WHERE schema_name = %(schema)s"")
        cursor.execute(query, {'schema': schema})
        return cursor.fetchone()

def schema_exists(cursor, schema):
    query = (""SELECT schema_name FROM information_schema.schemata ""
             ""WHERE schema_name = %(schema)s"")
    cursor.execute(query, {'schema': schema})
    return cursor.rowcount == 1
```"
-------------------------------------------------------------------------
"""WHERE schema_name = %(schema)s"")
ecute(query, {'schema': schema})
""WHERE schema_name = %(schema)s"")
ecute(query, {'schema': schema})
"
-------------------------------------------------------------------------
"Recom
PRs: 65679, 65685"
-------------------------------------------------------------------------
=========================================================================
"# paramiko and gssapi are incompatible and raise AttributeError not ImportError
# When running in FIPS mode, cryptography raises InternalError
# https://bugzilla.redhat.com/show_bug.cgi?id=1778939
except Exception as err:
"
-------------------------------------------------------------------------
"```python
PARAMIKO_IMPORT_ERR = None
paramiko = None
try:
    import paramiko
    PARAMIKO_IMPORT_ERR = err
except Exception as err:
```"
-------------------------------------------------------------------------
"# paramiko and gssapi are incompatible and raise AttributeError not ImportError
# When running in FIPS mode, cryptography raises InternalError
# https://bugzilla.redhat.com/show_bug.cgi?id=1778939
except Exception as err:
"
-------------------------------------------------------------------------
"Recom
PRs: 65477, 65669"
-------------------------------------------------------------------------
=========================================================================
"# paramiko and gssapi are incompatible and raise AttributeError not ImportError
# When running in FIPS mode, cryptography raises InternalError
# https://bugzilla.redhat.com/show_bug.cgi?id=1778939
except Exception as err:
"
-------------------------------------------------------------------------
"```python
PARAMIKO_IMPORT_ERR = None
paramiko = None
try:
    import paramiko
except Exception as err:
```"
-------------------------------------------------------------------------
"# paramiko and gssapi are incompatible and raise AttributeError not ImportError
# When running in FIPS mode, cryptography raises InternalError
# https://bugzilla.redhat.com/show_bug.cgi?id=1778939
except Exception as err:
"
-------------------------------------------------------------------------
"Recom
PRs: 65477, 65668"
-------------------------------------------------------------------------
=========================================================================
"build=dict(type='dict', options=dict(
"
-------------------------------------------------------------------------
"    argument_spec = dict(
        source=dict(type='str', choices=['build', 'load', 'pull', 'local']),
        cache_from=dict(type='list', elements='str'),
        container_limits=dict(type='dict', options=dict(
            memory=dict(type='int'),
        build=dict(type='dict', options=dict(
                # No need to provide extra information
            )
        )
    )"
-------------------------------------------------------------------------
"build=dict(type='dict', options=dict(
"
-------------------------------------------------------------------------
"Recom
PRs: 65632, 65657"
-------------------------------------------------------------------------
=========================================================================
"- If no name is provided, a list of all images will be returned.
"
-------------------------------------------------------------------------
"```yaml
options:
       - An image name or a list of image names. Name format will be C(name[:tag]) or C(repository/name[:tag]),
         where C(tag) is optional. If a tag is not provided, C(latest) will be used. Instead of image names, also
         image IDs can be used.
     type: list
     elements: str
     description: If no name is provided, a list of all images will be returned.

extends_documentation_fragment:
   - docker
```"
-------------------------------------------------------------------------
"- If no name is provided, a list of all images will be returned.
"
-------------------------------------------------------------------------
"Recom
PRs: 65632, 65657"
-------------------------------------------------------------------------
=========================================================================
"- The username for the registry account.
- Required when I(state) is C(present).
- The plaintext password for the registry account.
- Required when I(state) is C(present).
"
-------------------------------------------------------------------------
"```yaml
options:
  url:
    description:
  username:
    description: ""The username for the registry account.""
    type: str
  password:
    description: ""The plaintext password for the registry account.""
    type: str
  email:
    description:
      - Does nothing, do not use.
      - Will be removed in Ansible 2.14.
```"
-------------------------------------------------------------------------
"- The username for the registry account.
- Required when I(state) is C(present).
- The plaintext password for the registry account.
- Required when I(state) is C(present).
"
-------------------------------------------------------------------------
"Recom
PRs: 65632, 65657"
-------------------------------------------------------------------------
=========================================================================
"'state': dict(type='str', default='present', choices=['present', 'absent']),
"
-------------------------------------------------------------------------
"'state': dict(type='str', default='present', choices=['present', 'absent'])"
-------------------------------------------------------------------------
"'state': dict(type='str', default='present', choices=['present', 'absent']),
"
-------------------------------------------------------------------------
"Recom
PRs: 65632, 65657"
-------------------------------------------------------------------------
=========================================================================
"import errno
"
-------------------------------------------------------------------------
"```python
import errno
```"
-------------------------------------------------------------------------
"import errno
"
-------------------------------------------------------------------------
"Recom
PRs: 65609, 65635"
-------------------------------------------------------------------------
=========================================================================
"with open(self.load_path, 'rb') as image_tar:
    self.log(""Loading image from %s"" % self.load_path)
    self.client.load_image(image_tar)
pt EnvironmentError as exc:
if exc.errno == errno.ENOENT:
    self.fail(""Error opening image %s - %s"" % (self.load_path, str(exc)))
self.fail(""Error loading image %s - %s"" % (self.name, str(exc)))
"
-------------------------------------------------------------------------
"```python
with open(self.load_path, 'rb') as image_tar:
    self.log(""Loading image from %s"" % self.load_path)
    try:
        self.client.load_image(image_tar)
    except EnvironmentError as exc:
        if exc.errno == errno.ENOENT:
            self.fail(""Error opening image %s - %s"" % (self.load_path, str(exc)))
        self.fail(""Error loading image %s - %s"" % (self.name, str(exc)))
```"
-------------------------------------------------------------------------
"with open(self.load_path, 'rb') as image_tar:
    self.log(""Loading image from %s"" % self.load_path)
    self.client.load_image(image_tar)
pt EnvironmentError as exc:
if exc.errno == errno.ENOENT:
    self.fail(""Error opening image %s - %s"" % (self.load_path, str(exc)))
self.fail(""Error loading image %s - %s"" % (self.name, str(exc)))
"
-------------------------------------------------------------------------
"Recom
PRs: 65609, 65635"
-------------------------------------------------------------------------
=========================================================================
"db_connection = mysql_driver.connect(**config)
"
-------------------------------------------------------------------------
"```python
db_connection = mysql_driver.connect(**config)
```"
-------------------------------------------------------------------------
"db_connection = mysql_driver.connect(**config)
"
-------------------------------------------------------------------------
"Recom
PRs: 64585, 65596"
-------------------------------------------------------------------------
=========================================================================
"try:
    cursor = mysql_connect(module, login_user, login_password,
                           config_file, ssl_cert, ssl_key, ssl_ca, db,
                           connect_timeout=connect_timeout, cursor_class='DictCursor')
except Exception as e:
    module.fail_json(msg=""unable to connect to database, check login_user and login_password are correct or %s has the credentials. ""
                         ""Exception message: %s"" % (config_file, to_native(e)))
"
-------------------------------------------------------------------------
"try:
    cursor = mysql_connect(module, login_user, login_password,
                           config_file, ssl_cert, ssl_key, ssl_ca, db,
                           connect_timeout=connect_timeout, cursor_class='DictCursor')
except Exception as e:
    module.fail_json(msg=""unable to connect to database, check login_user and login_password are correct or %s has the credentials. ""
                         ""Exception message: %s"" % (config_file, to_native(e)))"
-------------------------------------------------------------------------
"try:
    cursor = mysql_connect(module, login_user, login_password,
                           config_file, ssl_cert, ssl_key, ssl_ca, db,
                           connect_timeout=connect_timeout, cursor_class='DictCursor')
except Exception as e:
    module.fail_json(msg=""unable to connect to database, check login_user and login_password are correct or %s has the credentials. ""
                         ""Exception message: %s"" % (config_file, to_native(e)))
"
-------------------------------------------------------------------------
"Recom
PRs: 64585, 65596"
-------------------------------------------------------------------------
=========================================================================
"self._yum_base = None
"
-------------------------------------------------------------------------
self._yum_base = None
-------------------------------------------------------------------------
"self._yum_base = None
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"@property
    if self._yum_base:
        return self._yum_base
    else:
        # Only init once
        self._yum_base = yum.YumBase()
        self._yum_base.preconf.debuglevel = 0
        self._yum_base.preconf.errorlevel = 0
        self._yum_base.preconf.plugins = True
        self._yum_base.preconf.enabled_plugins = self.enable_plugin
        self._yum_base.preconf.disabled_plugins = self.disable_plugin
        if self.releasever:
            self._yum_base.preconf.releasever = self.releasever
        if self.installroot != '/':
            # do not setup installroot by default, because of error
            # CRITICAL:yum.cli:Config Error: Error accessing file for config file:////etc/yum.conf
            # in old yum version (like in CentOS 6.6)
            self._yum_base.preconf.root = self.installroot
            self._yum_base.conf.installroot = self.installroot
        if self.conf_file and os.path.exists(self.conf_file):
            self._yum_base.preconf.fn = self.conf_file
        if os.geteuid() != 0:
            if hasattr(self._yum_base, 'setCacheDir'):
                self._yum_base.setCacheDir()
            else:
                cachedir = yum.misc.getCacheDir()
                self._yum_base.repos.setCacheDir(cachedir)
                self._yum_base.conf.cache = 0
        if self.disable_excludes:
            self._yum_base.conf.disable_excludes = self.disable_excludes
        # A sideeffect of accessing conf is that the configuration is
        # loaded and plugins are discovered
        self.yum_base.conf

        try:
            self._enablerepos_with_error_checking(self._yum_base)

            for rid in self.disablerepo:
                self.yum_base.repos.disableRepo(rid)
        except Exception as e:
            self.module.fail_json(msg=""Failure talking to yum: %s"" % to_native(e))

    return self._yum_base
"
-------------------------------------------------------------------------
"```python
@property
def yum_base(self):
    if self._yum_base:
        return self._yum_base
    else:
        # Only init once
        self._yum_base = yum.YumBase()
        self._yum_base.preconf.debuglevel = 0
        self._yum_base.preconf.errorlevel = 0
        self._yum_base.preconf.plugins = True
        self._yum_base.preconf.enabled_plugins = self.enable_plugin
        self._yum_base.preconf.disabled_plugins = self.disable_plugin
        if self.releasever:
            self._yum_base.preconf.releasever = self.releasever
        if self.installroot != '/':
            # do not setup installroot by default, because of error
            # CRITICAL:yum.cli:Config Error: Error accessing file for config file:////etc/yum.conf
            # in old yum version (like in CentOS 6.6)
            self._yum_base.preconf.root = self.installroot
            self._yum_base.conf.installroot = self.installroot
        if self.conf_file and os.path.exists(self.conf_file):
            self._yum_base.preconf.fn = self.conf_file
        if os.geteuid() != 0:
            if hasattr(self._yum_base, 'setCacheDir'):
                self._yum_base.setCacheDir()
            else:
                cachedir = yum.misc.getCacheDir()
                self._yum_base.repos.setCacheDir(cachedir)
                self._yum_base.conf.cache = 0
        if self.disable_excludes:
            self._yum_base.conf.disable_excludes = self.disable_excludes
        # A sideeffect of accessing conf is that the configuration is
        # loaded and plugins are discovered
        self.yum_base.conf

        try:
            self._enablerepos_with_error_checking(self._yum_base)

            for rid in self.disablerepo:
                self.yum_base.repos.disableRepo(rid)
        except Exception as e:
            self.module.fail_json(msg=""Failure talking to yum: %s"" % to_native(e))

    return self._yum_base
```"
-------------------------------------------------------------------------
"def _enablerepos_with_error_checking(self, yumbase):
    # NOTE: This seems unintuitive, but it mirrors yum's CLI bahavior
    if len(self.enablerepo) == 1:
        try:
            yumbase.repos.enableRepo(self.enablerepo[0])
        except yum.Errors.YumBaseError as e:
            if u'repository not found' in to_text(e):
                self.module.fail_json(msg=""Repository %s not found."" % self.enablerepo[0])
            else:
                raise e
    else:
        for rid in self.enablerepo:
            try:
                yumbase.repos.enableRepo(rid)
            except yum.Errors.YumBaseError as e:
                if u'repository not found' in to_text(e):
                    self.module.warn(""Repository %s not found."" % rid)
                else:
                    raise e

@property
    if self._yum_base:
        return self._yum_base
    else:
        # Only init once
        self._yum_base = yum.YumBase()
        self._yum_base.preconf.debuglevel = 0
        self._yum_base.preconf.errorlevel = 0
        self._yum_base.preconf.plugins = True
        self._yum_base.preconf.enabled_plugins = self.enable_plugin
        self._yum_base.preconf.disabled_plugins = self.disable_plugin
        if self.releasever:
            self._yum_base.preconf.releasever = self.releasever
        if self.installroot != '/':
            # do not setup installroot by default, because of error
            # CRITICAL:yum.cli:Config Error: Error accessing file for config file:////etc/yum.conf
            # in old yum version (like in CentOS 6.6)
            self._yum_base.preconf.root = self.installroot
            self._yum_base.conf.installroot = self.installroot
        if self.conf_file and os.path.exists(self.conf_file):
            self._yum_base.preconf.fn = self.conf_file
        if os.geteuid() != 0:
            if hasattr(self._yum_base, 'setCacheDir'):
                self._yum_base.setCacheDir()
            else:
                cachedir = yum.misc.getCacheDir()
                self._yum_base.repos.setCacheDir(cachedir)
                self._yum_base.conf.cache = 0
        if self.disable_excludes:
            self._yum_base.conf.disable_excludes = self.disable_excludes

        # A sideeffect of accessing conf is that the configuration is
        # loaded and plugins are discovered
        self.yum_base.conf
        try:
            self._enablerepos_with_error_checking(self._yum_base)

            for rid in self.disablerepo:
                self.yum_base.repos.disableRepo(rid)
        except Exception as e:
            self.module.fail_json(msg=""Failure talking to yum: %s"" % to_native(e))

    return self._yum_base
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"groups_list = self.yum_base.doGroupLists(return_evgrps=True)
groups_list = self.yum_base.doGroupLists()
"
-------------------------------------------------------------------------
"```python
groups_list = self.yum_base.doGroupLists()
```"
-------------------------------------------------------------------------
"groups_list = self.yum_base.doGroupLists(return_evgrps=True)
groups_list = self.yum_base.doGroupLists()
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"e, m, _ = self.yum_base.rpmdb.matchPackageNames([pkgspec])
    pkgs.extend(self.yum_base.returnInstalledPackagesByDep(pkgspec))
"
-------------------------------------------------------------------------
"```python
e, m, _ = self.yum_base.rpmdb.matchPackageNames([pkgspec])
pkgs.extend(self.yum_base.returnInstalledPackagesByDep(pkgspec))
```"
-------------------------------------------------------------------------
"e, m, _ = self.yum_base.rpmdb.matchPackageNames([pkgspec])
    pkgs.extend(self.yum_base.returnInstalledPackagesByDep(pkgspec))
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"e, m, _ = self.yum_base.pkgSack.matchPackageNames([pkgspec])
    pkgs.extend(self.yum_base.returnPackagesByDep(pkgspec))
"
-------------------------------------------------------------------------
"```python
e, m, _ = self.yum_base.pkgSack.matchPackageNames([pkgspec])
pkgs.extend(self.yum_base.returnPackagesByDep(pkgspec))
```"
-------------------------------------------------------------------------
"e, m, _ = self.yum_base.pkgSack.matchPackageNames([pkgspec])
    pkgs.extend(self.yum_base.returnPackagesByDep(pkgspec))
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"pkgs = self.yum_base.returnPackagesByDep(pkgspec)  \
    self.yum_base.returnInstalledPackagesByDep(pkgspec)
    e, m, _ = self.yum_base.pkgSack.matchPackageNames([pkgspec])
updates = self.yum_base.doPackageLists(pkgnarrow='updates').updates
"
-------------------------------------------------------------------------
"```python
import os
import ansible.module_utils.yumdnf
import __future__
import ansible.module_utils.urls
import yum
import re
import tempfile
import rpm
import rpmUtils.miscutils
import yum.misc
import contextlib
import ansible.module_utils._text
import ansible.module_utils.basic
import errno

pkgs = self.yum_base.returnPackagesByDep(pkgspec)
self.yum_base.returnInstalledPackagesByDep(pkgspec)
e, m, _ = self.yum_base.pkgSack.matchPackageNames([pkgspec])
updates = self.yum_base.doPackageLists(pkgnarrow='updates').updates
```"
-------------------------------------------------------------------------
"pkgs = self.yum_base.returnPackagesByDep(pkgspec)  \
    self.yum_base.returnInstalledPackagesByDep(pkgspec)
    e, m, _ = self.yum_base.pkgSack.matchPackageNames([pkgspec])
updates = self.yum_base.doPackageLists(pkgnarrow='updates').updates
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"pkgs = self.yum_base.returnPackagesByDep(req_spec)  \
    self.yum_base.returnInstalledPackagesByDep(req_spec)
"
-------------------------------------------------------------------------
"```python
pkgs = self.yum_base.returnPackagesByDep(req_spec)
self.yum_base.returnInstalledPackagesByDep(req_spec)
```"
-------------------------------------------------------------------------
"pkgs = self.yum_base.returnPackagesByDep(req_spec)  \
    self.yum_base.returnInstalledPackagesByDep(req_spec)
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"pkgs = self.yum_base.returnPackagesByDep(req_spec)  \
    self.yum_base.returnInstalledPackagesByDep(req_spec)
, _ = self.yum_base.pkgSack.matchPackageNames([req_spec])
, _ = self.yum_base.rpmdb.matchPackageNames([req_spec])
"
-------------------------------------------------------------------------
"```python
pkgs = self.yum_base.returnPackagesByDep(req_spec)
_ = self.yum_base.returnInstalledPackagesByDep(req_spec)
_, _ = self.yum_base.pkgSack.matchPackageNames([req_spec]), self.yum_base.rpmdb.matchPackageNames([req_spec])
```"
-------------------------------------------------------------------------
"pkgs = self.yum_base.returnPackagesByDep(req_spec)  \
    self.yum_base.returnInstalledPackagesByDep(req_spec)
, _ = self.yum_base.pkgSack.matchPackageNames([req_spec])
, _ = self.yum_base.rpmdb.matchPackageNames([req_spec])
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"if self.yum_base.conf.proxy and self.yum_base.conf.proxy not in (""_none_"",):
    if self.yum_base.conf.proxy_username:
        namepass = namepass  self.yum_base.conf.proxy_username
        proxy_url = self.yum_base.conf.proxy
        if self.yum_base.conf.proxy_password:
            namepass = namepass  "":""  self.yum_base.conf.proxy_password
    elif '@' in self.yum_base.conf.proxy:
        namepass = self.yum_base.conf.proxy.split('@')[0].split('//')[-1]
        proxy_url = self.yum_base.conf.proxy.replace(""{0}@"".format(namepass), """")
"
-------------------------------------------------------------------------
"```python
namepass = """"
scheme = [""http"", ""https""]
if self.yum_base.conf.proxy and self.yum_base.conf.proxy not in (""_none_"",):
    if self.yum_base.conf.proxy_username:
        namepass = namepass + self.yum_base.conf.proxy_username
        proxy_url = self.yum_base.conf.proxy
        if self.yum_base.conf.proxy_password:
            namepass = namepass + "":"" + self.yum_base.conf.proxy_password
    elif '@' in self.yum_base.conf.proxy:
        namepass = self.yum_base.conf.proxy.split('@')[0].split('//')[-1]
        proxy_url = self.yum_base.conf.proxy.replace(""{0}@"".format(namepass), """")
```"
-------------------------------------------------------------------------
"if self.yum_base.conf.proxy and self.yum_base.conf.proxy not in (""_none_"",):
    if self.yum_base.conf.proxy_username:
        namepass = namepass  self.yum_base.conf.proxy_username
        proxy_url = self.yum_base.conf.proxy
        if self.yum_base.conf.proxy_password:
            namepass = namepass  "":""  self.yum_base.conf.proxy_password
    elif '@' in self.yum_base.conf.proxy:
        namepass = self.yum_base.conf.proxy.split('@')[0].split('//')[-1]
        proxy_url = self.yum_base.conf.proxy.replace(""{0}@"".format(namepass), """")
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"os.environ[item  ""_proxy""] = self.yum_base.conf.proxy
"
-------------------------------------------------------------------------
"```python
os.environ[item + ""_proxy""] = self.yum_base.conf.proxy
```"
-------------------------------------------------------------------------
"os.environ[item  ""_proxy""] = self.yum_base.conf.proxy
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"self._yum_base = None  # previous YumBase package index is now invalid
"
-------------------------------------------------------------------------
self._yum_base = None  
-------------------------------------------------------------------------
"self._yum_base = None  # previous YumBase package index is now invalid
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"try: self.yum_base.repos.disableRepo(disablerepo)
try: self.yum_base.repos.enableRepo(enablerepo)
"
-------------------------------------------------------------------------
"```python
try:
    self.yum_base.repos.disableRepo(disablerepo)
    self.yum_base.repos.enableRepo(enablerepo)
except Exception as e:
    # handle exception if needed
    pass
```"
-------------------------------------------------------------------------
"try: self.yum_base.repos.disableRepo(disablerepo)
try: self.yum_base.repos.enableRepo(enablerepo)
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"current_repos = self.yum_base.repos.repos.keys()
        new_repos = self.yum_base.repos.repos.keys()
                rid = self.yum_base.repos.getRepo(i)
"
-------------------------------------------------------------------------
"```python
current_repos = self.yum_base.repos.keys()
new_repos = self.yum_base.repos.keys()
rid = self.yum_base.getRepo(i)
```"
-------------------------------------------------------------------------
"current_repos = self.yum_base.repos.repos.keys()
        new_repos = self.yum_base.repos.repos.keys()
                rid = self.yum_base.repos.getRepo(i)
"
-------------------------------------------------------------------------
"Recom
PRs: 63713, 65575"
-------------------------------------------------------------------------
=========================================================================
"runners = self._gitlab.runners.all(as_list=False)
    if (runner['description'] == description):
        return self._gitlab.runners.get(runner['id'])
"
-------------------------------------------------------------------------
"runners = self._gitlab.runners.all(as_list=False)
for runner in runners:
    if (runner['description'] == description):
        return self._gitlab.runners.get(runner['id'])"
-------------------------------------------------------------------------
"runners = self._gitlab.runners.all(as_list=False)
    if (runner['description'] == description):
        return self._gitlab.runners.get(runner['id'])
"
-------------------------------------------------------------------------
"Recom
PRs: 65176, 65546"
-------------------------------------------------------------------------
=========================================================================
"runners = self._gitlab.runners.all(as_list=False)
    if (runner['description'] == description):
        return self._gitlab.runners.get(runner['id'])
"
-------------------------------------------------------------------------
"runners = self._gitlab.runners.list(as_list=False)
for runner in runners:
    if (runner.description == description):
        return self._gitlab.runners.get(runner.id)"
-------------------------------------------------------------------------
"runners = self._gitlab.runners.all(as_list=False)
    if (runner['description'] == description):
        return self._gitlab.runners.get(runner['id'])
"
-------------------------------------------------------------------------
"Recom
PRs: 65176, 65545"
-------------------------------------------------------------------------
=========================================================================
"target = (
    pair.get('UserId', None),
    pair.get('GroupId', None),
    pair.get('GroupName', None),
)
"
-------------------------------------------------------------------------
"```python
import ansible.module_utils.aws.iam
import ansible.module_utils.ec2
import collections
import ansible.module_utils.compat.ipaddress
import botocore.exceptions
import re
import ansible.module_utils._text
import ansible.module_utils.aws.core
import time
import ansible.module_utils.aws.waiters
import ansible.module_utils.common.network
import itertools
import json
import ansible.module_utils.six
import copy

def rule_from_group_permission(perm):
    if 'UserIdGroupPairs' in perm and perm['UserIdGroupPairs']:
        for pair in perm['UserIdGroupPairs']:
            if pair.get('UserId', '').startswith('amazon-'):
                # amazon-elb and amazon-prefix rules don't need
                # group-id specified, so remove it when querying
                target = (
                    pair.get('UserId', None),
                    pair.get('GroupId', None),
                    pair.get('GroupName', None),
                )
```  "
-------------------------------------------------------------------------
"target = (
    pair.get('UserId', None),
    pair.get('GroupId', None),
    pair.get('GroupName', None),
)
"
-------------------------------------------------------------------------
"Recom
PRs: 62374, 65510"
-------------------------------------------------------------------------
=========================================================================
"self.roles[:0] = roles

return self.roles
"
-------------------------------------------------------------------------
"```python
self.roles[:0] = roles
return self.roles
```"
-------------------------------------------------------------------------
"self.roles[:0] = roles

return self.roles
"
-------------------------------------------------------------------------
"Recom
PRs: 65063, 65493"
-------------------------------------------------------------------------
=========================================================================
"- Required if I(state) is C(present).
"
-------------------------------------------------------------------------
Required if I(state) is C(present).
-------------------------------------------------------------------------
"- Required if I(state) is C(present).
"
-------------------------------------------------------------------------
"Recom
PRs: 65435, 65461"
-------------------------------------------------------------------------
=========================================================================
"privatekey_path=dict(type='path'),
"
-------------------------------------------------------------------------
privatekey_path=dict(type='path')
-------------------------------------------------------------------------
"privatekey_path=dict(type='path'),
"
-------------------------------------------------------------------------
"Recom
PRs: 65435, 65461"
-------------------------------------------------------------------------
=========================================================================
"required_if=[('state', 'present', ['privatekey_path'])],
"
-------------------------------------------------------------------------
"Based on the information provided, the updated code snippet would look like this:

```python
required_if=[('state', 'present', ['privatekey_path'])],
```"
-------------------------------------------------------------------------
"required_if=[('state', 'present', ['privatekey_path'])],
"
-------------------------------------------------------------------------
"Recom
PRs: 65435, 65461"
-------------------------------------------------------------------------
=========================================================================
"- Required if I(state) is C(present).
"
-------------------------------------------------------------------------
"Adapt the given code snippet based on the information below - All ASTs from commit history: 
Current context: options:
     privatekey_path:
         description:
             - The path to the private key to use when signing the certificate signing request.
         type: path
     privatekey_passphrase:
         description:
             - The passphrase for the private key.
Required dependency: os, __future__, abc, distutils.version, cryptography.hazmat.primitives.serialization, cryptography.x509, OpenSSL, ansible.module_utils, ansible.module_utils.compat, cryptography.hazmat.primitives.hashes, cryptography.x509.oid, cryptography.hazmat.backends, cryptography.exceptions, traceback, ansible.module_utils._text, ansible.module_utils.basic, cryptography, 
Original metadata: [2.8] openssl_csr: make sure privatekey_path is specified when state is present
--##### SUMMARYBackport of #65435 to stable-2.8.##### ISSUE TYPE- Bugfix Pull Request##### COMPONENT NAMEopenssl_csrbackport, module, owner_pr, community_review, support:community, bug, affects_2.8, crypto

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: __future__.absolute_import, cryptography.x509.oid, cryptography.hazmat.backends, cryptography.exceptions, __future__.division, ansible.module_utils.basic.AnsibleModule, ansible.module_utils._text.to_native, traceback, binascii, cryptography.hazmat.primitives.serialization, ansible.module_utils._text.to_text, cryptography.x509, cryptography.hazmat.primitives.hashes, ansible.module_utils.crypto, OpenSSL.crypto, os, distutils.version.LooseVersion, ansible.module_utils.basic.missing_required_lib, abc, __future__.print_function, OpenSSL, ansible.module_utils.compat.ipaddress, ansible.module_utils._text.to_bytes, cryptography
Function name information from Stable: __init__, _load_private_key, _check_subject_key_identifier, _check_extensions, _normalize_san, remove, _check_authority_key_identifier, _generate_csr, _check_subjectAltName, main, _check_keyUsage_, generate, _check_csr, _check_basicConstraints, check, _check_signature, _check_extenededKeyUsage, _check_subject, _find_extension, _check_ocspMustStaple, dump, _check_keyUsage
Function call information from Stable: dict, missing_required_lib, _check_subject_key_identifier, _check_extensions, to_text, set, next, CertificateSigningRequestError, getattr, isinstance, CertificateSigningRequestPyOpenSSL, _check_authority_key_identifier, CertificateSigningRequestCryptography, AnsibleModule, str, len, _check_subjectAltName, main, _check_keyUsage_, to_native, _check_basicConstraints, _check_signature, _check_extenededKeyUsage, _check_subject, _find_extension, super, LooseVersion, open, _check_ocspMustStaple, _check_keyUsage, to_bytes
Class name information from Stable: CertificateSigningRequestBase, CertificateSigningRequestCryptography, CertificateSigningRequestPyOpenSSL, CertificateSigningRequestError
Class method call information from Stable: csr.sign, self.keyUsage, csr.public_key, OpenSSL.__version__, os.path, self.authority_cert_serial_number, bc_ext.critical, self.privatekey_passphrase, csr.add_extension, self.extendedKeyUsage_critical, self.create_subject_key_identifier, crypto.X509Extension, extensions.append, module.set_fs_attributes_if_different, ip.compressed, f.read, module.deprecate, crypto.Error, csr.dump, OpenSSL.crypto, ext.get_short_name, cryptography.__version__, oms_ext.extend, self._generate_csr, module.params, crypto.FILETYPE_PEM, current_usages_ext.critical, altnames.encode, ext.value, self.backup, self.privatekey_path, self.check, csr.generate, OpenSSL.SSL, req.add_extensions, self.force, csr.get_subject, binascii.unhexlify, self.subject, module.load_file_common_arguments, module.backup_local, crypto_utils.OpenSSLObjectError, cryptography.hazmat, csr.check, csr.subject_name, self._load_private_key, traceback.format_exc, tlsfeature_ext.value, module.check_mode, module.warn, crypto_utils.write_file, crypto_utils.OpenSSLObject, crypto.dump_certificate_request, self.subject_key_identifier, self._normalize_san, module.exit_json, self.digest, self.path, sub.oid, self.privatekey, subject._name, self.keyUsage_critical, self.subjectAltName, ext.critical, req.set_pubkey, csr.subject, current_keyusage_ext.critical, altnames_ext.get_critical, compat_ipaddress.ip_address, crypto.X509Req, csr.verify, OpenSSL._util, crypto_utils.load_certificate_request, sub.value, self.authority_cert_issuer, crypto_utils.cryptography_get_name, crypto_utils.cryptography_key_needs_digest_for_signing, expected_ext.get_data, bc_ext.value, cryptography.x509, self.request, self.basicConstraints_critical, current_keyusage_ext.value, module.exit_json, self.ocspMustStaple, crypto_utils.cryptography_name_to_oid, self.basicConstraints, current_keyusage_ext.value, usage.strip, csr.get_extensions, crypto_utils.OpenSSLBadPassphraseError, self._check_csr, current_altnames_ext.critical, csr.extensions, crypto_utils.cryptography_parse_key_usage_params, crypto_utils.parse_name_field, ext.get_data, usages.encode, abc.abstractmethod, self.extendedKeyUsage, altname.strip, req.get_subject, san.startswith, self.backup_file, self.version, tlsfeature_ext.critical, req.set_version, self.authority_key_identifier, req.sign, self.module, crypto_utils.load_privatekey, self.subjectAltName_critical, self.ocspMustStaple_critical, self.changed, self.cryptography_backend
Target file: always, certificates, elements, __metaclass__, organizationName, length, extensions, comma, NameAttribute, for, TypeError, elif, certificate, Indicates, regenerate, no_log, ocsp_must_staple, OBJ_txt2nid, SSL, You, passphrase, current_ca, CertificateSigningRequestCryptography, ascii, x05, entry, str, state_and_perms, If, public_bytes, Create, allows, its, RID, extended_key_usage_critical, class, can, github, GNU, KeyUsage, cryptography_get_basic_constraints, OpenSSLObjectError, Signing, bin, your, sign, ansible, dump, re, e, Algorithm, t, x03, X509_NAME_add_entry_by_NID, ValueError, current_keyusage_ext, to_text, keyUsage_critical, _normalize_san, subject, cryptography_key_needs_digest_for_signing, detect, false, isinstance, should, tlsfeature_ext, main, rfc5280, stateOrProvinceName, get_data, ca, lib, prefixed, sha1, flag, _check_signature, Alternative, verify, status, commonName, signed, Subject, SHA1, X509Extension, gnu, tlsfeature, None, Workaround, with_dict, subject_alt_name, encode, same, dirname, openssl_csr, issues, CertificateSigningRequestPyOpenSSL, algorithm, Guenane, allowed, Request, since, choice, default, older, contained, Detection, Invalid, PYOPENSSL_FOUND, Purpose, country_name, _find_extension, will, contain, OpenSSL, _check_ocspMustStaple, CRYPTOGRAPHY_FOUND, any, ocsp_must_staple_critical, Success, taking, values, MBSTRING_UTF8, stated, hash, current_altnames, __main__, CSR, Public, names, FR, not, True, an, email_address, information, usage, expected, OPENSSL_MUST_STAPLE_NAME, check_mode, exists, basic_constraints, len, digitalSignature, argument_spec, with, import, only, generate, bc_ext, Key, true, bitfield, openssl_certificate, check, https, g, super, doesn, Ed448, open, specified, primitives, compare, RETURN, get_subject, Therefore, pypi, privatekey_path, uses, COPYING, module_utils, path_length, SHA256, f, enabled, keyUsage, CertificateSigningRequestError, tuples, False, accept, into, exceptions, given, License, feature, x, ones, is, registered, exc, ocspMustStaple, The, clients, signing, interact, O, get_short_name, DER, bool, startswith, _check_subject, more, OCSP, dirName, according, choices, when, project, ocspMustStaple_critical, password, the, to, version_added, U, Address, sha384, module, purposes, extKeyUsage, _check_extensions, file, specifier, although, oid, may, supported_by, key, CertificateSigningRequestBase, email, authentication, def, raise, private, Can, it, _check_keyUsage_, sub, _util, organizational_unit_name, file_args, This, whether, regenerated, list, nid, basic_constraints_critical, CertificateSigningRequestBuilder, SAN, Or, __name__, keys, openssl_pkcs12, parsing, pem, Ensure, FILETYPE_PEM, b, written, req, RFC, crypto, request, altnames_ext, MINIMAL_PYOPENSSL_VERSION, io, dict, PYOPENSSL_VERSION, hazmat, extKeyUsage_critical, specific, ExtendedKeyUsage, param, isdir, org, organization_name, Spredzy, altnames, txt, CRYPTOGRAPHY_MUST_STAPLE_VALUE, YAML, AnsibleModule, errors, SHA512, status_request, get_critical, extkeyUsage, constraints, crypto_utils, to_native, community, does, signature, etc, CRYPTOGRAPHY_VERSION, _check_extenededKeyUsage, aliases, specify, tools, surrogate_or_strict, ipaddress, require, could, SubjectPublicKeyInfo, emailAddress, already, options, prefix, required, load_privatekey, separated, coding, old, such, _, try, library, need, except, backend, accident, restriction, return, ImportError, fixed, BasicConstraints, base_dir, newer, x509, basicConstraints, html, A, field, cryptography_backend, resource, SubjectAlternativeName, csr, Copyrigt, m, OpenSSLObject, C, their, load_pem_private_key, OU, files, returned, public, URI, don, description, openssl_privatekey, abc, identifier, and, of, CRYPTOGRAPHY_MUST_STAPLE_NAME, as, set_pubkey, directory, desired, data, organizationalUnitName, Unknown, current_path_length, TLSFeature, new, perms_required, critical, create, common_name, next, TLS, missing, distutils, ObjectIdentifier, extName, must, localityName, reject, CRYPTOGRAPHY_IMP_ERR, MINIMAL_CRYPTOGRAPHY_VERSION, no, Encoding, force, restrictions, DOCUMENTATION, be, add_file_common_args, attach, PyOpenSSL, int, concerned, PublicFormat, DNS, clientAuth, key_a, ip_address, dummy, or, including, current_altnames_ext, purpose, subjectAltName, match, while, PEM, Force, know, exist, parse_name_field, load_file_common_arguments, supports, res, extension, General, __init__, key_usage, extendedKeyUsage_critical, basic, current_subject, Values, Please, UnrecognizedExtension, won, path, Exception, we, OPENSSL_MUST_STAPLE_VALUE, I, extend, useCommonNameForSAN, First, _name, changed, Error, alternative, action, traceback, otherName, break, wanted, X509Req, map, knowing, Name, special, subject_alt_name, metadata_version, ip, Either, It, LooseVersion, success, digest, CSRs, value, section, _check_keyUsage, generating, about, EXAMPLES, read, locality_name, requests, keyAgreement, encipherment, cryptography_name_to_oid, serialized, remove, self, i, extends_documentation_fragment, pass, Staple, supports_check_mode, Path, valid, pairs, params, load_certificate_request, Whether, type, get, _check_csr, _check_basicConstraints, requires, Yanis, CN, os, in, print_function, openssl, append, absent, privatekey_passphrase, this, overwrote, x01, ssl, backends, basicConstraints_critical, x02, both, r, v3, ANSIBLE_METADATA, Generate, version, created, dynamic, result, Determines, was, original, Ed25519, Additional, pyopenssl, returns, altname, Unsupported, cryptography_get_name, different, but, at, rb, get_components, server, which, msg, belongs, format, added, current_usages_ext, if, either, note, TRUE, PYOPENSSL_IMP_ERR, auto, can_use_cryptography, UNDEF, possible, jdoe, has_tlsfeature, regenerates, oms_ext, division, preview, IP, falls, python, compat_ipaddress, marked, yes, Ansible, fail_json, current, compat, get_extensions, seems, what, regex_replace, set_fs_attributes_if_different, pathLenConstraint, split, you, works, name, useCommonNameForSAN, all, requirements, backup_local, default_backend, than, Python, option, item, filename, short_description, is_signature_valid, Must, usages_ext, subjectAltName_critical, md5, cryptography, overwrite, else, _load_private_key, used, by, AttributeError, key_b, serialization, cryptography_parse_key_usage_params, seealso, abstractmethod, hashes, object, dns_server, _text, criticality, usr, pyca, _generate_csr, _check_subjectAltName, __future__, ietf, tries, Note, requested, on, x30, E, backup_file, current_usages, __version__, TLSFeatureType, that, corrupt, forced, converting, Certificate, dictionary, protected, absolute_import, to_bytes, sha256, considered, ext, Older, missing_required_lib, state_or_province_name, s, c, ST, client, address, L, san, sha512, from, backup, format_exc, CA, fill, add_extensions, extensible, a, Should, FIXME, public_key, existing, subject_name, strip, expected_ext, warn, rfc2986, privatekey, More, string, exit_json, rfc7633, set_version, Check, openssl_publickey, present, write_file, then, has, OPENSSL_VERSION_NUMBER, exception, licenses, key_usage_critical, extended_key_usage, gpl, back, libssl, www, generated, com, author, set, notes, select_crypto_backend, are, common, checked, openssl_dhparam, Serialize, versions, have, can_use_pyopenssl, getattr, one, Apparently, guenane, using, Names, MD5, available, attached, dump_certificate_request, these, extendedKeyUsage, To, countryName, yanis, utf, state, join, PEMs, consider, use, defines, sample, see, timestamp, add_extension, OpenSSLBadPassphraseError, compressed, SHA384, so, usages, pyOpenSSL, libraries"
-------------------------------------------------------------------------
"- Required if I(state) is C(present).
"
-------------------------------------------------------------------------
"Recom
PRs: 65435, 65460"
-------------------------------------------------------------------------
=========================================================================
"privatekey_path=dict(type='path'),
"
-------------------------------------------------------------------------
"```python
privatekey_path=dict(type='path'),
```"
-------------------------------------------------------------------------
"privatekey_path=dict(type='path'),
"
-------------------------------------------------------------------------
"Recom
PRs: 65435, 65460"
-------------------------------------------------------------------------
=========================================================================
"required_if=[('state', 'present', ['privatekey_path'])],
"
-------------------------------------------------------------------------
"required_if=[('state', 'present', ['privatekey_path'])],"
-------------------------------------------------------------------------
"required_if=[('state', 'present', ['privatekey_path'])],
"
-------------------------------------------------------------------------
"Recom
PRs: 65435, 65460"
-------------------------------------------------------------------------
=========================================================================
"from distutils.version import LooseVersion
"
-------------------------------------------------------------------------
from distutils.version import LooseVersion
-------------------------------------------------------------------------
"from distutils.version import LooseVersion
"
-------------------------------------------------------------------------
"Recom
PRs: 59165, 65379"
-------------------------------------------------------------------------
=========================================================================
"def proxmox_version(proxmox):
apireturn = proxmox.version.get()
return LooseVersion(apireturn['version'])


"
-------------------------------------------------------------------------
"```python
def proxmox_version(proxmox):
    apireturn = proxmox.version.get()
    return LooseVersion(apireturn['version'])
```  "
-------------------------------------------------------------------------
"def proxmox_version(proxmox):
apireturn = proxmox.version.get()
return LooseVersion(apireturn['version'])


"
-------------------------------------------------------------------------
"Recom
PRs: 59165, 65379"
-------------------------------------------------------------------------
=========================================================================
"if proxmox_version(proxmox) >= LooseVersion('4.2'):
"
-------------------------------------------------------------------------
"```python
if proxmox_version(proxmox) >= LooseVersion('4.2'):
```"
-------------------------------------------------------------------------
"if proxmox_version(proxmox) >= LooseVersion('4.2'):
"
-------------------------------------------------------------------------
"Recom
PRs: 59165, 65379"
-------------------------------------------------------------------------
=========================================================================
"VZ_TYPE = 'openvz' if proxmox_version(proxmox) < LooseVersion('4.0') else 'lxc'
"
-------------------------------------------------------------------------
"```python
VZ_TYPE = 'openvz' if proxmox_version(proxmox) < LooseVersion('4.0') else 'lxc'
```"
-------------------------------------------------------------------------
"VZ_TYPE = 'openvz' if proxmox_version(proxmox) < LooseVersion('4.0') else 'lxc'
"
-------------------------------------------------------------------------
"Recom
PRs: 59165, 65379"
-------------------------------------------------------------------------
=========================================================================
"from distutils.version import LooseVersion
"
-------------------------------------------------------------------------
"```python
from distutils.version import LooseVersion
```"
-------------------------------------------------------------------------
"from distutils.version import LooseVersion
"
-------------------------------------------------------------------------
"Recom
PRs: 59165, 65379"
-------------------------------------------------------------------------
=========================================================================
"def proxmox_version(proxmox):
apireturn = proxmox.version.get()
return LooseVersion(apireturn['version'])


"
-------------------------------------------------------------------------
"def proxmox_version(proxmox):
    apireturn = proxmox.version.get()
    return LooseVersion(apireturn['version'])"
-------------------------------------------------------------------------
"def proxmox_version(proxmox):
apireturn = proxmox.version.get()
return LooseVersion(apireturn['version'])


"
-------------------------------------------------------------------------
"Recom
PRs: 59165, 65379"
-------------------------------------------------------------------------
=========================================================================
"PVE_MAJOR_VERSION = 3 if proxmox_version(proxmox) < LooseVersion('4.0') else 4
"
-------------------------------------------------------------------------
"```python
PVE_MAJOR_VERSION = 3 if proxmox_version(proxmox) < LooseVersion('4.0') else 4
```"
-------------------------------------------------------------------------
"PVE_MAJOR_VERSION = 3 if proxmox_version(proxmox) < LooseVersion('4.0') else 4
"
-------------------------------------------------------------------------
"Recom
PRs: 59165, 65379"
-------------------------------------------------------------------------
=========================================================================
"short_description: Add or remove replication slots from a PostgreSQL database
- Add or remove physical or logical replication slots from a PostgreSQL database.
- Name of the replication slot to add or remove.
"
-------------------------------------------------------------------------
"```python
ANSIBLE_METADATA = {'metadata_version': '1.1',
 DOCUMENTATION = '''
 ---
 module: postgresql_slot
 short_description: Add or remove replication slots from a PostgreSQL database
 description:
 version_added: '2.8'
 
 options:
   name:
     description: Name of the replication slot to add or remove.
     type: str
     required: yes
     aliases:
```"
-------------------------------------------------------------------------
"short_description: Add or remove replication slots from a PostgreSQL database
- Add or remove physical or logical replication slots from a PostgreSQL database.
- Name of the replication slot to add or remove.
"
-------------------------------------------------------------------------
"Recom
PRs: 65278, 65358"
-------------------------------------------------------------------------
=========================================================================
"- Optional parameter that when C(yes) specifies that the LSN for this replication slot be reserved
"
-------------------------------------------------------------------------
"```python
options:
     choices: [ absent, present ]
   immediately_reserve:
     description:
       Optional parameter that when C(yes) specifies that the LSN for this replication slot be reserved
     - Is available from PostgreSQL version 9.6.
```"
-------------------------------------------------------------------------
"- Optional parameter that when C(yes) specifies that the LSN for this replication slot be reserved
"
-------------------------------------------------------------------------
"Recom
PRs: 65278, 65358"
-------------------------------------------------------------------------
=========================================================================
"db: ""acme""
"
-------------------------------------------------------------------------
"```python
postgresql_slot:
  name: Remove logical_one slot if exists from the cluster running on another host and non-standard port
  db: ""acme""
  slot_type: logical
  state: present
  output_plugin: custom_decoder_one
```"
-------------------------------------------------------------------------
"db: ""acme""
"
-------------------------------------------------------------------------
"Recom
PRs: 65278, 65358"
-------------------------------------------------------------------------
=========================================================================
"query = (""SELECT 1 FROM pg_tables ""
         ""WHERE tablename = %(obj_name)s ""
         ""AND tableowner = %(role)s"")
         ""WHERE d.datname = %(obj_name)s ""
         ""AND r.rolname = %(role)s"")
         ""WHERE f.proname = %(obj_name)s ""
         ""AND r.rolname = %(role)s"")
         ""WHERE c.relkind = 'S' AND c.relname = %(obj_name)s ""
         ""AND r.rolname = %(role)s"")
         ""WHERE schema_name = %(obj_name)s ""
         ""AND schema_owner = %(role)s"")
         ""WHERE t.spcname = %(obj_name)s ""
         ""AND r.rolname = %(role)s"")
         ""WHERE viewname = %(obj_name)s ""
         ""AND viewowner = %(role)s"")
         ""WHERE matviewname = %(obj_name)s ""
         ""AND matviewowner = %(role)s"")
y_params = {'obj_name': self.obj_name, 'role': self.role}
rn exec_sql(self, query, query_params, add_to_executed=False)
"
-------------------------------------------------------------------------
"query_params = {'obj_name': self.obj_name, 'role': self.role}
return exec_sql(self, query, query_params, add_to_executed=False)"
-------------------------------------------------------------------------
"query = (""SELECT 1 FROM pg_tables ""
         ""WHERE tablename = %(obj_name)s ""
         ""AND tableowner = %(role)s"")
         ""WHERE d.datname = %(obj_name)s ""
         ""AND r.rolname = %(role)s"")
         ""WHERE f.proname = %(obj_name)s ""
         ""AND r.rolname = %(role)s"")
         ""WHERE c.relkind = 'S' AND c.relname = %(obj_name)s ""
         ""AND r.rolname = %(role)s"")
         ""WHERE schema_name = %(obj_name)s ""
         ""AND schema_owner = %(role)s"")
         ""WHERE t.spcname = %(obj_name)s ""
         ""AND r.rolname = %(role)s"")
         ""WHERE viewname = %(obj_name)s ""
         ""AND viewowner = %(role)s"")
         ""WHERE matviewname = %(obj_name)s ""
         ""AND matviewowner = %(role)s"")
y_params = {'obj_name': self.obj_name, 'role': self.role}
rn exec_sql(self, query, query_params, add_to_executed=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 65310, 65322"
-------------------------------------------------------------------------
=========================================================================
"query_params = {'role': role}
query = ""SELECT 1 FROM pg_roles WHERE rolname = %(role)s""
return exec_sql(self, query, query_params, add_to_executed=False)
"
-------------------------------------------------------------------------
"```python
query_params = {'role': role}
query = ""SELECT 1 FROM pg_roles WHERE rolname = %(role)s""
return exec_sql(query, query_params)
```"
-------------------------------------------------------------------------
"query_params = {'role': role}
query = ""SELECT 1 FROM pg_roles WHERE rolname = %(role)s""
return exec_sql(self, query, query_params, add_to_executed=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 65310, 65322"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.k8s.common import KubernetesAnsibleModule
from ansible.module_utils.six import string_types
import yaml
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.k8s.common import KubernetesAnsibleModule
```"
-------------------------------------------------------------------------
"from ansible.module_utils.k8s.common import KubernetesAnsibleModule
from ansible.module_utils.six import string_types
import yaml
"
-------------------------------------------------------------------------
"Recom
PRs: 59887, 65271"
-------------------------------------------------------------------------
=========================================================================
"'wait_timeout': {'type': 'int', 'default': 20},
s KubernetesAnsibleScaleModule(KubernetesAnsibleModule):

def __init__(self, k8s_kind=None, *args, **kwargs):
    self.client = None
    self.warnings = []

    mutually_exclusive = [
        ('resource_definition', 'src'),
    ]

    KubernetesAnsibleModule.__init__(self, *args,
                                     mutually_exclusive=mutually_exclusive,
                                     supports_check_mode=True,
                                     **kwargs)
    self.kind = k8s_kind or self.params.get('kind')
    self.api_version = self.params.get('api_version')
    self.name = self.params.get('name')
    self.namespace = self.params.get('namespace')
    resource_definition = self.params.get('resource_definition')

    if resource_definition:
        if isinstance(resource_definition, string_types):
            try:
                self.resource_definitions = yaml.safe_load_all(resource_definition)
            except (IOError, yaml.YAMLError) as exc:
                self.fail(msg=""Error loading resource_definition: {0}"".format(exc))
        elif isinstance(resource_definition, list):
            self.resource_definitions = resource_definition
        else:
            self.resource_definitions = [resource_definition]
    src = self.params.get('src')
    if src:
        self.resource_definitions = self.load_resource_definitions(src)

    if not resource_definition and not src:
        implicit_definition = dict(
            kind=self.kind,
            apiVersion=self.api_version,
            metadata=dict(name=self.name)
        )
        if self.namespace:
            implicit_definition['metadata']['namespace'] = self.namespace
        self.resource_definitions = [implicit_definition]
"
-------------------------------------------------------------------------
"```python
SCALE_ARG_SPEC = {
     'current_replicas': {'type': 'int'},
     'resource_version': {},
     'wait': {'type': 'bool', 'default': True},
     'wait_timeout': {'type': 'int', 'default': 20},
 }
 
 
class KubernetesAnsibleScaleModule(KubernetesAnsibleModule):

    def __init__(self, k8s_kind=None, *args, **kwargs):
        self.client = None
        self.warnings = []

        mutually_exclusive = [
            ('resource_definition', 'src'),
        ]

        KubernetesAnsibleModule.__init__(self, *args,
                                         mutually_exclusive=mutually_exclusive,
                                         supports_check_mode=True,
                                         **kwargs)
        self.kind = k8s_kind or self.params.get('kind')
        self.api_version = self.params.get('api_version')
        self.name = self.params.get('name')
        self.namespace = self.params.get('namespace')
        resource_definition = self.params.get('resource_definition')

        if resource_definition:
            if isinstance(resource_definition, string_types):
                try:
                    self.resource_definitions = yaml.safe_load_all(resource_definition)
                except (IOError, yaml.YAMLError) as exc:
                    self.fail(msg=""Error loading resource_definition: {0}"".format(exc))
            elif isinstance(resource_definition, list):
                self.resource_definitions = resource_definition
            else:
                self.resource_definitions = [resource_definition]
        src = self.params.get('src')
              
        if src:
            self.resource_definitions = self.load_resource_definitions(src)

        if not resource_definition and not src:
            implicit_definition = dict(
                kind=self.kind,
                apiVersion=self.api_version,
                metadata=dict(name=self.name)
            )
            if self.namespace:
                implicit_definition['metadata']['namespace'] = self.namespace
            self.resource_definitions = [implicit_definition]
```"
-------------------------------------------------------------------------
"'wait_timeout': {'type': 'int', 'default': 20},
s KubernetesAnsibleScaleModule(KubernetesAnsibleModule):

def __init__(self, k8s_kind=None, *args, **kwargs):
    self.client = None
    self.warnings = []

    mutually_exclusive = [
        ('resource_definition', 'src'),
    ]

    KubernetesAnsibleModule.__init__(self, *args,
                                     mutually_exclusive=mutually_exclusive,
                                     supports_check_mode=True,
                                     **kwargs)
    self.kind = k8s_kind or self.params.get('kind')
    self.api_version = self.params.get('api_version')
    self.name = self.params.get('name')
    self.namespace = self.params.get('namespace')
    resource_definition = self.params.get('resource_definition')

    if resource_definition:
        if isinstance(resource_definition, string_types):
            try:
                self.resource_definitions = yaml.safe_load_all(resource_definition)
            except (IOError, yaml.YAMLError) as exc:
                self.fail(msg=""Error loading resource_definition: {0}"".format(exc))
        elif isinstance(resource_definition, list):
            self.resource_definitions = resource_definition
        else:
            self.resource_definitions = [resource_definition]
    src = self.params.get('src')
    if src:
        self.resource_definitions = self.load_resource_definitions(src)

    if not resource_definition and not src:
        implicit_definition = dict(
            kind=self.kind,
            apiVersion=self.api_version,
            metadata=dict(name=self.name)
        )
        if self.namespace:
            implicit_definition['metadata']['namespace'] = self.namespace
        self.resource_definitions = [implicit_definition]
"
-------------------------------------------------------------------------
"Recom
PRs: 59887, 65271"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.k8s.common import KubernetesAnsibleModule
from ansible.module_utils.six import string_types
import yaml
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.k8s.common import KubernetesAnsibleModule
from ansible.module_utils.six import string_types
import yaml
```"
-------------------------------------------------------------------------
"from ansible.module_utils.k8s.common import KubernetesAnsibleModule
from ansible.module_utils.six import string_types
import yaml
"
-------------------------------------------------------------------------
"Recom
PRs: 59887, 65270"
-------------------------------------------------------------------------
=========================================================================
"'wait_timeout': {'type': 'int', 'default': 20},
s KubernetesAnsibleScaleModule(KubernetesAnsibleModule):

def __init__(self, k8s_kind=None, *args, **kwargs):
    self.client = None
    self.warnings = []

    mutually_exclusive = [
        ('resource_definition', 'src'),
    ]

    KubernetesAnsibleModule.__init__(self, *args,
                                     mutually_exclusive=mutually_exclusive,
                                     supports_check_mode=True,
                                     **kwargs)
    self.kind = k8s_kind or self.params.get('kind')
    self.api_version = self.params.get('api_version')
    self.name = self.params.get('name')
    self.namespace = self.params.get('namespace')
    resource_definition = self.params.get('resource_definition')

    if resource_definition:
        if isinstance(resource_definition, string_types):
            try:
                self.resource_definitions = yaml.safe_load_all(resource_definition)
            except (IOError, yaml.YAMLError) as exc:
                self.fail(msg=""Error loading resource_definition: {0}"".format(exc))
        elif isinstance(resource_definition, list):
            self.resource_definitions = resource_definition
        else:
            self.resource_definitions = [resource_definition]
    src = self.params.get('src')
    if src:
        self.resource_definitions = self.load_resource_definitions(src)

    if not resource_definition and not src:
        implicit_definition = dict(
            kind=self.kind,
            apiVersion=self.api_version,
            metadata=dict(name=self.name)
        )
        if self.namespace:
            implicit_definition['metadata']['namespace'] = self.namespace
        self.resource_definitions = [implicit_definition]
"
-------------------------------------------------------------------------
"```python
'wait_timeout': {'type': 'int', 'default': 20},
'SCALE_ARG_SPEC = {
    'current_replicas': {'type': 'int'},
    'resource_version': {},
    'wait': {'type': 'bool', 'default': True},
    'wait_timeout': {'type': 'int', 'default': 20},
}
 
class KubernetesAnsibleScaleModule(KubernetesAnsibleModule):

    def __init__(self, k8s_kind=None, *args, **kwargs):
        self.client = None
        self.warnings = []

        mutually_exclusive = [
            ('resource_definition', 'src'),
        ]

        KubernetesAnsibleModule.__init__(self, *args,
                                         mutually_exclusive=mutually_exclusive,
                                         supports_check_mode=True,
                                         **kwargs)
        self.kind = k8s_kind or self.params.get('kind')
        self.api_version = self.params.get('api_version')
        self.name = self.params.get('name')
        self.namespace = self.params.get('namespace')
        resource_definition = self.params.get('resource_definition')

        if resource_definition:
            if isinstance(resource_definition, string_types):
                try:
                    self.resource_definitions = yaml.safe_load_all(resource_definition)
                except (IOError, yaml.YAMLError) as exc:
                    self.fail(msg=""Error loading resource_definition: {0}"".format(exc))
            elif isinstance(resource_definition, list):
                self.resource_definitions = resource_definition
            else:
                self.resource_definitions = [resource_definition]
        src = self.params.get('src')
        if src:
            self.resource_definitions = self.load_resource_definitions(src)

        if not resource_definition and not src:
            implicit_definition = dict(
                kind=self.kind,
                apiVersion=self.api_version,
                metadata=dict(name=self.name)
            )
            if self.namespace:
                implicit_definition['metadata']['namespace'] = self.namespace
            self.resource_definitions = [implicit_definition]
```"
-------------------------------------------------------------------------
"'wait_timeout': {'type': 'int', 'default': 20},
s KubernetesAnsibleScaleModule(KubernetesAnsibleModule):

def __init__(self, k8s_kind=None, *args, **kwargs):
    self.client = None
    self.warnings = []

    mutually_exclusive = [
        ('resource_definition', 'src'),
    ]

    KubernetesAnsibleModule.__init__(self, *args,
                                     mutually_exclusive=mutually_exclusive,
                                     supports_check_mode=True,
                                     **kwargs)
    self.kind = k8s_kind or self.params.get('kind')
    self.api_version = self.params.get('api_version')
    self.name = self.params.get('name')
    self.namespace = self.params.get('namespace')
    resource_definition = self.params.get('resource_definition')

    if resource_definition:
        if isinstance(resource_definition, string_types):
            try:
                self.resource_definitions = yaml.safe_load_all(resource_definition)
            except (IOError, yaml.YAMLError) as exc:
                self.fail(msg=""Error loading resource_definition: {0}"".format(exc))
        elif isinstance(resource_definition, list):
            self.resource_definitions = resource_definition
        else:
            self.resource_definitions = [resource_definition]
    src = self.params.get('src')
    if src:
        self.resource_definitions = self.load_resource_definitions(src)

    if not resource_definition and not src:
        implicit_definition = dict(
            kind=self.kind,
            apiVersion=self.api_version,
            metadata=dict(name=self.name)
        )
        if self.namespace:
            implicit_definition['metadata']['namespace'] = self.namespace
        self.resource_definitions = [implicit_definition]
"
-------------------------------------------------------------------------
"Recom
PRs: 59887, 65270"
-------------------------------------------------------------------------
=========================================================================
"network_info_ipam = network_info.get('IPAMConfig') or {}
"
-------------------------------------------------------------------------
"```python
network_info_ipam = network_info.get('IPAMConfig') or {}
```"
-------------------------------------------------------------------------
"network_info_ipam = network_info.get('IPAMConfig') or {}
"
-------------------------------------------------------------------------
"Recom
PRs: 65018, 65235"
-------------------------------------------------------------------------
=========================================================================
"if not self.existing_network:
    return False
"
-------------------------------------------------------------------------
"```python
if not self.existing_network:
    return False
```"
-------------------------------------------------------------------------
"if not self.existing_network:
    return False
"
-------------------------------------------------------------------------
"Recom
PRs: 65018, 65235"
-------------------------------------------------------------------------
=========================================================================
"network_info_ipam = network_info.get('IPAMConfig') or {}
"
-------------------------------------------------------------------------
"```python
import distutils.version
import docker.errors
import docker.types
import ansible.module_utils.docker.common
import docker
import re
import traceback
from future import absolute_import

network_info_ipam = network_info.get('IPAMConfig') or {}
```"
-------------------------------------------------------------------------
"network_info_ipam = network_info.get('IPAMConfig') or {}
"
-------------------------------------------------------------------------
"Recom
PRs: 65018, 65234"
-------------------------------------------------------------------------
=========================================================================
"if not self.existing_network:
    return False
"
-------------------------------------------------------------------------
"```python
if not self.existing_network:
    return False
```"
-------------------------------------------------------------------------
"if not self.existing_network:
    return False
"
-------------------------------------------------------------------------
"Recom
PRs: 65018, 65234"
-------------------------------------------------------------------------
=========================================================================
"filter_xml = '''<filter type=""subtree"">
                  <system xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
                    <systemInfo>
                      <sysName></sysName>
                      <sysContact></sysContact>
                      <productVer></productVer>
                      <platformVer></platformVer>
                      <productName></productName>
                    </systemInfo>
                  </system>
                </filter>'''
data = self.get(filter_xml)
data = re.sub(r'xmlns="".?""', r'', data)
reply = fromstring(to_bytes(data, errors='surrogate_or_strict'))
sw_info = reply.find('.//systemInfo')

device_info['network_os_version'] = self.get_text(sw_info, 'productVer')
device_info['network_os_hostname'] = self.get_text(sw_info, 'sysName')
device_info['network_os_platform_version'] = self.get_text(sw_info, 'platformVer')
device_info['network_os_platform'] = self.get_text(sw_info, 'productName')
"
-------------------------------------------------------------------------
"```python
import re
from ncclient.xml_ import to_bytes
from lxml.etree import fromstring

filter_xml = '''<filter type=""subtree"">
                  <system xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
                    <systemInfo>
                      <sysName></sysName>
                      <sysContact></sysContact>
                      <productVer></productVer>
                      <platformVer></platformVer>
                      <productName></productName>
                    </systemInfo>
                  </system>
                </filter>'''

data = self.get(filter_xml)
data = re.sub(r'xmlns="".?""', r'', data)
reply = fromstring(to_bytes(data, errors='surrogate_or_strict'))
sw_info = reply.find('.//systemInfo')

device_info['network_os_version'] = self.get_text(sw_info, 'productVer')
device_info['network_os_hostname'] = self.get_text(sw_info, 'sysName')
device_info['network_os_platform_version'] = self.get_text(sw_info, 'platformVer')
device_info['network_os_platform'] = self.get_text(sw_info, 'productName')
```"
-------------------------------------------------------------------------
"filter_xml = '''<filter type=""subtree"">
                  <system xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
                    <systemInfo>
                      <sysName></sysName>
                      <sysContact></sysContact>
                      <productVer></productVer>
                      <platformVer></platformVer>
                      <productName></productName>
                    </systemInfo>
                  </system>
                </filter>'''
data = self.get(filter_xml)
data = re.sub(r'xmlns="".?""', r'', data)
reply = fromstring(to_bytes(data, errors='surrogate_or_strict'))
sw_info = reply.find('.//systemInfo')

device_info['network_os_version'] = self.get_text(sw_info, 'productVer')
device_info['network_os_hostname'] = self.get_text(sw_info, 'sysName')
device_info['network_os_platform_version'] = self.get_text(sw_info, 'platformVer')
device_info['network_os_platform'] = self.get_text(sw_info, 'productName')
"
-------------------------------------------------------------------------
"Recom
PRs: 65065, 65232"
-------------------------------------------------------------------------
=========================================================================
"filter_xml = '''<filter type=""subtree"">
                  <system xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
                    <systemInfo>
                      <sysName></sysName>
                      <sysContact></sysContact>
                      <productVer></productVer>
                      <platformVer></platformVer>
                      <productName></productName>
                    </systemInfo>
                  </system>
                </filter>'''
data = self.get(filter_xml)
data = re.sub(r'xmlns="".?""', r'', data)
reply = fromstring(to_bytes(data, errors='surrogate_or_strict'))
sw_info = reply.find('.//systemInfo')

device_info['network_os_version'] = self.get_text(sw_info, 'productVer')
device_info['network_os_hostname'] = self.get_text(sw_info, 'sysName')
device_info['network_os_platform_version'] = self.get_text(sw_info, 'platformVer')
device_info['network_os_platform'] = self.get_text(sw_info, 'productName')
"
-------------------------------------------------------------------------
"```python
from ncclient import manager
from ncclient.operations import RPCError
from ncclient.xml_ import to_ele, to_xml, fromstring
import re
from ansible.module_utils._text import to_bytes
from ansible.errors import AnsibleConnectionFailure
import json
import xml.etree.ElementTree as ET
from lxml import etree

class Netconf(NetconfBase):
    def get_device_info(self):
        filter_xml = '''<filter type=""subtree"">
                          <system xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
                            <systemInfo>
                              <sysName></sysName>
                              <sysContact></sysContact>
                              <productVer></productVer>
                              <platformVer></platformVer>
                              <productName></productName>
                            </systemInfo>
                          </system>
                        </filter>'''
        data = self.get(filter_xml)
        data = re.sub(r'xmlns="".?""', r'', data)
        reply = fromstring(to_bytes(data, errors='surrogate_or_strict'))
        sw_info = reply.find('.//systemInfo')

        device_info = dict()
        device_info['network_os_version'] = self.get_text(sw_info, 'productVer')
        device_info['network_os_hostname'] = self.get_text(sw_info, 'sysName')
        device_info['network_os_platform_version'] = self.get_text(sw_info, 'platformVer')
        device_info['network_os_platform'] = self.get_text(sw_info, 'productName')
        
        return device_info
```"
-------------------------------------------------------------------------
"filter_xml = '''<filter type=""subtree"">
                  <system xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
                    <systemInfo>
                      <sysName></sysName>
                      <sysContact></sysContact>
                      <productVer></productVer>
                      <platformVer></platformVer>
                      <productName></productName>
                    </systemInfo>
                  </system>
                </filter>'''
data = self.get(filter_xml)
data = re.sub(r'xmlns="".?""', r'', data)
reply = fromstring(to_bytes(data, errors='surrogate_or_strict'))
sw_info = reply.find('.//systemInfo')

device_info['network_os_version'] = self.get_text(sw_info, 'productVer')
device_info['network_os_hostname'] = self.get_text(sw_info, 'sysName')
device_info['network_os_platform_version'] = self.get_text(sw_info, 'platformVer')
device_info['network_os_platform'] = self.get_text(sw_info, 'productName')
"
-------------------------------------------------------------------------
"Recom
PRs: 65065, 65231"
-------------------------------------------------------------------------
=========================================================================
"def has_list_changed(new_list, old_list, sort_lists=True, sort_key=None):
Check two lists have differences. Sort lists by default.

def sort_list(unsorted_list):
    """"""
    Sort a given list.
    The list may contain dictionaries, so use the sort key to handle them.
    """"""

    if unsorted_list and isinstance(unsorted_list[0], dict):
        if not sort_key:
            raise Exception(
                'A sort key was not specified when sorting list'
            )
        else:
            return sorted(unsorted_list, key=lambda k: k[sort_key])

    # Either the list is empty or does not contain dictionaries
    try:
        return sorted(unsorted_list)
    except TypeError:
        return unsorted_list


if sort_lists:
    zip_data = zip(sort_list(new_list), sort_list(old_list))
else:
    zip_data = zip(new_list, old_list)
for new_item, old_item in zip_data:
        if isinstance(new_item, string_types) and isinstance(old_item, string_types):
            # Even though the types are different between these items,
            # they are both strings. Try matching on the same string type.
            try:
                new_item_type = type(new_item)
                old_item_casted = new_item_type(old_item)
                if new_item != old_item_casted:
                    return True
                else:
                    continue
            except UnicodeEncodeError:
                # Fallback to assuming the strings are different
                return True
        else:
            return True
"
-------------------------------------------------------------------------
"```python
def has_list_changed(new_list, old_list, sort_lists=True, sort_key=None):
    """"""
    Check two lists have differences. Sort lists by default.
    """"""

    def sort_list(unsorted_list):
        """"""
        Sort a given list.
        The list may contain dictionaries, so use the sort key to handle them.
        """"""

        if unsorted_list and isinstance(unsorted_list[0], dict):
            if not sort_key:
                raise Exception(
                    'A sort key was not specified when sorting list'
                )
            else:
                return sorted(unsorted_list, key=lambda k: k[sort_key])

        # Either the list is empty or does not contain dictionaries
        try:
            return sorted(unsorted_list)
        except TypeError:
            return unsorted_list

    if sort_lists:
        zip_data = zip(sort_list(new_list), sort_list(old_list))
    else:
        zip_data = zip(new_list, old_list)
    
    for new_item, old_item in zip_data:
        if isinstance(new_item, str) and isinstance(old_item, str):
            # Even though the types are different between these items,
            # they are both strings. Try matching on the same string type.
            try:
                new_item_type = type(new_item)
                old_item_casted = new_item_type(old_item)
                if new_item != old_item_casted:
                    return True
                else:
                    continue
            except UnicodeEncodeError:
                # Fallback to assuming the strings are different
                return True
        else:
            return True
    return False
```"
-------------------------------------------------------------------------
"def has_list_changed(new_list, old_list, sort_lists=True, sort_key=None):
Check two lists have differences. Sort lists by default.

def sort_list(unsorted_list):
    """"""
    Sort a given list.
    The list may contain dictionaries, so use the sort key to handle them.
    """"""

    if unsorted_list and isinstance(unsorted_list[0], dict):
        if not sort_key:
            raise Exception(
                'A sort key was not specified when sorting list'
            )
        else:
            return sorted(unsorted_list, key=lambda k: k[sort_key])

    # Either the list is empty or does not contain dictionaries
    try:
        return sorted(unsorted_list)
    except TypeError:
        return unsorted_list


if sort_lists:
    zip_data = zip(sort_list(new_list), sort_list(old_list))
else:
    zip_data = zip(new_list, old_list)
for new_item, old_item in zip_data:
        if isinstance(new_item, string_types) and isinstance(old_item, string_types):
            # Even though the types are different between these items,
            # they are both strings. Try matching on the same string type.
            try:
                new_item_type = type(new_item)
                old_item_casted = new_item_type(old_item)
                if new_item != old_item_casted:
                    return True
                else:
                    continue
            except UnicodeEncodeError:
                # Fallback to assuming the strings are different
                return True
        else:
            return True
"
-------------------------------------------------------------------------
"Recom
PRs: 63887, 65221"
-------------------------------------------------------------------------
=========================================================================
"def have_networks_changed(new_networks, old_networks):
""""""Special case list checking for networks to sort aliases""""""

if new_networks is None:
    return False
old_networks = old_networks or []
if len(new_networks) != len(old_networks):
    return True

zip_data = zip(
    sorted(new_networks, key=lambda k: k['id']),
    sorted(old_networks, key=lambda k: k['id'])
)

for new_item, old_item in zip_data:
    new_item = dict(new_item)
    old_item = dict(old_item)
    # Sort the aliases
    if 'aliases' in new_item:
        new_item['aliases'] = sorted(new_item['aliases'] or [])
    if 'aliases' in old_item:
        old_item['aliases'] = sorted(old_item['aliases'] or [])

    if has_dict_changed(new_item, old_item):
        return True

return False


"
-------------------------------------------------------------------------
"```python
def have_networks_changed(new_networks, old_networks):
     """"""Special case list checking for networks to sort aliases""""""

     if new_networks is None:
         return False
     old_networks = old_networks or []
     if len(new_networks) != len(old_networks):
         return True

     zip_data = zip(
         sorted(new_networks, key=lambda k: k['id']),
         sorted(old_networks, key=lambda k: k['id'])
     )

     for new_item, old_item in zip_data:
         new_item = dict(new_item)
         old_item = dict(old_item)
         # Sort the aliases
         if 'aliases' in new_item:
             new_item['aliases'] = sorted(new_item['aliases'] or [])
         if 'aliases' in old_item:
             old_item['aliases'] = sorted(old_item['aliases'] or [])

         if has_dict_changed(new_item, old_item):
             return True

     return False
```"
-------------------------------------------------------------------------
"def have_networks_changed(new_networks, old_networks):
""""""Special case list checking for networks to sort aliases""""""

if new_networks is None:
    return False
old_networks = old_networks or []
if len(new_networks) != len(old_networks):
    return True

zip_data = zip(
    sorted(new_networks, key=lambda k: k['id']),
    sorted(old_networks, key=lambda k: k['id'])
)

for new_item, old_item in zip_data:
    new_item = dict(new_item)
    old_item = dict(old_item)
    # Sort the aliases
    if 'aliases' in new_item:
        new_item['aliases'] = sorted(new_item['aliases'] or [])
    if 'aliases' in old_item:
        old_item['aliases'] = sorted(old_item['aliases'] or [])

    if has_dict_changed(new_item, old_item):
        return True

return False


"
-------------------------------------------------------------------------
"Recom
PRs: 63887, 65221"
-------------------------------------------------------------------------
=========================================================================
"if has_list_changed(self.env, os.env):
"
-------------------------------------------------------------------------
"```python
if has_list_changed(self.env, os.env):
```"
-------------------------------------------------------------------------
"if has_list_changed(self.env, os.env):
"
-------------------------------------------------------------------------
"Recom
PRs: 63887, 65221"
-------------------------------------------------------------------------
=========================================================================
"if has_list_changed(self.mounts, os.mounts, sort_key='target'):
if has_list_changed(self.configs, os.configs, sort_key='config_name'):
if has_list_changed(self.secrets, os.secrets, sort_key='secret_name'):
if have_networks_changed(self.networks, os.networks):
if has_list_changed(self.command, os.command, sort_lists=False):
if has_list_changed(self.args, os.args, sort_lists=False):
if has_list_changed(self.constraints, os.constraints):
if has_list_changed(self.placement_preferences, os.placement_preferences, sort_lists=False):
if has_list_changed(self.groups, os.groups):
"
-------------------------------------------------------------------------
"```python
if has_list_changed(self.mounts, os.mounts, sort_key='target'):
    differences.add('mounts', parameter=self.mounts, active=os.mounts)

if has_list_changed(self.configs, os.configs, sort_key='config_name'):
    differences.add('configs', parameter=self.configs, active=os.configs)

if has_list_changed(self.secrets, os.secrets, sort_key='secret_name'):
    differences.add('secrets', parameter=self.secrets, active=os.secrets)

if have_networks_changed(self.networks, os.networks):
    differences.add('networks', parameter=self.networks, active=os.networks)

if has_list_changed(self.command, os.command, sort_lists=False):
    differences.add('command', parameter=self.command, active=os.command)

if has_list_changed(self.args, os.args, sort_lists=False):
    differences.add('args', parameter=self.args, active=os.args)

if has_list_changed(self.constraints, os.constraints):
    differences.add('constraints', parameter=self.constraints, active=os.constraints)

if has_list_changed(self.placement_preferences, os.placement_preferences, sort_lists=False):
    differences.add('placement_preferences', parameter=self.placement_preferences, active=os.placement_preferences)

if has_list_changed(self.groups, os.groups):
    differences.add('groups', parameter=self.groups, active=os.groups)
```"
-------------------------------------------------------------------------
"if has_list_changed(self.mounts, os.mounts, sort_key='target'):
if has_list_changed(self.configs, os.configs, sort_key='config_name'):
if has_list_changed(self.secrets, os.secrets, sort_key='secret_name'):
if have_networks_changed(self.networks, os.networks):
if has_list_changed(self.command, os.command, sort_lists=False):
if has_list_changed(self.args, os.args, sort_lists=False):
if has_list_changed(self.constraints, os.constraints):
if has_list_changed(self.placement_preferences, os.placement_preferences, sort_lists=False):
if has_list_changed(self.groups, os.groups):
"
-------------------------------------------------------------------------
"Recom
PRs: 63887, 65221"
-------------------------------------------------------------------------
=========================================================================
"if has_list_changed(self.dns, os.dns, sort_lists=False):
if has_list_changed(self.dns_search, os.dns_search, sort_lists=False):
if has_list_changed(self.dns_options, os.dns_options):
"
-------------------------------------------------------------------------
"if has_list_changed(self.dns, os.dns, sort_lists=False):
if has_list_changed(self.dns_search, os.dns_search, sort_lists=False):
if has_list_changed(self.dns_options, os.dns_options, sort_lists=False):"
-------------------------------------------------------------------------
"if has_list_changed(self.dns, os.dns, sort_lists=False):
if has_list_changed(self.dns_search, os.dns_search, sort_lists=False):
if has_list_changed(self.dns_options, os.dns_options):
"
-------------------------------------------------------------------------
"Recom
PRs: 63887, 65221"
-------------------------------------------------------------------------
=========================================================================
"
# List comparisons without dictionaries
# I could improve the indenting, but pycodestyle wants this instead
assert not docker_swarm_service.has_list_changed(None, None)
assert not docker_swarm_service.has_list_changed(None, [])
assert not docker_swarm_service.has_list_changed(None, [1, 2])

assert not docker_swarm_service.has_list_changed([], None)
assert not docker_swarm_service.has_list_changed([], [])
assert docker_swarm_service.has_list_changed([], [1, 2])

assert docker_swarm_service.has_list_changed([1, 2], None)
assert docker_swarm_service.has_list_changed([1, 2], [])

assert docker_swarm_service.has_list_changed([1, 2, 3], [1, 2])
assert docker_swarm_service.has_list_changed([1, 2], [1, 2, 3])

# Check list sorting
assert not docker_swarm_service.has_list_changed([1, 2], [2, 1])
    [1, 2],
    [2, 1],
    sort_lists=False

# Check type matching
assert docker_swarm_service.has_list_changed([None, 1], [2, 1])
assert docker_swarm_service.has_list_changed([2, 1], [None, 1])
    ""command --with args"",
    ['command', '--with', 'args']
    ['sleep', '3400'],
    [u'sleep', u'3600'],
    sort_lists=False

# List comparisons with dictionaries
    [{'a': 1}],
    [{'a': 1}],
    sort_key='a'

    [{'a': 1}, {'a': 2}],
    [{'a': 1}, {'a': 2}],
    sort_key='a'

with pytest.raises(Exception):
    docker_swarm_service.has_list_changed(
        [{'a': 1}, {'a': 2}],
        [{'a': 1}, {'a': 2}]
    )

# List sort checking with sort key
    [{'a': 1}, {'a': 2}],
    [{'a': 2}, {'a': 1}],
    sort_key='a'
)
assert docker_swarm_service.has_list_changed(
    [{'a': 1}, {'a': 2}],
    [{'a': 2}, {'a': 1}],
    sort_lists=False
)

assert docker_swarm_service.has_list_changed(
    [{'a': 1}, {'a': 2}, {'a': 3}],
    [{'a': 2}, {'a': 1}],
    sort_key='a'
)
assert docker_swarm_service.has_list_changed(
    [{'a': 1}, {'a': 2}],
    [{'a': 1}, {'a': 2}, {'a': 3}],
    sort_lists=False

# Additional dictionary elements
"
-------------------------------------------------------------------------
"```python
def test_has_list_changed(docker_swarm_service):
    assert not docker_swarm_service.has_list_changed(None, None)
    assert not docker_swarm_service.has_list_changed(None, [])
    assert not docker_swarm_service.has_list_changed(None, [1, 2])

    assert not docker_swarm_service.has_list_changed([], None)
    assert not docker_swarm_service.has_list_changed([], [])
    assert docker_swarm_service.has_list_changed([], [1, 2])

    assert docker_swarm_service.has_list_changed([1, 2], None)
    assert docker_swarm_service.has_list_changed([1, 2], [])

    assert docker_swarm_service.has_list_changed([1, 2, 3], [1, 2])
    assert docker_swarm_service.has_list_changed([1, 2], [1, 2, 3])

    # Check list sorting
    assert not docker_swarm_service.has_list_changed([1, 2], [2, 1], sort_lists=False)

    # Check type matching
    assert docker_swarm_service.has_list_changed([None, 1], [2, 1])
    assert docker_swarm_service.has_list_changed([2, 1], [None, 1], sort_lists=False)

    # List comparisons with dictionaries
    assert docker_swarm_service.has_list_changed(
        [{'a': 1}],
        [{'a': 1}],
        sort_key='a'
    )

    assert docker_swarm_service.has_list_changed(
        [{'a': 1}, {'a': 2}],
        [{'a': 1}, {'a': 2}],
        sort_key='a'
    )

    with pytest.raises(Exception):
        docker_swarm_service.has_list_changed(
            [{'a': 1}, {'a': 2}],
            [{'a': 1}, {'a': 2}]
        )

    # List sort checking with sort key
    assert docker_swarm_service.has_list_changed(
        [{'a': 1}, {'a': 2}],
        [{'a': 2}, {'a': 1}],
        sort_key='a'
    )
    assert docker_swarm_service.has_list_changed(
        [{'a': 1}, {'a': 2}],
        [{'a': 2}, {'a': 1}],
        sort_lists=False
    )

    assert docker_swarm_service.has_list_changed(
        [{'a': 1}, {'a': 2}, {'a': 3}],
        [{'a': 2}, {'a': 1}],
        sort_key='a'
    )
    assert docker_swarm_service.has_list_changed(
        [{'a': 1}, {'a': 2}],
        [{'a': 1}, {'a': 2}, {'a': 3}],
        sort_lists=False
    )
```"
-------------------------------------------------------------------------
"
# List comparisons without dictionaries
# I could improve the indenting, but pycodestyle wants this instead
assert not docker_swarm_service.has_list_changed(None, None)
assert not docker_swarm_service.has_list_changed(None, [])
assert not docker_swarm_service.has_list_changed(None, [1, 2])

assert not docker_swarm_service.has_list_changed([], None)
assert not docker_swarm_service.has_list_changed([], [])
assert docker_swarm_service.has_list_changed([], [1, 2])

assert docker_swarm_service.has_list_changed([1, 2], None)
assert docker_swarm_service.has_list_changed([1, 2], [])

assert docker_swarm_service.has_list_changed([1, 2, 3], [1, 2])
assert docker_swarm_service.has_list_changed([1, 2], [1, 2, 3])

# Check list sorting
assert not docker_swarm_service.has_list_changed([1, 2], [2, 1])
    [1, 2],
    [2, 1],
    sort_lists=False

# Check type matching
assert docker_swarm_service.has_list_changed([None, 1], [2, 1])
assert docker_swarm_service.has_list_changed([2, 1], [None, 1])
    ""command --with args"",
    ['command', '--with', 'args']
    ['sleep', '3400'],
    [u'sleep', u'3600'],
    sort_lists=False

# List comparisons with dictionaries
    [{'a': 1}],
    [{'a': 1}],
    sort_key='a'

    [{'a': 1}, {'a': 2}],
    [{'a': 1}, {'a': 2}],
    sort_key='a'

with pytest.raises(Exception):
    docker_swarm_service.has_list_changed(
        [{'a': 1}, {'a': 2}],
        [{'a': 1}, {'a': 2}]
    )

# List sort checking with sort key
    [{'a': 1}, {'a': 2}],
    [{'a': 2}, {'a': 1}],
    sort_key='a'
)
assert docker_swarm_service.has_list_changed(
    [{'a': 1}, {'a': 2}],
    [{'a': 2}, {'a': 1}],
    sort_lists=False
)

assert docker_swarm_service.has_list_changed(
    [{'a': 1}, {'a': 2}, {'a': 3}],
    [{'a': 2}, {'a': 1}],
    sort_key='a'
)
assert docker_swarm_service.has_list_changed(
    [{'a': 1}, {'a': 2}],
    [{'a': 1}, {'a': 2}, {'a': 3}],
    sort_lists=False

# Additional dictionary elements
"
-------------------------------------------------------------------------
"Recom
PRs: 63887, 65221"
-------------------------------------------------------------------------
=========================================================================
"],
sort_key='dst'
"
-------------------------------------------------------------------------
"```
def test_has_list_changed(docker_swarm_service):
    [
        {""src"": 1, ""dst"": 2, ""protocol"": ""tcp""},
        {""src"": 1, ""dst"": 2, ""protocol"": ""udp""},
    ]
    assert not docker_swarm_service.has_list_changed(
        [
```"
-------------------------------------------------------------------------
"],
sort_key='dst'
"
-------------------------------------------------------------------------
"Recom
PRs: 63887, 65221"
-------------------------------------------------------------------------
=========================================================================
"],
sort_key='dst'
"
-------------------------------------------------------------------------
"def test_has_list_changed(docker_swarm_service):
     [
         {""src"": 1, ""dst"": 2, ""protocol"": ""udp""},
         {""src"": 1, ""dst"": 3, ""protocol"": ""tcp""},
     ]
     assert docker_swarm_service.has_list_changed(
         [
            {""src"": 1, ""dst"": 2, ""protocol"": ""udp""},
            {""src"": 1, ""dst"": 3, ""protocol"": ""tcp""},
         ],
         sort_key='dst'
     )"
-------------------------------------------------------------------------
"],
sort_key='dst'
"
-------------------------------------------------------------------------
"Recom
PRs: 63887, 65221"
-------------------------------------------------------------------------
=========================================================================
"],
sort_key='dst'
"
-------------------------------------------------------------------------
"```
def test_has_list_changed(docker_swarm_service):
             {""src"": 1, ""dst"": 3, ""protocol"": ""udp""},
             {""src"": 1, ""dst"": 2, ""protocol"": ""tcp""},
             {""src"": 3, ""dst"": 4, ""protocol"": ""tcp""},
     )
     assert docker_swarm_service.has_list_changed(
         [
```
In this snippet, the provided part seems incomplete. Could you please provide more context or clarify?"
-------------------------------------------------------------------------
"],
sort_key='dst'
"
-------------------------------------------------------------------------
"Recom
PRs: 63887, 65221"
-------------------------------------------------------------------------
=========================================================================
"],
sort_key='dst'
"
-------------------------------------------------------------------------
"```
def test_has_list_changed(docker_swarm_service):
    [
        {""src"": 1, ""dst"": 2, ""protocol"": ""tcp""},
        {""src"": 1, ""dst"": 2, ""protocol"": ""udp""},
    ]
    assert docker_swarm_service.has_list_changed(
        [
            {""src"": 1, ""dst"": 2, ""protocol"": ""tcp""},
            {""src"": 1, ""dst"": 2, ""protocol"": ""udp""},
        ],
        sort_key='dst'
    )
```"
-------------------------------------------------------------------------
"],
sort_key='dst'
"
-------------------------------------------------------------------------
"Recom
PRs: 63887, 65221"
-------------------------------------------------------------------------
=========================================================================
"],
sort_key='dst'
[{'id': '123'}],
sort_key='id'



_have_networks_changed(docker_swarm_service):
rt not docker_swarm_service.have_networks_changed(
None,
None


rt not docker_swarm_service.have_networks_changed(
[],
None


rt not docker_swarm_service.have_networks_changed(
[{'id': 1}],
[{'id': 1}]


rt docker_swarm_service.have_networks_changed(
[{'id': 1}],
[{'id': 1}, {'id': 2}]


rt not docker_swarm_service.have_networks_changed(
[{'id': 1}, {'id': 2}],
[{'id': 1}, {'id': 2}]


rt not docker_swarm_service.have_networks_changed(
[{'id': 1}, {'id': 2}],
[{'id': 2}, {'id': 1}]


rt not docker_swarm_service.have_networks_changed(
[
    {'id': 1},
    {'id': 2, 'aliases': []}
],
[
    {'id': 1},
    {'id': 2}
]


rt docker_swarm_service.have_networks_changed(
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias1']}
],
[
    {'id': 1},
    {'id': 2}
]


rt docker_swarm_service.have_networks_changed(
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias1', 'alias2']}
],
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias1']}
]


rt not docker_swarm_service.have_networks_changed(
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias1', 'alias2']}
],
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias1', 'alias2']}
]


rt not docker_swarm_service.have_networks_changed(
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias1', 'alias2']}
],
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias2', 'alias1']}
]


rt not docker_swarm_service.have_networks_changed(
[
    {'id': 1, 'options': {}},
    {'id': 2, 'aliases': ['alias1', 'alias2']}],
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias2', 'alias1']}
]


rt not docker_swarm_service.have_networks_changed(
[
    {'id': 1, 'options': {'option1': 'value1'}},
    {'id': 2, 'aliases': ['alias1', 'alias2']}],
[
    {'id': 1, 'options': {'option1': 'value1'}},
    {'id': 2, 'aliases': ['alias2', 'alias1']}
]


rt docker_swarm_service.have_networks_changed(
[
    {'id': 1, 'options': {'option1': 'value1'}},
    {'id': 2, 'aliases': ['alias1', 'alias2']}],
[
    {'id': 1, 'options': {'option1': 'value2'}},
    {'id': 2, 'aliases': ['alias2', 'alias1']}
]
"
-------------------------------------------------------------------------
"```python
def test_have_networks_changed(docker_swarm_service):
    assert not docker_swarm_service.have_networks_changed(
        None,
        None
    )

    assert not docker_swarm_service.have_networks_changed(
        [],
        None
    )

    assert not docker_swarm_service.have_networks_changed(
        [{'id': 1}],
        [{'id': 1}]
    )

    assert docker_swarm_service.have_networks_changed(
        [{'id': 1}],
        [{'id': 1}, {'id': 2}]
    )

    assert not docker_swarm_service.have_networks_changed(
        [{'id': 1}, {'id': 2}],
        [{'id': 1}, {'id': 2}]
    )

    assert not docker_swarm_service.have_networks_changed(
        [{'id': 1}, {'id': 2}],
        [{'id': 2}, {'id': 1}]
    )

    assert not docker_swarm_service.have_networks_changed(
        [{'id': 1},
            {'id': 2, 'aliases': []}],
        [{'id': 1},
            {'id': 2}]
    )

    assert docker_swarm_service.have_networks_changed(
        [{'id': 1},
            {'id': 2, 'aliases': ['alias1']}],
        [{'id': 1},
            {'id': 2}]
    )

    assert docker_swarm_service.have_networks_changed(
        [{'id': 1},
            {'id': 2, 'aliases': ['alias1', 'alias2']}],
        [{'id': 1},
            {'id': 2, 'aliases': ['alias1']}]
    )

    assert not docker_swarm_service.have_networks_changed(
        [{'id': 1},
            {'id': 2, 'aliases': ['alias1', 'alias2']}],
        [{'id': 1},
            {'id': 2, 'aliases': ['alias1', 'alias2']}]
    )

    assert not docker_swarm_service.have_networks_changed(
        [{'id': 1},
            {'id': 2, 'aliases': ['alias1', 'alias2']}],
        [{'id': 1},
            {'id': 2, 'aliases': ['alias2', 'alias1']}]
    )

    assert not docker_swarm_service.have_networks_changed(
        [{'id': 1, 'options': {}},
            {'id': 2, 'aliases': ['alias1', 'alias2']}],
        [{'id': 1},
            {'id': 2, 'aliases': ['alias2', 'alias1']}]
    )

    assert not docker_swarm_service.have_networks_changed(
        [{'id': 1, 'options': {'option1': 'value1'}},
            {'id': 2, 'aliases': ['alias1', 'alias2']}],
        [{'id': 1, 'options': {'option1': 'value1'}},
            {'id': 2, 'aliases': ['alias2', 'alias1']}]
    )

    assert docker_swarm_service.have_networks_changed(
        [{'id': 1, 'options': {'option1': 'value1'}},
            {'id': 2, 'aliases': ['alias1', 'alias2']}],
        [{'id': 1, 'options': {'option1': 'value2'}},
            {'id': 2, 'aliases': ['alias2', 'alias1']}]
    )
```  "
-------------------------------------------------------------------------
"],
sort_key='dst'
[{'id': '123'}],
sort_key='id'



_have_networks_changed(docker_swarm_service):
rt not docker_swarm_service.have_networks_changed(
None,
None


rt not docker_swarm_service.have_networks_changed(
[],
None


rt not docker_swarm_service.have_networks_changed(
[{'id': 1}],
[{'id': 1}]


rt docker_swarm_service.have_networks_changed(
[{'id': 1}],
[{'id': 1}, {'id': 2}]


rt not docker_swarm_service.have_networks_changed(
[{'id': 1}, {'id': 2}],
[{'id': 1}, {'id': 2}]


rt not docker_swarm_service.have_networks_changed(
[{'id': 1}, {'id': 2}],
[{'id': 2}, {'id': 1}]


rt not docker_swarm_service.have_networks_changed(
[
    {'id': 1},
    {'id': 2, 'aliases': []}
],
[
    {'id': 1},
    {'id': 2}
]


rt docker_swarm_service.have_networks_changed(
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias1']}
],
[
    {'id': 1},
    {'id': 2}
]


rt docker_swarm_service.have_networks_changed(
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias1', 'alias2']}
],
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias1']}
]


rt not docker_swarm_service.have_networks_changed(
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias1', 'alias2']}
],
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias1', 'alias2']}
]


rt not docker_swarm_service.have_networks_changed(
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias1', 'alias2']}
],
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias2', 'alias1']}
]


rt not docker_swarm_service.have_networks_changed(
[
    {'id': 1, 'options': {}},
    {'id': 2, 'aliases': ['alias1', 'alias2']}],
[
    {'id': 1},
    {'id': 2, 'aliases': ['alias2', 'alias1']}
]


rt not docker_swarm_service.have_networks_changed(
[
    {'id': 1, 'options': {'option1': 'value1'}},
    {'id': 2, 'aliases': ['alias1', 'alias2']}],
[
    {'id': 1, 'options': {'option1': 'value1'}},
    {'id': 2, 'aliases': ['alias2', 'alias1']}
]


rt docker_swarm_service.have_networks_changed(
[
    {'id': 1, 'options': {'option1': 'value1'}},
    {'id': 2, 'aliases': ['alias1', 'alias2']}],
[
    {'id': 1, 'options': {'option1': 'value2'}},
    {'id': 2, 'aliases': ['alias2', 'alias1']}
]
"
-------------------------------------------------------------------------
"Recom
PRs: 63887, 65221"
-------------------------------------------------------------------------
=========================================================================
"elif self.name is not None:
    self.name_version = self.name
"
-------------------------------------------------------------------------
"```python
elif self.name is not None:
    self.name_version = self.name + '@' + str(self.version)
```"
-------------------------------------------------------------------------
"elif self.name is not None:
    self.name_version = self.name
"
-------------------------------------------------------------------------
"Recom
PRs: 62348, 65214"
-------------------------------------------------------------------------
=========================================================================
"elif self.name is not None:
    self.name_version = self.name
"
-------------------------------------------------------------------------
"```python
elif self.name is not None:
    self.name_version = self.name
```"
-------------------------------------------------------------------------
"elif self.name is not None:
    self.name_version = self.name
"
-------------------------------------------------------------------------
"Recom
PRs: 62348, 65213"
-------------------------------------------------------------------------
=========================================================================
"elif current_condition['Field'] == condition['Field'] and current_condition['Values'] == condition['Values']:
"
-------------------------------------------------------------------------
elif current_condition['Field'] == condition['Field'] and current_condition['Values'] == condition['Values']:
-------------------------------------------------------------------------
"elif current_condition['Field'] == condition['Field'] and sorted(current_condition['Values']) == sorted(condition['Values']):
"
-------------------------------------------------------------------------
"Recom
PRs: 65021, 65212"
-------------------------------------------------------------------------
=========================================================================
"if int(current_rule['Priority']) != int(new_rule['Priority']):
"
-------------------------------------------------------------------------
if int(modified_rule['Priority']) != int(new_rule['Priority']):
-------------------------------------------------------------------------
"if int(current_rule['Priority']) != int(new_rule['Priority']):
"
-------------------------------------------------------------------------
"Recom
PRs: 65021, 65212"
-------------------------------------------------------------------------
=========================================================================
"- Conditions:
    - Field: host-header
      Values:
        - ""hostname.domain.com""
        - ""alternate.domain.com""
  Priority: '4'
  Actions:
    - TargetGroupName: test-target-group
      Type: forward
"
-------------------------------------------------------------------------
"- Conditions:
    - Field: host-header
      Values:
        - ""hostname.domain.com""
        - ""alternate.domain.com""
  Priority: '4'
  Actions:
    - TargetGroupName: test-target-group
      Type: forward"
-------------------------------------------------------------------------
"- Conditions:
    - Field: host-header
      Values:
        - ""hostname.domain.com""
        - ""alternate.domain.com""
  Priority: '4'
  Actions:
    - TargetGroupName: test-target-group
      Type: forward
"
-------------------------------------------------------------------------
"Recom
PRs: 65021, 65212"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_bytes, to_native, to_text
"
-------------------------------------------------------------------------
"```python
import os
import select
import subprocess
import time
import ansible.module_utils._text
import re
import shutil
import pty
import spwd
import calendar
import socket
import pwd
import grp
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes, to_native, to_text
"
-------------------------------------------------------------------------
"Recom
PRs: 62973, 65207"
-------------------------------------------------------------------------
=========================================================================
"if current is None or current != to_text(self.__dict__[field[0]]):
"
-------------------------------------------------------------------------
"```python
class DarwinUser(User):
    for field in self.fields:
        if field[0] in self.__dict__ and self.__dict__[field[0]] and (current is None or current != to_text(self.__dict__[field[0]])):
            current = self._get_user_property(field[1])
            cmd = self._get_dscl()
            cmd += ['-create', '/Users/%s' % self.name, field[1], self.__dict__[field[0]]
            (rc, _err, _out) = self.execute_command(cmd)
```"
-------------------------------------------------------------------------
"if current is None or current != to_text(self.__dict__[field[0]]):
"
-------------------------------------------------------------------------
"Recom
PRs: 62973, 65207"
-------------------------------------------------------------------------
=========================================================================
"query = ""SELECT lanname FROM pg_language WHERE lanname = %(lang)s""
cursor.execute(query, {'lang': lang})
query = ""SELECT lanpltrusted FROM pg_language WHERE lanname = %(lang)s""
cursor.execute(query, {'lang': lang})
query = ""UPDATE pg_language SET lanpltrusted = %(trust)s WHERE lanname = %(lang)s""
cursor.execute(query, {'trust': trust, 'lang': lang})
executed_queries.append(cursor.mogrify(query, {'trust': trust, 'lang': lang}))
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, division, print_function
import ansible.module_utils.basic as ansible_module_utils_basic
import ansible.module_utils.postgres as ansible_module_utils_postgres

executed_queries = []

def lang_exists(cursor, lang):
    """"""Checks if language exists for db""""""
    query = ""SELECT lanname FROM pg_language WHERE lanname = %(lang)s""
    cursor.execute(query, {'lang': lang})

def lang_istrusted(cursor, lang):
    """"""Checks if language is trusted for db""""""
    query = ""SELECT lanpltrusted FROM pg_language WHERE lanname = %(lang)s""
    cursor.execute(query, {'lang': lang})

def lang_altertrust(cursor, lang, trust):
    """"""Changes if language is trusted for db""""""
    query = ""UPDATE pg_language SET lanpltrusted = %(trust)s WHERE lanname = %(lang)s""
    cursor.execute(query, {'trust': trust, 'lang': lang})
    executed_queries.append(cursor.mogrify(query, {'trust': trust, 'lang': lang}))
```"
-------------------------------------------------------------------------
"query = ""SELECT lanname FROM pg_language WHERE lanname = %(lang)s""
cursor.execute(query, {'lang': lang})
query = ""SELECT lanpltrusted FROM pg_language WHERE lanname = %(lang)s""
cursor.execute(query, {'lang': lang})
query = ""UPDATE pg_language SET lanpltrusted = %(trust)s WHERE lanname = %(lang)s""
cursor.execute(query, {'trust': trust, 'lang': lang})
executed_queries.append(cursor.mogrify(query, {'trust': trust, 'lang': lang}))
"
-------------------------------------------------------------------------
"Recom
PRs: 65093, 65165"
-------------------------------------------------------------------------
=========================================================================
"def _parse_pubkey(pubkey_content):
"
-------------------------------------------------------------------------
"```python
def _parse_pubkey(pubkey_content):
    if pubkey_content:
        parts = pubkey_content.split(' ', 2)
        return parts[0], parts[1], '' if len(parts) <= 2 else parts[2]
```"
-------------------------------------------------------------------------
"def _parse_pubkey(pubkey_content):
"
-------------------------------------------------------------------------
"Recom
PRs: 65017, 65128"
-------------------------------------------------------------------------
=========================================================================
"return pubkey_parts[:2] == _parse_pubkey(pubkey)[:2]
"
-------------------------------------------------------------------------
return pubkey_parts[:2] == _parse_pubkey(pubkey)[:2]
-------------------------------------------------------------------------
"return pubkey_parts[:2] == _parse_pubkey(pubkey)[:2]
"
-------------------------------------------------------------------------
"Recom
PRs: 65017, 65128"
-------------------------------------------------------------------------
=========================================================================
"pubkey_parts = _parse_pubkey(_get_pubkey_content())
"
-------------------------------------------------------------------------
pubkey_parts = ansible.module_utils._text._parse_pubkey(ansible.module_utils._text._get_pubkey_content())
-------------------------------------------------------------------------
"pubkey_parts = _parse_pubkey(_get_pubkey_content())
"
-------------------------------------------------------------------------
"Recom
PRs: 65017, 65128"
-------------------------------------------------------------------------
=========================================================================
"def _parse_pubkey(pubkey_content):
"
-------------------------------------------------------------------------
"```python
def _parse_pubkey(pubkey_content):
    if pubkey_content:
        parts = pubkey_content.split(' ', 2)
        return parts[0], parts[1], '' if len(parts) <= 2 else parts[2]
```"
-------------------------------------------------------------------------
"def _parse_pubkey(pubkey_content):
"
-------------------------------------------------------------------------
"Recom
PRs: 65017, 65127"
-------------------------------------------------------------------------
=========================================================================
"return pubkey_parts[:2] == _parse_pubkey(pubkey)[:2]
"
-------------------------------------------------------------------------
return pubkey_parts[:2] == _parse_pubkey(pubkey)[:2]
-------------------------------------------------------------------------
"return pubkey_parts[:2] == _parse_pubkey(pubkey)[:2]
"
-------------------------------------------------------------------------
"Recom
PRs: 65017, 65127"
-------------------------------------------------------------------------
=========================================================================
"pubkey_parts = _parse_pubkey(_get_pubkey_content())
"
-------------------------------------------------------------------------
pubkey_parts = ansible.module_utils._text._parse_pubkey(_get_pubkey_content())
-------------------------------------------------------------------------
"pubkey_parts = _parse_pubkey(_get_pubkey_content())
"
-------------------------------------------------------------------------
"Recom
PRs: 65017, 65127"
-------------------------------------------------------------------------
=========================================================================
"if parameter_value is not None and is_checkpoint_param(parameter):
"
-------------------------------------------------------------------------
"```python
def get_payload_from_parameters(params):
    payload = {}
    for parameter in params:
        parameter_value = params[parameter]
        if parameter_value is not None and is_checkpoint_param(parameter):
            if isinstance(parameter_value, dict):
                payload[parameter.replace(""_"", ""-"")] = get_payload_from_parameters(parameter_value)
            elif isinstance(parameter_value, list) and len(parameter_value) != 0 and isinstance(parameter_value[0], dict):
                payload[parameter.replace(""_"", ""-"")] = [get_payload_from_parameters(item) for item in parameter_value]
            else:
                payload[parameter.replace(""_"", ""-"")] = parameter_value
    return payload
```"
-------------------------------------------------------------------------
"if parameter_value is not None and is_checkpoint_param(parameter):
"
-------------------------------------------------------------------------
"Recom
PRs: 65040, 65110"
-------------------------------------------------------------------------
=========================================================================
"key_changed = self.addSshKeyToUser(user, {
changed = changed or key_changed
group_changed = self.assignUserToGroup(user, options['group_path'], options['access_level'])
changed = changed or group_changed
"
-------------------------------------------------------------------------
"```python
key_changed = self.addSshKeyToUser(user, {
changed = changed or key_changed
group_changed = self.assignUserToGroup(user, options['group_path'], options['access_level'])
changed = changed or group_changed
```"
-------------------------------------------------------------------------
"key_changed = self.addSshKeyToUser(user, {
changed = changed or key_changed
group_changed = self.assignUserToGroup(user, options['group_path'], options['access_level'])
changed = changed or group_changed
"
-------------------------------------------------------------------------
"Recom
PRs: 63621, 65045"
-------------------------------------------------------------------------
=========================================================================
"def exec_sql(obj, query, query_params=None, ddl=False, add_to_executed=True, dont_exec=False):
"
-------------------------------------------------------------------------
"def exec_sql(obj, query, query_params=None, ddl=False, add_to_executed=True, dont_exec=False):
     """"""
     Execute SQL query with optional parameters.

     :param obj: Object to execute the SQL query on
     :param query: SQL query to be executed
     :param query_params: Parameters to be passed to the query
     :param ddl: Boolean flag indicating if the query is data definition language (DDL)
     :param add_to_executed: Boolean flag indicating whether to add the query to executed queries
     :param dont_exec: Boolean flag to skip actual execution of the query
     :return: None
     """""""
-------------------------------------------------------------------------
"def exec_sql(obj, query, query_params=None, ddl=False, add_to_executed=True, dont_exec=False):
"
-------------------------------------------------------------------------
"Recom
PRs: 64661, 65034"
-------------------------------------------------------------------------
=========================================================================
"Args:

Kwargs:
    query_params (dict or tuple) -- Query parameters to prevent SQL injections,
        could be a dict or tuple
    dont_exec (bool) -- used with add_to_executed=True to generate a query, add it
        to obj.executed_queries list and return True (default False)
if dont_exec:
    # This is usually needed to return queries in check_mode
    # without execution
    query = obj.cursor.mogrify(query, query_params)
    return True

try:
    if query_params is not None:
        obj.cursor.execute(query, query_params)
    else:
        obj.cursor.execute(query)

    if add_to_executed:
        if query_params is not None:
            obj.executed_queries.append(obj.cursor.mogrify(query, query_params))
        else:
            obj.executed_queries.append(query)

"
-------------------------------------------------------------------------
"def exec_sql(obj, query, ddl=False, add_to_executed=True, **kwargs):
    """"""
    Returns a query result if possible or True/False if ddl=True arg was passed.
    It necessary for statements that don't return any result (like DDL queries).

    obj (obj) -- must be an object of a user class.
        The object must have module (AnsibleModule class object) and
        cursor (psycopg cursor object) attributes
    query (str) -- SQL query to execute
    ddl (bool) -- must return True or False instead of rows (typical for DDL queries)
        (default False)
    add_to_executed (bool) -- append the query to obj.executed_queries attribute
    **kwargs:
        query_params (dict or tuple) -- Query parameters to prevent SQL injections,
            could be a dict or tuple
        dont_exec (bool) -- used with add_to_executed=True to generate a query, add it
            to obj.executed_queries list and return True (default False)
    """"""

    if add_to_executed:
        obj.executed_queries.append(query)

    if 'dont_exec' in kwargs and kwargs['dont_exec']:
        query = obj.cursor.mogrify(query, kwargs.get('query_params'))
        return True

    try:
        if 'query_params' in kwargs and kwargs['query_params'] is not None:
            obj.cursor.execute(query, kwargs['query_params'])
        else:
            obj.cursor.execute(query)

        if add_to_executed:
            if 'query_params' in kwargs and kwargs['query_params'] is not None:
                obj.executed_queries.append(obj.cursor.mogrify(query, kwargs['query_params']))
            else:
                obj.executed_queries.append(query)

        if not ddl:
            res = obj.cursor.fetchall()
            return res

    except Exception as e:
        # Handle exceptions here
        pass"
-------------------------------------------------------------------------
"Args:

Kwargs:
    query_params (dict or tuple) -- Query parameters to prevent SQL injections,
        could be a dict or tuple
    dont_exec (bool) -- used with add_to_executed=True to generate a query, add it
        to obj.executed_queries list and return True (default False)
if dont_exec:
    # This is usually needed to return queries in check_mode
    # without execution
    query = obj.cursor.mogrify(query, query_params)
    return True

try:
    if query_params is not None:
        obj.cursor.execute(query, query_params)
    else:
        obj.cursor.execute(query)

    if add_to_executed:
        if query_params is not None:
            obj.executed_queries.append(obj.cursor.mogrify(query, query_params))
        else:
            obj.executed_queries.append(query)

"
-------------------------------------------------------------------------
"Recom
PRs: 64661, 65034"
-------------------------------------------------------------------------
=========================================================================
"""WHERE indexrelname = %(name)s ""
""AND schemaname = %(schema)s"")
exec_sql(self, query, query_params={'name': self.name, 'schema': self.schema},
         add_to_executed=False)
"
-------------------------------------------------------------------------
"```python
exec_sql(self, query, query_params={'name': self.name, 'schema': self.schema},
         add_to_executed=False)
```"
-------------------------------------------------------------------------
"""WHERE i.indexname = %(name)s"")
c_sql(self, query, query_params={'name': self.name}, add_to_executed=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 64661, 65034"
-------------------------------------------------------------------------
=========================================================================
"feed_ca_cert:
      The ca_cert alias will be removed in Ansible 2.14.
  aliases: [ importer_ssl_ca_cert, ca_cert ]
feed_client_cert:
  version_added: ""2.10""
"
-------------------------------------------------------------------------
"aliases:
  - importer_ssl_ca_cert
  - ca_cert

feed_ca_cert:
  The ca_cert alias will be removed in Ansible 2.14.

feed_client_cert:
  version_added: ""2.10"""
-------------------------------------------------------------------------
"feed_ca_cert:
      The ca_cert alias will be removed in Ansible 2.14.
  aliases: [ importer_ssl_ca_cert, ca_cert ]
feed_client_cert:
  version_added: ""2.9.2""
"
-------------------------------------------------------------------------
"Recom
PRs: 59522, 65014"
-------------------------------------------------------------------------
=========================================================================
"- If not specified the default value will come from client_cert. Which will
  change in Ansible 2.14.
_client_key:
rsion_added: ""2.10""
- If not specified the default value will come from client_key. Which will
  change in Ansible 2.14.
"
-------------------------------------------------------------------------
"```python
- AnnAssign(target=Name(id='client_cert', ctx=Store()), annotation=Constant(value='2.10'), simple=1)
+ AnnAssign(target=Name(id='client_key', ctx=Store()), annotation=Constant(value='2.10'), simple=1)
```"
-------------------------------------------------------------------------
"- If not specified the default value will come from client_cert. Which will
  change in Ansible 2.14.
_client_key:
rsion_added: ""2.9.2""
- If not specified the default value will come from client_key. Which will
  change in Ansible 2.14.
"
-------------------------------------------------------------------------
"Recom
PRs: 59522, 65014"
-------------------------------------------------------------------------
=========================================================================
"feed_ca_cert=dict(aliases=['importer_ssl_ca_cert', 'ca_cert'], deprecated_aliases=[dict(name='ca_cert', version='2.14')]),
feed_client_cert=dict(aliases=['importer_ssl_client_cert']),
feed_client_key=dict(aliases=['importer_ssl_client_key']),
"
-------------------------------------------------------------------------
"+ AnnAssign(target=Name(id='feed_ca_cert', ctx=Store()), annotation=Dict(keys=[Constant(value='aliases'), Constant(value='deprecated_aliases')], values=[List(elts=[Constant(value='importer_ssl_ca_cert'), Constant(value='ca_cert')], ctx=Load()), List(elts=[Dict(keys=[Constant(value='name'), Constant(value='version')], values=[Constant(value='ca_cert'), Constant(value='2.14')], ctx=Load())], ctx=Load()), simple=1)
+ AnnAssign(target=Name(id='feed_client_cert', ctx=Store()), annotation=Dict(keys=[Constant(value='aliases')], values=[List(elts=[Constant(value='importer_ssl_client_cert')], ctx=Load())], simple=1)
+ AnnAssign(target=Name(id='feed_client_key', ctx=Store()), annotation=Dict(keys=[Constant(value='aliases')], values=[List(elts=[Constant(value='importer_ssl_client_key')], ctx=Load())], simple=1)"
-------------------------------------------------------------------------
"feed_ca_cert=dict(aliases=['importer_ssl_ca_cert', 'ca_cert'], deprecated_aliases=[dict(name='ca_cert', version='2.14')]),
feed_client_cert=dict(aliases=['importer_ssl_client_cert']),
feed_client_key=dict(aliases=['importer_ssl_client_key']),
"
-------------------------------------------------------------------------
"Recom
PRs: 59522, 65014"
-------------------------------------------------------------------------
=========================================================================
"importer_ssl_ca_cert = module.params['feed_ca_cert']
importer_ssl_client_cert = module.params['feed_client_cert']
if importer_ssl_client_cert is None and module.params['client_cert'] is not None:
    importer_ssl_client_cert = module.params['client_cert']
    module.deprecate((""To specify client certificates to be used with the repo to sync, and not for communication with pulp.io, use the new options ""
                      ""`feed_client_cert` and `feed_client_key` (available since Ansible 2.10). Until Ansible 2.14, the default value for ""
                      ""`feed_client_cert` will be taken from `client_cert` if only the latter is specified""), version=""2.14"")
importer_ssl_client_key = module.params['feed_client_key']
if importer_ssl_client_key is None and module.params['client_key'] is not None:
    importer_ssl_client_key = module.params['client_key']
    module.deprecate(""In Ansible 2.10 `feed_client_key` option was added. Until 2.14 the default value will come from client_key option"", version=""2.14"")
"
-------------------------------------------------------------------------
"```python
aliases = [module.params['importer_ssl_ca_cert'], module.params['ca_cert']]
version_added = 2.1
```"
-------------------------------------------------------------------------
"importer_ssl_ca_cert = module.params['feed_ca_cert']
importer_ssl_client_cert = module.params['feed_client_cert']
if importer_ssl_client_cert is None and module.params['client_cert'] is not None:
    importer_ssl_client_cert = module.params['client_cert']
    module.deprecate(""To specify client certificates to be used with the repo to sync, and not for communication with the ""
                     ""Pulp instance, use the new options `feed_client_cert` and `feed_client_key` (available since ""
                     ""Ansible 2.9.2). Until Ansible 2.14, the default value for `feed_client_cert` will be taken from ""
                     ""`client_cert` if only the latter is specified"", version=""2.14"")
importer_ssl_client_key = module.params['feed_client_key']
if importer_ssl_client_key is None and module.params['client_key'] is not None:
    importer_ssl_client_key = module.params['client_key']
    module.deprecate(""In Ansible 2.9.2 `feed_client_key` option was added. Until 2.14 the default value will come from client_key option"", version=""2.14"")
"
-------------------------------------------------------------------------
"Recom
PRs: 59522, 65014"
-------------------------------------------------------------------------
=========================================================================
"# close stdin, stdout, and stderr after process is terminated and
# stdout/stderr are read completely (see also issues #848, #64768).
p.stdout.close()
p.stderr.close()
"
-------------------------------------------------------------------------
"```python
p.stdout.close()
p.stderr.close()
```"
-------------------------------------------------------------------------
"# close stdin, stdout, and stderr after process is terminated and
# stdout/stderr are read completely (see also issues #848, #64768).
p.stdout.close()
p.stderr.close()
"
-------------------------------------------------------------------------
"Recom
PRs: 64785, 64874"
-------------------------------------------------------------------------
=========================================================================
"changed = pg_membership.grant() or changed
"
-------------------------------------------------------------------------
changed = pg_membership.grant() or changed
-------------------------------------------------------------------------
"changed = pg_membership.grant() or changed
"
-------------------------------------------------------------------------
"Recom
PRs: 64807, 64835"
-------------------------------------------------------------------------
=========================================================================
"- The C(ownca) provider is intended for generating OpenSSL certificate signed with your own
"
-------------------------------------------------------------------------
"description:
       to emulate C(assertonly) usage with M(openssl_certificate_info), M(openssl_csr_info),
       M(openssl_privatekey_info) and M(assert). This also allows more flexible checks than
       the ones offered by the C(assertonly) provider.
       CA (Certificate Authority) certificate (self-signed certificate).
    
     - Many properties that can be specified in this module are for validation of an
       existing or newly generated certificate. The proper place to specify them, if you
       need to provide extra information.
       The M(ownca) provider is intended for generating OpenSSL certificate signed with your own

Required dependency: os, datetime, __future__, abc, distutils.version, cryptography.hazmat.primitives.serialization, cryptography.x509, OpenSSL, ansible.module_utils, ansible.module_utils.compat, ansible.module_utils._text, cryptography.hazmat.backends, traceback, random, ansible.module_utils.basic, cryptography, "
-------------------------------------------------------------------------
"- The C(ownca) provider is intended for generating OpenSSL certificate signed with your own
"
-------------------------------------------------------------------------
"Recom
PRs: 64772, 64803"
-------------------------------------------------------------------------
=========================================================================
"- The C(ownca) provider is intended for generating OpenSSL certificate signed with your own
"
-------------------------------------------------------------------------
The `ownca` provider is designed for generating OpenSSL certificates signed with your own.
-------------------------------------------------------------------------
"- The C(ownca) provider is intended for generating OpenSSL certificate signed with your own
"
-------------------------------------------------------------------------
"Recom
PRs: 64772, 64802"
-------------------------------------------------------------------------
=========================================================================
"if 'args' in result._task_fields:
    del result._task_fields['args']

"
-------------------------------------------------------------------------
"```python
if 'args' in result._task_fields:
    del result._task_fields['args']
```"
-------------------------------------------------------------------------
"if 'args' in result._task_fields:
    del result._task_fields['args']

"
-------------------------------------------------------------------------
"Recom
PRs: 63527, 64748"
-------------------------------------------------------------------------
=========================================================================
"if 'args' in result._task_fields:
    del result._task_fields['args']

"
-------------------------------------------------------------------------
"if 'args' in result._task_fields:
    del result._task_fields['args']"
-------------------------------------------------------------------------
"if 'args' in result._task_fields:
    del result._task_fields['args']

"
-------------------------------------------------------------------------
"Recom
PRs: 63527, 64748"
-------------------------------------------------------------------------
=========================================================================
"- To create C(command) tasks that are easier to read than the ones using space-delimited
  arguments, pass parameters using the C(args) L(task keyword,../reference_appendices/playbooks_keywords.html#task)
  or use C(cmd) parameter.
- Either a free form command or C(cmd) parameter is required, see the examples.
:
ype: str
escription:
 - The command to run.
"
-------------------------------------------------------------------------
"```yaml
options:
  free_form:
    type: str
    description:
      - The free form command to run. 
  cmd:
    type: str
    description:
      - The command to run.
```"
-------------------------------------------------------------------------
"- To create C(command) tasks that are easier to read than the ones using space-delimited
  arguments, pass parameters using the C(args) L(task keyword,../reference_appendices/playbooks_keywords.html#task)
  or use C(cmd) parameter.
- Either a free form command or C(cmd) parameter is required, see the examples.
:
ype: str
escription:
 - The command to run.
"
-------------------------------------------------------------------------
"Recom
PRs: 62778, 64746"
-------------------------------------------------------------------------
=========================================================================
"- name: Run command if /path/to/database does not exist (without 'args' keyword).
- name: Run command if /path/to/database does not exist (with 'args' keyword).
# 'cmd' is module parameter
- name: Run command if /path/to/database does not exist (with 'cmd' parameter).
command:
  cmd: /usr/bin/make_database.sh db_user db_name
  creates: /path/to/database

"
-------------------------------------------------------------------------
"- name: Run command if /path/to/database does not exist (without 'args' keyword).
  command: /usr/bin/make_database.sh db_user db_name creates=/path/to/database

- name: Run command if /path/to/database does not exist (with 'args' keyword).
  command: /usr/bin/make_database.sh db_user db_name
  args:
    creates: /path/to/database

- name: Run command if /path/to/database does not exist (with 'cmd' parameter).
  command:
    cmd: /usr/bin/make_database.sh db_user db_name
    creates: /path/to/database"
-------------------------------------------------------------------------
"- name: Run command if /path/to/database does not exist (without 'args' keyword).
- name: Run command if /path/to/database does not exist (with 'args' keyword).
# 'cmd' is module parameter
- name: Run command if /path/to/database does not exist (with 'cmd' parameter).
command:
  cmd: /usr/bin/make_database.sh db_user db_name
  creates: /path/to/database

"
-------------------------------------------------------------------------
"Recom
PRs: 62778, 64746"
-------------------------------------------------------------------------
=========================================================================
"- Either a free form command or C(cmd) parameter is required, see the examples.
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.basic import *
# REMOVE: from __future__ import print_function
# REMOVE: from __future__ import division

def main():
    module = AnsibleModule(
        argument_spec=dict(
            free_form=dict(required=False, type='str'),
            cmd=dict(required=False, type='str')
        ),
        supports_check_mode=True
    )

    cmd = module.params.get('cmd')
    free_form = module.params.get('free_form')

    if not cmd and not free_form:
        module.fail_json(msg=""Either a free form command or C(cmd) parameter is required, see the examples."")

    # Your logic here

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"- Either a free form command or C(cmd) parameter is required, see the examples.
"
-------------------------------------------------------------------------
"Recom
PRs: 62778, 64746"
-------------------------------------------------------------------------
=========================================================================
"cmd:
  type: str
  description:
    - Path to the local script to run followed by optional arguments.
"
-------------------------------------------------------------------------
"```yaml
cmd:
  type: str
  description:
    - Path to the local script to run followed by optional arguments.
```"
-------------------------------------------------------------------------
"cmd:
  type: str
  description:
    - Path to the local script to run followed by optional arguments.
"
-------------------------------------------------------------------------
"Recom
PRs: 62778, 64746"
-------------------------------------------------------------------------
=========================================================================
"- name: Run a script with arguments (free form)
- name: Run a script with arguments (using 'cmd' parameter)
script:
  cmd: /some/local/script.sh --some-argument 1234

"
-------------------------------------------------------------------------
"- name: Run a script with arguments (free form)
  script: /some/local/script.sh --some-argument 1234

- name: Run a script with arguments (using 'cmd' parameter)
  script:
    cmd: /some/local/script.sh --some-argument 1234"
-------------------------------------------------------------------------
"- name: Run a script with arguments (free form)
- name: Run a script with arguments (using 'cmd' parameter)
script:
  cmd: /some/local/script.sh --some-argument 1234

"
-------------------------------------------------------------------------
"Recom
PRs: 62778, 64746"
-------------------------------------------------------------------------
=========================================================================
"- Either a free form command or C(cmd) parameter is required, see the examples.
"
-------------------------------------------------------------------------
"```python
""""""
Either a free form command or C(cmd) parameter is required, see the examples.
""""""
from __future__ import absolute_import, division, print_function

# Original code snippet here
```"
-------------------------------------------------------------------------
"- Either a free form command or C(cmd) parameter is required, see the examples.
"
-------------------------------------------------------------------------
"Recom
PRs: 62778, 64746"
-------------------------------------------------------------------------
=========================================================================
"cmd:
  type: str
  description:
    - The command to run followed by optional arguments.
"
-------------------------------------------------------------------------
"```yaml
cmd:
  type: str
  description:
    - The command to run followed by optional arguments.
```"
-------------------------------------------------------------------------
"cmd:
  type: str
  description:
    - The command to run followed by optional arguments.
"
-------------------------------------------------------------------------
"Recom
PRs: 62778, 64746"
-------------------------------------------------------------------------
=========================================================================
"# You can also use the 'cmd' parameter instead of free form format.
- name: This command will change the working directory to somedir/.
shell:
  cmd: ls -l | grep log
  chdir: somedir/

"
-------------------------------------------------------------------------
"```python
- name: This command will change the working directory to somedir/.
  shell:
    cmd: ls -l | grep log
    chdir: somedir/
```"
-------------------------------------------------------------------------
"# You can also use the 'cmd' parameter instead of free form format.
- name: This command will change the working directory to somedir/.
shell:
  cmd: ls -l | grep log
  chdir: somedir/

"
-------------------------------------------------------------------------
"Recom
PRs: 62778, 64746"
-------------------------------------------------------------------------
=========================================================================
"- Required when C(state=present).
ired: false
"
-------------------------------------------------------------------------
"```yaml
options:
  event_source:
    description:
      - Type of events that the action will handle.
    choices:
      - 'trigger'
      - 'discovery'
      - 'auto_registration'
      - 'internal'
  state:
    description: ""Required when C(state=present).""
    required: false
```"
-------------------------------------------------------------------------
"- Required when C(state=present).
ired: false
"
-------------------------------------------------------------------------
"Recom
PRs: 63969, 64736"
-------------------------------------------------------------------------
=========================================================================
"- Required when C(state=present).
ired: false
"
-------------------------------------------------------------------------
"```yaml
options:
  esc_period:
    description:
      - Default operation step duration. Must be greater than 60 seconds. Accepts seconds, time unit with suffix and user macro.
    required: false
```"
-------------------------------------------------------------------------
"- Required when C(state=present).
ired: false
"
-------------------------------------------------------------------------
"Recom
PRs: 63969, 64736"
-------------------------------------------------------------------------
=========================================================================
"esc_period=dict(type='int', required=False),
event_source=dict(type='str', required=False, choices=['trigger', 'discovery', 'auto_registration', 'internal']),
"
-------------------------------------------------------------------------
"esc_period=dict(type='int', required=False),
event_source=dict(type='str', required=False, choices=['trigger', 'discovery', 'auto_registration', 'internal'])"
-------------------------------------------------------------------------
"esc_period=dict(type='int', required=False),
event_source=dict(type='str', required=False, choices=['trigger', 'discovery', 'auto_registration', 'internal']),
"
-------------------------------------------------------------------------
"Recom
PRs: 63969, 64736"
-------------------------------------------------------------------------
=========================================================================
"required_if=[
    ['state', 'present', [
        'esc_period',
        'event_source'
    ]]
],
"
-------------------------------------------------------------------------
"```python
required_if=[
    ['state', 'present', [
        'esc_period',
        'event_source'
    ]]
]
```"
-------------------------------------------------------------------------
"required_if=[
    ['state', 'present', [
        'esc_period',
        'event_source'
    ]]
],
"
-------------------------------------------------------------------------
"Recom
PRs: 63969, 64736"
-------------------------------------------------------------------------
=========================================================================
"runpy.run_module(mod_name='%(module_fqn)s', init_globals=None, run_name='__main__', alter_sys=True)
"
-------------------------------------------------------------------------
"```python
runpy.run_module(mod_name='%(module_fqn)s', init_globals=None, run_name='__main__', alter_sys=True)
```"
-------------------------------------------------------------------------
"runpy.run_module(mod_name='%(module_fqn)s', init_globals=None, run_name='__main__', alter_sys=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 64670, 64686"
-------------------------------------------------------------------------
=========================================================================
"runpy.run_module(mod_name='%(module_fqn)s', init_globals=None, run_name='__main__', alter_sys=True)
"
-------------------------------------------------------------------------
"```python
import runpy

runpy.run_module(mod_name='%(module_fqn)s', init_globals=None, run_name='__main__', alter_sys=True)
```"
-------------------------------------------------------------------------
"runpy.run_module(mod_name='%(module_fqn)s', init_globals=None, run_name='__main__', alter_sys=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 64670, 64686"
-------------------------------------------------------------------------
=========================================================================
"- ""Must be 1 for the classic Let's Encrypt and Buypass ACME endpoints,
   or 2 for standardized ACME v2 endpoints.""
"
-------------------------------------------------------------------------
"- ""Must be 1 for the classic Let's Encrypt and Buypass ACME endpoints, or 2 for standardized ACME v2 endpoints."""
-------------------------------------------------------------------------
"- ""Must be 1 for the classic Let's Encrypt and Buypass ACME endpoints,
   or 2 for standardized ACME v2 endpoints.""
"
-------------------------------------------------------------------------
"Recom
PRs: 64649, 64681"
-------------------------------------------------------------------------
=========================================================================
"- ""For Buypass, the production directory URL for ACME v2 and v1 is
"
-------------------------------------------------------------------------
"- ""For Buypass, the production directory URL for ACME v2 and v1 is U(https://api.buypass.com/acme/directory)."""
-------------------------------------------------------------------------
"- ""For Buypass, the production directory URL for ACME v2 and v1 is
"
-------------------------------------------------------------------------
"Recom
PRs: 64649, 64681"
-------------------------------------------------------------------------
=========================================================================
"- ""Must be 1 for the classic Let's Encrypt and Buypass ACME endpoints,
   or 2 for standardized ACME v2 endpoints.""
"
-------------------------------------------------------------------------
"```python
from __future__ import print_function
from __future__ import absolute_import
from __future__ import division

options:
   acme_version:
     description:
       - ""Must be 1 for the classic Let's Encrypt and Buypass ACME endpoints, or 2 for standardized ACME v2 endpoints.""
       - ""Note that in Ansible 2.14, this option will be required and will no longer have a default.""
       - ""Please also note that we will deprecate ACME v1 support eventually.""
```"
-------------------------------------------------------------------------
"- ""Must be 1 for the classic Let's Encrypt and Buypass ACME endpoints,
   or 2 for standardized ACME v2 endpoints.""
"
-------------------------------------------------------------------------
"Recom
PRs: 64649, 64680"
-------------------------------------------------------------------------
=========================================================================
"- ""For Buypass, the production directory URL for ACME v2 and v1 is
"
-------------------------------------------------------------------------
"```python
options:
       - ""For Let's Encrypt, the production directory URL for ACME v1 is
          U(https://acme-v01.api.letsencrypt.org/directory), and the production
          directory URL for ACME v2 is U(https://acme-v02.api.letsencrypt.org/directory).""
       - ""For Buypass, the production directory URL for ACME v2 and v1 is
          U(https://api.buypass.com/acme/directory).""
```"
-------------------------------------------------------------------------
"- ""For Buypass, the production directory URL for ACME v2 and v1 is
"
-------------------------------------------------------------------------
"Recom
PRs: 64649, 64680"
-------------------------------------------------------------------------
=========================================================================
"- Must be specified if I(type) is not C(tmpfs).
"
-------------------------------------------------------------------------
"options:
  source:
    description:
      - Must be specified if i(type) is not C(tmpfs).
    type: str
  target:
    description:
      - Container path."
-------------------------------------------------------------------------
"- Must be specified if I(type) is not C(tmpfs).
"
-------------------------------------------------------------------------
"Recom
PRs: 64637, 64641"
-------------------------------------------------------------------------
=========================================================================
"if param_m['source'] is None and param_m['type'] != 'tmpfs':
    raise ValueError('Source must be specified for mounts which are not of type tmpfs')
service_m['source'] = param_m['source'] or ''
"
-------------------------------------------------------------------------
"```python
import __future__
import distutils.version
import docker.errors
import ansible.module_utils.docker.common
import docker
import shlex
import docker.utils
import operator
import time
import traceback
import ansible.module_utils.six
import ansible.module_utils._text
import ansible.module_utils.basic

if param_m['source'] is None and param_m['type'] != 'tmpfs':
    raise ValueError('Source must be specified for mounts which are not of type tmpfs')
service_m['source'] = param_m['source'] or ''
```"
-------------------------------------------------------------------------
"if param_m['source'] is None and param_m['type'] != 'tmpfs':
    raise ValueError('Source must be specified for mounts which are not of type tmpfs')
service_m['source'] = param_m['source'] or ''
"
-------------------------------------------------------------------------
"Recom
PRs: 64637, 64641"
-------------------------------------------------------------------------
=========================================================================
"source=dict(type='str'),
"
-------------------------------------------------------------------------
"```python
source=dict(type='str')
```"
-------------------------------------------------------------------------
"source=dict(type='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 64637, 64641"
-------------------------------------------------------------------------
=========================================================================
"- Must be specified if I(type) is not C(tmpfs).
"
-------------------------------------------------------------------------
"```python
# Must be specified if I(type) is not C(tmpfs).
```"
-------------------------------------------------------------------------
"- Must be specified if I(type) is not C(tmpfs).
"
-------------------------------------------------------------------------
"Recom
PRs: 64637, 64640"
-------------------------------------------------------------------------
=========================================================================
"if param_m['source'] is None and param_m['type'] != 'tmpfs':
    raise ValueError('Source must be specified for mounts which are not of type tmpfs')
service_m['source'] = param_m['source'] or ''
"
-------------------------------------------------------------------------
"```python
if param_m['source'] is None and param_m['type'] != 'tmpfs':
    raise ValueError('Source must be specified for mounts which are not of type tmpfs')
service_m['source'] = param_m['source'] or ''
```"
-------------------------------------------------------------------------
"if param_m['source'] is None and param_m['type'] != 'tmpfs':
    raise ValueError('Source must be specified for mounts which are not of type tmpfs')
service_m['source'] = param_m['source'] or ''
"
-------------------------------------------------------------------------
"Recom
PRs: 64637, 64640"
-------------------------------------------------------------------------
=========================================================================
"source=dict(type='str'),
"
-------------------------------------------------------------------------
source=dict(type='str')
-------------------------------------------------------------------------
"source=dict(type='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 64637, 64640"
-------------------------------------------------------------------------
=========================================================================
"module.warn('parameter ""cascade"" is ignored when ""state=present""')
"
-------------------------------------------------------------------------
"module.warn('parameter ""cascade"" is ignored when ""state=present""')"
-------------------------------------------------------------------------
"module.warn('parameter ""cascade"" is ignored when ""state=present""')
"
-------------------------------------------------------------------------
"Recom
PRs: 64582, 64591"
-------------------------------------------------------------------------
=========================================================================
"del chain[:]
"
-------------------------------------------------------------------------
del chain[:]
-------------------------------------------------------------------------
"del chain[:]
"
-------------------------------------------------------------------------
"Recom
PRs: 64504, 64574"
-------------------------------------------------------------------------
=========================================================================
"- Does not run against backup files. Use M(postgresql_db) with I(state=restore)
to run queries on files made by pg_dump/pg_dumpall utilities.
"
-------------------------------------------------------------------------
"- Runs arbitrary PostgreSQL queries.
- Can run queries from SQL script files and backup files created by pg_dump/pg_dumpall utilities.
- Use M(postgresql_db) with I(state=restore) to run queries on backup files."
-------------------------------------------------------------------------
"- Does not run against backup files. Use M(postgresql_db) with I(state=restore)
to run queries on files made by pg_dump/pg_dumpall utilities.
"
-------------------------------------------------------------------------
"Recom
PRs: 64432, 64540"
-------------------------------------------------------------------------
=========================================================================
"seealso:
- module: postgresql_db
"
-------------------------------------------------------------------------
"```yaml
seealso:
  - module: postgresql_db
```"
-------------------------------------------------------------------------
"seealso:
- module: postgresql_db
"
-------------------------------------------------------------------------
"Recom
PRs: 64432, 64540"
-------------------------------------------------------------------------
=========================================================================
"- Does not run against backup files. Use M(postgresql_db) with I(state=restore)
to run queries on files made by pg_dump/pg_dumpall utilities.
"
-------------------------------------------------------------------------
- The module does not run against backup files. Use M(postgresql_db) with I(state=restore) to run queries on files made by pg_dump/pg_dumpall utilities.
-------------------------------------------------------------------------
"- Does not run against backup files. Use M(postgresql_db) with I(state=restore)
to run queries on files made by pg_dump/pg_dumpall utilities.
"
-------------------------------------------------------------------------
"Recom
PRs: 64432, 64539"
-------------------------------------------------------------------------
=========================================================================
"seealso:
- module: postgresql_db
"
-------------------------------------------------------------------------
"```yaml
options:
     type: bool
     default: no
     version_added: '2.9'
seealso:
    - module: postgresql_db
author:
  - Felix Archambault (@archf)
  - Andrew Klychkov (@Andersson007)
```"
-------------------------------------------------------------------------
"seealso:
- module: postgresql_db
"
-------------------------------------------------------------------------
"Recom
PRs: 64432, 64539"
-------------------------------------------------------------------------
=========================================================================
"with open(path, ""w"") as file:
    json.dump(config, file, indent=5, sort_keys=True)
"
-------------------------------------------------------------------------
"```python
with open(path, ""w"") as file:
    json.dump(config, file, indent=5, sort_keys=True)
```"
-------------------------------------------------------------------------
"with open(path, ""w"") as file:
    json.dump(config, file, indent=5, sort_keys=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 64392, 64525"
-------------------------------------------------------------------------
=========================================================================
"with open(path, ""r"") as file:
    config = json.load(file)
"
-------------------------------------------------------------------------
"try:
    with open(path, ""r"") as file:
        config = json.load(file)
except ValueError:
    self.log(""Error reading config from %s"" % (path))
    config = dict()"
-------------------------------------------------------------------------
"with open(path, ""r"") as file:
    config = json.load(file)
"
-------------------------------------------------------------------------
"Recom
PRs: 64392, 64525"
-------------------------------------------------------------------------
=========================================================================
"with open(path, ""w"") as file:
    json.dump(config, file, indent=5, sort_keys=True)
"
-------------------------------------------------------------------------
"```python
with open(path, ""w"") as file:
    json.dump(config, file, indent=5, sort_keys=True)
```"
-------------------------------------------------------------------------
"with open(path, ""w"") as file:
    json.dump(config, file, indent=5, sort_keys=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 64392, 64524"
-------------------------------------------------------------------------
=========================================================================
"with open(path, ""r"") as file:
    config = json.load(file)
"
-------------------------------------------------------------------------
"```python
try:
    with open(path, ""r"") as file:
        config = json.load(file)
except ValueError:
    self.log(""Error reading config from %s"" % (path))
    config = dict()
```"
-------------------------------------------------------------------------
"with open(path, ""r"") as file:
    config = json.load(file)
"
-------------------------------------------------------------------------
"Recom
PRs: 64392, 64524"
-------------------------------------------------------------------------
=========================================================================
"collection_root = os.environ.get('ANSIBLE_COLLECTIONS_PATHS')
"
-------------------------------------------------------------------------
collection_root = os.environ.get('ANSIBLE_COLLECTIONS_PATHS')
-------------------------------------------------------------------------
"collection_root = os.environ.get('ANSIBLE_COLLECTIONS_PATHS')
"
-------------------------------------------------------------------------
"Recom
PRs: 64467, 64473"
-------------------------------------------------------------------------
=========================================================================
"with open(to_bytes(self.get_filename(fullname)), 'rb') as mod_file:
    return mod_file.read()
return os.path.basename(self.get_filename(fullname)) in ('__init__.py', '__synthetic__')
if fullname in sys.modules:
    return sys.modules[fullname].__file__

# find the module without importing it
# otherwise an ImportError during module load will prevent us from getting the filename of the module
loader = self.find_module(fullname)

if not loader:
    raise ImportError('module {0} not found'.format(fullname))

# determine the filename of the module that was found
filename = os.path.join(collection_root, fullname.replace('.', os.path.sep))

if os.path.isdir(filename):
    init_filename = os.path.join(filename, '__init__.py')
    filename = init_filename if os.path.exists(init_filename) else os.path.join(filename, '__synthetic__')
else:
    filename = '.py'
return filename
"
-------------------------------------------------------------------------
"```python
mod_file = None
filename = self.get_filename(fullname)
if os.path.basename(filename) in ('__init__.py', '__synthetic__'):
    with open(to_bytes(filename), 'rb') as mod_file:
        mod_content = mod_file.read()
else:
    if fullname in sys.modules:
        return sys.modules[fullname].__file__

    # find the module without importing it
    # otherwise an ImportError during module load will prevent us from getting the filename of the module
    loader = self.find_module(fullname)

    if not loader:
        raise ImportError('module {0} not found'.format(fullname))

    # determine the filename of the module that was found
    filename = os.path.join(collection_root, fullname.replace('.', os.path.sep))

    if os.path.isdir(filename):
        init_filename = os.path.join(filename, '__init__.py')
        filename = init_filename if os.path.exists(init_filename) else os.path.join(filename, '__synthetic__')
    else:
        filename = '.py'

filename
```"
-------------------------------------------------------------------------
"with open(to_bytes(self.get_filename(fullname)), 'rb') as mod_file:
    return mod_file.read()
return os.path.basename(self.get_filename(fullname)) in ('__init__.py', '__synthetic__')
if fullname in sys.modules:
    return sys.modules[fullname].__file__

# find the module without importing it
# otherwise an ImportError during module load will prevent us from getting the filename of the module
loader = self.find_module(fullname)

if not loader:
    raise ImportError('module {0} not found'.format(fullname))

# determine the filename of the module that was found
filename = os.path.join(collection_root, fullname.replace('.', os.path.sep))

if os.path.isdir(filename):
    init_filename = os.path.join(filename, '__init__.py')
    filename = init_filename if os.path.exists(init_filename) else os.path.join(filename, '__synthetic__')
else:
    filename = '.py'
return filename
"
-------------------------------------------------------------------------
"Recom
PRs: 64467, 64473"
-------------------------------------------------------------------------
=========================================================================
"self.image = 'quay.io/ansible/acme-test-container:1.9.0'
"
-------------------------------------------------------------------------
self.image = 'quay.io/ansible/acme-test-container:1.9.0'
-------------------------------------------------------------------------
"self.image = 'quay.io/ansible/acme-test-container:1.9.0'
"
-------------------------------------------------------------------------
"Recom
PRs: 64424, 64462"
-------------------------------------------------------------------------
=========================================================================
"try:
from urllib.parse import urlparse
pt ImportError:
# Python 2
from urlparse import urlparse

"
-------------------------------------------------------------------------
"```python
try:
    from urllib.parse import urlparse
except ImportError:
    from urlparse import urlparse
```"
-------------------------------------------------------------------------
"try:
from urllib.parse import urlparse
pt ImportError:
# Python 2
from urlparse import urlparse

"
-------------------------------------------------------------------------
"Recom
PRs: 64373, 64451"
-------------------------------------------------------------------------
=========================================================================
"
# https://github.com/ansible/ansible/issues/64355
# api_server contains part of the API path but next_link includes the the /api part so strip it out.
url_info = urlparse(self.api_server)
base_url = ""%s://%s/"" % (url_info.scheme, url_info.netloc)

    url = _urljoin(base_url, data['next_link'])
display.warning(""Unable to retrieve role (id=%s) data (%s), but this is not fatal so we continue: %s""
                % (role_id, related, to_text(e)))
"
-------------------------------------------------------------------------
"```python
# https://github.com/ansible/ansible/issues/64355
# api_server contains part of the API path but next_link includes the the /api part so strip it out.
url_info = urlparse(self.api_server)
base_url = ""%s://%s/"" % (url_info.scheme, url_info.netloc)

url = _urljoin(base_url, data['next_link'])
display.warning(""Unable to retrieve role (id=%s) data (%s), but this is not fatal so we continue: %s""
                % (role_id, related, to_text(e)))
```"
-------------------------------------------------------------------------
"
# https://github.com/ansible/ansible/issues/64355
# api_server contains part of the API path but next_link includes the the /api part so strip it out.
url_info = urlparse(self.api_server)
base_url = ""%s://%s/"" % (url_info.scheme, url_info.netloc)

    url = _urljoin(base_url, data['next_link'])
display.warning(""Unable to retrieve role (id=%s) data (%s), but this is not fatal so we continue: %s""
                % (role_id, related, to_text(e)))
"
-------------------------------------------------------------------------
"Recom
PRs: 64373, 64451"
-------------------------------------------------------------------------
=========================================================================
"

@pytest.mark.parametrize('responses', [
[
    {
        'count': 2,
        'results': [{'name': '3.5.1', }, {'name': '3.5.2'}],
        'next_link': None,
        'next': None,
        'previous_link': None,
        'previous': None
    },
],
[
    {
        'count': 2,
        'results': [{'name': '3.5.1'}],
        'next_link': '/api/v1/roles/432/versions/?page=2&page_size=50',
        'next': '/roles/432/versions/?page=2&page_size=50',
        'previous_link': None,
        'previous': None
    },
    {
        'count': 2,
        'results': [{'name': '3.5.2'}],
        'next_link': None,
        'next': None,
        'previous_link': '/api/v1/roles/432/versions/?&page_size=50',
        'previous': '/roles/432/versions/?page_size=50',
    },
]

test_get_role_versions_pagination(monkeypatch, responses):
api = get_test_galaxy_api('https://galaxy.com/api/', 'v1')

mock_open = MagicMock()
mock_open.side_effect = [StringIO(to_text(json.dumps(r))) for r in responses]
monkeypatch.setattr(galaxy_api, 'open_url', mock_open)

actual = api.fetch_role_related('versions', 432)
assert actual == [{'name': '3.5.1'}, {'name': '3.5.2'}]

assert mock_open.call_count == len(responses)

assert mock_open.mock_calls[0][1][0] == 'https://galaxy.com/api/v1/roles/432/versions/?page_size=50'
if len(responses) == 2:
    assert mock_open.mock_calls[1][1][0] == 'https://galaxy.com/api/v1/roles/432/versions/?page=2&page_size=50'
"
-------------------------------------------------------------------------
"import pytest
from types import SimpleNamespace

def test_get_role_versions_pagination(monkeypatch):
    responses = [
        {
            'count': 2,
            'results': [{'name': '3.5.1', }, {'name': '3.5.2'}],
            'next_link': None,
            'next': None,
            'previous_link': None,
            'previous': None
        },
        {
            'count': 2,
            'results': [{'name': '3.5.1'}],
            'next_link': '/api/v1/roles/432/versions/?page=2&page_size=50',
            'next': '/roles/432/versions/?page=2&page_size=50',
            'previous_link': None,
            'previous': None
        },
        {
            'count': 2,
            'results': [{'name': '3.5.2'}],
            'next_link': None,
            'next': None,
            'previous_link': '/api/v1/roles/432/versions/?&page_size=50',
            'previous': '/roles/432/versions/?page_size=50',
        },
    ]
    
    api = get_test_galaxy_api('https://galaxy.com/api/', 'v1')

    mock_open = MagicMock()
    mock_open.side_effect = [StringIO(to_text(json.dumps(r))) for r in responses]
    monkeypatch.setattr(galaxy_api, 'open_url', mock_open)

    actual = api.fetch_role_related('versions', 432)
    assert actual == [{'name': '3.5.1'}, {'name': '3.5.2'}]

    assert mock_open.call_count == len(responses)

    assert mock_open.mock_calls[0][1][0] == 'https://galaxy.com/api/v1/roles/432/versions/?page_size=50'
    if len(responses) == 2:
        assert mock_open.mock_calls[1][1][0] == 'https://galaxy.com/api/v1/roles/432/versions/?page=2&page_size=50'"
-------------------------------------------------------------------------
"

@pytest.mark.parametrize('responses', [
[
    {
        'count': 2,
        'results': [{'name': '3.5.1', }, {'name': '3.5.2'}],
        'next_link': None,
        'next': None,
        'previous_link': None,
        'previous': None
    },
],
[
    {
        'count': 2,
        'results': [{'name': '3.5.1'}],
        'next_link': '/api/v1/roles/432/versions/?page=2&page_size=50',
        'next': '/roles/432/versions/?page=2&page_size=50',
        'previous_link': None,
        'previous': None
    },
    {
        'count': 2,
        'results': [{'name': '3.5.2'}],
        'next_link': None,
        'next': None,
        'previous_link': '/api/v1/roles/432/versions/?&page_size=50',
        'previous': '/roles/432/versions/?page_size=50',
    },
]

test_get_role_versions_pagination(monkeypatch, responses):
api = get_test_galaxy_api('https://galaxy.com/api/', 'v1')

mock_open = MagicMock()
mock_open.side_effect = [StringIO(to_text(json.dumps(r))) for r in responses]
monkeypatch.setattr(galaxy_api, 'open_url', mock_open)

actual = api.fetch_role_related('versions', 432)
assert actual == [{'name': '3.5.1'}, {'name': '3.5.2'}]

assert mock_open.call_count == len(responses)

assert mock_open.mock_calls[0][1][0] == 'https://galaxy.com/api/v1/roles/432/versions/?page_size=50'
if len(responses) == 2:
    assert mock_open.mock_calls[1][1][0] == 'https://galaxy.com/api/v1/roles/432/versions/?page=2&page_size=50'
"
-------------------------------------------------------------------------
"Recom
PRs: 64373, 64451"
-------------------------------------------------------------------------
=========================================================================
"if (not 0 < mode_number <= len(modes)):
"
-------------------------------------------------------------------------
if not 0 < mode_number <= len(modes):
-------------------------------------------------------------------------
"if (not 0 < mode_number <= len(modes)):
"
-------------------------------------------------------------------------
"Recom
PRs: 64437, 64444"
-------------------------------------------------------------------------
=========================================================================
"return sorted((get_dict_of_struct(opt) for opt in new_options),
              key=lambda x: x[""name""]) != sorted((get_dict_of_struct(opt) for opt in old_options),
                                                 key=lambda x: x[""name""])
"
-------------------------------------------------------------------------
"```python
return sorted((self.get_dict_of_struct(opt) for opt in new_options),
              key=lambda x: x[""name""]) != sorted((self.get_dict_of_struct(opt) for opt in old_options),
                                                 key=lambda x: x[""name""])
```"
-------------------------------------------------------------------------
"return sorted((get_dict_of_struct(opt) for opt in new_options),
              key=lambda x: x[""name""]) != sorted((get_dict_of_struct(opt) for opt in old_options),
                                                 key=lambda x: x[""name""])
"
-------------------------------------------------------------------------
"Recom
PRs: 64437, 64444"
-------------------------------------------------------------------------
=========================================================================
"- Number of threads per core of the Virtual Machine.
"
-------------------------------------------------------------------------
"```yaml
cpu_threads:
  description: Number of threads per core of the Virtual Machine.
  version_added: ""2.5""
```"
-------------------------------------------------------------------------
"- Number of threads per core of the Virtual Machine.
"
-------------------------------------------------------------------------
"Recom
PRs: 64380, 64413"
-------------------------------------------------------------------------
=========================================================================
"msg = 'Failed to authenticate: {0}'.format(to_text(e))
"
-------------------------------------------------------------------------
"```python
msg = 'Failed to authenticate: {0}'.format(ansible.module_utils._text.to_text(e))
```"
-------------------------------------------------------------------------
"msg = 'Failed to authenticate: {0}'.format(to_text(e))
"
-------------------------------------------------------------------------
"Recom
PRs: 64157, 64165"
-------------------------------------------------------------------------
=========================================================================
"msg = 'Failed to authenticate: {0}'.format(to_text(e))
"
-------------------------------------------------------------------------
"```python
msg = 'Failed to authenticate: {0}'.format(to_text(e))
```"
-------------------------------------------------------------------------
"msg = 'Failed to authenticate: {0}'.format(to_text(e))
"
-------------------------------------------------------------------------
"Recom
PRs: 64157, 64163"
-------------------------------------------------------------------------
=========================================================================
"from cryptography.hazmat.primitives import serialization
"
-------------------------------------------------------------------------
from cryptography.hazmat.primitives import serialization
-------------------------------------------------------------------------
"from cryptography.hazmat.primitives import serialization
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64126"
-------------------------------------------------------------------------
=========================================================================
"
# Test whether we have support for X25519, X448, Ed25519 and/or Ed448
try:
    import cryptography.hazmat.primitives.asymmetric.x25519
    CRYPTOGRAPHY_HAS_X25519 = True
    try:
        cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.private_bytes
        CRYPTOGRAPHY_HAS_X25519_FULL = True
    except AttributeError:
        CRYPTOGRAPHY_HAS_X25519_FULL = False
except ImportError:
    CRYPTOGRAPHY_HAS_X25519 = False
    CRYPTOGRAPHY_HAS_X25519_FULL = False
try:
    import cryptography.hazmat.primitives.asymmetric.x448
    CRYPTOGRAPHY_HAS_X448 = True
except ImportError:
    CRYPTOGRAPHY_HAS_X448 = False
try:
    import cryptography.hazmat.primitives.asymmetric.ed25519
    CRYPTOGRAPHY_HAS_ED25519 = True
except ImportError:
    CRYPTOGRAPHY_HAS_ED25519 = False
try:
    import cryptography.hazmat.primitives.asymmetric.ed448
    CRYPTOGRAPHY_HAS_ED448 = True
except ImportError:
    CRYPTOGRAPHY_HAS_ED448 = False

CRYPTOGRAPHY_HAS_X25519 = False
CRYPTOGRAPHY_HAS_X25519_FULL = False
CRYPTOGRAPHY_HAS_X448 = False
CRYPTOGRAPHY_HAS_ED25519 = False
CRYPTOGRAPHY_HAS_ED448 = False
"
-------------------------------------------------------------------------
"```python
try:
    import cryptography.hazmat.primitives.asymmetric.x25519
    CRYPTOGRAPHY_HAS_X25519 = True
    try:
        cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.private_bytes
        CRYPTOGRAPHY_HAS_X25519_FULL = True
    except AttributeError:
        CRYPTOGRAPHY_HAS_X25519_FULL = False
except ImportError:
    CRYPTOGRAPHY_HAS_X25519 = False
    CRYPTOGRAPHY_HAS_X25519_FULL = False

try:
    import cryptography.hazmat.primitives.asymmetric.x448
    CRYPTOGRAPHY_HAS_X448 = True
except ImportError:
    CRYPTOGRAPHY_HAS_X448 = False

try:
    import cryptography.hazmat.primitives.asymmetric.ed25519
    CRYPTOGRAPHY_HAS_ED25519 = True
except ImportError:
    CRYPTOGRAPHY_HAS_ED25519 = False

try:
    import cryptography.hazmat.primitives.asymmetric.ed448
    CRYPTOGRAPHY_HAS_ED448 = True
except ImportError:
    CRYPTOGRAPHY_HAS_ED448 = False
```"
-------------------------------------------------------------------------
"
# Test whether we have support for X25519, X448, Ed25519 and/or Ed448
try:
    import cryptography.hazmat.primitives.asymmetric.x25519
    CRYPTOGRAPHY_HAS_X25519 = True
    try:
        cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.private_bytes
        CRYPTOGRAPHY_HAS_X25519_FULL = True
    except AttributeError:
        CRYPTOGRAPHY_HAS_X25519_FULL = False
except ImportError:
    CRYPTOGRAPHY_HAS_X25519 = False
    CRYPTOGRAPHY_HAS_X25519_FULL = False
try:
    import cryptography.hazmat.primitives.asymmetric.x448
    CRYPTOGRAPHY_HAS_X448 = True
except ImportError:
    CRYPTOGRAPHY_HAS_X448 = False
try:
    import cryptography.hazmat.primitives.asymmetric.ed25519
    CRYPTOGRAPHY_HAS_ED25519 = True
except ImportError:
    CRYPTOGRAPHY_HAS_ED25519 = False
try:
    import cryptography.hazmat.primitives.asymmetric.ed448
    CRYPTOGRAPHY_HAS_ED448 = True
except ImportError:
    CRYPTOGRAPHY_HAS_ED448 = False

CRYPTOGRAPHY_HAS_X25519 = False
CRYPTOGRAPHY_HAS_X25519_FULL = False
CRYPTOGRAPHY_HAS_X448 = False
CRYPTOGRAPHY_HAS_ED25519 = False
CRYPTOGRAPHY_HAS_ED448 = False
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64126"
-------------------------------------------------------------------------
=========================================================================
"

def cryptography_key_needs_digest_for_signing(key):
'''Tests whether the given private key requires a digest algorithm for signing.

Ed25519 and Ed448 keys do not; they need None to be passed as the digest algorithm.
'''
if CRYPTOGRAPHY_HAS_ED25519 and isinstance(key, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey):
    return False
if CRYPTOGRAPHY_HAS_ED448 and isinstance(key, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey):
    return False
return True


cryptography_compare_public_keys(key1, key2):
'''Tests whether two public keys are the same.

Needs special logic for Ed25519 and Ed448 keys, since they do not have public_numbers().
'''
if CRYPTOGRAPHY_HAS_ED25519:
    a = isinstance(key1, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey)
    b = isinstance(key2, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey)
    if a or b:
        if not a or not b:
            return False
        a = key1.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        b = key2.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        return a == b
if CRYPTOGRAPHY_HAS_ED448:
    a = isinstance(key1, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey)
    b = isinstance(key2, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey)
    if a or b:
        if not a or not b:
            return False
        a = key1.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        b = key2.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        return a == b
return key1.public_numbers() == key2.public_numbers()
"
-------------------------------------------------------------------------
"```python
def cryptography_key_needs_digest_for_signing(key):
    '''Tests whether the given private key requires a digest algorithm for signing.

    Ed25519 and Ed448 keys do not; they need None to be passed as the digest algorithm.
    '''
    if CRYPTOGRAPHY_HAS_ED25519 and isinstance(key, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey):
        return False
    if CRYPTOGRAPHY_HAS_ED448 and isinstance(key, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey):
        return False
    return True

def cryptography_compare_public_keys(key1, key2):
    '''Tests whether two public keys are the same.

    Needs special logic for Ed25519 and Ed448 keys, since they do not have public_numbers().
    '''
    if CRYPTOGRAPHY_HAS_ED25519:
        a = isinstance(key1, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey)
        b = isinstance(key2, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey)
        if a or b:
            if not a or not b:
                return False
            a = key1.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
            b = key2.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
            return a == b
    if CRYPTOGRAPHY_HAS_ED448:
        a = isinstance(key1, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey)
        b = isinstance(key2, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey)
        if a or b:
            if not a or not b:
                return False
            a = key1.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
            b = key2.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
            return a == b
    return key1.public_numbers() == key2.public_numbers()
```"
-------------------------------------------------------------------------
"

def cryptography_key_needs_digest_for_signing(key):
'''Tests whether the given private key requires a digest algorithm for signing.

Ed25519 and Ed448 keys do not; they need None to be passed as the digest algorithm.
'''
if CRYPTOGRAPHY_HAS_ED25519 and isinstance(key, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey):
    return False
if CRYPTOGRAPHY_HAS_ED448 and isinstance(key, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey):
    return False
return True


cryptography_compare_public_keys(key1, key2):
'''Tests whether two public keys are the same.

Needs special logic for Ed25519 and Ed448 keys, since they do not have public_numbers().
'''
if CRYPTOGRAPHY_HAS_ED25519:
    a = isinstance(key1, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey)
    b = isinstance(key2, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey)
    if a or b:
        if not a or not b:
            return False
        a = key1.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        b = key2.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        return a == b
if CRYPTOGRAPHY_HAS_ED448:
    a = isinstance(key1, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey)
    b = isinstance(key2, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey)
    if a or b:
        if not a or not b:
            return False
        a = key1.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        b = key2.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        return a == b
return key1.public_numbers() == key2.public_numbers()
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64126"
-------------------------------------------------------------------------
=========================================================================
"return crypto_utils.cryptography_compare_public_keys(self.cert.public_key(), self.privatekey.public_key())
"
-------------------------------------------------------------------------
"```python
return crypto_utils.cryptography_compare_public_keys(self.cert.public_key(), self.privatekey.public_key())
```"
-------------------------------------------------------------------------
"return crypto_utils.cryptography_compare_public_keys(self.cert.public_key(), self.privatekey.public_key())
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64126"
-------------------------------------------------------------------------
=========================================================================
"if not crypto_utils.cryptography_compare_public_keys(self.csr.public_key(), self.cert.public_key()):
"
-------------------------------------------------------------------------
"```python
if not ansible.module_utils.cryptography_compare_public_keys(self.csr.public_key(), self.cert.public_key()):
```"
-------------------------------------------------------------------------
"if not crypto_utils.cryptography_compare_public_keys(self.csr.public_key(), self.cert.public_key()):
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64126"
-------------------------------------------------------------------------
=========================================================================
"if crypto_utils.cryptography_key_needs_digest_for_signing(self.privatekey):
    if self.digest is None:
        raise CertificateError(
            'The digest %s is not supported with the cryptography backend' % module.params['selfsigned_digest']
        )
else:
    self.digest = None
"
-------------------------------------------------------------------------
"```python
if crypto_utils.cryptography_key_needs_digest_for_signing(self.privatekey):
    if self.digest is None:
        raise CertificateError(
            'The digest %s is not supported with the cryptography backend' % module.params['selfsigned_digest']
        )
else:
    self.digest = None
```"
-------------------------------------------------------------------------
"if crypto_utils.cryptography_key_needs_digest_for_signing(self.privatekey):
    if self.digest is None:
        raise CertificateError(
            'The digest %s is not supported with the cryptography backend' % module.params['selfsigned_digest']
        )
else:
    self.digest = None
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64126"
-------------------------------------------------------------------------
=========================================================================
"try:
    certificate = cert_builder.sign(
        private_key=self.privatekey, algorithm=self.digest,
        backend=default_backend()
    )
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and self.digest is None:
        module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
"
-------------------------------------------------------------------------
"```python
try:
    certificate = cert_builder.sign(
        private_key=self.privatekey, algorithm=self.digest,
        backend=default_backend()
    )
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and self.digest is None:
        module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
```"
-------------------------------------------------------------------------
"try:
    certificate = cert_builder.sign(
        private_key=self.privatekey, algorithm=self.digest,
        backend=default_backend()
    )
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and self.digest is None:
        module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64126"
-------------------------------------------------------------------------
=========================================================================
"if crypto_utils.cryptography_key_needs_digest_for_signing(self.ca_private_key):
    if self.digest is None:
        raise CertificateError(
            'The digest %s is not supported with the cryptography backend' % module.params['ownca_digest']
        )
else:
    self.digest = None

"
-------------------------------------------------------------------------
"```python
if crypto_utils.cryptography_key_needs_digest_for_signing(self.ca_private_key):
    if self.digest is None:
        raise CertificateError(
            'The digest %s is not supported with the cryptography backend' % module.params['ownca_digest']
        )
else:
    self.digest = None
```"
-------------------------------------------------------------------------
"if crypto_utils.cryptography_key_needs_digest_for_signing(self.ca_private_key):
    if self.digest is None:
        raise CertificateError(
            'The digest %s is not supported with the cryptography backend' % module.params['ownca_digest']
        )
else:
    self.digest = None

"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64126"
-------------------------------------------------------------------------
=========================================================================
"try:
    certificate = cert_builder.sign(
        private_key=self.ca_private_key, algorithm=self.digest,
        backend=default_backend()
    )
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and self.digest is None:
        module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
"
-------------------------------------------------------------------------
"```python
try:
    certificate = cert_builder.sign(
        private_key=self.ca_private_key, algorithm=self.digest,
        backend=default_backend()
    )
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and self.digest is None:
        module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
```"
-------------------------------------------------------------------------
"try:
    certificate = cert_builder.sign(
        private_key=self.ca_private_key, algorithm=self.digest,
        backend=default_backend()
    )
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and self.digest is None:
        module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64126"
-------------------------------------------------------------------------
=========================================================================
"return crypto_utils.cryptography_compare_public_keys(self.cert.public_key(), self.privatekey.public_key())
return crypto_utils.cryptography_compare_public_keys(self.csr.public_key(), self.cert.public_key())
"
-------------------------------------------------------------------------
"```python
return crypto_utils.cryptography_compare_public_keys(self.cert.public_key(), self.privatekey.public_key())

return crypto_utils.cryptography_compare_public_keys(self.csr.public_key(), self.cert.public_key())
```"
-------------------------------------------------------------------------
"return crypto_utils.cryptography_compare_public_keys(self.cert.public_key(), self.privatekey.public_key())
return crypto_utils.cryptography_compare_public_keys(self.csr.public_key(), self.cert.public_key())
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64126"
-------------------------------------------------------------------------
=========================================================================
"self.module = module
"
-------------------------------------------------------------------------
self.module = module
-------------------------------------------------------------------------
"self.module = module
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64126"
-------------------------------------------------------------------------
=========================================================================
"if crypto_utils.cryptography_key_needs_digest_for_signing(self.privatekey):
    if self.digest == 'sha256':
        digest = cryptography.hazmat.primitives.hashes.SHA256()
    elif self.digest == 'sha384':
        digest = cryptography.hazmat.primitives.hashes.SHA384()
    elif self.digest == 'sha512':
        digest = cryptography.hazmat.primitives.hashes.SHA512()
    elif self.digest == 'sha1':
        digest = cryptography.hazmat.primitives.hashes.SHA1()
    elif self.digest == 'md5':
        digest = cryptography.hazmat.primitives.hashes.MD5()
    # FIXME
    else:
        raise CertificateSigningRequestError('Unsupported digest ""{0}""'.format(self.digest))
try:
    self.request = csr.sign(self.privatekey, digest, self.cryptography_backend)
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and digest is None:
        self.module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
"
-------------------------------------------------------------------------
"```python
if crypto_utils.cryptography_key_needs_digest_for_signing(self.privatekey):
    if self.digest == 'sha256':
        digest = cryptography.hazmat.primitives.hashes.SHA256()
    elif self.digest == 'sha384':
        digest = cryptography.hazmat.primitives.hashes.SHA384()
    elif self.digest == 'sha512':
        digest = cryptography.hazmat.primitives.hashes.SHA512()
    elif self.digest == 'sha1':
        digest = cryptography.hazmat.primitives.hashes.SHA1()
    elif self.digest == 'md5':
        digest = cryptography.hazmat.primitives.hashes.MD5()
    else:
        raise CertificateSigningRequestError('Unsupported digest ""{0}""'.format(self.digest))
try:
    self.request = csr.sign(self.privatekey, digest, self.cryptography_backend)
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and digest is None:
        self.module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
```"
-------------------------------------------------------------------------
"if crypto_utils.cryptography_key_needs_digest_for_signing(self.privatekey):
    if self.digest == 'sha256':
        digest = cryptography.hazmat.primitives.hashes.SHA256()
    elif self.digest == 'sha384':
        digest = cryptography.hazmat.primitives.hashes.SHA384()
    elif self.digest == 'sha512':
        digest = cryptography.hazmat.primitives.hashes.SHA512()
    elif self.digest == 'sha1':
        digest = cryptography.hazmat.primitives.hashes.SHA1()
    elif self.digest == 'md5':
        digest = cryptography.hazmat.primitives.hashes.MD5()
    # FIXME
    else:
        raise CertificateSigningRequestError('Unsupported digest ""{0}""'.format(self.digest))
try:
    self.request = csr.sign(self.privatekey, digest, self.cryptography_backend)
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and digest is None:
        self.module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64126"
-------------------------------------------------------------------------
=========================================================================
"
from ansible.module_utils.crypto import (
CRYPTOGRAPHY_HAS_X25519,
CRYPTOGRAPHY_HAS_X25519_FULL,
CRYPTOGRAPHY_HAS_X448,
CRYPTOGRAPHY_HAS_ED25519,
CRYPTOGRAPHY_HAS_ED448,

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.crypto import (
    CRYPTOGRAPHY_HAS_X25519,
    CRYPTOGRAPHY_HAS_X25519_FULL,
    CRYPTOGRAPHY_HAS_X448,
    CRYPTOGRAPHY_HAS_ED25519,
    CRYPTOGRAPHY_HAS_ED448,
)
```"
-------------------------------------------------------------------------
"
from ansible.module_utils.crypto import (
CRYPTOGRAPHY_HAS_X25519,
CRYPTOGRAPHY_HAS_X25519_FULL,
CRYPTOGRAPHY_HAS_X448,
CRYPTOGRAPHY_HAS_ED25519,
CRYPTOGRAPHY_HAS_ED448,

"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64126"
-------------------------------------------------------------------------
=========================================================================
"from cryptography.hazmat.primitives import serialization
"
-------------------------------------------------------------------------
from cryptography.hazmat.primitives import serialization
-------------------------------------------------------------------------
"from cryptography.hazmat.primitives import serialization
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64125"
-------------------------------------------------------------------------
=========================================================================
"
# Test whether we have support for X25519, X448, Ed25519 and/or Ed448
try:
    import cryptography.hazmat.primitives.asymmetric.x25519
    CRYPTOGRAPHY_HAS_X25519 = True
    try:
        cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.private_bytes
        CRYPTOGRAPHY_HAS_X25519_FULL = True
    except AttributeError:
        CRYPTOGRAPHY_HAS_X25519_FULL = False
except ImportError:
    CRYPTOGRAPHY_HAS_X25519 = False
    CRYPTOGRAPHY_HAS_X25519_FULL = False
try:
    import cryptography.hazmat.primitives.asymmetric.x448
    CRYPTOGRAPHY_HAS_X448 = True
except ImportError:
    CRYPTOGRAPHY_HAS_X448 = False
try:
    import cryptography.hazmat.primitives.asymmetric.ed25519
    CRYPTOGRAPHY_HAS_ED25519 = True
except ImportError:
    CRYPTOGRAPHY_HAS_ED25519 = False
try:
    import cryptography.hazmat.primitives.asymmetric.ed448
    CRYPTOGRAPHY_HAS_ED448 = True
except ImportError:
    CRYPTOGRAPHY_HAS_ED448 = False

CRYPTOGRAPHY_HAS_X25519 = False
CRYPTOGRAPHY_HAS_X25519_FULL = False
CRYPTOGRAPHY_HAS_X448 = False
CRYPTOGRAPHY_HAS_ED25519 = False
CRYPTOGRAPHY_HAS_ED448 = False
"
-------------------------------------------------------------------------
"```python
try:
    import cryptography.hazmat.primitives.asymmetric.x25519
    CRYPTOGRAPHY_HAS_X25519 = True
    try:
        cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.private_bytes
        CRYPTOGRAPHY_HAS_X25519_FULL = True
    except AttributeError:
        CRYPTOGRAPHY_HAS_X25519_FULL = False
except ImportError:
    CRYPTOGRAPHY_HAS_X25519 = False
    CRYPTOGRAPHY_HAS_X25519_FULL = False

try:
    import cryptography.hazmat.primitives.asymmetric.x448
    CRYPTOGRAPHY_HAS_X448 = True
except ImportError:
    CRYPTOGRAPHY_HAS_X448 = False

try:
    import cryptography.hazmat.primitives.asymmetric.ed25519
    CRYPTOGRAPHY_HAS_ED25519 = True
except ImportError:
    CRYPTOGRAPHY_HAS_ED25519 = False

try:
    import cryptography.hazmat.primitives.asymmetric.ed448
    CRYPTOGRAPHY_HAS_ED448 = True
except ImportError:
    CRYPTOGRAPHY_HAS_ED448 = False
```"
-------------------------------------------------------------------------
"
# Test whether we have support for X25519, X448, Ed25519 and/or Ed448
try:
    import cryptography.hazmat.primitives.asymmetric.x25519
    CRYPTOGRAPHY_HAS_X25519 = True
    try:
        cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.private_bytes
        CRYPTOGRAPHY_HAS_X25519_FULL = True
    except AttributeError:
        CRYPTOGRAPHY_HAS_X25519_FULL = False
except ImportError:
    CRYPTOGRAPHY_HAS_X25519 = False
    CRYPTOGRAPHY_HAS_X25519_FULL = False
try:
    import cryptography.hazmat.primitives.asymmetric.x448
    CRYPTOGRAPHY_HAS_X448 = True
except ImportError:
    CRYPTOGRAPHY_HAS_X448 = False
try:
    import cryptography.hazmat.primitives.asymmetric.ed25519
    CRYPTOGRAPHY_HAS_ED25519 = True
except ImportError:
    CRYPTOGRAPHY_HAS_ED25519 = False
try:
    import cryptography.hazmat.primitives.asymmetric.ed448
    CRYPTOGRAPHY_HAS_ED448 = True
except ImportError:
    CRYPTOGRAPHY_HAS_ED448 = False

CRYPTOGRAPHY_HAS_X25519 = False
CRYPTOGRAPHY_HAS_X25519_FULL = False
CRYPTOGRAPHY_HAS_X448 = False
CRYPTOGRAPHY_HAS_ED25519 = False
CRYPTOGRAPHY_HAS_ED448 = False
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64125"
-------------------------------------------------------------------------
=========================================================================
"

def cryptography_key_needs_digest_for_signing(key):
'''Tests whether the given private key requires a digest algorithm for signing.

Ed25519 and Ed448 keys do not; they need None to be passed as the digest algorithm.
'''
if CRYPTOGRAPHY_HAS_ED25519 and isinstance(key, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey):
    return False
if CRYPTOGRAPHY_HAS_ED448 and isinstance(key, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey):
    return False
return True


cryptography_compare_public_keys(key1, key2):
'''Tests whether two public keys are the same.

Needs special logic for Ed25519 and Ed448 keys, since they do not have public_numbers().
'''
if CRYPTOGRAPHY_HAS_ED25519:
    a = isinstance(key1, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey)
    b = isinstance(key2, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey)
    if a or b:
        if not a or not b:
            return False
        a = key1.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        b = key2.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        return a == b
if CRYPTOGRAPHY_HAS_ED448:
    a = isinstance(key1, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey)
    b = isinstance(key2, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey)
    if a or b:
        if not a or not b:
            return False
        a = key1.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        b = key2.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        return a == b
return key1.public_numbers() == key2.public_numbers()
"
-------------------------------------------------------------------------
"```python
def cryptography_key_needs_digest_for_signing(key):
    '''Tests whether the given private key requires a digest algorithm for signing.

    Ed25519 and Ed448 keys do not; they need None to be passed as the digest algorithm.
    '''
    if CRYPTOGRAPHY_HAS_ED25519 and isinstance(key, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey):
        return False
    if CRYPTOGRAPHY_HAS_ED448 and isinstance(key, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey):
        return False
    return True


def cryptography_compare_public_keys(key1, key2):
    '''Tests whether two public keys are the same.

    Needs special logic for Ed25519 and Ed448 keys, since they do not have public_numbers().
    '''
    if CRYPTOGRAPHY_HAS_ED25519:
        a = isinstance(key1, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey)
        b = isinstance(key2, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey)
        if a or b:
            if not a or not b:
                return False
            a = key1.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
            b = key2.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
            return a == b
    if CRYPTOGRAPHY_HAS_ED448:
        a = isinstance(key1, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey)
        b = isinstance(key2, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey)
        if a or b:
            if not a or not b:
                return False
            a = key1.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
            b = key2.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
            return a == b
    return key1.public_numbers() == key2.public_numbers()
```"
-------------------------------------------------------------------------
"

def cryptography_key_needs_digest_for_signing(key):
'''Tests whether the given private key requires a digest algorithm for signing.

Ed25519 and Ed448 keys do not; they need None to be passed as the digest algorithm.
'''
if CRYPTOGRAPHY_HAS_ED25519 and isinstance(key, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey):
    return False
if CRYPTOGRAPHY_HAS_ED448 and isinstance(key, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey):
    return False
return True


cryptography_compare_public_keys(key1, key2):
'''Tests whether two public keys are the same.

Needs special logic for Ed25519 and Ed448 keys, since they do not have public_numbers().
'''
if CRYPTOGRAPHY_HAS_ED25519:
    a = isinstance(key1, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey)
    b = isinstance(key2, cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey)
    if a or b:
        if not a or not b:
            return False
        a = key1.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        b = key2.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        return a == b
if CRYPTOGRAPHY_HAS_ED448:
    a = isinstance(key1, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey)
    b = isinstance(key2, cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey)
    if a or b:
        if not a or not b:
            return False
        a = key1.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        b = key2.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw)
        return a == b
return key1.public_numbers() == key2.public_numbers()
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64125"
-------------------------------------------------------------------------
=========================================================================
"return crypto_utils.cryptography_compare_public_keys(self.cert.public_key(), self.privatekey.public_key())
"
-------------------------------------------------------------------------
"```python
return crypto_utils.cryptography_compare_public_keys(self.cert.public_key(), self.privatekey.public_key())
```"
-------------------------------------------------------------------------
"return crypto_utils.cryptography_compare_public_keys(self.cert.public_key(), self.privatekey.public_key())
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64125"
-------------------------------------------------------------------------
=========================================================================
"if not crypto_utils.cryptography_compare_public_keys(self.csr.public_key(), self.cert.public_key()):
"
-------------------------------------------------------------------------
"```python
if not crypto_utils.cryptography_compare_public_keys(self.csr.public_key(), self.cert.public_key()):
```"
-------------------------------------------------------------------------
"if not crypto_utils.cryptography_compare_public_keys(self.csr.public_key(), self.cert.public_key()):
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64125"
-------------------------------------------------------------------------
=========================================================================
"if crypto_utils.cryptography_key_needs_digest_for_signing(self.privatekey):
    if self.digest is None:
        raise CertificateError(
            'The digest %s is not supported with the cryptography backend' % module.params['selfsigned_digest']
        )
else:
    self.digest = None
"
-------------------------------------------------------------------------
"if crypto_utils.cryptography_key_needs_digest_for_signing(self.privatekey):
    if self.digest is None:
        raise CertificateError(
            'The digest %s is not supported with the cryptography backend' % module.params['selfsigned_digest']
        )
else:
    self.digest = None"
-------------------------------------------------------------------------
"if crypto_utils.cryptography_key_needs_digest_for_signing(self.privatekey):
    if self.digest is None:
        raise CertificateError(
            'The digest %s is not supported with the cryptography backend' % module.params['selfsigned_digest']
        )
else:
    self.digest = None
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64125"
-------------------------------------------------------------------------
=========================================================================
"try:
    certificate = cert_builder.sign(
        private_key=self.privatekey, algorithm=self.digest,
        backend=default_backend()
    )
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and self.digest is None:
        module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
"
-------------------------------------------------------------------------
"```python
try:
    certificate = cert_builder.sign(
        private_key=self.privatekey, algorithm=self.digest,
        backend=default_backend()
    )
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and self.digest is None:
        module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
```"
-------------------------------------------------------------------------
"try:
    certificate = cert_builder.sign(
        private_key=self.privatekey, algorithm=self.digest,
        backend=default_backend()
    )
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and self.digest is None:
        module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64125"
-------------------------------------------------------------------------
=========================================================================
"if crypto_utils.cryptography_key_needs_digest_for_signing(self.ca_private_key):
    if self.digest is None:
        raise CertificateError(
            'The digest %s is not supported with the cryptography backend' % module.params['ownca_digest']
        )
else:
    self.digest = None

"
-------------------------------------------------------------------------
"```python
if crypto_utils.cryptography_key_needs_digest_for_signing(self.ca_private_key):
    if self.digest is None:
        raise CertificateError(
            'The digest %s is not supported with the cryptography backend' % module.params['ownca_digest']
        )
else:
    self.digest = None
```"
-------------------------------------------------------------------------
"if crypto_utils.cryptography_key_needs_digest_for_signing(self.ca_private_key):
    if self.digest is None:
        raise CertificateError(
            'The digest %s is not supported with the cryptography backend' % module.params['ownca_digest']
        )
else:
    self.digest = None

"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64125"
-------------------------------------------------------------------------
=========================================================================
"try:
    certificate = cert_builder.sign(
        private_key=self.ca_private_key, algorithm=self.digest,
        backend=default_backend()
    )
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and self.digest is None:
        module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
"
-------------------------------------------------------------------------
"```python
try:
    certificate = cert_builder.sign(
        private_key=self.ca_private_key, algorithm=self.digest,
        backend=default_backend()
    )
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and self.digest is None:
        module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
```"
-------------------------------------------------------------------------
"try:
    certificate = cert_builder.sign(
        private_key=self.ca_private_key, algorithm=self.digest,
        backend=default_backend()
    )
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and self.digest is None:
        module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64125"
-------------------------------------------------------------------------
=========================================================================
"return crypto_utils.cryptography_compare_public_keys(self.cert.public_key(), self.privatekey.public_key())
return crypto_utils.cryptography_compare_public_keys(self.csr.public_key(), self.cert.public_key())
"
-------------------------------------------------------------------------
"```python
return crypto_utils.cryptography_compare_public_keys(self.cert.public_key(), self.privatekey.public_key())

return crypto_utils.cryptography_compare_public_keys(self.csr.public_key(), self.cert.public_key())
```"
-------------------------------------------------------------------------
"return crypto_utils.cryptography_compare_public_keys(self.cert.public_key(), self.privatekey.public_key())
return crypto_utils.cryptography_compare_public_keys(self.csr.public_key(), self.cert.public_key())
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64125"
-------------------------------------------------------------------------
=========================================================================
"self.module = module
"
-------------------------------------------------------------------------
self.module = module
-------------------------------------------------------------------------
"self.module = module
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64125"
-------------------------------------------------------------------------
=========================================================================
"if crypto_utils.cryptography_key_needs_digest_for_signing(self.privatekey):
    if self.digest == 'sha256':
        digest = cryptography.hazmat.primitives.hashes.SHA256()
    elif self.digest == 'sha384':
        digest = cryptography.hazmat.primitives.hashes.SHA384()
    elif self.digest == 'sha512':
        digest = cryptography.hazmat.primitives.hashes.SHA512()
    elif self.digest == 'sha1':
        digest = cryptography.hazmat.primitives.hashes.SHA1()
    elif self.digest == 'md5':
        digest = cryptography.hazmat.primitives.hashes.MD5()
    # FIXME
    else:
        raise CertificateSigningRequestError('Unsupported digest ""{0}""'.format(self.digest))
try:
    self.request = csr.sign(self.privatekey, digest, self.cryptography_backend)
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and digest is None:
        self.module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
"
-------------------------------------------------------------------------
"```python
if crypto_utils.cryptography_key_needs_digest_for_signing(self.privatekey):
    if self.digest == 'sha256':
        digest = cryptography.hazmat.primitives.hashes.SHA256()
    elif self.digest == 'sha384':
        digest = cryptography.hazmat.primitives.hashes.SHA384()
    elif self.digest == 'sha512':
        digest = cryptography.hazmat.primitives.hashes.SHA512()
    elif self.digest == 'sha1':
        digest = cryptography.hazmat.primitives.hashes.SHA1()
    elif self.digest == 'md5':
        digest = cryptography.hazmat.primitives.hashes.MD5()
    # FIXME
    else:
        raise CertificateSigningRequestError('Unsupported digest ""{0}""'.format(self.digest))

try:
    self.request = csr.sign(self.privatekey, digest, self.cryptography_backend)
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and digest is None:
        self.module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
```"
-------------------------------------------------------------------------
"if crypto_utils.cryptography_key_needs_digest_for_signing(self.privatekey):
    if self.digest == 'sha256':
        digest = cryptography.hazmat.primitives.hashes.SHA256()
    elif self.digest == 'sha384':
        digest = cryptography.hazmat.primitives.hashes.SHA384()
    elif self.digest == 'sha512':
        digest = cryptography.hazmat.primitives.hashes.SHA512()
    elif self.digest == 'sha1':
        digest = cryptography.hazmat.primitives.hashes.SHA1()
    elif self.digest == 'md5':
        digest = cryptography.hazmat.primitives.hashes.MD5()
    # FIXME
    else:
        raise CertificateSigningRequestError('Unsupported digest ""{0}""'.format(self.digest))
try:
    self.request = csr.sign(self.privatekey, digest, self.cryptography_backend)
except TypeError as e:
    if str(e) == 'Algorithm must be a registered hash algorithm.' and digest is None:
        self.module.fail_json(msg='Signing with Ed25519 and Ed448 keys requires cryptography 2.8 or newer.')
    raise
"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64125"
-------------------------------------------------------------------------
=========================================================================
"
from ansible.module_utils.crypto import (
CRYPTOGRAPHY_HAS_X25519,
CRYPTOGRAPHY_HAS_X25519_FULL,
CRYPTOGRAPHY_HAS_X448,
CRYPTOGRAPHY_HAS_ED25519,
CRYPTOGRAPHY_HAS_ED448,

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.crypto import (
    CRYPTOGRAPHY_HAS_X25519,
    CRYPTOGRAPHY_HAS_X25519_FULL,
    CRYPTOGRAPHY_HAS_X448,
    CRYPTOGRAPHY_HAS_ED25519,
    CRYPTOGRAPHY_HAS_ED448,
)
```"
-------------------------------------------------------------------------
"
from ansible.module_utils.crypto import (
CRYPTOGRAPHY_HAS_X25519,
CRYPTOGRAPHY_HAS_X25519_FULL,
CRYPTOGRAPHY_HAS_X448,
CRYPTOGRAPHY_HAS_ED25519,
CRYPTOGRAPHY_HAS_ED448,

"
-------------------------------------------------------------------------
"Recom
PRs: 63984, 64125"
-------------------------------------------------------------------------
=========================================================================
"
notes:
- Return values I(out) and I(err) have been deprecated and will be removed in Ansible 2.14. Use I(stdout) and I(stderr) instead.
"
-------------------------------------------------------------------------
"'''
 
RETURN = '''
Return values `out` and `err` have been deprecated and will be removed in Ansible 2.14. Use `stdout` and `stderr` instead.
'''"
-------------------------------------------------------------------------
"module.exit_json(
    changed=False,
    rc=rc,
    stdout=out,
    stderr=err)
    rc=rc,
    stdout=out,
    stderr=err,
"
-------------------------------------------------------------------------
"Recom
PRs: 63467, 64120"
-------------------------------------------------------------------------
=========================================================================
"rc=rc,
out=out, err=err,  # Deprecated
stdout=out, stderr=err)
"
-------------------------------------------------------------------------
"```python
rc = rc
stdout = out
stderr = err
```"
-------------------------------------------------------------------------
"out=out, err=err,
stdout=out, stderr=err)
changed=True,
msg=out, rc=rc,
err=err,
stdout=out, stderr=err)
"
-------------------------------------------------------------------------
"Recom
PRs: 63467, 64120"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_bytes
from ansible.utils.collection_loader import AnsibleCollectionLoader
from .module_args import AnsibleModuleImportError, AnsibleModuleNotInitialized, get_argument_spec
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils._text import to_bytes
from ansible.utils.collection_loader import AnsibleCollectionLoader
from .module_args import AnsibleModuleImportError, AnsibleModuleNotInitialized, get_argument_spec
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes
from ansible.utils.collection_loader import AnsibleCollectionLoader
from .module_args import AnsibleModuleImportError, AnsibleModuleNotInitialized, get_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 63932, 64115"
-------------------------------------------------------------------------
=========================================================================
"if not found_basic:
"
-------------------------------------------------------------------------
if not found_basic:
-------------------------------------------------------------------------
"if not found_basic:
"
-------------------------------------------------------------------------
"Recom
PRs: 63932, 64115"
-------------------------------------------------------------------------
=========================================================================
"code='multiple-csharp-utils-per-requires',
"
-------------------------------------------------------------------------
"```python
class ModuleValidator(Validator):
    if len(module_list) > 1:
        self.reporter.error(
            path=self.object_path,
            msg='multiple-csharp-utils-per-requires'
        )
        continue
```"
-------------------------------------------------------------------------
"code='multiple-csharp-utils-per-requires',
"
-------------------------------------------------------------------------
"Recom
PRs: 63932, 64115"
-------------------------------------------------------------------------
=========================================================================
"code='missing-module-utils-import-csharp-requirements',
"
-------------------------------------------------------------------------
"```python
code='missing-module-utils-import-csharp-requirements',
```"
-------------------------------------------------------------------------
"code='missing-module-utils-import-csharp-requirements',
"
-------------------------------------------------------------------------
"Recom
PRs: 63932, 64115"
-------------------------------------------------------------------------
=========================================================================
"spec, args, kwargs = get_argument_spec(self.path, self.collection)
pt AnsibleModuleNotInitialized:
self.reporter.error(
    path=self.object_path,
    code='ansible-module-not-initialized',
    msg=""Execution of the module did not result in initialization of AnsibleModule"",
)
return
"
-------------------------------------------------------------------------
"```python
spec, args, kwargs = get_argument_spec(self.path, self.collection)
except AnsibleModuleNotInitialized:
    self.reporter.error(
        path=self.object_path,
        code='ansible-module-not-initialized',
        msg=""Execution of the module did not result in initialization of AnsibleModule""
    )
    return
```"
-------------------------------------------------------------------------
"spec, args, kwargs = get_argument_spec(self.path, self.collection)
pt AnsibleModuleNotInitialized:
self.reporter.error(
    path=self.object_path,
    code='ansible-module-not-initialized',
    msg=""Execution of the module did not result in initialization of AnsibleModule"",
)
return
"
-------------------------------------------------------------------------
"Recom
PRs: 63932, 64115"
-------------------------------------------------------------------------
=========================================================================
"def setup_collection_loader():
def get_source(self, fullname):
    mod = sys.modules.get(fullname)
    if not mod:
        mod = self.load_module(fullname)

    with open(to_bytes(mod.__file__), 'rb') as mod_file:
        source = mod_file.read()

    return source

def get_code(self, fullname):
    return compile(source=self.get_source(fullname), filename=self.get_filename(fullname), mode='exec', flags=0, dont_inherit=True)

def is_package(self, fullname):
    return self.get_filename(fullname).endswith('__init__.py')

def get_filename(self, fullname):
    mod = sys.modules.get(fullname) or self.load_module(fullname)

    return mod.__file__

# monkeypatch collection loader to work with runpy
# remove this (and the associated code above) once implemented natively in the collection loader
AnsibleCollectionLoader.get_source = get_source
AnsibleCollectionLoader.get_code = get_code
AnsibleCollectionLoader.is_package = is_package
AnsibleCollectionLoader.get_filename = get_filename

collection_loader = AnsibleCollectionLoader()

# allow importing code from collections when testing a collection
# noinspection PyCallingNonCallable
sys.meta_path.insert(0, collection_loader)


"
-------------------------------------------------------------------------
"```python
def setup_collection_loader():
    def get_source(self, fullname):
        mod = sys.modules.get(fullname)
        if not mod:
            mod = self.load_module(fullname)

        with open(to_bytes(mod.__file__), 'rb') as mod_file:
            source = mod_file.read()

        return source

    def get_code(self, fullname):
        return compile(source=self.get_source(fullname), filename=self.get_filename(fullname), mode='exec', flags=0, dont_inherit=True)

    def is_package(self, fullname):
        return self.get_filename(fullname).endswith('__init__.py')

    def get_filename(self, fullname):
        mod = sys.modules.get(fullname) or self.load_module(fullname)

        return mod.__file__

    # monkeypatch collection loader to work with runpy
    # remove this (and the associated code above) once implemented natively in the collection loader
    AnsibleCollectionLoader.get_source = get_source
    AnsibleCollectionLoader.get_code = get_code
    AnsibleCollectionLoader.is_package = is_package
    AnsibleCollectionLoader.get_filename = get_filename

    collection_loader = AnsibleCollectionLoader()

    # allow importing code from collections when testing a collection
    # noinspection PyCallingNonCallable
    sys.meta_path.insert(0, collection_loader)
```  "
-------------------------------------------------------------------------
"def setup_collection_loader():
def get_source(self, fullname):
    mod = sys.modules.get(fullname)
    if not mod:
        mod = self.load_module(fullname)

    with open(to_bytes(mod.__file__), 'rb') as mod_file:
        source = mod_file.read()

    return source

def get_code(self, fullname):
    return compile(source=self.get_source(fullname), filename=self.get_filename(fullname), mode='exec', flags=0, dont_inherit=True)

def is_package(self, fullname):
    return self.get_filename(fullname).endswith('__init__.py')

def get_filename(self, fullname):
    mod = sys.modules.get(fullname) or self.load_module(fullname)

    return mod.__file__

# monkeypatch collection loader to work with runpy
# remove this (and the associated code above) once implemented natively in the collection loader
AnsibleCollectionLoader.get_source = get_source
AnsibleCollectionLoader.get_code = get_code
AnsibleCollectionLoader.is_package = is_package
AnsibleCollectionLoader.get_filename = get_filename

collection_loader = AnsibleCollectionLoader()

# allow importing code from collections when testing a collection
# noinspection PyCallingNonCallable
sys.meta_path.insert(0, collection_loader)


"
-------------------------------------------------------------------------
"Recom
PRs: 63932, 64115"
-------------------------------------------------------------------------
=========================================================================
"if args.collection:
    setup_collection_loader()

"
-------------------------------------------------------------------------
"```python
if args.collection:
    setup_collection_loader()
```"
-------------------------------------------------------------------------
"if args.collection:
    setup_collection_loader()

"
-------------------------------------------------------------------------
"Recom
PRs: 63932, 64115"
-------------------------------------------------------------------------
=========================================================================
"
# recurse into subdirectory
changed = changed or copy_common_dirs(os.path.join(src, item), os.path.join(dest, item), module)
"
-------------------------------------------------------------------------
"```python
# recurse into subdirectory
changed = changed or copy_common_dirs(os.path.join(src, item), os.path.join(dest, item), module)
```"
-------------------------------------------------------------------------
"
# recurse into subdirectory
changed = changed or copy_common_dirs(os.path.join(src, item), os.path.join(dest, item), module)
"
-------------------------------------------------------------------------
"Recom
PRs: 58323, 64112"
-------------------------------------------------------------------------
=========================================================================
"
# recurse into subdirectory
changed = changed or copy_common_dirs(os.path.join(src, item), os.path.join(dest, item), module)
"
-------------------------------------------------------------------------
"```python
# recurse into subdirectory
changed = changed or copy_common_dirs(os.path.join(src, item), os.path.join(dest, item), module)
```"
-------------------------------------------------------------------------
"
# recurse into subdirectory
changed = changed or copy_common_dirs(os.path.join(src, item), os.path.join(dest, item), module)
"
-------------------------------------------------------------------------
"Recom
PRs: 58323, 64111"
-------------------------------------------------------------------------
=========================================================================
"def _assert_fetch_url_success(response, info, allow_redirect=False, allow_client_error=True, allow_server_error=True):
if info['status'] < 0:
    raise ModuleFailException(msg=""Failure downloading %s, %s"" % (info['url'], info['msg']))

if (300 <= info['status'] < 400 and not allow_redirect) or \
   (400 <= info['status'] < 500 and not allow_client_error) or \
   (info['status'] >= 500 and not allow_server_error):
    raise ModuleFailException(""ACME request failed: CODE: {0} MGS: {1} RESULT: {2}"".format(info['status'], info['msg'], response))


"
-------------------------------------------------------------------------
"```python
def _assert_fetch_url_success(response, info, allow_redirect=False, allow_client_error=True, allow_server_error=True):
    if info['status'] < 0:
        raise ModuleFailException(msg=""Failure downloading %s, %s"" % (info['url'], info['msg']))

    if (300 <= info['status'] < 400 and not allow_redirect) or \
       (400 <= info['status'] < 500 and not allow_client_error) or \
       (info['status'] >= 500 and not allow_server_error):
        raise ModuleFailException(""ACME request failed: CODE: {0} MGS: {1} RESULT: {2}"".format(info['status'], info['msg'], response))
```"
-------------------------------------------------------------------------
"def _assert_fetch_url_success(response, info, allow_redirect=False, allow_client_error=True, allow_server_error=True):
if info['status'] < 0:
    raise ModuleFailException(msg=""Failure downloading %s, %s"" % (info['url'], info['msg']))

if (300 <= info['status'] < 400 and not allow_redirect) or \
   (400 <= info['status'] < 500 and not allow_client_error) or \
   (info['status'] >= 500 and not allow_server_error):
    raise ModuleFailException(""ACME request failed: CODE: {0} MGS: {1} RESULT: {2}"".format(info['status'], info['msg'], response))


"
-------------------------------------------------------------------------
"Recom
PRs: 63140, 64072"
-------------------------------------------------------------------------
=========================================================================
"_assert_fetch_url_success(resp, info)
"
-------------------------------------------------------------------------
"```python
_assert_fetch_url_success(resp, info)
```"
-------------------------------------------------------------------------
"_assert_fetch_url_success(resp, info)
"
-------------------------------------------------------------------------
"Recom
PRs: 63140, 64072"
-------------------------------------------------------------------------
=========================================================================
"_assert_fetch_url_success(resp, info)

"
-------------------------------------------------------------------------
"```python
_assert_fetch_url_success(resp, info)
```"
-------------------------------------------------------------------------
"_assert_fetch_url_success(resp, info)

"
-------------------------------------------------------------------------
"Recom
PRs: 63140, 64072"
-------------------------------------------------------------------------
=========================================================================
"if fail_on_error and (info['status'] < 200 or info['status'] >= 400):
"
-------------------------------------------------------------------------
"```python
if fail_on_error and (info['status'] < 200 or info['status'] >= 400):
```"
-------------------------------------------------------------------------
"if fail_on_error and (info['status'] < 200 or info['status'] >= 400):
"
-------------------------------------------------------------------------
"Recom
PRs: 63140, 64072"
-------------------------------------------------------------------------
=========================================================================
"def _assert_fetch_url_success(response, info, allow_redirect=False, allow_client_error=True, allow_server_error=True):
if info['status'] < 0:
    raise ModuleFailException(msg=""Failure downloading %s, %s"" % (info['url'], info['msg']))

if (300 <= info['status'] < 400 and not allow_redirect) or \
   (400 <= info['status'] < 500 and not allow_client_error) or \
   (info['status'] >= 500 and not allow_server_error):
    raise ModuleFailException(""ACME request failed: CODE: {0} MGS: {1} RESULT: {2}"".format(info['status'], info['msg'], response))


"
-------------------------------------------------------------------------
"```python
def _assert_fetch_url_success(response, info, allow_redirect=False, allow_client_error=True, allow_server_error=True):
    if info['status'] < 0:
        raise ModuleFailException(msg=""Failure downloading %s, %s"" % (info['url'], info['msg']))

    if (300 <= info['status'] < 400 and not allow_redirect) or \
       (400 <= info['status'] < 500 and not allow_client_error) or \
       (info['status'] >= 500 and not allow_server_error):
        raise ModuleFailException(""ACME request failed: CODE: {0} MSG: {1} RESULT: {2}"".format(info['status'], info['msg'], response))
```"
-------------------------------------------------------------------------
"def _assert_fetch_url_success(response, info, allow_redirect=False, allow_client_error=True, allow_server_error=True):
if info['status'] < 0:
    raise ModuleFailException(msg=""Failure downloading %s, %s"" % (info['url'], info['msg']))

if (300 <= info['status'] < 400 and not allow_redirect) or \
   (400 <= info['status'] < 500 and not allow_client_error) or \
   (info['status'] >= 500 and not allow_server_error):
    raise ModuleFailException(""ACME request failed: CODE: {0} MGS: {1} RESULT: {2}"".format(info['status'], info['msg'], response))


"
-------------------------------------------------------------------------
"Recom
PRs: 63140, 64071"
-------------------------------------------------------------------------
=========================================================================
"_assert_fetch_url_success(resp, info)
"
-------------------------------------------------------------------------
"```python
assert resp and info
```"
-------------------------------------------------------------------------
"_assert_fetch_url_success(resp, info)
"
-------------------------------------------------------------------------
"Recom
PRs: 63140, 64071"
-------------------------------------------------------------------------
=========================================================================
"_assert_fetch_url_success(resp, info)

"
-------------------------------------------------------------------------
"```python
_assert_fetch_url_success(resp, info)
```"
-------------------------------------------------------------------------
"_assert_fetch_url_success(resp, info)

"
-------------------------------------------------------------------------
"Recom
PRs: 63140, 64071"
-------------------------------------------------------------------------
=========================================================================
"if fail_on_error and (info['status'] < 200 or info['status'] >= 400):
"
-------------------------------------------------------------------------
"```python
if fail_on_error and (200 > info['status'] or info['status'] >= 400):
```"
-------------------------------------------------------------------------
"if fail_on_error and (info['status'] < 200 or info['status'] >= 400):
"
-------------------------------------------------------------------------
"Recom
PRs: 63140, 64071"
-------------------------------------------------------------------------
=========================================================================
"for attr in attributes if getattr(value, attr, None) is not None
"
-------------------------------------------------------------------------
"for attr in attributes:
    if getattr(value, attr, None) is not None:"
-------------------------------------------------------------------------
"for attr in attributes if getattr(value, attr, None) is not None
"
-------------------------------------------------------------------------
"Recom
PRs: 63908, 63953"
-------------------------------------------------------------------------
=========================================================================
"
# Add fiber chanel disk
- name: Create disk
ovirt_disk:
  name: fcp_disk
  host: my_host
  logical_unit:
      id: 3600a09803830447a4f244c4657597777
      storage_type: fcp
"
-------------------------------------------------------------------------
"```python
# Add fiber chanel disk
- name: Create disk
  ovirt_disk:
    name: fcp_disk
    host: my_host
    logical_unit:
      id: 3600a09803830447a4f244c4657597777
      storage_type: fcp
```"
-------------------------------------------------------------------------
"
# Add fiber chanel disk
- name: Create disk
ovirt_disk:
  name: fcp_disk
  host: my_host
  logical_unit:
      id: 3600a09803830447a4f244c4657597777
      storage_type: fcp
"
-------------------------------------------------------------------------
"Recom
PRs: 63857, 63898"
-------------------------------------------------------------------------
=========================================================================
"hosts_service = self._connection.system_service().hosts_service()
"
-------------------------------------------------------------------------
"```python
hosts_service = connection.system_service().hosts_service()
```"
-------------------------------------------------------------------------
"hosts_service = self._connection.system_service().hosts_service()
"
-------------------------------------------------------------------------
"Recom
PRs: 63857, 63898"
-------------------------------------------------------------------------
=========================================================================
"host=otypes.Host(
    id=get_id_by_name(hosts_service, self._module.params.get('host'))
) if self.param('host') else None,
"
-------------------------------------------------------------------------
"```python
host = otypes.Host(
    id=get_id_by_name(hosts_service, self._module.params.get('host'))
) if self._module.params.get('host') else None
```"
-------------------------------------------------------------------------
"host=otypes.Host(
    id=get_id_by_name(hosts_service, self._module.params.get('host'))
) if self.param('host') else None,
"
-------------------------------------------------------------------------
"Recom
PRs: 63857, 63898"
-------------------------------------------------------------------------
=========================================================================
"import traceback
XENAPI_IMP_ERR = None
HAS_XENAPI = False
XENAPI_IMP_ERR = traceback.format_exc()
 ansible.module_utils.basic import env_fallback, missing_required_lib
"
-------------------------------------------------------------------------
"```python
__metaclass__ = type
import atexit
import time
import re
import traceback

XENAPI_IMP_ERR = None
HAS_XENAPI = False
XENAPI_IMP_ERR = traceback.format_exc()

from ansible.module_utils.basic import env_fallback, missing_required_lib
```"
-------------------------------------------------------------------------
"import traceback
XENAPI_IMP_ERR = None
HAS_XENAPI = False
XENAPI_IMP_ERR = traceback.format_exc()
 ansible.module_utils.basic import env_fallback, missing_required_lib
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63816"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(changed=False, msg=missing_required_lib(""XenAPI""), exception=XENAPI_IMP_ERR)
"
-------------------------------------------------------------------------
"```python
module.fail_json(changed=False, msg=missing_required_lib(""XenAPI""))
```"
-------------------------------------------------------------------------
"module.fail_json(changed=False, msg=missing_required_lib(""XenAPI""), exception=XENAPI_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63816"
-------------------------------------------------------------------------
=========================================================================
"short_description: Manages virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
"```python
ANSIBLE_METADATA = {'metadata_version': '1.1',
 DOCUMENTATION = r'''
 ---
 module: xenserver_guest
 short_description: Manages virtual machines running on Citrix Hypervisor/XenServer host or pool
''' 
```"
-------------------------------------------------------------------------
"short_description: Manages virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63816"
-------------------------------------------------------------------------
=========================================================================
"- Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
- 'To acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside
Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
"
-------------------------------------------------------------------------
"```python
# Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
# To acquire XenAPI Python library, just run 'pip install XenAPI' on your Ansible Control Node. The library can also be found inside
# Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
# Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
```"
-------------------------------------------------------------------------
"- Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
- 'To acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside
Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63816"
-------------------------------------------------------------------------
=========================================================================
"values C(none) and C(dhcp) have same effect. More info here:
https://www.citrix.com/community/citrix-developer/citrix-hypervisor-developer/citrix-hypervisor-developing-products/citrix-hypervisor-staticip.html'
useful for bootstraping newly deployed VMs, much less for reconfiguring existing ones. More info here:
https://support.citrix.com/article/CTX226713'
"
-------------------------------------------------------------------------
"values `none` and `dhcp` have the same effect. More info here:
https://www.citrix.com/community/citrix-developer/citrix-hypervisor-developer/citrix-hypervisor-developing-products/citrix-hypervisor-staticip.html
useful for bootstraping newly deployed VMs, much less for reconfiguring existing ones. More info here:
https://support.citrix.com/article/CTX226713"
-------------------------------------------------------------------------
"values C(none) and C(dhcp) have same effect. More info here:
https://www.citrix.com/community/citrix-developer/citrix-hypervisor-developer/citrix-hypervisor-developing-products/citrix-hypervisor-staticip.html'
useful for bootstraping newly deployed VMs, much less for reconfiguring existing ones. More info here:
https://support.citrix.com/article/CTX226713'
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63816"
-------------------------------------------------------------------------
=========================================================================
"short_description: Gathers information for virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
"```python
ANSIBLE_METADATA = {'metadata_version': '1.1',
 DOCUMENTATION = r'''
 ---
 module: xenserver_guest_info
 short_description: Gathers information for virtual machines running on Citrix Hypervisor/XenServer host or pool
 version_added: '2.8'
''',
 REQUIRED_TOOLS = ['common', '__future__', 'pytest', 'FakeAnsibleModule']
```"
-------------------------------------------------------------------------
"short_description: Gathers facts for virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63816"
-------------------------------------------------------------------------
=========================================================================
"- Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
- 'To acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside
Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
"
-------------------------------------------------------------------------
"```python
# Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0

# To acquire XenAPI Python library, just run 'pip install XenAPI' on your Ansible Control Node. 
# The library can also be found inside Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). 
# Copy the XenAPI.py file from the SDK to your Python site-packages on your Ansible Control Node to use it.
# The latest version of the library can also be acquired from GitHub.
```"
-------------------------------------------------------------------------
"- Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
- 'To acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside
Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63816"
-------------------------------------------------------------------------
=========================================================================
"short_description: Manages power states of virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
short_description: Manages power states of virtual machines running on Citrix Hypervisor/XenServer host or pool
-------------------------------------------------------------------------
"short_description: Manages power states of virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63816"
-------------------------------------------------------------------------
=========================================================================
"- Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
- 'To acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside
Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
"
-------------------------------------------------------------------------
"Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.

To acquire XenAPI Python library, just run `pip install XenAPI` on your Ansible Control Node. The library can also be found inside Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub."
-------------------------------------------------------------------------
"- Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
- 'To acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside
Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63816"
-------------------------------------------------------------------------
=========================================================================
"assert 'Failed to import the required Python library (XenAPI) on' in exc_info.value.kwargs['msg']
"
-------------------------------------------------------------------------
"```python
assert 'Failed to import the required Python library (XenAPI) on' in exc_info.value.kwargs['msg']
```"
-------------------------------------------------------------------------
"assert 'Failed to import the required Python library (XenAPI) on' in exc_info.value.kwargs['msg']
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63816"
-------------------------------------------------------------------------
=========================================================================
"import traceback
XENAPI_IMP_ERR = None
HAS_XENAPI = False
XENAPI_IMP_ERR = traceback.format_exc()
 ansible.module_utils.basic import env_fallback, missing_required_lib
"
-------------------------------------------------------------------------
"```python
__metaclass__ = type
import traceback
XENAPI_IMP_ERR = None
HAS_XENAPI = False
XENAPI_IMP_ERR = traceback.format_exc()
from ansible.module_utils.basic import env_fallback, missing_required_lib
```"
-------------------------------------------------------------------------
"import traceback
XENAPI_IMP_ERR = None
HAS_XENAPI = False
XENAPI_IMP_ERR = traceback.format_exc()
 ansible.module_utils.basic import env_fallback, missing_required_lib
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63815"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(changed=False, msg=missing_required_lib(""XenAPI""), exception=XENAPI_IMP_ERR)
"
-------------------------------------------------------------------------
"```python
module.fail_json(changed=False, msg=missing_required_lib(""XenAPI""), exception=XENAPI_IMP_ERR)
```"
-------------------------------------------------------------------------
"module.fail_json(changed=False, msg=missing_required_lib(""XenAPI""), exception=XENAPI_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63815"
-------------------------------------------------------------------------
=========================================================================
"short_description: Manages virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
"ANSIBLE_METADATA = {'metadata_version': '1.1',
 DOCUMENTATION = r'''
 ---
 module: xenserver_guest
 short_description: Manages virtual machines running on Citrix Hypervisor/XenServer host or pool
```"
-------------------------------------------------------------------------
"short_description: Manages virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63815"
-------------------------------------------------------------------------
=========================================================================
"- Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
- 'To acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside
Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
"
-------------------------------------------------------------------------
"```python
# Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
# To acquire XenAPI Python library, just run `pip install XenAPI` on your Ansible Control Node. The library
# can also be found inside Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py
# file from the SDK to your Python site-packages on your Ansible Control Node to use it. Latest version of the
# library can also be acquired from GitHub: https://raw.githubusercontent.com/xapi-project/xen-api/master/scripts/examples/python/XenAPI.py
```  "
-------------------------------------------------------------------------
"- Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
- 'To acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside
Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63815"
-------------------------------------------------------------------------
=========================================================================
"values C(none) and C(dhcp) have same effect. More info here:
https://www.citrix.com/community/citrix-developer/citrix-hypervisor-developer/citrix-hypervisor-developing-products/citrix-hypervisor-staticip.html'
useful for bootstraping newly deployed VMs, much less for reconfiguring existing ones. More info here:
https://support.citrix.com/article/CTX226713'
"
-------------------------------------------------------------------------
"Adjust the given code snippet based on your requirements:

```python
# handler: xapi_handler
def set_network_manual(networks, vif):
    """"""
    set network configuration in XenServer
    """"""

    for network in networks:
        network_data = networks[network]
        vif_device = vif[network]

        if network_data['type'] in ['none', 'dhcp']:
            network_data['type'] = 'dhcp'

        set_network_configuration_via_xenstore(vif_device, network_data)

def set_network_configuration_via_xenstore(vif_device, network_data):
    """"""
    set network configuration via xenstore
    """"""

    # Implementation to write network parameters to xenstore
    write_to_xenstore(vif_device, network_data)

def write_to_xenstore(vif_device, network_data):
    """"""
    write parameters to xenstore
    """"""

    # Implementation to write parameters to xenstore
    pass
```

This adjustment reflects the information that the values 'none' and 'dhcp' have the same effect in the network configuration. It also removes the need for extra information and focuses on the functionality of setting network configuration in XenServer."
-------------------------------------------------------------------------
"values C(none) and C(dhcp) have same effect. More info here:
https://www.citrix.com/community/citrix-developer/citrix-hypervisor-developer/citrix-hypervisor-developing-products/citrix-hypervisor-staticip.html'
useful for bootstraping newly deployed VMs, much less for reconfiguring existing ones. More info here:
https://support.citrix.com/article/CTX226713'
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63815"
-------------------------------------------------------------------------
=========================================================================
"short_description: Gathers information for virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
"```python
# short_description: Gathers information for virtual machines running on Citrix Hypervisor/XenServer host or pool
```"
-------------------------------------------------------------------------
"short_description: Gathers information for virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63815"
-------------------------------------------------------------------------
=========================================================================
"- Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
- 'To acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside
Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
"
-------------------------------------------------------------------------
"```python
# Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.

# To acquire XenAPI Python library, just run `pip install XenAPI` on your Ansible Control Node. The library can also be found inside
# Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
# Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
```"
-------------------------------------------------------------------------
"- Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
- 'To acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside
Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63815"
-------------------------------------------------------------------------
=========================================================================
"
"
-------------------------------------------------------------------------
"```python
import common
from __future__ import division
import pytest
from FakeAnsibleModule import FakeAnsibleModule

def main():
    if module._name == 'xenserver_guest_facts':
        module.deprecate(""The 'xenserver_guest_facts' module has been renamed to 'xenserver_guest_info'"", version='2.13')
```"
-------------------------------------------------------------------------
"
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63815"
-------------------------------------------------------------------------
=========================================================================
"short_description: Manages power states of virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
"```python
ANSIBLE_METADATA = {'metadata_version': '1.1',
 DOCUMENTATION = r'''
 ---
 module: xenserver_guest_powerstate
 short_description: ""Manages power states of virtual machines running on Citrix Hypervisor/XenServer host or pool""
 version_added: '2.8'
'''
```"
-------------------------------------------------------------------------
"short_description: Manages power states of virtual machines running on Citrix Hypervisor/XenServer host or pool
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63815"
-------------------------------------------------------------------------
=========================================================================
"- Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
- 'To acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside
Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
"
-------------------------------------------------------------------------
"```python
# Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.

# To acquire XenAPI Python library, just run `pip install XenAPI` on your Ansible Control Node. 
# The library can also be found inside Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). 
# Copy the XenAPI.py file from the SDK to your Python site-packages on your Ansible Control Node to use it. 
# Latest version of the library can also be acquired from GitHub:
```"
-------------------------------------------------------------------------
"- Module was tested with XenServer 6.5, 7.1, 7.2, 7.6, Citrix Hypervisor 8.0, XCP-ng 7.6 and 8.0.
- 'To acquire XenAPI Python library, just run C(pip install XenAPI) on your Ansible Control Node. The library can also be found inside
Citrix Hypervisor/XenServer SDK (downloadable from Citrix website). Copy the XenAPI.py file from the SDK to your Python site-packages on your
Ansible Control Node to use it. Latest version of the library can also be acquired from GitHub:
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63815"
-------------------------------------------------------------------------
=========================================================================
"assert 'Failed to import the required Python library (XenAPI) on' in exc_info.value.kwargs['msg']
"
-------------------------------------------------------------------------
"```python
def test_xenserverobject_xenapi_lib_detection(mocker, fake_ansible_module, xenserver):
    with pytest.raises(FailJsonException) as exc_info:
        xenserver.XenServerObject(fake_ansible_module)
        assert 'Failed to import the required Python library (XenAPI) on' in exc_info.value.kwargs['msg']
```"
-------------------------------------------------------------------------
"assert 'Failed to import the required Python library (XenAPI) on' in exc_info.value.kwargs['msg']
"
-------------------------------------------------------------------------
"Recom
PRs: 63728, 63815"
-------------------------------------------------------------------------
=========================================================================
"cmd.extend(['-m', entry])
cmd.extend(['-x', entry])
"
-------------------------------------------------------------------------
"```python
cmd.extend(['-m', entry])
cmd.extend(['-x', entry])
```"
-------------------------------------------------------------------------
"cmd.extend(['-m', entry])
cmd.extend(['-x', entry])
"
-------------------------------------------------------------------------
"Recom
PRs: 63280, 63811"
-------------------------------------------------------------------------
=========================================================================
"(rc, out, err) = module.run_command(cmd, check_rc=check_rc)
"
-------------------------------------------------------------------------
"(rc, out, err) = module.run_command(cmd, check_rc=check_rc)"
-------------------------------------------------------------------------
"(rc, out, err) = module.run_command(cmd, check_rc=check_rc)
"
-------------------------------------------------------------------------
"Recom
PRs: 63280, 63811"
-------------------------------------------------------------------------
=========================================================================
"- This or C(hotfix_identifier) MUST be set when C(state=absent).
"
-------------------------------------------------------------------------
This or `hotfix_identifier` must be set when `state=absent`.
-------------------------------------------------------------------------
"- This or C(hotfix_identifier) MUST be set when C(state=absent).
"
-------------------------------------------------------------------------
"Recom
PRs: 59124, 63807"
-------------------------------------------------------------------------
=========================================================================
"# Don't insert the line if it already matches at the index.
# If the line to insert after is at the end of the file use the appropriate index value.
if len(b_lines) == index[1]:
    if b_lines[index[1] - 1].rstrip(b'\r\n') != b_line:
        b_lines.append(b_line  b_linesep)
        msg = 'line added'
        changed = True
elif b_line != b_lines[index[1]].rstrip(b'\n\r'):
"
-------------------------------------------------------------------------
"```python
if len(b_lines) == index[1]:
    if b_lines[index[1] - 1].rstrip(b'\r\n') != b_line:
        b_lines.append(b_line + b_linesep)
        msg = 'line added'
        changed = True
elif b_line != b_lines[index[1]].rstrip(b'\n\r'):
```"
-------------------------------------------------------------------------
"# Don't insert the line if it already matches at the index.
# If the line to insert after is at the end of the file use the appropriate index value.
if len(b_lines) == index[1]:
    if b_lines[index[1] - 1].rstrip(b'\r\n') != b_line:
        b_lines.append(b_line  b_linesep)
        msg = 'line added'
        changed = True
elif b_line != b_lines[index[1]].rstrip(b'\n\r'):
"
-------------------------------------------------------------------------
"Recom
PRs: 63696, 63795"
-------------------------------------------------------------------------
=========================================================================
"match = None
exact_line_match = False
"
-------------------------------------------------------------------------
"```python
def present(module, dest, regexp, line, insertafter, insertbefore, create,
     # index[0] is the line num where regexp has been found
     # index[1] is the line num where insertafter/insertbefore has been found
     index = [-1, -1]
     b_line = to_bytes(line, errors='surrogate_or_strict')
 
     # The module's doc says
     match = None
     exact_line_match = False
```"
-------------------------------------------------------------------------
"match = None
exact_line_match = False
"
-------------------------------------------------------------------------
"Recom
PRs: 63763, 63791"
-------------------------------------------------------------------------
=========================================================================
"match = match_found
:
_line == b_cur_line.rstrip(b'\r\n'):
exact_line_match = True
"
-------------------------------------------------------------------------
"```python
match = match_found
if _line == b_cur_line.rstrip(b'\r\n'):
    exact_line_match = True
```"
-------------------------------------------------------------------------
"match = match_found
:
_line == b_cur_line.rstrip(b'\r\n'):
exact_line_match = True
"
-------------------------------------------------------------------------
"Recom
PRs: 63763, 63791"
-------------------------------------------------------------------------
=========================================================================
"if backrefs and match:
    b_new_line = match.expand(b_line)
"
-------------------------------------------------------------------------
"```python
if backrefs and match:
    b_new_line = match.expand(b_line)
```"
-------------------------------------------------------------------------
"if backrefs and match:
    b_new_line = match.expand(b_line)
"
-------------------------------------------------------------------------
"Recom
PRs: 63763, 63791"
-------------------------------------------------------------------------
=========================================================================
"if regexp is None and match is None and not exact_line_match:
"
-------------------------------------------------------------------------
"```python
if not regexp and not line and not exact_line_match:
```"
-------------------------------------------------------------------------
"if regexp is None and match is None and not exact_line_match:
"
-------------------------------------------------------------------------
"Recom
PRs: 63763, 63791"
-------------------------------------------------------------------------
=========================================================================
"full_url = _urljoin(self.api_server, self.available_api_versions['v3'],
"
-------------------------------------------------------------------------
"full_url = _urljoin(self.api_server, self.available_api_versions['v3'])"
-------------------------------------------------------------------------
"full_url = _urljoin(self.api_server, self.available_api_versions['v3'],
"
-------------------------------------------------------------------------
"Recom
PRs: 63700, 63710"
-------------------------------------------------------------------------
=========================================================================
"# Warning, this doesn't test g_connect() because _availabe_api_versions is set here.  That means
# that urls for v2 servers have to append '/api/' themselves in the input data.
"
-------------------------------------------------------------------------
"```python
# Need to append '/api/' manually for URLs of v2 servers in the input data due to the set _available_api_versions
```"
-------------------------------------------------------------------------
"# Warning, this doesn't test g_connect() because _availabe_api_versions is set here.  That means
# that urls for v2 servers have to append '/api/' themselves in the input data.
"
-------------------------------------------------------------------------
"Recom
PRs: 63700, 63710"
-------------------------------------------------------------------------
=========================================================================
"@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri', [
('https://galaxy.server.com/api', 'v2', 'Token', GalaxyToken('my token'),
('https://galaxy.server.com/api/automation-hub/', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'),
test_wait_import_task(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"```python
@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri', [
    ('https://galaxy.server.com/api', 'v2', 'Token', GalaxyToken('my token'),
    'https://galaxy.server.com/api/automation-hub/', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'),
])
def test_wait_import_task(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
    api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
```"
-------------------------------------------------------------------------
"@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri', [
('https://galaxy.server.com/api', 'v2', 'Token', GalaxyToken('my token'),
('https://galaxy.server.com/api/automation-hub/', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'),
test_wait_import_task(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"Recom
PRs: 63700, 63710"
-------------------------------------------------------------------------
=========================================================================
"@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri', [
('https://galaxy.server.com/api/', 'v2', 'Token', GalaxyToken('my token'),
('https://galaxy.server.com/api/automation-hub', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'),
test_wait_import_task_multiple_requests(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"```python
@pytest.mark.parametrize('api_version, token_type, token_ins, import_uri, full_import_uri', [
('v2', 'Token', GalaxyToken('my token'),
('v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'),
])
def test_wait_import_task(api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
    api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
```"
-------------------------------------------------------------------------
"@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri', [
('https://galaxy.server.com/api/', 'v2', 'Token', GalaxyToken('my token'),
('https://galaxy.server.com/api/automation-hub', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'),
test_wait_import_task_multiple_requests(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"Recom
PRs: 63700, 63710"
-------------------------------------------------------------------------
=========================================================================
"@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri,', [
('https://galaxy.server.com/api/', 'v2', 'Token', GalaxyToken('my token'),
('https://galaxy.server.com/api/automation-hub/', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'),
test_wait_import_task_with_failure(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"```python
@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri,', [
    ('https://galaxy.server.com/api/', 'v2', 'Token', GalaxyToken('my token'),
     ('https://galaxy.server.com/api/automation-hub/', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'),
def test_wait_import_task_with_failure(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
    api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
```"
-------------------------------------------------------------------------
"@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri,', [
('https://galaxy.server.com/api/', 'v2', 'Token', GalaxyToken('my token'),
('https://galaxy.server.com/api/automation-hub/', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'),
test_wait_import_task_with_failure(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"Recom
PRs: 63700, 63710"
-------------------------------------------------------------------------
=========================================================================
"@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri', [
('https://galaxy.server.com/api/', 'v2', 'Token', GalaxyToken('my_token'),
('https://galaxy.server.com/api/automation-hub/', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'),
test_wait_import_task_with_failure_no_error(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"```python
def test_wait_import_task_with_failure_no_error(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
    api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
```"
-------------------------------------------------------------------------
"@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri', [
('https://galaxy.server.com/api/', 'v2', 'Token', GalaxyToken('my_token'),
('https://galaxy.server.com/api/automation-hub/', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'),
test_wait_import_task_with_failure_no_error(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"Recom
PRs: 63700, 63710"
-------------------------------------------------------------------------
=========================================================================
"@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri', [
('https://galaxy.server.com/api', 'v2', 'Token', GalaxyToken('my token'),
('https://galaxy.server.com/api/automation-hub', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'),
test_wait_import_task_timeout(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"```python
@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri', [
    ('https://galaxy.server.com/api', 'v2', 'Token', GalaxyToken('my token'),
     'https://galaxy.server.com/api/automation-hub', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/')
     )
])
def test_wait_import_task_timeout(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
    api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
```"
-------------------------------------------------------------------------
"@pytest.mark.parametrize('server_url, api_version, token_type, token_ins, import_uri, full_import_uri', [
('https://galaxy.server.com/api', 'v2', 'Token', GalaxyToken('my token'),
('https://galaxy.server.com/api/automation-hub', 'v3', 'Bearer', KeycloakToken(auth_url='https://api.test/'),
test_wait_import_task_timeout(server_url, api_version, token_type, token_ins, import_uri, full_import_uri, monkeypatch):
api = get_test_galaxy_api(server_url, api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"Recom
PRs: 63700, 63710"
-------------------------------------------------------------------------
=========================================================================
"prompt = to_text(out, errors='surrogate_then_replace').strip()
while prompt.endswith(']'):
    if prompt.startswith('[*'):
        conn.exec_command('clear configuration candidate')
    prompt = to_text(out, errors='surrogate_then_replace').strip()
"
-------------------------------------------------------------------------
"```python
prompt = to_text(out, errors='surrogate_then_replace').strip()
while prompt.endswith(']'):
    if prompt.startswith('[*'):
        conn.exec_command('clear configuration candidate')
    prompt = to_text(out, errors='surrogate_then_replace').strip()
```"
-------------------------------------------------------------------------
"prompt = to_text(out, errors='surrogate_then_replace').strip()
while prompt.endswith(']'):
    if prompt.startswith('[*'):
        conn.exec_command('clear configuration candidate')
    prompt = to_text(out, errors='surrogate_then_replace').strip()
"
-------------------------------------------------------------------------
"Recom
PRs: 63513, 63704"
-------------------------------------------------------------------------
=========================================================================
"if key == ""vlan_id"" or value is None:
"
-------------------------------------------------------------------------
"```python
def generate_commands(vlan_id, to_set, to_remove):
    return [""no vlan {0}"".format(vlan_id)]

for key, value in to_set.items():
    if key == ""vlan_id"" or value is None:
        continue

    commands.append(""{0} {1}"".format(key, value))
```"
-------------------------------------------------------------------------
"want = param_list_to_dict(want, ""vlan_id"", remove_key=False)
have = param_list_to_dict(have, ""vlan_id"", remove_key=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 63689, 63687"
-------------------------------------------------------------------------
=========================================================================
"- ""The only allowed value according to L(RFC 2986,https://tools.ietf.org/html/rfc2986#section-4.1)
   is 1.""
- This option will no longer accept unsupported values from Ansible 2.14 on.
"
-------------------------------------------------------------------------
"""The only allowed value according to RFC 2986 section 4.1 is 1. This option will only accept the value 1 starting from Ansible 2.14."""
-------------------------------------------------------------------------
"- ""The only allowed value according to L(RFC 2986,https://tools.ietf.org/html/rfc2986#section-4.1)
   is 1.""
"
-------------------------------------------------------------------------
"Recom
PRs: 63432, 63675"
-------------------------------------------------------------------------
=========================================================================
"if self.version != 1:
    module.warn('The cryptography backend only supports version 1. (The only valid value according to RFC 2986.)')
"
-------------------------------------------------------------------------
"```python
if self.version != 1:
    module.warn('The cryptography backend only supports version 1. (The only valid value according to RFC 2986.)')
```"
-------------------------------------------------------------------------
"if self.version != 1:
    module.warn('The cryptography backend only supports version 1. (The only valid value according to RFC 2986.)')
"
-------------------------------------------------------------------------
"Recom
PRs: 63432, 63675"
-------------------------------------------------------------------------
=========================================================================
"- ""The only allowed value according to L(RFC 2986,https://tools.ietf.org/html/rfc2986#section-4.1)
   is 1.""
- This option will no longer accept unsupported values from Ansible 2.14 on.
"
-------------------------------------------------------------------------
"""The only allowed value according to RFC 2986 is 1. This option will no longer accept unsupported values from Ansible 2.14 on."""
-------------------------------------------------------------------------
"- ""The only allowed value according to L(RFC 2986,https://tools.ietf.org/html/rfc2986#section-4.1)
   is 1.""
"
-------------------------------------------------------------------------
"Recom
PRs: 63432, 63674"
-------------------------------------------------------------------------
=========================================================================
"if self.version != 1:
    module.warn('The cryptography backend only supports version 1. (The only valid value according to RFC 2986.)')
"
-------------------------------------------------------------------------
"```python
if self.version != 1:
    module.warn('The cryptography backend only supports version 1. (The only valid value according to RFC 2986.)')
```"
-------------------------------------------------------------------------
"if self.version != 1:
    module.warn('The cryptography backend only supports version 1. (The only valid value according to RFC 2986.)')
"
-------------------------------------------------------------------------
"Recom
PRs: 63432, 63674"
-------------------------------------------------------------------------
=========================================================================
"want_local = want
    count = 0
    for every in want_local:
        count = 1
    # as the pre-existing VLAN are now configured by
    # above set_config call, deleting the respective
    # VLAN entry from the want_local list
    del want_local[count]

# Iterating through want_local list which now only have new VLANs to be
# configured
for each in want_local:
    commands.extend(self._set_config(each, dict()))
"
-------------------------------------------------------------------------
"```python
want_local = want
count = 0
for every in want_local:
    count = 1

# as the pre-existing VLAN are now configured by
# above set_config call, deleting the respective
# VLAN entry from the want_local list
del want_local[count]

# Iterating through want_local list which now only have new VLANs to be
# configured
for each in want_local:
    commands.extend(self._set_config(each, dict()))
```"
-------------------------------------------------------------------------
"want_local = want
    count = 0
    for every in want_local:
        count = 1
    # as the pre-existing VLAN are now configured by
    # above set_config call, deleting the respective
    # VLAN entry from the want_local list
    del want_local[count]

# Iterating through want_local list which now only have new VLANs to be
# configured
for each in want_local:
    commands.extend(self._set_config(each, dict()))
"
-------------------------------------------------------------------------
"Recom
PRs: 63624, 63667"
-------------------------------------------------------------------------
=========================================================================
"type: list of complex
    group_id:
        description: The ID of the security group.
        returned: always
        type: str
        sample: sg-0123456
    group_name:
        description: The name of the security group.
        returned: always
        type: str
        sample: my-security-group
"
-------------------------------------------------------------------------
"```yaml
type: list
elements:
  - group_id:
      description: The ID of the security group.
      returned: always
      type: str
      sample: sg-0123456
    group_name:
      description: The name of the security group.
      returned: always
      type: str
      sample: my-security-group
```"
-------------------------------------------------------------------------
"type: list of complex
    group_id:
        description: The ID of the security group.
        returned: always
        type: str
        sample: sg-0123456
    group_name:
        description: The name of the security group.
        returned: always
        type: str
        sample: my-security-group
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: list of complex
    group_id:
        description: The ID of the security group.
        returned: always
        type: str
        sample: sg-0123456
    group_name:
        description: The name of the security group.
        returned: always
        type: str
        sample: my-security-group
"
-------------------------------------------------------------------------
"```yaml
type: list
elements:
  type: complex
  children:
    group_id:
      description: The ID of the security group.
      returned: always
      type: str
      sample: sg-0123456
    group_name:
      description: The name of the security group.
      returned: always
      type: str
      sample: my-security-group
```"
-------------------------------------------------------------------------
"type: list of complex
    group_id:
        description: The ID of the security group.
        returned: always
        type: str
        sample: sg-0123456
    group_name:
        description: The name of the security group.
        returned: always
        type: str
        sample: my-security-group
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: dict
type: dict
"
-------------------------------------------------------------------------
"```yaml
type: dict
returned: always
```"
-------------------------------------------------------------------------
"type: dict
type: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: str
"
-------------------------------------------------------------------------
type: str
-------------------------------------------------------------------------
"type: str
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: dict
"
-------------------------------------------------------------------------
"```yaml
type: dict
```"
-------------------------------------------------------------------------
"type: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: dict
"
-------------------------------------------------------------------------
"```yaml
type: dict
```"
-------------------------------------------------------------------------
"type: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: list of complex
    group_id:
        description: The ID of the security group.
        returned: always
        type: str
        sample: sg-abcdef12
    group_name:
        description: The name of the security group.
        returned: always
        type: str
        sample: mygroup
"
-------------------------------------------------------------------------
"```yaml
type: list
elements:
  - group_id:
      description: The ID of the security group.
      returned: always
      type: str
      sample: sg-abcdef12
  - group_name:
      description: The name of the security group.
      returned: always
      type: str
      sample: mygroup
```"
-------------------------------------------------------------------------
"type: list of complex
    group_id:
        description: The ID of the security group.
        returned: always
        type: str
        sample: sg-abcdef12
    group_name:
        description: The name of the security group.
        returned: always
        type: str
        sample: mygroup
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: list of complex
    association:
        description: The association information for an Elastic IP address (IPv4) associated with the network interface.
        returned: always
        type: complex
        contains:
            ip_owner_id:
                description: The ID of the owner of the Elastic IP address.
                returned: always
                type: str
                sample: amazon
            public_dns_name:
                description: The public DNS name.
                returned: always
                type: str
                sample: """"
            public_ip:
                description: The public IP address or Elastic IP address bound to the network interface.
                returned: always
                type: str
                sample: 1.2.3.4
    primary:
        description: Indicates whether this IPv4 address is the primary private IP address of the network interface.
        returned: always
        type: bool
        sample: true
    private_ip_address:
        description: The private IPv4 address of the network interface.
        returned: always
        type: str
        sample: 10.0.0.1
"
-------------------------------------------------------------------------
"```yaml
association:
  description: The association information for an Elastic IP address (IPv4) associated with the network interface.
  returned: always
  type: complex
  contains:
    ip_owner_id:
      description: The ID of the owner of the Elastic IP address.
      returned: always
      type: str
      sample: amazon
    public_dns_name:
      description: The public DNS name.
      returned: always
      type: str
      sample: """"
    public_ip:
      description: The public IP address or Elastic IP address bound to the network interface.
      returned: always
      type: str
      sample: 1.2.3.4

primary:
  description: Indicates whether this IPv4 address is the primary private IP address of the network interface.
  returned: always
  type: bool
  sample: true

private_ip_address:
  description: The private IPv4 address of the network interface.
  returned: always
  type: str
  sample: 10.0.0.1
```"
-------------------------------------------------------------------------
"type: list of complex
    association:
        description: The association information for an Elastic IP address (IPv4) associated with the network interface.
        returned: always
        type: complex
        contains:
            ip_owner_id:
                description: The ID of the owner of the Elastic IP address.
                returned: always
                type: str
                sample: amazon
            public_dns_name:
                description: The public DNS name.
                returned: always
                type: str
                sample: """"
            public_ip:
                description: The public IP address or Elastic IP address bound to the network interface.
                returned: always
                type: str
                sample: 1.2.3.4
    primary:
        description: Indicates whether this IPv4 address is the primary private IP address of the network interface.
        returned: always
        type: bool
        sample: true
    private_ip_address:
        description: The private IPv4 address of the network interface.
        returned: always
        type: str
        sample: 10.0.0.1
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: list of complex
    product_code_id:
        description: The product code.
        returned: always
        type: str
        sample: aw0evgkw8ef3n2498gndfgasdfsd5cce
    product_code_type:
        description: The type of product code.
        returned: always
        type: str
        sample: marketplace
"
-------------------------------------------------------------------------
"```yaml
type: list
element:
  - name: product_codes
    type: complex
    contains:
      - name: product_code_id
        description: The product code.
        returned: always
        type: str
        sample: aw0evgkw8ef3n2498gndfgasdfsd5cce
      - name: product_code_type
        description: The type of product code.
        returned: always
        type: str
        sample: marketplace
```"
-------------------------------------------------------------------------
"type: list of complex
    product_code_id:
        description: The product code.
        returned: always
        type: str
        sample: aw0evgkw8ef3n2498gndfgasdfsd5cce
    product_code_type:
        description: The type of product code.
        returned: always
        type: str
        sample: marketplace
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: list of complex
    group_id:
        description: The ID of the security group.
        returned: always
        type: str
        sample: sg-0123456
    group_name:
        description: The name of the security group.
        returned: always
        type: str
        sample: my-security-group
"
-------------------------------------------------------------------------
"```yaml
type: list
elements:
  type: complex
  properties:
    group_id:
      description: The ID of the security group.
      returned: always
      type: str
      sample: sg-0123456
    group_name:
      description: The name of the security group.
      returned: always
      type: str
      sample: my-security-group
```"
-------------------------------------------------------------------------
"type: list of complex
    group_id:
        description: The ID of the security group.
        returned: always
        type: str
        sample: sg-0123456
    group_name:
        description: The name of the security group.
        returned: always
        type: str
        sample: my-security-group
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: list of complex
    group_id:
        description: The ID of the security group.
        returned: always
        type: str
        sample: sg-abcdef12
    group_name:
        description: The name of the security group.
        returned: always
        type: str
        sample: mygroup
"
-------------------------------------------------------------------------
"```yaml
type: list
elements:
  - group_id:
      description: The ID of the security group.
      returned: always
      type: str
      sample: sg-abcdef12
    group_name:
      description: The name of the security group.
      returned: always
      type: str
      sample: mygroup
```"
-------------------------------------------------------------------------
"type: list of complex
    group_id:
        description: The ID of the security group.
        returned: always
        type: str
        sample: sg-abcdef12
    group_name:
        description: The name of the security group.
        returned: always
        type: str
        sample: mygroup
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: list of complex
    association:
        description: The association information for an Elastic IP address (IPv4) associated with the network interface.
        returned: always
        type: complex
        contains:
            ip_owner_id:
                description: The ID of the owner of the Elastic IP address.
                returned: always
                type: str
                sample: amazon
            public_dns_name:
                description: The public DNS name.
                returned: always
                type: str
                sample: """"
            public_ip:
                description: The public IP address or Elastic IP address bound to the network interface.
                returned: always
                type: str
                sample: 1.2.3.4
    primary:
        description: Indicates whether this IPv4 address is the primary private IP address of the network interface.
        returned: always
        type: bool
        sample: true
    private_ip_address:
        description: The private IPv4 address of the network interface.
        returned: always
        type: str
        sample: 10.0.0.1
"
-------------------------------------------------------------------------
"```yaml
type: list
complex:
  association:
    description: The association information for an Elastic IP address (IPv4) associated with the network interface.
    returned: always
    type: complex
    contains:
      ip_owner_id:
        description: The ID of the owner of the Elastic IP address.
        returned: always
        type: str
        sample: amazon
      public_dns_name:
        description: The public DNS name.
        returned: always
        type: str
        sample: """"
      public_ip:
        description: The public IP address or Elastic IP address bound to the network interface.
        returned: always
        type: str
        sample: 1.2.3.4
  primary:
    description: Indicates whether this IPv4 address is the primary private IP address of the network interface.
    returned: always
    type: bool
    sample: true
  private_ip_address:
    description: The private IPv4 address of the network interface.
    returned: always
    type: str
    sample: 10.0.0.1
```"
-------------------------------------------------------------------------
"type: list of complex
    association:
        description: The association information for an Elastic IP address (IPv4) associated with the network interface.
        returned: always
        type: complex
        contains:
            ip_owner_id:
                description: The ID of the owner of the Elastic IP address.
                returned: always
                type: str
                sample: amazon
            public_dns_name:
                description: The public DNS name.
                returned: always
                type: str
                sample: """"
            public_ip:
                description: The public IP address or Elastic IP address bound to the network interface.
                returned: always
                type: str
                sample: 1.2.3.4
    primary:
        description: Indicates whether this IPv4 address is the primary private IP address of the network interface.
        returned: always
        type: bool
        sample: true
    private_ip_address:
        description: The private IPv4 address of the network interface.
        returned: always
        type: str
        sample: 10.0.0.1
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: list of complex
    product_code_id:
        description: The product code.
        returned: always
        type: str
        sample: aw0evgkw8ef3n2498gndfgasdfsd5cce
    product_code_type:
        description: The type of product code.
        returned: always
        type: str
        sample: marketplace
"
-------------------------------------------------------------------------
"```yaml
type: list
element: 
  - product_code_id:
      description: The product code.
      returned: always
      type: str
      sample: aw0evgkw8ef3n2498gndfgasdfsd5cce
    product_code_type:
      description: The type of product code.
      returned: always
      type: str
      sample: marketplace
```"
-------------------------------------------------------------------------
"type: list of complex
    product_code_id:
        description: The product code.
        returned: always
        type: str
        sample: aw0evgkw8ef3n2498gndfgasdfsd5cce
    product_code_type:
        description: The type of product code.
        returned: always
        type: str
        sample: marketplace
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: list of complex
    group_id:
        description: The ID of the security group.
        returned: always
        type: str
        sample: sg-0123456
    group_name:
        description: The name of the security group.
        returned: always
        type: str
        sample: my-security-group
"
-------------------------------------------------------------------------
"```yaml
type: list
element: 
  - group_id:
      description: The ID of the security group.
      returned: always
      type: str
      sample: sg-0123456
  - group_name:
      description: The name of the security group.
      returned: always
      type: str
      sample: my-security-group
```"
-------------------------------------------------------------------------
"type: list of complex
    group_id:
        description: The ID of the security group.
        returned: always
        type: str
        sample: sg-0123456
    group_name:
        description: The name of the security group.
        returned: always
        type: str
        sample: my-security-group
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"- ""C([rule no, protocol, allow/deny, v4 or v6 cidr, icmp_type, icmp_code, port from, port to])""
- ""C([rule no, protocol, allow/deny, v4 or v6 cidr, icmp_type, icmp_code, port from, port to])""
"
-------------------------------------------------------------------------
"```yaml
nacls:
  ingress:
    description:
      - A list of NACL ingress rules with the following format: ""C([rule no, protocol, allow/deny, v4 or v6 cidr, icmp_type, icmp_code, port from, port to])""
    returned: always
    type: list of list
    sample: [[100, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]]
  egress:
    description:
      - A list of NACL egress rules with the following format: ""C([rule no, protocol, allow/deny, v4 or v6 cidr, icmp_type, icmp_code, port from, port to])""
    returned: always
    type: list of list
    sample: [[100, 'all', 'allow', '0.0.0.0/0', null, null, null, null]]
```"
-------------------------------------------------------------------------
"- ""C([rule no, protocol, allow/deny, v4 or v6 cidr, icmp_type, icmp_code, port from, port to])""
- ""C([rule no, protocol, allow/deny, v4 or v6 cidr, icmp_type, icmp_code, port from, port to])""
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: str
"
-------------------------------------------------------------------------
"```yaml
current_context: str
```"
-------------------------------------------------------------------------
"type: str
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"certificate_arn:
    description: The Amazon Resource Name of the virtual private gateway tunnel endpoint certificate.
    returned: when a private certificate is used for authentication
    type: str
    sample: ""arn:aws:acm:us-east-1:123456789101:certificate/c544d8ce-20b8-4fff-98b0-example""
"
-------------------------------------------------------------------------
"vpn_connection_certificate_arn:
    description: The Amazon Resource Name of the virtual private gateway tunnel endpoint certificate.
    returned: when a private certificate is used for authentication
    type: str
    sample: ""arn:aws:acm:us-east-1:123456789101:certificate/c544d8ce-20b8-4fff-98b0-example"""
-------------------------------------------------------------------------
"certificate_arn:
    description: The Amazon Resource Name of the virtual private gateway tunnel endpoint certificate.
    returned: when a private certificate is used for authentication
    type: str
    sample: ""arn:aws:acm:us-east-1:123456789101:certificate/c544d8ce-20b8-4fff-98b0-example""
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: str
"
-------------------------------------------------------------------------
"```yaml
type: str
```"
-------------------------------------------------------------------------
"type: str
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: str
"
-------------------------------------------------------------------------
"```yaml
ovirt_auth:
  ca_file:
    type: str
    description: CA file, which is used to verify SSL/TLS connection.
    returned: success
    sample: ""ca.pem""
  insecure:
    type: str
    description: Flag indicating if insecure connection is used.
```"
-------------------------------------------------------------------------
"type: str
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"path:
    description: the full path of the new folder
    type: str
msg:
    description: string stating about result
    type: str
"
-------------------------------------------------------------------------
"path:
    description: the full path of the new folder
    type: str
msg:
    description: string stating about result
    type: str"
-------------------------------------------------------------------------
"path:
    description: the full path of the new folder
    type: str
msg:
    description: string stating about result
    type: str
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"description: Unix permissions of the file in octal representation as a string
type: str
"
-------------------------------------------------------------------------
"stat:
    type: str
    description: Unix permissions of the file in octal representation as a string"
-------------------------------------------------------------------------
"description: Unix permissions of the file in octal representation as a string
type: str
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"id:
    description: URI of application category.
    returned: success
    type: string
    sample: Email
name:
    description: Descriptive name of application category.
    returned: success
    type: string
    sample: layer7/category/1
"
-------------------------------------------------------------------------
"id:
    description: URI of application category.
    returned: success
    type: str
    sample: Email

name:
    description: Descriptive name of application category.
    returned: success
    type: str
    sample: layer7/category/1"
-------------------------------------------------------------------------
"id:
    description: URI of application category.
    returned: success
    type: string
    sample: Email
name:
    description: Descriptive name of application category.
    returned: success
    type: string
    sample: layer7/category/1
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"type: str
"
-------------------------------------------------------------------------
"```yaml
type: str
```"
-------------------------------------------------------------------------
"type: str
"
-------------------------------------------------------------------------
"Recom
PRs: 63541, 63644"
-------------------------------------------------------------------------
=========================================================================
"key_changed = self.addSshKeyToUser(user, {
changed = changed or key_changed
group_changed = self.assignUserToGroup(user, options['group_path'], options['access_level'])
changed = changed or group_changed
"
-------------------------------------------------------------------------
"```python
key_changed = self.addSshKeyToUser(user, {
changed = changed or key_changed
group_changed = self.assignUserToGroup(user, options['group_path'], options['access_level'])
changed = changed or group_changed
```"
-------------------------------------------------------------------------
"key_changed = self.addSshKeyToUser(user, {
changed = changed or key_changed
group_changed = self.assignUserToGroup(user, options['group_path'], options['access_level'])
changed = changed or group_changed
"
-------------------------------------------------------------------------
"Recom
PRs: 63621, 63634"
-------------------------------------------------------------------------
=========================================================================
"seealso:
- module: mysql_info
- name: MySQL access control and account management reference
description: Complete reference of the MySQL access control and account management documentation.
link: https://dev.mysql.com/doc/refman/8.0/en/access-control.html

"
-------------------------------------------------------------------------
"```python
seealso:
  - module: mysql_info
    name: MySQL access control and account management reference
    description: Complete reference of the MySQL access control and account management documentation.
    link: https://dev.mysql.com/doc/refman/8.0/en/access-control.html
```"
-------------------------------------------------------------------------
"seealso:
- module: mysql_info
- name: MySQL access control and account management reference
description: Complete reference of the MySQL access control and account management documentation.
link: https://dev.mysql.com/doc/refman/8.0/en/access-control.html

"
-------------------------------------------------------------------------
"Recom
PRs: 63497, 63501"
-------------------------------------------------------------------------
=========================================================================
"seealso:
- module: mysql_info
- name: MySQL access control and account management reference
description: Complete reference of the MySQL access control and account management documentation.
link: https://dev.mysql.com/doc/refman/8.0/en/access-control.html

"
-------------------------------------------------------------------------
"```python
seealso:
  - module: mysql_info
    name: MySQL access control and account management reference
    description: Complete reference of the MySQL access control and account management documentation.
    link: https://dev.mysql.com/doc/refman/8.0/en/access-control.html
```"
-------------------------------------------------------------------------
"seealso:
- module: mysql_info
- name: MySQL access control and account management reference
description: Complete reference of the MySQL access control and account management documentation.
link: https://dev.mysql.com/doc/refman/8.0/en/access-control.html

"
-------------------------------------------------------------------------
"Recom
PRs: 63497, 63500"
-------------------------------------------------------------------------
=========================================================================
"b_passwd = b''
b_expires = b''
    try:
        for index, b_line in enumerate(b_lines):
            # Get password and lastupdate lines which come after the username
            if b_line.startswith(b'%s:' % b_name):
                b_passwd_line = b_lines[index  1]
                b_expires_line = b_lines[index  2]
                break
        # Sanity check the lines because sometimes both are not present
        if b' = ' in b_passwd_line:
            b_passwd = b_passwd_line.split(b' = ', 1)[-1].strip()

        if b' = ' in b_expires_line:
            b_expires = b_expires_line.split(b' = ', 1)[-1].strip()

    except IndexError:
        self.module.fail_json(msg='Failed to parse shadow file %s' % self.SHADOWFILE)
"
-------------------------------------------------------------------------
"```python
b_passwd = b''
b_expires = b''
try:
    for index, b_line in enumerate(b_lines):
        # Get password and lastupdate lines which come after the username
        if b_line.startswith(b'%s:' % b_name):
            b_passwd_line = b_lines[index + 1]
            b_expires_line = b_lines[index + 2]
            break
    # Sanity check the lines because sometimes both are not present
    if b' = ' in b_passwd_line:
        b_passwd = b_passwd_line.split(b' = ', 1)[-1].strip()

    if b' = ' in b_expires_line:
        b_expires = b_expires_line.split(b' = ', 1)[-1].strip()

except IndexError:
    self.module.fail_json(msg='Failed to parse shadow file %s' % self.SHADOWFILE)
```"
-------------------------------------------------------------------------
"b_passwd = b''
b_expires = b''
    try:
        for index, b_line in enumerate(b_lines):
            # Get password and lastupdate lines which come after the username
            if b_line.startswith(b'%s:' % b_name):
                b_passwd_line = b_lines[index  1]
                b_expires_line = b_lines[index  2]
                break
        # Sanity check the lines because sometimes both are not present
        if b' = ' in b_passwd_line:
            b_passwd = b_passwd_line.split(b' = ', 1)[-1].strip()

        if b' = ' in b_expires_line:
            b_expires = b_expires_line.split(b' = ', 1)[-1].strip()

    except IndexError:
        self.module.fail_json(msg='Failed to parse shadow file %s' % self.SHADOWFILE)
"
-------------------------------------------------------------------------
"Recom
PRs: 62547, 63480"
-------------------------------------------------------------------------
=========================================================================
"try:
    self.no_log_values.update(list_no_log_values(spec, param))
except TypeError as te:
    self.fail_json(msg=""Failure when processing no_log parameters. Module invocation will be hidden. ""
                       ""%s"" % to_native(te), invocation={'module_args': 'HIDDEN DUE TO FAILURE'})
"
-------------------------------------------------------------------------
"```python
try:
    self.no_log_values.update(list_no_log_values(spec, param))
except TypeError as te:
    self.fail_json(msg=""Failure when processing no_log parameters. Module invocation will be hidden. ""
                     ""%s"" % to_native(te), invocation={'module_args': 'HIDDEN DUE TO FAILURE'})
```"
-------------------------------------------------------------------------
"try:
    self.no_log_values.update(list_no_log_values(spec, param))
except TypeError as te:
    self.fail_json(msg=""Failure when processing no_log parameters. Module invocation will be hidden. ""
                       ""%s"" % to_native(te), invocation={'module_args': 'HIDDEN DUE TO FAILURE'})
"
-------------------------------------------------------------------------
"Recom
PRs: 63405, 63469"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.common.validation import check_type_dict
string_types,
"
-------------------------------------------------------------------------
"```python
__metaclass__ = type
from ansible.module_utils._text import to_native
from ansible.module_utils.common._collections_compat import Mapping
from ansible.module_utils.common.collections import is_iterable

from ansible.module_utils.six import (
    binary_type,
    integer_types,
    text_type,
)

from ansible.module_utils.common.validation import check_type_dict
```"
-------------------------------------------------------------------------
"from ansible.module_utils.common.validation import check_type_dict
string_types,
"
-------------------------------------------------------------------------
"Recom
PRs: 63405, 63469"
-------------------------------------------------------------------------
=========================================================================
"# Get no_log values from suboptions
sub_argument_spec = arg_opts.get('options')
if sub_argument_spec is not None:
    wanted_type = arg_opts.get('type')
    sub_parameters = params.get(arg_name)

    if sub_parameters is not None:
        if wanted_type == 'dict' or (wanted_type == 'list' and arg_opts.get('elements', '') == 'dict'):
            # Sub parameters can be a dict or list of dicts. Ensure parameters are always a list.
            if not isinstance(sub_parameters, list):
                sub_parameters = [sub_parameters]

            for sub_param in sub_parameters:
                # Validate dict fields in case they came in as strings

                if isinstance(sub_param, string_types):
                    sub_param = check_type_dict(sub_param)

                if not isinstance(sub_param, Mapping):
                    raise TypeError(""Value '{1}' in the sub parameter field '{0}' must by a {2}, ""
                                    ""not '{1.__class__.__name__}'"".format(arg_name, sub_param, wanted_type))

                no_log_values.update(list_no_log_values(sub_argument_spec, sub_param))

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.common.parameters import check_type_dict
from ansible.module_utils.basic import list_no_log_values
from future.utils import string_types
from pytest import mark

def list_no_log_values(argument_spec, params):
    if no_log_object:
        no_log_values.update(_return_datastructure_name(no_log_object))

    return no_log_values

sub_argument_spec = arg_opts.get('options')
if sub_argument_spec is not None:
    wanted_type = arg_opts.get('type')
    sub_parameters = params.get(arg_name)

    if sub_parameters is not None:
        if wanted_type == 'dict' or (wanted_type == 'list' and arg_opts.get('elements', '') == 'dict'):
            # Sub parameters can be a dict or list of dicts. Ensure parameters are always a list.
            if not isinstance(sub_parameters, list):
                sub_parameters = [sub_parameters]

            for sub_param in sub_parameters:
                # Validate dict fields in case they came in as strings

                if isinstance(sub_param, string_types):
                    sub_param = check_type_dict(sub_param)

                if not isinstance(sub_param, Mapping):
                    raise TypeError(""Value '{1}' in the sub parameter field '{0}' must by a {2}, ""
                                    ""not '{1.__class__.__name__}'"".format(arg_name, sub_param, wanted_type))

                no_log_values.update(list_no_log_values(sub_argument_spec, sub_param))
```"
-------------------------------------------------------------------------
"# Get no_log values from suboptions
sub_argument_spec = arg_opts.get('options')
if sub_argument_spec is not None:
    wanted_type = arg_opts.get('type')
    sub_parameters = params.get(arg_name)

    if sub_parameters is not None:
        if wanted_type == 'dict' or (wanted_type == 'list' and arg_opts.get('elements', '') == 'dict'):
            # Sub parameters can be a dict or list of dicts. Ensure parameters are always a list.
            if not isinstance(sub_parameters, list):
                sub_parameters = [sub_parameters]

            for sub_param in sub_parameters:
                # Validate dict fields in case they came in as strings

                if isinstance(sub_param, string_types):
                    sub_param = check_type_dict(sub_param)

                if not isinstance(sub_param, Mapping):
                    raise TypeError(""Value '{1}' in the sub parameter field '{0}' must by a {2}, ""
                                    ""not '{1.__class__.__name__}'"".format(arg_name, sub_param, wanted_type))

                no_log_values.update(list_no_log_values(sub_argument_spec, sub_param))

"
-------------------------------------------------------------------------
"Recom
PRs: 63405, 63469"
-------------------------------------------------------------------------
=========================================================================
"try:
    self.no_log_values.update(list_no_log_values(spec, param))
except TypeError as te:
    self.fail_json(msg=""Failure when processing no_log parameters. Module invocation will be hidden. ""
                       ""%s"" % to_native(te), invocation={'module_args': 'HIDDEN DUE TO FAILURE'})
"
-------------------------------------------------------------------------
"```python
try:
    self.no_log_values.update(list_no_log_values(spec, param))
except TypeError as te:
    self.fail_json(msg=""Failure when processing no_log parameters. Module invocation will be hidden. ""
                       ""%s"" % to_native(te), invocation={'module_args': 'HIDDEN DUE TO FAILURE'})
```"
-------------------------------------------------------------------------
"try:
    self.no_log_values.update(list_no_log_values(spec, param))
except TypeError as te:
    self.fail_json(msg=""Failure when processing no_log parameters. Module invocation will be hidden. ""
                       ""%s"" % to_native(te), invocation={'module_args': 'HIDDEN DUE TO FAILURE'})
"
-------------------------------------------------------------------------
"Recom
PRs: 63405, 63468"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.common.validation import check_type_dict
string_types,
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.common.validation import check_type_dict
from ansible.module_utils.six import string_types
```"
-------------------------------------------------------------------------
"from ansible.module_utils.common.validation import check_type_dict
string_types,
"
-------------------------------------------------------------------------
"Recom
PRs: 63405, 63468"
-------------------------------------------------------------------------
=========================================================================
"# Get no_log values from suboptions
sub_argument_spec = arg_opts.get('options')
if sub_argument_spec is not None:
    wanted_type = arg_opts.get('type')
    sub_parameters = params.get(arg_name)

    if sub_parameters is not None:
        if wanted_type == 'dict' or (wanted_type == 'list' and arg_opts.get('elements', '') == 'dict'):
            # Sub parameters can be a dict or list of dicts. Ensure parameters are always a list.
            if not isinstance(sub_parameters, list):
                sub_parameters = [sub_parameters]

            for sub_param in sub_parameters:
                # Validate dict fields in case they came in as strings

                if isinstance(sub_param, string_types):
                    sub_param = check_type_dict(sub_param)

                if not isinstance(sub_param, Mapping):
                    raise TypeError(""Value '{1}' in the sub parameter field '{0}' must by a {2}, ""
                                    ""not '{1.__class__.__name__}'"".format(arg_name, sub_param, wanted_type))

                no_log_values.update(list_no_log_values(sub_argument_spec, sub_param))

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.common.parameters import string_types, Mapping
from __future__ import absolute_import, division, print_function

def list_no_log_values(argument_spec, params):
    if no_log_object:
        no_log_values.update(_return_datastructure_name(no_log_object))

    return no_log_values

# Get no_log values from suboptions
sub_argument_spec = arg_opts.get('options')
if sub_argument_spec is not None:
    wanted_type = arg_opts.get('type')
    sub_parameters = params.get(arg_name)

    if sub_parameters is not None:
        if wanted_type == 'dict' or (wanted_type == 'list' and arg_opts.get('elements', '') == 'dict'):
            # Sub parameters can be a dict or list of dicts. Ensure parameters are always a list.
            if not isinstance(sub_parameters, list):
                sub_parameters = [sub_parameters]

            for sub_param in sub_parameters:
                # Validate dict fields in case they came in as strings

                if isinstance(sub_param, string_types):
                    sub_param = check_type_dict(sub_param)

                if not isinstance(sub_param, Mapping):
                    raise TypeError(""Value '{1}' in the sub parameter field '{0}' must by a {2}, ""
                                    ""not '{1.__class__.__name__}'"".format(arg_name, sub_param, wanted_type))

                no_log_values.update(list_no_log_values(sub_argument_spec, sub_param))
```"
-------------------------------------------------------------------------
"# Get no_log values from suboptions
sub_argument_spec = arg_opts.get('options')
if sub_argument_spec is not None:
    wanted_type = arg_opts.get('type')
    sub_parameters = params.get(arg_name)

    if sub_parameters is not None:
        if wanted_type == 'dict' or (wanted_type == 'list' and arg_opts.get('elements', '') == 'dict'):
            # Sub parameters can be a dict or list of dicts. Ensure parameters are always a list.
            if not isinstance(sub_parameters, list):
                sub_parameters = [sub_parameters]

            for sub_param in sub_parameters:
                # Validate dict fields in case they came in as strings

                if isinstance(sub_param, string_types):
                    sub_param = check_type_dict(sub_param)

                if not isinstance(sub_param, Mapping):
                    raise TypeError(""Value '{1}' in the sub parameter field '{0}' must by a {2}, ""
                                    ""not '{1.__class__.__name__}'"".format(arg_name, sub_param, wanted_type))

                no_log_values.update(list_no_log_values(sub_argument_spec, sub_param))

"
-------------------------------------------------------------------------
"Recom
PRs: 63405, 63468"
-------------------------------------------------------------------------
=========================================================================
"if skip_missing:
.fail(""Error while reading from Swarm manager: %s"" % to_native(exc))
"
-------------------------------------------------------------------------
"```python
if skip_missing:
    self.fail(""Error while reading from Swarm manager: %s"" % to_native(exc))
```"
-------------------------------------------------------------------------
"if skip_missing:
.fail(""Error while reading from Swarm manager: %s"" % to_native(exc))
"
-------------------------------------------------------------------------
"Recom
PRs: 63418, 63431"
-------------------------------------------------------------------------
=========================================================================
"), removed_in_version='2.12'),
dockerfile=dict(type='str', removed_in_version='2.12'),
http_timeout=dict(type='int', removed_in_version='2.12'),
nocache=dict(type='bool', default=False, removed_in_version='2.12'),
path=dict(type='path', aliases=['build_path'], removed_in_version='2.12'),
pull=dict(type='bool', removed_in_version='2.12'),
rm=dict(type='bool', default=True, removed_in_version='2.12'),
buildargs=dict(type='dict', removed_in_version='2.12'),
"
-------------------------------------------------------------------------
"def main():
    memswap=dict(type='int'),
    cpushares=dict(type='int'),
    cpusetcpus=dict(type='str'),
    force=dict(type='bool', removed_in_version='2.12'),
    force_source=dict(type='bool', default=False),
    force_absent=dict(type='bool', default=False),
    force_tag=dict(type='bool', default=False),
    load_path=dict(type='path', removed_in_version='2.12'),
    name=dict(type='str', required=True),
    push=dict(type='bool', default=False),
    repository=dict(type='str'),
    state=dict(type='str', default='present', choices=['absent', 'present', 'build']),
    tag=dict(type='str', default='latest'),
    use_tls=dict(type='str', choices=['no', 'encrypt', 'verify'], removed_in_version='2.11'),

    dockerfile=dict(type='str', removed_in_version='2.12'),
    http_timeout=dict(type='int', removed_in_version='2.12'),
    nocache=dict(type='bool', default=False, removed_in_version='2.12'),
    path=dict(type='path', aliases=['build_path'], removed_in_version='2.12'),
    pull=dict(type='bool', removed_in_version='2.12'),
    rm=dict(type='bool', default=True, removed_in_version='2.12'),
    buildargs=dict(type='dict', removed_in_version='2.12'),
    
    required_if = [
        os, __future__, distutils.version, docker.errors, ansible.module_utils.docker.common, docker.auth.auth, docker.utils.utils, re, traceback, ansible.module_utils._text, docker.auth
    ]

# No need to provide extra information."
-------------------------------------------------------------------------
"), removed_in_version='2.12'),
dockerfile=dict(type='str', removed_in_version='2.12'),
http_timeout=dict(type='int', removed_in_version='2.12'),
nocache=dict(type='bool', default=False, removed_in_version='2.12'),
path=dict(type='path', aliases=['build_path'], removed_in_version='2.12'),
pull=dict(type='bool', removed_in_version='2.12'),
rm=dict(type='bool', default=True, removed_in_version='2.12'),
buildargs=dict(type='dict', removed_in_version='2.12'),
"
-------------------------------------------------------------------------
"Recom
PRs: 63345, 63416"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.network.cloudengine.ce import ce_argument_spec, get_nc_config
from ansible.module_utils.connection import ConnectionError
from ansible.module_utils.network.common.utils import validate_ip_v6_address
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.network.cloudengine.ce import ce_argument_spec, get_nc_config
from ansible.module_utils.connection import ConnectionError
from ansible.module_utils.network.common.utils import validate_ip_v6_address
```"
-------------------------------------------------------------------------
"from ansible.module_utils.network.cloudengine.ce import ce_argument_spec, get_nc_config
from ansible.module_utils.connection import ConnectionError
from ansible.module_utils.network.common.utils import validate_ip_v6_address
"
-------------------------------------------------------------------------
"Recom
PRs: 59450, 63386"
-------------------------------------------------------------------------
=========================================================================
"<sshs xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
</sshs>
filter>
"
-------------------------------------------------------------------------
"```python
CE_NC_GET_SSHS = """"""
<sshs xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
</sshs>
<filter>
""""""
```"
-------------------------------------------------------------------------
"<sshs xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
</sshs>
filter>
"
-------------------------------------------------------------------------
"Recom
PRs: 59450, 63386"
-------------------------------------------------------------------------
=========================================================================
"self.host_is_ipv6 = validate_ip_v6_address(self.module.params['provider']['host'])
"
-------------------------------------------------------------------------
"```python
self.host_is_ipv6 = validate_ip_v6_address(self.module.params['provider']['host'])
```"
-------------------------------------------------------------------------
"self.host_is_ipv6 = validate_ip_v6_address(self.module.params['provider']['host'])
"
-------------------------------------------------------------------------
"Recom
PRs: 59450, 63386"
-------------------------------------------------------------------------
=========================================================================
"ret_xml = ''
try:
    ret_xml = get_nc_config(self.module, CE_NC_GET_SCP_ENABLE)
except ConnectionError:
    self.module.fail_json(msg='Error: The NETCONF API of scp_enable is not supported.')

    return False
"
-------------------------------------------------------------------------
"```python
ret_xml = ''
try:
    ret_xml = get_nc_config(self.module, CE_NC_GET_SCP_ENABLE)
except ConnectionError:
    self.module.fail_json(msg='Error: The NETCONF API of scp_enable is not supported.')
    return False
```"
-------------------------------------------------------------------------
"ret_xml = ''
try:
    ret_xml = get_nc_config(self.module, CE_NC_GET_SCP_ENABLE)
except ConnectionError:
    self.module.fail_json(msg='Error: The NETCONF API of scp_enable is not supported.')

    return False
"
-------------------------------------------------------------------------
"Recom
PRs: 59450, 63386"
-------------------------------------------------------------------------
=========================================================================
"topo1 = root.find(""sshs/sshServer/scpEnable"")
topo2 = root.find(""sshs/sshServerEnable/scpIpv4Enable"")
topo3 = root.find(""sshs/sshServerEnable/scpIpv6Enable"")
if topo1 is not None:
    return str(topo1.text).strip().lower() == 'enable'
elif self.host_is_ipv6 and topo3 is not None:
    return str(topo3.text).strip().lower() == 'enable'
elif topo2 is not None:
    return str(topo2.text).strip().lower() == 'enable'
return False
"
-------------------------------------------------------------------------
"```python
topo1 = root.find(""sshs/sshServer/scpEnable"")
topo2 = root.find(""sshs/sshServerEnable/scpIpv4Enable"")
topo3 = root.find(""sshs/sshServerEnable/scpIpv6Enable"")
if topo1 is not None:
    return str(topo1.text).strip().lower() == 'enable'
elif self.host_is_ipv6 and topo3 is not None:
    return str(topo3.text).strip().lower() == 'enable'
elif topo2 is not None:
    return str(topo2.text).strip().lower() == 'enable'
return False
```"
-------------------------------------------------------------------------
"topo1 = root.find(""sshs/sshServer/scpEnable"")
topo2 = root.find(""sshs/sshServerEnable/scpIpv4Enable"")
topo3 = root.find(""sshs/sshServerEnable/scpIpv6Enable"")
if topo1 is not None:
    return str(topo1.text).strip().lower() == 'enable'
elif self.host_is_ipv6 and topo3 is not None:
    return str(topo3.text).strip().lower() == 'enable'
elif topo2 is not None:
    return str(topo2.text).strip().lower() == 'enable'
return False
"
-------------------------------------------------------------------------
"Recom
PRs: 59450, 63386"
-------------------------------------------------------------------------
=========================================================================
"scp_enable = self.get_scp_enable()
if not scp_enable:
    if self.host_is_ipv6:
        self.module.fail_json(
            msg=""'Error: Please ensure ipv6 SCP server are enabled.'"")
    else:
        self.module.fail_json(
            msg=""'Error: Please ensure ipv4 SCP server are enabled.'"")
"
-------------------------------------------------------------------------
"```python
scp_enable = self.get_scp_enable()
if not scp_enable:
    if self.host_is_ipv6:
        self.module.fail_json(
            msg=""'Error: Please ensure ipv6 SCP server are enabled.'"")
    else:
        self.module.fail_json(
            msg=""'Error: Please ensure ipv4 SCP server are enabled.'"")
```"
-------------------------------------------------------------------------
"scp_enable = self.get_scp_enable()
if not scp_enable:
    if self.host_is_ipv6:
        self.module.fail_json(
            msg=""'Error: Please ensure ipv6 SCP server are enabled.'"")
    else:
        self.module.fail_json(
            msg=""'Error: Please ensure ipv4 SCP server are enabled.'"")
"
-------------------------------------------------------------------------
"Recom
PRs: 59450, 63386"
-------------------------------------------------------------------------
=========================================================================
"self.cron_cmd = self.module.get_bin_path('crontab', required=True)
"
-------------------------------------------------------------------------
"self.cron_cmd = self.module.get_bin_path('crontab', required=True)"
-------------------------------------------------------------------------
"self.cron_cmd = self.module.get_bin_path('crontab', required=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 63279, 63338"
-------------------------------------------------------------------------
=========================================================================
"unless the I(force) option is set.
"
-------------------------------------------------------------------------
"Adapt the given code snippet based on the provided information:

```diff
- Expr(value=UnaryOp(op=USub(), operand=Name(id='tmpfs', ctx=Load()))
+ Unless the I(force) option is set.
```"
-------------------------------------------------------------------------
"unless the I(force) option is set.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"- To use binary I(data), it is better to keep it Base64 encoded and let it
"
-------------------------------------------------------------------------
"- Expr(value=UnaryOp(op=USub(), operand=Constant(value='To use binary I(data), it is better to keep it Base64 encoded and let it')))"
-------------------------------------------------------------------------
"- To use binary I(data), it is better to keep it Base64 encoded and let it
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"- If C(true), an existing config will be replaced, even if it has not been changed.
"
-------------------------------------------------------------------------
"- If C(true), an existing config will be replaced, even if it has not been changed."
-------------------------------------------------------------------------
"- If C(true), an existing config will be replaced, even if it has not been changed.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"returned: success and I(state) is C(present)
"
-------------------------------------------------------------------------
"RETURN = '''
 config_id:
   description:
     - The ID assigned by Docker to the config object.
   type: str
   sample: 'hzehrmyjigmcp2gb6nlhmjqcv'
 '''
Required dependency: 
Original metadata: [2.8] docker_* modules: docs improvements
--##### SUMMARY
Backport of #63165 to stable-2.8. Improves documentation of various `docker_*` modules.
--##### ISSUE TYPE
- Docs Pull Request
--##### COMPONENT NAME
docker_config.py
docker_container.py
docker_container_info.py
docker_image.py
docker_network.py
docker_network_info.py
docker_prune.py
docker_secret.py
docker_stack.py
docker_swarm.py
docker_swarm_info.py
docker_swarm_service.py
docker_volume.py
docker_volume_info.py
lib/ansible/plugins/doc_fragments/docker.py
cloud, backport, module, docker, community_review, support:community, docs, affects_2.8

Functional set for the hunk: success
Compilation set for the hunk: state=present
Library information from Stable: 
Function name information from Stable: 
Function call information from Stable: 
Class name information from Stable: 
Class method call information from Stable: 
Target file: docker_host, When, DOCKER_CERT_PATH, tls, seconds, them, COPYING, connect, example, debug, TLS, fragment, for, ca_cert, key_path, tls_ca_cert, DOCKER_TLS_HOSTNAME, certificate, tls_verify, yes, SSL, You, docker, must, host, running, determined, License, DOCKER_CONFIG, here, is, str, json, timeout, If, daemon, you, sets, no, HOME, allows, name, docker_api_version, DOCUMENTATION, tls_client_cert, be, mode, The, py, shipped, URL, int, requirements, class, ssl_version, can, github, provide, Python, GNU, bool, modules, variables, Secure, or, response, more, pip, when, number, stable, project, general, done, task, Use, superseded, the, localhost, to, General, unix, precedence, been, readthedocs, used, by, cert, U, Please, module, verifying, path, validate_certs, file, additional, docker_url, Debug, See, might, DOCKER_TIMEOUT, tls_hostname, object, verification, For, maximum, I, doc, key, Otherwise, should, up, remote, DOCKER_PY_1_DOCUMENTATION, ModuleDocFragment, it, DOCKER_TLS_VERIFY, Note, on, ca, en, This, DOCKER_PY_2_DOCUMENTATION, Provide, It, SDK, that, recommended, few, encrypt, pem, value, sock, DOCKER_HOST, io, gnu, s, specific, client, performing, L, from, reinstall, script, org, CA, same, without, a, connecting, In, issues, stuff, txt, tcp, Path, run, time, valid, Default, configuration, type, define, default, install, string, TCP, packages, automatically, socket, API, work, connection, Host, requires, does, other, installing, in, amount, aliases, providing, specify, will, has, replace, client_cert, wait, very, licenses, this, uninstalled, cert_path, gpl, ssl, instead, both, machine, r, options, www, v3, variable, authenticity, Public, api_version, defining, version, required, environment, coding, not, com, DOCKER_API_VERSION, Connect, set, notes, tls_client_key, are, need, Additional, Also, DOCKER_SSL_VERSION, parameters, newer, at, one, expected, using, server, Defaults, cacert_path, longer, DOCKER_TLS, with, these, otherwise, only, To, function, C, product, utf, latest, Unix, if, use, see, installed, take, well, https, var, config, description, minimal, note, and, each, specified, M, Docker, of, auto, client_key, supported, as, directory, functions, details, pypi"
-------------------------------------------------------------------------
"returned: success and I(state) is C(present)
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"- Enable auto-removal of the container on daemon side when the container's process exits.
"
-------------------------------------------------------------------------
- Enable auto-removal of the container on daemon side when the container's process exits.
-------------------------------------------------------------------------
"- Enable auto-removal of the container on daemon side when the container's process exits.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"- Command to execute when the container starts. A command may be either a string or a list.
  or not.
- Only options which correspond to the state of a container as handled by the
  Docker daemon can be specified, as well as C(networks).
"
-------------------------------------------------------------------------
"- Command to execute when the container starts. A command may be either a string or a list.
  or not.
- Only options which correspond to the state of a container as handled by the
  Docker daemon can be specified, as well as C(networks).
- Expr(value=UnaryOp(op=USub(), operand=Name(id='consistent', ctx=Load())))"
-------------------------------------------------------------------------
"- Command to execute when the container starts. A command may be either a string or a list.
  or not.
- Only options which correspond to the state of a container as handled by the
  Docker daemon can be specified, as well as C(networks).
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"or C(ignore) to *all* comparisons which are not explicitly set to other values.
Limit CPU CFS (Completely Fair Scheduler) period.
Limit CPU CFS (Completely Fair Scheduler) quota.
"
-------------------------------------------------------------------------
"```python
   cpu_period:
     description: ""Limit CPU CFS (Completely Fair Scheduler) period.""
     type: int
     default: C(ignore)
   cpu_quota:
     description: ""Limit CPU CFS (Completely Fair Scheduler) quota.""
     type: int
     default: C(ignore)
```"
-------------------------------------------------------------------------
"or C(ignore) to *all* comparisons which are not explicitly set to other values.
Limit CPU CFS (Completely Fair Scheduler) period.
Limit CPU CFS (Completely Fair Scheduler) quota.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63301"
-------------------------------------------------------------------------
=========================================================================
"unless the I(force) option is set.
"
-------------------------------------------------------------------------
"- Expr(value=UnaryOp(op=USub(), operand=Name(id='consistent', ctx=Load())))
?                                                ++++++ ^^^

- Expr(value=UnaryOp(op=USub(), operand=Constant(value='Device read limit in format C(<number>[<unit>]).')))
+ Expr(value=UnaryOp(op=USub(), operand=Constant(value='Device read limit in format C(<number>[<unit>]).')))
  unless the I(force) option is set."
-------------------------------------------------------------------------
"unless the I(force) option is set.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- To use binary I(data), it is better to keep it Base64 encoded and let it
"
-------------------------------------------------------------------------
"- Expr(value=UnaryOp(op=USub(), operand=Constant(value='To use binary data, it is better to keep it Base64 encoded and let it be decoded.')))"
-------------------------------------------------------------------------
"- To use binary I(data), it is better to keep it Base64 encoded and let it
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- If C(true), an existing config will be replaced, even if it has not been changed.
"
-------------------------------------------------------------------------
"- If C(true), an existing config will be replaced, even if it has not been changed."
-------------------------------------------------------------------------
"- If C(true), an existing config will be replaced, even if it has not been changed.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"returned: success and I(state) is C(present)
"
-------------------------------------------------------------------------
"RETURN = '''
 config_id:
   description:
     - The ID assigned by Docker to the config object.
   type: str
   sample: 'hzehrmyjigmcp2gb6nlhmjqcv'
 '''
+ __future__,
RETURN = '''
 returned: success and I(state) is C(present)
'''"
-------------------------------------------------------------------------
"returned: success and I(state) is C(present)
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Enable auto-removal of the container on daemon side when the container's process exits.
"
-------------------------------------------------------------------------
- Enable auto-removal of the container on daemon side when the container's process exits.
-------------------------------------------------------------------------
"- Enable auto-removal of the container on daemon side when the container's process exits.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Command to execute when the container starts. A command may be either a string or a list.
  or not.
- Only options which correspond to the state of a container as handled by the
  Docker daemon can be specified, as well as C(networks).
"
-------------------------------------------------------------------------
"- Command to execute when the container starts. A command may be either a string or a list.
  or not.
- Only options which correspond to the state of a container as handled by the
  Docker daemon can be specified, as well as C(networks)."
-------------------------------------------------------------------------
"- Command to execute when the container starts. A command may be either a string or a list.
  or not.
- Only options which correspond to the state of a container as handled by the
  Docker daemon can be specified, as well as C(networks).
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"or C(ignore) to *all* comparisons which are not explicitly set to other values.
Limit CPU CFS (Completely Fair Scheduler) period.
Limit CPU CFS (Completely Fair Scheduler) quota.
"
-------------------------------------------------------------------------
"Current context: options:
         or restarted if the module option contains a key which isn't present in the
         container's option, or if the value of a key present differs.
       - The wildcard option C(*) can be used to set one of the default values C(strict)
       - See the examples for details.
     type: dict
     version_added: ""2.8""
   cpu_period:
     description:
     type: int
   cpu_quota:
     description:
     type: int
   cpuset_cpus:
     description:
Required dependency: __future__, 
Original metadata: [2.9] docker_* modules: docs improvements
--##### SUMMARY
Backport of #63165 to stable-2.9. Improves documentation of various `docker_*` modules.

##### ISSUE TYPE
- Docs Pull Request

##### COMPONENT NAME
docker_config.py
docker_container.py
docker_container_info.py
docker_image.py
docker_network.py
docker_network_info.py
docker_prune.py
docker_secret.py
docker_stack.py
docker_swarm.py
docker_swarm_info.py
docker_swarm_service.py
docker_volume.py
docker_volume_info.py
lib/ansible/plugins/doc_fragments/docker.py
cloud, backport, module, shipit, docker, support:community, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: __future__.print_function, __future__.absolute_import, __future__.division
Function name information from Stable: 
Function call information from Stable: 
Class name information from Stable: ModuleDocFragment
Class method call information from Stable: 
Target file: docker_host, When, division, DOCKER_CERT_PATH, tls, __metaclass__, seconds, them, COPYING, connect, example, debug, TLS, fragment, for, ca_cert, key_path, tls_ca_cert, DOCKER_TLS_HOSTNAME, certificate, tls_verify, yes, SSL, You, docker, must, host, running, determined, License, DOCKER_CONFIG, here, is, str, json, timeout, If, daemon, you, sets, no, HOME, allows, name, docker_api_version, DOCUMENTATION, tls_client_cert, be, mode, The, py, shipped, URL, int, requirements, class, ssl_version, can, github, provide, Python, GNU, bool, modules, variables, Secure, or, response, more, pip, when, number, stable, project, general, done, task, Use, superseded, the, localhost, to, General, unix, precedence, been, readthedocs, used, by, cert, U, Please, module, verifying, path, validate_certs, file, additional, docker_url, Debug, See, might, DOCKER_TIMEOUT, tls_hostname, object, verification, For, maximum, I, doc, key, Otherwise, should, up, remote, DOCKER_PY_1_DOCUMENTATION, ModuleDocFragment, it, DOCKER_TLS_VERIFY, __future__, Note, on, ca, en, This, DOCKER_PY_2_DOCUMENTATION, Provide, It, SDK, that, recommended, few, encrypt, pem, value, sock, DOCKER_HOST, absolute_import, io, gnu, s, specific, client, performing, L, from, reinstall, script, org, CA, same, without, a, connecting, In, issues, stuff, txt, tcp, Path, run, time, valid, Default, configuration, type, define, default, install, string, TCP, packages, automatically, socket, API, work, connection, Host, requires, does, other, installing, in, amount, print_function, aliases, providing, specify, will, has, replace, client_cert, wait, very, licenses, this, uninstalled, cert_path, gpl, ssl, instead, both, machine, r, options, www, v3, variable, authenticity, Public, api_version, defining, version, required, environment, coding, not, com, DOCKER_API_VERSION, Connect, set, notes, tls_client_key, are, need, Additional, Also, DOCKER_SSL_VERSION, parameters, newer, at, one, expected, using, server, Defaults, cacert_path, longer, DOCKER_TLS, with, these, import, only, otherwise, To, function, C, product, utf, latest, Unix, if, use, see, installed, take, well, https, var, config, description, minimal, note, and, each, specified, M, Docker, of, auto, client_key, supported, as, directory, functions, details, pypi

Adapt this - or C(ignore) to *all* comparisons which are not explicitly set to other values.
Limit CPU CFS (Completely Fair Scheduler) period.
Limit CPU CFS (Completely Fair Scheduler) quota.
No need to provide extra information."
-------------------------------------------------------------------------
"or C(ignore) to *all* comparisons which are not explicitly set to other values.
Limit CPU CFS (Completely Fair Scheduler) period.
Limit CPU CFS (Completely Fair Scheduler) quota.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Memory nodes (MEMs) in which to allow execution C(0-3) or C(0,1).
"
-------------------------------------------------------------------------
"Memory nodes (MEMs) in which to allow execution C(0-3) or C(0,1)."
-------------------------------------------------------------------------
"- Memory nodes (MEMs) in which to allow execution C(0-3) or C(0,1).
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- If disabled, the task will reflect the status of the container run (failed if the command failed).
- List of host device bindings to add to the container.
- ""Each binding is a mapping expressed in the format C(<path_on_host>:<path_in_container>:<cgroup_permissions>).""
"
-------------------------------------------------------------------------
"- If disabled, the task will reflect the status of the container run (failed if the command failed).
- List of host device bindings to add to the container.
- Device read limit in format C(<number>[<unit>])."
-------------------------------------------------------------------------
"- If disabled, the task will reflect the status of the container run (failed if the command failed).
- List of host device bindings to add to the container.
- ""Each binding is a mapping expressed in the format C(<path_on_host>:<path_in_container>:<cgroup_permissions>).""
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""Device read limit in format C(<number>[<unit>]).""
  C(T) (tebibyte), or C(P) (pebibyte).""
"
-------------------------------------------------------------------------
"- ""Device read limit in format C(<number>[<unit>])."""
-------------------------------------------------------------------------
"- ""Device read limit in format C(<number>[<unit>]).""
  C(T) (tebibyte), or C(P) (pebibyte).""
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""Device read limit in format C(<number>[<unit>]).""
  C(T) (tebibyte), or C(P) (pebibyte).""
"
-------------------------------------------------------------------------
"- Expr(value=UnaryOp(op=USub(), operand=Constant(value='Device read limit in format C(<number>[<unit>]). C(T) (tebibyte), or C(P) (pebibyte).'))"
-------------------------------------------------------------------------
"- ""Device read limit in format C(<number>[<unit>]).""
  C(T) (tebibyte), or C(P) (pebibyte).""
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- List of DNS options.
"
-------------------------------------------------------------------------
- List of DNS options.
-------------------------------------------------------------------------
"- List of DNS options.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- If variable also present in I(env), then the I(env) value will override.
- Command that overwrites the default C(ENTRYPOINT) of the image.
  Each host name will be added to the container's C(/etc/hosts) file.
- If the port is already exposed using C(EXPOSE) in a Dockerfile, it does not
"
-------------------------------------------------------------------------
"- If variable also present in I(env), then the I(env) value will override.
- Command that overwrites the default C(ENTRYPOINT) of the image.
  Each host name will be added to the container's C(/etc/hosts) file.
- If the port is already exposed using C(EXPOSE) in a Dockerfile, it does not"
-------------------------------------------------------------------------
"- If variable also present in I(env), then the I(env) value will override.
- Command that overwrites the default C(ENTRYPOINT) of the image.
  Each host name will be added to the container's C(/etc/hosts) file.
- If the port is already exposed using C(EXPOSE) in a Dockerfile, it does not
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Configure a check that is run to determine whether or not containers for this service are ""healthy"".
- ""See the docs for the L(HEALTHCHECK Dockerfile instruction,https://docs.docker.com/engine/reference/builder/#healthcheck)
  for details on how healthchecks work.""
- ""I(interval), I(timeout) and I(start_period) are specified as durations. They accept duration as a string in a format
  that look like: C(5h34m56s), C(1m30s) etc. The supported units are C(us), C(ms), C(s), C(m) and C(h).""
"
-------------------------------------------------------------------------
"```python
- name: Configure a check that is run to determine whether or not containers for this service are ""healthy""
  docker_swarm_service:
    name: my_web_app
    healthcheck:
      test: [""CMD"", ""curl"", ""-f"", ""http://localhost""]
      interval: ""30s""
      timeout: ""10s""
      retries: 3
- debug:
    msg: ""See the docs for the HEALTHCHECK Dockerfile instruction, https://docs.docker.com/engine/reference/builder/#healthcheck for details on how healthchecks work.""
  when: False
- debug:
    msg: ""interval, timeout and start_period are specified as durations. They accept duration as a string in a format that look like: 5h34m56s, 1m30s etc. The supported units are us, ms, s, m and h.""
  when: False
```"
-------------------------------------------------------------------------
"- Configure a check that is run to determine whether or not containers for this service are ""healthy"".
- ""See the docs for the L(HEALTHCHECK Dockerfile instruction,https://docs.docker.com/engine/reference/builder/#healthcheck)
  for details on how healthchecks work.""
- ""I(interval), I(timeout) and I(start_period) are specified as durations. They accept duration as a string in a format
  that look like: C(5h34m56s), C(1m30s) etc. The supported units are C(us), C(ms), C(s), C(m) and C(h).""
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Time between running the check.
- The default used by the Docker daemon is C(30s).
- Maximum time to allow one check to run.
- The default used by the Docker daemon is C(30s).
- Consecutive number of failures needed to report unhealthy.
- The default used by the Docker daemon is C(3).
- Start period for the container to initialize before starting health-retries countdown.
- The default used by the Docker daemon is C(0s).
e container's hostname.
en I(state) is C(present) or C(started), the module compares the configuration of an existing
ntainer to requested configuration. The evaluation includes the image version. If the image
rsion in the registry does not match the container, the container will be recreated. You can
op this behavior by setting I(ignore_image) to C(True).
Warning:* This option is ignored if C(image: ignore) or C(*: ignore) is specified in the
comparisons) option.""
"
-------------------------------------------------------------------------
"- Time between running the health check.
- The default used by the Docker daemon is 30 seconds.
- Maximum time to allow one health check to run.
- The default used by the Docker daemon is 30 seconds.
- Consecutive number of failures needed to report the container as unhealthy.
- The default used by the Docker daemon is 3.
- Start period for the container to initialize before starting the health check retries countdown. 
- The default used by the Docker daemon is 0 seconds.
  When `state` is `present` or `started`, the module compares the existing container's configuration with the requested configuration. This evaluation includes the image version. If the image version in the registry does not match the container, the container will be recreated. You can override this behavior by setting `ignore_image` to `True`.
  Warning: This option is ignored if `image:ignore` or `*: ignore` is specified in the comparisons option."
-------------------------------------------------------------------------
"- Time between running the check.
- The default used by the Docker daemon is C(30s).
- Maximum time to allow one check to run.
- The default used by the Docker daemon is C(30s).
- Consecutive number of failures needed to report unhealthy.
- The default used by the Docker daemon is C(3).
- Start period for the container to initialize before starting health-retries countdown.
- The default used by the Docker daemon is C(0s).
e container's hostname.
en I(state) is C(present) or C(started), the module compares the configuration of an existing
ntainer to requested configuration. The evaluation includes the image version. If the image
rsion in the registry does not match the container, the container will be recreated. You can
op this behavior by setting I(ignore_image) to C(True).
Warning:* This option is ignored if C(image: ignore) or C(*: ignore) is specified in the
comparisons) option.""
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"The I(pull) option is ignored for this case.
This option requires Docker API >= 1.25.
"
-------------------------------------------------------------------------
"```diff
-       - Repository path and tag used to create the container. If an image is not found or pull is true, the image
+       - Repository path and tag used to create the container. If an image is not found,
-             will be pulled from the registry. If no tag is included, C(latest) will be used.
    +             the image This option requires Docker API >= 1.25.
```"
-------------------------------------------------------------------------
"The I(pull) option is ignored for this case.
This option requires Docker API >= 1.25.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Set the IPC mode for the container.
- Can be one of C(container:<name|id>) to reuse another container's IPC namespace or C(host) to use
  the host's IPC namespace within the container.
"
-------------------------------------------------------------------------
"- Set the IPC mode for the container.
- Can be one of C(container:<name|id>) to reuse another container's IPC namespace or C(host) to use the host's IPC namespace within the container."
-------------------------------------------------------------------------
"- Set the IPC mode for the container.
- Can be one of C(container:<name|id>) to reuse another container's IPC namespace or C(host) to use
  the host's IPC namespace within the container.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""Kernel memory limit in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"- Expr(value=UnaryOp(op=USub(), operand=Constant(value='Kernel memory limit in format C(<number>[<unit>]). Number is a positive integer.')))"
-------------------------------------------------------------------------
"- ""Kernel memory limit in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Specify the logging driver. Docker uses C(json-file) by default.
- Dictionary of options specific to the chosen I(log_driver).
- See U(https://docs.docker.com/engine/admin/logging/overview/) for details.
- Container MAC address (e.g. 92:d0:c6:0a:29:33).
- ""Memory limit in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"```diff
  options:
     elements: str
-  log_driver:
+  log_driver: str
     description:
-       - See L(https://docs.docker.com/engine/admin/logging/overview/)` for details.
+       - See U(https://docs.docker.com/engine/admin/logging/overview/) for details.
   log_options:
     description:
     type: dict
     aliases:
       - log_opt
   mac_address:
-    description:
+    description: str
   memory:
     description:
+      - Memory limit in format C(<number>[<unit>]). Number is a positive integer.
         Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
         C(T) (tebibyte), or C(P) (pebibyte).""
-      - Omitting the unit defaults to bytes.
```
"
-------------------------------------------------------------------------
"- Specify the logging driver. Docker uses C(json-file) by default.
- Dictionary of options specific to the chosen I(log_driver).
- See U(https://docs.docker.com/engine/admin/logging/overview/) for details.
- Container MAC address (e.g. 92:d0:c6:0a:29:33).
- ""Memory limit in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""Memory soft limit in format C(<number>[<unit>]). Number is a positive integer.
- ""Total memory limit (memory  swap) in format C(<number>[<unit>]).
"
-------------------------------------------------------------------------
"Expr(value=UnaryOp(op=USub(), operand=Constant(value='Memory soft limit in format C(<number>[<unit>]). Number is a positive integer.'))),
Expr(value=UnaryOp(op=USub(), operand=Constant(value='Total memory limit (memory  swap) in format C(<number>[<unit>]).')))"
-------------------------------------------------------------------------
"- ""Memory soft limit in format C(<number>[<unit>]). Number is a positive integer.
- ""Total memory limit (memory  swap) in format C(<number>[<unit>]).
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- If not set, the value will be remain the same if container exists and will be inherited
  from the host machine if it is (re-)created.
Specification for mounts to be added to the container. More powerful alternative to I(volumes).
"
-------------------------------------------------------------------------
"If not set, the value will remain the same if the container exists and will be inherited from the host machine if it is (re-)created.  
Specification for mounts to be added to the container. A more powerful alternative to volumes."
-------------------------------------------------------------------------
"- If not set, the value will be remain the same if container exists and will be inherited
  from the host machine if it is (re-)created.
Specification for mounts to be added to the container. More powerful alternative to I(volumes).
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- bind
- npipe
- tmpfs
- volume
- Whether the mount should be read-only.
- The consistency requirement for the mount.
- cached
- consistent
- default
- delegated
- private
- rprivate
- shared
- rshared
- slave
- rslave
"
-------------------------------------------------------------------------
"- Whether the mount should be read-only.
- The consistency requirement for the mount.
- cached
- consistent
- default
- delegated
- private
- rprivate
- shared
- rshared
- slave
- rslave"
-------------------------------------------------------------------------
"- bind
- npipe
- tmpfs
- volume
- Whether the mount should be read-only.
- The consistency requirement for the mount.
- cached
- consistent
- default
- delegated
- private
- rprivate
- shared
- rshared
- slave
- rslave
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Dictionary of options specific to the chosen volume_driver. See
  L(here,https://docs.docker.com/storage/volumes/#use-a-volume-driver) for details.
- ""The size for the tmpfs mount in bytes in format <number>[<unit>].""
   C(T) (tebibyte), or C(P) (pebibyte).""
"
-------------------------------------------------------------------------
"- Dictionary of options specific to the chosen volume_driver. See
  L(here,https://docs.docker.com/storage/volumes/#use-a-volume-driver) for details.
- ""The size for the consistent tmpfs mount in bytes in format <number>[<unit>].""
"
-------------------------------------------------------------------------
"- Dictionary of options specific to the chosen volume_driver. See
  L(here,https://docs.docker.com/storage/volumes/#use-a-volume-driver) for details.
- ""The size for the tmpfs mount in bytes in format <number>[<unit>].""
   C(T) (tebibyte), or C(P) (pebibyte).""
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Connect the container to a network. Choices are C(bridge), C(host), C(none) or C(container:<name|id>).
- Set the user namespace mode for the container. Currently, the only valid value are C(host) and the empty string.
- To remove a container from one or more networks, use the I(purge_networks) option.
  network if I(networks) is specified. You need to explicitly use I(purge_networks) to enforce
  the removal of the default network (and all other networks not explicitly mentioned in I(networks)).
  Alternatively, use the I(networks_cli_compatible) option, which will be enabled by default from Ansible 2.12 on.
"
-------------------------------------------------------------------------
"To reflect the requested change:

```python
- Connect the container to a network. Choices are C(bridge), C(host), C(none) or C(container:<name|id>).
- Set the user namespace mode for the container. Currently, the only valid value are C(host) and the empty string.
- To remove a container from one or more networks, use the I(purge_networks) option.
  network if I(networks) is specified. You need to explicitly use I(purge_networks) to enforce
  the removal of the default network (and all other networks not explicitly mentioned in I(networks)).
  Alternatively, use the I(networks_cli_compatible) option, which will be enabled by default from Ansible 2.12 on.
```"
-------------------------------------------------------------------------
"- Connect the container to a network. Choices are C(bridge), C(host), C(none) or C(container:<name|id>).
- Set the user namespace mode for the container. Currently, the only valid value are C(host) and the empty string.
- To remove a container from one or more networks, use the I(purge_networks) option.
  network if I(networks) is specified. You need to explicitly use I(purge_networks) to enforce
  the removal of the default network (and all other networks not explicitly mentioned in I(networks)).
  Alternatively, use the I(networks_cli_compatible) option, which will be enabled by default from Ansible 2.12 on.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"not attached. This module with I(networks: {name: other}) will create a container
C(docker run --network) and will *not* add the default network if I(networks) is
specified. If I(networks) is not specified, the default network will be attached.""
Note that docker CLI also sets I(network_mode) to the name of the first network
explicitly have to set I(network_mode) to the name of the first network you're
"
-------------------------------------------------------------------------
"When networks are provided to the module via the `networks` option with `{name: other}`, the module will create a container with network `other` attached and will not add the default network if `networks` is specified. If no `networks` are specified, the default network will be attached. Note that the docker CLI also sets `network_mode` to the name of the first network explicitly, so you have to set `network_mode` to the name of the first network you're using."
-------------------------------------------------------------------------
"not attached. This module with I(networks: {name: other}) will create a container
C(docker run --network) and will *not* add the default network if I(networks) is
specified. If I(networks) is not specified, the default network will be attached.""
Note that docker CLI also sets I(network_mode) to the name of the first network
explicitly have to set I(network_mode) to the name of the first network you're
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- If set to true, output of the container command will be printed.
- Only effective when I(log_driver) is set to C(json-file) or C(journald).
"
-------------------------------------------------------------------------
"- If set to true, the output of the container command will be printed.
- Only effective when `log_driver` is set to `json-file` or `journald`."
-------------------------------------------------------------------------
"- If set to true, output of the container command will be printed.
- Only effective when I(log_driver) is set to C(json-file) or C(journald).
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Note that Docker SDK for Python < 2.0 only supports C(host). Newer versions of the
  Docker SDK for Python (docker) allow all values supported by the Docker daemon.
- Set C(-1) for unlimited PIDs.
"
-------------------------------------------------------------------------
"```python
- Note that Docker SDK for Python < 2.0 only supports C(host). Newer versions of the Docker SDK for Python (docker) allow all values supported by the Docker daemon.
- Set C(consistent) for unlimited PIDs.
```"
-------------------------------------------------------------------------
"- Note that Docker SDK for Python < 2.0 only supports C(host). Newer versions of the
  Docker SDK for Python (docker) allow all values supported by the Docker daemon.
- Set C(-1) for unlimited PIDs.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""Bind addresses must be either IPv4 or IPv6 addresses. Hostnames are *not* allowed. This
- If I(networks) parameter is provided, will inspect each network to see if there exists
  a bridge network with optional parameter C(com.docker.network.bridge.host_binding_ipv4).
  will be bound to the host IP pointed to by C(com.docker.network.bridge.host_binding_ipv4).
  Note that the first bridge network with a C(com.docker.network.bridge.host_binding_ipv4)
  value encountered in the list of I(networks) is the one that will be used.
"
-------------------------------------------------------------------------
"""Bind addresses must be either IPv4 or IPv6 addresses. Hostnames are *not* allowed. This
- If I(networks) parameter is provided, will inspect each network to see if there exists
  a bridge network with optional parameter C(com.docker.network.bridge.host_binding_ipv4).
  will be bound to the host IP pointed to by C(com.docker.network.bridge.host_binding_ipv4).
  Note that the first bridge network with a C(com.docker.network.bridge.host_binding_ipv4)
  value encountered in the list of I(networks) is the one that will be used."
-------------------------------------------------------------------------
"- ""Bind addresses must be either IPv4 or IPv6 addresses. Hostnames are *not* allowed. This
- If I(networks) parameter is provided, will inspect each network to see if there exists
  a bridge network with optional parameter C(com.docker.network.bridge.host_binding_ipv4).
  will be bound to the host IP pointed to by C(com.docker.network.bridge.host_binding_ipv4).
  Note that the first bridge network with a C(com.docker.network.bridge.host_binding_ipv4)
  value encountered in the list of I(networks) is the one that will be used.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""*Note:* images are only pulled when specified by name. If the image is specified
  as a image ID (hash), it cannot be pulled.""
- Remove the container from ALL networks not included in I(networks) parameter.
- Any default networks such as C(bridge), if not found in I(networks), will be removed as well.
"
-------------------------------------------------------------------------
"- ""*Note:* Images are only pulled when specified by name. If the image is specified as an image ID (hash), it cannot be pulled.""
- Remove the container from all networks not included in the 'networks' parameter.
- Any default networks such as 'bridge', if not found in the 'networks', will be removed as well."
-------------------------------------------------------------------------
"- ""*Note:* images are only pulled when specified by name. If the image is specified
  as a image ID (hash), it cannot be pulled.""
- Remove the container from ALL networks not included in I(networks) parameter.
- Any default networks such as C(bridge), if not found in I(networks), will be removed as well.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Container restart policy.
- Place quotes around C(no) option.
"
-------------------------------------------------------------------------
"- Container restart policy.
- Place quotes around ""C(no)"" option."
-------------------------------------------------------------------------
"- Container restart policy.
- Place quotes around C(no) option.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""Size of C(/dev/shm) in format C(<number>[<unit>]). Number is positive integer.
- Omitting the unit defaults to bytes. If you omit the size entirely, Docker daemon uses C(64M).
- List of security options in the form of C(""label:user:User"").
- 'C(absent) - A container matching the specified name will be stopped and removed. Use I(force_kill) to kill the container
   rather than stopping it. Use I(keep_volumes) to retain volumes associated with the removed container.'
- 'C(present) - Asserts the existence of a container matching the name and any provided configuration parameters. If no
  with the requested config.'
- 'C(started) - Asserts that the container is first C(present), and then if the container is not running moves it to a running
  state. Use I(restart) to force a matching container to be stopped and restarted.'
- 'C(stopped) - Asserts that the container is first C(present), and then if the container is running moves it to a stopped
  state.'
- To control what will be taken into account when comparing configuration, see the I(comparisons) option. To avoid that the
  image version will be taken into account, you can also use the I(ignore_image) option.
- Use the I(recreate) option to always force re-creation of a matching container, even if it is running.
- If the container should be killed instead of stopped in case it needs to be stopped for recreation, or because I(state) is
  C(stopped), please use the I(force_kill) option. Use I(keep_volumes) to retain volumes associated with a removed container.
- Use I(keep_volumes) to retain volumes associated with a removed container.
"
-------------------------------------------------------------------------
"Expr(value=UnaryOp(op=USub(), operand=Constant(value='Size of /dev/shm in format (<number>[<unit>]). Number is positive integer. Omitting the unit defaults to bytes. If you omit the size entirely, Docker daemon uses 64M.'))),
Expr(value=UnaryOp(op=USub(), operand=Constant(value='List of security options in the form of ""label:user:User"".'))),
Expr(value=UnaryOp(op=USub(), operand=Constant(value=""'absent' - A container matching the specified name will be stopped and removed. Use 'force_kill' to kill the container rather than stopping it. Use 'keep_volumes' to retain volumes associated with the removed container.""))),
Expr(value=UnaryOp(op=USub(), operand=Constant(value=""'present' - Asserts the existence of a container matching the name and any provided configuration parameters. If no with the requested config.""))),
Expr(value=UnaryOp(op=USub(), operand=Constant(value=""'started' - Asserts that the container is first 'present', and then if the container is not running moves it to a running state. Use 'restart' to force a matching container to be stopped and restarted.""))),
Expr(value=UnaryOp(op=USub(), operand=Constant(value=""'stopped' - Asserts that the container is first 'present', and then if the container is running moves it to a stopped state.""))),
Expr(value=UnaryOp(op=USub(), operand=Constant(value=""To control what will be taken into account when comparing configuration, see the 'comparisons' option. To avoid that the image version will be taken into account, you can also use the 'ignore_image' option.""))),
Expr(value=UnaryOp(op=USub(), operand=Constant(value=""Use the 'recreate' option to always force re-creation of a matching container, even if it is running.""))),
Expr(value=UnaryOp(op=USub(), operand=Constant(value=""If the container should be killed instead of stopped in case it needs to be stopped for recreation, or because 'state' is 'stopped', please use the 'force_kill' option. Use 'keep_volumes' to retain volumes associated with a removed container.""))),
Expr(value=UnaryOp(op=USub(), operand=Constant(value=""Use 'keep_volumes' to retain volumes associated with a removed container."")))"
-------------------------------------------------------------------------
"- ""Size of C(/dev/shm) in format C(<number>[<unit>]). Number is positive integer.
- Omitting the unit defaults to bytes. If you omit the size entirely, Docker daemon uses C(64M).
- List of security options in the form of C(""label:user:User"").
- 'C(absent) - A container matching the specified name will be stopped and removed. Use I(force_kill) to kill the container
   rather than stopping it. Use I(keep_volumes) to retain volumes associated with the removed container.'
- 'C(present) - Asserts the existence of a container matching the name and any provided configuration parameters. If no
  with the requested config.'
- 'C(started) - Asserts that the container is first C(present), and then if the container is not running moves it to a running
  state. Use I(restart) to force a matching container to be stopped and restarted.'
- 'C(stopped) - Asserts that the container is first C(present), and then if the container is running moves it to a stopped
  state.'
- To control what will be taken into account when comparing configuration, see the I(comparisons) option. To avoid that the
  image version will be taken into account, you can also use the I(ignore_image) option.
- Use the I(recreate) option to always force re-creation of a matching container, even if it is running.
- If the container should be killed instead of stopped in case it needs to be stopped for recreation, or because I(state) is
  C(stopped), please use the I(force_kill) option. Use I(keep_volumes) to retain volumes associated with a removed container.
- Use I(keep_volumes) to retain volumes associated with a removed container.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Number of seconds to wait for the container to stop before sending C(SIGKILL).
"
-------------------------------------------------------------------------
"- Number of seconds to wait for the container to stop before sending C(SIGKILL).
"
-------------------------------------------------------------------------
"- Number of seconds to wait for the container to stop before sending C(SIGKILL).
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Mount a tmpfs directory.
"
-------------------------------------------------------------------------
+ Mount a consistent directory.
-------------------------------------------------------------------------
"- Mount a tmpfs directory.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""List of ulimit options. A ulimit is specified as C(nofile:262144:262144).""
"
-------------------------------------------------------------------------
"- ""List of ulimit options. A ulimit is specified as C(nofile:262144:262144)."""
-------------------------------------------------------------------------
"- ""List of ulimit options. A ulimit is specified as C(nofile:262144:262144).""
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""Can be of the forms C(user), C(user:group), C(uid), C(uid:gid), C(user:gid) or C(uid:group).""
"
-------------------------------------------------------------------------
"- Expr(value=UnaryOp(op=USub(), operand=Constant(value='Can be of the forms C(user), C(user:group), C(uid), C(uid:gid), C(user:gid) or C(uid:group).'))"
-------------------------------------------------------------------------
"- ""Can be of the forms C(user), C(user:group), C(uid), C(uid:gid), C(user:gid) or C(uid:group).""
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- SELinux hosts can additionally use C(z) or C(Z) to use a shared or private label for the volume.
"
-------------------------------------------------------------------------
- SELinux hosts can additionally use C(z) or C(Z) to use a shared or private label for the volume.
-------------------------------------------------------------------------
"- SELinux hosts can additionally use C(z) or C(Z) to use a shared or private label for the volume.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- List of container names or IDs to get volumes from.
"
-------------------------------------------------------------------------
- List of container names or IDs to get volumes from.
-------------------------------------------------------------------------
"- List of container names or IDs to get volumes from.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Empty if I(state) is C(absent)
- If I(detached) is C(false), will include C(Output) attribute containing any output from container run.
"
-------------------------------------------------------------------------
"- Empty if I(state) is C(absent)
- If I(detached) is C(false), will include C(Output) attribute containing any output from container run."
-------------------------------------------------------------------------
"- Empty if I(state) is C(absent)
- If I(detached) is C(false), will include C(Output) attribute containing any output from container run.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Will be C(none) if container does not exist.
"
-------------------------------------------------------------------------
- Will be C(none) if consistent does not exist.
-------------------------------------------------------------------------
"- Will be C(none) if container does not exist.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Since Ansible 2.8, it is recommended to explicitly specify the image's source (I(source) can be C(build),
  C(load), C(pull) or C(local)). This will be required from Ansible 2.12 on.
    - ""Use C(build) to build the image from a C(Dockerfile). I(build.path) must
"
-------------------------------------------------------------------------
"```python
- Since Ansible 2.8, it is recommended to explicitly specify the image's source (I(source) can be C(build),
  C(load), C(pull) or C(local)). This will be required from Ansible 2.12 on.
    - ""Use C(build) to build the image from a C(Dockerfile). I(build.path) must
```"
-------------------------------------------------------------------------
"- Since Ansible 2.8, it is recommended to explicitly specify the image's source (I(source) can be C(build),
  C(load), C(pull) or C(local)). This will be required from Ansible 2.12 on.
    - ""Use C(build) to build the image from a C(Dockerfile). I(build.path) must
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- If set to C(yes) and a proxy configuration is specified in the docker client configuration
"
-------------------------------------------------------------------------
If set to C(yes) and a proxy configuration is specified in the docker client configuration
-------------------------------------------------------------------------
"- If set to C(yes) and a proxy configuration is specified in the docker client configuration
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""*Note:* C(state=build) is DEPRECATED and will be removed in Ansible 2.11. Specifying C(build) will behave the
"
-------------------------------------------------------------------------
"""*Note:* C(state=build) is DEPRECATED and will be removed in Ansible 2.11. Specifying C(build) will behave the"
-------------------------------------------------------------------------
"- ""*Note:* C(state=build) is DEPRECATED and will be removed in Ansible 2.11. Specifying C(build) will behave the
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- If I(name) parameter format is I(name:tag), then tag value from I(name) will take precedence.
"
-------------------------------------------------------------------------
"- If C(name) parameter format is C(name:tag), then tag value from C(name) will take precedence."
-------------------------------------------------------------------------
"- If I(name) parameter format is I(name:tag), then tag value from I(name) will take precedence.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""*Note:* If you specify this option, it will set the value of the I(tls) or
  I(validate_certs) parameters if not set to C(no).""
"
-------------------------------------------------------------------------
"- ""*Note:* If you specify this option, it will set the value of the I(encrypt) or I(consistent) parameters if not set to C(no)."""
-------------------------------------------------------------------------
"- ""*Note:* If you specify this option, it will set the value of the I(tls) or
  I(validate_certs) parameters if not set to C(no).""
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"'""tls"" and ""validate_certs"" options instead.')
"
-------------------------------------------------------------------------
"- Expr(value=UnaryOp(op=USub(), operand=Constant(value='The ""tls"" and ""validate_certs"" options instead.')))"
-------------------------------------------------------------------------
"'""tls"" and ""validate_certs"" options instead.')
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- With state C(absent) forces disconnecting all containers from the
  network prior to deleting the network. With state C(present) will
  network.
- This option is required if you have changed the IPAM or driver options
  and want an existing network to be updated to use the new options.
- Use I(appends) to leave existing containers connected.
"
-------------------------------------------------------------------------
"```diff
 options:
 
   force:
+    description: By default the connected list is canonical, meaning containers not on the list are removed from the network. With state C(absent) forces disconnecting all containers from the network prior to deleting the network. With state C(present) will. This option is required if you have changed the IPAM or driver options and want an existing network to be updated to use the new options.
     type: bool
     default: no
 
   appends:
     description:
       - Use I(appends) to leave existing containers connected.
     type: bool
     default: no
     aliases:
```  "
-------------------------------------------------------------------------
"- With state C(absent) forces disconnecting all containers from the
  network prior to deleting the network. With state C(present) will
  network.
- This option is required if you have changed the IPAM or driver options
  and want an existing network to be updated to use the new options.
- Use I(appends) to leave existing containers connected.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Deprecated in 2.8, will be removed in 2.12. Use parameter I(ipam_config) instead. In Docker 1.10.0, IPAM
"
-------------------------------------------------------------------------
"- Deprecated in 2.8, will be removed in 2.12. Use parameter I(ipam_config) instead."
-------------------------------------------------------------------------
"- Deprecated in 2.8, will be removed in 2.12. Use parameter I(ipam_config) instead. In Docker 1.10.0, IPAM
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- C(absent) deletes the network. If a network has connected containers, it
  cannot be deleted. Use the I(force) option to disconnect all containers
- C(present) creates the network, if it does not already exist with the
  I(appends) option to leave existing containers connected. Use the I(force)
"
-------------------------------------------------------------------------
"- Expr(value=UnaryOp(op=USub(), operand=Constant(value='Device read limit in format C(<number>[<unit>]).')))
+ Expr(value=UnaryOp(op=USub(), operand=Constant(value='C(absent) deletes the network. If a network has connected containers, it cannot be deleted. Use the I(force) option to disconnect all containers. C(present) creates the network, if it does not already exist with the I(appends) option to leave existing containers connected. Use the I(force)')))"
-------------------------------------------------------------------------
"- C(absent) deletes the network. If a network has connected containers, it
  cannot be deleted. Use the I(force) option to disconnect all containers
- C(present) creates the network, if it does not already exist with the
  I(appends) option to leave existing containers connected. Use the I(force)
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Will be C(none) if network does not exist.
"
-------------------------------------------------------------------------
"Expr(value=UnaryOp(op=USub(), operand=Constant(value='Will be C(none) if network does not exist.')))"
-------------------------------------------------------------------------
"- Will be C(none) if network does not exist.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"returned: I(containers) is C(true)
returned: I(containers) is C(true)
"
-------------------------------------------------------------------------
"```python
RETURN = '''
 containers:
     description:
       - I(containers) is C(true).
     type: bool
'''
```"
-------------------------------------------------------------------------
"returned: I(containers) is C(true)
returned: I(containers) is C(true)
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"returned: I(images) is C(true)
returned: I(images) is C(true)
"
-------------------------------------------------------------------------
"```python
containers_space_reclaimed:
  images:
    description:
      - List of IDs of deleted images.
    type: list
    sample: '[]'
  images_space_reclaimed:
    description:
      - Amount of reclaimed disk space from image pruning in bytes.
    type: int
    sample: '0'
```
"
-------------------------------------------------------------------------
"returned: I(images) is C(true)
returned: I(images) is C(true)
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"returned: I(networks) is C(true)
"
-------------------------------------------------------------------------
returned: C(networks) is C(true)
-------------------------------------------------------------------------
"returned: I(networks) is C(true)
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"returned: I(volumes) is C(true)
returned: I(volumes) is C(true)
"
-------------------------------------------------------------------------
"```python
__future__, 

# ASTs from commit history:
- Expr(value=UnaryOp(op=USub(), operand=Name(id='tmpfs', ctx=Load()))
+ Expr(value=UnaryOp(op=USub(), operand=Name(id='consistent', ctx=Load()))

- Expr(value=UnaryOp(op=USub(), operand=Constant(value='Each binding is a mapping expressed in the format C(<path_on_host>:<path_in_container>:<cgroup_permissions>).')))
+ Expr(value=UnaryOp(op=USub(), operand=Constant(value='Device read limit in format C(<number>[<unit>]).'))

# All other ASTs are unchanged

Current context: 
 networks:
 volumes:
     description:
       - List of IDs of deleted volumes.
     type: list
     sample: '[]'
 volumes_space_reclaimed:
     description:
       - Amount of reclaimed disk space from volumes pruning in bytes.
     type: int
     sample: '0'
 returned: I(volumes) is C(true)
```"
-------------------------------------------------------------------------
"returned: I(volumes) is C(true)
returned: I(volumes) is C(true)
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"returned: I(builder_cache) is C(true)
"
-------------------------------------------------------------------------
returned: I(consistent) is C(true)
-------------------------------------------------------------------------
"returned: I(builder_cache) is C(true)
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"unless the I(force) option is set.
"
-------------------------------------------------------------------------
"- Expr(value=UnaryOp(op=USub(), operand=Constant(value='Device read limit in format C(<number>[<unit>]). unless the I(force) option is set.')))"
-------------------------------------------------------------------------
"unless the I(force) option is set.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- To use binary I(data), it is better to keep it Base64 encoded and let it
- ""A map of key:value meta data, where both key and value are expected to be strings.""
- If C(true), an existing secret will be replaced, even if it has not changed.
"
-------------------------------------------------------------------------
"```diff
- Expr(value=UnaryOp(op=USub(), operand=Constant(value='Each binding is a mapping expressed in the format C(<path_on_host>:<path_in_container>:<cgroup_permissions>).')))
+ Expr(value=UnaryOp(op=USub(), operand=Constant(value='Device read limit in format C(<number>[<unit>]).')))
```"
-------------------------------------------------------------------------
"- To use binary I(data), it is better to keep it Base64 encoded and let it
- ""A map of key:value meta data, where both key and value are expected to be strings.""
- If C(true), an existing secret will be replaced, even if it has not changed.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"returned: success and I(state) is C(present)
"
-------------------------------------------------------------------------
"RETURN = '''
 secret_id:
   description:
     - The ID assigned by Docker to the secret object.
   type: str
   sample: 'hzehrmyjigmcp2gb6nlhmjqcv'
   returned:
     - success and I(state) is C(present)
 '''
Required dependency: __future__, 
Original metadata: [2.9] docker_* modules: docs improvements
--##### SUMMARYBackport of #63165 to stable-2.9. Improves documentation of various `docker_*` modules.##### ISSUE TYPE- Docs Pull Request##### COMPONENT NAMEdocker_config.pydocker_container.pydocker_container_info.pydocker_image.pydocker_network.pydocker_network_info.pydocker_prune.pydocker_secret.pydocker_stack.pydocker_swarm.pydocker_swarm_info.pydocker_swarm_service.pydocker_volume.pydocker_volume_info.pylib/ansible/plugins/doc_fragments/docker.py
cloud, backport, module, shipit, docker, support:community, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: __future__.print_function, __future__.absolute_import, __future__.division
Function name information from Stable: 
Function call information from Stable: 
Class name information from Stable: ModuleDocFragment
Class method call information from Stable: 
Target file: docker_host, When, division, DOCKER_CERT_PATH, tls, __metaclass__, seconds, them, COPYING, connect, example, debug, TLS, fragment, for, ca_cert, key_path, tls_ca_cert, DOCKER_TLS_HOSTNAME, certificate, tls_verify, yes, SSL, You, docker, must, host, running, determined, License, DOCKER_CONFIG, here, is, str, json, timeout, If, daemon, you, sets, no, HOME, allows, name, docker_api_version, DOCUMENTATION, tls_client_cert, be, mode, The, py, shipped, URL, int, requirements, class, ssl_version, can, github, provide, Python, GNU, bool, modules, variables, Secure, or, response, more, pip, when, number, stable, project, general, done, task, Use, superseded, the, localhost, to, General, unix, precedence, been, readthedocs, used, by, cert, U, Please, module, verifying, path, validate_certs, file, additional, docker_url, Debug, See, might, DOCKER_TIMEOUT, tls_hostname, object, verification, For, maximum, I, doc, key, Otherwise, should, up, remote, DOCKER_PY_1_DOCUMENTATION, ModuleDocFragment, it, DOCKER_TLS_VERIFY, __future__, Note, on, ca, en, This, DOCKER_PY_2_DOCUMENTATION, Provide, It, SDK, that, recommended, few, encrypt, pem, value, sock, DOCKER_HOST, absolute_import, io, gnu, s, specific, client, performing, L, from, reinstall, script, org, CA, same, without, a, connecting, In, issues, stuff, txt, tcp, Path, run, time, valid, Default, configuration, type, define, default, install, string, TCP, packages, automatically, socket, API, work, connection, Host, requires, does, other, installing, in, amount, print_function, aliases, providing, specify, will, has, replace, client_cert, wait, very, licenses, this, uninstalled, cert_path, gpl, ssl, instead, both, machine, r, options, www, v3, variable, authenticity, Public, api_version, defining, version, required, environment, coding, not, com, DOCKER_API_VERSION, Connect, set, notes, tls_client_key, are, need, Additional, Also, DOCKER_SSL_VERSION, parameters, newer, at, one, expected, using, server, Defaults, cacert_path, longer, DOCKER_TLS, with, these, import, only, otherwise, To, function, C, product, utf, latest, Unix, if, use, see, installed, take, well, https, var, config, description, minimal, note, and, each, specified, M, Docker, of, auto, client_key, supported, as, directory, functions, details, pypi"
-------------------------------------------------------------------------
"returned: success and I(state) is C(present)
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- If C(>0) and I(state) is C(absent) the module will retry up to
  I(absent_retries) times to delete the stack until all the
"
-------------------------------------------------------------------------
"If `absent_retries` are provided, the module will retry up to `absent_retries` times to delete the stack until all the."
-------------------------------------------------------------------------
"- If C(>0) and I(state) is C(absent) the module will retry up to
  I(absent_retries) times to delete the stack until all the
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Interval in seconds between consecutive I(absent_retries).
"
-------------------------------------------------------------------------
"```python
- Expr(value=UnaryOp(op=USub(), operand=Constant(value='Each binding is a mapping expressed in the format C(<path_on_host>:<path_in_container>:<cgroup_permissions>).')))
+ Expr(value=UnaryOp(op=USub(), operand=Constant(value='Interval in seconds between consecutive I(absent_retries).'))
```"
-------------------------------------------------------------------------
"- Interval in seconds between consecutive I(absent_retries).
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- If I(advertise_addr) is not specified, it will be automatically
"
-------------------------------------------------------------------------
"- If I(advertise_addr) is not specified, it will be automatically"
-------------------------------------------------------------------------
"- If I(advertise_addr) is not specified, it will be automatically
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"description: Token to create a new *worker* node
description: Token to create a new *manager* node
"
-------------------------------------------------------------------------
"- description: Token to create a new *worker* node
- description: Token to create a new *manager* node"
-------------------------------------------------------------------------
"description: Token to create a new *worker* node
description: Token to create a new *manager* node
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- When set to C(yes) and I(nodes), I(services) or I(tasks) is set to C(yes), then the module output will
  contain verbose information about objects matching the full output of API method.
- For details see the documentation of your version of Docker API at U(https://docs.docker.com/engine/api/).
"
-------------------------------------------------------------------------
"- When set to C(yes) and I(nodes), I(services) or I(tasks) is set to C(yes), then the module output will
  contain verbose information about objects matching the full output of API method.
- For details see the documentation of your version of Docker API at U(https://docs.docker.com/engine/api/)."
-------------------------------------------------------------------------
"- When set to C(yes) and I(nodes), I(services) or I(tasks) is set to C(yes), then the module output will
  contain verbose information about objects matching the full output of API method.
- For details see the documentation of your version of Docker API at U(https://docs.docker.com/engine/api/).
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""Service memory reservation in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"Expr(value=UnaryOp(op=USub(), operand=Constant(value='Service memory reservation in format C(<number>[<unit>]). Number is a positive integer.')))"
-------------------------------------------------------------------------
"- ""Service memory reservation in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""Service memory limit in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"Expr(value=UnaryOp(op=USub(), operand=Constant(value='Service memory limit in format C(<number>[<unit>]). Number is a positive integer.')))"
-------------------------------------------------------------------------
"- ""Service memory limit in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""Size of the tmpfs mount in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"- Expr(value=UnaryOp(op=USub(), operand=Constant(value='Size of the tmpfs mount in format C(<number>[<unit>]). Number is a positive integer.')))"
-------------------------------------------------------------------------
"- ""Size of the tmpfs mount in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- When passed dictionaries valid sub-options are I(name), which is required, and
  I(aliases) and I(options).
"
-------------------------------------------------------------------------
"- When passed dictionaries valid sub-options are I(name), which is required, and
  I(consistent) and I(options)."
-------------------------------------------------------------------------
"- When passed dictionaries valid sub-options are I(name), which is required, and
  I(aliases) and I(options).
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""Service memory reservation in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"Expr(value=UnaryOp(op=USub(), operand=Constant(value='Service memory reservation in format C(<number>[<unit>]). Number is a positive integer.')))"
-------------------------------------------------------------------------
"- ""Service memory reservation in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- ""Service memory reservation in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"Expr(value=UnaryOp(op=USub(), operand=Constant(value='Service memory reservation in format C(<number>[<unit>]). Number is a positive integer. No need to provide extra information.')))"
-------------------------------------------------------------------------
"- ""Service memory reservation in format C(<number>[<unit>]). Number is a positive integer.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- C(absent) - A service matching the specified name will be removed and have its tasks stopped.
- C(present) - Asserts the existence of a service matching the name and provided configuration parameters.
"
-------------------------------------------------------------------------
"- C(absent) - A service matching the specified name will be removed and have its tasks stopped.
- C(present) - Asserts the existence of a service matching the name and provided configuration parameters."
-------------------------------------------------------------------------
"- C(absent) - A service matching the specified name will be removed and have its tasks stopped.
- C(present) - Asserts the existence of a service matching the name and provided configuration parameters.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"note that recreating an existing volume will cause **any data in the existing volume
to be lost!** The volume will be deleted and a new volume with the same name will be
"
-------------------------------------------------------------------------
"```python
- Expr(value=UnaryOp(op=USub(), operand=Constant(value='Each binding is a mapping expressed in the format C(<path_on_host>:<path_in_container>:<cgroup_permissions>).')))
+ Expr(value=UnaryOp(op=USub(), operand=Constant(value='Device read limit in format C(<number>[<unit>]).')))
- Expr(value=UnaryOp(op=USub(), operand=Constant(value='Device read limit in format C(<number>[<unit>]).')))
+ Expr(value=UnaryOp(op=USub(), operand=Constant(value='Note that recreating an existing volume will cause any data in the existing volume to be lost! The volume will be deleted and a new volume with the same name will be'))
```"
-------------------------------------------------------------------------
"note that recreating an existing volume will cause **any data in the existing volume
to be lost!** The volume will be deleted and a new volume with the same name will be
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"- Will be C(none) if volume does not exist.
"
-------------------------------------------------------------------------
- Will be C(none) if consistent does not exist.
-------------------------------------------------------------------------
"- Will be C(none) if volume does not exist.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.
"
-------------------------------------------------------------------------
"server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence."
-------------------------------------------------------------------------
"server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"install the C(docker) Python module. Note that both modules should *not*
"
-------------------------------------------------------------------------
"```python
requirements:
      Python module has been superseded by L(docker,https://pypi.org/project/docker/)
      (see L(here,https://github.com/docker/docker-py/issues/1310) for details).
      For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to
      be installed at the same time. Also note that when both modules are installed
      and one of them is uninstalled, the other might no longer function and a
      reinstall of it is required.""
Required dependency: __future__,
- Original metadata: [2.9] docker_* modules: docs improvements
+ Original metadata: [2.9] docker module installation
--##### SUMMARY
- Backport of #63165 to stable-2.9. Improves documentation of various `docker_*` modules.
+ Install the C(docker) Python module. Note that both modules should *not* be used together.

-##### ISSUE TYPE
- Docs Pull Request
+ Package Installation

-##### COMPONENT NAME
- docker_config.py
- docker_container.py
- docker_container_info.py
- docker_image.py
- docker_network.py
- docker_network_info.py
- docker_prune.py
- docker_secret.py
- docker_stack.py
- docker_swarm.py
- docker_swarm_info.py
- docker_swarm_service.py
- docker_volume.py
- docker_volume_info.py
- lib/ansible/plugins/doc_fragments/docker.py
```"
-------------------------------------------------------------------------
"install the C(docker) Python module. Note that both modules should *not*
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"This module does *not* work with docker-py.""
"
-------------------------------------------------------------------------
"This module does *not* work with docker-py."""
-------------------------------------------------------------------------
"This module does *not* work with docker-py.""
"
-------------------------------------------------------------------------
"Recom
PRs: 63165, 63299"
-------------------------------------------------------------------------
=========================================================================
"n_url = self.api_server
if self.api_server == 'https://galaxy.ansible.com' or self.api_server == 'https://galaxy.ansible.com/':
    n_url = 'https://galaxy.ansible.com/api/'

try:
    data = self._call_galaxy(n_url, method='GET', error_context_msg=error_context_msg)
except (AnsibleError, GalaxyError, ValueError, KeyError):
    # Either the URL doesnt exist, or other error. Or the URL exists, but isn't a galaxy API
    # root (not JSON, no 'available_versions') so try appending '/api/'
    n_url = _urljoin(n_url, '/api/')

    # let exceptions here bubble up
    data = self._call_galaxy(n_url, method='GET', error_context_msg=error_context_msg)
    if 'available_versions' not in data:
        raise AnsibleError(""Tried to find galaxy API root at %s but no 'available_versions' are available on %s""
                           % (n_url, self.api_server))
available_versions = data.get('available_versions', {u'v1': u'v1/'})
    available_versions[u'v2'] = u'v2/'
"
-------------------------------------------------------------------------
"```python
n_url = self.api_server
if self.api_server == 'https://galaxy.ansible.com' or self.api_server == 'https://galaxy.ansible.com/':
    n_url = 'https://galaxy.ansible.com/api/'

try:
    data = self._call_galaxy(n_url, method='GET', error_context_msg=error_context_msg)
except (AnsibleError, GalaxyError, ValueError, KeyError):
    # Either the URL doesn't exist, or there is another error. Or the URL exists, but it isn't a Galaxy API root (not JSON, no 'available_versions'), so try appending '/api/'
    n_url = _urljoin(n_url, '/api/')

    # Let exceptions here bubble up
    data = self._call_galaxy(n_url, method='GET', error_context_msg=error_context_msg)
    if 'available_versions' not in data:
        raise AnsibleError(""Tried to find the Galaxy API root at %s, but no 'available_versions' are available on %s""
                           % (n_url, self.api_server))
available_versions = data.get('available_versions', {'v1': 'v1/'})
available_versions['v2'] = 'v2/'
```"
-------------------------------------------------------------------------
"n_url = self.api_server
if self.api_server == 'https://galaxy.ansible.com' or self.api_server == 'https://galaxy.ansible.com/':
    n_url = 'https://galaxy.ansible.com/api/'

try:
    data = self._call_galaxy(n_url, method='GET', error_context_msg=error_context_msg)
except (AnsibleError, GalaxyError, ValueError, KeyError):
    # Either the URL doesnt exist, or other error. Or the URL exists, but isn't a galaxy API
    # root (not JSON, no 'available_versions') so try appending '/api/'
    n_url = _urljoin(n_url, '/api/')

    # let exceptions here bubble up
    data = self._call_galaxy(n_url, method='GET', error_context_msg=error_context_msg)
    if 'available_versions' not in data:
        raise AnsibleError(""Tried to find galaxy API root at %s but no 'available_versions' are available on %s""
                           % (n_url, self.api_server))

    # Update api_server to point to the ""real"" API root, which in this case
    # was the configured url  '/api/' appended.
    self.api_server = n_url
available_versions = data.get('available_versions', {u'v1': u'v1/'})
    available_versions[u'v2'] = u'v2/'
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api._available_api_versions = {version: '%s' % version}
api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"")
"
-------------------------------------------------------------------------
"```python
def get_test_galaxy_api(url, version, token_ins=None, token_value=None):
    token_value = token_value or ""my token""
    token_ins = token_ins or GalaxyToken(token_value)
    api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com"")
    api.token = token_ins
    api._available_api_versions = {version: '%s' % version}
    
    return api
```"
-------------------------------------------------------------------------
"api._available_api_versions = {version: '%s' % version}
api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"")
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"")._add_auth_token({}, """", required=True)
= GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
"
-------------------------------------------------------------------------
"GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)"
-------------------------------------------------------------------------
"GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"")._add_auth_token({}, """", required=True)
= GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
"
-------------------------------------------------------------------------
"```python
api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/"", token=token)
```"
-------------------------------------------------------------------------
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
"
-------------------------------------------------------------------------
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com"", token=token)"
-------------------------------------------------------------------------
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
"
-------------------------------------------------------------------------
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)"
-------------------------------------------------------------------------
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
"
-------------------------------------------------------------------------
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/"", token=token)"
-------------------------------------------------------------------------
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"")
"
-------------------------------------------------------------------------
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"")"
-------------------------------------------------------------------------
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"")
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"StringIO(u'{""available_versions"":{""v1"":""v1/""}}'),
= GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"")
rt api.available_api_versions['v1'] == u'v1/'
rt api.available_api_versions['v2'] == u'v2/'
rt mock_open.mock_calls[0][1][0] == 'https://galaxy.ansible.com/api/'
"
-------------------------------------------------------------------------
"```python
StringIO(u'{""available_versions"":{""v1"":""v1/""}}'),
= GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"")
rt api.available_api_versions['v1'] == u'v1/'
rt api.available_api_versions['v2'] == u'v2/'
rt mock_open.mock_calls[0][1][0] == 'https://galaxy.ansible.com/api/'
```"
-------------------------------------------------------------------------
"StringIO(u'{""available_versions"":{""v1"":""v1/""}}'),
= GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"")
rt api.available_api_versions['v1'] == u'v1/'
rt api.available_api_versions['v2'] == u'v2/'
rt mock_open.mock_calls[0][1][0] == 'https://galaxy.ansible.com/api/'
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"StringIO(u'{""available_versions"":{""v1"":""v1/""}}'),
= GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=GalaxyToken(token='my_token'))
rt api.available_api_versions['v1'] == u'v1/'
rt api.available_api_versions['v2'] == u'v2/'
rt mock_open.mock_calls[0][1][0] == 'https://galaxy.ansible.com/api/'
"
-------------------------------------------------------------------------
"```python
StringIO(u'{""available_versions"":{""v1"":""v1/""}}'),
api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/"", token=GalaxyToken(token='my_token'))
assert api.available_api_versions['v1'] == u'v1/'
assert api.available_api_versions['v2'] == u'v2/'
assert mock_open.mock_calls[0][1][0] == 'https://galaxy.ansible.com/'
```"
-------------------------------------------------------------------------
"StringIO(u'{""available_versions"":{""v1"":""v1/""}}'),
= GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=GalaxyToken(token='my_token'))
rt api.available_api_versions['v1'] == u'v1/'
rt api.available_api_versions['v2'] == u'v2/'
rt mock_open.mock_calls[0][1][0] == 'https://galaxy.ansible.com/api/'
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
assert mock_open.mock_calls[0][1][0] == 'https://galaxy.ansible.com/api/'
    urllib_error.HTTPError('https://galaxy.ansible.com/api/', 500, 'msg', {}, StringIO(u'{""msg"":""raw error""}')),
    urllib_error.HTTPError('https://galaxy.ansible.com/api/api/', 500, 'msg', {}, StringIO(u'{""msg"":""raw error""}')),
api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=GalaxyToken(token='my_token'))
expected = ""Error when finding available api versions from test (%s) (HTTP Code: 500, Message: Unknown "" \
with pytest.raises(AnsibleError, match=re.escape(expected)):
    StringIO(u'{""available_versions"":{""v1"":""v1/"",""v2"":""v2/""}}'),
api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"")
assert actual['v1'] == u'v1/'
assert actual['v2'] == u'v2/'
assert mock_open.mock_calls[0][1][0] == 'https://galaxy.ansible.com/api/'
api = get_test_galaxy_api(""https://galaxy.ansible.com/api/"", ""v2"")
"
-------------------------------------------------------------------------
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"")
assert mock_open.mock_calls[0][1][0] == 'https://galaxy.ansible.com/api/'
urllib_error.HTTPError('https://galaxy.ansible.com/api/', 500, 'msg', {}, StringIO(u'{""msg"":""raw error""}')),
urllib_error.HTTPError('https://galaxy.ansible.com/api/api/', 500, 'msg', {}, StringIO(u'{""msg"":""raw error""}')),
api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=GalaxyToken(token='my_token'))
expected = ""Error when finding available api versions from test (%s) (HTTP Code: 500, Message: Unknown "" \
with pytest.raises(AnsibleError, match=re.escape(expected)):
    StringIO(u'{""available_versions"":{""v1"":""v1/"",""v2"":""v2/""}}')
assert actual['v1'] == u'v1/'
assert actual['v2'] == u'v2/'
assert mock_open.mock_calls[0][1][0] == 'https://galaxy.ansible.com/api/'
api = get_test_galaxy_api(""https://galaxy.ansible.com/api/"", ""v2"")"
-------------------------------------------------------------------------
"api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=token)
assert mock_open.mock_calls[0][1][0] == 'https://galaxy.ansible.com/api/'
    urllib_error.HTTPError('https://galaxy.ansible.com/api/', 500, 'msg', {}, StringIO(u'{""msg"":""raw error""}')),
    urllib_error.HTTPError('https://galaxy.ansible.com/api/api/', 500, 'msg', {}, StringIO(u'{""msg"":""raw error""}')),
api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"", token=GalaxyToken(token='my_token'))
expected = ""Error when finding available api versions from test (%s) (HTTP Code: 500, Message: Unknown "" \
with pytest.raises(AnsibleError, match=re.escape(expected)):
    StringIO(u'{""available_versions"":{""v1"":""v1/"",""v2"":""v2/""}}'),
api = GalaxyAPI(None, ""test"", ""https://galaxy.ansible.com/api/"")
assert actual['v1'] == u'v1/'
assert actual['v2'] == u'v2/'
assert mock_open.mock_calls[0][1][0] == 'https://galaxy.ansible.com/api/'
api = get_test_galaxy_api(""https://galaxy.ansible.com/api/"", ""v2"")
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = get_test_galaxy_api(""https://galaxy.ansible.com/api/"", ""v2"")
"
-------------------------------------------------------------------------
"```python
api = get_test_galaxy_api(""https://galaxy.ansible.com"", ""v2"")
```"
-------------------------------------------------------------------------
"api = get_test_galaxy_api(""https://galaxy.ansible.com/api/"", ""v2"")
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"""https://galaxy.ansible.com/api/""
est_galaxy_api(""https://galaxy.ansible.com/api/"", ""v1"")
"
-------------------------------------------------------------------------
"```python
api.get_galaxy_api(""https://galaxy.ansible.com/"", ""v1"")
```"
-------------------------------------------------------------------------
"""https://galaxy.ansible.com/api/""
est_galaxy_api(""https://galaxy.ansible.com/api/"", ""v1"")
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = get_test_galaxy_api(""https://galaxy.ansible.com/api/"", api_version)
"
-------------------------------------------------------------------------
"```python
api = get_test_galaxy_api(""https://galaxy.ansible.com"", api_version)
```"
-------------------------------------------------------------------------
"api = get_test_galaxy_api(""https://galaxy.ansible.com/api/"", api_version)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version)
"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com/', api_version)"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com/', api_version, token_ins=token_ins)"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"api = get_test_galaxy_api(import_uri, api_version, token_ins=token_ins)"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com/', api_version, token_ins=token_ins)"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com', api_version, token_ins=token_ins)"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com', api_version, token_ins=token_ins)"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version)"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"assert mock_open.mock_calls[0][1][0] == '%s%s/collections/namespace/collection/versions/%s' \
"
-------------------------------------------------------------------------
assert mock_open.mock_calls[0][1][0] == '%s%s/collections/namespace/collection/versions/%s'
-------------------------------------------------------------------------
"assert mock_open.mock_calls[0][1][0] == '%s%s/collections/namespace/collection/versions/%s' \
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com', api_version, token_ins=token_ins)"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"```python
api = get_test_galaxy_api('https://galaxy.server.com', api_version, token_ins=token_ins)
```"
-------------------------------------------------------------------------
"api = get_test_galaxy_api('https://galaxy.server.com/api/', api_version, token_ins=token_ins)
"
-------------------------------------------------------------------------
"Recom
PRs: 63238, 63293"
-------------------------------------------------------------------------
=========================================================================
"diff['before'] = to_native(b''.join(b_lines))
"
-------------------------------------------------------------------------
"```python
diff['before'] = to_native(b''.join(b_lines))
```"
-------------------------------------------------------------------------
"diff['before'] = to_native(b''.join(b_lines))
"
-------------------------------------------------------------------------
"Recom
PRs: 63194, 63264"
-------------------------------------------------------------------------
=========================================================================
"
# The module's doc says
# ""If regular expressions are passed to both regexp and
# insertafter, insertafter is only honored if no match for regexp is found.""
# Therefore:
# 1. regexp was found -> ignore insertafter, replace the founded line
# 2. regexp was not found -> insert the line after 'insertafter' or 'insertbefore' line

# Given the above:
# 1. First check that there is no match for regexp:
if regexp is not None:
    for lineno, b_cur_line in enumerate(b_lines):
        if match_found:
            index[0] = lineno
            m = match_found
# 2. When no match found on the previous step,
# parse for searching insertafter/insertbefore:
if not m:
    for lineno, b_cur_line in enumerate(b_lines):
        match_found = b_line == b_cur_line.rstrip(b'\r\n')
        if match_found:
            index[0] = lineno
            m = match_found

        elif bre_ins is not None and bre_ins.search(b_cur_line):
            if insertafter:
                #  1 for the next line
                index[1] = lineno  1
                if firstmatch:
                    break

            if insertbefore:
                # index[1] for the previous line
                index[1] = lineno
                if firstmatch:
                    break

"
-------------------------------------------------------------------------
"```python
# Given the above:
# 1. First check that there is no match for regexp:
if regexp is not None:
    for lineno, b_cur_line in enumerate(b_lines):
        if match_found:
            index[0] = lineno
            m = match_found
# 2. When no match found on the previous step,
# parse for searching insertafter/insertbefore:
if not m:
    for lineno, b_cur_line in enumerate(b_lines):
        match_found = b_line == b_cur_line.rstrip(b'\r\n')
        if match_found:
            index[0] = lineno
            m = match_found

        elif bre_ins is not None and bre_ins.search(b_cur_line):
            if insertafter:
                #  1 for the next line
                index[1] = lineno
                if firstmatch:
                    break

            if insertbefore:
                # index[1] for the previous line
                index[1] = lineno
                if firstmatch:
                    break
```"
-------------------------------------------------------------------------
"
# The module's doc says
# ""If regular expressions are passed to both regexp and
# insertafter, insertafter is only honored if no match for regexp is found.""
# Therefore:
# 1. regexp was found -> ignore insertafter, replace the founded line
# 2. regexp was not found -> insert the line after 'insertafter' or 'insertbefore' line

# Given the above:
# 1. First check that there is no match for regexp:
if regexp is not None:
    for lineno, b_cur_line in enumerate(b_lines):
        if match_found:
            index[0] = lineno
            m = match_found
# 2. When no match found on the previous step,
# parse for searching insertafter/insertbefore:
if not m:
    for lineno, b_cur_line in enumerate(b_lines):
        match_found = b_line == b_cur_line.rstrip(b'\r\n')
        if match_found:
            index[0] = lineno
            m = match_found

        elif bre_ins is not None and bre_ins.search(b_cur_line):
            if insertafter:
                #  1 for the next line
                index[1] = lineno  1
                if firstmatch:
                    break

            if insertbefore:
                # index[1] for the previous line
                index[1] = lineno
                if firstmatch:
                    break

"
-------------------------------------------------------------------------
"Recom
PRs: 63194, 63264"
-------------------------------------------------------------------------
=========================================================================
"if b_lines and not b_lines[-1][-1:] in (b'\n', b'\r'):
    if b_lines[index[1] - 1].rstrip(b'\r\n') != b_line:
elif b_lines[index[1]].rstrip(b'\r\n') != b_line:
"
-------------------------------------------------------------------------
"```python
if b_lines and (not b_lines[-1][-1:] in (b'\n', b'\r')):
    if b_lines[index[1] - 1].rstrip(b'\r\n') != b_line:
elif b_lines[index[1]].rstrip(b'\r\n') != b_line:
```"
-------------------------------------------------------------------------
"if b_lines and not b_lines[-1][-1:] in (b'\n', b'\r'):
    if b_lines[index[1] - 1].rstrip(b'\r\n') != b_line:
elif b_lines[index[1]].rstrip(b'\r\n') != b_line:
"
-------------------------------------------------------------------------
"Recom
PRs: 63194, 63264"
-------------------------------------------------------------------------
=========================================================================
"if b_lines[index[1]].rstrip(b'\r\n') != b_line:
 b_lines[index[1] - 1].rstrip(b'\r\n') != b_line:
"
-------------------------------------------------------------------------
"```python
if b_lines[index[1]].rstrip(b'\r\n') != b_line:
    b_lines[index[1] - 1].rstrip(b'\r\n') != b_line:
```"
-------------------------------------------------------------------------
"if b_lines[index[1]].rstrip(b'\r\n') != b_line:
 b_lines[index[1] - 1].rstrip(b'\r\n') != b_line:
"
-------------------------------------------------------------------------
"Recom
PRs: 63194, 63264"
-------------------------------------------------------------------------
=========================================================================
"if b_lines and not b_lines[-1][-1:] in (b'\n', b'\r'):

 insertafter and index[1] != -1:

# Don't insert the line if it already matches at the index
if b_line != b_lines[index[1]].rstrip(b'\n\r'):
    b_lines.insert(index[1], b_line  b_linesep)
    msg = 'line added'
    changed = True

"
-------------------------------------------------------------------------
"```python
if b_lines and not b_lines[-1][-1:] in (b'\n', b'\r') and insertafter and index[1] != -1:

    # Don't insert the line if it already matches at the index
    if b_line != b_lines[index[1]].rstrip(b'\n\r'):
        b_lines.insert(index[1], b_line + b_linesep)
        msg = 'line added'
        changed = True
```"
-------------------------------------------------------------------------
"if b_lines and not b_lines[-1][-1:] in (b'\n', b'\r'):

 insertafter and index[1] != -1:

# Don't insert the line if it already matches at the index
if b_line != b_lines[index[1]].rstrip(b'\n\r'):
    b_lines.insert(index[1], b_line  b_linesep)
    msg = 'line added'
    changed = True

"
-------------------------------------------------------------------------
"Recom
PRs: 63194, 63264"
-------------------------------------------------------------------------
=========================================================================
"diff['after'] = to_native(b''.join(b_lines))
"
-------------------------------------------------------------------------
"```python
diff['after'] = to_native(''.join(b_lines))
```"
-------------------------------------------------------------------------
"diff['after'] = to_native(b''.join(b_lines))
"
-------------------------------------------------------------------------
"Recom
PRs: 63194, 63264"
-------------------------------------------------------------------------
=========================================================================
"diff['before'] = to_native(b''.join(b_lines))
"
-------------------------------------------------------------------------
"```python
diff['before'] = ansible.module_utils._text.to_native(b''.join(b_lines))
```"
-------------------------------------------------------------------------
"diff['before'] = to_native(b''.join(b_lines))
"
-------------------------------------------------------------------------
"Recom
PRs: 63194, 63264"
-------------------------------------------------------------------------
=========================================================================
"match_found = b_line == b_cur_line.rstrip(b'\r\n')
"
-------------------------------------------------------------------------
"```python
match_found = b_line == b_cur_line.rstrip(b'\r\n')
```"
-------------------------------------------------------------------------
"match_found = b_line == b_cur_line.rstrip(b'\r\n')
"
-------------------------------------------------------------------------
"Recom
PRs: 63194, 63264"
-------------------------------------------------------------------------
=========================================================================
"diff['after'] = to_native(b''.join(b_lines))
"
-------------------------------------------------------------------------
"```python
diff['after'] = b''.join(b_lines).decode('utf-8')
```"
-------------------------------------------------------------------------
"diff['after'] = to_native(b''.join(b_lines))
"
-------------------------------------------------------------------------
"Recom
PRs: 63194, 63264"
-------------------------------------------------------------------------
=========================================================================
"import re
"
-------------------------------------------------------------------------
import re
-------------------------------------------------------------------------
"import re
"
-------------------------------------------------------------------------
"Recom
PRs: 63211, 63218"
-------------------------------------------------------------------------
=========================================================================
"# newer ssh-keygen PEM output (such as on RHEL 8.1) is not recognized by paramiko
with open(key, 'r') as key_fd:
    key_contents = key_fd.read()
    key_contents = re.sub(r'(BEGIN|END) PRIVATE KEY', r'\1 RSA PRIVATE KEY', key_contents)
    key_fd.seek(0)
    key_fd.write(key_contents)

"
-------------------------------------------------------------------------
"```python
import os
import re

class SshKey:
    if not os.path.isfile(key) or not os.path.isfile(pub):
        run_command(args, ['ssh-keygen', '-m', 'PEM', '-q', '-t', 'rsa', '-N', '', '-f', key])

        with open(key, 'r') as key_fd:
            key_contents = key_fd.read()
            key_contents = re.sub(r'(BEGIN|END) PRIVATE KEY', r'\1 RSA PRIVATE KEY', key_contents)
        with open(key, 'w') as key_fd:
            key_fd.write(key_contents)

    return key, pub
```"
-------------------------------------------------------------------------
"# newer ssh-keygen PEM output (such as on RHEL 8.1) is not recognized by paramiko
with open(key, 'r') as key_fd:
    key_contents = key_fd.read()
    key_contents = re.sub(r'(BEGIN|END) PRIVATE KEY', r'\1 RSA PRIVATE KEY', key_contents)
    key_fd.seek(0)
    key_fd.write(key_contents)

"
-------------------------------------------------------------------------
"Recom
PRs: 63211, 63218"
-------------------------------------------------------------------------
=========================================================================
"if not image or self.parameters.pull:
    if not self.check_mode:
"
-------------------------------------------------------------------------
"Update the code snippet as follows: 

```python
if not image or self.parameters.pull:
    if not self.check_mode:
```"
-------------------------------------------------------------------------
"if not image or self.parameters.pull:
    if not self.check_mode:
"
-------------------------------------------------------------------------
"Recom
PRs: 62971, 63143"
-------------------------------------------------------------------------
=========================================================================
"elif not image:
    # If the image isn't there, claim we'll pull.
    # (Implicitly: if the image is there, claim it already was latest.)
    self.results['changed'] = True
    self.results['actions'].append(dict(pulled_image=""%s:%s"" % (repository, tag)))

"
-------------------------------------------------------------------------
"```python
elif not image:
    self.results['changed'] = True
    self.results['actions'].append(dict(pulled_image=""%s:%s"" % (repository, tag)))
```"
-------------------------------------------------------------------------
"elif not image:
    # If the image isn't there, claim we'll pull.
    # (Implicitly: if the image is there, claim it already was latest.)
    self.results['changed'] = True
    self.results['actions'].append(dict(pulled_image=""%s:%s"" % (repository, tag)))

"
-------------------------------------------------------------------------
"Recom
PRs: 62971, 63143"
-------------------------------------------------------------------------
=========================================================================
"elements: path
"
-------------------------------------------------------------------------
"```
elements: str
```"
-------------------------------------------------------------------------
"elements: path
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"```python
elements: str
```"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
elements: str
"
-------------------------------------------------------------------------
"```
elements: str
```"
-------------------------------------------------------------------------
"elements: str
elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
elements: dict
"
-------------------------------------------------------------------------
"```
- AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)
?                                                                        ^ +

+ AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='dict', ctx=Load()), simple=1)
?                                                                        ^^^
```"
-------------------------------------------------------------------------
"elements: str
elements: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: dict
"
-------------------------------------------------------------------------
"```
AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='dict', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"elements: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: dict
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='dict', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: dict
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='dict', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"elements: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
elements: str
elements: str
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)
  AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)
  AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
elements: str
elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
elements: str
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: dict
"
-------------------------------------------------------------------------
"```python
elements: dict
```"
-------------------------------------------------------------------------
"elements: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: dict
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='dict', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"elements: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
elements: str
"
-------------------------------------------------------------------------
elements: dict
-------------------------------------------------------------------------
"elements: str
elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"+ AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"```python
elements: str
```"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"```python
elements: str
```"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: dict
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='dict', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"```python
elements: str
```"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"```python
elements: str
```"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"# elements: raw
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='raw', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"# elements: raw
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"'compose': dict(type='list', elements='raw', default=[]),
"
-------------------------------------------------------------------------
"'compose': dict(type='list', elements='str', default=[]),"
-------------------------------------------------------------------------
"'compose': dict(type='list', elements='raw', default=[]),
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"```python
elements: str
```"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: dict
"
-------------------------------------------------------------------------
"+ AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='dict', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"```
elements: str
```"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
elements: str
elements: str
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)
?                                                                        ^ +"
-------------------------------------------------------------------------
"elements: str
elements: str
elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: path
"
-------------------------------------------------------------------------
elements: str
-------------------------------------------------------------------------
"elements: path
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: dict
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='dict', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"elements: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: raw
"
-------------------------------------------------------------------------
"```python
elements: str
```"
-------------------------------------------------------------------------
"elements: raw
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: str
elements: dict
"
-------------------------------------------------------------------------
"```python
elements: dict
```"
-------------------------------------------------------------------------
"elements: str
elements: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: dict
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='dict', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"elements: dict
"
-------------------------------------------------------------------------
"```python
elements: dict
```"
-------------------------------------------------------------------------
"elements: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"constraints=dict(type='list', elements='str'),
preferences=dict(type='list', elements='dict'),
traints=dict(type='list', elements='str', removed_in_version='2.12'),
dict(type='list', elements='str'),
search=dict(type='list', elements='str'),
options=dict(type='list', elements='str'),
"
-------------------------------------------------------------------------
"```python
- constraints=dict(type='list', elements='str'),
+ constraints=dict(type='list', elements='str', removed_in_version='2.12'),
- preferences=dict(type='list', elements='dict'),
- traits=dict(type='list', elements='str'),
+ traits=dict(type='list', elements='str'),
- search=dict(type='list', elements='str'),
+ search=dict(type='list', elements='str'),
- options=dict(type='list', elements='str'),
+ options=dict(type='list', elements='str'),
```"
-------------------------------------------------------------------------
"constraints=dict(type='list', elements='str'),
preferences=dict(type='list', elements='dict'),
traints=dict(type='list', elements='str', removed_in_version='2.12'),
dict(type='list', elements='str'),
search=dict(type='list', elements='str'),
options=dict(type='list', elements='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 62179, 63142"
-------------------------------------------------------------------------
=========================================================================
"network_info = connected_networks.get(network['name'])
if network_info is None:
"
-------------------------------------------------------------------------
"```python
network_info = connected_networks.get(network)
if network_info is None:
```"
-------------------------------------------------------------------------
"network_info = connected_networks.get(network['name'])
if network_info is None:
"
-------------------------------------------------------------------------
"Recom
PRs: 62928, 62959"
-------------------------------------------------------------------------
=========================================================================
"network_info_ipam = network_info.get('IPAMConfig', {})
if network.get('ipv4_address') and network['ipv4_address'] != network_info_ipam.get('IPv4Address'):
if network.get('ipv6_address') and network['ipv6_address'] != network_info_ipam.get('IPv6Address'):
    if not compare_generic(network['aliases'], network_info.get('Aliases'), 'allow_more_present', 'set'):
    if not compare_generic(expected_links, network_info.get('Links'), 'allow_more_present', 'set'):
"
-------------------------------------------------------------------------
"```python
network_info_ipam = network_info.get('IPAMConfig', {})
if network.get('ipv4_address') and network['ipv4_address'] != network_info_ipam.get('IPv4Address'):
    pass
if network.get('ipv6_address') and network['ipv6_address'] != network_info_ipam.get('IPv6Address'):
    pass
if not compare_generic(network['aliases'], network_info.get('Aliases'), 'allow_more_present', 'set'):
    pass
if not compare_generic(expected_links, network_info.get('Links'), 'allow_more_present', 'set'):
    pass
```"
-------------------------------------------------------------------------
"network_info_ipam = network_info.get('IPAMConfig', {})
if network.get('ipv4_address') and network['ipv4_address'] != network_info_ipam.get('IPv4Address'):
if network.get('ipv6_address') and network['ipv6_address'] != network_info_ipam.get('IPv6Address'):
    if not compare_generic(network['aliases'], network_info.get('Aliases'), 'allow_more_present', 'set'):
    if not compare_generic(expected_links, network_info.get('Links'), 'allow_more_present', 'set'):
"
-------------------------------------------------------------------------
"Recom
PRs: 62928, 62959"
-------------------------------------------------------------------------
=========================================================================
"ipv4_address=network_info_ipam.get('IPv4Address'),
ipv6_address=network_info_ipam.get('IPv6Address'),
aliases=network_info.get('Aliases'),
links=network_info.get('Links')
"
-------------------------------------------------------------------------
"```python
ipv4_address = network_info_ipam.get('IPv4Address')
ipv6_address = network_info_ipam.get('IPv6Address')
aliases = network_info.get('Aliases')
links = network_info.get('Links')
```"
-------------------------------------------------------------------------
"ipv4_address=network_info_ipam.get('IPv4Address'),
ipv6_address=network_info_ipam.get('IPv6Address'),
aliases=network_info.get('Aliases'),
links=network_info.get('Links')
"
-------------------------------------------------------------------------
"Recom
PRs: 62928, 62959"
-------------------------------------------------------------------------
=========================================================================
"ipvX_address_supported=dict(docker_py_version='1.9.0', docker_api_version='1.22',
                            detect_usage=detect_ipvX_address_usage,
"
-------------------------------------------------------------------------
"ipvX_address_supported=dict(docker_py_version='1.9.0', docker_api_version='1.22',
                            detect_usage=detect_ipvX_address_usage)"
-------------------------------------------------------------------------
"ipvX_address_supported=dict(docker_py_version='1.9.0', docker_api_version='1.22',
                            detect_usage=detect_ipvX_address_usage,
"
-------------------------------------------------------------------------
"Recom
PRs: 62928, 62959"
-------------------------------------------------------------------------
=========================================================================
"return self.csr.public_key().public_numbers() == self.cert.public_key().public_numbers()
return self.csr.subject == self.cert.subject
"
-------------------------------------------------------------------------
"```python
return self.csr.public_key().public_numbers() == self.cert.public_key().public_numbers()

return self.csr.subject == self.cert.subject
```"
-------------------------------------------------------------------------
"return self.csr.public_key().public_numbers() == self.cert.public_key().public_numbers()
return self.csr.subject == self.cert.subject
"
-------------------------------------------------------------------------
"Recom
PRs: 62790, 62946"
-------------------------------------------------------------------------
=========================================================================
"- Supports check mode. Run with C(--check) and C(--diff) to view config difference and list of actions to be taken.
tes:
- For most config changes, the container needs to be recreated, i.e. the existing container has to be destroyed and
  a new one created. This can cause unexpected data loss and downtime. You can use the I(comparisons) option to
  prevent this.
- If the module needs to recreate the container, it will only use the options provided to the module to create the
  new container (except I(image)). Therefore, always specify *all* options relevant to the container.
- When I(restart) is set to C(true), the module will only restart the container if no config changes are detected.
  Please note that several options have default values; if the container to be restarted uses different values for
  these options, it will be recreated instead. The options with default values which can cause this are I(auto_remove),
  I(detach), I(init), I(interactive), I(memory), I(paused), I(privileged), I(read_only) and I(tty).

"
-------------------------------------------------------------------------
"- Supports check mode. Run with `--check` and `--diff` to view config difference and list of actions to be taken.
- For most config changes, the container needs to be recreated, i.e. the existing container has to be destroyed and a new one created. This can cause unexpected data loss and downtime. You can use the `comparisons` option to prevent this.
- If the module needs to recreate the container, it will only use the options provided to the module to create the new container (except `image`). Therefore, always specify *all* options relevant to the container.
- When `restart` is set to `true`, the module will only restart the container if no config changes are detected. Please note that several options have default values; if the container to be restarted uses different values for these options, it will be recreated instead. The options with default values which can cause this are `auto_remove`, `detach`, `init`, `interactive`, `memory`, `paused`, `privileged`, `read_only` and `tty`."
-------------------------------------------------------------------------
"- Supports check mode. Run with C(--check) and C(--diff) to view config difference and list of actions to be taken.
tes:
- For most config changes, the container needs to be recreated, i.e. the existing container has to be destroyed and
  a new one created. This can cause unexpected data loss and downtime. You can use the I(comparisons) option to
  prevent this.
- If the module needs to recreate the container, it will only use the options provided to the module to create the
  new container (except I(image)). Therefore, always specify *all* options relevant to the container.
- When I(restart) is set to C(true), the module will only restart the container if no config changes are detected.
  Please note that several options have default values; if the container to be restarted uses different values for
  these options, it will be recreated instead. The options with default values which can cause this are I(auto_remove),
  I(detach), I(init), I(interactive), I(memory), I(paused), I(privileged), I(read_only) and I(tty).

"
-------------------------------------------------------------------------
"Recom
PRs: 62325, 62945"
-------------------------------------------------------------------------
=========================================================================
"- Supports check mode. Run with C(--check) and C(--diff) to view config difference and list of actions to be taken.
tes:
- For most config changes, the container needs to be recreated, i.e. the existing container has to be destroyed and
  a new one created. This can cause unexpected data loss and downtime. You can use the I(comparisons) option to
  prevent this.
- If the module needs to recreate the container, it will only use the options provided to the module to create the
  new container (except I(image)). Therefore, always specify *all* options relevant to the container.
- When I(restart) is set to C(true), the module will only restart the container if no config changes are detected.
  Please note that several options have default values; if the container to be restarted uses different values for
  these options, it will be recreated instead. The options with default values which can cause this are I(auto_remove),
  I(detach), I(init), I(interactive), I(memory), I(paused), I(privileged), I(read_only) and I(tty).

"
-------------------------------------------------------------------------
"- Supports check mode. Run with C(--check) and C(--diff) to view config difference and list of actions to be taken.
tes:
- For most config changes, the container needs to be recreated, i.e. the existing container has to be destroyed and
  a new one created. This can cause unexpected data loss and downtime. You can use the I(comparisons) option to
  prevent this.
- If the module needs to recreate the container, it will only use the options provided to the module to create the
  new container (except I(image)). Therefore, always specify *all* options relevant to the container.
- When I(restart) is set to C(true), the module will only restart the container if no config changes are detected.
  Please note that several options have default values; if the container to be restarted uses different values for
  these options, it will be recreated instead. The options with default values which can cause this are I(auto_remove),
  I(detach), I(init), I(interactive), I(memory), I(paused), I(privileged), I(read_only) and I(tty)."
-------------------------------------------------------------------------
"- Supports check mode. Run with C(--check) and C(--diff) to view config difference and list of actions to be taken.
tes:
- For most config changes, the container needs to be recreated, i.e. the existing container has to be destroyed and
  a new one created. This can cause unexpected data loss and downtime. You can use the I(comparisons) option to
  prevent this.
- If the module needs to recreate the container, it will only use the options provided to the module to create the
  new container (except I(image)). Therefore, always specify *all* options relevant to the container.
- When I(restart) is set to C(true), the module will only restart the container if no config changes are detected.
  Please note that several options have default values; if the container to be restarted uses different values for
  these options, it will be recreated instead. The options with default values which can cause this are I(auto_remove),
  I(detach), I(init), I(interactive), I(memory), I(paused), I(privileged), I(read_only) and I(tty).

"
-------------------------------------------------------------------------
"Recom
PRs: 62325, 62944"
-------------------------------------------------------------------------
=========================================================================
"- A regular expression or pattern which should be matched against the file content.
"
-------------------------------------------------------------------------
"```yaml
description:
  type: str
  aliases:
    - patterns
  description: |
    A regular expression or pattern which should be matched against the file content.
```"
-------------------------------------------------------------------------
"- A regular expression or pattern which should be matched against the file content.
"
-------------------------------------------------------------------------
"Recom
PRs: 62445, 62917"
-------------------------------------------------------------------------
=========================================================================
"virtual_product_facts = self.detect_virt_product('kern.vm_guest') or self.detect_virt_product(
    'hw.hv_vendor') or self.detect_virt_product('security.jail.jailed')
"
-------------------------------------------------------------------------
"```python
virtual_product_facts = self.detect_virt_product('kern.vm_guest') or self.detect_virt_product(
    'hw.hv_vendor') or self.detect_virt_product('security.jail.jailed')
```"
-------------------------------------------------------------------------
"virtual_product_facts = self.detect_virt_product('kern.vm_guest') or self.detect_virt_product(
    'hw.hv_vendor') or self.detect_virt_product('security.jail.jailed')
"
-------------------------------------------------------------------------
"Recom
PRs: 62857, 62911"
-------------------------------------------------------------------------
=========================================================================
"elif (key == 'security.jail.jailed') and (out.rstrip() == '1'):
    virtual_product_facts['virtualization_type'] = 'jails'
    virtual_product_facts['virtualization_role'] = 'guest'
"
-------------------------------------------------------------------------
"if key == 'security.jail.jailed' and out.rstrip() == '1':
    virtual_product_facts['virtualization_type'] = 'jails'
    virtual_product_facts['virtualization_role'] = 'guest'"
-------------------------------------------------------------------------
"elif (key == 'security.jail.jailed') and (out.rstrip() == '1'):
    virtual_product_facts['virtualization_type'] = 'jails'
    virtual_product_facts['virtualization_role'] = 'guest'
"
-------------------------------------------------------------------------
"Recom
PRs: 62857, 62911"
-------------------------------------------------------------------------
=========================================================================
"- name: Check whether a package called foobar is installed
debug:
  msg: ""{{ ansible_facts.packages['foobar'] | length }} versions of foobar are installed!""
when: ""'foobar' in ansible_facts.packages""

"
-------------------------------------------------------------------------
"- name: Check whether a package called foobar is installed
  debug:
    msg: ""{{ ansible_facts.packages['foobar'] | length }} versions of foobar are installed!""
  when: ""'foobar' in ansible_facts.packages"""
-------------------------------------------------------------------------
"- name: Check whether a package called foobar is installed
debug:
  msg: ""{{ ansible_facts.packages['foobar'] | length }} versions of foobar are installed!""
when: ""'foobar' in ansible_facts.packages""

"
-------------------------------------------------------------------------
"Recom
PRs: 62725, 62891"
-------------------------------------------------------------------------
=========================================================================
"description:
  - Maps the package name to a non-empty list of dicts with package information.
  - Every dict in the list corresponds to one installed version of the package.
  - The fields described below are present for all package managers. Depending on the
    package manager, there might be more fields for a package.
contains:
  name:
    description: The package's name.
    returned: always
    type: str
  version:
    description: The package's version.
    returned: always
    type: str
  source:
    description: Where information on the package came from.
    returned: always
    type: str
sample: |-
  {
    ""packages"": {
      ""kernel"": [
        {
          ""name"": ""kernel"",
          ""source"": ""rpm"",
          ""version"": ""3.10.0"",
          ...
        },
        {
          ""name"": ""kernel"",
          ""source"": ""rpm"",
          ""version"": ""3.10.0"",
          ...
        },
        ...
      ],
      ""kernel-tools"": [
        {
          ""name"": ""kernel-tools"",
          ""source"": ""rpm"",
          ""version"": ""3.10.0"",
          ...
        }
      ],
      ...
    }
  }
"
-------------------------------------------------------------------------
"```python
ansible_facts:
  type: complex
  contains:
    packages:
      returned: when operating system level package manager is specified or auto-detected manager
      description: |
        Maps the package name to a non-empty list of dicts with package information.
        Every dict in the list corresponds to one installed version of the package.
        The fields described below are present for all package managers. Depending on the
        package manager, there might be more fields for a package.
      type: dict
      contains:
        name:
          description: The package's name.
          returned: always
          type: str
        version:
          description: The package's version.
          returned: always
          type: str
        source:
          description: Where information on the package came from.
          returned: always
          type: str
      sample_rpm:
        {
          ""packages"": {
            ""kernel"": [
              {
                ""name"": ""kernel"",
                ""source"": ""rpm"",
                ""version"": ""3.10.0"",
                ...
              },
              {
                ""name"": ""kernel"",
                ""source"": ""rpm"",
                ""version"": ""3.10.0"",
                ...
              },
              ...
            ],
            ""kernel-tools"": [
              {
                ""name"": ""kernel-tools"",
                ""source"": ""rpm"",
                ""version"": ""3.10.0"",
                ...
              }
            ],
            ...
          }
        }
```"
-------------------------------------------------------------------------
"description:
  - Maps the package name to a non-empty list of dicts with package information.
  - Every dict in the list corresponds to one installed version of the package.
  - The fields described below are present for all package managers. Depending on the
    package manager, there might be more fields for a package.
contains:
  name:
    description: The package's name.
    returned: always
    type: str
  version:
    description: The package's version.
    returned: always
    type: str
  source:
    description: Where information on the package came from.
    returned: always
    type: str
sample: |-
  {
    ""packages"": {
      ""kernel"": [
        {
          ""name"": ""kernel"",
          ""source"": ""rpm"",
          ""version"": ""3.10.0"",
          ...
        },
        {
          ""name"": ""kernel"",
          ""source"": ""rpm"",
          ""version"": ""3.10.0"",
          ...
        },
        ...
      ],
      ""kernel-tools"": [
        {
          ""name"": ""kernel-tools"",
          ""source"": ""rpm"",
          ""version"": ""3.10.0"",
          ...
        }
      ],
      ...
    }
  }
"
-------------------------------------------------------------------------
"Recom
PRs: 62725, 62891"
-------------------------------------------------------------------------
=========================================================================
"- name: Check whether a package called foobar is installed
debug:
  msg: ""{{ ansible_facts.packages['foobar'] | length }} versions of foobar are installed!""
when: ""'foobar' in ansible_facts.packages""

"
-------------------------------------------------------------------------
"- name: Check whether a package called foobar is installed
  debug:
    msg: ""{{ ansible_facts.packages['foobar'] | length }} versions of foobar are installed!""
  when: ""'foobar' in ansible_facts.packages"""
-------------------------------------------------------------------------
"- name: Check whether a package called foobar is installed
debug:
  msg: ""{{ ansible_facts.packages['foobar'] | length }} versions of foobar are installed!""
when: ""'foobar' in ansible_facts.packages""

"
-------------------------------------------------------------------------
"Recom
PRs: 62725, 62890"
-------------------------------------------------------------------------
=========================================================================
"description:
  - Maps the package name to a non-empty list of dicts with package information.
  - Every dict in the list corresponds to one installed version of the package.
  - The fields described below are present for all package managers. Depending on the
    package manager, there might be more fields for a package.
contains:
  name:
    description: The package's name.
    returned: always
    type: str
  version:
    description: The package's version.
    returned: always
    type: str
  source:
    description: Where information on the package came from.
    returned: always
    type: str
sample: |-
  {
    ""packages"": {
      ""kernel"": [
        {
          ""name"": ""kernel"",
          ""source"": ""rpm"",
          ""version"": ""3.10.0"",
          ...
        },
        {
          ""name"": ""kernel"",
          ""source"": ""rpm"",
          ""version"": ""3.10.0"",
          ...
        },
        ...
      ],
      ""kernel-tools"": [
        {
          ""name"": ""kernel-tools"",
          ""source"": ""rpm"",
          ""version"": ""3.10.0"",
          ...
        }
      ],
      ...
    }
  }
"
-------------------------------------------------------------------------
"```yaml
ansible_facts:
  type: complex
  contains:
    packages:
      description: |
        Maps the package name to a non-empty list of dicts with package information.
        Every dict in the list corresponds to one installed version of the package.
        The fields described below are present for all package managers.
        Depending on the package manager, there might be more fields for a package.
      type: dict
      sample: |-
        {
          ""kernel"": [
            {
              ""name"": ""kernel"",
              ""source"": ""rpm"",
              ""version"": ""3.10.0"",
              ...
            },
            {
              ""name"": ""kernel"",
              ""source"": ""rpm"",
              ""version"": ""3.10.0"",
              ...
            },
            ...
          ],
          ""kernel-tools"": [
            {
              ""name"": ""kernel-tools"",
              ""source"": ""rpm"",
              ""version"": ""3.10.0"",
              ...
            }
          ],
          ...
        }
```  "
-------------------------------------------------------------------------
"description:
  - Maps the package name to a non-empty list of dicts with package information.
  - Every dict in the list corresponds to one installed version of the package.
  - The fields described below are present for all package managers. Depending on the
    package manager, there might be more fields for a package.
contains:
  name:
    description: The package's name.
    returned: always
    type: str
  version:
    description: The package's version.
    returned: always
    type: str
  source:
    description: Where information on the package came from.
    returned: always
    type: str
sample: |-
  {
    ""packages"": {
      ""kernel"": [
        {
          ""name"": ""kernel"",
          ""source"": ""rpm"",
          ""version"": ""3.10.0"",
          ...
        },
        {
          ""name"": ""kernel"",
          ""source"": ""rpm"",
          ""version"": ""3.10.0"",
          ...
        },
        ...
      ],
      ""kernel-tools"": [
        {
          ""name"": ""kernel-tools"",
          ""source"": ""rpm"",
          ""version"": ""3.10.0"",
          ...
        }
      ],
      ...
    }
  }
"
-------------------------------------------------------------------------
"Recom
PRs: 62725, 62890"
-------------------------------------------------------------------------
=========================================================================
"- Corresponds to the C(target) key of C(docker service create --secret).
"
-------------------------------------------------------------------------
Corresponds to the `target` key of `docker service create --secret`.
-------------------------------------------------------------------------
"- Corresponds to the C(target) key of C(docker service create --secret).
"
-------------------------------------------------------------------------
"Recom
PRs: 62712, 62889"
-------------------------------------------------------------------------
=========================================================================
"- Corresponds to the C(target) key of C(docker service create --secret).
"
-------------------------------------------------------------------------
-A specific secret exists that corresponds to the `target` key of `docker service create --secret`.
-------------------------------------------------------------------------
"- Corresponds to the C(target) key of C(docker service create --secret).
"
-------------------------------------------------------------------------
"Recom
PRs: 62712, 62888"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site:
"
-------------------------------------------------------------------------
"```python
class MSOSchemaSite:
    def __init__(self):
        pass
```"
-------------------------------------------------------------------------
"mso_schema_site:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site:
"
-------------------------------------------------------------------------
"```python
class MSOSchemaSite:
    def main(self):
        return {
            'host': 'mso_host',
            'username': 'admin',
            'password': 'SomeSecretPassword'
        }
```"
-------------------------------------------------------------------------
"mso_schema_site:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site:
"
-------------------------------------------------------------------------
"register: query_result

- name: Query all schema sites
  mso_schema_site:
    host: mso_host
    username: admin
    password: SomeSecretPassword"
-------------------------------------------------------------------------
"mso_schema_site:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_anp_epg_domain:
"
-------------------------------------------------------------------------
extends_documentation_fragment: mso_schema_site_anp_epg_domain
-------------------------------------------------------------------------
"mso_schema_site_anp_epg_domain:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_anp_epg_domain:
"
-------------------------------------------------------------------------
mso_schema_site_anp_epg_domain
-------------------------------------------------------------------------
"mso_schema_site_anp_epg_domain:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_anp_epg_domain:
"
-------------------------------------------------------------------------
mso_schema_site_anp_epg_domain:
-------------------------------------------------------------------------
"mso_schema_site_anp_epg_domain:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_anp_epg_domain:
"
-------------------------------------------------------------------------
"To adapt this, you can use the following code snippet:

```python
mso_schema_site_anp_epg_domain = {
    'name': 'Site ANP EPG Domain Schema',
    'type': 'dict',
    'options': {
        'siteId': {'type': 'int', 'required': True},
        'anpId': {'type': 'int', 'required': True},
        'epgId': {'type': 'int', 'required': True},
        'domain': {'type': 'str'}
    }
}
```"
-------------------------------------------------------------------------
"mso_schema_site_anp_epg_domain:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_anp_epg_staticleaf:
"
-------------------------------------------------------------------------
"```yaml
 - name: Add a new static leaf to a site EPG
     host: mso_host
     username: admin
     password: SomeSecretPassword
Required dependency: ansible.module_utils.network.aci.mso, __future__, ansible.module_utils.basic
Original metadata: Fix MSO examples (backport 2.9)
--##### SUMMARY
Fix reported issues with the examples.

This is a backport of #62835

##### ISSUE TYPE
- Docs Pull Request

##### COMPONENT NAME
Some MSO modules
backport, networking, module, owner_pr, community_review, support:community, aci, docs, cisco, affects_2.9

Functional set for the hunk:
Compilation set for the hunk:
Library information from Stable: ansible.module_utils.network.aci.mso.mso_argument_spec, __future__.absolute_import, __future__.print_function, ansible.module_utils.network.aci.mso.MSOModule, ansible.module_utils.basic.AnsibleModule, __future__.division
Function name information from Stable: main
Function call information from Stable: dict, mso_argument_spec, AnsibleModule, MSOModule, main
Class name information from Stable:
Class method call information from Stable: vrfs.index, mso.existing, mso.request, mso.lookup_site, mso.get_obj, sites.index, mso.sanitize, cidrs.index, module.check_mode, mso.proposed, regions.index, mso.sent, ops.append, module.params, subnets.index, mso.vrf_ref, mso.fail_json, argument_spec.update, mso.previous, mso.exit_json, mso.get_url
Target file: new, uses, division, some, Cisco, __metaclass__, preview, mso_argument_spec, get_obj, vrf_idx, IP, COPYING, python, module_utils, for, sanitize, mso, yes, querying, fail_json, local, Subnet, elif, displayName, Changes, sent, host, License, data, is, str, required_if, site_template, Schema1, affected, delegate_to, name, DOCUMENTATION, subnets_path, be, admin, The, Template1, all, Get, can, GNU, region, payload, or, bin, lookup_site, cause, previous, adding, objects, query_result, ansible, choices, short_description, when, found, Existing, password, Site1, exist, requiring, Use, register, add, proposed, the, wieers, to, General, version_added, localhost, basic, else, by, MultiSite, aci, parameter, module, path, PATCH, seealso, sites, schema_id, deficiency, subnet_idx, ACI, object, may, cidr_idx, supported_by, removing, silent, concurrent, usr, def, site_id, west, main, __future__, mso_schema_site_vrf_region_cidr_subnet, listing, dagwieers, query, on, This, Query, mso_schema_template_vrf_region_cidr, cidrs, metadata_version, ip, MSOModule, dag, schema, Manage, __name__, Site, corruption, status, schemas, id, Add, vrf_ref, method, vrf, value, absolute_import, request, EXAMPLES, v, dict, gnu, s, c, specific, IPs, None, from, Provided, collate, org, region_idx, remove, a, extends_documentation_fragment, FIXME, site, supports_check_mode, txt, existing, schema_path, Path, AnsibleModule, params, VRF, us, type, op, Dag, cidr, default, wrong, Remove, Region, Schema, mso_schema_site_anp_epg_staticleaf, mso_schema_site_anp_epg_static_leaf, exit_json, templateName, API, community, username, subnet_path, does, in, zone, print_function, aliases, CIDR, present, has, templates, DANGEROUS, referenced, Copyright, absent, append, replace, licenses, this, gpl, r, options, www, v3, ANSIBLE_METADATA, required, Public, __main__, regions, coding, com, author, True, not, schema_obj, an, index, notes, mso_schema_template_vrf_region_cidr_subnet, SomeSecretPassword, site_idx, subnets, are, mso_schema_template_vrf, ops, access, based, check_mode, changing, network, siteId, msg, format, argument_spec, import, mso_host, C, state, utf, join, vrfRef, Multi, Wieers, if, vrfs, see, indexes, VRF1, https, subnet, description, and, of, template, multiple, as, range, update, RETURN
```  "
-------------------------------------------------------------------------
"mso_schema_site_anp_epg_staticleaf:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_anp_epg_staticleaf:
"
-------------------------------------------------------------------------
"```python
mso_schema_site_anp_epg_staticleaf
```"
-------------------------------------------------------------------------
"mso_schema_site_anp_epg_staticleaf:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_anp_epg_staticleaf:
"
-------------------------------------------------------------------------
mso_schema_site_anp_epg_staticleaf
-------------------------------------------------------------------------
"mso_schema_site_anp_epg_staticleaf:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_anp_epg_staticleaf:
"
-------------------------------------------------------------------------
"```python
mso_schema_site_anp_epg_staticleaf
```"
-------------------------------------------------------------------------
"mso_schema_site_anp_epg_staticleaf:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_anp_epg_staticport:
"
-------------------------------------------------------------------------
"```yaml
 - name: Add a new static port to a site EPG
     host: mso_host
     username: admin
     password: SomeSecretPassword
```"
-------------------------------------------------------------------------
"mso_schema_site_anp_epg_staticport:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_anp_epg_staticport:
"
-------------------------------------------------------------------------
"To adapt the code snippet based on the provided information, the new code snippet will look like the following:

``` python
mso_schema_site_anp_epg_staticport
```"
-------------------------------------------------------------------------
"mso_schema_site_anp_epg_staticport:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_anp_epg_staticport:
"
-------------------------------------------------------------------------
mso_schema_site_anp_epg_staticport:
-------------------------------------------------------------------------
"mso_schema_site_anp_epg_staticport:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_anp_epg_staticport:
"
-------------------------------------------------------------------------
"```
EXAMPLES = r'''
   register: query_result
 
 - name: Query all site EPG static ports
     host: mso_host
     username: admin
     password: SomeSecretPassword
'''

# Required dependency: ansible.module_utils.network.aci.mso, __future__, ansible.module_utils.basic
```"
-------------------------------------------------------------------------
"mso_schema_site_anp_epg_staticport:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"- name: Remove a site BD
mso_schema_site_bd:
"
-------------------------------------------------------------------------
"- name: Remove a site BD
  mso_schema_site_bd:"
-------------------------------------------------------------------------
"- name: Remove a site BD
mso_schema_site_bd:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"- name: Query a specific site BD
mso_schema_site_bd:
"
-------------------------------------------------------------------------
"```python
- name: Query a specific site BD
  mso_schema_site_bd:
```"
-------------------------------------------------------------------------
"- name: Query a specific site BD
mso_schema_site_bd:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"- name: Query all site BDs
mso_schema_site_bd:
"
-------------------------------------------------------------------------
"```yaml
- name: Query all site BDs
  mso_schema_site_bd:
```"
-------------------------------------------------------------------------
"- name: Query all site BDs
mso_schema_site_bd:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_bd_l3out:
"
-------------------------------------------------------------------------
mso_schema_site_bd_l3out:
-------------------------------------------------------------------------
"mso_schema_site_bd_l3out:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_bd_l3out:
"
-------------------------------------------------------------------------
"EXAMPLES = r'''
   delegate_to: localhost
 
 - name: Remove a site BD l3out
     host: mso_host
     username: admin
     password: SomeSecretPassword
'''"
-------------------------------------------------------------------------
"mso_schema_site_bd_l3out:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_bd_l3out:
"
-------------------------------------------------------------------------
"```yaml
   delegate_to: localhost
 
 - name: Query a specific site BD l3out
     host: mso_host
     username: admin
     password: SomeSecretPassword
```"
-------------------------------------------------------------------------
"mso_schema_site_bd_l3out:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"mso_schema_site_bd_l3out:
"
-------------------------------------------------------------------------
"```yaml
register: query_result

- name: Query all site BD l3outs
  mso_host: mso_host
  username: admin
  password: SomeSecretPassword
```"
-------------------------------------------------------------------------
"mso_schema_site_bd_l3out:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"- name: Remove a site VRF region CIDR subnet
mso_schema_site_vrf_region_cidr_subnet:
"
-------------------------------------------------------------------------
"- name: Remove a site VRF region CIDR subnet
  mso_schema_site_vrf_region_cidr_subnet:"
-------------------------------------------------------------------------
"- name: Remove a site VRF region CIDR subnet
mso_schema_site_vrf_region_cidr_subnet:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"- name: Query a specific site VRF region CIDR subnet
mso_schema_site_vrf_region_cidr_subnet:
"
-------------------------------------------------------------------------
"- name: Query a specific site VRF region CIDR subnet
  mso_schema_site_vrf_region_cidr_subnet:"
-------------------------------------------------------------------------
"- name: Query a specific site VRF region CIDR subnet
mso_schema_site_vrf_region_cidr_subnet:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"- name: Query all site VRF region CIDR subnet
mso_schema_site_vrf_region_cidr_subnet:
"
-------------------------------------------------------------------------
"- name: Query all site VRF region CIDR subnet
  mso_schema_site_vrf_region_cidr_subnet:"
-------------------------------------------------------------------------
"- name: Query all site VRF region CIDR subnet
mso_schema_site_vrf_region_cidr_subnet:
"
-------------------------------------------------------------------------
"Recom
PRs: 62835, 62839"
-------------------------------------------------------------------------
=========================================================================
"pkg['automatic'] = bool(int(pkg['automatic']))
"
-------------------------------------------------------------------------
pkg['automatic'] = bool(int(pkg['automatic']))
-------------------------------------------------------------------------
"pkg['automatic'] = bool(int(pkg['automatic']))
"
-------------------------------------------------------------------------
"Recom
PRs: 62766, 62825"
-------------------------------------------------------------------------
=========================================================================
"pkg['vital'] = bool(int(pkg['vital']))
"
-------------------------------------------------------------------------
"```python
pkg['vital'] = bool(int(pkg['vital']))
```"
-------------------------------------------------------------------------
"pkg['vital'] = bool(int(pkg['vital']))
"
-------------------------------------------------------------------------
"Recom
PRs: 62766, 62825"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: path
"
-------------------------------------------------------------------------
elements: str
-------------------------------------------------------------------------
"elements: path
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: path
"
-------------------------------------------------------------------------
elements: str
-------------------------------------------------------------------------
"elements: path
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"```python
elements: path
```"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"principals=dict(type='list', elements='str'),
options=dict(type='list', elements='str'),
"
-------------------------------------------------------------------------
"principals=dict(type='list', elements='str'),
options=dict(type='list', elements='str')"
-------------------------------------------------------------------------
"principals=dict(type='list', elements='str'),
options=dict(type='list', elements='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"```python
elements: path
```"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
- elements: path
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
elements: path
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
elements: path
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"```python
elements: str
```"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: str
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='elements', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"elements: str
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"elements: path
"
-------------------------------------------------------------------------
elements: str
-------------------------------------------------------------------------
"elements: path
"
-------------------------------------------------------------------------
"Recom
PRs: 62178, 62750"
-------------------------------------------------------------------------
=========================================================================
"# Set to true to enable logging of all signed requests
self._debug = False

"
-------------------------------------------------------------------------
"# Set to true to enable logging of all signed requests
self._debug = True"
-------------------------------------------------------------------------
"# Set to true to enable logging of all signed requests
self._debug = False

"
-------------------------------------------------------------------------
"Recom
PRs: 61693, 62709"
-------------------------------------------------------------------------
=========================================================================
"def _log(self, msg, data=None):
    '''
    Write arguments to acme.log when logging is enabled.
    '''
    if self._debug:
        with open('acme.log', 'ab') as f:
            f.write('[{0}] {1}\n'.format(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%s'), msg).encode('utf-8'))
            if data is not None:
                f.write('{0}\n\n'.format(json.dumps(data, indent=2, sort_keys=True)).encode('utf-8'))

"
-------------------------------------------------------------------------
"```python
import json
import datetime

def _log(self, msg, data=None):
    '''
    Write arguments to acme.log when logging is enabled.
    '''
    if self._debug:
        with open('acme.log', 'ab') as f:
            f.write('[{0}] {1}\n'.format(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%s'), msg).encode('utf-8'))
            if data is not None:
                f.write('{0}\n\n'.format(json.dumps(data, indent=2, sort_keys=True)).encode('utf-8'))
```"
-------------------------------------------------------------------------
"def _log(self, msg, data=None):
    '''
    Write arguments to acme.log when logging is enabled.
    '''
    if self._debug:
        with open('acme.log', 'ab') as f:
            f.write('[{0}] {1}\n'.format(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%s'), msg).encode('utf-8'))
            if data is not None:
                f.write('{0}\n\n'.format(json.dumps(data, indent=2, sort_keys=True)).encode('utf-8'))

"
-------------------------------------------------------------------------
"Recom
PRs: 61693, 62709"
-------------------------------------------------------------------------
=========================================================================
"self._log('URL', url)
self._log('protected', protected)
self._log('payload', payload)
    data[""header""] = jws_header.copy()
    for k, v in protected.items():
        hv = data[""header""].pop(k, None)
self._log('signed request', data)
"
-------------------------------------------------------------------------
"```python
self._log('URL', url)
self._log('protected', protected)
self._log('payload', payload)
data[""header""] = jws_header.copy()
for k, v in protected.items():
    hv = data[""header""].pop(k, None)
self._log('signed request', data)
```"
-------------------------------------------------------------------------
"self._log('URL', url)
self._log('protected', protected)
self._log('payload', payload)
    data[""header""] = jws_header.copy()
    for k, v in protected.items():
        hv = data[""header""].pop(k, None)
self._log('signed request', data)
"
-------------------------------------------------------------------------
"Recom
PRs: 61693, 62709"
-------------------------------------------------------------------------
=========================================================================
"self._log('parsed result', decoded_result)
"
-------------------------------------------------------------------------
"self._log('parsed result', decoded_result)"
-------------------------------------------------------------------------
"self._log('parsed result', decoded_result)
"
-------------------------------------------------------------------------
"Recom
PRs: 61693, 62709"
-------------------------------------------------------------------------
=========================================================================
"if self.version == 1:
    update_request['resource'] = 'reg'
"
-------------------------------------------------------------------------
"```python
if self.version == 1:
    update_request['resource'] = 'reg'
```"
-------------------------------------------------------------------------
"if self.version == 1:
    update_request['resource'] = 'reg'
"
-------------------------------------------------------------------------
"Recom
PRs: 61693, 62709"
-------------------------------------------------------------------------
=========================================================================
"such as L(Let's Encrypt,https://letsencrypt.org/) or
L(Buypass,https://www.buypass.com/). The current implementation
supports the C(http-01), C(dns-01) and C(tls-alpn-01) challenges.""
"
-------------------------------------------------------------------------
"```yaml
short_description: Create SSL/TLS certificates with the ACME protocol
description:
    - ""Create and renew SSL/TLS certificates with a CA supporting the
       L(ACME protocol,https://tools.ietf.org/html/rfc8555). The current implementation
       supports the C(http-01), C(dns-01) and C(tls-alpn-01) challenges.""
```"
-------------------------------------------------------------------------
"such as L(Let's Encrypt,https://letsencrypt.org/) or
L(Buypass,https://www.buypass.com/). The current implementation
supports the C(http-01), C(dns-01) and C(tls-alpn-01) challenges.""
"
-------------------------------------------------------------------------
"Recom
PRs: 61693, 62709"
-------------------------------------------------------------------------
=========================================================================
"- name: Buypass Go SSL
  description: Documentation for the Buypass Certification Authority.
               Provides useful information for example on rate limits.
  link: https://www.buypass.com/ssl/products/acme
"
-------------------------------------------------------------------------
"```yaml
- name: Buypass Go SSL
  description: Documentation for the Buypass Certification Authority. Provides useful information for example on rate limits.
  link: https://www.buypass.com/ssl/products/acme
```"
-------------------------------------------------------------------------
"- name: Buypass Go SSL
  description: Documentation for the Buypass Certification Authority.
               Provides useful information for example on rate limits.
  link: https://www.buypass.com/ssl/products/acme
"
-------------------------------------------------------------------------
"Recom
PRs: 61693, 62709"
-------------------------------------------------------------------------
=========================================================================
"challenge_response[""type""] = self.challenge
"
-------------------------------------------------------------------------
"challenge_response[""type""] = self.challenge"
-------------------------------------------------------------------------
"challenge_response[""type""] = self.challenge
"
-------------------------------------------------------------------------
"Recom
PRs: 61693, 62709"
-------------------------------------------------------------------------
=========================================================================
"principle be used with any CA providing an ACME endpoint, such as
L(Buypass Go SSL,https://www.buypass.com/ssl/products/acme).""
"
-------------------------------------------------------------------------
"principle be used with any CA providing an ACME endpoint, such as
L(Buypass Go SSL,https://www.buypass.com/ssl/products/acme)."""
-------------------------------------------------------------------------
"principle be used with any CA providing an ACME endpoint, such as
L(Buypass Go SSL,https://www.buypass.com/ssl/products/acme).""
"
-------------------------------------------------------------------------
"Recom
PRs: 61693, 62709"
-------------------------------------------------------------------------
=========================================================================
"- ""Must be 1 for the classic Let's Encrypt ACME endpoint and Buypass'
   current production endpoint, or 2 for standardized ACME v2 endpoints.""
"
-------------------------------------------------------------------------
"""Must be 1 for the classic Let's Encrypt ACME endpoint and Buypass' current production endpoint, or 2 for standardized ACME v2 endpoints."""
-------------------------------------------------------------------------
"- ""Must be 1 for the classic Let's Encrypt ACME endpoint and Buypass'
   current production endpoint, or 2 for standardized ACME v2 endpoints.""
"
-------------------------------------------------------------------------
"Recom
PRs: 61693, 62709"
-------------------------------------------------------------------------
=========================================================================
"U(https://letsencrypt.org/docs/staging-environment/). For Buypass, all
endpoints can be found here:
U(https://community.buypass.com/t/63d4ay/buypass-go-ssl-endpoints)""
For Buypass, the production directory URL for ACME v1 is
U(https://api.buypass.com/acme/directory).""
(staging and production), Buypass (staging and production), and
"
-------------------------------------------------------------------------
"```yaml
options:
      notes:
        - ""*Note:* In Ansible 2.14, this option *will be required* and will no longer have a default.""
        - ""For Let's Encrypt, all staging endpoints can be found here: U(https://letsencrypt.org/docs/staging-environment/). For Buypass, all
endpoints can be found here: U(https://community.buypass.com/t/63d4ay/buypass-go-ssl-endpoints)""
        - ""For Let's Encrypt, the production directory URL for ACME v1 is U(https://acme-v01.api.letsencrypt.org/directory), and the production directory URL for ACME v2 is U(https://acme-v02.api.letsencrypt.org/directory). For Buypass, the production directory URL for ACME v1 is U(https://api.buypass.com/acme/directory).""
        - ""*Warning:* So far, the module has only been tested against Let's Encrypt L(Pebble testing server,https://github.com/letsencrypt/Pebble).""
options:
  type: str
validate_certs:
  type: bool
  description: ""When set to `yes`, validate the SSL certificate. Because of the community behind Let's Encrypt and Buypass (staging and production), no changes are required for validation.""
```"
-------------------------------------------------------------------------
"U(https://letsencrypt.org/docs/staging-environment/). For Buypass, all
endpoints can be found here:
U(https://community.buypass.com/t/63d4ay/buypass-go-ssl-endpoints)""
For Buypass, the production directory URL for ACME v1 is
U(https://api.buypass.com/acme/directory).""
(staging and production), Buypass (staging and production), and
"
-------------------------------------------------------------------------
"Recom
PRs: 61693, 62709"
-------------------------------------------------------------------------
=========================================================================
"if 'Not logged in to ' in out:
elif 'Removing login credentials for ' in out:
"
-------------------------------------------------------------------------
"```python
if 'Not logged in to ' in out:
    self.fail(""Could not log out: %s"" % err)
    self.results['changed'] = False
    self.results['changed'] = True
elif 'Removing login credentials for ' in out:
    self.client.module.warn('Unable to determine whether logout was successful.')
```"
-------------------------------------------------------------------------
"if 'Not logged in to ' in out:
elif 'Removing login credentials for ' in out:
"
-------------------------------------------------------------------------
"Recom
PRs: 62621, 62704"
-------------------------------------------------------------------------
=========================================================================
"if 'Not logged in to ' in out:
elif 'Removing login credentials for ' in out:
"
-------------------------------------------------------------------------
"```python
if 'Not logged in to ' in out:
elif 'Removing login credentials for ' in out:
```"
-------------------------------------------------------------------------
"if 'Not logged in to ' in out:
elif 'Removing login credentials for ' in out:
"
-------------------------------------------------------------------------
"Recom
PRs: 62621, 62703"
-------------------------------------------------------------------------
=========================================================================
"return [p.strip() for p in patterns if p.strip()]
"
-------------------------------------------------------------------------
"```python
def split_host_pattern(pattern):
    return [p.strip() for p in pattern if p.strip()]
```"
-------------------------------------------------------------------------
"return [p.strip() for p in patterns if p.strip()]
"
-------------------------------------------------------------------------
"Recom
PRs: 62442, 62679"
-------------------------------------------------------------------------
=========================================================================
"'a,,b': ['a', 'b'],
'a,  ,b,,c, ,': ['a', 'b', 'c'],
',': [],
'': [],
"
-------------------------------------------------------------------------
"```python
class TestInventory(unittest.TestCase):
     pattern_lists = {
         'a,,b': ['a', 'b'],
         'a,  ,b,,c, ': ['a', 'b', 'c'],
         ',': [],
         '': [],
     }
```"
-------------------------------------------------------------------------
"'a,,b': ['a', 'b'],
'a,  ,b,,c, ,': ['a', 'b', 'c'],
',': [],
'': [],
"
-------------------------------------------------------------------------
"Recom
PRs: 62442, 62679"
-------------------------------------------------------------------------
=========================================================================
"from ansible.utils.unsafe_proxy import AnsibleUnsafeText, AnsibleUnsafeBytes
"
-------------------------------------------------------------------------
"from ansible.parsing.yaml.objects import AnsibleUnsafeText, AnsibleUnsafeBytes"
-------------------------------------------------------------------------
"from ansible.utils.unsafe_proxy import AnsibleUnsafeText, AnsibleUnsafeBytes
"
-------------------------------------------------------------------------
"Recom
PRs: 62598, 62614"
-------------------------------------------------------------------------
=========================================================================
"represent_binary = yaml.representer.SafeRepresenter.represent_binary
represent_binary = yaml.representer.SafeRepresenter.represent_str
"
-------------------------------------------------------------------------
"```python
if PY3:
    represent_binary = yaml.representer.SafeRepresenter.represent_str
else:
    represent_binary = yaml.representer.SafeRepresenter.represent_binary

AnsibleDumper.add_representer(
    AnsibleUnicode,
```"
-------------------------------------------------------------------------
"represent_binary = yaml.representer.SafeRepresenter.represent_binary
represent_binary = yaml.representer.SafeRepresenter.represent_str
"
-------------------------------------------------------------------------
"Recom
PRs: 62598, 62614"
-------------------------------------------------------------------------
=========================================================================
"AnsibleDumper.add_representer(
AnsibleUnsafeBytes,
represent_binary,


"
-------------------------------------------------------------------------
"```python
AnsibleDumper.add_representer(
    AnsibleUnsafeBytes,
    represent_binary,
)
```"
-------------------------------------------------------------------------
"AnsibleDumper.add_representer(
AnsibleUnsafeBytes,
represent_binary,


"
-------------------------------------------------------------------------
"Recom
PRs: 62598, 62614"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.six import PY2
from ansible.utils.unsafe_proxy import AnsibleUnsafeText, AnsibleUnsafeBytes
"
-------------------------------------------------------------------------
"from ansible.module_utils.six import PY2
from ansible.utils.unsafe_proxy import AnsibleUnsafeText, AnsibleUnsafeBytes"
-------------------------------------------------------------------------
"from ansible.module_utils.six import PY2
from ansible.utils.unsafe_proxy import AnsibleUnsafeText, AnsibleUnsafeBytes
"
-------------------------------------------------------------------------
"Recom
PRs: 62598, 62614"
-------------------------------------------------------------------------
=========================================================================
"def test_ansible_vault_encrypted_unicode(self):
"
-------------------------------------------------------------------------
"```python
class TestAnsibleDumper(unittest.TestCase, YamlTestUtils):
    def _loader(self, stream):
        return AnsibleLoader(stream, vault_secrets=self.vault.secrets)

    def test_ansible_vault_encrypted_unicode(self):
        pass
```"
-------------------------------------------------------------------------
"def test_ansible_vault_encrypted_unicode(self):
"
-------------------------------------------------------------------------
"Recom
PRs: 62598, 62614"
-------------------------------------------------------------------------
=========================================================================
"
def test_bytes(self):
    b_text = u'tréma'.encode('utf-8')
    unsafe_object = AnsibleUnsafeBytes(b_text)
    yaml_out = self._dump_string(unsafe_object, dumper=self.dumper)

    stream = self._build_stream(yaml_out)
    loader = self._loader(stream)

    data_from_yaml = loader.get_single_data()

    result = b_text
    if PY2:
        # https://pyyaml.org/wiki/PyYAMLDocumentation#string-conversion-python-2-only
        # pyyaml on Python 2 can return either unicode or bytes when given byte strings.
        # We normalize that to always return unicode on Python2 as that's right most of the
        # time.  However, this means byte strings can round trip through yaml on Python3 but
        # not on Python2.  To make this code work the same on Python2 and Python3 (we want
        # the Python3 behaviour) we need to change the methods in Ansible to:
        # (1) Let byte strings pass through yaml without being converted on Python2
        # (2) Convert byte strings to text strings before being given to pyyaml  (Without this,
        #       strings would end up as byte strings most of the time which would mostly be wrong)
        # In practice, we mostly read bytes in from files and then pass that to pyyaml, for which
        # the present behavior is correct.
        # This is a workaround for the current behavior.
        result = u'tr\xe9ma'

    self.assertEqual(result, data_from_yaml)

def test_unicode(self):
    u_text = u'nöel'
    unsafe_object = AnsibleUnsafeText(u_text)
    yaml_out = self._dump_string(unsafe_object, dumper=self.dumper)

    stream = self._build_stream(yaml_out)
    loader = self._loader(stream)

    data_from_yaml = loader.get_single_data()

    self.assertEqual(u_text, data_from_yaml)
"
-------------------------------------------------------------------------
"```python
    from units.compat import PY2
    import io
    from __future__ import absolute_import, division, print_function

    class TestAnsibleDumper(unittest.TestCase, YamlTestUtils):
        
        def test_bytes(self):
            b_text = u'tréma'.encode('utf-8')
            unsafe_object = AnsibleUnsafeBytes(b_text)
            yaml_out = self._dump_string(unsafe_object, dumper=self.dumper)

            stream = self._build_stream(yaml_out)
            loader = self._loader(stream)

            data_from_yaml = loader.get_single_data()

            result = b_text
            if PY2:
                # https://pyyaml.org/wiki/PyYAMLDocumentation#string-conversion-python-2-only
                # pyyaml on Python 2 can return either unicode or bytes when given byte strings.
                # We normalize that to always return unicode on Python2 as that's right most of the
                # time.  However, this means byte strings can round trip through yaml on Python3 but
                # not on Python2.  To make this code work the same on Python2 and Python3 (we want
                # the Python3 behaviour) we need to change the methods in Ansible to:
                # (1) Let byte strings pass through yaml without being converted on Python2
                # (2) Convert byte strings to text strings before being given to pyyaml  (Without this,
                #       strings would end up as byte strings most of the time which would mostly be wrong)
                # In practice, we mostly read bytes in from files and then pass that to pyyaml, for which
                # the present behavior is correct.
                # This is a workaround for the current behavior.
                result = u'tr\xe9ma'

            self.assertEqual(result, data_from_yaml)

        def test_unicode(self):
            u_text = u'nöel'
            unsafe_object = AnsibleUnsafeText(u_text)
            yaml_out = self._dump_string(unsafe_object, dumper=self.dumper)

            stream = self._build_stream(yaml_out)
            loader = self._loader(stream)

            data_from_yaml = loader.get_single_data()

            self.assertEqual(u_text, data_from_yaml)
```"
-------------------------------------------------------------------------
"
def test_bytes(self):
    b_text = u'tréma'.encode('utf-8')
    unsafe_object = AnsibleUnsafeBytes(b_text)
    yaml_out = self._dump_string(unsafe_object, dumper=self.dumper)

    stream = self._build_stream(yaml_out)
    loader = self._loader(stream)

    data_from_yaml = loader.get_single_data()

    result = b_text
    if PY2:
        # https://pyyaml.org/wiki/PyYAMLDocumentation#string-conversion-python-2-only
        # pyyaml on Python 2 can return either unicode or bytes when given byte strings.
        # We normalize that to always return unicode on Python2 as that's right most of the
        # time.  However, this means byte strings can round trip through yaml on Python3 but
        # not on Python2.  To make this code work the same on Python2 and Python3 (we want
        # the Python3 behaviour) we need to change the methods in Ansible to:
        # (1) Let byte strings pass through yaml without being converted on Python2
        # (2) Convert byte strings to text strings before being given to pyyaml  (Without this,
        #       strings would end up as byte strings most of the time which would mostly be wrong)
        # In practice, we mostly read bytes in from files and then pass that to pyyaml, for which
        # the present behavior is correct.
        # This is a workaround for the current behavior.
        result = u'tr\xe9ma'

    self.assertEqual(result, data_from_yaml)

def test_unicode(self):
    u_text = u'nöel'
    unsafe_object = AnsibleUnsafeText(u_text)
    yaml_out = self._dump_string(unsafe_object, dumper=self.dumper)

    stream = self._build_stream(yaml_out)
    loader = self._loader(stream)

    data_from_yaml = loader.get_single_data()

    self.assertEqual(u_text, data_from_yaml)
"
-------------------------------------------------------------------------
"Recom
PRs: 62598, 62614"
-------------------------------------------------------------------------
=========================================================================
"
if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))
"
-------------------------------------------------------------------------
"```python
if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))
```"
-------------------------------------------------------------------------
"
if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))
"
-------------------------------------------------------------------------
"Recom
PRs: 62538, 62572"
-------------------------------------------------------------------------
=========================================================================
"if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"```python
if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))
```"
-------------------------------------------------------------------------
"if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"Recom
PRs: 62538, 62572"
-------------------------------------------------------------------------
=========================================================================
"if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))"
-------------------------------------------------------------------------
"if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"Recom
PRs: 62538, 62572"
-------------------------------------------------------------------------
=========================================================================
"if state in ('merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"```python
if state in ('merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))
```"
-------------------------------------------------------------------------
"if state in ('merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"Recom
PRs: 62538, 62572"
-------------------------------------------------------------------------
=========================================================================
"commands = []

if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"```python
commands = []

if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))
```"
-------------------------------------------------------------------------
"commands = []

if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"Recom
PRs: 62538, 62572"
-------------------------------------------------------------------------
=========================================================================
"if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"```python
if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))
```"
-------------------------------------------------------------------------
"if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"Recom
PRs: 62538, 62572"
-------------------------------------------------------------------------
=========================================================================
"if state in ('merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))
"
-------------------------------------------------------------------------
"```python
if state in ('merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))
```"
-------------------------------------------------------------------------
"if state in ('merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))
"
-------------------------------------------------------------------------
"Recom
PRs: 62538, 62572"
-------------------------------------------------------------------------
=========================================================================
"if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"```python
if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))
```"
-------------------------------------------------------------------------
"if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"Recom
PRs: 62538, 62572"
-------------------------------------------------------------------------
=========================================================================
"if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"```python
if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))
```"
-------------------------------------------------------------------------
"if state in ('overridden', 'merged', 'replaced') and not want:
    self._module.fail_json(msg='value of config parameter must not be empty for state {0}'.format(state))

"
-------------------------------------------------------------------------
"Recom
PRs: 62538, 62572"
-------------------------------------------------------------------------
=========================================================================
"intf = ''
if match:
    intf = match.group(1)
"
-------------------------------------------------------------------------
"```python
intf = match.group(1) if match else ''
```"
-------------------------------------------------------------------------
"intf = ''
if match:
    intf = match.group(1)
"
-------------------------------------------------------------------------
"Recom
PRs: 62538, 62572"
-------------------------------------------------------------------------
=========================================================================
"self.cron_cmd = self.module.get_bin_path('crontab', required=True)
"
-------------------------------------------------------------------------
"```python
self.cron_cmd = self.module.get_bin_path('crontab', required=True)
```"
-------------------------------------------------------------------------
"self.cron_cmd = self.module.get_bin_path('crontab', required=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 62554, 62563"
-------------------------------------------------------------------------
=========================================================================
"return ""su %s -c '%s -l'"" % (shlex_quote(self.user), shlex_quote(self.cron_cmd))
return ""%s -l %s"" % (shlex_quote(self.cron_cmd), shlex_quote(self.user))
return ""%s %s %s"" % (self.cron_cmd, '-l', shlex_quote(self.user))
%s %s %s"" % (self.cron_cmd, user, '-l')
return ""chown %s %s ; su '%s' -c '%s %s'"" % (
    shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), self.cron_cmd, shlex_quote(path))
%s %s %s"" % (self.cron_cmd, user, shlex_quote(path))
"
-------------------------------------------------------------------------
"```python
return ""su -l %s -c '%s'"" % (shlex_quote(self.user), shlex_quote(self.cron_cmd))
return ""-l %s %s"" % (shlex_quote(self.user), shlex_quote(self.cron_cmd))
return ""%s -l %s"" % (self.cron_cmd, shlex_quote(self.user))
""%s %s %s"" % (self.cron_cmd, user, '-l')
return ""chown %s %s ; su '%s' -c '%s %s'"" % (
    shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), self.cron_cmd, shlex_quote(path))
""%s %s %s"" % (self.cron_cmd, user, shlex_quote(path))
```"
-------------------------------------------------------------------------
"return ""su %s -c '%s -l'"" % (shlex_quote(self.user), shlex_quote(self.cron_cmd))
return ""%s -l %s"" % (shlex_quote(self.cron_cmd), shlex_quote(self.user))
return ""%s %s %s"" % (self.cron_cmd, '-l', shlex_quote(self.user))
%s %s %s"" % (self.cron_cmd, user, '-l')
return ""chown %s %s ; su '%s' -c '%s %s'"" % (
    shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), self.cron_cmd, shlex_quote(path))
%s %s %s"" % (self.cron_cmd, user, shlex_quote(path))
"
-------------------------------------------------------------------------
"Recom
PRs: 62554, 62563"
-------------------------------------------------------------------------
=========================================================================
"self.cron_cmd = self.module.get_bin_path('cronvar', required=True)
"
-------------------------------------------------------------------------
"```python
self.cron_cmd = self.module.get_bin_path('cronvar', required=True)
```"
-------------------------------------------------------------------------
"self.cron_cmd = self.module.get_bin_path('cronvar', required=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 62554, 62563"
-------------------------------------------------------------------------
=========================================================================
"return ""su %s -c '%s -l'"" % (shlex_quote(self.user), shlex_quote(self.cron_cmd))
return ""%s -l %s"" % (shlex_quote(self.cron_cmd), shlex_quote(self.user))
return ""%s %s %s"" % (self.cron_cmd, '-l', shlex_quote(self.user))
%s %s %s"" % (self.cron_cmd, user, '-l')
return ""chown %s %s ; su '%s' -c '%s %s'"" % (
    shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), self.cron_cmd, shlex_quote(path))
%s %s %s"" % (self.cron_cmd, user, shlex_quote(path))
"
-------------------------------------------------------------------------
"```python
return ""su %s -c '%s -l'"" % (shlex_quote(self.user), shlex_quote(self.cron_cmd))

return ""%s -l %s"" % (shlex_quote(self.cron_cmd), shlex_quote(self.user))

return ""%s %s %s"" % (self.cron_cmd, '-l', shlex_quote(self.user))

return ""%s %s %s"" % (self.cron_cmd, user, '-l')

return ""chown %s %s ; su '%s' -c '%s %s'"" % (
    shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), self.cron_cmd, shlex_quote(path))

return ""%s %s %s"" % (self.cron_cmd, user, shlex_quote(path))
```"
-------------------------------------------------------------------------
"return ""su %s -c '%s -l'"" % (shlex_quote(self.user), shlex_quote(self.cron_cmd))
return ""%s -l %s"" % (shlex_quote(self.cron_cmd), shlex_quote(self.user))
return ""%s %s %s"" % (self.cron_cmd, '-l', shlex_quote(self.user))
%s %s %s"" % (self.cron_cmd, user, '-l')
return ""chown %s %s ; su '%s' -c '%s %s'"" % (
    shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), self.cron_cmd, shlex_quote(path))
%s %s %s"" % (self.cron_cmd, user, shlex_quote(path))
"
-------------------------------------------------------------------------
"Recom
PRs: 62554, 62563"
-------------------------------------------------------------------------
=========================================================================
"# we want this before the extension is added
full_name = '{0}.{1}'.format(acr.n_python_package_name, n_resource)
"
-------------------------------------------------------------------------
"```python
# we want this before the extension is added
import __future__

full_name = '{0}.{1}'.format(acr.n_python_package_name, n_resource)
```"
-------------------------------------------------------------------------
"# we want this before the extension is added
full_name = '{0}.{1}'.format(acr.n_python_package_name, n_resource)
"
-------------------------------------------------------------------------
"Recom
PRs: 60317, 62561"
-------------------------------------------------------------------------
=========================================================================
"return full_name, to_text(file_path)
return None, None
"
-------------------------------------------------------------------------
"```python
from __future__ import print_function, absolute_import

class PluginLoader:
    if hasattr(pkg, '__loader__') and isinstance(pkg.__loader__, AnsibleFlatMapLoader):
        try:
            file_path = pkg.__loader__.find_file(n_resource)
        except IOError:
            # this loader already takes care of extensionless files, so if we didn't find it, just bail
            return None, None

    pkg_path = os.path.dirname(pkg.__file__)
 ```"
-------------------------------------------------------------------------
"return full_name, to_text(file_path)
return None, None
"
-------------------------------------------------------------------------
"Recom
PRs: 60317, 62561"
-------------------------------------------------------------------------
=========================================================================
"return full_name, to_text(n_resource_path)
return None, None
rn full_name, to_text(found_files[0])
rn self.find_plugin_with_name(name, mod_type, ignore_deprecated, check_aliases, collection_list)[1]

_plugin_with_name(self, name, mod_type='', ignore_deprecated=False, check_aliases=False, collection_list=None):
Find a plugin named name '''
return None, None
"
-------------------------------------------------------------------------
"```python
return None, None
return full_name, to_text(found_files[0])
return self.find_plugin_with_name(name, mod_type, ignore_deprecated, check_aliases, collection_list)[1]

def find_plugin_with_name(self, name, mod_type='', ignore_deprecated=False, check_aliases=False, collection_list=None):
    ''' Find a plugin named name '''
    return None, None
```"
-------------------------------------------------------------------------
"return full_name, to_text(n_resource_path)
return None, None
rn full_name, to_text(found_files[0])
rn self.find_plugin_with_name(name, mod_type, ignore_deprecated, check_aliases, collection_list)[1]

_plugin_with_name(self, name, mod_type='', ignore_deprecated=False, check_aliases=False, collection_list=None):
Find a plugin named name '''
return None, None
"
-------------------------------------------------------------------------
"Recom
PRs: 60317, 62561"
-------------------------------------------------------------------------
=========================================================================
"full_name = name
full_name, p = self._find_fq_plugin(candidate_name, suffix)
return full_name, p
 None
f._find_plugin_legacy(name, ignore_deprecated, check_aliases, suffix)
"
-------------------------------------------------------------------------
"```python
full_name, p = self._find_fq_plugin(candidate_name, suffix)
return full_name, p

self._find_plugin_legacy(name, ignore_deprecated, check_aliases, suffix)
```"
-------------------------------------------------------------------------
"full_name = name
full_name, p = self._find_fq_plugin(candidate_name, suffix)
return full_name, p
 None
f._find_plugin_legacy(name, ignore_deprecated, check_aliases, suffix)
"
-------------------------------------------------------------------------
"Recom
PRs: 60317, 62561"
-------------------------------------------------------------------------
=========================================================================
"if name.startswith('ansible_collections.'):
    full_name = name
else:
    full_name = '.'.join([self.package, name])
"
-------------------------------------------------------------------------
"```python
if name.startswith('ansible_collections.'):
    full_name = name
else:
    full_name = '.'.join([self.package, name])
```"
-------------------------------------------------------------------------
"if name.startswith('ansible_collections.'):
    full_name = name
else:
    full_name = '.'.join([self.package, name])
"
-------------------------------------------------------------------------
"Recom
PRs: 60317, 62561"
-------------------------------------------------------------------------
=========================================================================
"name, path = self.find_plugin_with_name(name, collection_list=collection_list)
"
-------------------------------------------------------------------------
"from __future__ import print_function

class PluginLoader:
    collection_list = kwargs.pop('collection_list', None)
    if name in self.aliases:
        name = self.aliases[name]
    if path is None:
        return None

    name, path = self.find_plugin_with_name(name, collection_list=collection_list)"
-------------------------------------------------------------------------
"name, path = self.find_plugin_with_name(name, collection_list=collection_list)
"
-------------------------------------------------------------------------
"Recom
PRs: 60317, 62561"
-------------------------------------------------------------------------
=========================================================================
"if self._find_module(fullname, path, load=False)[0]:
mod = self._find_module(fullname, None, load=True)[1]

if not mod:
    raise ImportError('module {0} not found'.format(fullname))

return mod

_find_module(self, fullname, path, load):
# this loader is only concerned with items under the Ansible Collections namespace hierarchy, ignore others
if not fullname.startswith('ansible_collections.') and fullname != 'ansible_collections':
    return False, None

    if not load:
        return True, None

    return True, sys.modules[fullname]
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, division, print_function

class AnsibleCollectionLoader(with_metaclass(Singleton, object)):

    def _find_module(self, fullname, path, load):
        if not fullname.startswith('ansible_collections.') and fullname != 'ansible_collections':
            return False, None

        if not load:
            return True, None

        return True, sys.modules[fullname]

    def find_module(self, fullname, path=None):
        mod = self._find_module(fullname, None, load=True)[1]

        if not mod:
            raise ImportError('module {0} not found'.format(fullname))

        return mod

    def load_module(self, fullname):
        if sys.modules.get(fullname):
            return sys.modules[fullname]
```
"
-------------------------------------------------------------------------
"if self._find_module(fullname, path, load=False)[0]:
mod = self._find_module(fullname, None, load=True)[1]

if not mod:
    raise ImportError('module {0} not found'.format(fullname))

return mod

_find_module(self, fullname, path, load):
# this loader is only concerned with items under the Ansible Collections namespace hierarchy, ignore others
if not fullname.startswith('ansible_collections.') and fullname != 'ansible_collections':
    return False, None

    if not load:
        return True, None

    return True, sys.modules[fullname]
"
-------------------------------------------------------------------------
"Recom
PRs: 60317, 62561"
-------------------------------------------------------------------------
=========================================================================
"
if not load:
    return True, None

return True, mod
if not load:
    return True, None

"
-------------------------------------------------------------------------
"```python
if not load:
    return True, None

return True, mod
```"
-------------------------------------------------------------------------
"
if not load:
    return True, None

return True, mod
if not load:
    return True, None

"
-------------------------------------------------------------------------
"Recom
PRs: 60317, 62561"
-------------------------------------------------------------------------
=========================================================================
"return True, newmod
"
-------------------------------------------------------------------------
"from __future__ import print_function, division, absolute_import

class AnsibleCollectionLoader(with_metaclass(Singleton, object)):
    if not synpkg_def.get('allow_external_subpackages'):
        # if external subpackages are NOT allowed, we're done
        sys.modules[fullname] = newmod
        return True, newmod

    # if external subpackages ARE allowed, check for on-disk implementations and return a normal
    # package if we find one, otherwise return the one we created here
    return True, newmod"
-------------------------------------------------------------------------
"return True, newmod
"
-------------------------------------------------------------------------
"Recom
PRs: 60317, 62561"
-------------------------------------------------------------------------
=========================================================================
"if not load:
    return True, None

"
-------------------------------------------------------------------------
"```python
if not load:
    return True, None
```"
-------------------------------------------------------------------------
"if not load:
    return True, None

"
-------------------------------------------------------------------------
"Recom
PRs: 60317, 62561"
-------------------------------------------------------------------------
=========================================================================
"return True, newmod
return True, newmod
rn False, None
"
-------------------------------------------------------------------------
"```python
return True, newmod
return False, None
```"
-------------------------------------------------------------------------
"return True, newmod
return True, newmod
rn False, None
"
-------------------------------------------------------------------------
"Recom
PRs: 60317, 62561"
-------------------------------------------------------------------------
=========================================================================
"# FIXME: detect/warn on intra-collection function name collisions
_impl = self._collection_jinja_func_cache[key]
"
-------------------------------------------------------------------------
"```python
# FIXME: detect/warn on intra-collection function name collisions
try:
    _impl = self._collection_jinja_func_cache[key]
except KeyError:
    pass
```"
-------------------------------------------------------------------------
"# FIXME: detect/warn on intra-collection function name collisions
_impl = self._collection_jinja_func_cache[key]
"
-------------------------------------------------------------------------
"Recom
PRs: 62543, 62555"
-------------------------------------------------------------------------
=========================================================================
"cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""su %s -c '%s -l'"" % (shlex_quote(self.user), shlex_quote(cron_cmd))
        return ""%s -l %s"" % (shlex_quote(cron_cmd), shlex_quote(self.user))
        return ""%s %s %s"" % (cron_cmd, '-l', shlex_quote(self.user))
return ""%s %s %s"" % (cron_cmd, user, '-l')
cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""chown %s %s ; su '%s' -c '%s %s'"" % (shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), cron_cmd, shlex_quote(path))
return ""%s %s %s"" % (cron_cmd, user, shlex_quote(path))
"
-------------------------------------------------------------------------
"```python
cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""%s %s %s"" % (cron_cmd, '-l', shlex_quote(self.user))
cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""chown %s %s ; su '%s' -c '%s %s'"" % (shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), cron_cmd, shlex_quote(path))
```"
-------------------------------------------------------------------------
"self.cron_cmd = self.module.get_bin_path('crontab', required=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 59765, 62546"
-------------------------------------------------------------------------
=========================================================================
"cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""su %s -c '%s -l'"" % (shlex_quote(self.user), shlex_quote(cron_cmd))
        return ""%s -l %s"" % (shlex_quote(cron_cmd), shlex_quote(self.user))
        return ""%s %s %s"" % (cron_cmd, '-l', shlex_quote(self.user))
return ""%s %s %s"" % (cron_cmd, user, '-l')
cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""chown %s %s ; su '%s' -c '%s %s'"" % (shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), cron_cmd, shlex_quote(path))
return ""%s %s %s"" % (cron_cmd, user, shlex_quote(path))
"
-------------------------------------------------------------------------
"```python
cron_cmd = self.module.get_bin_path('crontab', required=True)
return ""su %s -c '%s -l'"" % (shlex_quote(self.user), cron_cmd)
return ""%s -l %s"" % (cron_cmd, shlex_quote(self.user))
return ""%s %s -l"" % (cron_cmd, shlex_quote(self.user))
return ""chown %s %s ; su '%s' -c '%s %s'"" % (shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), cron_cmd, shlex_quote(path))
```"
-------------------------------------------------------------------------
"self.cron_cmd = self.module.get_bin_path('cronvar', required=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 59765, 62546"
-------------------------------------------------------------------------
=========================================================================
"cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""su %s -c '%s -l'"" % (shlex_quote(self.user), shlex_quote(cron_cmd))
        return ""%s -l %s"" % (shlex_quote(cron_cmd), shlex_quote(self.user))
        return ""%s %s %s"" % (cron_cmd, '-l', shlex_quote(self.user))
return ""%s %s %s"" % (cron_cmd, user, '-l')
cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""chown %s %s ; su '%s' -c '%s %s'"" % (shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), cron_cmd, shlex_quote(path))
return ""%s %s %s"" % (cron_cmd, user, shlex_quote(path))
"
-------------------------------------------------------------------------
"```python
cron_cmd = self.module.get_bin_path('crontab', required=True)
return ""%s -l %s"" % (cron_cmd, shlex_quote(self.user))

cron_cmd = self.module.get_bin_path('crontab', required=True)
return ""%s -l %s"" % (cron_cmd, shlex_quote(self.user))
```"
-------------------------------------------------------------------------
"cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""su %s -c '%s -l'"" % (shlex_quote(self.user), shlex_quote(cron_cmd))
        return ""%s -l %s"" % (shlex_quote(cron_cmd), shlex_quote(self.user))
        return ""%s %s %s"" % (cron_cmd, '-l', shlex_quote(self.user))
return ""%s %s %s"" % (cron_cmd, user, '-l')
cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""chown %s %s ; su '%s' -c '%s %s'"" % (shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), cron_cmd, shlex_quote(path))
return ""%s %s %s"" % (cron_cmd, user, shlex_quote(path))
"
-------------------------------------------------------------------------
"Recom
PRs: 59765, 62544"
-------------------------------------------------------------------------
=========================================================================
"cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""su %s -c '%s -l'"" % (shlex_quote(self.user), shlex_quote(cron_cmd))
        return ""%s -l %s"" % (shlex_quote(cron_cmd), shlex_quote(self.user))
        return ""%s %s %s"" % (cron_cmd, '-l', shlex_quote(self.user))
return ""%s %s %s"" % (cron_cmd, user, '-l')
cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""chown %s %s ; su '%s' -c '%s %s'"" % (shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), cron_cmd, shlex_quote(path))
return ""%s %s %s"" % (cron_cmd, user, shlex_quote(path))
"
-------------------------------------------------------------------------
"cron_cmd = self.module.get_bin_path('crontab', required=True)
return ""%s -l %s"" % (cron_cmd, shlex_quote(self.user))

cron_cmd = self.module.get_bin_path('crontab', required=True)
return ""chown %s %s ; su '%s' -c '%s -l'"" % (shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), cron_cmd)"
-------------------------------------------------------------------------
"cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""su %s -c '%s -l'"" % (shlex_quote(self.user), shlex_quote(cron_cmd))
        return ""%s -l %s"" % (shlex_quote(cron_cmd), shlex_quote(self.user))
        return ""%s %s %s"" % (cron_cmd, '-l', shlex_quote(self.user))
return ""%s %s %s"" % (cron_cmd, user, '-l')
cron_cmd = self.module.get_bin_path('crontab', required=True)
        return ""chown %s %s ; su '%s' -c '%s %s'"" % (shlex_quote(self.user), shlex_quote(path), shlex_quote(self.user), cron_cmd, shlex_quote(path))
return ""%s %s %s"" % (cron_cmd, user, shlex_quote(path))
"
-------------------------------------------------------------------------
"Recom
PRs: 59765, 62544"
-------------------------------------------------------------------------
=========================================================================
"delete_params = ['name', 'uid', 'layer', 'exception-group-name', 'layer', 'rule-name']

"
-------------------------------------------------------------------------
"delete_params = ['name', 'uid', 'layer', 'exception-group-name', 'rule-name']"
-------------------------------------------------------------------------
"delete_params = ['name', 'uid', 'layer', 'exception-group-name', 'layer', 'rule-name']

"
-------------------------------------------------------------------------
"Recom
PRs: 62525, 62540"
-------------------------------------------------------------------------
=========================================================================
"payload_for_delete = get_copy_payload_with_some_params(payload, delete_params)
code, response = send_request(connection, version, 'delete-'  api_call_object, payload_for_delete)
"
-------------------------------------------------------------------------
"```python
import time
import ansible.module_utils.connection
from __future__ import print_function

payload_for_delete = get_copy_payload_with_some_params(payload, delete_params)
code, response = send_request(connection, version, 'delete-' + api_call_object, payload_for_delete)
```"
-------------------------------------------------------------------------
"payload_for_delete = get_copy_payload_with_some_params(payload, delete_params)
code, response = send_request(connection, version, 'delete-'  api_call_object, payload_for_delete)
"
-------------------------------------------------------------------------
"Recom
PRs: 62525, 62540"
-------------------------------------------------------------------------
=========================================================================
"payload_for_delete = get_copy_payload_with_some_params(payload, delete_params)
code, response = send_request(connection, version, 'delete-'  api_call_object, payload_for_delete)
"
-------------------------------------------------------------------------
"```python
import time
import ansible.module_utils.connection
from __future__ import print_function

payload_for_delete = get_copy_payload_with_some_params(payload, delete_params)
code, response = send_request(connection, version, 'delete-' + api_call_object, payload_for_delete)
```"
-------------------------------------------------------------------------
"payload_for_delete = get_copy_payload_with_some_params(payload, delete_params)
code, response = send_request(connection, version, 'delete-'  api_call_object, payload_for_delete)
"
-------------------------------------------------------------------------
"Recom
PRs: 62525, 62540"
-------------------------------------------------------------------------
=========================================================================
"if equals_code == 404 and equals_response['code'] == 'generic_err_command_not_found':
    module.fail_json(msg='Relevant hotfix is not installed on Check Point server. See sk114661 on Check Point Support Center.')
"
-------------------------------------------------------------------------
"```python
if equals_code == 404 and equals_response['code'] == 'generic_err_command_not_found':
    module.fail_json(msg='Relevant hotfix is not installed on Check Point server. See sk114661 on Check Point Support Center.')
```"
-------------------------------------------------------------------------
"if equals_code == 404 and equals_response['code'] == 'generic_err_command_not_found':
    module.fail_json(msg='Relevant hotfix is not installed on Check Point server. See sk114661 on Check Point Support Center.')
"
-------------------------------------------------------------------------
"Recom
PRs: 62529, 62539"
-------------------------------------------------------------------------
=========================================================================
"result = {'changed': False}
"
-------------------------------------------------------------------------
"```python
result = {'changed': False}
import time
import ansible.module_utils.connection
from __future__ import absolute_import
```"
-------------------------------------------------------------------------
"result = {'changed': False}
"
-------------------------------------------------------------------------
"Recom
PRs: 62523, 62527"
-------------------------------------------------------------------------
=========================================================================
"result['checkpoint_session_uid'] = connection.get_session_uid()

"
-------------------------------------------------------------------------
"import time
from ansible.module_utils.connection import Connection
from __future__ import print_function

result['checkpoint_session_uid'] = connection.get_session_uid()"
-------------------------------------------------------------------------
"result['checkpoint_session_uid'] = connection.get_session_uid()

"
-------------------------------------------------------------------------
"Recom
PRs: 62523, 62527"
-------------------------------------------------------------------------
=========================================================================
"result = {'changed': False}
"
-------------------------------------------------------------------------
"```python
import time
from ansible.module_utils import connection
from __future__ import print_function

def api_call_for_rule(module, api_call_object):
     payload = get_payload_from_parameters(module.params)
     connection = connection.Connection(module._socket_path)
 
     if module.check_mode:
         result = {'changed': False}
         return result
```"
-------------------------------------------------------------------------
"result = {'changed': False}
"
-------------------------------------------------------------------------
"Recom
PRs: 62523, 62527"
-------------------------------------------------------------------------
=========================================================================
"
result['checkpoint_session_uid'] = connection.get_session_uid()

"
-------------------------------------------------------------------------
"```python
import time
import ansible.module_utils.connection
from __future__ import print_function

result['checkpoint_session_uid'] = connection.get_session_uid()
```"
-------------------------------------------------------------------------
"
result['checkpoint_session_uid'] = connection.get_session_uid()

"
-------------------------------------------------------------------------
"Recom
PRs: 62523, 62527"
-------------------------------------------------------------------------
=========================================================================
"if collection_remnant and collection_remnant[0] != '/':
"
-------------------------------------------------------------------------
"```python
if collection_remnant and not collection_remnant.startswith('/'):
```"
-------------------------------------------------------------------------
"if collection_remnant and collection_remnant[0] != '/':
"
-------------------------------------------------------------------------
"Recom
PRs: 62478, 62524"
-------------------------------------------------------------------------
=========================================================================
"if is_old_facts:
    result = {'ansible_facts': {'cloudformation': {}}}
else:
    result = {'cloudformation': {}}
"
-------------------------------------------------------------------------
"if is_old_facts:
    result = {'ansible_facts': {'cloudformation': {}}}
else:
    result = {'cloudformation': {}}"
-------------------------------------------------------------------------
"if is_old_facts:
    result = {'ansible_facts': {'cloudformation': {}}}
else:
    result = {'cloudformation': {}}
"
-------------------------------------------------------------------------
"Recom
PRs: 62290, 62514"
-------------------------------------------------------------------------
=========================================================================
"self.image = 'quay.io/ansible/acme-test-container:1.8.0'
"
-------------------------------------------------------------------------
self.image = 'quay.io/ansible/acme-test-container:1.8.0'
-------------------------------------------------------------------------
"self.image = 'quay.io/ansible/acme-test-container:1.8.0'
"
-------------------------------------------------------------------------
"Recom
PRs: 62381, 62448"
-------------------------------------------------------------------------
=========================================================================
"new_msg = ""[WARNING]: %s"" % msg
"
-------------------------------------------------------------------------
"new_msg = ansible.utils.color(""[WARNING]: %s"" % msg, color='yellow')"
-------------------------------------------------------------------------
"new_msg = ""[WARNING]: %s"" % msg
"
-------------------------------------------------------------------------
"Recom
PRs: 62002, 62435"
-------------------------------------------------------------------------
=========================================================================
"new_msg = ""[WARNING]: %s"" % msg
"
-------------------------------------------------------------------------
"```python
new_msg = ansible.utils.color(""[WARNING]: %s"" % msg, 'red')
```"
-------------------------------------------------------------------------
"new_msg = ""[WARNING]: %s"" % msg
"
-------------------------------------------------------------------------
"Recom
PRs: 62002, 62434"
-------------------------------------------------------------------------
=========================================================================
"if len(ip_addr_want.split(' ')) > 1:
    return ip_addr_want
"
-------------------------------------------------------------------------
"if len(ip_addr_want.split(' ')) > 1:
    return ip_addr_want"
-------------------------------------------------------------------------
"if len(ip_addr_want.split(' ')) > 1:
    return ip_addr_want
"
-------------------------------------------------------------------------
"Recom
PRs: 61642, 62399"
-------------------------------------------------------------------------
=========================================================================
"""""""Return export if found. When not found return None""""""
"
-------------------------------------------------------------------------
"```python
    export = None
    exports_to_list = system.exports.to_list()
    return export if exports_to_list else None
```"
-------------------------------------------------------------------------
"""""""Return export if found. When not found return None""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"""""""Return export if found. Fail module if not found""""""
"
-------------------------------------------------------------------------
"```python
@api_wrapper
def get_export(module, system):
    try:
        export = system.exports.get(export_path=module.params['export'])
        return export
    except Exception as e:
        module.fail_json(msg=str(e))
```"
-------------------------------------------------------------------------
"""""""Return export if found. Fail module if not found""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"# Default value of ssd_cache is True. Disable ssd caching if False
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.six import string_types
from ansible.module_utils.basic import AnsibleModule
from __future__ import absolute_import, division

def create_pool(module, system, name, size, vsize, ssd_cache=True):
    if string_types and ssd_cache is False:
        ssd_cache = None
    if string_types and size == '1TB':
        pool = system.pools.create(name=name, physical_capacity=Capacity('1TB'), virtual_capacity=Capacity(vsize))
    else:
        pool = system.pools.create(name=name, physical_capacity=Capacity(size), virtual_capacity=Capacity(vsize))
    if not ssd_cache:
        pool.update_ssd_enabled(ssd_cache)
```"
-------------------------------------------------------------------------
"# Default value of ssd_cache is True. Disable ssd caching if False
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"# If state - present, check for any parameter of existing group needs modification.
"
-------------------------------------------------------------------------
"```python
if group_detail.volumes:
    # Compare the volume list
```"
-------------------------------------------------------------------------
"# If state - present, check for any parameter of existing group needs modification.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"# If state - present, check for any parameter of existing account needs modification.
"
-------------------------------------------------------------------------
"```python
class ElementSWAccount(object):
    if self.state == 'absent':
        changed = True
    else:
        if account_detail.username is not None and self.element_username is not None and \
                account_detail.username != self.element_username:
            update_account = True
```"
-------------------------------------------------------------------------
"# If state - present, check for any parameter of existing account needs modification.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"# As python3 doesn't have default cmp function, defining manually to provide same functionality.
"
-------------------------------------------------------------------------
"```python
class ElementSWClusterConfig(object):
    return ntp_details

def __cmp__(self, provided_ntp_servers, existing_ntp_servers):
    return (provided_ntp_servers > existing_ntp_servers) - (provided_ntp_servers < existing_ntp_servers)

def get_cluster_details(self):
```"
-------------------------------------------------------------------------
"# As python3 doesn't have default cmp function, defining manually to provide same functionality.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"check parameters and ensure SDK is installed
"
-------------------------------------------------------------------------
"```python
import ansible.module_utils.basic
import ansible.module_utils.six
import collections
from __future__ import print_function, absolute_import

class ElementSWSnapShotSchedule(object):
    def __init__(self):
        """"""
        Parse arguments, setup state variables,
        """"""
        self.argument_spec = ansible.module_utils.basic.netapp_utils.ontap_sf_host_argument_spec()

        # Check parameters and ensure SDK is installed
        # Add your code implementation here
```"
-------------------------------------------------------------------------
"check parameters and ensure SDK is installed
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"check parameters and ensure SDK is installed
"
-------------------------------------------------------------------------
"```python
import ansible.module_utils.basic as basic
from ansible.module_utils import six
from __future__ import division
import collections

class ElementOSVolume(object):
    def __init__(self):
        if not SDK_is_installed():
            raise Exception(""SDK is not installed. Please install SDK."")
        
        self._size_unit_map = netapp_utils.SF_BYTE_MAP
```"
-------------------------------------------------------------------------
"check parameters and ensure SDK is installed
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"check parameters and ensure SDK is installed
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.basic import AnsibleModule
import ansible.module_utils.six
import collections
from __future__ import print_function, absolute_import

class ElementOSVolumeClone(object):
    def __init__(self):
        """"""
        Parse arguments, setup state variables,
        """"""
        self._size_unit_map = ansible.module_utils.SF_BYTE_MAP

# Check parameters and ensure SDK is installed
# Add your code snippet here
```"
-------------------------------------------------------------------------
"check parameters and ensure SDK is installed
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
":return: Return True if a snapshot exists, false if it doesn't
"
-------------------------------------------------------------------------
"```python
def snapshot_exists(self):
    """"""
    This is duplicated from na_ontap_snapshot
    Checks to see if a snapshot exists or not
    """"""
    # TODO: Remove this method and import snapshot module and
    # call get after re-factoring __init__ across all the modules
    
    return True  # Assuming snapshot exists
```"
-------------------------------------------------------------------------
":return: Return True if a snapshot exists, false if it doesn't
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"modify path for the given CIFS share
"
-------------------------------------------------------------------------
"```python
class NetAppONTAPCifsShare(object):
 
    def modify_cifs_share(self):
        """"""
        """"""
        options = {'share-path': self.parameters.get('share_path')}
        cifs_modify = netapp_utils.zapi.NaElement.create_node_with_children(
```"
-------------------------------------------------------------------------
"modify path for the given CIFS share
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- returns a parsesable dictionary instead of raw XML output
"
-------------------------------------------------------------------------
"```python
options:
  version_added: ""2.8""
return_dict:
  description: returns a parsable dictionary instead of raw XML output
  type: bool
  default: false
  version_added: ""2.9""
```"
-------------------------------------------------------------------------
"- returns a parsesable dictionary instead of raw XML output
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"'''Parse raw XML from system-cli and create an Ansible parseable dictionary'''
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.six import iteritems
from __future__ import print_function
import collections

class NetAppONTAPCommand(object):
    def __init__(self):
        pass
    
    def parse_xml_to_dict(self, xmldata):
        xml_import_ok = True
        xml_parse_ok = True

        # Your XML parsing logic to generate a dictionary

        # Example code:
        parsed_dict = {}
        # Logic to parse XML and convert it to a dictionary

        return parsed_dict

# Usage:
# netapp = NetAppONTAPCommand()
# parsed_data = netapp.parse_xml_to_dict(xml_data)
```"
-------------------------------------------------------------------------
"'''Parse raw XML from system-cli and create an Ansible parseable dictionary'''
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"''' Dump XML element data '''
"
-------------------------------------------------------------------------
"```python
    def _end_element(self, name):
        ''' Dump XML element data '''
        self.result_dict['xml_dict'][str(self.result_dict['xml_dict']['active_element'])]['data'] = repr(data)
```"
-------------------------------------------------------------------------
"''' Dump XML element data '''
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"self.module.fail_json(msg='Error Stopping FCP %s' %
"
-------------------------------------------------------------------------
self.module.fail_json(msg='Error Stopping FCP %s' % (to_native(error)))
-------------------------------------------------------------------------
"self.module.fail_json(msg='Error Stopping FCP %s' %
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- name: Destroy firewall Policy
"
-------------------------------------------------------------------------
- name: Destroy firewall Policy
-------------------------------------------------------------------------
"- name: Destroy firewall Policy
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- For a modify operation, this list replaces the existing initiators
"
-------------------------------------------------------------------------
"```python
# Updated context
options:
  description:
  - For a modify operation, this list replaces the existing initiators.
  - List of initiators to be mapped to the igroup.
  - WWPN, WWPN Alias, or iSCSI name of Initiator to add or remove.
  - This module does not add or remove specific initiator(s) in an igroup
aliases:
  - initiator
```"
-------------------------------------------------------------------------
"- For a modify operation, this list replaces the existing initiators
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- name: Modify Igroup Initiators (replaces existing initiators)
"
-------------------------------------------------------------------------
"```yaml
- name: Modify Igroup Initiators (replaces existing initiators)
```"
-------------------------------------------------------------------------
"- name: Modify Igroup Initiators (replaces existing initiators)
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
":param na_element_object: modify or create NaElement object
"
-------------------------------------------------------------------------
:param na_element_object: modify or create NaElement object
-------------------------------------------------------------------------
":param na_element_object: modify or create NaElement object
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- The default for this parameter is '749'
"
-------------------------------------------------------------------------
"```yaml
   pw_server_ip:
     description:
     - The TCP port on the Kerberos administration server where the Kerberos administration service is running.
     type: str
     default: '749'
```"
-------------------------------------------------------------------------
"- The default for this parameter is '749'
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Comma separated list of LDAP servers. FQDN's or IP addresses
"
-------------------------------------------------------------------------
"```yaml
options:
   ldap_servers:
     description: Comma-separated list of LDAP servers. FQDN's or IP addresses
     type: list
```"
-------------------------------------------------------------------------
"- Comma separated list of LDAP servers. FQDN's or IP addresses
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"# extract and assign lun information to return value
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.six.moves import codecs
from ansible.module_utils.six.moves import to_text

class NetAppOntapLUNMap(object):
    if result.get_child_by_name('num-records') and int(result.get_child_content('num-records')) >= 1:
        lun = result.get_child_by_name('attributes-list').get_child_by_name('lun-info')

        hexlify = codecs.getencoder('hex')
        naa_hex = to_text(hexlify(to_bytes(lun.get_child_content('serial-number')))[0])
        return_value = {
            'lun_info': naa_hex
        }
```"
-------------------------------------------------------------------------
"# extract and assign lun information to return value
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
":return: Returns True if the vlan exists, false if it doesn't
"
-------------------------------------------------------------------------
"```python
return True
```"
-------------------------------------------------------------------------
":return: Returns True if the vlan exists, false if it doesn't
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Whether the specified NFS should be enabled or disabled. Creates NFS service if does not exist.
"
-------------------------------------------------------------------------
"```python
    nfs_state:
        description:
            - Whether the specified NFS should be enabled or disabled. Creates NFS service if does not exist.
        default: present
        choices: ['started', 'stopped']
```"
-------------------------------------------------------------------------
"- Whether the specified NFS should be enabled or disabled. Creates NFS service if does not exist.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"# existing snapmirror relation with status 'snapmirrored' will be initialized
- name: Initialize ONTAP/ONTAP SnapMirror
"
-------------------------------------------------------------------------
"```yaml
na_ontap_snapmirror:
  state: present
  source_path: 'ansible:test'
  status: initialized
```  "
-------------------------------------------------------------------------
"# existing snapmirror relation with status 'snapmirrored' will be initialized
- name: Initialize ONTAP/ONTAP SnapMirror
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"Rename the snapshot
"
-------------------------------------------------------------------------
"```python
class NetAppOntapSnapshot(object):
     def rename_snapshot(self):
         """"""
         Rename the snapshot
         """"""
         snapshot_obj = netapp_utils.zapi.NaElement(""snapshot-rename"")
```"
-------------------------------------------------------------------------
"Rename the snapshot
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- name: Create flexGroup volume auto provision as flex group
"
-------------------------------------------------------------------------
- name: Create flexGroup volume auto provision as flex group
-------------------------------------------------------------------------
"- name: Create flexGroup volume auto provision as flex group
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- The default shrink threshold is 50%. It is an error for the shrink threshold to be greater than or equal to the grow threshold.
"
-------------------------------------------------------------------------
"'''
Current context: options:
   shrink_threshold_percent:
     description:
     - Specifies the percentage of the flexible volume's capacity at which autoshrink is initiated.
     - Range between 0 and 100
     - The default shrink threshold is 50%. It is an error for the shrink threshold to be greater than or equal to the grow threshold.
     type: int
 '''"
-------------------------------------------------------------------------
"- The default shrink threshold is 50%. It is an error for the shrink threshold to be greater than or equal to the grow threshold.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"Save a converted parameter
"
-------------------------------------------------------------------------
"```python
class NetAppOntapVolumeAutosize(object):
    
    def modify_to_kb(self, converted_parameters):
        """"""
        :param converted_parameters: Dict of all parameters
        :return:
        """"""
        # Save a converted parameter for later use
        self.converted_parameters = converted_parameters
```"
-------------------------------------------------------------------------
"Save a converted parameter
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Total request-service time-limit in seconds. If the virus-scanner does not respond within the provided time, scan will be timed out.
"
-------------------------------------------------------------------------
"```yaml
options:
  request_timeout:
    description: ""Total request service time limit in seconds. If the virus scanner does not respond within the provided time, the scan will be timed out.""
  scan_files_with_no_ext:
    description: ""Specify whether to scan files with no extension.""
```"
-------------------------------------------------------------------------
"- Total request-service time-limit in seconds. If the virus-scanner does not respond within the provided time, scan will be timed out.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"self.module.fail_json(msg='Error applying policy %s to pool %s: %s' %
"
-------------------------------------------------------------------------
"```python
self.module.fail_json(msg='Error applying policy {} to pool {}: {}'.format(
    self.scanner_policy, self.scanner_pool, to_native(error)
))
```"
-------------------------------------------------------------------------
"self.module.fail_json(msg='Error applying policy %s to pool %s: %s' %
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- The ID of the secondary array to be used in mirroring process
"
-------------------------------------------------------------------------
"```yaml
options:
  required: yes
secondaryArrayId:
  description: The ID of the secondary array to be used in the mirroring process
  required: yes
syncIntervalMinutes:
  description: 
```"
-------------------------------------------------------------------------
"- The ID of the secondary array to be used in mirroring process
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- the unique identifier of the E-Series storage-system with the current api
"
-------------------------------------------------------------------------
"```python
id:
  description: The unique identifier of the E-Series storage-system with the current API.
  returned: on success
  type: str
  sample: 1
```"
-------------------------------------------------------------------------
"- the unique identifier of the E-Series storage-system with the current api
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- the url of the API that this request was processed by
"
-------------------------------------------------------------------------
"```python
api_url:
    description: the url of the API that this request was processed by
    returned: on success
    type: str
    sample: https://webservices.example.com:8443
```"
-------------------------------------------------------------------------
"- the url of the API that this request was processed by
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"storage.monitor role, which will allow only read-only access.
"
-------------------------------------------------------------------------
"```python
import ansible.module_utils.six

from __future__ import print_function, absolute_import
from collections import defaultdict

from ansible.module_utils.basic import AnsibleModule

def get_facts(module):
    pass

def main():
    pass
```"
-------------------------------------------------------------------------
"storage.monitor role, which will allow only read-only access.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"""""""Determine whether or not we're using the embedded or proxy implementation of Web Services""""""
"
-------------------------------------------------------------------------
"""""""Determine if the embedded implementation of Web Services is being used"""""""
-------------------------------------------------------------------------
"""""""Determine whether or not we're using the embedded or proxy implementation of Web Services""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"description: ID of snapshot image
"
-------------------------------------------------------------------------
"RETURN = """"""
         returned: always
         sample: ""Created snapshot image""
     image_id:
         description: ID of snapshot image
         type: str
         returned: state == created
         sample: ""3400000060080E5000299B640063074057BC5C5E ""
"""""""
-------------------------------------------------------------------------
"description: ID of snapshot image
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"module.exit_json(changed=changed, msg=""Storage system was not presented."")
"
-------------------------------------------------------------------------
"```python
module.exit_json(changed=changed, msg=""Storage system removed."")
```"
-------------------------------------------------------------------------
"module.exit_json(changed=changed, msg=""Storage system was not presented."")
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"""""""Maximum number of drives that a storage pool can be expanded at a given time.""""""
"
-------------------------------------------------------------------------
"```python
""""""Maximum number of drives that a storage pool can be expanded at a given time.""""""
```"
-------------------------------------------------------------------------
"""""""Maximum number of drives that a storage pool can be expanded at a given time.""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"based on the configured set of arguments.
"
-------------------------------------------------------------------------
"```python
""ansible.module_utils.six"",
""__future__"",
""collections"",
""ansible.module_utils.basic"",
```"
-------------------------------------------------------------------------
"based on the configured set of arguments.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"# SNMP
"
-------------------------------------------------------------------------
"```python
# SNMP
config_facts['snmp'] = array.list_snmp_managers()
config_facts['snmp_v3_engine_id'] = array.get_snmp_engine_id()['engine_id']
```"
-------------------------------------------------------------------------
"# SNMP
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"based on the configured set of arguments.
"
-------------------------------------------------------------------------
"```python
# Purity//FB operating system. By default, the module will collect basic
# fact information including hosts, host groups, protection
# groups and volume counts. Additional fact information can be collected
# Backport of 62333: fix typos in storage modules

from ansible.module_utils.six import iteritems
from __future__ import print_function
import collections
from ansible.module_utils.basic import AnsibleModule


class ZFSFacts:
    
    def __init__(self):
        self.module = AnsibleModule(argument_spec={}, supports_check_mode=False)
        self.facts = {}
    
    def get_facts(self):
        cmd = []
        # Logic to retrieve ZFS facts
        self.module.exit_json(changed=False, ansible_facts=self.facts)

    def main(self):
        self.get_facts()


zfs_facts = ZFSFacts()
zfs_facts.main()
```"
-------------------------------------------------------------------------
"based on the configured set of arguments.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg='Failed to get existing email list')
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg='Failed to get existing email list', rc=1)
```"
-------------------------------------------------------------------------
"module.fail_json(msg='Failed to get existing email list')
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"""""""Change array name""""""
"
-------------------------------------------------------------------------
"```python
def update_array_name(module, array):
    changed = False

    try:
```"
-------------------------------------------------------------------------
"""""""Change array name""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Domain suffix to be appended when performing DNS lookups.
"
-------------------------------------------------------------------------
"```python
options:
  description:
    - Domain suffix to be appended when performing DNS lookups.
    - choices: [ absent, present ]
  domain:
    description: Domain suffix to be appended when performing DNS lookups.
    type: str
nameservers:
  description:
    - Domain suffix to be appended when performing DNS lookups.
```"
-------------------------------------------------------------------------
"- Domain suffix to be appended when performing DNS lookups.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- name: Delete existing DNS settings
"
-------------------------------------------------------------------------
- name: Deleting existing DNS settings
-------------------------------------------------------------------------
"- name: Delete existing DNS settings
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg='Delete DNS settings failed')
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg='Delete DNS settings failed')
```"
-------------------------------------------------------------------------
"module.fail_json(msg='Delete DNS settings failed')
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"an existing configuration and then recreate with new settings.
"
-------------------------------------------------------------------------
"At this time, it is not possible to modify an existing directory service configuration. You must first delete the existing configuration and then recreate it with the new settings."
-------------------------------------------------------------------------
"an existing configuration and then recreate with new settings.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- name: Delete existing array_admin directory service role
"
-------------------------------------------------------------------------
- name: Delete existing array_admin directory service role
-------------------------------------------------------------------------
"- name: Delete existing array_admin directory service role
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Create, delete or modify hostgroups on Pure Storage FlashArrays.
"
-------------------------------------------------------------------------
"```python
Current context: module: purefa_hg
version_added: '2.4'
short_description: Create, delete or modify hostgroups on Pure Storage FlashArrays
description:
author:
- Pure Storage ansible Team (@sdodsley) <pure-ansible-team@purestorage.com>
options:
  required:
    - ansible.module_utils.six
    - __future__
    - collections
    - ansible.module_utils.basic

Original metadata: Backport of 62333: fix typos in storage modules
--(cherry picked from commit f44bfccb56537ecb53bfb4ff31b5be88e9fda8bd)

##### SUMMARY
Backport of #62333: fix typos in storage modules

##### ISSUE TYPE
- Docs Pull Request
```"
-------------------------------------------------------------------------
"- Create, delete or modify hostgroups on Pure Storage FlashArrays.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"based on the configured set of arguments.
"
-------------------------------------------------------------------------
"```python
#!/usr/bin/python3

# Author: Pure Storage ansible Team (@sdodsley) <pure-ansible-team@purestorage.com>

from ansible.module_utils import six
from __future__ import print_function
from collections import defaultdict
from ansible.module_utils import basic

def get_facts():
    pass

def main():
    pass

def dataset_exists():
    pass
```"
-------------------------------------------------------------------------
"based on the configured set of arguments.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"# SNMP
"
-------------------------------------------------------------------------
"```python
# SNMP
from ansible.module_utils.six import XYZ
from __future__ import ABC
import collections

def generate_config_dict(array):
    config_info['dns'] = array.get_dns()
    config_info['smtp'] = array.list_alert_recipients()
    config_info['snmp'] = array.list_snmp_managers()
    config_info['snmp_v3_engine_id'] = array.get_snmp_engine_id()['engine_id']
```"
-------------------------------------------------------------------------
"# SNMP
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- name: Delete existing NTP server entries
"
-------------------------------------------------------------------------
- name: Delete existing NTP server entries
-------------------------------------------------------------------------
"- name: Delete existing NTP server entries
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Additional mount options for the NFS share
"
-------------------------------------------------------------------------
"```python
def additional_mount_options(type):
    options = """"""
    - Supported mount options include I(port), I(rsize),
      I(wsize), I(nfsvers), and I(tcp) or I(udp)
    """"""
    # Additional mount options for the NFS share
    if type == ""nfs"":
        options += """"""
            I(intr), I(noac), I(sync), I(async), I(noatime),
            I(rdirplus), I(anonuid), and I(anongid).
        """"""
    return options
```"
-------------------------------------------------------------------------
"- Additional mount options for the NFS share
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"# First check if the offload network interface is there and enabled
"
-------------------------------------------------------------------------
"```python
def get_target(module, array):
    def create_offload(module, array):
        """"""Create offload target""""""
        changed = False
        try:
            if not array.get_network_interface('@offload.data')['enabled']:
                module.fail_json(msg='Offload Network interface not enabled. Please resolve.')
```"
-------------------------------------------------------------------------
"# First check if the offload network interface is there and enabled
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Maximum number of targets per Protection Group is 4, assuming your
  configuration supports this.
"
-------------------------------------------------------------------------
"```yaml
options:
  - Maximum number of targets per Protection Group is 4, assuming your configuration supports this.
```
"
-------------------------------------------------------------------------
"- Maximum number of targets per Protection Group is 4, assuming your
  configuration supports this.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"description: Whether to initiate a snapshot of the protection group immediately
"
-------------------------------------------------------------------------
description: Whether to initiate a snapshot of the protection group immediately
-------------------------------------------------------------------------
"description: Whether to initiate a snapshot of the protection group immediately
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Enable or Disable Phonehome for a Pure Storage FlashArray.
"
-------------------------------------------------------------------------
"```yaml
module: purefa_phonehome
version_added: '2.9'
short_description: Enable or Disable Phonehome for Pure Storage FlashArray
description:
author:
- Pure Storage Ansible Team (@sdodsley) <pure-ansible-team@purestorage.com>
```"
-------------------------------------------------------------------------
"- Enable or Disable Phonehome for a Pure Storage FlashArray.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Enable or Disable Remote Assist for a Pure Storage FlashArray.
"
-------------------------------------------------------------------------
"```yaml
- name: Enable or Disable Remote Assist for a Pure Storage FlashArray
  purefa_ra:
    state: present
```"
-------------------------------------------------------------------------
"- Enable or Disable Remote Assist for a Pure Storage FlashArray.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"no way to see if the password is different from the current SMTP configuration.
"
-------------------------------------------------------------------------
"```python
# Configure FlashArray SMTP settings
# Set or erase configuration for the SMTP settings.
# If username/password are set this will always force a change as there is
# no way to see if the password is different from the current SMTP configuration.
# Pure Storage Ansible Team (@sdodsley) <pure-ansible-team@purestorage.com>

from ansible.module_utils.basic import AnsibleModule


def main():
    module = AnsibleModule(
        argument_spec=dict(
            state=dict(type='str', required=True)
        )
    )

    # Your implementation logic goes here

    module.exit_json(changed=True)


if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"no way to see if the password is different from the current SMTP configuration.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- name: Delete existing SMTP settings
"
-------------------------------------------------------------------------
"```yaml
- name: Delete existing SMTP settings
```"
-------------------------------------------------------------------------
"- name: Delete existing SMTP settings
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg='Delete SMTP settings failed')
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg='Delete SMTP settings failed')
```"
-------------------------------------------------------------------------
"module.fail_json(msg='Delete SMTP settings failed')
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- name: Delete existing SNMP manager
"
-------------------------------------------------------------------------
- name: Delete existing SNMP manager
-------------------------------------------------------------------------
"- name: Delete existing SNMP manager
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- name: Delete existing syslog server entries
"
-------------------------------------------------------------------------
"```yaml
- name: Delete existing syslog server entries
```"
-------------------------------------------------------------------------
"- name: Delete existing syslog server entries
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Create, modify or delete local users on a Pure Storage FlashArray.
"
-------------------------------------------------------------------------
"```yaml
---
module: purefa_user
version_added: '2.8'
short_description: Create, modify or delete local users on a Pure Storage FlashArray
description:
author:
- Pure Storage Ansible Team (@sdodsley) <pure-ansible-team@purestorage.com>
options:
```"
-------------------------------------------------------------------------
"- Create, modify or delete local users on a Pure Storage FlashArray.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- name: Create new volume group
"
-------------------------------------------------------------------------
- name: Create new volume group
-------------------------------------------------------------------------
"- name: Create new volume group
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- name: Recover deleted volume group
"
-------------------------------------------------------------------------
- name: Recover deleted volume group
-------------------------------------------------------------------------
"- name: Recover deleted volume group
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Define whether to overwrite a target volume if it already exists.
"
-------------------------------------------------------------------------
"```python
Current context: options:
  default: 'no'
overwrite:
  description: ""Define whether to overwrite a target volume if it already exists.""
  type: bool
  default: 'no'
size:
Required dependency: ansible.module_utils.six, __future__, collections, ansible.module_utils.basic
```"
-------------------------------------------------------------------------
"- Define whether to overwrite a target volume if it already exists.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"an existing configuration and then recreate with new settings.
"
-------------------------------------------------------------------------
"Currently, there is a description stating that to modify an existing directory service configuration, you must first delete the existing configuration and then recreate it with new settings."
-------------------------------------------------------------------------
"an existing configuration and then recreate with new settings.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"based on the configured set of arguments.
"
-------------------------------------------------------------------------
"```python
# Necessary dependencies
from ansible.module_utils import six
from __future__ import absolute_import
import collections
from ansible.module_utils import basic

# Original metadata
__metaclass__ = __future__.print_function
from collections import defaultdict
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.six import iteritems
from __future__ import division

# Function definitions
def __init__():
    pass

def get_facts():
    pass

def main():
    pass

def dataset_exists():
    pass

# Function calls
ZFSFacts()
dict()
iteritems()
defaultdict()
int()
AnsibleModule()
main()

# Class definitions
class ZFSFacts:
    pass

# Method calls within class
self.type()
line.split()
self._datasets()
self.parsable()
out.splitlines()
self.name()
self.properties()
zfs_facts.parsable()
self.recurse()
self.module()
cmd.append()
module.exit_json()
zfs_facts.dataset_exists()
self.facts()
zfs_facts.recurse()
module.fail_json()
zfs_facts.get_facts()
v.update()
module.params()
self.depth()
zfs_facts.name()
```"
-------------------------------------------------------------------------
"based on the configured set of arguments.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Enable or Disable Remote Assist for a Pure Storage FlashBlade.
"
-------------------------------------------------------------------------
"```python
# Enable or Disable Remote Assist for a Pure Storage FlashBlade
```"
-------------------------------------------------------------------------
"- Enable or Disable Remote Assist for a Pure Storage FlashBlade.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Create or delete object store accounts on a Pure Storage FlashBlade.
"
-------------------------------------------------------------------------
"```yaml
- name: Create or delete FlashBlade Object Store accounts
  purefb_s3acc:
    state: present
  version_added: '2.8'
```"
-------------------------------------------------------------------------
"- Create or delete object store accounts on a Pure Storage FlashBlade.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- name: Create object store account foo
"
-------------------------------------------------------------------------
"```yaml
purefb_s3acc:
  name: Create object store account foo
```"
-------------------------------------------------------------------------
"- name: Create object store account foo
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Create or delete object store account users on a Pure Storage FlashBlade.
"
-------------------------------------------------------------------------
"### SUMMARY
Backport of #62333: fix typos in storage modules.

### ISSUE TYPE
Docs Pull Request

### FUNCTIONAL SET
Create or delete object store account users on a Pure Storage FlashBlade."
-------------------------------------------------------------------------
"- Create or delete object store account users on a Pure Storage FlashBlade.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- name: Create object store user (with access ID and key) foo in account bar
"
-------------------------------------------------------------------------
"extends_documentation_fragment:
 '''
 
 EXAMPLES = r'''
   purefb_s3user:
     name: Create object store user (with access ID and key) foo in account bar
Required dependency: ansible.module_utils.six, __future__, collections, ansible.module_utils.basic, 
Original metadata: Backport of 62333: fix typos in storage modules
--(cherry picked from commit f44bfccb56537ecb53bfb4ff31b5be88e9fda8bd)##### SUMMARYBackport of #62333: fix typos in storage modules##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Docs Pull Request
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: __future__.print_function, __future__.absolute_import, collections.defaultdict, ansible.module_utils.basic.AnsibleModule, ansible.module_utils.s..ix.iteritems, __future__.division
Function name information from Stable: __init__, get_facts, main, dataset_exists
Function call information from Stable: ZFSFacts, dict, iteritems, defaultdict, int, AnsibleModule, main
Class name information from Stable: ZFSFacts
Class method call information from Stable: self.type, line.split, self._datasets, self.parsable, out.splitlines, self.name, self.properties, zfs_facts.parsable, self.recurse, self.module, cmd.append, module.exit_json, zfs_facts.dataset_exists, self.facts, zfs_facts.recurse, module.fail_json, zfs_facts.get_facts, v.update, module.params, self.depth, zfs_facts.name
Target file: ZFSFacts, always, division, __metaclass__, preview, discard, mlslabel, zfs_facts, run_command, COPYING, python, comma, module_utils, debug, consumes, for, vscan, fail_json, yes, False, off, casesensitivity, License, compression, man, str, home, is, split, copies, page, logbias, no, name, checksum, DOCUMENTATION, dataset, be, all, ansible_zfs_dat...
'''"
-------------------------------------------------------------------------
"- name: Create object store user (with access ID and key) foo in account bar
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"- Specifies recursion depth.
"
-------------------------------------------------------------------------
"```python
class ZFSFacts:
    def __init__(self):
        self.depth = None
```"
-------------------------------------------------------------------------
"- Specifies recursion depth.
"
-------------------------------------------------------------------------
"Recom
PRs: 62333, 62383"
-------------------------------------------------------------------------
=========================================================================
"WRAPPED_LINE_RE = re.compile(r'^\s(?!\d)')
"
-------------------------------------------------------------------------
"```python
import re

WRAPPED_LINE_RE = re.compile(r'^\s(?!\d)')
```"
-------------------------------------------------------------------------
"WRAPPED_LINE_RE = re.compile(r'^\s(?!\d)')
"
-------------------------------------------------------------------------
"Recom
PRs: 61376, 62346"
-------------------------------------------------------------------------
=========================================================================
"elif not re.match(self.WRAPPED_LINE_RE, line):
    preprocessed.append(line)
"
-------------------------------------------------------------------------
"from __future__ import absolute_import, division, print_function

class Interfaces(FactsBase):
    for line in data.split('\n'):
        if len(line) == 0 or line[:5] == 'Flags':
            continue
        elif not re.match(self.WRAPPED_LINE_RE, line):
            preprocessed[-1] += line
    return preprocessed"
-------------------------------------------------------------------------
"elif not re.match(self.WRAPPED_LINE_RE, line):
    preprocessed.append(line)
"
-------------------------------------------------------------------------
"Recom
PRs: 61376, 62346"
-------------------------------------------------------------------------
=========================================================================
"self.assertIn(
    result['ansible_facts']['ansible_net_all_ipv4_addresses'][0], ['10.37.129.3', '10.37.0.0']
"
-------------------------------------------------------------------------
"self.assertIn(
    result['ansible_facts']['ansible_net_all_ipv4_addresses'][0], ['10.37.129.3', '10.37.0.0']
"
-------------------------------------------------------------------------
"self.assertIn(
    result['ansible_facts']['ansible_net_all_ipv4_addresses'][0], ['10.37.129.3', '10.37.0.0']
"
-------------------------------------------------------------------------
"Recom
PRs: 61376, 62346"
-------------------------------------------------------------------------
=========================================================================
"len(result['ansible_facts']['ansible_net_interfaces'].keys()), 11
"
-------------------------------------------------------------------------
"```python
self.assertEqual(
    len(result['ansible_facts']['ansible_net_interfaces'].keys()), 11
)
```"
-------------------------------------------------------------------------
"len(result['ansible_facts']['ansible_net_interfaces'].keys()), 11
"
-------------------------------------------------------------------------
"Recom
PRs: 61376, 62346"
-------------------------------------------------------------------------
=========================================================================
"# Update Batch Job Queue configuration
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver as XenServer
import re
from XenAPI import XenAPI
import ansible.module_utils.basic as basic

def manage_state(module, aws):
    if state == 'present':
        if current_state == 'present':
            updates = False
            job_kwargs = {'jobQueue': job_queue_name}

            # Update configuration if needed
```"
-------------------------------------------------------------------------
"# Update Batch Job Queue configuration
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: Returns the dictionary describing the code project configuration.
"
-------------------------------------------------------------------------
"```python
RETURN = '''
project:
  returned: success
  type: complex
  contains:
    description:
      type: string
      description: Returns the dictionary describing the code project configuration.
'''
```"
-------------------------------------------------------------------------
"description: Returns the dictionary describing the code project configuration.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"sample: My nice little project
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver
import re
from XenAPI import XenAPI
from ansible.module_utils.basic import *
```"
-------------------------------------------------------------------------
"sample: My nice little project
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Check if project with that name already exists and if so update existing:
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.basic as basic
import re
from ansible.module_utils.xenserver import XenAPI

def create_or_update_project(client, params, module):
    formatted_create_params = dict((k, v) for k, v in formatted_params.items() if k in permitted_create_params)
    formatted_update_params = dict((k, v) for k, v in formatted_params.items() if k in permitted_update_params)

    found = describe_project(client=client, name=name, module=module)
    changed = False
```"
-------------------------------------------------------------------------
"# Check if project with that name already exists and if so update existing:
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: Returns the dictionary describing the code pipeline configuration.
"
-------------------------------------------------------------------------
"```python
RETURN = '''
pipeline:
  returned: success
  type: complex
  contains:
    description:
      type: string
      description: Returns the dictionary describing the code pipeline configuration.
'''
```"
-------------------------------------------------------------------------
"description: Returns the dictionary describing the code pipeline configuration.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- The number of connections with which to initialize the link aggregation group.
"
-------------------------------------------------------------------------
"from ansible.module_utils.xenserver import XenAPI
from ansible.module_utils.basic import AnsibleModule
import re
from __future__ import absolute_import

def main():
    module = AnsibleModule(
        argument_spec=dict(
            options=dict(type='str', required=True),
            num_connections=dict(type='int', required=False),
            min_links=dict(type='int', required=False)
        )
    )

    num_connections = module.params['num_connections']
    options = module.params['options']
    min_links = module.params['min_links']

    # Further code implementation goes here

if __name__ == '__main__':
    main()"
-------------------------------------------------------------------------
"- The number of connections with which to initialize the link aggregation group.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# determine the associated connections and virtual interfaces to disassociate
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import

import ansible.module_utils.xenserver as XenServer
import re
from ansible.module_utils.basic import *

latest_status = lag_status(client, lag_id)

virtual_interfaces, connections = get_connections_and_virtual_interfaces(client, lag_id)

# If min_links is not 0, there are associated connections, or if there are virtual interfaces, ask for force_delete
```"
-------------------------------------------------------------------------
"# determine the associated connections and virtual interfaces to disassociate
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- The ID of the link aggregation group or connection to associate with the virtual interface.
"
-------------------------------------------------------------------------
The ID of the link aggregation group or connection to associate with the virtual interface.
-------------------------------------------------------------------------
"- The ID of the link aggregation group or connection to associate with the virtual interface.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"check parameters and ensure request module is installed
"
-------------------------------------------------------------------------
"```python
import ansible.module_utils.netapp_utils

class AwsCvsNetappFileSystem(object):
    def __init__(self):
        self.argument_spec = ansible.module_utils.netapp_utils.aws_cvs_host_argument_spec()
        self.argument_spec.update(dict(
            ...
        ))

    def check_parameters(self):
        try:
            from ansible.module_utils import xenserver
            from ansible.module_utils import basic
            import re
            import XenAPI
            import ansible.module_utils.request
            ...
        except ImportError:
            return False

        return True
```"
-------------------------------------------------------------------------
"check parameters and ensure request module is installed
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"check parameters and ensure request module is installed
"
-------------------------------------------------------------------------
"```python
import importlib.util

def check_parameters_and_modules_installed():
    try:
        import __future__
        from ansible.module_utils.xenserver import XenAPI
        import re
        from ansible.module_utils import basic
        
        spec = importlib.util.find_spec('ansible.modules.http')
        if spec is None:
            print(""Request module not installed"")
        else:
            print(""Request module is installed"")
    
    except ImportError as e:
        print(f""Error: {e}"")

check_parameters_and_modules_installed()
```"
-------------------------------------------------------------------------
"check parameters and ensure request module is installed
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Return snapshot Id  If Snapshot is found, None otherwise
"
-------------------------------------------------------------------------
"```python
# Return snapshot Id If Snapshot is found, None otherwise
```"
-------------------------------------------------------------------------
"# Return snapshot Id  If Snapshot is found, None otherwise
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# If cd_action is create and from_name is given
"
-------------------------------------------------------------------------
"```python
if cd_action == ""create"" and 'from_name' in self.data:
```"
-------------------------------------------------------------------------
"# If cd_action is create and from_name is given
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: A properly formatted JSON sending authorization policy. Required when I(state=present).
"
-------------------------------------------------------------------------
"```yaml
options:
  description: A properly formatted JSON sending authorization policy. Required when I(state=present).
  required: true
policy:
```  "
-------------------------------------------------------------------------
"description: A properly formatted JSON sending authorization policy. Required when I(state=present).
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Priorities must be unique, but not necessarily consecutive. Lower numbered priorities are evaluated first.
"
-------------------------------------------------------------------------
"```python
options:
  description:
    - A list of rules that the Web ACL will enforce.
    - Each rule must contain I(name), I(action), I(priority) keys.
    - The I(type) key can be passed as C(rate_based), it defaults to C(regular) and
    - Priorities must be unique, but not necessarily consecutive. Lower numbered priorities are evaluated first.
```"
-------------------------------------------------------------------------
"- Priorities must be unique, but not necessarily consecutive. Lower numbered priorities are evaluated first.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Specify capabilities that stack template contains.
"
-------------------------------------------------------------------------
"Add the required dependency imports and update the function definition as follows:

```python
from __future__ import absolute_import
from ansible.module_utils.xenserver import XenServerAPI
import re
from XenAPI import Failure
from ansible.module_utils.basic import AnsibleModule

def specify_capabilities(module):
    # Your code logic here
    pass
```"
-------------------------------------------------------------------------
"- Specify capabilities that stack template contains.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- The id of the cloudfront distribution to invalidate paths for. Can be specified instead of the alias.
"
-------------------------------------------------------------------------
"```yaml
extends_documentation_fragment:
  options:
    distribution_id:
      description: The id of the CloudFront distribution to invalidate paths for. Can be specified instead of the alias.
      required: false
    alias:
      description: 
```"
-------------------------------------------------------------------------
"- The id of the cloudfront distribution to invalidate paths for. Can be specified instead of the alias.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: the canonical user id of the user who created the oai
"
-------------------------------------------------------------------------
"```python
cloud_front_origin_access_identity_canonical_user_id:
  returned: always
  type: str
```"
-------------------------------------------------------------------------
"description: the canonical user id of the user who created the oai
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"""""""Converts camel case to snake case""""""
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
from ansible.module_utils.xenserver import camel_dict_to_snake_dict
import re
from XenAPI import XenAPI
from ansible.module_utils.basic import AnsibleModule

class CloudWatchEventRule(object):
    return targets_request

    def _snakify(self, dict):
        return camel_dict_to_snake_dict(dict)
```"
-------------------------------------------------------------------------
"""""""Converts camel case to snake case""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
""""""" Returns boolean based on the existence of the endpoint
"
-------------------------------------------------------------------------
"```python
def get_endpoint_deleted_waiter(client):
    """"""
    Returns boolean based on the existence of the endpoint
    """"""
```"
-------------------------------------------------------------------------
""""""" Returns boolean based on the existence of the endpoint
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
""""""" Returns boolean based on the existence of the endpoint
"
-------------------------------------------------------------------------
"```python
def replication_subnet_exists(subnet):
    """"""
    Check if the replication subnet exists
    :param subnet: the subnet to be checked
    :return: boolean indicating the existence of the subnet
    """"""
```"
-------------------------------------------------------------------------
""""""" Returns boolean based on the existence of the endpoint
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# need to sanitize values that get returned from the API
"
-------------------------------------------------------------------------
"```python
def compare_params(module, param_described):
     """"""
     modparams = create_module_params(module)
     changed = False
     if 'VpcId' in param_described.keys():
         param_described.pop('VpcId')
     if 'SubnetGroupStatus' in param_described.keys():
         param_described.pop('SubnetGroupStatus')  # need to sanitize values that get returned from the API
```"
-------------------------------------------------------------------------
"# need to sanitize values that get returned from the API
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# old instances are those that have the old launch template or version of the same launch template
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import re
from ansible.module_utils.xenserver import XenAPI
from ansible.module_utils.basic import AnsibleModule

def get_instances_by_launch_config(props, lc_check, initial_instances):
    new_instances = []
    old_instances = []
    if lc_check:
        for i in props['instances']:
            # Check if migrating from launch_config_name to launch_template_name first
            pass
```"
-------------------------------------------------------------------------
"# old instances are those that have the old launch template or version of the same launch template
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- When reuse_existing_ip_allowed is true, supplement with this option to only reuse
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import

import re
from ansible.module_utils.xenserver import XenAPI
from ansible.module_utils.basic import AnsibleModule

def main():
    # Your code here
    
if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"- When reuse_existing_ip_allowed is true, supplement with this option to only reuse
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# add sticky options
"
-------------------------------------------------------------------------
"# Add sticky options
__future__, ansible.module_utils.xenserver, re, XenAPI, ansible.module_utils.basic,"
-------------------------------------------------------------------------
"# add sticky options
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: Info about attached ec2 instance
"
-------------------------------------------------------------------------
"```python
network_interfaces:
  public_ip: ""52.1.0.63""
}
attachment:
  returned: always, empty dict if ENI is not attached
  type: dict
  sample: {
    description: ""Info about attached ec2 instance""
  }
```"
-------------------------------------------------------------------------
"description: Info about attached ec2 instance
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Determines whether the instance runs on single-tenant hardware or not.
"
-------------------------------------------------------------------------
"```python
# Determines whether the instance runs on single-tenant hardware or not.
```"
-------------------------------------------------------------------------
"- Determines whether the instance runs on single-tenant hardware or not.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"self._data['%s' % (new_uri)] = content  # not a stringified JSON string
"
-------------------------------------------------------------------------
self._data['%s' % new_uri] = content # not a stringified JSON string
-------------------------------------------------------------------------
"self._data['%s' % (new_uri)] = content  # not a stringified JSON string
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: List of dictionaries containing the public_ip, network_interface_id, private_ip, and allocation_id.
"
-------------------------------------------------------------------------
"```python
description: 
  type: list
  elements: dict
  contains:
    public_ip:
      type: str
      sample: ""54.123.456.789""
    network_interface_id:
      type: str
      sample: ""eni-1234567890""
    private_ip:
      type: str
      sample: ""10.0.1.22""
    allocation_id:
      type: str
      sample: ""eipalloc-0123456789""
```"
-------------------------------------------------------------------------
"description: List of dictionaries containing the public_ip, network_interface_id, private_ip, and allocation_id.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: the id of the DHCP options associated with this VPC
"
-------------------------------------------------------------------------
"```python
description: ""the id of the DHCP options associated with this VPC""
```"
-------------------------------------------------------------------------
"description: the id of the DHCP options associated with this VPC
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg='A name and type is required when no vgw-id and a status of \'absent\' is supplied')
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg='A name and type is required when no vgw-id and a status of \'absent\' is supplied')
```"
-------------------------------------------------------------------------
"module.fail_json(msg='A name and type is required when no vgw-id and a status of \'absent\' is supplied')
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- describes service discovery registries this service will register with.
        - container name for service discovery registration
        - container port for service discovery registration
"
-------------------------------------------------------------------------
"```python
options:
  version_added: 2.8
  service_registries:
    description: Describes service discovery registries this service will register with.
    required: false
    version_added: 2.8
    suboptions:
      container_name:
        description: Container name for service discovery registration
      container_port:
        description: Container port for service discovery registration
```"
-------------------------------------------------------------------------
"- describes service discovery registries this service will register with.
        - container name for service discovery registration
        - container port for service discovery registration
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# check various parameters and boto versions and give a helpful error in boto is not new enough for feature
"
-------------------------------------------------------------------------
"```python
import __future__
import ansible.module_utils.xenserver
import re
import XenAPI
import ansible.module_utils.basic

def main():
    loadBalancer['containerPort'] = int(loadBalancer['containerPort'])
 
    if update:
 
        if module.params['scheduling_strategy']:
            if not module.botocore_at_least('1.10.37'):
                raise Exception(""Boto version not new enough for this feature."")
```"
-------------------------------------------------------------------------
"# check various parameters and boto versions and give a helpful error in boto is not new enough for feature
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: details about the task that was started
"
-------------------------------------------------------------------------
"```python
task:
    description: details about the task that was started
```"
-------------------------------------------------------------------------
"description: details about the task that was started
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# The definition specifies revision. We must guarantee that an active revision of that number will result from this.
"
-------------------------------------------------------------------------
__future__ guarantee that an active revision of that number will result from this.
-------------------------------------------------------------------------
"# The definition specifies revision. We must guarantee that an active revision of that number will result from this.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=""A task in family '%s' already exists for revision %d, but it is inactive"" % (family, revision))
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=""A task in family '%s' already exists for revision %d, but it is inactive"" % (family, revision))
```"
-------------------------------------------------------------------------
"module.fail_json(msg=""A task in family '%s' already exists for revision %d, but it is inactive"" % (family, revision))
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- A boolean value that, if true, creates an encrypted file system. This can not be modified after the file
"
-------------------------------------------------------------------------
"```python
__future__, ansible.module_utils.xenserver, re, XenAPI, ansible.module_utils.basic

options:
  encrypt:
    description: A boolean value that, if true, creates an encrypted file system. This can not be modified after the file
    type: bool
    default: 'no'
```"
-------------------------------------------------------------------------
"- A boolean value that, if true, creates an encrypted file system. This can not be modified after the file
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: Contents of the Cache Parameter Group
"
-------------------------------------------------------------------------
"```python
description: Contents of the Cache Parameter Group
```"
-------------------------------------------------------------------------
"description: Contents of the Cache Parameter Group
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# add sticky options
"
-------------------------------------------------------------------------
"```python
# add sticky options
self.select_stickiness_policy()
```"
-------------------------------------------------------------------------
"# add sticky options
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: the target ID referring to this instance
"
-------------------------------------------------------------------------
"```yaml
instance_target_groups:
  type: complex
  contains:
    target_id:
      type: str
      returned: always
      sample: ""the target ID referring to this instance""
```"
-------------------------------------------------------------------------
"description: the target ID referring to this instance
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(changed=changed, msg=""All inline policies have been removed. Though it appears""
                                      ""currently supported by boto. Please detach the policies ""
"
-------------------------------------------------------------------------
"```python
module.fail_json(changed=changed, msg=""All inline policies have been removed. Though it appears""
                                      ""currently supported by boto. Please detach the policies"")
```"
-------------------------------------------------------------------------
"module.fail_json(changed=changed, msg=""All inline policies have been removed. Though it appears""
                                      ""currently supported by boto. Please detach the policies ""
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(changed=changed, msg=""All inline policies have been removed. Though it appears""
                                      ""currently supported by boto. Please detach the policies ""
"
-------------------------------------------------------------------------
"module.fail_json(changed=changed, msg=""All inline policies have been removed. Though it appears ""
                                      ""currently supported by boto. Please detach the policies "")"
-------------------------------------------------------------------------
"module.fail_json(changed=changed, msg=""All inline policies have been removed. Though it appears""
                                      ""currently supported by boto. Please detach the policies ""
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(changed=changed, msg=""All inline policies have been removed. Though it appears""
                                      ""currently supported by boto. Please detach the policies ""
"
-------------------------------------------------------------------------
"module.fail_json(changed=changed, msg=""All inline policies have been removed. Though it appears""
                                       "" currently supported by boto. Please detach the policies."")"
-------------------------------------------------------------------------
"module.fail_json(changed=changed, msg=""All inline policies have been removed. Though it appears""
                                      ""currently supported by boto. Please detach the policies ""
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: availability zone
"
-------------------------------------------------------------------------
"```python
# Module requirements
from __future__ import division, print_function

# Additional dependencies
import ansible.module_utils.xenserver
import re
import XenAPI
from ansible.module_utils.basic import AnsibleModule
```"
-------------------------------------------------------------------------
"description: availability zone
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: Percent progress of snapshot
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver as xen_api
import re
from ansible.module_utils.basic import AnsibleModule

def main():
    module = AnsibleModule(argument_spec=dict(
        snapshots=dict(type='str', required=True),
        percent_progress=dict(type='int', required=False)
    ))

    # Your logic here

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"description: Percent progress of snapshot
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: Percent progress of snapshot
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import re
from ansible.module_utils.xenserver import XenAPI
from ansible.module_utils.basic import AnsibleModule

def main():
    module = AnsibleModule(
        argument_spec=dict(
            cluster_snapshots=dict(type='str', required=True),
            percent_progress=dict(type='int', required=True),
        )
    )

    cluster_snapshots = module.params.get('cluster_snapshots')
    percent_progress = module.params.get('percent_progress')

    # Your logic here

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"description: Percent progress of snapshot
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- which port the cluster is listening
"
-------------------------------------------------------------------------
"options:
  port:
    description: Which port the cluster is listening on."
-------------------------------------------------------------------------
"- which port the cluster is listening
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: Status of the cluster.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver as XenAPI
import re
from ansible.module_utils.basic import AnsibleModule

def main():
    module = AnsibleModule(argument_spec=dict())
    cluster_status = ""available""
    module.exit_json(changed=False, meta={""cluster_status"": cluster_status})

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"description: Status of the cluster.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"""""""Transform cluster information to dict.""""""
"
-------------------------------------------------------------------------
"```python
def _collect_facts(resource):
    facts = {
        'identifier': resource['ClusterIdentifier'],
        'status': resource['ClusterStatus'],
    }
```"
-------------------------------------------------------------------------
"""""""Transform cluster information to dict.""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=""Need to specify final_cluster_snapshot_identifier if skip_final_cluster_snapshot is False"")
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=""Need to specify final_cluster_snapshot_identifier if skip_final_cluster_snapshot is False"")
```"
-------------------------------------------------------------------------
"module.fail_json(msg=""Need to specify final_cluster_snapshot_identifier if skip_final_cluster_snapshot is False"")
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Directives are separated by commas.
"
-------------------------------------------------------------------------
"options:
  description: ""This is a string.""
  Cache-Control header set on uploaded objects.
  required: false
  version_added: ""2.4"""
-------------------------------------------------------------------------
"- Directives are separated by commas.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: file listing (dicts) from initial globbing
"
-------------------------------------------------------------------------
"RETURN = '''
filelist_initial:
  description: file listing (dicts) from initial globbing
  returned: always
  type: list
  sample: [{
'''.strip()"
-------------------------------------------------------------------------
"description: file listing (dicts) from initial globbing
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Subnet associated to the cluster.
"
-------------------------------------------------------------------------
"```yaml
options:
    type: bool
subnet_resource_id:
    description: Subnet associated to the cluster.
```"
-------------------------------------------------------------------------
"- Subnet associated to the cluster.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Location of the application security group.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, division, print_function
import re
from ansible.module_utils.xenserver import XenAPI
from ansible.module_utils.basic import AnsibleModule

application_security_group_location = ""/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.Network/applicationSecurityGroups/MyAsg""
```"
-------------------------------------------------------------------------
"- Location of the application security group.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- name: Create an auto scale with complicated profile
"
-------------------------------------------------------------------------
- name: Create an auto scale with complicated profile
-------------------------------------------------------------------------
"- name: Create an auto scale with complicated profile
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# If endpoint doesn't exist and no start/stop operation specified, create endpoint.
"
-------------------------------------------------------------------------
"```python
if not response:

    if self.started is None:
    
        if self.origins is None:
        
            self.fail(""Origins is not provided when trying to create endpoint"")
            
        self.log(""Need to create the Azure CDN endpoint"")
```"
-------------------------------------------------------------------------
"# If endpoint doesn't exist and no start/stop operation specified, create endpoint.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- A directory path on the origin that CDN can use to retrieve content from.
"
-------------------------------------------------------------------------
A directory path on the origin that CDN can use to retrieve content from.
-------------------------------------------------------------------------
"- A directory path on the origin that CDN can use to retrieve content from.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Tags assigned to the resource. Dictionary of string:string pairs.
"
-------------------------------------------------------------------------
"'''
Required dependency: __future__, ansible.module_utils.xenserver, re, XenAPI, ansible.module_utils.basic, 
Current context: credentials:
             sample: pass2value
tags:
  description:
    returned: always
    type: dict
'''"
-------------------------------------------------------------------------
"- Tags assigned to the resource. Dictionary of string:string pairs.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# This currently doesn't work as there is a bug in SDK / Service
"
-------------------------------------------------------------------------
"```python
# This currently doesn't work due to a bug in the SDK/Service
```"
-------------------------------------------------------------------------
"# This currently doesn't work as there is a bug in SDK / Service
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"sample: ""/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.Resources/deployments/myDeployment""
"
-------------------------------------------------------------------------
"```python
deployment:
  description: The Azure ID of the deployment.
  type: str
  returned: always
  sample: ""/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.Resources/deployments/myDeployment""
```"
-------------------------------------------------------------------------
"sample: ""/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.Resources/deployments/myDeployment""
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"sample: ""/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.Resources/deployments/myDeployment""
"
-------------------------------------------------------------------------
"```python
sample: ""/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.Resources/deployments/myDeployment""
```"
-------------------------------------------------------------------------
"sample: ""/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup/providers/Microsoft.Resources/deployments/myDeployment""
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# This currently doesn't work as there is a bug in SDK / Service
"
-------------------------------------------------------------------------
# This currently doesn't work due to a bug in the SDK/Service.
-------------------------------------------------------------------------
"# This currently doesn't work as there is a bug in SDK / Service
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# This currently doesn't work as there is a bug in SDK / Service
"
-------------------------------------------------------------------------
# This currently doesn't work as there is a bug in SDK / Service
-------------------------------------------------------------------------
"# This currently doesn't work as there is a bug in SDK / Service
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# This currently doesn't work as there is a bug in SDK / Service
"
-------------------------------------------------------------------------
"```python
# This currently doesn't work as there is a bug in SDK / Service
```"
-------------------------------------------------------------------------
"# This currently doesn't work as there is a bug in SDK / Service
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Disallowed parameter values.
"
-------------------------------------------------------------------------
"Add the __future__ dependency and adjust the code snippet to include the disallowed parameter values as shown below:

```python
from __future__ import absolute_import, division, print_function

options:
  type: int
  disallowed:
    description:
    type: dict
    suboptions:
      disk_types:
```"
-------------------------------------------------------------------------
"- Disallowed parameter values.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- The connection string should have send privilege.
"
-------------------------------------------------------------------------
The connection string should have send privilege.
-------------------------------------------------------------------------
"- The connection string should have send privilege.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
":return: deserialized keys, includes key identifier, attributes and tags.
"
-------------------------------------------------------------------------
"```python
:return: deserialized keys, includes key identifier, attributes and tags.
```"
-------------------------------------------------------------------------
":return: deserialized keys, includes key identifier, attributes and tags.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
":return: deserialized keys, includes key identifier, attributes and tags.
"
-------------------------------------------------------------------------
"```python
:return: deserialized keys, includes key identifier, attributes and tags.
```"
-------------------------------------------------------------------------
":return: deserialized keys, includes key identifier, attributes and tags.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Mutually exclusive with I(resource_group).
"
-------------------------------------------------------------------------
"```python
''' Adapted code snippet based on the provided information '''

from __future__ import absolute_import
import re
import XenAPI
from ansible.module_utils.basic import *
```"
-------------------------------------------------------------------------
"- Mutually exclusive with I(resource_group).
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Cannot be set mutual with I(resource_group).
"
-------------------------------------------------------------------------
"Add the provided information as a new description in the options section:

```python
        options:
          description:
            - ID of the resource where need to manage the lock.
            - Get this via facts module.
            - Manage subscription if both I(managed_resource_id) and I(resource_group) not defined.
            - Cannot be set mutual with I(resource_group).
            - ""'/subscriptions/{subscriptionId}' for subscriptions.""
            - ""'/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups.""
```"
-------------------------------------------------------------------------
"- Cannot be set mutual with I(resource_group).
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Cannot be set mutual with I(managed_resource_id).
"
-------------------------------------------------------------------------
"    description:
      - Resource group name where need to manage the lock.
      - The lock is in the resource group level.
      - Query subscription if both I(managed_resource_id) and I(resource_group) not defined.
      - Can get all locks with 'child scope' in this resource group, use the I(managed_resource_id) in response for further management.
      - Cannot be set mutual with I(managed_resource_id).
    type: str"
-------------------------------------------------------------------------
"- Cannot be set mutual with I(managed_resource_id).
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- This may only be set to False when no extensions are present on the virtual machine.
"
-------------------------------------------------------------------------
"```python
    - This may only be set to False when no extensions are present on the virtual machine.
```"
-------------------------------------------------------------------------
"- This may only be set to False when no extensions are present on the virtual machine.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Specifies the host require guest provision signal or not.
"
-------------------------------------------------------------------------
"```python
# Specifies if the host requires guest provision signal or not.
```"
-------------------------------------------------------------------------
"- Specifies the host require guest provision signal or not.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Specifies the Linux operating system settings on the virtual machine.
"
-------------------------------------------------------------------------
"```python
response = {
    ""linuxConfiguration"": {
        ""description"": ""Specifies the Linux operating system settings on the virtual machine."",
        ""type"": ""dict"",
        ""returned"": ""when OS type is Linux"",
        ""sample"": {}
    }
}
```"
-------------------------------------------------------------------------
"- Specifies the Linux operating system settings on the virtual machine.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure laaS VMs SMBIOS.
- Specifies the storage account type for the managed disk.
"
-------------------------------------------------------------------------
"```yaml
response:
  vmID:
    description: 
      - It can be read using platform BIOS commands.
    type: str
    returned: always
    sample: ""eb86d9bb-6725-4787-a487-2e497d5b340c""
  storageProfile:
    description:
      - Specifies the storage account type for the managed disk.
    type: complex
    returned: always
    contains:
```"
-------------------------------------------------------------------------
"- Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure laaS VMs SMBIOS.
- Specifies the storage account type for the managed disk.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Set of role definition permissions.
"
-------------------------------------------------------------------------
"```yaml
options:
  required: True
  permissions:
    description: ""See https://docs.microsoft.com/en-us/azure/app-service/app-service-web-overview for more info.""
    suboptions:
      actions:
        required: True
```"
-------------------------------------------------------------------------
"- Set of role definition permissions.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"self.log(""Delete role definition"")
"
-------------------------------------------------------------------------
"self.log(""Deleting role definition"")"
-------------------------------------------------------------------------
"self.log(""Delete role definition"")
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- The scope of role definition.
"
-------------------------------------------------------------------------
The scope of role definition is required.
-------------------------------------------------------------------------
"- The scope of role definition.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Name of the security group.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import re
from ansible.module_utils.xenserver import XenAPI
from ansible.module_utils.basic import AnsibleModule
```"
-------------------------------------------------------------------------
"- Name of the security group.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Message count details.
"
-------------------------------------------------------------------------
"```yaml
servicebuses:
  sample: 1
  count_details:
    description:
    returned: always
    type: complex
    contains:
```"
-------------------------------------------------------------------------
"- Message count details.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- name: Create VM with specified OS disk size
"
-------------------------------------------------------------------------
"```yaml
- name: Create VM with specified OS disk size
```"
-------------------------------------------------------------------------
"- name: Create VM with specified OS disk size
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# FUTURE: figure out a cloud_env independent way to delete these
"
-------------------------------------------------------------------------
"```python
# FUTURE: figure out a cloud_env independent way to delete these
```"
-------------------------------------------------------------------------
"# FUTURE: figure out a cloud_env independent way to delete these
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# comparing deployment source with input, determine whether it's changed
"
-------------------------------------------------------------------------
"```python
         return True
     return False
```"
-------------------------------------------------------------------------
"# comparing deployment source with input, determine whether it's changed
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Whether to install or uninstall the package. Currently it supports only ""present"" for install action.
"
-------------------------------------------------------------------------
"options:
    required: False
  state:
    description:
    required: False
    default: present
    choices: ['present', 'absent']"
-------------------------------------------------------------------------
"- Whether to install or uninstall the package. Currently it supports only ""present"" for install action.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Create or delete or update firewall policies on Centurylink Cloud
"
-------------------------------------------------------------------------
"'''
 module: clc_firewall_policy
 short_description: Create or delete or update firewall policies on Centurylink Cloud
 version_added: ""2.0""
 options:
   location:
'''"
-------------------------------------------------------------------------
"- Create or delete or update firewall policies on Centurylink Cloud
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Required when exact_count is specified.  The Server Group use to determine how many servers to deploy.
"
-------------------------------------------------------------------------
"```python
# Required when exact_count is specified. The Server Group used to determine how many servers to deploy.
```"
-------------------------------------------------------------------------
"- Required when exact_count is specified.  The Server Group use to determine how many servers to deploy.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Since version 2.8, I(uuid) and I(name) or not mutually exclusive anymore.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import re
import ansible.module_utils.xenserver
from XenAPI import XenAPI
from ansible.module_utils.basic import *
```"
-------------------------------------------------------------------------
"- Since version 2.8, I(uuid) and I(name) or not mutually exclusive anymore.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Tags associated with the volume. Set this to C({}) to clear any tags.
"
-------------------------------------------------------------------------
"tags:
  description:
  - Tags associated with the volume. Set this to C({}) to clear any tags."
-------------------------------------------------------------------------
"- Tags associated with the volume. Set this to C({}) to clear any tags.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: Tags associated with the volume.
"
-------------------------------------------------------------------------
description: Tags associated with the volume.
-------------------------------------------------------------------------
"description: Tags associated with the volume.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"""this is probably not want you have asked for."" % self._module.params.get('uuid'))
"
-------------------------------------------------------------------------
"`""This is probably not what you have asked for."" % self._module.params.get('uuid')`"
-------------------------------------------------------------------------
"""this is probably not want you have asked for."" % self._module.params.get('uuid'))
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Sets Ansible facts accessible by the key C(cloudstack_zone) and since version 2.6 also returns results.
"
-------------------------------------------------------------------------
"```python
# Sets Ansible facts accessible by the key C(cloudstack_zone) and since version 2.6 also returns results.

from __future__ import absolute_import
from __future__ import print_function
from ansible.module_utils.xenserver import XenAPI
import re
import ansible.module_utils.basic

# Your code implementation here
```"
-------------------------------------------------------------------------
"- Sets Ansible facts accessible by the key C(cloudstack_zone) and since version 2.6 also returns results.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# in check mode instance may not be instantiated
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver as XenServer
import re
from ansible.module_utils.basic import AnsibleModule

class AnsibleCloudStackInstance(AnsibleCloudStack):
    def stop_instance(self):
        instance = self.get_instance()
        if instance:
            if instance['state'].lower() in ['stopping', 'stopped']:
                return instance
```"
-------------------------------------------------------------------------
"# in check mode instance may not be instantiated
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# in check mode instance may not be instantiated
"
-------------------------------------------------------------------------
"```python
import __future__
from ansible.module_utils.xenserver import XenAPI
import re
from ansible.module_utils.basic import AnsibleModule

class AnsibleCloudStackInstance(AnsibleCloudStack):

    def start_instance(self):
        instance = self.get_instance()
        if instance:
            if instance['state'].lower() in ['starting', 'running']:
                return instance
```"
-------------------------------------------------------------------------
"# in check mode instance may not be instantiated
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# in check mode instance may not be instantiated
"
-------------------------------------------------------------------------
"```python
# In check mode, the instance may not be instantiated
```  "
-------------------------------------------------------------------------
"# in check mode instance may not be instantiated
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# in check mode instance may not be instantiated
"
-------------------------------------------------------------------------
"```python
import __future__
import ansible.module_utils.xenserver
import re
from XenAPI import XenAPI
from ansible.module_utils.basic import AnsibleModule

class AnsibleCloudStackInstance(AnsibleCloudStack):
    def restore_instance(self):
        instance = self.get_instance()
        self.result['changed'] = True
        if instance:
            args = {}
            args['templateid'] = self.get_template_or_iso(key='id')
```"
-------------------------------------------------------------------------
"# in check mode instance may not be instantiated
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- In this case, at least one of them must be unique to ensure idempotency.
"
-------------------------------------------------------------------------
"In this scenario, at least one of them must be unique to ensure idempotency."
-------------------------------------------------------------------------
"- In this case, at least one of them must be unique to ensure idempotency.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- name: Associate an IP address conditionally
"
-------------------------------------------------------------------------
"```yaml
- name: Associate an IP address conditionally
```"
-------------------------------------------------------------------------
"- name: Associate an IP address conditionally
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"state: restarted
"
-------------------------------------------------------------------------
"```yaml
state: restarted
```"
-------------------------------------------------------------------------
"state: restarted
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Whether the network offering supports specifying IP ranges.
"
-------------------------------------------------------------------------
"options:
  network_offering_supports_specifying_ip_ranges:
    description:
      - Whether the network offering supports specifying IP ranges.
    type: bool
    default: false"
-------------------------------------------------------------------------
"- Whether the network offering supports specifying IP ranges.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: The maximum number of concurrent connections to be handled by LB.
"
-------------------------------------------------------------------------
"```python
description: ""The maximum number of concurrent connections to be handled by LB.""
```"
-------------------------------------------------------------------------
"description: The maximum number of concurrent connections to be handled by LB.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# First match for key retrievement will be the fingerprint.
"
-------------------------------------------------------------------------
"from ansible.module_utils.xenserver import AnsibleCloudStackSshKey

class AnsibleCloudStackSshKey(AnsibleCloudStack):
    args['name'] = ssh_key['name']
    self.query_api('deleteSSHKeyPair', **args)
    self.ssh_key = None
    ssh_key = self.get_ssh_key()"
-------------------------------------------------------------------------
"# First match for key retrievement will be the fingerprint.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: Capabilities of the storage pool.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import re
import XenAPI
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.xenserver import XenServerObject
```"
-------------------------------------------------------------------------
"description: Capabilities of the storage pool.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Fail if the identifier matches more than one VPC
"
-------------------------------------------------------------------------
"```python
        if self.vpc:
            self.module.fail_json(msg=""More than one VPC found with the provided identifier: %s"" % vpc_name)
```"
-------------------------------------------------------------------------
"# Fail if the identifier matches more than one VPC
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Specifies the type of image information to be retrieved.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver as XenAPI
import re
from ansible.module_utils.basic import AnsibleModule

def main():
    module = AnsibleModule(
        argument_spec=dict(
            image_type=dict(type='str', required=True)
        ),
        supports_check_mode=True
    )

    # Your code logic here

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"- Specifies the type of image information to be retrieved.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Permit expansion of the target VLAN's network if the module parameters specify a larger network than the VLAN currently possesses.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver as xen_api
import re
from XenAPI import XenAPI
import ansible.module_utils.basic

def expand_vlan_network(options):
    if options.get('allow_expand', True):
        # Logic to permit expansion of target VLAN's network
        pass
    else:
        # Logic to prevent accidental expansion of a VLAN's network
        pass
```"
-------------------------------------------------------------------------
"- Permit expansion of the target VLAN's network if the module parameters specify a larger network than the VLAN currently possesses.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"network if C(networks) is specified. You need to explicitly use C(purge_networks) to enforce
"
-------------------------------------------------------------------------
"```
options:
       - For examples of the data structure and usage see EXAMPLES below.
       - To remove a container from one or more networks, use the C(purge_networks) option.
       - Note that as opposed to C(docker run ...), M(docker_container) does not remove the default
         the removal of the default network (and all other networks not explicitly mentioned in C(networks)).
     type: list
     suboptions: 
       - network if C(networks) is specified. You need to explicitly use C(purge_networks) to enforce
```"
-------------------------------------------------------------------------
"network if C(networks) is specified. You need to explicitly use C(purge_networks) to enforce
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# record to the failure output so the user can restore it if
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, division, print_function

import re
from ansible.module_utils.xenserver import XenAPI
from ansible.module_utils.basic import *

def create_record(module, gcdns, zone, record):
    except LibcloudError:
        # We deleted the old record, couldn't create the new record, and couldn't roll back. That really sucks. We'll dump the original record to the failure output so the user can restore it if needed.
        module.fail_json(
            msg='error updating record, and could not restore original record, ' 
        )
```"
-------------------------------------------------------------------------
"# record to the failure output so the user can restore it if
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
":param client: An initialized GCE Compute Discovery resource.
"
-------------------------------------------------------------------------
"def get_target_http_proxy(client, name, project_id=None):
    """"""
    Get a Target HTTP Proxy from GCP.

    :param client: An initialized GCE Compute Discovery resource.
    :param name: Name of the Target Proxy.
    """""""
-------------------------------------------------------------------------
":param client: An initialized GCE Compute Discovery resource.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
":param client: An initialized GCE Compute Discovery resource.
"
-------------------------------------------------------------------------
"def create_target_http_proxy(client, params, project_id):
    """"""
    Create a new Target_Proxy.

    :param client: An initialized GCE Compute Discovery resource.
    """"""

    # Existing code implementation here..."
-------------------------------------------------------------------------
":param client: An initialized GCE Compute Discovery resource.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
":param client: An initialized GCE Compute Discovery resource.
"
-------------------------------------------------------------------------
:param client: An initialized GCE Compute Discovery resource.
-------------------------------------------------------------------------
":param client: An initialized GCE Compute Discovery resource.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"short_description: Create, Update or Destroy a Url_Map.
- Create, Update or Destroy a Url_Map. See
"
-------------------------------------------------------------------------
"short_description: Create, Update or Destroy a Url_Map. See"
-------------------------------------------------------------------------
"short_description: Create, Update or Destroy a Url_Map.
- Create, Update or Destroy a Url_Map. See
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
":param client: An initialized GCE Compute Discovery resource.
"
-------------------------------------------------------------------------
"```python
def get_url_map(client, name, project_id=None):
    """"""
    Get a Url_Map from GCP.
 
    :param client: An initialized GCE Compute Discovery resource.
    :param name: Name of the Url Map.
```"
-------------------------------------------------------------------------
":param client: An initialized GCE Compute Discovery resource.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
":param client: An initialized GCE Compute Discovery resource.
"
-------------------------------------------------------------------------
:param client: An initialized GCE Compute Discovery resource.
-------------------------------------------------------------------------
":param client: An initialized GCE Compute Discovery resource.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
":param client: An initialized GCE Compute Discover resource.
"
-------------------------------------------------------------------------
"```python
def delete_url_map(client, name, project_id):
    """"""
    Delete a Url_Map.

    :type client: googleapiclient.discovery.Resource

    :param name: Name of the Url Map.
    :param client: An initialized GCE Compute Discover resource.
    """"""
```"
-------------------------------------------------------------------------
":param client: An initialized GCE Compute Discover resource.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
":param client: An initialized GCE Compute Discovery resource.
"
-------------------------------------------------------------------------
:param client: An initialized GCE Compute Discovery resource.
-------------------------------------------------------------------------
":param client: An initialized GCE Compute Discovery resource.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"When specifying the GCE resource, users may specify the full URL for
seen in the documentation.
"
-------------------------------------------------------------------------
"When specifying the GCE resource, users may specify the full URL as seen in the documentation."
-------------------------------------------------------------------------
"When specifying the GCE resource, users may specify the full URL for
seen in the documentation.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"Each subnet has a continuous private RFC1918 IP space. You create instances, containers,
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver as XenAPI
import re
import ansible.module_utils.basic

# Adapted code snippet based on the provided context:
# Each subnet has a continuous private RFC1918 IP space. You create instances, containers,

# Original code snippet here
```"
-------------------------------------------------------------------------
"Each subnet has a continuous private RFC1918 IP space. You create instances, containers,
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- The ID of the bucket. For buckets, the id and name properties are the same.
"
-------------------------------------------------------------------------
"The ID of the bucket. For buckets, the ID and name properties are the same."
-------------------------------------------------------------------------
"- The ID of the bucket. For buckets, the id and name properties are the same.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Remove the most granular resource.  If subscription is specified
"
-------------------------------------------------------------------------
"```python
def main():
    push_endpoint = mod_params['subscription'].get('push_endpoint', None)
    
    if mod_params['state'] == 'absent':
        # we remove it.  If only topic is specified, that is what is removed.
        # Note that a topic can be removed without first removing the subscription.
        # Remove the most granular resource.  If subscription is specified
        # TODO(supertom): Enhancement: Provide an option to only delete a topic
```"
-------------------------------------------------------------------------
"# Remove the most granular resource.  If subscription is specified
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- The label selector for the server you want to get.
"
-------------------------------------------------------------------------
The label selector for the server you want to get. 
-------------------------------------------------------------------------
"- The label selector for the server you want to get.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: The actual public key
"
-------------------------------------------------------------------------
"```python
hcloud_ssh_key_info:
    description: The actual public key
    type: str
    sample: 0e:e0:bd:c7:2d:1f:69:49:94:44:91:f1:19:fd:35:f3
    public_key:
        returned: always
        type: str
        sample: ""ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGpl/tnk74nnQJxxLAtutUApUZMRJxryKh7VXkNbd4g9 john@example.com""
```"
-------------------------------------------------------------------------
"description: The actual public key
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- ""Unless used in conjunction with I(cdi_source), this might result in a timeout, as clusters may be configured
"
-------------------------------------------------------------------------
"options:
   - ""If set, this module will wait for the PVC to become bound and CDI (if enabled) to finish its operation
     before returning.""
   - ""Used only if I(state) set to C(present).""
   - ""Unless used in conjunction with I(cdi_source), this might result in a timeout, as clusters may be configured
     to not bind PVCs until first usage.""
default: false
type: bool"
-------------------------------------------------------------------------
"- ""Unless used in conjunction with I(cdi_source), this might result in a timeout, as clusters may be configured
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# If the URL points to a tar.gz containing the disk image, uncomment the line below:
"
-------------------------------------------------------------------------
"```python
     cdi_source:
       http:
         url: https://www.source.example/path/of/data/vm.img
       content_type: archive
```"
-------------------------------------------------------------------------
"# If the URL points to a tar.gz containing the disk image, uncomment the line below:
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"state: present
"
-------------------------------------------------------------------------
"```yaml
- name: Create virtual machine replica set 'myvmir'
  kubevirt_rs:
      name: myvmir
      namespace: vms
      wait: true
      state: present
```"
-------------------------------------------------------------------------
"state: present
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- ""More information can be found at: U(https://docs.openshift.com/container-platform/3.6/dev_guide/templates.html#writing-parameters)""
"
-------------------------------------------------------------------------
"```python
""More information can be found at: U(https://docs.openshift.com/container-platform/3.6/dev_guide/templates.html#writing-parameters)""
```"
-------------------------------------------------------------------------
"- ""More information can be found at: U(https://docs.openshift.com/container-platform/3.6/dev_guide/templates.html#writing-parameters)""
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Process objects:
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver
import re
import XenAPI
import ansible.module_utils.basic

class KubeVirtVMTemplate(KubeVirtRawModule):
    if self.params.get('default_network'):
        annotations['defaults.template.cnv.io/network'] = self.params.get('default_network').get('name')

    self.client = self.get_api_client()
    definition['objects'] = []
    objects = self.params.get('objects') or []
```"
-------------------------------------------------------------------------
"# Process objects:
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Construct k8s vm API object:
"
-------------------------------------------------------------------------
"```python
# Construct k8s vm API object:
from __future__ import absolute_import
import ansible.module_utils.xenserver as XenAPI
import re
import ansible.module_utils.basic

vm_definition['apiVersion'] = '%s/%s' % (API_GROUP, MAX_SUPPORTED_API_VERSION)

vm_template = vm_definition['spec']['template']
dummy, vm_def = self.construct_vm_template_definition('VirtualMachine', vm_definition, vm_template, obj)
```"
-------------------------------------------------------------------------
"# Construct k8s vm API object:
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- If (true) ephemeral virtual machine will be created. When destroyed it won't be accessible again.
"
-------------------------------------------------------------------------
"```python
if options:
    ephemeral = True
```"
-------------------------------------------------------------------------
"- If (true) ephemeral virtual machine will be created. When destroyed it won't be accessible again.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"itself The ""container_command"" option will always execute as BASH.
"
-------------------------------------------------------------------------
"The ""container_command"" option will always execute as BASH."
-------------------------------------------------------------------------
"itself The ""container_command"" option will always execute as BASH.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# unset msg as we don't want to return unnecessary info to the user.
"
-------------------------------------------------------------------------
"```python
def delete_zone_domain(args=None, payload=None):
    if not has_failed:
        has_changed = True
        memset_api = response.json()
        msg = None

    return(has_failed, has_changed, memset_api, None)
```"
-------------------------------------------------------------------------
"# unset msg as we don't want to return unnecessary info to the user.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Name of VM to be cloned. If C(vmid) is setted, C(clone) can take arbitrary value but required for initiating the clone.
"
-------------------------------------------------------------------------
"```python
# Name of VM to be cloned. If C(vmid) is set, C(clone) can take an arbitrary value but is required for initiating the clone.
```"
-------------------------------------------------------------------------
"- Name of VM to be cloned. If C(vmid) is setted, C(clone) can take arbitrary value but required for initiating the clone.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- If C(current), the current state of the VM will be fetched. You can access it with C(results.status)
"
-------------------------------------------------------------------------
"```python
- If options['state'] == 'current', the current state of the VM will be fetched. You can access it with results.status
```"
-------------------------------------------------------------------------
"- If C(current), the current state of the VM will be fetched. You can access it with C(results.status)
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- The port on which the API is reachable.
"
-------------------------------------------------------------------------
"```yaml
options:
  default: 127.0.0.1
  port:
    description: The port on which the API is reachable.
    type: int
    default: 443
  insecure_api:
```"
-------------------------------------------------------------------------
"- The port on which the API is reachable.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"ONEANDONE_API_URL environment variable.
"
-------------------------------------------------------------------------
"options:
  api_url:
    description:
      - ONEANDONE API URL environment variable. Overrides the
    required: false"
-------------------------------------------------------------------------
"ONEANDONE_API_URL environment variable.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Url to call for checking. Required for HTTP health check. maxLength=1000
"
-------------------------------------------------------------------------
"```python
options:
  required: true
  health_check_path:
    description: ""Url to call for checking. Required for HTTP health check. maxLength=1000""
    required: true
  health_check_parse:
    description:
    required: false
```"
-------------------------------------------------------------------------
"- Url to call for checking. Required for HTTP health check. maxLength=1000
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# complete the template with specific ansible parameters
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver as XenServer
import re
from XenAPI import XenAPI
import ansible.module_utils.basic as basic

class HostModule(OpenNebulaModule):
    if desired_template_changes is None:
        desired_template_changes = dict()

    if self.is_parameter('labels'):
        desired_template_changes['LABELS'] = self.get_parameter('labels')
```"
-------------------------------------------------------------------------
"# complete the template with specific ansible parameters
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Name of service template to use to create a new instance of a service
"
-------------------------------------------------------------------------
"```python
options:
  - Password of the user to login into OpenNebula OneFlow API server. If not set then the value of the C(ONEFLOW_PASSWORD) environment variable is used.
  template_name:
    description: Name of service template to use to create a new instance of a service
  template_id:
    description:
    - ID of a service template to use to create a new instance of a service
```"
-------------------------------------------------------------------------
"- Name of service template to use to create a new instance of a service
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Instantiate a new service 'foo' if the service doesn't already exist, otherwise do nothing
"
-------------------------------------------------------------------------
Instantiate a new service 'foo' if it doesn't already exist.
-------------------------------------------------------------------------
"# Instantiate a new service 'foo' if the service doesn't already exist, otherwise do nothing
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"if template_id and state == 'present':  # Instantiate a service
"
-------------------------------------------------------------------------
"```python
def main():
    if template_id and state == 'present':  # Instantiate a service
        result = create_service_and_operation(module, auth, template_id, service_name, owner_id,
                                               group_id, permissions, custom_attrs, unique, wait, wait_timeout)
    else:
        module.fail_json(msg=""State absent is not valid for template"")
```"
-------------------------------------------------------------------------
"if template_id and state == 'present':  # Instantiate a service
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- It is a dictionary where you have to specify C(name) of the new image.
- Optionally you can specify C(disk_id) of the disk you want to save. By default C(disk_id) is 0.
"
-------------------------------------------------------------------------
"```python
options:
  disk_saveas:
    description:
      - It is a dictionary where you have to specify C(name) of the new image.
      - Optionally you can specify C(disk_id) of the disk you want to save. By default C(disk_id) is 0.
```"
-------------------------------------------------------------------------
"- It is a dictionary where you have to specify C(name) of the new image.
- Optionally you can specify C(disk_id) of the disk you want to save. By default C(disk_id) is 0.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg='`count` has to be greater than 0')
"
-------------------------------------------------------------------------
module.fail_json(msg='`count` has to be greater than 0')
-------------------------------------------------------------------------
"module.fail_json(msg='`count` has to be greater than 0')
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# check if we have floating ip on given nat_destination network
"
-------------------------------------------------------------------------
"```python
import __future__
from ansible.module_utils.xenserver import XenAPI
import re
from ansible.module_utils.basic import *
def main():
  if nat_destination:
      nat_floating_addrs = [addr for addr in server.addresses.get(cloud.get_network(nat_destination)['name'], [])]
```"
-------------------------------------------------------------------------
"# check if we have floating ip on given nat_destination network
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: Total size of local disk storage as updated in node properties.
"
-------------------------------------------------------------------------
"```python
description: Total size of local disk storage as updated in node properties.
```"
-------------------------------------------------------------------------
"description: Total size of local disk storage as updated in node properties.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# User has requested desired state to be in maintenance state.
"
-------------------------------------------------------------------------
"```python
from __future__ import print_function
import ansible.module_utils.xenserver as XenAPI
import re
import ansible.module_utils.basic as basic

def main():
    wait = module.params['wait']
    timeout = module.params['timeout']

    if module.params['state'] == 'maintenance':
        module.params['maintenance'] = True
```"
-------------------------------------------------------------------------
"# User has requested desired state to be in maintenance state.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: Network ID the load balancer virtual IP port belongs in.
description: Subnet ID the load balancer virtual IP port belongs in.
description: The load balancer virtual IP port ID.
description: The load balancer virtual IP address.
"
-------------------------------------------------------------------------
"```python
vip_network_id:
    description: Network ID the load balancer virtual IP port belongs in.
    type: str
    sample: ""f171db43-56fd-41cf-82d7-4e91d741762e""

vip_subnet_id:
    description: Subnet ID the load balancer virtual IP port belongs in.
    type: str
    sample: ""c53e3c70-9d62-409a-9f71-db148e7aa853""

vip_port_id:
    description: The load balancer virtual IP port ID.
    type: str
    sample: ""2061395c-1c01-47ab-b925-c91b93df9c1d""

vip_address:
    description: The load balancer virtual IP address.
    type: str
    sample: ""192.168.2.88""
```  "
-------------------------------------------------------------------------
"description: Network ID the load balancer virtual IP port belongs in.
description: Subnet ID the load balancer virtual IP port belongs in.
description: The load balancer virtual IP port ID.
description: The load balancer virtual IP address.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Delete recordset named ""www.example.net.""
"
-------------------------------------------------------------------------
"```python
# Delete recordset named ""www""
```"
-------------------------------------------------------------------------
"# Delete recordset named ""www.example.net.""
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"the image given. Mutually exclusive with boot_volume.
"
-------------------------------------------------------------------------
"```yaml
options:
    boot_from_volume:
      description:
        - Should the instance boot from a persistent volume created based on
      type: bool
      default: 'no'
    volume_size:
      description:
        - Size of the volume in GB.
      type: int
      required: true
```"
-------------------------------------------------------------------------
"the image given. Mutually exclusive with boot_volume.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"You have to create an application (a key and secret) with a consumer
"
-------------------------------------------------------------------------
You have to create an application (a key and secret) with a consumer.
-------------------------------------------------------------------------
"You have to create an application (a key and secret) with a consumer
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"msg='Unable to call OVH api for updating the probe of '
"
-------------------------------------------------------------------------
"```python
msg = 'Unable to call OVH api for updating the probe of '
```"
-------------------------------------------------------------------------
"msg='Unable to call OVH api for updating the probe of '
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"This method iterate via the affinity VM assignments and datech the VMs
"
-------------------------------------------------------------------------
"```python
class AffinityGroupsModule(BaseModule):

    def update_vms(self, affinity_group):
        """"""
        Detach the VMs which should not be attached to affinity and attach VMs which should be
        attached to affinity.
        """"""
```"
-------------------------------------------------------------------------
"This method iterate via the affinity VM assignments and datech the VMs
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# for Red Hat Virtualization credentials type.
"
-------------------------------------------------------------------------
"```python
EXAMPLES = '''
 # User can login the oVirt using environment variable instead of variables
 # in yaml file.
 # This is mainly useful when using Ansible Tower or AWX, as it will work
   - name: Obtain SSO token
     ovirt_auth:
       state: present
''' 
```"
-------------------------------------------------------------------------
"# for Red Hat Virtualization credentials type.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# If any labels which user passed aren't assigned, relabel the interface:
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver as xen_api
import re
from ansible.module_utils.basic import AnsibleModule

class HostNetworksModule(BaseModule):
    # Check if labels need to be updated on interface/bond:
    if labels:
        net_labels = nic_service.network_labels_service().list()
        if sorted(labels) != sorted([lbl.id for lbl in net_labels]):
            return True
```"
-------------------------------------------------------------------------
"# If any labels which user passed aren't assigned, relabel the interface:
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Enable usb support and serial console
"
-------------------------------------------------------------------------
"```python
# Enable usb support and serial console
from __future__ import absolute_import, unicode_literals
import re
from ansible.module_utils.xenserver import XenAPI
from ansible.module_utils.basic import AnsibleModule
```"
-------------------------------------------------------------------------
"# Enable usb support and serial console
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# appropriately, this shouldn't have any side-effects, but it's not considered
"
-------------------------------------------------------------------------
# No need to provide extra information.
-------------------------------------------------------------------------
"# appropriately, this shouldn't have any side-effects, but it's not considered
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Redetermine the corresponding service and entity:
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import re
from ansible.module_utils.xenserver import XenAPI
from ansible.module_utils.basic import *
 
def control_state(sd_module):
    sd_service = sd_module._service.service(sd.id)
 
    # In the case of no status returned, it's an attached storage domain.
    if sd.status is None:
        sd_service = sd_module._attached_sd_service(sd)
        sd = get_entity(sd_service)
```"
-------------------------------------------------------------------------
"# Redetermine the corresponding service and entity:
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Edit template subversion
"
-------------------------------------------------------------------------
"```python
# Edit template subversion
```"
-------------------------------------------------------------------------
"# Edit template subversion
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Create new template subversion
"
-------------------------------------------------------------------------
"```python
# Create new template subversion
```"
-------------------------------------------------------------------------
"# Create new template subversion
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- ""Mapper which maps affinity name between VM's OVF and the destination affinity this VM should be registered to,
- ""Mapper which maps affinity label name between VM's OVF and the destination label this VM should be registered to,
"
-------------------------------------------------------------------------
"```python
Mapper which maps affinity group name between VM's OVF and the destination affinity this VM should be registered to,

Mapper which maps affinity label name between VM's OVF and the destination label this VM should be registered to,
```"
-------------------------------------------------------------------------
"- ""Mapper which maps affinity name between VM's OVF and the destination affinity this VM should be registered to,
- ""Mapper which maps affinity label name between VM's OVF and the destination label this VM should be registered to,
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- IMPORTANT - This parameter is not idempotent, if the VM exists and you specify different storage domain,
"
-------------------------------------------------------------------------
"- IMPORTANT - This parameter is not idempotent; if the VM exists and you specify a different storage domain,"
-------------------------------------------------------------------------
"- IMPORTANT - This parameter is not idempotent, if the VM exists and you specify different storage domain,
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- host_devices is an list which contain dictionary with name and state of device
"
-------------------------------------------------------------------------
"```python
options:
  host_devices: 
    description:
      - host_devices is an list which contain dictionary with name and state of device
    version_added: ""2.7""
```"
-------------------------------------------------------------------------
"- host_devices is an list which contain dictionary with name and state of device
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Execute remote viewer to VM
"
-------------------------------------------------------------------------
"```python
# Execute remote viewer to VM
```"
-------------------------------------------------------------------------
"# Execute remote viewer to VM
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"stateless VMs and stateless snapshot is removed.
"
-------------------------------------------------------------------------
"```python
class VmsModule(BaseModule):
    """"""
    This function will first wait for the status DOWN of the VM.
    Then it will find the active snapshot and wait until it's state is OK for
    """"""
    vm_service = self._service.vm_service(vm.id)
    wait(
```"
-------------------------------------------------------------------------
"stateless VMs and stateless snapshot is removed.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# And when first param of equal method is None it returns true.
"
-------------------------------------------------------------------------
"# And when the first parameter of the `equal` function is `None`, it returns `True`."
-------------------------------------------------------------------------
"# And when first param of equal method is None it returns true.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"Standard representation for a device as returned by various tasks::
"
-------------------------------------------------------------------------
"```python
def serialize_device(device):
    return {
        'id': 'device_id',
        'state': device.get('state', 'unknown'),
        'name': device.get('name', 'unnamed'),
        'type': device.get('type', 'unknown'),
        'status': device.get('status', 'unavailable')
    }
```"
-------------------------------------------------------------------------
"Standard representation for a device as returned by various tasks::
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"raise Exception('%s parameter is not valid for non custom_ipxe operating_system.' % param)
"
-------------------------------------------------------------------------
"```python
raise Exception('%s parameter is not valid for non custom_ipxe operating_system.' % param)
```"
-------------------------------------------------------------------------
"raise Exception('%s parameter is not valid for non custom_ipxe operating_system.' % param)
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# state is 'absent' => delete matching keys
"
-------------------------------------------------------------------------
"```python
def act_on_sshkeys(target_state, module, packet_conn):
    if target_state == 'absent':
        for k in matching_sshkeys:
            try:
                k.delete()
            except Exception as e:
                module.fail_json(msg=""Failed to delete SSH key: {}"".format(str(e)))
```"
-------------------------------------------------------------------------
"# state is 'absent' => delete matching keys
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Password to use when authenticating to remote registries.
- username to use when authenticating to remote registries.
"
-------------------------------------------------------------------------
"```
     password:
       description: Password to use when authenticating to remote registries.
       type: str
     username:
       description: Username to use when authenticating to remote registries.
       type: str
```"
-------------------------------------------------------------------------
"- Password to use when authenticating to remote registries.
- username to use when authenticating to remote registries.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Dictionary of key=value pairs to add to the image. Only works with OCI images. Ignored for Docker containers.
"
-------------------------------------------------------------------------
Dictionary of key=value pairs to add to the image. Ignored for Docker containers.
-------------------------------------------------------------------------
"- Dictionary of key=value pairs to add to the image. Only works with OCI images. Ignored for Docker containers.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- name: Build and push an image to multiple registries
"
-------------------------------------------------------------------------
- name: Build and push an image to multiple registries
-------------------------------------------------------------------------
"- name: Build and push an image to multiple registries
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- name: Build and push an image to multiple registries with separate parameters
"
-------------------------------------------------------------------------
"```python
- name: ""Build and push an image to multiple registries with separate parameters""
```"
-------------------------------------------------------------------------
"- name: Build and push an image to multiple registries with separate parameters
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# If the push destination contains the image name and/or the tag
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import re
import ansible.module_utils.xenserver
from XenAPI import XenAPI
import ansible.module_utils.basic

class PodmanImageManager(object):
    if '/' not in self.name:
        self.module.fail_json(msg=""'push_args['dest']' is required when pushing images that do not have the remote registry in the image name"")

    # remove it and warn since it's not needed.
    elif regexp.search(dest):
        dest = regexp.sub('', dest)
```"
-------------------------------------------------------------------------
"# If the push destination contains the image name and/or the tag
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: info from all or specified images
"
-------------------------------------------------------------------------
"```yaml
RETURN = """"""
images:
     returned: always
     description: info from all or specified images
     type: dict
     sample: [
``` "
-------------------------------------------------------------------------
"description: info from all or specified images
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Default policy for incoming traffic.
- Default policy for outcoming traffic.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver as XenServer
import re
from ansible.module_utils.basic import *
```"
-------------------------------------------------------------------------
"- Default policy for incoming traffic.
- Default policy for outcoming traffic.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"and 'size'. More information can be found at U(https://smartos.org/man/1m/imgadm)
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, unicode_literals
import re
try:
    import XenAPI
except ImportError:
    XenAPI = None
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.xenserver import XenAPI


def main():
    module = AnsibleModule(
        argument_spec=dict(
            options=dict(
                type='str',
                required=True,
                description=""Criteria for selecting image. Can be any value from image manifest and 'published_date', ""
                            ""'published', 'source', 'clones', and 'size'. More information can be found at ""
                            ""[https://smartos.org/man/1m/imgadm](https://smartos.org/man/1m/imgadm)"")
        )
    )

    result = {""options"": module.params['options']}
    module.exit_json(**result)


if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"and 'size'. More information can be found at U(https://smartos.org/man/1m/imgadm)
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"otherwise it is applied to all VMs in the vApp.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, unicode_literals
import re

try:
    from ansible.module_utils.xenserver import XenAPI
    from ansible.module_utils.basic import AnsibleModule
except ImportError:
    xen_error = ""Please install the 'XenAPI' library""
    raise ImportError(xen_error)

def set_memory_allocation_for_vm(xen_session, vm_ref, memory_mb):
    try:
        # Code logic to set memory allocation for a specific VM
        pass
    except XenAPI.Failure as xen_error:
        # Handle XenAPI failures
        raise XenAPI.Failure(xen_error)

options:
  description:
    - The amount of memory in MB to allocate to VMs in the vApp.  If the
      I(vm_name) argument is provided, then this becomes a per VM setting
  operation:
    description:
      - Specifies an operation to be performed on the vApp.
```  "
-------------------------------------------------------------------------
"otherwise it is applied to all VMs in the vApp.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Connect the network to the Vapp/VM and return assigned IP
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import re
from XenAPI import XenAPI
from ansible.module_utils.basic import *
from ansible.module_utils.xenserver import connect_to_network

def create(module):

    module.vca.block_until_completed(task)

    if network_name is not None:
        vm_ip = connect_to_network(module, vdc_name, vapp_name, network_name, network_mode)
        return vm_ip
```"
-------------------------------------------------------------------------
"# Connect the network to the Vapp/VM and return assigned IP
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- The state of Virtual Machine deployed from template in content library.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver as xen
import re
from XenAPI import XenAPI
from ansible.module_utils.basic import AnsibleModule

def main():
    module = AnsibleModule(
        argument_spec=dict(
            options=dict(required=False),
            state=dict(
                description=""The state of Virtual Machine deployed from template in content library."",
                required=False
            )
        )
    )

    # Your code logic here

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"- The state of Virtual Machine deployed from template in content library.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"self.module.fail_json(msg=""Failed to create datastore cluster""
"
-------------------------------------------------------------------------
"```python
self.module.fail_json(msg=""Failed to create datastore cluster"")
```"
-------------------------------------------------------------------------
"self.module.fail_json(msg=""Failed to create datastore cluster""
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"Creates result for successful run
    group_obj: group object
"
-------------------------------------------------------------------------
"```python
def __set_result(self, group_obj):
    """"""
    Args:
        group_obj: group object

    Returns: None
    """"""
    # Creates result for successful run
    result = {
        'changed': True,
        'result': 'Success',
        'group_obj': group_obj
    }
```"
-------------------------------------------------------------------------
"Creates result for successful run
    group_obj: group object
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Use SCSI disks instead of IDE when you want to expand online disks by specifying a SCSI controller
"
-------------------------------------------------------------------------
Use SCSI disks instead of IDE when expanding online disks by specifying a SCSI controller.
-------------------------------------------------------------------------
"- Use SCSI disks instead of IDE when you want to expand online disks by specifying a SCSI controller
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- ""  virtual machine with CentOS 64 bit, will be 'centos64Guest'""
"
-------------------------------------------------------------------------
"```python
options:
     - This parameter is case sensitive.
     - 'Examples:'
     - ""  virtual machine with CentOS 64 bit, will be 'centos64Guest'""
     - This field is required when creating a virtual machine, not required when creating from the template.
```"
-------------------------------------------------------------------------
"- ""  virtual machine with CentOS 64 bit, will be 'centos64Guest'""
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- All parameters and VMware object names are case sensitive.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver as XenAPI
import re
from ansible.module_utils.basic import *

```"
-------------------------------------------------------------------------
"- All parameters and VMware object names are case sensitive.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"input_value: Input value to retrieve int value from
"
-------------------------------------------------------------------------
"```python
class PyVmomiDeviceHelper(object):
    """"""
    Function to return int value for given input, else return error
    Args:
        input_value: Input value to retrieve int value from
    Returns: (int) if integer value can be obtained, otherwise will send a error message.
    """"""
```"
-------------------------------------------------------------------------
"input_value: Input value to retrieve int value from
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- ' - C(scsi_type) (string): Type of SCSI controller. This value is required only for the first occurrence of SCSI Controller.'
"
-------------------------------------------------------------------------
- ' - C(scsi_type) (string): Type of SCSI controller. This value is required only for the first occurrence of SCSI Controller.'
-------------------------------------------------------------------------
"- ' - C(scsi_type) (string): Type of SCSI controller. This value is required only for the first occurrence of SCSI Controller.'
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Date and time in string format at which specified task needs to be performed.
"
-------------------------------------------------------------------------
"```python
options:
    type: str
scheduled_at:
    description: ""Date and time in string format at which specified task needs to be performed.""
    type: str
```"
-------------------------------------------------------------------------
"- Date and time in string format at which specified task needs to be performed.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"# Useful if you reinstalled a host and it uses a new self-signed certificate
"
-------------------------------------------------------------------------
"         try:
             task = host_object.ReconnectHost_Task(**reconnecthost_args)
         except Exception as e:
             print(f""Error reconnecting host: {e}"")"
-------------------------------------------------------------------------
"# Useful if you reinstalled a host and it uses a new self-signed certificate
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- Whether the ESXi host is joined to an AD domain or not.
"
-------------------------------------------------------------------------
"Adjust the code snippet as follows:

```python
# Whether the ESXi host is joined to an AD domain or not.
options:
  type: str
ad_state:
  description:
  type: str
  choices: [ present, absent ]
  default: 'absent'
```"
-------------------------------------------------------------------------
"- Whether the ESXi host is joined to an AD domain or not.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"self.module.fail_json(msg=""Failed to configure the rule set %s as a runtime""
"
-------------------------------------------------------------------------
"```python
self.module.fail_json(msg=""Failed to configure the rule set %s as a runtime"")
```"
-------------------------------------------------------------------------
"self.module.fail_json(msg=""Failed to configure the rule set %s as a runtime""
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"results['msg'] = ""Role privileges are properly configured""
"
-------------------------------------------------------------------------
"```python
results['msg'] = ""Role privileges are properly configured""
```"
-------------------------------------------------------------------------
"results['msg'] = ""Role privileges are properly configured""
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"description: Firewall group the server is assigned to
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import re
from ansible.module_utils.xenserver import XenAPI
from ansible.module_utils.basic import *
```"
-------------------------------------------------------------------------
"description: Firewall group the server is assigned to
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- All parameters are case sensitive.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import
import ansible.module_utils.xenserver as XenServer
import re
from ansible.module_utils.basic import *
```"
-------------------------------------------------------------------------
"- All parameters are case sensitive.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- All parameters are case sensitive.
"
-------------------------------------------------------------------------
"```python
# All parameters are case sensitive.
from __future__ import absolute_import, division, print_function

import ansible.module_utils.xenserver as XenServer
import re
from ansible.module_utils.basic import *

# Code snippet continues here...
```"
-------------------------------------------------------------------------
"- All parameters are case sensitive.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"This module can be used to power on, power off, restart or suspend virtual machine and gracefully reboot or shutdown guest OS of virtual machine.
"
-------------------------------------------------------------------------
"'''
module: xenserver_guest_powerstate
short_description: Manages power states of virtual machines running on Citrix XenServer host or pool
description: >
    This module can be used to power on, power off, restart, or suspend a virtual machine and gracefully reboot or shutdown the guest OS of the virtual machine.
version_added: '2.8'
author:
- Bojan Vitnik (@bvitnik) <bvitnik@mainstream.rs>
'''"
-------------------------------------------------------------------------
"This module can be used to power on, power off, restart or suspend virtual machine and gracefully reboot or shutdown guest OS of virtual machine.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- If C(state) is set to C(present), then VM is just checked for existence and facts are returned.
"
-------------------------------------------------------------------------
"Based on the provided information, the code snippet can be adapted as follows:

```python
# If state is set to present, check VM existence and return facts
if state == 'present':
    # Check VM existence
    # Return facts
```"
-------------------------------------------------------------------------
"- If C(state) is set to C(present), then VM is just checked for existence and facts are returned.
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- 'By default, module will wait indefinitely for VM to change state or acquire an IP address if C(wait_for_ip_address: yes).'
"
-------------------------------------------------------------------------
"By default, the module will wait indefinitely for the VM to change state."
-------------------------------------------------------------------------
"- 'By default, module will wait indefinitely for VM to change state or acquire an IP address if C(wait_for_ip_address: yes).'
"
-------------------------------------------------------------------------
"Recom
PRs: 62194, 62274"
-------------------------------------------------------------------------
=========================================================================
"- the token key identifying an ACL rule set. If generated by consul
"
-------------------------------------------------------------------------
"```python
options:
  required: false
  token:
    description: The token key identifying an ACL rule set. If generated by Consul
    required: false
  rules:
```"
-------------------------------------------------------------------------
"- the token key identifying an ACL rule set. If generated by consul
"
-------------------------------------------------------------------------
"Recom
PRs: 62196, 62271"
-------------------------------------------------------------------------
=========================================================================
":exception ImportError: if it is detected that any of the required dependencies have not been imported
"
-------------------------------------------------------------------------
"```python
def get_consul_client(configuration):
    def check_dependencies():
        """"""
        Checks that the required dependencies have been imported.
        """"""
        if not python_consul_installed or not ansible.module_utils.k8s.scale or not __future__:
            raise ImportError(""Required dependencies have not been imported."")
```"
-------------------------------------------------------------------------
":exception ImportError: if it is detected that any of the required dependencies have not been imported
"
-------------------------------------------------------------------------
"Recom
PRs: 62196, 62271"
-------------------------------------------------------------------------
=========================================================================
"- The token key identifying an ACL rule set that controls access to
"
-------------------------------------------------------------------------
"```python
options:
  type: str
token:
  description: The token key identifying an ACL rule set that controls access to
  type: str
cas:
```
"
-------------------------------------------------------------------------
"- The token key identifying an ACL rule set that controls access to
"
-------------------------------------------------------------------------
"Recom
PRs: 62196, 62271"
-------------------------------------------------------------------------
=========================================================================
"to identify a specific object.
"
-------------------------------------------------------------------------
"```python
options:
  namespace:
    description:
    - Use to specify an object namespace. Use in conjunction with I(api_version), I(kind), and I(name)
  label_selectors:
    description: List of label selectors to use to filter results
  field_selectors:

from ansible.module_utils.k8s.scale import KubernetesAnsibleScaleModule
from __future__ import absolute_import
from __future__ import print_function

def main():
    KubernetesAnsibleScaleModule()
```"
-------------------------------------------------------------------------
"to identify a specific object.
"
-------------------------------------------------------------------------
"Recom
PRs: 62196, 62271"
-------------------------------------------------------------------------
=========================================================================
"- Similar to the kubectl scale command. Use to set the number of replicas for a Deployment, ReplicaSet,
"
-------------------------------------------------------------------------
"```python
""""""
Replication Controller, or the parallelism attribute of a Job. Supports check mode.
""""""
from ansible.module_utils.k8s.scale import KubernetesAnsibleScaleModule
from __future__ import absolute_import, print_function, division

def main():
    KubernetesAnsibleScaleModule()

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"- Similar to the kubectl scale command. Use to set the number of replicas for a Deployment, ReplicaSet,
"
-------------------------------------------------------------------------
"Recom
PRs: 62196, 62271"
-------------------------------------------------------------------------
=========================================================================
"# potentially leak sensitive information
"
-------------------------------------------------------------------------
"```python
# Import required dependencies
from __future__ import absolute_import
import pypsexec.paexec
import pypsexec
import smbprotocol.exceptions
import socket
import pypsexec.exceptions
import traceback
import gssapi.raw
import ansible.module_utils._text
import ansible.module_utils.basic
import gssapi

def main():
    # This should catch all insufficient versions of pexpect
    # We deem them insufficient for their lack of ability to specify
    # to not echo responses via the run/runu functions, which would
    module.fail_json(msg='Insufficient version of pexpect installed '
                         '(%s), this module requires pexpect>=3.3. '
                         'Error was %s' % (pexpect.__version__, to_native(e)))
```"
-------------------------------------------------------------------------
"# potentially leak sensitive information
"
-------------------------------------------------------------------------
"Recom
PRs: 62197, 62270"
-------------------------------------------------------------------------
=========================================================================
"immediately after starting the process while the process continues to
"
-------------------------------------------------------------------------
immediately upon starting the process while the process continues.
-------------------------------------------------------------------------
"immediately after starting the process while the process continues to
"
-------------------------------------------------------------------------
"Recom
PRs: 62197, 62270"
-------------------------------------------------------------------------
=========================================================================
"# potentially leak sensitive information
"
-------------------------------------------------------------------------
"```python
# Dependencies required: __future__, pypsexec.paexec, pypsexec, smbprotocol.exceptions, socket, pypsexec.exceptions, traceback, gssapi.raw, ansible.module_utils._text, ansible.module_utils.basic, gssapi
import __future__
import pypsexec.paexec
import pypsexec
import smbprotocol.exceptions
import socket
import pypsexec.exceptions
import traceback
import gssapi.raw
import ansible.module_utils._text
import ansible.module_utils.basic
import gssapi

def main():
         # This should catch all insufficient versions of pexpect
         # We deem them insufficient for their lack of ability to specify
         # to not echo responses via the run/runu functions, which would
         module.fail_json(msg='Insufficient version of pexpect installed '
                              '(%s), this module requires pexpect>=3.3. '
                              'Error was %s' % (pexpect.__version__, to_native(e)))
```"
-------------------------------------------------------------------------
"# potentially leak sensitive information
"
-------------------------------------------------------------------------
"Recom
PRs: 62197, 62269"
-------------------------------------------------------------------------
=========================================================================
"immediately after starting the process while the process continues to
"
-------------------------------------------------------------------------
immediately after starting the process while the process continues.
-------------------------------------------------------------------------
"immediately after starting the process while the process continues to
"
-------------------------------------------------------------------------
"Recom
PRs: 62197, 62269"
-------------------------------------------------------------------------
=========================================================================
"# Prepare result, payload, and headers
"
-------------------------------------------------------------------------
"```python
def user_add_or_update(module, HTTPMethod):
    api_base_url = cyberark_session[""api_base_url""]
    validate_certs = cyberark_session[""validate_certs""]

    result = {}
    payload = {}
    headers = {'Content-Type': 'application/json'}
```"
-------------------------------------------------------------------------
"# Prepare result, payload, and headers
"
-------------------------------------------------------------------------
"Recom
PRs: 62200, 62265"
-------------------------------------------------------------------------
=========================================================================
"- It is B(highly) recommended to store 1Password credentials in an Ansible Vault. Ensure that the key used to encrypt
"
-------------------------------------------------------------------------
It is highly recommended to store 1Password credentials in an Ansible Vault. Ensure that the key used to encrypt.
-------------------------------------------------------------------------
"- It is B(highly) recommended to store 1Password credentials in an Ansible Vault. Ensure that the key used to encrypt
"
-------------------------------------------------------------------------
"Recom
PRs: 62200, 62265"
-------------------------------------------------------------------------
=========================================================================
"username/password only available since 2.8, in older versions you need to use url_username/url_password
"
-------------------------------------------------------------------------
"```python
     dest: /tmp/afilecopy.txt
 
 - name: < Fetch file that requires authentication.
   get_url:
     url: http://example.com/path/file.conf
     dest: /etc/foo.conf
     url_username: myusername
     url_password: mypassword
```"
-------------------------------------------------------------------------
"username/password only available since 2.8, in older versions you need to use url_username/url_password
"
-------------------------------------------------------------------------
"Recom
PRs: 62201, 62263"
-------------------------------------------------------------------------
=========================================================================
"# Turn a list of lists into a list of tuples that urlencode accepts
"
-------------------------------------------------------------------------
"```python
from __future__ import print_function, absolute_import
from ansible.module_utils.network.common.utils import validate_ip_address, validate_ip_v6_address
from ansible.module_utils.net_tools.nios.api import WapiModule
from ansible.module_utils.six import string_types
from ansible.module_utils.basic import AnsibleModule
from urllib.parse import urlencode
from collections.abc import Mapping, Sequence

def kv_list(body):
    if isinstance(body, (Mapping, Sequence)):
        result = []
        for key, values in body.items():
            if isinstance(values, string_types) or not isinstance(values, (Mapping, Sequence)):
                values = [values]
            result.extend((key, value) for value in values)
        return result

def form_urlencoded(body):
    if isinstance(body, (Mapping, Sequence)):
        result = []
        for key, values in kv_list(body):
            if isinstance(values, string_types) or not isinstance(values, (Mapping, Sequence)):
                values = [values]
            result.extend((key, value) for value in values)
        return urlencode(result)
```"
-------------------------------------------------------------------------
"# Turn a list of lists into a list of tuples that urlencode accepts
"
-------------------------------------------------------------------------
"Recom
PRs: 62201, 62263"
-------------------------------------------------------------------------
=========================================================================
"Perform the HTTPS request by using ansible get/delete method
"
-------------------------------------------------------------------------
"from ansible.module_utils.network.common.utils import perform_https_request

class Infinity(object):
    params=None
    payload_data=None

    def perform_https_request(self, method, resource_url):
        stat_codes = [200] if stat_codes is None else stat_codes
        request_url = str(self.base_url) + str(resource_url)
        
        response = perform_https_request(method, request_url)
        return response
"
-------------------------------------------------------------------------
"Perform the HTTPS request by using ansible get/delete method
"
-------------------------------------------------------------------------
"Recom
PRs: 62201, 62263"
-------------------------------------------------------------------------
=========================================================================
"MAC address of the client.
"
-------------------------------------------------------------------------
Configure Infoblox NIOS DHCP Fixed Address - MAC address of the client.
-------------------------------------------------------------------------
"MAC address of the client.
"
-------------------------------------------------------------------------
"Recom
PRs: 62201, 62263"
-------------------------------------------------------------------------
=========================================================================
"username/password only available since 2.8, in older versions you need to use url_username/url_password
"
-------------------------------------------------------------------------
"EXAMPLES = r'''
     dest: /tmp/afilecopy.txt

- name: < Fetch file that requires authentication.
  get_url:
    url: http://example.com/path/file.conf
    dest: /etc/foo.conf
    url_username: myuser
    url_password: mypass
'''"
-------------------------------------------------------------------------
"username/password only available since 2.8, in older versions you need to use url_username/url_password
"
-------------------------------------------------------------------------
"Recom
PRs: 62201, 62261"
-------------------------------------------------------------------------
=========================================================================
"# Turn a list of lists into a list of tuples that urlencode accepts
"
-------------------------------------------------------------------------
"```python
from __future__ import print_function, absolute_import
from ansible.module_utils.network.common.utils import validate_ip_address
from ansible.module_utils.net_tools.nios.api import WapiModule
from ansible.module_utils.six import iteritems
from ansible.module_utils.basic import AnsibleModule

def form_urlencoded(body):
    if isinstance(body, (Mapping, Sequence)):
        result = []
        for key, values in kv_list(body):
            if isinstance(values, string_types) or not isinstance(values, (Mapping, Sequence)):
                values = [values]
```"
-------------------------------------------------------------------------
"# Turn a list of lists into a list of tuples that urlencode accepts
"
-------------------------------------------------------------------------
"Recom
PRs: 62201, 62261"
-------------------------------------------------------------------------
=========================================================================
"Perform the HTTPS request by using ansible get/delete method
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.network.common.utils import https_request

class Infinity(object):
    params = None
    payload_data = None

    def perform_https_request(self):
        stat_codes = [200] if stat_codes is None else stat_codes
        request_url = str(self.base_url) + str(resource_url)
        
        response = https_request(method='GET', url=request_url, headers={}, params=self.params, data=self.payload_data)
        
        return response
```"
-------------------------------------------------------------------------
"Perform the HTTPS request by using ansible get/delete method
"
-------------------------------------------------------------------------
"Recom
PRs: 62201, 62261"
-------------------------------------------------------------------------
=========================================================================
"MAC address of the client.
"
-------------------------------------------------------------------------
- MAC address of the client.
-------------------------------------------------------------------------
"MAC address of the client.
"
-------------------------------------------------------------------------
"Recom
PRs: 62201, 62261"
-------------------------------------------------------------------------
=========================================================================
"- Prompt user for inventory on launch.
"
-------------------------------------------------------------------------
"```yaml
options:
  default: 'no'
  ask_inventory:
    description: ""Prompt user for inventory on launch.""
    type: bool
    default: 'no'
  ask_credential:
```  "
-------------------------------------------------------------------------
"- Prompt user for inventory on launch.
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62257"
-------------------------------------------------------------------------
=========================================================================
"- The Twillio account SID. Required if I(notification_type=twillio).
"
-------------------------------------------------------------------------
"Update the metadata as follows:

```yaml
options:
  required: False
  account_sid:
    description: The Twilio account SID. Required if notification_type=twilio.
  subdomain:
    description:
```"
-------------------------------------------------------------------------
"- The Twillio account SID. Required if I(notification_type=twillio).
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62257"
-------------------------------------------------------------------------
=========================================================================
"sample: [ 'Message 1', 'Message 2' ]
"
-------------------------------------------------------------------------
"output:
  description: The import messages
  returned: 
    - success
    - fail"
-------------------------------------------------------------------------
"sample: [ 'Message 1', 'Message 2' ]
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62257"
-------------------------------------------------------------------------
=========================================================================
"- User is a system wide administrator.
"
-------------------------------------------------------------------------
"    superuser:
      type: bool
      default: 'yes'"
-------------------------------------------------------------------------
"- User is a system wide administrator.
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62257"
-------------------------------------------------------------------------
=========================================================================
"amount of seconds
"
-------------------------------------------------------------------------
"timeout:
  description:
    - The amount of seconds to wait before aborting if the workflow is not complete."
-------------------------------------------------------------------------
"amount of seconds
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62257"
-------------------------------------------------------------------------
=========================================================================
"- Prompt user for inventory on launch.
"
-------------------------------------------------------------------------
"```yaml
options:
  version_added: ""2.9""
  ask_inventory:
    description: ""Prompt user for inventory on launch.""
    type: bool
    version_added: ""2.9""
```"
-------------------------------------------------------------------------
"description: My very first Workflow Template
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62257"
-------------------------------------------------------------------------
=========================================================================
"- Pinning works only if the plugin is installed and Jenkins service was
"
-------------------------------------------------------------------------
Pinning only works if the plugin is installed and the Jenkins service has been successfully restarted after installation.
-------------------------------------------------------------------------
"- Pinning works only if the plugin is installed and Jenkins service was
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62257"
-------------------------------------------------------------------------
=========================================================================
"description: Dictionary containing ACL policy informations before modification.
description: Dictionary containing ACL policy informations after modification.
"
-------------------------------------------------------------------------
"'''
Required dependency: __future__, ansible.module_utils.urls, json, ansible.module_utils._text, ansible.module_utils.basic, 
Original metadata: Backport of 62202: fix typos in web_infrastructure modules
--##### SUMMARY
Backport of #62202: fix typos in web_infrastructure modules

##### ISSUE TYPE
- Docs Pull Request
backport, module, community_review, support:community, docs, affects_2.8, tower, web_infrastructure

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.urls.fetch_url, ansible.module_utils._text.to_text, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, json, __future__.division
Function name information from Stable: __init__, request_rundeck_api, handle_http_code_if_needed, create_or_update_acl, remove_acl, get_acl, main
Function call information from Stable: dict, fetch_url, to_text, str, AnsibleModule, RundeckACLManager, main
Class name information from Stable: RundeckACLManager
Class method call information from Stable: self.get_acl, module.fail_json, self.module, resp.read, rundeck.create_or_update_acl, self.handle_http_code_if_needed, module.params, rundeck.remove_acl, self.request_rundeck_api, json.loads, json.dumps
Target file: body, snippets, dictionnary, request_rundeck_api, division, __metaclass__, preview, create, containing, COPYING, python, example, module_utils, for, Ansible, experience, fail_json, elif, no_log, False, Token, Type, must, resp, License, data, is, str, get_acl, required_if, json, If, system, Create, ensure, PUT, name, DOCUMENTATION, be, mode, URL, int, policy, class, urls, can, loads, GNU, or, bin, response, project, choices, short_description, when, ansible, e, acl, facts, Sponsored, bug, t, Digital, occurs, the, described, unix, General, version_added, to, aclpolicy, fr, ...

description: Dictionary containing ACL policy informations before modification.
description: Dictionary containing ACL policy informations after modification.
'''"
-------------------------------------------------------------------------
"description: Dictionary containing ACL policy informations before modification.
description: Dictionary containing ACL policy informations after modification.
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62257"
-------------------------------------------------------------------------
=========================================================================
"- Prompt user for inventory on launch.
"
-------------------------------------------------------------------------
"```python
options:
  default: 'no'
ask_inventory:
  description: ""Prompt user for inventory on launch.""
  type: bool
  default: 'no'
ask_credential:
```"
-------------------------------------------------------------------------
"- Prompt user for inventory on launch.
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62255"
-------------------------------------------------------------------------
=========================================================================
"- The Twillio account SID. Required if I(notification_type=twillio).
"
-------------------------------------------------------------------------
"
```python
options:
       required: False
     account_sid:
       description: ""The Twillio account SID. Required if notification_type=twillio""
     subdomain:
       description: required: False
```"
-------------------------------------------------------------------------
"- The Twillio account SID. Required if I(notification_type=twillio).
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62255"
-------------------------------------------------------------------------
=========================================================================
"sample: [ 'Message 1', 'Message 2' ]
"
-------------------------------------------------------------------------
"```python
output = [ 'success', 'fail' ]
```"
-------------------------------------------------------------------------
"sample: [ 'Message 1', 'Message 2' ]
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62255"
-------------------------------------------------------------------------
=========================================================================
"- User is a system wide administrator.
"
-------------------------------------------------------------------------
"```yaml
options:
  - User password.
superuser:
  description: User is a system wide administrator.
  type: bool
  default: 'no'
auditor:
```"
-------------------------------------------------------------------------
"- User is a system wide administrator.
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62255"
-------------------------------------------------------------------------
=========================================================================
"amount of seconds
"
-------------------------------------------------------------------------
"Current context: options:
     timeout:
       description:
         - If waiting for the workflow to complete this will abort after this

Amended context: options:
     timeout:
       description:
         - If waiting for the workflow to complete, it will abort after this amount of seconds"
-------------------------------------------------------------------------
"amount of seconds
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62255"
-------------------------------------------------------------------------
=========================================================================
"- Prompt user for inventory on launch.
"
-------------------------------------------------------------------------
"```yaml
options:
  version_added: ""2.9""
  ask_inventory:
    description: ""Prompt user for inventory on launch.""
    type: bool
    version_added: ""2.9""
  description:
```"
-------------------------------------------------------------------------
"- Prompt user for inventory on launch.
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62255"
-------------------------------------------------------------------------
=========================================================================
"description: My very first Workflow Template
"
-------------------------------------------------------------------------
"```yaml
- tower_workflow_template:
    name: Workflow Template
    organization: My optional Organization
    schema: ""{{ lookup('file', 'my_workflow.json') }}""
    description: My very first Workflow Template
```"
-------------------------------------------------------------------------
"description: My very first Workflow Template
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62255"
-------------------------------------------------------------------------
=========================================================================
"- Pinning works only if the plugin is installed and Jenkins service was
"
-------------------------------------------------------------------------
Pinning only works if the plugin is installed and the Jenkins service has been successfully restarted.
-------------------------------------------------------------------------
"- Pinning works only if the plugin is installed and Jenkins service was
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62255"
-------------------------------------------------------------------------
=========================================================================
"description: Dictionary containing ACL policy informations before modification.
description: Dictionary containing ACL policy informations after modification.
"
-------------------------------------------------------------------------
"'''
Required dependency: __future__, ansible.module_utils.urls, json, ansible.module_utils._text, ansible.module_utils.basic, 
Original metadata: Backport of 62202: fix typos in web_infrastructure modules
--(cherry picked from commit 655f771547da8cc8466060e18acea05330a6e3b7)##### SUMMARYBackport of #62202: fix typos in web_infrastructure modules##### ISSUE TYPE- Docs Pull Request
backport, module, community_review, support:community, docs, tower, web_infrastructure, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.urls.fetch_url, ansible.module_utils._text.to_text, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, json, __future__.division
Function name information from Stable: __init__, request_rundeck_api, handle_http_code_if_needed, create_or_update_acl, remove_acl, get_acl, main
Function call information from Stable: dict, fetch_url, to_text, str, AnsibleModule, RundeckACLManager, main
Class name information from Stable: RundeckACLManager
Class method call information from Stable: self.get_acl, module.fail_json, self.module, resp.read, rundeck.create_or_update_acl, self.handle_http_code_if_needed, module.params, rundeck.remove_acl, self.request_rundeck_api, json.loads, json.dumps
Target file: body, snippets, dictionnary, request_rundeck_api, division, __metaclass__, preview, create, containing, COPYING, python, example, module_utils, for, Ansible, experience, fail_json, elif, no_log, False, Token, Type, must, resp, License, data, is, str, get_acl, required_if, json, If, system, Create, ensure, PUT, name, DOCUMENTATION, be, mode, URL, int, policy, class, urls, can, loads, GNU, or, bin, response, project, choices, short_description, when, ansible, e, acl, facts, Sponsored, bug, t, Digital, occurs, the, described, unix, General, version_added, to, aclpolicy, fr, by, used, pure, basic, __init__, Please, module, Auth, ValueError, Unhandled, to_text, RundeckACLManager, Exception, object, I, supported_by, dumps, _text, changed, should, usr, loic, def, report, permissions, man5, main, it, Accept, __future__, unset, fetch_url, query, Infopro, E, least, metadata_version, creation, already, Sets, blot, Manage, receive, It, status, Blot, __name__, HTTP, success, method, b, DELETE, error, absolute_import, EXAMPLES, Loic, read, build, dict, after, simulate, gnu, s, c, else, None, etai, GET, from, Cannot, org, remove, __main__, a, self, Project_01, failed, remove_acl, rundeck_response, ACL, supports_check_mode, txt, through, YAML, AnsibleModule, params, correct, allowed, valid, mytoken, before, type, rundeck, default, Remove, errors, instance, digital, string, Content, exit_json, group, against, Unable, url, API, community, inventory, rundeck_acl_policy, Fatal, in, docs, print_function, policies, present, has, surrogate_or_strict, please, absent, infos, licenses, api, gpl, context, application, options, www, v3, nerzhul, ANSIBLE_METADATA, T, Public, required, api_version, version, handle_http_code_if_needed, coding, com, author, True, not, contents, was, failure, informations, try, JSON, except, _, return, at, POST, authenticate, fake, html, Project_02, X, check_mode, exists, infopro, A, which, allow, msg, d, token, argument_spec, import, create_or_update_acl, http, modification, state, utf, if, returned, see, Object, my, check, https, json_resp, doesn, as, update, RETURN, Rundeck, content
'''
"
-------------------------------------------------------------------------
"description: Dictionary containing ACL policy informations before modification.
description: Dictionary containing ACL policy informations after modification.
"
-------------------------------------------------------------------------
"Recom
PRs: 62202, 62255"
-------------------------------------------------------------------------
=========================================================================
"parameter_group_status:
"
-------------------------------------------------------------------------
"```python
elasticache_clusters:
  returned: always
  type: int
  sample: 6379
description: Status of the Cache Parameter Group
returned: always
type: str
```
"
-------------------------------------------------------------------------
"parameter_group_status:
"
-------------------------------------------------------------------------
"Recom
PRs: 62204, 62254"
-------------------------------------------------------------------------
=========================================================================
"import pika.exceptions
"
-------------------------------------------------------------------------
"```python
import pika.exceptions
```"
-------------------------------------------------------------------------
"import pika.exceptions
"
-------------------------------------------------------------------------
"Recom
PRs: 61960, 62235"
-------------------------------------------------------------------------
=========================================================================
"try:
    self.conn_channel.basic_publish(**args)
    return True
except pika.exceptions.UnroutableError:
    return False
"
-------------------------------------------------------------------------
"```python
try:
    self.conn_channel.basic_publish(**args)
    return True
except pika.exceptions.UnroutableError:
    return False
```"
-------------------------------------------------------------------------
"try:
    self.conn_channel.basic_publish(**args)
    return True
except pika.exceptions.UnroutableError:
    return False
"
-------------------------------------------------------------------------
"Recom
PRs: 61960, 62235"
-------------------------------------------------------------------------
=========================================================================
"import pika.exceptions
"
-------------------------------------------------------------------------
"```python
import pika.exceptions
```"
-------------------------------------------------------------------------
"import pika.exceptions
"
-------------------------------------------------------------------------
"Recom
PRs: 61960, 62234"
-------------------------------------------------------------------------
=========================================================================
"try:
    self.conn_channel.basic_publish(**args)
    return True
except pika.exceptions.UnroutableError:
    return False
"
-------------------------------------------------------------------------
"```python
try:
    self.conn_channel.basic_publish(**args)
    return True
except pika.exceptions.UnroutableError:
    return False
```"
-------------------------------------------------------------------------
"try:
    self.conn_channel.basic_publish(**args)
    return True
except pika.exceptions.UnroutableError:
    return False
"
-------------------------------------------------------------------------
"Recom
PRs: 61960, 62234"
-------------------------------------------------------------------------
=========================================================================
"headers = {
    ""Content-Type"": ""application/json"",
    ""Connection"": ""keep-alive"",
}
"
-------------------------------------------------------------------------
"```python
headers = {
    ""Content-Type"": ""application/json"",
    ""Connection"": ""keep-alive"",
    ""Authorization"": ""Bearer <YOUR_ACCESS_TOKEN>""
}
```"
-------------------------------------------------------------------------
"headers = {
    ""Content-Type"": ""application/json"",
    ""Connection"": ""keep-alive"",
}
"
-------------------------------------------------------------------------
"Recom
PRs: 62218, 62223"
-------------------------------------------------------------------------
=========================================================================
"if match:
    existing_as = match.group(1)
"
-------------------------------------------------------------------------
"```python
if match:
    existing_as = match.group(1)
```"
-------------------------------------------------------------------------
"if match:
    existing_as = match.group(1)
"
-------------------------------------------------------------------------
"Recom
PRs: 58756, 62195"
-------------------------------------------------------------------------
=========================================================================
"encrypted_password=dict(no_log=True),
"
-------------------------------------------------------------------------
"```python
import __future__
import ansible.module_utils.network.common.utils
import copy
import ansible.module_utils.six
import ansible.module_utils.connection
import ansible.module_utils.network.junos.junos
import lxml.etree
import functools
import xml.etree.ElementTree
import ansible.module_utils._text
import ansible.module_utils.basic

def main():
    name=dict()
    full_name=dict()
    role=dict(choices=ROLES)
    sshkey=dict()
    state=dict(choices=['present', 'absent'], default='present')
    active=dict(type='bool', default=True)
    encrypted_password=dict(no_log=True)
```  "
-------------------------------------------------------------------------
"encrypted_password=dict(no_log=True),
"
-------------------------------------------------------------------------
"Recom
PRs: 62184, 62192"
-------------------------------------------------------------------------
=========================================================================
"# In some cases even a normal commit, i.e., !replace,
# throws a prompt and we need to handle it before
# proceeding further
cmd_obj['prompt'] = '(C|c)onfirm'
cmd_obj['answer'] = 'y'
"
-------------------------------------------------------------------------
"```python
# In some cases even a normal commit, i.e., !replace,
# throws a prompt and we need to handle it before
# proceeding further
cmd_obj['prompt'] = '(C|c)onfirm'
cmd_obj['answer'] = 'y'
```"
-------------------------------------------------------------------------
"# In some cases even a normal commit, i.e., !replace,
# throws a prompt and we need to handle it before
# proceeding further
cmd_obj['prompt'] = '(C|c)onfirm'
cmd_obj['answer'] = 'y'
"
-------------------------------------------------------------------------
"Recom
PRs: 62132, 62191"
-------------------------------------------------------------------------
=========================================================================
"encrypted_password=dict(no_log=True),
"
-------------------------------------------------------------------------
"encrypted_password=dict(no_log=True),"
-------------------------------------------------------------------------
"encrypted_password=dict(no_log=True),
"
-------------------------------------------------------------------------
"Recom
PRs: 62184, 62190"
-------------------------------------------------------------------------
=========================================================================
"if name == command  '.requirements' and ext == '.txt':
    return {
        command: self.integration_all_target,
    }

"
-------------------------------------------------------------------------
"if name == 'command.requirements' and ext == '.txt':
    return {
        'integration': self.integration_all_target,
        'windows-integration': self.integration_all_target,
    }"
-------------------------------------------------------------------------
"if name == command  '.requirements' and ext == '.txt':
    return {
        command: self.integration_all_target,
    }

"
-------------------------------------------------------------------------
"Recom
PRs: 62181, 62186"
-------------------------------------------------------------------------
=========================================================================
"if command == 'units':
    requirements = os.path.join(data_context().content.unit_path, 'requirements.txt')

    if os.path.exists(requirements) and os.path.getsize(requirements):
        options = ['-r', requirements]

if command in ('integration', 'windows-integration', 'network-integration'):
    requirements = os.path.join(data_context().content.integration_path, 'requirements.txt')

    if os.path.exists(requirements) and os.path.getsize(requirements):
        options = ['-r', requirements]

    requirements = os.path.join(data_context().content.integration_path, '%s.requirements.txt' % command)

    if os.path.exists(requirements) and os.path.getsize(requirements):
        options = ['-r', requirements]

"
-------------------------------------------------------------------------
"```python
if command == 'units':
    requirements = os.path.join(data_context().content.unit_path, 'requirements.txt')

    if os.path.exists(requirements) and os.path.getsize(requirements):
        options = ['-r', requirements]

elif command in ('integration', 'windows-integration', 'network-integration'):
    requirements = os.path.join(data_context().content.integration_path, 'requirements.txt')

    if os.path.exists(requirements) and os.path.getsize(requirements):
        options = ['-r', requirements]

    requirements_specific = os.path.join(data_context().content.integration_path, '%s.requirements.txt' % command)

    if os.path.exists(requirements_specific) and os.path.getsize(requirements_specific):
        options = ['-r', requirements_specific]
```"
-------------------------------------------------------------------------
"if command == 'units':
    requirements = os.path.join(data_context().content.unit_path, 'requirements.txt')

    if os.path.exists(requirements) and os.path.getsize(requirements):
        options = ['-r', requirements]

if command in ('integration', 'windows-integration', 'network-integration'):
    requirements = os.path.join(data_context().content.integration_path, 'requirements.txt')

    if os.path.exists(requirements) and os.path.getsize(requirements):
        options = ['-r', requirements]

    requirements = os.path.join(data_context().content.integration_path, '%s.requirements.txt' % command)

    if os.path.exists(requirements) and os.path.getsize(requirements):
        options = ['-r', requirements]

"
-------------------------------------------------------------------------
"Recom
PRs: 62181, 62186"
-------------------------------------------------------------------------
=========================================================================
"""""""delimiter is for separate stats that come back, NOT for kv
"
-------------------------------------------------------------------------
"```python
         separation = """"""
         if node is None:  # If no node passed, use the first one (local)
             node = self._nodes[0]
```"
-------------------------------------------------------------------------
"""""""delimiter is for separate stats that come back, NOT for kv
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62173"
-------------------------------------------------------------------------
=========================================================================
"thankfully if it doesn't, we dont need this on builds >=4.3""""""
"
-------------------------------------------------------------------------
"```python
class Migrations:
    def _update_cluster_namespace_list(self):
        """""" make a unique list of namespaces
        TODO: does this work on a rolling namespace add/deletion?
        self._namespaces = set()
        for node in self._nodes:
            namespaces = self._info_cmd_helper('namespaces', node)
            # thankfully if it doesn't, we dont need this on builds >=4.3
        """"""
```"
-------------------------------------------------------------------------
"thankfully if it doesn't, we dont need this on builds >=4.3""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62173"
-------------------------------------------------------------------------
=========================================================================
"minimum cluster size specified in their statistics output""""""
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import

class Migrations:

    def _is_min_cluster_size(self):
        """"""checks that all nodes in the cluster are returning the 
        sizes = set()
        for node in self._cluster_statistics:
            sizes.add(int(self._cluster_statistics[node]['cluster_size']))
```"
-------------------------------------------------------------------------
"minimum cluster size specified in their statistics output""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62173"
-------------------------------------------------------------------------
=========================================================================
"# please notice the credentials must be added to the 'admin' database because the 'local' database is not synchronized and can't receive user credentials
"
-------------------------------------------------------------------------
"```yaml
- mongodb_user:
    state: present
    username: oplog_reader
    password: oplog_reader_password
    auth_database: admin
    database: local
    roles: read
```"
-------------------------------------------------------------------------
"# please notice the credentials must be added to the 'admin' database because the 'local' database is not synchronized and can't receive user credentials
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62173"
-------------------------------------------------------------------------
=========================================================================
"- If greater than 0, ProxySQL will regularly monitor replication lag. If
"
-------------------------------------------------------------------------
"```python
from __future__ import division
from ansible.module_utils.basic import ansible
from ansible.module_utils.mysql import AnsibleMySqlParameter, MySQLReplicationHostgroups

if options.is > 0:
    ProxySQL will regularly monitor replication lag.
```"
-------------------------------------------------------------------------
"- If greater than 0, ProxySQL will regularly monitor replication lag. If
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62173"
-------------------------------------------------------------------------
=========================================================================
"description: Returns the mysql variable supplied with it's associated value.
"
-------------------------------------------------------------------------
"RETURN = '''
 stdout:
     returned: Returns the mysql variable supplied with its associated value.
     type: dict
'''"
-------------------------------------------------------------------------
"description: Returns the mysql variable supplied with it's associated value.
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62173"
-------------------------------------------------------------------------
=========================================================================
"- Text field that can be used for any purposes defined by the user.
"
-------------------------------------------------------------------------
"```python
options:
  text_field:
    required: True
    description: ""Text field that can be used for any purposes defined by the user.""
```"
-------------------------------------------------------------------------
"- Text field that can be used for any purposes defined by the user.
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62173"
-------------------------------------------------------------------------
=========================================================================
"""""""delimiter is for separate stats that come back, NOT for kv
"
-------------------------------------------------------------------------
"```python
def _info_cmd_helper(self, cmd, node=None, delimiter=';'):
    separation = """"""
    if node is None:  # If no node passed, use the first one (local)
        node = self._nodes[0]
```"
-------------------------------------------------------------------------
"""""""delimiter is for separate stats that come back, NOT for kv
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62172"
-------------------------------------------------------------------------
=========================================================================
"thankfully if it doesn't, we dont need this on builds >=4.3""""""
"
-------------------------------------------------------------------------
"```python
class Migrations:
    def _update_cluster_namespace_list(self):
        """""" make a unique list of namespaces
        TODO: does this work on a rolling namespace add/deletion?
        self._namespaces = set()
        for node in self._nodes:
            namespaces = self._info_cmd_helper('namespaces', node)
            if len(namespaces) >= 4.3:
                # This functionality is not needed for builds >= 4.3
                return
```"
-------------------------------------------------------------------------
"thankfully if it doesn't, we dont need this on builds >=4.3""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62172"
-------------------------------------------------------------------------
=========================================================================
"minimum cluster size specified in their statistics output""""""
"
-------------------------------------------------------------------------
"```python
from __future__ import division
import ansible.module_utils._text as _text
from ansible.module_utils.basic import AnsibleModule
import ansible.module_utils.mysql as mysql
import ansible.module_utils.mongodb as mongodb
import ansible.module_utils.postgresql as postgresql

class Migrations:

    def _is_min_cluster_size(self):
        """"""checks that all nodes in the cluster are returning the
        sizes = set()
        for node in self._cluster_statistics:
            sizes.add(int(self._cluster_statistics[node]['cluster_size']))
```"
-------------------------------------------------------------------------
"minimum cluster size specified in their statistics output""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62172"
-------------------------------------------------------------------------
=========================================================================
"# please notice the credentials must be added to the 'admin' database because the 'local' database is not synchronized and can't receive user credentials
"
-------------------------------------------------------------------------
"```python
     state: present
 
 # add a user 'oplog_reader' with read only access to the 'local' database on the replica_set 'belcher'. This is useful for oplog access (MONGO_OPLOG_URL).
 # To login with such user, the connection string should be MONGO_OPLOG_URL=""mongodb://oplog_reader:oplog_reader_password@server1,server2/local?authSource=admin""
 # This syntax requires mongodb 2.6+ and pymongo 2.5+
 - mongodb_user:
```"
-------------------------------------------------------------------------
"# please notice the credentials must be added to the 'admin' database because the 'local' database is not synchronized and can't receive user credentials
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62172"
-------------------------------------------------------------------------
=========================================================================
"- If greater than 0, ProxySQL will regularly monitor replication lag. If
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.basic import AnsibleModule

def get_repl_group_config():
    pass

def When():
    pass

def delete_repl_group():
    pass

if options['max_replication_lag'] > 0:
    ProxySQL will regularly monitor replication lag.
```"
-------------------------------------------------------------------------
"- If greater than 0, ProxySQL will regularly monitor replication lag. If
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62172"
-------------------------------------------------------------------------
=========================================================================
"description: Returns the mysql variable supplied with it's associated value.
"
-------------------------------------------------------------------------
"RETURN = '''
stdout:
    description: Returns the mysql variable supplied with it's associated value.
    type: dict
'''"
-------------------------------------------------------------------------
"description: Returns the mysql variable supplied with it's associated value.
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62172"
-------------------------------------------------------------------------
=========================================================================
"- Text field that can be used for any purposes defined by the user.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, division, print_function

from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.mysql import MySQLReplicationHostgroups

def get_repl_group_config():
    pass

class When:

    def __init__(self, state):
        self.state = state

def delete_repl_group():
    pass
```"
-------------------------------------------------------------------------
"- Text field that can be used for any purposes defined by the user.
"
-------------------------------------------------------------------------
"Recom
PRs: 62125, 62172"
-------------------------------------------------------------------------
=========================================================================
"- In case an error occurred during processing, this contains information about the error.
"
-------------------------------------------------------------------------
Returned when an error occurred.
-------------------------------------------------------------------------
"- In case an error occurred during processing, this contains information about the error.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"Add or update the given authorization in the global authorizations list.
"
-------------------------------------------------------------------------
"```python
class ACMEClient(object):

    def _add_or_update_auth(self, identifier_type, identifier, auth):
        '''
        Add or update the given authorization in the global authorizations list.
        '''
```"
-------------------------------------------------------------------------
"Add or update the given authorization in the global authorizations list.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# Standardized error from draft 14 on (https://tools.ietf.org/html/rfc8555#section-7.6)
"
-------------------------------------------------------------------------
"```python
def main():
    result, info = account.send_signed_request(endpoint, payload)
    
    if info['status'] != 200:
        already_revoked = False
        
        if result.get('type') == 'urn:ietf:params:acme:error:alreadyRevoked':
            already_revoked = True
        else:
            # Standardized error from draft 14 on (https://tools.ietf.org/html/rfc8555#section-7.6)
```"
-------------------------------------------------------------------------
"# Standardized error from draft 14 on (https://tools.ietf.org/html/rfc8555#section-7.6)
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"''' Add new key to given 'device'; authentication done using 'keyfile'
"
-------------------------------------------------------------------------
"```python
    def run_luks_add_key(self, device, keyfile, new_keyfile):
        '''Add new key to given 'device'; authentication done using 'keyfile'
        Raises ValueError when command fails
        '''
        result = self._run_command([self._cryptsetup_bin, 'luksAddKey', device, keyfile, new_keyfile],
                                   ', '.join(map(str, result.values())))
        if result[RETURN_CODE] != 0:
            raise ValueError(""Failed to add new key to device '{}': {}"".format(device, result[STDERR]))
```"
-------------------------------------------------------------------------
"''' Add new key to given 'device'; authentication done using 'keyfile'
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# This function is for backwards compatibility only because .total_seconds() is new in python2.7
"
-------------------------------------------------------------------------
"```python
class Certificate(object):

    def is_same_datetime(self, datetime_one, datetime_two):

        def timedelta_total_seconds(time_delta):
            return (time_delta.microseconds + 0.0 + (time_delta.seconds + time_delta.days * 24 * 3600) * 10 ** 6) / 10 ** 6
        # This function is for backwards compatibility only because .total_seconds() is new in python2.7
```  "
-------------------------------------------------------------------------
"# This function is for backwards compatibility only because .total_seconds() is new in python2.7
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- name: Force regenerate an OpenSSL Certificate Signing Request
"
-------------------------------------------------------------------------
- name: Force regenerate an OpenSSL Certificate Signing Request
-------------------------------------------------------------------------
"- name: Force regenerate an OpenSSL Certificate Signing Request
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# apparently openssl returns 'IP address' not 'IP' as specifier when converting the subjectAltName to string
"
-------------------------------------------------------------------------
"```python
class CertificateSigningRequestInfoPyOpenSSL(CertificateSigningRequestInfo):
    return None, False

    def _normalize_san(self, san):
        if san.startswith('IP Address:'):
            san = 'IP Address' + san[len('IP Address:'):]
```"
-------------------------------------------------------------------------
"# apparently openssl returns 'IP address' not 'IP' as specifier when converting the subjectAltName to string
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# This check is required because pyOpenSSL will not return a friendly name
"
-------------------------------------------------------------------------
"```python
# This check is required because pyOpenSSL will not return a friendly name
```"
-------------------------------------------------------------------------
"# This check is required because pyOpenSSL will not return a friendly name
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# Escape sequences like '\n' need to be handled in Ansible 1.x
"
-------------------------------------------------------------------------
"```python
def main():
    marker0 = re.sub(b(r'{mark}'), b(params['marker_begin']), marker)
    marker1 = re.sub(b(r'{mark}'), b(params['marker_end']), marker)
    if present and block:
        if module.ansible_version.startswith('1.'):
            block = re.sub(r'\\n', r' ', block)
        blocklines = [marker0] + block.splitlines() + [marker1]
```"
-------------------------------------------------------------------------
"# Escape sequences like '\n' need to be handled in Ansible 1.x
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# the value of follow and the symlink existence.
"
-------------------------------------------------------------------------
"def ensure_symlink(path, src, follow, force, timestamps):
     # Now that we might have created the symlink, get the arguments.
     # We need to do it now so we can properly follow the symlink if needed
     # because load_file_common_arguments sets 'path' according
     file_args = module.load_file_common_arguments(module.params)
 
     # Whenever we create a link to a nonexistent target we know that the nonexistent target
     # the value of follow and the symlink existence."
-------------------------------------------------------------------------
"# the value of follow and the symlink existence.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- link_destination is subject to the same limitations as the underlying rsync daemon. Hard links are only preserved if the relative subtrees
"
-------------------------------------------------------------------------
- The `link_destination` is subject to the same limitations as the underlying rsync daemon. Hard links are only preserved if the relative subtrees.
-------------------------------------------------------------------------
"- link_destination is subject to the same limitations as the underlying rsync daemon. Hard links are only preserved if the relative subtrees
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# In case of namespaces, like in below XML, they have to be explicitly stated.
"
-------------------------------------------------------------------------
"```python
EXAMPLES = r'''
     xpath: /business/website
     children: []
 
 #
 # <foo xmlns=""http://x.test"" xmlns:attr=""http://z.test"">
 #   <bar>
In case of namespaces, like in below XML, they have to be explicitly stated.
```"
-------------------------------------------------------------------------
"# In case of namespaces, like in below XML, they have to be explicitly stated.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# TODO: Implement a more robust check to check for child namespaces' existence
"
-------------------------------------------------------------------------
"```python
def set_target_inner(module, tree, xpath, namespaces, attribute, value):
    except Exception as e:
        missing_namespace = """"
        # NOTE: This checks only the namespaces defined in root element!
        if tree.getroot().nsmap and "":"" not in xpath:
            missing_namespace = ""XML document has namespace(s) defined, but no namespace prefix(es) used in xpath!\n""
        module.fail_json(msg=""%sXpath %s causes a failure: %s\n  -- tree is %s"" %
```"
-------------------------------------------------------------------------
"# TODO: Implement a more robust check to check for child namespaces' existence
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- SSL mode for C(postgres) datasource type.
"
-------------------------------------------------------------------------
"```yaml
options:
  default: second
sslmode: 
  description: SSL mode for C(postgres) datasource type.
  choices: [ disable, require, verify-ca, verify-full ]
trends:
  required: false
```"
-------------------------------------------------------------------------
"- SSL mode for C(postgres) datasource type.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- The description contains extra metadata about a particular annotation
"
-------------------------------------------------------------------------
"```yaml
options:
  required: false
  description:
    description: The description contains extra metadata about a particular annotation
    required: false
start_time:
```"
-------------------------------------------------------------------------
"- The description contains extra metadata about a particular annotation
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"choices: ['collector', 'host', 'datasource', 'hostgroup']
"
-------------------------------------------------------------------------
"```yaml
options:
  NOTE: ""Host and Hostgroup tasks should always be performed via delegate_to: localhost. There are no benefits to running these tasks on the remote host and doing so will typically cause problems.""
  required: true
action:
  description:
    - ""The action you wish to perform on target.""
  choices:
    - ""collector""
    - ""host""
    - ""datasource""
    - ""hostgroup""
```  "
-------------------------------------------------------------------------
"choices: ['collector', 'host', 'datasource', 'hostgroup']
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"""""""Idempotent function to create if missing,
"
-------------------------------------------------------------------------
"```python
# Idempotent function to create if missing, update if changed, or skip
self.module.debug(""Running Host.create..."")
```"
-------------------------------------------------------------------------
"""""""Idempotent function to create if missing,
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"""""""Initializer for the LogicMonitor host object""""""
"
-------------------------------------------------------------------------
"```python
""""""Initializer for the LogicMonitor Host object""""""
```"
-------------------------------------------------------------------------
"""""""Initializer for the LogicMonitor host object""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"""""""Initializer for the LogicMonitor host object""""""
"
-------------------------------------------------------------------------
"""""""Initializer for the LogicMonitor hostgroup object"""""""
-------------------------------------------------------------------------
"""""""Initializer for the LogicMonitor host object""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- Besides the above options, this is usually either the name
"
-------------------------------------------------------------------------
"```python
Current context: options:
                     - When I(type) is set to C(trigger_severity), the choices
                       are (case-insensitive) C(not classified), C(information), C(warning), C(average), C(high), C(disaster)
                       irrespective of user-visible names being changed in Zabbix. Defaults to C(not classified) if omitted.
             operator:
                 description: 
Required dependency: 
Original metadata: Backport of 62135: fix typos in modules
--(cherry picked from commit 5eb5f740838d447287ed49533c76864247f731a7)##### SUMMARYBackport of #62135: fix typos in modules##### ISSUE TYPE- Docs Pull Request
```"
-------------------------------------------------------------------------
"- Besides the above options, this is usually either the name
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"""""""Construct parameters.
"
-------------------------------------------------------------------------
"```python
     def _construct_parameters(self, **kwargs):
         pass
```"
-------------------------------------------------------------------------
"""""""Construct parameters.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"d2: second dictionary to compare
"
-------------------------------------------------------------------------
"```python
def compare_dictionaries(d1, d2, diff_dict):
     Used in recursion with compare_lists() function.
     Args:
         d1: first dictionary to compare
         d2: second dictionary to compare
         diff_dict: dictionary to store the difference
 
     Returns:
```
"
-------------------------------------------------------------------------
"d2: second dictionary to compare
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- List of host groups to add template to when template is created.
"
-------------------------------------------------------------------------
"Current context:
```yaml
    template_groups:
        description:
            - Replaces the current host groups the template belongs to if the template is already present.
            - Required when creating a new template with C(state=present) and I(template_name) is used.
              Not required when updating an existing template.
```

Updated context:
```yaml
    template_groups:
        description:
            - List of host groups to add template to when template is created.
```
"
-------------------------------------------------------------------------
"- List of host groups to add template to when template is created.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"template_json - JSON structures are compared as deep sorted dictionaries,
"
-------------------------------------------------------------------------
"```python
class Template(object):
    def __init__(self, template_macros, template_content, template_type, template_json):
        """"""Compares template parameters to already existing values if any are found.

        template_xml - XML structures are compared as strings, but filtered and formatted first,
        template_json - JSON structures are compared as deep sorted dictionaries,
        If none above is used, all the other arguments are compared to their existing counterparts
        retrieved from Zabbix API.""""""
```"
-------------------------------------------------------------------------
"template_json - JSON structures are compared as deep sorted dictionaries,
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# Compare JSON objects as deep sorted python dictionaries
"
-------------------------------------------------------------------------
"```python
import json

class Template(object):
    return changed

    existing_template = self.dump_template(template_ids, template_type='json')
    if template_content is not None and template_type == 'json':
        parsed_template_json = self.load_json_template(template_content)
        if json.dumps(parsed_template_json, sort_keys=True) == json.dumps(existing_template, sort_keys=True):
```"
-------------------------------------------------------------------------
"# Compare JSON objects as deep sorted python dictionaries
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# Filter new lines and indentation
"
-------------------------------------------------------------------------
"```python
class Template(object):
    if element.text is None and len(list(element)) == 0:
        template.remove(element)

xml_root_text = list(line.strip() for line in ET.tostring(parsed_xml_root).split('\n'))
return ''.join(xml_root_text)
```  "
-------------------------------------------------------------------------
"# Filter new lines and indentation
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- Can prefix with ""-"" or """" to change descending or ascending sort order.
"
-------------------------------------------------------------------------
"Current context: options:
     order_by:
       description:
       - Field to sort the results on. Can prefix with ""-"" or """" to change descending or ascending sort order.
       type: str
       default: ""-created_on""
       required: false"
-------------------------------------------------------------------------
"- Can prefix with ""-"" or """" to change descending or ascending sort order.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- The directory to execute the bundler commands from. This directory
"
-------------------------------------------------------------------------
The directory from which to execute the bundler commands.
-------------------------------------------------------------------------
"- The directory to execute the bundler commands from. This directory
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"These gems will be independent from the global installed ones.
"
-------------------------------------------------------------------------
"options:
  install_dir:
    description: Install the gems into a specific directory, independent from the global ones.
    required: false
    version_added: ""2.6"""
-------------------------------------------------------------------------
"These gems will be independent from the global installed ones.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# This is not set in AnsibleModule() because the following shouldn't happen
"
-------------------------------------------------------------------------
"```python
# This is not set in DnfModule() because the following shouldn't happen
```"
-------------------------------------------------------------------------
"# This is not set in AnsibleModule() because the following shouldn't happen
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- When supplying a reverse DNS name, you can use the I(remote) option to specify on what remote
"
-------------------------------------------------------------------------
"- When supplying a reverse DNS name, you can use the I(remote) option to specify on what remote."
-------------------------------------------------------------------------
"- When supplying a reverse DNS name, you can use the I(remote) option to specify on what remote
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- This option controls how the module queries the package managers on the system.
"
-------------------------------------------------------------------------
This option controls how the module queries the package managers on the system.
-------------------------------------------------------------------------
"- This option controls how the module queries the package managers on the system.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"return False, ""database is up-to-date""
"
-------------------------------------------------------------------------
"```python
def update_package_db(module):
    if rc == 0:
        if re.search('database for.*is up-to-date\n$', out):
            return False, ""database is up-to-date""
        else:
            return True, ""updated repository database""
    else:
        return False, ""database is up-to-date""
```"
-------------------------------------------------------------------------
"return False, ""database is up-to-date""
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=""Unable to establish session with Satellite server: %s "" % to_text(e))
module.fail_json(msg=""Failed to establish session with Satellite server."")
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=""Failed to establish session with Satellite server."")
```"
-------------------------------------------------------------------------
"module.fail_json(msg=""Unable to establish session with Satellite server: %s "" % to_text(e))
module.fail_json(msg=""Failed to establish session with Satellite server."")
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# (basically anything that uses self.api requires username/password) but it doesn't
"
-------------------------------------------------------------------------
"```
# (basically anything that uses self.api requires username/password) but it doesn't
# just username/password can be used for unregister
```"
-------------------------------------------------------------------------
"# (basically anything that uses self.api requires username/password) but it doesn't
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# Execute subscription-manager with arguments and manage common errors
"
-------------------------------------------------------------------------
"```python
def run_subscription_manager(module, arguments):
    rhsm_bin = module.get_bin_path('subscription-manager')
    if not rhsm_bin:
        module.fail_json(msg='The executable file subscription-manager was not found in PATH')
```"
-------------------------------------------------------------------------
"# Execute subscription-manager with arguments and manage common errors
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- Confinement policy. The classic confinement allows a snap to have
"
-------------------------------------------------------------------------
"Confinement policy. The classic confinement allows a snap to have the same level of access to the system as ""classic"" packages, like those managed by APT. This option corresponds to the --classic argument. This option can only be specified if there is a single snap in the task."
-------------------------------------------------------------------------
"- Confinement policy. The classic confinement allows a snap to have
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- The manifest contains information about the bundles at certain version of the OS.
"
-------------------------------------------------------------------------
The manifest contains information about the bundles at a certain version of the OS.
-------------------------------------------------------------------------
"- The manifest contains information about the bundles at certain version of the OS.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# NOTE: This seems unintuitive, but it mirrors yum's CLI behavior
"
-------------------------------------------------------------------------
# NOTE: This mirrors yum's CLI behavior
-------------------------------------------------------------------------
"# NOTE: This seems unintuitive, but it mirrors yum's CLI behavior
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# key was never accepted, querying this repo will throw an
"
-------------------------------------------------------------------------
"```python
try:
    pkgs = my.returnPackagesByDep(req_spec) + my.returnInstalledPackagesByDep(req_spec)
except Exception as e:
    # If a repo with `repo_gpgcheck=1` is added and the repo GPG
    # error: 'repomd.xml signature could not be verified'. In that
    # situation we need to run `yum -y makecache` which will accept
    # the key and try again.
```"
-------------------------------------------------------------------------
"# key was never accepted, querying this repo will throw an
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# case for two same envr but different archs like x86_64 and i686
"
-------------------------------------------------------------------------
"# Case for two same envr but different archs like x86_64 and i686
(name, ver, rel, epoch, arch) = splitFilename(envra)
installed_pkgs = self.is_installed(repoq, name)

if len(installed_pkgs) == 2:
    (cur_name0, cur_ver0, cur_rel0, cur_epoch0, cur_arch0) = splitFilename(installed_pkgs[0])
    (cur_name1, cur_ver1, cur_rel1, cur_epoch1, cur_arch1) = splitFilename(installed_pkgs[1])"
-------------------------------------------------------------------------
"# case for two same envr but different archs like x86_64 and i686
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# Return a message so it's obvious to the user why yum failed
"
-------------------------------------------------------------------------
"```python
res['msg'] = ""Package '%s' couldn't be removed!"" % pkg
```"
-------------------------------------------------------------------------
"# Return a message so it's obvious to the user why yum failed
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
""""""" The need of this entire if conditional has to be changed
"
-------------------------------------------------------------------------
"if True:
    self.yum_basecmd.extend(e_cmd)"
-------------------------------------------------------------------------
""""""" The need of this entire if conditional has to be changed
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"details=u""Error occurred while moving : %s""
"
-------------------------------------------------------------------------
"```python
def create_archive(git_path, module, dest, archive, version, repo, result):
    except OSError as e:
        module.fail_json(msg=u""Error occurred while moving : %s"" % to_text(e))
    else:
        # Perform archive from local directory
```"
-------------------------------------------------------------------------
"details=u""Error occurred while moving : %s""
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"@param project Project Object
"
-------------------------------------------------------------------------
"class GitLabHook(object):
         self.hookObject = None
 
     '''
     @param project Project Object"
-------------------------------------------------------------------------
"@param project Project Object
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- When set to true, all variables which are not untouched in the task will be deleted.
"
-------------------------------------------------------------------------
"```yaml
options:
  type: str
purge:
  description: ""When set to true, all variables which are not untouched in the task will be deleted.""
  default: false
  type: bool
vars:
```"
-------------------------------------------------------------------------
"- When set to true, all variables which are not untouched in the task will be deleted.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- Grant admin privileges to the user
"
-------------------------------------------------------------------------
"- Grant admin privileges to the user

```yaml
- name: Grant admin privileges to the user
  become: yes
  isadmin: yes
```"
-------------------------------------------------------------------------
"- Grant admin privileges to the user
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# If the file does not exist the output will be (with rc == 0...):
"
-------------------------------------------------------------------------
"```python
if rc != 0 or (stdout.strip() != path and stdout.count(' =') != 1):
    self.module.fail_json(msg=""Unable to get capabilities of %s"" % path, stdout=stdout.strip(), stderr=stderr)
```"
-------------------------------------------------------------------------
"# If the file does not exist the output will be (with rc == 0...):
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=""You must specify 'name' to insert a new cron variable"")
"
-------------------------------------------------------------------------
"```
module.fail_json(msg=""You must specify 'name' to insert a new cron variable"")
```"
-------------------------------------------------------------------------
"module.fail_json(msg=""You must specify 'name' to insert a new cron variable"")
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# Omit the parent's root in the child's root
"
-------------------------------------------------------------------------
"```python
def get_linux_mounts(module, mntinfo_file=""/proc/self/mountinfo""):
    if len(m['root']) > 1 and mnt['root'].startswith(""/""):
```"
-------------------------------------------------------------------------
"# Omit the parent's root in the child's root
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- name: Disconnect from the cached named target
"
-------------------------------------------------------------------------
- name: Disconnect from the cached named target
-------------------------------------------------------------------------
"- name: Disconnect from the cached named target
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# Second set the original next rule's previous to the new_rule
"
-------------------------------------------------------------------------
next_rule.prev = new_rule
-------------------------------------------------------------------------
"# Second set the original next rule's previous to the new_rule
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# Assuming we didn't fail, create the service
"
-------------------------------------------------------------------------
"# Assuming we didn't fail, create the service."
-------------------------------------------------------------------------
"# Assuming we didn't fail, create the service
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- requests
"
-------------------------------------------------------------------------
"```python
import re
```"
-------------------------------------------------------------------------
"- requests
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- This module should be run with elevated privileges on BSD systems to gather facts like ansible_product_version.
"
-------------------------------------------------------------------------
- This module should be run with elevated privileges on BSD systems to gather facts like ansible_product_version.
-------------------------------------------------------------------------
"- This module should be run with elevated privileges on BSD systems to gather facts like ansible_product_version.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"# get the current sysctl file value
"
-------------------------------------------------------------------------
"```python
# get the current proc fs value
self.proc_value = self.get_token_curr_value(thisname)
```"
-------------------------------------------------------------------------
"# get the current sysctl file value
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- This is useful with badly written init scripts or daemons, which
"
-------------------------------------------------------------------------
"```yaml
options:
  type: bool
  description:
    - Daemonize the module if the service itself is not doing so properly. Useful with badly written init scripts or daemons, which
```"
-------------------------------------------------------------------------
"- This is useful with badly written init scripts or daemons, which
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"returned: always
"
-------------------------------------------------------------------------
"```yaml
ansible_facts:
  sample: username
packages:
  description: List of installed Packages
  type: complex
  contains:
    package:
      description: Package details
      type: complex
      contains:
        returned:
          description: Indication that the package information is always returned
          type: bool
```  "
-------------------------------------------------------------------------
"returned: always
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- name: Ensure the group Cow doesn't exist using the Distinguished Name
"
-------------------------------------------------------------------------
"- name: Ensure the group Cow doesn't exist using the Distinguished Name
  win_domain_group:
    name: CN=Cow,OU=groups,DC=ansible,DC=local
    state: absent"
-------------------------------------------------------------------------
"- name: Ensure the group Cow doesn't exist using the Distinguished Name
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- The patterns restrict the list of files or folders to be returned based on the filenames.
"
-------------------------------------------------------------------------
"```yaml
options:
  description:
    - One or more (powershell or regex) patterns to restrict the list of files or folders based on the filenames.
    - The type of pattern matching is controlled by C(use_regex) option.
    - For a file to be matched it only has to match with one pattern in a list provided.
  type: list
  aliases: [ ""regex"", ""regexp"" ]
```"
-------------------------------------------------------------------------
"- The patterns restrict the list of files or folders to be returned based on the filenames.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- When omitted, the default LAN connection is used.
"
-------------------------------------------------------------------------
"When omitted, the default LAN connection is used."
-------------------------------------------------------------------------
"- When omitted, the default LAN connection is used.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- Will check the existence of the path specified and use the result to
"
-------------------------------------------------------------------------
"```yaml
options:
  version_added: '2.8'
creates_path:
  description: Will check the existence of the path specified and use the result to
  type: path
```"
-------------------------------------------------------------------------
"- Will check the existence of the path specified and use the result to
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"returned: change occurred
"
-------------------------------------------------------------------------
"```
return_code: 
  description: The return code of the package process.
  type: int
  sample: 0
reboot_required:
log:
  sample: Installation completed successfully
```"
-------------------------------------------------------------------------
"returned: change occurred
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- This module is for modifying individual elements of path-like
"
-------------------------------------------------------------------------
- This module is for modifying individual elements of path-like.
-------------------------------------------------------------------------
"- This module is for modifying individual elements of path-like
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- Accepts multiple comma separated tags.
"
-------------------------------------------------------------------------
"```yaml
options:
  tags:
    description: Runs only tests in Describe blocks with specified Tags values.
    type: list
    elements: str
    version_added: '2.9'
```"
-------------------------------------------------------------------------
"- Accepts multiple comma separated tags.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- Optional description of the resource authorization policy.
"
-------------------------------------------------------------------------
"```yaml
options:
  default: present
description:
  description: ""Optional description of the resource authorization policy.""
  type: str
user_groups:
  description: 
```"
-------------------------------------------------------------------------
"- Optional description of the resource authorization policy.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"description: Output interpreted into a concise message.
"
-------------------------------------------------------------------------
 description: Output message extracted.
-------------------------------------------------------------------------
"description: Output interpreted into a concise message.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- Full path to a windows format text file containing the text to be spoken.
"
-------------------------------------------------------------------------
"```yaml
options:
  type: str
msg_file:
  description:
    - Full path to a Windows format text file containing the text to be spoken.
  type: path
```"
-------------------------------------------------------------------------
"- Full path to a windows format text file containing the text to be spoken.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"- Whether to update the password even when not other changes have occurred.
"
-------------------------------------------------------------------------
"```yaml
options:
  version_added: '2.4'
  update_password:
    description:
      - Whether to update the password even when no other changes have occurred.
    type: bool
    default: yes
```"
-------------------------------------------------------------------------
"- Whether to update the password even when not other changes have occurred.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"description: Whether the task will use the unified scheduling engine.
description: Whether the task is volatile.
"
-------------------------------------------------------------------------
"settings:
  use_unified_scheduling_engine:
    type: bool
    sample: false
  volatile:
    type: bool
    sample: false"
-------------------------------------------------------------------------
"description: Whether the task will use the unified scheduling engine.
description: Whether the task is volatile.
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"returned: always
"
-------------------------------------------------------------------------
"RETURN = r'''
 returned:
     description: Represents whether the function call was successful or not.
     type: str
     sample: always
'''"
-------------------------------------------------------------------------
"returned: always
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"returned: always
returned: always
returned: always
"
-------------------------------------------------------------------------
"```yaml
returned: always
```"
-------------------------------------------------------------------------
"returned: always
returned: always
returned: always
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"C(absent) will block execution until the process no longer exists,
"
-------------------------------------------------------------------------
"```python
options:
  description:
    - When checking for a running process C(present) will block execution
      until the process exists, or until the timeout has been reached.
    - When waiting for C(present), the module will return changed only if
      the process was not present on the initial check but became present on
      the final check.
    - C(absent) will block execution until the process no longer exists.
```"
-------------------------------------------------------------------------
"C(absent) will block execution until the process no longer exists,
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"description: The name of the server used to authenticate the owner of the
"
-------------------------------------------------------------------------
"```python
logon_server:
    description: The name of the server used to authenticate the owner
```"
-------------------------------------------------------------------------
"description: The name of the server used to authenticate the owner of the
"
-------------------------------------------------------------------------
"Recom
PRs: 62135, 62169"
-------------------------------------------------------------------------
=========================================================================
"and return the COPY query that actually has not been executed.
"
-------------------------------------------------------------------------
"```python
from __future__ import print_function
import psycopg2.extras
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.postgres import postgres_common_argument_spec, connect_to_db, exec_sql

def main():
    argument_spec = postgres_common_argument_spec()

    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
    )

    src_table = module.params.get('src_table')
    dst_table = module.params.get('dst_table')
    check_mode = module.check_mode

    if check_mode:
        exec_sql(""SELECT 1 FROM %s"" % src_table)
        return ""COPY FROM %s TO %s;"" % (src_table, dst_table)

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"and return the COPY query that actually has not been executed.
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"the database from being removed. In that case, you can specify I(cascade=yes) to
database system, you can specify I(fail_on_drop=no) to ignore the error.
Be careful when marking a language as trusted since this could be a potential
"
-------------------------------------------------------------------------
"When removing a language from the database system, you can specify `(cascade=yes)` to prevent dependencies from causing the removal to fail. If you want to ignore the error and continue with the deletion, you can specify `(fail_on_drop=no)`. Exercise caution when marking a language as trusted as it could pose a security risk."
-------------------------------------------------------------------------
"the database from being removed. In that case, you can specify I(cascade=yes) to
database system, you can specify I(fail_on_drop=no) to ignore the error.
Be careful when marking a language as trusted since this could be a potential
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"- When dependencies block the removal, consider using I(cascade).
- Only used when I(state=absent).
- The specified I(session_role) must be a role that the current I(login_user) is a member of.
- Permissions checking for SQL commands is carried out as though the I(session_role) were the one that had logged in originally.
"
-------------------------------------------------------------------------
"```python
options:
  description:
    - If C(yes), fail when removing a language. Otherwise just log and continue.
    - In some cases, it is not possible to remove a language (used by the db-system).
    type: bool
    default: 'yes'
  cascade:
    description:
    - When dependencies block the removal, consider using I(cascade).
    - Only used when I(state=absent).
    type: bool
    default: 'no'
  session_role:
    version_added: '2.8'
    description:
    - Switch to session_role after connecting.
    - The specified I(session_role) must be a role that the current I(login_user) is a member of.
    type: str
  state:
    description:
    - Required dependency: __future__, psycopg2.extras, ansible.module_utils.basic, ansible.module_utils.postgres
    - When dropping a language, also delete objects that depend on this language.
    type: bool
    default: 'yes'
```  "
-------------------------------------------------------------------------
"- When dependencies block the removal, consider using I(cascade).
- Only used when I(state=absent).
- The specified I(session_role) must be a role that the current I(login_user) is a member of.
- Permissions checking for SQL commands is carried out as though the I(session_role) were the one that had logged in originally.
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"- See U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.
"
-------------------------------------------------------------------------
See [PostgreSQL SSL documentation](https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.
-------------------------------------------------------------------------
"- See U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"- Groups are PostgreSQL roles usually without LOGIN privilege.
"
-------------------------------------------------------------------------
"updated_context = ""short_description: Add or remove PostgreSQL roles from groups\n description: - Adds or removes PostgreSQL roles from groups (other roles).\n - Users are roles with login privilege.\n - Groups are PostgreSQL roles usually without LOGIN privilege.\n - Common use case:\n - 1) add a new group (groups) by M(postgresql_user) module with I(role_attr_flags=NOLOGIN)\n - 2) grant them desired privileges by M(postgresql_privs) module"""
-------------------------------------------------------------------------
"- Groups are PostgreSQL roles usually without LOGIN privilege.
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"- Pay attention - it reassigns all objects owned by this role(s) in the I(db)!
"
-------------------------------------------------------------------------
"```python
# Pay attention - reassigns all objects owned by this role(s) in the db!
```"
-------------------------------------------------------------------------
"- Pay attention - it reassigns all objects owned by this role(s) in the I(db)!
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"cursor (psycopg2.connect.cursor): Cursor object for interaction with the database.
"
-------------------------------------------------------------------------
"class PgOwnership(object):

    Arguments:
        module (AnsibleModule): Object of Ansible module class.
        role (str): Role name to set as a new owner of objects.

    Important:
        Required dependency: __future__, psycopg2.extras, ansible.module_utils.basic, ansible.module_utils.postgres

        cursor (psycopg2.connect.cursor): Cursor object for interaction with the database."
-------------------------------------------------------------------------
"cursor (psycopg2.connect.cursor): Cursor object for interaction with the database.
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"""""""Return True if role exists, otherwise return False.""""""
"
-------------------------------------------------------------------------
"```python
""""""Return True if role exists, otherwise return False.""""""
from __future__ import print_function
import psycopg2.extras
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.postgres import exec_sql
```"
-------------------------------------------------------------------------
"""""""Return True if role exists, otherwise return False.""""""
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"# (at least that are handled by this pg_hba) since this might also be groups with multiple
# users, this might be totally off, but at least it is some info...
"
-------------------------------------------------------------------------
"# (at least that are handled by this pg_hba) since this might also be groups with multiple
# users, this might be totally off, but at least it is some info..."
-------------------------------------------------------------------------
"# (at least that are handled by this pg_hba) since this might also be groups with multiple
# users, this might be totally off, but at least it is some info...
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"# Read values from line if parsed
"
-------------------------------------------------------------------------
"if line:
    self.fromline(line)"
-------------------------------------------------------------------------
"# Read values from line if parsed
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"# furthermore ipv4 with bad netmask throws 'Rule {} doesn't seem to be an ip, but has a
"
-------------------------------------------------------------------------
"```python
from __future__ import print_function, absolute_import
import psycopg2.extras
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.postgres import PgHbaRule
import ipaddress

class PgHbaRule(dict):

    raise PgHbaValueError('Mask was specified, but source ""{0}"" '
                          'is no valid ip'.format(self['src']))

    # ipaddress module cannot work with ipv6 netmask, so lets convert it to prefixlen
    # mask error that doesn't seem to describe what is going on.
    try:
        mask_as_ip = ipaddress.ip_address(u'{0}'.format(self['mask']))
    except:
        raise PgHbaValueError('Rule {} doesn\'t seem to be an ip, but has a'.format(self.__repr__()))
```"
-------------------------------------------------------------------------
"# furthermore ipv4 with bad netmask throws 'Rule {} doesn't seem to be an ip, but has a
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"# suffix matching (domain name), let's assume a very large scale
stname, let's assume only one host matches, which is
"
-------------------------------------------------------------------------
"```python
# suffix matching (domain name), let's assume a very large scale
# For now, let's assume IPv4/24 or IPv6/96 (both have weight 96).
return 96

if sourceobj[0] == '.':
    # and therefore a very low weight IPv4/16 or IPv6/64 (both have weight 64).
    return 64

# IPv4/32 or IPv6/128 (both have weight 128)
return 128

raise PgHbaValueError('Cannot deduct the source weight of this source {1}'.format(sourceobj))
```"
-------------------------------------------------------------------------
"# suffix matching (domain name), let's assume a very large scale
stname, let's assume only one host matches, which is
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"documentation
"
-------------------------------------------------------------------------
"```python
#!/usr/bin/python

# -*- coding: utf-8 -*-
# SPDX-License-Identifier: GPL-3.0-or-later

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'community'
}

DOCUMENTATION = '''
---
module: pg_slot
short_description: PostgreSQL replication slot management
description:
    - Manages PostgreSQL physical and logical replication slots.
version_added: ""2.9""
options:
    data_type:
        description:
            - Specifies the data type of the sequence. Valid types are bigint, integer,
              and smallint. bigint is the default. The data type determines the default
              minimum and maximum values of the sequence.
            - For more info see the U(https://www.postgresql.org/docs/current/sql-createsequence.html).
        choices: [ bigint, integer, smallint ]
        required: false
        default: ""bigint""
    slot_name:
        description:
            - Name of the replication slot to manage.
        required: true
        type: str
    state:
        description:
            - Whether the replication slot should be present or absent.
        required: false
        choices: [ present, absent ]
        default: ""present""
    host:
        description:
            - Specifies the database server's address. Use 'localhost' for the local machine.
        required: false
    port:
        description:
            - Database server's port number.
        required: false
        default: 5432
    login_user:
        description:
            - The user to be used for authentication.
        required: false
        default: ""postgres""
...
'''
```"
-------------------------------------------------------------------------
"documentation
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"cursor (cursor) -- cursor object of psycopg2 library
cursor (cursor) -- cursor object of psycopg2 library
"
-------------------------------------------------------------------------
"    Arguments:
        module (AnsibleModule) -- object of AnsibleModule class

    Attributes:
        module (AnsibleModule) -- object of AnsibleModule class
        changed (bool) -- something was changed after execution or not
        executed_queries (list) -- executed queries
        name (str) -- name of the sequence
        cursor (cursor) -- cursor object of psycopg2 library"
-------------------------------------------------------------------------
"cursor (cursor) -- cursor object of psycopg2 library
cursor (cursor) -- cursor object of psycopg2 library
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"# Ensure that the restart of PostgreSQL server must be required for some parameters.
"
-------------------------------------------------------------------------
"```python
from __future__ import print_function, absolute_import
import psycopg2.extras
from ansible.module_utils.basic import *
from ansible.module_utils.postgres import *

# Ensure that the restart of PostgreSQL server must be required for some parameters.
```"
-------------------------------------------------------------------------
"# Ensure that the restart of PostgreSQL server must be required for some parameters.
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"- name: Create logical_one logical slot to the database acme if doesn't exist
"
-------------------------------------------------------------------------
"```python
from __future__ import print_function, absolute_import, division
import psycopg2.extras
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.postgres import postgres_common_argument_spec, connect_to_db
from ansible.module_utils.postgres import exec_sql

def main():
    module = AnsibleModule(
        argument_spec=postgres_common_argument_spec(),
    )

    db_connection, _ = connect_to_db(module)

    exec_sql(
        db_connection,
        module,
        ""CREATE LOGICAL SLOT IF NOT EXISTS logical_one"",
        ""Failed to create logical slot""
    )

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"- name: Create logical_one logical slot to the database acme if doesn't exist
"
-------------------------------------------------------------------------
"Recom
PRs: 62065, 62122"
-------------------------------------------------------------------------
=========================================================================
"cursor (pymysql/mysql-python): Cursor class for interaction with
"
-------------------------------------------------------------------------
"```python
Class method call information from Stable: cursor interaction
```"
-------------------------------------------------------------------------
"cursor (pymysql/mysql-python): Cursor class for interaction with
"
-------------------------------------------------------------------------
"Recom
PRs: 62067, 62121"
-------------------------------------------------------------------------
=========================================================================
"'tests': (
    'output',
),
"
-------------------------------------------------------------------------
"'docs/docsite': (
    '_build',
),
'os': (),
'constants': (),
'__future__': (),
'util': (),"
-------------------------------------------------------------------------
"'tests': (
    'output',
),
"
-------------------------------------------------------------------------
"Recom
PRs: 62084, 62109"
-------------------------------------------------------------------------
=========================================================================
"# This is a helper class to sort the changes in a valid order
# ""Greater than"" means a change has to happen after another one.
# As an example, let's say self is daily (key == 1) and other is weekly (key == 2)
class ChangeHelper:
def __init__(self, old, new):
    self.key = new.key
    self.old = old
    self.new = new

def __gt__(self, other):
    if self.key < other.key:
        # You cannot disable daily if weekly is enabled, so later
        if self.new.enabled < other.old.enabled:
            return True
        # Enabling daily is OK if weekly is disabled
        elif self.new.enabled > other.old.enabled:
            return False
        # Otherwise, decreasing the daily level below the current weekly level has to be done later
        else:
            return self.new.level < other.old.level
    else:
        return not (self.old > self.new)


"
-------------------------------------------------------------------------
"from ansible.module_utils.vmware import PyVmomi
from ansible.module_utils._text import to_native


class VmwareVcenterStatistics(PyVmomi):
    """"""Manage statistics for a vCenter server""""""


class ChangeHelper:
    def __init__(self, old, new):
        self.key = new.key
        self.old = old
        self.new = new

    def __gt__(self, other):
        if self.key < other.key:
            # You cannot disable daily if weekly is enabled, so later
            if self.new.enabled < other.old.enabled:
                return True
            # Enabling daily is OK if weekly is disabled
            elif self.new.enabled > other.old.enabled:
                return False
            # Otherwise, decreasing the daily level below the current weekly level has to be done later
            else:
                return self.new.level < other.old.level
        else:
            return not (self.old > self.new)"
-------------------------------------------------------------------------
"# This is a helper class to sort the changes in a valid order
# ""Greater than"" means a change has to happen after another one.
# As an example, let's say self is daily (key == 1) and other is weekly (key == 2)
class ChangeHelper:
def __init__(self, old, new):
    self.key = new.key
    self.old = old
    self.new = new

def __eq__(self, other):
    return ((self.key, self.new.enabled, self.new.level) ==
            (other.key, other.new.enabled, other.new.level))

def __gt__(self, other):
    if self.key < other.key:
        # You cannot disable daily if weekly is enabled, so later
        if self.new.enabled < other.old.enabled:
            return True
        # Enabling daily is OK if weekly is disabled
        elif self.new.enabled > other.old.enabled:
            return False
        # Otherwise, decreasing the daily level below the current weekly level has to be done later
        else:
            return self.new.level < other.old.level
    else:
        return not (other > self)

def __ge__(self, other):
    return (self > other) or (self == other)

def __lt__(self, other):
    return not (self >= other)

def __le__(self, other):
    return not (self > other)


"
-------------------------------------------------------------------------
"Recom
PRs: 61345, 62088"
-------------------------------------------------------------------------
=========================================================================
"
DAILY_COUNTER = 1
WEEKLY_COUNTER = 2
MONTHLY_COUNTER = 3
YEARLY_COUNTER = 4

"
-------------------------------------------------------------------------
"```python
DAILY_COUNTER = 1
WEEKLY_COUNTER = 2
MONTHLY_COUNTER = 3
YEARLY_COUNTER = 4
```"
-------------------------------------------------------------------------
"
DAILY_COUNTER = 1
WEEKLY_COUNTER = 2
MONTHLY_COUNTER = 3
YEARLY_COUNTER = 4

"
-------------------------------------------------------------------------
"Recom
PRs: 61345, 62088"
-------------------------------------------------------------------------
=========================================================================
"
ChangeHelper(
    historical_interval,
    vim.HistoricalInterval(
        key=DAILY_COUNTER,
        samplingPeriod=past_day_seconds,
        name='Past day',
        length=past_day_save_for_seconds,
        level=past_day_level,
        enabled=past_day_enabled
    )

"
-------------------------------------------------------------------------
"```python
ChangeHelper(
    historical_interval,
    vim.HistoricalInterval(
        key=DAILY_COUNTER,
        samplingPeriod=past_day_seconds,
        name='Past day',
        length=past_day_save_for_seconds,
        level=past_day_level,
        enabled=past_day_enabled,
    )
)
```"
-------------------------------------------------------------------------
"
ChangeHelper(
    historical_interval,
    vim.HistoricalInterval(
        key=DAILY_COUNTER,
        samplingPeriod=past_day_seconds,
        name='Past day',
        length=past_day_save_for_seconds,
        level=past_day_level,
        enabled=past_day_enabled
    )

"
-------------------------------------------------------------------------
"Recom
PRs: 61345, 62088"
-------------------------------------------------------------------------
=========================================================================
"
ChangeHelper(
    historical_interval,
    vim.HistoricalInterval(
        key=WEEKLY_COUNTER,
        samplingPeriod=past_week_seconds,
        name='Past week',
        length=past_week_save_for_seconds,
        level=past_week_level,
        enabled=past_week_enabled
    )

"
-------------------------------------------------------------------------
"change_statistics_list.append(
    historical_interval,
    vim.HistoricalInterval(
        key=WEEKLY_COUNTER,
        samplingPeriod=past_week_seconds,
        name='Past week',
        length=past_week_save_for_seconds,
        level=past_week_level,
        enabled=past_week_enabled
    )
)"
-------------------------------------------------------------------------
"
ChangeHelper(
    historical_interval,
    vim.HistoricalInterval(
        key=WEEKLY_COUNTER,
        samplingPeriod=past_week_seconds,
        name='Past week',
        length=past_week_save_for_seconds,
        level=past_week_level,
        enabled=past_week_enabled
    )

"
-------------------------------------------------------------------------
"Recom
PRs: 61345, 62088"
-------------------------------------------------------------------------
=========================================================================
"
ChangeHelper(
    historical_interval,
    vim.HistoricalInterval(
        key=MONTHLY_COUNTER,
        samplingPeriod=past_month_seconds,
        name='Past month',
        length=past_month_save_for_seconds,
        level=past_month_level,
        enabled=past_month_enabled
    )

"
-------------------------------------------------------------------------
"change_statistics_list.append(
    ChangeHelper(
        historical_interval,
        vim.HistoricalInterval(
            key=MONTHLY_COUNTER,
            samplingPeriod=past_month_seconds,
            name='Past month',
            length=result['past_month_save_for_previous'],
            level=result['past_month_level_previous'],
            enabled=past_month_enabled
        )
    )
)"
-------------------------------------------------------------------------
"
ChangeHelper(
    historical_interval,
    vim.HistoricalInterval(
        key=MONTHLY_COUNTER,
        samplingPeriod=past_month_seconds,
        name='Past month',
        length=past_month_save_for_seconds,
        level=past_month_level,
        enabled=past_month_enabled
    )

"
-------------------------------------------------------------------------
"Recom
PRs: 61345, 62088"
-------------------------------------------------------------------------
=========================================================================
"
ChangeHelper(
    historical_interval,
    vim.HistoricalInterval(
        key=YEARLY_COUNTER,
        samplingPeriod=past_year_seconds,
        name='Past year',
        length=past_year_save_for_seconds,
        level=past_year_level,
        enabled=past_year_enabled
    )
"
-------------------------------------------------------------------------
"```python
ChangeHelper(
    historical_interval,
    vim.HistoricalInterval(
        key=YEARLY_COUNTER,
        samplingPeriod=past_year_seconds,
        name='Past year',
        length=past_year_save_for_seconds,
        level=past_year_level,
        enabled=past_year_enabled
    )
)
```"
-------------------------------------------------------------------------
"
ChangeHelper(
    historical_interval,
    vim.HistoricalInterval(
        key=YEARLY_COUNTER,
        samplingPeriod=past_year_seconds,
        name='Past year',
        length=past_year_save_for_seconds,
        level=past_year_level,
        enabled=past_year_enabled
    )
"
-------------------------------------------------------------------------
"Recom
PRs: 61345, 62088"
-------------------------------------------------------------------------
=========================================================================
"change_statistics_list.sort()
for statistic in change_statistics_list:
    self.update_perf_interval(perf_manager, statistic.new)
"
-------------------------------------------------------------------------
"```python
change_statistics_list.sort()
for statistic in change_statistics_list:
    self.update_perf_interval(perf_manager, statistic.new)
```"
-------------------------------------------------------------------------
"change_statistics_list.sort()
for statistic in change_statistics_list:
    self.update_perf_interval(perf_manager, statistic.new)
"
-------------------------------------------------------------------------
"Recom
PRs: 61345, 62088"
-------------------------------------------------------------------------
=========================================================================
"elif not self.isPublicKeyValid(module, perms_required=False):
"
-------------------------------------------------------------------------
"```python
elif not keypair.isPublicKeyValid(module):
```"
-------------------------------------------------------------------------
"elif not self.isPublicKeyValid(module, perms_required=False):
"
-------------------------------------------------------------------------
"Recom
PRs: 61658, 62037"
-------------------------------------------------------------------------
=========================================================================
"file_args['path'] = file_args['path']  '.pub'
if module.set_fs_attributes_if_different(file_args, False):
    self.changed = True
"
-------------------------------------------------------------------------
"```python
file_args['path'] = file_args['path'] + '.pub'
if module.set_fs_attributes_if_different(file_args, False):
    self.changed = True
```"
-------------------------------------------------------------------------
"file_args['path'] = file_args['path']  '.pub'
if module.set_fs_attributes_if_different(file_args, False):
    self.changed = True
"
-------------------------------------------------------------------------
"Recom
PRs: 61658, 62037"
-------------------------------------------------------------------------
=========================================================================
"def isPublicKeyValid(self, module, perms_required=True):
"
-------------------------------------------------------------------------
"```python
def isPublicKeyValid(self, module):
```"
-------------------------------------------------------------------------
"def isPublicKeyValid(self, module, perms_required=True):
"
-------------------------------------------------------------------------
"Recom
PRs: 61658, 62037"
-------------------------------------------------------------------------
=========================================================================
"def _check_perms(module):
    file_args = module.load_file_common_arguments(module.params)
    file_args['path'] = file_args['path']  '.pub'
    return not module.set_fs_attributes_if_different(file_args, False)

"
-------------------------------------------------------------------------
"```python
def _check_perms(module):
    file_args = module.load_file_common_arguments(module.params)
    file_args['path'] = file_args['path'] + '.pub'
    return not module.set_fs_attributes_if_different(file_args, False)
```"
-------------------------------------------------------------------------
"def _check_perms(module):
    file_args = module.load_file_common_arguments(module.params)
    file_args['path'] = file_args['path']  '.pub'
    return not module.set_fs_attributes_if_different(file_args, False)

"
-------------------------------------------------------------------------
"Recom
PRs: 61658, 62037"
-------------------------------------------------------------------------
=========================================================================
"if not perms_required:
    return _pubkey_valid(pubkey) and _comment_valid()

return _pubkey_valid(pubkey) and _comment_valid() and _check_perms(module)
"
-------------------------------------------------------------------------
"if not perms_required:
    return _pubkey_valid(pubkey) and _comment_valid()

return _pubkey_valid(pubkey) and _comment_valid() and _check_perms(module)"
-------------------------------------------------------------------------
"if not perms_required:
    return _pubkey_valid(pubkey) and _comment_valid()

return _pubkey_valid(pubkey) and _comment_valid() and _check_perms(module)
"
-------------------------------------------------------------------------
"Recom
PRs: 61658, 62037"
-------------------------------------------------------------------------
=========================================================================
"ADMIN_API_VERSION = '1.14'
"
-------------------------------------------------------------------------
"```
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.pure import get_system, purefa_argument_spec

S3_REQUIRED_API_VERSION = '1.16'
LATENCY_REQUIRED_API_VERSION = '1.16'
AC_REQUIRED_API_VERSION = '1.14'
ADMIN_API_VERSION = '1.14'
```"
-------------------------------------------------------------------------
"ADMIN_API_VERSION = '1.14'
"
-------------------------------------------------------------------------
"Recom
PRs: 61925, 62004"
-------------------------------------------------------------------------
=========================================================================
"api_version = array._list_available_rest_versions()
if ADMIN_API_VERSION in api_version:
    admins = array.list_admins()
    for admin in range(0, len(admins)):
        admin_name = admins[admin]['name']
        admin_facts[admin_name] = {
            'type': admins[admin]['type'],
            'role': admins[admin]['role'],
        }
"
-------------------------------------------------------------------------
"```python
api_version = array._list_available_rest_versions()
if ADMIN_API_VERSION in api_version:
    admins = array.list_admins()
    for admin in range(0, len(admins)):
        admin_name = admins[admin]['name']
        admin_facts[admin_name] = {
            'type': admins[admin]['type'],
            'role': admins[admin]['role'],
        }
```"
-------------------------------------------------------------------------
"api_version = array._list_available_rest_versions()
if ADMIN_API_VERSION in api_version:
    admins = array.list_admins()
    for admin in range(0, len(admins)):
        admin_name = admins[admin]['name']
        admin_facts[admin_name] = {
            'type': admins[admin]['type'],
            'role': admins[admin]['role'],
        }
"
-------------------------------------------------------------------------
"Recom
PRs: 61925, 62004"
-------------------------------------------------------------------------
=========================================================================
"ADMIN_API_VERSION = '1.14'
"
-------------------------------------------------------------------------
"```python
ADMIN_API_VERSION = '1.14'
```"
-------------------------------------------------------------------------
"ADMIN_API_VERSION = '1.14'
"
-------------------------------------------------------------------------
"Recom
PRs: 61925, 62004"
-------------------------------------------------------------------------
=========================================================================
"api_version = array._list_available_rest_versions()
if ADMIN_API_VERSION in api_version:
    admins = array.list_admins()
    for admin in range(0, len(admins)):
        admin_name = admins[admin]['name']
        admin_info[admin_name] = {
            'type': admins[admin]['type'],
            'role': admins[admin]['role'],
        }
"
-------------------------------------------------------------------------
"```python
api_version = array._list_available_rest_versions()
if ADMIN_API_VERSION in api_version:
    admin_info = generate_admin_dict(array)
    admins = array.list_admins()
    for admin in range(0, len(admins)):
        admin_name = admins[admin]['name']
        admin_info[admin_name] = {
            'type': admins[admin]['type'],
            'role': admins[admin]['role'],
        }
```"
-------------------------------------------------------------------------
"api_version = array._list_available_rest_versions()
if ADMIN_API_VERSION in api_version:
    admins = array.list_admins()
    for admin in range(0, len(admins)):
        admin_name = admins[admin]['name']
        admin_info[admin_name] = {
            'type': admins[admin]['type'],
            'role': admins[admin]['role'],
        }
"
-------------------------------------------------------------------------
"Recom
PRs: 61925, 62004"
-------------------------------------------------------------------------
=========================================================================
"if cursor_class == 'DictCursor':
"
-------------------------------------------------------------------------
"```python
if cursor_class == 'DictCursor':
    return db_connection.cursor(**{_mysql_cursor_param: mysql_driver.cursors.DictCursor})
else:
    return db_connection.cursor()
```"
-------------------------------------------------------------------------
"if cursor_class == 'DictCursor':
"
-------------------------------------------------------------------------
"Recom
PRs: 61832, 61989"
-------------------------------------------------------------------------
=========================================================================
"cursor = mysql_connect(module, login_user, login_password, config_file,
                       ssl_cert, ssl_key, ssl_ca, None, cursor_class='DictCursor',
"
-------------------------------------------------------------------------
"cursor = ansible.module_utils.mysql.mysql_connect(module, login_user, login_password, config_file,
                       ssl_cert, ssl_key, ssl_ca, None, cursor_class='DictCursor')"
-------------------------------------------------------------------------
"cursor = mysql_connect(module, login_user, login_password, config_file,
                       ssl_cert, ssl_key, ssl_ca, None, cursor_class='DictCursor',
"
-------------------------------------------------------------------------
"Recom
PRs: 61832, 61989"
-------------------------------------------------------------------------
=========================================================================
"try:
    start, end = [int(port) for port in range_or_port.split('-')]
except Exception:
    client.fail('Invalid port range: ""{0}""'.format(range_or_port))
    client.fail('Invalid port range: ""{0}""'.format(range_or_port))
try:
    return [int(range_or_port)]
except Exception:
    client.fail('Invalid port: ""{0}""'.format(range_or_port))
"
-------------------------------------------------------------------------
"```python
try:
    start, end = [int(port) for port in range_or_port.split('-')]
    if end < start:
        return list(range(start, end + 1))
except Exception:
    client.fail('Invalid port range: ""{0}""'.format(range_or_port))

try:
    return [int(range_or_port)]
except Exception:
    client.fail('Invalid port: ""{0}""'.format(range_or_port))
```"
-------------------------------------------------------------------------
"try:
    start, end = [int(port) for port in range_or_port.split('-')]
except Exception:
    client.fail('Invalid port range: ""{0}""'.format(range_or_port))
    client.fail('Invalid port range: ""{0}""'.format(range_or_port))
try:
    return [int(range_or_port)]
except Exception:
    client.fail('Invalid port: ""{0}""'.format(range_or_port))
"
-------------------------------------------------------------------------
"Recom
PRs: 61740, 61974"
-------------------------------------------------------------------------
=========================================================================
"try:
    start, end = [int(port) for port in range_or_port.split('-')]
except Exception:
    client.fail('Invalid port range: ""{0}""'.format(range_or_port))
    client.fail('Invalid port range: ""{0}""'.format(range_or_port))
try:
    return [int(range_or_port)]
except Exception:
    client.fail('Invalid port: ""{0}""'.format(range_or_port))
"
-------------------------------------------------------------------------
"```python
try:
    start, end = [int(port) for port in range_or_port.split('-')]
    if end < start:
        return list(range(start, end + 1))
except Exception:
    client.fail('Invalid port range: ""{0}""'.format(range_or_port))
try:
    return [int(range_or_port)]
except Exception:
    client.fail('Invalid port: ""{0}""'.format(range_or_port))
```"
-------------------------------------------------------------------------
"try:
    start, end = [int(port) for port in range_or_port.split('-')]
except Exception:
    client.fail('Invalid port range: ""{0}""'.format(range_or_port))
    client.fail('Invalid port range: ""{0}""'.format(range_or_port))
try:
    return [int(range_or_port)]
except Exception:
    client.fail('Invalid port: ""{0}""'.format(range_or_port))
"
-------------------------------------------------------------------------
"Recom
PRs: 61740, 61973"
-------------------------------------------------------------------------
=========================================================================
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            service.pull(ignore_pull_failures=False)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error: pull failed with %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"```python
out_redir_name, err_redir_name = make_redirection_tempfiles()
try:
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            service.pull(ignore_pull_failures=False)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name, msg_format=""Error: pull failed with %s"")
    self.client.fail(**fail_reason)
except Exception as exc:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
```"
-------------------------------------------------------------------------
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            service.pull(ignore_pull_failures=False)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error: pull failed with %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"Recom
PRs: 61650, 61972"
-------------------------------------------------------------------------
=========================================================================
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            new_image_id = service.build(pull=self.pull, no_cache=self.nocache)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error: build failed with %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"```python
out_redir_name, err_redir_name = make_redirection_tempfiles()
try:
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            new_image_id = service.build(pull=self.pull, no_cache=self.nocache)
except Exception as exc:
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name, msg_format=""Error: build failed with %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
```"
-------------------------------------------------------------------------
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            new_image_id = service.build(pull=self.pull, no_cache=self.nocache)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error: build failed with %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"Recom
PRs: 61650, 61972"
-------------------------------------------------------------------------
=========================================================================
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            self.project.down(image_type, self.remove_volumes, self.remove_orphans)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error stopping project - %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"```python
out_redir_name, err_redir_name = make_redirection_tempfiles()
try:
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            self.project.down(image_type, self.remove_volumes, self.remove_orphans)
except Exception as exc:
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name, msg_format=""Error stopping project - %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
```"
-------------------------------------------------------------------------
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            self.project.down(image_type, self.remove_volumes, self.remove_orphans)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error stopping project - %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"Recom
PRs: 61650, 61972"
-------------------------------------------------------------------------
=========================================================================
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            service.scale(scale)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error scaling {0} - %s"".format(service.name))
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"```python
out_redir_name, err_redir_name = make_redirection_tempfiles()
with stdout_redirector(out_redir_name):
    with stderr_redirector(err_redir_name):
        service.scale(scale)
try:
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name, msg_format=""Error scaling {0} - %s"".format(service.name))
    self.client.fail(**fail_reason)
except Exception as exc:
    pass
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
```  "
-------------------------------------------------------------------------
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            service.scale(scale)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error scaling {0} - %s"".format(service.name))
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"Recom
PRs: 61650, 61972"
-------------------------------------------------------------------------
=========================================================================
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            service.pull(ignore_pull_failures=False)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error: pull failed with %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"```python
out_redir_name, err_redir_name = make_redirection_tempfiles()
try:
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            service.pull(ignore_pull_failures=False)
except Exception as exc:
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name, msg_format=""Error: pull failed with %s"")
    self.client.fail(**fail_reason)
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
```"
-------------------------------------------------------------------------
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            service.pull(ignore_pull_failures=False)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error: pull failed with %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"Recom
PRs: 61650, 61971"
-------------------------------------------------------------------------
=========================================================================
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            new_image_id = service.build(pull=self.pull, no_cache=self.nocache)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error: build failed with %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"```python
out_redir_name, err_redir_name = make_redirection_tempfiles()
with stdout_redirector(out_redir_name):
    with stderr_redirector(err_redir_name):
        try:
            new_image_id = service.build(pull=self.pull, no_cache=self.nocache)
        except Exception as exc:
            fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                           msg_format=""Error: build failed with %s"")
            self.client.fail(**fail_reason)
        else:
            cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
```"
-------------------------------------------------------------------------
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            new_image_id = service.build(pull=self.pull, no_cache=self.nocache)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error: build failed with %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"Recom
PRs: 61650, 61971"
-------------------------------------------------------------------------
=========================================================================
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            self.project.down(image_type, self.remove_volumes, self.remove_orphans)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error stopping project - %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"```python
out_redir_name, err_redir_name = make_redirection_tempfiles()
try:
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            self.project.down(image_type, self.remove_volumes, self.remove_orphans)
except Exception as exc:
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name, msg_format=""Error stopping project - %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
```"
-------------------------------------------------------------------------
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            self.project.down(image_type, self.remove_volumes, self.remove_orphans)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error stopping project - %s"")
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"Recom
PRs: 61650, 61971"
-------------------------------------------------------------------------
=========================================================================
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            service.scale(scale)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error scaling {0} - %s"".format(service.name))
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"```python
out_redir_name, err_redir_name = make_redirection_tempfiles()
with stdout_redirector(out_redir_name):
    with stderr_redirector(err_redir_name):
        service.scale(scale)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name, msg_format=""Error scaling {0} - %s"".format(service.name))
    self.client.fail(**fail_reason)
cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
```"
-------------------------------------------------------------------------
"out_redir_name, err_redir_name = make_redirection_tempfiles()
    with stdout_redirector(out_redir_name):
        with stderr_redirector(err_redir_name):
            service.scale(scale)
    fail_reason = get_failure_info(exc, out_redir_name, err_redir_name,
                                   msg_format=""Error scaling {0} - %s"".format(service.name))
    self.client.fail(**fail_reason)
else:
    cleanup_redirection_tempfiles(out_redir_name, err_redir_name)
"
-------------------------------------------------------------------------
"Recom
PRs: 61650, 61971"
-------------------------------------------------------------------------
=========================================================================
"vbd_ref_new = self.xapi_session.xenapi.VBD.create(new_disk_vbd)

if self.vm_params['power_state'].lower() == ""running"":
    self.xapi_session.xenapi.VBD.plug(vbd_ref_new)

"
-------------------------------------------------------------------------
"```python
vbd_ref_new = self.xapi_session.xenapi.VBD.create(new_disk_vbd)

if self.vm_params['power_state'].lower() == ""running"":
    self.xapi_session.xenapi.VBD.plug(vbd_ref_new)
```"
-------------------------------------------------------------------------
"vbd_ref_new = self.xapi_session.xenapi.VBD.create(new_disk_vbd)

if self.vm_params['power_state'].lower() == ""running"":
    self.xapi_session.xenapi.VBD.plug(vbd_ref_new)

"
-------------------------------------------------------------------------
"Recom
PRs: 60737, 61970"
-------------------------------------------------------------------------
=========================================================================
"class UnrecognizedArgument(argparse.Action):
def __init__(self, option_strings, dest, const=True, default=None, required=False, help=None, metavar=None, nargs=0):
    super(UnrecognizedArgument, self).__init__(option_strings=option_strings, dest=dest, nargs=nargs, const=const,
                                               default=default, required=required, help=help)

def __call__(self, parser, namespace, values, option_string=None):
    parser.error('unrecognized arguments: %s' % option_string)


"
-------------------------------------------------------------------------
"```python
import argparse

class UnrecognizedArgument(argparse.Action):
    def __init__(self, option_strings, dest, const=True, default=None, required=False, help=None, metavar=None, nargs=0):
        super(UnrecognizedArgument, self).__init__(option_strings=option_strings, dest=dest, nargs=nargs, const=const,
                                                   default=default, required=required, help=help)

    def __call__(self, parser, namespace, values, option_string=None):
        parser.error('unrecognized arguments: %s' % option_string)
```"
-------------------------------------------------------------------------
"class UnrecognizedArgument(argparse.Action):
def __init__(self, option_strings, dest, const=True, default=None, required=False, help=None, metavar=None, nargs=0):
    super(UnrecognizedArgument, self).__init__(option_strings=option_strings, dest=dest, nargs=nargs, const=const,
                                               default=default, required=required, help=help)

def __call__(self, parser, namespace, values, option_string=None):
    parser.error('unrecognized arguments: %s' % option_string)


"
-------------------------------------------------------------------------
"Recom
PRs: 61618, 61950"
-------------------------------------------------------------------------
=========================================================================
"self.parser.add_argument('-l', '--limit', help=argparse.SUPPRESS, action=opt_help.UnrecognizedArgument, nargs='?')
self.parser.add_argument('--list-hosts', help=argparse.SUPPRESS, action=opt_help.UnrecognizedArgument)
"
-------------------------------------------------------------------------
"```python
self.parser.add_argument('-l', '--limit', help=argparse.SUPPRESS, action=opt_help.UnrecognizedArgument, nargs='?')
self.parser.add_argument('--list-hosts', help=argparse.SUPPRESS, action=opt_help.UnrecognizedArgument)
```"
-------------------------------------------------------------------------
"self.parser.add_argument('-l', '--limit', help=argparse.SUPPRESS, action=opt_help.UnrecognizedArgument, nargs='?')
self.parser.add_argument('--list-hosts', help=argparse.SUPPRESS, action=opt_help.UnrecognizedArgument)
"
-------------------------------------------------------------------------
"Recom
PRs: 61618, 61950"
-------------------------------------------------------------------------
=========================================================================
"options.pattern = options.args
"
-------------------------------------------------------------------------
options.pattern = options.args
-------------------------------------------------------------------------
"options.pattern = options.args
"
-------------------------------------------------------------------------
"Recom
PRs: 61618, 61950"
-------------------------------------------------------------------------
=========================================================================
"the user is removed from all groups except the primary group.
"
-------------------------------------------------------------------------
"```python
    &nbsp;
    def remove_user(self):
        \""""""Remove user from all groups except primary group\""""""
        self._modify_group(self.name, '', user_groups=[self.group])
```"
-------------------------------------------------------------------------
"the user is removed from all groups except the primary group.
"
-------------------------------------------------------------------------
"Recom
PRs: 61936, 61942"
-------------------------------------------------------------------------
=========================================================================
"the user is removed from all groups except the primary group.
"
-------------------------------------------------------------------------
"```python
        self._modify_group(name, groups, self.primary_group, append=False)
```"
-------------------------------------------------------------------------
"the user is removed from all groups except the primary group.
"
-------------------------------------------------------------------------
"Recom
PRs: 61936, 61940"
-------------------------------------------------------------------------
=========================================================================
"self.results['ansible_facts'] = {
    'azure_dnsrecordset': self.serialize_list(results)
}
"
-------------------------------------------------------------------------
"self.results['ansible_facts'] = {
    'azure_dnsrecordset': self.serialize_list(results)
}"
-------------------------------------------------------------------------
"self.results['ansible_facts'] = {
    'azure_dnsrecordset': self.serialize_list(results)
}
"
-------------------------------------------------------------------------
"Recom
PRs: 61805, 61834"
-------------------------------------------------------------------------
=========================================================================
"is_old_facts = self.module._name == 'azure_rm_resourcegroup_facts'
if is_old_facts:
    self.module.deprecate(""The 'azure_rm_resourcegroup_facts' module has been renamed to 'azure_rm_resourcegroup_info'"", version='2.13')
    result = self.get_item()
    result = self.list_items()
    for item in result:
if is_old_facts:
    self.results['ansible_facts']['azure_resourcegroups'] = result
self.results['resourcegroups'] = result
"
-------------------------------------------------------------------------
"```python
is_old_facts = self.module._name == 'azure_rm_resourcegroup_facts'
if is_old_facts:
    self.module.deprecate(""The 'azure_rm_resourcegroup_facts' module has been renamed to 'azure_rm_resourcegroup_info'"", version='2.13')
    result = self.get_item()
    result = self.list_items()
    for item in result:
        if is_old_facts:
            self.results['ansible_facts']['azure_resourcegroups'] = result
self.results['resourcegroups'] = result
```"
-------------------------------------------------------------------------
"is_old_facts = self.module._name == 'azure_rm_resourcegroup_facts'
if is_old_facts:
    self.module.deprecate(""The 'azure_rm_resourcegroup_facts' module has been renamed to 'azure_rm_resourcegroup_info'"", version='2.13')
    result = self.get_item()
    result = self.list_items()
    for item in result:
if is_old_facts:
    self.results['ansible_facts']['azure_resourcegroups'] = result
self.results['resourcegroups'] = result
"
-------------------------------------------------------------------------
"Recom
PRs: 61805, 61834"
-------------------------------------------------------------------------
=========================================================================
"self.results['ansible_facts'] = {
    'azure_storageaccounts': self.serialize(filtered),
    'storageaccounts': self.format_to_dict(filtered),
}
"
-------------------------------------------------------------------------
"self.results['ansible_facts'] = {
    'azure_storageaccounts': self.serialize(filtered),
    'storageaccounts': self.format_to_dict(filtered),
}"
-------------------------------------------------------------------------
"self.results['ansible_facts'] = {
    'azure_storageaccounts': self.serialize(filtered),
    'storageaccounts': self.format_to_dict(filtered),
}
"
-------------------------------------------------------------------------
"Recom
PRs: 61805, 61834"
-------------------------------------------------------------------------
=========================================================================
"self.results['ansible_facts'] = dict()
"
-------------------------------------------------------------------------
"```python
self.results['ansible_facts'] = dict()
```"
-------------------------------------------------------------------------
"self.results['ansible_facts'] = dict()
"
-------------------------------------------------------------------------
"Recom
PRs: 61805, 61834"
-------------------------------------------------------------------------
=========================================================================
"if self.name:
    result = self.get_item()
    result = self.list_items()
    for index in range(len(result)):
        vmss = result[index]
"
-------------------------------------------------------------------------
"```python
if self.name:
    result = self.get_item()
    result = self.list_items()
    for index in range(len(result)):
        vmss = result[index]
```"
-------------------------------------------------------------------------
"if self.name:
    result = self.get_item()
    result = self.list_items()
    for index in range(len(result)):
        vmss = result[index]
"
-------------------------------------------------------------------------
"Recom
PRs: 61805, 61834"
-------------------------------------------------------------------------
=========================================================================
"result[index] = updated
d_facts:
.results['ansible_facts'] = {
'azure_vmss': result

elf.format == 'curated':
# proper result format we want to support in the future
# dropping 'ansible_facts' and shorter name 'vmss'
self.results['vmss'] = result

.results['vmss'] = result
"
-------------------------------------------------------------------------
"```python
result[index] = updated
d_facts:
.results['azure_vmss'] = result

if self.format == 'curated':
    # proper result format we want to support in the future
    # dropping 'ansible_facts' and shorter name 'vmss'
    self.results['vmss'] = result

self.results['vmss'] = result
```"
-------------------------------------------------------------------------
"result[index] = updated
d_facts:
.results['ansible_facts'] = {
'azure_vmss': result

elf.format == 'curated':
# proper result format we want to support in the future
# dropping 'ansible_facts' and shorter name 'vmss'
self.results['vmss'] = result

.results['vmss'] = result
"
-------------------------------------------------------------------------
"Recom
PRs: 61805, 61834"
-------------------------------------------------------------------------
=========================================================================
"self.results['ansible_facts'] = {
    'azure_virtualnetworks': self.serialize(results)
}
"
-------------------------------------------------------------------------
"self.results['ansible_facts'] = {
    'azure_virtualnetworks': self.serialize(results)
}"
-------------------------------------------------------------------------
"self.results['ansible_facts'] = {
    'azure_virtualnetworks': self.serialize(results)
}
"
-------------------------------------------------------------------------
"Recom
PRs: 61805, 61834"
-------------------------------------------------------------------------
=========================================================================
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"self.assertIn(""must be less than"", str(ex.value))"
-------------------------------------------------------------------------
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59998, 61798"
-------------------------------------------------------------------------
=========================================================================
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"```python
assert ""must be less than"" in str(ex.value)
```"
-------------------------------------------------------------------------
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59998, 61798"
-------------------------------------------------------------------------
=========================================================================
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"self.assertIn(""must be less than"", str(ex.value))"
-------------------------------------------------------------------------
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59998, 61798"
-------------------------------------------------------------------------
=========================================================================
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"self.assertIn(""must be less than"", str(ex.value))"
-------------------------------------------------------------------------
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59998, 61798"
-------------------------------------------------------------------------
=========================================================================
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"self.assertIn(""must be less than"", str(ex.value))"
-------------------------------------------------------------------------
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59998, 61798"
-------------------------------------------------------------------------
=========================================================================
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"self.assertIn(""must be less than"", str(ex.value))"
-------------------------------------------------------------------------
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59998, 61798"
-------------------------------------------------------------------------
=========================================================================
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"self.assertIn(""must be less than"", str(ex.value))"
-------------------------------------------------------------------------
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59998, 61798"
-------------------------------------------------------------------------
=========================================================================
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"```python
assert ""must be less than"" in str(ex.value)
```"
-------------------------------------------------------------------------
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59998, 61798"
-------------------------------------------------------------------------
=========================================================================
"assert ""Multiple occurrences of hostname"" in str(ex.value)
"
-------------------------------------------------------------------------
"self.assertIn(""Multiple occurrences of hostname"", str(ex.value))"
-------------------------------------------------------------------------
"assert ""Multiple occurrences of hostname"" in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59998, 61798"
-------------------------------------------------------------------------
=========================================================================
"assert 'The provided protocol' in str(ex.value)
"
-------------------------------------------------------------------------
"    with pytest.raises(F5ModuleError) as ex:
        assert 'The provided protocol' in str(ex.value)"
-------------------------------------------------------------------------
"assert 'The provided protocol' in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59998, 61798"
-------------------------------------------------------------------------
=========================================================================
"request_params = dict(self.module.params)
del request_params['id']
response = self.rest.post('droplets', data=request_params)
"
-------------------------------------------------------------------------
"```python
import __future__
import ansible.module_utils.digital_ocean
import time
import json
import ansible.module_utils.basic

request_params = dict(self.module.params)
del request_params['id']
response = self.rest.post('droplets', data=request_params)
```"
-------------------------------------------------------------------------
"request_params = dict(self.module.params)
del request_params['id']
response = self.rest.post('droplets', data=request_params)
"
-------------------------------------------------------------------------
"Recom
PRs: 61655, 61794"
-------------------------------------------------------------------------
=========================================================================
"request_params = dict(self.module.params)
del request_params['id']
response = self.rest.post('droplets', data=request_params)
"
-------------------------------------------------------------------------
"```python
import __future__
import ansible.module_utils.digital_ocean
import time
import json
import ansible.module_utils.basic

request_params = dict(self.module.params)
del request_params['id']
response = self.rest.post('droplets', data=request_params)
```"
-------------------------------------------------------------------------
"request_params = dict(self.module.params)
del request_params['id']
response = self.rest.post('droplets', data=request_params)
"
-------------------------------------------------------------------------
"Recom
PRs: 61655, 61793"
-------------------------------------------------------------------------
=========================================================================
"- To create a disabled account on OpenBSD, set this to C('*************').
"
-------------------------------------------------------------------------
"Add the following line to the options context in the code snippet:
```
- To create a disabled account on OpenBSD, set this to C('*************').
```"
-------------------------------------------------------------------------
"- To create a disabled account on OpenBSD, set this to C('*************').
- See U(https://docs.ansible.com/ansible/faq.html#how-do-i-generate-encrypted-passwords-for-the-user-module)
"
-------------------------------------------------------------------------
"Recom
PRs: 54893, 61791"
-------------------------------------------------------------------------
=========================================================================
"# Allow setting certain passwords in order to disable the account
if self.module.params['password'] in set(['*', '!', '*************']):
"
-------------------------------------------------------------------------
"```python
# Allow setting certain passwords to disable the account
if self.module.params['password'] in set(['*', '!', '*************']):
```"
-------------------------------------------------------------------------
"# Allow setting certain passwords in order to disable the account
if self.module.params['password'] in set(['*', '!', '*************']):
"
-------------------------------------------------------------------------
"Recom
PRs: 54893, 61791"
-------------------------------------------------------------------------
=========================================================================
"- To create a disabled account on OpenBSD, set this to C('*************').
"
-------------------------------------------------------------------------
"```python
Current context: options:
             - Optionally set the user's password to this crypted value.
             - On macOS systems, this value has to be cleartext. Beware of security issues.
             - To create a disabled account on Linux systems, set this to C('!') or C('*').
             - See U(https://docs.ansible.com/ansible/faq.html#how-do-i-generate-encrypted-passwords-for-the-user-module)
               for details on various ways to generate these password values.
         type: str
         Required dependency: os, __future__, select, ansible.module_utils, re, time, shutil, pty, spwd, calendar, socket, pwd, grp, subprocess, ansible.module_utils._text, ansible.module_utils.basic, errno
         Original metadata: [stable-2.9] Allow 13 asterisk characters in password field without warning (#54893)
         --##### SUMMARY
         <!--- Describe the change below, including rationale and design decisions -->
         Backport of #54893 for Ansible 2.9

         (cherry picked from commit 1dea661ce8)
         <!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->

         ##### ISSUE TYPE
         <!--- Pick one below and delete the rest -->
         - Bugfix Pull Request

         ##### COMPONENT NAME
         <!--- Write the short name of the module, plugin, task or feature below -->
         `lib/ansible/modules/system/user.py`
         backport, module, core_review, support:community, support:core, bug, system, affects_2.9

         Functional set for the hunk:
         Compilation set for the hunk:
         Library information from Stable:
         Function name information from Stable:
         Function call information from Stable:
         Class name information from Stable:
         Class method call information from Stable:
         Target file: always, WARNWEEKS, id_rsa, Homedir, some, sam, __metaclass__, ssh_file, SHADOWFILE, check_password_encrypted, character, comma, AAAAB3NzaC1yc2EAAAADAQABAAABAQC95opt4SPEC06tOYsJQJIuN23BbLMGmYo8ysVZQc4h2DZE9ugbjWWGS1, run_command, useful, debug, for, seconds, current_expire_date, hidden_users, user, elif, get_password_defaults, viewlocale, makes, associated, no_log, james18, passphrase, HAVE_SPWD, R, did, str, home, Available, entry, _UserB, If, outside, dseditgroup, question, Create, allows, SuSE, behavior, its, minweeks, utilities, many, bash, kwargs, setsid, roles, class, can, due, days, github, GNU, your, bin, current_expires, _change_user_password, ansible, useradd, passed, e, re, distro, RH, t, HP, now, SYSTEM, Requires, del, aging, ssh_defaults, ValueError, parameter, additional, to_text, See, regardless, relative, difference, removing, nothing, userinfo, subclass, setting, false, Preferences, ways, should, disables, deal, up, group_info, because, cast, getgrgid, DragonFlyBsdUser, main, there, appears, F, get_groups_set, ssh_key_passphrase, lib, NOT_LOGGING_PASSWORD, gist, lock, differs, manipulation, passwords, expiration, nobody, status, stableinterface, bit, group_diff, backed, NFSHomeDirectory, Before, uid, HPUX, out_buffer, file_handler, look, find, anything, SunOS, char, Standard, after, tool, gnu, operator1, lostpassword, mac, There, directories, dscl, None, get_bin_path, write, X_OK, groups_option, means, same, dirname, In, absence, Alpine, issues, invalid, empty, b_passwd_line, pty, ssh_type, getgrnam, FORCE, allowed, authorizations, Overwrite, since, us, RSA, default, Remove, makedirs, master, ssh_dir, Invalid, against, Removed, root, PermissionError, had, will, NetBSDUser, any, PBKDF2, comment, taking, values, Library, grp, Fedora, We, stated, hash, make, care, Unless, __main__, validation, Public, isn, characters, role, Fingerprint, numerical, not, True, an, UID, window, DragonFly, index, major_release, strict, operating, via, chown, exclusive, IndexError, message, id_, USERGROUPS_ENAB, prompt, check_mode, preexec_fn, exists, However, nueh, array, rc2, len, max_system_uid, argument_spec, with, known, systems, l, import, only, Smith, sure, mean, implement, hide, generate, A3fw3IGVSjaueVnlUyUmOBf7fzmZbhlFVXf2Zi2rFTXqvbdGHKkzpw1U8eB8xFPP7y, Key, true, check, https, g, super, doesn, OSs, directly, specified, how, open, inherits, Delete, An, compare, update, property, epoch, documentation, implementation, RETURN, constraint, behaviors, password_lock, chpass, kb, When, uses, Z, tweak, stringed, prevent, homedirs, float, COPYING, module_utils, Fromm, SHA256, f, enabled, local, generation, consultant, False, errno, solaris, FreeBsdUser, aware, delgroup, John, skeleton, user_exists, given, locked, host, usermod_path, License, feature, x, cls, is, security, man, maybe_invalid, thus, union, mutually_exclusive, ginfo, overwritten, Does, rstrip, Forces, byte, differences, The, cleartext, unable, System, preferences, search, bool, Notes, startswith, stored, remove_user_userdel, lusermod, Generic, b_expires_line, assumed, linux_distribution, UniqueID, order, when, choices, number, parse_shadow_file, found, interactively, according, password, again, __modify_group, ssha512, task, Hide, subprocess, the, to, version_added, struct_time, been, unless, Generated, distros, U, sshkeygen, max_uid, output, module, fields, u, file, Stephen, err_buffer, adduser, Illumos, editing, most, may, isabs, For, accounts, supported_by, OpenBSD, confirm, max, key, getgrall, differ, overwriting, expires, greater, def, gr_mem, remove_cmd, raise, edits, private, Can, ssh_public_key_file, R_OK, it, authorization, writelines, FreeBSD, able, they, nogroup, defaults, This, database, takes, lines, whether, w, list, MINWEEKS, _rc, show, __name__, wheels, keys, hidden, delete, method, create_homedir, shutil, KeyError, b, slave_in_fd, Change, error, crypto, groups, admins, login, forces, deleted, dict, poll, specific, isdir, stdin, OSError, depend, groups_need_mod, reversed_lines, org, IsHidden, userc, DragonFlyBSD, ssh_passphrase, txt, wonderhowto, YAML, run, time, AnsibleModule, targets, primary, define, getspnam, Windows, chpasswd, Masked, OSX, errors, SHA512, to_native, group, MUST, P, socket, UserShell, does, etc, between, macOS, other, loginwindow, platforms, aliases, specify, skel, embedded, tools, surrogate_or_strict, err2, Copyright, require, Sanity, instead, b_lines, Ugh, already, options, shown, required, selinux, createhome, newly, luseradd, platform, delimiter, separated, _user_attr_info, coding, above, old, such, o, helpout, try, need, except, defs, ImportError, Y, return, access, day, getpwnam, asmith, EPERM, needs, dist, redhat, profiles, html, rc, ssh_key_fingerprint, first_prompt, were, managed, A, group_exists, field, account, y, d, SELF, get_ssh_public_key, disabled, wish, gethostname, zero, m, walk, Return, C, User, lack, pbkdf2_digest, p, H, files, plist_file, Do, returned, rsa, public, remove_user, tokens, bits, don, description, needed, Has, and, under, LC_ALL, of, as, Beware, creating, keygen, directory, remove_existing, ssh_comment, data, determine, gmonduC7gsWDMNcOdSE3wJMTim4lddiBx4RgC9yXsJ6Tkz9BHD73MXPpT5ETnse, details, chunk, checking, locally, concept, b_name, on_create, snippets, use_unsafe_shell, backup_shadow, create, them, second_prompt, new_groups, next, Example, calendar, missing, generate_ssh_key, HiddenUsersList, expire, month, LOGIN_DEFS, environ, Failed, must, methods, cracking, test1, determined, running, timegm, here, full_distribution_name, ignores, mirror, RealName, system, no, runtime, Exclude, Allow, force, passlib, handle, DOCUMENTATION, ssh_fingerprint, _list_user_groups, etc...
```"
-------------------------------------------------------------------------
"- To create a disabled account on OpenBSD, set this to C('*************').
"
-------------------------------------------------------------------------
"Recom
PRs: 54893, 61789"
-------------------------------------------------------------------------
=========================================================================
"# Allow setting certain passwords in order to disable the account
if self.module.params['password'] in set(['*', '!', '*************']):
"
-------------------------------------------------------------------------
"```python
# Allow setting certain passwords in order to disable the account
if self.module.params['password'] in set(['*', '!', '*************']):
```"
-------------------------------------------------------------------------
"# Allow setting certain passwords in order to disable the account
if self.module.params['password'] in set(['*', '!', '*************']):
"
-------------------------------------------------------------------------
"Recom
PRs: 54893, 61789"
-------------------------------------------------------------------------
=========================================================================
"return service_status['ActiveState'] in set(['active', 'activating'])
"
-------------------------------------------------------------------------
"```python
def is_running_service(service_status):
    return service_status['ActiveState'] in set(['active', 'activating'])
```"
-------------------------------------------------------------------------
"return service_status['ActiveState'] in set(['active', 'activating'])
"
-------------------------------------------------------------------------
"Recom
PRs: 61776, 61786"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
The state of the configuration after module completion.
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"
```python
EXAMPLES = """"""
RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   type: dict
   sample: The configuration returned will always be in the same format of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   type: dict
   sample: The configuration returned will always be in the same format of the parameters above.
```"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"```
required_value = {
     'state': {
         'description': 'The state of the configuration after module completion',
         'type': 'str',
         'default': 'merged'
     }
 }
 ``` "
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   type: list
   sample: The configuration returned will always be in the same format of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   type: list
   sample: The configuration returned will always be in the same format of the parameters above.
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Current context: options:
             type: str
   state:
     description:
     type: str
     choices:
     - merged

Updated context: options:
             type: str
   state:
     description: The state of the configuration after module completion
     type: str
     choices:
     - merged"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
 before:
   returned: always
   description: The configuration as structured data prior to module invocation.
   type: list
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   returned: when changed
   description: The configuration as structured data after module completion.
   type: list
   sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY
<!--- Describe the change below, including rationale and design decisions -->
Backport #61613 documentation updates

<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->

##### ISSUE TYPE
<!--- Pick one below and delete the rest -->
- Docs Pull Request

##### COMPONENT NAME
<!--- Write the short name of the module, plugin, task or feature below -->
eos_interfaces

##### ADDITIONAL INFORMATION
<!--- Include additional information to help people understand the change here -->
<!--- A step-by-step reproduction of the problem is helpful if there is no related issue -->

<!--- Paste verbatim command output below, e.g. before and after your change -->
```paste below

```
This is documentation updates related to our new reource modules for network.

Depends-On: https://github.com/ansible/ansible/pull/61711
Depends-On: https://github.com/ansible/ansible/pull/61883
Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk:
Compilation set for the hunk:
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable:
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L, from, attributes, interfaces, org, same, RETURN, Lldp_interfacesArgs, WARNING, meters, ca_type, supports_check_mode, txt, Call, run, AnsibleModule, before, configuration, type, default, point, resulting, exit_json, longitude, configurations, against, connection, between, in, print_function, device, rohitthakur2590, will, vyos, LLDP, Copyright, licenses, this, Options, Latitude, gpl, civic_based, suboptions, Thakur, options, www, v3, ANSIBLE_METADATA, generated, Public, required, invocation, __main__, coding, not, author, True, ca_info, above, result, pushed, notes, location, set, returns, parameters, based, eth2, Manages, Code, Module, After, replaced, html, coordinate_based, service, Tested, A, network, NAD83, resource, format, argument_spec, with, Merge, import, Result, execution, Altitude, C, state, utf, generate, if, Do, returned, sample, see, form, Hat, https, config, lldp, description, info, datum, user_guide, argspec, Delete, auto, of, template, listed, Emergency, data, latitude, edit
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"```yaml
options:
  type: int
state:
  description:
    type: str
    choices:
      - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"BEFORE = """"""
before:
  description: The configuration as structured data prior to module invocation.
  returned: always
  type: dict
  sample: >
""""""
AFTER = """"""
after:
  description: The configuration as structured data after module completion.
  returned: when changed
  type: dict
  sample: >
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Adapted snippet:

```yaml
options:
  choices: ['fast', 'normal']
state:
  description: The state of the configuration after module completion
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
 before:
   returned: always
   type: list
   sample: >
     The configuration as structured data prior to module invocation.
 after:
   returned: when changed
   type: list
   sample: >
     The configuration as structured data after module completion.
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"The state of the configuration after module completion will be as follows: 

```
options:
  - passive
state:
  description:
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: list
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: list
   sample: >"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"```yaml
options:
  type: bool
state:
  description: The state of the configuration after module completion.
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
RETURN = """"""
before:
  returned: always
  description: The configuration as structured data prior to module invocation.
  type: dict
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  returned: when changed
  description: The configuration as structured data after module completion.
  type: dict
  sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY<!--- Describe the change below, including rationale and design decisions -->Backport #61613 documentation updates<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Docs Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->eos_interfaces##### ADDITIONAL INFORMATION<!--- Include additional information to help people understand the change here --><!--- A step-by-step reproduction of the problem is helpful if there is no related issue --><!--- Paste verbatim command output below, e.g. before and after your change -->```paste below```This is documentation updates related to our new reource modules for network.Depends-On: https://github.com/ansible/ansible/pull/61711Depends-On: https://github.com/ansible/ansible/pull/61883Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choi..."
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"```yaml
options:
  type: bool
state:
  description: ""The state of the configuration after module completion.""
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
RETURN = """"""
before:
  description: The configuration as structured data prior to module invocation.
  returned: always
  type: list
  sample: >
    The configuration returned will always be in the same format
    of the parameters above.
after:
  description: The configuration as structured data after module completion.
  returned: when changed
  type: list
  sample: >
    Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
    Original metadata: Fix network resource module wording and typographical errors (#61613)
    --##### SUMMARY
    <!--- Describe the change below, including rationale and design decisions -->
    Backport #61613 documentation updates
    <!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->
    ##### ISSUE TYPE
    <!--- Pick one below and delete the rest -->
    - Docs Pull Request
    ##### COMPONENT NAME
    <!--- Write the short name of the module, plugin, task or feature below -->
    eos_interfaces
    ##### ADDITIONAL INFORMATION
    <!--- Include additional information to help people understand the change here -->
    <!--- A step-by-step reproduction of the problem is helpful if there is no related issue -->
    <!--- Paste verbatim command output below, e.g. before and after your change -->
    ```paste below
    ```
    This is documentation updates related to our new resource modules for network.
    
    Depends-On: https://github.com/ansible/ansible/pull/61711
    Depends-On: https://github.com/ansible/ansible/pull/61883
    Depends-On: https://github.com/ansible/ansible/pull/61899
    needs_revision, needs_rebase, backport, core_review, docs, affects_2.9
    
    Functional set for the hunk: 
    Compilation set for the hunk: 
    Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
    Function name information from Stable: main
    Function call information from Stable: Lldp_interfaces, main, AnsibleModule
    Class name information from Stable: 
    Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
    Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status...
    latitude, edit
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"The state of the configuration after module completion is as follows:

```yaml
options:
  - suspend
state:
  description:
    type: str
    choices:
      - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: list
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: list
   sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY<!--- Describe the change below, including rationale and design decisions -->Backport #61613 documentation updates<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Docs Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->eos_interfaces##### ADDITIONAL INFORMATION<!--- Include additional information to help people understand the change here --><!--- A step-by-step reproduction of the problem is helpful if there is no related issue --><!--- Paste verbatim command output below, e.g. before and after your change -->```paste below```This is documentation updates related to our new reource modules for network.Depends-On: https://github.com/ansible/ansible/pull/61711Depends-On: https://github.com/ansible/ansible/pull/61883Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L, from, attributes, interfaces, org, same, RETURN, Lldp_interfacesArgs, WARNING, meters, ca_type, supports_check_mode, txt, Call, run, AnsibleModule, before, configuration, type, default, point, resulting, exit_json, longitude, configurations, against, connection, between, in, print_function, device, rohitthakur2590, will, vyos, LLDP, Copyright, licenses, this, Options, Latitude, gpl, civic_based, suboptions, Thakur, options, www, v3, ANSIBLE_METADATA, generated, Public, required, invocation, __main__, coding, not, author, True, ca_info, above, result, pushed, notes, location, set, returns, parameters, based, eth2, Manages, Code, Module, After, replaced, html, coordinate_based, service, Tested, A, network, NAD83, resource, format, argument_spec, with, Merge, import, Result, execution, Altitude, C, state, utf, generate, if, Do, returned, sample, see, form, Hat, https, config, lldp, description, info, datum, user_guide, argspec, Delete, auto, of, template, listed, Emergency, data, latitude, edit"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
The state of the configuration after module completion.
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
   type: list
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   sample: >
     The configuration returned will always be in the same format
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"```python
CURRENT_CONTEXT = """"""
options:
  - deleted
  default: merged
  description:
  type: str
""""""

from __future__ import absolute_import, print_function, division

from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces import Lldp_interfaces
from ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces import Lldp_interfacesArgs

def main():
    module = AnsibleModule(
        argument_spec=Lldp_interfacesArgs.argument_spec,
        supports_check_mode=True
    )
    
    lldp = Lldp_interfaces(module)
    lldp_result = lldp.run()

    module.exit_json(**lldp_result)

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
  before:
    description: The configuration as structured data prior to module invocation.
    returned: always
    type: list
    sample: The configuration returned will alwys be in the same format of the paramters above.
  after:
    description: The configuration as structured data after module completion.
    returned: when changed
    type: list
    sample: The configuration returned will alwys be in the same format of the paramters above.
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"```python
"""""" 
Invalid AST

Current context: state:
     - configuration 
     - deleted
     default: merged
     description:
     type: str
 """"""
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"```python
EXAMPLES = """"""

RETURN = """"""
before:
  returned: always
  type: list
  sample: The configuration as structured data prior to module invocation.
after:
  returned: when changed
  type: list
  sample: The configuration as structured data after module completion.
```"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"```python
"""""" 
options:
     - deleted
     default: merged
     description:
     type: str
 """"""
from __future__ import absolute_import, division, print_function

from ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces import Lldp_interfaces
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces import Lldp_interfacesArgs

def main():
    module = AnsibleModule(
        argument_spec=Lldp_interfacesArgs.argument_spec,
        supports_check_mode=True
    )

    lldp = Lldp_interfaces(module)

    # Your implementation logic here

    module.exit_json(**lldp.result)

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"```python
EXAMPLES = """"""
 
 RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   type: list
   sample: The configuration returned will always be in the same format of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   type: list
   sample: The configuration returned will always be in the same format of the parameters above.
```"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"```yaml
options:
  required: True
state:
  description: The state of the configuration after module completion
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"```yaml
RETURN = """"""
before:
  description: The configuration as structured data prior to module invocation.
  returned: always
  type: list
  sample: >
    The configuration returned will always be in the same format
    of the parameters above.
after:
  description: The configuration as structured data after module completion.
  returned: when changed
  type: list
  sample: >
    Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces,
    Original metadata: Fix network resource module wording and typographical errors (#61613)
```"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"```python
options:
  type: int
state:
  description: The state of the configuration after module completion
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
before:
  description: The configuration as structured data prior to module invocation.
  returned: always
  type: list
  sample: >
    The configuration returned will always be in the same format
    of the parameters above.
after:
  description: The configuration as structured data after module completion.
  returned: when changed
  type: list
  sample: >
    Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces,
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"### Summary

This commit backports the documentation updates related to the new resource modules for the network. It includes typo fixes and improvements in the wording. This is part of the effort to enhance the documentation for network resource modules.

### Changes Made

- Backported documentation updates related to network resource modules.
- Fixed typographical errors and improved wording.

### Fix

- Addressed typographical errors.
- Enhanced the wording in the documentation.

##### ISSUE TYPE

- Docs Pull Request

##### COMPONENT NAME

- eos_interfaces

### Required Dependencies

- `__future__`
- `ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces`
- `ansible.module_utils.basic`
- `ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces`

### Context

State of the configuration after module completion."
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, print_function, division
import ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces
import ansible.module_utils.basic
import ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces

EXAMPLES = """"""
 
 RETURN = """"""
 before:
   returned: always
   type: list
   sample: The configuration as structured data prior to module invocation.
 after:
   returned: when changed
   type: list
   sample: The configuration as structured data after module completion.
""""""
```"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"```yaml
options:
  type: bool
state:
  description: ""The state of the configuration after module completion""
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: dict
   sample: The configuration returned will alwys be in the same format of the paramters above.
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: dict
   sample: The configuration returned will alwys be in the same format of the paramters above.
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
The state of the configuration post-module execution.
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 
RETURN = """"""
before:
  description: The configuration as structured data prior to module invocation.
  returned: always
  type: list
  sample: >
    The configuration returned will always be in the same format
    of the parameters above.
after:
  description: The configuration as structured data after module completion.
  returned: when changed
  type: list
  sample: >"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"```yaml
options:
  - disabled
state:
  description: The state of the configuration after module completion
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
RETURN = """"""
before:
  description: The configuration as structured data prior to module invocation.
  returned: always
  type: list
  sample: >
    The configuration returned will always be in the same format
    of the parameters above.
after:
  description: The configuration as structured data after module completion.
  returned: when changed
  type: list
  sample: >
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"```python
def main():
    module = AnsibleModule(
        argument_spec=Lldp_interfacesArgs.argument_spec,
        supports_check_mode=True
    )

    result = dict(
        changed=False,
        message='The state of the configuration after module completion'
    )

    module.exit_json(**result)


from ansible.module_utils.basic import *
from ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces import Lldp_interfaces
from __future__ import absolute_import, print_function, division
from ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces import Lldp_interfacesArgs
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"```yaml
  before:
    description: The configuration as structured data prior to module invocation.
    type: list
    returned: always
    sample: The configuration returned will always be in the same format of the parameters above.
  after:
    description: The configuration as structured data after module completion.
    type: list
    returned: when changed
    sample: The configuration returned will always be in the same format of the parameters above.
```"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"```
 """"""
 options:
     - deleted
     default: merged
     description:
     type: str
 """"""
 ``` "
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 
 RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: list
   sample: The configuration returned will alwys be in the same format of the paramters above.
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: list
   sample: The configuration returned will alwys be in the same format of the paramters above."
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, division, print_function

from ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces import Lldp_interfaces
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces import Lldp_interfacesArgs

def main():
    module = AnsibleModule(
        argument_spec=Lldp_interfacesArgs.argument_spec,
        supports_check_mode=True
    )

    lldp = Lldp_interfaces(module)
    lldp.run()
    
    module.exit_json(**lldp.result)

if __name__ == '__main__':
    main()
```  "
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"```python
EXAMPLES = """"""
 
 RETURN = """"""
 before:
   returned: always
   type: list
   description: The configuration as structured data prior to module invocation.
   sample: The configuration returned will alwys be in the same format of the paramters above.
 after:
   returned: when changed
   type: list
   description: The configuration as structured data after module completion.
   sample: The configuration returned will alwys be in the same format of the paramters above.
```"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
The state of the configuration after module execution.
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
 RETURN = """"""
 before:
   returned: always
   type: dict
   description: The configuration as structured data prior to module invocation.
 after:
   returned: when changed
   type: dict
   description: The configuration as structured data after module completion.
 """""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Alter the code snippet to reflect the provided information as follows:

```yaml
options:
  type: str
state:
  description: The state of the configuration after module completion.
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: list
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: list
   sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY<!--- Describe the change below, including rationale and design decisions -->Backport #61613 documentation updates<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Docs Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->eos_interfaces##### ADDITIONAL INFORMATION<!--- Include additional information to help people understand the change here --><!--- A step-by-step reproduction of the problem is helpful if there is no related issue --><!--- Paste verbatim command output below, e.g. before and after your change -->```paste below```This is documentation updates related to our new reource modules for network.Depends-On: https://github.com/ansible/ansible/pull/61711Depends-On: https://github.com/ansible/ansible/pull/61883Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L, from, attributes, interfaces, org, same, RETURN, Lldp_interfacesArgs, WARNING, met..."
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
The state of the configuration post-module execution.
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
RETURN = """"""
before:
  description: The configuration as structured data prior to module invocation.
  type: list
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The configuration as structured data after module completion.
  type: list
  sample: >
   Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
   Original metadata: Fix network resource module wording and typographical errors (#61613)
   --##### SUMMARY   <!--- Describe the change below, including rationale and design decisions -->   Backport #61613 documentation updates   <!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->   ##### ISSUE TYPE   <!--- Pick one below and delete the rest -->   - Docs Pull Request   ##### COMPONENT NAME   <!--- Write the short name of the module, plugin, task or feature below -->   eos_interfaces   ##### ADDITIONAL INFORMATION   <!--- Include additional information to help people understand the change here -->   <!--- A step-by-step reproduction of the problem is helpful if there is no related issue -->   <!--- Paste verbatim command output below, e.g. before and after your change -->   ```paste below      ```   This is documentation updates related to our new reource modules for network.      Depends-On: https://github.com/ansible/ansible/pull/61711   Depends-On: https://github.com/ansible/ansible/pull/61883   Depends-On: https://github.com/ansible/ansible/pull/61899
   needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

   Functional set for the hunk: 
   Compilation set for the hunk: 
   Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
   Function name information from Stable: main
   Function call information from Stable: Lldp_interfaces, main, AnsibleModule
   Class name information from Stable: 
   Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
   Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L,...

"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Current context: options:
             type: bool
   state:
     description:
     type: str
     choices:
     - merged

Updated context:
```yaml
options:
  type: bool
state:
  description: The state of the configuration after module completion.
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: dict
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: dict
   sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY<!--- Describe the change below, including rationale and design decisions -->Backport #61613 documentation updates<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Docs Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->eos_interfaces"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"The state of the configuration after the module completes is described below:

options:
  type: bool
state:
  description: The state of the configuration after module completion
  type: str
  choices:
    - merged"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: list
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: list
   sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"```python
""""""Fix network resource module wording and typographical errors (#61613)

Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces

Functional set for the hunk: 
Compilation set for the hunk: 

Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
""""""

```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: list
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: list
   sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY<!--- Describe the change below, including rationale and design decisions -->Backport #61613 documentation updates<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Docs Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->eos_interfaces##### ADDITIONAL INFORMATION<!--- Include additional information to help people understand the change here --><!--- A step-by-step reproduction of the problem is helpful if there is no related issue --><!--- Paste verbatim command output below, e.g. before and after your change -->```paste below```This is documentation updates related to our new reource modules for network.Depends-On: https://github.com/ansible/ansible/pull/61711Depends-On: https://github.com/ansible/ansible/pull/61883Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model,  (...)"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
The state of the configuration after module completion is as follows:
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
before:
  description: The configuration as structured data prior to module invocation.

after:
  description: The configuration as structured data after module completion.
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
The state of the configuration after module completion is required.
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: list
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: list
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"```yaml
options:
  choices:
    - revertive
    - non-revertive
state:
  description: The state of the configuration after module completion
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
before:
  description: The configuration as structured data prior to module invocation.
  returned: always
  type: dict
  sample: >
    The configuration returned will always be in the same format
    of the parameters above.
after:
  description: The configuration as structured data after module completion.
  returned: when changed
  type: dict
  sample: >
    Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
    Original metadata: Fix network resource module wording and typographical errors (#61613)
    --##### SUMMARY
    <!--- Describe the change below, including rationale and design decisions -->
    Backport #61613 documentation updates

    <!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->

    ##### ISSUE TYPE
    <!--- Pick one below and delete the rest -->
    - Docs Pull Request

    ##### COMPONENT NAME
    <!--- Write the short name of the module, plugin, task or feature below -->
    eos_interfaces

    ##### ADDITIONAL INFORMATION
    <!--- Include additional information to help people understand the change here -->
    <!--- A step-by-step reproduction of the problem is helpful if there is no related issue -->

    <!--- Paste verbatim command output below, e.g. before and after your change -->
    ```paste below

    ```

    This is documentation updates related to our new reource modules for network.

    Depends-On: https://github.com/ansible/ansible/pull/61711
    Depends-On: https://github.com/ansible/ansible/pull/61883
    Depends-On: https://github.com/ansible/ansible/pull/61899
    needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

    Functional set for the hunk: 
    Compilation set for the hunk: 
    Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
    Function name information from Stable: main
    Function call information from Stable: Lldp_interfaces, main, AnsibleModule
    Class name information from Stable: 
    Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
    Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L, from, attributes, interfaces, org, same, RETURN, Lldp_interfacesArgs, WARNING, meters, ca_type, supports_check_mode, txt, Call, run, AnsibleModule, before, configuration, type, default, point, resulting, exit_json, longitude, configurations, against, connection, between, in, print_function, device, rohitthakur2590, will, vyos, LLDP, Copyright, licenses, this, Options, Latitude, gpl, civic_based, suboptions, Thakur, options, www, v3, ANSIBLE_METADATA, generated, Public, required, invocation, __main__, coding, not, author, True, ca_info, above, result, pushed, notes, location, set, returns, parameters, based, eth2, Manages, Code, Module, After, replaced, html, coordinate_based, service, Tested, A, network, NAD83, resource, format, argument_spec, with, Merge, import, Result, execution, Altitude, C, state, utf, generate, if, Do, returned, sample, see, form, Hat, https, config, lldp, description, info, datum, user_guide, argspec, Delete, auto, of, template, listed, Emergency, data, latitude, edit
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
The state of the configuration after module execution.
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"```yaml
RETURN = """"""
before:
  description: The configuration as structured data prior to module invocation.
  type: list
  sample: >
    The configuration returned will always be in the same format
    of the parameters above.
after:
  description: The configuration as structured data after module completion.
  type: list
  sample: >
    Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces,
```"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
The state of the configuration after module completion: `merged`
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: list
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: list
   sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY<!--- Describe the change below, including rationale and design decisions -->Backport #61613 documentation updates<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Docs Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->eos_interfaces##### ADDITIONAL INFORMATION<!--- Include additional information to help people understand the change here --><!--- A step-by-step reproduction of the problem is helpful if there is no related issue --><!--- Paste verbatim command output below, e.g. before and after your change -->```paste below```This is documentation updates related to our new reource modules for network.Depends-On: https://github.com/ansible/ansible/pull/61711Depends-On: https://github.com/ansible/ansible/pull/61883Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L, from, attributes, interfaces, org, same, RETURN, Lldp_interfacesArgs, WARNING, meters, ca_type, supports_check_mode, txt, Call, run, AnsibleModule, before, configuration, type, default, point, resulting, exit_json, longitude, configurations, against, connection, between, in, print_function, device, rohitthakur2590, will, vyos, LLDP, Copyright, licenses, this, Options, Latitude, gpl, civic_based, suboptions, Thakur, options, www, v3, ANSIBLE_METADATA, generated, Public, required, invocation, __main__, coding, not, author, True, ca_info, above, result, pushed, notes, location, set, returns, parameters, based, eth2, Manages, Code, Module, After, replaced, html, coordinate_based, service, Tested, A, network, NAD83, resource, format, argument_spec, with, Merge, import, Result, execution, Altitude, C, state, utf, generate, if, Do, returned, sample, see, form, Hat, https, config, lldp, description, info, datum, user_guide, argspec, Delete, auto, of, template, listed, Emergency, data, latitude, edit"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Update the context section of the code snippet as follows:

```yaml
      type: str
      choices:
        - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
RETURN = """"""
before:
  description: The configuration as structured data prior to module invocation.
  type: dict
  sample: >
    The configuration returned will always be in the same format
    of the parameters above.
after:
  description: The configuration as structured data after module completion.
  type: dict
  sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY<!--- Describe the change below, including rationale and design decisions -->Backport #61613 documentation updates<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Docs Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->eos_interfaces##### ADDITIONAL INFORMATION<!--- Include additional information to help people understand the change here --><!--- A step-by-step reproduction of the problem is helpful if there is no related issue --><!--- Paste verbatim command output below, e.g. before and after your change -->```paste below```This is documentation updates related to our new reource modules for network.Depends-On: https://github.com/ansible/ansible/pull/61711Depends-On: https://github.com/ansible/ansible/pull/61883Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name..., status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L, from, attributes, interfaces, org, same, RETURN, Lldp_interfacesArgs, WARNING, meters, ca_type, supports_check_mode, txt, Call, run, AnsibleModule, before, configuration, type, default, point, resulting, exit_json, longitude, configurations, against, connection, between, in, print_function, device, rohitthakur2590, will, vyos, LLDP, Copyright, licenses, this, Options, Latitude, gpl, civic_based, suboptions, Thakur, options, www, v3, ANSIBLE_METADATA, generated, Public, required, invocation, __main__, coding, not, author, True, ca_info, above, result, pushed, notes, location, set, returns, parameters, based, eth2, Manages, Code, Module, After, replaced, html, coordinate_based, service, Tested, A, network, NAD83, resource, format, argument_spec, with, Merge, import, Result, execution, Altitude, C, state, utf, generate, if, Do, returned, sample, see, form, Hat, https, config, lldp, description, info, datum, user_guide, argspec, Delete, auto, of, template, listed, Emergency, data, latitude, edit"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"```yaml
options:
  type: bool
state:
  description: The state of the configuration after module completion.
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"```
before:
  returned: always
  description: The configuration as structured data prior to module invocation.
  type: list
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.

after:
  returned: when changed
  description: The configuration as structured data after module completion.
  type: list
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
```"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Adjust the code snippet as follows:

```python
options:
  type: str
state:
  description: The state of the configuration after module completion.
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: str
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: str
   sample: >
     Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
     Original metadata: Fix network resource module wording and typographical errors (#61613)
     --##### SUMMARY
     <!--- Describe the change below, including rationale and design decisions -->
     Backport #61613 documentation updates

     <!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->

     ##### ISSUE TYPE
     <!--- Pick one below and delete the rest -->
     - Docs Pull Request

     ##### COMPONENT NAME
     <!--- Write the short name of the module, plugin, task or feature below -->
     eos_interfaces

     ##### ADDITIONAL INFORMATION
     <!--- Include additional information to help people understand the change here -->
     <!--- A step-by-step reproduction of the problem is helpful if there is no related issue -->

     <!--- Paste verbatim command output below, e.g. before and after your change -->
     ```paste below

     ```

     This is documentation updates related to our new reource modules for network.

     Depends-On: https://github.com/ansible/ansible/pull/61711
     Depends-On: https://github.com/ansible/ansible/pull/61883
     Depends-On: https://github.com/ansible/ansible/pull/61899
     needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L, from, attributes, interfaces, org, same, RETURN, Lldp_interfacesArgs, WARNING, meters, ca_type, supports_check_mode, txt, Call, run, AnsibleModule, before, configuration, type, default, point, resulting, exit_json, longitude, configurations, against, connection, between, in, print_function, device, rohitthakur2590, will, vyos, LLDP, Copyright, licenses, this, Options, Latitude, gpl, civic_based, suboptions, Thakur, options, www, v3, ANSIBLE_METADATA, generated, Public, required, invocation, __main__, coding, not, author, True, ca_info, above, result, pushed, notes, location, set, returns, parameters, based, eth2, Manages, Code, Module, After, replaced, html, coordinate_based, service, Tested, A, network, NAD83, resource, format, argument_spec, with, Merge, import, Result, execution, Altitude, C, state, utf, generate, if, Do, returned, sample, see, form, Hat, https, config, lldp, description, info, datum, user_guide, argspec, Delete, auto, of, template, listed, Emergency, data, latitude, edit
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Updated metadata:
```yaml
# SUMMARY
Backport #61613 documentation updates.

# ISSUE TYPE
Docs Pull Request

# COMPONENT NAME
eos_interfaces

# ADDITIONAL INFORMATION
This is documentation updates related to our new resource modules for network.

Depends-On: https://github.com/ansible/ansible/pull/61711
Depends-On: https://github.com/ansible/ansible/pull/61883
Depends-On: https://github.com/ansible/ansible/pull/61899
```

Updated context:
```yaml
options:
  - disable
state:
  description: The state of the configuration after module completion
  type: str
  choices:
    - merged
```

Required dependencies:
- __future__
- ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces
- ansible.module_utils.basic
- ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
before:
  returned: always
  type: list
  sample: >
    The configuration as structured data prior to module invocation.
after:
  returned: when changed
  type: list
  sample: >
    The configuration as structured data after module completion.
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"The desired information now is: ""The state of the configuration after module completion."""
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
before:
  returned: always
  description: The configuration as structured data prior to module invocation.
  type: list
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  returned: when changed
  description: The configuration as structured data after module completion.
  type: list
  sample: >
    Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces,
    Original metadata: Fix network resource module wording and typographical errors (#61613)
    --##### SUMMARY
    <!--- Describe the change below, including rationale and design decisions -->
    Backport #61613 documentation updates

    <!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->

    ##### ISSUE TYPE
    <!--- Pick one below and delete the rest -->
    - Docs Pull Request

    ##### COMPONENT NAME
    <!--- Write the short name of the module, plugin, task or feature below -->
    eos_interfaces

    ##### ADDITIONAL INFORMATION
    <!--- Include additional information to help people understand the change here -->
    <!--- A step-by-step reproduction of the problem is helpful if there is no related issue -->

    <!--- Paste verbatim command output below, e.g. before and after your change -->
    ```paste below

    ```

    This is documentation updates related to our new resource modules for network.

    Depends-On: https://github.com/ansible/ansible/pull/61711
    Depends-On: https://github.com/ansible/ansible/pull/61883
    Depends-On: https://github.com/ansible/ansible/pull/61899
    needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

    Functional set for the hunk: 
    Compilation set for the hunk: 
    Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
    Function name information from Stable: main
    Function call information from Stable: Lldp_interfaces, main, AnsibleModule
    Class name information from Stable: 
    Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
    Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L, from, attributes, interfaces, org, same, RETURN, Lldp_interfacesArgs, WARNING, meters, ca_type, supports_check_mode, txt, Call, run, AnsibleModule, before, configuration, type, default, point, resulting, exit_json, longitude, configurations, against, connection, between, in, print_function, device, rohitthakur2590, will, vyos, LLDP, Copyright, licenses, this, Options, Latitude, gpl, civic_based, suboptions, Thakur, options, www, v3, ANSIBLE_METADATA, generated, Public, required, invocation, __main__, coding, not, author, True, ca_info, above, result, pushed, notes, location, set, returns, parameters, based, eth2, Manages, Code, Module, After, replaced, html, coordinate_based, service, Tested, A, network, NAD83, resource, format, argument_spec, with, Merge, import, Result, execution, Altitude, C, state, utf, generate, if, Do, returned, sample, see, form, Hat, https, config, lldp, description, info, datum, user_guide, argspec, Delete, auto, of, template, listed, Emergency, data, latitude, edit
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"```yaml
options:
  state:
    description: The state of the configuration after module completion.
    type: str
    choices:
      - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   type: list
 after:
   description: The configuration as structured data after module completion.
   type: list
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Adapt the given code snippet as follows:

```yaml
options:
 
   state:
     description: The state of the configuration after module completion.
     type: str
     choices:
       - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 before:
   returned: always
   type: list
   sample: >
     The configuration as structured data prior to module invocation.
 after:
   returned: when changed
   type: list
   sample: >
     The configuration as structured data after module completion.
 """""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"options:
  choices: ['primary', 'secondary']
state:
  description: The state of the configuration after module completion.
  type: str
  choices:
    - merged"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"ENVIRONMENT = """"""
before:
  returned: always
  type: dict
  description: The configuration as structured data prior to module invocation.

after:
  returned: when changed
  type: dict
  description: The configuration as structured data after module completion.
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
The state of the configuration after module completion.
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: list
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: list
   sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY<!--- Describe the change below, including rationale and design decisions -->Backport #61613 documentation updates<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Docs Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->eos_interfaces##### ADDITIONAL INFORMATION<!--- Include additional information to help people understand the change here --><!--- A step-by-step reproduction of the problem is helpful if there is no related issue --><!--- Paste verbatim command output below, e.g. before and after your change -->```paste below```This is documentation updates related to our new reource modules for network.Depends-On: https://github.com/ansible/ansible/pull/61711Depends-On: https://github.com/ansible/ansible/pull/61883Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L, from, attributes, interfaces, org, same, RETURN, Lldp_interfacesArgs, WARNING, meters, ca_type, supports_check_mode, txt, Call, run, AnsibleModule, before, configuration, type, default, point, resulting, exit_json, longitude, configurations, against, connection, between, in, print_function, device, rohitthakur2590, will, vyos, LLDP, Copyright, licenses, this, Options, Latitude, gpl, civic_based, suboptions, Thakur, options, www, v3, ANSIBLE_METADATA, generated, Public, required, invocation, __main__, coding, not, author, True, ca_info, above, result, pushed, notes, location, set, returns, parameters, based, eth2, Manages, Code, Module, After, replaced, html, coordinate_based, service, Tested, A, network, NAD83, resource, format, argument_spec, with, Merge, import, Result, execution, Altitude, C, state, utf, generate, if, Do, returned, sample, see, form, Hat, https, config, lldp, description, info, datum, user_guide, argspec, Delete, auto, of, template, listed, Emergency, data, latitude, edit"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"options:
  type: bool
state:
  description: The state of the configuration after module completion.
  type: str
  choices:
    - merged"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: list
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: list
   sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY
<!--- Describe the change below, including rationale and design decisions -->
Backport #61613 documentation updates

<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->

##### ISSUE TYPE
<!--- Pick one below and delete the rest -->
- Docs Pull Request

##### COMPONENT NAME
<!--- Write the short name of the module, plugin, task or feature below -->
eos_interfaces

##### ADDITIONAL INFORMATION
<!--- Include additional information to help people understand the change here -->
<!--- A step-by-step reproduction of the problem is helpful if there is no related issue -->

<!--- Paste verbatim command output below, e.g. before and after your change -->
```paste below

``` 
This is documentation updates related to our new reource modules for network.

Depends-On: https://github.com/ansible/ansible/pull/61711
Depends-On: https://github.com/ansible/ansible/pull/61883
Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk:
Compilation set for the hunk:
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable:
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, ..."
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"The option field should be updated as follows:

```yaml
options:
  state:
    description: The state of the configuration after module completion
    type: str
    choices:
      - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   type: dict
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   type: dict
   sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY<!--- Describe the change below, including rationale and design decisions -->Backport #61613 documentation updates<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Docs Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->eos_interfaces##### ADDITIONAL INFORMATION<!--- Include additional information to help people understand the change here --><!--- A step-by-step reproduction of the problem is helpful if there is no related issue --><!--- Paste verbatim command output below, e.g. before and after your change -->```paste below```This is documentation updates related to our new reource modules for network.Depends-On: https://github.com/ansible/ansible/pull/61711Depends-On: https://github.com/ansible/ansible/pull/61883Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L, from, attributes, interfaces, org, same, RETURN, Lldp_interfacesArgs, WARNING, meters, ca_type, supports_check_mode, txt, Call, run, AnsibleModule, before, configuration, type, default, point, resulting, exit_json, longitude, configurations, against, connection, between, in, print_function, device, rohitthakur2590, will, vyos, LLDP, Copyright, licenses, this, Options, Latitude, gpl, civic_based, suboptions, Thakur, options, www, v3, ANSIBLE_METADATA, generated, Public, required, invocation, __main__, coding, not, author, True, ca_info, above, result, pushed, notes, location, set, returns, parameters, based, eth2, Manages, Code, Module, After, replaced, html, coordinate_based, service, Tested, A, network, NAD83, resource, format, argument_spec, with, Merge, import, Result, execution, Altitude, C, state, utf, generate, if, Do, returned, sample, see, form, Hat, https, config, lldp, description, info, datum, user_guide, argspec, Delete, auto, of, template, listed, Emergency, data, latitude, edit"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
RETURN = """"""
before:
  description: The configuration as structured data prior to module invocation.
  type: dict
  returned: always
  sample: >
    The configuration returned will always be in the same format
    of the parameters above.
after:
  description: The configuration as structured data after module completion.
  type: dict
  returned: when changed
  sample: >
    Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
    Original metadata: Fix network resource module wording and typographical errors (#61613)
    --##### SUMMARY    <!--- Describe the change below, including rationale and design decisions -->    Backport #61613 documentation updates    <!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->    ##### ISSUE TYPE    <!--- Pick one below and delete the rest -->    - Docs Pull Request    ##### COMPONENT NAME    <!--- Write the short name of the module, plugin, task or feature below -->    eos_interfaces    ##### ADDITIONAL INFORMATION    <!--- Include additional information to help people understand the change here -->    <!--- A step-by-step reproduction of the problem is helpful if there is no related issue -->    <!--- Paste verbatim command output below, e.g. before and after your change -->    ```paste below    ```    This is documentation updates related to our new resource modules for network.    Depends-On: https://github.com/ansible/ansible/pull/61711    Depends-On: https://github.com/ansible/ansible/pull/61883    Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, rem...
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"This is documentation updates related to our new resource modules for network.

```paste below

```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 before:
   returned: always
   type: dict
   description: >
     The configuration as structured data prior to module invocation.
 after:
   returned: when changed
   type: dict
   description: >
     The configuration as structured data after module completion.
 """""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"The state of the configuration after module completion is as follows:
```yaml
state:
  description: str
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
 RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
   type: list
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   sample: >
     The configuration returned will always be in the same format
"""""""
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
The state of the configuration after module completion.
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   type: list
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   type: list
   sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY<!--- Describe the change below, including rationale and design decisions -->Backport #61613 documentation updates<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Docs Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->eos_interfaces##### ADDITIONAL INFORMATION<!--- Include additional information to help people understand the change here --><!--- A step-by-step reproduction of the problem is helpful if there is no related issue --><!--- Paste verbatim command output below, e.g. before and after your change -->```paste below```This is documentation updates related to our new reource modules for network.Depends-On: https://github.com/ansible/ansible/pull/61711Depends-On: https://github.com/ansible/ansible/pull/61883Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L, from, attributes, interfaces, org, same, RETURN, Lldp_interfacesArgs, WARNING, meters, ca_type, supports_check_mode, txt, Call, run, AnsibleModule, before, configuration, type, default, point, resulting, exit_json, longitude, configurations, against, connection, between, in, print_function, device, rohitthakur2590, will, vyos, LLDP, Copyright, licenses, this, Options, Latitude, gpl, civic_based, suboptions, Thakur, options, www, v3, ANSIBLE_METADATA, generated, Public, required, invocation, __main__, coding, not, author, True, ca_info, above, result, pushed, notes, location, set, returns, parameters, based, eth2, Manages, Code, Module, After, replaced, html, coordinate_based, service, Tested, A, network, NAD83, resource, format, argument_spec, with, Merge, import, Result, execution, Altitude, C, state, utf, generate, if, Do, returned, sample, see, form, Hat, https, config, lldp, description, info, datum, user_guide, argspec, Delete, auto, of, template, listed, Emergency, data, latitude, edit"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"```yaml
options:
  type: list
state:
  description: The state of the configuration after module completion.
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"```python
EXAMPLES = """"""
 """"""
RETURN = """"""
before:
  type: structured data
  description: The configuration as structured data prior to module invocation.
after:
  type: structured data
  description: The configuration as structured data after module completion.
""""""
```"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"```yaml
options:
  - sonmp
state:
  description: ""The state of the configuration after module completion.""
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"RETURN = """"""
 before:
   returned: always
   description: The configuration as structured data prior to module invocation.
   type: list
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   returned: when changed
   description: The configuration as structured data after module completion.
   type: list
   sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY<!--- Describe the change below, including rationale and design decisions -->Backport #61613 documentation updates<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Docs Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->eos_interfaces##### ADDITIONAL INFORMATION<!--- Include additional information to help people understand the change here --><!--- A step-by-step reproduction of the problem is helpful if there is no related issue --><!--- Paste verbatim command output below, e.g. before and after your change -->```paste below```This is documentation updates related to our new reource modules for network.Depends-On: https://github.com/ansible/ansible/pull/61711Depends-On: https://github.com/ansible/ansible/pull/61883Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L, from, attributes, interfaces, org, same, RETURN, Lldp_interfacesArgs, WARNING, meters, ca_type, supports_check_mode, txt, Call, run, AnsibleModule, before, configuration, type, default, point, resulting, exit_json, longitude, configurations, against, connection, between, in, print_function, device, rohitthakur2590, will, vyos, LLDP, Copyright, licenses, this, Options, Latitude, gpl, civic_based, suboptions, Thakur, options, www, v3, ANSIBLE_METADATA, generated, Public, required, invocation, __main__, coding, not, author, True, ca_info, above, result, pushed, notes, location, set, returns, parameters, based, eth2, Manages, Code, Module, After, replaced, html, coordinate_based, service, Tested, A, network, NAD83, resource, format, argument_spec, with, Merge, import, Result, execution, Altitude, C, state, utf, generate, if, Do, returned, sample, see, form, Hat, https, config, lldp, description, info, datum, user_guide, argspec, Delete, auto, of, template, listed, Emergency, data, latitude, edit"
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"```python
options:
  type: str
state:
  description: The state of the configuration after module completion.
  type: str
  choices:
    - merged
```"
-------------------------------------------------------------------------
"- The state of the configuration after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"EXAMPLES = """"""
 """"""
RETURN = """"""
 before:
   description: The configuration as structured data prior to module invocation.
   returned: always
   type: list
   sample: >
     The configuration returned will always be in the same format
      of the parameters above.
 after:
   description: The configuration as structured data after module completion.
   returned: when changed
   type: list
   sample: >
Required dependency: __future__, ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces, ansible.module_utils.basic, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces, 
Original metadata: Fix network resource module wording and typographical errors (#61613)
--##### SUMMARY<!--- Describe the change below, including rationale and design decisions -->Backport #61613 documentation updates<!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Docs Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->eos_interfaces##### ADDITIONAL INFORMATION<!--- Include additional information to help people understand the change here --><!--- A step-by-step reproduction of the problem is helpful if there is no related issue --><!--- Paste verbatim command output below, e.g. before and after your change -->```paste below```This is documentation updates related to our new reource modules for network.Depends-On: https://github.com/ansible/ansible/pull/61711Depends-On: https://github.com/ansible/ansible/pull/61883Depends-On: https://github.com/ansible/ansible/pull/61899
needs_revision, needs_rebase, backport, core_review, docs, affects_2.9

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.vyos.config.lldp_interfaces.lldp_interfaces.Lldp_interfaces, __future__.absolute_import, __future__.print_function, ansible.module_utils.basic.AnsibleModule, __future__.division, ansible.module_utils.network.vyos.argspec.lldp_interfaces.lldp_interfaces.Lldp_interfacesArgs
Function name information from Stable: main
Function call information from Stable: Lldp_interfaces, main, AnsibleModule
Class name information from Stable: 
Class method call information from Stable: Lldp_interfacesArgs.argument_spec, module.exit_json
Target file: always, division, country_code, __metaclass__, preview, vyos_lldp_interfaces, COPYING, python, module_utils, overridden, for, playbook, Changes, interface, builder, given, ca_value, Execution, execute_module, License, entry, is, str, required_if, left, made, Replace, works, vyos_lag_interfaces, name, DOCUMENTATION, be, The, elin, all, disable, int, Using, devices, manages, bool, GNU, Civic, Coordinate, US, or, bin, manually, Platform, Lldp_interfaces, grep, ENGLISH, enable, short_description, choices, Longitude, number, civic, when, ansible, prior, merged, the, to, General, version_added, model, basic, by, used, Address, coordinate, platform_vyos, module, file, See, numbers, ELIN, WGS84, code, supported_by, network_cli, false, Red, should, MED, changed, usr, def, helium, remote, provided, Results, Country, main, lldp_interfaces, __future__, commands, eth1, Service, Name, MLLW, on, ca, This, altitude, VyOS, list, Overrides, metadata_version, show, over, __name__, status, delete, Rohit, Before, Main, written, value, absolute_import, EXAMPLES, dict, deleted, after, gnu, OS, country, address, L, from, attributes, interfaces, org, same, RETURN, Lldp_interfacesArgs, WARNING, meters, ca_type, supports_check_mode, txt, Call, run, AnsibleModule, before, configuration, type, default, point, resulting, exit_json, longitude, configurations, against, connection, between, in, print_function, device, rohitthakur2590, will, vyos, LLDP, Copyright, licenses, this, Options, Latitude, gpl, civic_based, suboptions, Thakur, options, www, v3, ANSIBLE_METADATA, generated, Public, required, invocation, __main__, coding, not, author, True, ca_info, above, result, pushed, notes, location, set, returns, parameters, based, eth2, Manages, Code, Module, After, replaced, html, coordinate_based, service, Tested, A, network, NAD83, resource, format, argument_spec, with, Merge, import, Result, execution, Altitude, C, state, utf, generate, if, Do, returned, sample, see, form, Hat, https, config, lldp, description, info, datum, user_guide, argspec, Delete, auto, of, template, listed, Emergency, data, latitude,                                 "
-------------------------------------------------------------------------
"description: The configuration as structured data prior to module invocation.
description: The configuration as structured data after module completion.
"
-------------------------------------------------------------------------
"Recom
PRs: 61613, 61779"
-------------------------------------------------------------------------
=========================================================================
"if module.params.get('permission') and not module.params.get('ignore_nonexistent_bucket'):
    # Wait for the bucket to exist before setting ACLs
    s3.get_waiter('bucket_exists').wait(Bucket=bucket)
"
-------------------------------------------------------------------------
"```python
if module.params.get('permission') and not module.params.get('ignore_nonexistent_bucket'):
    # Wait for the bucket to exist before setting ACLs
    if 'bucket_exists' in s3.meta.client.waiter_names:
        s3.get_waiter('bucket_exists').wait(Bucket=bucket)
    else:
        time.sleep(5)  # Added a fallback wait in case bucket_exists waiter is not available
```  "
-------------------------------------------------------------------------
"if module.params.get('permission'):
"
-------------------------------------------------------------------------
"Recom
PRs: 61735, 61769"
-------------------------------------------------------------------------
=========================================================================
"if module.params.get('permission') and not module.params.get('ignore_nonexistent_bucket'):
    # Wait for the bucket to exist before setting ACLs
    s3.get_waiter('bucket_exists').wait(Bucket=bucket)
"
-------------------------------------------------------------------------
"```python
if module.params.get('permission') and not module.params.get('ignore_nonexistent_bucket'):
    # Wait for the bucket to exist before setting ACLs
    s3.get_waiter('bucket_exists').wait(Bucket=bucket)
```"
-------------------------------------------------------------------------
"if module.params.get('permission'):
    # Wait for the bucket to exist before setting ACLs
    s3.get_waiter('bucket_exists').wait(Bucket=bucket)
"
-------------------------------------------------------------------------
"Recom
PRs: 61735, 61768"
-------------------------------------------------------------------------
=========================================================================
"default: no
"
-------------------------------------------------------------------------
"```python
- default: False
```"
-------------------------------------------------------------------------
"default: no
"
-------------------------------------------------------------------------
"Recom
PRs: 61538, 61679"
-------------------------------------------------------------------------
=========================================================================
"program=dict(type='bool', default=False),
"
-------------------------------------------------------------------------
"```python
options=dict(type='bool', default=False)
```"
-------------------------------------------------------------------------
"program=dict(type='bool', default=False),
"
-------------------------------------------------------------------------
"Recom
PRs: 61538, 61679"
-------------------------------------------------------------------------
=========================================================================
"default: no
"
-------------------------------------------------------------------------
"```yaml
default: no
```"
-------------------------------------------------------------------------
"default: no
"
-------------------------------------------------------------------------
"Recom
PRs: 61538, 61679"
-------------------------------------------------------------------------
=========================================================================
"autocommit=dict(type='bool', default=False),
"
-------------------------------------------------------------------------
"```python
autocommit=dict(type='bool', default=False),
```"
-------------------------------------------------------------------------
"autocommit=dict(type='bool', default=False),
"
-------------------------------------------------------------------------
"Recom
PRs: 61538, 61679"
-------------------------------------------------------------------------
=========================================================================
"default: no
"
-------------------------------------------------------------------------
"```yaml
  cascade:
    description:
    - Automatically drop objects that depend on the sequence, and in turn all
    type: bool
    default: False
```"
-------------------------------------------------------------------------
"default: no
"
-------------------------------------------------------------------------
"Recom
PRs: 61538, 61679"
-------------------------------------------------------------------------
=========================================================================
"default: no
"
-------------------------------------------------------------------------
"```yaml
default: no
```"
-------------------------------------------------------------------------
"default: no
"
-------------------------------------------------------------------------
"Recom
PRs: 61538, 61679"
-------------------------------------------------------------------------
=========================================================================
"cycle=dict(type='bool', default=False),
cascade=dict(type='bool', default=False),
"
-------------------------------------------------------------------------
"```python
def main():
    cycle=dict(type='bool', default=False),
    cascade=dict(type='bool', default=False),
    maxvalue=dict(type='int', aliases=['max']),
    start=dict(type='int'),
    cache=dict(type='int'),
    schema=dict(type='str', default='public'),
    rename_to=dict(type='str'),
    owner=dict(type='str'),
    newschema=dict(type='str'),

```"
-------------------------------------------------------------------------
"cycle=dict(type='bool', default=False),
cascade=dict(type='bool', default=False),
"
-------------------------------------------------------------------------
"Recom
PRs: 61538, 61679"
-------------------------------------------------------------------------
=========================================================================
"unlogged=dict(type='bool', default=False),
truncate=dict(type='bool', default=False),
cascade=dict(type='bool', default=False),
"
-------------------------------------------------------------------------
"```python
def main():
    argument_spec = dict(
        db=dict(type='str', default='', aliases=['login_db']),
        tablespace=dict(type='str'),
        owner=dict(type='str'),
        like=dict(type='str'),
        including=dict(type='str'),
        rename=dict(type='str'),
        columns=dict(type='list'),
        storage_params=dict(type='list'),
        session_role=dict(type='str'),
        unlogged=dict(type='bool', default=False),
        truncate=dict(type='bool', default=False),
        cascade=dict(type='bool', default=False),
    )
    module = AnsibleModule(
        argument_spec=argument_spec,
    )
```"
-------------------------------------------------------------------------
"unlogged=dict(type='bool', default=False),
truncate=dict(type='bool', default=False),
cascade=dict(type='bool', default=False),
"
-------------------------------------------------------------------------
"Recom
PRs: 61538, 61679"
-------------------------------------------------------------------------
=========================================================================
"# We skip cache update in auto install the dependency if the
# user explicitly declared it with update_cache=no.
if module.params.get('update_cache') is False:
    module.warn(""Auto-installing missing dependency without updating cache: %s"" % PYTHON_APT)
else:
    module.warn(""Updating cache and auto-installing missing dependency: %s"" % PYTHON_APT)
    module.run_command(['apt-get', 'update'], check_rc=True)

"
-------------------------------------------------------------------------
"if module.params.get('update_cache') is False:
    module.warn(""Auto-installing missing dependency without updating cache: %s"" % PYTHON_APT)
else:
    module.warn(""Updating cache and auto-installing missing dependency: %s"" % PYTHON_APT)
    module.run_command(['apt-get', 'update'], check_rc=True)"
-------------------------------------------------------------------------
"# We skip cache update in auto install the dependency if the
# user explicitly declared it with update_cache=no.
if module.params.get('update_cache') is False:
    module.warn(""Auto-installing missing dependency without updating cache: %s"" % PYTHON_APT)
else:
    module.warn(""Updating cache and auto-installing missing dependency: %s"" % PYTHON_APT)
    module.run_command(['apt-get', 'update'], check_rc=True)

"
-------------------------------------------------------------------------
"Recom
PRs: 56549, 61627"
-------------------------------------------------------------------------
=========================================================================
"make_dirs,
write_text_test_results,
write_json_test_results,
"
-------------------------------------------------------------------------
"```python
from .util import (
     ApplicationError,
     common_environment,
     ANSIBLE_TEST_DATA_ROOT,
     to_text,
 )

from .util_common import (
     intercept_command,
     ResultType,
 )

from .config import (
    make_dirs,
    write_text_test_results,
    write_json_test_results,
)
```"
-------------------------------------------------------------------------
"make_dirs,
write_text_test_results,
write_json_test_results,
"
-------------------------------------------------------------------------
"Recom
PRs: 61528, 61593"
-------------------------------------------------------------------------
=========================================================================
"paths = _command_coverage_combine_powershell(args)  _command_coverage_combine_python(args)

for path in paths:
    display.info('Generated combined output: %s' % path, verbosity=1)

return paths
"
-------------------------------------------------------------------------
"```python
paths = _command_coverage_combine_powershell(args) + _command_coverage_combine_python(args)

for path in paths:
    display.info('Generated combined output: %s' % path, verbosity=1)

return paths
```"
-------------------------------------------------------------------------
"paths = _command_coverage_combine_powershell(args)  _command_coverage_combine_python(args)

for path in paths:
    display.info('Generated combined output: %s' % path, verbosity=1)

return paths
"
-------------------------------------------------------------------------
"Recom
PRs: 61528, 61593"
-------------------------------------------------------------------------
=========================================================================
"make_dirs(dir_name)
"
-------------------------------------------------------------------------
"```python
import os

def make_dirs(dir_name):
    os.makedirs(dir_name, exist_ok=True)
```"
-------------------------------------------------------------------------
"make_dirs(dir_name)
"
-------------------------------------------------------------------------
"Recom
PRs: 61528, 61593"
-------------------------------------------------------------------------
=========================================================================
"xml_name = '%s.xml' % os.path.basename(output_file)
"
-------------------------------------------------------------------------
"```python
xml_name = os.path.basename(output_file) + '.xml'
```"
-------------------------------------------------------------------------
"xml_name = '%s.xml' % os.path.basename(output_file)
"
-------------------------------------------------------------------------
"Recom
PRs: 61528, 61593"
-------------------------------------------------------------------------
=========================================================================
"write_text_test_results(ResultType.REPORTS, xml_name, pretty)
xml_path = os.path.join(ResultType.REPORTS.path, xml_name)
make_dirs(ResultType.REPORTS.path)
run_coverage(args, output_file, 'xml', ['-i', '-o', xml_path])
"
-------------------------------------------------------------------------
"```python
write_text_test_results(ResultType.REPORTS, xml_name, pretty)
xml_path = os.path.join(ResultType.REPORTS.path, xml_name)
make_dirs(ResultType.REPORTS.path)
run_coverage(args, output_file, 'xml', ['-i', '-o', xml_path])
```"
-------------------------------------------------------------------------
"write_text_test_results(ResultType.REPORTS, xml_name, pretty)
xml_path = os.path.join(ResultType.REPORTS.path, xml_name)
make_dirs(ResultType.REPORTS.path)
run_coverage(args, output_file, 'xml', ['-i', '-o', xml_path])
"
-------------------------------------------------------------------------
"Recom
PRs: 61528, 61593"
-------------------------------------------------------------------------
=========================================================================
"output_file = COVERAGE_OUTPUT_FILE_NAME  group  '-powershell'
write_json_test_results(ResultType.COVERAGE, output_file, coverage_data)

output_files.append(os.path.join(ResultType.COVERAGE.path, output_file))
"
-------------------------------------------------------------------------
"```python
output_file = os.path.join(ResultType.COVERAGE.path, COVERAGE_OUTPUT_FILE_NAME + '-powershell')
write_json_test_results(ResultType.COVERAGE, output_file, coverage_data)

output_files.append(output_file)
```"
-------------------------------------------------------------------------
"output_file = COVERAGE_OUTPUT_FILE_NAME  group  '-powershell'
write_json_test_results(ResultType.COVERAGE, output_file, coverage_data)

output_files.append(os.path.join(ResultType.COVERAGE.path, output_file))
"
-------------------------------------------------------------------------
"Recom
PRs: 61528, 61593"
-------------------------------------------------------------------------
=========================================================================
"- The `default_privs` choice is available starting at version 2.7.
"
-------------------------------------------------------------------------
"Current context: options:
   type:
     description:
     - Type of database object to set privileges on.
     - The 'foreign_data_wrapper' and 'foreign_server' object types are available from Ansible version '2.8'.
     type: str
     default: table
Required dependency: psycopg2.extensions, __future__, ansible.module_utils.database, traceback, ansible.module_utils._text, ansible.module_utils.basic, psycopg2, 
Original metadata: [stable-2.7] Fix typo in postgresql_privs.py (#61365)
--##### SUMMARY
Backport of #61365 for Ansible 2.7

##### ISSUE TYPE
- Docs Pull Request

+label: docsite_pr

(cherry picked from commit 0074fa5672cf4d4e5b74e595394988deb9b01350)
backport, module, community_review, support:community, docs, docsite_pr, affects_2.7, small_patch, postgresql, database

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: psycopg2.extensions, ansible.module_utils.database.pg_quote_identifier, ansible.module_utils.basic.missing_required_lib, __future__.print_function, __future__.absolute_import, ansible.module_utils.basic.AnsibleModule, ansible.module_utils.postgres.postgres_common_argument_spec, ansible.module_utils._text.to_native, traceback, __future__.division, psycopg2
Function name information from Stable: get_default_privs, build, __init__, for_objs, get_foreign_data_wrapper_acls, for_schema, get_all_functions_in_schema, nonesorted, rollback, for_objtype, get_table_acls, get_database_acls, for_whom, get_foreign_server_acls, as_who, get_all_sequences_in_schema, get_group_memberships, encoding, commit, main, get_all_tables_in_schema, add_default_revoke, get_language_acls, add_grant_option, schema_exists, build_present, get_tablespace_acls, get_function_acls, g, with_grant_option, manipulate_privs, get_schema_acls, get_sequence_acls, build_absent, set_what, partial, add_default_priv, role_exists
Function call information from Stable: dict, missing_required_lib, postgres_common_argument_spec, ValueError, role_exists, f, frozenset, getattr, Error, QueryBuilder, AnsibleModule, len, main, type, to_native, Connection, pg_quote_identifier, partial, get_status
Class name information from Stable: Error, QueryBuilder, Connection
Class method call information from Stable: p.grant_option, p.state, psycopg2.extensions, r.strip, g.kwargs, psycopg2.connect, obj_type.replace, self.get_sequence_acls, p.schema, f.split, self.get_tablespace_acls, conn.rollback, conn.cursor, self.query, module.params, obj.upper, status_before.sort, argument_spec.update, self.get_language_acls, privs.issubset, self.get_foreign_data_wrapper_acls, self.get_group_memberships, self.schema_exists, conn.manipulate_privs, psycopg2.Error, kwargs.copy, p.privs, cursor.rowcount, VALID_DEFAULT_OBJS.keys, self._obj_type, obj.split, self._schema, params.ca_cert, conn.commit, psycopg2.__version__, traceback.format_exc, g.f, module.check_mode, module.warn, self.pg_version, cursor.execute, module.fail_json, status_after.sort, params.unix_socket, privs.difference, executed_queries.append, p.roles, objs.issubset, self._grant_option, for_whom.append, self.build_present, params.database, p.type, self.get_table_acls, self.connection, p.target_roles, p.database, module.exit_json, self.get_schema_acls, self.add_default_priv, self.get_function_acls, self.cursor, self.build_absent, new_kwargs.update, conn.get_all_tables_in_schema, self.get_default_privs, e.args, p.session_role, e.message, self.get_foreign_server_acls, self.add_default_revoke, objs.difference, obj.replace, self.get_database_acls, obj_ids.append, self.database, self._as_who, self.module, self._set_what, self._objs, conn.get_all_functions_in_schema, self.add_grant_option, pr.upper, self._state, conn.get_all_sequences_in_schema, g.args, self._for_whom, p.objs
Target file: some, __metaclass__, Postgres, unspecified, extensions, comma, for, fragment, TypeError, user, querying, elif, certificate, for_whom, no_log, upper, SSL, sequences, Type, proname, R, Available, If, databases, Create, who, ORDER, kwargs, datacl, roles, class, can, GNU, May, also, g_kwargs, comparison, bin, qualified, Manipulating, manipulate_privs, ansible, e, alice, Objects, set_what, objs, t, login_password, ValueError, relkind, parameter, Params, ALL, See, DEFAULT, lanname, difference, nothing, should, QueryBuilder, GRANT, books, main, basically, there, get_language_acls, ALL_IN_SCHEMA, ca, OPTION, static, verify, status, stableinterface, bob, roleid, Project, signed, PostgreSQL, signatures, USAGE, JOIN, anything, Alias, after, Some, gnu, alias, None, Wrapper, same, In, effect, SEQUENCES, defaclacl, _set_what, empty, CREATE, pg_roles, b6d, allowed, since, choice, restricted, Only, default, convenience, am, separate, against, Invalid, will, count, nspname, implicitly, suffice, any, build_absent, pr, values, We, get_status, make, get_default_privs, __main__, postgresql, Public, isn, omitted, tables, names, role, status_before, not, True, TYPES, an, authority, information, TEMP, via, _obj_type, authenticate, message, check_mode, exists, UPDATE, funcnames, ALL_DEFAULT, argument_spec, with, systems, import, only, include, cluster, leave, like, pg_language, relacl, priority, postgres, Connection, form, TRIGGER, wrapper, control, check, relnamespace, https, g, doesn, specified, compare, update, property, revoked, another, login_host, _schema, pg_class, When, colons, containing, COPYING, module_utils, f, local, False, literals, accept, PUBLIC, host, License, x, is, math, The, login_unix_socket, unable, FUNCTION, bool, assumed, connections, more, order, choices, when, password, priv, the, localhost, to, version_added, been, for_schema, module, privileges, file, SQL, most, oid, may, For, depends, supported_by, therefore, arguments, languages, granted, authentication, def, Again, Valid, remote, raise, psycopg, memberships, PRIVILEGES, WHERE, it, they, database, This, whether, defaults, list, SELECT, schema, __name__, keys, grant_option, encodings, spcacl, DELETE, b, partial, encoding, functools, groups, login, Types, privilege, v, dict, specific, param, datname, Objs, fetchone, org, TABLE, incorporate, sequence, Could, txt, run, AnsibleModule, ALTER, pronamespace, install, Schema, TCP, group, to_native, _grant_option, socket, community, does, signature, other, identifiers, aliases, specify, Copyright, get_schema_acls, require, grantor, granting, Partial, instead, already, options, admin_option, required, separated, coding, above, old, RESTRICT, Connect, o, try, library, except, around, wide, ImportError, access, return, get_database_acls, TO, TABLES, get_all_sequences_in_schema, get_group_memberships, pg_database, replaced, html, compatible, Defaults, commit, revoking, Return, C, p, Unix, public, secure, SEQUENCE, don, description, needed, examples, and, of, as, determine, snippets, kw, get_table_acls, objtype, itself, domain, must, methods, language, here, singular, CONNECT, no, proargtypes, too, DOCUMENTATION, be, getting, separation, int, k, whom, or, including, pg_default_acl, modes, exist, ssl_mode, psycopg2, General, __init__, basic, commas, WITH, rollback, nspacl, ANY, postgresql_privs, _for_whom, Exception, FROM, args, grant, we, I, unix_socket, privs, changed, Error, alternative, provided, traceback, sometimes, permissions, Illegal, authorities, Grant, get_all_tables_in_schema, sslrootcert, BY, add_default_revoke, DATABASE, Name, Database, special, REVOKE, least, metadata_version, Either, REFERENCES, authors, pg_auth_members, Ubuntu, detection, value, add_default_priv, specifying, functionality, EXAMPLES, ON, _objs, changes, Parameters, VALID_PRIVS, self, extends_documentation_fragment, i, pass, On, supports_check_mode, conn, others, Path, params, valid, Whether, Default, before, type, get, valid_objects_for_priv, packages, IN, build_present, established, username, work, requires, encoded, VALID_DEFAULT_OBJS, in, docs, print_function, append, absent, this, ssl, fetchall, proacl, tablespace, r, application, v3, ANSIBLE_METADATA, version, pg_proc, n, Determines, FOR, was, actually, Set, Unsupported, spcname, at, librarian, based, Ignored, _state, Methods, server, which, allow, msg, libpq, parse, format, schema_exists, if, TEMPORARY, contains, TRUNCATE, info, target, namespace, get_sequence_acls, starting, table, status_after, division, membership, IP, python, connect, being, port, verified, Ansible, yes, fail_json, current, sudo, case, what, new_kwargs, matches, split, you, works, full, prefer, name, admin, all, Debian, disable, ssl_rootcert, requirements, pg_tablespace, Python, specifies, pg_namespace, option, obviously, objects, FUNCTIONS, short_description, is_localhost, pg_catalog, support, add, AND, Specifies, else, by, for_objtype, sslmode, object, types, Manipulate, List, ADMIN, _text, lanacl, usr, schema_qualifier, relname, Bernhard, __future__, S, obj_ids, Note, query, EXECUTE, keyword, on, add_grant_option, leveraging, obj_type, __version__, get_function_acls, that, schemas, quoted, Argument, dictionary, still, do, absolute_import, rolname, build, s, revoke, execute, c, address, INSERT, from, reader, format_exc, CA, frozenset, apply, a, Weitzhofer, g_args, Postgresql, defaclnamespace, db, copy, issubset, string, exit_json, cases, connection, statements, present, Comma, params_map, has, ACLs, with_grant_option, exception, replace, package, licenses, want, gpl, default_prives, assumes, www, parsed, Same, for_objs, author, set, notes, cursor, are, function_signatures, checked, have, member, getattr, one, lists, using, negotiated, available, change, phrases, these, escaped, To, function, obj, login_user, state, utf, join, use, see, installed, Object, well, get_tablespace_acls, tablespaces, afterwards, so, pg_quote_identifier, certain, SCHEMA, defined

Adapted: 
Current context: options:
   type:
     description:
     - Type of database object to set privileges on.
     - The 'foreign_data_wrapper' and 'foreign_server' object types are available from Ansible version '2.8'. The `default_privs` choice is available starting at version '2.7'.
     type: str
     default: table
Required dependency: psycopg2.extensions, __future__, ansible.module_utils.database, traceback, ansible.module_utils._text, ansible.module_utils.basic, psycopg2, 
Original metadata: [stable-2.7] Fix typo in postgresql_privs.py (#61365)"
-------------------------------------------------------------------------
"- The `default_privs` choice is available starting at version 2.7.
"
-------------------------------------------------------------------------
"Recom
PRs: 61365, 61428"
-------------------------------------------------------------------------
=========================================================================
"- The `default_privs` choice is available starting at version 2.7.
"
-------------------------------------------------------------------------
"```python
Current context: options:
   type:
     description:
     - Type of database object to set privileges on.
     - The 'foreign_data_wrapper' and 'foreign_server' object types are available from Ansible version '2.8'.
     type: str
     default: table
     choices:
     - table
     - default_privs
Required dependency: psycopg2.extensions, __future__, ansible.module_utils.database, psycopg2, traceback, ansible.module_utils._text, ansible.module_utils.basic, ansible.module_utils.postgres, 
Original metadata: [stable-2.8] Fix typo in postgresql_privs.py (#61365)
--##### SUMMARY
Backport of #61365 for Ansible 2.8

##### ISSUE TYPE
- Docs Pull Request

+label: docsite_pr

(cherry picked from commit 0074fa5672cf4d4e5b74e595394988deb9b01350)
backport, module, community_review, support:community, docs, docsite_pr, small_patch, affects_2.8, postgresql, database

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: psycopg2.extensions, ansible.module_utils.database.pg_quote_identifier, ansible.module_utils.basic.missing_required_lib, __future__.print_function, __future__.absolute_import, ansible.module_utils.basic.AnsibleModule, ansible.module_utils.postgres.postgres_common_argument_spec, ansible.module_utils._text.to_native, traceback, __future__.division, psycopg2
Function name information from Stable: get_default_privs, build, __init__, for_objs, get_foreign_data_wrapper_acls, for_schema, get_all_functions_in_schema, nonesorted, rollback, for_objtype, get_table_acls, get_database_acls, for_whom, get_foreign_server_acls, as_who, get_all_sequences_in_schema, get_group_memberships, encoding, commit, main, get_all_tables_in_schema, add_default_revoke, get_language_acls, add_grant_option, schema_exists, build_present, get_tablespace_acls, get_function_acls, g, with_grant_option, manipulate_privs, get_schema_acls, get_sequence_acls, build_absent, set_what, partial, add_default_priv, role_exists
Function call information from Stable: dict, missing_required_lib, postgres_common_argument_spec, ValueError, role_exists, f, frozenset, getattr, Error, QueryBuilder, AnsibleModule, len, main, type, to_native, Connection, pg_quote_identifier, partial, get_status
Class name information from Stable: Error, QueryBuilder, Connection
Class method call information from Stable: p.grant_option, p.state, psycopg2.extensions, r.strip, g.kwargs, psycopg2.connect, obj_type.replace, self.get_sequence_acls, p.schema, f.split, self.get_tablespace_acls, conn.rollback, conn.cursor, self.query, module.params, obj.upper, status_before.sort, argument_spec.update, self.get_language_acls, privs.issubset, self.get_foreign_data_wrapper_acls, self.get_group_memberships, self.schema_exists, conn.manipulate_privs, psycopg2.Error, kwargs.copy, p.privs, cursor.rowcount, VALID_DEFAULT_OBJS.keys, self._obj_type, obj.split, self._schema, params.ca_cert, conn.commit, psycopg2.__version__, traceback.format_exc, g.f, module.check_mode, module.warn, self.pg_version, cursor.execute, module.fail_json, status_after.sort, params.unix_socket, privs.difference, executed_queries.append, p.roles, objs.issubset, self.build_present, params.database, p.type, self.get_table_acls, self.connection, p.target_roles, p.database, module.exit_json, self.get_schema_acls, self.add_default_priv, self.get_function_acls, self.cursor, self.build_absent, new_kwargs.update, conn.get_all_tables_in_schema, self.get_default_privs, e.args, p.session_role, e.message, self.get_foreign_server_acls, self.add_default_revoke, objs.difference, obj.replace, self.get_database_acls, obj_ids.append, self.database, self._as_who, self.module, self._set_what, self._objs, conn.get_all_functions_in_schema, self.add_grant_option, pr.upper, self._state, conn.get_all_sequences_in_schema, g.args, self._for_whom, p.objs
Target file: always, some, __metaclass__, Postgres, unspecified, extensions, comma, fail_on_role, for, fragment, TypeError, user, ca_cert, querying, certificate, elif, for_whom, no_log, upper, SSL, sequences, Type, proname, R, str, Available, If, databases, Create, who, ORDER, subsequently, kwargs, datacl, though, roles, class, can, GNU, May, also, g_kwargs, comparison, bin, session_role, qualified, Manipulating, manipulate_privs, ansible, e, alice, Objects, set_what, objs, t, login_password, ValueError, fdw, relkind, parameter, Params, test, ALL, See, DEFAULT, lanname, difference, foreign_server, nothing, should, QueryBuilder, GRANT, books, main, basically, there, get_language_acls, ALL_IN_SCHEMA, ca, OPTION, static, verify, status, stableinterface, bob, roleid, Project, signed, PostgreSQL, signatures, USAGE, JOIN, anything, after, Some, gnu, alias, None, foreign_data_wrapper, Wrapper, same, as_who, In, effect, SEQUENCES, defaclacl, _set_what, empty, CREATE, pg_roles, b6d, ROLE, queries, allowed, since, choice, restricted, Only, default, convenience, am, separate, against, Invalid, DATA, PSYCOPG2_IMP_ERR, had, will, count, nspname, implicitly, suffice, any, build_absent, pr, values, We, get_status, make, get_default_privs, __main__, postgresql, Public, isn, omitted, postgres_common_argument_spec, names, role, tables, not, True, status_before, TYPES, an, authority, information, TEMP, usage, via, word, _obj_type, authenticate, message, check_mode, exists, UPDATE, funcnames, ALL_DEFAULT, len, argument_spec, with, systems, import, only, include, cluster, leave, like, pg_language, relacl, priority, postgres, Connection, form, TRIGGER, wrapper, control, check, relnamespace, https, g, doesn, _as_who, specified, compare, update, property, revoked, login_host, another, RETURN, _schema, SET, pg_class, When, srvname, colons, get_all_functions_in_schema, containing, COPYING, module_utils, f, fs, local, login_port, pg_foreign_data_wrapper, False, literals, accept, PUBLIC, host, License, x, is, math, Underscores, The, login_unix_socket, unable, FUNCTION, bool, assumed, connections, more, order, choices, when, password, priv, Switch, the, localhost, to, version_added, been, for_schema, module, privileges, file, SQL, most, oid, may, For, depends, supported_by, therefore, arguments, languages, granted, authentication, def, Again, Valid, remote, raise, psycopg, memberships, PRIVILEGES, WHERE, it, Permissions, they, database, This, whether, defaults, list, SELECT, schema, __name__, keys, grant_option, encodings, spcacl, DELETE, b, partial, encoding, functools, groups, login, Types, privilege, v, dict, specific, param, datname, Objs, fetchone, org, TABLE, get_foreign_server_acls, incorporate, sequence, Could, txt, run, AnsibleModule, ALTER, pronamespace, install, Schema, TCP, group, to_native, _grant_option, socket, community, does, signature, other, identifiers, aliases, specify, Copyright, get_schema_acls, require, grantor, granting, Partial, instead, oidvectortypes, already, options, admin_option, required, separated, coding, above, old, RESTRICT, Connect, o, _, try, library, need, except, around, wide, ImportError, access, return, get_database_acls, TO, TABLES, get_all_sequences_in_schema, get_group_memberships, pg_database, replaced, were, html, compatible, Defaults, A, commit, switch, revoking, m, Return, C, p, Unix, fdwname, returned, public, secure, SEQUENCE, don, description, needed, examples, and, of, as, determine, checking, snippets, new, step, get_foreign_data_wrapper_acls, them, kw, get_table_acls, objtype, itself, must, domain, methods, language, here, singular, CONNECT, no, FOREIGN, proargtypes, too, DOCUMENTATION, be, getting, separation, int, k, whom, or, including, pg_default_acl, modes, exist, fdwacl, ssl_mode, psycopg2, General, __init__, basic, commas, WITH, rollback, nspacl, ANY, postgresql_privs, _for_whom, Exception, FROM, args, grant, we, I, unix_socket, privs, changed, pg_foreign_server, Error, alternative, provided, traceback, sometimes, permissions, Illegal, authorities, Grant, rowcount, get_all_tables_in_schema, sslrootcert, BY, add_default_revoke, DATABASE, Name, Database, special, REVOKE, least, metadata_version, fdws, Either, REFERENCES, authors, pg_auth_members, Ubuntu, detection, value, logged, caller, add_default_priv, role_exists, specifying, functionality, EXAMPLES, ON, _objs, changes, Parameters, VALID_PRIVS, connecting, self, extends_documentation_fragment, i, pass, On, supports_check_mode, conn, others, Path, ignored, params, valid, Whether, Default, before, type, get, valid_objects_for_priv, packages, IN, build_present, established, username, work, requires, encoded, VALID_DEFAULT_OBJS, in, docs, print_function, append, absent, fail, executed_queries, this, ssl, fetchall, proacl, default_privs, tablespace, r, application, v3, ANSIBLE_METADATA, version, created, pg_proc, n, Revoke, Determines, FOR, was, actually, fdw_server, Set, Unsupported, spcname, at, librarian, based, Ignored, _state, Methods, server, which, allow, msg, libpq, parse, format, schema_exists, if, TEMPORARY, contains, TRUNCATE, info, target, namespace, get_sequence_acls, carried, starting, table, executed, status, division, membership, originally, IP, python, connect, being, port, verified, Ansible, yes, fail_json, current, sudo, case, what, new_kwargs, matches, split, you, works, full, prefer, name, admin, all, Debian, disable, ssl_rootcert, requirements, pg_tablespace, srvacl, Python, specifies, pg_namespace, option, obviously, objects, FUNCTIONS, short_description, is_localhost, pg_catalog, support, add, AND, WRAPPER, Specifies, login_db, else, by, for_objtype, spaces, sslmode, object, types, Manipulate, List, Otherwise, ADMIN, _text, lanacl, usr, schema_qualifier, relname, Bernhard, __future__, commands, S, obj_ids, out, Note, EXECUTE, query, keyword, on, add_grant_option, leveraging, obj_type, __version__, get_function_acls, that, schemas, quoted, Argument, dictionary, still, do, absolute_import, rolname, missing_required_lib, build, s, revoke, execute, c, address, INSERT, from, reader, Cannot, format_exc, CA, frozenset, apply, a, Weitzhofer, g_args, Postgresql, existing, defaclnamespace, partition, db, continue, warn, copy, strip, issubset, Parameter, string, exit_json, cases, connection, Check, statements, present, Comma, params_map, has, ACLs, replace, with_grant_option, exception, package, licenses, want, Role, gpl, default_prives, assumes, www, SERVER, Same, parsed, for_objs, author, just, set, notes, cursor, are, common, function_signatures, target_roles, checked, have, member, getattr, one, lists, using, negotiated, available, change, phrases, these, escaped, To, function, obj, login_user, state, utf, join, use, sample, see, installed, Object, well, get_tablespace_acls, tablespaces, afterwards, so, functions, pg_quote_identifier, certain, multi, SCHEMA, valueC, defined
```"
-------------------------------------------------------------------------
"- The `default_privs` choice is available starting at version 2.7.
"
-------------------------------------------------------------------------
"Recom
PRs: 61365, 61427"
-------------------------------------------------------------------------
=========================================================================
"result, dummy = self.account.get_request(self.order_uri)
"
-------------------------------------------------------------------------
"result, dummy = self.account.get_request(self.order_uri)"
-------------------------------------------------------------------------
"result, dummy = self.account.get_request(self.order_uri)
"
-------------------------------------------------------------------------
"Recom
PRs: 60727, 61328"
-------------------------------------------------------------------------
=========================================================================
"- For 'portage' support it requires the C(qlist) utility, which is part of 'app-portage/portage-utils'.
- For Debian-based systems C(python-apt) package must be installed on targeted hosts.
"
-------------------------------------------------------------------------
"```
options:
  version_added: ""2.8""
requirements:
  - ""portage-utils""
  - ""python-apt""
author:
  - Matthew Jones (@matburt)
  - Brian Coca (@bcoca)
```"
-------------------------------------------------------------------------
"- For 'portage' support it requires the C(qlist) utility, which is part of 'app-portage/portage-utils'.
- For Debian-based systems C(python-apt) package must be installed on targeted hosts.
"
-------------------------------------------------------------------------
"Recom
PRs: 60999, 61101"
-------------------------------------------------------------------------
=========================================================================
"msg = ('Could not detect a supported package manager from the following list: %s, '
       'or the required Python library is not installed. Check warnings for details.' % managers)
module.fail_json(msg=msg)
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.facts.packages import get_all_pkg_managers
from ansible.module_utils.basic import missing_required_lib
from ansible.module_utils._text import to_text
from __future__ import absolute_import
from ansible.module_utils.basic import AnsibleModule

def main():
    managers = get_all_pkg_managers()
    if not managers:
        msg = ('Could not detect a supported package manager from the following list: %s, '
               'or the required Python library is not installed. Check warnings for details.' % managers)
        module.fail_json(msg=msg)

if __name__ == ""__main__"":
    main()
```  "
-------------------------------------------------------------------------
"msg = ('Could not detect a supported package manager from the following list: %s, '
       'or the required Python library is not installed. Check warnings for details.' % managers)
module.fail_json(msg=msg)
"
-------------------------------------------------------------------------
"Recom
PRs: 60999, 61101"
-------------------------------------------------------------------------
=========================================================================
"group_name = original_safe(group_name, force=True)
"
-------------------------------------------------------------------------
"```python
group_name = self.templar.original_safe(group_name, force=True)
```"
-------------------------------------------------------------------------
"group_name = original_safe(group_name, force=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 60912, 60958"
-------------------------------------------------------------------------
=========================================================================
"- If an image does not exist locally, it will not appear in the results. If you want to check whether an image exists
  locally, you can call the module with the image name, then check whether the result list is empty (image does not
  exist) or has one element (the image exists locally).
- The module will not attempt to pull images from registries. Use M(docker_image) with I(source) set to C(pull)
  to ensure an image is pulled.
"
-------------------------------------------------------------------------
"```python
# If an image does not exist locally, it will not appear in the results. If you want to check whether an image exists
# locally, you can call the module with the image name, then check whether the result list is empty (image does not
# exist) or has one element (the image exists locally).
#
# The module will not attempt to pull images from registries. Use M(docker_image) with I(source) set to C(pull)
# to ensure an image is pulled.

```"
-------------------------------------------------------------------------
"- If an image does not exist locally, it will not appear in the results. If you want to check whether an image exists
  locally, you can call the module with the image name, then check whether the result list is empty (image does not
  exist) or has one element (the image exists locally).
- The module will not attempt to pull images from registries. Use M(docker_image) with I(source) set to C(pull)
  to ensure an image is pulled.
"
-------------------------------------------------------------------------
"Recom
PRs: 60622, 60885"
-------------------------------------------------------------------------
=========================================================================
"register: result

name: Make sure that both images pacur/centos-7 and sinatra exist locally
assert:
  that:
    - result.images | length == 2
  description:
    - Inspection results for the selected images.
    - The list only contains inspection results of images existing locally.
  type: list
"
-------------------------------------------------------------------------
"```yaml
assert:
  that:
    - result.images | length == 2
  description:
    - Inspection results for the selected images.
    - The list only contains inspection results of images existing locally.
  type: list
name:
  - pacur/centos-7
  - sinatra
```"
-------------------------------------------------------------------------
"register: result

name: Make sure that both images pacur/centos-7 and sinatra exist locally
assert:
  that:
    - result.images | length == 2
  description:
    - Inspection results for the selected images.
    - The list only contains inspection results of images existing locally.
  type: list
"
-------------------------------------------------------------------------
"Recom
PRs: 60622, 60885"
-------------------------------------------------------------------------
=========================================================================
"if not self._validate_privatekey():
    return False
"
-------------------------------------------------------------------------
"```python
if not self._validate_privatekey():
    return False
```"
-------------------------------------------------------------------------
"if not self._validate_privatekey():
    return False
"
-------------------------------------------------------------------------
"Recom
PRs: 60745, 60747"
-------------------------------------------------------------------------
=========================================================================
"ports = []
    port_spec = {
        'Protocol': port['protocol'],
        'PublishedPort': port['published_port'],
        'TargetPort': port['target_port']
    }
        port_spec['PublishMode'] = port['mode']
    ports.append(port_spec)
"
-------------------------------------------------------------------------
"```python
ports = []
port_spec = {
    'Protocol': port['protocol'],
    'PublishedPort': port['published_port'],
    'TargetPort': port['target_port'],
    'PublishMode': port['mode']
}
ports.append(port_spec)
```"
-------------------------------------------------------------------------
"ports = []
    port_spec = {
        'Protocol': port['protocol'],
        'PublishedPort': port['published_port'],
        'TargetPort': port['target_port']
    }
        port_spec['PublishMode'] = port['mode']
    ports.append(port_spec)
"
-------------------------------------------------------------------------
"Recom
PRs: 60616, 60697"
-------------------------------------------------------------------------
=========================================================================
"if b'Not logged in to ' in out:
    self.results['changed'] = False
elif b'Removing login credentials for ' in out:
    self.results['changed'] = True
else:
    self.client.module.warn('Unable to determine whether logout was successful.')

# Adding output to actions, so that user can inspect what was actually returned
self.results['actions'].append(to_text(out))
"
-------------------------------------------------------------------------
"```python
if b'Not logged in to ' in out:
    self.results['changed'] = False
elif b'Removing login credentials for ' in out:
    self.results['changed'] = True
else:
    self.client.module.warn('Unable to determine whether logout was successful.')

self.results['actions'].append(to_text(out))
```"
-------------------------------------------------------------------------
"if b'Not logged in to ' in out:
    self.results['changed'] = False
elif b'Removing login credentials for ' in out:
    self.results['changed'] = True
else:
    self.client.module.warn('Unable to determine whether logout was successful.')

# Adding output to actions, so that user can inspect what was actually returned
self.results['actions'].append(to_text(out))
"
-------------------------------------------------------------------------
"Recom
PRs: 60381, 60585"
-------------------------------------------------------------------------
=========================================================================
"- Usable with oVirt 4.3 and lower; removed in oVirt 4.4.
- Usable with oVirt 4.3 and lower; removed in oVirt 4.4.
- Usable with oVirt 4.3 and lower; removed in oVirt 4.4.
- Usable with oVirt 4.3 and lower; removed in oVirt 4.4.
"
-------------------------------------------------------------------------
"```yaml
kernel_params:
    description:
        - ""If I(True) C(kernel_params) will persist in virtual machine configuration,
           if I(False) it will be used for run once.""
    type: bool
    version_added: ""4.3""
```"
-------------------------------------------------------------------------
"- Usable with oVirt 4.3 and lower; removed in oVirt 4.4.
- Usable with oVirt 4.3 and lower; removed in oVirt 4.4.
- Usable with oVirt 4.3 and lower; removed in oVirt 4.4.
- Usable with oVirt 4.3 and lower; removed in oVirt 4.4.
"
-------------------------------------------------------------------------
"Recom
PRs: 60407, 60582"
-------------------------------------------------------------------------
=========================================================================
"engine_supported,
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.ovirt import (
    search_by_attributes,
    search_by_name,
    wait,
)
from ansible.module_utils.basic import ansible
from ovirtsdk4.types import traceback
```"
-------------------------------------------------------------------------
"engine_supported,
"
-------------------------------------------------------------------------
"Recom
PRs: 60474, 60581"
-------------------------------------------------------------------------
=========================================================================
"def check_deprecated_params(module, connection):
if engine_supported(connection, '4.4') and \
        (module.params.get('kernel_params_persist') is not None or
         module.params.get('kernel_path') is not None or
         module.params.get('initrd_path') is not None or
         module.params.get('kernel_params') is not None):
    module.warn(""Parameters 'kernel_params_persist', 'kernel_path', 'initrd_path', 'kernel_params' are not supported since oVirt 4.4."")


"
-------------------------------------------------------------------------
"```python
def check_deprecated_params(module, connection):
    if engine_supported(connection, '4.4') and any(
            module.params.get(param) is not None for param in ['kernel_params_persist', 'kernel_path', 'initrd_path', 'kernel_params']
    ):
        module.warn(""Parameters 'kernel_params_persist', 'kernel_path', 'initrd_path', 'kernel_params' are not supported since oVirt 4.4."")
```"
-------------------------------------------------------------------------
"def check_deprecated_params(module, connection):
if engine_supported(connection, '4.4') and \
        (module.params.get('kernel_params_persist') is not None or
         module.params.get('kernel_path') is not None or
         module.params.get('initrd_path') is not None or
         module.params.get('kernel_params') is not None):
    module.warn(""Parameters 'kernel_params_persist', 'kernel_path', 'initrd_path', 'kernel_params' are not supported since oVirt 4.4."")


"
-------------------------------------------------------------------------
"Recom
PRs: 60474, 60581"
-------------------------------------------------------------------------
=========================================================================
"check_deprecated_params(module, connection)
"
-------------------------------------------------------------------------
"```python
def check_deprecated_params(module, connection):
    state = module.params['state']
    auth = module.params.pop('auth')
    connection = create_connection(auth)
    vms_service = connection.system_service().vms_service()
    vms_module = VmsModule(
        connection=connection,
    )
```"
-------------------------------------------------------------------------
"check_deprecated_params(module, connection)
"
-------------------------------------------------------------------------
"Recom
PRs: 60474, 60581"
-------------------------------------------------------------------------
=========================================================================
"if self._cache is not None:
"
-------------------------------------------------------------------------
"```python
if self._cache is not None:
```"
-------------------------------------------------------------------------
"if self._cache is not None:
# Store the cache to avoid running pkg_cache() for each item in the comprehension, which is very slow
cache = self.pkg_cache
return [pk for pk in cache.keys() if cache[pk].is_installed]
"
-------------------------------------------------------------------------
"Recom
PRs: 60511, 60574"
-------------------------------------------------------------------------
=========================================================================
"@property
def receive(self):
    return cmp_str_with_none(self.want.receive, self.have.receive)

"
-------------------------------------------------------------------------
"```python
@property
def receive(self):
    return cmp_str_with_none(self.want.receive, self.have.receive)
```"
-------------------------------------------------------------------------
"@property
def receive(self):
    return cmp_str_with_none(self.want.receive, self.have.receive)

"
-------------------------------------------------------------------------
"Recom
PRs: 59999, 60541"
-------------------------------------------------------------------------
=========================================================================
"@property
def receive(self):
    return cmp_str_with_none(self.want.receive, self.have.receive)

"
-------------------------------------------------------------------------
"```python
@property
def receive(self):
    return cmp_str_with_none(self.want.receive, self.have.receive)
```"
-------------------------------------------------------------------------
"@property
def receive(self):
    return cmp_str_with_none(self.want.receive, self.have.receive)

"
-------------------------------------------------------------------------
"Recom
PRs: 59999, 60541"
-------------------------------------------------------------------------
=========================================================================
"assert 'must be between' in str(ex.value)
"
-------------------------------------------------------------------------
"self.assertIn('must be between', str(ex.value))"
-------------------------------------------------------------------------
"assert 'must be between' in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59999, 60541"
-------------------------------------------------------------------------
=========================================================================
"assert 'The provided name must be a valid FQDN' in str(excinfo.value)
"
-------------------------------------------------------------------------
assert 'The provided name must be a valid FQDN' in str(excinfo.value)
-------------------------------------------------------------------------
"assert 'The provided name must be a valid FQDN' in str(excinfo.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59999, 60541"
-------------------------------------------------------------------------
=========================================================================
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"self.assertIn(""must be less than"", str(ex.value))"
-------------------------------------------------------------------------
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59999, 60541"
-------------------------------------------------------------------------
=========================================================================
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"self.assertIn(""must be less than"", str(ex.value))"
-------------------------------------------------------------------------
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59999, 60541"
-------------------------------------------------------------------------
=========================================================================
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"self.assertIn(""must be less than"", str(ex.value))"
-------------------------------------------------------------------------
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59999, 60541"
-------------------------------------------------------------------------
=========================================================================
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"self.assertIn(""must be less than"", str(ex.value))"
-------------------------------------------------------------------------
"assert ""must be less than"" in str(ex.value)
"
-------------------------------------------------------------------------
"Recom
PRs: 59999, 60541"
-------------------------------------------------------------------------
=========================================================================
"return [vm['vmid'] for vm in proxmox.cluster.resources.get(type='vm') if vm.get('name') == name]
"
-------------------------------------------------------------------------
"```python
return [vm['vmid'] for vm in proxmox.cluster.resources.get(type='vm') if vm.get('name') == name]
```"
-------------------------------------------------------------------------
"return [vm['vmid'] for vm in proxmox.cluster.resources.get(type='vm') if vm.get('name') == name]
"
-------------------------------------------------------------------------
"Recom
PRs: 58196, 60504"
-------------------------------------------------------------------------
=========================================================================
"template_cluster:
    description:
        - ""Template cluster name. When not defined C(cluster) is used.""
        - ""Allows you to create virtual machine in diffrent cluster than template cluster name.""
    version_added: ""2.9""
"
-------------------------------------------------------------------------
"```yaml
template_cluster:
    description:
        - ""Template cluster name. When not defined C(cluster) is used.""
        - ""Allows you to create virtual machine in a different cluster than the template cluster name.""
    version_added: ""2.9""
```"
-------------------------------------------------------------------------
"""Template with name '%s' and version '%s' in data center '%s' was not found'"" % (
    data_center.name
"
-------------------------------------------------------------------------
"Recom
PRs: 59378, 60478"
-------------------------------------------------------------------------
=========================================================================
"- ""Indicates that the host should be removed even if it is non-responsive,
   or if it is part of a Gluster Storage cluster and has volume bricks on it.""
"
-------------------------------------------------------------------------
"```
override_display:
    description: ""Indicates that the host should be removed even if it is non-responsive, or if it is part of a Gluster Storage cluster and has volume bricks on it.""
```"
-------------------------------------------------------------------------
"- ""Indicates that the host should be removed even if it is non-responsive,
   or if it is part of a Gluster Storage cluster and has volume bricks on it.""
"
-------------------------------------------------------------------------
"Recom
PRs: 60202, 60475"
-------------------------------------------------------------------------
=========================================================================
"if not self.isPrivateKeyValid(module, perms_required=False) or self.force:
"
-------------------------------------------------------------------------
"```python
if not self.isPrivateKeyValid(module, perms_required=False) or self.force:
```"
-------------------------------------------------------------------------
"if not self.isPrivateKeyValid(module, perms_required=False) or self.force:
"
-------------------------------------------------------------------------
"Recom
PRs: 57993, 60374"
-------------------------------------------------------------------------
=========================================================================
"elif not self.isPublicKeyValid(module):
    pubkey = module.run_command([module.get_bin_path('ssh-keygen', True), '-yf', self.path])
    pubkey = pubkey[1].strip('\n')
    try:
        self.changed = True
        with open(self.path  "".pub"", ""w"") as pubkey_f:
            pubkey_f.write(pubkey  '\n')
        os.chmod(self.path  "".pub"", stat.S_IWUSR  stat.S_IRUSR  stat.S_IRGRP  stat.S_IROTH)
    except IOError:
        module.fail_json(
            msg='The public key is missing or does not match the private key. '
                'Unable to regenerate the public key.')
    self.public_key = pubkey

    if self.comment:
        try:
            if os.path.exists(self.path) and not os.access(self.path, os.W_OK):
                os.chmod(self.path, stat.S_IWUSR  stat.S_IRUSR)
            args = [module.get_bin_path('ssh-keygen', True),
                    '-q', '-o', '-c', '-C', self.comment, '-f', self.path]
            module.run_command(args)
        except IOError:
            module.fail_json(
                msg='Unable to update the comment for the public key.')

isPrivateKeyValid(self, module, perms_required=True):
"
-------------------------------------------------------------------------
"```python
elif not self.isPublicKeyValid(module):
    pubkey = module.run_command([module.get_bin_path('ssh-keygen', True), '-yf', self.path])
    pubkey = pubkey[1].strip('\n')
    try:
        self.changed = True
        with open(self.path + "".pub"", ""w"") as pubkey_f:
            pubkey_f.write(pubkey + '\n')
        os.chmod(self.path + "".pub"", stat.S_IWUSR | stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)
    except IOError:
        module.fail_json(
            msg='The public key is missing or does not match the private key. '
                'Unable to regenerate the public key.')
    self.public_key = pubkey

    if self.comment:
        try:
            if os.path.exists(self.path) and not os.access(self.path, os.W_OK):
                os.chmod(self.path, stat.S_IWUSR | stat.S_IRUSR)
            args = [module.get_bin_path('ssh-keygen', True),
                    '-q', '-o', '-c', '-C', self.comment, '-f', self.path]
            module.run_command(args)
        except IOError:
            module.fail_json(
                msg='Unable to update the comment for the public key.')

isPrivateKeyValid(self, module, perms_required=True):
```"
-------------------------------------------------------------------------
"elif not self.isPublicKeyValid(module):
    pubkey = module.run_command([module.get_bin_path('ssh-keygen', True), '-yf', self.path])
    pubkey = pubkey[1].strip('\n')
    try:
        self.changed = True
        with open(self.path  "".pub"", ""w"") as pubkey_f:
            pubkey_f.write(pubkey  '\n')
        os.chmod(self.path  "".pub"", stat.S_IWUSR  stat.S_IRUSR  stat.S_IRGRP  stat.S_IROTH)
    except IOError:
        module.fail_json(
            msg='The public key is missing or does not match the private key. '
                'Unable to regenerate the public key.')
    self.public_key = pubkey

    if self.comment:
        try:
            if os.path.exists(self.path) and not os.access(self.path, os.W_OK):
                os.chmod(self.path, stat.S_IWUSR  stat.S_IRUSR)
            args = [module.get_bin_path('ssh-keygen', True),
                    '-q', '-o', '-c', '-C', self.comment, '-f', self.path]
            module.run_command(args)
        except IOError:
            module.fail_json(
                msg='Unable to update the comment for the public key.')

isPrivateKeyValid(self, module, perms_required=True):
"
-------------------------------------------------------------------------
"Recom
PRs: 57993, 60374"
-------------------------------------------------------------------------
=========================================================================
"def isPublicKeyValid(self, module):

    def _get_pubkey_content():
        if os.path.exists(self.path  "".pub""):
            with open(self.path  "".pub"", ""r"") as pubkey_f:
                present_pubkey = pubkey_f.read().strip(' \n')
            return present_pubkey
        else:
            return False

    def _parse_pubkey():
        pubkey_content = _get_pubkey_content()
        if pubkey_content:
            parts = pubkey_content.split(' ', 2)
            return parts[0], parts[1], '' if len(parts) <= 2 else parts[2]
        return False

    def _pubkey_valid(pubkey):
        if pubkey_parts:
            current_pubkey = ' '.join([pubkey_parts[0], pubkey_parts[1]])
            return current_pubkey == pubkey
        return False

    def _comment_valid():
        if pubkey_parts:
            return pubkey_parts[2] == self.comment
        return False

    pubkey = module.run_command([module.get_bin_path('ssh-keygen', True), '-yf', self.path])
    pubkey = pubkey[1].strip('\n')
    pubkey_parts = _parse_pubkey()
    if _pubkey_valid(pubkey):
        self.public_key = pubkey

    if not self.comment:
        return _pubkey_valid(pubkey)

    return _pubkey_valid(pubkey) and _comment_valid()

"
-------------------------------------------------------------------------
"import os
from ansible.module_utils.basic import AnsibleModule

class Keypair(object):

    def isPublicKeyValid(self, module):

        def _get_pubkey_content():
            if os.path.exists(self.path + "".pub""):
                with open(self.path + "".pub"", ""r"") as pubkey_f:
                    present_pubkey = pubkey_f.read().strip(' \n')
                return present_pubkey
            else:
                return False

        def _parse_pubkey():
            pubkey_content = _get_pubkey_content()
            if pubkey_content:
                parts = pubkey_content.split(' ', 2)
                return parts[0], parts[1], '' if len(parts) <= 2 else parts[2]
            return False

        def _pubkey_valid(pubkey):
            pubkey_parts = _parse_pubkey()
            if pubkey_parts:
                current_pubkey = ' '.join([pubkey_parts[0], pubkey_parts[1]])
                return current_pubkey == pubkey
            return False

        def _comment_valid():
            pubkey_parts = _parse_pubkey()
            if pubkey_parts:
                return pubkey_parts[2] == self.comment
            return False

        pubkey = module.run_command([module.get_bin_path('ssh-keygen', True), '-yf', self.path])
        pubkey = pubkey[1].strip('\n')
        
        if _pubkey_valid(pubkey):
            self.public_key = pubkey

        if not self.comment:
            return _pubkey_valid(pubkey)

        return _pubkey_valid(pubkey) and _comment_valid()


# Example Usage:
# module = AnsibleModule(argument_spec={}, supports_check_mode=False)
# keypair = Keypair()
# result = keypair.isPublicKeyValid(module)
# print(result)"
-------------------------------------------------------------------------
"def isPublicKeyValid(self, module):

    def _get_pubkey_content():
        if os.path.exists(self.path  "".pub""):
            with open(self.path  "".pub"", ""r"") as pubkey_f:
                present_pubkey = pubkey_f.read().strip(' \n')
            return present_pubkey
        else:
            return False

    def _parse_pubkey():
        pubkey_content = _get_pubkey_content()
        if pubkey_content:
            parts = pubkey_content.split(' ', 2)
            return parts[0], parts[1], '' if len(parts) <= 2 else parts[2]
        return False

    def _pubkey_valid(pubkey):
        if pubkey_parts:
            current_pubkey = ' '.join([pubkey_parts[0], pubkey_parts[1]])
            return current_pubkey == pubkey
        return False

    def _comment_valid():
        if pubkey_parts:
            return pubkey_parts[2] == self.comment
        return False

    pubkey = module.run_command([module.get_bin_path('ssh-keygen', True), '-yf', self.path])
    pubkey = pubkey[1].strip('\n')
    pubkey_parts = _parse_pubkey()
    if _pubkey_valid(pubkey):
        self.public_key = pubkey

    if not self.comment:
        return _pubkey_valid(pubkey)

    return _pubkey_valid(pubkey) and _comment_valid()

"
-------------------------------------------------------------------------
"Recom
PRs: 57993, 60374"
-------------------------------------------------------------------------
=========================================================================
"result['changed'] = module.params['force'] or not keypair.isPrivateKeyValid(module) or not keypair.isPublicKeyValid(module)
"
-------------------------------------------------------------------------
"```python
result['changed'] = module.params['force'] or not keypair.isPrivateKeyValid(module) or not keypair.isPublicKeyValid(module)
```"
-------------------------------------------------------------------------
"result['changed'] = module.params['force'] or not keypair.isPrivateKeyValid(module) or not keypair.isPublicKeyValid(module)
"
-------------------------------------------------------------------------
"Recom
PRs: 57993, 60374"
-------------------------------------------------------------------------
=========================================================================
"sample: /tmp/certificate-cert.pub
"
-------------------------------------------------------------------------
filename: /tmp/certificate-cert.pub
-------------------------------------------------------------------------
"sample: /tmp/certificate-cert.pub
"
-------------------------------------------------------------------------
"Recom
PRs: 60369, 60373"
-------------------------------------------------------------------------
=========================================================================
"assert 'cannot be converted to an int' in to_native(e)
"
-------------------------------------------------------------------------
"```python
def test_check_type_int_fail():
    for case in test_cases:
        with pytest.raises(TypeError) as e:
            check_type_int(case)
            assert 'cannot be converted to an int' in to_native(e)
```"
-------------------------------------------------------------------------
"assert 'cannot be converted to an int' in to_native(e)
"
-------------------------------------------------------------------------
"Recom
PRs: 60232, 60328"
-------------------------------------------------------------------------
=========================================================================
"type: int
"
-------------------------------------------------------------------------
"```yaml
options:
  description:
    - Minutes to schedule downtime for.
    - Only usable with the C(downtime) action.
  default: 30
  type: int
services:
  description: ""No need to provide extra information.""
```"
-------------------------------------------------------------------------
"type: int
"
-------------------------------------------------------------------------
"Recom
PRs: 49568, 60236"
-------------------------------------------------------------------------
=========================================================================
"# 'service' manually.
"
-------------------------------------------------------------------------
"```python
def main():
    # command = command
    #
    # AnsibleModule will verify most stuff, we need to verify

    ##################################################################
    if action not in ['command', 'silence_nagios', 'unsilence_nagios']:
        # 'service' manually.
```"
-------------------------------------------------------------------------
"# 'service' manually.
"
-------------------------------------------------------------------------
"Recom
PRs: 49568, 60236"
-------------------------------------------------------------------------
=========================================================================
"self.minutes = kwargs['minutes']
"
-------------------------------------------------------------------------
"```python
self.minutes = kwargs['minutes']
```"
-------------------------------------------------------------------------
"self.minutes = kwargs['minutes']
"
-------------------------------------------------------------------------
"Recom
PRs: 49568, 60236"
-------------------------------------------------------------------------
=========================================================================
"# As 'latest' usually already is present, we need to enable overwriting of existing tags:
force_tag: yes
"
-------------------------------------------------------------------------
"```yaml
   docker_image:
     name: myimage:7.1.2
     repository: myimage:latest
     source: local
     force_tag: yes
```"
-------------------------------------------------------------------------
"# As 'latest' usually already is present, we need to enable overwriting of existing tags:
force_tag: yes
"
-------------------------------------------------------------------------
"Recom
PRs: 60207, 60231"
-------------------------------------------------------------------------
=========================================================================
"RPM('dinginessentail', '1.0', '1', None, None),
RPM('dinginessentail', '1.0', '2', '1', None),
RPM('dinginessentail', '1.1', '1', '1', None),
RPM('dinginessentail-olive', '1.0', '1', None, None),
RPM('dinginessentail-olive', '1.1', '1', None, None),
RPM('landsidescalping', '1.0', '1', None, None),
RPM('landsidescalping', '1.1', '1', None, None),
RPM('dinginessentail-with-weak-dep', '1.0', '1', None, ['dinginessentail-weak-dep']),
RPM('dinginessentail-weak-dep', '1.0', '1', None, None),
"
-------------------------------------------------------------------------
"from collections import namedtuple

RPM = namedtuple('RPM', ['name', 'version', 'release', 'epoch', 'recommends'])

SPECS = [
    RPM('dinginessentail', '1.0', '1', None, None),
    RPM('dinginessentail', '1.0', '2', '1', None),
    RPM('dinginessentail', '1.1', '1', '1', None),
    RPM('dinginessentail-olive', '1.0', '1', None, None),
    RPM('dinginessentail-olive', '1.1', '1', None, None),
    RPM('landsidescalping', '1.0', '1', None, None),
    RPM('landsidescalping', '1.1', '1', None, None),
    RPM('dinginessentail-with-weak-dep', '1.0', '1', None, ['dinginessentail-weak-dep']),
    RPM('dinginessentail-weak-dep', '1.0', '1', None, None),
]"
-------------------------------------------------------------------------
"RPM('dinginessentail', '1.0', '1', None, None),
RPM('dinginessentail', '1.0', '2', '1', None),
RPM('dinginessentail', '1.1', '1', '1', None),
RPM('dinginessentail-olive', '1.0', '1', None, None),
RPM('dinginessentail-olive', '1.1', '1', None, None),
RPM('landsidescalping', '1.0', '1', None, None),
RPM('landsidescalping', '1.1', '1', None, None),
RPM('dinginessentail-with-weak-dep', '1.0', '1', None, ['dinginessentail-weak-dep']),
RPM('dinginessentail-weak-dep', '1.0', '1', None, None),
"
-------------------------------------------------------------------------
"Recom
PRs: 60225, 60228"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.compat.ipaddress import ip_network, IPv6Network
"
-------------------------------------------------------------------------
"from ansible.module_utils.compat.ipaddress import ip_network, IPv6Network"
-------------------------------------------------------------------------
"from ansible.module_utils.compat.ipaddress import ip_network, IPv6Network
"
-------------------------------------------------------------------------
"Recom
PRs: 59106, 60221"
-------------------------------------------------------------------------
=========================================================================
"# Get the network bits if IPv4, and validate if IPv6.
    if ip != cidr_ip:
        module.warn(""One of your CIDR addresses ({0}) has host bits set. To get rid of this warning, ""
                    ""check the network mask and make sure that only network bits are set: {1}."".format(
                        cidr_ip, ip))
    # to_subnet throws a ValueError on IPv6 networks, so we should be working with v6 if we get here
    try:
        isinstance(ip_network(to_text(cidr_ip)), IPv6Network)
        ip = cidr_ip
    except ValueError:
        # If a host bit is set on something other than a /128, IPv6Network will throw a ValueError
        # The ipv6_cidr in this case probably looks like ""2001:DB8:A0B:12F0::1/64"" and we just want the network bits
        ip6 = to_ipv6_subnet(split_addr[0])  ""/""  split_addr[1]
        if ip6 != cidr_ip:
            module.warn(""One of your IPv6 CIDR addresses ({0}) has host bits set. To get rid of this warning, ""
                        ""check the network mask and make sure that only network bits are set: {1}."".format(cidr_ip, ip6))
        return ip6
"
-------------------------------------------------------------------------
"def validate_ip(module, cidr_ip):
    split_addr = cidr_ip.split('/')
    
    if len(split_addr) == 2:
        # Get the network bits if IPv4, and validate if IPv6
        if ip != cidr_ip:
            module.warn(""One of your CIDR addresses ({0}) has host bits set. To get rid of this warning, ""
                        ""check the network mask and make sure that only network bits are set: {1}."".format(
                            cidr_ip, ip))
        
        # to_subnet throws a ValueError on IPv6 networks, so we should be working with v6 if we get here
        try:
            isinstance(ip_network(to_text(cidr_ip)), IPv6Network)
            ip = cidr_ip
        except ValueError:
            # If a host bit is set on something other than a /128, IPv6Network will throw a ValueError
            # The ipv6_cidr in this case probably looks like ""2001:DB8:A0B:12F0::1/64"" and we just want the network bits
            ip6 = to_ipv6_subnet(split_addr[0]) + ""/"" + split_addr[1]
            if ip6 != cidr_ip:
                module.warn(""One of your IPv6 CIDR addresses ({0}) has host bits set. To get rid of this warning, ""
                            ""check the network mask and make sure that only network bits are set: {1}."".format(cidr_ip, ip6))
            
            return ip6
    
    return cidr_ip"
-------------------------------------------------------------------------
"# Get the network bits if IPv4, and validate if IPv6.
    if ip != cidr_ip:
        module.warn(""One of your CIDR addresses ({0}) has host bits set. To get rid of this warning, ""
                    ""check the network mask and make sure that only network bits are set: {1}."".format(
                        cidr_ip, ip))
    # to_subnet throws a ValueError on IPv6 networks, so we should be working with v6 if we get here
    try:
        isinstance(ip_network(to_text(cidr_ip)), IPv6Network)
        ip = cidr_ip
    except ValueError:
        # If a host bit is set on something other than a /128, IPv6Network will throw a ValueError
        # The ipv6_cidr in this case probably looks like ""2001:DB8:A0B:12F0::1/64"" and we just want the network bits
        ip6 = to_ipv6_subnet(split_addr[0])  ""/""  split_addr[1]
        if ip6 != cidr_ip:
            module.warn(""One of your IPv6 CIDR addresses ({0}) has host bits set. To get rid of this warning, ""
                        ""check the network mask and make sure that only network bits are set: {1}."".format(cidr_ip, ip6))
        return ip6
"
-------------------------------------------------------------------------
"Recom
PRs: 59106, 60221"
-------------------------------------------------------------------------
=========================================================================
"# Don't modify IPv6 CIDRs, AWS supports /128 and device ranges
('1203:8fe0:fe80:b897:8990:8a7c:99bf:323d/128', '1203:8fe0:fe80:b897:8990:8a7c:99bf:323d/128'),
"
-------------------------------------------------------------------------
"```python
def test_validate_ip():
     ips = [
         ('1.1.1.1/24', '1.1.1.0/24'),
         ('192.168.56.101/16', '192.168.0.0/16'),
         ('1203:8fe0:fe80:b897:8990:8a7c:99bf:323d/128', '1203:8fe0:fe80:b897:8990:8a7c:99bf:323d/128'),
     ]
 
     for ip, net in ips:
```"
-------------------------------------------------------------------------
"# Don't modify IPv6 CIDRs, AWS supports /128 and device ranges
('1203:8fe0:fe80:b897:8990:8a7c:99bf:323d/128', '1203:8fe0:fe80:b897:8990:8a7c:99bf:323d/128'),
"
-------------------------------------------------------------------------
"Recom
PRs: 59106, 60221"
-------------------------------------------------------------------------
=========================================================================
"- ""Port mirroring, QoS and network filters are not supported on passthrough profiles.""
"
-------------------------------------------------------------------------
"```yaml
- ""Port mirroring, QoS, and network filters are not supported on passthrough profiles.""
```"
-------------------------------------------------------------------------
"- ""When enabled and C(migratable) not specified then C(migratable) is enabled.""
- ""Port mirroring, QoS and network filters are not supported on passthrough profiles.""
"
-------------------------------------------------------------------------
"Recom
PRs: 59727, 60198"
-------------------------------------------------------------------------
=========================================================================
"if self.param('qos'):
    qoss_service = self._get_dcs_service().service(self._get_dcs_id()).qoss_service()
    return get_id_by_name(qoss_service, self.param('qos')) if self.param('qos') else None
return None
"
-------------------------------------------------------------------------
"```python
if self.param('qos'):
    qoss_service = self._get_dcs_service().service(self._get_dcs_id()).qoss_service()
    if self.param('qos'):
        return get_id_by_name(qoss_service, self.param('qos'))
return None
```"
-------------------------------------------------------------------------
"if self.param('qos'):
    qoss_service = self._get_dcs_service().service(self._get_dcs_id()).qoss_service()
    return get_id_by_name(qoss_service, self.param('qos')) if self.param('qos') else None
return None
"
-------------------------------------------------------------------------
"Recom
PRs: 59727, 60198"
-------------------------------------------------------------------------
=========================================================================
"# The order of these condition is necessary.
# When would network_filter and pass_through specified it would try to create and network_filter and fail on engine.
if self.param('network_filter') == '' or self.param('pass_through') == 'enabled':
elif self.param('network_filter'):
    network_filter = otypes.NetworkFilter(id=self._get_network_filter_id())
# The order of these condition is necessary. When would qos and pass_through specified it would try to create and qos and fail on engine.
if self.param('qos') == '' or self.param('pass_through') == 'enabled':
elif self.param('qos'):
    qos = otypes.Qos(id=self._get_qos_id())
"
-------------------------------------------------------------------------
"```python
if self.param('network_filter') == '' or self.param('pass_through') == 'enabled':
    pass
elif self.param('network_filter'):
    network_filter = otypes.NetworkFilter(id=self._get_network_filter_id())

if self.param('qos') == '' or self.param('pass_through') == 'enabled':
    pass
elif self.param('qos'):
    qos = otypes.Qos(id=self._get_qos_id())
```"
-------------------------------------------------------------------------
"# The order of these condition is necessary.
# When would network_filter and pass_through specified it would try to create and network_filter and fail on engine.
if self.param('network_filter') == '' or self.param('pass_through') == 'enabled':
elif self.param('network_filter'):
    network_filter = otypes.NetworkFilter(id=self._get_network_filter_id())
# The order of these condition is necessary. When would qos and pass_through specified it would try to create and qos and fail on engine.
if self.param('qos') == '' or self.param('pass_through') == 'enabled':
elif self.param('qos'):
    qos = otypes.Qos(id=self._get_qos_id())
"
-------------------------------------------------------------------------
"Recom
PRs: 59727, 60198"
-------------------------------------------------------------------------
=========================================================================
"def _get_migratable(self):
    if self.param('migratable') is not None:
        return self.param('migratable')
    if self.param('pass_through') == 'enabled':
        return True

        description=self.param('description') if self.param('description') is not None else None,
"
-------------------------------------------------------------------------
"```python
def _get_migratable(self):
    if self.param('migratable') is not None:
        return self.param('migratable')
    if self.param('pass_through') == 'enabled':
        return True

    description = self.param('description') if self.param('description') is not None else None
```"
-------------------------------------------------------------------------
"def _get_migratable(self):
    if self.param('migratable') is not None:
        return self.param('migratable')
    if self.param('pass_through') == 'enabled':
        return True

        description=self.param('description') if self.param('description') is not None else None,
"
-------------------------------------------------------------------------
"Recom
PRs: 59727, 60198"
-------------------------------------------------------------------------
=========================================================================
"migratable=self._get_migratable(),
"
-------------------------------------------------------------------------
"```python
migratable=self._get_migratable()
```"
-------------------------------------------------------------------------
"migratable=self._get_migratable(),
"
-------------------------------------------------------------------------
"Recom
PRs: 59727, 60198"
-------------------------------------------------------------------------
=========================================================================
"pass_through = getattr(entity.pass_through.mode, 'name', None)
    self._get_network_filter_id() == getattr(entity.network_filter, 'id', None) and
    self._get_qos_id() == getattr(entity.qos, 'id', None) and
    equal(self.param('pass_through'), pass_through.lower() if pass_through else None) and
"
-------------------------------------------------------------------------
"pass_through = getattr(entity.pass_through.mode, 'name', None)
self._get_network_filter_id() == getattr(entity.network_filter, 'id', None) and
self._get_qos_id() == getattr(entity.qos, 'id', None) and
equal(self.param('pass_through'), pass_through.lower() if pass_through else None)"
-------------------------------------------------------------------------
"pass_through = getattr(entity.pass_through.mode, 'name', None)
    # The reason why we can't use equal method, is we get None from _get_network_filter_id or _get_qos_id method, when passing empty string.
    # And when first param of equal method is None it retruns true.
    self._get_network_filter_id() == getattr(entity.network_filter, 'id', None) and
    self._get_qos_id() == getattr(entity.qos, 'id', None) and
    equal(self.param('pass_through'), pass_through.lower() if pass_through else None) and
"
-------------------------------------------------------------------------
"Recom
PRs: 59727, 60198"
-------------------------------------------------------------------------
=========================================================================
"def check_params(module):
if (module.params.get('port_mirroring') or module.params.get('network_filter') or module.params.get('qos'))\
        and module.params.get('pass_through') == 'enabled':
    module.fail_json(msg=""Cannot edit VM network interface profile. 'Port Mirroring,'Qos' and 'Network Filter' are not supported on passthrough profiles."")


"
-------------------------------------------------------------------------
"def check_params(module):
    if (module.params.get('port_mirroring') or module.params.get('network_filter') or module.params.get('qos')) \
            and module.params.get('pass_through') == 'enabled':
        module.fail_json(msg=""Cannot edit VM network interface profile. 'Port Mirroring,'Qos' and 'Network Filter' are not supported on passthrough profiles."")"
-------------------------------------------------------------------------
"def check_params(module):
if (module.params.get('port_mirroring') or module.params.get('network_filter') or module.params.get('qos'))\
        and module.params.get('pass_through') == 'enabled':
    module.fail_json(msg=""Cannot edit VM network interface profile. 'Port Mirroring,'Qos' and 'Network Filter' are not supported on passthrough profiles."")


"
-------------------------------------------------------------------------
"Recom
PRs: 59727, 60198"
-------------------------------------------------------------------------
=========================================================================
"check_params(module)
"
-------------------------------------------------------------------------
"```python
def main():  
    check_sdk(module)
    try:
        auth = module.params.pop('auth')
        connection = create_connection(auth)
    check_params(module)
```"
-------------------------------------------------------------------------
"check_params(module)
"
-------------------------------------------------------------------------
"Recom
PRs: 59727, 60198"
-------------------------------------------------------------------------
=========================================================================
"conn_params = get_conn_params(module, module.params, warn_db_default=False)
"
-------------------------------------------------------------------------
"conn_params = ansible.module_utils.postgres.get_conn_params(module, module.params, warn_db_default=False)"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params, warn_db_default=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 60105, 60107"
-------------------------------------------------------------------------
=========================================================================
"conn_params = get_conn_params(module, module.params, warn_db_default=False)
"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params)"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params, warn_db_default=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 60105, 60107"
-------------------------------------------------------------------------
=========================================================================
"# When slot_type is logical and parameter db is not passed,
# the default database will be used to create the slot and
# the user should know about this.
# When the slot type is physical,
# it doesn't matter which database will be used
# because physical slots are global objects.
if slot_type == 'logical':
    warn_db_default = True
else:
    warn_db_default = False

conn_params = get_conn_params(module, module.params, warn_db_default=warn_db_default)
"
-------------------------------------------------------------------------
"```python
if slot_type == 'logical':
    warn_db_default = True
else:
    warn_db_default = False

conn_params = get_conn_params(module, module.params, warn_db_default=warn_db_default)
```"
-------------------------------------------------------------------------
"# When slot_type is logical and parameter db is not passed,
# the default database will be used to create the slot and
# the user should know about this.
# When the slot type is physical,
# it doesn't matter which database will be used
# because physical slots are global objects.
if slot_type == 'logical':
    warn_db_default = True
else:
    warn_db_default = False

conn_params = get_conn_params(module, module.params, warn_db_default=warn_db_default)
"
-------------------------------------------------------------------------
"Recom
PRs: 60105, 60107"
-------------------------------------------------------------------------
=========================================================================
"conn_params = get_conn_params(module, module.params, warn_db_default=False)
"
-------------------------------------------------------------------------
"```python
conn_params = ansible.module_utils.postgres.get_conn_params(module, module.params, warn_db_default=False)
```"
-------------------------------------------------------------------------
"conn_params = get_conn_params(module, module.params, warn_db_default=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 60105, 60107"
-------------------------------------------------------------------------
=========================================================================
"aci.wait()
"
-------------------------------------------------------------------------
"```python
aci.wait()
```"
-------------------------------------------------------------------------
"aci.wait()
"
-------------------------------------------------------------------------
"Recom
PRs: 59938, 60028"
-------------------------------------------------------------------------
=========================================================================
"aci.wait()
"
-------------------------------------------------------------------------
`aci.wait()`
-------------------------------------------------------------------------
"aci.wait()
"
-------------------------------------------------------------------------
"Recom
PRs: 59938, 60027"
-------------------------------------------------------------------------
=========================================================================
"aci.wait()
"
-------------------------------------------------------------------------
"```python
aci.wait()
```"
-------------------------------------------------------------------------
"aci.wait()
"
-------------------------------------------------------------------------
"Recom
PRs: 59938, 60026"
-------------------------------------------------------------------------
=========================================================================
"ipaddr = parts[0]
if not re.match(r'^[0-9]\.[0-9]\.[0-9]\.[0-9]$', parts[0]) and not re.match(r'^\[[0-9a-fA-F:]\]$', ipaddr):
               'Use the dig lookup to resolve hostnames. (Found hostname: {0})').format(ipaddr))
if re.match(r'^\[[0-9a-fA-F:]\]$', ipaddr):
    ipaddr = ipaddr[1:-1]
    port_binds = [(ipaddr, port) for port in parse_port_range(parts[1], self.client)]
    port_binds = len(container_ports) * [(ipaddr,)]
"
-------------------------------------------------------------------------
"```python
ipaddr = parts[0]
if not re.match(r'^[0-9]\.[0-9]\.[0-9]\.[0-9]$', parts[0]) and not re.match(r'^\[[0-9a-fA-F:]\]$', ipaddr):
    self.fail('Use the dig lookup to resolve hostnames. (Found hostname: {0})'.format(ipaddr))
if re.match(r'^\[[0-9a-fA-F:]\]$', ipaddr):
    ipaddr = ipaddr[1:-1]
    port_binds = [(ipaddr, port) for port in parse_port_range(parts[1], self.client)]
    port_binds = len(container_ports) * [(ipaddr,)]
```"
-------------------------------------------------------------------------
"ipaddr = parts[0]
if not re.match(r'^[0-9]\.[0-9]\.[0-9]\.[0-9]$', parts[0]) and not re.match(r'^\[[0-9a-fA-F:]\]$', ipaddr):
               'Use the dig lookup to resolve hostnames. (Found hostname: {0})').format(ipaddr))
if re.match(r'^\[[0-9a-fA-F:]\]$', ipaddr):
    ipaddr = ipaddr[1:-1]
    port_binds = [(ipaddr, port) for port in parse_port_range(parts[1], self.client)]
    port_binds = len(container_ports) * [(ipaddr,)]
"
-------------------------------------------------------------------------
"Recom
PRs: 59715, 59986"
-------------------------------------------------------------------------
=========================================================================
"# Podman 1.4 changed the output to only include the layer id when run in quiet mode
if not layer_ids:
    layer_ids = lines.splitlines()

"
-------------------------------------------------------------------------
"```python
# Podman 1.4 changed the output to only include the layer id when run in quiet mode
if not layer_ids:
    layer_ids = lines.splitlines()
```
"
-------------------------------------------------------------------------
"# Podman 1.4 changed the output to only include the layer id when run in quiet mode
if not layer_ids:
    layer_ids = lines.splitlines()

"
-------------------------------------------------------------------------
"Recom
PRs: 59807, 59981"
-------------------------------------------------------------------------
=========================================================================
"- ""The size of the physical extent. I(pesize) must be a power of 2 of at least 1 sector
   (where the sector size is the largest sector size of the PVs currently used in the VG),
   or at least 128KiB.""
"
-------------------------------------------------------------------------
"```python
# The size of the physical extent. I(pesize) must be a power of 2 of at least 1 sector
# (where the sector size is the largest sector size of the PVs currently used in the VG),
# or at least 128KiB.
options:
  pesize:
    description: ""The size of the physical extent. I(pesize) must be a power of 2 of at least 1 sector (where the sector size is the largest sector size of the PVs currently used in the VG), or at least 128KiB.""
    type: str
    default: ""4""
```"
-------------------------------------------------------------------------
"- ""The size of the physical extent. I(pesize) must be a power of 2 of at least 1 sector
   (where the sector size is the largest sector size of the PVs currently used in the VG),
   or at least 128KiB.""
"
-------------------------------------------------------------------------
"Recom
PRs: 59751, 59875"
-------------------------------------------------------------------------
=========================================================================
"_BUNDLED_METADATA = {""pypi_name"": ""distro"", ""version"": ""1.4.0""}
"
-------------------------------------------------------------------------
"__BUNDLED_METADATA = {""pypi_name"": ""distro"", ""version"": ""1.4.0""}"
-------------------------------------------------------------------------
"_BUNDLED_METADATA = {""pypi_name"": ""distro"", ""version"": ""1.4.0""}
"
-------------------------------------------------------------------------
"Recom
PRs: 59869, 59874"
-------------------------------------------------------------------------
=========================================================================
"if not exists:
    self.module.warn(
        ""'local: true' specified and user '{name}' was not found in {file}. ""
        ""The local user account may already exist if the local account database exists ""
        ""somewhere other than {file}."".format(file=self.PASSWORDFILE, name=self.name))
"
-------------------------------------------------------------------------
"if not self.exists:
    self.module.warn(
        ""'local: true' specified and user '{name}' was not found in {file}. ""
        ""The local user account may already exist if the local account database exists ""
        ""somewhere other than {file}."".format(file=self.PASSWORDFILE, name=self.name))"
-------------------------------------------------------------------------
"if not exists:
    self.module.warn(
        ""'local: true' specified and user '{name}' was not found in {file}. ""
        ""The local user account may already exist if the local account database exists ""
        ""somewhere other than {file}."".format(file=self.PASSWORDFILE, name=self.name))
"
-------------------------------------------------------------------------
"Recom
PRs: 56838, 59871"
-------------------------------------------------------------------------
=========================================================================
"for volume in volumes:
    if 'ebs' in volume:
        for int_value in ['volume_size', 'iops']:
            if int_value in volume['ebs']:
                volume['ebs'][int_value] = int(volume['ebs'][int_value])
"
-------------------------------------------------------------------------
"```python
for volume in volumes:
    if 'ebs' in volume:
        for int_value in ['volume_size', 'iops']:
            if int_value in volume['ebs']:
                volume['ebs'][int_value] = int(volume['ebs'][int_value])
```"
-------------------------------------------------------------------------
"for volume in volumes:
    if 'ebs' in volume:
        for int_value in ['volume_size', 'iops']:
            if int_value in volume['ebs']:
                volume['ebs'][int_value] = int(volume['ebs'][int_value])
"
-------------------------------------------------------------------------
"Recom
PRs: 55716, 59687"
-------------------------------------------------------------------------
=========================================================================
"def __init__(self, start_event=None, *args, **kwargs):
    super(HostsModule, self).__init__(*args, **kwargs)
    self.start_event = start_event
"
-------------------------------------------------------------------------
"```python
def __init__(self, start_event=None, *args, **kwargs):
    super(HostsModule, self).__init__(*args, **kwargs)
    self.start_event = start_event
```"
-------------------------------------------------------------------------
"def __init__(self, start_event=None, *args, **kwargs):
    super(HostsModule, self).__init__(*args, **kwargs)
    self.start_event = start_event
"
-------------------------------------------------------------------------
"Recom
PRs: 57935, 59432"
-------------------------------------------------------------------------
=========================================================================
"def raise_host_exception(self):
    events = self._connection.system_service().events_service().list(from_=int(self.start_event.index))
    error_events = [
        event.description for event in events
        if event.host is not None and (event.host.id == self.param('id') or event.host.name == self.param('name')) and
        event.severity in [otypes.LogSeverity.WARNING, otypes.LogSeverity.ERROR]
    ]
    if error_events:
        raise Exception(""Error message: %s"" % error_events)
    return True

        return self.raise_host_exception()
"
-------------------------------------------------------------------------
"```python
def raise_host_exception(self):
    events = self._connection.system_service().events_service().list(from_=int(self.start_event.index))
    error_events = [
        event.description for event in events
        if event.host is not None and (event.host.id == self.param('id') or event.host.name == self.param('name')) and
        event.severity in [otypes.LogSeverity.WARNING, otypes.LogSeverity.ERROR]
    ]
    if error_events:
        raise Exception(""Error message: %s"" % error_events)
    return True
```"
-------------------------------------------------------------------------
"def raise_host_exception(self):
    events = self._connection.system_service().events_service().list(from_=int(self.start_event.index))
    error_events = [
        event.description for event in events
        if event.host is not None and (event.host.id == self.param('id') or event.host.name == self.param('name')) and
        event.severity in [otypes.LogSeverity.WARNING, otypes.LogSeverity.ERROR]
    ]
    if error_events:
        raise Exception(""Error message: %s"" % error_events)
    return True

        return self.raise_host_exception()
"
-------------------------------------------------------------------------
"Recom
PRs: 57935, 59432"
-------------------------------------------------------------------------
=========================================================================
"return self.raise_host_exception()
"
-------------------------------------------------------------------------
"```python
return self.raise_host_exception()
```"
-------------------------------------------------------------------------
"return self.raise_host_exception()
"
-------------------------------------------------------------------------
"Recom
PRs: 57935, 59432"
-------------------------------------------------------------------------
=========================================================================
"start_event = connection.system_service().events_service().list(max=1)[0]
    start_event=start_event,
"
-------------------------------------------------------------------------
"```python
start_event = connection.system_service().events_service().list(max=1)[0]
start_event = start_event
```"
-------------------------------------------------------------------------
"start_event = connection.system_service().events_service().list(max=1)[0]
    start_event=start_event,
"
-------------------------------------------------------------------------
"Recom
PRs: 57935, 59432"
-------------------------------------------------------------------------
=========================================================================
"# Boolean variable to mark if vm existed before module was executed
vm_existed = True if vm else False
"
-------------------------------------------------------------------------
"```python
# Boolean variable to mark if vm existed before module was executed
vm_existed = bool(vm)
```"
-------------------------------------------------------------------------
"# Boolean variable to mark if vm existed before module was executed
vm_existed = True if vm else False
"
-------------------------------------------------------------------------
"Recom
PRs: 59377, 59410"
-------------------------------------------------------------------------
=========================================================================
"if vm_existed:
    vms_module._migrate_vm(vm)
"
-------------------------------------------------------------------------
"```python
if vm_existed:
    vms_module._migrate_vm(vm)
```"
-------------------------------------------------------------------------
"if vm_existed:
    vms_module._migrate_vm(vm)
"
-------------------------------------------------------------------------
"Recom
PRs: 59377, 59410"
-------------------------------------------------------------------------
=========================================================================
"state: absent
"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import get_conn_params
from ansible.module_utils.database import pg_quote_identifier
from __future__ import print_function
from __future__ import absolute_import
from psycopg2.extras import DictCursor
from ansible.module_utils.basic import AnsibleModule
import traceback
from ansible.module_utils._text import to_native

def schema_delete(data):
    changed = False
    executed_queries = []

    conn_params = get_conn_params(data)
    schema_name = pg_quote_identifier(data['name'])

    if schema_exists(conn_params, schema_name):
        query = ""DROP SCHEMA {} CASCADE"".format(schema_name)
        if not data.get('cascade_drop'):
            query = ""DROP SCHEMA {}"".format(schema_name)

        db_connection = connect_to_db(conn_params)

        cursor = db_connection.cursor(cursor_factory=DictCursor)

        try:
            cursor.execute(query)
            changed = True
            executed_queries.append(query)
        except Exception as e:
            db_connection.close()
            executed_queries.append(to_native(str(e)))
            module.fail_json(msg=to_native(str(e)))

        db_connection.commit()
        db_connection.close()

    return changed, executed_queries

def main():
    argument_spec = postgres_common_argument_spec()
    argument_spec.update(
        cascade_drop=dict(type='bool', default=True),
        state=dict(required=True, choices=['present', 'absent'])
    )

    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True)

    if module.params['state'] == 'absent':
        changed, executed_queries = schema_delete(module.params)
    else:
        module.fail_json(msg=""State should be 'absent'"")

    module.exit_json(changed=changed, execuded_queries=executed_queries)

if __name__ == '__main__':
    main()
  "
-------------------------------------------------------------------------
"state: absent
"
-------------------------------------------------------------------------
"Recom
PRs: 59342, 59368"
-------------------------------------------------------------------------
=========================================================================
"id:
    description:
      - ID of the session, required when I(state) is either C(info) or
        C(remove).
    type: str
        exist, or absent, removed if present. If created, the I(id) for the
        session is returned in the output. If C(absent), I(id) is
        specifying C(info), C(node) or C(list) for the I(state); for C(node)
        or C(info), the node I(name) or session I(id) is required as parameter.
    type: str
      - The name that should be associated with the session. Required when
        I(state=node) is used.
    type: str
    type: int
    type: str
    type: str
      - Checks that will be used to verify the session health. If
    type: list
    type: str
    type: int
    type: str
      - Whether to verify the TLS certificate of the consul agent.
"
-------------------------------------------------------------------------
"id:
    description:
      - ID of the session, required when I(state) is either C(info) or
        C(remove).
    type: str
    name:
      description:
        - The name that should be associated with the session. Required when
          I(state=node) is used.
      type: str
    delay:
      type: int
    node:
      type: str
    datacenter:
      type: str
    checks:
      description:
        - Checks that will be used to verify the session health. If
      type: list
    host:
      type: str
    port:
      type: int
    scheme:
      type: str
    validate_certs:
      type: bool"
-------------------------------------------------------------------------
"id:
    description:
      - ID of the session, required when I(state) is either C(info) or
        C(remove).
    type: str
        exist, or absent, removed if present. If created, the I(id) for the
        session is returned in the output. If C(absent), I(id) is
        specifying C(info), C(node) or C(list) for the I(state); for C(node)
        or C(info), the node I(name) or session I(id) is required as parameter.
    type: str
      - The name that should be associated with the session. Required when
        I(state=node) is used.
    type: str
    type: int
    type: str
    type: str
      - Checks that will be used to verify the session health. If
    type: list
    type: str
    type: int
    type: str
      - Whether to verify the TLS certificate of the consul agent.
"
-------------------------------------------------------------------------
"Recom
PRs: 56392, 59357"
-------------------------------------------------------------------------
=========================================================================
"type: str
"
-------------------------------------------------------------------------
"Annotate the ""type"" variable as a string:

```python
type: str
```"
-------------------------------------------------------------------------
"type: str
"
-------------------------------------------------------------------------
"Recom
PRs: 56392, 59357"
-------------------------------------------------------------------------
=========================================================================
"module = AnsibleModule(
    argument_spec=argument_spec,
    required_if=[
        ('state', 'node', ['name']),
        ('state', 'info', ['id']),
        ('state', 'remove', ['id']),
    ],
    supports_check_mode=False
)
"
-------------------------------------------------------------------------
"```python
module = AnsibleModule(
    argument_spec=argument_spec,
    required_if=[
        ('state', 'node', ['name']),
        ('state', 'info', ['id']),
        ('state', 'remove', ['id']),
    ],
    supports_check_mode=False
)
```"
-------------------------------------------------------------------------
"module = AnsibleModule(
    argument_spec=argument_spec,
    required_if=[
        ('state', 'node', ['name']),
        ('state', 'info', ['id']),
        ('state', 'remove', ['id']),
    ],
    supports_check_mode=False
)
"
-------------------------------------------------------------------------
"Recom
PRs: 56392, 59357"
-------------------------------------------------------------------------
=========================================================================
"default: '0644'
required: yes
"
-------------------------------------------------------------------------
"```yaml
default: yes
required: yes
```"
-------------------------------------------------------------------------
"default: '0644'
required: yes
"
-------------------------------------------------------------------------
"Recom
PRs: 59139, 59331"
-------------------------------------------------------------------------
=========================================================================
"default: yes
"
-------------------------------------------------------------------------
"```python
default: yes
```"
-------------------------------------------------------------------------
"default: yes
"
-------------------------------------------------------------------------
"Recom
PRs: 59139, 59331"
-------------------------------------------------------------------------
=========================================================================
"default: '0644'
required: yes
"
-------------------------------------------------------------------------
"```yaml
default: 'yes'
required: yes
```"
-------------------------------------------------------------------------
"default: '0644'
required: yes
"
-------------------------------------------------------------------------
"Recom
PRs: 59139, 59330"
-------------------------------------------------------------------------
=========================================================================
"default: yes
"
-------------------------------------------------------------------------
- default: yes
-------------------------------------------------------------------------
"default: yes
"
-------------------------------------------------------------------------
"Recom
PRs: 59139, 59330"
-------------------------------------------------------------------------
=========================================================================
"if collected_facts.get('ansible_architecture', '').startswith(('armv', 'aarch')):
"
-------------------------------------------------------------------------
"if collected_facts.get('ansible_architecture', '').startswith(('armv', 'aarch')):"
-------------------------------------------------------------------------
"if collected_facts.get('ansible_architecture', '').startswith(('armv', 'aarch')):
"
-------------------------------------------------------------------------
"Recom
PRs: 55466, 59307"
-------------------------------------------------------------------------
=========================================================================
"

def test_get_cpu_info_missing_arch(mocker):
module = mocker.Mock()
inst = linux.LinuxHardware(module)

# ARM will report incorrect processor count if architecture is not available
mocker.patch('os.path.exists', return_value=False)
mocker.patch('os.access', return_value=True)
for test in CPU_INFO_TEST_SCENARIOS:
    mocker.patch('ansible.module_utils.facts.hardware.linux.get_file_lines', side_effect=[[], test['cpuinfo']])
    test_result = inst.get_cpu_facts()
    if test['architecture'].startswith(('armv', 'aarch')):
        assert test['expected_result'] != test_result
    else:
        assert test['expected_result'] == test_result
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import

def test_get_cpu_info_missing_arch(mocker):
    module = mocker.Mock()
    inst = ansible.module_utils.facts.hardware.linux.LinuxHardware(module)

    # ARM will report incorrect processor count if architecture is not available
    mocker.patch('os.path.exists', return_value=False)
    mocker.patch('os.access', return_value=True)
    
    for test in CPU_INFO_TEST_SCENARIOS:
        mocker.patch('ansible.module_utils.facts.hardware.linux.get_file_lines', side_effect=[[], test['cpuinfo']])
        collected_facts = {'ansible_architecture': test['architecture']}
        assert test['expected_result'] == inst.get_cpu_facts(collected_facts=collected_facts)
```"
-------------------------------------------------------------------------
"

def test_get_cpu_info_missing_arch(mocker):
module = mocker.Mock()
inst = linux.LinuxHardware(module)

# ARM will report incorrect processor count if architecture is not available
mocker.patch('os.path.exists', return_value=False)
mocker.patch('os.access', return_value=True)
for test in CPU_INFO_TEST_SCENARIOS:
    mocker.patch('ansible.module_utils.facts.hardware.linux.get_file_lines', side_effect=[[], test['cpuinfo']])
    test_result = inst.get_cpu_facts()
    if test['architecture'].startswith(('armv', 'aarch')):
        assert test['expected_result'] != test_result
    else:
        assert test['expected_result'] == test_result
"
-------------------------------------------------------------------------
"Recom
PRs: 55466, 59307"
-------------------------------------------------------------------------
=========================================================================
"from requests.exceptions import RequestException
"
-------------------------------------------------------------------------
"```python
from requests.exceptions import RequestException
try:
except ImportError:
    # Either docker-py is no longer using requests, or docker-py isn't around either,
    # or docker-py's dependency requests is missing. In any case, define an exception
```  "
-------------------------------------------------------------------------
"from requests.exceptions import RequestException
"
-------------------------------------------------------------------------
"Recom
PRs: 59229, 59250"
-------------------------------------------------------------------------
=========================================================================
"try:
from request.exceptions import RequestException
pt ImportError:
# Either docker-py is no longer using requests, or docker-py isn't around either,
# or docker-py's dependency requests is missing. In any case, define an exception
# class RequestException so that our code doesn't break.
class RequestException(Exception):
    pass


"
-------------------------------------------------------------------------
"```python
try:
    from request.exceptions import RequestException
except ImportError:
    class RequestException(Exception):
        pass
```"
-------------------------------------------------------------------------
"try:
from request.exceptions import RequestException
pt ImportError:
# Either docker-py is no longer using requests, or docker-py isn't around either,
# or docker-py's dependency requests is missing. In any case, define an exception
# class RequestException so that our code doesn't break.
class RequestException(Exception):
    pass


"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"""""""Check whether the given image name is in fact an image ID (hash).""""""
is_valid_tag(tag, allow_empty=False):
""""""Check whether the given string is a valid docker tag name.""""""
if not tag:
    return allow_empty
# See here (""Extended description"") for a definition what tags can be:
# https://docs.docker.com/engine/reference/commandline/tag/
return bool(re.match('^[a-zA-Z0-9_][a-zA-Z0-9_.-]{0,127}$', tag))


"
-------------------------------------------------------------------------
"```python
def is_valid_tag(tag, allow_empty=False):
    """"""Check whether the given string is a valid docker tag name.""""""
    if not tag:
        return allow_empty
    # See here (""Extended description"") for a definition what tags can be:
    # https://docs.docker.com/engine/reference/commandline/tag/
    return bool(re.match('^[a-zA-Z0-9_][a-zA-Z0-9_.-]{0,127}$', tag))
```"
-------------------------------------------------------------------------
"""""""Check whether the given image name is in fact an image ID (hash).""""""
is_valid_tag(tag, allow_empty=False):
""""""Check whether the given string is a valid docker tag name.""""""
if not tag:
    return allow_empty
# See here (""Extended description"") for a definition what tags can be:
# https://docs.docker.com/engine/reference/commandline/tag/
return bool(re.match('^[a-zA-Z0-9_][a-zA-Z0-9_.-]{0,127}$', tag))


"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except ImportError as dummy:
"
-------------------------------------------------------------------------
"```python
try:
    import yaml
    HAS_YAML = True
    HAS_YAML_EXC = None
except ImportError as dummy:
    HAS_YAML = False
    HAS_YAML_EXC = traceback.format_exc()
```"
-------------------------------------------------------------------------
"except ImportError as dummy:
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except ImportError as dummy:
from ansible.module_utils.docker.common import (
AnsibleDockerClient,
DockerBaseClass,
RequestException,

"
-------------------------------------------------------------------------
"```python
try:
     HAS_COMPOSE = True
     HAS_COMPOSE_EXC = None
     MINIMUM_COMPOSE_VERSION = '1.7.0'
     HAS_COMPOSE = False
     HAS_COMPOSE_EXC = traceback.format_exc()
     DEFAULT_TIMEOUT = 10
 
 
 except ImportError as dummy:
    from ansible.module_utils.docker.common import (
        AnsibleDockerClient,
        DockerBaseClass,
        RequestException
    )
```"
-------------------------------------------------------------------------
"except ImportError as dummy:
from ansible.module_utils.docker.common import (
AnsibleDockerClient,
DockerBaseClass,
RequestException,

"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
DockerBaseClass,
compare_generic,
RequestException,

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import (
    AnsibleDockerClient,
    DockerBaseClass,
    compare_generic,
    RequestException
)
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
DockerBaseClass,
compare_generic,
RequestException,

"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"RequestException,
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import (
    sanitize_result,
    parse_healthcheck,
    DOCKER_COMMON_ARGS,
)
from ansible.module_utils.six import string_types
from ansible.module_utils.docker.common import RequestException
import traceback
from __future__ import print_function, absolute_import
import docker.errors
```"
-------------------------------------------------------------------------
"RequestException,
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"""Cannot inspect the network '{0}' to determine the default IP: {1}"".format(net['name'], e),
"
-------------------------------------------------------------------------
"Update the code snippet as below:

```python
""Cannot inspect the network '{0}' to determine the default IP: {1}"".format(net['name'], e)
```"
-------------------------------------------------------------------------
"""Cannot inspect the network '{0}' to determine the default IP: {1}"".format(net['name'], e),
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"dummy = self.client.restart(container_id, timeout=self.parameters.stop_timeout)
dummy = self.client.restart(container_id)
"
-------------------------------------------------------------------------
"```python
if not self.check_mode:
    try:
        if self.parameters.stop_timeout:
            dummy = self.client.restart(container_id, timeout=self.parameters.stop_timeout)
        else:
            dummy = self.client.restart(container_id)
    except Exception as exc:
        self.fail(""Error restarting container %s: %s"" % (container_id, str(exc)))
return self._get_container(container_id)
```"
-------------------------------------------------------------------------
"dummy = self.client.restart(container_id, timeout=self.parameters.stop_timeout)
dummy = self.client.restart(container_id)
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
RequestException,

"
-------------------------------------------------------------------------
"```
from ansible.module_utils.docker.common import AnsibleDockerClient, RequestException
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
RequestException,

"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
DockerBaseClass,
RequestException,

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import AnsibleDockerClient, DockerBaseClass, RequestException
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
DockerBaseClass,
RequestException,

"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except ansible.module_utils.docker.common.RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"docker_version,
AnsibleDockerClient,
DockerBaseClass,
is_image_name_id,
is_valid_tag,
RequestException,
"
-------------------------------------------------------------------------
"```python
import traceback
from distutils.version import LooseVersion

from ansible.module_utils.docker.common import (
    RequestException,
    AnsibleDockerClient,
    is_image_name_id,
    is_valid_tag,
    DockerBaseClass
)
from ansible.module_utils._text import to_native
```"
-------------------------------------------------------------------------
"docker_version,
AnsibleDockerClient,
DockerBaseClass,
is_image_name_id,
is_valid_tag,
RequestException,
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"if not is_valid_tag(client.module.params['tag'], allow_empty=True):
    client.fail('""{0}"" is not a valid docker tag!'.format(client.module.params['tag']))

"
-------------------------------------------------------------------------
"if not is_valid_tag(client.module.params['tag'], allow_empty=True):
    client.fail('""{0}"" is not a valid docker tag!'.format(client.module.params['tag']))"
-------------------------------------------------------------------------
"if not is_valid_tag(client.module.params['tag'], allow_empty=True):
    client.fail('""{0}"" is not a valid docker tag!'.format(client.module.params['tag']))

"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
DockerBaseClass,
is_image_name_id,
RequestException,

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import (
    AnsibleDockerClient,
    DockerBaseClass,
    is_image_name_id,
    RequestException
)
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
DockerBaseClass,
is_image_name_id,
RequestException,

"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
DEFAULT_DOCKER_REGISTRY,
DockerBaseClass,
EMAIL_REGEX,
RequestException,

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import (
    AnsibleDockerClient,
    DEFAULT_DOCKER_REGISTRY,
    DockerBaseClass,
    EMAIL_REGEX,
    RequestException,
)
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
DEFAULT_DOCKER_REGISTRY,
DockerBaseClass,
EMAIL_REGEX,
RequestException,

"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"RequestException,
"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import (
     docker_version,
     DifferenceTracker,
     clean_dict_booleans_for_docker_api,
 )
 
 try:  
     from __future__ import print_function, absolute_import
     import traceback 
     import ansible.module_utils.docker.common 
     import docker.errors
     from docker.errors import RequestException
 except ImportError as exc:
     try:
         if 'RequestedApiVersion' in str(exc):
             ansible.module_utils.docker.common.REQUESTED_API_VERSION = '1.25'
             ansible.module_utils.docker.common.AnsibleDockerClient.REQUESTED_API_VERSION = '1.25'
         common.fail('WARNING: unable to load docker-py module: %s' % str(exc))
     except AttributeError:
         pass"
-------------------------------------------------------------------------
"RequestException,
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
RequestException,

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import AnsibleDockerClient, RequestException
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
RequestException,

"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"RequestException,
"
-------------------------------------------------------------------------
"```python
except RequestException:
```"
-------------------------------------------------------------------------
"RequestException,
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker.common import (
RequestException,

from docker.errors import DockerException
"
-------------------------------------------------------------------------
"```python
import traceback
from ansible.module_utils.docker.common import RequestException
from docker.errors import DockerException
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import (
RequestException,

from docker.errors import DockerException
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
RequestException,

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import (
    AnsibleDockerClient,
    RequestException,
)
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
RequestException,

"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
DockerBaseClass,
compare_generic,
RequestException,

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import AnsibleDockerClient, DockerBaseClass, compare_generic, RequestException
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
DockerBaseClass,
compare_generic,
RequestException,

"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"RequestException,
"
-------------------------------------------------------------------------
"```python
except ImportError:
    from ansible.module_utils.docker.common import (
        DockerBaseClass,
        DifferenceTracker,
    )
    from ansible.module_utils.docker.swarm import AnsibleDockerSwarmClient
    import traceback
```"
-------------------------------------------------------------------------
"RequestException,
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"```python
from docker.errors import DockerException
```"
-------------------------------------------------------------------------
"from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker.common import (
DockerBaseClass,
clean_dict_booleans_for_docker_api,
RequestException,

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import (
    DockerBaseClass,
    clean_dict_booleans_for_docker_api,
    RequestException,
)
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import (
DockerBaseClass,
clean_dict_booleans_for_docker_api,
RequestException,

"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"parse_healthcheck,
RequestException,

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import (
    DifferenceTracker,
    DockerBaseClass,
    convert_duration_to_nanosecond,
)
from ansible.module_utils.basic import human_to_bytes
from ansible.module_utils.six import string_types
from ansible.module_utils._text import to_text

import traceback
from __future__ import print_function

from ansible.module_utils.docker.common import RequestException
from docker.errors import DockerException
```"
-------------------------------------------------------------------------
"parse_healthcheck,
RequestException,

"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker.common import (
RequestException,


"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import (
    RequestException
)
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import (
RequestException,


"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"RequestException,
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import (
    DockerBaseClass,
    AnsibleDockerClient,
    DifferenceTracker,
)
from ansible.module_utils.six import iteritems, text_type
import traceback
from ansible.module_utils.docker.common import RequestException
import __future__
import ansible.module_utils.docker.common
import docker.errors
```"
-------------------------------------------------------------------------
"RequestException,
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
RequestException,

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import (
    AnsibleDockerClient,
    RequestException
)
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import (
AnsibleDockerClient,
RequestException,

"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"except RequestException as e:
    client.fail('An unexpected requests error occurred when docker-py tried to talk to the docker daemon: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 58791, 59061"
-------------------------------------------------------------------------
=========================================================================
"C(delegated), C(cached), C(rprivate), C(private), C(rshared), C(shared), C(rslave), C(slave), and
C(nocopy). Note that the docker daemon might not support all modes and combinations of such modes.""
"
-------------------------------------------------------------------------
"```python
Current context: options:
       - List of volumes to mount within the container.
       - ""Use docker CLI-style syntax: C(/host:/container[:mode])""
       - ""Mount modes can be a comma-separated list of various modes such as C(ro), C(rw), C(consistent),
       - SELinux hosts can additionally use C(z) or C(Z) to use a shared or
         private label for the volume.
       - ""Note that Ansible 2.7 and earlier only supported one mode, which had to be one of C(ro), C(rw),""

Required dependency: os, docker.utils.types, __future__, distutils.version, docker.errors, docker.types, ansible.module_utils.docker.common, docker, shlex, re, traceback, ansible.module_utils.six, ansible.module_utils.common.text.formatters,

Original metadata: [2.8] docker_container: add support for nocopy mode
--##### SUMMARY
Backport of #59043 to stable-2.8.
 
##### ISSUE TYPE
- Bugfix Pull Request
- Feature Pull Request
 
##### COMPONENT NAME
docker_container
```"
-------------------------------------------------------------------------
"C(delegated), C(cached), C(rprivate), C(private), C(rshared), C(shared), C(rslave), C(slave), and
C(nocopy). Note that the docker daemon might not support all modes and combinations of such modes.""
"
-------------------------------------------------------------------------
"Recom
PRs: 59043, 59058"
-------------------------------------------------------------------------
=========================================================================
"if part not in ('rw', 'ro', 'z', 'Z', 'consistent', 'delegated', 'cached', 'rprivate', 'private', 'rshared', 'shared', 'rslave', 'slave', 'nocopy'):
"
-------------------------------------------------------------------------
"```python
REQUIRES_CONVERSION_TO_BYTES = [
 
def is_volume_permissions(input):
    for part in input.split(','):
        if part not in ('rw', 'ro', 'z', 'Z', 'consistent', 'delegated', 'cached', 'rprivate', 'private', 'rshared', 'shared', 'rslave', 'slave', 'nocopy'):
            return False
    return True
```"
-------------------------------------------------------------------------
"if part not in ('rw', 'ro', 'z', 'Z', 'consistent', 'delegated', 'cached', 'rprivate', 'private', 'rshared', 'shared', 'rslave', 'slave', 'nocopy'):
"
-------------------------------------------------------------------------
"Recom
PRs: 59043, 59058"
-------------------------------------------------------------------------
=========================================================================
"- name: Deploy stack from a compose file
    state: present
    name: mystack
    compose:
      - /opt/docker-compose.yml
- name: Deploy stack from base compose file and override the web service
    state: present
    name: mystack
    compose:
      - /opt/docker-compose.yml
      - version: '3'
        services:
          web:
            image: nginx:latest
            environment:
              ENVVAR: envvar

- name: Remove stack
    name: mystack
    state: absent
"
-------------------------------------------------------------------------
"```python
EXAMPLES = '''
- name: Deploy stack from a compose file
  docker_stack_deploy:
    state: present
    name: mystack
    compose:
      - /opt/docker-compose.yml

- name: Deploy stack from base compose file and override the web service
  docker_stack_deploy:
    state: present
    name: mystack
    compose:
      - /opt/docker-compose.yml
      - version: '3'
        services:
          web:
            image: nginx:latest
            environment:
              ENVVAR: envvar

- name: Remove stack
  docker_stack_rm:
    name: mystack
    state: absent
'''
```"
-------------------------------------------------------------------------
"- name: Deploy stack from a compose file
    state: present
    name: mystack
    compose:
      - /opt/docker-compose.yml
- name: Deploy stack from base compose file and override the web service
    state: present
    name: mystack
    compose:
      - /opt/docker-compose.yml
      - version: '3'
        services:
          web:
            image: nginx:latest
            environment:
              ENVVAR: envvar

- name: Remove stack
    name: mystack
    state: absent
"
-------------------------------------------------------------------------
"Recom
PRs: 58972, 59012"
-------------------------------------------------------------------------
=========================================================================
"import stat
"
-------------------------------------------------------------------------
"```python
import stat
```"
-------------------------------------------------------------------------
"import stat
"
-------------------------------------------------------------------------
"Recom
PRs: 58569, 58792"
-------------------------------------------------------------------------
=========================================================================
"if not os.path.exists(self.cmdfile):
    self.module.fail_json(msg='nagios command file does not exist',
                          cmdfile=self.cmdfile)
if not stat.S_ISFIFO(os.stat(self.cmdfile).st_mode):
    self.module.fail_json(msg='nagios command file is not a fifo file',
                          cmdfile=self.cmdfile)
"
-------------------------------------------------------------------------
"```python
if not os.path.exists(self.cmdfile):
    self.module.fail_json(msg='nagios command file does not exist',
                          cmdfile=self.cmdfile)
if not stat.S_ISFIFO(os.stat(self.cmdfile).st_mode):
    self.module.fail_json(msg='nagios command file is not a fifo file',
                          cmdfile=self.cmdfile)
```"
-------------------------------------------------------------------------
"if not os.path.exists(self.cmdfile):
    self.module.fail_json(msg='nagios command file does not exist',
                          cmdfile=self.cmdfile)
if not stat.S_ISFIFO(os.stat(self.cmdfile).st_mode):
    self.module.fail_json(msg='nagios command file is not a fifo file',
                          cmdfile=self.cmdfile)
"
-------------------------------------------------------------------------
"Recom
PRs: 58569, 58792"
-------------------------------------------------------------------------
=========================================================================
"become = self.get_option('become_exe') or self.name
flags = self.get_option('become_flags') or ''
return '%s -q shell %s %s@ %s' % (become, flags, user, cmd)
"
-------------------------------------------------------------------------
"```python
from __future__ import division, print_function, absolute_import

from ansible.plugins.become import BecomeBase


class BecomeModule(BecomeBase):
    if not cmd:
        return cmd

    user = self.get_option('become_user') or ''
    become = self.get_option('become_exe') or self.name
    flags = self.get_option('become_flags') or ''
    return '%s -q shell %s %s@ %s' % (become, flags, user, cmd)
```"
-------------------------------------------------------------------------
"become = self.get_option('become_exe') or self.name
flags = self.get_option('become_flags') or ''
return '%s -q shell %s %s@ %s' % (become, flags, user, cmd)
"
-------------------------------------------------------------------------
"Recom
PRs: 58734, 58774"
-------------------------------------------------------------------------
=========================================================================
"- aws_region
"
-------------------------------------------------------------------------
"Expr(value=Name(id='aws_region', ctx=Load()))"
-------------------------------------------------------------------------
"- aws_region
"
-------------------------------------------------------------------------
"Recom
PRs: 54792, 58722"
-------------------------------------------------------------------------
=========================================================================
"# Allow migrate vm when state present.
vms_module._migrate_vm(vm)
"
-------------------------------------------------------------------------
"if state == 'present':
    vms_module._migrate_vm(vm)"
-------------------------------------------------------------------------
"# Allow migrate vm when state present.
vms_module._migrate_vm(vm)
"
-------------------------------------------------------------------------
"Recom
PRs: 58136, 58720"
-------------------------------------------------------------------------
=========================================================================
"# Retry removing host when failed (https://bugzilla.redhat.com/show_bug.cgi?id=1719271)
- ovirt_host:
state: absent
name: myhost
gister: result
til: not result.failed
tries: 6
lay: 20

"
-------------------------------------------------------------------------
"```yaml
- ovirt_host:
    state: absent
    name: myhost
    retries: 6
    delay: 20
    until: not result.failed
```"
-------------------------------------------------------------------------
"# Retry removing host when failed (https://bugzilla.redhat.com/show_bug.cgi?id=1719271)
- ovirt_host:
state: absent
name: myhost
gister: result
til: not result.failed
tries: 6
lay: 20

"
-------------------------------------------------------------------------
"Recom
PRs: 58625, 58718"
-------------------------------------------------------------------------
=========================================================================
"- If I(true), the VM will migrate when I(placement_policy=user-migratable) but not when I(placement_policy=pinned).
"
-------------------------------------------------------------------------
"- If `force_migrate` is `true`, the VM will migrate when `placement_policy=user-migratable` but not when `placement_policy=pinned`."
-------------------------------------------------------------------------
"- If I(true), the VM will migrate when I(placement_policy=user-migratable) but not when I(placement_policy=pinned).
"
-------------------------------------------------------------------------
"Recom
PRs: 58577, 58717"
-------------------------------------------------------------------------
=========================================================================
"- For maximal interoperability, C(secp384r1) or C(secp256r1) should be used.
"
-------------------------------------------------------------------------
"For maximal interoperability, `secp384r1` or `secp256r1` should be used."
-------------------------------------------------------------------------
"- For maximal interoperability, C(secp384r1) or C(secp256r1) should be used.
"
-------------------------------------------------------------------------
"Recom
PRs: 58605, 58610"
-------------------------------------------------------------------------
=========================================================================
"- secp256r1
"
-------------------------------------------------------------------------
"Remove `secp256r1` from the list of options:

```python
options:
    - secp521r1
    - secp224r1
    - secp192r1
    - secp256k1
    - brainpoolP256r1
    - brainpoolP384r1
```"
-------------------------------------------------------------------------
"- secp256r1
"
-------------------------------------------------------------------------
"Recom
PRs: 58605, 58610"
-------------------------------------------------------------------------
=========================================================================
"sample: secp256r1
"
-------------------------------------------------------------------------
"Required metadata: [2.8] openssl_privatekey: forgot to add secp256r1

```python
def _generate_private_key_data(curve, filename):
    # Your implementation here
    pass
```"
-------------------------------------------------------------------------
"sample: secp256r1
"
-------------------------------------------------------------------------
"Recom
PRs: 58605, 58610"
-------------------------------------------------------------------------
=========================================================================
"self._add_curve('secp256r1', 'SECP256R1')
"
-------------------------------------------------------------------------
"self._add_curve('secp256r1', 'SECP256R1')"
-------------------------------------------------------------------------
"self._add_curve('secp256r1', 'SECP256R1')
"
-------------------------------------------------------------------------
"Recom
PRs: 58605, 58610"
-------------------------------------------------------------------------
=========================================================================
"'secp384r1', 'secp521r1', 'secp224r1', 'secp192r1', 'secp256r1',
'secp256k1', 'brainpoolP256r1', 'brainpoolP384r1', 'brainpoolP512r1',
"
-------------------------------------------------------------------------
"```
             curve=dict(type='str', choices=[
                 'secp384r1', 'secp521r1', 'secp224r1', 'secp192r1', 'secp256r1',
                 'secp256k1', 'brainpoolP256r1', 'brainpoolP384r1', 'brainpoolP512r1',
             ]),
```"
-------------------------------------------------------------------------
"'secp384r1', 'secp521r1', 'secp224r1', 'secp192r1', 'secp256r1',
'secp256k1', 'brainpoolP256r1', 'brainpoolP384r1', 'brainpoolP512r1',
"
-------------------------------------------------------------------------
"Recom
PRs: 58605, 58610"
-------------------------------------------------------------------------
=========================================================================
"exp = r"" | ignore-case section include ^#\sdfs-group""
    exp = r""|^#\sip vpn-instance %s"" % self.vpn_instance
    exp = r""|^#\sinterface %s"" % self.vbdif_name
"
-------------------------------------------------------------------------
"```python
import re
from ansible.module_utils.connection import exec_command
from ansible.module_utils.network.cloudengine.ce import load_config
from ansible.module_utils.basic import AnsibleModule

class VxlanGateway(object):
    """"""get current configuration""""""
    
    flags = list()
    if self.vpn_instance:
        if self.vbdif_name:
            flags.append(exp)
    return self.get_config(flags)
    
exp = r"" | ignore-case section include ^#\sdfs-group""
exp = r""|^#\sip vpn-instance %s"" % self.vpn_instance
exp = r""|^#\sinterface %s"" % self.vbdif_name
```"
-------------------------------------------------------------------------
"exp = r"" | ignore-case section include ^#\sdfs-group""
    exp = r""|^#\sip vpn-instance %s"" % self.vpn_instance
    exp = r""|^#\sinterface %s"" % self.vbdif_name
"
-------------------------------------------------------------------------
"Recom
PRs: 58226, 58557"
-------------------------------------------------------------------------
=========================================================================
"glb = root.find(""bfd/bfdSchGlobal"")
"
-------------------------------------------------------------------------
"glb = BfdGlobal.root.find(""bfd/bfdSchGlobal"")"
-------------------------------------------------------------------------
"glb = root.find(""bfd/bfdSchGlobal"")
"
-------------------------------------------------------------------------
"Recom
PRs: 58200, 58555"
-------------------------------------------------------------------------
=========================================================================
"if self.existing == self.end_state:
    self.changed = False
"
-------------------------------------------------------------------------
"if self.existing == self.end_state:
    self.changed = False"
-------------------------------------------------------------------------
"if self.existing == self.end_state:
    self.changed = False
"
-------------------------------------------------------------------------
"Recom
PRs: 58200, 58555"
-------------------------------------------------------------------------
=========================================================================
"if tmp.get(""interface-name"") is not None:
    if tmp[""interface-name""].lower() != self.interface_name.lower():
        same_flag = False
else:
"
-------------------------------------------------------------------------
"```python
if tmp.get(""interface-name"") is not None:
    if tmp[""interface-name""].lower() != self.interface_name.lower():
        same_flag = False
else:
```"
-------------------------------------------------------------------------
"if tmp.get(""interface-name"") is not None:
    if tmp[""interface-name""].lower() != self.interface_name.lower():
        same_flag = False
else:
"
-------------------------------------------------------------------------
"Recom
PRs: 57904, 58548"
-------------------------------------------------------------------------
=========================================================================
"api:
"
-------------------------------------------------------------------------
"```yaml
options:
  description:
    - Define whether to create an API token for this user
    - Token can be exposed using the I(debug) module
    type: str
```"
-------------------------------------------------------------------------
"api:
"
-------------------------------------------------------------------------
"Recom
PRs: 57588, 58544"
-------------------------------------------------------------------------
=========================================================================
"msg: ""API Token: {{ ansible_facts['user_api'] }}""
"
-------------------------------------------------------------------------
"- debug:
    msg: ""API Token: {{ ansible_facts['user_api'] }}"""
-------------------------------------------------------------------------
"msg: ""API Token: {{ ansible_facts['user_api'] }}""
"
-------------------------------------------------------------------------
"Recom
PRs: 57588, 58544"
-------------------------------------------------------------------------
=========================================================================
"if module.params['api']:
        user_token['user_api'] = array.create_api_token(module.params['name'])['api_token']
"
-------------------------------------------------------------------------
"if module.params['api']:
    user_token['user_api'] = array.create_api_token(module.params['name'])['api_token']"
-------------------------------------------------------------------------
"if module.params['api']:
        user_token['user_api'] = array.create_api_token(module.params['name'])['api_token']
        # Added for 2.8.2: Not breaking user's playbooks in minor releases.
        user_token['api_token'] = user_token['user_api']
"
-------------------------------------------------------------------------
"Recom
PRs: 57588, 58544"
-------------------------------------------------------------------------
=========================================================================
"if module.params['api']:
        user_token['user_api'] = array.create_api_token(module.params['name'])['api_token']
"
-------------------------------------------------------------------------
"```python
if module.params['api']:
    user_token['user_api'] = array.create_api_token(module.params['name'])['api_token']
```"
-------------------------------------------------------------------------
"if module.params['api']:
        user_token['user_api'] = array.create_api_token(module.params['name'])['api_token']
        # Added for 2.8.2: Not breaking user's playbooks in minor releases.
        user_token['api_token'] = user_token['user_api']
"
-------------------------------------------------------------------------
"Recom
PRs: 57588, 58544"
-------------------------------------------------------------------------
=========================================================================
"api=dict(type='bool', default=False),
"
-------------------------------------------------------------------------
"```python
api=dict(type='bool', default=False),
```"
-------------------------------------------------------------------------
"api=dict(type='bool', default=False),
"
-------------------------------------------------------------------------
"Recom
PRs: 57588, 58544"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_text
"
-------------------------------------------------------------------------
from ansible.module_utils._text import to_text
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_text
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"b_ansible_out = subprocess.check_output(
ble_out = to_text(b_ansible_out)
"
-------------------------------------------------------------------------
"```python
b_ansible_out = subprocess.check_output(
ble_out = to_text(b_ansible_out)
```"
-------------------------------------------------------------------------
"b_ansible_out = subprocess.check_output(
ble_out = to_text(b_ansible_out)
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': distro.codename(),
    'id': distro.id(),
    'name': distro.name(),
    'version': distro.version(),
    'version_best': distro.version(best=True),
},
"
-------------------------------------------------------------------------
"```python
output = {
    'name': nicename,
    'input': fcont,
    'platform.dist': {
        'codename': dist.codename(),
        'id': dist.id(),
        'name': dist.name(),
        'version': dist.version(),
        'version_best': dist.version(best=True),
    },
    'result': ansible_facts,
}
```"
-------------------------------------------------------------------------
"'distro': {
    'codename': distro.codename(),
    'id': distro.id(),
    'name': distro.name(),
    'version': distro.version(),
    'version_best': distro.version(best=True),
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"
needs_best_version = frozenset((
    u'centos',
    u'debian',
))

    distro_id = distro.id()

    if version is not None:
        if distro_id in needs_best_version:
            version_best = distro.version(best=True)

            # CentoOS maintainers believe only the major version is appropriate
            # but Ansible users desire minor version information, e.g., 7.5.
            # https://github.com/ansible/ansible/issues/50141#issuecomment-449452781
            if distro_id == u'centos':
                version = u'.'.join(version_best.split(u'.')[:2])

            # Debian does not include minor version in /etc/os-release.
            # Bug report filed upstream requesting this be added to /etc/os-release
            # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=931197
            if distro_id == u'debian':
                version = version_best

    else:
        version = u''

"
-------------------------------------------------------------------------
"```python
from distro import id as distro_id, version

def get_distribution_version():
    version = None
    if platform.system() == 'Linux':
        version = distro.version()
    
    needs_best_version = frozenset(('centos', 'debian'))
    
    distro_id = distro_id()
    
    if version is not None:
        if distro_id in needs_best_version:
            version_best = distro.version(best=True)

            if distro_id == 'centos':
                version = '.'.join(version_best.split('.')[:2])

            if distro_id == 'debian':
                version = version_best
    else:
        version = ''
    
    return version
```"
-------------------------------------------------------------------------
"
needs_best_version = frozenset((
    u'centos',
    u'debian',
))

    distro_id = distro.id()

    if version is not None:
        if distro_id in needs_best_version:
            version_best = distro.version(best=True)

            # CentoOS maintainers believe only the major version is appropriate
            # but Ansible users desire minor version information, e.g., 7.5.
            # https://github.com/ansible/ansible/issues/50141#issuecomment-449452781
            if distro_id == u'centos':
                version = u'.'.join(version_best.split(u'.')[:2])

            # Debian does not include minor version in /etc/os-release.
            # Bug report filed upstream requesting this be added to /etc/os-release
            # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=931197
            if distro_id == u'debian':
                version = version_best

    else:
        version = u''

"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': 'Core',
    'id': 'centos',
    'name': 'CentOS Linux',
    'version': '7',
    'version_best': '7.2.1511',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Core',
    'id': 'centos',
    'name': 'CentOS Linux',
    'version': '7',
    'version_best': '7.2.1511',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Core',
    'id': 'centos',
    'name': 'CentOS Linux',
    'version': '7',
    'version_best': '7.2.1511',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"""distribution_version"": ""7.2"",
"
-------------------------------------------------------------------------
"    {
        ""distribution"": ""CentOS"",
        ""distribution_major_version"": ""7"",
        ""os_family"": ""RedHat"",
        ""distribution_version"": ""7.2""
    },"
-------------------------------------------------------------------------
"""distribution_version"": ""7.2"",
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': 'Final',
    'id': 'centos',
    'name': 'CentOS Linux',
    'version': '6.7',
    'version_best': '6.7',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Final',
    'id': 'centos',
    'name': 'CentOS Linux',
    'version': '6.7',
    'version_best': '6.7',
}"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Final',
    'id': 'centos',
    'name': 'CentOS Linux',
    'version': '6.7',
    'version_best': '6.7',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': 'Maipo',
    'id': 'rhel',
    'name': 'RedHat Enterprise Linux',
    'version': '7.2',
    'version_best': '7.2',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Maipo',
    'id': 'rhel',
    'name': 'RedHat Enterprise Linux',
    'version': '7.2',
    'version_best': '7.2',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Maipo',
    'id': 'rhel',
    'name': 'RedHat Enterprise Linux',
    'version': '7.2',
    'version_best': '7.2',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': 'Santiago',
    'id': 'rhel',
    'name': 'RedHat Enterprise Linux',
    'version': '6.7',
    'version_best': '6.7',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Santiago',
    'id': 'rhel',
    'name': 'RedHat Enterprise Linux',
    'version': '6.7',
    'version_best': '6.7',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Santiago',
    'id': 'rhel',
    'name': 'RedHat Enterprise Linux',
    'version': '6.7',
    'version_best': '6.7',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': 'virtuozzo',
    'name': 'Virtuozzo Linux',
    'version': '7.3',
    'version_best': '7.3',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': 'virtuozzo',
    'name': 'Virtuozzo Linux',
    'version': '7.3',
    'version_best': '7.3',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': 'virtuozzo',
    'name': 'Virtuozzo Linux',
    'version': '7.3',
    'version_best': '7.3',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"""/etc/os-release"": (
    'NAME=""openSUSE Leap""\nVERSION=""42.1""\nVERSION_ID=""42.1""\nPRETTY_NAME=""openSUSE Leap 42.1 (x86_64)""\nID=opensuse\n'
    'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:opensuse:opensuse:42.1""\nBUG_REPORT_URL=""https://bugs.opensuse.org""\n'
    'HOME_URL=""https://opensuse.org/""\nID_LIKE=""suse""'),
""/etc/SuSE-release"": (
    'openSUSE 42.1 (x86_64)\nVERSION = 42.1\nCODENAME = Malachite\n# /etc/SuSE-release is deprecated and will be removed in the future, '
    'use /etc/os-release instead'),
tro': {
'codename': '',
'id': 'opensuse-leap',
'name': 'openSUSE Leap',
'version': '42.1',
'version_best': '42.1',

"
-------------------------------------------------------------------------
"TESTSETS = [
     {
         ""name"": ""openSUSE Leap 42.1"",
         ""input"": {
            ""/etc/os-release"": (
                'NAME=""openSUSE Leap""\nVERSION=""42.1""\nVERSION_ID=""42.1""\nPRETTY_NAME=""openSUSE Leap 42.1 (x86_64)""\n'
                'ID=opensuse\n'
                'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:opensuse:opensuse:42.1""\nBUG_REPORT_URL=""https://bugs.opensuse.org""\n'
                'HOME_URL=""https://opensuse.org/""\nID_LIKE=""suse""'
            ),
            ""/etc/SuSE-release"": (
                'openSUSE 42.1 (x86_64)\nVERSION = 42.1\nCODENAME = Malachite\n# /etc/SuSE-release is deprecated and will be removed in the future, '
                'use /etc/os-release instead'
            ),
         },
         ""platform.dist"": ['SuSE', '42.1', 'x86_64'],
         ""result"": {
             ""distribution"": ""openSUSE Leap"",
             ""distribution_major_version"": ""42""
         }
     }
]"
-------------------------------------------------------------------------
"""/etc/os-release"": (
    'NAME=""openSUSE Leap""\nVERSION=""42.1""\nVERSION_ID=""42.1""\nPRETTY_NAME=""openSUSE Leap 42.1 (x86_64)""\nID=opensuse\n'
    'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:opensuse:opensuse:42.1""\nBUG_REPORT_URL=""https://bugs.opensuse.org""\n'
    'HOME_URL=""https://opensuse.org/""\nID_LIKE=""suse""'),
""/etc/SuSE-release"": (
    'openSUSE 42.1 (x86_64)\nVERSION = 42.1\nCODENAME = Malachite\n# /etc/SuSE-release is deprecated and will be removed in the future, '
    'use /etc/os-release instead'),
tro': {
'codename': '',
'id': 'opensuse-leap',
'name': 'openSUSE Leap',
'version': '42.1',
'version_best': '42.1',

"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'/etc/SuSE-release': (
    'openSUSE 13.2 (x86_64)\nVERSION = 13.2\nCODENAME = Harlequin\n'
    '# /etc/SuSE-release is deprecated and will be removed in the future, use /etc/os-release instead'),
'/etc/os-release': (
    'NAME=openSUSE\nVERSION=""13.2 (Harlequin)""\nVERSION_ID=""13.2""\nPRETTY_NAME=""openSUSE 13.2 (Harlequin) (x86_64)""\nID=opensuse\n'
    'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:opensuse:opensuse:13.2""\nBUG_REPORT_URL=""https://bugs.opensuse.org""\n'
    'HOME_URL=""https://opensuse.org/""\nID_LIKE=""suse""'),
tro': {
'codename': '',
'id': 'opensuse-harlequin',
'name': 'openSUSE Harlequin',
'version': '13.2',
'version_best': '13.2',

"
-------------------------------------------------------------------------
"`'/etc/SuSE-release': (
    'openSUSE 13.2 (x86_64)\nVERSION = 13.2\nCODENAME = Harlequin\n'
    '# /etc/SuSE-release is deprecated and will be removed in the future, use /etc/os-release instead'), 
'/etc/os-release': (
    'NAME=openSUSE\nVERSION=""13.2 (Harlequin)""\nVERSION_ID=""13.2""\nPRETTY_NAME=""openSUSE 13.2 (Harlequin) (x86_64)""\nID=opensuse\n'
    'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:opensuse:opensuse:13.2""\nBUG_REPORT_URL=""https://bugs.opensuse.org""\n'
    'HOME_URL=""https://opensuse.org/""\nID_LIKE=""suse""'),
'tro': {
    'codename': '',
    'id': 'opensuse-harlequin',
    'name': 'openSUSE Harlequin',
    'version': '13.2',
    'version_best': '13.2',
}`"
-------------------------------------------------------------------------
"'/etc/SuSE-release': (
    'openSUSE 13.2 (x86_64)\nVERSION = 13.2\nCODENAME = Harlequin\n'
    '# /etc/SuSE-release is deprecated and will be removed in the future, use /etc/os-release instead'),
'/etc/os-release': (
    'NAME=openSUSE\nVERSION=""13.2 (Harlequin)""\nVERSION_ID=""13.2""\nPRETTY_NAME=""openSUSE 13.2 (Harlequin) (x86_64)""\nID=opensuse\n'
    'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:opensuse:opensuse:13.2""\nBUG_REPORT_URL=""https://bugs.opensuse.org""\n'
    'HOME_URL=""https://opensuse.org/""\nID_LIKE=""suse""'),
tro': {
'codename': '',
'id': 'opensuse-harlequin',
'name': 'openSUSE Harlequin',
'version': '13.2',
'version_best': '13.2',

"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': 'opensuse-tumbleweed',
    'name': 'openSUSE Tumbleweed',
    'version': '20160917',
    'version_best': '20160917',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': 'opensuse-tumbleweed',
    'name': 'openSUSE Tumbleweed',
    'version': '20160917',
    'version_best': '20160917',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': 'opensuse-tumbleweed',
    'name': 'openSUSE Tumbleweed',
    'version': '20160917',
    'version_best': '20160917',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': 'opensuse-leap',
    'name': 'openSUSE Leap',
    'version': '15.0',
    'version_best': '15.0',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': 'opensuse-leap',
    'name': 'openSUSE Leap',
    'version': '15.0',
    'version_best': '15.0',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': 'opensuse-leap',
    'name': 'openSUSE Leap',
    'version': '15.0',
    'version_best': '15.0',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"""/etc/SuSE-release"": ""SUSE Linux Enterprise Server 11 (x86_64)\nVERSION = 11\nPATCHLEVEL = 3""
tro': {
'codename': '',
'id': 'sles',
'name': 'SUSE Linux Enterprise Server',
'version': '11',
'version_best': '11',

"
-------------------------------------------------------------------------
"""/etc/SuSE-release"": ""SUSE Linux Enterprise Server 11 (x86_64)\nVERSION = 11\nPATCHLEVEL = 3"", ""distribution_version"": ""11"", ""distribution"": ""SLES"""
-------------------------------------------------------------------------
"""/etc/SuSE-release"": ""SUSE Linux Enterprise Server 11 (x86_64)\nVERSION = 11\nPATCHLEVEL = 3""
tro': {
'codename': '',
'id': 'sles',
'name': 'SUSE Linux Enterprise Server',
'version': '11',
'version_best': '11',

"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"""/etc/SuSE-release"": ""\nSUSE Linux Enterprise Server 11 (x86_64)\nVERSION = 11\nPATCHLEVEL = 4"",
""/etc/os-release"": (
    'NAME=""SLES""\nVERSION=""11.4""\nVERSION_ID=""11.4""\nPRETTY_NAME=""SUSE Linux Enterprise Server 11 SP4""\nID=""sles""\n'
    'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles:11:4""'),
tro': {
'codename': '',
'id': 'sles',
'name': 'SUSE Linux Enterprise Server',
'version': '11.4',
'version_best': '11.4',

ult"": {
"
-------------------------------------------------------------------------
"```python
{
    ""/etc/SuSE-release"": ""\nSUSE Linux Enterprise Server 11 (x86_64)\nVERSION = 11\nPATCHLEVEL = 3"",
    ""/etc/os-release"": (
        'NAME=""SLES""\nVERSION=""11.4""\nVERSION_ID=""11.4""\nPRETTY_NAME=""SUSE Linux Enterprise Server 11 SP3""\nID=""sles""\n'
        'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles:11:3""'),
    ""tro"": {
        'codename': '',
        'id': 'sles',
        'name': 'SUSE Linux Enterprise Server',
        'version': '11.4',
        'version_best': '11.4',
    }
```"
-------------------------------------------------------------------------
"""/etc/SuSE-release"": ""\nSUSE Linux Enterprise Server 11 (x86_64)\nVERSION = 11\nPATCHLEVEL = 4"",
""/etc/os-release"": (
    'NAME=""SLES""\nVERSION=""11.4""\nVERSION_ID=""11.4""\nPRETTY_NAME=""SUSE Linux Enterprise Server 11 SP4""\nID=""sles""\n'
    'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles:11:4""'),
tro': {
'codename': '',
'id': 'sles',
'name': 'SUSE Linux Enterprise Server',
'version': '11.4',
'version_best': '11.4',

ult"": {
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"""/etc/SuSE-release"": (
    '\nSUSE Linux Enterprise Server 12 (x86_64)\nVERSION = 12\nPATCHLEVEL = 0\n'
    '# This file is deprecated and will be removed in a future service pack or release.\n'
    '# Please check /etc/os-release for details about this release.'),
""/etc/os-release"": (
    'NAME=""SLES""\nVERSION=""12""\nVERSION_ID=""12""\nPRETTY_NAME=""SUSE Linux Enterprise Server 12""\nID=""sles""\n'
    'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles:12""'),
tro': {
'codename': '',
'id': 'sles',
'name': 'SUSE Linux Enterprise Server',
'version': '12',
'version_best': '12',

"
-------------------------------------------------------------------------
"```python
""/etc/SuSE-release"": (
    '\nSUSE Linux Enterprise Server 12 (x86_64)\nVERSION = 12\nPATCHLEVEL = 0\n'
    '# This file is deprecated and will be removed in a future service pack or release.\n'
    '# Please check /etc/os-release for details about this release.'),
""/etc/os-release"": (
    'NAME=""SLES""\nVERSION=""12""\nVERSION_ID=""12""\nPRETTY_NAME=""SUSE Linux Enterprise Server 12""\nID=""sles""\n'
    'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles:12""'),
```"
-------------------------------------------------------------------------
"""/etc/SuSE-release"": (
    '\nSUSE Linux Enterprise Server 12 (x86_64)\nVERSION = 12\nPATCHLEVEL = 0\n'
    '# This file is deprecated and will be removed in a future service pack or release.\n'
    '# Please check /etc/os-release for details about this release.'),
""/etc/os-release"": (
    'NAME=""SLES""\nVERSION=""12""\nVERSION_ID=""12""\nPRETTY_NAME=""SUSE Linux Enterprise Server 12""\nID=""sles""\n'
    'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles:12""'),
tro': {
'codename': '',
'id': 'sles',
'name': 'SUSE Linux Enterprise Server',
'version': '12',
'version_best': '12',

"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"""/etc/SuSE-release"": (
    '\nSUSE Linux Enterprise Server 12 (x86_64)\nVERSION = 12\nPATCHLEVEL = 0\n'
    '# This file is deprecated and will be removed in a future service pack or release.\n'
    '# Please check /etc/os-release for details about this release.'),
""/etc/os-release"": (
    'NAME=""SLES""\nVERSION=""12-SP1""\nVERSION_ID=""12.1""\nPRETTY_NAME=""SUSE Linux Enterprise Server 12 SP1""\nID=""sles""\n'
    'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles:12:sp1""'),
tro': {
'codename': '',
'id': 'sles',
'name': 'SUSE Linux Enterprise Server',
'version': '12.1',
'version_best': '12.1',

ult"": {
"
-------------------------------------------------------------------------
"```python
""/etc/SuSE-release"": (
    '\nSUSE Linux Enterprise Server 12 (x86_64)\nVERSION = 12\nPATCHLEVEL = 0\n'
    '# This file is deprecated and will be removed in a future service pack or release.\n'
    '# Please check /etc/os-release for details about this release.'),
""/etc/os-release"": (
    'NAME=""SLES""\nVERSION=""12-SP1""\nVERSION_ID=""12.1""\nPRETTY_NAME=""SUSE Linux Enterprise Server 12 SP1""\nID=""sles""\n'
    'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles:12:sp1""'),
```"
-------------------------------------------------------------------------
"""/etc/SuSE-release"": (
    '\nSUSE Linux Enterprise Server 12 (x86_64)\nVERSION = 12\nPATCHLEVEL = 0\n'
    '# This file is deprecated and will be removed in a future service pack or release.\n'
    '# Please check /etc/os-release for details about this release.'),
""/etc/os-release"": (
    'NAME=""SLES""\nVERSION=""12-SP1""\nVERSION_ID=""12.1""\nPRETTY_NAME=""SUSE Linux Enterprise Server 12 SP1""\nID=""sles""\n'
    'ANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles:12:sp1""'),
tro': {
'codename': '',
'id': 'sles',
'name': 'SUSE Linux Enterprise Server',
'version': '12.1',
'version_best': '12.1',

ult"": {
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"""/etc/SuSE-release"": (
    'SUSE Linux Enterprise Server 12 (x86_64)\nVERSION = 12\nPATCHLEVEL = 2\n'
    '# This file is deprecated and will be removed in a future service pack or release.\n'
    '# Please check /etc/os-release for details about this release.'),
""/etc/os-release"": (
    'NAME=""SLES_SAP""\nVERSION=""12-SP2""\nVERSION_ID=""12.2""\nPRETTY_NAME=""SUSE Linux Enterprise Server for SAP Applications 12 SP2""\n'
    'ID=""sles_sap""\nANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles_sap:12:sp2""'),
tro': {
'codename': '',
'id': 'sles',
'name': 'SUSE Linux Enterprise Server',
'version': '12.2',
'version_best': '12.2',

ult"": {
"
-------------------------------------------------------------------------
"```python
def extract_sles_info(sles_info):
    info = {}
    sles_release = sles_info.get(""/etc/SuSE-release"")
    os_release = sles_info.get(""/etc/os-release"")

    if sles_release:
        for line in sles_release.split('\n'):
            if line.startswith('VERSION'):
                info['distribution_major_version'] = line.split('=')[1].strip()
            elif line.startswith('PATCHLEVEL'):
                info['distribution_release'] = line.split('=')[1].strip()

    if os_release:
        lines = os_release.split('\n')
        info['distribution'] = lines[0].split('=')[1].strip().strip('""')
        info['distribution_version'] = lines[1].split('=')[1].strip().strip('""')
        info['distribution_major_version'], info['distribution_release'] = info['distribution_version'].split('-')

    info['distribution'] = 'SLES_SAP'
    info['distribution_major_version'] = '12'
    info['distribution_release'] = '2'
    info['distribution_version'] = '12-SP2'

    return info

sles_info = {
    ""/etc/SuSE-release"": (
        'SUSE Linux Enterprise Server 12 (x86_64)\nVERSION = 12\nPATCHLEVEL = 2\n'
        '# This file is deprecated and will be removed in a future service pack or release.\n'
        '# Please check /etc/os-release for details about this release'),
    ""/etc/os-release"": (
        'NAME=""SLES_SAP""\nVERSION=""12-SP2""\nVERSION_ID=""12.2""\nPRETTY_NAME=""SUSE Linux Enterprise Server for SAP Applications 12 SP2""\n'
        'ID=""sles_sap""\nANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles_sap:12:sp2""')
}

sles_data = extract_sles_info(sles_info)
print(sles_data)
```"
-------------------------------------------------------------------------
"""/etc/SuSE-release"": (
    'SUSE Linux Enterprise Server 12 (x86_64)\nVERSION = 12\nPATCHLEVEL = 2\n'
    '# This file is deprecated and will be removed in a future service pack or release.\n'
    '# Please check /etc/os-release for details about this release.'),
""/etc/os-release"": (
    'NAME=""SLES_SAP""\nVERSION=""12-SP2""\nVERSION_ID=""12.2""\nPRETTY_NAME=""SUSE Linux Enterprise Server for SAP Applications 12 SP2""\n'
    'ID=""sles_sap""\nANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles_sap:12:sp2""'),
tro': {
'codename': '',
'id': 'sles',
'name': 'SUSE Linux Enterprise Server',
'version': '12.2',
'version_best': '12.2',

ult"": {
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"""/etc/SuSE-release"": (
    'SUSE Linux Enterprise Server 12 (x86_64)VERSION = 12PATCHLEVEL = 3'
    '\n# This file is deprecated and will be removed in a future service pack or release.\n'
    '# Please check /etc/os-release for details about this release.'),
""/etc/os-release"": (
    'NAME=""SLES""\nVERSION=""12-SP3""\nVERSION_ID=""12.3""\nPRETTY_NAME=""SUSE Linux Enterprise Server 12 SP3""\n'
    'ID=""sles""\nANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles_sap:12:sp3""'),
tro': {
'codename': '',
'id': 'sles',
'name': 'SUSE Linux Enterprise Server',
'version': '12.3',
'version_best': '12.3',

ult"": {
"
-------------------------------------------------------------------------
"CPE_NAME=""cpe:/o:suse:sles_sap:12:sp2""
{
    ""name"": ""SLES4SAP 12 SP3"",
    ""input"": {
    },
    ""platform.dist"": ['SuSE', '12', 'x86_64'],
        ""distribution"": ""SLES_SAP"",
        ""distribution_major_version"": ""12"",
        ""distribution_release"": ""3"",
}"
-------------------------------------------------------------------------
"""/etc/SuSE-release"": (
    'SUSE Linux Enterprise Server 12 (x86_64)VERSION = 12PATCHLEVEL = 3'
    '\n# This file is deprecated and will be removed in a future service pack or release.\n'
    '# Please check /etc/os-release for details about this release.'),
""/etc/os-release"": (
    'NAME=""SLES""\nVERSION=""12-SP3""\nVERSION_ID=""12.3""\nPRETTY_NAME=""SUSE Linux Enterprise Server 12 SP3""\n'
    'ID=""sles""\nANSI_COLOR=""0;32""\nCPE_NAME=""cpe:/o:suse:sles_sap:12:sp3""'),
tro': {
'codename': '',
'id': 'sles',
'name': 'SUSE Linux Enterprise Server',
'version': '12.3',
'version_best': '12.3',

ult"": {
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"""/etc/os-release"": (
    'PRETTY_NAME=""Debian GNU/Linux stretch/sid""\nNAME=""Debian GNU/Linux""\nID=debian\nHOME_URL=""https://www.debian.org/""\n'
    'SUPPORT_URL=""https://www.debian.org/support""\nBUG_REPORT_URL=""https://bugs.debian.org/""'),
""/etc/debian_version"": 'stretch/sid\n',
tro': {
'codename': 'stretch',
'id': 'debian',
'name': 'Debian GNU/Linux',
'version': '9',
'version_best': '9.8',

""distribution_major_version"": ""9"",
""distribution_release"": ""stretch"",
""distribution_version"": ""9.8"",
'/etc/os-release': (
    'PRETTY_NAME=""Debian GNU/Linux 7 (wheezy)""\nNAME=""Debian GNU/Linux""\nVERSION_ID=""7""\nVERSION=""7 (wheezy)""\nID=debian\nANSI_COLOR=""1;31""\n'
    'HOME_URL=""http://www.debian.org/""\nSUPPORT_URL=""http://www.debian.org/support/""\nBUG_REPORT_URL=""http://bugs.debian.org/""'),
tro': {
'codename': 'wheezy',
'id': 'debian',
'name': 'Debian GNU/Linux',
'version': '7',
'version_best': '7.9',

"
-------------------------------------------------------------------------
"```python
{
    ""name"": ""Debian stretch/sid"",
    ""input"": {
        ""/etc/os-release"": 'PRETTY_NAME=""Debian GNU/Linux stretch/sid""\nNAME=""Debian GNU/Linux""\nID=debian\nHOME_URL=""https://www.debian.org/""\n'
                         'SUPPORT_URL=""https://www.debian.org/support""\nBUG_REPORT_URL=""https://bugs.debian.org/""',
        ""/etc/debian_version"": 'stretch/sid\n'
    },
    ""platform.dist"": ('debian', 'stretch/sid', ''),
    ""result"": {
        ""distribution"": ""Debian"",
        ""os_family"": ""Debian"",
        ""distribution_major_version"": ""9"",
        ""distribution_release"": ""stretch"",
        ""distribution_version"": ""9.8""
    }
},
{
    'name': ""Debian 7.9"",
    'input': {
        '/etc/os-release': 'PRETTY_NAME=""Debian GNU/Linux 7 (wheezy)""\nNAME=""Debian GNU/Linux""\nVERSION_ID=""7""\nVERSION=""7 (wheezy)""\nID=debian\nANSI_COLOR=""1;31""\n'
                           'HOME_URL=""http://www.debian.org/""\nSUPPORT_URL=""http://www.debian.org/support/""\nBUG_REPORT_URL=""http://bugs.debian.org/""',
        ""/etc/debian_version"": 'stretch/sid\n'
    },
    'platform.dist': ('debian', '7.9', ''),
    'result': {
        'distribution': 'Debian',
        'distribution_major_version': '7',
        'distribution_release': 'wheezy',
        'distribution_version': '7.9'
    }
}
```"
-------------------------------------------------------------------------
"""/etc/os-release"": (
    'PRETTY_NAME=""Debian GNU/Linux stretch/sid""\nNAME=""Debian GNU/Linux""\nID=debian\nHOME_URL=""https://www.debian.org/""\n'
    'SUPPORT_URL=""https://www.debian.org/support""\nBUG_REPORT_URL=""https://bugs.debian.org/""'),
""/etc/debian_version"": 'stretch/sid\n',
tro': {
'codename': 'stretch',
'id': 'debian',
'name': 'Debian GNU/Linux',
'version': '9',
'version_best': '9.8',

""distribution_major_version"": ""9"",
""distribution_release"": ""stretch"",
""distribution_version"": ""9.8"",
'/etc/os-release': (
    'PRETTY_NAME=""Debian GNU/Linux 7 (wheezy)""\nNAME=""Debian GNU/Linux""\nVERSION_ID=""7""\nVERSION=""7 (wheezy)""\nID=debian\nANSI_COLOR=""1;31""\n'
    'HOME_URL=""http://www.debian.org/""\nSUPPORT_URL=""http://www.debian.org/support/""\nBUG_REPORT_URL=""http://bugs.debian.org/""'),
tro': {
'codename': 'wheezy',
'id': 'debian',
'name': 'Debian GNU/Linux',
'version': '7',
'version_best': '7.9',

"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'/etc/os-release': (
    'PRETTY_NAME=""SteamOS GNU/Linux 2.0 (brewmaster)""\nNAME=""SteamOS GNU/Linux""\nVERSION_ID=""2""\nVERSION=""2 (brewmaster)""\n'
    'ID=steamos\nID_LIKE=debian\nHOME_URL=""http://www.steampowered.com/""\nSUPPORT_URL=""http://support.steampowered.com/""\n'
    'BUG_REPORT_URL=""http://support.steampowered.com/""'),
'/etc/lsb-release': 'DISTRIB_ID=SteamOS\nDISTRIB_RELEASE=2.0\nDISTRIB_CODENAME=brewmaster\nDISTRIB_DESCRIPTION=""SteamOS 2.0""',
tro': {
'codename': 'brewmaster',
'id': 'steamos',
'name': 'SteamOS GNU/Linux',
'version': '2.0',
'version_best': '2.0',

"
-------------------------------------------------------------------------
"'expr': TokenInfo(type=56 (ENCODING), string='utf-8', start=(0, 0), end=(0, 0), line='')"
-------------------------------------------------------------------------
"'/etc/os-release': (
    'PRETTY_NAME=""SteamOS GNU/Linux 2.0 (brewmaster)""\nNAME=""SteamOS GNU/Linux""\nVERSION_ID=""2""\nVERSION=""2 (brewmaster)""\n'
    'ID=steamos\nID_LIKE=debian\nHOME_URL=""http://www.steampowered.com/""\nSUPPORT_URL=""http://support.steampowered.com/""\n'
    'BUG_REPORT_URL=""http://support.steampowered.com/""'),
'/etc/lsb-release': 'DISTRIB_ID=SteamOS\nDISTRIB_RELEASE=2.0\nDISTRIB_CODENAME=brewmaster\nDISTRIB_DESCRIPTION=""SteamOS 2.0""',
tro': {
'codename': 'brewmaster',
'id': 'steamos',
'name': 'SteamOS GNU/Linux',
'version': '2.0',
'version_best': '2.0',

"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'/etc/os-release': ('PRETTY_NAME=""Devuan GNU/Linux 1 (jessie)""\nNAME=""Devuan GNU/Linux""\nVERSION_ID=""1""\nVERSION=""1 (jessie)""\n'
    'ID=devuan\nHOME_URL=""http://www.devuan.org/""\nSUPPORT_URL=""http://www.devuan.org/support/""\nBUG_REPORT_URL=""https://bugs.devuan.org/""'),
tro': {
'codename': 'jessie',
'id': 'devuan',
'name': 'Devuan GNU/Linux',
'version': '1',
'version_best': '1',

"
-------------------------------------------------------------------------
"{
    '/etc/os-release': (
        'PRETTY_NAME=""Devuan GNU/Linux 1 (jessie)""\n'
        'NAME=""Devuan GNU/Linux""\n'
        'VERSION_ID=""1""\n'
        'VERSION=""1 (jessie)""\n'
        'ID=devuan\n'
        'HOME_URL=""http://www.devuan.org/""\n'
        'SUPPORT_URL=""http://www.devuan.org/support/""\n'
        'BUG_REPORT_URL=""https://bugs.devuan.org/""'
    ),
    'tro': {
        'codename': 'jessie',
        'id': 'devuan',
        'name': 'Devuan GNU/Linux',
        'version': '1',
        'version_best': '1',
    }
}"
-------------------------------------------------------------------------
"'/etc/os-release': ('PRETTY_NAME=""Devuan GNU/Linux 1 (jessie)""\nNAME=""Devuan GNU/Linux""\nVERSION_ID=""1""\nVERSION=""1 (jessie)""\n'
    'ID=devuan\nHOME_URL=""http://www.devuan.org/""\nSUPPORT_URL=""http://www.devuan.org/support/""\nBUG_REPORT_URL=""https://bugs.devuan.org/""'),
tro': {
'codename': 'jessie',
'id': 'devuan',
'name': 'Devuan GNU/Linux',
'version': '1',
'version_best': '1',

"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'/etc/os-release': (
    'PRETTY_NAME=""Devuan GNU/Linux ascii""\nNAME=""Devuan GNU/Linux""\nID=devuan\nHOME_URL=""https://www.devuan.org/""\n'
    'SUPPORT_URL=""https://devuan.org/os/community""\nBUG_REPORT_URL=""https://bugs.devuan.org/""'),
tro': {
'codename': '',
'id': 'devuan',
'name': 'Devuan GNU/Linux',
'version': '',
'version_best': '',

"
-------------------------------------------------------------------------
"'/etc/os-release': (
    'PRETTY_NAME=""Devuan GNU/Linux ascii""\nNAME=""Devuan GNU/Linux""\nID=devuan\nHOME_URL=""https://www.devuan.org/""\n'
    'SUPPORT_URL=""https://devuan.org/os/community""\nBUG_REPORT_URL=""https://bugs.devuan.org/""'),
'tro': {
    'codename': '',
    'id': 'devuan',
    'name': 'Devuan GNU/Linux',
    'version': '',
    'version_best': '',
}"
-------------------------------------------------------------------------
"'/etc/os-release': (
    'PRETTY_NAME=""Devuan GNU/Linux ascii""\nNAME=""Devuan GNU/Linux""\nID=devuan\nHOME_URL=""https://www.devuan.org/""\n'
    'SUPPORT_URL=""https://devuan.org/os/community""\nBUG_REPORT_URL=""https://bugs.devuan.org/""'),
tro': {
'codename': '',
'id': 'devuan',
'name': 'Devuan GNU/Linux',
'version': '',
'version_best': '',

"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': 'xenial',
    'id': 'ubuntu',
    'name': 'Ubuntu',
    'version': '16.04',
    'version_best': '16.04.6',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'xenial',
    'id': 'ubuntu',
    'name': 'Ubuntu',
    'version': '16.04',
    'version_best': '16.04.6',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'xenial',
    'id': 'ubuntu',
    'name': 'Ubuntu',
    'version': '16.04',
    'version_best': '16.04.6',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'/etc/lsb-release': 'DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=10.04\nDISTRIB_CODENAME=lucid\nDISTRIB_DESCRIPTION=""Ubuntu 10.04.4 LTS',
: {
ename': 'lucid',
: 'ubuntu',
e': 'Ubuntu',
sion': '10.04',
sion_best': '10.04.1',

"
-------------------------------------------------------------------------
"'/etc/lsb-release': 'DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=10.04\nDISTRIB_CODENAME=lucid\nDISTRIB_DESCRIPTION=""Ubuntu 10.04.4 LTS',
         'name': 'Ubuntu',
         'platform.dist': ('Ubuntu', '10.04', 'lucid'),
         'result':
             {
                 'distribution': u'Ubuntu',
                 'version': '10.04',
                 'version_best': '10.04.1',
                 'codename': 'lucid'
             }"
-------------------------------------------------------------------------
"'/etc/lsb-release': 'DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=10.04\nDISTRIB_CODENAME=lucid\nDISTRIB_DESCRIPTION=""Ubuntu 10.04.4 LTS',
: {
ename': 'lucid',
: 'ubuntu',
e': 'Ubuntu',
sion': '10.04',
sion_best': '10.04.1',

"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'/etc/lsb-release': 'DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=14.04\nDISTRIB_CODENAME=trusty\nDISTRIB_DESCRIPTION=""Ubuntu 14.04.4 LTS""',
'/etc/os-release': (
    'NAME=""Ubuntu""\nVERSION=""14.04.4 LTS, Trusty Tahr""\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME=""Ubuntu 14.04.4 LTS""\nVERSION_ID=""14.04""\n'
    'HOME_URL=""http://www.ubuntu.com/""\nSUPPORT_URL=""http://help.ubuntu.com/""\nBUG_REPORT_URL=""http://bugs.launchpad.net/ubuntu/""'),
tro': {
'codename': 'trusty',
'id': 'ubuntu',
'name': 'Ubuntu',
'version': '14.04',
'version_best': '14.04.4',

"
-------------------------------------------------------------------------
"```python
{
    '/etc/lsb-release': 'DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=14.04\nDISTRIB_CODENAME=trusty\nDISTRIB_DESCRIPTION=""Ubuntu 14.04.4 LTS""',
    '/etc/os-release': (
        'NAME=""Ubuntu""\nVERSION=""14.04.4 LTS, Trusty Tahr""\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME=""Ubuntu 14.04.4 LTS""\nVERSION_ID=""14.04""\n'
        'HOME_URL=""http://www.ubuntu.com/""\nSUPPORT_URL=""http://help.ubuntu.com/""\nBUG_REPORT_URL=""http://bugs.launchpad.net/ubuntu/""'),
    'tro': {
        'codename': 'trusty',
        'id': 'ubuntu',
        'name': 'Ubuntu',
        'version': '14.04',
        'version_best': '14.04.4',
    }
}
```"
-------------------------------------------------------------------------
"'/etc/lsb-release': 'DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=14.04\nDISTRIB_CODENAME=trusty\nDISTRIB_DESCRIPTION=""Ubuntu 14.04.4 LTS""',
'/etc/os-release': (
    'NAME=""Ubuntu""\nVERSION=""14.04.4 LTS, Trusty Tahr""\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME=""Ubuntu 14.04.4 LTS""\nVERSION_ID=""14.04""\n'
    'HOME_URL=""http://www.ubuntu.com/""\nSUPPORT_URL=""http://help.ubuntu.com/""\nBUG_REPORT_URL=""http://bugs.launchpad.net/ubuntu/""'),
tro': {
'codename': 'trusty',
'id': 'ubuntu',
'name': 'Ubuntu',
'version': '14.04',
'version_best': '14.04.4',

"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'input': {
    '/etc/lsb-release': 'DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=12.04\nDISTRIB_CODENAME=precise\nDISTRIB_DESCRIPTION=""Ubuntu 12.04.5 LTS""',
    '/etc/os-release': (
        'NAME=""Ubuntu""\nVERSION=""12.04.5 LTS, Precise Pangolin""\nID=ubuntu\nID_LIKE=debian\n'
        'PRETTY_NAME=""Ubuntu precise (12.04.5 LTS)""\nVERSION_ID=""12.04""'),
},
'distro': {
    'codename': 'precise',
    'id': 'ubuntu',
    'name': 'Ubuntu',
    'version': '12.04',
    'version_best': '12.04.5',
},
"
-------------------------------------------------------------------------
"'input': {
    '/etc/lsb-release': 'DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=12.04\nDISTRIB_CODENAME=precise\nDISTRIB_DESCRIPTION=""Ubuntu 12.04.5 LTS""',
    '/etc/os-release': (
        'NAME=""Ubuntu""\nVERSION=""12.04.5 LTS, Precise Pangolin""\nID=ubuntu\nID_LIKE=debian\n'
        'PRETTY_NAME=""Ubuntu precise (12.04.5 LTS)""\nVERSION_ID=""12.04""'),
},
'distro': {
    'codename': 'precise',
    'id': 'ubuntu',
    'name': 'Ubuntu',
    'version': '12.04',
    'version_best': '12.04.5',
},"
-------------------------------------------------------------------------
"'input': {
    '/etc/lsb-release': 'DISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=12.04\nDISTRIB_CODENAME=precise\nDISTRIB_DESCRIPTION=""Ubuntu 12.04.5 LTS""',
    '/etc/os-release': (
        'NAME=""Ubuntu""\nVERSION=""12.04.5 LTS, Precise Pangolin""\nID=ubuntu\nID_LIKE=debian\n'
        'PRETTY_NAME=""Ubuntu precise (12.04.5 LTS)""\nVERSION_ID=""12.04""'),
},
'distro': {
    'codename': 'precise',
    'id': 'ubuntu',
    'name': 'Ubuntu',
    'version': '12.04',
    'version_best': '12.04.5',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': 'kali-rolling',
    'id': 'kali',
    'name': 'Kali GNU/Linux Rolling',
    'version': '2019.1',
    'version_best': '2019.1',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'kali-rolling',
    'id': 'kali',
    'name': 'Kali GNU/Linux Rolling',
    'version': '2019.1',
    'version_best': '2019.1',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'kali-rolling',
    'id': 'kali',
    'name': 'Kali GNU/Linux Rolling',
    'version': '2019.1',
    'version_best': '2019.1',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': 'xenial',
    'id': 'neon',
    'name': 'KDE neon',
    'version': '16.04',
    'version_best': '16.04',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': '16.04',
    'id': 'neon',
    'name': 'KDE neon',
    'version': '16.04',
    'version_best': '16.04'
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'xenial',
    'id': 'neon',
    'name': 'KDE neon',
    'version': '16.04',
    'version_best': '16.04',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'/etc/os-release': (
    'NAME=CoreOS\nID=coreos\nVERSION=976.0.0\nVERSION_ID=976.0.0\nBUILD_ID=2016-03-03-2324\nPRETTY_NAME=""CoreOS 976.0.0 (Coeur Rouge)""\n'
    'ANSI_COLOR=""1;32""\nHOME_URL=""https://coreos.com/""\nBUG_REPORT_URL=""https://github.com/coreos/bugs/issues""'),
'/etc/lsb-release': (
    'DISTRIB_ID=CoreOS\nDISTRIB_RELEASE=976.0.0\nDISTRIB_CODENAME=""Coeur Rouge""\nDISTRIB_DESCRIPTION=""CoreOS 976.0.0 (Coeur Rouge)""'),
tro': {
'codename': 'Coeur Rouge',
'id': 'coreos',
'name': 'CoreOS',
'version': '976.0.0',
'version_best': '976.0.0',

""distribution_major_version"": ""976"",
"
-------------------------------------------------------------------------
"{
    'name': 'Core OS',
    'input': {
    },
    'platform.dist': ('CoreOS', '976.0.0', 'Coeur Rouge'),
    'platform.release': '976.0.0',
    'result': {
        ""distribution"": ""CoreOS"",
        ""distribution_version"": ""976.0.0"",
        ""distribution_major_version"": ""976"",
    }
}"
-------------------------------------------------------------------------
"'/etc/os-release': (
    'NAME=CoreOS\nID=coreos\nVERSION=976.0.0\nVERSION_ID=976.0.0\nBUILD_ID=2016-03-03-2324\nPRETTY_NAME=""CoreOS 976.0.0 (Coeur Rouge)""\n'
    'ANSI_COLOR=""1;32""\nHOME_URL=""https://coreos.com/""\nBUG_REPORT_URL=""https://github.com/coreos/bugs/issues""'),
'/etc/lsb-release': (
    'DISTRIB_ID=CoreOS\nDISTRIB_RELEASE=976.0.0\nDISTRIB_CODENAME=""Coeur Rouge""\nDISTRIB_DESCRIPTION=""CoreOS 976.0.0 (Coeur Rouge)""'),
tro': {
'codename': 'Coeur Rouge',
'id': 'coreos',
'name': 'CoreOS',
'version': '976.0.0',
'version_best': '976.0.0',

""distribution_major_version"": ""976"",
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Rouge',
    'id': 'linuxmint',
    'name': 'CoreOS',
    'version': '976.0.0',
    'version_best': '',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Rouge',
    'id': 'coreos',
    'name': 'CoreOS',
    'version': '976.0.0',
    'version_best': '',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Rouge',
    'id': 'coreos',
    'name': 'CoreOS',
    'version': '976.0.0',
    'version_best': '',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Rouge',
    'id': 'CoreOS',
    'name': 'CoreOS',
    'version': '976.0.0',
    'version_best': '976.0.0',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Rouge',
    'id': 'CoreOS',
    'name': 'Coeur Rouge',
    'version': '976.0.0',
    'version_best': '976.0.0',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Coeur Rouge',
    'id': 'coreos',
    'name': 'CoreOS',
    'version': '976.0.0',
    'version_best': '',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Rouge',
    'id': 'CoreOS',
    'name': 'Coeur Rouge',
    'version': '976.0.0',
    'version_best': '',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Rouge',
    'id': 'linuxmint',
    'name': 'CoreOS',
    'version': '976.0.0',
    'version_best': '',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Rouge',
    'id': 'CoreOS',
    'name': 'CoreOS',
    'version': '976.0.0',
    'version_best': '976.0.0',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Coeur Rouge',
    'id': 'CoreOS',
    'name': 'CoreOS',
    'version': '976.0.0',
    'version_best': '',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': '',
    'name': '',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': 'Twenty Two',
    'id': 'fedora',
    'name': 'Fedora',
    'version': '22',
    'version_best': '22',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Twenty Two',
    'id': 'fedora',
    'name': 'Fedora',
    'version': '22',
    'version_best': '22',
    'type': 'linux',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Twenty Two',
    'id': 'fedora',
    'name': 'Fedora',
    'version': '22',
    'version_best': '22',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': 'Rawhide',
    'id': 'fedora',
    'name': 'Fedora',
    'version': '25',
    'version_best': '25',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Rawhide',
    'id': 'fedora',
    'name': 'Fedora',
    'version': '25',
    'version_best': '25',
}"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Rawhide',
    'id': 'fedora',
    'name': 'Fedora',
    'version': '25',
    'version_best': '25',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': 'smgl',
    'name': 'Source Mage GNU/Linux',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Rouge',
    'id': 'smgl',
    'name': 'Source Mage GNU/Linux',
    'version': '976.0.0',
    'version_best': '976.0.0',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': 'smgl',
    'name': 'Source Mage GNU/Linux',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': 'arch',
    'name': 'Arch Linux',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': 'arch',
    'name': 'Arch Linux',
    'version': '',
    'version_best': '',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': 'arch',
    'name': 'Arch Linux',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"{
    ""platform.dist"": [
        ""Clear Linux OS"",
        ""26580"",
        ""clear-linux-os""
    ],
    'distro': {
        'codename': '',
        'id': 'clear-linux-os',
        'name': 'Clear Linux OS',
        'version': '26580',
        'version_best': '26580',
    },
    ""input"": {
        ""/etc/os-release"": (
            'NAME=""Clear Linux OS""\nVERSION=1\nID=clear-linux-os\nID_LIKE=clear-linux-os\nVERSION_ID=26580\nPRETTY_NAME=""Clear Linux OS""\n'
            'ANSI_COLOR=""1;35""\nHOME_URL=""https://clearlinux.org""\nSUPPORT_URL=""https://clearlinux.org""\n'
            'BUG_REPORT_URL=""mailto:dev@lists.clearlinux.org""\nPRIVACY_POLICY_URL=""http://www.intel.com/privacy""'),
        ""/usr/lib/os-release"": (
            'NAME=""Clear Linux OS""\nVERSION=1\nID=clear-linux-os\nID_LIKE=clear-linux-os\nVERSION_ID=26580\nPRETTY_NAME=""Clear Linux OS""\n'
            'ANSI_COLOR=""1;35""\nHOME_URL=""https://clearlinux.org""\nSUPPORT_URL=""https://clearlinux.org""\n'
            'BUG_REPORT_URL=""mailto:dev@lists.clearlinux.org""\nPRIVACY_POLICY_URL=""http://www.intel.com/privacy""'),
    },
    ""name"": ""ClearLinux 26580"",
    ""result"": {
        ""distribution_release"": ""clear-linux-os"",
        ""distribution"": ""Clear Linux OS"",
        ""distribution_major_version"": ""26580"",
        ""os_family"": ""ClearLinux"",
        ""distribution_version"": ""26580""
    }
"
-------------------------------------------------------------------------
"{
    ""platform.dist"": [
        ""Clear Linux OS"",
        ""26580"",
        ""clear-linux-os""
    ],
    'distro': {
        'codename': '',
        'id': 'clear-linux-os',
        'name': 'Clear Linux OS',
        'version': '26580',
        'version_best': '26580',
    },
    ""input"": {
        ""/etc/os-release"": (
            'NAME=""Clear Linux OS""\nVERSION=1\nID=clear-linux-os\nID_LIKE=clear-linux-os\nVERSION_ID=26580\nPRETTY_NAME=""Clear Linux OS""\n'
            'ANSI_COLOR=""1;35""\nHOME_URL=""https://clearlinux.org""\nSUPPORT_URL=""https://clearlinux.org""\n'
            'BUG_REPORT_URL=""mailto:dev@lists.clearlinux.org""\nPRIVACY_POLICY_URL=""http://www.intel.com/privacy""'),
        ""/usr/lib/os-release"": (
            'NAME=""Clear Linux OS""\nVERSION=1\nID=clear-linux-os\nID_LIKE=clear-linux-os\nVERSION_ID=26580\nPRETTY_NAME=""Clear Linux OS""\n'
            'ANSI_COLOR=""1;35""\nHOME_URL=""https://clearlinux.org""\nSUPPORT_URL=""https://clearlinux.org""\n'
            'BUG_REPORT_URL=""mailto:dev@lists.clearlinux.org""\nPRIVACY_POLICY_URL=""http://www.intel.com/privacy""'),
    },
    ""name"": ""ClearLinux 26580"",
    ""result"": {
        ""distribution_release"": ""clear-linux-os"",
        ""distribution"": ""Clear Linux OS"",
        ""distribution_major_version"": ""26580"",
        ""os_family"": ""ClearLinux"",
        ""distribution_version"": ""26580""
    }
}"
-------------------------------------------------------------------------
"{
    ""platform.dist"": [
        ""Clear Linux OS"",
        ""26580"",
        ""clear-linux-os""
    ],
    'distro': {
        'codename': '',
        'id': 'clear-linux-os',
        'name': 'Clear Linux OS',
        'version': '26580',
        'version_best': '26580',
    },
    ""input"": {
        ""/etc/os-release"": (
            'NAME=""Clear Linux OS""\nVERSION=1\nID=clear-linux-os\nID_LIKE=clear-linux-os\nVERSION_ID=26580\nPRETTY_NAME=""Clear Linux OS""\n'
            'ANSI_COLOR=""1;35""\nHOME_URL=""https://clearlinux.org""\nSUPPORT_URL=""https://clearlinux.org""\n'
            'BUG_REPORT_URL=""mailto:dev@lists.clearlinux.org""\nPRIVACY_POLICY_URL=""http://www.intel.com/privacy""'),
        ""/usr/lib/os-release"": (
            'NAME=""Clear Linux OS""\nVERSION=1\nID=clear-linux-os\nID_LIKE=clear-linux-os\nVERSION_ID=26580\nPRETTY_NAME=""Clear Linux OS""\n'
            'ANSI_COLOR=""1;35""\nHOME_URL=""https://clearlinux.org""\nSUPPORT_URL=""https://clearlinux.org""\n'
            'BUG_REPORT_URL=""mailto:dev@lists.clearlinux.org""\nPRIVACY_POLICY_URL=""http://www.intel.com/privacy""'),
    },
    ""name"": ""ClearLinux 26580"",
    ""result"": {
        ""distribution_release"": ""clear-linux-os"",
        ""distribution"": ""Clear Linux OS"",
        ""distribution_major_version"": ""26580"",
        ""os_family"": ""ClearLinux"",
        ""distribution_version"": ""26580""
    }
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'distro': {
    'codename': '',
    'id': 'arch',
    'name': 'Arch Linux',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"'distro': {
    'codename': 'Archlinux',
    'id': 'arch',
    'name': 'Arch Linux',
    'version': '',
    'version_best': '',
},"
-------------------------------------------------------------------------
"'distro': {
    'codename': '',
    'id': 'arch',
    'name': 'Arch Linux',
    'version': '',
    'version_best': '',
},
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'/etc/os-release': (
    'NAME=""Cumulus Linux""\nVERSION_ID=3.7.3\nVERSION=""Cumulus Linux 3.7.3""\nPRETTY_NAME=""Cumulus Linux""\nID=cumulus-linux\n'
    'ID_LIKE=debian\nCPE_NAME=cpe:/o:cumulusnetworks:cumulus_linux:3.7.3\nHOME_URL=""http://www.cumulusnetworks.com/""\n'
    'SUPPORT_URL=""http://support.cumulusnetworks.com/""'),
tro': {
'codename': '',
'id': 'cumulus-linux',
'name': 'Cumulus Linux',
'version': '3.7.3',
'version_best': '3.7.3',

"
-------------------------------------------------------------------------
"'/etc/os-release': (
    'NAME=""Cumulus Linux""\nVERSION_ID=3.7.3\nVERSION=""Cumulus Linux 3.7.3""\nPRETTY_NAME=""Cumulus Linux""\nID=cumulus-linux\n'
    'ID_LIKE=debian\nCPE_NAME=cpe:/o:cumulusnetworks:cumulus_linux:3.7.3\nHOME_URL=""http://www.cumulusnetworks.com/""\n'
    'SUPPORT_URL=""http://support.cumulusnetworks.com/""'), tro': {
'codename': '',
'id': 'cumulus-linux',
'name': 'Cumulus Linux',
'version': '3.7.3',
'version_best': '3.7.3',"
-------------------------------------------------------------------------
"'/etc/os-release': (
    'NAME=""Cumulus Linux""\nVERSION_ID=3.7.3\nVERSION=""Cumulus Linux 3.7.3""\nPRETTY_NAME=""Cumulus Linux""\nID=cumulus-linux\n'
    'ID_LIKE=debian\nCPE_NAME=cpe:/o:cumulusnetworks:cumulus_linux:3.7.3\nHOME_URL=""http://www.cumulusnetworks.com/""\n'
    'SUPPORT_URL=""http://support.cumulusnetworks.com/""'),
tro': {
'codename': '',
'id': 'cumulus-linux',
'name': 'Cumulus Linux',
'version': '3.7.3',
'version_best': '3.7.3',

"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"'/etc/os-release': (
    'NAME=""Cumulus Linux""\nVERSION_ID=2.5.4\nVERSION=""2.5.4-6dc6e80-201510091936-build""\nPRETTY_NAME=""Cumulus Linux""\nID=cumulus-linux\n'
    'ID_LIKE=debian\nCPE_NAME=cpe:/o:cumulusnetworks:cumulus_linux:2.5.4-6dc6e80-201510091936-build\nHOME_URL=""http://www.cumulusnetworks.com/""\n'
    'SUPPORT_URL=""http://support.cumulusnetworks.com/""'),
tro': {
'codename': '',
'id': 'cumulus-linux',
'name': 'Cumulus Linux',
'version': '2.5.4',
'version_best': '2.5.4',

"
-------------------------------------------------------------------------
"```python
{
    '/etc/os-release': {
        'NAME': 'Cumulus Linux',
        'VERSION_ID': '2.5.4',
        'VERSION': '2.5.4-6dc6e80-201510091936-build',
        'PRETTY_NAME': 'Cumulus Linux',
        'ID': 'cumulus-linux',
        'ID_LIKE': 'debian',
        'CPE_NAME': 'cpe:/o:cumulusnetworks:cumulus_linux:2.5.4-6dc6e80-201510091936-build',
        'HOME_URL': 'http://www.cumulusnetworks.com/',
        'SUPPORT_URL': 'http://support.cumulusnetworks.com/'
    },
    'tro': {
        'codename': '',
        'id': 'cumulus-linux',
        'name': 'Cumulus Linux',
        'version': '2.5.4',
        'version_best': '2.5.4'
    }
}
```"
-------------------------------------------------------------------------
"'/etc/os-release': (
    'NAME=""Cumulus Linux""\nVERSION_ID=2.5.4\nVERSION=""2.5.4-6dc6e80-201510091936-build""\nPRETTY_NAME=""Cumulus Linux""\nID=cumulus-linux\n'
    'ID_LIKE=debian\nCPE_NAME=cpe:/o:cumulusnetworks:cumulus_linux:2.5.4-6dc6e80-201510091936-build\nHOME_URL=""http://www.cumulusnetworks.com/""\n'
    'SUPPORT_URL=""http://support.cumulusnetworks.com/""'),
tro': {
'codename': '',
'id': 'cumulus-linux',
'name': 'Cumulus Linux',
'version': '2.5.4',
'version_best': '2.5.4',

"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"""linuxmint"",
""18.2"",
""sonya""
""/etc/os-release"": (
    'NAME=""Linux Mint""\nVERSION=""18.2 (Sonya)""\nID=linuxmint\nID_LIKE=ubuntu\nPRETTY_NAME=""Linux Mint 18.2""\n'
    'VERSION_ID=""18.2""\nHOME_URL=""http://www.linuxmint.com/""\nSUPPORT_URL=""http://forums.linuxmint.com/""\n'
    'BUG_REPORT_URL=""http://bugs.launchpad.net/linuxmint/""\nVERSION_CODENAME=sonya\nUBUNTU_CODENAME=xenial\n'),
""/usr/lib/os-release"": (
    'NAME=""Linux Mint""\nVERSION=""18.2 (Sonya)""\nID=linuxmint\nID_LIKE=ubuntu\nPRETTY_NAME=""Linux Mint 18.2""\n'
    'VERSION_ID=""18.2""\nHOME_URL=""http://www.linuxmint.com/""\nSUPPORT_URL=""http://forums.linuxmint.com/""\n'
    'BUG_REPORT_URL=""http://bugs.launchpad.net/linuxmint/""\nVERSION_CODENAME=sonya\nUBUNTU_CODENAME=xenial\n'),
""/etc/lsb-release"": ""DISTRIB_ID=LinuxMint\nDISTRIB_RELEASE=18.2\nDISTRIB_CODENAME=sonya\nDISTRIB_DESCRIPTION=\""Linux Mint 18.2 Sonya\""\n""
""distribution_release"": ""sonya"",
""distribution_version"": ""18.2""

e"": ""Linux Mint 18.2"",
tro"": {
""codename"": ""sonya"",
""version"": ""18.2"",
""id"": ""linuxmint"",
""version_best"": ""18.2"",
""name"": ""Linux Mint""


"
-------------------------------------------------------------------------
"d[""e""] = ""Linux Mint 18.2""
d[""tro""] = {
    ""codename"": ""sonya"",
    ""version"": ""18.2"",
    ""id"": ""linuxmint"",
    ""version_best"": ""18.2"",
    ""name"": ""Linux Mint""
}"
-------------------------------------------------------------------------
"""linuxmint"",
""18.2"",
""sonya""
""/etc/os-release"": (
    'NAME=""Linux Mint""\nVERSION=""18.2 (Sonya)""\nID=linuxmint\nID_LIKE=ubuntu\nPRETTY_NAME=""Linux Mint 18.2""\n'
    'VERSION_ID=""18.2""\nHOME_URL=""http://www.linuxmint.com/""\nSUPPORT_URL=""http://forums.linuxmint.com/""\n'
    'BUG_REPORT_URL=""http://bugs.launchpad.net/linuxmint/""\nVERSION_CODENAME=sonya\nUBUNTU_CODENAME=xenial\n'),
""/usr/lib/os-release"": (
    'NAME=""Linux Mint""\nVERSION=""18.2 (Sonya)""\nID=linuxmint\nID_LIKE=ubuntu\nPRETTY_NAME=""Linux Mint 18.2""\n'
    'VERSION_ID=""18.2""\nHOME_URL=""http://www.linuxmint.com/""\nSUPPORT_URL=""http://forums.linuxmint.com/""\n'
    'BUG_REPORT_URL=""http://bugs.launchpad.net/linuxmint/""\nVERSION_CODENAME=sonya\nUBUNTU_CODENAME=xenial\n'),
""/etc/lsb-release"": ""DISTRIB_ID=LinuxMint\nDISTRIB_RELEASE=18.2\nDISTRIB_CODENAME=sonya\nDISTRIB_DESCRIPTION=\""Linux Mint 18.2 Sonya\""\n""
""distribution_release"": ""sonya"",
""distribution_version"": ""18.2""

e"": ""Linux Mint 18.2"",
tro"": {
""codename"": ""sonya"",
""version"": ""18.2"",
""id"": ""linuxmint"",
""version_best"": ""18.2"",
""name"": ""Linux Mint""


"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"return testcase['distro']['name']

mock_distro_id():
return testcase['distro']['id']
mock_distro_version(best=False):
if best:
    return testcase['distro']['version_best']
return testcase['distro']['version']
return testcase['distro']['codename']
"
-------------------------------------------------------------------------
"```python
def test_distribution_version(am, mocker, testcase):
    return testcase.get('distro', {}).get('name', '')

def mock_distro_id():
    return testcase.get('distro', {}).get('id', '')

def mock_distro_version(best=False):
    if best:
        return testcase.get('distro', {}).get('version_best', '')
    return testcase.get('distro', {}).get('version', '')
    return testcase.get('distro', {}).get('codename', '')
```"
-------------------------------------------------------------------------
"return testcase['distro']['name']

mock_distro_id():
return testcase['distro']['id']
mock_distro_version(best=False):
if best:
    return testcase['distro']['version_best']
return testcase['distro']['version']
return testcase['distro']['codename']
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"mocker.patch('ansible.module_utils.distro.id', mock_distro_id)
"
-------------------------------------------------------------------------
"mocker.patch('ansible.module_utils.distro.id', mock_distro_id)"
-------------------------------------------------------------------------
"mocker.patch('ansible.module_utils.distro.id', mock_distro_id)
"
-------------------------------------------------------------------------
"Recom
PRs: 57814, 58538"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_bytes, to_text, to_native
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils._text import to_bytes, to_text, to_native
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes, to_text, to_native
"
-------------------------------------------------------------------------
"Recom
PRs: 58503, 58518"
-------------------------------------------------------------------------
=========================================================================
"return to_native(self.data, errors='surrogate_or_strict')
"
-------------------------------------------------------------------------
"```python
class AnsibleVaultEncryptedUnicode(yaml.YAMLObject, AnsibleBaseYAMLObject):
    return True

def __str__(self):

def __unicode__(self):
    return to_native(self.data, errors='surrogate_or_strict')
```"
-------------------------------------------------------------------------
"return to_native(self.data, errors='surrogate_or_strict')
"
-------------------------------------------------------------------------
"Recom
PRs: 58503, 58518"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_native

"
-------------------------------------------------------------------------
from ansible.module_utils._text import to_native
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native

"
-------------------------------------------------------------------------
"Recom
PRs: 58503, 58518"
-------------------------------------------------------------------------
=========================================================================
"
def test_str_vaulted_utf8_value_37258(self):
    seq = u""aöffü""
    avu = self._from_plaintext(seq)
    assert str(avu) == to_native(seq)
"
-------------------------------------------------------------------------
"```python
def test_str_vaulted_utf8_value_37258(self):
    seq = u""aöffü""
    avu = self._from_plaintext(seq)
    self.assertEqual(str(avu), to_native(seq))
```"
-------------------------------------------------------------------------
"
def test_str_vaulted_utf8_value_37258(self):
    seq = u""aöffü""
    avu = self._from_plaintext(seq)
    assert str(avu) == to_native(seq)
"
-------------------------------------------------------------------------
"Recom
PRs: 58503, 58518"
-------------------------------------------------------------------------
=========================================================================
"distribution = 'Oracle'
"
-------------------------------------------------------------------------
"```python
class OracleLinuxHostname(Hostname):
    platform = 'Linux'
    strategy_class = RedHatStrategy
    distribution = 'Oracle'
```"
-------------------------------------------------------------------------
"distribution = 'Oracle'
"
-------------------------------------------------------------------------
"Recom
PRs: 58510, 58512"
-------------------------------------------------------------------------
=========================================================================
"arg1: ""true""
arg2: ""whatever""
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='arg1', ctx=Store()), annotation=Constant(value='true'), simple=1)
AnnAssign(target=Name(id='arg2', ctx=Store()), annotation=Constant(value='whatever'), simple=1)"
-------------------------------------------------------------------------
"arg1: ""true""
arg2: ""whatever""
"
-------------------------------------------------------------------------
"Recom
PRs: 58475, 58486"
-------------------------------------------------------------------------
=========================================================================
"arg1: ""true""
arg2: ""whatever""
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='arg1', ctx=Store()), annotation=Constant(value='true'), simple=1),
AnnAssign(target=Name(id='arg2', ctx=Store()), annotation=Constant(value='whatever'), simple=1)"
-------------------------------------------------------------------------
"arg1: ""true""
arg2: ""whatever""
"
-------------------------------------------------------------------------
"Recom
PRs: 58475, 58486"
-------------------------------------------------------------------------
=========================================================================
"- Has no effect when C(local) is C(True)
- Has no effect when C(local) is C(True)
"
-------------------------------------------------------------------------
- Has no effect when `local` is `True`
-------------------------------------------------------------------------
"- Mutually exclusive with C(local)
- Mutually exclusive with C(local)
"
-------------------------------------------------------------------------
"Recom
PRs: 55401, 58480"
-------------------------------------------------------------------------
=========================================================================
"if self.groups is not None and not self.local and len(self.groups):
"
-------------------------------------------------------------------------
"```python
if self.groups is not None and not self.local and len(self.groups):
```"
-------------------------------------------------------------------------
"if self.groups is not None and not self.local and len(self.groups):
"
-------------------------------------------------------------------------
"Recom
PRs: 55401, 58480"
-------------------------------------------------------------------------
=========================================================================
"def image_exists(module, executable, name):
command = [executable, 'image', 'exists', name]
rc, out, err = module.run_command(command)
if rc == 1:
    return False
elif 'Command ""exists"" not found' in err:
    # The 'exists' test is available in podman >= 0.12.1
    command = [executable, 'image', 'ls', '-q', name]
    rc2, out2, err2 = module.run_command(command)
    if rc2 != 0:
        return False
return True


filter_invalid_names(module, executable, name):
valid_names = []
names = name
    names = [name]
for name in names:
    if image_exists(module, executable, name):
        valid_names.append(name)
return valid_names
get_image_info(module, executable, name):
names = name
if not isinstance(name, list):
    names = [name]

if len(names) > 0:
    command = [executable, 'image', 'inspect']
    command.extend(names)
    rc, out, err = module.run_command(command)

    if rc != 0:
        module.fail_json(msg=""Unable to gather info for '{0}': {1}"".format(', '.join(names), err))
    return out

else:
    return json.dumps([])
"
-------------------------------------------------------------------------
"```python
def image_exists(module, executable, name):
    command = [executable, 'image', 'exists', name]
    rc, out, err = module.run_command(command)
    if rc == 1:
        return False
    elif 'Command ""exists"" not found' in err:
        # The 'exists' test is available in podman >= 0.12.1
        command = [executable, 'image', 'ls', '-q', name]
        rc2, out2, err2 = module.run_command(command)
        if rc2 != 0:
            return False
    return True

def filter_invalid_names(module, executable, name):
    valid_names = []
    names = [name] if not isinstance(name, list) else name
    
    for name in names:
        if image_exists(module, executable, name):
            valid_names.append(name)
    
    return valid_names

def get_image_info(module, executable, name):
    names = [name] if not isinstance(name, list) else name

    if len(names) > 0:
        command = [executable, 'image', 'inspect']
        command.extend(names)
        rc, out, err = module.run_command(command)

        if rc != 0:
            module.fail_json(msg=""Unable to gather info for '{0}': {1}"".format(', '.join(names), err))
        return out

    else:
        return json.dumps([])
```  "
-------------------------------------------------------------------------
"def image_exists(module, executable, name):
command = [executable, 'image', 'exists', name]
rc, out, err = module.run_command(command)
if rc == 1:
    return False
elif 'Command ""exists"" not found' in err:
    # The 'exists' test is available in podman >= 0.12.1
    command = [executable, 'image', 'ls', '-q', name]
    rc2, out2, err2 = module.run_command(command)
    if rc2 != 0:
        return False
return True


filter_invalid_names(module, executable, name):
valid_names = []
names = name
    names = [name]
for name in names:
    if image_exists(module, executable, name):
        valid_names.append(name)
return valid_names
get_image_info(module, executable, name):
names = name
if not isinstance(name, list):
    names = [name]

if len(names) > 0:
    command = [executable, 'image', 'inspect']
    command.extend(names)
    rc, out, err = module.run_command(command)

    if rc != 0:
        module.fail_json(msg=""Unable to gather info for '{0}': {1}"".format(', '.join(names), err))
    return out

else:
    return json.dumps([])
"
-------------------------------------------------------------------------
"Recom
PRs: 57962, 58437"
-------------------------------------------------------------------------
=========================================================================
"valid_names = filter_invalid_names(module, executable, name)
results = json.loads(get_image_info(module, executable, valid_names))
"
-------------------------------------------------------------------------
"```python
valid_names = filter_invalid_names(module, executable, name)
results = json.loads(get_image_info(module, executable, valid_names))
```"
-------------------------------------------------------------------------
"valid_names = filter_invalid_names(module, executable, name)
results = json.loads(get_image_info(module, executable, valid_names))
"
-------------------------------------------------------------------------
"Recom
PRs: 57962, 58437"
-------------------------------------------------------------------------
=========================================================================
"cols.insert(3, None)  # No address
cols.insert(3, None)  # No IP-mask
en(cols) < 6:
cols.insert(4, None)  # No IP-mask
 cols[5] not in PG_HBA_METHODS:
cols.insert(4, None)  # No IP-mask
ols[5] not in PG_HBA_METHODS:
raise PgHbaValueError(""Rule {0} of '{1}' type has invalid auth-method '{2}'"".format(line, cols[0], cols[5]))

en(cols) < 7:
cols.insert(6, None)  # No auth-options
cols[6] = "" "".join(cols[6:])  # combine all auth-options
"
-------------------------------------------------------------------------
"```python
cols.insert(3, None)  # No address
if len(cols) < 6:
    cols.insert(4, None)  # No IP-mask
    if cols[5] not in PG_HBA_METHODS:
        raise PgHbaValueError(""Rule {0} of '{1}' type has invalid auth-method '{2}'"".format(line, cols[0], cols[5]))
if len(cols) < 7:
    cols.insert(6, None)  # No auth-options
    cols[6] = "" "".join(cols[6:])  # combine all auth-options
```"
-------------------------------------------------------------------------
"cols.insert(3, None)  # No address
cols.insert(3, None)  # No IP-mask
en(cols) < 6:
cols.insert(4, None)  # No IP-mask
 cols[5] not in PG_HBA_METHODS:
cols.insert(4, None)  # No IP-mask
ols[5] not in PG_HBA_METHODS:
raise PgHbaValueError(""Rule {0} of '{1}' type has invalid auth-method '{2}'"".format(line, cols[0], cols[5]))

en(cols) < 7:
cols.insert(6, None)  # No auth-options
cols[6] = "" "".join(cols[6:])  # combine all auth-options
"
-------------------------------------------------------------------------
"Recom
PRs: 57507, 58384"
-------------------------------------------------------------------------
=========================================================================
"except (TypeError, KeyError):
"
-------------------------------------------------------------------------
"```python
class PgHbaRule(dict):
    return myweight < hisweight
    try:
        return self['src'] < other['src']
        return self.source_type_weight() < other.source_type_weight()
    errormessage = 'We have two rules ({1}, {2})'.format(self, other)
    errormessage += ' with exact same weight. Please file a bug.'
except (TypeError, KeyError):
    pass
```"
-------------------------------------------------------------------------
"except (TypeError, KeyError):
"
-------------------------------------------------------------------------
"Recom
PRs: 57507, 58384"
-------------------------------------------------------------------------
=========================================================================
"if self['type'] == 'local':
    return 3

"
-------------------------------------------------------------------------
"```python
if self['type'] == 'local':
    return 3
```"
-------------------------------------------------------------------------
"if self['type'] == 'local':
    return 3

"
-------------------------------------------------------------------------
"Recom
PRs: 57507, 58384"
-------------------------------------------------------------------------
=========================================================================
"import stat
"
-------------------------------------------------------------------------
"```python
import os
import errno

from ansible.module_utils.basic import AnsibleModule
import stat
```"
-------------------------------------------------------------------------
"import stat
"
-------------------------------------------------------------------------
"Recom
PRs: 57801, 58301"
-------------------------------------------------------------------------
=========================================================================
"if os.path.exists(self.path) and not os.access(self.path, os.W_OK):
    os.chmod(self.path, stat.S_IWUSR  stat.S_IRUSR)
stdin_data = None
if os.path.exists(self.path):
    stdin_data = 'y'
module.run_command(args, data=stdin_data)
"
-------------------------------------------------------------------------
"```python
if os.path.exists(self.path) and not os.access(self.path, os.W_OK):
    os.chmod(self.path, stat.S_IWUSR | stat.S_IRUSR)
stdin_data = None
if os.path.exists(self.path):
    stdin_data = 'y'
module.run_command(args, data=stdin_data)
```"
-------------------------------------------------------------------------
"if os.path.exists(self.path) and not os.access(self.path, os.W_OK):
    os.chmod(self.path, stat.S_IWUSR  stat.S_IRUSR)
stdin_data = None
if os.path.exists(self.path):
    stdin_data = 'y'
module.run_command(args, data=stdin_data)
"
-------------------------------------------------------------------------
"Recom
PRs: 57801, 58301"
-------------------------------------------------------------------------
=========================================================================
"proc = module.run_command([module.get_bin_path('ssh-keygen', True), '-lf', self.path], check_rc=False)
if not proc[0] == 0:
    if os.path.isdir(self.path):
        module.fail_json(msg='%s is a directory. Please specify a path to a file.' % (self.path))

    return False

"
-------------------------------------------------------------------------
"```python
proc = module.run_command([module.get_bin_path('ssh-keygen', True), '-yf', self.path], check_rc=False)
if not proc[0] == 0:
    if os.path.isdir(self.path):
        module.fail_json(msg='%s is a directory. Please specify a path to a file.' % (self.path))

    return False
```"
-------------------------------------------------------------------------
"proc = module.run_command([module.get_bin_path('ssh-keygen', True), '-lf', self.path], check_rc=False)
if not proc[0] == 0:
    if os.path.isdir(self.path):
        module.fail_json(msg='%s is a directory. Please specify a path to a file.' % (self.path))

    return False

"
-------------------------------------------------------------------------
"Recom
PRs: 57801, 58301"
-------------------------------------------------------------------------
=========================================================================
"self.image = 'quay.io/ansible/acme-test-container:1.6.0'
"
-------------------------------------------------------------------------
"```python
self.image = 'quay.io/ansible/acme-test-container:1.6.0'
```"
-------------------------------------------------------------------------
"self.image = 'quay.io/ansible/acme-test-container:1.6.0'
"
-------------------------------------------------------------------------
"Recom
PRs: 58294, 58297"
-------------------------------------------------------------------------
=========================================================================
"WHERE nspname = %s AND relkind in ('r','p','v','m') AND relname = ANY (%s)
"
-------------------------------------------------------------------------
"WHERE nspname = %s AND relkind in ('r','p','v','m') AND relname = ANY (%s)"
-------------------------------------------------------------------------
"WHERE nspname = %s AND relkind in ('r','p','v','m') AND relname = ANY (%s)
"
-------------------------------------------------------------------------
"Recom
PRs: 58272, 58277"
-------------------------------------------------------------------------
=========================================================================
"self.name = None
"
-------------------------------------------------------------------------
self.name = None
-------------------------------------------------------------------------
"self.name = None
"
-------------------------------------------------------------------------
"Recom
PRs: 57911, 58254"
-------------------------------------------------------------------------
=========================================================================
"return self.client.get_network(name=self.parameters.name)
"
-------------------------------------------------------------------------
"```python
return self.client.get_network(name=self.parameters.name)
```"
-------------------------------------------------------------------------
"return self.client.get_network(name=self.parameters.name)
"
-------------------------------------------------------------------------
"Recom
PRs: 57911, 58254"
-------------------------------------------------------------------------
=========================================================================
"resp = self.client.create_network(self.parameters.name, **params)
.results['actions'].append(""Created network %s with driver %s"" % (self.parameters.name, self.parameters.driver))
self.client.remove_network(self.parameters.name)
.results['actions'].append(""Removed network %s"" % (self.parameters.name,))
"
-------------------------------------------------------------------------
"```python
resp = self.client.create_network(self.parameters.name, **params)
self.results['actions'].append(""Created network %s with driver %s"" % (self.parameters.name, self.parameters.driver))
self.remove_network()
self.results['actions'].append(""Removed network %s"" % (self.parameters.name,))
```"
-------------------------------------------------------------------------
"resp = self.client.create_network(self.parameters.name, **params)
.results['actions'].append(""Created network %s with driver %s"" % (self.parameters.name, self.parameters.driver))
self.client.remove_network(self.parameters.name)
.results['actions'].append(""Removed network %s"" % (self.parameters.name,))
"
-------------------------------------------------------------------------
"Recom
PRs: 57911, 58254"
-------------------------------------------------------------------------
=========================================================================
"self.client.connect_container_to_network(name, self.parameters.name)
"
-------------------------------------------------------------------------
"```python
self.client.connect_container_to_network(name, self.parameters.name)
```"
-------------------------------------------------------------------------
"self.client.connect_container_to_network(name, self.parameters.name)
"
-------------------------------------------------------------------------
"Recom
PRs: 57911, 58254"
-------------------------------------------------------------------------
=========================================================================
"containers = self.client.get_network(name=self.parameters.name)['Containers']
"
-------------------------------------------------------------------------
containers = self.client.get_network(name=self.parameters.name)['Containers']
-------------------------------------------------------------------------
"containers = self.client.get_network(name=self.parameters.name)['Containers']
"
-------------------------------------------------------------------------
"Recom
PRs: 57911, 58254"
-------------------------------------------------------------------------
=========================================================================
"self.client.disconnect_container_from_network(container_name, self.parameters.name)
"
-------------------------------------------------------------------------
"```python
self.disconnect_container(container_name)
```"
-------------------------------------------------------------------------
"self.client.disconnect_container_from_network(container_name, self.parameters.name)
"
-------------------------------------------------------------------------
"Recom
PRs: 57911, 58254"
-------------------------------------------------------------------------
=========================================================================
"name=dict(type='str', required=True, aliases=['network_name']),
"
-------------------------------------------------------------------------
"name=dict(type='str', required=True, aliases=['network_name'])"
-------------------------------------------------------------------------
"name=dict(type='str', required=True, aliases=['network_name']),
"
-------------------------------------------------------------------------
"Recom
PRs: 57911, 58254"
-------------------------------------------------------------------------
=========================================================================
"class OpenSUSELeapHostname(Hostname):
platform = 'Linux'
distribution = 'Opensuse-leap'
strategy_class = SystemdStrategy


s ArchARMHostname(Hostname):
platform = 'Linux'
distribution = 'Archarm'
strategy_class = SystemdStrategy


"
-------------------------------------------------------------------------
"```python
class OpenSUSELeapHostname(Hostname):
    platform = 'Linux'
    distribution = 'Opensuse-leap'
    strategy_class = SystemdStrategy


class ArchARMHostname(Hostname):
    platform = 'Linux'
    distribution = 'Archarm'
    strategy_class = SystemdStrategy
```"
-------------------------------------------------------------------------
"class OpenSUSELeapHostname(Hostname):
platform = 'Linux'
distribution = 'Opensuse-leap'
strategy_class = SystemdStrategy


s ArchARMHostname(Hostname):
platform = 'Linux'
distribution = 'Archarm'
strategy_class = SystemdStrategy


"
-------------------------------------------------------------------------
"Recom
PRs: 56936, 58211"
-------------------------------------------------------------------------
=========================================================================
"class ClearLinuxHostname(Hostname):
platform = 'Linux'
distribution = 'Clear-linux-os'
strategy_class = SystemdStrategy


s CoreosHostname(Hostname):
platform = 'Linux'
distribution = 'Coreos'
strategy_class = SystemdStrategy


"
-------------------------------------------------------------------------
"```python
import os
import __future__
import ansible.module_utils.facts.system.service_mgr
import socket
import traceback
import ansible.module_utils._text
import ansible.module_utils.basic

class ClearLinuxHostname(Hostname):
    platform = 'Linux'
    distribution = 'Clear-linux-os'
    strategy_class = SystemdStrategy

class CoreosHostname(Hostname):
    platform = 'Linux'
    distribution = 'Coreos'
    strategy_class = SystemdStrategy
```"
-------------------------------------------------------------------------
"class ClearLinuxHostname(Hostname):
platform = 'Linux'
distribution = 'Clear-linux-os'
strategy_class = SystemdStrategy


s CoreosHostname(Hostname):
platform = 'Linux'
distribution = 'Coreos'
strategy_class = SystemdStrategy


"
-------------------------------------------------------------------------
"Recom
PRs: 56936, 58211"
-------------------------------------------------------------------------
=========================================================================
"distribution = 'Ol'
"
-------------------------------------------------------------------------
"Add the required dependencies and update the `ScientificHostname` class as shown:

```python
import os
import __future__
import ansible.module_utils.facts.system.service_mgr
import socket
import traceback
import ansible.module_utils._text
import ansible.module_utils.basic

distribution = 'Ol'

class ScientificHostname(Hostname):
    platform = 'Linux'
    strategy_class = RedHatStrategy
```"
-------------------------------------------------------------------------
"distribution = 'Ol'
"
-------------------------------------------------------------------------
"Recom
PRs: 56936, 58211"
-------------------------------------------------------------------------
=========================================================================
"if data.get('options') and not isinstance(data.get('options'), dict):
    self.reporter.error(
        path=self.object_path,
        code=331,
        msg=""Argument 'options' in argument_spec['provider'] must be a dictionary/hash when used"",
    )
else:
    # Record provider options from network modules, for later comparison
    for provider_arg, provider_data in data.get('options', {}).items():
        provider_args.add(provider_arg)
        provider_args.update(provider_data.get('aliases', []))
"
-------------------------------------------------------------------------
"```python
if data.get('options') and not isinstance(data.get('options'), dict):
    self.reporter.error(
        path=self.object_path,
        code=331,
        msg=""Argument 'options' in argument_spec['provider'] must be a dictionary/hash when used"",
    )
else:
    # Record provider options from network modules, for later comparison
    for provider_arg, provider_data in data.get('options', {}).items():
        provider_args.add(provider_arg)
        provider_args.update(provider_data.get('aliases', []))
```"
-------------------------------------------------------------------------
"if data.get('options') and not isinstance(data.get('options'), dict):
    self.reporter.error(
        path=self.object_path,
        code=331,
        msg=""Argument 'options' in argument_spec['provider'] must be a dictionary/hash when used"",
    )
else:
    # Record provider options from network modules, for later comparison
    for provider_arg, provider_data in data.get('options', {}).items():
        provider_args.add(provider_arg)
        provider_args.update(provider_data.get('aliases', []))
"
-------------------------------------------------------------------------
"Recom
PRs: 58078, 58192"
-------------------------------------------------------------------------
=========================================================================
"model_search_strs = [r'^Cisco (.) \(revision', r'^[Cc]isco (\S).bytes of .*memory']
for item in model_search_strs:
    match = re.search(item, data, re.M)
    if match:
        device_info['network_os_model'] = match.group(1)
        break
"
-------------------------------------------------------------------------
"```python
import re

class Cliconf(CliconfBase):
    if match:
        device_info['network_os_version'] = match.group(1).strip(',')

    model_search_strs = [r'^Cisco (.) \(revision', r'^[Cc]isco (\S).bytes of .*memory']
    for item in model_search_strs:
        match = re.search(item, data, re.M)
        if match:
            device_info['network_os_model'] = match.group(1)
            break

```"
-------------------------------------------------------------------------
"model_search_strs = [r'^Cisco (.) \(revision', r'^[Cc]isco (\S).bytes of .*memory']
for item in model_search_strs:
    match = re.search(item, data, re.M)
    if match:
        device_info['network_os_model'] = match.group(1)
        break
"
-------------------------------------------------------------------------
"Recom
PRs: 58159, 58174"
-------------------------------------------------------------------------
=========================================================================
"self.docker_api_version_str = self.version()['ApiVersion']
.docker_api_version = LooseVersion(self.docker_api_version_str)
"
-------------------------------------------------------------------------
"```python
self.docker_api_version_str = self.version()['ApiVersion']
self.docker_api_version = LooseVersion(self.docker_api_version_str)
```"
-------------------------------------------------------------------------
"self.docker_api_version_str = self.version()['ApiVersion']
.docker_api_version = LooseVersion(self.docker_api_version_str)
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback
"
-------------------------------------------------------------------------
"```python
import traceback
```"
-------------------------------------------------------------------------
"import traceback
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"HAS_YAML_EXC = traceback.format_exc()


from docker.errors import DockerException
pt ImportError:
# missing Docker SDK for Python handled in ansible.module_utils.docker.common
pass
"
-------------------------------------------------------------------------
"```python
HAS_COMPOSE_EXC = traceback.format_exc()

from docker.errors import DockerException
try:
   pass
except ImportError:
   pass
```"
-------------------------------------------------------------------------
"HAS_YAML_EXC = traceback.format_exc()


from docker.errors import DockerException
pt ImportError:
# missing Docker SDK for Python handled in ansible.module_utils.docker.common
pass
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"HAS_COMPOSE_EXC = traceback.format_exc()
"
-------------------------------------------------------------------------
"```python
HAS_COMPOSE_EXC = traceback.format_exc()
```"
-------------------------------------------------------------------------
"HAS_COMPOSE_EXC = traceback.format_exc()
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    result = ContainerManager(client).exec_module()
    client.module.exit_json(**result)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
try:
    result = ContainerManager(client).exec_module()
    client.module.exit_json(**result)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
```  "
-------------------------------------------------------------------------
"try:
    result = ContainerManager(client).exec_module()
    client.module.exit_json(**result)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback
from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"```python
import base64
import hashlib
import traceback
from docker.errors import DockerException
```"
-------------------------------------------------------------------------
"import traceback
from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    results = dict(
        changed=False,
    )
    ConfigManager(client, results)()
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
    )
    ConfigManager(client, results)()
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
except Exception as exc:
    client.fail(msg=str(exc), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
    )
    ConfigManager(client, results)()
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='HAS_COMPOSE_EXC', ctx=Store())], value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exc', ctx=Load()), args=[], keywords=[]))"
-------------------------------------------------------------------------
"import traceback
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"from docker.errors import DockerException, APIError, NotFound
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='HAS_DOCKER_ERRORS', ctx=Store())], value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exc', ctx=Load()), args=[], keywords=[]))"
-------------------------------------------------------------------------
"from docker.errors import DockerException, APIError, NotFound
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    network = self.client.inspect_network(net['name'])
    if network.get('Driver') == 'bridge' and \
       network.get('Options', {}).get('com.docker.network.bridge.host_binding_ipv4'):
        ip = network['Options']['com.docker.network.bridge.host_binding_ipv4']
        break
except NotFound as e:
    self.client.fail(
        ""Cannot inspect the network '{0}' to determine the default IP."".format(net['name']),
        exception=traceback.format_exc()
    )
"
-------------------------------------------------------------------------
"```python
try:
    network = self.client.inspect_network(net['name'])
    if network.get('Driver') == 'bridge' and \
       network.get('Options', {}).get('com.docker.network.bridge.host_binding_ipv4'):
        ip = network['Options']['com.docker.network.bridge.host_binding_ipv4']
        break
except NotFound as e:
    self.client.fail(
        ""Cannot inspect the network '{0}' to determine the default IP."".format(net['name']),
        exception=traceback.format_exc()
    )
```"
-------------------------------------------------------------------------
"try:
    network = self.client.inspect_network(net['name'])
    if network.get('Driver') == 'bridge' and \
       network.get('Options', {}).get('com.docker.network.bridge.host_binding_ipv4'):
        ip = network['Options']['com.docker.network.bridge.host_binding_ipv4']
        break
except NotFound as e:
    self.client.fail(
        ""Cannot inspect the network '{0}' to determine the default IP."".format(net['name']),
        exception=traceback.format_exc()
    )
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    cm = ContainerManager(client)
    client.module.exit_json(**sanitize_result(cm.results))
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"try:
    cm = ContainerManager(client)
    client.module.exit_json(**sanitize_result(cm.results))
except DockerException as e:
    HAS_COMPOSE_EXC = traceback.format_exc()
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=HAS_COMPOSE_EXC)"
-------------------------------------------------------------------------
"try:
    cm = ContainerManager(client)
    client.module.exit_json(**sanitize_result(cm.results))
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback

try:
from docker.errors import DockerException
pt ImportError:
# missing Docker SDK for Python handled in ansible.module_utils.docker.common
pass

"
-------------------------------------------------------------------------
"```python
import traceback

try:
    from docker.errors import DockerException
except ImportError:
    pass
```"
-------------------------------------------------------------------------
"import traceback

try:
from docker.errors import DockerException
pt ImportError:
# missing Docker SDK for Python handled in ansible.module_utils.docker.common
pass

"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    container = client.get_container(client.module.params['name'])
    client.module.exit_json(
        changed=False,
        exists=(True if container else False),
        container=container,
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"try:
    container = client.get_container(client.module.params['name'])
    client.module.exit_json(
        changed=False,
        exists=(True if container else False),
        container=container,
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"try:
    container = client.get_container(client.module.params['name'])
    client.module.exit_json(
        changed=False,
        exists=(True if container else False),
        container=container,
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback

from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"'''
 
 from ansible.module_utils.docker.common import AnsibleDockerClient, DockerBaseClass
 from ansible.module_utils._text import to_native
 import traceback
 
 try:
 except ImportError:
     # Missing Docker SDK for Python handled in ansible.module_utils.docker.common
     pass
Required dependency: ansible.module_utils.docker.common, __future__, docker.errors, 
Original metadata: [2.8] docker_*: make modules more robust on Docker errors
--##### SUMMARYBackport of #57913 to stable-2.8.##### ISSUE TYPE- Bugfix Pull Request##### COMPONENT NAMEdocker_composedocker_configdocker_containerdocker_container_infodocker_host_infodocker_imagedocker_image_infodocker_logindocker_networkdocker_network_infodocker_nodedocker_node_infodocker_prunedocker_secretdocker_swarmdocker_swarm_infodocker_swarm_servicedocker_swarm_service_infodocker_volumedocker_volume_info
cloud, backport, module, docker, community_review, support:community, bug, affects_2.8

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.docker.common.RequestException, ansible.module_utils.docker.common.AnsibleDockerClient, __future__.print_function, __future__.absolute_import, docker.errors.DockerException, docker.errors.NotFound, traceback, __future__.division
Function name information from Stable: get_existing_volume, main
Function call information from Stable: dict, get_existing_volume, AnsibleDockerClient, main
Class name information from Stable: 
Class method call information from Stable: traceback.format_exc, client.module, client.inspect_volume, client.fail
Target file: always, division, __metaclass__, preview, get_existing_volume, COPYING, python, module_utils, inspect_volume, docker_volume_info, debug, for, Driver, missing, Ansible, yes, local, False, Labels, docker, docker_py_1_documentation, License, str, exc, CLI, mydata, Does, affected, name, DOCUMENTATION, be, The, py, requirements, Get, Python, GNU, gronholm, bool, dummy, or, bin, facts, stable, short_description, project, when, ansible, exist, register, the, to, General, version_added, else, readthedocs, module, u, test, Exception, min_docker_version, supported_by, Red, changed, Scope, usr, def, Error, Retrieve, main, largely, __future__, Name, Print, on, nextday, en, whether, lib, metadata_version, null, __name__, SDK, status, min_docker_api_version, success, Fontein, absolute_import, about, EXAMPLES, alex, io, dict, _data, volumes, gnu, s, None, client, L, Mountpoint, from, org, volume_name, same, volume, extends_documentation_fragment, pass, supports_check_mode, txt, params, type, errors, inspect, Grönholm, exit_json, Volume, API, community, does, in, print_function, aliases, Copyright, fail, infos, licenses, Options, gpl, felixfontein, options, www, v3, ANSIBLE_METADATA, required, Public, subcommand, results, Returns, bd3f6172, __main__, coding, author, not, True, result, fi, try, common, except, return, ImportError, information, handled, CreatedAt, AnsibleDockerClient, inspection, Felix, exists, msg, argument_spec, Will, import, inspecting, function, C, utf, Performs, Alex, use, if, returned, sample, see, true, Hat, https, var, description, Docker, of, as, NotFound, RETURN, pypi
'''"
-------------------------------------------------------------------------
"import traceback

from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    results = dict(
        changed=False,
    )
    DockerHostManager(client, results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
    )
    DockerHostManager(client, results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=HAS_COMPOSE_EXC)"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
    )
    DockerHostManager(client, results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"
import traceback
"
-------------------------------------------------------------------------
"```python
import traceback

HAS_COMPOSE_EXC = traceback.format_exc()
```"
-------------------------------------------------------------------------
"
import traceback
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"from docker.errors import DockerException
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='HAS_DOCKER_EXC', ctx=Store())], value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exc', ctx=Load()), args=[], keywords=[]))"
-------------------------------------------------------------------------
"from docker.errors import DockerException
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    results = dict(
        changed=False,
        actions=[],
        image={}
    )
    ImageManager(client, results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
try:
    results = dict(
        changed=False,
        actions=[],
        image={}
    )
    ImageManager(client, results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
        actions=[],
        image={}
    )
    ImageManager(client, results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback

from docker.errors import DockerException
"
-------------------------------------------------------------------------
"```python
try:
    import traceback
except ImportError:
    # missing Docker SDK for Python handled in ansible.module_utils.docker.common
    pass

from docker.errors import DockerException
```"
-------------------------------------------------------------------------
"import traceback

from docker.errors import DockerException
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    results = dict(
        changed=False,
        images=[]
    )
    ImageManager(client, results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
try:
    results = dict(
        changed=False,
        images=[]
    )
    ImageManager(client, results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
        images=[]
    )
    ImageManager(client, results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback

try:
from docker.errors import DockerException
pt ImportError:
# missing Docker SDK for Python handled in ansible.module_utils.docker.common
pass
"
-------------------------------------------------------------------------
"```python
import traceback

try:
    from docker.errors import DockerException
except ImportError:
    pass
```"
-------------------------------------------------------------------------
"import traceback

try:
from docker.errors import DockerException
pt ImportError:
# missing Docker SDK for Python handled in ansible.module_utils.docker.common
pass
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    results = dict(
        changed=False,
        actions=[],
        login_result={}
    )
    LoginManager(client, results)
    if 'actions' in results:
        del results['actions']
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
try:
    results = dict(
        changed=False,
        login_result={}
    )
    LoginManager(client, results)
    if 'actions' in results:
        del results['actions']
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
        actions=[],
        login_result={}
    )
    LoginManager(client, results)
    if 'actions' in results:
        del results['actions']
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback
"
-------------------------------------------------------------------------
"```python
import traceback

from distutils.version import LooseVersion

```"
-------------------------------------------------------------------------
"import traceback
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"from docker.errors import DockerException
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='DockerException', ctx=Store())], value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exc', ctx=Load()), args=[], keywords=[])"
-------------------------------------------------------------------------
"from docker.errors import DockerException
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    cm = DockerNetworkManager(client)
    client.module.exit_json(**cm.results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"try:
    cm = DockerNetworkManager(client)
    client.module.exit_json(**cm.results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"try:
    cm = DockerNetworkManager(client)
    client.module.exit_json(**cm.results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback

try:
from docker.errors import DockerException
pt ImportError:
# missing Docker SDK for Python handled in ansible.module_utils.docker.common
pass

"
-------------------------------------------------------------------------
"from ansible.module_utils.docker.common import AnsibleDockerClient
from docker.errors import DockerException

try:
    from __future__ import print_function
    from __future__ import absolute_import
except ImportError:
    pass

from traceback import format_exc as HAS_YAML_EXC
from traceback import format_exc as HAS_COMPOSE_EXC"
-------------------------------------------------------------------------
"import traceback

try:
from docker.errors import DockerException
pt ImportError:
# missing Docker SDK for Python handled in ansible.module_utils.docker.common
pass

"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    network = client.get_network(client.module.params['name'])
    client.module.exit_json(
        changed=False,
        exists=(True if network else False),
        network=network,
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"try:
    network = client.get_network(client.module.params['name'])
    client.module.exit_json(
        changed=False,
        exists=(True if network else False),
        network=network,
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"try:
    network = client.get_network(client.module.params['name'])
    client.module.exit_json(
        changed=False,
        exists=(True if network else False),
        network=network,
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback

from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"```

HAS_YAML_EXC = traceback.format_exc()
HAS_COMPOSE_EXC = traceback.format_exc()

```"
-------------------------------------------------------------------------
"import traceback

from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    results = dict(
        changed=False,
    )
    SwarmNodeManager(client, results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
    )
    SwarmNodeManager(client, results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
    )
    SwarmNodeManager(client, results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback

from docker.errors import DockerException, APIError, NotFound
"
-------------------------------------------------------------------------
"```python
import traceback

from docker.errors import DockerException, APIError, NotFound
```"
-------------------------------------------------------------------------
"import traceback

from docker.errors import DockerException, APIError, NotFound
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    nodes = get_node_facts(client)
    client.module.exit_json(
        changed=False,
        nodes=nodes,
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Adapted code snippet:

```python
try:
    nodes = get_node_facts(client)
    client.module.exit_json(
        changed=False,
        nodes=nodes,
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"try:
    nodes = get_node_facts(client)
    client.module.exit_json(
        changed=False,
        nodes=nodes,
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback

try:
from docker.errors import DockerException
pt ImportError:
# missing Docker SDK for Python handled in ansible.module_utils.docker.common
pass

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import AnsibleDockerClient
from docker.errors import DockerException

try:
    from traceback  import format_exc
except ImportError:
    # missing Docker SDK for Python handled in ansible.module_utils.docker.common
    pass
```"
-------------------------------------------------------------------------
"import traceback

try:
from docker.errors import DockerException
pt ImportError:
# missing Docker SDK for Python handled in ansible.module_utils.docker.common
pass

"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    result = dict()

    if client.module.params['containers']:
        filters = clean_dict_booleans_for_docker_api(client.module.params.get('containers_filters'))
        res = client.prune_containers(filters=filters)
        result['containers'] = res.get('ContainersDeleted') or []
        result['containers_space_reclaimed'] = res['SpaceReclaimed']

    if client.module.params['images']:
        filters = clean_dict_booleans_for_docker_api(client.module.params.get('images_filters'))
        res = client.prune_images(filters=filters)
        result['images'] = res.get('ImagesDeleted') or []
        result['images_space_reclaimed'] = res['SpaceReclaimed']

    if client.module.params['networks']:
        filters = clean_dict_booleans_for_docker_api(client.module.params.get('networks_filters'))
        res = client.prune_networks(filters=filters)
        result['networks'] = res.get('NetworksDeleted') or []

    if client.module.params['volumes']:
        filters = clean_dict_booleans_for_docker_api(client.module.params.get('volumes_filters'))
        res = client.prune_volumes(filters=filters)
        result['volumes'] = res.get('VolumesDeleted') or []
        result['volumes_space_reclaimed'] = res['SpaceReclaimed']

    if client.module.params['builder_cache']:
        res = client.prune_builds()
        result['builder_cache_space_reclaimed'] = res['SpaceReclaimed']

    client.module.exit_json(**result)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"try:
    result = dict()

    if client.module.params['containers']:
        filters = clean_dict_booleans_for_docker_api(client.module.params.get('containers_filters'))
        res = client.prune_containers(filters=filters)
        result['containers'] = res.get('ContainersDeleted') or []
        result['containers_space_reclaimed'] = res['SpaceReclaimed']

    if client.module.params['images']:
        filters = clean_dict_booleans_for_docker_api(client.module.params.get('images_filters'))
        res = client.prune_images(filters=filters)
        result['images'] = res.get('ImagesDeleted') or []
        result['images_space_reclaimed'] = res['SpaceReclaimed']

    if client.module.params['networks']:
        filters = clean_dict_booleans_for_docker_api(client.module.params.get('networks_filters'))
        res = client.prune_networks(filters=filters)
        result['networks'] = res.get('NetworksDeleted') or []

    if client.module.params['volumes']:
        filters = clean_dict_booleans_for_docker_api(client.module.params.get('volumes_filters'))
        res = client.prune_volumes(filters=filters)
        result['volumes'] = res.get('VolumesDeleted') or []
        result['volumes_space_reclaimed'] = res['SpaceReclaimed']

    if client.module.params['builder_cache']:
        res = client.prune_builds()
        result['builder_cache_space_reclaimed'] = res['SpaceReclaimed']

    client.module.exit_json(**result)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"try:
    result = dict()

    if client.module.params['containers']:
        filters = clean_dict_booleans_for_docker_api(client.module.params.get('containers_filters'))
        res = client.prune_containers(filters=filters)
        result['containers'] = res.get('ContainersDeleted') or []
        result['containers_space_reclaimed'] = res['SpaceReclaimed']

    if client.module.params['images']:
        filters = clean_dict_booleans_for_docker_api(client.module.params.get('images_filters'))
        res = client.prune_images(filters=filters)
        result['images'] = res.get('ImagesDeleted') or []
        result['images_space_reclaimed'] = res['SpaceReclaimed']

    if client.module.params['networks']:
        filters = clean_dict_booleans_for_docker_api(client.module.params.get('networks_filters'))
        res = client.prune_networks(filters=filters)
        result['networks'] = res.get('NetworksDeleted') or []

    if client.module.params['volumes']:
        filters = clean_dict_booleans_for_docker_api(client.module.params.get('volumes_filters'))
        res = client.prune_volumes(filters=filters)
        result['volumes'] = res.get('VolumesDeleted') or []
        result['volumes_space_reclaimed'] = res['SpaceReclaimed']

    if client.module.params['builder_cache']:
        res = client.prune_builds()
        result['builder_cache_space_reclaimed'] = res['SpaceReclaimed']

    client.module.exit_json(**result)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback
from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"import base64
import hashlib
from docker.errors import DockerException, APIError
import traceback

try:
except ImportError:
    # missing Docker SDK for Python handled in ansible.module_utils.docker.common
    pass"
-------------------------------------------------------------------------
"import traceback
from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    results = dict(
        changed=False,
        secret_id=''
    )
    SecretManager(client, results)()
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
        secret_id=''
    )
    SecretManager(client, results)()
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())

Assign(targets=[Name(id='HAS_COMPOSE_EXC', ctx=Store())], value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exc', ctx=Load()), args=[], keywords=[]))"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
        secret_id=''
    )
    SecretManager(client, results)()
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback
from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"actions:
'''
import json
'''

AST:
+ Import(names=[alias(name='traceback')])
+ ImportFrom(module='docker.errors', names=[alias(name='DockerException'), alias(name='APIError')], level=0)"
-------------------------------------------------------------------------
"import traceback
from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    results = dict(
        changed=False,
        result='',
        actions=[]
    )
    SwarmManager(client, results)()
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
try:
    results = dict(
        changed=False,
        result='',
        actions=[]
    )
    SwarmManager(client, results)()
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
        result='',
        actions=[]
    )
    SwarmManager(client, results)()
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback

from docker.errors import DockerException, APIError, NotFound
"
-------------------------------------------------------------------------
"```
import traceback
from docker.errors import DockerException, APIError, NotFound

try:
    pass
except ImportError:
    pass
```"
-------------------------------------------------------------------------
"import traceback

from docker.errors import DockerException, APIError, NotFound
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    results = dict(
        changed=False,
    )
    DockerSwarmManager(client, results)
    results.update(client.fail_results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
    )
    DockerSwarmManager(client, results)
    results.update(client.fail_results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"try:
    results = dict(
        changed=False,
    )
    DockerSwarmManager(client, results)
    results.update(client.fail_results)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback
"
-------------------------------------------------------------------------
"+ Assign(targets=[Name(id='HAS_COMPOSE_EXC', ctx=Store())], value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exc', ctx=Load()), args=[], keywords=[])
?                                                                                   ^^^^^^^^^^"
-------------------------------------------------------------------------
"import traceback
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    dsm = DockerServiceManager(client)
    msg, changed, rebuilt, changes, facts = dsm.run_safe()
    results = dict(
        msg=msg,
        changed=changed,
        rebuilt=rebuilt,
        changes=changes,
        swarm_service=facts,
    )
    if client.module._diff:
        before, after = dsm.diff_tracker.get_before_after()
        results['diff'] = dict(before=before, after=after)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"try:
    dsm = DockerServiceManager(client)
    msg, changed, rebuilt, changes, facts = dsm.run_safe()
    results = dict(
        msg=msg,
        changed=changed,
        rebuilt=rebuilt,
        changes=changes,
        swarm_service=facts,
    )
    if HAS_COMPOSE_EXC:
        before, after = dsm.diff_tracker.get_before_after()
        results['diff'] = dict(before=before, after=after)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())"
-------------------------------------------------------------------------
"try:
    dsm = DockerServiceManager(client)
    msg, changed, rebuilt, changes, facts = dsm.run_safe()
    results = dict(
        msg=msg,
        changed=changed,
        rebuilt=rebuilt,
        changes=changes,
        swarm_service=facts,
    )
    if client.module._diff:
        before, after = dsm.diff_tracker.get_before_after()
        results['diff'] = dict(before=before, after=after)
    client.module.exit_json(**results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback

try:
from docker.errors import DockerException
pt ImportError:
# missing Docker SDK for Python handled in ansible.module_utils.docker.common
pass

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.swarm import AnsibleDockerSwarmClient
import traceback

try:
    from docker.errors import DockerException
except ImportError:
    pass
```"
-------------------------------------------------------------------------
"import traceback

try:
from docker.errors import DockerException
pt ImportError:
# missing Docker SDK for Python handled in ansible.module_utils.docker.common
pass

"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    service = get_service_info(client)
    client.module.exit_json(
        changed=False,
        service=service,
        exists=bool(service)
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"try:
    service = get_service_info(client)
    client.module.exit_json(
        changed=False,
        service=service,
        exists=bool(service)
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
    "
-------------------------------------------------------------------------
"try:
    service = get_service_info(client)
    client.module.exit_json(
        changed=False,
        service=service,
        exists=bool(service)
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback

from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"```python
import traceback
from docker.errors import DockerException, APIError
```"
-------------------------------------------------------------------------
"import traceback

from docker.errors import DockerException, APIError
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    cm = DockerVolumeManager(client)
    client.module.exit_json(**cm.results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Adapted code snippet:

```python
try:
    cm = DockerVolumeManager(client)
    client.module.exit_json(**cm.results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"try:
    cm = DockerVolumeManager(client)
    client.module.exit_json(**cm.results)
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"import traceback

from docker.errors import DockerException, NotFound
"
-------------------------------------------------------------------------
"```python
import traceback

from docker.errors import DockerException, NotFound

Assign(targets=[Name(id='HAS_YAML_EXC', ctx=Store())], value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exc', ctx=Load()), args=[], keywords=[])

Assign(targets=[Name(id='HAS_COMPOSE_EXC', ctx=Store())], value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exc', ctx=Load()), args=[], keywords=[])
```"
-------------------------------------------------------------------------
"import traceback

from docker.errors import DockerException, NotFound
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"try:
    volume = get_existing_volume(client, client.module.params['name'])

    client.module.exit_json(
        changed=False,
        exists=(True if volume else False),
        volume=volume,
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
try:
    volume = get_existing_volume(client, client.module.params['name'])

    client.module.exit_json(
        changed=False,
        exists=(True if volume else False),
        volume=volume,
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"try:
    volume = get_existing_volume(client, client.module.params['name'])

    client.module.exit_json(
        changed=False,
        exists=(True if volume else False),
        volume=volume,
    )
except DockerException as e:
    client.fail('An unexpected docker error occurred: {0}'.format(e), exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 57913, 58142"
-------------------------------------------------------------------------
=========================================================================
"'source': mount_data.get('Source', ''),
"
-------------------------------------------------------------------------
"'source': mount_data.get('Source', '')"
-------------------------------------------------------------------------
"'source': mount_data.get('Source', ''),
"
-------------------------------------------------------------------------
"Recom
PRs: 58039, 58139"
-------------------------------------------------------------------------
=========================================================================
"- ""pyOpenSSL >= 0.15""
"
-------------------------------------------------------------------------
"Expr(value=UnaryOp(op=USub(), operand=Name(id='pyOpenSSL', ctx=Load())))."
-------------------------------------------------------------------------
"- ""pyOpenSSL >= 0.15""
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= 0.15'), exception=PYOPENSSL_IMP_ERR)
"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('pyOpenSSL'), exception=PYOPENSSL_IMP_ERR)"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= 0.15'), exception=PYOPENSSL_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),
                 exception=PYOPENSSL_IMP_ERR)
"
-------------------------------------------------------------------------
"module.fail_json(msg=""Required library pyOpenSSL is missing or not the minimum required version"", exception=PYOPENSSL_IMP_ERR)"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),
                 exception=PYOPENSSL_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),
                 exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"module.fail_json(msg=""Missing required cryptography library with version >= {0}"".format(MINIMAL_CRYPTOGRAPHY_VERSION),
                   exception=CRYPTOGRAPHY_IMP_ERR)"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),
                 exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),
                 exception=PYOPENSSL_IMP_ERR)
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=missing_required_lib('pyOpenSSL', exception=PYOPENSSL_IMP_ERR))
```"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),
                 exception=PYOPENSSL_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),
                 exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)), 
                 exception=CRYPTOGRAPHY_IMP_ERR)
```"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),
                 exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),
                 exception=PYOPENSSL_IMP_ERR)
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=""Required dependency: pyOpenSSL >= {0}"".format(MINIMAL_PYOPENSSL_VERSION), exception=PYOPENSSL_IMP_ERR)
```"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),
                 exception=PYOPENSSL_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),
                 exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=""Missing required library 'cryptography >= {0}'"".format(MINIMAL_CRYPTOGRAPHY_VERSION),
                 exception=CRYPTOGRAPHY_IMP_ERR)
```"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),
                 exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),
                 exception=PYOPENSSL_IMP_ERR)
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=missing_required_lib('pyOpenSSL'),
                 exception=PYOPENSSL_IMP_ERR)
```"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),
                 exception=PYOPENSSL_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),
                 exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)))
```"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),
                 exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),
                 exception=PYOPENSSL_IMP_ERR)
module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),
                 exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=missing_required_lib('pyOpenSSL'),
                 exception=PYOPENSSL_IMP_ERR)
module.fail_json(msg=missing_required_lib('cryptography'),
                 exception=CRYPTOGRAPHY_IMP_ERR)
```"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),
                 exception=PYOPENSSL_IMP_ERR)
module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),
                 exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),
                 exception=PYOPENSSL_IMP_ERR)
module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),
                 exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=missing_required_lib('pyOpenSSL'),
                 exception=PYOPENSSL_IMP_ERR)
module.fail_json(msg=missing_required_lib('cryptography'),
                 exception=CRYPTOGRAPHY_IMP_ERR)
```"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),
                 exception=PYOPENSSL_IMP_ERR)
module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),
                 exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"- pyOpenSSL
- cryptography (if I(format) is C(OpenSSH))
"
-------------------------------------------------------------------------
"+ Expr(value=UnaryOp(op=USub(), operand=Name(id='pyOpenSSL', ctx=Load())))
+ If(format==""OpenSSH""):
    - cryptography"
-------------------------------------------------------------------------
"- pyOpenSSL
- cryptography (if I(format) is C(OpenSSH))
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"CRYPTOGRAPHY_IMP_ERR = None
try:
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization as crypto_serialization
pt ImportError:
CRYPTOGRAPHY_IMP_ERR = traceback.format_exc()
cryptography_found = False
:
cryptography_found = True

"
-------------------------------------------------------------------------
"```python
import traceback

CRYPTOGRAPHY_IMP_ERR = None
try:
    from cryptography.hazmat.backends import default_backend
    from cryptography.hazmat.primitives import serialization as crypto_serialization
except ImportError:
    CRYPTOGRAPHY_IMP_ERR = traceback.format_exc()
    cryptography_found = False
else:
    cryptography_found = True
```"
-------------------------------------------------------------------------
"CRYPTOGRAPHY_IMP_ERR = None
try:
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization as crypto_serialization
pt ImportError:
CRYPTOGRAPHY_IMP_ERR = traceback.format_exc()
cryptography_found = False
:
cryptography_found = True

"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"if module.params['format'] == 'OpenSSH' and not cryptography_found:
    module.fail_json(msg=missing_required_lib('cryptography'), exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"if not cryptography_found:
    module.fail_json(msg=missing_required_lib('cryptography'), exception=CRYPTOGRAPHY_IMP_ERR)"
-------------------------------------------------------------------------
"if module.params['format'] == 'OpenSSH' and not cryptography_found:
    module.fail_json(msg=missing_required_lib('cryptography'), exception=CRYPTOGRAPHY_IMP_ERR)
"
-------------------------------------------------------------------------
"Recom
PRs: 57868, 58138"
-------------------------------------------------------------------------
=========================================================================
"debug: msg=""{{ lookup('passwordstore', 'example/test create=true nosymbols=true') }}""
"
-------------------------------------------------------------------------
"```yaml
- name: Return the value for user in the KV pair user, username
  debug:
    msg: ""{{ lookup('passwordstore', 'example/test create=true nosymbols=true') }}""
```"
-------------------------------------------------------------------------
"debug: msg=""{{ lookup('passwordstore', 'example/test create=true nosymbols=true') }}""
"
-------------------------------------------------------------------------
"Recom
PRs: 57508, 58100"
-------------------------------------------------------------------------
=========================================================================
"skydive_meta: >-
    {{ lookup('skydive', filter={'query': ""G.V().Has('Name', 'sumit-VirtualBox')""}) }}
skydive: >-
    {{ lookup('skydive', filter={'query': ""G.V().Has('Name')""},
                  provider={'endpoint': 'localhost:8082', 'username': 'admin', 'password': 'password'}) }}
"
-------------------------------------------------------------------------
"```yaml
- name: return skydive metdata if present based on Name
  set_fact:
    skydive_meta: >-
      {{ lookup('skydive', filter={'query': ""G.V().Has('Name', 'sumit-VirtualBox')""}) }}

- name: return all the skydive metdata having parameter Name
  set_fact:
    skydive: >-
      {{ lookup('skydive', filter={'query': ""G.V().Has('Name')""},
                    provider={'endpoint': 'localhost:8082', 'username': 'admin', 'password': 'password'}) }}
```"
-------------------------------------------------------------------------
"skydive_meta: >-
    {{ lookup('skydive', filter={'query': ""G.V().Has('Name', 'sumit-VirtualBox')""}) }}
skydive: >-
    {{ lookup('skydive', filter={'query': ""G.V().Has('Name')""},
                  provider={'endpoint': 'localhost:8082', 'username': 'admin', 'password': 'password'}) }}
"
-------------------------------------------------------------------------
"Recom
PRs: 57508, 58100"
-------------------------------------------------------------------------
=========================================================================
"image_vols = self._get_image_binds(image[self.parameters.client.image_inspect_source].get('Volumes'))
"
-------------------------------------------------------------------------
image_vols = self._get_image_binds(image[self.parameters.client.image_inspect_source].get('Volumes'))
-------------------------------------------------------------------------
"image_vols = self._get_image_binds(image[self.parameters.client.image_inspect_source].get('Volumes'))
"
-------------------------------------------------------------------------
"Recom
PRs: 57969, 58099"
-------------------------------------------------------------------------
=========================================================================
"if image and image[self.parameters.client.image_inspect_source].get('Volumes'):
    expected_vols.update(image[self.parameters.client.image_inspect_source].get('Volumes'))
"
-------------------------------------------------------------------------
"```python
if image and image.get('Volumes'):
    expected_vols.update(image.get('Volumes'))
```"
-------------------------------------------------------------------------
"if image and image[self.parameters.client.image_inspect_source].get('Volumes'):
    expected_vols.update(image[self.parameters.client.image_inspect_source].get('Volumes'))
"
-------------------------------------------------------------------------
"Recom
PRs: 57969, 58099"
-------------------------------------------------------------------------
=========================================================================
"if image and image[self.parameters.client.image_inspect_source].get('Env'):
    for env_var in image[self.parameters.client.image_inspect_source]['Env']:
"
-------------------------------------------------------------------------
"```python
if image and image[self.parameters.client.image_inspect_source].get('Env'):
    for env_var in image[self.parameters.client.image_inspect_source]['Env']:
```"
-------------------------------------------------------------------------
"if image and image[self.parameters.client.image_inspect_source].get('Env'):
    for env_var in image[self.parameters.client.image_inspect_source]['Env']:
"
-------------------------------------------------------------------------
"Recom
PRs: 57969, 58099"
-------------------------------------------------------------------------
=========================================================================
"image_exposed_ports = image[self.parameters.client.image_inspect_source].get('ExposedPorts') or {}
image_ports = [self._normalize_port(p) for p in image_exposed_ports.keys()]
"
-------------------------------------------------------------------------
"```python
image_exposed_ports = image[self.parameters.client.image_inspect_source].get('ExposedPorts') or {}
image_ports = [self._normalize_port(p) for p in image_exposed_ports.keys()]
```"
-------------------------------------------------------------------------
"image_exposed_ports = image[self.parameters.client.image_inspect_source].get('ExposedPorts') or {}
image_ports = [self._normalize_port(p) for p in image_exposed_ports.keys()]
"
-------------------------------------------------------------------------
"Recom
PRs: 57969, 58099"
-------------------------------------------------------------------------
=========================================================================
"
self.image_inspect_source = 'Config'
if self.docker_api_version < LooseVersion('1.21'):
    self.image_inspect_source = 'ContainerConfig'

"
-------------------------------------------------------------------------
"```python
self.image_inspect_source = 'Config' if self.docker_api_version < LooseVersion('1.21') else 'ContainerConfig'
```"
-------------------------------------------------------------------------
"
self.image_inspect_source = 'Config'
if self.docker_api_version < LooseVersion('1.21'):
    self.image_inspect_source = 'ContainerConfig'

"
-------------------------------------------------------------------------
"Recom
PRs: 57969, 58099"
-------------------------------------------------------------------------
=========================================================================
"- When not specified and network has only single profile it will be auto-selected, otherwise you must specify profile.
"
-------------------------------------------------------------------------
"When a network has only a single profile and it is not specified, it will be auto-selected. Otherwise, you must specify the profile."
-------------------------------------------------------------------------
"- When not specified and network has only single profile it will be auto-selected, otherwise you must specify profile.
"
-------------------------------------------------------------------------
"Recom
PRs: 57945, 58057"
-------------------------------------------------------------------------
=========================================================================
"def get_vnics(networks_service, network, connection):
resp = []
vnic_services = connection.system_service().vnic_profiles_service()
for vnic in vnic_services.list():
    if vnic.network.id == network.id:
        resp.append(vnic)
return resp


"
-------------------------------------------------------------------------
"def get_vnics(networks_service, network, connection):
    resp = []
    vnic_services = connection.system_service().vnic_profiles_service()
    for vnic in vnic_services.list():
        if vnic.network.id == network.id:
            resp.append(vnic)
    return resp"
-------------------------------------------------------------------------
"def get_vnics(networks_service, network, connection):
resp = []
vnic_services = connection.system_service().vnic_profiles_service()
for vnic in vnic_services.list():
    if vnic.network.id == network.id:
        resp.append(vnic)
return resp


"
-------------------------------------------------------------------------
"Recom
PRs: 57945, 58057"
-------------------------------------------------------------------------
=========================================================================
"if module.params['network']:
    profile = module.params.get('profile')
"
-------------------------------------------------------------------------
"if module.params.get('network'):
    profile = module.params.get('profile')"
-------------------------------------------------------------------------
"if module.params['network']:
    profile = module.params.get('profile')
"
-------------------------------------------------------------------------
"Recom
PRs: 57945, 58057"
-------------------------------------------------------------------------
=========================================================================
"if profile:
    for vnic in connection.system_service().vnic_profiles_service().list():
        if vnic.name == profile and vnic.network.id == network.id:
            entitynics_module.vnic_id = vnic.id
else:
    # When not specified which vnic use ovirtmgmt/ovirtmgmt
    vnics = get_vnics(networks_service, network, connection)
    if len(vnics) == 1:
        entitynics_module.vnic_id = vnics[0].id
    else:
        raise Exception(
            ""You didn't specify any vnic profile. ""
            ""Following vnic profiles are in system: '%s', please specify one of them"" % ([vnic.name for vnic in vnics])
        )
"
-------------------------------------------------------------------------
"```python
if profile:
    for vnic in connection.system_service().vnic_profiles_service().list():
        if vnic.name == profile and vnic.network.id == network.id:
            entitynics_module.vnic_id = vnic.id
else:
    # When not specified which vnic use ovirtmgmt/ovirtmgmt
    vnics = get_vnics(networks_service, network, connection)
    if len(vnics) == 1:
        entitynics_module.vnic_id = vnics[0].id
    else:
        raise Exception(
            ""You didn't specify any vnic profile. ""
            ""Following vnic profiles are in system: '%s', please specify one of them"" % ([vnic.name for vnic in vnics])
        )
```  "
-------------------------------------------------------------------------
"if profile:
    for vnic in connection.system_service().vnic_profiles_service().list():
        if vnic.name == profile and vnic.network.id == network.id:
            entitynics_module.vnic_id = vnic.id
else:
    # When not specified which vnic use ovirtmgmt/ovirtmgmt
    vnics = get_vnics(networks_service, network, connection)
    if len(vnics) == 1:
        entitynics_module.vnic_id = vnics[0].id
    else:
        raise Exception(
            ""You didn't specify any vnic profile. ""
            ""Following vnic profiles are in system: '%s', please specify one of them"" % ([vnic.name for vnic in vnics])
        )
"
-------------------------------------------------------------------------
"Recom
PRs: 57945, 58057"
-------------------------------------------------------------------------
=========================================================================
"parent: ""super_parent/parent""
"
-------------------------------------------------------------------------
"```
     name: my_first_group
     path: my_first_group
     parent: ""super_parent/parent""
     state: present
```"
-------------------------------------------------------------------------
"parent: ""super_parent/parent""
"
-------------------------------------------------------------------------
"Recom
PRs: 56256, 57997"
-------------------------------------------------------------------------
=========================================================================
"runners = self._gitlab.runners.list(as_list=False)
    if (runner.description == description):
        return self._gitlab.runners.get(runner.id)
"
-------------------------------------------------------------------------
"```python
runners = self._gitlab.runners.list(as_list=False)
for runner in runners:
    if (runner.description == description):
        return self._gitlab.runners.get(runner.id)
```"
-------------------------------------------------------------------------
"runners = self._gitlab.runners.list(as_list=False)
    if (runner.description == description):
        return self._gitlab.runners.get(runner.id)
"
-------------------------------------------------------------------------
"Recom
PRs: 57833, 57996"
-------------------------------------------------------------------------
=========================================================================
"RUNNER API
def resp_find_runners_all(url, request):
"
-------------------------------------------------------------------------
"```python
def resp_find_runners_all(url, request):
    '''
    '''
    
    @urlmatch(scheme=""http"", netloc=""localhost"", path=""/api/v4/runners/all"", method=""get"")
    headers = {'content-type': 'application/json'}
    content = ('[{""active"": true,""description"": ""test-1-20150125"",""id"": 1,'
               '""is_shared"": false,""ip_address"": ""127.0.0.1"",""name"": null,'
```"
-------------------------------------------------------------------------
"RUNNER API
def resp_find_runners_all(url, request):
"
-------------------------------------------------------------------------
"Recom
PRs: 57833, 57996"
-------------------------------------------------------------------------
=========================================================================
"@urlmatch(scheme=""http"", netloc=""localhost"", path=""/api/v4/runners"", method=""get"")
def resp_find_runners_list(url, request):
headers = {'content-type': 'application/json',
           ""X-Page"": 1,
           ""X-Next-Page"": 2,
           ""X-Per-Page"": 1,
           ""X-Total-Pages"": 1,
           ""X-Total"": 2}
content = ('[{""active"": true,""description"": ""test-1-20150125"",""id"": 1,'
           '""is_shared"": false,""ip_address"": ""127.0.0.1"",""name"": null,'
           '""online"": true,""status"": ""online""},{""active"": true,'
           '""description"": ""test-2-20150125"",""id"": 2,""ip_address"": ""127.0.0.1"",'
           '""is_shared"": false,""name"": null,""online"": false,""status"": ""offline""}]')
content = content.encode(""utf-8"")
return response(200, content, headers, None, 5, request)


"
-------------------------------------------------------------------------
"```python
@urlmatch(scheme=""http"", netloc=""localhost"", path=""/api/v4/runners/1"", method=""get"")
def resp_get_runner(url, request):
    headers = {'content-type': 'application/json'}
    return response(200, content, headers, None, 5, request)
```"
-------------------------------------------------------------------------
"@urlmatch(scheme=""http"", netloc=""localhost"", path=""/api/v4/runners"", method=""get"")
def resp_find_runners_list(url, request):
headers = {'content-type': 'application/json',
           ""X-Page"": 1,
           ""X-Next-Page"": 2,
           ""X-Per-Page"": 1,
           ""X-Total-Pages"": 1,
           ""X-Total"": 2}
content = ('[{""active"": true,""description"": ""test-1-20150125"",""id"": 1,'
           '""is_shared"": false,""ip_address"": ""127.0.0.1"",""name"": null,'
           '""online"": true,""status"": ""online""},{""active"": true,'
           '""description"": ""test-2-20150125"",""id"": 2,""ip_address"": ""127.0.0.1"",'
           '""is_shared"": false,""name"": null,""online"": false,""status"": ""offline""}]')
content = content.encode(""utf-8"")
return response(200, content, headers, None, 5, request)


"
-------------------------------------------------------------------------
"Recom
PRs: 57833, 57996"
-------------------------------------------------------------------------
=========================================================================
"resp_find_runners_list, resp_get_runner,
"
-------------------------------------------------------------------------
"```python
from ansible.modules.source_control.gitlab_runner import GitLabRunner
 
from .gitlab import (
    GitlabModuleTestCase,
    python_version_match_requirement,
    resp_create_runner,
    resp_delete_runner,
    resp_find_runners_list,
    resp_get_runner
)
```"
-------------------------------------------------------------------------
"resp_find_runners_list, resp_get_runner,
"
-------------------------------------------------------------------------
"Recom
PRs: 57833, 57996"
-------------------------------------------------------------------------
=========================================================================
"@with_httmock(resp_find_runners_list)
"
-------------------------------------------------------------------------
@with_httmock(resp_find_runners_list)
-------------------------------------------------------------------------
"@with_httmock(resp_find_runners_list)
"
-------------------------------------------------------------------------
"Recom
PRs: 57833, 57996"
-------------------------------------------------------------------------
=========================================================================
"@with_httmock(resp_find_runners_list)
"
-------------------------------------------------------------------------
"```python
@with_httmock(resp_find_runners_list)
```"
-------------------------------------------------------------------------
"@with_httmock(resp_find_runners_list)
"
-------------------------------------------------------------------------
"Recom
PRs: 57833, 57996"
-------------------------------------------------------------------------
=========================================================================
"@with_httmock(resp_find_runners_list)
"
-------------------------------------------------------------------------
"```python
@with_httmock(resp_find_runners_list)
```"
-------------------------------------------------------------------------
"@with_httmock(resp_find_runners_list)
"
-------------------------------------------------------------------------
"Recom
PRs: 57833, 57996"
-------------------------------------------------------------------------
=========================================================================
"type: dict
"
-------------------------------------------------------------------------
"```python
type: dict
```"
-------------------------------------------------------------------------
"type: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 57884, 57982"
-------------------------------------------------------------------------
=========================================================================
"extensions = ['sphinx.ext.autodoc', 'sphinx.ext.intersphinx', 'pygments_lexer', 'notfound.extension']
"
-------------------------------------------------------------------------
"extensions = ['sphinx.ext.autodoc', 'sphinx.ext.intersphinx', 'pygments_lexer', 'notfound.extension']"
-------------------------------------------------------------------------
"extensions = ['sphinx.ext.autodoc', 'sphinx.ext.intersphinx', 'pygments_lexer', 'notfound.extension']
"
-------------------------------------------------------------------------
"Recom
PRs: 57422, 57955"
-------------------------------------------------------------------------
=========================================================================
"# Configuration for sphinx-notfound-pages
# with no 'notfound_template' and no 'notfound_context' set,
# the extension builds 404.rst into a location-agnostic 404 page
#
# default is `en` - using this for the sub-site:
notfound_default_language = ""ansible""
# default is `latest`:
# setting explicitly - docsite serves up /ansible/latest/404.html
# so keep this set to `latest` even on the `devel` branch
# then no maintenance is needed when we branch a new stable_x.x
notfound_default_version = ""latest""
# makes default setting explicit:
notfound_no_urls_prefix = False
"
-------------------------------------------------------------------------
"```python
# Configuration for sphinx-notfound-pages
# with no 'notfound_template' and no 'notfound_context' set,
# the extension builds 404.rst into a location-agnostic 404 page
#
# default is `en` - using this for the sub-site:
notfound_default_language = ""ansible""
# default is `latest`:
notfound_default_version = ""latest""
# makes default setting explicit:
notfound_no_urls_prefix = False
```"
-------------------------------------------------------------------------
"# Configuration for sphinx-notfound-pages
# with no 'notfound_template' and no 'notfound_context' set,
# the extension builds 404.rst into a location-agnostic 404 page
#
# default is `en` - using this for the sub-site:
notfound_default_language = ""ansible""
# default is `latest`:
# setting explicitly - docsite serves up /ansible/latest/404.html
# so keep this set to `latest` even on the `devel` branch
# then no maintenance is needed when we branch a new stable_x.x
notfound_default_version = ""latest""
# makes default setting explicit:
notfound_no_urls_prefix = False
"
-------------------------------------------------------------------------
"Recom
PRs: 57422, 57955"
-------------------------------------------------------------------------
=========================================================================
"if self.acl_num or self.acl_name.isdigit():
"
-------------------------------------------------------------------------
"```python
        if self.acl_num or self.acl_name.isdigit():
```"
-------------------------------------------------------------------------
"if self.acl_num or self.acl_name.isdigit():
"
-------------------------------------------------------------------------
"Recom
PRs: 57268, 57890"
-------------------------------------------------------------------------
=========================================================================
"""acl/aclGroups/aclGroup"")
"
-------------------------------------------------------------------------
"tmp_dict = dict()
for acl_info in root.findall(""acl/aclGroups/aclGroup""):
    if acl_info:
        for tmp in acl_info:
            tmp_dict = dict()"
-------------------------------------------------------------------------
"""acl/aclGroups/aclGroup"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57268, 57890"
-------------------------------------------------------------------------
=========================================================================
"find_list = list()
    cur_cfg_dict = dict()
    exist_cfg_dict = dict()
    if self.acl_name:
        if self.acl_name.isdigit() and tmp.get(""aclNumber""):
            cur_cfg_dict[""aclNumber""] = self.acl_name
            exist_cfg_dict[""aclNumber""] = tmp.get(""aclNumber"")
        else:
            cur_cfg_dict[""aclNumOrName""] = self.acl_name
            exist_cfg_dict[""aclNumOrName""] = tmp.get(""aclNumOrName"")
    if self.acl_type:
        cur_cfg_dict[""aclType""] = self.acl_type
        exist_cfg_dict[""aclType""] = tmp.get(""aclType"")
    if self.acl_num:
        cur_cfg_dict[""aclNumber""] = self.acl_num
        exist_cfg_dict[""aclNumber""] = tmp.get(""aclNumber"")
    if self.acl_step:
        cur_cfg_dict[""aclStep""] = self.acl_step
        exist_cfg_dict[""aclStep""] = tmp.get(""aclStep"")
    if self.acl_description:
        cur_cfg_dict[""aclDescription""] = self.acl_description
        exist_cfg_dict[""aclDescription""] = tmp.get(""aclDescription"")

    if cur_cfg_dict == exist_cfg_dict:
        find_bool = True
    else:
        find_bool = False
    find_list.append(find_bool)

for mem in find_list:
    if mem:
        find_flag = True
        break
    else:
"
-------------------------------------------------------------------------
"```python
find_list = list()
cur_cfg_dict = dict()
exist_cfg_dict = dict()
if self.acl_name:
    if self.acl_name.isdigit() and tmp.get(""aclNumber""):
        cur_cfg_dict[""aclNumber""] = self.acl_name
        exist_cfg_dict[""aclNumber""] = tmp.get(""aclNumber""]
    else:
        cur_cfg_dict[""aclNumOrName""] = self.acl_name
        exist_cfg_dict[""aclNumOrName""] = tmp.get(""aclNumOrName"")
if self.acl_type:
    cur_cfg_dict[""aclType""] = self.acl_type
    exist_cfg_dict[""aclType""] = tmp.get(""aclType"")
if self.acl_num:
    cur_cfg_dict[""aclNumber""] = self.acl_num
    exist_cfg_dict[""aclNumber""] = tmp.get(""aclNumber"")
if self.acl_step:
    cur_cfg_dict[""aclStep""] = self.acl_step
    exist_cfg_dict[""aclStep""] = tmp.get(""aclStep"")
if self.acl_description:
    cur_cfg_dict[""aclDescription""] = self.acl_description
    exist_cfg_dict[""aclDescription""] = tmp.get(""aclDescription"")

if cur_cfg_dict == exist_cfg_dict:
    find_bool = True
else:
    find_bool = False
find_list.append(find_bool)

for mem in find_list:
    if mem:
        find_flag = True
        break
    else:
        find_flag = False
```"
-------------------------------------------------------------------------
"find_list = list()
    cur_cfg_dict = dict()
    exist_cfg_dict = dict()
    if self.acl_name:
        if self.acl_name.isdigit() and tmp.get(""aclNumber""):
            cur_cfg_dict[""aclNumber""] = self.acl_name
            exist_cfg_dict[""aclNumber""] = tmp.get(""aclNumber"")
        else:
            cur_cfg_dict[""aclNumOrName""] = self.acl_name
            exist_cfg_dict[""aclNumOrName""] = tmp.get(""aclNumOrName"")
    if self.acl_type:
        cur_cfg_dict[""aclType""] = self.acl_type
        exist_cfg_dict[""aclType""] = tmp.get(""aclType"")
    if self.acl_num:
        cur_cfg_dict[""aclNumber""] = self.acl_num
        exist_cfg_dict[""aclNumber""] = tmp.get(""aclNumber"")
    if self.acl_step:
        cur_cfg_dict[""aclStep""] = self.acl_step
        exist_cfg_dict[""aclStep""] = tmp.get(""aclStep"")
    if self.acl_description:
        cur_cfg_dict[""aclDescription""] = self.acl_description
        exist_cfg_dict[""aclDescription""] = tmp.get(""aclDescription"")

    if cur_cfg_dict == exist_cfg_dict:
        find_bool = True
    else:
        find_bool = False
    find_list.append(find_bool)

for mem in find_list:
    if mem:
        find_flag = True
        break
    else:
"
-------------------------------------------------------------------------
"Recom
PRs: 57268, 57890"
-------------------------------------------------------------------------
=========================================================================
"""acl/aclGroups/aclGroup/aclRuleBas4s/aclRuleBas4"")
"
-------------------------------------------------------------------------
"I'm sorry, but the provided information is not sufficient in order to understand what adaptation is required. Can you please provide more details or clarify the request?"
-------------------------------------------------------------------------
"""acl/aclGroups/aclGroup/aclRuleBas4s/aclRuleBas4"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57268, 57890"
-------------------------------------------------------------------------
=========================================================================
"if self.acl_num or self.acl_name.isdigit():
"
-------------------------------------------------------------------------
"```python
if self.acl_num or (self.acl_name and self.acl_name.isdigit()):
```"
-------------------------------------------------------------------------
"if self.acl_num or self.acl_name.isdigit():
"
-------------------------------------------------------------------------
"Recom
PRs: 57268, 57890"
-------------------------------------------------------------------------
=========================================================================
"""acl/aclGroups/aclGroup"")
"
-------------------------------------------------------------------------
"```python
class AdvanceAcl(object):
    # parse acl
    acl_info = root.findall(""acl/aclGroups/aclGroup"")
    if acl_info:
        for tmp in acl_info:
            tmp_dict = dict()
```"
-------------------------------------------------------------------------
"""acl/aclGroups/aclGroup"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57268, 57890"
-------------------------------------------------------------------------
=========================================================================
"find_list = list()
    cur_cfg_dict = dict()
    exist_cfg_dict = dict()

    if self.acl_name:
        if self.acl_name.isdigit() and tmp.get(""aclNumber""):
            cur_cfg_dict[""aclNumber""] = self.acl_name
            exist_cfg_dict[""aclNumber""] = tmp.get(""aclNumber"")
        else:
            cur_cfg_dict[""aclNumOrName""] = self.acl_name
            exist_cfg_dict[""aclNumOrName""] = tmp.get(""aclNumOrName"")
    if self.acl_type:
        cur_cfg_dict[""aclType""] = self.acl_type
        exist_cfg_dict[""aclType""] = tmp.get(""aclType"")
    if self.acl_num:
        cur_cfg_dict[""aclNumber""] = self.acl_num
        exist_cfg_dict[""aclNumber""] = tmp.get(""aclNumber"")
    if self.acl_step:
        cur_cfg_dict[""aclStep""] = self.acl_step
        exist_cfg_dict[""aclStep""] = tmp.get(""aclStep"")
    if self.acl_description:
        cur_cfg_dict[""aclDescription""] = self.acl_description
        exist_cfg_dict[""aclDescription""] = tmp.get(""aclDescription"")

    if cur_cfg_dict == exist_cfg_dict:
        find_bool = True
    else:
        find_bool = False
    find_list.append(find_bool)
for mem in find_list:
    if mem:
        find_flag = True
    else:
        find_flag = False
"
-------------------------------------------------------------------------
"Update the code snippet based on the provided information:

```python
find_list = list()
cur_cfg_dict = dict()
exist_cfg_dict = dict()

if self.acl_name:
    cur_cfg_dict[""aclNumOrName""] = self.acl_name
    exist_cfg_dict[""aclNumOrName""] = tmp.get(""aclNumOrName"")
if self.acl_type:
    cur_cfg_dict[""aclType""] = self.acl_type
    exist_cfg_dict[""aclType""] = tmp.get(""aclType"")
if self.acl_num:
    cur_cfg_dict[""aclNumber""] = self.acl_num
    exist_cfg_dict[""aclNumber""] = tmp.get(""aclNumber"")
if self.acl_step:
    cur_cfg_dict[""aclStep""] = self.acl_step
    exist_cfg_dict[""aclStep""] = tmp.get(""aclStep"")
if self.acl_description:
    cur_cfg_dict[""aclDescription""] = self.acl_description
    exist_cfg_dict[""aclDescription""] = tmp.get(""aclDescription"")

if cur_cfg_dict == exist_cfg_dict:
    find_bool = True
else:
    find_bool = False
find_list.append(find_bool)

find_flag = any(find_list)
```"
-------------------------------------------------------------------------
"find_list = list()
    cur_cfg_dict = dict()
    exist_cfg_dict = dict()

    if self.acl_name:
        if self.acl_name.isdigit() and tmp.get(""aclNumber""):
            cur_cfg_dict[""aclNumber""] = self.acl_name
            exist_cfg_dict[""aclNumber""] = tmp.get(""aclNumber"")
        else:
            cur_cfg_dict[""aclNumOrName""] = self.acl_name
            exist_cfg_dict[""aclNumOrName""] = tmp.get(""aclNumOrName"")
    if self.acl_type:
        cur_cfg_dict[""aclType""] = self.acl_type
        exist_cfg_dict[""aclType""] = tmp.get(""aclType"")
    if self.acl_num:
        cur_cfg_dict[""aclNumber""] = self.acl_num
        exist_cfg_dict[""aclNumber""] = tmp.get(""aclNumber"")
    if self.acl_step:
        cur_cfg_dict[""aclStep""] = self.acl_step
        exist_cfg_dict[""aclStep""] = tmp.get(""aclStep"")
    if self.acl_description:
        cur_cfg_dict[""aclDescription""] = self.acl_description
        exist_cfg_dict[""aclDescription""] = tmp.get(""aclDescription"")

    if cur_cfg_dict == exist_cfg_dict:
        find_bool = True
    else:
        find_bool = False
    find_list.append(find_bool)
for mem in find_list:
    if mem:
        find_flag = True
    else:
        find_flag = False
"
-------------------------------------------------------------------------
"Recom
PRs: 57268, 57890"
-------------------------------------------------------------------------
=========================================================================
"""acl/aclGroups/aclGroup/aclRuleAdv4s/aclRuleAdv4"")
"
-------------------------------------------------------------------------
"```python
# parse advance rule
adv_rule_info = root.findall(""acl/aclGroups/aclGroup/aclRuleAdv4s/aclRuleAdv4"")
if adv_rule_info:
    for tmp in adv_rule_info:
        tmp_dict = dict()
```"
-------------------------------------------------------------------------
"""acl/aclGroups/aclGroup/aclRuleAdv4s/aclRuleAdv4"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57268, 57890"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.network.cloudengine.ce import get_config, load_config, exec_command
"
-------------------------------------------------------------------------
"from ansible.module_utils.network.cloudengine.ce import get_config, load_config, exec_command"
-------------------------------------------------------------------------
"from ansible.module_utils.network.cloudengine.ce import get_config, load_config, exec_command
"
-------------------------------------------------------------------------
"Recom
PRs: 57268, 57890"
-------------------------------------------------------------------------
=========================================================================
"cmd = ""display current-configuration | ignore-case section include ^interface %s$"" % self.interface
rc, out, err = exec_command(self.module, cmd)
if rc != 0:
    self.module.fail_json(msg=err)
result = str(out).strip()
if result:
    tmp = result.split('\n')
    if ""display"" in tmp[0]:
        tmp.pop(0)
    if not tmp:
        self.module.fail_json(
            msg='Error: The interface %s is not in the device.' % self.interface)
"
-------------------------------------------------------------------------
"```python
cmd = ""display current-configuration | ignore-case section include ^interface %s$"" % self.interface
rc, out, err = exec_command(self.module, cmd)
if rc != 0:
    self.module.fail_json(msg=err)
result = str(out).strip()
if result:
    tmp = result.split('\n')
    if ""display"" in tmp[0]:
        tmp.pop(0)
    if not tmp:
        self.module.fail_json(
        msg='Error: The interface %s is not in the device.' % self.interface)
```"
-------------------------------------------------------------------------
"cmd = ""display current-configuration | ignore-case section include ^interface %s$"" % self.interface
rc, out, err = exec_command(self.module, cmd)
if rc != 0:
    self.module.fail_json(msg=err)
result = str(out).strip()
if result:
    tmp = result.split('\n')
    if ""display"" in tmp[0]:
        tmp.pop(0)
    if not tmp:
        self.module.fail_json(
            msg='Error: The interface %s is not in the device.' % self.interface)
"
-------------------------------------------------------------------------
"Recom
PRs: 57268, 57890"
-------------------------------------------------------------------------
=========================================================================
"cmd = ""display current-configuration | ignore-case section include ^interface %s$ | include traffic-filter"" % self.interface
rc, out, err = exec_command(self.module, cmd)
if rc != 0:
    self.module.fail_json(msg=err)
result = str(out).strip()
    if ""display"" in tmp[0]:
        tmp.pop(0)
        end.append(item.strip())
cmd = ""display current-configuration | ignore-case section include ^interface %s$ | include traffic-filter"" % self.interface
rc, out, err = exec_command(self.module, cmd)
if rc != 0:
    self.module.fail_json(msg=err)
result = str(out).strip()
    if ""display"" in tmp[0]:
        tmp.pop(0)
        end.append(item.strip())
"
-------------------------------------------------------------------------
"```python
cmd = ""display current-configuration | ignore-case section include ^interface %s$ | include traffic-filter"" % self.interface
rc, out, err = exec_command(self.module, cmd)
if rc != 0:
    self.module.fail_json(msg=err)
result = str(out).strip()
if ""display"" in result:
    tmp = result.split('\n')
    for item in tmp:
        end.append(item.strip())
```"
-------------------------------------------------------------------------
"cmd = ""display current-configuration | ignore-case section include ^interface %s$ | include traffic-filter"" % self.interface
rc, out, err = exec_command(self.module, cmd)
if rc != 0:
    self.module.fail_json(msg=err)
result = str(out).strip()
    if ""display"" in tmp[0]:
        tmp.pop(0)
        end.append(item.strip())
cmd = ""display current-configuration | ignore-case section include ^interface %s$ | include traffic-filter"" % self.interface
rc, out, err = exec_command(self.module, cmd)
if rc != 0:
    self.module.fail_json(msg=err)
result = str(out).strip()
    if ""display"" in tmp[0]:
        tmp.pop(0)
        end.append(item.strip())
"
-------------------------------------------------------------------------
"Recom
PRs: 57268, 57890"
-------------------------------------------------------------------------
=========================================================================
"</config>
"
-------------------------------------------------------------------------
"CE_MERGE_SNMP_V3_GROUP_TAIL = ""</snmpv3Group></snmpv3Groups></snmp>"""
-------------------------------------------------------------------------
"</config>
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"</config>
"
-------------------------------------------------------------------------
"CE_CREATE_SNMP_V3_GROUP_TAIL = """"""
           </snmpv3Group>
         </snmpv3Groups>
       </snmp>
 </config>
""""""

# delete snmp v3 group
CE_DELETE_SNMP_V3_GROUP_HEADER = """"""
Required dependency: ansible.module_utils.network.cloudengine.ce, xml.etree, ansible.module_utils.basic
 """""""
-------------------------------------------------------------------------
"</config>
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"</config>
"
-------------------------------------------------------------------------
"CE_DELETE_SNMP_V3_GROUP_TAIL = """"""
           </snmpv3Group>
         </snmpv3Groups>
       </snmp>
 </config>
"""""""
-------------------------------------------------------------------------
"</config>
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"community_info = root.findall(""snmp/communitys/community"")
"
-------------------------------------------------------------------------
"```python
community_info = root.findall(""snmp/communitys/community"")
```"
-------------------------------------------------------------------------
"community_info = root.findall(""snmp/communitys/community"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"community_name_list = list()
        community_name_list.append(tmp[""communityName""])

if community_name not in community_name_list:
    need_cfg = True
else:
    need_cfg_bool = True

    for tmp in result[""community_info""]:
        if tmp[""communityName""] == community_name:

            cfg_bool_list = list()

            if access_right:
                if ""accessRight"" in tmp.keys():
                    need_cfg_access = False
                    if tmp[""accessRight""] != access_right:
                        need_cfg_access = True
                else:
                    need_cfg_access = True

                cfg_bool_list.append(need_cfg_access)

            if acl_number:
                if ""aclNumber"" in tmp.keys():
                    need_cfg_acl = False
                    if tmp[""aclNumber""] != acl_number:
                        need_cfg_acl = True
                else:
                    need_cfg_acl = True

                cfg_bool_list.append(need_cfg_acl)

            if community_mib_view:
                if ""mibViewName"" in tmp.keys():
                    need_cfg_mib = False
                    if tmp[""mibViewName""] != community_mib_view:
                        need_cfg_mib = True
                else:
                    need_cfg_mib = True
                cfg_bool_list.append(need_cfg_mib)

            if True not in cfg_bool_list:
                need_cfg_bool = False

    if state == ""present"":
        if not need_cfg_bool:
            need_cfg = False
            need_cfg = True
    else:
        if not need_cfg_bool:
            need_cfg = True
        else:
            need_cfg = False
"
-------------------------------------------------------------------------
"```python
community_name_list = [tmp[""communityName""] for tmp in result[""community_info""]]

if community_name not in community_name_list:
    need_cfg = True
else:
    need_cfg_bool = True

    for tmp in result[""community_info""]:
        if tmp[""communityName""] == community_name:

            cfg_bool_list = []

            if access_right:
                need_cfg_access = ""accessRight"" not in tmp or tmp[""accessRight""] != access_right
                cfg_bool_list.append(need_cfg_access)

            if acl_number:
                need_cfg_acl = ""aclNumber"" not in tmp or tmp[""aclNumber""] != acl_number
                cfg_bool_list.append(need_cfg_acl)

            if community_mib_view:
                need_cfg_mib = ""mibViewName"" not in tmp or tmp[""mibViewName""] != community_mib_view
                cfg_bool_list.append(need_cfg_mib)

            if not any(cfg_bool_list):
                need_cfg_bool = False

    if state == ""present"":
        need_cfg = not need_cfg_bool
    else:
        need_cfg = need_cfg_bool
```"
-------------------------------------------------------------------------
"community_name_list = list()
        community_name_list.append(tmp[""communityName""])

if community_name not in community_name_list:
    need_cfg = True
else:
    need_cfg_bool = True

    for tmp in result[""community_info""]:
        if tmp[""communityName""] == community_name:

            cfg_bool_list = list()

            if access_right:
                if ""accessRight"" in tmp.keys():
                    need_cfg_access = False
                    if tmp[""accessRight""] != access_right:
                        need_cfg_access = True
                else:
                    need_cfg_access = True

                cfg_bool_list.append(need_cfg_access)

            if acl_number:
                if ""aclNumber"" in tmp.keys():
                    need_cfg_acl = False
                    if tmp[""aclNumber""] != acl_number:
                        need_cfg_acl = True
                else:
                    need_cfg_acl = True

                cfg_bool_list.append(need_cfg_acl)

            if community_mib_view:
                if ""mibViewName"" in tmp.keys():
                    need_cfg_mib = False
                    if tmp[""mibViewName""] != community_mib_view:
                        need_cfg_mib = True
                else:
                    need_cfg_mib = True
                cfg_bool_list.append(need_cfg_mib)

            if True not in cfg_bool_list:
                need_cfg_bool = False

    if state == ""present"":
        if not need_cfg_bool:
            need_cfg = False
            need_cfg = True
    else:
        if not need_cfg_bool:
            need_cfg = True
        else:
            need_cfg = False
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"group_info = root.findall(""snmp/snmpv3Groups/snmpv3Group"")
"
-------------------------------------------------------------------------
"```python
group_info = root.findall(""snmp/snmpv3Groups/snmpv3Group"")
```"
-------------------------------------------------------------------------
"group_info = root.findall(""snmp/snmpv3Groups/snmpv3Group"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"group_name_list = list()

        group_name_list.append(tmp[""groupName""])
if group_name not in group_name_list:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
else:
    need_cfg_bool = True
    for tmp in result[""group_info""]:
        if tmp[""groupName""] == group_name:

            cfg_bool_list = list()

            if security_level:
                if ""securityLevel"" in tmp.keys():
                    need_cfg_group = False
                    if tmp[""securityLevel""] != security_level:
                        need_cfg_group = True
                else:
                    need_cfg_group = True

                cfg_bool_list.append(need_cfg_group)

            if acl_number:
                if ""aclNumber"" in tmp.keys():
                    need_cfg_acl = False
                    if tmp[""aclNumber""] != acl_number:
                        need_cfg_acl = True
                else:
                    need_cfg_acl = True

                cfg_bool_list.append(need_cfg_acl)

            if read_view:
                if ""readViewName"" in tmp.keys():
                    need_cfg_read = False
                    if tmp[""readViewName""] != read_view:
                        need_cfg_read = True
                else:
                    need_cfg_read = True
                cfg_bool_list.append(need_cfg_read)

            if write_view:
                if ""writeViewName"" in tmp.keys():
                    need_cfg_write = False
                    if tmp[""writeViewName""] != write_view:
                        need_cfg_write = True
                else:
                    need_cfg_write = True
                cfg_bool_list.append(need_cfg_write)

            if notify_view:
                if ""notifyViewName"" in tmp.keys():
                    need_cfg_notify = False
                    if tmp[""notifyViewName""] != notify_view:
                        need_cfg_notify = True
                else:
                    need_cfg_notify = True
                cfg_bool_list.append(need_cfg_notify)

            if True not in cfg_bool_list:
                need_cfg_bool = False

    if state == ""present"":
        if not need_cfg_bool:
            need_cfg = False
            need_cfg = True
    else:
        if not need_cfg_bool:
            need_cfg = True
            need_cfg = False
"
-------------------------------------------------------------------------
"```python
group_name_list = list()

group_name_list.append(tmp[""groupName""]) 
if group_name not in group_name_list:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
else:
    need_cfg_bool = True
    for tmp in result[""group_info""]:
        if tmp[""groupName""] == group_name:

            cfg_bool_list = list()

            if security_level:
                if ""securityLevel"" in tmp.keys():
                    need_cfg_group = False
                    if tmp[""securityLevel""] != security_level:
                        need_cfg_group = True
                else:
                    need_cfg_group = True

                cfg_bool_list.append(need_cfg_group)

            if acl_number:
                if ""aclNumber"" in tmp.keys():
                    need_cfg_acl = False
                    if tmp[""aclNumber""] != acl_number:
                        need_cfg_acl = True
                else:
                    need_cfg_acl = True

                cfg_bool_list.append(need_cfg_acl)

            if read_view:
                if ""readViewName"" in tmp.keys():
                    need_cfg_read = False
                    if tmp[""readViewName""] != read_view:
                        need_cfg_read = True
                else:
                    need_cfg_read = True
                cfg_bool_list.append(need_cfg_read)

            if write_view:
                if ""writeViewName"" in tmp.keys():
                    need_cfg_write = False
                    if tmp[""writeViewName""] != write_view:
                        need_cfg_write = True
                else:
                    need_cfg_write = True
                cfg_bool_list.append(need_cfg_write)

            if notify_view:
                if ""notifyViewName"" in tmp.keys():
                    need_cfg_notify = False
                    if tmp[""notifyViewName""] != notify_view:
                        need_cfg_notify = True
                else:
                    need_cfg_notify = True
                cfg_bool_list.append(need_cfg_notify)

            if True not in cfg_bool_list:
                need_cfg_bool = False

    if state == ""present"":
        need_cfg = not need_cfg_bool
    else:
        need_cfg = need_cfg_bool
```"
-------------------------------------------------------------------------
"group_name_list = list()

        group_name_list.append(tmp[""groupName""])
if group_name not in group_name_list:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
else:
    need_cfg_bool = True
    for tmp in result[""group_info""]:
        if tmp[""groupName""] == group_name:

            cfg_bool_list = list()

            if security_level:
                if ""securityLevel"" in tmp.keys():
                    need_cfg_group = False
                    if tmp[""securityLevel""] != security_level:
                        need_cfg_group = True
                else:
                    need_cfg_group = True

                cfg_bool_list.append(need_cfg_group)

            if acl_number:
                if ""aclNumber"" in tmp.keys():
                    need_cfg_acl = False
                    if tmp[""aclNumber""] != acl_number:
                        need_cfg_acl = True
                else:
                    need_cfg_acl = True

                cfg_bool_list.append(need_cfg_acl)

            if read_view:
                if ""readViewName"" in tmp.keys():
                    need_cfg_read = False
                    if tmp[""readViewName""] != read_view:
                        need_cfg_read = True
                else:
                    need_cfg_read = True
                cfg_bool_list.append(need_cfg_read)

            if write_view:
                if ""writeViewName"" in tmp.keys():
                    need_cfg_write = False
                    if tmp[""writeViewName""] != write_view:
                        need_cfg_write = True
                else:
                    need_cfg_write = True
                cfg_bool_list.append(need_cfg_write)

            if notify_view:
                if ""notifyViewName"" in tmp.keys():
                    need_cfg_notify = False
                    if tmp[""notifyViewName""] != notify_view:
                        need_cfg_notify = True
                else:
                    need_cfg_notify = True
                cfg_bool_list.append(need_cfg_notify)

            if True not in cfg_bool_list:
                need_cfg_bool = False

    if state == ""present"":
        if not need_cfg_bool:
            need_cfg = False
            need_cfg = True
    else:
        if not need_cfg_bool:
            need_cfg = True
            need_cfg = False
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"end_tmp[item] = snmp_community_rst[item]
end_tmp[item] = snmp_community_rst[item]
end snmp v3 group config
end_tmp[item] = snmp_v3_group_rst[item]
"
-------------------------------------------------------------------------
"```python
end_tmp = dict()
for item in snmp_community_rst:
    end_tmp[item] = snmp_community_rst[item]

end_tmp = dict()
for item in snmp_v3_group_rst:
    end_tmp[item] = snmp_v3_group_rst[item]

end_state[""snmp community""] = end_tmp
end_state[""snmp v3 group""] = end_tmp
```"
-------------------------------------------------------------------------
"end_tmp[item] = snmp_community_rst[item]
end_tmp[item] = snmp_community_rst[item]
end snmp v3 group config
end_tmp[item] = snmp_v3_group_rst[item]
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.network.cloudengine.ce import exec_command, load_config, ce_argument_spec
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.network.cloudengine.ce import exec_command, load_config, ce_argument_spec
```"
-------------------------------------------------------------------------
"from ansible.module_utils.network.cloudengine.ce import exec_command, load_config, ce_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"def get_config(self, flags=None):
    """"""Retrieves the current config from the device or cache
    """"""
    flags = [] if flags is None else flags

    cmd = 'display current-configuration '
    cmd = ' '.join(flags)
    cmd = cmd.strip()

    rc, out, err = exec_command(self.module, cmd)
    if rc != 0:
        self.module.fail_json(msg=err)
    cfg = str(out).strip()

    return cfg

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.network.cloudengine.ce import exec_command

def get_config(self, flags=None):
    """"""Retrieves the current config from the device or cache
    """"""
    flags = [] if flags is None else flags

    cmd = 'display current-configuration '
    cmd = ' '.join(flags)
    cmd = cmd.strip()

    rc, out, err = exec_command(self.module, cmd)
    if rc != 0:
        self.module.fail_json(msg=err)
    cfg = str(out).strip()

    return cfg
```"
-------------------------------------------------------------------------
"def get_config(self, flags=None):
    """"""Retrieves the current config from the device or cache
    """"""
    flags = [] if flags is None else flags

    cmd = 'display current-configuration '
    cmd = ' '.join(flags)
    cmd = cmd.strip()

    rc, out, err = exec_command(self.module, cmd)
    if rc != 0:
        self.module.fail_json(msg=err)
    cfg = str(out).strip()

    return cfg

"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"if len(temp_data) > 1:
    self.cur_cfg[""contact""] = temp_data[1]
    self.existing[""contact""] = temp_data[1]
"
-------------------------------------------------------------------------
"```python
if len(temp_data) > 1:
    self.cur_cfg[""contact""] = temp_data[1]
    self.existing[""contact""] = temp_data[1]
```"
-------------------------------------------------------------------------
"if len(temp_data) > 1:
    self.cur_cfg[""contact""] = temp_data[1]
    self.existing[""contact""] = temp_data[1]
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"if len(temp_data) > 1:
    self.end_state[""contact""] = temp_data[1]
"
-------------------------------------------------------------------------
"```python
if len(temp_data) > 1:
    self.end_state[""contact""] = temp_data[1]
```"
-------------------------------------------------------------------------
"if len(temp_data) > 1:
    self.end_state[""contact""] = temp_data[1]
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"tmp_cfg = self.get_config(flags)
"
-------------------------------------------------------------------------
"```python
tmp_cfg = self.get_config([])
```"
-------------------------------------------------------------------------
"tmp_cfg = self.get_config(flags)
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.network.cloudengine.ce import exec_command, load_config, ce_argument_spec
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.network.cloudengine.ce import exec_command, load_config, ce_argument_spec
```"
-------------------------------------------------------------------------
"from ansible.module_utils.network.cloudengine.ce import exec_command, load_config, ce_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"def get_config(self, flags=None):
    """"""Retrieves the current config from the device or cache
    """"""
    flags = [] if flags is None else flags

    cmd = 'display current-configuration '
    cmd = ' '.join(flags)
    cmd = cmd.strip()

    rc, out, err = exec_command(self.module, cmd)
    if rc != 0:
        self.module.fail_json(msg=err)
    cfg = str(out).strip()

    return cfg

"
-------------------------------------------------------------------------
"```python
def get_config(self, flags=None):
    """"""Retrieves the current config from the device or cache
    """"""
    flags = [] if flags is None else flags

    cmd = 'display current-configuration '
    cmd += ' '.join(flags)
    cmd = cmd.strip()

    rc, out, err = exec_command(self.module, cmd)
    if rc != 0:
        self.module.fail_json(msg=err)
    cfg = str(out).strip()

    return cfg
```"
-------------------------------------------------------------------------
"def get_config(self, flags=None):
    """"""Retrieves the current config from the device or cache
    """"""
    flags = [] if flags is None else flags

    cmd = 'display current-configuration '
    cmd = ' '.join(flags)
    cmd = cmd.strip()

    rc, out, err = exec_command(self.module, cmd)
    if rc != 0:
        self.module.fail_json(msg=err)
    cfg = str(out).strip()

    return cfg

"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"tmp_cfg = self.get_config(flags)
"
-------------------------------------------------------------------------
"```python
tmp_cfg = self.get_config(flags)
```"
-------------------------------------------------------------------------
"tmp_cfg = self.get_config(flags)
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"ce_argument_spec, load_config, check_ip_addr
"
-------------------------------------------------------------------------
"```python
from xml.etree import ElementTree
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.cloudengine.ce import get_nc_config, set_nc_config, ce_argument_spec

# get snmp version
CE_GET_SNMP_VERSION = """"""
Required dependency: ansible.module_utils.network.cloudengine.ce, xml.etree, ansible.module_utils.basic, 

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.module_utils.network.cloudengine.ce.get_nc_config, ansible.module_utils.network.cloudengine.ce.set_nc_config, xml.etree.ElementTree, ansible.module_utils.basic.AnsibleModule, ansible.module_utils.network.cloudengine.ce.ce_argument_spec
Function name information from Stable: merge_snmp_v3_usm_user, get_snmp_local_engine, check_snmp_v3_usm_user_args, create_snmp_v3_usm_user, merge_snmp_v3_local_user, delete_snmp_v3_local_user, netconf_set_config, delete_snmp_v3_usm_user, create_snmp_v3_local_user, netconf_get_config, check_snmp_v3_local_user_args, main
Function call information from Stable: set_nc_config, dict, SnmpUser, get_nc_config, int, AnsibleModule, len, main
Class name information from Stable: SnmpUser
Class method call information from Stable: snmp_user_obj.check_snmp_v3_usm_user_args, updates.append, self.netconf_set_config, snmp_user_obj.create_snmp_v3_local_user, snmp_user_obj.create_snmp_v3_usm_user, ElementTree.fromstring, snmp_user_obj.delete_snmp_v3_local_user, self.local_engine_id, acl_number.isdigit, site.text, cmds.append, recv_xml.replace, snmp_user_obj.check_snmp_v3_local_user_args, site.tag, module.exit_json, self.netconf_get_config, snmp_user_obj.merge_snmp_v3_local_user, tmp.keys, snmp_user_obj.delete_snmp_v3_usm_user, snmp_user_obj.merge_snmp_v3_usm_user, module.fail_json, snmp_user_obj.get_snmp_local_engine, module.params, argument_spec.update, root.findall
Target file: always, published, length, useful, aaa, for, HUAWEI, user, no_log, You, sent, usm, str, If, Create, xml_str, kwargs, CE_DELETE_SNMP_V3_LOCAL_USER, class, can, GNU, your, bin, part, ansible, passed, acl, noPriv, auth_key, check_snmp_v3_usm_user_args, CE_MERGE_SNMP_V3_LOCAL_USER, snmp_v3_usm_user_rst, test, provider, protocol, See, MERCHANTABILITY, false, noAuth, should, main, configure, privKey, delete_snmp_v3_usm_user, status, cloudengine, vars, operation, where, after, gnu, same, redistribute, invalid, site, netconf, switches, cli, configuration, default, root, will, any, __main__, characters, Public, user_group, updates, not, True, later, parameters, Free, len, argument_spec, with, acl_number, import, include, PURPOSE, aclNumber, CE_GET_SNMP_V3_USM_USER_HEADER, control, usm_user_name, true, check, CE_MERGE_SNMP_V3_USM_USER_TAIL, Delete, tmp_dict, update, RETURN, isdigit, PARTICULAR, authKey, module_utils, local, False, into, host, License, is, mutually_exclusive, tasks, The, bool, Remote,...
```"
-------------------------------------------------------------------------
"ce_argument_spec, load_config, check_ip_addr
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"# get snmp listen port
CE_GET_SNMP_PORT = """"""
<filter type=""subtree"">
  <snmp xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
    <systemCfg>
      <snmpListenPort></snmpListenPort>
    </systemCfg>
  </snmp>
</filter>


rge snmp listen port
ERGE_SNMP_PORT = """"""
<config>
  <snmp xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
    <systemCfg operation=""merge"">
      <snmpListenPort>%s</snmpListenPort>
    </systemCfg>
  </snmp>
</config>



"
-------------------------------------------------------------------------
"CE_GET_SNMP_PORT = """"""
<filter type=""subtree"">
  <snmp xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
    <systemCfg>
      <snmpListenPort></snmpListenPort>
    </systemCfg>
  </snmp>
</filter>
""""""

MERGE_SNMP_PORT = """"""
<config>
  <snmp xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
    <systemCfg operation=""merge"">
      <snmpListenPort>%s</snmpListenPort>
    </systemCfg>
  </snmp>
</config>
"""""""
-------------------------------------------------------------------------
"# get snmp listen port
CE_GET_SNMP_PORT = """"""
<filter type=""subtree"">
  <snmp xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
    <systemCfg>
      <snmpListenPort></snmpListenPort>
    </systemCfg>
  </snmp>
</filter>


rge snmp listen port
ERGE_SNMP_PORT = """"""
<config>
  <snmp xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
    <systemCfg operation=""merge"">
      <snmpListenPort>%s</snmpListenPort>
    </systemCfg>
  </snmp>
</config>



"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"""snmp/targetHosts/targetHost"")
"
-------------------------------------------------------------------------
"root = ElementTree.fromstring(xml_str)
target_host_info = root.findall(""snmp/targetHosts/targetHost"")

if target_host_info:
    for tmp in target_host_info:
        tmp_dict = dict()"
-------------------------------------------------------------------------
"""snmp/targetHosts/targetHost"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"if tmp[""interface-name""].lower() != self.interface_name.lower():
"
-------------------------------------------------------------------------
"```python
if tmp.get(""interface-name"", """").lower() != self.interface_name.lower():
```"
-------------------------------------------------------------------------
"if tmp[""interface-name""].lower() != self.interface_name.lower():
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"version_info = root.find(""snmp/engine"")
"
-------------------------------------------------------------------------
"```python
version_info = root.find(""snmp/engine"")
```"
-------------------------------------------------------------------------
"version_info = root.find(""snmp/engine"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"def xml_get_connect_port(self):
    """""" Get connect port by xml """"""
    tmp_cfg = None
    conf_str = CE_GET_SNMP_PORT
    recv_xml = self.netconf_get_config(conf_str=conf_str)
    if ""<data/>"" in recv_xml:
        pass
    else:
        xml_str = recv_xml.replace('\r', '').replace('\n', '').\
            replace('xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0""', """").\
            replace('xmlns=""http://www.huawei.com/netconf/vrp""', """")
        root = ElementTree.fromstring(xml_str)
        snmp_port_info = root.findall(""snmp/systemCfg/snmpListenPort"")
        if snmp_port_info:
            tmp_cfg = snmp_port_info[0].text
        return tmp_cfg
"
-------------------------------------------------------------------------
"```python
def xml_get_connect_port(self):
    """""" Get connect port by xml """"""
    tmp_cfg = None
    conf_str = CE_GET_SNMP_PORT
    recv_xml = self.netconf_get_config(conf_str=conf_str)
    if ""<data/>"" in recv_xml:
        pass
    else:
        xml_str = recv_xml.replace('\r', '').replace('\n', '').\
            replace('xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0""', """").\
            replace('xmlns=""http://www.huawei.com/netconf/vrp""', """")
        root = ElementTree.fromstring(xml_str)
        snmp_port_info = root.findall(""snmp/systemCfg/snmpListenPort"")
        if snmp_port_info:
            tmp_cfg = snmp_port_info[0].text
    return tmp_cfg
```"
-------------------------------------------------------------------------
"def xml_get_connect_port(self):
    """""" Get connect port by xml """"""
    tmp_cfg = None
    conf_str = CE_GET_SNMP_PORT
    recv_xml = self.netconf_get_config(conf_str=conf_str)
    if ""<data/>"" in recv_xml:
        pass
    else:
        xml_str = recv_xml.replace('\r', '').replace('\n', '').\
            replace('xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0""', """").\
            replace('xmlns=""http://www.huawei.com/netconf/vrp""', """")
        root = ElementTree.fromstring(xml_str)
        snmp_port_info = root.findall(""snmp/systemCfg/snmpListenPort"")
        if snmp_port_info:
            tmp_cfg = snmp_port_info[0].text
        return tmp_cfg
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"tmp_cfg = self.xml_get_connect_port()
    self.cur_cli_cfg[""connect port""] = tmp_cfg
    self.existing[""connect port""] = tmp_cfg
"
-------------------------------------------------------------------------
"```python
tmp_cfg = self.xml_get_connect_port()
self.existing[""connect port""] = tmp_cfg
```"
-------------------------------------------------------------------------
"tmp_cfg = self.xml_get_connect_port()
    self.cur_cli_cfg[""connect port""] = tmp_cfg
    self.existing[""connect port""] = tmp_cfg
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"tmp_cfg = self.xml_get_connect_port()
    self.end_state[""connect port""] = tmp_cfg
"
-------------------------------------------------------------------------
"```python
tmp_cfg = self.xml_get_connect_port()
self.end_state[""connect port""] = tmp_cfg
```"
-------------------------------------------------------------------------
"tmp_cfg = self.xml_get_connect_port()
    self.end_state[""connect port""] = tmp_cfg
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"def config_connect_port_xml(self):
    """""" Config connect port by xml """"""
"
-------------------------------------------------------------------------
"```python
def config_connect_port_xml(self):
    """""" Configure connect port using XML """"""
```"
-------------------------------------------------------------------------
"def config_connect_port_xml(self):
    """""" Config connect port by xml """"""
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"conf_str = CE_MERGE_SNMP_PORT % self.connect_port
self.netconf_set_config(conf_str=conf_str)
"
-------------------------------------------------------------------------
"```python
import ansible.module_utils.network.cloudengine.ce as ce

conf_str = ce.CE_MERGE_SNMP_PORT % self.connect_port
self.netconf_set_config(conf_str=conf_str)
```"
-------------------------------------------------------------------------
"conf_str = CE_MERGE_SNMP_PORT % self.connect_port
self.netconf_set_config(conf_str=conf_str)
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"conf_str = CE_MERGE_SNMP_PORT % self.connect_port
self.netconf_set_config(conf_str=conf_str)
"
-------------------------------------------------------------------------
"```python
conf_str = CE_MERGE_SNMP_PORT % self.connect_port
self.netconf_set_config(conf_str=conf_str)
```"
-------------------------------------------------------------------------
"conf_str = CE_MERGE_SNMP_PORT % self.connect_port
self.netconf_set_config(conf_str=conf_str)
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"connect_port = ""161""
conf_str = CE_MERGE_SNMP_PORT % connect_port
self.netconf_set_config(conf_str=conf_str)
"
-------------------------------------------------------------------------
"```python
connect_port = ""161""
conf_str = CE_MERGE_SNMP_PORT % connect_port
self.netconf_set_config(conf_str=conf_str)
```"
-------------------------------------------------------------------------
"connect_port = ""161""
conf_str = CE_MERGE_SNMP_PORT % connect_port
self.netconf_set_config(conf_str=conf_str)
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"self.config_connect_port_xml()
"
-------------------------------------------------------------------------
self.config_connect_port_xml()
-------------------------------------------------------------------------
"self.config_connect_port_xml()
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.connection import exec_command
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.connection import exec_command
```"
-------------------------------------------------------------------------
"from ansible.module_utils.connection import exec_command
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"def get_config(self, flags=None):
    """"""Retrieves the current config from the device or cache
    """"""
    flags = [] if flags is None else flags

    cmd = 'display current-configuration '
    cmd = ' '.join(flags)
    cmd = cmd.strip()

    rc, out, err = exec_command(self.module, cmd)
    if rc != 0:
        self.module.fail_json(msg=err)
    cfg = str(out).strip()

    return cfg

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.network.cloudengine.ce import get_nc_config
import xml.etree.ElementTree as etree
from ansible.module_utils.basic import AnsibleModule

class SnmpTraps(object):
    def get_config(self, flags=None):
        """"""Retrieves the current config from the device or cache
        """"""
        flags = [] if flags is None else flags
        cmd = 'display current-configuration ' + ' '.join(flags)
        cmd = cmd.strip()
    
        rc, out, err = get_nc_config(self.module, cmd)
        if rc != 0:
            self.module.fail_json(msg=err)
        cfg = str(out).strip()
    
        return cfg
```"
-------------------------------------------------------------------------
"def get_config(self, flags=None):
    """"""Retrieves the current config from the device or cache
    """"""
    flags = [] if flags is None else flags

    cmd = 'display current-configuration '
    cmd = ' '.join(flags)
    cmd = cmd.strip()

    rc, out, err = exec_command(self.module, cmd)
    if rc != 0:
        self.module.fail_json(msg=err)
    cfg = str(out).strip()

    return cfg

"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"tmp_cfg = self.get_config(flags)
"
-------------------------------------------------------------------------
"```python
tmp_cfg = self.get_config(flags)
```"
-------------------------------------------------------------------------
"tmp_cfg = self.get_config(flags)
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.network.cloudengine.ce import get_nc_config, set_nc_config
from ansible.module_utils.network.cloudengine.ce import ce_argument_spec
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.network.cloudengine.ce import get_nc_config, set_nc_config, ce_argument_spec
```"
-------------------------------------------------------------------------
"from ansible.module_utils.network.cloudengine.ce import get_nc_config, set_nc_config
from ansible.module_utils.network.cloudengine.ce import ce_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"# display info
GET_SNMP_LOCAL_ENGINE = """"""
<filter type=""subtree"">
  <snmp xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
    <engine>
      <engineID></engineID>
    </engine>
  </snmp>
</filter>

"
-------------------------------------------------------------------------
"```python
# display info
GET_SNMP_LOCAL_ENGINE = """"""
<filter type=""subtree"">
  <snmp xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
    <engine>
      <engineID></engineID>
    </engine>
  </snmp>
</filter>
""""""
```"
-------------------------------------------------------------------------
"# display info
GET_SNMP_LOCAL_ENGINE = """"""
<filter type=""subtree"">
  <snmp xmlns=""http://www.huawei.com/netconf/vrp"" content-version=""1.0"" format-version=""1.0"">
    <engine>
      <engineID></engineID>
    </engine>
  </snmp>
</filter>

"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"result[""usm_user_info""] = []

"
-------------------------------------------------------------------------
"```yaml
result[""usm_user_info""] = []
```"
-------------------------------------------------------------------------
"result[""usm_user_info""] = []

"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"usm_user_info = root.findall(""snmp/usmUsers/usmUser"")
        tmp_dict[""remoteEngineID""] = None
"
-------------------------------------------------------------------------
"```python
usm_user_info = root.findall(""snmp/usmUsers/usmUser"")
tmp_dict[""remoteEngineID""] = None
```"
-------------------------------------------------------------------------
"usm_user_info = root.findall(""snmp/usmUsers/usmUser"")
        tmp_dict[""remoteEngineID""] = None
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"cur_cfg = dict()
if usm_user_name:
    cur_cfg[""userName""] = usm_user_name
if user_group:
    cur_cfg[""groupName""] = user_group
if auth_protocol:
    cur_cfg[""authProtocol""] = auth_protocol
if auth_key:
    cur_cfg[""authKey""] = auth_key
if priv_protocol:
    cur_cfg[""privProtocol""] = priv_protocol
if priv_key:
    cur_cfg[""privKey""] = priv_key
if acl_number:
    cur_cfg[""aclNumber""] = acl_number

if remote_engine_id:
    cur_cfg[""engineID""] = remote_engine_id
    cur_cfg[""remoteEngineID""] = ""true""
else:
    cur_cfg[""engineID""] = self.local_engine_id
    cur_cfg[""remoteEngineID""] = ""false""

    num = 0
        if cur_cfg == tmp:
            num = 1

    if num == 0:
        if state == ""present"":
            need_cfg = True
        else:
            need_cfg = False
    else:
        if state == ""present"":
            need_cfg = False
        else:
            need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"```python
cur_cfg = dict()
if usm_user_name:
    cur_cfg[""userName""] = usm_user_name
if user_group:
    cur_cfg[""groupName""] = user_group
if auth_protocol:
    cur_cfg[""authProtocol""] = auth_protocol
if auth_key:
    cur_cfg[""authKey""] = auth_key
if priv_protocol:
    cur_cfg[""privProtocol""] = priv_protocol
if priv_key:
    cur_cfg[""privKey""] = priv_key
if acl_number:
    cur_cfg[""aclNumber""] = acl_number

if remote_engine_id:
    cur_cfg[""engineID""] = remote_engine_id
    cur_cfg[""remoteEngineID""] = ""true""
else:
    cur_cfg[""engineID""] = self.local_engine_id
    cur_cfg[""remoteEngineID""] = ""false""

num = 0
if cur_cfg == tmp:
    num = 1

if num == 0:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
else:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
```"
-------------------------------------------------------------------------
"cur_cfg = dict()
if usm_user_name:
    cur_cfg[""userName""] = usm_user_name
if user_group:
    cur_cfg[""groupName""] = user_group
if auth_protocol:
    cur_cfg[""authProtocol""] = auth_protocol
if auth_key:
    cur_cfg[""authKey""] = auth_key
if priv_protocol:
    cur_cfg[""privProtocol""] = priv_protocol
if priv_key:
    cur_cfg[""privKey""] = priv_key
if acl_number:
    cur_cfg[""aclNumber""] = acl_number

if remote_engine_id:
    cur_cfg[""engineID""] = remote_engine_id
    cur_cfg[""remoteEngineID""] = ""true""
else:
    cur_cfg[""engineID""] = self.local_engine_id
    cur_cfg[""remoteEngineID""] = ""false""

    num = 0
        if cur_cfg == tmp:
            num = 1

    if num == 0:
        if state == ""present"":
            need_cfg = True
        else:
            need_cfg = False
    else:
        if state == ""present"":
            need_cfg = False
        else:
            need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"
"
-------------------------------------------------------------------------
"```python
class SnmpUser(object):
    module = kwargs[""module""]
    result = dict()
    need_cfg = False
    state = module.params['state']
    local_user_name = module.params['aaa_local_user']
```"
-------------------------------------------------------------------------
"
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"result[""local_user_info""] = []

"
-------------------------------------------------------------------------
"result[""local_user_info""] = []"
-------------------------------------------------------------------------
"result[""local_user_info""] = []

"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"""snmp/localUsers/localUser"")
"
-------------------------------------------------------------------------
"root = ElementTree.fromstring(xml_str)
local_user_info = root.findall(""snmp/localUsers/localUser"")
if local_user_info:
    for tmp in local_user_info:
        tmp_dict = dict()"
-------------------------------------------------------------------------
"""snmp/localUsers/localUser"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"if auth_protocol or auth_key:
    cmds.append(cmd)
"
-------------------------------------------------------------------------
"Update the code snippet as follows:

```python
if auth_protocol or auth_key:
    cmds.append(cmd)
```"
-------------------------------------------------------------------------
"if auth_protocol or auth_key:
    cmds.append(cmd)
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"if priv_key or priv_protocol:
    cmds.append(cmd)
"
-------------------------------------------------------------------------
"```python
if priv_key or priv_protocol:
    cmds.append(cmd)
```"
-------------------------------------------------------------------------
"if priv_key or priv_protocol:
    cmds.append(cmd)
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"if auth_key or auth_protocol:
    cmds.append(cmd)
"
-------------------------------------------------------------------------
"```python
if auth_key or auth_protocol:
    cmds.append(cmd)
```"
-------------------------------------------------------------------------
"if auth_key or auth_protocol:
    cmds.append(cmd)
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"if priv_protocol or priv_key:
    cmds.append(cmd)

"
-------------------------------------------------------------------------
"```python
if priv_protocol or priv_key:
    cmds.append(cmd)
```"
-------------------------------------------------------------------------
"if priv_protocol or priv_key:
    cmds.append(cmd)

"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"conf_str = GET_SNMP_LOCAL_ENGINE
recv_xml = self.netconf_get_config(module=module, conf_str=conf_str)
if ""</data>"" in recv_xml:
    xml_str = recv_xml.replace('\r', '').replace('\n', '').\
        replace('xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0""', """").\
        replace('xmlns=""http://www.huawei.com/netconf/vrp""', """")
    root = ElementTree.fromstring(xml_str)
    local_engine_info = root.findall(""snmp/engine/engineID"")
    if local_engine_info:
        self.local_engine_id = local_engine_info[0].text
"
-------------------------------------------------------------------------
"```python
conf_str = 'GET_SNMP_LOCAL_ENGINE'
recv_xml = self.netconf_get_config(module=module, conf_str=conf_str)

if ""</data>"" in recv_xml:
    xml_str = recv_xml.replace('\r', '').replace('\n', '').replace('xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0""', """").replace('xmlns=""http://www.huawei.com/netconf/vrp""', """")
    root = ElementTree.fromstring(xml_str)
    local_engine_info = root.findall(""snmp/engine/engineID"")

    if local_engine_info:
        self.local_engine_id = local_engine_info[0].text
```"
-------------------------------------------------------------------------
"conf_str = GET_SNMP_LOCAL_ENGINE
recv_xml = self.netconf_get_config(module=module, conf_str=conf_str)
if ""</data>"" in recv_xml:
    xml_str = recv_xml.replace('\r', '').replace('\n', '').\
        replace('xmlns=""urn:ietf:params:xml:ns:netconf:base:1.0""', """").\
        replace('xmlns=""http://www.huawei.com/netconf/vrp""', """")
    root = ElementTree.fromstring(xml_str)
    local_engine_info = root.findall(""snmp/engine/engineID"")
    if local_engine_info:
        self.local_engine_id = local_engine_info[0].text
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"snmp_user_obj.get_snmp_local_engine(module=module)
"
-------------------------------------------------------------------------
"```python
snmp_user_obj.get_snmp_local_engine(module)
```"
-------------------------------------------------------------------------
"snmp_user_obj.get_snmp_local_engine(module=module)
"
-------------------------------------------------------------------------
"Recom
PRs: 57025, 57888"
-------------------------------------------------------------------------
=========================================================================
"'parent_id': parent_id,
'visibility': options['visibility']})
"
-------------------------------------------------------------------------
"```python
'parent_id': parent_id,
'visibility': options.get('visibility'),
```"
-------------------------------------------------------------------------
"'parent_id': parent_id,
'visibility': options['visibility']})
"
-------------------------------------------------------------------------
"Recom
PRs: 57024, 57846"
-------------------------------------------------------------------------
=========================================================================
"
self._add_host_to_composed_groups(self.get_option('groups'), host, hostname, strict=strict)
"
-------------------------------------------------------------------------
"self._add_host_to_composed_groups(self.get_option('groups'), host, hostname, strict=strict)"
-------------------------------------------------------------------------
"
self._add_host_to_composed_groups(self.get_option('groups'), host, hostname, strict=strict)
"
-------------------------------------------------------------------------
"Recom
PRs: 57689, 57823"
-------------------------------------------------------------------------
=========================================================================
"default: ""4""
"
-------------------------------------------------------------------------
"```yaml
choices: 
  - absent
  - present
```"
-------------------------------------------------------------------------
"default: ""4""
"
-------------------------------------------------------------------------
"Recom
PRs: 57723, 57821"
-------------------------------------------------------------------------
=========================================================================
"pesize=dict(type='str', default='4'),
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='pesize', ctx=Store()), annotation=Constant(value='4'), simple=1)"
-------------------------------------------------------------------------
"pesize=dict(type='str', default='4'),
"
-------------------------------------------------------------------------
"Recom
PRs: 57723, 57821"
-------------------------------------------------------------------------
=========================================================================
"env:
    - name: GCP_AUTH_KIND
      version_added: ""2.8""
env:
    - name: GCP_SCOPES
      version_added: ""2.8""
    - name: GCP_SERVICE_ACCOUNT_FILE
      version_added: ""2.8""
env:
    - name: GCP_SERVICE_ACCOUNT_EMAIL
      version_added: ""2.8""
"
-------------------------------------------------------------------------
"env:
    - name: GCP_AUTH_KIND
      version_added: ""2.8""
    - name: GCP_SCOPES
      version_added: ""2.8""
    - name: GCP_SERVICE_ACCOUNT_FILE
      version_added: ""2.8""
    - name: GCP_SERVICE_ACCOUNT_EMAIL
      version_added: ""2.8"""
-------------------------------------------------------------------------
"env:
    - name: GCP_AUTH_KIND
      version_added: ""2.8""
env:
    - name: GCP_SCOPES
      version_added: ""2.8""
    - name: GCP_SERVICE_ACCOUNT_FILE
      version_added: ""2.8""
env:
    - name: GCP_SERVICE_ACCOUNT_EMAIL
      version_added: ""2.8""
"
-------------------------------------------------------------------------
"Recom
PRs: 57776, 57800"
-------------------------------------------------------------------------
=========================================================================
"from ansible.utils.helpers import deduplicate_list
"
-------------------------------------------------------------------------
from ansible.utils.helpers import deduplicate_list
-------------------------------------------------------------------------
"from ansible.utils.helpers import deduplicate_list
"
-------------------------------------------------------------------------
"Recom
PRs: 55331, 57769"
-------------------------------------------------------------------------
=========================================================================
"self._hosts_patterns_cache[pattern_hash] = deduplicate_list(hosts)
"
-------------------------------------------------------------------------
self._hosts_patterns_cache[pattern_hash] = deduplicate_list(hosts)
-------------------------------------------------------------------------
"self._hosts_patterns_cache[pattern_hash] = deduplicate_list(hosts)
"
-------------------------------------------------------------------------
"Recom
PRs: 55331, 57769"
-------------------------------------------------------------------------
=========================================================================
"from ansible.utils.helpers import deduplicate_list
"
-------------------------------------------------------------------------
"RETURN = """"""
 
 from ansible.utils.helpers import deduplicate_list
 from ansible.inventory.manager import split_host_pattern, order_patterns
 from ansible.plugins.lookup import LookupBase
 
 
 class LookupModule(LookupBase):"
-------------------------------------------------------------------------
"from ansible.utils.helpers import deduplicate_list
"
-------------------------------------------------------------------------
"Recom
PRs: 55331, 57769"
-------------------------------------------------------------------------
=========================================================================
"return deduplicate_list(host_list)
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.six import string_types
from __future__ import absolute_import, division, print_function
class LookupModule(LookupBase):
    host_list.extend(that)
    return deduplicate_list(host_list)
```"
-------------------------------------------------------------------------
"return deduplicate_list(host_list)
"
-------------------------------------------------------------------------
"Recom
PRs: 55331, 57769"
-------------------------------------------------------------------------
=========================================================================
"

def deduplicate_list(original_list):
""""""
Creates a deduplicated list with the order in which each item is first found.
""""""
seen = set()
return [x for x in original_list if x not in seen and not seen.add(x)]
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.six import string_types
from __future__ import print_function, absolute_import

def deduplicate_list(original_list):
    """"""
    Creates a deduplicated list with the order in which each item is first found.
    """"""
    seen = set()
    return [x for x in original_list if x not in seen and not seen.add(x)]
```"
-------------------------------------------------------------------------
"

def deduplicate_list(original_list):
""""""
Creates a deduplicated list with the order in which each item is first found.
""""""
seen = set()
return [x for x in original_list if x not in seen and not seen.add(x)]
"
-------------------------------------------------------------------------
"Recom
PRs: 55331, 57769"
-------------------------------------------------------------------------
=========================================================================
"if peek_result.get('state') in (None, 'absent'):
"
-------------------------------------------------------------------------
"```python
if peek_result.get('state') in (None, 'absent'):
    diff['before'] = u''
elif peek_result.get('appears_binary'):
    diff['dst_binary'] = 1
```"
-------------------------------------------------------------------------
"if peek_result.get('state') in (None, 'absent'):
"
-------------------------------------------------------------------------
"Recom
PRs: 57744, 57761"
-------------------------------------------------------------------------
=========================================================================
"nb_obj = nb_endpoint.create(data)
    serialized_nb_obj = nb_obj.serialize()
    serialized_nb_obj = nb_obj
"
-------------------------------------------------------------------------
"serialized_nb_obj = nb_obj.serialize()
    serialized_nb_obj = nb_obj"
-------------------------------------------------------------------------
"nb_obj = nb_endpoint.create(data)
    serialized_nb_obj = nb_obj.serialize()
    serialized_nb_obj = nb_obj
"
-------------------------------------------------------------------------
"Recom
PRs: 56550, 57760"
-------------------------------------------------------------------------
=========================================================================
"""l3vpn/l3vpncomm/l3vpnInstances/l3vpnInstance"")
"
-------------------------------------------------------------------------
"```python
l3vpn/l3vpncomm/l3vpnInstances/findall('l3vpnInstance')
```"
-------------------------------------------------------------------------
"""l3vpn/l3vpncomm/l3vpnInstances/l3vpnInstance"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57270, 57757"
-------------------------------------------------------------------------
=========================================================================
"""l3vpn/l3vpncomm/l3vpnInstances/l3vpnInstance/vpnInstAFs/vpnInstAF"")
"
-------------------------------------------------------------------------
"Update this line of code:

```python
vrf_addr_types = root.findall(""l3vpn/l3vpncomm/l3vpnInstances/l3vpnInstance/vpnInstAFs/vpnInstAF"")
```"
-------------------------------------------------------------------------
"""l3vpn/l3vpncomm/l3vpnInstances/l3vpnInstance/vpnInstAFs/vpnInstAF"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57270, 57757"
-------------------------------------------------------------------------
=========================================================================
"if ele.text.lower() == self.vpn_interface.lower():
"
-------------------------------------------------------------------------
"```python
if ele.text.lower() == self.vpn_interface.lower():
```"
-------------------------------------------------------------------------
"if ele.text.lower() == self.vpn_interface.lower():
"
-------------------------------------------------------------------------
"Recom
PRs: 57270, 57757"
-------------------------------------------------------------------------
=========================================================================
"""l3vpn/l3vpncomm/l3vpnInstances/l3vpnInstance"")
"
-------------------------------------------------------------------------
"class VrfInterface(object):
    # get global vrf interface info
    root = ElementTree.fromstring(xml_str)
    vpns = root.findall(
    if vpns:
        for vpnele in vpns:
            vpn_name = None
            for vpninfo in vpnele:
                if vpninfo.tag == 'vrfName':
                    vpn_name = vpninfo.text
                if vpninfo.tag == 'l3vpnIfs':
                    self.get_interface_vpn_name(vpninfo, vpn_name)"
-------------------------------------------------------------------------
"""l3vpn/l3vpncomm/l3vpnInstances/l3vpnInstance"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57270, 57757"
-------------------------------------------------------------------------
=========================================================================
"interface = root.find(""ifm/interfaces/interface"")
"
-------------------------------------------------------------------------
"```python
interface = root.find(""ifm/interfaces/interface"")
```"
-------------------------------------------------------------------------
"interface = root.find(""ifm/interfaces/interface"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57270, 57757"
-------------------------------------------------------------------------
=========================================================================
"global_cfg = root.findall(""syslog/globalParam"")
"
-------------------------------------------------------------------------
"global_cfg = root.findall(""syslog/globalParam"")"
-------------------------------------------------------------------------
"global_cfg = root.findall(""syslog/globalParam"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57269, 57752"
-------------------------------------------------------------------------
=========================================================================
"source_cfg = root.findall(""syslog/icSources/icSource"")
"
-------------------------------------------------------------------------
"```python
source_cfg = root.findall(""syslog/icSources/icSource"")
```"
-------------------------------------------------------------------------
"source_cfg = root.findall(""syslog/icSources/icSource"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57269, 57752"
-------------------------------------------------------------------------
=========================================================================
"channels = root.findall(""syslog/icChannels/icChannel"")
"
-------------------------------------------------------------------------
"```python
channels = root.findall(""syslog/icChannels/icChannel"")
```"
-------------------------------------------------------------------------
"channels = root.findall(""syslog/icChannels/icChannel"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57269, 57752"
-------------------------------------------------------------------------
=========================================================================
"dir_channels = root.findall(""syslog/icDirChannels/icDirChannel"")
"
-------------------------------------------------------------------------
"```python
dir_channels = root.findall(""syslog/icDirChannels/icDirChannel"")
```"
-------------------------------------------------------------------------
"dir_channels = root.findall(""syslog/icDirChannels/icDirChannel"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57269, 57752"
-------------------------------------------------------------------------
=========================================================================
"ic_filters = root.findall(""syslog/icFilters/icFilter"")
"
-------------------------------------------------------------------------
"```python
ic_filters = root.findall(""syslog/icFilters/icFilter"")
```"
-------------------------------------------------------------------------
"ic_filters = root.findall(""syslog/icFilters/icFilter"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57269, 57752"
-------------------------------------------------------------------------
=========================================================================
"syslog_servers = root.findall(""syslog/syslogServers/syslogServer"")
"
-------------------------------------------------------------------------
"```python
syslog_servers = root.findall(""syslog/syslogServers/syslogServer"")
```"
-------------------------------------------------------------------------
"syslog_servers = root.findall(""syslog/syslogServers/syslogServer"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57269, 57752"
-------------------------------------------------------------------------
=========================================================================
"syslog_dnss = root.findall(""syslog/syslogDNSs/syslogDNS"")
"
-------------------------------------------------------------------------
"```python
syslog_dnss = root.findall(""syslog/syslogDNSs/syslogDNS"")
```"
-------------------------------------------------------------------------
"syslog_dnss = root.findall(""syslog/syslogDNSs/syslogDNS"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57269, 57752"
-------------------------------------------------------------------------
=========================================================================
"""syslog/globalParam"")
"
-------------------------------------------------------------------------
"```python
import ansible.module_utils.network.cloudengine.ce as ce
import xml.etree.ElementTree as ElementTree
from ansible.module_utils.basic import *
 
class InfoCenterGlobal(object):
 
    root = ElementTree.fromstring(xml_str)
    global_info = root.findall(
 
    if global_info:
        for tmp in global_info:
```  "
-------------------------------------------------------------------------
"""syslog/globalParam"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57269, 57752"
-------------------------------------------------------------------------
=========================================================================
"""syslog/icLogFileInfos/icLogFileInfo"")
"
-------------------------------------------------------------------------
"             if logfile_info:
                 for tmp in logfile_info:
                     for site in tmp.findall(""syslog/icLogFileInfos/icLogFileInfo""):
                         for info in site:"
-------------------------------------------------------------------------
"""syslog/icLogFileInfos/icLogFileInfo"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57269, 57752"
-------------------------------------------------------------------------
=========================================================================
"glb = root.find(""syslog/globalParam"")
"
-------------------------------------------------------------------------
"```python
glb = root.find(""syslog/globalParam"")
```"
-------------------------------------------------------------------------
"glb = root.find(""syslog/globalParam"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57269, 57752"
-------------------------------------------------------------------------
=========================================================================
"src = root.find(""syslog/icSources/icSource"")
"
-------------------------------------------------------------------------
"src = root.find(""icSources/icSource"")"
-------------------------------------------------------------------------
"src = root.find(""syslog/icSources/icSource"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57269, 57752"
-------------------------------------------------------------------------
=========================================================================
"global_cfg = root.findall(""syslog/globalParam"")
"
-------------------------------------------------------------------------
"global_cfg = root.findall(""syslog/globalParam"")"
-------------------------------------------------------------------------
"global_cfg = root.findall(""syslog/globalParam"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57269, 57752"
-------------------------------------------------------------------------
=========================================================================
"source_cfg = root.findall(""syslog/icSources/icSource"")
"
-------------------------------------------------------------------------
"```python
source_cfg = root.findall(""syslog/icSources/icSource"")
source_cfg = [x for x in source_cfg if ""xmlns"" not in x.tag]
```  "
-------------------------------------------------------------------------
"source_cfg = root.findall(""syslog/icSources/icSource"")
"
-------------------------------------------------------------------------
"Recom
PRs: 57269, 57752"
-------------------------------------------------------------------------
=========================================================================
"if len(tmp_item) > 3:
    neighbors_dict[tmp_item[0]] = tmp_item[3]
else:
    neighbors_dict[tmp_item[0]] = None
"
-------------------------------------------------------------------------
"```python
if len(tmp_item) > 3:
    neighbors_dict[tmp_item[0]] = tmp_item[3]
else:
    neighbors_dict[tmp_item[0]] = None
```"
-------------------------------------------------------------------------
"if len(tmp_item) > 3:
    neighbors_dict[tmp_item[0]] = tmp_item[3]
else:
    neighbors_dict[tmp_item[0]] = None
"
-------------------------------------------------------------------------
"Recom
PRs: 57187, 57698"
-------------------------------------------------------------------------
=========================================================================
"elif type(response_body) is dict and response_body.get('name') and response_body.get('type'):
"
-------------------------------------------------------------------------
"elif isinstance(response_body, dict) and response_body.get('name') and response_body.get('type'):"
-------------------------------------------------------------------------
"elif type(response_body) is dict and response_body.get('name') and response_body.get('type'):
"
-------------------------------------------------------------------------
"Recom
PRs: 57480, 57676"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg='Firepower-kickstart library is required to run this module. '
                     'Please, install the library with `pip install firepower-kickstart` '
                     'command and run the playbook again.')
"
-------------------------------------------------------------------------
"```python
except ImportError:
    module.fail_json(msg='Firepower-kickstart library is required to run this module. Please, install the library with `pip install firepower-kickstart` command and run the playbook again.')
```"
-------------------------------------------------------------------------
"module.fail_json(msg='Firepower-kickstart library is required to run this module. '
                     'Please, install the library with `pip install firepower-kickstart` '
                     'command and run the playbook again.')
"
-------------------------------------------------------------------------
"Recom
PRs: 57480, 57676"
-------------------------------------------------------------------------
=========================================================================
"requirements: [ ""python >= 3.5"", ""firepower-kickstart"" ]
- Requires `firepower-kickstart` library that should be installed separately and requires Python >= 3.5.
"
-------------------------------------------------------------------------
"requirements: [ ""python >= 3.5"", ""firepower-kickstart"" ]"
-------------------------------------------------------------------------
"requirements: [ ""python >= 3.5"", ""firepower-kickstart"" ]
- Requires `firepower-kickstart` library that should be installed separately and requires Python >= 3.5.
"
-------------------------------------------------------------------------
"Recom
PRs: 57480, 57676"
-------------------------------------------------------------------------
=========================================================================
"self._cache[self.cache_key][url] = results
"
-------------------------------------------------------------------------
"```python
results = self._cache[self.cache_key][url]
```"
-------------------------------------------------------------------------
"self._cache[self.cache_key][url] = results
"
-------------------------------------------------------------------------
"Recom
PRs: 55505, 57655"
-------------------------------------------------------------------------
=========================================================================
"def first_order_merge(self, key, value):
    host_facts = {key: value}

    try:
        host_cache = self._plugin.get(key)
        if host_cache:
            host_cache.update(value)
            host_facts[key] = host_cache
    except KeyError:
        pass

    super(FactCache, self).update(host_facts)

"
-------------------------------------------------------------------------
"```python
def first_order_merge(self, key, value):
    host_facts = {key: value}

    try:
        host_cache = self._plugin.get(key)
        if host_cache:
            host_cache.update(value)
            host_facts[key] = host_cache
    except KeyError:
        pass

    super().update(host_facts)
```"
-------------------------------------------------------------------------
"def first_order_merge(self, key, value):
    host_facts = {key: value}

    try:
        host_cache = self._plugin.get(key)
        if host_cache:
            host_cache.update(value)
            host_facts[key] = host_cache
    except KeyError:
        pass

    super(FactCache, self).update(host_facts)

"
-------------------------------------------------------------------------
"Recom
PRs: 55781, 57652"
-------------------------------------------------------------------------
=========================================================================
"def test_update_legacy_key_exists(self):
    self.cache['cache_key'] = {'key': 'value', 'key2': 'value2'}
    self.cache.update('cache_key', {'key': 'updatedvalue'})
    assert self.cache['cache_key']['key'] == 'updatedvalue'
    assert self.cache['cache_key']['key2'] == 'value2'

"
-------------------------------------------------------------------------
"Add the required imports and create a new test method based on the given information:

```python
import unittest
from ansible.plugins.cache.base import FactCache

class TestFactCache(unittest.TestCase):

    def test_update_legacy_key_exists(self):
        self.cache['cache_key'] = {'key': 'value', 'key2': 'value2'}
        self.cache.update('cache_key', {'key': 'updatedvalue'})
        assert self.cache['cache_key']['key'] == 'updatedvalue'
        assert self.cache['cache_key']['key2'] == 'value2'
```"
-------------------------------------------------------------------------
"def test_update_legacy_key_exists(self):
    self.cache['cache_key'] = {'key': 'value', 'key2': 'value2'}
    self.cache.update('cache_key', {'key': 'updatedvalue'})
    assert self.cache['cache_key']['key'] == 'updatedvalue'
    assert self.cache['cache_key']['key2'] == 'value2'

"
-------------------------------------------------------------------------
"Recom
PRs: 55781, 57652"
-------------------------------------------------------------------------
=========================================================================
"class CumulusHostname(Hostname):
platform = 'Linux'
distribution = 'Cumulus-linux'
strategy_class = DebianStrategy


"
-------------------------------------------------------------------------
"```python
class CumulusHostname(DebianHostname):
    platform = 'Linux'
    distribution = 'Cumulus-linux'
```"
-------------------------------------------------------------------------
"class CumulusHostname(Hostname):
platform = 'Linux'
distribution = 'Cumulus-linux'
strategy_class = DebianStrategy


"
-------------------------------------------------------------------------
"Recom
PRs: 57493, 57634"
-------------------------------------------------------------------------
=========================================================================
"- Use with state C(present) and source C(build) to provide an alternate name for the Dockerfile to use when building an image.
- This can also include a relative path (relative to I(path)).
"
-------------------------------------------------------------------------
"```yaml
    dockerfile:
        description:
            - Use with state present and source build to provide an alternate name for the Dockerfile to use when building an image. This can also include a relative path (relative to path).
```"
-------------------------------------------------------------------------
"- This can also include a relative path (relative to I(path)).
"
-------------------------------------------------------------------------
"Recom
PRs: 57570, 57632"
-------------------------------------------------------------------------
=========================================================================
"- Use with state C(present) and source C(build) to provide an alternate name for the Dockerfile to use when building an image.
- This can also include a relative path (relative to I(path)).
"
-------------------------------------------------------------------------
"```yaml
options:
  state:
    type: str
    choices:
      - present
    description: Use with state present and source build to provide an alternate name for the Dockerfile to use when building an image. This can also include a relative path (relative to the specified path).
  source:
    type: str
    description: Use with state present and source build to provide an alternate name for the Dockerfile to use when building an image. This can also include a relative path (relative to the specified path).
  dockerfile:
    type: str
    description: Use with state present and source build to provide an alternate name for the Dockerfile to use when building an image. This can also include a relative path (relative to the specified path).
```"
-------------------------------------------------------------------------
"- Use with state C(present) and source C(build) to provide an alternate name for the Dockerfile to use when building an image.
- This can also include a relative path (relative to I(path)).
"
-------------------------------------------------------------------------
"Recom
PRs: 57570, 57631"
-------------------------------------------------------------------------
=========================================================================
"- Use with state C(present) and source C(build) to provide an alternate name for the Dockerfile to use when building an image.
- This can also include a relative path (relative to I(path)).
"
-------------------------------------------------------------------------
"```python
    dockerfile:
      description:
        - Please use I(build.dockerfile) instead. This option will be removed in Ansible 2.12.
      type: str
      version_added: ""2.0""
      state: present
      source: build
      version_added: ""2.2""
```"
-------------------------------------------------------------------------
"- Use with state C(present) and source C(build) to provide an alternate name for the Dockerfile to use when building an image.
- This can also include a relative path (relative to I(path)).
"
-------------------------------------------------------------------------
"Recom
PRs: 57570, 57631"
-------------------------------------------------------------------------
=========================================================================
"#   when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='when', ctx=Store()), annotation=Compare(left=Name(id='sample_com_challenge', ctx=Load()), ops=[Is()], comparators=[Name(id='changed', ctx=Load())]), simple=1)"
-------------------------------------------------------------------------
"#   when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
"Recom
PRs: 57557, 57568"
-------------------------------------------------------------------------
=========================================================================
"#   loop: ""{{ sample_com_challenge.challenge_data_dns | dictsort }}""
#   when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
"```python
    loop: ""{{ sample_com_challenge.challenge_data_dns | dictsort }}""
    when: sample_com_challenge is changed
```"
-------------------------------------------------------------------------
"#   with_dict: sample_com_challenge.challenge_data_dns
#   when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
"Recom
PRs: 57557, 57568"
-------------------------------------------------------------------------
=========================================================================
"when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
when: sample_com_challenge is changed
-------------------------------------------------------------------------
"when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
"Recom
PRs: 57557, 57568"
-------------------------------------------------------------------------
=========================================================================
"#   when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
"```python
#   when: sample_com_challenge.changed
```"
-------------------------------------------------------------------------
"#   when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
"Recom
PRs: 57557, 57567"
-------------------------------------------------------------------------
=========================================================================
"#   loop: ""{{ sample_com_challenge.challenge_data_dns | dictsort }}""
#   when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
"```python
    loop: ""{{ sample_com_challenge.challenge_data_dns | dictsort }}""
    when:
        - sample_com_challenge == 'changed'
```"
-------------------------------------------------------------------------
"#   loop: ""{{ sample_com_challenge.challenge_data_dns | dictsort }}""
#   when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
"Recom
PRs: 57557, 57567"
-------------------------------------------------------------------------
=========================================================================
"when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
when: sample_com_challenge is changed
-------------------------------------------------------------------------
"when: sample_com_challenge is changed
"
-------------------------------------------------------------------------
"Recom
PRs: 57557, 57567"
-------------------------------------------------------------------------
=========================================================================
"if rvolume is None:
    module.fail_json(msg=""Selected restore snapshot {0} does not exist in the Protection Group"".format(module.params['restore']))
if rvolume is None:
    module.fail_json(msg=""Selected restore volume {0} does not exist in the Protection Group"".format(module.params['restore']))
"
-------------------------------------------------------------------------
"```python
if rvolume is None and "":"" in module.params['name']:
    module.fail_json(msg=""Selected restore snapshot {0} does not exist in the Protection Group"".format(module.params['name']))
if rvolume is None and "":"" not in module.params['name']:
    module.fail_json(msg=""Selected restore volume {0} does not exist in the Protection Group"".format(module.params['name']))
```"
-------------------------------------------------------------------------
"if rvolume is None:
    module.fail_json(msg=""Selected restore snapshot {0} does not exist in the Protection Group"".format(module.params['restore']))
if rvolume is None:
    module.fail_json(msg=""Selected restore volume {0} does not exist in the Protection Group"".format(module.params['restore']))
"
-------------------------------------------------------------------------
"Recom
PRs: 56954, 57476"
-------------------------------------------------------------------------
=========================================================================
"module.exit_json(changed=False)

"
-------------------------------------------------------------------------
"```python
if __name__ == '__main__':
    main()
    module.exit_json(changed=False)
```"
-------------------------------------------------------------------------
"module.exit_json(changed=False)

"
-------------------------------------------------------------------------
"Recom
PRs: 56954, 57476"
-------------------------------------------------------------------------
=========================================================================
"sample: SHA256:r4YCZxihVjedH2OlfjVGI6Y5xAYtdCwk8VxKyzVyYfM
"
-------------------------------------------------------------------------
"```python
sample: SHA256:r4YCZxihVjedH2OlfjVGI6Y5xAYtdCwk8VxKyzVyYfM
```"
-------------------------------------------------------------------------
"sample: SHA256:r4YCZxihVjedH2OlfjVGI6Y5xAYtdCwk8VxKyzVyYfM
"
-------------------------------------------------------------------------
"Recom
PRs: 57295, 57448"
-------------------------------------------------------------------------
=========================================================================
"# On removal this has no value
'fingerprint': self.fingerprint[1] if self.fingerprint else '',
"
-------------------------------------------------------------------------
"'result': {
    'changed': self.changed,
    'size': self.size,
    'type': self.type,
    'filename': self.path,
    'public_key': self.public_key,
    'fingerprint': self.fingerprint[1] if self.fingerprint else '',
}"
-------------------------------------------------------------------------
"# On removal this has no value
'fingerprint': self.fingerprint[1] if self.fingerprint else '',
"
-------------------------------------------------------------------------
"Recom
PRs: 57295, 57448"
-------------------------------------------------------------------------
=========================================================================
"'collapse_navigation': ""True"",
'vcs_pageview_mode': 'edit'


_context = {
'display_github': 'True',
'github_user': 'ansible',
'github_repo': 'ansible',
'github_version': 'devel/docs/docsite/rst/',
'github_module_version': 'devel/lib/ansible/modules/'
"
-------------------------------------------------------------------------
"```python
_context = {
    'display_github': 'True',
    'github_user': 'ansible',
    'github_repo': 'ansible',
    'github_version': 'devel/docs/docsite/rst/',
    'github_module_version': 'devel/lib/ansible/modules/',
    'collapse_navigation': 'True',
    'vcs_pageview_mode': 'edit'
}
```"
-------------------------------------------------------------------------
"'collapse_navigation': ""True"",
'vcs_pageview_mode': 'edit'


_context = {
'display_github': 'True',
'github_user': 'ansible',
'github_repo': 'ansible',
'github_version': 'devel/docs/docsite/rst/',
'github_module_version': 'devel/lib/ansible/modules/'
"
-------------------------------------------------------------------------
"Recom
PRs: 57316, 57426"
-------------------------------------------------------------------------
=========================================================================
"'collapse_navigation': ""True"",
'vcs_pageview_mode': 'edit'


_context = {
'display_github': 'True',
'github_user': 'ansible',
'github_repo': 'ansible',
'github_version': 'devel/docs/docsite/rst/',
'github_module_version': 'devel/lib/ansible/modules/'
"
-------------------------------------------------------------------------
"```python
html_short_title = 'Ansible Documentation'

html_theme_options = {
    'canonical_url': ""https://docs.ansible.com/ansible/latest/"",
    'collapse_navigation': ""True"",
    'vcs_pageview_mode': 'edit',
}

_context = {
    'display_github': 'True',
    'github_user': 'ansible',
    'github_repo': 'ansible',
    'github_version': 'devel/docs/docsite/rst/',
    'github_module_version': 'devel/lib/ansible/modules/'
}
```"
-------------------------------------------------------------------------
"'collapse_navigation': ""True"",
'vcs_pageview_mode': 'edit'


_context = {
'display_github': 'True',
'github_user': 'ansible',
'github_repo': 'ansible',
'github_version': 'devel/docs/docsite/rst/',
'github_module_version': 'devel/lib/ansible/modules/'
"
-------------------------------------------------------------------------
"Recom
PRs: 57316, 57423"
-------------------------------------------------------------------------
=========================================================================
"with os.fdopen(tmpfd, 'wb') as f:
"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes, to_native
import os
import tempfile

def write_changes(module, b_lines, dest):

    tmpfd, tmpfile = tempfile.mkstemp()
    with os.fdopen(tmpfd, 'wb') as f:
        f.writelines(b_lines)

    validate = module.params.get('validate', None)"
-------------------------------------------------------------------------
"with os.fdopen(tmpfd, 'wb') as f:
"
-------------------------------------------------------------------------
"Recom
PRs: 57328, 57367"
-------------------------------------------------------------------------
=========================================================================
"# If configure_by_dns is set to False, then delete the default dns set in the param else throw exception
if not proposed_object.get('configure_for_dns') and proposed_object.get('view') == 'default'\
        and ib_obj_type == NIOS_HOST_RECORD:
    del proposed_object['view']
elif not proposed_object.get('configure_for_dns') and proposed_object.get('view') != 'default'\
        and ib_obj_type == NIOS_HOST_RECORD:
    self.module.fail_json(msg='DNS Bypass is not allowed if DNS view is set other than \'default\'')

            # To check for existing A_record with same name with input A_record by IP
            if each.get('ipv4addr') and each.get('ipv4addr') == proposed_object.get('ipv4addr'):
                current_object = each
            # To check for existing Host_record with same name with input Host_record by IP
            elif each.get('ipv4addrs')[0].get('ipv4addr') and each.get('ipv4addrs')[0].get('ipv4addr')\
                    == proposed_object.get('ipv4addrs')[0].get('ipv4addr'):
            # Else set the current_object with input value
            else:
                current_object = obj_filter
                ref = None
    if current_object.get('_ref'):
        ref = current_object.pop('_ref')
"
-------------------------------------------------------------------------
"```python
if not proposed_object.get('configure_for_dns') and proposed_object.get('view') == 'default'\
        and ib_obj_type == NIOS_HOST_RECORD:
    del proposed_object['view']
elif not proposed_object.get('configure_for_dns') and proposed_object.get('view') != 'default'\
        and ib_obj_type == NIOS_HOST_RECORD:
    self.module.fail_json(msg='DNS Bypass is not allowed if DNS view is set other than \'default\'')
        
if each.get('ipv4addr') and each.get('ipv4addr') == proposed_object.get('ipv4addr'):
    current_object = each
elif each.get('ipv4addrs')[0].get('ipv4addr') and each.get('ipv4addrs')[0].get('ipv4addr')\
        == proposed_object.get('ipv4addrs')[0].get('ipv4addr'):
    current_object = each
else:
    current_object = obj_filter
    ref = None

if current_object.get('_ref'):
    ref = current_object.pop('_ref')
```"
-------------------------------------------------------------------------
"# If configure_by_dns is set to False, then delete the default dns set in the param else throw exception
if not proposed_object.get('configure_for_dns') and proposed_object.get('view') == 'default'\
        and ib_obj_type == NIOS_HOST_RECORD:
    del proposed_object['view']
elif not proposed_object.get('configure_for_dns') and proposed_object.get('view') != 'default'\
        and ib_obj_type == NIOS_HOST_RECORD:
    self.module.fail_json(msg='DNS Bypass is not allowed if DNS view is set other than \'default\'')

            # To check for existing A_record with same name with input A_record by IP
            if each.get('ipv4addr') and each.get('ipv4addr') == proposed_object.get('ipv4addr'):
                current_object = each
            # To check for existing Host_record with same name with input Host_record by IP
            elif each.get('ipv4addrs')[0].get('ipv4addr') and each.get('ipv4addrs')[0].get('ipv4addr')\
                    == proposed_object.get('ipv4addrs')[0].get('ipv4addr'):
            # Else set the current_object with input value
            else:
                current_object = obj_filter
                ref = None
    if current_object.get('_ref'):
        ref = current_object.pop('_ref')
"
-------------------------------------------------------------------------
"Recom
PRs: 57221, 57347"
-------------------------------------------------------------------------
=========================================================================
"- ""Note that docker CLI also sets C(network_mode) to the name of the first network
   added if C(--network) is specified. For more compatibility with docker CLI, you
   explicitly have to set C(network_mode) to the name of the first network you're
   adding.""
"
-------------------------------------------------------------------------
"""Note: The Docker CLI automatically assigns the network mode to the name of the first network added when the --network flag is used. To ensure compatibility with the Docker CLI, you must explicitly set the network mode to the name of the first network being added."""
-------------------------------------------------------------------------
"- ""Note that docker CLI also sets C(network_mode) to the name of the first network
   added if C(--network) is specified. For more compatibility with docker CLI, you
   explicitly have to set C(network_mode) to the name of the first network you're
   adding.""
"
-------------------------------------------------------------------------
"Recom
PRs: 56971, 57290"
-------------------------------------------------------------------------
=========================================================================
"if key in member_elements and member_spec[key] is not None:
"
-------------------------------------------------------------------------
if key in member_elements and member_spec[key] is not None:
-------------------------------------------------------------------------
"if key in member_elements and member_spec[key] is not None:
"
-------------------------------------------------------------------------
"Recom
PRs: 56045, 57218"
-------------------------------------------------------------------------
=========================================================================
"- ha_ip_address: 192.168.1.70
  mgmt_lan: 192.168.1.80
- ha_ip_address: 192.168.1.71
  mgmt_lan: 192.168.1.81
"
-------------------------------------------------------------------------
"EXAMPLES = '''
     ha_ip_address: 192.168.1.70
     mgmt_lan: 192.168.1.80
   - ha_ip_address: 192.168.1.71
     mgmt_lan: 192.168.1.81
'''"
-------------------------------------------------------------------------
"- ha_ip_address: 192.168.1.70
  mgmt_lan: 192.168.1.80
- ha_ip_address: 192.168.1.71
  mgmt_lan: 192.168.1.81
"
-------------------------------------------------------------------------
"Recom
PRs: 56045, 57218"
-------------------------------------------------------------------------
=========================================================================
"- Name of the queue
"
-------------------------------------------------------------------------
"```python
options:
  name:
    description: Name of the queue
    required: true
  state:
    description:
```"
-------------------------------------------------------------------------
"- Name of the queue
"
-------------------------------------------------------------------------
"Recom
PRs: 56912, 57161"
-------------------------------------------------------------------------
=========================================================================
"extract = re.search(r'Logging: (on|off)(?: \(([a-z])\))?', pre_state)
        if current_on_off_value == ""off"":
            changed = True
        elif value != ""on"" and value != current_level:
"
-------------------------------------------------------------------------
"```python
import re
from __future__ import print_function, absolute_import
from operator import itemgetter
from ansible.module_utils.basic import AnsibleModule

def main():
    execute(cmd + [['-f'], [states[value]])

    elif command == 'logging':
        if extract:
            current_level = extract.group(2)
            current_on_off_value = extract.group(1)
            if current_on_off_value == ""off"":
                changed = True
            elif value != ""on"" and value != current_level:
                changed = True
```"
-------------------------------------------------------------------------
"extract = re.search(r'Logging: (on|off)(?: \(([a-z])\))?', pre_state)
        if current_on_off_value == ""off"":
            changed = True
        elif value != ""on"" and value != current_level:
"
-------------------------------------------------------------------------
"Recom
PRs: 56678, 57087"
-------------------------------------------------------------------------
=========================================================================
"self.nocache = build.get('nocache', False)
self.rm = build.get('rm', True)
"
-------------------------------------------------------------------------
"```python
self.nocache = build.get('nocache', False)
self.rm = build.get('rm', True)
```"
-------------------------------------------------------------------------
"self.nocache = build.get('nocache', False)
self.rm = build.get('rm', True)
"
-------------------------------------------------------------------------
"Recom
PRs: 56610, 57085"
-------------------------------------------------------------------------
=========================================================================
"if client.module.params['build'].get(build_option, default_value) != default_value:
"
-------------------------------------------------------------------------
"if client.module.params['build'].get(build_option, default_value) != default_value:"
-------------------------------------------------------------------------
"if client.module.params['build'].get(build_option, default_value) != default_value:
client.fail('If ""source"" is set to ""build"", the ""build.path"" option must be specified.')
"
-------------------------------------------------------------------------
"Recom
PRs: 56610, 57085"
-------------------------------------------------------------------------
=========================================================================
"network_config[network['name']] = self.client.create_endpoint_config(**params)
"
-------------------------------------------------------------------------
"```python
network_config[network['name']] = self.client.create_endpoint_config(**params)
```"
-------------------------------------------------------------------------
"network_config[network['name']] = self.client.create_endpoint_config(**params)
"
-------------------------------------------------------------------------
"Recom
PRs: 56687, 57083"
-------------------------------------------------------------------------
=========================================================================
"supports_check_mode=True,
"
-------------------------------------------------------------------------
"```python
module = AnsibleModule(
    argument_spec=argument_spec,
    mutually_exclusive=[
        ['hosted_zone_method', 'health_check_method'],
    ],
    supports_check_mode=True,
)
```"
-------------------------------------------------------------------------
"supports_check_mode=True,
"
-------------------------------------------------------------------------
"Recom
PRs: 56900, 57045"
-------------------------------------------------------------------------
=========================================================================
"vnic_type=dict(default=None,
"
-------------------------------------------------------------------------
"```python
vnic_type=dict(default=None,
```"
-------------------------------------------------------------------------
"vnic_type=dict(default=None,
"
-------------------------------------------------------------------------
"Recom
PRs: 55526, 57039"
-------------------------------------------------------------------------
=========================================================================
"# Neutron API accept 'binding:vnic_type' as an argument
# for the port type.
module.params['binding:vnic_type'] = module.params['vnic_type']
module.params.pop('vnic_type', None)
"
-------------------------------------------------------------------------
"```python
module.params['binding:vnic_type'] = module.params['vnic_type']
module.params.pop('vnic_type', None)
```"
-------------------------------------------------------------------------
"# Neutron API accept 'binding:vnic_type' as an argument
# for the port type.
module.params['binding:vnic_type'] = module.params['vnic_type']
module.params.pop('vnic_type', None)
"
-------------------------------------------------------------------------
"Recom
PRs: 55526, 57039"
-------------------------------------------------------------------------
=========================================================================
"def normalize_ipam_config_key(key):
""""""Normalizes IPAM config keys returned by Docker API to match Ansible keys

:param key: Docker API key
:type key: str
:return Ansible module key
:rtype str
""""""
special_cases = {
    'AuxiliaryAddresses': 'aux_addresses'
}
return special_cases.get(key, key.lower())


"
-------------------------------------------------------------------------
"```python
def normalize_ipam_config_key(key):
    """"""Normalizes IPAM config keys returned by Docker API to match Ansible keys
    
    :param key: Docker API key
    :type key: str
    :return Ansible module key
    :rtype str
    """"""
    special_cases = {
        'AuxiliaryAddresses': 'aux_addresses'
    }
    return special_cases.get(key, key.lower())
```"
-------------------------------------------------------------------------
"def normalize_ipam_config_key(key):
""""""Normalizes IPAM config keys returned by Docker API to match Ansible keys

:param key: Docker API key
:type key: str
:return Ansible module key
:rtype str
""""""
special_cases = {
    'AuxiliaryAddresses': 'aux_addresses'
}
return special_cases.get(key, key.lower())


"
-------------------------------------------------------------------------
"Recom
PRs: 56901, 56972"
-------------------------------------------------------------------------
=========================================================================
"if key == normalize_ipam_config_key(net_key):
"
-------------------------------------------------------------------------
if key == normalize_ipam_config_key(net_key):
-------------------------------------------------------------------------
"if key == normalize_ipam_config_key(net_key):
"
-------------------------------------------------------------------------
"Recom
PRs: 56901, 56972"
-------------------------------------------------------------------------
=========================================================================
"if docker_version == u'dev':
    display.warning(u'Docker version number is ""dev"". Will assume latest version.')
if docker_version != u'dev' and LooseVersion(docker_version) < LooseVersion(u'1.3'):
"
-------------------------------------------------------------------------
"```python
if docker_version == u'dev':
    display.warning(u'Docker version number is ""dev"". Will assume latest version.')
if docker_version != u'dev' and LooseVersion(docker_version) < LooseVersion(u'1.3'):
    raise AnsibleError('docker connection type requires docker 1.3 or higher')
```"
-------------------------------------------------------------------------
"if docker_version == u'dev':
    display.warning(u'Docker version number is ""dev"". Will assume latest version.')
if docker_version != u'dev' and LooseVersion(docker_version) < LooseVersion(u'1.3'):
"
-------------------------------------------------------------------------
"Recom
PRs: 56947, 56970"
-------------------------------------------------------------------------
=========================================================================
"if docker_version == u'dev' or LooseVersion(docker_version) >= LooseVersion(u'1.7'):
"
-------------------------------------------------------------------------
"```python
if docker_version == 'dev' or LooseVersion(docker_version) >= LooseVersion('1.7'):
```"
-------------------------------------------------------------------------
"if docker_version == u'dev' or LooseVersion(docker_version) >= LooseVersion(u'1.7'):
"
-------------------------------------------------------------------------
"Recom
PRs: 56947, 56970"
-------------------------------------------------------------------------
=========================================================================
"info = dict(url=url, status=-1)
"
-------------------------------------------------------------------------
"info = {'url': url, 'status': -1}"
-------------------------------------------------------------------------
"info = dict(url=url, status=-1)
"
-------------------------------------------------------------------------
"Recom
PRs: 56240, 56853"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg='%s. You can also install python-ssl from EPEL' % to_native(e), **info)
module.fail_json(msg='%s' % to_native(e), **info)
le.fail_json(msg=to_native(e), **info)
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg='%s' % to_native(e))
module.fail_json(msg=to_native(e))
le.fail_json(msg=to_native(e))
```"
-------------------------------------------------------------------------
"module.fail_json(msg='%s. You can also install python-ssl from EPEL' % to_native(e), **info)
module.fail_json(msg='%s' % to_native(e), **info)
le.fail_json(msg=to_native(e), **info)
"
-------------------------------------------------------------------------
"Recom
PRs: 56240, 56853"
-------------------------------------------------------------------------
=========================================================================
"returned: on success
"
-------------------------------------------------------------------------
"RETURN = r'''
 # The return information includes all the HTTP headers in lower-case.
 elapsed:
   description: The number of seconds that elapsed while performing the download
   type: int
   sample: 23
 msg: on success
'''"
-------------------------------------------------------------------------
"returned: on success
"
-------------------------------------------------------------------------
"Recom
PRs: 56240, 56853"
-------------------------------------------------------------------------
=========================================================================
"returned: on success
"
-------------------------------------------------------------------------
"Adapted context:
```yaml
msg:
   sample: OK (unknown bytes)
 redirected:
   description: Whether the request was redirected
   type: bool
   sample: false
 status:
   description: Whether the request was successful
   type: bool
   sample: true
Returned on success
```"
-------------------------------------------------------------------------
"returned: on success
"
-------------------------------------------------------------------------
"Recom
PRs: 56240, 56853"
-------------------------------------------------------------------------
=========================================================================
"assert'http://ansible.com/' == excinfo.value.kwargs['url']
assert excinfo.value.kwargs['status'] == -1
"
-------------------------------------------------------------------------
"assert 'http://ansible.com/' == excinfo.value.kwargs['url']
assert excinfo.value.kwargs['status'] == -1"
-------------------------------------------------------------------------
"assert'http://ansible.com/' == excinfo.value.kwargs['url']
assert excinfo.value.kwargs['status'] == -1
"
-------------------------------------------------------------------------
"Recom
PRs: 56240, 56853"
-------------------------------------------------------------------------
=========================================================================
"assert'http://ansible.com/' == excinfo.value.kwargs['url']
assert excinfo.value.kwargs['status'] == -1
assert'http://ansible.com/' == excinfo.value.kwargs['url']
assert excinfo.value.kwargs['status'] == -1
"
-------------------------------------------------------------------------
"```python
def test_fetch_url_connectionerror(open_url_mock, fake_ansible_module):
    fetch_url(fake_ansible_module, 'http://ansible.com/')

    assert 'http://ansible.com/' == excinfo.value.kwargs['url']
    assert excinfo.value.kwargs['status'] == -1

    open_url_mock.side_effect = ValueError('TESTS')
    with pytest.raises(FailJson) as excinfo:
        fetch_url(fake_ansible_module, 'http://ansible.com/')

    assert 'http://ansible.com/' == excinfo.value.kwargs['url']
    assert excinfo.value.kwargs['status'] == -1
```"
-------------------------------------------------------------------------
"assert'http://ansible.com/' == excinfo.value.kwargs['url']
assert excinfo.value.kwargs['status'] == -1
assert'http://ansible.com/' == excinfo.value.kwargs['url']
assert excinfo.value.kwargs['status'] == -1
"
-------------------------------------------------------------------------
"Recom
PRs: 56240, 56853"
-------------------------------------------------------------------------
=========================================================================
"# In the example below you need to generate certificates previously.
"
-------------------------------------------------------------------------
# In the example below certificates must be generated beforehand.
-------------------------------------------------------------------------
"# In the example below you need to generate certificates previously.
"
-------------------------------------------------------------------------
"Recom
PRs: 56608, 56842"
-------------------------------------------------------------------------
=========================================================================
"crypto_utils.load_privatekey(self.privatekey_path,
"
-------------------------------------------------------------------------
crypto_utils.load_privatekey(self.privatekey_path)
-------------------------------------------------------------------------
"crypto_utils.load_privatekey(self.privatekey_path,
"
-------------------------------------------------------------------------
"Recom
PRs: 56808, 56821"
-------------------------------------------------------------------------
=========================================================================
"self.filter_string = '&'.join(['%s=%s' % (k, v) for (k, v) in accepted_params.items()])
"
-------------------------------------------------------------------------
"self.filter_string = '&'.join(['%s=%s' % (k, v) for (k, v) in params.items()])"
-------------------------------------------------------------------------
"self.filter_string = '&'.join(['%s=%s' % (k, v) for (k, v) in accepted_params.items()])
"
-------------------------------------------------------------------------
"Recom
PRs: 56783, 56784"
-------------------------------------------------------------------------
=========================================================================
"
- name: How many days until cert expires
debug:
  msg: ""cert expires in: {{ expire_days }} days.""
vars:
  expire_days: ""{{ (( cert.not_after | to_datetime('%Y%m%d%H%M%SZ')) - (ansible_date_time.iso8601 | to_datetime('%Y-%m-%dT%H:%M:%SZ')) ).days }}""
"
-------------------------------------------------------------------------
"```python
- name: How many days until cert expires
  debug:
    msg: ""cert expires in: {{ expire_days }} days.""
  vars:
    expire_days: ""{{ (( cert.not_after | to_datetime('%Y%m%d%H%M%SZ')) - (ansible_date_time.iso8601 | to_datetime('%Y-%m-%dT%H:%M:%SZ')) ).days }}""
```"
-------------------------------------------------------------------------
"
- name: How many days until cert expires
debug:
  msg: ""cert expires in: {{ expire_days }} days.""
vars:
  expire_days: ""{{ (( cert.not_after | to_datetime('%Y%m%d%H%M%SZ')) - (ansible_date_time.iso8601 | to_datetime('%Y-%m-%dT%H:%M:%SZ')) ).days }}""
"
-------------------------------------------------------------------------
"Recom
PRs: 56594, 56758"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_native

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils._text import to_native
try:
    from __future__ import print_function
except ImportError:
    HAS_PSYCOPG2 = False

class LibraryError(Exception):
    pass
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native

"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"

def connect_to_db(module, kw, autocommit=False):
try:
    db_connection = psycopg2.connect(**kw)
    if autocommit:
        if psycopg2.__version__ >= '2.4.2':
            db_connection.set_session(autocommit=True)
        else:
            db_connection.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)

except TypeError as e:
    if 'sslrootcert' in e.args[0]:
        module.fail_json(msg='Postgresql server must be at least '
                             'version 8.4 to support sslrootcert')

    module.fail_json(msg=""unable to connect to database: %s"" % to_native(e))

except Exception as e:
    module.fail_json(msg=""unable to connect to database: %s"" % to_native(e))

return db_connection


get_pg_version(cursor):
cursor.execute(""select current_setting('server_version_num')"")
return int(cursor.fetchone()[0])
"
-------------------------------------------------------------------------
"```python
def connect_to_db(module, kw, autocommit=False):
    try:
        db_connection = psycopg2.connect(**kw)
        if autocommit:
            if psycopg2.__version__ >= '2.4.2':
                db_connection.set_session(autocommit=True)
            else:
                db_connection.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)

    except TypeError as e:
        if 'sslrootcert' in e.args[0]:
            module.fail_json(msg='Postgresql server must be at least '
                             'version 8.4 to support sslrootcert')

        module.fail_json(msg=""unable to connect to database: %s"" % to_native(e))

    except Exception as e:
        module.fail_json(msg=""unable to connect to database: %s"" % to_native(e))

    return db_connection


def get_pg_version(cursor):
    cursor.execute(""select current_setting('server_version_num')"")
    return int(cursor.fetchone()[0])
```"
-------------------------------------------------------------------------
"

def connect_to_db(module, kw, autocommit=False):
try:
    db_connection = psycopg2.connect(**kw)
    if autocommit:
        if psycopg2.__version__ >= '2.4.2':
            db_connection.set_session(autocommit=True)
        else:
            db_connection.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)

except TypeError as e:
    if 'sslrootcert' in e.args[0]:
        module.fail_json(msg='Postgresql server must be at least '
                             'version 8.4 to support sslrootcert')

    module.fail_json(msg=""unable to connect to database: %s"" % to_native(e))

except Exception as e:
    module.fail_json(msg=""unable to connect to database: %s"" % to_native(e))

return db_connection


get_pg_version(cursor):
cursor.execute(""select current_setting('server_version_num')"")
return int(cursor.fetchone()[0])
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, kw, autocommit=True)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
"
-------------------------------------------------------------------------
"```python
db_connection = connect_to_db(module, kw, autocommit=True)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
```"
-------------------------------------------------------------------------
"db_connection = connect_to_db(module, kw, autocommit=True)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, kw, autocommit=True)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
"
-------------------------------------------------------------------------
"```python
db_connection = connect_to_db(module, kw, autocommit=True)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
```"
-------------------------------------------------------------------------
"db_connection = connect_to_db(module, kw, autocommit=True)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, kw, autocommit=False)
cursor = db_connection.cursor()
"
-------------------------------------------------------------------------
"```python
db_connection = connect_to_db(module, kw)
cursor = db_connection.cursor()
```"
-------------------------------------------------------------------------
"db_connection = connect_to_db(module, kw, autocommit=False)
cursor = db_connection.cursor()
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"except ImportError:
    HAS_PSYCOPG2 = False

from ansible.module_utils.basic import AnsibleModule, missing_required_lib
from ansible.module_utils.database import SQLParseError, pg_quote_identifier
from ansible.module_utils.six import iteritems
from ansible.module_utils._text import to_native
from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, kw, autocommit=True)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
"
-------------------------------------------------------------------------
"```python
db_connection = connect_to_db(module, kw, autocommit=True)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
```"
-------------------------------------------------------------------------
"db_connection = connect_to_db(module, kw, autocommit=True)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.postgres import connect_to_db, get_pg_version, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, get_pg_version, postgres_common_argument_spec"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, get_pg_version, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"ver = get_pg_version(cursor)
"
-------------------------------------------------------------------------
"```python
ver = get_pg_version(cursor)
```"
-------------------------------------------------------------------------
"ver = get_pg_version(cursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.postgres import connect_to_db, get_pg_version, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, get_pg_version, postgres_common_argument_spec"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, get_pg_version, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"db_connection = connect_to_db(module, kw, autocommit=False)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
"
-------------------------------------------------------------------------
"```python
db_connection = connect_to_db(module, kw, autocommit=False)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
```"
-------------------------------------------------------------------------
"db_connection = connect_to_db(module, kw, autocommit=False)
cursor = db_connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"except ImportError:
    from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec"
-------------------------------------------------------------------------
"from ansible.module_utils.postgres import connect_to_db, postgres_common_argument_spec
"
-------------------------------------------------------------------------
"Recom
PRs: 55514, 56686"
-------------------------------------------------------------------------
=========================================================================
"pkg_dep_re = re.compile(r'(^[a-zA-Z][a-zA-Z0-9_-])(==|[><]=?)?([0-9.])?$')
"
-------------------------------------------------------------------------
"```python
pkg_dep_re = re.compile(r'(^[a-zA-Z][a-zA-Z0-9_-]+)(==|[><]=?)?([0-9.]+)?$')
```"
-------------------------------------------------------------------------
"pkg_dep_re = re.compile(r'(^[a-zA-Z][a-zA-Z0-9_-])(==|[><]=?)?([0-9.])?$')
"
-------------------------------------------------------------------------
"Recom
PRs: 56166, 56683"
-------------------------------------------------------------------------
=========================================================================
"ansible.inventory_path = ""./provision/inventory/vagrant.py""
"
-------------------------------------------------------------------------
"ansible.inventory_path = ""./provision/inventory/vagrant.py"""
-------------------------------------------------------------------------
"ansible.inventory_path = ""./provision/inventory/vagrant.py""
"
-------------------------------------------------------------------------
"Recom
PRs: 56568, 56676"
-------------------------------------------------------------------------
=========================================================================
"- A list of filter value pairs. Available filters are listed here U(https://cloud.google.com/sdk/gcloud/reference/topic/filters).
"
-------------------------------------------------------------------------
A list of filter value pairs. Available filters are listed [here](https://cloud.google.com/sdk/gcloud/reference/topic/filters).
-------------------------------------------------------------------------
"- A list of filter value pairs. Available filters are listed here U(https://cloud.google.com/sdk/gcloud/reference/topic/filters).
"
-------------------------------------------------------------------------
"Recom
PRs: 56581, 56670"
-------------------------------------------------------------------------
=========================================================================
"desc=""View ansible configuration."",
"
-------------------------------------------------------------------------
"common.add_argument('--view',
                      dest='view',
                      action='store_true',
                      help=""View ansible configuration."")"
-------------------------------------------------------------------------
"desc=""View ansible configuration."",
"
-------------------------------------------------------------------------
"Recom
PRs: 56355, 56652"
-------------------------------------------------------------------------
=========================================================================
"desc=""View ansible configuration."",
"
-------------------------------------------------------------------------
"```python
common.add_argument('--view', action='store_true', help='View ansible configuration.', dest='view')
```"
-------------------------------------------------------------------------
"desc=""View ansible configuration."",
"
-------------------------------------------------------------------------
"Recom
PRs: 56355, 56651"
-------------------------------------------------------------------------
=========================================================================
"import json
"
-------------------------------------------------------------------------
"```python
import json
```"
-------------------------------------------------------------------------
"import json
"
-------------------------------------------------------------------------
"Recom
PRs: 56596, 56606"
-------------------------------------------------------------------------
=========================================================================
"if 'tojson' not in env.filters:
    # Jinja < 2.9
    env.filters['tojson'] = json.dumps

"
-------------------------------------------------------------------------
"```python
if 'tojson' not in env.filters:
    # Jinja < 2.9
    env.filters['tojson'] = json.dumps
```"
-------------------------------------------------------------------------
"if 'tojson' not in env.filters:
    # Jinja < 2.9
    env.filters['tojson'] = json.dumps

"
-------------------------------------------------------------------------
"Recom
PRs: 56596, 56606"
-------------------------------------------------------------------------
=========================================================================
"if to_text(out, errors='surrogate_then_replace').strip().endswith('#'):
"
-------------------------------------------------------------------------
"```python
if ansible.module_utils._text.to_text(out, errors='surrogate_then_replace').strip().endswith('#'):
```"
-------------------------------------------------------------------------
"
if to_text(out, errors='surrogate_then_replace').strip().endswith('#'):
    conn.send_command('exit discard')
"
-------------------------------------------------------------------------
"Recom
PRs: 56389, 56401"
-------------------------------------------------------------------------
=========================================================================
"if to_text(self._connection.get_prompt(), errors='surrogate_or_strict').strip().endswith('#'):
    self.discard_changes()
"
-------------------------------------------------------------------------
"```python
if to_text(self._connection.get_prompt(), errors='surrogate_or_strict').strip().endswith('#'):
    self.discard_changes()
```"
-------------------------------------------------------------------------
"if to_text(self._connection.get_prompt(), errors='surrogate_or_strict').strip().endswith('#'):
    self.discard_changes()
"
-------------------------------------------------------------------------
"Recom
PRs: 56389, 56401"
-------------------------------------------------------------------------
=========================================================================
"if to_text(out, errors='surrogate_then_replace').strip().endswith('#'):
"
-------------------------------------------------------------------------
"if to_text(out, errors='surrogate_then_replace').strip().endswith('#'):"
-------------------------------------------------------------------------
"if to_text(out, errors='surrogate_then_replace').strip().endswith('#'):
    conn.send_command('exit discard')
"
-------------------------------------------------------------------------
"Recom
PRs: 56389, 56399"
-------------------------------------------------------------------------
=========================================================================
"if to_text(self._connection.get_prompt(), errors='surrogate_or_strict').strip().endswith('#'):
    self.discard_changes()
"
-------------------------------------------------------------------------
"```python
if to_text(self._connection.get_prompt(), errors='surrogate_or_strict').strip().endswith('#'):
    self.discard_changes()
```"
-------------------------------------------------------------------------
"if to_text(self._connection.get_prompt(), errors='surrogate_or_strict').strip().endswith('#'):
    self.discard_changes()
"
-------------------------------------------------------------------------
"Recom
PRs: 56389, 56399"
-------------------------------------------------------------------------
=========================================================================
"Some parameters in ib_spec are passed as a list in order to pass the validation for elements.
In this function, they are converted to dictionary.
member_elements = ['vip_setting', 'ipv6_setting', 'lan2_port_setting', 'mgmt_port_setting',
                   'pre_provisioning', 'network_setting', 'v6_network_setting',
                   'ha_port_setting', 'lan_port_setting', 'lan2_physical_setting',
                   'lan_ha_port_setting', 'mgmt_network_setting', 'v6_mgmt_network_setting']
    if key in member_elements:
        member_spec[key] = member_spec[key][0]
"
-------------------------------------------------------------------------
"```python
def member_normalize(member_spec):
    '''
    It will remove any arguments that are set to None since WAPI will error on
    that condition.
    The remainder of the value validation is performed by WAPI
    '''
    member_elements = ['vip_setting', 'ipv6_setting', 'lan2_port_setting', 'mgmt_port_setting',
                       'pre_provisioning', 'network_setting', 'v6_network_setting',
                       'ha_port_setting', 'lan_port_setting', 'lan2_physical_setting',
                       'lan_ha_port_setting', 'mgmt_network_setting', 'v6_mgmt_network_setting']

    for key in member_spec.keys():
        if isinstance(member_spec[key], dict):
            member_spec[key] = member_normalize(member_spec[key])
        elif isinstance(member_spec[key], list):
            if key in member_elements:
                member_spec[key] = member_spec[key][0]
```"
-------------------------------------------------------------------------
"Some parameters in ib_spec are passed as a list in order to pass the validation for elements.
In this function, they are converted to dictionary.
member_elements = ['vip_setting', 'ipv6_setting', 'lan2_port_setting', 'mgmt_port_setting',
                   'pre_provisioning', 'network_setting', 'v6_network_setting',
                   'ha_port_setting', 'lan_port_setting', 'lan2_physical_setting',
                   'lan_ha_port_setting', 'mgmt_network_setting', 'v6_mgmt_network_setting']
    if key in member_elements:
        member_spec[key] = member_spec[key][0]
"
-------------------------------------------------------------------------
"Recom
PRs: 54419, 56387"
-------------------------------------------------------------------------
=========================================================================
"- address: 192.168.1.100
  subnet_mask: 255.255.255.0
  gateway: 192.168.1.1
"
-------------------------------------------------------------------------
"- host_name: member01.localdomain
  vip_setting:
    config_addr_type: IPV4
    platform: VNIOS
    comment: ""Created by Ansible""
  nios_member:
    address: 192.168.1.100
    subnet_mask: 255.255.255.0
    gateway: 192.168.1.1"
-------------------------------------------------------------------------
"- address: 192.168.1.100
  subnet_mask: 255.255.255.0
  gateway: 192.168.1.1
"
-------------------------------------------------------------------------
"Recom
PRs: 54419, 56387"
-------------------------------------------------------------------------
=========================================================================
"- address: 192.168.1.100
  subnet_mask: 255.255.255.0
  gateway: 192.168.1.1
"
-------------------------------------------------------------------------
"```yaml
nios_member:
  host_name: memberha.localdomain
  vip_setting:
    config_addr_type: IPV4
    platform: VNIOS
    enable_ha: true
  address: 192.168.1.100
  subnet_mask: 255.255.255.0
  gateway: 192.168.1.1
```"
-------------------------------------------------------------------------
"- address: 192.168.1.100
  subnet_mask: 255.255.255.0
  gateway: 192.168.1.1
"
-------------------------------------------------------------------------
"Recom
PRs: 54419, 56387"
-------------------------------------------------------------------------
=========================================================================
"- hardware_info:
   - hwmodel: IB-VM-820
     hwtype: IB-VNIOS
  licenses:
   - dns
   - dhcp
   - enterprise
   - vnios
"
-------------------------------------------------------------------------
"```yaml
hardware_info:
  - hwmodel: IB-VM-820
    hwtype: IB-VNIOS
licenses:
  - dns
  - dhcp
  - enterprise
  - vnios
```"
-------------------------------------------------------------------------
"- hardware_info:
   - hwmodel: IB-VM-820
     hwtype: IB-VNIOS
  licenses:
   - dns
   - dhcp
   - enterprise
   - vnios
"
-------------------------------------------------------------------------
"Recom
PRs: 54419, 56387"
-------------------------------------------------------------------------
=========================================================================
"network_setting=dict(type='list', elements='dict', options=ipv4_spec),
v6_network_setting=dict(type='list', elements='dict', options=ipv6_spec),
ha_port_setting=dict(type='list', elements='dict', options=port_spec),
lan_port_setting=dict(type='list', elements='dict', options=port_spec),
lan2_physical_setting=dict(type='list', elements='dict', options=port_spec),
lan_ha_port_setting=dict(type='list', elements='dict', options=ha_port_spec),
mgmt_network_setting=dict(type='list', elements='dict', options=ipv4_spec),
v6_mgmt_network_setting=dict(type='list', elements='dict', options=ipv6_spec),
"
-------------------------------------------------------------------------
"network_setting=dict(
        type='list',
        elements='dict',
        options=ipv4_spec
    ),
v6_network_setting=dict(
        type='list',
        elements='dict',
        options=ipv6_spec
    ),
ha_port_setting=dict(
        type='list',
        elements='dict',
        options=port_spec
    ),
lan_port_setting=dict(
        type='list',
        elements='dict',
        options=port_spec
    ),
lan2_physical_setting=dict(
        type='list',
        elements='dict',
        options=port_spec
    ),
lan_ha_port_setting=dict(
        type='list',
        elements='dict',
        options=ha_port_spec
    ),
mgmt_network_setting=dict(
        type='list',
        elements='dict',
        options=ipv4_spec
    ),
v6_mgmt_network_setting=dict(
        type='list',
        elements='dict',
        options=ipv6_spec
    )"
-------------------------------------------------------------------------
"network_setting=dict(type='list', elements='dict', options=ipv4_spec),
v6_network_setting=dict(type='list', elements='dict', options=ipv6_spec),
ha_port_setting=dict(type='list', elements='dict', options=port_spec),
lan_port_setting=dict(type='list', elements='dict', options=port_spec),
lan2_physical_setting=dict(type='list', elements='dict', options=port_spec),
lan_ha_port_setting=dict(type='list', elements='dict', options=ha_port_spec),
mgmt_network_setting=dict(type='list', elements='dict', options=ipv4_spec),
v6_mgmt_network_setting=dict(type='list', elements='dict', options=ipv6_spec),
"
-------------------------------------------------------------------------
"Recom
PRs: 54419, 56387"
-------------------------------------------------------------------------
=========================================================================
"vip_setting=dict(type='list', elements='dict', options=ipv4_spec),
ipv6_setting=dict(type='list', elements='dict', options=ipv6_spec),
lan2_port_setting=dict(type='list', elements='dict', options=lan2_port_spec),
mgmt_port_setting=dict(type='list', elements='dict', options=mgmt_port_spec),
pre_provisioning=dict(type='list', elements='dict', options=pre_prov_spec),
"
-------------------------------------------------------------------------
"```python
vip_setting=dict(type='list', elements='dict', options=ipv4_spec),
ipv6_setting=dict(type='list', elements='dict', options=ipv6_spec),
lan2_port_setting=dict(type='list', elements='dict', options=lan2_port_spec),
mgmt_port_setting=dict(type='list', elements='dict', options=mgmt_port_spec),
pre_provisioning=dict(type='list', elements='dict', options=pre_prov_spec),
```"
-------------------------------------------------------------------------
"vip_setting=dict(type='list', elements='dict', options=ipv4_spec),
ipv6_setting=dict(type='list', elements='dict', options=ipv6_spec),
lan2_port_setting=dict(type='list', elements='dict', options=lan2_port_spec),
mgmt_port_setting=dict(type='list', elements='dict', options=mgmt_port_spec),
pre_provisioning=dict(type='list', elements='dict', options=pre_prov_spec),
"
-------------------------------------------------------------------------
"Recom
PRs: 54419, 56387"
-------------------------------------------------------------------------
=========================================================================
"# reinstate restart_if_needed if ib_obj is none, meaning there's no existing nios_zone ref
if not ib_obj:
"
-------------------------------------------------------------------------
"```python
# reinstate restart_if_needed if ib_obj is none, meaning there's no existing nios_zone ref
if not ib_obj:
    ib_spec['restart_if_needed'] = temp
```"
-------------------------------------------------------------------------
"# reinstate restart_if_needed if ib_obj is none, meaning there's no existing nios_zone ref
if not ib_obj:
"
-------------------------------------------------------------------------
"Recom
PRs: 55595, 56347"
-------------------------------------------------------------------------
=========================================================================
"# reinstate restart_if_needed if ib_obj is none, meaning there's no existing nios_zone ref
if not ib_obj:
"
-------------------------------------------------------------------------
"```python
# reinstate restart_if_needed if ib_obj is none, meaning there's no existing nios_zone ref
if not ib_obj:
    ib_spec['restart_if_needed'] = temp
```"
-------------------------------------------------------------------------
"# reinstate restart_if_needed if ib_obj is none, meaning there's no existing nios_zone ref
if not ib_obj:
"
-------------------------------------------------------------------------
"Recom
PRs: 55595, 56346"
-------------------------------------------------------------------------
=========================================================================
"# To delete admin_distance param from have if not it want before comparing both fields
if not w.get('admin_distance') and h.get('admin_distance'):
    del h['admin_distance']
"
-------------------------------------------------------------------------
"```python
if not w.get('admin_distance') and h.get('admin_distance'):
    del h['admin_distance']
```"
-------------------------------------------------------------------------
"# To delete admin_distance param from have if not it want before comparing both fields
if not w.get('admin_distance') and h.get('admin_distance'):
    del h['admin_distance']
"
-------------------------------------------------------------------------
"Recom
PRs: 56292, 56294"
-------------------------------------------------------------------------
=========================================================================
"admin_distance=dict(type='str'),
"
-------------------------------------------------------------------------
"admin_distance=dict(type='str'),"
-------------------------------------------------------------------------
"admin_distance=dict(type='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 56292, 56294"
-------------------------------------------------------------------------
=========================================================================
"import fcntl
"
-------------------------------------------------------------------------
"```python
from ansible.compat import selectors
```"
-------------------------------------------------------------------------
"import fcntl
"
-------------------------------------------------------------------------
"Recom
PRs: 55816, 56278"
-------------------------------------------------------------------------
=========================================================================
"from ansible.compat import selectors
"
-------------------------------------------------------------------------
from ansible.compat import selectors
-------------------------------------------------------------------------
"from ansible.compat import selectors
"
-------------------------------------------------------------------------
"Recom
PRs: 55816, 56278"
-------------------------------------------------------------------------
=========================================================================
"p = subprocess.Popen(
    local_cmd,
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE,
)

if self.become and self.become.expect_prompt() and sudoable:
    display.debug(""handling privilege escalation"")
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) | os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) | os.O_NONBLOCK)

    selector = selectors.DefaultSelector()
    selector.register(p.stdout, selectors.EVENT_READ)
    selector.register(p.stderr, selectors.EVENT_READ)

    become_output = b''
    try:
        while not self.become.check_success(become_output) and not self.become.check_password_prompt(become_output):
            events = selector.select(self._play_context.timeout)
            if not events:
                stdout, stderr = p.communicate()
                raise AnsibleError('timeout waiting for privilege escalation password prompt:\n'  to_native(become_output))

            for key, event in events:
                if key.fileobj == p.stdout:
                    chunk = p.stdout.read()
                    break
                elif key.fileobj == p.stderr:
                    chunk = p.stderr.read()

            if not chunk:
                stdout, stderr = p.communicate()
                raise AnsibleError('privilege output closed while waiting for password prompt:\n'  to_native(become_output))
            become_output = chunk
    finally:
        selector.close()

    if not self.become.check_success(become_output):
        p.stdin.write(to_bytes(self._play_context.become_pass, errors='surrogate_or_strict')  b'\n')
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) & ~os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) & ~os.O_NONBLOCK)

display.debug(""getting output with communicate()"")
display.debug(""done communicating"")

display.debug(""done with docker.exec_command()"")
"
-------------------------------------------------------------------------
"```python
p = subprocess.Popen(
    local_cmd,
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE,
)

if self.become and self.become.expect_prompt() and sudoable:
    display.debug(""handling privilege escalation"")

    p_stdout_fd = p.stdout.fileno()
    fcntl.fcntl(p_stdout_fd, fcntl.F_SETFL, fcntl.fcntl(p_stdout_fd, fcntl.F_GETFL) | os.O_NONBLOCK)
    
    p_stderr_fd = p.stderr.fileno()
    fcntl.fcntl(p_stderr_fd, fcntl.F_SETFL, fcntl.fcntl(p_stderr_fd, fcntl.F_GETFL) | os.O_NONBLOCK)

    selector = selectors.DefaultSelector()
    selector.register(p.stdout, selectors.EVENT_READ)
    selector.register(p.stderr, selectors.EVENT_READ)

    become_output = b''
    try:
        while not self.become.check_success(become_output) and not self.become.check_password_prompt(become_output):
            events = selector.select(self._play_context.timeout)
            if not events:
                stdout, stderr = p.communicate()
                raise AnsibleError('timeout waiting for privilege escalation password prompt:\n' + to_native(become_output))

            for key, event in events:
                if key.fileobj == p.stdout:
                    chunk = p.stdout.read()
                    break
                elif key.fileobj == p.stderr:
                    chunk = p.stderr.read()

            if not chunk:
                stdout, stderr = p.communicate()
                raise AnsibleError('privilege output closed while waiting for password prompt:\n' + to_native(become_output))
            become_output = chunk
    finally:
        selector.close()

    if not self.become.check_success(become_output):
        p.stdin.write(to_bytes(self._play_context.become_pass, errors='surrogate_or_strict') + b'\n')
    
    fcntl.fcntl(p_stdout_fd, fcntl.F_SETFL, fcntl.fcntl(p_stdout_fd, fcntl.F_GETFL) & ~os.O_NONBLOCK)
    fcntl.fcntl(p_stderr_fd, fcntl.F_SETFL, fcntl.fcntl(p_stderr_fd, fcntl.F_GETFL) & ~os.O_NONBLOCK)

display.debug(""getting output with communicate()"")
display.debug(""done communicating"")

display.debug(""done with docker.exec_command()"")
```"
-------------------------------------------------------------------------
"p = subprocess.Popen(
    local_cmd,
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE,
)

if self._play_context.prompt and sudoable:
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) | os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) | os.O_NONBLOCK)
    selector = selectors.DefaultSelector()
    selector.register(p.stdout, selectors.EVENT_READ)
    selector.register(p.stderr, selectors.EVENT_READ)

    become_output = b''
    try:
        while not self.check_become_success(become_output) and not self.check_password_prompt(become_output):
            events = selector.select(self._play_context.timeout)
            if not events:
                stdout, stderr = p.communicate()
                raise AnsibleError('timeout waiting for privilege escalation password prompt:\n'  to_native(become_output))

            for key, event in events:
                if key.fileobj == p.stdout:
                    chunk = p.stdout.read()
                elif key.fileobj == p.stderr:
                    chunk = p.stderr.read()

            if not chunk:
                stdout, stderr = p.communicate()
                raise AnsibleError('privilege output closed while waiting for password prompt:\n'  to_native(become_output))
            become_output = chunk
    finally:
        selector.close()

    if not self.check_become_success(become_output):
        p.stdin.write(to_bytes(self._play_context.become_pass, errors='surrogate_or_strict')  b'\n')
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) & ~os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) & ~os.O_NONBLOCK)

display.debug(""getting output with communicate()"")
display.debug(""done communicating"")

display.debug(""done with docker.exec_command()"")
"
-------------------------------------------------------------------------
"Recom
PRs: 55816, 56278"
-------------------------------------------------------------------------
=========================================================================
"import fcntl
"
-------------------------------------------------------------------------
from ansible.compat import selectors
-------------------------------------------------------------------------
"import fcntl
"
-------------------------------------------------------------------------
"Recom
PRs: 55816, 56277"
-------------------------------------------------------------------------
=========================================================================
"from ansible.compat import selectors
"
-------------------------------------------------------------------------
from ansible.compat import selectors
-------------------------------------------------------------------------
"from ansible.compat import selectors
"
-------------------------------------------------------------------------
"Recom
PRs: 55816, 56277"
-------------------------------------------------------------------------
=========================================================================
"p = subprocess.Popen(
    local_cmd,
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE,
)

if self.become and self.become.expect_prompt() and sudoable:
    display.debug(""handling privilege escalation"")
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) | os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) | os.O_NONBLOCK)

    selector = selectors.DefaultSelector()
    selector.register(p.stdout, selectors.EVENT_READ)
    selector.register(p.stderr, selectors.EVENT_READ)

    become_output = b''
    try:
        while not self.become.check_success(become_output) and not self.become.check_password_prompt(become_output):
            events = selector.select(self._play_context.timeout)
            if not events:
                stdout, stderr = p.communicate()
                raise AnsibleError('timeout waiting for privilege escalation password prompt:\n'  to_native(become_output))

            for key, event in events:
                if key.fileobj == p.stdout:
                    chunk = p.stdout.read()
                    break
                elif key.fileobj == p.stderr:
                    chunk = p.stderr.read()

            if not chunk:
                stdout, stderr = p.communicate()
                raise AnsibleError('privilege output closed while waiting for password prompt:\n'  to_native(become_output))
            become_output = chunk
    finally:
        selector.close()

    if not self.become.check_success(become_output):
        p.stdin.write(to_bytes(self._play_context.become_pass, errors='surrogate_or_strict')  b'\n')
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) & ~os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) & ~os.O_NONBLOCK)

display.debug(""getting output with communicate()"")
display.debug(""done communicating"")

display.debug(""done with docker.exec_command()"")
"
-------------------------------------------------------------------------
"```python
p = subprocess.Popen(
    local_cmd,
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE,
)

if self.become and self.become.expect_prompt() and sudoable:
    display.debug(""handling privilege escalation"")
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) | os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) | os.O_NONBLOCK)

    selector = selectors.DefaultSelector()
    selector.register(p.stdout, selectors.EVENT_READ)
    selector.register(p.stderr, selectors.EVENT_READ)

    become_output = b''
    try:
        while not self.become.check_success(become_output) and not self.become.check_password_prompt(become_output):
            events = selector.select(self._play_context.timeout)
            if not events:
                stdout, stderr = p.communicate()
                raise AnsibleError('timeout waiting for privilege escalation password prompt:\n' + to_native(become_output))

            for key, event in events:
                if key.fileobj == p.stdout:
                    chunk = p.stdout.read()
                    break
                elif key.fileobj == p.stderr:
                    chunk = p.stderr.read()

            if not chunk:
                stdout, stderr = p.communicate()
                raise AnsibleError('privilege output closed while waiting for password prompt:\n' + to_native(become_output))
            become_output = chunk
    finally:
        selector.close()

    if not self.become.check_success(become_output):
        p.stdin.write(to_bytes(self._play_context.become_pass, errors='surrogate_or_strict') + b'\n')
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) & ~os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) & ~os.O_NONBLOCK)

display.debug(""getting output with communicate()"")
display.debug(""done communicating"")

display.debug(""done with docker.exec_command()"")
```"
-------------------------------------------------------------------------
"display.vvv(u""EXEC {0}"".format(to_text(local_cmd)), host=self._play_context.remote_addr)
display.debug(""opening command with Popen()"")

p = subprocess.Popen(
    local_cmd,
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE,
)
display.debug(""done running command with Popen()"")

if self.become and self.become.expect_prompt() and sudoable:
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) | os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) | os.O_NONBLOCK)
    selector = selectors.DefaultSelector()
    selector.register(p.stdout, selectors.EVENT_READ)
    selector.register(p.stderr, selectors.EVENT_READ)

    become_output = b''
    try:
        while not self.become.check_success(become_output) and not self.become.check_password_prompt(become_output):
            events = selector.select(self._play_context.timeout)
            if not events:
                stdout, stderr = p.communicate()
                raise AnsibleError('timeout waiting for privilege escalation password prompt:\n'  to_native(become_output))

            for key, event in events:
                if key.fileobj == p.stdout:
                    chunk = p.stdout.read()
                elif key.fileobj == p.stderr:
                    chunk = p.stderr.read()

            if not chunk:
                stdout, stderr = p.communicate()
                raise AnsibleError('privilege output closed while waiting for password prompt:\n'  to_native(become_output))
            become_output = chunk
    finally:
        selector.close()

    if not self.become.check_success(become_output):
        p.stdin.write(to_bytes(self._play_context.become_pass, errors='surrogate_or_strict')  b'\n')
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fcntl.fcntl(p.stdout, fcntl.F_GETFL) & ~os.O_NONBLOCK)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fcntl.fcntl(p.stderr, fcntl.F_GETFL) & ~os.O_NONBLOCK)

display.debug(""getting output with communicate()"")
display.debug(""done communicating"")

display.debug(""done with docker.exec_command()"")
"
-------------------------------------------------------------------------
"Recom
PRs: 55816, 56277"
-------------------------------------------------------------------------
=========================================================================
"- Wait until XenServer detects an IP address for the VM. If C(state) is set to C(absent), this parameter is ignored.
"
-------------------------------------------------------------------------
"```python
    if module.params['wait_for_ip_address'] and module.params['state'] != 'absent':
        # Code block to wait until XenServer detects an IP address for the VM
```"
-------------------------------------------------------------------------
"- Wait until XenServer detects an IP address for the VM. If C(state) is set to C(absent), this parameter is ignored.
"
-------------------------------------------------------------------------
"Recom
PRs: 55678, 56247"
-------------------------------------------------------------------------
=========================================================================
"if ""need_poweredoff"" in config_changes and vm_power_state_save != 'halted' and not self.module.params['force']:
    self.module.fail_json(msg=""VM reconfigure: VM has to be in powered off state to reconfigure but force was not specified!"")
if ""need_poweredoff"" in config_changes and vm_power_state_save != 'halted' and self.module.params['force']:
    self.set_power_state(""shutdownguest"")

"
-------------------------------------------------------------------------
"```python
if ""need_poweredoff"" in config_changes and vm_power_state_save != 'halted' and not self.module.params['force']:
    self.module.fail_json(msg=""VM reconfigure: VM has to be in powered off state to reconfigure but force was not specified!"")
if ""need_poweredoff"" in config_changes and vm_power_state_save != 'halted' and self.module.params['force']:
    self.set_power_state(""shutdownguest"")
```"
-------------------------------------------------------------------------
"if ""need_poweredoff"" in config_changes and vm_power_state_save != 'halted' and not self.module.params['force']:
    self.module.fail_json(msg=""VM reconfigure: VM has to be in powered off state to reconfigure but force was not specified!"")
if ""need_poweredoff"" in config_changes and vm_power_state_save != 'halted' and self.module.params['force']:
    self.set_power_state(""shutdownguest"")

"
-------------------------------------------------------------------------
"Recom
PRs: 55678, 56247"
-------------------------------------------------------------------------
=========================================================================
"vif_devices_allowed.remove(vif_device)
"
-------------------------------------------------------------------------
vif_devices_allowed.remove(vif_device)
-------------------------------------------------------------------------
"vif_devices_allowed.remove(vif_device)
"
-------------------------------------------------------------------------
"Recom
PRs: 55678, 56247"
-------------------------------------------------------------------------
=========================================================================
"if module.params['wait_for_ip_address'] and module.params['state'] != ""absent"":
"
-------------------------------------------------------------------------
"if module.params['wait_for_ip_address'] and module.params['state'] != ""absent"":
    vm.wait_for_ip_address()"
-------------------------------------------------------------------------
"if module.params['wait_for_ip_address'] and module.params['state'] != ""absent"":
"
-------------------------------------------------------------------------
"Recom
PRs: 55678, 56247"
-------------------------------------------------------------------------
=========================================================================
"def execute_show_command(command, module, check_rc=True):
body = run_commands(module, cmds, check_rc=check_rc)
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.network.nxos.nxos import nxos_argument_spec, check_arg
from ansible.module_utils.basic import AnsibleModule

def execute_show_command(command, module, cmds, check_rc=True):
    command += ' | json'
    cmds = [command]
    body = run_commands(module, cmds, check_rc=check_rc)
    return body
```"
-------------------------------------------------------------------------
"def execute_show_command(command, module, check_rc=True):
body = run_commands(module, cmds, check_rc=check_rc)
"
-------------------------------------------------------------------------
"Recom
PRs: 55609, 56214"
-------------------------------------------------------------------------
=========================================================================
"body = execute_show_command(command, module, check_rc=False)
if 'Structured output unsupported' in repr(body):
    # Some older versions raise 501 and return a string when no ACLs exist
    return {}, []

if body and body[0]:
    all_acl_body = body[0]['TABLE_ip_ipv6_mac']['ROW_ip_ipv6_mac']
"
-------------------------------------------------------------------------
"```python
body = execute_show_command(command, module, check_rc=False)
if 'Structured output unsupported' in repr(body):
    return {}, []

if body and body[0]:
    all_acl_body = body[0]['TABLE_ip_ipv6_mac']['ROW_ip_ipv6_mac']
```"
-------------------------------------------------------------------------
"body = execute_show_command(command, module, check_rc=False)
if 'Structured output unsupported' in repr(body):
    # Some older versions raise 501 and return a string when no ACLs exist
    return {}, []

if body and body[0]:
    all_acl_body = body[0]['TABLE_ip_ipv6_mac']['ROW_ip_ipv6_mac']
"
-------------------------------------------------------------------------
"Recom
PRs: 55609, 56214"
-------------------------------------------------------------------------
=========================================================================
"if acl and acl[0].get('acl') != 'no_entries':
"
-------------------------------------------------------------------------
"```python
if acl and acl[0].get('acl') != 'no_entries':
```"
-------------------------------------------------------------------------
"if acl and acl[0].get('acl') != 'no_entries':
"
-------------------------------------------------------------------------
"Recom
PRs: 55609, 56214"
-------------------------------------------------------------------------
=========================================================================
"tags = module.params.get('tags') or {}
name = module.params.get('name')
if name:
    tags['Name'] = name
changed |= manage_tags(match, tags, module.params.get('purge_tags', False), ec2)
"
-------------------------------------------------------------------------
"```python
tags = module.params.get('tags') or {}
name = module.params.get('name')
if name:
    tags['Name'] = name
changed |= manage_tags(match, tags, module.params.get('purge_tags', False), ec2, state)
```"
-------------------------------------------------------------------------
"tags = module.params.get('tags') or {}
name = module.params.get('name')
if name:
    tags['Name'] = name
changed |= manage_tags(match, tags, module.params.get('purge_tags', False), ec2)
"
-------------------------------------------------------------------------
"Recom
PRs: 55224, 56209"
-------------------------------------------------------------------------
=========================================================================
"None if passphrase is None else to_bytes(passphrase),
"
-------------------------------------------------------------------------
"```python
if passphrase is None:
    passphrase_bytes = None
else:
    passphrase_bytes = to_bytes(passphrase)
```"
-------------------------------------------------------------------------
"None if passphrase is None else to_bytes(passphrase),
"
-------------------------------------------------------------------------
"Recom
PRs: 56155, 56202"
-------------------------------------------------------------------------
=========================================================================
"from ansible.errors import AnsibleError
from ansible.plugins.action import ActionBase
class ActionModule(ActionBase):
"
-------------------------------------------------------------------------
"```python
import os
import sys
import time
import hashlib
import uuid
import re
import copy

from ansible.errors import AnsibleError
from ansible.plugins.action import ActionBase
from ansible.module_utils._text import to_text, to_bytes
from ansible.module_utils.connection import Connection
from ansible.module_utils.six.moves.urllib.parse import urlsplit
from ansible.utils.display import Display

display = Display()

class ActionModule(ActionBase):
    def run(self, tmp=None, task_vars=None):
        socket_path = None
```"
-------------------------------------------------------------------------
"from ansible.errors import AnsibleError
from ansible.plugins.action import ActionBase
class ActionModule(ActionBase):
"
-------------------------------------------------------------------------
"Recom
PRs: 56145, 56160"
-------------------------------------------------------------------------
=========================================================================
"src = self._task.args['src']
"
-------------------------------------------------------------------------
"```python
src = self._task.args['src']
```"
-------------------------------------------------------------------------
"src = self._task.args['src']
"
-------------------------------------------------------------------------
"Recom
PRs: 56145, 56160"
-------------------------------------------------------------------------
=========================================================================
"
def _get_working_path(self):
    cwd = self._loader.get_basedir()
    if self._task._role is not None:
        cwd = self._task._role._role_path
    return cwd

def _get_network_os(self, task_vars):
    if 'network_os' in self._task.args and self._task.args['network_os']:
        display.vvvv('Getting network OS from task argument')
        network_os = self._task.args['network_os']
    elif self._play_context.network_os:
        display.vvvv('Getting network OS from inventory')
        network_os = self._play_context.network_os
    elif 'network_os' in task_vars.get('ansible_facts', {}) and task_vars['ansible_facts']['network_os']:
        display.vvvv('Getting network OS from fact')
        network_os = task_vars['ansible_facts']['network_os']
    else:
        raise AnsibleError('ansible_network_os must be specified on this host')

    return network_os
"
-------------------------------------------------------------------------
"```python
import os
import ansible.plugins.action.network
from ansible.module_utils.six.moves.urllib.parse import urlsplit
from __future__ import absolute_import
import re
import ansible.module_utils._text
import ansible.module_utils.connection
import ansible.utils.display
import hashlib
import sys
import time
import uuid
import copy

def _get_working_path(self):
    cwd = self._loader.get_basedir()
    if self._task._role is not None:
        cwd = self._task._role._role_path
    return cwd

def _get_network_os(self, task_vars):
    if 'network_os' in self._task.args and self._task.args['network_os']:
        ansible.utils.display.vvvv('Getting network OS from task argument')
        network_os = self._task.args['network_os']
    elif self._play_context.network_os:
        ansible.utils.display.vvvv('Getting network OS from inventory')
        network_os = self._play_context.network_os
    elif 'network_os' in task_vars.get('ansible_facts', {}) and task_vars['ansible_facts']['network_os']:
        ansible.utils.display.vvvv('Getting network OS from fact')
        network_os = task_vars['ansible_facts']['network_os']
    else:
        raise ansible.errors.AnsibleError('ansible_network_os must be specified on this host')

    return network_os
```"
-------------------------------------------------------------------------
"
def _get_working_path(self):
    cwd = self._loader.get_basedir()
    if self._task._role is not None:
        cwd = self._task._role._role_path
    return cwd

def _get_network_os(self, task_vars):
    if 'network_os' in self._task.args and self._task.args['network_os']:
        display.vvvv('Getting network OS from task argument')
        network_os = self._task.args['network_os']
    elif self._play_context.network_os:
        display.vvvv('Getting network OS from inventory')
        network_os = self._play_context.network_os
    elif 'network_os' in task_vars.get('ansible_facts', {}) and task_vars['ansible_facts']['network_os']:
        display.vvvv('Getting network OS from fact')
        network_os = task_vars['ansible_facts']['network_os']
    else:
        raise AnsibleError('ansible_network_os must be specified on this host')

    return network_os
"
-------------------------------------------------------------------------
"Recom
PRs: 56145, 56160"
-------------------------------------------------------------------------
=========================================================================
"from ansible.errors import AnsibleError
from ansible.plugins.action import ActionBase
class ActionModule(ActionBase):
"
-------------------------------------------------------------------------
"```python
import hashlib
import sys
import re
import os

from ansible.module_utils._text import to_text, to_bytes
from ansible.module_utils.connection import Connection
from ansible.module_utils.six.moves.urllib.parse import urlsplit
from ansible.utils.display import Display
from ansible.errors import AnsibleError
from ansible.plugins.action import ActionBase

display = Display()

class ActionModule(ActionBase):
    def run(self, tmp=None, task_vars=None):
        changed = True
```"
-------------------------------------------------------------------------
"from ansible.errors import AnsibleError
from ansible.plugins.action import ActionBase
class ActionModule(ActionBase):
"
-------------------------------------------------------------------------
"Recom
PRs: 56145, 56160"
-------------------------------------------------------------------------
=========================================================================
"
def _get_working_path(self):
    cwd = self._loader.get_basedir()
    if self._task._role is not None:
        cwd = self._task._role._role_path
    return cwd

def _get_network_os(self, task_vars):
    if 'network_os' in self._task.args and self._task.args['network_os']:
        display.vvvv('Getting network OS from task argument')
        network_os = self._task.args['network_os']
    elif self._play_context.network_os:
        display.vvvv('Getting network OS from inventory')
        network_os = self._play_context.network_os
    elif 'network_os' in task_vars.get('ansible_facts', {}) and task_vars['ansible_facts']['network_os']:
        display.vvvv('Getting network OS from fact')
        network_os = task_vars['ansible_facts']['network_os']
    else:
        raise AnsibleError('ansible_network_os must be specified on this host')

    return network_os
"
-------------------------------------------------------------------------
"```python
import os
import hashlib
import ansible.utils.display as display
from ansible.errors import AnsibleError

def _get_working_path(self):
    cwd = self._loader.get_basedir()
    if self._task._role is not None:
        cwd = self._task._role._role_path
    return cwd

def _get_network_os(self, task_vars):
    if 'network_os' in self._task.args and self._task.args['network_os']:
        display.vvvv('Getting network OS from task argument')
        network_os = self._task.args['network_os']
    elif self._play_context.network_os:
        display.vvvv('Getting network OS from inventory')
        network_os = self._play_context.network_os
    elif 'network_os' in task_vars.get('ansible_facts', {}) and task_vars['ansible_facts']['network_os']:
        display.vvvv('Getting network OS from fact')
        network_os = task_vars['ansible_facts']['network_os']
    else:
        raise AnsibleError('ansible_network_os must be specified on this host')

    return network_os
```  "
-------------------------------------------------------------------------
"
def _get_working_path(self):
    cwd = self._loader.get_basedir()
    if self._task._role is not None:
        cwd = self._task._role._role_path
    return cwd

def _get_network_os(self, task_vars):
    if 'network_os' in self._task.args and self._task.args['network_os']:
        display.vvvv('Getting network OS from task argument')
        network_os = self._task.args['network_os']
    elif self._play_context.network_os:
        display.vvvv('Getting network OS from inventory')
        network_os = self._play_context.network_os
    elif 'network_os' in task_vars.get('ansible_facts', {}) and task_vars['ansible_facts']['network_os']:
        display.vvvv('Getting network OS from fact')
        network_os = task_vars['ansible_facts']['network_os']
    else:
        raise AnsibleError('ansible_network_os must be specified on this host')

    return network_os
"
-------------------------------------------------------------------------
"Recom
PRs: 56145, 56160"
-------------------------------------------------------------------------
=========================================================================
"oom_score_adj=dict(docker_api_version='1.22'),
"
-------------------------------------------------------------------------
oom_score_adj=dict(docker_api_version='1.22')
-------------------------------------------------------------------------
"oom_score_adj=dict(docker_api_version='1.22'),
"
-------------------------------------------------------------------------
"Recom
PRs: 56012, 56098"
-------------------------------------------------------------------------
=========================================================================
"oom_score_adj=dict(docker_api_version='1.22'),
"
-------------------------------------------------------------------------
oom_score_adj=dict(docker_api_version='1.22')
-------------------------------------------------------------------------
"oom_score_adj=dict(docker_api_version='1.22'),
"
-------------------------------------------------------------------------
"Recom
PRs: 56012, 56097"
-------------------------------------------------------------------------
=========================================================================
"- The cipher to encrypt the private key. (Valid values can be found by
  running `openssl list -cipher-algorithms` or `openssl list-cipher-algorithms`,
  depending on your OpenSSL version.)
"
-------------------------------------------------------------------------
"The cipher used to encrypt the private key. Valid values can be found by running `openssl list -cipher-algorithms` or `openssl list-cipher-algorithms`, depending on your OpenSSL version."
-------------------------------------------------------------------------
"- The cipher to encrypt the private key. (Valid values can be found by
  running `openssl list -cipher-algorithms` or `openssl list-cipher-algorithms`,
  depending on your OpenSSL version.)
"
-------------------------------------------------------------------------
"Recom
PRs: 55438, 56067"
-------------------------------------------------------------------------
=========================================================================
"- The cipher to encrypt the private key. (Valid values can be found by
  running `openssl list -cipher-algorithms` or `openssl list-cipher-algorithms`,
  depending on your OpenSSL version.)
"
-------------------------------------------------------------------------
"The cipher to encrypt the private key. (Valid values can be found by running `openssl list -cipher-algorithms` or `openssl list-cipher-algorithms`, depending on your OpenSSL version.)"
-------------------------------------------------------------------------
"- The cipher to encrypt the private key. (Valid values can be found by
  running `openssl list -cipher-algorithms` or `openssl list-cipher-algorithms`,
  depending on your OpenSSL version.)
"
-------------------------------------------------------------------------
"Recom
PRs: 55438, 56066"
-------------------------------------------------------------------------
=========================================================================
"self.diff_tracker.add('restarted', parameter=True, active=False)
container = self.container_restart(container.Id)
"
-------------------------------------------------------------------------
"```python
self.diff_tracker.add('restarted', parameter=True, active=False)
container = self.container_restart(container.Id)
```"
-------------------------------------------------------------------------
"self.diff_tracker.add('restarted', parameter=True, active=False)
container = self.container_restart(container.Id)
"
-------------------------------------------------------------------------
"Recom
PRs: 55894, 56052"
-------------------------------------------------------------------------
=========================================================================
"def container_restart(self, container_id):
    self.results['actions'].append(dict(restarted=container_id, timeout=self.parameters.stop_timeout))
    self.results['changed'] = True
    if not self.check_mode:
        try:
            if self.parameters.stop_timeout:
                response = self.client.restart(container_id, timeout=self.parameters.stop_timeout)
            else:
                response = self.client.restart(container_id)
        except Exception as exc:
            self.fail(""Error restarting container %s: %s"" % (container_id, str(exc)))
    return self._get_container(container_id)

"
-------------------------------------------------------------------------
"```python
import docker.errors

def container_restart(self, container_id):
    self.results['actions'].append(dict(restarted=container_id, timeout=self.parameters.stop_timeout))
    self.results['changed'] = True
    if not self.check_mode:
        try:
            if self.parameters.stop_timeout:
                response = self.client.restart(container_id, timeout=self.parameters.stop_timeout)
            else:
                response = self.client.restart(container_id)
        except docker.errors.APIError as exc:
            self.fail(""Error restarting container %s: %s"" % (container_id, str(exc)))
    return self._get_container(container_id)
```"
-------------------------------------------------------------------------
"def container_restart(self, container_id):
    self.results['actions'].append(dict(restarted=container_id, timeout=self.parameters.stop_timeout))
    self.results['changed'] = True
    if not self.check_mode:
        try:
            if self.parameters.stop_timeout:
                response = self.client.restart(container_id, timeout=self.parameters.stop_timeout)
            else:
                response = self.client.restart(container_id)
        except Exception as exc:
            self.fail(""Error restarting container %s: %s"" % (container_id, str(exc)))
    return self._get_container(container_id)

"
-------------------------------------------------------------------------
"Recom
PRs: 55894, 56052"
-------------------------------------------------------------------------
=========================================================================
"append_plugin_type = self.subdir.replace('_plugins', '')

if append_plugin_type == 'library':
    append_plugin_type = 'modules'

package = '.plugins.{0}'.format(append_plugin_type)
"
-------------------------------------------------------------------------
"```python
append_plugin_type = self.subdir.replace('_plugins', '')

if append_plugin_type == 'library':
    append_plugin_type = 'modules'

package = '.plugins.{0}'.format(append_plugin_type)
```"
-------------------------------------------------------------------------
"append_plugin_type = self.subdir.replace('_plugins', '')

if append_plugin_type == 'library':
    append_plugin_type = 'modules'

package = '.plugins.{0}'.format(append_plugin_type)
"
-------------------------------------------------------------------------
"Recom
PRs: 55249, 56040"
-------------------------------------------------------------------------
=========================================================================
"fallback_name = None
    fallback_name = fragment_slug
    fragment_name, fragment_var = fragment_slug.rsplit('.', 1)
if fragment_class is None and fallback_name:
    fragment_class = fragment_loader.get(fallback_name)
    fragment_var = 'DOCUMENTATION'

"
-------------------------------------------------------------------------
"if '.' in fragment_slug:
    fallback_name = fragment_slug
    fragment_name, fragment_var = fragment_slug.rsplit('.', 1)
else:
    fallback_name = None
    fragment_name, fragment_var = fragment_slug, 'DOCUMENTATION'

if fragment_class is None and fallback_name:
    fragment_class = fragment_loader.get(fallback_name)
    fragment_var = 'DOCUMENTATION'"
-------------------------------------------------------------------------
"fallback_name = None
    fallback_name = fragment_slug
    fragment_name, fragment_var = fragment_slug.rsplit('.', 1)
if fragment_class is None and fallback_name:
    fragment_class = fragment_loader.get(fallback_name)
    fragment_var = 'DOCUMENTATION'

"
-------------------------------------------------------------------------
"Recom
PRs: 55249, 56040"
-------------------------------------------------------------------------
=========================================================================
"if self.params['private_key']:
"
-------------------------------------------------------------------------
"```python
if self.params['private_key']:
```"
-------------------------------------------------------------------------
"if self.params['private_key']:
"
-------------------------------------------------------------------------
"Recom
PRs: 56038, 56039"
-------------------------------------------------------------------------
=========================================================================
"if self.params['private_key']:
"
-------------------------------------------------------------------------
if self.params['private_key'] is not None:
-------------------------------------------------------------------------
"if self.params['private_key']:
"
-------------------------------------------------------------------------
"Recom
PRs: 56038, 56039"
-------------------------------------------------------------------------
=========================================================================
"if self.params['private_key']:
"
-------------------------------------------------------------------------
if self.params['private_key']:
-------------------------------------------------------------------------
"if self.params['private_key']:
"
-------------------------------------------------------------------------
"Recom
PRs: 56038, 56039"
-------------------------------------------------------------------------
=========================================================================
"if self.params['private_key']:
"
-------------------------------------------------------------------------
if self.params['private_key']:
-------------------------------------------------------------------------
"if self.params['private_key']:
"
-------------------------------------------------------------------------
"Recom
PRs: 56038, 56039"
-------------------------------------------------------------------------
=========================================================================
"if self.params['private_key']:
"
-------------------------------------------------------------------------
"```python
if self.params.get('private_key'):
```"
-------------------------------------------------------------------------
"if self.params['private_key']:
"
-------------------------------------------------------------------------
"Recom
PRs: 56038, 56039"
-------------------------------------------------------------------------
=========================================================================
"- Seconds to wait before reboot. Passed as a parameter to the reboot command.
- Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
- This timeout is evaluated separately for both reboot verification and test command success so the
"
-------------------------------------------------------------------------
"```python
pre_reboot_delay:
  description:
    - Seconds to wait before reboot. 
  type: int
  default: 0

post_reboot_delay:
  description:
    - Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
  type: int
  default: 0

reboot_timeout:
  description:
    - Maximum seconds to wait for the machine to reboot and respond to a test command. The module's maximum execution time is twice this amount, evaluated separately for reboot verification and test command success.
  type: int
  default: 600
```  "
-------------------------------------------------------------------------
"- Seconds to wait before reboot. Passed as a parameter to the reboot command.
- On Linux, macOS and OpenBSD, this is converted to minutes and rounded down. If less than 60, it will be set to 0.
- On Solaris and FreeBSD, this will be seconds.
- Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
- This timeout is evaluated separately for both reboot verification and test command success so the
"
-------------------------------------------------------------------------
"Recom
PRs: 55934, 55959"
-------------------------------------------------------------------------
=========================================================================
"- Seconds to wait before reboot. Passed as a parameter to the reboot command.
- Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
"
-------------------------------------------------------------------------
"- Seconds to wait before reboot. Passed as a parameter to the reboot command.
- Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully."
-------------------------------------------------------------------------
"- Seconds to wait before reboot. Passed as a parameter to the reboot command.
- Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
- This is useful if you want wait for something to settle despite your connection already working.
"
-------------------------------------------------------------------------
"Recom
PRs: 55934, 55959"
-------------------------------------------------------------------------
=========================================================================
"- This timeout is evaluated separately for both reboot verification and test command success so maximum clock time is actually twice this value.
"
-------------------------------------------------------------------------
"The timeout is evaluated separately for both reboot verification and test command success, so the maximum clock time is actually twice this value."
-------------------------------------------------------------------------
"- Maximum seconds to wait for machine to re-appear on the network and respond to a test command.
- This timeout is evaluated separately for both reboot verification and test command success so maximum clock time is actually twice this value.
"
-------------------------------------------------------------------------
"Recom
PRs: 55934, 55959"
-------------------------------------------------------------------------
=========================================================================
"- Seconds to wait before reboot. Passed as a parameter to the reboot command.
- Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
- This timeout is evaluated separately for both reboot verification and test command success so the
"
-------------------------------------------------------------------------
"```python
--- a/lib/ansible/modules/system/reboot.py
+++ b/lib/ansible/modules/system/reboot.py
@@ -33,9 +33,9 @@
     reboot_timeout_sec = dict(
         type='int',
         default=600,
-        description=""Maximum seconds to wait for machine to reboot and respond to a test command."",
+        description=""Seconds to wait before reboot. Passed as a parameter to the reboot command."",
     )
     post_reboot_delay_sec = dict(
         type='int',
         default=0,
-        description=""This is useful if you want wait for something to settle despite your connection already working."",
+        description=""Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully."",
     )
```"
-------------------------------------------------------------------------
"- Seconds to wait before reboot. Passed as a parameter to the reboot command.
- Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
- This timeout is evaluated separately for both reboot verification and test command success so the
"
-------------------------------------------------------------------------
"Recom
PRs: 55934, 55958"
-------------------------------------------------------------------------
=========================================================================
"- Seconds to wait before reboot. Passed as a parameter to the reboot command.
- Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
"
-------------------------------------------------------------------------
"Seconds to wait before reboot. 
Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully."
-------------------------------------------------------------------------
"- Seconds to wait before reboot. Passed as a parameter to the reboot command.
- Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
"
-------------------------------------------------------------------------
"Recom
PRs: 55934, 55958"
-------------------------------------------------------------------------
=========================================================================
"- This timeout is evaluated separately for both reboot verification and test command success so maximum clock time is actually twice this value.
"
-------------------------------------------------------------------------
"This timeout value is used independently for both reboot verification and test command success. Hence, the total time taken for these operations can be up to twice the specified timeout value."
-------------------------------------------------------------------------
"- This timeout is evaluated separately for both reboot verification and test command success so maximum clock time is actually twice this value.
"
-------------------------------------------------------------------------
"Recom
PRs: 55934, 55958"
-------------------------------------------------------------------------
=========================================================================
"return re.sub(r'<data\s.?(/>|>)', r'<data\1', data)
"
-------------------------------------------------------------------------
"```python
    return re.sub(r'<data\s.?(/>|>)', r'<data\1', data)
```"
-------------------------------------------------------------------------
"return re.sub(r'<data\s.?(/>|>)', r'<data\1', data)
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"rc, out, err = self.exec_command(item)
    self._module.fail_json(msg=cli_err_msg(item['command'].strip(), err))
"
-------------------------------------------------------------------------
"```python
rc, out, err = self.exec_command(item)
self._module.fail_json(msg=cli_err_msg(item['command'].strip(), err))
```"
-------------------------------------------------------------------------
"rc, out, err = self.exec_command(item)
    self._module.fail_json(msg=cli_err_msg(item['command'].strip(), err))
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"answer=dict()
"
-------------------------------------------------------------------------
answer=dict()
-------------------------------------------------------------------------
"answer=dict()
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"default: local
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='default', ctx=Store()), annotation=Name(id='local', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"default: local
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"default: local
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='default', ctx=Store()), annotation=Name(id='local', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"default: local
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"default: none
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='default', ctx=Store()), annotation=Name(id='local', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"default: none
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"r'.*<authenSchemeName>(.*)</authenSchemeName>.*\s*'
r'<firstAuthenMode>(.*)</firstAuthenMode>.*\s*'
r'<secondAuthenMode>(.*)</secondAuthenMode>.*\s*', xml_str)
"
-------------------------------------------------------------------------
"```python
re_find_authen = re.findall(r'.*<authenSchemeName>(.*)</authenSchemeName>.*\s*', xml_str)
re_find_first_authen = re.findall(r'<firstAuthenMode>(.*)</firstAuthenMode>.*\s*', xml_str)
re_find_second_authen = re.findall(r'<secondAuthenMode>(.*)</secondAuthenMode>.*\s*', xml_str)
```"
-------------------------------------------------------------------------
"r'.*<authenSchemeName>(.*)</authenSchemeName>.*\s*'
r'<firstAuthenMode>(.*)</firstAuthenMode>.*\s*'
r'<secondAuthenMode>(.*)</secondAuthenMode>.*\s*', xml_str)
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"r'.*<authorSchemeName>(.*)</authorSchemeName>.*\s*'
r'<firstAuthorMode>(.*)</firstAuthorMode>.*\s*'
r'<secondAuthorMode>(.*)</secondAuthorMode>.*\s*', xml_str)
"
-------------------------------------------------------------------------
"```python
re_find = re.findall(r'.*<authorSchemeName>(.*)</authorSchemeName>.*\s*', xml_str)
re_find_first = re.findall(r'<firstAuthorMode>(.*)</firstAuthorMode>.*\s*', xml_str)
re_find_second = re.findall(r'<secondAuthorMode>(.*)</secondAuthorMode>.*\s*', xml_str)
```"
-------------------------------------------------------------------------
"r'.*<authorSchemeName>(.*)</authorSchemeName>.*\s*'
r'<firstAuthorMode>(.*)</firstAuthorMode>.*\s*'
r'<secondAuthorMode>(.*)</secondAuthorMode>.*\s*', xml_str)
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"re_find = re.findall(r'.*<acctSchemeName>(.*)</acctSchemeName>\s*<accountingMode>(.*)</accountingMode>', xml_str)
"
-------------------------------------------------------------------------
"re_find = re.findall(r'.*<acctSchemeName>(.*)</acctSchemeName>\s*<accountingMode>(.*)</accountingMode>', xml_str)"
-------------------------------------------------------------------------
"re_find = re.findall(r'.*<acctSchemeName>(.*)</acctSchemeName>\s*<accountingMode>(.*)</accountingMode>', xml_str)
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"check_name(module=module, name=local_user_group, invalid_char=INVALID_GROUP_CHAR)
state=dict(choices=['present', 'absent'], default='present'),
first_authen_mode=dict(default='local', choices=['invalid', 'local', 'hwtacacs', 'radius', 'none']),
first_author_mode=dict(default='local', choices=['invalid', 'local', 'hwtacacs', 'if-authenticated', 'none']),
accounting_mode=dict(default='none', choices=['invalid', 'hwtacacs', 'radius', 'none']),
"
-------------------------------------------------------------------------
"```python
def check_name(module=module, name=local_user_group, invalid_char=INVALID_GROUP_CHAR):
    state=dict(choices=['present', 'absent'], default='present')
    first_authen_mode=dict(default='local', choices=['invalid', 'local', 'hwtacacs', 'radius', 'none'])
    first_author_mode=dict(default='local', choices=['invalid', 'local', 'hwtacacs', 'if-authenticated', 'none'])
    accounting_mode=dict(default='none', choices=['invalid', 'hwtacacs', 'radius', 'none'])
```"
-------------------------------------------------------------------------
"check_name(module=module, name=local_user_group, invalid_char=INVALID_GROUP_CHAR)
state=dict(choices=['present', 'absent'], default='present'),
first_authen_mode=dict(default='local', choices=['invalid', 'local', 'hwtacacs', 'radius', 'none']),
first_author_mode=dict(default='local', choices=['invalid', 'local', 'hwtacacs', 'if-authenticated', 'none']),
accounting_mode=dict(default='none', choices=['invalid', 'hwtacacs', 'radius', 'none']),
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"scheme_new = (authen_scheme_name.lower(), first_authen_mode.lower(), ""invalid"")
"
-------------------------------------------------------------------------
"- scheme_new = (authen_scheme_name.lower(), first_authen_mode.lower(), ""invalid"")"
-------------------------------------------------------------------------
"scheme_new = (authen_scheme_name.lower(), first_authen_mode.lower(), ""invalid"")
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"scheme_new = (author_scheme_name.lower(), first_author_mode.lower(), ""invalid"")
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='scheme_new', ctx=Store()), annotation=Name(id='none', ctx=Load()), value=Tuple(elts=[Call(func=Attribute(value=Name(id='author_scheme_name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='first_author_mode', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), Constant(value='invalid')], ctx=Load()))"
-------------------------------------------------------------------------
"scheme_new = (author_scheme_name.lower(), first_author_mode.lower(), ""invalid"")
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"scheme_new = (acct_scheme_name.lower(), accounting_mode.lower())
"
-------------------------------------------------------------------------
"scheme_new = (acct_scheme_name.lower(), accounting_mode.lower())"
-------------------------------------------------------------------------
"scheme_new = (acct_scheme_name.lower(), accounting_mode.lower())
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"local_user_info = root.findall(""aaa/lam/users/user"")
"
-------------------------------------------------------------------------
"local_user_info = root.findall(""aaa/lam/users/user"")"
-------------------------------------------------------------------------
"local_user_info = root.findall(""aaa/lam/users/user"")
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"""radius/rdsTemplates/rdsTemplate/rdsServerIPV4s/rdsServerIPV4"")
"
-------------------------------------------------------------------------
radius/rdsTemplates/rdsTemplate/rdsServerIPV4s/rdsServerIPV4
-------------------------------------------------------------------------
"""radius/rdsTemplates/rdsTemplate/rdsServerIPV4s/rdsServerIPV4"")
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"cfg = dict()
config_list = list()
if radius_server_type:
    cfg[""serverType""] = radius_server_type.lower()
if radius_server_ip:
    cfg[""serverIPAddress""] = radius_server_ip.lower()
if radius_server_port:
    cfg[""serverPort""] = radius_server_port.lower()
if radius_server_mode:
    cfg[""serverMode""] = radius_server_mode.lower()
if radius_vpn_name:
    cfg[""vpnName""] = radius_vpn_name.lower()
for tmp in result[""radius_server_ip_v4""]:
    exist_cfg = dict()
    if radius_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if radius_server_ip:
        exist_cfg[""serverIPAddress""] = tmp.get(""serverIPAddress"").lower()
    if radius_server_port:
        exist_cfg[""serverPort""] = tmp.get(""serverPort"").lower()
    if radius_server_mode:
        exist_cfg[""serverMode""] = tmp.get(""serverMode"").lower()
    if radius_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"```python
cfg = {}
config_list = []
if radius_server_type:
    cfg[""serverType""] = radius_server_type.lower()
if radius_server_ip:
    cfg[""serverIPAddress""] = radius_server_ip.lower()
if radius_server_port:
    cfg[""serverPort""] = radius_server_port.lower()
if radius_server_mode:
    cfg[""serverMode""] = radius_server_mode.lower()
if radius_vpn_name:
    cfg[""vpnName""] = radius_vpn_name.lower()
for tmp in result[""radius_server_ip_v4""]:
    exist_cfg = {}
    if radius_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if radius_server_ip:
        exist_cfg[""serverIPAddress""] = tmp.get(""serverIPAddress"").lower()
    if radius_server_port:
        exist_cfg[""serverPort""] = tmp.get(""serverPort"").lower()
    if radius_server_mode:
        exist_cfg[""serverMode""] = tmp.get(""serverMode"").lower()
    if radius_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    need_cfg = False if state == ""present"" else True
else:
    need_cfg = True if state == ""present"" else False
```"
-------------------------------------------------------------------------
"cfg = dict()
config_list = list()
if radius_server_type:
    cfg[""serverType""] = radius_server_type.lower()
if radius_server_ip:
    cfg[""serverIPAddress""] = radius_server_ip.lower()
if radius_server_port:
    cfg[""serverPort""] = radius_server_port.lower()
if radius_server_mode:
    cfg[""serverMode""] = radius_server_mode.lower()
if radius_vpn_name:
    cfg[""vpnName""] = radius_vpn_name.lower()
for tmp in result[""radius_server_ip_v4""]:
    exist_cfg = dict()
    if radius_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if radius_server_ip:
        exist_cfg[""serverIPAddress""] = tmp.get(""serverIPAddress"").lower()
    if radius_server_port:
        exist_cfg[""serverPort""] = tmp.get(""serverPort"").lower()
    if radius_server_mode:
        exist_cfg[""serverMode""] = tmp.get(""serverMode"").lower()
    if radius_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"""radius/rdsTemplates/rdsTemplate/rdsServerIPV6s/rdsServerIPV6"")
"
-------------------------------------------------------------------------
"radius_server_ipv6_uri = ""radius/rdsTemplates/rdsTemplate/rdsServerIPV6s/rdsServerIPV6"""
-------------------------------------------------------------------------
"""radius/rdsTemplates/rdsTemplate/rdsServerIPV6s/rdsServerIPV6"")
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"cfg = dict()
config_list = list()
if radius_server_type:
    cfg[""serverType""] = radius_server_type.lower()
if radius_server_ipv6:
    cfg[""serverIPAddress""] = radius_server_ipv6.lower()
if radius_server_port:
    cfg[""serverPort""] = radius_server_port.lower()
if radius_server_mode:
    cfg[""serverMode""] = radius_server_mode.lower()

    exist_cfg = dict()
    if radius_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if radius_server_ipv6:
        exist_cfg[""serverIPAddress""] = tmp.get(""serverIPAddress"").lower()
    if radius_server_port:
        exist_cfg[""serverPort""] = tmp.get(""serverPort"").lower()
    if radius_server_mode:
        exist_cfg[""serverMode""] = tmp.get(""serverMode"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"cfg = {}
config_list = []

if radius_server_type:
    cfg[""serverType""] = radius_server_type.lower()
if radius_server_ipv6:
    cfg[""serverIPAddress""] = radius_server_ipv6.lower()
if radius_server_port:
    cfg[""serverPort""] = radius_server_port.lower()
if radius_server_mode:
    cfg[""serverMode""] = radius_server_mode.lower()

exist_cfg = {}
if radius_server_type:
    exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
if radius_server_ipv6:
    exist_cfg[""serverIPAddress""] = tmp.get(""serverIPAddress"").lower()
if radius_server_port:
    exist_cfg[""serverPort""] = tmp.get(""serverPort"").lower()
if radius_server_mode:
    exist_cfg[""serverMode""] = tmp.get(""serverMode"").lower()
config_list.append(exist_cfg)

if cfg in config_list:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False"
-------------------------------------------------------------------------
"cfg = dict()
config_list = list()
if radius_server_type:
    cfg[""serverType""] = radius_server_type.lower()
if radius_server_ipv6:
    cfg[""serverIPAddress""] = radius_server_ipv6.lower()
if radius_server_port:
    cfg[""serverPort""] = radius_server_port.lower()
if radius_server_mode:
    cfg[""serverMode""] = radius_server_mode.lower()

    exist_cfg = dict()
    if radius_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if radius_server_ipv6:
        exist_cfg[""serverIPAddress""] = tmp.get(""serverIPAddress"").lower()
    if radius_server_port:
        exist_cfg[""serverPort""] = tmp.get(""serverPort"").lower()
    if radius_server_mode:
        exist_cfg[""serverMode""] = tmp.get(""serverMode"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"""radius/rdsTemplates/rdsTemplate/rdsServerNames/rdsServerName"")
"
-------------------------------------------------------------------------
"- Assign(targets=[Name(id='CLI_SUPPORTED_MODULES', ctx=Store())], value=List(elts=[Constant(value='ce_config'), Constant(value='ce_command'), Constant(value='ce_facts')], ctx=Load()))
  AnnAssign(target=Name(id='default', ctx=Store()), annotation=Name(id='local', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"""radius/rdsTemplates/rdsTemplate/rdsServerNames/rdsServerName"")
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"cfg = dict()
config_list = list()
if radius_server_type:
    cfg[""serverType""] = radius_server_type.lower()
if radius_server_name:
    cfg[""serverName""] = radius_server_name.lower()
if radius_server_port:
    cfg[""serverPort""] = radius_server_port.lower()
if radius_server_mode:
    cfg[""serverMode""] = radius_server_mode.lower()
if radius_vpn_name:
    cfg[""vpnName""] = radius_vpn_name.lower()
for tmp in result[""radius_server_name_cfg""]:
    exist_cfg = dict()
    if radius_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if radius_server_name:
        exist_cfg[""serverName""] = tmp.get(""serverName"").lower()
    if radius_server_port:
        exist_cfg[""serverPort""] = tmp.get(""serverPort"").lower()
    if radius_server_mode:
        exist_cfg[""serverMode""] = tmp.get(""serverMode"").lower()
    if radius_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"```python
cfg = dict()
config_list = list()
if radius_server_type:
    cfg[""serverType""] = radius_server_type.lower()
if radius_server_name:
    cfg[""serverName""] = radius_server_name.lower()
if radius_server_port:
    cfg[""serverPort""] = radius_server_port.lower()
if radius_server_mode:
    cfg[""serverMode""] = radius_server_mode.lower()
if radius_vpn_name:
    cfg[""vpnName""] = radius_vpn_name.lower()
for tmp in result[""radius_server_name_cfg""]:
    exist_cfg = dict()
    if radius_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if radius_server_name:
        exist_cfg[""serverName""] = tmp.get(""serverName"").lower()
    if radius_server_port:
        exist_cfg[""serverPort""] = tmp.get(""serverPort"").lower()
    if radius_server_mode:
        exist_cfg[""serverMode""] = tmp.get(""serverMode"").lower()
    if radius_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    need_cfg = False if state == ""present"" else True
else:
    need_cfg = True if state == ""present"" else False
```"
-------------------------------------------------------------------------
"cfg = dict()
config_list = list()
if radius_server_type:
    cfg[""serverType""] = radius_server_type.lower()
if radius_server_name:
    cfg[""serverName""] = radius_server_name.lower()
if radius_server_port:
    cfg[""serverPort""] = radius_server_port.lower()
if radius_server_mode:
    cfg[""serverMode""] = radius_server_mode.lower()
if radius_vpn_name:
    cfg[""vpnName""] = radius_vpn_name.lower()
for tmp in result[""radius_server_name_cfg""]:
    exist_cfg = dict()
    if radius_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if radius_server_name:
        exist_cfg[""serverName""] = tmp.get(""serverName"").lower()
    if radius_server_port:
        exist_cfg[""serverPort""] = tmp.get(""serverPort"").lower()
    if radius_server_mode:
        exist_cfg[""serverMode""] = tmp.get(""serverMode"").lower()
    if radius_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"""hwtacacs/hwTacTempCfgs/hwTacTempCfg/hwTacSrvCfgs/hwTacSrvCfg"")
"
-------------------------------------------------------------------------
"```python
hwtacacs/hwTacTempCfgs/hwTacTempCfg/hwTacSrvCfgs/hwTacSrvCfg
```"
-------------------------------------------------------------------------
"""hwtacacs/hwTacTempCfgs/hwTacTempCfg/hwTacSrvCfgs/hwTacSrvCfg"")
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"cfg = dict()
config_list = list()

if hwtacacs_server_ip:
    cfg[""serverIpAddress""] = hwtacacs_server_ip.lower()
if hwtacacs_server_type:
    cfg[""serverType""] = hwtacacs_server_type.lower()
if hwtacacs_is_secondary_server:
    cfg[""isSecondaryServer""] = str(hwtacacs_is_secondary_server).lower()
if hwtacacs_is_public_net:
    cfg[""isPublicNet""] = str(hwtacacs_is_public_net).lower()
if hwtacacs_vpn_name:
    cfg[""vpnName""] = hwtacacs_vpn_name.lower()
for tmp in result[""hwtacacs_server_cfg_ipv4""]:
    exist_cfg = dict()
    if hwtacacs_server_ip:
        exist_cfg[""serverIpAddress""] = tmp.get(""serverIpAddress"").lower()
    if hwtacacs_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if hwtacacs_is_secondary_server:
        exist_cfg[""isSecondaryServer""] = tmp.get(""isSecondaryServer"").lower()
    if hwtacacs_is_public_net:
        exist_cfg[""isPublicNet""] = tmp.get(""isPublicNet"").lower()
    if hwtacacs_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"```python
cfg = dict()
config_list = list()

if hwtacacs_server_ip:
    cfg[""serverIpAddress""] = hwtacacs_server_ip.lower()
if hwtacacs_server_type:
    cfg[""serverType""] = hwtacacs_server_type.lower()
if hwtacacs_is_secondary_server:
    cfg[""isSecondaryServer""] = str(hwtacacs_is_secondary_server).lower()
if hwtacacs_is_public_net:
    cfg[""isPublicNet""] = str(hwtacacs_is_public_net).lower()
if hwtacacs_vpn_name:
    cfg[""vpnName""] = hwtacacs_vpn_name.lower()

for tmp in result[""hwtacacs_server_cfg_ipv4""]:
    exist_cfg = dict()
    if hwtacacs_server_ip:
        exist_cfg[""serverIpAddress""] = tmp.get(""serverIpAddress"").lower()
    if hwtacacs_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if hwtacacs_is_secondary_server:
        exist_cfg[""isSecondaryServer""] = tmp.get(""isSecondaryServer"").lower()
    if hwtacacs_is_public_net:
        exist_cfg[""isPublicNet""] = tmp.get(""isPublicNet"").lower()
    if hwtacacs_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)

if cfg in config_list:
    need_cfg = False if state == ""present"" else True
else:
    need_cfg = True if state == ""present"" else False
```"
-------------------------------------------------------------------------
"cfg = dict()
config_list = list()

if hwtacacs_server_ip:
    cfg[""serverIpAddress""] = hwtacacs_server_ip.lower()
if hwtacacs_server_type:
    cfg[""serverType""] = hwtacacs_server_type.lower()
if hwtacacs_is_secondary_server:
    cfg[""isSecondaryServer""] = str(hwtacacs_is_secondary_server).lower()
if hwtacacs_is_public_net:
    cfg[""isPublicNet""] = str(hwtacacs_is_public_net).lower()
if hwtacacs_vpn_name:
    cfg[""vpnName""] = hwtacacs_vpn_name.lower()
for tmp in result[""hwtacacs_server_cfg_ipv4""]:
    exist_cfg = dict()
    if hwtacacs_server_ip:
        exist_cfg[""serverIpAddress""] = tmp.get(""serverIpAddress"").lower()
    if hwtacacs_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if hwtacacs_is_secondary_server:
        exist_cfg[""isSecondaryServer""] = tmp.get(""isSecondaryServer"").lower()
    if hwtacacs_is_public_net:
        exist_cfg[""isPublicNet""] = tmp.get(""isPublicNet"").lower()
    if hwtacacs_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"""hwtacacs/hwTacTempCfgs/hwTacTempCfg/hwTacIpv6SrvCfgs/hwTacIpv6SrvCfg"")
"
-------------------------------------------------------------------------
"""hwtacacs/hwTacTempCfgs/hwTacTempCfg/hwTacIpv6SrvCfgs/hwTacIpv6SrvCfg"""
-------------------------------------------------------------------------
"""hwtacacs/hwTacTempCfgs/hwTacTempCfg/hwTacIpv6SrvCfgs/hwTacIpv6SrvCfg"")
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"cfg = dict()
config_list = list()

if hwtacacs_server_ipv6:
    cfg[""serverIpAddress""] = hwtacacs_server_ipv6.lower()
if hwtacacs_server_type:
    cfg[""serverType""] = hwtacacs_server_type.lower()
if hwtacacs_is_secondary_server:
    cfg[""isSecondaryServer""] = str(hwtacacs_is_secondary_server).lower()
if hwtacacs_vpn_name:
    cfg[""vpnName""] = hwtacacs_vpn_name.lower()
for tmp in result[""hwtacacs_server_cfg_ipv6""]:
    exist_cfg = dict()
    if hwtacacs_server_ipv6:
        exist_cfg[""serverIpAddress""] = tmp.get(""serverIpAddress"").lower()
    if hwtacacs_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if hwtacacs_is_secondary_server:
        exist_cfg[""isSecondaryServer""] = tmp.get(""isSecondaryServer"").lower()
    if hwtacacs_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"```python
cfg = dict()
config_list = list()

if hwtacacs_server_ipv6:
    cfg[""serverIpAddress""] = hwtacacs_server_ipv6.lower()
if hwtacacs_server_type:
    cfg[""serverType""] = hwtacacs_server_type.lower()
if hwtacacs_is_secondary_server:
    cfg[""isSecondaryServer""] = str(hwtacacs_is_secondary_server).lower()
if hwtacacs_vpn_name:
    cfg[""vpnName""] = hwtacacs_vpn_name.lower()

for tmp in result[""hwtacacs_server_cfg_ipv6""]:
    exist_cfg = dict()
    if hwtacacs_server_ipv6:
        exist_cfg[""serverIpAddress""] = tmp.get(""serverIpAddress"").lower()
    if hwtacacs_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if hwtacacs_is_secondary_server:
        exist_cfg[""isSecondaryServer""] = tmp.get(""isSecondaryServer"").lower()
    if hwtacacs_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)

if cfg in config_list:
    need_cfg = False if state == ""present"" else True
else:
    need_cfg = True if state == ""present"" else False
```"
-------------------------------------------------------------------------
"cfg = dict()
config_list = list()

if hwtacacs_server_ipv6:
    cfg[""serverIpAddress""] = hwtacacs_server_ipv6.lower()
if hwtacacs_server_type:
    cfg[""serverType""] = hwtacacs_server_type.lower()
if hwtacacs_is_secondary_server:
    cfg[""isSecondaryServer""] = str(hwtacacs_is_secondary_server).lower()
if hwtacacs_vpn_name:
    cfg[""vpnName""] = hwtacacs_vpn_name.lower()
for tmp in result[""hwtacacs_server_cfg_ipv6""]:
    exist_cfg = dict()
    if hwtacacs_server_ipv6:
        exist_cfg[""serverIpAddress""] = tmp.get(""serverIpAddress"").lower()
    if hwtacacs_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if hwtacacs_is_secondary_server:
        exist_cfg[""isSecondaryServer""] = tmp.get(""isSecondaryServer"").lower()
    if hwtacacs_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"""hwtacacs/hwTacTempCfgs/hwTacTempCfg/hwTacHostSrvCfgs/hwTacHostSrvCfg"")
"
-------------------------------------------------------------------------
"""hwtacacs/hwTacTempCfgs/hwTacTempCfg/hwTacHostSrvCfgs/hwTacHostSrvCfg"""
-------------------------------------------------------------------------
"""hwtacacs/hwTacTempCfgs/hwTacTempCfg/hwTacHostSrvCfgs/hwTacHostSrvCfg"")
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"cfg = dict()
config_list = list()

if hwtacacs_server_host_name:
    cfg[""serverHostName""] = hwtacacs_server_host_name.lower()
if hwtacacs_server_type:
    cfg[""serverType""] = hwtacacs_server_type.lower()
if hwtacacs_is_secondary_server:
    cfg[""isSecondaryServer""] = str(hwtacacs_is_secondary_server).lower()
if hwtacacs_is_public_net:
    cfg[""isPublicNet""] = str(hwtacacs_is_public_net).lower()
if hwtacacs_vpn_name:
    cfg[""vpnName""] = hwtacacs_vpn_name.lower()
for tmp in result[""hwtacacs_server_name_cfg""]:
    exist_cfg = dict()
    if hwtacacs_server_host_name:
        exist_cfg[""serverHostName""] = tmp.get(""serverHostName"").lower()
    if hwtacacs_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if hwtacacs_is_secondary_server:
        exist_cfg[""isSecondaryServer""] = tmp.get(""isSecondaryServer"").lower()
    if hwtacacs_is_public_net:
        exist_cfg[""isPublicNet""] = tmp.get(""isPublicNet"").lower()
    if hwtacacs_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"```python
cfg = dict()
config_list = list()

if hwtacacs_server_host_name:
    cfg[""serverHostName""] = hwtacacs_server_host_name.lower()
if hwtacacs_server_type:
    cfg[""serverType""] = hwtacacs_server_type.lower()
if hwtacacs_is_secondary_server:
    cfg[""isSecondaryServer""] = str(hwtacacs_is_secondary_server).lower()
if hwtacacs_is_public_net:
    cfg[""isPublicNet""] = str(hwtacacs_is_public_net).lower()
if hwtacacs_vpn_name:
    cfg[""vpnName""] = hwtacacs_vpn_name.lower()

for tmp in result[""hwtacacs_server_name_cfg""]:
    exist_cfg = dict()
    if hwtacacs_server_host_name:
        exist_cfg[""serverHostName""] = tmp.get(""serverHostName"").lower()
    if hwtacacs_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if hwtacacs_is_secondary_server:
        exist_cfg[""isSecondaryServer""] = tmp.get(""isSecondaryServer"").lower()
    if hwtacacs_is_public_net:
        exist_cfg[""isPublicNet""] = tmp.get(""isPublicNet"").lower()
    if hwtacacs_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)

if cfg in config_list:
    need_cfg = False if state == ""present"" else True
else:
    need_cfg = True if state == ""present"" else False
```"
-------------------------------------------------------------------------
"cfg = dict()
config_list = list()

if hwtacacs_server_host_name:
    cfg[""serverHostName""] = hwtacacs_server_host_name.lower()
if hwtacacs_server_type:
    cfg[""serverType""] = hwtacacs_server_type.lower()
if hwtacacs_is_secondary_server:
    cfg[""isSecondaryServer""] = str(hwtacacs_is_secondary_server).lower()
if hwtacacs_is_public_net:
    cfg[""isPublicNet""] = str(hwtacacs_is_public_net).lower()
if hwtacacs_vpn_name:
    cfg[""vpnName""] = hwtacacs_vpn_name.lower()
for tmp in result[""hwtacacs_server_name_cfg""]:
    exist_cfg = dict()
    if hwtacacs_server_host_name:
        exist_cfg[""serverHostName""] = tmp.get(""serverHostName"").lower()
    if hwtacacs_server_type:
        exist_cfg[""serverType""] = tmp.get(""serverType"").lower()
    if hwtacacs_is_secondary_server:
        exist_cfg[""isSecondaryServer""] = tmp.get(""isSecondaryServer"").lower()
    if hwtacacs_is_public_net:
        exist_cfg[""isPublicNet""] = tmp.get(""isPublicNet"").lower()
    if hwtacacs_vpn_name:
        exist_cfg[""vpnName""] = tmp.get(""vpnName"").lower()
    config_list.append(exist_cfg)
if cfg in config_list:
    if state == ""present"":
        need_cfg = False
    else:
        need_cfg = True
else:
    if state == ""present"":
        need_cfg = True
    else:
        need_cfg = False
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"author: ""JackyGao2016 (@CloudEngine-Ansible)""
"
-------------------------------------------------------------------------
"author: ""JackyGao2016 (@CloudEngine-Ansible)"""
-------------------------------------------------------------------------
"author: ""JackyGao2016 (@CloudEngine-Ansible)""
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"answer=dict()
"
-------------------------------------------------------------------------
answer = dict()
-------------------------------------------------------------------------
"answer=dict()
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"import re
"
-------------------------------------------------------------------------
"```python
import re
```"
-------------------------------------------------------------------------
"import re
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"def conversion_src(module):
src_list = module.params['src'].split('\n')
src_list_organize = []
exit_list = [' return', ' system-view']
if src_list[0].strip() == '#':
    src_list.pop(0)
for per_config in src_list:
    if per_config.strip() == '#':
        if per_config.rstrip() == '#':
            src_list_organize.extend(exit_list)
        else:
            src_list_organize.append('quit')
    else:
        src_list_organize.append(per_config)
src_str = '\n'.join(src_list_organize)
return src_str


conversion_lines(commands):
all_config = []
exit_list = [' return', ' system-view']
for per_command in commands:
    if re.search(r',', per_command):
        all_config.extend(exit_list)
        per_config = per_command.split(',')
        for config in per_config:
            if config:
                all_config.append(config)
        all_config.extend(exit_list)
    else:
        all_config.append(per_command)
return all_config


    config = conversion_src(module)
    candidate.load(config)
"
-------------------------------------------------------------------------
"def conversion_src(module):
    src_list = module.params['src'].split('\n')
    src_list_organize = []
    exit_list = [' return', ' system-view']
    if src_list[0].strip() == '#':
        src_list.pop(0)
    for per_config in src_list:
        if per_config.strip() == '#':
            if per_config.rstrip() == '#':
                src_list_organize.extend(exit_list)
            else:
                src_list_organize.append('quit')
        else:
            src_list_organize.append(per_config)
    src_str = '\n'.join(src_list_organize)
    return src_str


def conversion_lines(commands):
    all_config = []
    exit_list = [' return', ' system-view']
    for per_command in commands:
        if re.search(r',', per_command):
            all_config.extend(exit_list)
            per_config = per_command.split(',')
            for config in per_config:
                if config:
                    all_config.append(config)
            all_config.extend(exit_list)
        else:
            all_config.append(per_command)
    return all_config


config = conversion_src(module)
candidate.load(config)"
-------------------------------------------------------------------------
"def conversion_src(module):
src_list = module.params['src'].split('\n')
src_list_organize = []
exit_list = [' return', ' system-view']
if src_list[0].strip() == '#':
    src_list.pop(0)
for per_config in src_list:
    if per_config.strip() == '#':
        if per_config.rstrip() == '#':
            src_list_organize.extend(exit_list)
        else:
            src_list_organize.append('quit')
    else:
        src_list_organize.append(per_config)
src_str = '\n'.join(src_list_organize)
return src_str


conversion_lines(commands):
all_config = []
exit_list = [' return', ' system-view']
for per_command in commands:
    if re.search(r',', per_command):
        all_config.extend(exit_list)
        per_config = per_command.split(',')
        for config in per_config:
            if config:
                all_config.append(config)
        all_config.extend(exit_list)
    else:
        all_config.append(per_command)
return all_config


    config = conversion_src(module)
    candidate.load(config)
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"
commands = conversion_lines(commands)

and_display = []
per_command in commands:
if per_command.strip() not in ['quit', 'return', 'system-view']:
    command_display.append(per_command)
lt['commands'] = command_display
lt['updates'] = command_display
esult['commands']:
result['changed'] = True
"
-------------------------------------------------------------------------
"```python
commands = conversion_lines(commands)

command_display = []
for per_command in commands:
    if per_command.strip() not in ['quit', 'return', 'system-view']:
        command_display.append(per_command)
result['commands'] = command_display
result['updates'] = command_display
result['changed'] = True
```"
-------------------------------------------------------------------------
"
commands = conversion_lines(commands)

and_display = []
per_command in commands:
if per_command.strip() not in ['quit', 'return', 'system-view']:
    command_display.append(per_command)
lt['commands'] = command_display
lt['updates'] = command_display
esult['commands']:
result['changed'] = True
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"for item in version:
    if re.findall(r""^\d\S\s"", item.strip()):
        tmp_item = item.split()
        tmp_key = tmp_item[1]  "" ""  tmp_item[2]
        if len(tmp_item) > 5:
            self.facts[tmp_key] = "" "".join(tmp_item[4:])
        else:
            self.facts[tmp_key] = tmp_item[4]
"
-------------------------------------------------------------------------
"```python
for item in version:
    if re.findall(r""^\d\S\s"", item.strip()):
        tmp_item = item.split()
        tmp_key = "" "".join([tmp_item[1], tmp_item[2]])
        if len(tmp_item) > 5:
            self.facts[tmp_key] = "" "".join(tmp_item[4:])
        else:
            self.facts[tmp_key] = tmp_item[4]
```"
-------------------------------------------------------------------------
"for item in version:
    if re.findall(r""^\d\S\s"", item.strip()):
        tmp_item = item.split()
        tmp_key = tmp_item[1]  "" ""  tmp_item[2]
        if len(tmp_item) > 5:
            self.facts[tmp_key] = "" "".join(tmp_item[4:])
        else:
            self.facts[tmp_key] = tmp_item[4]
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"begin = False
    for item in interface_info:
        if begin:
            tmp_item = item.split()
            interface_dict[tmp_item[0]] = tmp_item[1]

        if re.findall(r""^Interface"", item.strip()):
            begin = True

"
-------------------------------------------------------------------------
"```python
begin = False
for item in interface_info:
    if begin:
        tmp_item = item.split()
        interface_dict[tmp_item[0]] = tmp_item[1]

    if re.findall(r""^Interface"", item.strip()):
        begin = True
```"
-------------------------------------------------------------------------
"begin = False
    for item in interface_info:
        if begin:
            tmp_item = item.split()
            interface_dict[tmp_item[0]] = tmp_item[1]

        if re.findall(r""^Interface"", item.strip()):
            begin = True

"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"tmp1 = response.split(r""<data>"")
"
-------------------------------------------------------------------------
"```python
tmp1 = response.split(r""<data>"")
```"
-------------------------------------------------------------------------
"tmp1 = response.split(r""<data>"")
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"re_find_id = re.findall(r'.*<vlanId>(.*)</vlanId>.*\s*', xml_str)
re_find_name = re.findall(r'.*<vlanName>(.*)</vlanName>.*\s*', xml_str)
re_find_desc = re.findall(r'.*<vlanDesc>(.*)</vlanDesc>.*\s*', xml_str)

if re_find_id:
    if re_find_name:
        attr = dict(vlan_id=re_find_id[0], name=re_find_name[0],
                    description=re_find_desc[0])
    else:
        attr = dict(vlan_id=re_find_id[0], name=None,
                    description=re_find_desc[0])
"
-------------------------------------------------------------------------
"```python
re_find_id = re.findall(r'.*<vlanId>(.*)</vlanId>.*\s*', xml_str)
re_find_name = re.findall(r'.*<vlanName>(.*)</vlanName>.*\s*', xml_str)
re_find_desc = re.findall(r'.*<vlanDesc>(.*)</vlanDesc>.*\s*', xml_str)

if re_find_id:
    attr = dict(vlan_id=re_find_id[0], name=re_find_name[0] if re_find_name else None,
                description=re_find_desc[0])
```"
-------------------------------------------------------------------------
"re_find_id = re.findall(r'.*<vlanId>(.*)</vlanId>.*\s*', xml_str)
re_find_name = re.findall(r'.*<vlanName>(.*)</vlanName>.*\s*', xml_str)
re_find_desc = re.findall(r'.*<vlanDesc>(.*)</vlanDesc>.*\s*', xml_str)

if re_find_id:
    if re_find_name:
        attr = dict(vlan_id=re_find_id[0], name=re_find_name[0],
                    description=re_find_desc[0])
    else:
        attr = dict(vlan_id=re_find_id[0], name=None,
                    description=re_find_desc[0])
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"j = tagged_vlans // 4
"
-------------------------------------------------------------------------
"```python
j = tagged_vlans // 4
```"
-------------------------------------------------------------------------
"j = tagged_vlans // 4
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"CLI_SUPPORTED_MODULES = ['ce_config', 'ce_command', 'ce_facts']
"
-------------------------------------------------------------------------
"```python
CLI_SUPPORTED_MODULES = ['ce_config', 'ce_command', 'ce_facts']
from ansible.utils.display import Display

display = Display()

class ActionModule(ActionNetworkModule):
```"
-------------------------------------------------------------------------
"CLI_SUPPORTED_MODULES = ['ce_config', 'ce_command', 'ce_facts']
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"conn.exec_command('return')
"
-------------------------------------------------------------------------
"```python
conn.exec_command('return')
```"
-------------------------------------------------------------------------
"conn.exec_command('return')
"
-------------------------------------------------------------------------
"Recom
PRs: 54750, 55861"
-------------------------------------------------------------------------
=========================================================================
"subscription_scope = '/subscriptions/'  self.subscription_id
"
-------------------------------------------------------------------------
subscription_scope = '/subscriptions/' + self.subscription_id
-------------------------------------------------------------------------
"subscription_scope = '/subscriptions/'  self.subscription_id
"
-------------------------------------------------------------------------
"Recom
PRs: 55797, 55855"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.basic import AnsibleModule, missing_required_lib
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.basic import AnsibleModule
```"
-------------------------------------------------------------------------
"from ansible.module_utils.basic import AnsibleModule, missing_required_lib
"
-------------------------------------------------------------------------
"Recom
PRs: 55506, 55806"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('psycopg2'))
"
-------------------------------------------------------------------------
"module.fail_json(msg=""missing_required_lib('psycopg2')"")"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('psycopg2'))
"
-------------------------------------------------------------------------
"Recom
PRs: 55506, 55806"
-------------------------------------------------------------------------
=========================================================================
"HAS_PSYCOPG2 = True
HAS_PSYCOPG2 = False
"
-------------------------------------------------------------------------
"```python
import traceback
PSYCOPG2_IMP_ERR = None
try:
    import psycopg2
    HAS_PSYCOPG2 = True
except ImportError:
    PSYCOPG2_IMP_ERR = traceback.format_exc()
    HAS_PSYCOPG2 = False

from ansible.module_utils.basic import AnsibleModule, missing_required_lib
from ansible.module_utils.postgres import postgres_common_argument_spec
```"
-------------------------------------------------------------------------
"HAS_PSYCOPG2 = True
HAS_PSYCOPG2 = False
"
-------------------------------------------------------------------------
"Recom
PRs: 55506, 55806"
-------------------------------------------------------------------------
=========================================================================
"if not HAS_PSYCOPG2:
"
-------------------------------------------------------------------------
"```python
if not HAS_PSYCOPG2:
```"
-------------------------------------------------------------------------
"if not HAS_PSYCOPG2:
"
-------------------------------------------------------------------------
"Recom
PRs: 55506, 55806"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.basic import AnsibleModule, missing_required_lib
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.basic import AnsibleModule
```"
-------------------------------------------------------------------------
"from ansible.module_utils.basic import AnsibleModule, missing_required_lib
"
-------------------------------------------------------------------------
"Recom
PRs: 55506, 55806"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('psycopg2'))
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=""missing_required_lib('psycopg2')"")
```"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('psycopg2'))
"
-------------------------------------------------------------------------
"Recom
PRs: 55506, 55806"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.basic import AnsibleModule, missing_required_lib
"
-------------------------------------------------------------------------
from ansible.module_utils.basic import AnsibleModule
-------------------------------------------------------------------------
"from ansible.module_utils.basic import AnsibleModule, missing_required_lib
"
-------------------------------------------------------------------------
"Recom
PRs: 55506, 55806"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=missing_required_lib('psycopg2'))
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg='psycopg2 is a required library')
```"
-------------------------------------------------------------------------
"module.fail_json(msg=missing_required_lib('psycopg2'))
"
-------------------------------------------------------------------------
"Recom
PRs: 55506, 55806"
-------------------------------------------------------------------------
=========================================================================
"# mark the entire module results untrusted as a template right here, since the current action could
# possibly template one of these values.
data = wrap_var(data)

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.six.moves import abc
from ansible.module_utils.common import wrap_var

class ActionBase(with_metaclass(abc.ABCMeta, object)):
    data['deprecations'] = []
    data['deprecations'].extend(self._discovery_deprecation_warnings)

    display.debug(""done with _execute_module (%s, %s)"" % (module_name, module_args))
    return wrap_var(data)
```"
-------------------------------------------------------------------------
"# mark the entire module results untrusted as a template right here, since the current action could
# possibly template one of these values.
data = wrap_var(data)

"
-------------------------------------------------------------------------
"Recom
PRs: 55717, 55742"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_native
from ansible.module_utils.basic import missing_required_lib
HAS_NCCLIENT = True
NCCLIENT_IMP_ERR = None
pt (ImportError, AttributeError) as err:  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
NCCLIENT_IMP_ERR = err
"
-------------------------------------------------------------------------
"```python
from functools import wraps

from ansible.errors import AnsibleError
from ansible.plugins import AnsiblePlugin
from ansible.module_utils._text import to_native
from ansible.module_utils.basic import missing_required_lib

HAS_NCCLIENT = True
NCCLIENT_IMP_ERR = None

try:
    from ncclient.operations import RPCError
    from ncclient.xml_ import to_xml, to_ele

except (ImportError, AttributeError) as err:  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
    NCCLIENT_IMP_ERR = err
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native
from ansible.module_utils.basic import missing_required_lib
HAS_NCCLIENT = True
NCCLIENT_IMP_ERR = None
pt (ImportError, AttributeError) as err:  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
NCCLIENT_IMP_ERR = err
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"def ensure_ncclient(func):
@wraps(func)
def wrapped(self, *args, **kwargs):
    if not HAS_NCCLIENT:
        raise AnsibleError(""%s: %s"" % (missing_required_lib('ncclient'), to_native(NCCLIENT_IMP_ERR)))
    return func(self, *args, **kwargs)
return wrapped


"
-------------------------------------------------------------------------
"```python
from functools import wraps

def ensure_ncclient(func):
    @wraps(func)
    def wrapped(self, *args, **kwargs):
        if not HAS_NCCLIENT:
            raise AnsibleError(""%s: %s"" % (missing_required_lib('ncclient'), to_native(NCCLIENT_IMP_ERR)))
        return func(self, *args, **kwargs)
    return wrapped
```"
-------------------------------------------------------------------------
"def ensure_ncclient(func):
@wraps(func)
def wrapped(self, *args, **kwargs):
    if not HAS_NCCLIENT:
        raise AnsibleError(""%s: %s"" % (missing_required_lib('ncclient'), to_native(NCCLIENT_IMP_ERR)))
    return func(self, *args, **kwargs)
return wrapped


"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
from functools import wraps

def ensure_ncclient(func):
    @wraps(func)
    def wrapper(self, *args, **kwargs):
        if not hasattr(self, '_connection') or not hasattr(self._connection, '_manager'):
            raise Exception(""Connection not established. Call 'connect()' first."")
        return func(self, *args, **kwargs)
    return wrapper
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
@ensure_ncclient
@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
HAS_NCCLIENT = True

try:
    from ncclient import manager
except (ImportError, AttributeError):  
    HAS_NCCLIENT = False
    
@ensure_ncclient
@ensure_ncclient
```"
-------------------------------------------------------------------------
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
@ensure_ncclient
@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
def load_configuration(self, *args, **kwargs):
    """"""Loads given configuration on device
Required dependency: ncclient.operations, __future__, ncclient.transport.errors, ansible, ncclient, re, ansible.plugins.netconf, ncclient.xml_, ansible.errors, lxml, json, ansible.module_utils._text, 
Original metadata: [stable-2.8] Move missing library abort to use rather than import
--for netconf (#55384)##### SUMMARY(cherry picked from commit b442706)Co-authored-by: Nathaniel Case <this.is@nathanielca.se><!--- Describe the change below, including rationale and design decisions --><!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Bugfix Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->netconf
backport, networking, core_review, support:community, support:network, bug, affects_2.8

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.plugins.terminal.TerminalBase, __future__.print_function, __future__.absolute_import, re, ansible.errors.AnsibleConnectionFailure, __future__.division
Function name information from Stable: on_open_shell
Function call information from Stable: AnsibleConnectionFailure
Class name information from Stable: TerminalModule
Class method call information from Stable: self._exec_cli_command, re.compile
Target file: session_id, published, close_session, PARTICULAR, division, NetconfBase, __metaclass__, FITNESS, connect, module_utils, useful, for, f, operations, findtext, Ansible, implied, network_os, port, lxml, Software, You, allow_agent, persistent_connect_timeout, host, client_capabilities, License, AnsibleConnectionFailure, is, modify, json, timeout, If, data_xml, you, system, WARRANTY, constants, exc, name, host_key_checking, be, network_os_model, ensure_connected, device_info, distributed, discard_changes, class, can, search, GNU, option, or, your, part, more, AnsibleError, ansible, re, number, password, warranty, the, General, by, AttributeError, Inc, _play_context, file, to_text, ANY, See, MERCHANTABILITY, get_base_rpc, Netconf, dumps, hostkey_verify, _text, Red, should, software, yang, urn, def, remote_user, network_os_platform, raise, ns, tag, it, __future__, ele, This, terms, subtree, lock, to_ele, that, etree, get_option, find, absolute_import, to_bytes, bootup, dict, xml_, gnu, s, c, server_capabilities, None, from, key_filename, org, sros, without, a, self, SSHUnknownHostError, redistribute, received, pass, netconf, get_capabilities, xmlns, network_os_hostname, network_os_version, transport, strip, copy, even, type, get, device_operations, errors, to_native, guessed_os, manager, username, in, new_ele, print_function, staticmethod, will, rpc, RPCError, any, licenses, remote_addr, get_device_info, look_for_keys, sr, www, platform, Public, version, com, not, ncclient, result, FOR, free, try, except, return, ImportError, later, at, but, have, network_api, filter, A, WITHOUT, commit, Free, plugins, reply, with, import, m, http, obj, PURPOSE, C, state, Nokia, if, surrogate_then_replace, see, along, installed, Hat, either, lldp, Foundation, validate, to_xml, and, under, of, as, text, get_device_operations, guess_network_os, unlock, get_text, details, hope, nokia
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
class Netconf(NetconfBase):
    return json.dumps(result)
    
    @staticmethod
    def guess_network_os(obj):
        try:
            m = manager.connect(
                host=obj._play_context.remote_addr,
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
from functools import wraps

def ensure_ncclient(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            raise Exception(f""An error occurred: {e}"")
    return wrapper
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
class Netconf(NetconfBase):
    """"""reboot the device""""""
    return self.m.reboot().data_xml
 
@ensure_connected
def get(self, *args, **kwargs):
    try:
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
    @ensure_ncclient
    def get_config(self, *args, **kwargs):
        try:
            except RPCError as exc:
                raise Exception(to_xml(exc.xml))
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
def edit_config(self, *args, **kwargs):
    try:
        except RPCError as exc:
            raise Exception(to_xml(exc.xml))
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
def execute_nc_cli(self, *args, **kwargs):
    try:
        except RPCError as exc:
            raise Exception(to_xml(exc.xml))
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
    @ensure_ncclient
    except RPCError as exc:
        raise Exception(to_xml(exc.xml))

    @ensure_connected
    def commit(self, *args, **kwargs):
        try:
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
from ncclient.xml_ import to_xml
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"```python
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected
try:
    from ncclient.xml_ import to_xml
    HAS_NCCLIENT = True
except (ImportError, AttributeError):  
    # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
```"
-------------------------------------------------------------------------
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
from ncclient.xml_ import to_xml
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
    @ensure_ncclient
    def guess_network_os(obj):
        """"""
        Guess the remote network os name
    """"""
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
def get(self, filter=None, remove_ns=False):
    if isinstance(filter, list):
        return guessed_os
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
def get_config(self, source=None, filter=None, remove_ns=False):
    if isinstance(filter, list):
        except RPCError as exc:
            raise Exception(to_xml(exc.xml))
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
    except RPCError as exc:
        raise Exception(to_xml(exc.xml))

    @ensure_ncclient
    def edit_config(self, config=None, format='xml', target='candidate', default_operation=None, test_option=None, error_option=None, remove_ns=False):
        if config is None:
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
    @ensure_ncclient
    def commit(self, confirmed=False, timeout=None, persist=None, remove_ns=False):
        try:
            except RPCError as exc:
                raise Exception(to_xml(exc.xml))
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
def validate(self, source=""candidate"", remove_ns=False):
    try:
        except RPCError as exc:
            raise Exception(to_xml(exc.xml))
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
def discard_changes(self, remove_ns=False):
    try:
        except RPCError as exc:
            raise Exception(to_xml(exc.xml))
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_text, to_native
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils._text import to_text, to_native
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient

HAS_NCCLIENT = True

try:
    from ncclient import manager
    from ncclient.operations import RPCError
    from ncclient.transport.errors import SSHUnknownHostError
    from ncclient.xml_ import to_ele, to_xml, new_ele, sub_ele
except (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False

@ensure_ncclient
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_text, to_native
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
def load_configuration(self, format='xml', action='merge', target='candidate', config=None):
    """"""
    return self.rpc(name)
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
def guess_network_os(obj):
    """"""
    Guess the remote network os name
    """"""
    return json.dumps(result)
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
     @ensure_ncclient
     def commit(self, confirmed=False, check=False, timeout=None, comment=None, synchronize=False, at_time=None):
         """"""
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_text, to_native
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_ncclient
from ncclient.xml_ import to_ele
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"```python
__metaclass__ = type
import json
import re

from ansible.plugins.netconf import NetconfBase
from ansible.errors import AnsibleConnectionFailure
from ncclient.xml_ import to_ele

HAS_NCCLIENT = True

try:
    from ncclient.operations import to_text, to_native
    from ncclient import manager
    from ncclient.transport.errors import SSHUnknownHostError
    from ansible.plugins.netconf import ensure_ncclient

except (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_text, to_native
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_ncclient
from ncclient.xml_ import to_ele
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
from functools import wraps

def ensure_ncclient(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            import ncclient
        except ImportError:
            raise ImportError(""ncclient library is required for this operation"")
        
        return func(*args, **kwargs)
    
    return wrapper
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
class Netconf(NetconfBase):
    return json.dumps(result)

    @staticmethod
    def guess_network_os(obj):
        try:
            m = manager.connect(
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55649"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_native
from ansible.module_utils.basic import missing_required_lib
HAS_NCCLIENT = True
NCCLIENT_IMP_ERR = None
pt (ImportError, AttributeError) as err:  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
NCCLIENT_IMP_ERR = err
"
-------------------------------------------------------------------------
"```python
from functools import wraps

from ansible.errors import AnsibleError
from ansible.plugins import AnsiblePlugin

HAS_NCCLIENT = True
NCCLIENT_IMP_ERR = None

try:
    from ncclient.operations import RPCError
    from ncclient.xml_ import to_xml, to_ele
except ImportError as err:
    HAS_NCCLIENT = False
    NCCLIENT_IMP_ERR = err
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native
HAS_NCCLIENT = True
NCCLIENT_IMP_ERR = None
pt (ImportError, AttributeError) as err:  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
NCCLIENT_IMP_ERR = err
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"def ensure_ncclient(func):
@wraps(func)
def wrapped(self, *args, **kwargs):
    if not HAS_NCCLIENT:
        raise AnsibleError(""%s: %s"" % (missing_required_lib('ncclient'), to_native(NCCLIENT_IMP_ERR)))
    return func(self, *args, **kwargs)
return wrapped


"
-------------------------------------------------------------------------
"def ensure_connected(func):
    @wraps(func)
    def wrapped(self, *args, **kwargs):
        if not HAS_NCCLIENT:
            raise AnsibleError(""%s: %s"" % (missing_required_lib('ncclient'), to_native(NCCLIENT_IMP_ERR)))
        return func(self, *args, **kwargs)
    return wrapped"
-------------------------------------------------------------------------
"def ensure_ncclient(func):
@wraps(func)
def wrapped(self, *args, **kwargs):
    if not HAS_NCCLIENT:
        raise AnsibleError(""Package ncclient is not installed: %s. Please install it with `pip install ncclient`"" % to_native(NCCLIENT_IMP_ERR))
    return func(self, *args, **kwargs)
return wrapped


"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class NetconfBase(AnsiblePlugin):
     def m(self):
         return self._connection._manager
 
     @ensure_ncclient
     def rpc(self, name):
         """"""
Required dependency: ncclient.operations, __future__, ncclient.transport.errors, ansible, ncclient, re, ansible.plugins.netconf, ncclient.xml_, ansible.errors, lxml, json, ansible.module_utils._text, 
Original metadata: [stable-2.7] Move missing library abort to use rather than import
--for netconf (#55384).##### SUMMARY(cherry picked from commit b442706b543d5e890940d14f9701ebdaae27d83e)Co-authored-by: Nathaniel Case <this.is@nathanielca.se><!--- Describe the change below, including rationale and design decisions --><!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Bugfix Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->netconf
backport, networking, core_review, support:community, support:network, bug, affects_2.7

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.plugins.terminal.TerminalBase, __future__.print_function, __future__.absolute_import, re, ansible.errors.AnsibleConnectionFailure, __future__.division
Function name information from Stable: on_open_shell
Function call information from Stable: AnsibleConnectionFailure
Class name information from Stable: TerminalModule
Class method call information from Stable: self._exec_cli_command, re.compile
Target file: session_id, published, close_session, PARTICULAR, division, NetconfBase, __metaclass__, FITNESS, connect, module_utils, useful, for, f, operations, findtext, Ansible, implied, network_os, port, lxml, Software, You, allow_agent, host, client_capabilities, License, AnsibleConnectionFailure, is, str, modify, json, timeout, If, data_xml, you, system, WARRANTY, constants, exc, name, host_key_checking, be, network_os_model, ensure_connected, device_info, distributed, discard_changes, class, can, search, GNU, option, or, your, part, more, AnsibleError, ansible, re, number, password, warranty, the, General, by, AttributeError, Inc, _play_context, file, to_text, ANY, See, MERCHANTABILITY, get_base_rpc, Netconf, dumps, hostkey_verify, _text, Red, should, software, yang, urn, def, remote_user, network_os_platform, raise, ns, tag, it, __future__, ele, This, terms, subtree, lock, to_ele, that, etree, get_option, find, absolute_import, to_bytes, bootup, dict, xml_, gnu, s, c, server_capabilities, None, from, key_filename, org, sros, without, a, self, SSHUnknownHostError, redistribute, received, pass, netconf, get_capabilities, xmlns, network_os_hostname, network_os_version, transport, strip, copy, even, type, get, device_operations, errors, guessed_os, manager, username, in, new_ele, print_function, staticmethod, will, rpc, RPCError, any, licenses, remote_addr, get_device_info, look_for_keys, sr, www, platform, Public, version, com, not, ncclient, result, FOR, free, try, except, return, ImportError, later, at, but, have, network_api, filter, A, WITHOUT, commit, Free, plugins, reply, with, import, m, http, obj, PURPOSE, C, state, Nokia, if, surrogate_then_replace, see, along, installed, Hat, either, lldp, Foundation, validate, to_xml, and, under, of, as, text, get_device_operations, guess_network_os, unlock, get_text, details, hope, nokia
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
@ensure_ncclient
@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
import json
import re

from ansible.module_utils._text import to_text, to_bytes, to_native
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import NetconfBase, ensure_connected
from ncclient import manager
from ncclient.operations import RPCError
from ncclient.transport.errors import SSHUnknownHostError
from ncclient.xml_ import to_ele, to_xml, new_ele

HAS_NCCLIENT = True

try:
    from ncclient import manager
    from ncclient.operations import RPCError
    from ncclient.transport.errors import SSHUnknownHostError
    from ncclient.xml_ import to_ele, to_xml, new_ele
except (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
```"
-------------------------------------------------------------------------
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
def load_configuration(self, *args, **kwargs):
    """"""Loads given configuration on device""""""
    return self.rpc(name)
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
from functools import wraps

def ensure_ncclient(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        # Add implementation for ensuring ncclient availability
        return func(*args, **kwargs)
    return wrapper
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
def get(self, *args, **kwargs):
    try:
        """"""reboot the device""""""
        return self.m.reboot().data_xml
```
"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
     except RPCError as exc:
         raise Exception(to_xml(exc.xml))
 
 @ensure_ncclient
 def get_config(self, *args, **kwargs):
     try:
         except RPCError as exc:
             raise Exception(to_xml(exc.xml))
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
from ncclient.operations.errors import RPCError
from ansible.errors import AnsibleError

class Netconf(NetconfBase):
    except RPCError as exc:
        raise AnsibleError(to_xml(exc.xml))

@ensure_ncclient
def edit_config(self, *args, **kwargs):
    try:
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
     except RPCError as exc:
         raise Exception(to_xml(exc.xml))
 
 @ensure_ncclient
 def execute_nc_cli(self, *args, **kwargs):
     try:
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
    except RPCError as exc:
        raise Exception(to_xml(exc.xml))
    
    @ensure_ncclient
    def commit(self, *args, **kwargs):
        try:
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
from ncclient.xml_ import to_xml
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"```python
try:
    from ncclient.xml_ import to_xml
    HAS_NCCLIENT = True
except (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False
```"
-------------------------------------------------------------------------
"from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
from ncclient.xml_ import to_xml
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
@staticmethod
def guess_network_os(obj):
    """"""
    Guess the remote network os name
""""""
return json.dumps(result)
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
    return guessed_os

# TODO: change .xml to .data_xml, when ncclient supports data_xml on all platforms
@ensure_ncclient
def get(self, filter=None, remove_ns=False):
    if isinstance(filter, list):
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
    except RPCError as exc:
        raise Exception(to_xml(exc.xml))

    @ensure_ncclient
    def get_config(self, source=None, filter=None, remove_ns=False):
        if isinstance(filter, list):
```  "
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
    except RPCError as exc:
        raise Exception(to_xml(exc.xml))

@ensure_ncclient
def edit_config(self, config=None, format='xml', target='candidate', default_operation=None, test_option=None, error_option=None, remove_ns=False):
    if config is None:
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
    @ensure_ncclient
    def commit(self, confirmed=False, timeout=None, persist=None, remove_ns=False):
        try:
            except RPCError as exc:
                raise Exception(to_xml(exc.xml))
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
         except RPCError as exc:
             raise Exception(to_xml(exc.xml))
 
     @ensure_ncclient
     def validate(self, source=""candidate"", remove_ns=False):
         try:
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
def discard_changes(self, remove_ns=False):
    try:
        except RPCError as exc:
            raise Exception(to_xml(exc.xml))
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_text, to_native
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected
from ansible.module_utils._text import to_text, to_native

HAS_NCCLIENT = True

try:
    from ncclient import manager
    from ncclient.operations import RPCError
    from ncclient.transport.errors import SSHUnknownHostError
    HAS_NCCLIENT = True
except (ImportError, AttributeError):  
    # paramiko and gssapi are incompatible and raise AttributeError not ImportError
    HAS_NCCLIENT = False

@ensure_connected
def ensure_ncclient():
    pass
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_text
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_connected, ensure_ncclient
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
     """"""
     return self.rpc(name)

 @ensure_ncclient
 def load_configuration(self, format='xml', action='merge', target='candidate', config=None):
     """"""
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
@staticmethod
def guess_network_os(obj):
    """"""
    Guess the remote network os name
    """"""
    return json.dumps(result)
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
class Netconf(NetconfBase):
     # below commit() is a workaround which build's raw `commit-configuration` xml with required tags and uses
     # ncclient generic rpc() method to execute rpc on remote host.
     # Remove below method after the issue in ncclient is fixed.
     @ensure_ncclient
     def commit(self, confirmed=False, check=False, timeout=None, comment=None, synchronize=False, at_time=None):
         """"""
Required dependency: ncclient.operations, __future__, ncclient.transport.errors, ansible, ncclient, re, ansible.plugins.netconf, ncclient.xml_, ansible.errors, lxml, json, ansible.module_utils._text, 
Original metadata: [stable-2.7] Move missing library abort to use rather than import
--for netconf (#55384).##### SUMMARY(cherry picked from commit b442706b543d5e890940d14f9701ebdaae27d83e)Co-authored-by: Nathaniel Case <this.is@nathanielca.se><!--- Describe the change below, including rationale and design decisions --><!--- HINT: Include ""Fixes #nnn"" if you are fixing an existing issue -->##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Bugfix Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->netconf
backport, networking, core_review, support:community, support:network, bug, affects_2.7

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: ansible.plugins.terminal.TerminalBase, __future__.print_function, __future__.absolute_import, re, ansible.errors.AnsibleConnectionFailure, __future__.division
Function name information from Stable: on_open_shell
Function call information from Stable: AnsibleConnectionFailure
Class name information from Stable: TerminalModule
Class method call information from Stable: self._exec_cli_command, re.compile
Target file: session_id, published, close_session, PARTICULAR, division, NetconfBase, __metaclass__, FITNESS, connect, module_utils, useful, for, f, operations, findtext, Ansible, implied, network_os, port, lxml, Software, You, allow_agent, host, client_capabilities, License, AnsibleConnectionFailure, is, str, modify, json, timeout, If, data_xml, you, system, WARRANTY, constants, exc, name, host_key_checking, be, network_os_model, ensure_connected, device_info, distributed, discard_changes, class, can, search, GNU, option, or, your, part, more, AnsibleError, ansible, re, number, password, warranty, the, General, by, AttributeError, Inc, _play_context, file, to_text, ANY, See, MERCHANTABILITY, get_base_rpc, Netconf, dumps, hostkey_verify, _text, Red, should, software, yang, urn, def, remote_user, network_os_platform, raise, ns, tag, it, __future__, ele, This, terms, subtree, lock,...
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_text, to_native
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_ncclient
from ncclient.xml_ import to_ele
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils._text import to_text, to_native
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_ncclient
from ncclient.xml_ import to_ele

HAS_NCCLIENT = True

try:
    import ncclient
except (ImportError, AttributeError):
    HAS_NCCLIENT = False
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_text
from ansible.errors import AnsibleConnectionFailure
from ansible.plugins.netconf import ensure_ncclient
from ncclient.xml_ import to_ele
HAS_NCCLIENT = True
pt (ImportError, AttributeError):  # paramiko and gssapi are incompatible and raise AttributeError not ImportError
HAS_NCCLIENT = False
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
class Netconf(NetconfBase):
     except AttributeError:
         pass

     def get_device_info(self):
         device_info = dict()
         device_info['network_os'] = 'sros'
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"@ensure_ncclient
"
-------------------------------------------------------------------------
"```python
@ensure_ncclient
def guess_network_os(obj):
    try:
        m = manager.connect(
            return json.dumps(result)
```"
-------------------------------------------------------------------------
"@ensure_ncclient
"
-------------------------------------------------------------------------
"Recom
PRs: 55384, 55648"
-------------------------------------------------------------------------
=========================================================================
"type: str
type: str
  - File access mode inside the container. Must be an octal number (like C(0644) or C(0444)).
type: int
"
-------------------------------------------------------------------------
"```yaml
mode:
  description:
    - File access mode inside the container. Must be an octal number (like C(0644) or C(0444)).
  type: int
```"
-------------------------------------------------------------------------
"- Every item must be a dictionary exposing the keys secret_id, secret_name, filename, uid (defaults to 0), gid (defaults to 0), mode (defaults to 0444)
"
-------------------------------------------------------------------------
"Recom
PRs: 55591, 55617"
-------------------------------------------------------------------------
=========================================================================
"type: str
type: str
  - File access mode inside the container. Must be an octal number (like C(0644) or C(0444)).
"
-------------------------------------------------------------------------
"```yaml
type: int
  - File access mode inside the container. Must be an octal number (like C(0644) or C(0444)).
```"
-------------------------------------------------------------------------
"- Every item must be a dictionary exposing the keys config_id, config_name, filename, uid (defaults to 0), gid (defaults to 0), mode (defaults to 0444)
"
-------------------------------------------------------------------------
"Recom
PRs: 55591, 55617"
-------------------------------------------------------------------------
=========================================================================
"'uid': config_data['File'].get('UID'),
'gid': config_data['File'].get('GID'),
"
-------------------------------------------------------------------------
"'uid': str(config_data['File'].get('UID')),
'gid': str(config_data['File'].get('GID')),"
-------------------------------------------------------------------------
"service_c['uid'] = str(param_m.get('uid', ""0""))
service_c['gid'] = str(param_m.get('gid', ""0""))
service_c['mode'] = int(param_m.get('mode', 0o444))
"
-------------------------------------------------------------------------
"Recom
PRs: 55591, 55617"
-------------------------------------------------------------------------
=========================================================================
"'uid': secret_data['File'].get('UID'),
'gid': secret_data['File'].get('GID'),
"
-------------------------------------------------------------------------
"```python
'uid': str(secret_data['File'].get('UID')),
'gid': str(secret_data['File'].get('GID')),
```"
-------------------------------------------------------------------------
"service_s['uid'] = str(param_m.get('uid', ""0""))
service_s['gid'] = str(param_m.get('gid', ""0""))
service_s['mode'] = int(param_m.get('mode', 0o444))
"
-------------------------------------------------------------------------
"Recom
PRs: 55591, 55617"
-------------------------------------------------------------------------
=========================================================================
"uid=dict(type='str'),
gid=dict(type='str'),
uid=dict(type='str'),
gid=dict(type='str'),
"
-------------------------------------------------------------------------
"def main():
    config_id=dict(type='str', required=True),
    config_name=dict(type='str', required=True),
    filename=dict(type='str'),
    mode=dict(type='int'),
)),
secrets=dict(type='list', elements='dict', options=dict(
    secret_id=dict(type='str', required=True),
    secret_name=dict(type='str', required=True),
    filename=dict(type='str'),
    mode=dict(type='int'),
)),
networks=dict(type='list', elements='str'),
uid=dict(type='str'),
gid=dict(type='str'),"
-------------------------------------------------------------------------
"'uid': config_data['File'].get('UID'),
'gid': config_data['File'].get('GID'),
"
-------------------------------------------------------------------------
"Recom
PRs: 55591, 55617"
-------------------------------------------------------------------------
=========================================================================
"type: str
type: str
  - File access mode inside the container. Must be an octal number (like C(0644) or C(0444)).
type: int
"
-------------------------------------------------------------------------
"```yaml
type:
  description:
    - File access mode inside the container. Must be an octal number (like C(0644) or C(0444)).
  type: str
```"
-------------------------------------------------------------------------
"type: str
type: str
  - File access mode inside the container. Must be an octal number (like C(0644) or C(0444)).
type: int
"
-------------------------------------------------------------------------
"Recom
PRs: 55591, 55616"
-------------------------------------------------------------------------
=========================================================================
"type: str
type: str
  - File access mode inside the container. Must be an octal number (like C(0644) or C(0444)).
"
-------------------------------------------------------------------------
"```yaml
type: str
  description:
    - File access mode inside the container. Must be an octal number (like C(0644) or C(0444)).
```"
-------------------------------------------------------------------------
"type: str
type: str
  - File access mode inside the container. Must be an octal number (like C(0644) or C(0444)).
"
-------------------------------------------------------------------------
"Recom
PRs: 55591, 55616"
-------------------------------------------------------------------------
=========================================================================
"'uid': config_data['File'].get('UID'),
'gid': config_data['File'].get('GID'),
"
-------------------------------------------------------------------------
"```python
'uid': str(config_data['File'].get('UID')),
'gid': str(config_data['File'].get('GID')),
```"
-------------------------------------------------------------------------
"'uid': config_data['File'].get('UID'),
'gid': config_data['File'].get('GID'),
"
-------------------------------------------------------------------------
"Recom
PRs: 55591, 55616"
-------------------------------------------------------------------------
=========================================================================
"'uid': secret_data['File'].get('UID'),
'gid': secret_data['File'].get('GID'),
"
-------------------------------------------------------------------------
"```python
'uid': str(secret_data['File'].get('UID')),
'gid': str(secret_data['File'].get('GID')),
```"
-------------------------------------------------------------------------
"'uid': secret_data['File'].get('UID'),
'gid': secret_data['File'].get('GID'),
"
-------------------------------------------------------------------------
"Recom
PRs: 55591, 55616"
-------------------------------------------------------------------------
=========================================================================
"uid=dict(type='str'),
gid=dict(type='str'),
uid=dict(type='str'),
gid=dict(type='str'),
"
-------------------------------------------------------------------------
"```python
def main():
    config_id = dict(type='str', required=True)
    config_name = dict(type='str', required=True)
    filename = dict(type='str')
    mode = dict(type='int'),
    )),
    secrets = dict(type='list', elements='dict', options=dict(
        secret_id = dict(type='str', required=True),
        secret_name = dict(type='str', required=True),
        filename = dict(type='str'),
        mode = dict(type='int'),
        uid = dict(type='str'),
        gid = dict(type='str'),
    )),
    networks = dict(type='list', elements='str'),
```"
-------------------------------------------------------------------------
"uid=dict(type='str'),
gid=dict(type='str'),
uid=dict(type='str'),
gid=dict(type='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 55591, 55616"
-------------------------------------------------------------------------
=========================================================================
"# An example for creating an Ubuntu 14.04 container using an image fingerprint.
# This requires changing 'server' and 'protocol' key values, replacing the
# 'alias' key with with 'fingerprint' and supplying an appropriate value that
# matches the container image you wish to use.
- hosts: localhost
connection: local
tasks:
  - name: Create a started container
    lxd_container:
      name: mycontainer
      state: started
      source:
        type: image
        mode: pull
        # Provides current (and older) Ubuntu images with listed fingerprints
        server: https://cloud-images.ubuntu.com/releases
        # Protocol used by 'ubuntu' remote (as shown by 'lxc remote list')
        protocol: simplestreams
        # This provides an Ubuntu 14.04 LTS amd64 image from 20150814.
        fingerprint: e9a8bdfab6dc
      profiles: [""default""]
      wait_for_ipv4_addresses: true
      timeout: 600

"
-------------------------------------------------------------------------
"```yaml
- hosts: localhost
  connection: local
  tasks:
    - name: Create a started container
      lxd_container:
        name: mycontainer
        state: started
        source:
          type: image
          mode: pull
          server: https://cloud-images.ubuntu.com/releases
          protocol: simplestreams
          fingerprint: e9a8bdfab6dc
        profiles: 
          - default
        wait_for_ipv4_addresses: true
        timeout: 600
```"
-------------------------------------------------------------------------
"# An example for creating an Ubuntu 14.04 container using an image fingerprint.
# This requires changing 'server' and 'protocol' key values, replacing the
# 'alias' key with with 'fingerprint' and supplying an appropriate value that
# matches the container image you wish to use.
- hosts: localhost
connection: local
tasks:
  - name: Create a started container
    lxd_container:
      name: mycontainer
      state: started
      source:
        type: image
        mode: pull
        # Provides current (and older) Ubuntu images with listed fingerprints
        server: https://cloud-images.ubuntu.com/releases
        # Protocol used by 'ubuntu' remote (as shown by 'lxc remote list')
        protocol: simplestreams
        # This provides an Ubuntu 14.04 LTS amd64 image from 20150814.
        fingerprint: e9a8bdfab6dc
      profiles: [""default""]
      wait_for_ipv4_addresses: true
      timeout: 600

"
-------------------------------------------------------------------------
"Recom
PRs: 52737, 55608"
-------------------------------------------------------------------------
=========================================================================
"delete_on_termination:
"
-------------------------------------------------------------------------
"```yaml
options:
  ebs:
    description: Parameters used to automatically set up EBS volumes when the instance is launched.
    suboptions:
      delete_on_termination:
        description: Indicates whether the EBS volume is deleted on instance termination.
        type: bool
      encrypted:
```"
-------------------------------------------------------------------------
"delete_on_termination:
"
-------------------------------------------------------------------------
"Recom
PRs: 55383, 55605"
-------------------------------------------------------------------------
=========================================================================
"version_added: '0.6'
"
-------------------------------------------------------------------------
"```yaml
version_added: '2.8'
```"
-------------------------------------------------------------------------
"version_added: '0.6'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"version_added: '2.8'
"
-------------------------------------------------------------------------
version_added: '2.8'
-------------------------------------------------------------------------
"version_added: '2.8'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"version_added: '2.4'
version_added: '2.4'
version_added: '2.5'
"
-------------------------------------------------------------------------
"- extends_documentation_fragment: postgres
version_added: '2.8'"
-------------------------------------------------------------------------
"version_added: '2.4'
version_added: '2.4'
version_added: '2.5'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"login_unix_socket:
  description:
    - Path to a Unix domain socket for local connections.
  type: str
  version_added: '2.8'
ssl_mode:
  description:
    - Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
    - See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
    - Default of C(prefer) matches libpq default.
  type: str
  default: prefer
  choices: [ allow, disable, prefer, require, verify-ca, verify-full ]
  version_added: '2.8'
ca_cert:
  description:
    - Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
    - If the file exists, the server's certificate will be verified to be signed by one of these authorities.
  type: str
  aliases: [ ssl_rootcert ]
  version_added: '2.8'
"
-------------------------------------------------------------------------
"extends_documentation_fragment:
  - postgres
version_added: '2.8'"
-------------------------------------------------------------------------
"login_unix_socket:
  description:
    - Path to a Unix domain socket for local connections.
  type: str
  version_added: '2.8'
ssl_mode:
  description:
    - Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
    - See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
    - Default of C(prefer) matches libpq default.
  type: str
  default: prefer
  choices: [ allow, disable, prefer, require, verify-ca, verify-full ]
  version_added: '2.8'
ca_cert:
  description:
    - Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
    - If the file exists, the server's certificate will be verified to be signed by one of these authorities.
  type: str
  aliases: [ ssl_rootcert ]
  version_added: '2.8'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='2.8'), simple=1)
AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"version_added: '2.8'
"
-------------------------------------------------------------------------
version_added: '2.8'
-------------------------------------------------------------------------
"version_added: '2.8'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.basic import env_fallback

from ansible.module_utils import ModuleDocFragment

DOCUMENTATION = """"""
module: postgresql_user
extends_documentation_fragment: postgres
version_added: 2.8
short_description: Adds or removes roles/users/roles from a PostgreSQL database
...
""""""
```"
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"- Path to a Unix domain socket for local connections.
- Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
- See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
- Default of C(prefer) matches libpq default.
- Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
- If the file exists, the server's certificate will be verified to be signed by one of these authorities.
rsion_added: '2.8'
"
-------------------------------------------------------------------------
"- Path to a Unix domain socket for local connections.
- Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
- Default of C(prefer) matches libpq default.
- Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
- If the file exists, the server's certificate will be verified to be signed by one of these authorities.
- version_added: '2.8'"
-------------------------------------------------------------------------
"- Path to a Unix domain socket for local connections.
- Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
- See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
- Default of C(prefer) matches libpq default.
- Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
- If the file exists, the server's certificate will be verified to be signed by one of these authorities.
rsion_added: '2.8'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='2.8'), simple=1)
AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"version_added: '2.8'
"
-------------------------------------------------------------------------
"```python
version_added = '2.8'
```"
-------------------------------------------------------------------------
"version_added: '2.8'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"```
from ansible.module_utils._text import to_text
from ansible.module_utils.basic import missing_required_lib
from ansible.module_utils.six.moves.urllib.parse import urlparse

from ansible.module_utils import _text
from ansible.module_utils.basic import missing_required_lib

EXAMPLES = r'''
- name: create table
  clickhouse_table:
    database: default
    name: new_table
    engine: MergeTree
'''
```"
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
extends_documentation_fragment: postgres
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"version_added: '2.8'
"
-------------------------------------------------------------------------
version_added: '2.8'
-------------------------------------------------------------------------
"version_added: '2.8'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"dest: /var/lib/postgres/data/pg_hba.conf
contype: host
users: joe,simon
source: ::1
databases: sales,logistics
method: peer
create: true
dest: /var/lib/postgres/data/pg_hba.conf
contype: host
users: replication
source: 192.168.0.100/24
databases: replication
method: cert
dest: /var/lib/postgres/data/pg_hba.conf
contype: local
users: mary
databases: mydb
state: absent
"
-------------------------------------------------------------------------
"- name: Grant users joe and simon access to databases sales and logistics from ipv6 localhost ::1/128 using peer authentication.
  postgresql_pg_hba:
    dest: /var/lib/postgres/data/pg_hba.conf
    contype: host
    users: joe,simon
    source: ::1
    databases: sales,logistics
    method: peer
    create: true

- name: Grant user replication from network 192.168.0.100/24 access for replication with client cert authentication.
  postgresql_pg_hba:
    dest: /var/lib/postgres/data/pg_hba.conf
    contype: host
    users: replication
    source: 192.168.0.100/24
    databases: replication
    method: cert

- name: Revoke access from local user mary on database mydb.
  postgresql_pg_hba:
    dest: /var/lib/postgres/data/pg_hba.conf
    contype: local
    users: mary
    databases: mydb
    state: absent"
-------------------------------------------------------------------------
"dest: /var/lib/postgres/data/pg_hba.conf
contype: host
users: joe,simon
source: ::1
databases: sales,logistics
method: peer
create: true
dest: /var/lib/postgres/data/pg_hba.conf
contype: host
users: replication
source: 192.168.0.100/24
databases: replication
method: cert
dest: /var/lib/postgres/data/pg_hba.conf
contype: local
users: mary
databases: mydb
state: absent
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"version_added: '2.8'
"
-------------------------------------------------------------------------
version_added: '2.8'
-------------------------------------------------------------------------
"version_added: '2.8'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='2.8'), simple=1)
AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
```  "
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"version_added: '2.8'
"
-------------------------------------------------------------------------
"```yaml
version_added: '2.8'
```"
-------------------------------------------------------------------------
"version_added: '2.8'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='2.8'), simple=1)
AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"- Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
- See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
- Default of C(prefer) matches libpq default.
- Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
- If the file exists, the server's certificate will be verified to be signed by one of these authorities.
rsion_added: '2.8'
"
-------------------------------------------------------------------------
"```yaml
- Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
- Default of C(prefer) matches libpq default.
- Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
- If the file exists, the server's certificate will be verified to be signed by one of these authorities.
  version_added: '2.8'
```"
-------------------------------------------------------------------------
"- Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
- See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
- Default of C(prefer) matches libpq default.
- Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
- If the file exists, the server's certificate will be verified to be signed by one of these authorities.
rsion_added: '2.8'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"'''
 
EXAMPLES = r'''
Required dependency: psycopg2
Original metadata: Postgresql docs fragments 2 (#55363)
--##### SUMMARY

Backports #55363.

* Postgres to use docsfragments
* Postgres to use docsfragments: redefined options in postgresql_user

(cherry picked from commit c3cbc39dd9b84a43aea0b72b9df953a97208af31)

##### ISSUE TYPE
- Docs Pull Request

##### COMPONENT NAME
docs.ansible.com
backport, module, community_review, support:community, docs, affects_2.8, postgresql, database

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: 
Function name information from Stable: 
Function call information from Stable: 
Class name information from Stable: ModuleDocFragment
Class method call information from Stable: 

Target file: uses, Postgres, containing, IP, COPYING, connect, python, for, fragment, port, verified, ca_cert, certificate, local, current, sudo, SSL, You, case, what, domain, must, host, running, License, is, str, matches, If, you, full, ensure, prefer, name, DOCUMENTATION, be, The, login_unix_socket, requirements, int, disable, ssl_rootcert, class, Python, GNU, also, or, connections, more, modes, choices, password, ssl_mode, the, psycopg2, to, General, version_added, Specifies, login_password, used, by, parameter, module, file, See, object, I, For, authentication, remote, ModuleDocFragment, authorities, Database, on, database, whether, ca, This, least, static, verify, that, signed, PostgreSQL, Ubuntu, dev, gnu, s, org, CA, adapter, a, txt, Path, Default, before, type, default, install, TCP, packages, socket, username, Host, connection, requires, docs, in, aliases, then, will, licenses, require, this, gpl, ssl, r, options, www, v3, assumes, postgresql, Public, ing, version, coding, Determines, notes, authority, are, information, at, based, one, authenticate, html, using, server, exists, which, allow, libpq, negotiated, account, with, systems, these, login_user, C, utf, logging, priority, Unix, postgres, see, installed, secure, https, either, description, and, of, as, documentation, login_host

'''

AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='0.6'), simple=1)
AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='2.8'), simple=1)
AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='2.4'), simple=1)
AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='2.8'), simple=1)
AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='2.8'), simple=1)
AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='2.8'), simple=1)
AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='2.8'), simple=1)
AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='2.8'), simple=1)
AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
'''"
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"version_added: '2.8'
"
-------------------------------------------------------------------------
version_added: '2.8'
-------------------------------------------------------------------------
"version_added: '2.8'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"```python
extends_documentation_fragment: postgres
```"
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"```python
+ AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='2.8'), simple=1)
+ AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"""ca_cert"": ""ssl_rootcert""
"
-------------------------------------------------------------------------
"""ca_cert"": ""ssl_rootcert"""
-------------------------------------------------------------------------
"""ca_cert"": ""ssl_rootcert""
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"'''
- AnnAssign(target=Name(id='version_added', ctx=Store()), annotation=Constant(value='2.8'), simple=1)
- AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
Invalid AST
Invalid AST
Invalid AST
Invalid AST
'''"
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"version_added: '2.8'
"
-------------------------------------------------------------------------
version_added: '2.8'
-------------------------------------------------------------------------
"version_added: '2.8'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='extends_documentation_fragment', ctx=Store()), annotation=Name(id='postgres', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"conn_limit:
  description:
  - Specifies the user (role) connection limit.
  type: int
  version_added: '2.4'
    - Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
    - See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
    - Default of C(prefer) matches libpq default.
  type: str
    - Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
    - If the file exists, the server's certificate will be verified to be signed by one of these authorities.
  version_added: '2.3'
"
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
version_added: '2.8'"
-------------------------------------------------------------------------
"conn_limit:
  description:
  - Specifies the user (role) connection limit.
  type: int
  version_added: '2.4'
    - Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
    - See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
    - Default of C(prefer) matches libpq default.
  type: str
    - Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
    - If the file exists, the server's certificate will be verified to be signed by one of these authorities.
  version_added: '2.3'
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"```python
extends_documentation_fragment: postgres
```"
-------------------------------------------------------------------------
"extends_documentation_fragment: postgres
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"aliases: [ login_port ]
"
-------------------------------------------------------------------------
"```python
options:
  login_port:
    description:
      - Database port to connect to.
    type: int
    default: 5432
  ssl_mode:
    description:
      - Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
```"
-------------------------------------------------------------------------
"aliases: [ login_port ]
"
-------------------------------------------------------------------------
"Recom
PRs: 55363, 55599"
-------------------------------------------------------------------------
=========================================================================
"aliases_deprecated = module_info[source].get('aliases_deprecated', set())
aliases_deprecated.add(module)
module_info[source]['aliases_deprecated'] = aliases_deprecated
"
-------------------------------------------------------------------------
"```python
aliases_deprecated = module_info[source].get('aliases_deprecated', set())
aliases_deprecated.add(module)
module_info[source]['aliases_deprecated'] = aliases_deprecated
```"
-------------------------------------------------------------------------
"aliases_deprecated = module_info[source].get('aliases_deprecated', set())
aliases_deprecated.add(module)
module_info[source]['aliases_deprecated'] = aliases_deprecated
"
-------------------------------------------------------------------------
"Recom
PRs: 54448, 55597"
-------------------------------------------------------------------------
=========================================================================
"'aliases_deprecated': module_info[module].get('aliases_deprecated', set()),
"
-------------------------------------------------------------------------
"'aliases_deprecated': module_info[module].get('aliases_deprecated', set()),"
-------------------------------------------------------------------------
"'aliases_deprecated': module_info[module].get('aliases_deprecated', set()),
"
-------------------------------------------------------------------------
"Recom
PRs: 54448, 55597"
-------------------------------------------------------------------------
=========================================================================
"templates['plugin_deprecation_stub'] = env.get_template('plugin_deprecation_stub.rst.j2')
"
-------------------------------------------------------------------------
"```python
templates['plugin_deprecation_stub'] = env.get_template('plugin_deprecation_stub.rst.j2')
```"
-------------------------------------------------------------------------
"templates['plugin_deprecation_stub'] = env.get_template('plugin_deprecation_stub.rst.j2')
"
-------------------------------------------------------------------------
"Recom
PRs: 54448, 55597"
-------------------------------------------------------------------------
=========================================================================
"# Create deprecation stub pages for deprecated aliases
if module_map[module]['aliases']:
    for alias in module_map[module]['aliases']:
        if alias in module_map[module]['aliases_deprecated']:
            doc['alias'] = alias

            display.v('about to template %s (deprecation alias %s)' % (module, alias))
            display.vvvvv(pp.pformat(doc))
            try:
                text = templates['plugin_deprecation_stub'].render(doc)
            except Exception as e:
                display.warning(msg=""Could not parse %s (deprecation alias %s) due to %s"" % (module, alias, e))
                continue

            if LooseVersion(jinja2.__version__) < LooseVersion('2.10'):
                # jinja2 < 2.10's indent filter indents blank lines.  Cleanup
                text = re.sub(' \n', '\n', text)

            write_data(text, output_dir, outputname, alias)

"
-------------------------------------------------------------------------
"```python
# Create deprecation stub pages for deprecated aliases
if module_map[module]['aliases']:
    for alias in module_map[module]['aliases']:
        if alias in module_map[module]['aliases_deprecated']:
            doc['alias'] = alias

            display.v('about to template %s (deprecation alias %s)' % (module, alias))
            display.vvvvv(pp.pformat(doc))
            try:
                text = templates['plugin_deprecation_stub'].render(doc)
            except Exception as e:
                display.warning(msg=""Could not parse %s (deprecation alias %s) due to %s"" % (module, alias, e))
                continue

            if LooseVersion(jinja2.__version__) < LooseVersion('2.10'):
                # jinja2 < 2.10's indent filter indents blank lines.  Cleanup
                text = re.sub(' \n', '\n', text)

            write_data(text, output_dir, outputname, alias)
```"
-------------------------------------------------------------------------
"# Create deprecation stub pages for deprecated aliases
if module_map[module]['aliases']:
    for alias in module_map[module]['aliases']:
        if alias in module_map[module]['aliases_deprecated']:
            doc['alias'] = alias

            display.v('about to template %s (deprecation alias %s)' % (module, alias))
            display.vvvvv(pp.pformat(doc))
            try:
                text = templates['plugin_deprecation_stub'].render(doc)
            except Exception as e:
                display.warning(msg=""Could not parse %s (deprecation alias %s) due to %s"" % (module, alias, e))
                continue

            if LooseVersion(jinja2.__version__) < LooseVersion('2.10'):
                # jinja2 < 2.10's indent filter indents blank lines.  Cleanup
                text = re.sub(' \n', '\n', text)

            write_data(text, output_dir, outputname, alias)

"
-------------------------------------------------------------------------
"Recom
PRs: 54448, 55597"
-------------------------------------------------------------------------
=========================================================================
"File/results format can be JSON or INI-format. The default C(fact_path) can be
specified in C(ansible.cfg) for when setup is automatically called as part of
C(gather_facts).
"
-------------------------------------------------------------------------
File/results format can be JSON or INI-format. The default `fact_path` can be specified in `ansible.cfg` for when setup is automatically called as part of `gather_facts`.
-------------------------------------------------------------------------
"File/results format can be JSON or INI-format. The default C(fact_path) can be
specified in C(ansible.cfg) for when setup is automatically called as part of
C(gather_facts).
"
-------------------------------------------------------------------------
"Recom
PRs: 54992, 55544"
-------------------------------------------------------------------------
=========================================================================
"job_id: ""{{ job.id }}""
"
-------------------------------------------------------------------------
"job_id: ""{{ job.id }}"""
-------------------------------------------------------------------------
"job_id: ""{{ job.id }}""
"
-------------------------------------------------------------------------
"Recom
PRs: 55252, 55543"
-------------------------------------------------------------------------
=========================================================================
"job_id: ""{{ job.id }}""
"
-------------------------------------------------------------------------
"```python
from __future__ import print_function
from ansible.module_utils.ansible_tower import TowerModule
from tower_cli.exceptions import TowerCLIError
from tower_cli import tower_cli
from tower_cli.conf import settings
from ansible.module_utils.six.moves import cStringIO
```"
-------------------------------------------------------------------------
"job_id: ""{{ job.id }}""
"
-------------------------------------------------------------------------
"Recom
PRs: 55252, 55543"
-------------------------------------------------------------------------
=========================================================================
"job_id: ""{{ job.id }}""
"
-------------------------------------------------------------------------
"```python
job_id = ""{{ job.id }}""
```"
-------------------------------------------------------------------------
"job_id: ""{{ job.id }}""
"
-------------------------------------------------------------------------
"Recom
PRs: 55252, 55543"
-------------------------------------------------------------------------
=========================================================================
"short_description: EC2 inventory source
"
-------------------------------------------------------------------------
"DOCUMENTATION = '''
    short_description: EC2 inventory source
'''"
-------------------------------------------------------------------------
"short_description: EC2 inventory source
"
-------------------------------------------------------------------------
"Recom
PRs: 55255, 55542"
-------------------------------------------------------------------------
=========================================================================
"- Uses a YAML configuration file that ends with C(aws_ec2.(yml|yaml)).
    description: Token that ensures this is a source file for the plugin.
"
-------------------------------------------------------------------------
"```yaml
  - aws_credentials
    description: Get inventory hosts from Amazon Web Services EC2.
    notes:
      - If no credentials are provided and the control node has an associated IAM instance profile then the
        role will be used for authentication.
    options:
      plugin:
          required: True
          choices: ['aws_ec2']
      regions:
Requires:
      - ansible.module_utils.ec2
      - __future__
      - ansible.plugins.inventory
      - botocore
      - re
      - ansible.utils.display
      - ansible.errors
      - boto3
      - ansible.module_utils._text
```"
-------------------------------------------------------------------------
"- Uses a YAML configuration file that ends with C(aws_ec2.(yml|yaml)).
    description: Token that ensures this is a source file for the plugin.
"
-------------------------------------------------------------------------
"Recom
PRs: 55255, 55542"
-------------------------------------------------------------------------
=========================================================================
"# Populate inventory with instances in these regions
regions:
# All instances with their `Environment` tag set to `dev`
# All dev and QA hosts
Ignores 403 errors rather than failing
Note: I(hostnames) sets the inventory_hostname. To modify ansible_host without modifying
- tag:Name=Tag1,Name=Tag2  # Return specific hosts only
"
-------------------------------------------------------------------------
"```yaml
regions:
  - us-east-1
  - us-east-2
plugin: aws_ec2
boto_profile: aws_profile
  filters:
    tag:Environment: dev
    tag:Environment:
      - dev
      - qa
    instance.group-id: sg-xxxxxxxx
  strict_permissions: False
hostnames:
  - tag:CustomDNSName
  - dns-name
  - private-ip-address
```"
-------------------------------------------------------------------------
"# Populate inventory with instances in these regions
regions:
# All instances with their `Environment` tag set to `dev`
# All dev and QA hosts
Ignores 403 errors rather than failing
Note: I(hostnames) sets the inventory_hostname. To modify ansible_host without modifying
- tag:Name=Tag1,Name=Tag2  # Return specific hosts only
"
-------------------------------------------------------------------------
"Recom
PRs: 55255, 55542"
-------------------------------------------------------------------------
=========================================================================
"# Add e.g. x86_64 hosts to an arch_x86_64 group
# Add hosts to tag_Name_Value groups for each Name/Value tag pair
# Add hosts to e.g. instance_type_z3_tiny
# Create security_groups_sg_abcd1234 group for each SG
# Create a group for each value of the Application tag
# Create a group per region e.g. aws_region_us_east_2
Set individual variables with compose
# Use the private IP address to connect to the host

"
-------------------------------------------------------------------------
"```python
import re

from ansible.errors import AnsibleError
```"
-------------------------------------------------------------------------
"# Add e.g. x86_64 hosts to an arch_x86_64 group
# Add hosts to tag_Name_Value groups for each Name/Value tag pair
# Add hosts to e.g. instance_type_z3_tiny
# Create security_groups_sg_abcd1234 group for each SG
# Create a group for each value of the Application tag
# Create a group per region e.g. aws_region_us_east_2
Set individual variables with compose
# Use the private IP address to connect to the host

"
-------------------------------------------------------------------------
"Recom
PRs: 55255, 55542"
-------------------------------------------------------------------------
=========================================================================
"- name: Copy a version of named.conf that is dependent on the OS. setype obtained by doing ls -Z /etc/named.conf on original file
template:
  src: named.conf_{{ ansible_os_family}}.j2
  dest: /etc/named.conf
  group: named
  setype: named_conf_t
  mode: 0640

"
-------------------------------------------------------------------------
"- name: Copy a version of named.conf that is dependent on the OS.
  template:
    src: named.conf_{{ ansible_os_family }}.j2
    dest: /etc/named.conf
    group: named
    setype: named_conf_t
    mode: 0640"
-------------------------------------------------------------------------
"- name: Copy a version of named.conf that is dependent on the OS. setype obtained by doing ls -Z /etc/named.conf on original file
template:
  src: named.conf_{{ ansible_os_family}}.j2
  dest: /etc/named.conf
  group: named
  setype: named_conf_t
  mode: 0640

"
-------------------------------------------------------------------------
"Recom
PRs: 54861, 55540"
-------------------------------------------------------------------------
=========================================================================
"- host: https://192.168.64.4:8443
- namespaces:
"
-------------------------------------------------------------------------
"```yaml
plugin: k8s
connections:
  - host: https://192.168.64.4:8443
  - namespaces:
```"
-------------------------------------------------------------------------
"- host: https://192.168.64.4:8443
- namespaces:
"
-------------------------------------------------------------------------
"Recom
PRs: 55290, 55539"
-------------------------------------------------------------------------
=========================================================================
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
- status: ['deprecated']
-------------------------------------------------------------------------
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_dns_resource_record_set) instead.
"
-------------------------------------------------------------------------
"```diff
--- a/cloud
+++ b/cloud
@@ -1,5 +1,4 @@
 author: ""William Albert (@walbert947)""
 requirements:
     - ""python >= 2.6""
     - ""apache-libcloud >= 0.19.0""
 options:
     state:
         description:
-imports:
-    - ansible.modules.cloud.google.gcp_url_map
+    - ansible.modules.cloud.google.gcp_dns_resource_record_set
 ```"
-------------------------------------------------------------------------
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_dns_resource_record_set) instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"- ImportFrom(module='ansible.modules.cloud.google.gcp_url_map', names=[alias(name='_build_path_matchers'), alias(name='_build_url_map_dict')], level=0)
- 'status': ['deprecated']"
-------------------------------------------------------------------------
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_dns_managed_zone) instead.
"
-------------------------------------------------------------------------
Deprecated some GCP modules. This is a backport of #53355. The module ansible.modules.cloud.google.gcp_dns_managed_zone should be used instead.
-------------------------------------------------------------------------
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_dns_managed_zone) instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"```python
ANSIBLE_METADATA = {'metadata_version': '1.1',
                     'supported_by': 'community'}
DOCUMENTATION = '''
module: gcp_backend_service
Required dependency: ansible.modules.cloud.google.gcp_url_map, unittest, 
Original metadata: GCP Deprecations
--##### SUMMARY
<!--- Describe the change below, including rationale and design decisions -->
Deprecating some GCP modules. This is a backport of #53355 

##### ISSUE TYPE
<!--- Pick one below and delete the rest -->
- Bugfix Pull Request

##### COMPONENT NAME
<!--- Write the short name of the module, plugin, task or feature below -->

##### ADDITIONAL INFORMATION
<!--- Include additional information to help people understand the change here -->
<!--- A step-by-step reproduction of the problem is helpful if there is no related issue -->

<!--- Paste verbatim command output below, e.g. before and after your change -->
```paste below

``` 
cloud, backport, gce, test, module, core_review, deprecated, support:community, support:core, bug, docs, affects_2.8
```"
-------------------------------------------------------------------------
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_compute_backend_service) instead.
"
-------------------------------------------------------------------------
"```python
- ImportFrom(module='ansible.modules.cloud.google._gcp_forwarding_rule', names=[alias(name='_build_global_forwarding_rule_dict')], level=0)
+ ImportFrom(module='ansible.modules.cloud.google._gcp_url_map', names=[alias(name='_build_path_matchers'), alias(name='_build_url_map_dict')], level=0)

deprecated:
  removed_in: ""2.12""
  why: Updated modules released with increased functionality
  alternative: Use M(gcp_compute_backend_service) instead.
```"
-------------------------------------------------------------------------
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_compute_backend_service) instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"```metadata_version: '1.1'
supported_by: community
status:
  - deprecated
dependencies:
  - ansible.modules.cloud.google.gcp_url_map
  - unittest
```"
-------------------------------------------------------------------------
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_compute_forwarding_rule) or M(gcp_compute_global_forwarding_rule) instead.
"
-------------------------------------------------------------------------
"```python
- ImportFrom(module='ansible.modules.cloud.google._gcp_forwarding_rule', names=[alias(name='_build_global_forwarding_rule_dict')], level=0)
+ ImportFrom(module='ansible.modules.cloud.google.gcp_url_map', names=[alias(name='_build_path_matchers'), alias(name='_build_url_map_dict')], level=0)

deprecated:
  removed_in: ""2.12""
  why: Updated modules released with increased functionality
  alternative: Use M(gcp_compute_forwarding_rule) or M(gcp_compute_global_forwarding_rule) instead.
```"
-------------------------------------------------------------------------
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_compute_forwarding_rule) or M(gcp_compute_global_forwarding_rule) instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"```python
ANSIBLE_METADATA = {'metadata_version': '1.1',
                     'supported_by': 'community',
                     'status': ['deprecated']}
```"
-------------------------------------------------------------------------
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: >
  Use M(gcp_compute_healthcheck), M(gcp_compute_http_healthcheck) or
  M(gcp_compute_https_healthcheck) instead.
"
-------------------------------------------------------------------------
"Deprecated modules:
  - ansible.modules.cloud.google.gcp_url_map
  - ansible.modules.cloud.google.gcp_forwarding_rule

removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: >
  Use M(gcp_compute_healthcheck), M(gcp_compute_http_healthcheck) or
  M(gcp_compute_https_healthcheck) instead."
-------------------------------------------------------------------------
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: >
  Use M(gcp_compute_healthcheck), M(gcp_compute_http_healthcheck) or
  M(gcp_compute_https_healthcheck) instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"```python
ANSIBLE_METADATA = {'metadata_version': '1.1',
                     'status': ['deprecated'],
                     'supported_by': 'community'}
```"
-------------------------------------------------------------------------
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_compute_target_proxy) instead.
"
-------------------------------------------------------------------------
"```diff
- ImportFrom(module='ansible.modules.cloud.google._gcp_forwarding_rule', names=[alias(name='_build_global_forwarding_rule_dict')], level=0)
+ ImportFrom(module='ansible.modules.cloud.google.gcp_url_map', names=[alias(name='_build_path_matchers'), alias(name='_build_url_map_dict')], level=0)
```  "
-------------------------------------------------------------------------
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_compute_target_proxy) instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"```python
ANSIBLE_METADATA = {'metadata_version': '1.1',
                     'supported_by': 'community',
                     'status': ['deprecated']}
```"
-------------------------------------------------------------------------
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_compute_url_map) instead.
"
-------------------------------------------------------------------------
"```diff
- ImportFrom(module='ansible.modules.cloud.google._gcp_forwarding_rule', names=[alias(name='_build_global_forwarding_rule_dict')], level=0)
+ ImportFrom(module='ansible.modules.cloud.google.gcp_url_map', names=[alias(name='_build_path_matchers'), alias(name='_build_url_map_dict')], level=0)

- deprecated:
-   removed_in: ""2.12""
-   why: Updated modules released with increased functionality
-   alternative: Use M(gcp_compute_url_map) instead.
```"
-------------------------------------------------------------------------
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_compute_url_map) instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'supported_by': 'community',
                    'status': ['deprecated']}
 
DOCUMENTATION = '''
Required dependency: ansible.modules.cloud.google.gcp_url_map, unittest, 
Original metadata: GCP Deprecations
--##### SUMMARY<!--- Describe the change below, including rationale and design decisions -->Deprecating some GCP modules. This is a backport of #53355 ##### ISSUE TYPE<!--- Pick one below and delete the rest -->- Bugfix Pull Request##### COMPONENT NAME<!--- Write the short name of the module, plugin, task or feature below -->##### ADDITIONAL INFORMATION<!--- Include additional information to help people understand the change here --><!--- A step-by-step reproduction of the problem is helpful if there is no related issue --><!--- Paste verbatim command output below, e.g. before and after your change -->```paste below```
cloud, backport, gce, test, module, core_review, deprecated, support:community, support:core, bug, docs, affects_2.8

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: 
Function name information from Stable: 
Function call information from Stable: 
Class name information from Stable: 
Class method call information from Stable: 
Target file: www, hostRules, input_list, com, module, _build_url_map_dict, path, foo_url_map_name, example, v1, defaultService, for, from, pathmatcher, two, assertEqual, graphs, cloud, path_matchers, paths, actual, self, unittest, one, hosts, expected, host, service, def, backendServices, compute, matcher, test__build_path_matchers, default, import, name, host_rules_path_matcher, params_dict, path_matcher_one, TestGCPUrlMap, Unit, url_map_name, projects, path_matcher, bes, class, test__build_url_map_dict, tests, modules, my, TestCase, path_matcher_two, webapp, foo_url_map, rules, description, www2, https, global, pathRules, gcp_url_map, pathMatchers, ansible, _build_path_matchers, aboutus, project, pathMatcher, google, host_rules, googleapis
```"
-------------------------------------------------------------------------
"'status': ['deprecated'],
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_spanner_database) and/or M(gcp_spanner_instance) instead.
"
-------------------------------------------------------------------------
"```python
Deprecated: 
  removed_in: ""2.12""
  why: Updated modules released with increased functionality
  alternative: Use M(gcp_spanner_database) and/or M(gcp_spanner_instance) instead.
```"
-------------------------------------------------------------------------
"deprecated:
removed_in: ""2.12""
why: Updated modules released with increased functionality
alternative: Use M(gcp_spanner_database) and/or M(gcp_spanner_instance) instead.
"
-------------------------------------------------------------------------
"Recom
PRs: 53355, 55534"
-------------------------------------------------------------------------
=========================================================================
"- Supports directories, files and symlinks, including SELinux and other file properties.
"
-------------------------------------------------------------------------
"```yaml
version_added: ""2.4""
short_description: recursively match all files, directories, and symlinks in a tree
description:
- Template complete directory tree files on a target system while retaining properties like SELinux and other file properties.
- First_found logic implemented if multiple paths are provided without processing previous entries, enabling merging different trees in order of importance or influencing different role instances.
options:
  required_dependency: os, __future__, selinux, ansible.module_utils._text, ansible.utils.display, stat, pwd, grp, ansible.plugins.lookup.LookupBase
```"
-------------------------------------------------------------------------
"- Supports directories, files and symlinks, including SELinux and other file properties.
"
-------------------------------------------------------------------------
"Recom
PRs: 54347, 55533"
-------------------------------------------------------------------------
=========================================================================
"- name: Template files (explicitly skip directories in order to use the 'src' attribute)
"
-------------------------------------------------------------------------
- name: Template files (explicitly skip directories in order to use the 'src' attribute)
-------------------------------------------------------------------------
"- name: Template files (explicitly skip directories in order to use the 'src' attribute)
"
-------------------------------------------------------------------------
"Recom
PRs: 54347, 55533"
-------------------------------------------------------------------------
=========================================================================
"description:
- full path to file
- not returned when C(item.state) is set to C(directory)
"
-------------------------------------------------------------------------
"RETURN = """"""
     description: 
         - full path to file
         - not returned when C(item.state) is set to C(directory)
     contains:
         src:
         root:
           description: allows filtering by original location
         path:
"""""""
-------------------------------------------------------------------------
"description:
- full path to file
- not returned when C(item.state) is set to C(directory)
"
-------------------------------------------------------------------------
"Recom
PRs: 54347, 55533"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.compat import ipaddress as compat_ipaddress
"
-------------------------------------------------------------------------
from ansible.module_utils.compat import ipaddress as compat_ipaddress
-------------------------------------------------------------------------
"from ansible.module_utils.compat import ipaddress as compat_ipaddress
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"except Exception as dummy:
"
-------------------------------------------------------------------------
"```python
try:
    HAS_CURRENT_CRYPTOGRAPHY = (LooseVersion(CRYPTOGRAPHY_VERSION) >= LooseVersion('1.5'))
    if HAS_CURRENT_CRYPTOGRAPHY:
        _cryptography_backend = cryptography.hazmat.backends.default_backend()
    HAS_CURRENT_CRYPTOGRAPHY = False
except Exception as dummy:
```"
-------------------------------------------------------------------------
"except Exception as dummy:
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"except Exception as dummy:
"
-------------------------------------------------------------------------
"Adapted code snippet:

```python
def write_file(module, dest, content):
     except Exception as dummy:
         try:
             f.close()
             pass
         os.remove(tmpsrc)
         raise ModuleFailException(""failed to create temporary content file: %s"" % to_native(err), exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"except Exception as dummy:
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"except Exception as dummy:
"
-------------------------------------------------------------------------
"```python
def write_file(module, dest, content):
     if not os.path.exists(tmpsrc):
         try:
             os.remove(tmpsrc)
         except Exception as dummy:
             raise ModuleFailException(""Source %s does not exist"" % (tmpsrc))
     if not os.access(tmpsrc, os.R_OK):
```"
-------------------------------------------------------------------------
"except Exception as dummy:
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"except Exception as dummy:
"
-------------------------------------------------------------------------
"```python
def _parse_key_openssl(openssl_binary, module, key_file=None, key_content=None):
         except Exception as dummy:
             try:
                 f.close()
                 pass
             raise ModuleFailException(""failed to create temporary content file: %s"" % to_native(err), exception=traceback.format_exc())
         f.close()
```"
-------------------------------------------------------------------------
"except Exception as dummy:
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"try:
    return to_native(compat_ipaddress.ip_address(to_text(ip)).compressed)
except ValueError:
    # We don't want to error out on something IPAddress() can't parse
"
-------------------------------------------------------------------------
"```python
def _normalize_ip(ip):
    try:
        return to_native(compat_ipaddress.ip_address(to_text(ip)).compressed)
    except ValueError:
        # We don't want to error out on something IPAddress() can't parse
        pass
```"
-------------------------------------------------------------------------
"try:
    return to_native(compat_ipaddress.ip_address(to_text(ip)).compressed)
except ValueError:
    # We don't want to error out on something IPAddress() can't parse
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"identifiers.add(('ip', name.value.compressed))
"
-------------------------------------------------------------------------
"identifiers.add(('ip', name.value.compressed))"
-------------------------------------------------------------------------
"identifiers.add(('ip', name.value.compressed))
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"except Exception as dummy:
"
-------------------------------------------------------------------------
"```python
def set_crypto_backend(module):
     elif backend == 'cryptography':
         try:
             cryptography.__version__
             module.fail_json(msg='Cannot find cryptography module!')
         except Exception as dummy:
             HAS_CURRENT_CRYPTOGRAPHY = True
     else:
```"
-------------------------------------------------------------------------
"except Exception as dummy:
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.compat import ipaddress as compat_ipaddress
"
-------------------------------------------------------------------------
from ansible.module_utils.compat import ipaddress as compat_ipaddress
-------------------------------------------------------------------------
"from ansible.module_utils.compat import ipaddress as compat_ipaddress
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"# IPv4/IPv6 address: use reverse mapping (RFC1034, RFC3596)
resource = compat_ipaddress.ip_address(identifier).reverse_pointer
if not resource.endswith('.'):
    resource = '.'
"
-------------------------------------------------------------------------
"```python
resource = compat_ipaddress.ip_address(identifier).reverse_pointer
if not resource.endswith('.'):
    resource += '.'
```"
-------------------------------------------------------------------------
"# IPv4/IPv6 address: use reverse mapping (RFC1034, RFC3596)
resource = compat_ipaddress.ip_address(identifier).reverse_pointer
if not resource.endswith('.'):
    resource = '.'
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.compat import ipaddress as compat_ipaddress
"
-------------------------------------------------------------------------
from ansible.module_utils.compat import ipaddress as compat_ipaddress
-------------------------------------------------------------------------
"from ansible.module_utils.compat import ipaddress as compat_ipaddress
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"ip = compat_ipaddress.ip_address(san[3:])
"
-------------------------------------------------------------------------
"```python
ip = ansible.module_utils.compat.ipaddress.ip_address(san[3:])
```"
-------------------------------------------------------------------------
"ip = compat_ipaddress.ip_address(san[3:])
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.compat import ipaddress as compat_ipaddress
"
-------------------------------------------------------------------------
from ansible.module_utils.compat import ipaddress as compat_ipaddress
-------------------------------------------------------------------------
"from ansible.module_utils.compat import ipaddress as compat_ipaddress
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"ip = compat_ipaddress.ip_address(san[3:])
"
-------------------------------------------------------------------------
"```python
ip = ansible.module_utils.compat.ipaddress.ip_address(san[3:])
```"
-------------------------------------------------------------------------
"ip = compat_ipaddress.ip_address(san[3:])
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.compat import ipaddress as compat_ipaddress
"
-------------------------------------------------------------------------
from ansible.module_utils.compat import ipaddress as compat_ipaddress
-------------------------------------------------------------------------
"from ansible.module_utils.compat import ipaddress as compat_ipaddress
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"ip = compat_ipaddress.ip_address(san[3:])
"
-------------------------------------------------------------------------
ip = ansible.module_utils.compat.ipaddress.ip_address(san[3:])
-------------------------------------------------------------------------
"ip = compat_ipaddress.ip_address(san[3:])
"
-------------------------------------------------------------------------
"Recom
PRs: 55278, 55532"
-------------------------------------------------------------------------
=========================================================================
"- The name of the S3 bucket for the access logs.
- Required if access logs in Amazon S3 are enabled.
- The bucket must exist in the same
- The prefix for the log location in the S3 bucket.
- If you don't specify a prefix, the access logs are stored in the root of the bucket.
- Cannot begin or end with a slash.
"
-------------------------------------------------------------------------
"To address the information provided, update the `access_logs_s3_bucket` and `access_logs_s3_prefix` options in the code snippet as follows:

```yaml
access_logs_s3_bucket:
  description: The name of the S3 bucket for the access logs. Required if access logs in Amazon S3 are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permission to write to the bucket.
  required: false

access_logs_s3_prefix:
  description: The prefix for the log location in the S3 bucket. If you don't specify a prefix, the access logs are stored in the root of the bucket. Cannot begin or end with a slash.
  required: false
```"
-------------------------------------------------------------------------
"- The name of the S3 bucket for the access logs.
- Required if access logs in Amazon S3 are enabled.
- The bucket must exist in the same
- The prefix for the log location in the S3 bucket.
- If you don't specify a prefix, the access logs are stored in the root of the bucket.
- Cannot begin or end with a slash.
"
-------------------------------------------------------------------------
"Recom
PRs: 55148, 55530"
-------------------------------------------------------------------------
=========================================================================
"access_logs_s3_prefix: ""logs""
"
-------------------------------------------------------------------------
"Add the following line under the `elb_application_lb` section:

```yaml
     access_logs_s3_prefix: logs
```"
-------------------------------------------------------------------------
"access_logs_s3_prefix: ""logs""
"
-------------------------------------------------------------------------
"Recom
PRs: 55148, 55530"
-------------------------------------------------------------------------
=========================================================================
"sample: my/logs
"
-------------------------------------------------------------------------
"access_logs_s3_prefix:
  description: The prefix for the location in the S3 bucket.
  returned: when state is present
  type: str
  sample: my/logs"
-------------------------------------------------------------------------
"sample: my/logs
"
-------------------------------------------------------------------------
"Recom
PRs: 55148, 55530"
-------------------------------------------------------------------------
=========================================================================
"from docker.errors import APIError, NotFound
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker.common import APIError, NotFound
```"
-------------------------------------------------------------------------
"from docker.errors import APIError, NotFound
"
-------------------------------------------------------------------------
"Recom
PRs: 55258, 55465"
-------------------------------------------------------------------------
=========================================================================
"service_info = self.inspect_service(service_id)
pt NotFound as exc:
if skip_missing is False:
    self.fail(""Error while reading from Swarm manager: %s"" % to_native(exc))
else:
    return None
self.fail(""Error inspecting swarm service: %s"" % exc)
"
-------------------------------------------------------------------------
"```python
service_info = self.inspect_service(service_id)
try:
    NotFound as exc:
    if skip_missing is False:
        self.fail(""Error while reading from Swarm manager: %s"" % to_native(exc))
    else:
        return None
except Exception as exc:
    self.fail(""Error inspecting swarm service: %s"" % exc)
```"
-------------------------------------------------------------------------
"service_info = self.inspect_service(service_id)
pt NotFound as exc:
if skip_missing is False:
    self.fail(""Error while reading from Swarm manager: %s"" % to_native(exc))
else:
    return None
self.fail(""Error inspecting swarm service: %s"" % exc)
"
-------------------------------------------------------------------------
"Recom
PRs: 55258, 55465"
-------------------------------------------------------------------------
=========================================================================
"filter_arg = dict()
if filters:
    filter_arg['filters'] = filters
        items = self.client.containers(**filter_arg)
        items = self.client.networks(**filter_arg)
        items = self.client.images(**filter_arg)
        items = self.client.volumes(**filter_arg)
"
-------------------------------------------------------------------------
"```python
filter_arg = dict()
if filters:
    filter_arg['filters'] = filters
    if docker_object == 'containers':
        items = self.client.containers(**filter_arg)
    elif docker_object == 'networks':
        items = self.client.networks(**filter_arg)
    elif docker_object == 'images':
        items = self.client.images(**filter_arg)
    elif docker_object == 'volumes':
        items = self.client.volumes(**filter_arg)
```"
-------------------------------------------------------------------------
"filter_arg = dict()
if filters:
    filter_arg['filters'] = filters
        items = self.client.containers(**filter_arg)
        items = self.client.networks(**filter_arg)
        items = self.client.images(**filter_arg)
        items = self.client.volumes(**filter_arg)
"
-------------------------------------------------------------------------
"Recom
PRs: 55258, 55465"
-------------------------------------------------------------------------
=========================================================================
"option_minimal_versions = dict(
    network_filters=dict(docker_py_version='2.0.2'),
    disk_usage=dict(docker_py_version='2.2.0'),
)

    option_minimal_versions=option_minimal_versions,
"
-------------------------------------------------------------------------
"```python
option_minimal_versions = dict(
    network_filters=dict(docker_py_version='2.0.2'),
    disk_usage=dict(docker_py_version='2.2.0'),
)
```"
-------------------------------------------------------------------------
"option_minimal_versions = dict(
    network_filters=dict(docker_py_version='2.0.2'),
    disk_usage=dict(docker_py_version='2.2.0'),
)

    option_minimal_versions=option_minimal_versions,
"
-------------------------------------------------------------------------
"Recom
PRs: 55258, 55465"
-------------------------------------------------------------------------
=========================================================================
"elif state in ['present', 'powered_off', 'powered_on'] and not all((vm_hardware, vm_disk, vm_nic, esxi)):
    module.fail_json(msg=""vm %s not present and not all options neccessary to create are provided"" % guest)
"
-------------------------------------------------------------------------
"```python
elif state in ['present', 'powered_off', 'powered_on'] and not all((vm_hardware, vm_disk, vm_nic, esxi)):
    module.fail_json(msg=""vm %s not present and not all options necessary to create are provided"" % guest)
```"
-------------------------------------------------------------------------
"elif state in ['present', 'powered_off', 'powered_on'] and not all((vm_hardware, vm_disk, vm_nic, esxi)):
    module.fail_json(msg=""vm %s not present and not all options neccessary to create are provided"" % guest)
"
-------------------------------------------------------------------------
"Recom
PRs: 55285, 55462"
-------------------------------------------------------------------------
=========================================================================
"if data is None or isinstance(data, bytes):
    data_bytes = data
else:
    data_bytes = data.encode(encoding, 'surrogateescape')
"
-------------------------------------------------------------------------
"```python
if data is None or isinstance(data, bytes):
    data_bytes = data
else:
    data_bytes = data.encode(encoding, 'surrogateescape')
```"
-------------------------------------------------------------------------
"if data is None or isinstance(data, bytes):
    data_bytes = data
else:
    data_bytes = data.encode(encoding, 'surrogateescape')
"
-------------------------------------------------------------------------
"Recom
PRs: 55364, 55423"
-------------------------------------------------------------------------
=========================================================================
"if data is None or isinstance(data, bytes):
    data_bytes = data
else:
    data_bytes = data.encode(encoding, 'surrogateescape')
"
-------------------------------------------------------------------------
"```python
if data is None or isinstance(data, bytes):
    data_bytes = data
else:
    data_bytes = data.encode(encoding, 'surrogateescape')
```"
-------------------------------------------------------------------------
"if data is None or isinstance(data, bytes):
    data_bytes = data
else:
    data_bytes = data.encode(encoding, 'surrogateescape')
"
-------------------------------------------------------------------------
"Recom
PRs: 55364, 55422"
-------------------------------------------------------------------------
=========================================================================
"if data is None or isinstance(data, bytes):
    data_bytes = data
else:
    data_bytes = data.encode(encoding, 'surrogateescape')
"
-------------------------------------------------------------------------
"```python
data_bytes = data if data is None or isinstance(data, bytes) else data.encode(encoding, 'surrogateescape')
```"
-------------------------------------------------------------------------
"if data is None or isinstance(data, bytes):
    data_bytes = data
else:
    data_bytes = data.encode(encoding, 'surrogateescape')
"
-------------------------------------------------------------------------
"Recom
PRs: 55364, 55421"
-------------------------------------------------------------------------
=========================================================================
"display.sensitive.add(str(self.connection.password))
"
-------------------------------------------------------------------------
"```python
display.sensitive.add(str(self.connection.password) if self.connection.password else '')
```"
-------------------------------------------------------------------------
"display.sensitive.add(str(self.connection.password))
"
-------------------------------------------------------------------------
"Recom
PRs: 55328, 55336"
-------------------------------------------------------------------------
=========================================================================
"self.instance_id = str(config['instance_id'])
"
-------------------------------------------------------------------------
"```python
self.instance_id = str(config['instance_id'])
```"
-------------------------------------------------------------------------
"self.instance_id = str(config['instance_id'])
"
-------------------------------------------------------------------------
"Recom
PRs: 55328, 55336"
-------------------------------------------------------------------------
=========================================================================
"display.sensitive.add(str(self.connection.password))
"
-------------------------------------------------------------------------
"shutil.copy2(os.path.join(self.base_dir, 'id_rsa'), os.path.join(self.base_dir, '.ssh', 'id_rsa'))

             display.sensitive.add(str(self.connection.password))"
-------------------------------------------------------------------------
"display.sensitive.add(str(self.connection.password))
"
-------------------------------------------------------------------------
"Recom
PRs: 55328, 55335"
-------------------------------------------------------------------------
=========================================================================
"self.instance_id = str(config['instance_id'])
"
-------------------------------------------------------------------------
self.instance_id = str(config['instance_id'])
-------------------------------------------------------------------------
"self.instance_id = str(config['instance_id'])
"
-------------------------------------------------------------------------
"Recom
PRs: 55328, 55335"
-------------------------------------------------------------------------
=========================================================================
"GET_HEADERS = {'accept': 'application/json', 'OData-Version': '4.0'}
POST_HEADERS = {'content-type': 'application/json', 'accept': 'application/json',
'OData-Version': '4.0'}
{'content-type': 'application/json', 'accept': 'application/json',
 'OData-Version': '4.0'}
 {'accept': 'application/json', 'OData-Version': '4.0'}
"
-------------------------------------------------------------------------
"```python
GET_HEADERS = {'accept': 'application/json', 'OData-Version': '4.0'}
POST_HEADERS = {'content-type': 'application/json', 'accept': 'application/json',
'OData-Version': '4.0'}
```"
-------------------------------------------------------------------------
"GET_HEADERS = {'accept': 'application/json', 'OData-Version': '4.0'}
POST_HEADERS = {'content-type': 'application/json', 'accept': 'application/json',
'OData-Version': '4.0'}
{'content-type': 'application/json', 'accept': 'application/json',
 'OData-Version': '4.0'}
 {'accept': 'application/json', 'OData-Version': '4.0'}
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"resp = open_url(uri, method=""GET"", headers=GET_HEADERS,
"
-------------------------------------------------------------------------
"```python
resp = open_url(uri, method=""GET"", headers=GET_HEADERS)
```"
-------------------------------------------------------------------------
"resp = open_url(uri, method=""GET"", headers=GET_HEADERS,
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"def post_request(self, uri, pyld):
                        headers=POST_HEADERS, method=""POST"",
"
-------------------------------------------------------------------------
"def post_request(self, uri, pyld):
    headers=POST_HEADERS, method=""POST"","
-------------------------------------------------------------------------
"def post_request(self, uri, pyld):
                        headers=POST_HEADERS, method=""POST"",
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"def patch_request(self, uri, pyld):
                        headers=PATCH_HEADERS, method=""PATCH"",
"
-------------------------------------------------------------------------
"```python
def patch_request(self, uri, pyld):
        headers=PATCH_HEADERS, method=""PATCH"",
```"
-------------------------------------------------------------------------
"def patch_request(self, uri, pyld):
                        headers=PATCH_HEADERS, method=""PATCH"",
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"def delete_request(self, uri, pyld):
                        headers=DELETE_HEADERS, method=""DELETE"",
"
-------------------------------------------------------------------------
"```python
def delete_request(self, uri, pyld):
        headers = {'Content-Type': 'application/json'}
        headers.update(DELETE_HEADERS)
        resp = self._send_request(uri, data=None, headers=headers, method='DELETE', pyld=pyld)
        return resp
```"
-------------------------------------------------------------------------
"def delete_request(self, uri, pyld):
                        headers=DELETE_HEADERS, method=""DELETE"",
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"self.post_request(self.root_uri  _data[u""Actions""][""#LogService.ClearLog""][""target""], {})
"
-------------------------------------------------------------------------
"```python
self.post_request(self.root_uri + _data[u""Actions""][""#LogService.ClearLog""][""target""], {})
```"
-------------------------------------------------------------------------
"self.post_request(self.root_uri  _data[u""Actions""][""#LogService.ClearLog""][""target""], {})
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"response = self.post_request(self.root_uri  action_uri, payload)
"
-------------------------------------------------------------------------
"```python
response = self.post_request(self.root_uri, action_uri, payload)
```"
-------------------------------------------------------------------------
"response = self.post_request(self.root_uri  action_uri, payload)
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"response = self.patch_request(self.root_uri  chassis_uri, payload)
"
-------------------------------------------------------------------------
"response = self.patch_request(self.root_uri, chassis_uri, payload)"
-------------------------------------------------------------------------
"response = self.patch_request(self.root_uri  chassis_uri, payload)
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"response = self.post_request(self.root_uri  action_uri, payload)
"
-------------------------------------------------------------------------
"response = self.post_request(self.root_uri, action_uri, payload)"
-------------------------------------------------------------------------
"response = self.post_request(self.root_uri  action_uri, payload)
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"response = self.patch_request(uri, payload)
"
-------------------------------------------------------------------------
"response = RedfishUtils.patch_request(uri, payload)"
-------------------------------------------------------------------------
"response = self.patch_request(uri, payload)
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"response = self.patch_request(uri, payload)
"
-------------------------------------------------------------------------
"response = self.patch_request(uri, payload)"
-------------------------------------------------------------------------
"response = self.patch_request(uri, payload)
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"response = self.patch_request(uri, payload)
"
-------------------------------------------------------------------------
"```python
response = self.patch_request(uri, payload)
```"
-------------------------------------------------------------------------
"response = self.patch_request(uri, payload)
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"response = self.patch_request(uri, payload)
"
-------------------------------------------------------------------------
"response = self.patch_request(uri, payload)"
-------------------------------------------------------------------------
"response = self.patch_request(uri, payload)
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"response = self.patch_request(uri, payload)
"
-------------------------------------------------------------------------
"response = self.patch_request(uri, payload)"
-------------------------------------------------------------------------
"response = self.patch_request(uri, payload)
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"response = self.patch_request(uri, payload)
"
-------------------------------------------------------------------------
"response = self.patch_request(uri, payload)"
-------------------------------------------------------------------------
"response = self.patch_request(uri, payload)
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"response = self.post_request(self.root_uri  reset_bios_settings_uri, {})
"
-------------------------------------------------------------------------
"response = self.post_request(self.root_uri + reset_bios_settings_uri, {})"
-------------------------------------------------------------------------
"response = self.post_request(self.root_uri  reset_bios_settings_uri, {})
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"response = self.patch_request(self.root_uri  self.systems_uris[0], payload)
"
-------------------------------------------------------------------------
"```python
response = self.patch_request(self.root_uri, self.systems_uris[0], payload)
```"
-------------------------------------------------------------------------
"response = self.patch_request(self.root_uri  self.systems_uris[0], payload)
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"response = self.patch_request(self.root_uri  set_bios_attr_uri, payload)
"
-------------------------------------------------------------------------
"```python
response = self.patch_request(self.root_uri + set_bios_attr_uri, payload)
```"
-------------------------------------------------------------------------
"response = self.patch_request(self.root_uri  set_bios_attr_uri, payload)
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.redfish_utils import RedfishUtils
"
-------------------------------------------------------------------------
from ansible.module_utils.redfish_utils import RedfishUtils
-------------------------------------------------------------------------
"from ansible.module_utils.redfish_utils import RedfishUtils
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"self.root_uri  self.manager_uri  ""/""  jobs, payload)
"
-------------------------------------------------------------------------
"```python
self.root_uri  self.manager_uri  ""/""  jobs, payload)
```"
-------------------------------------------------------------------------
"self.root_uri  self.manager_uri  ""/""  jobs, payload)
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.redfish_utils import RedfishUtils
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.redfish_utils import RedfishUtils
```"
-------------------------------------------------------------------------
"from ansible.module_utils.redfish_utils import RedfishUtils
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"response = self.patch_request(self.root_uri  self.manager_uri  ""/""  key, payload)
"
-------------------------------------------------------------------------
"```python
response = self.patch_request(self.root_uri + self.manager_uri + ""/"" + key, payload)
```"
-------------------------------------------------------------------------
"response = self.patch_request(self.root_uri  self.manager_uri  ""/""  key, payload)
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.redfish_utils import RedfishUtils
"
-------------------------------------------------------------------------
"```python
from future import __future__
import re
from ansible.module_utils.redfish_utils import RedfishUtils
from ansible.module_utils._text import to_native
from ansible.module_utils.basic import AnsibleModule
```"
-------------------------------------------------------------------------
"from ansible.module_utils.redfish_utils import RedfishUtils
"
-------------------------------------------------------------------------
"Recom
PRs: 55193, 55299"
-------------------------------------------------------------------------
=========================================================================
"""ca_cert"": ""sslrootcert""
"
-------------------------------------------------------------------------
"""ca_cert"": ""sslrootcert"""
-------------------------------------------------------------------------
"""ca_cert"": ""sslrootcert""
"
-------------------------------------------------------------------------
"Recom
PRs: 55277, 55287"
-------------------------------------------------------------------------
=========================================================================
"# check if user is trying to perform state operation on a vm which doesn't exists
elif state in ['present', 'powered_off', 'powered_on'] and not all((vm_extra_config,
                                               vm_hardware, vm_disk, vm_nic, esxi)):
    module.exit_json(changed=False, msg=""vm %s not present"" % guest)


"
-------------------------------------------------------------------------
"```python
# check if the user is trying to perform a state operation on a VM that does not exist
elif state in ['present', 'powered_off', 'powered_on'] and not all((vm_extra_config, vm_hardware, vm_disk, vm_nic, esxi)):
    module.exit_json(changed=False, msg=""VM %s does not exist"" % guest)
```"
-------------------------------------------------------------------------
"elif state in ['present', 'powered_off', 'powered_on'] and not all((vm_hardware, vm_disk, vm_nic, esxi)):
    module.fail_json(msg=""vm %s not present and not all options neccessary to create are provided"" % guest)
"
-------------------------------------------------------------------------
"Recom
PRs: 19716, 55285"
-------------------------------------------------------------------------
=========================================================================
"data: ""{{ lookup('file', '/path/to/config/file') | b64encode }}""
"
-------------------------------------------------------------------------
"data: ""{{ lookup('file', '/path/to/secret/file') | b64encode }}"""
-------------------------------------------------------------------------
"data: ""{{ lookup('file', '/path/to/config/file') | b64encode }}""
"
-------------------------------------------------------------------------
"Recom
PRs: 55257, 55260"
-------------------------------------------------------------------------
=========================================================================
"data: ""{{ lookup('file', '/path/to/secret/file') | b64encode }}""
"
-------------------------------------------------------------------------
"data: ""{{ lookup('file', '/path/to/secret/file') | b64encode }}"""
-------------------------------------------------------------------------
"data: ""{{ lookup('file', '/path/to/secret/file') | b64encode }}""
"
-------------------------------------------------------------------------
"Recom
PRs: 55257, 55260"
-------------------------------------------------------------------------
=========================================================================
"if not isinstance(v, string_types):
    self.client.module.warn(
        ""Non-string value found for log_options option '%s'. The value is automatically converted to '%s'. ""
        ""If this is not correct, or you want to avoid such warnings, please quote the value."" % (k, str(v))
    )
v = str(v)
self.log_options[k] = v
options['Config'][k] = v
"
-------------------------------------------------------------------------
"```python
if not isinstance(v, str):
    self.client.module.warn(
        ""Non-string value found for log_options option '%s'. The value is automatically converted to '%s'. ""
        ""If this is not correct, or you want to avoid such warnings, please quote the value."" % (k, str(v))
    )
v = str(v)
self.log_options[k] = v
options['Config'][k] = v
```"
-------------------------------------------------------------------------
"if not isinstance(v, string_types):
    self.client.module.warn(
        ""Non-string value found for log_options option '%s'. The value is automatically converted to '%s'. ""
        ""If this is not correct, or you want to avoid such warnings, please quote the value."" % (k, str(v))
    )
v = str(v)
self.log_options[k] = v
options['Config'][k] = v
"
-------------------------------------------------------------------------
"Recom
PRs: 54955, 55236"
-------------------------------------------------------------------------
=========================================================================
"self.fail(""Non-string value found for env option. Ambiguous env options must be ""
          ""wrapped in quotes to avoid them being interpreted. Key: %s"" % (name, ))
"
-------------------------------------------------------------------------
"```python
self.fail(""Non-string value found for env option. Ambiguous env options must be ""
          ""wrapped in quotes to avoid them being interpreted. Key: %s"" % name)
```"
-------------------------------------------------------------------------
"self.fail(""Non-string value found for env option. Ambiguous env options must be ""
          ""wrapped in quotes to avoid them being interpreted. Key: %s"" % (name, ))
"
-------------------------------------------------------------------------
"Recom
PRs: 54955, 55236"
-------------------------------------------------------------------------
=========================================================================
"self.fail(""The module option '%s' cannot be specified in the comparisons dict, ""
          ""since it does not correspond to container's state!"" % key)
"
-------------------------------------------------------------------------
"self.fail(""The module option '%s' cannot be specified in the comparisons dict, since it does not correspond to container's state!"" % key)"
-------------------------------------------------------------------------
"self.fail(""The module option '%s' cannot be specified in the comparisons dict, ""
          ""since it does not correspond to container's state!"" % key)
"
-------------------------------------------------------------------------
"Recom
PRs: 54955, 55236"
-------------------------------------------------------------------------
=========================================================================
"if not isinstance(v, string_types):
    self.client.module.warn(
        ""Non-string value found for log_options option '%s'. The value is automatically converted to '%s'. ""
        ""If this is not correct, or you want to avoid such warnings, please quote the value."" % (k, str(v))
    )
v = str(v)
self.log_options[k] = v
options['Config'][k] = v
"
-------------------------------------------------------------------------
"```python
if not isinstance(v, str):
    self.client.module.warn(
        ""Non-string value found for log_options option '%s'. The value is automatically converted to '%s'. ""
        ""If this is not correct, or you want to avoid such warnings, please quote the value."" % (k, str(v))
    )
v = str(v)
self.log_options[k] = v
options['Config'][k] = v
```"
-------------------------------------------------------------------------
"if not isinstance(v, string_types):
    self.client.module.warn(
        ""Non-string value found for log_options option '%s'. The value is automatically converted to '%s'. ""
        ""If this is not correct, or you want to avoid such warnings, please quote the value."" % (k, str(v))
    )
v = str(v)
self.log_options[k] = v
options['Config'][k] = v
"
-------------------------------------------------------------------------
"Recom
PRs: 54955, 55235"
-------------------------------------------------------------------------
=========================================================================
"'GitHub may not have fully replicated the commit across their infrastructure.\n'
'It is also possible the commit was removed by a force push between job creation and execution.\n'
"
-------------------------------------------------------------------------
"```python
        raise ApplicationError('Commit %s was not found:\n\n%s\n\n'
                               'Find the latest run for the pull request and restart failed jobs as needed.\n'
                               'GitHub may not have fully replicated the commit across their infrastructure.\n'
                               'It is also possible the commit was removed by a force push between job creation and execution.\n'
                               % (commit, ex.stderr.strip()))
```"
-------------------------------------------------------------------------
"'GitHub may not have fully replicated the commit across their infrastructure.\n'
'It is also possible the commit was removed by a force push between job creation and execution.\n'
"
-------------------------------------------------------------------------
"Recom
PRs: 55186, 55225"
-------------------------------------------------------------------------
=========================================================================
"os.path.relpath(test_env.vars_file, test_env.integration_dir),
"
-------------------------------------------------------------------------
"```python
os.path.relpath(test_env.vars_file, test_env.integration_dir)
```"
-------------------------------------------------------------------------
"os.path.relpath(test_env.vars_file, test_env.integration_dir),
"
-------------------------------------------------------------------------
"Recom
PRs: 55186, 55225"
-------------------------------------------------------------------------
=========================================================================
"cmd = ['ansible-playbook', filename, '-i', os.path.relpath(test_env.inventory_path, test_env.integration_dir)]
"
-------------------------------------------------------------------------
"```python
cmd = ['ansible-playbook', filename, '-i', os.path.relpath(test_env.inventory_path, test_env.integration_dir)]
```"
-------------------------------------------------------------------------
"cmd = ['ansible-playbook', filename, '-i', os.path.relpath(test_env.inventory_path, test_env.integration_dir)]
"
-------------------------------------------------------------------------
"Recom
PRs: 55186, 55225"
-------------------------------------------------------------------------
=========================================================================
"integration_dir = os.path.abspath('test/integration')
inventory_path = os.path.abspath(inventory_path)
vars_file = os.path.join(integration_dir, vars_file)
yield IntegrationEnvironment(integration_dir, inventory_path, ansible_config, vars_file)
"
-------------------------------------------------------------------------
"```python
integration_dir = os.path.abspath('test/integration')
inventory_path = os.path.abspath(inventory_path)
vars_file = os.path.join(integration_dir, vars_file)
yield IntegrationEnvironment(integration_dir, inventory_path, ansible_config, vars_file)
```"
-------------------------------------------------------------------------
"integration_dir = os.path.abspath('test/integration')
inventory_path = os.path.abspath(inventory_path)
vars_file = os.path.join(integration_dir, vars_file)
yield IntegrationEnvironment(integration_dir, inventory_path, ansible_config, vars_file)
"
-------------------------------------------------------------------------
"Recom
PRs: 55186, 55225"
-------------------------------------------------------------------------
=========================================================================
"inventory_path = os.path.join(integration_dir, inventory_name)
vars_file = os.path.join(integration_dir, vars_file)

yield IntegrationEnvironment(integration_dir, inventory_path, ansible_config, vars_file)
"
-------------------------------------------------------------------------
"```python
inventory_path = os.path.join(integration_dir, inventory_name)
vars_file = os.path.join(integration_dir, vars_file)

yield IntegrationEnvironment(integration_dir, inventory_path, ansible_config, vars_file)
```"
-------------------------------------------------------------------------
"inventory_path = os.path.join(integration_dir, inventory_name)
vars_file = os.path.join(integration_dir, vars_file)

yield IntegrationEnvironment(integration_dir, inventory_path, ansible_config, vars_file)
"
-------------------------------------------------------------------------
"Recom
PRs: 55186, 55225"
-------------------------------------------------------------------------
=========================================================================
"- Create or drop indexes from a PostgreSQL database.
- For more information see U(https://www.postgresql.org/docs/current/sql-createindex.html),
U(https://www.postgresql.org/docs/current/sql-dropindex.html).
"
-------------------------------------------------------------------------
"```python
DOCUMENTATION = '''
module: postgresql_idx
short_description: Create or drop indexes from a PostgreSQL database
'''
```"
-------------------------------------------------------------------------
"- Create or drop indexes from a PostgreSQL database.
- For more information see U(https://www.postgresql.org/docs/current/sql-createindex.html),
U(https://www.postgresql.org/docs/current/sql-dropindex.html).
"
-------------------------------------------------------------------------
"Recom
PRs: 55131, 55209"
-------------------------------------------------------------------------
=========================================================================
"- Name of database to connect to and where the index will be created/dropped.
"
-------------------------------------------------------------------------
"```python
options:
  db:
    description: Name of database to connect to and where the index will be created/dropped.
    type: str
    aliases:
      - login_db
```"
-------------------------------------------------------------------------
"- Name of database to connect to and where the index will be created/dropped.
"
-------------------------------------------------------------------------
"Recom
PRs: 55131, 55209"
-------------------------------------------------------------------------
=========================================================================
"- Name of a database schema where the index will be created.
type: str
"
-------------------------------------------------------------------------
"```yaml
  schema:
    description: Name of a database schema where the index will be created.
    type: str
```"
-------------------------------------------------------------------------
"- Name of a database schema where the index will be created.
type: str
"
-------------------------------------------------------------------------
"Recom
PRs: 55131, 55209"
-------------------------------------------------------------------------
=========================================================================
"- I(state=present) implies the index will be created if it does not exist.
- I(state=absent) implies the index will be dropped if it exists.
"
-------------------------------------------------------------------------
"```yaml
options:
  state:
    description:
    - Indicates the desired state of the index.
    type: str
    default: present
    choices: [ absent, present ]
```"
-------------------------------------------------------------------------
"- I(state=present) implies the index will be created if it does not exist.
- I(state=absent) implies the index will be dropped if it exists.
"
-------------------------------------------------------------------------
"Recom
PRs: 55131, 55209"
-------------------------------------------------------------------------
=========================================================================
"- List of index columns that need to be covered by index.
"
-------------------------------------------------------------------------
"```yaml
options:
  required: true
  columns:
    description:
      - List of index columns that need to be covered by index.
    type: list
    aliases: []
```"
-------------------------------------------------------------------------
"- List of index columns that need to be covered by index.
"
-------------------------------------------------------------------------
"Recom
PRs: 55131, 55209"
-------------------------------------------------------------------------
=========================================================================
"- Pay attention, if I(concurrent=no), the table will be locked (ACCESS EXCLUSIVE) during the building process.
  For more information about the lock levels see U(https://www.postgresql.org/docs/current/explicit-locking.html).
- If the building process was interrupted for any reason when I(cuncurrent=yes), the index becomes invalid.
  In this case it should be dropped and created again.
"
-------------------------------------------------------------------------
"```yaml
options:
  concurrent:
    description:
    - Enable or disable concurrent mode (CREATE / DROP INDEX CONCURRENTLY).
    - Mutually exclusive with I(cascade=yes).
    - Pay attention, if I(concurrent=no), the table will be locked (ACCESS EXCLUSIVE) during the building process.
    - If the building process was interrupted for any reason when I(concurrent=yes), the index becomes invalid.
      In this case it should be dropped and created again.
    - For more information about the lock levels see U(https://www.postgresql.org/docs/current/explicit-locking.html).
    type: bool
    default: yes
```"
-------------------------------------------------------------------------
"- Pay attention, if I(concurrent=no), the table will be locked (ACCESS EXCLUSIVE) during the building process.
  For more information about the lock levels see U(https://www.postgresql.org/docs/current/explicit-locking.html).
- If the building process was interrupted for any reason when I(cuncurrent=yes), the index becomes invalid.
  In this case it should be dropped and created again.
"
-------------------------------------------------------------------------
"Recom
PRs: 55131, 55209"
-------------------------------------------------------------------------
=========================================================================
"- The index building process can affect database performance.
- To avoid table locks on production databases, use I(concurrent=yes) (default behavior).
"
-------------------------------------------------------------------------
"```yaml
notes:
- The index building process can affect database performance.
- To avoid table locks on production databases, use I(concurrent=yes) (default behavior).
```"
-------------------------------------------------------------------------
"- The index building process can affect database performance.
- To avoid table locks on production databases, use I(concurrent=yes) (default behavior).
"
-------------------------------------------------------------------------
"Recom
PRs: 55131, 55209"
-------------------------------------------------------------------------
=========================================================================
"db_connection.commit()
"
-------------------------------------------------------------------------
"```python
db_connection.commit()
```"
-------------------------------------------------------------------------
"db_connection.commit()
"
-------------------------------------------------------------------------
"Recom
PRs: 55131, 55209"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_bytes, to_native
"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes, to_native"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes, to_native
"
-------------------------------------------------------------------------
"Recom
PRs: 55150, 55163"
-------------------------------------------------------------------------
=========================================================================
"'APIC-Request-Signature=%s' % to_native(sig_signature)
"
-------------------------------------------------------------------------
"         self.headers['Cookie'] = 'APIC-Certificate-Algorithm=v1.0; ' +\
                                  'APIC-Certificate-DN=%s; ' % to_native(sig_dn) +\
                                  'APIC-Certificate-Fingerprint=fingerprint; ' +\
                                  'APIC-Request-Signature=%s' % to_native(sig_signature)"
-------------------------------------------------------------------------
"'APIC-Request-Signature=%s' % to_native(sig_signature)
"
-------------------------------------------------------------------------
"Recom
PRs: 55150, 55163"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_bytes, to_native
"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes, to_native"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes, to_native
"
-------------------------------------------------------------------------
"Recom
PRs: 55150, 55161"
-------------------------------------------------------------------------
=========================================================================
"'APIC-Request-Signature=%s' % to_native(sig_signature)
"
-------------------------------------------------------------------------
"```python
self.headers['Cookie'] = 'APIC-Certificate-Algorithm=v1.0; ' +\
                                  'APIC-Certificate-DN=%s; ' % sig_dn +\
                                  'APIC-Certificate-Fingerprint=fingerprint; ' +\
                                  'APIC-Request-Signature=%s' % to_native(sig_signature)
```"
-------------------------------------------------------------------------
"'APIC-Request-Signature=%s' % to_native(sig_signature)
"
-------------------------------------------------------------------------
"Recom
PRs: 55150, 55161"
-------------------------------------------------------------------------
=========================================================================
"except AttributeError:
    pass  # older versions of dnf didn't require this and don't have these methods
self._specify_repositories(base, disablerepo, enablerepo)
try:

"
-------------------------------------------------------------------------
"self._specify_repositories(base, disablerepo, enablerepo)
try:"
-------------------------------------------------------------------------
"except AttributeError:
    pass  # older versions of dnf didn't require this and don't have these methods
self._specify_repositories(base, disablerepo, enablerepo)
try:

"
-------------------------------------------------------------------------
"Recom
PRs: 54923, 54994"
-------------------------------------------------------------------------
=========================================================================
"self.module_base.enable([module])
"
-------------------------------------------------------------------------
self.module_base.enable([module])
-------------------------------------------------------------------------
"self.module_base.enable([module])
"
-------------------------------------------------------------------------
"Recom
PRs: 54923, 54994"
-------------------------------------------------------------------------
=========================================================================
"self.module_base.disable([module])
self.module_base.reset([module])
"
-------------------------------------------------------------------------
"```python
self.module_base.disable([module])
self.module_base.reset([module])
```"
-------------------------------------------------------------------------
"self.module_base.disable([module])
self.module_base.reset([module])
"
-------------------------------------------------------------------------
"Recom
PRs: 54923, 54994"
-------------------------------------------------------------------------
=========================================================================
"if params['direction'] not in ['outgoing', 'incoming', 'routed', None]:
    module.fail_json(msg='For default, direction must be one of ""outgoing"", ""incoming"" and ""routed"", or direction must not be specified.')
"
-------------------------------------------------------------------------
"```python
if params['direction'] not in ['outgoing', 'incoming', 'routed', None]:
    module.fail_json(msg='For default, direction must be one of ""outgoing"", ""incoming"" and ""routed"", or direction must not be specified.')
```"
-------------------------------------------------------------------------
"if params['direction'] not in ['outgoing', 'incoming', 'routed', None]:
    module.fail_json(msg='For default, direction must be one of ""outgoing"", ""incoming"" and ""routed"", or direction must not be specified.')
    module.fail_json(msg='For rules, direction must be one of ""in"" and ""out"", or direction must not be specified.')
"
-------------------------------------------------------------------------
"Recom
PRs: 54799, 54987"
-------------------------------------------------------------------------
=========================================================================
"dirname = os.path.dirname(dest) or '.'
if not os.access(dirname, os.W_OK):
    raise ModuleFailException(""Destination dir %s not writable"" % (dirname))
"
-------------------------------------------------------------------------
"```python
dirname = os.path.dirname(dest) or '.'
if not os.access(dirname, os.W_OK):
    raise ModuleFailException(""Destination dir %s not writable"" % (dirname))
```"
-------------------------------------------------------------------------
"dirname = os.path.dirname(dest) or '.'
if not os.access(dirname, os.W_OK):
    raise ModuleFailException(""Destination dir %s not writable"" % (dirname))
"
-------------------------------------------------------------------------
"Recom
PRs: 54754, 54807"
-------------------------------------------------------------------------
=========================================================================
"#     wait: yes
"
-------------------------------------------------------------------------
"```python
EXAMPLES = r'''
 #     type: TXT
 #     ttl: 60
 #     state: present
 #     # Note: route53 requires TXT entries to be enclosed in quotes
 #     value: ""{{ sample_com_challenge.challenge_data['sample.com']['dns-01'].resource_value | regex_replace('^(.*)$', '\""\\1\""') }}""
 #     when: sample_com_challenge is changed
 #     wait: yes
''' 
```"
-------------------------------------------------------------------------
"#     wait: yes
"
-------------------------------------------------------------------------
"Recom
PRs: 54744, 54806"
-------------------------------------------------------------------------
=========================================================================
"#     wait: yes
"
-------------------------------------------------------------------------
"EXAMPLES = r'''
 #     type: TXT
 #     ttl: 60
 #     state: present
 #     # Note: item.value is a list of TXT entries, and route53
 #     # requires every entry to be enclosed in quotes
 #     value: ""{{ item.value | map('regex_replace', '^(.*)$', '\""\\1\""' ) | list }}""
'''"
-------------------------------------------------------------------------
"#     wait: yes
"
-------------------------------------------------------------------------
"Recom
PRs: 54744, 54806"
-------------------------------------------------------------------------
=========================================================================
"- ""RSA keys can be created with C(openssl genrsa ...). Elliptic curve keys can
"
-------------------------------------------------------------------------
"""RSA keys can be created with C(openssl genrsa ...). Elliptic curve keys can be"""
-------------------------------------------------------------------------
"- ""RSA keys can be created with C(openssl genrsa ...). Elliptic curve keys can
"
-------------------------------------------------------------------------
"Recom
PRs: 54744, 54806"
-------------------------------------------------------------------------
=========================================================================
"changed = 1
"
-------------------------------------------------------------------------
"```python
changed = 1
```"
-------------------------------------------------------------------------
"changed = 1
"
-------------------------------------------------------------------------
"Recom
PRs: 54105, 54713"
-------------------------------------------------------------------------
=========================================================================
"# Second run should not change anything
self.assertFalse(self.pamd.remove('account', 'required', 'pam_unix.so'))
"
-------------------------------------------------------------------------
"```python
self.assertFalse(self.pamd.remove('account', 'required', 'pam_unix.so'))
```"
-------------------------------------------------------------------------
"# Second run should not change anything
self.assertFalse(self.pamd.remove('account', 'required', 'pam_unix.so'))
"
-------------------------------------------------------------------------
"Recom
PRs: 54105, 54713"
-------------------------------------------------------------------------
=========================================================================
"from compose.const import DEFAULT_TIMEOUT, LABEL_SERVICE, LABEL_PROJECT, LABEL_ONE_OFF
"
-------------------------------------------------------------------------
"from compose.const import DEFAULT_TIMEOUT, LABEL_SERVICE, LABEL_PROJECT, LABEL_ONE_OFF"
-------------------------------------------------------------------------
"from compose.const import DEFAULT_TIMEOUT, LABEL_SERVICE, LABEL_PROJECT, LABEL_ONE_OFF
"
-------------------------------------------------------------------------
"Recom
PRs: 54316, 54704"
-------------------------------------------------------------------------
=========================================================================
"if self.remove_orphans:
    containers = self.client.containers(
        filters={
            'label': [
                '{0}={1}'.format(LABEL_PROJECT, self.project.name),
                '{0}={1}'.format(LABEL_ONE_OFF, ""False"")
            ],
        }
    )

    orphans = []
    for container in containers:
        service_name = container.get('Labels', {}).get(LABEL_SERVICE)
        if service_name not in self.project.service_names:
            orphans.append(service_name)

    if orphans:
        result['changed'] = True

"
-------------------------------------------------------------------------
"```python
if self.remove_orphans:
    containers = self.client.containers(
        filters={
            'label': [
                '{0}={1}'.format(LABEL_PROJECT, self.project.name),
                '{0}={1}'.format(LABEL_ONE_OFF, ""False"")
            ],
        }
    )

    orphans = []
    for container in containers:
        service_name = container.get('Labels', {}).get(LABEL_SERVICE)
        if service_name not in self.project.service_names:
            orphans.append(service_name)

    result['changed'] = bool(orphans)
```"
-------------------------------------------------------------------------
"if self.remove_orphans:
    containers = self.client.containers(
        filters={
            'label': [
                '{0}={1}'.format(LABEL_PROJECT, self.project.name),
                '{0}={1}'.format(LABEL_ONE_OFF, ""False"")
            ],
        }
    )

    orphans = []
    for container in containers:
        service_name = container.get('Labels', {}).get(LABEL_SERVICE)
        if service_name not in self.project.service_names:
            orphans.append(service_name)

    if orphans:
        result['changed'] = True

"
-------------------------------------------------------------------------
"Recom
PRs: 54316, 54704"
-------------------------------------------------------------------------
=========================================================================
"except requests.exceptions.Timeout as exc:
"
-------------------------------------------------------------------------
"```python
except requests.exceptions.Timeout as exc:
```"
-------------------------------------------------------------------------
"except requests.exceptions.Timeout as exc:
"
-------------------------------------------------------------------------
"Recom
PRs: 54104, 54506"
-------------------------------------------------------------------------
=========================================================================
"except requests.exceptions.Timeout as exc:
"
-------------------------------------------------------------------------
"```python
except requests.exceptions.Timeout as exc:
```"
-------------------------------------------------------------------------
"except requests.exceptions.Timeout as exc:
"
-------------------------------------------------------------------------
"Recom
PRs: 54104, 54505"
-------------------------------------------------------------------------
=========================================================================
"from random import Random, SystemRandom, shuffle, randint
"
-------------------------------------------------------------------------
"```python
from random import shuffle, randint
```"
-------------------------------------------------------------------------
"from random import Random, SystemRandom, shuffle, randint
"
-------------------------------------------------------------------------
"Recom
PRs: 53928, 54416"
-------------------------------------------------------------------------
=========================================================================
"# Generate random int between x1000000000 and xFFFFFFFFFF
v = randint(68719476736, 1099511627775)
"
-------------------------------------------------------------------------
"```python
v = randint(1000000000, 1099511627775)
```"
-------------------------------------------------------------------------
"# Generate random int between x1000000000 and xFFFFFFFFFF
v = randint(68719476736, 1099511627775)
"
-------------------------------------------------------------------------
"Recom
PRs: 53928, 54416"
-------------------------------------------------------------------------
=========================================================================
"- Backreferences can be used ambiguously like C(\1), or explicitly like C(\g<1>).
- If specified, only content after this match will be replaced/removed.
- Uses DOTALL, which means the C(.) special character I(can match newlines).
- If specified, only content before this match will be replaced/removed.
- Uses DOTALL, which means the C(.) special character I(can match newlines).
"
-------------------------------------------------------------------------
"Adapt the given code snippet based on the provided information:

```yaml
options:
  description: 
    - The string to replace regexp matches.
    - May contain backreferences that will get expanded with the regexp capture groups if the regexp matches.
    - If not set, matches are removed entirely.
  type: str
before:
  description:
    - If specified, only content before this match will be replaced/removed.
    - Uses DOTALL, which means the (.) special character can match newlines.
  type: str
  version_added: ""2.4""
after:
  description:
    - If specified, only content after this match will be replaced/removed.
    - Uses DOTALL, which means the (.) special character can match newlines.
  type: str
  version_added: ""2.4""
backup:
  description: 
    - Create a backup file before modifying the original.
  type: bool
  version_added: ""2.4""
```
"
-------------------------------------------------------------------------
"type: path
aliases: [ dest, destfile, name ]
"
-------------------------------------------------------------------------
"Recom
PRs: 31452, 54408"
-------------------------------------------------------------------------
=========================================================================
"- As of Ansible 2.7.10, the combined use of I(before) and I(after) works properly. If you were relying on the
  previous incorrect behavior, you may be need to adjust your tasks.
  See U(https://github.com/ansible/ansible/issues/31354) for details.
name: Before Ansible 2.3, option 'dest', 'destfile' or 'name' was used instead of 'path'
replace:
  path: /etc/apache2/sites-available/default.conf
  after: 'NameVirtualHost [*]'
  regexp: '^(.)$'
  replace: '# \1'
  path: /etc/apache2/sites-available/default.conf
  before: '# live site config'
  regexp: '^(.)$'
  replace: '# \1'
Prior to Ansible 2.7.10, using before and after in combination did the opposite of what was intended.
see https://github.com/ansible/ansible/issues/31354 for details.
  after: '<VirtualHost [*]>'
  before: '</VirtualHost>'
  regexp: '^(.)$'
  replace: '# \1'
name: Supports common file attributes
replace:
name: Supports a validate command
replace:
replace: path=/etc/hosts regexp='\\b(localhost)(\\d*)\\b' replace='\\1\\2.localdomain\\2 \\1\\2'
  path: /etc/hosts

name: Explicitly specifying positional matched groups in replacement
replace:
  path: /etc/ssh/sshd_config
  regexp: '^(ListenAddress[ ])[^\n]$'
  replace: '\g<1>0.0.0.0'

name: Explicitly specifying named matched groups
replace:
  path: /etc/ssh/sshd_config
  regexp: '^(?P<dctv>ListenAddress[ ])(?P<host>[^\n])$'
  replace: '#\g<dctv>\g<host>\n\g<dctv>0.0.0.0'
"
-------------------------------------------------------------------------
"'''
 
 EXAMPLES = r'''
     path: /etc/hosts
     regexp: '(\s+)old\.host\.name(\s+.*)?$'
     replace: '\1new.host.name\2'
 
 - name: Replace after the expression till the end of the file (requires Ansible >= 2.4)
   replace:
 
 - name: Replace before the expression till the begin of the file (requires Ansible >= 2.4)
   replace:
 
 - name: Replace between the expressions (requires Ansible >= 2.4)
   replace:
     path: /etc/hosts
 
     path: /home/jdoe/.ssh/known_hosts
     regexp: '^old\.host\.name[^\n]*\n'
     owner: jdoe
     group: jdoe
     mode: '0644'
 
     path: /etc/apache/ports
     regexp: '^(NameVirtualHost|Listen)\s+80\s*$'
     replace: '\1 127.0.0.1:8080'
     validate: '/usr/sbin/apache2ctl -f %s -t'
 
 - name: Short form task (in ansible 2+) necessitates backslash-escaped sequences
 
 - name: Long form task does not
   replace:
     regexp: '\b(localhost)(\d*)\b'
     replace: '\1\2.localdomain\2 \1\2'
 
 - name: Before Ansible 2.3, option 'dest', 'destfile' or 'name' was used instead of 'path'
   replace:
     path: /etc/apache2/sites-available/default.conf
     after: 'NameVirtualHost [*]'
     regexp: '^(.)$'
     replace: '# \1'
   replace:
     path: /etc/apache2/sites-available/default.conf
     before: '# live site config'
     regexp: '^(.)$'
     replace: '# \1'
 
   - As of Ansible 2.7.10, the combined use of I(before) and I(after) works properly. If you were relying on the
     previous incorrect behavior, you may be need to adjust your tasks.
     See U(https://github.com/ansible/ansible/issues/31354) for details.
 
   - Prior to Ansible 2.7.10, using before and after in combination did the opposite of what was intended.
     See U(https://github.com/ansible/ansible/issues/31354) for details.
     replace:
       path: /etc/apache2/sites-available/default.conf
       after: '<VirtualHost [*]>'
       before: '</VirtualHost>'
       regexp: '^(.)$'
       replace: '# \1'
 
 - name: Supports common file attributes
   replace:
 
 - name: Supports a validate command
   replace:
 
 - name: Explicitly specifying positional matched groups in replacement
   replace:
     path: /etc/ssh/sshd_config
     regexp: '^(ListenAddress[ ])[^\n]$'
     replace: '\g<1>0.0.0.0'
 
 - name: Explicitly specifying named matched groups
   replace:
     path: /etc/ssh/sshd_config
     regexp: '^(?P<dctv>ListenAddress[ ])(?P<host>[^\n])$'
     replace: '#\g<dctv>\g<host>\n\g<dctv>0.0.0.0'
 '''
 
 import os
'''"
-------------------------------------------------------------------------
"pattern = u'%s(?P<subsection>.*?)%s' % (params['after'], params['before'])
"
-------------------------------------------------------------------------
"Recom
PRs: 31452, 54408"
-------------------------------------------------------------------------
=========================================================================
"import tempfile
"
-------------------------------------------------------------------------
"```python
import tempfile
import os
import re

from ansible.module_utils import six
from ansible.module_utils._text import to_bytes, to_text
```"
-------------------------------------------------------------------------
"import tempfile
"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"def write_file(module, content, default_mode=None):
'''
Writes content into destination file as securely as possible.
Uses file arguments from module.
'''
# Find out parameters for file
file_args = module.load_file_common_arguments(module.params)
if file_args['mode'] is None:
    file_args['mode'] = default_mode
# Create tempfile name
tmp_fd, tmp_name = tempfile.mkstemp(prefix=b'.ansible_tmp')
try:
    os.close(tmp_fd)
except Exception as dummy:
    pass
module.add_cleanup_file(tmp_name)  # if we fail, let Ansible try to remove the file
try:
    try:
        # Create tempfile
        file = os.open(tmp_name, os.O_WRONLY | os.O_CREAT | os.O_TRUNC, 0o600)
        os.write(file, content)
        os.close(file)
    except Exception as e:
        try:
            os.remove(tmp_name)
        except Exception as dummy:
            pass
        module.fail_json(msg='Error while writing result into temporary file: {0}'.format(e))
    # Update destination to wanted permissions
    if os.path.exists(file_args['path']):
        module.set_fs_attributes_if_different(file_args, False)
    # Move tempfile to final destination
    module.atomic_move(tmp_name, file_args['path'])
    # Try to update permissions again
    module.set_fs_attributes_if_different(file_args, False)
except Exception as e:
    try:
        os.remove(tmp_name)
    except Exception as dummy:
        pass
    module.fail_json(msg='Error while writing result: {0}'.format(e))


"
-------------------------------------------------------------------------
"def write_file(module, content, default_mode=None):
    """"""
    Writes content into the destination file as securely as possible.
    Uses file arguments from the module.
    """"""
    file_args = module.load_file_common_arguments(module.params)
    if file_args['mode'] is None:
        file_args['mode'] = default_mode
        
    tmp_fd, tmp_name = tempfile.mkstemp(prefix=b'.ansible_tmp')
    
    try:
        os.close(tmp_fd)
    except Exception as dummy:
        pass
        
    module.add_cleanup_file(tmp_name)  # if we fail, let Ansible try to remove the file
    
    try:
        with os.fdopen(os.open(tmp_name, os.O_WRONLY | os.O_CREAT | os.O_TRUNC, 0o600), 'wb') as file:
            file.write(content)
            
    except Exception as e:
        try:
            os.remove(tmp_name)
        except Exception as dummy:
            pass
        module.fail_json(msg='Error while writing the result into the temporary file: {0}'.format(e))
    
    try:
        if os.path.exists(file_args['path']):
            module.set_fs_attributes_if_different(file_args, False)
            
        module.atomic_move(tmp_name, file_args['path'])
        module.set_fs_attributes_if_different(file_args, False)
        
    except Exception as e:
        try:
            os.remove(tmp_name)
        except Exception as dummy:
            pass
        module.fail_json(msg='Error while writing the result: {0}'.format(e))"
-------------------------------------------------------------------------
"def write_file(module, content, default_mode=None):
'''
Writes content into destination file as securely as possible.
Uses file arguments from module.
'''
# Find out parameters for file
file_args = module.load_file_common_arguments(module.params)
if file_args['mode'] is None:
    file_args['mode'] = default_mode
# Create tempfile name
tmp_fd, tmp_name = tempfile.mkstemp(prefix=b'.ansible_tmp')
try:
    os.close(tmp_fd)
except Exception as dummy:
    pass
module.add_cleanup_file(tmp_name)  # if we fail, let Ansible try to remove the file
try:
    try:
        # Create tempfile
        file = os.open(tmp_name, os.O_WRONLY | os.O_CREAT | os.O_TRUNC, 0o600)
        os.write(file, content)
        os.close(file)
    except Exception as e:
        try:
            os.remove(tmp_name)
        except Exception as dummy:
            pass
        module.fail_json(msg='Error while writing result into temporary file: {0}'.format(e))
    # Update destination to wanted permissions
    if os.path.exists(file_args['path']):
        module.set_fs_attributes_if_different(file_args, False)
    # Move tempfile to final destination
    module.atomic_move(tmp_name, file_args['path'])
    # Try to update permissions again
    module.set_fs_attributes_if_different(file_args, False)
except Exception as e:
    try:
        os.remove(tmp_name)
    except Exception as dummy:
        pass
    module.fail_json(msg='Error while writing result: {0}'.format(e))


"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"crypto_utils.write_file(module, certificate.public_bytes(Encoding.PEM))
"
-------------------------------------------------------------------------
"`crypto_utils.write_file(module, certificate.public_bytes(Encoding.PEM))`"
-------------------------------------------------------------------------
"crypto_utils.write_file(module, crypto.dump_certificate(crypto.FILETYPE_PEM, self.cert))
"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"crypto_utils.write_file(module, crypto.dump_certificate(crypto.FILETYPE_PEM, self.cert))
"
-------------------------------------------------------------------------
"```python
crypto_utils.write_file(module, crypto.dump_certificate(crypto.FILETYPE_PEM, self.cert), file_args)
```"
-------------------------------------------------------------------------
"crypto_utils.write_file(module, crypto.dump_certificate(crypto.FILETYPE_PEM, self.cert))
"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"crypto_utils.write_file(module, certificate.public_bytes(Encoding.PEM))
"
-------------------------------------------------------------------------
"`crypto_utils.write_file(module, certificate.public_bytes(Encoding.PEM))`"
-------------------------------------------------------------------------
"crypto_utils.write_file(module, to_bytes(crt))
"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"crypto_utils.write_file(module, result)
"
-------------------------------------------------------------------------
"`crypto_utils.write_file(module, result)`"
-------------------------------------------------------------------------
"result = crypto.dump_certificate_request(crypto.FILETYPE_PEM, self.request)
crypto_utils.write_file(module, result)
"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"
if module.params['mode'] is None:
    module.params['mode'] = '0400'
"
-------------------------------------------------------------------------
"```python
module.params.setdefault('mode', '0400')
```"
-------------------------------------------------------------------------
"
if module.params['mode'] is None:
    module.params['mode'] = '0400'
"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"crypto_utils.write_file(
    module,
    self.pkcs12.export(self.passphrase, self.iter_size, self.maciter_size),
    0o600
)
"
-------------------------------------------------------------------------
"```python
crypto_utils.write_file(module, self.pkcs12.export(self.passphrase, self.iter_size, self.maciter_size), 0o600)
```"
-------------------------------------------------------------------------
"crypto_utils.write_file(
    module,
    self.pkcs12.export(self.passphrase, self.iter_size, self.maciter_size),
    0o600
)
    with open(self.src, 'rb') as pkcs12_fh:
        pkcs12_content = pkcs12_fh.read()
    p12 = crypto.load_pkcs12(pkcs12_content,
    crypto_utils.write_file(module, b'%s%s' % (pkey, crt))
"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"if module.params['mode'] is None:
    module.params['mode'] = '0600'
"
-------------------------------------------------------------------------
"```python
if module.params['mode'] is None:
    module.params['mode'] = '0600'
```"
-------------------------------------------------------------------------
"if module.params['mode'] is None:
    module.params['mode'] = '0600'
"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"crypto_utils.write_file(module, privatekey_data, 0o600)
self.changed = True
"
-------------------------------------------------------------------------
"```python
crypto_utils.write_file(module, privatekey_data, 0o600)
self.changed = True
```"
-------------------------------------------------------------------------
"if self.cipher and self.passphrase:
    privatekey_data = crypto.dump_privatekey(crypto.FILETYPE_PEM, self.privatekey,
                                             self.cipher, to_bytes(self.passphrase))
else:
    privatekey_data = crypto.dump_privatekey(crypto.FILETYPE_PEM, self.privatekey)

crypto_utils.write_file(module, privatekey_data, 0o600)
self.changed = True
"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"crypto_utils.write_file(module, publickey_content)
"
-------------------------------------------------------------------------
"crypto_utils.write_file(module, publickey_content)"
-------------------------------------------------------------------------
"crypto_utils.write_file(module, publickey_content)
"
-------------------------------------------------------------------------
"Recom
PRs: 54085, 54354"
-------------------------------------------------------------------------
=========================================================================
"def remove(self, module):
    try:
        os.remove(self.path)
        self.changed = True
    except OSError as exc:
        module.fail_json(msg=to_native(exc))

"
-------------------------------------------------------------------------
"```python
    def remove(self, module):
        try:
            os.remove(self.path)
            self.changed = True
        except OSError as exc:
            module.fail_json(msg=to_native(exc))
```"
-------------------------------------------------------------------------
"def remove(self, module):
    try:
        os.remove(self.path)
        self.changed = True
    except OSError as exc:
        module.fail_json(msg=to_native(exc))

"
-------------------------------------------------------------------------
"Recom
PRs: 54296, 54352"
-------------------------------------------------------------------------
=========================================================================
"if os.path.exists(module.params['path']):
    try:
        dhparam.remove(module)
    except Exception as exc:
        module.fail_json(msg=to_native(exc))
"
-------------------------------------------------------------------------
"```python
if os.path.exists(module.params['path']):
    try:
        dhparam.remove(module)
    except Exception as exc:
        module.fail_json(msg=_text.to_native(exc))
```"
-------------------------------------------------------------------------
"if os.path.exists(module.params['path']):
    try:
        dhparam.remove(module)
    except Exception as exc:
        module.fail_json(msg=to_native(exc))
"
-------------------------------------------------------------------------
"Recom
PRs: 54296, 54352"
-------------------------------------------------------------------------
=========================================================================
"def dump(self, check_mode=False):
    # Use only for absent

    result = {
        'changed': self.changed,
        'filename': self.path,
        'privatekey': self.privatekey_path,
        'csr': self.csr_path
    }

    return result

"
-------------------------------------------------------------------------
"```python
def dump(self, check_mode=False):
    # Use only for absent

    result = {
        'changed': self.changed,
        'filename': self.path,
        'privatekey': self.privatekey_path,
        'csr': self.csr_path
    }

    return result
```"
-------------------------------------------------------------------------
"class CertificateAbsent(Certificate):
def __init__(self, module):
    super(CertificateAbsent, self).__init__(module)

def generate(self, module):
    pass

def dump(self, check_mode=False):
    # Use only for absent

    result = {
        'changed': self.changed,
        'filename': self.path,
        'privatekey': self.privatekey_path,
        'csr': self.csr_path
    }

    return result


"
-------------------------------------------------------------------------
"Recom
PRs: 54298, 54348"
-------------------------------------------------------------------------
=========================================================================
"- It uses the pyOpenSSL python library to interact with openssl.
"
-------------------------------------------------------------------------
"- This module allows one to (re)generate OpenSSL public keys from their private keys.
- Keys are generated in PEM format.
- It uses the PyOpenSSL Python library to interact with OpenSSL."
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native, to_bytes
"
-------------------------------------------------------------------------
"Recom
PRs: 54192, 54248"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_native, to_bytes
"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native, to_bytes"
-------------------------------------------------------------------------
"with open(self.privatekey_path, 'rb') as private_key_fh:
    privatekey_content = private_key_fh.read()
key = crypto_serialization.load_pem_private_key(
    privatekey_content,
    password=None if self.privatekey_passphrase is None else to_bytes(self.privatekey_passphrase),
    backend=default_backend()
)
"
-------------------------------------------------------------------------
"Recom
PRs: 54192, 54248"
-------------------------------------------------------------------------
=========================================================================
"- It uses the pyOpenSSL python library to interact with openssl.
"
-------------------------------------------------------------------------
"```yaml
version_added: ""2.3""
short_description: Generate an OpenSSL public key from its private key using the pyOpenSSL Python library.
description:
    - This module allows one to (re)generate OpenSSL public keys from their private keys using the pyOpenSSL Python library.
    - Keys are generated in PEM format.
    - This module works only if the version of PyOpenSSL is recent enough (> 16.0.0).
requirements:
   - os
   - __future__
   - cryptography.hazmat.primitives
   - OpenSSL
   - ansible.module_utils
   - cryptography.hazmat.backends
   - hashlib
   - ansible.module_utils._text
   - ansible.module_utils.basic
```  "
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native, to_bytes
"
-------------------------------------------------------------------------
"Recom
PRs: 54192, 54247"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_native, to_bytes
"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native, to_bytes"
-------------------------------------------------------------------------
"with open(self.privatekey_path, 'rb') as private_key_fh:
    privatekey_content = private_key_fh.read()
key = crypto_serialization.load_pem_private_key(
    privatekey_content,
    password=None if self.privatekey_passphrase is None else to_bytes(self.privatekey_passphrase),
    backend=default_backend()
)
"
-------------------------------------------------------------------------
"Recom
PRs: 54192, 54247"
-------------------------------------------------------------------------
=========================================================================
"task.args['_raw_params'] = task.args.pop('file', None)
"
-------------------------------------------------------------------------
"```python
task.args['_raw_params'] = task.args.pop('file', None)
```"
-------------------------------------------------------------------------
"task.args['_raw_params'] = task.args.pop('file', None)
"
-------------------------------------------------------------------------
"Recom
PRs: 54044, 54164"
-------------------------------------------------------------------------
=========================================================================
"if len(listed_remote) == 0:
    continue
"
-------------------------------------------------------------------------
"Add this code to the existing function `remote_exists`:

```python
if len(listed_remote) == 0:
    continue
```"
-------------------------------------------------------------------------
"if len(listed_remote) == 0:
    continue
"
-------------------------------------------------------------------------
"Recom
PRs: 52010, 54103"
-------------------------------------------------------------------------
=========================================================================
"ret = []
rn ret.get('all_parameters')
"
-------------------------------------------------------------------------
"```python
ret = []
if ret.get('all_parameters'):
```"
-------------------------------------------------------------------------
"return {}
rn ret.get('all_parameters')
"
-------------------------------------------------------------------------
"Recom
PRs: 51034, 54101"
-------------------------------------------------------------------------
=========================================================================
"for p in self._get_all_params_by_id(host['id']):
        self.inventory.set_variable(host['name'], p['name'], p['value'])
        self.display.warning(""Could not set parameter hostvar for %s, skipping %s: %s"" % (host, p['name'], to_native(p['value'])))
"
-------------------------------------------------------------------------
"```python
for p in self._get_all_params_by_id(host['id']):
    self.inventory.set_variable(host['name'], p['name'], p['value'])
    self.display.warning(""Could not set parameter hostvar for %s, skipping %s: %s"" % (host, p['name'], to_native(p['value'])))
```"
-------------------------------------------------------------------------
"for p in self._get_all_params_by_id(host['id']):
        self.inventory.set_variable(host['name'], p['name'], p['value'])
        self.display.warning(""Could not set parameter hostvar for %s, skipping %s: %s"" % (host, p['name'], to_native(p['value'])))
"
-------------------------------------------------------------------------
"Recom
PRs: 51034, 54101"
-------------------------------------------------------------------------
=========================================================================
"- Modify Ansible Tower settings. See
    - Name of setting to modify
  required: True
  required: True
"
-------------------------------------------------------------------------
"'''
description:
  - Modify Ansible Tower settings. See
      - Name of setting to modify
options:
  name:
    required: true
  value:
    required: true
extends_documentation_fragment: tower
'''
"
-------------------------------------------------------------------------
"- Modify Ansible Tower settings. See
    - Name of setting to modify
  required: True
  required: True
"
-------------------------------------------------------------------------
"Recom
PRs: 54028, 54051"
-------------------------------------------------------------------------
=========================================================================
"name=dict(required=True),
value=dict(required=True),
"
-------------------------------------------------------------------------
"```python
except ImportError:

    def main():
        argument_spec = dict(
            name=dict(required=True),
            value=dict(required=True)
        )

        module = TowerModule(
            module_args=argument_spec
        )
```"
-------------------------------------------------------------------------
"name=dict(required=True),
value=dict(required=True),
"
-------------------------------------------------------------------------
"Recom
PRs: 54028, 54051"
-------------------------------------------------------------------------
=========================================================================
"self._config_data.get('compose'), hostvars[host], host)
"
-------------------------------------------------------------------------
"```python
self._config_data.get('compose'), hostvars[host]
```"
-------------------------------------------------------------------------
"self._config_data.get('compose'), hostvars[host], host)
"
-------------------------------------------------------------------------
"Recom
PRs: 48833, 54039"
-------------------------------------------------------------------------
=========================================================================
"self._config_data.get('groups'), hostvars[host], host)

nstructed groups based on jinja expressions
._add_host_to_keyed_groups(
self._config_data.get('keyed_groups'), hostvars[host], host)
"
-------------------------------------------------------------------------
"```python
# Constructed groups based on jinja expressions
self._add_host_to_composed_groups(
    self._config_data.get('groups'), hostvars[host], host)

self._add_host_to_keyed_groups(
    self._config_data.get('keyed_groups'), hostvars[host], host)
```"
-------------------------------------------------------------------------
"self._config_data.get('groups'), hostvars[host], host)

nstructed groups based on jinja expressions
._add_host_to_keyed_groups(
self._config_data.get('keyed_groups'), hostvars[host], host)
"
-------------------------------------------------------------------------
"Recom
PRs: 48833, 54039"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.six import string_types
"
-------------------------------------------------------------------------
from ansible.module_utils.six import string_types
-------------------------------------------------------------------------
"if section == self.config.prelude_name:
    if not isinstance(lines, string_types):
        errors.append((fragment.path, 0, 0, 'section ""%s"" must be type str not %s' % (section, type(lines).__name__)))
else:
    # doesn't account for prelude but only the RM should be adding those
    if not isinstance(lines, list):
        errors.append((fragment.path, 0, 0, 'section ""%s"" must be type list not %s' % (section, type(lines).__name__)))

    if section not in self.config.sections:
        errors.append((fragment.path, 0, 0, 'invalid section: %s' % section))
        if not isinstance(line, string_types):
            errors.append((fragment.path, 0, 0, 'section ""%s"" list items must be type str not %s' % (section, type(line).__name__)))
            continue

elif isinstance(lines, string_types):
"
-------------------------------------------------------------------------
"Recom
PRs: 53792, 53811"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.six import string_types
"
-------------------------------------------------------------------------
from ansible.module_utils.six import string_types
-------------------------------------------------------------------------
"if section == self.config.prelude_name:
    if not isinstance(lines, string_types):
        errors.append((fragment.path, 0, 0, 'section ""%s"" must be type str not %s' % (section, type(lines).__name__)))
else:
    # doesn't account for prelude but only the RM should be adding those
    if not isinstance(lines, list):
        errors.append((fragment.path, 0, 0, 'section ""%s"" must be type list not %s' % (section, type(lines).__name__)))

    if section not in self.config.sections:
        errors.append((fragment.path, 0, 0, 'invalid section: %s' % section))
        if not isinstance(line, string_types):
            errors.append((fragment.path, 0, 0, 'section ""%s"" list items must be type str not %s' % (section, type(line).__name__)))
            continue

elif isinstance(lines, string_types):
"
-------------------------------------------------------------------------
"Recom
PRs: 53792, 53810"
-------------------------------------------------------------------------
=========================================================================
"processor_occurence = 0
"
-------------------------------------------------------------------------
"```python
class LinuxHardware(Hardware):
    i = 0
    vendor_id_occurrence = 0
    model_name_occurrence = 0
    physid = 0
    coreid = 0
    sockets = {}
    processor_occurrence = 0
```"
-------------------------------------------------------------------------
"processor_occurence = 0
"
-------------------------------------------------------------------------
"Recom
PRs: 52884, 53798"
-------------------------------------------------------------------------
=========================================================================
"if key == 'processor':
    processor_occurence = 1
"
-------------------------------------------------------------------------
"```python
if key == 'processor':
    processor_occurence += 1
```"
-------------------------------------------------------------------------
"if key == 'processor':
    processor_occurence = 1
"
-------------------------------------------------------------------------
"Recom
PRs: 52884, 53798"
-------------------------------------------------------------------------
=========================================================================
"# The fields for ARM CPUs do not always include 'vendor_id' or 'model name',
# and sometimes includes both 'processor' and 'Processor'.
# Always use 'processor' count for ARM systems
if collected_facts.get('ansible_architecture').startswith(('armv', 'aarch')):
    i = processor_occurence

"
-------------------------------------------------------------------------
"```python
if collected_facts.get('ansible_architecture').startswith(('armv', 'aarch')):
    i = processor_occurrence
```"
-------------------------------------------------------------------------
"# The fields for ARM CPUs do not always include 'vendor_id' or 'model name',
# and sometimes includes both 'processor' and 'Processor'.
# Always use 'processor' count for ARM systems
if collected_facts.get('ansible_architecture').startswith(('armv', 'aarch')):
    i = processor_occurence

"
-------------------------------------------------------------------------
"Recom
PRs: 52884, 53798"
-------------------------------------------------------------------------
=========================================================================
"default_flow_style = kw.pop('default_flow_style', None)
transformed = yaml.dump(a, Dumper=AnsibleDumper, allow_unicode=True, default_flow_style=default_flow_style, **kw)
"
-------------------------------------------------------------------------
"```python
default_flow_style = kw.pop('default_flow_style', None)
transformed = yaml.dump(a, Dumper=AnsibleDumper, allow_unicode=True, default_flow_style=default_flow_style, **kw)
```"
-------------------------------------------------------------------------
"default_flow_style = kw.pop('default_flow_style', None)
transformed = yaml.dump(a, Dumper=AnsibleDumper, allow_unicode=True, default_flow_style=default_flow_style, **kw)
"
-------------------------------------------------------------------------
"Recom
PRs: 53772, 53777"
-------------------------------------------------------------------------
=========================================================================
"default_flow_style = kw.pop('default_flow_style', None)
transformed = yaml.dump(a, Dumper=AnsibleDumper, allow_unicode=True, default_flow_style=default_flow_style, **kw)
"
-------------------------------------------------------------------------
"```python
default_flow_style = kw.pop('default_flow_style', None)
transformed = yaml.dump(a, Dumper=AnsibleDumper, allow_unicode=True, default_flow_style=default_flow_style, **kw)
```"
-------------------------------------------------------------------------
"default_flow_style = kw.pop('default_flow_style', None)
transformed = yaml.dump(a, Dumper=AnsibleDumper, allow_unicode=True, default_flow_style=default_flow_style, **kw)
"
-------------------------------------------------------------------------
"Recom
PRs: 53772, 53776"
-------------------------------------------------------------------------
=========================================================================
"default_flow_style = kw.pop('default_flow_style', None)
transformed = yaml.dump(a, Dumper=AnsibleDumper, allow_unicode=True, default_flow_style=default_flow_style, **kw)
"
-------------------------------------------------------------------------
"```python
default_flow_style = kw.pop('default_flow_style', None)
transformed = yaml.dump(a, Dumper=AnsibleDumper, allow_unicode=True, default_flow_style=default_flow_style, **kw)
```"
-------------------------------------------------------------------------
"default_flow_style = kw.pop('default_flow_style', None)
transformed = yaml.dump(a, Dumper=AnsibleDumper, allow_unicode=True, default_flow_style=default_flow_style, **kw)
"
-------------------------------------------------------------------------
"Recom
PRs: 53772, 53775"
-------------------------------------------------------------------------
=========================================================================
"- Tested with C(op) version 0.5.5
"
-------------------------------------------------------------------------
"```python
# Backport/2.7/51953
--##### SUMMARYThis is the requested backport pull request for #51953.It fixes issues which prevented this module working with 1Password CLI version 0.5.5 (or greater). Older versions of the CLI were deprecated by 1Password and will no longer function.##### ISSUE TYPE- Backport Pull Request##### COMPONENT NAMEonepassword_facts

Functional set for the hunk: 
Compilation set for the hunk: 
Library information from Stable: 
Function name information from Stable: 
Function call information from Stable: 
Class name information from Stable: 
Class method call information from Stable: 
Target file: __metaclass__, useful, for, codes, user, no_log, console, You, optional_section_title, str, sections, If, items, Dictionary, expect, cli_path, class, can, Gather, GNU, also, your, bin, One, facts, ansible, passed, re, those, e, overview, seem, t, occurs, now, regex, See, advanced, retrieved, optional, isinstance, title, main, configure, there, OP_SESSION_ansible_, receive, status, Project, signed, vaults, find, command_input, documentAttributes, Some, gnu, tool, None, matching, same, In, applicable, attachment, PATH, default, auto_login, master, third, lower, wasn, will, plugin, any, PIPE, values, data_json, We, suboptions, __main__, Public, not, True, an, two, via, message, processed_terms, explicitly, argument_spec, with, import, only, section_title, Recommend, control, true, check, https, __repr__, doesn, directly, specified, how, simply, update, secrets, RETURN, My, When, ansible_, containing, COPYING, example, module_utils, enabled, attempting, local, errno, False, into, expected_rc, given, License, is, secretkey, CLI, Ryan, masterpassword, The, Missing, loads, search, stored, assumed, more, when, found, assert_logged_in, password, retrieve, searched, subprocess, the, to, version_added, U, output, module, fields, supported_by, key, authentication, def, alongside, raise, get_raw, it, pn, defaults, This, list, __name__, global, few, error, login, utility, v, dict, yet, stdin, OSError, org, lookup, behaviour, txt, ignore_errors, run, AnsibleModule, Based, op, point, simple, to_native, community, single, securely, specify, wait, could, instead, defined, named, already, options, required, coding, above, contents, try, need, except, return, access, shorthand, assuming, rc, A, field, account, section_data, Unexpected, C, p, returned, description, and, as, avoid, data, details, appropriate, them, got, log, Don, raw, environ, particular, must, running, here, documented, Fetch, Scott, consistency, json, within, Without, delegate_to, handle, DOCUMENTATION, be, search_terms, attribute, dummy, or, second, please, General, __init__, input, basic, path, command, Exception, fetch, args, we, I, Other, changed, onepassword, passing, document, Name, terms, necessary, metadata_version, success, skip, communicate, allowing, Conway, section, logged, value, rylon, about, EXAMPLES, functionality, dictionaries, item_id, self, supports_check_mode, through, ansible_facts, params, before, fatal, type, get, Vault, automatically, Unable, username, work, os, in, docs, print_function, append, this, err, following, both, field_data, results, v3, ANSIBLE_METADATA, result, was, actually, _run, different, wraps, but, at, which, msg, field_name, format, Popen, secret, if, either, Used, each, ri, M, auto, multiple, Custom, parse_search_terms, starting, v0, division, preview, python, being, Not, Ansible, fail_json, downloaded, current, interface, what, you, name, module_return, all, py, requirements, Get, than, way, provide, option, item, response, short_description, shell, support, Duplicates, onepassword_facts, else, until, used, by, object, types, exact, looking, stderr, inside, Otherwise, automatic, _text, AnsibleModuleError, usr, would, env, __future__, out, requested, on, vault, that, line, dictionary, fetched, clearer, absolute_import, to_bytes, 1PasswordFacts, ENOENT, s, c, execute, from, a, failed, existing, strip, continue, copy, Each, string, exit_json, cases, _parse_field, get_field, currently, has, licenses, want, first, gpl, combining, auth, www, environment, com, author, signin, merge, notes, set, are, common, have, one, using, term, non, available, attached, token, otherwise, searching, utf, logging, shows, sample, see, along, installed, let, stdout, sbuch...
```"
-------------------------------------------------------------------------
"- C(op) 1Password command line utility (v0.5.5). See U(https://support.1password.com/command-line/)
"
-------------------------------------------------------------------------
"Recom
PRs: 51953, 53657"
-------------------------------------------------------------------------
=========================================================================
"if self.token:
    # Adds the session token to all commands if we're logged in.
    args = [to_bytes('--session=')  self.token]

"
-------------------------------------------------------------------------
"```python
if self.token:
    # Adds the session token to all commands if we're logged in.
    args = [to_bytes('--session='), self.token]
```"
-------------------------------------------------------------------------
"self.token = None
if self.token:
    # Adds the session token to all commands if we're logged in.
    args = [to_bytes('--session=')  self.token]



"
-------------------------------------------------------------------------
"Recom
PRs: 51953, 53657"
-------------------------------------------------------------------------
=========================================================================
"return {'document': document[1].strip()}
"
-------------------------------------------------------------------------
"```python
return {'document': document[1].strip()}
```"
-------------------------------------------------------------------------
"rc, output, error = self._run([""get"", ""document"", data['overview']['title']])
return {'document': output.strip()}
"
-------------------------------------------------------------------------
"Recom
PRs: 51953, 53657"
-------------------------------------------------------------------------
=========================================================================
"from ansible.utils.vars import combine_vars
"
-------------------------------------------------------------------------
from ansible.utils.vars import combine_vars
-------------------------------------------------------------------------
"from ansible.utils.vars import combine_vars
"
-------------------------------------------------------------------------
"Recom
PRs: 53152, 53640"
-------------------------------------------------------------------------
=========================================================================
"variables = combine_vars(variables, self.inventory.get_host(host).get_vars())
"
-------------------------------------------------------------------------
"```python
variables = self.templar.combine_vars(variables, self.inventory.get_host(host).get_vars())
```"
-------------------------------------------------------------------------
"variables = combine_vars(variables, self.inventory.get_host(host).get_vars())
"
-------------------------------------------------------------------------
"Recom
PRs: 53152, 53640"
-------------------------------------------------------------------------
=========================================================================
"variables = combine_vars(variables, self.inventory.get_host(host).get_vars())
"
-------------------------------------------------------------------------
"variables = combine_vars(variables, self.inventory.get_host(host).get_vars())"
-------------------------------------------------------------------------
"variables = combine_vars(variables, self.inventory.get_host(host).get_vars())
"
-------------------------------------------------------------------------
"Recom
PRs: 53152, 53640"
-------------------------------------------------------------------------
=========================================================================
"- Unlike M(import_role), most keywords, including loop, with_items, and conditionals, apply to this statement.
- The do until loop is not supported on M(include_role).
"
-------------------------------------------------------------------------
"```yaml
short_description: Load and execute a role
description:
  - Loads and executes a role as a task dynamically. This frees roles from the `roles:` directive and allows them to be
    treated more as tasks.
  - Unlike `import_role`, most keywords, including loop, with_items, and conditionals, apply to this statement.
  - The do until loop is not supported on `include_role`.
version_added: ""2.2""
options:
  Required dependency: __future__,
```"
-------------------------------------------------------------------------
"- Unlike M(import_role), most keywords, including loop, with_items, and conditionals, apply to this statement.
- The do until loop is not supported on M(include_role).
"
-------------------------------------------------------------------------
"Recom
PRs: 49581, 53628"
-------------------------------------------------------------------------
=========================================================================
"- Unlike M(import_tasks), most keywords, including loop, with_items, and conditionals, apply to this statement.
- The do until loop is not supported on M(include_tasks).
"
-------------------------------------------------------------------------
"```yaml
options:
   file:
     description:
       - The name of the imported file is specified directly without any other option.
     version_added: '2.7'
   apply:
     description:
      - Unlike M(import_tasks), most keywords, including loop, with_items, and conditionals, apply to this statement.
      - The do until loop is not supported on M(include_tasks).
     version_added: '2.7'
```"
-------------------------------------------------------------------------
"- Unlike M(import_tasks), most keywords, including loop, with_items, and conditionals, apply to this statement.
- The do until loop is not supported on M(include_tasks).
"
-------------------------------------------------------------------------
"Recom
PRs: 49581, 53628"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.common._collections_compat import Mapping, Sequence
"
-------------------------------------------------------------------------
"from ansible.module_utils.common._collections_compat import Mapping, Sequence"
-------------------------------------------------------------------------
"def report_warnings(self, result, warnings_key=None):
    '''
    Checks result of client operation for warnings, and if present, outputs them.
    '''
    if warnings_key is None:
        warnings_key = ['Warnings']
    for key in warnings_key:
        if not isinstance(result, Mapping):
            return
        result = result.get(key)
    if isinstance(result, Sequence):
        for warning in result:
            self.module.warn('Docker warning: {0}'.format(warning))

"
-------------------------------------------------------------------------
"Recom
PRs: 53440, 53621"
-------------------------------------------------------------------------
=========================================================================
"def report_warnings(self, result, warnings_key=None):
    '''
    Checks result of client operation for warnings, and if present, outputs them.
    '''
    if warnings_key is None:
        warnings_key = ['Warnings']
    for key in warnings_key:
        if not isinstance(result, Mapping):
            return
        result = result.get(key)
    if isinstance(result, Sequence):
        for warning in result:
            self.module.warn('Docker warning: {0}'.format(warning))

"
-------------------------------------------------------------------------
"```python
def report_warnings(self, result, warnings_key=None):
    '''
    Checks the result of the client operation for warnings and outputs them if present.
    '''
    if warnings_key is None:
        warnings_key = ['Warnings']
    for key in warnings_key:
        if not isinstance(result, Mapping):
            return
        result = result.get(key)
    if isinstance(result, Sequence):
        for warning in result:
            self.module.warn('Docker warning: {0}'.format(warning))
```"
-------------------------------------------------------------------------
"self.client.report_warnings(new_container)
"
-------------------------------------------------------------------------
"Recom
PRs: 53440, 53621"
-------------------------------------------------------------------------
=========================================================================
"self.client.report_warnings(new_container)
"
-------------------------------------------------------------------------
self.client.report_warnings(new_container)
-------------------------------------------------------------------------
"result = self.client.update_container(container_id, **update_parameters)
self.client.report_warnings(result)
"
-------------------------------------------------------------------------
"Recom
PRs: 53440, 53621"
-------------------------------------------------------------------------
=========================================================================
"self.node_id = client.module.params['node_id']
"
-------------------------------------------------------------------------
self.node_id = client.module.params['node_id']
-------------------------------------------------------------------------
"self.node_id = client.module.params['node_id']
"
-------------------------------------------------------------------------
"Recom
PRs: 53503, 53557"
-------------------------------------------------------------------------
=========================================================================
"status_down = self.client.check_if_swarm_node_is_down(node_id=self.node_id, repeat_check=5)
"
-------------------------------------------------------------------------
"```python
status_down = self.client.check_if_swarm_node_is_down(node_id=self.node_id, repeat_check=5)
```"
-------------------------------------------------------------------------
"node_info = self.client.inspect_node(node_id=self.node_id)
"
-------------------------------------------------------------------------
"Recom
PRs: 53503, 53557"
-------------------------------------------------------------------------
=========================================================================
"self.client.remove_node(node_id=self.node_id, force=self.force)
"
-------------------------------------------------------------------------
"```python
self.client.remove_node(node_id=self.node_id, force=self.force)
```"
-------------------------------------------------------------------------
"if _x > 0:
    sleep(5)
"
-------------------------------------------------------------------------
"Recom
PRs: 53503, 53557"
-------------------------------------------------------------------------
=========================================================================
"{'path': '/etc/os-release', 'name': 'NA'},
"
-------------------------------------------------------------------------
"{'path': '/etc/os-release', 'name': 'NA'},"
-------------------------------------------------------------------------
"{'path': '/etc/os-release', 'name': 'NA'},
"
-------------------------------------------------------------------------
"Recom
PRs: 53298, 53541"
-------------------------------------------------------------------------
=========================================================================
"pname = re.search('NAME=""(.*)""', data)
if pname:
    if 'Clear Linux' not in pname.groups()[0]:
        return False, clear_facts
    clear_facts['distribution'] = pname.groups()[0]
"
-------------------------------------------------------------------------
"import re

pname = re.search('NAME=""(.*)""', data)
if pname:
    if 'Clear Linux' not in pname.groups()[0]:
        return False, clear_facts
    clear_facts['distribution'] = pname.groups()[0]"
-------------------------------------------------------------------------
"pname = re.search('NAME=""(.*)""', data)
if pname:
    if 'Clear Linux' not in pname.groups()[0]:
        return False, clear_facts
    clear_facts['distribution'] = pname.groups()[0]
"
-------------------------------------------------------------------------
"Recom
PRs: 53298, 53541"
-------------------------------------------------------------------------
=========================================================================
"{'path': '/etc/os-release', 'name': 'NA'},
"
-------------------------------------------------------------------------
"I will update the code snippet to reflect the requirement:

```python
class Distribution(object):
     DISTRIBUTION_FILES = (
         {'path': '/etc/altlinux-release', 'name': 'Altlinux'},
         {'path': '/etc/sourcemage-release', 'name': 'SMGL'},
         {'path': '/usr/lib/os-release', 'name': 'ClearLinux'},
         {'path': '/etc/os-release', 'name': 'NA'},
     )
 
     SEARCH_STRING = {
         'ansible.module_utils.facts.system.distribution',
         'ansible.compat.tests.mock',
         '__future__',
     }
```"
-------------------------------------------------------------------------
"{'path': '/etc/os-release', 'name': 'NA'},
"
-------------------------------------------------------------------------
"Recom
PRs: 53298, 53541"
-------------------------------------------------------------------------
=========================================================================
"changed = False
    if status == 'Pushing':
        changed = True
self.results['changed'] = changed
"
-------------------------------------------------------------------------
"```python
changed = False
if status == 'Pushing':
    changed = True
self.results['changed'] = changed
```"
-------------------------------------------------------------------------
"changed = False
    if status == 'Pushing':
        changed = True
self.results['changed'] = changed
"
-------------------------------------------------------------------------
"Recom
PRs: 53451, 53528"
-------------------------------------------------------------------------
=========================================================================
"if image and image['Id'] == self.results['image']['Id']:
    self.results['changed'] = False

"
-------------------------------------------------------------------------
"if image and image['Id'] == self.results['image']['Id']:
    self.results['changed'] = False"
-------------------------------------------------------------------------
"if image and image['Id'] == self.results['image']['Id']:
    self.results['changed'] = False

"
-------------------------------------------------------------------------
"Recom
PRs: 53451, 53528"
-------------------------------------------------------------------------
=========================================================================
"- This is required if the private key is password protected.
"
-------------------------------------------------------------------------
"```yaml
     privatekey_passphrase:
         description:
             - This is required if the private key is password protected.
         type: str
```"
-------------------------------------------------------------------------
"- This is required if the private key is password protected.
"
-------------------------------------------------------------------------
"Recom
PRs: 53360, 53527"
-------------------------------------------------------------------------
=========================================================================
"- The path to the private key to use when signing the certificate signing request.
- The passphrase for the private key.
- This is required if the private key is password protected.
"
-------------------------------------------------------------------------
"- The path to the private key to use when signing the certificate signing request.
- The passphrase for the private key. Required if the private key is password protected."
-------------------------------------------------------------------------
"- The path to the private key to use when signing the certificate signing request.
- The passphrase for the private key.
- This is required if the private key is password protected.
"
-------------------------------------------------------------------------
"Recom
PRs: 53360, 53527"
-------------------------------------------------------------------------
=========================================================================
"- The passphrase for the private key.
"
-------------------------------------------------------------------------
Specifies the passphrase for the private key.
-------------------------------------------------------------------------
"- The passphrase for the private key.
"
-------------------------------------------------------------------------
"Recom
PRs: 53360, 53527"
-------------------------------------------------------------------------
=========================================================================
"_mysql_cursor_param = 'cursor'
    _mysql_cursor_param = 'cursorclass'
"
-------------------------------------------------------------------------
"```python
_mysql_cursor_param = 'cursor'
_mysql_cursor_class_param = 'cursorclass'
```"
-------------------------------------------------------------------------
"import MySQLdb.cursors
"
-------------------------------------------------------------------------
"Recom
PRs: 47809, 53519"
-------------------------------------------------------------------------
=========================================================================
"if nid == 0:
    raise CertificateSigningRequestError('Unknown subject field identifier ""{0}""'.format(entry[0]))
res = OpenSSL._util.lib.X509_NAME_add_entry_by_NID(subject._name, nid, OpenSSL._util.lib.MBSTRING_UTF8, to_bytes(entry[1]), -1, -1, 0)
if res == 0:
    raise CertificateSigningRequestError('Invalid value for subject field identifier ""{0}"": {1}'.format(entry[0], entry[1]))
"
-------------------------------------------------------------------------
"```python
if nid == 0:
    raise CertificateSigningRequestError('Unknown subject field identifier ""{0}""'.format(entry[0]))
res = OpenSSL._util.lib.X509_NAME_add_entry_by_NID(subject._name, nid, OpenSSL._util.lib.MBSTRING_UTF8, to_bytes(entry[1]), -1, -1, 0)
if res == 0:
    raise CertificateSigningRequestError('Invalid value for subject field identifier ""{0}"": {1}'.format(entry[0], entry[1]))
```"
-------------------------------------------------------------------------
"if nid == 0:
    raise CertificateSigningRequestError('Unknown subject field identifier ""{0}""'.format(entry[0]))
res = OpenSSL._util.lib.X509_NAME_add_entry_by_NID(subject._name, nid, OpenSSL._util.lib.MBSTRING_UTF8, to_bytes(entry[1]), -1, -1, 0)
if res == 0:
    raise CertificateSigningRequestError('Invalid value for subject field identifier ""{0}"": {1}'.format(entry[0], entry[1]))
"
-------------------------------------------------------------------------
"Recom
PRs: 53198, 53469"
-------------------------------------------------------------------------
=========================================================================
"required: True
  - Type of credential being added.  The ssh choice refers to a Tower Machine credential.
"
-------------------------------------------------------------------------
Invalid AST
-------------------------------------------------------------------------
"required: True
  - Type of credential being added.  The ssh choice refers to a Tower Machine credential.
"
-------------------------------------------------------------------------
"Recom
PRs: 47224, 53411"
-------------------------------------------------------------------------
=========================================================================
"kind: ssh
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='kind', ctx=Store()), annotation=Name(id='ssh', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"kind: ssh

me: Create a valid SCM credential from a private_key file
wer_credential:
name: SCM Credential
organization: Default
state: present
kind: scm
username: joe
password: secret
ssh_key_data: ""{{ lookup('file', '/tmp/id_rsa') }}""
ssh_key_unlock: ""passphrase""

me: Add Credential Into Tower
wer_credential:
name: Workshop Credential
ssh_key_data: ""/home/{{ansible_user}}/.ssh/aws-private.pem""
kind: ssh
organization: Default
tower_username: admin
tower_password: ansible
tower_host: https://localhost
n_once: true
legate_to: localhost
"
-------------------------------------------------------------------------
"Recom
PRs: 47224, 53411"
-------------------------------------------------------------------------
=========================================================================
"swarm_service:
- Note that before Ansible 2.7.9, the return variable was documented as C(ansible_swarm_service),
  while the module actually returned a variable called C(ansible_docker_service). The variable
  was renamed to C(swarm_service) in both code and documentation for Ansible 2.7.9 and Ansible 2.8.0.
  In Ansible 2.7.x, the old name C(ansible_docker_service) can still be used.
"
-------------------------------------------------------------------------
"```
RETURN = '''
   returned: always
   type: dict
   description:
   - Dictionary of variables representing the current state of the service.
     Matches the module parameters format.
   - Note that before Ansible 2.7.9, the return variable was documented as `ansible_swarm_service`,
     while the module actually returned a variable called `ansible_docker_service`. The variable
     was renamed to `swarm_service` in both code and documentation for Ansible 2.7.9 and Ansible 2.8.0.
     In Ansible 2.7.x, the old name `ansible_docker_service` can still be used.
   sample: '{
     ""args"": [
       ""sleep"",
```"
-------------------------------------------------------------------------
"client.module.exit_json(
    msg=msg,
    changed=changed,
    rebuilt=rebuilt,
    changes=changes,
    swarm_service=facts,
    ansible_docker_service=facts  # kept for backwards-compatibility, will be removed in Ansible 2.8
)
"
-------------------------------------------------------------------------
"Recom
PRs: 53229, 53408"
-------------------------------------------------------------------------
=========================================================================
"try:
    extensions.append(crypto.X509Extension(b""subjectAltName"", self.subjectAltName_critical, altnames.encode('ascii')))
except OpenSSL.crypto.Error as e:
    raise CertificateSigningRequestError(
        'Error while parsing Subject Alternative Names {0} (check for missing type prefix, such as ""DNS:""!): {1}'.format(
            ', '.join([""{0}"".format(san) for san in self.subjectAltName]), str(e)
        )
    )
"
-------------------------------------------------------------------------
"```python
try:
    extensions.append(OpenSSL.crypto.X509Extension(b""subjectAltName"", self.subjectAltName_critical, altnames.encode('ascii')))
except OpenSSL.crypto.Error as e:
    raise CertificateSigningRequestError(
        'Error while parsing Subject Alternative Names {0} (check for missing type prefix, such as ""DNS:""!): {1}'.format(
            ', '.join([""{0}"".format(san) for san in self.subjectAltName]), str(e)
        )
    )
```"
-------------------------------------------------------------------------
"try:
    extensions.append(crypto.X509Extension(b""subjectAltName"", self.subjectAltName_critical, altnames.encode('ascii')))
except OpenSSL.crypto.Error as e:
    raise CertificateSigningRequestError(
        'Error while parsing Subject Alternative Names {0} (check for missing type prefix, such as ""DNS:""!): {1}'.format(
            ', '.join([""{0}"".format(san) for san in self.subjectAltName]), str(e)
        )
    )
"
-------------------------------------------------------------------------
"Recom
PRs: 53201, 53345"
-------------------------------------------------------------------------
=========================================================================
"if isinstance(value, integer_types):
"
-------------------------------------------------------------------------
"if isinstance(value, integer_types):"
-------------------------------------------------------------------------
"if isinstance(value, integer_types):
"
-------------------------------------------------------------------------
"Recom
PRs: 53289, 53329"
-------------------------------------------------------------------------
=========================================================================
"- Values which might be parsed as numbers, booleans or other types by the YAML parser must be quoted (e.g. C(""true"")) in order to avoid data loss.
pe: dict
"
-------------------------------------------------------------------------
"```python
# Values which might be parsed as numbers, booleans or other types by the YAML parser must be quoted (e.g. C(""true"")) in order to avoid data loss.
pe: dict
```"
-------------------------------------------------------------------------
"- Values which might be parsed as numbers, booleans or other types by the YAML parser must be quoted (e.g. C(""true"")) in order to avoid data loss.
pe: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 49843, 50899"
-------------------------------------------------------------------------
=========================================================================
"SECRET_KEY: ""ssssh""
# Values which might be parsed as numbers, booleans or other types by the YAML parser need to be quoted
BOOLEAN_KEY: ""yes""
"
-------------------------------------------------------------------------
"SECRET_KEY: ""ssssh""
# Values which might be parsed as numbers, booleans or other types by the YAML parser need to be quoted
BOOLEAN_KEY: ""yes"""
-------------------------------------------------------------------------
"SECRET_KEY: ""ssssh""
# Values which might be parsed as numbers, booleans or other types by the YAML parser need to be quoted
BOOLEAN_KEY: ""yes""
"
-------------------------------------------------------------------------
"Recom
PRs: 49843, 50899"
-------------------------------------------------------------------------
=========================================================================
"- arg1: ""true""
- arg2: ""whatever""
"
-------------------------------------------------------------------------
"EXAMPLES = '''
     name: test
     image: ubuntu:18.04
     env:
       arg1: ""true""
       arg2: ""whatever""
     volumes:
       - /tmp:/tmp
     comparisons:"
-------------------------------------------------------------------------
"if not isinstance(value, string_types):
    self.client.module.warn(
        ""Non-string value found for env option. ""
        ""Ambiguous env options should be wrapped in quotes to avoid YAML parsing. ""
        ""This will become an error in Ansible 2.8. ""
        ""Key: %s; value will be treated as: %s"" % (name, str(value)))
"
-------------------------------------------------------------------------
"Recom
PRs: 49843, 50899"
-------------------------------------------------------------------------
=========================================================================
"- Requires API version >= 1.25
"
-------------------------------------------------------------------------
"```yaml
options:
  description:
  - Container hostname
  - Maps docker service --hostname option.
tty:
  required: false
  type: bool
docker_api_version: ""1.25""
```"
-------------------------------------------------------------------------
"- Requires API version >= 1.25
"
-------------------------------------------------------------------------
"Recom
PRs: 50861, 50873"
-------------------------------------------------------------------------
=========================================================================
"- Requires API version >= 1.25
- Requires API version >= 1.25
- Requires API version >= 1.25
- Requires API version >= 1.25
"
-------------------------------------------------------------------------
"Adapted code snippet:

```yaml
api_version:
  required: true
  type: float
  version_added: ""1.25""
  description: ""Requires API version >= 1.25""
```"
-------------------------------------------------------------------------
"- Requires API version >= 1.25
- Requires API version >= 1.25
- Requires API version >= 1.25
- Requires API version >= 1.25
"
-------------------------------------------------------------------------
"Recom
PRs: 50861, 50873"
-------------------------------------------------------------------------
=========================================================================
"- Requires API version >= 1.25
type: dict
- Dictionary of key value pairs.
type: dict
- Dictionary of key value pairs.
"
-------------------------------------------------------------------------
"Adapted code snippet:

```yaml
options:
  description:
    - Force update even if no changes require it.
    - Maps to docker service update --force option.
  labels:
    required: false
    description:
      - Maps docker service --label option.
  container_labels:
    required: false
    description:
      - Maps docker service --container-label option.
  endpoint_mode:
    required: false
    description:

- Requires API version >= 1.25
  type: dict
  - Dictionary of key value pairs.
  type: dict
  - Dictionary of key value pairs.
```"
-------------------------------------------------------------------------
"- Requires API version >= 1.25
type: dict
- Dictionary of key value pairs.
type: dict
- Dictionary of key value pairs.
"
-------------------------------------------------------------------------
"Recom
PRs: 50861, 50873"
-------------------------------------------------------------------------
=========================================================================
"- ""Service memory limit (format: C(<number>[<unit>])). Number is a positive integer.
  Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
  C(T) (tebibyte), or C(P) (pebibyte).""
- 0 equals no limit.
- Omitting the unit defaults to bytes.
- ""Service memory reservation (format: C(<number>[<unit>])). Number is a positive integer.
  Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
  C(T) (tebibyte), or C(P) (pebibyte).""
- 0 equals no reservation.
- Omitting the unit defaults to bytes.
"
-------------------------------------------------------------------------
"```
Options:
  limit_memory:
    required: false
    default: 0
    description:
    - Service memory limit (format: <number>[<unit>]). Number is a positive integer.
      Unit can be B (byte), K (kibibyte, 1024B), M (mebibyte), G (gibibyte),
      T (tebibyte), or P (pebibyte).
      0 equals no limit.
      Omitting the unit defaults to bytes.
  reserve_memory:
    required: false
    default: 0
    description:
    - Service memory reservation (format: <number>[<unit>]). Number is a positive integer.
      Unit can be B (byte), K (kibibyte, 1024B), M (mebibyte), G (gibibyte),
      T (tebibyte), or P (pebibyte).
      0 equals no reservation.
      Omitting the unit defaults to bytes.
```"
-------------------------------------------------------------------------
"- ""Service memory limit (format: C(<number>[<unit>])). Number is a positive integer.
  Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
  C(T) (tebibyte), or C(P) (pebibyte).""
- 0 equals no limit.
- Omitting the unit defaults to bytes.
- ""Service memory reservation (format: C(<number>[<unit>])). Number is a positive integer.
  Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
  C(T) (tebibyte), or C(P) (pebibyte).""
- 0 equals no reservation.
- Omitting the unit defaults to bytes.
"
-------------------------------------------------------------------------
"Recom
PRs: 50861, 50873"
-------------------------------------------------------------------------
=========================================================================
"- Requires API version >= 1.25
"
-------------------------------------------------------------------------
"Requires Python version: __future__.absolute_import, distutils.version.LooseVersion"
-------------------------------------------------------------------------
"- Requires API version >= 1.25
"
-------------------------------------------------------------------------
"Recom
PRs: 50861, 50873"
-------------------------------------------------------------------------
=========================================================================
"- Requires API version >= 1.30
"
-------------------------------------------------------------------------
- Requires API version >= 1.30
-------------------------------------------------------------------------
"- Requires API version >= 1.30
"
-------------------------------------------------------------------------
"Recom
PRs: 50861, 50873"
-------------------------------------------------------------------------
=========================================================================
"- If API version >= 1.32 and docker python library >= 3.0.0 attribute 'mode' can be set to 'ingress' or 'host' (default 'ingress').
"
-------------------------------------------------------------------------
"```python
options:
  - List of dictionaries describing the service published ports.
  - Every item must be a dictionary exposing the keys published_port, target_port, protocol (defaults to 'tcp')
  - Only used with api_version >= 1.25
  - If API version >= 1.32 and docker python library >= 3.0.0 attribute 'mode' can be set to 'ingress' or 'host' (default 'ingress').
replicas:
  required: false
  default: -1
```"
-------------------------------------------------------------------------
"- If API version >= 1.32 and docker python library >= 3.0.0 attribute 'mode' can be set to 'ingress' or 'host' (default 'ingress').
"
-------------------------------------------------------------------------
"Recom
PRs: 50861, 50873"
-------------------------------------------------------------------------
=========================================================================
"- Requires API version >= 1.29
"
-------------------------------------------------------------------------
"Adapted context for the code snippet based on the provided information:

```yaml
options:
     description:
     - Specifies the order of operations when rolling out an updated task.
     - Requires API version >= 1.29
     - Maps to docker service --update-order
   user:
     required: false
     default: root
```

This adaptation includes the requirement that the specified option ""Specifies the order of operations when rolling out an updated task"" is only available for API version 1.29 or higher."
-------------------------------------------------------------------------
"- Requires API version >= 1.29
"
-------------------------------------------------------------------------
"Recom
PRs: 50861, 50873"
-------------------------------------------------------------------------
=========================================================================
"if self.update_order is not None and self.update_order != os.update_order:
"
-------------------------------------------------------------------------
if self.update_order is not None and self.update_order != os.update_order:
-------------------------------------------------------------------------
"if self.update_order is not None and self.update_order != os.update_order:
"
-------------------------------------------------------------------------
"Recom
PRs: 50655, 50868"
-------------------------------------------------------------------------
=========================================================================
"# The Docker API allows filtering services by name but the filter looks
# for a substring match, not an exact match. (Filtering for ""foo"" would
# return information for services ""foobar"" and ""foobuzz"" even if the
# service ""foo"" doesn't exist.) Avoid incorrectly determining that a
# service is present by filtering the list of services returned from the
# Docker API so that the name must be an exact match.
raw_data = [
    service for service in self.client.services(filters={'name': name})
    if service['Spec']['Name'] == name
]
"
-------------------------------------------------------------------------
"```python
# The Docker API allows filtering services by name but the filter looks
# for a substring match, not an exact match. (Filtering for ""foo"" would
# return information for services ""foobar"" and ""foobuzz"" even if the
# service ""foo"" doesn't exist.) Avoid incorrectly determining that a
# service is present by filtering the list of services returned from the
# Docker API so that the name must be an exact match.
raw_data = [
    service for service in self.client.services(filters={'name': name})
    if service['Spec']['Name'] == name
]
```"
-------------------------------------------------------------------------
"# The Docker API allows filtering services by name but the filter looks
# for a substring match, not an exact match. (Filtering for ""foo"" would
# return information for services ""foobar"" and ""foobuzz"" even if the
# service ""foo"" doesn't exist.) Avoid incorrectly determining that a
# service is present by filtering the list of services returned from the
# Docker API so that the name must be an exact match.
raw_data = [
    service for service in self.client.services(filters={'name': name})
    if service['Spec']['Name'] == name
]
"
-------------------------------------------------------------------------
"Recom
PRs: 50665, 50866"
-------------------------------------------------------------------------
=========================================================================
"def __init__(self, module):
    self.module = module

    rsp, info = fetch_url(module=self.module, url=url, data=data, headers=headers, method=method, use_proxy=self.module.params['use_proxy'])
"
-------------------------------------------------------------------------
"```python
def __init__(self, module):
    self.module = module

    rsp, info = fetch_url(module=self.module, url=url, data=data, headers=headers, method=method, use_proxy=self.module.params['use_proxy'], validate_certs=self.module.params['validate_certs'])
```"
-------------------------------------------------------------------------
"def __init__(self, module):
    self.module = module

    rsp, info = fetch_url(module=self.module, url=url, data=data, headers=headers, method=method, use_proxy=self.module.params['use_proxy'])
"
-------------------------------------------------------------------------
"Recom
PRs: 47671, 50865"
-------------------------------------------------------------------------
=========================================================================
"icinga = icinga2_api(module=module)
"
-------------------------------------------------------------------------
"icinga = icinga2_api(module=module, context=variables)"
-------------------------------------------------------------------------
"icinga = icinga2_api(module=module)
"
-------------------------------------------------------------------------
"Recom
PRs: 47671, 50865"
-------------------------------------------------------------------------
=========================================================================
"if not differences.empty and self.parameters.force:
"
-------------------------------------------------------------------------
"```python
if not differences.empty and self.parameters.force:
```"
-------------------------------------------------------------------------
"if differences and self.parameters.force:
"
-------------------------------------------------------------------------
"Recom
PRs: 50663, 50821"
-------------------------------------------------------------------------
=========================================================================
"if not differences.empty and self.parameters.force:
"
-------------------------------------------------------------------------
if differences and self.parameters.force:
-------------------------------------------------------------------------
"if differences and self.parameters.force:
"
-------------------------------------------------------------------------
"Recom
PRs: 50663, 50820"
-------------------------------------------------------------------------
=========================================================================
"from distutils.version import LooseVersion
"
-------------------------------------------------------------------------
from distutils.version import LooseVersion
-------------------------------------------------------------------------
"from distutils.version import LooseVersion
"
-------------------------------------------------------------------------
"Recom
PRs: 50448, 50701"
-------------------------------------------------------------------------
=========================================================================
"ssh_connect_kwargs = self._parse_proxy_command(port)
"
-------------------------------------------------------------------------
ssh_connect_kwargs = self._parse_proxy_command(port)
-------------------------------------------------------------------------
"ssh_connect_kwargs = self._parse_proxy_command(port)
"
-------------------------------------------------------------------------
"Recom
PRs: 50448, 50701"
-------------------------------------------------------------------------
=========================================================================
"# paramiko 2.2 introduced auth_timeout parameter
if LooseVersion(paramiko.__version__) >= LooseVersion('2.2.0'):
    ssh_connect_kwargs['auth_timeout'] = self._play_context.timeout

"
-------------------------------------------------------------------------
"```python
if LooseVersion(paramiko.__version__) >= LooseVersion('2.2.0'):
    ssh_connect_kwargs['auth_timeout'] = self._play_context.timeout
```"
-------------------------------------------------------------------------
"# paramiko 2.2 introduced auth_timeout parameter
if LooseVersion(paramiko.__version__) >= LooseVersion('2.2.0'):
    ssh_connect_kwargs['auth_timeout'] = self._play_context.timeout

"
-------------------------------------------------------------------------
"Recom
PRs: 50448, 50701"
-------------------------------------------------------------------------
=========================================================================
"**ssh_connect_kwargs
"
-------------------------------------------------------------------------
"```python
ssh_connect_kwargs
```"
-------------------------------------------------------------------------
"**ssh_connect_kwargs
"
-------------------------------------------------------------------------
"Recom
PRs: 50448, 50701"
-------------------------------------------------------------------------
=========================================================================
"'vmkernel': 'grep booted /var/log/vmksummary.log | tail -n 1',
'vmkernel': 'reboot',
"
-------------------------------------------------------------------------
"SHUTDOWN_COMMANDS = {
    'alpine': 'reboot',
    'vmkernel': 'reboot',
}

SHUTDOWN_COMMAND_ARGS = {
    'vmkernel': 'grep booted /var/log/vmksummary.log | tail -n 1',
}"
-------------------------------------------------------------------------
"'vmkernel': 'grep booted /var/log/vmksummary.log | tail -n 1',
'vmkernel': 'reboot',
"
-------------------------------------------------------------------------
"Recom
PRs: 49637, 50616"
-------------------------------------------------------------------------
=========================================================================
"'vmkernel': '-d {delay_sec}',
'solaris': 'who',
'vmkernel': 'who',
"
-------------------------------------------------------------------------
"```python
COMMANDS = {
    'openbsd': '-r +{delay_min} ""{message}""',
    'solaris': '-y -g {delay_sec} -i 6 ""{message}""',
    'sunos': '-y -g {delay_sec} -i 6 ""{message}""',
    'vmkernel': '-d {delay_sec}',
}
```"
-------------------------------------------------------------------------
"'vmkernel': '-d {delay_sec}',
'solaris': 'who',
'vmkernel': 'who',
"
-------------------------------------------------------------------------
"Recom
PRs: 49637, 50616"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_bytes, to_text
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils._text import to_bytes, to_text
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes, to_text
"
-------------------------------------------------------------------------
"Recom
PRs: 48804, 50540"
-------------------------------------------------------------------------
=========================================================================
"out, err = p.communicate(to_bytes(stdin))
return to_text(out, errors='surrogate_or_strict'), to_text(err, errors='surrogate_or_strict')
"
-------------------------------------------------------------------------
"```python
out, err = p.communicate(stdin.encode())
return out.decode(errors='surrogate_or_strict'), err.decode(errors='surrogate_or_strict')
```"
-------------------------------------------------------------------------
"out, err = p.communicate(to_bytes(stdin))
return to_text(out, errors='surrogate_or_strict'), to_text(err, errors='surrogate_or_strict')
"
-------------------------------------------------------------------------
"Recom
PRs: 48804, 50540"
-------------------------------------------------------------------------
=========================================================================
"base_dir = os.path.dirname(module.params['path']) or '.'
"
-------------------------------------------------------------------------
base_dir = os.path.dirname(module.params['path']) or '.'
-------------------------------------------------------------------------
"base_dir = os.path.dirname(module.params['path']) or '.'
"
-------------------------------------------------------------------------
"Recom
PRs: 50322, 50496"
-------------------------------------------------------------------------
=========================================================================
"base_dir = os.path.dirname(module.params['path']) or '.'
"
-------------------------------------------------------------------------
base_dir = os.path.dirname(module.params['path']) or '.'
-------------------------------------------------------------------------
"base_dir = os.path.dirname(module.params['path']) or '.'
"
-------------------------------------------------------------------------
"Recom
PRs: 50322, 50496"
-------------------------------------------------------------------------
=========================================================================
"base_dir = os.path.dirname(module.params['path']) or '.'
"
-------------------------------------------------------------------------
"```python
base_dir = os.path.dirname(module.params['path']) or '.'
```"
-------------------------------------------------------------------------
"base_dir = os.path.dirname(module.params['path']) or '.'
"
-------------------------------------------------------------------------
"Recom
PRs: 50322, 50496"
-------------------------------------------------------------------------
=========================================================================
"base_dir = os.path.dirname(module.params['path']) or '.'
"
-------------------------------------------------------------------------
"```python
base_dir = os.path.dirname(module.params.get('path')) or '.'
```"
-------------------------------------------------------------------------
"base_dir = os.path.dirname(module.params['path']) or '.'
"
-------------------------------------------------------------------------
"Recom
PRs: 50322, 50496"
-------------------------------------------------------------------------
=========================================================================
"base_dir = os.path.dirname(module.params['path']) or '.'
"
-------------------------------------------------------------------------
base_dir = os.path.dirname(module.params['path']) if 'path' in module.params else '.'
-------------------------------------------------------------------------
"base_dir = os.path.dirname(module.params['path']) or '.'
"
-------------------------------------------------------------------------
"Recom
PRs: 50322, 50496"
-------------------------------------------------------------------------
=========================================================================
"base_dir = os.path.dirname(module.params['path']) or '.'
"
-------------------------------------------------------------------------
base_dir = os.path.dirname(module.params['path'] or '.')
-------------------------------------------------------------------------
"base_dir = os.path.dirname(module.params['path']) or '.'
"
-------------------------------------------------------------------------
"Recom
PRs: 50322, 50496"
-------------------------------------------------------------------------
=========================================================================
"usages_ext = [ext for ext in extensions if ext.get_short_name() == b'keyUsage']
if (not usages_ext and self.keyUsage) or (usages_ext and not self.keyUsage):
    return False
elif not usages_ext and not self.keyUsage:
    return True
else:
    # OpenSSL._util.lib.OBJ_txt2nid() always returns 0 for all keyUsage values
    # (since keyUsage has a fixed bitfield for these values and is not extensible).
    # Therefore, we create an extension for the wanted values, and compare the
    # data of the extensions (which is the serialized bitfield).
    expected_ext = crypto.X509Extension(b""keyUsage"", False, ', '.join(self.keyUsage).encode('ascii'))
    return usages_ext[0].get_data() == expected_ext.get_data() and usages_ext[0].get_critical() == self.keyUsage_critical
"
-------------------------------------------------------------------------
"```python
if (not usages_ext and self.keyUsage) or (usages_ext and not self.keyUsage):
    return False
elif not usages_ext and not self.keyUsage:
    return True
else:
    # OpenSSL._util.lib.OBJ_txt2nid() always returns 0 for all keyUsage values
    # (since keyUsage has a fixed bitfield for these values and is not extensible).
    # Therefore, we create an extension for the wanted values, and compare the
    # data of the extensions (which is the serialized bitfield).
    expected_ext = crypto.X509Extension(b""keyUsage"", False, ', '.join(self.keyUsage).encode('ascii'))
    return usages_ext[0].get_data() == expected_ext.get_data() and usages_ext[0].get_critical() == critical
```"
-------------------------------------------------------------------------
"usages_ext = [ext for ext in extensions if ext.get_short_name() == b'keyUsage']
if (not usages_ext and self.keyUsage) or (usages_ext and not self.keyUsage):
    return False
elif not usages_ext and not self.keyUsage:
    return True
else:
    # OpenSSL._util.lib.OBJ_txt2nid() always returns 0 for all keyUsage values
    # (since keyUsage has a fixed bitfield for these values and is not extensible).
    # Therefore, we create an extension for the wanted values, and compare the
    # data of the extensions (which is the serialized bitfield).
    expected_ext = crypto.X509Extension(b""keyUsage"", False, ', '.join(self.keyUsage).encode('ascii'))
    return usages_ext[0].get_data() == expected_ext.get_data() and usages_ext[0].get_critical() == self.keyUsage_critical
"
-------------------------------------------------------------------------
"Recom
PRs: 50361, 50495"
-------------------------------------------------------------------------
=========================================================================
"if '/' in module.params['port']:
    port, protocol = module.params['port'].strip().split('/')
else:
    protocol = None
if not protocol:
"
-------------------------------------------------------------------------
"if '/' in module.params['port']:
    port, protocol = module.params['port'].strip().split('/')
else:
    port = None
    protocol = None
if not protocol:"
-------------------------------------------------------------------------
"if '/' in module.params['port']:
    port, protocol = module.params['port'].strip().split('/')
else:
    protocol = None
if not protocol:
"
-------------------------------------------------------------------------
"Recom
PRs: 50242, 50493"
-------------------------------------------------------------------------
=========================================================================
"ssh_keys:
  - my_key
  - your_key
"
-------------------------------------------------------------------------
"Adapt this - ssh_keys:
  - my_key
  - your_key"
-------------------------------------------------------------------------
"ssh_keys:
  - my_key
  - your_key
"
-------------------------------------------------------------------------
"Recom
PRs: 50337, 50425"
-------------------------------------------------------------------------
=========================================================================
"ssh_key: my_key
"
-------------------------------------------------------------------------
ssh_key: my_key
-------------------------------------------------------------------------
"ssh_key: my_key
"
-------------------------------------------------------------------------
"Recom
PRs: 50337, 50425"
-------------------------------------------------------------------------
=========================================================================
"def get_ssh_keys(self):
    ssh_key_names = self.module.params.get('ssh_keys')
    if not ssh_key_names:
        return []

    ssh_keys = []
    for ssh_key_name in ssh_key_names:
        ssh_key = self.query_resource_by_key(
            key='name',
            value=ssh_key_name,
            resource='sshkey',
            use_cache=True
        )
        if ssh_key:
            ssh_keys.append(ssh_key)
    return ssh_keys
"
-------------------------------------------------------------------------
"```python
def get_ssh_keys(self):
    ssh_key_names = self.module.params.get('ssh_keys')
    if not ssh_key_names:
        return []

    ssh_keys = []
    for ssh_key_name in ssh_key_names:
        ssh_key = self.query_resource_by_key(
            key='name',
            value=ssh_key_name,
            resource='sshkey',
            use_cache=True
        )
        if ssh_key:
            ssh_keys.append(ssh_key)
    return ssh_keys
```"
-------------------------------------------------------------------------
"def get_ssh_keys(self):
    ssh_key_names = self.module.params.get('ssh_keys')
    if not ssh_key_names:
        return []

    ssh_keys = []
    for ssh_key_name in ssh_key_names:
        ssh_key = self.query_resource_by_key(
            key='name',
            value=ssh_key_name,
            resource='sshkey',
            use_cache=True
        )
        if ssh_key:
            ssh_keys.append(ssh_key)
    return ssh_keys
"
-------------------------------------------------------------------------
"Recom
PRs: 50337, 50425"
-------------------------------------------------------------------------
=========================================================================
"'SSHKEYID': ','.join([ssh_key['SSHKEYID'] for ssh_key in self.get_ssh_keys()]),
"
-------------------------------------------------------------------------
"'SSHKEYID': ','.join([ssh_key['SSHKEYID'] for ssh_key in self.get_ssh_keys()]),"
-------------------------------------------------------------------------
"'SSHKEYID': ','.join([ssh_key['SSHKEYID'] for ssh_key in self.get_ssh_keys()]),
"
-------------------------------------------------------------------------
"Recom
PRs: 50337, 50425"
-------------------------------------------------------------------------
=========================================================================
"name: pacur/centos-7:56
repository: dcoppenhagan/myimage:7.56
 # Image will be centos:7
 # Will be pushed to localhost:5000/centos:7
me: Add tag latest to image
cker_image:
name: myimage:7.1.2
repository: myimage:latest

"
-------------------------------------------------------------------------
"```yaml
- name: Tag and push to docker hub
  docker_image:
    name: pacur/centos-7:56
    repository: dcoppenhagan/myimage:7.56
    push: yes

- name: Tag and push to local registry
  docker_image:
    name: myimage:7.1.2
    repository: myimage:latest
    push: yes

- name: Remove image
  docker_image:
    state: absent
```"
-------------------------------------------------------------------------
"name: pacur/centos-7:56
repository: dcoppenhagan/myimage:7.56
 # Image will be centos:7
 # Will be pushed to localhost:5000/centos:7
me: Add tag latest to image
cker_image:
name: myimage:7.1.2
repository: myimage:latest

"
-------------------------------------------------------------------------
"Recom
PRs: 50321, 50325"
-------------------------------------------------------------------------
=========================================================================
"except (ansible.module_utils.urls.ConnectionError, influx.exceptions.InfluxDBClientError) as e:
"
-------------------------------------------------------------------------
"except (ansible.module_utils.urls.ConnectionError, influx.exceptions.InfluxDBClientError) as e:"
-------------------------------------------------------------------------
"except (ansible.module_utils.urls.ConnectionError, influx.exceptions.InfluxDBClientError) as e:
"
-------------------------------------------------------------------------
"Recom
PRs: 50134, 50302"
-------------------------------------------------------------------------
=========================================================================
"if path.startswith('test/env/'):
    return minimal

"
-------------------------------------------------------------------------
"```python
class PathMapper(object):
    if path.startswith('test/legacy/'):
        return minimal

    if path.startswith('test/integration/roles/'):
        return minimal

    if path.startswith('test/env/'):
        return minimal
```"
-------------------------------------------------------------------------
"if path.startswith('test/env/'):
    return minimal

"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50270"
-------------------------------------------------------------------------
=========================================================================
"from lib.env import (
EnvConfig,
command_env,


"
-------------------------------------------------------------------------
"```python
from lib.env import (
    EnvConfig,
    command_env,
)
```"
-------------------------------------------------------------------------
"from lib.env import (
EnvConfig,
command_env,


"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50270"
-------------------------------------------------------------------------
=========================================================================
"env = subparsers.add_parser('env',
                            parents=[common],
                            help='show information about the test environment')

env.set_defaults(func=command_env,
                 config=EnvConfig)

env.add_argument('--show',
                 action='store_true',
                 help='show environment on stdout')

env.add_argument('--dump',
                 action='store_true',
                 help='dump environment to disk')

"
-------------------------------------------------------------------------
"```python
def parse_args():
    parser = argparse.ArgumentParser()
    common = argparse.ArgumentParser(add_help=False)
    
    env = parser.add_parser('env',
                            parents=[common],
                            help='show information about the test environment')
    
    env.set_defaults(func=command_env,
                     config=EnvConfig)
    
    env.add_argument('--show',
                     action='store_true',
                     help='show environment on stdout')
    
    env.add_argument('--dump',
                     action='store_true',
                     help='dump environment to disk')

    if argcomplete:
        argcomplete.autocomplete(parser, always_complete_options=False, validator=lambda i, k: True)
```"
-------------------------------------------------------------------------
"env = subparsers.add_parser('env',
                            parents=[common],
                            help='show information about the test environment')

env.set_defaults(func=command_env,
                 config=EnvConfig)

env.add_argument('--show',
                 action='store_true',
                 help='show environment on stdout')

env.add_argument('--dump',
                 action='store_true',
                 help='dump environment to disk')

"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50270"
-------------------------------------------------------------------------
=========================================================================
":type command: str
super(EnvironmentConfig, self).__init__(args, command)
"
-------------------------------------------------------------------------
"```python
class EnvironmentConfig(CommonConfig):
    def __init__(self, args, command: str):
        super(EnvironmentConfig, self).__init__(args)
```"
-------------------------------------------------------------------------
":type command: str
super(EnvironmentConfig, self).__init__(args, command)
"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50270"
-------------------------------------------------------------------------
=========================================================================
"if ('@' in image or ':' in image) and docker_images(args, image):
    display.info('Skipping docker pull of existing image with tag or digest: %s' % image, verbosity=2)
    return

"
-------------------------------------------------------------------------
"if ('@' in image or ':' in image) and docker_images(args, image):
    display.info('Skipping docker pull of existing image with tag or digest: %s' % image, verbosity=2)
    return"
-------------------------------------------------------------------------
"if ('@' in image or ':' in image) and docker_images(args, image):
    display.info('Skipping docker pull of existing image with tag or digest: %s' % image, verbosity=2)
    return

"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50270"
-------------------------------------------------------------------------
=========================================================================
"def docker_images(args, image):
""""""
:param args: CommonConfig
:param image: str
:rtype: list[dict[str, any]]
""""""
stdout, _dummy = docker_command(args, ['images', image, '--format', '{{json .}}'], capture=True, always=True)
results = [json.loads(line) for line in stdout.splitlines()]
return results


"
-------------------------------------------------------------------------
"```python
def docker_images(args, image):
    """"""
    :param args: CommonConfig
    :param image: str
    :rtype: list[dict[str, any]]
    """"""
    stdout, _dummy = docker_command(args, ['images', image, '--format', '{{json .}}'], capture=True, always=True)
    results = [json.loads(line) for line in stdout.splitlines()]
    return results
```"
-------------------------------------------------------------------------
"def docker_images(args, image):
""""""
:param args: CommonConfig
:param image: str
:rtype: list[dict[str, any]]
""""""
stdout, _dummy = docker_command(args, ['images', image, '--format', '{{json .}}'], capture=True, always=True)
results = [json.loads(line) for line in stdout.splitlines()]
return results


"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50270"
-------------------------------------------------------------------------
=========================================================================
"def docker_info(args):
:param args: CommonConfig
:rtype: dict[str, any]
""""""
stdout, _dummy = docker_command(args, ['info', '--format', '{{json .}}'], capture=True, always=True)
return json.loads(stdout)


docker_version(args):
""""""
:param args: CommonConfig
:rtype: dict[str, any]
""""""
stdout, _dummy = docker_command(args, ['version', '--format', '{{json .}}'], capture=True, always=True)
return json.loads(stdout)


docker_command(args, cmd, capture=False, stdin=None, stdout=None, always=False):
""""""
:type args: CommonConfig
:type always: bool
return run_command(args, ['docker']  cmd, env=env, capture=capture, stdin=stdin, stdout=stdout, always=always)
"
-------------------------------------------------------------------------
"```python
def docker_info(args: CommonConfig) -> dict[str, any]:
    """"""
    :param args: CommonConfig
    :rtype: dict[str, any]
    """"""
    stdout, _dummy = docker_command(args, ['info', '--format', '{{json .}}'], capture=True, always=True)
    return json.loads(stdout)


def docker_version(args: CommonConfig) -> dict[str, any]:
    """"""
    :param args: CommonConfig
    :rtype: dict[str, any]
    """"""
    stdout, _dummy = docker_command(args, ['version', '--format', '{{json .}}'], capture=True, always=True)
    return json.loads(stdout)


def docker_command(args: CommonConfig, cmd, capture=False, stdin=None, stdout=None, always=False):
    """"""
    :type args: CommonConfig
    :type always: bool
    return run_command(args, ['docker'] + cmd, env=env, capture=capture, stdin=stdin, stdout=stdout, always=always)
    No need to provide extra information.
    """"""
```"
-------------------------------------------------------------------------
"def docker_info(args):
:param args: CommonConfig
:rtype: dict[str, any]
""""""
stdout, _dummy = docker_command(args, ['info', '--format', '{{json .}}'], capture=True, always=True)
return json.loads(stdout)


docker_version(args):
""""""
:param args: CommonConfig
:rtype: dict[str, any]
""""""
stdout, _dummy = docker_command(args, ['version', '--format', '{{json .}}'], capture=True, always=True)
return json.loads(stdout)


docker_command(args, cmd, capture=False, stdin=None, stdout=None, always=False):
""""""
:type args: CommonConfig
:type always: bool
return run_command(args, ['docker']  cmd, env=env, capture=capture, stdin=stdin, stdout=stdout, always=always)
"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50270"
-------------------------------------------------------------------------
=========================================================================
"if path.startswith('test/env/'):
    return minimal

"
-------------------------------------------------------------------------
"```python
class PathMapper(object):
    if path.startswith('test/env/'):
        return minimal
```"
-------------------------------------------------------------------------
"if path.startswith('test/env/'):
    return minimal

"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50269"
-------------------------------------------------------------------------
=========================================================================
"from lib.env import (
EnvConfig,
command_env,


"
-------------------------------------------------------------------------
"```python
from lib.env import (
    EnvConfig,
    command_env,
)
```"
-------------------------------------------------------------------------
"from lib.env import (
EnvConfig,
command_env,


"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50269"
-------------------------------------------------------------------------
=========================================================================
"env = subparsers.add_parser('env',
                            parents=[common],
                            help='show information about the test environment')

env.set_defaults(func=command_env,
                 config=EnvConfig)

env.add_argument('--show',
                 action='store_true',
                 help='show environment on stdout')

env.add_argument('--dump',
                 action='store_true',
                 help='dump environment to disk')

"
-------------------------------------------------------------------------
"```python
env = subparsers.add_parser('env',
                            parents=[common],
                            help='show information about the test environment')

env.set_defaults(func=command_env,
                 config=EnvConfig)

env.add_argument('--show',
                 action='store_true',
                 help='show environment on stdout')

env.add_argument('--dump',
                 action='store_true',
                 help='dump environment to disk')
```"
-------------------------------------------------------------------------
"env = subparsers.add_parser('env',
                            parents=[common],
                            help='show information about the test environment')

env.set_defaults(func=command_env,
                 config=EnvConfig)

env.add_argument('--show',
                 action='store_true',
                 help='show environment on stdout')

env.add_argument('--dump',
                 action='store_true',
                 help='dump environment to disk')

"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50269"
-------------------------------------------------------------------------
=========================================================================
":type command: str
super(EnvironmentConfig, self).__init__(args, command)
"
-------------------------------------------------------------------------
"super(EnvironmentConfig, self).__init__(args, command)"
-------------------------------------------------------------------------
":type command: str
super(EnvironmentConfig, self).__init__(args, command)
"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50269"
-------------------------------------------------------------------------
=========================================================================
"if ('@' in image or ':' in image) and docker_images(args, image):
    display.info('Skipping docker pull of existing image with tag or digest: %s' % image, verbosity=2)
    return

"
-------------------------------------------------------------------------
"if ('@' in image or ':' in image) and docker_images(args, image):
    display.info('Skipping docker pull of existing image with tag or digest: %s' % image, verbosity=2)
    return"
-------------------------------------------------------------------------
"if ('@' in image or ':' in image) and docker_images(args, image):
    display.info('Skipping docker pull of existing image with tag or digest: %s' % image, verbosity=2)
    return

"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50269"
-------------------------------------------------------------------------
=========================================================================
"def docker_images(args, image):
""""""
:param args: CommonConfig
:param image: str
:rtype: list[dict[str, any]]
""""""
stdout, _dummy = docker_command(args, ['images', image, '--format', '{{json .}}'], capture=True, always=True)
results = [json.loads(line) for line in stdout.splitlines()]
return results


"
-------------------------------------------------------------------------
"```python
def docker_images(args, image):
    """"""
    :param args: CommonConfig
    :param image: str
    :rtype: list[dict[str, any]]
    """"""
    stdout, _dummy = docker_command(args, ['images', image, '--format', '{{json .}}'], capture=True, always=True)
    results = [json.loads(line) for line in stdout.splitlines()]
    return results
```"
-------------------------------------------------------------------------
"def docker_images(args, image):
""""""
:param args: CommonConfig
:param image: str
:rtype: list[dict[str, any]]
""""""
stdout, _dummy = docker_command(args, ['images', image, '--format', '{{json .}}'], capture=True, always=True)
results = [json.loads(line) for line in stdout.splitlines()]
return results


"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50269"
-------------------------------------------------------------------------
=========================================================================
"def docker_info(args):
:param args: CommonConfig
:rtype: dict[str, any]
""""""
stdout, _dummy = docker_command(args, ['info', '--format', '{{json .}}'], capture=True, always=True)
return json.loads(stdout)


docker_version(args):
""""""
:param args: CommonConfig
:rtype: dict[str, any]
""""""
stdout, _dummy = docker_command(args, ['version', '--format', '{{json .}}'], capture=True, always=True)
return json.loads(stdout)


docker_command(args, cmd, capture=False, stdin=None, stdout=None, always=False):
""""""
:type args: CommonConfig
:type always: bool
return run_command(args, ['docker']  cmd, env=env, capture=capture, stdin=stdin, stdout=stdout, always=always)
"
-------------------------------------------------------------------------
"```python
def docker_info(args):
    """"""
    :param args: CommonConfig
    :rtype: dict[str, any]
    """"""
    stdout, _dummy = docker_command(args, ['info', '--format', '{{json .}}'], capture=True, always=True)
    return json.loads(stdout)


def docker_version(args):
    """"""
    :param args: CommonConfig
    :rtype: dict[str, any]
    """"""
    stdout, _dummy = docker_command(args, ['version', '--format', '{{json .}}'], capture=True, always=True)
    return json.loads(stdout)


def docker_command(args, cmd, capture=False, stdin=None, stdout=None, always=False):
    """"""
    :type args: CommonConfig
    :type always: bool
    return run_command(args, ['docker'] + cmd, env=env, capture=capture, stdin=stdin, stdout=stdout, always=always)
    No need to provide extra information.
    """"""
```"
-------------------------------------------------------------------------
"def docker_info(args):
:param args: CommonConfig
:rtype: dict[str, any]
""""""
stdout, _dummy = docker_command(args, ['info', '--format', '{{json .}}'], capture=True, always=True)
return json.loads(stdout)


docker_version(args):
""""""
:param args: CommonConfig
:rtype: dict[str, any]
""""""
stdout, _dummy = docker_command(args, ['version', '--format', '{{json .}}'], capture=True, always=True)
return json.loads(stdout)


docker_command(args, cmd, capture=False, stdin=None, stdout=None, always=False):
""""""
:type args: CommonConfig
:type always: bool
return run_command(args, ['docker']  cmd, env=env, capture=capture, stdin=stdin, stdout=stdout, always=always)
"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50269"
-------------------------------------------------------------------------
=========================================================================
"if path.startswith('test/env/'):
    return minimal

"
-------------------------------------------------------------------------
"if path.startswith('test/env/'):
    return minimal"
-------------------------------------------------------------------------
"if path.startswith('test/env/'):
    return minimal

"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50268"
-------------------------------------------------------------------------
=========================================================================
"from lib.env import (
EnvConfig,
command_env,


"
-------------------------------------------------------------------------
"from lib.env import (
    EnvConfig,
    command_env,
)"
-------------------------------------------------------------------------
"from lib.env import (
EnvConfig,
command_env,


"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50268"
-------------------------------------------------------------------------
=========================================================================
"env = subparsers.add_parser('env',
                            parents=[common],
                            help='show information about the test environment')

env.set_defaults(func=command_env,
                 config=EnvConfig)

env.add_argument('--show',
                 action='store_true',
                 help='show environment on stdout')

env.add_argument('--dump',
                 action='store_true',
                 help='dump environment to disk')

"
-------------------------------------------------------------------------
"```python
env = subparsers.add_parser('env',
                            parents=[common],
                            help='show information about the test environment')

env.set_defaults(func=command_env,
                 config=EnvConfig)

env.add_argument('--show',
                 action='store_true',
                 help='show environment on stdout')

env.add_argument('--dump',
                 action='store_true',
                 help='dump environment to disk')
```"
-------------------------------------------------------------------------
"env = subparsers.add_parser('env',
                            parents=[common],
                            help='show information about the test environment')

env.set_defaults(func=command_env,
                 config=EnvConfig)

env.add_argument('--show',
                 action='store_true',
                 help='show environment on stdout')

env.add_argument('--dump',
                 action='store_true',
                 help='dump environment to disk')

"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50268"
-------------------------------------------------------------------------
=========================================================================
":type command: str
super(EnvironmentConfig, self).__init__(args, command)
"
-------------------------------------------------------------------------
"class EnvironmentConfig(CommonConfig):
     def __init__(self, args, command: str):
         super(EnvironmentConfig, self).__init__(args)"
-------------------------------------------------------------------------
":type command: str
super(EnvironmentConfig, self).__init__(args, command)
"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50268"
-------------------------------------------------------------------------
=========================================================================
"if ('@' in image or ':' in image) and docker_images(args, image):
    display.info('Skipping docker pull of existing image with tag or digest: %s' % image, verbosity=2)
    return

"
-------------------------------------------------------------------------
"if ('@' in image or ':' in image) and docker_images(args, image):
    display.info('Skipping docker pull of existing image with tag or digest: %s' % image, verbosity=2)
    return"
-------------------------------------------------------------------------
"if ('@' in image or ':' in image) and docker_images(args, image):
    display.info('Skipping docker pull of existing image with tag or digest: %s' % image, verbosity=2)
    return

"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50268"
-------------------------------------------------------------------------
=========================================================================
"def docker_images(args, image):
""""""
:param args: CommonConfig
:param image: str
:rtype: list[dict[str, any]]
""""""
stdout, _dummy = docker_command(args, ['images', image, '--format', '{{json .}}'], capture=True, always=True)
results = [json.loads(line) for line in stdout.splitlines()]
return results


"
-------------------------------------------------------------------------
"```python
def docker_images(args, image):
    """"""
    :param args: CommonConfig
    :param image: str
    :rtype: list[dict[str, any]]
    """"""
    stdout, _dummy = docker_command(args, ['images', image, '--format', '{{json .}}'], capture=True, always=True)
    results = [json.loads(line) for line in stdout.splitlines()]
    return results
```"
-------------------------------------------------------------------------
"def docker_images(args, image):
""""""
:param args: CommonConfig
:param image: str
:rtype: list[dict[str, any]]
""""""
stdout, _dummy = docker_command(args, ['images', image, '--format', '{{json .}}'], capture=True, always=True)
results = [json.loads(line) for line in stdout.splitlines()]
return results


"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50268"
-------------------------------------------------------------------------
=========================================================================
"def docker_info(args):
:param args: CommonConfig
:rtype: dict[str, any]
""""""
stdout, _dummy = docker_command(args, ['info', '--format', '{{json .}}'], capture=True, always=True)
return json.loads(stdout)


docker_version(args):
""""""
:param args: CommonConfig
:rtype: dict[str, any]
""""""
stdout, _dummy = docker_command(args, ['version', '--format', '{{json .}}'], capture=True, always=True)
return json.loads(stdout)


docker_command(args, cmd, capture=False, stdin=None, stdout=None, always=False):
""""""
:type args: CommonConfig
:type always: bool
return run_command(args, ['docker']  cmd, env=env, capture=capture, stdin=stdin, stdout=stdout, always=always)
"
-------------------------------------------------------------------------
"def docker_info(args):
    """"""
    :param args: CommonConfig
    :rtype: dict[str, any]
    """"""
    stdout, _dummy = docker_command(args, ['info', '--format', '{{json .}}'], capture=True, always=True)
    return json.loads(stdout)


def docker_version(args):
    """"""
    :param args: CommonConfig
    :rtype: dict[str, any]
    """"""
    stdout, _dummy = docker_command(args, ['version', '--format', '{{json .}}'], capture=True, always=True)
    return json.loads(stdout)


def docker_command(args, cmd, capture=False, stdin=None, stdout=None, always=False):
    """"""
    :type args: CommonConfig
    :type always: bool
    """"""
    return run_command(args, ['docker'] + cmd, env=env, capture=capture, stdin=stdin, stdout=stdout, always=always)"
-------------------------------------------------------------------------
"def docker_info(args):
:param args: CommonConfig
:rtype: dict[str, any]
""""""
stdout, _dummy = docker_command(args, ['info', '--format', '{{json .}}'], capture=True, always=True)
return json.loads(stdout)


docker_version(args):
""""""
:param args: CommonConfig
:rtype: dict[str, any]
""""""
stdout, _dummy = docker_command(args, ['version', '--format', '{{json .}}'], capture=True, always=True)
return json.loads(stdout)


docker_command(args, cmd, capture=False, stdin=None, stdout=None, always=False):
""""""
:type args: CommonConfig
:type always: bool
return run_command(args, ['docker']  cmd, env=env, capture=capture, stdin=stdin, stdout=stdout, always=always)
"
-------------------------------------------------------------------------
"Recom
PRs: 50176, 50268"
-------------------------------------------------------------------------
=========================================================================
"choices: [ allow, block ]
"
-------------------------------------------------------------------------
"```yaml
options:
  description:
    - What to do with the items this rule is for.
  required: yes
  choices: [ allow, block ]
description:
  description:
    - Description for the firewall rule.
```"
-------------------------------------------------------------------------
"choices: [ allow, block ]
"
-------------------------------------------------------------------------
"Recom
PRs: 50207, 50224"
-------------------------------------------------------------------------
=========================================================================
"choices: [ allow, block ]
"
-------------------------------------------------------------------------
"```yaml
options:
  description:
    - What to do with the items this rule is for.
  required: yes
  choices:
    - allow
    - block
description:
  description:
    - Description for the firewall rule.
```"
-------------------------------------------------------------------------
"choices: [ allow, block ]
"
-------------------------------------------------------------------------
"Recom
PRs: 50207, 50222"
-------------------------------------------------------------------------
=========================================================================
"
# Some types of 1Password items have a 'password' field directly alongside the 'fields' attribute,
# not inside it, so we need to check there first.
if (field_name in data['details']):
    return {field_name: data['details'][field_name]}

# Otherwise we continue looking inside the 'fields' attribute for the specified field.
else:
    if section_title is None:
        for field_data in data['details'].get('fields', []):
            if field_data.get('name').lower() == field_name.lower():
                return {field_name: field_data.get('value', '')}

    # Not found it yet, so now lets see if there are any sections defined
    # and search through those for the field. If a section was given, we skip
    # any non-matching sections, otherwise we search them all until we find the field.
    for section_data in data['details'].get('sections', []):
        if section_title is not None and section_title.lower() != section_data['title'].lower():
            continue
        for field_data in section_data.get('fields', []):
            if field_data.get('t').lower() == field_name.lower():
                return {field_name: field_data.get('v', '')}
"
-------------------------------------------------------------------------
"```python
# Some types of 1Password items have a 'password' field directly alongside the 'fields' attribute,
# not inside it, so we need to check there first.
if field_name in data['details']:
    return {field_name: data['details'][field_name]}

# Otherwise we continue looking inside the 'fields' attribute for the specified field.
else:
    if section_title is None:
        for field_data in data['details'].get('fields', []):
            if field_data.get('name').lower() == field_name.lower():
                return {field_name: field_data.get('value', '')}

    # Not found it yet, so now lets see if there are any sections defined
    # and search through those for the field. If a section was given, we skip
    # any non-matching sections, otherwise we search them all until we find the field.
    for section_data in data['details'].get('sections', []):
        if section_title is not None and section_title.lower() != section_data['title'].lower():
            continue
        for field_data in section_data.get('fields', []):
            if field_data.get('t').lower() == field_name.lower():
                return {field_name: field_data.get('v', '')}
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes, to_native
class AnsibleModuleError(Exception):
def __init__(self, results):
    self.results = results

def __repr__(self):
    return self.results


"
-------------------------------------------------------------------------
"Recom
PRs: 47213, 50160"
-------------------------------------------------------------------------
=========================================================================
"# Exact line or Regexp matched a line in the file
"
-------------------------------------------------------------------------
"```python
# Exact line or Regexp matched a line in the file
def present(module, dest, regexp, line, insertafter, insertbefore, create, msg='', changed=False):
    b_linesep = to_bytes(os.linesep, errors='surrogate_or_strict')
    if index[0] != -1:
        if backrefs:
            b_new_line = m.expand(b_line)
```"
-------------------------------------------------------------------------
"# Exact line or Regexp matched a line in the file
"
-------------------------------------------------------------------------
"Recom
PRs: 49409, 50086"
-------------------------------------------------------------------------
=========================================================================
"# If no regexp was given and no line match is found anywhere in the file,
if regexp is None and m is None:
"
-------------------------------------------------------------------------
"```python
# If no regexp was given and no line match is found anywhere in the file,
if regexp is None and m is None:
```"
-------------------------------------------------------------------------
"# If no regexp was given and no line match is found anywhere in the file,
if regexp is None and m is None:
"
-------------------------------------------------------------------------
"Recom
PRs: 49409, 50086"
-------------------------------------------------------------------------
=========================================================================
"msg = 'line added'
= 'line added'
"
-------------------------------------------------------------------------
msg = 'line added'
-------------------------------------------------------------------------
"msg = 'line added'
= 'line added'
"
-------------------------------------------------------------------------
"Recom
PRs: 49409, 50086"
-------------------------------------------------------------------------
=========================================================================
"# Exact line or Regexp matched a line in the file
"
-------------------------------------------------------------------------
"```python
def present(module, dest, regexp, line, insertafter, insertbefore, create,
     msg = ''
     changed = False
     b_linesep = to_bytes(os.linesep, errors='surrogate_or_strict')
     if index[0] != -1:
         if backrefs:
             b_new_line = m.expand(b_line)
```"
-------------------------------------------------------------------------
"# Exact line or Regexp matched a line in the file
"
-------------------------------------------------------------------------
"Recom
PRs: 49409, 50084"
-------------------------------------------------------------------------
=========================================================================
"# If no regexp was given and no line match is found anywhere in the file,
if regexp is None and m is None:
"
-------------------------------------------------------------------------
"```python
# If no regexp was given and no line match is found anywhere in the file,
if regexp is None and m is None:
```"
-------------------------------------------------------------------------
"# If no regexp was given and no line match is found anywhere in the file,
if regexp is None and m is None:
"
-------------------------------------------------------------------------
"Recom
PRs: 49409, 50084"
-------------------------------------------------------------------------
=========================================================================
"msg = 'line added'
= 'line added'
"
-------------------------------------------------------------------------
"```python
msg = 'line added'
```"
-------------------------------------------------------------------------
"msg = 'line added'
= 'line added'
"
-------------------------------------------------------------------------
"Recom
PRs: 49409, 50084"
-------------------------------------------------------------------------
=========================================================================
"cache_socket_timeout = self._ssh_shell.gettimeout()
if cache_socket_timeout != command_timeout:
    self._ssh_shell.settimeout(command_timeout)
"
-------------------------------------------------------------------------
"```python
cache_socket_timeout = self._ssh_shell.gettimeout()
if cache_socket_timeout != command_timeout:
    self._ssh_shell.settimeout(command_timeout)
```"
-------------------------------------------------------------------------
"cache_socket_timeout = self._ssh_shell.gettimeout()
if cache_socket_timeout != command_timeout:
    self._ssh_shell.settimeout(command_timeout)
"
-------------------------------------------------------------------------
"Recom
PRs: 49922, 50068"
-------------------------------------------------------------------------
=========================================================================
"# reset socket timeout to global timeout
self._ssh_shell.settimeout(cache_socket_timeout)
"
-------------------------------------------------------------------------
"```python
# reset socket timeout to global timeout
self._ssh_shell.settimeout(cache_socket_timeout)
```"
-------------------------------------------------------------------------
"# reset socket timeout to global timeout
self._ssh_shell.settimeout(cache_socket_timeout)
"
-------------------------------------------------------------------------
"Recom
PRs: 49922, 50068"
-------------------------------------------------------------------------
=========================================================================
"# reset socket timeout to global timeout
self._ssh_shell.settimeout(cache_socket_timeout)
"
-------------------------------------------------------------------------
"```python
# reset socket timeout to global timeout
self._ssh_shell.settimeout(cache_socket_timeout)
```"
-------------------------------------------------------------------------
"# reset socket timeout to global timeout
self._ssh_shell.settimeout(cache_socket_timeout)
"
-------------------------------------------------------------------------
"Recom
PRs: 49922, 50068"
-------------------------------------------------------------------------
=========================================================================
"raise AnsibleConnectionFailure(""timeout value %s seconds reached while trying to send command: %s""
                               % (self._ssh_shell.gettimeout(), command.strip()))
"
-------------------------------------------------------------------------
"```python
raise AnsibleConnectionFailure(""timeout value %s seconds reached while trying to send command: %s"" % (self._ssh_shell.gettimeout(), command.strip()))
```"
-------------------------------------------------------------------------
"raise AnsibleConnectionFailure(""timeout value %s seconds reached while trying to send command: %s""
                               % (self._ssh_shell.gettimeout(), command.strip()))
"
-------------------------------------------------------------------------
"Recom
PRs: 49922, 50068"
-------------------------------------------------------------------------
=========================================================================
"return []
"
-------------------------------------------------------------------------
module.fail_json(msg=msg)
-------------------------------------------------------------------------
"return []
"
-------------------------------------------------------------------------
"Recom
PRs: 49987, 49988"
-------------------------------------------------------------------------
=========================================================================
"user_password = module.params['user_password']
"
-------------------------------------------------------------------------
"```python
user_password = module.params['user_password']
```"
-------------------------------------------------------------------------
"if user_password is None or check_user_password(module, client, user_name, user_password):
user_password = user_password or ''
"
-------------------------------------------------------------------------
"Recom
PRs: 49084, 49973"
-------------------------------------------------------------------------
=========================================================================
"pname = re.search('NAME=""(.*)""', data)
if pname:
    clear_facts['distribution'] = pname.groups()[0]
"
-------------------------------------------------------------------------
"```python
import re

class DistributionFiles:
    release = re.search('ID=(.*)', data)
    if release:
         clear_facts['distribution_release'] = release.groups()[0]
    return True, clear_facts
```"
-------------------------------------------------------------------------
"pname = re.search('NAME=""(.*)""', data)
if pname:
    clear_facts['distribution'] = pname.groups()[0]
"
-------------------------------------------------------------------------
"Recom
PRs: 49639, 49906"
-------------------------------------------------------------------------
=========================================================================
"'FreeBSD': ['FreeBSD', 'TrueOS'],
'ClearLinux': ['Clear Linux OS', 'Clear Linux Mix']}
"
-------------------------------------------------------------------------
"```python
from itertools import chain
from __future__ import print_function
import pytest

OS_FAMILY_MAP = {
    'AIX': ['AIX'],
    'HP-UX': ['HPUX'],
    'Darwin': ['MacOSX'],
    'FreeBSD': ['FreeBSD', 'TrueOS'],
    'ClearLinux': ['Clear Linux OS', 'Clear Linux Mix']
}

OS_FAMILY = {name: family for family, names in OS_FAMILY_MAP.items() for name in names}
```"
-------------------------------------------------------------------------
"'FreeBSD': ['FreeBSD', 'TrueOS'],
'ClearLinux': ['Clear Linux OS', 'Clear Linux Mix']}
"
-------------------------------------------------------------------------
"Recom
PRs: 49639, 49906"
-------------------------------------------------------------------------
=========================================================================
"""distribution"": ""Clear Linux OS"",
"
-------------------------------------------------------------------------
"```python
     ""distribution"": ""ClearLinux"",
```"
-------------------------------------------------------------------------
"""distribution"": ""Clear Linux OS"",
"
-------------------------------------------------------------------------
"Recom
PRs: 49639, 49906"
-------------------------------------------------------------------------
=========================================================================
"DEFAULT_SHUTDOWN_COMMAND_ARGS = '-r {delay_min} ""{message}""'
    'openbsd': '/sbin/sysctl kern.boottime',
    'macosx': 'who -b',
    'solaris': 'who -b',
    'alpine': 'reboot',
    'alpine': '',
    'linux': DEFAULT_SHUTDOWN_COMMAND_ARGS,
    'macosx': '-r {delay_min} ""{message}""',
    'solaris': '-y -g {delay_sec} -i 6 ""{message}""',
    'sunos': '-y -g {delay_sec} -i 6 ""{message}""',
}

TEST_COMMANDS = {
    'solaris': 'who'
@property
def pre_reboot_delay(self):
    return self._check_delay('pre_reboot_delay', self.DEFAULT_PRE_REBOOT_DELAY)

@property
def post_reboot_delay(self):
    return self._check_delay('post_reboot_delay', self.DEFAULT_POST_REBOOT_DELAY)

def _check_delay(self, key, default):
    """"""Ensure that the value is positive or zero""""""
    value = int(self._task.args.get(key, self._task.args.get(key  '_sec', default)))
    if value < 0:
        value = 0
    return value

def _get_value_from_facts(self, variable_name, distribution, default_value):
    """"""Get distversion specific args first, then distribution, then family, lastly use default""""""
    attr = getattr(self, variable_name)
    value = attr.get(
        distribution['name']  distribution['version'],
        attr.get(
            distribution['name'],
            attr.get(
                distribution['family'],
                getattr(self, default_value))))
    return value

def get_shutdown_command_args(self, distribution):
    args = self._get_value_from_facts('SHUTDOWN_COMMAND_ARGS', distribution, 'DEFAULT_SHUTDOWN_COMMAND_ARGS')
    # Convert seconds to minutes. If less that 60, set it to 0.
    delay_min = self.pre_reboot_delay // 60
    reboot_message = self._task.args.get('msg', self.DEFAULT_REBOOT_MESSAGE)
    return args.format(delay_sec=self.pre_reboot_delay, delay_min=delay_min, message=reboot_message)

def get_distribution(self, task_vars):
    distribution = {}
    display.debug('{action}: running setup module to get distribution'.format(action=self._task.action))
    module_output = self._execute_module(
        task_vars=task_vars,
        module_name='setup',
        module_args={'gather_subset': 'min'})
    try:
        if module_output.get('failed', False):
            raise AnsibleError('Failed to determine system distribution. {0}, {1}'.format(
                to_native(module_output['module_stdout']).strip(),
                to_native(module_output['module_stderr']).strip()))
        distribution['name'] = module_output['ansible_facts']['ansible_distribution'].lower()
        distribution['version'] = to_text(module_output['ansible_facts']['ansible_distribution_version'].split('.')[0])
        distribution['family'] = to_text(module_output['ansible_facts']['ansible_os_family'].lower())
        display.debug(""{action}: distribution: {dist}"".format(action=self._task.action, dist=distribution))
        return distribution
    except KeyError as ke:
        raise AnsibleError('Failed to get distribution information. Missing ""{0}"" in output.'.format(ke.args[0]))

def get_shutdown_command(self, task_vars, distribution):
    shutdown_bin = self._get_value_from_facts('SHUTDOWN_COMMANDS', distribution, 'DEFAULT_SHUTDOWN_COMMAND')

    display.debug('{action}: running find module to get path for ""{command}""'.format(action=self._task.action, command=shutdown_bin))
    find_result = self._execute_module(
        task_vars=task_vars,
        module_name='find',
        module_args={
            'paths': ['/sbin', '/usr/sbin', '/usr/local/sbin'],
            'patterns': [shutdown_bin],
            'file_type': 'any'
        }
    )

    full_path = [x['path'] for x in find_result['files']]
    if not full_path:
        raise AnsibleError('Unable to find command ""{0}"" in system paths.'.format(shutdown_bin))
    self._shutdown_command = full_path[0]
    return self._shutdown_command
            display.warning(""Since Ansible {version}, {arg} is no longer a valid option for {action}"".format(
                version=version,
                arg=arg,
                action=self._task.action))

def get_system_boot_time(self, distribution):
    boot_time_command = self._get_value_from_facts('BOOT_TIME_COMMANDS', distribution, 'DEFAULT_BOOT_TIME_COMMAND')
    display.debug(""{action}: getting boot time with command: '{command}'"".format(action=self._task.action, command=boot_time_command))
        stdout = command_result['stdout']
        stderr = command_result['stderr']
        raise AnsibleError(""{action}: failed to get host boot time info, rc: {rc}, stdout: {out}, stderr: {err}"".format(
                           action=self._task.action,
                           rc=command_result['rc'],
                           out=to_native(stdout),
                           err=to_native(stderr)))
    display.debug(""{action}: last boot time: {boot}"".format(action=self._task.action, boot=command_result['stdout'].strip()))
def check_boot_time(self, distribution, previous_boot_time):
    display.vvv(""{action}: attempting to get system boot time"".format(action=self._task.action))
            display.debug(""{action}: setting connect_timeout to {value}"".format(action=self._task.action, value=connect_timeout))
"
-------------------------------------------------------------------------
"```python
DEFAULT_SHUTDOWN_COMMAND_ARGS = '-r {delay_min} ""{message}""'

BOOT_TIME_COMMANDS = {
    'freebsd': '/sbin/sysctl kern.boottime',
    'sunos': 'who -b',
    'alpine': 'reboot',
}

SHUTDOWN_COMMANDS = {
    'linux': DEFAULT_SHUTDOWN_COMMAND_ARGS,
    'macosx': '-r {delay_min} ""{message}""',
    'solaris': '-y -g {delay_sec} -i 6 ""{message}""',
    'sunos': '-y -g {delay_sec} -i 6 ""{message}""',
}

SHUTDOWN_COMMAND_ARGS = {
    'freebsd': '-r +{delay_sec}s ""{message}""',
    'openbsd': '-r +{delay_min} ""{message}""',
}

TEST_COMMANDS = {
    'solaris': 'who',
}

@property
def pre_reboot_delay(self):
    return self._check_delay('pre_reboot_delay', self.DEFAULT_PRE_REBOOT_DELAY)

@property
def post_reboot_delay(self):
    return self._check_delay('post_reboot_delay', self.DEFAULT_POST_REBOOT_DELAY)

def _check_delay(self, key, default):
    value = int(self._task.args.get(key, self._task.args.get(key + '_sec', default)))
    if value < 0:
        value = 0
    return value

def _get_value_from_facts(self, variable_name, distribution, default_value):
    attr = getattr(self, variable_name)
    value = attr.get(
        distribution['name'] + distribution['version'],
        attr.get(
            distribution['name'],
            attr.get(
                distribution['family'],
                getattr(self, default_value)))
    )
    return value

def get_shutdown_command_args(self, distribution):
    args = self._get_value_from_facts('SHUTDOWN_COMMAND_ARGS', distribution, 'DEFAULT_SHUTDOWN_COMMAND_ARGS')
    delay_min = self.pre_reboot_delay // 60
    reboot_message = self._task.args.get('msg', self.DEFAULT_REBOOT_MESSAGE)
    return args.format(delay_sec=self.pre_reboot_delay, delay_min=delay_min, message=reboot_message)

def get_distribution(self, task_vars):
    distribution = {}
    display.debug('{action}: running setup module to get distribution'.format(action=self._task.action))
    module_output = self._execute_module(
        task_vars=task_vars,
        module_name='setup',
        module_args={'gather_subset': 'min'}
    )
    try:
        if module_output.get('failed', False):
            raise AnsibleError('Failed to determine system distribution. {0}, {1}'.format(
                to_native(module_output['module_stdout']).strip(),
                to_native(module_output['module_stderr']).strip())
            )
    
        distribution['name'] = module_output['ansible_facts']['ansible_distribution'].lower()
        distribution['version'] = to_text(module_output['ansible_facts']['ansible_distribution_version'].split('.')[0])
        distribution['family'] = to_text(module_output['ansible_facts']['ansible_os_family'].lower())
        display.debug(""{action}: distribution: {dist}"".format(action=self._task.action, dist=distribution))
        return distribution
    except KeyError as ke:
        raise AnsibleError('Failed to get distribution information. Missing ""{0}"" in output.'.format(ke.args[0]))

def get_shutdown_command(self, task_vars, distribution):
    shutdown_bin = self._get_value_from_facts('SHUTDOWN_COMMANDS', distribution, 'DEFAULT_SHUTDOWN_COMMAND')

    display.debug('{action}: running find module to get path for ""{command}""'.format(action=self._task.action, command=shutdown_bin))
    find_result = self._execute_module(
        task_vars=task_vars,
        module_name='find',
        module_args={
            'paths': ['/sbin', '/usr/sbin', '/usr/local/sbin'],
            'patterns': [shutdown_bin],
            'file_type': 'any'
        }
    )

    full_path = [x['path'] for x in find_result['files']]
    if not full_path:
        raise AnsibleError('Unable to find command ""{0}"" in system paths.'.format(shutdown_bin))
    self._shutdown_command = full_path[0]
    return self._shutdown_command

def get_system_boot_time(self, distribution):
    boot_time_command = self._get_value_from_facts('BOOT_TIME_COMMANDS', distribution, 'DEFAULT_BOOT_TIME_COMMAND')
    display.debug(""{action}: getting boot time with command: '{command}'"".format(action=self._task.action, command=boot_time_command))

    stdout = command_result['stdout']
    stderr = command_result['stderr']
    raise AnsibleError(""{action}: failed to get host boot time info, rc: {rc}, stdout: {out}, stderr: {err}"".format(
        action=self._task.action,
        rc=command_result['rc'],
        out=to_native(stdout),
        err=to_native(stderr))
    )

def check_boot_time(self, distribution, previous_boot_time):
    display.vvv(""{action}: attempting to get system boot time"".format(action=self._task.action))

            display.debug(""{action}: setting connect_timeout to {value}"".format(action=self._task.action, value=connect_timeout))
```
"
-------------------------------------------------------------------------
"DEFAULT_SHUTDOWN_COMMAND_ARGS = '-r {delay_min} ""{message}""'
    'openbsd': '/sbin/sysctl kern.boottime',
    'macosx': 'who -b',
    'solaris': 'who -b',
    'alpine': 'reboot',
    'alpine': '',
    'linux': DEFAULT_SHUTDOWN_COMMAND_ARGS,
    'macosx': '-r {delay_min} ""{message}""',
    'solaris': '-y -g {delay_sec} -i 6 ""{message}""',
    'sunos': '-y -g {delay_sec} -i 6 ""{message}""',
}

TEST_COMMANDS = {
    'solaris': 'who'
@property
def pre_reboot_delay(self):
    return self._check_delay('pre_reboot_delay', self.DEFAULT_PRE_REBOOT_DELAY)

@property
def post_reboot_delay(self):
    return self._check_delay('post_reboot_delay', self.DEFAULT_POST_REBOOT_DELAY)

def _check_delay(self, key, default):
    """"""Ensure that the value is positive or zero""""""
    value = int(self._task.args.get(key, self._task.args.get(key  '_sec', default)))
    if value < 0:
        value = 0
    return value

def _get_value_from_facts(self, variable_name, distribution, default_value):
    """"""Get distversion specific args first, then distribution, then family, lastly use default""""""
    attr = getattr(self, variable_name)
    value = attr.get(
        distribution['name']  distribution['version'],
        attr.get(
            distribution['name'],
            attr.get(
                distribution['family'],
                getattr(self, default_value))))
    return value

def get_shutdown_command_args(self, distribution):
    args = self._get_value_from_facts('SHUTDOWN_COMMAND_ARGS', distribution, 'DEFAULT_SHUTDOWN_COMMAND_ARGS')
    # Convert seconds to minutes. If less that 60, set it to 0.
    delay_min = self.pre_reboot_delay // 60
    reboot_message = self._task.args.get('msg', self.DEFAULT_REBOOT_MESSAGE)
    return args.format(delay_sec=self.pre_reboot_delay, delay_min=delay_min, message=reboot_message)

def get_distribution(self, task_vars):
    distribution = {}
    display.debug('{action}: running setup module to get distribution'.format(action=self._task.action))
    module_output = self._execute_module(
        task_vars=task_vars,
        module_name='setup',
        module_args={'gather_subset': 'min'})
    try:
        if module_output.get('failed', False):
            raise AnsibleError('Failed to determine system distribution. {0}, {1}'.format(
                to_native(module_output['module_stdout']).strip(),
                to_native(module_output['module_stderr']).strip()))
        distribution['name'] = module_output['ansible_facts']['ansible_distribution'].lower()
        distribution['version'] = to_text(module_output['ansible_facts']['ansible_distribution_version'].split('.')[0])
        distribution['family'] = to_text(module_output['ansible_facts']['ansible_os_family'].lower())
        display.debug(""{action}: distribution: {dist}"".format(action=self._task.action, dist=distribution))
        return distribution
    except KeyError as ke:
        raise AnsibleError('Failed to get distribution information. Missing ""{0}"" in output.'.format(ke.args[0]))

def get_shutdown_command(self, task_vars, distribution):
    shutdown_bin = self._get_value_from_facts('SHUTDOWN_COMMANDS', distribution, 'DEFAULT_SHUTDOWN_COMMAND')

    display.debug('{action}: running find module to get path for ""{command}""'.format(action=self._task.action, command=shutdown_bin))
    find_result = self._execute_module(
        task_vars=task_vars,
        module_name='find',
        module_args={
            'paths': ['/sbin', '/usr/sbin', '/usr/local/sbin'],
            'patterns': [shutdown_bin],
            'file_type': 'any'
        }
    )

    full_path = [x['path'] for x in find_result['files']]
    if not full_path:
        raise AnsibleError('Unable to find command ""{0}"" in system paths.'.format(shutdown_bin))
    self._shutdown_command = full_path[0]
    return self._shutdown_command
            display.warning(""Since Ansible {version}, {arg} is no longer a valid option for {action}"".format(
                version=version,
                arg=arg,
                action=self._task.action))

def get_system_boot_time(self, distribution):
    boot_time_command = self._get_value_from_facts('BOOT_TIME_COMMANDS', distribution, 'DEFAULT_BOOT_TIME_COMMAND')
    display.debug(""{action}: getting boot time with command: '{command}'"".format(action=self._task.action, command=boot_time_command))
        stdout = command_result['stdout']
        stderr = command_result['stderr']
        raise AnsibleError(""{action}: failed to get host boot time info, rc: {rc}, stdout: {out}, stderr: {err}"".format(
                           action=self._task.action,
                           rc=command_result['rc'],
                           out=to_native(stdout),
                           err=to_native(stderr)))
    display.debug(""{action}: last boot time: {boot}"".format(action=self._task.action, boot=command_result['stdout'].strip()))
def check_boot_time(self, distribution, previous_boot_time):
    display.vvv(""{action}: attempting to get system boot time"".format(action=self._task.action))
            display.debug(""{action}: setting connect_timeout to {value}"".format(action=self._task.action, value=connect_timeout))
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"current_boot_time = self.get_system_boot_time(distribution)
en(current_boot_time) == 0 or current_boot_time == previous_boot_time:
raise ValueError(""boot time has not changed"")
test_command(self, distribution, **kwargs):
_command = self._task.args.get('test_command', self._get_value_from_facts('TEST_COMMANDS', distribution, 'DEFAULT_TEST_COMMAND'))
lay.vvv(""{action}: attempting post-reboot test command"".format(action=self._task.action))
lay.debug(""{action}: attempting post-reboot test command '{command}'"".format(action=self._task.action, command=test_command))
"
-------------------------------------------------------------------------
"```python
current_boot_time = self.get_system_boot_time(distribution)
if int(current_boot_time) == 0 or current_boot_time == previous_boot_time:
    raise ValueError(""boot time has not changed"")

def test_command(self, distribution, **kwargs):
    _command = self._task.args.get('test_command', self._get_value_from_facts('TEST_COMMANDS', distribution, 'DEFAULT_TEST_COMMAND'))
    self._display.vvv(""{action}: attempting post-reboot test command"".format(action=self._task.action))
    self._display.debug(""{action}: attempting post-reboot test command '{command}'"".format(action=self._task.action, command=_command))
```"
-------------------------------------------------------------------------
"current_boot_time = self.get_system_boot_time(distribution)
en(current_boot_time) == 0 or current_boot_time == previous_boot_time:
raise ValueError(""boot time has not changed"")
test_command(self, distribution, **kwargs):
_command = self._task.args.get('test_command', self._get_value_from_facts('TEST_COMMANDS', distribution, 'DEFAULT_TEST_COMMAND'))
lay.vvv(""{action}: attempting post-reboot test command"".format(action=self._task.action))
lay.debug(""{action}: attempting post-reboot test command '{command}'"".format(action=self._task.action, command=test_command))
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"msg = 'Test command failed: {err} {out}'.format(
    err=to_native(command_result['stderr']),
    out=to_native(command_result['stdout']))
raise RuntimeError(msg)
lay.vvv(""{action}: system sucessfully rebooted"".format(action=self._task.action))
ntil_success_or_timeout(self, action, reboot_timeout, action_desc, distribution, action_kwargs=None):
ction_kwargs is None:
action_kwargs = {}
    action(distribution=distribution, **action_kwargs)
        display.debug('{action}: {desc} success'.format(action=self._task.action, desc=action_desc))
"
-------------------------------------------------------------------------
"```python
msg = f'Test command failed: {to_native(command_result[""stderr""])} {to_native(command_result[""stdout""])}'
raise RuntimeError(msg)
self._display.vvv(f'{action_desc}: system successfully rebooted')
if action_kwargs is None:
    action_kwargs = {}
    action(distribution=distribution, **action_kwargs)
    self._display.debug(f'{self._task.action}: {action_desc} success')
```"
-------------------------------------------------------------------------
"msg = 'Test command failed: {err} {out}'.format(
    err=to_native(command_result['stderr']),
    out=to_native(command_result['stdout']))
raise RuntimeError(msg)
lay.vvv(""{action}: system sucessfully rebooted"".format(action=self._task.action))
ntil_success_or_timeout(self, action, reboot_timeout, action_desc, distribution, action_kwargs=None):
ction_kwargs is None:
action_kwargs = {}
    action(distribution=distribution, **action_kwargs)
        display.debug('{action}: {desc} success'.format(action=self._task.action, desc=action_desc))
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"display.debug(""{action}: {desc} fail '{err}', retrying in {sleep:.4} seconds..."".format(
    action=self._task.action,
    desc=action_desc,
    err=error,
    sleep=fail_sleep))
utException('Timed out waiting for {desc} (timeout={timeout})'.format(desc=action_desc, timeout=reboot_timeout))
ot(self, task_vars, distribution):
mand = self.get_shutdown_command(task_vars, distribution)
mand_args = self.get_shutdown_command_args(distribution)
nd = '{0} {1}'.format(shutdown_command, shutdown_command_args)
vvv(""{action}: rebooting server..."".format(action=self._task.action))
debug(""{action}: rebooting server with command '{command}'"".format(action=self._task.action, command=reboot_command))
esult = self._low_level_execute_command(reboot_command, sudoable=self.DEFAULT_SUDOABLE)
debug('{action}: AnsibleConnectionFailure caught and handled: {error}'.format(action=self._task.action, error=to_native(e)))
"
-------------------------------------------------------------------------
"```python
ansible.utils.display.debug(""{action}: {desc} fail '{err}', retrying in {sleep:.4f} seconds..."".format(
    action=self._task.action,
    desc=action_desc,
    err=error,
    sleep=fail_sleep))

raise TimedOutException(""Timed out waiting for {desc} (timeout={timeout})"".format(desc=action_desc, timeout=reboot_timeout))

shutdown_command = self.get_shutdown_command(task_vars, distribution)
shutdown_command_args = self.get_shutdown_command_args(distribution)
command = '{0} {1}'.format(shutdown_command, shutdown_command_args)
ansible.utils.display.vvv(""{action}: rebooting server..."".format(action=self._task.action))
ansible.utils.display.debug(""{action}: rebooting server with command '{command}'"".format(action=self._task.action, command=reboot_command))

result = self._low_level_execute_command(reboot_command, sudoable=self.DEFAULT_SUDOABLE)
ansible.utils.display.debug('{action}: AnsibleConnectionFailure caught and handled: {error}'.format(action=self._task.action, error=ansible.module_utils._text.to_native(e)))
```"
-------------------------------------------------------------------------
"display.debug(""{action}: {desc} fail '{err}', retrying in {sleep:.4} seconds..."".format(
    action=self._task.action,
    desc=action_desc,
    err=error,
    sleep=fail_sleep))
utException('Timed out waiting for {desc} (timeout={timeout})'.format(desc=action_desc, timeout=reboot_timeout))
ot(self, task_vars, distribution):
mand = self.get_shutdown_command(task_vars, distribution)
mand_args = self.get_shutdown_command_args(distribution)
nd = '{0} {1}'.format(shutdown_command, shutdown_command_args)
vvv(""{action}: rebooting server..."".format(action=self._task.action))
debug(""{action}: rebooting server with command '{command}'"".format(action=self._task.action, command=reboot_command))
esult = self._low_level_execute_command(reboot_command, sudoable=self.DEFAULT_SUDOABLE)
debug('{action}: AnsibleConnectionFailure caught and handled: {error}'.format(action=self._task.action, error=to_native(e)))
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"result['msg'] = ""Reboot command failed. Error was {stdout}, {stderr}"".format(
    stdout=to_native(reboot_result['stdout'].strip()),
    stderr=to_native(reboot_result['stderr'].strip()))
date_reboot(self, distribution, original_connection_timeout=None, action_kwargs=None):
lay.vvv('{action}: validating reboot'.format(action=self._task.action))
self.do_until_success_or_timeout(
    action=self.check_boot_time,
    action_desc=""last boot time check"",
    reboot_timeout=reboot_timeout,
    distribution=distribution,
    action_kwargs=action_kwargs)

if connect_timeout and original_connection_timeout:
        display.debug(""{action}: setting connect_timeout back to original value of {value}"".format(
            action=self._task.action,
            value=original_connection_timeout))
        self._connection.set_option(""connection_timeout"", original_connection_timeout)
        display.debug(""{action}: failed to reset connection_timeout back to default: {error}"".format(action=self._task.action, error=to_text(e)))
self.do_until_success_or_timeout(
    action=self.run_test_command,
    action_desc=""post-reboot test command"",
    reboot_timeout=reboot_timeout,
    distribution=distribution,
    action_kwargs=action_kwargs)
"
-------------------------------------------------------------------------
"```python
result['msg'] = ""Reboot command failed. Error was {stdout}, {stderr}"".format(
    stdout=to_native(reboot_result['stdout'].strip()),
    stderr=to_native(reboot_result['stderr'].strip()))

self._display.vvv('{action}: validating reboot'.format(action=self._task.action))

self.do_until_success_or_timeout(
    action=self.check_boot_time,
    action_desc=""last boot time check"",
    reboot_timeout=reboot_timeout,
    distribution=distribution,
    action_kwargs=action_kwargs)

if connect_timeout and original_connection_timeout:
    self._display.debug(""{action}: setting connect_timeout back to original value of {value}"".format(
        action=self._task.action,
        value=original_connection_timeout))
    self._connection.set_option(""connection_timeout"", original_connection_timeout)
    try:
        self._connection.set_option(""connection_timeout"", original_connection_timeout)
    except AnsibleError as e:
        self._display.debug(""{action}: failed to reset connection_timeout back to default: {error}"".format(action=self._task.action, error=str(e)))

self.do_until_success_or_timeout(
    action=self.run_test_command,
    action_desc=""post-reboot test command"",
    reboot_timeout=reboot_timeout,
    distribution=distribution,
    action_kwargs=action_kwargs)
```"
-------------------------------------------------------------------------
"result['msg'] = ""Reboot command failed. Error was {stdout}, {stderr}"".format(
    stdout=to_native(reboot_result['stdout'].strip()),
    stderr=to_native(reboot_result['stderr'].strip()))
date_reboot(self, distribution, original_connection_timeout=None, action_kwargs=None):
lay.vvv('{action}: validating reboot'.format(action=self._task.action))
self.do_until_success_or_timeout(
    action=self.check_boot_time,
    action_desc=""last boot time check"",
    reboot_timeout=reboot_timeout,
    distribution=distribution,
    action_kwargs=action_kwargs)

if connect_timeout and original_connection_timeout:
        display.debug(""{action}: setting connect_timeout back to original value of {value}"".format(
            action=self._task.action,
            value=original_connection_timeout))
        self._connection.set_option(""connection_timeout"", original_connection_timeout)
        display.debug(""{action}: failed to reset connection_timeout back to default: {error}"".format(action=self._task.action, error=to_text(e)))
self.do_until_success_or_timeout(
    action=self.run_test_command,
    action_desc=""post-reboot test command"",
    reboot_timeout=reboot_timeout,
    distribution=distribution,
    action_kwargs=action_kwargs)
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"return {'changed': False, 'elapsed': 0, 'rebooted': False, 'failed': True, 'msg': msg}
return {'changed': True, 'elapsed': 0, 'rebooted': True}
task_vars = {}
"
-------------------------------------------------------------------------
"```python
return {'changed': False, 'elapsed': 0, 'rebooted': False, 'failed': True, 'msg': msg}
return {'changed': True, 'elapsed': 0, 'rebooted': True}
task_vars = {}
```"
-------------------------------------------------------------------------
"return {'changed': False, 'elapsed': 0, 'rebooted': False, 'failed': True, 'msg': msg}
return {'changed': True, 'elapsed': 0, 'rebooted': True}
task_vars = {}
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"distribution = self.get_distribution(task_vars)

    previous_boot_time = self.get_system_boot_time(distribution)
# Get the original connection_timeout option var so it can be reset after
original_connection_timeout = None
try:
    original_connection_timeout = self._connection.get_option('connection_timeout')
    display.debug(""{action}: saving original connect_timeout of {timeout}"".format(action=self._task.action, timeout=original_connection_timeout))
except AnsibleError:
    display.debug(""{action}: connect_timeout connection option has not been set"".format(action=self._task.action))
reboot_result = self.perform_reboot(task_vars, distribution)
"
-------------------------------------------------------------------------
"```python
distribution = self.get_distribution(task_vars)

previous_boot_time = self.get_system_boot_time(distribution)

# Get the original connection_timeout option var so it can be reset after
original_connection_timeout = None
try:
    original_connection_timeout = self._connection.get_option('connection_timeout')
    display.debug(""{action}: saving original connection_timeout of {timeout}"".format(action=self._task.action, timeout=original_connection_timeout))
except AnsibleError:
    display.debug(""{action}: connection_timeout connection option has not been set"".format(action=self._task.action))

reboot_result = self.perform_reboot(task_vars, distribution)
```"
-------------------------------------------------------------------------
"distribution = self.get_distribution(task_vars)

    previous_boot_time = self.get_system_boot_time(distribution)
# Get the original connection_timeout option var so it can be reset after
original_connection_timeout = None
try:
    original_connection_timeout = self._connection.get_option('connection_timeout')
    display.debug(""{action}: saving original connect_timeout of {timeout}"".format(action=self._task.action, timeout=original_connection_timeout))
except AnsibleError:
    display.debug(""{action}: connect_timeout connection option has not been set"".format(action=self._task.action))
reboot_result = self.perform_reboot(task_vars, distribution)
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"if self.post_reboot_delay != 0:
    display.debug(""{action}: waiting an additional {delay} seconds"".format(action=self._task.action, delay=self.post_reboot_delay))
    display.vvv(""{action}: waiting an additional {delay} seconds"".format(action=self._task.action, delay=self.post_reboot_delay))
    time.sleep(self.post_reboot_delay)
result = self.validate_reboot(distribution, original_connection_timeout, action_kwargs={'previous_boot_time': previous_boot_time})
"
-------------------------------------------------------------------------
"```python
if self.post_reboot_delay != 0:
    display.debug(""{action}: waiting an additional {delay} seconds"".format(action=self._task.action, delay=self.post_reboot_delay))
    display.vvv(""{action}: waiting an additional {delay} seconds"".format(action=self._task.action, delay=self.post_reboot_delay))
    time.sleep(self.post_reboot_delay)
result = self.validate_reboot(distribution, original_connection_timeout, action_kwargs={'previous_boot_time': previous_boot_time})
```"
-------------------------------------------------------------------------
"DEFAULT_SHUTDOWN_COMMAND_ARGS = '/r /t {delay_sec} /c ""{message}""'
def __init__(self, *args, **kwargs):
    super(ActionModule, self).__init__(*args, **kwargs)
def get_distribution(self, task_vars):
    return {'name': 'windows', 'version': '', 'family': ''}
def get_shutdown_command(self, task_vars, distribution):
    return self.DEFAULT_SHUTDOWN_COMMAND

def perform_reboot(self, task_vars, distribution):
    shutdown_command = self.get_shutdown_command(task_vars, distribution)
    shutdown_command_args = self.get_shutdown_command_args(distribution)
    reboot_command = '{0} {1}'.format(shutdown_command, shutdown_command_args)

    display.vvv(""{action}: rebooting server..."".format(action=self._task.action))
    display.debug(""{action}: distribution: {dist}"".format(action=self._task.action, dist=distribution))
    display.debug(""{action}: rebooting server with command '{command}'"".format(action=self._task.action, command=reboot_command))
    reboot_result = self._low_level_execute_command(reboot_command, sudoable=self.DEFAULT_SUDOABLE)
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"DEFAULT_SHUTDOWN_COMMAND_ARGS = '/r /t {delay_sec} /c ""{message}""'
def __init__(self, *args, **kwargs):
    super(ActionModule, self).__init__(*args, **kwargs)
def get_distribution(self, task_vars):
    return {'name': 'windows', 'version': '', 'family': ''}
def get_shutdown_command(self, task_vars, distribution):
    return self.DEFAULT_SHUTDOWN_COMMAND

def perform_reboot(self, task_vars, distribution):
    shutdown_command = self.get_shutdown_command(task_vars, distribution)
    shutdown_command_args = self.get_shutdown_command_args(distribution)
    reboot_command = '{0} {1}'.format(shutdown_command, shutdown_command_args)

    display.vvv(""{action}: rebooting server..."".format(action=self._task.action))
    display.debug(""{action}: distribution: {dist}"".format(action=self._task.action, dist=distribution))
    display.debug(""{action}: rebooting server with command '{command}'"".format(action=self._task.action, command=reboot_command))
    reboot_result = self._low_level_execute_command(reboot_command, sudoable=self.DEFAULT_SUDOABLE)
"
-------------------------------------------------------------------------
"DEFAULT_SHUTDOWN_COMMAND_ARGS = '/r /t {delay_sec} /c ""{message}""'

def __init__(self, *args, **kwargs):
    super(ActionModule, self).__init__(*args, **kwargs)

def get_distribution(self, task_vars):
    return {'name': 'windows', 'version': '', 'family': ''}

def get_shutdown_command(self, task_vars, distribution):
    return self.DEFAULT_SHUTDOWN_COMMAND

def perform_reboot(self, task_vars, distribution):
    shutdown_command = self.get_shutdown_command(task_vars, distribution)
    shutdown_command_args = self.get_shutdown_command_args(distribution)
    reboot_command = '{0} {1}'.format(shutdown_command, shutdown_command_args)

    display.vvv(""{action}: rebooting server..."".format(action=self._task.action))
    display.debug(""{action}: distribution: {dist}"".format(action=self._task.action, dist=distribution))
    display.debug(""{action}: rebooting server with command '{command}'"".format(action=self._task.action, command=reboot_command))
    reboot_result = self._low_level_execute_command(reboot_command, sudoable=self.DEFAULT_SUDOABLE)"
-------------------------------------------------------------------------
"result2 = self._low_level_execute_command(reboot_command, sudoable=self.DEFAULT_SUDOABLE)
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"result2 = self._low_level_execute_command(reboot_command, sudoable=self.DEFAULT_SUDOABLE)
"
-------------------------------------------------------------------------
"result2 = self._low_level_execute_command(reboot_command, sudoable=self.DEFAULT_SUDOABLE)"
-------------------------------------------------------------------------
"result['msg'] = ""Reboot command failed, error was: {stdout} {stderr}"".format(
    stdout=to_native(stdout.strip()),
    stderr=to_native(stderr.strip()))
"
-------------------------------------------------------------------------
"Recom
PRs: 49272, 49777"
-------------------------------------------------------------------------
=========================================================================
"if 'metadata' in request and request['metadata'] is not None:
"
-------------------------------------------------------------------------
"```python
if 'metadata' in request and request['metadata'] is not None:
```"
-------------------------------------------------------------------------
"if 'metadata' in request and request['metadata'] is not None:
"
-------------------------------------------------------------------------
"Recom
PRs: 46739, 49773"
-------------------------------------------------------------------------
=========================================================================
"description:
- username or UID.
- ""If set to C(null) the image provided value (or the one already
   set for the service) will be used""
"
-------------------------------------------------------------------------
"Adapted description:
- username or UID.
- ""If set to C(null) the image provided value (or the one already set for the service) will be used"""
-------------------------------------------------------------------------
"description:
- username or UID.
- ""If set to C(null) the image provided value (or the one already
   set for the service) will be used""
"
-------------------------------------------------------------------------
"Recom
PRs: 49235, 49742"
-------------------------------------------------------------------------
=========================================================================
"if self.user and self.user != os.user:
"
-------------------------------------------------------------------------
"```python
if self.user and self.user != os.user:
```"
-------------------------------------------------------------------------
"if self.user and self.user != os.user:
"
-------------------------------------------------------------------------
"Recom
PRs: 49235, 49742"
-------------------------------------------------------------------------
=========================================================================
"
- name: render a Jinja2 template onto an IOS device
ios_config:
  backup: yes
  src: ios_template.j2
"
-------------------------------------------------------------------------
"- name: render a Jinja2 template onto an IOS device
  ios_config:
    backup: yes
    src: ios_template.j2
    EXAMPLES = """"""
       - name: render a Jinja2 template onto an IOS device
         ios_config:
           backup: yes
           src: ios_template.j2
     host: ""{{ inventory_hostname }}""
   when: ansible_net_version != version
 """""""
-------------------------------------------------------------------------
"
- name: render a Jinja2 template onto an IOS device
ios_config:
  backup: yes
  src: ios_template.j2
"
-------------------------------------------------------------------------
"Recom
PRs: 49740, 49741"
-------------------------------------------------------------------------
=========================================================================
"# Perform actual request using auth cookie (Same as aci.request(), but also supports XML)
if 'port' in aci.params and aci.params['port'] is not None:
    aci.url = '%(protocol)s://%(host)s:%(port)s/' % aci.params  path.lstrip('/')
else:
    aci.url = '%(protocol)s://%(host)s/' % aci.params  path.lstrip('/')
"
-------------------------------------------------------------------------
"```python
if 'port' in aci.params and aci.params['port'] is not None:
    path += '?rsp-subtree=modified'
    aci.url = '%(protocol)s://%(host)s:%(port)s/' % aci.params
else:
    path += '?rsp-subtree=modified'
    aci.url = '%(protocol)s://%(host)s/' % aci.params
```"
-------------------------------------------------------------------------
"# Perform actual request using auth cookie (Same as aci.request(), but also supports XML)
if 'port' in aci.params and aci.params['port'] is not None:
    aci.url = '%(protocol)s://%(host)s:%(port)s/' % aci.params  path.lstrip('/')
else:
    aci.url = '%(protocol)s://%(host)s/' % aci.params  path.lstrip('/')
"
-------------------------------------------------------------------------
"Recom
PRs: 49715, 49722"
-------------------------------------------------------------------------
=========================================================================
"- Note that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions.
  In general, it will use C($HOME/docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified,
  and use C($DOCKER_CONFIG/config.json) otherwise.
"
-------------------------------------------------------------------------
"```
- Note that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions.
  In general, it will use `($HOME/docker/config.json)` if the `DOCKER_CONFIG` environment variable is not specified,
  and use `($DOCKER_CONFIG/config.json)` otherwise.
```"
-------------------------------------------------------------------------
"- Note that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions.
  In general, it will use C($HOME/docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified,
  and use C($DOCKER_CONFIG/config.json) otherwise.
"
-------------------------------------------------------------------------
"Recom
PRs: 49689, 49720"
-------------------------------------------------------------------------
=========================================================================
"- Docker API >= 1.25
"
-------------------------------------------------------------------------
"'''
Required dependency: __future__, docker.errors, ansible.module_utils.docker_common, time, json, ansible.module_utils._text
'''
from docker import APIClient

client = APIClient(base_url='unix://var/run/docker.sock', version='auto', timeout=10)

if client.version()['ApiVersion'] >= '1.25':
    print(""Docker API version is 1.25 or newer"")
else:
    print(""Docker API version is older than 1.25"")
'''"
-------------------------------------------------------------------------
"- Docker API >= 1.25
"
-------------------------------------------------------------------------
"Recom
PRs: 49691, 49709"
-------------------------------------------------------------------------
=========================================================================
"from distutils.version import LooseVersion
"
-------------------------------------------------------------------------
"```python
from distutils.version import LooseVersion
```"
-------------------------------------------------------------------------
"from distutils.version import LooseVersion
"
-------------------------------------------------------------------------
"Recom
PRs: 49691, 49709"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker_common import (
AnsibleDockerClient,
DockerBaseClass,
docker_version,

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker_common import (
    AnsibleDockerClient,
    DockerBaseClass,
    docker_version,
)
```  "
-------------------------------------------------------------------------
"from ansible.module_utils.docker_common import (
AnsibleDockerClient,
DockerBaseClass,
docker_version,

"
-------------------------------------------------------------------------
"Recom
PRs: 49691, 49709"
-------------------------------------------------------------------------
=========================================================================
"def _get_minimal_versions(self):
    # TODO: Move this and the same from docker_container.py to docker_common.py
    self.option_minimal_versions = dict()
    for option, data in self.client.module.argument_spec.items():
        self.option_minimal_versions[option] = dict()
    self.option_minimal_versions.update(dict(
        signing_ca_cert=dict(docker_api_version='1.30'),
        signing_ca_key=dict(docker_api_version='1.30'),
        ca_force_rotate=dict(docker_api_version='1.30'),
    ))

    for option, data in self.option_minimal_versions.items():
        # Test whether option is supported, and store result
        support_docker_py = True
        support_docker_api = True
        if 'docker_py_version' in data:
            support_docker_py = self.client.docker_py_version >= LooseVersion(data['docker_py_version'])
        if 'docker_api_version' in data:
            support_docker_api = self.client.docker_api_version >= LooseVersion(data['docker_api_version'])
        data['supported'] = support_docker_py and support_docker_api
        # Fail if option is not supported but used
        if not data['supported']:
            # Test whether option is specified
            if 'detect_usage' in data:
                used = data['detect_usage']()
            else:
                used = self.client.module.params.get(option) is not None
                if used and 'default' in self.client.module.argument_spec[option]:
                    used = self.client.module.params[option] != self.client.module.argument_spec[option]['default']
            if used:
                # If the option is used, compose error message.
                if 'usage_msg' in data:
                    usg = data['usage_msg']
                else:
                    usg = 'set %s option' % (option, )
                if not support_docker_api:
                    msg = 'docker API version is %s. Minimum version required is %s to %s.'
                    msg = msg % (self.client.docker_api_version_str, data['docker_api_version'], usg)
                elif not support_docker_py:
                    if LooseVersion(data['docker_py_version']) < LooseVersion('2.0.0'):
                        msg = (""docker-py version is %s. Minimum version required is %s to %s. ""
                               ""Consider switching to the 'docker' package if you do not require Python 2.6 support."")
                    elif self.client.docker_py_version < LooseVersion('2.0.0'):
                        msg = (""docker-py version is %s. Minimum version required is %s to %s. ""
                               ""You have to switch to the Python 'docker' package. First uninstall 'docker-py' before ""
                               ""installing 'docker' to avoid a broken installation."")
                    else:
                        msg = ""docker version is %s. Minimum version required is %s to %s.""
                    msg = msg % (docker_version, data['docker_py_version'], usg)
                else:
                    # should not happen
                    msg = 'Cannot %s with your configuration.' % (usg, )
                self.client.fail(msg)

"
-------------------------------------------------------------------------
"```python
def _get_minimal_versions(self):
    # Required dependency imports
    import __future__
    from docker.errors import APIError
    import ansible.module_utils.docker_common
    import time
    import json
    from ansible.module_utils._text import json_str
    
    self.option_minimal_versions = dict()
    for option, data in self.client.module.argument_spec.items():
        self.option_minimal_versions[option] = dict()

    self.option_minimal_versions.update(dict(
        signing_ca_cert=dict(docker_api_version='1.30'),
        signing_ca_key=dict(docker_api_version='1.30'),
        ca_force_rotate=dict(docker_api_version='1.30'),
    ))

    for option, data in self.option_minimal_versions.items():
        # Test whether option is supported, and store result
        support_docker_py = True
        support_docker_api = True
        if 'docker_py_version' in data:
            support_docker_py = self.client.docker_py_version >= LooseVersion(data['docker_py_version'])
        if 'docker_api_version' in data:
            support_docker_api = self.client.docker_api_version >= LooseVersion(data['docker_api_version'])
        data['supported'] = support_docker_py and support_docker_api
        # Fail if option is not supported but used
        if not data['supported']:
            # Test whether option is specified
            if 'detect_usage' in data:
                used = data['detect_usage']()
            else:
                used = self.client.module.params.get(option) is not None
                if used and 'default' in self.client.module.argument_spec[option]:
                    used = self.client.module.params[option] != self.client.module.argument_spec[option]['default']
            if used:
                # If the option is used, compose error message.
                if 'usage_msg' in data:
                    usg = data['usage_msg']
                else:
                    usg = 'set %s option' % (option, )
                if not support_docker_api:
                    msg = 'docker API version is %s. Minimum version required is %s to %s.'
                    msg = msg % (self.client.docker_api_version_str, data['docker_api_version'], usg)
                elif not support_docker_py:
                    if LooseVersion(data['docker_py_version']) < LooseVersion('2.0.0'):
                        msg = (""docker-py version is %s. Minimum version required is %s to %s. ""
                               ""Consider switching to the 'docker' package if you do not require Python 2.6 support."")
                    elif self.client.docker_py_version < LooseVersion('2.0.0'):
                        msg = (""docker-py version is %s. Minimum version required is %s to %s. ""
                               ""You have to switch to the Python 'docker' package. First uninstall 'docker-py' before ""
                               ""installing 'docker' to avoid a broken installation."")
                    else:
                        msg = ""docker version is %s. Minimum version required is %s to %s.""
                    msg = msg % (docker_version, data['docker_py_version'], usg)
                else:
                    # should not happen
                    msg = 'Cannot %s with your configuration.' % (usg, )
                self.client.fail(msg)
```"
-------------------------------------------------------------------------
"def _get_minimal_versions(self):
    # TODO: Move this and the same from docker_container.py to docker_common.py
    self.option_minimal_versions = dict()
    for option, data in self.client.module.argument_spec.items():
        self.option_minimal_versions[option] = dict()
    self.option_minimal_versions.update(dict(
        signing_ca_cert=dict(docker_api_version='1.30'),
        signing_ca_key=dict(docker_api_version='1.30'),
        ca_force_rotate=dict(docker_api_version='1.30'),
    ))

    for option, data in self.option_minimal_versions.items():
        # Test whether option is supported, and store result
        support_docker_py = True
        support_docker_api = True
        if 'docker_py_version' in data:
            support_docker_py = self.client.docker_py_version >= LooseVersion(data['docker_py_version'])
        if 'docker_api_version' in data:
            support_docker_api = self.client.docker_api_version >= LooseVersion(data['docker_api_version'])
        data['supported'] = support_docker_py and support_docker_api
        # Fail if option is not supported but used
        if not data['supported']:
            # Test whether option is specified
            if 'detect_usage' in data:
                used = data['detect_usage']()
            else:
                used = self.client.module.params.get(option) is not None
                if used and 'default' in self.client.module.argument_spec[option]:
                    used = self.client.module.params[option] != self.client.module.argument_spec[option]['default']
            if used:
                # If the option is used, compose error message.
                if 'usage_msg' in data:
                    usg = data['usage_msg']
                else:
                    usg = 'set %s option' % (option, )
                if not support_docker_api:
                    msg = 'docker API version is %s. Minimum version required is %s to %s.'
                    msg = msg % (self.client.docker_api_version_str, data['docker_api_version'], usg)
                elif not support_docker_py:
                    if LooseVersion(data['docker_py_version']) < LooseVersion('2.0.0'):
                        msg = (""docker-py version is %s. Minimum version required is %s to %s. ""
                               ""Consider switching to the 'docker' package if you do not require Python 2.6 support."")
                    elif self.client.docker_py_version < LooseVersion('2.0.0'):
                        msg = (""docker-py version is %s. Minimum version required is %s to %s. ""
                               ""You have to switch to the Python 'docker' package. First uninstall 'docker-py' before ""
                               ""installing 'docker' to avoid a broken installation."")
                    else:
                        msg = ""docker version is %s. Minimum version required is %s to %s.""
                    msg = msg % (docker_version, data['docker_py_version'], usg)
                else:
                    # should not happen
                    msg = 'Cannot %s with your configuration.' % (usg, )
                self.client.fail(msg)

"
-------------------------------------------------------------------------
"Recom
PRs: 49691, 49709"
-------------------------------------------------------------------------
=========================================================================
"self._get_minimal_versions()

"
-------------------------------------------------------------------------
self._get_minimal_versions()
-------------------------------------------------------------------------
"self._get_minimal_versions()

"
-------------------------------------------------------------------------
"Recom
PRs: 49691, 49709"
-------------------------------------------------------------------------
=========================================================================
"min_docker_api_version='1.25',
"
-------------------------------------------------------------------------
"```python
def main():
     supports_check_mode=True,
     min_docker_api_version='1.25',
 )
 
 results = dict(
```"
-------------------------------------------------------------------------
"min_docker_api_version='1.25',
"
-------------------------------------------------------------------------
"Recom
PRs: 49691, 49709"
-------------------------------------------------------------------------
=========================================================================
"- As per 01 Dec 2018, Bitbucket has dropped support for TLSv1 and TLSv1.1 connections. As such,
  if the underlying system still uses a Python version below 2.7.9, you will have issues checking out
  bitbucket repositories. See U(https://bitbucket.org/blog/deprecating-tlsv1-tlsv1-1-2018-12-01).
"
-------------------------------------------------------------------------
"'''
NOTES = """"""
As per 01 Dec 2018, Bitbucket has dropped support for TLSv1 and TLSv1.1 connections. As such,
if the underlying system still uses a Python version below 2.7.9, you will have issues checking out
bitbucket repositories. See https://bitbucket.org/blog/deprecating-tlsv1-tlsv1-1-2018-12-01.
SSH will prompt user to authorize the first contact with a remote host. To avoid this prompt,
one solution is to add the remote host public key in /etc/ssh/ssh_known_hosts before calling
the hg module, with the following command: ssh-keyscan remote_host.com >> /etc/ssh/ssh_known_hosts.""
""""""

EXAMPLES = '''
Required dependency: os, __future__, ansible.module_utils._text, ansible.module_utils.basic,
Original metadata: [stable-2.5] Backport a6db7f7abd0e56 ; hg/mercurial test fixes for bitbucket
--##### SUMMARY
Backport of a6db7f7abd0e56cf6be616e3558aadd183dab14f / #49433

##### ISSUE TYPE
- Bugfix Pull Request

##### COMPONENT NAME
hg, tests
backport, module, community_review, support:community, affects_2.5, bug, small_patch

Functional set for the hunk:
Compilation set for the hunk:
Library information from Stable:
Function name information from Stable:
Function call information from Stable:
Class name information from Stable:
Class method call information from Stable:
Target file: some, __metaclass__, authorize, run_command, extensions, debug, for, user, elif, supplied, nate, R, str, home, hgrc, states, If, normal, working, class, get_remote_revision, can, github, GNU, bin, sign, ansible, t, now, Prior, parameter, See, destination, should, main, there, at_revision, verify, status, repositories, find, where, after, gnu, None, There, get_bin_path, cloned, solution, slow, doing, issues, site, default, Absolute, origin, will, down, any, potentially, __main__, Public, omitted, True, not, keyscan, information, via, prompt, exists, rc2, len, argument_spec, git, with, import, modification, Deletes, executable, https, specified, update, property, purged, Yeukhon, revision, Supports, discard, COPYING, module_utils, local, False, hg, host, License, is, Mercurial, psu, The, has_local_mods, Hg, bool, startswith, cleaned, more, number, found, retrieve, task, the, to, version_added, been, unless, U, module, file, contact, checkout...'''
```"
-------------------------------------------------------------------------
"- As per 01 Dec 2018, Bitbucket has dropped support for TLSv1 and TLSv1.1 connections. As such,
  if the underlying system still uses a Python version below 2.7.9, you will have issues checking out
  bitbucket repositories. See U(https://bitbucket.org/blog/deprecating-tlsv1-tlsv1-1-2018-12-01).
"
-------------------------------------------------------------------------
"Recom
PRs: 49433, 49441"
-------------------------------------------------------------------------
=========================================================================
"- As per 01 Dec 2018, Bitbucket has dropped support for TLSv1 and TLSv1.1 connections. As such,
  if the underlying system still uses a Python version below 2.7.9, you will have issues checking out
  bitbucket repositories. See U(https://bitbucket.org/blog/deprecating-tlsv1-tlsv1-1-2018-12-01).
"
-------------------------------------------------------------------------
"'''
```python
notes:
       SSH will prompt user to authorize the first contact with a remote host.  To avoid this prompt,
       one solution is to add the remote host public key in C(/etc/ssh/ssh_known_hosts) before calling
       the hg module, with the following command: ssh-keyscan remote_host.com >> /etc/ssh/ssh_known_hosts.
       
As per 01 Dec 2018, Bitbucket has dropped support for TLSv1 and TLSv1.1 connections. As such,
if the underlying system still uses a Python version below 2.7.9, you will have issues checking out
bitbucket repositories. See U(https://bitbucket.org/blog/deprecating-tlsv1-tlsv1-1-2018-12-01).
```
```python

EXAMPLES = '''
Required dependency: os, __future__, ansible.module_utils._text, ansible.module_utils.basic, 
Original metadata: [stable-2.6] Backport a6db7f7abd0e56 ; hg/mercurial test fixes for bitbucket
--##### SUMMARY
Backport of a6db7f7abd0e56cf6be616e3558aadd183dab14f / #49433

##### ISSUE TYPE
- Bugfix Pull Request

##### COMPONENT NAME
hg, tests
'''
```"
-------------------------------------------------------------------------
"- As per 01 Dec 2018, Bitbucket has dropped support for TLSv1 and TLSv1.1 connections. As such,
  if the underlying system still uses a Python version below 2.7.9, you will have issues checking out
  bitbucket repositories. See U(https://bitbucket.org/blog/deprecating-tlsv1-tlsv1-1-2018-12-01).
"
-------------------------------------------------------------------------
"Recom
PRs: 49433, 49440"
-------------------------------------------------------------------------
=========================================================================
"- As per 01 Dec 2018, Bitbucket has dropped support for TLSv1 and TLSv1.1 connections. As such,
  if the underlying system still uses a Python version below 2.7.9, you will have issues checking out
  bitbucket repositories. See U(https://bitbucket.org/blog/deprecating-tlsv1-tlsv1-1-2018-12-01).
"
-------------------------------------------------------------------------
"```python
'''
If the underlying system uses a Python version below 2.7.9, the issue of checking out Bitbucket repositories may arise
due to Bitbucket dropping support for TLSv1 and TLSv1.1 connections as of 01 Dec 2018. For more information, refer to: 
https://bitbucket.org/blog/deprecating-tlsv1-tlsv1-1-2018-12-01
'''
```"
-------------------------------------------------------------------------
"- As per 01 Dec 2018, Bitbucket has dropped support for TLSv1 and TLSv1.1 connections. As such,
  if the underlying system still uses a Python version below 2.7.9, you will have issues checking out
  bitbucket repositories. See U(https://bitbucket.org/blog/deprecating-tlsv1-tlsv1-1-2018-12-01).
"
-------------------------------------------------------------------------
"Recom
PRs: 49433, 49439"
-------------------------------------------------------------------------
=========================================================================
"if len(split_fields) == 2 and split_fields[0:2] == ['iam', 'info_instanceprofilearn']:
    new_fields[self._prefix % ""iam-instance-profile-role""] = value.split('/')[1]
"
-------------------------------------------------------------------------
"```python
if len(split_fields) == 2 and split_fields[0:2] == ['iam', 'info_instanceprofilearn']:
    new_fields[self._prefix % ""iam-instance-profile-role""] = value.split('/')[1]
```"
-------------------------------------------------------------------------
"# Parse out the IAM role name (which is _not_ the same as the instance profile name)
if len(split_fields) == 3 and split_fields[0:2] == ['iam', 'security-credentials'] and ':' not in split_fields[2]:
    new_fields[self._prefix % ""iam-instance-profile-role""] = split_fields[2]
"
-------------------------------------------------------------------------
"Recom
PRs: 45534, 49428"
-------------------------------------------------------------------------
=========================================================================
"if len(split_fields) == 2 and split_fields[0:2] == ['iam', 'info_instanceprofilearn']:
    new_fields[self._prefix % ""iam-instance-profile-role""] = value.split('/')[1]
"
-------------------------------------------------------------------------
"if len(split_fields) == 2 and split_fields[0:2] == ['iam', 'info_instanceprofilearn']:
    new_fields[self._prefix % ""iam-instance-profile-role""] = value.split('/')[1]"
-------------------------------------------------------------------------
"# Parse out the IAM role name (which is _not_ the same as the instance profile name)
if len(split_fields) == 3 and split_fields[0:2] == ['iam', 'security-credentials'] and ':' not in split_fields[2]:
    new_fields[self._prefix % ""iam-instance-profile-role""] = split_fields[2]
"
-------------------------------------------------------------------------
"Recom
PRs: 45534, 49427"
-------------------------------------------------------------------------
=========================================================================
"msg = getattr(e, 'message', None) or to_native(e)
"
-------------------------------------------------------------------------
"```python
msg = getattr(e, 'message', None) or ansible.compat.to_native(e)
```"
-------------------------------------------------------------------------
"msg = getattr(e, 'message', None) or to_native(e)
"
-------------------------------------------------------------------------
"Recom
PRs: 48792, 49374"
-------------------------------------------------------------------------
=========================================================================
"str_with_error=""{{ 'str' | from_json }}"",
"
-------------------------------------------------------------------------
"```python
from ansible.template import Templar
from ansible.errors import AnsibleError

str_with_error = ""{{ 'str' | from_json }}""
templar = Templar()
try:
    templar.template(str_with_error)
except AnsibleError as e:
    print(""Error:"", e)
```"
-------------------------------------------------------------------------
"str_with_error=""{{ 'str' | from_json }}"",
"
-------------------------------------------------------------------------
"Recom
PRs: 48792, 49374"
-------------------------------------------------------------------------
=========================================================================
"def test_template_with_error(self):
    """"""Check that AnsibleError is raised, fail if an unhandled exception is raised""""""
    self.assertRaises(AnsibleError, self.templar.template, ""{{ str_with_error }}"")

"
-------------------------------------------------------------------------
"```python
def test_template_with_error(self):
    """"""Check that AnsibleError is raised, fail if an unhandled exception is raised""""""
    self.assertRaises(AnsibleError, self.templar.template, ""{{ str_with_error }}"")
```"
-------------------------------------------------------------------------
"def test_template_with_error(self):
    """"""Check that AnsibleError is raised, fail if an unhandled exception is raised""""""
    self.assertRaises(AnsibleError, self.templar.template, ""{{ str_with_error }}"")

"
-------------------------------------------------------------------------
"Recom
PRs: 48792, 49374"
-------------------------------------------------------------------------
=========================================================================
"expire=dict(type='int', required=False),
"
-------------------------------------------------------------------------
"```python
def main():
    argument_spec=dict(
        check=dict(required=False),
        creator=dict(required=False),
        expire=dict(type='int', required=False),
        expire_on_resolve=dict(type='bool', required=False),
        reason=dict(required=False),
        state=dict(default='present', choices=['present', 'absent']),
    )
```"
-------------------------------------------------------------------------
"expire=dict(type='int', required=False),
"
-------------------------------------------------------------------------
"Recom
PRs: 33239, 49367"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.six import PY3
"
-------------------------------------------------------------------------
"from ansible.module_utils.six import PY3, text_type"
-------------------------------------------------------------------------
"from ansible.module_utils.six import PY3
"
-------------------------------------------------------------------------
"Recom
PRs: 49197, 49222"
-------------------------------------------------------------------------
=========================================================================
"if PY3:
    smtp = smtplib.SMTP_SSL(host=host, port=port, timeout=timeout)
else:
    smtp = smtplib.SMTP_SSL(timeout=timeout)
"
-------------------------------------------------------------------------
"```python
if PY3:
    smtp = smtplib.SMTP_SSL(host=host, port=port, timeout=timeout)
else:
    smtp = smtplib.SMTP_SSL(timeout=timeout)
```"
-------------------------------------------------------------------------
"if PY3:
    smtp = smtplib.SMTP_SSL(host=host, port=port, timeout=timeout)
else:
    smtp = smtplib.SMTP_SSL(timeout=timeout)
"
-------------------------------------------------------------------------
"Recom
PRs: 49197, 49222"
-------------------------------------------------------------------------
=========================================================================
"if PY3:
    smtp = smtplib.SMTP(host=host, port=port, timeout=timeout)
else:
    smtp = smtplib.SMTP(timeout=timeout)
"
-------------------------------------------------------------------------
"```python
if PY3:
    smtp = smtplib.SMTP(host=host, port=port, timeout=timeout)
else:
    smtp = smtplib.SMTP(timeout=timeout)
```"
-------------------------------------------------------------------------
"if PY3:
    smtp = smtplib.SMTP(host=host, port=port, timeout=timeout)
else:
    smtp = smtplib.SMTP(timeout=timeout)
"
-------------------------------------------------------------------------
"Recom
PRs: 49197, 49222"
-------------------------------------------------------------------------
=========================================================================
"html_theme_options = {
'canonical_url': ""https://docs.ansible.com/ansible/latest/"",


"
-------------------------------------------------------------------------
"html_theme_options = {'canonical_url': ""https://docs.ansible.com/ansible/latest/""}"
-------------------------------------------------------------------------
"html_theme_options = {
'canonical_url': ""https://docs.ansible.com/ansible/latest/"",


"
-------------------------------------------------------------------------
"Recom
PRs: 49190, 49214"
-------------------------------------------------------------------------
=========================================================================
"html_theme_options = {
'canonical_url': ""https://docs.ansible.com/ansible/latest/"",


"
-------------------------------------------------------------------------
"html_theme_options = {
    'canonical_url': ""https://docs.ansible.com/ansible/latest/"",
}"
-------------------------------------------------------------------------
"html_theme_options = {
'canonical_url': ""https://docs.ansible.com/ansible/latest/"",


"
-------------------------------------------------------------------------
"Recom
PRs: 49190, 49213"
-------------------------------------------------------------------------
=========================================================================
"- When connecting to Docker daemon with TLS, you might need to install additional Python packages.
  For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(pip).
"
-------------------------------------------------------------------------
"When connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(pip)."
-------------------------------------------------------------------------
"U(https://docker-py.readthedocs.io/en/stable/machine/) for more details.
When connecting to Docker daemon with TLS, you might need to install additional Python packages.
For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(pip).
"
-------------------------------------------------------------------------
"Recom
PRs: 49095, 49153"
-------------------------------------------------------------------------
=========================================================================
"minimal_version = self.parameters.client.option_minimal_versions.get(key, {})
if not minimal_version.get('supported', True):
    continue
"
-------------------------------------------------------------------------
"```python
minimal_version = self.parameters.client.option_minimal_versions.get(key, {})
if not minimal_version.get('supported', True):
    continue
```"
-------------------------------------------------------------------------
"minimal_version = self.parameters.client.option_minimal_versions.get(key, {})
if not minimal_version.get('supported', True):
    continue
"
-------------------------------------------------------------------------
"Recom
PRs: 49078, 49152"
-------------------------------------------------------------------------
=========================================================================
"self.log(differences.get_legacy_docker_container_diffs(), pretty_print=True)
"
-------------------------------------------------------------------------
"```python
self.log(differences.get_legacy_docker_container_diffs(), pretty_print=True)
```"
-------------------------------------------------------------------------
"if network.get('ipv4_address') is not None or network.get('ipv6_address') is not None:
"
-------------------------------------------------------------------------
"Recom
PRs: 49078, 49152"
-------------------------------------------------------------------------
=========================================================================
"#     value: ""{{ sample_com_challenge.challenge_data['sample.com']['dns-01'].resource_value | regex_replace('^(.*)$', '\""\\1\""') }}""
"
-------------------------------------------------------------------------
"```python
value: ""{{ sample_com_challenge.challenge_data['sample.com']['dns-01'].resource_value | regex_replace('^(.*)$', '\""\\1\""') }}""
```"
-------------------------------------------------------------------------
"#     state: present
#     value: ""{{ sample_com_challenge.challenge_data['sample.com']['dns-01'].resource_value | regex_replace('^(.*)$', '\""\\1\""') }}""
"
-------------------------------------------------------------------------
"Recom
PRs: 49031, 49082"
-------------------------------------------------------------------------
=========================================================================
"#     value: ""{{ item.value | map('regex_replace', '^(.*)$', '\""\\1\""' ) | list }}""
"
-------------------------------------------------------------------------
"```python
 #     value: ""{{ item.value | map('regex_replace', '^(.*)$', '\""\\1\""' ) | list }}""
```"
-------------------------------------------------------------------------
"#     state: present
#     value: ""{{ item.value | map('regex_replace', '^(.*)$', '\""\\1\""' ) | list }}""
"
-------------------------------------------------------------------------
"Recom
PRs: 49031, 49082"
-------------------------------------------------------------------------
=========================================================================
"type: list
suboptions:
  path:
    type: str
    required: true
    description:
    - Device path in the container.
  rate:
    type: str
    required: true
    description:
    - ""Device read limit. Format: <number>[<unit>]""
    - ""Number is a positive integer. Unit can be one of C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
      C(T) (tebibyte), or C(P) (pebibyte)""
    - ""Omitting the unit defaults to bytes.""
type: list
suboptions:
  path:
    type: str
    required: true
    description:
    - Device path in the container.
  rate:
    type: str
    required: true
    description:
    - ""Device read limit. Format: <number>[<unit>]""
    - ""Number is a positive integer. Unit can be one of C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
      C(T) (tebibyte), or C(P) (pebibyte)""
    - ""Omitting the unit defaults to bytes.""
type: list
suboptions:
  path:
    type: str
    required: true
    description:
    - Device path in the container.
  rate:
    type: int
    required: true
    description:
    - ""Device read limit.""
    - ""Must be a positive integer.""
type: list
suboptions:
  path:
    type: str
    required: true
    description:
    - Device path in the container.
  rate:
    type: int
    required: true
    description:
    - ""Device read limit.""
    - ""Must be a positive integer.""
"
-------------------------------------------------------------------------
"```yaml
type: list
suboptions:
  path:
    type: str
    required: true
    description:
      - Device path in the container.
  rate:
    type: str
    required: true
    description:
      - ""Device read limit. Format: <number>[<unit>]""
      - ""Number is a positive integer. Unit can be one of C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
        C(T) (tebibyte), or C(P) (pebibyte)""
      - ""Omitting the unit defaults to bytes.""
---
type: list
suboptions:
  path:
    type: str
    required: true
    description:
      - Device path in the container.
  rate:
    type: str
    required: true
    description:
      - ""Device read limit. Format: <number>[<unit>]""
      - ""Number is a positive integer. Unit can be one of C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
        C(T) (tebibyte), or C(P) (pebibyte)""
      - ""Omitting the unit defaults to bytes.""
---
type: list
suboptions:
  path:
    type: str
    required: true
    description:
      - Device path in the container.
  rate:
    type: int
    required: true
    description:
      - ""Device read limit.""
      - ""Must be a positive integer.""
---
type: list
suboptions:
  path:
    type: str
    required: true
    description:
      - Device path in the container.
  rate:
    type: int
    required: true
    description:
      - ""Device read limit.""
      - ""Must be a positive integer.""
```"
-------------------------------------------------------------------------
"security_opts=dict(type='list', elements='str'),
tmpfs=dict(type='list', elements='str'),
ulimits=dict(type='list', elements='str'),
volumes=dict(type='list', elements='str'),
volumes_from=dict(type='list', elements='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"- 'I(interval), I(timeout) and I(start_period) are specified as durations. They accept duration as a string in a format
boptions:
test:
  description:
    - Command to run to check health.
    - Must be either a string or a list. If it is a list, the first item must be one of C(NONE), C(CMD) or C(CMD-SHELL).
interval:
  description:
    - 'Time between running the check. (default: 30s)'
  type: str
timeout:
  description:
    - 'Maximum time to allow one check to run. (default: 30s)'
  type: str
retries:
  description:
    - 'Consecutive failures needed to report unhealthy. It accept integer value. (default: 3)'
  type: int
start_period:
  description:
    - 'Start period for the container to initialize before starting health-retries countdown. (default: 0s)'
  type: str
"
-------------------------------------------------------------------------
"options:
       - 'Configure a check that is run to determine whether or not containers for this service are ""healthy"".
         See the docs for the HEALTHCHECK Dockerfile instruction, https://docs.docker.com/engine/reference/builder/#healthcheck
         for details on how healthchecks work.'
         that look like: C(5h34m56s), C(1m30s) etc. The supported units are C(us), C(ms), C(s), C(m) and C(h)'
   hostname:
     description:
       - Container hostname.
   test:
     description:
       - Command to run to check health.
       - Must be either a string or a list. If it is a list, the first item must be one of C(NONE), C(CMD) or C(CMD-SHELL).
   interval:
     description:
       - 'Time between running the check. (default: 30s)'
     type: str
   timeout:
     description:
       - 'Maximum time to allow one check to run. (default: 30s)'
     type: str
   retries:
     description:
       - 'Consecutive failures needed to report unhealthy. It accept integer value. (default: 3)'
     type: int
   start_period:
     description:
       - 'Start period for the container to initialize before starting health-retries countdown. (default: 0s)'
     type: str"
-------------------------------------------------------------------------
"container_limits=dict(type='dict', options=dict(
    memory=dict(type='int'),
    memswap=dict(type='int'),
    cpushares=dict(type='int'),
    cpusetcpus=dict(type='str'),
)),
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"type: list
suboptions:
   name:
      type: str
      required: true
      description:
        - The network's name.
   ipv4_address:
      type: str
      description:
        - The container's IPv4 address in this network.
   ipv6_address:
      type: str
      description:
        - The container's IPv6 address in this network.
   links:
      type: list
      description:
        - A list of containers to link to.
   aliases:
      type: list
      description:
        - List of aliases for this container in this network. These names
          can be used in the network to reach this container.
"
-------------------------------------------------------------------------
"```yaml
type: list
suboptions:
   name:
      type: str
      required: true
      description:
        - The network's name.
   ipv4_address:
      type: str
      description:
        - The container's IPv4 address in this network.
   ipv6_address:
      type: str
      description:
        - The container's IPv6 address in this network.
   links:
      type: list
      description:
        - A list of containers to link to.
   aliases:
      type: list
      description:
        - List of aliases for this container in this network. These names
          can be used in the network to reach this container.
```"
-------------------------------------------------------------------------
"name=dict(type='list', elements='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"if self.healthcheck.get(value) is None:
    # due to recursive argument_spec, all keys are always present
    # (but have default value None if not specified)
    continue
"
-------------------------------------------------------------------------
"```python
if self.healthcheck.get(value) is None:
    continue
```"
-------------------------------------------------------------------------
"connected=dict(type='list', default=[], aliases=['containers'], elements='str'),
ipam_driver=dict(type='str'),
ipam_options=dict(type='dict', default={}, options=dict(
    subnet=dict(type='str'),
    iprange=dict(type='str'),
    gateway=dict(type='str'),
    aux_addresses=dict(type='dict'),
)),
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"device_dict['Rate'] = human_to_bytes(device_dict['Rate'])
"
-------------------------------------------------------------------------
"```python
import humanfriendly

device_dict['Rate'] = humanfriendly.parse_size(device_dict['Rate'])
```"
-------------------------------------------------------------------------
"files=dict(type='list', elements='path'),
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"device_dict = dict((x.title(), y) for x, y in v.items())
devices_list.append(device_dict)
"
-------------------------------------------------------------------------
"```python
devices_list.append(dict((x.title(), y) for x, y in v.items()))
```"
-------------------------------------------------------------------------
"services=dict(type='list', elements='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"if network.get('aliases'):
    if not compare_generic(network['aliases'], connected_networks[network['name']].get('Aliases'), 'allow_more_present', 'set'):
        diff = True
if network.get('links'):
    if not compare_generic(expected_links, connected_networks[network['name']].get('Links'), 'allow_more_present', 'set'):
        diff = True
"
-------------------------------------------------------------------------
"```python
if network.get('aliases'):
    if not compare_generic(network['aliases'], connected_networks[network['name']].get('Aliases'), 'allow_more_present', 'set'):
        diff = True
if network.get('links'):
    if not compare_generic(expected_links, connected_networks[network['name']].get('Links'), 'allow_more_present', 'set'):
        diff = True
```"
-------------------------------------------------------------------------
"remote_addrs=dict(type='list', elements='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 48491, 48895"
-------------------------------------------------------------------------
=========================================================================
"description: UUID of the template or extracted object.
description: Name of the template or extracted object.
returned: if available
returned: if available
description: Status of the template or extracted object.
returned: if available
returned: if available
returned: if available
returned: if available
returned: if available
description: Type of the OS.
returned: if available
returned: if available
returned: if available
returned: if available
returned: if available
"
-------------------------------------------------------------------------
"description: UUID of the template or extracted object.
description: Name of the template or extracted object.
returned: success
returned: success
description: Status of the template or extracted object.
returned: success
returned: success
returned: success
returned: success
returned: success
description: Type of the OS.
returned: success
returned: success
returned: success
returned: success
returned: success"
-------------------------------------------------------------------------
"description: UUID of the template or extracted object.
description: Name of the template or extracted object.
returned: if available
returned: if available
description: Status of the template or extracted object.
returned: if available
returned: if available
returned: if available
returned: if available
returned: if available
description: Type of the OS.
returned: if available
returned: if available
returned: if available
returned: if available
returned: if available
"
-------------------------------------------------------------------------
"Recom
PRs: 48675, 48742"
-------------------------------------------------------------------------
=========================================================================
"returned: if available
returned: if available
returned: on state=extracted
returned: on state=extracted
returned: on state=extracted
returned: if available
"
-------------------------------------------------------------------------
"```python
returned: on state=extracted
returned: on state=extracted
returned: on state=extracted
returned: on state=extracted
returned: on state=extracted
returned: on state=extracted
```"
-------------------------------------------------------------------------
"returned: if available
returned: if available
returned: on state=extracted
returned: on state=extracted
returned: on state=extracted
returned: if available
"
-------------------------------------------------------------------------
"Recom
PRs: 48675, 48742"
-------------------------------------------------------------------------
=========================================================================
"if 'isextractable' in template:
    self.result['is_extractable'] = True if template['isextractable'] else False
if 'isfeatured' in template:
    self.result['is_featured'] = True if template['isfeatured'] else False
if 'ispublic' in template:
    self.result['is_public'] = True if template['ispublic'] else False
"
-------------------------------------------------------------------------
"```python
if 'isextractable' in template:
    self.result['is_extractable'] = True if template['isextractable'] else False
if 'isfeatured' in template:
    self.result['is_featured'] = True if template['isfeatured'] else False
if 'ispublic' in template:
    self.result['is_public'] = True if template['ispublic'] else False
```"
-------------------------------------------------------------------------
"if 'isextractable' in template:
    self.result['is_extractable'] = True if template['isextractable'] else False
if 'isfeatured' in template:
    self.result['is_featured'] = True if template['isfeatured'] else False
if 'ispublic' in template:
    self.result['is_public'] = True if template['ispublic'] else False
"
-------------------------------------------------------------------------
"Recom
PRs: 48675, 48742"
-------------------------------------------------------------------------
=========================================================================
"init=host_config.get('Init'),
"
-------------------------------------------------------------------------
"init=host_config.get('Init'),"
-------------------------------------------------------------------------
"init=host_config.get('Init'),
"
-------------------------------------------------------------------------
"Recom
PRs: 48551, 48621"
-------------------------------------------------------------------------
=========================================================================
"shm_size=host_config.get('ShmSize'),
"
-------------------------------------------------------------------------
"```python
shm_size = host_config.get(""ShmSize"")
```"
-------------------------------------------------------------------------
"shm_size=host_config.get('ShmSize'),
"
-------------------------------------------------------------------------
"Recom
PRs: 48551, 48621"
-------------------------------------------------------------------------
=========================================================================
"count = 0
while True:
    try:
        response = self.client.remove_container(container_id, v=volume_state, link=link, force=force)
    except NotFound as exc:
    except APIError as exc:
        if 'Unpause the container before stopping or killing' in exc.explanation:
            # New docker versions do not allow containers to be removed if they are paused
            # Make sure we don't end up in an infinite loop
            if count == 3:
                self.fail(""Error removing container %s (tried to unpause three times): %s"" % (container_id, str(exc)))
            count = 1
            # Unpause
            try:
                self.client.unpause(container=container_id)
            except Exception as exc2:
                self.fail(""Error unpausing container %s for removal: %s"" % (container_id, str(exc2)))
            # Now try again
            continue
        if 'removal of container ' in exc.explanation and ' is already in progress' in exc.explanation:
            pass
        else:
            self.fail(""Error removing container %s: %s"" % (container_id, str(exc)))
    except Exception as exc:
    # We only loop when explicitly requested by 'continue'
    break
"
-------------------------------------------------------------------------
"```python
count = 0
while True:
    try:
        response = self.client.remove_container(container_id, v=volume_state, link=link, force=force)
    except NotFound as exc:
        pass
    except APIError as exc:
        if 'Unpause the container before stopping or killing' in exc.explanation:
            # New docker versions do not allow containers to be removed if they are paused
            # Make sure we don't end up in an infinite loop
            if count == 3:
                self.fail(""Error removing container %s (tried to unpause three times): %s"" % (container_id, str(exc)))
            count += 1
            # Unpause
            try:
                self.client.unpause(container=container_id)
            except Exception as exc2:
                self.fail(""Error unpausing container %s for removal: %s"" % (container_id, str(exc2)))
            # Now try again
            continue
        if 'removal of container ' in exc.explanation and ' is already in progress' in exc.explanation:
            pass
        else:
            self.fail(""Error removing container %s: %s"" % (container_id, str(exc)))
    except Exception as exc:
        # We only loop when explicitly requested by 'continue'
        break
```"
-------------------------------------------------------------------------
"count = 0
while True:
    try:
        response = self.client.remove_container(container_id, v=volume_state, link=link, force=force)
    except NotFound as exc:
    except APIError as exc:
        if 'Unpause the container before stopping or killing' in exc.explanation:
            # New docker versions do not allow containers to be removed if they are paused
            # Make sure we don't end up in an infinite loop
            if count == 3:
                self.fail(""Error removing container %s (tried to unpause three times): %s"" % (container_id, str(exc)))
            count = 1
            # Unpause
            try:
                self.client.unpause(container=container_id)
            except Exception as exc2:
                self.fail(""Error unpausing container %s for removal: %s"" % (container_id, str(exc2)))
            # Now try again
            continue
        if 'removal of container ' in exc.explanation and ' is already in progress' in exc.explanation:
            pass
        else:
            self.fail(""Error removing container %s: %s"" % (container_id, str(exc)))
    except Exception as exc:
    # We only loop when explicitly requested by 'continue'
    break
"
-------------------------------------------------------------------------
"Recom
PRs: 48590, 48593"
-------------------------------------------------------------------------
=========================================================================
"count = 0
while True:
    try:
        if self.parameters.stop_timeout:
            response = self.client.stop(container_id, timeout=self.parameters.stop_timeout)
        else:
            response = self.client.stop(container_id)
    except APIError as exc:
        if 'Unpause the container before stopping or killing' in exc.explanation:
            # New docker versions do not allow containers to be removed if they are paused
            # Make sure we don't end up in an infinite loop
            if count == 3:
                self.fail(""Error removing container %s (tried to unpause three times): %s"" % (container_id, str(exc)))
            count = 1
            # Unpause
            try:
                self.client.unpause(container=container_id)
            except Exception as exc2:
                self.fail(""Error unpausing container %s for removal: %s"" % (container_id, str(exc2)))
            # Now try again
            continue
        self.fail(""Error stopping container %s: %s"" % (container_id, str(exc)))
    except Exception as exc:
        self.fail(""Error stopping container %s: %s"" % (container_id, str(exc)))
    # We only loop when explicitly requested by 'continue'
    break
"
-------------------------------------------------------------------------
"```python
count = 0
while True:
    try:
        if self.parameters.stop_timeout:
            response = self.client.stop(container_id, timeout=self.parameters.stop_timeout)
        else:
            response = self.client.stop(container_id)
    except APIError as exc:
        if 'Unpause the container before stopping or killing' in exc.explanation:
            # New docker versions do not allow containers to be removed if they are paused
            # Make sure we don't end up in an infinite loop
            if count == 3:
                self.fail(""Error removing container %s (tried to unpause three times): %s"" % (container_id, str(exc)))
            count = 1
            # Unpause
            try:
                self.client.unpause(container=container_id)
            except Exception as exc2:
                self.fail(""Error unpausing container %s for removal: %s"" % (container_id, str(exc2)))
            # Now try again
            continue
        self.fail(""Error stopping container %s: %s"" % (container_id, str(exc)))
    except Exception as exc:
        self.fail(""Error stopping container %s: %s"" % (container_id, str(exc)))
    # We only loop when explicitly requested by 'continue'
    break
```"
-------------------------------------------------------------------------
"count = 0
while True:
    try:
        if self.parameters.stop_timeout:
            response = self.client.stop(container_id, timeout=self.parameters.stop_timeout)
        else:
            response = self.client.stop(container_id)
    except APIError as exc:
        if 'Unpause the container before stopping or killing' in exc.explanation:
            # New docker versions do not allow containers to be removed if they are paused
            # Make sure we don't end up in an infinite loop
            if count == 3:
                self.fail(""Error removing container %s (tried to unpause three times): %s"" % (container_id, str(exc)))
            count = 1
            # Unpause
            try:
                self.client.unpause(container=container_id)
            except Exception as exc2:
                self.fail(""Error unpausing container %s for removal: %s"" % (container_id, str(exc2)))
            # Now try again
            continue
        self.fail(""Error stopping container %s: %s"" % (container_id, str(exc)))
    except Exception as exc:
        self.fail(""Error stopping container %s: %s"" % (container_id, str(exc)))
    # We only loop when explicitly requested by 'continue'
    break
"
-------------------------------------------------------------------------
"Recom
PRs: 48590, 48593"
-------------------------------------------------------------------------
=========================================================================
"- Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to
  avoid certificate validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable.
"
-------------------------------------------------------------------------
"- Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to
  avoid certificate validation errors. Can also be specified via `K8S_AUTH_SSL_CA_CERT` environment variable."
-------------------------------------------------------------------------
"- Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to
  avoid certificate validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable.
"
-------------------------------------------------------------------------
"Recom
PRs: 48474, 48586"
-------------------------------------------------------------------------
=========================================================================
"- ""To avoid SSL certificate validation errors when C(verify_ssl) is I(True), the full
  certificate chain for the API server must be provided via C(ssl_ca_cert) or in the
  kubeconfig file.""
"
-------------------------------------------------------------------------
"""To avoid SSL certificate validation errors when `verify_ssl` is set to `True`, the full certificate chain for the API server must be provided via `ssl_ca_cert` or in the kubeconfig file."""
-------------------------------------------------------------------------
"- ""To avoid SSL certificate validation errors when C(verify_ssl) is I(True), the full
  certificate chain for the API server must be provided via C(ssl_ca_cert) or in the
  kubeconfig file.""
"
-------------------------------------------------------------------------
"Recom
PRs: 48474, 48586"
-------------------------------------------------------------------------
=========================================================================
"payload = {""TargetSettingsURI"": set_bios_attr_uri}
"
-------------------------------------------------------------------------
"payload = {""TargetSettingsURI"": set_bios_attr_uri}"
-------------------------------------------------------------------------
"payload = {""TargetSettingsURI"": set_bios_attr_uri}
"
-------------------------------------------------------------------------
"Recom
PRs: 48317, 48582"
-------------------------------------------------------------------------
=========================================================================
"# Currently not passing job_id back to user but patch is coming
return {'ret': True, 'msg': ""Config job %s created"" % job_id}
"
-------------------------------------------------------------------------
"```python
return {'ret': True, 'msg': ""Config job %s created"" % job_id}
```"
-------------------------------------------------------------------------
"# Currently not passing job_id back to user but patch is coming
return {'ret': True, 'msg': ""Config job %s created"" % job_id}
"
-------------------------------------------------------------------------
"Recom
PRs: 48317, 48582"
-------------------------------------------------------------------------
=========================================================================
"type: dict
"
-------------------------------------------------------------------------
"```yaml
options:
  description:
    - Name of the volume to operate on.
  required: true
  aliases:
    - volume_name
type: dict
```"
-------------------------------------------------------------------------
"type: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 48536, 48560"
-------------------------------------------------------------------------
=========================================================================
"type: str
type: dict
  - Dictionary of label key/values to set for the volume
type: dict
"
-------------------------------------------------------------------------
"```
type: dict
  description:
    - Dictionary of label key/values to set for the volume
```"
-------------------------------------------------------------------------
"type: str
type: dict
  - Dictionary of label key/values to set for the volume
type: dict
"
-------------------------------------------------------------------------
"Recom
PRs: 48536, 48560"
-------------------------------------------------------------------------
=========================================================================
"for label in self.parameters.labels:
"
-------------------------------------------------------------------------
"```python
for label in self.parameters.labels:
```"
-------------------------------------------------------------------------
"for label in self.parameters.labels:
"
-------------------------------------------------------------------------
"Recom
PRs: 48536, 48560"
-------------------------------------------------------------------------
=========================================================================
"labels=dict(type='dict'),
"
-------------------------------------------------------------------------
labels=dict(type='dict')
-------------------------------------------------------------------------
"labels=dict(type='dict'),
"
-------------------------------------------------------------------------
"Recom
PRs: 48536, 48560"
-------------------------------------------------------------------------
=========================================================================
"if params.get('ebs_optimized') is not None:
    spec['EbsOptimized'] = params.get('ebs_optimized')
elif (params.get('network') or {}).get('ebs_optimized') is not None:
    # Backward compatibility for workaround described in https://github.com/ansible/ansible/issues/48159
"
-------------------------------------------------------------------------
"if params.get('ebs_optimized') is not None:
    spec['EbsOptimized'] = params.get('ebs_optimized')
elif (params.get('network') or {}).get('ebs_optimized') is not None:
    # Backward compatibility for workaround described in https://github.com/ansible/ansible/issues/48159"
-------------------------------------------------------------------------
"if params.get('ebs_optimized') is not None:
    spec['EbsOptimized'] = params.get('ebs_optimized')
elif (params.get('network') or {}).get('ebs_optimized') is not None:
    # Backward compatibility for workaround described in https://github.com/ansible/ansible/issues/48159
"
-------------------------------------------------------------------------
"Recom
PRs: 48341, 48467"
-------------------------------------------------------------------------
=========================================================================
"if 'ebs_optimized' in module.params['network']:
    module.deprecate(""network.ebs_optimized is deprecated.""
                     ""Use the top level ebs_optimized parameter instead"", 2.9)
"
-------------------------------------------------------------------------
"```python
if 'ebs_optimized' in module.params.get('network', {}):
    module.deprecate(""network.ebs_optimized is deprecated. Use the top level ebs_optimized parameter instead"", 2.9)
```"
-------------------------------------------------------------------------
"if 'ebs_optimized' in module.params['network']:
    module.deprecate(""network.ebs_optimized is deprecated.""
                     ""Use the top level ebs_optimized parameter instead"", 2.9)
"
-------------------------------------------------------------------------
"Recom
PRs: 48341, 48467"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=""cpu_options is only supported with botocore >= 1.10.16"")
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=""cpu_options is only supported with botocore >= 1.10.16"")
```"
-------------------------------------------------------------------------
"module.fail_json(msg=""cpu_options is only supported with botocore >= 1.10.16"")
"
-------------------------------------------------------------------------
"Recom
PRs: 48341, 48467"
-------------------------------------------------------------------------
=========================================================================
"# Check that the dashboard JSON is nested under the 'dashboard' key
if 'dashboard' not in payload:
    payload = {'dashboard': payload}

"
-------------------------------------------------------------------------
"```python
# Check that the dashboard JSON is nested under the 'dashboard' key
if 'dashboard' not in payload:
    payload = {'dashboard': payload}
```"
-------------------------------------------------------------------------
"# Check that the dashboard JSON is nested under the 'dashboard' key
if 'dashboard' not in payload:
    payload = {'dashboard': payload}

"
-------------------------------------------------------------------------
"Recom
PRs: 47459, 48445"
-------------------------------------------------------------------------
=========================================================================
"pkg_name = Package.canonicalize_name(pkg_name)
kg_name == req.package_name and req.is_satisfied_by(pkg_version):
"
-------------------------------------------------------------------------
"```python
pkg_name = Package.canonicalize_name(pkg_name)
if pkg_name == req.package_name and req.is_satisfied_by(pkg_version):
```"
-------------------------------------------------------------------------
"pkg_name = Package.canonicalize_name(pkg_name)
kg_name == req.package_name and req.is_satisfied_by(pkg_version):
"
-------------------------------------------------------------------------
"Recom
PRs: 44396, 48437"
-------------------------------------------------------------------------
=========================================================================
"_CANONICALIZE_RE = re.compile(r'[-_.]')

"
-------------------------------------------------------------------------
"```python
_CANONICALIZE_RE = re.compile(r'[-_.]', re.IGNORECASE)
```"
-------------------------------------------------------------------------
"_CANONICALIZE_RE = re.compile(r'[-_.]')

"
-------------------------------------------------------------------------
"Recom
PRs: 44396, 48437"
-------------------------------------------------------------------------
=========================================================================
"self.package_name = Package.canonicalize_name(self._requirement.project_name)
"
-------------------------------------------------------------------------
self.package_name = Package.canonicalize_name(self._requirement.project_name)
-------------------------------------------------------------------------
"self.package_name = Package.canonicalize_name(self._requirement.project_name)
"
-------------------------------------------------------------------------
"Recom
PRs: 44396, 48437"
-------------------------------------------------------------------------
=========================================================================
"@staticmethod
def canonicalize_name(name):
    # This is taken from PEP 503.
    return Package._CANONICALIZE_RE.sub(""-"", name).lower()

"
-------------------------------------------------------------------------
"```python
import re

class Package:
    _CANONICALIZE_RE = re.compile(r'[-_]', re.IGNORECASE)

    def __init__(self, requirement, plain_package=False):
        self._requirement = requirement
        self._plain_package = plain_package

    def __str__(self):
        return to_native(self._requirement)

    @staticmethod
    def canonicalize_name(name):
        return Package._CANONICALIZE_RE.sub(""-"", name).lower()
```"
-------------------------------------------------------------------------
"@staticmethod
def canonicalize_name(name):
    # This is taken from PEP 503.
    return Package._CANONICALIZE_RE.sub(""-"", name).lower()

"
-------------------------------------------------------------------------
"Recom
PRs: 44396, 48437"
-------------------------------------------------------------------------
=========================================================================
"absent. This was available in Ansible version 2.4 and removed in 2.8""
"
-------------------------------------------------------------------------
"```yaml
action:
  description:
    - ""That action that was taken and is one of: update_rule,
       insert_before_rule, insert_after_rule, args_present, args_absent""
  returned: always
  type: string
  sample: ""update_rule""
```"
-------------------------------------------------------------------------
"rule_match = RULE_REGEX.search(line)
rule_args = parse_module_arguments(rule_match.group('args'))
return cls(rule_match.group('rule_type'), rule_match.group('control'), rule_match.group('path'), rule_args)
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"RULE_REGEX = re.compile(r""""""(?P<rule_type>-?(?:auth|account|session|password))\s
(?P<path>\S*)\s*
(?P<args>.*)\s*"""""", re.X)

ile(r""""""(\[.*\]|\S*)"""""")

, '-account', 'auth', '-auth', 'password', '-password', 'session', '-session']
"
-------------------------------------------------------------------------
"```python
import re

RULE_REGEX = re.compile(r""""""(?P<rule_type>-?(?:auth|account|session|password))\s
(?P<path>\S*)\s*
(?P<args>.*)\s*"""""", re.X)

CONTROL_REGEX = re.compile(r""""""(\[.*\]|\S*)"""""")

CONTROL_VALUES = ['-account', 'auth', '-auth', 'password', '-password', 'session', '-session']
```"
-------------------------------------------------------------------------
"self._args = parse_module_arguments(args)
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"rule_match = RULE_REGEX.search(line)
rule_args = parse_module_arguments(rule_match.group('args'))
return cls(rule_match.group('rule_type'), rule_match.group('control'), rule_match.group('path'), rule_args)
"
-------------------------------------------------------------------------
"```python
rule_match = RULE_REGEX.search(line)
rule_args = parse_module_arguments(rule_match.group('args'))
return cls(rule_match.group('rule_type'), rule_match.group('control'), rule_match.group('path'), rule_args)
```"
-------------------------------------------------------------------------
"if self.rule_type not in VALID_TYPES:
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"self._args = parse_module_arguments(args)
"
-------------------------------------------------------------------------
"```python
self._args = PamdRule.parse_module_arguments(args)
```"
-------------------------------------------------------------------------
"changes = 1
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"if self.rule_type not in VALID_TYPES:
"
-------------------------------------------------------------------------
"```python
if self.rule_type not in VALID_TYPES:
```"
-------------------------------------------------------------------------
"changes = 1
hanges
= 0
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"new_args = parse_module_arguments(new_args)

changes = 0
    rule_changed = False
        if(current_rule.rule_type != new_type):
            rule_changed = True
            current_rule.rule_type = new_type
        if(current_rule.rule_control != new_control):
            rule_changed = True
            current_rule.rule_control = new_control
        if(current_rule.rule_path != new_path):
            rule_changed = True
            current_rule.rule_path = new_path
        if(current_rule.rule_args != new_args):
            rule_changed = True
            current_rule.rule_args = new_args

    if rule_changed:
        changes = 1
return changes
changes = 0
"
-------------------------------------------------------------------------
"```python
new_args = parse_module_arguments(new_args)

changes = 0
rule_changed = False

if current_rule.rule_type != new_type:
    rule_changed = True
    current_rule.rule_type = new_type

if current_rule.rule_control != new_control:
    rule_changed = True
    current_rule.rule_control = new_control

if current_rule.rule_path != new_path:
    rule_changed = True
    current_rule.rule_path = new_path

if current_rule.rule_args != new_args:
    rule_changed = True
    current_rule.rule_args = new_args

if rule_changed:
    changes = 1

return changes
```"
-------------------------------------------------------------------------
"changes = 1
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"changes = 1
"
-------------------------------------------------------------------------
"```python
class PamdService(object):
    # Fourth, set the current rule's previous to the new_rule
    current_rule.prev = new_rule

    # Handle the case where it is the first rule in the list.
    elif previous_rule is None:
```"
-------------------------------------------------------------------------
"changes = 1
hanges
add = parse_module_arguments(args_to_add)

= 0
_changed = False

eate some structures to evaluate the situation
le_new_args = set()
value_new_args = dict()

arg in args_to_add:
if arg.startswith(""[""):
    continue
elif ""="" in arg:
    key, value = arg.split(""="")
    key_value_new_args[key] = value
else:
    simple_new_args.add(arg)
value_new_args_set = set(key_value_new_args)
le_current_args = set()
value_current_args = dict()
arg in current_rule.rule_args:
if arg.startswith(""[""):
    continue
elif ""="" in arg:
    key, value = arg.split(""="")
    key_value_current_args[key] = value
else:
    simple_current_args.add(arg)

value_current_args_set = set(key_value_current_args)

args_to_add = list()

ndle new simple arguments
imple_new_args.difference(simple_current_args):
for arg in simple_new_args.difference(simple_current_args):
    new_args_to_add.append(arg)

ndle new key value arguments
ey_value_new_args_set.difference(key_value_current_args_set):
for key in key_value_new_args_set.difference(key_value_current_args_set):
    new_args_to_add.append(key  '='  key_value_new_args[key])

ew_args_to_add:
current_rule.rule_args = new_args_to_add
rule_changed = True

ndle existing key value arguments when value is not equal
ey_value_new_args_set.intersection(key_value_current_args_set):
for key in key_value_new_args_set.intersection(key_value_current_args_set):
    if key_value_current_args[key] != key_value_new_args[key]:
        arg_index = current_rule.rule_args.index(key  '='  key_value_current_args[key])
        current_rule.rule_args[arg_index] = str(key  '='  key_value_new_args[key])
        rule_changed = True

ule_changed:
changes = 1

hanges
remove = parse_module_arguments(args_to_remove)

= 0
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"changes = 1
hanges
= 0
"
-------------------------------------------------------------------------
"```python
changes = 0
```
"
-------------------------------------------------------------------------
"changes = 1
rn changes
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"changes = 1
"
-------------------------------------------------------------------------
"```python
import os
import datetime
import __future__
import re
import tempfile
import ansible.module_utils.basic

class PamdService(object):
    # Fifth, set the current rule's next to the new_rule
    current_rule.next = new_rule

    # This is the case where the current_rule is the last in the list
    elif next_rule is None:
```"
-------------------------------------------------------------------------
"return '\n'.join(lines)  '\n'


e_module_arguments(module_arguments):
turn empty list if we have no args to parse
ot module_arguments:
return []
 isinstance(module_arguments, list) and len(module_arguments) == 1 and not module_arguments[0]:
return []

ot isinstance(module_arguments, list):
module_arguments = [module_arguments]

ed_args = list()

arg in module_arguments:
for item in filter(None, RULE_ARG_REGEX.findall(arg)):
    if not item.startswith(""[""):
        re.sub(""\\s*=\\s*"", ""="", item)
    parsed_args.append(item)

rn parsed_args
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"changes = 1
hanges
add = parse_module_arguments(args_to_add)

= 0
_changed = False

eate some structures to evaluate the situation
le_new_args = set()
value_new_args = dict()

arg in args_to_add:
if arg.startswith(""[""):
    continue
elif ""="" in arg:
    key, value = arg.split(""="")
    key_value_new_args[key] = value
else:
    simple_new_args.add(arg)
value_new_args_set = set(key_value_new_args)
le_current_args = set()
value_current_args = dict()
arg in current_rule.rule_args:
if arg.startswith(""[""):
    continue
elif ""="" in arg:
    key, value = arg.split(""="")
    key_value_current_args[key] = value
else:
    simple_current_args.add(arg)

value_current_args_set = set(key_value_current_args)

args_to_add = list()

ndle new simple arguments
imple_new_args.difference(simple_current_args):
for arg in simple_new_args.difference(simple_current_args):
    new_args_to_add.append(arg)

ndle new key value arguments
ey_value_new_args_set.difference(key_value_current_args_set):
for key in key_value_new_args_set.difference(key_value_current_args_set):
    new_args_to_add.append(key  '='  key_value_new_args[key])

ew_args_to_add:
current_rule.rule_args = new_args_to_add
rule_changed = True

ndle existing key value arguments when value is not equal
ey_value_new_args_set.intersection(key_value_current_args_set):
for key in key_value_new_args_set.intersection(key_value_current_args_set):
    if key_value_current_args[key] != key_value_new_args[key]:
        arg_index = current_rule.rule_args.index(key  '='  key_value_current_args[key])
        current_rule.rule_args[arg_index] = str(key  '='  key_value_new_args[key])
        rule_changed = True

ule_changed:
changes = 1

hanges
remove = parse_module_arguments(args_to_remove)

= 0
"
-------------------------------------------------------------------------
"```python
changes = 0
_changed = False

# Create some structures to evaluate the situation
new_args_to_add = []
key_value_new_args = {}
simple_new_args = set()

# Handle arguments to add
for arg in args_to_add:
    if arg.startswith(""[""):
        continue
    elif ""="" in arg:
        key, value = arg.split(""="")
        key_value_new_args[key] = value
    else:
        simple_new_args.add(arg)

value_new_args_set = set(key_value_new_args.keys())

key_value_current_args = {}
value_current_args = {}
simple_current_args = set()

for arg in current_rule.rule_args:
    if arg.startswith(""[""):
        continue
    elif ""="" in arg:
        key, value = arg.split(""="")
        key_value_current_args[key] = value
    else:
        simple_current_args.add(arg)

value_current_args_set = set(key_value_current_args.keys())

args_to_add = []

# Handle new simple arguments
for arg in simple_new_args.difference(simple_current_args):
    new_args_to_add.append(arg)

# Handle new key value arguments
for key in key_value_new_args.keys() - key_value_current_args.keys():
    new_args_to_add.append(f""{key}={key_value_new_args[key]}"")

if new_args_to_add:
    current_rule.rule_args = new_args_to_add
    _changed = True

# Handle existing key value arguments when the value is not equal
for key in key_value_new_args.keys() & key_value_current_args.keys():
    if key_value_current_args[key] != key_value_new_args[key]:
        arg_index = current_rule.rule_args.index(f""{key}={key_value_current_args[key]}"")
        current_rule.rule_args[arg_index] = f""{key}={key_value_new_args[key]}""
        _changed = True

if _changed:
    changes = 1
```"
-------------------------------------------------------------------------
"
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"changes = 1
rn changes
"
-------------------------------------------------------------------------
"```python
changes = 1
```"
-------------------------------------------------------------------------
"changes = 0

"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"return '\n'.join(lines)  '\n'


e_module_arguments(module_arguments):
turn empty list if we have no args to parse
ot module_arguments:
return []
 isinstance(module_arguments, list) and len(module_arguments) == 1 and not module_arguments[0]:
return []

ot isinstance(module_arguments, list):
module_arguments = [module_arguments]

ed_args = list()

arg in module_arguments:
for item in filter(None, RULE_ARG_REGEX.findall(arg)):
    if not item.startswith(""[""):
        re.sub(""\\s*=\\s*"", ""="", item)
    parsed_args.append(item)

rn parsed_args
"
-------------------------------------------------------------------------
"```python
def parse_module_arguments(module_arguments):
    # return empty list if we have no args to parse
    if not module_arguments:
        return []
    
    if isinstance(module_arguments, list) and len(module_arguments) == 1 and not module_arguments[0]:
        return []
    
    if not isinstance(module_arguments, list):
        module_arguments = [module_arguments]

    parsed_args = []

    for arg in module_arguments:
        for item in filter(None, RULE_ARG_REGEX.findall(arg)):
            if not item.startswith(""[""):
                item = re.sub(""\\s*=\\s*"", ""="", item)
            parsed_args.append(item)

    return parsed_args
```"
-------------------------------------------------------------------------
"if [arg for arg in parse_module_arguments(module.params['module_arguments']) if arg.startswith(""["")]:
    module.fail_json(msg=""Unable to process bracketed '[' complex arguments with 'args_present'. Please use 'updated'."")

"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"choices=VALID_TYPES),
    choices=VALID_TYPES),
"
-------------------------------------------------------------------------
"```python
argument_spec=dict(
    name=dict(required=True, type='str'),
    type=dict(required=True, choices=VALID_TYPES),
    control=dict(required=True, type='str'),
    module_path=dict(required=True, type='str'),
    new_type=dict(required=False, choices=VALID_TYPES),
    new_control=dict(required=False, type='str'),
    new_module_path=dict(required=False, type='str'),
    module_arguments=dict(required=False, type='list'),
```"
-------------------------------------------------------------------------
"result = dict(
    changed=(changes > 0),
    change_count=changes,
    backupdest='',
    action=action,
)

if not module.check_mode and result['changed']:
        result['backupdest'] = module.backup_local(fname)
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"
"
-------------------------------------------------------------------------
"```python
import os
import datetime
import __future__
import re
import tempfile
from ansible.module_utils import basic

def main():
    content = str()
    fname = os.path.join(module.params[""path""], module.params[""name""])
    
    # Open the file and read the content or fail
    try:
        with open(fname, 'r') as service_file_obj:
```"
-------------------------------------------------------------------------
"module.atomic_move(temp_file.name, os.path.realpath(fname))
le.exit_json(**result)
"
-------------------------------------------------------------------------
"Recom
PRs: 47695, 48307"
-------------------------------------------------------------------------
=========================================================================
"controller_results = []
# Get these entries, but does not fail if not found
properties = ['Name', 'Status']
"
-------------------------------------------------------------------------
"```python
controller_results = []
# Get these entries, but does not fail if not found
properties = ['Name', 'Status']
```"
-------------------------------------------------------------------------
"controller_results = []
# Get these entries, but does not fail if not found
properties = ['Name', 'Status']
"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"controller = {}

for property in properties:
    if property in data:
        controller[property] = data[property]
controller_results.append(controller)
lt[""entries""] = controller_results
_results = []
t these entries, but does not fail if not found
erties = ['Name', 'Manufacturer', 'Model', 'Status', 'CapacityBytes']
"
-------------------------------------------------------------------------
"```python
controller = {}

for prop in properties:
    if prop in data:
        controller[prop] = data[prop]
controller_results.append(controller)
lt[""entries""] = controller_results
```"
-------------------------------------------------------------------------
"controller = {}

for property in properties:
    if property in data:
        controller[property] = data[property]
controller_results.append(controller)
lt[""entries""] = controller_results
_results = []
t these entries, but does not fail if not found
erties = ['Name', 'Manufacturer', 'Model', 'Status', 'CapacityBytes']
"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"disk = {}
for property in properties:
    if property in device:
        disk[property] = device[property]
disk_results.append(disk)
entries""] = disk_results
"
-------------------------------------------------------------------------
"```python
disk = {}
for property in properties:
    if property in device:
        disk[property] = device[property]
disk_results.append(disk)
result = {}
result[""entries""] = disk_results
return result
```"
-------------------------------------------------------------------------
"disk = {}
for property in properties:
    if property in device:
        disk[property] = device[property]
disk_results.append(disk)
entries""] = disk_results
"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"user_list = []
users_results = []
# Get these entries, but does not fail if not found
properties = ['Id', 'Name', 'UserName', 'RoleId', 'Locked', 'Enabled']

"
-------------------------------------------------------------------------
"```python
user_list = []
users_results = []
# Get these entries, but does not fail if not found
properties = ['Id', 'Name', 'UserName', 'RoleId', 'Locked', 'Enabled']
```"
-------------------------------------------------------------------------
"user_list = []
users_results = []
# Get these entries, but does not fail if not found
properties = ['Id', 'Name', 'UserName', 'RoleId', 'Locked', 'Enabled']

"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"user_list.append(users[u'@odata.id'])   # user_list[] are URIs
uri in user_list:
user = {}
for property in properties:
    if property in data:
        user[property] = data[property]

users_results.append(user)
lt[""entries""] = users_results
"
-------------------------------------------------------------------------
"```python
user_list.append(users.get(u'@odata.id'))  # user_list[] are URIs
for uri in user_list:
    user = {}
    for property in properties:
        if property in data:
            user[property] = data[property]

    users_results.append(user)
lt[""entries""] = users_results
```"
-------------------------------------------------------------------------
"user_list.append(users[u'@odata.id'])   # user_list[] are URIs
uri in user_list:
user = {}
for property in properties:
    if property in data:
        user[property] = data[property]

users_results.append(user)
lt[""entries""] = users_results
"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"key = ""Attributes""
response = self.get_request(self.root_uri  self.manager_uri  ""/""  key)

if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

for attribute in data[key].items():
"
-------------------------------------------------------------------------
"from ansible.module_utils.urls import open_url
from ansible.module_utils.six.moves.urllib.error import URLError, HTTPError
import re
import json
from __future__ import absolute_import, print_function

class RedfishUtils(object):
    def get_manager_attributes(self):
        result = {}
        manager_attributes = {}
        
        response = open_url(self.root_uri + self.manager_uri + ""/"" + ""Attributes"")
        data = json.loads(response.read())

        if ""Attributes"" not in data:
            return {'ret': False, 'msg': ""Key Attributes not found""}

        for attribute in data[""Attributes""].items():
            manager_attributes[attribute[0]] = attribute[1]

        result[""entries""] = manager_attributes
        return result"
-------------------------------------------------------------------------
"key = ""Attributes""
response = self.get_request(self.root_uri  self.manager_uri  ""/""  key)

if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

for attribute in data[key].items():
"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}"
-------------------------------------------------------------------------
"
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"# Get these entries, but does not fail if not found
properties = ['Index', 'Id', 'Name', 'Enabled']
"
-------------------------------------------------------------------------
"```python
properties = ['Index', 'Id', 'Name', 'Enabled']
```"
-------------------------------------------------------------------------
"# Get these entries, but does not fail if not found
properties = ['Index', 'Id', 'Name', 'Enabled']
"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}"
-------------------------------------------------------------------------
"
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"for property in properties:
    if property in b:
        boot_device[property] = b[property]
"
-------------------------------------------------------------------------
"for property in properties:
    if property in b:
        boot_device[property] = b[property]"
-------------------------------------------------------------------------
"for property in properties:
    if property in b:
        boot_device[property] = b[property]
"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}"
-------------------------------------------------------------------------
"
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"```python
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}
```"
-------------------------------------------------------------------------
"
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"```python
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}
```"
-------------------------------------------------------------------------
"
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}"
-------------------------------------------------------------------------
"
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"fan_results = []
# Get these entries, but does not fail if not found
properties = ['FanName', 'Reading', 'Status']
    fan = {}
"
-------------------------------------------------------------------------
"```python
fan_results = []
# Get these entries, but does not fail if not found
properties = ['FanName', 'Reading', 'Status']
fan = {}
```"
-------------------------------------------------------------------------
"fan_results = []
# Get these entries, but does not fail if not found
properties = ['FanName', 'Reading', 'Status']
    fan = {}
"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"for property in properties:
    if property in device:
        fan[property] = device[property]

fan_results.append(fan)
lt[""entries""] = fan_results
= []
entries, but does not fail if not found
 ['Id', 'Manufacturer', 'Model', 'MaxSpeedMHz', 'TotalCores',
  'TotalThreads', 'Status']
"
-------------------------------------------------------------------------
"for fan_property in ['Id', 'Manufacturer', 'Model', 'MaxSpeedMHz', 'TotalCores', 'TotalThreads', 'Status']:
    if fan_property in device:
        fan[fan_property] = device[fan_property]

fan_results.append(fan)
lt[""entries""] = fan_results"
-------------------------------------------------------------------------
"for property in properties:
    if property in device:
        fan[property] = device[property]

fan_results.append(fan)
lt[""entries""] = fan_results
= []
entries, but does not fail if not found
 ['Id', 'Manufacturer', 'Model', 'MaxSpeedMHz', 'TotalCores',
  'TotalThreads', 'Status']
"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"```python
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}
```"
-------------------------------------------------------------------------
"if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"
cpu = {}

for property in properties:
    if property in data:
        cpu[property] = data[property]

cpu_results.append(cpu)
lt[""entries""] = cpu_results
results = []
t these entries, but does not fail if not found
erties = ['Description', 'FQDN', 'IPv4Addresses', 'IPv6Addresses',
          'NameServers', 'PermanentMACAddress', 'SpeedMbps', 'MTUSize',
          'AutoNeg', 'Status']
"
-------------------------------------------------------------------------
"```python
cpu = {}

for property in properties:
    if property in data:
        cpu[property] = data[property]

cpu_results.append(cpu)
lt[""entries""] = cpu_results
results = []
```"
-------------------------------------------------------------------------
"
cpu = {}

for property in properties:
    if property in data:
        cpu[property] = data[property]

cpu_results.append(cpu)
lt[""entries""] = cpu_results
results = []
t these entries, but does not fail if not found
erties = ['Description', 'FQDN', 'IPv4Addresses', 'IPv6Addresses',
          'NameServers', 'PermanentMACAddress', 'SpeedMbps', 'MTUSize',
          'AutoNeg', 'Status']
"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"```python
if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}
```"
-------------------------------------------------------------------------
"if key not in data:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"for property in properties:
    if property in data:
        nic[property] = data[property]

nic_results.append(nic)
lt[""entries""] = nic_results
results = []
= ""PoweredBy""
t these entries, but does not fail if not found
erties = ['Name', 'Model', 'SerialNumber', 'PartNumber', 'Manufacturer',
          'FirmwareVersion', 'PowerCapacityWatts', 'PowerSupplyType',
          'Status']
"
-------------------------------------------------------------------------
"for property in properties:
    if property in data:
        nic[property] = data[property]

nic_results.append(nic)
lt[""entries""] = nic_results
results = []
properties = ['Name', 'Model', 'SerialNumber', 'PartNumber', 'Manufacturer',
          'FirmwareVersion', 'PowerCapacityWatts', 'PowerSupplyType',
          'Status']
No need to provide extra information."
-------------------------------------------------------------------------
"for property in properties:
    if property in data:
        nic[property] = data[property]

nic_results.append(nic)
lt[""entries""] = nic_results
results = []
= ""PoweredBy""
t these entries, but does not fail if not found
erties = ['Name', 'Model', 'SerialNumber', 'PartNumber', 'Manufacturer',
          'FirmwareVersion', 'PowerCapacityWatts', 'PowerSupplyType',
          'Status']
"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"if 'Links' not in data:
    return {'ret': False, 'msg': ""Property not found""}
if key not in data[u'Links']:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

    psu = {}
"
-------------------------------------------------------------------------
"```python
if 'Links' not in data:
    return {'ret': False, 'msg': ""Property not found""}
if psu_id not in data[u'Links']:
    return {'ret': False, 'msg': ""Key %s not found"" % psu_id}

psu = {}
```"
-------------------------------------------------------------------------
"if 'Links' not in data:
    return {'ret': False, 'msg': ""Property not found""}
if key not in data[u'Links']:
    return {'ret': False, 'msg': ""Key %s not found"" % key}

    psu = {}
"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"for property in properties:
    if property in data:
        psu[property] = data[property]
psu_results.append(psu)
lt[""entries""] = psu_results
t these entries, but does not fail if not found
erties = ['Status', 'HostName', 'PowerState', 'Model', 'Manufacturer',
          'PartNumber', 'SystemType', 'AssetTag', 'ServiceTag',
          'SerialNumber', 'BiosVersion', 'MemorySummary',
          'ProcessorSummary', 'TrustedModules']

property in properties:
if property in data:
    inventory[property] = data[property]
"
-------------------------------------------------------------------------
"for property in properties:
    if property in data:
        inventory[property] = data[property]

inventory_results.append(inventory)
result[""entries""] = inventory_results"
-------------------------------------------------------------------------
"for property in properties:
    if property in data:
        psu[property] = data[property]
psu_results.append(psu)
lt[""entries""] = psu_results
t these entries, but does not fail if not found
erties = ['Status', 'HostName', 'PowerState', 'Model', 'Manufacturer',
          'PartNumber', 'SystemType', 'AssetTag', 'ServiceTag',
          'SerialNumber', 'BiosVersion', 'MemorySummary',
          'ProcessorSummary', 'TrustedModules']

property in properties:
if property in data:
    inventory[property] = data[property]
"
-------------------------------------------------------------------------
"Recom
PRs: 46148, 48297"
-------------------------------------------------------------------------
=========================================================================
"import re
"
-------------------------------------------------------------------------
"```python
import re
```"
-------------------------------------------------------------------------
"import re
"
-------------------------------------------------------------------------
"Recom
PRs: 48148, 48151"
-------------------------------------------------------------------------
=========================================================================
"pattern = to_text(exc)
not_found_exc = ""No such file or directory""
if re.search(not_found_exc, pattern, re.I):
    if os.path.exists(source_file):
        os.remove(source_file)
"
-------------------------------------------------------------------------
"```python
pattern = to_text(exc)
not_found_exc = ""No such file or directory""
if re.search(not_found_exc, pattern, re.I):
    if os.path.exists(source_file):
        os.remove(source_file)
```"
-------------------------------------------------------------------------
"pattern = to_text(exc)
not_found_exc = ""No such file or directory""
if re.search(not_found_exc, pattern, re.I):
    if os.path.exists(source_file):
        os.remove(source_file)
"
-------------------------------------------------------------------------
"Recom
PRs: 48148, 48151"
-------------------------------------------------------------------------
=========================================================================
"os.remove(source_file)
"
-------------------------------------------------------------------------
"```python
os.remove(source_file)
```"
-------------------------------------------------------------------------
"os.remove(source_file)
"
-------------------------------------------------------------------------
"Recom
PRs: 48148, 48151"
-------------------------------------------------------------------------
=========================================================================
"child_configs = [
    dict(
        infraRsCdpIfPol=dict(
            attributes=dict(
                tnCdpIfPolName=cdp_policy,
            ),
        ),
    ),
    dict(
        infraRsFcIfPol=dict(
            attributes=dict(
                tnFcIfPolName=fibre_channel_interface_policy,
            ),
        ),
    ),
    dict(
        infraRsHIfPol=dict(
            attributes=dict(
                tnFabricHIfPolName=link_level_policy,
            ),
        ),
    ),
    dict(
        infraRsL2IfPol=dict(
            attributes=dict(
                tnL2IfPolName=l2_interface_policy,
            ),
        ),
    ),
    dict(
        infraRsL2PortSecurityPol=dict(
            attributes=dict(
                tnL2PortSecurityPolName=port_security_policy,
            ),
        ),
    ),
    dict(
        infraRsLacpPol=dict(
            attributes=dict(
                tnLacpLagPolName=port_channel_policy,
            ),
        ),
    ),
    dict(
        infraRsLldpIfPol=dict(
            attributes=dict(
                tnLldpIfPolName=lldp_policy,
            ),
        ),
    ),
    dict(
        infraRsMcpIfPol=dict(
            attributes=dict(
                tnMcpIfPolName=mcp_policy,
            ),
        ),
    ),
    dict(
        infraRsMonIfInfraPol=dict(
            attributes=dict(
                tnMonInfraPolName=monitoring_policy,
            ),
        ),
    ),
    dict(
        infraRsQosEgressDppIfPol=dict(
            attributes=dict(
                tnQosDppPolName=egress_data_plane_policing_policy,
            ),
        ),
    ),
    dict(
        infraRsQosIngressDppIfPol=dict(
            attributes=dict(
                tnQosDppPolName=ingress_data_plane_policing_policy,
            ),
        ),
    ),
    dict(
        infraRsQosPfcIfPol=dict(
            attributes=dict(
                tnQosPfcIfPolName=priority_flow_control_policy,
            ),
        ),
    ),
    dict(
        infraRsQosSdIfPol=dict(
            attributes=dict(
                tnQosSdIfPolName=slow_drain_policy,
            ),
        ),
    ),
    dict(
        infraRsStormctrlIfPol=dict(
            attributes=dict(
                tnStormctrlIfPolName=storm_control_interface_policy,
            ),
        ),
    ),
    dict(
        infraRsStpIfPol=dict(
            attributes=dict(
                tnStpIfPolName=stp_interface_policy,
            ),
        ),
    ),
]

# Add infraRsattEntP binding only when aep was defined
if aep is not None:
    child_configs.append(dict(
        infraRsAttEntP=dict(
            attributes=dict(
                tDn='uni/infra/attentp-{0}'.format(aep),
            ),
        ),
    ))

"
-------------------------------------------------------------------------
"```python
child_configs = [
    dict(
        infraRsCdpIfPol=dict(
            attributes=dict(
                tnCdpIfPolName=cdp_policy,
            ),
        ),
    ),
    dict(
        infraRsFcIfPol=dict(
            attributes=dict(
                tnFcIfPolName=fibre_channel_interface_policy,
            ),
        ),
    ),
    dict(
        infraRsHIfPol=dict(
            attributes=dict(
                tnFabricHIfPolName=link_level_policy,
            ),
        ),
    ),
    dict(
        infraRsL2IfPol=dict(
            attributes=dict(
                tnL2IfPolName=l2_interface_policy,
            ),
        ),
    ),
    dict(
        infraRsL2PortSecurityPol=dict(
            attributes=dict(
                tnL2PortSecurityPolName=port_security_policy,
            ),
        ),
    ),
    dict(
        infraRsLacpPol=dict(
            attributes=dict(
                tnLacpLagPolName=port_channel_policy,
            ),
        ),
    ),
    dict(
        infraRsLldpIfPol=dict(
            attributes=dict(
                tnLldpIfPolName=lldp_policy,
            ),
        ),
    ),
    dict(
        infraRsMcpIfPol=dict(
            attributes=dict(
                tnMcpIfPolName=mcp_policy,
            ),
        ),
    ),
    dict(
        infraRsMonIfInfraPol=dict(
            attributes=dict(
                tnMonInfraPolName=monitoring_policy,
            ),
        ),
    ),
    dict(
        infraRsQosEgressDppIfPol=dict(
            attributes=dict(
                tnQosDppPolName=egress_data_plane_policing_policy,
            ),
        ),
    ),
    dict(
        infraRsQosIngressDppIfPol=dict(
            attributes=dict(
                tnQosDppPolName=ingress_data_plane_policing_policy,
            ),
        ),
    ),
    dict(
        infraRsQosPfcIfPol=dict(
            attributes=dict(
                tnQosPfcIfPolName=priority_flow_control_policy,
            ),
        ),
    ),
    dict(
        infraRsQosSdIfPol=dict(
            attributes=dict(
                tnQosSdIfPolName=slow_drain_policy,
            ),
        ),
    ),
    dict(
        infraRsStormctrlIfPol=dict(
            attributes=dict(
                tnStormctrlIfPolName=storm_control_interface_policy,
            ),
        ),
    ),
    dict(
        infraRsStpIfPol=dict(
            attributes=dict(
                tnStpIfPolName=stp_interface_policy,
            ),
        ),
    ),
]

# Add infraRsattEntP binding only when aep was defined
if aep is not None:
    child_configs.append(dict(
        infraRsAttEntP=dict(
            attributes=dict(
                tDn='uni/infra/attentp-{0}'.format(aep),
            ),
        ),
    ))
```"
-------------------------------------------------------------------------
"child_configs = [
    dict(
        infraRsCdpIfPol=dict(
            attributes=dict(
                tnCdpIfPolName=cdp_policy,
            ),
        ),
    ),
    dict(
        infraRsFcIfPol=dict(
            attributes=dict(
                tnFcIfPolName=fibre_channel_interface_policy,
            ),
        ),
    ),
    dict(
        infraRsHIfPol=dict(
            attributes=dict(
                tnFabricHIfPolName=link_level_policy,
            ),
        ),
    ),
    dict(
        infraRsL2IfPol=dict(
            attributes=dict(
                tnL2IfPolName=l2_interface_policy,
            ),
        ),
    ),
    dict(
        infraRsL2PortSecurityPol=dict(
            attributes=dict(
                tnL2PortSecurityPolName=port_security_policy,
            ),
        ),
    ),
    dict(
        infraRsLacpPol=dict(
            attributes=dict(
                tnLacpLagPolName=port_channel_policy,
            ),
        ),
    ),
    dict(
        infraRsLldpIfPol=dict(
            attributes=dict(
                tnLldpIfPolName=lldp_policy,
            ),
        ),
    ),
    dict(
        infraRsMcpIfPol=dict(
            attributes=dict(
                tnMcpIfPolName=mcp_policy,
            ),
        ),
    ),
    dict(
        infraRsMonIfInfraPol=dict(
            attributes=dict(
                tnMonInfraPolName=monitoring_policy,
            ),
        ),
    ),
    dict(
        infraRsQosEgressDppIfPol=dict(
            attributes=dict(
                tnQosDppPolName=egress_data_plane_policing_policy,
            ),
        ),
    ),
    dict(
        infraRsQosIngressDppIfPol=dict(
            attributes=dict(
                tnQosDppPolName=ingress_data_plane_policing_policy,
            ),
        ),
    ),
    dict(
        infraRsQosPfcIfPol=dict(
            attributes=dict(
                tnQosPfcIfPolName=priority_flow_control_policy,
            ),
        ),
    ),
    dict(
        infraRsQosSdIfPol=dict(
            attributes=dict(
                tnQosSdIfPolName=slow_drain_policy,
            ),
        ),
    ),
    dict(
        infraRsStormctrlIfPol=dict(
            attributes=dict(
                tnStormctrlIfPolName=storm_control_interface_policy,
            ),
        ),
    ),
    dict(
        infraRsStpIfPol=dict(
            attributes=dict(
                tnStpIfPolName=stp_interface_policy,
            ),
        ),
    ),
]

# Add infraRsattEntP binding only when aep was defined
if aep is not None:
    child_configs.append(dict(
        infraRsAttEntP=dict(
            attributes=dict(
                tDn='uni/infra/attentp-{0}'.format(aep),
            ),
        ),
    ))

"
-------------------------------------------------------------------------
"Recom
PRs: 48001, 48115"
-------------------------------------------------------------------------
=========================================================================
"child_configs=child_configs,
"
-------------------------------------------------------------------------
"```python
def main():
    aci.payload(
        aci_class=aci_class_name,
        class_config=class_config_dict,
        child_configs=child_configs,
    )
    
    aci.get_diff(aci_class=aci_class_name)
```"
-------------------------------------------------------------------------
"child_configs=child_configs,
"
-------------------------------------------------------------------------
"Recom
PRs: 48001, 48115"
-------------------------------------------------------------------------
=========================================================================
"return {}, None
"
-------------------------------------------------------------------------
"```python
return {}, None
```"
-------------------------------------------------------------------------
"return {}, None
"
-------------------------------------------------------------------------
"Recom
PRs: 48102, 48114"
-------------------------------------------------------------------------
=========================================================================
"- No default setting. If the value is not set, the system setting from
  C(/etc/yum.conf) or system default of C(no) will be used.
"
-------------------------------------------------------------------------
"```yaml
options:
  description:
    - Tells yum whether or not it should perform a GPG signature check on
      packages. If not set, the system setting from '/etc/yum.conf' or the system default of 'no' will be used.
  type: bool
gpgkey:
  description:
```"
-------------------------------------------------------------------------
"description: Facts to add to ansible_facts about the services on the system
  services:
    description: States of the services with service name as key.
    returned: always
    type: complex
    contains:
      source:
        description: Init system of the service. One of C(systemd), C(sysv), C(upstart).
        returned: always
        type: string
        sample: sysv
      state:
        description: State of the service. Either C(running) or C(stopped).
        returned: always
        type: string
        sample: running
      name:
        description: Name of the service.
        returned: always
        type: string
        sample: arp-ethers.service
"
-------------------------------------------------------------------------
"Recom
PRs: 45796, 48111"
-------------------------------------------------------------------------
=========================================================================
"- Set the file transfer mode. If mode is set to I(text) then I(src)
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, print_function

# Set the file transfer mode. If mode is set to I(text) then I(src)
```"
-------------------------------------------------------------------------
"- Set the file transfer mode. If mode is set to I(text) then I(src)
"
-------------------------------------------------------------------------
"Recom
PRs: 48035, 48101"
-------------------------------------------------------------------------
=========================================================================
"from docker.errors import APIError, NotFound
"
-------------------------------------------------------------------------
"```python
from docker.errors import APIError, NotFound
```"
-------------------------------------------------------------------------
"from docker.errors import APIError, NotFound
"
-------------------------------------------------------------------------
"Recom
PRs: 48061, 48094"
-------------------------------------------------------------------------
=========================================================================
"self.container_remove(container_id, force=True)
"
-------------------------------------------------------------------------
"self.container_remove(container_id, force=True)"
-------------------------------------------------------------------------
"self.container_remove(container_id, force=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 48061, 48094"
-------------------------------------------------------------------------
=========================================================================
"def container_remove(self, container_id, link=False, force=False):
"
-------------------------------------------------------------------------
"```python
def container_remove(self, container_id, link=False, force=False):
    return self._get_container(container_id)
```"
-------------------------------------------------------------------------
"def container_remove(self, container_id, link=False, force=False):
"
-------------------------------------------------------------------------
"Recom
PRs: 48061, 48094"
-------------------------------------------------------------------------
=========================================================================
"except NotFound as exc:
    pass
except APIError as exc:
    if exc.response.status_code == 409 and ('removal of container ' in exc.explanation and
                                            ' is already in progress' in exc.explanation):
        pass
    else:
except Exception as exc:
    self.fail(""Error removing container %s: %s"" % (container_id, str(exc)))
"
-------------------------------------------------------------------------
"```python
except NotFound as exc:
    pass
except APIError as exc:
    if exc.response.status_code == 409 and ('removal of container ' in exc.explanation and
                                            ' is already in progress' in exc.explanation):
        pass
    else:
        pass
except Exception as exc:
    self.fail(""Error removing container %s: %s"" % (container_id, str(exc)))
```"
-------------------------------------------------------------------------
"except NotFound as exc:
    pass
except APIError as exc:
    if exc.response.status_code == 409 and ('removal of container ' in exc.explanation and
                                            ' is already in progress' in exc.explanation):
        pass
    else:
except Exception as exc:
    self.fail(""Error removing container %s: %s"" % (container_id, str(exc)))
"
-------------------------------------------------------------------------
"Recom
PRs: 48061, 48094"
-------------------------------------------------------------------------
=========================================================================
"except sdk.exceptions.NotFoundException:
except sdk.exceptions.NotFoundException:
"
-------------------------------------------------------------------------
"def _get_quotas(sdk, module, cloud, project):
    quota = {}
    try:
        quota['volume'] = _get_volume_quotas(cloud, project)
        module.warn(""No public endpoint for volumev2 service was found. Ignoring volume quotas."")
    except sdk.exceptions.NotFoundException:
        pass

    try:
        quota['network'] = _get_network_quotas(cloud, project)
        module.warn(""No public endpoint for network service was found. Ignoring network quotas."")
    except sdk.exceptions.NotFoundException:
        pass

    quota['compute'] = _get_compute_quotas(cloud, project)"
-------------------------------------------------------------------------
"except sdk.exceptions.NotFoundException:
except sdk.exceptions.NotFoundException:
"
-------------------------------------------------------------------------
"Recom
PRs: 45775, 48088"
-------------------------------------------------------------------------
=========================================================================
"except (sdk.exceptions.OpenStackCloudException, sdk.exceptions.ResourceTimeout) as e:
"
-------------------------------------------------------------------------
"```python
except (sdk.exceptions.OpenStackCloudException, sdk.exceptions.ResourceTimeout) as e:
```"
-------------------------------------------------------------------------
"except (sdk.exceptions.OpenStackCloudException, sdk.exceptions.ResourceTimeout) as e:
"
-------------------------------------------------------------------------
"Recom
PRs: 45775, 48088"
-------------------------------------------------------------------------
=========================================================================
"except sdk.exceptions.ResourceTimeout:
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.openstack import openstack_cloud_from_module, openstack_module_kwargs
from __future__ import print_function
from ansible.module_utils.basic import AnsibleModule
from __future__ import division

def _absent_volume(module, cloud):
    try:
        changed = cloud.delete_volume(name_or_id=module.params['display_name'],
                                      wait=module.params['wait'],
                                      timeout=module.params['timeout'])
    except sdk.exceptions.ResourceTimeout:
        module.fail_json(msg=""Operation timed out"")
    
    module.exit_json(changed=changed)
```"
-------------------------------------------------------------------------
"except sdk.exceptions.ResourceTimeout:
"
-------------------------------------------------------------------------
"Recom
PRs: 45775, 48088"
-------------------------------------------------------------------------
=========================================================================
"except (sdk.exceptions.OpenStackCloudException, sdk.exceptions.ResourceTimeout) as e:
"
-------------------------------------------------------------------------
"```python
import ansible.module_utils.openstack
from __future__ import print_function
from ansible.module_utils.basic import AnsibleModule

def main():
    try:
        module.fail_json(msg=""No volume with name or id '{0}' was found."".format(module.params['volume']))
    except (ansible.module_utils.openstack.sdk.exceptions.OpenStackCloudException, ansible.module_utils.openstack.sdk.exceptions.ResourceTimeout) as e:
        module.fail_json(msg=e.message)
```"
-------------------------------------------------------------------------
"except (sdk.exceptions.OpenStackCloudException, sdk.exceptions.ResourceTimeout) as e:
"
-------------------------------------------------------------------------
"Recom
PRs: 45775, 48088"
-------------------------------------------------------------------------
=========================================================================
"self.docker_py_version = LooseVersion(docker_version)

"
-------------------------------------------------------------------------
"```python
self.docker_py_version = LooseVersion(docker_version)
```"
-------------------------------------------------------------------------
"self.docker_py_version = LooseVersion(docker_version)

"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"if self.docker_py_version < LooseVersion(min_docker_version):
"
-------------------------------------------------------------------------
"```python
if docker_version < LooseVersion(min_docker_version):
``` "
-------------------------------------------------------------------------
"if self.docker_py_version < LooseVersion(min_docker_version):
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"self.docker_api_version_str = self.version()['ApiVersion']
self.docker_api_version = LooseVersion(self.docker_api_version_str)
if self.docker_api_version < LooseVersion(min_docker_api_version):
    self.fail('docker API version is %s. Minimum version required is %s.' % (self.docker_api_version_str, min_docker_api_version))
"
-------------------------------------------------------------------------
"```python
self.docker_api_version_str = self.version()['ApiVersion']
self.docker_api_version = distutils.version.LooseVersion(self.docker_api_version_str)
if self.docker_api_version < distutils.version.LooseVersion(min_docker_api_version):
    self.fail('docker API version is %s. Minimum version required is %s.' % (self.docker_api_version_str, min_docker_api_version))
```"
-------------------------------------------------------------------------
"self.docker_api_version_str = self.version()['ApiVersion']
self.docker_api_version = LooseVersion(self.docker_api_version_str)
if self.docker_api_version < LooseVersion(min_docker_api_version):
    self.fail('docker API version is %s. Minimum version required is %s.' % (self.docker_api_version_str, min_docker_api_version))
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"AnsibleDockerClient,
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.basic import human_to_bytes
from ansible.module_utils.docker_common import (
    DockerBaseClass, sanitize_result, is_image_name_id,
    compare_generic,
)
from distutils.version import LooseVersion
```"
-------------------------------------------------------------------------
"if self.client.docker_py_version < LooseVersion('3.0'):
    # cpu_shares and volume_driver moved to create_host_config in > 3
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker_common import docker_version
if LooseVersion(docker_version) >= LooseVersion('1.10.0'):
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker_common import docker_version
from distutils.version import LooseVersion

if LooseVersion(docker_version) >= LooseVersion('1.10.0'):
    # No need to provide extra information.
```"
-------------------------------------------------------------------------
"if self.client.option_minimal_versions[value]['supported']:
    result[key] = getattr(self, value)
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"blkio_weight='blkio_weight',
cpuset_mems='cpuset_mems',
    if self.client.option_minimal_versions[value]['supported']:
        result[key] = getattr(self, value)
"
-------------------------------------------------------------------------
"```python
blkio_weight='blkio_weight',
cpuset_mems='cpuset_mems',
if self.client.option_minimal_versions[value]['supported']:
    result[key] = getattr(self, value)
```"
-------------------------------------------------------------------------
"init='init',
uts_mode='uts',
auto_remove='auto_remove',
elf.client.docker_py_version >= LooseVersion('1.9') and self.client.docker_api_version >= LooseVersion('1.22'):
# blkio_weight can always be updated, but can only be set on creation
# when docker-py and docker API are new enough
elf.client.docker_py_version >= LooseVersion('3.0'):
    if self.client.option_minimal_versions[value]['supported']:
        params[key] = getattr(self, value)
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"stop_timeout='stop_timeout',
healthcheck='healthcheck',
elf.client.docker_py_version < LooseVersion('3.0'):
# cpu_shares and volume_driver moved to create_host_config in > 3
"
-------------------------------------------------------------------------
"```python
stop_timeout='stop_timeout',
healthcheck='healthcheck',
if 'elf.client.docker_py_version' < LooseVersion('3.0'):
# cpu_shares and volume_driver moved to create_host_config in > 3
No need to provide extra information.
```"
-------------------------------------------------------------------------
"volume_driver=host_config.get('VolumeDriver'),
tions which don't make sense without their accompanying option
elf.parameters.client.option_minimal_versions['auto_remove']['supported']:
# auto_remove is only supported in docker>=2; unfortunately it has a default
# value, that's why we have to jump through the hoops here
elf.parameters.client.docker_api_version < LooseVersion('1.22'):
# For docker API < 1.22, update_container() is not supported. Thus
# we need to handle all limits which are usually handled by
# update_container() as configuration changes which require a container
# restart.
config_mapping.update(dict(
    blkio_weight=host_config.get('BlkioWeight'),
    cpu_period=host_config.get('CpuPeriod'),
    cpu_quota=host_config.get('CpuQuota'),
    cpu_shares=host_config.get('CpuShares'),
    cpuset_cpus=host_config.get('CpusetCpus'),
    cpuset_mems=host_config.get('CpusetMems'),
    kernel_memory=host_config.get(""KernelMemory""),
    memory=host_config.get('Memory'),
    memory_reservation=host_config.get('MemoryReservation'),
    memory_swap=host_config.get('MemorySwap'),
))
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"if self.client.option_minimal_versions[value]['supported']:
    result[key] = getattr(self, value)
"
-------------------------------------------------------------------------
"```python
        if self.client.option_minimal_versions[value].get('supported', False):
            result[key] = getattr(self, value)
```"
-------------------------------------------------------------------------
"if self.parameters.client.docker_api_version < LooseVersion('1.22'):
    # update_container() call not supported
    return False, []
    blkio_weight=host_config.get('BlkioWeight'),
    cpu_shares=host_config.get('CpuShares'),
    cpuset_mems=host_config.get('CpusetMems'),
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"init='init',
uts_mode='uts',
runtime='runtime',
auto_remove='auto_remove',
device_read_bps='device_read_bps',
device_write_bps='device_write_bps',
device_read_iops='device_read_iops',
device_write_iops='device_write_iops',
elf.client.docker_py_version >= LooseVersion('1.9') and self.client.docker_api_version >= LooseVersion('1.22'):
# blkio_weight can always be updated, but can only be set on creation
# when docker-py and docker API are new enough
elf.client.docker_py_version >= LooseVersion('3.0'):
    if self.client.option_minimal_versions[value]['supported']:
        params[key] = getattr(self, value)
"
-------------------------------------------------------------------------
"```python
class TaskParameters(DockerBaseClass):
    devices='devices',
    pid_mode='pid_mode',
    tmpfs='tmpfs',
    init='init',
    uts_mode='uts',
    runtime='runtime',
    auto_remove='auto_remove',
    device_read_bps='device_read_bps',
    device_write_bps='device_write_bps',
    device_read_iops='device_read_iops',
    device_write_iops='device_write_iops',
)

if self.client.docker_py_version >= LooseVersion('1.9') and self.client.docker_api_version >= LooseVersion('1.22'):
    # blkio_weight can always be updated, but can only be set on creation
    # when docker-py and docker API are new enough
    if self.client.docker_py_version >= LooseVersion('3.0'):
        if self.client.option_minimal_versions[value]['supported']:
            params[key] = getattr(self, value)
```"
-------------------------------------------------------------------------
"if client.module.params.get('restart_retries') is not None and not client.module.params.get('restart_policy'):
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"volume_driver=host_config.get('VolumeDriver'),
"
-------------------------------------------------------------------------
"```python
volume_driver = host_config.get('VolumeDriver')
```"
-------------------------------------------------------------------------
"if self.client.docker_py_version >= LooseVersion('3.0'):
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"# Options which don't make sense without their accompanying option
if self.parameters.client.option_minimal_versions['auto_remove']['supported']:
    # auto_remove is only supported in docker>=2; unfortunately it has a default
    # value, that's why we have to jump through the hoops here
if self.parameters.client.option_minimal_versions['stop_timeout']['supported']:
    # stop_timeout is only supported in docker>=2.1. Note that stop_timeout
    # has a hybrid role, in that it used to be something only used for stopping
    # containers, and is now also used as a container property. That's why
    # it needs special handling here.
if self.parameters.client.docker_api_version < LooseVersion('1.22'):
    # For docker API < 1.22, update_container() is not supported. Thus
    # we need to handle all limits which are usually handled by
    # update_container() as configuration changes which require a container
    # restart.
    config_mapping.update(dict(
        blkio_weight=host_config.get('BlkioWeight'),
        cpu_period=host_config.get('CpuPeriod'),
        cpu_quota=host_config.get('CpuQuota'),
        cpu_shares=host_config.get('CpuShares'),
        cpuset_cpus=host_config.get('CpusetCpus'),
        cpuset_mems=host_config.get('CpusetMems'),
        kernel_memory=host_config.get(""KernelMemory""),
        memory=host_config.get('Memory'),
        memory_reservation=host_config.get('MemoryReservation'),
        memory_swap=host_config.get('MemorySwap'),
    ))
"
-------------------------------------------------------------------------
"```python
# Options which don't make sense without their accompanying option
if self.parameters.client.option_minimal_versions.get('auto_remove', {}).get('supported'):
    # auto_remove is only supported in docker>=2; unfortunately it has a default
    # value, that's why we have to jump through the hoops here
if self.parameters.client.option_minimal_versions.get('stop_timeout', {}).get('supported'):
    # stop_timeout is only supported in docker>=2.1. Note that stop_timeout
    # has a hybrid role, in that it used to be something only used for stopping
    # containers, and is now also used as a container property. That's why
    # it needs special handling here.
if self.parameters.client.docker_api_version < LooseVersion('1.22'):
    # For docker API < 1.22, update_container() is not supported. Thus
    # we need to handle all limits which are usually handled by
    # update_container() as configuration changes which require a container
    # restart.
    config_mapping.update(dict(
        blkio_weight=host_config.get('BlkioWeight'),
        cpu_period=host_config.get('CpuPeriod'),
        cpu_quota=host_config.get('CpuQuota'),
        cpu_shares=host_config.get('CpuShares'),
        cpuset_cpus=host_config.get('CpusetCpus'),
        cpuset_mems=host_config.get('CpusetMems'),
        kernel_memory=host_config.get(""KernelMemory""),
        memory=host_config.get('Memory'),
        memory_reservation=host_config.get('MemoryReservation'),
        memory_swap=host_config.get('MemorySwap'),
    ))
```"
-------------------------------------------------------------------------
"# A list of module options which are not docker container properties
__NON_CONTAINER_PROPERTY_OPTIONS = (
    'docker_host', 'tls_hostname', 'api_version', 'timeout', 'cacert_path', 'cert_path',
    'key_path', 'ssl_version', 'tls', 'tls_verify', 'debug', 'env_file', 'force_kill',
    'keep_volumes', 'ignore_image', 'name', 'pull', 'purge_networks', 'recreate',
    'restart', 'state', 'stop_timeout', 'trust_image_content', 'networks', 'cleanup',
    'kill_signal', 'output_logs', 'paused'
)
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"if self.parameters.client.docker_api_version < LooseVersion('1.22'):
    # update_container() call not supported
    return False, []
    blkio_weight=host_config.get('BlkioWeight'),
    cpu_shares=host_config.get('CpuShares'),
    cpuset_mems=host_config.get('CpusetMems'),
"
-------------------------------------------------------------------------
"```python
if self.parameters.client.docker_api_version < LooseVersion('1.22'):
    # update_container() call not supported
    return False, []
```
"
-------------------------------------------------------------------------
"def _get_minimal_versions(self):
    # Helper function to detect whether any specified network uses ipv4_address or ipv6_address
    def detect_ipvX_address_usage():
        for network in self.module.params.get(""networks"") or []:
                return True
        return False

    self.option_minimal_versions = dict(
        # internal options
        log_config=dict(),
        publish_all_ports=dict(),
        ports=dict(),
        volume_binds=dict(),
        name=dict(),
    )
    for option, data in self.module.argument_spec.items():
        if option in self.__NON_CONTAINER_PROPERTY_OPTIONS:
            continue
        self.option_minimal_versions[option] = dict()
    self.option_minimal_versions.update(dict(
        dns_opts=dict(docker_api_version='1.21', docker_py_version='1.10.0'),
        ipc_mode=dict(docker_api_version='1.25'),
        mac_address=dict(docker_api_version='1.25'),
        oom_killer=dict(docker_py_version='2.0.0'),
        oom_score_adj=dict(docker_api_version='1.22', docker_py_version='2.0.0'),
        shm_size=dict(docker_api_version='1.22'),
        stop_signal=dict(docker_api_version='1.21'),
        tmpfs=dict(docker_api_version='1.22'),
        volume_driver=dict(docker_api_version='1.21'),
        memory_reservation=dict(docker_api_version='1.21'),
        kernel_memory=dict(docker_api_version='1.21'),
        auto_remove=dict(docker_py_version='2.1.0', docker_api_version='1.25'),
        init=dict(docker_py_version='2.2.0', docker_api_version='1.25'),
        sysctls=dict(docker_py_version='1.10.0', docker_api_version='1.24'),
        userns_mode=dict(docker_py_version='1.10.0', docker_api_version='1.23'),
        uts=dict(docker_py_version='3.5.0', docker_api_version='1.25'),
        # specials
        ipvX_address_supported=dict(docker_py_version='1.9.0', detect_usage=detect_ipvX_address_usage,
                                    usage_msg='ipv4_address or ipv6_address in networks'),
    ))

    for option, data in self.option_minimal_versions.items():
        # Test whether option is supported, and store result
        support_docker_py = True
        support_docker_api = True
        if 'docker_py_version' in data:
            support_docker_py = self.docker_py_version >= LooseVersion(data['docker_py_version'])
        if 'docker_api_version' in data:
            support_docker_api = self.docker_api_version >= LooseVersion(data['docker_api_version'])
        data['supported'] = support_docker_py and support_docker_api
        # Fail if option is not supported but used
        if not data['supported']:
            # Test whether option is specified
            if 'detect_usage' in data:
                used = data['detect_usage']()
            else:
                used = self.module.params.get(option) is not None
                if used and 'default' in self.module.argument_spec[option]:
                    used = self.module.params[option] != self.module.argument_spec[option]['default']
            if used:
                # If the option is used, compose error message.
                if 'usage_msg' in data:
                    usg = data['usage_msg']
                else:
                    usg = 'set %s option' % (option, )
                if not support_docker_api:
                    msg = 'docker API version is %s. Minimum version required is %s to %s.'
                    msg = msg % (self.docker_api_version_str, data['docker_api_version'], usg)
                elif not support_docker_py:
                    if LooseVersion(data['docker_py_version']) < LooseVersion('2.0.0'):
                        msg = (""docker-py version is %s. Minimum version required is %s to %s. ""
                               ""Consider switching to the 'docker' package if you do not require Python 2.6 support."")
                    elif self.docker_py_version < LooseVersion('2.0.0'):
                        msg = (""docker-py version is %s. Minimum version required is %s to %s. ""
                               ""You have to switch to the Python 'docker' package. First uninstall 'docker-py' before ""
                               ""installing 'docker' to avoid a broken installation."")
                    else:
                        msg = ""docker version is %s. Minimum version required is %s to %s.""
                    msg = msg % (docker_version, data['docker_py_version'], usg)
                else:
                    # should not happen
                    msg = 'Cannot %s with your configuration.' % (usg, )
                self.fail(msg)
def __init__(self, **kwargs):
    super(AnsibleDockerClientContainer, self).__init__(**kwargs)
    self._get_minimal_versions()
"
-------------------------------------------------------------------------
"Recom
PRs: 47711, 48074"
-------------------------------------------------------------------------
=========================================================================
"- Set the PID namespace mode for the container.
- Note that docker-py < 2.0 only supports 'host'. Newer versions allow all values supported by the docker daemon.
"
-------------------------------------------------------------------------
"```python
# Set the PID namespace mode for the container.
# Note that docker-py < 2.0 only supports 'host'. Newer versions allow all values supported by the docker daemon.
from docker.types import PIDMode

client.containers.run(""alpine"", pid_mode=PIDMode.host)
```"
-------------------------------------------------------------------------
"- Set the PID namespace mode for the container.
- Note that docker-py < 2.0 only supports 'host'. Newer versions allow all values supported by the docker daemon.
"
-------------------------------------------------------------------------
"Recom
PRs: 47997, 48073"
-------------------------------------------------------------------------
=========================================================================
"self.pid_mode = self._replace_container_names(self.pid_mode)
self.ipc_mode = self._replace_container_names(self.ipc_mode)
"
-------------------------------------------------------------------------
"```python
self.pid_mode = self._replace_container_names(self.pid_mode)
self.ipc_mode = self._replace_container_names(self.ipc_mode)
```"
-------------------------------------------------------------------------
"self.pid_mode = self._replace_container_names(self.pid_mode)
self.ipc_mode = self._replace_container_names(self.ipc_mode)
"
-------------------------------------------------------------------------
"Recom
PRs: 47997, 48073"
-------------------------------------------------------------------------
=========================================================================
"def _replace_container_names(self, mode):
    """"""
    Parse IPC and PID modes. If they contain a container name, replace
    with the container's ID.
    """"""
    if mode is None or not mode.startswith('container:'):
        return mode
    container_name = mode[len('container:'):]
    # Try to inspect container to see whether this is an ID or a
    # name (and in the latter case, retrieve it's ID)
    container = self.client.get_container(container_name)
    if container is None:
        # If we can't find the container, issue a warning and continue with
        # what the user specified.
        self.client.module.warn('Cannot find a container with name or ID ""{0}""'.format(container_name))
        return mode
    return 'container:{0}'.format(container['Id'])

"
-------------------------------------------------------------------------
"```python
def _replace_container_names(self, mode):
    """"""
    Parse IPC and PID modes. If they contain a container name, replace
    with the container's ID.
    """"""
    if mode is None or not mode.startswith('container:'):
        return mode
    container_name = mode[len('container:'):]
    # Try to inspect container to see whether this is an ID or a
    # name (and in the latter case, retrieve its ID)
    container = self.client.inspect_container(container_name)
    if container is None:
        # If we can't find the container, issue a warning and continue with
        # what the user specified.
        self.client.module.warn('Cannot find a container with name or ID ""{0}""'.format(container_name))
        return mode
    return 'container:{0}'.format(container['Id'])
```"
-------------------------------------------------------------------------
"def _replace_container_names(self, mode):
    """"""
    Parse IPC and PID modes. If they contain a container name, replace
    with the container's ID.
    """"""
    if mode is None or not mode.startswith('container:'):
        return mode
    container_name = mode[len('container:'):]
    # Try to inspect container to see whether this is an ID or a
    # name (and in the latter case, retrieve it's ID)
    container = self.client.get_container(container_name)
    if container is None:
        # If we can't find the container, issue a warning and continue with
        # what the user specified.
        self.client.module.warn('Cannot find a container with name or ID ""{0}""'.format(container_name))
        return mode
    return 'container:{0}'.format(container['Id'])

"
-------------------------------------------------------------------------
"Recom
PRs: 47997, 48073"
-------------------------------------------------------------------------
=========================================================================
"- Set the PID namespace mode for the container.
- Note that docker-py < 2.0 only supports 'host'. Newer versions allow all values supported by the docker daemon.
"
-------------------------------------------------------------------------
"```python
import docker

client = docker.from_env()
container = client.containers.run(""alpine"", detach=True)
container.update(pid_mode='host')
```"
-------------------------------------------------------------------------
"- Set the PID namespace mode for the container.
- Note that docker-py < 2.0 only supports 'host'. Newer versions allow all values supported by the docker daemon.
"
-------------------------------------------------------------------------
"Recom
PRs: 47997, 48072"
-------------------------------------------------------------------------
=========================================================================
"self.pid_mode = self._replace_container_names(self.pid_mode)
self.ipc_mode = self._replace_container_names(self.ipc_mode)
"
-------------------------------------------------------------------------
"```python
self.pid_mode = self._replace_container_names(self.pid_mode)
self.ipc_mode = self._replace_container_names(self.ipc_mode)
```"
-------------------------------------------------------------------------
"self.pid_mode = self._replace_container_names(self.pid_mode)
self.ipc_mode = self._replace_container_names(self.ipc_mode)
"
-------------------------------------------------------------------------
"Recom
PRs: 47997, 48072"
-------------------------------------------------------------------------
=========================================================================
"def _replace_container_names(self, mode):
    """"""
    Parse IPC and PID modes. If they contain a container name, replace
    with the container's ID.
    """"""
    if mode is None or not mode.startswith('container:'):
        return mode
    container_name = mode[len('container:'):]
    # Try to inspect container to see whether this is an ID or a
    # name (and in the latter case, retrieve it's ID)
    container = self.client.get_container(container_name)
    if container is None:
        # If we can't find the container, issue a warning and continue with
        # what the user specified.
        self.client.module.warn('Cannot find a container with name or ID ""{0}""'.format(container_name))
        return mode
    return 'container:{0}'.format(container['Id'])

"
-------------------------------------------------------------------------
"```python
def _replace_container_names(self, mode):
    """"""
    Parse IPC and PID modes. If they contain a container name, replace
    with the container's ID.
    """"""
    if mode is None or not mode.startswith('container:'):
        return mode
    container_name = mode[len('container:'):]
    # Try to inspect container to see whether this is an ID or a
    # name (and in the latter case, retrieve its ID)
    container = self.client.get_container(container_name)
    if container is None:
        # If we can't find the container, issue a warning and continue with
        # what the user specified.
        self.client.module.warn('Cannot find a container with name or ID ""{0}""'.format(container_name))
        return mode
    return 'container:{0}'.format(container['Id'])
```  "
-------------------------------------------------------------------------
"def _replace_container_names(self, mode):
    """"""
    Parse IPC and PID modes. If they contain a container name, replace
    with the container's ID.
    """"""
    if mode is None or not mode.startswith('container:'):
        return mode
    container_name = mode[len('container:'):]
    # Try to inspect container to see whether this is an ID or a
    # name (and in the latter case, retrieve it's ID)
    container = self.client.get_container(container_name)
    if container is None:
        # If we can't find the container, issue a warning and continue with
        # what the user specified.
        self.client.module.warn('Cannot find a container with name or ID ""{0}""'.format(container_name))
        return mode
    return 'container:{0}'.format(container['Id'])

"
-------------------------------------------------------------------------
"Recom
PRs: 47997, 48072"
-------------------------------------------------------------------------
=========================================================================
"return self.module.from_json(to_native(res)) or {}
"
-------------------------------------------------------------------------
"```python
try:
    return self.module.from_json(to_native(res))
except ValueError as e:
    self.module.fail_json(msg=""Could not process response into json: %s"" % e)
```"
-------------------------------------------------------------------------
"return self.module.from_json(to_native(res)) or {}
"
-------------------------------------------------------------------------
"Recom
PRs: 48036, 48054"
-------------------------------------------------------------------------
=========================================================================
"def __init__(self, module, account):
    self.directory, dummy = account.get_request(self.directory_root)
"
-------------------------------------------------------------------------
"```python
def __init__(self, module, account):
    self.directory, _ = account.get_request(self.directory_root)
```"
-------------------------------------------------------------------------
"if payload is None:
    payload64 = ''
else:
    payload64 = nopad_b64(self.module.jsonify(payload).encode('utf8'))
"
-------------------------------------------------------------------------
"Recom
PRs: 45051, 48043"
-------------------------------------------------------------------------
=========================================================================
"self.directory = ACMEDirectory(module, self)

"
-------------------------------------------------------------------------
"self.directory = ACMEDirectory(module, self)"
-------------------------------------------------------------------------
"
If payload is None, a POST-as-GET is performed.
(https://tools.ietf.org/html/draft-ietf-acme-acme-15#section-6.3)
"
-------------------------------------------------------------------------
"Recom
PRs: 45051, 48043"
-------------------------------------------------------------------------
=========================================================================
"def send_signed_request(self, url, payload, key_data=None, jws_header=None, parse_json_result=True):
"
-------------------------------------------------------------------------
"def send_signed_request(self, url, payload, key_data=None, jws_header=None, parse_json_result=True):
         elif key_data is None:
             return _sign_request(self._module, self._loader, self._openssl_bin, payload)
         else:
             return _sign_request_openssl(self._openssl_bin, self.module, payload64, protected64, key_data)"
-------------------------------------------------------------------------
"def get_request(self, uri, parse_json_result=True, headers=None, get_only=False):
    '''
    Perform a GET-like request. Will try POST-as-GET for ACMEv2, with fallback
    to GET if server replies with a status code of 405.
    '''
    if not get_only and self.version != 1:
        # Try POST-as-GET
        content, info = self.send_signed_request(uri, None, parse_json_result=False)
        if info['status'] == 405:
            # Instead, do unauthenticated GET
            get_only = True
    else:
        # Do unauthenticated GET
        get_only = True
    if get_only:
        # Perform unauthenticated GET
        resp, info = fetch_url(self.module, uri, method='GET', headers=headers)
        try:
            content = resp.read()
        except AttributeError:
            content = info.get('body')

    # Process result
"
-------------------------------------------------------------------------
"Recom
PRs: 45051, 48043"
-------------------------------------------------------------------------
=========================================================================
"ModuleFailException, write_file, nopad_b64, pem_to_der, ACMEAccount,
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.acme import (
    HAS_CURRENT_CRYPTOGRAPHY, cryptography_get_csr_domains, cryptography_get_cert_days,
    set_crypto_backend, ModuleFailException, write_file, nopad_b64, pem_to_der, ACMEAccount,
)
```"
-------------------------------------------------------------------------
"data = {}
result, info = self.send_signed_request(self.uri, data)
:
# try POST-as-GET first (draft-15 or newer)
data = None
result, info = self.send_signed_request(self.uri, data)
# check whether that failed with a malformed request error
if info['status'] >= 400 and result.get('type') == 'urn:ietf:params:acme:error:malformed':
    # retry as a regular POST (with no changed data) for pre-draft-15 ACME servers
    data = {}
    result, info = self.send_signed_request(self.uri, data)
"
-------------------------------------------------------------------------
"Recom
PRs: 45051, 48043"
-------------------------------------------------------------------------
=========================================================================
"follow_redirects='all',
use_proxy=False)
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, print_function
from ansible.module_utils.six.moves.urllib.error import HTTPError, URLError
from ansible.module_utils.urls import open_url
import re
import json

class RedfishUtils(object):
    url_username=self.creds['user'],
    url_password=self.creds['pswd'],
    force_basic_auth=True, validate_certs=False,
    data = json.loads(resp.read())
    except HTTPError as e:
        return {'ret': False, 'msg': ""HTTP Error: %s"" % e.code}
```"
-------------------------------------------------------------------------
"follow_redirects='all',
use_proxy=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 45704, 47822"
-------------------------------------------------------------------------
=========================================================================
"follow_redirects='all',
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.six.moves.urllib.error import HTTPError
from ansible.module_utils.urls import open_url
import re
import json
from __future__ import absolute_import
from __future__ import print_function

class RedfishUtils(object):
    url_username=self.creds['user'],
    url_password=self.creds['pswd'],
    force_basic_auth=True, validate_certs=False,
    use_proxy=False,
    follow_redirects='all')

    except HTTPError as e:
        return {'ret': False, 'msg': ""HTTP Error: %s"" % e.code}
```"
-------------------------------------------------------------------------
"follow_redirects='all',
"
-------------------------------------------------------------------------
"Recom
PRs: 45704, 47822"
-------------------------------------------------------------------------
=========================================================================
"follow_redirects='all',
"
-------------------------------------------------------------------------
"```python
try:
    response = urls.open_url(url, method=""GET"", url_username=self.creds['user'], url_password=self.creds['pswd'], follow_redirects='all',
                             force_basic_auth=True, validate_certs=False, use_proxy=False)
except HTTPError as e:
    return {'ret': False, 'msg': ""HTTP Error: %s"" % e.code}
```"
-------------------------------------------------------------------------
"follow_redirects='all',
"
-------------------------------------------------------------------------
"Recom
PRs: 45704, 47822"
-------------------------------------------------------------------------
=========================================================================
"follow_redirects='all',
"
-------------------------------------------------------------------------
"            use_proxy=False, follow_redirects='all')
         except HTTPError as e:
             return {'ret': False, 'msg': ""HTTP Error: %s"" % e.code}"
-------------------------------------------------------------------------
"follow_redirects='all',
"
-------------------------------------------------------------------------
"Recom
PRs: 45704, 47822"
-------------------------------------------------------------------------
=========================================================================
"
# First, check if BIOS attribute exists
if attr['bios_attr_name'] not in data[u'Attributes']:
    return {'ret': False, 'msg': ""BIOS attribute not found""}

# Find out if value is already set to what we want. If yes, return
if data[u'Attributes'][attr['bios_attr_name']] == attr['bios_attr_value']:
    return {'ret': True, 'changed': False, 'msg': ""BIOS attribute already set""}

"
-------------------------------------------------------------------------
"```python
if attr['bios_attr_name'] not in data['Attributes']:
    return {'ret': False, 'msg': ""BIOS attribute not found""}

if data['Attributes'][attr['bios_attr_name']] == attr['bios_attr_value']:
    return {'ret': True, 'changed': False, 'msg': ""BIOS attribute already set""}
```"
-------------------------------------------------------------------------
"
# First, check if BIOS attribute exists
if attr['bios_attr_name'] not in data[u'Attributes']:
    return {'ret': False, 'msg': ""BIOS attribute not found""}

# Find out if value is already set to what we want. If yes, return
if data[u'Attributes'][attr['bios_attr_name']] == attr['bios_attr_value']:
    return {'ret': True, 'changed': False, 'msg': ""BIOS attribute already set""}

"
-------------------------------------------------------------------------
"Recom
PRs: 47462, 47802"
-------------------------------------------------------------------------
=========================================================================
"return {'ret': True, 'changed': True, 'msg': ""Modified BIOS attribute""}
"
-------------------------------------------------------------------------
"```python
return {'ret': True, 'changed': True, 'msg': ""Modified BIOS attribute""}
```"
-------------------------------------------------------------------------
"return {'ret': True, 'changed': True, 'msg': ""Modified BIOS attribute""}
"
-------------------------------------------------------------------------
"Recom
PRs: 47462, 47802"
-------------------------------------------------------------------------
=========================================================================
"module.exit_json(changed=result['changed'], msg=to_native(result['msg']))
"
-------------------------------------------------------------------------
"from __future__ import print_function, absolute_import
import ansible.module_utils.redfish_utils as redfish_utils
import ansible.module_utils._text as _text
import ansible.module_utils.basic as basic

def main():
    # Return data back or fail with proper message
    if result['ret'] is True:
        module.exit_json(changed=result['changed'], msg=_text.to_native(result['msg']))
    else:
        module.fail_json(msg=_text.to_native(result['msg']))"
-------------------------------------------------------------------------
"module.exit_json(changed=result['changed'], msg=to_native(result['msg']))
"
-------------------------------------------------------------------------
"Recom
PRs: 47462, 47802"
-------------------------------------------------------------------------
=========================================================================
"from docker.errors import APIError, NotFound, TLSParameterError
"
-------------------------------------------------------------------------
"from docker.errors import APIError, NotFound, TLSParameterError"
-------------------------------------------------------------------------
"from docker.errors import APIError, NotFound, TLSParameterError
"
-------------------------------------------------------------------------
"Recom
PRs: 47712, 47762"
-------------------------------------------------------------------------
=========================================================================
"class NotFound(Exception):  # noqa: F811
    pass

"
-------------------------------------------------------------------------
"```python
if not HAS_DOCKER_PY:
     class APIError(Exception):  # noqa: F811
         pass
     class NotFound(Exception):  # noqa: F811
         pass
```"
-------------------------------------------------------------------------
"class NotFound(Exception):  # noqa: F811
    pass

"
-------------------------------------------------------------------------
"Recom
PRs: 47712, 47762"
-------------------------------------------------------------------------
=========================================================================
"except NotFound as exc:
    return None
"
-------------------------------------------------------------------------
"except NotFound as exc:
    return None"
-------------------------------------------------------------------------
"except NotFound as exc:
    return None
"
-------------------------------------------------------------------------
"Recom
PRs: 47712, 47762"
-------------------------------------------------------------------------
=========================================================================
"from docker.errors import APIError, NotFound, TLSParameterError
"
-------------------------------------------------------------------------
"from docker.errors import APIError, NotFound, TLSParameterError"
-------------------------------------------------------------------------
"from docker.errors import APIError, NotFound, TLSParameterError
"
-------------------------------------------------------------------------
"Recom
PRs: 47712, 47761"
-------------------------------------------------------------------------
=========================================================================
"class NotFound(Exception):  # noqa: F811
    pass

"
-------------------------------------------------------------------------
"```python
if not HAS_DOCKER_PY:
    class APIError(Exception):  # noqa: F811
        pass
    class NotFound(Exception):  # noqa: F811
        pass
```"
-------------------------------------------------------------------------
"class NotFound(Exception):  # noqa: F811
    pass

"
-------------------------------------------------------------------------
"Recom
PRs: 47712, 47761"
-------------------------------------------------------------------------
=========================================================================
"except NotFound as exc:
    return None
"
-------------------------------------------------------------------------
"```python
except NotFound as exc:
    return None
```"
-------------------------------------------------------------------------
"except NotFound as exc:
    return None
"
-------------------------------------------------------------------------
"Recom
PRs: 47712, 47761"
-------------------------------------------------------------------------
=========================================================================
"def pre_create(self, entity):
    # Save the entity, so we know if Agent already existed
    self.entity = entity

    last = next((s for s in sorted([a.order for a in self._service.list()])), 0)
    order = self.param('order') if self.param('order') is not None else self.entity.order if self.entity else last  1
"
-------------------------------------------------------------------------
"```python
def pre_create(self, entity):
    # Save the entity, so we know if Agent already existed
    self.entity = entity

    last = next((s for s in sorted([a.order for a in self._service.list()]), default=0)
    order = self.param('order') if self.param('order') is not None else self.entity.order if self.entity else last + 1
```"
-------------------------------------------------------------------------
"def pre_create(self, entity):
    # Save the entity, so we know if Agent already existed
    self.entity = entity

    last = next((s for s in sorted([a.order for a in self._service.list()])), 0)
    order = self.param('order') if self.param('order') is not None else self.entity.order if self.entity else last  1
"
-------------------------------------------------------------------------
"Recom
PRs: 47659, 47662"
-------------------------------------------------------------------------
=========================================================================
"order=order,
check_options():
if self.param('options'):
    current = []
    if entity.options:
        current = [(opt.name, str(opt.value)) for opt in entity.options]
    passed = [(k, str(v)) for k, v in self.param('options').items()]
    return sorted(current) == sorted(passed)
return True

check_options() and
"
-------------------------------------------------------------------------
"```python
order=entity.order,

def check_options():
    if self.param('options'):
        current = []
        if entity.options:
            current = [(opt.name, str(opt.value)) for opt in entity.options]
        passed = [(k, str(v)) for k, v in self.param('options').items()]
        return sorted(current) == sorted(passed)
    return True

check_options() and
```"
-------------------------------------------------------------------------
"order=order,
check_options():
if self.param('options'):
    current = []
    if entity.options:
        current = [(opt.name, str(opt.value)) for opt in entity.options]
    passed = [(k, str(v)) for k, v in self.param('options').items()]
    return sorted(current) == sorted(passed)
return True

check_options() and
"
-------------------------------------------------------------------------
"Recom
PRs: 47659, 47662"
-------------------------------------------------------------------------
=========================================================================
"changed = True
"
-------------------------------------------------------------------------
"```python
import os
import sys
from __future__ import absolute_import
from ansible.module_utils.basic import AnsibleModule

def main():
    if filt:
        filtered_output = list(filter(filt, lines))
        if len(filtered_output):
            changed = True

    module.exit_json(changed=changed, out=out, cmd=cmd, app_path=app_path, virtualenv=virtualenv,
                     settings=module.params['settings'], pythonpath=module.params['pythonpath'])
```"
-------------------------------------------------------------------------
"changed = True
"
-------------------------------------------------------------------------
"Recom
PRs: 46157, 47558"
-------------------------------------------------------------------------
=========================================================================
"import pty
import select
import subprocess
from ansible.module_utils._text import to_native, to_bytes, to_text
"
-------------------------------------------------------------------------
"```python
import os
import __future__
import platform
import re
import time
import shutil
import spwd
import socket
import pwd
import grp
import ansible.module_utils._text
from ansible.module_utils.basic import load_platform_subclass, AnsibleModule
import errno
```"
-------------------------------------------------------------------------
"import pty
import select
import subprocess
from ansible.module_utils._text import to_native, to_bytes, to_text
"
-------------------------------------------------------------------------
"Recom
PRs: 47436, 47487"
-------------------------------------------------------------------------
=========================================================================
"if self.module.check_mode:
    self.module.debug('In check mode, would have run: ""%s""' % cmd)
    return (0, '', '')

master_in_fd, slave_in_fd = pty.openpty()
master_out_fd, slave_out_fd = pty.openpty()
master_err_fd, slave_err_fd = pty.openpty()
env = os.environ.copy()
env['LC_ALL'] = 'C'
try:
    p = subprocess.Popen([to_bytes(c) for c in cmd],
                         stdin=slave_in_fd,
                         stdout=slave_out_fd,
                         stderr=slave_err_fd,
                         preexec_fn=os.setsid,
                         env=env)
    out_buffer = b''
    err_buffer = b''
    while p.poll() is None:
        r, w, e = select.select([master_out_fd, master_err_fd], [], [], 1)
        first_prompt = b'Enter passphrase (empty for no passphrase):'
        second_prompt = b'Enter same passphrase again'
        prompt = first_prompt
        for fd in r:
            if fd == master_out_fd:
                chunk = os.read(master_out_fd, 10240)
                out_buffer = chunk
                if prompt in out_buffer:
                    os.write(master_in_fd, self.ssh_passphrase  b'\r')
                    prompt = second_prompt
            else:
                chunk = os.read(master_err_fd, 10240)
                err_buffer = chunk
                if prompt in err_buffer:
                    os.write(master_in_fd, self.ssh_passphrase  b'\r')
                    prompt = second_prompt
            if b'Overwrite (y/n)?' in out_buffer or b'Overwrite (y/n)?' in err_buffer:
                # This created between us checking for existence and now
                return (None, 'Key already exists', '')

    rc = p.returncode
    out = to_native(out_buffer)
    err = to_native(err_buffer)
except OSError as e:
    return (1, '', to_native(e))
cmd.append('-N')
(rc, out, err) = self.execute_command(cmd)

"
-------------------------------------------------------------------------
"```python
if self.module.check_mode:
    self.module.debug('In check mode, would have run: ""%s""' % cmd)
    return (0, '', '')

master_in_fd, slave_in_fd = pty.openpty()
master_out_fd, slave_out_fd = pty.openpty()
master_err_fd, slave_err_fd = pty.openpty()
env = os.environ.copy()
env['LC_ALL'] = 'C'
try:
    p = subprocess.Popen([to_bytes(c) for c in cmd],
                         stdin=slave_in_fd,
                         stdout=slave_out_fd,
                         stderr=slave_err_fd,
                         preexec_fn=os.setsid,
                         env=env)
    out_buffer = b''
    err_buffer = b''
    while p.poll() is None:
        r, w, e = select.select([master_out_fd, master_err_fd], [], [], 1)
        first_prompt = b'Enter passphrase (empty for no passphrase):'
        second_prompt = b'Enter same passphrase again'
        prompt = first_prompt
        for fd in r:
            if fd == master_out_fd:
                chunk = os.read(master_out_fd, 10240)
                out_buffer = chunk
                if prompt in out_buffer:
                    os.write(master_in_fd, self.ssh_passphrase.encode('utf-8') + b'\r')
                    prompt = second_prompt
            else:
                chunk = os.read(master_err_fd, 10240)
                err_buffer = chunk
                if prompt in err_buffer:
                    os.write(master_in_fd, self.ssh_passphrase.encode('utf-8') + b'\r')
                    prompt = second_prompt
            if b'Overwrite (y/n)?' in out_buffer or b'Overwrite (y/n)?' in err_buffer:
                # This created between us checking for existence and now
                return (None, 'Key already exists', '')

    rc = p.returncode
    out = to_native(out_buffer)
    err = to_native(err_buffer)
except OSError as e:
    return (1, '', to_native(e))
cmd.append('-N')
(rc, out, err) = self.execute_command(cmd)
```"
-------------------------------------------------------------------------
"if self.module.check_mode:
    self.module.debug('In check mode, would have run: ""%s""' % cmd)
    return (0, '', '')

master_in_fd, slave_in_fd = pty.openpty()
master_out_fd, slave_out_fd = pty.openpty()
master_err_fd, slave_err_fd = pty.openpty()
env = os.environ.copy()
env['LC_ALL'] = 'C'
try:
    p = subprocess.Popen([to_bytes(c) for c in cmd],
                         stdin=slave_in_fd,
                         stdout=slave_out_fd,
                         stderr=slave_err_fd,
                         preexec_fn=os.setsid,
                         env=env)
    out_buffer = b''
    err_buffer = b''
    while p.poll() is None:
        r, w, e = select.select([master_out_fd, master_err_fd], [], [], 1)
        first_prompt = b'Enter passphrase (empty for no passphrase):'
        second_prompt = b'Enter same passphrase again'
        prompt = first_prompt
        for fd in r:
            if fd == master_out_fd:
                chunk = os.read(master_out_fd, 10240)
                out_buffer = chunk
                if prompt in out_buffer:
                    os.write(master_in_fd, to_bytes(self.ssh_passphrase, errors='strict')  b'\r')
                    prompt = second_prompt
            else:
                chunk = os.read(master_err_fd, 10240)
                err_buffer = chunk
                if prompt in err_buffer:
                    os.write(master_in_fd, to_bytes(self.ssh_passphrase, errors='strict')  b'\r')
                    prompt = second_prompt
            if b'Overwrite (y/n)?' in out_buffer or b'Overwrite (y/n)?' in err_buffer:
                # The key was created between us checking for existence and now
                return (None, 'Key already exists', '')

    rc = p.returncode
    out = to_native(out_buffer)
    err = to_native(err_buffer)
except OSError as e:
    return (1, '', to_native(e))
cmd.append('-N')
(rc, out, err) = self.execute_command(cmd)

"
-------------------------------------------------------------------------
"Recom
PRs: 47436, 47487"
-------------------------------------------------------------------------
=========================================================================
"if self.parameters.auto_remove:
    output = ""Cannot retrieve result as auto_remove is enabled""
        self.client.module.warn('Cannot output_logs if auto_remove is enabled!')
    config = self.client.inspect_container(container_id)
    logging_driver = config['HostConfig']['LogConfig']['Type']

    if logging_driver == 'json-file' or logging_driver == 'journald':
        output = self.client.logs(container_id, stdout=True, stderr=True, stream=False, timestamps=False)
        if self.parameters.output_logs:
            self._output_logs(msg=output)
    else:
        output = ""Result logged using `%s` driver"" % logging_driver
    self.container_remove(container_id, force=True, ignore_failure=self.parameters.auto_remove)
"
-------------------------------------------------------------------------
"```python
if self.parameters.auto_remove:
    output = ""Cannot retrieve result as auto_remove is enabled""
    self.client.module.warn('Cannot output_logs if auto_remove is enabled!')
    config = self.client.inspect_container(container_id)
    logging_driver = config['HostConfig']['LogConfig']['Type']

    if logging_driver == 'json-file' or logging_driver == 'journald':
        output = self.client.logs(container_id, stdout=True, stderr=True, stream=False, timestamps=False)
        if self.parameters.output_logs:
            self._output_logs(msg=output)
    else:
        output = ""Result logged using `%s` driver"" % logging_driver
    self.container_remove(container_id, force=True, ignore_failure=self.parameters.auto_remove)
```"
-------------------------------------------------------------------------
"if self.parameters.auto_remove:
    output = ""Cannot retrieve result as auto_remove is enabled""
        self.client.module.warn('Cannot output_logs if auto_remove is enabled!')
    config = self.client.inspect_container(container_id)
    logging_driver = config['HostConfig']['LogConfig']['Type']

    if logging_driver == 'json-file' or logging_driver == 'journald':
        output = self.client.logs(container_id, stdout=True, stderr=True, stream=False, timestamps=False)
        if self.parameters.output_logs:
            self._output_logs(msg=output)
    else:
        output = ""Result logged using `%s` driver"" % logging_driver
    self.container_remove(container_id, force=True, ignore_failure=self.parameters.auto_remove)
"
-------------------------------------------------------------------------
"Recom
PRs: 47396, 47485"
-------------------------------------------------------------------------
=========================================================================
"def container_remove(self, container_id, link=False, force=False, ignore_failure=False):
"
-------------------------------------------------------------------------
"```python
def container_remove(self, container_id, link=False, force=False, ignore_failure=False):
    import os
    from docker.utils import types
    from __future__ import 
    import distutils.version
    from ansible.module_utils.docker_common import DockerBaseClass
    import docker.types
    import docker
    import shlex
    import re
    from ansible.module_utils import six
    from ansible.module_utils import basic

    insp = self.inspect_container(container_id)
    if self.parameters.remove:
        remove_volumes = not self.parameters.keep_volumes
        insp = self.get(container_id)
        new_param = {""remove_volumes"": remove_volumes}
        insp.update(new_param)
        self.update_container(container_id, insp)

    return insp

    return self._get_container(container_id)

    volume_state = not self.parameters.keep_volumes
    self.log(""remove container container:%s v:%s link:%s force%s"" % (container_id, volume_state, link, force))
    self.results['actions'].append(dict(removed=container_id, volume_state=volume_state, link=link, force=force))
```"
-------------------------------------------------------------------------
"def container_remove(self, container_id, link=False, force=False, ignore_failure=False):
"
-------------------------------------------------------------------------
"Recom
PRs: 47396, 47485"
-------------------------------------------------------------------------
=========================================================================
"if not ignore_failure:
    self.fail(""Error removing container %s: %s"" % (container_id, str(exc)))
"
-------------------------------------------------------------------------
"```python
if not ignore_failure:
    self.fail(""Error removing container %s: %s"" % (container_id, str(exc)))
```"
-------------------------------------------------------------------------
"if not ignore_failure:
    self.fail(""Error removing container %s: %s"" % (container_id, str(exc)))
"
-------------------------------------------------------------------------
"Recom
PRs: 47396, 47485"
-------------------------------------------------------------------------
=========================================================================
"if self.parameters.auto_remove:
    output = ""Cannot retrieve result as auto_remove is enabled""
        self.client.module.warn('Cannot output_logs if auto_remove is enabled!')
    config = self.client.inspect_container(container_id)
    logging_driver = config['HostConfig']['LogConfig']['Type']

    if logging_driver == 'json-file' or logging_driver == 'journald':
        output = self.client.logs(container_id, stdout=True, stderr=True, stream=False, timestamps=False)
        if self.parameters.output_logs:
            self._output_logs(msg=output)
    else:
        output = ""Result logged using `%s` driver"" % logging_driver
    self.container_remove(container_id, force=True, ignore_failure=self.parameters.auto_remove)
"
-------------------------------------------------------------------------
"```python
if self.parameters.auto_remove:
    output = ""Cannot retrieve result as auto_remove is enabled""
    self.client.module.warn('Cannot output_logs if auto_remove is enabled!')
    config = self.client.inspect_container(container_id)
    logging_driver = config['HostConfig']['LogConfig']['Type']

    if logging_driver == 'json-file' or logging_driver == 'journald':
        output = self.client.logs(container_id, stdout=True, stderr=True, stream=False, timestamps=False)
        if self.parameters.output_logs:
            self._output_logs(msg=output)
    else:
        output = ""Result logged using `%s` driver"" % logging_driver
    self.container_remove(container_id, force=True, ignore_failure=self.parameters.auto_remove)
```"
-------------------------------------------------------------------------
"self.container_remove(container_id, force=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 47396, 47484"
-------------------------------------------------------------------------
=========================================================================
"def container_remove(self, container_id, link=False, force=False, ignore_failure=False):
"
-------------------------------------------------------------------------
"```python
import os
import shlex
import re
from docker.types import Mount
from ansible.module_utils.docker_common import DockerBaseClass

class ContainerManager(DockerBaseClass):
    def container_remove(self, container_id, link=False, force=False, ignore_failure=False):
        volume_state = (not self.parameters.keep_volumes)
        self.log(""remove container container:%s v:%s link:%s force%s"" % (container_id, volume_state, link, force))
        self.results['actions'].append(dict(removed=container_id, volume_state=volume_state, link=link, force=force))
        return insp
        return self._get_container(container_id)
```"
-------------------------------------------------------------------------
"def container_remove(self, container_id, link=False, force=False):
"
-------------------------------------------------------------------------
"Recom
PRs: 47396, 47484"
-------------------------------------------------------------------------
=========================================================================
"params = dict()
for para in ('ipv4_address', 'ipv6_address', 'links', 'aliases'):
    if diff['parameter'].get(para):
        params[para] = diff['parameter'][para]
"
-------------------------------------------------------------------------
"```python
params = {}
for para in ('ipv4_address', 'ipv6_address', 'links', 'aliases'):
    if diff['parameter'].get(para):
        params[para] = diff['parameter'][para]
```"
-------------------------------------------------------------------------
"params = dict()
for para in ('ipv4_address', 'ipv6_address', 'links', 'aliases'):
    if diff['parameter'].get(para):
        params[para] = diff['parameter'][para]
"
-------------------------------------------------------------------------
"Recom
PRs: 47395, 47483"
-------------------------------------------------------------------------
=========================================================================
"ipvX_address_supported = LooseVersion(docker_version) >= LooseVersion('1.9')
if not ipvX_address_supported:
    ipvX_address_used = False
    for network in self.module.params.get(""networks"", []):
        if 'ipv4_address' in network or 'ipv6_address' in network:
            ipvX_address_used = True
    if ipvX_address_used:
        self.fail(""docker or docker-py version is %s. Minimum version required is 1.9 to use ""
                  ""ipv4_address or ipv6_address in networks."" % (docker_version,))

"
-------------------------------------------------------------------------
"```python
runtime_supported = LooseVersion(docker_api_version) >= LooseVersion('1.12')
if self.module.params.get(""runtime"") and not runtime_supported:
    self.fail('docker API version is %s. Minimum version required is 1.12 to set runtime option.' % (docker_api_version,))
```"
-------------------------------------------------------------------------
"ipvX_address_supported = LooseVersion(docker_version) >= LooseVersion('1.9')
if not ipvX_address_supported:
    ipvX_address_used = False
    for network in self.module.params.get(""networks"", []):
        if 'ipv4_address' in network or 'ipv6_address' in network:
            ipvX_address_used = True
    if ipvX_address_used:
        self.fail(""docker or docker-py version is %s. Minimum version required is 1.9 to use ""
                  ""ipv4_address or ipv6_address in networks."" % (docker_version,))

"
-------------------------------------------------------------------------
"Recom
PRs: 47395, 47483"
-------------------------------------------------------------------------
=========================================================================
"params = dict()
for para in ('ipv4_address', 'ipv6_address', 'links', 'aliases'):
    if diff['parameter'].get(para):
        params[para] = diff['parameter'][para]
"
-------------------------------------------------------------------------
"```python
params = dict()
for para in ('ipv4_address', 'ipv6_address', 'links', 'aliases'):
    if diff['parameter'].get(para):
        params[para] = diff['parameter'][para]
```"
-------------------------------------------------------------------------
"params = dict()
for para in ('ipv4_address', 'ipv6_address', 'links', 'aliases'):
    if diff['parameter'].get(para):
        params[para] = diff['parameter'][para]
"
-------------------------------------------------------------------------
"Recom
PRs: 47395, 47482"
-------------------------------------------------------------------------
=========================================================================
"ipvX_address_supported = LooseVersion(docker_version) >= LooseVersion('1.9')
if not ipvX_address_supported:
    ipvX_address_used = False
    for network in self.module.params.get(""networks"", []):
        if 'ipv4_address' in network or 'ipv6_address' in network:
            ipvX_address_used = True
    if ipvX_address_used:
        self.fail(""docker or docker-py version is %s. Minimum version required is 1.9 to use ""
                  ""ipv4_address or ipv6_address in networks."" % (docker_version,))

"
-------------------------------------------------------------------------
"```python
ipvX_address_supported = LooseVersion(docker_version) >= LooseVersion('1.9')
if not ipvX_address_supported:
    ipvX_address_used = False
    for network in self.module.params.get(""networks"", []):
        if 'ipv4_address' in network or 'ipv6_address' in network:
            ipvX_address_used = True
    if ipvX_address_used:
        self.fail(""docker or docker-py version is %s. Minimum version required is 1.9 to use ""
                  ""ipv4_address or ipv6_address in networks."" % (docker_version,))
```"
-------------------------------------------------------------------------
"ipvX_address_supported = LooseVersion(docker_version) >= LooseVersion('1.9')
if not ipvX_address_supported:
    ipvX_address_used = False
    for network in self.module.params.get(""networks"", []):
        if 'ipv4_address' in network or 'ipv6_address' in network:
            ipvX_address_used = True
    if ipvX_address_used:
        self.fail(""docker or docker-py version is %s. Minimum version required is 1.9 to use ""
                  ""ipv4_address or ipv6_address in networks."" % (docker_version,))

"
-------------------------------------------------------------------------
"Recom
PRs: 47395, 47482"
-------------------------------------------------------------------------
=========================================================================
"if differences or self.parameters.force:
"
-------------------------------------------------------------------------
"```python
class DockerVolumeManager(object):
    if differences or self.parameters.force:
```"
-------------------------------------------------------------------------
"if differences or self.parameters.force:
"
-------------------------------------------------------------------------
"Recom
PRs: 47390, 47480"
-------------------------------------------------------------------------
=========================================================================
"if differences or self.parameters.force:
"
-------------------------------------------------------------------------
"```python
if differences or self.parameters.force:
```"
-------------------------------------------------------------------------
"if differences or self.parameters.force:
"
-------------------------------------------------------------------------
"Recom
PRs: 47390, 47479"
-------------------------------------------------------------------------
=========================================================================
"host.link_or_clear_template(host_id, template_ids, tls_connect, tls_accept, tls_psk_identity,
                            tls_psk, tls_issuer, tls_subject, ipmi_authtype, ipmi_privilege,
                            ipmi_username, ipmi_password)
"
-------------------------------------------------------------------------
"```python
from __future__ import print_function
import copy
from ansible.module_utils.basic import AnsibleModule
import zabbix_api

def main():
    host.update_host(host_name, group_ids, status, host_id,
                    interfaces, exist_interfaces, proxy_id, visible_name, description, tls_connect, tls_accept,
                    tls_psk_identity, tls_psk, tls_issuer, tls_subject, ipmi_authtype, ipmi_privilege, ipmi_username, ipmi_password)
    host.update_inventory_mode(host_id, inventory_mode)
    host.update_inventory_zabbix(host_id, inventory_zabbix)
    host.link_or_clear_template(host_id, template_ids, tls_connect, tls_accept, tls_psk_identity,
                                tls_psk, tls_issuer, tls_subject, ipmi_authtype, ipmi_privilege,
                                ipmi_username, ipmi_password)
```"
-------------------------------------------------------------------------
"host.link_or_clear_template(host_id, template_ids, tls_connect, tls_accept, tls_psk_identity,
                            tls_psk, tls_issuer, tls_subject, ipmi_authtype, ipmi_privilege,
                            ipmi_username, ipmi_password)
"
-------------------------------------------------------------------------
"Recom
PRs: 46521, 47477"
-------------------------------------------------------------------------
=========================================================================
"host.link_or_clear_template(host_id, template_ids, tls_connect, tls_accept, tls_psk_identity,
                            tls_psk, tls_issuer, tls_subject, ipmi_authtype, ipmi_privilege,
                            ipmi_username, ipmi_password)
"
-------------------------------------------------------------------------
"```python
from __future__ import print_function, absolute_import
import copy
from ansible.module_utils.basic import AnsibleModule
from zabbix_api import ZabbixAPI

def main():
    host.update_host(host_name, group_ids, status, host_id,
                     interfaces, exist_interfaces, proxy_id, visible_name, description, tls_connect, tls_accept,
                     tls_psk_identity, tls_psk, tls_issuer, tls_subject, ipmi_authtype, ipmi_privilege, ipmi_username, ipmi_password)
    host.update_inventory_mode(host_id, inventory_mode)
    host.update_inventory_zabbix(host_id, inventory_zabbix)
    
    host.link_or_clear_template(host_id, template_ids, tls_connect, tls_accept, tls_psk_identity,
                                tls_psk, tls_issuer, tls_subject, ipmi_authtype, ipmi_privilege,
                                ipmi_username, ipmi_password)
```  "
-------------------------------------------------------------------------
"host.link_or_clear_template(host_id, template_ids, tls_connect, tls_accept, tls_psk_identity,
                            tls_psk, tls_issuer, tls_subject, ipmi_authtype, ipmi_privilege,
                            ipmi_username, ipmi_password)
"
-------------------------------------------------------------------------
"Recom
PRs: 46521, 47476"
-------------------------------------------------------------------------
=========================================================================
"from docker.errors import NotFound
"
-------------------------------------------------------------------------
"```python
try:
    from docker.errors import NotFound
    from docker import utils
    if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
        from docker.types import IPAMPool, IPAMConfig
except Exception as dummy:
```"
-------------------------------------------------------------------------
"from docker.errors import NotFound
"
-------------------------------------------------------------------------
"Recom
PRs: 43997, 47472"
-------------------------------------------------------------------------
=========================================================================
"try:
    return self.client.inspect_network(self.parameters.network_name)
except NotFound:
"
-------------------------------------------------------------------------
"```python
try:
    return self.client.inspect_network(self.parameters.network_name)
except NotFound:
    pass
```"
-------------------------------------------------------------------------
"try:
    return self.client.inspect_network(self.parameters.network_name)
except NotFound:
"
-------------------------------------------------------------------------
"Recom
PRs: 43997, 47472"
-------------------------------------------------------------------------
=========================================================================
"from docker.errors import NotFound
"
-------------------------------------------------------------------------
from docker.exceptions import NotFound
-------------------------------------------------------------------------
"from docker.errors import NotFound
"
-------------------------------------------------------------------------
"Recom
PRs: 43997, 47471"
-------------------------------------------------------------------------
=========================================================================
"try:
    return self.client.inspect_network(self.parameters.network_name)
except NotFound:
"
-------------------------------------------------------------------------
"```python
try:
    return self.client.inspect_network(self.parameters.network_name)
except NotFound:
    pass
```"
-------------------------------------------------------------------------
"try:
    return self.client.inspect_network(self.parameters.network_name)
except NotFound:
"
-------------------------------------------------------------------------
"Recom
PRs: 43997, 47471"
-------------------------------------------------------------------------
=========================================================================
"in_brackets = False
    if _is_package_name(name) and not in_brackets:
    if ""["" in name:
        in_brackets = True
    if in_brackets and ""]"" in name:
        in_brackets = False
"
-------------------------------------------------------------------------
"```python
    in_brackets = False
    if _is_package_name(name) and not in_brackets:
        if ""["" in name:
            in_brackets = True
        if in_brackets and ""]"" in name:
            in_brackets = False
```"
-------------------------------------------------------------------------
"in_brackets = False
    if _is_package_name(name) and not in_brackets:
    if ""["" in name:
        in_brackets = True
    if in_brackets and ""]"" in name:
        in_brackets = False
"
-------------------------------------------------------------------------
"Recom
PRs: 46937, 47449"
-------------------------------------------------------------------------
=========================================================================
"self._requirement.project_name = ""setuptools""
"
-------------------------------------------------------------------------
"```python
self._requirement.project_name = ""setuptools""
```"
-------------------------------------------------------------------------
"self._requirement.project_name = ""setuptools""
"
-------------------------------------------------------------------------
"Recom
PRs: 46937, 47449"
-------------------------------------------------------------------------
=========================================================================
"packages[0] = Package(to_native(packages[0]), version)
"
-------------------------------------------------------------------------
packages[0] = Package(to_native(packages[0]))
-------------------------------------------------------------------------
"packages[0] = Package(to_native(packages[0]), version)
"
-------------------------------------------------------------------------
"Recom
PRs: 46937, 47449"
-------------------------------------------------------------------------
=========================================================================
"temp_file = NamedTemporaryFile(mode='w', dir=module.tmpdir, delete=False)
"
-------------------------------------------------------------------------
"```python
temp_file = tempfile.NamedTemporaryFile(mode='w', dir=module.tmpdir, delete=False)
```"
-------------------------------------------------------------------------
"temp_file = NamedTemporaryFile(mode='w', dir=module.tmpdir, delete=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 47281, 47438"
-------------------------------------------------------------------------
=========================================================================
"
self._populate(results, hostnames)
    self.cache.set(cache_key, results)
"
-------------------------------------------------------------------------
"```python
self._populate(results, hostnames)
self.cache.set(cache_key, results)
```"
-------------------------------------------------------------------------
"
self._populate(results, hostnames)
    self.cache.set(cache_key, results)
"
-------------------------------------------------------------------------
"Recom
PRs: 46961, 47422"
-------------------------------------------------------------------------
=========================================================================
"- If not set, the value will be remain the same if container exists and will be inherited from the host machine if it is (re-)created.
"
-------------------------------------------------------------------------
"If not set, the value will remain the same if the container exists and will be inherited from the host machine if it is (re-)created."
-------------------------------------------------------------------------
"- If not set, the value will be remain the same if container exists and will be inherited from the host machine if it is (re-)created.
"
-------------------------------------------------------------------------
"Recom
PRs: 47296, 47379"
-------------------------------------------------------------------------
=========================================================================
"- If not set, the value will be remain the same if container exists and will be inherited from the host machine if it is (re-)created.
"
-------------------------------------------------------------------------
"If not set, the value will remain the same if the container exists and will be inherited from the host machine if it is (re-)created."
-------------------------------------------------------------------------
"- If not set, the value will be remain the same if container exists and will be inherited from the host machine if it is (re-)created.
"
-------------------------------------------------------------------------
"Recom
PRs: 47296, 47378"
-------------------------------------------------------------------------
=========================================================================
"loop_cache = self._job_vars.get('_ansible_loop_cache')
if loop_cache is not None:
    # _ansible_loop_cache may be set in `get_vars` when calculating `delegate_to`
    # to avoid reprocessing the loop
    items = loop_cache
elif self._task.loop_with:
"
-------------------------------------------------------------------------
"```python
loop_cache = self._job_vars.get('_ansible_loop_cache')
if loop_cache is not None:
    items = loop_cache
elif self._task.loop_with:
```"
-------------------------------------------------------------------------
"loop_cache = self._job_vars.get('_ansible_loop_cache')
if loop_cache is not None:
    # _ansible_loop_cache may be set in `get_vars` when calculating `delegate_to`
    # to avoid reprocessing the loop
    items = loop_cache
elif self._task.loop_with:
"
-------------------------------------------------------------------------
"Recom
PRs: 47243, 47314"
-------------------------------------------------------------------------
=========================================================================
"all_vars['ansible_delegated_vars'], all_vars['_ansible_loop_cache'] = self._get_delegated_vars(play, task, all_vars)
"
-------------------------------------------------------------------------
"```python
all_vars['ansible_delegated_vars'], all_vars['_ansible_loop_cache'] = self._get_delegated_vars(play, task, all_vars, include_delegate_to=True)
```   "
-------------------------------------------------------------------------
"all_vars['ansible_delegated_vars'], all_vars['_ansible_loop_cache'] = self._get_delegated_vars(play, task, all_vars)
"
-------------------------------------------------------------------------
"Recom
PRs: 47243, 47314"
-------------------------------------------------------------------------
=========================================================================
"_ansible_loop_cache = None
    # delegate_to templating produced a change, so we will cache the templated items
    # in a special private hostvar
    _ansible_loop_cache = items
return delegated_host_vars, _ansible_loop_cache
"
-------------------------------------------------------------------------
"```python
_ansible_loop_cache = None
    # delegate_to templating produced a change, so we will cache the templated items
    # in a special private hostvar
    _ansible_loop_cache = items
return delegated_host_vars, _ansible_loop_cache
```"
-------------------------------------------------------------------------
"_ansible_loop_cache = None
    # delegate_to templating produced a change, so we will cache the templated items
    # in a special private hostvar
    _ansible_loop_cache = items
return delegated_host_vars, _ansible_loop_cache
"
-------------------------------------------------------------------------
"Recom
PRs: 47243, 47314"
-------------------------------------------------------------------------
=========================================================================
"re.compile(br""[\r\n]?[\w@\-\.:\/\[\]][>#%] ?$""),
"
-------------------------------------------------------------------------
"```python
import re

class TerminalModule(TerminalBase):

    terminal_stdout_re = [
        re.compile(br""[\r\n]?[\w@\-\.:\/\[\]][>#%] ?$"")
    ]

    terminal_stderr_re = [
    ]
```"
-------------------------------------------------------------------------
"re.compile(br""[\r\n]?[\w@\-\.:\/\[\]][>#%] ?$""),
"
-------------------------------------------------------------------------
"Recom
PRs: 47096, 47204"
-------------------------------------------------------------------------
=========================================================================
"re.compile(br""[\r\n]?[\w@\-\.:\/\[\]][>#%] ?$""),
"
-------------------------------------------------------------------------
"```python
import re

class TerminalModule(TerminalBase):

    terminal_stdout_re = [
        re.compile(br""[\r\n]?[\w@\-\.:\/\[\]][>#%] ?$"")
    ]

    terminal_stderr_re = [
    ]
```"
-------------------------------------------------------------------------
"re.compile(br""[\r\n]?[\w@\-\.:\/\[\]][>#%] ?$""),
"
-------------------------------------------------------------------------
"Recom
PRs: 47096, 47203"
-------------------------------------------------------------------------
=========================================================================
"try:
    if secure != 'never':
        try:
            smtp = smtplib.SMTP_SSL(timeout=timeout)
            code, smtpmessage = smtp.connect(host, port=port)
            secure_state = True
        except ssl.SSLError as e:
            if secure == 'always':
                                           (host, port, to_native(e)), exception=traceback.format_exc())
    if not secure_state:
        smtp = smtplib.SMTP(timeout=timeout)
except smtplib.SMTPException as e:
    module.fail_json(rc=1, msg='Unable to Connect %s:%s: %s' % (host, port, to_native(e)), exception=traceback.format_exc())
if int(code) > 0:
    if not secure_state and secure in ('starttls', 'try'):
"
-------------------------------------------------------------------------
"```python
try:
    if secure != 'never':
        try:
            if secure == 'always' or secure == 'try':
                smtp = smtplib.SMTP(timeout=timeout)
            else:
                smtp = smtplib.SMTP_SSL(timeout=timeout)
            code, smtpmessage = smtp.connect(host, port=port)
            secure_state = True
        except ssl.SSLError as e:
            if secure == 'always':
                module.fail_json(rc=1, msg='Unable to Connect %s:%s: %s' % (host, port, to_native(e)), exception=traceback.format_exc())
except smtplib.SMTPException as e:
    module.fail_json(rc=1, msg='Unable to Connect %s:%s: %s' % (host, port, to_native(e)), exception=traceback.format_exc())
if int(code) > 0:
    if not secure_state and secure == 'starttls':
```"
-------------------------------------------------------------------------
"except:
    pass
"
-------------------------------------------------------------------------
"Recom
PRs: 37098, 47019"
-------------------------------------------------------------------------
=========================================================================
"# On Solaris 8 the prtdiag wrapper is absent from /usr/sbin,
# but that's okay, because we know where to find the real thing:
rc, platform, err = self.module.run_command('/usr/bin/uname -i')
platform_sbin = '/usr/platform/'  platform.rstrip()  '/sbin'

prtdiag_path = self.module.get_bin_path(""prtdiag"", opt_dirs=[platform_sbin])
rc, out, err = self.module.run_command(prtdiag_path)
"
-------------------------------------------------------------------------
"```python
# On Solaris 8 the prtdiag wrapper is absent from /usr/sbin,
# but that's okay, because we know where to find the real thing:
rc, platform, err = self.module.run_command('/usr/bin/uname -i')
platform_sbin = '/usr/platform/' + platform.rstrip() + '/sbin'

prtdiag_path = self.module.get_bin_path(""prtdiag"", opt_dirs=[platform_sbin])
rc, out, err = self.module.run_command(prtdiag_path)
```"
-------------------------------------------------------------------------
"# On Solaris 8 the prtdiag wrapper is absent from /usr/sbin,
# but that's okay, because we know where to find the real thing:
rc, platform, err = self.module.run_command('/usr/bin/uname -i')
platform_sbin = '/usr/platform/'  platform.rstrip()  '/sbin'

prtdiag_path = self.module.get_bin_path(""prtdiag"", opt_dirs=[platform_sbin])
rc, out, err = self.module.run_command(prtdiag_path)
"
-------------------------------------------------------------------------
"Recom
PRs: 44113, 46946"
-------------------------------------------------------------------------
=========================================================================
"'ip4': self.ip4 or '',
'gw4': self.gw4 or '',
'ip6': self.ip6 or '',
'gw6': self.gw6 or '',
"
-------------------------------------------------------------------------
"```python
'ip4': self.ip4 if self.ip4 else '',
'gw4': self.gw4 if self.gw4 else '',
'ip6': self.ip6 if self.ip6 else '',
'gw6': self.gw6 if self.gw6 else '',
```"
-------------------------------------------------------------------------
"'ip4': self.ip4 or '',
'gw4': self.gw4 or '',
'ip6': self.ip6 or '',
'gw6': self.gw6 or '',
"
-------------------------------------------------------------------------
"Recom
PRs: 42415, 46814"
-------------------------------------------------------------------------
=========================================================================
"
if self.conn_name is not None:
    cmd.append(self.conn_name)
elif self.ifname is not None:
    cmd.append(self.ifname)
else:
    cmd.append('vlan%s' % self.vlanid)
          'ipv4.address': self.ip4 or '',
          'ipv4.gateway': self.gw4 or '',
          'ipv4.dns': self.dns4 or '',
          'ipv6.address': self.ip6 or '',
          'ipv6.gateway': self.gw6 or '',
          'ipv6.dns': self.dns6 or '',
"
-------------------------------------------------------------------------
"```python
if self.conn_name is not None:
    cmd.append(self.conn_name)
elif self.ifname is not None:
    cmd.append(self.ifname)
else:
    cmd.append('vlan%s' % self.vlanid)

params.update({
    'ipv4.address': self.ip4 or '',
    'ipv4.gateway': self.gw4 or '',
    'ipv4.dns': self.dns4 or '',
    'ipv6.address': self.ip6 or '',
    'ipv6.gateway': self.gw6 or '',
    'ipv6.dns': self.dns6 or ''
})
```"
-------------------------------------------------------------------------
"
if self.conn_name is not None:
    cmd.append(self.conn_name)
elif self.ifname is not None:
    cmd.append(self.ifname)
else:
    cmd.append('vlan%s' % self.vlanid)
          'ipv4.address': self.ip4 or '',
          'ipv4.gateway': self.gw4 or '',
          'ipv4.dns': self.dns4 or '',
          'ipv6.address': self.ip6 or '',
          'ipv6.gateway': self.gw6 or '',
          'ipv6.dns': self.dns6 or '',
"
-------------------------------------------------------------------------
"Recom
PRs: 42415, 46814"
-------------------------------------------------------------------------
=========================================================================
"assert args[0][0] == '/usr/bin/nmcli'
assert args[0][1] == 'con'
assert args[0][2] == 'add'
assert args[0][3] == 'type'
assert args[0][4] == 'vlan'
assert args[0][5] == 'con-name'
assert args[0][6] == 'non_existent_nw_device'

for param in ['ip4', '10.10.10.10', 'gw4', '10.10.10.1']:
"
-------------------------------------------------------------------------
"```python
assert args[0][0] == '/usr/bin/nmcli'
assert args[0][1] == 'con'
assert args[0][2] == 'add'
assert args[0][3] == 'type'
assert args[0][4] == 'vlan'
assert args[0][5] == 'con-name'
assert args[0][6] == 'non_existent_nw_device'

for param in ['ip4', '10.10.10.10', 'gw4', '10.10.10.1']:
    assert param in args[0]
```"
-------------------------------------------------------------------------
"assert args[0][0] == '/usr/bin/nmcli'
assert args[0][1] == 'con'
assert args[0][2] == 'add'
assert args[0][3] == 'type'
assert args[0][4] == 'vlan'
assert args[0][5] == 'con-name'
assert args[0][6] == 'non_existent_nw_device'

for param in ['ip4', '10.10.10.10', 'gw4', '10.10.10.1']:
"
-------------------------------------------------------------------------
"Recom
PRs: 42415, 46814"
-------------------------------------------------------------------------
=========================================================================
"assert args[0][0] == '/usr/bin/nmcli'
assert args[0][1] == 'con'
assert args[0][2] == 'mod'
assert args[0][3] == 'non_existent_nw_device'

for param in ['ipv4.address', '10.10.10.10', 'ipv4.gateway', '10.10.10.1']:
"
-------------------------------------------------------------------------
"```python
assert args[0][0] == '/usr/bin/nmcli'
assert args[0][1] == 'con'
assert args[0][2] == 'mod'
assert args[0][3] == 'non_existent_nw_device'

for param in ['ipv4.address', '10.10.10.10', 'ipv4.gateway', '10.10.10.1']:
    assert param in args[0]
```"
-------------------------------------------------------------------------
"assert args[0][0] == '/usr/bin/nmcli'
assert args[0][1] == 'con'
assert args[0][2] == 'mod'
assert args[0][3] == 'non_existent_nw_device'

for param in ['ipv4.address', '10.10.10.10', 'ipv4.gateway', '10.10.10.1']:
"
-------------------------------------------------------------------------
"Recom
PRs: 42415, 46814"
-------------------------------------------------------------------------
=========================================================================
"_VALID_ARGS = frozenset(('connect_timeout', 'msg', 'post_reboot_delay', 'pre_reboot_delay', 'test_command', 'reboot_timeout'))
"
-------------------------------------------------------------------------
"_VALID_ARGS = frozenset(('connect_timeout', 'msg', 'post_reboot_delay', 'pre_reboot_delay', 'test_command', 'reboot_timeout'))"
-------------------------------------------------------------------------
"_VALID_ARGS = frozenset(('connect_timeout', 'msg', 'post_reboot_delay', 'pre_reboot_delay', 'test_command', 'reboot_timeout'))
"
-------------------------------------------------------------------------
"Recom
PRs: 46585, 46651"
-------------------------------------------------------------------------
=========================================================================
"- A value of C(all) will publish all exposed container ports to random host ports, ignoring
"
-------------------------------------------------------------------------
"Ensure the CLI syntax is updated accordingly in the code snippet as below:

```python
# A value of C(all) will publish all exposed container ports to random host ports, ignoring
options:
   - ""Use docker CLI syntax: `C(8000)`, `C(9000:8000)`, or `C(0.0.0.0:9000:8000)`, where 8000 is a
     container port, 9000 is a host port, and 0.0.0.0 is a host interface.""
   - Container ports must be exposed either in the Dockerfile or via the C(expose) option.
   - If C(networks) parameter is provided, will inspect each network to see if there exists
     a bridge network with optional parameter com.docker.network.bridge.host_binding_ipv4.
```"
-------------------------------------------------------------------------
"comparisons['expected_ports'] = dict(type='dict', comparison=comparisons['published_ports']['comparison'], name='expected_ports')
"
-------------------------------------------------------------------------
"Recom
PRs: 46594, 46640"
-------------------------------------------------------------------------
=========================================================================
"# version comparison. Otherwise we handle this depending on whether
# the container already runs or not; in the former case, in case the
# container needs to be restarted, we use the existing container's
# image ID.
image = self._get_image()
self.log(image, pretty_print=True)
if not container.exists:
    # New container
    self.log('No container found')
    if not self.parameters.image:
        self.fail('Cannot create container when image is not specified!')
    new_container = self.container_create(self.parameters.image, self.parameters.create_parameters)
    if new_container:
        container = new_container
else:
    # Existing container
    different, differences = container.has_different_configuration(image)
    image_different = False
    if self.parameters.comparisons['image']['comparison'] == 'strict':
        image_different = self._image_is_different(image, container)
    if image_different or different or self.parameters.recreate:
        self.diff['differences'] = differences
        if image_different:
            self.diff['image_different'] = True
        self.log(""differences"")
        self.log(differences, pretty_print=True)
        image_to_use = self.parameters.image
        if not image_to_use and container and container.Image:
            image_to_use = container.Image
        if not image_to_use:
            self.fail('Cannot recreate container when image is not specified or cannot be extracted from current container!')
        if container.running:
            self.container_stop(container.Id)
        self.container_remove(container.Id)
        new_container = self.container_create(image_to_use, self.parameters.create_parameters)
"
-------------------------------------------------------------------------
"```python
image = self._get_image()
self.log(image, pretty_print=True)

if not container.exists:
    # New container
    self.log('No container found')
    if not self.parameters.image:
        self.fail('Cannot create container when image is not specified!')
    new_container = self.container_create(self.parameters.image, self.parameters.create_parameters)
    if new_container:
        container = new_container
else:
    # Existing container
    different, differences = container.has_different_configuration(image)
    image_different = False
    if self.parameters.comparisons['image']['comparison'] == 'strict':
        image_different = self._image_is_different(image, container)
    if image_different or different or self.parameters.recreate:
        self.diff['differences'] = differences
        if image_different:
            self.diff['image_different'] = True
        self.log(""differences"")
        self.log(differences, pretty_print=True)
        image_to_use = self.parameters.image
        if not image_to_use and container and container.Image:
            image_to_use = container.Image
        if not image_to_use:
            self.fail('Cannot recreate container when image is not specified or cannot be extracted from the current container!')
        if container.running:
            self.container_stop(container.Id)
        self.container_remove(container.Id)
        new_container = self.container_create(image_to_use, self.parameters.create_parameters)
```"
-------------------------------------------------------------------------
"
# If the image parameter was passed then we need to deal with the image
# version comparison. Otherwise we handle this depending on whether
# the container already runs or not; in the former case, in case the
# container needs to be restarted, we use the existing container's
# image ID.
    if not self.parameters.image:
        self.fail('Cannot create container when image is not specified!')
"
-------------------------------------------------------------------------
"Recom
PRs: 46322, 46576"
-------------------------------------------------------------------------
=========================================================================
"# version comparison. Otherwise we handle this depending on whether
# the container already runs or not; in the former case, in case the
# container needs to be restarted, we use the existing container's
# image ID.
image = self._get_image()
self.log(image, pretty_print=True)
if not container.exists:
    # New container
    self.log('No container found')
    if not self.parameters.image:
        self.fail('Cannot create container when image is not specified!')
    new_container = self.container_create(self.parameters.image, self.parameters.create_parameters)
    if new_container:
        container = new_container
else:
    # Existing container
    different, differences = container.has_different_configuration(image)
    image_different = False
    if self.parameters.comparisons['image']['comparison'] == 'strict':
        image_different = self._image_is_different(image, container)
    if image_different or different or self.parameters.recreate:
        self.diff['differences'] = differences
        if image_different:
            self.diff['image_different'] = True
        self.log(""differences"")
        self.log(differences, pretty_print=True)
        image_to_use = self.parameters.image
        if not image_to_use and container and container.Image:
            image_to_use = container.Image
        if not image_to_use:
            self.fail('Cannot recreate container when image is not specified or cannot be extracted from current container!')
        if container.running:
            self.container_stop(container.Id)
        self.container_remove(container.Id)
        new_container = self.container_create(image_to_use, self.parameters.create_parameters)
"
-------------------------------------------------------------------------
"```python
image = self._get_image()
self.log(image, pretty_print=True)
if not container.exists:
    # New container
    self.log('No container found')
    if not self.parameters.image:
        self.fail('Cannot create container when image is not specified!')
    new_container = self.container_create(self.parameters.image, self.parameters.create_parameters)
    if new_container:
        container = new_container
else:
    # Existing container
    different, differences = container.has_different_configuration(image)
    image_different = False
    if self.parameters.comparisons['image']['comparison'] == 'strict':
        image_different = self._image_is_different(image, container)
    if image_different or different or self.parameters.recreate:
        self.diff['differences'] = differences
        if image_different:
            self.diff['image_different'] = True
        self.log(""differences"")
        self.log(differences, pretty_print=True)
        image_to_use = self.parameters.image
        if not image_to_use and container and container.Image:
            image_to_use = container.Image
        if not image_to_use:
            self.fail('Cannot recreate container when image is not specified or cannot be extracted from current container!')
        if container.running:
            self.container_stop(container.Id)
        self.container_remove(container.Id)
        new_container = self.container_create(image_to_use, self.parameters.create_parameters)
```"
-------------------------------------------------------------------------
"# version comparison. Otherwise we handle this depending on whether
# the container already runs or not; in the former case, in case the
# container needs to be restarted, we use the existing container's
# image ID.
image = self._get_image()
self.log(image, pretty_print=True)
if not container.exists:
    # New container
    self.log('No container found')
    if not self.parameters.image:
        self.fail('Cannot create container when image is not specified!')
    new_container = self.container_create(self.parameters.image, self.parameters.create_parameters)
    if new_container:
        container = new_container
else:
    # Existing container
    different, differences = container.has_different_configuration(image)
    image_different = False
    if self.parameters.comparisons['image']['comparison'] == 'strict':
        image_different = self._image_is_different(image, container)
    if image_different or different or self.parameters.recreate:
        self.diff['differences'] = differences
        if image_different:
            self.diff['image_different'] = True
        self.log(""differences"")
        self.log(differences, pretty_print=True)
        image_to_use = self.parameters.image
        if not image_to_use and container and container.Image:
            image_to_use = container.Image
        if not image_to_use:
            self.fail('Cannot recreate container when image is not specified or cannot be extracted from current container!')
        if container.running:
            self.container_stop(container.Id)
        self.container_remove(container.Id)
        new_container = self.container_create(image_to_use, self.parameters.create_parameters)
"
-------------------------------------------------------------------------
"Recom
PRs: 46322, 46575"
-------------------------------------------------------------------------
=========================================================================
"- On macOS, this module uses C(dscl) to create, modify, and delete accounts. C(dseditgroup) is used to
  modify group membership. Accounts are hidden from the login window by modifying
  C(/Library/Preferences/com.apple.loginwindow.plist).
- On FreeBSD, this module uses C(pw useradd) and C(chpass) to create, C(pw usermod) and C(chpass) to modify,
  C(pw userdel) remove, C(pw lock) to lock, and C(pw unlock) to unlock accounts.
- On all other platforms, this module uses C(useradd) to create, C(usermod) to modify, and
  C(userdel) to remove accounts.
"
-------------------------------------------------------------------------
"On macOS, this module uses C(dscl) to create, modify, and delete accounts. C(dseditgroup) is used to modify group membership. Accounts are hidden from the login window by modifying C(/Library/Preferences/com.apple.loginwindow.plist).

On FreeBSD, this module uses C(pw useradd) and C(chpass) to create, C(pw usermod) and C(chpass) to modify, C(pw userdel) to remove, C(pw lock) to lock, and C(pw unlock) to unlock accounts.

On Windows targets, use the M(win_user) module instead."
-------------------------------------------------------------------------
"- On SunOS platforms, the shadow file is backed up automatically since this module edits it directly.
  On other platforms, the shadow file is backed up by the underlying tools used by this module.
- On macOS, this module uses C(dscl) to create, modify, and delete accounts. C(dseditgroup) is used to
  modify group membership. Accounts are hidden from the login window by modifying
  C(/Library/Preferences/com.apple.loginwindow.plist).
- On FreeBSD, this module uses C(pw useradd) and C(chpass) to create, C(pw usermod) and C(chpass) to modify,
  C(pw userdel) remove, C(pw lock) to lock, and C(pw unlock) to unlock accounts.
- On all other platforms, this module uses C(useradd) to create, C(usermod) to modify, and
  C(userdel) to remove accounts.
"
-------------------------------------------------------------------------
"Recom
PRs: 46455, 46512"
-------------------------------------------------------------------------
=========================================================================
"- On other operating systems, the default shell is determined by the underlying tool being
  used. See Notes for details.
"
-------------------------------------------------------------------------
"- On other operating systems, the default shell is determined by the underlying tool being used. See Notes for details."
-------------------------------------------------------------------------
"- macOS only, optionally hide the user from the login window and system preferences.
"
-------------------------------------------------------------------------
"Recom
PRs: 46455, 46512"
-------------------------------------------------------------------------
=========================================================================
"- On macOS, this module uses C(dscl) to create, modify, and delete accounts. C(dseditgroup) is used to
  modify group membership. Accounts are hidden from the login window by modifying
  C(/Library/Preferences/com.apple.loginwindow.plist).
- On FreeBSD, this module uses C(pw useradd) and C(chpass) to create, C(pw usermod) and C(chpass) to modify,
  C(pw userdel) remove, C(pw lock) to lock, and C(pw unlock) to unlock accounts.
- On all other platforms, this module uses C(useradd) to create, C(usermod) to modify, and
  C(userdel) to remove accounts.
"
-------------------------------------------------------------------------
"```python
  # On macOS, this module uses dscl to create, modify, and delete accounts.
  # dseditgroup is used to modify group membership. Accounts are hidden from the login window by modifying
  # /Library/Preferences/com.apple.loginwindow.plist.
  # On FreeBSD, this module uses pw useradd and chpass to create, pw usermod and chpass to modify,
  # pw userdel to remove, pw lock to lock, and pw unlock to unlock accounts.
  # On all other platforms, this module uses useradd to create, usermod to modify, and
  # userdel to remove accounts.
```"
-------------------------------------------------------------------------
"- On macOS, this module uses C(dscl) to create, modify, and delete accounts. C(dseditgroup) is used to
  modify group membership. Accounts are hidden from the login window by modifying
  C(/Library/Preferences/com.apple.loginwindow.plist).
- On FreeBSD, this module uses C(pw useradd) and C(chpass) to create, C(pw usermod) and C(chpass) to modify,
  C(pw userdel) remove, C(pw lock) to lock, and C(pw unlock) to unlock accounts.
- On all other platforms, this module uses C(useradd) to create, C(usermod) to modify, and
  C(userdel) to remove accounts.
"
-------------------------------------------------------------------------
"Recom
PRs: 46455, 46511"
-------------------------------------------------------------------------
=========================================================================
"- On other operating systems, the default shell is determined by the underlying tool being
  used. See Notes for details.
"
-------------------------------------------------------------------------
"On other operating systems, the default shell is determined by the underlying tool being used. See Notes for details."
-------------------------------------------------------------------------
"- On other operating systems, the default shell is determined by the underlying tool being
  used. See Notes for details.
"
-------------------------------------------------------------------------
"Recom
PRs: 46455, 46511"
-------------------------------------------------------------------------
=========================================================================
"if index[1] <= 0:
"
-------------------------------------------------------------------------
"```python
if insertbefore and insertbefore != 'BOF':
    # If the line to insert before is at the beginning of the file
    # use the appropriate index value.
    if index[1] <= 0:
        if b_lines[index[1]].rstrip(b('\r\n')) != b_line:
            b_lines.insert(index[1], b_line + b_linesep)
            msg = 'line replaced'
```"
-------------------------------------------------------------------------
"if index[1] <= 0:
"
-------------------------------------------------------------------------
"Recom
PRs: 46071, 46487"
-------------------------------------------------------------------------
=========================================================================
"if index[1] <= 0:
"
-------------------------------------------------------------------------
"```python
elif insertbefore and insertbefore != 'BOF':
    # If the line to insert before is at the beginning of the file
    # use the appropriate index value.
    if index[1] <= 0:
        if b_lines[index[1]] != b_line:
            b_lines.insert(index[1], b_line + b_linesep)
            msg = 'line replaced'
```"
-------------------------------------------------------------------------
"if index[1] <= 0:
"
-------------------------------------------------------------------------
"Recom
PRs: 46071, 46486"
-------------------------------------------------------------------------
=========================================================================
"if module.params['scope'] in (None, 'system') and \
        not out.strip().endswith('disabled') and \
        sysv_is_enabled(unit):
"
-------------------------------------------------------------------------
"```python
if module.params['scope'] in (None, 'system') and \
        not out.strip().endswith('disabled') and \
        sysv_is_enabled(unit):
```"
-------------------------------------------------------------------------
"if module.params['scope'] in (None, 'system') and \
        not out.strip().endswith('disabled') and \
        sysv_is_enabled(unit):
"
-------------------------------------------------------------------------
"Recom
PRs: 46245, 46318"
-------------------------------------------------------------------------
=========================================================================
"if module.params['scope'] in (None, 'system') and \
        not out.strip().endswith('disabled') and \
        sysv_is_enabled(unit):
"
-------------------------------------------------------------------------
"```python
if module.params['scope'] in (None, 'system') and \
        not out.strip().endswith('disabled') and \
        sysv_is_enabled(unit):
    enabled = True
```"
-------------------------------------------------------------------------
"not out.strip().endswith('disabled') and \
sysv_is_enabled(unit):
"
-------------------------------------------------------------------------
"Recom
PRs: 46245, 46317"
-------------------------------------------------------------------------
=========================================================================
"- On Linux, macOS and OpenBSD, this is converted to minutes and rounded down. If less than 60, it will be set to 0.
"
-------------------------------------------------------------------------
"```python
options:
  pre_reboot_delay:
    description:
      - Seconds for shutdown to wait before requesting reboot.
      - On Solaris and FreeBSD, this will be seconds.
      - On Linux, macOS and OpenBSD, this is converted to minutes and rounded down. If less than 60, it will be set to 0.
    default: 0
    type: int
```"
-------------------------------------------------------------------------
"- On Linux, macOS, and OpenBSD this is converted to minutes and rounded down. If less than 60, it will be set to 0.
- On Solaris and FreeBSD this will be seconds.
"
-------------------------------------------------------------------------
"Recom
PRs: 46147, 46289"
-------------------------------------------------------------------------
=========================================================================
"BOOT_TIME_COMMANDS = {
    'openbsd': ""/sbin/sysctl kern.boottime"",
}

    'openbsd': DEFAULT_SHUTDOWN_COMMAND,
    'darwin': '-r {delay_min_macos} ""{message}""',
    'openbsd': '-r {delay_min} ""{message}""',
"
-------------------------------------------------------------------------
"```python
BOOT_TIME_COMMANDS = {
    'openbsd': ""/sbin/sysctl kern.boottime"",
}

SHUTDOWN_COMMANDS = {
    'linux': DEFAULT_SHUTDOWN_COMMAND,
    'freebsd': DEFAULT_SHUTDOWN_COMMAND,
    'sunos': '/usr/sbin/shutdown',
    'darwin': '-r {delay_min_macos} ""{message}""',
    'openbsd': '-r {delay_min} ""{message}""',
}
```"
-------------------------------------------------------------------------
"BOOT_TIME_COMMANDS = {
    'openbsd': ""/sbin/sysctl kern.boottime"",
}

    'openbsd': DEFAULT_SHUTDOWN_COMMAND,
    'darwin': '-r {delay_min_macos} ""{message}""',
    'openbsd': '-r {delay_min} ""{message}""',
"
-------------------------------------------------------------------------
"Recom
PRs: 46147, 46289"
-------------------------------------------------------------------------
=========================================================================
"
# Determine the system distribution in order to use the correct shutdown command arguments
uname_result = self._low_level_execute_command('uname')
distribution = uname_result['stdout'].strip().lower()

boot_time_command = self.BOOT_TIME_COMMANDS.get(distribution, self.DEFAULT_BOOT_TIME_COMMAND)
command_result = self._low_level_execute_command(boot_time_command, sudoable=self.DEFAULT_SUDOABLE)
"
-------------------------------------------------------------------------
"```python
# Determine the system distribution in order to use the correct shutdown command arguments
uname_result = self._low_level_execute_command('uname')
distribution = uname_result['stdout'].strip().lower()

system_boot_time_command = self.BOOT_TIME_COMMANDS.get(distribution, self.DEFAULT_BOOT_TIME_COMMAND)
command_result = self._low_level_execute_command(system_boot_time_command, sudoable=self.DEFAULT_SUDOABLE)
```"
-------------------------------------------------------------------------
"
# Determine the system distribution in order to use the correct shutdown command arguments
uname_result = self._low_level_execute_command('uname')
distribution = uname_result['stdout'].strip().lower()

boot_time_command = self.BOOT_TIME_COMMANDS.get(distribution, self.DEFAULT_BOOT_TIME_COMMAND)
command_result = self._low_level_execute_command(boot_time_command, sudoable=self.DEFAULT_SUDOABLE)
"
-------------------------------------------------------------------------
"Recom
PRs: 46147, 46289"
-------------------------------------------------------------------------
=========================================================================
"result = b''
"
-------------------------------------------------------------------------
"```python
result = b''
```"
-------------------------------------------------------------------------
"result = b''
"
-------------------------------------------------------------------------
"Recom
PRs: 46281, 46288"
-------------------------------------------------------------------------
=========================================================================
"result = b''
"
-------------------------------------------------------------------------
"```python
import os
from __future__ import absolute_import
import re
import tempfile
from ansible.module_utils import six, _text, basic

def main():
    if original is None or original.endswith(b('\n')):
        result += b('\n')
    else:
        if module._diff:
            diff['after'] = result
```"
-------------------------------------------------------------------------
"result = b''
"
-------------------------------------------------------------------------
"Recom
PRs: 46281, 46287"
-------------------------------------------------------------------------
=========================================================================
"vpc_wins = dict((group['GroupName'], group) for group in all_groups if group.get('VpcId') and group['VpcId'] == vpc_id)
"
-------------------------------------------------------------------------
"```python
# Required Libraries
import ansible.module_utils.aws.iam
import ansible.module_utils.ec2
import collections
import ansible.module_utils.network.common.utils
import botocore.exceptions
import re
import ansible.module_utils._text
import ansible.module_utils.aws.core
import ansible.module_utils.aws.waiters
import time
import json
import ansible.module_utils.six
import copy

# Function definition
def group_exists(client, module, vpc_id, group_id, name):
    groups = dict((group['GroupId'], group) for group in all_groups)
    groups.update(dict((group['GroupName'], group) for group in all_groups))
    vpc_wins = dict((group['GroupName'], group) for group in all_groups if group.get('VpcId') and group['VpcId'] == vpc_id)
    # maintain backwards compatibility by using the last matching group
    return security_groups[-1], groups
```"
-------------------------------------------------------------------------
"vpc_wins = dict((group['GroupName'], group) for group in all_groups if group.get('VpcId') and group['VpcId'] == vpc_id)
"
-------------------------------------------------------------------------
"Recom
PRs: 46242, 46244"
-------------------------------------------------------------------------
=========================================================================
"need_to_sort_records = (type_in == 'CAA')

# Sort records for wanted_rset if necessary (keep original list)
unsorted_records = wanted_rset.resource_records
if need_to_sort_records:
    wanted_rset.resource_records = sorted(unsorted_records)

"
-------------------------------------------------------------------------
"```python
need_to_sort_records = (type_in == 'CAA')

# Sort records for wanted_rset if necessary (keep original list)
if need_to_sort_records:
    wanted_rset.resource_records.sort()
```"
-------------------------------------------------------------------------
"need_to_sort_records = (type_in == 'CAA')

# Sort records for wanted_rset if necessary (keep original list)
unsorted_records = wanted_rset.resource_records
if need_to_sort_records:
    wanted_rset.resource_records = sorted(unsorted_records)

"
-------------------------------------------------------------------------
"Recom
PRs: 46049, 46227"
-------------------------------------------------------------------------
=========================================================================
"if need_to_sort_records:
    # Sort records
    rset.resource_records = sorted(rset.resource_records)
"
-------------------------------------------------------------------------
"if need_to_sort_records:
    # Sort records
    rset['resource_records'] = sorted(rset['resource_records'])"
-------------------------------------------------------------------------
"if need_to_sort_records:
    # Sort records
    rset.resource_records = sorted(rset.resource_records)
"
-------------------------------------------------------------------------
"Recom
PRs: 46049, 46227"
-------------------------------------------------------------------------
=========================================================================
"# Restore original order of records
wanted_rset.resource_records = unsorted_records
"
-------------------------------------------------------------------------
"# Restore original order of records
wanted_rset.resource_records = sorted(unsorted_records)"
-------------------------------------------------------------------------
"# Restore original order of records
wanted_rset.resource_records = unsorted_records
"
-------------------------------------------------------------------------
"Recom
PRs: 46049, 46227"
-------------------------------------------------------------------------
=========================================================================
"need_to_sort_records = (type_in == 'CAA')

# Sort records for wanted_rset if necessary (keep original list)
unsorted_records = wanted_rset.resource_records
if need_to_sort_records:
    wanted_rset.resource_records = sorted(unsorted_records)

"
-------------------------------------------------------------------------
"```python
need_to_sort_records = (type_in == 'CAA')

# Sort records for wanted_rset if necessary (keep original list)
unsorted_records = wanted_rset.resource_records
if need_to_sort_records:
    wanted_rset.resource_records = sorted(unsorted_records)
```"
-------------------------------------------------------------------------
"need_to_sort_records = (type_in == 'CAA')

# Sort records for wanted_rset if necessary (keep original list)
unsorted_records = wanted_rset.resource_records
if need_to_sort_records:
    wanted_rset.resource_records = sorted(unsorted_records)

"
-------------------------------------------------------------------------
"Recom
PRs: 46049, 46226"
-------------------------------------------------------------------------
=========================================================================
"if need_to_sort_records:
    # Sort records
    rset.resource_records = sorted(rset.resource_records)
"
-------------------------------------------------------------------------
"```python
if need_to_sort_records:
    # Sort records
    rset.resource_records = sorted(rset.resource_records)
```"
-------------------------------------------------------------------------
"if need_to_sort_records:
    # Sort records
    rset.resource_records = sorted(rset.resource_records)
"
-------------------------------------------------------------------------
"Recom
PRs: 46049, 46226"
-------------------------------------------------------------------------
=========================================================================
"# Restore original order of records
wanted_rset.resource_records = unsorted_records
"
-------------------------------------------------------------------------
"```python
# Restore original order of records
wanted_rset.resource_records = unsorted_records
```"
-------------------------------------------------------------------------
"# Restore original order of records
wanted_rset.resource_records = unsorted_records
"
-------------------------------------------------------------------------
"Recom
PRs: 46049, 46226"
-------------------------------------------------------------------------
=========================================================================
"- To specify the rsync command to run on the local host, you need to set this your task var C(ansible_rsync_path).
- Specify a C(--timeout) for the rsync command in seconds.
"
-------------------------------------------------------------------------
"To specify the rsync command to run on the local host, you need to set your task variable `ansible_rsync_path`.

Specify a `--timeout` for the rsync command in seconds."
-------------------------------------------------------------------------
"- To specify the rsync command to run on the local host, you need to set this your task var C(ansible_rsync_path).
- Specify a C(--timeout) for the rsync command in seconds.
"
-------------------------------------------------------------------------
"Recom
PRs: 41870, 46110"
-------------------------------------------------------------------------
=========================================================================
"
# Specify the rsync binary to use on remote host and on local host
- hosts: groupofhosts
vars:
      ansible_rsync_path: ""/usr/gnu/bin/rsync""

tasks:
  - name: copy /tmp/localpath/ to remote location /tmp/remotepath
    synchronize:
      src: ""/tmp/localpath/""
      dest: ""/tmp/remotepath""
      rsync_path: ""/usr/gnu/bin/rsync""

"
-------------------------------------------------------------------------
"```python
import os
from ansible.module_utils import basic
from ansible.module_utils.six.moves import shlex_quote
from __future__ import absolute_import, print_function

# Specify the rsync binary to use on remote host and on local host
- hosts: groupofhosts
  vars:
    ansible_rsync_path: ""/usr/gnu/bin/rsync""

  tasks:
    - name: copy /tmp/localpath/ to remote location /tmp/remotepath
      synchronize:
        src: ""/tmp/localpath/""
        dest: ""/tmp/remotepath""
        rsync_path: ansible_rsync_path
```  "
-------------------------------------------------------------------------
"
# Specify the rsync binary to use on remote host and on local host
- hosts: groupofhosts
vars:
      ansible_rsync_path: ""/usr/gnu/bin/rsync""

tasks:
  - name: copy /tmp/localpath/ to remote location /tmp/remotepath
    synchronize:
      src: ""/tmp/localpath/""
      dest: ""/tmp/remotepath""
      rsync_path: ""/usr/gnu/bin/rsync""

"
-------------------------------------------------------------------------
"Recom
PRs: 41870, 46110"
-------------------------------------------------------------------------
=========================================================================
"if len(split_fields) == 3 and split_fields[0:2] == ['iam', 'security-credentials']:
"
-------------------------------------------------------------------------
"```python
if len(split_fields) == 3 and split_fields[0:2] == ['iam', 'security-credentials']:
```"
-------------------------------------------------------------------------
"if len(split_fields) == 2 and split_fields[0:2] == ['iam', 'info_instanceprofilearn']:
    new_fields[self._prefix % ""iam-instance-profile-role""] = value.split('/')[1]
"
-------------------------------------------------------------------------
"Recom
PRs: 38664, 46077"
-------------------------------------------------------------------------
=========================================================================
"if len(split_fields) == 3 and split_fields[0:2] == ['iam', 'security-credentials']:
"
-------------------------------------------------------------------------
"```python
        if len(split_fields) == 3 and split_fields[0:2] == ['iam', 'security-credentials']:
```"
-------------------------------------------------------------------------
"if len(split_fields) == 2 and split_fields[0:2] == ['iam', 'info_instanceprofilearn']:
    new_fields[self._prefix % ""iam-instance-profile-role""] = value.split('/')[1]
"
-------------------------------------------------------------------------
"Recom
PRs: 38664, 46076"
-------------------------------------------------------------------------
=========================================================================
"self.comparisons = client.comparisons
if self.groups:
    # In case integers are passed as groups, we need to convert them to
    # strings as docker internally treats them as strings.
    self.groups = [str(g) for g in self.groups]

"
-------------------------------------------------------------------------
"```python
self.comparisons = client.comparisons
if self.groups:
    self.groups = [str(g) for g in self.groups]
```"
-------------------------------------------------------------------------
"self.comparisons = client.comparisons

if self.groups:
    # In case integers are passed as groups, we need to convert them to
    # strings as docker internally treats them as strings.
    self.groups = [str(g) for g in self.groups]
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"
if self.client.HAS_BLKIO_WEIGHT_OPT:
    # blkio_weight is only supported in docker>=1.9
    update_parameters['blkio_weight'] = 'blkio_weight'

if self.client.HAS_CPUSET_MEMS_OPT:
    # cpuset_mems is only supported in docker>=2.3
    update_parameters['cpuset_mems'] = 'cpuset_mems'

"
-------------------------------------------------------------------------
"```python
if self.client.HAS_BLKIO_WEIGHT_OPT:
    update_parameters['blkio_weight'] = 'blkio_weight'

if self.client.HAS_CPUSET_MEMS_OPT:
    update_parameters['cpuset_mems'] = 'cpuset_mems'
```"
-------------------------------------------------------------------------
"
if self.client.HAS_BLKIO_WEIGHT_OPT:
    # blkio_weight is only supported in docker>=1.9
    update_parameters['blkio_weight'] = 'blkio_weight'

if self.client.HAS_CPUSET_MEMS_OPT:
    # cpuset_mems is only supported in docker>=2.3
    update_parameters['cpuset_mems'] = 'cpuset_mems'

"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"dns_opt='dns_opts',
"
-------------------------------------------------------------------------
"Adapted code snippet based on the given requirement:

```python
dns_opt='dns_opts'
```"
-------------------------------------------------------------------------
"dns_opt='dns_opts',
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"if self.client.HAS_BLKIO_WEIGHT_OPT:
    # blkio_weight is only supported in docker>=1.9
    host_config_params['blkio_weight'] = 'blkio_weight'

"
-------------------------------------------------------------------------
"```python
if self.client.HAS_BLKIO_WEIGHT_OPT:
    # blkio_weight is only supported in docker>=1.9
    host_config_params['blkio_weight'] = 'blkio_weight'
```"
-------------------------------------------------------------------------
"if self.client.HAS_BLKIO_WEIGHT_OPT:
    # blkio_weight is only supported in docker>=1.9
    host_config_params['blkio_weight'] = 'blkio_weight'

"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"if self.client.HAS_UTS_MODE_OPT:
    host_config_params['uts_mode'] = 'uts'

"
-------------------------------------------------------------------------
"```python
if self.client.HAS_UTS_MODE_OPT:
    host_config_params['uts_mode'] = 'uts'
```"
-------------------------------------------------------------------------
"if self.client.HAS_UTS_MODE_OPT:
    host_config_params['uts_mode'] = 'uts'

"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"options['Config'] = dict()
for k, v in self.log_options.items():
    options['Config'][k] = str(v)
"
-------------------------------------------------------------------------
"```python
options['Config'] = {}
for k, v in self.log_options.items():
    options['Config'][k] = str(v)
```"
-------------------------------------------------------------------------
"options['Config'] = dict()
for k, v in self.log_options.items():
    options['Config'][k] = str(v)
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"self.parameters_map = dict()
self.parameters_map['expected_links'] = 'links'
self.parameters_map['expected_ports'] = 'published_ports'
self.parameters_map['expected_exposed'] = 'exposed_ports'
self.parameters_map['expected_volumes'] = 'volumes'
self.parameters_map['expected_ulimits'] = 'ulimits'
self.parameters_map['expected_sysctls'] = 'sysctls'
self.parameters_map['expected_etc_hosts'] = 'etc_hosts'
self.parameters_map['expected_env'] = 'env'
self.parameters_map['expected_entrypoint'] = 'entrypoint'
self.parameters_map['expected_binds'] = 'volumes'
self.parameters_map['expected_cmd'] = 'command'
self.parameters_map['expected_devices'] = 'devices'
"
-------------------------------------------------------------------------
"```python
self.parameters_map = {
    'expected_links': 'links',
    'expected_ports': 'published_ports',
    'expected_exposed': 'exposed_ports',
    'expected_volumes': 'volumes',
    'expected_ulimits': 'ulimits',
    'expected_sysctls': 'sysctls',
    'expected_etc_hosts': 'etc_hosts',
    'expected_env': 'env',
    'expected_entrypoint': 'entrypoint',
    'expected_binds': 'volumes',
    'expected_cmd': 'command',
    'expected_devices': 'devices'
}
```"
-------------------------------------------------------------------------
"self.parameters_map = dict()
self.parameters_map['expected_links'] = 'links'
self.parameters_map['expected_ports'] = 'published_ports'
self.parameters_map['expected_exposed'] = 'exposed_ports'
self.parameters_map['expected_volumes'] = 'volumes'
self.parameters_map['expected_ulimits'] = 'ulimits'
self.parameters_map['expected_sysctls'] = 'sysctls'
self.parameters_map['expected_etc_hosts'] = 'etc_hosts'
self.parameters_map['expected_env'] = 'env'
self.parameters_map['expected_entrypoint'] = 'entrypoint'
self.parameters_map['expected_binds'] = 'volumes'
self.parameters_map['expected_cmd'] = 'command'
self.parameters_map['expected_devices'] = 'devices'
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"def _compare_dict_allow_more_present(self, av, bv):
    '''
    Compare two dictionaries for whether every entry of the first is in the second.
    '''
    for key, value in av.items():
        if key not in bv:
            return False
        if bv[key] != value:
            return False
    return True

def _compare(self, a, b, compare):
    '''
    Compare values a and b as described in compare.
    '''
    method = compare['comparison']
    if method == 'ignore':
        return True
    # If a or b is None:
    if a is None or b is None:
        # If both are None: equality
        if a == b:
            return True
        # Otherwise, not equal for values, and equal
        # if the other is empty for set/list/dict
        if compare['type'] == 'value':
            return False
        return len(b if a is None else a) == 0
    # Do proper comparison (both objects not None)
    if compare['type'] == 'value':
        return a == b
    elif compare['type'] == 'list':
        if method == 'strict':
            return a == b
        else:
            set_a = set(a)
            set_b = set(b)
            return set_b >= set_a
    elif compare['type'] == 'dict':
        if method == 'strict':
            return a == b
        else:
            return self._compare_dict_allow_more_present(a, b)
    elif compare['type'] == 'set':
        set_a = set(a)
        set_b = set(b)
        if method == 'strict':
            return set_a == set_b
        else:
            return set_b >= set_a
    elif compare['type'] == 'set(dict)':
        for av in a:
            found = False
            for bv in b:
                if self._compare_dict_allow_more_present(av, bv):
                    found = True
                    break
            if not found:
                return False
        if method == 'strict':
            # If we would know that both a and b do not contain duplicates,
            # we could simply compare len(a) to len(b) to finish this test.
            # We can assume that b has no duplicates (as it is returned by
            # docker), but we don't know for a.
            for bv in b:
                found = False
                for av in a:
                    if self._compare_dict_allow_more_present(av, bv):
                        found = True
                        break
                if not found:
                    return False
        return True

"
-------------------------------------------------------------------------
"```python
def _compare_dict_allow_more_present(self, av, bv):
    '''
    Compare two dictionaries for whether every entry of the first is in the second.
    '''
    for key, value in av.items():
        if key not in bv:
            return False
        if bv[key] != value:
            return False
    return True

def _compare(self, a, b, compare):
    '''
    Compare values a and b as described in compare.
    '''
    method = compare['comparison']
    if method == 'ignore':
        return True
    if a is None or b is None:
        if a == b:
            return True
        if compare['type'] == 'value':
            return False
        return len(b if a is None else a) == 0
    if compare['type'] == 'value':
        return a == b
    elif compare['type'] == 'list':
        if method == 'strict':
            return a == b
        else:
            set_a = set(a)
            set_b = set(b)
            return set_b >= set_a
    elif compare['type'] == 'dict':
        if method == 'strict':
            return a == b
        else:
            return self._compare_dict_allow_more_present(a, b)
    elif compare['type'] == 'set':
        set_a = set(a)
        set_b = set(b)
        if method == 'strict':
            return set_a == set_b
        else:
            return set_b >= set_a
    elif compare['type'] == 'set(dict)':
        for av in a:
            found = False
            for bv in b:
                if self._compare_dict_allow_more_present(av, bv):
                    found = True
                    break
            if not found:
                return False
        if method == 'strict':
            for bv in b:
                found = False
                for av in a:
                    if self._compare_dict_allow_more_present(av, bv):
                        found = True
                        break
                if not found:
                    return False
        return True
```"
-------------------------------------------------------------------------
"def _compare_dict_allow_more_present(self, av, bv):
    '''
    Compare two dictionaries for whether every entry of the first is in the second.
    '''
    for key, value in av.items():
        if key not in bv:
            return False
        if bv[key] != value:
            return False
    return True

def _compare(self, a, b, compare):
    '''
    Compare values a and b as described in compare.
    '''
    method = compare['comparison']
    if method == 'ignore':
        return True
    # If a or b is None:
    if a is None or b is None:
        # If both are None: equality
        if a == b:
            return True
        # Otherwise, not equal for values, and equal
        # if the other is empty for set/list/dict
        if compare['type'] == 'value':
            return False
        return len(b if a is None else a) == 0
    # Do proper comparison (both objects not None)
    if compare['type'] == 'value':
        return a == b
    elif compare['type'] == 'list':
        if method == 'strict':
            return a == b
        else:
            set_a = set(a)
            set_b = set(b)
            return set_b >= set_a
    elif compare['type'] == 'dict':
        if method == 'strict':
            return a == b
        else:
            return self._compare_dict_allow_more_present(a, b)
    elif compare['type'] == 'set':
        set_a = set(a)
        set_b = set(b)
        if method == 'strict':
            return set_a == set_b
        else:
            return set_b >= set_a
    elif compare['type'] == 'set(dict)':
        for av in a:
            found = False
            for bv in b:
                if self._compare_dict_allow_more_present(av, bv):
                    found = True
                    break
            if not found:
                return False
        if method == 'strict':
            # If we would know that both a and b do not contain duplicates,
            # we could simply compare len(a) to len(b) to finish this test.
            # We can assume that b has no duplicates (as it is returned by
            # docker), but we don't know for a.
            for bv in b:
                found = False
                for av in a:
                    if self._compare_dict_allow_more_present(av, bv):
                        found = True
                        break
                if not found:
                    return False
        return True

"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"cap_drop=host_config.get('CapDrop'),
"
-------------------------------------------------------------------------
cap_drop=host_config.get('CapDrop')
-------------------------------------------------------------------------
"compare = self.parameters.client.comparisons[self.parameters_map.get(key, key)]
self.log('check differences %s %s vs %s (%s)' % (key, getattr(self.parameters, key), str(value), compare))
    match = self._compare(getattr(self.parameters, key), value, compare)
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"compare = self.parameters.client.comparisons[self.parameters_map.get(key, key)]
self.log('check differences %s %s vs %s (%s)' % (key, getattr(self.parameters, key), str(value), compare))
    match = self._compare(getattr(self.parameters, key), value, compare)
"
-------------------------------------------------------------------------
"```python
        compare = self.parameters.client.comparisons[self.parameters_map.get(key, key)]
        self.log('check differences %s %s vs %s (%s)' % (key, getattr(self.parameters, key), str(value), compare))
        match = self._compare(getattr(self.parameters, key), value, compare)
```"
-------------------------------------------------------------------------
"if self.parameters.client.HAS_BLKIO_WEIGHT_OPT:
    # blkio_weight is only supported in docker>=1.9
    config_mapping['blkio_weight'] = host_config.get('BlkioWeight')

if self.parameters.client.HAS_CPUSET_MEMS_OPT:
    # cpuset_mems is only supported in docker>=2.3
    config_mapping['cpuset_mems'] = host_config.get('CpusetMems')

    if getattr(self.parameters, key, None):
        compare = self.parameters.client.comparisons[self.parameters_map.get(key, key)]
        match = self._compare(getattr(self.parameters, key), value, compare)

        if not match:
            # no match. record the differences
            item = dict()
            item[key] = dict(
                parameter=getattr(self.parameters, key),
                container=value
            )
            differences.append(item)
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"if self.parameters.client.HAS_BLKIO_WEIGHT_OPT:
    # blkio_weight is only supported in docker>=1.9
    config_mapping['blkio_weight'] = host_config.get('BlkioWeight')

if self.parameters.client.HAS_CPUSET_MEMS_OPT:
    # cpuset_mems is only supported in docker>=2.3
    config_mapping['cpuset_mems'] = host_config.get('CpusetMems')

    if getattr(self.parameters, key, None):
        compare = self.parameters.client.comparisons[self.parameters_map.get(key, key)]
        match = self._compare(getattr(self.parameters, key), value, compare)

        if not match:
            # no match. record the differences
            item = dict()
            item[key] = dict(
                parameter=getattr(self.parameters, key),
                container=value
            )
            differences.append(item)
"
-------------------------------------------------------------------------
"```python
if self.parameters.client.HAS_BLKIO_WEIGHT_OPT:
    # blkio_weight is only supported in docker>=1.9
    config_mapping['blkio_weight'] = host_config.get('BlkioWeight')

if self.parameters.client.HAS_CPUSET_MEMS_OPT:
    # cpuset_mems is only supported in docker>=2.3
    config_mapping['cpuset_mems'] = host_config.get('CpusetMems')

if getattr(self.parameters, key, None):
    compare = self.parameters.client.comparisons[self.parameters_map.get(key, key)]
    match = self._compare(getattr(self.parameters, key), value, compare)

    if not match:
        # no match. record the differences
        item = {key: {'parameter': getattr(self.parameters, key), 'container': value}}
        differences.append(item)
```"
-------------------------------------------------------------------------
"if self.parameters.comparisons['image']['comparison'] == 'strict':
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"if self.parameters.comparisons['image']['comparison'] == 'strict':
"
-------------------------------------------------------------------------
if self.parameters.comparisons['image']['comparison'] == 'strict':
-------------------------------------------------------------------------
"def _setup_comparisons(self):
    comparisons = {}
    comp_aliases = {}
    # Put in defaults
    explicit_types = dict(
        command='list',
        devices='set(dict)',
        dns_search_domains='list',
        dns_servers='list',
        env='set',
        entrypoint='list',
        etc_hosts='set',
        ulimits='set(dict)',
    )
    for option, data in self.module.argument_spec.items():
        # Ignore options which aren't used as container properties
        if option in ('docker_host', 'tls_hostname', 'api_version', 'timeout', 'cacert_path', 'cert_path',
                      'key_path', 'ssl_version', 'tls', 'tls_verify', 'debug', 'env_file', 'force_kill',
                      'keep_volumes', 'ignore_image', 'name', 'pull', 'purge_networks', 'recreate',
                      'restart', 'state', 'stop_timeout', 'trust_image_content', 'networks'):
            continue
        # Determine option type
        if option in explicit_types:
            type = explicit_types[option]
        elif data['type'] == 'list':
            type = 'set'
        elif data['type'] == 'dict':
            type = 'dict'
        else:
            type = 'value'
        # Determine comparison type
        if type in ('list', 'value'):
            comparison = 'strict'
        else:
            comparison = 'allow_more_present'
        comparisons[option] = dict(type=type, comparison=comparison, name=option)
        # Keep track of aliases
        comp_aliases[option] = option
        for alias in data.get('aliases', []):
            comp_aliases[alias] = option
    # Process legacy ignore options
    if self.module.params['ignore_image']:
        comparisons['image']['comparison'] = 'ignore'
    self.comparisons = comparisons

"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"def _setup_comparisons(self):
    comparisons = {}
    comp_aliases = {}
    # Put in defaults
    explicit_types = dict(
        command='list',
        devices='set(dict)',
        dns_search_domains='list',
        dns_servers='list',
        env='set',
        entrypoint='list',
        etc_hosts='set',
        ulimits='set(dict)',
    )
    for option, data in self.module.argument_spec.items():
        # Ignore options which aren't used as container properties
        if option in ('docker_host', 'tls_hostname', 'api_version', 'timeout', 'cacert_path', 'cert_path',
                      'key_path', 'ssl_version', 'tls', 'tls_verify', 'debug', 'env_file', 'force_kill',
                      'keep_volumes', 'ignore_image', 'name', 'pull', 'purge_networks', 'recreate',
                      'restart', 'state', 'stop_timeout', 'trust_image_content', 'networks'):
            continue
        # Determine option type
        if option in explicit_types:
            type = explicit_types[option]
        elif data['type'] == 'list':
            type = 'set'
        elif data['type'] == 'dict':
            type = 'dict'
        else:
            type = 'value'
        # Determine comparison type
        if type in ('list', 'value'):
            comparison = 'strict'
        else:
            comparison = 'allow_more_present'
        comparisons[option] = dict(type=type, comparison=comparison, name=option)
        # Keep track of aliases
        comp_aliases[option] = option
        for alias in data.get('aliases', []):
            comp_aliases[alias] = option
    # Process legacy ignore options
    if self.module.params['ignore_image']:
        comparisons['image']['comparison'] = 'ignore'
    self.comparisons = comparisons

"
-------------------------------------------------------------------------
"```python
def _setup_comparisons(self):
    comparisons = {}
    comp_aliases = {}
    # Put in defaults
    explicit_types = dict(
        command='list',
        devices='set(dict)',
        dns_search_domains='list',
        dns_servers='list',
        env='set',
        entrypoint='list',
        etc_hosts='set',
        ulimits='set(dict)',
    )
    for option, data in self.module.argument_spec.items():
        # Ignore options which aren't used as container properties
        if option in ('docker_host', 'tls_hostname', 'api_version', 'timeout', 'cacert_path', 'cert_path',
                      'key_path', 'ssl_version', 'tls', 'tls_verify', 'debug', 'env_file', 'force_kill',
                      'keep_volumes', 'ignore_image', 'name', 'pull', 'purge_networks', 'recreate',
                      'restart', 'state', 'stop_timeout', 'trust_image_content', 'networks'):
            continue
        # Determine option type
        if option in explicit_types:
            type = explicit_types[option]
        elif data['type'] == 'list':
            type = 'set'
        elif data['type'] == 'dict':
            type = 'dict'
        else:
            type = 'value'
        # Determine comparison type
        if type in ('list', 'value'):
            comparison = 'strict'
        else:
            comparison = 'allow_more_present'
        comparisons[option] = dict(type=type, comparison=comparison, name=option)
        # Keep track of aliases
        comp_aliases[option] = option
        for alias in data.get('aliases', []):
            comp_aliases[alias] = option
    # Process legacy ignore options
    if self.module.params['ignore_image']:
        comparisons['image']['comparison'] = 'ignore'
    self.comparisons = comparisons
```  "
-------------------------------------------------------------------------
"shm_size=dict(type='str'),
sysctls=dict(type='dict'),
userns_mode=dict(type='str'),
volume_driver=dict(type='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 45905, 46063"
-------------------------------------------------------------------------
=========================================================================
"# fetch the RG directly (instead of using the base helper) since we don't want to exit if it's missing
rg = self.rm_client.resource_groups.get(self.resource_group_name)
"
-------------------------------------------------------------------------
"```python
rg = self.rm_client.resource_groups.get(self.resource_group_name)
```"
-------------------------------------------------------------------------
"# fetch the RG directly (instead of using the base helper) since we don't want to exit if it's missing
rg = self.rm_client.resource_groups.get(self.resource_group_name)
"
-------------------------------------------------------------------------
"Recom
PRs: 46013, 46018"
-------------------------------------------------------------------------
=========================================================================
"# fetch the RG directly (instead of using the base helper) since we don't want to exit if it's missing
rg = self.rm_client.resource_groups.get(self.resource_group_name)
"
-------------------------------------------------------------------------
"```python
# fetch the RG directly since we don't want to exit if it's missing
rg = self.rm_client.resource_groups.get(self.resource_group_name)
```  "
-------------------------------------------------------------------------
"# fetch the RG directly (instead of using the base helper) since we don't want to exit if it's missing
rg = self.rm_client.resource_groups.get(self.resource_group_name)
"
-------------------------------------------------------------------------
"Recom
PRs: 46013, 46017"
-------------------------------------------------------------------------
=========================================================================
"# Lowercase keys, to conform to py2 behavior, so that py3 and py2 are predictable
info.update(dict((k.lower(), v) for k, v in e.info().items()))
"
-------------------------------------------------------------------------
"```python
info.update(dict((k.lower(), v) for k, v in e.info().items()))
```"
-------------------------------------------------------------------------
"# Lowercase keys, to conform to py2 behavior, so that py3 and py2 are predictable
info.update(dict((k.lower(), v) for k, v in e.info().items()))
"
-------------------------------------------------------------------------
"Recom
PRs: 45628, 45855"
-------------------------------------------------------------------------
=========================================================================
"{'Content-Type': 'application/json'},
rt info == {'msg': 'HTTP Error 500: Internal Server Error', 'body': 'TESTS',
            'status': 500, 'url': 'http://ansible.com/', 'content-type': 'application/json'}
"
-------------------------------------------------------------------------
"def test_fetch_url_httperror(open_url_mock, fake_ansible_module):
    open_url_mock.side_effect = HTTPError(
        'http://ansible.com/',
        500,
        'Internal Server Error',
        StringIO('TESTS'),
        {'Content-Type': 'application/json'},
    )

    r, info = fetch_url(fake_ansible_module, 'http://ansible.com/')

    assert info == {'msg': 'HTTP Error 500: Internal Server Error', 'body': 'TESTS',
                    'status': 500, 'url': 'http://ansible.com/', 'content-type': 'application/json'}"
-------------------------------------------------------------------------
"{'Content-Type': 'application/json'},
rt info == {'msg': 'HTTP Error 500: Internal Server Error', 'body': 'TESTS',
            'status': 500, 'url': 'http://ansible.com/', 'content-type': 'application/json'}
"
-------------------------------------------------------------------------
"Recom
PRs: 45628, 45855"
-------------------------------------------------------------------------
=========================================================================
"# Lowercase keys, to conform to py2 behavior, so that py3 and py2 are predictable
info.update(dict((k.lower(), v) for k, v in e.info().items()))
"
-------------------------------------------------------------------------
"info.update(dict((k.lower(), v) for k, v in e.info().items()))"
-------------------------------------------------------------------------
"# Lowercase keys, to conform to py2 behavior, so that py3 and py2 are predictable
info.update(dict((k.lower(), v) for k, v in e.info().items()))
"
-------------------------------------------------------------------------
"Recom
PRs: 45628, 45854"
-------------------------------------------------------------------------
=========================================================================
"{'Content-Type': 'application/json'},
rt info == {'msg': 'HTTP Error 500: Internal Server Error', 'body': 'TESTS',
            'status': 500, 'url': 'http://ansible.com/', 'content-type': 'application/json'}
"
-------------------------------------------------------------------------
"def test_fetch_url_httperror(open_url_mock, fake_ansible_module):
     open_url_mock.side_effect = HTTPError(
         'http://ansible.com/',
         500,
         'Internal Server Error',
         StringIO('TESTS'),
         headers={'Content-Type': 'application/json'}
     )

     r, info = fetch_url(fake_ansible_module, 'http://ansible.com/')

     assert info == {'msg': 'HTTP Error 500: Internal Server Error', 'body': 'TESTS',
                     'status': 500, 'url': 'http://ansible.com/', 'content-type': 'application/json'}"
-------------------------------------------------------------------------
"{'Content-Type': 'application/json'},
rt info == {'msg': 'HTTP Error 500: Internal Server Error', 'body': 'TESTS',
            'status': 500, 'url': 'http://ansible.com/', 'content-type': 'application/json'}
"
-------------------------------------------------------------------------
"Recom
PRs: 45628, 45854"
-------------------------------------------------------------------------
=========================================================================
"from collections import deque
"
-------------------------------------------------------------------------
"from collections import deque, KeysView"
-------------------------------------------------------------------------
"from collections import deque
"
-------------------------------------------------------------------------
"Recom
PRs: 45721, 45837"
-------------------------------------------------------------------------
=========================================================================
"KeysView,
"
-------------------------------------------------------------------------
"__metaclass__ = type
try:
    """"""Python 3.3+ branch.""""""
    from collections.abc import (
        Mapping, MutableMapping,
        Sequence, MutableSequence,
        Set, MutableSet,
        KeysView
    )
    from collections import deque
except ImportError:
    pass"
-------------------------------------------------------------------------
"KeysView,
"
-------------------------------------------------------------------------
"Recom
PRs: 45721, 45837"
-------------------------------------------------------------------------
=========================================================================
"KeysView,
"
-------------------------------------------------------------------------
"try:
 except ImportError:
     """"""Use old lib location under 2.6-3.2.""""""
     import collections
     Mapping, MutableMapping,
     Sequence, MutableSequence,
     Set, MutableSet,
     from collections import deque, Mapping, MutableMapping, Sequence, MutableSequence, Set, MutableSet,
     import KeysView"
-------------------------------------------------------------------------
"KeysView,
"
-------------------------------------------------------------------------
"Recom
PRs: 45721, 45837"
-------------------------------------------------------------------------
=========================================================================
"if vpc_id:
    vpc_wins = dict((group['GroupName'], group) for group in all_groups if group['VpcId'] == vpc_id)
    groups.update(vpc_wins)
"
-------------------------------------------------------------------------
"if vpc_id:
    vpc_wins = dict((group['GroupName'], group) for group in all_groups if group['VpcId'] == vpc_id)
    groups.update(vpc_wins)"
-------------------------------------------------------------------------
"if vpc_id:
    vpc_wins = dict((group['GroupName'], group) for group in all_groups if group['VpcId'] == vpc_id)
    groups.update(vpc_wins)
"
-------------------------------------------------------------------------
"Recom
PRs: 45787, 45816"
-------------------------------------------------------------------------
=========================================================================
"if vpc_id:
    vpc_wins = dict((group['GroupName'], group) for group in all_groups if group['VpcId'] == vpc_id)
    groups.update(vpc_wins)
"
-------------------------------------------------------------------------
"```python
if vpc_id:
    vpc_wins = dict((group['GroupName'], group) for group in all_groups if group['VpcId'] == vpc_id)
    groups.update(vpc_wins)
```"
-------------------------------------------------------------------------
"if vpc_id:
    vpc_wins = dict((group['GroupName'], group) for group in all_groups if group.get('VpcId') and group['VpcId'] == vpc_id)
    groups.update(vpc_wins)
"
-------------------------------------------------------------------------
"Recom
PRs: 45787, 45815"
-------------------------------------------------------------------------
=========================================================================
"stdout = ''
stderr = ''
"
-------------------------------------------------------------------------
"stdout = ''
stderr = ''"
-------------------------------------------------------------------------
"stdout = u''
stderr = u''
"
-------------------------------------------------------------------------
"Recom
PRs: 45607, 45791"
-------------------------------------------------------------------------
=========================================================================
"# If state is 'absent', parameters do not have to be parsed or interpreted.
# Only the container's name is needed.
if self.state == 'absent':
    return

"
-------------------------------------------------------------------------
"```
# If state is 'absent', parameters do not have to be parsed or interpreted.
# Only the container's name is needed.
if self.state == 'absent':
    return
```"
-------------------------------------------------------------------------
"# If state is 'absent', parameters do not have to be parsed or interpreted.
# Only the container's name is needed.
if self.state == 'absent':
    return

"
-------------------------------------------------------------------------
"Recom
PRs: 45700, 45769"
-------------------------------------------------------------------------
=========================================================================
"# If state is 'absent', parameters do not have to be parsed or interpreted.
# Only the container's name is needed.
if self.state == 'absent':
    return

"
-------------------------------------------------------------------------
"```python
if self.state == 'absent':
    return
```"
-------------------------------------------------------------------------
"# If state is 'absent', parameters do not have to be parsed or interpreted.
# Only the container's name is needed.
if self.state == 'absent':
    return

"
-------------------------------------------------------------------------
"Recom
PRs: 45700, 45768"
-------------------------------------------------------------------------
=========================================================================
"def test_missing_template_body():
"
-------------------------------------------------------------------------
"```python
def test_missing_template_body():
    m = FakeModule()
    with pytest.raises(Exception, message='Expected module to fail with no template') as exc_info:
        cfn_module.create_stack(
```"
-------------------------------------------------------------------------
"def test_missing_template_body():
"
-------------------------------------------------------------------------
"Recom
PRs: 45754, 45758"
-------------------------------------------------------------------------
=========================================================================
"def test_build_unique_id_different():
def test_build_unique_id_same():
def test_build_unique_id_obj():
def test_format_tags():
def test_format_empty_tags():
"
-------------------------------------------------------------------------
"```python
def test_build_unique_id_different():
    assert changed is True


    m = FakeModule(**{'name': 'ansible-unittest-1', 'description': 'test-unique-id'})
    m2 = FakeModule(**{'name': 'ansible-unittest-1', 'description': 'test-unique-id-different'})
    assert data_pipeline.build_unique_id(m) != data_pipeline.build_unique_id(m2)


def test_build_unique_id_same():
    m = FakeModule(**{'name': 'ansible-unittest-1', 'description': 'test-unique-id', 'tags': {'ansible': 'test'}})
    m2 = FakeModule(**{'name': 'ansible-unittest-1', 'description': 'test-unique-id', 'tags': {'ansible': 'test'}})
    assert data_pipeline.build_unique_id(m) == data_pipeline.build_unique_id(m2)


def test_build_unique_id_obj():
    # check that the object can be different and the unique id should be the same; should be able to modify objects
    m = FakeModule(**{'name': 'ansible-unittest-1', 'objects': [{'first': 'object'}]})
    m2 = FakeModule(**{'name': 'ansible-unittest-1', 'objects': [{'second': 'object'}]})
    assert data_pipeline.build_unique_id(m) == data_pipeline.build_unique_id(m2)


def test_format_tags():
    unformatted_tags = {'key1': 'val1', 'key2': 'val2', 'key3': 'val3'}
    formatted_tags = data_pipeline.format_tags(unformatted_tags)
    for tag_set in formatted_tags:
        assert unformatted_tags[tag_set['key']] == tag_set['value']


def test_format_empty_tags():
    unformatted_tags = {}
    formatted_tags = data_pipeline.format_tags(unformatted_tags)
    assert formatted_tags == []
```"
-------------------------------------------------------------------------
"def test_build_unique_id_different():
def test_build_unique_id_same():
def test_build_unique_id_obj():
def test_format_tags():
def test_format_empty_tags():
"
-------------------------------------------------------------------------
"Recom
PRs: 45754, 45758"
-------------------------------------------------------------------------
=========================================================================
"def test_missing_template_body():
"
-------------------------------------------------------------------------
"```python
def test_missing_template_body():
    m = FakeModule()
    with pytest.raises(Exception, message='Expected module to fail with no template') as exc_info:
        cfn_module.create_stack(
```"
-------------------------------------------------------------------------
"def test_missing_template_body():
"
-------------------------------------------------------------------------
"Recom
PRs: 45754, 45757"
-------------------------------------------------------------------------
=========================================================================
"def test_build_unique_id_different():
def test_build_unique_id_same():
def test_build_unique_id_obj():
def test_format_tags():
def test_format_empty_tags():
"
-------------------------------------------------------------------------
"```python
def test_build_unique_id_different():
    m = FakeModule(**{'name': 'ansible-unittest-1', 'description': 'test-unique-id'})
    m2 = FakeModule(**{'name': 'ansible-unittest-1', 'description': 'test-unique-id-different'})
    assert data_pipeline.build_unique_id(m) != data_pipeline.build_unique_id(m2)

def test_build_unique_id_same():
    m = FakeModule(**{'name': 'ansible-unittest-1', 'description': 'test-unique-id', 'tags': {'ansible': 'test'}})
    m2 = FakeModule(**{'name': 'ansible-unittest-1', 'description': 'test-unique-id', 'tags': {'ansible': 'test'}})
    assert data_pipeline.build_unique_id(m) == data_pipeline.build_unique_id(m2)

def test_build_unique_id_obj():
    m = FakeModule(**{'name': 'ansible-unittest-1', 'objects': [{'first': 'object'}]})
    m2 = FakeModule(**{'name': 'ansible-unittest-1', 'objects': [{'second': 'object'}]})
    assert data_pipeline.build_unique_id(m) == data_pipeline.build_unique_id(m2)

def test_format_tags():
    unformatted_tags = {'key1': 'val1', 'key2': 'val2', 'key3': 'val3'}
    formatted_tags = data_pipeline.format_tags(unformatted_tags)
    for tag_set in formatted_tags:
        assert unformatted_tags[tag_set['key']] == tag_set['value']

def test_format_empty_tags():
    unformatted_tags = {}
    formatted_tags = data_pipeline.format_tags(unformatted_tags)
    assert formatted_tags == []
```  "
-------------------------------------------------------------------------
"def test_build_unique_id_different():
def test_build_unique_id_same():
def test_build_unique_id_obj():
def test_format_tags():
def test_format_empty_tags():
"
-------------------------------------------------------------------------
"Recom
PRs: 45754, 45757"
-------------------------------------------------------------------------
=========================================================================
"if not os.getenv('PLACEBO_RECORD'):
    if not os.path.isdir(recordings_path):
        raise NotImplementedError('Missing Placebo recordings in directory: %s' % recordings_path)
else:
    try:
        # make sure the directory for placebo test recordings is available
        os.makedirs(recordings_path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
"
-------------------------------------------------------------------------
"if not os.getenv('PLACEBO_RECORD'):
    if not os.path.isdir(recordings_path):
        raise NotImplementedError('Missing Placebo recordings in directory: %s' % recordings_path)
else:
    try:
        os.makedirs(recordings_path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise"
-------------------------------------------------------------------------
"if not os.getenv('PLACEBO_RECORD'):
    if not os.path.isdir(recordings_path):
        raise NotImplementedError('Missing Placebo recordings in directory: %s' % recordings_path)
else:
    try:
        # make sure the directory for placebo test recordings is available
        os.makedirs(recordings_path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
"
-------------------------------------------------------------------------
"Recom
PRs: 45752, 45756"
-------------------------------------------------------------------------
=========================================================================
"if not os.getenv('PLACEBO_RECORD'):
    if not os.path.isdir(recordings_path):
        raise NotImplementedError('Missing Placebo recordings in directory: %s' % recordings_path)
else:
    try:
        # make sure the directory for placebo test recordings is available
        os.makedirs(recordings_path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
"
-------------------------------------------------------------------------
"```python
if not os.getenv('PLACEBO_RECORD'):
    if not os.path.isdir(recordings_path):
        raise NotImplementedError('Missing Placebo recordings in directory: %s' % recordings_path)
else:
    try:
        # make sure the directory for placebo test recordings is available
        os.makedirs(recordings_path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
```"
-------------------------------------------------------------------------
"if not os.getenv('PLACEBO_RECORD'):
    if not os.path.isdir(recordings_path):
        raise NotImplementedError('Missing Placebo recordings in directory: %s' % recordings_path)
else:
    try:
        # make sure the directory for placebo test recordings is available
        os.makedirs(recordings_path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
"
-------------------------------------------------------------------------
"Recom
PRs: 45752, 45755"
-------------------------------------------------------------------------
=========================================================================
"from copy import deepcopy
"
-------------------------------------------------------------------------
"```python
from copy import deepcopy
```"
-------------------------------------------------------------------------
"from copy import deepcopy
"
-------------------------------------------------------------------------
"Recom
PRs: 45594, 45749"
-------------------------------------------------------------------------
=========================================================================
"specified_rules = flatten_nested_targets(module, deepcopy(specified_rules))
"
-------------------------------------------------------------------------
"```python
specified_rules = flatten_nested_targets(module, copy.deepcopy(specified_rules))
```"
-------------------------------------------------------------------------
"specified_rules = flatten_nested_targets(module, deepcopy(specified_rules))
"
-------------------------------------------------------------------------
"Recom
PRs: 45594, 45749"
-------------------------------------------------------------------------
=========================================================================
"if rule.get('ports') and (isinstance(rule['ports'], string_types) or isinstance(rule['ports'], int)):
"
-------------------------------------------------------------------------
"```python
if rule.get('ports') and (isinstance(rule['ports'], string_types) or isinstance(rule['ports'], int)):
```"
-------------------------------------------------------------------------
"if rule.get('ports') and (isinstance(rule['ports'], string_types) or isinstance(rule['ports'], int)):
"
-------------------------------------------------------------------------
"Recom
PRs: 45594, 45749"
-------------------------------------------------------------------------
=========================================================================
"if not isinstance(rule[source_type], list):
    rule[source_type] = [rule[source_type]]
format_rule[rule_key] = [{source_type: target} for target in rule[source_type]]
"
-------------------------------------------------------------------------
"if not isinstance(rule[source_type], list):
    rule[source_type] = [rule[source_type]]
format_rule[rule_key] = [{source_type: target} for target in rule[source_type]]"
-------------------------------------------------------------------------
"if not isinstance(rule[source_type], list):
    rule[source_type] = [rule[source_type]]
format_rule[rule_key] = [{source_type: target} for target in rule[source_type]]
"
-------------------------------------------------------------------------
"Recom
PRs: 45594, 45749"
-------------------------------------------------------------------------
=========================================================================
"def flatten_nested_targets(module, rules):
def _flatten(targets):
    for target in targets:
        if isinstance(target, list):
            for t in _flatten(target):
                yield t
        elif isinstance(target, string_types):
            yield target

if rules is not None:
    for rule in rules:
        target_list_type = None
        if isinstance(rule.get('cidr_ip'), list):
            target_list_type = 'cidr_ip'
        elif isinstance(rule.get('cidr_ipv6'), list):
            target_list_type = 'cidr_ipv6'
        if target_list_type is not None:
            rule[target_list_type] = list(_flatten(rule[target_list_type]))
return rules


"
-------------------------------------------------------------------------
"def flatten_nested_targets(module, rules):
    from ansible.module_utils.six import string_types

    def _flatten(targets):
        for target in targets:
            if isinstance(target, list):
                for t in _flatten(target):
                    yield t
            elif isinstance(target, string_types):
                yield target

    if rules is not None:
        for rule in rules:
            target_list_type = None
            if isinstance(rule.get('cidr_ip'), list):
                target_list_type = 'cidr_ip'
            elif isinstance(rule.get('cidr_ipv6'), list):
                target_list_type = 'cidr_ipv6'
            if target_list_type is not None:
                rule[target_list_type] = list(_flatten(rule[target_list_type]))
    return rules"
-------------------------------------------------------------------------
"def flatten_nested_targets(module, rules):
def _flatten(targets):
    for target in targets:
        if isinstance(target, list):
            for t in _flatten(target):
                yield t
        elif isinstance(target, string_types):
            yield target

if rules is not None:
    for rule in rules:
        target_list_type = None
        if isinstance(rule.get('cidr_ip'), list):
            target_list_type = 'cidr_ip'
        elif isinstance(rule.get('cidr_ipv6'), list):
            target_list_type = 'cidr_ipv6'
        if target_list_type is not None:
            rule[target_list_type] = list(_flatten(rule[target_list_type]))
return rules


"
-------------------------------------------------------------------------
"Recom
PRs: 45594, 45749"
-------------------------------------------------------------------------
=========================================================================
"rules = flatten_nested_targets(module, deepcopy(module.params['rules']))
rules_egress = flatten_nested_targets(module, deepcopy(module.params['rules_egress']))
rules = deduplicate_rules_args(rules_expand_sources(rules_expand_ports(rules)))
rules_egress = deduplicate_rules_args(rules_expand_sources(rules_expand_ports(rules_egress)))
"
-------------------------------------------------------------------------
"```python
rules = flatten_nested_targets(module, deepcopy(module.params['rules']))
rules_egress = flatten_nested_targets(module, deepcopy(module.params['rules_egress']))
rules = deduplicate_rules_args(rules_expand_sources(rules_expand_ports(rules)))
rules_egress = deduplicate_rules_args(rules_expand_sources(rules_expand_ports(rules_egress)))
```"
-------------------------------------------------------------------------
"rules = flatten_nested_targets(module, deepcopy(module.params['rules']))
rules_egress = flatten_nested_targets(module, deepcopy(module.params['rules_egress']))
rules = deduplicate_rules_args(rules_expand_sources(rules_expand_ports(rules)))
rules_egress = deduplicate_rules_args(rules_expand_sources(rules_expand_ports(rules_egress)))
"
-------------------------------------------------------------------------
"Recom
PRs: 45594, 45749"
-------------------------------------------------------------------------
=========================================================================
"from copy import deepcopy
"
-------------------------------------------------------------------------
from copy import deepcopy
-------------------------------------------------------------------------
"from copy import deepcopy
"
-------------------------------------------------------------------------
"Recom
PRs: 45594, 45748"
-------------------------------------------------------------------------
=========================================================================
"specified_rules = flatten_nested_targets(module, deepcopy(specified_rules))
"
-------------------------------------------------------------------------
"specified_rules = flatten_nested_targets(module, copy.deepcopy(specified_rules))"
-------------------------------------------------------------------------
"rules = flatten_nested_targets(module, deepcopy(module.params['rules']))
rules_egress = flatten_nested_targets(module, deepcopy(module.params['rules_egress']))
rules = deduplicate_rules_args(rules_expand_sources(rules_expand_ports(rules)))
rules_egress = deduplicate_rules_args(rules_expand_sources(rules_expand_ports(rules_egress)))
"
-------------------------------------------------------------------------
"Recom
PRs: 45594, 45748"
-------------------------------------------------------------------------
=========================================================================
"type: boolean
"
-------------------------------------------------------------------------
"```python
    type: boolean
```  "
-------------------------------------------------------------------------
"type: boolean
"
-------------------------------------------------------------------------
"Recom
PRs: 45736, 45739"
-------------------------------------------------------------------------
=========================================================================
"type: boolean
"
-------------------------------------------------------------------------
"```yaml
type: bool
```"
-------------------------------------------------------------------------
"type: boolean
type: boolean
"
-------------------------------------------------------------------------
"Recom
PRs: 45736, 45738"
-------------------------------------------------------------------------
=========================================================================
"describe_existing_parameter_paginator = client.get_paginator('describe_parameters')
describe_existing_parameter = describe_existing_parameter_paginator.paginate(
    Filters=[{""Key"": ""Name"", ""Values"": [args['Name']]}]).build_full_result()

"
-------------------------------------------------------------------------
"```python
describe_existing_parameter = client.get_paginator('describe_parameters').paginate(
    Filters=[{""Key"": ""Name"", ""Values"": [args['Name']]}]).build_full_result()
```"
-------------------------------------------------------------------------
"describe_existing_parameter_paginator = client.get_paginator('describe_parameters')
describe_existing_parameter = describe_existing_parameter_paginator.paginate(
    Filters=[{""Key"": ""Name"", ""Values"": [args['Name']]}]).build_full_result()

"
-------------------------------------------------------------------------
"Recom
PRs: 45632, 45666"
-------------------------------------------------------------------------
=========================================================================
"self.connection._auth = {'Authorization': 'Bearer %s' % self.access_token}
"
-------------------------------------------------------------------------
self.connection._auth = {'Authorization': 'Bearer %s' % self.access_token}
-------------------------------------------------------------------------
"self.connection._auth = {'Authorization': 'Bearer %s' % self.access_token}
"
-------------------------------------------------------------------------
"Recom
PRs: 45598, 45608"
-------------------------------------------------------------------------
=========================================================================
"headers=BASE_HEADERS
"
-------------------------------------------------------------------------
"self.connection.send(
    self._get_api_token_path(), json.dumps(auth_payload), headers=BASE_HEADERS, method=HTTPMethod.POST,
)"
-------------------------------------------------------------------------
"headers=BASE_HEADERS
"
-------------------------------------------------------------------------
"Recom
PRs: 45598, 45608"
-------------------------------------------------------------------------
=========================================================================
"response, response_data = self.connection.send(url, data, method=http_method, headers=BASE_HEADERS)
"
-------------------------------------------------------------------------
"response, response_data = self.connection.send(url, data, method=http_method, headers=BASE_HEADERS)"
-------------------------------------------------------------------------
"response, response_data = self.connection.send(url, data, method=http_method, headers=BASE_HEADERS)
"
-------------------------------------------------------------------------
"Recom
PRs: 45598, 45608"
-------------------------------------------------------------------------
=========================================================================
"headers = dict(BASE_HEADERS)
"
-------------------------------------------------------------------------
"```python
headers = dict(BASE_HEADERS)
```"
-------------------------------------------------------------------------
"headers = dict(BASE_HEADERS)
"
-------------------------------------------------------------------------
"Recom
PRs: 45598, 45608"
-------------------------------------------------------------------------
=========================================================================
"response, response_data = self.connection.send(url, data=None, method=HTTPMethod.GET, headers=BASE_HEADERS)
"
-------------------------------------------------------------------------
"response, response_data = self.connection.send(url, data=None, method=HTTPMethod.GET, headers=BASE_HEADERS, params=None)"
-------------------------------------------------------------------------
"response, response_data = self.connection.send(url, data=None, method=HTTPMethod.GET, headers=BASE_HEADERS)
"
-------------------------------------------------------------------------
"Recom
PRs: 45598, 45608"
-------------------------------------------------------------------------
=========================================================================
"EXPECTED_BASE_HEADERS = {
'Accept': 'application/json',
'Content-Type': 'application/json'


"
-------------------------------------------------------------------------
"EXPECTED_BASE_HEADERS = {
    'Accept': 'application/json',
    'Content-Type': 'application/json'
}"
-------------------------------------------------------------------------
"EXPECTED_BASE_HEADERS = {
'Accept': 'application/json',
'Content-Type': 'application/json'


"
-------------------------------------------------------------------------
"Recom
PRs: 45598, 45608"
-------------------------------------------------------------------------
=========================================================================
"assert {'Authorization': 'Bearer ACCESS_TOKEN'} == self.ftd_plugin.connection._auth
"
-------------------------------------------------------------------------
"```python
assert {'Authorization': 'Bearer ACCESS_TOKEN'} == self.ftd_plugin.connection._auth
```"
-------------------------------------------------------------------------
"assert {'Authorization': 'Bearer ACCESS_TOKEN'} == self.ftd_plugin.connection._auth
"
-------------------------------------------------------------------------
"Recom
PRs: 45598, 45608"
-------------------------------------------------------------------------
=========================================================================
"assert {'Authorization': 'Bearer NEW_ACCESS_TOKEN'} == self.ftd_plugin.connection._auth
"
-------------------------------------------------------------------------
assert {'Authorization': 'Bearer NEW_ACCESS_TOKEN'} == self.ftd_plugin.connection._auth
-------------------------------------------------------------------------
"assert {'Authorization': 'Bearer NEW_ACCESS_TOKEN'} == self.ftd_plugin.connection._auth
"
-------------------------------------------------------------------------
"Recom
PRs: 45598, 45608"
-------------------------------------------------------------------------
=========================================================================
"self.connection_mock.send.assert_called_once_with('/testFakeLoginUrl', mock.ANY, headers=mock.ANY,
                                                  method=mock.ANY)
"
-------------------------------------------------------------------------
"self.connection_mock.send.assert_called_once_with('/testFakeLoginUrl', ANY, headers=ANY, method=ANY)"
-------------------------------------------------------------------------
"self.connection_mock.send.assert_called_once_with('/testFakeLoginUrl', mock.ANY, headers=mock.ANY,
                                                  method=mock.ANY)
"
-------------------------------------------------------------------------
"Recom
PRs: 45598, 45608"
-------------------------------------------------------------------------
=========================================================================
"headers=EXPECTED_BASE_HEADERS)
"
-------------------------------------------------------------------------
"self.connection_mock.send.assert_called_once_with('/test/123?at=0', '{""name"": ""foo""}', method=HTTPMethod.PUT, headers=EXPECTED_BASE_HEADERS)"
-------------------------------------------------------------------------
"headers=EXPECTED_BASE_HEADERS)
"
-------------------------------------------------------------------------
"Recom
PRs: 45598, 45608"
-------------------------------------------------------------------------
=========================================================================
"headers=EXPECTED_BASE_HEADERS)
"
-------------------------------------------------------------------------
"assert {ResponseParams.SUCCESS: True, ResponseParams.STATUS_CODE: 200, ResponseParams.RESPONSE: {}} == resp
self.connection_mock.send.assert_called_once_with('/test', None, method=HTTPMethod.GET, headers=EXPECTED_BASE_HEADERS)"
-------------------------------------------------------------------------
"headers=EXPECTED_BASE_HEADERS)
"
-------------------------------------------------------------------------
"Recom
PRs: 45598, 45608"
-------------------------------------------------------------------------
=========================================================================
"exp_headers = dict(EXPECTED_BASE_HEADERS)
"
-------------------------------------------------------------------------
exp_headers = dict(EXPECTED_BASE_HEADERS)
-------------------------------------------------------------------------
"exp_headers = dict(EXPECTED_BASE_HEADERS)
"
-------------------------------------------------------------------------
"Recom
PRs: 45598, 45608"
-------------------------------------------------------------------------
=========================================================================
"with open(checksum_tmpsrc) as f:
    lines = [line.rstrip('\n') for line in f]

# Look through each line in the checksum file for a hash corresponding to
# the filename in the url, returning the first hash that is found.
for cksum in (s for (s, f) in lines.items() if f.strip('./') == filename):
    checksum = cksum
    break
else:
    checksum = None

if checksum is None:
    module.fail_json(""Unable to find a checksum for file '%s' in '%s'"" % (filename, checksum_url))
"
-------------------------------------------------------------------------
"import os
import re
import tempfile
import shutil
import traceback
import ansible.module_utils._text
import ansible.module_utils.basic
import datetime
import ansible.module_utils.urls
from ansible.module_utils.six.moves.urllib.parse import urlparse
from __future__ import absolute_import

def main():
    checksum_url = checksum

    # Download checksum file to checksum_tmpsrc
    checksum_tmpsrc, checksum_info = url_get(module, checksum_url, dest, use_proxy, last_mod_time, force, timeout, headers, tmp_dest)
    
    with open(checksum_tmpsrc) as f:
        lines = [line.rstrip('\n') for line in f]

    lines = dict(s.split(None, 1) for s in lines)
    filename = url_filename(url)

    # Remove any non-alphanumeric characters, including the infamous
    # Unicode zero-width space
    checksum = re.sub(r'\W+', '', checksum).lower()

    for cksum, file in lines.items():
        if file.strip('./') == filename:
            checksum = cksum
            break
    else:
        checksum = None

    if checksum is None:
        module.fail_json(""Unable to find a checksum for file '%s' in '%s'"" % (filename, checksum_url))"
-------------------------------------------------------------------------
"with open(checksum_tmpsrc) as f:
    lines = [line.rstrip('\n') for line in f]

# Look through each line in the checksum file for a hash corresponding to
# the filename in the url, returning the first hash that is found.
for cksum in (s for (s, f) in lines.items() if f.strip('./') == filename):
    checksum = cksum
    break
else:
    checksum = None

if checksum is None:
    module.fail_json(""Unable to find a checksum for file '%s' in '%s'"" % (filename, checksum_url))
"
-------------------------------------------------------------------------
"Recom
PRs: 45586, 45605"
-------------------------------------------------------------------------
=========================================================================
"if checksum != destination_checksum:
    checksum_mismatch = True

t forcing redownload, unless checksum does not match
ot force and not checksum_mismatch:
# Not forcing redownload, unless checksum does not match
# allow file attribute changes
module.params['path'] = dest
file_args = module.load_file_common_arguments(module.params)
file_args['path'] = dest
result['changed'] = module.set_fs_attributes_if_different(file_args, False)
if result['changed']:
    module.exit_json(msg=""file already exists but file attributes changed"", **result)
module.exit_json(msg=""file already exists"", **result)
"
-------------------------------------------------------------------------
"```
if checksum != destination_checksum:
    checksum_mismatch = True

if not force and not checksum_mismatch:
    # Not forcing redownload, unless checksum does not match
    # allow file attribute changes
    module.params['path'] = dest
    file_args = module.load_file_common_arguments(module.params)
    file_args['path'] = dest
    result['changed'] = module.set_fs_attributes_if_different(file_args, False)
    if result['changed']:
        module.exit_json(msg=""file already exists but file attributes changed"", **result)
    module.exit_json(msg=""file already exists"", **result)
```"
-------------------------------------------------------------------------
"if checksum != destination_checksum:
    checksum_mismatch = True

t forcing redownload, unless checksum does not match
ot force and not checksum_mismatch:
# allow file attribute changes
module.params['path'] = dest
file_args = module.load_file_common_arguments(module.params)
file_args['path'] = dest
changed = module.set_fs_attributes_if_different(file_args, False)
if changed:
    module.exit_json(msg=""file already exists but file attributes changed"", dest=dest, url=url, changed=changed)
module.exit_json(msg=""file already exists"", dest=dest, url=url, changed=changed)
"
-------------------------------------------------------------------------
"Recom
PRs: 45495, 45567"
-------------------------------------------------------------------------
=========================================================================
"if checksum != destination_checksum:
    checksum_mismatch = True

t forcing redownload, unless checksum does not match
ot force and not checksum_mismatch:
# Not forcing redownload, unless checksum does not match
# allow file attribute changes
module.params['path'] = dest
file_args = module.load_file_common_arguments(module.params)
file_args['path'] = dest
result['changed'] = module.set_fs_attributes_if_different(file_args, False)
if result['changed']:
    module.exit_json(msg=""file already exists but file attributes changed"", **result)
module.exit_json(msg=""file already exists"", **result)
"
-------------------------------------------------------------------------
"```python
if checksum != destination_checksum:
    checksum_mismatch = True

if not force and not checksum_mismatch:
    # Not forcing redownload, unless checksum does not match
    # allow file attribute changes
    module.params['path'] = dest
    file_args = module.load_file_common_arguments(module.params)
    file_args['path'] = dest
    result['changed'] = module.set_fs_attributes_if_different(file_args, False)
    if result['changed']:
        module.exit_json(msg=""file already exists but file attributes changed"", **result)
    module.exit_json(msg=""file already exists"", **result)
```"
-------------------------------------------------------------------------
"if checksum != destination_checksum:
    checksum_mismatch = True

t forcing redownload, unless checksum does not match
ot force and not checksum_mismatch:
# Not forcing redownload, unless checksum does not match
# allow file attribute changes
module.params['path'] = dest
file_args = module.load_file_common_arguments(module.params)
file_args['path'] = dest
changed = module.set_fs_attributes_if_different(file_args, False)
if changed:
    module.exit_json(msg=""file already exists but file attributes changed"", dest=dest, url=url, changed=changed)
module.exit_json(msg=""file already exists"", dest=dest, url=url, changed=changed)
"
-------------------------------------------------------------------------
"Recom
PRs: 45495, 45565"
-------------------------------------------------------------------------
=========================================================================
"distribution_id = self.validate_distribution_from_caller_reference(caller_reference=caller_reference)['Id']
"
-------------------------------------------------------------------------
"```python
distribution_id = self.validate_distribution_from_caller_reference(caller_reference)['Id']
```"
-------------------------------------------------------------------------
"distribution_id = self.validate_distribution_from_caller_reference(caller_reference=caller_reference)['Id']
"
-------------------------------------------------------------------------
"Recom
PRs: 45498, 45512"
-------------------------------------------------------------------------
=========================================================================
"[checksum] = (k for (k, v) in lines.items() if v.strip('./') == filename)
"
-------------------------------------------------------------------------
"```python
checksum = next((k for (k, v) in lines.items() if v.strip('./') == filename), None)
```"
-------------------------------------------------------------------------
"[checksum] = (k for (k, v) in lines.items() if v.strip('./') == filename)
"
-------------------------------------------------------------------------
"Recom
PRs: 45287, 45501"
-------------------------------------------------------------------------
=========================================================================
"# If authorization variables aren't defined, look for them in environment variables
    if key in auth_args and value is None:
            auth[key] = env_value
def auth_set(*names):
    return all([auth.get(name) for name in names])
if auth_set('username', 'password', 'host') or auth_set('api_key', 'host'):
    # We have enough in the parameters to authenticate, no need to load incluster or kubeconfig
    pass
elif auth_set('kubeconfig', 'context'):
    kubernetes.config.load_kube_config(auth.get('kubeconfig'), auth.get('context'))
    # First try to do incluster config, then kubeconfig
        kubernetes.config.load_kube_config(auth.get('kubeconfig'), auth.get('context'))
# Override any values in the default configuration with Ansible parameters
configuration = kubernetes.client.Configuration()
for key, value in iteritems(auth):
    if key in auth_args and value is not None:
        if key == 'api_key':
            setattr(configuration, key, {'authorization': ""Bearer {0}"".format(value)})
        else:
            setattr(configuration, key, value)
kubernetes.client.Configuration.set_default(configuration)
return DynamicClient(kubernetes.client.ApiClient(configuration))
"
-------------------------------------------------------------------------
"```python
    if key in auth_args and value is None:
        auth[key] = env_value

def auth_set(*names):
    return all([auth.get(name) for name in names])

if auth_set('username', 'password', 'host') or auth_set('api_key', 'host'):
    pass
elif auth_set('kubeconfig', 'context'):
    kubernetes.config.load_kube_config(auth.get('kubeconfig'), auth.get('context'))
    kubernetes.config.load_kube_config(auth.get('kubeconfig'), auth.get('context'))

configuration = kubernetes.client.Configuration()

for key, value in iteritems(auth):
    if key in auth_args and value is not None:
        if key == 'api_key':
            setattr(configuration, key, {'authorization': ""Bearer {0}"".format(value)})
        else:
            setattr(configuration, key, value)

kubernetes.client.Configuration.set_default(configuration)
return DynamicClient(kubernetes.client.ApiClient(configuration))
```"
-------------------------------------------------------------------------
"# If authorization variables aren't defined, look for them in environment variables
    if key in auth_args and value is None:
            auth[key] = env_value
def auth_set(*names):
    return all([auth.get(name) for name in names])
if auth_set('username', 'password', 'host') or auth_set('api_key', 'host'):
    # We have enough in the parameters to authenticate, no need to load incluster or kubeconfig
    pass
elif auth_set('kubeconfig', 'context'):
    kubernetes.config.load_kube_config(auth.get('kubeconfig'), auth.get('context'))
    # First try to do incluster config, then kubeconfig
        kubernetes.config.load_kube_config(auth.get('kubeconfig'), auth.get('context'))
# Override any values in the default configuration with Ansible parameters
configuration = kubernetes.client.Configuration()
for key, value in iteritems(auth):
    if key in auth_args and value is not None:
        if key == 'api_key':
            setattr(configuration, key, {'authorization': ""Bearer {0}"".format(value)})
        else:
            setattr(configuration, key, value)
kubernetes.client.Configuration.set_default(configuration)
return DynamicClient(kubernetes.client.ApiClient(configuration))
"
-------------------------------------------------------------------------
"Recom
PRs: 44142, 45442"
-------------------------------------------------------------------------
=========================================================================
"from distutils.version import LooseVersion
if LooseVersion(self.openshift_version) < LooseVersion(""0.6.2""):
    if self.params['merge_type']:
    else:
        k8s_obj, error = self.patch_resource(resource, definition, existing, name,
                                             namespace)
else:
    for merge_type in self.params['merge_type'] or ['strategic-merge', 'merge']:
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.k8s.raw import KubernetesRawModule
from __future__ import print_function, absolute_import

if self.check_mode:
    k8s_obj = dict_merge(existing.to_dict(), definition)
else:
    if self.params['merge_type']:
        self.fail_json(msg=""openshift >= 0.6.2 is required for merge_type"")
    else:
        k8s_obj, error = self.patch_resource(resource, definition, existing, name,
                                             namespace)
        if not error:
            break
    if error:
        self.fail_json(**error)
```"
-------------------------------------------------------------------------
"from distutils.version import LooseVersion
if LooseVersion(self.openshift_version) < LooseVersion(""0.6.2""):
    if self.params['merge_type']:
    else:
        k8s_obj, error = self.patch_resource(resource, definition, existing, name,
                                             namespace)
else:
    for merge_type in self.params['merge_type'] or ['strategic-merge', 'merge']:
"
-------------------------------------------------------------------------
"Recom
PRs: 45284, 45373"
-------------------------------------------------------------------------
=========================================================================
"- If openshift >= 0.6.2, this defaults to C(['strategic-merge', 'merge']), which is ideal for using the same parameters
  on resource kinds that combine Custom Resources and built-in resources. For openshift < 0.6.2, the default
  is simply C(strategic-merge).
"
-------------------------------------------------------------------------
"```python
# If openshift >= 0.6.2, this defaults to ['strategic-merge', 'merge'], which is ideal for using the same parameters
# on resource kinds that combine Custom Resources and built-in resources. For openshift < 0.6.2, the default
# is simply ['strategic-merge'].

if openshift >= 0.6.2:
    merge_type = ['strategic-merge', 'merge']
else:
    merge_type = ['strategic-merge']
```"
-------------------------------------------------------------------------
"- If openshift >= 0.6.2, this defaults to C(['strategic-merge', 'merge']), which is ideal for using the same parameters
  on resource kinds that combine Custom Resources and built-in resources. For openshift < 0.6.2, the default
  is simply C(strategic-merge).
"
-------------------------------------------------------------------------
"Recom
PRs: 45284, 45373"
-------------------------------------------------------------------------
=========================================================================
"from azure.storage.blob import PageBlobService, BlockBlobService
"
-------------------------------------------------------------------------
"```python
from azure.storage.blob import PageBlobService, BlockBlobService
```"
-------------------------------------------------------------------------
"from azure.storage.blob import PageBlobService, BlockBlobService
"
-------------------------------------------------------------------------
"Recom
PRs: 44802, 45332"
-------------------------------------------------------------------------
=========================================================================
"return PageBlobService(endpoint_suffix=self._cloud_environment.suffixes.storage_endpoint,
                       account_name=storage_account_name,
                       account_key=account_keys.keys[0].value)
return BlockBlobService(endpoint_suffix=self._cloud_environment.suffixes.storage_endpoint,
                        account_name=storage_account_name,
                        account_key=account_keys.keys[0].value)
"
-------------------------------------------------------------------------
"```python
return self.create_page_blob_service(endpoint_suffix=self._cloud_environment.suffixes.storage_endpoint,
                                      storage_account_name=storage_account_name,
                                      account_key=account_keys.keys[0].value)

return self.create_block_blob_service(endpoint_suffix=self._cloud_environment.suffixes.storage_endpoint,
                                      storage_account_name=storage_account_name,
                                      account_key=account_keys.keys[0].value)
```"
-------------------------------------------------------------------------
"return PageBlobService(endpoint_suffix=self._cloud_environment.suffixes.storage_endpoint,
                       account_name=storage_account_name,
                       account_key=account_keys.keys[0].value)
return BlockBlobService(endpoint_suffix=self._cloud_environment.suffixes.storage_endpoint,
                        account_name=storage_account_name,
                        account_key=account_keys.keys[0].value)
"
-------------------------------------------------------------------------
"Recom
PRs: 44802, 45332"
-------------------------------------------------------------------------
=========================================================================
"def _task_definition_matches(requested_volumes, requested_containers, requested_task_role_arn, existing_task_definition):
    if requested_task_role_arn != td.get('taskRoleArn', """"):
        return None

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.ec2 import camel_dict_to_snake_dict

def _task_definition_matches(requested_volumes, requested_containers, requested_task_role_arn, existing_task_definition):
    td = camel_dict_to_snake_dict(existing_task_definition)
    if requested_task_role_arn != td.get('task_role_arn', """"):
        return None
```"
-------------------------------------------------------------------------
"def _task_definition_matches(requested_volumes, requested_containers, requested_task_role_arn, existing_task_definition):
    if requested_task_role_arn != td.get('taskRoleArn', """"):
        return None

"
-------------------------------------------------------------------------
"Recom
PRs: 44942, 45317"
-------------------------------------------------------------------------
=========================================================================
"requested_volumes = module.params['volumes'] or []
requested_containers = module.params['containers'] or []
requested_task_role_arn = module.params['task_role_arn']
existing = _task_definition_matches(requested_volumes, requested_containers, requested_task_role_arn, td)
"
-------------------------------------------------------------------------
"```python
requested_volumes = module.params.get('volumes', [])
requested_containers = module.params.get('containers', [])
requested_task_role_arn = module.params['task_role_arn']
existing = _task_definition_matches(requested_volumes, requested_containers, requested_task_role_arn, td)
```"
-------------------------------------------------------------------------
"requested_volumes = module.params['volumes'] or []
requested_containers = module.params['containers'] or []
requested_task_role_arn = module.params['task_role_arn']
existing = _task_definition_matches(requested_volumes, requested_containers, requested_task_role_arn, td)
"
-------------------------------------------------------------------------
"Recom
PRs: 44942, 45317"
-------------------------------------------------------------------------
=========================================================================
"self.verify = self.boolean_or_cacert(kwargs.get('validate_certs', True), kwargs.get('cacert', ''))

"
-------------------------------------------------------------------------
"self.verify = self.boolean_or_cacert(kwargs.get('validate_certs', True), kwargs.get('cacert', ''))"
-------------------------------------------------------------------------
"self.verify = self.boolean_or_cacert(kwargs.get('validate_certs', True), kwargs.get('cacert', ''))

"
-------------------------------------------------------------------------
"Recom
PRs: 36513, 45243"
-------------------------------------------------------------------------
=========================================================================
"if to_text(new_tags_dict[key]) != current_tags_dict.get(key):
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.aws.iam import to_text

def compare_aws_tags(current_tags_dict, new_tags_dict, purge_tags=True):
    tag_keys_to_unset = []
    tag_key_value_pairs_to_set = {}

    for key in set(new_tags_dict.keys()) - set(tag_keys_to_unset):
        if to_text(new_tags_dict[key]) != current_tags_dict.get(key):
            tag_key_value_pairs_to_set[key] = new_tags_dict[key]
        else:
            tag_keys_to_unset.append(key)

    return tag_key_value_pairs_to_set, tag_keys_to_unset
```"
-------------------------------------------------------------------------
"if to_text(new_tags_dict[key]) != current_tags_dict.get(key):
"
-------------------------------------------------------------------------
"Recom
PRs: 42765, 45240"
-------------------------------------------------------------------------
=========================================================================
"import itertools
"
-------------------------------------------------------------------------
"```python
import itertools
```"
-------------------------------------------------------------------------
"import itertools
"
-------------------------------------------------------------------------
"Recom
PRs: 42765, 45240"
-------------------------------------------------------------------------
=========================================================================
"if prop == 'port_range' and to_text(a.protocol) == to_text(b.protocol):
    # equal protocols can interchange `(-1, -1)` and `(None, None)`
    if a.port_range in ((None, None), (-1, -1)) and b.port_range in ((None, None), (-1, -1)):
        continue
    elif getattr(a, prop) != getattr(b, prop):
        return False
elif getattr(a, prop) != getattr(b, prop):
"
-------------------------------------------------------------------------
"```python
def rule_cmp(a, b):
    """"""Compare rules without descriptions""""""
    for prop in ['port_range', 'protocol', 'target', 'target_type']:
        if current_account_id is None:
            if prop == 'port_range' and to_text(a.protocol) == to_text(b.protocol):
                # equal protocols can interchange `(-1, -1)` and `(None, None)`
                if a.port_range in ((None, None), (-1, -1)) and b.port_range in ((None, None), (-1, -1)):
                    continue
                elif getattr(a, prop) != getattr(b, prop):
                    return False
            elif getattr(a, prop) != getattr(b, prop):
                return False
    return True
```"
-------------------------------------------------------------------------
"if prop == 'port_range' and to_text(a.protocol) == to_text(b.protocol):
    # equal protocols can interchange `(-1, -1)` and `(None, None)`
    if a.port_range in ((None, None), (-1, -1)) and b.port_range in ((None, None), (-1, -1)):
        continue
    elif getattr(a, prop) != getattr(b, prop):
        return False
elif getattr(a, prop) != getattr(b, prop):
"
-------------------------------------------------------------------------
"Recom
PRs: 42765, 45240"
-------------------------------------------------------------------------
=========================================================================
"to_text(perm['IpProtocol']),
"
-------------------------------------------------------------------------
"```python
to_text(perm.get('IpProtocol'))
```"
-------------------------------------------------------------------------
"to_text(perm['IpProtocol']),
"
-------------------------------------------------------------------------
"Recom
PRs: 42765, 45240"
-------------------------------------------------------------------------
=========================================================================
"to_text(perm['IpProtocol']),
"
-------------------------------------------------------------------------
"```python
to_text(perm['IpProtocol'])
```"
-------------------------------------------------------------------------
"to_text(perm['IpProtocol']),
"
-------------------------------------------------------------------------
"Recom
PRs: 42765, 45240"
-------------------------------------------------------------------------
=========================================================================
"elif purge:
    conflicts = current_rules ^ set(desired_rules)
    # For cases where set comparison is equivalent, but invalid port/proto exist
    for a, b in itertools.combinations(conflicts, 2):
        if rule_cmp(a, b):
            conflicts.discard(a)
            conflicts.discard(b)
    if not len(conflicts):
        return group
"
-------------------------------------------------------------------------
"```python
elif purge:
    conflicts = current_rules ^ set(desired_rules)
    # For cases where set comparison is equivalent, but invalid port/proto exist
    for a, b in itertools.combinations(conflicts, 2):
        if rule_cmp(a, b):
            conflicts.discard(a)
            conflicts.discard(b)
    if not conflicts:
        return group
```"
-------------------------------------------------------------------------
"elif purge:
    conflicts = current_rules ^ set(desired_rules)
    # For cases where set comparison is equivalent, but invalid port/proto exist
    for a, b in itertools.combinations(conflicts, 2):
        if rule_cmp(a, b):
            conflicts.discard(a)
            conflicts.discard(b)
    if not len(conflicts):
        return group
"
-------------------------------------------------------------------------
"Recom
PRs: 42765, 45240"
-------------------------------------------------------------------------
=========================================================================
"try:
    int(rule.get('proto', 'tcp'))
    rule['proto'] = to_text(rule.get('proto', 'tcp'))
    rule['from_port'] = None
    rule['to_port'] = None
except ValueError:
    # rule does not use numeric protocol spec
    pass
        protocol=to_text(rule.get('proto', 'tcp')),
"
-------------------------------------------------------------------------
"```python
try:
    int(rule.get('proto', 'tcp'))
    rule['proto'] = to_text(rule.get('proto', 'tcp'))
    rule['from_port'] = None
    rule['to_port'] = None
except ValueError:
    pass

named_tuple_rule_list.append(
    Rule(
        port_range=(rule['from_port'], rule['to_port']),
        target=target, target_type=target_type,
        description=rule.get('rule_desc'),
        protocol=to_text(rule.get('proto', 'tcp')),
    )
```"
-------------------------------------------------------------------------
"try:
    int(rule.get('proto', 'tcp'))
    rule['proto'] = to_text(rule.get('proto', 'tcp'))
    rule['from_port'] = None
    rule['to_port'] = None
except ValueError:
    # rule does not use numeric protocol spec
    pass
        protocol=to_text(rule.get('proto', 'tcp')),
"
-------------------------------------------------------------------------
"Recom
PRs: 42765, 45240"
-------------------------------------------------------------------------
=========================================================================
"# Correct type of target ports
for target in params['Targets']:
    target['Port'] = int(target.get('Port', module.params.get('port')))

"
-------------------------------------------------------------------------
"```python
for target in params['Targets']:
    target['Port'] = int(target.get('Port', module.params.get('port')))
```"
-------------------------------------------------------------------------
"# Correct type of target ports
for target in params['Targets']:
    target['Port'] = int(target.get('Port', module.params.get('port')))

"
-------------------------------------------------------------------------
"Recom
PRs: 45169, 45236"
-------------------------------------------------------------------------
=========================================================================
"'aws_access_key_id': '',
'aws_secret_access_key': '',
'aws_security_token': '',
'boto_profile': '',
'eucalyptus_host': '',
"
-------------------------------------------------------------------------
"'aws_access_key_id': '',
'aws_secret_access_key': '',
'aws_security_token': '',
'boto_profile': '',
'eucalyptus_host': ''"
-------------------------------------------------------------------------
"'aws_access_key_id': '',
'aws_secret_access_key': '',
'aws_security_token': '',
'boto_profile': '',
'eucalyptus_host': '',
"
-------------------------------------------------------------------------
"Recom
PRs: 43716, 45194"
-------------------------------------------------------------------------
=========================================================================
"'hostname_variable': '',
'iam_role': '',
'pattern_exclude': '',
'pattern_include': '',
'route53_hostnames': '',
"
-------------------------------------------------------------------------
"```python
'hostname_variable': '',
'iam_role': '',
'pattern_exclude': '',
'pattern_include': '',
'route53_hostnames': '',
```"
-------------------------------------------------------------------------
"'hostname_variable': '',
'iam_role': '',
'pattern_exclude': '',
'pattern_include': '',
'route53_hostnames': '',
"
-------------------------------------------------------------------------
"Recom
PRs: 43716, 45194"
-------------------------------------------------------------------------
=========================================================================
"elif 'Origin' in route_spec and route_spec['Origin'] != 'EnableVgwRoutePropagation':
    if route_spec_matches_route_cidr(route_spec, route):
        return ""replace"", i
"
-------------------------------------------------------------------------
"```python
elif 'Origin' in route_spec and route_spec['Origin'] != 'EnableVgwRoutePropagation':
    if route_spec_matches_route_cidr(route_spec, route):
        return ""replace"", i
```"
-------------------------------------------------------------------------
"elif 'Origin' in route_spec and route_spec['Origin'] != 'EnableVgwRoutePropagation':
    if route_spec_matches_route_cidr(route_spec, route):
        return ""replace"", i
"
-------------------------------------------------------------------------
"Recom
PRs: 43417, 45178"
-------------------------------------------------------------------------
=========================================================================
"# FIXME: Design causes issues for repeated child_classes
        # NOTE: This is an ugly fix
        # Return the one that is a subset match
        if set(proposed_config.items()).issubset(set(existing_config.items())):
            break
"
-------------------------------------------------------------------------
"```python
# Return the one that is a subset match
if set(proposed_config.items()).issubset(set(existing_config.items())):
    break
```"
-------------------------------------------------------------------------
"# FIXME: Design causes issues for repeated child_classes
        # NOTE: This is an ugly fix
        # Return the one that is a subset match
        if set(proposed_config.items()).issubset(set(existing_config.items())):
            break
"
-------------------------------------------------------------------------
"Recom
PRs: 45091, 45130"
-------------------------------------------------------------------------
=========================================================================
"self.update_qs({'query-target-filter': self.build_filter(obj_class, obj_filter)})
"
-------------------------------------------------------------------------
"self.update_qs({'query-target-filter': self.build_filter(obj_class, obj_filter)})"
-------------------------------------------------------------------------
"self.update_qs({'query-target-filter': self.build_filter(obj_class, obj_filter)})
"
-------------------------------------------------------------------------
"Recom
PRs: 45088, 45125"
-------------------------------------------------------------------------
=========================================================================
"self.update_qs({'query-target-filter': self.build_filter(obj_class, obj_filter)})
"
-------------------------------------------------------------------------
"```python
self.update_qs({'query-target-filter': self.build_filter(obj_class, obj_filter)})
```"
-------------------------------------------------------------------------
"self.update_qs({'query-target-filter': self.build_filter(obj_class, obj_filter)})
"
-------------------------------------------------------------------------
"Recom
PRs: 45088, 45125"
-------------------------------------------------------------------------
=========================================================================
"self.update_qs({'query-target-filter': self.build_filter(obj_class, obj_filter)})
"
-------------------------------------------------------------------------
"self.update_qs({'query-target-filter': self.build_filter(obj_class, obj_filter)})"
-------------------------------------------------------------------------
"self.update_qs({'query-target-filter': self.build_filter(obj_class, obj_filter)})
"
-------------------------------------------------------------------------
"Recom
PRs: 45088, 45125"
-------------------------------------------------------------------------
=========================================================================
"- ""You can use the M(certificate_complete_chain) module to find the root certificate
"
-------------------------------------------------------------------------
"- ""You can use the M(certificate_complete_chain) module to find the root certificate."""
-------------------------------------------------------------------------
"- ""You can use the M(certificate_complete_chain) module to find the root certificate
"
-------------------------------------------------------------------------
"Recom
PRs: 45082, 45084"
-------------------------------------------------------------------------
=========================================================================
"- Note that as opposed to C(docker run ...), M(docker_container) does not remove the default
  network if C(networks) is specified. You need to explicity use C(purge_networks) to enforce
  the removal of the default network (and all other networks not explicitly mentioned in C(networks)).
"
-------------------------------------------------------------------------
"```yaml
- Note that as opposed to `docker run ...`, `docker_container` does not remove the default
  network if `networks` is specified. You need to explicitly use `purge_networks` to enforce
  the removal of the default network (and all other networks not explicitly mentioned in `networks`).
```"
-------------------------------------------------------------------------
"- Note that as opposed to C(docker run ...), M(docker_container) does not remove the default
  network if C(networks) is specified. You need to explicity use C(purge_networks) to enforce
  the removal of the default network (and all other networks not explicitly mentioned in C(networks)).
"
-------------------------------------------------------------------------
"Recom
PRs: 44861, 44880"
-------------------------------------------------------------------------
=========================================================================
"if self.parameters.restart_policy:
    config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')
if self.parameters.log_driver:
    config_mapping['log_driver'] = log_config.get('Type')
    config_mapping['log_options'] = log_config.get('Config')

if self.parameters.client.HAS_AUTO_REMOVE_OPT:
    # auto_remove is only supported in docker>=2
    config_mapping['auto_remove'] = host_config.get('AutoRemove')

if HAS_DOCKER_PY_3:
    # volume_driver moved to create_host_config in > 3
    config_mapping['volume_driver'] = host_config.get('VolumeDriver')
"
-------------------------------------------------------------------------
"if self.parameters.restart_policy:
    config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')
if self.parameters.log_driver:
    config_mapping['log_driver'] = log_config.get('Type')
    config_mapping['log_options'] = log_config.get('Config')

if self.parameters.client.HAS_AUTO_REMOVE_OPT:
    # auto_remove is only supported in docker>=2
    config_mapping['auto_remove'] = host_config.get('AutoRemove')

if HAS_DOCKER_PY_3:
    # volume_driver moved to create_host_config in > 3
    config_mapping['volume_driver'] = host_config.get('VolumeDriver')"
-------------------------------------------------------------------------
"if self.parameters.restart_policy:
    config_mapping['restart_retries'] = restart_policy.get('MaximumRetryCount')
if self.parameters.log_driver:
    config_mapping['log_driver'] = log_config.get('Type')
    config_mapping['log_options'] = log_config.get('Config')

if self.parameters.client.HAS_AUTO_REMOVE_OPT:
    # auto_remove is only supported in docker>=2
    config_mapping['auto_remove'] = host_config.get('AutoRemove')

if HAS_DOCKER_PY_3:
    # volume_driver moved to create_host_config in > 3
    config_mapping['volume_driver'] = host_config.get('VolumeDriver')
"
-------------------------------------------------------------------------
"Recom
PRs: 44808, 44879"
-------------------------------------------------------------------------
=========================================================================
"if HAS_DOCKER_PY_3:
    # cpu_shares moved to create_host_config in > 3
    config_mapping['cpu_shares'] = host_config.get('CpuShares')

"
-------------------------------------------------------------------------
"```python
if HAS_DOCKER_PY_3:
    # cpu_shares moved to create_host_config in > 3
    config_mapping['cpu_shares'] = host_config.get('CpuShares')
```"
-------------------------------------------------------------------------
"if HAS_DOCKER_PY_3:
    # cpu_shares moved to create_host_config in > 3
    config_mapping['cpu_shares'] = host_config.get('CpuShares')

"
-------------------------------------------------------------------------
"Recom
PRs: 44808, 44879"
-------------------------------------------------------------------------
=========================================================================
"if client.module.params.get('log_options') and not client.module.params.get('log_driver'):
    client.module.warn('log_options is ignored when log_driver is not specified')
if client.module.params.get('restart_retries') and not client.module.params.get('restart_policy'):
    client.module.warn('restart_retries is ignored when restart_policy is not specified')

"
-------------------------------------------------------------------------
"```python
if client.module.params.get('log_options') and not client.module.params.get('log_driver'):
    client.warning('log_options is ignored when log_driver is not specified')
if client.module.params.get('restart_retries') and not client.module.params.get('restart_policy'):
    client.warning('restart_retries is ignored when restart_policy is not specified')
```  "
-------------------------------------------------------------------------
"if client.module.params.get('log_options') and not client.module.params.get('log_driver'):
    client.module.warn('log_options is ignored when log_driver is not specified')
if client.module.params.get('restart_retries') and not client.module.params.get('restart_policy'):
    client.module.warn('restart_retries is ignored when restart_policy is not specified')

"
-------------------------------------------------------------------------
"Recom
PRs: 44808, 44879"
-------------------------------------------------------------------------
=========================================================================
"""module. It is recommended to install the docker module if no support for Python 2.6 is required. ""
""Please note that simply uninstalling one of the modules can leave the other module in a broken state."")
"
-------------------------------------------------------------------------
"""It is recommended to install the docker module if no support for Python 2.6 is required. Please note that simply uninstalling one of the modules can leave the other module in a broken state."""
-------------------------------------------------------------------------
"""module. It is recommended to install the docker module if no support for Python 2.6 is required. ""
""Please note that simply uninstalling one of the modules can leave the other module in a broken state."")
"
-------------------------------------------------------------------------
"Recom
PRs: 43238, 44783"
-------------------------------------------------------------------------
=========================================================================
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"'''
Current context: requirements:
        (see L(here,https://github.com/docker/docker-py/issues/1310) for details).
        For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to
        install the C(docker) Python module. Note that both modules should I(not)
     - ""Docker API >= 1.20""
 '''
 
Required dependency: ansible.module_utils.six, __future__, docker.errors, ansible.module_utils.docker_common, 
Original metadata: [2.6] docker modules: improve documentation on docker / docker-py conflict
--##### SUMMARY
Backport of #43238: improves documentation.

##### ISSUE TYPE
 - Docs Pull Request

##### COMPONENT NAME
lib/ansible/module_utils/docker_common.py
docker_container
docker_image
docker_image_facts
docker_login
docker_network
docker_service
docker_volume

##### ANSIBLE VERSION
'''
2.6.3
'''
cloud, backport, module, shipit, docker, support:community, support:core, affects_2.6, docs

Functional set for the hunk:
Compilation set for the hunk:
Library information from Stable: ansible.module_utils.docker.common.RequestException, traceback, ansible.module_utils.docker.common.AnsibleDockerClient, __future__.print_function, __future__.absolute_import, ansible.module_utils.docker.common.DockerBaseClass, ansible.module_utils.docker.common.DifferenceTracker, docker.errors.DockerException, ansible.module_utils.six.text_type, docker.errors.APIError, ansible.module_utils.six.iteritems, __future__.division
Function name information from Stable: __init__, present, create_volume, get_existing_volume, absent, remove_volume, has_different_config, main
Function call information from Stable: dict, super, DifferenceTracker, iteritems, AnsibleDockerClient, DockerVolumeManager, text_type, setattr, TaskParameters, main
Class name information from Stable: TaskParameters, DockerVolumeManager
Class method call information from Stable: self.driver, self.driver_options, self.diff_result, self.recreate, differences.get_legacy_docker_diffs, self.force, self.diff, self.create_volume, cm.results, self.check_mode, traceback.format_exc, existing_labels.get, self.labels, client.fail, self.client, self.volume_name, differences.empty, self.has_different_config, self.present, self.diff_tracker, self.debug, self.get_existing_volume, self.remove_volume, self.absent, self.existing_volume, client.module, self.results, self.parameters, differences.add
Target file: drivers, reference, division, __metaclass__, preview, get_existing_volume, Created, COPYING, python, module_utils, inspect_volume, debug, Driver, for, missing, Ansible, elif, local, current, False, Labels, create_volume, docker, must, resp, here, License, actions, is, str, CLI, no, Create, affected, force, name, DOCUMENTATION, Dictionary, Consult, be, differences, The, py, six, requirements, class, can, github, modules, bool, GNU, gronholm, also, Python, iteritems, causes, or, bin, cause, labels, project, choices, short_description, facts, ansible, e, DockerBaseClass, exist, superseded, the, to, General, version_added, creates, been, __init__, used, by, U, else, Please, module, u, btrfs, APIError, object, For, I, supported_by, List, Otherwise, key, differ, existing_volume, Red, should, changed, operate, usr, def, existing_labels, main, docker_volume, it, largely, __future__, provides, Note, Name, on, nextday, This, remove_volume, list, metadata_version, Manage, __name__, that, status, sda2, recommended, With, engine, success, has_different_config, dev, value, absolute_import, EXAMPLES, alex, deleted, dict, _diff, volumes, gnu, driver, Specify, specific, s, None, client, diff, L, from, org, volume_name, remove, same, volume, a, RETURN, self, extends_documentation_fragment, pass, issues, supports_check_mode, txt, existing, ansible_facts, valid, time, params, volume_two, agronholm, type, get, default, Remove, errors, install, commandline, Grönholm, exit_json, party, Volume, Removed, community, does, between, docs, in, print_function, aliases, present, device, will, has, append, Copyright, absent, fail, any, licenses, Options, DockerVolumeManager, pop, gpl, values, docker_common, both, already, options, www, v3, ANSIBLE_METADATA, required, Public, subcommand, results, cm, __main__, coding, com, deletes, not, author, True, Volumes, fi, set, try, except, recreated, return, ImportError, handled, parameters, but, at, AnsibleDockerClient, inspection, check_mode, server, text_type, settings, driver_options, argument_spec, with, all_labels, import, function, lost, C, state, utf, Performs, Return, Alex, if, returned, sample, setattr, see, installed, true, Hat, TaskParameters, https, volume_one, description, super, note, and, volume, of, as, label, data, details, pypi, driver_opts
'''"
-------------------------------------------------------------------------
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"Recom
PRs: 43238, 44783"
-------------------------------------------------------------------------
=========================================================================
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"""Both the `docker` and `docker-py` Python modules should not be installed at the same time. If one of them is uninstalled, the other may no longer function and will require a reinstallation."""
-------------------------------------------------------------------------
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"Recom
PRs: 43238, 44783"
-------------------------------------------------------------------------
=========================================================================
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"Current context: requirements:
      (see L(here,https://github.com/docker/docker-py/issues/1310) for details).
      For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to
      install the C(docker) Python module. Note that both modules should I(not) be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required."""
-------------------------------------------------------------------------
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"Recom
PRs: 43238, 44783"
-------------------------------------------------------------------------
=========================================================================
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"```python
# Current context: requirements:
#        (see L(here,https://github.com/docker/docker-py/issues/1310) for details).
#        For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to
#        install the C(docker) Python module. Note that both modules should I(not) be installed at the same time.
#        Also note that when both modules are installed
#        and one of them is uninstalled, the other might no longer function and a
#        reinstall of it is required.""

```"
-------------------------------------------------------------------------
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"Recom
PRs: 43238, 44783"
-------------------------------------------------------------------------
=========================================================================
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"'''
requirements:
        (see L(here,https://github.com/docker/docker-py/issues/1310) for details).
        For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to
        install the C(docker) Python module. Note that both modules should I(not) 
be installed at the same time. Also note that when both modules are installed 
and one of them is uninstalled, the other might no longer function and a 
reinstall of it is required.""
'''"
-------------------------------------------------------------------------
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"Recom
PRs: 43238, 44783"
-------------------------------------------------------------------------
=========================================================================
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"Adapted metadata:
[2.6] docker modules: improve documentation on docker/docker-py conflict
--##### SUMMARY
Backport of #43238: improves documentation. 
##### ISSUE TYPE
- Docs Pull Request

##### COMPONENT NAME
lib/ansible/module_utils/docker_common.py
docker_container
docker_image
docker_image_facts
docker_login
docker_network
docker_service
docker_volume

##### ANSIBLE VERSION
```2.6.3```"
-------------------------------------------------------------------------
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"Recom
PRs: 43238, 44783"
-------------------------------------------------------------------------
=========================================================================
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"'''
- ""The docker server >= 1.9.0"" dependencies:
    - ansible.module_utils.six
    - __future__
    - docker.errors
    - ansible.module_utils.docker_common

Note that both modules should not be installed at the same time. Also note that when both modules are installed, and one of them is uninstalled, the other might no longer function and a reinstall of it is required.""
'''"
-------------------------------------------------------------------------
"be installed at the same time. Also note that when both modules are installed
and one of them is uninstalled, the other might no longer function and a
reinstall of it is required.""
"
-------------------------------------------------------------------------
"Recom
PRs: 43238, 44783"
-------------------------------------------------------------------------
=========================================================================
"def sanitize_result(data):
""""""Sanitize data object for return to Ansible.

When the data object contains types such as docker.types.containers.HostConfig,
Ansible will fail when these are returned via exit_json or fail_json.
HostConfig is derived from dict, but its constructor requires additional
arguments. This function sanitizes data structures by recursively converting
everything derived from dict to dict and everything derived from list (and tuple)
to a list.
""""""
if isinstance(data, dict):
    return dict((k, sanitize_result(v)) for k, v in data.items())
elif isinstance(data, (list, tuple)):
    return [sanitize_result(v) for v in data]
else:
    return data


"
-------------------------------------------------------------------------
"```python
def sanitize_result(data):
    """"""Sanitize data object for return to Ansible.

    When the data object contains types such as docker.types.containers.HostConfig,
    Ansible will fail when these are returned via exit_json or fail_json.
    HostConfig is derived from dict, but its constructor requires additional
    arguments. This function sanitizes data structures by recursively converting
    everything derived from dict to dict and everything derived from list (and tuple)
    to a list.
    """"""
    if isinstance(data, dict):
        return {k: sanitize_result(v) for k, v in data.items()}
    elif isinstance(data, (list, tuple)):
        return [sanitize_result(v) for v in data]
    else:
        return data
```"
-------------------------------------------------------------------------
"def sanitize_result(data):
""""""Sanitize data object for return to Ansible.

When the data object contains types such as docker.types.containers.HostConfig,
Ansible will fail when these are returned via exit_json or fail_json.
HostConfig is derived from dict, but its constructor requires additional
arguments. This function sanitizes data structures by recursively converting
everything derived from dict to dict and everything derived from list (and tuple)
to a list.
""""""
if isinstance(data, dict):
    return dict((k, sanitize_result(v)) for k, v in data.items())
elif isinstance(data, (list, tuple)):
    return [sanitize_result(v) for v in data]
else:
    return data


"
-------------------------------------------------------------------------
"Recom
PRs: 42380, 44760"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker_common import HAS_DOCKER_PY_2, HAS_DOCKER_PY_3, AnsibleDockerClient, DockerBaseClass, sanitize_result
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker_common import AnsibleDockerClient, DockerBaseClass, sanitize_result
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker_common import HAS_DOCKER_PY_2, HAS_DOCKER_PY_3, AnsibleDockerClient, DockerBaseClass, sanitize_result
"
-------------------------------------------------------------------------
"Recom
PRs: 42380, 44760"
-------------------------------------------------------------------------
=========================================================================
"self.client.module.fail_json(msg=msg, **sanitize_result(kwargs))
"
-------------------------------------------------------------------------
"self.client.module.fail(msg=msg, **sanitize_result(kwargs))"
-------------------------------------------------------------------------
"self.client.module.fail_json(msg=msg, **sanitize_result(kwargs))
"
-------------------------------------------------------------------------
"Recom
PRs: 42380, 44760"
-------------------------------------------------------------------------
=========================================================================
"client.module.exit_json(**sanitize_result(cm.results))
"
-------------------------------------------------------------------------
"```python
client.module.exit_json(**sanitize_result(cm.results))
```"
-------------------------------------------------------------------------
"client.module.exit_json(**sanitize_result(cm.results))
"
-------------------------------------------------------------------------
"Recom
PRs: 42380, 44760"
-------------------------------------------------------------------------
=========================================================================
"gr = GalaxyRole(self.galaxy, path_file, path=path)
"
-------------------------------------------------------------------------
"```python
gr = GalaxyRole(self.galaxy, path_file, path=path)
```"
-------------------------------------------------------------------------
"gr = GalaxyRole(self.galaxy, path_file, path=path)
"
-------------------------------------------------------------------------
"Recom
PRs: 43051, 44583"
-------------------------------------------------------------------------
=========================================================================
"gr = GalaxyRole(self.galaxy, path_file, path=path)
"
-------------------------------------------------------------------------
"```python
gr = GalaxyRole(self.galaxy, path_file, path=path)
```"
-------------------------------------------------------------------------
"gr = GalaxyRole(self.galaxy, path_file, path=path)
"
-------------------------------------------------------------------------
"Recom
PRs: 43051, 44582"
-------------------------------------------------------------------------
=========================================================================
"if self.expires < time.gmtime(0):
    cmd.append('')
else:
    cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
"
-------------------------------------------------------------------------
"```python
if self.expires < time.gmtime(0):
    cmd.append('')
else:
    cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
```"
-------------------------------------------------------------------------
"if self.expires < time.gmtime(0):
    cmd.append('')
else:
    cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
"
-------------------------------------------------------------------------
"Recom
PRs: 44174, 44580"
-------------------------------------------------------------------------
=========================================================================
"if self.expires < time.gmtime(0):
    cmd.append('0')
else:
    cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
"
-------------------------------------------------------------------------
"```python
if self.expires < time.gmtime(0):
    cmd.append('0')
else:
    cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
```"
-------------------------------------------------------------------------
"if self.expires < time.gmtime(0):
    cmd.append('0')
else:
    cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
"
-------------------------------------------------------------------------
"Recom
PRs: 44174, 44580"
-------------------------------------------------------------------------
=========================================================================
"- Path to a file, present on the target, containing environment variables I(FOO=BAR).
"
-------------------------------------------------------------------------
"- Path to a file, present on the target, containing environment variables FOO=BAR."
-------------------------------------------------------------------------
"- Path to a file, present on the target, containing environment variables I(FOO=BAR).
"
-------------------------------------------------------------------------
"Recom
PRs: 44535, 44565"
-------------------------------------------------------------------------
=========================================================================
"- name: Start a container and use an env file
docker_container:
  name: agent
  image: jenkinsci/ssh-slave
  env_file: /var/tmp/jenkins/agent.env

"
-------------------------------------------------------------------------
"- name: Start a container and use an env file
  docker_container:
    name: agent
    image: jenkinsci/ssh-slave
    env_file: /var/tmp/jenkins/agent.env"
-------------------------------------------------------------------------
"- name: Start a container and use an env file
docker_container:
  name: agent
  image: jenkinsci/ssh-slave
  env_file: /var/tmp/jenkins/agent.env
"
-------------------------------------------------------------------------
"Recom
PRs: 44535, 44565"
-------------------------------------------------------------------------
=========================================================================
"- Specify the logging driver. Docker uses I(json-file) by default.
- See L(here,https://docs.docker.com/config/containers/logging/configure/) for possible choices.
quired: false
"
-------------------------------------------------------------------------
"Adapted snippet:

```yaml
log_driver:
  description:
    - Specify the logging driver. Docker uses `json-file` by default.
    - See [here](https://docs.docker.com/config/containers/logging/configure/) for possible choices.
  required: false
```"
-------------------------------------------------------------------------
"- Specify the logging driver. Docker uses I(json-file) by default.
- See L(here,https://docs.docker.com/config/containers/logging/configure/) for possible choices.
quired: false
"
-------------------------------------------------------------------------
"Recom
PRs: 33579, 44563"
-------------------------------------------------------------------------
=========================================================================
"log_driver=dict(type='str'),
"
-------------------------------------------------------------------------
"```python
log_driver=dict(type='str'),
```"
-------------------------------------------------------------------------
"log_driver=dict(type='str'),
"
-------------------------------------------------------------------------
"Recom
PRs: 33579, 44563"
-------------------------------------------------------------------------
=========================================================================
"working_dir=config.get('WorkingDir')
"
-------------------------------------------------------------------------
working_dir=host_config.get('WorkingDir')
-------------------------------------------------------------------------
"working_dir=config.get('WorkingDir')
"
-------------------------------------------------------------------------
"Recom
PRs: 42857, 44522"
-------------------------------------------------------------------------
=========================================================================
"- ""Kernel memory limit (format: C(<number>[<unit>])). Number is a positive integer.
  Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
  C(T) (tebibyte), or C(P) (pebibyte). Minimum is C(4M).""
- Omitting the unit defaults to bytes.
"
-------------------------------------------------------------------------
"```yaml
options:
  kernel_memory:
    description: ""Kernel memory limit. Number is a positive integer.""
    default: 0
  minimum: 4M
```"
-------------------------------------------------------------------------
"- ""Kernel memory limit (format: C(<number>[<unit>])). Number is a positive integer.
  Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
  C(T) (tebibyte), or C(P) (pebibyte). Minimum is C(4M).""
- Omitting the unit defaults to bytes.
"
-------------------------------------------------------------------------
"Recom
PRs: 16748, 44521"
-------------------------------------------------------------------------
=========================================================================
"- ""Memory limit (format: C(<number>[<unit>])). Number is a positive integer.
  Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
  C(T) (tebibyte), or C(P) (pebibyte).""
- Omitting the unit defaults to bytes.
- ""Memory soft limit (format: C(<number>[<unit>])). Number is a positive integer.
  Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
  C(T) (tebibyte), or C(P) (pebibyte).""
- Omitting the unit defaults to bytes.
- ""Total memory limit (memory  swap, format: C(<number>[<unit>])).
  Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B),
  C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte).""
- Omitting the unit defaults to bytes.
"
-------------------------------------------------------------------------
"```python
memory:
  description: ""Memory limit (format: C(<number>[<unit>])). Number is a positive integer. Omitting the unit defaults to bytes.""
  default: '0'
memory_reservation:
  description: ""Memory soft limit (format: C(<number>[<unit>])). Number is a positive integer. Omitting the unit defaults to bytes.""
  default: 0
memory_swap:
  description: ""Total memory limit (memory  swap, format: C(<number>[<unit>])). Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte). Omitting the unit defaults to bytes.""
  default: 0
memory_swappiness:
  description:
```"
-------------------------------------------------------------------------
"- ""Memory limit (format: C(<number>[<unit>])). Number is a positive integer.
  Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
  C(T) (tebibyte), or C(P) (pebibyte).""
- Omitting the unit defaults to bytes.
- ""Memory soft limit (format: C(<number>[<unit>])). Number is a positive integer.
  Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
  C(T) (tebibyte), or C(P) (pebibyte).""
- Omitting the unit defaults to bytes.
- ""Total memory limit (memory  swap, format: C(<number>[<unit>])).
  Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B),
  C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte).""
- Omitting the unit defaults to bytes.
"
-------------------------------------------------------------------------
"Recom
PRs: 16748, 44521"
-------------------------------------------------------------------------
=========================================================================
"- ""Size of C(/dev/shm) (format: C(<number>[<unit>])). Number is positive integer.
  Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
  C(T) (tebibyte), or C(P) (pebibyte).""
- Omitting the unit defaults to bytes. If you omit the size entirely, the system uses C(64M).
"
-------------------------------------------------------------------------
"```python
size:
  description: ""Size of /dev/shm (format: <number>[<unit>]). Number is positive integer.
                Unit can be B (byte), K (kibibyte, 1024B), M (mebibyte), G (gibibyte),
                T (tebibyte), or P (pebibyte). Omitting the unit defaults to bytes.
                If you omit the size entirely, the system uses 64M.""
  default: 64M
```"
-------------------------------------------------------------------------
"- ""Size of C(/dev/shm) (format: C(<number>[<unit>])). Number is positive integer.
  Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte),
  C(T) (tebibyte), or C(P) (pebibyte).""
- Omitting the unit defaults to bytes. If you omit the size entirely, the system uses C(64M).
"
-------------------------------------------------------------------------
"Recom
PRs: 16748, 44521"
-------------------------------------------------------------------------
=========================================================================
"'kernel_memory',
"
-------------------------------------------------------------------------
Please provide more context or clarify your request regarding how the code snippet needs to be adapted.
-------------------------------------------------------------------------
"'kernel_memory',
"
-------------------------------------------------------------------------
"Recom
PRs: 16748, 44521"
-------------------------------------------------------------------------
=========================================================================
"self.connection.passwd_s(self.dn, None, self.passwd)
"
-------------------------------------------------------------------------
"self.connection.passwd_s(self.dn, None, self.passwd)"
-------------------------------------------------------------------------
"self.connection.passwd_s(self.dn, None, self.passwd)
"
-------------------------------------------------------------------------
"Recom
PRs: 44336, 44475"
-------------------------------------------------------------------------
=========================================================================
"if not os.path.isdir('/etc/rc0.d/'):
    return bool(glob.glob('/etc/init.d/rc%s.d/S??%s' % (runlevel, name)))
if not os.path.isdir('/etc/rc0.d/'):
    return bool(glob.glob('/etc/init.d/rc?.d/S??%s' % name))
"
-------------------------------------------------------------------------
"if not os.path.isdir('/etc/rc0.d/'):
    return bool(glob.glob('/etc/init.d/rc%s.d/S??%s' % (runlevel, name)))
if not os.path.isdir('/etc/rc0.d/'):
    return bool(glob.glob('/etc/init.d/rc?.d/S??%s' % name))"
-------------------------------------------------------------------------
"if not os.path.isdir('/etc/rc0.d/'):
    return bool(glob.glob('/etc/init.d/rc%s.d/S??%s' % (runlevel, name)))
if not os.path.isdir('/etc/rc0.d/'):
    return bool(glob.glob('/etc/init.d/rc?.d/S??%s' % name))
"
-------------------------------------------------------------------------
"Recom
PRs: 43018, 44381"
-------------------------------------------------------------------------
=========================================================================
"def check_vendor_specific_dhcp_option(module, ib_spec):
'''This function will check if the argument dhcp option belongs to vendor-specific and if yes then will remove
 use_options flag which is not supported with vendor-specific dhcp options.
'''
for key, value in iteritems(ib_spec):
    if isinstance(module.params[key], list):
        temp_dict = module.params[key][0]
        if 'num' in temp_dict:
            if temp_dict['num'] in (43, 124, 125):
                del module.params[key][0]['use_option']
return ib_spec


"
-------------------------------------------------------------------------
"```python
def check_vendor_specific_dhcp_option(module, ib_spec):
    '''This function will check if the argument dhcp option belongs to vendor-specific and if yes then will remove
    use_options flag which is not supported with vendor-specific dhcp options.
    '''
    for key, value in iteritems(ib_spec):
        if isinstance(module.params[key], list):
            temp_dict = module.params[key][0]
            if 'num' in temp_dict:
                if temp_dict['num'] in (43, 124, 125):
                    del module.params[key][0]['use_option']
    return ib_spec
```"
-------------------------------------------------------------------------
"def check_vendor_specific_dhcp_option(module, ib_spec):
'''This function will check if the argument dhcp option belongs to vendor-specific and if yes then will remove
 use_options flag which is not supported with vendor-specific dhcp options.
'''
for key, value in iteritems(ib_spec):
    if isinstance(module.params[key], list):
        temp_dict = module.params[key][0]
        if 'num' in temp_dict:
            if temp_dict['num'] in (43, 124, 125):
                del module.params[key][0]['use_option']
return ib_spec


"
-------------------------------------------------------------------------
"Recom
PRs: 43925, 44259"
-------------------------------------------------------------------------
=========================================================================
"# to check for vendor specific dhcp option
ib_spec = check_vendor_specific_dhcp_option(module, ib_spec)

"
-------------------------------------------------------------------------
"```python
ib_spec = check_vendor_specific_dhcp_option(module, ib_spec)
```"
-------------------------------------------------------------------------
"# to check for vendor specific dhcp option
ib_spec = check_vendor_specific_dhcp_option(module, ib_spec)

"
-------------------------------------------------------------------------
"Recom
PRs: 43925, 44259"
-------------------------------------------------------------------------
=========================================================================
"def handle_exception(self, method_name, exc):
    if ('text' in exc.response):
        raise Exception(exc.response['text'])
    else:
        raise Exception(exc)
"
-------------------------------------------------------------------------
"```python
def handle_exception(self, method_name, exc):
    if 'text' in exc.response:
        raise Exception(exc.response['text'])
    else:
        raise Exception(exc)
```"
-------------------------------------------------------------------------
"def handle_exception(self, method_name, exc):
    if ('text' in exc.response):
        raise Exception(exc.response['text'])
    else:
        raise Exception(exc)
"
-------------------------------------------------------------------------
"Recom
PRs: 44078, 44254"
-------------------------------------------------------------------------
=========================================================================
"self.check_if_recordname_exists(obj_filter, ib_obj_ref, ib_obj_type, current_object, proposed_object)

"
-------------------------------------------------------------------------
"Add the required dependencies and modify the given code snippet as follows:

```python
import os
from infoblox_client.connector import Connector
from ansible.module_utils import six
import infoblox_client.exceptions
import functools
from ansible.module_utils import _text

class WapiModule(WapiBase):
    self.create_object(ib_obj_type, proposed_object)
result['changed'] = True
elif modified:
    if (ib_obj_type in (NIOS_HOST_RECORD, NIOS_NETWORK_VIEW, NIOS_DNS_VIEW)):
        proposed_object = self.on_update(proposed_object, ib_spec)
        res = self.update_object(ref, proposed_object)
self.check_if_recordname_exists(obj_filter, ib_obj_ref, ib_obj_type, current_object, proposed_object)
```"
-------------------------------------------------------------------------
"self.check_if_recordname_exists(obj_filter, ib_obj_ref, ib_obj_type, current_object, proposed_object)

"
-------------------------------------------------------------------------
"Recom
PRs: 43235, 44088"
-------------------------------------------------------------------------
=========================================================================
"def check_if_recordname_exists(self, obj_filter, ib_obj_ref, ib_obj_type, current_object, proposed_object):
    ''' Send POST request if host record input name and retrieved ref name is same,
        but input IP and retrieved IP is different'''

    if 'name' in (obj_filter and ib_obj_ref[0]) and ib_obj_type == NIOS_HOST_RECORD:
        obj_host_name = obj_filter['name']
        ref_host_name = ib_obj_ref[0]['name']
        if 'ipv4addrs' in (current_object and proposed_object):
            current_ip_addr = current_object['ipv4addrs'][0]['ipv4addr']
            proposed_ip_addr = proposed_object['ipv4addrs'][0]['ipv4addr']
        elif 'ipv6addrs' in (current_object and proposed_object):
            current_ip_addr = current_object['ipv6addrs'][0]['ipv6addr']
            proposed_ip_addr = proposed_object['ipv6addrs'][0]['ipv6addr']

        if obj_host_name == ref_host_name and current_ip_addr != proposed_ip_addr:
            self.create_object(ib_obj_type, proposed_object)

"
-------------------------------------------------------------------------
"```python
    def check_if_recordname_exists(self, obj_filter, ib_obj_ref, ib_obj_type, current_object, proposed_object):
        ''' Send POST request if host record input name and retrieved ref name is same,
            but input IP and retrieved IP is different'''

        if 'name' in obj_filter and ib_obj_ref[0] and ib_obj_type == NIOS_HOST_RECORD:
            obj_host_name = obj_filter['name']
            ref_host_name = ib_obj_ref[0]['name']
            if 'ipv4addrs' in current_object and proposed_object:
                current_ip_addr = current_object['ipv4addrs'][0]['ipv4addr']
                proposed_ip_addr = proposed_object['ipv4addrs'][0]['ipv4addr']
            elif 'ipv6addrs' in current_object and proposed_object:
                current_ip_addr = current_object['ipv6addrs'][0]['ipv6addr']
                proposed_ip_addr = proposed_object['ipv6addrs'][0]['ipv6addr']

            if obj_host_name == ref_host_name and current_ip_addr != proposed_ip_addr:
                self.create_object(ib_obj_type, proposed_object)
```"
-------------------------------------------------------------------------
"def check_if_recordname_exists(self, obj_filter, ib_obj_ref, ib_obj_type, current_object, proposed_object):
    ''' Send POST request if host record input name and retrieved ref name is same,
        but input IP and retrieved IP is different'''

    if 'name' in (obj_filter and ib_obj_ref[0]) and ib_obj_type == NIOS_HOST_RECORD:
        obj_host_name = obj_filter['name']
        ref_host_name = ib_obj_ref[0]['name']
        if 'ipv4addrs' in (current_object and proposed_object):
            current_ip_addr = current_object['ipv4addrs'][0]['ipv4addr']
            proposed_ip_addr = proposed_object['ipv4addrs'][0]['ipv4addr']
        elif 'ipv6addrs' in (current_object and proposed_object):
            current_ip_addr = current_object['ipv6addrs'][0]['ipv6addr']
            proposed_ip_addr = proposed_object['ipv6addrs'][0]['ipv6addr']

        if obj_host_name == ref_host_name and current_ip_addr != proposed_ip_addr:
            self.create_object(ib_obj_type, proposed_object)

"
-------------------------------------------------------------------------
"Recom
PRs: 43235, 44088"
-------------------------------------------------------------------------
=========================================================================
"# Allow variables to be used in vars_prompt fields.
setattr(play, 'vars_prompt', templar.template(play.vars_prompt))
    for var in play.vars_prompt:
"
-------------------------------------------------------------------------
"```python
setattr(play, 'vars_prompt', templar.template(play.vars_prompt))
for var in play.vars_prompt:
```"
-------------------------------------------------------------------------
"# Allow variables to be used in vars_prompt fields.
setattr(play, 'vars_prompt', templar.template(play.vars_prompt))
    for var in play.vars_prompt:
"
-------------------------------------------------------------------------
"Recom
PRs: 39304, 44082"
-------------------------------------------------------------------------
=========================================================================
"# Post validate so any play level variables are templated
all_vars = self._variable_manager.get_vars(play=play)
templar = Templar(loader=self._loader, variables=all_vars)
play.post_validate(templar)
    entry['plays'].append(play)
"
-------------------------------------------------------------------------
"```python
# Post validate so any play level variables are templated
all_vars = self._variable_manager.get_vars(play=play)
templar = Templar(loader=self._loader, variables=all_vars)
play.post_validate(templar)
entry['plays'].append(play)
```"
-------------------------------------------------------------------------
"# Post validate so any play level variables are templated
all_vars = self._variable_manager.get_vars(play=play)
templar = Templar(loader=self._loader, variables=all_vars)
play.post_validate(templar)
    entry['plays'].append(play)
"
-------------------------------------------------------------------------
"Recom
PRs: 39304, 44082"
-------------------------------------------------------------------------
=========================================================================
"batches = self._get_serialized_batches(play)
    self._tqm.send_callback('v2_playbook_on_play_start', play)
"
-------------------------------------------------------------------------
"```python
batches = self._get_serialized_batches(play)
self._tqm.send_callback('v2_playbook_on_play_start', play)
```"
-------------------------------------------------------------------------
"batches = self._get_serialized_batches(play)
    self._tqm.send_callback('v2_playbook_on_play_start', play)
"
-------------------------------------------------------------------------
"Recom
PRs: 39304, 44082"
-------------------------------------------------------------------------
=========================================================================
"_vars_prompt = FieldAttribute(isa='list', default=[], always_post_validate=False)
"
-------------------------------------------------------------------------
"_vars_prompt = FieldAttribute(isa='list', default=[], always_post_validate=False)"
-------------------------------------------------------------------------
"_vars_prompt = FieldAttribute(isa='list', default=[], always_post_validate=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 39304, 44082"
-------------------------------------------------------------------------
=========================================================================
"# Allow variables to be used in vars_prompt fields.
setattr(play, 'vars_prompt', templar.template(play.vars_prompt))
    for var in play.vars_prompt:
"
-------------------------------------------------------------------------
"```python
setattr(play, 'vars_prompt', templar.template(play.vars_prompt))
for var in play.vars_prompt:
```  "
-------------------------------------------------------------------------
"# Allow variables to be used in vars_prompt fields.
setattr(play, 'vars_prompt', templar.template(play.vars_prompt))
    for var in play.vars_prompt:
"
-------------------------------------------------------------------------
"Recom
PRs: 39304, 44081"
-------------------------------------------------------------------------
=========================================================================
"# Post validate so any play level variables are templated
all_vars = self._variable_manager.get_vars(play=play)
templar = Templar(loader=self._loader, variables=all_vars)
play.post_validate(templar)
    entry['plays'].append(play)
"
-------------------------------------------------------------------------
"```python
# Post validate so any play level variables are templated
all_vars = self._variable_manager.get_vars(play=play)
templar = Templar(loader=self._loader, variables=all_vars)
play.post_validate(templar)
entry['plays'].append(play)
```"
-------------------------------------------------------------------------
"# Post validate so any play level variables are templated
all_vars = self._variable_manager.get_vars(play=play)
templar = Templar(loader=self._loader, variables=all_vars)
play.post_validate(templar)
    entry['plays'].append(play)
"
-------------------------------------------------------------------------
"Recom
PRs: 39304, 44081"
-------------------------------------------------------------------------
=========================================================================
"batches = self._get_serialized_batches(play)
    self._tqm.send_callback('v2_playbook_on_play_start', play)
"
-------------------------------------------------------------------------
"```python
import os
import pexpect
import ansible.module_utils.six
import sys

class PlaybookExecutor:
    
    def run_playbook(self, play):
        batches = self._get_serialized_batches(play)
        self._tqm.send_callback('v2_playbook_on_play_start', play)

    def _get_serialized_batches(self, play):
        # Implementation of _get_serialized_batches method goes here
        pass
```"
-------------------------------------------------------------------------
"batches = self._get_serialized_batches(play)
    self._tqm.send_callback('v2_playbook_on_play_start', play)
"
-------------------------------------------------------------------------
"Recom
PRs: 39304, 44081"
-------------------------------------------------------------------------
=========================================================================
"_vars_prompt = FieldAttribute(isa='list', default=[], always_post_validate=False)
"
-------------------------------------------------------------------------
"_vars_prompt = FieldAttribute(isa='list', default=[], always_post_validate=False)"
-------------------------------------------------------------------------
"_vars_prompt = FieldAttribute(isa='list', default=[], always_post_validate=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 39304, 44081"
-------------------------------------------------------------------------
=========================================================================
"if want == have:
    # Nothing to commit
    return commands
else:
"
-------------------------------------------------------------------------
"```python
if want == have:
    # Nothing to commit
    return commands
else:
```"
-------------------------------------------------------------------------
"if want == have:
    # Nothing to commit
    return commands
else:
"
-------------------------------------------------------------------------
"Recom
PRs: 43869, 44002"
-------------------------------------------------------------------------
=========================================================================
"obj['value'] = str(col_value.strip())
"
-------------------------------------------------------------------------
"from __future__ import absolute_import, print_function

def map_config_to_obj(module):
    obj['key'] = module.params['key']
    obj['value'] = str(col_value.strip())
    return obj"
-------------------------------------------------------------------------
"obj['value'] = str(col_value.strip())
"
-------------------------------------------------------------------------
"Recom
PRs: 43869, 44002"
-------------------------------------------------------------------------
=========================================================================
"'value': {'required': True, 'type': 'str'},
"
-------------------------------------------------------------------------
"def main():
    'record': {'required': True},
    'col': {'required': True, 'type': 'str'},
    'key': {'required': False},
    'timeout': {'default': 5, 'type': 'int'},
}"
-------------------------------------------------------------------------
"'value': {'required': True, 'type': 'str'},
"
-------------------------------------------------------------------------
"Recom
PRs: 43869, 44002"
-------------------------------------------------------------------------
=========================================================================
"commands=['/usr/bin/ovs-vsctl -t 5 set Bridge test-br other_config'
          ':disable-in-band=True'],
"
-------------------------------------------------------------------------
"```python
commands=['/usr/bin/ovs-vsctl set Bridge test-br other_config:disable-in-band=True'],
```"
-------------------------------------------------------------------------
"commands=['/usr/bin/ovs-vsctl -t 5 set Bridge test-br other_config'
          ':disable-in-band=True'],
"
-------------------------------------------------------------------------
"Recom
PRs: 43869, 44002"
-------------------------------------------------------------------------
=========================================================================
"if want == have:
    # Nothing to commit
    return commands
else:
"
-------------------------------------------------------------------------
"```python
if want == have:
    # Nothing to commit
    return commands
else:
```"
-------------------------------------------------------------------------
"if want == have:
    # Nothing to commit
    return commands
else:
"
-------------------------------------------------------------------------
"Recom
PRs: 43869, 43914"
-------------------------------------------------------------------------
=========================================================================
"obj['value'] = str(col_value.strip())
"
-------------------------------------------------------------------------
"```python
obj['value'] = str(col_value.strip())
```"
-------------------------------------------------------------------------
"obj['value'] = str(col_value.strip())
"
-------------------------------------------------------------------------
"Recom
PRs: 43869, 43914"
-------------------------------------------------------------------------
=========================================================================
"'value': {'required': True, 'type': 'str'},
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, division, print_function
import ansible.compat.tests.mock as mock
import ansible.modules.network.ovs as ovs_module
import units.modules.utils
import openvswitch_db

def main():
    metadata = {
        'record': {'required': True},
        'col': {'required': True},
        'key': {'required': False},
        'timeout': {'default': 5, 'type': 'int'},
        'value': {'required': True, 'type': 'str'},
    }
```"
-------------------------------------------------------------------------
"'value': {'required': True, 'type': 'str'},
"
-------------------------------------------------------------------------
"Recom
PRs: 43869, 43914"
-------------------------------------------------------------------------
=========================================================================
"commands=['/usr/bin/ovs-vsctl -t 5 set Bridge test-br other_config'
          ':disable-in-band=True'],
"
-------------------------------------------------------------------------
"```python
commands=['/usr/bin/ovs-vsctl -t 5 set Bridge test-br other_config:disable-in-band=True'],
```"
-------------------------------------------------------------------------
"commands=['/usr/bin/ovs-vsctl -t 5 set Bridge test-br other_config'
          ':disable-in-band=True'],
"
-------------------------------------------------------------------------
"Recom
PRs: 43869, 43914"
-------------------------------------------------------------------------
=========================================================================
"if enabled is not None and enabled != runlevel_status[""enabled""]:
"
-------------------------------------------------------------------------
"```python
if enabled is not None and enabled != runlevel_status.get(""enabled""):
```"
-------------------------------------------------------------------------
"if enabled is not None and enabled != runlevel_status[""enabled""]:
"
-------------------------------------------------------------------------
"Recom
PRs: 42786, 43831"
-------------------------------------------------------------------------
=========================================================================
"args = module.params['arguments']
cmd = ""%s %s %s"" % (script, doit, """" if args is None else args)

"
-------------------------------------------------------------------------
"```python
args = module.params['arguments']
cmd = ""%s %s %s"" % (script, doit, """" if args is None else args)
```"
-------------------------------------------------------------------------
"args = module.params['arguments']
cmd = ""%s %s %s"" % (script, doit, """" if args is None else args)

"
-------------------------------------------------------------------------
"Recom
PRs: 42786, 43831"
-------------------------------------------------------------------------
=========================================================================
"description: Information about SNMP settings.
type: complex
returned: always
contains:
    hostname:
        description: Hostname of SNMP server.
        returned: success
        type: string
        sample: n1.meraki.com
    peerIps:
        description: Semi-colon delimited list of IPs which can poll SNMP information.
        returned: success
        type: string
        sample: 192.0.1.1
    port:
        description: Port number of SNMP.
        returned: success
        type: string
        sample: 16100
    v2cEnabled:
        description: Shows enabled state of SNMPv2c
        returned: success
        type: bool
        sample: true
    v3Enabled:
        description: Shows enabled state of SNMPv3
        returned: success
        type: bool
        sample: true
    v3AuthMode:
        description: The SNMP version 3 authentication mode either MD5 or SHA.
        returned: success
        type: string
        sample: SHA
    v3PrivMode:
        description: The SNMP version 3 privacy mode DES or AES128.
        returned: success
        type: string
        sample: AES128
    v2CommunityString:
        description: Automatically generated community string for SNMPv2c.
        returned: When SNMPv2c is enabled.
        type: string
        sample: o/8zd-JaSb
    v3User:
        description: Automatically generated username for SNMPv3.
        returned: When SNMPv3c is enabled.
        type: string
        sample: o/8zd-JaSb
"
-------------------------------------------------------------------------
"```python
RETURN = r'''
data:
    hostname:
        description: Hostname of SNMP server.
        returned: success
        type: string
        sample: n1.meraki.com
    peerIps:
        description: Semi-colon delimited list of IPs which can poll SNMP information.
        returned: success
        type: string
        sample: 192.0.1.1
    port:
        description: Port number of SNMP.
        returned: success
        type: string
        sample: 16100
    v2cEnabled:
        description: Shows enabled state of SNMPv2c
        returned: success
        type: bool
        sample: true
    v3Enabled:
        description: Shows enabled state of SNMPv3
        returned: success
        type: bool
        sample: true
    v3AuthMode:
        description: The SNMP version 3 authentication mode either MD5 or SHA.
        returned: success
        type: string
        sample: SHA
    v3PrivMode:
        description: The SNMP version 3 privacy mode DES or AES128.
        returned: success
        type: string
        sample: AES128
    v2CommunityString:
        description: Automatically generated community string for SNMPv2c.
        returned: When SNMPv2c is enabled.
        type: string
        sample: o/8zd-JaSb
    v3User:
        description: Automatically generated username for SNMPv3.
        returned: When SNMPv3c is enabled.
        type: string
        sample: o/8zd-JaSb
'''
```"
-------------------------------------------------------------------------
"description: Information about SNMP settings.
type: complex
returned: always
contains:
    hostname:
        description: Hostname of SNMP server.
        returned: success
        type: string
        sample: n1.meraki.com
    peerIps:
        description: Semi-colon delimited list of IPs which can poll SNMP information.
        returned: success
        type: string
        sample: 192.0.1.1
    port:
        description: Port number of SNMP.
        returned: success
        type: string
        sample: 16100
    v2cEnabled:
        description: Shows enabled state of SNMPv2c
        returned: success
        type: bool
        sample: true
    v3Enabled:
        description: Shows enabled state of SNMPv3
        returned: success
        type: bool
        sample: true
    v3AuthMode:
        description: The SNMP version 3 authentication mode either MD5 or SHA.
        returned: success
        type: string
        sample: SHA
    v3PrivMode:
        description: The SNMP version 3 privacy mode DES or AES128.
        returned: success
        type: string
        sample: AES128
    v2CommunityString:
        description: Automatically generated community string for SNMPv2c.
        returned: When SNMPv2c is enabled.
        type: string
        sample: o/8zd-JaSb
    v3User:
        description: Automatically generated username for SNMPv3.
        returned: When SNMPv3c is enabled.
        type: string
        sample: o/8zd-JaSb
"
-------------------------------------------------------------------------
"Recom
PRs: 42488, 43659"
-------------------------------------------------------------------------
=========================================================================
"import os.path
"
-------------------------------------------------------------------------
"```python
import os.path
```"
-------------------------------------------------------------------------
"if warnings is None:
    # Note: In this case, warnings does nothing
    warnings = set()

# A value that can never be a valid path so that we can tell if ANSIBLE_CONFIG was set later
# We can't use None because we could set path to None.
SENTINEL = object

potential_paths = []

# Environment setting
path_from_env = os.getenv(""ANSIBLE_CONFIG"", SENTINEL)
if path_from_env is not SENTINEL:
    path_from_env = unfrackpath(path_from_env, follow=False)
    if os.path.isdir(path_from_env):
        path_from_env = os.path.join(path_from_env, ""ansible.cfg"")
    potential_paths.append(path_from_env)

# Current working directory
warn_cmd_public = False
    cwd = os.getcwd()
    perms = os.stat(cwd)
    if perms.st_mode & stat.S_IWOTH:
        warn_cmd_public = True
        potential_paths.append(os.path.join(cwd, ""ansible.cfg""))
    # If we can't access cwd, we'll simply skip it as a possible config source
    pass

# Per user location
potential_paths.append(unfrackpath(""~/.ansible.cfg"", follow=False))
# System location
potential_paths.append(""/etc/ansible/ansible.cfg"")

for path in potential_paths:
    if os.path.exists(path):
# Emit a warning if all the following are true:
# * We did not use a config from ANSIBLE_CONFIG
# * There's an ansible.cfg in the current working directory that we skipped
if path_from_env != path and warn_cmd_public:
    warnings.add(u""Ansible is being run in a world writable directory (%s),""
                 u"" ignoring it as an ansible.cfg source.""
                 u"" For more information see""
                 u"" https://docs.ansible.com/ansible/devel/reference_appendices/config.html#cfg-in-world-writable-dir""
                 % to_text(cwd))

"
-------------------------------------------------------------------------
"Recom
PRs: 43583, 43649"
-------------------------------------------------------------------------
=========================================================================
"if warnings is None:
    # Note: In this case, warnings does nothing
    warnings = set()

# A value that can never be a valid path so that we can tell if ANSIBLE_CONFIG was set later
# We can't use None because we could set path to None.
SENTINEL = object

potential_paths = []

# Environment setting
path_from_env = os.getenv(""ANSIBLE_CONFIG"", SENTINEL)
if path_from_env is not SENTINEL:
    path_from_env = unfrackpath(path_from_env, follow=False)
    if os.path.isdir(path_from_env):
        path_from_env = os.path.join(path_from_env, ""ansible.cfg"")
    potential_paths.append(path_from_env)

# Current working directory
warn_cmd_public = False
    cwd = os.getcwd()
    perms = os.stat(cwd)
    if perms.st_mode & stat.S_IWOTH:
        warn_cmd_public = True
        potential_paths.append(os.path.join(cwd, ""ansible.cfg""))
    # If we can't access cwd, we'll simply skip it as a possible config source
    pass

# Per user location
potential_paths.append(unfrackpath(""~/.ansible.cfg"", follow=False))
# System location
potential_paths.append(""/etc/ansible/ansible.cfg"")

for path in potential_paths:
    if os.path.exists(path):
# Emit a warning if all the following are true:
# * We did not use a config from ANSIBLE_CONFIG
# * There's an ansible.cfg in the current working directory that we skipped
if path_from_env != path and warn_cmd_public:
    warnings.add(u""Ansible is being run in a world writable directory (%s),""
                 u"" ignoring it as an ansible.cfg source.""
                 u"" For more information see""
                 u"" https://docs.ansible.com/ansible/devel/reference_appendices/config.html#cfg-in-world-writable-dir""
                 % to_text(cwd))

"
-------------------------------------------------------------------------
"```python
import os
import stat

def find_ini_config_file(warnings=None):
    ''' Load INI Config File order(first found is used): ENV, CWD, HOME, /etc/ansible '''
    
    if warnings is None:
        # Note: In this case, warnings does nothing
        warnings = set()

    # A value that can never be a valid path so that we can tell if ANSIBLE_CONFIG was set later
    # We can't use None because we could set path to None.
    SENTINEL = object

    potential_paths = []

    # Environment setting
    path_from_env = os.getenv(""ANSIBLE_CONFIG"", SENTINEL)
    if path_from_env is not SENTINEL:
        path_from_env = unfrackpath(path_from_env, follow=False)
        if os.path.isdir(path_from_env):
            path_from_env = os.path.join(path_from_env, ""ansible.cfg"")
        potential_paths.append(path_from_env)

    # Current working directory
    warn_cmd_public = False
    try:
        cwd = os.getcwd()
        perms = os.stat(cwd)
        if perms.st_mode & stat.S_IWOTH:
            warn_cmd_public = True
            potential_paths.append(os.path.join(cwd, ""ansible.cfg""))
    except Exception:
        # If we can't access cwd, we'll simply skip it as a possible config source
        pass

    # Per user location
    potential_paths.append(unfrackpath(""~/.ansible.cfg"", follow=False))
    # System location
    potential_paths.append(""/etc/ansible/ansible.cfg"")

    for path in potential_paths:
        if os.path.exists(path):
            # Emit a warning if all the following are true:
            # * We did not use a config from ANSIBLE_CONFIG
            # * There's an ansible.cfg in the current working directory that we skipped
            if path_from_env != path and warn_cmd_public:
                warnings.add(u""Ansible is being run in a world writable directory (%s),""
                            u"" ignoring it as an ansible.cfg source.""
                            u"" For more information see""
                            u"" https://docs.ansible.com/ansible/devel/reference_appendices/config.html#cfg-in-world-writable-dir""
                            % to_text(cwd))
    
    path = None
    return path
```"
-------------------------------------------------------------------------
"# -*- coding: utf-8 -*-
# Copyright: (c) 2017, Ansible Project
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# Make coding more python3-ish
from __future__ import (absolute_import, division)
__metaclass__ = type

import os
import os.path
import stat

import pytest

from ansible.config.manager import find_ini_config_file


real_exists = os.path.exists
real_isdir = os.path.isdir

working_dir = os.path.dirname(__file__)
cfg_in_cwd = os.path.join(working_dir, 'ansible.cfg')

cfg_dir = os.path.join(working_dir, 'data')
cfg_file = os.path.join(cfg_dir, 'ansible.cfg')
alt_cfg_file = os.path.join(cfg_dir, 'test.cfg')
cfg_in_homedir = os.path.expanduser('~/.ansible.cfg')


@pytest.fixture
def setup_env(request):
cur_config = os.environ.get('ANSIBLE_CONFIG', None)
cfg_path = request.param[0]

if cfg_path is None and cur_config:
    del os.environ['ANSIBLE_CONFIG']
else:
    os.environ['ANSIBLE_CONFIG'] = request.param[0]

yield

if cur_config is None and cfg_path:
    del os.environ['ANSIBLE_CONFIG']
else:
    os.environ['ANSIBLE_CONFIG'] = cur_config


est.fixture
setup_existing_files(request, monkeypatch):
def _os_path_exists(path):
    if path in (request.param[0]):
        return True
    else:
        return False

# Enable user and system dirs so that we know cwd takes precedence
monkeypatch.setattr(""os.path.exists"", _os_path_exists)
monkeypatch.setattr(""os.getcwd"", lambda: os.path.dirname(cfg_dir))
monkeypatch.setattr(""os.path.isdir"", lambda path: True if path == cfg_dir else real_isdir(path))


s TestFindIniFile:
# This tells us to run twice, once with a file specified and once with a directory
@pytest.mark.parametrize('setup_env, expected', (([alt_cfg_file], alt_cfg_file), ([cfg_dir], cfg_file)), indirect=['setup_env'])
# This just passes the list of files that exist to the fixture
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_in_cwd, alt_cfg_file, cfg_file)]],
                         indirect=['setup_existing_files'])
def test_env_has_cfg_file(self, setup_env, setup_existing_files, expected):
    """"""ANSIBLE_CONFIG is specified, use it""""""
    warnings = set()
    assert find_ini_config_file(warnings) == expected
    assert warnings == set()

@pytest.mark.parametrize('setup_env', ([alt_cfg_file], [cfg_dir]), indirect=['setup_env'])
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_in_cwd)]],
                         indirect=['setup_existing_files'])
def test_env_has_no_cfg_file(self, setup_env, setup_existing_files):
    """"""ANSIBLE_CONFIG is specified but the file does not exist""""""

    warnings = set()
    # since the cfg file specified by ANSIBLE_CONFIG doesn't exist, the one at cwd that does
    # exist should be returned
    assert find_ini_config_file(warnings) == cfg_in_cwd
    assert warnings == set()

# ANSIBLE_CONFIG not specified
@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# All config files are present
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_in_cwd, cfg_file, alt_cfg_file)]],
                         indirect=['setup_existing_files'])
def test_ini_in_cwd(self, setup_env, setup_existing_files):
    """"""ANSIBLE_CONFIG not specified.  Use the cwd cfg""""""
    warnings = set()
    assert find_ini_config_file(warnings) == cfg_in_cwd
    assert warnings == set()

# ANSIBLE_CONFIG not specified
@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# No config in cwd
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_file, alt_cfg_file)]],
                         indirect=['setup_existing_files'])
def test_ini_in_homedir(self, setup_env, setup_existing_files):
    """"""First config found is in the homedir""""""
    warnings = set()
    assert find_ini_config_file(warnings) == cfg_in_homedir
    assert warnings == set()

# ANSIBLE_CONFIG not specified
@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# No config in cwd
@pytest.mark.parametrize('setup_existing_files', [[('/etc/ansible/ansible.cfg', cfg_file, alt_cfg_file)]], indirect=['setup_existing_files'])
def test_ini_in_systemdir(self, setup_env, setup_existing_files):
    """"""First config found is the system config""""""
    warnings = set()
    assert find_ini_config_file(warnings) == '/etc/ansible/ansible.cfg'
    assert warnings == set()

# ANSIBLE_CONFIG not specified
@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# No config in cwd
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_file, alt_cfg_file)]],
                         indirect=['setup_existing_files'])
def test_cwd_does_not_exist(self, setup_env, setup_existing_files, monkeypatch):
    """"""Smoketest current working directory doesn't exist""""""
    def _os_stat(path):
        raise OSError('%s does not exist' % path)
    monkeypatch.setattr('os.stat', _os_stat)

    warnings = set()
    assert find_ini_config_file(warnings) == cfg_in_homedir
    assert warnings == set()

@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# No config in cwd
@pytest.mark.parametrize('setup_existing_files', [[list()]], indirect=['setup_existing_files'])
def test_no_config(self, setup_env, setup_existing_files):
    """"""No config present, no config found""""""
    warnings = set()
    assert find_ini_config_file(warnings) is None
    assert warnings == set()

# ANSIBLE_CONFIG not specified
@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# All config files are present
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_in_cwd, cfg_file, alt_cfg_file)]],
                         indirect=['setup_existing_files'])
def test_cwd_warning_on_writable(self, setup_env, setup_existing_files, monkeypatch):
    """"""If the cwd is writable, warn and skip it """"""
    real_stat = os.stat

    def _os_stat(path):
        if path == working_dir:
            from posix import stat_result
            stat_info = list(real_stat(path))
            stat_info[stat.ST_MODE] |= stat.S_IWOTH
            return stat_result(stat_info)
        else:
            return real_stat(path)

    monkeypatch.setattr('os.stat', _os_stat)

    warnings = set()
    assert find_ini_config_file(warnings) == cfg_in_homedir
    assert len(warnings) == 1
    warning = warnings.pop()
    assert u'Ansible is being run in a world writable directory' in warning
    assert u'ignoring it as an ansible.cfg source' in warning

# ANSIBLE_CONFIG is sepcified
@pytest.mark.parametrize('setup_env, expected', (([alt_cfg_file], alt_cfg_file), ([cfg_in_cwd], cfg_in_cwd)), indirect=['setup_env'])
# All config files are present
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_in_cwd, cfg_file, alt_cfg_file)]],
                         indirect=['setup_existing_files'])
def test_no_warning_on_writable_if_env_used(self, setup_env, setup_existing_files, monkeypatch, expected):
    """"""If the cwd is writable but ANSIBLE_CONFIG was used, no warning should be issued""""""
    real_stat = os.stat

    def _os_stat(path):
        if path == working_dir:
            from posix import stat_result
            stat_info = list(real_stat(path))
            stat_info[stat.ST_MODE] |= stat.S_IWOTH
            return stat_result(stat_info)
        else:
            return real_stat(path)

    monkeypatch.setattr('os.stat', _os_stat)

    warnings = set()
    assert find_ini_config_file(warnings) == expected
    assert warnings == set()

# ANSIBLE_CONFIG not specified
@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# All config files are present
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_in_cwd, cfg_file, alt_cfg_file)]],
                         indirect=['setup_existing_files'])
def test_cwd_warning_on_writable_no_warning_set(self, setup_env, setup_existing_files, monkeypatch):
    """"""Smoketest that the function succeeds even though no warning set was passed in""""""
    real_stat = os.stat

    def _os_stat(path):
        if path == working_dir:
            from posix import stat_result
            stat_info = list(real_stat(path))
            stat_info[stat.ST_MODE] |= stat.S_IWOTH
            return stat_result(stat_info)
        else:
            return real_stat(path)

    monkeypatch.setattr('os.stat', _os_stat)

    assert find_ini_config_file() == cfg_in_homedir
"
-------------------------------------------------------------------------
"Recom
PRs: 43583, 43649"
-------------------------------------------------------------------------
=========================================================================
"import os.path
"
-------------------------------------------------------------------------
"```python
import os
```"
-------------------------------------------------------------------------
"if warnings is None:
    # Note: In this case, warnings does nothing
    warnings = set()

# A value that can never be a valid path so that we can tell if ANSIBLE_CONFIG was set later
# We can't use None because we could set path to None.
SENTINEL = object

potential_paths = []

# Environment setting
path_from_env = os.getenv(""ANSIBLE_CONFIG"", SENTINEL)
if path_from_env is not SENTINEL:
    path_from_env = unfrackpath(path_from_env, follow=False)
    if os.path.isdir(path_from_env):
        path_from_env = os.path.join(path_from_env, ""ansible.cfg"")
    potential_paths.append(path_from_env)

# Current working directory
warn_cmd_public = False
    cwd = os.getcwd()
    perms = os.stat(cwd)
    if perms.st_mode & stat.S_IWOTH:
        warn_cmd_public = True
        potential_paths.append(os.path.join(cwd, ""ansible.cfg""))
    # If we can't access cwd, we'll simply skip it as a possible config source
    pass

# Per user location
potential_paths.append(unfrackpath(""~/.ansible.cfg"", follow=False))
# System location
potential_paths.append(""/etc/ansible/ansible.cfg"")

for path in potential_paths:
    if os.path.exists(path):
# Emit a warning if all the following are true:
# * We did not use a config from ANSIBLE_CONFIG
# * There's an ansible.cfg in the current working directory that we skipped
if path_from_env != path and warn_cmd_public:
    warnings.add(u""Ansible is being run in a world writable directory (%s),""
                 u"" ignoring it as an ansible.cfg source.""
                 u"" For more information see""
                 u"" https://docs.ansible.com/ansible/devel/reference_appendices/config.html#cfg-in-world-writable-dir""
                 % to_text(cwd))

"
-------------------------------------------------------------------------
"Recom
PRs: 43583, 43648"
-------------------------------------------------------------------------
=========================================================================
"if warnings is None:
    # Note: In this case, warnings does nothing
    warnings = set()

# A value that can never be a valid path so that we can tell if ANSIBLE_CONFIG was set later
# We can't use None because we could set path to None.
SENTINEL = object

potential_paths = []

# Environment setting
path_from_env = os.getenv(""ANSIBLE_CONFIG"", SENTINEL)
if path_from_env is not SENTINEL:
    path_from_env = unfrackpath(path_from_env, follow=False)
    if os.path.isdir(path_from_env):
        path_from_env = os.path.join(path_from_env, ""ansible.cfg"")
    potential_paths.append(path_from_env)

# Current working directory
warn_cmd_public = False
    cwd = os.getcwd()
    perms = os.stat(cwd)
    if perms.st_mode & stat.S_IWOTH:
        warn_cmd_public = True
        potential_paths.append(os.path.join(cwd, ""ansible.cfg""))
    # If we can't access cwd, we'll simply skip it as a possible config source
    pass

# Per user location
potential_paths.append(unfrackpath(""~/.ansible.cfg"", follow=False))
# System location
potential_paths.append(""/etc/ansible/ansible.cfg"")

for path in potential_paths:
    if os.path.exists(path):
# Emit a warning if all the following are true:
# * We did not use a config from ANSIBLE_CONFIG
# * There's an ansible.cfg in the current working directory that we skipped
if path_from_env != path and warn_cmd_public:
    warnings.add(u""Ansible is being run in a world writable directory (%s),""
                 u"" ignoring it as an ansible.cfg source.""
                 u"" For more information see""
                 u"" https://docs.ansible.com/ansible/devel/reference_appendices/config.html#cfg-in-world-writable-dir""
                 % to_text(cwd))

"
-------------------------------------------------------------------------
"```python
import os
import stat

def find_ini_config_file(warnings=None):
    ''' Load INI Config File order(first found is used): ENV, CWD, HOME, /etc/ansible '''
    # FIXME: eventually deprecate ini configs
    
    if warnings is None:
        # Note: In this case, warnings does nothing
        warnings = set()

    # A value that can never be a valid path so that we can tell if ANSIBLE_CONFIG was set later
    # We can't use None because we could set path to None.
    SENTINEL = object

    potential_paths = []

    # Environment setting
    path_from_env = os.getenv(""ANSIBLE_CONFIG"", SENTINEL)
    if path_from_env is not SENTINEL:
        path_from_env = unfrackpath(path_from_env, follow=False)
        if os.path.isdir(path_from_env):
            path_from_env = os.path.join(path_from_env, ""ansible.cfg"")
        potential_paths.append(path_from_env)

    # Current working directory
    warn_cmd_public = False
    cwd = os.getcwd()
    perms = os.stat(cwd)
    if perms.st_mode & stat.S_IWOTH:
        warn_cmd_public = True
        potential_paths.append(os.path.join(cwd, ""ansible.cfg""))
        # If we can't access cwd, we'll simply skip it as a possible config source

    # Per user location
    potential_paths.append(unfrackpath(""~/.ansible.cfg"", follow=False))
    # System location
    potential_paths.append(""/etc/ansible/ansible.cfg"")

    for path in potential_paths:
        if os.path.exists(path):
            # Emit a warning if all the following are true:
            # * We did not use a config from ANSIBLE_CONFIG
            # * There's an ansible.cfg in the current working directory that we skipped
            if path_from_env != path and warn_cmd_public:
                warnings.add(u""Ansible is being run in a world writable directory (%s),""
                             u"" ignoring it as an ansible.cfg source.""
                             u"" For more information see""
                             u"" https://docs.ansible.com/ansible/devel/reference_appendices/config.html#cfg-in-world-writable-dir""
                             % to_text(cwd))

    return path
```"
-------------------------------------------------------------------------
"# -*- coding: utf-8 -*-
# Copyright: (c) 2017, Ansible Project
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# Make coding more python3-ish
from __future__ import (absolute_import, division)
__metaclass__ = type

import os
import os.path
import stat

import pytest

from ansible.config.manager import find_ini_config_file


real_exists = os.path.exists
real_isdir = os.path.isdir

working_dir = os.path.dirname(__file__)
cfg_in_cwd = os.path.join(working_dir, 'ansible.cfg')

cfg_dir = os.path.join(working_dir, 'data')
cfg_file = os.path.join(cfg_dir, 'ansible.cfg')
alt_cfg_file = os.path.join(cfg_dir, 'test.cfg')
cfg_in_homedir = os.path.expanduser('~/.ansible.cfg')


@pytest.fixture
def setup_env(request):
cur_config = os.environ.get('ANSIBLE_CONFIG', None)
cfg_path = request.param[0]

if cfg_path is None and cur_config:
    del os.environ['ANSIBLE_CONFIG']
else:
    os.environ['ANSIBLE_CONFIG'] = request.param[0]

yield

if cur_config is None and cfg_path:
    del os.environ['ANSIBLE_CONFIG']
else:
    os.environ['ANSIBLE_CONFIG'] = cur_config


est.fixture
setup_existing_files(request, monkeypatch):
def _os_path_exists(path):
    if path in (request.param[0]):
        return True
    else:
        return False

# Enable user and system dirs so that we know cwd takes precedence
monkeypatch.setattr(""os.path.exists"", _os_path_exists)
monkeypatch.setattr(""os.getcwd"", lambda: os.path.dirname(cfg_dir))
monkeypatch.setattr(""os.path.isdir"", lambda path: True if path == cfg_dir else real_isdir(path))


s TestFindIniFile:
# This tells us to run twice, once with a file specified and once with a directory
@pytest.mark.parametrize('setup_env, expected', (([alt_cfg_file], alt_cfg_file), ([cfg_dir], cfg_file)), indirect=['setup_env'])
# This just passes the list of files that exist to the fixture
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_in_cwd, alt_cfg_file, cfg_file)]],
                         indirect=['setup_existing_files'])
def test_env_has_cfg_file(self, setup_env, setup_existing_files, expected):
    """"""ANSIBLE_CONFIG is specified, use it""""""
    warnings = set()
    assert find_ini_config_file(warnings) == expected
    assert warnings == set()

@pytest.mark.parametrize('setup_env', ([alt_cfg_file], [cfg_dir]), indirect=['setup_env'])
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_in_cwd)]],
                         indirect=['setup_existing_files'])
def test_env_has_no_cfg_file(self, setup_env, setup_existing_files):
    """"""ANSIBLE_CONFIG is specified but the file does not exist""""""

    warnings = set()
    # since the cfg file specified by ANSIBLE_CONFIG doesn't exist, the one at cwd that does
    # exist should be returned
    assert find_ini_config_file(warnings) == cfg_in_cwd
    assert warnings == set()

# ANSIBLE_CONFIG not specified
@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# All config files are present
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_in_cwd, cfg_file, alt_cfg_file)]],
                         indirect=['setup_existing_files'])
def test_ini_in_cwd(self, setup_env, setup_existing_files):
    """"""ANSIBLE_CONFIG not specified.  Use the cwd cfg""""""
    warnings = set()
    assert find_ini_config_file(warnings) == cfg_in_cwd
    assert warnings == set()

# ANSIBLE_CONFIG not specified
@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# No config in cwd
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_file, alt_cfg_file)]],
                         indirect=['setup_existing_files'])
def test_ini_in_homedir(self, setup_env, setup_existing_files):
    """"""First config found is in the homedir""""""
    warnings = set()
    assert find_ini_config_file(warnings) == cfg_in_homedir
    assert warnings == set()

# ANSIBLE_CONFIG not specified
@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# No config in cwd
@pytest.mark.parametrize('setup_existing_files', [[('/etc/ansible/ansible.cfg', cfg_file, alt_cfg_file)]], indirect=['setup_existing_files'])
def test_ini_in_systemdir(self, setup_env, setup_existing_files):
    """"""First config found is the system config""""""
    warnings = set()
    assert find_ini_config_file(warnings) == '/etc/ansible/ansible.cfg'
    assert warnings == set()

# ANSIBLE_CONFIG not specified
@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# No config in cwd
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_file, alt_cfg_file)]],
                         indirect=['setup_existing_files'])
def test_cwd_does_not_exist(self, setup_env, setup_existing_files, monkeypatch):
    """"""Smoketest current working directory doesn't exist""""""
    def _os_stat(path):
        raise OSError('%s does not exist' % path)
    monkeypatch.setattr('os.stat', _os_stat)

    warnings = set()
    assert find_ini_config_file(warnings) == cfg_in_homedir
    assert warnings == set()

@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# No config in cwd
@pytest.mark.parametrize('setup_existing_files', [[list()]], indirect=['setup_existing_files'])
def test_no_config(self, setup_env, setup_existing_files):
    """"""No config present, no config found""""""
    warnings = set()
    assert find_ini_config_file(warnings) is None
    assert warnings == set()

# ANSIBLE_CONFIG not specified
@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# All config files are present
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_in_cwd, cfg_file, alt_cfg_file)]],
                         indirect=['setup_existing_files'])
def test_cwd_warning_on_writable(self, setup_env, setup_existing_files, monkeypatch):
    """"""If the cwd is writable, warn and skip it """"""
    real_stat = os.stat

    def _os_stat(path):
        if path == working_dir:
            from posix import stat_result
            stat_info = list(real_stat(path))
            stat_info[stat.ST_MODE] |= stat.S_IWOTH
            return stat_result(stat_info)
        else:
            return real_stat(path)

    monkeypatch.setattr('os.stat', _os_stat)

    warnings = set()
    assert find_ini_config_file(warnings) == cfg_in_homedir
    assert len(warnings) == 1
    warning = warnings.pop()
    assert u'Ansible is being run in a world writable directory' in warning
    assert u'ignoring it as an ansible.cfg source' in warning

# ANSIBLE_CONFIG is sepcified
@pytest.mark.parametrize('setup_env, expected', (([alt_cfg_file], alt_cfg_file), ([cfg_in_cwd], cfg_in_cwd)), indirect=['setup_env'])
# All config files are present
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_in_cwd, cfg_file, alt_cfg_file)]],
                         indirect=['setup_existing_files'])
def test_no_warning_on_writable_if_env_used(self, setup_env, setup_existing_files, monkeypatch, expected):
    """"""If the cwd is writable but ANSIBLE_CONFIG was used, no warning should be issued""""""
    real_stat = os.stat

    def _os_stat(path):
        if path == working_dir:
            from posix import stat_result
            stat_info = list(real_stat(path))
            stat_info[stat.ST_MODE] |= stat.S_IWOTH
            return stat_result(stat_info)
        else:
            return real_stat(path)

    monkeypatch.setattr('os.stat', _os_stat)

    warnings = set()
    assert find_ini_config_file(warnings) == expected
    assert warnings == set()

# ANSIBLE_CONFIG not specified
@pytest.mark.parametrize('setup_env', [[None]], indirect=['setup_env'])
# All config files are present
@pytest.mark.parametrize('setup_existing_files',
                         [[('/etc/ansible/ansible.cfg', cfg_in_homedir, cfg_in_cwd, cfg_file, alt_cfg_file)]],
                         indirect=['setup_existing_files'])
def test_cwd_warning_on_writable_no_warning_set(self, setup_env, setup_existing_files, monkeypatch):
    """"""Smoketest that the function succeeds even though no warning set was passed in""""""
    real_stat = os.stat

    def _os_stat(path):
        if path == working_dir:
            from posix import stat_result
            stat_info = list(real_stat(path))
            stat_info[stat.ST_MODE] |= stat.S_IWOTH
            return stat_result(stat_info)
        else:
            return real_stat(path)

    monkeypatch.setattr('os.stat', _os_stat)

    assert find_ini_config_file() == cfg_in_homedir
"
-------------------------------------------------------------------------
"Recom
PRs: 43583, 43648"
-------------------------------------------------------------------------
=========================================================================
"- section: defaults
  key: private_key_file
"
-------------------------------------------------------------------------
"```yaml
- name: ANSIBLE_PRIVATE_KEY_FILE
```"
-------------------------------------------------------------------------
"- section: defaults
  key: private_key_file
"
-------------------------------------------------------------------------
"Recom
PRs: 43599, 43601"
-------------------------------------------------------------------------
=========================================================================
"- section: paramiko_connection
  key: host_key_auto_add
"
-------------------------------------------------------------------------
"section: paramiko_connection
  key: look_for_keys"
-------------------------------------------------------------------------
"- section: paramiko_connection
  key: host_key_auto_add
"
-------------------------------------------------------------------------
"Recom
PRs: 43599, 43601"
-------------------------------------------------------------------------
=========================================================================
"- section: defaults
  key: private_key_file
"
-------------------------------------------------------------------------
"```yaml
- name: ANSIBLE_PRIVATE_KEY_FILE
```"
-------------------------------------------------------------------------
"- section: defaults
  key: private_key_file
"
-------------------------------------------------------------------------
"Recom
PRs: 43599, 43601"
-------------------------------------------------------------------------
=========================================================================
"- section: privilege_escalation
  key: become
"
-------------------------------------------------------------------------
"```yaml
- section: privilege_escalation
  key: become
```"
-------------------------------------------------------------------------
"- section: privilege_escalation
  key: become
"
-------------------------------------------------------------------------
"Recom
PRs: 43599, 43601"
-------------------------------------------------------------------------
=========================================================================
"- section: privilege_escalation
  key: become_method
"
-------------------------------------------------------------------------
"```yaml
- section: privilege_escalation
  key: ANSIBLE_BECOME_METHOD
```"
-------------------------------------------------------------------------
"- section: privilege_escalation
  key: become_method
"
-------------------------------------------------------------------------
"Recom
PRs: 43599, 43601"
-------------------------------------------------------------------------
=========================================================================
"- section: paramiko_connection
  key: host_key_auto_add
"
-------------------------------------------------------------------------
"```yaml
    paramiko_connection:
      host_key_auto_add
```"
-------------------------------------------------------------------------
"- section: paramiko_connection
  key: host_key_auto_add
"
-------------------------------------------------------------------------
"Recom
PRs: 43599, 43601"
-------------------------------------------------------------------------
=========================================================================
"if (
        ld['name'] != escaped_args['name'] or (
            # In the case of swap, check the src instead
            'src' in args and
            ld['name'] == 'none' and
            ld['fstype'] == 'swap' and
            ld['src'] != args['src'])):
"
-------------------------------------------------------------------------
"```python
if (
    ld['name'] != escaped_args['name'] or (
        # In the case of swap, check the src instead
        'src' in args and
        ld['name'] == 'none' and
        ld['fstype'] == 'swap' and
        ld['src'] != args['src']
    )
):
```"
-------------------------------------------------------------------------
"if (
        ld['name'] != escaped_args['name'] or (
            # In the case of swap, check the src instead
            'src' in args and
            ld['name'] == 'none' and
            ld['fstype'] == 'swap' and
            ld['src'] != args['src'])):
"
-------------------------------------------------------------------------
"Recom
PRs: 42837, 43518"
-------------------------------------------------------------------------
=========================================================================
"if (
        ld['name'] != escaped_name or (
            # In the case of swap, check the src instead
            'src' in args and
            ld['name'] == 'none' and
            ld['fstype'] == 'swap' and
            ld['src'] != args['src'])):
"
-------------------------------------------------------------------------
"if (
        ld['name'] != escaped_name or (
            # In the case of swap, check the src instead
            'src' in args and
            ld['name'] == 'none' and
            ld['fstype'] == 'swap' and
            ld['src'] != args['src'])):"
-------------------------------------------------------------------------
"if (
        ld['name'] != escaped_name or (
            # In the case of swap, check the src instead
            'src' in args and
            ld['name'] == 'none' and
            ld['fstype'] == 'swap' and
            ld['src'] != args['src'])):
"
-------------------------------------------------------------------------
"Recom
PRs: 42837, 43518"
-------------------------------------------------------------------------
=========================================================================
"if (
        ld['name'] != escaped_args['name'] or (
            # In the case of swap, check the src instead
            'src' in args and
            ld['name'] == 'none' and
            ld['fstype'] == 'swap' and
            ld['src'] != args['src'])):
"
-------------------------------------------------------------------------
"```python
if (
    ld['name'] != escaped_args['name'] or (
        # In the case of swap, check the src instead
        'src' in args and
        ld['name'] == 'none' and
        ld['fstype'] == 'swap' and
        ld['src'] != args['src']
    )
):
```"
-------------------------------------------------------------------------
"if (
        ld['name'] != escaped_args['name'] or (
            # In the case of swap, check the src instead
            'src' in args and
            ld['name'] == 'none' and
            ld['fstype'] == 'swap' and
            ld['src'] != args['src'])):
"
-------------------------------------------------------------------------
"Recom
PRs: 42837, 43517"
-------------------------------------------------------------------------
=========================================================================
"if (
        ld['name'] != escaped_name or (
            # In the case of swap, check the src instead
            'src' in args and
            ld['name'] == 'none' and
            ld['fstype'] == 'swap' and
            ld['src'] != args['src'])):
"
-------------------------------------------------------------------------
"if (
        ld['name'] != escaped_name or (
            # In the case of swap, check the src instead
            'src' in args and
            ld['name'] == 'none' and
            ld['fstype'] == 'swap' and
            ld['src'] != args['src'])):"
-------------------------------------------------------------------------
"if (
        ld['name'] != escaped_name or (
            # In the case of swap, check the src instead
            'src' in args and
            ld['name'] == 'none' and
            ld['fstype'] == 'swap' and
            ld['src'] != args['src'])):
"
-------------------------------------------------------------------------
"Recom
PRs: 42837, 43517"
-------------------------------------------------------------------------
=========================================================================
"cloud_target = 'cloud/%s/' % name

if cloud_target in self.integration_targets_by_alias:
    return {
        'integration': cloud_target,
    }

"
-------------------------------------------------------------------------
"```python
cloud_target = 'cloud/%s/' % name

if cloud_target in self.integration_targets_by_alias:
    return {
        'integration': cloud_target,
    }
```"
-------------------------------------------------------------------------
"cloud_target = 'cloud/%s/' % name

if cloud_target in self.integration_targets_by_alias:
    return {
        'integration': cloud_target,
    }

"
-------------------------------------------------------------------------
"Recom
PRs: 43118, 43181"
-------------------------------------------------------------------------
=========================================================================
"import re
"
-------------------------------------------------------------------------
"from future import absolute_import, print_function

import json
import textwrap

from lib.sanity import (
    SanitySingleVersion
)"
-------------------------------------------------------------------------
"import re
"
-------------------------------------------------------------------------
"Recom
PRs: 43118, 43181"
-------------------------------------------------------------------------
=========================================================================
"from lib.util import (
display,


"
-------------------------------------------------------------------------
"from lib.util import (
    display,
)"
-------------------------------------------------------------------------
"from lib.util import (
display,


"
-------------------------------------------------------------------------
"Recom
PRs: 43118, 43181"
-------------------------------------------------------------------------
=========================================================================
"def __init__(self):
    super(IntegrationAliasesTest, self).__init__()

    self._shippable_yml_lines = []  # type: list[str]
    self._shippable_test_groups = {}  # type: dict[str, set[int]]

@property
def shippable_yml_lines(self):
    """"""
    :rtype: list[str]
    """"""
    if not self._shippable_yml_lines:
        with open('shippable.yml', 'r') as shippable_yml_fd:
            self._shippable_yml_lines = shippable_yml_fd.read().splitlines()

    return self._shippable_yml_lines

@property
def shippable_test_groups(self):
    """"""
    :rtype: dict[str, set[int]]
    """"""
    if not self._shippable_test_groups:
        matches = [re.search(r'^[ #]- env: T=(?P<group>[^/])/(?P<params>.)/(?P<number>[1-9])$', line) for line in self.shippable_yml_lines]
        entries = [(match.group('group'), int(match.group('number'))) for match in matches if match]

        for key, value in entries:
            if key not in self._shippable_test_groups:
                self._shippable_test_groups[key] = set()

            self._shippable_test_groups[key].add(value)

    return self._shippable_test_groups

def format_shippable_group_alias(self, name, fallback=''):
    """"""
    :type name: str
    :type fallback: str
    :rtype: str
    """"""
    group_numbers = self.shippable_test_groups.get(name, None)

    if group_numbers:
        if min(group_numbers) != 1:
            display.warning('Min test group ""%s"" in shippable.yml is %d instead of 1.' % (name, min(group_numbers)), unique=True)

        if max(group_numbers) != len(group_numbers):
            display.warning('Max test group ""%s"" in shippable.yml is %d instead of %d.' % (name, max(group_numbers), len(group_numbers)), unique=True)

        if len(group_numbers) > 1:
            alias = 'shippable/%s/group[%d-%d]/' % (name, min(group_numbers), max(group_numbers))
        else:
            alias = 'shippable/%s/group%d/' % (name, min(group_numbers))
    elif fallback:
        alias = 'shippable/%s/group%d/' % (fallback, 1)
    else:
        raise Exception('cannot find test group ""%s"" in shippable.yml' % name)

    return alias

"
-------------------------------------------------------------------------
"```python
import re
from display import warning
from parent_module import IntegrationAliasesTest

class IntegrationAliasesTest(SanitySingleVersion):
    def __init__(self):
        super(IntegrationAliasesTest, self).__init__()

        self._shippable_yml_lines = []  # type: list[str]
        self._shippable_test_groups = {}  # type: dict[str, set[int]]

    @property
    def shippable_yml_lines(self):
        """"""
        :rtype: list[str]
        """"""
        if not self._shippable_yml_lines:
            with open('shippable.yml', 'r') as shippable_yml_fd:
                self._shippable_yml_lines = shippable_yml_fd.read().splitlines()

        return self._shippable_yml_lines

    @property
    def shippable_test_groups(self):
        """"""
        :rtype: dict[str, set[int]]
        """"""
        if not self._shippable_test_groups:
            matches = [re.search(r'^[ #]- env: T=(?P<group>[^/])/(?P<params>.)/(?P<number>[1-9])$', line) for line in self.shippable_yml_lines]
            entries = [(match.group('group'), int(match.group('number'))) for match in matches if match]

            for key, value in entries:
                if key not in self._shippable_test_groups:
                    self._shippable_test_groups[key] = set()

                self._shippable_test_groups[key].add(value)

        return self._shippable_test_groups

    def format_shippable_group_alias(self, name, fallback=''):
        """"""
        :type name: str
        :type fallback: str
        :rtype: str
        """"""
        group_numbers = self.shippable_test_groups.get(name, None)

        if group_numbers:
            if min(group_numbers) != 1:
                warning('Min test group ""%s"" in shippable.yml is %d instead of 1.' % (name, min(group_numbers)), unique=True)

            if max(group_numbers) != len(group_numbers):
                warning('Max test group ""%s"" in shippable.yml is %d instead of %d.' % (name, max(group_numbers), len(group_numbers)), unique=True)

            if len(group_numbers) > 1:
                alias = 'shippable/%s/group[%d-%d]/' % (name, min(group_numbers), max(group_numbers))
            else:
                alias = 'shippable/%s/group%d/' % (name, min(group_numbers))
        elif fallback:
            alias = 'shippable/%s/group%d/' % (fallback, 1)
        else:
            raise Exception('cannot find test group ""%s"" in shippable.yml' % name)

        return alias
```"
-------------------------------------------------------------------------
"def __init__(self):
    super(IntegrationAliasesTest, self).__init__()

    self._shippable_yml_lines = []  # type: list[str]
    self._shippable_test_groups = {}  # type: dict[str, set[int]]

@property
def shippable_yml_lines(self):
    """"""
    :rtype: list[str]
    """"""
    if not self._shippable_yml_lines:
        with open('shippable.yml', 'r') as shippable_yml_fd:
            self._shippable_yml_lines = shippable_yml_fd.read().splitlines()

    return self._shippable_yml_lines

@property
def shippable_test_groups(self):
    """"""
    :rtype: dict[str, set[int]]
    """"""
    if not self._shippable_test_groups:
        matches = [re.search(r'^[ #]- env: T=(?P<group>[^/])/(?P<params>.)/(?P<number>[1-9])$', line) for line in self.shippable_yml_lines]
        entries = [(match.group('group'), int(match.group('number'))) for match in matches if match]

        for key, value in entries:
            if key not in self._shippable_test_groups:
                self._shippable_test_groups[key] = set()

            self._shippable_test_groups[key].add(value)

    return self._shippable_test_groups

def format_shippable_group_alias(self, name, fallback=''):
    """"""
    :type name: str
    :type fallback: str
    :rtype: str
    """"""
    group_numbers = self.shippable_test_groups.get(name, None)

    if group_numbers:
        if min(group_numbers) != 1:
            display.warning('Min test group ""%s"" in shippable.yml is %d instead of 1.' % (name, min(group_numbers)), unique=True)

        if max(group_numbers) != len(group_numbers):
            display.warning('Max test group ""%s"" in shippable.yml is %d instead of %d.' % (name, max(group_numbers), len(group_numbers)), unique=True)

        if len(group_numbers) > 1:
            alias = 'shippable/%s/group[%d-%d]/' % (name, min(group_numbers), max(group_numbers))
        else:
            alias = 'shippable/%s/group%d/' % (name, min(group_numbers))
    elif fallback:
        alias = 'shippable/%s/group%d/' % (fallback, 1)
    else:
        raise Exception('cannot find test group ""%s"" in shippable.yml' % name)

    return alias

"
-------------------------------------------------------------------------
"Recom
PRs: 43118, 43181"
-------------------------------------------------------------------------
=========================================================================
"find=self.format_shippable_group_alias('linux').replace('linux', 'posix'),
    find=self.format_shippable_group_alias(cloud, 'cloud'),
"
-------------------------------------------------------------------------
"```python
find=self.format_shippable_group_alias('linux').replace('linux', 'posix'),
find=self.format_shippable_group_alias(cloud, 'cloud'),
```"
-------------------------------------------------------------------------
"find=self.format_shippable_group_alias('linux').replace('linux', 'posix'),
    find=self.format_shippable_group_alias(cloud, 'cloud'),
"
-------------------------------------------------------------------------
"Recom
PRs: 43118, 43181"
-------------------------------------------------------------------------
=========================================================================
"find=self.format_shippable_group_alias('windows'),
"
-------------------------------------------------------------------------
"```python
messages += self.check_ci_group(
    targets=self.format_shippable_group_alias('windows'),
)
```"
-------------------------------------------------------------------------
"find=self.format_shippable_group_alias('windows'),
"
-------------------------------------------------------------------------
"Recom
PRs: 43118, 43181"
-------------------------------------------------------------------------
=========================================================================
"def run_commands(self, commands, check_rc=True):
"
-------------------------------------------------------------------------
"```python
def run_commands(self, commands):
```"
-------------------------------------------------------------------------
"def run_commands(self, commands, check_rc=True):
"
-------------------------------------------------------------------------
"Recom
PRs: 43155, 43156"
-------------------------------------------------------------------------
=========================================================================
"self.responses = run_commands(self.module, list(self.COMMANDS), check_rc=False)
"
-------------------------------------------------------------------------
"self.responses = run_commands(self.module, list(self.COMMANDS), check_rc=False)"
-------------------------------------------------------------------------
"self.responses = run_commands(self.module, list(self.COMMANDS), check_rc=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 43155, 43156"
-------------------------------------------------------------------------
=========================================================================
"out = to_text(out, errors='surrogate_or_strict')
        out = out.strip()
"
-------------------------------------------------------------------------
"```python
out = to_text(out, errors='surrogate_or_strict')
out = out.strip()
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_bytes, to_text
"
-------------------------------------------------------------------------
"Recom
PRs: 43155, 43156"
-------------------------------------------------------------------------
=========================================================================
"return data
"
-------------------------------------------------------------------------
"```python
return data
```"
-------------------------------------------------------------------------
"return data
"
-------------------------------------------------------------------------
"Recom
PRs: 41761, 43095"
-------------------------------------------------------------------------
=========================================================================
"@patch('ansible.playbook.role.definition.unfrackpath', mock_unfrackpath_noop)
def test_load_role_with_vars_nested_dirs_combined(self):

    fake_loader = DictDataLoader({
        ""/etc/ansible/roles/foo_vars/defaults/main/foo/bar.yml"": """"""
        foo: bar
        a: 1
        """""",
        ""/etc/ansible/roles/foo_vars/defaults/main/bar/foo.yml"": """"""
        foo: bam
        b: 2
        """""",
    })

    mock_play = MagicMock()
    mock_play.ROLE_CACHE = {}

    i = RoleInclude.load('foo_vars', play=mock_play, loader=fake_loader)
    r = Role.load(i, play=mock_play)

    self.assertEqual(r._default_vars, dict(foo='bar', a=1, b=2))

"
-------------------------------------------------------------------------
"@patch('ansible.playbook.role.definition.unfrackpath', mock_unfrackpath_noop)
def test_load_role_with_vars_nested_dirs_combined(self):

    fake_loader = DictDataLoader({
        ""/etc/ansible/roles/foo_vars/defaults/main/foo/bar.yml"": """"""
        foo: bar
        a: 1
        """""",
        ""/etc/ansible/roles/foo_vars/defaults/main/bar/foo.yml"": """"""
        foo: bam
        b: 2
        """""",
    })

    mock_play = MagicMock()
    mock_play.ROLE_CACHE = {}

    i = RoleInclude.load('foo_vars', play=mock_play, loader=fake_loader)
    r = Role.load(i, play=mock_play)

    self.assertEqual(r._default_vars, dict(foo='bar', a=1, b=2))"
-------------------------------------------------------------------------
"@patch('ansible.playbook.role.definition.unfrackpath', mock_unfrackpath_noop)
def test_load_role_with_vars_nested_dirs_combined(self):

    fake_loader = DictDataLoader({
        ""/etc/ansible/roles/foo_vars/defaults/main/foo/bar.yml"": """"""
        foo: bar
        a: 1
        """""",
        ""/etc/ansible/roles/foo_vars/defaults/main/bar/foo.yml"": """"""
        foo: bam
        b: 2
        """""",
    })

    mock_play = MagicMock()
    mock_play.ROLE_CACHE = {}

    i = RoleInclude.load('foo_vars', play=mock_play, loader=fake_loader)
    r = Role.load(i, play=mock_play)

    self.assertEqual(r._default_vars, dict(foo='bar', a=1, b=2))

"
-------------------------------------------------------------------------
"Recom
PRs: 41761, 43095"
-------------------------------------------------------------------------
=========================================================================
"with open(self.archive_path, 'wb') as fd:
"
-------------------------------------------------------------------------
"```
with open(self.archive_path, 'wb') as fd:
```"
-------------------------------------------------------------------------
"with open(self.archive_path, 'wb') as fd:
"
-------------------------------------------------------------------------
"Recom
PRs: 40413, 43045"
-------------------------------------------------------------------------
=========================================================================
"image_tar = open(self.load_path, 'rb')
"
-------------------------------------------------------------------------
"```python
image_tar = open(self.load_path, 'rb')
```"
-------------------------------------------------------------------------
"image_tar = open(self.load_path, 'rb')
"
-------------------------------------------------------------------------
"Recom
PRs: 40413, 43045"
-------------------------------------------------------------------------
=========================================================================
"self.fail_json(msg='Unable to make %s into to %s, failed final rename from %s: %s' %
                   (src, dest, b_tmp_dest_name, to_native(e)),
"
-------------------------------------------------------------------------
"```python
self.fail_json(msg='Unable to make %s into to %s, failed final rename from %s: %s' % (src, dest, b_tmp_dest_name, to_native(e)))
```"
-------------------------------------------------------------------------
"self.fail_json(msg='Unable to make %s into to %s, failed final rename from %s: %s' %
                   (src, dest, b_tmp_dest_name, to_native(e)),
"
-------------------------------------------------------------------------
"Recom
PRs: 42770, 43034"
-------------------------------------------------------------------------
=========================================================================
"if info[5] != self.home:
    cmd.append('-d')
    cmd.append(self.home)
"
-------------------------------------------------------------------------
"```python
if info[5] != self.home:
    cmd.append('-d')
    cmd.append(self.home)
```"
-------------------------------------------------------------------------
"if info[5] != self.home:
    cmd.append('-d')
    cmd.append(self.home)
"
-------------------------------------------------------------------------
"Recom
PRs: 42865, 43022"
-------------------------------------------------------------------------
=========================================================================
"if region:
    groups.append(region)
"
-------------------------------------------------------------------------
"if region:
    groups.append(region)"
-------------------------------------------------------------------------
"if region:
    groups.append(region)
"
-------------------------------------------------------------------------
"Recom
PRs: 42939, 42940"
-------------------------------------------------------------------------
=========================================================================
"if (info[5] != self.home and self.move_home) or (not os.path.exists(self.home) and self.create_home):
"
-------------------------------------------------------------------------
if (info[5] ! = self.home and self.move_home) or (not os.path.exists(self.home) and self.create_home):
-------------------------------------------------------------------------
"if (info[5] != self.home and self.move_home) or (not os.path.exists(self.home) and self.create_home):
"
-------------------------------------------------------------------------
"Recom
PRs: 42711, 42869"
-------------------------------------------------------------------------
=========================================================================
"args['Marker'] = response.get('NextMarker')
for key in response.keys():
    if key.endswith('List'):
        args['Marker'] = response[key].get('NextMarker')
        break
loop = args['Marker'] is not None
"
-------------------------------------------------------------------------
"```python
args['Marker'] = response.get('NextMarker')
for key in response.keys():
    if key.endswith('List'):
        args['Marker'] = response[key].get('NextMarker')
        break
loop = args['Marker'] is not None
```"
-------------------------------------------------------------------------
"args['Marker'] = response.get('NextMarker')
for key in response.keys():
    if key.endswith('List'):
        args['Marker'] = response[key].get('NextMarker')
        break
loop = args['Marker'] is not None
"
-------------------------------------------------------------------------
"Recom
PRs: 38045, 42746"
-------------------------------------------------------------------------
=========================================================================
"if scope is not None:
    if 'private' in scope and 'public' in scope:
        module.fail_json(msg=""Parameter 'scope' cannot be both 'private' and 'public', got: %s"" % scope)
    else:
        scope = ','.join(sorted(scope))
"
-------------------------------------------------------------------------
"```python
if subnet_control:
    if scope is not None:
        if 'private' in scope and 'public' in scope:
            module.fail_json(msg=""Parameter 'scope' cannot be both 'private' and 'public', got: %s"" % scope)
        else:
            scope = ','.join(sorted(scope))
```"
-------------------------------------------------------------------------
"if scope is not None:
    if 'private' in scope and 'public' in scope:
        module.fail_json(msg=""Parameter 'scope' cannot be both 'private' and 'public', got: %s"" % scope)
    else:
        scope = ','.join(sorted(scope))
"
-------------------------------------------------------------------------
"Recom
PRs: 42675, 42676"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.six.moves.urllib.parse import urlparse
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.six.moves.urllib.parse import urlparse
```"
-------------------------------------------------------------------------
"from ansible.module_utils.six.moves.urllib.parse import urlparse
"
-------------------------------------------------------------------------
"Recom
PRs: 42474, 42639"
-------------------------------------------------------------------------
=========================================================================
"return urlparse(s3_url).scheme in ('fakes3', 'fakes3s')
"
-------------------------------------------------------------------------
"```python
import os
from ansible.module_utils.six.moves.urllib.parse import urlparse

def destroy_bucket(s3_client, module):
    def is_fakes3(s3_url):
        """""" Return True if s3_url has scheme fakes3:// """"""
        return urlparse(s3_url).scheme in ('fakes3', 'fakes3s')
```"
-------------------------------------------------------------------------
"return urlparse(s3_url).scheme in ('fakes3', 'fakes3s')
"
-------------------------------------------------------------------------
"Recom
PRs: 42474, 42639"
-------------------------------------------------------------------------
=========================================================================
"o = urlparse(s3_url)
"
-------------------------------------------------------------------------
"```python
import os
from ansible.module_utils.six.moves.urllib.parse import urlparse

def is_walrus(s3_url):
    o = urlparse(s3_url)
 
    # We assume anything other than *.amazonaws.com is Walrus
    if s3_url is not None:
        return not o.hostname.endswith('amazonaws.com')
    else:
        return False
```"
-------------------------------------------------------------------------
"o = urlparse(s3_url)
"
-------------------------------------------------------------------------
"Recom
PRs: 42474, 42639"
-------------------------------------------------------------------------
=========================================================================
"
# Nest the try except since curses.error is not available if curses did not import
try:
    curses.setupterm()
    HAS_CURSES = True
except curses.error:
    HAS_CURSES = False
pt ImportError:
"
-------------------------------------------------------------------------
"```python
try:
    try:
        import curses
        curses.setupterm()
        HAS_CURSES = True
    except curses.error:
        HAS_CURSES = False
except ImportError:
```"
-------------------------------------------------------------------------
"
# Nest the try except since curses.error is not available if curses did not import
try:
    curses.setupterm()
    HAS_CURSES = True
except curses.error:
    HAS_CURSES = False
pt ImportError:
"
-------------------------------------------------------------------------
"Recom
PRs: 42038, 42635"
-------------------------------------------------------------------------
=========================================================================
"
# Nest the try except since curses.error is not available if curses did not import
try:
    curses.setupterm()
    HAS_CURSES = True
except curses.error:
    HAS_CURSES = False
pt ImportError:
"
-------------------------------------------------------------------------
"```python
try:
    import curses
    try:
        curses.setupterm()
        HAS_CURSES = True
    except curses.error:
        HAS_CURSES = False
except ImportError:
    pass
```"
-------------------------------------------------------------------------
"
# Nest the try except since curses.error is not available if curses did not import
try:
    curses.setupterm()
    HAS_CURSES = True
except curses.error:
    HAS_CURSES = False
pt ImportError:
"
-------------------------------------------------------------------------
"Recom
PRs: 42038, 42634"
-------------------------------------------------------------------------
=========================================================================
"from distutils.version import LooseVersion
"
-------------------------------------------------------------------------
"```python
from distutils.version import LooseVersion
```"
-------------------------------------------------------------------------
"from distutils.version import LooseVersion
"
-------------------------------------------------------------------------
"Recom
PRs: 40839, 42533"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker_common import docker_version
"
-------------------------------------------------------------------------
"```python
import os
import shlex
import re
from docker.utils.types import Ulimit, LogConfig
from ansible.module_utils.docker_common import docker_version
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker_common import docker_version
"
-------------------------------------------------------------------------
"Recom
PRs: 40839, 42533"
-------------------------------------------------------------------------
=========================================================================
"if self.client.HAS_AUTO_REMOVE_OPT:
"
-------------------------------------------------------------------------
"```python
if self.client.HAS_AUTO_REMOVE_OPT:
```"
-------------------------------------------------------------------------
"if self.client.HAS_AUTO_REMOVE_OPT:
"
-------------------------------------------------------------------------
"Recom
PRs: 40839, 42533"
-------------------------------------------------------------------------
=========================================================================
"if self.client.HAS_INIT_OPT:
    host_config_params['init'] = 'init'

"
-------------------------------------------------------------------------
"```python
if getattr(self.client, 'HAS_INIT_OPT', None):
    host_config_params['init'] = 'init'
```"
-------------------------------------------------------------------------
"if self.client.HAS_INIT_OPT:
    host_config_params['init'] = 'init'

"
-------------------------------------------------------------------------
"Recom
PRs: 40839, 42533"
-------------------------------------------------------------------------
=========================================================================
"class AnsibleDockerClientContainer(AnsibleDockerClient):

def __init__(self, **kwargs):
    super(AnsibleDockerClientContainer, self).__init__(**kwargs)

    docker_api_version = self.version()['ApiVersion']
    init_supported = LooseVersion(docker_api_version) >= LooseVersion('1.25')
    if self.module.params.get(""init"") and not init_supported:
        self.fail('docker API version is %s. Minimum version required is 1.25 to set init option.' % (docker_api_version,))

    init_supported = init_supported and LooseVersion(docker_version) >= LooseVersion('2.2')
    if self.module.params.get(""init"") and not init_supported:
        self.fail('docker-py version is %s. Minimum version required is 2.2 to set init option.' % (docker_version,))

    self.HAS_INIT_OPT = init_supported
    self.HAS_AUTO_REMOVE_OPT = HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3
    if self.module.params.get('auto_remove') and not self.HAS_AUTO_REMOVE_OPT:
        self.fail(""'auto_remove' is not compatible with the 'docker-py' Python package. It requires the newer 'docker' Python package."")


"
-------------------------------------------------------------------------
"```python
class AnsibleDockerClientContainer(AnsibleDockerClient):

    def __init__(self, **kwargs):
        super(AnsibleDockerClientContainer, self).__init__(**kwargs)

        docker_api_version = self.version()['ApiVersion']
        init_supported = LooseVersion(docker_api_version) >= LooseVersion('1.25')
        if self.module.params.get(""init"") and not init_supported:
            self.fail('docker API version is %s. Minimum version required is 1.25 to set init option.' % (docker_api_version,))

        docker_version = self.version()['Version']
        init_supported = init_supported and LooseVersion(docker_version) >= LooseVersion('2.2')
        if self.module.params.get(""init"") and not init_supported:
            self.fail('docker-py version is %s. Minimum version required is 2.2 to set init option.' % (docker_version,))

        self.HAS_INIT_OPT = init_supported
        self.HAS_AUTO_REMOVE_OPT = HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3
        if self.module.params.get('auto_remove') and not self.HAS_AUTO_REMOVE_OPT:
            self.fail(""'auto_remove' is not compatible with the 'docker-py' Python package. It requires the newer 'docker' Python package."")
```"
-------------------------------------------------------------------------
"class AnsibleDockerClientContainer(AnsibleDockerClient):

def __init__(self, **kwargs):
    super(AnsibleDockerClientContainer, self).__init__(**kwargs)

    docker_api_version = self.version()['ApiVersion']
    init_supported = LooseVersion(docker_api_version) >= LooseVersion('1.25')
    if self.module.params.get(""init"") and not init_supported:
        self.fail('docker API version is %s. Minimum version required is 1.25 to set init option.' % (docker_api_version,))

    init_supported = init_supported and LooseVersion(docker_version) >= LooseVersion('2.2')
    if self.module.params.get(""init"") and not init_supported:
        self.fail('docker-py version is %s. Minimum version required is 2.2 to set init option.' % (docker_version,))

    self.HAS_INIT_OPT = init_supported
    self.HAS_AUTO_REMOVE_OPT = HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3
    if self.module.params.get('auto_remove') and not self.HAS_AUTO_REMOVE_OPT:
        self.fail(""'auto_remove' is not compatible with the 'docker-py' Python package. It requires the newer 'docker' Python package."")


"
-------------------------------------------------------------------------
"Recom
PRs: 40839, 42533"
-------------------------------------------------------------------------
=========================================================================
"client = AnsibleDockerClientContainer(
"
-------------------------------------------------------------------------
"```python
client = AnsibleDockerClientContainer(
```"
-------------------------------------------------------------------------
"client = AnsibleDockerClientContainer(
"
-------------------------------------------------------------------------
"Recom
PRs: 40839, 42533"
-------------------------------------------------------------------------
=========================================================================
"module.deprecate(""The 'letsencrypt' module is being renamed 'acme_certificate'"", version='2.10')
"
-------------------------------------------------------------------------
"```python
module.deprecate(""The 'letsencrypt' module is being renamed 'acme_certificate'"", version='2.10')
```"
-------------------------------------------------------------------------
"module.deprecate(""The 'letsencrypt' module is being renamed 'acme_certificate'"", version='2.10')
"
-------------------------------------------------------------------------
"Recom
PRs: 42496, 42502"
-------------------------------------------------------------------------
=========================================================================
"def get_mount_targets_data(self, file_systems):
    for item in file_systems:
        if item['life_cycle_state'] == self.STATE_AVAILABLE:
            try:
                mount_targets = self.get_mount_targets(item['file_system_id'])
            except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
                self.module.fail_json_aws(e, msg=""Couldn't get EFS targets"")
            for mt in mount_targets:
                item['mount_targets'].append(camel_dict_to_snake_dict(mt))
    return file_systems

def get_security_groups_data(self, file_systems):
    for item in file_systems:
        if item['life_cycle_state'] == self.STATE_AVAILABLE:
            for target in item['mount_targets']:
                if target['life_cycle_state'] == self.STATE_AVAILABLE:
                    try:
                        target['security_groups'] = self.get_security_groups(target['mount_target_id'])
                    except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
                        self.module.fail_json_aws(e, msg=""Couldn't get EFS security groups"")
                else:
                    target['security_groups'] = []
        else:
            item['tags'] = {}
            item['mount_targets'] = []
    return file_systems

"
-------------------------------------------------------------------------
"def get_mount_targets_data(self, file_systems):
    for item in file_systems:
        if item['life_cycle_state'] == self.STATE_AVAILABLE:
            try:
                mount_targets = self.get_mount_targets(item['file_system_id'])
            except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
                self.module.fail_json_aws(e, msg=""Couldn't get EFS targets"")
            for mt in mount_targets:
                item['mount_targets'].append(camel_dict_to_snake_dict(mt))
    return file_systems

def get_security_groups_data(self, file_systems):
    for item in file_systems:
        if item['life_cycle_state'] == self.STATE_AVAILABLE:
            for target in item['mount_targets']:
                if target['life_cycle_state'] == self.STATE_AVAILABLE:
                    try:
                        target['security_groups'] = self.get_security_groups(target['mount_target_id'])
                    except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
                        self.module.fail_json_aws(e, msg=""Couldn't get EFS security groups"")
                else:
                    target['security_groups'] = []
        else:
            item['tags'] = {}
            item['mount_targets'] = []
    return file_systems"
-------------------------------------------------------------------------
"def get_mount_targets_data(self, file_systems):
    for item in file_systems:
        if item['life_cycle_state'] == self.STATE_AVAILABLE:
            try:
                mount_targets = self.get_mount_targets(item['file_system_id'])
            except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
                self.module.fail_json_aws(e, msg=""Couldn't get EFS targets"")
            for mt in mount_targets:
                item['mount_targets'].append(camel_dict_to_snake_dict(mt))
    return file_systems

def get_security_groups_data(self, file_systems):
    for item in file_systems:
        if item['life_cycle_state'] == self.STATE_AVAILABLE:
            for target in item['mount_targets']:
                if target['life_cycle_state'] == self.STATE_AVAILABLE:
                    try:
                        target['security_groups'] = self.get_security_groups(target['mount_target_id'])
                    except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
                        self.module.fail_json_aws(e, msg=""Couldn't get EFS security groups"")
                else:
                    target['security_groups'] = []
        else:
            item['tags'] = {}
            item['mount_targets'] = []
    return file_systems

"
-------------------------------------------------------------------------
"Recom
PRs: 36520, 42481"
-------------------------------------------------------------------------
=========================================================================
"result['tags'] = {}
result['mount_targets'] = []
"
-------------------------------------------------------------------------
"result['tags'] = {}
result['mount_targets'] = []"
-------------------------------------------------------------------------
"result['tags'] = {}
result['mount_targets'] = []
"
-------------------------------------------------------------------------
"Recom
PRs: 36520, 42481"
-------------------------------------------------------------------------
=========================================================================
"file_systems_info = connection.get_mount_targets_data(file_systems_info)
file_systems_info = connection.get_security_groups_data(file_systems_info)

"
-------------------------------------------------------------------------
"file_systems_info = connection.get_mount_targets_data(file_systems_info)
file_systems_info = connection.get_security_groups_data(file_systems_info)"
-------------------------------------------------------------------------
"file_systems_info = connection.get_mount_targets_data(file_systems_info)
file_systems_info = connection.get_security_groups_data(file_systems_info)

"
-------------------------------------------------------------------------
"Recom
PRs: 36520, 42481"
-------------------------------------------------------------------------
=========================================================================
"stdin_fd = None
"
-------------------------------------------------------------------------
"stdin_fd = None, old_settings = None"
-------------------------------------------------------------------------
"stdin_fd = None
"
-------------------------------------------------------------------------
"Recom
PRs: 42217, 42441"
-------------------------------------------------------------------------
=========================================================================
"stdin_fd = None
stdout_fd = None
"
-------------------------------------------------------------------------
"```python
stdin_fd = None
stdout_fd = None
```"
-------------------------------------------------------------------------
"stdin_fd = None
stdout_fd = None
"
-------------------------------------------------------------------------
"Recom
PRs: 42217, 42441"
-------------------------------------------------------------------------
=========================================================================
"stdin_fd = stdin.fileno()
stdout_fd = stdout.fileno()
tdin_fd is not None:
if isatty(stdin_fd):
        intr = termios.tcgetattr(stdin_fd)[6][termios.VINTR]
        backspace = termios.tcgetattr(stdin_fd)[6][termios.VERASE]
    old_settings = termios.tcgetattr(stdin_fd)
    tty.setraw(stdin_fd)

    # Only set stdout to raw mode if it is a TTY. This is needed when redirecting
    # stdout to a file since a file cannot be set to raw mode.
    if isatty(stdout_fd):
        tty.setraw(stdout_fd)
        new_settings = termios.tcgetattr(stdin_fd)
        termios.tcsetattr(stdin_fd, termios.TCSANOW, new_settings)

    if stdin_fd is not None:


        if stdin_fd is None or not isatty(stdin_fd):
"
-------------------------------------------------------------------------
"```python
stdin_fd = stdin.fileno()
stdout_fd = stdout.fileno()

if stdin_fd is not None:
    if isatty(stdin_fd):
        intr = termios.tcgetattr(stdin_fd)[6][termios.VINTR]
        backspace = termios.tcgetattr(stdin_fd)[6][termios.VERASE]
        
    old_settings = termios.tcgetattr(stdin_fd)
    tty.setraw(stdin_fd)

    # Only set stdout to raw mode if it is a TTY. This is needed when redirecting
    # stdout to a file since a file cannot be set to raw mode.
    if isatty(stdout_fd):
        tty.setraw(stdout_fd)
        new_settings = termios.tcgetattr(stdin_fd)
        termios.tcsetattr(stdin_fd, termios.TCSANOW, new_settings)

    if stdin_fd is not None:
        if stdin_fd is None or not isatty(stdin_fd):
```"
-------------------------------------------------------------------------
"stdin_fd = stdin.fileno()
stdout_fd = stdout.fileno()
tdin_fd is not None:
if isatty(stdin_fd):
        intr = termios.tcgetattr(stdin_fd)[6][termios.VINTR]
        backspace = termios.tcgetattr(stdin_fd)[6][termios.VERASE]
    old_settings = termios.tcgetattr(stdin_fd)
    tty.setraw(stdin_fd)

    # Only set stdout to raw mode if it is a TTY. This is needed when redirecting
    # stdout to a file since a file cannot be set to raw mode.
    if isatty(stdout_fd):
        tty.setraw(stdout_fd)
        new_settings = termios.tcgetattr(stdin_fd)
        termios.tcsetattr(stdin_fd, termios.TCSANOW, new_settings)

    if stdin_fd is not None:


        if stdin_fd is None or not isatty(stdin_fd):
"
-------------------------------------------------------------------------
"Recom
PRs: 42217, 42441"
-------------------------------------------------------------------------
=========================================================================
"# restore the old settings for the duped stdin stdin_fd
if not(None in (stdin_fd, old_settings)) and isatty(stdin_fd):
    termios.tcsetattr(stdin_fd, termios.TCSADRAIN, old_settings)
"
-------------------------------------------------------------------------
"```python
# restore the old settings for the duped stdin stdin_fd
if stdin_fd is not None and old_settings is not None and os.isatty(stdin_fd):
    termios.tcsetattr(stdin_fd, termios.TCSADRAIN, old_settings)
```"
-------------------------------------------------------------------------
"# restore the old settings for the duped stdin stdin_fd
if not(None in (stdin_fd, old_settings)) and isatty(stdin_fd):
    termios.tcsetattr(stdin_fd, termios.TCSADRAIN, old_settings)
"
-------------------------------------------------------------------------
"Recom
PRs: 42217, 42441"
-------------------------------------------------------------------------
=========================================================================
"stdin_fd = None
"
-------------------------------------------------------------------------
stdin_fd = None
-------------------------------------------------------------------------
"stdin_fd = None
"
-------------------------------------------------------------------------
"Recom
PRs: 42217, 42440"
-------------------------------------------------------------------------
=========================================================================
"stdin_fd = None
stdout_fd = None
"
-------------------------------------------------------------------------
"stdin_fd = None
stdout_fd = None"
-------------------------------------------------------------------------
"stdin_fd = None
stdout_fd = None
"
-------------------------------------------------------------------------
"Recom
PRs: 42217, 42440"
-------------------------------------------------------------------------
=========================================================================
"stdin_fd = stdin.fileno()
stdout_fd = stdout.fileno()
tdin_fd is not None:
if isatty(stdin_fd):
        intr = termios.tcgetattr(stdin_fd)[6][termios.VINTR]
        backspace = termios.tcgetattr(stdin_fd)[6][termios.VERASE]
    old_settings = termios.tcgetattr(stdin_fd)
    tty.setraw(stdin_fd)

    # Only set stdout to raw mode if it is a TTY. This is needed when redirecting
    # stdout to a file since a file cannot be set to raw mode.
    if isatty(stdout_fd):
        tty.setraw(stdout_fd)
        new_settings = termios.tcgetattr(stdin_fd)
        termios.tcsetattr(stdin_fd, termios.TCSANOW, new_settings)

    if stdin_fd is not None:


        if stdin_fd is None or not isatty(stdin_fd):
"
-------------------------------------------------------------------------
"```python
stdin_fd = None
stdout_fd = None

if stdin is not None:
    stdin_fd = stdin.fileno()
    stdout_fd = sys.stdout.fileno()

if stdin_fd is not None:
    if os.isatty(stdin_fd):
        intr = termios.tcgetattr(stdin_fd)[6][termios.VINTR]
        backspace = termios.tcgetattr(stdin_fd)[6][termios.VERASE]
    
    old_settings = termios.tcgetattr(stdin_fd)
    tty.setraw(stdin_fd)

    # Only set stdout to raw mode if it is a TTY. This is needed when redirecting
    # stdout to a file since a file cannot be set to raw mode.
    if os.isatty(stdout_fd):
        tty.setraw(stdout_fd)
        new_settings = termios.tcgetattr(stdin_fd)
        termios.tcsetattr(stdin_fd, termios.TCSANOW, new_settings)

    if stdin_fd is not None:
        if stdin_fd is None or not os.isatty(stdin_fd):
```"
-------------------------------------------------------------------------
"stdin_fd = stdin.fileno()
stdout_fd = stdout.fileno()
tdin_fd is not None:
if isatty(stdin_fd):
        intr = termios.tcgetattr(stdin_fd)[6][termios.VINTR]
        backspace = termios.tcgetattr(stdin_fd)[6][termios.VERASE]
    old_settings = termios.tcgetattr(stdin_fd)
    tty.setraw(stdin_fd)

    # Only set stdout to raw mode if it is a TTY. This is needed when redirecting
    # stdout to a file since a file cannot be set to raw mode.
    if isatty(stdout_fd):
        tty.setraw(stdout_fd)
        new_settings = termios.tcgetattr(stdin_fd)
        termios.tcsetattr(stdin_fd, termios.TCSANOW, new_settings)

    if stdin_fd is not None:


        if stdin_fd is None or not isatty(stdin_fd):
"
-------------------------------------------------------------------------
"Recom
PRs: 42217, 42440"
-------------------------------------------------------------------------
=========================================================================
"# restore the old settings for the duped stdin stdin_fd
if not(None in (stdin_fd, old_settings)) and isatty(stdin_fd):
    termios.tcsetattr(stdin_fd, termios.TCSADRAIN, old_settings)
"
-------------------------------------------------------------------------
"```python
# restore the old settings for the duped stdin stdin_fd
if stdin_fd is not None and old_settings is not None and os.isatty(stdin_fd):
    termios.tcsetattr(stdin_fd, termios.TCSADRAIN, old_settings)
```"
-------------------------------------------------------------------------
"# restore the old settings for the duped stdin stdin_fd
if not(None in (stdin_fd, old_settings)) and isatty(stdin_fd):
    termios.tcsetattr(stdin_fd, termios.TCSADRAIN, old_settings)
"
-------------------------------------------------------------------------
"Recom
PRs: 42217, 42440"
-------------------------------------------------------------------------
=========================================================================
"mode = re.search(r'Administrative Mode: (?:.* )?(\w)$', config, re.M)
access = re.search(r'Access Mode VLAN: (\d)', config)
native = re.search(r'Trunking Native Mode VLAN: (\d)', config)
trunk = re.search(r'Trunking VLANs Enabled: (.)$', config, re.M)
if mode:
    mode = mode.group(1)
if access:
    access = access.group(1)
if native:
    native = native.group(1)
if trunk:
    trunk = trunk.group(1)
"
-------------------------------------------------------------------------
"from __future__ import absolute_import, division, print_function

import re
from ansible.module_utils.network.common.utils import run_commands

def interface_is_portchannel(name, module):
    def get_switchport(name, module):
        config = run_commands(module, ['show interface {0} switchport'.format(name)])[0]
        mode = re.search(r'Administrative Mode: (?:.* )?(\w)$', config, re.M)
        access = re.search(r'Access Mode VLAN: (\d)', config)
        native = re.search(r'Trunking Native Mode VLAN: (\d)', config)
        trunk = re.search(r'Trunking VLANs Enabled: (.)$', config, re.M)
        
        if mode:
            mode = mode.group(1)
        if access:
            access = access.group(1)
        if native:
            native = native.group(1)
        if trunk:
            trunk = trunk.group(1)"
-------------------------------------------------------------------------
"mode = re.search(r'Administrative Mode: (?:.* )?(\w)$', config, re.M)
access = re.search(r'Access Mode VLAN: (\d)', config)
native = re.search(r'Trunking Native Mode VLAN: (\d)', config)
trunk = re.search(r'Trunking VLANs Enabled: (.)$', config, re.M)
if mode:
    mode = mode.group(1)
if access:
    access = access.group(1)
if native:
    native = native.group(1)
if trunk:
    trunk = trunk.group(1)
"
-------------------------------------------------------------------------
"Recom
PRs: 42312, 42343"
-------------------------------------------------------------------------
=========================================================================
"var: connection.query_results
y_results:
"
-------------------------------------------------------------------------
"- name: Print results from the query
  debug:
    var: connection.query_results"
-------------------------------------------------------------------------
"var: connection.query_results
y_results:
"
-------------------------------------------------------------------------
"Recom
PRs: 39626, 42231"
-------------------------------------------------------------------------
=========================================================================
"module.exit_json(changed=True, query_results=results)
"
-------------------------------------------------------------------------
"```python
if __name__ == '__main__':
    influx = AnsibleInfluxDBRead(module)
    query = module.params.get('query')
    results = influx.read_by_query(query)
    module.exit_json(changed=True, query_results=results)
```"
-------------------------------------------------------------------------
"module.exit_json(changed=True, query_results=results)
"
-------------------------------------------------------------------------
"Recom
PRs: 39626, 42231"
-------------------------------------------------------------------------
=========================================================================
"if regexp is not None:
"
-------------------------------------------------------------------------
"```python
def present(module, dest, regexp, line, insertafter, insertbefore, create):
    if regexp is not None:
        if module._diff:
            diff['before'] = to_native(b('').join(b_lines))

            bre_m = re.compile(to_bytes(regexp, errors='surrogate_or_strict'))

        if insertafter not in (None, 'BOF', 'EOF'):
```"
-------------------------------------------------------------------------
"if regexp is None and line is None:
    module.fail_json(msg='one of line or regexp is required with state=absent')
"
-------------------------------------------------------------------------
"Recom
PRs: 42013, 42207"
-------------------------------------------------------------------------
=========================================================================
"if regexp is not None:
"
-------------------------------------------------------------------------
"```python
def present(module, dest, regexp, line, insertafter, insertbefore, create,
     if module._diff:
         diff['before'] = to_native(b('').join(b_lines))
 
     if regexp is not None:
         bre_m = re.compile(to_bytes(regexp, errors='surrogate_or_strict'))
 
     if insertafter not in (None, 'BOF', 'EOF'):
```"
-------------------------------------------------------------------------
"if regexp is None and line is None:
    module.fail_json(msg='one of line or regexp is required with state=absent')
"
-------------------------------------------------------------------------
"Recom
PRs: 42013, 42204"
-------------------------------------------------------------------------
=========================================================================
"'Code of Conduct': 'https://docs.ansible.com/ansible/latest/community/code_of_conduct.html',
'Mailing lists': 'https://docs.ansible.com/ansible/latest/community/communication.html#mailing-list-information',
"
-------------------------------------------------------------------------
"```python
static_setup_params = dict(
     project_urls={
         'Bug Tracker': 'https://github.com/ansible/ansible/issues',
         'CI: Shippable': 'https://app.shippable.com/github/ansible/ansible',
         'Documentation': 'https://docs.ansible.com/ansible/',
         'Source Code': 'https://github.com/ansible/ansible',
         'Code of Conduct': 'https://docs.ansible.com/ansible/latest/community/code_of_conduct.html',
         'Mailing lists': 'https://docs.ansible.com/ansible/latest/community/communication.html#mailing-list-information',
     },
     license='GPLv3+',
)
```"
-------------------------------------------------------------------------
"'Code of Conduct': 'https://docs.ansible.com/ansible/latest/community/code_of_conduct.html',
'Mailing lists': 'https://docs.ansible.com/ansible/latest/community/communication.html#mailing-list-information',
"
-------------------------------------------------------------------------
"Recom
PRs: 42101, 42157"
-------------------------------------------------------------------------
=========================================================================
"'Code of Conduct': 'https://docs.ansible.com/ansible/latest/community/code_of_conduct.html',
'Mailing lists': 'https://docs.ansible.com/ansible/latest/community/communication.html#mailing-list-information',
"
-------------------------------------------------------------------------
"```python
static_setup_params = dict(
     project_urls={
         'Bug Tracker': 'https://github.com/ansible/ansible/issues',
         'CI: Shippable': 'https://app.shippable.com/github/ansible/ansible',
         'Documentation': 'https://docs.ansible.com/ansible/',
         'Source Code': 'https://github.com/ansible/ansible',
         'Code of Conduct': 'https://docs.ansible.com/ansible/latest/community/code_of_conduct.html',
         'Mailing lists': 'https://docs.ansible.com/ansible/latest/community/communication.html#mailing-list-information',
     },
     license='GPLv3+',
)
```"
-------------------------------------------------------------------------
"'Code of Conduct': 'https://docs.ansible.com/ansible/latest/community/code_of_conduct.html',
'Mailing lists': 'https://docs.ansible.com/ansible/latest/community/communication.html#mailing-list-information',
"
-------------------------------------------------------------------------
"Recom
PRs: 42101, 42156"
-------------------------------------------------------------------------
=========================================================================
"self.set_options()
"
-------------------------------------------------------------------------
self.set_options()
-------------------------------------------------------------------------
"self.set_options()
"
-------------------------------------------------------------------------
"Recom
PRs: 42049, 42120"
-------------------------------------------------------------------------
=========================================================================
"self.set_options()
"
-------------------------------------------------------------------------
"```python
self.set_options()
```"
-------------------------------------------------------------------------
"self.set_options()
"
-------------------------------------------------------------------------
"Recom
PRs: 42049, 42120"
-------------------------------------------------------------------------
=========================================================================
"# Regexp matched a line in the file
"
-------------------------------------------------------------------------
"```
# Regexp matched a line in the file
```"
-------------------------------------------------------------------------
"# Regexp matched a line in the file
"
-------------------------------------------------------------------------
"Recom
PRs: 41767, 41930"
-------------------------------------------------------------------------
=========================================================================
"# If no regexp was given and a line match is found anywhere in the file,
# insert the line appropriately if using insertbefore or insertafter
"
-------------------------------------------------------------------------
"```python
import os
import __future__
import re
import tempfile
import ansible.module_utils.six as six
import ansible.module_utils._text as _text
import ansible.module_utils.basic as basic

def present(module, dest, regexp, line, insertafter, insertbefore, create):
    if not b_new_line.endswith(b_linesep):
        b_new_line += b_linesep

    if regexp is None and m:

        # Insert lines
        if insertafter and insertafter != 'EOF':
            # Ensure there is a line separator after the found string
            # at the end of the file.
            if b_lines and not b_lines[-1][-1:] in (b('\n'), b('\r')):
                # Insert the line appropriately if using insertbefore or insertafter
                pass
```"
-------------------------------------------------------------------------
"# If no regexp was given and a line match is found anywhere in the file,
# insert the line appropriately if using insertbefore or insertafter
"
-------------------------------------------------------------------------
"Recom
PRs: 41767, 41930"
-------------------------------------------------------------------------
=========================================================================
"elif insertbefore and insertbefore != 'BOF':
"
-------------------------------------------------------------------------
"```python
                 # If the line to insert before is at the beginning of the file
                 # use the appropriate index value.
                 if index[1] == 0:
                     pass
                 elif insertbefore and insertbefore != 'BOF':
```"
-------------------------------------------------------------------------
"elif insertbefore and insertbefore != 'BOF':
"
-------------------------------------------------------------------------
"Recom
PRs: 41767, 41930"
-------------------------------------------------------------------------
=========================================================================
"# Regexp matched a line in the file
"
-------------------------------------------------------------------------
"```python
     msg = ''
     changed = False
     b_linesep = to_bytes(os.linesep, errors='surrogate_or_strict')
     if index[0] != -1:
         if backrefs:
             b_new_line = m.expand(b_line)
```"
-------------------------------------------------------------------------
"# Regexp matched a line in the file
"
-------------------------------------------------------------------------
"Recom
PRs: 41767, 41929"
-------------------------------------------------------------------------
=========================================================================
"# If no regexp was given and a line match is found anywhere in the file,
# insert the line appropriately if using insertbefore or insertafter
"
-------------------------------------------------------------------------
"```python
import os
import re
import tempfile
import ansible.module_utils.six as six
from ansible.module_utils._text import str_to_bytes as b, to_text
import ansible.module_utils.basic as basic

def present(module, dest, regexp, line, insertafter, insertbefore, create):
    if not b_new_line.endswith(b_linesep):
        b_new_line += b_linesep

    if regexp is None and m:

        # Insert lines
        if insertafter and insertafter != 'EOF':
            # Ensure there is a line separator after the found string
            # at the end of the file.
            if b_lines and not b_lines[-1][-1:] in (b('\n'), b('\r')):
```"
-------------------------------------------------------------------------
"# If no regexp was given and a line match is found anywhere in the file,
# insert the line appropriately if using insertbefore or insertafter
"
-------------------------------------------------------------------------
"Recom
PRs: 41767, 41929"
-------------------------------------------------------------------------
=========================================================================
"elif insertbefore and insertbefore != 'BOF':
"
-------------------------------------------------------------------------
"```python
elif insertbefore and insertbefore != 'BOF':
```"
-------------------------------------------------------------------------
"elif insertbefore and insertbefore != 'BOF':
"
-------------------------------------------------------------------------
"Recom
PRs: 41767, 41929"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_text
"
-------------------------------------------------------------------------
from ansible.module_utils._text import to_text
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_text
"
-------------------------------------------------------------------------
"Recom
PRs: 41907, 41928"
-------------------------------------------------------------------------
=========================================================================
"salt_chars = u''.join((
    to_text(string.ascii_letters),
    to_text(string.digits),
    u'./'
))
"
-------------------------------------------------------------------------
"```python
import string
salt_chars = ''.join((
    str(string.ascii_letters),
    str(string.digits),
    './'
))
```"
-------------------------------------------------------------------------
"salt_chars = u''.join((
    to_text(string.ascii_letters),
    to_text(string.digits),
    u'./'
))
"
-------------------------------------------------------------------------
"Recom
PRs: 41907, 41928"
-------------------------------------------------------------------------
=========================================================================
"real_host = self._inventory.hosts.get(host.name)
if real_host is None:
    if host.name == self._inventory.localhost.name:
        real_host = self._inventory.localhost
    else:
        raise AnsibleError('%s cannot be matched in inventory' % host.name)
"
-------------------------------------------------------------------------
"```python
real_host = self._inventory.get_host(host.name)
if real_host is None:
    if host.name == self._inventory.localhost.name:
        real_host = self._inventory.localhost
    else:
        raise ansible.errors.AnsibleError('%s cannot be matched in inventory' % host.name)
```"
-------------------------------------------------------------------------
"real_host = self._inventory.hosts.get(host.name)
if real_host is None:
    if host.name == self._inventory.localhost.name:
        real_host = self._inventory.localhost
    else:
        raise AnsibleError('%s cannot be matched in inventory' % host.name)
"
-------------------------------------------------------------------------
"Recom
PRs: 41860, 41927"
-------------------------------------------------------------------------
=========================================================================
"real_host = self._inventory.hosts.get(host.name)
if real_host is None:
    if host.name == self._inventory.localhost.name:
        real_host = self._inventory.localhost
    else:
        raise AnsibleError('%s cannot be matched in inventory' % host.name)
"
-------------------------------------------------------------------------
"```python
real_host = None
try:
    real_host = self._inventory.get_host(host.name)
except ansible.errors.AnsibleError:
    if host.name == self._inventory.localhost.name:
        real_host = self._inventory.localhost
    else:
        raise ansible.errors.AnsibleError('%s cannot be matched in inventory' % host.name)
```"
-------------------------------------------------------------------------
"real_host = self._inventory.hosts.get(host.name)
if real_host is None:
    if host.name == self._inventory.localhost.name:
        real_host = self._inventory.localhost
    else:
        raise AnsibleError('%s cannot be matched in inventory' % host.name)
"
-------------------------------------------------------------------------
"Recom
PRs: 41860, 41926"
-------------------------------------------------------------------------
=========================================================================
"output = run_commands(module, {'command': 'show vrf', 'output': 'text'})
"
-------------------------------------------------------------------------
"```python
output = run_commands(module, {'command': 'show vrf', 'output': 'text'})
```"
-------------------------------------------------------------------------
"output = run_commands(module, {'command': 'show vrf', 'output': 'text'})
"
-------------------------------------------------------------------------
"Recom
PRs: 41470, 41771"
-------------------------------------------------------------------------
=========================================================================
"if not meraki.params['org_name'] and not meraki.params['org_id']:
    meraki.fail_json(msg='org_name or org_id is required')

org_id = meraki.params['org_id']
"
-------------------------------------------------------------------------
"```python
if not meraki.params['org_name'] and not meraki.params['org_id']:
    meraki.fail_json(msg='org_name or org_id is required')

org_id = meraki.params['org_id']
```"
-------------------------------------------------------------------------
"if not meraki.params['org_name'] and not meraki.params['org_id']:
    meraki.fail_json(msg='org_name or org_id is required')

org_id = meraki.params['org_id']
"
-------------------------------------------------------------------------
"Recom
PRs: 41517, 41746"
-------------------------------------------------------------------------
=========================================================================
"data:
description: Information about the organization which was created or modified
returned: success
type: complex
contains:
  id:
    description: Unique identification number of organization
    returned: success
    type: int
    sample: 2930418
  name:
    description: Name of organization
    returned: success
    type: string
    sample: YourOrg

"
-------------------------------------------------------------------------
"```python
RETURN = r'''
{
    ""description"": ""Information about the organization which was created or modified"",
    ""type"": ""complex"",
    ""returned"": ""success"",
    ""contains"": {
        ""id"": {
            ""description"": ""Unique identification number of organization"",
            ""returned"": ""success"",
            ""type"": ""int"",
            ""sample"": 2930418
        },
        ""name"": {
            ""description"": ""Name of organization"",
            ""returned"": ""success"",
            ""type"": ""string"",
            ""sample"": ""YourOrg""
        }
    }
}
'''
```"
-------------------------------------------------------------------------
"data:
description: Information about the organization which was created or modified
returned: success
type: complex
contains:
  id:
    description: Unique identification number of organization
    returned: success
    type: int
    sample: 2930418
  name:
    description: Name of organization
    returned: success
    type: string
    sample: YourOrg

"
-------------------------------------------------------------------------
"Recom
PRs: 41370, 41732"
-------------------------------------------------------------------------
=========================================================================
"self.token = None
"
-------------------------------------------------------------------------
self.token = None
-------------------------------------------------------------------------
"self.token = None
"
-------------------------------------------------------------------------
"Recom
PRs: 41259, 41644"
-------------------------------------------------------------------------
=========================================================================
"self.token = self.get_option(""oauth_token"")
"
-------------------------------------------------------------------------
"self.token = self.get_option(""SCW_TOKEN"")"
-------------------------------------------------------------------------
"self.token = self.get_option(""oauth_token"")
"
-------------------------------------------------------------------------
"Recom
PRs: 41259, 41644"
-------------------------------------------------------------------------
=========================================================================
"pytest.importorskip(""winrm"")

"
-------------------------------------------------------------------------
"from pytest import importorskip

importorskip(""winrm"")"
-------------------------------------------------------------------------
"pytest.importorskip(""winrm"")

"
-------------------------------------------------------------------------
"Recom
PRs: 41596, 41598"
-------------------------------------------------------------------------
=========================================================================
"import botocore
pass  # handled by AnsibleAWSModule
 ansible.module_utils.aws.core import AnsibleAWSModule
 ansible.module_utils.ec2 import (camel_dict_to_snake_dict, boto3_tag_list_to_ansible_dict, ec2_argument_spec,
 distutils.version import LooseVersion
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't get target group attributes"")
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't get target group tags"")
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
        module.fail_json_aws(e, msg=""Couldn't get target group"")
"
-------------------------------------------------------------------------
"```python
# pass  # handled by AnsibleAWSModule
from ansible.module_utils.aws.core import AnsibleAWSModule
from ansible.module_utils.ec2 import (camel_dict_to_snake_dict, boto3_tag_list_to_ansible_dict, ec2_argument_spec)
from distutils.version import LooseVersion

import botocore

try:
    # Handle exceptions for getting target group attributes
    raise botocore.exceptions.ClientError(""Couldn't get target group attributes"")
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't get target group attributes"")

try:
    # Handle exceptions for getting target group tags
    raise botocore.exceptions.ClientError(""Couldn't get target group tags"")
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't get target group tags"")

try:
    # Handle exceptions for getting target group
    raise botocore.exceptions.ClientError(""Couldn't get target group"")
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't get target group"")
```"
-------------------------------------------------------------------------
"import botocore
pass  # handled by AnsibleAWSModule
 ansible.module_utils.aws.core import AnsibleAWSModule
 ansible.module_utils.ec2 import (camel_dict_to_snake_dict, boto3_tag_list_to_ansible_dict, ec2_argument_spec,
 distutils.version import LooseVersion
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't get target group attributes"")
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't get target group tags"")
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
        module.fail_json_aws(e, msg=""Couldn't get target group"")
"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't describe target health"")
_if_ip_target_type_not_supported(module):
ooseVersion(botocore.__version__) < LooseVersion('1.7.2'):
module.fail_json(msg=""target_type ip requires botocore version 1.7.2 or later. Version %s is installed"" %
                 botocore.__version__)


"
-------------------------------------------------------------------------
"```python
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't describe target health"")

if target_type == 'ip' and LooseVersion(botocore.__version__) < LooseVersion('1.7.2'):
    module.fail_json(msg=""target_type ip requires botocore version 1.7.2 or later. Version %s is installed"" %
                     botocore.__version__)
```"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't describe target health"")
_if_ip_target_type_not_supported(module):
ooseVersion(botocore.__version__) < LooseVersion('1.7.2'):
module.fail_json(msg=""target_type ip requires botocore version 1.7.2 or later. Version %s is installed"" %
                 botocore.__version__)


"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"if params['TargetType'] == 'ip':
    fail_if_ip_target_type_not_supported(module)
"
-------------------------------------------------------------------------
"```python
if params.get(""TargetType"") == ""ip"":
    fail_if_ip_target_type_not_supported(module)
```"
-------------------------------------------------------------------------
"if params['TargetType'] == 'ip':
    fail_if_ip_target_type_not_supported(module)
"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't update target group"")
"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json(msg=""Couldn't update target group"")"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't update target group"")
"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't get target group health"")
"
-------------------------------------------------------------------------
"```python
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json(msg=""Couldn't get target group health"")
```"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't get target group health"")
"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't register targets"")
"
-------------------------------------------------------------------------
"```python
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json(msg=""Couldn't register targets"")
```"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't register targets"")
"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't remove targets"")
"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't remove targets"")"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't remove targets"")
"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't get target health"")
"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json(msg=""Couldn't get target health"")"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't get target health"")
"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't remove targets"")
"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't remove targets"")"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't remove targets"")
"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't create target group"")
"
-------------------------------------------------------------------------
"```python
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json(e, msg=""Couldn't create target group"")
```"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't create target group"")
"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't register targets"")
"
-------------------------------------------------------------------------
"```python
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't register targets"")
```"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't register targets"")
"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't delete target group"")
"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json(msg=""Couldn't delete target group"")"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't delete target group"")
"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't delete tags from target group"")
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't add tags to target group"")
"
-------------------------------------------------------------------------
"```python
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't delete tags from target group"")
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't add tags to target group"")
```"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't delete tags from target group"")
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't add tags to target group"")
"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't delete target group"")
    health_check_protocol=dict(choices=['http', 'https', 'tcp', 'HTTP', 'HTTPS', 'TCP']),
    health_check_path=dict(),
    name=dict(required=True),
    protocol=dict(choices=['http', 'https', 'tcp', 'HTTP', 'HTTPS', 'TCP']),
    stickiness_type=dict(default='lb_cookie'),
    state=dict(required=True, choices=['present', 'absent']),
    successful_response_codes=dict(),
    target_type=dict(default='instance', choices=['instance', 'ip']),
    vpc_id=dict(),
le = AnsibleAWSModule(argument_spec=argument_spec,
                      required_if=[['state', 'present', ['protocol', 'port', 'vpc_id']]])
ection = module.client('elbv2')
odule.params.get('state') == 'present':

"
-------------------------------------------------------------------------
"```python
except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't delete target group"")

argument_spec.update(
    dict(
        health_check_protocol=dict(choices=['http', 'https', 'tcp', 'HTTP', 'HTTPS', 'TCP']),
        health_check_path=dict(),
        name=dict(required=True),
        protocol=dict(choices=['http', 'https', 'tcp', 'HTTP', 'HTTPS', 'TCP']),
        stickiness_type=dict(default='lb_cookie'),
        state=dict(required=True, choices=['present', 'absent']),
        successful_response_codes=dict(),
        target_type=dict(default='instance', choices=['instance', 'ip']),
        vpc_id=dict(),
    )
)

le = AnsibleAWSModule(argument_spec=argument_spec, required_if=[['state', 'present', ['protocol', 'port', 'vpc_id']]])

ection = module.client('elbv2')

if module.params.get('state') == 'present':
```"
-------------------------------------------------------------------------
"except (botocore.exceptions.ClientError, botocore.exceptions.BotoCoreError) as e:
    module.fail_json_aws(e, msg=""Couldn't delete target group"")
    health_check_protocol=dict(choices=['http', 'https', 'tcp', 'HTTP', 'HTTPS', 'TCP']),
    health_check_path=dict(),
    name=dict(required=True),
    protocol=dict(choices=['http', 'https', 'tcp', 'HTTP', 'HTTPS', 'TCP']),
    stickiness_type=dict(default='lb_cookie'),
    state=dict(required=True, choices=['present', 'absent']),
    successful_response_codes=dict(),
    target_type=dict(default='instance', choices=['instance', 'ip']),
    vpc_id=dict(),
le = AnsibleAWSModule(argument_spec=argument_spec,
                      required_if=[['state', 'present', ['protocol', 'port', 'vpc_id']]])
ection = module.client('elbv2')
odule.params.get('state') == 'present':

"
-------------------------------------------------------------------------
"Recom
PRs: 38313, 41430"
-------------------------------------------------------------------------
=========================================================================
"copy: src={{lookup('first_found', params)}} dest=/some/file
  params:
    files:
      - foo
      - ""{{inventory_hostname}}""
      - bar
    paths:
      - /tmp/production
      - /tmp/staging
"
-------------------------------------------------------------------------
"```yaml
- name: same copy but specific paths
  template:
    src: ""{{ lookup('first_found', {'files': ['foo', inventory_hostname, 'bar'], 'paths': ['/tmp/production', '/tmp/staging']}) }}""
    dest: /some/file
```"
-------------------------------------------------------------------------
"copy: src={{lookup('first_found', params)}} dest=/some/file
  params:
    files:
      - foo
      - ""{{inventory_hostname}}""
      - bar
    paths:
      - /tmp/production
      - /tmp/staging
"
-------------------------------------------------------------------------
"Recom
PRs: 40821, 41329"
-------------------------------------------------------------------------
=========================================================================
"include_vars: ""{{lookup('first_found', params)}}""
  params:
    files:
      - '{{ansible_os_distribution}}.yml'
      - '{{ansible_os_family}}.yml'
      - default.yml
    paths:
      - 'vars'
"
-------------------------------------------------------------------------
"```python
- include_vars: ""{{lookup('first_found', params)}}""
  vars:
    params:
      files:
        - '{{ansible_os_distribution}}.yml'
        - '{{ansible_os_family}}.yml'
        - default.yml
      paths:
        - 'vars'
```"
-------------------------------------------------------------------------
"include_vars: ""{{lookup('first_found', params)}}""
  params:
    files:
      - '{{ansible_os_distribution}}.yml'
      - '{{ansible_os_family}}.yml'
      - default.yml
    paths:
      - 'vars'
"
-------------------------------------------------------------------------
"Recom
PRs: 40821, 41329"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=msg, failed_conditions=failed_conditions)
"
-------------------------------------------------------------------------
"module.fail_json(msg=msg, failed_conditions=failed_conditions)"
-------------------------------------------------------------------------
"module.fail_json(msg=msg, failed_conditions=failed_conditions)
"
-------------------------------------------------------------------------
"Recom
PRs: 41287, 41325"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=msg, failed_conditions=failed_conditions)
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=msg, failed_conditions=failed_conditions)
```"
-------------------------------------------------------------------------
"module.fail_json(msg=msg, failed_conditions=failed_conditions)
"
-------------------------------------------------------------------------
"Recom
PRs: 41287, 41324"
-------------------------------------------------------------------------
=========================================================================
"for domain in list(all_origins.keys()):
rn ansible_list_to_cloudfront_list(list(all_origins.values()))
"
-------------------------------------------------------------------------
"```python
from collections import OrderedDict
from ansible.module_utils.aws.core import AnsibleAWSModule
from ansible.module_utils.aws.cloudfront_facts import ansible_list_to_cloudfront_list

class CloudFrontValidationManager(object):
    for domain in list(all_origins.keys()):
        ansible_list_to_cloudfront_list(list(all_origins.values()))
```"
-------------------------------------------------------------------------
"for domain in list(all_origins.keys()):
rn ansible_list_to_cloudfront_list(list(all_origins.values()))
"
-------------------------------------------------------------------------
"Recom
PRs: 37340, 41315"
-------------------------------------------------------------------------
=========================================================================
"return ansible_list_to_cloudfront_list(list(all_cache_behaviors.values()))
"
-------------------------------------------------------------------------
"```python
return ansible_list_to_cloudfront_list(list(all_cache_behaviors.values()))
```"
-------------------------------------------------------------------------
"return ansible_list_to_cloudfront_list(list(all_cache_behaviors.values()))
"
-------------------------------------------------------------------------
"Recom
PRs: 37340, 41315"
-------------------------------------------------------------------------
=========================================================================
"if headers:
    headers.sort()
"
-------------------------------------------------------------------------
"```python
if headers:
    headers.sort()
```"
-------------------------------------------------------------------------
"if headers:
    headers.sort()
"
-------------------------------------------------------------------------
"Recom
PRs: 37340, 41315"
-------------------------------------------------------------------------
=========================================================================
"self.plugin_list.update(self.find_plugins(path, plugin_type))
"
-------------------------------------------------------------------------
"self.plugin_list.update(self.find_plugins(path, plugin_type))"
-------------------------------------------------------------------------
"self.plugin_list.update(self.find_plugins(path, plugin_type))
"
-------------------------------------------------------------------------
"Recom
PRs: 41281, 41286"
-------------------------------------------------------------------------
=========================================================================
"self.plugin_list.update(self.find_plugins(path, plugin_type))
"
-------------------------------------------------------------------------
"```python
self.plugin_list.update(self.find_plugins(path, plugin_type))
```"
-------------------------------------------------------------------------
"self.plugin_list.update(self.find_plugins(path, plugin_type))
"
-------------------------------------------------------------------------
"Recom
PRs: 41281, 41286"
-------------------------------------------------------------------------
=========================================================================
"from ansible.utils.vars import merge_hash
"
-------------------------------------------------------------------------
"```python
from ansible.utils.vars import merge_hash
```"
-------------------------------------------------------------------------
"from ansible.utils.vars import merge_hash
"
-------------------------------------------------------------------------
"Recom
PRs: 40826, 41276"
-------------------------------------------------------------------------
=========================================================================
"self._supports_async = True

"
-------------------------------------------------------------------------
self._supports_async = True
-------------------------------------------------------------------------
"self._supports_async = True

"
-------------------------------------------------------------------------
"Recom
PRs: 40826, 41276"
-------------------------------------------------------------------------
=========================================================================
"wrap_async = self._task.async_val and not self._connection.has_native_async
# execute the aws_s3 module with the updated args
result = merge_hash(result, self._execute_module(module_args=new_module_args, task_vars=task_vars, wrap_async=wrap_async))

if not wrap_async:
    # remove a temporary path we created
    self._remove_tmp_path(self._connection._shell.tmpdir)

"
-------------------------------------------------------------------------
"```python
import os
from __future__ import absolute_import, division, print_function
from ansible.errors import AnsibleActionFail, AnsibleError
from ansible.plugins.action import ActionBase
from ansible.module_utils._text import to_text

wrap_async = self._task.async_val and not self._connection.has_native_async
# execute the aws_s3 module with the updated args
result = merge_hash(result, self._execute_module(module_args=new_module_args, task_vars=task_vars, wrap_async=wrap_async))

if not wrap_async:
    # remove a temporary path we created
    self._remove_tmp_path(self._connection._shell.tmpdir)
```"
-------------------------------------------------------------------------
"wrap_async = self._task.async_val and not self._connection.has_native_async
# execute the aws_s3 module with the updated args
result = merge_hash(result, self._execute_module(module_args=new_module_args, task_vars=task_vars, wrap_async=wrap_async))

if not wrap_async:
    # remove a temporary path we created
    self._remove_tmp_path(self._connection._shell.tmpdir)

"
-------------------------------------------------------------------------
"Recom
PRs: 40826, 41276"
-------------------------------------------------------------------------
=========================================================================
"from ansible.utils.vars import merge_hash
"
-------------------------------------------------------------------------
"```python
from ansible.utils.vars import merge_hash
```"
-------------------------------------------------------------------------
"from ansible.utils.vars import merge_hash
"
-------------------------------------------------------------------------
"Recom
PRs: 40826, 41275"
-------------------------------------------------------------------------
=========================================================================
"self._supports_async = True

"
-------------------------------------------------------------------------
"```python
self._supports_async = True
```"
-------------------------------------------------------------------------
"self._supports_async = True

"
-------------------------------------------------------------------------
"Recom
PRs: 40826, 41275"
-------------------------------------------------------------------------
=========================================================================
"wrap_async = self._task.async_val and not self._connection.has_native_async
# execute the aws_s3 module with the updated args
result = merge_hash(result, self._execute_module(module_args=new_module_args, task_vars=task_vars, wrap_async=wrap_async))

if not wrap_async:
    # remove a temporary path we created
    self._remove_tmp_path(self._connection._shell.tmpdir)

"
-------------------------------------------------------------------------
"```python
import os
from __future__ import absolute_import, division, print_function
from ansible.errors import AnsibleActionFail, AnsibleError
from ansible.plugins.action import ActionBase
from ansible.module_utils._text import to_text

class ActionModule(ActionBase):
    def run(self, tmp=None, task_vars=None):
        new_module_args = self._task.args.copy()
        wrap_async = self._task.async_val and not self._connection.has_native_async
        
        result = {}

        try:
            result = self._execute_module(module_args=new_module_args, task_vars=task_vars, wrap_async=wrap_async)
        except AnsibleActionFail as e:
            raise AnsibleActionFail(to_text(e))
        except AnsibleError as e:
            raise AnsibleActionFail(to_text(e))
        
        if not wrap_async:
            # remove a temporary path we created
            self._remove_tmp_path(self._connection._shell.tmpdir)
        
        return result
```  "
-------------------------------------------------------------------------
"wrap_async = self._task.async_val and not self._connection.has_native_async
# execute the aws_s3 module with the updated args
result = merge_hash(result, self._execute_module(module_args=new_module_args, task_vars=task_vars, wrap_async=wrap_async))

if not wrap_async:
    # remove a temporary path we created
    self._remove_tmp_path(self._connection._shell.tmpdir)

"
-------------------------------------------------------------------------
"Recom
PRs: 40826, 41275"
-------------------------------------------------------------------------
=========================================================================
"'aliases': module_info[module].get('aliases', set()),
"
-------------------------------------------------------------------------
"'aliases': module_info[module].get('aliases', set()),"
-------------------------------------------------------------------------
"'aliases': module_info[module].get('aliases', set()),
"
-------------------------------------------------------------------------
"Recom
PRs: 40293, 41266"
-------------------------------------------------------------------------
=========================================================================
"'supported_by': 'core'}
"
-------------------------------------------------------------------------
"__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                     'status': ['preview'],
'supported_by': 'core'}"
-------------------------------------------------------------------------
"'supported_by': 'core'}
"
-------------------------------------------------------------------------
"Recom
PRs: 41244, 41247"
-------------------------------------------------------------------------
=========================================================================
"'supported_by': 'core'}
"
-------------------------------------------------------------------------
"__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                     'status': ['preview'],
                     'supported_by': 'core'}"
-------------------------------------------------------------------------
"'supported_by': 'core'}
"
-------------------------------------------------------------------------
"Recom
PRs: 41244, 41247"
-------------------------------------------------------------------------
=========================================================================
"'supported_by': 'core'}
"
-------------------------------------------------------------------------
"```python
ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'core'}
```"
-------------------------------------------------------------------------
"'supported_by': 'core'}
"
-------------------------------------------------------------------------
"Recom
PRs: 41244, 41247"
-------------------------------------------------------------------------
=========================================================================
"'supported_by': 'core'}
"
-------------------------------------------------------------------------
"ANSIBLE_METADATA = {'metadata_version': '1.1',
                     'status': ['preview'],
                     'supported_by': 'core'}"
-------------------------------------------------------------------------
"'supported_by': 'core'}
"
-------------------------------------------------------------------------
"Recom
PRs: 41244, 41247"
-------------------------------------------------------------------------
=========================================================================
"'supported_by': 'core'}
"
-------------------------------------------------------------------------
"__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'core'}

DOCUMENTATION = '''
Required dependency: __future__, ansible.module_utils.basic, ansible.module_utils.net_tools.nios.api, 
Original metadata: Metadata change to 'core' for 2.5 supported NIOS modules (#41244)
--(cherry picked from commit 2c2af87b2edffe06f03407392cfde0aeccf9bf13)##### SUMMARY<!--- Describe the change, including rationale and design decisions -->Cherry-picked from devel for PR #41244, Metadata for NIOS 2.5 supported modules is changed from 'community' to 'core', showing the ansible-core support from ansible 2.6 onwards.<!--- If you are fixing an existing issue, please include ""Fixes #nnn"" in yourcommit message and your description; but you should still explain whatthe change does.-->##### ISSUE TYPE<!--- Pick one below and delete the rest: --> - Feature Pull Request##### COMPONENT NAME<!--- Name of the module, plugin, module or task -->NIOS##### ANSIBLE VERSION<!--- Paste verbatim output from ""ansible --version"" between quotes below -->```2.6```##### ADDITIONAL INFORMATION<!--- Include additional information to help people understand the change here.For bugs that don't have a linked bug report, a step-by-step reproductionof the problem is helpful. --><!--- Paste verbatim command output below, e.g. before and after your change -->``````"
-------------------------------------------------------------------------
"'supported_by': 'core'}
"
-------------------------------------------------------------------------
"Recom
PRs: 41244, 41247"
-------------------------------------------------------------------------
=========================================================================
"device = rename_item_if_exists(device, 'size', 'VolumeSize', 'Ebs', attribute_type=int)
device = rename_item_if_exists(device, 'volume_size', 'VolumeSize', 'Ebs', attribute_type=int)
"
-------------------------------------------------------------------------
"```python
device = rename_item_if_exists(device, 'size', 'VolumeSize', 'Ebs', attribute_type=int)
```"
-------------------------------------------------------------------------
"device = rename_item_if_exists(device, 'size', 'VolumeSize', 'Ebs', attribute_type=int)
device = rename_item_if_exists(device, 'volume_size', 'VolumeSize', 'Ebs', attribute_type=int)
"
-------------------------------------------------------------------------
"Recom
PRs: 40938, 41217"
-------------------------------------------------------------------------
=========================================================================
"def rename_item_if_exists(dict_object, attribute, new_attribute, child_node=None, attribute_type=None):
if attribute_type is not None:
    new_item = attribute_type(new_item)
    dict_object[new_attribute] = new_item
    dict_object[child_node][new_attribute] = new_item
"
-------------------------------------------------------------------------
"```python
import ansible.module_utils.ec2
import __future__
import botocore
import ansible.module_utils.aws.core
import time

def rename_item_if_exists(dict_object, attribute, new_attribute, child_node=None, attribute_type=None):
    new_item = dict_object.get(attribute)
    if new_item is not None:
        if attribute_type is not None:
            new_item = attribute_type(new_item)
        dict_object[new_attribute] = new_item
        if child_node is not None:
            dict_object[child_node][new_attribute] = new_item
        dict_object.pop(attribute)
    return dict_object
```"
-------------------------------------------------------------------------
"def rename_item_if_exists(dict_object, attribute, new_attribute, child_node=None, attribute_type=None):
if attribute_type is not None:
    new_item = attribute_type(new_item)
    dict_object[new_attribute] = new_item
    dict_object[child_node][new_attribute] = new_item
"
-------------------------------------------------------------------------
"Recom
PRs: 40938, 41217"
-------------------------------------------------------------------------
=========================================================================
"device = rename_item_if_exists(device, 'size', 'VolumeSize', 'Ebs', attribute_type=int)
device = rename_item_if_exists(device, 'volume_size', 'VolumeSize', 'Ebs', attribute_type=int)
"
-------------------------------------------------------------------------
"device = rename_item_if_exists(device, 'size', 'VolumeSize', 'Ebs', attribute_type=int)
device = rename_item_if_exists(device, 'volume_size', 'VolumeSize', 'Ebs', attribute_type=int)"
-------------------------------------------------------------------------
"device = rename_item_if_exists(device, 'size', 'VolumeSize', 'Ebs', attribute_type=int)
device = rename_item_if_exists(device, 'volume_size', 'VolumeSize', 'Ebs', attribute_type=int)
"
-------------------------------------------------------------------------
"Recom
PRs: 40938, 41216"
-------------------------------------------------------------------------
=========================================================================
"def rename_item_if_exists(dict_object, attribute, new_attribute, child_node=None, attribute_type=None):
if attribute_type is not None:
    new_item = attribute_type(new_item)
    dict_object[new_attribute] = new_item
    dict_object[child_node][new_attribute] = new_item
"
-------------------------------------------------------------------------
"```python
def rename_item_if_exists(dict_object, attribute, new_attribute, child_node=None, attribute_type=None):
    new_item = dict_object.get(attribute)
    if new_item is not None:
        if attribute_type is not None:
            new_item = attribute_type(new_item)
        dict_object[new_attribute] = new_item
        if child_node is not None:
            dict_object[child_node][new_attribute] = new_item
        dict_object.pop(attribute)
    return dict_object
```"
-------------------------------------------------------------------------
"def rename_item_if_exists(dict_object, attribute, new_attribute, child_node=None, attribute_type=None):
if attribute_type is not None:
    new_item = attribute_type(new_item)
    dict_object[new_attribute] = new_item
    dict_object[child_node][new_attribute] = new_item
"
-------------------------------------------------------------------------
"Recom
PRs: 40938, 41216"
-------------------------------------------------------------------------
=========================================================================
"textret = self.format_plugin_doc(plugin, loader, plugin_type, search_paths)

if textret:
    text = textret
"
-------------------------------------------------------------------------
"```python
text = self.format_plugin_doc(plugin, loader, plugin_type, search_paths) or text
```"
-------------------------------------------------------------------------
"textret = self.format_plugin_doc(plugin, loader, plugin_type, search_paths)

if textret:
    text = textret
"
-------------------------------------------------------------------------
"Recom
PRs: 41167, 41201"
-------------------------------------------------------------------------
=========================================================================
"# Override _remote_is_local as an instance attribute specifically for the synchronize use case
# ensuring we set local tmpdir correctly
self._connection._remote_is_local = True
"
-------------------------------------------------------------------------
"```python
# Override _remote_is_local as an instance attribute specifically for the synchronize use case
# ensuring we set local tmpdir correctly
self._connection._remote_is_local = True
```  "
-------------------------------------------------------------------------
"# Override _remote_is_local as an instance attribute specifically for the synchronize use case
# ensuring we set local tmpdir correctly
self._connection._remote_is_local = True
"
-------------------------------------------------------------------------
"Recom
PRs: 40833, 40918"
-------------------------------------------------------------------------
=========================================================================
"class BreakPoint(Exception):
pass


"
-------------------------------------------------------------------------
"```python
class BreakPoint(Exception):
    pass
```"
-------------------------------------------------------------------------
"class BreakPoint(Exception):
pass


"
-------------------------------------------------------------------------
"Recom
PRs: 40833, 40918"
-------------------------------------------------------------------------
=========================================================================
"
@patch.object(ActionModule, '_low_level_execute_command', side_effect=BreakPoint)
@patch.object(ActionModule, '_remote_expand_user', side_effect=ActionModule._remote_expand_user, autospec=True)
def test_remote_user_not_in_local_tmpdir(self, spy_remote_expand_user, ll_ec):
    x = SynchronizeTester()
    SAM = ActionModule(x.task, x.connection, x._play_context,
                       x.loader, x.templar, x.shared_loader_obj)
    try:
        SAM.run(task_vars={'hostvars': {'foo': {}, 'localhost': {}}, 'inventory_hostname': 'foo'})
    except BreakPoint:
        pass
    self.assertEqual(spy_remote_expand_user.call_count, 0)
"
-------------------------------------------------------------------------
"```python
@patch.object(ActionModule, '_low_level_execute_command', side_effect=BreakPoint)
@patch.object(ActionModule, '_remote_expand_user', side_effect=ActionModule._remote_expand_user, autospec=True)
def test_remote_user_not_in_local_tmpdir(self, spy_remote_expand_user, ll_ec):
    x = SynchronizeTester()
    SAM = ActionModule(x.task, x.connection, x._play_context,
                       x.loader, x.templar, x.shared_loader_obj)
    try:
        SAM.run(task_vars={'hostvars': {'foo': {}, 'localhost': {}}, 'inventory_hostname': 'foo'})
    except BreakPoint:
        pass
    self.assertEqual(spy_remote_expand_user.call_count, 0)
```  "
-------------------------------------------------------------------------
"
@patch.object(ActionModule, '_low_level_execute_command', side_effect=BreakPoint)
@patch.object(ActionModule, '_remote_expand_user', side_effect=ActionModule._remote_expand_user, autospec=True)
def test_remote_user_not_in_local_tmpdir(self, spy_remote_expand_user, ll_ec):
    x = SynchronizeTester()
    SAM = ActionModule(x.task, x.connection, x._play_context,
                       x.loader, x.templar, x.shared_loader_obj)
    try:
        SAM.run(task_vars={'hostvars': {'foo': {}, 'localhost': {}}, 'inventory_hostname': 'foo'})
    except BreakPoint:
        pass
    self.assertEqual(spy_remote_expand_user.call_count, 0)
"
-------------------------------------------------------------------------
"Recom
PRs: 40833, 40918"
-------------------------------------------------------------------------
=========================================================================
"# Override _remote_is_local as an instance attribute specifically for the synchronize use case
# ensuring we set local tmpdir correctly
self._connection._remote_is_local = True
"
-------------------------------------------------------------------------
"```python
# Override _remote_is_local as an instance attribute specifically for the synchronize use case
# ensuring we set local tmpdir correctly
self._connection._remote_is_local = True
```"
-------------------------------------------------------------------------
"# Override _remote_is_local as an instance attribute specifically for the synchronize use case
# ensuring we set local tmpdir correctly
self._connection._remote_is_local = True
"
-------------------------------------------------------------------------
"Recom
PRs: 40833, 40917"
-------------------------------------------------------------------------
=========================================================================
"class BreakPoint(Exception):
pass


"
-------------------------------------------------------------------------
"class BreakPoint(Exception):
    pass"
-------------------------------------------------------------------------
"class BreakPoint(Exception):
pass


"
-------------------------------------------------------------------------
"Recom
PRs: 40833, 40917"
-------------------------------------------------------------------------
=========================================================================
"
@patch.object(ActionModule, '_low_level_execute_command', side_effect=BreakPoint)
@patch.object(ActionModule, '_remote_expand_user', side_effect=ActionModule._remote_expand_user, autospec=True)
def test_remote_user_not_in_local_tmpdir(self, spy_remote_expand_user, ll_ec):
    x = SynchronizeTester()
    SAM = ActionModule(x.task, x.connection, x._play_context,
                       x.loader, x.templar, x.shared_loader_obj)
    try:
        SAM.run(task_vars={'hostvars': {'foo': {}, 'localhost': {}}, 'inventory_hostname': 'foo'})
    except BreakPoint:
        pass
    self.assertEqual(spy_remote_expand_user.call_count, 0)
"
-------------------------------------------------------------------------
"```python
@patch.object(ActionModule, '_low_level_execute_command', side_effect=BreakPoint)
@patch.object(ActionModule, '_remote_expand_user', side_effect=ActionModule._remote_expand_user, autospec=True)
def test_remote_user_not_in_local_tmpdir(self, spy_remote_expand_user, ll_ec):
    x = SynchronizeTester()
    SAM = ActionModule(x.task, x.connection, x._play_context,
                       x.loader, x.templar, x.shared_loader_obj)
    try:
        SAM.run(task_vars={'hostvars': {'foo': {}, 'localhost': {}}, 'inventory_hostname': 'foo'})
    except BreakPoint:
        pass
    self.assertEqual(spy_remote_expand_user.call_count, 0)
```"
-------------------------------------------------------------------------
"
@patch.object(ActionModule, '_low_level_execute_command', side_effect=BreakPoint)
@patch.object(ActionModule, '_remote_expand_user', side_effect=ActionModule._remote_expand_user, autospec=True)
def test_remote_user_not_in_local_tmpdir(self, spy_remote_expand_user, ll_ec):
    x = SynchronizeTester()
    SAM = ActionModule(x.task, x.connection, x._play_context,
                       x.loader, x.templar, x.shared_loader_obj)
    try:
        SAM.run(task_vars={'hostvars': {'foo': {}, 'localhost': {}}, 'inventory_hostname': 'foo'})
    except BreakPoint:
        pass
    self.assertEqual(spy_remote_expand_user.call_count, 0)
"
-------------------------------------------------------------------------
"Recom
PRs: 40833, 40917"
-------------------------------------------------------------------------
=========================================================================
"becomecmd = '%s %s %s -c %s' % (exe, flags, executable, success_cmd)
"
-------------------------------------------------------------------------
"```python
becomecmd = ' '.join([exe, flags, executable, success_cmd])
```"
-------------------------------------------------------------------------
"becomecmd = '%s %s %s -c %s' % (exe, flags, executable, success_cmd)
"
-------------------------------------------------------------------------
"Recom
PRs: 37511, 40896"
-------------------------------------------------------------------------
=========================================================================
"assert (cmd == """"""%s %s %s -c 'echo %s; %s'"""""" % (doas_exe, doas_flags, default_exe, play_context.success_key, default_cmd))
"
-------------------------------------------------------------------------
"assert (cmd == """"""%s %s %s -c 'echo %s; %s'"""""" % (doas_exe, play_context.make_become_cmd, default_exe, play_context.success_key, default_cmd))"
-------------------------------------------------------------------------
"assert (cmd == """"""%s %s %s -c 'echo %s; %s'"""""" % (doas_exe, doas_flags, default_exe, play_context.success_key, default_cmd))
"
-------------------------------------------------------------------------
"Recom
PRs: 37511, 40896"
-------------------------------------------------------------------------
=========================================================================
"updated_nics = [dict(id=id, primary=(i is 0))
                for i, id in enumerate(network_interfaces)]
"
-------------------------------------------------------------------------
"```python
from msrestazure.tools import randrange
from __future__ import absolute_import
from ansible.module_utils.azure_rm_common import AzureRMModuleBase
import re
import base64
import random
from ansible.module_utils.basic import ansible
from msrestazure.azure_exceptions import azure_exceptions

updated_nics = [dict(id=id, primary=(i == 0))
                for i, id in enumerate(network_interfaces)]
```"
-------------------------------------------------------------------------
"updated_nics = [dict(id=id, primary=(i is 0))
                for i, id in enumerate(network_interfaces)]
"
-------------------------------------------------------------------------
"Recom
PRs: 38994, 40781"
-------------------------------------------------------------------------
=========================================================================
"nics = [self.compute_models.NetworkInterfaceReference(id=id, primary=(i is 0))
        for i, id in enumerate(network_interfaces)]
"
-------------------------------------------------------------------------
"```python
nics = [self.compute_models.NetworkInterfaceReference(id=id, primary=(i == 0))
        for i, id in enumerate(network_interfaces)]
```"
-------------------------------------------------------------------------
"nics = [self.compute_models.NetworkInterfaceReference(id=id, primary=(i is 0))
        for i, id in enumerate(network_interfaces)]
"
-------------------------------------------------------------------------
"Recom
PRs: 38994, 40781"
-------------------------------------------------------------------------
=========================================================================
"nics = [self.compute_models.NetworkInterfaceReference(id=interface['id'], primary=(i is 0))
        for i, interface in enumerate(vm_dict['properties']['networkProfile']['networkInterfaces'])]
"
-------------------------------------------------------------------------
"```python
nics = [self.compute_models.NetworkInterfaceReference(id=interface['id'], primary=(i == 0))
        for i, interface in enumerate(vm_dict['properties']['networkProfile']['networkInterfaces'])]
```"
-------------------------------------------------------------------------
"nics = [self.compute_models.NetworkInterfaceReference(id=interface['id'], primary=(i is 0))
        for i, interface in enumerate(vm_dict['properties']['networkProfile']['networkInterfaces'])]
"
-------------------------------------------------------------------------
"Recom
PRs: 38994, 40781"
-------------------------------------------------------------------------
=========================================================================
"delete_commands = [line for line in commands if line.startswith('delete')]
"
-------------------------------------------------------------------------
delete_commands = [line for line in commands if line.startswith('delete') and item in visited]
-------------------------------------------------------------------------
"delete_commands = [line for line in commands if line.startswith('delete')]
"
-------------------------------------------------------------------------
"Recom
PRs: 40666, 40672"
-------------------------------------------------------------------------
=========================================================================
"elif item.startswith('set'):

    if item not in config:
        updates.append(line)

    # If there is a corresponding delete command in the desired config, make sure to append
    # the set command even though it already exists in the running config
    else:
        ditem = re.sub('set', 'delete', item)
        for line in delete_commands:
            if ditem.startswith(line):
                updates.append(item)
"
-------------------------------------------------------------------------
"def diff_config(commands, config):
    if not item.startswith('set') and not item.startswith('delete'):
        raise ValueError('line must start with either `set` or `delete`')

    elif item.startswith('delete'):
        if not config:
            raise ValueError('Config is empty')
        updates = []
        for item in commands:
            if item.startswith('set'):
                if item not in config:
                    updates.append(line)
                else:
                    ditem = re.sub('set', 'delete', item)
                    for line in delete_commands:
                        if ditem.startswith(line):
                            updates.append(item)"
-------------------------------------------------------------------------
"elif item.startswith('set'):

    if item not in config:
        updates.append(line)

    # If there is a corresponding delete command in the desired config, make sure to append
    # the set command even though it already exists in the running config
    else:
        ditem = re.sub('set', 'delete', item)
        for line in delete_commands:
            if ditem.startswith(line):
                updates.append(item)
"
-------------------------------------------------------------------------
"Recom
PRs: 40666, 40672"
-------------------------------------------------------------------------
=========================================================================
"commands.append('no vlan {0}'.format(vlan_id))
commands.append('vlan {0}'.format(vlan_id))
    commands.append('name {0}'.format(name))
        commands.append('interface {0}'.format(i))
        commands.append('switchport access vlan {0}'.format(vlan_id))
        commands.append('vlan {0}'.format(vlan_id))
        commands.append('name {0}'.format(name))
            commands.append('vlan {0}'.format(vlan_id))
            commands.append('interface {0}'.format(i))
            commands.append('switchport access vlan {0}'.format(vlan_id))
            commands.append('vlan {0}'.format(vlan_id))
            commands.append('interface {0}'.format(i))
            commands.append('switchport access vlan {0}'.format(vlan_id))
            commands.append('vlan {0}'.format(vlan_id))
            commands.append('interface {0}'.format(i))
            commands.append('no switchport access vlan {0}'.format(vlan_id))
ands.append('vlan {0}'.format(vlan_id))
commands.append('name {0}'.format(name))
ands.append('state {0}'.format(state))
commands.append('no vlan {0}'.format(h['vlan_id']))
"
-------------------------------------------------------------------------
"```python
commands.append('no vlan {0}'.format(vlan_id))
commands.append('vlan {0}'.format(vlan_id))
if name:
    commands.append('name {0}'.format(name))
if interfaces:
    for i in interfaces:
        commands.append('interface {0}'.format(i))
        commands.append('switchport access vlan {0}'.format(vlan_id))
if name:
    commands.append('vlan {0}'.format(vlan_id))
    commands.append('name {0}'.format(name))
if interfaces:
    for i in interfaces:
        commands.append('vlan {0}'.format(vlan_id))
        commands.append('interface {0}'.format(i))
        commands.append('switchport access vlan {0}'.format(vlan_id))
if name:
    commands.append('vlan {0}'.format(vlan_id))
    commands.append('interface {0}'.format(i))
    commands.append('switchport access vlan {0}'.format(vlan_id))
    commands.append('vlan {0}'.format(vlan_id))
    if interfaces:
        commands.append('interface {0}'.format(i))
        commands.append('switchport access vlan {0}'.format(vlan_id))
        commands.append('vlan {0}'.format(vlan_id))
        for i in interfaces:
            commands.append('interface {0}'.format(i))
            commands.append('no switchport access vlan {0}'.format(vlan_id))
    commands.append('vlan {0}'.format(vlan_id))
    commands.append('name {0}'.format(name))
if state:
    commands.append('state {0}'.format(state))
for h in have:
    commands.append('no vlan {0}'.format(h['vlan_id']))
```"
-------------------------------------------------------------------------
"commands.append('no vlan {0}'.format(vlan_id))
commands.append('vlan {0}'.format(vlan_id))
    commands.append('name {0}'.format(name))
        commands.append('interface {0}'.format(i))
        commands.append('switchport access vlan {0}'.format(vlan_id))
        commands.append('vlan {0}'.format(vlan_id))
        commands.append('name {0}'.format(name))
            commands.append('vlan {0}'.format(vlan_id))
            commands.append('interface {0}'.format(i))
            commands.append('switchport access vlan {0}'.format(vlan_id))
            commands.append('vlan {0}'.format(vlan_id))
            commands.append('interface {0}'.format(i))
            commands.append('switchport access vlan {0}'.format(vlan_id))
            commands.append('vlan {0}'.format(vlan_id))
            commands.append('interface {0}'.format(i))
            commands.append('no switchport access vlan {0}'.format(vlan_id))
ands.append('vlan {0}'.format(vlan_id))
commands.append('name {0}'.format(name))
ands.append('state {0}'.format(state))
commands.append('no vlan {0}'.format(h['vlan_id']))
"
-------------------------------------------------------------------------
"Recom
PRs: 40145, 40656"
-------------------------------------------------------------------------
=========================================================================
"def parse_to_logical_rows(out):
started_yielding = False
cur_row = []
for l in out.splitlines()[2:]:
    if not l:
        """"""Skip empty lines.""""""
        continue
    if '0' < l[0] < '9':
        """"""Line starting with a number.""""""
        if started_yielding:
            yield cur_row
            cur_row = []  # Reset it to hold a next chunk
        started_yielding = True
    cur_row.append(l)

# Return the rest of it:
yield cur_row


map_ports_str_to_list(ports_str):
return list(filter(bool, (p.strip().replace('Gi', 'GigabitEthernet') for p in ports_str.split(', '))))


parse_to_obj(logical_rows):
first_row = logical_rows[0]
rest_rows = logical_rows[1:]
obj = re.match(r'(?P<vlan_id>\d)\s(?P<name>[^\s])\s(?P<state>[^\s])\s*(?P<interfaces>.*)', first_row).groupdict()
if obj['state'] == 'suspended':
    obj['state'] = 'suspend'
obj['interfaces'] = map_ports_str_to_list(obj['interfaces'])
obj['interfaces'].extend(prts_r for prts in rest_rows for prts_r in map_ports_str_to_list(prts))
return obj


parse_vlan_brief(vlan_out):
return [parse_to_obj(r) for r in parse_to_logical_rows(vlan_out)]


return parse_vlan_brief(run_commands(module, ['show vlan brief'])[0])
"
-------------------------------------------------------------------------
"```python
import re

def parse_to_logical_rows(out):
    started_yielding = False
    cur_row = []
    for l in out.splitlines()[2:]:
        if not l:
            continue
        if '0' < l[0] < '9':
            if started_yielding:
                yield cur_row
                cur_row = []
            started_yielding = True
        cur_row.append(l)

    yield cur_row

def map_ports_str_to_list(ports_str):
    return list(filter(bool, (p.strip().replace('Gi', 'GigabitEthernet') for p in ports_str.split(', ')))

def parse_to_obj(logical_rows):
    first_row = logical_rows[0]
    rest_rows = logical_rows[1:]
    obj = re.match(r'(?P<vlan_id>\d)\s(?P<name>[^\s])\s(?P<state>[^\s])\s*(?P<interfaces>.*)', first_row).groupdict()
    if obj['state'] == 'suspended':
        obj['state'] = 'suspend'
    obj['interfaces'] = map_ports_str_to_list(obj['interfaces'])
    obj['interfaces'].extend(prts_r for prts in rest_rows for prts_r in map_ports_str_to_list(prts))
    return obj

def parse_vlan_brief(vlan_out):
    return [parse_to_obj(r) for r in parse_to_logical_rows(vlan_out)]

# Example usage:
# return parse_vlan_brief(run_commands(module, ['show vlan brief'])[0])
```"
-------------------------------------------------------------------------
"def parse_to_logical_rows(out):
started_yielding = False
cur_row = []
for l in out.splitlines()[2:]:
    if not l:
        """"""Skip empty lines.""""""
        continue
    if '0' < l[0] < '9':
        """"""Line starting with a number.""""""
        if started_yielding:
            yield cur_row
            cur_row = []  # Reset it to hold a next chunk
        started_yielding = True
    cur_row.append(l)

# Return the rest of it:
yield cur_row


map_ports_str_to_list(ports_str):
return list(filter(bool, (p.strip().replace('Gi', 'GigabitEthernet') for p in ports_str.split(', '))))


parse_to_obj(logical_rows):
first_row = logical_rows[0]
rest_rows = logical_rows[1:]
obj = re.match(r'(?P<vlan_id>\d)\s(?P<name>[^\s])\s(?P<state>[^\s])\s*(?P<interfaces>.*)', first_row).groupdict()
if obj['state'] == 'suspended':
    obj['state'] = 'suspend'
obj['interfaces'] = map_ports_str_to_list(obj['interfaces'])
obj['interfaces'].extend(prts_r for prts in rest_rows for prts_r in map_ports_str_to_list(prts))
return obj


parse_vlan_brief(vlan_out):
return [parse_to_obj(r) for r in parse_to_logical_rows(vlan_out)]


return parse_vlan_brief(run_commands(module, ['show vlan brief'])[0])
"
-------------------------------------------------------------------------
"Recom
PRs: 40145, 40656"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.basic import AnsibleModule, to_bytes
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.basic import AnsibleModule, to_bytes
```"
-------------------------------------------------------------------------
"from ansible.module_utils.basic import AnsibleModule, to_bytes
"
-------------------------------------------------------------------------
"Recom
PRs: 40591, 40645"
-------------------------------------------------------------------------
=========================================================================
"if sha1sum_old != to_bytes(plugin_data['sha1']):
"
-------------------------------------------------------------------------
if sha1sum_old != plugin_data['sha1'].encode():
-------------------------------------------------------------------------
"if sha1sum_old != to_bytes(plugin_data['sha1']):
"
-------------------------------------------------------------------------
"Recom
PRs: 40591, 40645"
-------------------------------------------------------------------------
=========================================================================
"def get_repo_path(dest, bare):
if bare:
    repo_path = dest
else:
    repo_path = os.path.join(dest, '.git')
# Check if the .git is a file. If it is a file, it means that the repository is in external directory respective to the working copy (e.g. we are in a
# submodule structure).
if os.path.isfile(repo_path):
    with open(repo_path, 'r') as gitfile:
        data = gitfile.read()
    ref_prefix, gitdir = data.rstrip().split('gitdir: ', 1)
    if ref_prefix:
        raise ValueError('.git file has invalid git dir reference format')

    # There is a possibility the .git file to have an absolute path.
    if os.path.isabs(gitdir):
        repo_path = gitdir
    else:
        repo_path = os.path.join(repo_path.split('.git')[0], gitdir)
    if not os.path.isdir(repo_path):
        raise ValueError('%s is not a directory' % repo_path)
return repo_path


"
-------------------------------------------------------------------------
"def get_repo_path(dest, bare):
    repo_path = dest if bare else os.path.join(dest, '.git')

    if os.path.isfile(repo_path):
        with open(repo_path, 'r') as gitfile:
            data = gitfile.read()
        ref_prefix, gitdir = data.rstrip().split('gitdir: ', 1)

        if ref_prefix:
            raise ValueError('.git file has an invalid git dir reference format')

        if os.path.isabs(gitdir):
            repo_path = gitdir
        else:
            repo_path = os.path.join(repo_path.split('.git')[0], gitdir)

        if not os.path.isdir(repo_path):
            raise ValueError(f'{repo_path} is not a directory')

    return repo_path"
-------------------------------------------------------------------------
"def get_repo_path(dest, bare):
if bare:
    repo_path = dest
else:
    repo_path = os.path.join(dest, '.git')
# Check if the .git is a file. If it is a file, it means that the repository is in external directory respective to the working copy (e.g. we are in a
# submodule structure).
if os.path.isfile(repo_path):
    with open(repo_path, 'r') as gitfile:
        data = gitfile.read()
    ref_prefix, gitdir = data.rstrip().split('gitdir: ', 1)
    if ref_prefix:
        raise ValueError('.git file has invalid git dir reference format')

    # There is a possibility the .git file to have an absolute path.
    if os.path.isabs(gitdir):
        repo_path = gitdir
    else:
        repo_path = os.path.join(repo_path.split('.git')[0], gitdir)
    if not os.path.isdir(repo_path):
        raise ValueError('%s is not a directory' % repo_path)
return repo_path


"
-------------------------------------------------------------------------
"Recom
PRs: 38016, 40618"
-------------------------------------------------------------------------
=========================================================================
"try:
    repo_path = get_repo_path(dest, bare)
except (IOError, ValueError) as err:
    # No repo path found
    """"""``.git`` file does not have a valid format for detached Git dir.""""""
    module.fail_json(
        msg='Current repo does not have a valid reference to a '
        'separate Git dir or it refers to the invalid path',
        details=str(err),
    )
"
-------------------------------------------------------------------------
"```python
try:
    repo_path = get_repo_path(dest, bare)
except (IOError, ValueError) as err:
    # No repo path found
    module.fail_json(
        msg='Current repo does not have a valid reference to a '
        'separate Git dir or it refers to the invalid path',
        details=str(err),
    )
```"
-------------------------------------------------------------------------
"try:
    repo_path = get_repo_path(dest, bare)
except (IOError, ValueError) as err:
    # No repo path found
    """"""``.git`` file does not have a valid format for detached Git dir.""""""
    module.fail_json(
        msg='Current repo does not have a valid reference to a '
        'separate Git dir or it refers to the invalid path',
        details=str(err),
    )
"
-------------------------------------------------------------------------
"Recom
PRs: 38016, 40618"
-------------------------------------------------------------------------
=========================================================================
"try:
    repo_path = get_repo_path(dest, bare)
except (IOError, ValueError) as err:
    # No repo path found
    """"""``.git`` file does not have a valid format for detached Git dir.""""""
    module.fail_json(
        msg='Current repo does not have a valid reference to a '
        'separate Git dir or it refers to the invalid path',
        details=str(err),
    )
gitconfig = os.path.join(repo_path, 'config')
"
-------------------------------------------------------------------------
"```python
try:
    repo_path = get_repo_path(dest, bare)
except (IOError, ValueError) as err:
    # No repo path found
    gitconfig = os.path.join(repo_path, 'config')
    module.fail_json(
        msg='Current repo does not have a valid reference to a '
        'separate Git dir or it refers to the invalid path',
        details=str(err),
    )
```"
-------------------------------------------------------------------------
"try:
    repo_path = get_repo_path(dest, bare)
except (IOError, ValueError) as err:
    # No repo path found
    """"""``.git`` file does not have a valid format for detached Git dir.""""""
    module.fail_json(
        msg='Current repo does not have a valid reference to a '
        'separate Git dir or it refers to the invalid path',
        details=str(err),
    )
gitconfig = os.path.join(repo_path, 'config')
"
-------------------------------------------------------------------------
"Recom
PRs: 38016, 40618"
-------------------------------------------------------------------------
=========================================================================
"def get_repo_path(dest, bare):
if bare:
    repo_path = dest
else:
    repo_path = os.path.join(dest, '.git')
# Check if the .git is a file. If it is a file, it means that the repository is in external directory respective to the working copy (e.g. we are in a
# submodule structure).
if os.path.isfile(repo_path):
    with open(repo_path, 'r') as gitfile:
        data = gitfile.read()
    ref_prefix, gitdir = data.rstrip().split('gitdir: ', 1)
    if ref_prefix:
        raise ValueError('.git file has invalid git dir reference format')

    # There is a possibility the .git file to have an absolute path.
    if os.path.isabs(gitdir):
        repo_path = gitdir
    else:
        repo_path = os.path.join(repo_path.split('.git')[0], gitdir)
    if not os.path.isdir(repo_path):
        raise ValueError('%s is not a directory' % repo_path)
return repo_path


"
-------------------------------------------------------------------------
"```python
def get_repo_path(dest, bare):
    if bare:
        repo_path = dest
    else:
        repo_path = os.path.join(dest, '.git')
    # Check if the .git is a file. If it is a file, it means that the repository is in external directory respective to the working copy (e.g. we are in a
    # submodule structure).
    if os.path.isfile(repo_path):
        with open(repo_path, 'r') as gitfile:
            data = gitfile.read()
        ref_prefix, gitdir = data.rstrip().split('gitdir: ', 1)
        if ref_prefix:
            raise ValueError('.git file has invalid git dir reference format')
        # There is a possibility the .git file to have an absolute path.
        if os.path.isabs(gitdir):
            repo_path = gitdir
        else:
            repo_path = os.path.join(repo_path.split('.git')[0], gitdir)
        if not os.path.isdir(repo_path):
            raise ValueError('%s is not a directory' % repo_path)
    return repo_path
```"
-------------------------------------------------------------------------
"def get_repo_path(dest, bare):
if bare:
    repo_path = dest
else:
    repo_path = os.path.join(dest, '.git')
# Check if the .git is a file. If it is a file, it means that the repository is in external directory respective to the working copy (e.g. we are in a
# submodule structure).
if os.path.isfile(repo_path):
    with open(repo_path, 'r') as gitfile:
        data = gitfile.read()
    ref_prefix, gitdir = data.rstrip().split('gitdir: ', 1)
    if ref_prefix:
        raise ValueError('.git file has invalid git dir reference format')

    # There is a possibility the .git file to have an absolute path.
    if os.path.isabs(gitdir):
        repo_path = gitdir
    else:
        repo_path = os.path.join(repo_path.split('.git')[0], gitdir)
    if not os.path.isdir(repo_path):
        raise ValueError('%s is not a directory' % repo_path)
return repo_path


"
-------------------------------------------------------------------------
"Recom
PRs: 38016, 40617"
-------------------------------------------------------------------------
=========================================================================
"try:
    repo_path = get_repo_path(dest, bare)
except (IOError, ValueError) as err:
    # No repo path found
    """"""``.git`` file does not have a valid format for detached Git dir.""""""
    module.fail_json(
        msg='Current repo does not have a valid reference to a '
        'separate Git dir or it refers to the invalid path',
        details=str(err),
    )
"
-------------------------------------------------------------------------
"```python
try:
    repo_path = get_repo_path(dest, bare)
except (IOError, ValueError) as err:
    # No repo path found
    module.fail_json(
        msg='Current repo does not have a valid reference to a '
        'separate Git dir or it refers to the invalid path',
        details=str(err),
    )
```"
-------------------------------------------------------------------------
"try:
    repo_path = get_repo_path(dest, bare)
except (IOError, ValueError) as err:
    # No repo path found
    """"""``.git`` file does not have a valid format for detached Git dir.""""""
    module.fail_json(
        msg='Current repo does not have a valid reference to a '
        'separate Git dir or it refers to the invalid path',
        details=str(err),
    )
"
-------------------------------------------------------------------------
"Recom
PRs: 38016, 40617"
-------------------------------------------------------------------------
=========================================================================
"try:
    repo_path = get_repo_path(dest, bare)
except (IOError, ValueError) as err:
    # No repo path found
    """"""``.git`` file does not have a valid format for detached Git dir.""""""
    module.fail_json(
        msg='Current repo does not have a valid reference to a '
        'separate Git dir or it refers to the invalid path',
        details=str(err),
    )
gitconfig = os.path.join(repo_path, 'config')
"
-------------------------------------------------------------------------
"```python
try:
    repo_path = get_repo_path(dest, bare)
except (IOError, ValueError) as err:
    gitconfig = os.path.join(repo_path, 'config')
    module.fail_json(
        msg='Current repo does not have a valid reference to a '
        'separate Git dir or it refers to the invalid path',
        details=str(err),
    )
```"
-------------------------------------------------------------------------
"try:
    repo_path = get_repo_path(dest, bare)
except (IOError, ValueError) as err:
    # No repo path found
    """"""``.git`` file does not have a valid format for detached Git dir.""""""
    module.fail_json(
        msg='Current repo does not have a valid reference to a '
        'separate Git dir or it refers to the invalid path',
        details=str(err),
    )
gitconfig = os.path.join(repo_path, 'config')
"
-------------------------------------------------------------------------
"Recom
PRs: 38016, 40617"
-------------------------------------------------------------------------
=========================================================================
"- ""This is a network module and requires C(connection: network_cli)
  in order to work properly.""
- For more information please see the L(Network Guide,../network/getting_started/index.html).
"
-------------------------------------------------------------------------
This is a network module and requires `connection: network_cli` in order to work properly.
-------------------------------------------------------------------------
"- ""This is a network module and requires C(connection: network_cli)
  in order to work properly.""
- For more information please see the L(Network Guide,../network/getting_started/index.html).
"
-------------------------------------------------------------------------
"Recom
PRs: 39530, 40548"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_text
from ansible.module_utils.network.common.utils import ComplexList
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils._text import to_text
from ansible.module_utils.network.common.utils import ComplexList
import time

from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.common.parsing import Conditional
from ansible.module_utils.network.edgeos.edgeos import run_commands
from ansible.module_utils.six import string_types
import os
import re
from ansible.plugins.terminal import TerminalBase
from ansible.errors import AnsibleConnectionFailure
```"
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_text
from ansible.module_utils.network.common.utils import ComplexList
"
-------------------------------------------------------------------------
"Recom
PRs: 39530, 40548"
-------------------------------------------------------------------------
=========================================================================
"item = to_text(item).split('\n')
"
-------------------------------------------------------------------------
item = to_text(item).split('\n')
-------------------------------------------------------------------------
"item = to_text(item).split('\n')
"
-------------------------------------------------------------------------
"Recom
PRs: 39530, 40548"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=to_text(e))
"
-------------------------------------------------------------------------
"```python
module.fail_json(msg=str(e))
```"
-------------------------------------------------------------------------
"module.fail_json(msg=to_text(e))
"
-------------------------------------------------------------------------
"Recom
PRs: 39530, 40548"
-------------------------------------------------------------------------
=========================================================================
"- ""This is a network module and requires the C(connection: network_cli) in order
  to work properly.""
- For more information please see the L(Network Guide,../network/getting_started/index.html).
"
-------------------------------------------------------------------------
"This is a network module and requires the C(connection: network_cli) in order to work properly. - For more information please see the L(Network Guide,../network/getting_started/index.html)."
-------------------------------------------------------------------------
"- ""This is a network module and requires the C(connection: network_cli) in order
  to work properly.""
- For more information please see the L(Network Guide,../network/getting_started/index.html).
"
-------------------------------------------------------------------------
"Recom
PRs: 39530, 40548"
-------------------------------------------------------------------------
=========================================================================
"- The C(backup) argument will backup the current device's active
  in the playbook root directory or role root directory if the
  playbook is part of an ansible role. If the directory does not
  exist, it is created.
"
-------------------------------------------------------------------------
"```yaml
options:
  choices: ['line', 'none']
  backup:
    description: ""The C(backup) argument will backup the current device's active configuration in the playbook root directory or role root directory if the playbook is part of an ansible role. If the directory does not exist, it is created.""
    type: bool
    default: 'no'
comment:
```"
-------------------------------------------------------------------------
"- The C(backup) argument will backup the current device's active
  in the playbook root directory or role root directory if the
  playbook is part of an ansible role. If the directory does not
  exist, it is created.
pe: bool
fault: 'no'
"
-------------------------------------------------------------------------
"Recom
PRs: 39530, 40548"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_native

"
-------------------------------------------------------------------------
from ansible.module_utils._text import to_native
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native

"
-------------------------------------------------------------------------
"Recom
PRs: 39530, 40548"
-------------------------------------------------------------------------
=========================================================================
"commands = to_native(candidate).split('\n')
"
-------------------------------------------------------------------------
commands = to_native(candidate).split('\n')
-------------------------------------------------------------------------
"commands = to_native(candidate).split('\n')
"
-------------------------------------------------------------------------
"Recom
PRs: 39530, 40548"
-------------------------------------------------------------------------
=========================================================================
"config = [to_native(c).replace(""'"", '') for c in config.splitlines()]
    item = to_native(line).replace(""'"", '')
"
-------------------------------------------------------------------------
"```python
def diff_config(commands, config):
    updates = list()
    visited = set()
    
    for line in commands:
        if not item.startswith('set') and not item.startswith('delete'):
            raise ValueError('line must start with either `set` or `delete`')
```"
-------------------------------------------------------------------------
"config = [to_native(c).replace(""'"", '') for c in config.splitlines()]
    item = to_native(line).replace(""'"", '')
"
-------------------------------------------------------------------------
"Recom
PRs: 39530, 40548"
-------------------------------------------------------------------------
=========================================================================
"if self._play_context.connection != 'network_cli':
    return {'failed': True, 'msg': 'Connection type %s is not valid for this module. Must use network_cli.' % self._play_context.connection}
"
-------------------------------------------------------------------------
"```python
if self._play_context.connection != 'network_cli':
    return {'failed': True, 'msg': 'Connection type %s is not valid for this module. Must use network_cli.' % self._play_context.connection}
```"
-------------------------------------------------------------------------
"if self._play_context.connection != 'network_cli':
    return {'failed': True, 'msg': 'Connection type %s is not valid for this module. Must use network_cli.' % self._play_context.connection}
"
-------------------------------------------------------------------------
"Recom
PRs: 39530, 40548"
-------------------------------------------------------------------------
=========================================================================
"rsync_opts=dict(type='list', default=[]),
"
-------------------------------------------------------------------------
"```python
rsync_opts=dict(type='list', default=[]),
```"
-------------------------------------------------------------------------
"rsync_opts=dict(type='list', default=[]),
"
-------------------------------------------------------------------------
"Recom
PRs: 40500, 40545"
-------------------------------------------------------------------------
=========================================================================
"expand_path = '~%s' % (self._play_context.remote_user or self._connection.default_user or '')
"
-------------------------------------------------------------------------
expand_path = '~%s' % (self._play_context.remote_user or self._connection.default_user or '')
-------------------------------------------------------------------------
"expand_path = '~%s' % (self._play_context.remote_user or self._connection.default_user or '')
"
-------------------------------------------------------------------------
"Recom
PRs: 40500, 40545"
-------------------------------------------------------------------------
=========================================================================
"
if re.search(r'\S(\s)?,(\s)?', host):
    module.fail_json(msg=""Comma separated list of names is not supported. ""
                         ""Please pass a single name to lookup in the known_hosts file."")

"
-------------------------------------------------------------------------
"```python
if re.search(r'\S(\s)?,(\s)?', host):
    module.fail_json(msg=""Comma separated list of names is not supported. ""
                         ""Please pass a single name to lookup in the known_hosts file."")
```"
-------------------------------------------------------------------------
"
if re.search(r'\S(\s)?,(\s)?', host):
    module.fail_json(msg=""Comma separated list of names is not supported. ""
                         ""Please pass a single name to lookup in the known_hosts file."")

"
-------------------------------------------------------------------------
"Recom
PRs: 38307, 40502"
-------------------------------------------------------------------------
=========================================================================
"rc, stdout, stderr = module.run_command(sshkeygen_command)
"
-------------------------------------------------------------------------
"```python
rc, stdout, stderr = module.run_command(sshkeygen_command)
```"
-------------------------------------------------------------------------
"rc, stdout, stderr = module.run_command(sshkeygen_command)
"
-------------------------------------------------------------------------
"Recom
PRs: 38307, 40502"
-------------------------------------------------------------------------
=========================================================================
"suboptions:
    flags:
        description:
            - List of flags you want to examine.
    flags_set:
        description:
            - Flags to be set.
"
-------------------------------------------------------------------------
"```yaml
suboptions:
    flags:
        description:
            - List of flags you want to examine.
    flags_set:
        description:
            - Flags to be set.
```"
-------------------------------------------------------------------------
"suboptions:
    flags:
        description:
            - List of flags you want to examine.
    flags_set:
        description:
            - Flags to be set.
"
-------------------------------------------------------------------------
"Recom
PRs: 36658, 40501"
-------------------------------------------------------------------------
=========================================================================
"
# Set tcp flags
- iptables:
chain: OUTPUT
jump: DROP
protocol: tcp
tcp_flags:
  flags: ALL
  flags_set:
    - ACK
    - RST
    - SYN
    - FIN
"
-------------------------------------------------------------------------
"```python
EXAMPLES = '''
     protocol: tcp
     reject_with: tcp-reset
     ip_version: ipv4
 '''

import re
from ansible.module_utils import basic

basic.set_tcp_flags(iptables, chain=""OUTPUT"", jump=""DROP"", tcp_flags={""flags"": ""ALL"", ""flags_set"": [""ACK"", ""RST"", ""SYN"", ""FIN""]})
```"
-------------------------------------------------------------------------
"
# Set tcp flags
- iptables:
chain: OUTPUT
jump: DROP
protocol: tcp
tcp_flags:
  flags: ALL
  flags_set:
    - ACK
    - RST
    - SYN
    - FIN
"
-------------------------------------------------------------------------
"Recom
PRs: 36658, 40501"
-------------------------------------------------------------------------
=========================================================================
"tcp_flags=dict(type='dict',
               options=dict(
                    flags=dict(type='list'),
                    flags_set=dict(type='list'))
               ),
"
-------------------------------------------------------------------------
"tcp_flags=dict(
                 type='dict',
                 options=dict(
                     flags=dict(
                         type='list'
                     ),
                     flags_set=dict(
                         type='list'
                     )
                 )
             )"
-------------------------------------------------------------------------
"tcp_flags=dict(type='dict',
               options=dict(
                    flags=dict(type='list'),
                    flags_set=dict(type='list'))
               ),
"
-------------------------------------------------------------------------
"Recom
PRs: 36658, 40501"
-------------------------------------------------------------------------
=========================================================================
"
"
-------------------------------------------------------------------------
"```python
import ansible.module_utils
import ansible.compat.tests
import ansible.compat.tests.mock
import ansible.modules.system
import units.modules.utils

def main():
    module.exit_json(**args)

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"
"
-------------------------------------------------------------------------
"Recom
PRs: 36658, 40501"
-------------------------------------------------------------------------
=========================================================================
"
def test_tcp_flags(self):
    """""" Test various ways of inputting tcp_flags """"""
    args = [
        {
            'chain': 'OUTPUT',
            'protocol': 'tcp',
            'jump': 'DROP',
            'tcp_flags': 'flags=ALL flags_set=""ACK,RST,SYN,FIN""'
        },
        {
            'chain': 'OUTPUT',
            'protocol': 'tcp',
            'jump': 'DROP',
            'tcp_flags': {
                'flags': 'ALL',
                'flags_set': 'ACK,RST,SYN,FIN'
            }
        },
        {
            'chain': 'OUTPUT',
            'protocol': 'tcp',
            'jump': 'DROP',
            'tcp_flags': {
                'flags': ['ALL'],
                'flags_set': ['ACK', 'RST', 'SYN', 'FIN']
            }
        },

    ]

    for item in args:
        set_module_args(item)

        commands_results = [
            (0, '', ''),
        ]

        with patch.object(basic.AnsibleModule, 'run_command') as run_command:
            run_command.side_effect = commands_results
            with self.assertRaises(AnsibleExitJson) as result:
                iptables.main()
                self.assertTrue(result.exception.args[0]['changed'])

        self.assertEqual(run_command.call_count, 1)
        self.assertEqual(run_command.call_args_list[0][0][0], [
            '/sbin/iptables',
            '-t',
            'filter',
            '-C',
            'OUTPUT',
            '-p',
            'tcp',
            '--tcp-flags',
            'ALL',
            'ACK,RST,SYN,FIN',
            '-j',
            'DROP'
        ])
"
-------------------------------------------------------------------------
"```python
def test_tcp_flags(self):
    """""" Test various ways of inputting tcp_flags """"""
    args = [
        {
            'chain': 'OUTPUT',
            'protocol': 'tcp',
            'jump': 'DROP',
            'tcp_flags': 'flags=ALL flags_set=""ACK,RST,SYN,FIN""'
        },
        {
            'chain': 'OUTPUT',
            'protocol': 'tcp',
            'jump': 'DROP',
            'tcp_flags': {
                'flags': 'ALL',
                'flags_set': 'ACK,RST,SYN,FIN'
            }
        },
        {
            'chain': 'OUTPUT',
            'protocol': 'tcp',
            'jump': 'DROP',
            'tcp_flags': {
                'flags': ['ALL'],
                'flags_set': ['ACK', 'RST', 'SYN', 'FIN']
            }
        },

    ]

    for item in args:
        set_module_args(item)

        commands_results = [
            (0, '', ''),
        ]

        with patch.object(ansible.module_utils.basic.AnsibleModule, 'run_command') as run_command:
            run_command.side_effect = commands_results
            with self.assertRaises(ansible.module_utils.basic.AnsibleExitJson) as result:
                iptables.main()
                self.assertTrue(result.exception.args[0]['changed'])

        self.assertEqual(run_command.call_count, 1)
        self.assertEqual(run_command.call_args_list[0][0][0], [
            '/sbin/iptables',
            '-t',
            'filter',
            '-C',
            'OUTPUT',
            '-p',
            'tcp',
            '--tcp-flags',
            'ALL',
            'ACK,RST,SYN,FIN',
            '-j',
            'DROP'
        ])
```"
-------------------------------------------------------------------------
"
def test_tcp_flags(self):
    """""" Test various ways of inputting tcp_flags """"""
    args = [
        {
            'chain': 'OUTPUT',
            'protocol': 'tcp',
            'jump': 'DROP',
            'tcp_flags': 'flags=ALL flags_set=""ACK,RST,SYN,FIN""'
        },
        {
            'chain': 'OUTPUT',
            'protocol': 'tcp',
            'jump': 'DROP',
            'tcp_flags': {
                'flags': 'ALL',
                'flags_set': 'ACK,RST,SYN,FIN'
            }
        },
        {
            'chain': 'OUTPUT',
            'protocol': 'tcp',
            'jump': 'DROP',
            'tcp_flags': {
                'flags': ['ALL'],
                'flags_set': ['ACK', 'RST', 'SYN', 'FIN']
            }
        },

    ]

    for item in args:
        set_module_args(item)

        commands_results = [
            (0, '', ''),
        ]

        with patch.object(basic.AnsibleModule, 'run_command') as run_command:
            run_command.side_effect = commands_results
            with self.assertRaises(AnsibleExitJson) as result:
                iptables.main()
                self.assertTrue(result.exception.args[0]['changed'])

        self.assertEqual(run_command.call_count, 1)
        self.assertEqual(run_command.call_args_list[0][0][0], [
            '/sbin/iptables',
            '-t',
            'filter',
            '-C',
            'OUTPUT',
            '-p',
            'tcp',
            '--tcp-flags',
            'ALL',
            'ACK,RST,SYN,FIN',
            '-j',
            'DROP'
        ])
"
-------------------------------------------------------------------------
"Recom
PRs: 36658, 40501"
-------------------------------------------------------------------------
=========================================================================
"import sys
from ansible.module_utils._text import to_text, to_native
from ansible.module_utils.parsing.convert_bool import boolean
"
-------------------------------------------------------------------------
"```python
import sys
from ansible.module_utils._text import to_text, to_native
from ansible.module_utils.parsing.convert_bool import boolean
from ansible.module_utils.six import PY3
```"
-------------------------------------------------------------------------
"import sys
from ansible.module_utils._text import to_text, to_native
from ansible.module_utils.parsing.convert_bool import boolean
"
-------------------------------------------------------------------------
"Recom
PRs: 40134, 40480"
-------------------------------------------------------------------------
=========================================================================
"try:
import curses
curses.setupterm()
HAS_CURSES = True
pt (ImportError, curses.error):
HAS_CURSES = False

AS_CURSES:
MOVE_TO_BOL = curses.tigetstr('cr')
CLEAR_TO_EOL = curses.tigetstr('el')
:
MOVE_TO_BOL = b'\r'
CLEAR_TO_EOL = b'\x1b[K'

"
-------------------------------------------------------------------------
"```python
try:
    import curses
    curses.setupterm()
    HAS_CURSES = True
except (ImportError, curses.error):
    HAS_CURSES = False

if HAS_CURSES:
    MOVE_TO_BOL = curses.tigetstr('cr')
    CLEAR_TO_EOL = curses.tigetstr('el')
else:
    MOVE_TO_BOL = b'\r'
    CLEAR_TO_EOL = b'\x1b[K'
```"
-------------------------------------------------------------------------
"try:
import curses
curses.setupterm()
HAS_CURSES = True
pt (ImportError, curses.error):
HAS_CURSES = False

AS_CURSES:
MOVE_TO_BOL = curses.tigetstr('cr')
CLEAR_TO_EOL = curses.tigetstr('el')
:
MOVE_TO_BOL = b'\r'
CLEAR_TO_EOL = b'\x1b[K'

"
-------------------------------------------------------------------------
"Recom
PRs: 40134, 40480"
-------------------------------------------------------------------------
=========================================================================
"def clear_line(stdout):
stdout.write(b'\x1b[%s' % MOVE_TO_BOL)
stdout.write(b'\x1b[%s' % CLEAR_TO_EOL)


"
-------------------------------------------------------------------------
"```python
def clear_line(stdout):
    stdout.write(b'\x1b[%s' % MOVE_TO_BOL)
    stdout.write(b'\x1b[%s' % CLEAR_TO_EOL)
    stdout.flush()
```"
-------------------------------------------------------------------------
"def clear_line(stdout):
stdout.write(b'\x1b[%s' % MOVE_TO_BOL)
stdout.write(b'\x1b[%s' % CLEAR_TO_EOL)


"
-------------------------------------------------------------------------
"Recom
PRs: 40134, 40480"
-------------------------------------------------------------------------
=========================================================================
"try:
    echo = boolean(self._task.args['echo'])
except TypeError as e:
    result['msg'] = to_native(e)
"
-------------------------------------------------------------------------
"try:
    echo = bool(self._task.args['echo'])
except TypeError as e:
    result['msg'] = to_native(e)"
-------------------------------------------------------------------------
"try:
    echo = boolean(self._task.args['echo'])
except TypeError as e:
    result['msg'] = to_native(e)
"
-------------------------------------------------------------------------
"Recom
PRs: 40134, 40480"
-------------------------------------------------------------------------
=========================================================================
"prompt = ""[%s]\n%s%s:"" % (self._task.get_name().strip(), 'Press enter to continue, CtrlC to interrupt', echo_prompt)
"
-------------------------------------------------------------------------
"```python
prompt = ""[%s]\n%s%s:"" % (self._task.get_name().strip(), 'Press enter to continue, CtrlC to interrupt', echo_prompt)
```"
-------------------------------------------------------------------------
"prompt = ""[%s]\n%s%s:"" % (self._task.get_name().strip(), 'Press enter to continue, CtrlC to interrupt', echo_prompt)
"
-------------------------------------------------------------------------
"Recom
PRs: 40134, 40480"
-------------------------------------------------------------------------
=========================================================================
"stdout = sys.stdout.buffer
stdout = sys.stdout


# grab actual CtrlC sequence
try:
    intr = termios.tcgetattr(fd)[6][termios.VINTR]
except Exception:
    # unsupported/not present, use default
    intr = b'\x03'  # value for CtrlC

# get backspace sequences
try:
    backspace = termios.tcgetattr(fd)[6][termios.VERASE]
except Exception:
    backspace = [b'\x7f', b'\x08']

tty.setraw(stdout.fileno())
# Only echo input if no timeout is specified
if not seconds and echo:
    new_settings[3] = new_settings[3] | termios.ECHO

    if key_pressed == intr:  # value for CtrlC
        clear_line(stdout)
        raise KeyboardInterrupt
        display.warning(""Not waiting for response to prompt as stdin is not interactive"")

        clear_line(stdout)
    elif key_pressed in backspace:
        # delete a character if backspace is pressed
        result['user_input'] = result['user_input'][:-1]
        clear_line(stdout)
        if echo:
            stdout.write(result['user_input'])
        stdout.flush()
signal.alarm(0)
    clear_line(stdout)

clear_line(stdout)

raise AnsibleError('user requested abort!')
"
-------------------------------------------------------------------------
"```python
stdout = sys.stdout

# grab actual CtrlC sequence
try:
    intr = termios.tcgetattr(fd)[6][termios.VINTR]
except Exception:
    # unsupported/not present, use default
    intr = b'\x03'  # value for CtrlC

# get backspace sequences
try:
    backspace = termios.tcgetattr(fd)[6][termios.VERASE]
except Exception:
    backspace = [b'\x7f', b'\x08']

tty.setraw(stdout.fileno())
# Only echo input if no timeout is specified
if not seconds and echo:
    new_settings[3] = new_settings[3] | termios.ECHO

    if key_pressed == intr:  # value for CtrlC
        clear_line(stdout)
        raise KeyboardInterrupt
        display.warning(""Not waiting for response to prompt as stdin is not interactive"")

        clear_line(stdout)
    elif key_pressed in backspace:
        # delete a character if backspace is pressed
        result['user_input'] = result['user_input'][:-1]
        clear_line(stdout)
        if echo:
            stdout.write(result['user_input'])
        stdout.flush()
        signal.alarm(0)
    clear_line(stdout)

raise AnsibleError('user requested abort!')
```"
-------------------------------------------------------------------------
"stdout = sys.stdout.buffer
stdout = sys.stdout


# grab actual CtrlC sequence
try:
    intr = termios.tcgetattr(fd)[6][termios.VINTR]
except Exception:
    # unsupported/not present, use default
    intr = b'\x03'  # value for CtrlC

# get backspace sequences
try:
    backspace = termios.tcgetattr(fd)[6][termios.VERASE]
except Exception:
    backspace = [b'\x7f', b'\x08']

tty.setraw(stdout.fileno())
# Only echo input if no timeout is specified
if not seconds and echo:
    new_settings[3] = new_settings[3] | termios.ECHO

    if key_pressed == intr:  # value for CtrlC
        clear_line(stdout)
        raise KeyboardInterrupt
        display.warning(""Not waiting for response to prompt as stdin is not interactive"")

        clear_line(stdout)
    elif key_pressed in backspace:
        # delete a character if backspace is pressed
        result['user_input'] = result['user_input'][:-1]
        clear_line(stdout)
        if echo:
            stdout.write(result['user_input'])
        stdout.flush()
signal.alarm(0)
    clear_line(stdout)

clear_line(stdout)

raise AnsibleError('user requested abort!')
"
-------------------------------------------------------------------------
"Recom
PRs: 40134, 40480"
-------------------------------------------------------------------------
=========================================================================
"# Network connection plugins (network_cli, netconf, etc.) execute on the controller, rather than the remote host.
# As such, we want to avoid using remote_user for paths  as remote_user may not line up with the local user
# This is a hack and should be solved by more intelligent handling of remote_tmp in 2.7
if getattr(self._connection, '_remote_is_local', False):
    tmpdir = C.DEFAULT_LOCAL_TMP
else:
    tmpdir = self._remote_expand_user(remote_tmp, sudoable=False)
"
-------------------------------------------------------------------------
"```python
# Network connection plugins (network_cli, netconf, etc.) execute on the controller, rather than the remote host.
# As such, we want to avoid using remote_user for paths  as remote_user may not line up with the local user
# This is a hack and should be solved by more intelligent handling of remote_tmp in 2.7
if getattr(self._connection, '_remote_is_local', False):
    tmpdir = C.DEFAULT_LOCAL_TMP
else:
    tmpdir = self._remote_expand_user(remote_tmp, sudoable=False)
```"
-------------------------------------------------------------------------
"# Network connection plugins (network_cli, netconf, etc.) execute on the controller, rather than the remote host.
# As such, we want to avoid using remote_user for paths  as remote_user may not line up with the local user
# This is a hack and should be solved by more intelligent handling of remote_tmp in 2.7
if getattr(self._connection, '_remote_is_local', False):
    tmpdir = C.DEFAULT_LOCAL_TMP
else:
    tmpdir = self._remote_expand_user(remote_tmp, sudoable=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 40259, 40363"
-------------------------------------------------------------------------
=========================================================================
"# Network connection plugins (network_cli, netconf, etc.) execute on the controller, rather than the remote host.
# As such, we want to avoid using remote_user for paths  as remote_user may not line up with the local user
# This is a hack and should be solved by more intelligent handling of remote_tmp in 2.7
if getattr(self._connection, '_remote_is_local', False):
    pass
elif sudoable and self._play_context.become and self._play_context.become_user:
"
-------------------------------------------------------------------------
"```python
if getattr(self._connection, '_remote_is_local', False):
    pass
elif sudoable and self._play_context.become and self._play_context.become_user:
```"
-------------------------------------------------------------------------
"# Network connection plugins (network_cli, netconf, etc.) execute on the controller, rather than the remote host.
# As such, we want to avoid using remote_user for paths  as remote_user may not line up with the local user
# This is a hack and should be solved by more intelligent handling of remote_tmp in 2.7
if getattr(self._connection, '_remote_is_local', False):
    pass
elif sudoable and self._play_context.become and self._play_context.become_user:
"
-------------------------------------------------------------------------
"Recom
PRs: 40259, 40363"
-------------------------------------------------------------------------
=========================================================================
"# Do not use _remote_is_local in other connections
_remote_is_local = True
"
-------------------------------------------------------------------------
"```python
_remote_is_local = True
```"
-------------------------------------------------------------------------
"# Do not use _remote_is_local in other connections
_remote_is_local = True
"
-------------------------------------------------------------------------
"Recom
PRs: 40259, 40363"
-------------------------------------------------------------------------
=========================================================================
"# Do not use _remote_is_local in other connections
_remote_is_local = True
"
-------------------------------------------------------------------------
"```python
_remote_is_local = True
```"
-------------------------------------------------------------------------
"# Do not use _remote_is_local in other connections
_remote_is_local = True
"
-------------------------------------------------------------------------
"Recom
PRs: 40259, 40363"
-------------------------------------------------------------------------
=========================================================================
"def desired_topic(module, notification_type):
if arg_dict:
    return arg_dict.get('topic', None)
else:
    return None


update_notification_topic(connection, module, identity, identity_notifications, notification_type):
"
-------------------------------------------------------------------------
"```python
def desired_topic(module, notification_type, arg_dict):
    if arg_dict:
        return arg_dict.get('topic', None)
    else:
        return None

def update_notification_topic(connection, module, identity, identity_notifications, notification_type):
    # Implementation details here
    pass
```"
-------------------------------------------------------------------------
"def desired_topic(module, notification_type):
if arg_dict:
    return arg_dict.get('topic', None)
else:
    return None


update_notification_topic(connection, module, identity, identity_notifications, notification_type):
"
-------------------------------------------------------------------------
"Recom
PRs: 39560, 40350"
-------------------------------------------------------------------------
=========================================================================
"required = desired_topic(module, notification_type)
"
-------------------------------------------------------------------------
"```python
def update_notification_topic(connection, module, identity, identity_notification):
    # included but best to be defensive
    current = None

    required = desired_topic(module, notification_type)

    if current != required:
        call_and_handle_errors(module)
```"
-------------------------------------------------------------------------
"required = desired_topic(module, notification_type)
"
-------------------------------------------------------------------------
"Recom
PRs: 39560, 40350"
-------------------------------------------------------------------------
=========================================================================
"if module.params.get('feedback_forwarding') is False:
    if not (desired_topic(module, 'Bounce') and desired_topic(module, 'Complaint')):
        module.fail_json(msg=""Invalid Parameter Value 'False' for 'feedback_forwarding'. AWS requires ""
                         ""feedback forwarding to be enabled unless bounces and complaints are handled by SNS topics"")

"
-------------------------------------------------------------------------
"```python
if not module.params.get('feedback_forwarding'):
    if not (desired_topic(module, 'Bounce') and desired_topic(module, 'Complaint')):
        module.fail_json(msg=""Invalid Parameter Value 'False' for 'feedback_forwarding'. AWS requires ""
                         ""feedback forwarding to be enabled unless bounces and complaints are handled by SNS topics"")
```"
-------------------------------------------------------------------------
"if module.params.get('feedback_forwarding') is False:
    if not (desired_topic(module, 'Bounce') and desired_topic(module, 'Complaint')):
        module.fail_json(msg=""Invalid Parameter Value 'False' for 'feedback_forwarding'. AWS requires ""
                         ""feedback forwarding to be enabled unless bounces and complaints are handled by SNS topics"")

"
-------------------------------------------------------------------------
"Recom
PRs: 39560, 40350"
-------------------------------------------------------------------------
=========================================================================
"use the syntax tag:Name=Value to use the hostname Name_Value, or tag:Name to use the value of the Name tag.
"
-------------------------------------------------------------------------
"```python
         hostnames:
           description: A list in order of precedence for hostname variables. You can use the options specified in
               U(http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html#options). To use tags as hostnames
         filters:
           description: A dictionary of filter value pairs. Available filters are listed here
               U(http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html#options)
```"
-------------------------------------------------------------------------
"use the syntax tag:Name=Value to use the hostname Name_Value, or tag:Name to use the value of the Name tag.
"
-------------------------------------------------------------------------
"Recom
PRs: 35880, 40325"
-------------------------------------------------------------------------
=========================================================================
"- tag:CustomDNSName
"
-------------------------------------------------------------------------
- tag:CustomDNSName
-------------------------------------------------------------------------
"- tag:CustomDNSName
"
-------------------------------------------------------------------------
"Recom
PRs: 35880, 40325"
-------------------------------------------------------------------------
=========================================================================
"tags = boto3_tag_list_to_ansible_dict(instance.get('Tags', []))
    if '=' in v:
        tag_name, tag_value = v.split('=')
        if tags.get(tag_name) == tag_value:
            return to_text(tag_name)  ""_""  to_text(tag_value)
    else:
        tag_value = tags.get(v)
        if tag_value:
            return to_text(tag_value)
"
-------------------------------------------------------------------------
"```python
tags = ansible.module_utils.ec2.boto3_tag_list_to_ansible_dict(instance.get('Tags', []))
    if '=' in v:
        tag_name, tag_value = v.split('=')
        if tags.get(tag_name) == tag_value:
            return ansible.module_utils._text.to_text(tag_name) + ""_"" + ansible.module_utils._text.to_text(tag_value)
    else:
        tag_value = tags.get(v)
        if tag_value:
            return ansible.module_utils._text.to_text(tag_value)
```"
-------------------------------------------------------------------------
"tags = boto3_tag_list_to_ansible_dict(instance.get('Tags', []))
    if '=' in v:
        tag_name, tag_value = v.split('=')
        if tags.get(tag_name) == tag_value:
            return to_text(tag_name)  ""_""  to_text(tag_value)
    else:
        tag_value = tags.get(v)
        if tag_value:
            return to_text(tag_value)
"
-------------------------------------------------------------------------
"Recom
PRs: 35880, 40325"
-------------------------------------------------------------------------
=========================================================================
"- ""C(end_play) (added in 2.2) causes the play to end without failing the host(s). Note that this affects all hosts.""
"
-------------------------------------------------------------------------
"```python
from __future__ import absolute_import, division, print_function
- 	C(end_play) (added in 2.2) causes the play to end without failing the host(s). Note that this affects all hosts.
+ 	C(end_play) (added in 2.2) causes the play to end without failing the host(s). Note that this affects all hosts.
```"
-------------------------------------------------------------------------
"- ""C(end_play) (added in 2.2) causes the play to end without failing the host(s). Note that this affects all hosts.""
"
-------------------------------------------------------------------------
"Recom
PRs: 40235, 40306"
-------------------------------------------------------------------------
=========================================================================
"if not self.boto_profile and not (self.aws_access_key_id and self.aws_secret_access_key):
    session = botocore.session.get_session()
    if session.get_credentials() is not None:
        self.aws_access_key_id = session.get_credentials().access_key
        self.aws_secret_access_key = session.get_credentials().secret_key
        self.aws_security_token = session.get_credentials().token

"
-------------------------------------------------------------------------
"```python
if not self.boto_profile and not (self.aws_access_key_id and self.aws_secret_access_key):
    session = botocore.session.get_session()
    if session.get_credentials() is not None:
        credentials = session.get_credentials()
        self.aws_access_key_id = credentials.access_key
        self.aws_secret_access_key = credentials.secret_key
        self.aws_security_token = credentials.token
```"
-------------------------------------------------------------------------
"if not self.boto_profile and not (self.aws_access_key_id and self.aws_secret_access_key):
    session = botocore.session.get_session()
    if session.get_credentials() is not None:
        self.aws_access_key_id = session.get_credentials().access_key
        self.aws_secret_access_key = session.get_credentials().secret_key
        self.aws_security_token = session.get_credentials().token

"
-------------------------------------------------------------------------
"Recom
PRs: 40240, 40277"
-------------------------------------------------------------------------
=========================================================================
"class FileException(Exception):
def __init__(self, reason, details):
    self.reason = reason
    self.details = details

def __str__(self):
    return 'Reason: {0}. Details:{1}.'.format(self.reason, self.details)


s InvalidSourceException(FileException):
def __init__(self, message):
    super(InvalidSourceException, self).__init__(
        'Error parsing file', repr(message))


"
-------------------------------------------------------------------------
"```python
class FileException(Exception):
    def __init__(self, reason, details):
        self.reason = reason
        self.details = details

    def __str__(self):
        return 'Reason: {0}. Details:{1}.'.format(self.reason, self.details)


class InvalidSourceException(FileException):
    def __init__(self, message):
        super(InvalidSourceException, self).__init__(
            'Error parsing file', repr(message))
```"
-------------------------------------------------------------------------
"class FileException(Exception):
def __init__(self, reason, details):
    self.reason = reason
    self.details = details

def __str__(self):
    return 'Reason: {0}. Details:{1}.'.format(self.reason, self.details)


s InvalidSourceException(FileException):
def __init__(self, message):
    super(InvalidSourceException, self).__init__(
        'Error parsing file', repr(message))


"
-------------------------------------------------------------------------
"Recom
PRs: 37461, 40252"
-------------------------------------------------------------------------
=========================================================================
"result_to_return = CONFIGURATION_TEMPLATE_CREATED_SUCCESS
    result_to_return = CONFIGURATION_TEMPLATE_UPDATED_SUCCESS
    result = template.upload_source(file_content, template_name, fail_if_invalid=True)

if result[rest_client.RESP_STATUS] == 400:
    raise InvalidSourceException(str(result[rest_client.RESP_STR]))

result_to_return = WORKFLOW_TEMPLATE_CREATED_SUCCESS
    result_to_return = WORKFLOW_TEMPLATE_UPDATED_SUCCESS
    result = workflow.update_archive(file_content, os.path.splitext(os.path.basename(fqn))[0])

if result[rest_client.RESP_STATUS] == 400:
    raise InvalidSourceException(str(result[rest_client.RESP_STR]))
result_to_return = WRONG_EXTENSION_ERROR
rn result_to_return
"
-------------------------------------------------------------------------
"result_to_return = CONFIGURATION_TEMPLATE_CREATED_SUCCESS
    result_to_return = CONFIGURATION_TEMPLATE_UPDATED_SUCCESS
    result = template.upload_source(file_content, template_name, fail_if_invalid=True)

if result[rest_client.RESP_STATUS] == 400:
    raise InvalidSourceException(str(result[rest_client.RESP_STR]))

result_to_return = WORKFLOW_TEMPLATE_CREATED_SUCCESS
result_to_return = WORKFLOW_TEMPLATE_UPDATED_SUCCESS
result = workflow.update_archive(file_content, os.path.splitext(os.path.basename(fqn))[0])

if result[rest_client.RESP_STATUS] == 400:
    raise InvalidSourceException(str(result[rest_client.RESP_STR]))

result_to_return = WRONG_EXTENSION_ERROR"
-------------------------------------------------------------------------
"result_to_return = CONFIGURATION_TEMPLATE_CREATED_SUCCESS
    result_to_return = CONFIGURATION_TEMPLATE_UPDATED_SUCCESS
    result = template.upload_source(file_content, template_name, fail_if_invalid=True)

if result[rest_client.RESP_STATUS] == 400:
    raise InvalidSourceException(str(result[rest_client.RESP_STR]))

result_to_return = WORKFLOW_TEMPLATE_CREATED_SUCCESS
    result_to_return = WORKFLOW_TEMPLATE_UPDATED_SUCCESS
    result = workflow.update_archive(file_content, os.path.splitext(os.path.basename(fqn))[0])

if result[rest_client.RESP_STATUS] == 400:
    raise InvalidSourceException(str(result[rest_client.RESP_STR]))
result_to_return = WRONG_EXTENSION_ERROR
rn result_to_return
"
-------------------------------------------------------------------------
"Recom
PRs: 37461, 40252"
-------------------------------------------------------------------------
=========================================================================
"def test_template_upload_create(self, *args):
"
-------------------------------------------------------------------------
"```python
def test_template_upload_create(self):
    pass
```"
-------------------------------------------------------------------------
"def test_template_upload_create(self, *args):
"
-------------------------------------------------------------------------
"Recom
PRs: 37461, 40252"
-------------------------------------------------------------------------
=========================================================================
"
Template.set_create_from_source_result([201])
Template.set_create_from_source_result([400, """", ""Parsing error"", """"])
try:
    result = file.upload(os.path.join(path, ""ct.vm""))
    self.fail(""InvalidSourceException was not thrown"")
except vdirect_file.InvalidSourceException:
    assert True

_template_upload_update(self, *args):
"
-------------------------------------------------------------------------
"```
Template.set_create_from_source_result([201])
Template.set_create_from_source_result([400, """", ""Parsing error"", """"])
try:
    result = file.upload(os.path.join(path, ""ct.vm""))
    self.assertRaises(vdirect_file.InvalidSourceException, file.upload, os.path.join(path, ""ct.vm""))
except vdirect_file.InvalidSourceException:
    assert True 

def _template_upload_update(self, *args):
    pass
```"
-------------------------------------------------------------------------
"
Template.set_create_from_source_result([201])
Template.set_create_from_source_result([400, """", ""Parsing error"", """"])
try:
    result = file.upload(os.path.join(path, ""ct.vm""))
    self.fail(""InvalidSourceException was not thrown"")
except vdirect_file.InvalidSourceException:
    assert True

_template_upload_update(self, *args):
"
-------------------------------------------------------------------------
"Recom
PRs: 37461, 40252"
-------------------------------------------------------------------------
=========================================================================
"
Template.set_create_from_source_result([409])
Template.set_upload_source_result([201])
Template.set_upload_source_result([400, """", ""Parsing error"", """"])
try:
    result = file.upload(os.path.join(path, ""ct.vm""))
    self.fail(""InvalidSourceException was not thrown"")
except vdirect_file.InvalidSourceException:
    assert True

_workflow_upload_create(self, *args):
"
-------------------------------------------------------------------------
"```python
Template.set_create_from_source_result([409])
Template.set_upload_source_result([201])
Template.set_upload_source_result([400, """", ""Parsing error"", """"])
try:
    result = file.upload(os.path.join(path, ""ct.vm""))
    self.assertRaises(vdirect_file.InvalidSourceException, file.upload, os.path.join(path, ""ct.vm""))
except vdirect_file.InvalidSourceException:
    assert True

_workflow_upload_create(self, *args):
```"
-------------------------------------------------------------------------
"
Template.set_create_from_source_result([409])
Template.set_upload_source_result([201])
Template.set_upload_source_result([400, """", ""Parsing error"", """"])
try:
    result = file.upload(os.path.join(path, ""ct.vm""))
    self.fail(""InvalidSourceException was not thrown"")
except vdirect_file.InvalidSourceException:
    assert True

_workflow_upload_create(self, *args):
"
-------------------------------------------------------------------------
"Recom
PRs: 37461, 40252"
-------------------------------------------------------------------------
=========================================================================
"
WorkflowTemplate.set_create_template_from_archive_result([201])
WorkflowTemplate.set_create_template_from_archive_result([400, """", ""Parsing error"", """"])
try:
    result = file.upload(os.path.join(path, ""wt.zip""))
    self.fail(""InvalidSourceException was not thrown"")
except vdirect_file.InvalidSourceException:
    assert True

_workflow_upload_update(self, *args):
"
-------------------------------------------------------------------------
"```python
WorkflowTemplate.set_create_template_from_archive_result([201])
WorkflowTemplate.set_create_template_from_archive_result([400, """", ""Parsing error"", """"])
try:
    result = file.upload(os.path.join(path, ""wt.zip""))
    self.assertRaises(vdirect_file.InvalidSourceException, lambda: file.upload(os.path.join(path, ""wt.zip"")))
except vdirect_file.InvalidSourceException:
    assert True

_workflow_upload_update(self, *args):
```"
-------------------------------------------------------------------------
"
WorkflowTemplate.set_create_template_from_archive_result([201])
WorkflowTemplate.set_create_template_from_archive_result([400, """", ""Parsing error"", """"])
try:
    result = file.upload(os.path.join(path, ""wt.zip""))
    self.fail(""InvalidSourceException was not thrown"")
except vdirect_file.InvalidSourceException:
    assert True

_workflow_upload_update(self, *args):
"
-------------------------------------------------------------------------
"Recom
PRs: 37461, 40252"
-------------------------------------------------------------------------
=========================================================================
"
WorkflowTemplate.set_create_template_from_archive_result([409])
WorkflowTemplate.set_update_archive_result([201])

WorkflowTemplate.set_update_archive_result([400, """", ""Parsing error"", """"])
try:
    result = file.upload(os.path.join(path, ""wt.zip""))
    self.fail(""InvalidSourceException was not thrown"")
except vdirect_file.InvalidSourceException:
    assert True
"
-------------------------------------------------------------------------
"```
WorkflowTemplate.set_create_template_from_archive_result([409])
WorkflowTemplate.set_update_archive_result([201])

WorkflowTemplate.set_update_archive_result([400, """", ""Parsing error"", """"])
try:
    result = file.upload(os.path.join(path, ""wt.zip""))
    self.fail(""InvalidSourceException was not thrown"")
except vdirect_file.InvalidSourceException:
    assert True
```"
-------------------------------------------------------------------------
"
WorkflowTemplate.set_create_template_from_archive_result([409])
WorkflowTemplate.set_update_archive_result([201])

WorkflowTemplate.set_update_archive_result([400, """", ""Parsing error"", """"])
try:
    result = file.upload(os.path.join(path, ""wt.zip""))
    self.fail(""InvalidSourceException was not thrown"")
except vdirect_file.InvalidSourceException:
    assert True
"
-------------------------------------------------------------------------
"Recom
PRs: 37461, 40252"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.connection import Connection, ConnectionError
"
-------------------------------------------------------------------------
"```python
import json
from ansible.module_utils._text import to_text
from ansible.module_utils.basic import env_fallback, return_values
from ansible.module_utils.network.common.utils import to_list, ComplexList
import re
from ansible.module_utils.six.moves import urllib.parse
from ansible.module_utils.six import iteritems
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.ios.ios import ios_argument_spec

_DEVICE_CONFIGS = {}
```"
-------------------------------------------------------------------------
"from ansible.module_utils.connection import Connection, ConnectionError
"
-------------------------------------------------------------------------
"Recom
PRs: 40109, 40247"
-------------------------------------------------------------------------
=========================================================================
"try:
    out = connection.get(command, prompt, answer)
except ConnectionError as e:
    if check_rc:
        raise
    else:
        out = e
"
-------------------------------------------------------------------------
"```python
try:
    out = connection.get(command, prompt, answer)
except ConnectionError as e:
    if check_rc:
        raise
    else:
        out = e
```"
-------------------------------------------------------------------------
"try:
    out = connection.get(command, prompt, answer)
except ConnectionError as e:
    if check_rc:
        raise
    else:
        out = e
"
-------------------------------------------------------------------------
"Recom
PRs: 40109, 40247"
-------------------------------------------------------------------------
=========================================================================
"lldp_errs = ['Invalid input', 'LLDP is not enabled']

if data and not any(err in data for err in lldp_errs):
"
-------------------------------------------------------------------------
"```python
import re
from ansible.module_utils.six.moves import zip

class Interfaces(FactsBase):
    self.populate_ipv6_interfaces(data)

data = self.responses[3]
neighbors = self.run(['show lldp neighbors detail'])
lldp_errs = ['Invalid input', 'LLDP is not enabled']

if neighbors and not any(err in neighbors[0] for err in lldp_errs):
    self.facts['neighbors'] = self.parse_neighbors(neighbors[0])
```"
-------------------------------------------------------------------------
"lldp_errs = ['Invalid input', 'LLDP is not enabled']

if data and not any(err in data for err in lldp_errs):
"
-------------------------------------------------------------------------
"Recom
PRs: 40109, 40247"
-------------------------------------------------------------------------
=========================================================================
"from ansible.errors import AnsibleError, AnsibleAction, AnsibleActionFail, AnsibleFileNotFound
"
-------------------------------------------------------------------------
"```python
from ansible.errors import AnsibleError, AnsibleAction, AnsibleActionFail, AnsibleFileNotFound
```"
-------------------------------------------------------------------------
"from ansible.errors import AnsibleError, AnsibleAction, AnsibleActionFail, AnsibleFileNotFound
"
-------------------------------------------------------------------------
"Recom
PRs: 39023, 40192"
-------------------------------------------------------------------------
=========================================================================
"
# For backward compatibility check if the file exists on the remote; it should take precedence
if not self._remote_file_exists(source):
    try:
        source = self._loader.get_real_file(self._find_needle('files', source))
        new_module_args['src'] = source
    except AnsibleFileNotFound as e:
        # module handles error message for nonexistent files
        new_module_args['src'] = source
    except AnsibleError as e:
        raise AnsibleActionFail(to_text(e))
"
-------------------------------------------------------------------------
"```python
# For backward compatibility check if the file exists on the remote; it should take precedence
if not self._remote_file_exists(source):
    try:
        source = self._loader.get_real_file(self._find_needle('files', source))
        new_module_args['src'] = source
    except AnsibleFileNotFound as e:
        # module handles error message for nonexistent files
        new_module_args['src'] = source
    except AnsibleError as e:
        raise AnsibleActionFail(to_text(e))
```"
-------------------------------------------------------------------------
"
# For backward compatibility check if the file exists on the remote; it should take precedence
if not self._remote_file_exists(source):
    try:
        source = self._loader.get_real_file(self._find_needle('files', source))
        new_module_args['src'] = source
    except AnsibleFileNotFound as e:
        # module handles error message for nonexistent files
        new_module_args['src'] = source
    except AnsibleError as e:
        raise AnsibleActionFail(to_text(e))
"
-------------------------------------------------------------------------
"Recom
PRs: 39023, 40192"
-------------------------------------------------------------------------
=========================================================================
"elif words[0].startswith(""allow-""):
"
-------------------------------------------------------------------------
"```python
import os
import re
import tempfile
from ansible.module_utils import _text
from ansible.module_utils import basic

def read_interfaces_lines(module, line_strings):
    elif words[0].startswith(""allow-""):
        lines.append(lineDict(line))
        currently_processing = ""NONE""
        lines.append(lineDict(line))
        currently_processing = ""NONE""
    elif words[0] == ""no-auto-down"":
```"
-------------------------------------------------------------------------
"elif words[0].startswith(""allow-""):
"
-------------------------------------------------------------------------
"Recom
PRs: 37847, 40008"
-------------------------------------------------------------------------
=========================================================================
"potentially be moved into a shared module_utils
"
-------------------------------------------------------------------------
"```python
# potentially be moved into a shared module_utils
def find_subnets(connection, module, vpc_id, identified_subnets):
    'Name' tag, or a CIDR such as 10.0.0.0/8.

    Note that this function is duplicated in other ec2 modules, and should
    """"""
    subnet_ids = []
    subnet_names = []
```"
-------------------------------------------------------------------------
"potentially be moved into a shared module_utils
"
-------------------------------------------------------------------------
"Recom
PRs: 38707, 39899"
-------------------------------------------------------------------------
=========================================================================
"matching_count = len([1 for s in subnets_by_name for t in s.get('Tags', []) if t['Key'] == 'Name' and t['Value'] == name])
"
-------------------------------------------------------------------------
"matching_count = len([1 for s in subnets_by_name for t in s.get('Tags', []) if t.get('Key') == 'Name' and t.get('Value') == name])"
-------------------------------------------------------------------------
"matching_count = len([1 for s in subnets_by_name for t in s.get('Tags', []) if t['Key'] == 'Name' and t['Value'] == name])
"
-------------------------------------------------------------------------
"Recom
PRs: 38707, 39899"
-------------------------------------------------------------------------
=========================================================================
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"```python
del self._task.args['provider']
```"
-------------------------------------------------------------------------
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"Recom
PRs: 39555, 39861"
-------------------------------------------------------------------------
=========================================================================
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"```python
del self._task.args['provider']
```"
-------------------------------------------------------------------------
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"Recom
PRs: 39555, 39861"
-------------------------------------------------------------------------
=========================================================================
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"```python
if self._play_context.connection == 'local':
    del self._task.args['provider']
```"
-------------------------------------------------------------------------
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"Recom
PRs: 39555, 39861"
-------------------------------------------------------------------------
=========================================================================
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"```python
del self._task.args['provider']
```"
-------------------------------------------------------------------------
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"Recom
PRs: 39555, 39861"
-------------------------------------------------------------------------
=========================================================================
"del self._task.args['provider']
elf._task.args.get('transport'):
display.warning('transport is unnecessary when using network_cli and will be ignored')
del self._task.args['transport']
"
-------------------------------------------------------------------------
"```python
del self._task.args['provider']
if self._task.args.get('transport'):
    display.warning('transport is unnecessary when using network_cli and will be ignored')
    del self._task.args['transport']
```"
-------------------------------------------------------------------------
"del self._task.args['provider']
elf._task.args.get('transport'):
display.warning('transport is unnecessary when using network_cli and will be ignored')
del self._task.args['transport']
"
-------------------------------------------------------------------------
"Recom
PRs: 39555, 39861"
-------------------------------------------------------------------------
=========================================================================
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"```python
if any(provider.values()):
    display.warning('provider is unnecessary when using network_cli and will be ignored')
    del self._task.args['provider']
elif self._play_context.connection == 'local':
    provider = load_provider(ios_provider_spec, self._task.args)
    pc = copy.deepcopy(self._play_context)
```"
-------------------------------------------------------------------------
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"Recom
PRs: 39555, 39861"
-------------------------------------------------------------------------
=========================================================================
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"from __future__ import absolute_import, division, print_function

import ansible.module_utils.network.common.utils as CommonUtils
import ansible
import ansible.module_utils._text as Text
import ansible.utils.display as Display
import ansible.plugins.action.normal as Normal
import ansible.module_utils.connection
import sys
import ansible.module_utils.network.vyos.vyos as Vyos
import copy

class ActionModule(_ActionModule):
    provider = self._task.args.get('provider', {})
    if any(provider.values()):
        Display.warning('provider is unnecessary when using {0} and will be ignored'.format(self._play_context.connection))
        del self._task.args['provider']
    else:
        return {'failed': True, 'msg': 'Connection type %s is not valid for this module' % self._play_context.connection}"
-------------------------------------------------------------------------
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"Recom
PRs: 39555, 39861"
-------------------------------------------------------------------------
=========================================================================
"display.warning('provider is unnecessary when using %s and will be ignored' % self._play_context.connection)
del self._task.args['provider']
"
-------------------------------------------------------------------------
"```python
display.warning('provider is unnecessary when using %s and will be ignored' % self._play_context.connection)
del self._task.args['provider']
```"
-------------------------------------------------------------------------
"display.warning('provider is unnecessary when using %s and will be ignored' % self._play_context.connection)
del self._task.args['provider']
"
-------------------------------------------------------------------------
"Recom
PRs: 39555, 39861"
-------------------------------------------------------------------------
=========================================================================
"display.warning('provider is unnecessary when using %s and will be ignored' % play_context.connection)
del self._task.args['provider']
"
-------------------------------------------------------------------------
"```python
display.warning('provider is unnecessary when using %s and will be ignored' % play_context.connection)
del self._task.args['provider']
```"
-------------------------------------------------------------------------
"display.warning('provider is unnecessary when using %s and will be ignored' % play_context.connection)
del self._task.args['provider']
"
-------------------------------------------------------------------------
"Recom
PRs: 39555, 39861"
-------------------------------------------------------------------------
=========================================================================
"del self._task.args['provider']
elf._task.args.get('transport'):
display.warning('transport is unnecessary when using network_cli and will be ignored')
del self._task.args['transport']
"
-------------------------------------------------------------------------
"```python
del self._task.args.get('provider')
if self._task.args.get('transport'):
    display.warning('transport is unnecessary when using network_cli and will be ignored')
    del self._task.args['transport']
```"
-------------------------------------------------------------------------
"del self._task.args['provider']
elf._task.args.get('transport'):
display.warning('transport is unnecessary when using network_cli and will be ignored')
del self._task.args['transport']
"
-------------------------------------------------------------------------
"Recom
PRs: 39555, 39861"
-------------------------------------------------------------------------
=========================================================================
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"```python
del self._task.args['provider']
```"
-------------------------------------------------------------------------
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"Recom
PRs: 39555, 39861"
-------------------------------------------------------------------------
=========================================================================
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"```python
del self._task.args['provider']
```"
-------------------------------------------------------------------------
"del self._task.args['provider']
"
-------------------------------------------------------------------------
"Recom
PRs: 39555, 39861"
-------------------------------------------------------------------------
=========================================================================
"import re

"
-------------------------------------------------------------------------
"```python
import re
```"
-------------------------------------------------------------------------
"import re

"
-------------------------------------------------------------------------
"Recom
PRs: 39673, 39843"
-------------------------------------------------------------------------
=========================================================================
"CONFIG_MISPLACED_CHILDREN = [
re.compile(r'end-\s*(.)$')


"
-------------------------------------------------------------------------
"```python
CONFIG_MISPLACED_CHILDREN = [
    re.compile(r'end-\s*(.)$')
]
```"
-------------------------------------------------------------------------
"CONFIG_MISPLACED_CHILDREN = [
re.compile(r'end-\s*(.)$')


"
-------------------------------------------------------------------------
"Recom
PRs: 39673, 39843"
-------------------------------------------------------------------------
=========================================================================
"def sanitize_candidate_config(config):
last_parents = None
for regex in CONFIG_MISPLACED_CHILDREN:
    for index, line in enumerate(config):
        if line._parents:
            last_parents = line._parents
        m = regex.search(line.text)
        if m and m.group(0):
            config[index]._parents = last_parents


sanitize_running_config(config):
last_parents = None
for regex in CONFIG_MISPLACED_CHILDREN:
    for index, line in enumerate(config):
        if line._parents:
            last_parents = line._parents
        m = regex.search(line.text)
        if m and m.group(0):
            config[index].text = ' '  m.group(0)
            config[index]._parents = last_parents


"
-------------------------------------------------------------------------
"```python
def sanitize_config(config):
    last_parents = None
    for regex in CONFIG_MISPLACED_CHILDREN:
        for index, line in enumerate(config):
            if line._parents:
                last_parents = line._parents
            m = regex.search(line.text)
            if m and m.group(0):
                line.text = re.sub(regex, ' ', line.text)
                line._parents = last_parents
```"
-------------------------------------------------------------------------
"def sanitize_candidate_config(config):
last_parents = None
for regex in CONFIG_MISPLACED_CHILDREN:
    for index, line in enumerate(config):
        if line._parents:
            last_parents = line._parents
        m = regex.search(line.text)
        if m and m.group(0):
            config[index]._parents = last_parents


sanitize_running_config(config):
last_parents = None
for regex in CONFIG_MISPLACED_CHILDREN:
    for index, line in enumerate(config):
        if line._parents:
            last_parents = line._parents
        m = regex.search(line.text)
        if m and m.group(0):
            config[index].text = ' '  m.group(0)
            config[index]._parents = last_parents


"
-------------------------------------------------------------------------
"Recom
PRs: 39673, 39843"
-------------------------------------------------------------------------
=========================================================================
"sanitize_candidate_config(candidate_config.items)
sanitize_running_config(running_config.items)

"
-------------------------------------------------------------------------
"```python
def run(module, result):
    candidate_config = get_candidate(module)
    running_config = get_running_config(module)

    candidate_config_items = sanitize_candidate_config(candidate_config.items)
    running_config_items = sanitize_running_config(running_config.items)

    commands = None
    if match != 'none' and replace != 'config':
        commands = candidate_config_items.difference(running_config_items, path=path, match=match, replace=replace)
```"
-------------------------------------------------------------------------
"sanitize_candidate_config(candidate_config.items)
sanitize_running_config(running_config.items)

"
-------------------------------------------------------------------------
"Recom
PRs: 39673, 39843"
-------------------------------------------------------------------------
=========================================================================
"# Update template vars to reflect current loop iteration
templar.set_available_variables(task_vars)

"
-------------------------------------------------------------------------
"```python
templar.set_available_variables(task_vars, loop_var=item_index)
```"
-------------------------------------------------------------------------
"# Update template vars to reflect current loop iteration
templar.set_available_variables(task_vars)

"
-------------------------------------------------------------------------
"Recom
PRs: 39818, 39824"
-------------------------------------------------------------------------
=========================================================================
"if lifecycle.startswith('Terminating') or health == 'Unhealthy':
"
-------------------------------------------------------------------------
"```python
if lifecycle.startswith('Terminating') or health == 'Unhealthy':
```"
-------------------------------------------------------------------------
"if lifecycle.startswith('Terminating') or health == 'Unhealthy':
"
-------------------------------------------------------------------------
"Recom
PRs: 37282, 39767"
-------------------------------------------------------------------------
=========================================================================
"async_task = Task().load(dict(action='async_status jid=%s' % async_jid, environment=self._task.environment))
"
-------------------------------------------------------------------------
"```python
async_task = Task().load(dict(action='async_status jid=%s' % async_jid))
```"
-------------------------------------------------------------------------
"async_task = Task().load(dict(action='async_status jid=%s' % async_jid, environment=self._task.environment))
"
-------------------------------------------------------------------------
"Recom
PRs: 39764, 39766"
-------------------------------------------------------------------------
=========================================================================
"SHADOWFILE_EXPIRE_INDEX = 7
"
-------------------------------------------------------------------------
"```python
class User(object):
    platform = 'Generic'
    distribution = None
    SHADOWFILE = '/etc/shadow'
    DATE_FORMAT = '%Y-%m-%d'
    SHADOWFILE_EXPIRE_INDEX = 7

    def __new__(cls, *args, **kwargs):
```"
-------------------------------------------------------------------------
"SHADOWFILE_EXPIRE_INDEX = 7
"
-------------------------------------------------------------------------
"Recom
PRs: 38885, 39575"
-------------------------------------------------------------------------
=========================================================================
"current_expires = self.user_password()[1]

# Convert days since Epoch to seconds since Epoch as struct_time
total_seconds = int(current_expires) * 86400
current_expires = time.gmtime(total_seconds)

# Compare year, month, and day only
if current_expires[:3] != self.expires[:3]:
    cmd.append('-e')
    cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
"
-------------------------------------------------------------------------
"```python
import os
import __future__
import platform
import time
import shutil
import spwd
import socket
import pwd
import grp
import ansible.module_utils._text
import ansible.module_utils.basic

current_expires = self.user_password()[1]

# Convert days since Epoch to seconds since Epoch as struct_time
total_seconds = int(current_expires) * 86400
current_expires = time.gmtime(total_seconds)

# Compare year, month, and day only
if current_expires[:3] != self.expires[:3]:
    cmd.append('-e')
    cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
```"
-------------------------------------------------------------------------
"current_expires = self.user_password()[1]

# Convert days since Epoch to seconds since Epoch as struct_time
total_seconds = int(current_expires) * 86400
current_expires = time.gmtime(total_seconds)

# Compare year, month, and day only
if current_expires[:3] != self.expires[:3]:
    cmd.append('-e')
    cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
"
-------------------------------------------------------------------------
"Recom
PRs: 38885, 39575"
-------------------------------------------------------------------------
=========================================================================
"info[1] = self.user_password()[0]
res = ''
    expires = spwd.getspnam(self.name)[7]
    return passwd, expires
    return passwd, expires

return passwd, expires
            expires = line.split(':')[self.SHADOWFILE_EXPIRE_INDEX]
rn passwd, expires
"
-------------------------------------------------------------------------
"```python
info = self.user_password()
res = ''
expires = spwd.getspnam(self.name)[7]
return passwd, expires
```"
-------------------------------------------------------------------------
"info[1] = self.user_password()[0]
res = ''
    expires = spwd.getspnam(self.name)[7]
    return passwd, expires
    return passwd, expires

return passwd, expires
            expires = line.split(':')[self.SHADOWFILE_EXPIRE_INDEX]
rn passwd, expires
"
-------------------------------------------------------------------------
"Recom
PRs: 38885, 39575"
-------------------------------------------------------------------------
=========================================================================
"SHADOWFILE_EXPIRE_INDEX = 6
DATE_FORMAT = '%d-%b-%Y'
"
-------------------------------------------------------------------------
"```python
class FreeBsdUser(User):
    platform = 'FreeBSD'
    distribution = None
    SHADOWFILE = '/etc/master.passwd'
    SHADOWFILE_EXPIRE_INDEX = 6
    DATE_FORMAT = '%d-%b-%Y'

    def remove_user(self):
        cmd = [
```"
-------------------------------------------------------------------------
"SHADOWFILE_EXPIRE_INDEX = 6
DATE_FORMAT = '%d-%b-%Y'
"
-------------------------------------------------------------------------
"Recom
PRs: 38885, 39575"
-------------------------------------------------------------------------
=========================================================================
"cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
"
-------------------------------------------------------------------------
"```python
cmd.append(self.expires.strftime(self.DATE_FORMAT))
```"
-------------------------------------------------------------------------
"cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
"
-------------------------------------------------------------------------
"Recom
PRs: 38885, 39575"
-------------------------------------------------------------------------
=========================================================================
"current_expires = time.gmtime(int(self.user_password()[1]))

# Compare year, month, and day only
if current_expires[:3] != self.expires[:3]:
    cmd.append('-e')
    cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
"
-------------------------------------------------------------------------
"```python
current_expires = time.gmtime(int(self.user_password()[1]))

# Compare year, month, and day only
if current_expires[:3] != self.expires[:3]:
    cmd.append('-e')
    cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
```"
-------------------------------------------------------------------------
"current_expires = time.gmtime(int(self.user_password()[1]))

# Compare year, month, and day only
if current_expires[:3] != self.expires[:3]:
    cmd.append('-e')
    cmd.append(time.strftime(self.DATE_FORMAT, self.expires))
"
-------------------------------------------------------------------------
"Recom
PRs: 38885, 39575"
-------------------------------------------------------------------------
=========================================================================
"# initialize and figure out if plugin wants to attempt parsing this file
try:
    plugin_wants = bool(plugin.verify_file(source))
except Exception:
    plugin_wants = False

if plugin_wants:
"
-------------------------------------------------------------------------
"```python
# initialize and figure out if plugin wants to attempt parsing this file
try:
    plugin_wants = bool(plugin.verify_file(source))
except Exception:
    plugin_wants = False

if plugin_wants:
```"
-------------------------------------------------------------------------
"# initialize and figure out if plugin wants to attempt parsing this file
try:
    plugin_wants = bool(plugin.verify_file(source))
except Exception:
    plugin_wants = False

if plugin_wants:
"
-------------------------------------------------------------------------
"Recom
PRs: 36591, 39449"
-------------------------------------------------------------------------
=========================================================================
"self._parsers = {}
"
-------------------------------------------------------------------------
self._parsers = {}
-------------------------------------------------------------------------
"self._parsers = {}
"
-------------------------------------------------------------------------
"Recom
PRs: 37648, 39436"
-------------------------------------------------------------------------
=========================================================================
"self._parsers[cfile] = configparser.ConfigParser()
    self._parsers[cfile].read(cfile)
      self._parsers[cfile] = yaml.safe_load(config_stream)
"
-------------------------------------------------------------------------
"```python
self._parsers[cfile] = configparser.ConfigParser()
self._parsers[cfile].read(cfile)
self._parsers[cfile] = yaml.safe_load(config_stream)
```"
-------------------------------------------------------------------------
"self._parsers[cfile] = configparser.ConfigParser()
    self._parsers[cfile].read(cfile)
      self._parsers[cfile] = yaml.safe_load(config_stream)
"
-------------------------------------------------------------------------
"Recom
PRs: 37648, 39436"
-------------------------------------------------------------------------
=========================================================================
"# use default config
"
-------------------------------------------------------------------------
"```python
# Set default config
```"
-------------------------------------------------------------------------
"# use default config
"
-------------------------------------------------------------------------
"Recom
PRs: 37648, 39436"
-------------------------------------------------------------------------
=========================================================================
"if self._parsers.get(cfile, None) is None:
    self._parse_config_file(cfile)

"
-------------------------------------------------------------------------
"if not self._parsers.get(cfile):
    self._parse_config_file(cfile)"
-------------------------------------------------------------------------
"if self._parsers.get(cfile, None) is None:
    self._parse_config_file(cfile)

"
-------------------------------------------------------------------------
"Recom
PRs: 37648, 39436"
-------------------------------------------------------------------------
=========================================================================
"temp_value = get_ini_config_value(self._parsers[cfile], ini_entry)
"
-------------------------------------------------------------------------
"temp_value = get_ini_config_value(self._parsers[cfile], ini_entry)"
-------------------------------------------------------------------------
"temp_value = get_ini_config_value(self._parsers[cfile], ini_entry)
"
-------------------------------------------------------------------------
"Recom
PRs: 37648, 39436"
-------------------------------------------------------------------------
=========================================================================
"try:
    shell = shell_loader.get(shell_filename)
except Exception:
    shell = None
if shell is None:
    for shell in shell_loader.all():
        if shell_filename in shell.COMPATIBLE_SHELLS:
            break
shell_type = shell.SHELL_FAMILY
"
-------------------------------------------------------------------------
"```python
try:
    shell = shell_loader.get(shell_filename)
except Exception:
    shell = None
if shell is None:
    for shell in shell_loader.all():
        if shell_filename in shell.COMPATIBLE_SHELLS:
            break
shell_type = shell.SHELL_FAMILY
```"
-------------------------------------------------------------------------
"try:
    shell = shell_loader.get(shell_filename)
except Exception:
    shell = None
if shell is None:
    for shell in shell_loader.all():
        if shell_filename in shell.COMPATIBLE_SHELLS:
            break
shell_type = shell.SHELL_FAMILY
"
-------------------------------------------------------------------------
"Recom
PRs: 37648, 39436"
-------------------------------------------------------------------------
=========================================================================
"
"
-------------------------------------------------------------------------
"from jinja2.exceptions import UndefinedError
from ansible.template import Templar
from __main__ import os
from collections import defaultdict
from ansible.module_utils.six import iteritems
from ansible.utils.display import Display
from ansible.plugins.loader.vars_loader import VarsModuleLoader
import hashlib
import sys
from ansible.inventory.helpers import get_group_vars
from ansible.inventory.host import Host
from ansible.module_utils._text import to_text
from __future__ import absolute_import
from ansible.plugins.loader import os
from hashlib import sha


class VariableManager:
    inventory_dir = os.path.dirname(inventory_dir)

    vars_loader = VarsModuleLoader()
    for plugin in vars_loader.all():
        data = combine_vars(data, _get_plugin_vars(plugin, inventory_dir, entities))

    return data"
-------------------------------------------------------------------------
"
"
-------------------------------------------------------------------------
"Recom
PRs: 37648, 39436"
-------------------------------------------------------------------------
=========================================================================
"
"
-------------------------------------------------------------------------
"```python
import sys
import os
import hashlib
from collections import defaultdict
from ansible.utils.display import Display
from ansible.vars import combine_vars
from ansible.plugins.loader import vars_loader
from ansible.module_utils.six import iteritems
from ansible.errors import AnsibleError
from ansible.module_utils._text import to_bytes
from ansible.template import Templar

class VariableManager:
    ''' merges all entities adjacent to play '''
    data = {}
    for plugin in vars_loader.all():
        for path in basedirs:
            data = combine_vars(data, _get_plugin_vars(plugin, path, entities))
    return data
```"
-------------------------------------------------------------------------
"
"
-------------------------------------------------------------------------
"Recom
PRs: 37648, 39436"
-------------------------------------------------------------------------
=========================================================================
"path_found = False
        display.warning(""- the configured path %s does not exist."" % role_path)
        continue
        display.warning(""- the configured path %s, exists, but it is not a directory."" % role_path)
        continue
    path_found = True
"
-------------------------------------------------------------------------
"```python
path_found = False
if not os.path.exists(role_path):
    display.warning(""- the configured path %s does not exist."" % role_path)
    continue
elif not os.path.isdir(role_path):
    display.warning(""- the configured path %s, exists, but it is not a directory."" % role_path)
    continue
path_found = True
```"
-------------------------------------------------------------------------
"path_found = False
        display.warning(""- the configured path %s does not exist."" % role_path)
        continue
        display.warning(""- the configured path %s, exists, but it is not a directory."" % role_path)
        continue
    path_found = True
"
-------------------------------------------------------------------------
"Recom
PRs: 39082, 39433"
-------------------------------------------------------------------------
=========================================================================
"if not path_found:
    raise AnsibleOptionsError(""- None of the provided paths was usable. Please specify a valid path with --roles-path"")
"
-------------------------------------------------------------------------
"```python
if not path_found:
    raise AnsibleOptionsError(""- None of the provided paths was usable. Please specify a valid path with --roles-path"")
```"
-------------------------------------------------------------------------
"if not path_found:
    raise AnsibleOptionsError(""- None of the provided paths was usable. Please specify a valid path with --roles-path"")
"
-------------------------------------------------------------------------
"Recom
PRs: 39082, 39433"
-------------------------------------------------------------------------
=========================================================================
"err = '\n'
"
-------------------------------------------------------------------------
"```python
err = os.linesep
```"
-------------------------------------------------------------------------
"err = to_native(stderr or """")

if err and not err.endswith('\n'):
    err = '\n'
"
-------------------------------------------------------------------------
"Recom
PRs: 39019, 39430"
-------------------------------------------------------------------------
=========================================================================
"except AnsibleError:
except AnsibleError:
"
-------------------------------------------------------------------------
except ansible.errors.AnsibleError:
-------------------------------------------------------------------------
"except AnsibleError:
except AnsibleError:
"
-------------------------------------------------------------------------
"Recom
PRs: 39406, 39423"
-------------------------------------------------------------------------
=========================================================================
"except AnsibleError:
"
-------------------------------------------------------------------------
"        try:
            admin_users = self._connection._shell.get_option('admin_users')
            admin_users = ['root']  # plugin does not support admin users

        if self._play_context.become and self._play_context.become_user and self._play_context.become_user not in admin_users + [remote_user]:"
-------------------------------------------------------------------------
"except AnsibleError:
"
-------------------------------------------------------------------------
"Recom
PRs: 39406, 39423"
-------------------------------------------------------------------------
=========================================================================
"if self._diff or getattr(original_task, 'diff', False):
"
-------------------------------------------------------------------------
"if self._diff or getattr(original_task, 'diff', False):"
-------------------------------------------------------------------------
"if self._diff or getattr(original_task, 'diff', False):
"
-------------------------------------------------------------------------
"Recom
PRs: 39366, 39372"
-------------------------------------------------------------------------
=========================================================================
"if self._diff or getattr(original_task, 'diff', False):
"
-------------------------------------------------------------------------
"```python
if self._diff or getattr(original_task, 'diff', False):
```"
-------------------------------------------------------------------------
"if self._diff or getattr(original_task, 'diff', False):
"
-------------------------------------------------------------------------
"Recom
PRs: 39366, 39372"
-------------------------------------------------------------------------
=========================================================================
"if res is not None:
    for obj in res:
        if 'extattrs' in obj:
            obj['extattrs'] = flatten_extattrs(obj['extattrs'])
else:
    res = []
"
-------------------------------------------------------------------------
"```python
if res is not None:
    for obj in res:
        if 'extattrs' in obj:
            obj['extattrs'] = flatten_extattrs(obj['extattrs'])
else:
    res = []
```"
-------------------------------------------------------------------------
"if res is not None:
    for obj in res:
        if 'extattrs' in obj:
            obj['extattrs'] = flatten_extattrs(obj['extattrs'])
else:
    res = []
"
-------------------------------------------------------------------------
"Recom
PRs: 39027, 39091"
-------------------------------------------------------------------------
=========================================================================
"crt = module.run_command(""%s %s --account-key %s --csr %s ""
"
-------------------------------------------------------------------------
"```python
crt = module.run_command(""%s %s --account-key %s --csr %s"" % (acme_tiny_path, chain, self.accountkey_path, self.csr_path))
```"
-------------------------------------------------------------------------
"crt = module.run_command(""%s %s --account-key %s --csr %s ""
"
-------------------------------------------------------------------------
"Recom
PRs: 36739, 39018"
-------------------------------------------------------------------------
=========================================================================
"instances_to_add.append({'Id': target['Id'], 'Port': int(target.get('Port', module.params.get('port')))})
"
-------------------------------------------------------------------------
"instances_to_add.append({'Id': target['Id'], 'Port': int(target.get('Port', module.params.get('port')))})"
-------------------------------------------------------------------------
"instances_to_add.append({'Id': target['Id'], 'Port': int(target.get('Port', module.params.get('port')))})
"
-------------------------------------------------------------------------
"Recom
PRs: 38578, 38992"
-------------------------------------------------------------------------
=========================================================================
"return other._filename == self._filename and other._args == self._args and other._task._parent._uuid == self._task._parent._uuid
"
-------------------------------------------------------------------------
"```python
import os
import ansible.executor
from __future__ import task_include, task
import units.mock.loader
import ansible.compat.tests
import ansible.compat.tests.mock
import ansible.playbook.included_file

class IncludedFile:
    def __init__(self, filename, args, task):
        self._filename = filename
        self._args = args
        self._hosts = []
        self._task = task

    def __eq__(self, other):
        return other._filename == self._filename and other._args == self._args and other._task._parent._uuid == self._task._parent._uuid

    def __repr__(self):
        return ""%s (%s): %s"" % (self._filename, self._args, self._hosts)
```"
-------------------------------------------------------------------------
"return other._filename == self._filename and other._args == self._args and other._task._parent._uuid == self._task._parent._uuid
"
-------------------------------------------------------------------------
"Recom
PRs: 37083, 38981"
-------------------------------------------------------------------------
=========================================================================
"import pytest

"
-------------------------------------------------------------------------
"```python
import pytest
```"
-------------------------------------------------------------------------
"import pytest

"
-------------------------------------------------------------------------
"Recom
PRs: 37083, 38981"
-------------------------------------------------------------------------
=========================================================================
"@pytest.fixture
def mock_iterator():
mock_iterator = MagicMock(name='MockIterator')
mock_iterator._play = MagicMock(name='MockPlay')
return mock_iterator


est.fixture
mock_variable_manager():
# TODO: can we use a real VariableManager?
mock_variable_manager = MagicMock(name='MockVariableManager')
mock_variable_manager.get_vars.return_value = dict()
return mock_variable_manager


test_included_file_instantiation():
filename = 'somefile.yml'

inc_file = IncludedFile(filename=filename, args=[], task=None)

assert isinstance(inc_file, IncludedFile)
assert inc_file._filename == filename
assert inc_file._args == []
assert inc_file._task is None


test_process_include_results(mock_iterator, mock_variable_manager):
hostname = ""testhost1""
hostname2 = ""testhost2""

parent_task_ds = {'debug': 'msg=foo'}
parent_task = Task.load(parent_task_ds)

task_ds = {'include': 'include_test.yml'}
loaded_task = TaskInclude.load(task_ds, task_include=parent_task)

return_data = {'include': 'include_test.yml'}
# The task in the TaskResult has to be a TaskInclude so it has a .static attr
result1 = task_result.TaskResult(host=hostname, task=loaded_task, return_data=return_data)
result2 = task_result.TaskResult(host=hostname2, task=loaded_task, return_data=return_data)
results = [result1, result2]

fake_loader = DictDataLoader({'include_test.yml': """"})

res = IncludedFile.process_include_results(results, mock_iterator, fake_loader, mock_variable_manager)
assert isinstance(res, list)
assert len(res) == 1
assert res[0]._filename == os.path.join(os.getcwd(), 'include_test.yml')
assert res[0]._hosts == ['testhost1', 'testhost2']
assert res[0]._args == {}

test_process_include_diff_files(mock_iterator, mock_variable_manager):
hostname = ""testhost1""
hostname2 = ""testhost2""
parent_task_ds = {'debug': 'msg=foo'}
parent_task = Task.load(parent_task_ds)
task_ds = {'include': 'include_test.yml'}
loaded_task = TaskInclude.load(task_ds, task_include=parent_task)
child_task_ds = {'include': 'other_include_test.yml'}
loaded_child_task = TaskInclude.load(child_task_ds, task_include=loaded_task)
return_data = {'include': 'include_test.yml'}
# The task in the TaskResult has to be a TaskInclude so it has a .static attr
result1 = task_result.TaskResult(host=hostname, task=loaded_task, return_data=return_data)
return_data = {'include': 'other_include_test.yml'}
result2 = task_result.TaskResult(host=hostname2, task=loaded_child_task, return_data=return_data)
results = [result1, result2]
fake_loader = DictDataLoader({'include_test.yml': """",
                              'other_include_test.yml': """"})
res = IncludedFile.process_include_results(results, mock_iterator, fake_loader, mock_variable_manager)
assert isinstance(res, list)
assert res[0]._filename == os.path.join(os.getcwd(), 'include_test.yml')
assert res[1]._filename == os.path.join(os.getcwd(), 'other_include_test.yml')
assert res[0]._hosts == ['testhost1']
assert res[1]._hosts == ['testhost2']
assert res[0]._args == {}
assert res[1]._args == {}
test_process_include_simulate_free(mock_iterator, mock_variable_manager):
hostname = ""testhost1""
hostname2 = ""testhost2""
parent_task_ds = {'debug': 'msg=foo'}
parent_task1 = Task.load(parent_task_ds)
parent_task2 = Task.load(parent_task_ds)
task_ds = {'include': 'include_test.yml'}
loaded_task1 = TaskInclude.load(task_ds, task_include=parent_task1)
loaded_task2 = TaskInclude.load(task_ds, task_include=parent_task2)
return_data = {'include': 'include_test.yml'}
# The task in the TaskResult has to be a TaskInclude so it has a .static attr
result1 = task_result.TaskResult(host=hostname, task=loaded_task1, return_data=return_data)
result2 = task_result.TaskResult(host=hostname2, task=loaded_task2, return_data=return_data)
results = [result1, result2]
fake_loader = DictDataLoader({'include_test.yml': """"})
res = IncludedFile.process_include_results(results, mock_iterator, fake_loader, mock_variable_manager)
assert isinstance(res, list)
assert len(res) == 2
assert res[0]._filename == os.path.join(os.getcwd(), 'include_test.yml')
assert res[1]._filename == os.path.join(os.getcwd(), 'include_test.yml')
assert res[0]._hosts == ['testhost1']
assert res[1]._hosts == ['testhost2']
assert res[0]._args == {}
assert res[1]._args == {}
"
-------------------------------------------------------------------------
"```python
import os
import pytest
from unittest.mock import MagicMock
from ansible.playbook.included_file import IncludedFile
from ansible.playbook.task import Task
from ansible.playbook.task_include import TaskInclude
from ansible.executor.task_result import TaskResult
from units.mock.loader import DictDataLoader
from ansible.compat.tests import mock


@pytest.fixture
def mock_iterator():
    mock_iterator = MagicMock(name='MockIterator')
    mock_iterator._play = MagicMock(name='MockPlay')
    return mock_iterator

@pytest.fixture
def mock_variable_manager():
    mock_variable_manager = MagicMock(name='MockVariableManager')
    mock_variable_manager.get_vars.return_value = dict()
    return mock_variable_manager

def test_included_file_instantiation():
    filename = 'somefile.yml'
    inc_file = IncludedFile(filename=filename, args=[], task=None)
    assert isinstance(inc_file, IncludedFile)
    assert inc_file._filename == filename
    assert inc_file._args == []
    assert inc_file._task is None

def test_process_include_results(mock_iterator, mock_variable_manager):
    hostname = ""testhost1""
    hostname2 = ""testhost2""
    parent_task_ds = {'debug': 'msg=foo'}
    parent_task = Task.load(parent_task_ds)
    task_ds = {'include': 'include_test.yml'}
    loaded_task = TaskInclude.load(task_ds, task_include=parent_task)
    return_data = {'include': 'include_test.yml'}
    result1 = TaskResult(host=hostname, task=loaded_task, return_data=return_data)
    result2 = TaskResult(host=hostname2, task=loaded_task, return_data=return_data)
    results = [result1, result2]
    fake_loader = DictDataLoader({'include_test.yml': """"})
    res = IncludedFile.process_include_results(results, mock_iterator, fake_loader, mock_variable_manager)
    assert isinstance(res, list)
    assert len(res) == 1
    assert res[0]._filename == os.path.join(os.getcwd(), 'include_test.yml')
    assert res[0]._hosts == ['testhost1', 'testhost2']
    assert res[0]._args == {}

def test_process_include_diff_files(mock_iterator, mock_variable_manager):
    hostname = ""testhost1""
    hostname2 = ""testhost2""
    parent_task_ds = {'debug': 'msg=foo'}
    parent_task = Task.load(parent_task_ds)
    task_ds = {'include': 'include_test.yml'}
    loaded_task = TaskInclude.load(task_ds, task_include=parent_task)
    child_task_ds = {'include': 'other_include_test.yml'}
    loaded_child_task = TaskInclude.load(child_task_ds, task_include=loaded_task)
    return_data = {'include': 'include_test.yml'}
    result1 = TaskResult(host=hostname, task=loaded_task, return_data=return_data)
    return_data = {'include': 'other_include_test.yml'}
    result2 = TaskResult(host=hostname2, task=loaded_child_task, return_data=return_data)
    results = [result1, result2]
    fake_loader = DictDataLoader({'include_test.yml': """", 'other_include_test.yml': """"})
    res = IncludedFile.process_include_results(results, mock_iterator, fake_loader, mock_variable_manager)
    assert isinstance(res, list)
    assert res[0]._filename == os.path.join(os.getcwd(), 'include_test.yml')
    assert res[1]._filename == os.path.join(os.getcwd(), 'other_include_test.yml')
    assert res[0]._hosts == ['testhost1']
    assert res[1]._hosts == ['testhost2']
    assert res[0]._args == {}
    assert res[1]._args == {}

def test_process_include_simulate_free(mock_iterator, mock_variable_manager):
    hostname = ""testhost1""
    hostname2 = ""testhost2""
    parent_task_ds = {'debug': 'msg=foo'}
    parent_task1 = Task.load(parent_task_ds)
    parent_task2 = Task.load(parent_task_ds)
    task_ds = {'include': 'include_test.yml'}
    loaded_task1 = TaskInclude.load(task_ds, task_include=parent_task1)
    loaded_task2 = TaskInclude.load(task_ds, task_include=parent_task2)
    return_data = {'include': 'include_test.yml'}
    result1 = TaskResult(host=hostname, task=loaded_task1, return_data=return_data)
    result2 = TaskResult(host=hostname2, task=loaded_task2, return_data=return_data)
    results = [result1, result2]
    fake_loader = DictDataLoader({'include_test.yml': """"})
    res = IncludedFile.process_include_results(results, mock_iterator, fake_loader, mock_variable_manager)
    assert isinstance(res, list)
    assert len(res) == 2
    assert res[0]._filename == os.path.join(os.getcwd(), 'include_test.yml')
    assert res[1]._filename == os.path.join(os.getcwd(), 'include_test.yml')
    assert res[0]._hosts == ['testhost1']
    assert res[1]._hosts == ['testhost2']
    assert res[0]._args == {}
    assert res[1]._args == {}
```"
-------------------------------------------------------------------------
"@pytest.fixture
def mock_iterator():
mock_iterator = MagicMock(name='MockIterator')
mock_iterator._play = MagicMock(name='MockPlay')
return mock_iterator


est.fixture
mock_variable_manager():
# TODO: can we use a real VariableManager?
mock_variable_manager = MagicMock(name='MockVariableManager')
mock_variable_manager.get_vars.return_value = dict()
return mock_variable_manager


test_included_file_instantiation():
filename = 'somefile.yml'

inc_file = IncludedFile(filename=filename, args=[], task=None)

assert isinstance(inc_file, IncludedFile)
assert inc_file._filename == filename
assert inc_file._args == []
assert inc_file._task is None


test_process_include_results(mock_iterator, mock_variable_manager):
hostname = ""testhost1""
hostname2 = ""testhost2""

parent_task_ds = {'debug': 'msg=foo'}
parent_task = Task.load(parent_task_ds)

task_ds = {'include': 'include_test.yml'}
loaded_task = TaskInclude.load(task_ds, task_include=parent_task)

return_data = {'include': 'include_test.yml'}
# The task in the TaskResult has to be a TaskInclude so it has a .static attr
result1 = task_result.TaskResult(host=hostname, task=loaded_task, return_data=return_data)
result2 = task_result.TaskResult(host=hostname2, task=loaded_task, return_data=return_data)
results = [result1, result2]

fake_loader = DictDataLoader({'include_test.yml': """"})

res = IncludedFile.process_include_results(results, mock_iterator, fake_loader, mock_variable_manager)
assert isinstance(res, list)
assert len(res) == 1
assert res[0]._filename == os.path.join(os.getcwd(), 'include_test.yml')
assert res[0]._hosts == ['testhost1', 'testhost2']
assert res[0]._args == {}

test_process_include_diff_files(mock_iterator, mock_variable_manager):
hostname = ""testhost1""
hostname2 = ""testhost2""
parent_task_ds = {'debug': 'msg=foo'}
parent_task = Task.load(parent_task_ds)
task_ds = {'include': 'include_test.yml'}
loaded_task = TaskInclude.load(task_ds, task_include=parent_task)
child_task_ds = {'include': 'other_include_test.yml'}
loaded_child_task = TaskInclude.load(child_task_ds, task_include=loaded_task)
return_data = {'include': 'include_test.yml'}
# The task in the TaskResult has to be a TaskInclude so it has a .static attr
result1 = task_result.TaskResult(host=hostname, task=loaded_task, return_data=return_data)
return_data = {'include': 'other_include_test.yml'}
result2 = task_result.TaskResult(host=hostname2, task=loaded_child_task, return_data=return_data)
results = [result1, result2]
fake_loader = DictDataLoader({'include_test.yml': """",
                              'other_include_test.yml': """"})
res = IncludedFile.process_include_results(results, mock_iterator, fake_loader, mock_variable_manager)
assert isinstance(res, list)
assert res[0]._filename == os.path.join(os.getcwd(), 'include_test.yml')
assert res[1]._filename == os.path.join(os.getcwd(), 'other_include_test.yml')
assert res[0]._hosts == ['testhost1']
assert res[1]._hosts == ['testhost2']
assert res[0]._args == {}
assert res[1]._args == {}
test_process_include_simulate_free(mock_iterator, mock_variable_manager):
hostname = ""testhost1""
hostname2 = ""testhost2""
parent_task_ds = {'debug': 'msg=foo'}
parent_task1 = Task.load(parent_task_ds)
parent_task2 = Task.load(parent_task_ds)
task_ds = {'include': 'include_test.yml'}
loaded_task1 = TaskInclude.load(task_ds, task_include=parent_task1)
loaded_task2 = TaskInclude.load(task_ds, task_include=parent_task2)
return_data = {'include': 'include_test.yml'}
# The task in the TaskResult has to be a TaskInclude so it has a .static attr
result1 = task_result.TaskResult(host=hostname, task=loaded_task1, return_data=return_data)
result2 = task_result.TaskResult(host=hostname2, task=loaded_task2, return_data=return_data)
results = [result1, result2]
fake_loader = DictDataLoader({'include_test.yml': """"})
res = IncludedFile.process_include_results(results, mock_iterator, fake_loader, mock_variable_manager)
assert isinstance(res, list)
assert len(res) == 2
assert res[0]._filename == os.path.join(os.getcwd(), 'include_test.yml')
assert res[1]._filename == os.path.join(os.getcwd(), 'include_test.yml')
assert res[0]._hosts == ['testhost1']
assert res[1]._hosts == ['testhost2']
assert res[0]._args == {}
assert res[1]._args == {}
"
-------------------------------------------------------------------------
"Recom
PRs: 37083, 38981"
-------------------------------------------------------------------------
=========================================================================
"
# The next 2 imports ``docker.models`` and ``docker.ssladapter`` are used
# to ensure the user does not have both ``docker`` and ``docker-py`` modules
# installed, as they utilize the same namespace are are incompatible
try:
# docker
import docker.models
HAS_DOCKER_MODELS = True
pt ImportError:
HAS_DOCKER_MODELS = False


# docker-py
import docker.ssladapter
HAS_DOCKER_SSLADAPTER = True
pt ImportError:
HAS_DOCKER_SSLADAPTER = False


"
-------------------------------------------------------------------------
"# The next 2 imports 'docker.models' and 'docker.ssladapter' are used
# to ensure the user does not have both 'docker' and 'docker-py' modules
# installed, as they utilize the same namespace and are incompatible

try:
    import docker.models
    HAS_DOCKER_MODELS = True
except ImportError:
    HAS_DOCKER_MODELS = False

try:
    import docker.ssladapter
    HAS_DOCKER_SSLADAPTER = True
except ImportError:
    HAS_DOCKER_SSLADAPTER = False"
-------------------------------------------------------------------------
"
# The next 2 imports ``docker.models`` and ``docker.ssladapter`` are used
# to ensure the user does not have both ``docker`` and ``docker-py`` modules
# installed, as they utilize the same namespace are are incompatible
try:
# docker
import docker.models
HAS_DOCKER_MODELS = True
pt ImportError:
HAS_DOCKER_MODELS = False


# docker-py
import docker.ssladapter
HAS_DOCKER_SSLADAPTER = True
pt ImportError:
HAS_DOCKER_SSLADAPTER = False


"
-------------------------------------------------------------------------
"Recom
PRs: 38884, 38889"
-------------------------------------------------------------------------
=========================================================================
"if HAS_DOCKER_MODELS and HAS_DOCKER_SSLADAPTER:
    self.fail(""Cannot have both the docker-py and docker python modules installed together as they use the same namespace and ""
              ""cause a corrupt installation. Please uninstall both packages, and re-install only the docker-py or docker python module"")

"
-------------------------------------------------------------------------
"```python
if HAS_DOCKER_MODELS and HAS_DOCKER_SSLADAPTER:
    self.fail(""Cannot have both the docker-py and docker python modules installed together as they use the same namespace and ""
              ""cause a corrupt installation. Please uninstall both packages, and re-install only the docker-py or docker python module"")
```"
-------------------------------------------------------------------------
"if HAS_DOCKER_MODELS and HAS_DOCKER_SSLADAPTER:
    self.fail(""Cannot have both the docker-py and docker python modules installed together as they use the same namespace and ""
              ""cause a corrupt installation. Please uninstall both packages, and re-install only the docker-py or docker python module"")

"
-------------------------------------------------------------------------
"Recom
PRs: 38884, 38889"
-------------------------------------------------------------------------
=========================================================================
"# If parent is static, we can grab attrs from the parent
# otherwise, defer to the grandparent
if getattr(self._parent, 'statically_loaded', True):
    _parent = self._parent
else:
    _parent = self._parent._parent

if _parent and (value is None or extend):
        if getattr(_parent, 'statically_loaded', True):
            if hasattr(_parent, '_get_parent_attribute'):
                parent_value = _parent._get_parent_attribute(attr)
                parent_value = _parent._attributes.get(attr, None)
"
-------------------------------------------------------------------------
"```python
if getattr(self._parent, 'statically_loaded', True):
    _parent = self._parent
else:
    _parent = self._parent._parent

if _parent and (value is None or extend):
    if getattr(_parent, 'statically_loaded', True):
        if hasattr(_parent, '_get_parent_attribute'):
            parent_value = _parent._get_parent_attribute(attr)
            parent_value = _parent._attributes.get(attr, None)
```"
-------------------------------------------------------------------------
"# If parent is static, we can grab attrs from the parent
# otherwise, defer to the grandparent
if getattr(self._parent, 'statically_loaded', True):
    _parent = self._parent
else:
    _parent = self._parent._parent

if _parent and (value is None or extend):
        if getattr(_parent, 'statically_loaded', True):
            if hasattr(_parent, '_get_parent_attribute'):
                parent_value = _parent._get_parent_attribute(attr)
                parent_value = _parent._attributes.get(attr, None)
"
-------------------------------------------------------------------------
"Recom
PRs: 38827, 38847"
-------------------------------------------------------------------------
=========================================================================
"# If parent is static, we can grab attrs from the parent
# otherwise, defer to the grandparent
if getattr(self._parent, 'statically_loaded', True):
    _parent = self._parent
else:
    _parent = self._parent._parent

if _parent and (value is None or extend):
    if getattr(_parent, 'statically_loaded', True):
        if attr != 'vars' and hasattr(_parent, '_get_parent_attribute'):
            parent_value = _parent._get_parent_attribute(attr)
            parent_value = _parent._attributes.get(attr, None)
"
-------------------------------------------------------------------------
"```python
if getattr(self._parent, 'statically_loaded', True):
    _parent = self._parent
else:
    _parent = self._parent._parent

if _parent and (value is None or extend):
    if getattr(_parent, 'statically_loaded', True):
        if attr != 'vars' and hasattr(_parent, '_get_parent_attribute'):
            parent_value = _parent._get_parent_attribute(attr)
```"
-------------------------------------------------------------------------
"# If parent is static, we can grab attrs from the parent
# otherwise, defer to the grandparent
if getattr(self._parent, 'statically_loaded', True):
    _parent = self._parent
else:
    _parent = self._parent._parent

if _parent and (value is None or extend):
    if getattr(_parent, 'statically_loaded', True):
        if attr != 'vars' and hasattr(_parent, '_get_parent_attribute'):
            parent_value = _parent._get_parent_attribute(attr)
            parent_value = _parent._attributes.get(attr, None)
"
-------------------------------------------------------------------------
"Recom
PRs: 38827, 38847"
-------------------------------------------------------------------------
=========================================================================
"target_block = state._blocks[state.cur_block].copy()
"
-------------------------------------------------------------------------
"```python
import copy

target_block = copy.copy(state._blocks[state.cur_block])
```"
-------------------------------------------------------------------------
"target_block = state._blocks[state.cur_block].copy()
"
-------------------------------------------------------------------------
"Recom
PRs: 38747, 38829"
-------------------------------------------------------------------------
=========================================================================
"target_block = state._blocks[state.cur_block].copy()
"
-------------------------------------------------------------------------
target_block = copy.deepcopy(state._blocks[state.cur_block])
-------------------------------------------------------------------------
"target_block = state._blocks[state.cur_block].copy()
"
-------------------------------------------------------------------------
"Recom
PRs: 38747, 38829"
-------------------------------------------------------------------------
=========================================================================
"target_block = state._blocks[state.cur_block].copy()
"
-------------------------------------------------------------------------
"```python
target_block = state._blocks[state.cur_block].copy()
```"
-------------------------------------------------------------------------
"target_block = state._blocks[state.cur_block].copy()
"
-------------------------------------------------------------------------
"Recom
PRs: 38747, 38829"
-------------------------------------------------------------------------
=========================================================================
"def __ne__(self, other):
    '''object comparison based on _uuid'''
    return self._uuid != other._uuid

"
-------------------------------------------------------------------------
"```python
def __ne__(self, other):
    '''object comparison based on _uuid'''
    return self._uuid != other._uuid
```"
-------------------------------------------------------------------------
"def __ne__(self, other):
    '''object comparison based on _uuid'''
    return self._uuid != other._uuid

"
-------------------------------------------------------------------------
"Recom
PRs: 38747, 38829"
-------------------------------------------------------------------------
=========================================================================
"if task._parent == new_block:
    # If task._parent is the same as new_block, just replace it
    new_task._parent = new_block
    # task may not be a direct child of new_block, search for the correct place to insert new_block
    cur_obj = new_task._parent
    while cur_obj._parent and cur_obj._parent != new_block:
        cur_obj = cur_obj._parent

    cur_obj._parent = new_block
"
-------------------------------------------------------------------------
"```python
if task._parent == new_block:
    # If task._parent is the same as new_block, just replace it
    new_task._parent = new_block
    # task may not be a direct child of new_block, search for the correct place to insert new_block
    cur_obj = new_task._parent
    while cur_obj._parent and cur_obj._parent != new_block:
        cur_obj = cur_obj._parent

    cur_obj._parent = new_block
```"
-------------------------------------------------------------------------
"if task._parent == new_block:
    # If task._parent is the same as new_block, just replace it
    new_task._parent = new_block
    # task may not be a direct child of new_block, search for the correct place to insert new_block
    cur_obj = new_task._parent
    while cur_obj._parent and cur_obj._parent != new_block:
        cur_obj = cur_obj._parent

    cur_obj._parent = new_block
"
-------------------------------------------------------------------------
"Recom
PRs: 38747, 38829"
-------------------------------------------------------------------------
=========================================================================
"new_me._parent = self._parent.copy(exclude_tasks=True)
"
-------------------------------------------------------------------------
"```python
new_me._parent = self._parent.copy(exclude_tasks=True) if self._parent else None
```"
-------------------------------------------------------------------------
"new_me._parent = self._parent.copy(exclude_tasks=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 38747, 38829"
-------------------------------------------------------------------------
=========================================================================
"new_task_block = task_block.copy()
"
-------------------------------------------------------------------------
"```python
new_task_block = task_block.copy()
```"
-------------------------------------------------------------------------
"new_task_block = task_block.copy()
"
-------------------------------------------------------------------------
"Recom
PRs: 38747, 38829"
-------------------------------------------------------------------------
=========================================================================
"import warnings

"
-------------------------------------------------------------------------
"```python
import os
import os.path
import re
import sys
from collections import defaultdict
from distutils.command.build_scripts import build_scripts as BuildScripts
from distutils.command.sdist import sdist as SDist
import warnings
```"
-------------------------------------------------------------------------
"import warnings

"
-------------------------------------------------------------------------
"Recom
PRs: 38523, 38700"
-------------------------------------------------------------------------
=========================================================================
"ignore_warning_regex = (
    r""Unknown distribution option: '(project_urls|python_requires)'""
)
warnings.filterwarnings(
    'ignore',
    message=ignore_warning_regex,
    category=UserWarning,
    module='distutils.dist',
)
warnings.resetwarnings()
"
-------------------------------------------------------------------------
"ignore_warning_regex = (
    r""Unknown distribution option: '(project_urls|python_requires)'""
)
warnings.filterwarnings(
    'ignore',
    message=ignore_warning_regex,
    category=UserWarning,
    module='distutils.dist',
)
warnings.resetwarnings()"
-------------------------------------------------------------------------
"ignore_warning_regex = (
    r""Unknown distribution option: '(project_urls|python_requires)'""
)
warnings.filterwarnings(
    'ignore',
    message=ignore_warning_regex,
    category=UserWarning,
    module='distutils.dist',
)
warnings.resetwarnings()
"
-------------------------------------------------------------------------
"Recom
PRs: 38523, 38700"
-------------------------------------------------------------------------
=========================================================================
"- The hostname or IP address of the vSphere vCenter or ESXi server.
- The username of the vSphere vCenter or ESXi server.
- The password of the vSphere vCenter or ESXi server.
"
-------------------------------------------------------------------------
"```python
class ModuleDocFragment(object):
 options:
     hostname:
       description:
       - The hostname or IP address of the vSphere vCenter or ESXi server.
       - If the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.
       - Environment variable supported added in version 2.6.
       required: False
     username:
       description:
       - The username of the vSphere vCenter or ESXi server.
       - If the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.
       - Environment variable supported added in version 2.6.
       required: False
       aliases: ['user', 'admin']
     password:
       description:
       - The password of the vSphere vCenter or ESXi server.
       - If the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.
       - Environment variable supported added in version 2.6.
       required: False
```"
-------------------------------------------------------------------------
"- The hostname or IP address of the vSphere vCenter or ESXi server.
- The username of the vSphere vCenter or ESXi server.
- The password of the vSphere vCenter or ESXi server.
"
-------------------------------------------------------------------------
"Recom
PRs: 38668, 38673"
-------------------------------------------------------------------------
=========================================================================
"title.append('by *%s*' % self.get_option('remote_user'))
"
-------------------------------------------------------------------------
"```python
title.append('by *%s*' % self.get_option('remote_user'))
```"
-------------------------------------------------------------------------
"title.append('by *%s*' % self.get_option('remote_user'))
"
-------------------------------------------------------------------------
"Recom
PRs: 38268, 38286"
-------------------------------------------------------------------------
=========================================================================
"domain_rn = 'vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec
from __future__ import print_function, absolute_import
from ansible.module_utils.basic import AnsibleModule

def main():
    elif domain_type == 'vmm':
        domain_class = 'vmmDomP'
        domain_mo = 'uni/vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)

    domain_rn = 'vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)
 
    # Ensure that querying all objects works when only domain_type is provided
    if domain is None:
```"
-------------------------------------------------------------------------
"domain_rn = 'vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)
"
-------------------------------------------------------------------------
"Recom
PRs: 38245, 38249"
-------------------------------------------------------------------------
=========================================================================
"data = self._loader.load(data, file_name=filename, show_content=show_content)
"
-------------------------------------------------------------------------
"```python
data = self._loader.load(data, file_name=filename, show_content=show_content, errors='surrogate_or_strict')
```"
-------------------------------------------------------------------------
"data = self._loader.load(data, file_name=filename, show_content=show_content)
"
-------------------------------------------------------------------------
"Recom
PRs: 38194, 38225"
-------------------------------------------------------------------------
=========================================================================
"- ""To use this module, it has to be executed twice. Either as two
   different tasks in the same run or during two runs. Note that the output
   of the first run needs to be recorded and passed to the second run as the
   module argument C(data).""
   U(https://tools.ietf.org/html/draft-ietf-acme-acme-09#section-8).
   Also, consider the examples provided for this module.""
"
-------------------------------------------------------------------------
"To use this module, it has to be executed twice, either as two different tasks in the same run, or during two runs. Note that the output of the first run needs to be recorded and passed to the second run as the module argument `data`. For more details, refer to the documentation at [IETF ACME - Section 8](https://tools.ietf.org/html/draft-ietf-acme-acme-09#section-8). Ensure to review the provided examples for this module."
-------------------------------------------------------------------------
"- ""To use this module, it has to be executed twice. Either as two
   different tasks in the same run or during two runs. Note that the output
   of the first run needs to be recorded and passed to the second run as the
   module argument C(data).""
"
-------------------------------------------------------------------------
"Recom
PRs: 38135, 38160"
-------------------------------------------------------------------------
=========================================================================
"- ""The data to validate ongoing challenges. This must be specified for
   the second run of the module only.""
   of this module. See the examples for more details.""
"
-------------------------------------------------------------------------
"""The data to validate ongoing challenges. This must be specified for the second run of the module only. See the examples for more details."""
-------------------------------------------------------------------------
"U(https://tools.ietf.org/html/draft-ietf-acme-acme-09#section-8).
Also, consider the examples provided for this module.""
"
-------------------------------------------------------------------------
"Recom
PRs: 38135, 38160"
-------------------------------------------------------------------------
=========================================================================
"if self.action in ['create', 'encrypt', 'encrypt_string', 'rekey', 'edit']:
"
-------------------------------------------------------------------------
"```python
if self.action in ['create', 'encrypt', 'encrypt_string', 'rekey']:
```"
-------------------------------------------------------------------------
"if self.action in ['create', 'encrypt', 'encrypt_string', 'rekey', 'edit']:
"
-------------------------------------------------------------------------
"Recom
PRs: 35923, 38003"
-------------------------------------------------------------------------
=========================================================================
"if self.action in ['encrypt', 'encrypt_string', 'create']:
"
-------------------------------------------------------------------------
"```python
class VaultCLI(CLI):
    if not vault_secrets:
        raise AnsibleOptionsError(""A vault password is required to use Ansible's Vault"")
     
    encrypt_vault_id = None
    # no --encrypt-vault-id self.options.encrypt_vault_id for 'edit'
    if self.action in ['encrypt', 'encrypt_string', 'create']:
        encrypt_vault_id = None
```"
-------------------------------------------------------------------------
"if self.action in ['encrypt', 'encrypt_string', 'create']:
"
-------------------------------------------------------------------------
"Recom
PRs: 35923, 38003"
-------------------------------------------------------------------------
=========================================================================
"plaintext, vault_id, vault_secret = self.decrypt_and_get_vault_id(vaulttext, filename=filename)
"
-------------------------------------------------------------------------
"plaintext, vault_id, vault_secret = self.decrypt_and_get_vault_id(vaulttext)"
-------------------------------------------------------------------------
"plaintext, vault_id, vault_secret = self.decrypt_and_get_vault_id(vaulttext, filename=filename)
"
-------------------------------------------------------------------------
"Recom
PRs: 35923, 38003"
-------------------------------------------------------------------------
=========================================================================
":returns: a byte string containing the decrypted data and the vault-id vault-secret that was used
"
-------------------------------------------------------------------------
"```python
        """"""
        b_vaulttext = to_bytes(vaulttext, errors='strict', encoding='utf-8')
        :returns: a byte string containing the decrypted data and the vault-id vault-secret that was used
        """"""
```"
-------------------------------------------------------------------------
":returns: a byte string containing the decrypted data and the vault-id vault-secret that was used
"
-------------------------------------------------------------------------
"Recom
PRs: 35923, 38003"
-------------------------------------------------------------------------
=========================================================================
"vault_secret_used = None
"
-------------------------------------------------------------------------
vault_secret_used = None
-------------------------------------------------------------------------
"vault_secret_used = None
"
-------------------------------------------------------------------------
"Recom
PRs: 35923, 38003"
-------------------------------------------------------------------------
=========================================================================
"vault_secret_used = vault_secret
"
-------------------------------------------------------------------------
"```python
vault_secret_used = vault_secret
```"
-------------------------------------------------------------------------
"vault_secret_used = vault_secret
"
-------------------------------------------------------------------------
"Recom
PRs: 35923, 38003"
-------------------------------------------------------------------------
=========================================================================
"return b_plaintext, vault_id_used, vault_secret_used
"
-------------------------------------------------------------------------
"```python
class VaultLib:
    return b_plaintext, vault_id_used, vault_secret_used
    msg += "" on %s"" % to_native(filename)
    raise AnsibleError(msg)
```"
-------------------------------------------------------------------------
"return b_plaintext, vault_id_used, vault_secret_used
"
-------------------------------------------------------------------------
"Recom
PRs: 35923, 38003"
-------------------------------------------------------------------------
=========================================================================
"vault_id_used = None
vault_secret_used = None
"
-------------------------------------------------------------------------
"```python
import os
import io
import __future__
import binascii
import ansible.module_utils
import units.mock.loader
import pytest
import ansible.compat.tests
import ansible
import tempfile
import units.mock.vault_helper
import ansible.compat.tests.mock
import ansible.parsing
import ansible.module_utils._text

class VaultEditor:
    def edit_file(self, filename):
        # follow the symlink
        filename = self._real_path(filename)
        vault_id_used = None
        vault_secret_used = None
        self._edit_file_helper(filename, secret, vault_id=vault_id_used)
```"
-------------------------------------------------------------------------
"vault_id_used = None
vault_secret_used = None
"
-------------------------------------------------------------------------
"Recom
PRs: 35923, 38003"
-------------------------------------------------------------------------
=========================================================================
"plaintext, vault_id_used, vault_secret_used = self.vault.decrypt_and_get_vault_id(vaulttext)
"
-------------------------------------------------------------------------
"```python
plaintext, vault_id_used, vault_secret_used = self.vault.decrypt_and_get_vault_id(vaulttext)
```"
-------------------------------------------------------------------------
"plaintext, vault_id_used, vault_secret_used = self.vault.decrypt_and_get_vault_id(vaulttext)
"
-------------------------------------------------------------------------
"Recom
PRs: 35923, 38003"
-------------------------------------------------------------------------
=========================================================================
"# Keep the same vault-id (and version) as in the header
    self._edit_file_helper(filename, vault_secret_used, existing_data=plaintext,
                           force_save=True, vault_id=vault_id)
    self._edit_file_helper(filename, vault_secret_used, existing_data=plaintext,
                           force_save=False, vault_id=vault_id)
"
-------------------------------------------------------------------------
"```python
# Keep the same vault-id (and version) as in the header
self._edit_file_helper(filename, vault_secret_used, existing_data=plaintext,
                       force_save=True, vault_id=vault_id, cipher_name=cipher_name)
self._edit_file_helper(filename, vault_secret_used, existing_data=plaintext,
                       force_save=False, vault_id=vault_id, cipher_name=cipher_name)
```"
-------------------------------------------------------------------------
"# Keep the same vault-id (and version) as in the header
    self._edit_file_helper(filename, vault_secret_used, existing_data=plaintext,
                           force_save=True, vault_id=vault_id)
    self._edit_file_helper(filename, vault_secret_used, existing_data=plaintext,
                           force_save=False, vault_id=vault_id)
"
-------------------------------------------------------------------------
"Recom
PRs: 35923, 38003"
-------------------------------------------------------------------------
=========================================================================
"plaintext, vault_id_used, _dummy = self.vault.decrypt_and_get_vault_id(vaulttext)
"
-------------------------------------------------------------------------
"```python
import os
import io
from binascii import unhexlify
from ansible.module_utils import basic
import pytest
from ansible.compat.tests.mock import MagicMock
import ansible
import tempfile
from units.mock import vault_helper

plaintext, vault_secret_used, _dummy = self.vault.decrypt_and_get_vault_id(vaulttext)
```"
-------------------------------------------------------------------------
"plaintext, vault_id_used, _dummy = self.vault.decrypt_and_get_vault_id(vaulttext)
"
-------------------------------------------------------------------------
"Recom
PRs: 35923, 38003"
-------------------------------------------------------------------------
=========================================================================
"def test_decrypt_and_get_vault_id(self):
    b_expected_plaintext = to_bytes('foo bar\n')
    vaulttext = '''$ANSIBLE_VAULT;1.2;AES256;ansible_devel
6435333934613466373335363332373764363365633035303466643439313864663837393234
656363343637313962633731333237313636633534630a386264363438363362326132363239
3166646664346264383934393935653933316263333838386362633534326664646166663736
303664383765650a356637643633366663643566353036303162386237336233393065393164
'''

    vault_secrets = self._vault_secrets_from_password('ansible_devel', 'ansible')
    v = vault.VaultLib(vault_secrets)

    b_vaulttext = to_bytes(vaulttext)

    b_plaintext, vault_id_used, vault_secret_used = v.decrypt_and_get_vault_id(b_vaulttext)

    self.assertEqual(b_expected_plaintext, b_plaintext)
    self.assertEqual(vault_id_used, 'ansible_devel')
    self.assertEqual(vault_secret_used.text, 'ansible')

"
-------------------------------------------------------------------------
"```python
def test_decrypt_and_get_vault_id(self):
    b_expected_plaintext = to_bytes('foo bar\n')
    vaulttext = '''$ANSIBLE_VAULT;1.2;AES256;ansible_devel
6435333934613466373335363332373764363365633035303466643439313864663837393234
656363343637313962633731333237313636633534630a386264363438363362326132363239
3166646664346264383934393935653933316263333838386362633534326664646166663736
303664383765650a356637643633366663643566353036303162386237336233393065393164
'''

    vault_secrets = self._vault_secrets_from_password('ansible_devel', 'ansible')
    v = vault.VaultLib(vault_secrets)

    b_vaulttext = to_bytes(vaulttext)

    b_plaintext, vault_id_used, vault_secret_used = v.decrypt_and_get_vault_id(b_vaulttext)

    self.assertEqual(b_expected_plaintext, b_plaintext)
    self.assertEqual(vault_id_used, 'ansible_devel')
    self.assertEqual(vault_secret_used.text, 'ansible')
```"
-------------------------------------------------------------------------
"def test_decrypt_and_get_vault_id(self):
    b_expected_plaintext = to_bytes('foo bar\n')
    vaulttext = '''$ANSIBLE_VAULT;1.2;AES256;ansible_devel
6435333934613466373335363332373764363365633035303466643439313864663837393234
656363343637313962633731333237313636633534630a386264363438363362326132363239
3166646664346264383934393935653933316263333838386362633534326664646166663736
303664383765650a356637643633366663643566353036303162386237336233393065393164
'''

    vault_secrets = self._vault_secrets_from_password('ansible_devel', 'ansible')
    v = vault.VaultLib(vault_secrets)

    b_vaulttext = to_bytes(vaulttext)

    b_plaintext, vault_id_used, vault_secret_used = v.decrypt_and_get_vault_id(b_vaulttext)

    self.assertEqual(b_expected_plaintext, b_plaintext)
    self.assertEqual(vault_id_used, 'ansible_devel')
    self.assertEqual(vault_secret_used.text, 'ansible')

"
-------------------------------------------------------------------------
"Recom
PRs: 35923, 38003"
-------------------------------------------------------------------------
=========================================================================
"# We still want to continue even if dmidecode is not available
if dmi_bin is not None:
    (rc, out, err) = self.module.run_command('%s -s system-product-name' % dmi_bin)
    if rc == 0:
        # Strip out commented lines (specific dmidecode output)
        vendor_name = ''.join([line.strip() for line in out.splitlines() if not line.startswith('#')])
        if vendor_name.startwith('VMware'):
            virtual_facts['virtualization_type'] = 'VMware'
            virtual_facts['virtualization_role'] = 'guest'
"
-------------------------------------------------------------------------
"```python
# We still want to continue even if dmidecode is not available
if dmi_bin is not None:
    try:
        virt_fh = open(dmi_bin, 'r')
        out = virt_fh.read()
        virt_fh.close()

        # Strip out commented lines (specific dmidecode output)
        vendor_name = ''.join([line.strip() for line in out.splitlines() if not line.startswith('#')])
        if vendor_name.startswith('VMware'):
            virtual_facts['virtualization_type'] = 'VMware'
            virtual_facts['virtualization_role'] = 'guest'
    except IOError:
        pass
```"
-------------------------------------------------------------------------
"# We still want to continue even if dmidecode is not available
if dmi_bin is not None:
    (rc, out, err) = self.module.run_command('%s -s system-product-name' % dmi_bin)
    if rc == 0:
        # Strip out commented lines (specific dmidecode output)
        vendor_name = ''.join([line.strip() for line in out.splitlines() if not line.startswith('#')])
        if vendor_name.startwith('VMware'):
            virtual_facts['virtualization_type'] = 'VMware'
            virtual_facts['virtualization_role'] = 'guest'
"
-------------------------------------------------------------------------
"Recom
PRs: 34925, 38001"
-------------------------------------------------------------------------
=========================================================================
"e.filters.update(templar._get_filters(e.filters))
"
-------------------------------------------------------------------------
"```python
e.filters.update(templar._get_filters(e.filters))
```"
-------------------------------------------------------------------------
"e.filters.update(templar._get_filters(e.filters))
"
-------------------------------------------------------------------------
"Recom
PRs: 37881, 37937"
-------------------------------------------------------------------------
=========================================================================
"def _get_filters(self, builtin_filters):
"
-------------------------------------------------------------------------
"```python
def _get_filters(self, builtin_filters):
    pass
```"
-------------------------------------------------------------------------
"def _get_filters(self, builtin_filters):
"
-------------------------------------------------------------------------
"Recom
PRs: 37881, 37937"
-------------------------------------------------------------------------
=========================================================================
"if name in builtin_filters:
    # If we have a custom test named the same as a builtin filter, don't register as a filter
    continue
"
-------------------------------------------------------------------------
"```python
if name in ansible.template.builtin_filters:
    # If we have a custom test named the same as a builtin filter, don't register as a filter
    continue
```"
-------------------------------------------------------------------------
"if name in builtin_filters:
    # If we have a custom test named the same as a builtin filter, don't register as a filter
    continue
"
-------------------------------------------------------------------------
"Recom
PRs: 37881, 37937"
-------------------------------------------------------------------------
=========================================================================
"myenv.filters.update(self._get_filters(myenv.filters))
"
-------------------------------------------------------------------------
"```python
myenv.filters.update(self._get_filters(myenv.filters))
```"
-------------------------------------------------------------------------
"myenv.filters.update(self._get_filters(myenv.filters))
"
-------------------------------------------------------------------------
"Recom
PRs: 37881, 37937"
-------------------------------------------------------------------------
=========================================================================
"new_task = original_task.copy()
new_task._role_name = role_name
for from_arg in new_task.FROM_ARGS:
        new_task._from_files[from_key] = templar.template(include_variables[from_arg])
inc_file = IncludedFile(""role"", include_variables, new_task, is_role=True)
"
-------------------------------------------------------------------------
"```python
import os
from ansible.utils.display import Display
from ansible.playbook.task_include import IncludedFile
from ansible.template import template
from __main__ import display

new_task = original_task.copy()
new_task._role_name = role_name
for from_arg in new_task.FROM_ARGS:
    new_task._from_files[from_key] = template(include_variables[from_arg])
inc_file = IncludedFile(""role"", include_variables, new_task, is_role=True)
```"
-------------------------------------------------------------------------
"new_task = original_task.copy()
new_task._role_name = role_name
for from_arg in new_task.FROM_ARGS:
        new_task._from_files[from_key] = templar.template(include_variables[from_arg])
inc_file = IncludedFile(""role"", include_variables, new_task, is_role=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 36372, 37666"
-------------------------------------------------------------------------
=========================================================================
"error = e  # PY3 compatibility to store exception for use outside of this block
medOutException(""timed out waiting for %s: %s"" % (what_desc, error))
"
-------------------------------------------------------------------------
"```python
error = e  # PY3 compatibility to store exception for use outside of this block
raise TimedOutException(""timed out waiting for %s: %s"" % (what_desc, error))
```"
-------------------------------------------------------------------------
"error = e  # PY3 compatibility to store exception for use outside of this block
medOutException(""timed out waiting for %s: %s"" % (what_desc, error))
"
-------------------------------------------------------------------------
"Recom
PRs: 37646, 37653"
-------------------------------------------------------------------------
=========================================================================
"auth_args = ('host', 'api_key', 'kubeconfig', 'context', 'username', 'password',
             'cert_file', 'key_file', 'ssl_ca_cert', 'verify_ssl')

    if arg in auth_args and kwargs.get(arg) is not None:
        self.connection[arg] = kwargs.get(arg)
"
-------------------------------------------------------------------------
"```python
auth_args = ('host', 'api_key', 'kubeconfig', 'context', 'username', 'password',
             'cert_file', 'key_file', 'ssl_ca_cert', 'verify_ssl')

if arg in auth_args and kwargs.get(arg) is not None:
    self.connection[arg] = kwargs.get(arg)
```"
-------------------------------------------------------------------------
"auth_args = ('host', 'api_key', 'kubeconfig', 'context', 'username', 'password',
             'cert_file', 'key_file', 'ssl_ca_cert', 'verify_ssl')

    if arg in auth_args and kwargs.get(arg) is not None:
        self.connection[arg] = kwargs.get(arg)
"
-------------------------------------------------------------------------
"Recom
PRs: 37533, 37618"
-------------------------------------------------------------------------
=========================================================================
"for auth_uri in result['authorizations']:
    domain = auth_data['identifier']['value']
    if auth_data.get('wildcard', False):
        domain = '*.{0}'.format(domain)
"
-------------------------------------------------------------------------
"```python
for auth_uri in result['authorizations']:
    domain = auth_data['identifier']['value']
    if auth_data.get('wildcard', False):
        domain = '*.{0}'.format(domain)
```"
-------------------------------------------------------------------------
"for auth_uri in result['authorizations']:
    domain = auth_data['identifier']['value']
    if auth_data.get('wildcard', False):
        domain = '*.{0}'.format(domain)
"
-------------------------------------------------------------------------
"Recom
PRs: 37558, 37572"
-------------------------------------------------------------------------
=========================================================================
"- Setting C(ANSIBLE_PERSISTENT_COMMAND_TIMEOUT) to 30 is recommended since
  the save command can take longer than the default of 10 seconds on
  some EdgeOS hardware.
"
-------------------------------------------------------------------------
Ensure that `ANSIBLE_PERSISTENT_COMMAND_TIMEOUT` is set to 30 to accommodate longer save times on certain EdgeOS hardware.
-------------------------------------------------------------------------
"- Setting C(ANSIBLE_PERSISTENT_COMMAND_TIMEOUT) to 30 is recommended since
  the save command can take longer than the default of 10 seconds on
  some EdgeOS hardware.
"
-------------------------------------------------------------------------
"Recom
PRs: 37152, 37213"
-------------------------------------------------------------------------
=========================================================================
"elif entry:
"
-------------------------------------------------------------------------
"```python
if entry:
    entry['comment'] = line.strip()
```"
-------------------------------------------------------------------------
"elif entry:
"
-------------------------------------------------------------------------
"Recom
PRs: 37152, 37213"
-------------------------------------------------------------------------
=========================================================================
"self.module_fail_args = args
module.fail_json(msg=self.msg, other=self.module_fail_args)
"
-------------------------------------------------------------------------
"```python
self.module_fail_args = args
module.fail_json(msg=self.msg, **self.module_fail_args)
```"
-------------------------------------------------------------------------
"headers = {
    'Content-Type': 'application/josejson',
}
resp, info = fetch_url(self.module, url, data=data, headers=headers, method='POST')
"
-------------------------------------------------------------------------
"Recom
PRs: 37165, 37190"
-------------------------------------------------------------------------
=========================================================================
"https://tools.ietf.org/html/draft-ietf-acme-acme-10#section-6.2
"
-------------------------------------------------------------------------
"class ACMEAccount(object):
    '''
    Sends a JWS signed HTTP POST request to the ACME server and returns
    the response as dictionary
    '''
    failed_tries = 0
    while True:
        # Your code implementation here

        # Adapted code based on https://tools.ietf.org/html/draft-ietf-acme-acme-10#section-6.2
        def new_nonce():
            '''
            This function generates a new nonce by sending an empty POST request
            to the newNonce resource of the ACME server. The server responds
            with a newly generated nonce value which can then be used in subsequent
            requests for additional actions.
            '''
            nonce_request = { ""protected"": base64.urlsafe_b64encode(header), ""payload"": """", ""signature"": """" }
            headers = { ""Content-Type"": ""application/jose+json"" }
            response = requests.post(""https://acme-server/newNonce"", json=nonce_request, headers=headers)
            return response.headers.get('Replay-Nonce')

        # Ensure ACME v2 implementation
        acme_version = '2'

        # New nonce for each ACME request
        nonce = new_nonce()

        # Implementing the rest of the ACME account functionality here
        # ...

        failed_tries += 1
        if failed_tries >= 3:
            raise ValueError(""Failed to complete the ACME request after 3 attempts"")
        time.sleep(5)  # Add a delay before retrying the ACME request"
-------------------------------------------------------------------------
"challenge_response = {}
if self.version == 1:
    token = re.sub(r""[^A-Za-z0-9_\-]"", ""_"", challenge['token'])
    keyauthorization = self.account.get_keyauthorization(token)
    challenge_response[""resource""] = ""challenge""
    challenge_response[""keyAuthorization""] = keyauthorization
"
-------------------------------------------------------------------------
"Recom
PRs: 37165, 37190"
-------------------------------------------------------------------------
=========================================================================
"if self.get_user_data() is not None and instance.get('id'):
"
-------------------------------------------------------------------------
"```python
if self.get_user_data() is not None and instance.get('id'):
```"
-------------------------------------------------------------------------
"if self.get_user_data() is not None and instance.get('id'):
"
-------------------------------------------------------------------------
"Recom
PRs: 37143, 37175"
-------------------------------------------------------------------------
=========================================================================
"HAS_DOCKER_PY_3 = False
"
-------------------------------------------------------------------------
"```python
HAS_DOCKER_PY_3 = False
```"
-------------------------------------------------------------------------
"HAS_DOCKER_PY_3 = False
"
-------------------------------------------------------------------------
"Recom
PRs: 36973, 37071"
-------------------------------------------------------------------------
=========================================================================
"
if LooseVersion(docker_version) >= LooseVersion('3.0.0'):
    HAS_DOCKER_PY_3 = True
    from docker import APIClient as Client
    from docker.types import Ulimit, LogConfig
elif LooseVersion(docker_version) >= LooseVersion('2.0.0'):
"
-------------------------------------------------------------------------
"```python
from distutils.version import LooseVersion
from docker.types import Ulimit, LogConfig
from docker import APIClient as Client

if LooseVersion(docker_version) >= LooseVersion('3.0.0'):
    HAS_DOCKER_PY_3 = True
elif LooseVersion(docker_version) >= LooseVersion('2.0.0'):
    # Add any specific handling for version 2 here
```"
-------------------------------------------------------------------------
"
if LooseVersion(docker_version) >= LooseVersion('3.0.0'):
    HAS_DOCKER_PY_3 = True
    from docker import APIClient as Client
    from docker.types import Ulimit, LogConfig
elif LooseVersion(docker_version) >= LooseVersion('2.0.0'):
"
-------------------------------------------------------------------------
"Recom
PRs: 36973, 37071"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker_common import HAS_DOCKER_PY_2, HAS_DOCKER_PY_3, AnsibleDockerClient, DockerBaseClass
if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker_common import HAS_DOCKER_PY_2, HAS_DOCKER_PY_3, AnsibleDockerClient, DockerBaseClass

if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker_common import HAS_DOCKER_PY_2, HAS_DOCKER_PY_3, AnsibleDockerClient, DockerBaseClass
if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
"
-------------------------------------------------------------------------
"Recom
PRs: 36973, 37071"
-------------------------------------------------------------------------
=========================================================================
"if not HAS_DOCKER_PY_3:
    create_params['cpu_shares'] = 'cpu_shares'
    create_params['volume_driver'] = 'volume_driver'

"
-------------------------------------------------------------------------
"```python
if not HAS_DOCKER_PY_3:
    create_params['cpu_shares'] = 'cpu_shares'
    create_params['volume_driver'] = 'volume_driver'
```"
-------------------------------------------------------------------------
"if not HAS_DOCKER_PY_3:
    create_params['cpu_shares'] = 'cpu_shares'
    create_params['volume_driver'] = 'volume_driver'

"
-------------------------------------------------------------------------
"Recom
PRs: 36973, 37071"
-------------------------------------------------------------------------
=========================================================================
"if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
if HAS_DOCKER_PY_3:
    # cpu_shares and volume_driver moved to create_host_config in > 3
    host_config_params['cpu_shares'] = 'cpu_shares'
    host_config_params['volume_driver'] = 'volume_driver'

"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker_common import HAS_DOCKER_PY_2, HAS_DOCKER_PY_3

if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
    if HAS_DOCKER_PY_3:
        # cpu_shares and volume_driver moved to create_host_config in > 3
        host_config_params['cpu_shares'] = 'cpu_shares'
        host_config_params['volume_driver'] = 'volume_driver'
```"
-------------------------------------------------------------------------
"if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
if HAS_DOCKER_PY_3:
    # cpu_shares and volume_driver moved to create_host_config in > 3
    host_config_params['cpu_shares'] = 'cpu_shares'
    host_config_params['volume_driver'] = 'volume_driver'

"
-------------------------------------------------------------------------
"Recom
PRs: 36973, 37071"
-------------------------------------------------------------------------
=========================================================================
"if HAS_DOCKER_PY_3:
    status = self.client.wait(container_id)['StatusCode']
else:
    status = self.client.wait(container_id)
"
-------------------------------------------------------------------------
"```python
if HAS_DOCKER_PY_3:
    status = self.client.wait(container_id)['StatusCode']
else:
    status = self.client.wait(container_id)
```"
-------------------------------------------------------------------------
"if HAS_DOCKER_PY_3:
    status = self.client.wait(container_id)['StatusCode']
else:
    status = self.client.wait(container_id)
"
-------------------------------------------------------------------------
"Recom
PRs: 36973, 37071"
-------------------------------------------------------------------------
=========================================================================
"if (not (HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3)) and client.module.params.get('auto_remove'):
    client.module.fail_json(msg=""'auto_remove' is not compatible with the 'docker-py' Python package. It requires the newer 'docker' Python package."")
"
-------------------------------------------------------------------------
"```python
if (not (HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3)) and client.module.params.get('auto_remove'):
    client.module.fail_json(msg=""'auto_remove' is not compatible with the 'docker-py' Python package. It requires the newer 'docker' Python package."")
```"
-------------------------------------------------------------------------
"if (not (HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3)) and client.module.params.get('auto_remove'):
    client.module.fail_json(msg=""'auto_remove' is not compatible with the 'docker-py' Python package. It requires the newer 'docker' Python package."")
"
-------------------------------------------------------------------------
"Recom
PRs: 36973, 37071"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker_common import HAS_DOCKER_PY_2, HAS_DOCKER_PY_3, AnsibleDockerClient, DockerBaseClass
if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker_common import HAS_DOCKER_PY_2, HAS_DOCKER_PY_3, AnsibleDockerClient, DockerBaseClass

if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker_common import HAS_DOCKER_PY_2, HAS_DOCKER_PY_3, AnsibleDockerClient, DockerBaseClass
if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
"
-------------------------------------------------------------------------
"Recom
PRs: 36973, 37071"
-------------------------------------------------------------------------
=========================================================================
"if HAS_DOCKER_PY_3:
    for chunk in image:
        fd.write(chunk)
else:
    for chunk in image.stream(2048, decode_content=False):
        fd.write(chunk)
"
-------------------------------------------------------------------------
"```python
if HAS_DOCKER_PY_3:
    for chunk in image:
        fd.write(chunk)
else:
    for chunk in image.stream(2048, decode_content=False):
        fd.write(chunk)
```"
-------------------------------------------------------------------------
"if HAS_DOCKER_PY_3:
    for chunk in image:
        fd.write(chunk)
else:
    for chunk in image.stream(2048, decode_content=False):
        fd.write(chunk)
"
-------------------------------------------------------------------------
"Recom
PRs: 36973, 37071"
-------------------------------------------------------------------------
=========================================================================
"if not HAS_DOCKER_PY_3:
    params['stream'] = True
"
-------------------------------------------------------------------------
"```python
if not HAS_DOCKER_PY_3:
    params['stream'] = True
```"
-------------------------------------------------------------------------
"if not HAS_DOCKER_PY_3:
    params['stream'] = True
"
-------------------------------------------------------------------------
"Recom
PRs: 36973, 37071"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.docker_common import AnsibleDockerClient, DockerBaseClass, HAS_DOCKER_PY_2, HAS_DOCKER_PY_3
if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.docker_common import AnsibleDockerClient, DockerBaseClass, HAS_DOCKER_PY_2, HAS_DOCKER_PY_3

if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
```"
-------------------------------------------------------------------------
"from ansible.module_utils.docker_common import AnsibleDockerClient, DockerBaseClass, HAS_DOCKER_PY_2, HAS_DOCKER_PY_3
if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
"
-------------------------------------------------------------------------
"Recom
PRs: 36973, 37071"
-------------------------------------------------------------------------
=========================================================================
"if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
AS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
"
-------------------------------------------------------------------------
"```python
if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
```"
-------------------------------------------------------------------------
"if HAS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
AS_DOCKER_PY_2 or HAS_DOCKER_PY_3:
"
-------------------------------------------------------------------------
"Recom
PRs: 36973, 37071"
-------------------------------------------------------------------------
=========================================================================
"import sys
"
-------------------------------------------------------------------------
"```python
import sys
```"
-------------------------------------------------------------------------
"import sys
"
-------------------------------------------------------------------------
"Recom
PRs: 36249, 37005"
-------------------------------------------------------------------------
=========================================================================
"
python = sys.executable
# Assume ansible-connection is in the same dir as sys.argv[0]
ansible_connection = os.path.join(os.path.dirname(sys.argv[0]), 'ansible-connection')
p = subprocess.Popen([python, ansible_connection, to_text(os.getppid())], stdin=slave, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
"
-------------------------------------------------------------------------
"```python
python = sys.executable
# Assume ansible-connection is in the same dir as sys.argv[0]
ansible_connection = os.path.join(os.path.dirname(sys.argv[0]), 'ansible-connection')
p = subprocess.Popen([python, ansible_connection, to_text(os.getppid())], stdin=stdin, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
```"
-------------------------------------------------------------------------
"
python = sys.executable
# Assume ansible-connection is in the same dir as sys.argv[0]
ansible_connection = os.path.join(os.path.dirname(sys.argv[0]), 'ansible-connection')
p = subprocess.Popen([python, ansible_connection, to_text(os.getppid())], stdin=slave, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
"
-------------------------------------------------------------------------
"Recom
PRs: 36249, 37005"
-------------------------------------------------------------------------
=========================================================================
"result = json.loads(to_text(stdout, errors='surrogate_then_replace'))
try:
    result = json.loads(to_text(stderr, errors='surrogate_then_replace'))
except json.decoder.JSONDecodeError:
    result = {'error': to_text(stderr, errors='surrogate_then_replace')}
"
-------------------------------------------------------------------------
"```python
try:
    result = json.loads(to_text(stdout, errors='surrogate_then_replace'))
except json.decoder.JSONDecodeError:
    result = {'error': to_text(stdout, errors='surrogate_then_replace')}
```"
-------------------------------------------------------------------------
"result = json.loads(to_text(stdout, errors='surrogate_then_replace'))
try:
    result = json.loads(to_text(stderr, errors='surrogate_then_replace'))
except json.decoder.JSONDecodeError:
    result = {'error': to_text(stderr, errors='surrogate_then_replace')}
"
-------------------------------------------------------------------------
"Recom
PRs: 36249, 37005"
-------------------------------------------------------------------------
=========================================================================
"if result.get('exception'):
    msg = ""The full traceback is:\n""  result['exception']
    display.display(msg, color=C.COLOR_ERROR)
"
-------------------------------------------------------------------------
"```python
if result.get('exception'):
    msg = ""The full traceback is:\n"" + result['exception']
    display.display(msg, color=C.COLOR_ERROR)
```"
-------------------------------------------------------------------------
"if result.get('exception'):
    msg = ""The full traceback is:\n""  result['exception']
    display.display(msg, color=C.COLOR_ERROR)
"
-------------------------------------------------------------------------
"Recom
PRs: 36249, 37005"
-------------------------------------------------------------------------
=========================================================================
"import sys
"
-------------------------------------------------------------------------
"```python
import sys
```"
-------------------------------------------------------------------------
"import sys
"
-------------------------------------------------------------------------
"Recom
PRs: 36249, 37005"
-------------------------------------------------------------------------
=========================================================================
"
python = sys.executable
# Assume ansible-connection is in the same dir as sys.argv[0]
ansible_connection = os.path.join(os.path.dirname(sys.argv[0]), 'ansible-connection')
p = subprocess.Popen([python, ansible_connection, to_text(os.getppid())], stdin=slave, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
"
-------------------------------------------------------------------------
"```python
import os
import sys
import subprocess
from ansible.module_utils._text import to_text

python = sys.executable
# Assume ansible-connection is in the same dir as sys.argv[0]
ansible_connection = os.path.join(os.path.dirname(sys.argv[0]), 'ansible-connection')
p = subprocess.Popen([python, ansible_connection, to_text(os.getppid())], stdin=slave, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
```"
-------------------------------------------------------------------------
"
python = sys.executable
# Assume ansible-connection is in the same dir as sys.argv[0]
ansible_connection = os.path.join(os.path.dirname(sys.argv[0]), 'ansible-connection')
p = subprocess.Popen([python, ansible_connection, to_text(os.getppid())], stdin=slave, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
"
-------------------------------------------------------------------------
"Recom
PRs: 36249, 37005"
-------------------------------------------------------------------------
=========================================================================
"try:
    result = json.loads(to_text(stderr, errors='surrogate_then_replace'))
except json.decoder.JSONDecodeError:
    result = {'error': to_text(stderr, errors='surrogate_then_replace')}
"
-------------------------------------------------------------------------
"```python
try:
    result = json.loads(to_text(stderr, errors='surrogate_then_replace'))
except json.decoder.JSONDecodeError:
    result = {'error': to_text(stderr, errors='surrogate_then_replace')}
```"
-------------------------------------------------------------------------
"try:
    result = json.loads(to_text(stderr, errors='surrogate_then_replace'))
except json.decoder.JSONDecodeError:
    result = {'error': to_text(stderr, errors='surrogate_then_replace')}
"
-------------------------------------------------------------------------
"Recom
PRs: 36249, 37005"
-------------------------------------------------------------------------
=========================================================================
"if result.get('exception'):
    msg = ""The full traceback is:\n""  result['exception']
    display.display(msg, color=C.COLOR_ERROR)
"
-------------------------------------------------------------------------
"```python
if result.get('exception'):
    msg = ""The full traceback is:\n"" + result['exception']
    display.display(msg, color=C.COLOR_ERROR)
```"
-------------------------------------------------------------------------
"if result.get('exception'):
    msg = ""The full traceback is:\n""  result['exception']
    display.display(msg, color=C.COLOR_ERROR)
"
-------------------------------------------------------------------------
"Recom
PRs: 36249, 37005"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"- TRAFFICCLONEPROFILE, VSVIP, WAFPOLICY, WAFPROFILE, ERRORPAGEPROFILE, ERRORPAGEBODY, L4POLICYSET, SERVICEENGINE, DEBUGSERVICEENGINE,
- DEBUGCONTROLLER, DEBUGVIRTUALSERVICE, SERVICEENGINEGROUP, SEPROPERTIES, NETWORK, CONTROLLERNODE, CONTROLLERPROPERTIES, SYSTEMCONFIGURATION,
- VRFCONTEXT, USER, ALERTCONFIG, ALERTSYSLOGCONFIG, ALERTEMAILCONFIG, ALERTTYPECONFIG, APPLICATION, ROLE, CLOUDPROPERTIES, SNMPTRAPPROFILE,
- ACTIONGROUPPROFILE, MICROSERVICE, ALERTPARAMS, ACTIONGROUPCONFIG, CLOUDCONNECTORUSER, GSLB, GSLBDNSUPDATE, GSLBSITEOPS, GLBMGRWARMSTART,
- IPAMDNSRECORD, GSLBDNSGSSTATUS, GSLBDNSGEOFILEOPS, GSLBDNSGEOUPDATE, GSLBDNSGEOCLUSTEROPS, GSLBDNSCLEANUP, GSLBSITEOPSRESYNC, TCPSTATRUNTIME,
- UDPSTATRUNTIME, IPSTATRUNTIME, ARPSTATRUNTIME, MBSTATRUNTIME, IPSTKQSTATSRUNTIME, MALLOCSTATRUNTIME, SHMALLOCSTATRUNTIME, CPUUSAGERUNTIME,
- L7GLOBALSTATSRUNTIME, L7VIRTUALSERVICESTATSRUNTIME, SEAGENTVNICDBRUNTIME, SEAGENTGRAPHDBRUNTIME, SEAGENTSTATERUNTIME, INTERFACERUNTIME,
- ARPTABLERUNTIME, DISPATCHERSTATRUNTIME, DISPATCHERSTATCLEARRUNTIME, DISPATCHERTABLEDUMPRUNTIME, DISPATCHERREMOTETIMERLISTDUMPRUNTIME,
- METRICSAGENTMESSAGE, HEALTHMONITORSTATRUNTIME, METRICSENTITYRUNTIME, PERSISTENCEINTERNAL, HTTPPOLICYSETINTERNAL, DNSPOLICYINTERNAL,
- CONNECTIONDUMPRUNTIME, SHAREDDBSTATS, SHAREDDBSTATSCLEAR, ICMPSTATRUNTIME, ROUTETABLERUNTIME, VIRTUALMACHINE, POOLSERVER, SEVSLIST,
- MEMINFORUNTIME, RTERINGSTATRUNTIME, ALGOSTATRUNTIME, HEALTHMONITORRUNTIME, CPUSTATRUNTIME, SEVM, HOST, PORTGROUP, CLUSTER, DATACENTER, VCENTER,
- HTTPPOLICYSETSTATS, DNSPOLICYSTATS, METRICSSESTATS, RATELIMITERSTATRUNTIME, NETWORKSECURITYPOLICYSTATS, TCPCONNRUNTIME, POOLSTATS,
- CONNPOOLINTERNAL, CONNPOOLSTATS, VSHASHSHOWRUNTIME, SELOGSTATSRUNTIME, NETWORKSECURITYPOLICYDETAIL, LICENSERUNTIME, SERVERRUNTIME,
- METRICSRUNTIMESUMMARY, METRICSRUNTIMEDETAIL, DISPATCHERSEHMPROBETEMPDISABLERUNTIME, POOLDEBUG, VSLOGMGRMAP, SERUMINSERTIONSTATS, HTTPCACHE,
- HTTPCACHESTATS, SEDOSSTATRUNTIME, VSDOSSTATRUNTIME, SERVERUPDATEREQ, VSSCALEOUTLIST, SEMEMDISTRUNTIME, TCPCONNRUNTIMEDETAIL, SEUPGRADESTATUS,
- SEUPGRADEPREVIEW, SEFAULTINJECTEXHAUSTM, SEFAULTINJECTEXHAUSTMCL, SEFAULTINJECTEXHAUSTMCLSMALL, SEFAULTINJECTEXHAUSTCONN, SEHEADLESSONLINEREQ,
- SEUPGRADE, SEUPGRADESTATUSDETAIL, SERESERVEDVS, SERESERVEDVSCLEAR, VSCANDIDATESEHOSTLIST, SEGROUPUPGRADE, REBALANCE, SEGROUPREBALANCE,
- SEAUTHSTATSRUNTIME, AUTOSCALESTATE, VIRTUALSERVICEAUTHSTATS, NETWORKSECURITYPOLICYDOS, KEYVALINTERNAL, KEYVALSUMMARYINTERNAL,
- SERVERSTATEUPDATEINFO, CLTRACKINTERNAL, CLTRACKSUMMARYINTERNAL, MICROSERVICERUNTIME, SEMICROSERVICE, VIRTUALSERVICEANALYSIS, CLIENTINTERNAL,
- CLIENTSUMMARYINTERNAL, MICROSERVICEGROUPRUNTIME, BGPRUNTIME, REQUESTQUEUERUNTIME, MIGRATEALL, MIGRATEALLSTATUSSUMMARY, MIGRATEALLSTATUSDETAIL,
- INTERFACESUMMARYRUNTIME, INTERFACELACPRUNTIME, DNSTABLE, GSLBSERVICEDETAIL, GSLBSERVICEINTERNAL, GSLBSERVICEHMONSTAT, SETROLESREQUEST,
- TRAFFICCLONERUNTIME, GEOLOCATIONINFO, SEVSHBSTATRUNTIME, GEODBINTERNAL, GSLBSITEINTERNAL, WAFSTATS, USERDEFINEDDATASCRIPTCOUNTERS, LLDPRUNTIME,
- VSESSHARINGPOOL, SEVSSPLACEMENT, L4POLICYSETSTATS, L4POLICYSETINTERNAL, SERESOURCEPROTO, SECONSUMERPROTO, SECREATEPENDINGPROTO, PLACEMENTSTATS,
- SEVIPPROTO, RMVRFPROTO, VCENTERMAP, VIMGRVCENTERRUNTIME, INTERESTEDVMS, INTERESTEDHOSTS, VCENTERSUPPORTEDCOUNTERS, ENTITYCOUNTERS,
- TRANSACTIONSTATS, SEVMCREATEPROGRESS, PLACEMENTSTATUS, VISUBFOLDERS, VIDATASTORE, VIHOSTRESOURCES, CLOUDCONNECTOR, VINETWORKSUBNETVMS,
- VIDATASTORECONTENTS, VIMGRVCENTERCLOUDRUNTIME, VIVCENTERPORTGROUPS, VIVCENTERDATACENTERS, VIMGRHOSTRUNTIME, PLACEMENTGLOBALS, APICCONFIGURATION,
- CIFTABLE, APICTRANSACTION, VIRTUALSERVICESTATEDBCACHESUMMARY, POOLSTATEDBCACHESUMMARY, SERVERSTATEDBCACHESUMMARY, APICAGENTINTERNAL,
- APICTRANSACTIONFLAP, APICGRAPHINSTANCES, APICEPGS, APICEPGEPS, APICDEVICEPKGVER, APICTENANTS, APICVMMDOMAINS, NSXCONFIGURATION, NSXSGTABLE,
- NSXAGENTINTERNAL, NSXSGINFO, NSXSGIPS, NSXAGENTINTERNALCLI, MAXOBJECTS.
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load()), Name(id='DEBUGCONTROLLER', ctx=Load()), Name(id='DEBUGVIRTUALSERVICE', ctx=Load()), Name(id='SERVICEENGINEGROUP', ctx=Load()), Name(id='SEPROPERTIES', ctx=Load()), Name(id='NETWORK', ctx=Load()), Name(id='CONTROLLERNODE', ctx=Load()), Name(id='CONTROLLERPROPERTIES', ctx=Load()), Name(id='SYSTEMCONFIGURATION', ctx=Load()), Name(id='VRFCONTEXT', ctx=Load()), Name(id='USER', ctx=Load()), Name(id='ALERTCONFIG', ctx=Load()), Name(id='ALERTSYSLOGCONFIG', ctx=Load()), Name(id='ALERTEMAILCONFIG', ctx=Load()), Name(id='ALERTTYPECONFIG', ctx=Load()), Name(id='APPLICATION', ctx=Load(), ctx=Load()), Name(id='ROLE', ctx=Load()), Name(id='CLOUDPROPERTIES', ctx=Load()), Name(id='SNMPTRAPPROFILE', ctx=Load()), Name(id='ACTIONGROUPPROFILE', ctx=Load()), Name(id='MICROSERVICE', ctx=Load()), Name(id='ALERTPARAMS', ctx=Load()), Name(id='ACTIONGROUPCONFIG', ctx=Load()), Name(id='CLOUDCONNECTORUSER', ctx=Load()), Name(id='GSLB', ctx=Load()), Name(id='GSLBDNSUPDATE', ctx=Load()), Name(id='GSLBSITEOPS', ctx=Load()), Name(id='GLBMGRWARMSTART', ctx=Load()), Name(id='IPAMDNSRECORD', ctx=Load()), Name(id='GSLBDNSGSSTATUS', ctx=Load()), Name(id='GSLBDNSGEOFILEOPS', ctx=Load()), Name(id='GSLBDNSGEOUPDATE', ctx=Load()), Name(id='GSLBDNSGEOCON', ctx=Load()), Name(id='GSLBDNSCLEANUP', ctx=Load()), Name(id='GSLBSITEOPSRESYNC', ctx=Load()), Name(id='TCPSTATRUNTIME', ctx=Load()), Name(id='UDPSTATRUNTIME', ctx=Load()), Name(id='IPSTATRUNTIME', ctx=Load()), Name(id='ARPSTATRUNTIME', ctx=Load()), Name(id='MBSTATRUNTIME', ctx=Load()), Name(id='IPSTKQSTATSRUNTIME', ctx=Load()), Name(id='MALLOCSTATRUNTIME', ctx=Load()), Name(id='SHMALLOCSTATRUNTIME', ctx=Load()), Name(id='CPUUSAGERUNTIME', ctx=Load()), Name(id='L7GLOBALSTATSRUNTIME', ctx=Load()), Name(id='L7VIRTUALSERVICESTATSRUNTIME', ctx=Load()), Name(id='SEAGENTVNICDBRUNTIME', ctx=Load()), Name(id='SEAGENTGRAPHDBRUNTIME', ctx=Load()), Name(id='SEAGENTSTATERUNTIME', ctx=Load()), Name(id='INTERFACERUNTIME', ctx=Load()), Name(id='ARPTABLERUNTIME', ctx=Load()), Name(id='DISPATCHERSTATRUNTIME', ctx=Load()), Name(id='DISPATCHERSTATCLEARRUNTIME', ctx=Load()), Name(id='DISPATCHERTABLEDUMPRUNTIME', ctx=Load()), Name(id='DISPATCHERREMOTETIMERLISTDUMPRUNTIME', ctx=Load()), Name(id='METRICSAGENTMESSAGE', ctx=Load()), Name(id='HEALTHMONITORSTATRUNTIME', ctx=Load()), Name(id='METRICSENTITYRUNTIME', ctx=Load()), Name(id='PERSISTENCEINTERNAL', ctx=Load()), Name(id='HTTPPOLICYSETINTERNAL', ctx=Load()), Name(id='DNSPOLICYINTERNAL', ctx=Load()), Name(id='CONNECTIONDUMPRUNTIME', ctx=Load()), Name(id='SHAREDDBSTATS', ctx=Load()), Name(id='SHAREDDBSTATSCLEAR', ctx=Load()), Name(id='ICMPSTATRUNTIME', ctx=Load()), Name(id='ROUTETABLERUNTIME', ctx=Load()), Name(id='VIRTUALMACHINE', ctx=Load()), Name(id='POOLSERVER', ctx=Load()), Name(id='SEVSLIST', ctx=Load()), Name(id='MEMINFORUNTIME', ctx=Load()), Name(id='RTERINGSTATRUNTIME', ctx=Load()), Name(id='ALGOSTATRUNTIME', ctx=Load()), Name(id='HEALTHMONITORRUNTIME', ctx=Load()), Name(id='CPUSTATRUNTIME', ctx=Load()), Name(id='SEVM', ctx=Load()), Name(id='HOST', ctx=Load()), Name(id='PORTGROUP', ctx=Load()), Name(id='CLUSTER', ctx=Load()), Name(id='DATACENTER', ctx=Load()), Name(id='VCENTER', ctx=Load()), Name(id='HTTPPOLICYSETSTATS', ctx=Load()), Name(id='DNSPOLICYSTATS', ctx=Load()), Name(id='METRICSSESTATS', ctx=Load()), Name(id='RATELIMITERSTATRUNTIME', ctx=Load()), Name(id='NETWORKSECURITYPOLICYSTATS', ctx=Load()), Name(id='TCPCONNRUNTIME', ctx=Load()), Name(id='POOLSTATS', ctx=Load()), Name(id='CONNPOOLINTERNAL', ctx=Load()), Name(id='CONNPOOLSTATS', ctx=Load()), Name(id='VSHASHSHOWRUNTIME', ctx=Load()), Name(id='SELOGSTATSRUNTIME', ctx=Load()), Name(id='NETWORKSECURITYPOLICYDETAIL', ctx=Load()), Name(id='LICENSERUNTIME', ctx=Load()), Name(id='SERVERRUNTIME', ctx=Load()), Name(id='METRICSRUNTIMESUMMARY', ctx=Load()), Name(id='METRICSRUNTIMEDETAIL', ctx=Load()), Name(id='DISPATCHERSEHMPROBETEMPDISABLERUNTIME', ctx=Load()), Name(id='POOLDEBUG', ctx=Load()), Name(id='VSLOGMGRMAP', ctx=Load()), Name(id='SERUMINSERTIONSTATS', ctx=Load()), Name(id='HTTPCACHE', ctx=Load()), Name(id='HTTPCACHESTATS', ctx=Load()), Name(id='SEDOSSTATRUNTIME', ctx=Load()), Name(id='VSDOSSTATRUNTIME', ctx=Load()), Name(id='SERVERUPDATEREQ', ctx=Load()), Name(id='VSSCALEOUTLIST', ctx=Load()), Name(id='SEMEMDISTRUNTIME', ctx=Load()), Name(id='TCPCONNRUNTIMEDETAIL', ctx=Load()), Name(id='SEUPGRADESTATUS', ctx=Load()), Name(id='SEUPGRADEPREVIEW', ctx=Load()), Name(id='SEFAULTINJECTEXHAUSTM', ctx=Load()), Name(id='SEFAULTINJECTEXHAUSTMCL', ctx=Load()), Name(id='SEFAULTINJECTEXHAUSTMCLSMALL', ctx=Load()), Name(id='SEFAULTINJECTEXHAUSTCONN', ctx=Load()), Name(id='SEHEADLESSONLINEREQ', ctx=Load()), Name(id='SEUPGRADE', ctx=Load()), Name(id='SEUPGRADESTATUSD', ctx=Load()), Name(id='SERESERVEDVS', ctx=Load()), Name(id='SERESERVEDVSCLEAR', ctx=Load()), Name(id='VSCANDIDATESEHOSTLIST', ctx=Load()), Name(id='SEGROUPUPGRADE', ctx=Load()), Name(id='REBALANCE', ctx=Load()), Name(id='SEGROUPREBALANCE', ctx=Load()), Name(id='SEAUTHSTATSRUNTIME', ctx=Load()), Name(id='AUTOSCALESTATE', ctx=Load()), Name(id='VIRTUALSERVICEAUTHSTATS', ctx=Load()), Name(id='NETWORKSECURITYPOLICYDOS', ctx=Load()), Name(id='KEYVALINTERNAL', ctx=Load()), Name(id='KEYVALSUMMARYINTERNAL', ctx=Load()), Name(id='SERVERSTATEUPDATEINFO', ctx=Load()), Name(id='CLTRACKINTERNAL', ctx=Load()), Name(id='CLTRACKSUMMARYINTERNAL', ctx=Load()), Name(id='MICROSERVICERUNTIME', ctx=Load()), Name(id='SEMICROSERVICE', ctx=Load()), Name(id='VIRTUALSERVICEANALYSIS', ctx=Load()), Name(id='CLIENTINTERNAL', ctx=Load()), Name(id='CLIENTSUMMARYINTERNAL', ctx=Load()), Name(id='MICROSERVICEGROUPRUNTIME', ctx=Load()), Name(id='BGPRUNTIME', ctx=Load()), Name(id='REQUESTQUEUERUNTIME', ctx=Load()), Name(id='MIGRATEALL', ctx=Load()), Name(id='MIGRATEALLSTATUSSUMMARY', ctx=Load()), Name(id='MIGRATEALLSTATUSDETAIL', ctx=Load()), Name(id='INTERFACESUMMARYRUNTIME', ctx=Load()), Name(id='INTERFACELACPRUNTIME', ctx=Load()), Name(id='DNSTABLE', ctx=Load()), Name(id='GSLBSERVICEDETAIL', ctx=Load()), Name(id='GSLBSERVICEINTERNAL', ctx=Load()), Name(id='GSLBSERVICEHMONSTAT', ctx=Load()), Name(id='SETROLESREQUEST', ctx=Load()), Name(id='TRAFFICCLONERUNTIME', ctx=Load()), Name(id='GEOLOCATIONINFO', ctx=Load()), Name(id='SEVSHBSTATRUNTIME', ctx=Load()), Name(id='GEODBINTERNAL', ctx=Load()), Name(id='GSLBSITEINTERNAL', ctx=Load()), Name(id='WAFSTATS', ctx=Load()), Name(id='USERDEFINEDDATASCRIPTCOUNTERS', ctx=Load()), Name(id='LLDPRUNTIME', ctx=Load()), Name(id='VSESSHARINGPOOL', ctx=Load()), Name(id='SEVSSPLACEMENT', ctx=Load()), Name(id='L4POLICYSETSTATS', ctx=Load()), Name(id='L4POLICYSETINTERNAL', ctx=Load()), Name(id='SERESOURCEPROTO', ctx=Load()), Name(id='SECONSUMERPROTO', ctx=Load()), Name(id='SECREATEPENDINGPROTO', ctx=Load()), Name(id='PLACEMENTSTATS', ctx=Load()), Name(id='SEVIPPROTO', ctx=Load()), Name(id='RMVRFPROTO', ctx=Load()), Name(id='VCENTERMAP', ctx=Load()), Name(id='VIMGRVCENTERRUNTIME', ctx=Load()), Name(id='INTERESTEDVMS', ctx=Load()), Name(id='INTERESTEDHOSTS', ctx=Load()), Name(id='VCENTERSUPPORTEDCOUNTERS', ctx=Load()), Name(id='ENTITYCOUNTERS', ctx=Load()), Name(id='TRANSACTIONSTATS', ctx=Load()), Name(id='SEVMCREATEPROGRESS', ctx=Load()), Name(id='PLACEMENTSTATUS', ctx=Load()), Name(id='VISUBFOLDERS', ctx=Load()), Name(id='VIDATASTORE', ctx=Load()), Name(id='VIHOSTRESOURCES', ctx=Load()), Name(id='CLOUDCONNECTOR', ctx=Load()), Name(id='VINETWORKSUBNETVMS', ctx=Load()), Name(i…
```"
-------------------------------------------------------------------------
"- TRAFFICCLONEPROFILE, VSVIP, WAFPOLICY, WAFPROFILE, ERRORPAGEPROFILE, ERRORPAGEBODY, L4POLICYSET, SERVICEENGINE, DEBUGSERVICEENGINE,
- DEBUGCONTROLLER, DEBUGVIRTUALSERVICE, SERVICEENGINEGROUP, SEPROPERTIES, NETWORK, CONTROLLERNODE, CONTROLLERPROPERTIES, SYSTEMCONFIGURATION,
- VRFCONTEXT, USER, ALERTCONFIG, ALERTSYSLOGCONFIG, ALERTEMAILCONFIG, ALERTTYPECONFIG, APPLICATION, ROLE, CLOUDPROPERTIES, SNMPTRAPPROFILE,
- ACTIONGROUPPROFILE, MICROSERVICE, ALERTPARAMS, ACTIONGROUPCONFIG, CLOUDCONNECTORUSER, GSLB, GSLBDNSUPDATE, GSLBSITEOPS, GLBMGRWARMSTART,
- IPAMDNSRECORD, GSLBDNSGSSTATUS, GSLBDNSGEOFILEOPS, GSLBDNSGEOUPDATE, GSLBDNSGEOCLUSTEROPS, GSLBDNSCLEANUP, GSLBSITEOPSRESYNC, TCPSTATRUNTIME,
- UDPSTATRUNTIME, IPSTATRUNTIME, ARPSTATRUNTIME, MBSTATRUNTIME, IPSTKQSTATSRUNTIME, MALLOCSTATRUNTIME, SHMALLOCSTATRUNTIME, CPUUSAGERUNTIME,
- L7GLOBALSTATSRUNTIME, L7VIRTUALSERVICESTATSRUNTIME, SEAGENTVNICDBRUNTIME, SEAGENTGRAPHDBRUNTIME, SEAGENTSTATERUNTIME, INTERFACERUNTIME,
- ARPTABLERUNTIME, DISPATCHERSTATRUNTIME, DISPATCHERSTATCLEARRUNTIME, DISPATCHERTABLEDUMPRUNTIME, DISPATCHERREMOTETIMERLISTDUMPRUNTIME,
- METRICSAGENTMESSAGE, HEALTHMONITORSTATRUNTIME, METRICSENTITYRUNTIME, PERSISTENCEINTERNAL, HTTPPOLICYSETINTERNAL, DNSPOLICYINTERNAL,
- CONNECTIONDUMPRUNTIME, SHAREDDBSTATS, SHAREDDBSTATSCLEAR, ICMPSTATRUNTIME, ROUTETABLERUNTIME, VIRTUALMACHINE, POOLSERVER, SEVSLIST,
- MEMINFORUNTIME, RTERINGSTATRUNTIME, ALGOSTATRUNTIME, HEALTHMONITORRUNTIME, CPUSTATRUNTIME, SEVM, HOST, PORTGROUP, CLUSTER, DATACENTER, VCENTER,
- HTTPPOLICYSETSTATS, DNSPOLICYSTATS, METRICSSESTATS, RATELIMITERSTATRUNTIME, NETWORKSECURITYPOLICYSTATS, TCPCONNRUNTIME, POOLSTATS,
- CONNPOOLINTERNAL, CONNPOOLSTATS, VSHASHSHOWRUNTIME, SELOGSTATSRUNTIME, NETWORKSECURITYPOLICYDETAIL, LICENSERUNTIME, SERVERRUNTIME,
- METRICSRUNTIMESUMMARY, METRICSRUNTIMEDETAIL, DISPATCHERSEHMPROBETEMPDISABLERUNTIME, POOLDEBUG, VSLOGMGRMAP, SERUMINSERTIONSTATS, HTTPCACHE,
- HTTPCACHESTATS, SEDOSSTATRUNTIME, VSDOSSTATRUNTIME, SERVERUPDATEREQ, VSSCALEOUTLIST, SEMEMDISTRUNTIME, TCPCONNRUNTIMEDETAIL, SEUPGRADESTATUS,
- SEUPGRADEPREVIEW, SEFAULTINJECTEXHAUSTM, SEFAULTINJECTEXHAUSTMCL, SEFAULTINJECTEXHAUSTMCLSMALL, SEFAULTINJECTEXHAUSTCONN, SEHEADLESSONLINEREQ,
- SEUPGRADE, SEUPGRADESTATUSDETAIL, SERESERVEDVS, SERESERVEDVSCLEAR, VSCANDIDATESEHOSTLIST, SEGROUPUPGRADE, REBALANCE, SEGROUPREBALANCE,
- SEAUTHSTATSRUNTIME, AUTOSCALESTATE, VIRTUALSERVICEAUTHSTATS, NETWORKSECURITYPOLICYDOS, KEYVALINTERNAL, KEYVALSUMMARYINTERNAL,
- SERVERSTATEUPDATEINFO, CLTRACKINTERNAL, CLTRACKSUMMARYINTERNAL, MICROSERVICERUNTIME, SEMICROSERVICE, VIRTUALSERVICEANALYSIS, CLIENTINTERNAL,
- CLIENTSUMMARYINTERNAL, MICROSERVICEGROUPRUNTIME, BGPRUNTIME, REQUESTQUEUERUNTIME, MIGRATEALL, MIGRATEALLSTATUSSUMMARY, MIGRATEALLSTATUSDETAIL,
- INTERFACESUMMARYRUNTIME, INTERFACELACPRUNTIME, DNSTABLE, GSLBSERVICEDETAIL, GSLBSERVICEINTERNAL, GSLBSERVICEHMONSTAT, SETROLESREQUEST,
- TRAFFICCLONERUNTIME, GEOLOCATIONINFO, SEVSHBSTATRUNTIME, GEODBINTERNAL, GSLBSITEINTERNAL, WAFSTATS, USERDEFINEDDATASCRIPTCOUNTERS, LLDPRUNTIME,
- VSESSHARINGPOOL, SEVSSPLACEMENT, L4POLICYSETSTATS, L4POLICYSETINTERNAL, SERESOURCEPROTO, SECONSUMERPROTO, SECREATEPENDINGPROTO, PLACEMENTSTATS,
- SEVIPPROTO, RMVRFPROTO, VCENTERMAP, VIMGRVCENTERRUNTIME, INTERESTEDVMS, INTERESTEDHOSTS, VCENTERSUPPORTEDCOUNTERS, ENTITYCOUNTERS,
- TRANSACTIONSTATS, SEVMCREATEPROGRESS, PLACEMENTSTATUS, VISUBFOLDERS, VIDATASTORE, VIHOSTRESOURCES, CLOUDCONNECTOR, VINETWORKSUBNETVMS,
- VIDATASTORECONTENTS, VIMGRVCENTERCLOUDRUNTIME, VIVCENTERPORTGROUPS, VIVCENTERDATACENTERS, VIMGRHOSTRUNTIME, PLACEMENTGLOBALS, APICCONFIGURATION,
- CIFTABLE, APICTRANSACTION, VIRTUALSERVICESTATEDBCACHESUMMARY, POOLSTATEDBCACHESUMMARY, SERVERSTATEDBCACHESUMMARY, APICAGENTINTERNAL,
- APICTRANSACTIONFLAP, APICGRAPHINSTANCES, APICEPGS, APICEPGEPS, APICDEVICEPKGVER, APICTENANTS, APICVMMDOMAINS, NSXCONFIGURATION, NSXSGTABLE,
- NSXAGENTINTERNAL, NSXSGINFO, NSXSGIPS, NSXAGENTINTERNALCLI, MAXOBJECTS.
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
type: bool
type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
type: bool
type: bool
type: bool
type: bool
type: bool
type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
```  "
-------------------------------------------------------------------------
"type: bool
type: bool
type: bool
type: bool
type: bool
type: bool
type: bool
type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"default: 60
"
-------------------------------------------------------------------------
"```python
- AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
+ AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
```"
-------------------------------------------------------------------------
"default: 60
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```  "
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
- AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
+ AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
- AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
+ AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
Invalid AST
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```  "
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"required: true
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"required: true
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"name=dict(type='str', required=True),
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)
+ AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)
+ AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='True', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"name=dict(type='str', required=True),
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"required: true
"
-------------------------------------------------------------------------
"```python
- AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
+ Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
- Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
+ AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
- AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
+ AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
- AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
+ AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```
"
-------------------------------------------------------------------------
"required: true
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"name=dict(type='str', required=True),
"
-------------------------------------------------------------------------
"+ AnnAssign(target=Name(id='name', ctx=Store()), annotation=Constant(value='str'), simple=1)
- AnnAssign(target=Name(id='name', ctx=Store()), annotation=Constant(value='str'), simple=1)
?                                                                             ^

+ AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
?                            ^ ++++++                                       ^^^^

Invalid AST"
-------------------------------------------------------------------------
"name=dict(type='str', required=True),
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
required: true
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
required: true
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
type: bool
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"leader_cluster_uuid=dict(type='str', required=True),
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
?                           ++++++                             ^^^^^ ^^^^^^^  ^^

+ AnnAssign(target=Name(id='leader_cluster_uuid', ctx=Store()), annotation=Constant(value='str'), simple=1)
?                           +++++++++++++++++++                         ^^^^ ^^ +^^^^^^^ ^^

- AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
+ AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
?                           ^^^                                      ^^^^"
-------------------------------------------------------------------------
"leader_cluster_uuid=dict(type='str', required=True),
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
type: bool
default: 60
required: true
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```  "
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
- AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
+ AnnAssign(target=Name(id='type', ctx=Store()), annotation=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.network.avi.avi import (
    avi_common_argument_spec, HAS_AVI)
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.network.avi.avi import (
    avi_common_argument_spec, HAS_AVI, TRAFFICCLONEPROFILE, VSVIP, WAFPOLICY, WAFPROFILE, ERRORPAGEPROFILE, ERRORPAGEBODY, L4POLICYSET, SERVICEENGINE, DEBUGSERVICEENGINE)
```"
-------------------------------------------------------------------------
"from ansible.module_utils.network.avi.avi import (
    avi_common_argument_spec, HAS_AVI)
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```  "
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
default = 60
type = (-TRAFFICCLONEPROFILE, VSVIP, WAFPOLICY, WAFPROFILE, ERRORPAGEPROFILE, ERRORPAGEBODY, L4POLICYSET, SERVICEENGINE, DEBUGSERVICEENGINE)
type: bool
required = true
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
- AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
+ AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
"
-------------------------------------------------------------------------
"```python
default = 60
type: bool
required: true
```"
-------------------------------------------------------------------------
"type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
type: bool
default = 60
required = true
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
type: bool
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)

AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
    - Allowed values are 1-16.
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
    - Allowed values are 1-16.
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"- Enum options - SE_AUTO_REBALANCE_CPU, SE_AUTO_REBALANCE_PPS, SE_AUTO_REBALANCE_MBPS, SE_AUTO_REBALANCE_OPEN_CONNS, SE_AUTO_REBALANCE_CPS.
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='SE_AUTO_REBALANCE_CPU', ctx=Load())), Name(id='SE_AUTO_REBALANCE_PPS', ctx=Load()), Name(id='SE_AUTO_REBALANCE_MBPS', ctx=Load()), Name(id='SE_AUTO_REBALANCE_OPEN_CONNS', ctx=Load()), Name(id='SE_AUTO_REBALANCE_CPS', ctx=Load())], ctx=Load()))
```"
-------------------------------------------------------------------------
"- Enum options - SE_AUTO_REBALANCE_CPU, SE_AUTO_REBALANCE_PPS, SE_AUTO_REBALANCE_MBPS, SE_AUTO_REBALANCE_OPEN_CONNS, SE_AUTO_REBALANCE_CPS.
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))

AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)

AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)

AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```  "
-------------------------------------------------------------------------
"type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
    - Default value when not specified in API or module is interpreted by Avi Controller as True.
type: bool
    - Default value when not specified in API or module is interpreted by Avi Controller as True.
type: bool
"
-------------------------------------------------------------------------
"```python
type: bool
    - Default value when not specified in API or module is interpreted by Avi Controller as True.
type: bool
    - Default value when not specified in API or module is interpreted by Avi Controller as True.
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
type: bool
    - Default value when not specified in API or module is interpreted by Avi Controller as True.
```"
-------------------------------------------------------------------------
"type: bool
    - Default value when not specified in API or module is interpreted by Avi Controller as True.
type: bool
    - Default value when not specified in API or module is interpreted by Avi Controller as True.
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[
    UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())),
    Name(id='VSVIP', ctx=Load()),
    Name(id='WAFPOLICY', ctx=Load()),
    Name(id='WAFPROFILE', ctx=Load()),
    Name(id='ERRORPAGEPROFILE', ctx=Load()),
    Name(id='ERRORPAGEBODY', ctx=Load()),
    Name(id='L4POLICYSET', ctx=Load()),
    Name(id='SERVICEENGINE', ctx=Load()),
    Name(id='DEBUGSERVICEENGINE', ctx=Load())
], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```  "
-------------------------------------------------------------------------
"type: bool
type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
- AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
+ Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
+ AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
+ AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"- AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
+ AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
type: bool
default: 60
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
"
-------------------------------------------------------------------------
"+ AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
- AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
type: bool
type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
type: bool
type: bool
type: bool
type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
```  "
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```  "
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"- Mostly used during the creation of shared vs, this field refers to entities that can be shared across virtual services.
"
-------------------------------------------------------------------------
"Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))"
-------------------------------------------------------------------------
"- Mostly used during the creation of shared vs, this field refers to entities that can be shared across virtual services.
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"type: bool
"
-------------------------------------------------------------------------
"```python
Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"type: bool
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"required: true
"
-------------------------------------------------------------------------
"```python
- AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
+ Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
- Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))

+ AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)

+ AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
- AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
?                           ---                            ^ ^ --- ^^^^^^^^^^^^^^^^^^

+ AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
?                           ^ ++++++                                     ^^^^

```  "
-------------------------------------------------------------------------
"required: true
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"required: true
"
-------------------------------------------------------------------------
"```python
+ AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
- AnnAssign(target=Name(id='required', ctx=Store()), annotation=Name(id='true', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"required: true
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"mode=dict(type='str', required=True),
"
-------------------------------------------------------------------------
"+ AnnAssign(target=Name(id='mode', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)
+ AnnAssign(target=Name(id='mode', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)"
-------------------------------------------------------------------------
"mode=dict(type='str', required=True),
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"waf_profile_ref=dict(type='str', required=True),
"
-------------------------------------------------------------------------
"```python
- AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
+ Expr(value=Tuple(elts=[UnaryOp(op=USub(), operand=Name(id='TRAFFICCLONEPROFILE', ctx=Load())), Name(id='VSVIP', ctx=Load()), Name(id='WAFPOLICY', ctx=Load()), Name(id='WAFPROFILE', ctx=Load()), Name(id='ERRORPAGEPROFILE', ctx=Load()), Name(id='ERRORPAGEBODY', ctx=Load()), Name(id='L4POLICYSET', ctx=Load()), Name(id='SERVICEENGINE', ctx=Load()), Name(id='DEBUGSERVICEENGINE', ctx=Load())], ctx=Load()))
- AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
+ AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
- AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=60), simple=1)
+ AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)
```"
-------------------------------------------------------------------------
"waf_profile_ref=dict(type='str', required=True),
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"default: ''
default: ''
default: ''
"
-------------------------------------------------------------------------
"```python
- AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=''), simple=1)
+ AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=''), simple=1)
- AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=''), simple=1)
```"
-------------------------------------------------------------------------
"default: ''
default: ''
default: ''
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"default: ""16.4.4""
"
-------------------------------------------------------------------------
"+ AnnAssign(target=Name(id='default', ctx=Store()), annotation=Constant(value=""16.4.4""), simple=1)"
-------------------------------------------------------------------------
"default: ""16.4.4""
"
-------------------------------------------------------------------------
"Recom
PRs: 36821, 36860"
-------------------------------------------------------------------------
=========================================================================
"choices: [""ssh"", ""vault"", ""net"", ""scm"", ""aws"", ""vmware"", ""satellite6"", ""cloudforms"", ""gce"", ""azure_rm"", ""openstack"", ""rhv"", ""insights"", ""tower""]
"
-------------------------------------------------------------------------
"```yaml
options:
  description:
    - Type of credential being added.
  required: True
  choices: [""ssh"", ""vault"", ""net"", ""scm"", ""aws"", ""vmware"", ""satellite6"", ""cloudforms"", ""gce"", ""azure_rm"", ""openstack"", ""rhv"", ""insights"", ""tower""]
host:
  description:
    - Host for this credential.
```  "
-------------------------------------------------------------------------
"choices: [""ssh"", ""vault"", ""net"", ""scm"", ""aws"", ""vmware"", ""satellite6"", ""cloudforms"", ""gce"", ""azure_rm"", ""openstack"", ""rhv"", ""insights"", ""tower""]
"
-------------------------------------------------------------------------
"Recom
PRs: 36587, 36807"
-------------------------------------------------------------------------
=========================================================================
"origin: rpool/myfs@mysnapshot
"
-------------------------------------------------------------------------
"EXAMPLES = '''
   zfs:
     name: rpool/cloned_fs
     state: present
     origin: rpool/myfs@mysnapshot

 - name: Destroy a filesystem
   zfs:
    state: absent
    name: rpool/cloned_fs
'''"
-------------------------------------------------------------------------
"origin: rpool/myfs@mysnapshot
"
-------------------------------------------------------------------------
"Recom
PRs: 36685, 36686"
-------------------------------------------------------------------------
=========================================================================
"origin = self.module.params.get('origin', None)
"
-------------------------------------------------------------------------
"```python
origin = self.module.params.get('origin', None)
```"
-------------------------------------------------------------------------
"origin = self.module.params.get('origin', None)
"
-------------------------------------------------------------------------
"Recom
PRs: 36685, 36686"
-------------------------------------------------------------------------
=========================================================================
"if prop == 'volsize':
    cmd = ['-V', value]
elif prop == 'volblocksize':
    cmd = ['-b', value]
else:
    cmd = ['-o', '%s=""%s""' % (prop, value)]
n and action == 'clone':
"
-------------------------------------------------------------------------
"```python
if prop == 'volsize':
    cmd = ['-V', value]
elif prop == 'volblocksize':
    cmd = ['-b', value]
elif prop == 'origin' and action == 'clone':
    cmd = ['-o', '%s=""%s""' % (prop, value)]
else:
    cmd = ['-o', '%s=""%s""' % (prop, value)]
```"
-------------------------------------------------------------------------
"if prop == 'volsize':
    cmd = ['-V', value]
elif prop == 'volblocksize':
    cmd = ['-b', value]
else:
    cmd = ['-o', '%s=""%s""' % (prop, value)]
n and action == 'clone':
"
-------------------------------------------------------------------------
"Recom
PRs: 36685, 36686"
-------------------------------------------------------------------------
=========================================================================
"origin=dict(type='str', default=None),
# createparent is meaningless after 2.3, but this shouldn't
# be removed until check_invalid_arguments is.
"
-------------------------------------------------------------------------
"```python
def main():
    argument_spec=dict(
        name=dict(type='str', required=True),
        state=dict(type='str', required=True, choices=['absent', 'present']),
        origin=dict(type='str', default=None),
    ),
```"
-------------------------------------------------------------------------
"origin=dict(type='str', default=None),
# createparent is meaningless after 2.3, but this shouldn't
# be removed until check_invalid_arguments is.
"
-------------------------------------------------------------------------
"Recom
PRs: 36685, 36686"
-------------------------------------------------------------------------
=========================================================================
"state = module.params.get('state')
name = module.params.get('name')

if module.params.get('origin') and '@' in name:
    module.fail_json(msg='cannot specify origin when operating on a snapshot')
"
-------------------------------------------------------------------------
"```python
state = module.params.get('state')
name = module.params.get('name')

if module.params.get('origin') and '@' in name:
    module.fail_json(msg='cannot specify origin when operating on a snapshot')
```"
-------------------------------------------------------------------------
"state = module.params.get('state')
name = module.params.get('name')

if module.params.get('origin') and '@' in name:
    module.fail_json(msg='cannot specify origin when operating on a snapshot')
"
-------------------------------------------------------------------------
"Recom
PRs: 36685, 36686"
-------------------------------------------------------------------------
=========================================================================
"module.params['extra_zfs_properties'] = properties
"
-------------------------------------------------------------------------
"```python
import os
from __future__ import print_function
import ansible.module_utils.basic

def main():
    for prop, value in module.params['extra_zfs_properties'].items():
        properties[prop] = value

    # Reverse the boolification of zfs properties

    module.params['extra_zfs_properties'] = properties
```"
-------------------------------------------------------------------------
"module.params['extra_zfs_properties'] = properties
"
-------------------------------------------------------------------------
"Recom
PRs: 36685, 36686"
-------------------------------------------------------------------------
=========================================================================
"- proto: all
  # in the 'proto' attribute, if you specify -1, all, or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6),
  # traffic on all ports is allowed, regardless of any ports you specify
  from_port: 10050 # this value is ignored
  to_port: 10050 # this value is ignored
  cidr_ip: 10.0.0.0/8

"
-------------------------------------------------------------------------
"- proto: all
  # in the 'proto' attribute, if you specify -1, all, or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6),
  # traffic on all ports is allowed, regardless of any ports you specify
  from_port: 10050 # this value is ignored
  to_port: 10050 # this value is ignored
  cidr_ip: 10.0.0.0/8"
-------------------------------------------------------------------------
"- proto: all
  # in the 'proto' attribute, if you specify -1, all, or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6),
  # traffic on all ports is allowed, regardless of any ports you specify
  from_port: 10050 # this value is ignored
  to_port: 10050 # this value is ignored
  cidr_ip: 10.0.0.0/8

"
-------------------------------------------------------------------------
"Recom
PRs: 36586, 36627"
-------------------------------------------------------------------------
=========================================================================
"res['_ansible_item_label'] = templar.template(label, cache=False)
"
-------------------------------------------------------------------------
"```python
res['_ansible_item_label'] = templar.template(label, cache=False)
```"
-------------------------------------------------------------------------
"res['_ansible_item_label'] = templar.template(label, cache=False)
"
-------------------------------------------------------------------------
"Recom
PRs: 36430, 36609"
-------------------------------------------------------------------------
=========================================================================
"def _copy_included_file(self, included_file):
    '''
    A proven safe and performant way to create a copy of an included file
    '''
    ti_copy = included_file._task.copy(exclude_parent=True)
    ti_copy._parent = included_file._task._parent

    temp_vars = ti_copy.vars.copy()
    temp_vars.update(included_file._args)

    ti_copy.vars = temp_vars

    return ti_copy

"
-------------------------------------------------------------------------
"```python
def _copy_included_file(self, included_file):
    '''
    A proven safe and performant way to create a copy of an included file
    '''
    ti_copy = included_file._task.copy(exclude_parent=True)
    ti_copy._parent = included_file._task._parent

    temp_vars = ti_copy.vars.copy()
    temp_vars.update(included_file._args)

    ti_copy.vars = temp_vars

    return ti_copy
```"
-------------------------------------------------------------------------
"def _copy_included_file(self, included_file):
    '''
    A proven safe and performant way to create a copy of an included file
    '''
    ti_copy = included_file._task.copy(exclude_parent=True)
    ti_copy._parent = included_file._task._parent

    temp_vars = ti_copy.vars.copy()
    temp_vars.update(included_file._args)

    ti_copy.vars = temp_vars

    return ti_copy

"
-------------------------------------------------------------------------
"Recom
PRs: 36470, 36526"
-------------------------------------------------------------------------
=========================================================================
"ti_copy = self._copy_included_file(included_file)
"
-------------------------------------------------------------------------
"```python
ti_copy = self._copy_included_file(included_file)
```"
-------------------------------------------------------------------------
"ti_copy = self._copy_included_file(included_file)
"
-------------------------------------------------------------------------
"Recom
PRs: 36470, 36526"
-------------------------------------------------------------------------
=========================================================================
"new_ir = self._copy_included_file(included_file)
new_blocks, handler_blocks = new_ir.get_block_list(
"
-------------------------------------------------------------------------
"```python
from ansible import __future__, __main__
from ansible.playbook.task import Task
from ansible.plugins.strategy import ansible.plugins.strategy
from ansible.plugins.loader import ansible.plugins.loader
from ansible.utils.display import Display
from ansible.errors import ansible.errors
from ansible.executor.play_iterator import ansible.executor.play_iterator
from ansible.playbook.block import ansible.playbook.block
from ansible.module_utils.six import ansible.module_utils.six
from ansible.playbook.included_file import ansible.playbook.included_file
from ansible.module_utils._text import ansible.module_utils._text
import ansible.template

new_ir = self._copy_included_file(included_file)
new_blocks, handler_blocks = new_ir.get_block_list()
```"
-------------------------------------------------------------------------
"new_ir = self._copy_included_file(included_file)
"
-------------------------------------------------------------------------
"Recom
PRs: 36470, 36526"
-------------------------------------------------------------------------
=========================================================================
"new_ir = self._copy_included_file(included_file)
"
-------------------------------------------------------------------------
"```python
new_ir = self._copy_included_file(included_file)
```"
-------------------------------------------------------------------------
"new_ir = self._copy_included_file(included_file)
"
-------------------------------------------------------------------------
"Recom
PRs: 36470, 36526"
-------------------------------------------------------------------------
=========================================================================
"def _copy_included_file(self, included_file):
    '''
    A proven safe and performant way to create a copy of an included file
    '''
    ti_copy = included_file._task.copy(exclude_parent=True)
    ti_copy._parent = included_file._task._parent

    temp_vars = ti_copy.vars.copy()
    temp_vars.update(included_file._args)

    ti_copy.vars = temp_vars

    return ti_copy

"
-------------------------------------------------------------------------
"```python
def _copy_included_file(self, included_file):
    '''
    A proven safe and performant way to create a copy of an included file
    '''
    ti_copy = included_file._task.copy(exclude_parent=True)
    ti_copy._parent = included_file._task._parent

    temp_vars = ti_copy.vars.copy()
    temp_vars.update(included_file._args)

    ti_copy.vars = temp_vars

    return ti_copy
```"
-------------------------------------------------------------------------
"def _copy_included_file(self, included_file):
    '''
    A proven safe and performant way to create a copy of an included file
    '''
    ti_copy = included_file._task.copy(exclude_parent=True)
    ti_copy._parent = included_file._task._parent

    temp_vars = ti_copy.vars.copy()
    temp_vars.update(included_file._args)

    ti_copy.vars = temp_vars

    return ti_copy

"
-------------------------------------------------------------------------
"Recom
PRs: 36470, 36525"
-------------------------------------------------------------------------
=========================================================================
"ti_copy = self._copy_included_file(included_file)
"
-------------------------------------------------------------------------
"```python
ti_copy = self._copy_included_file(included_file, data)
```"
-------------------------------------------------------------------------
"ti_copy = self._copy_included_file(included_file)
"
-------------------------------------------------------------------------
"Recom
PRs: 36470, 36525"
-------------------------------------------------------------------------
=========================================================================
"new_ir = self._copy_included_file(included_file)
new_blocks, handler_blocks = new_ir.get_block_list(
"
-------------------------------------------------------------------------
"```python
import ansible.plugins.loader
import ansible.plugins.strategy
import ansible.template
import ansible.playbook.included_file
from ansible.module_utils._text import to_text
from ansible.executor.play_iterator import PlayIterator
from ansible.playbook.block import Block

new_ir = self._copy_included_file(included_file)
new_blocks, handler_blocks = new_ir.get_block_list()
```  "
-------------------------------------------------------------------------
"new_ir = self._copy_included_file(included_file)
new_blocks, handler_blocks = new_ir.get_block_list(
"
-------------------------------------------------------------------------
"Recom
PRs: 36470, 36525"
-------------------------------------------------------------------------
=========================================================================
"new_ir = self._copy_included_file(included_file)
"
-------------------------------------------------------------------------
"```python
new_ir = self._copy_included_file(included_file)
```"
-------------------------------------------------------------------------
"new_ir = self._copy_included_file(included_file)
"
-------------------------------------------------------------------------
"Recom
PRs: 36470, 36525"
-------------------------------------------------------------------------
=========================================================================
"import time

from botocore.exceptions import BotoCoreError, ClientError
from botocore.config import Config
"
-------------------------------------------------------------------------
"```python
import time
from botocore.exceptions import BotoCoreError, ClientError
from botocore.config import Config
```"
-------------------------------------------------------------------------
"import time

from botocore.exceptions import BotoCoreError, ClientError
from botocore.config import Config
"
-------------------------------------------------------------------------
"Recom
PRs: 36354, 36515"
-------------------------------------------------------------------------
=========================================================================
"def get_verification_attributes(connection, module, identity, retries=0, retryDelay=10):
# Unpredictably get_identity_verification_attributes doesn't include the identity even when we've
# just registered it. Suspect this is an eventual consistency issue on AWS side.
# Don't want this complexity exposed users of the module as they'd have to retry to ensure
# a consistent return from the module.
# To avoid this we have an internal retry that we use only after registering the identity.
for attempt in range(0, retries  1):
    response = call_and_handle_errors(module, connection.get_identity_verification_attributes, Identities=[identity])
    identity_verification = response['VerificationAttributes']
    if identity in identity_verification:
        break
    time.sleep(retryDelay)
get_identity_notifications(connection, module, identity, retries=0, retryDelay=10):
# Unpredictably get_identity_notifications doesn't include the notifications when we've
# just registered the identity.
# Don't want this complexity exposed users of the module as they'd have to retry to ensure
# a consistent return from the module.
# To avoid this we have an internal retry that we use only when getting the current notification
# status for return.
for attempt in range(0, retries  1):
    response = call_and_handle_errors(module, connection.get_identity_notification_attributes, Identities=[identity])
    notification_attributes = response['NotificationAttributes']

    # No clear AWS docs on when this happens, but it appears sometimes identities are not included in
    # in the notification attributes when the identity is first registered. Suspect that this is caused by
    # eventual consistency within the AWS services. It's been observed in builds so we need to handle it.
    #
    # When this occurs, just return None and we'll assume no identity notification settings have been changed
    # from the default which is reasonable if this is just eventual consistency on creation.
    # See: https://github.com/ansible/ansible/issues/36065
    if identity in notification_attributes:
        break
    else:
        # Paranoia check for coding errors, we only requested one identity, so if we get a different one
        # something has gone very wrong.
        if len(notification_attributes) != 0:
            module.fail_json(
                msg='Unexpected identity found in notification attributes, expected {0} but got {1!r}.'.format(
                    identity,
                    notification_attributes.keys(),
                )
            )
    time.sleep(retryDelay)
"
-------------------------------------------------------------------------
"```python
def get_verification_attributes(connection, module, identity, retries=0, retryDelay=10):
    for attempt in range(0, retries + 1):
        response = call_and_handle_errors(module, connection.get_identity_verification_attributes, Identities=[identity])
        identity_verification = response['VerificationAttributes']
        if identity in identity_verification:
            break
        time.sleep(retryDelay)

def get_identity_notifications(connection, module, identity, retries=0, retryDelay=10):
    for attempt in range(0, retries + 1):
        response = call_and_handle_errors(module, connection.get_identity_notification_attributes, Identities=[identity])
        notification_attributes = response['NotificationAttributes']

        if identity in notification_attributes:
            break
        else:
            if len(notification_attributes) != 0:
                module.fail_json(
                    msg='Unexpected identity found in notification attributes, expected {0} but got {1!r}.'.format(
                        identity,
                        notification_attributes.keys(),
                    )
                )
        time.sleep(retryDelay)
```"
-------------------------------------------------------------------------
"def get_verification_attributes(connection, module, identity, retries=0, retryDelay=10):
# Unpredictably get_identity_verification_attributes doesn't include the identity even when we've
# just registered it. Suspect this is an eventual consistency issue on AWS side.
# Don't want this complexity exposed users of the module as they'd have to retry to ensure
# a consistent return from the module.
# To avoid this we have an internal retry that we use only after registering the identity.
for attempt in range(0, retries  1):
    response = call_and_handle_errors(module, connection.get_identity_verification_attributes, Identities=[identity])
    identity_verification = response['VerificationAttributes']
    if identity in identity_verification:
        break
    time.sleep(retryDelay)
get_identity_notifications(connection, module, identity, retries=0, retryDelay=10):
# Unpredictably get_identity_notifications doesn't include the notifications when we've
# just registered the identity.
# Don't want this complexity exposed users of the module as they'd have to retry to ensure
# a consistent return from the module.
# To avoid this we have an internal retry that we use only when getting the current notification
# status for return.
for attempt in range(0, retries  1):
    response = call_and_handle_errors(module, connection.get_identity_notification_attributes, Identities=[identity])
    notification_attributes = response['NotificationAttributes']

    # No clear AWS docs on when this happens, but it appears sometimes identities are not included in
    # in the notification attributes when the identity is first registered. Suspect that this is caused by
    # eventual consistency within the AWS services. It's been observed in builds so we need to handle it.
    #
    # When this occurs, just return None and we'll assume no identity notification settings have been changed
    # from the default which is reasonable if this is just eventual consistency on creation.
    # See: https://github.com/ansible/ansible/issues/36065
    if identity in notification_attributes:
        break
    else:
        # Paranoia check for coding errors, we only requested one identity, so if we get a different one
        # something has gone very wrong.
        if len(notification_attributes) != 0:
            module.fail_json(
                msg='Unexpected identity found in notification attributes, expected {0} but got {1!r}.'.format(
                    identity,
                    notification_attributes.keys(),
                )
            )
    time.sleep(retryDelay)
"
-------------------------------------------------------------------------
"Recom
PRs: 36354, 36515"
-------------------------------------------------------------------------
=========================================================================
"if identity_notifications is None:
    # If there is no configuration for notifications cannot be being sent to topics
    # hence assume None as the current state.
    current = None
elif topic_key in identity_notifications:
    # If there is information on the notifications setup but no information on the
    # particular notification topic it's pretty safe to assume there's no topic for
    # this notification. AWS API docs suggest this information will always be
    # included but best to be defensive
"
-------------------------------------------------------------------------
"```python
if identity_notifications is None:
    current = None
elif topic_key in identity_notifications:
    current = identity_notifications[topic_key]
```"
-------------------------------------------------------------------------
"if identity_notifications is None:
    # If there is no configuration for notifications cannot be being sent to topics
    # hence assume None as the current state.
    current = None
elif topic_key in identity_notifications:
    # If there is information on the notifications setup but no information on the
    # particular notification topic it's pretty safe to assume there's no topic for
    # this notification. AWS API docs suggest this information will always be
    # included but best to be defensive
"
-------------------------------------------------------------------------
"Recom
PRs: 36354, 36515"
-------------------------------------------------------------------------
=========================================================================
"if identity_notifications is None:
    # If there is no configuration for topic notifications, headers cannot be being
    # forwarded, hence assume false.
    current = False
elif header_key in identity_notifications:
    # AWS API doc indicates that the headers in fields are optional. Unfortunately
    # it's not clear on what this means. But it's a pretty safe assumption that it means
    # headers are not included since most API consumers would interpret absence as false.
"
-------------------------------------------------------------------------
"```python
if identity_notifications is None:
    current = False
elif header_key in identity_notifications:
    current = identity_notifications[header_key]
else:
    current = False
```"
-------------------------------------------------------------------------
"if identity_notifications is None:
    # If there is no configuration for topic notifications, headers cannot be being
    # forwarded, hence assume false.
    current = False
elif header_key in identity_notifications:
    # AWS API doc indicates that the headers in fields are optional. Unfortunately
    # it's not clear on what this means. But it's a pretty safe assumption that it means
    # headers are not included since most API consumers would interpret absence as false.
"
-------------------------------------------------------------------------
"Recom
PRs: 36354, 36515"
-------------------------------------------------------------------------
=========================================================================
"if identity_notifications is None:
    # AWS requires feedback forwarding to be enabled unless bounces and complaints
    # are being handled by SNS topics. So in the absence of identity_notifications
    # information existing feedback forwarding must be on.
    current = True
elif 'ForwardingEnabled' in identity_notifications:
    # If there is information on the notifications setup but no information on the
    # forwarding state it's pretty safe to assume forwarding is off. AWS API docs
    # suggest this information will always be included but best to be defensive
"
-------------------------------------------------------------------------
"```python
if identity_notifications is None:
    current = True
elif 'ForwardingEnabled' in identity_notifications:
    current = identity_notifications['ForwardingEnabled']
else:
    current = False
```"
-------------------------------------------------------------------------
"if identity_notifications is None:
    # AWS requires feedback forwarding to be enabled unless bounces and complaints
    # are being handled by SNS topics. So in the absence of identity_notifications
    # information existing feedback forwarding must be on.
    current = True
elif 'ForwardingEnabled' in identity_notifications:
    # If there is information on the notifications setup but no information on the
    # forwarding state it's pretty safe to assume forwarding is off. AWS API docs
    # suggest this information will always be included but best to be defensive
"
-------------------------------------------------------------------------
"Recom
PRs: 36354, 36515"
-------------------------------------------------------------------------
=========================================================================
"if changed or identity_notifications is None:
    identity_notifications = get_identity_notifications(connection, module, identity, retries=4)
"
-------------------------------------------------------------------------
"```python
if changed or identity_notifications is None:
    identity_notifications = get_identity_notifications(connection, module, identity, retries=4)
```"
-------------------------------------------------------------------------
"if changed or identity_notifications is None:
    identity_notifications = get_identity_notifications(connection, module, identity, retries=4)
"
-------------------------------------------------------------------------
"Recom
PRs: 36354, 36515"
-------------------------------------------------------------------------
=========================================================================
"verification_attributes = get_verification_attributes(connection, module, identity, retries=4)
erification_attributes is None:
module.fail_json(msg='Unable to load identity verification attributes after registering identity.')

otification_attributes is None:
module.fail_json(msg='Unable to load identity notification attributes.')

"
-------------------------------------------------------------------------
"```python
verification_attributes = get_verification_attributes(connection, module, identity, retries=4)

if verification_attributes is None:
    module.fail_json(msg='Unable to load identity verification attributes after registering identity.')

notification_attributes = get_identity_notification_attributes(connection, module, identity)

if notification_attributes is None:
    module.fail_json(msg='Unable to load identity notification attributes.')
```"
-------------------------------------------------------------------------
"verification_attributes = get_verification_attributes(connection, module, identity, retries=4)
erification_attributes is None:
module.fail_json(msg='Unable to load identity verification attributes after registering identity.')

otification_attributes is None:
module.fail_json(msg='Unable to load identity notification attributes.')

"
-------------------------------------------------------------------------
"Recom
PRs: 36354, 36515"
-------------------------------------------------------------------------
=========================================================================
"# Allow up to 10 attempts to call the SES APIs before giving up (9 retries).
# SES APIs seem to have a much lower throttling threshold than most of the rest of the AWS APIs.
# Docs say 1 call per second. This shouldn't actually be a big problem for normal usage, but
# the ansible build runs multiple instances of the test in parallel.
# As a result there are build failures due to throttling that exceeds boto's default retries.
# The back-off is exponential, so upping the retry attempts allows multiple parallel runs
# to succeed.
boto_core_config = Config(retries={'max_attempts': 9})
connection = boto3_conn(module, conn_type='client', resource='ses', region=region, endpoint=ec2_url, config=boto_core_config, **aws_connect_params)
"
-------------------------------------------------------------------------
"boto_core_config = Config(retries={'max_attempts': 10})
connection = boto3_conn(module, conn_type='client', resource='ses', region=region, endpoint=ec2_url, config=boto_core_config, **aws_connect_params)"
-------------------------------------------------------------------------
"# Allow up to 10 attempts to call the SES APIs before giving up (9 retries).
# SES APIs seem to have a much lower throttling threshold than most of the rest of the AWS APIs.
# Docs say 1 call per second. This shouldn't actually be a big problem for normal usage, but
# the ansible build runs multiple instances of the test in parallel.
# As a result there are build failures due to throttling that exceeds boto's default retries.
# The back-off is exponential, so upping the retry attempts allows multiple parallel runs
# to succeed.
boto_core_config = Config(retries={'max_attempts': 9})
connection = boto3_conn(module, conn_type='client', resource='ses', region=region, endpoint=ec2_url, config=boto_core_config, **aws_connect_params)
"
-------------------------------------------------------------------------
"Recom
PRs: 36354, 36515"
-------------------------------------------------------------------------
=========================================================================
"
"
-------------------------------------------------------------------------
"```python
import botocore.exceptions
import ansible.module_utils.ec2
import traceback
import ansible.module_utils.basic

def main():
    pass

if __name__ == '__main__':
    main()
```"
-------------------------------------------------------------------------
"
"
-------------------------------------------------------------------------
"Recom
PRs: 36354, 36515"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils._text import to_native
"
-------------------------------------------------------------------------
from ansible.module_utils._text import to_native
-------------------------------------------------------------------------
"from ansible.module_utils._text import to_native
"
-------------------------------------------------------------------------
"Recom
PRs: 35302, 36512"
-------------------------------------------------------------------------
=========================================================================
"module.fail_json(msg=""Unable to describe VPCs {0}: {1}"".format(vpc_ids, to_native(e)),
                 exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))
pt botocore.exceptions.BotoCoreError as e:
module.fail_json(msg=""Unable to describe VPCs {0}: {1}"".format(vpc_ids, to_native(e)),
                 exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Unable to describe VPCs {0}: {1}"".format(vpc_ids, to_native(e)),
                     exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"module.fail_json(msg=""Unable to describe VPCs {0}: {1}"".format(vpc_ids, to_native(e)),
                 exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))
pt botocore.exceptions.BotoCoreError as e:
module.fail_json(msg=""Unable to describe VPCs {0}: {1}"".format(vpc_ids, to_native(e)),
                 exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 35302, 36512"
-------------------------------------------------------------------------
=========================================================================
"if e.response[""Error""][""Message""] == ""The functionality you requested is not available in this region."":
    cl_enabled = {'Vpcs': [{'VpcId': vpc_id, 'ClassicLinkEnabled': False} for vpc_id in vpc_list]}
else:
    module.fail_json(msg=""Unable to describe if ClassicLink is enabled: {0}"".format(to_native(e)),
                     exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))
pt botocore.exceptions.BotoCoreError as e:
module.fail_json(msg=""Unable to describe if ClassicLink is enabled: {0}"".format(to_native(e)),
                 exception=traceback.format_exc())
if e.response[""Error""][""Message""] == ""The functionality you requested is not available in this region."":
    cl_dns_support = {'Vpcs': [{'VpcId': vpc_id, 'ClassicLinkDnsSupported': False} for vpc_id in vpc_list]}
else:
    module.fail_json(msg=""Unable to describe if ClassicLinkDns is supported: {0}"".format(to_native(e)),
                     exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))
pt botocore.exceptions.BotoCoreError as e:
module.fail_json(msg=""Unable to describe if ClassicLinkDns is supported: {0}"".format(to_native(e)),
                 exception=traceback.format_exc())
error_message = ""Unable to describe VPC attribute {0}: {1}""
    module.fail_json(msg=error_message.format('enableDnsSupport', to_native(e)),
                     exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=error_message.format('enableDnsSupport', to_native(e)),
                     exception=traceback.format_exc())
    module.fail_json(msg=error_message.format('enableDnsHostnames', to_native(e)),
                     exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=error_message.format('enableDnsHostnames', to_native(e)),
                     exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
def describe_vpcs(connection, module):
    try:
        cl_enabled = connection.describe_vpc_classic_link(VpcIds=vpc_list)
    except botocore.exceptions.ClientError as e:
        if e.response[""Error""][""Message""] == ""The functionality you requested is not available in this region."":
            cl_enabled = {'Vpcs': [{'VpcId': vpc_id, 'ClassicLinkEnabled': False} for vpc_id in vpc_list]}
        else:
            module.fail_json(msg=""Unable to describe if ClassicLink is enabled: {0}"".format(to_native(e)),
                             exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))

    try:
        cl_dns_support = connection.describe_vpc_classic_link_dns_support(VpcIds=vpc_list)
    except botocore.exceptions.ClientError as e:
        if e.response[""Error""][""Message""] == ""The functionality you requested is not available in this region."":
            cl_dns_support = {'Vpcs': [{'VpcId': vpc_id, 'ClassicLinkDnsSupported': False} for vpc_id in vpc_list]}
        else:
            module.fail_json(msg=""Unable to describe if ClassicLinkDns is supported: {0}"".format(to_native(e)),
                             exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))

    for vpc in response['Vpcs']:
        try:
            dns_support = describe_vpc_attr_with_backoff(connection, vpc['VpcId'], 'enableDnsSupport')
        except botocore.exceptions.ClientError as e:
            error_message = ""Unable to describe VPC attribute {0}: {1}""
            module.fail_json(msg=error_message.format('enableDnsSupport', to_native(e)),
                             exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))

        try:
            dns_hostnames = describe_vpc_attr_with_backoff(connection, vpc['VpcId'], 'enableDnsHostnames')
        except botocore.exceptions.ClientError as e:
            error_message = ""Unable to describe VPC attribute {0}: {1}""
            module.fail_json(msg=error_message.format('enableDnsHostnames', to_native(e)),
                             exception=traceback.format_exc())
 ```"
-------------------------------------------------------------------------
"if e.response[""Error""][""Message""] == ""The functionality you requested is not available in this region."":
    cl_enabled = {'Vpcs': [{'VpcId': vpc_id, 'ClassicLinkEnabled': False} for vpc_id in vpc_list]}
else:
    module.fail_json(msg=""Unable to describe if ClassicLink is enabled: {0}"".format(to_native(e)),
                     exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))
pt botocore.exceptions.BotoCoreError as e:
module.fail_json(msg=""Unable to describe if ClassicLink is enabled: {0}"".format(to_native(e)),
                 exception=traceback.format_exc())
if e.response[""Error""][""Message""] == ""The functionality you requested is not available in this region."":
    cl_dns_support = {'Vpcs': [{'VpcId': vpc_id, 'ClassicLinkDnsSupported': False} for vpc_id in vpc_list]}
else:
    module.fail_json(msg=""Unable to describe if ClassicLinkDns is supported: {0}"".format(to_native(e)),
                     exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))
pt botocore.exceptions.BotoCoreError as e:
module.fail_json(msg=""Unable to describe if ClassicLinkDns is supported: {0}"".format(to_native(e)),
                 exception=traceback.format_exc())
error_message = ""Unable to describe VPC attribute {0}: {1}""
    module.fail_json(msg=error_message.format('enableDnsSupport', to_native(e)),
                     exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=error_message.format('enableDnsSupport', to_native(e)),
                     exception=traceback.format_exc())
    module.fail_json(msg=error_message.format('enableDnsHostnames', to_native(e)),
                     exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=error_message.format('enableDnsHostnames', to_native(e)),
                     exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 35302, 36512"
-------------------------------------------------------------------------
=========================================================================
"connection = boto3_conn(module, conn_type='client', resource='ec2', region=region, endpoint=ec2_url, **aws_connect_params)
"
-------------------------------------------------------------------------
"```python
connection = boto3_conn(module, region=region, endpoint=ec2_url, **aws_connect_params)
```"
-------------------------------------------------------------------------
"connection = boto3_conn(module, conn_type='client', resource='ec2', region=region, endpoint=ec2_url, **aws_connect_params)
"
-------------------------------------------------------------------------
"Recom
PRs: 35302, 36512"
-------------------------------------------------------------------------
=========================================================================
"params = boto3_tag_list_to_ansible_dict(response['Parameters'], tag_name_key_name=""Name"",
                                        tag_value_key_name=""Value"")
for i in terms:
    if i in params:
        ret.append(params[i])
    elif i in response['InvalidParameters']:
        ret.append(None)
    else:
        raise AnsibleError(""Ansible internal error: aws_ssm lookup failed to understand boto3 return value: {0}"".format(str(response)))
return ret
"
-------------------------------------------------------------------------
"```python
import boto3
from ansible.errors import AnsibleError
from ansible.plugins.lookup.aws_ssm import boto3_tag_list_to_ansible_dict

class LookupModule(LookupBase):
    def run(self, terms, variables=None, **kwargs):
        client = boto3.client('ssm')
        try:
            response = client.get_parameters(**ssm_dict)
        except ClientError as e:
            raise AnsibleError(""SSM lookup exception: {0}"".format(to_native(e))

        params = boto3_tag_list_to_ansible_dict(response['Parameters'], tag_name_key_name=""Name"", tag_value_key_name=""Value"")
        ret = []
        for i in terms:
            if i in params:
                ret.append(params[i])
            elif i in response['InvalidParameters']:
                ret.append(None)
            else:
                raise AnsibleError(""Ansible internal error: aws_ssm lookup failed to understand boto3 return value: {0}"".format(str(response)))
        
        display.vvvv(""AWS_ssm path lookup returning: %s "" % str(ret))
        return ret
```"
-------------------------------------------------------------------------
"params = boto3_tag_list_to_ansible_dict(response['Parameters'], tag_name_key_name=""Name"",
                                        tag_value_key_name=""Value"")
for i in terms:
    if i in params:
        ret.append(params[i])
    elif i in response['InvalidParameters']:
        ret.append(None)
    else:
        raise AnsibleError(""Ansible internal error: aws_ssm lookup failed to understand boto3 return value: {0}"".format(str(response)))
return ret
"
-------------------------------------------------------------------------
"Recom
PRs: 36456, 36492"
-------------------------------------------------------------------------
=========================================================================
"missing_variable_response = copy(simple_variable_success_response)
missing_variable_response['Parameters'] = []
missing_variable_response['InvalidParameters'] = ['missing_variable']

some_missing_variable_response = copy(simple_variable_success_response)
some_missing_variable_response['Parameters'] = [
{'Name': 'simple', 'Type': 'String', 'Value': 'simple_value', 'Version': 1},
{'Name': '/testpath/won', 'Type': 'String', 'Value': 'simple_value_won', 'Version': 1}

_missing_variable_response['InvalidParameters'] = ['missing_variable']
"
-------------------------------------------------------------------------
"```python
missing_variable_response = copy(simple_variable_success_response)
missing_variable_response['Parameters'] = []
missing_variable_response['InvalidParameters'] = ['missing_variable']

some_missing_variable_response = copy(simple_variable_success_response)
some_missing_variable_response['Parameters'] = [
    {'Name': 'simple', 'Type': 'String', 'Value': 'simple_value', 'Version': 1},
    {'Name': '/testpath/won', 'Type': 'String', 'Value': 'simple_value_won', 'Version': 1}
]

missing_variable_response['InvalidParameters'] = ['missing_variable']
```"
-------------------------------------------------------------------------
"missing_variable_response = copy(simple_variable_success_response)
missing_variable_response['Parameters'] = []
missing_variable_response['InvalidParameters'] = ['missing_variable']

some_missing_variable_response = copy(simple_variable_success_response)
some_missing_variable_response['Parameters'] = [
{'Name': 'simple', 'Type': 'String', 'Value': 'simple_value', 'Version': 1},
{'Name': '/testpath/won', 'Type': 'String', 'Value': 'simple_value_won', 'Version': 1}

_missing_variable_response['InvalidParameters'] = ['missing_variable']
"
-------------------------------------------------------------------------
"Recom
PRs: 36456, 36492"
-------------------------------------------------------------------------
=========================================================================
"def test_return_none_for_missing_variable(mocker):
""""""
during jinja2 templates, we can't shouldn't normally raise exceptions since this blocks the ability to use defaults.

for this reason we return ```None``` for missing variables
""""""
boto3_double.Session.return_value.client.return_value.get_parameters.return_value = missing_variable_response
with mocker.patch.object(boto3, 'session', boto3_double):
    retval = lookup.run([""missing_variable""], {}, **dummy_credentials)
assert(retval[0] is None)


test_match_retvals_to_call_params_even_with_some_missing_variables(mocker):
""""""
If we get a complex list of variables with some missing and some not, we still have to return a
list which matches with the original variable list.
""""""
lookup = aws_ssm.LookupModule()
lookup._load_name = ""aws_ssm""

boto3_double = mocker.MagicMock()
boto3_double.Session.return_value.client.return_value.get_parameters.return_value = some_missing_variable_response

with mocker.patch.object(boto3, 'session', boto3_double):
    retval = lookup.run([""simple"", ""missing_variable"", ""/testpath/won"", ""simple""], {}, **dummy_credentials)
assert(retval == [""simple_value"", None, ""simple_value_won"", ""simple_value""])
"
-------------------------------------------------------------------------
"```python
def test_path_lookup_variable(mocker):
    get_path_fn.assert_called_with(Path=""/testpath"", Recursive=False, WithDecryption=True)

    lookup = aws_ssm.LookupModule()
    lookup._load_name = ""aws_ssm""

    boto3_double = mocker.MagicMock()
    error_response = {'Error': {'Code': 'ResourceNotFoundException', 'Message': 'Fake Testing Error'}}
    boto3_double.Session.return_value.client.return_value.get_parameters.return_value = error_response

    with mocker.patch.object(boto3, 'session', boto3_double):
        retval = lookup.run([""missing_variable""], {}, **dummy_credentials)
    assert(retval[0] is None)


def test_match_retvals_to_call_params_even_with_some_missing_variables(mocker):
    lookup = aws_ssm.LookupModule()
    lookup._load_name = ""aws_ssm""

    boto3_double = mocker.MagicMock()
    some_missing_variable_response = {""variables"": [""simple_value"", None, ""simple_value_won"", ""simple_value""]}
    boto3_double.Session.return_value.client.return_value.get_parameters.return_value = some_missing_variable_response

    with mocker.patch.object(boto3, 'session', boto3_double):
        retval = lookup.run([""simple"", ""missing_variable"", ""/testpath/won"", ""simple""], {}, **dummy_credentials)
    assert(retval == [""simple_value"", None, ""simple_value_won"", ""simple_value""])
```"
-------------------------------------------------------------------------
"def test_return_none_for_missing_variable(mocker):
""""""
during jinja2 templates, we can't shouldn't normally raise exceptions since this blocks the ability to use defaults.

for this reason we return ```None``` for missing variables
""""""
boto3_double.Session.return_value.client.return_value.get_parameters.return_value = missing_variable_response
with mocker.patch.object(boto3, 'session', boto3_double):
    retval = lookup.run([""missing_variable""], {}, **dummy_credentials)
assert(retval[0] is None)


test_match_retvals_to_call_params_even_with_some_missing_variables(mocker):
""""""
If we get a complex list of variables with some missing and some not, we still have to return a
list which matches with the original variable list.
""""""
lookup = aws_ssm.LookupModule()
lookup._load_name = ""aws_ssm""

boto3_double = mocker.MagicMock()
boto3_double.Session.return_value.client.return_value.get_parameters.return_value = some_missing_variable_response

with mocker.patch.object(boto3, 'session', boto3_double):
    retval = lookup.run([""simple"", ""missing_variable"", ""/testpath/won"", ""simple""], {}, **dummy_credentials)
assert(retval == [""simple_value"", None, ""simple_value_won"", ""simple_value""])
"
-------------------------------------------------------------------------
"Recom
PRs: 36456, 36492"
-------------------------------------------------------------------------
=========================================================================
"if path.endswith('.aws_ec2.yml') or path.endswith('.aws_ec2.yaml'):
e AnsibleParserError(""Not a ec2 inventory plugin configuration file"")
"
-------------------------------------------------------------------------
"```python
if path.endswith('.aws_ec2.yml') or path.endswith('.aws_ec2.yaml'):
    raise AnsibleParserError(""Not a ec2 inventory plugin configuration file"")
```"
-------------------------------------------------------------------------
"if path.endswith('.aws_ec2.yml') or path.endswith('.aws_ec2.yaml'):
e AnsibleParserError(""Not a ec2 inventory plugin configuration file"")
"
-------------------------------------------------------------------------
"Recom
PRs: 36387, 36459"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.network.common.utils import is_netmask, is_masklen, to_netmask, to_masklen
"
-------------------------------------------------------------------------
"from ansible.module_utils.network.common.utils import is_netmask, is_masklen, to_netmask, to_masklen, conditional, remove_default_spec"
-------------------------------------------------------------------------
"from ansible.module_utils.network.common.utils import is_netmask, is_masklen, to_netmask, to_masklen
"
-------------------------------------------------------------------------
"Recom
PRs: 35969, 36450"
-------------------------------------------------------------------------
=========================================================================
"tpl = string.Template(textwrap.dedent(""""""#!/bin/bash
  status_code=`curl --max-time 10 -v -k -s -i \
  if [[ $status_code == 201 ]]
"
-------------------------------------------------------------------------
"```python
import string
import textwrap

tpl = string.Template(textwrap.dedent(""""""#!/bin/bash
  status_code=$(curl --max-time 10 -v -k -s -i \
  if [[ $status_code == 201 ]]
```"
-------------------------------------------------------------------------
"tpl = string.Template(textwrap.dedent(""""""#!/bin/bash
  status_code=`curl --max-time 10 -v -k -s -i \
  if [[ $status_code == 201 ]]
"
-------------------------------------------------------------------------
"Recom
PRs: 35927, 35981"
-------------------------------------------------------------------------
=========================================================================
"spec['CreditSpecification'] = {'CpuCredits': params.get('cpu_credit_specification')}
"
-------------------------------------------------------------------------
"Add the required imports and modify the code snippet as follows:

```python
from ansible.module_utils.ec2 import boto3_conn

spec['CreditSpecification'] = {'CpuCredits': params.get('cpu_credit_specification')}
```"
-------------------------------------------------------------------------
"spec['CreditSpecification'] = {'CpuCredits': params.get('cpu_credit_specification')}
"
-------------------------------------------------------------------------
"Recom
PRs: 35927, 35981"
-------------------------------------------------------------------------
=========================================================================
"part['size'] = bytes_to_human((float(part['sectors']) * 512.0))
"
-------------------------------------------------------------------------
part['size'] = bytes_to_human((float(part['sectors']) * 512.0))
-------------------------------------------------------------------------
"part['size'] = self.module.pretty_bytes((float(part['sectors']) * 512.0))
"
-------------------------------------------------------------------------
"Recom
PRs: 34475, 34645"
-------------------------------------------------------------------------
=========================================================================
"d['size'] = bytes_to_human(float(d['sectors']) * 512.0)
"
-------------------------------------------------------------------------
"```python
d['size'] = bytes_to_human(float(d['sectors']) * 512.0)
```"
-------------------------------------------------------------------------
"d['size'] = self.module.pretty_bytes(float(d['sectors']) * 512.0)
"
-------------------------------------------------------------------------
"Recom
PRs: 34475, 34645"
-------------------------------------------------------------------------
=========================================================================
"kernel_memory='kernel_memory',
"
-------------------------------------------------------------------------
kernel_memory='kernel_memory'
-------------------------------------------------------------------------
"kernel_memory='kernel_memory',
"
-------------------------------------------------------------------------
"Recom
PRs: 30712, 34130"
-------------------------------------------------------------------------
=========================================================================
"oom_kill_disable='oom_killer',
"
-------------------------------------------------------------------------
"oom_kill_disable='oom_killer',"
-------------------------------------------------------------------------
"oom_kill_disable='oom_killer',
"
-------------------------------------------------------------------------
"Recom
PRs: 30712, 34130"
-------------------------------------------------------------------------
=========================================================================
"oom_killer=host_config.get('OomKillDisable'),
"
-------------------------------------------------------------------------
"```
oom_killer = host_config.get('OomKillDisable')
```"
-------------------------------------------------------------------------
"oom_killer=host_config.get('OomKillDisable'),
"
-------------------------------------------------------------------------
"Recom
PRs: 30712, 34130"
-------------------------------------------------------------------------
=========================================================================
"return serializer.body(obj, class_name, keep_readonly=True)
"
-------------------------------------------------------------------------
"return serializer.body(obj, class_name, keep_readonly=True)"
-------------------------------------------------------------------------
"return serializer.body(obj, class_name, keep_readonly=True)
"
-------------------------------------------------------------------------
"Recom
PRs: 33169, 33170"
-------------------------------------------------------------------------
=========================================================================
"if moid in ['group-d1', 'ha-folder-root']:
"
-------------------------------------------------------------------------
"```python
if moid in ['group-d1', 'ha-folder-root']:
```"
-------------------------------------------------------------------------
"try:
    moid = thisobj._moId
except AttributeError:
    moid = None
if moid in ['group-d1', 'ha-folder-root']:
"
-------------------------------------------------------------------------
"Recom
PRs: 31133, 32671"
-------------------------------------------------------------------------
=========================================================================
"blocks.append('\n'.join(lines))
"
-------------------------------------------------------------------------
"```python
import os
import __future__
import yaml
import collections
import __main__
import ansible.module_utils.network_common
import re
import ansible.utils.display
import ansible.errors
import textfsm
import json
import ansible.module_utils.six

def parse_cli(output, tmpl):
    if match_end:
        if lines:
            lines.append(line)
        block_started = False
 
    elif block_started:
        blocks.append('\n'.join(lines))
```"
-------------------------------------------------------------------------
"blocks.append('\n'.join(lines))
"
-------------------------------------------------------------------------
"Recom
PRs: 31092, 32458"
-------------------------------------------------------------------------
=========================================================================
"if needs_update('state') and not needs_update('vrf'):
    if want['state'] == 'stopped':
        add('shutdown')
    elif want['state'] == 'started':
        add('no shutdown')

    # switching operational vrfs here
    # need to add the desired state as well
"
-------------------------------------------------------------------------
"```python
if needs_update('state') and not needs_update('vrf'):
    if want['state'] == 'stopped':
        add('shutdown')
    elif want['state'] == 'started':
        add('no shutdown')

    # switching operational vrfs here
    # need to add the desired state as well
```"
-------------------------------------------------------------------------
"if needs_update('state') and not needs_update('vrf'):
    if want['state'] == 'stopped':
        add('shutdown')
    elif want['state'] == 'started':
        add('no shutdown')

    # switching operational vrfs here
    # need to add the desired state as well
"
-------------------------------------------------------------------------
"Recom
PRs: 32112, 32452"
-------------------------------------------------------------------------
=========================================================================
"def test_eos_eapi_change_from_default_vrf(self):
    set_module_args(dict(vrf='test'))
    commands = ['management api http-commands', 'vrf test', 'no shutdown']
    self.start_configured(changed=True, commands=commands)

"
-------------------------------------------------------------------------
"```python
def test_eos_eapi_change_from_default_vrf(self):
    set_module_args(dict(vrf='test'))
    commands = ['management api http-commands', 'vrf test', 'no shutdown']
    self.start_unconfigured(changed=True, commands=commands)
```"
-------------------------------------------------------------------------
"def test_eos_eapi_change_from_default_vrf(self):
    set_module_args(dict(vrf='test'))
    commands = ['management api http-commands', 'vrf test', 'no shutdown']
    self.start_configured(changed=True, commands=commands)

"
-------------------------------------------------------------------------
"Recom
PRs: 32112, 32452"
-------------------------------------------------------------------------
=========================================================================
"s3.put_object(Bucket=bucket, Key=obj, Body=b'')
module.exit_json(msg=""Virtual directory %s created in bucket %s"" % (obj, bucket), changed=True)
"
-------------------------------------------------------------------------
"```python
import os
import ssl
import mimetypes
import traceback
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.six.moves.urllib.parse import urlparse
from ansible.module_utils.ec2 import boto3

def create_dirkey(module, s3, bucket, obj):
    if module.check_mode:
        module.exit_json(msg=""PUT operation skipped - running in check mode"", changed=False)
        
    try:
        s3.put_object(Bucket=bucket, Key=obj, Body=b'')
        module.exit_json(msg=""Virtual directory %s created in bucket %s"" % (obj, bucket), changed=True)
        
    except botocore.exceptions.ClientError as e:
        module.fail_json(msg=""Failed while creating object %s."" % obj, exception=traceback.format_exc(), **camel_dict_to_snake_dict(e.response))
```"
-------------------------------------------------------------------------
"if formatted_keys:
    s3.delete_objects(Bucket=bucket, Delete={'Objects': formatted_keys})
"
-------------------------------------------------------------------------
"Recom
PRs: 32169, 32198"
-------------------------------------------------------------------------
=========================================================================
"block_device_mapping = []
"
-------------------------------------------------------------------------
"```python
block_device_mapping = []
```"
-------------------------------------------------------------------------
"block_device_mapping = []
"
-------------------------------------------------------------------------
"Recom
PRs: 32163, 32191"
-------------------------------------------------------------------------
=========================================================================
"block_device_mapping.append(create_block_device_meta(module, volume))
"
-------------------------------------------------------------------------
"block_device_mapping.append(create_block_device_meta(module, volume))"
-------------------------------------------------------------------------
"block_device_mapping.append(create_block_device_meta(module, volume))
"
-------------------------------------------------------------------------
"Recom
PRs: 32163, 32191"
-------------------------------------------------------------------------
=========================================================================
"launch_config['BlockDeviceMappings'] = block_device_mapping
"
-------------------------------------------------------------------------
launch_config['BlockDeviceMappings'] = block_device_mapping
-------------------------------------------------------------------------
"launch_config['BlockDeviceMappings'] = block_device_mapping
"
-------------------------------------------------------------------------
"Recom
PRs: 32163, 32191"
-------------------------------------------------------------------------
=========================================================================
"elif groupName == name and (vpc_id is None or sg.get('VpcId') == vpc_id):
"
-------------------------------------------------------------------------
elif groupName == name and (vpc_id is None or sg.get('VpcId') == vpc_id) and group_id:
-------------------------------------------------------------------------
"elif groupName == name and (vpc_id is None or sg.get('VpcId') == vpc_id):
"
-------------------------------------------------------------------------
"Recom
PRs: 31526, 31540"
-------------------------------------------------------------------------
=========================================================================
"import mimetypes
"
-------------------------------------------------------------------------
"```python
import mimetypes
```"
-------------------------------------------------------------------------
"def option_in_extra_args(option):
temp_option = option.replace('-', '').lower()

allowed_extra_args = {'acl': 'ACL', 'cachecontrol': 'CacheControl', 'contentdisposition': 'ContentDisposition',
                      'contentencoding': 'ContentEncoding', 'contentlanguage': 'ContentLanguage',
                      'contenttype': 'ContentType', 'expires': 'Expires', 'grantfullcontrol': 'GrantFullControl',
                      'grantread': 'GrantRead', 'grantreadacp': 'GrantReadACP', 'grantwriteacp': 'GrantWriteACP',
                      'metadata': 'Metadata', 'requestpayer': 'RequestPayer', 'serversideencryption': 'ServerSideEncryption',
                      'storageclass': 'StorageClass', 'ssecustomeralgorithm': 'SSECustomerAlgorithm', 'ssecustomerkey': 'SSECustomerKey',
                      'ssecustomerkeymd5': 'SSECustomerKeyMD5', 'ssekmskeyid': 'SSEKMSKeyId', 'websiteredirectlocation': 'WebsiteRedirectLocation'}

if temp_option in allowed_extra_args:
    return allowed_extra_args[temp_option]


"
-------------------------------------------------------------------------
"Recom
PRs: 31487, 31538"
-------------------------------------------------------------------------
=========================================================================
"def option_in_extra_args(option):
temp_option = option.replace('-', '').lower()

allowed_extra_args = {'acl': 'ACL', 'cachecontrol': 'CacheControl', 'contentdisposition': 'ContentDisposition',
                      'contentencoding': 'ContentEncoding', 'contentlanguage': 'ContentLanguage',
                      'contenttype': 'ContentType', 'expires': 'Expires', 'grantfullcontrol': 'GrantFullControl',
                      'grantread': 'GrantRead', 'grantreadacp': 'GrantReadACP', 'grantwriteacp': 'GrantWriteACP',
                      'metadata': 'Metadata', 'requestpayer': 'RequestPayer', 'serversideencryption': 'ServerSideEncryption',
                      'storageclass': 'StorageClass', 'ssecustomeralgorithm': 'SSECustomerAlgorithm', 'ssecustomerkey': 'SSECustomerKey',
                      'ssecustomerkeymd5': 'SSECustomerKeyMD5', 'ssekmskeyid': 'SSEKMSKeyId', 'websiteredirectlocation': 'WebsiteRedirectLocation'}

if temp_option in allowed_extra_args:
    return allowed_extra_args[temp_option]


"
-------------------------------------------------------------------------
"```python
def option_in_extra_args(option):
    temp_option = option.replace('-', '').lower()

    allowed_extra_args = {
        'acl': 'ACL', 'cachecontrol': 'CacheControl', 'contentdisposition': 'ContentDisposition',
        'contentencoding': 'ContentEncoding', 'contentlanguage': 'ContentLanguage',
        'contenttype': 'ContentType', 'expires': 'Expires', 'grantfullcontrol': 'GrantFullControl',
        'grantread': 'GrantRead', 'grantreadacp': 'GrantReadACP', 'grantwriteacp': 'GrantWriteACP',
        'metadata': 'Metadata', 'requestpayer': 'RequestPayer', 'serversideencryption': 'ServerSideEncryption',
        'storageclass': 'StorageClass', 'ssecustomeralgorithm': 'SSECustomerAlgorithm',
        'ssecustomerkey': 'SSECustomerKey', 'ssecustomerkeymd5': 'SSECustomerKeyMD5',
        'ssekmskeyid': 'SSEKMSKeyId', 'websiteredirectlocation': 'WebsiteRedirectLocation'
    }

    if temp_option in allowed_extra_args:
        return allowed_extra_args[temp_option]
```"
-------------------------------------------------------------------------
"extra['Metadata'] = {}

# determine object metadata and extra arguments
for option in metadata:
    extra_args_option = option_in_extra_args(option)
    if extra_args_option is not None:
        extra[extra_args_option] = metadata[option]
    else:
        extra['Metadata'][option] = metadata[option]

ContentType' not in extra:
content_type = mimetypes.guess_type(src)[0]
if content_type is None:
    # s3 default content type
    content_type = 'binary/octet-stream'
extra['ContentType'] = content_type

"
-------------------------------------------------------------------------
"Recom
PRs: 31487, 31538"
-------------------------------------------------------------------------
=========================================================================
"sample:
  arn: 'arn:aws:events:us-east-1:123456789012:rule/MyCronTask'
  description: 'Run my scheduled task'
  name: 'MyCronTask'
  schedule_expression: 'cron(0 20 * * ? *)'
  state: 'ENABLED'

import botocore
pass  # handled by AnsibleAWSModule
 ansible.module_utils.aws.core import AnsibleAWSModule
 ansible.module_utils.ec2 import boto3_conn, camel_dict_to_snake_dict
 ansible.module_utils.ec2 import ec2_argument_spec, get_aws_connection_info
"
-------------------------------------------------------------------------
"```python
sample:
  arn: 'arn:aws:events:us-east-1:123456789012:rule/MyCronTask'
  description: 'Run my scheduled task'
  name: 'MyCronTask'
  schedule_expression: 'cron(0 20 * * ? *)'
  state: 'ENABLED'

import botocore
pass  # handled by AnsibleAWSModule
from ansible.module_utils.aws.core import AnsibleAWSModule
from ansible.module_utils.ec2 import boto3_conn, camel_dict_to_snake_dict, ec2_argument_spec, get_aws_connection_info
```"
-------------------------------------------------------------------------
"import botocore
"
-------------------------------------------------------------------------
"Recom
PRs: 30823, 30942"
-------------------------------------------------------------------------
=========================================================================
"self.module = module
"
-------------------------------------------------------------------------
`self.module = module`
-------------------------------------------------------------------------
"except botocore.exceptions.ProfileNotFound as e:
"
-------------------------------------------------------------------------
"Recom
PRs: 30823, 30942"
-------------------------------------------------------------------------
=========================================================================
"detach_lb_target_groups(connection, group_name, list(tgs_to_detach))
attach_lb_target_groups(connection, group_name, list(tgs_to_attach))
"
-------------------------------------------------------------------------
"```python
from ansible.module_utils.ec2 import detach_lb_target_groups, attach_lb_target_groups

detach_lb_target_groups(connection, group_name, list(tgs_to_detach))
attach_lb_target_groups(connection, group_name, list(tgs_to_attach)
```"
-------------------------------------------------------------------------
"detach_lb_target_groups(connection, group_name, list(tgs_to_detach))
attach_lb_target_groups(connection, group_name, list(tgs_to_attach))
"
-------------------------------------------------------------------------
"Recom
PRs: 30905, 30934"
-------------------------------------------------------------------------
=========================================================================
"if s3_url:
    for key in ['validate_certs', 'security_token', 'profile_name']:
        aws_connect_kwargs.pop(key, None)
"
-------------------------------------------------------------------------
"```python
if s3_url:
    for key in ['validate_certs', 'security_token', 'profile_name']:
        aws_connect_kwargs.pop(key, None)
```"
-------------------------------------------------------------------------
"if s3_url:
    for key in ['validate_certs', 'security_token', 'profile_name']:
        aws_connect_kwargs.pop(key, None)
"
-------------------------------------------------------------------------
"Recom
PRs: 30902, 30930"
-------------------------------------------------------------------------
=========================================================================
"exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
def elb_healthy(asg_connection, elb_connection, module, group_name):
    except botocore.exceptions.BotoCoreError as e:
        module.fail_json(msg=""Failed to get load balancer."", exception=traceback.format_exc())
    
    for i in lb_instances.get('InstanceStates'):
        if i['State'] == ""InService"":
```"
-------------------------------------------------------------------------
"exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 30495, 30715"
-------------------------------------------------------------------------
=========================================================================
"exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
def tg_healthy(asg_connection, elbv2_connection, module, group_name):
    exception=traceback.format_exc())
    except botocore.exceptions.BotoCoreError as e:
        module.fail_json(msg=""Failed to get target group."", exception=traceback.format_exc())
    
    for i in tg_instances.get('TargetHealthDescriptions'):
        if i['TargetHealth']['State'] == ""healthy"":
```"
-------------------------------------------------------------------------
"exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 30495, 30715"
-------------------------------------------------------------------------
=========================================================================
"except botocore.exceptions.ClientError as e:
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to create Autoscaling Group."",
                     exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
except botocore.exceptions.ClientError as e:
    module.fail_json(msg=""Failed to create Autoscaling Group."", exception=traceback.format_exc())
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to create Autoscaling Group."", exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"except botocore.exceptions.ClientError as e:
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to create Autoscaling Group."",
                     exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 30495, 30715"
-------------------------------------------------------------------------
=========================================================================
"except botocore.exceptions.ClientError as e:
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to update Autoscaling Group."",
                     exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
except botocore.exceptions.ClientError as e:
    module.fail_json(msg=""Failed to update Autoscaling Group."", exception=traceback.format_exc())
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to update Autoscaling Group."", exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"except botocore.exceptions.ClientError as e:
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to update Autoscaling Group."",
                     exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 30495, 30715"
-------------------------------------------------------------------------
=========================================================================
"except botocore.exceptions.ClientError as e:
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to update Autoscaling Group."",
                     exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
except botocore.exceptions.ClientError as e:
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to update Autoscaling Group."",
                     exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"except botocore.exceptions.ClientError as e:
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to update Autoscaling Group."",
                     exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 30495, 30715"
-------------------------------------------------------------------------
=========================================================================
"except botocore.exceptions.ClientError as e:
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to update Autoscaling Group notifications."",
                     exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```
except botocore.exceptions.ClientError as e:
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to update Autoscaling Group notifications."",
                     exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"except botocore.exceptions.ClientError as e:
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to update Autoscaling Group notifications."",
                     exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 30495, 30715"
-------------------------------------------------------------------------
=========================================================================
"except botocore.exceptions.ClientError as e:
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to read existing Autoscaling Groups."",
                     exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"```python
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to read existing Autoscaling Groups."", exception=traceback.format_exc())
```"
-------------------------------------------------------------------------
"except botocore.exceptions.ClientError as e:
except botocore.exceptions.BotoCoreError as e:
    module.fail_json(msg=""Failed to read existing Autoscaling Groups."",
                     exception=traceback.format_exc())
"
-------------------------------------------------------------------------
"Recom
PRs: 30495, 30715"
-------------------------------------------------------------------------
=========================================================================
"from ansible.module_utils.six.moves import urllib
"
-------------------------------------------------------------------------
from ansible.module_utils.six.moves import urllib
-------------------------------------------------------------------------
"from ansible.module_utils.six.moves import urllib
"
-------------------------------------------------------------------------
"Recom
PRs: 30551, 30657"
-------------------------------------------------------------------------
=========================================================================
"if urllib.parse.unquote(iam.get_user_policy(name, pol).
"
-------------------------------------------------------------------------
"if urllib.parse.unquote(iam.get_user_policy(name, pol)."
-------------------------------------------------------------------------
"if urllib.parse.unquote(iam.get_user_policy(name, pol).
"
-------------------------------------------------------------------------
"Recom
PRs: 30551, 30657"
-------------------------------------------------------------------------
=========================================================================
"if urllib.parse.unquote(iam.get_role_policy(name, pol).
"
-------------------------------------------------------------------------
"if urllib.parse.unquote(iam.get_role_policy(name, pol)."
-------------------------------------------------------------------------
"if urllib.parse.unquote(iam.get_role_policy(name, pol).
"
-------------------------------------------------------------------------
"Recom
PRs: 30551, 30657"
-------------------------------------------------------------------------
=========================================================================
"if urllib.parse.unquote(iam.get_group_policy(name, pol).
"
-------------------------------------------------------------------------
"if urllib.parse.unquote(iam.get_group_policy(name, pol)."
-------------------------------------------------------------------------
"if urllib.parse.unquote(iam.get_group_policy(name, pol).
"
-------------------------------------------------------------------------
"Recom
PRs: 30551, 30657"
-------------------------------------------------------------------------
=========================================================================
"if e.response['Error']['Code'] == 'LimitExceeded':
"
-------------------------------------------------------------------------
"```python
def get_or_create_policy_version(module, iam, policy, policy_document):
    try:
        version = iam.create_policy_version(PolicyArn=policy['Arn'], PolicyDocument=policy_document)['PolicyVersion']
        return version, True
    except botocore.exceptions.ClientError as e:
        if e.response['Error']['Code'] == 'LimitExceeded':
            delete_oldest_non_default_version(module, iam, policy)
            try:
                version = iam.create_policy_version(PolicyArn=policy['Arn'], PolicyDocument=policy_document)['PolicyVersion']
                return version, True
```"
-------------------------------------------------------------------------
"if e.response['Error']['Code'] == 'LimitExceeded':
"
-------------------------------------------------------------------------
"Recom
PRs: 30537, 30626"
-------------------------------------------------------------------------
=========================================================================
"- Set whether AWS will Stop or Terminate an instance on shutdown. This parameter is ignored when using instance-store
  images (which require termination on shutdown).
"
-------------------------------------------------------------------------
"```yaml
options:
   instance_initiated_shutdown_behavior:  
     version_added: ""2.2""
     required: false
     default: 'stop'
     choices: [ ""stop"", ""terminate"" ]
```"
-------------------------------------------------------------------------
"- Set whether AWS will Stop or Terminate an instance on shutdown. This parameter is ignored when using instance-store
  images (which require termination on shutdown).
"
-------------------------------------------------------------------------
"Recom
PRs: 28885, 29844"
-------------------------------------------------------------------------
=========================================================================
"try:
    res = ec2.run_instances(**params)
except boto.exception.EC2ResponseError as e:
    if (params['instance_initiated_shutdown_behavior'] != 'terminate' and
            ""InvalidParameterCombination"" == e.error_code):
        params['instance_initiated_shutdown_behavior'] = 'terminate'
        res = ec2.run_instances(**params)
    else:
        raise

"
-------------------------------------------------------------------------
"```python
try:
    res = ec2.run_instances(**params)
except boto.exception.EC2ResponseError as e:
    if (params.get('instance_initiated_shutdown_behavior') != 'terminate' and
            ""InvalidParameterCombination"" == e.error_code):
        params['instance_initiated_shutdown_behavior'] = 'terminate'
        res = ec2.run_instances(**params)
    else:
        raise
```"
-------------------------------------------------------------------------
"try:
    res = ec2.run_instances(**params)
except boto.exception.EC2ResponseError as e:
    if (params['instance_initiated_shutdown_behavior'] != 'terminate' and
            ""InvalidParameterCombination"" == e.error_code):
        params['instance_initiated_shutdown_behavior'] = 'terminate'
        res = ec2.run_instances(**params)
    else:
        raise

"
-------------------------------------------------------------------------
"Recom
PRs: 28885, 29844"
-------------------------------------------------------------------------
=========================================================================
"RETURN = '''
vpc.id:
description: VPC resource id
returned: success
type: string
sample: vpc-b883b2c4
cidr_block:
description: The CIDR of the VPC
returned: success
type: string
sample: ""10.0.0.0/16""
state:
description: state of the VPC
returned: success
type: string
sample: available
tags:
description: tags attached to the VPC, includes name
returned: success
type: dict
sample: {""Name"": ""My VPC"", ""env"": ""staging""}
classic_link_enabled:
description: indicates whether ClassicLink is enabled
returned: success
type: boolean
sample: false
dhcp_options_id:
description: the id of the DHCP options assocaited with this VPC
returned: success
type: string
sample: dopt-67236184
instance_tenancy:
description: indicates whther VPC uses default or dedicated tenancy
returned: success
type: string
sample: default
is_default:
description: indicates whether this is the default VPC
returned: success
type: boolean
sample: false


"
-------------------------------------------------------------------------
"RETURN = '''
vpc.id:
description: VPC resource id
returned: success
type: string
sample: vpc-b883b2c4
cidr_block:
description: The CIDR of the VPC
returned: success
type: string
sample: ""10.0.0.0/16""
state:
description: state of the VPC
returned: success
type: string
sample: available
tags:
description: tags attached to the VPC, includes name
returned: success
type: dict
sample: {""Name"": ""My VPC"", ""env"": ""staging""}
classic_link_enabled:
description: indicates whether ClassicLink is enabled
returned: success
type: boolean
sample: false
dhcp_options_id:
description: the id of the DHCP options assocaited with this VPC
returned: success
type: string
sample: dopt-67236184
instance_tenancy:
description: indicates whther VPC uses default or dedicated tenancy
returned: success
type: string
sample: default
is_default:
description: indicates whether this is the default VPC
returned: success
type: boolean
sample: false
'''"
-------------------------------------------------------------------------
"RETURN = '''
vpc.id:
description: VPC resource id
returned: success
type: string
sample: vpc-b883b2c4
cidr_block:
description: The CIDR of the VPC
returned: success
type: string
sample: ""10.0.0.0/16""
state:
description: state of the VPC
returned: success
type: string
sample: available
tags:
description: tags attached to the VPC, includes name
returned: success
type: dict
sample: {""Name"": ""My VPC"", ""env"": ""staging""}
classic_link_enabled:
description: indicates whether ClassicLink is enabled
returned: success
type: boolean
sample: false
dhcp_options_id:
description: the id of the DHCP options assocaited with this VPC
returned: success
type: string
sample: dopt-67236184
instance_tenancy:
description: indicates whther VPC uses default or dedicated tenancy
returned: success
type: string
sample: default
is_default:
description: indicates whether this is the default VPC
returned: success
type: boolean
sample: false


"
-------------------------------------------------------------------------
"Recom
PRs: 21294, 29665"
-------------------------------------------------------------------------
=========================================================================
"# it covers ROLLBACK_COMPLETE and UPDATE_ROLLBACK_COMPLETE
# Possible states: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html#w1ab2c15c17c21c13
elif stack['StackStatus'].endswith('ROLLBACK_COMPLETE'):
    ret.update({'changed': True, 'failed': True, 'output': 'Problem with %s. Rollback complete' % operation})
"
-------------------------------------------------------------------------
"```python
# it covers ROLLBACK_COMPLETE and UPDATE_ROLLBACK_COMPLETE
# Possible states: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html#w1ab2c15c17c21c13
elif stack['StackStatus'].endswith('ROLLBACK_COMPLETE'):
    ret.update({'changed': True, 'failed': True, 'output': 'Problem with %s. Rollback complete' % operation})
```"
-------------------------------------------------------------------------
"# it covers ROLLBACK_COMPLETE and UPDATE_ROLLBACK_COMPLETE
# Possible states: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html#w1ab2c15c17c21c13
elif stack['StackStatus'].endswith('ROLLBACK_COMPLETE'):
    ret.update({'changed': True, 'failed': True, 'output': 'Problem with %s. Rollback complete' % operation})
"
-------------------------------------------------------------------------
"Recom
PRs: 24596, 28713"
-------------------------------------------------------------------------
=========================================================================
"if not no_password_changes and (password is not None or role_attr_flags != '' or expires is not None):
"
-------------------------------------------------------------------------
"```python
if not no_password_changes and (password is not None or role_attr_flags != '' or expires is not None):
```"
-------------------------------------------------------------------------
"if not no_password_changes and (password is not None or role_attr_flags != ''):
"
-------------------------------------------------------------------------
"Recom
PRs: 26539, 26541"
-------------------------------------------------------------------------
=========================================================================
"if expires is not None:
    cursor.execute(""SELECT %s::timestamptz;"", (expires,))
    expires_with_tz = cursor.fetchone()[0]
    expires_changing = expires_with_tz != current_role_attrs.get('rolvaliduntil')
else:
    expires_changing = False
"
-------------------------------------------------------------------------
"if expires is not None:
    cursor.execute(""SELECT %s::timestamptz;"", (expires,))
    expires_with_tz = cursor.fetchone()[0]
    expires_changing = expires_with_tz != current_role_attrs.get('rolvaliduntil')
else:
    expires_changing = False"
-------------------------------------------------------------------------
"expires_changing = (expires is not None and expires == current_role_attrs['rolvaliduntil'])
"
-------------------------------------------------------------------------
"Recom
PRs: 26539, 26541"
-------------------------------------------------------------------------
=========================================================================
"from hashlib import md5
"
-------------------------------------------------------------------------
"- ImportFrom(module='hashlib', names=[alias(name='md5')], level=0)"
-------------------------------------------------------------------------
"if expires is not None:
    cursor.execute(""SELECT %s::timestamptz;"", (expires,))
    expires_with_tz = cursor.fetchone()[0]
    expires_changing = expires_with_tz != current_role_attrs.get('rolvaliduntil')
else:
    expires_changing = False
"
-------------------------------------------------------------------------
"Recom
PRs: 23862, 26539"
-------------------------------------------------------------------------
=========================================================================
