"assert_raises_rpc_error(-4, ""Fee exceeds maximum configured by -maxtxfee"", self.nodes[3].fundrawtransaction, rawtx, {""feeRate"": 1})
"
-------------------------------------------------------------------------
"assert_raises_rpc_error(-4, ""Fee exceeds maximum configured by -maxtxfee"", self.nodes[3].fundrawtransaction, rawtx, {""feeRate"": 1})
"
-------------------------------------------------------------------------
"# previously this was silently capped at -maxtxfee
"
-------------------------------------------------------------------------
"
Make sure these dependencies are incorporated into the stable script - import io, import decimal
Make sure statements concerning these methods are incorporated into the stable script - ,assert_raises_rpc_error,rawtx,self
Ensure statements related to these methods are omitted from the stable script, or provide definitions for them if necessary - 
PRs: 16257, 16639"
-------------------------------------------------------------------------
=========================================================================
"assert_greater_than,
"
-------------------------------------------------------------------------
"assert_greater_than,
"
-------------------------------------------------------------------------
"test_maxtxfee_fails(self, rbf_node, dest_address)
"
-------------------------------------------------------------------------
"
Make sure these dependencies are incorporated into the stable script - import io, import decimal
Make sure statements concerning these methods are incorporated into the stable script - ,assert_greater_than
Ensure statements related to these methods are omitted from the stable script, or provide definitions for them if necessary - 
PRs: 16257, 16639"
-------------------------------------------------------------------------
=========================================================================
"# feeRate of 0.1 BTC / KB produces a total fee slightly below -maxtxfee (~0.05280000):
res = self.nodes[1].walletcreatefundedpsbt([{""txid"":txid,""vout"":p2wpkh_pos},{""txid"":txid,""vout"":p2sh_p2wpkh_pos},{""txid"":txid,""vout"":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {""feeRate"": 0.1})
assert_greater_than(res[""fee""], 0.05)
assert_greater_than(0.06, res[""fee""])

# feeRate of 10 BTC / KB produces a total fee well above -maxtxfee
# previously this was silenty capped at -maxtxfee
assert_raises_rpc_error(-4, ""Fee exceeds maximum configured by -maxtxfee"", self.nodes[1].walletcreatefundedpsbt, [{""txid"":txid,""vout"":p2wpkh_pos},{""txid"":txid,""vout"":p2sh_p2wpkh_pos},{""txid"":txid,""vout"":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {""feeRate"": 10})

"
-------------------------------------------------------------------------
"# feeRate of 0.1 BTC / KB produces a total fee slightly below -maxtxfee (~0.05280000):
res = self.nodes[1].walletcreatefundedpsbt([{""txid"":txid,""vout"":p2wpkh_pos},{""txid"":txid,""vout"":p2sh_p2wpkh_pos},{""txid"":txid,""vout"":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {""feeRate"": 0.1})
assert_greater_than(res[""fee""], 0.05)
assert_greater_than(0.06, res[""fee""])

# feeRate of 10 BTC / KB produces a total fee well above -maxtxfee
# previously this was silenty capped at -maxtxfee
assert_raises_rpc_error(-4, ""Fee exceeds maximum configured by -maxtxfee"", self.nodes[1].walletcreatefundedpsbt, [{""txid"":txid,""vout"":p2wpkh_pos},{""txid"":txid,""vout"":p2sh_p2wpkh_pos},{""txid"":txid,""vout"":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {""feeRate"": 10})

"
-------------------------------------------------------------------------
"def test_maxtxfee_fails(test, rbf_node, dest_address):
test.restart_node(1, ['-maxtxfee=0.00003']  test.extra_args[1])
rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)
rbfid = spend_one_input(rbf_node, dest_address)
assert_raises_rpc_error(-4, ""Specified or calculated fee 0.0000332 is too high (cannot be higher than maxTxFee 0.00003)"", rbf_node.bumpfee, rbfid)
test.restart_node(1, test.extra_args[1])
rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)


"
-------------------------------------------------------------------------
"
Make sure these dependencies are incorporated into the stable script - import io, import decimal
Make sure statements concerning these methods are incorporated into the stable script - ,txid,self,assert_greater_than,res,assert_raises_rpc_error
Ensure statements related to these methods are omitted from the stable script, or provide definitions for them if necessary - ,p2pkh_pos,p2wpkh_pos,p2sh_p2wpkh_pos
PRs: 16257, 16639"
-------------------------------------------------------------------------
=========================================================================
"assert_greater_than(tx_in[""sequence""], MAX_BIP125_RBF_SEQUENCE)
"
-------------------------------------------------------------------------
"assert_greater_than(tx_in[""sequence""], MAX_BIP125_RBF_SEQUENCE)
"
-------------------------------------------------------------------------
"[""-walletrbf=0""],
"
-------------------------------------------------------------------------
"
Make sure these dependencies are incorporated into the stable script - import json, import os, import decimal
Make sure statements concerning these methods are incorporated into the stable script - ,MAX_BIP125_RBF_SEQUENCE,tx_in,assert_greater_than
Ensure statements related to these methods are omitted from the stable script, or provide definitions for them if necessary - 
PRs: 15911, 16608"
-------------------------------------------------------------------------
=========================================================================
"# Same construction without optional arguments, for a node with -walletrbf=0
unspent1 = self.nodes[1].listunspent()[0]
psbtx_info = self.nodes[1].walletcreatefundedpsbt([{""txid"":unspent1[""txid""], ""vout"":unspent1[""vout""]}], [{self.nodes[2].getnewaddress():unspent1[""amount""]1}], block_height)
decoded_psbt = self.nodes[1].decodepsbt(psbtx_info[""psbt""])
for tx_in in decoded_psbt[""tx""][""vin""]:
    assert_greater_than(tx_in[""sequence""], MAX_BIP125_RBF_SEQUENCE)

"
-------------------------------------------------------------------------
"# Same construction without optional arguments, for a node with -walletrbf=0
unspent1 = self.nodes[1].listunspent()[0]
psbtx_info = self.nodes[1].walletcreatefundedpsbt([{""txid"":unspent1[""txid""], ""vout"":unspent1[""vout""]}], [{self.nodes[2].getnewaddress():unspent1[""amount""]1}], block_height)
decoded_psbt = self.nodes[1].decodepsbt(psbtx_info[""psbt""])
for tx_in in decoded_psbt[""tx""][""vin""]:
    assert_greater_than(tx_in[""sequence""], MAX_BIP125_RBF_SEQUENCE)

"
-------------------------------------------------------------------------
"assert_greater_than(tx_in[""sequence""], MAX_BIP125_RBF_SEQUENCE)
"
-------------------------------------------------------------------------
"
Make sure these dependencies are incorporated into the stable script - import json, import os, import decimal
Make sure statements concerning these methods are incorporated into the stable script - ,
Ensure statements related to these methods are omitted from the stable script, or provide definitions for them if necessary - 
PRs: 15911, 16608"
-------------------------------------------------------------------------
=========================================================================
"# Also ensure unload works during walletpassphrase timeout
w2.encryptwallet('test')
w2.walletpassphrase('test', 1)
time.sleep(1.1)
"
-------------------------------------------------------------------------
"# Also ensure unload works during walletpassphrase timeout
w2.encryptwallet('test')
w2.walletpassphrase('test', 1)
time.sleep(1.1)
"
-------------------------------------------------------------------------
"# Also ensure unload works during walletpassphrase timeout
wallets = node.listwallets()
w2.encryptwallet('test')
self.restart_node(0, ['-wallet={}'.format(wallet) for wallet in wallets])
w1 = node.get_wallet_rpc(wallet_names[0])
w2 = node.get_wallet_rpc(wallet_names[1])
w2.walletpassphrase('test', 1)
time.sleep(1.1)
"
-------------------------------------------------------------------------
"
Make sure these dependencies are incorporated into the stable script - import os, import shutil
Make sure statements concerning these methods are incorporated into the stable script - ,w2,time
Ensure statements related to these methods are omitted from the stable script, or provide definitions for them if necessary - 
PRs: 14453, 14880"
-------------------------------------------------------------------------
=========================================================================
"# Regression test for 14473 (mishandling of already-signed witness transaction):
psbtx_info = self.nodes[0].walletcreatefundedpsbt([{""txid"":unspent[""txid""], ""vout"":unspent[""vout""]}], [{self.nodes[2].getnewaddress():unspent[""amount""]1}])
complete_psbt = self.nodes[0].walletprocesspsbt(psbtx_info[""psbt""])
double_processed_psbt = self.nodes[0].walletprocesspsbt(complete_psbt[""psbt""])
assert_equal(complete_psbt, double_processed_psbt)
# We don't care about the decode result, but decoding must succeed.
self.nodes[0].decodepsbt(double_processed_psbt[""psbt""])
"
-------------------------------------------------------------------------
"# Regression test for 14473 (mishandling of already-signed witness transaction):
psbtx_info = self.nodes[0].walletcreatefundedpsbt([{""txid"":unspent[""txid""], ""vout"":unspent[""vout""]}], [{self.nodes[2].getnewaddress():unspent[""amount""]1}])
complete_psbt = self.nodes[0].walletprocesspsbt(psbtx_info[""psbt""])
double_processed_psbt = self.nodes[0].walletprocesspsbt(complete_psbt[""psbt""])
assert_equal(complete_psbt, double_processed_psbt)
# We don't care about the decode result, but decoding must succeed.
self.nodes[0].decodepsbt(double_processed_psbt[""psbt""])
"
-------------------------------------------------------------------------
"from test_framework.util import assert_equal, assert_raises_rpc_error, find_output, disconnect_nodes, connect_nodes_bi, sync_blocks
"
-------------------------------------------------------------------------
"
Make sure these dependencies are incorporated into the stable script - import json, import os
Make sure statements concerning these methods are incorporated into the stable script - ,
Ensure statements related to these methods are omitted from the stable script, or provide definitions for them if necessary - 
PRs: 14588, 14780"
-------------------------------------------------------------------------
=========================================================================
"# Check transactions for duplicate inputs
self.log.info(""Test duplicate input block."")

block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])
block2_orig.vtx[2].rehash()
block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()
block2_orig.rehash()
block2_orig.solve()
node.p2p.send_blocks_and_test([block2_orig], node, success=False, request_block=False, reject_reason='bad-txns-inputs-duplicate')

"
-------------------------------------------------------------------------
"# check transactions for duplicate input
self.log.info(""Test duplicate input block."")

block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])
block2_orig.vtx[2].rehash()
block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()
block2_orig.rehash()
block2_orig.solve()
node.p2p.send_blocks_and_test([block2_orig], node, success=False, request_block=False, reject_reason='bad-txns-inputs-duplicate')

"
-------------------------------------------------------------------------
"yield TestInstance([[block2, RejectResult(16, b'bad-txns-duplicate')]])

# Check transactions for duplicate inputs
self.log.info(""Test duplicate input block."")

block2_dup = copy.deepcopy(block2_orig)
block2_dup.vtx[2].vin.append(block2_dup.vtx[2].vin[0])
block2_dup.vtx[2].rehash()
block2_dup.hashMerkleRoot = block2_dup.calc_merkle_root()
block2_dup.rehash()
block2_dup.solve()
yield TestInstance([[block2_dup, RejectResult(16, b'bad-txns-inputs-duplicate')], [block2_orig, True]])
"
-------------------------------------------------------------------------
"
Make sure these dependencies are incorporated into the stable script - import copy, import time
Make sure statements concerning these methods are incorporated into the stable script - ,block2_orig,self,node
Ensure statements related to these methods are omitted from the stable script, or provide definitions for them if necessary - 
PRs: 14247, 14249"
-------------------------------------------------------------------------
=========================================================================
"# Check transactions for duplicate inputs
self.log.info(""Test duplicate input block."")

block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])
block2_orig.vtx[2].rehash()
block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()
block2_orig.rehash()
block2_orig.solve()
node.p2p.send_blocks_and_test([block2_orig], node, success=False, request_block=False, reject_reason='bad-txns-inputs-duplicate')

"
-------------------------------------------------------------------------
"# check transactions for duplicate input
self.log.info(""Test very broken block.""=""Test very broken block."")

block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])
block2_orig.vtx[2].rehash()
block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()
block2_orig.rehash()
block2_orig.solve()
node.p2p.send_blocks_and_test([block3]=[block3], node=node, False=False, False=False, 16=16, b'bad-cb-amount'=b'bad-cb-amount')

"
-------------------------------------------------------------------------
"# Check transactions for duplicate inputs
self.log.info(""Test duplicate input block."")

block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])
block2_orig.vtx[2].rehash()
block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()
block2_orig.rehash()
block2_orig.solve()
node.p2p.send_blocks_and_test([block2_orig], node, success=False, request_block=False, reject_reason=b'bad-txns-inputs-duplicate')

"
-------------------------------------------------------------------------
"
Make sure these dependencies are incorporated into the stable script - import copy
Make sure statements concerning these methods are incorporated into the stable script - ,
Ensure statements related to these methods are omitted from the stable script, or provide definitions for them if necessary - 
PRs: 14247, 14248"
-------------------------------------------------------------------------
=========================================================================
"from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, hash160, OP_TRUE
from test_framework.mininode import ToHex, FromHex, COIN
"
-------------------------------------------------------------------------
"from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, hash160, OP_TRUE
from test_framework.mininode import ToHex, FromHex, COIN
"
-------------------------------------------------------------------------
"from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE
from test_framework.mininode import ToHex, FromHex, COIN
"
-------------------------------------------------------------------------
"
Make sure these dependencies are incorporated into the stable script - import io
Make sure statements concerning these methods are incorporated into the stable script - ,
Ensure statements related to these methods are omitted from the stable script, or provide definitions for them if necessary - 
PRs: 9955, 10006"
-------------------------------------------------------------------------
=========================================================================
