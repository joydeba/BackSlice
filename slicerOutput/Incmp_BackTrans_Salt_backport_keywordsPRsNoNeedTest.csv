"disk1.get('device', 'disk') == disk2.get('device', 'disk') and \
target1.get('dev') == target2.get('dev')
"
-------------------------------------------------------------------------
"```python
def _disks_equal(disk1, disk2):
     return source1 == source2 and \
         target1 is not None and target2 is not None and \
         target1.get('bus') == target2.get('bus') and \
         disk1.get('device', 'disk') == disk2.get('device', 'disk') and \
         target1.get('dev') == target2.get('dev')
```"
-------------------------------------------------------------------------
"disk1.get('device', 'disk') == disk2.get('device', 'disk') and \
target1.get('dev') == target2.get('dev')
"
-------------------------------------------------------------------------
"Recom
PRs: 50356, 50379"
-------------------------------------------------------------------------
=========================================================================
"# Fix the target device to avoid duplicates before diffing: this may lead
# to additional changes. Think of unchanged disk 'hda' and another disk listed
# before it becoming 'hda' too... the unchanged need to turn into 'hdb'.
targets = []
for disk in new:
    prefix = [item for item in prefixes if target.startswith(item)][0]
    new_target = ['{0}{1}'.format(prefix, string.ascii_lowercase[i]) for i in range(len(new))
                  if '{0}{1}'.format(prefix, string.ascii_lowercase[i]) not in targets][0]
    target_node.set('dev', new_target)
    targets.append(new_target)

return _diff_lists(old, new, _disks_equal)
"
-------------------------------------------------------------------------
"```python
import string

def _diff_disk_lists(old, new):
    # Fix the target device to avoid duplicates before diffing: this may lead
    # to additional changes. Think of unchanged disk 'hda' and another disk listed
    # before it becoming 'hda' too... the unchanged need to turn into 'hdb'.
    targets = []
    for disk in new:
        target_node = disk.find('target')
        target = target_node.get('dev')
        prefix = [item for item in prefixes if target.startswith(item)][0]
        new_target = next(('{0}{1}'.format(prefix, string.ascii_lowercase[i]) for i in range(len(new))
                           if '{0}{1}'.format(prefix, string.ascii_lowercase[i]) not in targets))
        target_node.set('dev', new_target)
        targets.append(new_target)

    return _diff_lists(old, new, _disks_equal)
```"
-------------------------------------------------------------------------
"# Fix the target device to avoid duplicates before diffing: this may lead
# to additional changes. Think of unchanged disk 'hda' and another disk listed
# before it becoming 'hda' too... the unchanged need to turn into 'hdb'.
targets = []
for disk in new:
    prefix = [item for item in prefixes if target.startswith(item)][0]
    new_target = ['{0}{1}'.format(prefix, string.ascii_lowercase[i]) for i in range(len(new))
                  if '{0}{1}'.format(prefix, string.ascii_lowercase[i]) not in targets][0]
    target_node.set('dev', new_target)
    targets.append(new_target)

return _diff_lists(old, new, _disks_equal)
"
-------------------------------------------------------------------------
"Recom
PRs: 50356, 50379"
-------------------------------------------------------------------------
=========================================================================
"<target dev='vda' bus='virtio'/>
<target dev='vda' bus='virtio'/>
<target dev='hda' bus='ide'/>
          for disk in ret['unchanged']], [])
ertEqual([disk.find('source').get('file') if disk.find('source') is not None else None
          for disk in ret['new']],
         ['/path/to/img3.qcow2', '/path/to/img0.qcow2', '/path/to/img4.qcow2', None])
ertEqual([disk.find('target').get('dev') for disk in ret['sorted']],
         ['vda', 'vdb', 'vdc', 'hda'])
ertEqual([disk.find('source').get('file') if disk.find('source') is not None else None
          for disk in ret['sorted']],
         ['/path/to/img3.qcow2',
          '/path/to/img0.qcow2',
          '/path/to/img4.qcow2',
          None])
ertEqual([disk.find('source').get('file') if disk.find('source') is not None else None
          for disk in ret['deleted']],
         ['/path/to/img0.qcow2',
          '/path/to/img1.qcow2',
          '/path/to/img2.qcow2',
          '/path/to/img4.qcow2',
          None])
"
-------------------------------------------------------------------------
"```python
ertEqual([disk.find('target').get('bus') for disk in ret['new']], ['virtio', 'virtio', 'ide'])
```"
-------------------------------------------------------------------------
"<target dev='vda' bus='virtio'/>
<target dev='vda' bus='virtio'/>
<target dev='hda' bus='ide'/>
          for disk in ret['unchanged']], [])
ertEqual([disk.find('source').get('file') if disk.find('source') is not None else None
          for disk in ret['new']],
         ['/path/to/img3.qcow2', '/path/to/img0.qcow2', '/path/to/img4.qcow2', None])
ertEqual([disk.find('target').get('dev') for disk in ret['sorted']],
         ['vda', 'vdb', 'vdc', 'hda'])
ertEqual([disk.find('source').get('file') if disk.find('source') is not None else None
          for disk in ret['sorted']],
         ['/path/to/img3.qcow2',
          '/path/to/img0.qcow2',
          '/path/to/img4.qcow2',
          None])
ertEqual([disk.find('source').get('file') if disk.find('source') is not None else None
          for disk in ret['deleted']],
         ['/path/to/img0.qcow2',
          '/path/to/img1.qcow2',
          '/path/to/img2.qcow2',
          '/path/to/img4.qcow2',
          None])
"
-------------------------------------------------------------------------
"Recom
PRs: 50356, 50379"
-------------------------------------------------------------------------
=========================================================================
"<target dev='vdb' bus='virtio'/>
"
-------------------------------------------------------------------------
"```xml
<target dev='vdb' bus='virtio'/>
```"
-------------------------------------------------------------------------
"<target dev='vdb' bus='virtio'/>
"
-------------------------------------------------------------------------
"Recom
PRs: 50356, 50379"
-------------------------------------------------------------------------
=========================================================================
"disk_bus_map = {'virtio': 'vd', 'xen': 'xvd', 'fdc': 'fd', 'ide': 'hd'}
    prefix = disk_bus_map.get(disk['model'], 'sd')
    context['disks'][disk['name']]['target_dev'] = '{0}{1}'.format(prefix, string.ascii_lowercase[i])
    if hypervisor in ['qemu', 'kvm', 'bhyve', 'xen']:
"
-------------------------------------------------------------------------
"```python
disk_bus_map = {'virtio': 'vd', 'xen': 'xvd', 'fdc': 'fd', 'ide': 'hd'}
prefix = disk_bus_map.get(disk['model'], 'sd')
context['disks'][disk['name']]['target_dev'] = '{0}{1}'.format(prefix, string.ascii_lowercase[i])
if hypervisor in ['qemu', 'kvm', 'bhyve', 'xen']:
```"
-------------------------------------------------------------------------
"disk_bus_map = {'virtio': 'vd', 'xen': 'xvd', 'fdc': 'fd', 'ide': 'hd'}
    prefix = disk_bus_map.get(disk['model'], 'sd')
    context['disks'][disk['name']]['target_dev'] = '{0}{1}'.format(prefix, string.ascii_lowercase[i])
    if hypervisor in ['qemu', 'kvm', 'xen']:
"
-------------------------------------------------------------------------
"Recom
PRs: 49510, 49540"
-------------------------------------------------------------------------
=========================================================================
"from tests.unit.netapi.test_rest_tornado import SaltnadoTestCase
"
-------------------------------------------------------------------------
"+ ImportFrom(module='tests.unit.netapi.test_rest_tornado', names=[alias(name='SaltnadoTestCase')], level=0)"
-------------------------------------------------------------------------
"from tests.unit.netapi.test_rest_tornado import SaltnadoTestCase
"
-------------------------------------------------------------------------
"Recom
PRs: 47337, 49091"
-------------------------------------------------------------------------
=========================================================================
"output = salt.utils.stringutils.to_unicode(console['output_decoded'])
"
-------------------------------------------------------------------------
"```python
output = salt.utils.stringutils.to_unicode(console['output_decoded'])
```"
-------------------------------------------------------------------------
"output = salt.utils.to_unicode(console['output_decoded'])
"
-------------------------------------------------------------------------
"Recom
PRs: 48212, 49041"
-------------------------------------------------------------------------
=========================================================================
"elif self.run_function('grains.item', ['osfullname'])['osfullname'] == 'Debian' and \
     self.run_function('grains.item', ['osmajorrelease'])['osmajorrelease'] < 9 and systemd:
     # currently disabling a service via systemd that does not exist
     # on Debian 8 results in a True return code
"
-------------------------------------------------------------------------
"```python
elif tuple(self.run_function('grains.item', ['osrelease_info'])['osrelease_info']) == (14, 0o4) and not systemd:
    # currently upstart does not have a mechanism to report if disabling a service fails if does not exist
    self.assertTrue(self.run_function('service.disable', [srv_name]))
    self.assertTrue(self.run_function('service.disable', [srv_name]))
else:
    try:
```"
-------------------------------------------------------------------------
"elif self.run_function('grains.item', ['osfullname'])['osfullname'] == 'Debian' and \
     self.run_function('grains.item', ['osmajorrelease'])['osmajorrelease'] < 9 and systemd:
     # currently disabling a service via systemd that does not exist
     # on Debian 8 results in a True return code
"
-------------------------------------------------------------------------
"Recom
PRs: 48962, 48970"
-------------------------------------------------------------------------
=========================================================================
"with patch('salt.pillar.compile_template') as compile_template, \
        patch.object(salt.pillar.Pillar, '_Pillar__gather_avail',
                     MagicMock(return_value={'base': ['blah', 'foo']})):
"
-------------------------------------------------------------------------
"```python
with patch('salt.pillar.compile_template') as compile_template, \
        patch.object(salt.pillar.Pillar, '_Pillar__gather_avail',
                     MagicMock(return_value={'base': ['blah', 'foo']})):
```"
-------------------------------------------------------------------------
"'pillar_roots': {},
'file_roots': {},
"
-------------------------------------------------------------------------
"Recom
PRs: 47161, 47162"
-------------------------------------------------------------------------
=========================================================================
"
def libvirt_error_handler(ctx, error):
"
-------------------------------------------------------------------------
"```python
def libvirt_error_handler(ctx, error):
    '''
    Redirect stderr prints from libvirt to salt logging.
    '''
    # Set up logging
    log = logging.getLogger(__name__)
```"
-------------------------------------------------------------------------
"
def libvirt_error_handler(ctx, error):  # pylint: disable=unused-argument
"
-------------------------------------------------------------------------
"Recom
PRs: 43684, 43700"
-------------------------------------------------------------------------
=========================================================================
"libvirt.registerErrorHandler(f=libvirt_error_handler, ctx=None)

"
-------------------------------------------------------------------------
"if HAS_LIBVIRT:
    libvirt.registerErrorHandler(f=libvirt_error_handler, ctx=None)"
-------------------------------------------------------------------------
"libvirt.registerErrorHandler(f=libvirt_error_handler, ctx=None)

"
-------------------------------------------------------------------------
"Recom
PRs: 43684, 43700"
-------------------------------------------------------------------------
=========================================================================
"reg_pol_header = u'\u5250\u6765\x01\x00'
if not os.path.exists(policy_file_path):
    ret = __salt__['file.makedirs'](policy_file_path)
with salt.utils.files.fopen(policy_file_path, 'wb') as pol_file:
    if not data_to_write.startswith(reg_pol_header):
        pol_file.write(reg_pol_header.encode('utf-16-le'))
    pol_file.write(data_to_write.encode('utf-16-le'))
try:
    gpt_ini_data = ''
    if os.path.exists(gpt_ini_path):
        with salt.utils.files.fopen(gpt_ini_path, 'rb') as gpt_file:
            gpt_ini_data = gpt_file.read()
    if not _regexSearchRegPolData(r'\[General\]\r\n', gpt_ini_data):
        gpt_ini_data = '[General]\r\n'  gpt_ini_data
    if _regexSearchRegPolData(r'{0}='.format(re.escape(gpt_extension)), gpt_ini_data):
        # ensure the line contains the ADM guid
        gpt_ext_loc = re.search(r'^{0}=.*\r\n'.format(re.escape(gpt_extension)),
                                gpt_ini_data,
                                re.IGNORECASE | re.MULTILINE)
        gpt_ext_str = gpt_ini_data[gpt_ext_loc.start():gpt_ext_loc.end()]
        if not _regexSearchRegPolData(r'{0}'.format(re.escape(gpt_extension_guid)),
                                      gpt_ext_str):
            gpt_ext_str = gpt_ext_str.split('=')
            gpt_ext_str[1] = gpt_extension_guid  gpt_ext_str[1]
            gpt_ext_str = '='.join(gpt_ext_str)
            gpt_ini_data = gpt_ini_data[0:gpt_ext_loc.start()]  gpt_ext_str  gpt_ini_data[gpt_ext_loc.end():]
    else:
        general_location = re.search(r'^\[General\]\r\n',
                                     gpt_ini_data,
                                     re.IGNORECASE | re.MULTILINE)
        gpt_ini_data = ""{0}{1}={2}\r\n{3}"".format(
                gpt_ini_data[general_location.start():general_location.end()],
                gpt_extension, gpt_extension_guid,
                gpt_ini_data[general_location.end():])
    # https://technet.microsoft.com/en-us/library/cc978247.aspx
    if _regexSearchRegPolData(r'Version=', gpt_ini_data):
        version_loc = re.search(r'^Version=.*\r\n',
                                gpt_ini_data,
                                re.IGNORECASE | re.MULTILINE)
        version_str = gpt_ini_data[version_loc.start():version_loc.end()]
        version_str = version_str.split('=')
        version_nums = struct.unpack('>2H', struct.pack('>I', int(version_str[1])))
        if gpt_extension.lower() == 'gPCMachineExtensionNames'.lower():
            version_nums = (version_nums[0], version_nums[1]  1)
        elif gpt_extension.lower() == 'gPCUserExtensionNames'.lower():
            version_nums = (version_nums[0]  1, version_nums[1])
        version_num = struct.unpack('>I', struct.pack('>2H', *version_nums))[0]
        gpt_ini_data = ""{0}{1}={2}\r\n{3}"".format(
                gpt_ini_data[0:version_loc.start()],
                'Version', version_num,
                gpt_ini_data[version_loc.end():])
    else:
        general_location = re.search(r'^\[General\]\r\n',
                                     gpt_ini_data,
                                     re.IGNORECASE | re.MULTILINE)
        if gpt_extension.lower() == 'gPCMachineExtensionNames'.lower():
            version_nums = (0, 1)
        elif gpt_extension.lower() == 'gPCUserExtensionNames'.lower():
            version_nums = (1, 0)
        gpt_ini_data = ""{0}{1}={2}\r\n{3}"".format(
                gpt_ini_data[general_location.start():general_location.end()],
                'Version',
                int(""{0}{1}"".format(str(version_nums[0]).zfill(4), str(version_nums[1]).zfill(4)), 16),
                gpt_ini_data[general_location.end():])
    if gpt_ini_data:
        with salt.utils.files.fopen(gpt_ini_path, 'wb') as gpt_file:
            gpt_file.write(gpt_ini_data)
except Exception as e:
    msg = 'An error occurred attempting to write to {0}, the exception was {1}'.format(
            gpt_ini_path, e)
    raise CommandExecutionError(msg)
"
-------------------------------------------------------------------------
"```python
import os
import re
import struct
import salt.utils.files
from salt.exceptions import CommandExecutionError

reg_pol_header = u'\u5250\u6765\x01\x00'

if not os.path.exists(policy_file_path):
    ret = __salt__['file.makedirs'](policy_file_path)

with salt.utils.files.fopen(policy_file_path, 'wb') as pol_file:
    if not data_to_write.startswith(reg_pol_header):
        pol_file.write(reg_pol_header.encode('utf-16-le'))
    pol_file.write(data_to_write.encode('utf-16-le')

try:
    gpt_ini_data = ''
    if os.path.exists(gpt_ini_path):
        with salt.utils.files.fopen(gpt_ini_path, 'rb') as gpt_file:
            gpt_ini_data = gpt_file.read()

    if not _regexSearchRegPolData(r'\[General\]\r\n', gpt_ini_data):
        gpt_ini_data = '[General]\r\n' + gpt_ini_data

    if _regexSearchRegPolData(r'{0}='.format(re.escape(gpt_extension)), gpt_ini_data):
        # ensure the line contains the ADM guid
        gpt_ext_loc = re.search(r'^{0}=.*\r\n'.format(re.escape(gpt_extension)), gpt_ini_data, re.IGNORECASE | re.MULTILINE)
        gpt_ext_str = gpt_ini_data[gpt_ext_loc.start():gpt_ext_loc.end()]

        if not _regexSearchRegPolData(r'{0}'.format(re.escape(gpt_extension_guid)), gpt_ext_str):
            gpt_ext_str = gpt_ext_str.split('=')
            gpt_ext_str[1] = gpt_extension_guid + gpt_ext_str[1]
            gpt_ext_str = '='.join(gpt_ext_str)
            gpt_ini_data = gpt_ini_data[0:gpt_ext_loc.start()] + gpt_ext_str + gpt_ini_data[gpt_ext_loc.end():]
          
    else:
        general_location = re.search(r'^\[General\]\r\n', gpt_ini_data, re.IGNORECASE | re.MULTILINE)
        gpt_ini_data = ""{0}{1}={2}\r\n{3}"".format(gpt_ini_data[general_location.start():general_location.end()], gpt_extension, gpt_extension_guid, gpt_ini_data[general_location.end():])

    if _regexSearchRegPolData(r'Version=', gpt_ini_data):
        version_loc = re.search(r'^Version=.*\r\n', gpt_ini_data, re.IGNORECASE | re.MULTILINE)
        version_str = gpt_ini_data[version_loc.start():version_loc.end()]
        version_str = version_str.split('=')
        version_nums = struct.unpack('>2H', struct.pack('>I', int(version_str[1])))

        if gpt_extension.lower() == 'gPCMachineExtensionNames'.lower():
            version_nums = (version_nums[0], version_nums[1] + 1)
        elif gpt_extension.lower() == 'gPCUserExtensionNames'.lower():
            version_nums = (version_nums[0] + 1, version_nums[1])

        version_num = struct.unpack('>I', struct.pack('>2H', *version_nums))[0]
        gpt_ini_data = ""{0}{1}={2}\r\n{3}"".format(gpt_ini_data[0:version_loc.start()], 'Version', version_num, gpt_ini_data[version_loc.end():])
      
    else:
        general_location = re.search(r'^\[General\]\r\n', gpt_ini_data, re.IGNORECASE | re.MULTILINE)

        if gpt_extension.lower() == 'gPCMachineExtensionNames'.lower():
            version_nums = (0, 1)
        elif gpt_extension.lower() == 'gPCUserExtensionNames'.lower():
            version_nums = (1, 0)

        gpt_ini_data = ""{0}{1}={2}\r\n{3}"".format(gpt_ini_data[general_location.start():general_location.end()], 'Version',
                                                 int(""{0}{1}"".format(str(version_nums[0]).zfill(4), str(version_nums[1]).zfill(4)), 16),
                                                 gpt_ini_data[general_location.end():])

    if gpt_ini_data:
        with salt.utils.files.fopen(gpt_ini_path, 'wb') as gpt_file:
            gpt_file.write(gpt_ini_data)

except Exception as e:
    msg = 'An error occurred attempting to write to {0}, the exception was {1}'.format(gpt_ini_path, e)
    raise CommandExecutionError(msg)
```"
-------------------------------------------------------------------------
"reg_pol_header = u'\u5250\u6765\x01\x00'
if not os.path.exists(policy_file_path):
    ret = __salt__['file.makedirs'](policy_file_path)
with salt.utils.files.fopen(policy_file_path, 'wb') as pol_file:
    if not data_to_write.startswith(reg_pol_header):
        pol_file.write(reg_pol_header.encode('utf-16-le'))
    pol_file.write(data_to_write.encode('utf-16-le'))
try:
    gpt_ini_data = ''
    if os.path.exists(gpt_ini_path):
        with salt.utils.files.fopen(gpt_ini_path, 'rb') as gpt_file:
            gpt_ini_data = gpt_file.read()
    if not _regexSearchRegPolData(r'\[General\]\r\n', gpt_ini_data):
        gpt_ini_data = '[General]\r\n'  gpt_ini_data
    if _regexSearchRegPolData(r'{0}='.format(re.escape(gpt_extension)), gpt_ini_data):
        # ensure the line contains the ADM guid
        gpt_ext_loc = re.search(r'^{0}=.*\r\n'.format(re.escape(gpt_extension)),
                                gpt_ini_data,
                                re.IGNORECASE | re.MULTILINE)
        gpt_ext_str = gpt_ini_data[gpt_ext_loc.start():gpt_ext_loc.end()]
        if not _regexSearchRegPolData(r'{0}'.format(re.escape(gpt_extension_guid)),
                                      gpt_ext_str):
            gpt_ext_str = gpt_ext_str.split('=')
            gpt_ext_str[1] = gpt_extension_guid  gpt_ext_str[1]
            gpt_ext_str = '='.join(gpt_ext_str)
            gpt_ini_data = gpt_ini_data[0:gpt_ext_loc.start()]  gpt_ext_str  gpt_ini_data[gpt_ext_loc.end():]
    else:
        general_location = re.search(r'^\[General\]\r\n',
                                     gpt_ini_data,
                                     re.IGNORECASE | re.MULTILINE)
        gpt_ini_data = ""{0}{1}={2}\r\n{3}"".format(
                gpt_ini_data[general_location.start():general_location.end()],
                gpt_extension, gpt_extension_guid,
                gpt_ini_data[general_location.end():])
    # https://technet.microsoft.com/en-us/library/cc978247.aspx
    if _regexSearchRegPolData(r'Version=', gpt_ini_data):
        version_loc = re.search(r'^Version=.*\r\n',
                                gpt_ini_data,
                                re.IGNORECASE | re.MULTILINE)
        version_str = gpt_ini_data[version_loc.start():version_loc.end()]
        version_str = version_str.split('=')
        version_nums = struct.unpack('>2H', struct.pack('>I', int(version_str[1])))
        if gpt_extension.lower() == 'gPCMachineExtensionNames'.lower():
            version_nums = (version_nums[0], version_nums[1]  1)
        elif gpt_extension.lower() == 'gPCUserExtensionNames'.lower():
            version_nums = (version_nums[0]  1, version_nums[1])
        version_num = struct.unpack('>I', struct.pack('>2H', *version_nums))[0]
        gpt_ini_data = ""{0}{1}={2}\r\n{3}"".format(
                gpt_ini_data[0:version_loc.start()],
                'Version', version_num,
                gpt_ini_data[version_loc.end():])
    else:
        general_location = re.search(r'^\[General\]\r\n',
                                     gpt_ini_data,
                                     re.IGNORECASE | re.MULTILINE)
        if gpt_extension.lower() == 'gPCMachineExtensionNames'.lower():
            version_nums = (0, 1)
        elif gpt_extension.lower() == 'gPCUserExtensionNames'.lower():
            version_nums = (1, 0)
        gpt_ini_data = ""{0}{1}={2}\r\n{3}"".format(
                gpt_ini_data[general_location.start():general_location.end()],
                'Version',
                int(""{0}{1}"".format(str(version_nums[0]).zfill(4), str(version_nums[1]).zfill(4)), 16),
                gpt_ini_data[general_location.end():])
    if gpt_ini_data:
        with salt.utils.files.fopen(gpt_ini_path, 'wb') as gpt_file:
            gpt_file.write(gpt_ini_data)
except Exception as e:
    msg = 'An error occurred attempting to write to {0}, the exception was {1}'.format(
            gpt_ini_path, e)
    raise CommandExecutionError(msg)
"
-------------------------------------------------------------------------
"Recom
PRs: 42744, 42795"
-------------------------------------------------------------------------
=========================================================================
"version_num = struct.unpack('>I', struct.pack('>2H', *version_nums))[0]
"
-------------------------------------------------------------------------
"```python
import struct

version_num = struct.unpack('>I', struct.pack('>2H', *version_nums))[0]
```"
-------------------------------------------------------------------------
"version_num = struct.unpack('>I', struct.pack('>2H', *version_nums))[0]
"
-------------------------------------------------------------------------
"Recom
PRs: 41307, 41319"
-------------------------------------------------------------------------
=========================================================================
"vlist = list(ord(v) for v in value)
if vtype == 'REG_DWORD':
    for v in struct.unpack('I', struct.pack('2H', *vlist)):
        value = v
elif vtype == 'REG_QWORD':
    for v in struct.unpack('I', struct.pack('4H', *vlist)):
        value = v
"
-------------------------------------------------------------------------
"```python
if vtype == 'REG_DWORD' or vtype == 'REG_QWORD':
    value = sum(v << (i * 16) for i, v in enumerate(struct.unpack('H' * (len(vlist) + 1), struct.pack('H' * len(vlist), *vlist)))
```"
-------------------------------------------------------------------------
"vlist = list(ord(v) for v in value)
if vtype == 'REG_DWORD':
    for v in struct.unpack('I', struct.pack('2H', *vlist)):
        value = v
elif vtype == 'REG_QWORD':
    for v in struct.unpack('I', struct.pack('4H', *vlist)):
        value = v
"
-------------------------------------------------------------------------
"Recom
PRs: 41301, 41303"
-------------------------------------------------------------------------
=========================================================================
"'__salt__': {'cp.get_template': self.mock_cp,
             'cp.get_file': self.mock_cp}
"
-------------------------------------------------------------------------
"```python
'__salt__': {
    'cp.get_template': self.mock_cp,
    'cp.get_file': self.mock_cp,
    'jnpr.junos.device.Device': self.mock_device,
}
```"
-------------------------------------------------------------------------
"'__salt__': {'cp.get_template': self.mock_cp,
             'cp.get_file': self.mock_cp}
"
-------------------------------------------------------------------------
"Recom
PRs: 41247, 41282"
-------------------------------------------------------------------------
=========================================================================
"'docker.client', 'docker.exec_driver', 'dockerng._pull_status',
"
-------------------------------------------------------------------------
"```python
import docker
from docker import exec_driver
from dockerng import _pull_status
```"
-------------------------------------------------------------------------
"client_timeout = kwargs.pop('client_timeout')
if client_timeout is not None:
    # Passing a kwarg of timeout=None causes problems in docker-py, so
    # only set this kwarg if the value is not None.
    client_kwargs['timeout'] = client_timeout
"
-------------------------------------------------------------------------
"Recom
PRs: 40481, 40562"
-------------------------------------------------------------------------
=========================================================================
"if not getattr(adml_search_result, 'text', '').strip() == policy_name:
"
-------------------------------------------------------------------------
"if not getattr(adml_search_result, 'text', '').strip() == policy_name:"
-------------------------------------------------------------------------
"if not getattr(adml_search_result, 'text', '').strip() == policy_name:
"
-------------------------------------------------------------------------
"Recom
PRs: 40253, 40255"
-------------------------------------------------------------------------
=========================================================================
"from salttesting import skipIf
"
-------------------------------------------------------------------------
from salttesting import skipIf
-------------------------------------------------------------------------
"from salttesting import skipIf
"
-------------------------------------------------------------------------
"Recom
PRs: 36194, 36424"
-------------------------------------------------------------------------
=========================================================================
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"```python
@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
``` "
-------------------------------------------------------------------------
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"Recom
PRs: 36194, 36424"
-------------------------------------------------------------------------
=========================================================================
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')"
-------------------------------------------------------------------------
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"Recom
PRs: 36194, 36424"
-------------------------------------------------------------------------
=========================================================================
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')"
-------------------------------------------------------------------------
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"Recom
PRs: 36194, 36424"
-------------------------------------------------------------------------
=========================================================================
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
@destructiveTest
"
-------------------------------------------------------------------------
"```python
@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
@destructiveTest
```"
-------------------------------------------------------------------------
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
@destructiveTest
"
-------------------------------------------------------------------------
"Recom
PRs: 36194, 36424"
-------------------------------------------------------------------------
=========================================================================
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"```python
@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
```"
-------------------------------------------------------------------------
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"Recom
PRs: 36194, 36424"
-------------------------------------------------------------------------
=========================================================================
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"@pytest.mark.skip(""Skip until we can figure out why modifying the system clock causes ZMQ errors"")
    def test_zone_compare(self):"
-------------------------------------------------------------------------
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"Recom
PRs: 36194, 36424"
-------------------------------------------------------------------------
=========================================================================
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"```python
@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
```"
-------------------------------------------------------------------------
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"Recom
PRs: 36194, 36424"
-------------------------------------------------------------------------
=========================================================================
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"```python
@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
```"
-------------------------------------------------------------------------
"@skipIf(True, 'Skip until we can figure out why modifying the system clock causes ZMQ errors')
"
-------------------------------------------------------------------------
"Recom
PRs: 36194, 36424"
-------------------------------------------------------------------------
=========================================================================
"if tuple(version) >= (3, 5, 7):
"
-------------------------------------------------------------------------
"```python
if tuple(version) >= (3, 5, 7):
```"
-------------------------------------------------------------------------
"if tuple(version) >= (3, 5, 7):
"
-------------------------------------------------------------------------
"Recom
PRs: 33734, 34333"
-------------------------------------------------------------------------
=========================================================================
"'master to continue to use this {2} remote.'
"
-------------------------------------------------------------------------
'master to continue to use this {2} remote.'
-------------------------------------------------------------------------
"log.error(_INVALID_REPO.format(self.cachedir, self.url, self.role))
"
-------------------------------------------------------------------------
"Recom
PRs: 33244, 33245"
-------------------------------------------------------------------------
=========================================================================
"log.error(_INVALID_REPO.format(self.cachedir, self.url, self.role))
"
-------------------------------------------------------------------------
"```python
log.error(f""{self.cachedir}, {self.url}, {self.role}"")
```"
-------------------------------------------------------------------------
"log.error(_INVALID_REPO.format(self.cachedir, self.url, self.role))
"
-------------------------------------------------------------------------
"Recom
PRs: 33244, 33245"
-------------------------------------------------------------------------
=========================================================================
"changed = True
ret['comment'] = ' '.join([ret['comment'], '- files are identical but force flag is set'])
"
-------------------------------------------------------------------------
"```python
changed = True
ret['comment'] = ' '.join([ret['comment'], '- files are identical but force flag is set'])
```"
-------------------------------------------------------------------------
"changed = True
ret['comment'] = ' '.join([ret['comment'], '- files are identical but force flag is set'])
"
-------------------------------------------------------------------------
"Recom
PRs: 32732, 32851"
-------------------------------------------------------------------------
=========================================================================
"changed = True
ret['comment'] = ' '.join([ret['comment'], '- files are identical but force flag is set'])
"
-------------------------------------------------------------------------
"```python
changed = True
ret['comment'] = ' '.join([ret['comment'], '- files are identical but force flag is set'])
```"
-------------------------------------------------------------------------
"changed = True
ret['comment'] = ' '.join([ret['comment'], '- files are identical but force flag is set'])
"
-------------------------------------------------------------------------
"Recom
PRs: 32732, 32848"
-------------------------------------------------------------------------
=========================================================================
"changed = True
ret['comment'] = ' '.join([ret['comment'], '- files are identical but force flag is set'])
"
-------------------------------------------------------------------------
"```python
changed = True
ret['comment'] = ' '.join([ret['comment'], '- files are identical but force flag is set'])
```"
-------------------------------------------------------------------------
"changed = True
ret['comment'] = ' '.join([ret['comment'], '- files are identical but force flag is set'])
"
-------------------------------------------------------------------------
"Recom
PRs: 32732, 32847"
-------------------------------------------------------------------------
=========================================================================
